
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			ФлагиПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Партнер,"Клиент,Поставщик,Наименование");
			Если ФлагиПартнера.Клиент <> Истина И ФлагиПартнера.Поставщик <> Истина Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр(
					"ru = 'Создание договора возможно для партнеров с признаками ""Клиент/Поставщик""'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту 
				И ФлагиПартнера.Клиент <> Истина Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр(
					"ru = 'Создание договора с клиентом возможно для партнеров с признаком ""Клиент""'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика 
				И ФлагиПартнера.Поставщик <> Истина Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр(
					"ru = 'Создание договора с поставщиком возможно для партнеров с признаком ""Поставщик""'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПриЧтенииСозданииНаСервере();
		
		Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером
			И ТолькоКомиссионныеПродажи25 Тогда
			Объект.КомиссионныеПродажи25 = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КомиссионерПартнер) Тогда
			КомиссионерПартнерПриИзмененииНаСервере();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорСКомиссионером) Тогда
			ДоговорСКомиссионеромПриИзмененииНаСервере();
		КонецЕсли;
		
		УстановитьЗначенияРеквизитовДисконтирования();
		
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ВзаиморасчетыСервер.ФормаПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	ПараметрыПриСозданииНаСервере.Форма                 = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	
	ДоговорыКонтрагентовЛокализация.ПриСозданииНаСервереФормаЭлемента(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УправлениеЭлементамиДисконтирования();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	Элементы.ГруппаСуммаДоговора.Видимость = Не (Объект.ТипДоговора = Перечисления.ТипыДоговоров.РеализацияЧерезКомиссионера
		ИЛИ Объект.КомиссионныеПродажи25);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	СуммаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриОткрытии = ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии();
	ПараметрыПриОткрытии.Форма                            = ЭтотОбъект;
	ПараметрыПриОткрытии.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
	ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ПараметрыПриОткрытии);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ДоговорыКонтрагентовКлиентЛокализация.ПриОткрытии(Отказ, ЭтаФорма);
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	ВзаиморасчетыСервер.ФормаПриЧтенииНаСервере(ЭтаФорма);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ФиксированнаяСуммаДоговора И Объект.Сумма = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не заполнена сумма договора.'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"Объект.Сумма",,
			Отказ);
	КонецЕсли;

	Если ПрименитьСтавкуДисконтированияПоРассрочке Тогда
		
		Если Объект.СтавкаДисконтирования = 0 Тогда
		
			ТекстОшибки = НСтр("ru = 'Не заполнена ставка дисконтирования.'");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				"Объект.СтавкаДисконтирования",,
				Отказ);
		КонецЕсли;
				
	КонецЕсли;	
	
	ИспользоватьОформлениеЗакупок = ИспользоватьОформлениеЗакупок();
	
	ВариантПриемкиОбязателенДляЗаполнения = (ИспользоватьОрдернуюСхемуПриПоступлении
												Или ИспользоватьТоварыВПутиОтПоставщиков
												Или ИспользоватьНеотфактурованныеПоставки)
												И ИспользоватьОформлениеЗакупок;
	
	Если Не ВариантПриемкиОбязателенДляЗаполнения Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОформлениеОрдера");
		МассивНепроверяемыхРеквизитов.Добавить("ПриемкаТоваров");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДоговорыКонтрагентовЛокализация.ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ДоговорыКонтрагентовЛокализация.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ОбновитьЗаголовокФормы();
	ВзаиморасчетыСервер.ФормаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект.ДополнительныеСвойства);
	УстановитьКоличествоФилиалов(Элементы.ДекорацияФилиалы, Объект.Филиалы.Количество());
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);

	СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ДоговорыКонтрагентовЛокализация.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ГрафикИсполненияДоговора" Тогда
		Если Объект.Ссылка = Параметр.Договор Тогда
			
			Объект.ГрафикИсполненияДоговора = Источник;
			Объект.Сумма = Параметр.СуммаДоговора;
			
			ИзменениеГрафикаИсполненияНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если ВзаиморасчетыКлиент.НуженВызовОбработкиОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ИзмененаОплатаСервер(ИмяСобытия, Параметр);
	КонецЕсли;
	
	ДоговорыКонтрагентовКлиентЛокализация.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСправочника();
	ПараметрыОповещенияЭДО.Форма                            = ЭтотОбъект;
	ПараметрыОповещенияЭДО.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;

	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПроизведенаЗапись = Истина;
	ВзаиморасчетыКлиент.ФормаПослеЗаписи(ЭтаФорма);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область УниверсальныеОбработчикиСобытий

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)
	ДоговорыКонтрагентовКлиентЛокализация.ПриИзмененииРеквизита(
		Элемент,
		ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДоговорыКонтрагентовКлиентЛокализация.ОбработкаНавигационнойСсылкиФормы(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииИзмененияРеквизитаЛокализации(ИмяЭлемента, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере(ИмяЭлемента, ПараметрыОбработки)
	
	ДоговорыКонтрагентовЛокализация.ПриОкончанииИзмененияРеквизита(ИмяЭлемента, ЭтаФорма, ПараметрыОбработки);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Закрыт") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДоговораПриИзменении(Элемент)
	
	ТипДоговораПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	Если Не Объект.ТипДоговора = Перечисления.ТипыДоговоров.РеализацияЧерезКомиссионера Тогда
	
		ПартнерПриИзмененииСервер(Объект.Партнер, 
									Объект.Контрагент, 
									Объект.ОплатаВВалюте, 
									Объект.БанковскийСчетКонтрагента, 
									Объект.КонтактноеЛицо, 
									КонтрагентЮрФизЛицо,
									Объект.Организация);
	
	Иначе
	
		БанковскийСчетКонтрагента = Неопределено;
		КонтактноеЛицо = Неопределено;
		КонтрагентЮрФизЛицоКлиент = Неопределено;
		
		ПартнерПриИзмененииСервер(Объект.Партнер, 
								Объект.Контрагент, 
								Ложь, 
								БанковскийСчетКонтрагента, 
								КонтактноеЛицо, 
								КонтрагентЮрФизЛицоКлиент,
								Объект.Организация);
	
		Если Объект.КомиссионныеПродажи25 Тогда
			УстановитьПараметрыВыбораВидаЦенНаСервере();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	КонтактноеЛицоПриИзмененииСервер(Объект.Партнер, 
										Объект.Контрагент, 
										Объект.ОплатаВВалюте, 
										Объект.БанковскийСчетКонтрагента, 
										Объект.КонтактноеЛицо, 
										КонтрагентЮрФизЛицо,
										Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентПриИзмененииСервер(Объект.Контрагент, Объект.ОплатаВВалюте, Объект.БанковскийСчетКонтрагента, КонтрагентЮрФизЛицо, Объект.Организация);
	ЗаполнитьНалогообложениеИВидДеятельности();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияПриИзменении(Элемент)
	
	ДатаОкончанияДействияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ВалютаВзаиморасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Элементы.НаименованиеДляПечати.СписокВыбора.Очистить();
	Элементы.НаименованиеДляПечати.СписокВыбора.Добавить(Объект.Наименование);
КонецПроцедуры

&НаКлиенте
Процедура КлассификацияЗадолженностиПриИзменении(Элемент)
	
	УстановитьКлассификациюЗадолженности(КлассификацияЗадолженности);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	ПорядокРасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФиксированнаяСуммаДоговораПриИзменении(Элемент)
	
	Если Не ФиксированнаяСуммаДоговора Тогда
		ГрафикИсполненияВДоговоре = 0;
		Объект.ЗаданГрафикИсполнения = Ложь;
		Объект.Сумма = 0;
	КонецЕсли;
	
	УправлениеЭлементамиГрафикИсполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьСтавкуДисконтированияПоРассрочкеПриИзменении(Элемент)
	
	Если Не ПрименитьСтавкуДисконтированияПоРассрочке Тогда
		Объект.СтавкаДисконтирования = 0;
		Объект.СрокДляПримененияДисконтирования = 0;
	Иначе
		УстановитьЗначенияРеквизитовДисконтирования();
		Если Объект.СтавкаДисконтирования = 0 И Не ПрименитьСтавкуДисконтированияПоРассрочке Тогда
			// Если нет значений по умолчанию, тогда значение ставки = 0
			// Установим флаг принудительно
			ПрименитьСтавкуДисконтированияПоРассрочке = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиДисконтирования(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ГрафикИсполненияВДоговореПриИзменении(Элемент)
	
	Объект.ЗаданГрафикИсполнения = (ГрафикИсполненияВДоговоре = 1);
	
	УправлениеЭлементамиГрафикИсполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьГрафикИсполненияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Договор еще не записан. Переход к редактированию графика возможен только после записи договора и установки статуса ""Действует"".'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для ввода графика укажите дату договора.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Договор", Объект.Ссылка);
	
	СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
	СтруктураПараметры.Вставить("Сумма", Объект.Сумма);
	СтруктураПараметры.Вставить("Ключ", Объект.ГрафикИсполненияДоговора);
	
	ОткрытьФорму("Документ.ГрафикИсполненияДоговора.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Объект.ГрафикИсполненияДоговора.Пустая() Тогда
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Объект.ГрафикИсполненияДоговора);
		
		ОткрытьФорму(
			"Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета",
			Новый Структура("ВходящиеДокументы", СписокДокументов),
			ЭтаФорма,
			Истина
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеПоСуммеПродажи = Новый Структура("СуммаВзаиморасчетов, Организация", Объект.Сумма, Объект.Организация);
	ПродажиКлиент.ОткрытьОтчетРасшифровкиЗапретаОтгрузки(Объект.Ссылка, ДанныеПоСуммеПродажи, Объект.Ссылка, НоваяАрхитектураВзаиморасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимНалогообложенияПриИзменении(Элемент)
	
	РежимНалогообложенияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаздельногоУчетаНДСПриИзменении(Элемент)
	
	Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе = ?(РежимРаздельногоУчетаНДС = 1, Истина, Ложь);
	ЗаполнитьНалогообложениеИВидДеятельности();
	УстановитьСвойстваЭлементовНалогообложенияИРаздельногоУчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОформлениеДокументовРаздельнойЗакупкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Объект.ВариантОформленияЗакупок = ?(Не ИспользоватьОформлениеДокументовРаздельнойЗакупки,
										ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.НеРазделять"),
										?(ВариантОформленияРаздельнойЗакупки = "ТоварыВПути",
											ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.ТоварыВПути"),
											ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки")));
	
	ПриИзмененииНастроекПриемкиСервер();
	
	Элементы.ВариантОформленияРаздельнойЗакупки.Доступность = ИспользоватьОформлениеДокументовРаздельнойЗакупки
																И Объект.ТипДоговора <> ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Импорт");
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОформленияРаздельнойЗакупкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Объект.ВариантОформленияЗакупок = ?(ВариантОформленияРаздельнойЗакупки = "ТоварыВПути",
										ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.ТоварыВПути"),
										ПредопределенноеЗначение("Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки"));
	
	ПриИзмененииНастроекПриемкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеОрдераПриИзменении(Элемент)
	Модифицированность = Истина;
	ПриИзмененииНастроекПриемкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаТоваровПриИзменении(Элемент)
	Модифицированность = Истина;
	ПриИзмененииНастроекПриемкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура КомиссионерПартнерПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	КомиссионерПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КомиссионерПартнерПриИзмененииНаСервере()
	
	БанковскийСчетКонтрагента = Неопределено;
	КонтактноеЛицо = Неопределено;
	КонтрагентЮрФизЛицоКлиент = Неопределено;
	
	ПартнерПриИзмененииСервер(Объект.КомиссионерПартнер, 
							Объект.КомиссионерКонтрагент, 
							Ложь, 
							БанковскийСчетКонтрагента, 
							КонтактноеЛицо, 
							КонтрагентЮрФизЛицоКлиент,
							Объект.Организация);
	
	УстановитьДоговорСКомиссионеромПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссионерКонтрагентПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	УстановитьДоговорСКомиссионеромПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСКомиссионеромПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ДоговорСКомиссионеромПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСКомиссионеромСоздание(Элемент, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Договор еще не записан. Перед созданием договора с комиссионером необходимо записать данный договор с клиентом.'"));
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорСКомиссионеромПриИзмененииНаСервере()
	
	ДоговорСКомиссионером = Объект.ДоговорСКомиссионером;
	
	Если ЗначениеЗаполнено(ДоговорСКомиссионером) Тогда
		Объект.ПорядокРасчетов = ДоговорСКомиссионером.ПорядокРасчетов;
		Если ДоговорСКомиссионером.ВестиРасчетыЧерезКонечныхПокупателей Тогда
			Объект.ГруппаФинансовогоУчета = ДоговорСКомиссионером.ГруппаФинансовогоУчетаКлиента;
		Иначе
			Объект.ГруппаФинансовогоУчета = ДоговорСКомиссионером.ГруппаФинансовогоУчета;
		КонецЕсли;
		Объект.ВалютаВзаиморасчетов = ДоговорСКомиссионером.ВалютаВзаиморасчетов;
		Объект.ВестиРасчетыЧерезКонечныхПокупателей = ДоговорСКомиссионером.ВестиРасчетыЧерезКонечныхПокупателей;
	Иначе
		Объект.ВестиРасчетыЧерезКонечныхПокупателей = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область Доставка

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
		Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОплатаВВалютеПриИзменении(Элемент)
	
	ОбработатьБанковскиеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦентрализованныйДоговорПриИзменении(Элемент)
	
	Элементы.ДекорацияФилиалы.Доступность = Объект.ЦентрализованныйДоговор;
	Элементы.РазрешаетсяПередачаОплатМеждуФилиалами.Видимость = Объект.ЦентрализованныйДоговор;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияФилиалыНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Филиалы", Объект.Филиалы);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ОбработкаСохраненияСпискаФилиалов = Новый ОписаниеОповещения("ЗавершениеРедактированияСпискаФилиалов", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаСпискаФилиалов", ПараметрыФормы, ЭтотОбъект,
		УникальныйИдентификатор,,, ОбработкаСохраненияСпискаФилиалов, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиРасчетыЧерезКонечныхПокупателейПриИзменении(Элемент)
	
	ЭтоДоговорСКомиссионером = ?(Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"),
		Истина, Ложь);
		
	ЭтоНоваяКомиссия = ЭтоДоговорСКомиссионером
		И ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.КомиссионныеПродажи25, ТолькоКомиссионныеПродажи25
		Или Объект.КомиссионныеПродажи25);
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаФинансовогоУчетаКлиента",
		"Видимость", ЭтоНоваяКомиссия И Объект.ВестиРасчетыЧерезКонечныхПокупателей);
	
	НастроитьСписокВыбораПорядкаРасчетов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#Область УниверсальныеОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЛокализации(Команда)
	
	ДоговорыКонтрагентовКлиентЛокализация.ВыполнитьКомандуЛокализации(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыЛокализации(ИмяКоманды, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТребуетсяВызовСервера Тогда
		ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ДополнительныеПараметры.ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьВыполнениеКомандыЛокализацииНаСервере(ИмяКоманды, ПараметрыОбработки)
	
	ДоговорыКонтрагентовЛокализация.ВыполнитьКомандуЛокализации(ЭтаФорма, ИмяКоманды, ПараметрыОбработки);
	
КонецПроцедуры
	
#КонецОбласти

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачалаДействия", "ДатаОкончанияДействия"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетОплаты(Команда)
	
	ВзаиморасчетыКлиент.ЗачетОплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ПараметрыРедактирования = ОбщегоНазначенияУТКлиент.ПараметрыРазрешенияРедактированияРеквизитовОбъекта();
	ПараметрыРедактирования.ТолькоВидимые = Ложь;
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма, ПараметрыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ТипДоговораПриИзмененииСервер()
	
	СтараяХозяйственнаяОперация		= Объект.ХозяйственнаяОперация;
	Объект.ХозяйственнаяОперация	= Справочники.ДоговорыКонтрагентов.ХозяйственнаяОперация(Объект.ТипДоговора,
																								Объект.ВариантОформленияЗакупок);
	
	Если СтараяХозяйственнаяОперация <> Объект.ХозяйственнаяОперация Тогда
		Объект.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка();
		Объект.ГруппаФинансовогоУчетаКлиента = Справочники.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка();
	КонецЕсли;
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	
	РеквизитыПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Партнер, "Клиент, Поставщик");
	
	Если ЗначениеЗаполнено(Объект.Партнер)
		И (Не РеквизитыПартнера.Клиент
			И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		   ИЛИ Не РеквизитыПартнера.Поставщик
			И (ОперацииЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
				Или ОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика2_5
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)) Тогда
		
		Объект.Партнер		= Справочники.Партнеры.ПустаяСсылка();
		Объект.Контрагент	= Справочники.Контрагенты.ПустаяСсылка();
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		ПартнерПриИзмененииНаСервере();
		
	КонецЕсли;
	
	УстановитьВидимостьКонтроляЗадолженности(ЭтаФорма);
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		Объект.ОграничиватьСуммуЗадолженности = Ложь;
	КонецЕсли;
	
	Если Объект.ТипДоговора <> Перечисления.ТипыДоговоров.СПокупателем Тогда
		Объект.ЗапрещаетсяПросроченнаяЗадолженность = Ложь;
	КонецЕсли;
	
	ЗаполнитьНалогообложениеИВидДеятельности();
	
	Если Объект.ТипДоговора <> Перечисления.ТипыДоговоров.СПоклажедателем Тогда
		Объект.ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение = Перечисления.ПорядокОформленияСписанияТоваровПринятыхНаХранение.ПустаяСсылка();
	Иначе
		Объект.ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение = Перечисления.ПорядокОформленияСписанияТоваровПринятыхНаХранение.ОформлятьСписание;
	КонецЕсли;
	
	Если Не (Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.ВвозИзЕАЭС
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком) Тогда
		
		Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
		
		ИнициализироватьВариантОформленияЗакупок();
		
	КонецЕсли;
	
	Если ИспользоватьОформлениеДокументовРаздельнойЗакупки
		И Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт Тогда
		
		Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ТоварыВПути;
		
		ИнициализироватьВариантОформленияЗакупок();
		
	КонецЕсли;
	
	Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером Тогда
		Если ТолькоКомиссионныеПродажи25 ИЛИ НЕ ИспользоватьСоглашенияСКлиентами ИЛИ НЕ ВыбиратьВерсиюКомиссионныхПродаж Тогда
			Объект.КомиссионныеПродажи25 = Истина;
			Объект.ЗаданГрафикИсполнения = Ложь;
			Объект.Сумма = 0;
		КонецЕсли;
	Иначе
		Объект.КомиссионныеПродажи25 = Ложь;
		Объект.ВидЦенПродажи = Справочники.ВидыЦен.ПустаяСсылка();
		Объект.ВидЦенУчетный = Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
	Если Не Объект.ТипДоговора = Перечисления.ТипыДоговоров.РеализацияЧерезКомиссионера Тогда
		Объект.ДоговорСКомиссионером = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Объект.КомиссионерКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.КомиссионерПартнер = Справочники.Партнеры.ПустаяСсылка();
		Объект.ГруппаФинансовогоУчетаКлиента = Справочники.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка();
	КонецЕсли;
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, "ПорядокРасчетов");
	
	ЗаполнитьПараметрыВыбораПартнера();
	НастроитьСписокВыбораПорядкаРасчетов();
	НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств();
	УстановитьСвойстваЭлементовНалогообложенияИРаздельногоУчетаНДС();
	ОбновитьЗаголовокФормы();
	УправлениеЭлементамиГрафикИсполнения();
	УстановитьВидимостьНаправленияДеятельности();
	УстановитьВидимостьВариантовРаздельнойЗакупки();
	УстановитьВидимостьПорядокСписанияПринятыхТоваров(ЭтаФорма);
	УстановитьВидимостьНоваяСхемаКомиссии();
	УстановитьВидимостьЦентрализованногоДоговора();
	ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере("ТипДоговора", Неопределено);
	
	ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтаФорма);
	
	УчетНДСУП.ЗаполнитьСтавкуНДСДляПлатежей(Объект.СтавкаНДС, Объект.НалогообложениеНДС, Объект.Организация, Объект.ДатаОкончанияДействия);
	УстановитьСвойстваЭлементовНалогообложенияИРаздельногоУчетаНДС();
	ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере("НалогообложениеНДС", Неопределено);
	
	УстановитьЗначенияРеквизитовДисконтирования();
	УправлениеЭлементамиДисконтирования();
	НалогообложениеНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВыбораПартнера()
	
	МассивПараметровВыбораПартнера = Новый Массив;
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииВСтранахЕАЭС = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера Тогда
		
		МассивПараметровВыбораПартнера.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли ОперацииЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииВСтранахЕАЭС.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика2_5
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
		
		МассивПараметровВыбораПартнера.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		
	КонецЕсли;
	
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораПартнера);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПартнерПриИзмененииСервер(Партнер, Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, КонтактноеЛицо, КонтрагентЮрФизЛицо, Организация)
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, Организация);
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
	
КонецПроцедуры

&НаСервере
Процедура ВалютаВзаиморасчетовПриИзмененииСервер()
	
	ВалютаОплатыРегл = ?(Объект.ОплатаВВалюте, Ложь, Неопределено);
					
	Объект.ОплатаВВалюте = ВзаиморасчетыСервер.ПолучитьОплатуВВалютеПоУмолчанию(ВалютаОплатыРегл, Объект.Организация);
	
	УстановитьДоговорСКомиссионеромПоУмолчанию();
	ОбработатьБанковскиеСчета();
	
	УстановитьЗначенияРеквизитовДисконтирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьСуммуЗадолженностиПриИзменении(Элемент)
	
	УстановитьВидимостьКонтроляЗадолженности(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтактноеЛицоПриИзмененииСервер(Партнер, Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, КонтактноеЛицо, КонтрагентЮрФизЛицо, Организация)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Партнер Тогда
		Партнер = ВладелецКонтактногоЛица;
		ПартнерПриИзмененииСервер(Партнер, Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, КонтактноеЛицо, КонтрагентЮрФизЛицо, Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииСервер(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, КонтрагентЮрФизЛицо, Организация)
	
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, Организация);
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
		
КонецПроцедуры

&НаСервере
Процедура ПорядокРасчетовПриИзмененииСервер()
	
	Если (Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
		И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамНакладным)
		ИЛИ (Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером
			И Объект.КомиссионныеПродажи25) Тогда
		Объект.ЗаданГрафикИсполнения = Ложь;
	КонецЕсли;
	
	УправлениеЭлементамиГрафикИсполнения();
	УстановитьВидимостьЦентрализованногоДоговора();
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "ПорядокРасчетов");
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер()
	
	Если Не УчетНДСУП.СтавкаНДСКорректна(Объект.СтавкаНДС, Объект.НалогообложениеНДС, Объект.Организация, Объект.ДатаОкончанияДействия) Тогда
		Объект.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	УчетНДСУП.ЗаполнитьСтавкуНДСДляПлатежей(Объект.СтавкаНДС, Объект.НалогообложениеНДС, Объект.Организация, Объект.ДатаОкончанияДействия);
	УстановитьСвойстваЭлементовНалогообложенияИРаздельногоУчетаНДС();
	ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере("НалогообложениеНДС", Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНазначения = "НалогообложениеНДСОпределяетсяВДокументе";
	ЗначенияРеквизитовНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.НаправлениеДеятельности, РеквизитыНазначения);
	
	Если Перечисления.ТипыДоговоров.ЭтоДоговорПродажи(Объект.ТипДоговора) Тогда
		
		Объект.НалогообложениеНДСОпределяетсяВДокументе = ЗначенияРеквизитовНазначения.НалогообложениеНДСОпределяетсяВДокументе;
		ЗаполнитьНалогообложениеИВидДеятельности();
		
		Если Объект.НалогообложениеНДСОпределяетсяВДокументе Тогда
			РежимНалогообложения = 1;
		Иначе
			РежимНалогообложения = 0;
		КонецЕсли;
		
		Элементы.НалогообложениеНДС.Доступность = НЕ Объект.НалогообложениеНДСОпределяетсяВДокументе;
		
	ИначеЕсли Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(Объект.ТипДоговора) Тогда
		
		Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе = ЗначенияРеквизитовНазначения.НалогообложениеНДСОпределяетсяВДокументе;
		ЗаполнитьНалогообложениеИВидДеятельности();
		
		Если Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе Тогда
			РежимРаздельногоУчетаНДС = 1;
		Иначе
			РежимРаздельногоУчетаНДС = 0;
		КонецЕсли;
		
		Элементы.ЗакупкаПодДеятельность.Доступность = НЕ Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РежимНалогообложенияПриИзмененииСервер()
	
	Объект.НалогообложениеНДСОпределяетсяВДокументе = ?(РежимНалогообложения = 1, Истина, Ложь);
	ЗаполнитьНалогообложениеИВидДеятельности();
	НалогообложениеНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБанковскиеСчета()
	
	ПараметрыВыбораБанковскихСчетов = ПараметрыВыбораБанковскихСчетов(Объект.ОплатаВВалюте, Объект.Организация);
	Элементы.БанковскийСчет.ПараметрыВыбора            = ПараметрыВыбораБанковскихСчетов;
	Элементы.БанковскийСчетКонтрагента.ПараметрыВыбора = ПараметрыВыбораБанковскихСчетов;
	
	Если НЕ БанковскийСчетСоответствуетПорядкуОплаты(Объект.БанковскийСчет, Объект.ОплатаВВалюте, Объект.Организация) Тогда
		Объект.БанковскийСчет = Неопределено;
	КонецЕсли;
	ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ОплатаВВалюте, Объект.БанковскийСчет);
	
	Если НЕ БанковскийСчетСоответствуетПорядкуОплаты(Объект.БанковскийСчетКонтрагента, Объект.ОплатаВВалюте, Объект.Организация) Тогда
		Объект.БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, Объект.ОплатаВВалюте, Объект.БанковскийСчетКонтрагента, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура СуммаПриИзмененииСервер()
	ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НоваяСхемаКомиссииПриИзменении(Элемент)
	
	ТипДоговораПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныйВидЦенНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораВидаЦенНаСервере("ВидЦенУчетный");
	
КонецПроцедуры


&НаКлиенте
Процедура ВидЦенПродажиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораВидаЦенНаСервере("ВидЦенПродажи");
	
КонецПроцедуры


#КонецОбласти

#Область Доставка

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы)
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	// << 21.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-615
	ПриЧтенииСозданииНаСервереДополнительно();
	// >> 21.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-615
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изменить", "Доступность", Ложь);

	ГоловнаяОрганизация = Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ГоловнаяОрганизация");
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо");
	КлассификацияЗадолженности = ?(Объект.УстановленСрокОплаты И Объект.СрокОплаты > 365, 1, 0);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		Объект.ВалютаВзаиморасчетов = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
		Объект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	КонецЕсли;
	
	ИспользоватьОрдернуюСхемуПриПоступлении = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении");
	ИспользоватьТоварыВПутиОтПоставщиков    = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьНеотфактурованныеПоставки   = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	НоваяАрхитектураВзаиморасчетов          = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	ИспользоватьНесколькоОрганизаций        = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс");
	ИспользоватьСоглашенияСКлиентами        = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ВыбиратьВерсиюКомиссионныхПродаж        = ПолучитьФункциональнуюОпцию("ВыбиратьВерсиюКомиссионныхПродаж")
												ИЛИ (ЗначениеЗаполнено(Объект.Ссылка) И НЕ Объект.КомиссионныеПродажи25);
	ТолькоКомиссионныеПродажи25             = ПолучитьФункциональнуюОпцию("ТолькоКомиссионныеПродажи25")
												ИЛИ НЕ ИспользоватьСоглашенияСКлиентами ИЛИ НЕ ВыбиратьВерсиюКомиссионныхПродаж;
	
	ФиксированнаяСуммаДоговора = (Объект.Сумма <> 0);
	Если Объект.ЗаданГрафикИсполнения Тогда
		ГрафикИсполненияВДоговоре = 1;
	Иначе
		ГрафикИсполненияВДоговоре = 0;
	КонецЕсли;
	ПрименитьСтавкуДисконтированияПоРассрочке = (Объект.СтавкаДисконтирования <> 0);
	
	ИнициализироватьВариантОформленияЗакупок();
	Если Объект.НалогообложениеНДСОпределяетсяВДокументе Тогда
		РежимНалогообложения = 1;
	Иначе
		РежимНалогообложения = 0;
	КонецЕсли;
	
	Если Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе Тогда
		РежимРаздельногоУчетаНДС = 1;
	Иначе
		РежимРаздельногоУчетаНДС = 0;
	КонецЕсли;
	
	ЗакупкиСервер.ЗаполнитьНастройкиВариантовПриемки(Объект.ВариантПриемкиТоваров, ОформлениеПоступления, ПриемкаТоваров);
	ЗакупкиСервер.ЗаполнитьСписокВыбораВариантовПриемкиПоДоговорам(Элементы.ОформлениеПоступления,
																	Элементы.ПриемкаТоваров,
																	Объект.ВариантОформленияЗакупок);
	
	ПараметрыВыбораБанковскогоСчета = ПараметрыВыбораБанковскихСчетов(Объект.ОплатаВВалюте, Объект.Организация);
	Элементы.БанковскийСчет.ПараметрыВыбора            = ПараметрыВыбораБанковскогоСчета;
	Элементы.БанковскийСчетКонтрагента.ПараметрыВыбора = ПараметрыВыбораБанковскогоСчета;
	ЗаполнитьПараметрыВыбораПартнера();
	НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	НастроитьСписокВыбораПорядкаРасчетов();
	УстановитьВидимостьКонтроляЗадолженности(ЭтаФорма);
	УстановитьСвойстваЭлементовНалогообложенияИРаздельногоУчетаНДС();
	УправлениеЭлементамиГрафикИсполнения();
	УстановитьВидимостьЦентрализованногоДоговора();

	УстановитьВидимостьНаправленияДеятельности();
	УстановитьВидимостьВариантовРаздельнойЗакупки();
	УстановитьЗаголовкиРеквизитовПриемкиТоваров();
	УстановитьВидимостьПорядокСписанияПринятыхТоваров(ЭтаФорма);
	УстановитьВидимостьНоваяСхемаКомиссии();
	
	ОбновитьЗаголовокФормы();
	
	Элементы.НаименованиеДляПечати.СписокВыбора.Очистить();
	Элементы.НаименованиеДляПечати.СписокВыбора.Добавить(Объект.Наименование);
	
	Если ТолькоПросмотр Тогда
		Элементы.ФиксированнаяСуммаДоговора.ТолькоПросмотр = Истина;
		Элементы.КлассификацияЗадолженности.ТолькоПросмотр = Истина;
		Элементы.ПрименитьСтавкуДисконтированияПоРассрочке. ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ОформлениеПоступления.Доступность = ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
	Элементы.ПриемкаТоваров.Доступность   = ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
	
	УстановитьДоступностьДоставки();
	ЗаполнитьНалогообложениеИВидДеятельности(Ложь);
	
	Если Объект.КомиссионныеПродажи25
		ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.РеализацияЧерезКомиссионера Тогда
		Элементы.ГруппаСуммаДоговора.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ДоговорыКонтрагентовЛокализация.ПриЧтенииСозданииНаСервере(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	ДоговорыКонтрагентовЛокализация.УстановитьУсловноеОформление(ЭтаФорма);
КонецПроцедуры


&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт Или
		Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("ДатаНачалаДействия");
	МассивЭлементов.Добавить("ДатаОкончанияДействия");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
	МассивЭлементов.Добавить("ОплатаВВалюте");
	МассивЭлементов.Добавить("ТипДоговора");
	МассивЭлементов.Добавить("ПорядокРасчетов");
	МассивЭлементов.Добавить("УстановитьИнтервал");
	МассивЭлементов.Добавить("ОграничиватьСуммуЗадолженности");
	МассивЭлементов.Добавить("ДопустимаяСуммаЗадолженности");
	МассивЭлементов.Добавить("СхемаКомиссии");
	МассивЭлементов.Добавить("ВестиРасчетыЧерезКонечныхПокупателей");
	МассивЭлементов.Добавить("ВидЦенУчетный");
	МассивЭлементов.Добавить("ВидЦенПродажи");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ОграничиватьСуммуЗадолженности");
	МассивЭлементов.Добавить("ДопустимаяСуммаЗадолженности");
	МассивЭлементов.Добавить("ЗапрещаетсяПросроченнаяЗадолженность");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"ТолькоПросмотр", НЕ ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВыбораБанковскихСчетов(ОплатаВВалюте, Организация)

	МассивПараметров = Новый Массив;
	
	Если НЕ ОплатаВВалюте Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств",
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация)));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Новый ФиксированныйМассив(ИностранныеВалюты(Организация))));
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВыборСчетовГоловнойОрганизации", Неопределено));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Закрыт", Ложь));
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИностранныеВалюты(Организация)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Ссылка <> &ВалютаРегламентированногоУчета
	|");
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", 
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетСоответствуетПорядкуОплаты(БанковскийСчет, ОплатаВВалюте, Организация)

	Соответствует = Истина;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
		
		Если ОплатаВВалюте Тогда
			Соответствует = ВалютаСчета <> ВалютаРегламентированногоУчета;
		Иначе
			Соответствует = ВалютаСчета = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Соответствует;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Организация, ОплатаВВалюте, БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет)
	 ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Организация
	|	И ((БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = &ВалютаРегл И НЕ &ОплатаВВалюте)
	|	ИЛИ (БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств <> &ВалютаРегл И &ОплатаВВалюте))
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОплатаВВалюте", ОплатаВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегл", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		БанковскийСчет = Выборка.БанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ОплатаВВалюте, БанковскийСчетКонтрагента, Организация)
	
	Если (ЗначениеЗаполнено(БанковскийСчетКонтрагента)
		И Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента,"Владелец")) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Владелец = &Контрагент
	|	И ((БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &ВалютаРегл И НЕ &ОплатаВВалюте)
	|	ИЛИ (БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств <> &ВалютаРегл И &ОплатаВВалюте))
	|	И НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ОплатаВВалюте", ОплатаВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегл", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		БанковскийСчетКонтрагента = Выборка.БанковскийСчетКонтрагента;
	Иначе
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = "";
		ЭтаФорма.АвтоЗаголовок = Истина;
	Иначе
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = Объект.Наименование;
		Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
			ЭтаФорма.Заголовок = Объект.Наименование + " (" + Объект.ТипДоговора + ")";
		КонецЕсли; 
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "Партнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаСчетКонтрагентаВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "БанковскийСчетКонтрагента", Объект.ХозяйственнаяОперация);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКонтроляЗадолженности(Форма)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ОграничиватьСуммуЗадолженности");
	МассивИменЭлементов.Добавить("ДопустимаяСуммаЗадолженности");
	МассивИменЭлементов.Добавить("НадписьВалютаВзаиморасчетов");
	МассивИменЭлементов.Добавить("ЗапрещаетсяПросроченнаяЗадолженность");
	МассивИменЭлементов.Добавить("ГруппаКонтрольЗадолженности");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивИменЭлементов,
		"Видимость",
		Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДопустимаяСуммаЗадолженности",
		"Доступность",
		Форма.Объект.ОграничиватьСуммуЗадолженности);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораПорядкаРасчетов()
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииВСтранахЕАЭС = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	ЭтоНоваяКомиссия = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.КомиссионныеПродажи25, ТолькоКомиссионныеПродажи25
		Или Объект.КомиссионныеПродажи25);
	
	СписокВыбора = Элементы.ПорядокРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И (Не ЭтоНоваяКомиссия
		Или Не Объект.ВестиРасчетыЧерезКонечныхПокупателей))
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			И ЭтоНоваяКомиссия Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным, НСтр("ru = 'Аванс по договорам, долг по накладным (только реализация)'"));
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам, НСтр("ru = 'По отчетам комиссионера/реализациям через комиссионера'"));
		Иначе
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам, НСтр("ru = 'По отчетам по комиссии'"));
		КонецЕсли;
		
		Если СписокВыбора.НайтиПоЗначению(Объект.ПорядокРасчетов) = Неопределено Тогда
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов; 
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И ЭтоНоваяКомиссия И Объект.ВестиРасчетыЧерезКонечныхПокупателей Тогда

		Если СписокВыбора.НайтиПоЗначению(Объект.ПорядокРасчетов) = Неопределено Тогда
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
	ИначеЕсли (ОперацииЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ОперацииВСтранахЕАЭС.Найти(Объект.ХозяйственнаяОперация) <> Неопределено)
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам,
									НСтр("ru = 'По документам выкупа и списания товаров с хранения'"));
		Иначе
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам,
									НСтр("ru = 'По документам выкупа товаров хранителем'"));
		КонецЕсли;
		
		Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам;
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		Если Константы.ВариантОбособленияТоваровВПродажах.Получить() = Перечисления.ВариантыОбособленияТоваровВПродажах.ЗаказКлиента Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам);
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера Тогда
		
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам, НСтр("ru = 'По отчетам комиссионера/реализациям через комиссионера'"));
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
		
	Иначе
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств()
	
	ТипыДоговоровПокупатель = Новый Массив;
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СПокупателем);
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СКомиссионером);
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СДавальцем);
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СХранителем);
	
	ТипыДоговоровПоставщик = Новый Массив;
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СПоставщиком);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СКомитентом);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СПереработчиком);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СПереработчиком2_5);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.Импорт);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.ВвозИзЕАЭС);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СПоклажедателем);

	МассивПараметровВыбора = Новый Массив;
	
	Если ТипыДоговоровПокупатель.Найти(Объект.ТипДоговора) <> Неопределено Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	ИначеЕсли ТипыДоговоровПоставщик.Найти(Объект.ТипДоговора) <> Неопределено Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Элементы.СтатьяДвиженияДенежныхСредств.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовНалогообложенияИРаздельногоУчетаНДС()
	
	Элементы.ВидАгентскогоДоговора.Видимость = Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
	
	Элементы.НалогообложениеНДС.Доступность     = НЕ Объект.НалогообложениеНДСОпределяетсяВДокументе;
	Элементы.ЗакупкаПодДеятельность.Доступность = НЕ Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе;
	Элементы.ВидАгентскогоДоговора.Доступность = (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС);
	Элементы.СтавкаНДС.Доступность = Объект.НалогообложениеНДСОпределяетсяВДокументе ИЛИ (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	
	Элементы.ГруппаРаздельныйУчетНДС.Видимость = 
		(Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
		ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.ВвозИзЕАЭС
		ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт
		ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком
		ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком2_5
		ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем);
		
	Элементы.ГруппаНалогообложениеНДС.Видимость = 
		НЕ (Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт
			ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.ВвозИзЕАЭС
			ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаправленияДеятельности()
	
	Видимость = Ложь;
	Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		
		Если НаправленияДеятельностиСервер.ХозяйственнаяОперацияОбразуетДоход(Объект.ХозяйственнаяОперация) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			
			Видимость = Истина;
			
			
		ИначеЕсли НаправленияДеятельностиСервер.ХозяйственнаяОперацияОбразуетАктив(Объект.ХозяйственнаяОперация)
			 И ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
			 
			Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НаправлениеДеятельности.Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиГрафикИсполнения()
	
	ТипыДоговоров = Новый Массив;
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПокупателем);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СДавальцем);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПоставщиком);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПереработчиком);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПереработчиком2_5);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.Импорт);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.ВвозИзЕАЭС);
	
	ЭтоДоговорСКлиентом = Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем
							ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем;
	
	ВидимостьГрафика = (ТипыДоговоров.Найти(Объект.ТипДоговора) <> Неопределено)
		И (Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			ИЛИ Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным)
		И НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах")
				И ЭтоДоговорСКлиентом)
		И НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках")
				И НЕ ЭтоДоговорСКлиентом);
	
	ЗависимыеЭлементы = Новый Массив;
	ЗависимыеЭлементы.Добавить(Элементы.Отступ2);
	ЗависимыеЭлементы.Добавить(Элементы.ГрафикИсполненияВДоговоре);
	ЗависимыеЭлементы.Добавить(Элементы.НадписьГрафикИсполнения);
	
	Для каждого ЗависимыйЭлемент Из ЗависимыеЭлементы Цикл
		ЗависимыйЭлемент.Видимость = ВидимостьГрафика;
	КонецЦикла;
	
	Элементы.Сумма.Доступность = ФиксированнаяСуммаДоговора;
	Элементы.Сумма.АвтоОтметкаНезаполненного = ФиксированнаяСуммаДоговора;
	
	Элементы.ГрафикИсполненияВДоговоре.Доступность = ФиксированнаяСуммаДоговора;
	Элементы.НадписьГрафикИсполнения.Видимость = Элементы.НадписьГрафикИсполнения.Видимость И ГрафикИсполненияВДоговоре;
	
	НадписьГрафикИсполнения = Документы.ГрафикИсполненияДоговора.ПредставлениеГрафика(Объект.ГрафикИсполненияДоговора);
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаОплатаСервер(ИмяСобытия, Параметр)
	
	ВзаиморасчетыСервер.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеГрафикаИсполненияНаСервере()
	
	Записать();
	УправлениеЭлементамиГрафикИсполнения();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОбработатьБанковскиеСчета();
	
	ЗаполнитьНалогообложениеИВидДеятельности();
	НалогообложениеНДСПриИзмененииСервер();
	ГоловнаяОрганизация = Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ГоловнаяОрганизация");
	Объект.Филиалы.Очистить();
	УстановитьВидимостьЦентрализованногоДоговора();
	УстановитьДоговорСКомиссионеромПоУмолчанию();
	УстановитьЗначенияРеквизитовДисконтирования();
	УправлениеЭлементамиДисконтирования();
	НалогообложениеНДСПриИзмененииСервер();
	
	ПриОкончанииИзмененияРеквизитаЛокализацииНаСервере("Организация", Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияДействияПриИзмененииСервер()
	
	ЗаполнитьНалогообложениеИВидДеятельности();
	НалогообложениеНДСПриИзмененииСервер();
	
КонецПроцедуры


&НаСервере
Процедура УстановитьКлассификациюЗадолженности(КлассификацияЗадолженности)
	
	Если КлассификацияЗадолженности = 1 Тогда
		Объект.УстановленСрокОплаты = Истина;
		Объект.СрокОплаты = 366; // Значение больше 365 календарных дней
	Иначе
		Объект.УстановленСрокОплаты = Ложь;
		Объект.СрокОплаты = 0;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВариантовРаздельнойЗакупки()
	
	ДоговорДоступенДляЗакупокДвухходовки			= Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт
														Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.ВвозИзЕАЭС
														Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
	ДоступноОформлениеРаздельнойЗакупки				= ИспользоватьТоварыВПутиОтПоставщиков
														Или ИспользоватьНеотфактурованныеПоставки;
	ИспользоватьВариантыОформленияРаздельнойЗакупки	= ИспользоватьТоварыВПутиОтПоставщиков
														И ИспользоватьНеотфактурованныеПоставки;
	
	Элементы.ГруппаОформлениеДокументовРаздельнойЗакупки.Видимость	= ДоговорДоступенДляЗакупокДвухходовки
																		И ДоступноОформлениеРаздельнойЗакупки;
	Элементы.ГруппаВариантОформленияРаздельнойЗакупки.Видимость		= ИспользоватьВариантыОформленияРаздельнойЗакупки;
	Элементы.ВариантОформленияРаздельнойЗакупки.Доступность			= ИспользоватьОформлениеДокументовРаздельнойЗакупки
																		И Объект.ТипДоговора <> Перечисления.ТипыДоговоров.Импорт;
	
	ИспользоватьОформлениеЗакупок = ИспользоватьОформлениеЗакупок();
	
	Элементы.ГруппаВариантыПриемки.Видимость = ИспользоватьОформлениеЗакупок
												И (ИспользоватьОрдернуюСхемуПриПоступлении
													Или ДоступноОформлениеРаздельнойЗакупки);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВариантОформленияЗакупок()
	
	Если Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять Тогда
		ИспользоватьОформлениеДокументовРаздельнойЗакупки = Ложь;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков") Тогда
			ВариантОформленияРаздельнойЗакупки = "ТоварыВПути";
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки") Тогда
			ВариантОформленияРаздельнойЗакупки = "НеотфактурованныеПоставки";
		КонецЕсли;
	Иначе
		ИспользоватьОформлениеДокументовРаздельнойЗакупки = Истина;
		
		Если Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.ТоварыВПути Тогда
			ВариантОформленияРаздельнойЗакупки = "ТоварыВПути";
		ИначеЕсли Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки Тогда
			ВариантОформленияРаздельнойЗакупки = "НеотфактурованныеПоставки";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПриемки()
	
	Если ОформлениеПоступления = "ПоДоговору" Тогда
		Элементы.ПриемкаТоваров.Доступность = Ложь;
		ПриемкаТоваров = "НеРазделена";
	Иначе
		Элементы.ПриемкаТоваров.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНастроекПриемкиСервер();
	
	Объект.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантовПриемкиПоНастройкам(ОформлениеПоступления, ПриемкаТоваров);
	
	Если Объект.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки
		И (Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных
			Или Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным) Тогда
		
		Если Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных Тогда
			Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных;
		ИначеЕсли Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным Тогда
			Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
		КонецЕсли;
		
		ЗакупкиСервер.ЗаполнитьНастройкиВариантовПриемки(Объект.ВариантПриемкиТоваров, ОформлениеПоступления, ПриемкаТоваров);
		
	КонецЕсли;
	
	ЗакупкиСервер.ЗаполнитьСписокВыбораВариантовПриемкиПоДоговорам(Элементы.ОформлениеПоступления,
																	Элементы.ПриемкаТоваров,
																	Объект.ВариантОформленияЗакупок);
	
	Если Элементы.ОформлениеПоступления.СписокВыбора.Количество() = 1 Тогда
		ОформлениеПоступления = Элементы.ОформлениеПоступления.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если Объект.СпособДоставки = Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении
		И Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(Объект.ВариантПриемкиТоваров) Тогда
		
		Объект.СпособДоставки = Перечисления.СпособыДоставки.ПустаяСсылка();
		
		ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
		
	КонецЕсли;
	
	УстановитьДоступностьПриемки();
	УстановитьДоступностьДоставки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДоставки()
	
	ЭтоДоговорРаспоряжениеНаПриемку = Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(Объект.ВариантПриемкиТоваров);
	
	ДоступныеСпособыДоставки = ДоступныеСпособыДоставки(ЭтоДоговорРаспоряжениеНаПриемку);
	
	Элементы.СпособДоставки.СписокВыбора.ЗагрузитьЗначения(ДоступныеСпособыДоставки);
	
КонецПроцедуры

&НаСервере
Функция ДоступныеСпособыДоставки(ЭтоДоговорРаспоряжениеНаПриемку)
	
	ВозвращаемыйМассив = Новый Массив();
	
	Если Не ЭтоДоговорРаспоряжениеНаПриемку Тогда
		ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении);
	КонецЕсли;
	
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
	ВозвращаемыйМассив.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	
	Возврат ВозвращаемыйМассив;
	
КонецФункции

&НаСервере
Функция ИспользоватьОформлениеЗакупок()
	
	ИспользоватьОформлениеЗакупок = Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.ВвозИзЕАЭС
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоклажедателем;
	
	Возврат ИспользоватьОформлениеЗакупок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПорядокСписанияПринятыхТоваров(Форма)
	
	Форма.Элементы.ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение.Видимость = ?(
		Форма.Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоклажедателем")
		ИЛИ Форма.Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентомНаЗакупку") , Истина, Ложь);
	
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьНоваяСхемаКомиссии()
	
	ЭтоДоговорСКомиссионером = ?(Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"),
		Истина, Ложь);
	ЭтоДоговорСКонечнымКлиентом = ?(Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.РеализацияЧерезКомиссионера"),
		Истина, Ложь);
		
	ЭтоНоваяКомиссия = ЭтоДоговорСКомиссионером
		И ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.КомиссионныеПродажи25, ТолькоКомиссионныеПродажи25
		Или Объект.КомиссионныеПродажи25);
		
	Элементы.ГруппаКомиссионнаяПродажа.Видимость = ЭтоДоговорСКомиссионером;
	
	Элементы.СхемаКомиссии.Видимость = ?(
		ЭтоДоговорСКомиссионером И ВыбиратьВерсиюКомиссионныхПродаж
		И НЕ ТолькоКомиссионныеПродажи25 И ИспользоватьСоглашенияСКлиентами, Истина, Ложь);
		
	Элементы.ГруппаНастроекВидовЦенКомиссионнойПродажи.Видимость = ЭтоНоваяКомиссия;
		
	Элементы.ВестиРасчетыЧерезКонечныхПокупателей.Видимость = ЭтоНоваяКомиссия;
		
	Элементы.УчетныйВидЦен.Видимость = ЭтоНоваяКомиссия;
	Элементы.ВидЦенПродажи.Видимость = ЭтоНоваяКомиссия;
		
	Элементы.СтраницаРасчетыИОформление.ТолькоПросмотр = ЭтоДоговорСКонечнымКлиентом;
	Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Не ЭтоДоговорСКонечнымКлиентом;
	Элементы.НаправлениеДеятельности.Видимость = Не ЭтоДоговорСКонечнымКлиентом;
	ИзменениеГруппаФинансовогоУчетаКлиента = ЭтоДоговорСКомиссионером Или (ЭтоДоговорСКонечнымКлиентом
		И Объект.ВестиРасчетыЧерезКонечныхПокупателей);
	Элементы.ГруппаФинансовогоУчетаКлиента.ТолькоПросмотр = Не ИзменениеГруппаФинансовогоУчетаКлиента;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "БанковскийСчет, БанковскийСчетКонтрагента, КонтактноеЛицо, ЗачетОплатыФорма",
			"Видимость", Не ЭтоДоговорСКонечнымКлиентом);
	
	Элементы.ГруппаКомиссионер.Видимость = ЭтоДоговорСКонечнымКлиентом;
	
	Если ЭтоНоваяКомиссия Тогда
		УстановитьПараметрыВыбораВидаЦенНаСервере();
	КонецЕсли;
	
	Элементы.ГруппаОрганизация.Заголовок = НСтр("ru = 'Данные организации'");
	Элементы.ГруппаОрганизация.ОтображатьЗаголовок = ЭтоДоговорСКонечнымКлиентом;
	
	Элементы.ГруппаПартнерКонтрагент.Заголовок = НСтр("ru = 'Данные клиента'");
	Элементы.ГруппаПартнерКонтрагент.ОтображатьЗаголовок = ЭтоДоговорСКонечнымКлиентом;
	
	Элементы.ГруппаФинансовогоУчета.Заголовок = ?(ЭтоНоваяКомиссия, НСтр("ru = 'Группа фин. учета расчетов с комиссионером'"), "");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаФинансовогоУчетаКлиента",
			"Видимость", ЭтоНоваяКомиссия И Объект.ВестиРасчетыЧерезКонечныхПокупателей);
	
	Элементы.ГруппаСуммаДоговора.Видимость = Не (Объект.ТипДоговора = Перечисления.ТипыДоговоров.РеализацияЧерезКомиссионера
		ИЛИ ЭтоНоваяКомиссия);
	
	НастроитьСписокВыбораСхемыКомиссии();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиРеквизитовПриемкиТоваров()
	
	ДоступноОформлениеРаздельнойЗакупки = ИспользоватьТоварыВПутиОтПоставщиков
											Или ИспользоватьНеотфактурованныеПоставки;
	
	ЗаголовокПриемкиТоваров			= ?(ДоступноОформлениеРаздельнойЗакупки,
										НСтр("ru = 'Приемка товаров на склад'"),
										НСтр("ru = 'Приемка товаров на ордерный склад'"));
	ЗаголовокОформлениеПоступления	= ?(ДоступноОформлениеРаздельнойЗакупки,
										НСтр("ru = 'Оформление ордера и поступления доступно'"),
										НСтр("ru = 'Оформление ордера доступно'"));
	
	ПодсказкаОформлениеПоступления	= ?(ДоступноОформлениеРаздельнойЗакупки,
										НСтр("ru = 'Оформление приходного ордера и поступления товаров может происходить после оформления заказа, либо после оформления накладной или по договору, без оформления каких-либо документов.'"),
										НСтр("ru = 'Оформление приходного ордера может происходить после оформления заказа, либо после оформления накладной или по договору, без оформления каких-либо документов.'"));
	ПодсказкаПриемкаТоваров			= ?(ДоступноОформлениеРаздельнойЗакупки,
										НСтр("ru = 'Приемку товаров на складе можно сгруппировать по договору, либо разделить по документам.'"),
										НСтр("ru = 'Приемку товаров на ордерном складе можно сгруппировать по договору, либо разделить по документам.'"));
	
	Элементы.ГруппаВариантыПриемки.Заголовок = ЗаголовокПриемкиТоваров;
	Элементы.ОформлениеПоступления.Заголовок = ЗаголовокОформлениеПоступления;
	
	Элементы.ОформлениеПоступления.Подсказка	= ПодсказкаОформлениеПоступления;
	Элементы.ПриемкаТоваров.Подсказка			= ПодсказкаПриемкаТоваров;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЦентрализованногоДоговора()
	
	Элементы.ГруппаФилиалы.Видимость = НоваяАрхитектураВзаиморасчетов 
		И ГоловнаяОрганизация И ИспользоватьНесколькоОрганизаций
		И ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс
		И (Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем
			ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
			ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером
			ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем
			ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СХранителем
			ИЛИ Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентомНаЗакупку);
	Если НЕ Элементы.ГруппаФилиалы.Видимость И Объект.ЦентрализованныйДоговор Тогда
		Объект.ЦентрализованныйДоговор = Ложь;
	КонецЕсли;
	Элементы.ДекорацияФилиалы.Доступность = Объект.ЦентрализованныйДоговор;
	Элементы.РазрешаетсяПередачаОплатМеждуФилиалами.Видимость = Объект.ЦентрализованныйДоговор;
	УстановитьКоличествоФилиалов(Элементы.ДекорацияФилиалы, Объект.Филиалы.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактированияСпискаФилиалов(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.Филиалы.Очистить();
		Для каждого Стр Из Результат Цикл
			НоваяСтрокаЗаполненияДвижений = Объект.Филиалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаполненияДвижений, Стр);
		КонецЦикла;
		УстановитьКоличествоФилиалов(Элементы.ДекорацияФилиалы, Объект.Филиалы.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКоличествоФилиалов(ДекорацияФилиалы, КоличествоФилиалов)
	
	ДекорацияФилиалы.Заголовок = НСтр("ru = 'Доступен филиалам'");
	Если КоличествоФилиалов > 0 Тогда
		ДекорацияФилиалы.Заголовок = ДекорацияФилиалы.Заголовок + " (" + КоличествоФилиалов + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогообложениеИВидДеятельности(ПерезаполнитьНалогообложениеИВидДеятельности = Истина)
	
	Если Перечисления.ТипыДоговоров.ЭтоДоговорПродажи(Объект.ТипДоговора) Тогда
		ПараметрыЗаполнения = Справочники.ДоговорыКонтрагентов.ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
		Если Объект.НалогообложениеНДСОпределяетсяВДокументе
			И ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		ИначеЕсли Не Объект.НалогообложениеНДСОпределяетсяВДокументе
			И ПерезаполнитьНалогообложениеИВидДеятельности Тогда
			УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Объект.НалогообложениеНДС,
															ПараметрыЗаполнения,
															УчетНДСКэшированныеЗначенияПараметров);
		КонецЕсли;
		УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС,
																	Объект.НалогообложениеНДС,
																	ПараметрыЗаполнения,
																	УчетНДСКэшированныеЗначенияПараметров); 
	ИначеЕсли Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(Объект.ТипДоговора) Тогда
		ПараметрыЗаполнения = Справочники.ДоговорыКонтрагентов.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
		Если Объект.НалогообложениеНДСОпределяетсяВДокументе
			И ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		ИначеЕсли Не Объект.НалогообложениеНДСОпределяетсяВДокументе
			И ПерезаполнитьНалогообложениеИВидДеятельности Тогда
			УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Объект.НалогообложениеНДС,
															ПараметрыЗаполнения,
															УчетНДСКэшированныеЗначенияПараметров);
		КонецЕсли;
		УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС,
																	Объект.НалогообложениеНДС,
																	ПараметрыЗаполнения,
																	УчетНДСКэшированныеЗначенияПараметров);
		
		ПараметрыЗаполнения = Справочники.ДоговорыКонтрагентов.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
		Если Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе
			И ЗначениеЗаполнено(Объект.ЗакупкаПодДеятельность) Тогда
			Объект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		ИначеЕсли Не Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе
			И ПерезаполнитьНалогообложениеИВидДеятельности Тогда
			УчетНДСУП.ЗаполнитьВидДеятельностиНДС(Объект.ЗакупкаПодДеятельность,
													ПараметрыЗаполнения,
													УчетНДСКэшированныеЗначенияПараметров);
		КонецЕсли;
		УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(Элементы.ЗакупкаПодДеятельность,
															Объект.ЗакупкаПодДеятельность,
															ПараметрыЗаполнения,
															УчетНДСКэшированныеЗначенияПараметров);
		
		ВыборВидаДеятельностиНДС = Элементы.ЗакупкаПодДеятельность.Видимость;
		Элементы.РежимРаздельногоУчетаНДСОпределяетсяЗначением.Видимость = ВыборВидаДеятельностиНДС;
		Элементы.РежимРаздельногоУчетаНДС.Видимость = ВыборВидаДеятельностиНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияРеквизитовДисконтирования()
	
	Если Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(Объект.ТипДоговора) Тогда
		НастройкиУчетнойПолитикиФинУчета = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик(
			"УчетнаяПолитикаФинансовогоУчета",
			Объект.Организация);
		Объект.СтавкаДисконтирования = РегистрыСведений.СтавкиДисконтирования.ПолучитьСтавкуДисконтированияПоУмолчанию(
			НастройкиУчетнойПолитикиФинУчета.Период, 
			НастройкиУчетнойПолитикиФинУчета.Организация, 
			Объект.ВалютаВзаиморасчетов);
		ПрименитьСтавкуДисконтированияПоРассрочке = Объект.СтавкаДисконтирования <> 0;
		Объект.СрокДляПримененияДисконтирования = НастройкиУчетнойПолитикиФинУчета.СрокДляПримененияДисконтирования;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиДисконтирования(ВыключеноДисконтирование=Ложь)
	
	ВидимостьРеквизитовДисконтирования = Ложь;
	Если Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(Объект.ТипДоговора) Тогда
		НастройкиУчетнойПолитикиФинУчета = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик("УчетнаяПолитикаФинансовогоУчета", Объект.Организация);
		ВидимостьРеквизитовДисконтирования = НастройкиУчетнойПолитикиФинУчета.УчетДисконтированнойКредиторскойЗадолженностиПоставщикам;
		ВидимостьРеквизитовДисконтирования = ВидимостьРеквизитовДисконтирования И ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
		Если Не ВидимостьРеквизитовДисконтирования Тогда
			Если Объект.СтавкаДисконтирования > 0 Тогда
				ВидимостьРеквизитовДисконтирования = Истина;
				Элементы.ГруппаОтключеноДисконтирование.Видимость = Истина;
			ИначеЕсли ВыключеноДисконтирование Тогда
				ВидимостьРеквизитовДисконтирования = Истина;
				Элементы.ГруппаОтключеноДисконтирование.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Элементы.ГруппаДисконтирование.Видимость = ВидимостьРеквизитовДисконтирования;
	Элементы.ГруппаСрокДисконтирования.Видимость = ВидимостьРеквизитовДисконтирования;
	
	Элементы.СтавкаДисконтирования.Доступность = ПрименитьСтавкуДисконтированияПоРассрочке;
	Элементы.СтавкаДисконтирования.АвтоОтметкаНезаполненного = ПрименитьСтавкуДисконтированияПоРассрочке;
	Элементы.СрокДляПримененияДисконтирования.Доступность = ПрименитьСтавкуДисконтированияПоРассрочке;
	Элементы.ДекорацияДней.Доступность = ПрименитьСтавкуДисконтированияПоРассрочке; 
	Элементы.ДекорацияПроцент.Доступность = ПрименитьСтавкуДисконтированияПоРассрочке;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаЦенНаСервере(ИмяВидаЦен = "")
	
	ВидЦенПродажи = Объект.ВидЦенПродажи;
	ВидЦенУчетный = Объект.ВидЦенУчетный;
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыводитьПроизвольныйВидЦен", Истина));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ИспользоватьПриПродаже", Истина));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДействияВидовЦен.Действует));
	
	Если ЗначениеЗаполнено(ВидЦенУчетный) И (ИмяВидаЦен = "" ИЛИ ИмяВидаЦен = "ВидЦенПродажи") Тогда
		
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЦенаВключаетНДС", ВидЦенУчетный.ЦенаВключаетНДС));
		
	ИначеЕсли ЗначениеЗаполнено(ВидЦенПродажи) И (ИмяВидаЦен = "" ИЛИ ИмяВидаЦен = "ВидЦенУчетный") Тогда
		
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЦенаВключаетНДС", ВидЦенПродажи.ЦенаВключаетНДС));
		
	КонецЕсли;
	
	ПараметрыОтбораВидаЦен = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	Если ИмяВидаЦен = "ВидЦенУчетный" Тогда
		Элементы.УчетныйВидЦен.ПараметрыВыбора = ПараметрыОтбораВидаЦен;
	Иначе
		Элементы.ВидЦенПродажи.ПараметрыВыбора = ПараметрыОтбораВидаЦен;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораСхемыКомиссии()
	
	СписокВыбора = Элементы.СхемаКомиссии.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Ложь,   КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии20());
	СписокВыбора.Добавить(Истина, КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии25());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоговорСКомиссионеромПоУмолчанию()
	
	Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.РеализацияЧерезКомиссионера Тогда
		Объект.ДоговорСКомиссионером = КомиссионнаяТорговляСервер.ПолучитьДоговорСКомиссионеромПоУмолчанию(Объект);
		ДоговорСКомиссионеромПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

// Параметры:
//	Элемент - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - ЭлементФормы
&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВалютаВзаиморасчетов" Тогда
		ВалютаВзаиморасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ОплатаВВалюте" Тогда
		ОплатаВВалютеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТипДоговора" Тогда
		ТипДоговораПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПорядокРасчетов" Тогда
		ПорядокРасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ОграничиватьСуммуЗадолженности" Тогда
		ОграничиватьСуммуЗадолженностиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "СхемаКомиссии" Тогда
		НоваяСхемаКомиссииПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВидЦенУчетный" Тогда
		УстановитьПараметрыВыбораВидаЦенНаСервере("ВидЦенУчетный");
	ИначеЕсли Элемент.Имя = "ВидЦенПродажи" Тогда
		УстановитьПараметрыВыбораВидаЦенНаСервере("ВидЦенПродажи");
	ИначеЕсли Элемент.Имя = "ВестиРасчетыЧерезКонечныхПокупателей" Тогда
		ВестиРасчетыЧерезКонечныхПокупателейПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаОкончанияДействия" Тогда
		ДатаОкончанияДействияПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//	Команда - КомандаФормы - 
&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "УстановитьИнтервал" Тогда
		УстановитьИнтервал(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

// Параметры:
//	Элемент - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//	Команда - КомандаФормы - 
&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	Элемент - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	Элемент - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	Элемент - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - ЭлементФормы
&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Локализация

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// ИнтернетПоддержкаПользователей.СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ДоговорыКонтрагентовКлиентЛокализация.ОбновитьОтображениеИндексыСПАРК(ЭтаФорма);

КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

#КонецОбласти

#Область КР_ДобавленныеПроцедурыИФункции 

#Область КР_СлужебныеПроцедурыИФункции 

// << 21.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-615
&НаСервере
Процедура ПриЧтенииСозданииНаСервереДополнительно()
	
	КР_ГруппаСтатусКодДемо = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_ГруппаСтатусКодДемо", Элементы.ГруппаШапкаПраво);
	КР_ГруппаСтатусКодДемо.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	КР_ГруппаСтатусКодДемо.Отображение = ОтображениеОбычнойГруппы.Нет;
	КР_ГруппаСтатусКодДемо.ОтображатьЗаголовок = Ложь;
	Элементы.Переместить(Элементы.Статус, КР_ГруппаСтатусКодДемо);
	
	КР_КодДемоЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_КодДемо", КР_ГруппаСтатусКодДемо);
	КР_КодДемоЭлемент.ТолькоПросмотр = Истина;
	
	// --> Евлахов Игорь Николаевич (Начало) 23.09.2024
	// Задача #4165	
	ПутьКДанным = "Объект.злНеСоздаватьОтчетКомиссионераВУТ10";
	
	ИмяЭлемента = "злНеСоздаватьОтчетКомиссионераВУТ10_1";
	НовыйЭлемент = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Элементы.ГруппаКомиссионнаяПродажа);
	НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	
	ИмяЭлемента = "злНеСоздаватьОтчетКомиссионераВУТ10_2";
	НовыйЭлемент = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Элементы.ГруппаКомиссионер);
	НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	// <-- Евлахов Игорь Николаевич (Конец) 23.09.2024
	
КонецПроцедуры // >> 21.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-615

#КонецОбласти

#КонецОбласти
