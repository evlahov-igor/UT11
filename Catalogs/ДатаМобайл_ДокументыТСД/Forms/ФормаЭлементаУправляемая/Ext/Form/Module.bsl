#Область ОписаниеПеременных

&НаКлиенте
Перем ВключенаГрупповаяРабота; 

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаФорма.Команды.ЗаписатьФорму.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.S, Ложь, Истина, Ложь);
	
	Если Объект.ИсходныйДокумент = Неопределено Тогда
		Если Не Объект.Шаблон.Пустая() Тогда
			Объект.ИсходныйДокумент = Документы[Объект.Шаблон.ВидДокумента].Пустаяссылка();
		КонецЕсли;	
	КонецЕсли;
	
	Попытка
		Если СокрЛП(Объект.Шаблон.ВидДокументаНового) = "" Или Объект.Шаблон.БыстраяПриемка Или Объект.Шаблон.БыстраяОтгрузка Тогда//старая схема
			Элементы.НовыйДокумент.ТолькоПросмотр = Истина; 
		Иначе	
			Элементы.НовыйДокумент.ТолькоПросмотр = Ложь;
			Если Объект.НовыйДокумент = Неопределено Тогда
				Если Не Объект.Шаблон.Пустая() Тогда
					Объект.НовыйДокумент = Документы[Объект.Шаблон.ВидДокументаНового].Пустаяссылка();
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	ОграничениеТипаРеквизита();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ИсходныйДокумент.ТолькоПросмотр = Объект.Шаблон.Пустая();
	
	Элементы.грДокументы.Видимость = ЭтоШаблонНесколькоДокументов(Объект.Шаблон) И Не ЗначениеЗаполнено(Объект.РодительскийДокумент);
	Элементы.ИсходныйДокумент.Видимость = Не ЭтоШаблонНесколькоДокументов(Объект.Шаблон) Или ЗначениеЗаполнено(Объект.РодительскийДокумент);
	Элементы.НовыйДокумент.Видимость = Не ЭтоШаблонНесколькоДокументов(Объект.Шаблон) Или ЗначениеЗаполнено(Объект.РодительскийДокумент);
	
	ОбъектИсходныйДокументПустая = Ложь;
	Если Объект.ИсходныйДокумент = Неопределено Тогда
		ОбъектИсходныйДокументПустая = Истина;
	ИначеЕсли Объект.ИсходныйДокумент.Пустая() Тогда
		ОбъектИсходныйДокументПустая = Истина;	
	КонецЕсли;
	
	Если ОбъектИсходныйДокументПустая Или Не ПроверитьТребуетсяВыгрузкаМарок(Объект.ИсходныйДокумент, Объект.Шаблон) Или Не ТребуетсяЗапросВЦРПТ(Объект.Шаблон) Тогда
		Элементы.ФормаСоздатьШтрихкодыУпаковокПодПТУ.Видимость = Ложь;	
	КонецЕсли;
	
	Элементы.грДокументы2.Видимость = ЭтоШаблонМножествоДокументов(Объект.Шаблон);
	Если ЭтоШаблонМножествоДокументов(Объект.Шаблон) Тогда
		Элементы.ИсходныйДокумент.Видимость = Ложь;
		Элементы.НовыйДокумент.Видимость = Ложь;		
	КонецЕсли;
	
	Элементы.СкладПолучатель.Видимость = ЭтоШаблонНесколькоСкладов(Объект.Шаблон); 
	
	ВключенаГрупповаяРабота = РеквизитГрупповаяРабота(Объект.Шаблон);
	ИзменитьВидимостьВкладокПодборРазмещение();
	
	ВидимостьДоступностьНовогоДокумента();
	
	// Zolla ++
	Если ТипЗнч(Объект.ИсходныйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
		Элементы.ИсходныйДокумент.КнопкаСоздания = Ложь;	
		Элементы.ИсходныйДокумент.КнопкаВыпадающегоСписка = Ложь;
		Элементы.ИсходныйДокумент.КнопкаВыбора = Истина;
		Элементы.ИсходныйДокумент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		
		Элементы.НовыйДокумент.КнопкаСоздания = Ложь;	
		Элементы.НовыйДокумент.КнопкаВыпадающегоСписка = Ложь;
		Элементы.НовыйДокумент.КнопкаВыбора = Истина;
		Элементы.НовыйДокумент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	КонецЕсли;
	// Zolla --
	
КонецПроцедуры

&НаСервере
Функция ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТЧ = ТекущийОбъект.СписокТерминалов.Выгрузить();
	
	Для каждого СтрокаТЧ Из ТЧ Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ТСД) Тогда
			Сообщить("На закладке ""Список терминалов"" не указан конкретный терминал!");
			Отказ = Истина;
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если УжеЕсть(Объект.Ссылка, Объект.ИсходныйДокумент) Тогда
		Если Не ПараметрыЗаписи.Свойство("ВопросЗадан") Тогда
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("ПоказатьВопросЗавершение", ЭтаФорма, ПараметрыЗаписи);
			ТекстВопроса = "Для документа " + Объект.ИсходныйДокумент + " уже создан документ ТСД. Продолжить?";
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет,, КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
	Если ПомеченНаУдаление(Объект.ИсходныйДокумент) Тогда
		Если Не ПараметрыЗаписи.Свойство("ВопросЗаданУдаление") Тогда
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("ПоказатьВопросУдалениеЗавершение", ЭтаФорма, ПараметрыЗаписи);
			ТекстВопроса = "Документ " + Объект.ИсходныйДокумент+" помечен на удаление. Продолжить?";
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет,, КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
	//Запрос в ЦРПТ приёмка
	Попытка
		ПроверкаКлючаИЗапросВСервис();	
	Исключение
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДатаМобайл_ВыборТСД" Тогда
		Объект.ТСД = ПолучитьТСДПоКоду(Параметр);
		ЭтаФорма.Модифицированность = Истина; 
		
		// Zolla ++
	ИначеЕсли ИмяСобытия = "ОтредактированСписокЗначений" Тогда
		Если ТипЗнч(Объект.ИсходныйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
			Если ТипЗнч(Параметр) = Тип("Массив") Тогда
				Объект.ДМ_ИсходныеДокументы.Очистить();
				Объект.ИсходныйДокумент = Неопределено;
				
				Для каждого эл Из Параметр Цикл
					нСтр = Объект.ДМ_ИсходныеДокументы.Добавить();
					нСтр.ИсходныйДокумент = эл;
				КонецЦикла;
				
				Если Объект.ДМ_ИсходныеДокументы.Количество() > 0 Тогда
					Объект.ИсходныйДокумент =  Объект.ДМ_ИсходныеДокументы[0].ИсходныйДокумент;
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект.НовыйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
			Если ТипЗнч(Параметр) = Тип("Массив") Тогда
				Объект.ДМ_НовыеДокументы.Очистить();
				Объект.НовыйДокумент = Неопределено;
				
				Для каждого эл Из Параметр Цикл
					нСтр = Объект.ДМ_НовыеДокументы.Добавить();
					нСтр.НовыйДокумент = эл;
				КонецЦикла;
				
				Если Объект.ДМ_НовыеДокументы.Количество() > 0 Тогда
					Объект.НовыйДокумент =  Объект.ДМ_НовыеДокументы[0].НовыйДокумент;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		// Zolla --
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ТСДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытияФормы = Новый Структура; 
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);  
	ОткрытьФорму("ПланОбмена.ДатаМобайл_СписокТСД.Форма.ФормаСпискаУправляемая", ПараметрыОткрытияФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
	
	Если Не Объект.Шаблон.Пустая() Тогда
		ПустыеСсылки = ПолучитьПустыеСсылки(Объект.Шаблон);
		Если ТипЗнч(Объект.ИсходныйДокумент) <> ТипЗнч(ПустыеСсылки.Старый) Тогда
			Объект.ИсходныйДокумент = ПустыеСсылки.Старый;
			Элементы.ИсходныйДокумент.ВыбиратьТип = Ложь;
		КонецЕсли;	
		Если ТипЗнч(Объект.НовыйДокумент) <> ТипЗнч(ПустыеСсылки.Новый) Тогда
			Объект.НовыйДокумент = ПустыеСсылки.Новый;
			Элементы.НовыйДокумент.ВыбиратьТип = Ложь;
		КонецЕсли;	
		Элементы.НовыйДокумент.ТолькоПросмотр = Не ПустыеСсылки.Создавать;
	Иначе	
		Объект.ИсходныйДокумент = Неопределено;
		Объект.НовыйДокумент = Неопределено;
		Элементы.ИсходныйДокумент.ВыбиратьТип = Истина;
		Элементы.НовыйДокумент.ВыбиратьТип = Истина;
		Элементы.НовыйДокумент.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	Элементы.ИсходныйДокумент.ТолькоПросмотр = Объект.Шаблон.Пустая();
	
	Элементы.грДокументы.Видимость = ЭтоШаблонНесколькоДокументов(Объект.Шаблон) И Не ЗначениеЗаполнено(Объект.РодительскийДокумент);
	Элементы.ИсходныйДокумент.Видимость = Не ЭтоШаблонНесколькоДокументов(Объект.Шаблон) Или ЗначениеЗаполнено(Объект.РодительскийДокумент);
	Элементы.НовыйДокумент.Видимость = Не ЭтоШаблонНесколькоДокументов(Объект.Шаблон) Или ЗначениеЗаполнено(Объект.РодительскийДокумент);
	
	Элементы.грДокументы2.Видимость = ЭтоШаблонМножествоДокументов(Объект.Шаблон);
	Если ЭтоШаблонМножествоДокументов(Объект.Шаблон) Тогда
		Элементы.ИсходныйДокумент.Видимость = Ложь;
		Элементы.НовыйДокумент.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СкладПолучатель.Видимость = ЭтоШаблонНесколькоСкладов(Объект.Шаблон);
	
	ВключенаГрупповаяРабота = РеквизитГрупповаяРабота(Объект.Шаблон);
	ИзменитьВидимостьВкладокПодборРазмещение();
	
	ОграничениеТипаРеквизита();
	ВидимостьДоступностьНовогоДокумента(); 
	
	// Zolla ++
	Если ТипЗнч(Объект.ИсходныйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
		Если Объект.ДМ_ИсходныеДокументы.Количество() > 0 Тогда
			Объект.ИсходныйДокумент =  Объект.ДМ_ИсходныеДокументы[0].ИсходныйДокумент;
		КонецЕсли;
	Иначе
		Объект.ДМ_ИсходныеДокументы.Очистить();
	КонецЕсли;
	
	Если ТипЗнч(Объект.НовыйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
		Если Объект.ДМ_НовыеДокументы.Количество() > 0 Тогда
			Объект.НовыйДокумент =  Объект.ДМ_НовыеДокументы[0].НовыйДокумент;
		КонецЕсли;
	Иначе
		Объект.ДМ_НовыеДокументы.Очистить();
	КонецЕсли;
	// Zolla --
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФорму(Команда)
	Записать(Новый Структура("ЭтоЗапись"));
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ВопросЗадан", Истина);
		
		Если Записать(ПараметрыЗаписи) Тогда
			Если Не ПараметрыЗаписи.Свойство("ЭтоЗапись") Тогда
				Закрыть();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросУдалениеЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ВопросЗаданУдаление", Истина);
		
		Если Записать(ПараметрыЗаписи) Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКлючаИЗапросВСервис()
	
	СсылкаНаДокВСервис 	= Объект.ИсходныйДокумент;
	Шаблон 				= Объект.Шаблон;
	ЭтоТабак 			= Ложь;
	
	Если СсылкаНаДокВСервис.Пустая() Или Не ПроверитьТребуетсяВыгрузкаМарок(Объект.ИсходныйДокумент, Объект.Шаблон) Или Не ТребуетсяЗапросВЦРПТ(Шаблон) Тогда
		Возврат;	
	КонецЕсли; 
	
	ВидМаркируемойПродукцииДокументаМассив 	= ДатаМобайл_Маркировка.ПолучитьВидПродукцииИСДокумента(СсылкаНаДокВСервис, Шаблон.ИмяТабличнойЧастиПодбор);
	ВидМаркируемойПродукцииДокумента 		= ВидМаркируемойПродукцииДокументаМассив[0];
	
	Если ВидМаркируемойПродукцииДокумента = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Организация = ПолучитьОрганизациюПоДокументу(СсылкаНаДокВСервис);
	
	Если ТребуетсяОбновлениеКлючаСессии(Организация, ЭтоТабак, ВидМаркируемойПродукцииДокумента) Тогда		
		Модуь_ИнтерфейсАвторизацииИСМПКлиент = ОбщийМодуль("ИнтерфейсАвторизацииИСМПКлиент");
		Модуь_ИнтерфейсМОТПКлиентСервер = ?(ЭтоТабак, ОбщийМодуль("ИнтерфейсМОТПКлиентСервер"), ОбщийМодуль("ИнтерфейсИСМПКлиентСервер"));
		
		Модуь_ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(Модуь_ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
		
		Сообщить("Не получилось обновить ключ сессии. Проверьте настройки подключения к ИС.", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОрганизациюПоДокументу(СсылкаНаДокВСервис)
	
	Организация = Неопределено;
	
	Попытка
		Организация = СсылкаНаДокВСервис.Организация;	
	Исключение
	КонецПопытки;
	
	Возврат Организация;
	
КонецФункции

&НаСервере
Функция ТребуетсяОбновлениеКлючаСессии(Организация, ЭтоТабак, ВидМаркируемойПродукцииДокумента)
	
	ТребуетсяОбновлениеКлючаСессии = Истина;
	
	Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = ДатаМобайл_Маркировка.ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
	Модуь_ИнтерфейсИСМПКлиентСервер = ДатаМобайл_Маркировка.ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
	Модуь_ИнтерфейсМОТПКлиентСервер = ДатаМобайл_Маркировка.ОбщийМодуль("ИнтерфейсМОТПКлиентСервер");
	
	Если Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = Неопределено Тогда
		Сообщить("Конфигурация 1С не поддерживает работу с Маркировкой", 
		СтатусСообщения.ОченьВажное);
		Возврат ТребуетсяОбновлениеКлючаСессии;
	КонецЕсли;
	
	//Табак
	Если ДатаМобайл_Маркировка.ЭтоТабакПоВидыПродукцииИС(ВидМаркируемойПродукцииДокумента) Тогда		
		ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
		Модуь_ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
		ЭтоТабак = Истина;
	Иначе
		ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
		Модуь_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));	
	КонецЕсли;
	
	Возврат ТребуетсяОбновлениеКлючаСессии;
	
КонецФункции

&НаСервере
Функция ТребуетсяЗапросВЦРПТ(Шаблон)
	
	Если Шаблон.МаркировкаЗапросВЦРПТ И Шаблон.ИспользоватьМаркировку Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьТребуетсяВыгрузкаМарок(ИсходныйДокумент, Шаблон)
	
	ВидДокумента = Шаблон.ВидДокумента;
	
	Если ВидДокумента = "ПриобретениеТоваровУслуг" 
		Или ВидДокумента = "ПриемкаТоваровИСМП"
		Или ВидДокумента = "ЗаказНаЭмиссиюКодовМаркировкиСУЗ" Тогда
		
		Возврат Истина;
		
	ИначеЕсли ВидДокумента = "ВозвратТоваровОтКлиента" Тогда
		
		МаркиУказаныПоставщиком = Ложь;
		
		Попытка
			
			Если ИсходныйДокумент.ШтрихкодыУпаковок.Количество() > 0 Тогда
				МаркиУказаныПоставщиком = Истина;
			КонецЕсли;
			
		Исключение
		КонецПопытки;	
		
		Если МаркиУказаныПоставщиком Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	ИначеЕсли ВидДокумента = "УведомлениеОПриемкеМДЛП" Тогда
		
		ПрямойАкцепт = Ложь;
		
		Попытка 
			
			Если ИсходныйДокумент.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
				ПрямойАкцепт = Истина;
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
		Если ПрямойАкцепт Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеОткрытияИзображения(КодВозврата, ДопПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаИзображениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Показать(Новый ОписаниеОповещения("СсылкаНаИзображениеНачалоВыбора_Завершение", ЭтаФорма));
		
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаИзображениеНачалоВыбора_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда				
		Объект.СсылкаНаИзображение = ВыбранныеФайлы[0];	
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаИзображениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	
	Оповещение = Новый ОписаниеОповещения("ПослеОткрытияИзображения", ЭтаФорма);
	НачатьЗапускПриложения(Оповещение, Объект.СсылкаНаИзображение);
	
КонецПроцедуры

&НаКлиенте
Процедура СобранныеДанныеПриемкаСсылкаНаИзображениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Показать(Новый ОписаниеОповещения("СобранныеДанныеПриемкаСсылкаНаИзображениеНачалоВыбора_Завершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура СобранныеДанныеПриемкаСсылкаНаИзображениеНачалоВыбора_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда				
		Элементы.СобранныеДанныеПриемка.ТекущиеДанные.СсылкаНаИзображение = ВыбранныеФайлы[0];	
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СобранныеДанныеПриемкаСсылкаНаИзображениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОткрытияИзображения", ЭтаФорма);
	НачатьЗапускПриложения(Оповещение, Элементы.СобранныеДанныеПриемка.ТекущиеДанные.СсылкаНаИзображение);
	
КонецПроцедуры

&НаКлиенте
Процедура СобранныеДанныеПодборСсылкаНаИзображениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Показать(Новый ОписаниеОповещения("СобранныеДанныеПодборСсылкаНаИзображениеНачалоВыбора_Завершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура СобранныеДанныеПодборСсылкаНаИзображениеНачалоВыбора_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда				
		Элементы.СобранныеДанныеПодбор.ТекущиеДанные.СсылкаНаИзображение = ВыбранныеФайлы[0];	
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СобранныеДанныеПодборСсылкаНаИзображениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	
	Оповещение = Новый ОписаниеОповещения("ПослеОткрытияИзображения", ЭтаФорма);
	НачатьЗапускПриложения(Оповещение, Элементы.СобранныеДанныеПодбор.ТекущиеДанные.СсылкаНаИзображение);
	
КонецПроцедуры

&НаКлиенте
Процедура СобранныеДанныеПодборПередУдалением(Элемент, Отказ)
	ДатаМобайл_ОбщийМодуль.УдалитьЗначениеФормыПоСтроке(Объект.Ссылка, Элемент.ТекущиеДанные.ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СобранныеДанныеПриемкаПередУдалением(Элемент, Отказ)
	ДатаМобайл_ОбщийМодуль.УдалитьЗначениеФормыПоСтроке(Объект.Ссылка, Элемент.ТекущиеДанные.ИдентификаторСтроки);
КонецПроцедуры

//ГРУППОВОЙ ДОКУМЕНТ
&НаКлиенте
Процедура СписокДокументовПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	ПустыеСсылки = ПолучитьПустыеСсылки(Объект.Шаблон);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СписокДокументовИсходныйДокумент.ВыбиратьТип = Ложь;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИсходныйДокумент) Тогда
		ТекущиеДанные.ИсходныйДокумент = ПустыеСсылки.Старый;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоШаблонНесколькоДокументов(лШаблон)	
	Возврат лШаблон.РаспределениеТоваров = 2;
КонецФункции	

&НаСервереБезКонтекста
Функция ЭтоШаблонМножествоДокументов(лШаблон)	
	Ответ = Ложь;
	
	Если лШаблон.ИспользоватьГрупповойДокумент И лШаблон.РаспределениеТоваров = 1 Тогда
		Ответ = Истина;			
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоШаблонНесколькоСкладов(лШаблон)	
	Возврат лШаблон.ИспользоватьВторойСклад;
КонецФункции

&НаКлиенте
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	
	УдалитьДочернийДокументНаСервере(Элемент.ТекущиеДанные.ДокументТСД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДочернийДокументНаСервере(ДочернийДокумент)
	
	Если ЗначениеЗаполнено(ДочернийДокумент) Тогда
		Попытка
			ДочернийДокументОбъект = ДочернийДокумент.ПолучитьОбъект();
			ДочернийДокументОбъект.Удалить();
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовИсходныйДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ЕстьДокументвТЧ(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("Документ: " + ВыбранноеЗначение + " уже был добавлен в список ранее. ");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Элементы.СписокДокументов.ТекущиеДанные.ДокументТСД) Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("Для документа: " + Элементы.СписокДокументов.ТекущиеДанные.ИсходныйДокумент + " уже создан документ ТСД, изменение невозможно ");
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ЕстьДокументвТЧ(лИсходныйДокумент)
	
	Возврат Объект.СписокДокументов.НайтиСтроки(Новый Структура("ИсходныйДокумент", лИсходныйДокумент)).Количество() > 0; 
	
КонецФункции

&НаСервере
Функция ЕстьДокументвТЧЗадания(лИсходныйДокумент)
	
	Возврат Объект.Задания.НайтиСтроки(Новый Структура("Задание", лИсходныйДокумент)).Количество() > 0; 
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНесколько(Команда)
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда		
		ПараметрыПодбора = Новый Структура;
		ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
		ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ВидДокумента = ВидДокумента(Объект.Шаблон);
		ОткрытьФорму("Документ." + ВидДокумента + ".ФормаВыбора", ПараметрыПодбора, Элементы.СписокДокументов);
	Иначе
		Сообщить("Не выбран шаблон");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМультиЗадание(Команда)
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда		
		ПараметрыПодбора = Новый Структура;
		ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
		ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ВидДокумента = ВидДокумента(Объект.Шаблон);
		ОткрытьФорму("Документ." + ВидДокумента + ".ФормаВыбора", ПараметрыПодбора, Элементы.Задания);
	Иначе
		Сообщить("Не выбран шаблон");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидДокумента(Шаблон);
	ВидДокумента = Шаблон.ВидДокумента;
	Возврат ВидДокумента;
КонецФункции

&НаКлиенте
Процедура СписокДокументовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Для каждого лИсходныйДокумент Из ВыбранноеЗначение Цикл
		Если ЕстьДокументвТЧ(лИсходныйДокумент) Тогда
			Сообщить("Документ: " + лИсходныйДокумент + " уже был добавлен в список ранее. ");
		Иначе	
			СтрокаТЧ = Объект.СписокДокументов.Добавить();
			СтрокаТЧ.ИсходныйДокумент = лИсходныйДокумент;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияПриИзменении(Элемент)
	
	Попытка
		ЗаполнитьСкладыИКонтрагентыПоДокументам();
		Если Объект.Задания.Количество() > 0 Тогда
			Объект.Склад = Объект.Задания[0].Склад;
			Объект.Клиент = Объект.Задания[0].Контрагент;
		КонецЕсли;		
	Исключение 
		Сообщить("Не удалось заполнить склады и контрагенты по вложенным документам. ");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладыИКонтрагентыПоДокументам()
	
	ТЧ = Объект.Задания;
	
	Для каждого Стр Из ТЧ Цикл
		
		ТекущийИсходныйДокумент = Стр.Задание;
		
		Попытка	
			
			Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Партнер; Исключение КонецПопытки;
			
			Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
				Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Получатель; Исключение КонецПопытки;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
				Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Распоряжение.Партнер; Исключение КонецПопытки;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
				Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Распоряжение.Отправитель; Исключение КонецПопытки;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
				Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Распоряжение.Получатель; Исключение КонецПопытки;
			КонецЕсли;
						
			Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
				Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Отправитель; Исключение КонецПопытки;
			КонецЕсли;		
			
		Исключение
		КонецПопытки;
		
		Попытка
			Если ТипЗнч(ТекущийИсходныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Или
				ТипЗнч(ТекущийИсходныйДокумент) = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов") Тогда					
				Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
					Попытка Стр.Контрагент = ТекущийИсходныйДокумент.СкладПолучатель; Исключение КонецПопытки;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
					Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Получатель; Исключение КонецПопытки;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
					Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Получатель; Исключение КонецПопытки;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
					Попытка Стр.Склад = ТекущийИсходныйДокумент.Отправитель; Исключение КонецПопытки;
				КонецЕсли;		
			КонецЕсли;
		Исключение
		КонецПопытки;
				
		Попытка
			Попытка Стр.Склад = ТекущийИсходныйДокумент.Склад; Исключение КонецПопытки;
			
			Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
				Попытка Стр.Склад = ТекущийИсходныйДокумент.ТорговыйОбъект; Исключение КонецПопытки;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
				Попытка Стр.Склад = ТекущийИсходныйДокумент.Помещение.Владелец; Исключение КонецПопытки;
			КонецЕсли;
						
			Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
				Попытка Склад = ТекущийИсходныйДокумент.СкладОтправитель; Исключение КонецПопытки;
			КонецЕсли;		
		Исключение
		КонецПопытки;
		
		Попытка
			//При создании группового документа ТСД с видом исходного документа «Расходный ордер на товары» 
			//необходимо изменять статус всех исходных документов с «К проверке» на «В процессе проверки».
			Если ТипЗнч(ТекущийИсходныйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда	
				Если ТекущийИсходныйДокумент.Статус = Перечисления.СтатусыРасходныхОрдеров.КПроверке Тогда
					ТекущийИсходныйДокументОбъект = ТекущийИсходныйДокумент.ПолучитьОбъект();
					ТекущийИсходныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВПроцессеПроверки;
					ТекущийИсходныйДокументОбъект.Записать();
				КонецЕсли;
			КонецЕсли;			
		Исключение
		КонецПопытки;
		
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Для каждого лИсходныйДокумент Из ВыбранноеЗначение Цикл
		Если ЕстьДокументвТЧЗадания(лИсходныйДокумент) Тогда
			Сообщить("Документ: " + лИсходныйДокумент+" уже был добавлен в список ранее. ");
		Иначе	
			СтрокаТЧ = Объект.Задания.Добавить();
			СтрокаТЧ.Задание = лИсходныйДокумент;
			ЗаполнитьСкладыИКонтрагентыПоДокументам();
			
			Если Объект.Задания.Количество() > 0 Тогда
				Объект.Склад = Объект.Задания[0].Склад;
				Объект.Клиент = Объект.Задания[0].Контрагент;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗакрытиеВыбораПомещения", ЭтотОбъект), ПолучитьСписокПомещений(), Элементы.Помещение, 0);	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПомещений() 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СкладскиеПомещения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СкладскиеПомещения КАК СкладскиеПомещения
	|ГДЕ
	|   1=1");
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "СкладскиеПомещения.Владелец = &ТекущийСклад");
		Запрос.УстановитьПараметр("ТекущийСклад", Объект.Склад);
	КонецЕсли;
		
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокВозврата;
	
КонецФункции

&Наклиенте
Процедура ЗакрытиеВыбораПомещения(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		Попытка Объект.Помещение = Результат.Значение; Исключение КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьШтрихкодыУпаковокПодПТУНаСервере()	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ПроверкаКлючаИЗапросВСервис();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШтрихкодыУпаковокПодПТУ(Команда)	
	СоздатьШтрихкодыУпаковокПодПТУНаСервере();
КонецПроцедуры

#Область ВкладкиПодборРазмещениеГрупповаяРабота

//механизм переключения видимости вкладок.
&НаСервереБезКонтекста
Функция РеквизитГрупповаяРабота(Шаблон)
	
	Возврат Шаблон.ГрупповаяРабота;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьВидимостьВкладокПодборРазмещение()   
	
	Если ЗначениеЗаполнено(Объект.ДатаЗавершения) Тогда
		ВключенаГрупповаяРабота = Ложь;
	КонецЕсли;	
	
	Элементы.ГрПодбор.Видимость = Не ВключенаГрупповаяРабота;
	Элементы.ГрРазмещение.Видимость = Не ВключенаГрупповаяРабота;
	Элементы.ГрПодборГрупповаяРабота.Видимость = ВключенаГрупповаяРабота;
	Элементы.ГрРазмещениеГрупповаяРабота.Видимость = ВключенаГрупповаяРабота;     
	
	УстановитьОтборыСписковСтрокГрупповойРаботы(ВключенаГрупповаяРабота);	              		
	Элементы.ТСД.Доступность = Не РеквизитГрупповаяРабота(Объект.Шаблон);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыСписковСтрокГрупповойРаботы(ВключенаГрупповаяРабота)
	
	Если ВключенаГрупповаяРабота Тогда
		СписокСтрокПодбораГрупповаяРабота.Параметры.УстановитьЗначениеПараметра("ДокументТСД", Объект.Ссылка);
		СписокСтрокРазмещенияГрупповаяРабота.Параметры.УстановитьЗначениеПараметра("ДокументТСД", Объект.Ссылка);
	Иначе
		СписокСтрокПодбораГрупповаяРабота.Параметры.УстановитьЗначениеПараметра("ДокументТСД", Справочники.ДатаМобайл_ДокументыТСД.ПустаяСсылка());
		СписокСтрокРазмещенияГрупповаяРабота.Параметры.УстановитьЗначениеПараметра("ДокументТСД", Справочники.ДатаМобайл_ДокументыТСД.ПустаяСсылка());   
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ОграничениеТипаРеквизита()
	
	ВидДокумента = Объект.Шаблон.ВидДокумента;
	ВидДокументаНового = Объект.Шаблон.ВидДокументаНового;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Массив = Новый Массив(); 
		Массив.Добавить(Тип("ДокументСсылка." + ВидДокумента)); 
		НашеОписание = Новый ОписаниеТипов(Массив);
		
		Элементы.ИсходныйДокумент.ОграничениеТипа = НашеОписание;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДокументаНового) Тогда
		Массив = Новый Массив(); 
		Массив.Добавить(Тип("ДокументСсылка." + ВидДокументаНового)); 
		НашеОписание = Новый ОписаниеТипов(Массив);
		
		Элементы.НовыйДокумент.ОграничениеТипа = НашеОписание;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Определяет отображение реквизита
// "Новый документ" на форме в виде табличной части
// или в виде поля формы
&НаКлиенте
Процедура ВидимостьДоступностьНовогоДокумента()
	
	ВидимостьТЧ = НовыйДокументКакТабличнаяЧасть(Объект.Шаблон);
	
	Элементы.НовыйДокумент.Видимость = Не ВидимостьТЧ;
	Элементы.ГрНовыеДокументы.Видимость = ВидимостьТЧ;
	
	// очистка реквизитов
	Если ВидимостьТЧ И ЗначениеЗаполнено(Объект.НовыйДокумент) Тогда
		Объект.НовыйДокумент = Неопределено;
	КонецЕсли;
	
	Если Не ВидимостьТЧ И Объект.НовыеДокументы.Количество() > 0 Тогда
		Объект.НовыеДокументы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Функция - возвращает признак выводить в документе ТСД
//  реквизит "Новый документ" как табличную часть
//
// Параметры:
//  ШаблонСсылка - СправочникСсылка.ДатаМобайл_ШаблоныДокументов - Ссылка на шаблон
// 
// Возвращаемое значение:
//   Булево 
//
&НаСервере
Функция НовыйДокументКакТабличнаяЧасть(ШаблонСсылка)
	
	Возврат Справочники.ДатаМобайл_ШаблоныДокументов.НовыйДокументКакТабличнаяЧасть(ШаблонСсылка);
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьПустыеСсылки(лШаблон)
	
	Ответ = Новый Структура("Старый,Новый,Создавать");
	Ответ.Старый = Документы[лШаблон.ВидДокумента].ПустаяСсылка();
	Ответ.Новый = Ответ.Старый;
	
	Если СокрЛП(лШаблон.ВидДокументаНового) <> "" Тогда
		Ответ.Новый = Документы[лШаблон.ВидДокументаНового].ПустаяСсылка();
		Ответ.Создавать = Истина;
	Иначе	
		Ответ.Создавать = Ложь;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьТСДПоКоду(Код) 
	
	Возврат ПланыОбмена.ДатаМобайл_СписокТСД.НайтиПоКоду(Код);
	
КонецФункции

&НаСервереБезКонтекста
Функция УжеЕсть(лСсылка, лИсходныйДокумент)
	
	Если лИсходныйДокумент <> Неопределено Тогда
		Если Не лИсходныйДокумент.Пустая() Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДатаМобайл_ДокументыТСД.Ссылка
			|ИЗ
			|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
			|ГДЕ
			|	ДатаМобайл_ДокументыТСД.ИсходныйДокумент = &ИсходныйДокумент
			|	И ДатаМобайл_ДокументыТСД.Ссылка <> &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", лСсылка);
			Запрос.УстановитьПараметр("ИсходныйДокумент", лИсходныйДокумент);
			Рез = Запрос.Выполнить().Выбрать();
			Если Рез.Следующий() Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПомеченНаУдаление(лИсходныйДокумент)
	
	Если лИсходныйДокумент <> Неопределено Тогда
		Если Не лИсходныйДокумент.Пустая() Тогда
			Если лИсходныйДокумент.ПометкаУдаления Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ложь; 
	
КонецФункции

 &НаКлиенте
Функция ОбщийМодуль(Имя) Экспорт
	
	Модуль = Вычислить(Имя);
	
	#Если Не ВебКлиент Тогда
		
		// В веб-клиенте не проверяется
		// т.к. при обращении к модулям с вызовом сервера типа такого модуля в веб-клиенте не существует.
		
		Если Имя <> "СтроковыеФункцииКлиентСервер" Тогда
			Модуль_СтроковыеФункцииКлиентСервер = ОбщийМодуль("СтроковыеФункцииКлиентСервер");
		КонецЕсли;
		
		Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
			Если Имя <> "СтроковыеФункцииКлиентСервер" Тогда
				ВызватьИсключение Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Общий модуль ""%1"" не найден.'"), 
				Имя);
			Иначе
				ВызватьИсключение НСтр("ru = 'Неизвестное имя общего модуля - СтроковыеФункцииКлиентСервер. Обратитесь к разработчикам программы.'");			
			КонецЕсли;	
		КонецЕсли;
		
	#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

#КонецОбласти

// Zolla
#Область ZOLLA

// исходные документы

&НаКлиенте
Процедура ИсходныйДокументПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ИсходныйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") И Не ЗначениеЗаполнено(Объект.ИсходныйДокумент) Тогда
		Объект.ДМ_ИсходныеДокументы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныйДокументОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьСписокДокументов(СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныйДокументНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ОткрытьСписокДокументов(СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныйДокументОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ДМ_ИсходныеДокументы.Очистить();	
	
КонецПроцедуры

// новые документы

&НаКлиенте
Процедура НовыйДокументПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.НовыйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") И Не ЗначениеЗаполнено(Объект.НовыйДокумент) Тогда
		Объект.ДМ_НовыеДокументы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ОткрытьСписокДокументов(СтандартнаяОбработка, Ложь, "НовыйДокумент");
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ДМ_НовыеДокументы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьСписокДокументов(СтандартнаяОбработка, Истина, "НовыйДокумент");
	
КонецПроцедуры


// новые функции
&НаСервере
Функция ПолучитьСписокИсходныхДокументов()
	
	Возврат Объект.ДМ_ИсходныеДокументы.Выгрузить().ВыгрузитьКолонку("ИсходныйДокумент"); 
	
КонецФункции 

&НаСервере
Функция ПолучитьСписокНовыхДокументов()
	
	Возврат Объект.ДМ_НовыеДокументы.Выгрузить().ВыгрузитьКолонку("НовыйДокумент"); 
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСписокДокументов(СтандартнаяОбработка, Открытие = Истина, ИмяРеквизита = "ИсходныйДокумент")
	
	Если ИмяРеквизита = "ИсходныйДокумент" Тогда
		Если ТипЗнч(Объект.ИсходныйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
			Если Открытие Тогда
				Если Объект.ДМ_ИсходныеДокументы.Количество() <= 1 Тогда
					СтандартнаяОбработка = Истина;
					Возврат;
				Иначе
					СтандартнаяОбработка = Ложь;
				КонецЕсли;
			Иначе
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Истина;
			Возврат;
		КонецЕсли;
		
		ЗначенияСписка = ПолучитьСписокИсходныхДокументов();
		
	ИначеЕсли ИмяРеквизита = "НовыйДокумент" Тогда
		Если ТипЗнч(Объект.НовыйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
			Если Открытие Тогда
				Если Объект.ДМ_НовыеДокументы.Количество() <= 1 Тогда
					СтандартнаяОбработка = Истина;
					Возврат;
				Иначе
					СтандартнаяОбработка = Ложь;
				КонецЕсли;
			Иначе
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Истина;
			Возврат;
		КонецЕсли; 
		
		ЗначенияСписка = ПолучитьСписокНовыхДокументов();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияСписка"   , ЗначенияСписка);
	ПараметрыФормы.Вставить("ИмяСпискаЗначений", "Отбор (размещение) товаров");
	ПараметрыФормы.Вставить("ОписаниеТипов"    , Новый ОписаниеТипов("ДокументСсылка.ОтборРазмещениеТоваров"));
	ПараметрыФормы.Вставить("ИмяФормыВыбора"   , "Документ.ОтборРазмещениеТоваров.ФормаВыбора");
	
	ФормаРедактированияСписка = ПолучитьФорму("Обработка.ДатаМобайл_АРМДиспетчера.Форма.ФормаРедактированияСписка", ПараметрыФормы, ЭтаФорма); 
	ФормаРедактированияСписка.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаРедактированияСписка.Открыть();
	
КонецПроцедуры

#КонецОбласти
