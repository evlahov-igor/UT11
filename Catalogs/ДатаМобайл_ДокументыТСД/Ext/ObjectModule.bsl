
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Отключение механизма регистрации объектов.
	ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата();
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		Сообщить("Не заполнена дата создания документа!");
		Отказ = Истина;
	КонецЕсли;	
	
	Попытка
		ОбъектМодифицирован = ОбъектМодифицирован(ЭтотОбъект, Истина, Истина);
		Если ОбменДанными.Получатели.АвтоЗаполнение Тогда
			ОбменДанными.Получатели.Очистить();
			
			Если Не ЗначениеЗаполнено(Ссылка) Тогда //новый объект
				Если Не ЗначениеЗаполнено(ТСД) Тогда
					Если СписокТерминалов.Количество() = 0 Тогда
						ОбменДанными.Получатели.Заполнить();
					Иначе
						Для каждого СтрокаТерминал Из СписокТерминалов Цикл
							ОбменДанными.Получатели.Добавить(СтрокаТерминал.ТСД);	
						КонецЦикла;
					КонецЕсли;
				Иначе	
					ОбменДанными.Получатели.Добавить(ТСД);
				КонецЕсли;	
			Иначе
				Если ОбъектМодифицирован Тогда
					Если Не ЗначениеЗаполнено(ТСД) Или Не ЗначениеЗаполнено(Ссылка.ТСД) Тогда
						Если СписокТерминалов.Количество() = 0 Тогда
							ОбменДанными.Получатели.Заполнить();
						Иначе
							Для каждого СтрокаТерминал Из СписокТерминалов Цикл
								ОбменДанными.Получатели.Добавить(СтрокаТерминал.ТСД);	
							КонецЦикла;
						КонецЕсли;
					Иначе	
						ОбменДанными.Получатели.Добавить(ТСД);
						ОбменДанными.Получатели.Добавить(Ссылка.ТСД);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если СокрЛП(Номер) = "" Тогда
			Если Шаблон.РаспределениеТоваров = 2 И Не ЗначениеЗаполнено(РодительскийДокумент) Тогда 
				Номер = "Групповой";
			Иначе
				Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
					Номер = СокрЛП(ИсходныйДокумент.Номер);
				Иначе
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если СокрЛП(Номер) = "" Тогда
			Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
				Номер = СокрЛП(ИсходныйДокумент.Код);
			Иначе
			КонецЕсли;	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если Дата = Дата(1,1,1) Тогда
			Если Шаблон.РаспределениеТоваров = 2 И Не ЗначениеЗаполнено(РодительскийДокумент) Тогда 
				Дата = ТекущаяДата();
			Иначе
				Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
					Дата = ИсходныйДокумент.Дата;
				Иначе
					Дата = ТекущаяДата();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если Шаблон.РаспределениеТоваров = 2 И Не ЗначениеЗаполнено(РодительскийДокумент) Тогда
			Комментарий = "";
			Для каждого стр Из СписокДокументов Цикл
				Если ЗначениеЗаполнено(стр.ИсходныйДокумент) Тогда
					Попытка Комментарий = Комментарий + стр.ИсходныйДокумент.Номер + " от " + стр.ИсходныйДокумент.Дата + " "; Исключение КонецПопытки;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если СокрЛП(Комментарий) = "" Тогда
			Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
				Комментарий = СокрЛП(ИсходныйДокумент.Комментарий);
			КонецЕсли;	
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
	Попытка
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Или
				ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов") Тогда					
				Если Не ЗначениеЗаполнено(Клиент) Тогда
					Попытка Клиент = ИсходныйДокумент.СкладПолучатель; Исключение КонецПопытки;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Клиент) Тогда
					Попытка Клиент = ИсходныйДокумент.Получатель; Исключение КонецПопытки;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Клиент) Тогда
					Попытка Клиент = ИсходныйДокумент.Получатель; Исключение КонецПопытки;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Склад) Тогда
					Попытка Склад = ИсходныйДокумент.Отправитель; Исключение КонецПопытки;
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
	Попытка	
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Попытка Клиент = ИсходныйДокумент.Распоряжение.Партнер; Исключение КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Попытка Клиент = ИсходныйДокумент.Распоряжение.Отправитель; Исключение КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Попытка Клиент = ИсходныйДокумент.Распоряжение.Получатель; Исключение КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Попытка Клиент = ИсходныйДокумент.Партнер; Исключение КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Попытка Клиент = ИсходныйДокумент.Отправитель; Исключение КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Попытка Клиент = ИсходныйДокумент.Получатель; Исключение КонецПопытки;
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	Попытка
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеМДЛП") Тогда
				Попытка Клиент = ИсходныйДокумент.Грузополучатель; Исключение КонецПопытки;	
			ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.УведомлениеОПриемкеМДЛП") Тогда					
				Попытка Клиент = ИсходныйДокумент.Грузоотправитель; Исключение КонецПопытки;		
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
				Попытка Клиент = ИсходныйДокумент.СсылкаНаДокумент.Партнер Исключение КонецПопытки;			
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	Попытка
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Попытка Склад = ИсходныйДокумент.ТорговыйОбъект; Исключение КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Попытка Склад = ИсходныйДокумент.Помещение.Владелец; Исключение КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Попытка Склад = ИсходныйДокумент.Склад; Исключение КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Попытка Склад = ИсходныйДокумент.СкладОтправитель; Исключение КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СкладПолучатель) Тогда
			Попытка СкладПолучатель = ИсходныйДокумент.СкладПолучатель; Исключение КонецПопытки;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Помещение) Тогда
		Попытка Помещение = ИсходныйДокумент.Помещение; Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Попытка Организация = ИсходныйДокумент.Организация; Исключение КонецПопытки;
	КонецЕсли;
	
	Попытка
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитов Цикл
				Если НовЗнач.ИмяРеквизита = "Склад" Тогда
					Склад = НовЗнач.ЗначениеРеквизита;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	//Запрос в ЦРПТ приёмка
	Попытка
		ЗапросВСервисЧЗ = Истина;	
		Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ЗапросВСервисЧЗ") <> Ложь Тогда
			ЗапросВСервисЧЗ	= Ложь;
		КонецЕсли;
		Если ЗапросВСервисЧЗ Тогда			
			ПроверкаКлючаИЗапросВСервис();	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//ГРУППОВОЙ ДОКУМЕНТ (ТСД)
	Попытка
		Если Шаблон.РаспределениеТоваров = 2 И Не ЗначениеЗаполнено(РодительскийДокумент) Тогда
			ЗаписатьГрупповойДокумент(Отказ);
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
	//ГРУППОВОЙ ДОКУМЕНТ (1С)
	Попытка
		Если Шаблон.РаспределениеТоваров = 1 И Задания.Количество() > 0 Тогда
			Попытка
				ЗаполнитьСкладыИКонтрагентыПоДокументам();
				Склад = Задания[0].Склад;
				Клиент = Задания[0].Контрагент;	
			Исключение 
				Сообщить("Не удалось заполнить склады и контрагенты по вложенным документам. ");
			КонецПопытки;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//ВЫГРУЗКА СТРОК ПОДБОРА
	Попытка
		Если Шаблон.ЗагрузкаСтрокПодбораСДокументами И ЗначениеЗаполнено(ИсходныйДокумент) И СобранныеДанныеПодбор.Количество() = 0 И СобранныеДанныеПриемка.Количество() = 0 Тогда		
			НайтиЗаписатьПрошлыеСтрокиПодбора(Отказ);					
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	// Zolla ++
	Если ТипЗнч(ЭтотОбъект.ИсходныйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
		Если Не ЗначениеЗаполнено(ЭтотОбъект.ИсходныйДокумент) И ЭтотОбъект.ДМ_ИсходныеДокументы.Количество() > 0 Тогда
			ЭтотОбъект.ИсходныйДокумент =  ЭтотОбъект.ДМ_ИсходныеДокументы[0].ИсходныйДокумент;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.ИсходныйДокумент) И ЭтотОбъект.ДМ_ИсходныеДокументы.Количество() = 0 Тогда
			нСтр =  ЭтотОбъект.ДМ_ИсходныеДокументы.Добавить(); 
			нСтр.ИсходныйДокумент = ЭтотОбъект.ИсходныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЭтотОбъект.НовыйДокумент) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
		Если Не ЗначениеЗаполнено(ЭтотОбъект.НовыйДокумент) И ЭтотОбъект.ДМ_НовыеДокументы.Количество() > 0 Тогда
			ЭтотОбъект.НовыйДокумент =  ЭтотОбъект.ДМ_НовыеДокументы[0].НовыйДокумент;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.НовыйДокумент) И ЭтотОбъект.ДМ_НовыеДокументы.Количество() = 0 Тогда
			нСтр =  ЭтотОбъект.ДМ_НовыеДокументы.Добавить(); 
			нСтр.НовыйДокумент = ЭтотОбъект.НовыйДокумент;
		КонецЕсли;
	КонецЕсли;
	// Zolla --
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	// Отключение механизма регистрации объектов.
	ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	
	//ГРУППОВОЙ ДОКУМЕНТ
	Если Шаблон.РаспределениеТоваров = 2 И Не ЗначениеЗаполнено(РодительскийДокумент) Тогда
		УдалитьГрупповойДокумент(Отказ);
	КонецЕсли;
	
	Попытка
		Если Не ЗначениеЗаполнено(ТСД) Или Не ЗначениеЗаполнено(Ссылка.ТСД) Тогда
			ОбменДанными.Получатели.Заполнить();
		Иначе	
			ОбменДанными.Получатели.Добавить(ТСД);
			ОбменДанными.Получатели.Добавить(Ссылка.ТСД);
		КонецЕсли;
	Исключение
	КонецПопытки; 
	
	Если не Отказ тогда
		ДатаМобайл_ОбщийМодуль.ОчиститьЗаписиГрупповогоДокумента(Ссылка);
		ДатаМобайл_ОбщийМодуль.ОчиститьЗаписиТСДГрупповогоДокумента(Ссылка);
		ДатаМобайл_ОбщийМодуль.ОчиститьЗаписиЗначенийДополнительныхФорм(Ссылка);
   КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании()
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбъектМодифицирован(Объект, ПроверятьТабличныеЧасти = Истина, ПроверятьСтандартные = Истина) 
	
	Попытка 
		
		СсылкаОбъекта = Объект.Ссылка;
		Метаданное = Ссылка.Метаданные();
		
		Для каждого Реквизит Из Метаданное.Реквизиты Цикл
			Если Объект[Реквизит.Имя] <> СсылкаОбъекта[Реквизит.Имя] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ПроверятьСтандартные Тогда
			Для каждого Реквизит Из Метаданное.СтандартныеРеквизиты Цикл
				Если Объект[Реквизит.Имя] <> СсылкаОбъекта[Реквизит.Имя] Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
				
		Если ПроверятьТабличныеЧасти Тогда
			Для каждого ТЧ Из Метаданное.ТабличныеЧасти Цикл
				
				Если Объект[ТЧ.Имя].Количество() <> СсылкаОбъекта[ТЧ.Имя].Количество() Тогда
					Возврат Истина;
				КонецЕсли;
				
				Для Индекс = 0 По Объект[ТЧ.Имя].Количество() - 1 Цикл
					ОбъектСтрокаТЧ = Объект[ТЧ.Имя][Индекс];
					СсылкаСтрокаТЧ = СсылкаОбъекта[ТЧ.Имя][Индекс];
					Для каждого РеквизитТЧ Из ТЧ.Реквизиты Цикл
						Если ОбъектСтрокаТЧ[РеквизитТЧ.Имя] <> СсылкаСтрокаТЧ[РеквизитТЧ.Имя] Тогда
							Возврат Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			КонецЦикла;        
		КонецЕсли;
		
		Возврат Ложь;
		
	Исключение
		
		Возврат Истина;
		
	КонецПопытки;	
		
КонецФункции

Процедура ПроверкаКлючаИЗапросВСервис() Экспорт
	
	СсылкаНаДокВСервис 	= ИсходныйДокумент;
	ЭтоТабак 			= Ложь;
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокВСервис) Или Не ТребуетсяЗапросВЦРПТ(Шаблон) Тогда
		Возврат;	
	КонецЕсли; 
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
		
	ЗначенияРеквизитовШаблон = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "ВидДокумента, ИмяТабличнойЧастиПодбор");
	ВидДокумента = ЗначенияРеквизитовШаблон.ВидДокумента;
	ИмяТабличнойЧастиПодбор = ЗначенияРеквизитовШаблон.ИмяТабличнойЧастиПодбор;
	
	ВидМаркируемойПродукцииДокументаМассив = ДатаМобайл_Маркировка.ПолучитьВидПродукцииИСДокумента(СсылкаНаДокВСервис, ИмяТабличнойЧастиПодбор);
	ВидМаркируемойПродукцииДокумента       = ВидМаркируемойПродукцииДокументаМассив[0];
	
	Если ВидМаркируемойПродукцииДокумента = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = ДатаМобайл_Маркировка.ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
	Модуь_ИнтерфейсИСМПКлиентСервер = ДатаМобайл_Маркировка.ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
	Модуь_ИнтерфейсМОТПКлиентСервер = ДатаМобайл_Маркировка.ОбщийМодуль("ИнтерфейсМОТПКлиентСервер");
	
	Если Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = Неопределено Тогда
		Сообщить("Конфигурация 1С не поддерживает работу с Маркировкой", 
		СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	
	Организация = СсылкаНаДокВСервис.Организация;
	
	//Табак
	Если ДатаМобайл_Маркировка.ЭтоТабакПоВидыПродукцииИС(ВидМаркируемойПродукцииДокумента) Тогда		
		ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
		Модуь_ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
		ЭтоТабак = Истина;
	Иначе
		ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
		Модуь_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));	
	КонецЕсли; 
	
	Если ТребуетсяОбновлениеКлючаСессии Тогда	
		Сообщить("Не получилось обновить ключ сессии. Проверьте настройки подключения к ИС.", СтатусСообщения.ОченьВажное);
		Json = "Не получилось обновить ключ сессии. Проверьте настройки подключения к ИС.";
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьТребуетсяВыгрузкаМарок(ЭтотОбъект) Тогда
		Возврат;	
	КонецЕсли;
	
	СсылкаНаДокОбъект = СсылкаНаДокВСервис.ПолучитьОбъект();
	
	МаркиСоздавались 		= Ложь;
	МаркиБылиНайдены 		= Ложь;
	ОшибкаПриСозданииМарки 	= Ложь;
	
	Если ВидДокумента = "ЗаказНаЭмиссиюКодовМаркировкиСУЗ" Тогда
		ШтрихкодыУпаковок = ДатаМобайл_Маркировка.ПолучитьКМИзПулаПоЗаказНаЭмиссию(СсылкаНаДокВСервис);
	Иначе
		ШтрихкодыУпаковок = СсылкаНаДокОбъект.ШтрихкодыУпаковок;
	КонецЕсли;
	
	Для каждого СтрШтрихкод Из ШтрихкодыУпаковок Цикл
		
		Если ЗначениеЗаполнено(СтрШтрихкод.ШтрихкодУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоУпаковка = Ложь;
		
		//если это упаковка и ее нету в базе, тогда обращаемся в исмп\мотп
		ЗначениеШтрихкода 	= СтрШтрихкод.ЗначениеШтрихкода;
		ДанныеУпаковки  	= Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода);
		
		Если СтрДлина(ЗначениеШтрихкода) = 18 Тогда   //обувная продукция с 18
			ЭтоУпаковка = Истина;
			
			Если ДанныеУпаковки = Неопределено Тогда
				ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода("(00)" + ЗначениеШтрихкода);
				ЗначениеШтрихкода = "(00)" + ЗначениеШтрихкода;
			КонецЕсли; 
			
		ИначеЕсли СтрДлина(ЗначениеШтрихкода) = 20 И (СтрНачинаетсяС(ЗначениеШтрихкода, "00") Или СтрНачинаетсяС(ЗначениеШтрихкода, "01")) Тогда //обувная продукция с 20	
			ЭтоУпаковка = Истина;			
		ИначеЕсли СтрДлина(ЗначениеШтрихкода) = 22 И (СтрНачинаетсяС(ЗначениеШтрихкода, "(00)") Или СтрНачинаетсяС(ЗначениеШтрихкода, "(01)")) Тогда //обувная продукция с 22	
			ЭтоУпаковка = Истина;
		ИначеЕсли ЭтоТабак И СтрДлина(ЗначениеШтрихкода) > 21 Тогда  //табак
			ЭтоУпаковка = Истина;
			
			Если СтрДлина(ЗначениеШтрихкода) = 34 Или СтрДлина(ЗначениеШтрихкода) = 35 И ДанныеУпаковки = Неопределено Тогда
				Поз = Найти(ЗначениеШтрихкода, "8005");
				Если Поз > 0 Тогда
					ЗначениеКМ = Лев(ЗначениеШтрихкода, Поз - 1);
					ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеКМ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли; 
		
		Если Не ЭтоУпаковка Тогда
			Продолжить;	
		КонецЕсли; 
		
		Если (ДанныеУпаковки = Неопределено Или ДанныеУпаковки.Ссылка.ВложенныеШтрихкоды.Количество() = 0) И ЭтоУпаковка Тогда
			
			ОшибкаПриОбращении = "";
			
			СсылкаНаШтрихкод = ДатаМобайл_Маркировка.СформироватьЗапросКСервисуМОТПилиИСМПиСоздатьСправочникСсылкаМарка(ЗначениеШтрихкода,,,, ЭтоТабак, СсылкаНаДокВСервис, ВидМаркируемойПродукцииДокумента,, Шаблон, Истина, ОшибкаПриОбращении);
			
			Если ОшибкаПриОбращении <> "" Тогда 
				Json = ОшибкаПриОбращении;
				ОшибкаПриСозданииМарки = Истина;
				Прервать;
			ИначеЕсли СсылкаНаШтрихкод <> ПредопределенноеЗначение("Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка") Тогда 
				СтрШтрихкод.ШтрихкодУпаковки = СсылкаНаШтрихкод;
				МаркиСоздавались = Истина; 
			КонецЕсли;
			
		ИначеЕсли (ДанныеУпаковки <> Неопределено Или ДанныеУпаковки.Ссылка.ВложенныеШтрихкоды.Количество() > 0) И ЭтоУпаковка Тогда
			СтрШтрихкод.ШтрихкодУпаковки = ДанныеУпаковки.Ссылка;
			МаркиБылиНайдены = Истина;	
		КонецЕсли;	
		
	КонецЦикла; 								
	
	Если ОшибкаПриСозданииМарки Тогда
		
	ИначеЕсли МаркиСоздавались Тогда
		Json = "Групповые упаковки созданы";
	ИначеЕсли МаркиБылиНайдены Тогда 
		Json = "Групповые упаковки найдены";
	КонецЕсли; 
	
	СсылкаНаДокОбъект.Записать();
	
КонецПроцедуры

Функция ТребуетсяЗапросВЦРПТ(Шаблон)
	
	Если Шаблон.МаркировкаЗапросВЦРПТ И Шаблон.ИспользоватьМаркировку Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьТребуетсяВыгрузкаМарок(СсылкаНаДок)
	
	ВидДокумента = СсылкаНаДок.Шаблон.ВидДокумента;
	
	Если ВидДокумента = "ПриобретениеТоваровУслуг" 
		Или ВидДокумента = "ПриемкаТоваровИСМП" 
		Или ВидДокумента = "ЗаказНаЭмиссиюКодовМаркировкиСУЗ" Тогда
		Возврат Истина;
		
	ИначеЕсли ВидДокумента = "ВозвратТоваровОтКлиента"	Тогда
		
		МаркиУказаныПоставщиком = Ложь;
		
		Если СсылкаНаДок.ИсходныйДокумент.ШтрихкодыУпаковок.Количество() > 0 Тогда
			МаркиУказаныПоставщиком = Истина;
		КонецЕсли;
		
		Если МаркиУказаныПоставщиком Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	ИначеЕсли ВидДокумента = "УведомлениеОПриемкеМДЛП" Тогда
		ПрямойАкцепт = Ложь;
		Попытка 
			Если СсылкаНаДок.ИсходныйДокумент.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
				ПрямойАкцепт = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ПрямойАкцепт Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ()

Процедура ЗаписатьГрупповойДокумент(Отказ)
	
	Если ЭтоНовый() Тогда
		лРодительскийДокумент = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку();
		УстановитьСсылкуНового(лРодительскийДокумент);
	Иначе	
		лРодительскийДокумент = Ссылка;	
	КонецЕсли;
	
	Для каждого СтрокаДокументов Из СписокДокументов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокументов.ДокументТСД) И ЗначениеЗаполнено(СтрокаДокументов.ИсходныйДокумент) Тогда
			ДочернийДокумент = ПолучитьДочернийДокумент(СтрокаДокументов.ИсходныйДокумент, лРодительскийДокумент);
			Если Не ЗначениеЗаполнено(ДочернийДокумент) Тогда
				ДочернийДокумент = СоздатьДочернийДокумент(СтрокаДокументов.ИсходныйДокумент, лРодительскийДокумент);
			КонецЕсли;		
			СтрокаДокументов.ДокументТСД = ДочернийДокумент;
		КонецЕсли;	
		
		Попытка ОбработатьПометкуУдаленияГрупповойДокумент(СтрокаДокументов); Исключение КонецПопытки;
		Попытка ОбработатьУстановкуДатГрупповойДокумент(СтрокаДокументов); Исключение КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
Процедура УдалитьГрупповойДокумент(Отказ)
	
	Для каждого СтрокаДокументов Из СписокДокументов Цикл		
		Попытка ОбработатьУдалениеГрупповойДокумент(СтрокаДокументов); Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПометкуУдаленияГрупповойДокумент(СтрокаДокументов) 
	
	Если ЗначениеЗаполнено(СтрокаДокументов.ДокументТСД) Тогда
		Если ПометкаУдаления И Не СтрокаДокументов.ДокументТСД.ПометкаУдаления Тогда
			ДочернийДокументОбъект = СтрокаДокументов.ДокументТСД.ПолучитьОбъект();
			ДочернийДокументОбъект.ПометкаУдаления = Истина;
			ДочернийДокументОбъект.Записать();
		ИначеЕсли Не ПометкаУдаления И СтрокаДокументов.ДокументТСД.ПометкаУдаления Тогда
			ДочернийДокументОбъект = СтрокаДокументов.ДокументТСД.ПолучитьОбъект();
			ДочернийДокументОбъект.ПометкаУдаления = Ложь;
			ДочернийДокументОбъект.Записать();			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура ОбработатьУстановкуДатГрупповойДокумент(СтрокаДокументов) 
		
	Если ЗначениеЗаполнено(СтрокаДокументов.ДокументТСД) Тогда
		Если ЗначениеЗаполнено(ДатаЗавершенияСбора) И Не ЗначениеЗаполнено(СтрокаДокументов.ДокументТСД.ДатаЗавершенияСбора) Тогда
			ДочернийДокументОбъект = СтрокаДокументов.ДокументТСД.ПолучитьОбъект();
			ДочернийДокументОбъект.ДатаЗавершенияСбора = ДатаЗавершенияСбора;
			ДочернийДокументОбъект.Записать();			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаПриемкиОператором) И Не ЗначениеЗаполнено(СтрокаДокументов.ДокументТСД.ДатаПриемкиОператором) Тогда
			ДочернийДокументОбъект = СтрокаДокументов.ДокументТСД.ПолучитьОбъект();
			ДочернийДокументОбъект.ДатаПриемкиОператором = ДатаПриемкиОператором;
			ДочернийДокументОбъект.Записать();			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаЗавершения) И Не ЗначениеЗаполнено(СтрокаДокументов.ДокументТСД.ДатаЗавершения) Тогда
			ДочернийДокументОбъект = СтрокаДокументов.ДокументТСД.ПолучитьОбъект();
			ДочернийДокументОбъект.ДатаЗавершения = ДатаЗавершения;
			ДочернийДокументОбъект.Записать();			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура ОбработатьУдалениеГрупповойДокумент(СтрокаДокументов) 
		
	Если ЗначениеЗаполнено(СтрокаДокументов.ДокументТСД) Тогда
		ДочернийДокументОбъект = СтрокаДокументов.ДокументТСД.ПолучитьОбъект();
		ДочернийДокументОбъект.Удалить();			
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДочернийДокумент(лИсходныйДокумент, лРодительскийДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатаМобайл_ДокументыТСД.Ссылка
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ
	|	ДатаМобайл_ДокументыТСД.ИсходныйДокумент = &ИсходныйДокумент
	|	И ДатаМобайл_ДокументыТСД.РодительскийДокумент = &РодительскийДокумент
	|	И НЕ ДатаМобайл_ДокументыТСД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИсходныйДокумент", лИсходныйДокумент);
	Запрос.УстановитьПараметр("РодительскийДокумент", лРодительскийДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ДатаМобайл_ДокументыТСД.ПустаяСсылка();	
	КонецЕсли;	
	
КонецФункции

Функция СоздатьДочернийДокумент(лДокумент, лРодительскийДокумент)
	
	НовыйДочернийДокумент = Справочники.ДатаМобайл_ДокументыТСД.СоздатьЭлемент();
	
	НовыйДочернийДокумент.Шаблон = Шаблон;
	НовыйДочернийДокумент.ИсходныйДокумент = лДокумент;
	НовыйДочернийДокумент.ТСД = ТСД;	
	НовыйДочернийДокумент.СписокТерминалов.Загрузить(СписокТерминалов.Выгрузить());	
	НовыйДочернийДокумент.РодительскийДокумент = лРодительскийДокумент;
	НовыйДочернийДокумент.Записать();
	
	Возврат НовыйДочернийДокумент.Ссылка; 
	
КонецФункции

Процедура ЗаполнитьСкладыИКонтрагентыПоДокументам()
	
	ТЧ = Задания;
	
	Для каждого Стр Из ТЧ Цикл
		
		ТекущийИсходныйДокумент = Стр.Задание;
		
		Попытка	
			
			Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Партнер; Исключение КонецПопытки;
			
			Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
				Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Получатель; Исключение КонецПопытки;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
				Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Распоряжение.Партнер; Исключение КонецПопытки;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
				Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Распоряжение.Отправитель; Исключение КонецПопытки;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
				Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Распоряжение.Получатель; Исключение КонецПопытки;
			КонецЕсли;
						
			Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
				Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Отправитель; Исключение КонецПопытки;
			КонецЕсли;		
			
		Исключение
		КонецПопытки;
		
		Попытка
			Если ТипЗнч(ТекущийИсходныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Или
				ТипЗнч(ТекущийИсходныйДокумент) = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов") Тогда					
				Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
					Попытка Стр.Контрагент = ТекущийИсходныйДокумент.СкладПолучатель; Исключение КонецПопытки;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
					Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Получатель; Исключение КонецПопытки;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
					Попытка Стр.Контрагент = ТекущийИсходныйДокумент.Получатель; Исключение КонецПопытки;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
					Попытка Стр.Склад = ТекущийИсходныйДокумент.Отправитель; Исключение КонецПопытки;
				КонецЕсли;		
			КонецЕсли;
		Исключение
		КонецПопытки;
				
		Попытка
			Попытка Стр.Склад = ТекущийИсходныйДокумент.Склад; Исключение КонецПопытки;
			
			Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
				Попытка Стр.Склад = ТекущийИсходныйДокумент.ТорговыйОбъект; Исключение КонецПопытки;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
				Попытка Стр.Склад = ТекущийИсходныйДокумент.Помещение.Владелец; Исключение КонецПопытки;
			КонецЕсли;
						
			Если Не ЗначениеЗаполнено(Стр.Склад) Тогда
				Попытка Склад = ТекущийИсходныйДокумент.СкладОтправитель; Исключение КонецПопытки;
			КонецЕсли;		
		Исключение
		КонецПопытки;
		
		Попытка
			//При создании группового документа ТСД с видом исходного документа «Расходный ордер на товары» 
			//необходимо изменять статус всех исходных документов с «К проверке» на «В процессе проверки».
			Если ТипЗнч(ТекущийИсходныйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда	
				Если ТекущийИсходныйДокумент.Статус = Перечисления.СтатусыРасходныхОрдеров.КПроверке Тогда
					ТекущийИсходныйДокументОбъект = ТекущийИсходныйДокумент.ПолучитьОбъект();
					ТекущийИсходныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВПроцессеПроверки;
					ТекущийИсходныйДокументОбъект.Записать();
				КонецЕсли;
			КонецЕсли;			
		Исключение
		КонецПопытки;
		
	КонецЦикла;
			
КонецПроцедуры

Процедура НайтиЗаписатьПрошлыеСтрокиПодбора(Отказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСД.Ссылка
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ
	|	ДатаМобайл_ДокументыТСД.ИсходныйДокумент = &ИсходныйДокумент
	|	И ДатаМобайл_ДокументыТСД.Шаблон = &Шаблон
	|	И ДатаМобайл_ДокументыТСД.ДатаЗавершения <> ДАТАВРЕМЯ(1,1,1)
	|	И ДатаМобайл_ДокументыТСД.Ссылка <> &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	ДатаМобайл_ДокументыТСД.ДатаЗавершения УБЫВ");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ТаблицаПовторнойВыгрузкиПодбор = Выборка.Ссылка.СобранныеДанныеПодбор.Выгрузить();
		Для каждого СтараяСтрокаПовторнойВыгрузкиПодбор Из ТаблицаПовторнойВыгрузкиПодбор Цикл
			НоваяСтрокаПовторнойВыгрузкиПодбор = СобранныеДанныеПодбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПовторнойВыгрузкиПодбор, СтараяСтрокаПовторнойВыгрузкиПодбор);
			НоваяСтрокаПовторнойВыгрузкиПодбор.ПризнакПовторнойВыгрузки = Истина;
		КонецЦикла;
		
		ТаблицаПовторнойВыгрузкиПриемка = Выборка.Ссылка.СобранныеДанныеПриемка.Выгрузить();
		Для каждого СтараяСтрокаПовторнойВыгрузкиПриемка Из ТаблицаПовторнойВыгрузкиПриемка Цикл
			НоваяСтрокаПовторнойВыгрузкиПриемка = СобранныеДанныеПриемка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПовторнойВыгрузкиПриемка, СтараяСтрокаПовторнойВыгрузкиПриемка);
			НоваяСтрокаПовторнойВыгрузкиПриемка.ПризнакПовторнойВыгрузки = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти