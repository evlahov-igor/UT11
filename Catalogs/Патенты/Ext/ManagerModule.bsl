#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак наличия действующего патента по организации и подразделению на заданную или текущую дату.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация;
//	Подразделение - СправочникСсылка.СтруктураПредприятия, Неопределено - подразделение организации;
//	ДатаПроверки - Дата, Неопределено - дата, на которую осуществляется поиск патента.
//
// Возвращаемое значение:
//	Булево - Истина - признак, что есть действующий патент.
//
Функция ЕстьДействующийПатент(Организация, Подразделение = Неопределено, Знач ДатаПроверки = Неопределено) Экспорт
	
	ДатаПроверки = ?(НЕ ЗначениеЗаполнено(ДатаПроверки), ТекущаяДатаСеанса(), ДатаПроверки);
	Возврат НЕ ПолучитьПатентыПоОрганизации(Организация, Подразделение, ДатаПроверки).Количество() = 0;
	
КонецФункции

// Возвращает действующие патенты по организации и подразделению на заданную или текущую дату.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация;
//	Подразделение - СправочникСсылка.СтруктураПредприятия, Неопределено - подразделение организации;
//	ДатаПроверки - Дата, Неопределено - дата, на которую осуществляется поиск патента.
//
// Возвращаемое значение:
//	Массив - СправочникСсылка.Патенты - список действующих патентов.
//
Функция ПолучитьДействующиеПатентыНаДату(Организация, Подразделение = Неопределено, Знач ДатаПроверки = Неопределено) Экспорт
	
	ДатаПроверки = ?(НЕ ЗначениеЗаполнено(ДатаПроверки), ТекущаяДатаСеанса(), ДатаПроверки);
	
	Возврат ПолучитьПатентыПоОрганизации(Организация, Подразделение, ДатаПроверки);
	
КонецФункции

// Возвращает все действующие патенты по организации и подразделению или действующие на определенную дату.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация;
//	Подразделение - СправочникСсылка.СтруктураПредприятия, Неопределено - подразделение организации;
//	ДатаПроверки - Дата, Неопределено - дата, на которую осуществляется поиск патента.
//
// Возвращаемое значение:
//	Массив - СправочникСсылка.Патенты - список действующих патентов.
//
Функция ПолучитьПатентыПоОрганизации(Организация, Подразделение = Неопределено, Знач ДатаПроверки = Неопределено) Экспорт
	
	МассивПатентов = Новый Массив();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НастройкиНалоговУчетныхПолитикЛокализация.ОрганизацияПрименяетПатенты(Организация) Тогда
		
		ОбиратьВсеПатенты = ?(ЗначениеЗаполнено(ДатаПроверки), Ложь, Истина);
		ДатаПроверки = ?(НЕ ЗначениеЗаполнено(ДатаПроверки), ТекущаяДатаСеанса(), ДатаПроверки);
		НеПроверятьПодразделение = Ложь;
		
		СписокПодразделений = Новый Массив();
			
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			ВышестоящееПодразделение = Подразделение;
			
			Пока ЗначениеЗаполнено(ВышестоящееПодразделение) Цикл
				СписокПодразделений.Добавить(ВышестоящееПодразделение);
				ВышестоящееПодразделение = ВышестоящееПодразделение.Родитель;
			КонецЦикла;
			
		Иначе
			
			НеПроверятьПодразделение = Истина;
			
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Патенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Патенты КАК Патенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патенты.ПрименениеПатента КАК ПатентыПрименениеПатента
		|		ПО (ПатентыПрименениеПатента.Ссылка = Патенты.Ссылка)
		|ГДЕ
		|	Патенты.Владелец = &Организация
		|	И НЕ Патенты.ПометкаУдаления
		|	И ((Патенты.ДатаНачала <= &КонецДняДокумента
		|		И Патенты.ДатаОкончания >= &НачалоДняДокумента)
		|			ИЛИ &ОбиратьВсеПатенты)
		|	И (ПатентыПрименениеПатента.Подразделение В (&СписокПодразделений)
		|			ИЛИ ПатентыПрименениеПатента.Ссылка ЕСТЬ NULL ИЛИ &НеПроверятьПодразделение)";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
		Запрос.УстановитьПараметр("НачалоДняДокумента", НачалоДня(ДатаПроверки));
		Запрос.УстановитьПараметр("КонецДняДокумента", КонецДня(ДатаПроверки));
		Запрос.УстановитьПараметр("ОбиратьВсеПатенты", ОбиратьВсеПатенты);
		Запрос.УстановитьПараметр("НеПроверятьПодразделение", НеПроверятьПодразделение);
		МассивПатентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	КонецЕсли;
	
	Возврат МассивПатентов;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Включает/отключает использование подсистемы "Свойства" для справочника.
//
Процедура НастроитьИспользованиеСвойств() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.Патенты КАК Патенты
		|ГДЕ
		|	НЕ Патенты.ПометкаУдаления");
		
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = НЕ Запрос.Выполнить().Пустой();
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Патенты", ПараметрыНабора);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.Патенты.ДобавитьПродажаПоПатентуВСтавкуБезНДС";
	Обработчик.Версия = "2.5.6.61";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("72c2cb13-d2de-4469-b64d-ccfc5256cb37");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Патенты.ЗарегистрироватьНалогообложениеПродажаПоПатенту";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Добавление налогообложения ""продажа по патенту"" в ставку ""Без НДС""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьНалогообложениеПродажаПоПатенту(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтавкиНДС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	ТипыНалогообложенияНДС.Ссылка = &СтавкаБезНДС
	|	И 0 В (ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТипыНалогообложенияНДС.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС.ТипыНалогообложенияНДС КАК ТипыНалогообложенияНДС
	|ГДЕ
	|	ТипыНалогообложенияНДС.Ссылка = &СтавкаБезНДС
	|	И ТипыНалогообложенияНДС.ТипНалогообложенияНДС = &НалогообложениеПродажаПоПатенту)";
	
	Запрос.УстановитьПараметр("СтавкаБезНДС", Справочники.СтавкиНДС.БезНДС);
	Запрос.УстановитьПараметр("НалогообложениеПродажаПоПатенту", Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ДобавитьПродажаПоПатентуВСтавкуБезНДС(Параметры) Экспорт
	
	ПолноеИмяОбъекта        = "Справочник.СтавкиНДС";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			ПродажаПоПатенту = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту;
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("ТипНалогообложения", ПродажаПоПатенту);
			СтрокиНалогообложения = СправочникОбъект.ТипыНалогообложенияНДС.Найти(ПараметрыОтбора);
			Если СтрокиНалогообложения = Неопределено Тогда 
				НоваяСтрокаНалогообложенияНДС = СправочникОбъект.ТипыНалогообложенияНДС.Добавить();
				НоваяСтрокаНалогообложенияНДС.ТипНалогообложенияНДС = ПродажаПоПатенту;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
