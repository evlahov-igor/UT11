#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ТипПолитики");
	
	Результат.Добавить("УчетСерийВНеотфактурованныхПоставкахТоваров");
	Результат.Добавить("УчетТоваровВПутиОтПоставщикаПоСериям");
	
	Результат.Добавить("УказыватьПриОтгрузке");
	Результат.Добавить("УказыватьПриОтгрузкеВРозницу");
	Результат.Добавить("УказыватьПриОтгрузкеКлиенту");
	Результат.Добавить("УказыватьПриОтгрузкеКомплектовДляРазборки");
	Результат.Добавить("УказыватьПриОтгрузкеКомплектующихДляСборки");
	Результат.Добавить("УказыватьПриОтгрузкеНаВнутренниеНужды");
	Результат.Добавить("УказыватьПриОтгрузкеПоВозвратуПоставщику");
	Результат.Добавить("УказыватьПриОтгрузкеПоПеремещению");
	
	Результат.Добавить("УказыватьПриПриемке");
	Результат.Добавить("УказыватьПриПриемкеКомплектующихПослеРазборки");
	Результат.Добавить("УказыватьПриПриемкеОтПоставщика");
	Результат.Добавить("УказыватьПриПриемкеПоВозвратуОтКлиента");
	Результат.Добавить("УказыватьПриВозвратеНепринятыхПолучателемТоваров");
	Результат.Добавить("УказыватьПриПриемкеПоПеремещению");
	Результат.Добавить("УказыватьПриПриемкеПоПрочемуОприходованию");
	Результат.Добавить("УказыватьПриПриемкеСобранныхКомплектов");
	
	Результат.Добавить("УказыватьПриОтраженииИзлишков");
	Результат.Добавить("УказыватьПриОтраженииНедостач");
	Результат.Добавить("УказыватьПриПеремещенииМеждуПомещениями");

	Результат.Добавить("УчетСерийВПереданныхНаКомиссиюТоваров");
	
	Возврат Результат;

КонецФункции

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения:
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника.
//  ТабличныеЧасти - Структура - Ключ - Имя табличной части объекта.
//                               Значение - Выгрузка в таблицу значений пустой табличной части.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	#Область СерииНеИспользуются
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СерииНеИспользуются";
	Элемент.Наименование = НСтр("ru = 'Серии не используются'", ОбщегоНазначения.КодОсновногоЯзыка());
	#КонецОбласти

КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - СправочникОбъект.ПолитикиУчетаСерий - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	НоменклатураВызовСервера.ПолитикиУчетаСерийОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПолитикиУчетаСерий.ЗаполнитьЭлементыНачальнымиДанными";
	Обработчик.Версия = "11.5.5.51";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("df569ba0-c064-4369-bed3-05cf710d0f57");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ПолитикиУчетаСерий.ЗарегистрироватьПредопределенныеЭлементыДляОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновление наименований предопределенных элементов.
	|До завершения обработки наименования этих элементов в ряде случаев будет отображаться некорректно.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ПолитикиУчетаСерий.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПолитикиУчетаСерий.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ПолитикиУчетаСерий.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьПредопределенныеЭлементыДляОбновления(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ЗарегистрироватьПредопределенныеЭлементыДляОбновления(Параметры, Метаданные.Справочники.ПолитикиУчетаСерий);
	
КонецПроцедуры

Процедура ЗаполнитьЭлементыНачальнымиДанными(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ЗаполнитьЭлементыНачальнымиДанными(Параметры, Метаданные.Справочники.ПолитикиУчетаСерий, Ложь, "Наименование");
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли
