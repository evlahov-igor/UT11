#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Помещает во временное хранилище схему компоновки данных,
// настройки компоновки данных и возвращает их адреса.
//
// Параметры:
//	ЭлементСтруктурыЦелей - СправочникСсылка.СтруктураЦелей, ДанныеФормыСтруктура - объект формы:
//			*Ссылка - СправочникСсылка.СтруктураЦелей - 
//
// Возвращаемое значение:
//	Структура - структура, содержащая адреса:
//		*СхемаКомпоновкиДанных - Строка - адрес схемы компоновки данных
//		*НастройкиКомпоновкиДанных - Строка - адрес настроек компоновки данных.
//
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(ЭлементСтруктурыЦелей) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	Если ТипЗнч(ЭлементСтруктурыЦелей) = Тип("СправочникСсылка.СтруктураЦелей") Тогда
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей;
	Иначе
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей.Ссылка;
	КонецЕсли;
	
	// Получим схему компоновки данных
	Если ЗначениеЗаполнено(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных)
		ИЛИ ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЭлементСтруктурыЦелейСсылка,
				ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено И ПустаяСтрока(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = Справочники.СтруктураЦелей.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанных");
	ИначеЕсли СхемаКомпоновкиДанных = Неопределено
		И Не ПустаяСтрока(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных) Тогда
		
		СхемаКомпоновкиДанных = Справочники.СтруктураЦелей.ПолучитьМакет(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных);
	КонецЕсли;
	
	ОтключитьОтборыПоФункциональнымОпциям(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Настройки = ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		ОтключитьОтборыПоФункциональнымОпциям(Настройки);
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

// Возвращает поля-ресурсы, доступные для выбора пользователем
//
// Параметры:
//	ЦельСсылка - СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить поля-ресурсы.
//
// Возвращаемое значение:
//	СписокЗначений - список, доступных пользователю полей-ресурсов (имя и синоним).
//
Функция ДоступныеЗначенияАнализа(ЦельСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДоступныхЗначений = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ЦельСсылка.СхемаКомпоновкиДанных)
		ИЛИ ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ЦельСсылка.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Настройки = ЦельСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ Настройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	ДоступныеПоля = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы;
	
	СлужебныеПоля = СлужебныеПоляЗначенияАнализа();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл 
		Если НЕ ДоступноеПоле.Ресурс
			ИЛИ НЕ СлужебныеПоля.Найти(Строка(ДоступноеПоле.Поле)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДоступныхЗначений.Добавить(ДоступноеПоле.Поле, ДоступноеПоле.Заголовок);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СписокДоступныхЗначений;
	
КонецФункции

// Возвращает поля-измерения, доступные для выбора пользователем
//
// Параметры:
//	ЦельСсылка - СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить поля-измерения.
//
// Возвращаемое значение:
//	СписокЗначений - список, доступных пользователю полей-измерений (имя и синоним).
//
Функция ДоступныеОбъектыАнализа(ЦельСсылка) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДоступныхОбъектов = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ЦельСсылка.СхемаКомпоновкиДанных)
		ИЛИ ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка,
				ЦельСсылка.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Настройки = ЦельСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ Настройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	ДоступныеПоля = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы;
	
	СлужебныеПоля = СлужебныеПоляОбъектаАнализа();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл 
		Если НЕ СлужебныеПоля.Найти(Строка(ДоступноеПоле.Поле)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДоступныхОбъектов.Добавить(ДоступноеПоле.Поле, ДоступноеПоле.Заголовок);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СписокДоступныхОбъектов;
	
КонецФункции

// Функция возвращает структуру с синонимом и схемой компоновки данных по имени макета.
//
// Параметры:
//	ЦельСсылка - СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить схему
//	ИмяМакета - Строка, Неопределено - имя получаемого макета схемы компоновки данных.
//
// Возвращаемое значение:
//	Структура - структура со свойствами:
//		*Описание - Строка - синоним получаемого макета.
//		*СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, Неопределено - найденная схема компоновки данных.
//		*НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных, Неопределено - найденные настройки компоновки данных.
//
Функция ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание", "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЦелей.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	СтруктураЦелей.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных 
	|ИЗ
	|	Справочник.СтруктураЦелей КАК СтруктураЦелей
	|ГДЕ
	|	СтруктураЦелей.Ссылка = &ЦельСсылка";
	
	Запрос.УстановитьПараметр("ЦельСсылка", ЦельСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяМакета;
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	Иначе
		
		Макет = Метаданные.НайтиПоТипу(ТипЗнч(ЦельСсылка)).Макеты.Найти(ИмяМакета);
		Если НЕ Макет = Неопределено Тогда
			ВозвращаемоеЗначение.Описание = Макет.Синоним;
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.СтруктураЦелей.ПолучитьМакет(ИмяМакета);
			Если Выборка.Следующий() Тогда
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает пользовательские настройки по умолчанию для целевых показателей 
//
// Параметры:
//	ЦельСсылка - СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить настройки.
//
// Возвращаемое значение:
//	ПользовательскиеНастройкиКомпоновкиДанных - пользовательские настройки по умолчанию.
//
Функция ПользовательскиеНастройкиПоУмолчанию(ЦельСсылка) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	// Получим схему компоновки данных
	Если ЗначениеЗаполнено(ЦельСсылка.СхемаКомпоновкиДанных)
		ИЛИ ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		
		СхемаИНастройки = Справочники.СтруктураЦелей.ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(
			ЦельСсылка,
			ЦельСсылка.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Настройки = ЦельСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
		
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ Настройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	// Заполним обязательный параметр ВалютаРасчета для СКД где он есть и не заполнен
	ПараметрВалютаРасчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек.ПользовательскиеНастройки, "ВалютаРасчета");
	Если НЕ ПараметрВалютаРасчета = Неопределено
		И ПараметрВалютаРасчета.Значение = Справочники.Валюты.ПустаяСсылка() Тогда
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки,
				"ВалютаРасчета",
				МониторингЦелевыхПоказателей.ПолучитьВалютуПоУмолчанию(),
				Истина);
	КонецЕсли;
	
	Возврат КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецФункции

// Возвращает служебные поля-ресурсы, недоступные для выбора пользователем
//
// Возвращаемое значение:
//	Массив из Строка - массив служебных полей-ресурсов.
//
Функция СлужебныеПоляЗначенияАнализа() Экспорт
	
	СлужебныеПоля = Новый Массив;
	
	СлужебныеПоля.Добавить("ЦелевоеЗначение");
	СлужебныеПоля.Добавить("ЦелевойДиапазонМаксимум");
	СлужебныеПоля.Добавить("ЦелевойДиапазонМинимум");
	СлужебныеПоля.Добавить("ГраничноеНегативноеОтклонение");
	СлужебныеПоля.Добавить("ГраничноеПозитивноеОтклонение");
	СлужебныеПоля.Добавить("ПриведенноеГраничноеНегативноеОтклонение");
	СлужебныеПоля.Добавить("ПриведенноеГраничноеПозитивноеОтклонение");
	
	Возврат СлужебныеПоля;
	
КонецФункции

// Возвращает служебные поля-измерения, недоступные для выбора пользователем
//
// Возвращаемое значение:
//	Массив из Строка - массив служебных полей-измерений.
//
Функция СлужебныеПоляОбъектаАнализа() Экспорт
	
	СлужебныеПоля = Новый Массив;
	
	СлужебныеПоля.Добавить("ВидОтклоненияОтЦелевогоЗначения");
	СлужебныеПоля.Добавить("ВидЦелевогоЗначения");
	СлужебныеПоля.Добавить("ДатаЦелевыхЗначений");
	СлужебныеПоля.Добавить("Период");
	СлужебныеПоля.Добавить("СистемныеПоля");
	СлужебныеПоля.Добавить("ПараметрыДанных");
	
	// Поля-периоды не являются объектами анализа
	СлужебныеПоля.Добавить("ПериодДень");
	СлужебныеПоля.Добавить("ПериодНеделя");
	СлужебныеПоля.Добавить("ПериодДекада");
	СлужебныеПоля.Добавить("ПериодМесяц");
	СлужебныеПоля.Добавить("ПериодКвартал");
	СлужебныеПоля.Добавить("ПериодПолугодие");
	СлужебныеПоля.Добавить("ПериодГод");
	
	Возврат СлужебныеПоля;
	
КонецФункции

// Возвращает массив имен доступных для выбора макетов
//
// Возвращаемое значение:
//	Массив из Структура - массив имен доступных для выбора макетов:
//		*Имя - Строка - Имя макета.
//		*Синоним - Строка - Синоним макета.
//
Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	Шаблоны = Новый Массив;
	
	ИспользоватьПроизводство21 = Ложь;
	
	Для каждого Макет Из Метаданные.Справочники.СтруктураЦелей.Макеты Цикл
		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных
			Или Макет.Имя = "ШаблоннаяСхемаКомпоновкиДанных" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ИспользоватьПроизводство21
			И (Макет.Имя = "ИсполнениеПлановПроизводстваПредопределенный" 
				Или Макет.Имя = "ПросроченныеПроизводственныеЗаказыПредопределенный") Тогда
			Продолжить;
		КонецЕсли;
		
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
	КонецЦикла;
	
	Возврат Шаблоны;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее


// Отключает отборы, если выключены соответствующие функциональные опции.
// 
// Параметры:
// 	Настройки - НастройкиКомпоновкиДанных - настройки.
Процедура ОтключитьОтборыПоФункциональнымОпциям(Настройки)
	ИспользоватьПартнеровКакКонтрагентов		= ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользоватьНесколькоОрганизаций			= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьНесколькоКасс					= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	ИспользоватьНесколькоРасчетныхСчетов		= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	ИспользоватьХарактеристикиНоменклатуры		= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьКлассификациюКлиентов			= ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВаловойПрибыли")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");
	
	Отборы = Настройки.Отбор.Элементы;
	ИзменяемыеОтборы = Новый Соответствие;
	Для Каждого Отбор Из Отборы Цикл
		Если ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ИзменяемыеОтборы.Вставить(Отбор.ЛевоеЗначение, Отбор);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Контрагент");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоОрганизаций Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Организация");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоКасс Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Касса");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоРасчетныхСчетов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "БанковскийСчет");
	КонецЕсли;
	
	Если Не ИспользоватьХарактеристикиНоменклатуры Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Характеристика");
	КонецЕсли;
	
	Если Не ИспользоватьКлассификациюКлиентов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Класс");
	КонецЕсли;
КонецПроцедуры

Процедура ОтключитьОтбор(Настройки, ИзменяемыеОтборы, ИмяПоля)
	ПроверяемоеПоле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	УдаляемыйОтбор = ИзменяемыеОтборы.Получить(ПроверяемоеПоле);
	Если Не УдаляемыйОтбор = Неопределено Тогда
		Настройки.Отбор.Элементы.Удалить(УдаляемыйОтбор);
	КонецЕсли;
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.СтруктураЦелей.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.3.16";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c2893424-7ad2-4517-9c19-a5dc052f74e8");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СтруктураЦелей.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "МониторингЦелевыхПоказателей.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Замена строковых литералов в отборах настроек предопределенных макетов компоновки данных в справочнике ""Структура целей""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.СтруктураЦелей.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.СтруктураЦелей.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Отчеты.МониторЦелевыхПоказателей.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.СтруктураЦелей.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЦелей.Ссылка,
	|	СтруктураЦелей.СхемаКомпоновкиДанных
	|ИЗ
	|	Справочник.СтруктураЦелей КАК СтруктураЦелей";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.СхемаКомпоновкиДанных) Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.СтруктураЦелей -
			СправочникОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения("");
			СправочникОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения("");
			
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ВспомогательныеПроцедурыИФункцииДляОбновленияИнформационнойБазы_2_5_3

// Возвращает массив имен предопределенных схем компоновки, для целей и вариантов анализа
// которых необходимо выполнить замены в отборах из-за приведения строковых литералов
// в макетах к стандартам.
// 
// Возвращаемое значение:
//  Массив из Строка - Массив строк имен предопределенных макетов.
//
Функция ИменаПредопределенныхМакетовДляПроверкиОтборов() Экспорт
	ИменаПредопределенныхСхем = Новый Массив;
	ИменаПредопределенныхСхем.Добавить("ОборотныеАктивыПредопределенный");
	ИменаПредопределенныхСхем.Добавить("ОстаткиДенежныхСредствПредопределенный");
	ИменаПредопределенныхСхем.Добавить("ПросроченныеЗаказыКлиентовПредопределенный");
	ИменаПредопределенныхСхем.Добавить("ПросроченныеЗаказыПоставщикамПредопределенный");
	ИменаПредопределенныхСхем.Добавить("ПросроченныеПроизводственныеЗаказыПредопределенный");
	
	Возврат ИменаПредопределенныхСхем;
КонецФункции

// Возвращает структуру замен для отборов целей и вариантов анализа при обновлении данных.
// 
// Возвращаемое значение:
//  Структура - соответствие имени макета и имен обновляемых полей СКД.
//   *Ключ - Строка - Имя макета схемы компоновки данных.
//   *Значение - Соответствие - соответствие обновляемых полей и заменяемых значений:
//     **Ключ - Строка - Имя поля схемы компоновки. Например, "ВидДенежныхСредств"
//     **Значение - Соответствие - соответствие старых и новых значений поля (строковых литералов):
//        ***Ключ - Строка - Старое значение поля. Например, "У подотчетных лиц".
//        ***Значение - Строка - Новое значение поля. Например, "УПодотчетныхЛиц".
//
Функция СтруктураЗаменВОтборахПредопределенныхМакетовМЦП() Экспорт
	
	ЗаменыПоМакетам = Новый Соответствие;
	
	// ОборотныеАктивыПредопределенный
	ЗаменыПоПолю = Новый Соответствие;
	ЗаменыПоПолю.Вставить("Товары на складе",							"ТоварыНаСкладе");
	ЗаменыПоПолю.Вставить("Товары, переданные на комиссию",				"ТоварыПереданныеНаКомиссию");
	ЗаменыПоПолю.Вставить("Денежные средства (наличные)",				"ДенежныеСредстваНаличные");
	ЗаменыПоПолю.Вставить("Денежные средства (безналичные)",			"ДенежныеСредстваБезналичные");
	ЗаменыПоПолю.Вставить("Денежные средства (у подотчетных лиц)",		"ДенежныеСредстваУПодотчетныхЛиц");
	ЗаменыПоПолю.Вставить("Расходы будущих периодов",					"РасходыБудущихПериодов");
	ЗаменыПоПолю.Вставить("Расчеты между организациями",				"РасчетыМеждуОрганизациями");
	ЗаменыПоПолю.Вставить("Выданные авансы",							"ВыданныеАвансы");
	ЗаменыПоПолю.Вставить("Дебиторская задолженность",					"ДебиторскаяЗадолженность");
	ЗаменыПоПолю.Вставить("Дебиторская задолженность (просроченная)",	"ДебиторскаяЗадолженностьПросроченная");
	
	ЗаменыПоПолям = Новый Соответствие;
	ЗаменыПоПолям.Вставить("Показатель", ЗаменыПоПолю);
	
	ЗаменыПоМакетам.Вставить("ОборотныеАктивыПредопределенный", ЗаменыПоПолям);
	
	
	// ОстаткиДенежныхСредствПредопределенный
	ЗаменыПоПолю = Новый Соответствие;
	ЗаменыПоПолю.Вставить("Безналичные",							"Безналичные");
	ЗаменыПоПолю.Вставить("Наличные",								"Наличные");
	ЗаменыПоПолю.Вставить("В кассах ККМ",							"ВКассахККМ");
	ЗаменыПоПолю.Вставить("У подотчетных лиц",						"УПодотчетныхЛиц");
	
	ЗаменыПоПолям = Новый Соответствие;
	ЗаменыПоПолям.Вставить("ВидДенежныхСредств", ЗаменыПоПолю);
	
	ЗаменыПоМакетам.Вставить("ОстаткиДенежныхСредствПредопределенный", ЗаменыПоПолям);
	
	
	// ПросроченныеЗаказыКлиентовПредопределенный
	ЗаменыПоПолю = Новый Соответствие;
	ЗаменыПоПолю.Вставить("Просрочена оплата и отгрузка",			"ПросроченаОплатаИОтгрузка");
	ЗаменыПоПолю.Вставить("Просрочена оплата",						"ПросроченаОплата");
	ЗаменыПоПолю.Вставить("Просрочена отгрузка",					"ПросроченаОтгрузка");
	
	ЗаменыПоПолям = Новый Соответствие;
	ЗаменыПоПолям.Вставить("Состояние", ЗаменыПоПолю);
	
	ЗаменыПоМакетам.Вставить("ПросроченныеЗаказыКлиентовПредопределенный", ЗаменыПоПолям);
	
	
	// ПросроченныеЗаказыПоставщикамПредопределенный
	ЗаменыПоПолю = Новый Соответствие;
	ЗаменыПоПолю.Вставить("Просрочена оплата и поступление",		"ПросроченаОплатаИПоступление");
	ЗаменыПоПолю.Вставить("Просрочена оплата",						"ПросроченаОплата");
	ЗаменыПоПолю.Вставить("Просрочено поступление",					"ПросроченоПоступление");
	
	ЗаменыПоПолям = Новый Соответствие;
	ЗаменыПоПолям.Вставить("Состояние", ЗаменыПоПолю);
	
	ЗаменыПоМакетам.Вставить("ПросроченныеЗаказыПоставщикамПредопределенный", ЗаменыПоПолям);
	
	
	// ПросроченныеПроизводственныеЗаказыПредопределенный
	ЗаменыПоПолю = Новый Соответствие;
	ЗаменыПоПолю.Вставить("Производство не начато",		"ПроизводствоНеНачато");
	ЗаменыПоПолю.Вставить("Выпуск не оформлен",			"ВыпускНеОформлен");
	ЗаменыПоПолю.Вставить("Производство не начато. Выпуск не оформлен", "ПроизводствоНеНачатоВыпускНеОформлен");
	
	ЗаменыПоПолям = Новый Соответствие;
	ЗаменыПоПолям.Вставить("Состояние", ЗаменыПоПолю);
	
	ЗаменыПоМакетам.Вставить("ПросроченныеПроизводственныеЗаказыПредопределенный", ЗаменыПоПолям);
	
	
	Возврат ЗаменыПоМакетам;
	
КонецФункции

#КонецОбласти

#Область Обработчики_2_5_3

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИменаПредопределенныхСхем = ИменаПредопределенныхМакетовДляПроверкиОтборов();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИменаПредопределенныхСхем", ИменаПредопределенныхСхем);
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураЦелей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЦелей КАК СтруктураЦелей
	|ГДЕ
	|	СтруктураЦелей.СхемаКомпоновкиДанных В (&ИменаПредопределенныхСхем)
	|	И НЕ СтруктураЦелей.УдалитьНеТребуютсяЗаменыСтроковыхЛитераловВОтборах";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.СтруктураЦелей";
	
	ЗаменыПоМакетам = СтруктураЗаменВОтборахПредопределенныхМакетовМЦП();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				
			Иначе
				
				ЗаменыПолей = ЗаменыПоМакетам.Получить(СправочникОбъект.СхемаКомпоновкиДанных);
				Если НЕ ЗаменыПолей = Неопределено Тогда
					// Значение не было изменено
					
					Настройки = СправочникОбъект.ХранилищеНастроекКомпоновкиДанных.Получить();
					
					Если НЕ Настройки = Неопределено Тогда
						ЭлементыОтбора = КомпоновкаДанныхКлиентСервер.ПолучитьЭлементыОтбора(Настройки.Отбор);

						Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
							Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
								Продолжить;
							КонецЕсли;

							ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);

							ЗаменыПоПолю = ЗаменыПолей.Получить(ИмяПоля);

							Если ЗаменыПоПолю = Неопределено Тогда
								Продолжить;
							КонецЕсли;

							Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Строка") Тогда
								ЗначениеЗамены = ЗаменыПоПолю.Получить(ЭлементОтбора.ПравоеЗначение);
								Если НЕ ЗначениеЗамены = Неопределено Тогда
									ЭлементОтбора.ПравоеЗначение = ЗначениеЗамены;
								КонецЕсли;
							ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
								Для Каждого ЭлементСписка Из ЭлементОтбора.ПравоеЗначение Цикл
									ЗначениеЗамены = ЗаменыПоПолю.Получить(ЭлементСписка.Значение);
									Если НЕ ЗначениеЗамены = Неопределено Тогда
										ЭлементСписка.Значение = ЗначениеЗамены;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;

						КонецЦикла;

						СправочникОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);

					КонецЕсли;
					
				КонецЕсли;
				
				СправочникОбъект.УдалитьНеТребуютсяЗаменыСтроковыхЛитераловВОтборах = Истина;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
