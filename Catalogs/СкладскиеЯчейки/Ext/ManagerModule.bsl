#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	
	Результат.Добавить("Владелец");
 	Результат.Добавить("Помещение");

	Возврат Результат;

КонецФункции

// Возвращает складскую ячейку с типом "Отгрузки", если она одна в справочнике
//
// Параметры:
//  Склад		 - СправочникСсылка.Склады			 - склад, по которому нужно найти зону отгрузки
//  Помещение	 - СправочникСсылка.СкладскиеПомещения	 - помещение, по которому нужно найти зону отгрузки
//  	если по складу не ведется учет по складским помещениям, нужно передать пустую ссылку
//  ЗонаОтгрузки - СправочникСсылка.СкладскиеЯчейки		 - если этот параметр заполнен и ячейка принадлежит переданным
//  		складу и помещению, то возвращается значение этого параметра.
// 
// Возвращаемое значение:
//  СправочникСсылка.СкладскиеЯчейки - ссылка на зону отгрузки склада по умолчанию.
//
Функция ЗонаОтгрузкиПоУмолчанию(Склад,Помещение,ЗонаОтгрузки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЗонаОтгрузки) Тогда
		РеквизитыЯчейки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗонаОтгрузки, "Владелец,Помещение,ТипСкладскойЯчейки");
		
		Если РеквизитыЯчейки.Владелец = Склад
			И РеквизитыЯчейки.Помещение = Помещение
			И РеквизитыЯчейки.ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Отгрузка Тогда
			Возврат ЗонаОтгрузки;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	СпрЯчейки.Ссылка КАК Ячейка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СпрЯчейки
	|ГДЕ
	|	(НЕ СпрЯчейки.ПометкаУдаления)
	|	И СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Отгрузка)
	|	И СпрЯчейки.Владелец = &Склад
	|	И СпрЯчейки.Помещение = &Помещение");
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
	   И Выборка.Следующий()
	Тогда
		Ячейка = Выборка.Ячейка;
	Иначе
		Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ячейка;

КонецФункции

// Возвращает складскую ячейку с типом "Приемка", если она одна в справочнике
//
// Параметры:
//  Склад		 - СправочникСсылка.Склады			 - склад, по которому нужно найти зону приемки
//  Помещение	 - СправочникСсылка.СкладскиеПомещения	 - помещение, по которому нужно найти зону приемки
//  	если по складу не ведется учет по складским помещениям, нужно передать пустую ссылку
//  ЗонаПриемки	 - СправочникСсылка.СкладскиеЯчейки		 - если этот параметр заполнен и ячейка принадлежит переданным
//  		складу и помещению, то возвращается значение этого параметра.
// 
// Возвращаемое значение:
//  СправочникСсылка.СкладскиеЯчейки - ссылка на зону приемки склада по умолчанию.
//
Функция ЗонаПриемкиПоУмолчанию(Склад,Помещение,ЗонаПриемки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЗонаПриемки) Тогда
		РеквизитыЯчейки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗонаПриемки, "Владелец,Помещение,ТипСкладскойЯчейки");
		
		Если РеквизитыЯчейки.Владелец = Склад
			И РеквизитыЯчейки.Помещение = Помещение
			И РеквизитыЯчейки.ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Приемка Тогда
			Возврат ЗонаПриемки;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	СпрЯчейки.Ссылка КАК Ячейка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СпрЯчейки
	|ГДЕ
	|	(НЕ СпрЯчейки.ПометкаУдаления)
	|	И СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Приемка)
	|	И СпрЯчейки.Владелец = &Склад
	|	И СпрЯчейки.Помещение = &Помещение");
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
	   И Выборка.Следующий() Тогда
		Ячейка = Выборка.Ячейка;
	Иначе
		Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ячейка;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников) 
		Или ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников2_5) Тогда
		
		// Печать этикеток
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокСкладскиеЯчейки";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "ЭтикеткиСкладскиеЯчейки";
		КомандаПечати.Представление = НСтр("ru = 'Печать этикеток'");
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КР_ДобавленныеПроцедурыИФункции

// << 02.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
Функция КР_СкладскаяЯчейкаПоТипу(Склад, Помещение = Неопределено, ТипСкладскойЯчейки) Экспорт 

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК Т
	|ГДЕ
	|	НЕ Т.ПометкаУдаления
	|	И Т.ТипСкладскойЯчейки = &ТипСкладскойЯчейки
	|	И (&БезУчетаПомещения
	|			ИЛИ Т.Помещение = &Помещение)
	|	И Т.Владелец = &Склад");   
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("БезУчетаПомещения", Не ЗначениеЗаполнено(Помещение));
	Запрос.УстановитьПараметр("ТипСкладскойЯчейки", ТипСкладскойЯчейки);
	РезультатЗапроса = Запрос.Выполнить();          
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;	
	Иначе
	    Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;

КонецФункции // >> 02.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 02.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
Функция КР_СкладскаяЯчейкаПриемкиПоУмолчанию(Склад, Помещение = Неопределено) Экспорт 
	
	Возврат КР_СкладскаяЯчейкаПоТипу(Склад, Помещение, Перечисления.ТипыСкладскихЯчеек.Приемка);
	
КонецФункции // >> 02.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 02.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
Функция КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(Склад, Помещение = Неопределено) Экспорт 
	
	Возврат КР_СкладскаяЯчейкаПоТипу(Склад, Помещение, Перечисления.ТипыСкладскихЯчеек.Отгрузка);
	
КонецФункции // >> 02.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 02.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
Функция КР_СкладскаяЯчейкаХраненияПоУмолчанию(Склад, Помещение = Неопределено) Экспорт 
	
	Возврат КР_СкладскаяЯчейкаПоТипу(Склад, Помещение, Перечисления.ТипыСкладскихЯчеек.Хранение);
	
КонецФункции // >> 02.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
Функция КР_СкладскаяЯчейкаПоХозяйственнойОперация(Склад, ХозяйственнаяОперация) Экспорт 
	
	Если Не ЗначениеЗаполнено(Склад) Тогда 
	    Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад,
		"КР_АдресныйСкладБезордернойОтгрузки,КР_АдресныйСкладБезордернойОтгрузки,"
		+ "КР_ЯчейкаХраненияФорменнойОдежды,КР_ЯчейкаХраненияБракованногоТовара");
		
	Если СвойстваСклада.КР_АдресныйСкладБезордернойОтгрузки Тогда 
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда 
			Возврат СвойстваСклада.КР_ЯчейкаХраненияФорменнойОдежды;   
		КонецЕсли;	
	
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию Тогда 		
			Возврат СвойстваСклада.КР_ЯчейкаХраненияБракованногоТовара;  
		КонецЕсли;
		
	КонецЕсли;	

    Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();

КонецФункции // >> 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188

// << 01.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1262
Функция КР_СоздатьСкладскуюЯчейкуПоТипу(
	Склад, Помещение, ТипСкладскойЯчейки, ФиксированноеНаименование = Неопределено, Обновлять = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Склад)
		Или Не ЗначениеЗаполнено(Помещение)
		Или Не ЗначениеЗаполнено(ТипСкладскойЯчейки) Тогда 
    	Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	// Сформируем данные для GUID 
	ДанныеДляGUID = XMLСтрока(Склад) + XMLСтрока(Помещение) + XMLСтрока(ТипСкладскойЯчейки); 
	Если ЗначениеЗаполнено(ФиксированноеНаименование) Тогда 
		ДанныеДляGUID = ДанныеДляGUID + ФиксированноеНаименование;
		ПредставлениеСкладскойЯчейки = ФиксированноеНаименование;
	Иначе
		ПредставлениеСкладскойЯчейки = Строка(ТипСкладскойЯчейки);
	КонецЕсли;
	
	GUID = КР_ОбщегоНазначениеСервер.GUIDИзСтроки(ДанныеДляGUID);
	
	Ссылка = XMLЗначение(Тип("СправочникСсылка.СкладскиеЯчейки"), GUID);
	Если Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда 
		
		ЯчейкаОбъект = Справочники.СкладскиеЯчейки.СоздатьЭлемент();
		ЯчейкаОбъект.УстановитьСсылкуНового(Ссылка);
		ЯчейкаОбъект.Владелец = Склад;
		ЯчейкаОбъект.Помещение = Помещение;
		
	Иначе  
		
		Если Не Обновлять Тогда 
			Возврат Ссылка;   
		КонецЕсли;
		
		ЯчейкаОбъект = Ссылка.ПолучитьОбъект();
		
	КонецЕсли;	    
	
	ТипыСкладскихЯчеек = Перечисления.ТипыСкладскихЯчеек;
	ПериодическаяИнвентаризацияЯчеек = Перечисления.ВариантыИспользованияПериодическойИнвентаризацииЯчеек;	
	
	//
	ЯчейкаОбъект.Наименование = ПредставлениеСкладскойЯчейки;
	ЯчейкаОбъект.Код = ПредставлениеСкладскойЯчейки;
	ЯчейкаОбъект.ТипСкладскойЯчейки = ТипСкладскойЯчейки;  
	Если ТипСкладскойЯчейки = ТипыСкладскихЯчеек.Хранение Тогда  
		
		ЯчейкаОбъект.ИспользованиеПериодичностиИнвентаризацииЯчейки = ПериодическаяИнвентаризацияЯчеек.ИспользоватьНастройкиОбластиХранения; 
		ЯчейкаОбъект.УровеньДоступности = 1;
		ЯчейкаОбъект.МаксимальныйКоэффициентНаполненностиПоВесу = 100;
		ЯчейкаОбъект.МаксимальныйКоэффициентНаполненностиПоОбъему = 100;
		ЯчейкаОбъект.Типоразмер = КР_ДополнительныеНастройкиПовтИсп.Значение("ТипоразмерБезразмернаяЯчейка");
				
	Иначе	
		ЯчейкаОбъект.ИспользованиеПериодичностиИнвентаризацииЯчейки = ПериодическаяИнвентаризацияЯчеек.НеИспользовать;
	КонецЕсли;
	
	ЯчейкаОбъект.ОбменДанными.Загрузка = Истина;
	ЯчейкаОбъект.Записать();

	Возврат Ссылка;
	
КонецФункции // >> 01.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1262

// << 21.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1499
&НаСервере
Функция КР_ПолучитьЯчейкуТорговогоЗала(Склад, ВыводитьСообщенияОбОшибке = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкладскиеЯчейки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Владелец.Ссылка = &Склад
	|	И СкладскиеЯчейки.Помещение.КР_ТипСкладскогоПомещения = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	|	И НЕ СкладскиеЯчейки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Если ВыводитьСообщенияОбОшибке Тогда
			ШаблонСообщения = НСтр("ru='Для склада %1 не найдена складская ячейка торгового зала.'");
			ТекстСообщения	= СтрШаблон(ШаблонСообщения, Склад);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыводитьСообщенияОбОшибке Тогда
			ШаблонСообщения = НСтр("ru='Для склада %1 найдено больше одной складской ячейки торгового зала.'");
			ТекстСообщения	= СтрШаблон(ШаблонСообщения, Склад);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции // >> 21.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1499

#КонецОбласти

#КонецЕсли
