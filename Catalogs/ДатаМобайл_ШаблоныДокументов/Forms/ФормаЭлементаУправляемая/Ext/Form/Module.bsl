#Область ОписанияПеременных

&НаКлиенте
Перем ДоступностьАХПодбор;

&НаКлиенте
Перем ДоступностьАХПриемка;

#КонецОбласти
 
#Область ФормаОбработки

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Zolla ++
	ДМ_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка); 
	// Zolla --
	
	Попытка 			
		Если Объект.Ссылка.Пустая() Тогда
			Объект.РазрешеноСозданиеНаТСД 					= Истина;
			Объект.РежимСозданияДокументов 					= 1;	
			Объект.ОбновлятьТоварыСДокументом 				= Истина;
			Объект.РазрешитьВыгрузкуНеполногоДокумента 		= 1;
			Объект.ПриСканированииНовогоТовара 				= 1;
			Объект.ШтрихкодыТолькоПоШаблонам 				= Истина;
			Объект.ПервичныйПоискПоШКвЗадании 				= Истина;
			Объект.ВсеШтрихкодыТовара                       = Истина;
			Объект.ЗагружатьКомментарий                 	= 0;
			Объект.АвтоматическийКомментарийИспользовать 	= Истина;
			Объект.АвтоматическийКомментарий 				= "Выполнено в DataMobile";
			
			Объект.ИспользоватьПодбор 						= Истина;
			Объект.ТабличнуюЧастьПриЗагрузкеПодбор 			= 3;
			Объект.ПриСканированииТовараПодбор         		= 2;
			Объект.ПриПревышенииЗаданияПодбор          		= 1;
			Объект.РучнойВводКоличестваПодбор          		= Истина;
			Объект.ПодтверждатьЭнтеромПодбор           		= Истина;
			Объект.МаркировкаРежимОСУ           			= 1;
		КонецЕсли;   	
		
		СобратьВидыДокументов(Элементы.ВидДокумента.СписокВыбора);
		СобратьТабЧастиДокументов(Объект.ВидДокумента, Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора, "Подбор");
		СобратьТабЧастиДокументов(Объект.ВидДокумента, Элементы.ИмяТабличнойЧастиПриемка.СписокВыбора, "Размещение");
		
		СобратьВидыДокументов(Элементы.ВидДокументаНового.СписокВыбора);
		СобратьТабЧастиДокументов(Объект.ВидДокументаНового, Элементы.ИмяТабличнойЧастиНовойПодбор.СписокВыбора, "Подбор");
		СобратьТабЧастиДокументов(Объект.ВидДокументаНового, Элементы.ИмяТабличнойЧастиНовойПриемка.СписокВыбора, "Размещение");
		
		СобратьРеквизитыДокумента(Объект.ВидДокумента, Элементы.НовыеЗначенияРеквизитовИмяРеквизита.СписокВыбора);			
		Если Объект.ВидДокумента = "ПеремещениеТоваров" Тогда
			Элементы.НовыеЗначенияРеквизитовИмяРеквизита.СписокВыбора.Добавить("Помещение");
		КонецЕсли;	
		Элементы.НовыеЗначенияРеквизитовИмяРеквизита.СписокВыбора.СортироватьПоЗначению(НаправлениеСортировки.Возр);	
		
		СобратьРеквизитыДокумента(Объект.ВидДокументаНового,Элементы.НовыеЗначенияРеквизитовНовогоИмяРеквизита.СписокВыбора);
		СобратьРеквизитыДокументаДляУсловий(Объект.ВидДокумента, Элементы.ПараметрыУсловийИмяПараметра.СписокВыбора); 
		
		// проверка для уже введенных шаблонов
		Если Объект.ТипВводаУсловийАвтовыгрузки = 0 Тогда
			Если Не СокрЛП(Объект.УсловиеВыгрузки) = "" Тогда
				Объект.ТипВводаУсловийАвтовыгрузки = 2;
			Иначе
				Объект.ТипВводаУсловийАвтовыгрузки = 1;	
			КонецЕсли;
		КонецЕсли;
		Элементы.АвтовыгрузкаУсловия.ТекущаяСтраница = ?(Объект.ТипВводаУсловийАвтовыгрузки = 1, Элементы.УпрощенныйВвод, Элементы.РасширенныйВвод);
		
		ЗагрузитьСтатусыКМ();
		ЗагрузитьИзбранныеФункции();
	Исключение 
	КонецПопытки; 
	
КонецПроцедуры
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого СтрокаРеквизитов Из ТекущийОбъект.НовыеЗначенияРеквизитов Цикл
		Если Не ЗначениеЗаполнено(СтрокаРеквизитов.ИмяРеквизита) Или Не ЗначениеЗаполнено(СтрокаРеквизитов.ЗначениеРеквизита) Тогда
			Сообщить("Не верно заполнены реквизиты автозагрузки!");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаРеквизитов Из ТекущийОбъект.НовыеЗначенияРеквизитовНового Цикл
		Если Не ЗначениеЗаполнено(СтрокаРеквизитов.ИмяРеквизита) Или Не ЗначениеЗаполнено(СтрокаРеквизитов.ЗначениеРеквизита) Тогда
			Сообщить("Не верно заполнены реквизиты автозагрузки!");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьДокументНаВозможностьАдресногоХранения();
	ПроверкаАдресногоХранения();
	
	Элементы.ТабличнуюЧастьПриЗагрузкеПодбор.Заголовок = ?(Объект.ВидДокументаНового = "", "Режим записи табличной части исходного документа", "Режим записи табличной части нового документа");
	Элементы.ТабличнуюЧастьПриЗагрузкеПриемка.Заголовок = ?(Объект.ВидДокументаНового = "", "Режим записи табличной части исходного документа", "Режим записи табличной части нового документа");
	
	ИспользоватьПодборПриИзменении(Элементы.ИспользоватьПодбор);
	ИспользоватьПриемкуПриИзменении(Элементы.ИспользоватьПриемку);
	
	Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда 
		СформироватьшаблонЕГАИС(Истина);	
		СопоставлениеЕГАИСПриИзменении(Элементы.СопоставлениеЕГАИС);
	КонецЕсли;
	
	ПроверитьДоступностьНастроекМаркировки();
	
	УстановитьВидимостьГрупповогоДокумента();
	ИспользоватьГрупповойДокументПриИзменении(Элементы.ИспользоватьГрупповойДокумент);
	РаспределениеТоваровПриИзменении(Элементы.РаспределениеТоваров);
	ДоступностьДопПараметровДопФорм();
	
	РазрешитьВыгрузкуНеполногоДокументаПриИзменении(Элементы.РазрешитьВыгрузкуНеполногоДокумента);
	УстановитьДоступностьВариантаВыгрузкиНеполногоДокумента();	
	
	ВидимостьБыстройПриемкиОтгрузки();
	БыстроеПеремещениеПриИзменении(Элементы.БыстроеПеремещение);
	ВидимостьРеквизитаИзменятьТипОбеспечения();
	ДоступностьРеквизитовОбновлятьПриКаждомОткрытииУдалитьОстатокЗаданияПослеВводаСтроки();
	
	// для связи нового реквизита со старым, потом удалить при удалении реквизита
	Объект.АвтоматическийКомментарийИспользовать = Не Объект.НеДобавлятьКомментарийDataMobile; 
	
	АвтоматическийКомментарийИспользоватьПриИзменении(Элементы.АвтоматическийКомментарийИспользовать);
	РазрешеноСозданиеНаТСДПриИзменении(Элементы.РазрешеноСозданиеНаТСД);
	РежимСозданияДокументовПриИзменении(Элементы.РежимСозданияДокументов);
	
	ДополнительныеФормы.Параметры.УстановитьЗначениеПараметра("Шаблон", Объект.Ссылка);
	ДополнительныеФормыСтрок.Параметры.УстановитьЗначениеПараметра("Шаблон", Объект.Ссылка);
	
	ВыгружатьРоботомПриИзменении(Элементы.ВыгружатьРоботом);
	РазвернутьГруппыГдеВыбраныПараметры();
	
	ПроверкаВводаУпаковочногоЛистаПриемкаПриИзменении(Неопределено);
	ПроверкаВводаУпаковочногоЛистаПодборПриИзменении(Неопределено);
	
	ВидимостьКолонокДопФорм();
	
	ДМ_ПроверкаДоступностиНастроек(); // Zolla
		
КонецПроцедуры
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ТипВводаУсловийАвтовыгрузки = 1 Тогда
		СформироватьТекстУсловияВыгрузкиСервер();
	КонецЕсли;
	
	Если Объект.ВыгружатьРоботом Тогда 	
		Если (ЗначениеЗаполнено(Объект.УсловиеВыгрузки) И Объект.ВыгружатьВсеДокументыШаблона)
			Или (Не ЗначениеЗаполнено(Объект.УсловиеВыгрузки) И Не Объект.ВыгружатьВсеДокументыШаблона) Тогда
			Отказ = Истина;
			ЭтаФорма.Модифицированность = Истина;
			Сообщить("Укажите условие выгрузки или поставьте галочку ""Выгружать все документы шаблона"" во вкладке ""Автовыгрузка""!");
		КонецЕсли;
	КонецЕсли;       
	
	Если ЗначениеЗаполнено(Объект.ВидДокументаНового) 
		И Объект.ИспользоватьПодбор
		И Не ЗначениеЗаполнено(Объект.ИмяТабличнойЧастиНовойПодбор) Тогда
		
		Отказ = Истина;
		Сообщить("Укажите табличную часть нового (подчиненного документа) на вкладке ""Подбор""!");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ВидДокументаНового) 
		И Объект.ИспользоватьПриемку
		И Не ЗначениеЗаполнено(Объект.ИмяТабличнойЧастиНовойПриемка) Тогда
		
		Отказ = Истина;
		Сообщить("Укажите табличную часть нового (подчиненного документа) на вкладке ""Размещение""!");
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДополнительныеФормы.Параметры.УстановитьЗначениеПараметра("Шаблон", Объект.Ссылка);
	ДополнительныеФормыСтрок.Параметры.УстановитьЗначениеПараметра("Шаблон", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область Общее

&НаСервереБезКонтекста
Функция ДокументПодходит(МетаДок)
	Для каждого МетаТЧ Из МетаДок.ТабличныеЧасти Цикл
		Для каждого МетаРеквизитТЧ Из МетаТЧ.Реквизиты Цикл
			Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда
				Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС")) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
				Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.астНоменклатураЕГАИС")) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;	
			
			Если ДатаМобайл_ОбщийМодуль.ЕстьКТ2000() Тогда
				Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.алкКлассификаторАлкогольнойПродукцииЕГАИС")) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	Возврат Ложь;
КонецФункции
&НаСервереБезКонтекста
Функция СобратьВидыДокументов(Список)
	
	МетаданныеДокументы = Метаданные.Документы;
	
	Для каждого МетаДок Из МетаданныеДокументы Цикл
		Если ДокументПодходит(МетаДок) Тогда
			Список.Добавить(МетаДок.Имя, МетаДок.Синоним);
		КонецЕсли;	
	КонецЦикла;
	
КонецФункции	
&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	НовСписокПодбор = Новый СписокЗначений();
	СобратьТабЧастиДокументов(Объект.ВидДокумента, НовСписокПодбор, "Подбор");
	НовСписокРазмещение = Новый СписокЗначений();
	СобратьТабЧастиДокументов(Объект.ВидДокумента, НовСписокРазмещение, "Размещение");
	
	Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.ЗагрузитьЗначения(НовСписокПодбор.ВыгрузитьЗначения());
	Элементы.ИмяТабличнойЧастиПриемка.СписокВыбора.ЗагрузитьЗначения(НовСписокРазмещение.ВыгрузитьЗначения());
	
	Если НовСписокПодбор.ВыгрузитьЗначения().Количество() > 0 Тогда
		Попытка Объект.ИмяТабличнойЧастиПодбор = ?(Объект.ИспользоватьПодбор, НовСписокПодбор.ВыгрузитьЗначения()[0], ""); Исключение КонецПопытки;
	КонецЕсли;
	
	Если НовСписокРазмещение.ВыгрузитьЗначения().Количество() > 1 Тогда
		Попытка Объект.ИмяТабличнойЧастиПриемка = ?(Объект.ИспользоватьПриемку, НовСписокРазмещение.ВыгрузитьЗначения()[1], ""); Исключение КонецПопытки;	
	КонецЕсли;
	
	НовСписок = Новый СписокЗначений();
	СобратьРеквизитыДокумента(Объект.ВидДокумента, НовСписок);
	Элементы.НовыеЗначенияРеквизитовИмяРеквизита.СписокВыбора.ЗагрузитьЗначения(НовСписок.ВыгрузитьЗначения());
	
	Если Объект.ВидДокумента = "ПеремещениеТоваров" Тогда
		Элементы.НовыеЗначенияРеквизитовИмяРеквизита.СписокВыбора.Добавить("Помещение");
	КонецЕсли;	
	
	Элементы.НовыеЗначенияРеквизитовИмяРеквизита.СписокВыбора.СортироватьПоЗначению(НаправлениеСортировки.Возр);	
	
	ВидимостьБыстройПриемкиОтгрузки();
	ВидимостьРеквизитаИзменятьТипОбеспечения();	
	
	ПроверитьДокументНаВозможностьАдресногоХранения();
	
	Если Не ДоступностьАХПодбор И Не ДоступностьАХПриемка Тогда
		//ПоказатьПредупреждение(, "Документ " + Элементы.ВидДокумента.ТекстРедактирования + " не поддерживает адресное хранение. ",, "Отсутствуют реквизиты А.Х.");
	КонецЕсли;
	
	ПроверкаАдресногоХранения();	
	ВидимостьКолонокДопФорм(); 
	
	ДМ_ПроверкаДоступностиНастроек(); // Zolla
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция СобратьТабЧастиДокументов(ВидДокумента, Список, ВидТЧ)
	
	Список.Очистить();
	
	МетаДок = Метаданные.Документы.Найти(ВидДокумента);
	Если МетаДок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого МетаТЧ Из МетаДок.ТабличныеЧасти Цикл		
		Если (ВидТЧ = "Подбор" И МетаТЧ.Имя = "ТоварыРазмещение") 
			Или (ВидТЧ="Размещение" И МетаТЧ.Имя="ТоварыОтбор") 
			Или (ВидДокумента = "ЗаданиеНаПеревозку" И МетаТЧ.Имя = "ДополнительныеРеквизиты") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидДокумента = "ЗаданиеНаПеревозку" И МетаТЧ.Имя = "Распоряжения" Тогда		
			Список.Добавить("Распоряжения");
			Прервать;
		КонецЕсли;	
		
		Для каждого МетаРеквизитТЧ Из МетаТЧ.Реквизиты Цикл
			Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Список.Добавить(МетаТЧ.Имя);
				Прервать;
			КонецЕсли;
			
			Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда
				Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС")) Тогда
					Список.Добавить(МетаТЧ.Имя);
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
				Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.астНоменклатураЕГАИС")) Тогда
					Список.Добавить(МетаТЧ.Имя);
					Прервать;
				КонецЕсли;
			КонецЕсли;	
			
			Если ДатаМобайл_ОбщийМодуль.ЕстьКТ2000() Тогда
				Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.алкКлассификаторАлкогольнойПродукцииЕГАИС")) Тогда
					Список.Добавить(МетаТЧ.Имя);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
КонецФункции	
&НаСервереБезКонтекста
Функция СобратьРеквизитыДокумента(ВидДокумента, Список)
	Список.Очистить();
	
	ТекущийВидДокумента = ВидДокумента;
	Если ТекущийВидДокумента = "ЗаданиеНаПеревозку" Тогда		
		ТекущийВидДокумента = "ЗаказКлиента";
	КонецЕсли;	
	
	МетаДок = Метаданные.Документы.Найти(ТекущийВидДокумента);
	Если МетаДок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	Для каждого МетаРеквизит Из МетаДок.Реквизиты Цикл
		Список.Добавить(МетаРеквизит.Имя);
	КонецЦикла;
КонецФункции	
&НаКлиенте
Процедура ВидДокументаНовогоПриИзменении(Элемент)
	
	НовСписокПодбор = Новый СписокЗначений();
	СобратьТабЧастиДокументов(Объект.ВидДокументаНового, НовСписокПодбор, "Подбор");
	НовСписокРазмещение = Новый СписокЗначений();
	СобратьТабЧастиДокументов(Объект.ВидДокументаНового, НовСписокРазмещение, "Размещение");
	
	Элементы.ИмяТабличнойЧастиНовойПодбор.СписокВыбора.ЗагрузитьЗначения(НовСписокПодбор.ВыгрузитьЗначения());
	Элементы.ИмяТабличнойЧастиНовойПриемка.СписокВыбора.ЗагрузитьЗначения(НовСписокРазмещение.ВыгрузитьЗначения());
	
	Если НовСписокПодбор.ВыгрузитьЗначения().Количество() > 0 Тогда
		Попытка Объект.ИмяТабличнойЧастиНовойПодбор = ?(Объект.ИспользоватьПодбор, НовСписокПодбор.ВыгрузитьЗначения()[0], ""); Исключение КонецПопытки;
	КонецЕсли;
	
	Если НовСписокРазмещение.ВыгрузитьЗначения().Количество() > 1 Тогда
		Попытка Объект.ИмяТабличнойЧастиНовойПриемка = ?(Объект.ИспользоватьПриемку, НовСписокРазмещение.ВыгрузитьЗначения()[1], ""); Исключение КонецПопытки;	
	КонецЕсли;
			
	НовСписок = Новый СписокЗначений();
	СобратьРеквизитыДокумента(Объект.ВидДокументаНового, НовСписок);
	Элементы.НовыеЗначенияРеквизитовНовогоИмяРеквизита.СписокВыбора.ЗагрузитьЗначения(НовСписок.ВыгрузитьЗначения());
	
	Элементы.ТабличнуюЧастьПриЗагрузкеПодбор.Заголовок = ?(Объект.ВидДокументаНового = "", "Режим записи табличной части исходного документа","Режим записи табличной части нового документа");
	Элементы.ТабличнуюЧастьПриЗагрузкеПриемка.Заголовок = ?(Объект.ВидДокументаНового = "", "Режим записи табличной части исходного документа","Режим записи табличной части нового документа");
	
	ВидимостьБыстройПриемкиОтгрузки();
	ВидимостьРеквизитаИзменятьТипОбеспечения();
	
	ПроверитьДокументНаВозможностьАдресногоХранения();
	
	Если Не ДоступностьАХПодбор И Не ДоступностьАХПриемка Тогда
		//ПоказатьПредупреждение(, "Документ " + Элементы.ВидДокумента.ТекстРедактирования + " не поддерживает адресное хранение. ",, "Отсутствуют реквизиты А.Х.");
	КонецЕсли;
	
	ПроверкаАдресногоХранения();
	ВидимостьКолонокДопФорм();
		
КонецПроцедуры

&НаКлиенте
Процедура ПутьВыгрузкиИзображенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Новый ОписаниеОповещения("ВыборФайлаНастроек_Завершение", ЭтаФорма));
	
КонецПроцедуры
&НаКлиенте
Процедура ВыборФайлаНастроек_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда				
		Объект.ПутьВыгрузкиИзображения = ВыбранныеФайлы[0] + "\";	
	КонецЕсли;		
	
КонецПроцедуры
&НаКлиенте
Процедура ПутьВыгрузкиИзображенияПриИзменении(Элемент)
	Если Объект.ПутьВыгрузкиИзображения <> "" Тогда  
		РП = ДатаМобайл_ОбщийМодуль.DM_ПолучитьРазделительПути();
		Попытка Объект.ПутьВыгрузкиИзображения = СокрЛП(Объект.ПутьВыгрузкиИзображения) + ?(Прав(СокрЛП(Объект.ПутьВыгрузкиИзображения), 1) = РП, "", РП); Исключение КонецПопытки; 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГрупповогоДокумента()
	
	Если Объект.ИспользоватьГрупповойДокумент Тогда
		Элементы.РаспределениеТоваров.Видимость = Истина;		
	ИначеЕсли Объект.ИспользоватьГрупповойДокумент = Ложь Тогда
		Объект.РаспределениеТоваров = 0;
		Элементы.РаспределениеТоваров.Видимость = Ложь;
		Элементы.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически.Видимость = Ложь;
	КонецЕсли;
		
	Если Объект.РаспределениеТоваров = 2 Тогда
		Элементы.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически.Видимость = Истина;
	ИначеЕсли Объект.РаспределениеТоваров <> 2 Тогда
		Элементы.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически.Видимость = Ложь;		
	КонецЕсли;
		
КонецПроцедуры
&НаКлиенте                                                       
Процедура ИспользоватьГрупповойДокументПриИзменении(Элемент)
		
	Если Объект.ИспользоватьГрупповойДокумент Тогда	
		Элементы.РаспределениеТоваров.Видимость = Истина;		
		
		Если Объект.РаспределениеТоваров = 2 Тогда
			Элементы.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли Объект.ИспользоватьГрупповойДокумент = Ложь Тогда	
		Элементы.РаспределениеТоваров.Видимость = Ложь;
		Элементы.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически.Видимость = Ложь;
		Объект.РаспределениеТоваров = 0;
		Объект.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически = Ложь;
		Элементы.РазрешеноСозданиеНаТСД.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры
&НаКлиенте
Процедура РаспределениеТоваровПриИзменении(Элемент)
	
	Элементы.грАвтосозданиеВыгрузка.Видимость = Не Объект.РаспределениеТоваров = 2;
	
	Попытка 
		Если (Объект.ВыгружатьРоботом Или Объект.МаркировкаВыгружатьРоботом) И Объект.РаспределениеТоваров = 2 Тогда		
			Объект.ВыгружатьРоботом = Ложь;
			Объект.МаркировкаВыгружатьРоботом = Ложь;
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Если Объект.РаспределениеТоваров = 2 Тогда
		Элементы.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически.Доступность = Истина;
		Элементы.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически.Видимость = Истина;	
	Иначе
		Элементы.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически.Доступность = Ложь;
		Элементы.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически.Видимость = Ложь;		
	КонецЕсли;
	
	Если Объект.РаспределениеТоваров > 0 Тогда
		Объект.РазрешеноСозданиеНаТСД = Ложь;
		Элементы.РазрешеноСозданиеНаТСД.Доступность = Ложь;
	Иначе
		Элементы.РазрешеноСозданиеНаТСД.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.РаспределениеТоваров = 1 Тогда
		Объект.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически = Ложь;
		Элементы.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВыгрузкуНеполногоДокументаПриИзменении(Элемент)
	УстановитьДоступностьВариантаВыгрузкиНеполногоДокумента();	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьДоступностьВариантаВыгрузкиНеполногоДокумента()
	
	Если Объект.РазрешитьВыгрузкуНеполногоДокумента = 2 Тогда
		Попытка Объект.РазрешитьВыгрузкуНеполногоДокументаВариант = 0; Исключение КонецПопытки;
		Элементы.РазрешитьВыгрузкуНеполногоДокументаВариант.Доступность = Ложь;
	Иначе
		Элементы.РазрешитьВыгрузкуНеполногоДокументаВариант.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьБыстройПриемкиОтгрузки()
	
	Если Объект.ВидДокумента = "ОтборРазмещениеТоваров" Тогда
		Элементы.БыстраяПриемка.Видимость = Истина;
		Элементы.БыстраяОтгрузка.Видимость = Истина;
	Иначе
		Элементы.БыстраяПриемка.Видимость = Ложь;
		Элементы.БыстраяОтгрузка.Видимость = Ложь;		
	КонецЕсли;	
	
КонецПроцедуры
&НаКлиенте
Процедура БыстроеПеремещениеПриИзменении(Элемент)
	
	Попытка ПроверкаАдресногоХранения(); Исключение КонецПопытки; 
	
КонецПроцедуры
&НаКлиенте
Процедура ВидимостьРеквизитаИзменятьТипОбеспечения()
	
	Если Объект.ВидДокумента = "ЗаказКлиента" И Объект.ВидДокументаНового = "РеализацияТоваровУслуг" Тогда
		Элементы.ИзменятьТипОбеспечения.Видимость = Истина;
	Иначе
		Элементы.ИзменятьТипОбеспечения.Видимость = Ложь;
		Если Объект.ИзменятьТипОбеспечения = Истина Тогда
			Объект.ИзменятьТипОбеспечения = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура АвтоматическийКомментарийИспользоватьПриИзменении(Элемент)	
	Элементы.АвтоматическийКомментарий.Видимость = Объект.АвтоматическийКомментарийИспользовать;
	
	// для связи нового реквизита со старым, потом удалить при удалении реквизита
	Объект.НеДобавлятьКомментарийDataMobile = Не Объект.АвтоматическийКомментарийИспользовать;
КонецПроцедуры
&НаКлиенте
Процедура РазрешеноСозданиеНаТСДПриИзменении(Элемент)
	
	Если Объект.РазрешеноСозданиеНаТСД Тогда
		Объект.РаспределениеТоваров = 0;
		Элементы.РаспределениеТоваров.Доступность = Ложь;
		Элементы.РежимСозданияДокументов.Доступность = Истина;
	ИначеЕсли Объект.РазрешеноСозданиеНаТСД = Ложь Тогда
		Объект.РежимСозданияДокументов = 0;
		Элементы.РаспределениеТоваров.Доступность = Истина;
		Элементы.РежимСозданияДокументов.Доступность = Ложь;
	КонецЕсли;
	
	РежимСозданияДокументовПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСозданияДокументовПриИзменении(Элемент)
	
	Если Объект.РежимСозданияДокументов = 1 Тогда
		Элементы.ОбязательноеЗаполнениеКонтрагента.Видимость = Истина;
		Элементы.ОбязательноеЗаполнениеСклада.Видимость = Истина;
	Иначе
		Элементы.ОбязательноеЗаполнениеКонтрагента.Видимость = Ложь;
		Элементы.ОбязательноеЗаполнениеСклада.Видимость = Ложь;
		Объект.ОбязательноеЗаполнениеКонтрагента = Ложь;
		Объект.ОбязательноеЗаполнениеСклада = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОтсылатьГотовуюЗаписьНаСервер()
	
	БыстроеСканирование 										= Объект.БыстроеСканирование;
	КонтролироватьОстатокПоСериям 								= Объект.КонтролироватьОстатокПоСериям;
	ГрупповаяРабота                 							= Объект.ГрупповаяРабота;
	ОнлайнПроверкаВложенностиУпаковок   						= Объект.МаркировкаОнлайнПроверкаВложенностиУпаковок;
	РезервироватьТовар                  						= Объект.РезервироватьТовар;
	ПечатьЭтикеткиСерииПодбор           						= Объект.ПечатьЭтикеткиСерииПодбор;
	ИспользоватьПодбор											= Объект.ИспользоватьПодбор;
	ИспользоватьПриемку											= Объект.ИспользоватьПриемку;
	БлокироватьДоступностьОтсылатьГотовуюЗаписьНаСерверПодбор	= БыстроеСканирование Или КонтролироватьОстатокПоСериям Или ГрупповаяРабота Или ОнлайнПроверкаВложенностиУпаковок Или РезервироватьТовар Или ПечатьЭтикеткиСерииПодбор;
	БлокироватьДоступностьОтсылатьГотовуюЗаписьНаСерверПриемку  = БыстроеСканирование Или КонтролироватьОстатокПоСериям Или ГрупповаяРабота Или ОнлайнПроверкаВложенностиУпаковок Или РезервироватьТовар;
	
	Объект.ОтсылатьГотовуюЗаписьНаСерверПодбор = ИспользоватьПодбор И (БлокироватьДоступностьОтсылатьГотовуюЗаписьНаСерверПодбор Или Объект.ОтсылатьГотовуюЗаписьНаСерверПодбор);	
	Элементы.ОтсылатьГотовуюЗаписьНаСерверПодбор.Доступность = ?(ИспользоватьПодбор, Не БлокироватьДоступностьОтсылатьГотовуюЗаписьНаСерверПодбор, Ложь);
	
	Объект.ОтсылатьГотовуюЗаписьНаСерверПриемка = ИспользоватьПриемку И (БлокироватьДоступностьОтсылатьГотовуюЗаписьНаСерверПриемку Или Объект.ОтсылатьГотовуюЗаписьНаСерверПриемка);
	Элементы.ОтсылатьГотовуюЗаписьНаСерверПриемка.Доступность = ?(ИспользоватьПриемку, Не БлокироватьДоступностьОтсылатьГотовуюЗаписьНаСерверПриемку, Ложь);		
	
КонецПроцедуры

&НаКлиенте
Процедура БыстроеСканированиеПриИзменении(Элемент)
	УстановитьДоступностьОтсылатьГотовуюЗаписьНаСервер();
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьОстатокПоСериямПриИзменении(Элемент)
	УстановитьДоступностьОтсылатьГотовуюЗаписьНаСервер();
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаОнлайнПроверкаВложенностиУпаковокПриИзменении(Элемент)
	
	УстановитьДоступностьОтсылатьГотовуюЗаписьНаСервер();
	УстановитьНастройкиОнлайнПроверкиВложенностиУпаковок();
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьНастройкиОнлайнПроверкиВложенностиУпаковок()  
	
	//Вкладка "ЕГАИС"
	
	Если Элементы.грСтраницы.ТекущаяСтраница = Элементы.грЕГАИС Тогда
		
		Если Объект.МаркировкаОнлайнПроверкаВложенностиУпаковок Тогда
			
			Объект.ПроверкаВложенностиУпаковок = 0; //установка значения в "Не проверять"
			Элементы.ПроверкаВложенностиУпаковокЕгаис.Доступность = Ложь;  
			
		Иначе
			
			Элементы.ПроверкаВложенностиУпаковокЕгаис.Доступность = Истина;  
			
		КонецЕсли; 
		
		//Вкладка "Маркировка"	
	Иначе          
		
		Если Объект.МаркировкаОнлайнПроверкаВложенностиУпаковок Тогда
			
			Объект.ПроверкаВложенностиУпаковок = 0;  //установка значения в "Не проверять"
			Элементы.ПроверкаВложенностиУпаковок.Доступность = Не Объект.МаркировкаОнлайнПроверкаВложенностиУпаковок; 
			
		Иначе
			
			Элементы.ПроверкаВложенностиУпаковок.Доступность = Истина;
			
		КонецЕсли;	
		
	КонецЕсли;   
	
	Если Объект.ИспользоватьПодбор Тогда
		
		Если Объект.МаркировкаОнлайнПроверкаВложенностиУпаковок Тогда
			Объект.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
			Элементы.ОтсылатьГотовуюЗаписьНаСерверПодбор.Доступность = Ложь;
			Объект.ПриСканированииТовараПодбор = 2;
			Элементы.ПриСканированииТовараПодбор.Доступность = Ложь;
		Иначе
			Элементы.ПриСканированииТовараПодбор.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ИспользоватьПриемку Тогда 
		
		Если Объект.МаркировкаОнлайнПроверкаВложенностиУпаковок Тогда
			Объект.ОтсылатьГотовуюЗаписьНаСерверПриемка = Истина;
			Элементы.ОтсылатьГотовуюЗаписьНаСерверПриемка.Доступность = Ложь;
			Объект.ПриСканированииТовараПодбор = 2;
			Элементы.ПриСканированииТовараПриемка.Доступность = Ложь;
		Иначе
			Элементы.ПриСканированииТовараПриемка.Доступность = Истина;
		КонецЕсли;
		
		
		Если Объект.МаркировкаОнлайнПроверкаВложенностиУпаковок Тогда
			Объект.ОтсылатьГотовуюЗаписьНаСерверПриемка = Истина;
			Элементы.ОтсылатьГотовуюЗаписьНаСерверПриемка.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;	   
	
КонецПроцедуры	

&НаКлиенте
Процедура РезервироватьТоварПриИзменении(Элемент)
	УстановитьДоступностьОтсылатьГотовуюЗаписьНаСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеткиСерииПодборПриИзменении(Элемент)
	УстановитьДоступностьОтсылатьГотовуюЗаписьНаСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьПриКаждомОткрытииПриИзменении(Элемент)
	ДоступностьРеквизитовОбновлятьПриКаждомОткрытииУдалитьОстатокЗаданияПослеВводаСтроки();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОстатокЗаданияПослеВводаСтрокиПриИзменении(Элемент)
	ДоступностьРеквизитовОбновлятьПриКаждомОткрытииУдалитьОстатокЗаданияПослеВводаСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьРеквизитовОбновлятьПриКаждомОткрытииУдалитьОстатокЗаданияПослеВводаСтроки()
	
	Если Объект.ОбновлятьПриКаждомОткрытии Тогда
		Объект.УдалитьОстатокЗаданияПослеВводаСтроки = Ложь;
		Элементы.УдалитьОстатокЗаданияПослеВводаСтроки.Доступность = Ложь;
	Иначе
		Элементы.УдалитьОстатокЗаданияПослеВводаСтроки.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.УдалитьОстатокЗаданияПослеВводаСтроки Тогда
		Элементы.ОбновлятьПриКаждомОткрытии.Доступность = Ложь;
	Иначе
		Элементы.ОбновлятьПриКаждомОткрытии.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКолонокДопФорм() 
	
	ВидимостьКолонокДопФорм = Не (Объект.ВидДокументаНового = "");
	Элементы.ДополнительныеФормыВыгружаемыйРеквизит.Видимость = ВидимостьКолонокДопФорм;
	Элементы.ДополнительныеФормыСтрокВыгружаемыйРеквизит.Видимость = ВидимостьКолонокДопФорм; 
	
	Если ВидимостьКолонокДопФорм Тогда
		Элементы.ДополнительныеФормыВыгружаемыйРеквизит.Заголовок = "Реквизит исходного документа";
		Элементы.ДополнительныеФормыЗаполняемыйРеквизит.Заголовок = "Реквизит нового документа";
		Элементы.ДополнительныеФормыСтрокВыгружаемыйРеквизит.Заголовок = "Реквизит исходного документа";
		Элементы.ДополнительныеФормыСтрокЗаполняемыйРеквизит.Заголовок = "Реквизит нового документа";
	Иначе
		Элементы.ДополнительныеФормыВыгружаемыйРеквизит.Заголовок = "";
		Элементы.ДополнительныеФормыЗаполняемыйРеквизит.Заголовок = "Реквизит исходного документа";
		Элементы.ДополнительныеФормыСтрокВыгружаемыйРеквизит.Заголовок = "";
		Элементы.ДополнительныеФормыСтрокЗаполняемыйРеквизит.Заголовок = "Реквизит исходного документа";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаКлиенте
Процедура ИспользоватьПодборПриИзменении(Элемент)
	
	ИспПодбор     = Объект.ИспользоватьПодбор;
	ИспРазмещение = Объект.ИспользоватьПриемку;
	
	УстановитьДоступностьОтсылатьГотовуюЗаписьНаСервер();
	
	// 1. изменить связанные значения
	Попытка Объект.ПриемкаПоПодбору = ?(ИспРазмещение И ИспПодбор, Объект.ПриемкаПоПодбору, Ложь); Исключение КонецПопытки;
	Попытка Объект.ПриПриемкеЗапрашиватьТовар = ?(ИспРазмещение И ИспПодбор И Объект.ПриемкаПоПодбору, Объект.ПриПриемкеЗапрашиватьТовар, Ложь); Исключение КонецПопытки;
	
	Попытка Объект.ТабличнуюЧастьПриЗагрузкеПодбор = ?(ИспПодбор, Объект.ТабличнуюЧастьПриЗагрузкеПодбор, 0); Исключение КонецПопытки;
	Попытка Объект.ПриСканированииТовараПодбор = ?(ИспПодбор, Объект.ПриСканированииТовараПодбор, 0); Исключение КонецПопытки;
	Попытка Объект.ПриПревышенииЗаданияПодбор = ?(ИспПодбор, Объект.ПриПревышенииЗаданияПодбор, 0); Исключение КонецПопытки;
	Попытка Объект.ПриПревышенииЛимитаПодбор = ?(ИспПодбор, Объект.ПриПревышенииЛимитаПодбор, 0); Исключение КонецПопытки;
	Попытка Объект.ИспользованиеЯчеекПодбор = ?(ИспПодбор, Объект.ИспользованиеЯчеекПодбор, 0); Исключение КонецПопытки;
	Попытка Объект.ИспользованиеСерийниковПодбор = ?(ИспПодбор, Объект.ИспользованиеСерийниковПодбор, 0); Исключение КонецПопытки;
	Попытка Объект.ИспользованиеУпаковочныхЛистовПодбор = ?(ИспПодбор, Объект.ИспользованиеУпаковочныхЛистовПодбор, 0); Исключение КонецПопытки;
	
	Попытка Объект.РучнойВводКоличестваПодбор = ?(ИспПодбор, Объект.РучнойВводКоличестваПодбор, Ложь); Исключение КонецПопытки;
	Попытка Объект.ПодтверждатьЭнтеромПодбор = ?(ИспПодбор, Объект.ПодтверждатьЭнтеромПодбор, Ложь); Исключение КонецПопытки;
	Попытка Объект.ОтсылатьГотовуюЗаписьНаСерверПодбор = ?(ИспПодбор, Объект.ОтсылатьГотовуюЗаписьНаСерверПодбор, Ложь); Исключение КонецПопытки;
	Попытка Объект.ПечатьЭтикеткиПриПодборе = ?(ИспПодбор, Объект.ПечатьЭтикеткиПриПодборе, 0); Исключение КонецПопытки;
	Попытка Объект.ПриемкаПоПодбору = ?(ИспПодбор И ИспРазмещение, Объект.ПриемкаПоПодбору, Ложь); Исключение КонецПопытки;
	Попытка Объект.ПриПриемкеЗапрашиватьТовар = ?(ИспПодбор И ИспРазмещение И Объект.ПриемкаПоПодбору, Объект.ПриПриемкеЗапрашиватьТовар, Ложь); Исключение КонецПопытки;
	
	// 2. обработать изменение значения
	ИспользованиеСерийниковПодборПриИзменении(Элементы.ИспользованиеСерийниковПодбор);
	ИспользованиеУпаковочныхЛистовПодборПриИзменении(Элементы.ИспользованиеУпаковочныхЛистовПодбор);
	ИспользоватьФотофиксациюПриИзменении(Элементы.ИспользоватьФотофиксацию);
	ПриемкаПоПодборуПриИзменении(Элементы.ПриемкаПоПодбору);
	ГрупповаяРаботаПриИзменении(Элемент);
	
	// 3. видимость - доступность
	Элементы.ИмяТабличнойЧастиНовойПодбор.Доступность = ИспПодбор;
	Элементы.ИмяТабличнойЧастиПодбор.Доступность = ИспПодбор;
	Элементы.ТабличнуюЧастьПриЗагрузкеПодбор.Доступность = ИспПодбор;
	Элементы.ПриСканированииТовараПодбор.Доступность = ИспПодбор;
	Элементы.ПриПревышенииЗаданияПодбор.Доступность = ИспПодбор;
	Элементы.ПриПревышенииЛимитаПодбор.Доступность = ИспПодбор;
	Элементы.ИспользованиеСерийниковПодбор.Доступность = ИспПодбор;
	Элементы.ИспользованиеУпаковочныхЛистовПодбор.Доступность = ИспПодбор;
	
	Элементы.УчитыватьСерийниковВЗаданииПодбор.Доступность = ИспПодбор;
	Элементы.СерНомНеПустойПодбор.Доступность = ИспПодбор;
	Элементы.УникальныеСерийныеНомераПодбор.Доступность = ИспПодбор;
	Элементы.ПечатьЭтикеткиСерииПодбор.Доступность = ИспПодбор;
	Элементы.ИспользоватьТиповыеУпаковочныеЛисты.Доступность = ИспПодбор;
	Элементы.ГруппировкаСерийПодбор.Доступность = ИспПодбор;
	
	Элементы.РучнойВводКоличестваПодбор.Доступность = ИспПодбор;
	Элементы.ПодтверждатьЭнтеромПодбор.Доступность = ИспПодбор;
	Элементы.ПечатьЭтикеткиПриПодборе.Доступность = ИспПодбор;
	
	ДоступностьДопФормыСтрокиДокумента(ИспПодбор, ИспРазмещение);
	РучнойВводКоличестваПодборПриИзменении(Элемент);
	РучнойВводКоличестваПриемкаПриИзменении(Элемент);
	
	ПроверкаАдресногоХранения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеЯчеекПодборПриИзменении(Элемент)
	
	Если Не ДоступностьАХПодбор Тогда
		//ПоказатьПредупреждение(, "Документ " + Элементы.ВидДокумента.ТекстРедактирования + " не поддерживает адресное хранение. ",, "Отсутствуют реквизиты А.Х.");
	КонецЕсли;
	
	ПроверкаАдресногоХранения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаЯчеекПодборПриИзменении(Элемент)
	
	Если Объект.ВыгрузкаЯчеекПодбор = 0 Тогда
		Элементы.ЗагружатьСписокЯчеекССервераПодбор.Доступность = Ложь;
	Иначе
		Элементы.ЗагружатьСписокЯчеекССервераПодбор.Доступность = Истина;
	КонецЕсли;
	
	Если Не Объект.ИспользованиеЯчеекПодбор = 0 И Объект.ЯчейкиСправочноеРазмещениеПодбор Тогда
		Объект.ЯчейкиСправочноеРазмещениеПодбор = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьСписокЯчеекССервераПодборПриИзменении(Элемент)
	
	Если Объект.ЗагружатьСписокЯчеекССервераПодбор Тогда
		Попытка Объект.ВыгрузкаЯчеекПодбор = 1; Исключение КонецПопытки;
		Элементы.ВыгрузкаЯчеекПодбор.Доступность=Ложь;
	Иначе
		Элементы.ВыгрузкаЯчеекПодбор.Доступность=Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеСерийниковПодборПриИзменении(Элемент)
	
	Элементы.УчитыватьСерийниковВЗаданииПодбор.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользованиеСерийниковПодбор <> 0);
	Элементы.УникальныеСерийныеНомераПодбор.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользованиеСерийниковПодбор <> 0);
	Элементы.СерНомНеПустойПодбор.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользованиеСерийниковПодбор <> 0);
	Элементы.ПроверкаОСГ.Доступность = (Не Объект.ИспользованиеСерийниковПодбор = 0 Или Не Объект.ИспользованиеСерийниковПриемка = 0);
	Элементы.ГруппировкаСерийПодбор.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользованиеСерийниковПодбор <> 0);
	
	Элементы.ПечатьЭтикеткиСерииПодбор.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользованиеСерийниковПодбор <> 0);
	
	Попытка Объект.УчитыватьСерийниковВЗаданииПодбор = Объект.УчитыватьСерийниковВЗаданииПодбор И Объект.ИспользоватьПодбор И Объект.ИспользованиеСерийниковПодбор <> 0; Исключение КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковочныхЛистовПодборПриИзменении(Элемент)
	
	Элементы.ИспользоватьТиповыеУпаковочныеЛисты.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользованиеУпаковочныхЛистовПодбор <> 0);
	Элементы.ПодборУпаковочнымиЛистами.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользованиеУпаковочныхЛистовПодбор <> 0);
	Элементы.ПроверкаУпаковочныхЛистовПоЗаданию.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользованиеУпаковочныхЛистовПодбор <> 0);
	
	Если Объект.ИспользованиеУпаковочныхЛистовПодбор = 3 Или Объект.ИспользованиеУпаковочныхЛистовПодбор = 4 Тогда
		Элементы.МаркировкаКоличествоЕдиницВУпаковкеПриАгрегации.Видимость = Истина;
		Элементы.МаркировкаКоличествоЕдиницВУпаковкеПриАгрегации.Доступность = Истина;
	Иначе
		Элементы.МаркировкаКоличествоЕдиницВУпаковкеПриАгрегации.Видимость = Ложь;
		Элементы.МаркировкаКоличествоЕдиницВУпаковкеПриАгрегации.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользованиеУпаковочныхЛистовПодбор = 0 Тогда
		
		Элементы.МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки.Видимость = Ложь;
		Элементы.МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки.Доступность = Ложь;
		
		Элементы.МаркировкаЗапретитьПовторнуюАгрегациюКМ.Видимость = Ложь;
		Элементы.МаркировкаЗапретитьПовторнуюАгрегациюКМ.Доступность = Ложь;
		
	Иначе		
		Элементы.МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки.Видимость = Истина;
		Элементы.МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки.Доступность = Истина;
		
		Элементы.МаркировкаЗапретитьПовторнуюАгрегациюКМ.Видимость = Истина;
		Элементы.МаркировкаЗапретитьПовторнуюАгрегациюКМ.Доступность = Истина;
	КонецЕсли;  
	
	Если Объект.ИспользованиеУпаковочныхЛистовПодбор = 0 Тогда	
		Элементы.ПроверкаВводаУпаковочногоЛистаПодбор.Доступность = Ложь;
	Иначе
		Элементы.ПроверкаВводаУпаковочногоЛистаПодбор.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ИспользованиеУпаковочныхЛистовПодбор = 5 Тогда
		Объект.МаркировкаВводМаркируемогоТовараБезКМ = 0;	
	КонецЕсли;
	
	ВидимостьДоступностьНастроекУЛПодбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковочныхЛистовПодборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не Объект.ИспользоватьМаркировку Тогда //удаляю из выбора короб(3), палету(4) и Набор(5)		
		МассивУдаляемых = Новый Массив;
		
		Попытка
			МассивУдаляемых.Добавить(Элемент.СписокВыбора[3].Значение);
			МассивУдаляемых.Добавить(Элемент.СписокВыбора[4].Значение);
			МассивУдаляемых.Добавить(Элемент.СписокВыбора[5].Значение);
		Исключение
		КонецПопытки; 
		
		СписокВыбора = Элемент.СписокВыбора;
		
		Для каждого СтрокаМассива Из МассивУдаляемых Цикл
			НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(СтрокаМассива);
			Если НайденныйЭлемент <> Неопределено Тогда
				СписокВыбора.Удалить(НайденныйЭлемент);
			КонецЕсли;	
		КонецЦикла; 
	ИначеЕсли Элемент.СписокВыбора.НайтиПоЗначению(3) = Неопределено Тогда		
		Элемент.СписокВыбора.Добавить(3, "Короб");
		Элемент.СписокВыбора.Добавить(4, "Палета");
		Элемент.СписокВыбора.Добавить(5, "Набор");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьНастроекУЛПодбор()
	ВыполненыВсеУсловия = ((Объект.ИспользованиеУпаковочныхЛистовПодбор = 1) И Объект.ИспользоватьТиповыеУпаковочныеЛисты);
	Элементы.ПодборУпаковочнымиЛистами.Видимость = ВыполненыВсеУсловия;
	Элементы.ПроверкаУпаковочныхЛистовПоЗаданию.Видимость = ВыполненыВсеУсловия;
	
	Если Не ВыполненыВсеУсловия Тогда
		Если Объект.ПодборУпаковочнымиЛистами Тогда
			Объект.ПодборУпаковочнымиЛистами = Ложь;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если Объект.ПодборПроверкаУпаковочныхЛистовПоЗаданию Тогда
			Объект.ПодборПроверкаУпаковочныхЛистовПоЗаданию = Ложь;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТиповыеУпаковочныеЛистыПриИзменении(Элемент)
	ВидимостьДоступностьНастроекУЛПодбор();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФотофиксациюПриИзменении(Элемент)
	
	Если Объект.ИспользоватьФотофиксацию Тогда
		
		Элементы.ПутьВыгрузкиИзображения.Доступность = Истина;
		
		Если Объект.ИспользоватьПодбор Тогда
			Объект.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		КонецЕсли;
		
		Если Объект.ИспользоватьПриемку Тогда
			Объект.ОтсылатьГотовуюЗаписьНаСерверПриемка = Истина;	
		КонецЕсли; 
		
	Иначе
		Элементы.ПутьВыгрузкиИзображения.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкиСправочноеРазмещениеПодборПриИзменении(Элемент)
	
	Если Объект.ЯчейкиСправочноеРазмещениеПодбор Тогда
		Объект.ЗагружатьСписокЯчеекССервераПодбор = Истина;
		Объект.ИспользованиеЯчеекПодбор = 3; 
		Объект.ВыгрузкаЯчеекПодбор = 1;
	Иначе 
		Объект.ИспользованиеЯчеекПодбор = 0;
		Объект.ЗагружатьСписокЯчеекССервераПодбор = Ложь; 
		Объект.ВыгрузкаЯчеекПодбор = 0;
	КонецЕсли; 
	
	ПроверкаАдресногоХранения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВводаУпаковочногоЛистаПодборПриИзменении(Элемент)
	
	УстановитьДоступностьОтсылатьГотовуюЗаписьНаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяТабличнойЧастиПодборПриИзменении(Элемент)
	
	ПроверитьДокументНаВозможностьАдресногоХранения();
	ПроверкаАдресногоХранения();
	
КонецПроцедуры

#КонецОбласти

#Область Размещение

&НаКлиенте
Процедура ИспользоватьПриемкуПриИзменении(Элемент)
	
	ИспРазмещение = Объект.ИспользоватьПриемку;
	ИспПодбор     = Объект.ИспользоватьПодбор;
	
	УстановитьДоступностьОтсылатьГотовуюЗаписьНаСервер();
	
	// 1. изменить связанные значения
	Попытка Объект.ПриемкаПоПодбору = ?(ИспРазмещение И ИспПодбор,Объект.ПриемкаПоПодбору, Ложь); Исключение КонецПопытки;
	Попытка Объект.ПриПриемкеЗапрашиватьТовар = ?(ИспРазмещение И ИспПодбор И Объект.ПриемкаПоПодбору, Объект.ПриПриемкеЗапрашиватьТовар, Ложь); Исключение КонецПопытки;
	
	Попытка Объект.ТабличнуюЧастьПриЗагрузкеПриемка = ?(ИспРазмещение, Объект.ТабличнуюЧастьПриЗагрузкеПриемка, 0); Исключение КонецПопытки;
	Попытка Объект.ПриСканированииТовараПриемка = ?(ИспРазмещение, Объект.ПриСканированииТовараПриемка, 0); Исключение КонецПопытки;
	Попытка Объект.ПриПревышенииЗаданияПриемка = ?(ИспРазмещение, Объект.ПриПревышенииЗаданияПриемка, 0); Исключение КонецПопытки;
	Попытка Объект.ПриПревышенииЛимитаПриемка = ?(ИспРазмещение, Объект.ПриПревышенииЛимитаПриемка, 0); Исключение КонецПопытки;
	Попытка Объект.ИспользованиеЯчеекПриемка = ?(ИспРазмещение, Объект.ИспользованиеЯчеекПриемка, 0); Исключение КонецПопытки;
	
	Попытка Объект.ИспользованиеСерийниковПриемка = ?(ИспРазмещение, Объект.ИспользованиеСерийниковПриемка, 0); Исключение КонецПопытки;
	Попытка Объект.ИспользованиеУпаковочныхЛистовПриемка = ?(ИспРазмещение, Объект.ИспользованиеУпаковочныхЛистовПриемка, 0); Исключение КонецПопытки;
	Попытка Объект.РучнойВводКоличестваПриемка = ?(ИспРазмещение, Объект.РучнойВводКоличестваПриемка, Ложь); Исключение КонецПопытки;
	Попытка Объект.ПодтверждатьЭнтеромПриемка = ?(ИспРазмещение, Объект.ПодтверждатьЭнтеромПриемка, Ложь); Исключение КонецПопытки;
	Попытка Объект.ОтсылатьГотовуюЗаписьНаСерверПриемка = ?(ИспРазмещение, Объект.ОтсылатьГотовуюЗаписьНаСерверПриемка, Ложь); Исключение КонецПопытки;
	Попытка Объект.ПечатьЭтикеткиПриПриемке = ?(ИспРазмещение, Объект.ПечатьЭтикеткиПриПриемке, 0); Исключение КонецПопытки;
	Попытка Объект.ПриемкаПоПодбору = ?(ИспПодбор И ИспРазмещение, Объект.ПриемкаПоПодбору, Ложь); Исключение КонецПопытки;
	Попытка Объект.ПриПриемкеЗапрашиватьТовар = ?(ИспПодбор И ИспРазмещение И Объект.ПриемкаПоПодбору, Объект.ПриПриемкеЗапрашиватьТовар, Ложь); Исключение КонецПопытки;
	Попытка Объект.ПоштучноеПеремещение = ?(ИспПодбор И ИспРазмещение И Объект.ПриемкаПоПодбору, Объект.ПоштучноеПеремещение, Ложь); Исключение КонецПопытки;
	
	// 2. обработать изменение значения
	ИспользованиеСерийниковПриемкаПриИзменении(Элементы.ИспользованиеСерийниковПриемка);
	
	ПриемкаПоПодборуПриИзменении(Элементы.ПриемкаПоПодбору);
	ГрупповаяРаботаПриИзменении(Элемент);
	
	// 3. видимость - доступность
	Элементы.ИмяТабличнойЧастиНовойПриемка.Доступность = ИспРазмещение;
	Элементы.ИмяТабличнойЧастиПриемка.Доступность = ИспРазмещение;
	Элементы.ТабличнуюЧастьПриЗагрузкеПриемка.Доступность = ИспРазмещение;
	Элементы.ПриСканированииТовараПриемка.Доступность = ИспРазмещение;
	Элементы.ПриПревышенииЗаданияПриемка.Доступность = ИспРазмещение;
	Элементы.ПриПревышенииЛимитаПриемка.Доступность = ИспРазмещение;
	
	Элементы.ИспользованиеСерийниковПриемка.Доступность = ИспРазмещение;
	Элементы.УчитыватьСерийниковВЗаданииПриемка.Доступность = ИспРазмещение;
	Элементы.СерНомНеПустойПриемка.Доступность = ИспРазмещение;
	Элементы.УникальныеСерийныеНомераПриемка.Доступность = ИспРазмещение;
	Элементы.ГруппировкаСерийПриемка.Доступность = ИспРазмещение;
	
	Элементы.ИспользованиеУпаковочныхЛистовПриемка.Доступность = ИспРазмещение;
	Элементы.ПутьВыгрузкиИзображения.Доступность = ИспРазмещение;
	
	Элементы.РучнойВводКоличестваПриемка.Доступность = ИспРазмещение;
	Элементы.ПодтверждатьЭнтеромПриемка.Доступность = ИспРазмещение;
	Элементы.ПечатьЭтикеткиПриПриемке.Доступность = ИспРазмещение; 
	
	Элементы.ПриемкаПоПодбору.Доступность = ИспРазмещение;
	Элементы.ПриПриемкеЗапрашиватьТовар.Доступность = ИспРазмещение;
	Элементы.ПоштучноеПеремещение.Доступность = ИспРазмещение;
	
	ДоступностьДопФормыСтрокиДокумента(ИспПодбор, ИспРазмещение);
	ПроверкаАдресногоХранения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаПоПодборуПриИзменении(Элемент)
	Попытка Объект.ПриПриемкеЗапрашиватьТовар = ?(Объект.ИспользоватьПодбор И Объект.ИспользоватьПриемку И Объект.ПриемкаПоПодбору, Объект.ПриПриемкеЗапрашиватьТовар, Ложь); Исключение КонецПопытки;
	
	Элементы.ПриПриемкеЗапрашиватьТовар.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользоватьПриемку И Объект.ПриемкаПоПодбору);
	
	Попытка Объект.ПоштучноеПеремещение = ?(Объект.ИспользоватьПодбор И Объект.ИспользоватьПриемку И Объект.ПриемкаПоПодбору, Объект.ПоштучноеПеремещение, Ложь); Исключение КонецПопытки;
	
	Элементы.ПоштучноеПеремещение.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользоватьПриемку И Объект.ПриемкаПоПодбору);
КонецПроцедуры

&НаКлиенте
Процедура ПриПриемкеЗапрашиватьТоварПриИзменении(Элемент)
	Попытка Объект.ПоштучноеПеремещение = ?(Объект.ИспользоватьПодбор И Объект.ИспользоватьПриемку И Объект.ПриемкаПоПодбору,Объект.ПриПриемкеЗапрашиватьТовар И Не Объект.ПриПриемкеЗапрашиватьТовар, Ложь); Исключение КонецПопытки;
	Элементы.ПоштучноеПеремещение.ТолькоПросмотр = Не (Объект.ИспользоватьПодбор И Объект.ИспользоватьПриемку И Объект.ПриемкаПоПодбору И Не Объект.ПриПриемкеЗапрашиватьТовар);
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеЯчеекПриемкаПриИзменении(Элемент)
	
	Если Не ДоступностьАХПриемка Тогда
		ПоказатьПредупреждение(, "Документ " + Элементы.ВидДокумента.ТекстРедактирования + " не поддерживает адресное хранение. ",, "Отсутствуют реквизиты А.Х.");
	КонецЕсли;
	
	ПроверкаАдресногоХранения(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаЯчеекПриемкаПриИзменении(Элемент)
	
	Если Объект.ВыгрузкаЯчеекПриемка = 0 Тогда
		Элементы.ЗагружатьСписокЯчеекССервераПриемка.Доступность = Ложь
	Иначе
		Элементы.ЗагружатьСписокЯчеекССервераПриемка.Доступность = Истина;
	КонецЕсли;
	
	Если Не Объект.ИспользованиеЯчеекПриемка = 0 И Объект.ЯчейкиСправочноеРазмещениеПриемка Тогда
		Объект.ЯчейкиСправочноеРазмещениеПриемка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьСписокЯчеекССервераПриемкаПриИзменении(Элемент)
	
	Если Объект.ЗагружатьСписокЯчеекССервераПриемка Тогда
		Попытка Объект.ВыгрузкаЯчеекПриемка = 1; Исключение КонецПопытки;
		Элементы.ВыгрузкаЯчеекПриемка.Доступность = Ложь;
	Иначе
		Элементы.ВыгрузкаЯчеекПриемка.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеСерийниковПриемкаПриИзменении(Элемент)
	
	Элементы.УчитыватьСерийниковВЗаданииПриемка.ТолькоПросмотр = Не (Объект.ИспользоватьПриемку И Объект.ИспользованиеСерийниковПриемка <> 0);
	Элементы.УникальныеСерийныеНомераПриемка.ТолькоПросмотр = Не (Объект.ИспользоватьПриемку И Объект.ИспользованиеСерийниковПриемка <> 0);
	Элементы.СерНомНеПустойПриемка.ТолькоПросмотр = Не (Объект.ИспользоватьПриемку И Объект.ИспользованиеСерийниковПриемка <> 0);
	Элементы.ГруппировкаСерийПриемка.ТолькоПросмотр = Не (Объект.ИспользоватьПриемку И Объект.ИспользованиеСерийниковПриемка <> 0);
	
	Попытка Объект.УчитыватьСерийниковВЗаданииПриемка = Объект.УчитыватьСерийниковВЗаданииПриемка И Объект.ИспользоватьПриемку И Объект.ИспользованиеСерийниковПриемка <> 0; Исключение КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповаяРаботаПриИзменении(Элемент)
	
	УстановитьДоступностьОтсылатьГотовуюЗаписьНаСервер();
	
	ГрупповаяРабота = Объект.ГрупповаяРабота;
	
	Если Не ГрупповаяРабота Тогда
		Если Объект.ГрупповаяРаботаИнтервалОпроса <> 0 Тогда
			Объект.ГрупповаяРаботаИнтервалОпроса = 0;	
		КонецЕсли;
		
		Если Объект.ГрупповаяРаботаЗвуковоеОповещение Тогда
			Объект.ГрупповаяРаботаЗвуковоеОповещение = Ложь;	
		КонецЕсли; 
	КонецЕсли;
	
	Элементы.ГрупповаяРаботаИнтервалОпроса.Видимость = ГрупповаяРабота; 
	Элементы.ГрупповаяРаботаЗвуковоеОповещение.Видимость = ГрупповаяРабота;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводКоличестваПриемкаПриИзменении(Элемент)
	
	Объект.ПодтверждатьЭнтеромПриемка = Объект.РучнойВводКоличестваПриемка;
	Элементы.ПодтверждатьЭнтеромПриемка.ТолькоПросмотр = Объект.РучнойВводКоличестваПриемка;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводКоличестваПодборПриИзменении(Элемент)
	
	Объект.ПодтверждатьЭнтеромПодбор = Объект.РучнойВводКоличестваПодбор;
	Элементы.ПодтверждатьЭнтеромПодбор.ТолькоПросмотр = Объект.РучнойВводКоличестваПодбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкиСправочноеРазмещениеПриемкаПриИзменении(Элемент)
	
	Если Объект.ЯчейкиСправочноеРазмещениеПриемка Тогда
		Объект.ЗагружатьСписокЯчеекССервераПриемка = Истина;
		Объект.ИспользованиеЯчеекПриемка = 3; 
		Объект.ВыгрузкаЯчеекПриемка = 1;
	Иначе
		Объект.ИспользованиеЯчеекПриемка = 0;
		Объект.ЗагружатьСписокЯчеекССервераПриемка = Ложь; 
		Объект.ВыгрузкаЯчеекПриемка = 0;
	КонецЕсли;
	
	ПроверкаАдресногоХранения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковочныхЛистовПриемкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не Объект.ИспользоватьМаркировку Тогда //удаляю из выбора Набор(5)		
		МассивУдаляемых = Новый Массив;
		
		Попытка
			МассивУдаляемых.Добавить(Элемент.СписокВыбора[3].Значение); //в приемке набор находится 3 в списке, палета и короб отсутствуют
		Исключение
		КонецПопытки; 
		
		СписокВыбора = Элемент.СписокВыбора;
		
		Для каждого СтрокаМассива Из МассивУдаляемых Цикл
			НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(СтрокаМассива);
			Если НайденныйЭлемент <> Неопределено Тогда
				СписокВыбора.Удалить(НайденныйЭлемент);
			КонецЕсли;	
		КонецЦикла; 
	ИначеЕсли Элемент.СписокВыбора.НайтиПоЗначению(5) = Неопределено Тогда		
		Элемент.СписокВыбора.Добавить(5, "Набор");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВводаУпаковочногоЛистаПриемкаПриИзменении(Элемент)
	
	Если Объект.ПроверкаВводаУпаковочногоЛистаПриемка Тогда
		Объект.ОтсылатьГотовуюЗаписьНаСерверПриемка = Истина;
	КонецЕсли;
	
	Элементы.ОтсылатьГотовуюЗаписьНаСерверПриемка.Доступность = Не Объект.ПроверкаВводаУпаковочногоЛистаПриемка;

КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковочныхЛистовПриемкаПриИзменении(Элемент)
	
	Если Объект.ИспользованиеУпаковочныхЛистовПриемка = 0 Тогда	
		Элементы.ПроверкаВводаУпаковочногоЛистаПриемка.Доступность = Ложь;
	Иначе
		Элементы.ПроверкаВводаУпаковочногоЛистаПриемка.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ИспользованиеУпаковочныхЛистовПриемка = 5 Тогда
		Объект.МаркировкаВводМаркируемогоТовараБезКМ = 0;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяТабличнойЧастиНовойПодборПриИзменении(Элемент)
	
	ПроверитьДокументНаВозможностьАдресногоХранения();
	ПроверкаАдресногоХранения();
	
КонецПроцедуры

#КонецОбласти

#Область Маркировка

&НаКлиенте
Процедура ИспользоватьМаркировкуПриИзменении(Элемент)
	
	ПроверитьДоступностьНастроекМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьНастроекМаркировки()
	
	Если Объект.ИспользоватьМаркировку =  Истина Тогда
		
		Попытка
			Если Объект.ЕГАИС Тогда
				Объект.ЕГАИС = Ложь;
				СформироватьшаблонЕГАИС(Истина);
			КонецЕсли;	
		Исключение 
		КонецПопытки;	
		
		Элементы.МаркировкаСканироватьEAN.Доступность = Истина;
		Элементы.МаркировкаEANсоответствуетGTIN.Доступность = Истина;
		Элементы.МаркировкаДополнительныйПоискПоКМ.Доступность = Истина;
		Элементы.МаркировкаСоздаватьСправочникКМЕслиНеНайден.Доступность = Истина;
		
		Элементы.МаркировкаЗапретитьПодборНемаркируемыхТоваров.Доступность = Истина;
		Элементы.МаркировкаВводМаркируемогоТовараБезКМ.Доступность = Истина;
		Элементы.МаркировкаПривязыватьGTINКакШтрихкод.Доступность = Истина;		
		Элементы.МаркировкаОнлайнПроверкаВложенностиУпаковок.Доступность = Истина;
		Элементы.МаркировкаПроверкаБезСертификатаИС.Доступность = Истина;
		Элементы.МаркировкаЗапросВЦРПТ.Доступность = Истина;
		Элементы.МаркировкаКоличествоЕдиницВУпаковкеПриАгрегации.Доступность = Истина;
		Элементы.МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки.Доступность = Истина;
		Элементы.МаркировкаЗапретитьПовторнуюАгрегациюКМ.Доступность = Истина;
		Элементы.ИсточникСерии.Доступность = Истина;	
		Элементы.МаркировкаВыгружатьРоботом.Доступность = Истина;
		Элементы.МаркировкаВыгружатьРоботом.Видимость = Истина;
		
		Элементы.МаркировкаМетодПроверкиКМ.Доступность = Истина;
		Элементы.МаркировкаПроверкаВладелькаКМ.Доступность = Истина;
		Элементы.МаркировкаПроверкаСтатусаКМ.Доступность = Истина;
		Элементы.МаркировкаРазрешенныеСтатусыКМ.Доступность = Истина;
		Элементы.МаркировкаЗаписыватьПолныйКМ.Доступность = Истина;
		Элементы.ЗавершатьПодборКМВДокументе.Доступность = Истина;
		Элементы.СоздаватьДокументИСМП.Доступность = Истина;
		Элементы.ПерезаписатьХешУпаковок.Доступность = Истина;
		Элементы.ПроверкаВложенностиУпаковок.Доступность = Истина;
		Элементы.МаркировкаДетализацияСтруктурыХранения.Доступность = Истина;
		Элементы.МаркировкаНеЗаписыватьНулевойМРЦ.Доступность = Истина;
		Элементы.МаркировкаРежимОСУ.Доступность = Истина;
		
		Элементы.ОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость = Ложь;
		Если Объект.ОткрыватьДокументыПослеЗагрузкиБезЗаписи Тогда
			Попытка Объект.ОткрыватьДокументыПослеЗагрузкиБезЗаписи = Ложь; Исключение КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		Элементы.МаркировкаСканироватьEAN.Доступность = Ложь;
		Элементы.МаркировкаEANсоответствуетGTIN.Доступность = Ложь;
		Элементы.МаркировкаДополнительныйПоискПоКМ.Доступность = Ложь;
		Элементы.МаркировкаСоздаватьСправочникКМЕслиНеНайден.Доступность = Ложь;
		Элементы.МаркировкаЗапретитьПодборНемаркируемыхТоваров.Доступность = Ложь;
		Элементы.МаркировкаВводМаркируемогоТовараБезКМ.Доступность = Ложь;
		Элементы.МаркировкаПривязыватьGTINКакШтрихкод.Доступность = Ложь;		
		Элементы.МаркировкаОнлайнПроверкаВложенностиУпаковок.Доступность = Ложь;
		Элементы.МаркировкаПроверкаБезСертификатаИС.Доступность = Ложь;
		Элементы.МаркировкаЗапросВЦРПТ.Доступность = Ложь;
		Элементы.МаркировкаКоличествоЕдиницВУпаковкеПриАгрегации.Доступность = Ложь;
		Элементы.МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки.Доступность = Ложь;
		Элементы.МаркировкаЗапретитьПовторнуюАгрегациюКМ.Доступность = Ложь;
		Элементы.ИсточникСерии.Доступность = Ложь;	
		Элементы.МаркировкаВыгружатьРоботом.Доступность = Ложь;
		Элементы.МаркировкаВыгружатьРоботом.Видимость = Ложь;
		Элементы.МаркировкаОчищатьПолныеКМ.Видимость = Ложь;
		
		Элементы.МаркировкаМетодПроверкиКМ.Доступность = Ложь;
		Элементы.МаркировкаПроверкаВладелькаКМ.Доступность = Ложь;
		Элементы.МаркировкаПроверкаСтатусаКМ.Доступность = Ложь;
		Элементы.МаркировкаРазрешенныеСтатусыКМ.Доступность = Ложь;
		Элементы.МаркировкаЗаписыватьПолныйКМ.Доступность = Ложь;
		Элементы.ЗавершатьПодборКМВДокументе.Доступность = Ложь;
		Элементы.СоздаватьДокументИСМП.Доступность = Ложь;
		Элементы.ПерезаписатьХешУпаковок.Доступность = Ложь;
		Элементы.ПроверкаВложенностиУпаковок.Доступность = Ложь;
		Элементы.МаркировкаДетализацияСтруктурыХранения.Доступность = Ложь;
		Элементы.МаркировкаНеЗаписыватьНулевойМРЦ.Доступность = Ложь;
		Элементы.МаркировкаРежимОСУ.Доступность = Ложь;
		
		Если Не Объект.ОбрабатыватьРоботом И Не Объект.ПроводитьРоботом И Не Объект.ИспользоватьМаркировку И Не Объект.ИспользоватьГрупповойДокумент Тогда
			Элементы.ОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость = Истина;
		КонецЕсли;
		
		Если Объект.МаркировкаСканироватьEAN <> 0 Тогда
			Попытка Объект.МаркировкаСканироватьEAN = 0; Исключение КонецПопытки;
		КонецЕсли;
		
		Если Объект.МаркировкаEANсоответствуетGTIN Тогда 
			Попытка Объект.МаркировкаEANсоответствуетGTIN = Ложь; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаДополнительныйПоискПоКМ Тогда 
			Попытка Объект.МаркировкаДополнительныйПоискПоКМ = Ложь; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаСоздаватьСправочникКМЕслиНеНайден Тогда
			Попытка Объект.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Ложь; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаЗапретитьПодборНемаркируемыхТоваров Тогда
			Попытка Объект.МаркировкаЗапретитьПодборНемаркируемыхТоваров = Ложь; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаВводМаркируемогоТовараБезКМ <> 0 Тогда
			Попытка Объект.МаркировкаВводМаркируемогоТовараБезКМ = 0; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаЗапретитьПодборНемаркируемыхТоваров Тогда
			Попытка Объект.МаркировкаПривязыватьGTINКакШтрихкод = Ложь; Исключение КонецПопытки	
		КонецЕсли;
		
		Если Объект.МаркировкаПроверкаБезСертификатаИС Тогда
			Попытка Объект.МаркировкаПроверкаБезСертификатаИС = Ложь; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаЗапросВЦРПТ Тогда
			Попытка Объект.МаркировкаЗапросВЦРПТ = Ложь; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаКоличествоЕдиницВУпаковкеПриАгрегации <> 0 Тогда
			Попытка Объект.МаркировкаКоличествоЕдиницВУпаковкеПриАгрегации = 0; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки Тогда
			Попытка Объект.МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки = Ложь; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаЗапретитьПовторнуюАгрегациюКМ Тогда
			Попытка Объект.МаркировкаЗапретитьПовторнуюАгрегациюКМ = Ложь; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.ИсточникСерии = 2 Тогда
			Попытка Объект.ИсточникСерии = 0; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаВыгружатьРоботом Тогда
			Попытка Объект.МаркировкаВыгружатьРоботом = Ложь; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаМетодПроверкиКМ <> 0 Тогда
			Попытка Объект.МаркировкаМетодПроверкиКМ = 0; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаПроверкаВладельцаКМ <> 0 Тогда
			Попытка Объект.МаркировкаПроверкаВладельцаКМ = 0; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаПроверкаСтатусаКМ <> 0 Тогда
			Попытка Объект.МаркировкаПроверкаСтатусаКМ = 0; Исключение КонецПопытки
		КонецЕсли;
		
		Если Объект.МаркировкаОчищатьПолныеКМ <> 0 Тогда
			Попытка Объект.МаркировкаОчищатьПолныеКМ = 0; Исключение КонецПопытки	
		КонецЕсли; 
		
		Если Объект.СоздаватьДокументИСМП Тогда
			Попытка Объект.СоздаватьДокументИСМП = Ложь; Исключение КонецПопытки	
		КонецЕсли;
		
		Если Объект.МаркировкаЗавершатьПодборКМВДокументе Тогда
			Попытка Объект.МаркировкаЗавершатьПодборКМВДокументе = Ложь; Исключение КонецПопытки	
		КонецЕсли;
		
		Если Объект.МаркировкаЗаписыватьПолныйКМ Тогда
			Попытка Объект.МаркировкаЗаписыватьПолныйКМ = Ложь; Исключение КонецПопытки	
		КонецЕсли;
		
		Если Объект.ИспользованиеУпаковочныхЛистовПодбор = 3 Или Объект.ИспользованиеУпаковочныхЛистовПодбор = 4 Или Объект.ИспользованиеУпаковочныхЛистовПодбор = 5 Тогда
			Объект.ИспользованиеУпаковочныхЛистовПодбор = 0;		
		КонецЕсли;
		
		Если Объект.ИспользованиеУпаковочныхЛистовПриемка = 5 Тогда
			Объект.ИспользованиеУпаковочныхЛистовПриемка = 0;		
		КонецЕсли;
		
		Если Объект.МаркировкаПерезаписатьХешУпаковок Тогда
			Попытка Объект.МаркировкаПерезаписатьХешУпаковок = Ложь; Исключение КонецПопытки	
		КонецЕсли;
		
		Если Объект.МаркировкаНеЗаписыватьНулевойМРЦ Тогда
			Попытка Объект.МаркировкаНеЗаписыватьНулевойМРЦ = Ложь; Исключение КонецПопытки	
		КонецЕсли;
		
		Если Объект.ПроверкаВложенностиУпаковок <> 0 И Не Объект.ЕГАИС Тогда
			Объект.ПроверкаВложенностиУпаковок = 0;		
		КонецЕсли;
		
		Если Объект.МаркировкаДетализацияСтруктурыХранения <> 0 Тогда
			Объект.МаркировкаДетализацияСтруктурыХранения = 0;		
		КонецЕсли;
		
		Если Объект.МаркировкаРежимОСУ = 0 Тогда
			Попытка Объект.МаркировкаРежимОСУ = 1; Исключение КонецПопытки	
		КонецЕсли;
		
	КонецЕсли;	
	
	МаркировкаМетодПроверкиКМПриИзменении(Элементы.МаркировкаМетодПроверкиКМ);
	МаркировкаЗаписыватьПолныйКМПриИзменении("");
	ПроверитьДоступностьМаркировкаEANсоответствуетGTIN();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьМаркировкаEANсоответствуетGTIN()
	
	Если Объект.МаркировкаСканироватьEAN <> 0 Тогда
		Элементы.МаркировкаEANсоответствуетGTIN.Доступность = Истина;
		Элементы.МаркировкаИгнорироватьНесоответствиеТовараПоЕАNиКМ.Доступность = Истина;
	Иначе
		Элементы.МаркировкаEANсоответствуетGTIN.Доступность = Ложь;
		Элементы.МаркировкаИгнорироватьНесоответствиеТовараПоЕАNиКМ.Доступность = Ложь;
		
		Попытка 
			Если Объект.МаркировкаEANсоответствуетGTIN Тогда 
				Объект.МаркировкаEANсоответствуетGTIN = Ложь;
			КонецЕсли;	
		Исключение 
		КонецПопытки;
		
		Попытка 
			Если Объект.МаркировкаИгнорироватьНесоответствиеТовараПоЕАNиКМ Тогда 
				Объект.МаркировкаИгнорироватьНесоответствиеТовараПоЕАNиКМ = Ложь;
			КонецЕсли;	
		Исключение 
		КонецПопытки;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаСканироватьEANПриИзменении(Элемент)
	ПроверитьДоступностьМаркировкаEANсоответствуетGTIN();
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаМетодПроверкиКМПриИзменении(Элемент)
	
	Если Объект.МаркировкаМетодПроверкиКМ <> 0 Тогда		
		Элементы.МаркировкаПроверкаВладелькаКМ.Видимость = Истина;
		Элементы.МаркировкаПроверкаСтатусаКМ.Видимость = Истина;		
	Иначе
		Элементы.МаркировкаПроверкаВладелькаКМ.Видимость = Ложь;
		Элементы.МаркировкаПроверкаСтатусаКМ.Видимость = Ложь;
		
		Если Объект.МаркировкаПроверкаВладельцаКМ <> 0 Тогда
			Объект.МаркировкаПроверкаВладельцаКМ = 0;
		КонецЕсли;
		
		Если Объект.МаркировкаПроверкаСтатусаКМ <> 0 Тогда
			Объект.МаркировкаПроверкаСтатусаКМ = 0;
		КонецЕсли;					
	КонецЕсли;
	
	МаркировкаПроверкаСтатусаКМПриИзменении(Элементы.МаркировкаПроверкаСтатусаКМ);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПроверкаСтатусаКМПриИзменении(Элемент)
	
	Если Объект.МаркировкаПроверкаСтатусаКМ <> 0 Тогда		
		Элементы.МаркировкаРазрешенныеСтатусыКМ.Видимость = Истина;
		МаркировкаРазрешенныеСтатусыКМПриИзменении(Элемент);
	Иначе
		Элементы.МаркировкаРазрешенныеСтатусыКМ.Видимость = Ложь;
		
		Если Объект.МаркировкаРазрешенныеСтатусыКМ <> "" Тогда
			Объект.МаркировкаРазрешенныеСтатусыКМ = "";
		КонецЕсли;   
		
	КонецЕсли;
	
	ЗагрузитьСтатусыКМ();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаРазрешенныеСтатусыКМПриИзменении(Элемент)
	
	МассивСтатусов = ""; 
	Для каждого строка Из Таблица_МаркировкаРазрешенныеСтатусыКМ Цикл
		Если строка.Пометка Тогда
			МассивСтатусов = МассивСтатусов + строка.Значение + ",";
		КонецЕсли;	
	КонецЦикла;
	МассивСтатусов = ?(Прав(МассивСтатусов,1) = ",", Лев(МассивСтатусов, СтрДлина(МассивСтатусов) - 1), МассивСтатусов);
	
	Объект.МаркировкаРазрешенныеСтатусыКМ = МассивСтатусов;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаРазрешенныеСтатусыКМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаРазрешенныеСтатусыКМПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтатусыКМ() 
	
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Очистить();
	
	Если Объект.МаркировкаМетодПроверкиКМ = 1 Тогда
		Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(0, "Получен");
		Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(1, "Нанесен");
		Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(2, "В обороте");
		Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(4, "Выведен из оборота");
		Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(6, "Возвращен в оборот");
		Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(7, "Расформирован");
		Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(16, "Списан");	
	КонецЕсли;
	
	Если Объект.МаркировкаРазрешенныеСтатусыКМ <> "" Тогда 
		МассивСохраненныхСтатусовКМ = ДатаМобайл_ОбщийМодуль.РазложитьСтрокуВМассивЧисловыхПодстрокДМ(Объект.МаркировкаРазрешенныеСтатусыКМ);
		Для каждого строка Из Таблица_МаркировкаРазрешенныеСтатусыКМ Цикл
			Если МассивСохраненныхСтатусовКМ.Найти(строка.Значение) <> Неопределено Тогда
				строка.Пометка = Истина;
			Иначе
				строка.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаЗаписыватьПолныйКМПриИзменении(Элемент)
	Элементы.МаркировкаОчищатьПолныеКМ.Видимость = Объект.МаркировкаЗаписыватьПолныйКМ;
	
	Если Не Объект.МаркировкаЗаписыватьПолныйКМ И Объект.МаркировкаОчищатьПолныеКМ <> 0 Тогда
		Попытка Объект.МаркировкаОчищатьПолныеКМ = 0; Исключение КонецПопытки	
	КонецЕсли; 	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

&НаСервере
Функция СобратьВидыДокументовЕГАИС(Список)
	
	МетаданныеДокументы = Метаданные.Документы;
	
	Для каждого МетаДок Из МетаданныеДокументы Цикл
		Если ДокументПодходитЕГАИС(МетаДок) Тогда
			Список.Добавить(МетаДок.Имя,МетаДок.Синоним);
		КонецЕсли;	
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ДокументПодходитЕГАИС(МетаДок)
	
	ЕстьАлкКлассификатор = Метаданные.Справочники.Найти("алкКлассификаторАлкогольнойПродукцииЕГАИС") <> Неопределено;
	
	Для каждого МетаТЧ Из МетаДок.ТабличныеЧасти Цикл
		Для каждого МетаРеквизитТЧ Из МетаТЧ.Реквизиты Цикл
			Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда
				Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС")) Или
					МетаРеквизитТЧ.Имя = "КодАкцизнойМарки"	Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда 
				Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.астНоменклатураЕГАИС")) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьАлкКлассификатор Тогда
				Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.алкКлассификаторАлкогольнойПродукцииЕГАИС")) Тогда
					Возврат Истина;
				КонецЕсли;	
			КонецЕсли; 
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СформироватьшаблонЕГАИС(ИЗОткрытия = Ложь)
	
	ПризнакЕГАИС = Не Объект.ЕГАИС;	
	Элементы.ВидДокумента.СписокВыбора.Очистить();
	
	Если ПризнакЕГАИС Тогда
		СобратьВидыДокументов(Элементы.ВидДокумента.СписокВыбора);
		
		Элементы.СопоставлениеЕГАИС.Доступность = Ложь; 		   
		Элементы.ЕГАИСПонижатьДетализациюПроверкиТТНДоБутылок.Доступность = Ложь;
		Элементы.ПроверкаВложенностиУпаковокЕгаис.Доступность = Ложь;
		
		Попытка Объект.СопоставлениеЕГАИС = Ложь; Исключение КонецПопытки;	
		Попытка Объект.ЕГАИСПонижатьДетализациюПроверкиТТНДоБутылок = Ложь; Исключение КонецПопытки;
		
		Если Объект.ПроверкаВложенностиУпаковок <> 0 И Не Объект.ИспользоватьМаркировку Тогда
			Объект.ПроверкаВложенностиУпаковок = 0;		
		КонецЕсли;
	Иначе
		СобратьВидыДокументовЕГАИС(Элементы.ВидДокумента.СписокВыбора);
		
		Элементы.СопоставлениеЕГАИС.Доступность = Истина;
		Элементы.ЕГАИСПонижатьДетализациюПроверкиТТНДоБутылок.Доступность = Истина;		
		Элементы.ПроверкаВложенностиУпаковокЕгаис.Доступность = Истина;
	КонецЕсли;
	
	Если Не ИЗОткрытия Тогда
		
		Попытка Объект.ВидДокумента = ?(Элементы.ВидДокумента.СписокВыбора.Количество() > 0, Элементы.ВидДокумента.СписокВыбора[0].Значение, ""); Исключение КонецПопытки;
		Наименование = ?(ПризнакЕГАИС, "", "[ЕГАИС] ") + ?(Элементы.ВидДокумента.СписокВыбора.Количество() > 0, Элементы.ВидДокумента.СписокВыбора[0].Представление, "");
		
		Попытка Объект.ИспользоватьПодбор = Истина; Исключение КонецПопытки;
		Попытка Объект.ИмяТабличнойЧастиНовойПодбор = ""; Исключение КонецПопытки;	
		Попытка Объект.ИспользованиеСерийниковПодбор = 0; Исключение КонецПопытки;
		Попытка Объект.УчитыватьСерийниковВЗаданииПодбор = Ложь; Исключение КонецПопытки;
		Попытка Объект.ИспользованиеУпаковочныхЛистовПодбор = 0; Исключение КонецПопытки;
		Попытка Объект.ИспользованиеЯчеекПодбор = 0; Исключение КонецПопытки;
		Попытка Объект.УчитыватьЯчеекВЗаданииПодбор = Ложь; Исключение КонецПопытки;
		Попытка Объект.ВыгрузкаЯчеекПодбор = 0; Исключение КонецПопытки;
		Попытка Объект.ВидДокументаНового = ""; Исключение КонецПопытки;
		Попытка Объект.ИспользоватьПриемку = Ложь; Исключение КонецПопытки;
		Попытка Объект.ТабличнуюЧастьПриЗагрузкеПодбор = 1; Исключение КонецПопытки;
		
	КонецЕсли;	
	
	Элементы.ИмяТабличнойЧастиНовойПодбор.Доступность = ПризнакЕГАИС;
	Элементы.ВидДокументаНового.Доступность = ПризнакЕГАИС;		
	Элементы.грРазмещение.Доступность = ПризнакЕГАИС;
	Элементы.ГрМаркировка.Доступность = ПризнакЕГАИС;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеЕГАИСПриИзменении(Элемент)
	
	Если Объект.СопоставлениеЕГАИС Тогда
				
	Иначе
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕГАИСПриИзменении(Элемент)
	
	ИЗОткрытия = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаИзмененияШаблонаЕГАИС",
	ЭтотОбъект, Объект);		
	
	Если ИЗОткрытия Тогда
		СформироватьШаблонЕГАИС(ИзОткрытия);	
	Иначе
		ПоказатьВопрос(Оповещение,
		"Шаблон будет изменен. Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0, // таймаут в секундах
		КодВозвратаДиалога.Да, // (необ.) кнопка по умолчанию
		"Шаблон" // (необ.) заголовок
		);
	КонецЕсли;
	
	Об = Объект ;
	
	Если Об.ЕГАИС = Истина Тогда
		Об.ИспользоватьМаркировку = Ложь;
		ПроверитьДоступностьНастроекМаркировки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаИзмененияШаблонаЕГАИС(Результат, Объект) Экспорт		
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьШаблонЕГАИС(Ложь);
	Иначе
		Попытка Объект.ЕГАИС = Не Объект.ЕГАИС; Исключение КонецПопытки;
		Попытка Объект.ВидДокумента = Элементы.ВидДокумента.СписокВыбора[0].Значение; Исключение КонецПопытки; 
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеФормы

&НаКлиенте
Процедура СоздатьДополнительнуюФорму(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Шаблон не записан! Требуется сохранить изменени.!", 2);
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьВозможностьВводаДопФормы(1) Тогда
		ПоказатьПредупреждение(, "Уже введено максимальное количество атрибутов!", 2);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Шаблон", Объект.Ссылка);
	ПараметрыЗаписи.Вставить("РеквизитИзШапки", 1);
	ОткрытьФорму("РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов.Форма.ФормаЗаписи", ПараметрыЗаписи,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьДополнительнуюФормуПозже(Команда)
	ДатаМобайл_ОбщийМодуль.ИзменитьПорядок(Элементы.ДополнительныеФормы.ТекущаяСтрока, Истина);
	Элементы.ДополнительныеФормы.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьДополнительнуюФормуРаньше(Команда)
	ДатаМобайл_ОбщийМодуль.ИзменитьПорядок(Элементы.ДополнительныеФормы.ТекущаяСтрока);
	Элементы.ДополнительныеФормы.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДополнительнуюФормуСтроки(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Шаблон не записан! Требуется сохранить изменени.!", 2);
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьВозможностьВводаДопФормы(0) Тогда
		ПоказатьПредупреждение(, "Уже введено максимальное количество атрибутов!", 2);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Шаблон", Объект.Ссылка);
	ПараметрыЗаписи.Вставить("РеквизитИзШапки", 0);
	ПараметрыЗаписи.Вставить("ИспользоватьПодбор", Объект.ИспользоватьПодбор);
	ПараметрыЗаписи.Вставить("ИспользоватьПриемку", Объект.ИспользоватьПриемку);
	ОткрытьФорму("РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов.Форма.ФормаЗаписи", ПараметрыЗаписи,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеФормыСтрокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ДополнительныеФормыСтрок.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Шаблон", Объект.Ссылка);
	ПараметрыЗаписи.Вставить("РеквизитИзШапки", 0);
	ПараметрыЗаписи.Вставить("ИспользоватьПодбор", Объект.ИспользоватьПодбор);
	ПараметрыЗаписи.Вставить("ИспользоватьПриемку", Объект.ИспользоватьПриемку);
	ПараметрыЗаписи.Вставить("Ключ", ТекСтрока);
	ОткрытьФорму("РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов.Форма.ФормаЗаписи", ПараметрыЗаписи,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьДополнительнуюФормуСтрокиПозже(Команда)
	ДатаМобайл_ОбщийМодуль.ИзменитьПорядок(Элементы.ДополнительныеФормыСтрок.ТекущаяСтрока, Истина);
	Элементы.ДополнительныеФормыСтрок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьДополнительнуюФормуСтрокиРаньше(Команда)
	ДатаМобайл_ОбщийМодуль.ИзменитьПорядок(Элементы.ДополнительныеФормыСтрок.ТекущаяСтрока);
	Элементы.ДополнительныеФормыСтрок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеФормыПослеУдаления(Элемент)
	ДатаМобайл_ОбщийМодуль.ДополнительныеШагиПослеУдаления(1);
	Элементы.ДополнительныеФормы.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеФормыСтрокПослеУдаления(Элемент)
	ДатаМобайл_ОбщийМодуль.ДополнительныеШагиПослеУдаления(0);
	Элементы.ДополнительныеФормыСтрок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьДопПараметровДопФорм()
	
	ИспользоватьДопФормы = Объект.ИспользоватьДопФормы;
	
	Элементы.ДополнительныеФормыГрупповойВвод.Доступность = ИспользоватьДопФормы;
	Элементы.ДополнительныеФормыОнлайнОбновлениеСправочника.Доступность = ИспользоватьДопФормы;
	Элементы.ДополнительныеФормы.Доступность = ИспользоватьДопФормы;
	Элементы.ДополнительныеФормыСтрок.Доступность = ИспользоватьДопФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДопФормыПриИзменении(Элемент)
	
	ИспользоватьДопФормы = Объект.ИспользоватьДопФормы;
	
	Если Не ИспользоватьДопФормы Тогда
		Объект.ДополнительныеФормыГрупповойВвод = Ложь;	
		Объект.ДополнительныеФормыОнлайнОбновлениеСправочника = Ложь;
	Иначе
		Объект.ДополнительныеФормыГрупповойВвод = Истина;
	КонецЕсли;
	
	ДоступностьДопПараметровДопФорм(); 
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьВводаДопФормы(ПараметрИзШапки)	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СвязиДопФорм.ДополнительнаяФорма) КАК КолФорм
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК СвязиДопФорм
	|ГДЕ
	|	СвязиДопФорм.Шаблон = &Шаблон
	|	И СвязиДопФорм.РеквизитИзШапки = &ИзШапки");
	
	Запрос.УстановитьПараметр("Шаблон", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИзШапки", ПараметрИзШапки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.КолФорм >= 10 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДоступностьДопФормыСтрокиДокумента(ИспПодбор, ИспРазмещение)
	
	Элементы.ГруппаДопФормыСтроки.Доступность = ИспПодбор Или ИспРазмещение;
	
КонецПроцедуры

#КонецОбласти

#Область АвтовыгрузкаАвтозагрузка

&НаСервере
Процедура СформироватьТекстУсловияВыгрузкиСервер()
	
	Объект.УсловиеВыгрузки = "";
	Сч = 0;
	
	Для каждого СтрокаУсловия Из Объект.ПараметрыУсловияВыгрузки Цикл
		
		Если Сч > 0 Тогда
			Объект.УсловиеВыгрузки = Символы.ПС + "И" + Символы.ПС + Объект.УсловиеВыгрузки;	
		КонецЕсли; 
		
		Условие 		= СтрокаУсловия.Условие;
		ИмяПараметра    = СтрокаУсловия.ИмяПараметра;
		
		Операция = ВычислитьОперациюСравнения(Условие);
		
		Если Условие = 7 Или Условие = 8 Тогда
			ОперацияПараметр = Операция + "(&" + ИмяПараметра + ")";
		Иначе
			ОперацияПараметр = Операция + "&" + ИмяПараметра;
		КонецЕсли; 
		
		Объект.УсловиеВыгрузки = "Документ1с." + ИмяПараметра + ОперацияПараметр + Объект.УсловиеВыгрузки;
		
		Сч = Сч + 1;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОПереключенииНаПростойРежим(ВыбЗначение, ДопПараметры) Экспорт
	Если Не ВыбЗначение = КодВозвратаДиалога.Да Тогда
		Объект.ТипВводаУсловийАвтовыгрузки = 2;
		Возврат; 
	КонецЕсли; 
	
	Элементы.АвтовыгрузкаУсловия.ТекущаяСтраница = Элементы.УпрощенныйВвод;
	Объект.ПараметрыУсловияВыгрузки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ТипВводаУсловийАвтовыгрузкиПриИзменении(Элемент)
	Если Объект.ТипВводаУсловийАвтовыгрузки = 1 Тогда 
		Если Объект.ПараметрыУсловияВыгрузки.Количество() = 0 Тогда
			Элементы.АвтовыгрузкаУсловия.ТекущаяСтраница = Элементы.УпрощенныйВвод;
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеВопросаОПереключенииНаПростойРежим", ЭтаФорма);
			ПоказатьВопрос(Оповещение, "Переключиться на простой режим ввода условий? Все параметры условий будут очищены.", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		Элементы.АвтовыгрузкаУсловия.ТекущаяСтраница = Элементы.РасширенныйВвод;
		СформироватьТекстУсловияВыгрузкиСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыеЗначенияРеквизитовИмяРеквизитаПриИзменении(Элемент)
	
	ТекДанныеСтроки = Элементы.НовыеЗначенияРеквизитов.ТекущиеДанные;
		
	Попытка 
		ТекДанныеСтроки.ЗначениеРеквизита = Неопределено;
		Если ЗначениеЗаполнено(ТекДанныеСтроки.ИмяРеквизита) И Не ТекДанныеСтроки.ИмяРеквизита = "Помещение" Тогда 
			ТипТекущегоРеквизита = ПолучитьТипРевизита(Объект.ВидДокумента, ТекДанныеСтроки.ИмяРеквизита);
			Если ТипТекущегоРеквизита <> Неопределено Тогда
				Элементы.НовыеЗначенияРеквизитов.ПодчиненныеЭлементы.НовыеЗначенияРеквизитовЗначениеРеквизита.ОграничениеТипа = ТипТекущегоРеквизита;
			КонецЕсли;
		Иначе
			Элементы.НовыеЗначенияРеквизитов.ПодчиненныеЭлементы.НовыеЗначенияРеквизитовЗначениеРеквизита.ОграничениеТипа = Неопределено;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыеЗначенияРеквизитовЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанныеСтроки = Элементы.НовыеЗначенияРеквизитов.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекДанныеСтроки.ИмяРеквизита) Тогда
		Сообщить("Выберите имя реквизита!");	
	Иначе
		Если ТекДанныеСтроки.ИмяРеквизита = "Помещение" Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗакрытиеВыбораПомещения", ЭтотОбъект), ПолучитьСписокПомещений(), Элементы.НовыеЗначенияРеквизитов, 0);
		Иначе	
			ТипТекущегоРеквизита = ПолучитьТипРевизита(Объект.ВидДокумента, ТекДанныеСтроки.ИмяРеквизита);
			Если ТипТекущегоРеквизита <> Неопределено Тогда
				Элементы.НовыеЗначенияРеквизитов.ПодчиненныеЭлементы.НовыеЗначенияРеквизитовЗначениеРеквизита.ОграничениеТипа = ТипТекущегоРеквизита;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипРевизита(ВидДокумента, ИмяРеквизита)
	
	ТекущийВидДокумента = ВидДокумента;
	Если ТекущийВидДокумента = "ЗаданиеНаПеревозку" Тогда		
		ТекущийВидДокумента = "ЗаказКлиента";
	КонецЕсли;	
	
	Попытка Возврат Метаданные.Документы.Найти(ТекущийВидДокумента).Реквизиты.Найти(ИмяРеквизита).Тип; Исключение КонецПопытки;	
	
КонецФункции

&Наклиенте
Процедура ЗакрытиеВыбораПомещения(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда	
		Элементы.НовыеЗначенияРеквизитов.ТекущиеДанные.ЗначениеРеквизита = Результат.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыеЗначенияРеквизитовНовогоИмяРеквизитаПриИзменении(Элемент)
	
	ТекДанныеСтроки = Элементы.НовыеЗначенияРеквизитовНового.ТекущиеДанные;
	
	Попытка 
		ТекДанныеСтроки.ЗначениеРеквизита = Неопределено;
		Если ЗначениеЗаполнено(ТекДанныеСтроки.ИмяРеквизита) И Не ТекДанныеСтроки.ИмяРеквизита = "Помещение" Тогда 
			ТипТекущегоРеквизита = ПолучитьТипРевизита(Объект.ВидДокументаНового, ТекДанныеСтроки.ИмяРеквизита);
			Если ТипТекущегоРеквизита <> Неопределено Тогда
				Элементы.НовыеЗначенияРеквизитовНового.ПодчиненныеЭлементы.НовыеЗначенияРеквизитовНовогоЗначениеРеквизита.ОграничениеТипа = ТипТекущегоРеквизита;
			КонецЕсли;
		Иначе
			Элементы.НовыеЗначенияРеквизитовНового.ПодчиненныеЭлементы.НовыеЗначенияРеквизитовНовогоЗначениеРеквизита.ОграничениеТипа = Неопределено;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыеЗначенияРеквизитовНовогоЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанныеСтроки = Элементы.НовыеЗначенияРеквизитовНового.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекДанныеСтроки.ИмяРеквизита) Тогда
		Сообщить("Выберите имя реквизита!");	
	Иначе
		Если ТекДанныеСтроки.ИмяРеквизита = "Помещение" Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗакрытиеВыбораНовогоПомещения", ЭтотОбъект), ПолучитьСписокПомещений(), Элементы.НовыеЗначенияРеквизитовНового, 0);
		Иначе	
			ТипТекущегоРеквизита = ПолучитьТипРевизита(Объект.ВидДокументаНового, ТекДанныеСтроки.ИмяРеквизита);
			Если ТипТекущегоРеквизита <> Неопределено Тогда
				Элементы.НовыеЗначенияРеквизитовНового.ПодчиненныеЭлементы.НовыеЗначенияРеквизитовНовогоЗначениеРеквизита.ОграничениеТипа = ТипТекущегоРеквизита;
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&Наклиенте
Процедура ЗакрытиеВыбораНовогоПомещения(Результат, ДопПараметры) Экспорт
	
	Элементы.НовыеЗначенияРеквизитовНового.ТекущиеДанные.ЗначениеРеквизита = Результат.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыУсловияВыгрузкиЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Элементы.ПараметрыУсловияВыгрузки.ТекущиеДанные.ЗначениеПараметра) = Тип("СправочникСсылка.СкладскиеПомещения") Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗакрытиеВыбораПомещенияДляВыгрузки", ЭтотОбъект), ПолучитьСписокПомещений(), Элементы.ПараметрыУсловияВыгрузки, 0);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПомещений() 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СкладскиеПомещения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СкладскиеПомещения КАК СкладскиеПомещения");
	
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокВозврата;
	
КонецФункции

&Наклиенте
Процедура ЗакрытиеВыбораПомещенияДляВыгрузки(Результат, ДопПараметры) Экспорт
	
	Элементы.ПараметрыУсловияВыгрузки.ТекущиеДанные.ЗначениеПараметра = Результат.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьПараметры(Команда)
	лТекст = СтрЗаменить(Объект.УсловиеВыгрузки, "&", " &");
	лТекст = СтрЗаменить(лТекст, " ", Символы.ПС);
	Попытка Объект.ПараметрыУсловияВыгрузки.Очистить(); Исключение КонецПопытки;
	Для ш = 1 По СтрЧислоСтрок(лТекст) Цикл
		Если Лев(СтрПолучитьСтроку(лТекст, ш), 1) = "&" Тогда
			новСтр = Объект.ПараметрыУсловияВыгрузки.Добавить();
			ИмяПараметра = Сред(СтрПолучитьСтроку(лТекст, ш), 2);
			ИмяПараметра = СтрЗаменить(ИмяПараметра, ",", "");
			ИмяПараметра = СтрЗаменить(ИмяПараметра, ")", "");
			новСтр.ИмяПараметра = ИмяПараметра;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьРоботомПриИзменении(Элемент)
	
	ДоступностьВыгружатьВсеДокументыШаблона();
	Если Не Объект.ВыгружатьРоботом И Объект.ВыгружатьВсеДокументыШаблона Тогда
		Объект.ВыгружатьВсеДокументыШаблона = Объект.ВыгружатьРоботом;
	КонецЕсли;
	
	Если Не Объект.ВыгружатьРоботом И Объект.МаркировкаВыгружатьРоботом Тогда
		Объект.МаркировкаВыгружатьРоботом = Объект.ВыгружатьРоботом;
	КонецЕсли;
	
	Элементы.МаркировкаВыгружатьРоботом.Доступность = Объект.ВыгружатьРоботом;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбрабатыватьРоботомПриИзменении(Элемент)
	
	Если Объект.ОбрабатыватьРоботом Тогда	
		Элементы.ОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость = Ложь;
		Если Объект.ОткрыватьДокументыПослеЗагрузкиБезЗаписи Тогда
			Попытка Объект.ОткрыватьДокументыПослеЗагрузкиБезЗаписи = Ложь; Исключение КонецПопытки;
		КонецЕсли;		
	Иначе
		Если Не Объект.ОбрабатыватьРоботом И Не Объект.ПроводитьРоботом И Не Объект.ИспользоватьМаркировку И Не Объект.ИспользоватьГрупповойДокумент Тогда
			Элементы.ОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводитьРоботомПриИзменении(Элемент)
	
	Если Объект.ПроводитьРоботом Тогда	
		Элементы.ОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость = Ложь;
		Если Объект.ОткрыватьДокументыПослеЗагрузкиБезЗаписи Тогда
			Попытка Объект.ОткрыватьДокументыПослеЗагрузкиБезЗаписи = Ложь; Исключение КонецПопытки;
		КонецЕсли;		
	Иначе
		Если Не Объект.ОбрабатыватьРоботом И Не Объект.ПроводитьРоботом И Не Объект.ИспользоватьМаркировку И Не Объект.ИспользоватьГрупповойДокумент Тогда
			Элементы.ОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьОперациюСравнения(Условие)
	
	//Условия
	//(0, "Равно")
	//(1, "Не Равно")
	//(3, "Больше")
	//(4, "Меньше")
	//(5, "Больше или Равно")
	//(6, "Меньше или Равно")
	//(7, "В Списке")
	//(8, "Не В Списке")
	
	Если Условие = "Не Равно" Тогда
		Операция = " <> ";
	ИначеЕсли Условие = "Больше" Тогда
		Операция = " > ";
	ИначеЕсли Условие = "Меньше" Тогда
		Операция = " < ";
	ИначеЕсли Условие = "Больше или Равно" Тогда
		Операция = " >= ";
	ИначеЕсли Условие = "Меньше или Равно" Тогда
		Операция = " <= ";
	ИначеЕсли Условие = "В Списке" Тогда
		Операция = " В ";
	ИначеЕсли Условие = "Не В Списке" Тогда
		Операция = " НЕ В ";	
	Иначе
		Операция = " = ";
	КонецЕсли; 
	
	Возврат Операция;
	
КонецФункции

&НаКлиенте
Процедура ДоступностьВыгружатьВсеДокументыШаблона()
	
	Элементы.ВыгружатьВсеДокументыШаблона.Доступность = Объект.ВыгружатьРоботом;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьВсеДокументыШаблонаПриИзменении_Завершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Объект.ВыгружатьВсеДокументыШаблона = Ложь; 	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьВсеДокументыШаблонаПриИзменении(Элемент)
	
	Если Объект.ВыгружатьВсеДокументыШаблона Тогда
		
		Оповещение = Новый ОписаниеОповещения(
		"ВыгружатьВсеДокументыШаблонаПриИзменении_Завершение",
		ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "При активации ""Выгружать все документы шаблона"" будут выгружены все документы без условий!", РежимДиалогаВопрос.ОКОтмена);
		
	КонецЕсли;		  
	
КонецПроцедуры

#Область УпрощенныйВводУсловий

&НаСервере
Функция ОпределитьТипРеквизитаДокумента(ВидДокумента, ИмяРеквизита)
	
	ТекущийВидДокумента = ВидДокумента;
	Если ТекущийВидДокумента = "ЗаданиеНаПеревозку" Тогда		
		ТекущийВидДокумента = "ЗаказКлиента";
	КонецЕсли;	
	
	МассивТиповПоРеквизиту = Новый Массив(); 
	
	Если ИмяРеквизита = "Проведен" Или ИмяРеквизита = "ПометкаУдаления" Тогда
		МассивТиповПоРеквизиту.Добавить(Тип("Булево"));
	ИначеЕсли ИмяРеквизита = "Дата" Тогда
		МассивТиповПоРеквизиту.Добавить(Тип("Дата"));
	ИначеЕсли ИмяРеквизита = "Номер" Тогда
		МассивТиповПоРеквизиту.Добавить(Тип("Строка"));
	ИначеЕсли ИмяРеквизита = "" Тогда
		МассивТиповПоРеквизиту.Добавить(Тип("Неопределено"));
	ИначеЕсли ВидДокумента = "ЗаказКлиента" И ИмяРеквизита = "СостоянияЗаказовКлиентов" Тогда
		МассивТиповПоРеквизиту.Добавить(Тип("ПеречислениеСсылка.СостоянияЗаказовКлиентов"));	
	Иначе
		МассивТиповПоРеквизиту = Метаданные.Документы[ТекущийВидДокумента].Реквизиты[ИмяРеквизита].Тип.Типы();	
	КонецЕсли; 
	
	ОграничениеТиповДляЗначениеРеквизита(ИмяРеквизита, МассивТиповПоРеквизиту);
	
	Если МассивТиповПоРеквизиту.Количество() > 1 Тогда
		ТипПараметра = "СоставнойТип";
	ИначеЕсли МассивТиповПоРеквизиту.Количество() = 1 Тогда
		Если МассивТиповПоРеквизиту[0] = Тип("Дата") Тогда
			ТипПараметра = "Дата";
		ИначеЕсли МассивТиповПоРеквизиту[0] = Тип("Булево")	Или МассивТиповПоРеквизиту[0] = Тип("Строка") Или МассивТиповПоРеквизиту[0] = Тип("Число") Тогда
			ТипПараметра = "Строка";
		Иначе
			ТипПараметра = "Ссылочный";
		КонецЕсли; 		
	Иначе
		ТипПараметра = "Строка";
	КонецЕсли;
	
	Возврат ТипПараметра;
	
КонецФункции

&НаСервереБезКонтекста
Функция СобратьРеквизитыДокументаДляУсловий(ВидДокумента, Список)
	Список.Очистить();
	
	ТекущийВидДокумента = ВидДокумента;
	Если ТекущийВидДокумента = "ЗаданиеНаПеревозку" Тогда		
		ТекущийВидДокумента = "ЗаказКлиента";
	КонецЕсли;
	
	
	МетаДок = Метаданные.Документы.Найти(ТекущийВидДокумента);
	Если МетаДок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	Для каждого МетаРеквизит Из МетаДок.Реквизиты Цикл
		Список.Добавить(МетаРеквизит.Имя, МетаРеквизит.Синоним);
	КонецЦикла;
	
	Список.Добавить("Дата");
	Список.Добавить("Номер");
	Список.Добавить("Проведен");
	Список.Добавить("ПометкаУдаления");
	
	Если ВидДокумента = "ЗаказКлиента" Тогда
		Список.Добавить("СостоянияЗаказовКлиентов");	
	КонецЕсли;
	
	Список.СортироватьПоЗначению(НаправлениеСортировки.Возр);
КонецФункции

&НаКлиенте
Процедура ПараметрыУсловийИмяПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыУсловий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или Объект.ВидДокумента = "" Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекущиеДанные.Условие 			= Неопределено;
	ТекущиеДанные.ЗначениеПараметра = Неопределено;
	
	ПараметрыУсловийИмяРеквизитаПриИзмененииСервер(ТекущиеДанные.ИмяПараметра);
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыУсловийИмяРеквизитаПриИзмененииСервер(ИмяПараметра)
	
	МассивТиповПоРеквизиту = ОпределитьТипРеквизита(ИмяПараметра);	
	ОграничениеТиповДляЗначениеРеквизита(ИмяПараметра, МассивТиповПоРеквизиту);
	
КонецПроцедуры

&НаСервере
Процедура ОграничениеТиповДляЗначениеРеквизита(ИмяПараметра, МассивТиповПоРеквизиту)
	
	Если МассивТиповПоРеквизиту = Неопределено Тогда
		МассивТиповПоРеквизиту = ОпределитьТипРеквизита(ИмяПараметра);			
	КонецЕсли; 
	
	//Ограничиваю типы для ЗначениеРеквизита
	НашеОписание = Новый ОписаниеТипов(МассивТиповПоРеквизиту);	
	Элементы.ПараметрыУсловийЗначениеПараметра.ОграничениеТипа = НашеОписание;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТипРеквизита(ИмяПараметра)
	
	ВидДокумента = Объект.ВидДокумента;
	
	ТекущийВидДокумента = ВидДокумента;
	Если ТекущийВидДокумента = "ЗаданиеНаПеревозку" Тогда		
		ТекущийВидДокумента = "ЗаказКлиента";
	КонецЕсли;	
	
	Массив = Новый Массив(); 
	
	Если ИмяПараметра = "Проведен" Или ИмяПараметра = "ПометкаУдаления" Тогда
		Массив.Добавить(Тип("Булево"));
	ИначеЕсли ИмяПараметра = "Дата" Тогда
		Массив.Добавить(Тип("Дата"));
	ИначеЕсли ИмяПараметра = "Номер" Тогда
		Массив.Добавить(Тип("Строка"));
	ИначеЕсли ИмяПараметра = "" Тогда
		
	ИначеЕсли ВидДокумента = "ЗаказКлиента" И ИмяПараметра = "СостоянияЗаказовКлиентов" Тогда	
		Массив.Добавить(Тип("ПеречислениеСсылка.СостоянияЗаказовКлиентов"));	
	Иначе
		Возврат Метаданные.Документы[ТекущийВидДокумента].Реквизиты[ИмяПараметра].Тип.Типы();	
	КонецЕсли; 
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура ПараметрыУсловийУсловиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	
	Элемент.СписокВыбора.Добавить("Равно");
	Элемент.СписокВыбора.Добавить("Не Равно");
	
	ТекущиеДанные = Элементы.ПараметрыУсловий.ТекущиеДанные;
		
	ВидДокумента = Объект.ВидДокумента;
	ТекущийВидДокумента = ВидДокумента;
	Если ТекущийВидДокумента = "ЗаданиеНаПеревозку" Тогда		
		ТекущийВидДокумента = "ЗаказКлиента";
	КонецЕсли;	
		
	Если ТекущиеДанные = Неопределено Или ТекущийВидДокумента = "" Тогда
		Возврат;	
	КонецЕсли;
	
	ТипПараметра = ОпределитьТипРеквизитаДокумента(ТекущийВидДокумента, ТекущиеДанные.ИмяПараметра);
	ИмяПараметра = ТекущиеДанные.ИмяПараметра;
	
	Если ТипПараметра = "" Тогда
		ТипПараметра = ОпределитьТипРеквизитаДокумента(ТекущийВидДокумента, ИмяПараметра);	
	КонецЕсли; 
	
	Если ТипПараметра = "Дата" Тогда
		Элемент.СписокВыбора.Добавить("Больше");
		Элемент.СписокВыбора.Добавить("Меньше");
		Элемент.СписокВыбора.Добавить("Больше или Равно");
		Элемент.СписокВыбора.Добавить("Меньше или Равно");
	ИначеЕсли ТипПараметра = "Ссылочный" Тогда

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыУсловийУсловиеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПараметрыУсловий.ТекущиеДанные;
	
	ВидДокумента = Объект.ВидДокумента;
	ТекущийВидДокумента = ВидДокумента;
	Если ТекущийВидДокумента = "ЗаданиеНаПеревозку" Тогда		
		ТекущийВидДокумента = "ЗаказКлиента";
	КонецЕсли;	
	
	Если ТекущиеДанные = Неопределено Или ТекущийВидДокумента = "" Тогда
		Возврат;	
	КонецЕсли;
	
	ИмяПараметра = ТекущиеДанные.ИмяПараметра;
	ТипПараметра = ОпределитьТипРеквизитаДокумента(ТекущийВидДокумента, ИмяПараметра);
	Условие      = ТекущиеДанные.Условие;
	
	Если ТипПараметра = "Ссылочный" И (Условие = 7 Или Условие = 8) Тогда
		НашеОписание = Новый ОписаниеТипов(Новый СписокЗначений);	
		Элементы.ПараметрыУсловийЗначениеПараметра.ОграничениеТипа = НашеОписание;
	Иначе
		ОграничениеТиповДляЗначениеРеквизита(ИмяПараметра, Неопределено);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыУсловийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПараметрыУсловийЗначениеПараметра" Тогда				
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ПараметрыУсловий.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Или Объект.ВидДокумента = "" Тогда
			Возврат;	
		КонецЕсли; 
		
		ПараметрыУсловийИмяРеквизитаПриИзмененииСервер(ТекущиеДанные.ИмяПараметра);
		
		СтандартнаяОбработка = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыУсловийЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекДанныеСтроки = Элементы.ПараметрыУсловий.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекДанныеСтроки.ИмяПараметра) Тогда
		Сообщить("Выберите имя параметра!");	
	Иначе
		Если ТекДанныеСтроки.ИмяПараметра = "Помещение" Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗакрытиеВыбораПомещенияПараметрыУсловий", ЭтотОбъект), ПолучитьСписокПомещений(), Элементы.ПараметрыУсловий, 0);
		Иначе	
			ТипТекущегоРеквизита = ПолучитьТипРевизита(Объект.ВидДокумента, ТекДанныеСтроки.ИмяПараметра);
			Если ТипТекущегоРеквизита <> Неопределено Тогда
				Элементы.ПараметрыУсловийЗначениеПараметра.ОграничениеТипа = ТипТекущегоРеквизита;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

&Наклиенте
Процедура ЗакрытиеВыбораПомещенияПараметрыУсловий(Результат, ДопПараметры) Экспорт
	
	Элементы.ПараметрыУсловий.ТекущиеДанные.ЗначениеПараметра = Результат.Значение;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область СлужебныеФункции

&НаКлиенте
Процедура ПроверитьДокументНаВозможностьАдресногоХранения()
	
	ДоступностьАХПодбор  = (ПроверитьВозможностьАдресногоХранения(Объект.ВидДокумента, Объект.ИмяТабличнойЧастиПодбор) Или ПроверитьВозможностьАдресногоХранения(Объект.ВидДокументаНового, Объект.ИмяТабличнойЧастиПодбор));
	ДоступностьАХПриемка = (ПроверитьВозможностьАдресногоХранения(Объект.ВидДокумента, Объект.ИмяТабличнойЧастиПриемка) Или ПроверитьВозможностьАдресногоХранения(Объект.ВидДокументаНового, Объект.ИмяТабличнойЧастиПриемка));
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьАдресногоХранения(ИмяВидаДокумента, ИмяТЧ)
	
	Если Не ЗначениеЗаполнено(ИмяВидаДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// документы исключения
	Если ИмяВидаДокумента = "ПриходныйОрдерНаТовары" Или ИмяВидаДокумента = "РасходныйОрдерНаТовары" Тогда
		Возврат Истина;
	КонецЕсли;
		
	Попытка 
		МетаданныеТекущегоДокумента = Метаданные.Документы[ИмяВидаДокумента];
		
		ЕстьРеквизитЗонаОтгрузкиШапка = Не (МетаданныеТекущегоДокумента.Реквизиты.Найти("ЗонаОтгрузки") = Неопределено); 
		ЕстьРеквизитЗонаХраненияШапка = Не (МетаданныеТекущегоДокумента.Реквизиты.Найти("ЗонаХранения") = Неопределено); 
		ЕстьРеквизитЯчейкаШапка 	  = Не (МетаданныеТекущегоДокумента.Реквизиты.Найти("Ячейка") 	   = Неопределено);
		ЕстьРеквизитЗонаПриемкиШапка  = Не (МетаданныеТекущегоДокумента.Реквизиты.Найти("ЗонаПриемки") = Неопределено); 
		
		ЕстьРеквизитЯчейкаТЧ 	   = Ложь;
		ЕстьРеквизитЗонаХраненияТЧ = Ложь;
		ЕстьРеквизитЗонаОтгрузкиТЧ = Ложь;
		
		Если ИмяТЧ <> "" Тогда
			ЕстьРеквизитЯчейкаТЧ       = ?(МетаданныеТекущегоДокумента.ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("Ячейка") = Неопределено, Ложь, Истина);  
			ЕстьРеквизитЗонаХраненияТЧ = ?(МетаданныеТекущегоДокумента.ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("ЗонаХранения") = Неопределено, Ложь, Истина);
			ЕстьРеквизитЗонаОтгрузкиТЧ = ?(МетаданныеТекущегоДокумента.ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("ЗонаОтгрузки") = Неопределено, Ложь, Истина);
		КонецЕсли;
		
		Если ЕстьРеквизитЗонаОтгрузкиШапка
			Или ЕстьРеквизитЗонаХраненияШапка 
			Или ЕстьРеквизитЯчейкаШапка
			Или ЕстьРеквизитЗонаПриемкиШапка
			Или ЕстьРеквизитЯчейкаТЧ 
			Или ЕстьРеквизитЗонаХраненияТЧ 
			Или ЕстьРеквизитЗонаОтгрузкиТЧ 
			Или Объект.БыстраяОтгрузка
			Или Объект.БыстраяПриемка
			Или Объект.БыстроеПеремещение Тогда

			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Исключение 
		Возврат Истина;		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаАдресногоХранения() 
	
	ИспЯчейкиПодбор  = (ДоступностьАХПодбор И Объект.ИспользоватьПодбор);
	ИспЯчейкиПриемка = (ДоступностьАХПриемка И Объект.ИспользоватьПриемку);
	
	ИспПоискЯчейкиПодбор  = (Объект.ИспользованиеЯчеекПодбор <> 0);
	ИспПоискЯчейкиПриемка = (Объект.ИспользованиеЯчеекПриемка <> 0);
	
	// подбор
	Элементы.ИспользованиеЯчеекПодбор.Доступность 	  		= ИспЯчейкиПодбор;	
	Элементы.УчитыватьЯчеекВЗаданииПодбор.Доступность 		= (ИспЯчейкиПодбор И ИспПоискЯчейкиПодбор);
	Элементы.ОбработкаЯчейкиЦеликомПодбор.Доступность 		= (ИспЯчейкиПодбор И ИспПоискЯчейкиПодбор);
	Элементы.ЗагружатьСписокЯчеекССервераПодбор.Доступность = (ИспЯчейкиПодбор И Не Объект.ЯчейкиСправочноеРазмещениеПодбор И ИспПоискЯчейкиПодбор И Объект.ВыгрузкаЯчеекПодбор = 1); 
	Элементы.ВыгрузкаЯчеекПодбор.Доступность 				= (ИспЯчейкиПодбор И ИспПоискЯчейкиПодбор);
	Элементы.ГруппировкаЯчеекПодбор.Доступность             = (ИспЯчейкиПодбор И ИспПоискЯчейкиПодбор); 
	Элементы.ЯчейкиСправочноеРазмещениеПодбор.Доступность   = Объект.ИспользоватьПодбор;
	
	// приемка
	Элементы.ИспользованиеЯчеекПриемка.Доступность 	  		 = ИспЯчейкиПриемка;	
	Элементы.УчитыватьЯчеекВЗаданииПриемка.Доступность 		 = (ИспЯчейкиПриемка И ИспПоискЯчейкиПриемка);
	Элементы.ОбработкаЯчейкиЦеликомПриемка.Доступность 		 = (ИспЯчейкиПриемка И ИспПоискЯчейкиПриемка);
	Элементы.ЗагружатьСписокЯчеекССервераПриемка.Доступность = (ИспЯчейкиПриемка И Не Объект.ЯчейкиСправочноеРазмещениеПриемка И ИспПоискЯчейкиПриемка И Объект.ВыгрузкаЯчеекПриемка = 1); 
	Элементы.ВыгрузкаЯчеекПриемка.Доступность 				 = (ИспЯчейкиПриемка И ИспПоискЯчейкиПриемка);
	Элементы.ГруппировкаЯчеекПриемка.Доступность             = (ИспЯчейкиПриемка И ИспПоискЯчейкиПриемка);
	Элементы.ЯчейкиСправочноеРазмещениеПриемка.Доступность   = Объект.ИспользоватьПриемку;
	
	// очистка значений неверных
	Если Не Объект.ИспользоватьПодбор Тогда
		Если Объект.ЯчейкиСправочноеРазмещениеПодбор Тогда
			Объект.ЯчейкиСправочноеРазмещениеПодбор = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Не Объект.ИспользоватьПриемку Тогда
		Если Объект.ЯчейкиСправочноеРазмещениеПриемка Тогда
			Объект.ЯчейкиСправочноеРазмещениеПриемка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ИспЯчейкиПодбор Тогда
		Если Объект.ИспользованиеЯчеекПодбор <> 0 И Не Объект.ЯчейкиСправочноеРазмещениеПодбор Тогда 				
			Объект.ИспользованиеЯчеекПодбор = 0;			
		КонецЕсли;
		
		Если Объект.УчитыватьЯчеекВЗаданииПодбор Тогда 				
			Объект.УчитыватьЯчеекВЗаданииПодбор = Ложь;			
		КонецЕсли;
		
		Если Объект.ОбработкаЯчейкиЦеликомПодбор Тогда 				
			Объект.ОбработкаЯчейкиЦеликомПодбор = Ложь;			
		КонецЕсли;
		
		Если Не Объект.ЯчейкиСправочноеРазмещениеПодбор И Объект.ЗагружатьСписокЯчеекССервераПодбор Тогда 				
			Объект.ЗагружатьСписокЯчеекССервераПодбор = Ложь;			
		КонецЕсли;
		
		Если Объект.ВыгрузкаЯчеекПодбор <> 0 И Не Объект.ЯчейкиСправочноеРазмещениеПодбор Тогда 				
			Объект.ВыгрузкаЯчеекПодбор = 0;			
		КонецЕсли;
	КонецЕсли;	
		
	Если Не ИспЯчейкиПриемка Тогда
		Если Объект.ИспользованиеЯчеекПриемка <> 0 И Не Объект.ЯчейкиСправочноеРазмещениеПриемка Тогда 				
			Объект.ИспользованиеЯчеекПриемка = 0;			
		КонецЕсли;
		
		Если Объект.УчитыватьЯчеекВЗаданииПриемка Тогда 				
			Объект.УчитыватьЯчеекВЗаданииПриемка = Ложь;			
		КонецЕсли;
		
		Если Объект.УчитыватьЯчеекВЗаданииПриемка Тогда 				
			Объект.УчитыватьЯчеекВЗаданииПриемка = Ложь;			
		КонецЕсли;
		
		Если Не Объект.ЯчейкиСправочноеРазмещениеПриемка И Объект.ЗагружатьСписокЯчеекССервераПриемка Тогда 				
			Объект.ЗагружатьСписокЯчеекССервераПриемка = Ложь;			
		КонецЕсли;
		
		Если Объект.ВыгрузкаЯчеекПриемка <> 0 И Не Объект.ЯчейкиСправочноеРазмещениеПриемка Тогда 				
			Объект.ВыгрузкаЯчеекПриемка = 0;			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура РазвернутьГруппыГдеВыбраныПараметры()
	
	///////////////////////
	//ОБЩЕЕ
	Попытка
		Если Объект.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор
			Или Объект.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор Тогда 
			
			Элементы.ГрБизнесПроцессы.Показать();
			Элементы.грПересчетТоваров.Показать();	
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ПроверкаОтборРазмещение
			Или Объект.ПерезаполнятьРасходныйОрдерПоОтбору
			Или ЗначениеЗаполнено(Объект.СтатусРасходногоОрдераПослеЗагрузкиОтбора)
			Или Объект.СтатусРасходногоОрдераПослеЗагрузкиОтбораСОшибками
			Или Объект.БыстраяПриемка
			Или Объект.БыстраяОтгрузка Тогда 
			
			Элементы.ГрБизнесПроцессы.Показать();
			Элементы.грДокументОтборРазмещениеТоваров.Показать();	
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ПерезаполнятьТЧТоварыПоРаспоряжениям Тогда 
			
			Элементы.ГрБизнесПроцессы.Показать();
			Элементы.грДокументРасходныйОрдер.Показать();	
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ИспользоватьВторойСклад
			Или Объект.БыстроеПеремещение <> 0 Тогда 
			
			Элементы.ГрБизнесПроцессы.Показать();
			Элементы.грДокументПеремещениеТоваров.Показать();	
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.РежимКомплектации <> 0 Тогда 
			
			Элементы.ГрБизнесПроцессы.Показать();
			Элементы.грБизнесПроцессыКомплектация.Показать();	
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.БыстроеСканирование
			Или Объект.СтоимостьЗаСтрокуДокумента <> 0 Тогда 
			
			Элементы.ГрБизнесПроцессы.Показать();
			Элементы.грБизнесПроцессыПрочие.Показать();	
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.СоздаватьСерииЕслиНеНайдены
			Или Объект.ЗагружатьСписокСерийССервера
			Или Объект.КонтролироватьОстатокПоСериям 
			Или Объект.СерииВОтдельнойТЧ Тогда 
			
			Элементы.грСерии.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ГенерацияПаклистаНаСервере <> 0 
			Или Объект.РазрешитьПропускатьВводУпаковочногоЛиста 
			Или Объект.ТабличнаяЧастьПриЗагрузкеУЛ <> 0 Тогда 
			
			Элементы.ГрУпаковочныеЛисты.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ЗапретитьРучноеИзменениеКлиента 
			Или Объект.ЗапретитьРучноеИзменениеКомментария
			Или Объект.ЗагружатьКомментарий <> 0 
			Или Объект.АвтоматическийКомментарийИспользовать 
			Или Объект.АвтоматическийКомментарий <> "" 
			Или Объект.ЗапретИзменениеСклада 
			Или Объект.НеИзменятьОтветственногоМенеджера Тогда 
			
			Элементы.грКлиент.Показать();
			Элементы.ГрБизнесПроцессы.Показать();
			Элементы.грБизнесПроцессыПрочие.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ГрупповаяРабота 
			Или Объект.ГрупповаяРаботаЗвуковоеОповещение 
			Или Объект.ГрупповаяРаботаИнтервалОпроса <> 0 Тогда 
			
			Элементы.ГрМультиДок.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ИспользоватьГрупповойДокумент
			Или Объект.РаспределениеТоваров <> 0 
			Или Объект.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически Тогда 
			
			Элементы.грГрупповойДокумент.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	///////////////////////
	//ПОДБОР
	Попытка
		Если Объект.ИспользованиеЯчеекПодбор <> 0
			Или Объект.УчитыватьЯчеекВЗаданииПодбор			
			Или Объект.ОбработкаЯчейкиЦеликомПодбор
			Или Объект.ЗагружатьСписокЯчеекССервераПодбор
			Или Объект.ВыгрузкаЯчеекПодбор <> 0 
			Или Объект.ГруппировкаЯчеекПодбор <> 0 Тогда 
			
			Элементы.грАдрПодб.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ИспользованиеСерийниковПодбор <> 0
			Или Объект.УчитыватьСерийниковВЗаданииПодбор			
			Или Объект.СерНомНеПустойПодбор
			Или Объект.УникальныеСерийныеНомераПодбор
			Или Объект.ПечатьЭтикеткиСерииПодбор 
			Или Объект.ГруппировкаСерийПодбор <> 0 Тогда 
			
			Элементы.грСерПодб.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка 
		Если Объект.ИспользованиеУпаковочныхЛистовПодбор <> 0
			Или Объект.ИспользоватьТиповыеУпаковочныеЛисты
			Или Объект.ПодборУпаковочнымиЛистами
			Или Объект.ПроверкаУпаковочныхЛистовПоЗаданию Тогда 
			
			Элементы.грУпакПодб.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ИспользоватьФотофиксацию
			Или Объект.ПутьВыгрузкиИзображения <> "" Тогда 
			
			Элементы.грФотофиксацияПодборЛевая.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
		
	///////////////////////
	//РАЗМЕЩЕНИЕ	
	Попытка
		Если Объект.ИспользованиеЯчеекПриемка <> 0
			Или Объект.УчитыватьЯчеекВЗаданииПриемка			
			Или Объект.ОбработкаЯчейкиЦеликомПриемка
			Или Объект.ЗагружатьСписокЯчеекССервераПриемка
			Или Объект.ВыгрузкаЯчеекПриемка <> 0 
			Или Объект.ГруппировкаЯчеекПриемка <> 0 Тогда 
			
			Элементы.ГрАдрРазм.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ИспользованиеСерийниковПриемка <> 0
			Или Объект.УчитыватьСерийниковВЗаданииПриемка			
			Или Объект.СерНомНеПустойПриемка
			Или Объект.УникальныеСерийныеНомераПриемка 
			Или Объект.ГруппировкаСерийПриемка <> 0 Тогда 
			
			Элементы.ГрСерРазм.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если Объект.ИспользованиеУпаковочныхЛистовПриемка <> 0 Тогда 
			
			Элементы.ГрУпакРазм.Показать();
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область ИзбранныеДействия 

&НаКлиенте
Процедура ИзбранныеФункцииПриИзменении(Элемент)
	
	//выбрать можно максимум 5 функций
	Сч = 0;
	МассивСтатусов = ""; 
	Для каждого строка Из Таблица_ИзбранныеФункции Цикл 		
		Если Сч > 4 И строка.Пометка Тогда
			Сообщить("Выбрать можно максимум 5 функций!");
			строка.Пометка = Ложь;	
		КонецЕсли;
		
		Если строка.Пометка Тогда
			МассивСтатусов = МассивСтатусов + строка.Значение + ",";
			Сч = Сч + 1;
		КонецЕсли;	
	КонецЦикла;
	МассивСтатусов = ?(Прав(МассивСтатусов, 1) = ",", Лев(МассивСтатусов, СтрДлина(МассивСтатусов) - 1), МассивСтатусов);
	
	Объект.ИзбранныеФункции = МассивСтатусов;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранныеФункцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИзбранныеФункцииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ЗагрузитьИзбранныеФункции() 
	
	Таблица_ИзбранныеФункции.Добавить(1, "Добавить товар/ячейку");
	Таблица_ИзбранныеФункции.Добавить(2, "Подбор/Размещение");
	Таблица_ИзбранныеФункции.Добавить(3, "Сменить упаковку");
	Таблица_ИзбранныеФункции.Добавить(4, "Отменить запись");
	Таблица_ИзбранныеФункции.Добавить(5, "Фильтры");
	Таблица_ИзбранныеФункции.Добавить(6, "Поштучный ввод");
	Таблица_ИзбранныеФункции.Добавить(7, "Печать документа");
	Таблица_ИзбранныеФункции.Добавить(8, "Закрепить документ");
	Таблица_ИзбранныеФункции.Добавить(9, "Выгрузить документ");
	Таблица_ИзбранныеФункции.Добавить(10, "Сделать фото");
	Таблица_ИзбранныеФункции.Добавить(11, "Быстрый доступ");
	Таблица_ИзбранныеФункции.Добавить(12, "Печать этикеток");
	Таблица_ИзбранныеФункции.Добавить(13, "Проверка КМ");
	Таблица_ИзбранныеФункции.Добавить(14, "Поиск RFID-метки");
	
	Если Объект.ИзбранныеФункции <> "" Тогда 
		МассивСохраненныхФункций = ДатаМобайл_ОбщийМодуль.РазложитьСтрокуВМассивЧисловыхПодстрокДМ(Объект.ИзбранныеФункции);
		Для каждого строка Из Таблица_ИзбранныеФункции Цикл
			Если МассивСохраненныхФункций.Найти(строка.Значение) <> Неопределено Тогда
				строка.Пометка = Истина;
			Иначе
				строка.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Zolla
#Область Zolla

&НаСервере
Процедура ДМ_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ГруппаНастройкиZolla = Элементы.ГрZollaНастройки;
	
	// тип процесса
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить("ДМ_ТипПроцесса", Тип("ПолеФормы"), ГруппаНастройкиZolla);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя;
	НовыйЭлемент.ПутьКДанным = "Объект.ДМ_ТипПроцесса";
	
	СписокВыбора = НовыйЭлемент.СписокВыбора; 
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(0, "Не использовать");
	СписокВыбора.Добавить(1, "Приемка коробов");
	СписокВыбора.Добавить(2, "Размещение в ячейки");
	
	НовыйЭлемент.КоличествоКолонок = 1;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	
	// отгрузка товаров из магазина
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить("ДМ_ОтгрузкаИзМагазина", Тип("ПолеФормы"), ГруппаНастройкиZolla);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.ДМ_ОтгрузкаИзМагазина";
	НовыйЭлемент.Заголовок   = "Отгрузка товара из магазина";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПриИзмененииДМ_ОтгрузкаИзМагазина");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДМ_ОтгрузкаИзМагазина(Элемент)
	
	ДМ_Доступность_ОтгрузкаИзМагазина();	
    
КонецПроцедуры

&НаКлиенте
Процедура ДМ_ПроверкаДоступностиНастроек()
	
	ДоступностьНастройки = (Объект.ВидДокумента = "ОтборРазмещениеТоваров"); 
	
	Элементы.ДМ_ТипПроцесса.Доступность = ДоступностьНастройки;
	
	Если Не ДоступностьНастройки И Не Объект.ДМ_ТипПроцесса = 0 Тогда
		Объект.ДМ_ТипПроцесса = 0;
		Модифицированность = Истина;
	КонецЕсли;
	
	ДМ_Доступность_ОтгрузкаИзМагазина();
	
КонецПроцедуры

&НаКлиенте
Процедура ДМ_Доступность_ОтгрузкаИзМагазина()
	
	Если Объект.ДМ_ОтгрузкаИзМагазина Тогда
		Элементы.ВидДокумента.СписокВыбора.Очистить();
		Элементы.ВидДокумента.СписокВыбора.Добавить("ЗаказКлиента", "Заказ клиента");
		Элементы.ВидДокумента.СписокВыбора.Добавить("ЗаказНаПеремещение", "Заказ на перемещение");
		
		Элементы.ВидДокументаНового.СписокВыбора.Очистить();
		Элементы.ВидДокументаНового.СписокВыбора.Добавить("ОтборРазмещениеТоваров", "Отбор (размещение) товаров");
		Объект.ВидДокументаНового = "ОтборРазмещениеТоваров";
		ВидДокументаНовогоПриИзменении(Элементы.ВидДокументаНового);
		
		Объект.ГенерацияПаклистаНаСервере = 2;
		Объект.ИспользованиеУпаковочныхЛистовПодбор = 2;
		ИспользованиеУпаковочныхЛистовПодборПриИзменении(Элементы.ИспользованиеУпаковочныхЛистовПодбор);
		
		Объект.ИспользоватьТиповыеУпаковочныеЛисты = Истина;
		ВидимостьДоступностьНастроекУЛПодбор();
	Иначе
		ВидыДокументов = Новый СписокЗначений;
		СобратьВидыДокументов(ВидыДокументов);
		
		Элементы.ВидДокумента.СписокВыбора.Очистить();
		Элементы.ВидДокументаНового.СписокВыбора.Очистить();
		
		Для каждого Эл Из ВидыДокументов Цикл
			Элементы.ВидДокумента.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
			Элементы.ВидДокументаНового.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти