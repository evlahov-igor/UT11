#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает данные МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Ссылка на МЧД контрагента
// 
// Возвращаемое значение:
//  Структура см. МашиночитаемыеДоверенности.НовыеДанныеДоверенности - Структура данных МЧД
//  
Функция ПолучитьДанныеМЧД(МЧД) Экспорт
	
	РеквизитыМЧД =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, "НомерДоверенности, ДоверительЮЛ_ИНН, ДоверительФЛ_ИНН");
	ДанныеМЧД = МашиночитаемыеДоверенности.НовыеДанныеДоверенности();
	ДанныеМЧД.НомерДоверенности = РеквизитыМЧД.НомерДоверенности;
	ДанныеМЧД.ИННДоверителя =
		?(ПустаяСтрока(РеквизитыМЧД.ДоверительЮЛ_ИНН), РеквизитыМЧД.ДоверительФЛ_ИНН, РеквизитыМЧД.ДоверительЮЛ_ИНН);
	
	Возврат ДанныеМЧД;
	
КонецФункции

// Заполняет элемент справочника МЧД сведениями.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Ссылка на МЧД организации
//  Сведения См. МашиночитаемыеДоверенности.ПолучитьСведенияДоверенностиНаСервереМЧД
//
// Возвращаемое значение:  
//  Структура:
//  * Ошибка - Булево - Флаг ошибки
//  * ОписаниеОшибки - Строка - Строка с описанием ошибки
//  * СведенияМЧД - Неопределено, Структура см. МашиночитаемыеДоверенности.НовыеСведенияМЧД
//  
Функция ЗаполнитьМЧД(МЧД, Сведения) Экспорт
	
	Результат = Новый Структура("Ошибка, ОписаниеОшибки, СведенияМЧД", Ложь, "", Неопределено);
	
	ВходящиеДанные = Сведения.ПолныеДанные.ДанныеВыгрузки;
	ДополнительныеСведения = Новый Структура;
	СтатусДоверенности = МашиночитаемыеДоверенностиКлиентСервер.СтатусМЧД(Сведения.ЧастичныеДанные.СтатусДоверенности);
	ДополнительныеСведения.Вставить("Статус", СтатусДоверенности);
	ДополнительныеСведения.Вставить("ДатаОбновленияСтатуса", Сведения.ДатаЗагрузкиИзРеестра);
	РезультатЗагрузки = ЗагрузитьЭлементИзФайлаОбмена(ВходящиеДанные, Истина, ДополнительныеСведения);
	
	МЧД = РезультатЗагрузки.Ссылка;
	
	Если НЕ ПустаяСтрока(РезультатЗагрузки.Ошибка) ИЛИ НЕ ЗначениеЗаполнено(МЧД) Тогда

		Результат.Ошибка = Истина;
		Результат.ОписаниеОшибки = РезультатЗагрузки.Ошибка;
		Возврат Результат;
			
	КонецЕсли;
	
	Реквизиты = "ДатаВыдачи, ДатаОкончания, ДоверительЮЛ_ИНН,
		|ДоверительФЛ_ИНН, ПредставительФЛ_ИНН, ДатаОбновленияСтатуса, Статус";
	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, Реквизиты);
	СведенияМЧД = МашиночитаемыеДоверенности.НовыеСведенияМЧД();
	СведенияМЧД.Ссылка = МЧД;
	ЗаполнитьЗначенияСвойств(СведенияМЧД, РеквизитыМЧД, "ДатаВыдачи, ДатаОкончания, Статус");
	СведенияМЧД.ДатаПолученияСведений = РеквизитыМЧД.ДатаОбновленияСтатуса;
	СведенияМЧД.ИННПредставителя = РеквизитыМЧД.ПредставительФЛ_ИНН;
	СведенияМЧД.ИННДоверителя =
		?(ПустаяСтрока(РеквизитыМЧД.ДоверительЮЛ_ИНН), РеквизитыМЧД.ДоверительФЛ_ИНН, РеквизитыМЧД.ДоверительЮЛ_ИНН);
	Результат.СведенияМЧД = СведенияМЧД;
	
	Возврат Результат;
	
КонецФункции

// Ищет МЧД контрагента, а в случае неудачного поиска создает новую МЧД
// 
// Параметры:
//  ДанныеДоверенности См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Структура:
//  * Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * Ошибка - Булево
//  * ОписаниеОшибки - Строка
//  
Функция НайтиСоздатьМЧД(ДанныеДоверенности) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Ссылка", Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка());
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");

	МЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.НайтиПоРеквизиту(
		"НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
	
	Если ЗначениеЗаполнено(МЧД) Тогда
		Результат.Ссылка = МЧД;
	Иначе
		
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить("Справочник.МашиночитаемыеДоверенностиОрганизаций");
			ЭлементБлокировки.УстановитьЗначение("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();

			МЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.НайтиПоРеквизиту(
				"НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
				
			Если ЗначениеЗаполнено(МЧД) Тогда
				Результат.Ссылка = МЧД;
			Иначе
				
				МЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.СоздатьЭлемент();
				МЧД.НомерДоверенности = ДанныеДоверенности.НомерДоверенности;
				Если СтрДлина(ДанныеДоверенности.ИННДоверителя) < 12 Тогда
					МЧД.ДоверительЮЛ_ИНН = ДанныеДоверенности.ИННДоверителя;
				Иначе
					МЧД.ДоверительФЛ_ИНН = ДанныеДоверенности.ИННДоверителя;
				КонецЕсли;
				МЧД.Записать();
				Результат.Ссылка = МЧД.Ссылка;
				
			КонецЕсли;
		
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			Результат.Ошибка = Истина;
			Результат.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
			
	КонецЕсли;
	
	Возврат Результат;
			
КонецФункции

// Возвращает идентификатор машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Строка - Идентификатор машиночитаемой доверенности.
//
Функция ПолучитьИдентификаторМЧД(Ссылка) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерДоверенности");
КонецФункции

// Возвращает имя файла машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Строка - Имя файла машиночитаемой доверенности.
//
Функция ПолучитьИмяФайлаМЧД(Ссылка) Экспорт

	Реквизиты = "ДатаОтправки, НомерДоверенности";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);

	ЭлементыИмениФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ON_DOVBB");
	ДатаФайла = ?(ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаОтправки), ЗначенияРеквизитов.ДатаОтправки,
		ТекущаяДатаСеанса());
	ЭлементыИмениФайла.Добавить(Формат(ДатаФайла, "ДФ=ггггММдд;"));
	ЭлементыИмениФайла.Добавить(ЗначенияРеквизитов.НомерДоверенности);

	Возврат СтрСоединить(ЭлементыИмениФайла, "_");

КонецФункции

// Возвращает двоичные данные машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные машиночитаемой доверенности.
//
Функция ПолучитьДвоичныеДанныеМЧД(Ссылка) Экспорт

	МЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Статус, НомерДоверенности");
	Если МЧД.Статус = Перечисления.СтатусыМашиночитаемойДоверенности.Зарегистрировано Тогда
		РезультатВыгрузки = МашиночитаемыеДоверенности.ВыгрузитьЗаявлениеНаОтменуМЧД(МЧД.НомерДоверенности, "Отзыв");
	Иначе
		ИмяФайла = ПолучитьИмяФайлаМЧД(Ссылка);
		РезультатВыгрузки = ВыгрузитьЭлементВФайлОбмена(Ссылка, ИмяФайла);
	КонецЕсли;

	Если МЧД.Статус = Перечисления.СтатусыМашиночитаемойДоверенности.Зарегистрировано Тогда
		Возврат ПолучитьДвоичныеДанныеИзСтроки(РезультатВыгрузки.Содержимое, "windows-1251");
	Иначе
		Возврат ПолучитьДвоичныеДанныеИзСтроки(РезультатВыгрузки.Содержимое, "utf-8", Истина);
	КонецЕсли;

КонецФункции

#Область ЗагрузкаЭлементаСправочника

// Возвращает данные, полученные из файла обмена.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
//  ОбновлятьСуществующий - Булево - Если Истина, то будет обновлен существующий элемент, если он найден.
// 
// Возвращаемое значение:
//  Структура - Данные из файла обмена.
//
Функция ДанныеИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующий = Ложь) Экспорт

	ДанныеДоверенности = Новый Структура;
	ДанныеДоверенности.Вставить("XMLизРеестра", Неопределено);
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');

	ДокументОбработки = ПодготовитьДокументDOM(ВходящиеДанные);

	СведенияДоверенности = ПолучитьВыборкуЭлементоDOM(ДокументОбработки, "/Файл/Документ/СвДов");

	Если СведенияДоверенности.Количество() = 1 Тогда

		ЭлементВыборки = СведенияДоверенности[0];
		ДанныеДоверенности.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомДовер"));
		ДанныеДоверенности.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаНач", '00010101'));
		ДанныеДоверенности.Вставить("ДатаОкончания", ПолучитьЗначениеДокумента(ЭлементВыборки, "ДатаОкон", '00010101'));
		ДанныеДоверенности.Вставить("СрокДействия", ПолучитьЗначениеДокумента(ЭлементВыборки, "СрокДейст", ""));
		ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", ПолучитьЗначениеДокумента(ЭлементВыборки,
			"СведСистОтм", ""));
		ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки,
			"@НомПредДовер", ""));
		ПравоПередоверияСтрока = ПолучитьЗначениеДокумента(ЭлементВыборки, "@ПрПередов");
		ДанныеДоверенности.Вставить("ВозможноПередоверие", ?(ПравоПередоверияСтрока = "1", Истина, Ложь));
	КонецЕсли;

	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("ПолномочияПредставителя", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеДоверенности.Вставить("ТипОрганизации", "");

	СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементоDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/РосОргДовер");
	СведенияДоверителяФЛ = ПолучитьВыборкуЭлементоDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ФЛДовер");
	СведенияДоверителяИО = ПолучитьВыборкуЭлементоDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ИнОргДовер");

	Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ЮЛ";
		СведенияДоверителя = СведенияДоверителяЮЛ;
	ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ФЛ";
		СведенияДоверителя = СведенияДоверителяФЛ;
	Иначе
		ДанныеДоверенности.ТипОрганизации = "ИО";
		СведенияДоверителя = СведенияДоверителяИО;
	КонецЕсли;

	РеквизитыПоискаОрганизации = Новый Соответствие;

	Если СведенияДоверителя.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверителя[0];
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", ПолучитьЗначениеДокумента(ЭлементВыборки, "@АдрРФ"));

			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@ИННФЛ"));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@СНИЛС"));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@ДатаРожд", '00010101'));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@Должность"));

			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@НаимОрг"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@КПП"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@ОГРН"));

			Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
				ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",
					ДанныеДоверенности.ЛицоБезДовФЛ_ИНН,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
			КонецЕсли;

			Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
				ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", ПодыскатьИнформациюВладельца("Контрагенты,Организации",
					ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, ДанныеДоверенности.ЛицоБезДовЮЛ_КПП));
			КонецЕсли;

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимИО"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СтрРег",
				Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@НаимРегОрг"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", ПолучитьЗначениеДокумента(ЭлементВыборки, "@РегНомер"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", ПолучитьЗначениеДокумента(ЭлементВыборки, "АдрСтрРег"));

			ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ИННФЛ"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"СвРукОП/@ДатаРожд", '00010101'));
			ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"СвРукОП/@МестоРожд"));
			ДанныеДоверенности.Вставить(
				"ДоверительФЛ_Пол", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@Пол", 1));
			ПризнакГражданства = ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ПрГражд");
			Если ПризнакГражданства = 1 Тогда
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
			Иначе
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"СвРукОП/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			КонецЕсли;

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СНИЛС"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@ДатаРожд", '00010101'));

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);

		КонецЕсли;

	КонецЕсли;

	СведенияУполномоченных = ПолучитьВыборкуЭлементоDOM(ДокументОбработки, "/Файл/Документ/СвУпПред");
	Для Каждого СтрокаМассива Из СведенияУполномоченных Цикл
		КодыПолномочий = Новый Массив;
		НоваяСтрока = Новый Структура;
		ПолномочияПредставителя = ПолучитьВыборкуЭлементоDOM(СтрокаМассива, "ПрОблПолн");
		Для каждого ПолномочиеПредставителя Из ПолномочияПредставителя Цикл
			ПредставлениеВида = СокрЛП(ПолномочиеПредставителя.ТекстовоеСодержимое);
			КодыПолномочий.Добавить(ПредставлениеВида);
			Если ПредставлениеВида = "99" Тогда
				НоваяСтрока.Вставить("ПризнакПолныеПолномочия", Истина);
			ИначеЕсли СтрДлина(ПредставлениеВида) = 2 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПредставлениеВида) Тогда
				ВидПолномочия = Число(ПредставлениеВида);
				Если ВидПолномочия >= 1 И ВидПолномочия <= КоличествоВидовПолномочийПредставителя() Тогда
					НоваяСтрока.Вставить(ПредставлениеВидаПолномочия(ВидПолномочия), Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеДоверенности.ПолномочияПредставителя.Добавить(НоваяСтрока);
		
		ТекстПолномочий = "";
		ВыборкаЭлементовТекстПолномочий = ПолучитьВыборкуЭлементоDOM(СтрокаМассива, "ТекстПолн");
		Для каждого СтрокаПолномочий ИЗ ВыборкаЭлементовТекстПолномочий Цикл
			ТекстПолномочий	= ТекстПолномочий + СтрокаПолномочий.ТекстовоеСодержимое + Символы.ПС;	
		КонецЦикла;
		ДанныеДоверенности.Вставить("ТекстПолномочий", ТекстПолномочий);
		ДанныеДоверенности.Вставить("КодПолномочий", СтрСоединить(КодыПолномочий, Символы.ПС));

		ТипВладельца = Перечисления.СубъектыДоверенности.ПредставительФЛ;
		ИнформацияОрганизации = ПолучитьВыборкуЭлементоDOM(СтрокаМассива, "СвПред/СвОрг");
		Если ИнформацияОрганизации.Количество() > 0 Тогда
			ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@НаимОрг"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@КПП"));
			ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@ОГРН"));
		КонецЕсли;

		СведенияФЛ = ПолучитьВыборкуЭлементоDOM(СтрокаМассива, "СвПред/СведФизЛ");
		Если СведенияФЛ.Количество() > 0 Тогда
			СведенияФЛ = СведенияФЛ[0];
			ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", ПолучитьЗначениеДокумента(СведенияФЛ, "@ИННФЛ"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_ОГРН", ПолучитьЗначениеДокумента(СведенияФЛ, "@ОГРНИП"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", ПолучитьЗначениеДокумента(СведенияФЛ, "@СНИЛС"));
			ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", ПолучитьЗначениеДокумента(СведенияФЛ,
				"@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(СведенияФЛ,
				"@ДатаРожд", '00010101'));

			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Фамилия"));
			НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Имя"));
			НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Отчество"));
			НоваяСтрока.Вставить("Владелец", ТипВладельца);
			ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);

			ДокументИП = Новый Структура;
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@СерНомДок"));
			ДокументИП.Вставить("СерДок", СерияНомер.Серия);
			ДокументИП.Вставить("НомДок", СерияНомер.Номер);
			ДокументИП.Вставить("ДатаДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@ДатаДок", '00010101'));
			ДокументИП.Вставить("ВыдДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@ВыдДок"));
			ДокументИП.Вставить("ВидДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@КодВидДок"));
			ДокументИП.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@КодВыдДок"));
			ДокументИП.Вставить("Владелец", ТипВладельца);
			ДанныеДоверенности.УдостоверенияЛичности.Добавить(ДокументИП);
		КонецЕсли;

		Представитель = Неопределено;
		Если ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") И ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
				ДанныеДоверенности.ПредставительЮЛ_ИНН, ДанныеДоверенности.ПредставительЮЛ_КПП);
		КонецЕсли;

		Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") Или Не ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительЮЛ_ИНН) И Не ЗначениеЗаполнено(Представитель) И ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительФЛ_ОГРН) Тогда
			Представитель = ПодыскатьИнформациюВладельца("Контрагенты", ДанныеДоверенности.ПредставительФЛ_ИНН);
		КонецЕсли;

		Если Не ДанныеДоверенности.Свойство("ПредставительЮЛ_ИНН") Или Не ЗначениеЗаполнено(
			ДанныеДоверенности.ПредставительЮЛ_ИНН) И Не ЗначениеЗаполнено(Представитель) Тогда
			Представитель = ПодыскатьИнформациюВладельца("ФизическиеЛица", ДанныеДоверенности.ПредставительФЛ_ИНН);
		КонецЕсли;

		ДанныеДоверенности.Вставить("Представитель", Представитель);

	КонецЦикла;

	СведенияПодписанта = ПолучитьВыборкуЭлементоDOM(ДокументОбработки, "/Файл/Документ/Подписант");
	Если СведенияПодписанта.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПодписанта[0];

		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Фамилия"));
		НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Имя"));
		НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Отчество"));
		Если ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенности.ДоверительФЛ);
		Иначе
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенности.ДоверительРук);
		КонецЕсли;
		ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);
	КонецЕсли;

	РезультатПоиска = Неопределено;
	СтруктураПоиска = Новый Структура("ИНН, КПП");
	СтруктураПоиска.ИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	СтруктураПоиска.КПП = РеквизитыПоискаОрганизации.Получить("КПП");
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
		"Организации", РезультатПоиска, , СтруктураПоиска);
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);

	Возврат ДанныеДоверенности;

КонецФункции

// Загружает элемент справочника из файла обмена.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
//  ОбновлятьСуществующий - Булево - Если Истина, то будет обновлен существующий элемент, если он найден.
//  ДополнительныеСведения - Неопределено,	Структура:
//  							* Статус - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенности
//  							* ДатаЗагрузкиИзРеестра - Дата
// 
// Возвращаемое значение:
//  Структура - Результат загрузки:
//   * Выполнено - Булево - Признак успешности выполнения загрузки.
//   * Ссылка - Неопределено, СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Ссылка на элемент справочника.
//   * Ошибка - Строка - Текст ошибки, если не удалось загрузить элемент.
//
Функция ЗагрузитьЭлементИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующий = Ложь,
	ДополнительныеСведения = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Ошибка", "");

	ДанныеПодготовленны = 0;
	КлючевыеРеквизиты = "";
	ТекстОшибки = "";
	Успешно = Истина;

	Попытка
		ДанныеДоверенности = ДанныеИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующий);
	Исключение
		Результат.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Успешно = Ложь;
	КонецПопытки;
	Если Успешно Тогда
		
		ДанныеДоверенности.Вставить("XMLизРеестра", Новый ХранилищеЗначения(ВходящиеДанные, Новый СжатиеДанных(9)));
		
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			КлючевыеРеквизиты = "ДоверительФЛ_ИНН, ДоверительФЛ_СНИЛС";
		Иначе
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
		КонецЕсли;

		КлючевыеРеквизиты = КлючевыеРеквизиты + ",НомерДоверенности, ДатаВыдачи, ДатаОкончания, Организация";
		КлючевыеРеквизиты = КлючевыеРеквизиты + ",Представитель";

		КлючевыеРеквизиты = Новый Структура(КлючевыеРеквизиты);

		Для Каждого СтрокаКлюча Из КлючевыеРеквизиты Цикл
			Если ДанныеДоверенности.Свойство(СтрокаКлюча.Ключ)
				И ЗначениеЗаполнено(ДанныеДоверенности[СтрокаКлюча.Ключ]) Тогда
				ДанныеПодготовленны = ДанныеПодготовленны + 1;
			ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнены реквизиты справочника'") + ":  " + СтрокаКлюча.Ключ;
			Иначе
				ТекстОшибки = ТекстОшибки + ", " + СтрокаКлюча.Ключ;
			КонецЕсли;
		КонецЦикла;

		Если ЗначениеЗаполнено(ДополнительныеСведения) Тогда
			ДанныеДоверенности.Вставить("Статус", ДополнительныеСведения.Статус);
			ДанныеДоверенности.Вставить("ДатаОбновленияСтатуса", ДополнительныеСведения.ДатаОбновленияСтатуса);
		КонецЕсли;

		Если КлючевыеРеквизиты.Количество() = ДанныеПодготовленны Тогда
			ТекущийЭлемент = ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующий);
			Результат.Ссылка = ТекущийЭлемент;
			Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
				Результат.Выполнено = Истина;
			Иначе
				Результат.Ошибка = НСтр(
					"ru = 'Не удалось запись элемент справочника. Подробности в журнале регистрации.'");
			КонецЕсли;
		Иначе
			Результат.Ошибка = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

// Выгружает данные машиночитаемой доверенности в файл обмена.
// 
// Параметры:
//  СправочникСсылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Машиночитаемая доверенность.
//  ИдентификаторФайла - Строка - Идентификатор файла.
// 
// Возвращаемое значение:
//  Структура - Результат выгрузки:
//   * Содержимое - Строка - Содержание файла.
//   * ИмяФайла - Строка - Имя файла.
//
Функция ВыгрузитьЭлементВФайлОбмена(СправочникСсылка, ИдентификаторФайла = "") Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Содержимое", "");
	Результат.Вставить("ИмяФайла", ИдентификаторФайла);

	ДанныеСправочника = ДанныеИзИнформационнойБазы(СправочникСсылка);

	Если ПустаяСтрока(ИдентификаторФайла) Тогда
		Результат.ИмяФайла = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(СправочникСсылка);
	КонецЕсли;

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("utf-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВерсПрог", "1С:Предприятие 8");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИдФайл", Результат.ИмяФайла);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВерсФорм", "1.01");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xsi:noNamespaceSchemaLocation", "ON_DOVBB_1_928_00_01_01_01.xsd", Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance", Ложь);

	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОКУД", ДанныеСправочника.ОКУД);
	
	// фомирование раздела Сведедения о доверенности
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвДов");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомДовер", ДанныеСправочника.Номер);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаНач", ДанныеСправочника.ДатаВыдачи);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрПередов", ?(ДанныеСправочника.ВозможноПередоверие, "1", "2"));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомПредДовер", ДанныеСправочника.ПредыдующийНомер, Ложь);
	Если ЗначениеЗаполнено(ДанныеСправочника.ДатаОкончания) Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ДатаОкон", ДанныеСправочника.ДатаОкончания);
	Иначе
		ЗаписатьУзелXML(ЗаписьXML, "СрокДейст", ДанныеСправочника.СрокДействия);
	КонецЕсли;

	ЗаписатьУзелXML(ЗаписьXML, "СведСистОтм", ДанныеСправочника.СведенияОбИнформационнойСистеме);
	ЗаписьXML.ЗаписатьКонецЭлемента(); // СвДов
	
	// фомирование раздела Сведения о доверителе
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверит");

	Если ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО" Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИнОргДовер");

		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимИО", ДанныеСправочника.ДоверительЮЛ_НаимОрг);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СтрРег", ДанныеСправочника.ДоверительЮЛ_СтрРег);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимРегОрг", ДанныеСправочника.ДоверительЮЛ_НаимРегОрг, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "РегНомер", ДанныеСправочника.ДоверительЮЛ_РегНомер, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "АдрСтрРег", ДанныеСправочника.ДоверительЮЛ_Адр);

		ЗаписьXML.ЗаписатьНачалоЭлемента("СвРукОП");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ДоверительФЛ_ИНН, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Пол", ДанныеСправочника.ДоверительФЛ_Пол);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.ДоверительФЛ_ДатаРождения);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "МестоРожд", ДанныеСправочника.ДоверительФЛ_МестоРожд, Ложь);
		Если ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "1");
		ИначеЕсли ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_Гражданство) Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "2");
		Иначе
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "3");
		КонецЕсли;
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ДанныеСправочника.ДоверительФЛ_Гражданство, Ложь);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // СвРукОП

		ЗаписьXML.ЗаписатьКонецЭлемента(); // ИнОргДовер

	ИначеЕсли ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("РосОргДовер");

		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", ДанныеСправочника.ДоверительЮЛ_НаимОрг);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ДоверительЮЛ_ОГРН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "АдрРФ", ДанныеСправочника.ДоверительЮЛ_Адр);

		ЗаписьXML.ЗаписатьНачалоЭлемента("ЛицоБезДов");

		Если ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОрг");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", ДанныеСправочника.ЛицоБезДовЮЛ_НаимОрг);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ЛицоБезДовЮЛ_ИНН);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ЛицоБезДовЮЛ_КПП);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ЛицоБезДовЮЛ_ОГРН, Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // СвОрг
		КонецЕсли;

		ЗаписьXML.ЗаписатьНачалоЭлемента("СвФЛ");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ЛицоБезДовФЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС", ДанныеСправочника.ЛицоБезДовФЛ_СНИЛС);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ДанныеСправочника.ЛицоБезДовФЛ_Гражданство, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.ЛицоБезДовФЛ_ДатаРождения, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Должность", ДанныеСправочника.ЛицоБезДовФЛ_Должность, Ложь);

		ЗаписьXML.ЗаписатьКонецЭлемента(); // СвФЛ
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ЛицоБезДов
		ЗаписьXML.ЗаписатьКонецЭлемента(); // РосОргДовер

	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("ФЛДовер");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ДоверительФЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП", ДанныеСправочника.ДоверительФЛ_ОГРН, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС", ДанныеСправочника.ДоверительФЛ_СНИЛС);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ДанныеСправочника.ДоверительФЛ_Гражданство, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.ДоверительФЛ_ДатаРождения, Ложь);

		ЗаписьXML.ЗаписатьКонецЭлемента(); // ФЛДовер

	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента(); // СвДоверит
	
	// фомирование раздела Сведения об уполномоченном представителе
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвУпПред");
	
	Для Каждого Полномочие Из ДанныеСправочника.ПредставительЮЛ_Полномочия Цикл
		ЗаписатьУзелXML(ЗаписьXML, "ПрОблПолн", Полномочие);
	КонецЦикла;

	ЗаписьXML.ЗаписатьНачалоЭлемента("СвПред");

	Если ЗначениеЗаполнено(ДанныеСправочника.ПредставительЮЛ_ИНН) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвОрг");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", ДанныеСправочника.ПредставительЮЛ_НаимОрг);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ПредставительЮЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ПредставительЮЛ_КПП);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ПредставительЮЛ_ОГРН, Ложь);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // СвОрг
	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("СведФизЛ");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ПредставительФЛ_ИНН);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП", ДанныеСправочника.ПредставительФЛ_ОГРН, Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СНИЛС", ДанныеСправочника.ПредставительФЛ_СНИЛС);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Гражданство", ДанныеСправочника.ПредставительФЛ_Гражданство, Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.ПредставительФЛ_ДатаРождения, Ложь);

	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
	ВыгрузитьФИОУзла(ЗаписьXML, ДанныеСправочника.ПредставительФЛ_Фамилия, ДанныеСправочника.ПредставительФЛ_Имя,
		ДанныеСправочника.ПредставительФЛ_Отчество);
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ФИО

	ВыгрузитьУдостоверениеУзла(ЗаписьXML, ДанныеСправочника.ПредставительФЛ_ВидДок,
		ДанныеСправочника.ПредставительФЛ_СерДок, ДанныеСправочника.ПредставительФЛ_НомДок,
		ДанныеСправочника.ПредставительФЛ_ДатаДок, ДанныеСправочника.ПредставительФЛ_ВыдДок,
		ДанныеСправочника.ПредставительФЛ_КодВыдДок);

	ЗаписьXML.ЗаписатьКонецЭлемента(); // СведФизЛ

	ЗаписьXML.ЗаписатьКонецЭлемента(); // СвПред
	ЗаписьXML.ЗаписатьКонецЭлемента(); // СвУпПред
	
	// фомирование раздела Сведения об подписанте доверителя
	ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
	ВыгрузитьФИОУзла(ЗаписьXML, ДанныеСправочника.ЛицоБезДовФЛ_Фамилия, ДанныеСправочника.ЛицоБезДовФЛ_Имя,
		ДанныеСправочника.ЛицоБезДовФЛ_Отчество);
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Подписант

	ЗаписьXML.ЗаписатьКонецЭлемента(); // Документ
	
	// Иные сведения по соглашению участников электронного взаимодействия
	// и по требованиям федеральных органов исполнительной власти.
	Если ЗначениеЗаполнено(ДанныеСправочника.ИныеСведения) Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ИнСвед", ДанныеСправочника.ИныеСведения);
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента(); // Файл

	Результат.Содержимое = ЗаписьXML.Закрыть();

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Ключ") Тогда
		Если ВидФормы = "ФормаОбъекта" И Параметры.Ключ.Статус = Перечисления.СтатусыМашиночитаемойДоверенности.Зарегистрировано Тогда
			ВыбраннаяФорма = "Справочник.МашиночитаемыеДоверенностиОрганизаций.Форма.ФормаПросмотра";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаЭлементаСправочника

Функция ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующий)

	Результат = Неопределено;
	НашлиЭлемент = Неопределено;

	Если ОбновлятьСуществующий Тогда
		НашлиЭлемент = Справочники.МашиночитаемыеДоверенностиОрганизаций.НайтиПоРеквизиту(
			"НомерДоверенности", ДанныеДоверенности.НомерДоверенности);		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НашлиЭлемент) Тогда
		ОбъектСправочника = Справочники.МашиночитаемыеДоверенностиОрганизаций.СоздатьЭлемент();
	Иначе
		ОбъектСправочника = НашлиЭлемент.ПолучитьОбъект();
		Для Каждого СтрокаРеквизита Из ОбъектСправочника.Метаданные().Реквизиты Цикл
			ОбъектСправочника[СтрокаРеквизита.Имя] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	// здесь переносим значения реквизитов
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеДоверенности);

	ТабличныеЧасти = Новый Структура;
	ТабличныеЧасти.Вставить("ФИО", ДанныеДоверенности.ФИО);
	ТабличныеЧасти.Вставить("ПолномочияПредставителя", ДанныеДоверенности.ПолномочияПредставителя);
	ТабличныеЧасти.Вставить("УдостоверенияЛичности", ДанныеДоверенности.УдостоверенияЛичности);

	Для Каждого СтрокаТЧ Из ТабличныеЧасти Цикл
		ТекущаяТЧ = ОбъектСправочника[СтрокаТЧ.Ключ];
		ТекущаяТЧ.Очистить();
		Для Каждого НоваяСтрока Из СтрокаТЧ.Значение Цикл
			ДобавленнаяСтрока = ТекущаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НоваяСтрока);
		КонецЦикла;
	КонецЦикла;

	Удачно = Ложь;

	Если ОбъектСправочника.ПроверитьЗаполнение() Тогда

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.МашиночитаемыеДоверенностиОрганизаций");
		Если Не ОбъектСправочника.ЭтоНовый() Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСправочника.Ссылка);
		КонецЕсли;

		Удачно = Истина;

		НачатьТранзакцию();

		Попытка
			Блокировка.Заблокировать();
			ОбъектСправочника.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИмяСобытия = НСтр("ru = 'Ошибка изменения МЧД.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ДанныеОшибки);
			Удачно = Ложь;
		КонецПопытки;

	КонецЕсли;

	Если Удачно Тогда
		Результат = ОбъектСправочника.Ссылка;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ДанныеИзИнформационнойБазы(СправочникСсылка)

	Результат = Новый Структура;
	Результат.Вставить("ОКУД", "0200000");

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиПолномочияПредставителя.Ссылка КАК Доверенность,
	|	МашиночитаемыеДоверенностиПолномочияПредставителя.ПризнакПолныеПолномочия КАК ПризнакПолныеПолномочия,
	|	&ТекстЗапросаРеквизитовПолномочий
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций.ПолномочияПредставителя КАК МашиночитаемыеДоверенностиПолномочияПредставителя
	|ГДЕ
	|	МашиночитаемыеДоверенностиПолномочияПредставителя.Ссылка = &СправочникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиФИО.Владелец КАК Владелец,
	|	МашиночитаемыеДоверенностиФИО.Фамилия КАК Фамилия,
	|	МашиночитаемыеДоверенностиФИО.Имя КАК Имя,
	|	МашиночитаемыеДоверенностиФИО.Отчество КАК Отчество
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций.ФИО КАК МашиночитаемыеДоверенностиФИО
	|ГДЕ
	|	МашиночитаемыеДоверенностиФИО.Ссылка = &СправочникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенности.НомерДоверенности КАК НомерДоверенности,
	|	МашиночитаемыеДоверенности.ДатаВыдачи КАК ДатаВыдачи,
	|	МашиночитаемыеДоверенности.ДатаОкончания КАК ДатаОкончания,
	|	МашиночитаемыеДоверенности.СрокДействия КАК СрокДействия,
	|	МашиночитаемыеДоверенности.ВозможноПередоверие КАК ВозможноПередоверие,
	|	МашиночитаемыеДоверенности.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_ИностраннаяОрганизация КАК ДоверительЮЛ_ИностраннаяОрганизация,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_ИНН КАК ДоверительЮЛ_ИНН,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_КПП КАК ДоверительЮЛ_КПП,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_ОГРН КАК ДоверительЮЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_СтрРег КАК ДоверительЮЛ_СтрРег,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_НаимРегОрг КАК ДоверительЮЛ_НаимРегОрг,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_РегНомер КАК ДоверительЮЛ_РегНомер,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_Адр КАК ДоверительЮЛ_Адр,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_ИНН КАК ДоверительФЛ_ИНН,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_ОГРН КАК ДоверительФЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_СНИЛС КАК ДоверительФЛ_СНИЛС,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_Гражданство КАК ДоверительФЛ_Гражданство,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_Пол КАК ДоверительФЛ_Пол,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_ДатаРождения КАК ДоверительФЛ_ДатаРождения,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_МестоРожд КАК ДоверительФЛ_МестоРожд,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_НаимОрг КАК ДоверительЮЛ_НаимОрг,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_НаимОрг КАК ЛицоБезДовЮЛ_НаимОрг,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_ИНН КАК ЛицоБезДовЮЛ_ИНН,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_КПП КАК ЛицоБезДовЮЛ_КПП,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_ОГРН КАК ЛицоБезДовЮЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_ИНН КАК ЛицоБезДовФЛ_ИНН,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_СНИЛС КАК ЛицоБезДовФЛ_СНИЛС,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_Гражданство КАК ЛицоБезДовФЛ_Гражданство,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_ДатаРождения КАК ЛицоБезДовФЛ_ДатаРождения,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_Должность КАК ЛицоБезДовФЛ_Должность,
	|	МашиночитаемыеДоверенности.ПредставительЮЛ_НаимОрг КАК ПредставительЮЛ_НаимОрг,
	|	МашиночитаемыеДоверенности.ПредставительЮЛ_ИНН КАК ПредставительЮЛ_ИНН,
	|	МашиночитаемыеДоверенности.ПредставительЮЛ_КПП КАК ПредставительЮЛ_КПП,
	|	МашиночитаемыеДоверенности.ПредставительЮЛ_ОГРН КАК ПредставительЮЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ПредставительФЛ_ИНН КАК ПредставительФЛ_ИНН,
	|	МашиночитаемыеДоверенности.ПредставительФЛ_ОГРН КАК ПредставительФЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ПредставительФЛ_СНИЛС КАК ПредставительФЛ_СНИЛС,
	|	МашиночитаемыеДоверенности.ПредставительФЛ_Гражданство КАК ПредставительФЛ_Гражданство,
	|	МашиночитаемыеДоверенности.ПредставительФЛ_ДатаРождения КАК ПредставительФЛ_ДатаРождения,
	|	МашиночитаемыеДоверенности.СведенияОбИнформационнойСистеме КАК СведенияОбИнформационнойСистеме
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенности
	|ГДЕ
	|	МашиночитаемыеДоверенности.Ссылка = &СправочникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.Владелец КАК Владелец,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.ВидДок КАК ВидДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.СерДок КАК СерДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.НомДок КАК НомДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.ДатаДок КАК ДатаДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.ВыдДок КАК ВыдДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.КодВыдДок КАК КодВыдДок
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций.УдостоверенияЛичности КАК МашиночитаемыеДоверенностиУдостоверенияЛичности
	|ГДЕ
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.Ссылка = &СправочникСсылка";
	
	ПоляВидовПолномочий = Новый Массив;
	Для ВидПолномочия = 1 По КоличествоВидовПолномочийПредставителя() Цикл
		ПолеВидаПолномочия = СтрШаблон("МашиночитаемыеДоверенностиПолномочияПредставителя.%1 КАК %1",
			ПредставлениеВидаПолномочия(ВидПолномочия));
		ПолеВидаПолномочия = ПолеВидаПолномочия + ?(ВидПолномочия = КоличествоВидовПолномочийПредставителя(), "", ",");
		ПоляВидовПолномочий.Добавить(ПолеВидаПолномочия);
	КонецЦикла;
	
	ТекстЗапросаРеквизитовПолномочий = СтрСоединить(ПоляВидовПолномочий, Символы.ПС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаРеквизитовПолномочий", ТекстЗапросаРеквизитовПолномочий);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СправочникСсылка", СправочникСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаПолномочий = ПакетЗапросов[0].Выгрузить();
	
	ПолномочияПредставителя = Новый Массив;
	Если ВыборкаПолномочий.Количество() = 0 ИЛИ ВыборкаПолномочий[0].ПризнакПолныеПолномочия Тогда
		ПолномочияПредставителя.Добавить("99");
	Иначе
		Для ВидПолномочия = 1 По КоличествоВидовПолномочийПредставителя() Цикл
			ПредставлениеВида = ПредставлениеВидаПолномочия(ВидПолномочия);
			Если ВыборкаПолномочий[0][ПредставлениеВида] Тогда
				ПолномочияПредставителя.Добавить(ВидПолномочияСтрокой(ВидПолномочия));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВыборкаПодписантов = ПакетЗапросов[1].Выгрузить();
	ВыборкаДокументов = ПакетЗапросов[3].Выгрузить();

	ПустойПодписант = Новый Структура("Имя, Отчество, Фамилия", "", "", "");

	ПустойДокумент = Новый Структура;
	ПустойДокумент.Вставить("ВидДок", "");
	ПустойДокумент.Вставить("СерДок", "");
	ПустойДокумент.Вставить("НомДок", "");
	ПустойДокумент.Вставить("ДатаДок", "");
	ПустойДокумент.Вставить("ВыдДок", "");
	ПустойДокумент.Вставить("КодВыдДок", "");

	ВыборкаИнформации = ПакетЗапросов[2].Выбрать();

	Если ВыборкаИнформации.Следующий() Тогда

		Результат.Вставить("СведенияОбИнформационнойСистеме", ВыборкаИнформации.СведенияОбИнформационнойСистеме);

		Результат.Вставить("Номер", ВыборкаИнформации.НомерДоверенности);
		Результат.Вставить("ДатаВыдачи", ВыборкаИнформации.ДатаВыдачи);
		Результат.Вставить("ДатаОкончания", ВыборкаИнформации.ДатаОкончания);
		Результат.Вставить("СрокДействия", ВыборкаИнформации.СрокДействия);
		Результат.Вставить("ВозможноПередоверие", ВыборкаИнформации.ВозможноПередоверие);
		Результат.Вставить("ПредыдующийНомер", ВыборкаИнформации.НомерРодительскойДоверенности);
		
		// информация об доверителе
		Результат.Вставить("ИностраннаяОрганизация", ВыборкаИнформации.ДоверительЮЛ_ИностраннаяОрганизация);
		Результат.Вставить("ДоверительЮЛ_ИНН", ВыборкаИнформации.ДоверительЮЛ_ИНН);
		Результат.Вставить("ДоверительЮЛ_КПП", ВыборкаИнформации.ДоверительЮЛ_КПП);
		Результат.Вставить("ДоверительЮЛ_ОГРН", ВыборкаИнформации.ДоверительЮЛ_ОГРН);
		Результат.Вставить("ДоверительЮЛ_СтрРег", ВыборкаИнформации.ДоверительЮЛ_СтрРег);
		Результат.Вставить("ДоверительЮЛ_НаимРегОрг", ВыборкаИнформации.ДоверительЮЛ_НаимРегОрг);
		Результат.Вставить("ДоверительЮЛ_РегНомер", ВыборкаИнформации.ДоверительЮЛ_РегНомер);
		Результат.Вставить("ДоверительЮЛ_Адр", ВыборкаИнформации.ДоверительЮЛ_Адр);
		Результат.Вставить("ДоверительФЛ_ИНН", ВыборкаИнформации.ДоверительФЛ_ИНН);
		Результат.Вставить("ДоверительФЛ_ОГРН", ВыборкаИнформации.ДоверительФЛ_ОГРН);
		Результат.Вставить("ДоверительФЛ_СНИЛС", ВыборкаИнформации.ДоверительФЛ_СНИЛС);
		Результат.Вставить("ДоверительФЛ_Гражданство", ВыборкаИнформации.ДоверительФЛ_Гражданство);
		Результат.Вставить("ДоверительФЛ_Пол", ВыборкаИнформации.ДоверительФЛ_Пол);
		Результат.Вставить("ДоверительФЛ_ДатаРождения", ВыборкаИнформации.ДоверительФЛ_ДатаРождения);
		Результат.Вставить("ДоверительФЛ_МестоРожд", ВыборкаИнформации.ДоверительФЛ_МестоРожд);
		Результат.Вставить("ДоверительЮЛ_НаимОрг", ВыборкаИнформации.ДоверительЮЛ_НаимОрг);

		Если Результат.ИностраннаяОрганизация Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ИО");
		ИначеЕсли ЗначениеЗаполнено(Результат.ДоверительЮЛ_ИНН) Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ЮЛ");
		Иначе
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ФЛ");
		КонецЕсли;
		
		// информация об подписанте
		Результат.Вставить("ЛицоБезДовЮЛ_НаимОрг", ВыборкаИнформации.ЛицоБезДовЮЛ_НаимОрг);
		Результат.Вставить("ЛицоБезДовЮЛ_ИНН", ВыборкаИнформации.ЛицоБезДовЮЛ_ИНН);
		Результат.Вставить("ЛицоБезДовЮЛ_КПП", ВыборкаИнформации.ЛицоБезДовЮЛ_КПП);
		Результат.Вставить("ЛицоБезДовЮЛ_ОГРН", ВыборкаИнформации.ЛицоБезДовЮЛ_ОГРН);
		Результат.Вставить("ЛицоБезДовФЛ_ИНН", ВыборкаИнформации.ЛицоБезДовФЛ_ИНН);
		Результат.Вставить("ЛицоБезДовФЛ_СНИЛС", ВыборкаИнформации.ЛицоБезДовФЛ_СНИЛС);
		Результат.Вставить("ЛицоБезДовФЛ_Гражданство", ВыборкаИнформации.ЛицоБезДовФЛ_Гражданство);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаРождения", ВыборкаИнформации.ЛицоБезДовФЛ_ДатаРождения);
		Результат.Вставить("ЛицоБезДовФЛ_Должность", ВыборкаИнформации.ЛицоБезДовФЛ_Должность);

		Если Результат.ДоверительЮЛ_ТипОрганизации = "ФЛ" Тогда
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец",
				Перечисления.СубъектыДоверенности.ДоверительФЛ));
		Иначе
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец",
				Перечисления.СубъектыДоверенности.ДоверительРук));
		КонецЕсли;

		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ЛицоБезДовФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ЛицоБезДовФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ЛицоБезДовФЛ_Фамилия", НашлиФИО.Фамилия);

		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец",
			Перечисления.СубъектыДоверенности.ДоверительФЛ));
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ЛицоБезДовФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ЛицоБезДовФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ЛицоБезДовФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ЛицоБезДовФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ЛицоБезДовФЛ_КодВыдДок", НашлиДок.КодВыдДок);
		
		// информация о представителе
		Результат.Вставить("ПредставительЮЛ_НаимОрг", ВыборкаИнформации.ПредставительЮЛ_НаимОрг);
		Результат.Вставить("ПредставительЮЛ_ИНН", ВыборкаИнформации.ПредставительЮЛ_ИНН);
		Результат.Вставить("ПредставительЮЛ_КПП", ВыборкаИнформации.ПредставительЮЛ_КПП);
		Результат.Вставить("ПредставительЮЛ_ОГРН", ВыборкаИнформации.ПредставительЮЛ_ОГРН);
		Результат.Вставить("ПредставительФЛ_ИНН", ВыборкаИнформации.ПредставительФЛ_ИНН);
		Результат.Вставить("ПредставительФЛ_ОГРН", ВыборкаИнформации.ПредставительФЛ_ОГРН);
		Результат.Вставить("ПредставительФЛ_СНИЛС", ВыборкаИнформации.ПредставительФЛ_СНИЛС);
		Результат.Вставить("ПредставительФЛ_Гражданство", ВыборкаИнформации.ПредставительФЛ_Гражданство);
		Результат.Вставить("ПредставительФЛ_ДатаРождения", ВыборкаИнформации.ПредставительФЛ_ДатаРождения);
		Результат.Вставить("ПредставительЮЛ_Полномочия", ПолномочияПредставителя);

		ТипВладельца = Перечисления.СубъектыДоверенности.ПредставительФЛ;
		НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", ТипВладельца));

		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ПредставительФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ПредставительФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ПредставительФЛ_Фамилия", НашлиФИО.Фамилия);

		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец", ТипВладельца));

		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ПредставительФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ПредставительФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ПредставительФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ПредставительФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ПредставительФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ПредставительФЛ_КодВыдДок", НашлиДок.КодВыдДок);

	КонецЕсли;

	Результат.Вставить("ИныеСведения", "");

	Возврат Результат;

КонецФункции

Процедура ВыгрузитьФИОУзла(ЗаписьXML, Фамилия, Имя, Отчество)

	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Фамилия", Фамилия);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Имя", Имя);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Отчество", Отчество, Ложь);

КонецПроцедуры

Процедура ВыгрузитьУдостоверениеУзла(ЗаписьXML, ВидДокумента, СерияДокумента, НомерДокумента, ДатаВыдачи, Выдан,
	КодПодразделения)

	ЗаписьXML.ЗаписатьНачалоЭлемента("УдЛичн");

	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодВидДок", ВидДокумента);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СерНомДок", СокрЛП(СерияДокумента + " " + НомерДокумента));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаДок", ДатаВыдачи);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВыдДок", Выдан, Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодВыдДок", КодПодразделения, Ложь);

	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

Функция КоличествоВидовПолномочийПредставителя()
	
	Возврат 25;
	
КонецФункции

Функция ПредставлениеВидаПолномочия(ВидПолномочия)
	
	Возврат "Признак" + ВидПолномочияСтрокой(ВидПолномочия);
	
КонецФункции

Функция ВидПолномочияСтрокой(ВидПолномочия)
	
	Возврат Формат(ВидПолномочия, "ЧЦ=2; ЧВН=");
	
КонецФункции

#КонецОбласти

#Область БазовыйФункционалDOM

// https://soltau.ru/index.php/themes/dev/item/413

Функция ПодготовитьДокументDOM(ВходящиеДанные)

	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;

	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);

	Возврат ДокументDOM;

КонецФункции

Функция ПолучитьВыборкуЭлементоDOM(УзелВладелец, ТекстПоиска)

	Результат = Новый Массив;

	ДокументВладелец = УзелВладелец.ДокументВладелец;
	РазыменовательИмен = Новый РазыменовательПространствИменDOM(ДокументВладелец);
	НашлиЭлементы = ДокументВладелец.ВычислитьВыражениеXPath(ТекстПоиска, УзелВладелец, РазыменовательИмен);

	ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	Пока ОчереднойЭлемент <> Неопределено Цикл
		Результат.Добавить(ОчереднойЭлемент);
		ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПодготовитьПредставлениеДаты(ПредставлениеДаты)

	Результат = ПредставлениеДаты;

	МассивСтроки = СтрРазделить(ПредставлениеДаты, ".", Ложь);

	Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[2]) = 4 Тогда
		Результат = МассивСтроки[2] + МассивСтроки[1] + МассивСтроки[0];
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПодготовитьПредставлениеСтраны(ПредставлениеСтраны)

	Результат = Справочники.СтраныМира.ПустаяСсылка();

	Если ЗначениеЗаполнено(ПредставлениеСтраны) Тогда
		Результат = Справочники.СтраныМира.НайтиПоКоду(ПредставлениеСтраны);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПодготовитьПредставлениеСерияНомер(ПредставлениеСерияНомер)

	Результат = Новый Структура;
	Результат.Вставить("Серия", ПредставлениеСерияНомер);
	Результат.Вставить("Номер", "");

	МассивСтроки = СтрРазделить(ПредставлениеСерияНомер, " ", Ложь);

	Если МассивСтроки.Количество() > 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0] + " " + МассивСтроки[1]);
		МассивСтроки.Удалить(0);
		МассивСтроки.Удалить(0);
		Результат.Вставить("Номер", СтрСоединить(МассивСтроки, " "));
	ИначеЕсли МассивСтроки.Количество() = 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0]);
		Результат.Вставить("Номер", МассивСтроки[1]);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПодыскатьИнформациюВладельца(СписокСправочников, ИНН, КПП = "", СНИЛС = "")

	Результат = Неопределено;

	МассивСправочников = СтрРазделить(СписокСправочников, ",", Ложь);

	Если МассивСправочников.Найти("Организации") <> Неопределено
		ИЛИ МассивСправочников.Найти("Контрагенты") <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ИНН", ИНН);
		Если ЗначениеЗаполнено(КПП) Тогда
			СтруктураПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		ИмяСправочника = ?(МассивСправочников.Найти("Организации") <> Неопределено, "Организации", "Контрагенты");
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяСправочника, Результат, СтруктураПоиска);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) И МассивСправочников.Найти("ФизическиеЛица") <> Неопределено Тогда
		
		СведенияФизлица = Новый Структура;
		СведенияФизлица.Вставить("ИНН", ИНН);
		Результат = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(СведенияФизлица);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Находит элемент документа DOM, проверяет что оно одно и пытается получить значение и привести тип.
//
Функция ПолучитьЗначениеДокумента(УзелВладелец, ТекстПоиска, ЗначениеПоУмолчанию = Неопределено)

	Результат = ЗначениеПоУмолчанию;

	ВыборкаЭлементов = ПолучитьВыборкуЭлементоDOM(УзелВладелец, ТекстПоиска);

	Если ВыборкаЭлементов.Количество() = 1 Тогда

		ЭлементВыборки = ВыборкаЭлементов[0];
		Если ТипЗнч(ЭлементВыборки) = Тип("АтрибутDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.Значение;
		ИначеЕсли ТипЗнч(ЭлементВыборки) = Тип("ЭлементDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.ТекстовоеСодержимое;
		Иначе
			ПредставлениеЗначения = ЭлементВыборки.ЗначениеУзла;
		КонецЕсли;

		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеДаты(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.СтраныМира") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеСтраны(ПредставлениеЗначения);
		КонецЕсли;

		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЗначениеПоУмолчанию));
			ТекущийТип = Новый ОписаниеТипов(МассивТипов);
			Результат = ТекущийТип.ПривестиЗначение(ПредставлениеЗначения);
		Иначе
			Результат = ПредставлениеЗначения;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ЗаписатьУзелXML(данныеXML, ИмяУзла, ЗначениеУзла, ВыгружатьПустые = Истина)

	ПредставлениеЗначения = ЗначениеВыгрузкиXML(ЗначениеУзла);

	Если ВыгружатьПустые Или ЗначениеЗаполнено(ПредставлениеЗначения) Тогда
		данныеXML.ЗаписатьНачалоЭлемента(ИмяУзла);
		данныеXML.ЗаписатьТекст(ПредставлениеЗначения);
		данныеXML.ЗаписатьКонецЭлемента();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьАтрибутУзлаXML(данныеXML, ИмяАтрибута, ЗначениеАтрибута, ВыгружатьПустые = Истина)

	ПредставлениеЗначения = ЗначениеВыгрузкиXML(ЗначениеАтрибута);

	Если ВыгружатьПустые Или ЗначениеЗаполнено(ПредставлениеЗначения) Тогда
		данныеXML.ЗаписатьНачалоАтрибута(ИмяАтрибута);
		данныеXML.ЗаписатьТекст(ПредставлениеЗначения);
		данныеXML.ЗаписатьКонецАтрибута();
	КонецЕсли;

КонецПроцедуры

Функция ЗначениеВыгрузкиXML(ЗначениеВыгрузки)

	Результат = Строка(ЗначениеВыгрузки);

	Если Не ЗначениеЗаполнено(ЗначениеВыгрузки) Тогда
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(ЗначениеВыгрузки) = Тип("Дата") Тогда
		Результат = Формат(ЗначениеВыгрузки, "ДФ=dd.MM.yyyy");
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.СтраныМира") Тогда
		Результат = ЗначениеВыгрузки.Код;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли