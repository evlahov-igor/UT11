#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ЗаписьСОграниченнымиПравами;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// << 25.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-880
	КР_ПередЗаписьюДополнительно(Отказ);
	// >> 25.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-880

	ЗаписьСОграниченнымиПравами = Не ПравоДоступа("Добавление", ЭтотОбъект.Метаданные());

	Если ЗаписьСОграниченнымиПравами Тогда

		// Проверка программной записи объекта.
		УправлениеДоступомУТ.ПроверитьДопустимостьИзмененияРеквизитовСправочника(ЭтотОбъект, "Наименование", Отказ);

		// Есть доступ только на изменение отдельных реквизитов склада (роль "ИзменениеНастроекОбеспеченияПоСкладу")
		// дополнительные обработки данных склада выполнять не требуется.
		Возврат;

	КонецЕсли;

	Если Не ЭтоГруппа Тогда

		ЗаполнитьВыборГруппыТекущегоСклада();
		ОбновитьФлагИспользованияСерий();
		ОбновитьФлагКонтроляОперативныхОстатков();
		
		СкладыКлиентСервер.СогласоватьЗначенияПризнаков(ЭтотОбъект);

	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда
		Если Не ЭтоГруппа Тогда
			РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ПометкаУдаления,ИспользоватьАдресноеХранение,ИспользоватьАдресноеХранениеСправочно");
				Если НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения Тогда
				ИспользоватьАдресноеХранение          = РеквизитыОбъекта.ИспользоватьАдресноеХранение;
				ИспользоватьАдресноеХранениеСправочно = РеквизитыОбъекта.ИспользоватьАдресноеХранениеСправочно;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		УстановитьПривилегированныйРежим(Истина);
 		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка <> &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьНесколькоСкладов.Установить(Истина);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ПодготовитьДанныеДляСинхронизацииКлючей(ЭтотОбъект, ПараметрыСинхронизацииКлючей());	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// << 25.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-880
	КР_ПриЗаписиДополнительно(Отказ);
	// >> 25.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-880
	
	Если ЗаписьСОграниченнымиПравами Тогда
		// Есть доступ только на изменение отдельных реквизитов склада (роль "ИзменениеНастроекОбеспеченияПоСкладу")
		// дополнительные обработки данных склада выполняются частично.
		УстановитьНастройкуОбеспечения(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		
		ЗаполнитьВыборГруппыПодчиненныхСкладов(Отказ);
		
	Иначе
		
		УстановитьНастройкуОбеспечения(ЭтотОбъект);
		ДобавитьСкладВТЧПолитикиУчетаСерийВидовНоменклатуры();
		
		// << 31.01.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
		ДополнительныеРесурсы = Новый Структура;
		ДополнительныеРесурсы.Вставить("КР_ИспользоватьРазмещениеКакПриходныйОрдер", КР_ИспользоватьРазмещениеКакПриходныйОрдер);
		ДополнительныеРесурсы.Вставить("КР_АдресныйСкладБезордернойОтгрузки", КР_АдресныйСкладБезордернойОтгрузки);
		// >> 31.01.2023 Марченко С.Н., КРОК, JIRA№A2105505-751										
		
		РегистрыСведений.НастройкиАдресныхСкладов.УстановитьНастройкиПоУмолчанию(Ссылка,
																				Справочники.СкладскиеПомещения.ПустаяСсылка(),
																				ИспользоватьАдресноеХранение,
																				ДатаНачалаАдресногоХраненияОстатков,
																				ИспользоватьАдресноеХранениеСправочно,
																				ИспользованиеРабочихУчастков = Перечисления.ИспользованиеСкладскихРабочихУчастков.Использовать
		// << 31.01.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
		, , ДополнительныеРесурсы 
		// >> 31.01.2023 Марченко С.Н., КРОК, JIRA№A2105505-751										
		);
		
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	УстановитьЗначениеФОИспользоватьОтветственноеХранение();
	
	ОбщегоНазначенияУТ.СинхронизироватьКлючи(ЭтотОбъект);	
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка КАК Ссылка,
	|	ВидыНоменклатурыПолитикиУчетаСерий.НомерСтроки КАК НомерСтроки 
	|ИЗ
	|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|ГДЕ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|	И НЕ ВидыНоменклатурыПолитикиУчетаСерий.Ссылка.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры";
	
	Запрос.УстановитьПараметр("Склад", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидНоменклатурыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидНоменклатурыОбъект.ПолитикиУчетаСерий.Удалить(ВидНоменклатурыОбъект.ПолитикиУчетаСерий[Выборка.НомерСтроки - 1]);
		ВидНоменклатурыОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаполнениеТЧПолитикиУчетаСерий");
		ВидНоменклатурыОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаИспользованияСерий");
		ВидНоменклатурыОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
		ВидНоменклатурыОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Не ЭтоГруппа Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
			РозничныйВидЦены = Ценообразование.ВидЦеныПрайсЛист();
			УчетныйВидЦены = РозничныйВидЦены;
			ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
		КонецЕсли;
		Если ДанныеЗаполнения <> Неопределено И ДанныеЗаполнения.Свойство("ТипСклада") Тогда
			ТипСклада = ДанныеЗаполнения.ТипСклада;
		Иначе
			Если ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
				ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
			Иначе
				ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
			КонецЕсли;
		КонецЕсли;
		Если ДанныеЗаполнения <> Неопределено И ДанныеЗаполнения.Свойство("Группа") Тогда
			Родитель = ДанныеЗаполнения.Группа;
		КонецЕсли;
		
		Если НоменклатураСервер.ЕстьВидНоменклатурыТребующийОбязательностиОрдернойСхемыПоИзлишкамНедостачам(Ссылка) Тогда
			ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = Истина;
		Иначе
			ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если Не ЭтоГруппа Тогда
		
		Если (ТипСклада <> Перечисления.ТипыСкладов.РозничныйМагазин
			Или ЗначениеЗаполнено(РозничныйВидЦены) ) Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РозничныйВидЦены");
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
		МассивНепроверяемыхРеквизитов.Добавить("ВыборГруппы");
		
		Если Не ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
			И ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры")
			И НоменклатураСервер.ЕстьВидНоменклатурыТребующийОбязательностиОрдернойСхемыПоИзлишкамНедостачам(Ссылка) Тогда
			
			ТекстСообщения = НСтр("ru = 'Нельзя отключить использование ордерной схемы при отражении излишков, недостач и порчи, т.к. есть вид номенклатуры, для которого настроено указание серий при отражении недостач и/или излишков.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач","Объект",Отказ);
		КонецЕсли;
		
	Иначе
		
		ПроверитьКорректностьВыбораГруппыРодителя(Отказ);
		
	КонецЕсли;
	
	Если Не ЭтоГруппа И НЕ СкладОтветственногоХранения Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидПоклажедержателя");
		МассивНепроверяемыхРеквизитов.Добавить("Поклажедержатель");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СкладыЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// << 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-291 
	// Добавлены новые реквизиты обязательность которых зависит от типа склада
	КР_ОбработкаПроверкиЗаполненияДополнительно(Отказ, ПроверяемыеРеквизиты);
	// >> 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-291 
		
КонецПроцедуры

Процедура ПриКопировании(КопируемыйОбъект)
	
	Если Не КопируемыйОбъект.ЭтоГруппа Тогда
		ИспользоватьСерииНоменклатуры = Ложь;
		ИндивидуальныйВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Процедура ЗаполнитьВыборГруппыПодчиненныхСкладов(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Родитель = &Ссылка
		|	И НЕ Склады.ЭтоГруппа
		|	И Склады.ВыборГруппы <> &ВыборГруппыСкладов";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось заблокировать %Элемент%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецПопытки;
			
		Объект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.Склады
		
		Попытка
			
			Объект.Записать();
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать %Элемент%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВыборГруппыТекущегоСклада()
	
	Если Не ЗначениеЗаполнено(Родитель) Или
		(Не ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки")) Тогда
		
		ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить;
		
	Иначе
		
		ВыборГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "ВыборГруппы");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьВыбораГруппыРодителя(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Родитель
		|	И Склады.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных)
		|	И &ВыборГруппыСкладов =  ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)";
		
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
			ТекстОшибки = НСтр("ru='Запрещено указывать значение ""Разрешить в заказах"", если в вышестоящей группе складов указано значение ""Разрешить в заказах и накладных""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ВыборГруппы",
			,
			Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьФлагИспользованияСерий()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ПропуститьОбновлениеФлагаИспользованияСерий") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Таблица.ИспользоватьСерииНоменклатуры) КАК ИспользоватьСерииНоменклатуры,
	|	МАКСИМУМ(Таблица.УчитыватьСебестоимостьПоСериям) КАК УчитыватьСебестоимостьПоСериям
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА НЕ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|					И ПолитикиУчетаСерий.ПолитикаУчетаСерий <> ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.СерииНеИспользуются)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ИспользоватьСерииНоменклатуры,
	|		ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ) КАК УчитыватьСебестоимостьПоСериям
	|	ИЗ
	|		Справочник.Склады КАК Склады
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ПО Склады.Ссылка = ПолитикиУчетаСерий.Склад
	|	ГДЕ
	|		НЕ &ЭтоНовый
	|		И Склады.Ссылка = &Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВидНоменклатуры.ПолитикаУчетаСерий, ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.СерииНеИспользуются))
	|				<> ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.СерииНеИспользуются)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|		ЕСТЬNULL(ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ)
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидНоменклатуры
	|	ГДЕ
	|		&ЭтоНовый
	|		И НЕ ВидНоменклатуры.ПометкаУдаления) КАК Таблица";
	
	Запрос.УстановитьПараметр("Склад", Ссылка);
	Запрос.УстановитьПараметр("ЭтоНовый", Не ЗначениеЗаполнено(Ссылка));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ИспользоватьСерииНоменклатуры  = Выборка.ИспользоватьСерииНоменклатуры;
	УчитыватьСебестоимостьПоСериям = Выборка.УчитыватьСебестоимостьПоСериям;
	
КонецПроцедуры

Процедура ОбновитьФлагКонтроляОперативныхОстатков()
	Если ДополнительныеСвойства.Свойство("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Таблица.КонтролироватьОперативныеОстатки) КАК КонтролироватьОперативныеОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|		КОНЕЦ КАК КонтролироватьОперативныеОстатки
	|	ИЗ
	|		Справочник.Склады КАК Склады
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ПО Склады.Ссылка = ПолитикиУчетаСерий.Склад
	|	ГДЕ
	|		НЕ &ЭтоНовый
	|		И Склады.Ссылка = &Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ВидНоменклатуры.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|		КОНЕЦ КАК КонтролироватьОперативныеОстатки
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидНоменклатуры
	|	ГДЕ
	|		&ЭтоНовый) КАК Таблица";
	
	Запрос.УстановитьПараметр("Склад", Ссылка);
	Запрос.УстановитьПараметр("ЭтоНовый", Не ЗначениеЗаполнено(Ссылка));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.КонтролироватьОперативныеОстатки Тогда
		КонтролироватьОперативныеОстатки = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСкладВТЧПолитикиУчетаСерийВидовНоменклатуры()
	
	Если ДополнительныеСвойства.ЭтоНовый
		И ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка             КАК Ссылка,
		|	ВидыНоменклатуры.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ИспользоватьСерии
		|	И НЕ ВидыНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ВидОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВидыНоменклатуры
			
			НоваяСтрока = ВидОбъект.ПолитикиУчетаСерий.Добавить();
			НоваяСтрока.Склад				= Ссылка;
			НоваяСтрока.ПолитикаУчетаСерий  = Выборка.ПолитикаУчетаСерий;
			
			ВидОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаполнениеТЧПолитикиУчетаСерий");
			ВидОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаИспользованияСерий");
			ВидОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
			
			ВидОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкуОбеспечения(Объект)

	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкаКонтроляОбеспечения) Тогда
		РегистрыСведений.НастройкаКонтроляОбеспечения.УстановитьНастройку(
			Объект.Ссылка,
			Объект.КонтролироватьСвободныеОстатки);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьЗначениеФОИспользоватьОтветственноеХранение()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначениеОпции = Константы.ИспользоватьОтветственноеХранение.Получить();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьОтвСклад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.СкладОтветственногоХранения");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = ЗначениеОпции Тогда
		Константы.ИспользоватьОтветственноеХранение.Установить(НЕ ЗначениеОпции);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыСинхронизацииКлючей()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("Справочник.КлючиАналитикиУчетаНоменклатуры", "ПометкаУдаления");
	Результат.Вставить("Справочник.КлючиРеестраДокументов", "ПометкаУдаления,Наименование");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область КР_ДобавленныеПроцедурыИФункции

#Область КР_ОбработчикиСобытий

// << 25.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-880
Процедура КР_ПередЗаписьюДополнительно(Отказ)
	
	// << 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-291 
	// Требуется доп. контроль уникальности реквизитов. Вызывается в событии ПередЗаписью
	КР_КонтрольУникальностиРеквизитов(Отказ);
	// >> 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-291 	
	
	КР_КонтрольТребуетсяУведомлениеОбИзмененииКИ(Отказ);

	// << 01.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1262
	// Автоматическое создание складских помещений на основании уникальных GUIDов     
	// Пока только для новых складов, которые прилетят с интеграцией	
	Если ЭтоНовый()  
		// A2105505-1241
		И Не ДополнительныеСвойства.Свойство(КР_УТ11_ЦБ_Магазин_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен())
		//
		И КР_ВидСклада = Перечисления.КР_ВидыСкладов.Магазин
		И ИспользоватьСкладскиеПомещения Тогда 
		
		// Определимся с ссылкой
		Если ЭтоНовый() Тогда 
			ТекущаяСсылка = ПолучитьСсылкуНового();
			Если Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда 
				ТекущаяСсылка = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор);
				УстановитьСсылкуНового(ТекущаяСсылка);
			КонецЕсли;         
		Иначе
			ТекущаяСсылка = Ссылка;
		КонецЕсли;   
		
		МенеджерСкладскиеПомещения = Справочники.СкладскиеПомещения;
		ТипыСкладскихПомещений = Перечисления.КР_ТипыСкладскихПомещений;
		
		ПомещениеСкладМагазина = 
			МенеджерСкладскиеПомещения.КР_СоздатьСкладскоеПомещениеПоТипу(ТекущаяСсылка, ТипыСкладскихПомещений.СкладМагазина);
		ПомещениеТорговыйЗал = 
			МенеджерСкладскиеПомещения.КР_СоздатьСкладскоеПомещениеПоТипу(ТекущаяСсылка, ТипыСкладскихПомещений.ТорговыйЗал);
		ПомещениеИнтернетТорговля = 
			МенеджерСкладскиеПомещения.КР_СоздатьСкладскоеПомещениеПоТипу(ТекущаяСсылка, ТипыСкладскихПомещений.ИнтернетТорговля);
		
		// Для складского помещения Магазин формируем ячейки отгрузки/приемки
		СкладскиеЯчейки = Справочники.СкладскиеЯчейки;
		ТипыСкладскихЯчеек = Перечисления.ТипыСкладскихЯчеек;
		
		// ПомещениеСкладМагазина
		СкладскиеЯчейки.КР_СоздатьСкладскуюЯчейкуПоТипу(ТекущаяСсылка, ПомещениеСкладМагазина, ТипыСкладскихЯчеек.Приемка);
		СкладскиеЯчейки.КР_СоздатьСкладскуюЯчейкуПоТипу(ТекущаяСсылка, ПомещениеСкладМагазина, ТипыСкладскихЯчеек.Отгрузка);
		
		//
		ПомещениеОбъект = ПомещениеТорговыйЗал.ПолучитьОбъект();
		ПомещениеОбъект.КР_СоздатьОбновитьСкладскуюЯчейку();
		
		ПомещениеОбъект = ПомещениеИнтернетТорговля.ПолучитьОбъект();
		ПомещениеОбъект.КР_СоздатьОбновитьСкладскуюЯчейку();
		
		// и специфические ячейки и заполняем их в реквизиты склада, если они не заполнены
		Если Не ЗначениеЗаполнено(КР_ЯчейкаХраненияФорменнойОдежды) Тогда 
			КР_ЯчейкаХраненияФорменнойОдежды = СкладскиеЯчейки.КР_СоздатьСкладскуюЯчейкуПоТипу(ТекущаяСсылка, 
				ПомещениеСкладМагазина, ТипыСкладскихЯчеек.Хранение, "Форменная одежда");		
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КР_ЯчейкаХраненияБракованногоТовара) Тогда 
			КР_ЯчейкаХраненияБракованногоТовара = СкладскиеЯчейки.КР_СоздатьСкладскуюЯчейкуПоТипу(ТекущаяСсылка, 
				ПомещениеСкладМагазина, ТипыСкладскихЯчеек.Хранение, "Бракованный товар");					
		КонецЕсли;
		
	КонецЕсли;	
	// >> 01.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1262
	
КонецПроцедуры

Процедура КР_ПриЗаписиДополнительно(Отказ)
	
	Если ДополнительныеСвойства.Свойство("ТребуетсяУведомлениеИзменениеКИ")
		И ДополнительныеСвойства.ТребуетсяУведомлениеИзменениеКИ = Истина Тогда
		КР_СформироватьУведомлениеОбИзмененииКИ(Отказ);
	КонецЕсли;
	
КонецПроцедуры // >> 25.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-880

// << 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-291 
// Добавлены новые реквизиты обязательность которых зависит от типа склада
// Входящие параметры:
// Отказ - Булево - параметр стандартного события
// ПроверяемыеРеквизиты  - Массив из строк - параметр стандартного события
//
Процедура КР_ОбработкаПроверкиЗаполненияДополнительно(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если (ТипСклада <> Перечисления.ТипыСкладов.РозничныйМагазин)  Тогда		
		МассивНепроверяемыхРеквизитов.Добавить("КР_НомерМагазина");
	Иначе
		ПроверяемыеРеквизиты.Добавить("БизнесРегион");
	КонецЕсли;

	// << 27.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2595
	Если КР_ВидСклада <> Перечисления.КР_ВидыСкладов.СкладРазбораРасхожденийМаркетплейса Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("КР_МаркетплейсСкладаРасхождений");
	КонецЕсли;	
	// >> 27.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2595
	
	// --> Евлахов Игорь Николаевич (Начало) 29.07.2024
	// Задача #4448
	Если КР_ВидСклада <> ПредопределенноеЗначение("Перечисление.КР_ВидыСкладов.Магазин") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("злМарка");			
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 29.07.2024
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // >> 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-291    

#КонецОбласти 

#Область КР_СлужебныеПроцедурыИФункции

// << 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-291 
// Требуется доп. контроль уникальности реквизитов. Вызывается в событии ПередЗаписью
// Отказ - Булево - флаг прерывания 
//
Процедура КР_КонтрольУникальностиРеквизитов(Отказ)
	
	Если ТипСклада <> Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		Возврат;			
	КонецЕсли;      
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Ссылка КАК Ссылка,
	|	Склады.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|	И Склады.ПометкаУдаления = ЛОЖЬ
	|	И Склады.КР_НомерМагазина = &КР_НомерМагазина
	|	И Склады.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("КР_НомерМагазина", КР_НомерМагазина);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;  
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();   
	ВыборкаДетальныеЗаписи.Следующий();
	ТекстСообщения = НСтр("ru = 'Текущий код магазина уже используется в %1'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ВыборкаДетальныеЗаписи.Наименование);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "КР_НомерМагазина", Отказ);
	
КонецПроцедуры // >> 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-291 

// << 25.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-880
Процедура КР_КонтрольТребуетсяУведомлениеОбИзмененииКИ(Отказ)
	
	Если ЭтоНовый()
		Или Не ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		Возврат;
	КонецЕсли;
	
	ДатаАктуальности = ТекущаяДатаСеанса();
	КИОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ЭтотОбъект, , ДатаАктуальности, Ложь);
	КИСсылки  = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ЭтотОбъект.Ссылка, , ДатаАктуальности, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КИОбъекта", КИОбъекта);
	Запрос.УстановитьПараметр("КИСсылки" , КИСсылки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КИОбъекта.Вид КАК Вид,
	|	КИОбъекта.Тип КАК Тип,
	|	ВЫРАЗИТЬ(КИОбъекта.Представление КАК СТРОКА(128)) КАК Представление
	|ПОМЕСТИТЬ врт_КИОбъекта
	|ИЗ
	|	&КИОбъекта КАК КИОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КИСсылки.Вид КАК Вид,
	|	КИСсылки.Тип КАК Тип,
	|	ВЫРАЗИТЬ(КИСсылки.Представление КАК СТРОКА(128)) КАК Представление
	|ПОМЕСТИТЬ врт_КИСсылки
	|ИЗ
	|	&КИСсылки КАК КИСсылки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Вид КАК Вид,
	|	ВложенныйЗапрос.Тип КАК Тип,
	|	ВложенныйЗапрос.Представление КАК Представление,
	|	ВложенныйЗапрос.Добавлен КАК Добавлен,
	|	ВложенныйЗапрос.Изменен КАК Изменен,
	|	ВложенныйЗапрос.Удален КАК Удален
	|ИЗ
	|	(ВЫБРАТЬ
	|		врт_КИОбъекта.Вид КАК Вид,
	|		врт_КИОбъекта.Тип КАК Тип,
	|		врт_КИОбъекта.Представление КАК Представление,
	|		ИСТИНА КАК Добавлен,
	|		ЛОЖЬ КАК Изменен,
	|		ЛОЖЬ КАК Удален
	|	ИЗ
	|		врт_КИОбъекта КАК врт_КИОбъекта
	|			ПОЛНОЕ СОЕДИНЕНИЕ врт_КИСсылки КАК врт_КИСсылки
	|			ПО врт_КИОбъекта.Вид = врт_КИСсылки.Вид
	|				И врт_КИОбъекта.Тип = врт_КИСсылки.Тип
	|	ГДЕ
	|		врт_КИСсылки.Вид ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		врт_КИОбъекта.Вид,
	|		врт_КИОбъекта.Тип,
	|		врт_КИОбъекта.Представление,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		врт_КИОбъекта КАК врт_КИОбъекта
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ врт_КИСсылки КАК врт_КИСсылки
	|			ПО врт_КИОбъекта.Вид = врт_КИСсылки.Вид
	|				И врт_КИОбъекта.Тип = врт_КИСсылки.Тип
	|	ГДЕ
	|		врт_КИОбъекта.Представление <> врт_КИСсылки.Представление
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		врт_КИСсылки.Вид,
	|		врт_КИСсылки.Тип,
	|		врт_КИСсылки.Представление,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		врт_КИОбъекта КАК врт_КИОбъекта
	|			ПОЛНОЕ СОЕДИНЕНИЕ врт_КИСсылки КАК врт_КИСсылки
	|			ПО врт_КИОбъекта.Вид = врт_КИСсылки.Вид
	|				И врт_КИОбъекта.Тип = врт_КИСсылки.Тип
	|	ГДЕ
	|		врт_КИОбъекта.Вид ЕСТЬ NULL) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Флаг
	|ИЗ
	|	врт_КИОбъекта КАК врт_КИОбъекта
	|		ПОЛНОЕ СОЕДИНЕНИЕ врт_КИСсылки КАК врт_КИСсылки
	|		ПО врт_КИОбъекта.Вид = врт_КИСсылки.Вид
	|			И врт_КИОбъекта.Тип = врт_КИСсылки.Тип
	|ГДЕ
	|	(НЕ врт_КИОбъекта.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ НЕ врт_КИСсылки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|	И (врт_КИОбъекта.Вид ЕСТЬ NULL
	|			ИЛИ врт_КИСсылки.Вид ЕСТЬ NULL
	|			ИЛИ врт_КИОбъекта.Представление <> врт_КИСсылки.Представление)";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	// Прим. разработчика
	// Используется метод РольДоступна(), т.к. используется роль-маркер.
	// Для полноправного пользователя это условие не должно выполняться
	Если РольДоступна("КР_ДобавлениеИзменениеКонтактнойИнформацииМагазина")
		И Не ПакетРезультатов[ПакетРезультатов.ВГраница()].Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Изменение адресной информации недоступно.'"), , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ПакетРезультатов[ПакетРезультатов.ВГраница() - 1].Пустой()
		И Не ДополнительныеСвойства.Свойство("ЗагрузкаГрафикаОтгрузкиПриемкиТМЦ") Тогда
		ДополнительныеСвойства.Вставить("ТребуетсяУведомлениеИзменениеКИ", Истина);
		ДополнительныеСвойства.Вставить("ИзмененнаяКИ",
			ПакетРезультатов[ПакетРезультатов.ВГраница() - 1].Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура КР_СформироватьУведомлениеОбИзмененииКИ(Отказ)
	
	ШаблонИзменения = НСтр("ru = 'Новый %1: %2'");
	ШаблонУдаления  = НСтр("ru = 'Удален %1'");
	ТекстыКИ = Новый Массив;
	Для Каждого СтрокаКИ Из ДополнительныеСвойства.ИзмененнаяКИ Цикл
		Если СтрокаКИ.Удален Тогда
			ТекстыКИ.Добавить(СтрШаблон(ШаблонУдаления, НРег(СтрокаКИ.Вид)));
		Иначе
			ТекстыКИ.Добавить(СтрШаблон(ШаблонИзменения, НРег(СтрокаКИ.Вид), СтрокаКИ.Представление));
		КонецЕсли;
	КонецЦикла;
	
	Получатели = КР_ДополнительныеНастройкиПовтИсп.МассивЗначений(
		"ПолучателиИзмененнойКонтактнойИнформацииМагазина", Ложь);
	КИПолучателей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		Получатели, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, , ТекущаяДатаСеанса());
	
	Если Не ТекстыКИ.Количество()
		Или Не КИПолучателей.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТемаПисьма = СтрШаблон(НСтр(
		"ru = 'Изменение контактной информации магазина ""%1""'"), ЭтотОбъект.Наименование);
	ТекстПисьма = СтрШаблон(НСтр(
		"ru = 'Добрый день!
		|
		|У магазина ""%1"" изменилась следующая контактная информация:
		|* '"), ЭтотОбъект.Наименование) + СтрСоединить(ТекстыКИ, Символы.ПС + "* ");
		
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	
	Письмо.Автор                    = Пользователи.ТекущийПользователь();
	Письмо.Ответственный            = Письмо.Автор;
	Письмо.Дата                     = ТекущаяДатаСеанса();
	Письмо.ДатаКогдаОтправить       = Письмо.Дата;
	Письмо.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	Письмо.Кодировка                = "UTF-8";
	Письмо.ОтправительПредставление = Строка(УчетнаяЗапись);
	Письмо.Текст                    = ТекстПисьма;
	Письмо.Тема                     = ТемаПисьма;
	Письмо.ТипТекста                = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	Письмо.УчетнаяЗапись            = УчетнаяЗапись;
	Письмо.СтатусПисьма             = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	Письмо.Размер                   = СтрДлина(Письмо.Тема) * 2 + СтрДлина(Письмо.Текст) * 2;
	
	Для Каждого ПолучательПисьма Из КИПолучателей Цикл
		НоваяСтрока = Письмо.ПолучателиПисьма.Добавить();
		НоваяСтрока.Адрес         = ПолучательПисьма.Представление;
		НоваяСтрока.Представление = Строка(ПолучательПисьма.Объект);
	КонецЦикла;
	Письмо.СписокПолучателейПисьма =
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма, Ложь);
	
	Попытка
		Письмо.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не удалось отправить письмо.'"), , , , Отказ);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры // >> 25.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-880

#КонецОбласти 

#КонецОбласти 
	
#КонецЕсли