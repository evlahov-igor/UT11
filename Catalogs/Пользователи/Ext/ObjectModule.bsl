///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ПараметрыОбработкиПользователяИБ; // Параметры, заполняемые при обработке пользователя ИБ.
                                        // Используются в обработчике события ПриЗаписи.

Перем ЭтоНовый; // Показывает, что был записан новый объект.
                // Используются в обработчике события ПриЗаписи.

#КонецОбласти

// *Область ПрограммныйИнтерфейс.
//
// Программный интерфейс объекта реализован через ДополнительныеСвойства:
//
// ОписаниеПользователяИБ - Структура со свойствами:
//   Действие - Строка - "Записать" или "Удалить".
//      1. Если Действие = "Удалить" другие свойства не требуются. Удаление
//      будет считаться успешным и в том случае, когда пользовательИБ
//      не найден по значению реквизита ИдентификаторПользователяИБ.
//      2. Если Действие = "Записать", тогда будет создан или обновлен
//      пользователь ИБ по указанным свойствам.
//
//   ВходВПрограммуРазрешен - Неопределено - вычислить автоматически:
//                            если вход в программу запрещен, тогда остается запрещен,
//                            иначе остается разрешен, кроме случая, когда
//                            все виды аутентификации установлены в Ложь.
//                          - Булево - если Истина, тогда установить аутентификацию, как
//                            указана или сохранена в значениях одноименных реквизитов;
//                            если Ложь, тогда снять все виды аутентификации у пользователя ИБ.
//                            Если свойство не указано - прямая установка сохраняемых и
//                            действующих видов аутентификации (для поддержки обратной совместимости).
//
//   ПотребоватьСменуПароляПриВходе - Булево - изменяет одноименный флажок карточки пользователя.
//                                  - Неопределено - флажок не изменяется (аналогично,
//                                        если свойство не указано).
//
//   АутентификацияСтандартная, АутентификацияОС, АутентификацияOpenID - установить
//      сохраняемые значения видов аутентификации и, в зависимости от использования свойства.
//      ВходВПрограммуРазрешен, установить действующие значения видов аутентификации.
// 
//   Остальные свойства.
//      Состав остальных свойств указывается аналогично составу свойств параметра.
//      ОбновляемыеСвойства для процедуры Пользователи.УстановитьСвойстваПользователяИБ(),
//      кроме свойства ПолноеИмя - устанавливается по Наименованию.
//
//      Для сопоставления существующего свободного пользователя ИБ с пользователем в справочнике,
//      с которым не сопоставлен другой существующий пользователь ИБ, нужно вставить свойство.
//      УникальныйИдентификатор. Если указать идентификатор пользователя ИБ, который
//      сопоставлен с текущим пользователем, ничего не изменится.
//
//   При выполнении действий "Записать" и "Удалить" реквизит объекта.
//   ИдентификаторПользователяИБ обновляется автоматически, его не следует изменять.
//
//   После выполнения действия в структуру вставляются (обновляются) следующие свойства:
//   - РезультатДействия - Строка, содержащая одно из значений:
//       "ДобавленПользовательИБ", "ИзмененПользовательИБ", "УдаленПользовательИБ",
//       "ОчищеноСопоставлениеСНесуществующимПользователемИБ", "НеТребуетсяУдалениеПользовательИБ".
//   - УникальныйИдентификатор - УникальныйИдентификатор пользователя ИБ.
//
// СозданиеАдминистратора - Строка - свойство должно быть вставлено с непустой строкой,
//   чтобы вызвать событие ПриСозданииАдминистратора после обработки структуры ОписаниеПользователяИБ
//   когда у созданного или измененного пользователя ИБ имеются роли администратора.
//   Это нужно, чтобы сделать связанные действия при создании администратора, например,
//   автоматически добавить пользователя в группу доступа Администраторы.
//
// *КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = ЭтоНовый();
	
	ПользователиСлужебный.НачатьОбработкуПользователяИБ(ЭтотОбъект, ПараметрыОбработкиПользователяИБ);
	
	// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
	КР_ПередЗаписью(Отказ);
	// >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ГруппаНовогоПользователя")
		И ЗначениеЗаполнено(ДополнительныеСвойства.ГруппаНовогоПользователя) Тогда
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.ГруппыПользователей");
		Блокировка.Заблокировать();
		
		ОбъектГруппы = ДополнительныеСвойства.ГруппаНовогоПользователя.ПолучитьОбъект(); // СправочникОбъект.ГруппыПользователей
		ОбъектГруппы.Состав.Добавить().Пользователь = Ссылка;
		ОбъектГруппы.Записать();
	КонецЕсли;
	
	// Обновление состава автоматической группы "Все пользователи".
	УчастникиИзменений = Новый Соответствие;
	ИзмененныеГруппы   = Новый Соответствие;
	
	ПользователиСлужебный.ОбновитьСоставыГруппПользователей(
		Справочники.ГруппыПользователей.ВсеПользователи, Ссылка, УчастникиИзменений, ИзмененныеГруппы);
	
	ПользователиСлужебный.ОбновитьИспользуемостьСоставовГруппПользователей(
		Ссылка, УчастникиИзменений, ИзмененныеГруппы);
	
	ПользователиСлужебный.ЗавершитьОбработкуПользователяИБ(
		ЭтотОбъект, ПараметрыОбработкиПользователяИБ);
	
	ПользователиСлужебный.ПослеОбновленияСоставовГруппПользователей(
		УчастникиИзменений, ИзмененныеГруппы);
	
	ПользователиСлужебный.ВключитьЗаданиеКонтрольАктивностиПользователейПриНеобходимости(Ссылка);
	
	ИнтеграцияПодсистемБСП.ПослеДобавленияИзмененияПользователяИлиГруппы(Ссылка, ЭтоНовый);
	
	Если ЭтоНовый 
		//++ НЕ ГОСИС
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоступом") И ПолучитьФункциональнуюОпцию("БазоваяВерсия") 
		//-- НЕ ГОСИС
		Тогда
	 
		// При добавлении нового пользователя запишем его в группу Администраторы
	 	Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
		|	И ГруппыДоступаПользователи.Пользователь = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Если Запрос.Выполнить().Пустой() Тогда
			
			ГруппаАдминистраторы = Справочники.ГруппыДоступа.Администраторы.ПолучитьОбъект();
			НовыйАдминистратор   = ГруппаАдминистраторы.Пользователи.Добавить();
			
			НовыйАдминистратор.Пользователь = Ссылка;
			
			ГруппаАдминистраторы.Записать();
			
		КонецЕсли;
		
 	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеДействияПередУдалениемВОбычномРежимеИПриОбменеДанными();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДополнительныеСвойства.Вставить("ЗначениеКопирования", ОбъектКопирования.Ссылка);
	
	ИдентификаторПользователяИБ = Неопределено;
	ИдентификаторПользователяСервиса = Неопределено;
	Подготовлен = Ложь;
	
	КонтактнаяИнформация.Очистить();
	Комментарий = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Только для внутреннего использования.
Процедура ОбщиеДействияПередУдалениемВОбычномРежимеИПриОбменеДанными() Экспорт
	
	// Требуется удалить пользователя ИБ, иначе он попадет в список ошибок в форме ПользователиИБ,
	// кроме того, вход под этим пользователем ИБ приведет к ошибке.
	
	ОписаниеПользователяИБ = Новый Структура;
	ОписаниеПользователяИБ.Вставить("Действие", "Удалить");
	ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	
	ПользователиСлужебный.НачатьОбработкуПользователяИБ(ЭтотОбъект, ПараметрыОбработкиПользователяИБ, Истина);
	ПользователиСлужебный.ЗавершитьОбработкуПользователяИБ(ЭтотОбъект, ПараметрыОбработкиПользователяИБ);
	
КонецПроцедуры

#КонецОбласти

#Область КР_ДополнительныеПроцедурыИФункции

// << 09.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2326
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Перенесено из КР_ПередЗаписью с рефакторингом
	
	// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
	
	Если КР_ВыгружатьВКассовоеПО Тогда   
		
		// << 09.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2326  
		ПроверяемыеРеквизиты.Добавить("Подразделение");
		ПроверяемыеРеквизиты.Добавить("ФизическоеЛицо");
		// >> 09.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2326
		
		ПодразделениеСклад = Подразделение.КР_Склад;
		
		Если ЗначениеЗаполнено(Подразделение) // A2105505-2326
			И Не ЗначениеЗаполнено(ПодразделениеСклад) Тогда
			Текст = НСтр("ru = 'Не заполнен склад в подразделении'");
			ОбщегоНазначения.СообщитьПользователю(Текст, , , "Объект.Подразделение", Отказ);   
		КонецЕсли;	
		
	КонецЕсли;

	// << 04.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2326
	Если Не Пользователи.ЭтоПолноправныйПользователь() 
		И РольДоступна("КР_ОграниченноеДобавлениеИзменениеПользователейПродавцов") Тогда 

		Если Не КР_ВыгружатьВКассовоеПО
			Или ПодразделениеСклад <> Пользователи.ТекущийПользователь().Подразделение.КР_Склад 
			Тогда 
			
			ТекстСообщения = НСтр("ru = 'Разрешено создание только пользователей для кассового ПО "
				+ "для своего подразделения'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;				
		
	КонецЕсли;	
	// >> 04.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2326
	
	// >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
	
КонецПроцедуры

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Процедура КР_ПередЗаписью(Отказ)
	
	Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "КР_Склад");
	
	Параметры = Новый Структура;
	Параметры.Вставить("Склад", Склад);
	
	Если Не Отказ Тогда
		КР_УстановитьКодПродавца(Параметры);
	КонецЕсли;
	
КонецПроцедуры // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Процедура КР_УстановитьКодПродавца(Параметры)
	
	Склад 			= Параметры.Склад;
	ГенерироватьКод = КР_ВыгружатьВКассовоеПО И Не ЗначениеЗаполнено(КР_КодПродавца) И ЗначениеЗаполнено(Склад);
	
	Если Не ГенерироватьКод Тогда
		Возврат;
	КонецЕсли;
	
	// 28.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
	// Далее изменения связаны с изменением типа реквизита КР_КодПродавца со строка(3) на число(5) 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(МАКСИМУМ(Пользователи.КР_КодПродавца), 0) КАК КодПродавца
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.ПометкаУдаления
	|	И Пользователи.Подразделение.КР_Склад = &Склад
	|	И Пользователи.КР_КодПродавца <> 0";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КодЧисло = 0;
	Если Выборка.Следующий() Тогда
		КодЧисло = Выборка.КодПродавца;
	КонецЕсли;
		
	КодЧисло = КодЧисло + 1;
	
	КР_КодПродавца = КодЧисло;
	
	//
	
КонецПроцедуры
// >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли