#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция определяет реквизиты выбранного эквайрингового терминала.
//
// Параметры:
//    ЭквайринговыйТерминал - СправочникСсылка.ЭквайринговыеТерминалы - Ссылка на эквайринговый терминал.
//
// Возвращаемое значение:
//    Структура - Реквизиты эквайрингового терминала.
//
Функция ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Владелец КАК ДоговорЭквайринга,
	|	ЭквайринговыеТерминалы.Владелец.Организация КАК Организация,
	|	ЭквайринговыеТерминалы.Владелец.Контрагент КАК Эквайер,
	|	ЭквайринговыеТерминалы.Владелец.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	ЭквайринговыеТерминалы.РазрешитьПлатежиБезУказанияЗаявок
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка = &ЭквайринговыйТерминал
	|";
	
	Запрос.УстановитьПараметр("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	
	СтруктураРеквизитов = Новый Структура("ДоговорЭквайринга, Организация, Эквайер, Валюта, РазрешитьПлатежиБезУказанияЗаявок");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Функция определяет эквайринговый терминал по выбранной организации и/или договору эквайринга.
//
// Возвращает эквайринговый терминал, если найден один эквайринговый терминал.
// Возвращает пустую ссылку, если эквайринговый терминал не найден или эквайринговых терминалов больше одного.
//
// Параметры:
//    Организация - СправочникСсылка.Организации - Выбранная организация.
//    Договор - СправочникСсылка.ДоговорыЭквайринга - Выбранный договор эквайринга.
//
// Возвращаемое значение:
//    СправочникСсылка.ЭквайринговыеТерминалы - Найденный эквайринговый терминал.
//
Функция ЭквайринговыйТерминалПоУмолчанию(Организация = Неопределено, Договор = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И (ЭквайринговыеТерминалы.Владелец.Организация = &Организация
	|		ИЛИ &Организация = Неопределено)
	|	И (ЭквайринговыеТерминалы.Владелец = &Договор
	|		ИЛИ &Договор = Неопределено)
	|");
	
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.УстановитьПараметр("Договор", ?(ЗначениеЗаполнено(Договор), Договор, Неопределено));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()=1 И Выборка.Следующий() Тогда
		ЭквайринговыйТерминал = Выборка.ЭквайринговыйТерминал;
	Иначе
		ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ЭквайринговыйТерминал;
	
КонецФункции

// Функция определяет эквайринговые терминалы по переданной организации и рабочему месту и возвращает их настройки РМК.
//
// Параметры:
//    Организация - СправочникСсылка.Организации - Организация, по которой необходимо вернуть описания экваринговых терминалов.
//    РабочееМесто - СправочникСсылка.РабочиеМеста - Текущее рабочее место.
//    ИспользоватьПодключаемоеОборудование - Булево -
//
// Возвращаемое значение:
//    СписокЗначений из Структура:
//    	* Ссылка - СправочникСсылка.ЭквайринговыеТерминалы - 
//    	* ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - 
//    	* ИспользоватьБезПодключенияОборудования - Булево -
//    	* НеЗапрашиватьНомерКарты - Булево -
//
Функция ПараметрыЭквайринговыхТерминаловПоОрганизации(Организация, РабочееМесто, ИспользоватьПодключаемоеОборудование) Экспорт

	ЭквайринговыеТерминалы = Новый СписокЗначений;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.ЭквайринговыйТерминал КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.НеЗапрашиватьНомерКарты КАК НеЗапрашиватьНомерКарты,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ИЗ
	|	Справочник.НастройкиРМК.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка.РабочееМесто = &РабочееМесто
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМестоОборудования)
	|		ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|	И ЭквайринговыеТерминалы.ЭквайринговыйТерминал.Владелец.БанковскийСчет.Владелец = &Организация
	|");
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Если ИспользоватьПодключаемоеОборудование Тогда
		Запрос.УстановитьПараметр("РабочееМестоОборудования", РабочееМесто);
	Иначе
		Запрос.УстановитьПараметр("РабочееМестоОборудования", Справочники.РабочиеМеста.ПустаяСсылка());
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭквайринговыйТерминал = Новый Структура;
		ЭквайринговыйТерминал.Вставить("Ссылка",                                 Выборка.Ссылка);
		ЭквайринговыйТерминал.Вставить("ПодключаемоеОборудование",               Выборка.ПодключаемоеОборудование);
		ЭквайринговыйТерминал.Вставить("ИспользоватьБезПодключенияОборудования", Выборка.ИспользоватьБезПодключенияОборудования);
		ЭквайринговыйТерминал.Вставить("НеЗапрашиватьНомерКарты",                Выборка.НеЗапрашиватьНомерКарты);
		
		ЭквайринговыеТерминалы.Добавить(ЭквайринговыйТерминал);
		
	КонецЦикла;
	
	Возврат ЭквайринговыеТерминалы;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЭтоГруппа ИЛИ
	|	ЗначениеРазрешено(Владелец.Организация)
	|	И( ЗначениеРазрешено(Ссылка)
	|	) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Реквизиты = ДенежныеСредстваВызовСервера.ЗначенияРеквизитовЭквайринговогоТерминала(Данные.Ссылка);
	
	Если ЗначениеЗаполнено(Реквизиты.ЭтоГруппа) И Не Реквизиты.ЭтоГруппа
		И ЗначениеЗаполнено(Реквизиты.Код) И СокрЛП(Реквизиты.Код) <> "0" Тогда
		СтандартнаяОбработка = Ложь;
		Представление = СокрЛП(Реквизиты.Код) + ", " + СокрЛП(Данные.Наименование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Партнер");
	Результат.Добавить("Договор");
	Результат.Добавить("БанковскийСчет");
	
	Возврат Результат;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ЭквайринговыеТерминалы.СгенерироватьДоговорыЭквайринга";
	Обработчик.Версия = "11.5.6.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fe4d216e-b569-11ea-b3de-0242ac130004");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ЭквайринговыеТерминалы.ЗарегистрироватьДанныеКГенерацииДоговоровЭквайринга";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Генерирует элементы справочника Договоры эквайринга.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.БанковскиеСчетаОрганизаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ЭквайринговыеТерминалы.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ДоговорыЭквайринга.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.ЭквайринговыеТерминалы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ЭквайринговыеТерминалы.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.БанковскиеСчетаОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКГенерацииДоговоровЭквайринга(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Данные.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК Данные
	|ГДЕ
	|	Данные.Владелец = ЗНАЧЕНИЕ(Справочник.ДоговорыЭквайринга.ПустаяСсылка)
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура СгенерироватьДоговорыЭквайринга(Параметры) Экспорт
	
	МетаданныеСправочника = ПустаяСсылка().Метаданные();
	ПолноеИмяОбъекта= МетаданныеСправочника.ПолноеИмя();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Ссылка КАК Ссылка,
	|	ЭквайринговыеТерминалы.УдалитьЭквайер КАК Контрагент,
	|	ЭквайринговыеТерминалы.УдалитьЭквайер.Партнер КАК Партнер,
	|	ЭквайринговыеТерминалы.УдалитьБанковскийСчет КАК БанковскийСчет,
	|	ЭквайринговыеТерминалы.УдалитьБанковскийСчет.Владелец КАК Организация,
	|	ЭквайринговыеТерминалы.УдалитьБанковскийСчет.Подразделение КАК Подразделение,
	|	ЭквайринговыеТерминалы.УдалитьБанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДоговорыЭквайринга.Ссылка КАК ДоговорЭквайринга,
	|	ЭквайринговыеТерминалы.Владелец КАК ДоговорЭквайрингаВладелец
	|ИЗ
	|	ИмяВТСсылокДляОбработки КАК ДанныеДляОбработки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|	ПО
	|		ЭквайринговыеТерминалы.Ссылка = ДанныеДляОбработки.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|	ПО
	|		ДоговорыЭквайринга.Контрагент = ЭквайринговыеТерминалы.УдалитьЭквайер
	|		И ДоговорыЭквайринга.БанковскийСчет = ЭквайринговыеТерминалы.УдалитьБанковскийСчет
	|		И ДоговорыЭквайринга.ИспользуютсяЭквайринговыеТерминалы
	|ИТОГИ ПО
	|	Контрагент,
	|	БанковскийСчет,
	|	ДоговорЭквайринга
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВТСсылокДляОбработки", Результат.ИмяВременнойТаблицы);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	ВыборкаКонтрагенты = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагенты.Следующий() Цикл
		ВыборкаБанковскийСчет = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаБанковскийСчет.Следующий() Цикл
			ВыборкаДоговоры = ВыборкаБанковскийСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговоры.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаБанковскийСчет.ДоговорЭквайринга) Тогда
					
					НачатьТранзакцию();
					Попытка
						
						ДоговорОбъект = Справочники.ДоговорыЭквайринга.СоздатьЭлемент();
						СтрокаНаименование = Строка(ВыборкаДоговоры.Контрагент) + ", " + Строка(ВыборкаДоговоры.Организация);
						ДоговорОбъект.Наименование                       = Лев(СтрокаНаименование, 50);
						ДоговорОбъект.Организация                        = ВыборкаДоговоры.Организация;
						ДоговорОбъект.БанковскийСчет                     = ВыборкаДоговоры.БанковскийСчет;
						ДоговорОбъект.Контрагент                         = ВыборкаДоговоры.Контрагент;
						ДоговорОбъект.Партнер                            = ВыборкаДоговоры.Партнер;
						ДоговорОбъект.ИспользуютсяЭквайринговыеТерминалы = Истина;
						ДоговорОбъект.ДетальнаяСверкаТранзакций          = Истина;
						ДоговорОбъект.СрокИсполненияПлатежа              = 1;
						ДоговорОбъект.СпособОтраженияКомиссии            = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ВОтчете;
						ДоговорОбъект.Статус                             = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
						ДоговорОбъект.Согласован                         = Истина;
						ДоговорОбъект.Подразделение                      = ВыборкаДоговоры.Подразделение;
						ДоговорОбъект.НаправлениеДеятельности            = ВыборкаДоговоры.НаправлениеДеятельности;
						ДоговорОбъект.Комментарий                        = Нстр("ru = 'Создан при обновлении информационной базы.'");
						
						ДоговорОбъект.Записать();
						ДоговорВладелец = ДоговорОбъект.Ссылка;
						
						ЗафиксироватьТранзакцию();
					Исключение
						
						ОтменитьТранзакцию();
						
						Шаблон = НСтр("ru = 'Не удалось сгенерировать договор эквайринга по причине: %1'");
						ТекстСообщения = СтрШаблон(Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение, МетаданныеСправочника,, ТекстСообщения);
						Продолжить;
					КонецПопытки;
				Иначе
					ДоговорВладелец = ВыборкаБанковскийСчет.ДоговорЭквайринга;
				КонецЕсли;
				
				
				Выборка = ВыборкаДоговоры.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Не ЗначениеЗаполнено(Выборка.ДоговорЭквайрингаВладелец) Тогда
						
						НачатьТранзакцию();
						Попытка
							
							Блокировка = Новый БлокировкаДанных;
							ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
							ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
							ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
							Блокировка.Заблокировать();
							
							ТерминалОбъект = Выборка.Ссылка.ПолучитьОбъект();
							
							Если ТерминалОбъект = Неопределено Тогда
								ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
								ЗафиксироватьТранзакцию();
								Продолжить;
							КонецЕсли;
							
							ТерминалОбъект.Владелец = ДоговорВладелец;
							ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТерминалОбъект);
							ЗафиксироватьТранзакцию();
						Исключение
							
							ОтменитьТранзакцию();
							ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
						КонецПопытки;
					Иначе
						ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
