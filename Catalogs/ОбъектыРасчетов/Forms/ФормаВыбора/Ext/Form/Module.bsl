
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
		Текст = НСтр("ru = 'Список объектов расчетов может быть неполным или неточным, т.к. не завершен переход на новую версию.'");
		ОбщегоНазначения.СообщитьПользователю(Текст);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ТипРасчетов") Тогда
		Если Параметры.Отбор.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			Заголовок = НСтр("ru = 'Выбор объекта расчетов с клиентом'");
		Иначе
			Заголовок = НСтр("ru = 'Выбор объекта расчетов с поставщиком'");
		КонецЕсли;
		ЭтоРасчетыСКлиентами = Параметры.Отбор.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		СписокОснованийПлатежа.ТекстЗапроса = ТекстЗапросаДокументовОснований(ЭтоРасчетыСКлиентами);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОбъектовРасчетов,
				"ТипРасчетов",
				Параметры.Отбор.ТипРасчетов,
				ВидСравненияКомпоновкиДанных.ВСписке,
				,
				Истина);
	КонецЕсли;
	
	УстановленоОтборов = 0;
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Партнер") И ЗначениеЗаполнено(Параметры.Отбор.Партнер) Тогда
		СписокПартнеров = Новый СписокЗначений;
		ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Параметры.Отбор.Партнер, СписокПартнеров);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокОбъектовРасчетов,
			"Партнер",
			СписокПартнеров,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(СписокПартнеров));
			
		Если Параметры.ВыборОснованияПлатежа Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОснованийПлатежа,
				"Партнер",
				СписокПартнеров,
				ВидСравненияКомпоновкиДанных.ВСписке,
				,
				ЗначениеЗаполнено(СписокПартнеров));
		КонецЕсли;
			
		Элементы.ОтборПартнер.Заголовок = Параметры.Отбор.Партнер;
		УстановленоОтборов = УстановленоОтборов + 1;
	Иначе
		Элементы.ОтборПартнер.Видимость = Ложь;
		Элементы.ЗаголовокПартнер.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Контрагент") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			Если ТипЗнч(Параметры.Отбор.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если ЗначениеЗаполнено(Параметры.Отбор.Контрагент) Тогда
					ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Отбор.Контрагент, "Партнер");
				Иначе
					ПартнерКонтрагента = Неопределено;
				КонецЕсли;
				СписокПартнеров = Новый СписокЗначений;
				ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(ПартнерКонтрагента, СписокПартнеров);
				Элементы.ОтборПартнер.Заголовок = ПартнерКонтрагента;
				Элементы.ОтборПартнер.Видимость = Истина;
				Элементы.ЗаголовокПартнер.Видимость = Истина;
				Параметры.Отбор.Вставить("Партнер", СписокПартнеров);
			ИначеЕсли ТипЗнч(Параметры.Отбор.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Параметры.Отбор.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
				Элементы.ОтборПартнер.Заголовок = Справочники.Партнеры.НашеПредприятие;
				Элементы.ОтборПартнер.Видимость = Истина;
				Элементы.ЗаголовокПартнер.Видимость = Истина;
			КонецЕсли;
			Элементы.ОтборКонтрагент.Видимость = Ложь;
			Элементы.ЗаголовокКонтрагент.Видимость = Ложь;
		Иначе
			Элементы.ОтборКонтрагент.Заголовок = ТекстЗаголовка(Параметры.Отбор.Контрагент);
			УстановленоОтборов = УстановленоОтборов + 1;
		КонецЕсли;
		
		ОтборКонтрагента = Параметры.Отбор.Контрагент;
		Если ТипЗнч(Параметры.Отбор.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			Запрос = Новый Запрос(
			"
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В (&Организация)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ГоловнаяОрганизация В (&Организация)
			|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
			|АВТОУПОРЯДОЧИВАНИЕ");
			
			Запрос.УстановитьПараметр("Организация", Параметры.Отбор.Контрагент);
			ОтборКонтрагента = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Элементы.ОтборКонтрагент.Заголовок = ТекстЗаголовка(ОтборКонтрагента);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокОбъектовРасчетов,
			"Контрагент",
			ОтборКонтрагента,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(Параметры.Отбор.Контрагент));
		
		Если Параметры.ВыборОснованияПлатежа Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОснованийПлатежа,
				"Контрагент",
				ОтборКонтрагента,
				ВидСравненияКомпоновкиДанных.ВСписке,
				,
				ЗначениеЗаполнено(Параметры.Отбор.Контрагент));
		КонецЕсли;
		
	Иначе
		Элементы.ОтборКонтрагент.Видимость = Ложь;
		Элементы.ЗаголовокКонтрагент.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Организация") Тогда
		
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям", Ложь);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям", Ложь);
		
		ЦентрализованныеДоговоры = Новый Массив;
		ГоловнаяОрганизация      = Неопределено;
		ЭтоГоловнаяОрганизация   = Ложь;
		
		Если ТипЗнч(Параметры.Отбор.Организация) <> Тип("Массив") И Параметры.УчитыватьФилиалы Тогда
			
			ГоловнаяОрганизация      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Отбор.Организация, "ГоловнаяОрганизация");
			ЭтоГоловнаяОрганизация   = Параметры.Отбор.Организация = ГоловнаяОрганизация;
			
			Если НЕ ЭтоГоловнаяОрганизация Тогда
				
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	Филиалы.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов.Филиалы КАК Филиалы
					|ГДЕ
					|	Филиалы.Организация = &Организация
					|");
				
				Запрос.УстановитьПараметр("Организация",Параметры.Отбор.Организация);
				ЦентрализованныеДоговоры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				
			Иначе
				
				ГоловнаяОрганизация = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ЭтоГоловнаяОрганизация",   ЭтоГоловнаяОрганизация);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ГоловнаяОрганизация",      ГоловнаяОрганизация);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ЦентрализованныеДоговоры", ЦентрализованныеДоговоры);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("Организация",              Параметры.Отбор.Организация);
		
		УстановленоОтборов = УстановленоОтборов + 1;
		
		Элементы.ОтборОрганизация.Заголовок = ТекстЗаголовка(Параметры.Отбор.Организация);
		
		Если Параметры.ВыборОснованияПлатежа Тогда
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ЭтоГоловнаяОрганизация",   ЭтоГоловнаяОрганизация);
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ГоловнаяОрганизация",      ГоловнаяОрганизация);
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ЦентрализованныеДоговоры", ЦентрализованныеДоговоры);
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("Организация",              Параметры.Отбор.Организация);
		КонецЕсли;
		
	Иначе
		Элементы.ОтборОрганизация.Видимость = Ложь;
		Элементы.ЗаголовокОрганизация.Видимость = Ложь;
		
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям", Истина);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("Организация", Неопределено);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ЭтоГоловнаяОрганизация", Ложь);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ЦентрализованныеДоговоры", Новый Массив);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ГоловнаяОрганизация", Неопределено);
		
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям", Истина);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("Организация", Неопределено);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ЭтоГоловнаяОрганизация", Ложь);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ЦентрализованныеДоговоры", Новый Массив);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ГоловнаяОрганизация", Неопределено);
		
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ВалютаВзаиморасчетов") И ЗначениеЗаполнено(Параметры.Отбор.ВалютаВзаиморасчетов) Тогда
		Элементы.ОтборВалютаВзаиморасчетов.Заголовок = Параметры.Отбор.ВалютаВзаиморасчетов;
		УстановленоОтборов = УстановленоОтборов + 1;
	Иначе
		Элементы.ОтборВалютаВзаиморасчетов.Видимость = Ложь;
		Элементы.ЗаголовокВалютаВзаиморасчетов.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.РедактируемыйДокумент) Тогда
		ИсключаемыйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Параметры.РедактируемыйДокумент,,
			?(Параметры.Отбор.Свойство("ТипРасчетов"),Параметры.Отбор.ТипРасчетов,Неопределено));
		Если ЗначениеЗаполнено(ИсключаемыйОбъектРасчетов) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОбъектовРасчетов,
				"ОбъектРасчетов",
				ИсключаемыйОбъектРасчетов,
				ВидСравненияКомпоновкиДанных.НеРавно,
				,
				ЗначениеЗаполнено(ИсключаемыйОбъектРасчетов));
				
			Если Параметры.ВыборОснованияПлатежа Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					СписокОснованийПлатежа,
					"ОбъектРасчетов",
					ИсключаемыйОбъектРасчетов,
					ВидСравненияКомпоновкиДанных.НеРавно,
					,
					ЗначениеЗаполнено(ИсключаемыйОбъектРасчетов));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТипыОснований = Новый Массив;
	Если Параметры.ВыборОснованияПлатежа И Параметры.РедактируемыйДокумент <> Неопределено Тогда
		МетаданныеДокумента = Параметры.РедактируемыйДокумент.Метаданные();
		Если МетаданныеДокумента <> Неопределено Тогда
			ОписаниеТипов = Новый ОписаниеТипов;
			Если ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта("ОснованиеПлатежа", МетаданныеДокумента, "РасшифровкаПлатежа") Тогда 
				ОписаниеТипов = МетаданныеДокумента.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.ОснованиеПлатежа.Тип;
			ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ОснованиеПлатежа") <> Неопределено Тогда
				ОписаниеТипов = МетаданныеДокумента.Реквизиты.ОснованиеПлатежа.Тип;
			КонецЕсли;
			ТипыОснований = ОписаниеТипов.Типы();
		КонецЕсли;
	КонецЕсли;
	СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ТипыОснований", ТипыОснований);
	
	Если Параметры.ВыборОснованияПлатежа Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОснованиеПлатежа;
		Если Параметры.Свойство("ТекущееЗначение") Тогда
			НачальноеОснованиеПлатежа = Параметры.ТекущееЗначение;
		КонецЕсли;
	Иначе
		Если Параметры.Свойство("ТекущееЗначение") Тогда
			НачальныйОбъектРасчетов = Параметры.ТекущееЗначение;
		КонецЕсли;
			Элементы.ГруппаОснованиеПлатежа.Видимость = Ложь;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	ВыбратьОбъектыРасчетовПоКомиссии = Неопределено;
	Параметры.Свойство("ВыбратьОбъектыРасчетовПоКомиссии", ВыбратьОбъектыРасчетовПоКомиссии);
	
	Если Не ВыбратьОбъектыРасчетовПоКомиссии = Неопределено Тогда
		
		Если ВыбратьОбъектыРасчетовПоКомиссии.ВыбратьОбъектыРасчетовСКонечнымКлиентом Тогда
			
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКонечнымКлиентом", Истина);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКомиссионером", Ложь);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ДоговорСКомиссионером",
				ВыбратьОбъектыРасчетовПоКомиссии.ДоговорСКомиссионером);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентКонтрагент",
				ВыбратьОбъектыРасчетовПоКомиссии.Контрагент);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентПартнер",
				ВыбратьОбъектыРасчетовПоКомиссии.Партнер);
				
			Элементы.ЗаголовокКомиссионныеПродажи.Заголовок = НСтр("ru = 'C конечным клиентом'");
			Элементы.ОтборКомиссионныхДоговоров.Заголовок = СтрШаблон(
					НСтр("ru='""%1"" по договору с комиссионером ""%2""'"), 
						ВыбратьОбъектыРасчетовПоКомиссии.Контрагент,
						ВыбратьОбъектыРасчетовПоКомиссии.ДоговорСКомиссионером);
			
			Элементы.ЗаголовокКомиссионныеПродажи.Видимость = Истина;
			Элементы.ОтборКомиссионныхДоговоров.Видимость = Истина;
			УстановленоОтборов = УстановленоОтборов + 1;
			
		Иначе
			
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКонечнымКлиентом", Ложь);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКомиссионером", Истина);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ДоговорСКомиссионером", Неопределено);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентКонтрагент", Неопределено);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентПартнер", Неопределено);
			
			Элементы.ОтборКомиссионныхДоговоров.Заголовок = НСтр("ru='С комиссионером'");
			
			Элементы.ЗаголовокКомиссионныеПродажи.Видимость = Истина;
			Элементы.ОтборКомиссионныхДоговоров.Видимость = Истина;
			УстановленоОтборов = УстановленоОтборов + 1;
			
		КонецЕсли;
		
	Иначе
			
		Элементы.ЗаголовокКомиссионныеПродажи.Видимость = Ложь;
		Элементы.ОтборКомиссионныхДоговоров.Видимость = Ложь;
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКонечнымКлиентом", Ложь);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКомиссионером", Ложь);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ДоговорСКомиссионером", Неопределено);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентКонтрагент", Неопределено);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентПартнер", Неопределено);
		
	КонецЕсли;
	
	Если УстановленоОтборов > 0 Тогда
		Элементы.ГруппаПредустановленныеОтборы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установлено отборов: %1'"), УстановленоОтборов);
	Иначе
		Элементы.ГруппаПредустановленныеОтборы.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ПодборДебиторскойЗадолженности") Тогда
		Элементы.ЗаголовокТипЗадолженности.Видимость = Истина;
		Элементы.ОтборЗадолженность.Заголовок = ?(Параметры.ПодборДебиторскойЗадолженности, НСтр("ru = 'дебиторской'"), НСтр("ru = 'кредиторской'"));
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", Параметры.ПодборДебиторскойЗадолженности);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", Параметры.ПодборДебиторскойЗадолженности);
	Иначе
		Элементы.ЗаголовокТипЗадолженности.Видимость = Ложь;
		Элементы.ОтборЗадолженность.Видимость = Ложь;
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", Истина);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("ВернутьСтруктуру") Тогда
		ВернутьСтруктуру = Параметры.ВернутьСтруктуру;
	КонецЕсли;
	
	ИспользоватьНесколькоВалют     = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбъектыРасчетовВалюта", "Видимость", ИспользоватьНесколькоВалют);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОснованияПлатежаВалюта", "Видимость", ИспользоватьНесколькоВалют);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектРасчетов Тогда
		СтрокаТаблицы = Элементы.ОбъектыРасчетов.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
			ПоказатьЗначение(Неопределено, СтрокаТаблицы.ОбъектРасчетов);
		КонецЕсли;
	Иначе
		СтрокаТаблицы = Элементы.ОснованияПлатежа.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеПлатежа) Тогда
			ПоказатьЗначение(Неопределено, СтрокаТаблицы.ОснованиеПлатежа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСОстаткомПриИзменении(Элемент)
	УстановитьОтборПоОстатку();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборПоОстатку();
	Если ЗначениеЗаполнено(НачальноеОснованиеПлатежа) Тогда
		Элементы.ОснованияПлатежа.ТекущаяСтрока = НачальноеОснованиеПлатежа;
	КонецЕсли;
	Если ЗначениеЗаполнено(НачальныйОбъектРасчетов) Тогда
		Элементы.ОбъектыРасчетов.ТекущаяСтрока = НачальныйОбъектРасчетов;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбъектыРасчетовПриИзменении(Элемент)
	УстановитьОтборПоОстатку();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОстатку()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОбъектовРасчетов,
		"СуммаОстаток",
		0,
		ВидСравненияКомпоновкиДанных.Больше,
		,
		ТолькоСОстатком);
	
	СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ОтображатьОбъектыРасчетов", ОтображатьОбъектыРасчетов);
	
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектРасчетов Тогда
		СтрокаТаблицы = Элементы.ОбъектыРасчетов.ТекущиеДанные;
	Иначе
		СтрокаТаблицы = Элементы.ОснованияПлатежа.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		Если ВернутьСтруктуру Тогда
			РезультатВыбора = РезультатВыбора(СтрокаТаблицы, Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектРасчетов);
		Иначе
			РезультатВыбора = СтрокаТаблицы.ОбъектРасчетов;
		КонецЕсли;
		ОповеститьОВыборе(РезультатВыбора);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РезультатВыбора(СтрокаТаблицы, ВыборОбъектаРасчетов = Истина)
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("ОснованиеПлатежа", ?(СтрокаТаблицы.Свойство("ОснованиеПлатежа"), СтрокаТаблицы.ОснованиеПлатежа, Неопределено));
	РезультатВыбора.Вставить("Организация", СтрокаТаблицы.Организация);
	РезультатВыбора.Вставить("Партнер", СтрокаТаблицы.Партнер);
	РезультатВыбора.Вставить("Контрагент", СтрокаТаблицы.Контрагент);
	РезультатВыбора.Вставить("Договор", СтрокаТаблицы.Договор);
	РезультатВыбора.Вставить("НаправлениеДеятельности", СтрокаТаблицы.НаправлениеДеятельности);
	РезультатВыбора.Вставить("СуммаВзаиморасчетов", 0);
	РезультатВыбора.Вставить("Дата", СтрокаТаблицы.Дата);
	РезультатВыбора.Вставить("Номер", СтрокаТаблицы.Номер);
	РезультатВыбора.Вставить("СтавкаНДС", ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	РезультатВыбора.Вставить("СуммаНДС", 0);
	РезультатВыбора.Вставить("СуммаЗаказа", СтрокаТаблицы.Сумма);
	РезультатВыбора.Вставить("СуммаПлатежа", СуммаПлатежа);
	РезультатВыбора.Вставить("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	РезультатВыбора.Вставить("ОбъектРасчетов", СтрокаТаблицы.ОбъектРасчетов);
	РезультатВыбора.Вставить("ВалютаВзаиморасчетов", СтрокаТаблицы.ВалютаВзаиморасчетов);
	
	Если Не (ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Или ВыборОбъектаРасчетов) Тогда
		РезультатВыбора.Вставить("ДокументОснование", СтрокаТаблицы.ДокументОснование);
		ДополнитьСтруктуруОбъектомРасчетовИВалютойВзаиморасчетов(РезультатВыбора);
	КонецЕсли;
	
	Возврат РезультатВыбора;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовНомер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовДата.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовТипСсылки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовСумма.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовВалюта.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовСуммаОстаток.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовВалютаВзаиморасчетов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовОрганизация.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовПартнер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовДоговор.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовКонтрагент.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовНомерВходящегоДокумента.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовДатаВходящегоДокумента.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СсылкаНаОбъектРасчетов.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектовРасчетов.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектовРасчетов.ТипОбъектаРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбъектовРасчетов.Договор;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовТипСсылки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектовРасчетов.ТипСсылки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Объект не указан>'"));

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРасчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ОбъектыРасчетов.ТекущиеДанные;
	Если ВернутьСтруктуру Тогда
		РезультатВыбора = РезультатВыбора(СтрокаТаблицы);
	Иначе
		РезультатВыбора = СтрокаТаблицы.ОбъектРасчетов;
	КонецЕсли;
	ОповеститьОВыборе(РезультатВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ОснованияПлатежа.ТекущиеДанные;
	РезультатВыбора = РезультатВыбора(СтрокаТаблицы, Ложь);
	ОповеститьОВыборе(РезультатВыбора);
КонецПроцедуры

&НаСервере
Функция ТекстЗаголовка(Элементы, ИмяРеквизита = "Наименование")
	
	Если ТипЗнч(Элементы) = Тип("Массив") Тогда
		Реквизиты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Элементы, ИмяРеквизита);
		Имена = Новый Массив;
		Для Каждого Элемент Из Элементы Цикл
			Имена.Добавить(Реквизиты[Элемент]);
		КонецЦикла;
		ТекстЗаголовка = СтрСоединить(Имена, Символы.ПС);
	Иначе
		ТекстЗаголовка = Элементы;
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаДокументовОснований(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = ВзаиморасчетыСервер.ТекстЗапросаВыбораОснованияПлатежа(Ложь, ЭтоРасчетыСКлиентами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторПлатежа", "ОбъектыРасчетов.ИдентификаторПлатежа");
	УсловияЗапроса = "
		|	(РеестрДокументов.Организация В (&Организация)
		|			ИЛИ НЕ &ЭтоГоловнаяОрганизация
		|				И РеестрДокументов.Договор В (&ЦентрализованныеДоговоры)
		|				И (РеестрДокументов.Организация = &ГоловнаяОрганизация
		|					ИЛИ ЕСТЬNULL(Договоры.РазрешаетсяПередачаОплатМеждуФилиалами, ЛОЖЬ))
		|			ИЛИ &ЭтоГоловнаяОрганизация
		|				И РеестрДокументов.Организация.ГоловнаяОрганизация В (&Организация)
		|				И РеестрДокументов.Организация.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
		|			ИЛИ &ПоВсемОрганизациям)
		|	И (РеестрДокументов.Ссылка <> ЕСТЬNULL(ОбъектыРасчетов.Объект, ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)) 
		|		ИЛИ &ОтображатьОбъектыРасчетов)
		|	И ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В(&ТипыОснований)
		|	И ЕСТЬNULL(КлючиАналитикиУчетаПоПартнерам.Организация, РеестрДокументов.Организация) = РеестрДокументов.Организация
		|";
	
	Если ЭтоРасчетыСКлиентами Тогда
		УсловияЗапроса = УсловияЗапроса + 	"
			|	И (ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В (ТИП(Документ.СчетНаОплатуКлиенту)
			//++ Локализация
			|	                                           , ТИП(Документ.СчетФактураВыданный)
			//-- Локализация
			|	                                           )
			|		ИЛИ (ЕСТЬNULL(РасчетыСКлиентами.Сумма, РеестрДокументов.Сумма) <> 0
			|			ИЛИ ЕСТЬNULL(РасчетыСКлиентами.КОплате, 0) <> 0)
			|	И (РасчетыСКлиентами.ВидДвижения ЕСТЬ NULL
			|		ИЛИ ВЫБОР
			|			КОГДА &ПодборДебиторскойЗадолженности
			|				ТОГДА ЕСТЬNULL(РасчетыСКлиентами.ВидДвижения, ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ИНАЧЕ ЕСТЬNULL(РасчетыСКлиентами.ВидДвижения, ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|		КОНЕЦ))
			|";
	Иначе
		УсловияЗапроса = УсловияЗапроса + "
			|	И (ЕСТЬNULL(РасчетыСПоставщиками.Сумма, РеестрДокументов.Сумма) <> 0
			|			ИЛИ ЕСТЬNULL(РасчетыСПоставщиками.КОплате, 0) <> 0)
			|	И (РасчетыСПоставщиками.ВидДвижения ЕСТЬ NULL
			|		ИЛИ ВЫБОР
			|			КОГДА &ПодборДебиторскойЗадолженности
			|				ТОГДА ЕСТЬNULL(РасчетыСПоставщиками.ВидДвижения, ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|			ИНАЧЕ ЕСТЬNULL(РасчетыСПоставщиками.ВидДвижения, ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		КОНЕЦ)
			|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДинамическиеУсловия", УсловияЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруОбъектомРасчетовИВалютойВзаиморасчетов(РезультатВыбора)
	
	ВзаиморасчетыСервер.ДополнитьСтруктуруОбъектомРасчетовИВалютойВзаиморасчетов(РезультатВыбора);
	
КонецПроцедуры

#КонецОбласти
