
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Владелец);
		СтруктураБыстрогоОтбора.Свойство("Помещение", Помещение);
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Владелец") Тогда
		
		Владелец = Параметры.Отбор.Владелец;
		Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
		Элементы.ОтборСклад.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Владелец", Владелец, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Помещение", Помещение, СтруктураБыстрогоОтбора);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список,
		"Владелец",
		Владелец, 
		СтруктураБыстрогоОтбора,
		Настройки);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список,
		"Помещение",
		Помещение,
		СтруктураБыстрогоОтбора,
		Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БыстрыйОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"Владелец",
		Владелец,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Владелец));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"Помещение",
		Помещение,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Помещение));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРеализацииТоваровУслуг

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого СтрокаМассива Из ПараметрыПеретаскивания.Значение Цикл
		
		Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
			ПеренестиИсточникВПриемник(СтрокаМассива, Строка);
		Иначе
			СкопироватьИсточникВПриемник(СтрокаМассива, Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет проверку перемещения и перемещение элементов в справочнике.
//
// Параметры:
//	Источник - СправочникСсылка.КР_ЗоныПересчетаТоваров - перемещаемый элемент справочника.
//	Приемник - СправочникСсылка.КР_ЗоныПересчетаТоваров - элемент (группа) справочника, в который выполняется перемещение
// источника.
//
&НаСервереБезКонтекста
Процедура ПеренестиИсточникВПриемник(Источник, Приемник)
	
	Если ЗначениеЗаполнено(Приемник.Владелец)
		И Приемник.Владелец <> Источник.Владелец Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Невозможно переместить элемент %1:
							|	склад группы не соответствует перемещаемому элементу'"), Строка(Источник.Наименование));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Источник);
		
	Иначе
		
		Если Источник.Родитель <> Приемник Тогда
			
			ИсточникОбъект = Источник.ПолучитьОбъект();
			ИсточникОбъект.Родитель = Приемник;
			ИсточникОбъект.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет копирование элементов в справочнике. В случае, если источник и приемник подченены различным складам, то 
// новый элемент создается с владельцем по приемнику.
//
// Параметры:
//	Источник - СправочникСсылка.КР_ЗоныПересчетаТоваров - копируемый элемент справочника.
//	Приемник - СправочникСсылка.КР_ЗоныПересчетаТоваров - элемент (группа) справочника, в который выполняется копирование
// источника.
//
&НаСервереБезКонтекста
Процедура СкопироватьИсточникВПриемник(Источник, Приемник)
	
	НовыйЭлемент = Справочники.КР_ЗоныПересчетаТоваров.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, Источник, , "Родитель, Владелец");
	НовыйЭлемент.Родитель = Приемник;
	НовыйЭлемент.Владелец = Приемник.Владелец;
	НовыйЭлемент.Записать();
	
КонецПроцедуры

#КонецОбласти
