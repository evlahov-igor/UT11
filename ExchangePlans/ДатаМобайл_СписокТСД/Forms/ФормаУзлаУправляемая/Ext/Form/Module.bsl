#Область ОписаниеПеременных

&НаКлиенте
Перем ПроцессСжатияИзображенияЗапущен;  

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущийПользователь                  = ДатаМобайл_ОбщийМодуль.ЧтениеЗначенийУзлаОбменаТСД(Объект.Ссылка, "ТекущийПользователь");
		ДатаПоследнейАвторизацииПользователя = ДатаМобайл_ОбщийМодуль.ЧтениеЗначенийУзлаОбменаТСД(Объект.Ссылка, "ДатаПоследнейАвторизацииПользователя");
		ДатаПоследнейЗагрузкиСправочников    = ДатаМобайл_ОбщийМодуль.ЧтениеЗначенийУзлаОбменаТСД(Объект.Ссылка, "ДатаПоследнейЗагрузкиСправочников");
	КонецЕсли;

	// проверка существовани регистра "Свободные остатки"
	Если Не ДатаМобайл_ОбщийМодуль.ЕстьРегистрНакопления("СвободныеОстатки") Тогда
		Элементы.УчитыватьОстаткиПоРегиструСвободныеОстатки.Видимость = Ложь;
		
		Если Объект.УчитыватьОстаткиПоРегиструСвободныеОстатки Тогда
			Объект.УчитыватьОстаткиПоРегиструСвободныеОстатки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроцессСжатияИзображенияЗапущен = Ложь;	
	ОнлайнСвязьСПринтсерверомПриИзменении(Элементы.ОнлайнСвязьСПринтсервером);	
	ЗагрузитьИменаРеквизитовВИмяАтрибута(); 
	ИспользоватьПорционнуюВыгрузкуПриИзменении(Неопределено);
	ИспользоватьПроизводственныйОбъектДляКлючаСессииПриИзменении("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПроцессСжатияИзображенияЗапущен = Истина Тогда
		СтандартнаяОбработка = Ложь;   
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
		"При закрытии формы прекратится сжатие изображений. Закрыть форму?", РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти     

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИспользоватьПорционнуюВыгрузкуПриИзменении(Элемент)
	
	Элементы.ГруппаНастроекИспользованияПорционнойВыгрузки.Видимость = Объект.ИспользоватьПорционнуюВыгрузку;	
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСжатыхИзображенийПриИзменении(Элемент)
	Если Объект.КаталогСжатыхИзображений <> "" Тогда        	
		РП = ДатаМобайл_ОбщийМодуль.DM_ПолучитьРазделительПути();
		Попытка Объект.КаталогСжатыхИзображений = СокрЛП(Объект.КаталогСжатыхИзображений) + ?(Прав(СокрЛП(Объект.КаталогСжатыхИзображений), 1) = РП, "", РП); Исключение КонецПопытки; 		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СобратьСписокИменАтрибута()
	
	СписокОтвета = Новый СписокЗначений();
	СписокОтвета.Добавить("");
	СписокОтвета.Добавить("!!! Ячейки !!!");
	СписокОтвета.Добавить("!!! Основная ячейка !!!");
	СписокОтвета.Добавить("!!! Дополнительные ячейки !!!");
	СписокОтвета.Добавить("!!! Характеристики !!!");
	СписокОтвета.Добавить("Код");
	
	Для каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		СписокОтвета.Добавить(Реквизит.Синоним);
	КонецЦикла;
	
	//ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
	| СправочникНоменклатураДополнительныеРеквизиты.Свойство КАК Свойство, 
	| СправочникНоменклатураДополнительныеРеквизиты.Свойство.Заголовок КАК НаименованиеСвойства
	|ИЗ
	| Справочник.Номенклатура.ДополнительныеРеквизиты КАК СправочникНоменклатураДополнительныеРеквизиты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОтвета.Добавить("ДР_" + Выборка.НаименованиеСвойства);	
	КонецЦикла;		
		
	Возврат СписокОтвета;
	
КонецФункции

&НаКлиенте
Процедура ИмяАтрибутаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Элемент.СписокВыбора.НайтиПоЗначению(Текст) = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИменаРеквизитовВИмяАтрибута()
	
	Список = Новый СписокЗначений();
	Список.ЗагрузитьЗначения(СобратьСписокИменАтрибута().ВыгрузитьЗначения());
	Список.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	МассивЗначений = Список.ВыгрузитьЗначения();
	
	Элементы.ИмяАтрибута1.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.ИмяАтрибута2.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.ИмяАтрибута3.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.ИмяАтрибута4.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.ИмяАтрибута5.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.ИмяАтрибута6.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.ИмяАтрибута7.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.ИмяАтрибута8.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.ИмяАтрибута9.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.ИмяАтрибута10.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиФайлаПечатиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиФайлаПечатиНачалоВыбора_Завершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиФайлаПечатиНачалоВыбора_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда						
		РП = ДатаМобайл_ОбщийМодуль.DM_ПолучитьРазделительПути();
		Объект.КаталогВыгрузкиФайлаПечати = ВыбранныеФайлы[0] + РП;
	КонецЕсли;      
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиФайлаПечатиПриИзменении(Элемент)
	Если Элемент.ТекстРедактирования <> "" Тогда
		РП = ДатаМобайл_ОбщийМодуль.DM_ПолучитьРазделительПути();
		Объект.КаталогВыгрузкиФайлаПечати = Элемент.ТекстРедактирования + РП;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТипОперацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = ПолучитьСписокВыбораОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьИмяШаблонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Шаблоны (*.sctmpl)|*.sctmpl;|";
	Диалог.Показать(Новый ОписаниеОповещения("ПечатьИмяШаблонаНачалоВыбора_Завершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьИмяШаблонаНачалоВыбора_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		РП = ДатаМобайл_ОбщийМодуль.DM_ПолучитьРазделительПути();
		НомерСимвола = СтрНайти(ВыбранныеФайлы[0], РП, НаправлениеПоиска.СКонца);
		
		Если НомерСимвола = 0 Тогда
			Если РП = "/" Тогда
				РП = "\";
				НомерСимвола = СтрНайти(ВыбранныеФайлы[0], РП, НаправлениеПоиска.СКонца);
			КонецЕсли;	
		КонецЕсли;	
		
		ИмяФайла = Сред(ВыбранныеФайлы[0], НомерСимвола + 1, СтрДлина(ВыбранныеФайлы[0])); 
		Элементы.Печать.ТекущиеДанные.ИмяШаблона = ИмяФайла;	
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАтрибутыЕГАИС(Команда)
	
	Объект.ИмяАтрибута5 = "Производитель (импортер) алкогольной (спиртосодержащей) продукции";
	Объект.ИмяАтрибута7 = "Объем в декалитрах";
	Объект.ИмяАтрибута8 = "Крепость";
	Объект.ИмяАтрибута9 = "Вид алкогольной (спиртосодержащей) продукции";
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБейджей(Команда)
	
	Таб = ПолучитьМакетНаСервере();
	
	Таб.Показать("Бейджи");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере()
	
	ТекКолонка = 1;
	ТекСтрока  = 1;
	
	Таб                     = Новый ТабличныйДокумент;
	Таб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Пользователи" + СокрЛП(ИмяКомпьютера());
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Бейджи");
	ЭтикеткаОбласть         = Макет.ПолучитьОбласть(1,1,4,2);
	ОбластьПользователя     = ЭтикеткаОбласть.Области.Пользователь;
	ОбластьШтрихкод         = ЭтикеткаОбласть.Области.ОбластьШтрихкод;
	РисунокШтрихкод         = ЭтикеткаОбласть.Рисунки.Штрихкод;
	
	ВысотаЭтикетки = 50;
	ШиринаЭтикетки = 90;
	
	ОбластьПользователя.ВысотаСтроки = ВысотаЭтикетки * 2.65 * 0.3;
	ОбластьШтрихкод.ВысотаСтроки     = ВысотаЭтикетки * 2.65 * 0.5;
	РисунокШтрихкод.Расположить(ОбластьШтрихкод);
	
	ЭтикеткаОбласть.Область(2,2,2,2).ШиринаКолонки = ШиринаЭтикетки * 0.53;
	
	ОбластьГраницаСправа      = Макет.ПолучитьОбласть(2,4,4,4);
	ОбластьНизГраницыСправа   = Макет.ПолучитьОбласть(5,4,5,4);
	ОбластьГраницаСнизу       = Макет.ПолучитьОбласть(6,2,6,2);
	ОбластьНачалоГраницыСнизу = Макет.ПолучитьОбласть(6,1,6,1);
	
	ОбластьГраницаСправа.Рисунки.ГраницаСправа.Высота = ВысотаЭтикетки * 1.09;
	ОбластьГраницаСнизу.Рисунки.ГраницаСнизу.Ширина   = ШиринаЭтикетки * 0.7;
	
	ОбластьГраницаСправа.Область(1,1,1,1).ВысотаСтроки = ВысотаЭтикетки * 2.65;
	ОбластьГраницаСнизу.Область(1,1,1,1).ШиринаКолонки = ШиринаЭтикетки * 0.53;
	
	ВсегоСтрок        = 5;
	КоличествоКолонок = 2;
	
	ВсегоКолонок = КоличествоКолонок;
	Если ВсегоКолонок > 1 Тогда
		ВсегоКолонок = ВсегоКолонок + ВсегоКолонок - 1; //добавляем разделители колонок.
	КонецЕсли;
	
	ВывелиХотяБыОдинШтрихКод = Ложь;
	Модуль_МенеджерОборудованияВызовСервера = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("МенеджерОборудованияВызовСервера");
	Модуль_ГенерацияШтрихкода 				= ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ГенерацияШтрихкода");
	
	Для каждого СтрокаИзСписка Из Объект.ПользователиТСД Цикл
		
		КоличествоМиллиметровВПикселе = 0.5;
		
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(ЭтикеткаОбласть.Рисунки.Штрихкод.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",          Окр(ЭтикеткаОбласть.Рисунки.Штрихкод.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(СтрокаИзСписка.Логин));
		ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    6);
		
		Попытка
			ЭтикеткаОбласть.Рисунки.Штрихкод.Картинка = Модуль_МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		Исключение
			РезультатОперации = Модуль_ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
			Если РезультатОперации.ДвоичныеДанные <> Неопределено Тогда
				ЭтикеткаОбласть.Рисунки.Штрихкод.Картинка = РезультатОперации.Картинка;		
			КонецЕсли;
		КонецПопытки;
	
		ОбластьПользователя.Текст        = "" + СтрокаИзСписка.Пользователь;
		
		Если ТекКолонка > ВсегоКолонок Тогда //новая строка.
			Если ВсегоСтрок <> 1 Тогда //выведем разделитель.
				Для Сч = 1 По ВсегоКолонок Цикл
					Если Сч = 1 Тогда
						Таб.Вывести(ОбластьНачалоГраницыСнизу);
					Иначе
						Таб.Присоединить(ОбластьНачалоГраницыСнизу);
					КонецЕсли;
					Таб.Присоединить(ОбластьГраницаСнизу);
					Таб.Присоединить(ОбластьНизГраницыСправа);
					Сч = Сч + 1;
				КонецЦикла;
				ТекСтрока = ТекСтрока + 1;
			КонецЕсли;
			Если ТекСтрока/ВсегоСтрок = Цел(ТекСтрока / ВсегоСтрок) Тогда
				Таб.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТекСтрока = ТекСтрока + 1;
			ТекКолонка = 1;
		КонецЕсли;
		Если ТекКолонка <> 1 Тогда //выведем разделитель.
			Таб.Присоединить(ОбластьГраницаСправа);
			ТекКолонка = ТекКолонка + 1;
			Таб.Присоединить(ЭтикеткаОбласть);
			ТекКолонка = ТекКолонка + 1;
		Иначе
			Таб.Вывести(ЭтикеткаОбласть);
			ТекКолонка = ТекКолонка + 1;
		КонецЕсли;
		
		ВывелиХотяБыОдинШтрихКод = Истина;
	КонецЦикла;
	
	Если ВывелиХотяБыОдинШтрихКод Тогда
		Таб.Защита              = Ложь;
		Таб.ТолькоПросмотр      = Истина;
		Таб.ОтображатьСетку     = Ложь;
		Таб.ОтображатьЗаголовки = Ложь;
		Возврат Таб;		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПринтерВручную(Команда)
	
	СтрокаПринтера = "";
	ОписаниеОповещенияЗавершенияВводаСтроки = Новый ОписаниеОповещения("ЗавершениеВВодаСтрокиПринтераВручную", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещенияЗавершенияВводаСтроки, СтрокаПринтера, "Введите путь к принтеру вручную",, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВВодаСтрокиПринтераВручную(Ответ, ДополнительныеПараметры) Экспорт
	
	СтрокаПринтера = Объект.Печать.Добавить();
	СтрокаПринтера.ИмяПринтера = Ответ;
	
	ДополнительныеПараметрыПередачи = Новый Структура("Строка", СтрокаПринтера);
	ОписаниеОповещенияОВыбореИзСписка = Новый ОписаниеОповещения("ЗакрытиеВыбораИзСпискаТипаПечати", ЭтаФорма, ДополнительныеПараметрыПередачи);
	
	СписокВыбораОпераций = ПолучитьСписокВыбораОпераций();
	ПоказатьВыборИзСписка(ОписаниеОповещенияОВыбореИзСписка, СписокВыбораОпераций, Элементы.Печать.ПодчиненныеЭлементы.ПечатьТипОперации, 0); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеВыбораИзСпискаТипаПечати(Ответ, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Строка.ТипОперации = Ответ;
	
КонецПроцедуры

&НаСервере
Функция ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	тч = ТекущийОбъект.Печать.Выгрузить();
	
	Если ТЧ.Количество() <> 0 Тогда
		Если ТекущийОбъект.ОнлайнСвязьСПринтсервером Тогда
			Если ТекущийОбъект.АдресПринтсервера = "" Тогда
				Сообщить("Требуется указать адрес принтсервера! ");
				Отказ = Истина;
			КонецЕсли;
		Иначе	
			Если ТекущийОбъект.КаталогВыгрузкиФайлаПечати = "" Тогда
				Сообщить("Требуется указать каталог выгрузки файлов! ");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Сч = 1 По 10 Цикл
		ЗначениеАтрибута = Объект["ИмяАтрибута" + Сч];
		
		Если ЗначениеАтрибута = "" Или ЗначениеАтрибута = "!!! Ячейки !!!" Или ЗначениеАтрибута = "!!! Основная ячейка !!!" Или ЗначениеАтрибута = "!!! Дополнительные ячейки !!!"
			Или ЗначениеАтрибута = "!!! Характеристики !!!" Или ЗначениеАтрибута = "Код" Или СтрНачинаетсяС(ЗначениеАтрибута, "ДР_") Тогда
			ДатаМобайл_ОбщийМодуль.ЗаписьЗначенийУзлаОбменаТСД(Объект.Ссылка, "ИмяАтрибута" + Сч, ЗначениеАтрибута);
		Иначе
			Для каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
				Если Реквизит.Синоним = ЗначениеАтрибута Тогда
					ДатаМобайл_ОбщийМодуль.ЗаписьЗначенийУзлаОбменаТСД(Объект.Ссылка, "ИмяАтрибута" + Сч, Реквизит.Имя);	
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОнлайнСвязьСПринтсерверомПриИзменении(Элемент)
	
	Элементы.КаталогВыгрузкиФайлаПечати.Видимость = Не Объект.ОнлайнСвязьСПринтсервером;
	Элементы.АдресПринтсервера.Видимость = Объект.ОнлайнСвязьСПринтсервером;
	Элементы.ПортПринтсервера.Видимость = Объект.ОнлайнСвязьСПринтсервером;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокВыбораОпераций()
	
	СписокВыбораОпераций = Новый СписокЗначений;
	СписокВыбораОпераций.Добавить("Печать этикетки");
	СписокВыбораОпераций.Добавить("Печать этикетки маркировка");
	СписокВыбораОпераций.Добавить("Печать документа");
	СписокВыбораОпераций.Добавить("Печать упаковочного листа");
	СписокВыбораОпераций.Добавить("Печать серийного номера/серии");
	
	Возврат СписокВыбораОпераций;
	
КонецФункции // ()

&НаКлиенте
Процедура ПечатьПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущиеДанные.КоличествоКопий = 0 Тогда
		Элемент.ТекущиеДанные.КоличествоКопий = 1;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_ТипПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ШаблоныШтрихкодов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Тип = 0 Тогда		
		Элементы.ГрШаблоныШтрихкодовКилограмм.Видимость = Истина;
		Элементы.ШаблоныШтрихкодов_НачальныйСимволКилограмм.Видимость = Истина; 
		Элементы.ШаблоныШтрихкодов_КонечныйСимволКилограмм.Видимость = Истина;
		
		Элементы.ГрШаблоныШтрихкодовГрамм.Видимость = Истина;
		Элементы.ШаблоныШтрихкодов_НачальныйСимволГрамм.Видимость = Истина;
		Элементы.ШаблоныШтрихкодов_КонечныйСимволГрамм.Видимость = Истина;
		
		Элементы.ГрШаблоныШтрихкодовСерийныйНомер.Видимость = Истина;
		Элементы.ШаблоныШтрихкодов_НачальныйСимволСерийныйНомер.Видимость = Истина;
		Элементы.ШаблоныШтрихкодов_КонечныйСимволСерийныйНомер.Видимость = Истина;
		
		Элементы.ГрШаблоныШтрихкодовКоличество.Видимость = Истина;
		Элементы.ШаблоныШтрихкодов_НачальныйСимволКоличество.Видимость = Истина;
		Элементы.ШаблоныШтрихкодов_КонечныйСимволКоличество.Видимость = Истина;		
	Иначе				
		ТекущиеДанные.НачальныйСимволКилограмм = 0;
		ТекущиеДанные.КонечныйСимволКилограмм = 0;
		
		ТекущиеДанные.НачальныйСимволГрамм = 0;
		ТекущиеДанные.КонечныйСимволГрамм = 0;
		
		ТекущиеДанные.НачальныйСимволСерийныйНомер = 0;
		ТекущиеДанные.КонечныйСимволСерийныйНомер = 0;
		
		ТекущиеДанные.НачальныйСимволКоличество = 0;
		ТекущиеДанные.КонечныйСимволКоличество = 0;
				
		Элементы.ГрШаблоныШтрихкодовКилограмм.Видимость = Ложь;
		Элементы.ШаблоныШтрихкодов_НачальныйСимволКилограмм.Видимость = Ложь; 
		Элементы.ШаблоныШтрихкодов_КонечныйСимволКилограмм.Видимость = Ложь;
		
		Элементы.ГрШаблоныШтрихкодовГрамм.Видимость = Ложь;
		Элементы.ШаблоныШтрихкодов_НачальныйСимволГрамм.Видимость = Ложь;
		Элементы.ШаблоныШтрихкодов_КонечныйСимволГрамм.Видимость = Ложь;
		
		Элементы.ГрШаблоныШтрихкодовСерийныйНомер.Видимость = Ложь;
		Элементы.ШаблоныШтрихкодов_НачальныйСимволСерийныйНомер.Видимость = Ложь;
		Элементы.ШаблоныШтрихкодов_КонечныйСимволСерийныйНомер.Видимость = Ложь;
		
		Элементы.ГрШаблоныШтрихкодовКоличество.Видимость = Ложь;
		Элементы.ШаблоныШтрихкодов_НачальныйСимволКоличество.Видимость = Ложь;
		Элементы.ШаблоныШтрихкодов_КонечныйСимволКоличество.Видимость = Ложь;
	КонецЕсли;
	
	СформироватьОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблон(Команда)
	
	Объект.ШаблоныШтрихкодов.Добавить();
	Элементы.ШаблоныШтрихкодов.ТекущаяСтрока = Объект.ШаблоныШтрихкодов[Объект.ШаблоныШтрихкодов.Количество() - 1].ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьШаблон(Команда)
	
	ИндексТекущегоЭлементаКоллекции = Объект.ШаблоныШтрихкодов.Индекс(Элементы.ШаблоныШтрихкодов.ТекущиеДанные);
	
	Попытка
		Объект.ШаблоныШтрихкодов.Удалить(ИндексТекущегоЭлементаКоллекции);
	Исключение
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран шаблон для удаления!";
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьОписание()
	
	ТекущиеДанные = Элементы.ШаблоныШтрихкодов.ТекущиеДанные;
	ТекущиеДанные.Описание = "";	
	
	Если ТекущиеДанные.Префикс <> "" Тогда
		ТекущиеДанные.Описание = ТекущиеДанные.Описание + "Префикс " + ТекущиеДанные.Префикс + Символы.ПС;	
	КонецЕсли;
	
	Если ТекущиеДанные.ОбщаяДлина <> 0 Тогда
		ТекущиеДанные.Описание = ТекущиеДанные.Описание + "Общая длина " + ТекущиеДанные.ОбщаяДлина + Символы.ПС;	
	КонецЕсли;
	
	Если ТекущиеДанные.НачальныйСимволШтрихкода <> 0 Или ТекущиеДанные.КонечныйСимволШтрихкода <> 0 Тогда
		ТекущиеДанные.Описание = ТекущиеДанные.Описание + "Штрихкод с " + ТекущиеДанные.НачальныйСимволШтрихкода + " по " + ТекущиеДанные.КонечныйСимволШтрихкода + Символы.ПС;	
	КонецЕсли;
	
	Если ТекущиеДанные.НачальныйСимволКилограмм <> 0 Или ТекущиеДанные.КонечныйСимволКилограмм <> 0 Тогда
		ТекущиеДанные.Описание = ТекущиеДанные.Описание + "Килограммы с " + ТекущиеДанные.НачальныйСимволКилограмм + " по " + ТекущиеДанные.КонечныйСимволКилограмм + Символы.ПС;	
	КонецЕсли;
	
	Если ТекущиеДанные.НачальныйСимволГрамм <> 0 Или ТекущиеДанные.КонечныйСимволГрамм <> 0 Тогда
		ТекущиеДанные.Описание = ТекущиеДанные.Описание + "Граммы с " + ТекущиеДанные.НачальныйСимволГрамм + " по " + ТекущиеДанные.КонечныйСимволГрамм + Символы.ПС;	
	КонецЕсли;
	
	Если ТекущиеДанные.НачальныйСимволСерийныйНомер <> 0 Или ТекущиеДанные.КонечныйСимволСерийныйНомер <> 0 Тогда
		ТекущиеДанные.Описание = ТекущиеДанные.Описание + "Серийный номер с " + ТекущиеДанные.НачальныйСимволСерийныйНомер + " по " + ТекущиеДанные.КонечныйСимволСерийныйНомер + Символы.ПС;	
	КонецЕсли;
	
	Если ТекущиеДанные.НачальныйСимволКоличество <> 0 Или ТекущиеДанные.КонечныйСимволКоличество <> 0 Тогда
		ТекущиеДанные.Описание = ТекущиеДанные.Описание + "Количество с " + ТекущиеДанные.НачальныйСимволКоличество + " по " + ТекущиеДанные.КонечныйСимволКоличество + Символы.ПС;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ШаблоныШтрихкодов_ПрефиксПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_ОбщаяДлинаШтрихкодаПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_ТипШтрихкодаПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_НачальныйСимволШтрихкодаПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_КонечныйСимволШтрихкодаПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_НачальныйСимволКилограммПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_КонечныйСимволКилограммПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_НачальныйСимволГраммПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_КонечныйСимволГраммПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_НачальныйСимволСерийныйНомерПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_КонечныйСимволСерийныйНомерПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_НачальныйСимволКоличествоПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодов_КонечныйСимволКоличествоПриИзменении(Элемент)
	СформироватьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШтрихкодовПриАктивизацииСтроки(Элемент)
	ШаблоныШтрихкодов_ТипПриИзменении(Элементы.ШаблоныШтрихкодов_Тип);
КонецПроцедуры

&НаКлиенте
Процедура СкладыСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Элементы.Склады.ТекущиеДанные.Склад) = Тип("СправочникСсылка.СкладскиеПомещения") Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗакрытиеВыбораПомещенияСклады", ЭтотОбъект), ПолучитьСписокПомещений(), Элементы.Склады, 0);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПомещений() 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СкладскиеПомещения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СкладскиеПомещения КАК СкладскиеПомещения");
	
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокВозврата;
	
КонецФункции

&Наклиенте
Процедура ЗакрытиеВыбораПомещенияСклады(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		Попытка Элементы.Склады.ТекущиеДанные.Склад = Результат.Значение; Исключение КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещенияПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Элементы.Помещения.ТекущиеДанные.Помещение) = Тип("СправочникСсылка.СкладскиеПомещения") Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗакрытиеВыбораПомещенияПомещения", ЭтотОбъект), ПолучитьСписокПомещений(), Элементы.Помещения, 0);	
	КонецЕсли;
	
КонецПроцедуры

&Наклиенте
Процедура ЗакрытиеВыбораПомещенияПомещения(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		Попытка Элементы.Помещения.ТекущиеДанные.Помещение = Результат.Значение; Исключение КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПользователей(Команда)
	
	Если Объект.ПользователиТСД.Количество() = 0 Тогда
		Сообщить("Не заведены пользователи для копирования!");	
	Иначе	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("КодТСД", Объект.Код);
		СтруктураПараметров.Вставить("НазваниеНастройки", "ПользователиТСД");
		ОткрытьФорму("ПланОбмена.ДатаМобайл_СписокТСД.Форма.ФормаКопированияНастроек", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьШаблоныШтрихкодов(Команда)
	
	Если Объект.ШаблоныШтрихкодов.Количество() = 0 Тогда
		Сообщить("Не заведены шаблоны штрихкодов для копирования!");	
	Иначе	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("КодТСД", Объект.Код);
		СтруктураПараметров.Вставить("НазваниеНастройки", "ШаблоныШтрихкодов");
		ОткрытьФорму("ПланОбмена.ДатаМобайл_СписокТСД.Форма.ФормаКопированияНастроек", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПользователей(Команда)
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("МножественныйВыбор"	, Истина);
	ПараметрыПодбора.Вставить("РежимВыбора"			, Истина);
	Подбор = Получитьформу("Справочник.Пользователи.ФормаВыбора", ПараметрыПодбора, ЭтаФорма);
	Подбор.ЗакрыватьПривыборе = Истина;
	Подбор.Открыть();
КонецПроцедуры

&НаСервере
Процедура ДобавитьПользователейДляВыгрузки(ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура;
	ПользователиТСД = Объект.ПользователиТСД;
	
	Для каждого Значение Из ВыбранноеЗначение Цикл
		ПараметрыОтбора.Вставить("Пользователь", Значение);
		НайденныеСтроки = ПользователиТСД.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Стр = ПользователиТСД.Добавить();
			Стр.Пользователь = Значение;
		КонецЕсли; 		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТовары(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыПодбора.Вставить("МножественныйВыбор"	, Истина);
	ПараметрыПодбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыПодбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	
	Подбор = Получитьформу("Справочник.Номенклатура.ФормаВыбора", ПараметрыПодбора, ЭтаФорма);
	Подбор.ЗакрыватьПривыборе = Истина;
	Подбор.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруДляВыгрузки(ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура;
	ДоступныеГруппыТоваров = Объект.ДоступныеГруппыТоваров;
	
	Для каждого Значение Из ВыбранноеЗначение Цикл
		ПараметрыОтбора.Вставить("Номенклатура", Значение);
		НайденныеСтроки = ДоступныеГруппыТоваров.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Стр = ДоступныеГруппыТоваров.Добавить();
			Стр.Номенклатура = Значение;
		КонецЕсли; 		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.Заголовок = "Выбор пользователя" Тогда
		Попытка ДобавитьПользователейДляВыгрузки(ВыбранноеЗначение); Исключение КонецПопытки;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ДатаМобайл_Роли.ФормаВыбора" Тогда
		Попытка ДобавитьРолиДляВыгрузки(ВыбранноеЗначение); Исключение КонецПопытки;		
	Иначе
		Попытка ДобавитьНоменклатуруДляВыгрузки(ВыбранноеЗначение); Исключение КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#Область ВыгрузкиЗагрузкиНастроек

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	
	ВыборФайлаНастроек("Загрузка");
	Если Не ЗначениеЗаполнено(ШаблоныПутьКФайлуНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПодтверждениеЗагрузки", ЭтотОбъект),
	"Текущие настройки будут заменены на настройки из файла. Загрузить данные?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНастройки(Команда)
	
	ВыборФайлаНастроек("Выгрузка");
	Если Не ЗначениеЗаполнено(ШаблоныПутьКФайлуНастроек) Тогда
		Возврат;
	КонецЕсли;	
	АдресФайлаВоВременномХранилище = "";
	ПоказатьВопрос(Новый ОписаниеОповещения("ПодтверждениеВыгрузки", ЭтотОбъект),
	"Текущие настройки будут сохранены в файл. Выгрузить данные?", РежимДиалогаВопрос.ДаНет);	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыборФайлаНастроек(РежимРаботыСФайлом)
	
	ОчиститьСообщения();
	
	Если РежимРаботыСФайлом = "Выгрузка" Тогда
		Режим = РежимДиалогаВыбораФайла.Сохранение;
	ИначеЕсли РежимРаботыСФайлом = "Загрузка" Тогда
		Режим = РежимДиалогаВыбораФайла.Открытие;
	КонецЕсли;	
	
	ДиалогРаботыСФайлом = Новый ДиалогВыбораФайла(Режим); 
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.грШаблоныШтрихкодов Тогда
		ДиалогРаботыСФайлом.ПолноеИмяФайла = "barcode_templates.tab";
		Фильтр = "(*.tab)|*.tab"; 
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПользователиТСД Тогда
		ДиалогРаботыСФайлом.ПолноеИмяФайла = "users_tsd.tab";
		Фильтр = "(*.tab)|*.tab";
	КонецЕсли;	
	ДиалогРаботыСФайлом.Фильтр = Фильтр; 
	ДиалогРаботыСФайлом.МножественныйВыбор = Ложь; 
	ДиалогРаботыСФайлом.Заголовок = "Выберите файл настроек";
	ДиалогРаботыСФайлом.Показать(Новый ОписаниеОповещения("ВыборФайлаНастроек_Завершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаНастроек_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		ШаблоныПутьКФайлуНастроек = ВыбранныеФайлы[0]; 	
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗагрузки(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПользователиТСД Тогда
			
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблона", ЭтаФорма, Новый Структура("ФайлТЗ, Путь", ФайлТЗ, ШаблоныПутьКФайлуНастроек)), ШаблоныПутьКФайлуНастроек, КодировкаТекста.UTF8);
			ЭтаФорма.ОбновитьОтображениеДанных(Элементы.ГруппаПользователиТСД);
			
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.грШаблоныШтрихкодов Тогда
			
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблона", ЭтаФорма, Новый Структура("ФайлТЗ, Путь", ФайлТЗ, ШаблоныПутьКФайлуНастроек)), ШаблоныПутьКФайлуНастроек, КодировкаТекста.UTF8);		
			ЭтаФорма.ОбновитьОтображениеДанных(Элементы.грШаблоныШтрихкодов);  
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияШаблона(ДопПараметр) Экспорт
	
	Данные = ДопПараметр.ФайлТЗ.ПолучитьТекст();	 
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПользователиТСД Тогда
		
		ЗагрузитьДанныеШаблоны(ДопПараметр.ФайлТЗ.ПолучитьТекст(), "ПользователиТСД"); 	 	       
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.грШаблоныШтрихкодов Тогда
		
		ЗагрузитьДанныеШаблоны(ДопПараметр.ФайлТЗ.ПолучитьТекст(), "ШаблоныШтрихкодов"); 	      		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеШаблоны(Данные, Контекст)
	
	Если Контекст = "ПользователиТСД" Тогда
		
		ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
		Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
			Если ДанныеТЗ.Колонки.Найти("РазрешитьСозданиеТовара") = Неопределено Тогда
				Сообщить("Выбран неверный файл!");	 
			Иначе
				Объект.ПользователиТСД.Загрузить(ДанныеТЗ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Контекст = "ШаблоныШтрихкодов" Тогда	
		
		ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
		Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
			Если ДанныеТЗ.Колонки.Найти("Префикс") = Неопределено Тогда
				Сообщить("Выбран неверный файл!"); 
			Иначе	
				Объект.ШаблоныШтрихкодов.Загрузить(ДанныеТЗ);
			КонецЕсли;
		КонецЕсли;  
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеВыгрузки(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПользователиТСД Тогда				 
			
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.УстановитьТекст(ПолучитьДанные("ПользователиТСД"));
			ФайлТЗ.Записать(ШаблоныПутьКФайлуНастроек);
			
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.грШаблоныШтрихкодов Тогда
			
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.УстановитьТекст(ПолучитьДанные("ШаблоныШтрихкодов"));
			ФайлТЗ.Записать(ШаблоныПутьКФайлуНастроек);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанные(Контекст)
	
	Если Контекст = "ПользователиТСД" Тогда
		ДанныеТЗ = Новый ХранилищеЗначения(Объект.ПользователиТСД.Выгрузить());
		Возврат XMLСтрока(ДанныеТЗ);
	ИначеЕсли Контекст = "ШаблоныШтрихкодов" Тогда
		ДанныеТЗ = Новый ХранилищеЗначения(Объект.ШаблоныШтрихкодов.Выгрузить());
		Возврат XMLСтрока(ДанныеТЗ);		
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура КаталогСжатыхИзображенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "выберите каталог для хранения сжатых изображений";
	ОповещениеЗавершения = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект);
	Диалог.Показать(ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда						
		РП = ДатаМобайл_ОбщийМодуль.DM_ПолучитьРазделительПути();
		Объект.КаталогСжатыхИзображений = ВыбранныеФайлы[0] + РП;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СжатьИзображения(Команда)
	
	ПроцессСжатияИзображенияЗапущен = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или ЭтаФорма.Модифицированность Тогда
		Сообщить("Сохраните данные ТСД!");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КаталогСжатыхИзображений) Тогда
		Сообщить("Укажите каталог хранения сжатых изображений!");
	КонецЕсли;	
	
	ДлительнаяОперация = НачатьВыполнениеНаСервере();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьДействиеЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
	Состояние("Сжатие изображений...");
	
КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеНаСервере()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("УзелПО", Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("ПолнаяВыгрузка", Истина);
	ПараметрыПроцедуры.Вставить("ПутьХранения", Объект.КаталогСжатыхИзображений);
	
	Модуль_ДлительныеОперации = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ДлительныеОперации");
	ПараметрыВыполнения = Модуль_ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтаФорма.УникальныйИдентификатор);
	
	Возврат Модуль_ДлительныеОперации.ВыполнитьВФоне("ДатаМобайл_ОбщийМодуль.СжатьИзображения", ПараметрыПроцедуры, ПараметрыВыполнения);    
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		Если Результат.Статус = "Выполнено"
			Или Результат.Статус = "Ошибка" Тогда
			Состояние("Сжатие выполнено!"); 
			ПроцессСжатияИзображенияЗапущен = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПроцессСжатияИзображенияЗапущен = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РолиИПользователи

&НаКлиенте
Процедура ДобавитьРоли(Команда)
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("МножественныйВыбор"	, Истина);
	ПараметрыПодбора.Вставить("РежимВыбора"			, Истина);
	Подбор = Получитьформу("Справочник.ДатаМобайл_Роли.ФормаВыбора", ПараметрыПодбора, ЭтаФорма);
	Подбор.ЗакрыватьПривыборе = Истина;
	Подбор.Открыть();
КонецПроцедуры

&НаСервере
Процедура ДобавитьРолиДляВыгрузки(ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура;
	Роли = Объект.Роли;
	
	Для каждого Значение Из ВыбранноеЗначение Цикл
		ПараметрыОтбора.Вставить("Роль", Значение);
		НайденныеСтроки = Роли.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Стр = Роли.Добавить();
			Стр.Роль = Значение;
		КонецЕсли; 		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура УчитыватьОстаткиПоРегиструРаспределениеЗапасовПриИзменении(Элемент)
	
	Если Объект.УчитыватьОстаткиПоРегиструРаспределениеЗапасов Тогда
		Объект.УчитыватьОстаткиПоРегиструСвободныеОстатки = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьОстаткиПоРегиструСвободныеОстаткиПриИзменении(Элемент)
	
	Если Объект.УчитыватьОстаткиПоРегиструСвободныеОстатки Тогда
		Объект.УчитыватьОстаткиПоРегиструРаспределениеЗапасов = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область КлючСессии

&НаСервере
Процедура ПолучитьКлючСессииНаСервере()
	
	Организация = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Организация = Объект.Организация;	
	КонецЕсли; 
	
	Модуль_ИнтерфейсАвторизацииИСМПВызовСервера = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
	Модуль_ИнтерфейсИСМПКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
	
	СтруктураОтвета = Новый Структура;
	
	Попытка                                       
		
		ПараметрыЗапроса = Модуль_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация);
		Объект.КлючСессии = Модуль_ИнтерфейсАвторизацииИСМПВызовСервера.ТекущийКлючСессии(ПараметрыЗапроса);
		
		Если Не ЗначениеЗаполнено(Объект.КлючСессии) И Объект.ИспользоватьПроизводственныйОбъектДляКлючаСессии Тогда
			
			ПараметрыЗапроса.ИмяПараметраСеанса = "ДанныеКлючаСессииСУЗ";
			ПараметрыЗапроса.ПроизводственныйОбъект = Объект.ПроизводственныйОбъект;
			Объект.КлючСессии = Модуль_ИнтерфейсАвторизацииИСМПВызовСервера.ТекущийКлючСессии(ПараметрыЗапроса);
			
		КонецЕсли;	
			
	Исключение
	КонецПопытки;

	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлючСессии(Команда)
	ПолучитьКлючСессииНаСервере();
		
	Если Не ЗначениеЗаполнено(Объект.КлючСессии) Тогда
		Сообщить("Не удалось получить ключ сессии. Проверьте настройки подключения к ИС МП");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизводственныйОбъектДляКлючаСессииПриИзменении(Элемент)
	
	Элементы.ПроизводственныйОбъект.Видимость = Объект.ИспользоватьПроизводственныйОбъектДляКлючаСессии;
	
КонецПроцедуры

#КонецОбласти