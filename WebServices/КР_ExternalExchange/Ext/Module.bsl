////////////////////////////////////////////////////
//// Объект Модуль.КР_ExternalExchange
//// Создан: 06.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1210  

#Область Операции

Функция Operation(Act, Params)

	ИмяМетода = НРег(Act);
	Если ИмяМетода = "uploadimagesofgoods" Тогда 
		
		Возврат ЗагрузитьИзображениеНоменклатуры(Params);
		
	// << 31.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1407
	ИначеЕсли ИмяМетода = "getprice" Тогда
		
		Возврат ПолучитьЦеныНоменклатуры(Params);
		
	// >> 31.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1407
	КонецЕсли;
	
	Возврат ОшибкаСервиса(501, "Не реализовано");
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОперацииOperation

Функция ЗагрузитьИзображениеНоменклатуры(JSON)
	Перем ПутьКФайлам, ТипПутиКФайлам; 
	Попытка
		ПараметрыМетода = JSONВДанные(JSON);
	Исключение
		Возврат ОшибкаСервиса(400, "Некорректные параметры");
	КонецПопытки;
	
	Если Не ПараметрыМетода.Свойство("Path", ПутьКФайлам) 
		Или Не ПараметрыМетода.Свойство("Type", ТипПутиКФайлам)
		Или Не ЗначениеЗаполнено(ПутьКФайлам) 
		Тогда   
		Возврат ОшибкаСервиса(400, "Некорректные параметры.");
	КонецЕсли;

	ХранитьФайлыВТомахНаДиске = РаботаСФайламиВТомахСлужебный.ХранитьФайлыВТомахНаДиске();
	ТомХранения = Неопределено;
	Если ХранитьФайлыВТомахНаДиске Тогда  
		ТомХранения = КР_ДополнительныеНастройкиПовтИсп.Значение("ТомХраненияИзображенийНоменклатуры", Ложь);
	КонецЕсли;
	
	ПутьКФайлам = СокрЛП(ПутьКФайлам);
	ТипПутиКФайлам = НРег(СокрЛП(ТипПутиКФайлам));
	ПрямойПутьКФайлу = (ТипПутиКФайлам = "file");
	
	ЛогОбработки = Новый Массив;
	ИмяСобытия = "Загрузка изображений товаров";
	
	// Логирование запроса.
	ЗаписьЖурналаРегистрации(ИмяСобытия, , , , "Запрос: " + ТипПутиКФайлам + ":" + ПутьКФайлам);
	
	//Выбрать все файлы из каталога
	Попытка
		Если Не ПрямойПутьКФайлу Тогда
			НайденныеФайлы = НайтиФайлы(ПутьКФайлам, "*.jpg");
		Иначе
			НайденныеФайлы = НайтиФайлы(ПутьКФайлам);
		КонецЕсли;
	Исключение
		Возврат ОшибкаСервиса(500, "Ошибка доступа к файлам изображений.");
	КонецПопытки;
	
	Если ПрямойПутьКФайлу 
		И НайденныеФайлы.Количество() = 0 Тогда
		ОписаниеСобытия = "Файл не найден.";
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
		Возврат ОшибкаСервиса(500, ОписаниеСобытия);
	КонецЕсли;
		
	ЗапросНоменклатура = Новый Запрос(ТекстЗапросаПоискНоменклатурыПоАртикулу());	
	
	// Обработка файлов.  
	АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено);
	КоличествоОбработанныхФайлов = 0;
	ЕстьОшибки = Ложь;
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		
		КоличествоОбработанныхФайлов = КоличествоОбработанныхФайлов + 1;
		
		ПутьКФайлу = Файл.ПолноеИмя;
		ОписаниеСобытия = "Обработка файла: " + ПутьКФайлу;
		ДобавитьВЛог(ЛогОбработки, ОписаниеСобытия);
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
		
		// Проверка размера файла.
		Если Файл.Размер() > 102400 Тогда
			ОписаниеСобытия = "Размер больше 100 Кб, файл пропущен.";
			ДобавитьВЛог(ЛогОбработки, "- " + ОписаниеСобытия);
			ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		//Разбор имени файла
		ИмяФайла = СокрЛП(Файл.ИмяБезРасширения);
		Если СтрРазделить(ИмяФайла, " ").Количество() <> 2 Тогда 
			ОписаниеСобытия = "Имя не соответствует ожидаемому формату.";
			ДобавитьВЛог(ЛогОбработки, "- " + ОписаниеСобытия);
			ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли; 
		
		Артикул = ИмяФайла;
		
		//Поиск номенклатуры
		ЗапросНоменклатура.УстановитьПараметр("Артикул", Артикул);
		
		ВыборкаНоменклатура = ЗапросНоменклатура.Выполнить().Выбрать();
		Если ВыборкаНоменклатура.Следующий() Тогда
			Номенклатура = ВыборкаНоменклатура.Ссылка; 
			ФайлКартинки = ВыборкаНоменклатура.ФайлКартинки;
		Иначе
			ОписаниеСобытия = "Не найдена номенклатура с артикулом """ + Артикул + """";
			ДобавитьВЛог(ЛогОбработки, "- " + ОписаниеСобытия);
			ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли; 
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВХранилище); 
		
		Если ЗначениеЗаполнено(ФайлКартинки) Тогда
			
			ОписаниеСобытия = "Изображение найдено в базе и будет обновлено.";
			ДобавитьВЛог(ЛогОбработки, "- " + ОписаниеСобытия);
			ЗаписьЖурналаРегистрации(ИмяСобытия, , , ФайлКартинки, ОписаниеСобытия);

			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			РаботаСФайлами.ОбновитьФайл(ФайлКартинки, ИнформацияОФайле); 
				
			ОписаниеСобытия = "Обновление изображения номенклатуры выполнено успешно.";
			ДобавитьВЛог(ЛогОбработки, "- " + ОписаниеСобытия);
			ЗаписьЖурналаРегистрации(ИмяСобытия, , , ФайлКартинки, ОписаниеСобытия); 
			
		Иначе                             
			
			ОписаниеСобытия = "Будет загружено новое изображение.";
			ДобавитьВЛог(ЛогОбработки, "- " + ОписаниеСобытия);
			ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
			
			Попытка
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Том", ТомХранения);
				
				ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла(ПараметрыФайла);
				ПараметрыФайла.ВладелецФайлов = Номенклатура;
				ПараметрыФайла.ИмяБезРасширения = ИмяФайла;
				ПараметрыФайла.РасширениеБезТочки = "jpg";
				ФайлКартинки = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище);			
				
				НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
				НоменклатураОбъект.ФайлКартинки = ФайлКартинки;
				НоменклатураОбъект.Записать();
				
				ОписаниеСобытия = "Запись изображения в базу выполнена успешно.";
				ДобавитьВЛог(ЛогОбработки, "- " + ОписаниеСобытия);
				ЗаписьЖурналаРегистрации(ИмяСобытия, , , ФайлКартинки, ОписаниеСобытия); 
								
			Исключение
				ОписаниеСобытия = "Файл недоступен.";
				ДобавитьВЛог(ЛогОбработки, "- " + ОписаниеСобытия);
				ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
				ЕстьОшибки = Истина;
				Продолжить;
			КонецПопытки;
        	
		КонецЕсли;
		
	КонецЦикла; 
	
	ОписаниеСобытия = "Обработано файлов: " + Формат(КоличествоОбработанныхФайлов, "ЧН=0; ЧГ=0");
	ДобавитьВЛог(ЛогОбработки, ОписаниеСобытия);
	ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
	
	Возврат ОтветСервиса(?(ПрямойПутьКФайлу И ЕстьОшибки, 500, 200), СтрСоединить(ЛогОбработки, Символы.ПС));
		
КонецФункции

// << 31.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1407
Функция ПолучитьЦеныНоменклатуры(JSON)
	
	// --> Евлахов Игорь Николаевич (Начало) 31.10.2023
	// Задача #3233
	// *//--> Евлахов Игорь Николаевич (Начало было)
	//Попытка		
	//	МассивШтрихкодов = JSONВДанные(JSON);		
	//Исключение
	//	Возврат ОшибкаСервиса(400, "Некорректные параметры");
	//КонецПопытки;
	//
	//Если Не ТипЗнч(МассивШтрихкодов) = Тип("Массив") Тогда
	//	Возврат ОшибкаСервиса(400, "Некорректные параметры");
	//КонецЕсли;
	// *//<-- Евлахов Игорь Николаевич (Конец было)
	
	Попытка		
		// Требуется корректно преобразовывать тип дата,
		// предыдущая функция возвращает дату как строка
		ВходящиеДанные = JSONВЗначение(JSON, "Date");		
	Исключение
		Возврат ОшибкаСервиса(400, "Некорректные параметры");
	КонецПопытки;
	
	// Инициализация значений параметров запроса
	МассивШтрихкодов = Новый Массив();
	Период = ТекущаяДатаСеанса();
	
	// В зависимости от полученных данных Массив или Соответствие, будем по-разному обрабатывать.
	// Цель такой конструкции сохранить работоспособность старого формата входящих данных,
	// до тех пор, пока на внешней стороне переделаю структуру передаваемых параметров.
	Если ТипЗнч(ВходящиеДанные) = Тип("Массив") Тогда
		МассивШтрихкодов = ВходящиеДанные;
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Соответствие") Тогда
		ЗначениеПараметра = ВходящиеДанные.Получить("Barcodes");	
		Если ЗначениеПараметра <> Неопределено Тогда
			МассивШтрихкодов = ЗначениеПараметра;		
		КонецЕсли;

		ЗначениеПараметра = ВходящиеДанные.Получить("Date");
		Если ЗначениеПараметра <> Неопределено Тогда
			Период = ЗначениеПараметра;		
		КонецЕсли;
	Иначе
		Возврат ОшибкаСервиса(400, "Некорректные параметры. Ожидается запись с ключами: Barcodes, Date");	
	КонецЕсли;	
	
	// <-- Евлахов Игорь Николаевич (Конец) 31.10.2023
		
	Попытка
		ЦеныИМ = КР_ДополнительныеНастройкиПовтИсп.МассивЗначений("ЦеныИМ");
	Исключение
		Возврат ОшибкаСервиса(520, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ИмяСобытия = "Загрузка прайс-листа номенклатуры";
	ЕстьОшибки = Ложь;
	ТекстОшибки = НСтр("ru = 'Не найдены данные прайл-листа по штрихкоду ""%1""'");
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапросаПрайсЛист());
	// --> Евлахов Игорь Николаевич (Начало) 31.10.2023
	// Задача #3233
	// *//--> Евлахов Игорь Николаевич (Начало было)
	//Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	// *//<-- Евлахов Игорь Николаевич (Конец было)   
	Запрос.УстановитьПараметр("Период", Период);
	// <-- Евлахов Игорь Николаевич (Конец) 31.10.2023
	Запрос.УстановитьПараметр("Штрихкоды", МассивШтрихкодов);
	Запрос.УстановитьПараметр("ЦеныИМ", ЦеныИМ);
	Запрос.УстановитьПараметр("ПустойВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяХарактеристикаЦО",
		Справочники.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка());
		
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Штрихкод Из МассивШтрихкодов Цикл
		// #3228..
		// Было:
		//Данные = ТаблицаДанных.Найти(Штрихкод, "Штрихкод");
		//Если Данные = Неопределено Тогда
		//	ТекстСообщения = СтрШаблон(ТекстОшибки, Штрихкод);
		//	ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ТекстСообщения);
		//	Продолжить;
		//КонецЕсли;
		//
		//СтруктураРезультат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Данные);
		//
		//Результат.Добавить(СтруктураРезультат);
		//
		// Стало:
		СтрокиДанных = ТаблицаДанных.НайтиСтроки(Новый Структура("Штрихкод", Штрихкод));
		Если СтрокиДанных.Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(ТекстОшибки, Штрихкод);
			ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Для Каждого Данные Из СтрокиДанных Цикл
			СтруктураРезультат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Данные);
			Результат.Добавить(СтруктураРезультат);
		КонецЦикла;
		// ..#3228
		
	КонецЦикла;
	
	Возврат ОтветСервиса(200, Результат);
	
КонецФункции // >> 31.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1407

#КонецОбласти     

#Область РаботаCJSON

Функция ДанныеВJSON(Данные)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция JSONВДанные(JSON)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSON);
	
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции

// --> Евлахов Игорь Николаевич (Начало) 31.10.2023
// Данная функция будет включена в БСП версии 3.1.9
// В текущей версии эта функция разбросана по разным модулям.
// После того как версия БСП (текущая 3.1.5.473) станет 3.1.9 требуется 
// заменить вызов из общего модуля.
// Пример вызова:
// Результат = ОбщегоНазначения.JSONВЗначение(Строка, ИменаСвойствСоЗначениямиДата, ПрочитатьВСоответствие)
// Задача #3233
Функция JSONВЗначение(Строка, ИменаСвойствСоЗначениямиДата = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСоЗначениямиДата);
	
КонецФункции
// <-- Евлахов Игорь Николаевич (Конец) 31.10.2023

#КонецОбласти

#Область Ошибки

Функция ОшибкаСервиса(ErrorCode, ErrorDescr)

	// Ответ поделен на 2 метода (ОшибкаСервиса, ОтветСервиса) намеренно 
	// Во "взрослых" системах нет префикса "Error..", 
	//	но принимающая сторона ждет именно такого формата.
	// Если потом будет рефакторинг - методы уже поделены
	ОтветСервиса = Новый Структура;   
	ОтветСервиса.Вставить("ErrorCode", ErrorCode);
	ОтветСервиса.Вставить("ErrorDescr", ErrorDescr);
	ОтветСервиса.Вставить("Result", "");
	
	Возврат ДанныеВJSON(ОтветСервиса);
	
КонецФункции	

Функция ОтветСервиса(ErrorCode, Result)
	
	// Ответ поделен на 2 метода (ОшибкаСервиса, ОтветСервиса) намеренно 
	// Во "взрослых" системах нет префикса "Error..", 
	//	но принимающая сторона ждет именно такого формата.
	// Если потом будет рефакторинг - методы уже поделены
	ОтветСервиса = Новый Структура;   
	ОтветСервиса.Вставить("ErrorCode", ErrorCode);
	ОтветСервиса.Вставить("ErrorDescr", "");
	ОтветСервиса.Вставить("Result", Result);
	
	Возврат ДанныеВJSON(ОтветСервиса);
	
КонецФункции	

#КонецОбласти

#Область СлужебныеМетоды

Процедура ДобавитьВЛог(ЛогОбработки, Сообщение);
   ЛогОбработки.Добавить(Сообщение);
КонецПроцедуры
	
#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаПоискНоменклатурыПоАртикулу()
	
	Возврат
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	МАКСИМУМ(Номенклатура.ФайлКартинки) КАК ФайлКартинки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) КАК НоменклатураКоличествоРазличных
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка"
	;
	
КонецФункции

// << 31.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1407
Функция ТекстЗапросаПрайсЛист()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	рс_Штрихкоды.Штрихкод КАК Штрихкод,
	|	рс_Штрихкоды.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(спр_Номенклатура.Наименование, """") КАК НоменклатураНаименование,
	|	рс_Штрихкоды.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(спр_Характеристики.ХарактеристикаНоменклатурыДляЦенообразования, &ПустаяХарактеристикаЦО) КАК ХарактеристикаЦО
	|ПОМЕСТИТЬ врт_ДанныеШтрихкодов
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК рс_Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спр_Номенклатура
	|		ПО рс_Штрихкоды.Номенклатура = спр_Номенклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК спр_Характеристики
	|		ПО рс_Штрихкоды.Характеристика = спр_Характеристики.Ссылка
	|ГДЕ
	|	рс_Штрихкоды.Штрихкод В(&Штрихкоды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ПОМЕСТИТЬ врт_ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
	|			&Период,
	|			(Номенклатура, ХарактеристикаЦО) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура КАК Номенклатура,
	|						Т.ХарактеристикаЦО КАК ХарактеристикаЦО
	|					ИЗ
	|						врт_ДанныеШтрихкодов КАК Т)
	|				И ВидЦены В (&ЦеныИМ)) КАК ЦеныНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ДанныеШтрихкодов.Штрихкод КАК Штрихкод,
	|	врт_ДанныеШтрихкодов.НоменклатураНаименование КАК Номенклатура,
	|	ЕСТЬNULL(спр_ВидыЦен.Наименование, """") КАК ВидЦены,
	|	ЕСТЬNULL(врт_ЦеныНоменклатуры.Цена, 0) КАК Цена
	|ИЗ
	|	врт_ДанныеШтрихкодов КАК врт_ДанныеШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_ЦеныНоменклатуры КАК врт_ЦеныНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК спр_ВидыЦен
	|			ПО врт_ЦеныНоменклатуры.ВидЦены = спр_ВидыЦен.Ссылка
	|		ПО врт_ДанныеШтрихкодов.Номенклатура = врт_ЦеныНоменклатуры.Номенклатура
	|			И врт_ДанныеШтрихкодов.ХарактеристикаЦО = врт_ЦеныНоменклатуры.ХарактеристикаЦО";
	
	Возврат ТекстЗапроса;
	
КонецФункции // >> 31.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1407

#КонецОбласти

