
//////////////////////////////////////////////////////////////////////////////
Функция DMServerInfo()
	
	Возврат "Соединение с сервером установлено!";
	
КонецФункции
Функция GetVersion()
	
	Возврат "2.8";	
	
КонецФункции
Функция Login(SN, UserName)
	
	УзелПО = НайтиУзел(SN);
	
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;	
	
	ДатаМобайл_ОбщийМодуль.ЗаписьЗначенийУзлаОбменаТСД(УзелПО, "ТекущийПользователь", UserName);
	ДатаМобайл_ОбщийМодуль.ЗаписьЗначенийУзлаОбменаТСД(УзелПО, "ДатаПоследнейАвторизацииПользователя", ТекущаяДата());
	
	Возврат Истина;
	
КонецФункции
Функция Logout(SN, UserName)
	
	УзелПО = НайтиУзел(SN);
	
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;	
	
	ДатаМобайл_ОбщийМодуль.ЗаписьЗначенийУзлаОбменаТСД(УзелПО, "ТекущийПользователь", "");
	
	Возврат Истина;
	
КонецФункции
Функция SendLogs(SN, UserName, Logs)
	
	Для каждого СтрокаЛогов Из Logs.DMLog Цикл 
		лДатаОшибки = СтрокаЛогов.DMLogDate;
		лТипОшибки = СтрокаЛогов.DMLogType;
		лОписаниеОшибки = СтрокаЛогов.DMLogData;
		лИмяПользователя = СтрокаЛогов.DMLogUserName;
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция IsNewData(SN, UserName)
	
	ОбъектОтвета = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMNewDataStruct"));
	
	УзелПО = НайтиУзел(SN);
	
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                    |	МАКСИМУМ(ВложенныйЗапрос.DMNewTemplates) КАК DMNewTemplates,
	                    |	МАКСИМУМ(ВложенныйЗапрос.DMNewCells) КАК DMNewCells,
	                    |	МАКСИМУМ(ВложенныйЗапрос.DMNewDocs) КАК DMNewDocs,
	                    |	МАКСИМУМ(ВложенныйЗапрос.DMNewUsers) КАК DMNewUsers,
	                    |	МАКСИМУМ(ВложенныйЗапрос.DMNewArts) КАК DMNewArts,
	                    |	МАКСИМУМ(ВложенныйЗапрос.DMNewClients) КАК DMNewClients,
	                    |	МАКСИМУМ(ВложенныйЗапрос.DMNewUnits) КАК DMNewUnits,
	                    |	МАКСИМУМ(ВложенныйЗапрос.DMNewEgaisArts) КАК DMNewEgaisArts,
						|	МАКСИМУМ(ВложенныйЗапрос.DMNewWarehouses) КАК DMNewWarehouses,
						|	МАКСИМУМ(ВложенныйЗапрос.DMNewEgaisMarks) КАК DMNewEgaisMarks,
						|	МАКСИМУМ(ВложенныйЗапрос.DMNewSteps) КАК DMNewSteps,
						|	МАКСИМУМ(ВложенныйЗапрос.DMNeedCheckFTP) КАК DMNeedCheckFTP 
	                    |ИЗ
	                    |	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                    |		ИСТИНА КАК DMNewTemplates,
	                    |		ЛОЖЬ КАК DMNewCells,
	                    |		ЛОЖЬ КАК DMNewDocs,
	                    |		ЛОЖЬ КАК DMNewUsers,
	                    |		ЛОЖЬ КАК DMNewArts,
	                    |		ЛОЖЬ КАК DMNewClients,
	                    |		ЛОЖЬ КАК DMNewUnits,
	                    |		ЛОЖЬ КАК DMNewEgaisArts,
	                    |		NULL КАК DMNewWarehouses,
						|		ЛОЖЬ КАК DMNewEgaisMarks,
						|		ЛОЖЬ КАК DMNewSteps,
						|		ЛОЖЬ КАК DMNeedCheckFTP
						|
	                    |	ИЗ
	                    |		Справочник.ДатаМобайл_ШаблоныДокументов.Изменения КАК ДатаМобайл_ШаблоныДокументовИзменения
	                    |	ГДЕ
	                    |		НЕ ДатаМобайл_ШаблоныДокументовИзменения.Ссылка.ПометкаУдаления
	                    |		И ДатаМобайл_ШаблоныДокументовИзменения.Узел = &Узел
	                    |	
						//|	ОБЪЕДИНИТЬ ВСЕ
						//|	
						//|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
						//|		ЛОЖЬ,
						//|		ИСТИНА,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ
						//|	ИЗ
						//|		Справочник.СкладскиеЯчейки.Изменения КАК МестаХраненияИзменения
						//|	ГДЕ
						//|		НЕ МестаХраненияИзменения.Ссылка.ПометкаУдаления
						//|		И МестаХраненияИзменения.Узел = &Узел
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ИСТИНА,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
						|		ЛОЖЬ
	                    |	ИЗ
	                    |		Справочник.ДатаМобайл_ДокументыТСД.Изменения КАК ДатаМобайл_ДокументыТСДИзменения
	                    |	ГДЕ
	                    |		НЕ ДатаМобайл_ДокументыТСДИзменения.Ссылка.ПометкаУдаления
	                    |		И ДатаМобайл_ДокументыТСДИзменения.Узел = &Узел
	                    |	
						//|	ОБЪЕДИНИТЬ ВСЕ
						//|	
						//|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ИСТИНА,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ
						//|	ИЗ
						//|		Справочник.Пользователи.Изменения КАК ПользователиИзменения
						//|	ГДЕ
						//|		НЕ ПользователиИзменения.Ссылка.ПометкаУдаления
						//|		И ПользователиИзменения.Узел = &Узел
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ИСТИНА,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
						|		ЛОЖЬ
	                    |	ИЗ
	                    |		Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	                    |	ГДЕ
	                    |		НЕ НоменклатураИзменения.Ссылка.ПометкаУдаления
	                    |		И НоменклатураИзменения.Узел = &Узел
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ИСТИНА,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
						|		ЛОЖЬ
	                    |	ИЗ
	                    |		Справочник.ХарактеристикиНоменклатуры.Изменения КАК ХарактеристикиНоменклатурыИзменения
	                    |	ГДЕ
	                    |		НЕ ХарактеристикиНоменклатурыИзменения.Ссылка.ПометкаУдаления
	                    |		И ХарактеристикиНоменклатурыИзменения.Узел = &Узел
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ИСТИНА,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
						|		ЛОЖЬ
	                    |	ИЗ
	                    |		РегистрСведений.ШтрихкодыНоменклатуры.Изменения КАК ШтрихкодыНоменклатурыИзменения
	                    |	ГДЕ
	                    |		ШтрихкодыНоменклатурыИзменения.Узел = &Узел
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ИСТИНА,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
						|		ЛОЖЬ
	                    |	ИЗ
	                    |		Справочник.ДатаМобайл_НовыеТовары.Изменения КАК ДатаМобайл_НовыеТоварыИзменения
	                    |	ГДЕ
	                    |		ДатаМобайл_НовыеТоварыИзменения.Узел = &Узел
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ИСТИНА,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
						|		ЛОЖЬ
	                    |	ИЗ
	                    |		РегистрСведений.ДатаМобайл_НовыеШтрихкоды.Изменения КАК ДатаМобайл_НовыеШтрихкодыИзменения
	                    |	ГДЕ
	                    |		ДатаМобайл_НовыеШтрихкодыИзменения.Узел = &Узел
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ИСТИНА,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
						|		ЛОЖЬ
	                    |	ИЗ
	                    |		Справочник.Партнеры.Изменения КАК ПартнерыИзменения
	                    |	ГДЕ
	                    |		НЕ ПартнерыИзменения.Ссылка.ПометкаУдаления
	                    |		И ПартнерыИзменения.Узел = &Узел
	                    |	
						//|	ОБЪЕДИНИТЬ ВСЕ
						//|	
						//|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ИСТИНА,
						//|		ЛОЖЬ, 
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ
						//|	ИЗ
						//|		Справочник.УпаковкиЕдиницыИзмерения.Изменения КАК УпаковкиЕдиницыИзмерения
						//|	ГДЕ
						//|		НЕ УпаковкиЕдиницыИзмерения.Ссылка.ПометкаУдаления
						//|		И УпаковкиЕдиницыИзмерения.Узел = &Узел
	                    //|	
						//|	ОБЪЕДИНИТЬ ВСЕ
						//|	
						//|	ВЫБРАТЬ
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ИСТИНА,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ
						//|	ИЗ
						//|		Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Изменения КАК КлассификаторАлкогольнойПродукцииЕГАИСИзменения
						//|	ГДЕ
						//|		КлассификаторАлкогольнойПродукцииЕГАИСИзменения.Узел = &Узел
						//|		И НЕ КлассификаторАлкогольнойПродукцииЕГАИСИзменения.Ссылка.ПометкаУдаления
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ИСТИНА,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
						|		ЛОЖЬ
	                    |	ИЗ
	                    |		Справочник.Склады.Изменения КАК СкладыИзменения
						|	ГДЕ
	                    |		НЕ СкладыИзменения.Ссылка.ПометкаУдаления
	                    |		И СкладыИзменения.Узел = &Узел
						//|	ОБЪЕДИНИТЬ ВСЕ
						//|	
						//|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ИСТИНА
						//|	ИЗ
						//|		РегистрСведений.АкцизныеМаркиЕГАИС.Изменения КАК МаркиЕГАИСИзменения
						//|	ГДЕ
						//|		НЕ МаркиЕГАИСИзменения.АкцизнаяМарка.ПометкаУдаления
						//|		И МаркиЕГАИСИзменения.Узел = &Узел
						//|	
						//|	ОБЪЕДИНИТЬ ВСЕ
						//|	
						//|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ЛОЖЬ,
						//|		ИСТИНА,
						//|		ЛОЖЬ
						//|	ИЗ
						//|		РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов.Изменения КАК СвязиДополнительныхФормИШаблонов
						//|	ГДЕ
						//|		СвязиДополнительныхФормИШаблонов.Узел = &Узел
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
	                    |		ЛОЖЬ,
						|		ДатаМобайл_СписокТСД.выгружатьТоварыНаFTP
	                    |	ИЗ
	                    |		ПланОбмена.ДатаМобайл_СписокТСД КАК ДатаМобайл_СписокТСД
	                    |	ГДЕ
	                    |		ДатаМобайл_СписокТСД.Ссылка = &Узел) КАК ВложенныйЗапрос");
	
	Запрос.УстановитьПараметр("Узел",УзелПО.Ссылка);
	
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОбъектОтвета, Рез);
	КонецЕсли;	
	
	ОбъектОтвета.DMClearTemplates = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьШаблоны");
	ОбъектОтвета.DMNewTemplates = ?(ОбъектОтвета.DMNewTemplates,ОбъектОтвета.DMNewTemplates, ОбъектОтвета.DMClearTemplates);	
	
	ОбъектОтвета.DMClearCells = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьЯчейки");
	ОбъектОтвета.DMNewCells = ?(ОбъектОтвета.DMNewCells,ОбъектОтвета.DMNewCells, ОбъектОтвета.DMClearCells);	
	
	ОбъектОтвета.DMClearDocs = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьДокументы");
	ОбъектОтвета.DMNewDocs = ?(ОбъектОтвета.DMNewDocs, ОбъектОтвета.DMNewDocs, ОбъектОтвета.DMClearDocs);	
	
	ОбъектОтвета.DMClearUsers = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьПользователей");
	ОбъектОтвета.DMNewUsers = ?(ОбъектОтвета.DMNewUsers, ОбъектОтвета.DMNewUsers, ОбъектОтвета.DMClearUsers);	
	
	ОбъектОтвета.DMClearArts = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьТовары");
	ОбъектОтвета.DMNewArts = ?(ОбъектОтвета.DMNewArts, ОбъектОтвета.DMNewArts, ОбъектОтвета.DMClearArts);	
	
	ОбъектОтвета.DMClearClients = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьКлиентов");
	ОбъектОтвета.DMNewClients = ?(ОбъектОтвета.DMNewClients, ОбъектОтвета.DMNewClients, ОбъектОтвета.DMClearClients);	

	ОбъектОтвета.DMClearUnits = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьЕдиницыИзмерения");
	ОбъектОтвета.DMNewUnits = ?(ОбъектОтвета.DMNewUnits, ОбъектОтвета.DMNewUnits, ОбъектОтвета.DMClearUnits);	
	
	ОбъектОтвета.DMClearEgaisArts = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьТоварыЕГАИС");
	ОбъектОтвета.DMNewEgaisArts = ?(ОбъектОтвета.DMNewEgaisArts, ОбъектОтвета.DMNewEgaisArts, ОбъектОтвета.DMClearEgaisArts);	
	
	ОбъектОтвета.DMClearWarehouses = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьСклады");
	ОбъектОтвета.DMNewWarehouses = ?(ОбъектОтвета.DMNewWarehouses, ОбъектОтвета.DMNewWarehouses, ОбъектОтвета.DMClearWarehouses);	
	
	ОбъектОтвета.DMClearEgaisMarks = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьМаркиЕГАИС");
	ОбъектОтвета.DMNewEgaisMarks = ?(ОбъектОтвета.DMNewEgaisMarks, ОбъектОтвета.DMNewEgaisMarks, ОбъектОтвета.DMClearEgaisMarks);	
	
	ОбъектОтвета.DMClearArtMarks = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьКодыМаркировки");
	ОбъектОтвета.DMNewArtMarks = ОбъектОтвета.DMClearArtMarks;
	
	ОбъектОтвета.DMClearSteps = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьДополнительныеФормы");
	ОбъектОтвета.DMNewSteps = ?(ОбъектОтвета.DMNewSteps, ОбъектОтвета.DMNewSteps, ОбъектОтвета.DMClearSteps);
	
	ОбъектОтвета.DMClearBarcodeTemplates = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьШаблоныШтрихкодов");
	ОбъектОтвета.DMNewBarcodeTemplates = ОбъектОтвета.DMClearBarcodeTemplates;
	
	ОбъектОтвета.DMClearSNTypes = ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьТипыСерий"); 
	ОбъектОтвета.DMNewSNTypes = ОбъектОтвета.DMClearSNTypes;

	// Указываем в узле дату последней загрузки справочников:
	ДатаМобайл_ОбщийМодуль.ЗаписьЗначенийУзлаОбменаТСД(УзелПО, "ДатаПоследнейЗагрузкиСправочников", ТекущаяДата());	
	             	
	Возврат ОбъектОтвета;
КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция GetArtRest(SN, UserName, ArtID, Params)
	
	УзелПО = НайтиУзел(SN);
	
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если Лев(ArtID,3) = "8U-" Тогда
		
		Попытка
			Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4, 36)));
		Исключение
			Возврат 0;
		КонецПопытки;	
		
		ИДХК = Сред(ArtID, 40, 36);
		
		Если ИДХК = "00000000-0000-0000-0000-000000000000" Тогда
			ХК = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Иначе	
			ХК = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
		КонецЕсли;
		
	ИначеЕсли Лев(ArtID,3) = "8n-" Тогда
		Возврат 0;
	КонецЕсли;	
	
			ЭтоУслуга = Ложь;
			Попытка 
				Если Товар.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЭтоУслуга = Истина;
			   	КонецЕсли;
			Исключение
			КонецПопытки;
			
	Если УзелПО.НеОтображатьОстатки Тогда
		Возврат 0;
	ИначеЕсли ЭтоУслуга Тогда
		Возврат 999;	
	Иначе	
	Запрос = Новый Запрос("ВЫБРАТЬ
						|	СУММА(РезервТСД.Количество) КАК РезервТСД,
						|	0 КАК Резерв,
						|	0 КАК Остаток
						|ПОМЕСТИТЬ РазныеДанные
						|ИЗ
						|	(ВЫБРАТЬ
						|		ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
						|		ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
						|		СУММА(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество) КАК Количество
						|	ИЗ
						|		Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
						|	ГДЕ
						|		ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
						|			И ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура = &Номенклатура
						|				И ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры = &ХК
						|					И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.Шаблон.РезервироватьТовар
						|	
						|	СГРУППИРОВАТЬ ПО
						|		ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
						|		ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры) КАК РезервТСД
						|ГДЕ
						|	РезервТСД.Номенклатура = &Номенклатура
						|	И РезервТСД.ХарактеристикаНоменклатуры = &ХК
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	0,
						|	СУММА(ТоварыВРезервеНаСкладахОстатки.КОтгрузкеОстаток),
						|	СУММА(ТоварыВРезервеНаСкладахОстатки.ВНаличииОстаток)
						|ИЗ
						|	РегистрНакопления.ТоварыНаСкладах.Остатки(
						|			,
						|			Номенклатура = &Номенклатура
						|				И (&ВсеСклады
						|					ИЛИ Склад В (&Склады))
						|				И 1=1) КАК ТоварыВРезервеНаСкладахОстатки
						|ГДЕ
						|	ТоварыВРезервеНаСкладахОстатки.Номенклатура = &Номенклатура
						|	И ТоварыВРезервеНаСкладахОстатки.Характеристика = &ХК
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	СУММА(ЕСТЬNULL(РазныеДанные.РезервТСД, 0)) КАК РезервТСД,
						|	СУММА(ЕСТЬNULL(РазныеДанные.Резерв, 0)) КАК Резерв,
						|	СУММА(ЕСТЬNULL(РазныеДанные.Остаток, 0)) КАК Остаток
						|ИЗ
						|	РазныеДанные КАК РазныеДанные");
	
	Запрос.УстановитьПараметр("Номенклатура", Товар);
	Запрос.УстановитьПараметр("ХК", ХК);
	
	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
	Запрос.УстановитьПараметр("Склады", СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
	
	СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения", СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", СписокПомещений.Количество() = 0);

	Если УзелПО.УчитыватьОстаткиПоРегиструСвободныеОстатки Тогда
		Если ДатаМобайл_ОбщийМодуль.ЕстьРегистрНакопления("СвободныеОстатки") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТоварыНаСкладах", "СвободныеОстатки");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОтгрузкеОстаток", "ВРезервеСоСкладаОстаток");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "(&ВсеПомещения ИЛИ Помещение В (&Помещения))");
		КонецЕсли;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "(&ВсеПомещения ИЛИ Помещение В (&Помещения))");
	КонецЕсли;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Итог = Рез.Итог("Остаток") - Рез.Итог("Резерв") - Рез.Итог("РезервТСД");
	Итог = Формат(Итог, ПолучитьФорматнуюСтрокуЧисла());
	
	Возврат Итог;
	
	КонецЕсли; 
КонецФункции
Функция GetNewArts(SN, UserName)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtList"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьТовары") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьТовары",Ложь);	
		ОбъектСписка = СобратьТовары(Новый Массив, УзелПО); 
	Иначе
		Попытка	
			
			ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.Справочники.Номенклатура);
			ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.Справочники.ХарактеристикиНоменклатуры);
			ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
			ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
			ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.Справочники.ДатаМобайл_НовыеТовары);
			ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.РегистрыСведений.ДатаМобайл_НовыеШтрихкоды);
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИзменившиесяТовары.Ссылка
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		НоменклатураИзменения.Ссылка КАК Ссылка
			|	ИЗ
			|		Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
			|	ГДЕ
			|		НоменклатураИзменения.Узел = &Узел
			|		И НЕ НоменклатураИзменения.НомерСообщения ЕСТЬ NULL 
			|		И НЕ ЕСТЬNULL(НоменклатураИзменения.Ссылка.ЭтоГруппа, ИСТИНА)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		Номенклатура.Ссылка
			|	ИЗ
			|		Справочник.ХарактеристикиНоменклатуры.Изменения КАК ХарактеристикиНоменклатурыИзменения
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|			ПО (ВЫБОР
			|					КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
			|						ТОГДА ХарактеристикиНоменклатурыИзменения.Ссылка.Владелец = Номенклатура.Ссылка
			|					КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
			|						ТОГДА ХарактеристикиНоменклатурыИзменения.Ссылка.Владелец = Номенклатура.ВидНоменклатуры
			|					КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
			|						ТОГДА ХарактеристикиНоменклатурыИзменения.Ссылка.Владелец = Номенклатура.ВладелецХарактеристик	
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ)
			|	ГДЕ
			|		ХарактеристикиНоменклатурыИзменения.Узел = &Узел
			|		И НЕ ХарактеристикиНоменклатурыИзменения.НомерСообщения ЕСТЬ NULL 
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		Номенклатура.Ссылка
			|	ИЗ
			|		Справочник.УпаковкиЕдиницыИзмерения.Изменения КАК УпаковкиНоменклатурыИзменения
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|			ПО (УпаковкиНоменклатурыИзменения.Ссылка.Владелец = Номенклатура.Ссылка
			|					ИЛИ УпаковкиНоменклатурыИзменения.Ссылка.Владелец = Номенклатура.ВидНоменклатуры)
			|	ГДЕ
			|		УпаковкиНоменклатурыИзменения.Узел = &Узел
			|		И НЕ УпаковкиНоменклатурыИзменения.НомерСообщения ЕСТЬ NULL 
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ШтрихкодыНоменклатуры.Номенклатура
			|	ИЗ
			|		РегистрСведений.ШтрихкодыНоменклатуры.Изменения КАК ШтрихкодыНоменклатурыИзменения
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|			ПО ШтрихкодыНоменклатурыИзменения.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод
			|	ГДЕ
			|		ШтрихкодыНоменклатурыИзменения.Узел = &Узел
			|		И НЕ ШтрихкодыНоменклатурыИзменения.НомерСообщения ЕСТЬ NULL 
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ДатаМобайл_НовыеШтрихкоды.Номенклатура
			|	ИЗ
			|		РегистрСведений.ДатаМобайл_НовыеШтрихкоды.Изменения КАК ДатаМобайл_НовыеШтрихкодыИзменения
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
			|			ПО ДатаМобайл_НовыеШтрихкодыИзменения.ШтрихКод = ДатаМобайл_НовыеШтрихкоды.ШтрихКод
			|	ГДЕ
			|		ДатаМобайл_НовыеШтрихкодыИзменения.Узел = &Узел
			|		И НЕ ДатаМобайл_НовыеШтрихкодыИзменения.НомерСообщения ЕСТЬ NULL 
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ДатаМобайл_НовыеТоварыИзменения.Ссылка
			|	ИЗ
			|		Справочник.ДатаМобайл_НовыеТовары.Изменения КАК ДатаМобайл_НовыеТоварыИзменения
			|	ГДЕ
			|		ДатаМобайл_НовыеТоварыИзменения.Узел = &Узел
			|		И НЕ ДатаМобайл_НовыеТоварыИзменения.НомерСообщения ЕСТЬ NULL ) КАК ИзменившиесяТовары
			|ГДЕ
			|	(НЕ ИзменившиесяТовары.Ссылка ССЫЛКА Справочник.Номенклатура
			|			ИЛИ ИзменившиесяТовары.Ссылка В ИЕРАРХИИ (&СписокТоваров)
			|			ИЛИ &ВсеТовары)");
			
			Запрос.УстановитьПараметр("Узел", УзелПО);
			Запрос.УстановитьПараметр("СписокТоваров", УзелПО.ДоступныеГруппыТоваров.ВыгрузитьКолонку("Номенклатура"));
			Запрос.УстановитьПараметр("ВсеТовары", УзелПО.ДоступныеГруппыТоваров.Количество() = 0);
			
			МассивКВыгрузке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			Если МассивКВыгрузке.Количество() > 0 Тогда
				ОбъектСписка = СобратьТовары(МассивКВыгрузке, УзелПО);
			КонецЕсли;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.Номенклатура);
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ХарактеристикиНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ДатаМобайл_НовыеТовары);
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.РегистрыСведений.ДатаМобайл_НовыеШтрихкоды);
			
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОбъектСписка;
КонецФункции
Функция GetDocArts(SN, UserName, DocOutID)
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtList"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
	Исключение	
		ВызватьИсключениеВС("GetDocArts. Не найден документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;
	
	Если СсылкаНаДок.ПолучитьОбъект() = Неопределено Тогда
		ВызватьИсключениеВС("GetDocArts. Не найден документ. ");
		Возврат ОбъектСписка;
	КонецЕсли;	
	
	Шаблон = СсылкаНаДок.Шаблон;
	
	Если Шаблон.ЕГАИС Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                    |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Ссылка
		                    |ИЗ
		                    |	Документ.ТТНВходящаяЕГАИС.Товары КАК Документ1С
							|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
							| 		ПО СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = Документ1С.АлкогольнаяПродукция 						
		                    |ГДЕ
		                    |	Документ1С.Ссылка = &Ссылка");
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ТТНВходящаяЕГАИС.","." + Шаблон.ВидДокумента + ".");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Товары КАК ","." + Шаблон.ИмяТабличнойЧастиПодбор + " КАК ");
		
		Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
			ДатаМобайл_ОбщийМодуль.астЗаменитьРегистрНоменклатурыЕГАИС(Запрос.Текст);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ1С.АлкогольнаяПродукция", "Документ1С.НоменклатураЕГАИС");
		КонецЕсли;

	Иначе
		
		Если Шаблон.ВидДокумента = "СборкаТоваров" Или Шаблон.ВидДокумента = "ЗаказНаСборку" Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
								|	Документ1С.Номенклатура КАК Ссылка,
								|	Документ1С.Характеристика КАК СсылкаХарактеристика
								|ИЗ
								|	Документ.СборкаТоваров.Товары КАК Документ1С
								|ГДЕ
								|	Документ1С.Ссылка = &Ссылка
								|
								|ОБЪЕДИНИТЬ ВСЕ
								|
								|ВЫБРАТЬ РАЗЛИЧНЫЕ
								|	Документ1С.Номенклатура,
								|	Документ1С.Характеристика
								|ИЗ
								|	Документ.СборкаТоваров.Товары КАК Документ1С
								|ГДЕ
								|	Документ1С.Ссылка = &Ссылка
								|
								|ОБЪЕДИНИТЬ ВСЕ
								|
								|ВЫБРАТЬ РАЗЛИЧНЫЕ
								|	Документ1С.Номенклатура,
								|	Документ1С.Характеристика
								|ИЗ
								|	Документ.СборкаТоваров КАК Документ1С
								|ГДЕ
								|	Документ1С.Ссылка = &Ссылка");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"СборкаТоваров",Шаблон.ВидДокумента);	
		Иначе
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
								|	Документ1С.Номенклатура КАК Ссылка,
								|	Документ1С.Характеристика КАК СсылкаХарактеристика
								|ИЗ
								|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК Документ1С					
								|ГДЕ
								|	Документ1С.Ссылка = &Ссылка
								|
								|ОБЪЕДИНИТЬ ВСЕ
								|
								|ВЫБРАТЬ РАЗЛИЧНЫЕ
								|	Документ1С.Номенклатура,
								|	Документ1С.Характеристика
								|ИЗ
								|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК Документ1С
								|ГДЕ
								|	Документ1С.Ссылка = &Ссылка");
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,".ОтборРазмещениеТоваров.","." + Шаблон.ВидДокумента + ".");
		Если Шаблон.ИспользоватьПодбор Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ТоварыОтбор КАК ", "."+Шаблон.ИмяТабличнойЧастиПодбор + " КАК ");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,".ТоварыОтбор КАК ","."+Шаблон.ИмяТабличнойЧастиПриемка+" КАК ");
		КонецЕсли;	
		
		Если Шаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП" ИЛИ Шаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,".ТоварыРазмещение КАК ","."+"СоставТранспортныхУпаковок"+" КАК ");	
		КонецЕсли;
		
		Если Шаблон.ИспользоватьПриемку Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ТоварыРазмещение КАК ", "." + Шаблон.ИмяТабличнойЧастиПриемка + " КАК ");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ТоварыРазмещение КАК ", "." + Шаблон.ИмяТабличнойЧастиПодбор + " КАК ");
		КонецЕсли;

		Если Шаблон.РаспределениеТоваров = 1 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ1С.Ссылка = &Ссылка", "Документ1С.Ссылка В(&Документы)");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДок.ИсходныйДокумент);	
	Запрос.УстановитьПараметр("Документы", СсылкаНаДок.Задания.ВыгрузитьКолонку("Задание"));	
	
	Если Шаблон.ЕГАИС Тогда
		МассивХарактеристик = Неопределено;
	Иначе
		МассивХарактеристик = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаХарактеристика");
	КонецЕсли;
		
	МассивКВыгрузке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если МассивКВыгрузке.Количество() > 0 Тогда
		ОбъектСписка = СобратьТовары(МассивКВыгрузке, УзелПО, МассивХарактеристик, Шаблон);
	КонецЕсли;	
	
	Возврат ОбъектСписка;
	
КонецФункции
Функция GetTemplates(SN,UserName)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMTemplateList"));

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						|	ДатаМобайл_ШаблоныДокументовИзменения.Ссылка КАК ШаблонСсылка
						|ИЗ
						|	Справочник.ДатаМобайл_ШаблоныДокументов.Изменения КАК ДатаМобайл_ШаблоныДокументовИзменения
						|ГДЕ
						|	(ДатаМобайл_ШаблоныДокументовИзменения.Ссылка В (&СписокШаблонов) ИЛИ &ВсеШаблоны)
						|	И (ДатаМобайл_ШаблоныДокументовИзменения.Узел = &Узел И НЕ ДатаМобайл_ШаблоныДокументовИзменения.НомерСообщения ЕСТЬ NULL)
						|	И НЕ ЕСТЬNULL(ДатаМобайл_ШаблоныДокументовИзменения.Ссылка.ПометкаУдаления,ИСТИНА)");
	
	Запрос.УстановитьПараметр("СписокШаблонов", УзелПО.Шаблоны.ВыгрузитьКолонку("Шаблон"));
	Запрос.УстановитьПараметр("ВсеШаблоны", УзелПО.Шаблоны.Количество() = 0);

	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьШаблоны") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО,"ОчиститьШаблоны", Ложь);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ДатаМобайл_ШаблоныДокументов.Изменения","Справочник.ДатаМобайл_ШаблоныДокументов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (ДатаМобайл_ШаблоныДокументовИзменения.Узел = &Узел И НЕ ДатаМобайл_ШаблоныДокументовИзменения.НомерСообщения ЕСТЬ NULL)","");
		Рез = Запрос.Выполнить().Выбрать();
		Пока Рез.Следующий() Цикл
			ОбъектШаблона = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMTemplate"));
			ЗаполнитьОбъектШаблона(ОбъектШаблона, Рез.ШаблонСсылка);
			ОбъектСписка.DMTemplate.Добавить(ОбъектШаблона);
		КонецЦикла;		
	Иначе 	
		ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.Справочники.ДатаМобайл_ШаблоныДокументов);
		Запрос.УстановитьПараметр("Узел", УзелПО);
		Рез = Запрос.Выполнить().Выбрать();
		Пока Рез.Следующий() Цикл
			ОбъектШаблона = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMTemplate"));
			ЗаполнитьОбъектШаблона(ОбъектШаблона,Рез.ШаблонСсылка);
			ОбъектСписка.DMTemplate.Добавить(ОбъектШаблона);
		КонецЦикла;	
		Попытка ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ДатаМобайл_ШаблоныДокументов); Исключение КонецПопытки;	
	КонецЕсли;

	Возврат ОбъектСписка;
КонецФункции
Функция GetCells(SN, UserName)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMCellList"));
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
		
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьЯчейки") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьЯчейки", Ложь);	 
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	МестаХраненияИзменения.Ссылка КАК ССылка,
	                    |	МестаХраненияИзменения.Ссылка.Код КАК Код,
	                    |	0 КАК DMTaskQnt,
	                    |	МестаХраненияИзменения.Ссылка.Наименование КАК Наименование
	                    |ИЗ
	                    |	Справочник.СкладскиеЯчейки КАК МестаХраненияИзменения
	                    |ГДЕ
	                    |	НЕ МестаХраненияИзменения.Ссылка.ПометкаУдаления
	                    |	И НЕ МестаХраненияИзменения.Ссылка.ЭтоГруппа
						|	И (&ВсеСклады ИЛИ МестаХраненияИзменения.Владелец В (&Склады))
						|	И (&ВсеПомещения ИЛИ МестаХраненияИзменения.Помещение В (&Помещения))
						|	И (МестаХраненияИзменения.Владелец.ИспользоватьАдресноеХранение
						|	ИЛИ МестаХраненияИзменения.Помещение.ИспользоватьАдресноеХранение)");
	
	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
	Запрос.УстановитьПараметр("Склады", СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);

	СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения", СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", СписокПомещений.Количество() = 0);
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		ОбъектЯчейки = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMCell"));
		Модуль_ШтрихкодированиеПечатныхФорм = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ШтрихкодированиеПечатныхФорм");
		ОбъектЯчейки.DMBarcode = ?(УзелПО.ВыгружатьВКодЯчейки = 1,Строка(Рез.Код), Строка(Модуль_ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(Рез.Ссылка)));
		ОбъектЯчейки.DMCellName = ?(УзелПО.ВыгружатьВНаименованиеЯчейки = 0,ЧистаяСтрока(Рез.Наименование), Рез.Код);
		ОбъектЯчейки.DMTaskQnt = Рез.DMTaskQnt;
		ОбъектСписка.DMCell.Добавить(ОбъектЯчейки);
	КонецЦикла;	
	
	Возврат ОбъектСписка;
КонецФункции
Функция GetClients(SN, UserName)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMClientList"));
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьКлиентов") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьКлиентов", Ложь);	 
	КонецЕсли;
	
	Если  УзелПО.ВыгружатьПодразделенияКакКонтрагентов <> 2 Тогда
		
		Попытка				
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫРАЗИТЬ(ПартнерыИзменения.Наименование КАК Строка(100)) КАК DMName,
			|	ПартнерыИзменения.Ссылка КАК Ссылка,
			|	МАКСИМУМ(ПартнерыИзменения.Ссылка.Код) КАК DMBarcode,
			|	МАКСИМУМ(ЕстьNULL(СправочникКонтрагенты.Ссылка,ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))) КАК СсылкаКонтрагент
			|ИЗ
			|	Справочник.Партнеры КАК ПартнерыИзменения
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникКонтрагенты
			|	ПО ПартнерыИзменения.Ссылка = СправочникКонтрагенты.Партнер	
			|ГДЕ
			|	НЕ ПартнерыИзменения.Ссылка.ПометкаУдаления
			|СГРУППИРОВАТЬ ПО 
			|	ВЫРАЗИТЬ(ПартнерыИзменения.Наименование КАК Строка(100)),
			|	ПартнерыИзменения.Ссылка
			|УПОРЯДОЧИТЬ ПО
			|	ПартнерыИзменения.Наименование");
			
			
			Рез = Запрос.Выполнить().Выбрать();
			Пока Рез.Следующий() Цикл
				ОбъектКлиента = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMClient"));
				ЗаполнитьЗначенияСвойств(ОбъектКлиента,Рез);
				ОбъектКлиента.DMClientID = "8k-"+СокрЛП(Рез.Ссылка.УникальныйИдентификатор());
				Попытка ОбъектКлиента.DMBarcode = Рез.СсылкаКонтрагент.ИНН; Исключение КонецПопытки;
				ОбъектСписка.DMClient.Добавить(ОбъектКлиента);
			КонецЦикла;			
		Исключение
		КонецПопытки;
		
		Попытка
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫРАЗИТЬ(ПартнерыИзменения.Наименование КАК Строка(100)) КАК DMName,
			|	ПартнерыИзменения.Ссылка КАК Ссылка,
			|	"""" КАК DMBarcode
			|ИЗ
			|	Справочник.КлассификаторОрганизацийЕГАИС КАК ПартнерыИзменения
			|ГДЕ
			|	НЕ ПартнерыИзменения.Ссылка.ПометкаУдаления
			|УПОРЯДОЧИТЬ ПО
			|	ПартнерыИзменения.Наименование");
			
			Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "КлассификаторОрганизацийЕГАИС", "астКонтрагентыЕГАИС");		
			КонецЕсли;
			
			Рез = Запрос.Выполнить().Выбрать();
			Пока Рез.Следующий() Цикл
				ОбъектКлиента = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMClient"));
				ЗаполнитьЗначенияСвойств(ОбъектКлиента, Рез);
				ОбъектКлиента.DMClientID = "8k-" + СокрЛП(Рез.Ссылка.УникальныйИдентификатор());
				ОбъектСписка.DMClient.Добавить(ОбъектКлиента);
			КонецЦикла;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	//Попытка
	//	Если  УзелПО.ВыгружатьСкладыКакКонтрагентов > 0 Тогда
	//		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	//		|	ВЫРАЗИТЬ(Склады.Наименование КАК Строка(100)) КАК DMName,
	//		|	Склады.Ссылка КАК Ссылка,
	//		|	"""" КАК DMBarcode
	//		|ИЗ
	//		|	Справочник.Склады КАК Склады
	//		|ГДЕ
	//		|	НЕ Склады.Ссылка.ПометкаУдаления
	//		|	И НЕ Склады.Ссылка.ЭтоГруппа
	//		|	И (&ВсеСклады ИЛИ Склады.Ссылка В (&Склады))
	//		|УПОРЯДОЧИТЬ ПО
	//		|	Склады.Наименование");
	//		
	//		СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
	//		Запрос.УстановитьПараметр("Склады", СписокСкладов);
	//		
	//		НеУчитыватьОграниченияПриВыгрузкеСправочникаСкладов = УзелПО.НеУчитыватьОграниченияПриВыгрузкеСправочникаСкладов;
	//		
	//		Запрос.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0 ИЛИ НеУчитыватьОграниченияПриВыгрузкеСправочникаСкладов);
	//		
	//		Рез = Запрос.Выполнить().Выбрать();
	//		Пока Рез.Следующий() Цикл
	//			ОбъектКлиента = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMClient"));
	//			ЗаполнитьЗначенияСвойств(ОбъектКлиента, Рез);
	//			ОбъектКлиента.DMClientID = "8k-" + СокрЛП(Рез.Ссылка.УникальныйИдентификатор());
	//			ОбъектСписка.DMClient.Добавить(ОбъектКлиента);
	//		КонецЦикла;		
	//		
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;	
	
	Попытка
		Если УзелПО.ВыгружатьПодразделенияКакКонтрагентов > 0 Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫРАЗИТЬ(Подразделения.Наименование КАК СТРОКА(100)) КАК DMName,
			|	Подразделения.Ссылка КАК Ссылка,
			|	"""" КАК DMBarcode
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК Подразделения
			|ГДЕ
			|	НЕ Подразделения.Ссылка.ПометкаУдаления
			//|	И (&ВсеПодразделения
			//|			ИЛИ Подразделения.Ссылка В (&Подразделения))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Подразделения.Наименование");
			
			Рез = Запрос.Выполнить().Выбрать();
			Пока Рез.Следующий() Цикл
				ОбъектКлиента = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMClient"));
				ЗаполнитьЗначенияСвойств(ОбъектКлиента, Рез);
				ОбъектКлиента.DMClientID = "8k-" + СокрЛП(Рез.Ссылка.УникальныйИдентификатор());
				ОбъектСписка.DMClient.Добавить(ОбъектКлиента);
			КонецЦикла;		
		КонецЕсли;
	Исключение КонецПопытки;
	
	Возврат ОбъектСписка;
	
КонецФункции
Функция GetUsers(SN, UserName)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMUserList"));
	УзелПО = НайтиУзел(SN);
	
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьПользователей") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО,"ОчиститьПользователей", Ложь);	 
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                    |	МАКСИМУМ(Логины.DMLogin) КАК DMLogin,
	                    |	Логины.DMName,
	                    |	МАКСИМУМ(Логины.DMPass) КАК DMPass,
	                    |	МАКСИМУМ(Логины.DMIsAdmin) КАК DMIsAdmin,
	                    |	МАКСИМУМ(Логины.DMEnableEditArts) КАК DMEnableEditArts
	                    |ИЗ
	                    |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |		ПОДСТРОКА(ДатаМобайл_СписокТСДПользователиТСД.Логин, 1, 50) КАК DMLogin,
	                    |		ПОДСТРОКА(ДатаМобайл_СписокТСДПользователиТСД.Пользователь.Наименование, 1, 100) КАК DMName,
	                    |		ПОДСТРОКА(ДатаМобайл_СписокТСДПользователиТСД.Пароль, 1, 10) КАК DMPass,
	                    |		ДатаМобайл_СписокТСДПользователиТСД.Админ КАК DMIsAdmin,
	                    |		ДатаМобайл_СписокТСДПользователиТСД.РазрешитьСозданиеТовара КАК DMEnableEditArts
	                    |	ИЗ
	                    |		ПланОбмена.ДатаМобайл_СписокТСД.ПользователиТСД КАК ДатаМобайл_СписокТСДПользователиТСД
	                    |	ГДЕ
	                    |		НЕ ДатаМобайл_СписокТСДПользователиТСД.Пользователь.ПометкаУдаления
	                    |		И (ДатаМобайл_СписокТСДПользователиТСД.Ссылка = &Узел)) КАК Логины
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	Логины.DMName");
	
	Запрос.УстановитьПараметр("Узел", УзелПО.Ссылка);
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		ОбъектПользователь = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMUser"));
		ЗаполнитьЗначенияСвойств(ОбъектПользователь, Рез);
		ОбъектСписка.DMUser.Добавить(ОбъектПользователь);
	КонецЦикла;	
	
	Возврат ОбъектСписка;
	
КонецФункции
Функция GetEgaisMarks(SN, UserName)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMMarkEgaisList"));
	
	Если НЕ ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() И НЕ ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда		
		Возврат ОбъектСписка;
	КонецЕсли;	
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьМаркиЕГАИС") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьМаркиЕГАИС", Ложь);	 
	КонецЕсли;
			
	Если НЕ ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
		
		ЗапросМарок = Новый Запрос ("ВЫБРАТЬ
		|	ЕСТЬNULL(ЕГАИС_ДанныеМарки.АкцизнаяМарка.ЗначениеШтрихкода,"""") КАК АкцизнаяМарка,
		|	ЕГАИС_ДанныеМарки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ЕСТЬNULL(ЕГАИС_ДанныеМарки.АлкогольнаяПродукция.ПометкаУдаления, ЛОЖЬ) КАК ПометкаУдаления,
		|	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода,"""") КАК Короб,
		|	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка.ЗначениеШтрихкода,"""") КАК Палета 
		|ИЗ
		|	РегистрСведений.АкцизныеМаркиЕГАИС КАК ЕГАИС_ДанныеМарки
		|   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
		|   ПО ДанныеУпаковкиУровень1.Штрихкод.ЗначениеШтрихкода = ЕГАИС_ДанныеМарки.АкцизнаяМарка.ЗначениеШтрихкода
		|   И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
		|			ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
		|   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
		|   ПО ДанныеУпаковкиУровень2.Штрихкод.ЗначениеШтрихкода = ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода
		|   И (ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
		|			ИЛИ ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))");
		
		
		ВыборкаМарок = ЗапросМарок.Выполнить().Выбрать();
		
		Пока ВыборкаМарок.Следующий() Цикл
			Попытка 
				Если НЕ ЗначениеЗаполнено(ВыборкаМарок.АкцизнаяМарка) Или НЕ ЗначениеЗаполнено(ВыборкаМарок.АлкогольнаяПродукция) Или ВыборкаМарок.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				
				ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMMarkEgais"));
				ОбъектТовара.ArtID = "8e-" + Строка(ВыборкаМарок.АлкогольнаяПродукция.УникальныйИдентификатор()); 
				ОбъектТовара.Mark = ВыборкаМарок.АкцизнаяМарка;
				ОбъектТовара.Box = ВыборкаМарок.Короб;
				ОбъектТовара.Pallet = ВыборкаМарок.Палета;
				
				ОбъектСписка.DMMarkEgais.Добавить(ОбъектТовара);
			Исключение 
				Продолжить;
			КонецПопытки;	
		КонецЦикла;
		
	Иначе
		ЗапросМарок = Новый Запрос("ВЫБРАТЬ
		|	астМаркиЕГАИС.Наименование КАК АкцизнаяМарка,
		|	астМаркиЕГАИС.НоменклатураЕГАИС КАК АлкогольнаяПродукция
		|ИЗ
		|	Справочник.астМаркиЕГАИС КАК астМаркиЕГАИС
		|ГДЕ
		|	НЕ астМаркиЕГАИС.ПометкаУдаления");
		
		
		ВыборкаМарок = ЗапросМарок.Выполнить().Выбрать();
		
		Пока ВыборкаМарок.Следующий() Цикл
			
			ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMMarkEgais"));
			ОбъектТовара.ArtID = "8e-" + Строка(ВыборкаМарок.АлкогольнаяПродукция.УникальныйИдентификатор()); 
			ОбъектТовара.Mark = ВыборкаМарок.АкцизнаяМарка;
			
			ОбъектСписка.DMMarkEgais.Добавить(ОбъектТовара);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ОбъектСписка;
	
КонецФункции
Функция GetEgaisArts(SN, UserName)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtEgaisList"));
	
	Если НЕ ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() И НЕ ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда		
		Возврат ОбъектСписка;
	КонецЕсли;
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьТоварыЕГАИС") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьТоварыЕГАИС", Ложь);	 
	КонецЕсли;
	
	
	Если НЕ ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда 
		ЗапросТоваров = Новый Запрос;
		ЗапросТоваров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ЕГАИС_НоменклатураИзменения.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяССылка)) КАК ССылка
		|ИЗ
		|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК ЕГАИС_НоменклатураИзменения
		|ГДЕ
		| НЕ ЕГАИС_НоменклатураИзменения.Ссылка.ПометкаУдаления";
		
		ВыборкаТоваров = ЗапросТоваров.Выполнить().Выбрать();
		Пока ВыборкаТоваров.Следующий() Цикл
			ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtEgais"));
			ОбъектТовара.ArtID = "8"+"e-"+Строка(ВыборкаТоваров.Ссылка.УникальныйИдентификатор());	
			ОбъектТовара.ArtName = ЧистаяСтрока(Лев(ВыборкаТоваров.Ссылка.Наименование, 100));
			ОбъектТовара.Barcode = ЧистаяСтрока(ВыборкаТоваров.Ссылка.Код);
			ОбъектТовара.Manufacturer = ЧистаяСтрока(Лев(ВыборкаТоваров.Ссылка.Производитель.Наименование, 100));
			ОбъектТовара.Importer = ""; // импортера не используем
			ОбъектТовара.Capacity = ВыборкаТоваров.Ссылка.Объем;
			ОбъектТовара.PercentAlco = ВыборкаТоваров.Ссылка.Крепость;
			ОбъектТовара.TypeAlco = ЧистаяСтрока(ВыборкаТоваров.Ссылка.ВидПродукции.Код + " " + ВыборкаТоваров.Ссылка.ВидПродукции.Наименование);
			ОбъектТовара.DMIsCompared = ТоварСопоставленОдинКОдному(ВыборкаТоваров.Ссылка);
			ОбъектТовара.DMBoxKF = 0; // количество единиц в коробе
			ОбъектТовара.DMIsNeedBlankA = Истина; // требуется ввод справки А по товару
			ОбъектТовара.DMIsNeedBlankB = Истина; // требуется ввод справки Б по товару
			ОбъектТовара.DMIsNeedDateBottling = Истина; // требуется ввод даты розлива по товару
			
			ОбъектСписка.DMArtEgais.Добавить(ОбъектТовара);
		КонецЦикла;	
		
		
	Иначе
		
		ЗапросТоваров = Новый Запрос;
		ЗапросТоваров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ЕГАИС_НоменклатураИзменения.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяССылка)) КАК Ссылка
		|ИЗ
		|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК ЕГАИС_НоменклатураИзменения
		|ГДЕ
		| НЕ ЕГАИС_НоменклатураИзменения.Ссылка.ПометкаУдаления";
		
		// аст
		
		Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "КлассификаторАлкогольнойПродукцииЕГАИС", "астНоменклатураЕГАИС");
		КонецЕсли;
		
		ВыборкаТоваров = ЗапросТоваров.Выполнить().Выбрать();
		Пока ВыборкаТоваров.Следующий() Цикл
			ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtEgais"));
			ОбъектТовара.ArtID = "8" + "e-" + Строка(ВыборкаТоваров.Ссылка.УникальныйИдентификатор());	
			ОбъектТовара.ArtName = ЧистаяСтрока(Лев(ВыборкаТоваров.Ссылка.Наименование, 100));
			ОбъектТовара.Barcode = ЧистаяСтрока(ВыборкаТоваров.Ссылка.Код);
			
			// аст
			Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
				ОбъектТовара.Manufacturer = ЧистаяСтрока(Лев(ВыборкаТоваров.Ссылка.ПроизводительИмпортер.Наименование, 100));
			Иначе
				ОбъектТовара.Manufacturer = ЧистаяСтрока(Лев(ВыборкаТоваров.Ссылка.Производитель.Наименование, 100));
			КонецЕсли;
			
			ОбъектТовара.Importer = ""; // импортера не используем
			ОбъектТовара.Capacity = ВыборкаТоваров.Ссылка.Объем;
			ОбъектТовара.PercentAlco = ВыборкаТоваров.Ссылка.Крепость;
			ОбъектТовара.TypeAlco = ЧистаяСтрока(ВыборкаТоваров.Ссылка.ВидПродукции.Код + " " + ВыборкаТоваров.Ссылка.ВидПродукции.Наименование);
			ОбъектТовара.DMIsCompared = ТоварСопоставленОдинКОдному(ВыборкаТоваров.Ссылка);
			ОбъектТовара.DMBoxKF = 0; // количество единиц в коробе
			ОбъектТовара.DMIsNeedBlankA = Истина; // требуется ввод справки А по товару
			ОбъектТовара.DMIsNeedBlankB = Истина; // требуется ввод справки Б по товару
			ОбъектТовара.DMIsNeedDateBottling = Истина; // требуется ввод даты розлива по товару
			
			ОбъектСписка.DMArtEgais.Добавить(ОбъектТовара);
		КонецЦикла;
		
	КонецЕсли;	
	Возврат ОбъектСписка;	
	
КонецФункции
Функция GetDocArtsEgais(SN, UserName, DocID)
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtEgaisList"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocID, 5)));
	Исключение                                                                                                   
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	Шаблон = СсылкаНаДок.Шаблон;
	
	ИмяДокумента = Шаблон.ВидДокумента;
	ИмяТЧ = Шаблон.ИмяТабличнойЧастиПодбор;
	
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаДок.ИсходныйДокумент) ИЛИ НЕ Шаблон.ЕГАИС Тогда
		Возврат ОбъектСписка;	
	КонецЕсли;
	
	
	Если НЕ ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда 
		ЗапросТоваров = Новый Запрос;
		ЗапросТоваров.УстановитьПараметр("ТТН", СсылкаНаДок.ИсходныйДокумент);
		ЗАпросТоваров.Текст = 
		"ВЫБРАТЬ
		|	ЕГАИС_ТТНТовары.АлкогольнаяПродукция КАК Номенклатура,
		|	СУММА(ЕГАИС_ТТНТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыВОсновании
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС.Товары КАК ЕГАИС_ТТНТовары
		|ГДЕ
		|	ЕГАИС_ТТНТовары.Ссылка = &ТТН
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИС_ТТНТовары.АлкогольнаяПродукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЕГАИС_Номенклатура.Код, """") КАК Barcode,
		|	ЕСТЬNULL(ЕГАИС_Номенклатура.Производитель.Наименование, """") КАК Manufacturer,
		|	ЕСТЬNULL(ЕГАИС_Номенклатура.Импортер.Наименование, """") КАК Importer,
		|	ЕСТЬNULL(ЕГАИС_Номенклатура.Объем, 0) КАК Capacity,
		|	ЕСТЬNULL(ЕГАИС_Номенклатура.Крепость, 0) КАК PercentAlco,
		|	ВЫБОР
		|		КОГДА ЕГАИС_Номенклатура.ВидПродукции.Код ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(ЕГАИС_Номенклатура.ВидПродукции.Код + "" "", """") + ЕСТЬNULL(ЕГАИС_Номенклатура.ВидПродукции.Наименование, """")
		|		ИНАЧЕ ЕСТЬNULL(Товары.Номенклатура.ВидАлкогольнойПродукции.Код + "" "", """") + ЕСТЬNULL(Товары.Номенклатура.ВидАлкогольнойПродукции.Наименование + "" "", """")
		|	КОНЕЦ КАК TypeAlco,
		|	ЕСТЬNULL(ТоварыВОсновании.Количество, 0) КАК Quant,
		|	ЕСТЬNULL(ЕГАИС_Номенклатура.Наименование, """") КАК ArtName,
		|	ЕСТЬNULL(ТоварыВОсновании.Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяССылка)) КАК Ссылка
		|ИЗ
		|	ТоварыВОсновании КАК ТоварыВОсновании
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|			МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура
		|		ИЗ
		|			РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК Товары
		|		ПО (Товары.АлкогольнаяПродукция = ТоварыВОсновании.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК ЕГАИС_Номенклатура
		|		ПО ТоварыВОсновании.Номенклатура = ЕГАИС_Номенклатура.Ссылка";
		
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, ".ТТНВходящаяЕГАИС.Товары", "." + Шаблон.ВидДокумента + "." + Шаблон.ИмяТабличнойЧастиПодбор);
		ТаблицаТоваров = ЗапросТоваров.Выполнить().Выгрузить();
		Для каждого ВыборкаТоваров Из ТаблицаТоваров Цикл
			
			ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtEgais"));
			ОбъектТовара.ArtID = "8" + "e-" + Строка(ВыборкаТоваров.Ссылка.УникальныйИдентификатор());	
			ЗаполнитьЗначенияСвойств(ОбъектТовара, ВыборкаТоваров);
			ОбъектТовара.ArtName = ЧистаяСтрока(ОбъектТовара.ArtName);
			ОбъектТовара.DMIsCompared = ТоварСопоставленОдинКОдному(ВыборкаТоваров.Ссылка); 
			
			ОбъектСписка.DMArtEgais.Добавить(ОбъектТовара);
			
		КонецЦикла;
		
	Иначе
		
		ЗапросТоваров = Новый Запрос;
		ЗапросТоваров.УстановитьПараметр("ТТН", СсылкаНаДок.ИсходныйДокумент);
		
		ЗапросТоваров.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕГАИС_ТТНТовары.НоменклатураЕГАИС КАК Номенклатура,
		|	СУММА(ЕГАИС_ТТНТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыВОсновании
		|ИЗ
		|	Документ.астТоварноТранспортныеНакладныеИзЕГАИС.Товары КАК ЕГАИС_ТТНТовары
		|ГДЕ
		|	ЕГАИС_ТТНТовары.Ссылка = &ТТН
		|   И ЕГАИС_ТТНТовары.Количество > 0
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИС_ТТНТовары.НоменклатураЕГАИС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТоварыВОсновании.Номенклатура.Код, """") КАК Barcode,
		|	ЕСТЬNULL(ТоварыВОсновании.Номенклатура.ПроизводительИмпортер.Наименование, """") КАК Manufacturer,
		//|	ЕСТЬNULL(ЕГАИС_Номенклатура.Импортер.Наименование, """") КАК Importer,
		|	"""" КАК Importer,
		|	ЕСТЬNULL(ТоварыВОсновании.Номенклатура.Объем, 0) КАК Capacity,
		|	ЕСТЬNULL(ТоварыВОсновании.Номенклатура.Крепость, 0) КАК PercentAlco,
		|	ЕСТЬNULL(ТоварыВОсновании.Номенклатура.ВидПродукции.Наименование, """") КАК TypeAlco,
		|	ЕСТЬNULL(ТоварыВОсновании.Количество, 0) КАК Quant, 
		|	ЕСТЬNULL(ТоварыВОсновании.Номенклатура.Наименование, """") КАК ArtName,
		|	ЕСТЬNULL(ТоварыВОсновании.Номенклатура, ЗНАЧЕНИЕ(Справочник.астНоменклатураЕГАИС.ПустаяССылка)) КАК ССылка
		|ИЗ
		|	ТоварыВОсновании КАК ТоварыВОсновании";
		
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "астТоварноТранспортныеНакладныеИзЕГАИС", Шаблон.ВидДокумента);
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, ".Товары КАК ", "." + Шаблон.ИмяТабличнойЧастиПодбор + " КАК ");
		
		Если Шаблон.ВидДокумента = "астАктФиксацииШтрихкодовНаБалансеОрганизации" Тогда
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "ЕГАИС_ТТНТовары.Количество", "ЕГАИС_ТТНТовары.КоличествоМарок");				
		КонецЕсли;
		
		
		ВыборкаТоваров = ЗапросТоваров.Выполнить().Выбрать();
		Пока ВыборкаТоваров.Следующий() Цикл
			ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtEgais"));
			ОбъектТовара.ArtID = "8" + "e-" + Строка(ВыборкаТоваров.Ссылка.УникальныйИдентификатор());	
			ЗаполнитьЗначенияСвойств(ОбъектТовара, ВыборкаТоваров);
			ОбъектТовара.ArtName = ЧистаяСтрока(ОбъектТовара.ArtName);
			ОбъектТовара.DMIsCompared = ТоварСопоставленОдинКОдному(ВыборкаТоваров.ССылка);
			ОбъектТовара.DMBoxKF = 6; // количество единиц в коробе
			ОбъектТовара.DMIsNeedBlankA = Истина; // требуется ввод справки А по товару
			ОбъектТовара.DMIsNeedBlankB = Истина; // требуется ввод справки Б по товару
			ОбъектТовара.DMIsNeedDateBottling = Истина; // требуется ввод даты розлива по товару
			
			ОбъектСписка.DMArtEgais.Добавить(ОбъектТовара);
		КонецЦикла;
		
		
	КонецЕсли;
	
	
	Возврат ОбъектСписка;
	
	
КонецФункции
Функция GetUnits(SN, UserName)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьЕдиницыИзмерения") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьЕдиницыИзмерения", Ложь);	 
	КонецЕсли;
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMUnitList"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ	
	|	УпаковкиЕдиницыИзмеренияИзменения.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(УпаковкиЕдиницыИзмеренияИзменения.Наименование КАК СТРОКА(10)) КАК Наименование,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(УпаковкиЕдиницыИзмеренияИзменения.Наименование КАК СТРОКА(2)) = ""шт"" ТОГДА 1
	|	ИНАЧЕ ВЫБОР КОГДА ВЫРАЗИТЬ(УпаковкиЕдиницыИзмеренияИзменения.Наименование КАК СТРОКА(10)) ПОДОБНО (""%шт%"") ТОГДА 2
	|	ИНАЧЕ 3 КОНЕЦ
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ тЕдиницы
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмеренияИзменения
	|ГДЕ
	|	УпаковкиЕдиницыИзмеренияИзменения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
	//|	И УпаковкиЕдиницыИзмеренияИзменения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тЕдиницы.Ссылка,
	|	тЕдиницы.Наименование,
	|	тЕдиницы.Приоритет
	|ИЗ
	|	тЕдиницы КАК тЕдиницы
	|
	|СГРУППИРОВАТЬ ПО
	|	тЕдиницы.Ссылка,
	|	тЕдиницы.Наименование,
	|	тЕдиницы.Приоритет
	|УПОРЯДОЧИТЬ ПО
	|	тЕдиницы.Приоритет ВОЗР";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектЕдиницыИзмерения = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMUnit"));
		ОбъектЕдиницыИзмерения.DMUnitID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		ОбъектЕдиницыИзмерения.DMUnitName = ЧистаяСтрока(Выборка.Наименование);
		
		ОбъектСписка.DMUnit.Добавить(ОбъектЕдиницыИзмерения);

	КонецЦикла;

	Возврат ОбъектСписка;

КонецФункции
Функция GetWarehouses(SN, UserName)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;	
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьСклады") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО,"ОчиститьСклады", Ложь);	 
	КонецЕсли;
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMWarehouseList"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(Склады.Наименование КАК Строка(100)) КАК Наименование
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
	    |	НЕ Склады.Ссылка.ПометкаУдаления
		|	И НЕ Склады.Ссылка.ЭтоГруппа
		|	И (&ВсеСклады ИЛИ Склады.Ссылка В (&Склады))
		|УПОРЯДОЧИТЬ ПО
		|	Склады.Наименование";
	
	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
	Запрос.УстановитьПараметр("Склады", СписокСкладов);
	
	НеУчитыватьОграниченияПриВыгрузкеСправочникаСкладов = УзелПО.НеУчитыватьОграниченияПриВыгрузкеСправочникаСкладов;
	
	Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0 Или НеУчитыватьОграниченияПриВыгрузкеСправочникаСкладов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСклада = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMWarehouse"));
		ОбъектСклада.DMWarehouseID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		ОбъектСклада.DMWarehouseName = ЧистаяСтрока(Выборка.Наименование);
		ОбъектСписка.DMWarehouse.Добавить(ОбъектСклада);
		
	КонецЦикла;
	
	Возврат ОбъектСписка;
	
КонецФункции
Функция GetArtAttributesName(SN, UserName)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	ОбъектАтрибутов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMAttrs"));
	
	Если УзелПО.ИмяАтрибута1 <> "" Тогда
		ОбъектАтрибутов.DMAttr1 = УзелПО.ИмяАтрибута1;
	Иначе
		ОбъектАтрибутов.DMAttr1 = "Атрибут 1";
	КонецЕсли;
	
	Если УзелПО.ИмяАтрибута2 <> "" Тогда
		ОбъектАтрибутов.DMAttr2 = УзелПО.ИмяАтрибута2;
	Иначе
		ОбъектАтрибутов.DMAttr2 = "Атрибут 2";
	КонецЕсли;
	
	Если УзелПО.ИмяАтрибута3 <> "" Тогда
		ОбъектАтрибутов.DMAttr3 = УзелПО.ИмяАтрибута3;
	Иначе
		ОбъектАтрибутов.DMAttr3 = "Атрибут 3";
	КонецЕсли;
	
	Если УзелПО.ИмяАтрибута4 <> "" Тогда
		ОбъектАтрибутов.DMAttr4 = УзелПО.ИмяАтрибута4;
	Иначе
		ОбъектАтрибутов.DMAttr4 = "Атрибут 4";
	КонецЕсли;
	
	Если УзелПО.ИмяАтрибута5 <> "" Тогда
		ОбъектАтрибутов.DMAttr5 = УзелПО.ИмяАтрибута5;
	Иначе
		ОбъектАтрибутов.DMAttr5 = "Атрибут 5";
	КонецЕсли;
	
	Если УзелПО.ИмяАтрибута6 <> "" Тогда
		ОбъектАтрибутов.DMAttr6 = УзелПО.ИмяАтрибута6;
	Иначе
		ОбъектАтрибутов.DMAttr6 = "Атрибут 6";
	КонецЕсли;
	
	Если УзелПО.ИмяАтрибута7 <> "" Тогда
		ОбъектАтрибутов.DMAttr7 = УзелПО.ИмяАтрибута7;
	Иначе
		ОбъектАтрибутов.DMAttr7 = "Атрибут 7";
	КонецЕсли;
	
	Если УзелПО.ИмяАтрибута8 <> "" Тогда
		ОбъектАтрибутов.DMAttr8 = УзелПО.ИмяАтрибута8;
	Иначе
		ОбъектАтрибутов.DMAttr8 = "Атрибут 8";
	КонецЕсли;
	
	Если УзелПО.ИмяАтрибута9 <> "" Тогда
		ОбъектАтрибутов.DMAttr9 = УзелПО.ИмяАтрибута9;
	Иначе
		ОбъектАтрибутов.DMAttr9 = "Атрибут 9";
	КонецЕсли;
	
	Если УзелПО.ИмяАтрибута10 <> "" Тогда
		ОбъектАтрибутов.DMAttr10 = УзелПО.ИмяАтрибута10;
	Иначе
		ОбъектАтрибутов.DMAttr10 = "Атрибут 10";
	КонецЕсли;

	Возврат ОбъектАтрибутов;
	
КонецФункции
Функция GetArtOnBC(SN, UserName, Barcode)
	
				
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtList"));
	
	УзелПО = НайтиУзел(SN);
	
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	РегистрШтрихкодов.Номенклатура КАК Ссылка,
						|	РегистрШтрихкодов.Характеристика КАК СсылкаХарактеристика
	                    |ИЗ
	                    |	РегистрСведений.ШтрихкодыНоменклатуры КАК РегистрШтрихкодов
	                    |ГДЕ
	                    |	РегистрШтрихкодов.Штрихкод = &ШК");
						
	Запрос.УстановитьПараметр("ШК", Barcode);
	
	МассивТоваров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	МассивХарактеристик = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаХарактеристика");
		
	Если МассивТоваров.Количество() > 0 Тогда
		ОбъектСписка = СобратьТовары(МассивТоваров, УзелПО, МассивХарактеристик);
	КонецЕсли;
	
	Возврат ОбъектСписка;

	
КонецФункции
Функция GetArtCellsSelect(SN, UserName, DocID, ArtID, Params)
			
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMCellList"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	
	Если ArtID = "" Тогда 
		Возврат ОбъектСписка;
	КонецЕсли;
			
	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocID, 5)));
		ТекущийСклад = СсылкаНаДок.Склад;
		ТекущееПомещение = СсылкаНаДок.Помещение;
	Исключение	
		ВызватьИсключениеВС("GetArtCellsSelect. Не нашли документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок,"ТСД,ДатаНачалаСбора,ДатаЗавершенияСбора,Шаблон,ИсходныйДокумент,Склад,Помещение");
	ДокТСД = ЗначенияРеквизитовСсылкаНаДок.ТСД;
	ДокДатаНачалаСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаНачалаСбора;
	ДокДатаЗавершенияСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаЗавершенияСбора;
	Шаблон = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	ИсходныйДокумент = ЗначенияРеквизитовСсылкаНаДок.ИсходныйДокумент;
	ТекущийСклад  = ЗначенияРеквизитовСсылкаНаДок.Склад;
	ТекущееПомещение = ЗначенияРеквизитовСсылкаНаДок.Помещение;

	
	Если Шаблон = Неопределено Тогда
		ВызватьИсключениеВС("GetArtCellsSelect. Не нашли запись документа. ");
		Возврат ОбъектСписка;
	КонецЕсли;

	Если Лев(ArtID, 3) = "8U-" Тогда
		лТовар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4, 36)));
		ИДХК = Сред(ArtID, 40, 36);
		Если ИДХК <> "00000000-0000-0000-0000-000000000000" Тогда
			лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
		Иначе
			лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	Иначе   
		Возврат ОбъектСписка;
	КонецЕсли;
	
	
	Если Шаблон.ИспользованиеСерийниковПодбор>0 Тогда
		
		//Params={"snValues":"["sn1value", "sn2value"]"}
		//Params={"snValues":"00001989"}
		
		СтруктураParams = Новый Структура;
		СтруктураParams.Вставить("snValues","");	
		ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураParams);
		snValues = СтруктураParams.snValues;
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ДокументТСД", СсылкаНаДок);
		СтруктураСтроки.Вставить("ИмяТаблицы", "Select");	
		СтруктураСтроки.Вставить("СерийныйНомер",snValues);
		СтруктураСтроки.Вставить("Номенклатура", лТовар);
		СтруктураСтроки.Вставить("КМСсылка", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
		СтруктураСтроки.Вставить("KM_DecodedMrc", "");
		СтруктураСтроки.Вставить("СерияСсылка", Справочники.СерииНоменклатуры.ПустаяСсылка());
		
		Попытка ОпределитьСериюВСтрокеДокумента(Шаблон,СтруктураСтроки,Ложь, УзелПО); Исключение КонецПопытки;
		
		лСерия = СтруктураСтроки.СерияСсылка;
		ВсеСерии = Ложь;
	Иначе	
		лСерия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		ВсеСерии = Истина;
	КонецЕсли;
	
	

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ТоварыВЯчейкахОстатки.Ячейка.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	РегистрНакопления.ТоварыВЯчейках.Остатки КАК ТоварыВЯчейкахОстатки
	                    |ГДЕ
	                    |	ТоварыВЯчейкахОстатки.Номенклатура = &лТовар
						|	И ТоварыВЯчейкахОстатки.Характеристика = &лХарактеристикаНоменклатуры
						|	И (&ВсеСерии ИЛИ ТоварыВЯчейкахОстатки.Серия = &лСерия)
	                    |	И ТоварыВЯчейкахОстатки.Ячейка.ТипСкладскойЯчейки = &Хранение
						|   И (&ВсеПомещения ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Помещение В (&Помещения)) 
						|   И (&ВсеСклады ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Владелец В (&Склады))");
						
	Запрос.УстановитьПараметр("лТовар", лТовар);
	Запрос.УстановитьПараметр("лХарактеристикаНоменклатуры", лХарактеристикаНоменклатуры);
	
	Запрос.УстановитьПараметр("ВсеСерии", ВсеСерии);
	Запрос.УстановитьПараметр("лСерия", лСерия);

	Если ЗначениеЗаполнено(ТекущийСклад) Тогда
		Запрос.УстановитьПараметр("Склады",ТекущийСклад);
		Запрос.УстановитьПараметр("ВсеСклады", Ложь);
	Иначе	
		СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
		Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущееПомещение) Тогда
		Запрос.УстановитьПараметр("Помещения",ТекущееПомещение);
		Запрос.УстановитьПараметр("ВсеПомещения",Ложь);
	Иначе	
		СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
		Запрос.УстановитьПараметр("Помещения",СписокПомещений);
		Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Хранение", Перечисления.ТипыСкладскихЯчеек.Хранение);
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		ОбъектЯчейки = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMCell"));
		
		Модуль_ШтрихкодированиеПечатныхФорм = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ШтрихкодированиеПечатныхФорм");
		ОбъектЯчейки.DMBarcode = ?(УзелПО.ВыгружатьВКодЯчейки = 1, Строка(Рез.Ссылка.Код), Строка(Модуль_ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(Рез.Ссылка)));
		ОбъектЯчейки.DMCellName = ?(УзелПО.ВыгружатьВНаименованиеЯчейки  =0, ЧистаяСтрока(Рез.Ссылка.Наименование), Рез.Ссылка.Код);

		ОбъектЯчейки.DMLimitQnt = ПолучитьОстаткиПоЯчейке(УзелПО, ТекущийСклад, лТовар, лХарактеристикаНоменклатуры, Рез.Ссылка);
		ОбъектЯчейки.DMTaskQnt = ОбъектЯчейки.DMLimitQnt;
		
		ОбъектСписка.DMCell.Добавить(ОбъектЯчейки);
	КонецЦикла;	
	
	Возврат ОбъектСписка;

КонецФункции
Функция GetArtCellsInsert(SN, UserName, DocID, ArtID, Params)
			
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMCellList"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	
	Если ArtID = "" Тогда 
		Возврат ОбъектСписка;
	КонецЕсли;
			
	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocID, 5)));
		ТекущийСклад = СсылкаНаДок.Склад;
		ТекущееПомещение = СсылкаНаДок.Помещение;
	Исключение	
		ВызватьИсключениеВС("GetArtCellsSelect. Не нашли документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок,"ТСД,ДатаНачалаСбора,ДатаЗавершенияСбора,Шаблон,ИсходныйДокумент,Склад,Помещение");
	ДокТСД = ЗначенияРеквизитовСсылкаНаДок.ТСД;
	ДокДатаНачалаСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаНачалаСбора;
	ДокДатаЗавершенияСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаЗавершенияСбора;
	Шаблон = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	ИсходныйДокумент = ЗначенияРеквизитовСсылкаНаДок.ИсходныйДокумент;
	ТекущийСклад  = ЗначенияРеквизитовСсылкаНаДок.Склад;
	ТекущееПомещение = ЗначенияРеквизитовСсылкаНаДок.Помещение;

	
	Если Шаблон = Неопределено Тогда
		ВызватьИсключениеВС("GetArtCellsSelect. Не нашли запись документа. ");
		Возврат ОбъектСписка;
	КонецЕсли;

	Если Лев(ArtID, 3) = "8U-" Тогда
		лТовар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4, 36)));
		ИДХК = Сред(ArtID, 40, 36);
		Если ИДХК <> "00000000-0000-0000-0000-000000000000" Тогда
			лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
		Иначе
			лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	Иначе   
		Возврат ОбъектСписка;
	КонецЕсли;
	
	
	Если Шаблон.ИспользованиеСерийниковПриемка>0 Тогда
		
		//Params={"snValues":"["sn1value", "sn2value"]"}
		//Params={"snValues":"00001989"}
		
		СтруктураParams = Новый Структура;
		СтруктураParams.Вставить("snValues","");	
		ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураParams);
		snValues = СтруктураParams.snValues;
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ДокументТСД", СсылкаНаДок);
		СтруктураСтроки.Вставить("ИмяТаблицы", "Insert");	
		СтруктураСтроки.Вставить("СерийныйНомер",snValues);
		СтруктураСтроки.Вставить("Номенклатура", лТовар);
		СтруктураСтроки.Вставить("КМСсылка", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
		СтруктураСтроки.Вставить("KM_DecodedMrc", "");
		СтруктураСтроки.Вставить("СерияСсылка", Справочники.СерииНоменклатуры.ПустаяСсылка());
		
		Попытка ОпределитьСериюВСтрокеДокумента(Шаблон,СтруктураСтроки,Ложь, УзелПО); Исключение КонецПопытки;
		
		лСерия = СтруктураСтроки.СерияСсылка;
		ВсеСерии = Ложь;
	Иначе	
		лСерия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		ВсеСерии = Истина;
	КонецЕсли;
	
	

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ТоварыВЯчейкахОстатки.Ячейка.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	РегистрНакопления.ТоварыВЯчейках.Остатки КАК ТоварыВЯчейкахОстатки
	                    |ГДЕ
	                    |	ТоварыВЯчейкахОстатки.Номенклатура = &лТовар
						|	И ТоварыВЯчейкахОстатки.Характеристика = &лХарактеристикаНоменклатуры
						|	И (&ВсеСерии ИЛИ ТоварыВЯчейкахОстатки.Серия = &лСерия)
	                    |	И ТоварыВЯчейкахОстатки.Ячейка.ТипСкладскойЯчейки = &Хранение
						|   И (&ВсеПомещения ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Помещение В (&Помещения)) 
						|   И (&ВсеСклады ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Владелец В (&Склады))");
						
	Запрос.УстановитьПараметр("лТовар", лТовар);
	Запрос.УстановитьПараметр("лХарактеристикаНоменклатуры", лХарактеристикаНоменклатуры);
	
	Запрос.УстановитьПараметр("ВсеСерии", ВсеСерии);
	Запрос.УстановитьПараметр("лСерия", лСерия);

	Если ЗначениеЗаполнено(ТекущийСклад) Тогда
		Запрос.УстановитьПараметр("Склады",ТекущийСклад);
		Запрос.УстановитьПараметр("ВсеСклады", Ложь);
	Иначе	
		СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
		Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущееПомещение) Тогда
		Запрос.УстановитьПараметр("Помещения",ТекущееПомещение);
		Запрос.УстановитьПараметр("ВсеПомещения",Ложь);
	Иначе	
		СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
		Запрос.УстановитьПараметр("Помещения",СписокПомещений);
		Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Хранение", Перечисления.ТипыСкладскихЯчеек.Хранение);
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		ОбъектЯчейки = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMCell"));
		
		Модуль_ШтрихкодированиеПечатныхФорм = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ШтрихкодированиеПечатныхФорм");
		ОбъектЯчейки.DMBarcode = ?(УзелПО.ВыгружатьВКодЯчейки = 1, Строка(Рез.Ссылка.Код), Строка(Модуль_ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(Рез.Ссылка)));
		ОбъектЯчейки.DMCellName = ?(УзелПО.ВыгружатьВНаименованиеЯчейки  =0, ЧистаяСтрока(Рез.Ссылка.Наименование), Рез.Ссылка.Код);

		ОбъектЯчейки.DMLimitQnt = ПолучитьОстаткиПоЯчейке(УзелПО, ТекущийСклад, лТовар, лХарактеристикаНоменклатуры, Рез.Ссылка);
		ОбъектЯчейки.DMTaskQnt = ОбъектЯчейки.DMLimitQnt;
		
		ОбъектСписка.DMCell.Добавить(ОбъектЯчейки);
	КонецЦикла;	
	
	Возврат ОбъектСписка;

КонецФункции
Функция GetArtEgaisDateBottling(SN, UserName, DocOutID, ArtID, Barcode, PDFBarcode)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDateList"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	ОбъектСписка.DMDate.Добавить(ТекущаяДата());
	
	Возврат ОбъектСписка;		
	
КонецФункции
Функция GetArtQtyByScales(SN, UserName, DocOutID, ArtID, Cell, ArtSN, ScalesBarcode)
	
	Возврат 1.55;	
	
КонецФункции
Функция GetDocSteps(SN, UserName)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьДополнительныеФормы") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО,"ОчиститьДополнительныеФормы", Ложь);	 
	КонецЕсли;
	
	Попытка ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.РегистрыСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов); Исключение КонецПопытки;
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocStepList"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Порядок КАК DMSortNumber,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон.Код КАК DMTemplateId,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма.Ссылка КАК ДополнительнаяФорма,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ПроверятьЗаполнение КАК DMCheckFill,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки КАК DMIsDocArg
		|ИЗ
		|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
		|ГДЕ
		|	НЕ ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон.Ссылка ЕСТЬ NULL
		|	И НЕ ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектСвязьДополнительнойФормыИШаблона = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocStep"));
		ЗаполнитьЗначенияСвойств(ОбъектСвязьДополнительнойФормыИШаблона, Выборка);
		ОбъектСвязьДополнительнойФормыИШаблона.DMStepId = Строка(Выборка.ДополнительнаяФорма.УникальныйИдентификатор());
		ОбъектСписка.DMDocStep.Добавить(ОбъектСвязьДополнительнойФормыИШаблона);
	КонецЦикла;
	
	Возврат ОбъектСписка;
	
КонецФункции
Функция GetSteps(SN, UserName)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьДополнительныеФормы") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьДополнительныеФормы", Ложь);	 
	КонецЕсли;
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMStepList"));
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатаМобайл_ДополнительныеФормы.Ссылка,
		|	ДатаМобайл_ДополнительныеФормы.Наименование,
		|	ДатаМобайл_ДополнительныеФормы.ТипДанных,
		|	ДатаМобайл_ДополнительныеФормы.ИДСправочника
		|ИЗ
		|	Справочник.ДатаМобайл_ДополнительныеФормы КАК ДатаМобайл_ДополнительныеФормы
		|ГДЕ
		|	ДатаМобайл_ДополнительныеФормы.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектДополнительнаяФорма = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMStep"));
		ОбъектДополнительнаяФорма.DMStepId = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		ОбъектДополнительнаяФорма.DMStepName = ЧистаяСтрока(Выборка.Наименование);
		Если Выборка.ТипДанных = "Текст" Тогда
			ТекущийТип = 1;
		ИначеЕсли  Выборка.ТипДанных = "Число" Тогда
			ТекущийТип = 2;
		ИначеЕсли  Выборка.ТипДанных = "Дата" Тогда
			ТекущийТип = 3;
		Иначе
			ТекущийТип = Выборка.ТипДанных;
		КонецЕсли;
		ОбъектДополнительнаяФорма.DMDataType = ЧистаяСтрока(ТекущийТип);
		ОбъектДополнительнаяФорма.DMParentId = ЧистаяСтрока(Выборка.ИДСправочника);
		ОбъектСписка.DMStep.Добавить(ОбъектДополнительнаяФорма);
	КонецЦикла;
	
	Возврат ОбъектСписка;
	
КонецФункции
Функция GetUserBooks(SN, UserName, DMStepId)
	
	//DMStepId = "";
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьДополнительныеФормы") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО,"ОчиститьДополнительныеФормы", Ложь);	 
	КонецЕсли;
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMUserBooksList"));
	
	ЗапросСправочника = Новый Запрос;
	ЗапросСправочника.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатаМобайл_ДополнительныеФормы.Ссылка КАК ДопФорма,
		|	ДатаМобайл_ДополнительныеФормы.ТипДанных,
		|	ДатаМобайл_ДополнительныеФормы.ИДСправочника
		|ИЗ
		|	Справочник.ДатаМобайл_ДополнительныеФормы КАК ДатаМобайл_ДополнительныеФормы
		|ГДЕ
		|	ДатаМобайл_ДополнительныеФормы.ПометкаУдаления = ЛОЖЬ";
	
	Если НЕ DMStepId = Неопределено И ЗначениеЗаполнено(СокрЛП(DMStepId)) Тогда
		ЗапросСправочника.Текст = ЗапросСправочника.Текст +  "
		|	И ДатаМобайл_ДополнительныеФормы.ИДСправочника = &ИДСпр";
		
		ЗапросСправочника.УстановитьПараметр("ИДСпр", СокрЛП(DMStepId)); 
	КонецЕсли;
	
	РезультатЗапросаСправочника = ЗапросСправочника.Выполнить();
	
	ВыборкаСправочника = РезультатЗапросаСправочника.Выбрать();
	
	Пока ВыборкаСправочника.Следующий() Цикл
		Если НЕ (ВыборкаСправочника.ТипДанных = "Текст" ИЛИ ВыборкаСправочника.ТипДанных = "Число" ИЛИ ВыборкаСправочника.ТипДанных = "Дата") Тогда
			ТекущаяДопФорма= ВыборкаСправочника.ДопФорма;
			Попытка
				Если НЕ Метаданные.Справочники.Найти(ВыборкаСправочника.ТипДанных) = Неопределено Тогда
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	Справочник.Ссылка,
					|	Справочник.Наименование
					|ИЗ
					|	Справочник." + СокрЛП(ВыборкаСправочника.ТипДанных) + " КАК Справочник
					|ГДЕ
					|	Справочник.ПометкаУдаления = ЛОЖЬ
					|	И 1=1";
					
					Если ТекущаяДопФорма.Ограничения.Количество() Тогда
						Запрос.Текст = СтрЗаменить(Запрос.Текст,"1=1","Справочник.Ссылка В (&МассивЭлементовДопФормы)");
						МассивЭлементовДопФормы = ТекущаяДопФорма.Ограничения.ВыгрузитьКолонку("Значения");
						Запрос.УстановитьПараметр("МассивЭлементовДопФормы",МассивЭлементовДопФормы);
					КонецЕсли; 	
						
					РезультатЗапроса = Запрос.Выполнить();
					
					Выборка = РезультатЗапроса.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						ОбъектЭлементСправочника = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMUserBookElement"));
						ОбъектЭлементСправочника.DMUserBookElementId = Строка(Выборка.Ссылка.УникальныйИдентификатор());
						ОбъектЭлементСправочника.DMStepId = Строка(ВыборкаСправочника.ИДСправочника);
						ОбъектЭлементСправочника.DMUserBookElementName = ЧистаяСтрока(Выборка.Наименование);
						ОбъектСписка.DMUserBookElement.Добавить(ОбъектЭлементСправочника);
					КонецЦикла;
					
				ИначеЕсли НЕ Метаданные.ПланыВидовХарактеристик.Найти(ВыборкаСправочника.ТипДанных) = Неопределено Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ПланВидовХарактеристик.Ссылка,
					|	ПланВидовХарактеристик.Наименование
					|ИЗ
					|	ПланВидовХарактеристик." + СокрЛП(ВыборкаСправочника.ТипДанных) + " КАК ПланВидовХарактеристик
					|ГДЕ
					|	ПланВидовХарактеристик.ПометкаУдаления = ЛОЖЬ
					|	И 1=1";
					
					Если ТекущаяДопФорма.Ограничения.Количество() Тогда
						Запрос.Текст = СтрЗаменить(Запрос.Текст,"1=1","ПланВидовХарактеристик.Ссылка В (&МассивЭлементовДопФормы)");
						МассивЭлементовДопФормы = ТекущаяДопФорма.Ограничения.ВыгрузитьКолонку("Значения");
						Запрос.УстановитьПараметр("МассивЭлементовДопФормы",МассивЭлементовДопФормы);
					КонецЕсли; 

					РезультатЗапроса = Запрос.Выполнить();
					
					Выборка = РезультатЗапроса.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						ОбъектЭлементСправочника = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMUserBookElement"));
						ОбъектЭлементСправочника.DMUserBookElementId = Строка(Выборка.Ссылка.УникальныйИдентификатор());
						ОбъектЭлементСправочника.DMStepId = Строка(ВыборкаСправочника.ИДСправочника);
						ОбъектЭлементСправочника.DMUserBookElementName = ЧистаяСтрока(Выборка.Наименование);
						ОбъектСписка.DMUserBookElement.Добавить(ОбъектЭлементСправочника);
					КонецЦикла;
	
				ИначеЕсли НЕ Метаданные.Перечисления.Найти(ВыборкаСправочника.ТипДанных) = Неопределено Тогда
					
					Если ТекущаяДопФорма.Ограничения.Количество() Тогда
						МассивЭлементовДопФормы = ТекущаяДопФорма.Ограничения.ВыгрузитьКолонку("Значения");
					Иначе
						МассивЭлементовДопФормы = Неопределено;
					КонецЕсли; 
					
					Для Сч = 0 По Перечисления[ВыборкаСправочника.ТипДанных].Количество() - 1  Цикл
						Если МассивЭлементовДопФормы <> Неопределено Тогда
							Если МассивЭлементовДопФормы.Найти(Перечисления[ВыборкаСправочника.ТипДанных][Сч]) = Неопределено Тогда
								Продолжить;	
							КонецЕсли; 	
						КонецЕсли; 
						
						ОбъектЭлементСправочника = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMUserBookElement"));
						ОбъектЭлементСправочника.DMUserBookElementId = Строка("" + ВыборкаСправочника.ТипДанных + "." + Сч);
						ОбъектЭлементСправочника.DMStepId = Строка(ВыборкаСправочника.ИДСправочника);
						ОбъектЭлементСправочника.DMUserBookElementName = ЧистаяСтрока(Строка(Перечисления[ВыборкаСправочника.ТипДанных][Сч]));
						ОбъектСписка.DMUserBookElement.Добавить(ОбъектЭлементСправочника);
					КонецЦикла;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектСписка;
	
КонецФункции
Функция GetBarcodeTemplates(Params)
	
	//Перем device_id, UserName;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("deviceId", "");
	СтруктураПараметров.Вставить("UserName", "");
	ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураПараметров);
	
	SN = СтруктураПараметров.deviceId;
	UserName =  СтруктураПараметров.UserName;
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьШаблоныШтрихкодов") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьШаблоныШтрихкодов", Ложь);	 
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |		ДатаМобайл_СписокТСДШаблоныШтрихкодов.Тип КАК Тип,
	                    |		ДатаМобайл_СписокТСДШаблоныШтрихкодов.ОбщаяДлина КАК ОбщаяДлина,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.ТипШтрихкода КАК ТипШтрихкода,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.Префикс КАК Префикс,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.НачальныйСимволШтрихкода КАК НачальныйСимволШтрихкода,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.КонечныйСимволШтрихкода КАК КонечныйСимволШтрихкода,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.НачальныйСимволКилограмм КАК НачальныйСимволКилограмм,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.КонечныйСимволКилограмм КАК КонечныйСимволКилограмм,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.НачальныйСимволГрамм КАК НачальныйСимволГрамм,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.КонечныйСимволГрамм КАК КонечныйСимволГрамм,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.НачальныйСимволСерийныйНомер КАК НачальныйСимволСерийныйНомер,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.КонечныйСимволСерийныйНомер КАК КонечныйСимволСерийныйНомер,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.НачальныйСимволКоличество КАК НачальныйСимволКоличество,
						|		ДатаМобайл_СписокТСДШаблоныШтрихкодов.КонечныйСимволКоличество КАК КонечныйСимволКоличество
	                    |	ИЗ
	                    |		ПланОбмена.ДатаМобайл_СписокТСД.ШаблоныШтрихкодов КАК ДатаМобайл_СписокТСДШаблоныШтрихкодов
	                    |	ГДЕ
	                    |		ДатаМобайл_СписокТСДШаблоныШтрихкодов.Ссылка = &Узел");
	
	Запрос.УстановитьПараметр("Узел", УзелПО.Ссылка);
	Рез = Запрос.Выполнить().Выбрать();
	
	JSONResult = "";	
	МассивСтрок = Новый Массив;
	
	Пока Рез.Следующий() Цикл
		
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("type_id",         Рез.Тип);
		СтруктураЗапроса.Вставить("length",          Рез.ОбщаяДлина);
		СтруктураЗапроса.Вставить("barcode_type_id", Рез.ТипШтрихкода);
		СтруктураЗапроса.Вставить("prefix",          Рез.Префикс);
		СтруктураЗапроса.Вставить("bc_start",        Рез.НачальныйСимволШтрихкода);
		СтруктураЗапроса.Вставить("bc_end",          Рез.КонечныйСимволШтрихкода);
		СтруктураЗапроса.Вставить("kg_start",        Рез.НачальныйСимволКилограмм);
		СтруктураЗапроса.Вставить("kg_end",          Рез.КонечныйСимволКилограмм);
		СтруктураЗапроса.Вставить("gm_start",        Рез.НачальныйСимволГрамм);
		СтруктураЗапроса.Вставить("gm_end",          Рез.КонечныйСимволГрамм);
		СтруктураЗапроса.Вставить("sn_start",        Рез.НачальныйСимволСерийныйНомер);
		СтруктураЗапроса.Вставить("sn_end",          Рез.КонечныйСимволСерийныйНомер);	
		СтруктураЗапроса.Вставить("qty_start",       Рез.НачальныйСимволКоличество);
		СтруктураЗапроса.Вставить("qty_end",         Рез.КонечныйСимволКоличество);	

		МассивСтрок.Добавить(СтруктураЗапроса);
	КонецЦикла;	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, МассивСтрок);
	JSONResult = ЗаписьJSON.Закрыть();

	Возврат JSONResult;	
	
КонецФункции
Функция GetCellContent(SN, UserName, CellBC)

	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMCellArtList"));

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;	
		
	ТипЦен = УзелПО.ТипЦен;
	ВключатьАртикул = УзелПО.ДобавлятьАртикулВНаименование;
		
	ТекущаяЯчейка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(CellBC);
	
	Если ТекущаяЯчейка.Наименование = "" Тогда	
		ВызватьИсключениеВС("GetCellContent. Ячейка по штрихкоду " + CellBC + " не найдена в базе. ");
		Возврат ОбъектСписка;
	КонецЕсли;

	 Запрос = Новый Запрос;
	 
	 Запрос.Текст = "ВЫБРАТЬ
					 |	ТоварыВЯчейкахОстатки.Номенклатура,
					 |	ТоварыВЯчейкахОстатки.Характеристика,
					 |	ТоварыВЯчейкахОстатки.Упаковка,
					 |	ТоварыВЯчейкахОстатки.Серия,
					 |	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток)- СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК Количество
					 |ПОМЕСТИТЬ ДоступныеТовары
					 |ИЗ
					 |	РегистрНакопления.ТоварыВЯчейках.Остатки КАК ТоварыВЯчейкахОстатки
					 |ГДЕ
					 |	ТоварыВЯчейкахОстатки.Ячейка = &Ячейка
					 |СГРУППИРОВАТЬ ПО
					 |	ТоварыВЯчейкахОстатки.Номенклатура,
					 |	ТоварыВЯчейкахОстатки.Характеристика,
					 |	ТоварыВЯчейкахОстатки.Упаковка,
					 |	ТоварыВЯчейкахОстатки.Серия
					 |;
					 //|
					 //|////////////////////////////////////////////////////////////////////////////////
					 //|ВЫБРАТЬ
					 //|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
					 //|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
					 //|	ДоступныеТовары.Номенклатура КАК Номенклатура,
					 //|	ДоступныеТовары.Характеристика КАК Характеристика,
					 //|	ДоступныеТовары.Упаковка КАК Упаковка
					 //|ПОМЕСТИТЬ ТоварыСОстатками1С
					 //|ИЗ
					 //|	ДоступныеТовары КАК ДоступныеТовары
					 //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
					 //|				,
					 //|				(&ВсеСклады
					 //|					ИЛИ Склад В (&Склады))
					 //|				И (&ВсеПомещения
					 //|					ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
					 //|		ПО ДоступныеТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
					 //|			И ДоступныеТовары.Характеристика = СвободныеОстаткиОстатки.Характеристика
					 //|
					 //|СГРУППИРОВАТЬ ПО
					 //|	ДоступныеТовары.Характеристика,
					 //|	ДоступныеТовары.Номенклатура,
					 //|	ДоступныеТовары.Упаковка
					 //|;
					 //|
					 |
					 |////////////////////////////////////////////////////////////////////////////////
					 |ВЫБРАТЬ
					 |	ДоступныеТовары.Номенклатура КАК Номенклатура,
					 |	ДоступныеТовары.Характеристика КАК Характеристика,
					 |	ДоступныеТовары.Упаковка КАК Упаковка,
					 |	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЧИСЛО(19, 2))) КАК Цена
					 |ПОМЕСТИТЬ ТоварыСЦенами
					 |ИЗ
					 |	ДоступныеТовары КАК ДоступныеТовары
					 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
					 |		ПО ДоступныеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
					 |			И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
					 |
					 |СГРУППИРОВАТЬ ПО
					 |	ДоступныеТовары.Номенклатура,
					 |	ДоступныеТовары.Характеристика,
					 |	ДоступныеТовары.Упаковка
					 |;
					 |
					 //|////////////////////////////////////////////////////////////////////////////////
					 //|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					 //|	Ячейки.Номенклатура КАК Номенклатура,
					 //|	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
					 //|ПОМЕСТИТЬ СписокЯчеек
					 //|ИЗ
					 //|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
					 //|
					 //|СГРУППИРОВАТЬ ПО
					 //|	Ячейки.Номенклатура
					 //|;
					 |
					 |////////////////////////////////////////////////////////////////////////////////
					 |ВЫБРАТЬ
					 |	ДоступныеТовары.Номенклатура КАК Номенклатура,
					 |	ДоступныеТовары.Характеристика КАК Характеристика,
					 |    ДоступныеТовары.Серия КАК Серия,
					 |	ДоступныеТовары.Упаковка КАК Упаковка,
					 |    ДоступныеТовары.Количество КАК Количество,
					 //|	0 КАК ВЗадании,
					 //|	ТоварыСОстатками1С.ВНаличии КАК ВНаличии,
					 //|	ТоварыСОстатками1С.ВРезерве КАК ВРезерве,
					 |	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена,
					 //|	ЕСТЬNULL(СписокЯчеек.АдресХранения, """") КАК АдресХранения,
					 |	ЕСТЬNULL(ДоступныеТовары.Упаковка.Наименование, ДоступныеТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
					 |	ЕСТЬNULL(ДоступныеТовары.Упаковка.Числитель, 1) КАК Коэффициент,
					 |	ВЫБОР
					 |		КОГДА &ВключатьАртикул
					 |				И ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
					 |			ТОГДА ВЫБОР
					 |					КОГДА ДоступныеТовары.Номенклатура.Артикул = """"
					 |						ТОГДА """"
					 |					ИНАЧЕ ДоступныеТовары.Номенклатура.Артикул + "" ""
					 |				КОНЕЦ
					 |		ИНАЧЕ """"
					 |	КОНЕЦ + ДоступныеТовары.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ДоступныеТовары.Характеристика.Наименование, """") КАК НаименованиеТовара,
					 |	ЛОЖЬ КАК ЭтоНовыйТовар
					 |ИЗ
					 |	ДоступныеТовары КАК ДоступныеТовары
					 //|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
					 //|		ПО ДоступныеТовары.Номенклатура = ТоварыСОстатками1С.Номенклатура
					 //|			И ДоступныеТовары.Характеристика = ТоварыСОстатками1С.Характеристика
					 //|			И ДоступныеТовары.Упаковка = ТоварыСОстатками1С.Упаковка
					 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
					 |		ПО ДоступныеТовары.Номенклатура = ТоварыСЦенами.Номенклатура
					 |			И ДоступныеТовары.Характеристика = ТоварыСЦенами.Характеристика
					 |			И ДоступныеТовары.Упаковка = ТоварыСЦенами.Упаковка
					 //|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
					 //|		ПО ДоступныеТовары.Номенклатура = СписокЯчеек.Номенклатура
					 |";

	 
	Запрос.УстановитьПараметр("Ячейка", ТекущаяЯчейка);
    Запрос.УстановитьПараметр("ТипЦен", ТипЦен);         	
	Запрос.УстановитьПараметр("ВсеУпаковки", Истина);
	
	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
	Запрос.УстановитьПараметр("Склады", СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
	
	СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения", СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", СписокПомещений.Количество() = 0);
 
	Запрос.УстановитьПараметр("ВключатьАртикул", ВключатьАртикул);
    Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
     Рез = Запрос.Выполнить().Выгрузить(); 
      
     Для каждого СтрокаДока ИЗ Рез Цикл 
		 
		 СтрокаДока.Коэффициент = ?(СтрокаДока.Коэффициент = 0, 1, СтрокаДока.Коэффициент);
		 Итог = СтрокаДока.Количество*СтрокаДока.Коэффициент;

		 ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMCellArt"));

		//Товар
        ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArt")); 
		ОбъектТовара.DMArt.DMArtName = ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));
		ОбъектТовара.DMArt.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
		ОбъектТовара.DMArt.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Попытка ОбъектТовара.DMArt.DMMeasureType = ?(СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки; 
		ОбъектТовара.DMArt.DMArtPrice = СтрокаДока.Цена;
		
		Атрибуты = ПолучитьАтрибуты(УзелПО);			
		Для сч = 1 По 10 Цикл
			Попытка 
				ИмяАтрибута =  Атрибуты["ИмяАтрибута" + сч];
				Если СтрокаДока.ЭтоНовыйТовар Тогда
					ОбъектТовара.DMArt["DMArtAttr" + сч] = "";
				ИначеЕсли ИмяАтрибута = "!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
					//ОбъектТовара["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.АдресХранения);
					ОбъектТовара.DMArt["DMArtAttr" + сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО, СтрокаДока.Номенклатура,ИмяАтрибута);
				ИначеЕсли ИмяАтрибута ="!!! Характеристики !!!" Тогда
					ОбъектТовара.DMArt["DMArtAttr" + сч] = ЧистаяСтрока(СтрокаДока.Характеристика.Наименование);
				ИначеЕсли ЛЕВ(ИмяАтрибута, 3) = "ДР_" Тогда 
					Попытка ОбъектТовара.DMArt["DMArtAttr" + сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.Номенклатура, ИмяАтрибута); Исключение КонецПопытки;		
				ИначеЕсли ИмяАтрибута <> "" Тогда
					ОбъектТовара.DMArt["DMArtAttr" + сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);							
				Иначе 
					ОбъектТовара.DMArt["DMArtAttr" + сч] = "";
				КонецЕсли;
			Исключение
				ОбъектТовара["DMArtAttr" + сч] = "";
			КонецПопытки;
			
		КонецЦикла;

		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектТовара.DMArt.DMRest = 0;
		Иначе
			ОбъектТовара.DMArt.DMRest=Итог;
		КонецЕсли;
		
		Попытка 
			DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры, Справочники.Склады.ПустаяСсылка());
		Исключение
			DMUseSN = Ложь;
		КонецПопытки;	
		ОбъектТовара.DMArt.DMUseSN = DMUseSN;
		ОбъектТовара.DMArt.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.Номенклатура,DMUseSN, , УзелПО);
		
		Попытка
			Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
				ОбъектТовара.DMArt.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура);				
			КонецЕсли;
		Исключение 
		КонецПопытки;	  
		  
		// Штрихкод
		
		ТекущийШтрихкод = ПолучитьШтрихкодУпаковки(СтрокаДока.Номенклатура, СтрокаДока.Характеристика, СтрокаДока.Упаковка); 
		Если ЗначениеЗаполнено(ТекущийШтрихкод) Тогда
			ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMBarcode"));
			ОбъектТовара.DMBarcode.DMBarcode = ЧистаяСтрока(ТекущийШтрихкод);
			ОбъектТовара.DMBarcode.DMMeasureName = ЧистаяСтрока(СтрокаДока.НаименованиеУпаковки);
			ОбъектТовара.DMBarcode.DMMeasureK = СтрокаДока.Коэффициент;
			ОбъектТовара.DMBarcode.DMUseSN = 2;
		КонецЕсли;
		
		// Количество в базовых
		ОбъектТовара.DMQty = СтрокаДока.Количество*СтрокаДока.Коэффициент; 
		
		//Серия 
		Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда			  
			ОбъектТовара.DMSN = "";
		Иначе
			ОбъектТовара.DMSN = "";
		КонецЕсли;
		
		ОбъектТовара.DMCell = CellBC;
		
		ОбъектСписка.DMCellArt.Добавить(ОбъектТовара); 
		
	КонецЦикла;
	
	Возврат  ОбъектСписка;
	
КонецФункции
Функция ПолучитьШтрихкодУпаковки(лНоменклатура,лХарактеристика,лУпаковка)
	
	ТекущийШтрихкод = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	ШтрихкодыНоменклатуры.Штрихкод
	                    |ИЗ
	                    |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	                    |ГДЕ
	                    |	ШтрихкодыНоменклатуры.Номенклатура = &лНоменклатура
						|	И ШтрихкодыНоменклатуры.Характеристика = &лХарактеристика
	                 	|	И ШтрихкодыНоменклатуры.Упаковка = &лУпаковка
						|");
	
	Запрос.УстановитьПараметр("лНоменклатура", лНоменклатура);
	Запрос.УстановитьПараметр("лХарактеристика", лХарактеристика);
	Запрос.УстановитьПараметр("лУпаковка", лУпаковка);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Если ЗначениеЗаполнено(Рез.Штрихкод) Тогда
			ТекущийШтрихкод = Рез.Штрихкод;
		КонецЕсли;	
	КонецЕсли;				
	
	Возврат ТекущийШтрихкод;

КонецФункции
Функция GetSelectedQtyGroupDocRows(SN, UserName, DocOutID, LastRequestDate)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocRows"));
	ДатаПоследнегоЗапроса = ?(ЗначениеЗаполнено(LastRequestDate), LastRequestDate, Дата(1, 1, 1));
	ТекущаяДатаЗапроса = ТекущаяДата();
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
	Исключение	
		ВызватьИсключениеВС("GetNewGroupDocRows. Не найден документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;	
	
	Если СсылкаНаДок.Шаблон.РаспределениеТоваров = 2 Тогда
		Если СсылкаНаДок.СписокДокументов.ВыгрузитьКолонку("ДокументТСД").Количество() = 0 И НЕ ЗначениеЗаполнено(СсылкаНаДок.РодительскийДокумент) Тогда
			ВызватьИсключениеВС("GetSelectedQtyGroupDocRows. Настройка ""Групповой документ"" не поддерживает работу без задания! ");			
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.Штрихкод КАК DMBarcode,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.СерийныйНомер КАК DMSN,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.Ячейка КАК DMCell,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.ИмяТаблицы КАК DMTable,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.НазваниеТовара КАК DMArtName,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.КодТовара КАК DMArtID,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.Короб КАК DMBoxPackID,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.УпаковочныйЛист КАК DMPackID, 
	               |	СУММА(ДатаМобайл_СтрокиГрупповыхДокументов.Количество * 
	               |		ВЫБОР
	               |			КОГДА ЕСТЬNULL(ДатаМобайл_СтрокиГрупповыхДокументов.КоэффициентЕдиницы, 1) = 0
	               |				ТОГДА 1
	               |			ИНАЧЕ ЕСТЬNULL(ДатаМобайл_СтрокиГрупповыхДокументов.КоэффициентЕдиницы, 1)
	               |		КОНЕЦ) КАК DMQuant
	               |ИЗ
	               |	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_СтрокиГрупповыхДокументов
	               |ГДЕ
	               |	НЕ ДатаМобайл_СтрокиГрупповыхДокументов.ТСД = &ТСД
	               |	И ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД = &ИндетификаторДокумента
				   |	И ДатаМобайл_СтрокиГрупповыхДокументов.ДатаЗаписи >= &ДатаНач
	               |	И ДатаМобайл_СтрокиГрупповыхДокументов.ДатаЗаписи < &ДатаКон
				   |	И НЕ ДатаМобайл_СтрокиГрупповыхДокументов.ДатаЗаписи = ДАТАВРЕМЯ(1,1,1,0,0,0)
	               |
	               |СГРУППИРОВАТЬ ПО
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.Штрихкод,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.СерийныйНомер,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.Ячейка,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.КодТовара,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.ИмяТаблицы,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.НазваниеТовара,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.Короб,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.УпаковочныйЛист";

	Запрос.УстановитьПараметр("ДатаНач", ДатаПоследнегоЗапроса);
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДатаЗапроса);
	Запрос.УстановитьПараметр("Тсд", УзелПО);
	
	Если СсылкаНаДок.Шаблон.РаспределениеТоваров = 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД = &ИндетификаторДокумента","ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД В(&ДокументыТСД)");
		Запрос.УстановитьПараметр("ДокументыТСД", СсылкаНаДок.СписокДокументов.ВыгрузитьКолонку("ДокументТСД"));
	Иначе	
		Запрос.УстановитьПараметр("ИндетификаторДокумента", СсылкаНаДок);
	КонецЕсли;
	
	Рез = Запрос.Выполнить().Выбрать();	
	Пока Рез.Следующий() Цикл
		ОбъектСтроки = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocRec"));
		ЗаполнитьЗначенияСвойств(ОбъектСтроки, Рез);
		ОбъектСтроки.DMDate = ТекущаяДатаЗапроса;
		
		Если СсылкаНаДок.Шаблон.РаспределениеТоваров = 2 Тогда
			//{"childDocOutId":"123"}
			childDocOutId = "d82-"+Строка(Рез.ДокументТСД.УникальныйИдентификатор());
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
			ЗаписьJSON.ПроверятьСтруктуру = Истина;
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
			
			Данные = Новый Структура;
			Данные.Вставить("childDocOutId", childDocOutId);
				
			ЗаписатьJSON(ЗаписьJSON, Данные);
			СтрокаJSON = ЗаписьJSON.Закрыть();
			
			ОбъектСтроки.Params = СтрокаJSON;		
		КонецЕсли;
		
		ОбъектСписка.DMDocRow.Добавить(ОбъектСтроки);
	КонецЦикла;
	
	Возврат ОбъектСписка;
	
КонецФункции
Функция GetArtMarks(SN, UserName)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMMarkList"));

	Если НЕ ДатаМобайл_ОбщийМодуль.ЕстьМаркировка() И НЕ ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() Тогда		
		Возврат ОбъектСписка;
	КонецЕсли;
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьКодыМаркировки") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО,"ОчиститьКодыМаркировки", Ложь);	 
	КонецЕсли;
	
	ЗапросМарок = Новый Запрос ("ВЫБРАТЬ
	                       |	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	                       |	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
						   |	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
						   |	ВЫБОР
						   |		КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 
						   |		ТОГДА
						   |			ВЫБОР
						   |				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Числитель,0) = 0
						   |				ТОГДА 1
						   |				ИНАЧЕ ШтрихкодыУпаковокТоваров.Упаковка.Числитель
						   |			КОНЕЦ
						   |		ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество 
						   |	КОНЕЦ КАК Коэффициент,
						   |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
						   |	ШтрихкодыУпаковокТоваров.Номенклатура.ПометкаУдаления КАК ПометкаУдаления
						   |ПОМЕСТИТЬ КодыМаркировки
	                       |ИЗ
	                       |	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
						   |ГДЕ
						   |	ШтрихкодыУпаковокТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
						   |	И ШтрихкодыУпаковокТоваров.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
						   |	И ШтрихкодыУпаковокТоваров.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
						   |	И (ШтрихкодыУпаковокТоваров.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) ИЛИ ШтрихкодыУпаковокТоваров.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка))
						   |	И НЕ ШтрихкодыУпаковокТоваров.ПометкаУдаления
						   |	И ШтрихкодыУпаковокТоваров.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.PDF417) 
						   |	И ((ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
						   |		И ШтрихкодыУпаковокТоваров.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.DataMatrix))
						   |			ИЛИ (ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
						   |				И ШтрихкодыУпаковокТоваров.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	                       |;
						   |
						   |ВЫБРАТЬ
	                       |	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	                       |	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
						   |	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
						   |	ВЫБОР
						   |		КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 
						   |		ТОГДА
						   |			ВЫБОР
						   |				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Числитель,0) = 0
						   |				ТОГДА 1
						   |				ИНАЧЕ ШтрихкодыУпаковокТоваров.Упаковка.Числитель
						   |			КОНЕЦ
						   |		ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество 
						   |	КОНЕЦ КАК Коэффициент,
						   |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
						   |	ШтрихкодыУпаковокТоваров.Номенклатура.ПометкаУдаления КАК ПометкаУдаления
						   |ПОМЕСТИТЬ ПачкиСигарет
	                       |ИЗ
	                       |	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
						   |ГДЕ
						   |	ШтрихкодыУпаковокТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
						   |	И ШтрихкодыУпаковокТоваров.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
						   |	И ШтрихкодыУпаковокТоваров.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
						   |	И (ШтрихкодыУпаковокТоваров.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) ИЛИ ШтрихкодыУпаковокТоваров.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка))						   						  						   
						   |	И НЕ ШтрихкодыУпаковокТоваров.ПометкаУдаления						   
						   |	И ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
						   |	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.DataMatrix)
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	КодыМаркировки.Номенклатура КАК Номенклатура,
						   |	КодыМаркировки.Характеристика КАК Характеристика,
						   |	КодыМаркировки.Коэффициент КАК Коэффициент,
	                       |	КодыМаркировки.ПометкаУдаления КАК ПометкаУдаления,
	                       |	КодыМаркировки.ЗначениеШтрихкода КАК Марка,
	                       |	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода, """") КАК Короб,
	                       |	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка.ЗначениеШтрихкода, """") КАК Палета
	                       |ИЗ
	                       |	КодыМаркировки КАК КодыМаркировки
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
	                       |		ПО (ДанныеУпаковкиУровень1.Штрихкод = КодыМаркировки.Ссылка)
	                       |			И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	                       |				ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
	                       |		ПО (ДанныеУпаковкиУровень2.Штрихкод = ДанныеУпаковкиУровень1.Ссылка)
	                       |			И (ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
						   |				ИЛИ ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
						   |
						   //пачки сигарет, которые не вошли в блоки
						   |ОБЪЕДИНИТЬ
						   |
						   |ВЫБРАТЬ
	                       |	ПачкиСигарет.Номенклатура КАК Номенклатура,
						   |	ПачкиСигарет.Характеристика КАК Характеристика,
						   |	ПачкиСигарет.Коэффициент КАК Коэффициент,
	                       |	ПачкиСигарет.ПометкаУдаления КАК ПометкаУдаления,
	                       |	ПачкиСигарет.ЗначениеШтрихкода КАК Марка,
	                       |	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода, """") КАК Короб,
	                       |	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка.ЗначениеШтрихкода, """") КАК Палета
	                       |ИЗ
	                       |	ПачкиСигарет КАК ПачкиСигарет
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
	                       |		ПО (ДанныеУпаковкиУровень1.Штрихкод = ПачкиСигарет.Ссылка)
	                       |			И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	                       |				ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
	                       |		ПО (ДанныеУпаковкиУровень2.Штрихкод = ДанныеУпаковкиУровень1.Ссылка)
	                       |			И (ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
						   |				ИЛИ ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
						   |ГДЕ
						   |	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ТипШтрихкода,"""") <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
						   |;
						   |////////////////////////////////////////////////////////////////////////////////
						   |УНИЧТОЖИТЬ КодыМаркировки
						   |;
						   |////////////////////////////////////////////////////////////////////////////////
						   |УНИЧТОЖИТЬ ПачкиСигарет");

	ВыборкаМарок = ЗапросМарок.Выполнить().Выбрать();
	
	Пока ВыборкаМарок.Следующий() Цикл
		
		ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMMark"));
		ОбъектТовара.ArtID = "8U-" + Строка(ВыборкаМарок.Номенклатура.УникальныйИдентификатор()) + Строка(ВыборкаМарок.Характеристика.УникальныйИдентификатор());// ID номенклатуры марки 		
		
		ТипПродукции = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(ВыборкаМарок.Номенклатура);
		ЧистаяМарка = ДатаМобайл_Маркировка.УбратьСкобкиТеговМарка(Строка(ВыборкаМарок.Марка), ТипПродукции);
		ОбъектТовара.Mark = ЧистаяМарка; // марка
		ОбъектТовара.Box =  ДатаМобайл_Маркировка.УбратьСкобкиТеговУпаковка(Строка(ВыборкаМарок.Короб));  // короб 
		ОбъектТовара.Pallet =  ДатаМобайл_Маркировка.УбратьСкобкиТеговУпаковка(Строка(ВыборкаМарок.Палета)); // палета
		ОбъектТовара.Coef =  ВыборкаМарок.Коэффициент;  // коэффициент
		 
		ОбъектСписка.DMMark.Добавить(ОбъектТовара);

	КонецЦикла;
	
	Возврат ОбъектСписка;

КонецФункции
Функция GetSNTypes(Params)
	
	//Переменные Params
	СтруктураParams = Новый Структура;
	СтруктураParams.Вставить("deviceId","");
	СтруктураParams.Вставить("UserName","");

	ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураParams);

	SN 		=  СтруктураParams.deviceId;
	UserName 		=  СтруктураParams.UserName;

	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО,"ОчиститьТипыСерий") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО,"ОчиститьТипыСерий", Ложь);	 
	КонецЕсли;

	// Реализовать выгрузку типов серийных номеров, при вызове функции, 
	// которая вернет которая возвращает JSON-массив, описывающий типы серийных номеров
	// [{id:"123", name:"123", "ai":"String", "dataType":Int, "mask":"String"},{....}]
	//	 id - идентификатор серийного номера, тип Строка
	//	 name - наименование серийного номера (Дата производства,Серийный номер И т.д.) для отображения на экране, тип Строка
	//	 ai - тэг GS (10, 11, 21 И тд)
	// 	 dataType - тип данных (0 - неизвестно, 1 - дата, 2 - строка)
	//	 mask - маска для типа данных дата (ddmmyyyy)
		
	JSONResult = "";
	
	// По умолчанию добавим три типа серийных номеров		
	МассивСтрок = Новый Массив;
	
	// 1. Серийный номер
	
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("id", "10");
		СтруктураЗапроса.Вставить("name", "Серийный номер");
		СтруктураЗапроса.Вставить("ai", "10"); // Для разбора GS1
		СтруктураЗапроса.Вставить("dataType", 2);
							
		МассивСтрок.Добавить(СтруктураЗапроса);
	
	// 2. Дата производства
	
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("id", "11");
		СтруктураЗапроса.Вставить("name", "Дата производства");
		СтруктураЗапроса.Вставить("ai", "11"); // Для разбора GS1
		СтруктураЗапроса.Вставить("dataType", 1);
		СтруктураЗапроса.Вставить("mask", "dd.mm.yy");
					
		МассивСтрок.Добавить(СтруктураЗапроса);

	// 3. Дата окончания срока годности
	
	    СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("id", "17");
		СтруктураЗапроса.Вставить("name", "Дата срока годности");
		СтруктураЗапроса.Вставить("ai", "17"); // Для разбора GS1
		СтруктураЗапроса.Вставить("dataType", 1);
		СтруктураЗапроса.Вставить("mask", "dd.mm.yy");
					
		МассивСтрок.Добавить(СтруктураЗапроса);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, МассивСтрок);
	JSONResult = ЗаписьJSON.Закрыть();

	Возврат JSONResult;	

КонецФункции
Функция GetSNList(Params)
	
	// Params={"deviceId":"123","username":"Администратор", "artId"="8a...", "docOutId"="asdf...", "cell"="barcode"}
	// Ответ: [["111","222"],["333","444"]]
	
	СтруктураParams = Новый Структура;
	СтруктураParams.Вставить("deviceId", "");
	СтруктураParams.Вставить("UserName", "");
	СтруктураParams.Вставить("artId", "");
	СтруктураParams.Вставить("docOutId", "");
	СтруктураParams.Вставить("cell", "");
	
	ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураParams);
	
	SN       = СтруктураParams.deviceId;
	UserName = СтруктураParams.UserName;
	DocOutID = СтруктураParams.docOutId;
	ArtID 	 = СтруктураParams.artId;
	Cell 	 = СтруктураParams.cell;

	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	
	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
	Исключение	
		ВызватьИсключениеВС("GetSNList. Не нашли документ. ");
		Возврат "";
	КонецПопытки;
	
	Шаблон = СсылкаНаДок.Шаблон;
	
	ТекущаяЯчейка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Cell,СсылкаНаДок);
	
	Если Лев(ArtID,3) = "8U-" Тогда
		лТовар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4, 36)));
		ИДХК = Сред(ArtID, 40, 36);
		Если ИДХК <> "00000000-0000-0000-0000-000000000000" Тогда
			лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
		Иначе
			лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
		КонецЕсли;
	Иначе   
		Возврат "";	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(лТовар) Тогда
		Возврат "";	
	КонецЕсли;
	
	Попытка 
		ТекущийСклад = СсылкаНаДок.Склад;
	Исключение
		ТекущийСклад = Неопределено;
	КонецПопытки;
	
	МассивСерий = ПолучитьМассивСерий(УзелПО,ТекущийСклад,лТовар,лХарактеристикаНоменклатуры,ТекущаяЯчейка,Шаблон);
	
	СтрокаJSON = "";
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.УстановитьСтроку(ПараметрыJSON);

	
	МассивЗначенийСерий = Новый Массив;
	Для каждого лСерия Из МассивСерий Цикл		
		
		МассивТекущейСерии = Новый Массив;
		
		Если ЗначениеЗаполнено(лТовар.ВидНоменклатуры.ВладелецСерий) Тогда
			ТекущийВладелецСерий = лТовар.ВидНоменклатуры.ВладелецСерий;
		Иначе
			ТекущийВладелецСерий = лТовар.ВидНоменклатуры;
		КонецЕсли;						
		
		Попытка
			Если ТекущийВладелецСерий.ИспользоватьНомерСерии Тогда // (10)
				МассивТекущейСерии.Добавить(СокрЛП(лСерия.Номер));
			КонецЕсли;
		Исключение
		КонецПопытки;

		Попытка
			Если ТекущийВладелецСерий.ИспользоватьДатуПроизводстваСерии Тогда  //(11)
				МассивТекущейСерии.Добавить(Формат(лСерия.ДатаПроизводства, "ДФ=dd.MM.yy"));
			КонецЕсли; 	
		Исключение
		КонецПопытки;

		Попытка
			Если ТекущийВладелецСерий.ИспользоватьСрокГодностиСерии Тогда	//(17)
				Если УзелПО.СерииРассчитыватьГоденДо И ЗначениеЗаполнено(лСерия.ДатаПроизводства) И ЗначениеЗаполнено(лТовар.СрокГодности) Тогда
					ГоденДо = РассчитатьГоденДоСерии(лТовар,лСерия.ДатаПроизводства);
					МассивТекущейСерии.Добавить(Формат(ГоденДо, "ДФ=dd.MM.yy"));
				Иначе
					МассивТекущейСерии.Добавить(Формат(лСерия.ГоденДо, "ДФ=dd.MM.yy"));
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;

		МассивЗначенийСерий.Добавить(МассивТекущейСерии);
	КонецЦикла;	
	
		
	ЗаписатьJSON(Запись, МассивЗначенийСерий, НастройкиСериализации);
	СтрокаJSON = Запись.Закрыть();

	Возврат СтрокаJSON;

КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция GetDocHeads(SN, UserName, DMDocsIDs)
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocList"));
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		СтрокаЛогирования = Новый Структура;
		УникальностьЛогирования = Новый УникальныйИдентификатор;
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("GetDocHeads.Начали", УзелПО,, СтрокаЛогирования, UserName, УникальностьЛогирования);
	КонецЕсли;		

	Если ДатаМобайл_ОбщийМодуль.ЧтениеФлаговОбменаТСД(УзелПО, "ОчиститьДокументы") Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьДокументы", Ложь);	 
	КонецЕсли;
	
	
	СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
	ВсеСклады=?(СписокСкладов.Количество() = 0, Истина, Ложь);
	
	СписокШаблонов=УзелПО.Шаблоны.ВыгрузитьКолонку("Шаблон");
	ВсеШаблоны=?(СписокШаблонов.Количество() = 0, Истина, Ложь);
	
	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	ВсеПомещения=?(СписокПомещений.Количество() = 0, Истина, Ложь);

	//Дополнительная верификация документов
	МассивДокументов = Новый Массив;
	Для каждого DocOutID Из DMDocsIDs.DMDocID Цикл	
		Попытка
			СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
			Если НЕ ЗначениеЗаполнено(СсылкаНаДок.Дата) Тогда
				ОбъектДока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocHead"));   
				ОбъектДока.DMDocOutID = DocOutID;
				ОбъектДока.DMisMark = Истина;     
				ОбъектСписка.DMDocHead.Добавить(ОбъектДока);
			Иначе
				МассивДокументов.Добавить(СсылкаНаДок);
			КонецЕсли;	
		Исключение	
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                    |	ДатаМобайл_ДокументыТСД.Ссылка,
	                    |	ЕСТЬNULL(КОЛИЧЕСТВО(СписокТерминаловВсего.ТСД), 0) > 0 КАК ЕстьОграничениеТСД,
	                    |	ЕСТЬNULL(КОЛИЧЕСТВО(СписокТерминаловКонкретный.ТСД), 0) > 0 КАК ЕстьЭтотТСД
	                    |ИЗ
	                    |	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СписокТерминалов КАК СписокТерминаловВсего
	                    |		ПО ДатаМобайл_ДокументыТСД.Ссылка = СписокТерминаловВсего.Ссылка
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СписокТерминалов КАК СписокТерминаловКонкретный
	                    |		ПО ДатаМобайл_ДокументыТСД.Ссылка = СписокТерминаловКонкретный.Ссылка
	                    |			И (СписокТерминаловКонкретный.ТСД = &ТСД
	                    |				ИЛИ СписокТерминаловКонкретный.ТСД = ЗНАЧЕНИЕ(ПланОбмена.ДатаМобайл_СписокТСД.ПустаяСсылка))
	                    |ГДЕ
	                    |	НЕ ДатаМобайл_ДокументыТСД.Ссылка В (&СписокДокументов)
	                    |	И НЕ(ЕСТЬNULL(ДатаМобайл_ДокументыТСД.Ссылка.ПометкаУдаления, ИСТИНА)
	                    |				ИЛИ ДатаМобайл_ДокументыТСД.Ссылка.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	                    |				ИЛИ НЕ(&ВсеСклады
	                    |						ИЛИ (ЕСТЬNULL(ДатаМобайл_ДокументыТСД.Ссылка.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	                    |							ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСД.Ссылка.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) В (&Склады)
	                    |							ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСД.Ссылка.СкладПолучатель, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) В (&Склады)))
	                    |				ИЛИ НЕ(&ВсеПомещения
	                    |						ИЛИ (ЕСТЬNULL(ДатаМобайл_ДокументыТСД.Ссылка.Помещение, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	                    |							ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСД.Ссылка.Помещение, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) В (&Помещения)))
	                    |				ИЛИ НЕ(&ВсеШаблоны
	                    |						ИЛИ ДатаМобайл_ДокументыТСД.Ссылка.Шаблон В (&Шаблон)))
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ДатаМобайл_ДокументыТСД.Ссылка
	                    |
	                    |ИМЕЮЩИЕ
	                    |	(ЕСТЬNULL(КОЛИЧЕСТВО(СписокТерминаловВсего.ТСД), 0) = 0
	                    |			И (ДатаМобайл_ДокументыТСД.Ссылка.ТСД = &ТСД
	                    |				ИЛИ ДатаМобайл_ДокументыТСД.Ссылка.ТСД = ЗНАЧЕНИЕ(ПланОбмена.ДатаМобайл_СписокТСД.ПустаяСсылка))
	                    |		ИЛИ ЕСТЬNULL(КОЛИЧЕСТВО(СписокТерминаловВсего.ТСД), 0) <> 0
	                    |			И ЕСТЬNULL(КОЛИЧЕСТВО(СписокТерминаловКонкретный.ТСД), 0) <> 0)
	                    |
	                    |ОБЪЕДИНИТЬ
	                    |
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ДатаМобайл_ДокументыТСД.Ссылка,
	                    |	ЕСТЬNULL(КОЛИЧЕСТВО(СписокТерминаловВсего.ТСД), 0) > 0,
	                    |	ЕСТЬNULL(КОЛИЧЕСТВО(СписокТерминаловКонкретный.ТСД), 0) > 0
	                    |ИЗ
	                    |	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СписокТерминалов КАК СписокТерминаловВсего
	                    |		ПО ДатаМобайл_ДокументыТСД.Ссылка = СписокТерминаловВсего.Ссылка
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СписокТерминалов КАК СписокТерминаловКонкретный
	                    |		ПО ДатаМобайл_ДокументыТСД.Ссылка = СписокТерминаловКонкретный.Ссылка
	                    |			И (СписокТерминаловКонкретный.ТСД = &ТСД
	                    |				ИЛИ СписокТерминаловКонкретный.ТСД = ЗНАЧЕНИЕ(ПланОбмена.ДатаМобайл_СписокТСД.ПустаяСсылка))
	                    |ГДЕ
	                    |	ДатаМобайл_ДокументыТСД.Ссылка В(&СписокДокументов)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ДатаМобайл_ДокументыТСД.Ссылка
	                    |
	                    |ИМЕЮЩИЕ
	                    |	(ЕСТЬNULL(КОЛИЧЕСТВО(СписокТерминаловВсего.ТСД), 0) = 0
	                    |			И НЕ(ДатаМобайл_ДокументыТСД.Ссылка.ТСД = &ТСД
	                    |					ИЛИ ДатаМобайл_ДокументыТСД.Ссылка.ТСД = ЗНАЧЕНИЕ(ПланОбмена.ДатаМобайл_СписокТСД.ПустаяСсылка))
	                    |		ИЛИ ЕСТЬNULL(КОЛИЧЕСТВО(СписокТерминаловВсего.ТСД), 0) <> 0
	                    |			И ЕСТЬNULL(КОЛИЧЕСТВО(СписокТерминаловКонкретный.ТСД), 0) = 0)");
							 
	Запрос.УстановитьПараметр("СписокДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ТСД", УзелПО.Ссылка);
	
	Запрос.УстановитьПараметр("Склады", СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады", ВсеСклады);
	
	Запрос.УстановитьПараметр("Помещения", СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", ВсеПомещения);
	
	Запрос.УстановитьПараметр("Шаблон", СписокШаблонов);
	Запрос.УстановитьПараметр("ВсеШаблоны", ВсеШаблоны);
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		//Зарегистрируем спорные документы для обновления ТСД
		Попытка
			ПланыОбмена.ЗарегистрироватьИзменения(УзелПО, Рез.Ссылка);
		Исключение
		КонецПопытки;
	КонецЦикла;	
	//Дополнительная верификация документов
			
	Попытка ПланыОбмена.ВыбратьИзменения(УзелПО, 1, Метаданные.Справочники.ДатаМобайл_ДокументыТСД); Исключение КонецПопытки;
		
	Запрос = Новый Запрос(
	//1) Запрос на DMIsMarkDoc = Ложь	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатаМобайл_ДокументыТСДИзменения.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.ПометкаУдаления, ИСТИНА)
	|				ИЛИ ДатаМобайл_ДокументыТСДИзменения.Ссылка.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			    ИЛИ НЕ(&ВсеСклады
	|						ИЛИ 
	|						(ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|						ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) В (&Склады)
	|						ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.СкладПолучатель, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) В (&Склады)))
	|		    	ИЛИ НЕ(&ВсеПомещения	
	|						ИЛИ 
	|						(ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Помещение, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|						ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Помещение, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) В (&Помещения)))
	|				ИЛИ НЕ(&ВсеШаблоны
	|						ИЛИ ДатаМобайл_ДокументыТСДИзменения.Ссылка.Шаблон В (&Шаблон))
	|				ИЛИ ВЫБОР
	|					КОГДА ЕСТЬNULL(Количество(СписокТерминаловВсего.ТСД),0)=0 И НЕ (ДатаМобайл_ДокументыТСДИзменения.Ссылка.ТСД = &ТСД ИЛИ ДатаМобайл_ДокументыТСДИзменения.Ссылка.ТСД = ЗНАЧЕНИЕ(планобмена.датамобайл_списоктсд.пустаяссылка))
	|						ТОГДА ИСТИНА
	|					КОГДА ЕСТЬNULL(Количество(СписокТерминаловВсего.ТСД),0)<>0 И ЕСТЬNULL(Количество(СписокТерминаловКонкретный.ТСД),0)=0
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК DMisMarkDoc,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.ДатаЗавершенияСбора, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК DMisLoaded
	|ПОМЕСТИТЬ ДокументыДляВыгрузкиСтатусы	
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.Изменения КАК ДатаМобайл_ДокументыТСДИзменения
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СписокТерминалов КАК СписокТерминаловВсего
	|		ПО ДатаМобайл_ДокументыТСДИзменения.Ссылка = СписокТерминаловВсего.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СписокТерминалов КАК СписокТерминаловКонкретный
	|		ПО ДатаМобайл_ДокументыТСДИзменения.Ссылка = СписокТерминаловКонкретный.Ссылка
	|		И  (СписокТерминаловКонкретный.ТСД = &ТСД ИЛИ СписокТерминаловКонкретный.ТСД = ЗНАЧЕНИЕ(планобмена.датамобайл_списоктсд.пустаяссылка))
	|ГДЕ	
	|   НЕ ДатаМобайл_ДокументыТСДИзменения.Ссылка.ДатаСоздания = ДАТАВРЕМЯ(1,1,1)
	|	И ВЫБОР КОГДА ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Шаблон.ГрупповаяРабота , ИСТИНА) = ИСТИНА ТОГДА ДатаМобайл_ДокументыТСДИзменения.Узел = &ТСД ИНАЧЕ ИСТИНА КОНЕЦ	
	|	И НЕ ДатаМобайл_ДокументыТСДИзменения.НомерСообщения ЕСТЬ NULL	
	|
	|СГРУППИРОВАТЬ ПО 
	|  	ДатаМобайл_ДокументыТСДИзменения.Ссылка	
	|
	//2) Запрос дополнительный на DMIsMarkDoc = Истина
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатаМобайл_ДокументыТСДИзменения.Ссылка,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.ДатаЗавершенияСбора, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСДИзменения
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СписокТерминалов КАК СписокТерминаловВсего
	|		ПО ДатаМобайл_ДокументыТСДИзменения.Ссылка = СписокТерминаловВсего.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СписокТерминалов КАК СписокТерминаловКонкретный
	|		ПО ДатаМобайл_ДокументыТСДИзменения.Ссылка = СписокТерминаловКонкретный.Ссылка
	|		И  (СписокТерминаловКонкретный.ТСД = &ТСД ИЛИ СписокТерминаловКонкретный.ТСД = ЗНАЧЕНИЕ(планобмена.датамобайл_списоктсд.пустаяссылка))
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДИзменения.Ссылка В(&СписокДокументов)
	|	И (ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.ПометкаУдаления, ИСТИНА)
	|			ИЛИ ДатаМобайл_ДокументыТСДИзменения.Ссылка.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|		    ИЛИ НЕ(&ВсеСклады
	|						ИЛИ 
	|						(ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|						ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) В (&Склады)
	|						ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.СкладПолучатель, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) В (&Склады)))
	|		    ИЛИ НЕ(&ВсеПомещения	
	|						ИЛИ 
	|						(ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Помещение, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|						ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Помещение, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) В (&Помещения)))
	|			ИЛИ НЕ(&ВсеШаблоны
	|					ИЛИ ДатаМобайл_ДокументыТСДИзменения.Ссылка.Шаблон В (&Шаблон)))
	|	
	|//////////////////////////////////////////////////////////////////////////
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыДляВыгрузкиСтатусы.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ДокументыДляВыгрузкиСтатусы.DMisMarkDoc,ЛОЖЬ)) КАК DMisMarkDoc,
	|	МАКСИМУМ(ЕСТЬNULL(ДокументыДляВыгрузкиСтатусы.DMisLoaded,ЛОЖЬ)) КАК DMisLoaded
	|ПОМЕСТИТЬ ДокументыДляВыгрузки	
	|ИЗ
	|	ДокументыДляВыгрузкиСтатусы КАК ДокументыДляВыгрузкиСтатусы 
	|СГРУППИРОВАТЬ ПО
	|	ДокументыДляВыгрузкиСтатусы.Ссылка
	|	
	|//////////////////////////////////////////////////////////////////////////
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыДляВыгрузки.Ссылка КАК ДокСсылка,
	|	ДокументыДляВыгрузки.DMisMarkDoc КАК DMisMarkDoc,
	//|	ДокументыДляВыгрузки.DMisLoaded КАК DMisLoaded,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.Шаблон.Ссылка.ГрупповаяРабота , ИСТИНА) = ИСТИНА И НЕ ГрупповыеДокументыТСД.ДокументТСД ЕСТЬ NULL ТОГДА ИСТИНА 
	|		ИНАЧЕ ДокументыДляВыгрузки.DMisLoaded 
	|	КОНЕЦ КАК DMisLoaded,
	|	ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.Номер, """") КАК DMNumber,
	|	ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК DMDate,
	|	ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.Номер, """") КАК DMBarcode,
	|	ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.Комментарий, """") КАК DMComment,	
	|	ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.Клиент, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК КлиентСсылка,
	|	ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.Склад.Наименование, """") КАК DMWarehouseName,
	|	ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.Склад.Ссылка, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладСсылка,
	|	ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.СкладПолучатель.Наименование, """") КАК DMWarehouseName2,
	|	ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.СкладПолучатель.Ссылка, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладПолучательСсылка,
	|	ЕСТЬNULL(ДокументыДляВыгрузки.Ссылка.Шаблон.Ссылка, ЗНАЧЕНИЕ(Справочник.ДатаМобайл_ШаблоныДокументов.ПустаяСсылка)) КАК ШаблонСсылка	
	|ИЗ
	|	ДокументыДляВыгрузки КАК ДокументыДляВыгрузки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатаМобайл_ТСДГрупповыхДокументов КАК ГрупповыеДокументыТСД
	|		ПО (ДокументыДляВыгрузки.Ссылка = ГрупповыеДокументыТСД.ДокументТСД И ГрупповыеДокументыТСД.ТСД = &ТСД 
	|		И НЕ ГрупповыеДокументыТСД.ДатаЗавершенияСбора = ДАТАВРЕМЯ(1,1,1))  
	|//////////////////////////////////////////////////////////////////////////
	|;
	|УНИЧТОЖИТЬ ДокументыДляВыгрузкиСтатусы
	|//////////////////////////////////////////////////////////////////////////
	|;
	|УНИЧТОЖИТЬ ДокументыДляВыгрузки");
	

	Запрос.УстановитьПараметр("ТСД", УзелПО.Ссылка);
	
	Запрос.УстановитьПараметр("Склады", СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады", ВсеСклады);
	
	Запрос.УстановитьПараметр("Помещения", СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", ВсеПомещения);

	Запрос.УстановитьПараметр("Шаблон", СписокШаблонов);
	Запрос.УстановитьПараметр("ВсеШаблоны", ВсеШаблоны);
	
	Запрос.УстановитьПараметр("СписокДокументов", МассивДокументов);
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		ОбъектДока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocHead"));
		ОбъектШаблона = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMTemplate"));
		ОбъектКлиента = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMClient"));
		
		Если НЕ ЗначениеЗаполнено(Рез.КлиентСсылка) Тогда
			ОбъектКлиента.DMClientID = "";
			ОбъектКлиента.DMName = "";
			ОбъектКлиента.DMBarcode = "";
		Иначе
			ОбъектКлиента.DMClientID = "8k-" + СокрЛП(Рез.КлиентСсылка.УникальныйИдентификатор());
			ОбъектКлиента.DMName = ЧистаяСтрока(Рез.КлиентСсылка.Наименование);
			Попытка ОбъектКлиента.DMBarcode = Рез.КлиентСсылка.Код; Исключение ОбъектКлиента.DMBarcode = ""; КонецПопытки;
		КонецЕсли;

		ОбъектДока.DMClient = ОбъектКлиента;
		
		ЗаполнитьЗначенияСвойств(ОбъектДока, Рез);
		
		ОбъектДока.DMDocOutID = "d82-" + Строка(Рез.ДокСсылка.УникальныйИдентификатор());
		ОбъектДока.DMisMark = Рез.DMisMarkDoc;
		ОбъектДока.DMComment = ЧистаяСтрока(ОбъектДока.DMComment);
		ОбъектДока.DMBarcode = ЧистаяСтрока(ОбъектДока.DMBarcode);
		
		ЗаполнитьОбъектШаблона(ОбъектШаблона, Рез.ШаблонСсылка);
		ОбъектДока.DMTemplate = ОбъектШаблона;

		ОбъектСклада = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMWarehouse"));
		ОбъектСклада.DMWarehouseID = ?(ЗначениеЗаполнено(Рез.СкладСсылка), СокрЛП(Рез.СкладСсылка.УникальныйИдентификатор()), "");
		ОбъектСклада.DMWarehouseName = Рез.DMWarehouseName;
		ОбъектДока.DMWarehouse = ОбъектСклада;
		
		ОбъектСклада2 = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMWarehouse"));
		ОбъектСклада2.DMWarehouseID = ?(ЗначениеЗаполнено(Рез.СкладПолучательСсылка),СокрЛП(Рез.СкладПолучательСсылка.УникальныйИдентификатор()), "");
		ОбъектСклада2.DMWarehouseName = Рез.DMWarehouseName2;
		ОбъектДока.DMWarehouse2 = ОбъектСклада2;
	 
		//Дополнительные формы
		ОбъектСпискаДополнительныхФорм = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocStepList"));
		ЗапросДополнительныхФорм = Новый Запрос;
		ЗапросДополнительныхФорм.Текст = 
		"ВЫБРАТЬ
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма.Ссылка КАК Ссылка,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Порядок КАК Порядок,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки КАК РеквизитИзШапки,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ПроверятьЗаполнение
		|ИЗ
		|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
		|ГДЕ
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон = &Шаблон
		|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма.ПометкаУдаления = ЛОЖЬ";
		
		ЗапросДополнительныхФорм.УстановитьПараметр("Шаблон", Рез.ШаблонСсылка);
		
		РезультатЗапросаДополнительныхФорм = ЗапросДополнительныхФорм.Выполнить();
		ВыборкаДополнительныхФорм = РезультатЗапросаДополнительныхФорм.Выбрать();
		Пока ВыборкаДополнительныхФорм.Следующий() Цикл
			ОбъектДополнительныхФорм = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocStep"));
			ОбъектДополнительныхФорм.DMStepId = ?(ВыборкаДополнительныхФорм.Ссылка = Неопределено, "", СокрЛП(ВыборкаДополнительныхФорм.Ссылка.УникальныйИдентификатор()));
			ОбъектДополнительныхФорм.DMDocId = "d82-" + Строка(Рез.ДокСсылка.УникальныйИдентификатор());
			ОбъектДополнительныхФорм.DMSortNumber = ВыборкаДополнительныхФорм.Порядок;
			ОбъектДополнительныхФорм.DMIsDocArg = ВыборкаДополнительныхФорм.РеквизитИзШапки;
			ОбъектДополнительныхФорм.DMCheckFill = ВыборкаДополнительныхФорм.ПроверятьЗаполнение;
			ОбъектСпискаДополнительныхФорм.DMDocStep.Добавить(ОбъектДополнительныхФорм);
		КонецЦикла;
		ОбъектДока.DMSteps = ОбъектСпискаДополнительныхФорм;
		
		//Штрихкод от 1С	
		Попытка
			ОбъектДока.DMBarcode = ЧисловойКодПоСсылке(Рез.ДокСсылка.ИсходныйДокумент);
		Исключение
			ОбъектДока.DMBarcode = "";
		КонецПопытки;
		
		ОбъектДока.DMNumber = ЧистаяСтрока(ОбъектДока.DMNumber);
		ОбъектДока.Params = СформироватьЗаголовкиJSONParamsДокумента(Рез.ДокСсылка);

		ОбъектСписка.DMDocHead.Добавить(ОбъектДока);
	КонецЦикла;	
	
	Попытка ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ДатаМобайл_ДокументыТСД); Исключение КонецПопытки;
	
	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("GetDocHeads.Закончили", УзелПО,, СтрокаЛогирования, UserName, УникальностьЛогирования);
	КонецЕсли;

	Возврат ОбъектСписка;
КонецФункции
Функция GetDocRowsSelect(SN, UserName, DocOutID)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRows"));
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
	Исключение	
		ВызватьИсключениеВС("GetDocRowsSelect. Не найден документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;
	

	Если СсылкаНаДок.ПолучитьОбъект( )= Неопределено Тогда
		ВызватьИсключениеВС("GetDocRowsSelect. Не найден документ. ");
		Возврат ОбъектСписка;
	КонецЕсли;
	
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок, "ПометкаУдаления, Шаблон");

	ПометкаУдаления = ЗначенияРеквизитовСсылкаНаДок.ПометкаУдаления;
	Шаблон 			= ЗначенияРеквизитовСсылкаНаДок.Шаблон;
		
	Если ПометкаУдаления Тогда	
		ВызватьИсключениеВС("GetDocRows. Документ задания помечен на удаление");
		Возврат ОбъектСписка;	
	КонецЕсли;
	
	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		СтрокаЛогирования = Новый Структура;
		УникальностьЛогирования = Новый УникальныйИдентификатор;
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("GetDocRowsSelect.Начали", УзелПО, СсылкаНаДок, СтрокаЛогирования, UserName, УникальностьЛогирования);
	КонецЕсли;
	

	Если НЕ Шаблон.ИспользоватьПодбор Тогда
		Возврат ОбъектСписка;
	КонецЕсли;
		
	Если Шаблон.ЕГАИС Тогда
		
		GetDocRowsSelectEGAIS(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок);
		
	ИначеЕсли Шаблон.ВидДокумента = "ЗаказНаПеремещение" Тогда
		
		GetDocRowsSelectOrderToReplace(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок);
		
	ИначеЕсли Шаблон.ВидДокумента = "СборкаТоваров" Или Шаблон.ВидДокумента = "ЗаказНаСборку" Тогда
		
		GetDocRowsSborka_Select(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок);	
		
	ИначеЕсли Шаблон.ИспользоватьМаркировку
		И ПроверитьТребуетсяВыгрузкаМарок(СсылкаНаДок) Тогда
		
		GetDocRowsSelectMarking(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок);
		
	Иначе
		Попытка
			лЕстьЯчейка = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Ячейка") <> Неопределено;
		Исключение
			лЕстьЯчейка = Ложь;
		КонецПопытки;
	
		Если Шаблон.ИспользованиеЯчеекПодбор > 0 И лЕстьЯчейка Тогда
			GetDocRowsSelectCells(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок);	
		Иначе	
			СерииВОтдельнойТЧ = Ложь;
			Если Шаблон.УчитыватьСерийниковВЗаданииПодбор Тогда		
				Попытка
					Для каждого ТЧ Из Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти Цикл
						Если ТЧ.Имя = "Серии" Тогда
							СерииВОтдельнойТЧ = Истина;
							Прервать;	
						КонецЕсли;
					КонецЦикла;
				Исключение
				КонецПопытки;
			КонецЕсли;

			Если СерииВОтдельнойТЧ И Шаблон.СерииВОтдельнойТЧ Тогда
			    GetDocRowsSelectSN(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок);
			Иначе
				GetDocRowsSelectCasual(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("GetDocRowsSelect.Закончили", УзелПО, СсылкаНаДок, СтрокаЛогирования, UserName, УникальностьЛогирования);
	КонецЕсли;

	Возврат ОбъектСписка;
	
КонецФункции
Функция GetDocRowsInsert(SN, UserName, DocOutID)
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocRows"));
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
	Исключение	
		ВызватьИсключениеВС("GetDocRowsInsert. Не найден документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;	
	Если ссылканадок.ПолучитьОбъект() = Неопределено Тогда
		ВызватьИсключениеВС("GetDocRowsInsert. Не найден документ. ");
		Возврат ОбъектСписка;
	КонецЕсли;
	
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок, "ПометкаУдаления, Шаблон");

	ПометкаУдаления = ЗначенияРеквизитовСсылкаНаДок.ПометкаУдаления;
	Шаблон 			= ЗначенияРеквизитовСсылкаНаДок.Шаблон;

	Если ПометкаУдаления Тогда		
		ВызватьИсключениеВС("GetDocRows. Документ задания помечен на удаление");
		Возврат ОбъектСписка;	
	КонецЕсли;
	
	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		СтрокаЛогирования = Новый Структура;
		УникальностьЛогирования = Новый УникальныйИдентификатор;
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("GetDocRowsInsert.Начали", УзелПО, СсылкаНаДок, СтрокаЛогирования, UserName, УникальностьЛогирования);
	КонецЕсли;

	
	Если НЕ Шаблон.ИспользоватьПриемку Тогда
		Возврат ОбъектСписка;
	КонецЕсли;	

	Попытка
		лЕстьЯчейка = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПриемка].Реквизиты.Найти("Ячейка") <> Неопределено;
	Исключение
		лЕстьЯчейка = Ложь;
	КонецПопытки;
	
	Если Шаблон.ВидДокумента = "СборкаТоваров" Или Шаблон.ВидДокумента = "ЗаказНаСборку" Тогда
		
		GetDocRowsSborka_Insert(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок);
		
	ИначеЕсли Шаблон.ИспользованиеЯчеекПриемка > 0 И лЕстьЯчейка Тогда

		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                    |	ЗапросСЛимитами.Номенклатура,
		                    |	ЗапросСЛимитами.Характеристика,
							|	ЗапросСЛимитами.Серия,
		                    |	СУММА(ЗапросСЛимитами.Количество) КАК Количество,
		                    |	ЗапросСЛимитами.Ячейка КАК Ячейка,
		                    |	МИНИМУМ(ЗапросСЛимитами.НомерСтроки) КАК НомерСтроки
		                    |ИЗ
		                    |	(ВЫБРАТЬ
		                    |		ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
		                    |		ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
							|		&УсловиеСерия КАК Серия,
		                    |		СУММА(ТаблицаТоваровВДокументе.Количество) КАК Количество,
		                    |		ТаблицаТоваровВДокументе.Ячейка КАК Ячейка,
		                    |		МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки
		                    |	ИЗ
		                    |		Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ТаблицаТоваровВДокументе
		                    |	ГДЕ
		                    |		ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
		                    |	
		                    |	СГРУППИРОВАТЬ ПО
		                    |		ТаблицаТоваровВДокументе.Номенклатура,
		                    |		ТаблицаТоваровВДокументе.Характеристика,
							|		&УсловиеСерия,
		                    |		ТаблицаТоваровВДокументе.Ячейка) КАК ЗапросСЛимитами
		                    |
		                    |СГРУППИРОВАТЬ ПО
		                    |	ЗапросСЛимитами.Номенклатура,
							|	ЗапросСЛимитами.Серия,
		                    |	ЗапросСЛимитами.Характеристика,
		                    |	ЗапросСЛимитами.Ячейка
							|		
		                    |УПОРЯДОЧИТЬ ПО
		                    |	НомерСтроки");
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаДок);
		Запрос.УстановитьПараметр("ИсходныйДокумент", СсылкаНаДок.ИсходныйДокумент);
		Запрос.Текст=СтрЗаменить(Запрос.Текст, ".ОтборРазмещениеТоваров.", "." + Шаблон.ВидДокумента + ".");
		Запрос.Текст=СтрЗаменить(Запрос.Текст, ".ТоварыОтбор КАК ", "." + Шаблон.ИмяТабличнойЧастиПриемка + " КАК ");
		
		Попытка
			ЕстьСерии = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПриемка].Реквизиты.Найти("Серия") <> Неопределено;
		Исключение
			ЕстьСерии = Ложь;
		КонецПопытки;
		
		Если ЕстьСерии Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","ТаблицаТоваровВДокументе.Серия");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		КонецЕсли;

		Попытка
			ЕстьКоличествоУпаковок = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено;
		Исключение
			ЕстьКоличествоУпаковок = Ложь;
		КонецПопытки;

		Если ЕстьКоличествоУпаковок И УзелПО.НеИспользоватьПересчетУпаковок Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество", "ТаблицаТоваровВДокументе.КоличествоУпаковок");
		КонецЕсли;
		
		Рез = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаДока Из Рез Цикл
			ОбъектСтрокиДока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocRec"));
			ОбъектСтрокиДока.DMBarcode = "";
			ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
			Модуль_ШтрихкодированиеПечатныхФорм = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ШтрихкодированиеПечатныхФорм");
			ОбъектСтрокиДока.DMCell = ?(УзелПО.ВыгружатьВКодЯчейки=1,СтрокаДока.Ячейка.Код, Строка(Модуль_ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(СтрокаДока.Ячейка)));
			
			Попытка
				Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
					ОбъектСтрокиДока.DMSN = ПолучитьЗначениеСерии(УзелПО, СтрокаДока.Номенклатура, СтрокаДока.Серия, Истина);
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			Попытка
				Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
					ОбъектСтрокиДока.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура, СсылкаНаДок.Клиент);
				КонецЕсли;
			Исключение 
			КонецПопытки;
		
			ОбъектСтрокиДока.Params = СформироватьЗаголовкиJSONParamsСтрокиДокумента(СтрокаДока.Номенклатура,СсылкаНаДок);
			
			ОбъектСтрокиДока.DMQuant = СтрокаДока.Количество;

			ЭтоУслуга = Ложь;
			Попытка 
				Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЭтоУслуга = Истина;
			   	КонецЕсли;
			Исключение
			КонецПопытки;

			Если УзелПО.НеОтображатьОстатки Тогда
				ОбъектСтрокиДока.DMLimit = 0;
			ИначеЕсли ЭтоУслуга Тогда
				ОбъектСтрокиДока.DMLimit = 999;	
			Иначе
				Попытка 
					ТекущийСклад = СсылкаНаДок.Склад;
				Исключение
					ТекущийСклад = Справочники.Склады.ПустаяСсылка();
				КонецПопытки;

				ОбъектСтрокиДока.DMLimit = ПолучитьОстаткиПоЯчейке(УзелПО, ТекущийСклад, СтрокаДока.Номенклатура, СтрокаДока.Характеристика, СтрокаДока.Ячейка);

			КонецЕсли;

			ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
		КонецЦикла;
	Иначе	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                    |	ЗапросСЛимитами.Номенклатура,
		                    |	ЗапросСЛимитами.Характеристика,
							|	ЗапросСЛимитами.Серия,
		                    |	СУММА(ЗапросСЛимитами.Количество) КАК Количество,
							|	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0)) КАК Лимит,
		                    |	МИНИМУМ(ЗапросСЛимитами.НомерСтроки) КАК НомерСтроки
		                    |ИЗ
		                    |	(ВЫБРАТЬ
		                    |		ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
		                    |		ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
							|		&УсловиеСерия КАК Серия,
		                    |		СУММА(ТаблицаТоваровВДокументе.Количество) КАК Количество,
		                    |		МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки
		                    |	ИЗ
		                    |		Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТоваровВДокументе
		                    |	ГДЕ
		                    |		ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
		                    |	
		                    |	СГРУППИРОВАТЬ ПО
		                    |		ТаблицаТоваровВДокументе.Номенклатура,
		                    |		ТаблицаТоваровВДокументе.Характеристика,
							|		&УсловиеСерия) КАК ЗапросСЛимитами
							|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		                    |				,
		                    |				(&ВсеСклады
		                    |					ИЛИ Склад В (&Склады))
							|				И (&ВсеПомещения
		                    |					ИЛИ Помещение В (&Помещения))) КАК ТоварыВЯчейкахОстатки
		                    |		ПО ЗапросСЛимитами.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
		                    |			И ЗапросСЛимитами.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
		                    |
		                    |СГРУППИРОВАТЬ ПО
		                    |	ЗапросСЛимитами.Номенклатура,
		                    |	ЗапросСЛимитами.Характеристика,
							|	ЗапросСЛимитами.Серия
		                    |
		                    |УПОРЯДОЧИТЬ ПО
		                    |	НомерСтроки");
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаДок);
		Запрос.УстановитьПараметр("ИсходныйДокумент", СсылкаНаДок.ИсходныйДокумент);
		
		СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
		Запрос.УстановитьПараметр("Склады", СписокСкладов);
		Запрос.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
		
		СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
		Запрос.УстановитьПараметр("Помещения", СписокПомещений);
		Запрос.УстановитьПараметр("ВсеПомещения", СписокПомещений.Количество() = 0);

		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ПриходныйОрдерНаТовары.", "." + Шаблон.ВидДокумента + ".");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Товары КАК ", "." + Шаблон.ИмяТабличнойЧастиПриемка + " КАК ");
		
		Попытка
			ЕстьСерии = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПриемка].Реквизиты.Найти("Серия") <> Неопределено;
		Исключение
			ЕстьСерии = Ложь;
		КонецПопытки;

		
		Если ЕстьСерии Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСерия","ТаблицаТоваровВДокументе.Серия");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСерия","Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		КонецЕсли;

		Попытка
			ЕстьКоличествоУпаковок = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено;
		Исключение
			ЕстьКоличествоУпаковок = Ложь;
		КонецПопытки;

		Если ЕстьКоличествоУпаковок И УзелПО.НеИспользоватьПересчетУпаковок Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаТоваровВДокументе.Количество", "ТаблицаТоваровВДокументе.КоличествоУпаковок");
		КонецЕсли;

		Рез = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаДока Из Рез Цикл
			ОбъектСтрокиДока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocRec"));
			ОбъектСтрокиДока.DMBarcode = "";
			ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
			
			Попытка
				Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
					ОбъектСтрокиДока.DMSN = ПолучитьЗначениеСерии(УзелПО, СтрокаДока.Номенклатура, СтрокаДока.Серия, Истина);
				КонецЕсли;	
			Исключение
			КонецПопытки;

			Попытка
				Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
					ОбъектСтрокиДока.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура, СсылкаНаДок.Клиент);
				КонецЕсли;
			Исключение 
			КонецПопытки;
			
			ОбъектСтрокиДока.Params = СформироватьЗаголовкиJSONParamsСтрокиДокумента(СтрокаДока.Номенклатура,СсылкаНаДок);
			
			ОбъектСтрокиДока.DMQuant = СтрокаДока.Количество;

			ЭтоУслуга = Ложь;
			Попытка 
				Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЭтоУслуга = Истина;
			   	КонецЕсли;
			Исключение
			КонецПопытки;

			Если УзелПО.НеОтображатьОстатки Тогда
				ОбъектСтрокиДока.DMLimit = 0;
			ИначеЕсли ЭтоУслуга Тогда
				ОбъектСтрокиДока.DMLimit = 999;	
			Иначе	
				Итог = Формат(СтрокаДока.Лимит, ПолучитьФорматнуюСтрокуЧисла());
				Попытка
					ОбъектСтрокиДока.DMLimit = Итог;
				Исключение
					ОбъектСтрокиДока.DMLimit = 0;
				КонецПопытки;
			КонецЕсли;

			ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
		КонецЦикла;
	КонецЕсли;
	
	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("GetDocRowsInsert.Закончили", УзелПО, СсылкаНаДок, СтрокаЛогирования, UserName, УникальностьЛогирования);
	КонецЕсли;

	Возврат ОбъектСписка;
КонецФункции
Функция GetNewGroupDocRows(SN, UserName, DocOutID)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocRows"));

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
	Исключение	
		ВызватьИсключениеВС("GetNewGroupDocRows. Не найден документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тсд", УзелПО);
	Запрос.УстановитьПараметр("ИндетификаторДокумента", СсылкаНаДок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.Штрихкод КАК DMBarcode,
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.СерийныйНомер КАК DMSN,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.Ячейка КАК DMCell,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.КодТовара КАК DMArtID,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.УпаковочныйЛист КАК DMPackID,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.Количество * 
				   |	ВЫБОР КОГДА ЕстьNull(ДатаМобайл_СтрокиГрупповыхДокументов.ЕдиницаИзмерения.Числитель,1) = 0 ТОГДА 1 
				   |	ИНАЧЕ ЕстьNull(ДатаМобайл_СтрокиГрупповыхДокументов.ЕдиницаИзмерения.Числитель, 1) 
				   |    КОНЕЦ КАК DMQuant,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.НазваниеТовара КАК DMArtName,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.ЕгаисПолныйКод КАК DMPDFBarcode,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.ЕгаисМарка КАК DMDataMatrixBarcode,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.ЕгаисДатаРозлива КАК DMDateBottling,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.PDF КАК DMDecodedPDFBarcode,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.ЕгаисСправкаА КАК DMBlankA,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.ЕгаисСправкаБ КАК DMBlankB,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.НоваяЦена КАК DMChangedPrice,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.Короб КАК DMBoxPackID,   
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.ИмяТаблицы КАК DMTable,
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.Уникальность КАК DMGroupId
				   |ИЗ
				   |	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_СтрокиГрупповыхДокументов
				   |ГДЕ
				   |	ДатаМобайл_СтрокиГрупповыхДокументов.ТСД = &ТСД
	               |	И ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД = &ИндетификаторДокумента
				   |	И ДатаМобайл_СтрокиГрупповыхДокументов.ДляОбмена";
				   
				   
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
			ОбъектСтроки = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMDocRec"));
			ЗаполнитьЗначенияСвойств(ОбъектСтроки, Рез);
			ОбъектСтроки.DMDateBottling = Строка(Формат(Рез.DMDateBottling, "ДФ=ddmmyy"));
			ОбъектСписка.DMDocRow.Добавить(ОбъектСтроки);
	КонецЦикла;
			
	Возврат ОбъектСписка;
	
КонецФункции
Функция ApproveGroupDocRows(SN, UserName, DocOutID, DMDocsIDs)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли; 	
	
	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
	Исключение	
		ВызватьИсключениеВС("ApproveGroupDocRows. Не найден документ. ");
		Возврат Ложь;
	КонецПопытки;	
	
	НаборЗаписей = РегистрыСведений.ДатаМобайл_СтрокиГрупповыхДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТСД.Установить(УзелПО);
	НаборЗаписей.Отбор.ДокументТСД.Установить(СсылкаНаДок);
	НаборЗаписей.Отбор.ДляОбмена.Установить(Истина);
	НаборЗаписей.Прочитать();
	ТЗ = НаборЗаписей.Выгрузить();
	МассивНаУдаление = Новый Массив;
	Для каждого УникальныйИдентификаторСтроки Из DMDocsIDs.DMDocID Цикл	
		
		НайденнаяСтрока = ТЗ.Найти(УникальныйИдентификаторСтроки,"Уникальность");
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		ИначеЕсли МассивНаУдаление.Найти(НайденнаяСтрока) = Неопределено Тогда
			МассивНаУдаление.Добавить(НайденнаяСтрока);
		КонецЕсли;
		
	КонецЦикла;	
	
	Для каждого Строка Из МассивНаУдаление Цикл
		ТЗ.Удалить(Строка);
	КонецЦикла;
	НаборЗаписей.Загрузить(ТЗ);
	НаборЗаписей.Записать();
	
	Возврат Истина;
	
КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция CreateEgaisArt(SN, UserName, DMArt, DMEgaisArt)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	ArtID = DMArt.DMArtID;
	AlcoArtID = DMEgaisArt.ArtID;
	
	Если Лев(ArtID, 3) = "8U-" Тогда
		Возврат Истина;
	ИначеЕсли Лев(ArtID, 3) = "8n-" Тогда
		лТовар=Справочники.ДатаМобайл_НовыеТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4))).ПолучитьОбъект();
	Иначе	
		лТовар=Справочники.ДатаМобайл_НовыеТовары.СоздатьЭлемент();
	КонецЕсли;	
	
	лТовар.Пользователь = UserName;
	лТовар.Наименование = ЛЕВ(DMEgaisArt.ArtName, Метаданные.Справочники.Номенклатура.ДлинаНаименования);
	лТовар.ИдентификаторАлкоголя = AlcoArtID;
	
	Попытка
		лТовар.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		лТовар.ОбменДанными.Получатели.Заполнить();
		лТовар.ОбменДанными.Получатели.Удалить(УзелПО);
		лТовар.Записать();
	Исключение
		ВызватьИсключениеВС("CreateEgaisArt. Не удалось создать товар. "+ОписаниеОшибки());
		Возврат Ложь;
	Конецпопытки;
	
	DMArt.DMArtID = "8n-" + Строка(лТовар.Ссылка.УникальныйИдентификатор());
	
	Если DMArt.DMBarcodeList.Количество() = 0 Тогда
		Возврат Истина;	
	КонецЕсли;
	
	BarcodeStr = DMArt.DMBarcodeList.Получить(0);
	ШК = BarcodeStr.DMBarcode;
	
	Запрос = Новый Запрос(
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
	|");
	
	Попытка 
		ШКЧ = Число(ШК);
	Исключение
		ШКЧ = -1;
	КонецПопытки;	
	Запрос.УстановитьПараметр("ВесовойКод", ШКЧ);
	Запрос.УстановитьПараметр("ШтрихКод", ШК);
	Рез = Запрос.Выполнить().Выбрать();
	ЕстьВСписке = Ложь;
	Если Рез.Следующий() Тогда // уже есть в списке шк
		// Возврат Ложь;
		ЕстьВСписке = Истина;
	КонецЕсли;	
	Если НЕ ЕстьВСписке Тогда
		лНЗ = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
		лНЗ.Отбор.ШтрихКод.Установить(ШК);
		лШК = лНЗ.Добавить();
		
		лШК.Номенклатура = лТовар.Ссылка;
		лШК.ШтрихКод     = ШК;
		лШК.Пользователь = UserName;
		лШК.Наименование = BarcodeStr.DMMeasureName;
		лШК.Коэффициент  = BarcodeStr.DMMeasureK;
		
		Попытка
			лНЗ.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			лНЗ.ОбменДанными.Получатели.Заполнить();
			лНЗ.ОбменДанными.Получатели.Удалить(УзелПО);
			лНЗ.ОбменДанными.Загрузка = Истина;
			лНЗ.Записать(Истина);
		Исключение
			ВызватьИсключениеВС("CreateEgaisArt. Не удалось добавить штрихкод. " + ОписаниеОшибки());
			Возврат Ложь;
		Конецпопытки;
	КонецЕсли;
	
	Возврат Истина;

	
КонецФункции
Функция DeleteArt(SN, UserName, ArtID)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Если Лев(ArtID, 3) = "8U-" Тогда
		ВызватьИсключениеВС("DeleteArt. Нельзя удалять существующие товары. ");
		Возврат Ложь;
	ИначеЕсли Лев(ArtID, 3) = "8n-" Тогда
		лТовар=Справочники.ДатаМобайл_НовыеТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4))).ПолучитьОбъект();
	Иначе	
		Возврат Истина;
	КонецЕсли;	
	
	Попытка
		лТовар.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		лТовар.ОбменДанными.Получатели.Заполнить();
		лТовар.ОбменДанными.Получатели.Удалить(УзелПО);
		лТовар.Удалить();
	Исключение
		ВызватьИсключениеВС("DeleteArt. Не удалось удалить товар. " + ОписаниеОшибки());
		Возврат Ложь;
	Конецпопытки;	
	
	Возврат Истина;
	
КонецФункции
Функция DeleteBarcode(SN, UserName, ArtID, Barcode)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Если Лев(ArtID,3) = "8U-" Тогда
		Если НЕ РазрешеноРедактированиеТовара(УзелПО,UserName) Тогда
			ВызватьИсключениеВС("DeleteBarcode. Пользователю в настройках прав в АРМ 1С не разрешено редактирование существующих товаров. ");
			Возврат Ложь;
		КонецЕсли;

		Если Не УзелПО.ЗаписьВРегистр Тогда
			ВызватьИсключениеВС("DeleteBarcode. Не разрешена запись штрихкодов сразу в регистр в настройках ТСД в АРМ 1С. ");
			Возврат Ложь;	
		КонецЕсли;
		
		лТовар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4, 36)));
		ИДХК = Сред(ArtID,40,36);
		
		Если ИДХК <> "00000000-0000-0000-0000-000000000000" Тогда
			лХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
		Иначе
			лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(); 
		КонецЕсли;
		
	ИначеЕсли Лев(ArtID, 3) = "8n-" Тогда
		лТовар = Справочники.ДатаМобайл_НовыеТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4))).ПолучитьОбъект();
		лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(); 
	Иначе	
		ВызватьИсключениеВС("DeleteBarcode. Не найдена номенклатура. ");
		Возврат Ложь;
	КонецЕсли;
	
	ШК = Barcode;
	
	Если УзелПО.ЗаписьВРегистр Тогда
		лНЗ = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();	
	Иначе
		лНЗ = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();		
	КонецЕсли;

	лНЗ.Отбор.ШтрихКод.Установить(ШК);
	лНЗ.Прочитать();
	лНЗ.Очистить();
	Попытка
		лНЗ.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		лНЗ.ОбменДанными.Получатели.Заполнить();
		лНЗ.ОбменДанными.Получатели.Удалить(УзелПО);
		лНЗ.Записать(Истина);
	Исключение
		ВызватьИсключениеВС("DeleteBarcode. Не удалось удалить штрихкод. " + ОписаниеОшибки());
		Возврат Ложь;
	Конецпопытки;
	

	Возврат Истина;
КонецФункции
Функция UpdateArt(SN, UserName, Art)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	ArtID = Art.DMArtID;
	Если Лев(ArtID, 3) = "8U-" Тогда
		Если Не РазрешеноРедактированиеТовара(УзелПО,UserName) Тогда
			ВызватьИсключениеВС("UpdateArt. Пользователю в настройках прав в АРМ 1С не разрешено редактирование существующих товаров. ");
			Возврат Ложь;
		КонецЕсли;

		ИДХК = Сред(ArtID, 40, 36);
		Если ИДХК <> "00000000-0000-0000-0000-000000000000" Тогда
			ВызватьИсключениеВС("UpdateArt. Нельзя изменять наименование товара с характеристикой.");
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			лТовар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4))).ПолучитьОбъект();
			лТовар.Наименование = Лев(Art.DMArtName, Метаданные.Справочники.Номенклатура.ДлинаНаименования);
			лТовар.Записать();
		Исключение
			ВызватьИсключениеВС("UpdateArt. Не удалось обновить товар. " + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		ТекстОшибки = "";
		НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4, 36)));
		Если СсылкаСуществует(НоменклатураСсылка) Тогда
			
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			Атрибуты = ПолучитьАтрибуты(УзелПО);
			Для сч = 1 По 10 Цикл
				
				ИмяАтрибута = Атрибуты["ИмяАтрибута" + сч];
				
				//ДопСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СтрЗаменить(ИмяАтрибута, "ДР_", ""));
				//Значение=НоменклатураСсылка.ДополнительныеРеквизиты.Найти(ДопСвойство);
				
				НовоеЗначениеРеквизитаСтрокой = СокрЛП(Art["DMArtAttr" + сч]);
				Если ИмяАтрибута <> "" И ЧистаяСтрока(Строка(НоменклатураОбъект[ИмяАтрибута])) <> НовоеЗначениеРеквизитаСтрокой Тогда
					
					Если НовоеЗначениеРеквизитаСтрокой = "" Тогда
						НоменклатураОбъект[ИмяАтрибута] = "";
					Иначе
						УстановитьЗначениеИЗСтроки(НоменклатураОбъект, ИмяАтрибута, НовоеЗначениеРеквизитаСтрокой, ТекстОшибки);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Попытка
				НоменклатураОбъект.Записать();
			Исключение
				ТекстОшибки = ТекстОшибки + "UpdateArt. Не удалось записать номенклатуру. " + ОписаниеОшибки() + Символы.ПС;
			КонецПопытки; 
			
		Иначе
			ТекстОшибки = ТекстОшибки + "UpdateArt. Не удалось найти товар по УИД." + Символы.ПС;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключениеВС(ТекстОшибки);
		КонецЕсли;
		
		Возврат НЕ ЗначениеЗаполнено(ТекстОшибки);
		
	ИначеЕсли Лев(ArtID,3) = "8n-" Тогда
		лТовар = Справочники.ДатаМобайл_НовыеТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4))).ПолучитьОбъект();
	Иначе	
		лТовар = Справочники.ДатаМобайл_НовыеТовары.СоздатьЭлемент();
	КонецЕсли;	
	
	лТовар.Пользователь = UserName;
	лТовар.Наименование = Лев(Art.DMArtName,Метаданные.Справочники.ДатаМобайл_НовыеТовары.ДлинаНаименования);
	
	Попытка
		лТовар.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		лТовар.ОбменДанными.Получатели.Заполнить();
		лТовар.ОбменДанными.Получатели.Удалить(УзелПО);
		лТовар.Записать();
	Исключение
		ВызватьИсключениеВС("UpdateArt. Не удалось обновить товар. " + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Art.DMArtID = "8n-" + Строка(лТовар.Ссылка.УникальныйИдентификатор());
	
	Возврат Истина;
	
КонецФункции
Процедура УстановитьЗначениеИЗСтроки(НоменклатураОбъект, ИмяРеквизита, НовоеЗначениеРеквизитаСтрокой, ТекстОшибки = "")
	
	Если ИмяРеквизита = "Код" Тогда
		ТипРеквизита = Новый ОписаниеТипов("Строка");
	Иначе	
		ТипРеквизита = Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита].Тип;	
	КонецЕсли; 
	
	Если ТипРеквизита = Новый ОписаниеТипов("Строка") ИЛИ ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
		НоменклатураОбъект[ИмяРеквизита] = НовоеЗначениеРеквизитаСтрокой;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("Булево") ИЛИ ТипРеквизита.СодержитТип(Тип("Булево")) Тогда
		Если НовоеЗначениеРеквизитаСтрокой = "Да" ИЛИ НовоеЗначениеРеквизитаСтрокой = "Нет" Тогда
			НоменклатураОбъект[ИмяРеквизита] = Булево(НовоеЗначениеРеквизитаСтрокой);
		Иначе
			ТекстОшибки = ТекстОшибки + "UpdateArt. Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - возможны только строки Да Или Нет" + Символы.ПС;
		КонецЕсли;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("Число") ИЛИ ТипРеквизита.СодержитТип(Тип("Число")) Тогда
		Попытка
			НоменклатураОбъект[ИмяРеквизита] = Число(СтрЗаменить(СтрЗаменить(НовоеЗначениеРеквизитаСтрокой, " ", ""), " ", ""));
		Исключение
			ТекстОшибки = ТекстОшибки + "UpdateArt. Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - неизвестный формат числа" + Символы.ПС;
		КонецПопытки;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("Дата") ИЛИ ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
		Попытка
			НоменклатураОбъект[ИмяРеквизита] = Дата(НовоеЗначениеРеквизитаСтрокой);
		Исключение
			ТекстОшибки = ТекстОшибки + "UpdateArt. Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - неизвестный формат даты" + Символы.ПС;
		КонецПопытки;
	Иначе
		
		// Типы Справочник И перечисление, варианты с составнымы типами Или определяемым типом не рассматриваем
		МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(НоменклатураОбъект[ИмяРеквизита]));
		Если МетаданныеРеквизита <> Неопределено Тогда
			
			ПолноеИмя = МетаданныеРеквизита.ПолноеИмя();
			Если Лев(ПолноеИмя, 13) = "Перечисление." Тогда
				Попытка
					НоменклатураОбъект[ИмяРеквизита] = ПредопределенноеЗначение(ПолноеИмя + "." + НовоеЗначениеРеквизитаСтрокой);
				Исключение
					ТекстОшибки = ТекстОшибки + "UpdateArt. Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - неизвестное значение перечисления" + Символы.ПС;
				КонецПопытки;
			ИначеЕсли Лев(ПолноеИмя, 11) = "Справочник." Тогда
				
				ЕстьОшибка = Ложь;
				Попытка
					ИмяСправочника = Прав(ПолноеИмя, СтрДлина(ПолноеИмя) - 11);
					Ссылка = Справочники[ИмяСправочника].НайтиПоНаименованию(НовоеЗначениеРеквизитаСтрокой, Истина);
					Если ЗначениеЗаполнено(Ссылка) Тогда
						НоменклатураОбъект[ИмяРеквизита] = Ссылка;
					Иначе
						ЕстьОшибка = Истина;
					КонецЕсли;
				Исключение
					ЕстьОшибка = Истина;
				КонецПопытки;
				
				Если ЕстьОшибка Тогда
					ТекстОшибки = ТекстОшибки + "UpdateArt. Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - справочник не найден" + Символы.ПС;
				КонецЕсли;
				
			Иначе
				ТекстОшибки = ТекстОшибки + "UpdateArt. Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - неизвестный тип реквизита" + Символы.ПС;
			КонецЕсли;
		Иначе
			ТекстОшибки = ТекстОшибки + "UpdateArt. Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - неизвестный тип реквизита" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Функция СсылкаСуществует(ЛюбаяСсылка)
    
    ТекстЗапроса = "
        |ВЫБРАТЬ
        |    Ссылка
        |ИЗ
        |    [ИмяТаблицы]
        |ГДЕ
        |    Ссылка = &Ссылка
        |";
    
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицыПоСсылке(ЛюбаяСсылка));
    
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
    
    УстановитьПривилегированныйРежим(Истина);
    
    Возврат НЕ Запрос.Выполнить().Пустой();
    
КонецФункции
Функция ИмяТаблицыПоСсылке(Ссылка)
    
    Возврат Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
    
КонецФункции
Функция UpdateBarcode(SN, UserName, ArtID, Barcode)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		NewTSD(SN, UserName);  
	КонецЕсли;
	
	СХарактеристикой = Ложь;
	ЭтоНовыйТовар = Ложь;
	Если Лев(ArtID, 3)= "8U-" Тогда
		
		лТовар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4, 36)));
		ИДХК = Сред(ArtID, 40, 36);
		
		Если ИДХК<>"00000000-0000-0000-0000-000000000000" Тогда
			лХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
			СХарактеристикой = Истина;
		Иначе
			лХарактеристикаНоменклатуры =Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли Лев(ArtID, 3)= "8n-" Тогда
		лТовар = Справочники.ДатаМобайл_НовыеТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4)));
		ЭтоНовыйТовар = Истина;
		лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
	ШК = Barcode.DMBarcode;
	Коэффициент = Barcode.DMMeasureK;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	ШтрихкодыНоменклатуры.Штрихкод,
						|	ШтрихкодыНоменклатуры.Номенклатура,
						|	ШтрихкодыНоменклатуры.Характеристика
	                    |ИЗ
	                    |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	                    |ГДЕ
	                    |	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("ШтрихКод",ШК);

	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда // уже есть в списке шк
		Если Рез.Номенклатура = лТовар И Рез.Характеристика = лХарактеристикаНоменклатуры Тогда  
			Возврат Истина;
		Иначе
			ВызватьИсключениеВС("UpdateBarcode. Не удалось добавить штрихкод. В 1С он принадлежит другому товару: " + Рез.Номенклатура + " " + Рез.Характеристика);
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	
	Если УзелПО.ЗаписьВРегистр И НЕ ЭтоНовыйТовар Тогда
		Если лТовар.ИспользоватьУпаковки Тогда
			
			ЗапросУпаковок = Новый Запрос;
			ЗапросУпаковок.УстановитьПараметр("Номенклатура", лТовар);
			ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокНоменклатура", лТовар.НаборУпаковок);
			ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокВидНоменклатуры", лТовар.ВидНоменклатуры.НаборУпаковок);
			ЗапросУпаковок.УстановитьПараметр("Коэффициент", Коэффициент);	
			ЗапросУпаковок.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	УпаковкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
			|ГДЕ
			|	УпаковкиНоменклатуры.Владелец = &Номенклатура
			|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
			|ОБЪЕДИНИТЬ
			|ВЫБРАТЬ
			|	УпаковкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
			|ГДЕ
			|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокНоменклатура
			|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
			|ОБЪЕДИНИТЬ
			|ВЫБРАТЬ
			|	УпаковкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
			|ГДЕ
			|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокВидНоменклатуры
			|	И УпаковкиНоменклатуры.Числитель = &Коэффициент";
			
			ВыборкаУпаковок = ЗапросУпаковок.Выполнить().Выбрать();                            
			лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			
			Пока ВыборкаУпаковок.Следующий() Цикл
				лУпак = ВыборкаУпаковок.ССылка;
				Прервать;
			КонецЦикла;
			
			Если  лУпак.Пустая() И Коэффициент<>1 Тогда			
				ВызватьИсключениеВС("UpdateBarcode. Не удалось добавить штрихкод. В 1С для товара не найдена упаковка с коэффициентом " + Коэффициент);
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;						   
		
		ЗаписьШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		ЗаписьШК.Номенклатура = лТовар;
		
		Если СокрЛП(лУпак.код) = "" Тогда
			ЗаписьШК.Упаковка = лУпак;
		КонецЕсли;
		
		ЗаписьШК.Штрихкод = ШК;	
		
		Если СХарактеристикой Тогда
			ЗаписьШК.Характеристика = лХарактеристикаНоменклатуры; 
		КонецЕсли;
		
		Попытка	
			ЗаписьШК.Записать(Истина);	
		Исключение
			ВызватьИсключениеВС("UpdateBarcode. Не удалось добавить штрихкод. " + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	
	Иначе
		лНЗ = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
		лНЗ.Отбор.ШтрихКод.Установить(ШК);
		лШК = лНЗ.Добавить();
		
		лШК.Номенклатура   = лТовар;
		лШК.Характеристика = лХарактеристикаНоменклатуры;
		лШК.ШтрихКод       = ШК;
		лШК.Пользователь   = UserName;
		лШК.Наименование   = Barcode.DMMeasureName;
		лШК.Коэффициент    = Barcode.DMMeasureK;
		Попытка
			лНЗ.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			лНЗ.ОбменДанными.Получатели.Заполнить();
			лНЗ.ОбменДанными.Получатели.Удалить(УзелПО);
			лНЗ.Записать(Истина);
		Исключение
			ВызватьИсключениеВС("UpdateBarcode. Не удалось добавить штрихкод. " + ОписаниеОшибки());
			Возврат Ложь;
		Конецпопытки;	
	КонецЕсли;
	
	Возврат Истина;
	
	
КонецФункции
Функция GenerateNewBC(SN, UserName, ArtID, UnitID, P1, P2, BarcodeQuant)
	
	ОбъектШК = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMBarcode"));

	 УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		NewTSD(SN, UserName); 
	КонецЕсли;
	
	СХарактеристикой = Ложь;	
	Если Лев(ArtID, 3)= "8U-" Тогда
		Если УзелПО.ЗаписьВРегистр Тогда
			лТовар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID, 4, 36)));
			ИДХК = Сред(ArtID, 40, 36);
			Если ИДХК <> "00000000-0000-0000-0000-000000000000" Тогда
				лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
				СХарактеристикой = Истина;
			КонецЕсли;	
		Иначе 
			ВызватьИсключениеВС("GenerateNewBC. Не разрешена запись штрихкодов сразу в регистр в настройках ТСД в АРМ 1С. ");
			Возврат ОбъектШК;
		КонецЕсли;	
	Иначе 
		ВызватьИсключениеВС("GenerateNewBC. Генерация возможна только на товары Из справочника 1С, новые товары необходимо сначала записать в 1С. ");
		Возврат ОбъектШК;
	КонецЕсли;	
	
	Если UnitID = "шт" Тогда
		ЕдиницаИзмерения = лТовар.ЕдиницаИзмерения;
	Иначе
		Попытка
			ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(UnitID));
		Исключение
			ЕдиницаИзмерения = лТовар.ЕдиницаИзмерения;
		КонецПопытки;	
	КонецЕсли;
	
	Если лТовар.ИспользоватьУпаковки Тогда
		
		ЗапросУпаковок = Новый Запрос;
		ЗапросУпаковок.УстановитьПараметр("Номенклатура", лТовар);
		ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокНоменклатура", лТовар.НаборУпаковок);
		ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокВидНоменклатуры", лТовар.ВидНоменклатуры.НаборУпаковок);
		//ЗапросУпаковок.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ЗапросУпаковок.УстановитьПараметр("Коэффициент", BarcodeQuant);	
		ЗапросУпаковок.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	УпаковкиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Владелец = &Номенклатура
		|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокНоменклатура
		|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокВидНоменклатуры
		|	И УпаковкиНоменклатуры.Числитель = &Коэффициент";
		
		ВыборкаУпаковок = ЗапросУпаковок.Выполнить().Выбрать();                            
		лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
		Пока ВыборкаУпаковок.Следующий() Цикл
			лУпак = ВыборкаУпаковок.ССылка;
			Прервать;
		КонецЦикла;
		
		Если  лУпак.Пустая() Тогда
			ВызватьИсключениеВС("GenerateNewBC. Не найдена упаковка. ");
			Возврат ОбъектШК;
		КонецЕсли;
		
	Иначе
		лУпак = лТовар.ЕдиницаИзмерения;
	КонецЕсли;						   
						   
	ЗаписьШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
	ЗаписьШК.Номенклатура = лТовар;
	ЗаписьШК.Упаковка = лУпак;
	ЗаписьШК.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13();	
	Если СХарактеристикой Тогда
		ЗаписьШК.Характеристика = лХарактеристикаНоменклатуры; 
	КонецЕсли;
	
	Попытка	
		ЗаписьШК.Записать(Истина);
		ОбъектШК.DMBarcode = ЧистаяСтрока(ЗаписьШК.Штрихкод);
		ОбъектШК.DMMeasureName = ЧистаяСтрока(лУпак.Наименование);
		Попытка
			КФ = Строка(Формат(лУпак.Числитель, "ЧН=0; ЧГ=0"));
		Исключение
			КФ = 1;
		КонецпопыткИ;
		КФ = СтрЗаменить(КФ, ",",".");
		ОбъектШК.DMMeasureK=ЧистаяСтрока(КФ);
		ОбъектШК.DMIsMark = Ложь;		
	Исключение
		ВызватьИсключениеВС("GenerateNewBC. Ошибка записи штрихкода " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ОбъектШК;

КонецФункции
Функция OnArtScanSelect(SN,UserName,ШК,DocOutID,Ячейка,Params)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtQueryInfo"));
	УзелПО = НайтиУзел(SN);
	
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		СтрокаЛогирования = Новый Структура;
		УникальностьЛогирования = Новый УникальныйИдентификатор;
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("OnArtScanSelect. Начали", УзелПО, , СтрокаЛогирования, UserName, УникальностьЛогирования);
	КонецЕсли;	

	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
	Исключение	
		ВызватьИсключениеВС("OnArtScan. Не нашли документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
		
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок, "ТСД, ДатаНачалаСбора, ДатаЗавершенияСбора, Шаблон, ИсходныйДокумент, Склад");

	ДокТСД 				   = ЗначенияРеквизитовСсылкаНаДок.ТСД;
	ДокДатаНачалаСбора 	   = ЗначенияРеквизитовСсылкаНаДок.ДатаНачалаСбора;
	ДокДатаЗавершенияСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаЗавершенияСбора;
	Шаблон 				   = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	ИсходныйДокумент 	   = ЗначенияРеквизитовСсылкаНаДок.ИсходныйДокумент;
	Склад  				   = ЗначенияРеквизитовСсылкаНаДок.Склад;
	
	Если Шаблон = Неопределено Тогда
		ВызватьИсключениеВС("OnArtScan. Не нашли запись документа. ");
		Возврат ОбъектСписка;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокТСД) Тогда
		Если ДокТСД <> УзелПО Тогда
			ВызватьИсключениеВС("OnArtScan. Чужой документ. ");
			Возврат ОбъектСписка;
		КонецЕсли;	
	КонецЕсли;
		
	Если ДокДатаЗавершенияСбора <> Дата(1, 1, 1) Тогда
		ВызватьИсключениеВС("OnArtScan. Закрытый документ. ");
		Возврат ОбъектСписка;
	КонецЕсли;			
	
	ЗначенияРеквизитовУзелПО = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелПО, "ТипЦен, ДобавлятьАртикулВНаименование, ПростойФорматВесовыхШтрихкодов");
	ТипЦен = ЗначенияРеквизитовУзелПО.ТипЦен;
	ВключатьАртикул = ЗначенияРеквизитовУзелПО.ДобавлятьАртикулВНаименование;
	ПростойФорматВесовыхШтрихкодов = ЗначенияРеквизитовУзелПО.ПростойФорматВесовыхШтрихкодов;

	Если СтрДлина(ШК) = 5 И НЕ ПростойФорматВесовыхШтрихкодов Тогда
		ВесовойШК = "2_" + ШК + "00000_";			
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Если Шаблон.ЕГАИС  Тогда
		OnArtScan_Select_EGAIS(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, "Select");	
	Иначе
		Попытка
			лЕстьЯчейка = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Ячейка") <> Неопределено;
		Исключение
			лЕстьЯчейка = Ложь;
		КонецПопытки;

		Если Шаблон.ИспользованиеЯчеекПодбор = 0 ИЛИ Шаблон.ВыгрузкаЯчеекПодбор = 1 ИЛИ НЕ лЕстьЯчейка Тогда
			OnArtScan_Select_Insert_Casual(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, "Select");
			Запрос.УстановитьПараметр("Артикул", ?(УзелПО.ИспользоватьАртикулКакШтрихкодТовара, ШК, Неопределено));
		Иначе
			OnArtScan_Select_Insert_Cells(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, "Select", Ячейка)
		КонецЕсли;
	КонецЕсли;
			
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
	Запрос.УстановитьПараметр("ИсходноеЗадание", СсылкаНаДок);          	
	Запрос.УстановитьПараметр("ШтрихКод", ШК);
	Запрос.УстановитьПараметр("НесколькоДокументов", СсылкаНаДок.Шаблон.РаспределениеТоваров = 1);
	Запрос.УстановитьПараметр("Документы", СсылкаНаДок.Задания.ВыгрузитьКолонку("Задание"));
	Запрос.УстановитьПараметр("ВесовойШтрихКод", ВесовойШК);
	Запрос.УстановитьПараметр("ВсеУпаковки", Шаблон.ВсеШтрихкодыТовара);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");	
	
	Если ЗначениеЗаполнено(СсылкаНаДок.СкладПолучатель) Тогда
		
		СписокСкладов.Очистить();		
		СписокСкладов.Добавить(СсылкаНаДок.СкладПолучатель);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(СсылкаНаДок.Склад) Тогда
		
		СписокСкладов.Очистить();
		СписокСкладов.Добавить(СсылкаНаДок.Склад);
			
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Склады", СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады" ,СписокСкладов.Количество() = 0);
	
	СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения", СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", СписокПомещений.Количество() = 0);

	Запрос.УстановитьПараметр("ВключатьАртикул", ВключатьАртикул);
		
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДока Из Рез Цикл 
		
		
		Итог = (СтрокаДока.ВНаличии - СтрокаДока.ВРезерве - СтрокаДока.ВРезервеТСД);
		Итог = Формат(Итог, ПолучитьФорматнуюСтрокуЧисла());
		СтрокаДока.Коэффициент = ?(СтрокаДока.Коэффициент = 0, 1, СтрокаДока.Коэффициент);
		
	   // Табачные изделия, штрихкод товара на все характеристики
		ЕстьХарактеристикиБезШтрихкодов = Ложь;
		ТипПродукции = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Если НЕ СтрокаДока.ЭтоНовыйТовар И УзелПО.ВыводитьВсеХарактеристикиПоШтрихкоду Тогда
			
				ЗапросВсехХарактеристик = Новый Запрос();				
				ЗапросВсехХарактеристик.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ХарактеристикиНоменклатуры.Ссылка,
				|	ХарактеристикиНоменклатуры.Наименование,
				|	ХарактеристикиНоменклатуры.Владелец
				|ИЗ
				|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				|ГДЕ
				|	ХарактеристикиНоменклатуры.Владелец = &Владелец
				|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
				
				Если СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
					ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.Ссылка);
				ИначеЕсли СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
					ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.ВидНоменклатуры);
				ИначеЕсли СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
					ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.ВладелецХарактеристик);
				Иначе
					ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", Неопределено);
				КонецЕсли;
				ЗапросВсехХарактеристик.УстановитьПараметр("ИсходноеЗадание", СсылкаНаДок);
				ЗапросВсехХарактеристик.УстановитьПараметр("Номенклатура", СсылкаНаДок); 
				ЗапросВсехХарактеристик.УстановитьПараметр("Склады", СписокСкладов);
				ЗапросВсехХарактеристик.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
				
				ВыборкаХарактеристик = ЗапросВсехХарактеристик.Выполнить().Выбрать();
				Пока ВыборкаХарактеристик.Следующий() Цикл	
					ЕстьХарактеристикиБезШтрихкодов = Истина;
					
					ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtQueryItem"));
					ОбъектТовара.DMArtName = ЧистаяСтрока(СокрП(СтрокаДока.Номенклатура.Наименование) + " " + СокрП(ВыборкаХарактеристик.Наименование));			
					ОбъектТовара.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(ВыборкаХарактеристик.Ссылка.УникальныйИдентификатор());
					ОбъектТовара.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
					Попытка ОбъектТовара.DMMeasureType = ?(СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки;
					ОбъектТовара.DMArtPrice = СтрокаДока.Цена;
				
					Атрибуты = ПолучитьАтрибуты(УзелПО);			
					Для сч = 1 По 10 Цикл
						Попытка 
							ИмяАтрибута =  Атрибуты["ИмяАтрибута" + сч];
							Если СтрокаДока.ЭтоНовыйТовар Тогда
								ОбъектТовара["DMArtAttr" + сч] = "";
							ИначеЕсли ИмяАтрибута = "!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
								// ОбъектТовара["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.АдресХранения);
								ОбъектТовара["DMArtAttr" + сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО, СтрокаДока.Номенклатура,ИмяАтрибута);
							ИначеЕсли ИмяАтрибута = "!!! Характеристики !!!" Тогда
								ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(ВыборкаХарактеристик.Ссылка.Наименование);
							ИначеЕсли ЛЕВ(ИмяАтрибута, 3) = "ДР_" Тогда 
								Попытка ОбъектТовара["DMArtAttr" + сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.Номенклатура, ИмяАтрибута); Исключение КонецПопытки;	
							ИначеЕсли ИмяАтрибута <> "" Тогда
								ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);							
							Иначе 
								ОбъектТовара["DMArtAttr" + сч] = "";
							КонецЕсли;
						Исключение
							ОбъектТовара["DMArtAttr" + сч] = "";
						КонецПопытки;
						
					КонецЦикла;

					Попытка ОбъектТовара.DMMeasureName = СтрокаДока.НаименованиеУпаковки; Исключение ОбъектТовара.DMMeasureName = "шт."; КонецПопытки;

					Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
						ОбъектТовара.DMMeasureK = 1;
					Иначе	
						ОбъектТовара.DMMeasureK = СтрокаДока.Коэффициент;
					КонецЕсли;

					ОбъектТовара.DMTaskQnt = (СтрокаДока.ВЗадании);					
					
					ЭтоУслуга = Ложь;
					Попытка 
						Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
							ЭтоУслуга = Истина;
						КонецЕсли;
					Исключение
					КонецПопытки;

					Если УзелПО.НеОтображатьОстатки Тогда
						ОбъектТовара.DMLimitQnt = 0;
					ИначеЕсли ЭтоУслуга Тогда
						ОбъектТовара.DMLimitQnt = 999;	
					Иначе
						// ОбъектТовара.DMLimitQnt=Итог;
						Если ЗначениеЗаполнено(Ячейка) Тогда
							ТекущаяЯчейкаСсылка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Ячейка,СсылкаНаДок);
							ОбъектТовара.DMLimitQnt = ПолучитьОстаткиПоЯчейке(УзелПО, Неопределено, СтрокаДока.Номенклатура, ВыборкаХарактеристик.Ссылка, ТекущаяЯчейкаСсылка);
						Иначе
							ОбъектТовара.DMLimitQnt = ПолучитьОстаткиПоТовару(УзелПО, Неопределено, СтрокаДока.Номенклатура, ВыборкаХарактеристик.Ссылка);
						КонецЕсли; 	
					КонецЕсли;
					
					Попытка	
						DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры, Склад);
					Исключение
						DMUseSN = Ложь;
					Конецпопытки;
					ОбъектТовара.DMUseSN = DMUseSN;
					ОбъектТовара.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.Номенклатура,DMUseSN,Шаблон, УзелПО);
					
					ОбъектТовара.DMBarcodeUseSN = 2;
					
					Если СокрЛП(ЧистаяСтрока(ОбъектТовара.DMArtName)) = "" Или СокрЛП(ЧистаяСтрока(ОбъектТовара.DMArtID)) = "" Тогда
						Продолжить;
					КонецЕсли;

					ОбъектСписка.DMArtQueryItem.Добавить(ОбъектТовара);		
				КонецЦикла;		
		КонецЕсли;
		
		// Остальные товары 
		Если НЕ ЕстьХарактеристикиБезШтрихкодов Тогда

		ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtQueryItem"));
		ЭтоАлкоголь = Ложь;
		Попытка 
			Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда
				Если СтрокаДока.Номенклатура.АлкогольнаяПродукция Тогда // Проверим наличие сопоставленной номенклатуры И организации
					КодЕГАИС = "";
					ЭтоАлкоголь = Истина;
					Товар = СтрокаДока.НаименованиеТовара;
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
					|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
					|ИЗ
					|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
					|ГДЕ
					|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура";
					Запрос.УстановитьПараметр("Номенклатура", СтрокаДока.Номенклатура);
					ТаблицаСоответствий = Запрос.Выполнить().Выбрать();
					Если ТаблицаСоответствий.Количество() = 1 Тогда
						Пока ТаблицаСоответствий.Следующий() Цикл
							Товар = ТаблицаСоответствий.АлкогольнаяПродукция.Наименование;
							КодЕГАИС = ТаблицаСоответствий.АлкогольнаяПродукция.Код; 
						Прервать;
						КонецЦикла;		
					КонецЕсли;
					ОбъектТовара.DMArtName = ЧистаяСтрока(Товар);					
				Иначе
					ОбъектТовара.DMArtName = ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));
				КонецЕсли;
			Иначе
				ОбъектТовара.DMArtName = ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));
			КонецЕсли;
		Исключение
			ОбъектТовара.DMArtName = ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));
		КонецПопытки;
		
		ОбъектТовара.DMArtID = ?(СтрокаДока.ЭтоНовыйТовар, "8n-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()), "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор())+СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор()));
		ОбъектТовара.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Попытка ОбъектТовара.DMMeasureType = ?(СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки;
		ОбъектТовара.DMArtPrice = СтрокаДока.Цена;
		
		Атрибуты = ПолучитьАтрибуты(УзелПО);			
		Для сч = 1 По 10 Цикл				
			ИмяАтрибута =  Атрибуты["ИмяАтрибута" + сч];
			Если СтрокаДока.ЭтоНовыйТовар Тогда
				ОбъектТовара["DMArtAttr" + сч] = "";
			ИначеЕсли ИмяАтрибута = "!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
				//ОбъектТовара["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.АдресХранения);
				ОбъектТовара["DMArtAttr" + сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО,СтрокаДока.Номенклатура,ИмяАтрибута);
			ИначеЕсли ИмяАтрибута ="!!! Характеристики !!!" Тогда
				ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(СтрокаДока.Характеристика.Наименование);
			ИначеЕсли ЛЕВ(ИмяАтрибута,3) = "ДР_" Тогда 
				Попытка ОбъектТовара["DMArtAttr"+сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.Номенклатура,ИмяАтрибута); Исключение КонецПопытки;
			ИначеЕсли ЭтоАлкоголь И (сч = 6 ИЛИ сч = 9) Тогда
				Если сч = 6 Тогда  
					ОбъектТовара["DMArtAttr"+сч] = Строка(КодЕГАИС);
				ИначеЕсли сч = 9 И ИмяАтрибута <> "" Тогда
					Попытка
						ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута].Код + " " + СтрокаДока.Номенклатура[ИмяАтрибута].Наименование);
					Исключение
						ОбъектТовара["DMArtAttr" + сч] = "";
					КонецПопытки;
				Иначе 
					ОбъектТовара["DMArtAttr"+сч] = "";
				КонецЕсли;		
			ИначеЕсли ИмяАтрибута <> "" Тогда
				ОбъектТовара["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);							
			Иначе 
				ОбъектТовара["DMArtAttr"+сч] = "";
			КонецЕсли;	
		КонецЦикла;

		Попытка ОбъектТовара.DMMeasureName = СтрокаДока.НаименованиеУпаковки; Исключение ОбъектТовара.DMMeasureName = "шт."; КонецПопытки;
		
		Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
			ОбъектТовара.DMMeasureK = 1;
		Иначе	
			ОбъектТовара.DMMeasureK = СтрокаДока.Коэффициент;
		КонецЕсли;

		ОбъектТовара.DMTaskQnt = СтрокаДока.ВЗадании;

		ЭтоУслуга = Ложь;
		Попытка 
			Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЭтоУслуга = Истина;
	       	КонецЕсли;
		Исключение
		КонецПопытки;	
			
		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектТовара.DMLimitQnt = 0;
		ИначеЕсли ЭтоУслуга Тогда
			ОбъектТовара.DMLimitQnt = 999;
		Иначе	
			ОбъектТовара.DMLimitQnt = Итог;	
		КонецЕсли;
				
		
		Попытка	
			DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры, Склад);
		Исключение
			DMUseSN = Ложь;
		Конецпопытки;		
		ОбъектТовара.DMUseSN = DMUseSN;
		ОбъектТовара.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.Номенклатура,DMUseSN,Шаблон, УзелПО); 

		ОбъектТовара.DMBarcodeUseSN = 2;
		
		Если СокрЛП(ЧистаяСтрока(ОбъектТовара.DMArtName)) = "" ИЛИ СокрЛП(ЧистаяСтрока(ОбъектТовара.DMArtID)) = "" Тогда
			Продолжить;
		КонецЕсли;

		ОбъектСписка.DMArtQueryItem.Добавить(ОбъектТовара);
		КонецЕсли;
	КонецЦикла;

	
	//ЗАПИСЬ	
	Если НЕ Шаблон.ГрупповаяРабота Тогда
		//ОБЫЧНАЯ ЛОГИКА
		Если НЕ ЗначениеЗаполнено(ДокДатаНачалаСбора) ИЛИ НЕ ЗначениеЗаполнено(ДокТСД) Тогда
			
			Попытка
				Объект = СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора = ТекущаяДата();
				Объект.ТСД = УзелПО;
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
				
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		//ГРУППОВОЙ ДОКУМЕНТ
		
		ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаНачалаСбора");	
		Если НЕ ЗначениеЗаполнено(ДатаСбораПоТСД) Тогда	
			ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(SN, СсылкаНаДок, UserName);		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДокДатаНачалаСбора) Тогда
			Попытка
				Объект = СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора = ТекущаяДата();
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
			Исключение
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;	
	
	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("OnArtScanSelect.Закончили", УзелПО, , СтрокаЛогирования, UserName, УникальностьЛогирования);
	КонецЕсли;
	
	Возврат ОбъектСписка;
КонецФункции
Функция OnArtScanInsert(SN,UserName,ШК, DocOutID,Ячейка,Params)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtQueryInfo"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
	Исключение	
		ВызватьИсключениеВС("OnArtScan. Не нашли документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок, "ТСД, ДатаНачалаСбора, ДатаЗавершенияСбора, Шаблон, ИсходныйДокумент, Склад");
	
	ДокТСД = ЗначенияРеквизитовСсылкаНаДок.ТСД;
	ДокДатаНачалаСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаНачалаСбора;
	ДокДатаЗавершенияСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаЗавершенияСбора;
	Шаблон = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	ИсходныйДокумент = ЗначенияРеквизитовСсылкаНаДок.ИсходныйДокумент;
	Склад  = ЗначенияРеквизитовСсылкаНаДок.Склад;

	Если Шаблон = Неопределено Тогда
		ВызватьИсключениеВС("OnArtScan. Не нашли запись документа. ");
		Возврат ОбъектСписка;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокТСД) Тогда
		Если ДокТСД <> УзелПО Тогда
			ВызватьИсключениеВС("OnArtScan. Чужой документ. ");
			Возврат ОбъектСписка;
		КонецЕсли;	
	КонецЕсли;
		
	Попытка
		ДокДатаЗавершенияСбора = СсылкаНаДок.ДатаЗавершенияСбора;
	Исключение	
		ДокДатаЗавершенияСбора = Дата(1, 1, 1);
	КонецПопытки;
	
	Если ДокДатаЗавершенияСбора <> Дата(1, 1, 1) Тогда
		ВызватьИсключениеВС("OnArtScan. Закрытый документ. ");
		Возврат ОбъектСписка;
	КонецЕсли;					
	
	ТипЦен = УзелПО.ТипЦен;
	ВключатьАртикул = УзелПО.ДобавлятьАртикулВНаименование;
	ВесовойШК = ШК;
	Если СтрДлина(ШК) = 5 И НЕ УзелПО.ПростойФорматВесовыхШтрихкодов Тогда	
		ВесовойШК = "2_" + ШК + "00000_";			
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Попытка
		лЕстьЯчейка = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПриемка].Реквизиты.Найти("Ячейка") <> Неопределено;
	Исключение
		лЕстьЯчейка = Ложь;
	КонецПопытки;
	
	Если Шаблон.ИспользованиеЯчеекПриемка = 0 ИЛИ Шаблон.ВыгрузкаЯчеекПриемка = 1 ИЛИ НЕ лЕстьЯчейка Тогда
		OnArtScan_Select_Insert_Casual(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, "Insert");
		Запрос.УстановитьПараметр("Артикул", ?(УзелПО.ИспользоватьАртикулКакШтрихкодТовара, ШК, Неопределено));
	Иначе
		OnArtScan_Select_Insert_Cells(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, "Insert", Ячейка);
	КонецЕсли;
	
	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("ИсходныйДокумент", 	 ИсходныйДокумент);
	Запрос.УстановитьПараметр("ИсходноеЗадание", 	 СсылкаНаДок);
	Запрос.УстановитьПараметр("ШтрихКод", 			 ШК);
	Запрос.УстановитьПараметр("НесколькоДокументов", СсылкаНаДок.Шаблон.РаспределениеТоваров = 1);
	Запрос.УстановитьПараметр("Документы", 			 СсылкаНаДок.Задания.ВыгрузитьКолонку("Задание"));
	Запрос.УстановитьПараметр("ВесовойШтрихКод", 	 ВесовойШК);
	Запрос.УстановитьПараметр("ВсеУпаковки", 		 Шаблон.ВсеШтрихкодыТовара);
	Запрос.УстановитьПараметр("Склады",			     СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады",			 СписокСкладов.Количество() = 0);
	Запрос.УстановитьПараметр("Помещения",			 СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", 		 СписокПомещений.Количество() = 0);
	Запрос.УстановитьПараметр("ВключатьАртикул",     ВключатьАртикул);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДока Из Рез Цикл
		
		Итог = (СтрокаДока.ВНаличии - СтрокаДока.ВРезерве - СтрокаДока.ВРезервеТСД);
		Итог = Формат(Итог, ПолучитьФорматнуюСтрокуЧисла());
		СтрокаДока.Коэффициент = ?(СтрокаДока.Коэффициент = 0,1,СтрокаДока.Коэффициент);
		
	   //Табачные изделия, штрихкод товара на все характеристики
		ЕстьХарактеристикиБезШтрихкодов = Ложь;
		ТипПродукции = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Если НЕ СтрокаДока.ЭтоНовыйТовар И УзелПО.ВыводитьВсеХарактеристикиПоШтрихкоду Тогда
			
				ЗапросВсехХарактеристик = Новый Запрос();				
				ЗапросВсехХарактеристик.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ХарактеристикиНоменклатуры.Ссылка,
				|	ХарактеристикиНоменклатуры.Наименование,
				|	ХарактеристикиНоменклатуры.Владелец
				|ИЗ
				|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				|ГДЕ
				|	ХарактеристикиНоменклатуры.Владелец = &Владелец
				|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
				
				Если СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
					ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.Ссылка);
				ИначеЕсли СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
					ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.ВидНоменклатуры);
				ИначеЕсли СтрокаДока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
					ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", СтрокаДока.Номенклатура.ВладелецХарактеристик);
				Иначе
					ЗапросВсехХарактеристик.УстановитьПараметр("Владелец", Неопределено);
				КонецЕсли;
				
				ЗапросВсехХарактеристик.УстановитьПараметр("ИсходноеЗадание",СсылкаНаДок);
				ЗапросВсехХарактеристик.УстановитьПараметр("Номенклатура",СсылкаНаДок); 
				ЗапросВсехХарактеристик.УстановитьПараметр("Склады",СписокСкладов);
				ЗапросВсехХарактеристик.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
				
				ВыборкаХарактеристик = ЗапросВсехХарактеристик.Выполнить().Выбрать();
				Пока ВыборкаХарактеристик.Следующий() Цикл	
					ЕстьХарактеристикиБезШтрихкодов = Истина;
					
					ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItem"));
					ОбъектТовара.DMArtName = ЧистаяСтрока(СокрП(СтрокаДока.Номенклатура.Наименование) + " " + СокрП(ВыборкаХарактеристик.Наименование));			
					ОбъектТовара.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(ВыборкаХарактеристик.Ссылка.УникальныйИдентификатор());
					ОбъектТовара.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
					Попытка ОбъектТовара.DMMeasureType = ?(СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки;
					ОбъектТовара.DMArtPrice = СтрокаДока.Цена;
										
					Атрибуты = ПолучитьАтрибуты(УзелПО);			
					Для сч = 1 По 10 Цикл
						Попытка 
							ИмяАтрибута =  Атрибуты["ИмяАтрибута" + сч];
							Если СтрокаДока.ЭтоНовыйТовар Тогда
								ОбъектТовара["DMArtAttr" + сч] = "";
							ИначеЕсли ИмяАтрибута = "!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
								//ОбъектТовара["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.АдресХранения);
								ОбъектТовара["DMArtAttr" + сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО,СтрокаДока.Номенклатура,ИмяАтрибута);
							ИначеЕсли ИмяАтрибута = "!!! Характеристики !!!" Тогда
								ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(ВыборкаХарактеристик.Ссылка.Наименование);
							ИначеЕсли ЛЕВ(ИмяАтрибута,3) = "ДР_" Тогда 
								Попытка ОбъектТовара["DMArtAttr" + сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.Номенклатура,ИмяАтрибута); Исключение КонецПопытки;	
							ИначеЕсли ИмяАтрибута <> "" Тогда
								ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);							
							Иначе 
								ОбъектТовара["DMArtAttr" + сч] = "";
							КонецЕсли;
						Исключение
							ОбъектТовара["DMArtAttr" + сч] = "";
						КонецПопытки;
						
					КонецЦикла;

					Попытка ОбъектТовара.DMMeasureName = СтрокаДока.НаименованиеУпаковки; Исключение ОбъектТовара.DMMeasureName = "шт."; КонецПопытки;

					Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
						ОбъектТовара.DMMeasureK = 1;
					Иначе	
						ОбъектТовара.DMMeasureK = СтрокаДока.Коэффициент;
					КонецЕсли;

					ОбъектТовара.DMTaskQnt = (СтрокаДока.ВЗадании);					
					
					ЭтоУслуга = Ложь;
					Попытка 
						Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
							ЭтоУслуга = Истина;
						КонецЕсли;
					Исключение
					КонецПопытки;

					Если УзелПО.НеОтображатьОстатки Тогда
						ОбъектТовара.DMLimitQnt = 0;
					ИначеЕсли ЭтоУслуга Тогда
						ОбъектТовара.DMLimitQnt = 999;	
					Иначе
						//ОбъектТовара.DMLimitQnt=Итог;
						Если ЗначениеЗаполнено(Ячейка) Тогда
							ТекущаяЯчейкаСсылка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Ячейка,СсылкаНаДок);
							ОбъектТовара.DMLimitQnt = ПолучитьОстаткиПоЯчейке(УзелПО, Неопределено, СтрокаДока.Номенклатура, ВыборкаХарактеристик.Ссылка, ТекущаяЯчейкаСсылка);
						Иначе
							ОбъектТовара.DMLimitQnt = ПолучитьОстаткиПоТовару(УзелПО, Неопределено, СтрокаДока.Номенклатура, ВыборкаХарактеристик.Ссылка);
						КонецЕсли; 
						
						//ОСТАТКИ ПРИ РАЗМЕЩЕНИИ ИЗ ЗОНЫ ПРИЕМКИ
						Попытка
							Если Шаблон.ВидДокумента = "ОтборРазмещениеТоваров" Тогда
								ЯчейкаЗоныПриемки = ИсходныйДокумент.ЗонаПриемки;
								ТекущийСклад = ИсходныйДокумент.Склад;
								Если ИсходныйДокумент.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение И НЕ ЯчейкаЗоныПриемки.Пустая() Тогда
									ОбъектТовара.DMLimitQnt =  ПолучитьОстаткиПоЯчейке(УзелПО, ТекущийСклад, СтрокаДока.Номенклатура, ВыборкаХарактеристик.Ссылка, ЯчейкаЗоныПриемки);
								КонецЕсли;
							КонецЕсли;
						Исключение 
						КонецПопытки;
								
					КонецЕсли;
					
					
					Попытка	
						DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры, Склад);
					Исключение
						DMUseSN = Ложь;
					Конецпопытки;		
					ОбъектТовара.DMUseSN = DMUseSN;
					ОбъектТовара.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.Номенклатура,DMUseSN,Шаблон, УзелПО); 

		
					ОбъектТовара.DMBarcodeUseSN = 2;
					
					Если СокрЛП(ЧистаяСтрока(ОбъектТовара.DMArtName)) = "" ИЛИ СокрЛП(ЧистаяСтрока(ОбъектТовара.DMArtID)) = "" Тогда
						Продолжить;
					КонецЕсли;
					
					ОбъектСписка.DMArtQueryItem.Добавить(ОбъектТовара);		
				КонецЦикла;		
		КонецЕсли;
	
	// Остальные товары 
		Если НЕ ЕстьХарактеристикиБезШтрихкодов Тогда

		ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru", "DMArtQueryItem"));
		ОбъектТовара.DMArtName = ЧистаяСтрока(СтрокаДока.НаименованиеТовара);
		ОбъектТовара.DMArtID = ?(СтрокаДока.ЭтоНовыйТовар,"8n-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()), "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор()));
		ОбъектТовара.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Попытка ОбъектТовара.DMMeasureType = ?(СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки;
		ОбъектТовара.DMArtPrice = СтрокаДока.Цена;
		
		Атрибуты = ПолучитьАтрибуты(УзелПО); //получаем структуру типа //"ИмяАтрибута5","ПроизводительИмпортер";			
		Для сч=1 По 10 Цикл				
			ИмяАтрибута =  Атрибуты["ИмяАтрибута" + сч];
			
			Попытка 
				Если СтрокаДока.ЭтоНовыйТовар Тогда
					ОбъектТовара["DMArtAttr" + сч] = "";
				ИначеЕсли ИмяАтрибута ="!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
					//ОбъектТовара["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.АдресХранения);
					ОбъектТовара["DMArtAttr" + сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО,СтрокаДока.Номенклатура,ИмяАтрибута);
				ИначеЕсли ИмяАтрибута ="!!! Характеристики !!!" Тогда
					ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(СтрокаДока.Характеристика.Наименование);
				ИначеЕсли ЛЕВ(ИмяАтрибута,3) = "ДР_" Тогда 
					Попытка ОбъектТовара["DMArtAttr"+сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.Номенклатура, ИмяАтрибута); Исключение КонецПопытки;	
				ИначеЕсли ИмяАтрибута <> "" Тогда
					ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);
				Иначе 
					ОбъектТовара["DMArtAttr" + сч] = "";
				КонецЕсли;
			Исключение
				ОбъектТовара["DMArtAttr" + сч] = "";
			КонецПопытки;
		КонецЦикла;
		
		Попытка ОбъектТовара.DMMeasureName = СтрокаДока.НаименованиеУпаковки; Исключение ОбъектТовара.DMMeasureName = "шт."; КонецПопытки;
		
		Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
			ОбъектТовара.DMMeasureK = 1;
		Иначе	
			ОбъектТовара.DMMeasureK = СтрокаДока.Коэффициент;
		КонецЕсли;

		ОбъектТовара.DMTaskQnt = (СтрокаДока.ВЗадании);
		
		ЭтоУслуга = Ложь;
		Попытка 
			Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЭтоУслуга = Истина;
	       	КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектТовара.DMLimitQnt = 0;
		ИначеЕсли ЭтоУслуга Тогда
			ОбъектТовара.DMLimitQnt = 999;	
		Иначе
			ОбъектТовара.DMLimitQnt = Итог;
			
			//ОСТАТКИ ПРИ РАЗМЕЩЕНИИ ИЗ ЗОНЫ ПРИЕМКИ
			Попытка
				Если Шаблон.ВидДокумента = "ОтборРазмещениеТоваров" Тогда
					ЯчейкаЗоныПриемки = ИсходныйДокумент.ЗонаПриемки;
					ТекущийСклад = ИсходныйДокумент.Склад;
					Если ИсходныйДокумент.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение И НЕ ЯчейкаЗоныПриемки.Пустая() Тогда
						ОбъектТовара.DMLimitQnt = ПолучитьОстаткиПоЯчейке(УзелПО, ТекущийСклад, СтрокаДока.Номенклатура, СтрокаДока.Характеристика, ЯчейкаЗоныПриемки);
					КонецЕсли;
				КонецЕсли;
			Исключение 
			КонецПопытки;	
		КонецЕсли;
		
		
		Попытка	
			DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры, Склад);
		Исключение
			DMUseSN = Ложь;
		Конецпопытки;	
		ОбъектТовара.DMUseSN = DMUseSN;
		ОбъектТовара.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.Номенклатура,DMUseSN,Шаблон, УзелПО);



		ОбъектТовара.DMBarcodeUseSN = 2;
		
		Если СокрЛП(ЧистаяСтрока(ОбъектТовара.DMArtName)) = "" ИЛИ СокрЛП(ЧистаяСтрока(ОбъектТовара.DMArtID)) = "" Тогда
			Продолжить;
		КонецЕсли;

		ОбъектСписка.DMArtQueryItem.Добавить(ОбъектТовара);
		КонецЕсли;

	КонецЦикла;
	
	//ЗАПИСЬ	
	Если НЕ Шаблон.ГрупповаяРабота Тогда
		//ОБЫЧНАЯ ЛОГИКА
		Если Не ЗначениеЗаполнено(ДокДатаНачалаСбора) ИЛИ НЕ ЗначениеЗаполнено(ДокТСД) Тогда
			
			Попытка
				Объект = СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора = ТекущаяДата();
				Объект.ТСД = УзелПО;
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
				
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		//ГРУППОВОЙ ДОКУМЕНТ
		
		ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаНачалаСбора");	
		Если Не ЗначениеЗаполнено(ДатаСбораПоТСД) Тогда	
			ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(SN, СсылкаНаДок, UserName);		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокДатаНачалаСбора) Тогда
			Попытка
				Объект = СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора = ТекущаяДата();
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
			Исключение
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;	

	Возврат ОбъектСписка;
КонецФункции
Функция OnArtEgaisScan(SN, UserName, ArtID, Barcode, PDFBarcode, DocOutID, Cell)
	
	ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtEgais"));
	
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);   
	КонецЕсли;
	
	Если НЕ (СтрДлина(PDFBarcode)=68 Или СтрДлина(PDFBarcode)=150) Тогда  // формат марки
		Возврат ОбъектТовара;
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение
		Возврат ОбъектТовара;
	КонецПопытки;			
	Шаблон = СсылкаНаДок.Шаблон;
	
	
	Если НЕ ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
		Если стрДлина(PDFBarcode) = 68 Тогда 
			Алкокод=КодНоменклатурыЕГАИСПоPDF417(PDFBarcode);
			
			ЗапросЕГАИС = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕГАИС_Номенклатура.Ссылка КАК Ссылка,
			//|	ЕСТЬNULL(Товары.Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Ссылка,
			|	ЕСТЬNULL(ЕГАИС_Номенклатура.Наименование, """") КАК ArtName,
			|	ЕСТЬNULL(ЕГАИС_Номенклатура.Производитель.Наименование, """") КАК Manufacturer,
			|	ЕСТЬNULL(ЕГАИС_Номенклатура.Импортер.Наименование, """") КАК Importer,
			|	ЕСТЬNULL(ЕГАИС_Номенклатура.Объем, 0) КАК Capacity,
			|	ЕСТЬNULL(ЕГАИС_Номенклатура.Крепость, 0) КАК PercentAlco,
			|	ВЫБОР
			|		КОГДА НЕ ЕГАИС_Номенклатура.ВидПродукции.Код ЕСТЬ NULL
			|			ТОГДА ЕГАИС_Номенклатура.ВидПродукции.Код + "" ""+ЕГАИС_Номенклатура.ВидПродукции.Наименование
			|		ИНАЧЕ ЕСТЬNULL(ЕГАИС_Номенклатура.Ссылка.ВидПродукции.Код + "" "", """") + ЕСТЬNULL(ЕГАИС_Номенклатура.Ссылка.ВидПродукции.Наименование + "" "", """")
			|	КОНЕЦ КАК TypeAlco
			|ИЗ
			|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК ЕГАИС_Номенклатура
			|ГДЕ
			|	ЕГАИС_Номенклатура.Код = &Код
			|	И НЕ ЕГАИС_Номенклатура.ПометкаУдаления");
			ЗапросЕГАИС.УстановитьПараметр("Код", Алкокод);
			
			ВыборкаЕГАИС = ЗапросЕГАИС.Выполнить().Выбрать();
			
			Пока ВыборкаЕГАИС.Следующий() Цикл			
				OnArtEgaisScan_ЗаполнитьОбъектТовара(ВыборкаЕГАИС, ОбъектТовара);			
			КонецЦикла;
			
			Возврат ОбъектТовара;
			
		ИначеЕсли стрДлина(PDFBarcode) = 150 Тогда
			МаркаСсылка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",PDFBarcode);
			ЗапросЕГАИС = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕГАИС_РегистрМарок.АлкогольнаяПродукция.Ссылка КАК Ссылка,
			//|	ЕСТЬNULL(Товары.Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Ссылка,
			|	ЕСТЬNULL(ЕГАИС_РегистрМарок.АлкогольнаяПродукция.Наименование, """") КАК ArtName,
			|	ЕСТЬNULL(ЕГАИС_РегистрМарок.АлкогольнаяПродукция.Производитель.Наименование, """") КАК Manufacturer,
			|	ЕСТЬNULL(ЕГАИС_РегистрМарок.АлкогольнаяПродукция.Импортер.Наименование, """") КАК Importer,
			|	ЕСТЬNULL(ЕГАИС_РегистрМарок.АлкогольнаяПродукция.Объем, 0) КАК Capacity,
			|	ЕСТЬNULL(ЕГАИС_РегистрМарок.АлкогольнаяПродукция.Крепость, 0) КАК PercentAlco,
			|	ВЫБОР
			|		КОГДА НЕ ЕГАИС_РегистрМарок.АлкогольнаяПродукция.ВидПродукции.Код ЕСТЬ NULL
			|			ТОГДА ЕГАИС_РегистрМарок.АлкогольнаяПродукция.ВидПродукции.Код + "" ""+ЕГАИС_РегистрМарок.АлкогольнаяПродукция.ВидПродукции.Наименование
			|		ИНАЧЕ ЕСТЬNULL(ЕГАИС_РегистрМарок.АлкогольнаяПродукция.Ссылка.ВидПродукции.Код + "" "", """") + ЕСТЬNULL(ЕГАИС_РегистрМарок.АлкогольнаяПродукция.Ссылка.ВидПродукции.Наименование + "" "", """")
			|	КОНЕЦ КАК TypeAlco
			|ИЗ
			|	РегистрСведений.АкцизныеМаркиЕГАИС КАК ЕГАИС_РегистрМарок
			|ГДЕ
			|	ЕГАИС_РегистрМарок.АкцизнаяМарка = &ЕГАИС_Код
			|	И НЕ ЕГАИС_РегистрМарок.АлкогольнаяПродукция.ПометкаУдаления");
			ЗапросЕГАИС.УстановитьПараметр("ЕГАИС_Код", МаркаСсылка);
			
			
			//C входящей ТТН марки выгружаются в задании
			
			//Попытка
			//	ЭтоВходящаяТТН = (Шаблон.ВидДокумента = "ТТНВходящаяЕГАИС");
			//Исключение	
			//	ЭтоВходящаяТТН = Ложь;	
			//КонецПопытки;

			//Если ЭтоВходящаяТТН Тогда
			//	ЗапросЕГАИС = OnArtEgaisScan_ПолучитьЗапросВходящаяТТН(СсылкаНаДок.ИсходныйДокумент, PDFBarcode);
			//КонецЕсли;
			
			ВыборкаЕГАИС = ЗапросЕГАИС.Выполнить().Выбрать();
			
			Пока ВыборкаЕГАИС.Следующий() Цикл			
				OnArtEgaisScan_ЗаполнитьОбъектТовара(ВыборкаЕГАИС, ОбъектТовара);			
			КонецЦикла;
			
			Возврат ОбъектТовара;
		Иначе
			Возврат ОбъектТовара;
		КонецЕсли;
		
		
	Иначе                  
		
		Если стрДлина(PDFBarcode)=68 Тогда
			Алкокод=КодНоменклатурыЕГАИСПоPDF417(PDFBarcode);	
			ЗапросЕГАИС = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕГАИС_Номенклатура.Ссылка,
			|	ЕСТЬNULL(ЕГАИС_Номенклатура.Наименование, """") КАК ArtName,
			|	ЕСТЬNULL(ЕГАИС_Номенклатура.ПроизводительИмпортер.Наименование, """") КАК Manufacturer,
			//|	ЕСТЬNULL(ЕГАИС_Номенклатура.Импортер.Наименование, """") КАК Importer,
			|	"""" КАК Importer,
			|	ЕСТЬNULL(ЕГАИС_Номенклатура.Объем, 0) КАК Capacity,
			|	ЕСТЬNULL(ЕГАИС_Номенклатура.Крепость, 0) КАК PercentAlco,
			|	ЕСТЬNULL(ЕГАИС_Номенклатура.ВидПродукции.Наименование, """") КАК TypeAlco
			|ИЗ
			|	Справочник.астНоменклатураЕГАИС КАК ЕГАИС_Номенклатура
			|ГДЕ
			|	ЕГАИС_Номенклатура.Код = &Код
			|	И НЕ ЕГАИС_Номенклатура.ПометкаУдаления");
			
			ЗапросЕГАИС.УстановитьПараметр("Код", Алкокод);
			
		ИначеЕсли стрДлина(PDFBarcode)=150 Тогда
			
			
			//во входящей ттн упаковки смотрим в самом доке
			ЭтоВходящаяТТН = Ложь;
			Попытка
				Если  Шаблон.ВидДокумента = "астТоварноТранспортныеНакладныеИзЕГАИС" Тогда
					Если СсылкаНаДок.ИсходныйДокумент.ТипДокумента = Перечисления.астТипыАктовТоварноТранспортныхНакладныхЕГАИС.Входящий Тогда
						ЭтоВходящаяТТН = Истина;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Если ЭтоВходящаяТТН Тогда
				
				
				Возврат ОбъектТовара;
								
			Иначе		
				
				ЗапросЕГАИС = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
				|	астМаркиЕГАИС.НоменклатураЕГАИС.Ссылка КАК Ссылка,
				|	ЕСТЬNULL(астМаркиЕГАИС.НоменклатураЕГАИС.Наименование, """") КАК ArtName,
				|	ЕСТЬNULL(астМаркиЕГАИС.НоменклатураЕГАИС.ПроизводительИмпортер.Наименование, """") КАК Manufacturer,
				//|	ЕСТЬNULL(ЕГАИС_Номенклатура.Импортер.Наименование, """") КАК Importer,
				|	"""" КАК Importer,
				|	ЕСТЬNULL(астМаркиЕГАИС.НоменклатураЕГАИС.Объем, 0) КАК Capacity,
				|	ЕСТЬNULL(астМаркиЕГАИС.НоменклатураЕГАИС.Крепость, 0) КАК PercentAlco,
				|	ЕСТЬNULL(астМаркиЕГАИС.НоменклатураЕГАИС.ВидПродукции.Наименование, """") КАК TypeAlco
				|ИЗ
				|	Справочник.астМаркиЕГАИС КАК астМаркиЕГАИС
				|ГДЕ
				|	астМаркиЕГАИС.Наименование = &Код
				|	И НЕ астМаркиЕГАИС.ПометкаУдаления");
				ЗапросЕГАИС.УстановитьПараметр("Код", PDFBarcode);
				
			КонецЕсли;	
			
		Иначе
			Возврат ОбъектТовара;
		КонецЕсли;
		
		
		ВыборкаЕГАИС = ЗапросЕГАИС.Выполнить().Выбрать();
		Пока ВыборкаЕГАИС.Следующий() Цикл
			ОбъектТовара.ARtID = "8"+"e-"+Строка(ВыборкаЕГАИС.ССылка.УникальныйИдентификатор());
			ЗаполнитьЗначенияСвойств(ОбъектТовара, ВыборкаЕгаис);
			ОбъектТовара.Barcode = ВыборкаЕГАИС.ССылка.Код;
			ОбъектТовара.ArtName = ЧистаяСтрока(ОбъектТовара.ArtName);
			ОбъектТовара.DMIsCompared = ТоварСопоставленОдинКОдному(ВыборкаЕГАИС.ССылка); 
			ОбъектТовара.DMBoxKF = 6; //количество единиц в коробе
			ОбъектТовара.DMIsNeedBlankA = Истина; //требуется ввод справки А по товару
			ОбъектТовара.DMIsNeedBlankB = Истина; //требуется ввод справки Б по товару
			ОбъектТовара.DMIsNeedDateBottling = Истина; //требуется ввод даты розлива по товару
		КонецЦикла;
		
		Возврат ОбъектТовара;
		
		
	КонецЕсли;
КонецФункции
Функция OnArtMarkScanSelect(Params)

	Возврат OnArtMarkScan(Params,"Select");
	
КонецФункции
Функция OnArtMarkScanInsert(Params)

	Возврат OnArtMarkScan(Params,"Insert");
	
КонецФункции
Функция OnArtMarkScan(Params,ТипОперации)
	
	//Переменные Params
	СтруктураParams = Новый Структура;
	СтруктураParams.Вставить("deviceId","");
	СтруктураParams.Вставить("UserName","");
	СтруктураParams.Вставить("KM_Barcode","");
	СтруктураParams.Вставить("KM_GTIN","");		
	СтруктураParams.Вставить("DocOutID","");
	СтруктураParams.Вставить("Cell","");
	СтруктураParams.Вставить("KM_SN","");
	СтруктураParams.Вставить("EAN","");
	СтруктураParams.Вставить("KM_RawBarcode","");
	СтруктураParams.Вставить("GS1","");


	ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураParams);

	
	deviceId 		=  СтруктураParams.deviceId;
	UserName 		=  СтруктураParams.UserName;
	KM_Barcode 		=  СтруктураParams.KM_Barcode;
	KM_GTIN 		=  СтруктураParams.KM_GTIN;
	DocOutID 		=  СтруктураParams.DocOutID;
	Cell 			=  СтруктураParams.Cell;
	KM_SN 			=  СтруктураParams.KM_SN;
	EAN 			=  СтруктураParams.EAN;
	KM_RawBarcode 	=  СтруктураParams.KM_RawBarcode;
	GS1 			=  СтруктураParams.GS1;
	
		
	KM_GTIN=УдалитьЛидирующиеНули(KM_GTIN);
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryInfo"));
	
	УзелПО = НайтиУзел(deviceId);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(deviceId, UserName);
	КонецЕсли;
	
	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		СтрокаЛогирования = Новый Структура;
		УникальностьЛогирования = Новый УникальныйИдентификатор;
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("OnArtMarkScan.Начали",УзелПО,,СтрокаЛогирования,UserName,УникальностьЛогирования);
	КонецЕсли;

	
	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("OnArtScan. Не нашли документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок,"ТСД,ДатаНачалаСбора,ДатаЗавершенияСбора,Шаблон,ИсходныйДокумент,Склад");
	
	ДокТСД = ЗначенияРеквизитовСсылкаНаДок.ТСД;
	ДокДатаНачалаСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаНачалаСбора;
	ДокДатаЗавершенияСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаЗавершенияСбора;
	Шаблон = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	ИсходныйДокумент = ЗначенияРеквизитовСсылкаНаДок.ИсходныйДокумент;
	Склад  = ЗначенияРеквизитовСсылкаНаДок.Склад;

	Если Шаблон = Неопределено Тогда
		ВызватьИсключениеВС("OnArtScan. Не нашли запись документа. ");
		Возврат ОбъектСписка;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокТСД) Тогда
		Если ДокТСД <> УзелПО Тогда
			ВызватьИсключениеВС("OnArtScan. Чужой документ. ");
			Возврат ОбъектСписка;
		КонецЕсли;	
	КонецЕсли;
			
	Если ДокДатаЗавершенияСбора <> Дата(1,1,1) Тогда
		ВызватьИсключениеВС("OnArtScan. Закрытый документ. ");
		Возврат ОбъектСписка;
	КонецЕсли;
	
		
	ЗначениеШтрихкода = "";
	ТаблицаТоваров = ПолучитьТоварыБезЗадания(УзелПО,СсылкаНаДок,KM_Barcode,GS1,ЗначениеШтрихкода);	
	КодМаркировкиНеНайден = Истина;

	Для каждого СтрокаДока ИЗ ТаблицаТоваров Цикл
		
		Если СтрНайти(СтрокаДока.ЗначениеШтрихкода,ЗначениеШтрихкода)=0 Или ЗначениеШтрихкода ="" Тогда
			Продолжить;
		Иначе
			КодМаркировкиНеНайден = Ложь;	
		КонецЕсли;
		
		ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItem"));
		ОбъектТовара.DMArtName = ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));
		ОбъектТовара.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
		ОбъектТовара.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Попытка ОбъектТовара.DMMeasureType = ?(СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки;
		ОбъектТовара.DMArtPrice=СтрокаДока.Цена;
		
		Атрибуты = ПолучитьАтрибуты(УзелПО);			
		Для сч = 1 По 10 Цикл	
			Попытка
				ИмяАтрибута =  Атрибуты["ИмяАтрибута"+сч];
				Если ИмяАтрибута ="!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
					//ОбъектТовара["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.АдресХранения);
					ОбъектТовара["DMArtAttr"+сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО,СтрокаДока.Номенклатура,ИмяАтрибута);
				ИначеЕсли ИмяАтрибута ="!!! Характеристики !!!" Тогда
					ОбъектТовара["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Характеристика.Наименование);
				ИначеЕсли ЛЕВ(ИмяАтрибута,3) = "ДР_" Тогда 
					Попытка ОбъектТовара["DMArtAttr"+сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.Номенклатура, ИмяАтрибута); Исключение КонецПопытки;	
				ИначеЕсли ИмяАтрибута <> "" Тогда
					ОбъектТовара["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);							
				Иначе 
					ОбъектТовара["DMArtAttr"+сч] = "";
				КонецЕсли;
			Исключение
				ОбъектТовара["DMArtAttr"+сч] = "";
			КонецПопытки;
			
		КонецЦикла;
				
		СтрокаДока.Коэффициент=?(СтрокаДока.Коэффициент=0,1,СтрокаДока.Коэффициент);
		СтрокаДока.НаименованиеУпаковки=?(ЗначениеЗаполнено(СтрокаДока.НаименованиеУпаковки),СтрокаДока.НаименованиеУпаковки,"шт");

		Попытка
			ОбъектТовара.DMMeasureName = СтрокаДока.НаименованиеУпаковки;

			Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
				ОбъектТовара.DMMeasureK=1;
			Иначе	
				ОбъектТовара.DMMeasureK=СтрокаДока.Коэффициент;
			КонецЕсли;

		Исключение
		Конецпопытки;
		
		ОбъектТовара.DMTaskQnt = СтрокаДока.КоличествоВЗадании;
		
		ЭтоУслуга = Ложь;
		Попытка 
			Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЭтоУслуга = Истина;
	       	КонецЕсли;
		Исключение
		КонецПопытки;

		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектТовара.DMLimitQnt=0;
		ИначеЕсли ЭтоУслуга Тогда
			ОбъектТовара.DMLimitQnt=999;	
		Иначе
			Итог = (СтрокаДока.ВНаличии-СтрокаДока.ВРезерве-СтрокаДока.ВРезервеТСД);
			Итог = Формат(Итог, ПолучитьФорматнуюСтрокуЧисла());
			ОбъектТовара.DMLimitQnt=Итог;
		КонецЕсли;

		//ОбъектТовара.DMSN = Серия;
				
		Попытка	
			DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры, Склад);
		Исключение
			DMUseSN = Ложь;
		Конецпопытки;	
		ОбъектТовара.DMUseSN = DMUseSN;
		ОбъектТовара.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.Номенклатура,DMUseSN,Шаблон, УзелПО);
		
		
		ОбъектТовара.DMBarcodeUseSN = 2;
		
		Если СокрЛП(ЧистаяСтрока(ОбъектТовара.DMArtName)) <> "" 
			И СокрЛП(ЧистаяСтрока(ОбъектТовара.DMArtID)) <> "" Тогда
			
			ОбъектСписка.DMArtQueryItem.Добавить(ОбъектТовара);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КодМаркировкиНеНайден Тогда	
		Если Не Шаблон.МаркировкаДополнительныйПоискПоКМ Тогда
			Если Лев(KM_GTIN,2) = "29" Тогда
				Возврат ОбъектСписка;
			КонецЕсли;

			
			Если ТипОперации = "Select"	Тогда
				Возврат OnArtScanSelect(deviceId,UserName,KM_GTIN,DocOutID,Cell,Params);
			ИначеЕсли ТипОперации = "Insert" Тогда 
				Возврат OnArtScanInsert(deviceId,UserName,KM_GTIN,DocOutID,Cell,Params);
			Иначе
				Возврат ОбъектСписка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

		
	//ЗАПИСЬ	
	Если НЕ Шаблон.ГрупповаяРабота Тогда
		//ОБЫЧНАЯ ЛОГИКА
		Если Не ЗначениеЗаполнено(ДокДатаНачалаСбора) Или Не ЗначениеЗаполнено(ДокТСД) Тогда
			
			Попытка
				Объект=СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора=ТекущаяДата();
				Объект.ТСД=УзелПО;
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
				
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		//ГРУППОВОЙ ДОКУМЕНТ
		
		ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(deviceId, СсылкаНаДок, "ДатаНачалаСбора");	
		Если Не ЗначениеЗаполнено(ДатаСбораПоТСД) Тогда	
			ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(deviceId, СсылкаНаДок, UserName);		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокДатаНачалаСбора) Тогда
			Попытка
				Объект=СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора=ТекущаяДата();
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
			Исключение
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;	
	
	
	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("OnArtMarkScan.Закончили",УзелПО,,СтрокаЛогирования,UserName,УникальностьЛогирования);
	КонецЕсли;

	Возврат ОбъектСписка;
	
КонецФункции
Функция OnCellScanSelect(SN, UserName, DocOutID, CellBC, ArtID, Barcode)
	
	ОбъектЯчейки = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMCell"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("OnCellScan. Не нашли документ. ");
		Возврат ОбъектЯчейки;
	КонецПопытки;
	Шаблон = СсылкаНаДок.Шаблон;
	
	ТекущаяЯчейка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(CellBC,СсылкаНаДок);
		
	Если НЕ ЗначениеЗаполнено(ТекущаяЯчейка.Наименование) И НЕ ЗначениеЗаполнено(ТекущаяЯчейка.Код) Тогда
		ВызватьИсключениеВС("OnCellScan. Ячейка по штрихкоду " +CellBC+ " не найдена в базе.");
		Возврат ОбъектЯчейки;
	КонецЕсли;
	
		ОбъектЯчейки.DMBarcode = CellBC;
		ОбъектЯчейки.DMCellName = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ТекущаяЯчейка.Наименование), ТекущаяЯчейка.Код);
		
		ОбъектЯчейки.DMTaskQnt = 0;
		ОбъектЯчейки.DMLimitQnt = 0;	


	Попытка
		ТекущийСклад=СсылкаНаДок.ИсходныйДокумент.Склад;
		НашлиЗадание = Истина;
	Исключение	
		ТекущийСклад=Справочники.Склады.ПустаяСсылка();
		НашлиЗадание = Ложь;
	КонецПопытки;
	ЭтоВводЯчеекДоТовара = ?((СсылкаНаДок.Шаблон.ВыгрузкаЯчеекПодбор = 0), Истина, Ложь);

	
	Попытка
		Если ЭтоВводЯчеекДоТовара Тогда  //ПО ЯЧЕЙКЕ НЕ НУЖНА ИНФО ПО ЗАДАНИЮ И ОСТАТКАМ
			Возврат ОбъектЯчейки;
		Иначе
			
				Если Лев(ArtID,3)="8U-" Тогда
					лТовар=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID,4,36)));
					ИДХК=Сред(ArtID,40,36);
					Если ИДХК<>"00000000-0000-0000-0000-000000000000" Тогда
						лХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
					Иначе
						лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					КонецЕсли;	
				Иначе 
					Возврат ОбъектЯчейки;
				КонецЕсли;

			//ОСТАТКИ	
			ОбъектЯчейки.DMLimitQnt =  ПолучитьОстаткиПоЯчейке(УзелПО,ТекущийСклад,лТовар,лХарактеристикаНоменклатуры,ТекущаяЯчейка);
			
			Если НЕ НашлиЗадание Тогда  //ПО ЯЧЕЙКЕ НЕ НУЖНА ИНФО ПО ЗАДАНИЮ
				Возврат ОбъектЯчейки;	
			Иначе
		
				//ЗАДАНИЕ
				Попытка ОбъектЯчейки.DMTaskQnt = ПолучитьЗаданиеПоЯчейке(УзелПО,СсылкаНаДок,лТовар,лХарактеристикаНоменклатуры,ТекущаяЯчейка,"Select"); Исключение КонецПопытки;		
			КонецЕсли;	
		КонецЕсли;	
		
	Исключение	
	КонецПопытки;

	
	
	//ЗАПИСЬ	
	Если НЕ Шаблон.ГрупповаяРабота Тогда
		//ОБЫЧНАЯ ЛОГИКА
		Если Не ЗначениеЗаполнено(СсылкаНаДок.ДатаНачалаСбора) Или Не ЗначениеЗаполнено(СсылкаНаДок.ТСД) Тогда
			
			Попытка
				Объект=СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора=ТекущаяДата();
				Объект.ТСД=УзелПО;
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
				
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		//ГРУППОВОЙ ДОКУМЕНТ
		
		ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаНачалаСбора");	
		Если Не ЗначениеЗаполнено(ДатаСбораПоТСД) Тогда	
			ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(SN, СсылкаНаДок, UserName);		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СсылкаНаДок.ДатаНачалаСбора) Тогда
			Попытка
				Объект=СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора=ТекущаяДата();
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
			Исключение
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;	

	Возврат ОбъектЯчейки;
	
	
КонецФункции
Функция OnCellScanInsert(SN, UserName, DocOutID, CellBC, ArtID, Barcode)
	
	ОбъектЯчейки = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMCell"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("OnCellScan. Не нашли документ. ");
		Возврат ОбъектЯчейки;
	КонецПопытки;
	Шаблон = СсылкаНаДок.Шаблон;

	ТекущаяЯчейка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(CellBC,СсылкаНаДок);
		
	Если НЕ ЗначениеЗаполнено(ТекущаяЯчейка.Наименование) И НЕ ЗначениеЗаполнено(ТекущаяЯчейка.Код) Тогда
		ВызватьИсключениеВС("OnCellScan. Ячейка по штрихкоду " +CellBC+ " не найдена в базе.");
		Возврат ОбъектЯчейки;
	КонецЕсли;
	
		ОбъектЯчейки.DMBarcode = CellBC;
		ОбъектЯчейки.DMCellName = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ТекущаяЯчейка.Наименование), ТекущаяЯчейка.Код);
		
		ОбъектЯчейки.DMTaskQnt = 0;
		ОбъектЯчейки.DMLimitQnt = 0;	
	

	Попытка
		ТекущийСклад=СсылкаНаДок.ИсходныйДокумент.Склад;
		НашлиЗадание = Истина;
	Исключение
		ТекущийСклад=Справочники.Склады.ПустаяСсылка();
		НашлиЗадание = Ложь;
	КонецПопытки;
	
		ЭтоВводЯчеекДоТовара = ?((СсылкаНаДок.Шаблон.ВыгрузкаЯчеекПриемка = 0), Истина, Ложь);
		ЭтоРазмещениеПоПодбору = СсылкаНаДок.Шаблон.ПриемкаПоПодбору;

	
	Попытка
		Если ЭтоВводЯчеекДоТовара ИЛИ ЭтоРазмещениеПоПодбору Тогда  //ПО ЯЧЕЙКЕ НЕ НУЖНА ИНФО ПО ЗАДАНИЮ И ОСТАТКАМ
			Возврат ОбъектЯчейки;
		Иначе
			
			
				Если Лев(ArtID,3)="8U-" Тогда
					лТовар=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID,4,36)));
					ИДХК=Сред(ArtID,40,36);
					Если ИДХК<>"00000000-0000-0000-0000-000000000000" Тогда
						лХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
					Иначе
						лХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					КонецЕсли;	
				Иначе 
					Возврат ОбъектЯчейки;
				КонецЕсли;

			
			//ОСТАТКИ	
			ОбъектЯчейки.DMLimitQnt =  ПолучитьОстаткиПоЯчейке(УзелПО,ТекущийСклад,лТовар,лХарактеристикаНоменклатуры,ТекущаяЯчейка);
			
			Если НЕ НашлиЗадание Тогда  //ПО ЯЧЕЙКЕ НЕ НУЖНА ИНФО ПО ЗАДАНИЮ
				Возврат ОбъектЯчейки;	
			Иначе

				Попытка
					//ОСТАТКИ ПРИ РАЗМЕЩЕНИИ ИЗ ЗОНЫ ПРИЕМКИ
					ЯчейкаЗоныПриемки = СсылкаНаДок.ИсходныйДокумент.ЗонаПриемки;
	                Если СсылкаНаДок.ИсходныйДокумент.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение И НЕ ЯчейкаЗоныПриемки.Пустая() Тогда
						ОбъектЯчейки.DMLimitQnt =  ПолучитьОстаткиПоЯчейке(УзелПО,ТекущийСклад,лТовар,лХарактеристикаНоменклатуры,ЯчейкаЗоныПриемки);
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				//ЗАДАНИЕ
				Попытка ОбъектЯчейки.DMTaskQnt = ПолучитьЗаданиеПоЯчейке(УзелПО,СсылкаНаДок,лТовар,лХарактеристикаНоменклатуры,ТекущаяЯчейка,"Insert"); Исключение КонецПопытки;
	
			КонецЕсли;	
		КонецЕсли;	
		
	Исключение	
	КонецПопытки;

	
	//ЗАПИСЬ	
	Если НЕ Шаблон.ГрупповаяРабота Тогда
		//ОБЫЧНАЯ ЛОГИКА
		Если Не ЗначениеЗаполнено(СсылкаНаДок.ДатаНачалаСбора) Или Не ЗначениеЗаполнено(СсылкаНаДок.ТСД) Тогда
			
			Попытка
				Объект=СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора=ТекущаяДата();
				Объект.ТСД=УзелПО;
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
				
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		//ГРУППОВОЙ ДОКУМЕНТ
		
		ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаНачалаСбора");	
		Если Не ЗначениеЗаполнено(ДатаСбораПоТСД) Тогда	
			ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(SN, СсылкаНаДок, UserName);		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СсылкаНаДок.ДатаНачалаСбора) Тогда
			Попытка
				Объект=СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора=ТекущаяДата();
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);
				Объект.Записать();
			Исключение
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;	

	Возврат ОбъектЯчейки;
	
	
КонецФункции
Функция OnPalletScan(SN, UserName, Barcode, DocOutID, Cell, Params) 
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryInfoUPL")); 
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("OnPalletScan. Не нашли документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;
	
	Если ссылканадок.ПолучитьОбъект()=неопределено Тогда
		ВызватьИсключениеВС("OnPalletScan. Не нашли документ. ");
		Возврат ОбъектСписка;
	КонецЕсли;	
	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД<>УзелПО Тогда
			ВызватьИсключениеВС("OnPalletScan. Чужой документ. ");
			Возврат ОбъектСписка;
		КонецЕсли;	
	КонецЕсли;	
	
	Если СсылкаНаДок.ДатаЗавершенияСбора<>Дата(1,1,1) Тогда
		ВызватьИсключениеВС("OnPalletScan. Закрытый документ. ");
		Возврат ОбъектСписка;
	КонецЕсли;
	
	
	Шаблон = СсылкаНаДок.Шаблон;
	
	СтруктураParams = Новый Структура;
	СтруктураParams.Вставить("GS1","");
	ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураParams);	
	GS1 = СтруктураParams.GS1;
	
	
	Если Шаблон.ИспользоватьМаркировку Тогда		
		Если ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() Тогда
			ЭтоДокументМДЛП = ДатаМобайл_МДЛП.ЭтоДокументМДЛП(Шаблон.ВидДокумента);
		Иначе
			ЭтоДокументМДЛП = Ложь;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(GS1) Тогда
			ПолучитьСодержимоеУпаковки_Маркировка(УзелПО,СсылкаНаДок,ОбъектСписка,GS1,ЭтоДокументМДЛП);
		Иначе	
			ПолучитьСодержимоеУпаковки_Маркировка(УзелПО,СсылкаНаДок,ОбъектСписка,Barcode,ЭтоДокументМДЛП);
		КонецЕсли;		
	КонецЕсли;
	
	Если ОбъектСписка.DMArtQueryItemUPL.Количество() = 0 Тогда
		ПолучитьСодержимоеУпаковки_НашУпаковочныйЛист(УзелПО,СсылкаНаДок,ОбъектСписка,Barcode);
	КонецЕсли;
	
	Если ОбъектСписка.DMArtQueryItemUPL.Количество() = 0 Тогда
		ПолучитьСодержимоеУпаковки_ТиповойУпаковочныйЛист(УзелПО,СсылкаНаДок,ОбъектСписка,Barcode)
	КонецЕсли;
	
	//Попробуем получить результат маркировки в обычных документах
	Если ОбъектСписка.DMArtQueryItemUPL.Количество() = 0 И НЕ Шаблон.ИспользоватьМаркировку Тогда
		Если ДатаМобайл_ОбщийМодуль.ЕстьМаркировка() Тогда		 
			Если ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() Тогда
				ЭтоДокументМДЛП = ДатаМобайл_МДЛП.ЭтоДокументМДЛП(Шаблон.ВидДокумента);
			Иначе
				ЭтоДокументМДЛП = Ложь;
			КонецЕсли;	
			
			ПолучитьСодержимоеУпаковки_Маркировка(УзелПО,СсылкаНаДок,ОбъектСписка,Barcode,ЭтоДокументМДЛП,Истина);
			Возврат ОбъектСписка;		
		КонецЕсли;	 
	КонецЕсли;

	
	Возврат  ОбъектСписка;
	
КонецФункции
Процедура ПолучитьСодержимоеУпаковки_Маркировка(УзелПО,СсылкаНаДок,ОбъектСписка, Barcode,ЭтоДокументМДЛП,ТолькоТовары = Ложь)
		
	Barcode = СтрЗаменить(Barcode,"[","(");
	Barcode = СтрЗаменить(Barcode,"]",")");

	
	Если ЭтоДокументМДЛП Тогда
		Если Лев(Barcode, 2) = "00" И (СтрДлина(Barcode) = 20 ИЛИ Найти(Barcode, "/") = 21) Тогда
			Barcode1 = "(00)" + Сред(Barcode, 3, 18);
			Barcode2 = Сред(Barcode, 3, 18);
		ИначеЕсли Лев(Barcode, 4) = "(00)" И (СтрДлина(Barcode) = 22 ИЛИ Найти(Barcode, "/") = 23) Тогда
			Barcode1 = "(00)" + Сред(Barcode, 5, 18);
			Barcode2 = Сред(Barcode, 5, 18);
		Иначе 
			Barcode1 = Barcode;
			Barcode2 = Barcode;		
		КонецЕсли;
	Иначе
		Если Лев(Barcode, 2) = "00" И (СтрДлина(Barcode) = 20 ИЛИ Найти(Barcode, "/") = 21) Тогда
			Barcode1 = "(00)" + Сред(Barcode, 3, 18);
			Barcode2 = Сред(Barcode,1,20);
		ИначеЕсли Лев(Barcode, 4) = "(00)" И (СтрДлина(Barcode) = 22 ИЛИ Найти(Barcode, "/") = 23) Тогда
			Barcode1 = Сред(Barcode, 1, 22);
			Barcode2 = "00" + Сред(Barcode,5,18);
		ИначеЕсли СтрДлина(Barcode) = 18 Тогда
			Barcode1 = "(00)" + Barcode;
			Barcode2 = "00" + Barcode;
		Иначе 
			Barcode1 = Barcode;
			Barcode2 = Barcode;	
		КонецЕсли;	
	КонецЕсли;
	
	
	Шаблон = СсылкаНаДок.Шаблон;
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК Короб
	|ПОМЕСТИТЬ КоробаПалеты	
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода1
	|		ИЛИ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода2)
	|	И (ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|		ИЛИ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
	|;
	|////////////////////////////////////////////////////////////
	|
	//КОРОБА ИЗ ПАЛЕТЫ
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК Марка,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.Номенклатура,ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураКороба,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.Характеристика,ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаКороба,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.Упаковка,ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаКороба,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.Упаковка.Числитель,0) КАК КоэффициентУпаковкиКороба
	|ПОМЕСТИТЬ Марки
	|ИЗ
	|	КоробаПалеты КАК КоробаПалеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО КоробаПалеты.Короб = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И (ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|		ИЛИ (ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|			И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	|
	|ОБЪЕДИНИТЬ
	|
	//КОРОБА БЕЗ ПАЛЕТ
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.Номенклатура,ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.Характеристика,ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.Упаковка,ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.Упаковка.Числитель,0) КАК КоэффициентУпаковкиКороба
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода1
	|		ИЛИ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода2)
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)	
	|	И (ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|		ИЛИ (ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|			И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	|;
	|////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Марка,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ВключатьАртикул
	|			ТОГДА ВЫБОР
	|					КОГДА ШтрихкодыУпаковокТоваров.Номенклатура.Артикул = """"
	|						ТОГДА """"
	|					ИНАЧЕ ШтрихкодыУпаковокТоваров.Номенклатура.Артикул + "" ""
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ + ШтрихкодыУпаковокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Характеристика.Наименование, """") КАК НаименованиеТовара,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Наименование, ШтрихкодыУпаковокТоваров.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Числитель,0) = 0
	|				ТОГДА 1
	|				ИНАЧЕ ШтрихкодыУпаковокТоваров.Упаковка.Числитель
	|			КОНЕЦ
	|		ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество 
	|	КОНЕЦ КАК Коэффициент,
	|	Марки.НоменклатураКороба КАК НоменклатураКороба,
	|	Марки.ХарактеристикаКороба КАК ХарактеристикаКороба,
	|	Марки.УпаковкаКороба КАК УпаковкаКороба,
	|	Марки.КоэффициентУпаковкиКороба КАК КоэффициентУпаковкиКороба
	|ПОМЕСТИТЬ ИтоговыеДанныеУпаковки
	|ИЗ
	|	Марки КАК Марки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|			ПО Марки.Марка = ШтрихкодыУпаковокТоваров.Ссылка	
	|;
	|////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИтоговыеДанныеУпаковки.Номенклатура КАК Номенклатура,
	|	ИтоговыеДанныеУпаковки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НайденныеТовары
	|ИЗ
	|	ИтоговыеДанныеУпаковки КАК ИтоговыеДанныеУпаковки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыСОстатками1С
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ТекущаяДата,
	|			Номенклатура В (ВЫБРАТЬ
	|									НайденныеТовары.Номенклатура КАК Номенклатура
	|								ИЗ 
	|									НайденныеТовары КАК НайденныеТовары)						
	|			И (&ВсеСклады ИЛИ Склад В (&Склады))
	|			И (&ВсеПомещения ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстаткиОстатки.Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыСРезервамиТСД
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ	
	|	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
	|		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
	|ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
	|ИЗ
	|	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК Характеристика,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество * (ВЫБОР
	|				КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель = 0
	|						ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель
	|			КОНЕЦ / ВЫБОР
	|				КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель = 0
	|						ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель
	|			КОНЕЦ), 0)) КАК ВРезервеТСД
	|ПОМЕСТИТЬ ТоварыСРезервамиТСД
	|ИЗ
	|	НайденныеТовары КАК НайденныеТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|	ПО НайденныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
	| 		И НайденныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЧИСЛО(19, 2))) КАК Цена
	|ПОМЕСТИТЬ ТоварыСЦенами
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ТекущаяДата, 
	|			Номенклатура В (ВЫБРАТЬ
	|									НайденныеТовары.Номенклатура КАК Номенклатура
	|								ИЗ 
	|									НайденныеТовары КАК НайденныеТовары)			
	|			И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговыеДанныеУпаковки.Марка КАК Марка,
	|	ИтоговыеДанныеУпаковки.Номенклатура КАК Номенклатура,
	|	ИтоговыеДанныеУпаковки.Характеристика КАК Характеристика,
	|	ИтоговыеДанныеУпаковки.НаименованиеТовара КАК НаименованиеТовара,
	|	ИтоговыеДанныеУпаковки.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	ИтоговыеДанныеУпаковки.ИспользоватьСерии КАК ИспользоватьСерии,
	|	ИтоговыеДанныеУпаковки.Коэффициент КАК Коэффициент,
	|	ИтоговыеДанныеУпаковки.НоменклатураКороба КАК НоменклатураКороба,
	|	ИтоговыеДанныеУпаковки.ХарактеристикаКороба КАК ХарактеристикаКороба,
	|	ИтоговыеДанныеУпаковки.УпаковкаКороба КАК УпаковкаКороба,
	|	ИтоговыеДанныеУпаковки.КоэффициентУпаковкиКороба КАК КоэффициентУпаковкиКороба,
	|	ЕСТЬNULL(ТоварыСОстатками1С.ВНаличии, 0) КАК ВНаличии,
	|	ЕСТЬNULL(ТоварыСОстатками1С.ВРезерве, 0) КАК ВРезерве,
	|	ЕСТЬNULL(ТоварыСРезервамиТСД.ВРезервеТСД, 0) КАК ВРезервеТСД,
	|	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена
	|ПОМЕСТИТЬ ИтоговыеДанные
	|ИЗ
	|	ИтоговыеДанныеУпаковки КАК ИтоговыеДанныеУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
	|		ПО (ИтоговыеДанныеУпаковки.Номенклатура = ТоварыСОстатками1С.Номенклатура)
	|			И (ИтоговыеДанныеУпаковки.Характеристика = ТоварыСОстатками1С.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
	|		ПО (ИтоговыеДанныеУпаковки.Номенклатура = ТоварыСРезервамиТСД.Номенклатура)
	|			И (ИтоговыеДанныеУпаковки.Характеристика = ТоварыСРезервамиТСД.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
	|		ПО (ИтоговыеДанныеУпаковки.Номенклатура = ТоварыСЦенами.Номенклатура)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговыеДанные.Марка КАК Марка,
	|	ИтоговыеДанные.Номенклатура КАК Номенклатура,
	|	ИтоговыеДанные.Характеристика КАК Характеристика,
	|	ИтоговыеДанные.НаименованиеТовара КАК НаименованиеТовара,
	|	ИтоговыеДанные.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	ИтоговыеДанные.ИспользоватьСерии КАК ИспользоватьСерии,
	|	СУММА(ИтоговыеДанные.Коэффициент) КАК Коэффициент,
	|	ИтоговыеДанные.НоменклатураКороба КАК НоменклатураКороба,
	|	ИтоговыеДанные.ХарактеристикаКороба КАК ХарактеристикаКороба,
	|	ИтоговыеДанные.УпаковкаКороба КАК УпаковкаКороба,
	|	ИтоговыеДанные.КоэффициентУпаковкиКороба КАК КоэффициентУпаковкиКороба,
	|	ИтоговыеДанные.ВНаличии КАК ВНаличии,
	|	ИтоговыеДанные.ВРезерве КАК ВРезерве,
	|	ИтоговыеДанные.ВРезервеТСД КАК ВРезервеТСД,
	|	ИтоговыеДанные.Цена КАК Цена
	|ИЗ
	|	ИтоговыеДанные КАК ИтоговыеДанные
	|СГРУППИРОВАТЬ ПО
	|	ИтоговыеДанные.Марка,
	|	ИтоговыеДанные.Номенклатура,
	|	ИтоговыеДанные.Характеристика,
	|	ИтоговыеДанные.НаименованиеТовара,
	|	ИтоговыеДанные.НаименованиеУпаковки,
	|	ИтоговыеДанные.ИспользоватьСерии,
	|	ИтоговыеДанные.НоменклатураКороба,
	|	ИтоговыеДанные.ХарактеристикаКороба,
	|	ИтоговыеДанные.УпаковкаКороба,
	|	ИтоговыеДанные.КоэффициентУпаковкиКороба,
	|	ИтоговыеДанные.ВНаличии,
	|	ИтоговыеДанные.ВРезерве,
	|	ИтоговыеДанные.ВРезервеТСД,
	|	ИтоговыеДанные.Цена
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыСОстатками1С
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыСРезервамиТСД
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокументыСРезервамиТСД
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыСРезервамиТСД
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыСЦенами
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Марки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НайденныеТовары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтоговыеДанныеУпаковки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтоговыеДанные";


	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Запрос.УстановитьПараметр("ЗначениеШтрихкода1", Barcode1);
	Запрос.УстановитьПараметр("ЗначениеШтрихкода2", Barcode2);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".РеализацияТоваровУслуг.", "."+Шаблон.ВидДокумента+".");	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Товары КАК", "." + Шаблон.ИмяТабличнойЧастиПодбор + " КАК");	
	
	Если Шаблон.МаркировкаОнлайнПроверкаВложенностиУпаковок Или ТолькоТовары Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИтоговыеДанныеУпаковки.Марка", """""");	
	КонецЕсли;		

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДок.ИсходныйДокумент);
	Запрос.УстановитьПараметр("ВключатьАртикул", УзелПО.ДобавлятьАртикулВНаименование);
	Попытка 
		ТекущийСклад = СсылкаНаДок.Склад;
		СписокСкладов=Новый Массив;
		СписокСкладов.Добавить(ТекущийСклад);
	Исключение
		СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
	КонецПопытки;
	Запрос.УстановитьПараметр("Склады",СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
	
	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения",СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);

	Запрос.УстановитьПараметр("ТипЦен",УзелПО.ТипЦен);
	Запрос.УстановитьПараметр("ИсходноеЗадание",СсылкаНаДок);

	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();	
	
	
	
	УпаковкиМДЛП = Ложь;
	МаркированныеТоварыВУпаковкиМДЛП = Ложь;
	Если ЭтоДокументМДЛП Тогда
		Если ТаблицаТоваров.Количество() = 0 Тогда
			ПолучитьНоменклатуруУпаковкиМДЛП(УзелПО,СсылкаНаДок,ОбъектСписка, Barcode,ЭтоДокументМДЛП);
		КонецЕсли;
		
		
		Если ТаблицаТоваров.Количество() = 0 Тогда
			Если Метаданные.НайтиПоПолномуИмени("РегистрСведений.УпаковкиМДЛП") <> Неопределено Тогда
				УпаковкиМДЛП = Истина;
				ТаблицаТоваров = ПолучитьТоварыБезЗаданияПоУпаковкамМДЛП(Barcode, Запрос, УзелПО, СсылкаНаДок, МаркированныеТоварыВУпаковкиМДЛП);		
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	
	ПолучениеШапкиУпаковки = Ложь;
	
	Для каждого СтрокаДока ИЗ ТаблицаТоваров Цикл
		
		ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItemUPL"));
		ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt")); 
		ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode")); 
		
		Если МаркированныеТоварыВУпаковкиМДЛП Тогда
			СтрокаДока.НоменклатураКороба 	= СтрокаДока.Номенклатура;
			СтрокаДока.ХарактеристикаКороба = СтрокаДока.Характеристика;
			СтрокаДока.Марка 				= СтрокаДока.ЗначениеШтрихкода;
		КонецЕсли;
		
		Если ((ЗначениеЗаполнено(СтрокаДока.НоменклатураКороба) И ЗначениеЗаполнено(СтрокаДока.Номенклатура) И СтрокаДока.НоменклатураКороба <> СтрокаДока.Номенклатура)
			Или (ЗначениеЗаполнено(СтрокаДока.ХарактеристикаКороба) И ЗначениеЗаполнено(СтрокаДока.Характеристика) И СтрокаДока.ХарактеристикаКороба <> СтрокаДока.Характеристика))
			И Шаблон.МаркировкаОнлайнПроверкаВложенностиУпаковок Тогда
			
			//ПОЛУЧЕНИЕ ДАННЫХ ИЗ УПАКОВКИ
			
			ПолучениеШапкиУпаковки = Истина;

			НаименованиеТовара="";
			НаименованиеТовара = ?(УзелПО.ДобавлятьАртикулВНаименование,?(СтрокаДока.НоменклатураКороба.Артикул="","",СтрокаДока.НоменклатураКороба.Артикул+" "),НаименованиеТовара);
			НаименованиеТовара = НаименованиеТовара + СтрокаДока.НоменклатураКороба.Наименование + СтрокаДока.ХарактеристикаКороба.Наименование;
			ОбъектТовара.DMArt.DMArtName = ЧистаяСтрока(СокрП(НаименованиеТовара));
			
			
			ОбъектТовара.DMArt.DMArtID = "8U-" + СокрЛП(СтрокаДока.НоменклатураКороба.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.ХарактеристикаКороба.УникальныйИдентификатор());
			ОбъектТовара.DMArt.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.НоменклатураКороба);
			Попытка ОбъектТовара.DMArt.DMMeasureType = ?(СтрокаДока.НоменклатураКороба.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки;
			ОбъектТовара.DMArt.DMArtPrice=СтрокаДока.Цена;
			
			Атрибуты = ПолучитьАтрибуты(УзелПО);			
			Для сч = 1 По 10 Цикл	
				Попытка
					ИмяАтрибута =  Атрибуты["ИмяАтрибута"+сч];
					Если ИмяАтрибута ="!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
						ОбъектТовара["DMArtAttr"+сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО,СтрокаДока.НоменклатураКороба,ИмяАтрибута);
					ИначеЕсли ИмяАтрибута ="!!! Характеристики !!!" Тогда
						ОбъектТовара.DMArt["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.ХарактеристикаКороба.Наименование);
					ИначеЕсли ЛЕВ(ИмяАтрибута,3) = "ДР_" Тогда 
						Попытка ОбъектТовара.DMArt["DMArtAttr"+сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.НоменклатураКороба, ИмяАтрибута); Исключение КонецПопытки;	
					ИначеЕсли ИмяАтрибута <> "" Тогда
						ОбъектТовара.DMArt["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);							
					Иначе 
						ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
					КонецЕсли;	
					
				Исключение
					ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
				КонецПопытки;
				
			КонецЦикла;		
			
			СтрокаДока.Коэффициент=?(СтрокаДока.КоэффициентУпаковкиКороба=0,?(СтрокаДока.Коэффициент=0,1,СтрокаДока.Коэффициент),СтрокаДока.КоэффициентУпаковкиКороба);
			ОбъектТовара.DMQty = СтрокаДока.Коэффициент;
			
			
				
			Попытка	
				DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.НоменклатураКороба.ВидНоменклатуры,СсылкаНаДок.Склад);
			Исключение
				DMUseSN = Ложь;
			Конецпопытки;		
			ОбъектТовара.DMArt.DMUseSN = DMUseSN;
			ОбъектТовара.DMArt.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.НоменклатураКороба,DMUseSN,Шаблон, УзелПО);


			
		Иначе
			
			//ОБЫЧНАЯ ЛОГИКА
			ОбъектТовара.DMArt.DMArtName = ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));				
			ОбъектТовара.DMArt.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
			ОбъектТовара.DMArt.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
			Попытка ОбъектТовара.DMArt.DMMeasureType = ?(СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки;
			ОбъектТовара.DMArt.DMArtPrice=СтрокаДока.Цена;
			
			Атрибуты = ПолучитьАтрибуты(УзелПО);			
			Для сч = 1 По 10 Цикл	
				Попытка
					ИмяАтрибута =  Атрибуты["ИмяАтрибута"+сч];
					Если ИмяАтрибута ="!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
						ОбъектТовара["DMArtAttr"+сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО,СтрокаДока.Номенклатура,ИмяАтрибута);
					ИначеЕсли ИмяАтрибута ="!!! Характеристики !!!" Тогда
						ОбъектТовара.DMArt["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Характеристика.Наименование);
					ИначеЕсли ЛЕВ(ИмяАтрибута,3) = "ДР_" Тогда 
						Попытка ОбъектТовара.DMArt["DMArtAttr"+сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.Номенклатура, ИмяАтрибута); Исключение КонецПопытки;	
					ИначеЕсли ИмяАтрибута <> "" Тогда
						ОбъектТовара.DMArt["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);							
					Иначе 
						ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
					КонецЕсли;	
					
				Исключение
					ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
				КонецПопытки;
				
			КонецЦикла;		
			
			СтрокаДока.Коэффициент=?(СтрокаДока.Коэффициент=0,1,СтрокаДока.Коэффициент);
			ОбъектТовара.DMQty = СтрокаДока.Коэффициент;
			
			
			Попытка	
				DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры,СсылкаНаДок.Склад);
			Исключение
				DMUseSN = Ложь;
			Конецпопытки;
			ОбъектТовара.DMArt.DMUseSN = DMUseSN;
			ОбъектТовара.DMArt.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.Номенклатура,DMUseSN,Шаблон, УзелПО);
			
			
			Если ЭтоДокументМДЛП Или УпаковкиМДЛП Тогда 
				ЧистаяМарка = ДатаМобайл_МДЛП.ДобавитьВМаркуУпрСимволы(СтрокаДока.Марка);	
			Иначе
				ЧистаяМарка = ДатаМобайл_Маркировка.УбратьСкобкиТеговМарка(СтрокаДока.Марка,ОбъектТовара.DMArt.DMMarkType);
			КонецЕсли;
			
			ОбъектТовара.DMPDFBarcode = ЧистаяМарка;	
			
		КонецЕсли;
		
				
		ОбъектСписка.DMArtQueryItemUPL.Добавить(ОбъектТовара);
		
		Если ПолучениеШапкиУпаковки Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;

	
	
КонецПроцедуры
Процедура ПолучитьНоменклатуруУпаковкиМДЛП(УзелПО,СсылкаНаДок,ОбъектСписка, Barcode,ЭтоДокументМДЛП)
	
	
	Если Лев(Barcode, 2) = "00" И (СтрДлина(Barcode) = 20 ИЛИ Найти(Barcode, "/") = 21) Тогда
		Barcode1 = "(00)" + Сред(Barcode, 3, 18);
		Barcode2 = Сред(Barcode, 3, 18);
	ИначеЕсли Лев(Barcode, 4) = "(00)" И (СтрДлина(Barcode) = 22 ИЛИ Найти(Barcode, "/") = 23) Тогда
		Barcode1 = "(00)" + Сред(Barcode, 5, 18);
		Barcode2 = Сред(Barcode, 5, 18);
	Иначе 
		Barcode1 = Barcode;
		Barcode2 = Barcode;		
	КонецЕсли;
	
	
	Шаблон = СсылкаНаДок.Шаблон;
	
	//КОРОБА
	Запрос = Новый Запрос;	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Марка
	|ПОМЕСТИТЬ Марки
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	(ШтрихкодыУпаковокТоваров.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода1
	|		ИЛИ ШтрихкодыУпаковокТоваров.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода2)
	|	И ШтрихкодыУпаковокТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И (ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|		ИЛИ (ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|			И ШтрихкодыУпаковокТоваров.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	|;
	|////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Марка,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ВключатьАртикул
	|			ТОГДА ВЫБОР
	|					КОГДА ШтрихкодыУпаковокТоваров.Номенклатура.Артикул = """"
	|						ТОГДА """"
	|					ИНАЧЕ ШтрихкодыУпаковокТоваров.Номенклатура.Артикул + "" ""
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ + ШтрихкодыУпаковокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Характеристика.Наименование, """") КАК НаименованиеТовара,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Наименование, ШтрихкодыУпаковокТоваров.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Числитель,0) = 0
	|				ТОГДА 1
	|				ИНАЧЕ ШтрихкодыУпаковокТоваров.Упаковка.Числитель
	|			КОНЕЦ
	|		ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество 
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ИтоговыеДанныеУпаковки
	|ИЗ
	|	Марки КАК Марки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|			ПО Марки.Марка = ШтрихкодыУпаковокТоваров.Ссылка	
	|;
	|////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИтоговыеДанныеУпаковки.Номенклатура КАК Номенклатура,
	|	ИтоговыеДанныеУпаковки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НайденныеТовары
	|ИЗ
	|	ИтоговыеДанныеУпаковки КАК ИтоговыеДанныеУпаковки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыСОстатками1С
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ТекущаяДата,
	|			Номенклатура В (ВЫБРАТЬ
	|									НайденныеТовары.Номенклатура КАК Номенклатура
	|								ИЗ 
	|									НайденныеТовары КАК НайденныеТовары)						
	|			И (&ВсеСклады ИЛИ Склад В (&Склады))
	|			И (&ВсеПомещения ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстаткиОстатки.Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыСРезервамиТСД
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ	
	|	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
	|		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
	|ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
	|ИЗ
	|	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК Характеристика,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество * (ВЫБОР
	|				КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель = 0
	|						ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель
	|			КОНЕЦ / ВЫБОР
	|				КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель = 0
	|						ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель
	|			КОНЕЦ), 0)) КАК ВРезервеТСД
	|ПОМЕСТИТЬ ТоварыСРезервамиТСД
	|ИЗ
	|	НайденныеТовары КАК НайденныеТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|	ПО НайденныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
	| 		И НайденныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЧИСЛО(19, 2))) КАК Цена
	|ПОМЕСТИТЬ ТоварыСЦенами
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ТекущаяДата, 
	|			Номенклатура В (ВЫБРАТЬ
	|									НайденныеТовары.Номенклатура КАК Номенклатура
	|								ИЗ 
	|									НайденныеТовары КАК НайденныеТовары)			
	|			И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговыеДанныеУпаковки.Марка КАК Марка,
	|	ИтоговыеДанныеУпаковки.Номенклатура КАК Номенклатура,
	|	ИтоговыеДанныеУпаковки.Характеристика КАК Характеристика,
	|	ИтоговыеДанныеУпаковки.НаименованиеТовара КАК НаименованиеТовара,
	|	ИтоговыеДанныеУпаковки.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	ИтоговыеДанныеУпаковки.ИспользоватьСерии КАК ИспользоватьСерии,
	|	ИтоговыеДанныеУпаковки.Коэффициент КАК Коэффициент,
	|	ЕСТЬNULL(ТоварыСОстатками1С.ВНаличии, 0) КАК ВНаличии,
	|	ЕСТЬNULL(ТоварыСОстатками1С.ВРезерве, 0) КАК ВРезерве,
	|	ЕСТЬNULL(ТоварыСРезервамиТСД.ВРезервеТСД, 0) КАК ВРезервеТСД,
	|	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена
	|ПОМЕСТИТЬ ИтоговыеДанные
	|ИЗ
	|	ИтоговыеДанныеУпаковки КАК ИтоговыеДанныеУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
	|		ПО (ИтоговыеДанныеУпаковки.Номенклатура = ТоварыСОстатками1С.Номенклатура)
	|			И (ИтоговыеДанныеУпаковки.Характеристика = ТоварыСОстатками1С.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
	|		ПО (ИтоговыеДанныеУпаковки.Номенклатура = ТоварыСРезервамиТСД.Номенклатура)
	|			И (ИтоговыеДанныеУпаковки.Характеристика = ТоварыСРезервамиТСД.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
	|		ПО (ИтоговыеДанныеУпаковки.Номенклатура = ТоварыСЦенами.Номенклатура)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговыеДанные.Марка КАК Марка,
	|	ИтоговыеДанные.Номенклатура КАК Номенклатура,
	|	ИтоговыеДанные.Характеристика КАК Характеристика,
	|	ИтоговыеДанные.НаименованиеТовара КАК НаименованиеТовара,
	|	ИтоговыеДанные.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	ИтоговыеДанные.ИспользоватьСерии КАК ИспользоватьСерии,
	|	СУММА(ИтоговыеДанные.Коэффициент) КАК Коэффициент,
	|	ИтоговыеДанные.ВНаличии КАК ВНаличии,
	|	ИтоговыеДанные.ВРезерве КАК ВРезерве,
	|	ИтоговыеДанные.ВРезервеТСД КАК ВРезервеТСД,
	|	ИтоговыеДанные.Цена КАК Цена
	|ИЗ
	|	ИтоговыеДанные КАК ИтоговыеДанные
	|СГРУППИРОВАТЬ ПО
	|	ИтоговыеДанные.Марка,
	|	ИтоговыеДанные.Номенклатура,
	|	ИтоговыеДанные.Характеристика,
	|	ИтоговыеДанные.НаименованиеТовара,
	|	ИтоговыеДанные.НаименованиеУпаковки,
	|	ИтоговыеДанные.ИспользоватьСерии,
	|	ИтоговыеДанные.ВНаличии,
	|	ИтоговыеДанные.ВРезерве,
	|	ИтоговыеДанные.ВРезервеТСД,
	|	ИтоговыеДанные.Цена
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыСОстатками1С
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыСРезервамиТСД
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокументыСРезервамиТСД
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыСРезервамиТСД
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыСЦенами
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Марки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НайденныеТовары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтоговыеДанныеУпаковки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтоговыеДанные";

	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ЗначениеШтрихкода1", Barcode1);
	Запрос.УстановитьПараметр("ЗначениеШтрихкода2", Barcode2);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".РеализацияТоваровУслуг.", "."+Шаблон.ВидДокумента+".");	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Товары КАК", "." + Шаблон.ИмяТабличнойЧастиПодбор + " КАК");	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИтоговыеДанныеУпаковки.Марка", """""");	
		

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДок.ИсходныйДокумент);
	Запрос.УстановитьПараметр("ВключатьАртикул", УзелПО.ДобавлятьАртикулВНаименование);
	Попытка 
		ТекущийСклад = СсылкаНаДок.Склад;
		СписокСкладов=Новый Массив;
		СписокСкладов.Добавить(ТекущийСклад);
	Исключение
		СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
	КонецПопытки;
	Запрос.УстановитьПараметр("Склады",СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
	
	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения",СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);

	Запрос.УстановитьПараметр("ТипЦен",УзелПО.ТипЦен);
	Запрос.УстановитьПараметр("ИсходноеЗадание",СсылкаНаДок);

	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();		
	
	Для каждого СтрокаДока ИЗ ТаблицаТоваров Цикл
		
		ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItemUPL"));
		ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt")); 
		ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode")); 
		
		ОбъектТовара.DMArt.DMArtName = ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));
		
		
		ОбъектТовара.DMArt.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
		ОбъектТовара.DMArt.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Попытка ОбъектТовара.DMArt.DMMeasureType = ?(СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки;
		ОбъектТовара.DMArt.DMArtPrice=СтрокаДока.Цена;
		
		Атрибуты = ПолучитьАтрибуты(УзелПО);			
		Для сч = 1 По 10 Цикл	
			Попытка
				ИмяАтрибута =  Атрибуты["ИмяАтрибута"+сч];
				Если ИмяАтрибута ="!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
					ОбъектТовара["DMArtAttr"+сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО,СтрокаДока.Номенклатура,ИмяАтрибута);
				ИначеЕсли ИмяАтрибута ="!!! Характеристики !!!" Тогда
					ОбъектТовара.DMArt["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Характеристика.Наименование);
				ИначеЕсли ЛЕВ(ИмяАтрибута,3) = "ДР_" Тогда 
					Попытка ОбъектТовара.DMArt["DMArtAttr"+сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.Номенклатура, ИмяАтрибута); Исключение КонецПопытки;	
				ИначеЕсли ИмяАтрибута <> "" Тогда
					ОбъектТовара.DMArt["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);							
				Иначе 
					ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
				КонецЕсли;	
				
			Исключение
				ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
			КонецПопытки;
			
		КонецЦикла;		
		
		СтрокаДока.Коэффициент=?(СтрокаДока.Коэффициент=0,1,СтрокаДока.Коэффициент);

		ОбъектТовара.DMQty = СтрокаДока.Коэффициент;
		
		Попытка	
			DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры,СсылкаНаДок.Склад);
		Исключение
			DMUseSN = Ложь;
		Конецпопытки;
		ОбъектТовара.DMArt.DMUseSN = DMUseSN;
		ОбъектТовара.DMArt.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.Номенклатура,DMUseSN,Шаблон, УзелПО);


		Если ЭтоДокументМДЛП Тогда 
			ЧистаяМарка = ДатаМобайл_МДЛП.ДобавитьВМаркуУпрСимволы(СтрокаДока.Марка);	
		Иначе
			ЧистаяМарка = ДатаМобайл_Маркировка.УбратьСкобкиТеговМарка(СтрокаДока.Марка,ОбъектТовара.DMArt.DMMarkType);
		КонецЕсли;
		
		ОбъектТовара.DMPDFBarcode = ЧистаяМарка;	
		
		Если ЗначениеЗаполнено(ОбъектТовара.DMPDFBarcode) Тогда 
			ОбъектСписка.DMArtQueryItemUPL.Добавить(ОбъектТовара); 
		КонецЕсли;   		
		
	КонецЦикла;

	
	
КонецПроцедуры
Функция ПолучитьТоварыБезЗаданияПоУпаковкамМДЛП(Barcode, ОсновнойЗапрос, УзелПО, СсылкаНаДок, МаркированныеТоварыВУпаковкиМДЛП)
	
	Если Лев(Barcode, 2) = "00" И (СтрДлина(Barcode) = 20 ИЛИ Найти(Barcode, "/") = 21) Тогда
		Barcode1 = "(00)" + Сред(Barcode, 3, 18);
		Barcode2 = Сред(Barcode, 3, 18);
	ИначеЕсли Лев(Barcode, 4) = "(00)" И (СтрДлина(Barcode) = 22 ИЛИ Найти(Barcode, "/") = 23) Тогда
		Barcode1 = "(00)" + Сред(Barcode, 5, 18);
		Barcode2 = Сред(Barcode, 5, 18);
	Иначе 
		Barcode1 = Barcode;
		Barcode2 = Barcode;		
	КонецЕсли;
	
	ЗапросПоУпаковкамМДЛП = Новый Запрос;
	ЗапросПоУпаковкамМДЛП.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковкиМДЛП.НомерУпаковки КАК НомерУпаковки,
	|	УпаковкиМДЛП.ГрупповаяУпаковка КАК ГрупповаяУпаковка
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|ГДЕ
	|	(УпаковкиМДЛП.НомерГрупповойУпаковки ПОДОБНО &ЗначениеШтрихкода1 СПЕЦСИМВОЛ ""$""
	|			ИЛИ УпаковкиМДЛП.НомерГрупповойУпаковки ПОДОБНО &ЗначениеШтрихкода2 СПЕЦСИМВОЛ ""$"")
	|	И УпаковкиМДЛП.НомерУпаковки <> """"";

	ЗапросПоУпаковкамМДЛП.УстановитьПараметр("ЗначениеШтрихкода1", Barcode1);
	ЗапросПоУпаковкамМДЛП.УстановитьПараметр("ЗначениеШтрихкода2", Barcode2);
	
	ТЗ = ЗапросПоУпаковкамМДЛП.Выполнить().Выгрузить();
	МассивЗначенийШтрихкодов = ТЗ.ВыгрузитьКолонку("НомерУпаковки");
	
	Если МассивЗначенийШтрихкодов.Количество() > 0 Тогда
		
		Если ТЗ[0].ГрупповаяУпаковка Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = ОсновнойЗапрос.Текст;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода1", 
			"ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода В (&МассивЗначенийШтрихкодов)");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИЛИ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода2)", "");
			
			Запрос.УстановитьПараметр("МассивЗначенийШтрихкодов", МассивЗначенийШтрихкодов);
			
			Для каждого СтрокаПараметр Из ОсновнойЗапрос.Параметры Цикл
				Запрос.УстановитьПараметр(СтрокаПараметр.Ключ, СтрокаПараметр.Значение);
			КонецЦикла; 
			
			Возврат Запрос.Выполнить().Выгрузить();
		Иначе
			МаркированныеТоварыВУпаковкиМДЛП = Истина;
			ТаблицаТоваров = ПолучитьТоварыБезЗадания(УзелПО, СсылкаНаДок, МассивЗначенийШтрихкодов, "", "");
			
			ТаблицаТоваров.Колонки.Добавить("НоменклатураКороба"	, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаТоваров.Колонки.Добавить("ХарактеристикаКороба"	, Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
			ТаблицаТоваров.Колонки.Добавить("Марка"					, Новый ОписаниеТипов("Строка"));
			
			Возврат ТаблицаТоваров;
						
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Новый Массив;
	
КонецФункции
Процедура ПолучитьСодержимоеУпаковки_НашУпаковочныйЛист(УзелПО,СсылкаНаДок,ОбъектСписка,Barcode)
	
	Шаблон = СсылкаНаДок.Шаблон;
	ТипЦен = УзелПО.ТипЦен;
	ВключатьАртикул=УзелПО.ДобавлятьАртикулВНаименование;
		
	
	Запрос = Новый Запрос; 	 
	Запрос.Текст = "ВЫБРАТЬ 
	|     ДатаМобайл_УпаковочныйЛистТовары.Штрихкод, 
	|     ДатаМобайл_УпаковочныйЛистТовары.Номенклатура,
	|	  ДатаМобайл_УпаковочныйЛистТовары.Характеристика,
	|     ДатаМобайл_УпаковочныйЛистТовары.Серия,
	|     СУММА(ДатаМобайл_УпаковочныйЛистТовары.КоличествоУпаковок) КАК Количество,
	|	  ДатаМобайл_УпаковочныйЛистТовары.Упаковка КАК Упаковка,
	|	  ДатаМобайл_УпаковочныйЛистТовары.Серия КАК Серия
	|ПОМЕСТИТЬ ДоступныеТовары
	|ИЗ 
	|     Документ.ДатаМобайл_УпаковочныйЛист.Товары КАК ДатаМобайл_УпаковочныйЛистТовары 
	|ГДЕ 
	|	(ДатаМобайл_УпаковочныйЛистТовары.Ссылка.Номер = &КодУпакЛиста
	|			ИЛИ ДатаМобайл_УпаковочныйЛистТовары.Ссылка.Код = &КодУпакЛиста) И НЕ ДатаМобайл_УпаковочныйЛистТовары.Ссылка.ПометкаУдаления 
	| 
	|СГРУППИРОВАТЬ ПО 
	|     ДатаМобайл_УпаковочныйЛистТовары.Номенклатура,
	|	  ДатаМобайл_УпаковочныйЛистТовары.Характеристика,
	|     ДатаМобайл_УпаковочныйЛистТовары.Штрихкод,
	|	  ДатаМобайл_УпаковочныйЛистТовары.Упаковка,
	|	  ДатаМобайл_УпаковочныйЛистТовары.Серия
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыСРезервамиТСД
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ	
	|	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
	|		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
	|ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
	|ИЗ
	|	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество * (ВЫБОР
	|							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель = 0
	|									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
	|								ТОГДА 1
	|							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель
	|						КОНЕЦ / ВЫБОР
	|							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель = 0
	|									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
	|								ТОГДА 1
	|							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель
	|						КОНЕЦ), 0)) КАК ВРезервеТСД
	|ПОМЕСТИТЬ ТоварыСРезервамиТСД
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|		ПО ДоступныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	|			И ДоступныеТовары.Упаковка = ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	|				И ДоступныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Упаковка,
	|	ДоступныеТовары.Характеристика,
	|	ДоступныеТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|	ДоступныеТовары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТоварыСОстатками1С
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(&ВсеСклады
	|					ИЛИ Склад В (&Склады))
	|				И (&ВсеПомещения
	|					ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
	|		ПО ДоступныеТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	|			И ДоступныеТовары.Характеристика = СвободныеОстаткиОстатки.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Характеристика,
	|	ДоступныеТовары.Номенклатура,
	|	ДоступныеТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ВЫБОР
	|				КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
	|			КОНЕЦ КАК ЧИСЛО(19, 2))) КАК Цена				   
	|ПОМЕСТИТЬ ТоварыСЦенами
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ДоступныеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Номенклатура,
	|	ДоступныеТовары.Характеристика,
	|	ДоступныеТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|    ДоступныеТовары.Серия КАК Серия,
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	|	ДоступныеТовары.Штрихкод КАК Штрихкод,
	|    ДоступныеТовары.Количество КАК Количество,
	|	ТоварыСОстатками1С.ВНаличии КАК ВНаличии,
	|	ТоварыСОстатками1С.ВРезерве КАК ВРезерве,
	|	ТоварыСРезервамиТСД.ВРезервеТСД КАК ВРезервеТСД,
	|	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ДоступныеТовары.Упаковка.Наименование, ДоступныеТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
	|	ЕСТЬNULL(ДоступныеТовары.Упаковка.Числитель, 1) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА &ВключатьАртикул
	|				И ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ВЫБОР
	|					КОГДА ДоступныеТовары.Номенклатура.Артикул = """"
	|						ТОГДА """"
	|					ИНАЧЕ ДоступныеТовары.Номенклатура.Артикул + "" ""
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ + ДоступныеТовары.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ДоступныеТовары.Характеристика.Наименование, """") КАК НаименованиеТовара,
	|	ЛОЖЬ КАК ЭтоНовыйТовар
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
	|		ПО ДоступныеТовары.Характеристика = ТоварыСРезервамиТСД.Характеристика
	|			И ДоступныеТовары.Номенклатура = ТоварыСРезервамиТСД.Номенклатура
	|			И ДоступныеТовары.Упаковка = ТоварыСРезервамиТСД.Упаковка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
	|		ПО ДоступныеТовары.Номенклатура = ТоварыСОстатками1С.Номенклатура
	|			И ДоступныеТовары.Характеристика = ТоварыСОстатками1С.Характеристика
	|			И ДоступныеТовары.Упаковка = ТоварыСОстатками1С.Упаковка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
	|		ПО ДоступныеТовары.Номенклатура = ТоварыСЦенами.Номенклатура
	|			И ДоступныеТовары.Характеристика = ТоварыСЦенами.Характеристика
	|			И ДоступныеТовары.Упаковка = ТоварыСЦенами.Упаковка
	|";
	
	Если Лев(Barcode,3) = "UPL" Тогда 
		КодУпакЛиста = Прав(Barcode,СтрДлина(Barcode)-3); 
	Иначе     
		КодУпакЛиста = Barcode; 
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("КодУпакЛиста", КодУпакЛиста); 
	Запрос.УстановитьПараметр("ТипЦен",ТипЦен);
	Запрос.УстановитьПараметр("ИсходныйДокумент",СсылкаНаДок.ИсходныйДокумент);
	Запрос.УстановитьПараметр("ИсходноеЗадание",СсылкаНаДок);          	
	Запрос.УстановитьПараметр("ВсеУпаковки",Шаблон.ВсеШтрихкодыТовара);
	
	СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
	Запрос.УстановитьПараметр("Склады",СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
	
	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения",СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);
	
	Запрос.УстановитьПараметр("ВключатьАртикул",ВключатьАртикул);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Рез = Запрос.Выполнить().Выгрузить(); 	
	Для каждого СтрокаДока ИЗ Рез Цикл 
		
		Итог = (СтрокаДока.ВНаличии-СтрокаДока.ВРезерве-СтрокаДока.ВРезервеТСД);
		Итог = Формат(Итог, ПолучитьФорматнуюСтрокуЧисла());
		СтрокаДока.Коэффициент=?(СтрокаДока.Коэффициент=0,1,СтрокаДока.Коэффициент);
				
		ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItemUPL")); 
		
		//Товар
		ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt")); 
		ОбъектТовара.DMArt.DMArtName=ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));
		ОбъектТовара.DMArt.DMArtID="8U-"+СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор())+СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
		ОбъектТовара.DMArt.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Попытка ОбъектТовара.DMArt.DMMeasureType = ?(СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки;
		ОбъектТовара.DMArt.DMArtPrice=СтрокаДока.Цена;
		
		Атрибуты = ПолучитьАтрибуты(УзелПО);			
		Для сч=1 По 10 Цикл	
			Попытка
				ИмяАтрибута =  Атрибуты["ИмяАтрибута"+сч];
				Если СтрокаДока.ЭтоНовыйТовар Тогда
					ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
				ИначеЕсли ИмяАтрибута ="!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
					ОбъектТовара.DMArt["DMArtAttr"+сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО,СтрокаДока.Номенклатура,ИмяАтрибута);
				ИначеЕсли ИмяАтрибута ="!!! Характеристики !!!" Тогда
					ОбъектТовара.DMArt["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Характеристика.Наименование);
				ИначеЕсли ЛЕВ(ИмяАтрибута,3) = "ДР_" Тогда 
					Попытка ОбъектТовара.DMArt["DMArtAttr"+сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.Номенклатура,ИмяАтрибута); Исключение КонецПопытки;		
				ИначеЕсли ИмяАтрибута <> "" Тогда
					ОбъектТовара.DMArt["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);							
				Иначе 
					ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
				КонецЕсли;
			Исключение
				ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
			КонецПопытки;
			
		КонецЦикла;
		
		
		ЭтоУслуга = Ложь;
		Попытка 
			Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЭтоУслуга = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		
		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектТовара.DMArt.DMRest=0;
		ИначеЕсли ЭтоУслуга Тогда
			ОбъектТовара.DMArt.DMRest=999;	
		Иначе
			ОбъектТовара.DMArt.DMRest=Итог;
		КонецЕсли;
		
				
		Попытка	
			DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры,СсылкаНаДок.Склад);
		Исключение
			DMUseSN = Ложь;
		Конецпопытки;
		ОбъектТовара.DMArt.DMUseSN = DMUseSN;
		ОбъектТовара.DMArt.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.Номенклатура,DMUseSN,Шаблон, УзелПО);

		
			Попытка
				Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
					ОбъектТовара.DMArt.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура);
				КонецЕсли;
			Исключение 
			КонецПопытки;
		
		//Штрихкод
		Если ЗначениеЗаполнено(СтрокаДока.ШтрихКод) Тогда
			ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode"));
			ОбъектТовара.DMBarcode.DMBarcode = ЧистаяСтрока(СтрокаДока.ШтрихКод);
			ОбъектТовара.DMBarcode.DMMeasureName = ЧистаяСтрока(СтрокаДока.НаименованиеУпаковки);
			
			Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
				ОбъектТовара.DMBarcode.DMMeasureK=1;
			Иначе	
				ОбъектТовара.DMBarcode.DMMeasureK=СтрокаДока.Коэффициент;
			КонецЕсли;
			ОбъектТовара.DMBarcode.DMUseSN = 2;
		КонецЕсли;
		
		//Количество в базовых
		ОбъектТовара.DMQty = СтрокаДока.Количество*СтрокаДока.Коэффициент; 
			
		//Серия 
		Попытка 
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
				ОбъектТовара.DMSN = ПолучитьЗначениеСерии(УзелПО,СтрокаДока.Номенклатура,СтрокаДока.Серия);
			КонецЕсли;	
		Исключение	 
		КонецПопытки;
		
		ОбъектСписка.DMArtQueryItemUPL.Добавить(ОбъектТовара); 
		
	КонецЦикла;
	
	
КонецПроцедуры
Процедура ПолучитьСодержимоеУпаковки_ТиповойУпаковочныйЛист(УзелПО,СсылкаНаДок,ОбъектСписка,Barcode)

	Шаблон = СсылкаНаДок.Шаблон;
	ТипЦен = УзелПО.ТипЦен;
	ВключатьАртикул=УзелПО.ДобавлятьАртикулВНаименование;
		
	
	Запрос = Новый Запрос; 	 
	Запрос.Текст = "ВЫБРАТЬ 
	|     """" КАК Штрихкод, 
	|     УпаковочныйЛистТовары.Номенклатура,
	|	  УпаковочныйЛистТовары.Характеристика,
	|     УпаковочныйЛистТовары.Серия,
	|     СУММА(УпаковочныйЛистТовары.КоличествоУпаковок) КАК Количество,
	|	  УпаковочныйЛистТовары.Упаковка КАК Упаковка,
	|	  УпаковочныйЛистТовары.Серия КАК Серия
	|ПОМЕСТИТЬ ДоступныеТовары
	|ИЗ 
	|     Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары 
	|ГДЕ 
	|	(УпаковочныйЛистТовары.Ссылка.Код = &КодУпакЛиста)  И НЕ УпаковочныйЛистТовары.Ссылка.ПометкаУдаления 
	| 
	|СГРУППИРОВАТЬ ПО 
	|     УпаковочныйЛистТовары.Номенклатура,
	|	  УпаковочныйЛистТовары.Характеристика,
	|	  УпаковочныйЛистТовары.Упаковка,
	|	  УпаковочныйЛистТовары.Серия
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыСРезервамиТСД
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ	
	|	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
	|		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
	|ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
	|ИЗ
	|	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество * (ВЫБОР
	|							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель = 0
	|									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
	|								ТОГДА 1
	|							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель
	|						КОНЕЦ / ВЫБОР
	|							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель = 0
	|									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
	|								ТОГДА 1
	|							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель
	|						КОНЕЦ), 0)) КАК ВРезервеТСД
	|ПОМЕСТИТЬ ТоварыСРезервамиТСД
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|		ПО ДоступныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	|			И ДоступныеТовары.Упаковка = ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	|				И ДоступныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Упаковка,
	|	ДоступныеТовары.Характеристика,
	|	ДоступныеТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|	ДоступныеТовары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТоварыСОстатками1С
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(&ВсеСклады
	|					ИЛИ Склад В (&Склады))
	|				И (&ВсеПомещения
	|					ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
	|		ПО ДоступныеТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	|			И ДоступныеТовары.Характеристика = СвободныеОстаткиОстатки.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Характеристика,
	|	ДоступныеТовары.Номенклатура,
	|	ДоступныеТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ВЫБОР
	|				КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
	|			КОНЕЦ КАК ЧИСЛО(19, 2))) КАК Цена				   
	|ПОМЕСТИТЬ ТоварыСЦенами
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ДоступныеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеТовары.Номенклатура,
	|	ДоступныеТовары.Характеристика,
	|	ДоступныеТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеТовары.Номенклатура КАК Номенклатура,
	|	ДоступныеТовары.Характеристика КАК Характеристика,
	|   ДоступныеТовары.Серия КАК Серия,
	|	ДоступныеТовары.Упаковка КАК Упаковка,
	|	ДоступныеТовары.Штрихкод КАК Штрихкод,
	|   ДоступныеТовары.Количество КАК Количество,
	|	ТоварыСОстатками1С.ВНаличии КАК ВНаличии,
	|	ТоварыСОстатками1С.ВРезерве КАК ВРезерве,
	|	ТоварыСРезервамиТСД.ВРезервеТСД КАК ВРезервеТСД,
	|	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ДоступныеТовары.Упаковка.Наименование, ДоступныеТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
	|	ЕСТЬNULL(ДоступныеТовары.Упаковка.Числитель, 1) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА &ВключатьАртикул
	|				И ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ВЫБОР
	|					КОГДА ДоступныеТовары.Номенклатура.Артикул = """"
	|						ТОГДА """"
	|					ИНАЧЕ ДоступныеТовары.Номенклатура.Артикул + "" ""
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ + ДоступныеТовары.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ДоступныеТовары.Характеристика.Наименование, """") КАК НаименованиеТовара,
	|	ЛОЖЬ КАК ЭтоНовыйТовар
	|ИЗ
	|	ДоступныеТовары КАК ДоступныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
	|		ПО ДоступныеТовары.Характеристика = ТоварыСРезервамиТСД.Характеристика
	|			И ДоступныеТовары.Номенклатура = ТоварыСРезервамиТСД.Номенклатура
	|			И ДоступныеТовары.Упаковка = ТоварыСРезервамиТСД.Упаковка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
	|		ПО ДоступныеТовары.Номенклатура = ТоварыСОстатками1С.Номенклатура
	|			И ДоступныеТовары.Характеристика = ТоварыСОстатками1С.Характеристика
	|			И ДоступныеТовары.Упаковка = ТоварыСОстатками1С.Упаковка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
	|		ПО ДоступныеТовары.Номенклатура = ТоварыСЦенами.Номенклатура
	|			И ДоступныеТовары.Характеристика = ТоварыСЦенами.Характеристика
	|			И ДоступныеТовары.Упаковка = ТоварыСЦенами.Упаковка
	|";
	
	Если Лев(Barcode,3) = "UPL" Тогда 
		КодУпакЛиста = Прав(Barcode,СтрДлина(Barcode)-3); 
	Иначе     
		КодУпакЛиста = Barcode; 
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("КодУпакЛиста", КодУпакЛиста); 
	Запрос.УстановитьПараметр("ТипЦен",ТипЦен);
	Запрос.УстановитьПараметр("ИсходныйДокумент",СсылкаНаДок.ИсходныйДокумент);
	Запрос.УстановитьПараметр("ИсходноеЗадание",СсылкаНаДок);          	
	Запрос.УстановитьПараметр("ВсеУпаковки",Шаблон.ВсеШтрихкодыТовара);
	
	СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
	Запрос.УстановитьПараметр("Склады",СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
	
	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения",СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);
	
	Запрос.УстановитьПараметр("ВключатьАртикул",ВключатьАртикул);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Рез = Запрос.Выполнить().Выгрузить(); 	
	Для каждого СтрокаДока ИЗ Рез Цикл 
		
		Итог = (СтрокаДока.ВНаличии-СтрокаДока.ВРезерве-СтрокаДока.ВРезервеТСД);
		Итог = Формат(Итог, ПолучитьФорматнуюСтрокуЧисла());
		СтрокаДока.Коэффициент=?(СтрокаДока.Коэффициент=0,1,СтрокаДока.Коэффициент);
				
		ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItemUPL")); 
		
		//Товар
		ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt")); 
		ОбъектТовара.DMArt.DMArtName=ЧистаяСтрока(СокрП(СтрокаДока.НаименованиеТовара));
		ОбъектТовара.DMArt.DMArtID="8U-"+СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор())+СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
		ОбъектТовара.DMArt.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура);
		Попытка ОбъектТовара.DMArt.DMMeasureType = ?(СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах, 1, 0); Исключение КонецПопытки;
		ОбъектТовара.DMArt.DMArtPrice=СтрокаДока.Цена;
		
		Атрибуты = ПолучитьАтрибуты(УзелПО);			
		Для сч=1 По 10 Цикл	
			Попытка
				ИмяАтрибута =  Атрибуты["ИмяАтрибута"+сч];
				Если СтрокаДока.ЭтоНовыйТовар Тогда
					ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
				ИначеЕсли ИмяАтрибута ="!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
					ОбъектТовара.DMArt["DMArtAttr"+сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО,СтрокаДока.Номенклатура,ИмяАтрибута);
				ИначеЕсли ИмяАтрибута ="!!! Характеристики !!!" Тогда
					ОбъектТовара.DMArt["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Характеристика.Наименование);
				ИначеЕсли ЛЕВ(ИмяАтрибута,3) = "ДР_" Тогда 
					Попытка ОбъектТовара.DMArt["DMArtAttr"+сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрокаДока.Номенклатура,ИмяАтрибута); Исключение КонецПопытки;		
				ИначеЕсли ИмяАтрибута <> "" Тогда
					ОбъектТовара.DMArt["DMArtAttr"+сч] = ЧистаяСтрока(СтрокаДока.Номенклатура[ИмяАтрибута]);							
				Иначе 
					ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
				КонецЕсли;
			Исключение
				ОбъектТовара.DMArt["DMArtAttr"+сч] = "";
			КонецПопытки;
			
		КонецЦикла;
		
		
		ЭтоУслуга = Ложь;
		Попытка 
			Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЭтоУслуга = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		
		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектТовара.DMArt.DMRest=0;
		ИначеЕсли ЭтоУслуга Тогда
			ОбъектТовара.DMArt.DMRest=999;	
		Иначе
			ОбъектТовара.DMArt.DMRest=Итог;
		КонецЕсли;
		
		Попытка	
			DMUseSN = ПолучитьПризнакУчетаСерий(СтрокаДока.Номенклатура.ВидНоменклатуры,СсылкаНаДок.Склад);
		Исключение
			DMUseSN = Ложь;
		Конецпопытки;
		ОбъектТовара.DMArt.DMUseSN = DMUseSN;
		ОбъектТовара.DMArt.Params = СформироватьЗаголовкиJSONParamsТовара(СтрокаДока.Номенклатура,DMUseSN,Шаблон, УзелПО);

			  
			Попытка
				Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
					ОбъектТовара.DMArt.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура);
				КонецЕсли;
			Исключение 
			КонецПопытки;

		//Штрихкод		
		ТекущийШтрихкод = ПолучитьШтрихкодУпаковки(СтрокаДока.Номенклатура, СтрокаДока.Характеристика, СтрокаДока.Упаковка); 
		Если ЗначениеЗаполнено(ТекущийШтрихкод) Тогда
			ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode"));
			ОбъектТовара.DMBarcode.DMBarcode = ЧистаяСтрока(ТекущийШтрихкод);
			ОбъектТовара.DMBarcode.DMMeasureName = ЧистаяСтрока(СтрокаДока.НаименованиеУпаковки);
			
			Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
				ОбъектТовара.DMBarcode.DMMeasureK=1;
			Иначе	
				ОбъектТовара.DMBarcode.DMMeasureK=СтрокаДока.Коэффициент;
			КонецЕсли;
			ОбъектТовара.DMBarcode.DMUseSN = 2;
		КонецЕсли;
		
		//Количество в базовых
		ОбъектТовара.DMQty = СтрокаДока.Количество*СтрокаДока.Коэффициент; 
			
		//Серия 
		Попытка
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
				ОбъектТовара.DMSN = ПолучитьЗначениеСерии(УзелПО,СтрокаДока.Номенклатура,СтрокаДока.Серия);
			КонецЕсли;	
		Исключение	 
		КонецПопытки;
		
		ОбъектСписка.DMArtQueryItemUPL.Добавить(ОбъектТовара); 
		
	КонецЦикла;
	
КонецПроцедуры

Функция OnEgaisPalletScan(SN, UserName, Barcode, DocOutID, Cell)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryInfoUPL"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);  
	КонецЕсли;	
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("OnEgaisPalletScan. Не нашли документ. ");
		Возврат ОбъектСписка;
	КонецПопытки;
	
	Шаблон = СсылкаНаДок.Шаблон;	
	ШаблонЕГАИС = Шаблон.ЕГАИС;	
	
	Если НЕ ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
		
		//во входящей ттн упаковки смотрим в самом доке	
		Если ШаблонЕГАИС И Шаблон.ВидДокумента = "ТТНВходящаяЕГАИС" Тогда
			
			ТЗМарок = ДатаМобайл_ОбщийМодуль.ПолучитьМаркиВходящейТТН_ЕГАИС(СсылкаНаДок.ИсходныйДокумент);
			
			//поиск палет
			СтруктураПоискаМарок = Новый Структура("Палета",Barcode);
			СтрокиПоискаМарок = ТЗМарок.НайтиСтроки(СтруктураПоискаМарок);	
			Для каждого СтрокаДока ИЗ СтрокиПоискаМарок Цикл
				ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItemUPL"));
				ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt"));
				ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode"));
				//ОбъектТовара.DMArt.DMArtName=ЧистаяСтрока(СтрокаДока.АлкогольнаяПродукция.Наименование);
				ОбъектТовара.DMQty = 1;  
				ОбъектТовара.DMBarcode.DMBarcode = "";
				ОбъектТовара.DMPDFBarcode = СтрокаДока.Марка;		 
				ОбъектТовара.DMIsCompared = ТоварСопоставленОдинКОдному(СтрокаДока.АлкогольнаяПродукция);
				ОбъектСписка.DMArtQueryItemUPL.Добавить(ОбъектТовара);
			КонецЦикла;
			
			//поиск коробов
			СтруктураПоискаМарок = Новый Структура("Короб",Barcode);
			СтрокиПоискаМарок = ТЗМарок.НайтиСтроки(СтруктураПоискаМарок);	
			Для каждого СтрокаДока ИЗ СтрокиПоискаМарок Цикл
				ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItemUPL"));
				ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt"));
				ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode"));
				//ОбъектТовара.DMArt.DMArtName=ЧистаяСтрока(СтрокаДока.АлкогольнаяПродукция.Наименование);
				ОбъектТовара.DMQty = 1;  
				ОбъектТовара.DMBarcode.DMBarcode = "";
				ОбъектТовара.DMPDFBarcode = СтрокаДока.Марка;		 
				ОбъектТовара.DMIsCompared = ТоварСопоставленОдинКОдному(СтрокаДока.АлкогольнаяПродукция);
				ОбъектСписка.DMArtQueryItemUPL.Добавить(ОбъектТовара);
			КонецЦикла;
			
		Иначе	  
			
			//Упаковки Из 1С	
			ТЗМарок = ПолучитьТаблицуУпакованныхМарок(Barcode);
			Если ТЗМарок.Количество()>0 Тогда
				
				Для каждого СтрокаДока ИЗ ТЗМарок Цикл	
					ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItemUPL"));
					ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt"));
					ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode"));
					//ОбъектТовара.DMArt.DMArtName=ЧистаяСтрока(СтрокаДока.АлкогольнаяПродукция.Наименование);
					ОбъектТовара.DMQty = 1;  
					ОбъектТовара.DMBarcode.DMBarcode = "";
					ОбъектТовара.DMPDFBarcode = СтрокаДока.Марка;
					ОбъектТовара.DMIsCompared = ТоварСопоставленОдинКОдному(СтрокаДока.АлкогольнаяПродукция); 
					ОбъектСписка.DMArtQueryItemUPL.Добавить(ОбъектТовара);
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;
		
		
	Иначе
		
		
		//Если Шаблон.ЕГАИСОнлайнПроверка Тогда
		//	ТЗМарок = ДатаМобайл_ОбщийМодуль.ПолучитьТаблицуУпакованногоТовараАСТ(Barcode);
		//	Для каждого СтрокаДока ИЗ ТЗМарок Цикл			
		//		ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItemUPL"));
		//		ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt"));
		//		ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode"));
		//		ОбъектТовара.DMArt.DMArtName=ЧистаяСтрока(СтрокаДока.АлкогольнаяПродукция.Наименование);
		//		ОбъектТовара.DMArt.DMArtID = "8e-"+Строка(СтрокаДока.АлкогольнаяПродукция.УникальныйИдентификатор());
		//		ОбъектТовара.DMIsCompared = Истина; //предполагаем что в упаковках находится уже сопоставленная продукция с новыми марками
		//		ОбъектТовара.DMQty = СтрокаДока.Количество;				
		//		ОбъектТовара.DMBarcode.DMBarcode = "";
		//		//ОбъектТовара.DMPDFBarcode = СтрокаДока.Марка;	
		//		
		//		ОбъектСписка.DMArtQueryItemUPL.Добавить(ОбъектТовара);			
		//	КонецЦикла;	
		//Иначе
			ТЗМарок = ДатаМобайл_ОбщийМодуль.ПолучитьТаблицуУпакованныхМарокАСТ(Barcode);
			Для каждого СтрокаДока ИЗ ТЗМарок Цикл	
				ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItemUPL"));
				ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt"));
				ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode"));
				//ОбъектТовара.DMArt.DMArtName=ЧистаяСтрока(СтрокаДока.АлкогольнаяПродукция.Наименование);
				ОбъектТовара.DMQty = 1;  
				ОбъектТовара.DMBarcode.DMBarcode = "";
				ОбъектТовара.DMPDFBarcode = СтрокаДока.Марка;
				ОбъектТовара.DMIsCompared = ТоварСопоставленОдинКОдному(СтрокаДока.АлкогольнаяПродукция); 
				ОбъектСписка.DMArtQueryItemUPL.Добавить(ОбъектТовара);
			КонецЦикла;
			
		//КонецЕсли;
		
		
	КонецЕсли;
	Возврат ОбъектСписка;
КонецФункции
Функция OnDocScan(SN, UserName, Barcode, TemplateID)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocList"));
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);  
	КонецЕсли;	
	
	Попытка 
		ГУИД = ПолучитьГУИДПоШтрихкоду(Barcode);
		УникальныйИдентификатор = Новый УникальныйИдентификатор(ГУИД);
	Исключение 
		Возврат ОбъектСписка; 
	КонецПопытки;

	НайденныйДокумет1С = Неопределено;
	НайденныйШаблон = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(TemplateID) Тогда
		
		НайденныйВидДокумента1С = Неопределено;

		//Выберем доступные для ТСД шаблоны		
		СписокШаблонов = УзелПО.Шаблоны.ВыгрузитьКолонку("Шаблон");
		
		Если СписокШаблонов.Количество() > 0 Тогда		
		Иначе
			ВыборкаШаблонов = Справочники.ДатаМобайл_ШаблоныДокументов.Выбрать();
			Пока ВыборкаШаблонов.Следующий() Цикл 
		    	СписокШаблонов.Добавить(ВыборкаШаблонов.Ссылка);
			КонецЦикла;	
		КонецЕсли;
		
		//Попробуем найти документ 1С по доступным шаблонам 		
		Для каждого ТекущийШаблон Из СписокШаблонов Цикл
			Если ТекущийШаблон.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущийШаблон.ВидДокумента) Тогда
				Продолжить;
			КонецЕсли;

			Попытка
				СсылкаНаОбъектГуид = Документы[ТекущийШаблон.ВидДокумента].ПолучитьСсылку(УникальныйИдентификатор);	
				Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
					НайденныйДокумет1С = СсылкаНаОбъектГуид;
					НайденныйВидДокумента1С = ТекущийШаблон.ВидДокумента;
					НайденныйШаблон = ТекущийШаблон;
					Прервать;
				КонецЕсли;		
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		
		Если НайденныйВидДокумента1С = Неопределено Тогда
			Возврат ОбъектСписка;
		КонецЕсли;

		//Проверим что шаблон с этим видом документа только один (иначе надо на ТСД было зайти в нужный шаблон)
		Сч = 0; 
		
		Для каждого ТекущийШаблон Из СписокШаблонов Цикл
			Если ТекущийШаблон.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущийШаблон.ВидДокумента) Тогда
				Продолжить;
			КонецЕсли;

			Если ТекущийШаблон.ВидДокумента = НайденныйВидДокумента1С Тогда
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если Сч <> 1 Тогда
			Возврат ОбъектСписка;
		КонецЕсли;
		
	Иначе		
		НайденныйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоКоду(TemplateID);
		
		Если НЕ ЗначениеЗаполнено(НайденныйШаблон.ВидДокумента) Тогда
			Возврат ОбъектСписка;
		КонецЕсли;

		Попытка
			СсылкаНаОбъектГуид = Документы[НайденныйШаблон.ВидДокумента].ПолучитьСсылку(УникальныйИдентификатор);	
			НайденныйДокумет1С = Неопределено;
			
			Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
				НайденныйДокумет1С = СсылкаНаОбъектГуид;
			КонецЕсли;
		Исключение
			Возврат ОбъектСписка;	
		КонецПопытки;
		
	КонецЕсли;	
	
	Если НайденныйДокумет1С = Неопределено Тогда
		Возврат ОбъектСписка;
	КонецЕсли;

	Если НайденныйШаблон = Неопределено Тогда
		Возврат ОбъектСписка;
	КонецЕсли;	
		
	Попытка 
		//Попробуем найти текущий документ в АРМ
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДатаМобайл_ДокументыТСД.Ссылка
		|ИЗ
		|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
		|ГДЕ
		|	ДатаМобайл_ДокументыТСД.Шаблон = &Шаблон
		|	И ДатаМобайл_ДокументыТСД.ИсходныйДокумент = &НайденныйДокумет1С
		|	И НЕ ДатаМобайл_ДокументыТСД.ПометкаУдаления";
		
		ВидДокумента1С = НайденныйДокумет1С.Метаданные().Имя;
		Запрос.УстановитьПараметр("Шаблон",НайденныйШаблон);
		Запрос.УстановитьПараметр("НайденныйДокумет1С",НайденныйДокумет1С);
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ДокументДМСсылка = Результат.Ссылка;					
			
		Иначе
			//Попробуем создать новый док							
			НовыйДок=Справочники.ДатаМобайл_ДокументыТСД.СоздатьЭлемент();
			НовыйДок.ИсходныйДокумент=НайденныйДокумет1С;
			НовыйДок.Шаблон=НайденныйШаблон;
			НовыйДок.ТСД=УзелПО;
			НовыйДок.Записать();
			
			ДокументДМСсылка =  НовыйДок.Ссылка;
		КонецЕсли;			
		
	Исключение 
		Возврат ОбъектСписка;
	КонецПопытки;	
		
	Запрос = Новый Запрос(
	//1) Запрос на DMIsMarkDoc = Ложь	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Номер, """") КАК DMNumber,
	|	ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК DMDate,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.ПометкаУдаления, ИСТИНА)
	|				ИЛИ ДатаМобайл_ДокументыТСДИзменения.Ссылка.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			    ИЛИ НЕ(&ВсеСклады
	|						ИЛИ 
	|						(ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|						ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) В (&Склады)
	|						ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.СкладПолучатель, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) В (&Склады)))
	|		    	ИЛИ НЕ(&ВсеПомещения	
	|						ИЛИ 
	|						(ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Помещение, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|						ИЛИ ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Помещение, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) В (&Помещения)))
	|				ИЛИ НЕ(&ВсеШаблоны
	|						ИЛИ ДатаМобайл_ДокументыТСДИзменения.Ссылка.Шаблон В (&Шаблон))
	//|				ИЛИ ВЫБОР
	//|					КОГДА НЕ(ДатаМобайл_ДокументыТСДИзменения.Ссылка.ТСД = &ТСД
	//|								ИЛИ ДатаМобайл_ДокументыТСДИзменения.Ссылка.ТСД = ЗНАЧЕНИЕ(планобмена.датамобайл_списоктсд.пустаяссылка))
	//|						ТОГДА ИСТИНА
	//|				КОНЕЦ
	|				ИЛИ ВЫБОР
	|					КОГДА ЕСТЬNULL(Количество(СписокТерминаловВсего.ТСД),0)=0 И НЕ (ДатаМобайл_ДокументыТСДИзменения.Ссылка.ТСД = &ТСД ИЛИ ДатаМобайл_ДокументыТСДИзменения.Ссылка.ТСД = ЗНАЧЕНИЕ(планобмена.датамобайл_списоктсд.пустаяссылка))
	|						ТОГДА ИСТИНА
	|					КОГДА ЕСТЬNULL(Количество(СписокТерминаловВсего.ТСД),0)<>0 И ЕСТЬNULL(Количество(СписокТерминаловКонкретный.ТСД),0)=0
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК DMisMarkDoc,
	|	ДатаМобайл_ДокументыТСДИзменения.Ссылка КАК ДокСсылка,
	|	ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Номер, """") КАК DMBarcode,
	|	ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Комментарий, """") КАК DMComment,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.ДатаЗавершенияСбора, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК DMisLoaded,
	|	ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Клиент, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК КлиентСсылка,
	|	ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Склад.Наименование, """") КАК DMWarehouseName,
	|	ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Склад.Ссылка, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладСсылка,
	|	ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.СкладПолучатель.Наименование, """") КАК DMWarehouseName2,
	|	ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.СкладПолучатель.Ссылка, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладПолучательСсылка,
	|	ЕСТЬNULL(ДатаМобайл_ДокументыТСДИзменения.Ссылка.Шаблон.Ссылка, ЗНАЧЕНИЕ(Справочник.ДатаМобайл_ШаблоныДокументов.ПустаяСсылка)) КАК ШаблонСсылка
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСДИзменения
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СписокТерминалов КАК СписокТерминаловВсего
	|		ПО ДатаМобайл_ДокументыТСДИзменения.Ссылка = СписокТерминаловВсего.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СписокТерминалов КАК СписокТерминаловКонкретный
	|		ПО ДатаМобайл_ДокументыТСДИзменения.Ссылка = СписокТерминаловКонкретный.Ссылка
	|		И  (СписокТерминаловКонкретный.ТСД = &ТСД ИЛИ СписокТерминаловКонкретный.ТСД = ЗНАЧЕНИЕ(планобмена.датамобайл_списоктсд.пустаяссылка))
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДИзменения.Ссылка = &НовыйДокумент 
	|
	|СГРУППИРОВАТЬ ПО 
	|  	ДатаМобайл_ДокументыТСДИзменения.Ссылка");
	
	СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
	ВсеСклады=?(СписокСкладов.Количество() = 0,Истина,Ложь);
	
	СписокШаблонов=УзелПО.Шаблоны.ВыгрузитьКолонку("Шаблон");
	ВсеШаблоны=?(СписокШаблонов.Количество() = 0,Истина,Ложь);
	
	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	ВсеПомещения=?(СписокПомещений.Количество() = 0,Истина,Ложь);

	Запрос.УстановитьПараметр("ТСД",УзелПО.Ссылка);
	Запрос.УстановитьПараметр("НовыйДокумент",ДокументДМСсылка);
	
	Запрос.УстановитьПараметр("Склады",СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады",ВсеСклады);
	
	Запрос.УстановитьПараметр("Помещения",СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения",ВсеПомещения);

	Запрос.УстановитьПараметр("Шаблон",СписокШаблонов);
	Запрос.УстановитьПараметр("ВсеШаблоны",ВсеШаблоны);
	
	Рез = Запрос.Выполнить().Выбрать(); 
	
	Пока Рез.Следующий() Цикл
		ОбъектДока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocHead"));
		ОбъектШаблона = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMTemplate"));
		ОбъектКлиента = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMClient"));
		
		Если Не ЗначениеЗаполнено(Рез.КлиентСсылка) Тогда
			ОбъектКлиента.DMClientID = "";
			ОбъектКлиента.DMName = "";
			ОбъектКлиента.DMBarcode = "";
		Иначе
			ОбъектКлиента.DMClientID = "8k-" + СокрЛП(Рез.КлиентСсылка.УникальныйИдентификатор());
			ОбъектКлиента.DMName = ЧистаяСтрока(Рез.КлиентСсылка.Наименование);
			Попытка ОбъектКлиента.DMBarcode=Рез.КлиентСсылка.Код; Исключение ОбъектКлиента.DMBarcode=""; КонецПопытки;
		КонецЕсли;

		ОбъектДока.DMClient = ОбъектКлиента;
		ЗаполнитьЗначенияСвойств(ОбъектДока,Рез);
		ОбъектДока.DMDocOutID = "d82-"+Строка(Рез.ДокСсылка.УникальныйИдентификатор());
		
		ЗаполнитьОбъектШаблона(ОбъектШаблона,Рез.ШаблонСсылка);
				
		ОбъектДока.DMisMark = Рез.DMisMarkDoc;
		ОбъектДока.DMTemplate = ОбъектШаблона;
		ОбъектДока.DMComment = ЧистаяСтрока(ОбъектДока.DMComment);
		ОбъектДока.DMBarcode = ЧистаяСтрока(ОбъектДока.DMBarcode);
		
		ОбъектСклада = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMWarehouse"));
		ОбъектСклада.DMWarehouseID = ?(ЗначениеЗаполнено(Рез.СкладСсылка),СокрЛП(Рез.СкладСсылка.УникальныйИдентификатор()),"");
		ОбъектСклада.DMWarehouseName = Рез.DMWarehouseName;
		ОбъектДока.DMWarehouse = ОбъектСклада;
		
		ОбъектСклада2 = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMWarehouse"));
		ОбъектСклада2.DMWarehouseID = ?(ЗначениеЗаполнено(Рез.СкладПолучательСсылка),СокрЛП(Рез.СкладПолучательСсылка.УникальныйИдентификатор()),"");
		ОбъектСклада2.DMWarehouseName = Рез.DMWarehouseName2;
		ОбъектДока.DMWarehouse2 = ОбъектСклада2;
	 
		//Дополнительные формы
		ОбъектСпискаДополнительныхФорм = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocStepList"));
		ЗапросДополнительныхФорм = Новый Запрос;
		ЗапросДополнительныхФорм.Текст = "ВЫБРАТЬ
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма.Ссылка КАК Ссылка,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Порядок КАК Порядок,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки КАК РеквизитИзШапки,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ПроверятьЗаполнение
		|ИЗ
		|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
		|ГДЕ
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон = &Шаблон
		|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма.ПометкаУдаления = ЛОЖЬ";
		
		ЗапросДополнительныхФорм.УстановитьПараметр("Шаблон", Рез.ШаблонСсылка);
		
		РезультатЗапросаДополнительныхФорм = ЗапросДополнительныхФорм.Выполнить();
		ВыборкаДополнительныхФорм = РезультатЗапросаДополнительныхФорм.Выбрать();
		
		Пока ВыборкаДополнительныхФорм.Следующий() Цикл
			ОбъектДополнительныхФорм = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocStep"));
			ОбъектДополнительныхФорм.DMStepId = ?(ВыборкаДополнительныхФорм.Ссылка = Неопределено,"",СокрЛП(ВыборкаДополнительныхФорм.Ссылка.УникальныйИдентификатор()));
			ОбъектДополнительныхФорм.DMDocId = "d82-"+Строка(Рез.ДокСсылка.УникальныйИдентификатор());
			ОбъектДополнительныхФорм.DMSortNumber = ВыборкаДополнительныхФорм.Порядок;
			ОбъектДополнительныхФорм.DMIsDocArg = ВыборкаДополнительныхФорм.РеквизитИзШапки;
			ОбъектДополнительныхФорм.DMCheckFill = ВыборкаДополнительныхФорм.ПроверятьЗаполнение;
			ОбъектСпискаДополнительныхФорм.DMDocStep.Добавить(ОбъектДополнительныхФорм);
		КонецЦикла;  
		
		ОбъектДока.DMSteps = ОбъектСпискаДополнительныхФорм;
		
		//Штрихкод от 1С	
		Попытка
			ОбъектДока.DMBarcode = ЧисловойКодПоСсылке(Рез.ДокСсылка.ИсходныйДокумент);
		Исключение
			ОбъектДока.DMBarcode = "";
		КонецПопытки;
		
		ОбъектДока.DMNumber = ЧистаяСтрока(ОбъектДока.DMNumber);
		ОбъектДока.Params = СформироватьЗаголовкиJSONParamsДокумента(Рез.ДокСсылка);

		ОбъектСписка.DMDocHead.Добавить(ОбъектДока);
	КонецЦикла;		

	Возврат ОбъектСписка; 
	
КонецФункции
Функция ПолучитьГУИДПоШтрихкоду(Barcode)
	
	Штрихкод16 = ДатаМобайл_ОбщийМодуль.ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Barcode);
	
	Если СтрДлина(Штрихкод16) < 32 Тогда
		
		Пока СтрДлина(Штрихкод16) < 32 Цикл
			Штрихкод16 = Строка("0")+Штрихкод16;
		КонецЦикла;
		
	КонецЕсли;
	
	ГУИД = Сред(Штрихкод16, 1,  8)
	+ "-" + Сред(Штрихкод16, 9,  4)
	+ "-" + Сред(Штрихкод16, 13, 4)
	+ "-" + Сред(Штрихкод16, 17, 4)
	+ "-" + Сред(Штрихкод16, 21, 12);
	
	Возврат ГУИД;
	
КонецФункции	
Процедура ЗаполнитьОбъектШаблона(ОбъектШаблона,ШаблонСсылка)
	
	Запрос = Новый Запрос(
	//1) Запрос на DMIsMarkDoc = Ложь	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.Код, 0) КАК DMTemplateID,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.Наименование, """") КАК DMTemplateName,
	|	ИСТИНА КАК DMuseAllBarcode,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПометкаУдаления, ЛОЖЬ) КАК DMisMark,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.РазрешеноСозданиеНаТСД, ЛОЖЬ) КАК DMEnableNew,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ОбновлятьПриКаждомОткрытии, ЛОЖЬ) КАК DMLoadRowsOnOpen,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ОбновлятьТоварыСДокументом, ЛОЖЬ) КАК DMLoadArtsWithRows,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ЗапретитьРучноеИзменениеКлиента, ЛОЖЬ) КАК DMDisableManualChangeClient,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ЗапретитьИзменениеКлиентаКардРидером, ЛОЖЬ) КАК DMDisableReaderChangeClient,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.КардРидер_Трек1, ЛОЖЬ) КАК DMreaderTrack1Use,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.КардРидер_Трек2, ЛОЖЬ) КАК DMreaderTrack2Use,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.КардРидер_Трек3, ЛОЖЬ) КАК DMreaderTrack3Use,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ГенерацияПаклистаНаСервере, 0) КАК DMnewPackOnWS,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ШтрихкодыТолькоПоШаблонам, ЛОЖЬ) КАК DMuseBCTemplates,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользоватьПодбор, ЛОЖЬ) КАК DMuse_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользоватьПриемку, ЛОЖЬ) КАК DMuse_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПриемкаПоПодбору, ЛОЖЬ) КАК DMuseSelectLogAsInsertTask,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПриПриемкеЗапрашиватьТовар, ЛОЖЬ) КАК DMuseArt_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.РазрешитьВыгрузкуНеполногоДокумента, 0) КАК DMonUploadIncorrectDoc,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.РазрешитьВыгрузкуНеполногоДокументаВариант, 0) КАК DMonUploadIncorrectDocOption,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПриСканированииТовараПодбор, 0) КАК DMonArtScan_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПриСканированииТовараПриемка, 0) КАК DMonArtScan_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПриПревышенииЗаданияПодбор, 0) КАК DMonTaskQty_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПриПревышенииЗаданияПриемка, 0) КАК DMonTaskQty_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПриПревышенииЛимитаПодбор, 0) КАК DMonLimitQty_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПриПревышенииЛимитаПриемка, 0) КАК DMonLimitQty_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользованиеЯчеекПодбор, 0) КАК DMuseCell_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользованиеЯчеекПриемка, 0) КАК DMuseCell_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользованиеУпаковочныхЛистовПодбор, 0) КАК DMusePack_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользованиеУпаковочныхЛистовПриемка, 0) КАК DMusePack_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.УчитыватьЯчеекВЗаданииПодбор, ЛОЖЬ) КАК DMuseCellOnTask_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.УчитыватьЯчеекВЗаданииПриемка, ЛОЖЬ) КАК DMuseCellOnTask_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.УчитыватьСерийниковВЗаданииПодбор, ЛОЖЬ) КАК DMuseSNOnTask_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.УчитыватьСерийниковВЗаданииПриемка, ЛОЖЬ) КАК DMuseSNOnTask_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.РучнойВводКоличестваПодбор, ЛОЖЬ) КАК DMquantEnable_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.РучнойВводКоличестваПриемка, ЛОЖЬ) КАК DMquantEnable_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПодтверждатьЭнтеромПодбор, ЛОЖЬ) КАК DMenterToCommit_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПодтверждатьЭнтеромПриемка, ЛОЖЬ) КАК DMenterToCommit_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ОтсылатьГотовуюЗаписьНаСерверПодбор, ЛОЖЬ) КАК DMwriteRecordToWS_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ОтсылатьГотовуюЗаписьНаСерверПриемка, ЛОЖЬ) КАК DMwriteRecordToWS_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПечатьЭтикеткиПриПриемке, 0) КАК DMPrintLabel_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПечатьЭтикеткиПриПодборе, 0) КАК DMPrintLabel_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользованиеСерийниковПодбор, 0) КАК DMuseSN_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользованиеСерийниковПриемка, 0) КАК DMuseSN_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПоштучноеПеремещение, 0) КАК DMoneArtReplaceMode,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ПриСканированииНовогоТовара, 0) КАК DMonNewArt,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.УникальныеШтрихкодыНоменклатурыВДокументе, ЛОЖЬ) КАК DMuniquebarcodedoc,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ГрупповаяРабота, ЛОЖЬ) КАК DMMultiDoc,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ГрупповаяРаботаЗвуковоеОповещение, ЛОЖЬ) КАК DMMultiDocSound,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ГрупповаяРаботаИнтервалОпроса, 0) КАК DMMultiDocTimeout,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ВыгрузкаЯчеекПодбор, 0) КАК DMEnterCell_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ВыгрузкаЯчеекПриемка, 0) КАК DMEnterCell_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ЕГАИС, ЛОЖЬ) КАК DMUseEgais,
	|	ЛОЖЬ КАК DMUseDateBottling,
	|	0 КАК DMUseDataMatrixBarcode,
	|	0 КАК DMEnterPDF417Barcode,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.СопоставлениеЕГАИС, ЛОЖЬ) КАК DMEgaisCompare,
	|	0 КАК DMUseBlankA,
	|	0 КАК DMUseBlankB,
	|	ЛОЖЬ КАК DMUseCheckMark,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ЗагружатьСписокЯчеекССервераПодбор, ЛОЖЬ) КАК DMGetCellsListFromServerSelect,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ЗагружатьСписокЯчеекССервераПриемка, ЛОЖЬ) КАК DMGetCellsListFromServerInsert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.УникальныеСерийныеНомераПодбор, ЛОЖЬ) КАК DMIsUniqueSNSelect,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.УникальныеСерийныеНомераПриемка, ЛОЖЬ) КАК DMIsUniqueSNInsert,
	|	1 КАК DMEgaisVersion,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользоватьСервисRateGoods, ЛОЖЬ) КАК DMUseOnlineArtsCatalog,
	|	ЛОЖЬ КАК DMGetDateBottlingFromServer,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ОповеститьОНовомДокументе, ЛОЖЬ) КАК DMAlertNewDoc,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользоватьМаркировку, ЛОЖЬ) КАК DMUseMark,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ОбработкаЯчейкиЦеликомПодбор, ЛОЖЬ) КАК DMFullyCell_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ОбработкаЯчейкиЦеликомПриемка, ЛОЖЬ) КАК DMFullyCell_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.СерНомНеПустойПодбор, ЛОЖЬ) КАК DMSNNotNull_Select,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.СерНомНеПустойПриемка, ЛОЖЬ) КАК DMSNNotNull_Insert,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ИспользоватьФотофиксацию, ЛОЖЬ) КАК is_use_photo_fixation,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ВводТовараБезСканирования, ЛОЖЬ) КАК DMNoScanArts,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ВводЯчейкиБезСканирования, ЛОЖЬ) КАК DMNoScanCells,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.УдалитьОстатокЗаданияПослеВводаСтроки, ЛОЖЬ) КАК DMDeleteLeftTaskQty,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.МаркировкаСканироватьEAN, 0) КАК DMMark_NeedEanScan,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.МаркировкаEANсоответствуетGTIN, ЛОЖЬ) КАК DMMark_EanIsGtin,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.МаркировкаДополнительныйПоискПоКМ, ЛОЖЬ) КАК DMMark_AdditionalSearchByMC,
	|   ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ДополнительныеФормыСТоваром, ЛОЖЬ) КАК DMFormsWithArt,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.ДополнительныеФормыОнлайнОбновлениеСправочника, ЛОЖЬ) КАК DMUserbooksOnline,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.РазрешитьПропускатьВводУпаковочногоЛиста, ЛОЖЬ) КАК DMCanPackSkip,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.МаркировкаЗапретитьПодборНемаркируемыхТоваров, ЛОЖЬ) КАК DMMark_IsOnlyMarkArt,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка.МаркировкаВводМаркируемогоТовараБезКМ, 0) КАК DMMark_ArtMarkEnterType,
	|	ЕСТЬNULL(ДатаМобайл_ШаблоныДокументов.Ссылка, ЗНАЧЕНИЕ(Справочник.ДатаМобайл_ШаблоныДокументов.ПустаяСсылка)) КАК ШаблонСсылка
	|ИЗ
	|	Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов
	|ГДЕ
	|	ДатаМобайл_ШаблоныДокументов.Ссылка = &ШаблонСсылка");
		

	Запрос.УстановитьПараметр("ШаблонСсылка",ШаблонСсылка);
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ОбъектШаблона,Рез);
		ОбъектШаблона.Params = СформироватьЗаголовкиJSONParamsШаблона(Рез.ШаблонСсылка);
		
	КонецЦикла;	

	
КонецПроцедуры

Функция OnNewPack(SN, UserName, DocID)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocID,5)));
	Исключение	
		ВызватьИсключениеВС("OnNewPack. Не нашли документ. ");
		Возврат ""; 
	КонецПопытки;	
	Шаблон = СсылкаНаДок.Шаблон;

			
	Если Шаблон.ИспользоватьМаркировку Тогда
		
		Если УзелПО.ПрефиксКомпанииGS1 = 0 Тогда
			ВызватьИсключениеВС("OnNewPack. В настройках терминала не задан параметр: ПрефиксКомпанииGS1");
		КонецЕсли;
		
		СледующийНомерSSCC = ДатаМобайл_Маркировка.ПолучитьСледующийНомерSSCC(УзелПО.ЦифраРасширения, УзелПО.ПрефиксКомпанииGS1);
		
		ДатаМобайл_Маркировка.СоздатьСправочникСсылкаУпаковка(СледующийНомерSSCC);
		
		Если Лев(СледующийНомерSSCC, 4) = "(00)" Тогда
			СледующийНомерSSCC = "[00]" + Сред(СледующийНомерSSCC, 5);
		КонецЕсли;
		
		Возврат СледующийНомерSSCC;

	Иначе
		ДокументУпаковочногоЛиста=Документы.ДатаМобайл_УпаковочныйЛист.СоздатьДокумент();
		ДокументУпаковочногоЛиста.Дата = ТекущаяДата();
		ДокументУпаковочногоЛиста.Основание = СсылкаНаДок.ИсходныйДокумент;
		ДокументУпаковочногоЛиста.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(UserName,Ложь);
		ДокументУпаковочногоЛиста.ТСД = УзелПО;
		ДокументУпаковочногоЛиста.Записать();
		
		Попытка
			Если Шаблон.ИспользоватьТиповыеУпаковочныеЛисты Тогда
				ДокументУпаковочногоЛистаТиповой = Документы.УпаковочныйЛист.СоздатьДокумент();	
				ДокументУпаковочногоЛистаТиповой.Дата = ТекущаяДата();
				ДокументУпаковочногоЛистаТиповой.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
				ДокументУпаковочногоЛистаТиповой.Код = ДокументУпаковочногоЛиста.Номер;
				ДокументУпаковочногоЛистаТиповой.Упаковал = ДокументУпаковочногоЛиста.Ответственный;
				
				Попытка ДокументУпаковочногоЛистаТиповой.СкладУпаковки = СсылкаНаДок.Склад; Исключение КонецПопытки;
				
				Если СсылкаНаДок.Шаблон.ВидДокумента = "РасходныйОрдерНаТовары" Тогда 
					Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
					Модуль_ПрефиксацияОбъектовКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
					РеквизитыОрдера = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок.ИсходныйДокумент, "Получатель, Номер");
					Основание = НСтр("ru = '%Получатель% / Ордер %Номер%'");
					Основание = СтрЗаменить(Основание,"%Получатель%",РеквизитыОрдера.Получатель);
					Основание = СтрЗаменить(Основание,"%Номер%",Модуль_ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОрдера.Номер));	
					ДокументУпаковочногоЛистаТиповой.Основание =  Основание;
				Иначе
					Если ЗначениеЗаполнено(СсылкаНаДок.ИсходныйДокумент) Тогда
						ДокументУпаковочногоЛистаТиповой.Основание =  СсылкаНаДок.ИсходныйДокумент;
					КонецЕсли;	
				КонецЕсли;
				
				ДокументУпаковочногоЛистаТиповой.Записать();	
				
				ДокументУпаковочногоЛиста.ТиповойУпаковочныйЛист = ДокументУпаковочногоЛистаТиповой.Ссылка;
				ДокументУпаковочногоЛиста.Записать();
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		Возврат "UPL"+ДокументУпаковочногоЛиста.Номер;
	КонецЕсли;
	
КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция OnWriteRowStepValues(SN, UserName, DMStepValueList)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Для каждого ДополнительнаяФорма Из DMStepValueList.DMStepValue Цикл   
		// Аргументы пакета: DMStepId  DMValue DMDocId DMArtId DMRowId
		Если НЕ ЗначениеЗаполнено(ДополнительнаяФорма.DMStepId) Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнительнаяФормаСсылка = Справочники.ДатаМобайл_ДополнительныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(ДополнительнаяФорма.DMStepId)));
		Если ДополнительнаяФормаСсылка = Справочники.ДатаМобайл_ДополнительныеФормы.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			РегЗначениеФормы = РегистрыСведений.ДатаМобайл_ЗначенияДополнительныхФорм.СоздатьМенеджерЗаписи();
			РегЗначениеФормы.Документ = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ДополнительнаяФорма.DMDocId,5)));
			
			Если ЗначениеЗаполнено(СокрЛП(ДополнительнаяФорма.DMArtId)) Тогда
				РегЗначениеФормы.Номенклатура=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ДополнительнаяФорма.DMArtId,4,36)));
				
				ИДХК=Сред(ДополнительнаяФорма.DMArtID,40,36);
				Попытка
					Если ИДХК<>"00000000-0000-0000-0000-000000000000" Тогда
						РегЗначениеФормы.Характеристика=Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
					КонецЕсли;	
				Исключение	
				КонецПопытки;
			КонецЕсли;
			Если ЗначениеЗаполнено(СокрЛП(ДополнительнаяФорма.DMRowId)) Тогда
			РегЗначениеФормы.ИдентификаторСтроки = Число(ДополнительнаяФорма.DMRowId);
			КонецЕсли;
			РегЗначениеФормы.ДополнительнаяФорма = ДополнительнаяФормаСсылка;
			РегЗначениеФормы.Значение = СокрЛП(ДополнительнаяФорма.DMValue);	
			
			РегЗначениеФормы.Записать(Истина);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
Функция OnWriteRecSelect(SN,UserName,DocOutID,СтрокаДокумента)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		СтрокаЛогирования = Новый Структура;
		УникальностьЛогирования = Новый УникальныйИдентификатор;
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("OnWriteRecSelect.Начали",УзелПО,,СтрокаЛогирования,UserName,УникальностьЛогирования);
	КонецЕсли;

	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("OnWriteRec. Не найден документ. ");
		Возврат Ложь;
	КонецПопытки;
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок,"ТСД,ДатаНачалаСбора,ДатаЗавершенияСбора,Шаблон,ИсходныйДокумент,Склад");
	ДокТСД = ЗначенияРеквизитовСсылкаНаДок.ТСД;
	ДокДатаНачалаСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаНачалаСбора;
	ДокДатаЗавершенияСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаЗавершенияСбора;
	Шаблон = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	ИсходныйДокумент = ЗначенияРеквизитовСсылкаНаДок.ИсходныйДокумент;
	Склад  = ЗначенияРеквизитовСсылкаНаДок.Склад;

	Если Шаблон = Неопределено Тогда
		ВызватьИсключениеВС("OnWriteRec. Не нашли запись документа. ");
		Возврат Ложь;
	КонецЕсли;

	ЗначенияРеквизитовШаблон = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,"ГрупповаяРабота,ПечатьЭтикеткиСерииПодбор,ЕГАИС,ИспользоватьМаркировку,МаркировкаОнлайнПроверкаВложенностиУпаковок,ОтсылатьГотовуюЗаписьНаСерверПодбор,ИспользованиеУпаковочныхЛистовПодбор,МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки,ПриПревышенииЗаданияПодбор,ВидДокумента,БыстроеСканирование,МаркировкаЗапретитьПовторнуюАгрегациюКМ,КонтролироватьОстатокПоСериям");
	Шаблон_ГрупповаяРабота = ЗначенияРеквизитовШаблон.ГрупповаяРабота;

	Шаблон_ПечатьЭтикеткиСерииПодбор = ЗначенияРеквизитовШаблон.ПечатьЭтикеткиСерииПодбор;
	Шаблон_ЕГАИС = ЗначенияРеквизитовШаблон.ЕГАИС;
	Шаблон_ИспользоватьМаркировку = ЗначенияРеквизитовШаблон.ИспользоватьМаркировку;
	Шаблон_МаркировкаОнлайнПроверкаВложенностиУпаковок = ЗначенияРеквизитовШаблон.МаркировкаОнлайнПроверкаВложенностиУпаковок;
	Шаблон_ОтсылатьГотовуюЗаписьНаСерверПодбор = ЗначенияРеквизитовШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор;
	Шаблон_ИспользованиеУпаковочныхЛистовПодбор = ЗначенияРеквизитовШаблон.ИспользованиеУпаковочныхЛистовПодбор;
	Шаблон_МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки = ЗначенияРеквизитовШаблон.МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки;
	Шаблон_МаркировкаЗапретитьПовторнуюАгрегациюКМ = ЗначенияРеквизитовШаблон.МаркировкаЗапретитьПовторнуюАгрегациюКМ;
	Шаблон_ПриПревышенииЗаданияПодбор = ЗначенияРеквизитовШаблон.ПриПревышенииЗаданияПодбор;
	Шаблон_ВидДокумента = ЗначенияРеквизитовШаблон.ВидДокумента;
	Шаблон_БыстроеСканирование = ЗначенияРеквизитовШаблон.БыстроеСканирование;
	Шаблон_КонтролироватьОстатокПоСериям = ЗначенияРеквизитовШаблон.КонтролироватьОстатокПоСериям; 
	
	 
	

	Если ЗначениеЗаполнено(ДокТСД) Тогда
		Если ДокТСД<>УзелПО Тогда
			ВызватьИсключениеВС("OnWriteRec. Чужой документ. ");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ДокДатаЗавершенияСбора<>Дата(1,1,1) Тогда
		ВызватьИсключениеВС("OnWriteRec. Закрытый документ. ");
		Возврат Ложь;
	КонецЕсли;	
	
	
	//ЗАПИСЬ	
	Если НЕ Шаблон_ГрупповаяРабота И НЕ Шаблон_БыстроеСканирование Тогда
		//ОБЫЧНАЯ ЛОГИКА
		Попытка
			Объект=СсылкаНаДок.ПолучитьОбъект();
		Исключение
		КонецПопытки;
		
		Если Объект = неопределено Тогда
			ВызватьИсключениеВС("OnWriteRec. Не нашли документ. ");
			Возврат Ложь;
		КонецЕсли;
		
		//НачатьТранзакцию();
		//
		//Блокировка = Новый БлокировкаДанных;
		//ЭлементБлокировки = Блокировка.Добавить("Справочник.ДатаМобайл_ДокументыТСД");
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаДок);
		//Блокировка.Заблокировать();

	Иначе
		Объект = Неопределено;	
	КонецЕсли;
	
	//ПРОВЕРКА ДУБЛЕЙ
	Если ПроверитьЗаписи("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,Объект) Тогда
		Возврат Истина;
	Иначе
	КонецЕсли;
	
	//ПРОВЕРКА СЕРИЙ/СЕРИЙНЫХ НОМЕРОВ
	Если СтрокаДокумента.DMSN<>"" И СтрокаДокумента.DMSN<>"[]" Тогда
		ШаблонПроверкиСерии = "";
		Если СерияНеПодходит(УзелПО,СсылкаНаДок,СтрокаДокумента,ШаблонПроверкиСерии) Тогда
			ВызватьИсключениеВС("OnWriteRec. Серийный номер "+СтрокаДокумента.DMSN+" не соответсвует шаблону "+ШаблонПроверкиСерии);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
		
	//СТРУКТУРА СТРОКИ
	СтруктураСтроки = ПолучитьСтруктуруСтрокиДокумента("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,UserName);
	
	//ПРОВЕРКА ПРИНАДЛЕЖНОСТИ ЯЧЕЙКИ К СКЛАДУ ДОКУМЕНТА
	Если ЗначениеЗаполнено(СтруктураСтроки.ЯчейкаСсылка) И НЕ СтруктураСтроки.Количество < 0 Тогда
		Если Шаблон_ГрупповаяРабота Тогда
			СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеекГрупповаяРабота(СсылкаНаДок);			
		Иначе
			СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеек(СсылкаНаДок.СобранныеДанныеПодбор.Выгрузить());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СкладЯчеек) И НЕ СтруктураСтроки.ЯчейкаСсылка.Владелец = СкладЯчеек Тогда
			ВызватьИсключениеВС("Введены ячейки разных складов в одном документе, строка не может быть записана!");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//УдалениеЗначенийДополнительныхФорм
	Если СтруктураСтроки.Количество < 0 Тогда
		ДатаМобайл_ОбщийМодуль.УдалитьЗначениеФормыПоСтроке(СсылкаНаДок, СтруктураСтроки.ИдентификаторСтроки);
	КонецЕсли;
	
	//ПРОВЕРКА ОСТАТКОВ ПО СЕРИЯМ
	Если Шаблон_КонтролироватьОстатокПоСериям И СтрокаДокумента.DMSN<>"" И СтрокаДокумента.DMSN<>"[]" И СтруктураСтроки.Количество>0 Тогда 		
		СообщениеОПревышении="";
		Если ПроверитьПревышениеОстатковПоСерии(УзелПО,СсылкаНаДок,СтрокаДокумента,СтруктураСтроки,СообщениеОПревышении) Тогда
			ВызватьИсключениеВС(СообщениеОПревышении);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	//ПЕЧАТЬ ЭТИКЕТОК СЕРИЙ/СЕРИЙНЫХ НОМЕРОВ
	Если Шаблон_ПечатьЭтикеткиСерииПодбор И СтрокаДокумента.DMSN<>"" И СтрокаДокумента.DMSN<>"[]" И СтруктураСтроки.Количество>0 Тогда
		ОтправитьСериюНаПечать(SN,UserName,DocOutID,СтруктураСтроки);	
	КонецЕсли;	

	//ПРОВЕРКА УНИКАЛЬНОСТИ МАРКИ ЕГАИС ПРИ ГРУППОВОЙ РАБОТЕ
	Если Шаблон_ГрупповаяРабота И Шаблон_ЕГАИС И СтрокаДокумента.DMQuant>0 И СтрокаДокумента.DMPDFBarcode<>""  Тогда	
		Если ПроверитьУникальностьМаркиЕгаисГрупповогоЗадания("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,СтруктураСтроки) Тогда
			ВызватьИсключениеВС("OnWriteRec. Данная марка уже была отсканирована ранее. ");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	//ПРОВЕРКА УНИКАЛЬНОСТИ КМ ПРИ ГРУППОВОЙ РАБОТЕ
	Если Шаблон_ГрупповаяРабота И Шаблон_ИспользоватьМаркировку И СтрокаДокумента.DMQuant>0 И СтрокаДокумента.DMPDFBarcode<>""  Тогда	
		Если ПроверитьУникальностьКодаМаркировкиГрупповогоЗадания("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,СтруктураСтроки) Тогда
			ВызватьИсключениеВС("OnWriteRec. Данный КМ уже был отсканирован ранее. ");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	//ПРОВЕРКА УНИКАЛЬНОСТИ КМ ПРИ РАБОТЕ С УПАКОВКАМИ
	Если Шаблон_ИспользоватьМаркировку И Шаблон_МаркировкаОнлайнПроверкаВложенностиУпаковок И СтрокаДокумента.DMQuant>0  Тогда
		Если БылоСканированиеУпаковкиВСоставеДругойВЭтомДокументе(СтруктураСтроки, СсылкаНаДок, Шаблон) Тогда
			ВызватьИсключениеВС("OnWriteRec. Нарушение состава упаковки при сканировании (вложение Или агрегат уже были отсканированы в документе ранее).");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	//ПРОВЕРКА УПАКОВКИ КМ ПРИ АГРЕГАЦИИ
	Если Шаблон_ИспользоватьМаркировку И Шаблон_ОтсылатьГотовуюЗаписьНаСерверПодбор И Шаблон_ИспользованиеУпаковочныхЛистовПодбор<>0 И Шаблон_ИспользованиеУпаковочныхЛистовПодбор<>2 И СтрокаДокумента.DMQuant>0  Тогда				
		Если Шаблон_МаркировкаЗапретитьПовторнуюАгрегациюКМ Тогда
			Если КодМаркировкиУжеАгрегирован(СтруктураСтроки, СсылкаНаДок, Шаблон) Тогда
				ВызватьИсключениеВС("OnWriteRec. Код маркировки уже помещен в другую упаковку");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Если Шаблон_МаркировкаЗапретитьАгрегациюВЗаполненныеУпаковки Тогда
			Если УпаковочныйЛистУжеИмеетВложенность(СтруктураСтроки, СсылкаНаДок, Шаблон) Тогда
				ВызватьИсключениеВС("OnWriteRec. Групповая упаковка не может быть использована, т.к. уже была заполнена ранее");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	
	
	
	//ПРЕВЫШЕНИЕ ПРИ ГРУППОВОЙ РАБОТЕ
	Если Шаблон_ГрупповаяРабота И Шаблон_ПриПревышенииЗаданияПодбор = 2 Тогда	
		Если ПроверитьПревышениеГрупповогоЗадания("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,СтруктураСтроки) Тогда
			ВызватьИсключениеВС("OnWriteRec. Превышено задание по данной номенклатуре. ");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;

	// аст ПРЕВЫШЕНИЕ ПО СПРАВКАМ ЕГАИС
	Если Шаблон_ЕГАИС И Шаблон_ВидДокумента = "астТоварноТранспортныеНакладныеИзЕГАИС" И Шаблон_ПриПревышенииЗаданияПодбор = 2  И СтрокаДокумента.DMQuant>0 Тогда
		
		Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
		ТипДокумента = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныйДокумент, "ТипДокумента");
		
		Если ТипДокумента = ПредопределенноеЗначение("Перечисление.астТипыАктовТоварноТранспортныхНакладныхЕГАИС.Исходящий") Тогда		

			ЗначениеВозврата = ПроверитьПревышениеЗаданияПоСправкамЕГАИС("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,СтруктураСтроки);
			
			Если ЗначениеВозврата = 1 Тогда
				ВызватьИсключениеВС("OnWriteRec. Превышено задание по данной справке Б.");
				Возврат Ложь;
			ИначеЕсли ЗначениеВозврата = 2 Тогда
				ВызватьИсключениеВС("OnWriteRec. Не найдена справка Б в документе.");
				Возврат Ложь;
			ИначеЕсли ЗначениеВозврата = 3 Тогда
				ВызватьИсключениеВС("OnWriteRec. Не найдена справка Б по новой марке.");
				Возврат Ложь;	
			КонецЕсли;			
		КонецЕсли;	
	КонецЕсли;
	
	//ЗАПИСЬ МАРОК
	Если Шаблон_ЕГАИС Тогда
		Если СтрокаДокумента.DMDecodedPDFBarcode <> "" Тогда

		КонецЕсли;	
	КонецЕсли;
	
	
	//ЗАПИСЬ	
	Если НЕ Шаблон_ГрупповаяРабота И НЕ Шаблон_БыстроеСканирование Тогда
				
		Если Не ЗначениеЗаполнено(ДокДатаНачалаСбора) Тогда
			Объект.ДатаНачалаСбора=ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокТСД) Тогда
			Объект.ТСД=УзелПО;
		КонецЕсли;

		НоваяСтрока=Объект.СобранныеДанныеПодбор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураСтроки);
		
		Попытка
			Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			Объект.ОбменДанными.Получатели.Очистить();
			Объект.ОбменДанными.Получатели.Заполнить();
			Объект.ОбменДанными.Получатели.Удалить(УзелПО);
			Объект.ДополнительныеСвойства.Вставить("ЗапросВСервисЧЗ", Истина);
			Объект.Записать();
			
			//ЗафиксироватьТранзакцию();

		Исключение
			ВызватьИсключениеВС("OnWriteRec. Не смогли записать документ. ");
			Возврат Ложь;
		КонецПопытки;

	Иначе
		//ГРУППОВОЙ ДОКУМЕНТ
		ДатаМобайл_ОбщийМодуль.СоздатьЗаписиГрупповогоДокумента(СтруктураСтроки);
		
		Если Шаблон_ГрупповаяРабота Тогда			
			ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаНачалаСбора");	
			Если Не ЗначениеЗаполнено(ДатаСбораПоТСД)  Тогда	
				ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(SN, СсылкаНаДок, UserName);		
			КонецЕсли;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ДокДатаНачалаСбора) Тогда
			Попытка
				Объект=СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора=ТекущаяДата();
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ДополнительныеСвойства.Вставить("ЗапросВСервисЧЗ", Истина);
				Объект.Записать();
			Исключение
			КонецПопытки;	
			
		КонецЕсли;
	
	КонецЕсли;	
	
	//ЛОГИРОВАНИЕ
	Если ДатаМобайл_ОбщийМодуль.ИспользоватьЛогирование() Тогда
		ДатаМобайл_ОбщийМодуль.ЛогированиеДействий("OnWriteRecSelect.Закончили",УзелПО,,СтрокаЛогирования,UserName,УникальностьЛогирования);
	КонецЕсли;

	Возврат Истина;
КонецФункции
Функция OnWriteRecInsert(SN,UserName,DocOutID,СтрокаДокумента)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("OnWriteRec. Не найден документ. ");
		Возврат Ложь;
	КонецПопытки;
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок,"ТСД,ДатаНачалаСбора,ДатаЗавершенияСбора,Шаблон,ИсходныйДокумент,Склад");
	ДокТСД = ЗначенияРеквизитовСсылкаНаДок.ТСД;
	ДокДатаНачалаСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаНачалаСбора;
	ДокДатаЗавершенияСбора = ЗначенияРеквизитовСсылкаНаДок.ДатаЗавершенияСбора;
	Шаблон = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	ИсходныйДокумент = ЗначенияРеквизитовСсылкаНаДок.ИсходныйДокумент;
	Склад  = ЗначенияРеквизитовСсылкаНаДок.Склад;

	Если Шаблон = Неопределено Тогда
		ВызватьИсключениеВС("OnWriteRec. Не нашли запись документа. ");
		Возврат Ложь;
	КонецЕсли;

	ЗначенияРеквизитовШаблон = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,"ГрупповаяРабота,ОтсылатьГотовуюЗаписьНаСерверПриемка,ПриПревышенииЗаданияПриемка,ВидДокумента,БыстроеСканирование");
	Шаблон_ГрупповаяРабота = ЗначенияРеквизитовШаблон.ГрупповаяРабота;
	
	Шаблон_ОтсылатьГотовуюЗаписьНаСерверПриемка = ЗначенияРеквизитовШаблон.ОтсылатьГотовуюЗаписьНаСерверПриемка;
	Шаблон_ПриПревышенииЗаданияПриемка = ЗначенияРеквизитовШаблон.ПриПревышенииЗаданияПриемка;
	Шаблон_ВидДокумента = ЗначенияРеквизитовШаблон.ВидДокумента;
	Шаблон_БыстроеСканирование = ЗначенияРеквизитовШаблон.БыстроеСканирование;

	
	Если ЗначениеЗаполнено(ДокТСД) Тогда
		Если ДокТСД<>УзелПО Тогда
			ВызватьИсключениеВС("OnWriteRec. Чужой документ. ");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ДокДатаЗавершенияСбора<>Дата(1,1,1) Тогда
		ВызватьИсключениеВС("OnWriteRec. Закрытый документ. ");
		Возврат Ложь;
	КонецЕсли;	
	

	//ЗАПИСЬ	
	Если НЕ Шаблон_ГрупповаяРабота И НЕ Шаблон_БыстроеСканирование Тогда
		//ОБЫЧНАЯ ЛОГИКА
		Попытка
			Объект=СсылкаНаДок.ПолучитьОбъект();
		Исключение
		КонецПопытки;
		
		Если Объект = неопределено Тогда
			ВызватьИсключениеВС("OnWriteRec. Не нашли документ. ");
			Возврат Ложь;
		КонецЕсли;
		
		//НачатьТранзакцию();
		//
		//Блокировка = Новый БлокировкаДанных;
		//ЭлементБлокировки = Блокировка.Добавить("Справочник.ДатаМобайл_ДокументыТСД");
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаДок);
		//Блокировка.Заблокировать();

	Иначе
		Объект = Неопределено;	
	КонецЕсли;

	//ПРОВЕРКА ДУБЛЕЙ
	Если ПроверитьЗаписи("Insert",УзелПО,СсылкаНаДок,СтрокаДокумента,Объект) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//ПРОВЕРКА СЕРИЙ/СЕРИЙНЫХ НОМЕРОВ
	Если СтрокаДокумента.DMSN<>"" И СтрокаДокумента.DMSN<>"[]" Тогда
		ШаблонПроверкиСерии = "";
		Если СерияНеПодходит(УзелПО,СсылкаНаДок,СтрокаДокумента,ШаблонПроверкиСерии) Тогда
			ВызватьИсключениеВС("OnWriteRec. Серийный номер "+СтрокаДокумента.DMSN+" не соответсвует шаблону "+ШаблонПроверкиСерии);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	//СТРУКТУРА СТРОКИ
	СтруктураСтроки = ПолучитьСтруктуруСтрокиДокумента("Insert",УзелПО,СсылкаНаДок,СтрокаДокумента,UserName);
	
	//ПРОВЕРКА ПРИНАДЛЕЖНОСТИ ЯЧЕЙКИ К СКЛАДУ ДОКУМЕНТА
	Если ЗначениеЗаполнено(СтруктураСтроки.ЯчейкаСсылка) И НЕ СтруктураСтроки.Количество < 0 Тогда
		Если Шаблон_ГрупповаяРабота Тогда
			СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеекГрупповаяРабота(СсылкаНаДок);			
		Иначе
			СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеек(СсылкаНаДок.СобранныеДанныеПриемка.Выгрузить());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СкладЯчеек) И НЕ СтруктураСтроки.ЯчейкаСсылка.Владелец = СкладЯчеек Тогда
			ВызватьИсключениеВС("Введены ячейки разных складов в одном документе, строка не может быть записана!");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//УдалениеЗначенийДополнительныхФорм
	Если СтруктураСтроки.Количество < 0 Тогда
		ДатаМобайл_ОбщийМодуль.УдалитьЗначениеФормыПоСтроке(СсылкаНаДок, СтруктураСтроки.ИдентификаторСтроки);
	КонецЕсли;
	
	//ПРЕВЫШЕНИЕ ПРИ ГРУППОВОЙ РАБОТЕ
	Если Шаблон_ГрупповаяРабота И Шаблон_ПриПревышенииЗаданияПриемка = 2 Тогда	
		Если ПроверитьПревышениеГрупповогоЗадания("Insert",УзелПО,СсылкаНаДок,СтрокаДокумента,СтруктураСтроки) Тогда
			ВызватьИсключениеВС("OnWriteRec. Превышено задание по данной номенклатуре. ");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
		
	//ЗАПИСЬ	
	Если НЕ Шаблон_ГрупповаяРабота И НЕ Шаблон_БыстроеСканирование Тогда
				
		Если Не ЗначениеЗаполнено(ДокДатаНачалаСбора) Тогда
			Объект.ДатаНачалаСбора=ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокТСД) Тогда
			Объект.ТСД=УзелПО;
		КонецЕсли;

		НоваяСтрока=Объект.СобранныеДанныеПриемка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураСтроки);
		
		Попытка
			Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			Объект.ОбменДанными.Получатели.Очистить();
			Объект.ОбменДанными.Получатели.Заполнить();
			Объект.ОбменДанными.Получатели.Удалить(УзелПО);

			Объект.Записать();
			
			//ЗафиксироватьТранзакцию();

		Исключение
			ВызватьИсключениеВС("OnWriteRec. Не смогли записать документ. ");
			Возврат Ложь;
		КонецПопытки;
		
	Иначе
		
		//ГРУППОВОЙ ДОКУМЕНТ
		ДатаМобайл_ОбщийМодуль.СоздатьЗаписиГрупповогоДокумента(СтруктураСтроки);
		
		Если Шаблон_ГрупповаяРабота Тогда
					
			ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаНачалаСбора");	
			Если Не ЗначениеЗаполнено(ДатаСбораПоТСД)  Тогда	
				ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(SN, СсылкаНаДок, UserName);		
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокДатаНачалаСбора) Тогда
			Попытка
				Объект=СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора=ТекущаяДата();
				
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.Записать();
			Исключение
			КонецПопытки;	
			
		КонецЕсли;
		
		
	КонецЕсли;	
			
	Возврат Истина;
КонецФункции
Функция ReplaceDocRow(SN, UserName, DocOutID, DMDocRec)
	
	ОбъектСтроки=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));
	
	Возврат ОбъектСтроки;
	
КонецФункции
Функция WriteDoc(SN, UserName, DocHead, DocRowsSelect,DocRowsInsert,Params)
	
	//Переменные Params
	СтруктураParams = Новый Структура;
	СтруктураParams.Вставить("isFinished",Истина);
	Попытка ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураParams); Исключение КонецПопытки;		
	isFinished 		=  СтруктураParams.isFinished;
	

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocHead.DMDocOutID,5)));
	Исключение	
		Попытка
			СсылкаНаДок=СоздатьДокумент(SN, UserName,DocHead.DMDocOutID,DocHead.DMTemplate.DMTemplateID);
		Исключение
			ВызватьИсключениеВС("WriteDoc. Не найден документ. ");
			Возврат Ложь;//документа нету И создать не смогли
		КонецПопытки;
	КонецПопытки;
	
	Шаблон = СсылкаНаДок.Шаблон;

	Если (Шаблон.БыстраяПриемка Или Шаблон.БыстраяОтгрузка) И НЕ Шаблон.ВидДокументаНового = "ЗаказНаВнутреннееПотребление" Тогда
		Если DocHead.DMClient.DMClientID = "" Тогда
			ВызватьИсключениеВС("WriteDoc. Не указан контрагент. ");
		Иначе
			Попытка 
				ТекущийКлиент = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocHead.DMClient.DMClientID,4)));
				Если ТекущийКлиент.ПолучитьОбъект() = Неопределено Тогда
					ВызватьИсключениеВС("WriteDoc. Не указан контрагент. ");	
				Иначе
					
					// ** это отгрузили розничному клиенту а он не забрал товар И мы его принимаем обратно
					//Если Шаблон.БыстраяПриемка И НЕ ТекущийКлиент.Поставщик Тогда
					//	ВызватьИсключениеВС("WriteDoc. Указанный контрагент не является поставщиком, быстрая приемка не возможна! ");	
					//Иначе
					//**
					Если Шаблон.БыстраяОтгрузка И НЕ ТекущийКлиент.Клиент Тогда
						ВызватьИсключениеВС("WriteDoc. Указанный контрагент не является клиентом, быстрая отгрузка не возможна! ");
					КонецЕсли;
				КонецЕсли;	
			Исключение
				ВызватьИсключениеВС("WriteDoc. Не указан контрагент. ");
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;

	Если Шаблон.БыстроеПеремещение <> 0 Тогда
		
		Попытка
			Модуль_СкладыСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СкладыСервер");
			
			НаименованиеВторогоСкладаНаТСД = "Контрагент";
			
			Если Шаблон.ИспользоватьВторойСклад Тогда
				ТекущийСкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(DocHead.DMWarehouse2.DMWarehouseID));
				НаименованиеВторогоСкладаНаТСД = "Склад получатель";
			Иначе
				ТекущийСкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocHead.DMClient.DMClientID,4)));
			КонецЕсли;
		
			ИспользуетсяОрдернаяСхемаУСкладаПолучателя = Модуль_СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(ТекущийСкладПолучатель, ТекущаяДата())
															Или Модуль_СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(ТекущийСкладПолучатель, ТекущаяДата());
						
			ТекущийСкладОтправитель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(DocHead.DMWarehouse.DMWarehouseID));
			
			ИспользуетсяОрдернаяСхемаУСкладаОтправителя = Модуль_СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(ТекущийСкладОтправитель, ТекущаяДата())
															Или Модуль_СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(ТекущийСкладОтправитель, ТекущаяДата());
			
		Исключение
			ВызватьИсключениеВС("WriteDoc. Некорректно указан склад. ");
		КонецПопытки;
		
		//1 = Перемещение «ордерный – не ордерный»
		//2 = Перемещение «не ордерный – ордерный»		
		ЭтоПеремещениеСОрдерныйНаНеОрдерный = Шаблон.БыстроеПеремещение = 1;												
		
		Если ЭтоПеремещениеСОрдерныйНаНеОрдерный Тогда 
			
			Если Не ИспользуетсяОрдернаяСхемаУСкладаОтправителя Тогда
				ВызватьИсключениеВС("WriteDoc. В поле ""Склад"" указан не ордерный склад. ");		
			КонецЕсли; 
			
			Если ИспользуетсяОрдернаяСхемаУСкладаПолучателя Тогда
				ВызватьИсключениеВС("WriteDoc. В поле " + НаименованиеВторогоСкладаНаТСД + " указан ордерный склад. ");		
			КонецЕсли;
			
		Иначе
			
			Если ИспользуетсяОрдернаяСхемаУСкладаОтправителя Тогда
				ВызватьИсключениеВС("WriteDoc. В поле ""Склад"" указан ордерный склад. ");		
			КонецЕсли; 
			
			Если Не ИспользуетсяОрдернаяСхемаУСкладаПолучателя Тогда
				ВызватьИсключениеВС("WriteDoc. В поле " + НаименованиеВторогоСкладаНаТСД + " указан не ордерный склад. ");		
			КонецЕсли;
			
		КонецЕсли;
		                                                           
	КонецЕсли;
	
	
	Если ссылканадок.ПолучитьОбъект()=неопределено Тогда
		ВызватьИсключениеВС("WriteDoc. Не найден документ "+DocHead.DMDocOutID);
		Возврат Ложь;
	КонецЕсли;	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД<>УзелПО Тогда
			ВызватьИсключениеВС("WriteDoc. Чужой документ. ");
			Возврат Ложь;//не смогли
		КонецЕсли;	
	КонецЕсли;	
	Если СсылкаНаДок.ДатаПриемкиОператором<>Дата(1,1,1) Тогда
		ВызватьИсключениеВС("WriteDoc. Закрытый документ. ");
		Возврат Ложь;
	КонецЕсли;	

	Если НЕ Шаблон.ГрупповаяРабота Тогда
		Попытка
			Объект=СсылкаНаДок.ПолучитьОбъект();
			
			Если СсылкаНаДок.ДатаНачалаСбора=Дата(1,1,1) Тогда 		
				Для каждого СтрокаДокумента Из DocRowsSelect.DMDocRow Цикл  
					Объект.ДатаНачалаСбора = СтрокаДокумента.DMDate;
					Прервать;
				КонецЦикла;
				Если Объект.ДатаНачалаСбора=Дата(1,1,1) Тогда 
                	Объект.ДатаНачалаСбора = ТекущаяДата();
				КонецЕсли;
			КонецЕсли;

		Исключение
		КонецПопытки;
		
		Если Объект = неопределено Тогда
			ВызватьИсключениеВС("WriteDoc. Не нашли документ. ");
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Объект = Неопределено;
	КонецЕсли;	
	
	Для каждого СтрокаДокумента Из DocRowsSelect.DMDocRow Цикл   
		
		//ПРОВЕРКА ДУБЛЕЙ
		Если ПроверитьЗаписи("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,Объект) Тогда
			Продолжить;
		КонецЕсли;
		
		//ПРОВЕРКА СЕРИЙ/СЕРИЙНЫХ НОМЕРОВ
		Если СтрокаДокумента.DMSN<>"" И СтрокаДокумента.DMSN<>"[]" Тогда
			ШаблонПроверкиСерии = "";
			Если СерияНеПодходит(УзелПО,СсылкаНаДок,СтрокаДокумента,ШаблонПроверкиСерии) Тогда
				ВызватьИсключениеВС("WriteDoc. Серийный номер "+СтрокаДокумента.DMSN+" не соответсвует шаблону "+ШаблонПроверкиСерии);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		//СТРУКТУРА СТРОКИ
		СтруктураСтроки = ПолучитьСтруктуруСтрокиДокумента("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,UserName,Истина); 
		
		//ПРОВЕРКА ПРИНАДЛЕЖНОСТИ ЯЧЕЙКИ К СКЛАДУ ДОКУМЕНТА
		Если ЗначениеЗаполнено(СтруктураСтроки.ЯчейкаСсылка) И НЕ СтруктураСтроки.Количество < 0 Тогда
			Если Шаблон.ГрупповаяРабота Тогда
				СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеекГрупповаяРабота(СсылкаНаДок);			
			Иначе
				СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеек(Объект.СобранныеДанныеПодбор.Выгрузить());
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СкладЯчеек) И НЕ СтруктураСтроки.ЯчейкаСсылка.Владелец = СкладЯчеек Тогда
				ВызватьИсключениеВС("Введены ячейки разных складов в одном документе, строка не может быть записана!");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		//УдалениеЗначенийДополнительныхФорм
		Если СтруктураСтроки.Количество < 0 Тогда
			ДатаМобайл_ОбщийМодуль.УдалитьЗначениеФормыПоСтроке(СсылкаНаДок, СтруктураСтроки.ИдентификаторСтроки);
		КонецЕсли;
		
		//ПРЕВЫШЕНИЕ ПРИ ГРУППОВОЙ РАБОТЕ
		Если Шаблон.ГрупповаяРабота И Шаблон.ПриПревышенииЗаданияПодбор = 2 Тогда	
			Если ПроверитьПревышениеГрупповогоЗадания("Select",УзелПО,СсылкаНаДок,СтрокаДокумента,СтруктураСтроки) Тогда
				ВызватьИсключениеВС("WriteDoc. Превышено задание по данной номенклатуре. ");
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;
		
		//ЗАПИСЬ
		Если НЕ Шаблон.ГрупповаяРабота И НЕ Шаблон.БыстроеСканирование Тогда
			НоваяСтрока=Объект.СобранныеДанныеПодбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураСтроки);
		Иначе 
			ДатаМобайл_ОбщийМодуль.СоздатьЗаписиГрупповогоДокумента(СтруктураСтроки);
		КонецЕсли;
		
		//ЗАПИСЬ МАРОК
		Если Шаблон.ЕГАИС Тогда
			Если СтрокаДокумента.DMDecodedPDFBarcode <> "" Тогда
				
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;	
		
		
		Для каждого СтрокаДокумента Из DocRowsInsert.DMDocRow Цикл
			
			//ПРОВЕРКА ДУБЛЕЙ
			Если ПроверитьЗаписи("Insert",УзелПО,СсылкаНаДок,СтрокаДокумента,Объект) Тогда
				Продолжить;
			КонецЕсли;
			
			//ПРОВЕРКА СЕРИЙ/СЕРИЙНЫХ НОМЕРОВ
			Если СтрокаДокумента.DMSN<>"" И СтрокаДокумента.DMSN<>"[]" Тогда
				ШаблонПроверкиСерии = "";
				Если СерияНеПодходит(УзелПО,СсылкаНаДок,СтрокаДокумента,ШаблонПроверкиСерии) Тогда
					ВызватьИсключениеВС("WriteDoc. Серийный номер "+СтрокаДокумента.DMSN+" не соответсвует шаблону "+ШаблонПроверкиСерии);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;

			//СТРУКТУРА СТРОКИ
			СтруктураСтроки = ПолучитьСтруктуруСтрокиДокумента("Insert",УзелПО,СсылкаНаДок,СтрокаДокумента,UserName,Истина);
			
			//ПРОВЕРКА ПРИНАДЛЕЖНОСТИ ЯЧЕЙКИ К СКЛАДУ ДОКУМЕНТА
			Если ЗначениеЗаполнено(СтруктураСтроки.ЯчейкаСсылка) И НЕ СтруктураСтроки.Количество < 0 Тогда
				Если Шаблон.ГрупповаяРабота Тогда
					СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеекГрупповаяРабота(СсылкаНаДок);			
				Иначе
					СкладЯчеек = ДатаМобайл_ОбщийМодуль.ПолучитьСкладВведенныхЯчеек(Объект.СобранныеДанныеПриемка.Выгрузить());
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СкладЯчеек) И НЕ СтруктураСтроки.ЯчейкаСсылка.Владелец = СкладЯчеек Тогда
					ВызватьИсключениеВС("Введены ячейки разных складов в одном документе, строка не может быть записана!");
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли; 
			
			//УдалениеЗначенийДополнительныхФорм
			Если СтруктураСтроки.Количество < 0 Тогда
				ДатаМобайл_ОбщийМодуль.УдалитьЗначениеФормыПоСтроке(СсылкаНаДок, СтруктураСтроки.ИдентификаторСтроки);
			КонецЕсли;
			
			//ПРЕВЫШЕНИЕ ПРИ ГРУППОВОЙ РАБОТЕ
			Если Шаблон.ГрупповаяРабота И Шаблон.ПриПревышенииЗаданияПодбор = 2 Тогда	
				Если ПроверитьПревышениеГрупповогоЗадания("Insert",УзелПО,СсылкаНаДок,СтрокаДокумента,СтруктураСтроки) Тогда
					ВызватьИсключениеВС("WriteDoc. Превышено задание по данной номенклатуре. ");
					Возврат Ложь;
				КонецЕсли;	
			КонецЕсли;
			
			//ЗАПИСЬ
			Если НЕ Шаблон.ГрупповаяРабота И НЕ Шаблон.БыстроеСканирование Тогда
				НоваяСтрока=Объект.СобранныеДанныеПриемка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураСтроки);
			Иначе 
				ДатаМобайл_ОбщийМодуль.СоздатьЗаписиГрупповогоДокумента(СтруктураСтроки);
			КонецЕсли;

		КонецЦикла;	
		
		
	Если НЕ Шаблон.ГрупповаяРабота Тогда
		
		Если isFinished Тогда
			Объект.ДатаЗавершенияСбора=ТекущаяДата();
		КонецЕсли;
	
		Объект.ТСД=УзелПО;
		Объект.Номер=DocHead.DMNumber;
		Объект.Дата=DocHead.DMDate;
		Объект.Комментарий=DocHead.DMComment;
		Объект.ДатаИзмененияКлиента=DocHead.DMClientSelectDate;
		
		Если Объект.ДатаИзмененияКлиента<>Дата(1,1,1) Тогда
			Попытка
				ИДКлиента = Новый УникальныйИдентификатор(Сред(DocHead.DMClient.DMClientID,4));
				
				Если НЕ Шаблон.РаспределениеТоваров = 1 Тогда
					Объект.Клиент = Справочники.Партнеры.ПолучитьСсылку(ИДКлиента);
					Если Объект.Клиент.ПолучитьОбъект() = Неопределено Тогда
						Объект.Клиент = Справочники.Склады.ПолучитьСсылку(ИДКлиента);
					КонецЕсли;				
					
					Если Объект.Клиент.ПолучитьОбъект() = Неопределено И ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() Тогда
						Объект.Клиент = Справочники.ОрганизацииМДЛП.ПолучитьСсылку(ИДКлиента);	
					КонецЕсли;
					
					Если Объект.Клиент.ПолучитьОбъект() = Неопределено Тогда
						Объект.Клиент = Справочники.СтруктураПредприятия.ПолучитьСсылку(ИДКлиента);
					КонецЕсли;
				КонецЕсли;
			Исключение 
			КонецПопытки;
		КонецЕсли;
		
		Попытка 
			Если ЗначениеЗаполнено(DocHead.DMWarehouse.DMWarehouseID) Тогда	
				Объект.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(DocHead.DMWarehouse.DMWarehouseID));
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		Попытка
			Если ЗначениеЗаполнено(DocHead.DMWarehouse2.DMWarehouseID) Тогда
				Объект.СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(DocHead.DMWarehouse2.DMWarehouseID));
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		Объект.ДополнительныеСвойства.Вставить("ЗапросВСервисЧЗ", Истина);
		
		Попытка 							
			Объект.Записать();
		Исключение	
			ВызватьИсключениеВС("WriteDoc. Ошибка записи. "+ОписаниеОшибки());
			Возврат Ложь;//не смогли
		КонецПопытки;	
	Иначе
		
		ДатаСбораПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаНачалаСбора");	
		Если Не ЗначениеЗаполнено(ДатаСбораПоТСД) Тогда	
			ДатаМобайл_ОбщийМодуль.СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(SN, СсылкаНаДок, UserName);		
		КонецЕсли;

		Попытка
			Если СсылкаНаДок.ДатаНачалаСбора=Дата(1,1,1) Тогда
				Объект=СсылкаНаДок.ПолучитьОбъект();
				Объект.ДатаНачалаСбора=ТекущаяДата(); 
				Объект.ДополнительныеСвойства.Вставить("ЗапросВСервисЧЗ", Истина);
				Объект.Записать();
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если isFinished Тогда
			ДатаЗавершенияПоТСД = ДатаМобайл_ОбщийМодуль.ПолучитьДатуГрупповогоДокумента(SN, СсылкаНаДок, "ДатаЗавершенияСбора");
			Если (ДатаЗавершенияПоТСД = Неопределено) ИЛИ (ДатаЗавершенияПоТСД = Дата(1,1,1)) Тогда
				ДатаМобайл_ОбщийМодуль.ОбновитьЗаписьТСДГрупповогоДокумента(SN,СсылкаНаДок,ТекущаяДата());	
			КонецЕсли;
			
			Если ДатаМобайл_ОбщийМодуль.ПроверитьЗавершенностьГрупповогоДокумента(СсылкаНаДок) Тогда
				Попытка
					Объект=СсылкаНаДок.ПолучитьОбъект();
					Объект.ДатаЗавершенияСбора=ТекущаяДата();
					
					Попытка
						Если ЗначениеЗаполнено(DocHead.DMWarehouse.DMWarehouseID) Тогда
							Объект.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(DocHead.DMWarehouse.DMWarehouseID)); 
						КонецЕсли;
					Исключение 
					КонецПопытки;
					
					Попытка
						Если ЗначениеЗаполнено(DocHead.DMWarehouse2.DMWarehouseID) Тогда
							Объект.СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(DocHead.DMWarehouse2.DMWarehouseID)); 
						КонецЕсли;	
					Исключение 
					КонецПопытки;
				    Объект.ДополнительныеСвойства.Вставить("ЗапросВСервисЧЗ", Истина);
					Объект.Записать();
				Исключение	
					ВызватьИсключениеВС("WriteDoc. Ошибка записи. "+ОписаниеОшибки());
					Возврат Ложь;//не смогли
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;	
			
	Возврат Истина;
КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция CreateDoc(SN, UserName, DocOutID,TemplateID)

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	

	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                    |	ДатаМобайл_ШаблоныДокументов.Ссылка КАК ШаблонСсылка
						|ИЗ
	                    |	Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов
	                    |ГДЕ
	                    |	ДатаМобайл_ШаблоныДокументов.Код = &ИД");
	
	Запрос.УстановитьПараметр("ИД",TemplateID);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		
		//Создаем док в справочнике
		Объект=Справочники.ДатаМобайл_ДокументыТСД.СоздатьЭлемент();
		Объект.УстановитьНовыйКод();
		Объект.Шаблон=Рез.ШаблонСсылка;
		Попытка 
			Объект.ИсходныйДокумент=Документы[Объект.Шаблон.ВидДокумента].Пустаяссылка();	
			Если СокрЛП(Объект.Шаблон.ВидДокументаНового)<>"" Тогда
				Объект.НовыйДокумент=Документы[Объект.Шаблон.ВидДокументаНового].Пустаяссылка();
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если Объект.Шаблон.РаспределениеТоваров = 2 Тогда
			Если Объект.СписокДокументов.ВыгрузитьКолонку("ДокументТСД").Количество() = 0 Тогда
				ВызватьИсключениеВС("CreateDoc. Настройка ""Групповой документ"" не поддерживает работу без задания! ");			
			КонецЕсли;
		КонецЕсли;
		
		Объект.ДатаСоздания=ТекущаяДата();
		Объект.Источник = УзелПО;	
		Объект.ДатаНачалаСбора=ТекущаяДата();	
		Если НЕ (Объект.Шаблон.ГрупповаяРабота) Тогда
			Объект.ТСД=УзелПО;
		КонецЕсли;
	    Объект.Дата=ТекущаяДата();
		Объект.Номер="DMO-"+Формат(Объект.код,"ЧГ=0");
		Объект.Комментарий=DocOutID;
		
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Объект.ОбменДанными.Получатели.Очистить();
		Объект.ОбменДанными.Получатели.Заполнить();
		Объект.ОбменДанными.Получатели.Удалить(УзелПО);	
		Объект.Записать();

		
		//Готовим данные для ТСД по шаблону
		ОбъектШаблона=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMTemplate"));
		ЗаполнитьОбъектШаблона(ОбъектШаблона,Рез.ШаблонСсылка);
		
		//Готовим данные для ТСД по дополнительным формам
		ОбъектСпискаДополнительныхФорм = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocStepList"));
		ЗапросДополнительныхФорм = Новый Запрос;
		ЗапросДополнительныхФорм.Текст = 
		"ВЫБРАТЬ
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма.Ссылка КАК Ссылка,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Порядок КАК Порядок,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки КАК РеквизитИзШапки,
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ПроверятьЗаполнение
		|ИЗ
		|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
		|ГДЕ
		|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон = &Шаблон
		|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма.ПометкаУдаления = ЛОЖЬ";
		
		ЗапросДополнительныхФорм.УстановитьПараметр("Шаблон", Рез.ШаблонСсылка);
		
		РезультатЗапросаДополнительныхФорм = ЗапросДополнительныхФорм.Выполнить();
		ВыборкаДополнительныхФорм = РезультатЗапросаДополнительныхФорм.Выбрать();
		Пока ВыборкаДополнительныхФорм.Следующий() Цикл
			ОбъектДополнительныхФорм = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocStep"));
			ОбъектДополнительныхФорм.DMStepId = ?(ВыборкаДополнительныхФорм.Ссылка = Неопределено,"",СокрЛП(ВыборкаДополнительныхФорм.Ссылка.УникальныйИдентификатор()));
			ОбъектДополнительныхФорм.DMDocId = "d82-"+Строка(Объект.Ссылка.УникальныйИдентификатор());
			ОбъектДополнительныхФорм.DMSortNumber = ВыборкаДополнительныхФорм.Порядок;
			ОбъектДополнительныхФорм.DMIsDocArg = ВыборкаДополнительныхФорм.РеквизитИзШапки;
			ОбъектДополнительныхФорм.DMCheckFill = ВыборкаДополнительныхФорм.ПроверятьЗаполнение;
			ОбъектСпискаДополнительныхФорм.DMDocStep.Добавить(ОбъектДополнительныхФорм);
		КонецЦикла;
		
		//Готовим данные для ТСД по доку
		ОбъектДока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocHead"));		
		ОбъектДока.DMDocOutID="d82-"+Строка(Объект.Ссылка.УникальныйИдентификатор());
		ОбъектДока.DMisMark=Ложь;
		ОбъектДока.DMNumber=Объект.Номер;
		ОбъектДока.DMDate=Объект.Дата;
		ОбъектДока.DMBarcode=Объект.Номер;
		ОбъектДока.DMComment="";
		ОбъектДока.DMTemplate=ОбъектШаблона;
		ОбъектДока.DMSteps = ОбъектСпискаДополнительныхФорм;
		
		Возврат ОбъектДока;
	Иначе	
		ВызватьИсключениеВС("CreateDoc. Не найден шаблон. ");
		Возврат ОбъектДока;
	КонецЕсли;	
КонецФункции
Функция СоздатьДокумент(SN, UserName, DocOutID,TemplateID)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);  
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                   	|	ДатаМобайл_ШаблоныДокументов.Ссылка КАК ШаблонСсылка
	                    |ИЗ
	                    |	Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов
	                    |ГДЕ
	                    |	ДатаМобайл_ШаблоныДокументов.Код = &ИД");
	Запрос.УстановитьПараметр("ИД",TemplateID);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Док=Справочники.ДатаМобайл_ДокументыТСД.СоздатьЭлемент();
		Док.УстановитьНовыйКод();
		Док.Шаблон=Рез.ШаблонСсылка;
		Док.ДатаСоздания=ТекущаяДата();
		Док.ДатаНачалаСбора=ТекущаяДата();
		
		Если НЕ (Док.Шаблон.ГрупповаяРабота) Тогда
			Док.ТСД=УзелПО;
		КонецЕсли;
	
		Док.Дата=ТекущаяДата();
		Док.Номер="DMO-"+Формат(Док.код,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
		Док.Комментарий=DocOutID;
		Док.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Если Док.Шаблон.ГрупповаяРабота Тогда
			Док.ОбменДанными.Получатели.Заполнить();
		Иначе
			Док.ОбменДанными.Получатели.Очистить();
		КонецЕсли;
		Док.Записать();
		
		Возврат Док.Ссылка;
	Иначе	
		ВызватьИсключениеВС("СоздатьДокумент. Не найден шаблон. ");
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции
Функция ReopenDoc(SN, UserName, DocOutID)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		Возврат Истина;//документа И так нету
	КонецПопытки;	
	Если ссылканадок.ПолучитьОбъект()=неопределено Тогда
		Возврат Истина;//документа И так нету
	КонецЕсли;	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД<>УзелПО Тогда
			ВызватьИсключениеВС("ReopenDoc. Чужой документ. ");
			Возврат Ложь;//не смогли
		КонецЕслИ;	
	КонецЕсли;	
	Если СсылкаНаДок.ДатаПриемкиОператором<>Дата(1,1,1) Тогда
		ВызватьИсключениеВС("ReopenDoc. Закрытый документ. ");
		Возврат Ложь;//уже
	КонецЕслИ;	
	
	Если СсылкаНаДок.ДатаЗавершенияСбора=Дата(1,1,1) И СсылкаНаДок.Шаблон.ГрупповаяРабота Тогда
		ДатаМобайл_ОбщийМодуль.ОбновитьЗаписьТСДГрупповогоДокумента(SN,СсылкаНаДок, Дата(1,1,1));
		Возврат Истина;//уже
	КонецЕслИ;
	
	Попытка
		Объект=СсылкаНаДок.ПолучитьОбъект();
		
		Если Объект.ТСД.Пустая() И НЕ(СсылкаНаДок.Шаблон.ГрупповаяРабота) Тогда
			Объект.ТСД=УзелПО;
		КонецЕсли;

		Объект.ДатаЗавершенияСбора="";
		Объект.Записать();
		
		ДатаМобайл_ОбщийМодуль.ОбновитьЗаписьТСДГрупповогоДокумента(SN,СсылкаНаДок, Дата(1,1,1));
		
	Исключение	
		Возврат Ложь;//не смогли
	КонецПопытки;	
	Возврат Истина;
КонецФункции
Функция ClearDoc(SN, UserName, DocOutID)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		Возврат Истина;//документа И так нету
	КонецПопытки;	
	Если СсылкаНаДок.Шаблон.ГрупповаяРабота Или СсылкаНаДок.Шаблон.БыстроеСканирование Тогда
		ВызватьИсключениеВС("ClearDoc. Групповой документ Или документ с быстрым сканированием не поддерживают очистку. ");
		Возврат Ложь;
	КонецЕсли;
	Если ссылканадок.ПолучитьОбъект()=неопределено Тогда
		Возврат Истина;//документа И так нету
	КонецЕсли;	
	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД<>УзелПО Тогда
			ВызватьИсключениеВС("ClearDoc. Чужой документ. ");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	

	Если СсылкаНаДок.ДатаЗавершенияСбора<>Дата(1,1,1) Тогда
		ВызватьИсключениеВС("ClearDoc. Закрытый документ. ");
		Возврат Ложь;
	КонецЕслИ;	
	
	Попытка
		объект=СсылкаНаДок.ПолучитьОбъект();
		Объект.ДатаНачалаСбора="";
		Объект.ДатаЗавершенияСбора="";
		
		Объект.СобранныеДанныеПодбор.Очистить();
		Объект.СобранныеДанныеПриемка.Очистить();
		
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Объект.ОбменДанными.Получатели.Очистить();
		Объект.ОбменДанными.Получатели.Заполнить();
		Объект.ОбменДанными.Получатели.Удалить(УзелПО);

		Объект.Записать();
		
		//ДатаМобайл_ОбщийМодуль.ОчиститьЗаписиТСДГрупповогоДокумента(СсылкаНаДок, УзелПО);
		
	Исключение	
		ВызватьИсключениеВС("ClearDoc. Ошибка очистки. "+ОписаниеОшибки());
		Возврат Ложь;//не смогли
	КонецПопытки;	
	Возврат Истина;
КонецФункции
Функция DeleteDoc(SN, UserName, DocOutID)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		Возврат Истина;//документа И так нету
	КонецПопытки;	
	Если ссылканадок.ПолучитьОбъект()=неопределено Тогда
		Возврат Истина;//документа И так нету
	КонецЕсли;	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД<>УзелПО Тогда
			ВызватьИсключениеВС("DeleteDoc. Чужой документ. ");
			Возврат Ложь; //не смогли
		КонецЕсли;	
	КонецЕсли;	
	Если СсылкаНаДок.ДатаЗавершения=Дата(1,1,1) Тогда
		ВызватьИсключениеВС("DeleteDoc. Удалить можно только завершенный документ. ");
		Возврат Ложь;
	КонецЕслИ;	
	Возврат Истина;
КонецФункции
Функция SetDocComment(SN, UserName, DocOutID, Comment)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("SetDocComment. Не найден документ. ");
		Возврат Ложь;
	КонецПопытки;	
	Если ссылканадок.ПолучитьОбъект()=неопределено Тогда
		ВызватьИсключениеВС("SetDocComment. Не найден документ. ");
		Возврат Ложь;
	КонецЕсли;	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД<>УзелПО Тогда
			ВызватьИсключениеВС("SetDocComment. Чужой документ. ");
			Возврат Ложь;//не смогли
		КонецЕслИ;	
	КонецЕсли;
	
	Если ССылкаНаДок.Шаблон.ЗапретитьРучноеИзменениеКомментария Тогда
			ВызватьИсключениеВС("SetDocComment. Изменение комментария запрещено шаблоном. ");
			Возврат Ложь;
	КонецЕсли;
	
	Если СсылкаНаДок.ДатаЗавершенияСбора<>Дата(1,1,1) Тогда
		Возврат Ложь;
	КонецЕсли;	
	Объект=СсылкаНаДок.ПолучитьОбъект();
	Если Объект.ДатаНачалаСбора=Дата(1,1,1) Тогда
		Объект.ДатаНачалаСбора=ТекущаяДата();
	КонецЕсли;	
	Объект.Комментарий=Comment;
	
	Если Объект.ТСД.Пустая() И НЕ(СсылкаНаДок.Шаблон.ГрупповаяРабота) Тогда
		Объект.ТСД=УзелПО;
	КонецЕсли;

	Попытка
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);

		Объект.Записать();
	Исключение	
		ВызватьИсключениеВС("SetDocComment. Не смогли записать документ. ");
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции
Функция SetDocNumber(SN, UserName, DocOutID, Number)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("SetDocNumber. Не найден документ. ");
		Возврат Ложь;
	КонецПопытки;	
	Если ссылканадок.ПолучитьОбъект()=неопределено Тогда
		ВызватьИсключениеВС("SetDocNumber. Не найден документ. ");
		Возврат Ложь;
	КонецЕсли;	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД<>УзелПО Тогда
			ВызватьИсключениеВС("SetDocNumber. Чужой документ. ");
			Возврат Ложь;//не смогли
		КонецЕслИ;	
	КонецЕсли;	
	Если СсылкаНаДок.ДатаЗавершенияСбора<>Дата(1,1,1) Тогда
		Возврат Ложь;
	КонецЕсли;	
	Объект=СсылкаНаДок.ПолучитьОбъект();
	Если Объект.ДатаНачалаСбора=Дата(1,1,1) Тогда
		Объект.ДатаНачалаСбора=ТекущаяДата();
	КонецЕсли;	
	Объект.Номер=Number;
	
	Если Объект.ТСД.Пустая() И НЕ(СсылкаНаДок.Шаблон.ГрупповаяРабота) Тогда
		Объект.ТСД=УзелПО;
	КонецЕсли;

	Попытка
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);

		Объект.Записать();
	Исключение	
		ВызватьИсключениеВС("SetDocNumber. Не смогли записать документ. ");
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции
Функция SetDocClient(SN, UserName, DocOutID, ClientID)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("SetDocClient. Не найден документ. ");
		Возврат Ложь;
	КонецПопытки;	
	Если ссылканадок.ПолучитьОбъект()=неопределено Тогда
		ВызватьИсключениеВС("SetDocClient. Не найден документ. ");
		Возврат Ложь;
	КонецЕсли;	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД<>УзелПО Тогда
			ВызватьИсключениеВС("SetDocClient. Чужой документ. ");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	Если СсылкаНаДок.ДатаЗавершенияСбора<>Дата(1,1,1) Тогда
		Возврат Ложь;
	КонецЕсли;	
	Объект=СсылкаНаДок.ПолучитьОбъект();
	Если Объект.ДатаНачалаСбора=Дата(1,1,1) Тогда
		Объект.ДатаНачалаСбора=ТекущаяДата();
	КонецЕсли;	
	Объект.ДатаИзмененияКлиента=ТекущаяДата();
	Попытка
		Объект.Клиент=Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ClientID,4)));
		Если Объект.Клиент.ПолучитьОбъект() = Неопределено Тогда
			Объект.Клиент = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ClientID,4)));
		КонецЕсли;
	Исключение	
		ВызватьИсключениеВС("SetDocClient. Не найден клиент. ");
		Возврат Ложь;
	КонецПопытки;	
	Если НЕ (Объект.Шаблон.ГрупповаяРабота) Тогда
		Объект.ТСД=УзелПО;	
	КонецЕсли;
	
	Попытка
				Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				Объект.ОбменДанными.Получатели.Очистить();
				Объект.ОбменДанными.Получатели.Заполнить();
				Объект.ОбменДанными.Получатели.Удалить(УзелПО);

		Объект.Записать();
	Исключение	
		ВызватьИсключениеВС("SetDocClient. Не смогли записать документ. ");
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции
Функция SetDocWarehouse(SN, UserName, DocOutID, WarehouseID, Type)
	УзелПО = НайтиУзел(SN);
	
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Попытка
		СсылкаНаДок = Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID, 5)));
	Исключение	
		ВызватьИсключениеВС("SetDocWarehouse. Не найден документ. ");
	КонецПопытки;	
	
	Если СсылкаНаДок.ПолучитьОбъект() = Неопределено Тогда
		ВызватьИсключениеВС("SetDocWarehouse. Не найден документ. ");
	КонецЕсли;	
	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД <> УзелПО Тогда
			ВызватьИсключениеВС("SetDocWarehouse. Чужой документ. ");
		КонецЕсли;	
	КонецЕсли;
	
	Если СсылкаНаДок.ДатаЗавершенияСбора <> Дата(1,1,1) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Объект = СсылкаНаДок.ПолучитьОбъект();
	Если Объект.ДатаНачалаСбора = Дата(1,1,1) Тогда
		Объект.ДатаНачалаСбора = ТекущаяДата();
	КонецЕсли;
	
	Объект.ДатаИзмененияКлиента = ТекущаяДата();
	Попытка 
		Если Type = "1" Тогда
			Если WarehouseID = "" Тогда
				Объект.Склад = Справочники.Склады.ПустаяСсылка();	
			Иначе	
				Объект.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(WarehouseID));
			КонецЕсли;
		ИначеЕсли Type = "2" Тогда
			Если WarehouseID = "" Тогда
				Объект.СкладПолучатель = Справочники.Склады.ПустаяСсылка();	
			Иначе	
				Объект.СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(WarehouseID));				
			КонецЕсли;	
		Конецесли;
	Исключение	
		ВызватьИсключениеВС("SetDocWarehouse. Не найден склад. ");
	КонецПопытки;	
	
	Если НЕ (Объект.Шаблон.ГрупповаяРабота) Тогда
		Объект.ТСД = УзелПО;	
	КонецЕсли;
	
	Попытка
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Объект.ОбменДанными.Получатели.Очистить();
		Объект.ОбменДанными.Получатели.Заполнить();
		Объект.ОбменДанными.Получатели.Удалить(УзелПО);
		
		Объект.Записать();
	Исключение	
		ВызватьИсключениеВС("SetDocWarehouse. Не смогли записать документ. ");
	КонецПопытки;	
	
	Возврат Истина;

КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция FastAccess(SN, UserName, Barcode, Params)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если УзелПО.НеОтображатьОстатки Тогда
		Возврат "Отображение остатков для ТСД отключено в настройках АРМ";
	Иначе	
 		СтрокаИнфо = ПолучитьИнфо(УзелПО, Barcode);
  		Возврат СтрокаИнфо;
	КонецЕсли;
	
КонецФункции
Функция FastAccessDoc(SN, UserName, DocID, Barcode, Params)
	
	Если Barcode = "" Тогда
		Возврат "Отсканируйте штрихкод ";
	Иначе
		Возврат FastAccess(SN, UserName, Barcode, Params);
	КонецЕсли;

КонецФункции
Функция ПолучитьИнфо(УзелПО, Barcode)
	
	
	Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() И (СтрДлина(Barcode) = 68 Или СтрДлина(Barcode) = 150) Тогда // Инфо по марке ЕГАИС
		
		//есть\нет в системе
		//состояние товара - находится на основном складе Или в карантине (брак)
		
		Марка = Barcode;
		ИнфоПоМарке = "";
		ДанныеПомарке = ПолучитьСостояниеАкцизнойМарки(Марка);
		Если ДанныеПомарке <>Неопределено  Тогда
			ИнфоПоМарке = ИнфоПоМарке+ДанныеПомарке.АлкогольнаяПродукция.Наименование + Символы.ПС;
			Если ЗначениеЗаполнено(ДанныеПомарке.СправкаБ) Тогда
				ИнфоПоМарке = ИнфоПоМарке+"СправкаБ: " + ДанныеПомарке.СправкаБ + Символы.ПС;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеПомарке.Статус) Тогда
				ИнфоПоМарке = ИнфоПоМарке+"Статус: " + ДанныеПомарке.Статус + Символы.ПС;
			КонецЕсли;
	
		Иначе
			ИнфоПоМарке = "НЕ ЧИСЛИТСЯ В СИСТЕМЕ!!!";
		КонецЕсли;
		
		Возврат "Акцизная марка"+ Символы.ПС + Марка + Символы.ПС + Символы.ПС + ИнфоПоМарке;

		
	ИНАЧЕ //ОБЫЧНЫЕ ТОВАРЫ
		
	СтрокаВозврата = "";
	ВключатьАртикул=УзелПО.ДобавлятьАртикулВНаименование;
	ИспользоватьАртикулКакШтрихкодТовара = УзелПО.ИспользоватьАртикулКакШтрихкодТовара;
	//Сначала ищем ячейку...	
	ТекущаяЯчейка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Barcode);
	ТекущаяЯчейкаНаименование = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ТекущаяЯчейка.Наименование), ТекущаяЯчейка.Код);
		
	ЗапросПоискЯчейки=Новый Запрос;
	ЗапросПоискЯчейки.УстановитьПараметр("ТекущаяЯчейка", ТекущаяЯчейка);	
	ЗапросПоискЯчейки.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СкладскиеЯчейки.Ссылка КАК Ячейка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Ссылка = &ТекущаяЯчейка";
	 
	ВыборкаРезультатПоискаЯчейки=ЗапросПоискЯчейки.Выполнить().Выбрать();
	Если ВыборкаРезультатПоискаЯчейки.Следующий() Тогда
		ИмяЯчейки = "Ячейка: " + ТекущаяЯчейкаНаименование + Символы.ПС + Символы.ПС;
		
		ЗапросОстатков = Новый Запрос;
		ЗапросОстатков.УстановитьПараметр("ТекущаяЯчейка", ТекущаяЯчейка);
		ЗапросОстатков.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыВЯчейкахОстатки.Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика,
		|	ТоварыВЯчейкахОстатки.Серия,
		|	ТоварыВЯчейкахОстатки.Упаковка,
		|	ТоварыВЯчейкахОстатки.Ячейка,
		|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток)- СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(,Ячейка=&ТекущаяЯчейка) КАК ТоварыВЯчейкахОстатки
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВЯчейкахОстатки.Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика,
		|	ТоварыВЯчейкахОстатки.Серия,
		|	ТоварыВЯчейкахОстатки.Упаковка,
		|	ТоварыВЯчейкахОстатки.Ячейка			
		|ИМЕЮЩИЕ
		| 	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) <> 0 
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыВЯчейкахОстатки.Ячейка ВОЗР,
		|	ТоварыВЯчейкахОстатки.Номенклатура ВОЗР,
		|	ТоварыВЯчейкахОстатки.Характеристика ВОЗР,
		|	ТоварыВЯчейкахОстатки.Серия ВОЗР,
		|	ТоварыВЯчейкахОстатки.Упаковка ВОЗР";
		
		ВыборкаРезультатЗапросаОстатков=ЗапросОстатков.Выполнить().Выбрать();
		Если ВыборкаРезультатЗапросаОстатков.Количество()> 0 Тогда
			
			ТекущаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
			ТекущаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

			Пока ВыборкаРезультатЗапросаОстатков.Следующий() Цикл
				
				Если ВыборкаРезультатЗапросаОстатков.Номенклатура<>ТекущаяНоменклатура Или ВыборкаРезультатЗапросаОстатков.Характеристика<>ТекущаяХарактеристика Тогда 
					
					ТекущаяНоменклатура = ВыборкаРезультатЗапросаОстатков.Номенклатура;
					ТекущаяХарактеристика = ВыборкаРезультатЗапросаОстатков.Характеристика;
					
					СтрокаВозврата = СтрокаВозврата + Символы.ПС + "Товар: " + ?(ВключатьАртикул,ВыборкаРезультатЗапросаОстатков.Номенклатура.Артикул + " ","")
																			+ ВыборкаРезультатЗапросаОстатков.Номенклатура + " "
																			+ ВыборкаРезультатЗапросаОстатков.Характеристика + "; " + Символы.ПС;
				КонецЕсли;
				
				
					СтрокаВозврата = СтрокаВозврата + ВыборкаРезультатЗапросаОстатков.КоличествоОстаток + " "
													+ ВыборкаРезультатЗапросаОстатков.Упаковка + "; " 
													+ ВыборкаРезультатЗапросаОстатков.Серия + Символы.ПС;		
			КонецЦикла;
		Иначе 
			СтрокаВозврата =  "Товаров не числится...";
		КонецЕсли;
		
		Возврат ИмяЯчейки + СтрокаВозврата + Символы.ПС + Символы.ПС;
		
	КонецЕсли;
	
	//Если ячейки нет, то ищем товар...	
	
	ЗапросПоискТовара = Новый Запрос;
	ЗапросПоискТовара.УстановитьПараметр("Barcode", Barcode);
	ЗапросПоискТовара.УстановитьПараметр("ИспользоватьАртикулКакШтрихкодТовара", ИспользоватьАртикулКакШтрихкодТовара);
	ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
	|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура
	|	И НЕ ШтрихкодыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	//ВЫБОРКА ССЫЛОК ТОВАРОВ И ХАРАКТЕРИСТИК ПО РАЗНЫМ УСЛОВИЯМ ВЕДЕНИЯ ХАРАКТЕРИСТИК ПРИ ИспользоватьАртикулКакШтрихкодТовара 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//БЕЗ ХАРАКТЕРИСТИК
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка) КАК Характеристика
	|ИЗ
	| 	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	&ИспользоватьАртикулКакШтрихкодТовара
	|	И Номенклатура.Артикул = &Barcode
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//ИНДИВИДУАЛЬНЫЕ ХАРАКТЕРИСТИКИ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	| 	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|ГДЕ
	|	&ИспользоватьАртикулКакШтрихкодТовара
	|	И Номенклатура.Артикул = &Barcode
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//ОБЩИЕ ХАРАКТЕРИСТИКИ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|ГДЕ
	|	&ИспользоватьАртикулКакШтрихкодТовара
	|	И Номенклатура.Артикул = &Barcode
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления 
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//ОБЩИЕ С ДРУГИМ ВИДОМ ХАРАКТЕРИСТИКИ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВладелецХарактеристик
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|ГДЕ
	|	&ИспользоватьАртикулКакШтрихкодТовара
	|	И Номенклатура.Артикул = &Barcode
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL";

    ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();
	
		Если ВыборкаРезультатПоискаТовара.Количество() = 0 И ДатаМобайл_ОбщийМодуль.ЕстьМаркировка() И стрДлина(Barcode)>30 Тогда
			//Попробуем найти товар по КМ	
			КМ = Лев(Barcode,31);
			ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 13);
	        ЗначениеШтрихкодаДляЗапроса = ""+ЗначениеШтрихкода;
			ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"_","$_");
			ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"%","$%");
			ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкодаДляЗапроса + "%";
			
			ЗапросПоискТовара = Новый Запрос;
			ЗапросПоискТовара.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", ЗначениеШтрихкодаДляЗапроса);
			ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
			|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""
			|	И ШтрихкодыУпаковокТоваров.Номенклатура Ссылка Справочник.Номенклатура
			|	И НЕ ШтрихкодыУпаковокТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
			
			ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();
			
			Если ВыборкаРезультатПоискаТовара.Количество() = 0 Тогда
				
				ТекущийШтрихкод = Сред(Barcode, 3, 14);
				ТекущийШтрихкод = УдалитьЛидирующиеНули(ТекущийШтрихкод);
				
				ЗапросПоискТовара = Новый Запрос;
				ЗапросПоискТовара.УстановитьПараметр("Barcode", ТекущийШтрихкод);
				ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
				|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
				|ИЗ
				|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
				|ГДЕ
				|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
				|	И ШтрихкодыНоменклатуры.Номенклатура Ссылка Справочник.Номенклатура";
				
				ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();
			
				
			КонецЕсли;		
	    КонецЕсли;		
		
				
	Если ВыборкаРезультатПоискаТовара.Количество()>0 Тогда	
		Пока ВыборкаРезультатПоискаТовара.Следующий() Цикл
			
			НетНаОстатках = Истина;
			ИмяТовара = "Товар: "   +   ?(ВключатьАртикул,ВыборкаРезультатПоискаТовара.Номенклатура.Артикул + " ","")
			                		+ ВыборкаРезультатПоискаТовара.Номенклатура + " " 
									+ ВыборкаРезультатПоискаТовара.Характеристика + Символы.ПС + Символы.ПС;
			ИнфоТовар = "";
			
			//Сначала ищем остатки по адресному регистру...
			ЗапросОстатковАдресный =Новый Запрос;
			ЗапросОстатковАдресный.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
			ЗапросОстатковАдресный.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
			
			СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
			ЗапросОстатковАдресный.УстановитьПараметр("Склады", СписокСкладов);
			ЗапросОстатковАдресный.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);

			СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
			ЗапросОстатковАдресный.УстановитьПараметр("Помещения",СписокПомещений);
			ЗапросОстатковАдресный.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);

			ЗапросОстатковАдресный.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыВЯчейкахОстатки.Ячейка.Владелец КАК Склад,
			|	ТоварыВЯчейкахОстатки.Ячейка.Помещение КАК Помещение,
			|	ТоварыВЯчейкахОстатки.Ячейка,
			|	ТоварыВЯчейкахОстатки.Номенклатура,
			|	ТоварыВЯчейкахОстатки.Характеристика,
			|	ТоварыВЯчейкахОстатки.Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка,
			|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК КоличествоОстаток
			|ИЗ
			| 	РегистрНакопления.ТоварыВЯчейках.Остатки(
			|   	,
			|   	Номенклатура = &ТекущаяНоменклатура
			|   	 И Характеристика = &ТекущаяХарактеристика) КАК ТоварыВЯчейкахОстатки
			|ГДЕ
			| (&ВсеСклады ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Владелец В (&Склады))
			| И (&ВсеПомещения ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Помещение В (&Помещения))   
			|СГРУППИРОВАТЬ ПО
			|	ТоварыВЯчейкахОстатки.Ячейка.Владелец,
			|	ТоварыВЯчейкахОстатки.Ячейка.Помещение,
			|	ТоварыВЯчейкахОстатки.Ячейка,
			|	ТоварыВЯчейкахОстатки.Номенклатура,
			|	ТоварыВЯчейкахОстатки.Характеристика,
			|	ТоварыВЯчейкахОстатки.Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка
			|ИМЕЮЩИЕ
			| 	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) <> 0 
			|УПОРЯДОЧИТЬ ПО
			|	ТоварыВЯчейкахОстатки.Ячейка.Владелец ВОЗР,
			|	ТоварыВЯчейкахОстатки.Ячейка ВОЗР,
			|	ТоварыВЯчейкахОстатки.Номенклатура ВОЗР,
			|	ТоварыВЯчейкахОстатки.Характеристика ВОЗР,
			|	ТоварыВЯчейкахОстатки.Серия ВОЗР,
			|	ТоварыВЯчейкахОстатки.Упаковка ВОЗР";
				
			ВыборкаРезультатЗапросаОстатковАдресный=ЗапросОстатковАдресный.Выполнить().Выбрать();
			Если ВыборкаРезультатЗапросаОстатковАдресный.Количество()> 0 Тогда
				
				ТекущийСклад = Справочники.Склады.ПустаяСсылка();
				ТекущееПомещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
				ТекущаяЯчейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
				
				Пока ВыборкаРезультатЗапросаОстатковАдресный.Следующий() Цикл
					
					Если ВыборкаРезультатЗапросаОстатковАдресный.Склад<>ТекущийСклад Тогда 
						ТекущийСклад = ВыборкаРезультатЗапросаОстатковАдресный.Склад;
						
						ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатковАдресный.Склад + Символы.ПС;
					КонецЕсли;
					
					Если ВыборкаРезультатЗапросаОстатковАдресный.Помещение<>ТекущееПомещение И ЗначениеЗаполнено(ВыборкаРезультатЗапросаОстатковАдресный.Помещение) Тогда 
						ТекущееПомещение = ВыборкаРезультатЗапросаОстатковАдресный.Помещение;
						
						ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатковАдресный.Помещение + Символы.ПС;
					КонецЕсли;

					Если ВыборкаРезультатЗапросаОстатковАдресный.Ячейка<>ТекущаяЯчейка Тогда 
						ТекущаяЯчейка = ВыборкаРезультатЗапросаОстатковАдресный.Ячейка;
						ТекущаяЯчейкаНаименование = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ВыборкаРезультатЗапросаОстатковАдресный.Ячейка.Наименование), ВыборкаРезультатЗапросаОстатковАдресный.Ячейка.Код);
						
						ИнфоТовар = ИнфоТовар + Символы.ПС + ТекущаяЯчейкаНаименование + Символы.ПС;
					КонецЕсли;

					
					ИнфоТовар = ИнфоТовар + ВыборкаРезультатЗапросаОстатковАдресный.КоличествоОстаток + " "
										  + ВыборкаРезультатЗапросаОстатковАдресный.Упаковка + "; " 
										  + ВыборкаРезультатЗапросаОстатковАдресный.Серия + Символы.ПС;
										  
					НетНаОстатках = Ложь;					  
				КонецЦикла;
				
				ИнфоТовар = ИнфоТовар + Символы.ПС+ Символы.ПС+ Символы.ПС;
			КонецЕсли;	
			

			
			//Затем по обычному регистру на оставщихся складах...
			ЗапросОстатков =Новый Запрос;
			ЗапросОстатков.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
			ЗапросОстатков.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
			
			СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
			ЗапросОстатков.УстановитьПараметр("Склады", СписокСкладов);
			ЗапросОстатков.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
			
			СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
			ЗапросОстатков.УстановитьПараметр("Помещения",СписокПомещений);
			ЗапросОстатков.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);

			ЗапросОстатков.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыНаСкладахОстатки.Склад,
			|	ТоварыНаСкладахОстатки.Помещение КАК Помещение,
			|	ТоварыНаСкладахОстатки.Номенклатура,
			|	ТоварыНаСкладахОстатки.Характеристика,
			|	ТоварыНаСкладахОстатки.Серия КАК Серия,
			|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) - СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(
			|			,
			|			Номенклатура = &ТекущаяНоменклатура
			|				И Характеристика = &ТекущаяХарактеристика) КАК ТоварыНаСкладахОстатки
			|ГДЕ
			|	(&ВсеСклады ИЛИ ТоварыНаСкладахОстатки.Склад В (&Склады))
			|	И 1=1 
			|СГРУППИРОВАТЬ ПО
			|	ТоварыНаСкладахОстатки.Склад,
			|	ТоварыНаСкладахОстатки.Помещение,
			|	ТоварыНаСкладахОстатки.Номенклатура,
			|	ТоварыНаСкладахОстатки.Характеристика,
			|	ТоварыНаСкладахОстатки.Серия
			|ИМЕЮЩИЕ
			| 	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток)  - СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) <> 0
			|УПОРЯДОЧИТЬ ПО
			|	ТоварыНаСкладахОстатки.Склад ВОЗР,
			|	ТоварыНаСкладахОстатки.Номенклатура ВОЗР,
			|	ТоварыНаСкладахОстатки.Характеристика ВОЗР,
			|	ТоварыНаСкладахОстатки.Серия ВОЗР";
			
			Если УзелПО.УчитыватьОстаткиПоРегиструСвободныеОстатки Тогда
				Если ДатаМобайл_ОбщийМодуль.ЕстьРегистрНакопления("СвободныеОстатки") Тогда
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "ТоварыНаСкладахОстатки.Помещение"			, "Значение(Справочник.СкладскиеПомещения.)");
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "ТоварыНаСкладахОстатки.Серия"				, "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.)");
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "ТоварыНаСкладах"							, "СвободныеОстатки");
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "СвободныеОстаткиОстатки.ВНаличииОстаток"	, "СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток");
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "КОтгрузкеОстаток"							, "ВРезервеСоСкладаОстаток");
				Иначе
					ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "1=1"										, "(&ВсеПомещения ИЛИ ТоварыНаСкладахОстатки.Помещение В (&Помещения))");
				КонецЕсли;	
			Иначе
				ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "1=1"										, "(&ВсеПомещения ИЛИ ТоварыНаСкладахОстатки.Помещение В (&Помещения))");
			КонецЕсли;
			
			ВыборкаРезультатЗапросаОстатков=ЗапросОстатков.Выполнить().Выбрать();
			Если ВыборкаРезультатЗапросаОстатков.Количество()> 0 Тогда   
				
				ТекущийСклад = Справочники.Склады.ПустаяСсылка();
				ТекущееПомещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
				
				Пока ВыборкаРезультатЗапросаОстатков.Следующий() Цикл
					
					Если ВыборкаРезультатЗапросаОстатков.Склад<>ТекущийСклад Тогда 
						ТекущийСклад = ВыборкаРезультатЗапросаОстатков.Склад;
						
						ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатков.Склад + Символы.ПС;
					КонецЕсли;
					
					Если ВыборкаРезультатЗапросаОстатков.Помещение<>ТекущееПомещение И ЗначениеЗаполнено(ВыборкаРезультатЗапросаОстатков.Помещение) Тогда 
						ТекущееПомещение = ВыборкаРезультатЗапросаОстатков.Помещение;
						
						ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатков.Помещение + Символы.ПС;
					КонецЕсли;

					ИнфоТовар = ИнфоТовар + ВыборкаРезультатЗапросаОстатков.КоличествоОстаток + " "
										  + ВыборкаРезультатЗапросаОстатков.Номенклатура.ЕдиницаИзмерения + "; "
										  + ВыборкаРезультатЗапросаОстатков.Серия + Символы.ПС;
										  
					НетНаОстатках = Ложь;
				КонецЦикла;
			КонецЕсли;	

			//Нет остатков...
			Если НетНаОстатках Тогда
				ИнфоТовар =  "Остатков не числится...";
			КонецЕсли;				
			
			СтрокаВозврата = ИмяТовара + ИнфоТовар + Символы.ПС + Символы.ПС + Символы.ПС;
		КонецЦикла;
		
		Возврат СтрокаВозврата;
		
	Иначе 
		Возврат "По штрихкоду данных не найдено...";
	КонецЕсли;
	
	КонецЕсли;	

КонецФункции	
Функция ПолучитьСостояниеАкцизнойМарки(ИдентификаторМарки = "")
	
		
	PDFBarcode = ИдентификаторМарки;
	СтруктураДанных = Новый Структура("АлкогольнаяПродукция, СправкаБ, Статус");
	
	Если НЕ ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
		ЗапросЕГАИС = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕГАИС_РегистрМарок.АлкогольнаяПродукция.Ссылка КАК АлкогольнаяПродукция,
		|	ЕГАИС_РегистрМарок.Справка2 КАК СправкаБ,
		|	ЕГАИС_РегистрМарок.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.АкцизныеМаркиЕГАИС КАК ЕГАИС_РегистрМарок
		|ГДЕ
		|	ЕГАИС_РегистрМарок.АкцизнаяМарка = &ЕГАИС_Код
		|	И НЕ ЕГАИС_РегистрМарок.АлкогольнаяПродукция.ПометкаУдаления");
		МаркаСсылка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",PDFBarcode);
		ЗапросЕГАИС.УстановитьПараметр("ЕГАИС_Код", МаркаСсылка);
		
		
		Результат = ЗапросЕГАИС.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Результат);
			Возврат СтруктураДанных;
		КонецЕсли;
		
		
		Если стрДлина(PDFBarcode) = 68 Тогда 
			
			ЗапросЕГАИС = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕГАИС_Номенклатура.Ссылка КАК АлкогольнаяПродукция,
			|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК СправкаБ,
			|	ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка) КАК Статус
			|ИЗ
			|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК ЕГАИС_Номенклатура
			|ГДЕ
			|	ЕГАИС_Номенклатура.Код = &Код
			|	И НЕ ЕГАИС_Номенклатура.ПометкаУдаления");
			Алкокод=КодНоменклатурыЕГАИСПоPDF417(PDFBarcode);
			ЗапросЕГАИС.УстановитьПараметр("Код", Алкокод);
			
			Результат = ЗапросЕГАИС.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтруктураДанных, Результат);
				Возврат СтруктураДанных;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗапросЕГАИС = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
				|	астМаркиЕГАИС.НоменклатураЕГАИС.Ссылка КАК АлкогольнаяПродукция,
				|	"""" КАК СправкаБ,
				|	"""" КАК Статус
				|ИЗ
				|	Справочник.астМаркиЕГАИС КАК астМаркиЕГАИС
				|ГДЕ
				|	астМаркиЕГАИС.Наименование = &Код
				|	И НЕ астМаркиЕГАИС.ПометкаУдаления");
		ЗапросЕГАИС.УстановитьПараметр("Код", PDFBarcode);
		Результат = ЗапросЕГАИС.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Результат);
			Возврат СтруктураДанных;
		КонецЕсли;

		Если стрДлина(PDFBarcode)=68 Тогда
			Алкокод=КодНоменклатурыЕГАИСПоPDF417(PDFBarcode);	
			ЗапросЕГАИС = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕГАИС_Номенклатура.Ссылка КАК АлкогольнаяПродукция,
			|	"""" КАК СправкаБ,
			|	"""" КАК Статус
			|ИЗ
			|	Справочник.астНоменклатураЕГАИС КАК ЕГАИС_Номенклатура
			|ГДЕ
			|	ЕГАИС_Номенклатура.Код = &Код
			|	И НЕ ЕГАИС_Номенклатура.ПометкаУдаления");
			
			ЗапросЕГАИС.УстановитьПараметр("Код", Алкокод);
			
			Результат = ЗапросЕГАИС.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтруктураДанных, Результат);
				Возврат СтруктураДанных;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Функция FastAccessRFID(SN, UserName, Barcode, Params)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	СтрокаИнфо = ПолучитьИнфоRFID(УзелПО, Barcode);
	
	Возврат СтрокаИнфо;
	
КонецФункции
Функция ПолучитьИнфоRFID(УзелПО, Barcode)
	
	СтрокаОтвета = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_ЗначенияДополнительныхФорм.Документ КАК Документ,
	|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ЗначенияДополнительныхФорм КАК ДатаМобайл_ЗначенияДополнительныхФорм
	|ГДЕ
	|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение = &RFID";
	
	Запрос.УстановитьПараметр("RFID", Barcode);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.Документ.ИсходныйДокумент.Пустая() Тогда
				СтрокаОтвета = СтрокаОтвета + "Не найден исходный документ для этого штрихкода! ";     // У документа тсд нет исходного документа
			Иначе
				СтрокаОтвета = СтрокаОтвета + Строка(ВыборкаДетальныеЗаписи.Документ.ИсходныйДокумент) + Символы.ПС;			
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СтрокаОтвета;
		
	КонецЕсли;
	
	Возврат "По штрихкоду данных не найдено...";

КонецФункции
Функция FastAccessReserve(SN, UserName, Barcode, Params)

	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	СтрокаИнфо = ПолучитьИнфоReserve(УзелПО, Barcode);
	
	Возврат СтрокаИнфо;
	
КонецФункции
Функция ПолучитьИнфоReserve(УзелПО, Barcode)
	
	
	Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() И (СтрДлина(Barcode) = 68 Или СтрДлина(Barcode) = 150) Тогда // Инфо по марке ЕГАИС
		
		//есть\нет в системе
		//состояние товара - находится на основном складе Или в карантине (брак)
		
		Марка = Barcode;
		ИнфоПоМарке = "";
		ДанныеПомарке = ПолучитьСостояниеАкцизнойМарки(Марка);
		Если ДанныеПомарке <>Неопределено  Тогда
			ИнфоПоМарке = ИнфоПоМарке+ДанныеПомарке.АлкогольнаяПродукция.Наименование + Символы.ПС;
			Если ЗначениеЗаполнено(ДанныеПомарке.СправкаБ) Тогда
				ИнфоПоМарке = ИнфоПоМарке+"СправкаБ: " + ДанныеПомарке.СправкаБ + Символы.ПС;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеПомарке.Статус) Тогда
				ИнфоПоМарке = ИнфоПоМарке+"Статус: " + ДанныеПомарке.Статус + Символы.ПС;
			КонецЕсли;
			
		Иначе
			ИнфоПоМарке = "НЕ ЧИСЛИТСЯ В СИСТЕМЕ!!!";
		КонецЕсли;
		
		Возврат "Акцизная марка"+ Символы.ПС + Марка + Символы.ПС + Символы.ПС + ИнфоПоМарке;
		
		
	ИНАЧЕ //ОБЫЧНЫЕ ТОВАРЫ
		
		СтрокаВозврата = "";
		ВключатьАртикул=УзелПО.ДобавлятьАртикулВНаименование;
		
		//Сначала ищем ячейку...	
		ТекущаяЯчейка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Barcode);
		ТекущаяЯчейкаНаименование = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ТекущаяЯчейка.Наименование), ТекущаяЯчейка.Код);
		
		ЗапросПоискЯчейки=Новый Запрос;
		ЗапросПоискЯчейки.УстановитьПараметр("ТекущаяЯчейка", ТекущаяЯчейка);	
		ЗапросПоискЯчейки.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СкладскиеЯчейки.Ссылка КАК Ячейка
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|ГДЕ
		|	СкладскиеЯчейки.Ссылка = &ТекущаяЯчейка";
		
		ВыборкаРезультатПоискаЯчейки=ЗапросПоискЯчейки.Выполнить().Выбрать();
		Если ВыборкаРезультатПоискаЯчейки.Следующий() Тогда
			ИмяЯчейки = "Ячейка: " + ТекущаяЯчейкаНаименование + Символы.ПС + Символы.ПС;
			
			ЗапросОстатков = Новый Запрос;
			ЗапросОстатков.УстановитьПараметр("ТекущаяЯчейка", ТекущаяЯчейка);
			ЗапросОстатков.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыВЯчейкахОстатки.Номенклатура,
			|	ТоварыВЯчейкахОстатки.Характеристика,
			|	ТоварыВЯчейкахОстатки.Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка,
			|	ТоварыВЯчейкахОстатки.Ячейка,
			|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток)- СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ТоварыВЯчейках.Остатки(,Ячейка=&ТекущаяЯчейка) КАК ТоварыВЯчейкахОстатки
			|СГРУППИРОВАТЬ ПО
			|	ТоварыВЯчейкахОстатки.Номенклатура,
			|	ТоварыВЯчейкахОстатки.Характеристика,
			|	ТоварыВЯчейкахОстатки.Серия,
			|	ТоварыВЯчейкахОстатки.Упаковка,
			|	ТоварыВЯчейкахОстатки.Ячейка			
			|ИМЕЮЩИЕ
			| 	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) <> 0 
			|УПОРЯДОЧИТЬ ПО
			|	ТоварыВЯчейкахОстатки.Ячейка ВОЗР,
			|	ТоварыВЯчейкахОстатки.Номенклатура ВОЗР,
			|	ТоварыВЯчейкахОстатки.Характеристика ВОЗР,
			|	ТоварыВЯчейкахОстатки.Серия ВОЗР,
			|	ТоварыВЯчейкахОстатки.Упаковка ВОЗР";
			
			ВыборкаРезультатЗапросаОстатков=ЗапросОстатков.Выполнить().Выбрать();
			Если ВыборкаРезультатЗапросаОстатков.Количество()> 0 Тогда
				
				ТекущаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
				ТекущаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				
				Пока ВыборкаРезультатЗапросаОстатков.Следующий() Цикл
					
					Если ВыборкаРезультатЗапросаОстатков.Номенклатура<>ТекущаяНоменклатура Или ВыборкаРезультатЗапросаОстатков.Характеристика<>ТекущаяХарактеристика Тогда 
						
						ТекущаяНоменклатура = ВыборкаРезультатЗапросаОстатков.Номенклатура;
						ТекущаяХарактеристика = ВыборкаРезультатЗапросаОстатков.Характеристика;
						
						СтрокаВозврата = СтрокаВозврата + Символы.ПС + "Товар: " + ?(ВключатьАртикул,ВыборкаРезультатЗапросаОстатков.Номенклатура.Артикул + " ","")
						+ ВыборкаРезультатЗапросаОстатков.Номенклатура + " "
						+ ВыборкаРезультатЗапросаОстатков.Характеристика + "; " + Символы.ПС;
					КонецЕсли;
					
					
					СтрокаВозврата = СтрокаВозврата + ВыборкаРезультатЗапросаОстатков.КоличествоОстаток + " "
					+ ВыборкаРезультатЗапросаОстатков.Упаковка + "; " 
					+ ВыборкаРезультатЗапросаОстатков.Серия + Символы.ПС;		
				КонецЦикла;
			Иначе 
				СтрокаВозврата =  "Товаров не числится...";
			КонецЕсли;
			
			Возврат ИмяЯчейки + СтрокаВозврата + Символы.ПС + Символы.ПС;
			
		КонецЕсли;
		
		//Если ячейки нет, то ищем товар...	
		ЗапросПоискТовара = Новый Запрос;
		ЗапросПоискТовара.УстановитьПараметр("Barcode", Barcode);
		ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
		|	И ШтрихкодыНоменклатуры.Номенклатура Ссылка Справочник.Номенклатура";
		
		ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();
		
		Если ВыборкаРезультатПоискаТовара.Количество() = 0 И ДатаМобайл_ОбщийМодуль.ЕстьМаркировка() И стрДлина(Barcode)>30 Тогда
			//Попробуем найти товар по КМ	
			КМ = Лев(Barcode,31);
			ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 13);
			ЗначениеШтрихкодаДляЗапроса = ""+ЗначениеШтрихкода;
			ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"_","$_");
			ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"%","$%");
			ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкодаДляЗапроса + "%";
			
			ЗапросПоискТовара = Новый Запрос;
			ЗапросПоискТовара.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", ЗначениеШтрихкодаДляЗапроса);
			ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
			|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""
			|	И ШтрихкодыУпаковокТоваров.Номенклатура Ссылка Справочник.Номенклатура
			|	И НЕ ШтрихкодыУпаковокТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
			
			ВыборкаРезультатПоискаТовара = ЗапросПоискТовара.Выполнить().Выбрать();
			
			Если ВыборкаРезультатПоискаТовара.Количество() = 0 Тогда
				
				ТекущийШтрихкод = Сред(Barcode, 3, 14);
				ТекущийШтрихкод = УдалитьЛидирующиеНули(ТекущийШтрихкод);
				
				ЗапросПоискТовара = Новый Запрос;
				ЗапросПоискТовара.УстановитьПараметр("Barcode", ТекущийШтрихкод);
				ЗапросПоискТовара.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
				|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
				|ИЗ
				|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
				|ГДЕ
				|	ШтрихкодыНоменклатуры.Штрихкод = &Barcode
				|	И ШтрихкодыНоменклатуры.Номенклатура Ссылка Справочник.Номенклатура";
				
			КонецЕсли;		
		КонецЕсли;		
		
		
		Если ВыборкаРезультатПоискаТовара.Количество()>0 Тогда	
			Пока ВыборкаРезультатПоискаТовара.Следующий() Цикл
				
				НетНаОстатках = Истина;
				ИмяТовара = "Товар: "   +   ?(ВключатьАртикул,ВыборкаРезультатПоискаТовара.Номенклатура.Артикул + " ","")
				+ ВыборкаРезультатПоискаТовара.Номенклатура + " " 
				+ ВыборкаРезультатПоискаТовара.Характеристика + Символы.ПС + Символы.ПС;
				ИнфоТовар = "";
				
				//Сначала ищем остатки по адресному регистру...
				ЗапросОстатковАдресный =Новый Запрос;
				ЗапросОстатковАдресный.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
				ЗапросОстатковАдресный.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
				
				СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
				ЗапросОстатковАдресный.УстановитьПараметр("Склады", СписокСкладов);
				ЗапросОстатковАдресный.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
				
				СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
				ЗапросОстатковАдресный.УстановитьПараметр("Помещения",СписокПомещений);
				ЗапросОстатковАдресный.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);
				
				ЗапросОстатковАдресный.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТоварыВЯчейкахОстатки.Ячейка.Владелец КАК Склад,
				|	ТоварыВЯчейкахОстатки.Ячейка.Помещение КАК Помещение,
				|	ТоварыВЯчейкахОстатки.Ячейка,
				|	ТоварыВЯчейкахОстатки.Номенклатура,
				|	ТоварыВЯчейкахОстатки.Характеристика,
				|	ТоварыВЯчейкахОстатки.Серия,
				|	ТоварыВЯчейкахОстатки.Упаковка,
				|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК КоличествоОстаток
				|ИЗ
				| 	РегистрНакопления.ТоварыВЯчейках.Остатки(
				|   	,
				|   	Номенклатура = &ТекущаяНоменклатура
				|   	 И Характеристика = &ТекущаяХарактеристика) КАК ТоварыВЯчейкахОстатки
				|ГДЕ
				| (&ВсеСклады ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Владелец В (&Склады))
				| И (&ВсеПомещения ИЛИ ТоварыВЯчейкахОстатки.Ячейка.Помещение В (&Помещения))   
				|СГРУППИРОВАТЬ ПО
				|	ТоварыВЯчейкахОстатки.Ячейка.Владелец,
				|	ТоварыВЯчейкахОстатки.Ячейка.Помещение,
				|	ТоварыВЯчейкахОстатки.Ячейка,
				|	ТоварыВЯчейкахОстатки.Номенклатура,
				|	ТоварыВЯчейкахОстатки.Характеристика,
				|	ТоварыВЯчейкахОстатки.Серия,
				|	ТоварыВЯчейкахОстатки.Упаковка
				|ИМЕЮЩИЕ
				| 	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) - СУММА(ТоварыВЯчейкахОстатки.КОтборуОстаток) <> 0 
				|УПОРЯДОЧИТЬ ПО
				|	ТоварыВЯчейкахОстатки.Ячейка.Владелец ВОЗР,
				|	ТоварыВЯчейкахОстатки.Ячейка ВОЗР,
				|	ТоварыВЯчейкахОстатки.Номенклатура ВОЗР,
				|	ТоварыВЯчейкахОстатки.Характеристика ВОЗР,
				|	ТоварыВЯчейкахОстатки.Серия ВОЗР,
				|	ТоварыВЯчейкахОстатки.Упаковка ВОЗР";
				
				ВыборкаРезультатЗапросаОстатковАдресный=ЗапросОстатковАдресный.Выполнить().Выбрать();
				Если ВыборкаРезультатЗапросаОстатковАдресный.Количество()> 0 Тогда
					
					ТекущийСклад = Справочники.Склады.ПустаяСсылка();
					ТекущееПомещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
					ТекущаяЯчейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
					
					Пока ВыборкаРезультатЗапросаОстатковАдресный.Следующий() Цикл
						
						Если ВыборкаРезультатЗапросаОстатковАдресный.Склад<>ТекущийСклад Тогда 
							ТекущийСклад = ВыборкаРезультатЗапросаОстатковАдресный.Склад;
							
							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатковАдресный.Склад + Символы.ПС;
						КонецЕсли;
						
						Если ВыборкаРезультатЗапросаОстатковАдресный.Помещение<>ТекущееПомещение И ЗначениеЗаполнено(ВыборкаРезультатЗапросаОстатковАдресный.Помещение) Тогда 
							ТекущееПомещение = ВыборкаРезультатЗапросаОстатковАдресный.Помещение;
							
							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатковАдресный.Помещение + Символы.ПС;
						КонецЕсли;
						
						Если ВыборкаРезультатЗапросаОстатковАдресный.Ячейка<>ТекущаяЯчейка Тогда 
							ТекущаяЯчейка = ВыборкаРезультатЗапросаОстатковАдресный.Ячейка;
							ТекущаяЯчейкаНаименование = ?(УзелПО.ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(ВыборкаРезультатЗапросаОстатковАдресный.Ячейка.Наименование), ВыборкаРезультатЗапросаОстатковАдресный.Ячейка.Код);
							
							ИнфоТовар = ИнфоТовар + Символы.ПС + ТекущаяЯчейкаНаименование + Символы.ПС;
						КонецЕсли;
						
						
						ИнфоТовар = ИнфоТовар + ВыборкаРезультатЗапросаОстатковАдресный.КоличествоОстаток + " "
						+ ВыборкаРезультатЗапросаОстатковАдресный.Упаковка + "; " 
						+ ВыборкаРезультатЗапросаОстатковАдресный.Серия + Символы.ПС;
						
						НетНаОстатках = Ложь;					  
					КонецЦикла;
					
					ИнфоТовар = ИнфоТовар + Символы.ПС+ Символы.ПС+ Символы.ПС;
				КонецЕсли;	
				
				
				
				//Затем по обычному регистру на оставщихся складах...
				ЗапросОстатков =Новый Запрос;
				ЗапросОстатков.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
				ЗапросОстатков.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
				
				СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
				ЗапросОстатков.УстановитьПараметр("Склады", СписокСкладов);
				ЗапросОстатков.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
				
				СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
				ЗапросОстатков.УстановитьПараметр("Помещения",СписокПомещений);
				ЗапросОстатков.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);
				
				ЗапросОстатков.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТоварыНаСкладахОстатки.Склад,
				|	ТоварыНаСкладахОстатки.Помещение КАК Помещение,
				|	ТоварыНаСкладахОстатки.Номенклатура,
				|	ТоварыНаСкладахОстатки.Характеристика,
				|	ТоварыНаСкладахОстатки.Серия,
				|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) - СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.ТоварыНаСкладах.Остатки(
				|			,
				|			Номенклатура = &ТекущаяНоменклатура
				|				И Характеристика = &ТекущаяХарактеристика) КАК ТоварыНаСкладахОстатки
				|ГДЕ
				|	(&ВсеСклады ИЛИ ТоварыНаСкладахОстатки.Склад В (&Склады))
				|	И (&ВсеПомещения ИЛИ ТоварыНаСкладахОстатки.Помещение В (&Помещения)) 
				|СГРУППИРОВАТЬ ПО
				|	ТоварыНаСкладахОстатки.Склад,
				|	ТоварыНаСкладахОстатки.Помещение,
				|	ТоварыНаСкладахОстатки.Номенклатура,
				|	ТоварыНаСкладахОстатки.Характеристика,
				|	ТоварыНаСкладахОстатки.Серия
				|ИМЕЮЩИЕ
				| 	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток)  - СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток) <> 0
				|УПОРЯДОЧИТЬ ПО
				|	ТоварыНаСкладахОстатки.Склад ВОЗР,
				|	ТоварыНаСкладахОстатки.Номенклатура ВОЗР,
				|	ТоварыНаСкладахОстатки.Характеристика ВОЗР,
				|	ТоварыНаСкладахОстатки.Серия ВОЗР";
				
				ВыборкаРезультатЗапросаОстатков=ЗапросОстатков.Выполнить().Выбрать();
				Если ВыборкаРезультатЗапросаОстатков.Количество()> 0 Тогда   
					
					ТекущийСклад = Справочники.Склады.ПустаяСсылка();
					ТекущееПомещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
					
					Пока ВыборкаРезультатЗапросаОстатков.Следующий() Цикл
						
						Если ВыборкаРезультатЗапросаОстатков.Склад<>ТекущийСклад Тогда 
							ТекущийСклад = ВыборкаРезультатЗапросаОстатков.Склад;
							
							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатков.Склад + Символы.ПС;
						КонецЕсли;
						
						Если ВыборкаРезультатЗапросаОстатков.Помещение<>ТекущееПомещение И ЗначениеЗаполнено(ВыборкаРезультатЗапросаОстатков.Помещение) Тогда 
							ТекущееПомещение = ВыборкаРезультатЗапросаОстатков.Помещение;
							
							ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаОстатков.Помещение + Символы.ПС;
						КонецЕсли;
						
						ИнфоТовар = ИнфоТовар + ВыборкаРезультатЗапросаОстатков.КоличествоОстаток + " "
						+ ВыборкаРезультатЗапросаОстатков.Номенклатура.ЕдиницаИзмерения + "; "
						+ ВыборкаРезультатЗапросаОстатков.Серия + Символы.ПС;
						
						ЗапросРезервов =Новый Запрос;
						ЗапросРезервов.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
						ЗапросРезервов.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
						//СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
						ЗапросРезервов.УстановитьПараметр("Склад", ТекущийСклад);
						//ЗапросРезервов.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
						ЗапросРезервов.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|ТоварыКОтгрузке.Регистратор КАК Регистратор,
						|ТоварыКОтгрузке.Регистратор.Дата КАК РегистраторДата,
						|ТоварыКОтгрузке.Регистратор.Номер КАК РегистраторНомер,
						|ТоварыКОтгрузке.Регистратор.Организация КАК РегистраторОрганизация,
						|ТоварыКОтгрузке.Склад КАК Склад,
						|ТоварыКОтгрузке.Получатель КАК Получатель,
						|ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
						|ТоварыКОтгрузке.Характеристика КАК Характеристика,
						|ТоварыКОтгрузке.Серия КАК Серия,
						|СУММА(ТоварыКОтгрузке.ВРезерве) КАК ВРезерве,
						|СУММА(ТоварыКОтгрузке.КОтгрузке) КАК КОтгрузке,
						|СУММА(ТоварыКОтгрузке.КОформлению) КАК КОформлению,
						|СУММА(ТоварыКОтгрузке.КСборке) КАК КСборке,
						|СУММА(ТоварыКОтгрузке.Собирается) КАК Собирается,
						|СУММА(ТоварыКОтгрузке.Собрано) КАК Собрано
						|ИЗ
						|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
						|ГДЕ
						|	ТоварыКОтгрузке.Склад =&Склад И  
						|			Номенклатура = &ТекущаяНоменклатура
						|				И Характеристика = &ТекущаяХарактеристика 
						|СГРУППИРОВАТЬ ПО
						|	ТоварыКОтгрузке.Регистратор,
						|	ТоварыКОтгрузке.Регистратор.Организация,
						|	ТоварыКОтгрузке.Получатель,
						|	ТоварыКОтгрузке.Склад,
						|	ТоварыКОтгрузке.Номенклатура,
						|	ТоварыКОтгрузке.Характеристика,
						|	ТоварыКОтгрузке.Серия
						|ИМЕЮЩИЕ
						| 	СУММА(ТоварыКОтгрузке.ВРезерве)    <> 0
						|УПОРЯДОЧИТЬ ПО
						|	ТоварыКОтгрузке.Склад ВОЗР,
						|	ТоварыКОтгрузке.Номенклатура ВОЗР,
						|	ТоварыКОтгрузке.Характеристика ВОЗР,
						|	ТоварыКОтгрузке.Серия ВОЗР";
						ВыборкаРезультатЗапросаРезервов=ЗапросРезервов.Выполнить().Выбрать();
						
						ЗапросРезервовНаСкладе =Новый Запрос;
						ЗапросРезервовНаСкладе.УстановитьПараметр("ТекущаяНоменклатура", ВыборкаРезультатПоискаТовара.Номенклатура);
						ЗапросРезервовНаСкладе.УстановитьПараметр("ТекущаяХарактеристика", ВыборкаРезультатПоискаТовара.Характеристика);
						//СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
						ЗапросРезервовНаСкладе.УстановитьПараметр("Склад", ТекущийСклад);
						//ЗапросРезервов.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
						ЗапросРезервовНаСкладе.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|ТоварыКОтгрузке.Склад КАК Склад,
						|ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
						|ТоварыКОтгрузке.Характеристика КАК Характеристика,
						|ТоварыКОтгрузке.Серия КАК Серия,
						|СУММА(ТоварыКОтгрузке.ВРезерве) КАК ВРезерве1,
						|СУММА(ТоварыКОтгрузке.КОтгрузке) КАК КОтгрузке,
						|СУММА(ТоварыКОтгрузке.КОформлению) КАК КОформлению,
						|СУММА(ТоварыКОтгрузке.КСборке) КАК КСборке,
						|СУММА(ТоварыКОтгрузке.Собирается) КАК Собирается,
						|СУММА(ТоварыКОтгрузке.Собрано) КАК Собрано
						|ИЗ
						|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
						|ГДЕ
						|	ТоварыКОтгрузке.Склад =&Склад И  
						|			Номенклатура = &ТекущаяНоменклатура
						|				И Характеристика = &ТекущаяХарактеристика 
						|СГРУППИРОВАТЬ ПО
						|	ТоварыКОтгрузке.Склад,
						|	ТоварыКОтгрузке.Номенклатура,
						|	ТоварыКОтгрузке.Характеристика,
						|	ТоварыКОтгрузке.Серия
						|ИМЕЮЩИЕ
						| 	СУММА(ТоварыКОтгрузке.ВРезерве)    <> 0
						|УПОРЯДОЧИТЬ ПО
						|	ТоварыКОтгрузке.Склад ВОЗР,
						|	ТоварыКОтгрузке.Номенклатура ВОЗР,
						|	ТоварыКОтгрузке.Характеристика ВОЗР,
						|	ТоварыКОтгрузке.Серия ВОЗР";
						ВыборкаРезультатЗапросаРезервовНаСкладе=ЗапросРезервов.Выполнить().Выбрать();
						НетНаРезерве = Истина ;
						ОбщийРезерв=0;
						Пока ВыборкаРезультатЗапросаРезервовНаСкладе.Следующий() Цикл
							ОбщийРезерв=ОбщийРезерв+ВыборкаРезультатЗапросаРезервовНаСкладе.ВРезерве;
						КонецЦикла;
						
						Если ВыборкаРезультатЗапросаРезервов.Количество()> 0 Тогда   
							
							ТекущийСклад = Справочники.Склады.ПустаяСсылка();
							ТекущееПомещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
							ИнфоТовар="";
							НомерРезерва = 0;
							Пока ВыборкаРезультатЗапросаРезервов.Следующий() Цикл
								НомерРезерва = НомерРезерва+1;
								Если ВыборкаРезультатЗапросаРезервов.Склад<>ТекущийСклад Тогда 
									ТекущийСклад = ВыборкаРезультатЗапросаРезервов.Склад;
									ИнфоТовар = ИнфоТовар + Символы.ПС + ВыборкаРезультатЗапросаРезервов.Склад + Символы.ПС;
								КонецЕсли; 
								Если НомерРезерва=1 Тогда
									ИнфоТовар = ИнфоТовар +ВыборкаРезультатЗапросаОстатков.КоличествоОстаток + " "
									+" (свободно " +(ВыборкаРезультатЗапросаОстатков.КоличествоОстаток-ОбщийРезерв) +"). "
									+ ВыборкаРезультатЗапросаОстатков.Номенклатура.ЕдиницаИзмерения
									+ ВыборкаРезультатЗапросаОстатков.Серия + Символы.ПС + Символы.ПС;
								КонецЕсли;
								ИнфоТовар = ИнфоТовар + "Заказ: "+ВыборкаРезультатЗапросаРезервов.РегистраторНомер + "; " 
								+ Формат(ВыборкаРезультатЗапросаРезервов.РегистраторДата,"ДЛФ=D") + ";"+ Символы.ПС
								+ "Резерв по заказу: " + ВыборкаРезультатЗапросаРезервов.ВРезерве + " " 
								+ ВыборкаРезультатЗапросаОстатков.Номенклатура.ЕдиницаИзмерения 
								+ Символы.ПС
								+ ВыборкаРезультатЗапросаРезервов.РегистраторОрганизация + "; "
								+ "Клиент: "+ ВыборкаРезультатЗапросаРезервов.Получатель + "; "	
								+ ВыборкаРезультатЗапросаРезервов.Серия + Символы.ПС + Символы.ПС;
								
								НетНаРезерве = Ложь;
							КонецЦикла;
						КонецЕсли;	
						
						//Нет остатков...
						Если НетНаРезерве Тогда
							ИнфоТовар =  ИнфоТовар + Символы.ПС + "Резервов не числится...";
						КонецЕсли;
						
						
						НетНаОстатках = Ложь;
					КонецЦикла;
				КонецЕсли;	
				
				//Нет остатков...
				Если НетНаОстатках Тогда
					ИнфоТовар =  "Остатков не числится...";
				КонецЕсли;				
				
				СтрокаВозврата = ИмяТовара + ИнфоТовар + Символы.ПС + Символы.ПС + Символы.ПС;
			КонецЦикла;
			Возврат СтрокаВозврата;
			
		Иначе 
			Возврат "По штрихкоду данных не найдено...";
		КонецЕсли;
		
	КонецЕсли;	
	
КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция GetBalance(SN, UserName, ArtID)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;	
	Если Лев(ArtID,3)="8U-" Тогда
		Попытка
			Товар=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID,4,36)));
		Исключение
			Возврат 0;
		КонецПопытки;	
		ИДХК=Сред(ArtID,40,36);
		Если ИДХК="00000000-0000-0000-0000-000000000000" Тогда
			ХК=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Иначе	
			ХК=Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
		КонецЕсли;	
		Товар=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID,4)));
	ИначеЕсли Лев(ArtID,3)="8n-" Тогда
		Возврат 0;
	КонецЕсли;	
	
					ЭтоУслуга = Ложь;
					Попытка 
						Если Товар.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
							ЭтоУслуга = Истина;
						КонецЕсли;
					Исключение
					КонецПопытки;

	Если УзелПО.НеОтображатьОстатки Тогда
		Возврат "Отключено отображение остатков";
	ИначеЕсли ЭтоУслуга Тогда
		Возврат "По услугам остатки не ограничены";	
	Иначе	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СУММА(РезервТСД.Количество) КАК РезервТСД,
	|	0 КАК Резерв,
	|	0 КАК Остаток
	|ПОМЕСТИТЬ РазныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	|		ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество) КАК Количество
	|	ИЗ
	|		Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|	ГДЕ
	|		ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|			И ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура = &Номенклатура
	|				И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.Шаблон.РезервироватьТовар
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	|		ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры) КАК РезервТСД
	|ГДЕ
	|	РезервТСД.Номенклатура = &Номенклатура
	|	И РезервТСД.ХарактеристикаНоменклатуры = &ХК
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(ТоварыВРезервеНаСкладахОстатки.КОтгрузкеОстаток),
	|	СУММА(ТоварыВРезервеНаСкладахОстатки.ВНаличииОстаток)
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И (&ВсеСклады
	|					ИЛИ Склад В (&Склады))
	|				И (&ВсеПомещения
	|					ИЛИ Помещение В (&Помещения))) КАК ТоварыВРезервеНаСкладахОстатки
	|ГДЕ
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура = &Номенклатура
	|	И ТоварыВРезервеНаСкладахОстатки.Характеристика = &ХК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(РазныеДанные.РезервТСД, 0)) КАК РезервТСД,
	|	СУММА(ЕСТЬNULL(РазныеДанные.Резерв, 0)) КАК Резерв,
	|	СУММА(ЕСТЬNULL(РазныеДанные.Остаток, 0)) КАК Остаток
	|ИЗ
	|	РазныеДанные КАК РазныеДанные");
	Запрос.УстановитьПараметр("Номенклатура",Товар);
	Запрос.УстановитьПараметр("ХК",ХК);
	
	СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
	Запрос.УстановитьПараметр("Склады",СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
	
	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения",СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);

	Рез = Запрос.Выполнить().Выгрузить();
	Итог = Рез.Итог("Остаток")-Рез.Итог("Резерв")-Рез.Итог("РезервТСД");
	Итог = Формат(Итог, ПолучитьФорматнуюСтрокуЧисла());

	Возврат "Остаток: " + Итог;
	КонецЕсли;
КонецФункции
Функция CountDiscount(SN, UserName, Barcode, DocOutID)
	Возврат "Пример! 999, 99 руб";
КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция GetPicture(ArtID)
	
	Возврат ДатаМобайл_ОбщийМодуль.ПолучитьДвоичныеДанныеКартинки(ArtID);	
	
КонецФункции
Функция SetRowPhoto(SN, UserName, DocID, ArtID, Barcode, Byte)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocID,5)));
	Исключение
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	Шаблон = ССылкаНаДок.Шаблон;	
	СтруктураПоиска = новый Структура("КодТовара, Штрихкод", СокрЛП(ArtID), СокрЛП(Barcode));
	РазделительПути = ДатаМобайл_ОбщийМодуль.DM_ПолучитьРазделительПути();
	
	Объект = СсылкаНаДок.ПолучитьОбъект();
	
	Если Шаблон.ИспользоватьФотофиксацию И Шаблон.ИспользоватьПодбор Тогда
		СтрокиПодбор = Объект.СобранныеДанныеПодбор.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПодбор.Количество() > 0 Тогда
			
			ИмяПапки = Объект.Номер+ЛЕВ(СтрЗаменить(Объект.Дата,".",""),8);		
			Папка = Шаблон.ПутьВыгрузкиИзображения+ИмяПапки+РазделительПути;
			
			Если НайтиФайлы(Папка).Количество() = 0 Тогда
				СоздатьКаталог(Папка);
			КонецЕсли;
			ПутьСохранения = Папка;
			
			Изображение = Новый Картинка(Byte);		
			
			Изображение = Новый Картинка(Byte);
			
			ПутьКФайлу = ПутьСохранения+Barcode+"_"+СтрЗаменить(Формат(ТекущаяДата(),"ДЛФ=T"),":","")+".jpg";				
			
			Попытка
				Изображение.Записать(ПутьКФайлу);
			Исключение
				Возврат ЛОЖЬ;
			КонецПопытки;
			
			Для Н=0 По СтрокиПодбор.Количество() - 1 Цикл
				СтрокиПодбор[Н].СсылкаНаИзображение = Строка(ПутьКФайлу);	
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Шаблон.ИспользоватьФотофиксацию И Шаблон.ИспользоватьПриемку Тогда
		
		СтрокиПриемка = Объект.СобранныеДанныеПриемка.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПриемка.Количество() > 0 Тогда
			
			Папка = Шаблон.ПутьВыгрузкиИзображения+ИмяПапки+РазделительПути;
			
			Если НайтиФайлы(Папка).Количество() = 0 Тогда
				СоздатьКаталог(Папка);
			КонецЕсли;
			ПутьСохранения = Папка;
			
			Изображение = Новый Картинка(Byte);
			ПутьКФайлу = ПутьСохранения+Barcode+"_"+СтрЗаменить(Формат(ТекущаяДата(),"ДЛФ=T"),":","")+".jpg";				
			Попытка
				Изображение.Записать(ПутьКФайлу);
			Исключение
				Возврат ЛОЖЬ;
			КонецПопытки;
			
			Для Н=0 По СтрокиПриемка.Количество() - 1 Цикл
				СтрокиПриемка[Н].СсылкаНаИзображение = ПутьКФайлу;	
			КонецЦикла;		
			
		КонецЕсли;
	КонецЕсли;
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	Объект.ОбменДанными.Получатели.Заполнить();
	Объект.ОбменДанными.Получатели.Удалить(УзелПО);
	
	Объект.Записать();
	
	Return True;
	
КонецФункции
Функция SetDocPhoto(SN, UserName, DocID, Byte)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocID,5)));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Объект = ССылкаНаДок.ПолучитьОбъект();	
	Шаблон = СсылкаНаДок.Шаблон;
	
	РазделительПути = ДатаМобайл_ОбщийМодуль.DM_ПолучитьРазделительПути();	
	ИмяПапки = Объект.Номер+ЛЕВ(СтрЗаменить(Объект.Дата,".",""),8);
	Папка = Шаблон.ПутьВыгрузкиИзображения+ИмяПапки+РазделительПути;
	
	КоличествоФайлов = НайтиФайлы(Папка).Количество();
	Если КоличествоФайлов = 0 Тогда
		СоздатьКаталог(Папка);
	КонецЕсли;
		
	Изображение = Новый Картинка(Byte);	
	
	//Если КоличествоФайлов > 0 Тогда
	//	ПутьКФайлу = Папка+DocID+"_"+КоличествоФайлов+".jpg";				
	//Иначе
	//	ПутьКФайлу = Папка+DocID+".jpg";
	//КонецЕсли; 
	
	ПутьКФайлу = Папка+DocID+"_"+СтрЗаменить(Формат(ТекущаяДата(),"ДЛФ=T"),":","")+".jpg";				
			
	
	Попытка
		Изображение.Записать(ПутьКФайлу);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Объект.СсылкаНаИзображение = Строка(ПутьКФайлу);
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	Объект.ОбменДанными.Получатели.Заполнить();
	Объект.ОбменДанными.Получатели.Удалить(УзелПО);
	
	Объект.Записать();
	
	Возврат Истина;
	
КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция SendArtToPrint(SN, UserName, ArtID, Barcode, Count, Params)
	
		Если Count = 0 Тогда
			ВызватьИсключениеВС("SendArtToPrint. Не указано количество этикеток для печати. ");
			Возврат ЛОЖЬ;
		КонецЕсли;

		//<Params>{"deviceId":"AQ4929EB933E1B4BF3","username":"Администратор","artId":"8U-fb24da86-ace3-11eb-9dd3-fcaa148f78e900000000-0000-0000-0000-000000000000","barcode":"","count":7,"qtyInt":"4","qtyFrac":"","snValues":"","GS1":"","IsNeedPrintCopy":false,"measureName":"блок","isKM":1}</Params>
		
		СтруктураParams = Новый Структура;
		СтруктураParams.Вставить("QtyInt","");
		СтруктураParams.Вставить("QtyFrac","");
		СтруктураParams.Вставить("snValues","");
		СтруктураParams.Вставить("MeasureName","");
		СтруктураParams.Вставить("isKM","");
		СтруктураParams.Вставить("GS1", "");
		СтруктураParams.Вставить("IsNeedPrintCopy", "");		
		
		ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураParams);
		
		Возврат SendArtToPrint_main(SN, UserName, ArtID, Barcode, Count, СтруктураParams);

КонецФункции
Функция SendArtToPrint_main(SN, UserName, ArtID, Barcode, Count, СтруктураParams)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Если УзелПО.ОнлайнСвязьСПринтсервером Тогда	
		АдресПринтсервера = УзелПО.АдресПринтсервера;
		ПортПринтсервера = УзелПО.ПортПринтсервера;
		Если АдресПринтсервера = "" Или ПортПринтсервера=0 Тогда
			ВызватьИсключениеВС("SendArtToPrint. В обработке АРМ для терминала не указаны настройки онлайн связи с принтсервером. ");
			Возврат Ложь;
		КонецЕсли;	
	Иначе	
		КаталогСохранения = УзелПО.КаталогВыгрузкиФайлаПечати;
		Если КаталогСохранения = "" Тогда
			ВызватьИсключениеВС("SendArtToPrint. В обработке АРМ для терминала не указан каталог сохранения файлов печати. ");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
		

		
		Попытка
			Если ЗначениеЗаполнено(ArtID) Тогда
				Если Лев(ArtID,3)="8U-" Тогда
					лТовар=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID,4,36)));
					ИДХК=Сред(ArtID,40,36);
					Если ИДХК<>"00000000-0000-0000-0000-000000000000" Тогда
						лХарактеристика=Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
					Иначе
						лХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					КонецЕсли;
				ИначеЕсли Лев(ArtID,3)="8n-" Тогда
					лТовар=Справочники.ДатаМобайл_НовыеТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID,4)));
					лХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();			
				Иначе 	
					лТовар=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СРЕД(ArtID,4)));
					лХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
				КонецЕсли;
			Иначе
				лТовар=Справочники.Номенклатура.ПустаяСсылка();
				лХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
			КонецЕсли;		
		Исключение
			лТовар=Справочники.Номенклатура.ПустаяСсылка();
			лХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
		КонецПопытки;
		
		Если СтруктураParams.isKM = "1" Тогда 			
			Если ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(лТовар) = 2 Тогда	//Маркировка обувь
				ВыполнитьПечатьКодовМаркировкиОбувь(УзелПО, лТовар, лХарактеристика, Barcode, Count, СтруктураParams);
			Иначе
				ВызватьИсключениеВС("SendArtToPrint. Для данного типа маркированной продукции не предусмотрена печать ");
				Возврат Ложь;	
			КонецЕсли;			
		Иначе
			ВыполнитьПечатьОбычныхТоваров(УзелПО, лТовар, лХарактеристика, Barcode, Count, СтруктураParams)
		КонецЕсли;
				
	Возврат Истина;	
	
КонецФункции
Функция SendPackToPrint(SN, UserName, DocID, Pack)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;


	Если УзелПО.ОнлайнСвязьСПринтсервером Тогда	
		АдресПринтсервера = УзелПО.АдресПринтсервера;
		ПортПринтсервера = УзелПО.ПортПринтсервера;
		Если АдресПринтсервера = "" Или ПортПринтсервера=0 Тогда
			ВызватьИсключениеВС("SendPackToPrint. В обработке АРМ для терминала не указаны настройки онлайн связи с принтсервером. ");
			Возврат ЛОЖЬ;
		КонецЕсли;	
	Иначе	
		КаталогСохранения = УзелПО.КаталогВыгрузкиФайлаПечати;
		Если КаталогСохранения = "" Тогда
			ВызватьИсключениеВС("SendPackToPrint. В обработке АРМ для терминала не указан каталог сохранения файлов печати. ");
			Возврат ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;


	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocID,5)));
	Исключение
		ВызватьИсключениеВС("SendPackToPrint. Не найден документ. ");
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	ЗапросДанныхПодбор = Новый Запрос();
	ЗапросДанныхПодбор.Текст = "ВЫБРАТЬ
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ИдентификаторСтроки,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.НазваниеТовара,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЯчейкаСсылка,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерийныйНомер,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ШтрихКод,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество
	                     |ИЗ
	                     |	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
						 |ГДЕ
						 |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &СсылкаНаДок
						 |	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист = &ТекущийУпакЛист
						 
						 |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.ИдентификаторСтроки,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.Номенклатура,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.ХарактеристикаНоменклатуры,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.НазваниеТовара,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.ЕдиницаИзмерения,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.ЯчейкаСсылка,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.СерийныйНомер,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.Штрихкод,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.УпаковочныйЛист,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.Количество
	                     |ИЗ
	                     |	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_СтрокиГрупповыхДокументов
						 |ГДЕ
						 |	ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД = &СсылкаНаДок
						 |	И НЕ ДатаМобайл_СтрокиГрупповыхДокументов.ДляОбмена
						 |	И ДатаМобайл_СтрокиГрупповыхДокументов.УпаковочныйЛист = &ТекущийУпакЛист
						 |	И ДатаМобайл_СтрокиГрупповыхДокументов.ИмяТаблицы = &ИмяТаблицы";
	
	
	ЗапросДанныхПодбор.УстановитьПараметр("СсылкаНаДок",СсылкаНаДок);		
	ЗапросДанныхПодбор.УстановитьПараметр("ИмяТаблицы","Select");
	Если СсылкаНаДок.Шаблон.ИспользоватьМаркировку Тогда
		ТекущийУпаковочныйЛист = Pack;
		ТекущийУпаковочныйЛист = СтрЗаменить(ТекущийУпаковочныйЛист,"[","(");
		ТекущийУпаковочныйЛист = СтрЗаменить(ТекущийУпаковочныйЛист,"]",")");
	
		Если СтрДлина(ТекущийУпаковочныйЛист) = 20 И Лев(ТекущийУпаковочныйЛист,2) = "00" Тогда		
			ТекущийУпаковочныйЛист = "(00)" +  Сред(ТекущийУпаковочныйЛист,3,18);
		КонецЕсли;	

		ЗапросДанныхПодбор.УстановитьПараметр("ТекущийУпакЛист",ТекущийУпаковочныйЛист);
	Иначе
		ЗапросДанныхПодбор.УстановитьПараметр("ТекущийУпакЛист",Pack);		
	КонецЕсли;
	
	ТЗСобранныеДанныеПодбор  = ЗапросДанныхПодбор.Выполнить().Выгрузить();
	ТЗСобранныеДанныеПодбор.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число"));
	Для каждого строка Из  ТЗСобранныеДанныеПодбор Цикл
		Если строка.Количество >0 Тогда
			строка.КоличествоСтрок = 1;
		ИначеЕсли строка.Количество<0 Тогда
			строка.КоличествоСтрок = -1;
		КонецЕсли;			
	КонецЦикла;	
	ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,НазваниеТовара,ЕдиницаИзмерения,ЯчейкаСсылка,СерийныйНомер,ШтрихКод,УпаковочныйЛист","Количество,КоличествоСтрок");
	
	
	
	ЗапросДанныхПриемка = Новый Запрос();
	ЗапросДанныхПриемка.Текст = "ВЫБРАТЬ
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ИдентификаторСтроки,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Номенклатура,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ХарактеристикаНоменклатуры,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.НазваниеТовара,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ЕдиницаИзмерения,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ЯчейкаСсылка,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.СерийныйНомер,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ШтрихКод,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.УпаковочныйЛист,
	                     |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Количество
	                     |ИЗ
	                     |	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка
						 |ГДЕ
						 |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ссылка = &СсылкаНаДок
						 |	И ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.УпаковочныйЛист = &ТекущийУпакЛист
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.ИдентификаторСтроки,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.Номенклатура,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.ХарактеристикаНоменклатуры,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.НазваниеТовара,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.ЕдиницаИзмерения,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.ЯчейкаСсылка,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.СерийныйНомер,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.Штрихкод,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.УпаковочныйЛист,
	                     |	ДатаМобайл_СтрокиГрупповыхДокументов.Количество
	                     |ИЗ
	                     |	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_СтрокиГрупповыхДокументов
						 |ГДЕ
						 |	ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД = &СсылкаНаДок
						 |	И НЕ ДатаМобайл_СтрокиГрупповыхДокументов.ДляОбмена
						 |	И ДатаМобайл_СтрокиГрупповыхДокументов.УпаковочныйЛист = &ТекущийУпакЛист
						 |	И ДатаМобайл_СтрокиГрупповыхДокументов.ИмяТаблицы = &ИмяТаблицы";
	
	
	ЗапросДанныхПриемка.УстановитьПараметр("СсылкаНаДок",СсылкаНаДок);
	ЗапросДанныхПриемка.УстановитьПараметр("ИмяТаблицы","Insert");
	Если СсылкаНаДок.Шаблон.ИспользоватьМаркировку Тогда
		ТекущийУпаковочныйЛист = Pack;
		ТекущийУпаковочныйЛист = СтрЗаменить(ТекущийУпаковочныйЛист,"[","(");
		ТекущийУпаковочныйЛист = СтрЗаменить(ТекущийУпаковочныйЛист,"]",")");
	
		Если СтрДлина(ТекущийУпаковочныйЛист) = 20 И Лев(ТекущийУпаковочныйЛист,2) = "00" Тогда		
			ТекущийУпаковочныйЛист = "(00)" +  Сред(ТекущийУпаковочныйЛист,3,18);
		КонецЕсли;	

		ЗапросДанныхПриемка.УстановитьПараметр("ТекущийУпакЛист",ТекущийУпаковочныйЛист);
	Иначе
		ЗапросДанныхПриемка.УстановитьПараметр("ТекущийУпакЛист",Pack);		
	КонецЕсли;

	
	
	ТЗСобранныеДанныеПриемка  = ЗапросДанныхПриемка.Выполнить().Выгрузить();
	ТЗСобранныеДанныеПриемка.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число"));
	Для каждого строка Из  ТЗСобранныеДанныеПриемка Цикл
		Если строка.Количество >0 Тогда
			строка.КоличествоСтрок = 1;
		ИначеЕсли строка.Количество<0 Тогда
			строка.КоличествоСтрок = -1;
		КонецЕсли;			
	КонецЦикла;	
	ТЗСобранныеДанныеПриемка.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,НазваниеТовара,ЕдиницаИзмерения,ЯчейкаСсылка,СерийныйНомер,ШтрихКод,УпаковочныйЛист","Количество,КоличествоСтрок");
	
	СтруктураПоиска = Новый Структура("ТипОперации", "Печать упаковочного листа");
	
	СтрокиРеквизитов = УзелПО.Печать.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРеквизитов.Количество() = 0 Тогда
		ВызватьИсключениеВС("SendPackToPrint. В обработке АРМ для терминала не указан шаблон печати упак. листа. ");
		Возврат ЛОЖЬ;
	КонецЕсли;	
	
	
	ЗаписьXML = Новый ЗаписьXML;
		
	Если НЕ УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ИмяФайла = ПолучитьНовоеИмяФайла();	
		Попытка
			ЗаписьXML.ОткрытьФайл(КаталогСохранения+ИмяФайла+".xml", "UTF-8");
		Исключение
			ВызватьИсключениеВС("SendPackToPrint. Не удалось сохранить файл печати в каталоге: "+КаталогСохранения+" по причине: " + ОписаниеОшибки());	
		КонецПопытки;
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;

	
	Если СсылкаНаДок.Шаблон.ИспользоватьМаркировку Тогда
		
		ТекущийУпаковочныйЛист = Pack;
		ТекущийУпаковочныйЛист = СтрЗаменить(ТекущийУпаковочныйЛист,"[","(");
		ТекущийУпаковочныйЛист = СтрЗаменить(ТекущийУпаковочныйЛист,"]",")");
		
		ВыполнитьПечатьШтрихкодаКороба(УзелПО,СтрокиРеквизитов, ЗаписьXML, ТекущийУпаковочныйЛист, ТЗСобранныеДанныеПодбор);
		Возврат Истина;
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьОбъявлениеXML();	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("PrintData");
	
			
		ЗаписьXML.ЗаписатьНачалоЭлемента("PrinterName");
			ЗаписьXML.ЗаписатьТекст(СтрокиРеквизитов[0].ИмяПринтера);
		ЗаписьXML.ЗаписатьКонецЭлемента();		

		ЗаписьXML.ЗаписатьНачалоЭлемента("TemplateName");
			ЗаписьXML.ЗаписатьТекст(СтрокиРеквизитов[0].ИмяШаблона);
		ЗаписьXML.ЗаписатьКонецЭлемента();		
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Count");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокиРеквизитов[0].КоличествоКопий));
		ЗаписьXML.ЗаписатьКонецЭлемента();		
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Head");
	
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("Client");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СсылкаНаДок.Клиент));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Client
		
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Date");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СсылкаНаДок.Дата));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Date
		
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Number");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СсылкаНаДок.Номер));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Number
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(Pack));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Barcode
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Pack");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(Сред(Pack,4)));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Barcode
		
		
		
		QRData = "";
		Для каждого СтрокаТЧ ИЗ ТЗСобранныеДанныеПодбор Цикл	
			QRData = QRData + ЧистаяСтрока(СтрокаТЧ.Штрихкод)+"\r\n";
		КонецЦикла;
		
		Для каждого СтрокаТЧ ИЗ ТЗСобранныеДанныеПриемка Цикл
			QRData = QRData + ЧистаяСтрока(СтрокаТЧ.Штрихкод)+"\r\n";
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("QRData");
		ЗаписьXML.ЗаписатьТекст(QRData);
		ЗаписьXML.ЗаписатьКонецЭлемента();//BC>
		
		
	ЗаписьXML.ЗаписатьКонецЭлемента();//Head
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Detail");
	
	ИтогоТоваров=0;
	ИтогоМест = 0;
	
	Для каждого СтрокаТЧ ИЗ ТЗСобранныеДанныеПодбор Цикл
		Если СтрокаТЧ.Количество=0 Тогда
			продолжить;
		КонецЕсли;	
 
				ЗаписьXML.ЗаписатьНачалоЭлемента("Item");
				
				ИтогоТоваров = ИтогоТоваров + СтрокаТЧ.Количество*?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель);
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ArtName");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.НазваниеТовара));
				ЗаписьXML.ЗаписатьКонецЭлемента();//ArtName
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.ШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Barcode 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("QNT");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.Количество*?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель)));
				ЗаписьXML.ЗаписатьКонецЭлемента();//QNT 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("QNTPack");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.Количество));
				ЗаписьXML.ЗаписатьКонецЭлемента();//QNTPack

				ЗаписьXML.ЗаписатьНачалоЭлемента("Unit");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.ЕдиницаИзмерения.Наименование));
				ЗаписьXML.ЗаписатьКонецЭлемента();//QNTPack 
			
				ЗаписьXML.ЗаписатьНачалоЭлемента("SN");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.СерийныйНомер));
				ЗаписьXML.ЗаписатьКонецЭлемента();//SN

				ЗаписьXML.ЗаписатьНачалоЭлемента("QNTRows");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.КоличествоСтрок));
				ЗаписьXML.ЗаписатьКонецЭлемента();//QNTPack

				ИтогоМест = ИтогоМест + СтрокаТЧ.КоличествоСтрок;

				ЗаписьXML.ЗаписатьКонецЭлемента();//Item

	КонецЦикла;
		
	Для каждого СтрокаТЧ ИЗ ТЗСобранныеДанныеПриемка Цикл
		Если СтрокаТЧ.Количество=0 Тогда
			продолжить;
		КонецЕсли;

				ЗаписьXML.ЗаписатьНачалоЭлемента("Item");
				
				ИтогоТоваров = ИтогоТоваров + СтрокаТЧ.Количество*?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель);
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ArtName");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.НазваниеТовара));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Param1
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.ШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Param2              
				ЗаписьXML.ЗаписатьНачалоЭлемента("QNT");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.Количество*?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель)));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Param3  
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("QNTPack");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.Количество));
				ЗаписьXML.ЗаписатьКонецЭлемента();//QNTPack
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Unit");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.ЕдиницаИзмерения.Наименование));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Unit 

				
				ЗаписьXML.ЗаписатьНачалоЭлемента("SN");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.СерийныйНомер));
				ЗаписьXML.ЗаписатьКонецЭлемента();//SN

				ЗаписьXML.ЗаписатьНачалоЭлемента("QNTRows");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.КоличествоСтрок));
				ЗаписьXML.ЗаписатьКонецЭлемента();//QNTPack

				ИтогоМест = ИтогоМест + СтрокаТЧ.КоличествоСтрок;


				ЗаписьXML.ЗаписатьКонецЭлемента();//Item
	
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//Detail
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Summary");



		ЗаписьXML.ЗаписатьНачалоЭлемента("Summ"); 
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(ИтогоТоваров));			
		ЗаписьXML.ЗаписатьКонецЭлемента();//Summ
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("SummRows"); 
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(ИтогоМест));			
		ЗаписьXML.ЗаписатьКонецЭлемента();//SummRows 

	ЗаписьXML.ЗаписатьКонецЭлемента();//Summary
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Footer");
		
	
		Год = Строка(Формат(Год(ТекущаяДата()),"ЧГ="));
		Месяц = Строка(Месяц(ТекущаяДата()));
		День = Строка(День(ТекущаяДата()));
		ДатаСтрока = ГОД+Строка(Месяц)+Строка(День);
		ЗаписьXML.ЗаписатьНачалоЭлемента("Date");	
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(ГОД+Месяц+ДЕНЬ));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Date
		ЗаписьXML.ЗаписатьНачалоЭлемента("User");	
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(UserName));
		ЗаписьXML.ЗаписатьКонецЭлемента();//User
	ЗаписьXML.ЗаписатьКонецЭлемента();//Footer
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//PrintData
	
	Если НЕ УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ЗаписьXML.Закрыть();
	Иначе
		СтрокаДляЗапроса = ЗаписьXML.Закрыть();
		ОтправитьДанныеНаПринтсервер(УзелПО,СтрокаДляЗапроса);
	КонецЕсли;

	Возврат Истина;  

КонецФункции
Процедура ВыполнитьПечатьШтрихкодаКороба(УзелПО,СтрокиРеквизитов, ЗаписьXML, Pack, ТЗСобранныеДанныеПодбор)

	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("PrintData");
	
	ЗаписатьЭлементXML(ЗаписьXML, "PrinterName", СтрокиРеквизитов[0].ИмяПринтера);
	ЗаписатьЭлементXML(ЗаписьXML, "TemplateName", СтрокиРеквизитов[0].ИмяШаблона);
	ЗаписатьЭлементXML(ЗаписьXML, "Count", СтрокиРеквизитов[0].КоличествоКопий);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Head");
	
	ЗаписатьЭлементXML(ЗаписьXML, "Barcode", ЧистаяСтрока(Сред(Pack, 1, 22)));	
	
	ЗаписатьЭлементXML(ЗаписьXML, "superdata", Формат(ТекущаяДата(), "ДП="));
	
	
	ИтогоТоваров = 0;
	//ЗаписьXML.ЗаписатьНачалоЭлемента("Detail");
	
	ТЗСобранныеДанныеПодбор.Свернуть("НазваниеТовара, ХарактеристикаНоменклатуры, ЕдиницаИзмерения", "Количество"); 

	
	Для каждого СтрокаТЧ ИЗ ТЗСобранныеДанныеПодбор Цикл
		Если СтрокаТЧ.Количество=0 Тогда
			Продолжить;
		КонецЕсли;	

	//	ЗаписьXML.ЗаписатьНачалоЭлемента("Item");
		
		ИтогоТоваров = ИтогоТоваров + СтрокаТЧ.Количество*?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ArtName");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.НазваниеТовара));
		ЗаписьXML.ЗаписатьКонецЭлемента();//ArtName
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ArtChar");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.ХарактеристикаНоменклатуры.НаименованиеПолное));
		ЗаписьXML.ЗаписатьКонецЭлемента();//ArtChar

		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Qnt");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.Количество*?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель)));
		ЗаписьXML.ЗаписатьКонецЭлемента();//QNT 
		                                  		
	//	ЗаписьXML.ЗаписатьКонецЭлемента();//Item
		
	КонецЦикла;

	
	//ЗаписьXML.ЗаписатьКонецЭлемента();//Detail
	ЗаписьXML.ЗаписатьКонецЭлемента();//Head

	ЗаписьXML.ЗаписатьНачалоЭлемента("Footer");
	ЗаписьXML.ЗаписатьКонецЭлемента();//Footer
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//PrintData
	
	Если НЕ УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ЗаписьXML.Закрыть();
	Иначе
		СтрокаДляЗапроса = ЗаписьXML.Закрыть();
		ОтправитьДанныеНаПринтсервер(УзелПО,СтрокаДляЗапроса);
	КонецЕсли;
		
КонецПроцедуры
Функция SendDocToPrint(SN, UserName, DocID)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;


	Если УзелПО.ОнлайнСвязьСПринтсервером Тогда	
		АдресПринтсервера = УзелПО.АдресПринтсервера;
		ПортПринтсервера = УзелПО.ПортПринтсервера;
		Если АдресПринтсервера = "" Или ПортПринтсервера=0 Тогда
			ВызватьИсключениеВС("SendDocToPrint. В обработке АРМ для терминала не указаны настройки онлайн связи с принтсервером. ");
			Возврат ЛОЖЬ;
		КонецЕсли;	
	Иначе	
		КаталогСохранения = УзелПО.КаталогВыгрузкиФайлаПечати;
		Если КаталогСохранения = "" Тогда
			ВызватьИсключениеВС("SendDocToPrint. В обработке АРМ для терминала не указан каталог сохранения файлов печати. ");
			Возврат ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;


	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocID,5)));
	Исключение
		ВызватьИсключениеВС("SendDocToPrint. Не найден документ. ");
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	//Если СсылкаНаДок.Шаблон.ВидДокумента = "ОтборРазмещениеТоваров" Тогда
	//	Если ЗначениеЗаполнено(СсылкаНаДок.ИсходныйДокумент) Тогда
	//		Если ЗначениеЗаполнено(СсылкаНаДок.ИсходныйДокумент.Распоряжение) И ТипЗнч(СсылкаНаДок.ИсходныйДокумент.Распоряжение) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда		
	//			Если СсылкаНаДок.ИсходныйДокумент.Распоряжение.ТоварыПоРаспоряжениям.Количество()>0 Тогда
	//				ТекущийЗаказ = СсылкаНаДок.ИсходныйДокумент.Распоряжение.ТоварыПоРаспоряжениям[0].Распоряжение;
	//				Если ТипЗнч(ТекущийЗаказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
	//					ОписаниеОшибки = "";
	//					ОтправитьПрикрепленныйФайлДокументаНаПечать(УзелПО,ТекущийЗаказ,ОписаниеОшибки);
	//					Если ОписаниеОшибки= "" Тогда
	//						Возврат ИСТИНА;
	//					Иначе
	//						ВызватьИсключениеВС("SendDocToPrint. "+ОписаниеОшибки);
	//					 	Возврат ЛОЖЬ;
	//					КонецЕсли;		
	//				КонецЕсли;	
	//		    КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЕсли;
	
	
	ТЗСобранныеДанныеПодбор=СсылкаНаДок.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,НазваниеТовара,ЕдиницаИзмерения,ЯчейкаСсылка,СерийныйНомер,ШтрихКод,УпаковочныйЛист","Количество");
	
	ТЗСобранныеДанныеПриемка=СсылкаНаДок.СобранныеДанныеПриемка.Выгрузить();
	ТЗСобранныеДанныеПриемка.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,НазваниеТовара,ЕдиницаИзмерения,ЯчейкаСсылка,СерийныйНомер,ШтрихКод,УпаковочныйЛист","Количество");
	
	СтруктураПоиска = Новый Структура("ТипОперации", "Печать документа");
	
	СтрокиРеквизитов = УзелПО.Печать.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРеквизитов.Количество() = 0 Тогда
		ВызватьИсключениеВС("SendDocToPrint. В обработке АРМ для терминала не указан шаблон печати документа. ");
		Возврат ЛОЖЬ;
	КонецЕсли;	
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Если НЕ УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ИмяФайла = ПолучитьНовоеИмяФайла();	
		Попытка
			ЗаписьXML.ОткрытьФайл(КаталогСохранения+ИмяФайла+".xml", "UTF-8");
		Исключение
			ВызватьИсключениеВС("SendDocToPrint. Не удалось сохранить файл печати в каталоге: "+КаталогСохранения+" по причине: " + ОписаниеОшибки());	
		КонецПопытки;
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;

		
	ЗаписьXML.ЗаписатьОбъявлениеXML();	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("PrintData");
	
			
		ЗаписьXML.ЗаписатьНачалоЭлемента("PrinterName");
			ЗаписьXML.ЗаписатьТекст(СтрокиРеквизитов[0].ИмяПринтера);
		ЗаписьXML.ЗаписатьКонецЭлемента();		

		ЗаписьXML.ЗаписатьНачалоЭлемента("TemplateName");
			ЗаписьXML.ЗаписатьТекст(СтрокиРеквизитов[0].ИмяШаблона);
		ЗаписьXML.ЗаписатьКонецЭлемента();		
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Count");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокиРеквизитов[0].КоличествоКопий));
		ЗаписьXML.ЗаписатьКонецЭлемента();		
		
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Head");
	
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("Client");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СсылкаНаДок.Клиент));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Client
		
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Date");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СсылкаНаДок.Дата));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Date
		
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Number");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СсылкаНаДок.Номер));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Number
		
		
		QRData = "";
		Для каждого СтрокаТЧ ИЗ ТЗСобранныеДанныеПодбор Цикл
				QRData = QRData + ЧистаяСтрока(СтрокаТЧ.Штрихкод)+"\r\n";
		КонецЦикла;
		
		Для каждого СтрокаТЧ ИЗ ТЗСобранныеДанныеПриемка Цикл
				QRData = QRData + ЧистаяСтрока(СтрокаТЧ.Штрихкод)+"\r\n";
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("QRData");
		ЗаписьXML.ЗаписатьТекст(QRData);
		ЗаписьXML.ЗаписатьКонецЭлемента();//BC>
		
		
	ЗаписьXML.ЗаписатьКонецЭлемента();//Head
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Detail");
	
	ИтогоТоваров=0;
	  Для каждого СтрокаТЧ ИЗ ТЗСобранныеДанныеПодбор Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("Item");
				
				ИтогоТоваров = ИтогоТоваров + СтрокаТЧ.Количество*?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель);
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ArtName");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.НазваниеТовара));
				ЗаписьXML.ЗаписатьКонецЭлемента();//ArtName
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.ШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Barcode              
				ЗаписьXML.ЗаписатьНачалоЭлемента("QNT");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.Количество*?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель)));
				ЗаписьXML.ЗаписатьКонецЭлемента();//QNT 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("QNTPack");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.Количество));
				ЗаписьXML.ЗаписатьКонецЭлемента();//QNTPack

				ЗаписьXML.ЗаписатьНачалоЭлемента("Unit");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.ЕдиницаИзмерения.Наименование));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Unit 
			
				ЗаписьXML.ЗаписатьНачалоЭлемента("SN");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.СерийныйНомер));
				ЗаписьXML.ЗаписатьКонецЭлемента();//SN
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Pack");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрЗаменить(СтрокаТЧ.УпаковочныйЛист,"/////","")));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Pack

				ЗаписьXML.ЗаписатьКонецЭлемента();//Item
		КонецЦикла;
		
		Для каждого СтрокаТЧ ИЗ ТЗСобранныеДанныеПриемка Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("Item");
				
				ИтогоТоваров = ИтогоТоваров + СтрокаТЧ.Количество*?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель);
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ArtName");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.НазваниеТовара));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Param1
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.ШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Param2              
				ЗаписьXML.ЗаписатьНачалоЭлемента("QNT");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.Количество*?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0,1,СтрокаТЧ.ЕдиницаИзмерения.Числитель)));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Param3  
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("QNTPack");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.Количество));
				ЗаписьXML.ЗаписатьКонецЭлемента();//QNTPack
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Unit");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.ЕдиницаИзмерения.Наименование));
				ЗаписьXML.ЗаписатьКонецЭлемента();//QNTPack 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("SN");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрокаТЧ.СерийныйНомер));
				ЗаписьXML.ЗаписатьКонецЭлемента();//SN

				ЗаписьXML.ЗаписатьНачалоЭлемента("Pack");
				ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СтрЗаменить(СтрокаТЧ.УпаковочныйЛист,"/////","")));
				ЗаписьXML.ЗаписатьКонецЭлемента();//Pack
				
				ЗаписьXML.ЗаписатьКонецЭлемента();//Item
		КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//Detail
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Summary");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Itog");
		ЗаписьXML.ЗаписатьТекст("Итого:");
		ЗаписьXML.ЗаписатьКонецЭлемента();//ITOG ?
		ЗаписьXML.ЗаписатьНачалоЭлемента("Summ"); 
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(ИтогоТоваров));			
		ЗаписьXML.ЗаписатьКонецЭлемента();//Summ ?
		ЗаписьXML.ЗаписатьКонецЭлемента();//Summary
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Footer");
		
	
		Год = Строка(Формат(Год(ТекущаяДата()),"ЧГ="));
		Месяц = Строка(Месяц(ТекущаяДата()));
		День = Строка(День(ТекущаяДата()));
		ДатаСтрока = ГОД+Строка(Месяц)+Строка(День);
		ЗаписьXML.ЗаписатьНачалоЭлемента("Date");	
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(ГОД+Месяц+ДЕНЬ));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Date
		ЗаписьXML.ЗаписатьНачалоЭлемента("User");	
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(UserName));
		ЗаписьXML.ЗаписатьКонецЭлемента();//User
	ЗаписьXML.ЗаписатьКонецЭлемента();//Footer
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//PrintData
	
	Если НЕ УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ЗаписьXML.Закрыть();
	Иначе
		СтрокаДляЗапроса = ЗаписьXML.Закрыть();
		ОтправитьДанныеНаПринтсервер(УзелПО,СтрокаДляЗапроса);
	КонецЕсли;
	
	Возврат Истина;  

КонецФункции
Процедура ОтправитьПрикрепленныйФайлДокументаНаПечать(УзелПО,ТекущийЗаказ,ОписаниеОшибки)
	
	//Есть шаблон, исходным документом которого является документ «Отбор (размещение) товаров», он связан с документом «Расходный ордер на товары», 
	//а тот в свою очередь с документом «Заказ клиента». В документе «Заказ клиента» планируется использовать дополнительный реквизит «ФайлДляПечати», 
	//в который будет помещаться файл с расширением .pdf.
	
	//Требуется добавить в модуль веб-сервиса DataMobile логику, которая должна сохранять упомянутый выше файл .pdf 
	//в папку файлов сервера печати при инициировании печати документа с ТСД («три точки» на документе / печать документа).
	
	//В случае, Если при выполнении операции искомого файла в документе не обнаружилось – 
	//необходимо выдавать в ПО DataMobile уведомление, указывающее на ошибку печати.
	
	//Если же печать выполняется для документа, имеющего другой шаблон (с иным исходным документом), - 
	//необходимо выполнять базовую логику печати документа.	

	
	КаталогСохранения = УзелПО.КаталогВыгрузкиФайлаПечати;
	Если КаталогСохранения = "" Тогда
		ОписаниеОшибки="В обработке АРМ для терминала не указан каталог сохранения файлов печати. ";
		Возврат;
	КонецЕсли;

	
	ФайлНаПечать = ПолучитьЗначениеДопРеквизита(ТекущийЗаказ);
	Если ЗначениеЗаполнено(ФайлНаПечать) Тогда
		
		Модуль_РаботаСФайлами = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("РаботаСФайлами");
		ДанныеФайла = Модуль_РаботаСФайлами.ДвоичныеДанныеФайла(ФайлНаПечать, Ложь);
		Если ДанныеФайла <> Неопределено Тогда
			ИмяФайла = ПолучитьНовоеИмяФайла();
			Попытка 
				ДанныеФайла.Записать(КаталогСохранения+ИмяФайла+".pdf");
			Исключение
				ОписаниеОшибки = "Не удалось сохранить файл печати в каталоге: "+КаталогСохранения+" по причине: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			ОписаниеОшибки = "Не найден прикрепленный к документу файл для печати";
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "Не найден прикрепленный к документу файл для печати";
	КонецЕсли;

КонецПроцедуры
Функция ПолучитьЗначениеДопРеквизита(ТекущийЗаказ)

	Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |    ЗаказКлиентаДополнительныеРеквизиты.Значение
        |ИЗ
        |    Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
        |ГДЕ
        |    ЗаказКлиентаДополнительныеРеквизиты.Ссылка = &Объект
        |    И ЗаказКлиентаДополнительныеРеквизиты.Свойство = &Свойство";

    Запрос.УстановитьПараметр("Объект", ТекущийЗаказ);
    Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("файл для печати"));
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции
Функция SendEgaisBlankABToPrint(SN, UserName, DocID, ArtID, Barcode, Alcocode, BlankA, BlankB)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;


	КаталогСохранения = УзелПО.КаталогВыгрузкиФайлаПечати;
	
	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocID,5)));
	Исключение
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	СтруктураПоиска = Новый Структура("ТипОперации", "Печать справок ЕГАИС");
	
	СтрокиРеквизитов = УзелПО.Печать.НайтиСтроки(СтруктураПоиска);
		
	ЗаписьXML = Новый ЗаписьXML;
	
	ИмяФайла = СтрЗаменить(ТекущаяДата(),":","");
	ИмяФайла = СтрЗаменить(ИмяФайла, ".","");
	ИмяФайла = СтрЗаменить(ИмяФайла, " ","");

	Генератор = Новый ГенераторСлучайныхЧисел(1);
	ИдентификаторФайла = Генератор.СлучайноеЧисло(1, 1000);
	
	ИмяФайла = ИмяФайла+ИдентификаторФайла;
	
	Попытка
		ЗаписьXML.ОткрытьФайл(КаталогСохранения+ИмяФайла+".xml", "UTF-8");
	Исключение
		Возврат ЛОЖЬ;
	КонецПопытки;
		
	ЗаписьXML.ЗаписатьОбъявлениеXML();	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("PrintData");
	
		Count = 0 ;
		Для Н = 0 По СтрокиРеквизитов.Количество()-1 Цикл
			
		ЗаписьXML.ЗаписатьНачалоЭлемента("PrinterName");
			ЗаписьXML.ЗаписатьТекст(СтрокиРеквизитов[Н].ИмяПринтера);
		ЗаписьXML.ЗаписатьКонецЭлемента();		

		ЗаписьXML.ЗаписатьНачалоЭлемента("TemplateName");
			ЗаписьXML.ЗаписатьТекст(СтрокиРеквизитов[Н].ИмяШаблона);
		ЗаписьXML.ЗаписатьКонецЭлемента();		
		
		Count = Count+1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("Count");
			ЗаписьXML.ЗаписатьТекст(Строка(СтрокиРеквизитов[0].КоличествоКопий));
		ЗаписьXML.ЗаписатьКонецЭлемента();		
		
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Head");
	
	Алкоголь = Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду(СокрЛП(Alcocode));
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("ArtName");
			ЗаписьXML.ЗаписатьТекст(Строка(Алкоголь.Наименование));
		ЗаписьXML.ЗаписатьКонецЭлемента();	//ArtName	
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Alcocode");
			ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(Alcocode));
		ЗаписьXML.ЗаписатьКонецЭлемента();	//Alcocode	

		ЗаписьXML.ЗаписатьНачалоЭлемента("BlankA");
			ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(BlankA));
		ЗаписьXML.ЗаписатьКонецЭлемента();	//BlankA	
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("BlankB");
			ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(BlankB));
		ЗаписьXML.ЗаписатьКонецЭлемента();	//BlankB	
		
	ЗаписьXML.ЗаписатьКонецЭлемента();//Head
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//PrintData
	
	Возврат Истина;  
	
КонецФункции
Функция ОтправитьСериюНаПечать(SN, UserName, DocID, СтруктураСтроки)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;


	Если УзелПО.ОнлайнСвязьСПринтсервером Тогда	
		АдресПринтсервера = УзелПО.АдресПринтсервера;
		ПортПринтсервера = УзелПО.ПортПринтсервера;
		Если АдресПринтсервера = "" Или ПортПринтсервера=0 Тогда
			ВызватьИсключениеВС("Печать серии. В обработке АРМ для терминала не указаны настройки онлайн связи с принтсервером. ");
			Возврат ЛОЖЬ;
		КонецЕсли;	
	Иначе	
		КаталогСохранения = УзелПО.КаталогВыгрузкиФайлаПечати;
		Если КаталогСохранения = "" Тогда
			ВызватьИсключениеВС("Печать серии. В обработке АРМ для терминала не указан каталог сохранения файлов печати. ");
		КонецЕсли;		
	КонецЕсли;	

	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocID,5)));
	Исключение
		ВызватьИсключениеВС("Печать серии. Не найден документ. ");
	КонецПопытки;
	
	СтруктураПоиска = Новый Структура("ТипОперации", "Печать серийного номера/серии");
	
	СтрокиРеквизитов = УзелПО.Печать.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРеквизитов.Количество() = 0 Тогда
		ВызватьИсключениеВС("Печать серии. В обработке АРМ для терминала не указан шаблон печати упак. листа. ");
	КонецЕсли;	
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Если НЕ УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ИмяФайла = ПолучитьНовоеИмяФайла();	
		Попытка
			ЗаписьXML.ОткрытьФайл(КаталогСохранения+ИмяФайла+".xml", "UTF-8");
		Исключение
			ВызватьИсключениеВС("Печать серии. Не удалось сохранить файл печати в каталоге: "+КаталогСохранения+" по причине: " + ОписаниеОшибки());	
		КонецПопытки;
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;
			
	ЗаписьXML.ЗаписатьОбъявлениеXML();	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("PrintData");
	
			
		ЗаписьXML.ЗаписатьНачалоЭлемента("PrinterName");
			ЗаписьXML.ЗаписатьТекст(СтрокиРеквизитов[0].ИмяПринтера);
		ЗаписьXML.ЗаписатьКонецЭлемента();		

		ЗаписьXML.ЗаписатьНачалоЭлемента("TemplateName");
			ЗаписьXML.ЗаписатьТекст(СтрокиРеквизитов[0].ИмяШаблона);
		ЗаписьXML.ЗаписатьКонецЭлемента();		
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Count");
			//ЗаписьXML.ЗаписатьТекст(Строка(СтрокиРеквизитов[0].КоличествоКопий));
			ЗаписьXML.ЗаписатьТекст(Строка(СтруктураСтроки.Количество));
		ЗаписьXML.ЗаписатьКонецЭлемента();		
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Head");
	
	/////////////////////////////////////////////////
		ПорядковыйНомер = 0;
		СтруктураПоискаНомера = Новый Структура("Номенклатура", СтруктураСтроки.Номенклатура);
		СтрокиПоискаНомера = СсылкаНаДок.СобранныеДанныеПодбор.НайтиСтроки(СтруктураПоискаНомера);
		Если СтрокиПоискаНомера.Количество() = 0 Тогда
			ПорядковыйНомер = ПорядковыйНомер+1;
		Иначе
			Для каждого СтрокаПоискаНомера Из СтрокиПоискаНомера Цикл
				Если СтрокаПоискаНомера.Количество>0 Тогда
					ПорядковыйНомер = ПорядковыйНомер+1;
				ИначеЕсли СтрокаПоискаНомера.Количество<0 Тогда
					ПорядковыйНомер = ПорядковыйНомер-1;
				КонецЕсли;	
			КонецЦикла;
			ПорядковыйНомер = ПорядковыйНомер+1;
		КонецЕсли;
		
		Если ПорядковыйНомер = 0 Тогда
			ПорядковыйНомер = ПорядковыйНомер+1; 
		КонецЕсли;	
		
		ДатаСтрока = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
		НомерДокумента = СсылкаНаДок.ИсходныйДокумент.Номер;
		СерийныйНомер = СтруктураСтроки.СерийныйНомер;
		НазваниеТовара = СтруктураСтроки.НазваниеТовара;
		
		Попытка 
			АдресДоставки = СсылкаНаДок.ИсходныйДокумент.АдресДоставки; 
		Исключение
			АдресДоставки = ""; 
		КонецПопытки;
	/////////////////////////////////////////////////
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("CountNumber");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(ПорядковыйНомер));
		ЗаписьXML.ЗаписатьКонецЭлемента();//CountNumber
			
		ЗаписьXML.ЗаписатьНачалоЭлемента("DocNumber");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(НомерДокумента));
		ЗаписьXML.ЗаписатьКонецЭлемента();//DocNumber
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("SN");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(СерийныйНомер));
		ЗаписьXML.ЗаписатьКонецЭлемента();//SN	
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ArtName");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(НазваниеТовара));
		ЗаписьXML.ЗаписатьКонецЭлемента();//ArtName	
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Address");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(АдресДоставки));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Address	
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Date");
		ЗаписьXML.ЗаписатьТекст(ЧистаяСтрока(ДатаСтрока));
		ЗаписьXML.ЗаписатьКонецЭлемента();//Date

		
	ЗаписьXML.ЗаписатьКонецЭлемента();//Head
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Detail");	
	ЗаписьXML.ЗаписатьКонецЭлемента();//Detail
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Summary");
	ЗаписьXML.ЗаписатьКонецЭлемента();//Summary
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Footer");	
	ЗаписьXML.ЗаписатьКонецЭлемента();//Footer
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//PrintData
	
	Если НЕ УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ЗаписьXML.Закрыть();
	Иначе
		СтрокаДляЗапроса = ЗаписьXML.Закрыть();
		ОтправитьДанныеНаПринтсервер(УзелПО,СтрокаДляЗапроса);
	КонецЕсли;

	Возврат Истина;  

КонецФункции
//////////////////////////////////////////////////////////////////////////////
Функция SetArtPhoto(SN, UserName, DMImage)
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Если Не РазрешеноРедактированиеТовара(УзелПО,UserName) Тогда
		ВызватьИсключениеВС("SetArtPhoto. Пользователю в настройках прав в АРМ 1С не разрешено редактирование существующих товаров. ");
		Возврат "";
	КонецЕсли;
		
	
	Если Лев(DMImage.DMArtID,3)="8U-" Тогда
		Номенклатура=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DMImage.DMArtID,4)));
	ИначеЕсли Лев(DMImage.DMArtID,3)="8e-" Тогда 
		НоменклатураЕГАИС = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DMImage.DMArtID,4)));
		Если ТоварСопоставленОдинКОдному(НоменклатураЕГАИС) Тогда
			Номенклатура = ДатаМобайл_ОбщийМодуль.ПолучитьНоменклатуруПоЕГАИС(НоменклатураЕГАИС);
		Иначе 
	   	 ВызватьИсключениеВС("SetArtPhoto. Не найдена номенклатура. ");
		КонецЕсли;	
	Иначе 
		ВызватьИсключениеВС("SetArtPhoto. Не найдена номенклатура. ");
	КонецЕсли;
	
	
	Попытка	
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(DMImage.DMImageData);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", Номенклатура);
		лАвтор = Справочники.Пользователи.НайтиПоНаименованию(UserName);
		Если лАвтор.Пустая() Тогда
			ВыборкаПользователей = Справочники.Пользователи.Выбрать();
			Пока  ВыборкаПользователей.Следующий() Цикл
				Если ВыборкаПользователей.Наименование<>"<Не указан>" Тогда
					лАвтор = ВыборкаПользователей.Ссылка;
				Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		ПараметрыФайла.Вставить("Автор", лАвтор);
		ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Изображение Из DataMobile'"));
		ПараметрыФайла.Вставить("РасширениеБезТочки", "jpg");
		ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		
		ПрисоединенныйФайл = ДатаМобайл_ОбщийМодуль.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище);
		
		Если Номенклатура.ФайлКартинки.Пустая() Тогда
			НоменклатураОбъект =  Номенклатура.ПолучитьОбъект();
			НоменклатураОбъект.ФайлКартинки =  ПрисоединенныйФайл.Ссылка;
			НоменклатураОбъект.Записать();
		КонецЕсли;
		

		Возврат "8i-"+Строка(ПрисоединенныйФайл.УникальныйИдентификатор());
	Исключение
		ВызватьИсключениеВС("SetArtPhoto. Ошибка добавления изображения. "+ОписаниеОшибки());
		Возврат "";
	КонецПопытки;	
КонецФункции
Функция DeleteArtPhoto(SN, UserName, ArtID, DMImageID)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Если Не РазрешеноРедактированиеТовара(УзелПО,UserName) Тогда
		ВызватьИсключениеВС("DeleteArtPhoto. Пользователю в настройках прав в АРМ 1С не разрешено редактирование существующих товаров. ");
		Возврат Ложь;
	КонецЕсли;

	Если Лев(DMImageID,3)="8i-" Тогда
		Изображение=Справочники.НоменклатураПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DMImageID,4)));
	Иначе
		ВызватьИсключениеВС("DeleteArtPhoto. Не найдено изображение для удаления. ");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ИзображениеОбъект = Изображение.ПолучитьОбъект();
		ИзображениеОбъект.ПометкаУдаления = Истина;
		ИзображениеОбъект.Записать();
	Исключение
 		ВызватьИсключениеВС("DeleteArtPhoto. Ошибка удаления изображения. "+ ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Истина;
КонецФункции
Функция GetArtPhotos(SN, UserName, ArtID)
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMImageList"));
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	
	Если Лев(ArtID,3)="8U-" Тогда
		Номенклатура=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID,4)));
	ИначеЕсли Лев(ArtID,3)="8e-" Тогда
		 НоменклатураЕГАИС = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ArtID,4)));
	     Если ТоварСопоставленОдинКОдному(НоменклатураЕГАИС) Тогда
			Номенклатура = ДатаМобайл_ОбщийМодуль.ПолучитьНоменклатуруПоЕГАИС(НоменклатураЕГАИС);
		Иначе 
	   	 Возврат ОбъектСписка;
		КонецЕсли;
	Иначе
		Возврат ОбъектСписка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	Файлы.Ссылка КАК Файл,
				  |	Файлы.ВладелецФайла КАК Номенклатура,
	              |	Файлы.Наименование КАК Наименование,
	              |	Файлы.Описание КАК Описание,
	              |	Файлы.Том КАК Том,
	              |	Файлы.Расширение КАК Расширение,
	              |	Файлы.ПутьКФайлу КАК ПутьКФайлу
	              |ИЗ
	              |	Справочник.НоменклатураПрисоединенныеФайлы КАК Файлы
	              |ГДЕ
	              |	Файлы.ВладелецФайла = &Номенклатура
				  |	И НЕ Файлы.ПометкаУдаления
	              |УПОРЯДОЧИТЬ ПО
	              |	Номенклатура";

	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		ОбъектКартинки=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMImage"));
		ОбъектКартинки.DMArtID = ArtID;
		ОбъектКартинки.DMImageID = "8i-"+Строка(Выборка.Файл.УникальныйИдентификатор());
		
		Попытка
			ОбъектКартинки.DMImageData = ПолучитьИзвременногоХранилища(ДатаМобайл_ОбщийМодуль.ДанныеФайла(Выборка.Файл, Новый УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла);
		Исключение
			Продолжить;
		КонецПопытки;	
		ОбъектСписка.DMImage.Добавить(ОбъектКартинки);
	КонецЦикла;
	
	Возврат ОбъектСписка;

КонецФункции
Функция GetArtsPhotos(SN, UserName)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMImageList"));
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
 	
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	Файлы.Ссылка КАК Файл,
	              |	Файлы.ВладелецФайла КАК Номенклатура,
	              |	Файлы.Наименование КАК Наименование,
	              |	Файлы.Описание КАК Описание,
	              |	Файлы.Том КАК Том,
	              |	Файлы.Расширение КАК Расширение,
	              |	Файлы.ПутьКФайлу КАК ПутьКФайлу,
	              |	Файлы.ВладелецФайла.Ссылка КАК ВладелецФайлаСсылка
	              |ИЗ
	              |	Справочник.НоменклатураПрисоединенныеФайлы КАК Файлы
	              |ГДЕ
	              |	НЕ Файлы.ПометкаУдаления
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Номенклатура";

	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		ОбъектКартинки=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMImage"));
		ОбъектКартинки.DMArtID = "8U-"+СокрЛП(Выборка.Номенклатура.УникальныйИдентификатор())+СокрЛП(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка().УникальныйИдентификатор());
		ОбъектКартинки.DMImageID = "8i-"+Строка(Выборка.Файл.УникальныйИдентификатор());
		
		Попытка
			ОбъектКартинки.DMImageData = ПолучитьИзвременногоХранилища(ДатаМобайл_ОбщийМодуль.ДанныеФайла(Выборка.Файл, Новый УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла);
		Исключение
			Продолжить;
		КонецПопытки;	
		ОбъектСписка.DMImage.Добавить(ОбъектКартинки);
	КонецЦикла;
	
	Возврат ОбъектСписка;

КонецФункции
//////////////////////////////////////////////////////////////////////////////

//ФУНКЦИИ OnArtScan 
#Область OnArtScan

Процедура OnArtScan_Select_Insert_Cells(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, Тип, Ячейка)
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	               |	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	               |	ШтрихкодыНоменклатуры.Упаковка.Наименование КАК Наименование,
	               |	ВЫБОР
	               |		КОГДА ШтрихкодыНоменклатуры.Упаковка.Числитель = 0
	               |				ИЛИ ШтрихкодыНоменклатуры.Упаковка.Числитель ЕСТЬ NULL
	               |			ТОГДА 1
	               |		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Числитель
	               |	КОНЕЦ / ВЫБОР
	               |		КОГДА ШтрихкодыНоменклатуры.Упаковка.Знаменатель = 0
	               |				ИЛИ ШтрихкодыНоменклатуры.Упаковка.Знаменатель ЕСТЬ NULL
	               |			ТОГДА 1
	               |		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Знаменатель
	               |	КОНЕЦ КАК Коэффициент
	               |ПОМЕСТИТЬ ДоступныеТовары
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |ГДЕ
	               |	(ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	               |			ИЛИ ШтрихкодыНоменклатуры.Штрихкод = &ВесовойШтрихкод)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДатаМобайл_НовыеШтрихкоды.Номенклатура,
	               |	ДатаМобайл_НовыеШтрихкоды.Характеристика,
	               |	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	               |	ДатаМобайл_НовыеШтрихкоды.ШтрихКод,
	               |	ДатаМобайл_НовыеШтрихкоды.Наименование,
	               |	ДатаМобайл_НовыеШтрихкоды.Коэффициент
	               |ИЗ
	               |	РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
	               |ГДЕ
	               |	ДатаМобайл_НовыеШтрихкоды.ШтрихКод = &Штрихкод
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ДокументыСРезервамиТСД
				   |ИЗ
				   |	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
				   |ГДЕ	
				   |	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
				   |		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
				   |			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
				   |;
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				   |	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
				   |ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
				   |ИЗ
				   |	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
				   |		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
				   |СГРУППИРОВАТЬ ПО
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
				   |;
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоступныеТовары.Номенклатура КАК Номенклатура,
	               |	ДоступныеТовары.Характеристика КАК Характеристика,
	               |	ДоступныеТовары.Упаковка КАК Упаковка,
	               |	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество * (ВЫБОР
	               |							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель = 0
	               |									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
	               |								ТОГДА 1
	               |							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель
	               |						КОНЕЦ / ВЫБОР
	               |							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель = 0
	               |									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
	               |								ТОГДА 1
	               |							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель
	               |						КОНЕЦ), 0)) КАК ВРезервеТСД
	               |ПОМЕСТИТЬ ТоварыСРезервамиТСД
	               |ИЗ
	               |	ДоступныеТовары КАК ДоступныеТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	               |		ПО ДоступныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	               |			И ДоступныеТовары.Упаковка = ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	               |				И ДоступныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура							
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоступныеТовары.Упаковка,
	               |	ДоступныеТовары.Характеристика,
	               |	ДоступныеТовары.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток * (ВЫБОР
	               |				КОГДА ТоварыВЯчейкахОстатки.Упаковка.Числитель = 0
	               |						ИЛИ ТоварыВЯчейкахОстатки.Упаковка.Числитель ЕСТЬ NULL
	               |					ТОГДА 1
	               |				ИНАЧЕ ТоварыВЯчейкахОстатки.Упаковка.Числитель
	               |			КОНЕЦ / ВЫБОР
	               |				КОГДА ТоварыВЯчейкахОстатки.Упаковка.Знаменатель = 0
	               |						ИЛИ ТоварыВЯчейкахОстатки.Упаковка.Знаменатель ЕСТЬ NULL
	               |					ТОГДА 1
	               |				ИНАЧЕ ТоварыВЯчейкахОстатки.Упаковка.Знаменатель
	               |			КОНЕЦ), 0)) КАК ВНаличии,
	               |	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.КОтборуОстаток * (ВЫБОР
	               |				КОГДА ТоварыВЯчейкахОстатки.Упаковка.Числитель = 0
	               |						ИЛИ ТоварыВЯчейкахОстатки.Упаковка.Числитель ЕСТЬ NULL
	               |					ТОГДА 1
	               |				ИНАЧЕ ТоварыВЯчейкахОстатки.Упаковка.Числитель
	               |			КОНЕЦ / ВЫБОР
	               |				КОГДА ТоварыВЯчейкахОстатки.Упаковка.Знаменатель = 0
	               |						ИЛИ ТоварыВЯчейкахОстатки.Упаковка.Знаменатель ЕСТЬ NULL
	               |					ТОГДА 1
	               |				ИНАЧЕ ТоварыВЯчейкахОстатки.Упаковка.Знаменатель
	               |			КОНЕЦ), 0)) КАК ВРезерве,
	               |	ДоступныеТовары.Номенклатура КАК Номенклатура,
	               |	ДоступныеТовары.Характеристика КАК Характеристика,
	               |	ДоступныеТовары.Упаковка КАК Упаковка
	               |ПОМЕСТИТЬ ТоварыСОстатками1С
	               |ИЗ
	               |	ДоступныеТовары КАК ДоступныеТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
	               |				,
	               |				(&ВсеЯчейки
	               |					ИЛИ Ячейка = &Ячейка)) КАК ТоварыВЯчейкахОстатки
	               |		ПО ДоступныеТовары.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	               |			И ДоступныеТовары.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоступныеТовары.Характеристика,
	               |	ДоступныеТовары.Номенклатура,
	               |	ДоступныеТовары.Упаковка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоступныеТовары.Номенклатура КАК Номенклатура,
	               |	ДоступныеТовары.Характеристика КАК Характеристика,
	               |	ДоступныеТовары.Упаковка КАК Упаковка,
	               |	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ВЫБОР
				   |				КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 0) = 0
				   |					ТОГДА 1
				   |				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
				   |			КОНЕЦ КАК ЧИСЛО(19, 2))) КАК Цена
	               |ПОМЕСТИТЬ ТоварыСЦенами
	               |ИЗ
	               |	ДоступныеТовары КАК ДоступныеТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ДоступныеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |			И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоступныеТовары.Номенклатура,
	               |	ДоступныеТовары.Характеристика,
	               |	ДоступныеТовары.Упаковка
	               |;
	               |
				   //|////////////////////////////////////////////////////////////////////////////////
				   //|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				   //|	Ячейки.Номенклатура КАК Номенклатура,
				   //|	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
				   //|ПОМЕСТИТЬ СписокЯчеек
				   //|ИЗ
				   //|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
				   //|
				   //|СГРУППИРОВАТЬ ПО
				   //|	Ячейки.Номенклатура
				   //|;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоступныеТовары.Номенклатура КАК Номенклатура,
	               |	ДоступныеТовары.Характеристика КАК Характеристика,
	               |	ДоступныеТовары.Упаковка КАК Упаковка,
	               |	0 КАК ВЗадании,
	               |	ТоварыСОстатками1С.ВНаличии КАК ВНаличии,
	               |	ТоварыСОстатками1С.ВРезерве КАК ВРезерве,
	               |	ТоварыСРезервамиТСД.ВРезервеТСД КАК ВРезервеТСД,
	               |	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена,
	               //|	ЕСТЬNULL(СписокЯчеек.АдресХранения, """") КАК АдресХранения,
	               |	ЕСТЬNULL(ДоступныеТовары.Наименование, ДоступныеТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
	               |	ЕСТЬNULL(ДоступныеТовары.Коэффициент, 1) КАК Коэффициент,
	               |	ВЫБОР
	               |		КОГДА &ВключатьАртикул
	               |				И ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	               |			ТОГДА ДоступныеТовары.Номенклатура.Артикул + ""-""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ + ДоступныеТовары.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ДоступныеТовары.Характеристика.Наименование, """") КАК НаименованиеТовара,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(справочник.номенклатура)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЭтоНовыйТовар
	               |ИЗ
	               |	ДоступныеТовары КАК ДоступныеТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
	               |		ПО ДоступныеТовары.Характеристика = ТоварыСРезервамиТСД.Характеристика
	               |			И ДоступныеТовары.Номенклатура = ТоварыСРезервамиТСД.Номенклатура
	               |			И ДоступныеТовары.Упаковка = ТоварыСРезервамиТСД.Упаковка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
	               |		ПО ДоступныеТовары.Номенклатура = ТоварыСОстатками1С.Номенклатура
	               |			И ДоступныеТовары.Характеристика = ТоварыСОстатками1С.Характеристика
	               |			И ДоступныеТовары.Упаковка = ТоварыСОстатками1С.Упаковка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
	               |		ПО ДоступныеТовары.Номенклатура = ТоварыСЦенами.Номенклатура
	               |			И ДоступныеТовары.Характеристика = ТоварыСЦенами.Характеристика
	               |			И ДоступныеТовары.Упаковка = ТоварыСЦенами.Упаковка
				   //|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
				   //|		ПО ДоступныеТовары.Номенклатура = СписокЯчеек.Номенклатура
				   |";
	
			Запрос.Текст=СтрЗаменить(Запрос.Текст,".ОтборРазмещениеТоваров.","."+Шаблон.ВидДокумента+".");


			//ТекущаяЯчейкаСсылка = ?(УзелПО.ВыгружатьВКодЯчейки=1,Справочники.СкладскиеЯчейки.НайтиПоКоду(Ячейка), ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоШтрихкоду(Ячейка));
			ТекущаяЯчейкаСсылка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(Ячейка,СсылкаНаДок);
			
			Запрос.УстановитьПараметр("Ячейка",ТекущаяЯчейкаСсылка);
			Запрос.УстановитьПараметр("ВсеЯчейки",Ложь);
			
	Если Тип = "Select" Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ТоварыОтбор КАК","."+Шаблон.ИмяТабличнойЧастиПодбор+" КАК");
	Иначе 
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ТоварыОтбор КАК","."+Шаблон.ИмяТабличнойЧастиПриемка+" КАК");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор","Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка");	
	КонецЕсли;


КонецПроцедуры
Процедура OnArtScan_Select_Insert_Casual(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, Тип)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	РеквизитыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,"ВидДокумента,ИмяТабличнойЧастиПодбор,ИмяТабличнойЧастиПриемка");
	
	ВидДокумента 				= РеквизитыШаблона.ВидДокумента;
	ИмяТабличнойЧастиПодбор 	= РеквизитыШаблона.ИмяТабличнойЧастиПодбор;
	ИмяТабличнойЧастиПриемка 	= РеквизитыШаблона.ИмяТабличнойЧастиПриемка;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	               |	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	               |	ШтрихкодыНоменклатуры.Упаковка.Наименование КАК Наименование,
	               |	ВЫБОР
	               |		КОГДА ШтрихкодыНоменклатуры.Упаковка.Числитель = 0
	               |				ИЛИ ШтрихкодыНоменклатуры.Упаковка.Числитель ЕСТЬ NULL
	               |			ТОГДА 1
	               |		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Числитель
	               |	КОНЕЦ / ВЫБОР
	               |		КОГДА ШтрихкодыНоменклатуры.Упаковка.Знаменатель = 0
	               |				ИЛИ ШтрихкодыНоменклатуры.Упаковка.Знаменатель ЕСТЬ NULL
	               |			ТОГДА 1
	               |		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Знаменатель
	               |	КОНЕЦ КАК Коэффициент
	               |ПОМЕСТИТЬ ДоступныеТовары
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |ГДЕ
	               |	(ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	               |			ИЛИ ШтрихкодыНоменклатуры.Штрихкод = &ВесовойШтрихкод)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДатаМобайл_НовыеШтрихкоды.Номенклатура,
	               |	ДатаМобайл_НовыеШтрихкоды.Характеристика,
	               |	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	               |	ДатаМобайл_НовыеШтрихкоды.ШтрихКод,
	               |	ДатаМобайл_НовыеШтрихкоды.Наименование,
	               |	ДатаМобайл_НовыеШтрихкоды.Коэффициент
	               |ИЗ
	               |	РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
	               |ГДЕ
	               |	ДатаМобайл_НовыеШтрихкоды.ШтрихКод = &Штрихкод
				   |
				   |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Номенклатура.Ссылка,
	               |	ВЫБОР КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.) ИНАЧЕ ХарактеристикиНоменклатуры.Ссылка Конец,
	               |	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	               |	Номенклатура.Артикул,
	               |	Номенклатура.ЕдиницаИзмерения.Наименование,
	               |	1
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО (Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец)
	               |ГДЕ
	               |	Номенклатура.Артикул = &Артикул
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ДокументыСРезервамиТСД
				   |ИЗ
				   |	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
				   |ГДЕ	
				   |	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
				   |		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
				   |			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
				   |;
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				   |	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
				   |ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
				   |ИЗ
				   |	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
				   |		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
				   |СГРУППИРОВАТЬ ПО
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
				   |	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
				   |;
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоступныеТовары.Номенклатура КАК Номенклатура,
	               |	ДоступныеТовары.Характеристика КАК Характеристика,
	               |	ДоступныеТовары.Упаковка КАК Упаковка,
	               |	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество * (ВЫБОР
	               |							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель = 0
	               |									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
	               |								ТОГДА 1
	               |							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель
	               |						КОНЕЦ / ВЫБОР
	               |							КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель = 0
	               |									ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
	               |								ТОГДА 1
	               |							ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель
	               |						КОНЕЦ), 0)) КАК ВРезервеТСД
	               |ПОМЕСТИТЬ ТоварыСРезервамиТСД
	               |ИЗ
	               |	ДоступныеТовары КАК ДоступныеТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	               |		ПО ДоступныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	               |			И ДоступныеТовары.Упаковка = ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
	               |				И ДоступныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоступныеТовары.Упаковка,
	               |	ДоступныеТовары.Характеристика,
	               |	ДоступныеТовары.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
	               |	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
	               |	ДоступныеТовары.Номенклатура КАК Номенклатура,
	               |	ДоступныеТовары.Характеристика КАК Характеристика,
	               |	ДоступныеТовары.Упаковка КАК Упаковка
	               |ПОМЕСТИТЬ ТоварыСОстатками1С
	               |ИЗ
	               |	ДоступныеТовары КАК ДоступныеТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |				,
	               |				(&ВсеСклады
	               |					ИЛИ Склад В (&Склады))
				   |				И (&ВсеПомещения
	               |					ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
	               |		ПО ДоступныеТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	               |			И ДоступныеТовары.Характеристика = СвободныеОстаткиОстатки.Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоступныеТовары.Характеристика,
	               |	ДоступныеТовары.Номенклатура,
	               |	ДоступныеТовары.Упаковка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоступныеТовары.Номенклатура КАК Номенклатура,
	               |	ДоступныеТовары.Характеристика КАК Характеристика,
				   |	ДоступныеТовары.Упаковка КАК Упаковка,
				   |	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ВЫБОР
				   |				КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 0) = 0
				   |					ТОГДА 1
				   |				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
				   |			КОНЕЦ КАК ЧИСЛО(19, 2))) КАК Цена
	               |ПОМЕСТИТЬ ТоварыСЦенами
	               |ИЗ
	               |	ДоступныеТовары КАК ДоступныеТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ДоступныеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |			И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоступныеТовары.Номенклатура,
	               |	ДоступныеТовары.Характеристика,
	               |	ДоступныеТовары.Упаковка
	               |;
	               |
				   //|////////////////////////////////////////////////////////////////////////////////
				   //|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				   //|	Ячейки.Номенклатура КАК Номенклатура,
				   //|	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
				   //|ПОМЕСТИТЬ СписокЯчеек
				   //|ИЗ
				   //|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
				   //|
				   //|СГРУППИРОВАТЬ ПО
				   //|	Ячейки.Номенклатура
				   //|;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоступныеТовары.Номенклатура КАК Номенклатура,
	               |	ДоступныеТовары.Характеристика КАК Характеристика,
	               |	ДоступныеТовары.Упаковка КАК Упаковка,
	               |	0 КАК ВЗадании,
	               |	ТоварыСОстатками1С.ВНаличии КАК ВНаличии,
	               |	ТоварыСОстатками1С.ВРезерве КАК ВРезерве,
	               |	ТоварыСРезервамиТСД.ВРезервеТСД КАК ВРезервеТСД,
	               |	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена,
	               //|	ЕСТЬNULL(СписокЯчеек.АдресХранения, """") КАК АдресХранения,
	               |	ЕСТЬNULL(ДоступныеТовары.Наименование, ДоступныеТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
	               |	ЕСТЬNULL(ДоступныеТовары.Коэффициент, 1) КАК Коэффициент,
	               |	ВЫБОР
	               |		КОГДА &ВключатьАртикул
	               |				И ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ДоступныеТовары.Номенклатура.Артикул = """"
	               |						ТОГДА """"
	               |					ИНАЧЕ ДоступныеТовары.Номенклатура.Артикул + "" ""
	               |				КОНЕЦ
	               |		ИНАЧЕ """"
	               |	КОНЕЦ + ДоступныеТовары.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ДоступныеТовары.Характеристика.Наименование, """") КАК НаименованиеТовара,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(справочник.номенклатура)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЭтоНовыйТовар
	               |ИЗ
	               |	ДоступныеТовары КАК ДоступныеТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
	               |		ПО ДоступныеТовары.Характеристика = ТоварыСРезервамиТСД.Характеристика
	               |			И ДоступныеТовары.Номенклатура = ТоварыСРезервамиТСД.Номенклатура
	               |			И ДоступныеТовары.Упаковка = ТоварыСРезервамиТСД.Упаковка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
	               |		ПО ДоступныеТовары.Номенклатура = ТоварыСОстатками1С.Номенклатура
	               |			И ДоступныеТовары.Характеристика = ТоварыСОстатками1С.Характеристика
	               |			И ДоступныеТовары.Упаковка = ТоварыСОстатками1С.Упаковка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
	               |		ПО ДоступныеТовары.Номенклатура = ТоварыСЦенами.Номенклатура
	               |			И ДоступныеТовары.Характеристика = ТоварыСЦенами.Характеристика
	               |			И ДоступныеТовары.Упаковка = ТоварыСЦенами.Упаковка
				   //|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
				   //|		ПО ДоступныеТовары.Номенклатура = СписокЯчеек.Номенклатура
				   |";
	
	
	Запрос.Текст=СтрЗаменить(Запрос.Текст,".ПриобретениеТоваровУслуг.","."+ВидДокумента+".");
	
	Если ВидДокумента = "ОприходованиеИзлишковТоваров" Или ВидДокумента = "СписаниеНедостачТоваров" ИЛИ (ВидДокумента = "РасходныйОрдерНаТовары" И ИмяТабличнойЧастиПодбор = "ТоварыПоРаспоряжениям")  Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ДоступныеТовары.Упаковка = Документ1С.Упаковка", "ИСТИНА");	
	КонецЕсли;
	
	Если ВидДокумента = "ПеремаркировкаТоваровИСМП" Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ДоступныеТовары.Упаковка = Документ1С.Упаковка", "ИСТИНА");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Документ1С.Количество", 0);
	КонецЕсли; 
	
	Если Тип = "Select" Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК","."+ИмяТабличнойЧастиПодбор+" КАК");
	Иначе 
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК","."+ИмяТабличнойЧастиПриемка+" КАК");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор","Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка");	
	КонецЕсли;


КонецПроцедуры
Процедура OnArtScan_Select_EGAIS(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок, Запрос, Тип)
	
	Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод,
		|	ШтрихкодыНоменклатуры.Упаковка.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА ШтрихкодыНоменклатуры.Упаковка.Числитель = 0
		|			ТОГДА 1
		|		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Числитель
		|	КОНЕЦ / ВЫБОР
		|		КОГДА ШтрихкодыНоменклатуры.Упаковка.Знаменатель = 0
		|			ТОГДА 1
		|		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Знаменатель
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ ДоступныеТовары
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатаМобайл_НовыеШтрихкоды.Номенклатура,
		|	ДатаМобайл_НовыеШтрихкоды.Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
		|	ДатаМобайл_НовыеШтрихкоды.ШтрихКод,
		|	ДатаМобайл_НовыеШтрихкоды.Наименование,
		|	ДатаМобайл_НовыеШтрихкоды.Коэффициент
		|ИЗ
		|	РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
		|ГДЕ
		|	ДатаМобайл_НовыеШтрихкоды.ШтрихКод = &Штрихкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыСРезервамиТСД
		|ИЗ
		|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
		|ГДЕ	
		|	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
		|		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
		|			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
		|ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
		|ИЗ
		|	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
		|		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
		|;	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Упаковка,
		|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество*ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель, 0)) КАК ВРезервеТСД
		|ПОМЕСТИТЬ ТоварыСРезервамиТСД
		|ИЗ
		|	ДоступныеТовары КАК ДоступныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
		|		ПО ДоступныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
		|			И ДоступныеТовары.Упаковка = ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
		|				И ДоступныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеТовары.Упаковка,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
  		|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
		|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Упаковка
		|ПОМЕСТИТЬ ТоварыСОстатками1С
		|ИЗ
		|	ДоступныеТовары КАК ДоступныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				(&ВсеСклады
		|					ИЛИ Склад В (&Склады))
		|				И (&ВсеПомещения
	    |					ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
		|		ПО ДоступныеТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
		|			И ДоступныеТовары.Характеристика = СвободныеОстаткиОстатки.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Упаковка,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ВЫБОР
		|				КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 0) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
		|			КОНЕЦ КАК ЧИСЛО(19, 2))) КАК Цена
		|ПОМЕСТИТЬ ТоварыСЦенами
		|ИЗ
		|	ДоступныеТовары КАК ДоступныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ДоступныеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|			И (ДоступныеТовары.Номенклатура.ИспользоватьУпаковки
		|				ИЛИ ДоступныеТовары.Упаковка = ЦеныНоменклатурыСрезПоследних.Упаковка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Упаковка,
		|	0 КАК ВЗадании,
		|	ТоварыСОстатками1С.ВНаличии,
		|	ТоварыСОстатками1С.ВРезерве,
		|	ТоварыСРезервамиТСД.ВРезервеТСД,
		|	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(ДоступныеТовары.Наименование, ДоступныеТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
		|	ЕСТЬNULL(ДоступныеТовары.Коэффициент, 1) КАК Коэффициент,
		|	ВЫБОР
		|		КОГДА &ВключатьАртикул
		|				И ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ДоступныеТовары.Номенклатура.Артикул + ""-""
		|		ИНАЧЕ """"
		|	КОНЕЦ + ДоступныеТовары.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ДоступныеТовары.Характеристика.Наименование, """") КАК НаименованиеТовара,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(справочник.номенклатура)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоНовыйТовар
		|ИЗ
		|	ДоступныеТовары КАК ДоступныеТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
		|		ПО ДоступныеТовары.Характеристика = ТоварыСРезервамиТСД.Характеристика
		|			И ДоступныеТовары.Номенклатура = ТоварыСРезервамиТСД.Номенклатура
		|			И ДоступныеТовары.Упаковка = ТоварыСРезервамиТСД.Упаковка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
		|		ПО ДоступныеТовары.Номенклатура = ТоварыСОстатками1С.Номенклатура
		|			И ДоступныеТовары.Характеристика = ТоварыСОстатками1С.Характеристика
		|			И ДоступныеТовары.Упаковка = ТоварыСОстатками1С.Упаковка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
		|		ПО ДоступныеТовары.Номенклатура = ТоварыСЦенами.Номенклатура
		|			И ДоступныеТовары.Характеристика = ТоварыСЦенами.Характеристика
		|			И ДоступныеТовары.Упаковка = ТоварыСЦенами.Упаковка");

	Иначе	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод,
		|	ШтрихкодыНоменклатуры.Упаковка.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА ШтрихкодыНоменклатуры.Упаковка.Числитель = 0
		|			ТОГДА 1
		|		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Числитель
		|	КОНЕЦ / ВЫБОР
		|		КОГДА ШтрихкодыНоменклатуры.Упаковка.Знаменатель = 0
		|			ТОГДА 1
		|		ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Знаменатель
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ ДоступныеТовары
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатаМобайл_НовыеШтрихкоды.Номенклатура,
		|	ДатаМобайл_НовыеШтрихкоды.Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
		|	ДатаМобайл_НовыеШтрихкоды.ШтрихКод,
		|	ДатаМобайл_НовыеШтрихкоды.Наименование,
		|	ДатаМобайл_НовыеШтрихкоды.Коэффициент
		|ИЗ
		|	РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
		|ГДЕ
		|	ДатаМобайл_НовыеШтрихкоды.ШтрихКод = &Штрихкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыСРезервамиТСД
		|ИЗ
		|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
		|ГДЕ	
		|	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
		|		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
		|			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
		|ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
		|ИЗ
		|	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
		|		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
		|;		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Упаковка,
		|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество*ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель, 0)) КАК ВРезервеТСД
		|ПОМЕСТИТЬ ТоварыСРезервамиТСД
		|ИЗ
		|	ДоступныеТовары КАК ДоступныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
		|		ПО ДоступныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
		|			И ДоступныеТовары.Упаковка = ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
		|				И ДоступныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеТовары.Упаковка,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
  		|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
		|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Упаковка
		|ПОМЕСТИТЬ ТоварыСОстатками1С
		|ИЗ
		|	ДоступныеТовары КАК ДоступныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				(&ВсеСклады
		|					ИЛИ Склад В (&Склады))
		|				И (&ВсеПомещения
	    |					ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
		|		ПО ДоступныеТовары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
		|			И ДоступныеТовары.Характеристика = СвободныеОстаткиОстатки.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Упаковка,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ВЫБОР
		|				КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 0) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
		|			КОНЕЦ КАК ЧИСЛО(19, 2))) КАК Цена	
		|ПОМЕСТИТЬ ТоварыСЦенами
		|ИЗ
		|	ДоступныеТовары КАК ДоступныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ДоступныеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ДоступныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеТовары.Номенклатура,
		|	ДоступныеТовары.Характеристика,
		|	ДоступныеТовары.Упаковка,
		|	0 КАК ВЗадании,
		|	ТоварыСОстатками1С.ВНаличии,
		|	ТоварыСОстатками1С.ВРезерве,
		|	ТоварыСРезервамиТСД.ВРезервеТСД,
		|	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(ДоступныеТовары.Наименование, ДоступныеТовары.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
		|	ЕСТЬNULL(ДоступныеТовары.Коэффициент, 1) КАК Коэффициент,
		|	ВЫБОР
		|		КОГДА &ВключатьАртикул
		|				И ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ВЫБОР КОГДА ДоступныеТовары.Номенклатура.Артикул = """" ТОГДА """" ИНАЧЕ ДоступныеТовары.Номенклатура.Артикул + "" "" КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ + ДоступныеТовары.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ДоступныеТовары.Характеристика.Наименование, """") КАК НаименованиеТовара,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДоступныеТовары.Номенклатура) = ТИП(справочник.номенклатура)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоНовыйТовар
		|ИЗ
		|	ДоступныеТовары КАК ДоступныеТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
		|		ПО ДоступныеТовары.Характеристика = ТоварыСРезервамиТСД.Характеристика
		|			И ДоступныеТовары.Номенклатура = ТоварыСРезервамиТСД.Номенклатура
		|			И ДоступныеТовары.Упаковка = ТоварыСРезервамиТСД.Упаковка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
		|		ПО ДоступныеТовары.Номенклатура = ТоварыСОстатками1С.Номенклатура
		|			И ДоступныеТовары.Характеристика = ТоварыСОстатками1С.Характеристика
		|			И ДоступныеТовары.Упаковка = ТоварыСОстатками1С.Упаковка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
		|		ПО ДоступныеТовары.Номенклатура = ТоварыСЦенами.Номенклатура
		|			И ДоступныеТовары.Характеристика = ТоварыСЦенами.Характеристика
		|			И ДоступныеТовары.Упаковка = ТоварыСЦенами.Упаковка";
	
	
	Запрос.Текст=СтрЗаменить(Запрос.Текст,".ПриобретениеТоваровУслуг.","."+Шаблон.ВидДокумента+".");
	Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК","."+Шаблон.ИмяТабличнойЧастиПодбор+" КАК");

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//ФУНКЦИИ OnArtEgaisScan 
#Область OnArtEgaisScan

Процедура OnArtEgaisScan_ЗаполнитьОбъектТовара(ВыборкаЕГАИС, ОбъектТовара)
	
	ОбъектТовара.ARtID = "8"+"e-"+Строка(ВыборкаЕГАИС.Ссылка.УникальныйИдентификатор());
	ЗаполнитьЗначенияСвойств(ОбъектТовара, ВыборкаЕгаис);
	ОбъектТовара.Barcode = ВыборкаЕГАИС.Ссылка.Код;
	ОбъектТовара.ArtName = ЧистаяСтрока(Лев(ОбъектТовара.ArtName,100));
	ОбъектТовара.Manufacturer = ЧистаяСтрока(Лев(ОбъектТовара.Manufacturer,100)); 
	
	ОбъектТовара.DMIsCompared = ТоварСопоставленОдинКОдному(ВыборкаЕГАИС.Ссылка); 
	ОбъектТовара.DMBoxKF = 0; //количество единиц в коробе
	ОбъектТовара.DMIsNeedBlankA = Истина; //требуется ввод справки А по товару
	ОбъектТовара.DMIsNeedBlankB = Истина; //требуется ввод справки Б по товару
	ОбъектТовара.DMIsNeedDateBottling = Истина; //требуется ввод даты розлива по товару
	
КонецПроцедуры
Функция OnArtEgaisScan_ПолучитьЗапросВходящаяТТН(лИсходныйДокумент, PDFBarcode)
	
	ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(лИсходныйДокумент);
	
	РезультатПоиска = НайтиНоменклатуруЕГАИСпоВходящемуДеревуУпаковок(ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки, PDFBarcode);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка,
	                      |	ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Наименование, """") КАК ArtName,
	                      |	ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Производитель.Наименование, """") КАК Manufacturer,
	                      |	ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Импортер.Наименование, """") КАК Importer,
	                      |	ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Объем, 0) КАК Capacity,
	                      |	ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Крепость, 0) КАК PercentAlco,
	                      |	ВЫБОР
	                      |		КОГДА НЕ КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции.Код ЕСТЬ NULL
	                      |			ТОГДА КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции.Код + "" "" + КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции.Наименование
	                      |		ИНАЧЕ ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции.Код + "" "", """") + ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции.Наименование + "" "", """")
	                      |	КОНЕЦ КАК TypeAlco
	                      |ИЗ
	                      |		Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	                      |ГДЕ
	                      |	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", РезультатПоиска);
	
	Возврат Запрос;

КонецФункции // ()
Функция НайтиНоменклатуруЕГАИСпоВходящемуДеревуУпаковок(КоллекцияСтрок, ДанныеДляПоиска)

	Для каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка.Строки.Количество() <> 0 Тогда
			Результат = НайтиНоменклатуруЕГАИСпоВходящемуДеревуУпаковок(Строка.Строки, ДанныеДляПоиска);
			Если Результат <> Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		Иначе
			Если Строка.ЗначениеШтрихкода = ДанныеДляПоиска Тогда
				Возврат Строка.АлкогольнаяПродукция;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ()
	
#КонецОбласти

//ФУНКЦИИ GetDocRowsSelect 
#Область GetDocRowsSelect

Процедура GetDocRowsSelectCells(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                    |	ЗапросСЛимитами.Номенклатура,
		                    |	ЗапросСЛимитами.Характеристика,
							|	ЗапросСЛимитами.Серия,
		                    |	СУММА(ЗапросСЛимитами.Количество) КАК Количество,
							|	ЗапросСЛимитами.Ячейка КАК Ячейка,
		                    |	МИНИМУМ(ЗапросСЛимитами.НомерСтроки) КАК НомерСтроки
		                    |ИЗ
		                    |	(ВЫБРАТЬ
		                    |		ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
		                    |		ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
							|		&УсловиеСерия КАК Серия,
		                    |		СУММА(ТаблицаТоваровВДокументе.Количество) КАК Количество,
		                    |		ТаблицаТоваровВДокументе.Ячейка КАК Ячейка,
		                    |		МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки
		                    |	ИЗ
		                    |		Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ТаблицаТоваровВДокументе
		                    |	ГДЕ
		                    |		ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
		                    |	
		                    |	СГРУППИРОВАТЬ ПО
		                    |		ТаблицаТоваровВДокументе.Номенклатура,
		                    |		ТаблицаТоваровВДокументе.Характеристика,
							|		&УсловиеСерия,
		                    |		ТаблицаТоваровВДокументе.Ячейка) КАК ЗапросСЛимитами
		                    |
		                    |СГРУППИРОВАТЬ ПО
		                    |	ЗапросСЛимитами.Номенклатура,
		                    |	ЗапросСЛимитами.Характеристика,
							|	ЗапросСЛимитами.Серия,
		                    |	ЗапросСЛимитами.Ячейка
		                    |
		                    |УПОРЯДОЧИТЬ ПО
		                    |	НомерСтроки");
	
		Запрос.УстановитьПараметр("Ссылка",СсылкаНаДок);
		Запрос.УстановитьПараметр("ИсходныйДокумент",СсылкаНаДок.ИсходныйДокумент);
		Запрос.УстановитьПараметр("Документы",СсылкаНаДок.Задания.ВыгрузитьКолонку("Задание"));
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ОтборРазмещениеТоваров.","."+Шаблон.ВидДокумента+".");  
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ТоварыОтбор КАК ","."+Шаблон.ИмяТабличнойЧастиПодбор+" КАК ");
		
		Если Шаблон.РаспределениеТоваров = 1 Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент", "ТаблицаТоваровВДокументе.Ссылка В(&Документы)");
		КонецЕсли;		


		Попытка
			ЕстьКоличествоУпаковок = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено;
		Исключение
			ЕстьКоличествоУпаковок = Ложь;
		КонецПопытки;
		
		Если УзелПО.НеИспользоватьПересчетУпаковок И ЕстьКоличествоУпаковок Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество","ТаблицаТоваровВДокументе.КоличествоУпаковок");
	    КонецЕсли;				
		
		Попытка
			ЕстьСерии = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Серия")<>Неопределено;
		Исключение
			ЕстьСерии = Ложь;
		КонецПопытки;
		
		Если ЕстьСерии Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","ТаблицаТоваровВДокументе.Серия");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		КонецЕсли;
		
		Если Шаблон.ВидДокумента = "ПересчетТоваров" И УзелПО.НеОтображатьОстатки Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.КоличествоУпаковок","0");
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество","0");
	    КонецЕсли;	

		Рез = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаДока Из Рез Цикл
			ОбъектСтрокиДока=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));
			ОбъектСтрокиДока.DMBarcode="";
			ОбъектСтрокиДока.DMArtID="8U-"+СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор())+СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
			Модуль_ШтрихкодированиеПечатныхФорм = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ШтрихкодированиеПечатныхФорм");
			ОбъектСтрокиДока.DMCell=?(УзелПО.ВыгружатьВКодЯчейки=1,СтрокаДока.Ячейка.Код, Строка(Модуль_ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(СтрокаДока.Ячейка)));
			
			Попытка		
				Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
					ОбъектСтрокиДока.DMSN = ПолучитьЗначениеСерии(УзелПО,СтрокаДока.Номенклатура,СтрокаДока.Серия);
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			Попытка
				Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
					ОбъектСтрокиДока.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура,СсылкаНаДок.Клиент);
				КонецЕсли;
			Исключение 
			КонецПопытки;

		   	ОбъектСтрокиДока.Params = СформироватьЗаголовкиJSONParamsСтрокиДокумента(СтрокаДока.Номенклатура,СсылкаНаДок);
			
			ОбъектСтрокиДока.DMQuant=СтрокаДока.Количество;

			ЭтоУслуга = Ложь;
			Попытка 
				Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЭтоУслуга = Истина;
			   	КонецЕсли;
			Исключение
			КонецПопытки;
			
			Если УзелПО.НеОтображатьОстатки Тогда
				ОбъектСтрокиДока.DMLimit=0;
			ИначеЕсли ЭтоУслуга Тогда
				ОбъектСтрокиДока.DMLimit=999;	
			Иначе	
				Попытка 
					ТекущийСклад = СсылкаНаДок.Склад;
				Исключение
					ТекущийСклад = Справочники.Склады.ПустаяСсылка();
				КонецПопытки;

				ОбъектСтрокиДока.DMLimit = ПолучитьОстаткиПоЯчейке(УзелПО,ТекущийСклад,СтрокаДока.Номенклатура,СтрокаДока.Характеристика,СтрокаДока.Ячейка);

			КонецЕсли;

			ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
		КонецЦикла;
КонецПроцедуры
Процедура GetDocRowsSelectSN(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ЗапросСЛимитами.Номенклатура,
	                    |	ЗапросСЛимитами.Характеристика,
	                    |	ЗапросСЛимитами.Серия,
						|	ЗапросСЛимитами.Цена,
	                    |	СУММА(ЗапросСЛимитами.Количество) КАК Количество,
	                    |	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(РезервыТСД.Количество, 0)) КАК Лимит,
	                    |	МИНИМУМ(ЗапросСЛимитами.НомерСтроки) КАК НомерСтроки
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
	                    |		ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
	                    |		ЕСТЬNULL(ТаблицаСерийВДокументе.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
						|		&УсловиеЦена КАК Цена,
	                    |		СУММА(ЕСТЬNULL(ТаблицаСерийВДокументе.Количество, ТаблицаТоваровВДокументе.Количество)) КАК Количество,
	                    |		МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки
	                    |	ИЗ
	                    |		Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТоваровВДокументе
	                    |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Серии КАК ТаблицаСерийВДокументе
						|			ПО ТаблицаТоваровВДокументе.Номенклатура = ТаблицаСерийВДокументе.Номенклатура
	                    |				И ТаблицаТоваровВДокументе.Характеристика = ТаблицаСерийВДокументе.Характеристика
	                    |					И ТаблицаТоваровВДокументе.Ссылка = ТаблицаСерийВДокументе.Ссылка
	                    |	ГДЕ
	                    |		ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
	                    |	
	                    |	СГРУППИРОВАТЬ ПО
	                    |		ТаблицаТоваровВДокументе.Номенклатура,
						|		ТаблицаТоваровВДокументе.Характеристика,
	                    |		ЕСТЬNULL(ТаблицаСерийВДокументе.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)),
						|		&УсловиеЦена) КАК ЗапросСЛимитами
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	                    |				,
	                    |				(&ВсеСклады
	                    |					ИЛИ Склад В (&Склады))
						|				И (&ВсеПомещения
	               		|					ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
	                    |		ПО ЗапросСЛимитами.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	                    |			И ЗапросСЛимитами.Характеристика = СвободныеОстаткиОстатки.Характеристика
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.СерияСсылка КАК СерияСсылка,
	                    |			СУММА(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество) КАК Количество
	                    |		ИЗ
	                    |			Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	                    |		ГДЕ
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка <> &Ссылка
	                    |				И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.Шаблон.РезервироватьТовар
						|					И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	                    |		
	                    |		СГРУППИРОВАТЬ ПО
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.СерияСсылка) КАК РезервыТСД
	                    |		ПО ЗапросСЛимитами.Номенклатура = РезервыТСД.Номенклатура
	                    |			И ЗапросСЛимитами.Характеристика = РезервыТСД.ХарактеристикаНоменклатуры
	                    |			И ЗапросСЛимитами.Серия = РезервыТСД.СерияСсылка
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ЗапросСЛимитами.Номенклатура,
	                    |	ЗапросСЛимитами.Характеристика,
	                    |	ЗапросСЛимитами.Серия,
						|	ЗапросСЛимитами.Цена
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	НомерСтроки");
		

		Запрос.УстановитьПараметр("Ссылка",СсылкаНаДок);
		Запрос.УстановитьПараметр("ИсходныйДокумент",СсылкаНаДок.ИсходныйДокумент);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".РеализацияТоваровУслуг.","."+Шаблон.ВидДокумента+".");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК ","."+Шаблон.ИмяТабличнойЧастиПодбор+" КАК ");
		
		//Если у документа есть склад берем остатки по складу документа иначе склады Из настроек ТСД
		Попытка 
			ТекущийСклад = СсылкаНаДок.Склад;
			СписокСкладов=Новый Массив;
		    СписокСкладов.Добавить(ТекущийСклад);
		Исключение
			СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
		    Запрос.УстановитьПараметр("Склады",СписокСкладов);
		КонецПопытки;
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
		Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
		
		СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
		Запрос.УстановитьПараметр("Помещения",СписокПомещений);
		Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);

	
		Попытка
			ЕстьЦены = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Цена")<>Неопределено;
		Исключение
			ЕстьЦены = Ложь;
		КонецПопытки;

		
		Если ЕстьЦены Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","ТаблицаТоваровВДокументе.Цена");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","0");
		КонецЕсли;
		
		Если Шаблон.ВидДокумента = "ЗаказПоставщику" Тогда
			Попытка
				ЕстьОтменено = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено")<>Неопределено;
			Исключение
				ЕстьОтменено = Ложь;
			КонецПопытки;
			
			Если ЕстьОтменено Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент И НЕ ТаблицаТоваровВДокументе.Отменено");
			КонецЕсли;	
		ИначеЕсли Шаблон.ВидДокумента = "ЗаказКлиента" Тогда
			Попытка
				ЕстьОтменено = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено")<>Неопределено И Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("ВариантОбеспечения")<>Неопределено;
			Исключение
				ЕстьОтменено = Ложь;
			КонецПопытки;
			
			Если ЕстьОтменено Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент И НЕ ТаблицаТоваровВДокументе.Отменено"); //И ТаблицаТоваровВДокументе.ВариантОбеспечения<>ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)");
			КонецЕсли;		
		КонецЕсли;
		
		Попытка
			ЕстьКоличествоУпаковок = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено;
		Исключение
			ЕстьКоличествоУпаковок = Ложь;
		КонецПопытки;
		
		Если УзелПО.НеИспользоватьПересчетУпаковок И ЕстьКоличествоУпаковок Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество","ТаблицаТоваровВДокументе.КоличествоУпаковок");
		КонецЕсли;		
		
		Если Шаблон.НеВыгружатьУслуги Тогда
			
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент 
													|   	И  ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)");			
		КонецЕсли;

	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДока Из Рез Цикл
		
		
		Если СтрокаДока.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектСтрокиДока=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));
		ОбъектСтрокиДока.DMBarcode="";
		ОбъектСтрокиДока.DMArtID="8U-"+СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор())+СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
		ОбъектСтрокиДока.DMPrice=СтрокаДока.Цена;	
		
		Попытка
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
				ОбъектСтрокиДока.DMSN = ПолучитьЗначениеСерии(УзелПО,СтрокаДока.Номенклатура,СтрокаДока.Серия);
			КонецЕсли;	
		Исключение
		КонецПопытки;	
		
			Попытка
				Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
					ОбъектСтрокиДока.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура,СсылкаНаДок.Клиент);
				КонецЕсли;
			Исключение 
			КонецПопытки;

		ОбъектСтрокиДока.Params = СформироватьЗаголовкиJSONParamsСтрокиДокумента(СтрокаДока.Номенклатура,СсылкаНаДок);
		
		ОбъектСтрокиДока.DMQuant=СтрокаДока.Количество;
		
			ЭтоУслуга = Ложь;
			Попытка 
				Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЭтоУслуга = Истина;
			   	КонецЕсли;
			Исключение
			КонецПопытки;
			
		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектСтрокиДока.DMLimit=0;
		ИначеЕсли ЭтоУслуга Тогда
			ОбъектСтрокиДока.DMLimit=999;
		Иначе	
			Итог = Формат(СтрокаДока.Лимит, ПолучитьФорматнуюСтрокуЧисла());
			Попытка
				ОбъектСтрокиДока.DMLimit=Итог;
			Исключение
				ОбъектСтрокиДока.DMLimit=0;
			КонецПопытки;
		КонецЕсли;
	
		ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
	КонецЦикла;			
			
КонецПроцедуры
Процедура GetDocRowsSelectCasual(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	РеквизитыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,"ВидДокумента,ИмяТабличнойЧастиПодбор,ИмяТабличнойЧастиПриемка,
						|РаспределениеТоваров,ИспользоватьПодбор,ИспользоватьПриемку,ЕГАИС,ИспользоватьМаркировку,
						|МаркировкаЗапретитьПодборНемаркируемыхТоваров,НеВыгружатьУслуги,ПодборУпаковочнымиЛистами");
	
	ВидДокумента 									= РеквизитыШаблона.ВидДокумента;
	ИмяТабличнойЧастиПодбор 						= РеквизитыШаблона.ИмяТабличнойЧастиПодбор;
	ИмяТабличнойЧастиПриемка 						= РеквизитыШаблона.ИмяТабличнойЧастиПриемка;
	МножествоДокументовКакЗадание 					= РеквизитыШаблона.РаспределениеТоваров = 1;
	ИспользоватьПодбор								= РеквизитыШаблона.ИспользоватьПодбор;
	ИспользоватьПриемку								= РеквизитыШаблона.ИспользоватьПриемку;
	ГрупповойДокумент								= РеквизитыШаблона.РаспределениеТоваров = 2;
	ЕГАИС											= РеквизитыШаблона.ЕГАИС;
	ИспользоватьМаркировку							= РеквизитыШаблона.ИспользоватьМаркировку;
	МаркировкаЗапретитьПодборНемаркируемыхТоваров	= РеквизитыШаблона.МаркировкаЗапретитьПодборНемаркируемыхТоваров;
	НеВыгружатьУслуги								= РеквизитыШаблона.НеВыгружатьУслуги;
	ПодборУпаковочнымиЛистами                       = РеквизитыШаблона.ПодборУпаковочнымиЛистами;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
	|	&УсловиеСерия КАК Серия,
	|	&УсловиеЦена КАК Цена,
	|	&УсловиеУпаковка КАК Упаковка,
	|	&УсловиеУпакЛист КАК УпаковочныйЛист,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0) = 0
	|				ТОГДА ТаблицаТоваровВДокументе.КоличествоУпаковок
	|			ИНАЧЕ ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0)
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ТаблицаТоваровВДокументе.КоличествоШт) КАК КоличествоМест,
	|	МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваровВДокументе1С
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТоваровВДокументе
	|ГДЕ
	|	ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваровВДокументе.Номенклатура,
	|	ТаблицаТоваровВДокументе.Характеристика,
	|	&УсловиеСерия,
	|	&УсловиеЦена,
	|	&УсловиеУпаковка,
	|	&УсловиеУпакЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК Характеристика,
	|	СУММА(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество) КАК Количество
	|ПОМЕСТИТЬ РезервыТСД
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка <> &Ссылка
	|		И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.Шаблон.РезервироватьТовар
	|			И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободныеОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстатки.Характеристика КАК Характеристика,
	|	СвободныеОстатки.Серия КАК Серия,
	|	СУММА(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0)) КАК ВНаличииОстатокСерии
	|ПОМЕСТИТЬ ТоварыНаСкладахОстаткиСерии
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура
	|					ИЗ
	|						ТаблицаТоваровВДокументе1С КАК ТаблицаТоваровВДокументе)
	|				И (&ВсеСклады
	|					ИЛИ Склад В (&Склады))
	|				И 1=1) КАК СвободныеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстатки.Номенклатура,
	|	СвободныеОстатки.Характеристика,
	|	СвободныеОстатки.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстатокСерии, 0)) КАК ВНаличииОстаток
	|ПОМЕСТИТЬ ТоварыНаСкладахОстатки
	|ИЗ
	|	ТоварыНаСкладахОстаткиСерии КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровВДокументе1С.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровВДокументе1С.Характеристика КАК Характеристика,
	|	ТаблицаТоваровВДокументе1С.Цена КАК Цена,
	|	ТаблицаТоваровВДокументе1С.Количество КАК Количество,
	|	ТаблицаТоваровВДокументе1С.КоличествоМест КАК КоличествоМест,
	|	ТаблицаТоваровВДокументе1С.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваровВДокументе1С.Серия КАК Серия,
	|	ТаблицаТоваровВДокументе1С.Упаковка КАК Упаковка,
	|	ТаблицаТоваровВДокументе1С.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ТаблицаТоваровВДокументе1С.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТоваровВДокументе1С.Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	ТоварыНаСкладахОстаткиСерии.ВНаличииОстатокСерии КАК ОстатокПоСерии,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(РезервыТСД.Количество, 0)) КАК Лимит
	|ИЗ
	|	ТаблицаТоваровВДокументе1С КАК ТаблицаТоваровВДокументе1С
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыТСД КАК РезервыТСД
	|		ПО ТаблицаТоваровВДокументе1С.Номенклатура = РезервыТСД.Номенклатура
	|			И ТаблицаТоваровВДокументе1С.Характеристика = РезервыТСД.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстаткиСерии КАК ТоварыНаСкладахОстаткиСерии
	|		ПО ТаблицаТоваровВДокументе1С.Номенклатура = ТоварыНаСкладахОстаткиСерии.Номенклатура
	|			И ТаблицаТоваровВДокументе1С.Характеристика = ТоварыНаСкладахОстаткиСерии.Характеристика
	|			И ТаблицаТоваровВДокументе1С.Серия = ТоварыНаСкладахОстаткиСерии.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
	|		ПО ТаблицаТоваровВДокументе1С.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И ТаблицаТоваровВДокументе1С.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваровВДокументе1С.Номенклатура,
	|	ТаблицаТоваровВДокументе1С.Характеристика,
	|	ТаблицаТоваровВДокументе1С.Цена,
	|	ТаблицаТоваровВДокументе1С.Количество,
	|	ТаблицаТоваровВДокументе1С.КоличествоМест,
	|	ТаблицаТоваровВДокументе1С.НомерСтроки,
	|	ТаблицаТоваровВДокументе1С.Серия,
	|	ТаблицаТоваровВДокументе1С.Упаковка,
	|	ТаблицаТоваровВДокументе1С.УпаковочныйЛист,
	|	ТаблицаТоваровВДокументе1С.Номенклатура.ВидНоменклатуры.ТипНоменклатуры,
	|	ТаблицаТоваровВДокументе1С.Номенклатура.ВидНоменклатуры.ИспользоватьСерии,
	|	ТоварыНаСкладахОстаткиСерии.ВНаличииОстатокСерии
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаДок);
	Запрос.УстановитьПараметр("ИсходныйДокумент",СсылкаНаДок.ИсходныйДокумент);
	Запрос.Текст=СтрЗаменить(Запрос.Текст,".ПриходныйОрдерНаТовары.","."+ВидДокумента+".");
	Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК ","."+ИмяТабличнойЧастиПодбор+" КАК ");
	
	//Если у документа есть склад берем остатки по складу документа иначе склады Из настроек ТСД
	Попытка 
		ТекущийСклад = СсылкаНаДок.Склад;
		СписокСкладов=Новый Массив;
		СписокСкладов.Добавить(ТекущийСклад);
	Исключение
		СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СсылкаНаДок.СкладПолучатель) Тогда
		
		СписокСкладов.Очистить();		
		СписокСкладов.Добавить(СсылкаНаДок.СкладПолучатель);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаДок.Склад) Тогда
		
		СписокСкладов.Очистить();
		СписокСкладов.Добавить(СсылкаНаДок.Склад);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Склады",СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
	
	СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения",СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);
	
	Запрос.УстановитьПараметр("Документы",СсылкаНаДок.Задания.ВыгрузитьКолонку("Задание"));
	
	
	Попытка
		ЕстьЦены = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Цена")<>Неопределено;
	Исключение
		ЕстьЦены = Ложь;
	КонецПопытки;
	
	Если УзелПО.УчитыватьОстаткиПоРегиструСвободныеОстатки Тогда
		Если ДатаМобайл_ОбщийМодуль.ЕстьРегистрНакопления("СвободныеОстатки") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТоварыНаСкладах"					, "СвободныеОстатки");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОтгрузкеОстаток"					, "ВРезервеСоСкладаОстаток");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СвободныеОстатки.Серия"			, "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СвободныеОстатки.ВНаличииОстаток"	, "СвободныеОстатки.ВНаличииОстаток - СвободныеОстатки.ВРезервеСоСкладаОстаток");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "(&ВсеПомещения ИЛИ Помещение В (&Помещения))");
		КонецЕсли;	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "(&ВсеПомещения ИЛИ Помещение В (&Помещения))");
	КонецЕсли;
	
	Если ЕстьЦены Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","ТаблицаТоваровВДокументе.Цена");
	Иначе
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","0");
	КонецЕсли;
	
	
	Попытка
		ЕстьСерии = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Серия")<>Неопределено;
	Исключение
		ЕстьСерии = Ложь;
	КонецПопытки;
	
	Если ЕстьСерии Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","ТаблицаТоваровВДокументе.Серия");
	Иначе
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)");
	КонецЕсли;
	
	Попытка
		ЕстьКоличествоМест = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоШт")<>Неопределено;
	Исключение
		ЕстьКоличествоМест = Ложь;
	КонецПопытки;
	
	Если Не ЕстьКоличествоМест Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.КоличествоШт",0);		
	КонецЕсли;
	
	Попытка
		ЕстьУпаковка = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Упаковка")<>Неопределено;
	Исключение
		ЕстьУпаковка = Ложь;
	КонецПопытки;
	
	Если ЕстьУпаковка Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеУпаковка","ТаблицаТоваровВДокументе.Упаковка");
	Иначе
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеУпаковка","Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
	КонецЕсли;
	

	Попытка
		ЕстьКоличествоУпаковок = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено;
	Исключение
		ЕстьКоличествоУпаковок = Ложь;
	КонецПопытки;
	
	Если ЕстьКоличествоУпаковок Тогда
		Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество,","ТаблицаТоваровВДокументе.КоличествоУпаковок,");
		КонецЕсли;			
	Иначе
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.КоличествоУпаковок","ТаблицаТоваровВДокументе.Количество");
	КонецЕсли;
	
	Попытка
		ЕстьКоличество = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Количество")<>Неопределено;
	Исключение
		ЕстьКоличество = Ложь;
	КонецПопытки;
	
	Если Не ЕстьКоличество Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество",0);		
	КонецЕсли;
	
	
	Если ВидДокумента = "ЗаказПоставщику" Тогда
		Попытка
			ЕстьОтменено = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено")<>Неопределено;
		Исключение
			ЕстьОтменено = Ложь;
		КонецПопытки;
		
		Если ЕстьОтменено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент И НЕ ТаблицаТоваровВДокументе.Отменено");
		КонецЕсли;
	ИначеЕсли ВидДокумента = "ЗаказКлиента" Тогда
		Попытка
			ЕстьОтменено = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено")<>Неопределено И Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("ВариантОбеспечения")<>Неопределено;
		Исключение
			ЕстьОтменено = Ложь;
		КонецПопытки;
		
		Если ЕстьОтменено Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент И НЕ ТаблицаТоваровВДокументе.Отменено"); //И ТаблицаТоваровВДокументе.ВариантОбеспечения<>ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)");
		КонецЕсли;   
	КонецЕсли;

	Попытка
		ЕстьУпаковочныйЛист = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("УпаковочныйЛистРодитель")<>Неопределено;
	Исключение
		ЕстьУпаковочныйЛист = Ложь;
	КонецПопытки;
		
	Если ЕстьУпаковочныйЛист И ПодборУпаковочнымиЛистами Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеУпакЛист","ТаблицаТоваровВДокументе.УпаковочныйЛистРодитель.Код");
	Иначе
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеУпакЛист","""""");
	КонецЕсли;	

	
	Если ВидДокумента = "ПересчетТоваров" И УзелПО.НеОтображатьОстатки Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.КоличествоУпаковок","0");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество","0");
	КонецЕсли;	
	
	Если МножествоДокументовКакЗадание Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент", "ТаблицаТоваровВДокументе.Ссылка В(&Документы)");
	КонецЕсли;		
	
	Если ВидДокумента = "ПеремаркировкаТоваровИСМП" Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,"	,"ТаблицаТоваровВДокументе.НоваяНоменклатура КАК Номенклатура,");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Номенклатура,"					,"ТаблицаТоваровВДокументе.НоваяНоменклатура,"); 
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Характеристика"					,"ТаблицаТоваровВДокументе.НоваяХарактеристика");
	КонецЕсли; 
	
	Если ИспользоватьМаркировку И МаркировкаЗапретитьПодборНемаркируемыхТоваров Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент 
		|   	И
		|   	(
		|   	(ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
		|   	ИЛИ
		|   	(ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
		|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
		|   	)");
		
	КонецЕсли;		
	
	Если НеВыгружатьУслуги Тогда
		
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент 
		|   	И  ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)");			
	КонецЕсли;
	
	
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДока Из Рез Цикл
		Если СтрокаДока.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектСтрокиДока=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));
		ОбъектСтрокиДока.DMBarcode="";
		
		Если ЗначениеЗаполнено(СтрокаДока.Характеристика) Тогда
			ОбъектСтрокиДока.DMArtID = "8U-" + XMLСтрока(СтрокаДока.Номенклатура) + XMLСтрока(СтрокаДока.Характеристика);
		Иначе
			ОбъектСтрокиДока.DMArtID = "8U-" + XMLСтрока(СтрокаДока.Номенклатура) + "00000000-0000-0000-0000-000000000000";
		КонецЕсли;
		
		ОбъектСтрокиДока.DMPrice=СтрокаДока.Цена;	
		
		Попытка
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
				ОбъектСтрокиДока.DMSN = ПолучитьЗначениеСерии(УзелПО,СтрокаДока.Номенклатура,СтрокаДока.Серия);
			КонецЕсли;	
		Исключение
		КонецПопытки;	
		
		Попытка
			Если СтрокаДока.ВесМожноУказыватьВДокументах Тогда	
				ОбъектСтрокиДока.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура,СсылкаНаДок.Клиент);
			КонецЕсли;
		Исключение 
		КонецПопытки;
		
		Попытка
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Или ЕстьКоличествоМест Тогда
				ОбъектСтрокиДока.Params = СформироватьЗаголовкиJSONParamsСтрокиДокумента(СтрокаДока.Номенклатура,СсылкаНаДок,СтрокаДока);
			КонецЕсли;
		Исключение 
		КонецПопытки;
	
		ОбъектСтрокиДока.DMQuant=СтрокаДока.Количество;
		
		ЭтоУслуга = Ложь;
		Попытка 
			Если СтрокаДока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЭтоУслуга = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектСтрокиДока.DMLimit=0;
		ИначеЕсли ЭтоУслуга Тогда
			ОбъектСтрокиДока.DMLimit=999;	
		Иначе	
			Итог = Формат(СтрокаДока.Лимит, ПолучитьФорматнуюСтрокуЧисла());
			Попытка
				ОбъектСтрокиДока.DMLimit=Итог;
			Исключение
				ОбъектСтрокиДока.DMLimit=0;
			КонецПопытки;
		КонецЕсли;
		
		Если ПодборУпаковочнымиЛистами Тогда
			Попытка
				ТекущийШтрихкод = ПолучитьШтрихкодУпаковки(СтрокаДока.Номенклатура, СтрокаДока.Характеристика, СтрокаДока.Упаковка); 
				Если ЗначениеЗаполнено(ТекущийШтрихкод) Тогда
					ОбъектСтрокиДока.DMBarcode = ЧистаяСтрока(ТекущийШтрихкод);
				КонецЕсли;
			Исключение 
			КонецПопытки;
				
			Попытка	
				ОбъектСтрокиДока.DMPackID = СокрЛП(СтрокаДока.УпаковочныйЛист);	
			Исключение 
			КонецПопытки;
		КонецЕсли;
		
		ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
	КонецЦикла;
КонецПроцедуры
Процедура GetDocRowsSelectEGAIS(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок)
		
                                                                       
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапросСЛимитами.Номенклатура,
		|	ЛОЖЬ КАК ЭтоХарактеристика,
		|	СУММА(ЗапросСЛимитами.Количество) КАК Количество,
		|   СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(РезервыТСД.Количество, 0)) КАК Лимит, 
		|	ЗапросСЛимитами.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ЗапросСЛимитами.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаТоваровВДокументе.АлкогольнаяПродукция КАК Номенклатура,
		|		СУММА(ТаблицаТоваровВДокументе.Количество) КАК Количество,
		|		МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки,
		|		ТаблицаТоваровВДокументе.Справка2 КАК ИдентификаторСтроки
		|	ИЗ
		|		Документ.ТТНВходящаяЕГАИС.Товары КАК ТаблицаТоваровВДокументе
		|	ГДЕ
		|		ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаТоваровВДокументе.АлкогольнаяПродукция,
		|		ТаблицаТоваровВДокументе.Справка2) КАК ЗапросСЛимитами
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|			МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура
		|		ИЗ
		|			РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК Товары
		|		ПО (Товары.АлкогольнаяПродукция = ЗапросСЛимитами.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				(&ВсеСклады
		|					ИЛИ Склад В (&Склады))
		|				И (&ВсеПомещения
	    |					ИЛИ Помещение В (&Помещения))) КАК ТоварыНаСкладахОстатки
		|		ПО ЗапросСЛимитами.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
		|			СУММА(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество) КАК Количество
		|		ИЗ
		|			Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
		|		ГДЕ
		|			ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка <> &Ссылка
		|				И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.Шаблон.РезервироватьТовар
		|					И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)					
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура) КАК РезервыТСД
		|		ПО (Товары.Номенклатура = РезервыТСД.Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапросСЛимитами.Номенклатура,
		|	ЗапросСЛимитами.НомерСтроки,
		|	ЗапросСЛимитами.ИдентификаторСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		
		Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
			
			ДатаМобайл_ОбщийМодуль.астЗаменитьРегистрНоменклатурыЕГАИС(Запрос.Текст);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТТНВходящаяЕГАИС", Шаблон.ВидДокумента);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаТоваровВДокументе.АлкогольнаяПродукция", "ТаблицаТоваровВДокументе.НоменклатураЕГАИС");
	
			Если Шаблон.ВидДокумента = "астСписаниеТоваровЕГАИС" Или Шаблон.ВидДокумента = "астАктФиксацииШтрихкодовНаБалансеОрганизации" Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаТоваровВДокументе.Справка2", "ТаблицаТоваровВДокументе.СправкаБ");	
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаТоваровВДокументе.Справка2", "ТаблицаТоваровВДокументе.ИдСправкиБ");
			КонецЕсли;
			
			Если Шаблон.ВидДокумента = "астАктФиксацииШтрихкодовНаБалансеОрганизации" Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаТоваровВДокументе.Количество", "ТаблицаТоваровВДокументе.КоличествоМарок");				
			КонецЕсли;
		КонецЕсли;

				
		Запрос.УстановитьПараметр("Ссылка",СсылкаНаДок);
		Запрос.УстановитьПараметр("ИсходныйДокумент",СсылкаНаДок.ИсходныйДокумент);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ПриходныйОрдерНаТовары.","."+Шаблон.ВидДокумента+".");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ТТНВходящаяЕГАИС.","."+Шаблон.ВидДокумента+".");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК ","."+Шаблон.ИмяТабличнойЧастиПодбор+" КАК ");
		
		
		 //Если у документа есть склад берем остатки по складу документа иначе склады Из настроек ТСД
		Попытка 
			ТекущийСклад = СсылкаНаДок.Склад;
			СписокСкладов=Новый Массив;
		    СписокСкладов.Добавить(ТекущийСклад);
		Исключение
			СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
		    Запрос.УстановитьПараметр("Склады",СписокСкладов);
		КонецПопытки;
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
		Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
		
		СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
		Запрос.УстановитьПараметр("Помещения",СписокПомещений);
		Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);

	Если Шаблон.ВидДокумента = "УстановкаЦенНоменклатуры" Или Шаблон.ВидДокумента = "ПрименениеЦенНоменклатуры" Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество",999);
	КонецЕсли;	

	Попытка
		ЕстьТЧМарок = СсылкаНаДок.ИсходныйДокумент.метаданные().ТабличныеЧасти.Найти("АкцизныеМарки") <> Неопределено;
		ЕстьРеквизитИдентификаторСтроки = СсылкаНаДок.ИсходныйДокумент.метаданные().ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Справка2") <> Неопределено;
	Исключение
	    ЕстьТЧМарок = Ложь;
		ЕстьРеквизитИдентификаторСтроки = Ложь;
	КонецПопытки;
	
	Если ЕстьРеквизитИдентификаторСтроки Тогда
	Иначе
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Справка2","0");
	КонецЕсли;

	
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДока Из Рез Цикл
		ОбъектСтрокиДока=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));
		ОбъектСтрокиДока.DMBarcode="";
			
			СписокМарок = ДатаМобайл_ОбщийМодуль.СформироватьСписокНепроверяемыхМарокЕГАИС();  
			Если СписокМарок.НайтиПоЗначению(СтрокаДока.Номенклатура.ВидПродукции)<>Неопределено  Тогда
				лТекущаяНоменклатура = ДатаМобайл_ОбщийМодуль.ПолучитьНоменклатуруПоЕГАИС(СтрокаДока.Номенклатура);
				ОбъектСтрокиДока.DMArtID="8U-"+Строка(лТекущаяНоменклатура.УникальныйИдентификатор())+Строка(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка().УникальныйИдентификатор()); 
			Иначе	 
				ОбъектСтрокиДока.DMArtID = "8e-"+Строка(СтрокаДока.Номенклатура.УникальныйИдентификатор());
			КонецЕсли;	
			ТекущийИдентификаторСтроки = СтрокаДока.ИдентификаторСтроки;
			
		
		//ОбъектСтрокиДока.DMArtNAME = ЧистаяСтрока(СтрокаДока.Номенклатура.Наименование);

		ОбъектСтрокиДока.DMQuant=СтрокаДока.Количество;
		
		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектСтрокиДока.DMLimit=0;
		Иначе	
			Итог = Формат(СтрокаДока.Лимит, ПолучитьФорматнуюСтрокуЧисла());
			Попытка
				ОбъектСтрокиДока.DMLimit=Итог;
			Исключение
				ОбъектСтрокиДока.DMLimit=0;
			КонецПопытки;
		КонецЕсли;
		//Марки формат 3.0
		Если Шаблон.ВидДокумента = "ТТНВходящаяЕГАИС" ИЛИ Шаблон.ВидДокумента = "астТоварноТранспортныеНакладныеИзЕГАИС" Тогда
			КоличествоБезМарок = СтрокаДока.Количество;
					
			ТЗМарок = ДатаМобайл_ОбщийМодуль.ПолучитьМаркиВходящейТТН_ЕГАИС(СсылкаНаДок.ИсходныйДокумент);
			СтруктураПоискаМарок = Новый Структура("АлкогольнаяПродукция,Справка2",СтрокаДока.Номенклатура,ТекущийИдентификаторСтроки);
			СтрокиПоискаМарок = ТЗМарок.НайтиСтроки(СтруктураПоискаМарок);		

				Для каждого СтрокаМарок Из СтрокиПоискаМарок Цикл				
					Если КоличествоБезМарок > 0 Тогда
					  ОбъектСтрокиДокаМарки = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));
					  ОбъектСтрокиДокаМарки.DMBarcode = ОбъектСтрокиДока.DMBarcode;
                      ОбъектСтрокиДокаМарки.DMArtID = ОбъектСтрокиДока.DMArtID;
					  
					  ОбъектСтрокиДокаМарки.DMLimit = ОбъектСтрокиДока.DMLimit;

					  ОбъектСтрокиДокаМарки.DMQuant = 1;
					  ОбъектСтрокиДокаМарки.DMPDFBarcode = СтрокаМарок.Марка;
					  
					  Если ЗначениеЗаполнено(СтрокаМарок.Короб) Тогда
					  ОбъектСтрокиДокаМарки.DMBoxPackID = СтрокаМарок.Короб;
					  КонецЕсли; 
					  Если ЗначениеЗаполнено(СтрокаМарок.Палета) Тогда
					  ОбъектСтрокиДокаМарки.DMPackID = СтрокаМарок.Палета;
					  КонецЕсли; 
					  ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДокаМарки);
					  КоличествоБезМарок = КоличествоБезМарок-1;
				  	Иначе
					  Продолжить;
					КонецЕсли;  
				КонецЦикла;
		КонецЕсли;
		
		Если Шаблон.ВидДокумента = "ТТНВходящаяЕГАИС" ИЛИ Шаблон.ВидДокумента = "астТоварноТранспортныеНакладныеИзЕГАИС" Тогда
			Если КоличествоБезМарок>0 Тогда
				ОбъектСтрокиДока.DMQuant = КоличествоБезМарок;
				ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
			КонецЕсли;	
		Иначе
			ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры
Процедура GetDocRowsSelectMarking(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок)
	
	Если Шаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП" Тогда
		ПолучитьСтрокиДокументаМДЛП(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок);
	Иначе
		
		ПолучитьСтрокиДокументаМаркировка(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСтрокиДокументаМаркировка(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок)
	
	Запрос = Новый Запрос;
	
	//ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО ТОВАРАМ И ОСТАТКАМ
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗапросСЛимитами.Номенклатура КАК Номенклатура,
	               |	ЗапросСЛимитами.Характеристика КАК Характеристика,
	               |	ЗапросСЛимитами.Серия КАК Серия,
	               |	МАКСИМУМ(ЗапросСЛимитами.Цена) КАК Цена,
	               |	СУММА(ЗапросСЛимитами.Количество) КАК Количество,
	               |	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК Лимит,
	               |	МИНИМУМ(ЗапросСЛимитами.НомерСтроки) КАК НомерСтроки
	               |ПОМЕСТИТЬ ТоварыЗадания
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
	               |		ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
	               |		&УсловиеСерия КАК Серия,
	               |		&УсловиеЦена КАК Цена,
	               |		СУММА(ВЫБОР
	               |				КОГДА ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0) = 0
	               |					ТОГДА ТаблицаТоваровВДокументе.КоличествоУпаковок
	               |				ИНАЧЕ ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0)
	               |			КОНЕЦ) КАК Количество,
	               |		МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки
	               |	ИЗ
	               |		Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТоваровВДокументе
	               |	ГДЕ
	               |		ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ТаблицаТоваровВДокументе.Номенклатура,
	               |		ТаблицаТоваровВДокументе.Характеристика,
				   |		&УсловиеСерия,
				   |		&УсловиеЦена) КАК ЗапросСЛимитами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |				,
	               |				(&ВсеСклады
	               |					ИЛИ Склад В (&Склады))
				   |				И 1=1) КАК СвободныеОстаткиОстатки
	               |		ПО ЗапросСЛимитами.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	               |			И ЗапросСЛимитами.Характеристика = СвободныеОстаткиОстатки.Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗапросСЛимитами.Номенклатура,
	               |	ЗапросСЛимитами.Характеристика,
	               |	ЗапросСЛимитами.Серия
	               |;
	               |
				   
				   //ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО СПРАВОЧНИКУ ШТРИХКОДЫ УПАКОВОК, ЕСЛИ ОНИ ЗАГРУЖЕНЫ
				   //ТОЛЬКО ПО ГРУППОВЫМ УПАКОВКАМ, БЛОКИ СИГАРЕТ НЕ УЧИТЫВАЕМ, ПЛЮС ПРЕДПОЛОГАЕМ ЧТО МОГУТ БЫТЬ КОРОБА И ПАЛЕТЫ
				   
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				   |	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
				   |	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ЗначениеШтрихкода
				   |ПОМЕСТИТЬ ШтрихкодыУпаковокТоваровКоробаПалеты
				   |ИЗ
				   |	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
				   |ГДЕ
				   |	ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &ИсходныйДокумент
				   |	И НЕ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
				   |	И (ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
				   |		ИЛИ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка))
				   |			И ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
				   |;
				   |
				   
				   //ВЫБЕРЕМ ИЗ ГРУППОВЫХ УПАКОВОК НИЖЕСТОЯЩИЕ, ЕСЛИ ИСПОЛЬЗУЮТСЯ ЕЩЕ И ПАЛЕТЫ
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК ШтрихкодУпаковки,
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода
				   |ПОМЕСТИТЬ ШтрихкодыУпаковокТоваровКороба
				   |ИЗ
				   |	ШтрихкодыУпаковокТоваровКоробаПалеты КАК ШтрихкодыУпаковокТоваровКоробаПалеты
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды
				   |		ПО СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковокТоваровКоробаПалеты.ШтрихкодУпаковки
				   |ГДЕ
				   |	НЕ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
				   |	И (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
				   |		ИЛИ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка))
				   |			И СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
				   |;

				   
				   //ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО СПРАВОЧНИКУ ШТРИХКОДЫ УПАКОВОК, ЕСЛИ ОНИ ЗАГРУЖЕНЫ
				   //ТОЛЬКО ПО ТОВАРАМ, БЕЗ ГРУППОВЫХ УПАКОВОК (БЛОКИ СИГАРЕТ, ТОЖЕ ТОВАРЫ)
				   //ОБЪЕДИНИМ СО СПРАВОЧНИКОМ ШТРИХКОДОВ ИЗ ГРУППОВЫХ УПАКОВОК

	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	               |	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	               |ПОМЕСТИТЬ ШтрихкодыУпаковокТоваров  
	               |ИЗ
	               |	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
	               |ГДЕ
	               |	ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &ИсходныйДокумент
	               |	И НЕ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	               |	И (ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	               |			ИЛИ (ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	               |				И ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
				   
				   //КОРОБА
				   |ОБЪЕДИНИТЬ  
				   |
				   |ВЫБРАТЬ
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК ШтрихкодУпаковки,
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода
				   |ИЗ
				   |	ШтрихкодыУпаковокТоваровКоробаПалеты КАК ШтрихкодыУпаковокТоваровКоробаПалеты
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды
				   |		ПО СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковокТоваровКоробаПалеты.ШтрихкодУпаковки
				   |ГДЕ
				   |	НЕ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
				   |		И (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
				   |			ИЛИ (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
				   |				И СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))

				   //ПАЛЕТЫ
				   |ОБЪЕДИНИТЬ  
				   |
				   |ВЫБРАТЬ
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК ШтрихкодУпаковки,
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода
				   |ИЗ
				   |	ШтрихкодыУпаковокТоваровКороба КАК ШтрихкодыУпаковокТоваровКороба
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды
				   |		ПО СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковокТоваровКороба.ШтрихкодУпаковки
				   |ГДЕ
				   |	НЕ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
				   |		И (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
				   |			ИЛИ (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
				   |				И СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	               |;
	               |
				   		   
				   
				   //ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО ЗНАЧЕНИЯМ ШТРИХКОДОВ, ГДЕ НЕ ЗАПОЛНЕН СПРАВОЧНИК ШТРИХКОДЫ УПАКОВОК 
				   //ТОЛЬКО ПО ТОВАРАМ, БЕЗ ГРУППОВЫХ УПАКОВОК (БЛОКИ СИГАРЕТ, ТОЖЕ ТОВАРЫ)
				   //ПОПРОБУЕМ ОПРЕДЕЛИТЬ GTIN
				   
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 3, 1) <> ""0""
	               |			ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 3, 14)
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 4, 1) <> ""0""
	               |					ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 4, 13)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 5, 1) <> ""0""
	               |							ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 5, 12)
	               |						ИНАЧЕ ВЫБОР
	               |							КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 6, 1) <> ""0""
	               |								ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 5, 12)				   
				   |							ИНАЧЕ ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 9, 8)
				   |							КОНЕЦ	
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК GTIN
	               |ПОМЕСТИТЬ ЗначенияШтрихкодовТоваров
	               |ИЗ
	               |	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
	               |ГДЕ
	               |	ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &ИсходныйДокумент
	               |	И ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	               |	И ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 1, 2) = ""01""
	               |;
	               |          
				   
				   //ПОДГОТОВИМ ДАННЫЕ ИЗ СПРАВОЧНИКА ШТРИХКОДЫ УПАКОВОК ДЛЯ 
				   //ДАЛЬНЕЙШЕГО ОПРЕДЕЛЕНИЯ КОРОБОВ И ПАЛЕТ
				   
					|////////////////////////////////////////////////////////////////////////////////
					|
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|
					|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК Штрихкод,
					|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
					|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода КАК СсылкаЗначениеШтрихкода 
					|	   
					|ПОМЕСТИТЬ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды 
					|
					|ИЗ
					|	
					|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
					|	
					|ГДЕ
					|	
					|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод В (ВЫБРАТЬ ШтрихкодыУпаковокТоваров.ШтрихКодУпаковки ИЗ ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров)
					|	
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Штрихкод,
					|	ЗначениеШтрихкода,
					|	СсылкаЗначениеШтрихкода		   
					|   
					|;  
				   
				   //СФОРМИРУЕМ СОПОСТАВЛЕНИЕ ДАННЫХ С НОМЕНКЛАТУРОЙ
				   //ПО ШТРИХКОДАМ УПАКОВОК ДАННЫЕ БЕРЕМ ИЗ СПРАВОЧНИКА
				   //ПО ЗНАЧЕНИЯМ ШТРИХКОДОВ ДАННЫЕ БЕРЕМ ИЗ РЕГИСТРА
				   //ПЛЮС МОГУТ ОСТАТЬСЯ НЕСОПОСТАВЛЕННЫЕ СТРОКИ (НАПРИМЕР УПРОЩЕНКА)
				   
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Номенклатура КАК Номенклатура,
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Характеристика КАК Характеристика,
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Серия КАК Серия,
				   |	ВЫБОР
				   |		КОГДА ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Количество = 0 
				   |		ТОГДА
				   |			ВЫБОР
				   |				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Упаковка.Числитель,0) = 0
				   |				ТОГДА 1
				   |				ИНАЧЕ ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Упаковка.Числитель
				   |			КОНЕЦ
				   |		ИНАЧЕ ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Количество 
				   |	КОНЕЦ КАК Коэффициент,
	               |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Марка,
	               |	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.СсылкаЗначениеШтрихкода,"""")) КАК Короб,
				   |	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды2.СсылкаЗначениеШтрихкода, """")) КАК Палета
	               |ПОМЕСТИТЬ МаркиЗадания
	               |ИЗ
	               |	ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	               |		ПО ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды2
	               |		ПО ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.СсылкаЗначениеШтрихкода,"""") = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды2.ЗначениеШтрихкода
				   |СГРУППИРОВАТЬ ПО
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Номенклатура,
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Характеристика,
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Серия,
				   |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Упаковка,
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Количество, 
	               |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода	
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))),
	               |	МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))),
	               |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
				   |	ВЫБОР 
				   |		КОГДА МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Упаковка.Числитель,1))=0 
				   |		ТОГДА 1
			   	   |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Упаковка.Числитель,1)) 
				   |	КОНЕЦ,
	               |	ЗначенияШтрихкодовТоваров.ЗначениеШтрихкода,
	               |	"""",
				   |	""""
	               |ИЗ
	               |	ЗначенияШтрихкодовТоваров КАК ЗначенияШтрихкодовТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК РегистрСведенийШтрихкодыНоменклатуры
	               |		ПО ЗначенияШтрихкодовТоваров.GTIN = РегистрСведенийШтрихкодыНоменклатуры.Штрихкод
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗначенияШтрихкодовТоваров.ЗначениеШтрихкода
	               |;
	               |
				   
				   //ПОДСЧИТАЕМ КОЛИЧЕСТВО МАРОК КОТОРЫЕ ОПРЕДЕЛЕНЫ (ВОЗМОЖНО ОНИ В ДОКУМЕНТЕ Т0ЛЬКО ЧАСТИЧНО УКАЗАНЫ)
				   
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МаркиЗадания.Номенклатура КАК Номенклатура,
	               |	МаркиЗадания.Характеристика КАК Характеристика,
	               |	МаркиЗадания.Серия КАК Серия,
	               |	СУММА(МаркиЗадания.Коэффициент) КАК Количество
	               |ПОМЕСТИТЬ КоличествоМарокЗадания
	               |ИЗ
	               |	МаркиЗадания КАК МаркиЗадания
	               |ГДЕ
	               |	НЕ МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МаркиЗадания.Номенклатура,
	               |	МаркиЗадания.Характеристика,
	               |	МаркиЗадания.Серия
	               |;
	               |
				   
				   //РАСПРЕДЕЛИМ МАРКИ ПО ЗАДАНИЮ
				   //ТО ЧТО НЕ РАСПРЕДЕЛИЛОСЬ ДОБАВИМ ОТДЕЛЬНО
				   //ПРИ ЭТОМ МОГУТ БЫТЬ КАК ЛИШНИЕ МАРКИ, ТАК И ЛИШНИЕ ТОВАРЫ

	               |////////////////////////////////////////////////////////////////////////////////
				   //1) СОПОСТАВЛЕНО ПОЛНОСТЬЮ
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МаркиЗадания.Номенклатура КАК Номенклатура,
	               |	МаркиЗадания.Характеристика КАК Характеристика,
	               |	МаркиЗадания.Серия КАК Серия,
	               |	МаркиЗадания.Коэффициент КАК Количество,
	               |	МаркиЗадания.Марка КАК Марка,
	               |	МаркиЗадания.Короб КАК Короб,
				   |	МаркиЗадания.Палета КАК Палета,
	               |	ТоварыЗадания.Цена КАК Цена,
	               |	ТоварыЗадания.Лимит КАК Лимит,
	               |	ТоварыЗадания.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ИтоговыеДанные
	               |ИЗ
	               |	МаркиЗадания КАК МаркиЗадания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗадания КАК ТоварыЗадания
	               |		ПО МаркиЗадания.Номенклатура = ТоварыЗадания.Номенклатура
	               |			И МаркиЗадания.Характеристика = ТоварыЗадания.Характеристика
				   |				И  МаркиЗадания.Серия = ТоварыЗадания.Серия
	               |ГДЕ
	               |	НЕ ТоварыЗадания.Номенклатура ЕСТЬ NULL
	               |	И НЕ МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |
				   |ОБЪЕДИНИТЬ
	               |
				   //2) МАРКИ С НЕОПРЕДЕЛЕННОЙ НОМЕНКЛАТУРОЙ (НЕУНИКАЛЬНЫЕ ШТРИХКОДЫ)
				   |ВЫБРАТЬ
	               |	ЕСТЬNULL(МаркиЗадания.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	               |	ЕСТЬNULL(МаркиЗадания.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	               |	ЕСТЬNULL(МаркиЗадания.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
	               |	МаркиЗадания.Коэффициент КАК Количество,
	               |	МаркиЗадания.Марка КАК Марка,
	               |	МаркиЗадания.Короб КАК Короб,
				   |	МаркиЗадания.Палета КАК Палета,
	               |	0 КАК Цена,
	               |	0 КАК Лимит,
	               |	77777 КАК НомерСтроки
	               |ИЗ
	               |	МаркиЗадания КАК МаркиЗадания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗадания КАК ТоварыЗадания
	               |		ПО МаркиЗадания.Номенклатура = ТоварыЗадания.Номенклатура
	               |			И МаркиЗадания.Характеристика = ТоварыЗадания.Характеристика
				   |				И  МаркиЗадания.Серия = ТоварыЗадания.Серия
	               |ГДЕ
	               |	ТоварыЗадания.Номенклатура ЕСТЬ NULL
	               |	И НЕ МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
				   |
	               |ОБЪЕДИНИТЬ
	               |
				   //3) МАРКИ С НЕОПРЕДЕЛЕННОЙ НОМЕНКЛАТУРОЙ (УПРОЩЕНКА)
	               |ВЫБРАТЬ
	               |	МаркиЗадания.Номенклатура,
	               |	МаркиЗадания.Характеристика,
	               |	МаркиЗадания.Серия,
	               |	МаркиЗадания.Коэффициент,
	               |	МаркиЗадания.Марка,
	               |	МаркиЗадания.Короб,
				   |	МаркиЗадания.Палета,
	               |	0,
	               |	0,
	               |	99999
	               |ИЗ
	               |	МаркиЗадания КАК МаркиЗадания
	               |ГДЕ
	               |	МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ
	               |				      
				   //4) СТРОКИ ЗАДАНИЯ БЕЗ МАРОК (ВРЕМЕННО ВОЗМОЖНО ЧАСТИЧНОЕ УКАЗАНИЕ МАРОК)
	               |ВЫБРАТЬ
	               |	ТоварыЗадания.Номенклатура,
	               |	ТоварыЗадания.Характеристика,
	               |	ТоварыЗадания.Серия,
	               |	ТоварыЗадания.Количество - ЕСТЬNULL(КоличествоМарокЗадания.Количество, 0),
	               |	"""",
	               |	"""",
				   |	"""",
	               |	ТоварыЗадания.Цена,
	               |	ТоварыЗадания.Лимит,
	               |	ТоварыЗадания.НомерСтроки
	               |ИЗ
	               |	ТоварыЗадания КАК ТоварыЗадания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоМарокЗадания КАК КоличествоМарокЗадания
	               |		ПО ТоварыЗадания.Номенклатура = КоличествоМарокЗадания.Номенклатура
	               |			И ТоварыЗадания.Характеристика = КоличествоМарокЗадания.Характеристика
				   |				И  ТоварыЗадания.Серия = КоличествоМарокЗадания.Серия
	               |ГДЕ
	               |	ТоварыЗадания.Количество - ЕСТЬNULL(КоличествоМарокЗадания.Количество, 0) > 0
	               |;
	               |
				   
				   //ИТОГ
				   
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИтоговыеДанные.Номенклатура КАК Номенклатура,
	               |	ИтоговыеДанные.Характеристика КАК Характеристика,
	               |	ИтоговыеДанные.Серия КАК Серия,
	               |	ИтоговыеДанные.Количество КАК Количество,
	               |	ИтоговыеДанные.Марка КАК Марка,
	               |	ИтоговыеДанные.Короб КАК Короб,
				   |	ИтоговыеДанные.Палета КАК Палета,
	               |	ИтоговыеДанные.Цена КАК Цена,
	               |	ИтоговыеДанные.Лимит КАК Лимит,
	               |	ИтоговыеДанные.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	ИтоговыеДанные КАК ИтоговыеДанные
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИтоговыеДанные.НомерСтроки УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТоварыЗадания
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ШтрихкодыУпаковокТоваровКоробаПалеты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ШтрихкодыУпаковокТоваровКороба
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ШтрихкодыУпаковокТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ЗначенияШтрихкодовТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ МаркиЗадания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КоличествоМарокЗадания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ИтоговыеДанные";

	
	
	
	
		Запрос.УстановитьПараметр("Ссылка",СсылкаНаДок);
		Запрос.УстановитьПараметр("ИсходныйДокумент",СсылкаНаДок.ИсходныйДокумент);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ПриобретениеТоваровУслуг.","."+Шаблон.ВидДокумента+".");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК ","."+Шаблон.ИмяТабличнойЧастиПодбор+" КАК ");
		
		Если УзелПО.УчитыватьОстаткиПоРегиструСвободныеОстатки Тогда
			Если ДатаМобайл_ОбщийМодуль.ЕстьРегистрНакопления("СвободныеОстатки") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТоварыНаСкладах", "СвободныеОстатки");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "СвободныеОстаткиОстатки.ВНаличииОстаток"	, "СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "(&ВсеПомещения ИЛИ Помещение В (&Помещения))");
			КонецЕсли;	
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "(&ВсеПомещения ИЛИ Помещение В (&Помещения))");
		КонецЕсли;
		
		//Если у документа есть склад берем остатки по складу документа иначе склады Из настроек ТСД
		Попытка 
			ТекущийСклад = СсылкаНаДок.Склад;
			СписокСкладов=Новый Массив;
		    СписокСкладов.Добавить(ТекущийСклад);
		Исключение
			СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
		    Запрос.УстановитьПараметр("Склады",СписокСкладов);
		КонецПопытки;
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
		Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
		
		СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
		Запрос.УстановитьПараметр("Помещения",СписокПомещений);
		Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);

		Попытка
			ЕстьЦены = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Цена")<>Неопределено;
		Исключение
			ЕстьЦены = Ложь;
		КонецПопытки;

		
		Если ЕстьЦены Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","ТаблицаТоваровВДокументе.Цена");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","0");
		КонецЕсли;
		
		
		Попытка
			ЕстьСерии = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Серия")<>Неопределено;
		Исключение
			ЕстьСерии = Ложь;
		КонецПопытки;
		
		Если ЕстьСерии Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","ТаблицаТоваровВДокументе.Серия");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		КонецЕсли;

		
		Попытка
			ЕстьКоличествоУпаковок = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено;
		Исключение
			ЕстьКоличествоУпаковок = Ложь;
		КонецПопытки;

		Если ЕстьКоличествоУпаковок Тогда
			Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество,","ТаблицаТоваровВДокументе.КоличествоУпаковок,");
			КонецЕсли;
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.КоличествоУпаковок","ТаблицаТоваровВДокументе.Количество");
		КонецЕсли;
			
				
		
		Если Шаблон.ИспользоватьМаркировку И Шаблон.МаркировкаЗапретитьПодборНемаркируемыхТоваров Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент 
			|   	И
			|   	(
			|   	(ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
			|   	ИЛИ
			|   	(ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
			|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
			|   	)");
			
		КонецЕсли;	
		
		
	//СОПОСТАВЛЕНИЕ ЭДО
	Если Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" Тогда	
		Модуь_ШтрихкодированиеИСМПСлужебный = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		ДанныеНоменклатурыПоДаннымУПД = Модуь_ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыПоДаннымУПД(СсылкаНаДок.ИсходныйДокумент);
	КонецЕсли;
	
	//СОПОСТАВЛЕНИЕ ФОРМЫ ПРОВЕРКИ И ПОДБОРА
	Попытка 
		ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора = ДатаМобайл_Маркировка.ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора(СсылкаНаДок.ИсходныйДокумент);
	Исключение
		ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора = Неопределено; 
	КонецПопытки;	
	СведенияПоEAN = Неопределено;
	
	ТЗКМРаспределить = Новый ТаблицаЗначений;
	ТЗКМРаспределить.Колонки.Добавить("Номенклатура");
	ТЗКМРаспределить.Колонки.Добавить("Характеристика");
	ТЗКМРаспределить.Колонки.Добавить("Количество");

	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаДока Из Рез Цикл
		
		ОбъектСтрокиДока=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));	
		ОбъектСтрокиДока.DMBarcode="";
		
		Если ЗначениеЗаполнено(СтрокаДока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(СтрокаДока.Характеристика) Тогда
				ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
			Иначе
				ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000";
			КонецЕсли;
		Иначе
			
			Если НЕ ЗначениеЗаполнено(СтрокаДока.Марка) Тогда
				Продолжить;
			КонецЕсли;
			
			//Попробовать найти номенклатуру Из сопоставления документа ЭДО
			Если Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" Тогда
				СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(СтрокаДока.Марка);
			КонецЕсли;
	        //Попробовать найти номенклатуру Из сопоставления формы проверки И подбора
			Если СведенияПоEAN = Неопределено И ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора<>Неопределено Тогда
				СведенияПоEAN = ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора.Получить(СтрокаДока.Марка);
			КонецЕсли;
			
			Если СведенияПоEAN <> Неопределено Тогда
				Если ЗначениеЗаполнено(СведенияПоEAN.Номенклатура) Тогда
					
					Если ЗначениеЗаполнено(СведенияПоEAN.Характеристика) Тогда
						ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СведенияПоEAN.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СведенияПоEAN.Характеристика.УникальныйИдентификатор());
					Иначе
						ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СведенияПоEAN.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000";
					КонецЕсли;
					
					СтрокаРаспределения = ТЗКМРаспределить.Добавить();
					СтрокаРаспределения.Номенклатура = СведенияПоEAN.Номенклатура;
					СтрокаРаспределения.Характеристика = СведенияПоEAN.Характеристика;
					СтрокаРаспределения.Количество = 1;
					
				Иначе			
					ОбъектСтрокиДока.DMArtID = "00000000-0000-0000-0000-000000000000";	
				КонецЕсли;	
			Иначе			
				ОбъектСтрокиДока.DMArtID = "00000000-0000-0000-0000-000000000000";	
			КонецЕсли;		
		КонецЕсли;
		
		ТекущееКоличество = СтрокаДока.Количество;
		Если ТЗКМРаспределить.Количество()>0 И НЕ ЗначениеЗаполнено(СтрокаДока.Марка) Тогда			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", СтрокаДока.Номенклатура);
			Отбор.Вставить("Характеристика", СтрокаДока.Характеристика);

			ТЗКМРаспределить.Свернуть("Номенклатура,Характеристика","Количество");
			Строки = ТЗКМРаспределить.НайтиСтроки(Отбор);
			Для каждого Стр Из Строки Цикл
				Если ТекущееКоличество>0 Тогда
					ТекущееКоличество = ТекущееКоличество - Стр.Количество;	
	    			ТЗКМРаспределить.Удалить(Стр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		ОбъектСтрокиДока.DMPrice=СтрокаДока.Цена;	
		Попытка
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
				ОбъектСтрокиДока.DMSN = ПолучитьЗначениеСерии(УзелПО,СтрокаДока.Номенклатура,СтрокаДока.Серия);
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		Попытка
			Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
				ОбъектСтрокиДока.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура,СсылкаНаДок.Клиент);
			КонецЕсли;
		Исключение 
		КонецПопытки;
			
		ОбъектСтрокиДока.Params = СформироватьЗаголовкиJSONParamsСтрокиДокумента(СтрокаДока.Номенклатура,СсылкаНаДок);
		
		ТипПродукции = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура); 
		ОбъектСтрокиДока.DMPDFBarcode = ДатаМобайл_Маркировка.УбратьСкобкиТеговМарка(СтрокаДока.Марка,ТипПродукции);

		ОбъектСтрокиДока.DMBoxPackID = ДатаМобайл_Маркировка.УбратьСкобкиТеговУпаковка(СтрокаДока.Короб);
		ОбъектСтрокиДока.DMPackID = ДатаМобайл_Маркировка.УбратьСкобкиТеговУпаковка(СтрокаДока.Палета);
		ОбъектСтрокиДока.DMPalletID = ДатаМобайл_Маркировка.УбратьСкобкиТеговУпаковка(СтрокаДока.Палета);

		ОбъектСтрокиДока.DMQuant=ТекущееКоличество;
		
			ЭтоУслуга = Ложь;
			Попытка 
				Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЭтоУслуга = Истина;
			   	КонецЕсли;
			Исключение
			КонецПопытки;

		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектСтрокиДока.DMLimit=0;
		ИначеЕсли ЭтоУслуга Тогда
	        ОбъектСтрокиДока.DMLimit=999;
		Иначе	
			Итог = Формат(СтрокаДока.Лимит, ПолучитьФорматнуюСтрокуЧисла());
			Попытка
				ОбъектСтрокиДока.DMLimit=Итог;
			Исключение
				ОбъектСтрокиДока.DMLimit=0;
			КонецПопытки;
		КонецЕсли;
	
		ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);		
		
	КонецЦикла;   	
	
КонецПроцедуры
Процедура ПолучитьСтрокиДокументаМДЛП(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок)
		
	МаркировкаОнлайнПроверкаВложенностиУпаковок = Шаблон.МаркировкаОнлайнПроверкаВложенностиУпаковок;
	
	Если МаркировкаОнлайнПроверкаВложенностиУпаковок Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК ВНаличииОстаток,
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТоварыНаСкладахОстатки
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УведомлениеОПриемкеМДЛПТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	УведомлениеОПриемкеМДЛПТовары.Серия КАК Серия,
		|	УведомлениеОПриемкеМДЛПТовары.GTIN КАК GTIN,
		|	УведомлениеОПриемкеМДЛПТовары.НомерСерии КАК НомерСерии,
		|	УведомлениеОПриемкеМДЛПТовары.Цена КАК Цена,
		|	"""" КАК Короб,
		|	УведомлениеОПриемкеМДЛПТовары.КоличествоУпаковок КАК Количество,
		|	УведомлениеОПриемкеМДЛПТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Остаток
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК УведомлениеОПриемкеМДЛПТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
		|		ПО УведомлениеОПриемкеМДЛПТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И (ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ТоварыНаСкладахОстатки.Характеристика)
		|ГДЕ
		|	УведомлениеОПриемкеМДЛПТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УведомлениеОПриемкеМДЛПНомераУпаковок.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	УведомлениеОПриемкеМДЛПНомераУпаковок.НомерКИЗ КАК НомерКИЗ,
		|	УведомлениеОПриемкеМДЛПНомераУпаковок.НомерРодительскойУпаковки КАК НомерКороба
		|ПОМЕСТИТЬ Марки
		|ИЗ
		|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК УведомлениеОПриемкеМДЛПНомераУпаковок
		|ГДЕ
		|	УведомлениеОПриемкеМДЛПНомераУпаковок.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УведомлениеОПриемкеМДЛПТранспортныеУпаковки.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	УведомлениеОПриемкеМДЛПТранспортныеУпаковки.НомерУпаковки КАК НомерУпаковки
		|ПОМЕСТИТЬ Упаковки
		|ИЗ
		|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК УведомлениеОПриемкеМДЛПТранспортныеУпаковки
		|ГДЕ
		|	УведомлениеОПриемкеМДЛПТранспортныеУпаковки.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УведомлениеОПриемкеМДЛПТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	УведомлениеОПриемкеМДЛПТовары.Серия КАК Серия,
		|	УведомлениеОПриемкеМДЛПТовары.GTIN КАК GTIN,
		|	УведомлениеОПриемкеМДЛПТовары.НомерСерии КАК НомерСерии,
		|	УведомлениеОПриемкеМДЛПТовары.Цена КАК Цена,
		|	УведомлениеОПриемкеМДЛПТовары.Количество КАК Количество,
		|	УведомлениеОПриемкеМДЛПТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	УведомлениеОПриемкеМДЛПТовары.ИдентификаторСтрокиУпаковки КАК ИдентификаторСтрокиУпаковки,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Остаток
		|ПОМЕСТИТЬ ТоварыУпаковок
		|ИЗ
		|	Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК УведомлениеОПриемкеМДЛПТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
		|		ПО УведомлениеОПриемкеМДЛПТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И (ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ТоварыНаСкладахОстатки.Характеристика)
		|ГДЕ
		|	УведомлениеОПриемкеМДЛПТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	ЕСТЬNULL(Товары.GTIN, """") КАК GTIN,
		|	ЕСТЬNULL(Товары.НомерСерии, """") КАК НомерСерии,
		|	Товары.Цена КАК Цена,
		|	1 КАК Количество,
		|	ЕСТЬNULL(Товары.Остаток, 0) КАК Остаток,
		|	ЕСТЬNULL(Марки.НомерКИЗ, """") КАК Марка,
		|	"""" КАК Короб,
		|	"""" КАК Палета
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Марки КАК Марки
		|		ПО Товары.ИдентификаторСтроки = Марки.ИдентификаторСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Серия,
		|	ЕСТЬNULL(Товары.GTIN, """"),
		|	ЕСТЬNULL(Товары.НомерСерии, """"),
		|	Товары.Цена,
		|	1,
		|	ЕСТЬNULL(Товары.Остаток, 0),
		|	ЕСТЬNULL(Марки.НомерКИЗ, """"),
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Марки.НомерКороба, """") = """"
		|			ТОГДА ЕСТЬNULL(Упаковки.НомерУпаковки, """")
		|		ИНАЧЕ ЕСТЬNULL(Марки.НомерКороба, """")
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Марки.НомерКороба, """") = """"
		|			ТОГДА """"
		|		ИНАЧЕ ЕСТЬNULL(Упаковки.НомерУпаковки, """")
		|	КОНЕЦ
		|ИЗ
		|	ТоварыУпаковок КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Марки КАК Марки
		|		ПО Товары.ИдентификаторСтрокиУпаковки = Марки.ИдентификаторСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Упаковки КАК Упаковки
		|		ПО Товары.ИдентификаторСтроки = Упаковки.ИдентификаторСтроки
		|			И (Упаковки.НомерУпаковки <> ЕСТЬNULL(Марки.НомерКороба, """"))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблица.Характеристика КАК Характеристика,
		|	ВременнаяТаблица.Серия КАК Серия,
		|	ВременнаяТаблица.GTIN КАК GTIN,
		|	ВременнаяТаблица.НомерСерии КАК НомерСерии,
		|	СРЕДНЕЕ(ВременнаяТаблица.Цена) КАК Цена,
		|	СУММА(ВременнаяТаблица.Количество) КАК Количество,
		|	СУММА(ВременнаяТаблица.Остаток) КАК Остаток,
		|	ВременнаяТаблица.Короб КАК Короб,
		|	ВременнаяТаблица.Палета КАК Палета,
		|	"""" КАК Марка
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.Номенклатура,
		|	ВременнаяТаблица.Характеристика,
		|	ВременнаяТаблица.Серия,
		|	ВременнаяТаблица.GTIN,
		|	ВременнаяТаблица.НомерСерии,
		|	ВременнаяТаблица.Короб,
		|	ВременнаяТаблица.Палета";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаДок.ИсходныйДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл			
			ЗаполнитьСтрокуДокаМаркировкаМДЛП(ОбъектСписка, Выборка, Выборка.Количество, Истина);						
		КонецЦикла;
		
		Возврат;
		
	Иначе
		
		//МАРКИ
		ЗапросТоваров = Новый Запрос;
		ЗапросТоваров.Текст =
		
		"ВЫБРАТЬ
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК ВНаличииОстаток,
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТоварыНаСкладахОстатки
		|ИЗ
		|  РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////	
		|ВЫБРАТЬ
		|	УведомлениеОПриемкеМДЛПТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	УведомлениеОПриемкеМДЛПТовары.Серия КАК Серия,
		|	УведомлениеОПриемкеМДЛПТовары.GTIN КАК GTIN,
		|	УведомлениеОПриемкеМДЛПТовары.НомерСерии КАК НомерСерии,
		|	УведомлениеОПриемкеМДЛПТовары.Цена КАК Цена,
		|	"""" КАК Короб,
		|	УведомлениеОПриемкеМДЛПТовары.КоличествоУпаковок КАК Количество,
		|	УведомлениеОПриемкеМДЛПТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток,0) КАК Остаток
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК УведомлениеОПриемкеМДЛПТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
		|		ПО УведомлениеОПриемкеМДЛПТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И (ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ТоварыНаСкладахОстатки.Характеристика)
		|ГДЕ
		|	УведомлениеОПриемкеМДЛПТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УведомлениеОПриемкеМДЛПНомераУпаковок.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	УведомлениеОПриемкеМДЛПНомераУпаковок.НомерКИЗ КАК НомерКИЗ,
		|	УведомлениеОПриемкеМДЛПНомераУпаковок.НомерРодительскойУпаковки КАК НомерКороба
		|ПОМЕСТИТЬ Марки
		|ИЗ
		|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК УведомлениеОПриемкеМДЛПНомераУпаковок
		|ГДЕ
		|	УведомлениеОПриемкеМДЛПНомераУпаковок.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УведомлениеОПриемкеМДЛПТранспортныеУпаковки.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	УведомлениеОПриемкеМДЛПТранспортныеУпаковки.НомерУпаковки КАК НомерУпаковки
		|ПОМЕСТИТЬ Упаковки
		|ИЗ
		|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК УведомлениеОПриемкеМДЛПТранспортныеУпаковки
		|ГДЕ
		|	УведомлениеОПриемкеМДЛПТранспортныеУпаковки.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УведомлениеОПриемкеМДЛПТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	УведомлениеОПриемкеМДЛПТовары.Серия КАК Серия,
		|	УведомлениеОПриемкеМДЛПТовары.GTIN КАК GTIN,
		|	УведомлениеОПриемкеМДЛПТовары.НомерСерии КАК НомерСерии,
		|	УведомлениеОПриемкеМДЛПТовары.Цена КАК Цена,
		|	УведомлениеОПриемкеМДЛПТовары.Количество КАК Количество,
		|	УведомлениеОПриемкеМДЛПТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	УведомлениеОПриемкеМДЛПТовары.ИдентификаторСтрокиУпаковки КАК ИдентификаторСтрокиУпаковки,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток,0) КАК Остаток
		|ПОМЕСТИТЬ ТоварыУпаковок
		|ИЗ
		|	Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК УведомлениеОПриемкеМДЛПТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
		|		ПО УведомлениеОПриемкеМДЛПТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И (ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ТоварыНаСкладахОстатки.Характеристика)
		|ГДЕ
		|	УведомлениеОПриемкеМДЛПТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	ЕСТЬNULL(Товары.GTIN, """") КАК GTIN,
		|	ЕСТЬNULL(Товары.НомерСерии, """") КАК НомерСерии,
		|	Товары.Цена КАК Цена,
		|	Товары.Количество КАК Количество,
		|	ЕСТЬNULL(Товары.Остаток, 0) КАК Остаток,
		|	ЕСТЬNULL(Марки.НомерКИЗ, """") КАК Марка,
		|	"""" КАК Короб,
		|	"""" КАК Палета
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Марки КАК Марки
		|		ПО Товары.ИдентификаторСтроки = Марки.ИдентификаторСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Серия,
		|	ЕСТЬNULL(Товары.GTIN, """"),
		|	ЕСТЬNULL(Товары.НомерСерии, """"),
		|	Товары.Цена,
		|	Товары.Количество,
		|	ЕСТЬNULL(Товары.Остаток, 0),
		|	ЕСТЬNULL(Марки.НомерКИЗ, """"),
		|	ВЫБОР КОГДА ЕСТЬNULL(Марки.НомерКороба, """") ="""" ТОГДА ЕСТЬNULL(Упаковки.НомерУпаковки, """") ИНАЧЕ ЕСТЬNULL(Марки.НомерКороба, """") КОНЕЦ,
		|	ВЫБОР КОГДА ЕСТЬNULL(Марки.НомерКороба, """") ="""" ТОГДА """" ИНАЧЕ ЕСТЬNULL(Упаковки.НомерУпаковки, """") КОНЕЦ
		|ИЗ
		|	ТоварыУпаковок КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Марки КАК Марки
		|		ПО Товары.ИдентификаторСтрокиУпаковки = Марки.ИдентификаторСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Упаковки КАК Упаковки
		|		ПО Товары.ИдентификаторСтроки = Упаковки.ИдентификаторСтроки
		|		И  Упаковки.НомерУпаковки<>ЕСТЬNULL(Марки.НомерКороба,"""")
		|ИТОГИ
		|	СРЕДНЕЕ(Цена),
		|	СРЕДНЕЕ(Количество),
		|	СРЕДНЕЕ(Остаток)
		|ПО
		|	Номенклатура,
		|	Характеристика";
		
	КонецЕсли;

	ЗапросТоваров.УстановитьПараметр("Ссылка", СсылкаНаДок.ИсходныйДокумент); 
	
	ВыборкаТоваров = ЗапросТоваров.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		ВыборкаХарактеристик = ВыборкаТоваров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристик.Следующий() Цикл
			
			ВыборкаМарок = ВыборкаХарактеристик.Выбрать();
			
			Пока ВыборкаМарок.Следующий() Цикл
				ЗаполнитьСтрокуДокаМаркировкаМДЛП(ОбъектСписка, ВыборкаМарок, 1);			
			КонецЦикла;
			
			//Если ВыборкаМарок.Количество() < ВыборкаХарактеристик.Количество Тогда
			//	ЗаполнитьСтрокуДокаМаркировкаМДЛП(ОбъектСписка, 
			//	ВыборкаХарактеристик, (ВыборкаХарактеристик.Количество - ВыборкаМарок.Количество()), Истина);		
			//КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	
		
	
КонецПроцедуры
Процедура ЗаполнитьСтрокуДокаМаркировкаМДЛП(ОбъектСписка, ВыборкаТоваров, Количество, БезМарок = Ложь)
	
	ОбъектСтрокиДока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));
	
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.Характеристика) Тогда
			ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор()) + СокрЛП(ВыборкаТоваров.Характеристика.УникальныйИдентификатор());
		Иначе
			ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000";
		КонецЕсли;
	
	ОбъектСтрокиДока.DMPrice = ВыборкаТоваров.Цена;
	//ОбъектСтрокиДока.DMArtNAME = ЧистаяСтрока(ВыборкаТоваров.Номенклатура.Наименование);

	
	Если БезМарок Тогда
		ОбъектСтрокиДока.DMQuant = Количество;	
	Иначе
		ОбъектСтрокиДока.DMQuant = 1;
	КонецЕсли;
	
	ОбъектСтрокиДока.DMLimit = ВыборкаТоваров.Остаток;
	Если БезМарок Тогда
		ОбъектСтрокиДока.DMSN = "";
	Иначе
		ОбъектСтрокиДока.DMSN = ВыборкаТоваров.НомерСерии;	
	КонецЕсли;
	
	
	Если БезМарок Тогда
		ОбъектСтрокиДока.DMPDFBarcode = "";	
	Иначе
		
		Если ВыборкаТоваров.Марка <> "" Тогда
			ОбъектСтрокиДока.DMPDFBarcode = ДатаМобайл_МДЛП.ДобавитьВМаркуУпрСимволы(ВыборкаТоваров.Марка);
		Иначе
			ОбъектСтрокиДока.DMPDFBarcode = ВыборкаТоваров.Марка;
		КонецЕсли;
		
		Если СтрДлина(ВыборкаТоваров.Короб)=18 Тогда
			ОбъектСтрокиДока.DMBoxPackID = "00"+ВыборкаТоваров.Короб;
		Иначе
			ОбъектСтрокиДока.DMBoxPackID = ВыборкаТоваров.Короб;
		КонецЕсли;
		
		Если СтрДлина(ВыборкаТоваров.Палета)=18 Тогда
			ОбъектСтрокиДока.DMPackID = "00"+ВыборкаТоваров.Палета;
		Иначе
			ОбъектСтрокиДока.DMPackID = ВыборкаТоваров.Палета;
		КонецЕсли;

		Если СтрДлина(ВыборкаТоваров.Палета)=18 Тогда
			ОбъектСтрокиДока.DMPalletID = "00"+ВыборкаТоваров.Палета;
		Иначе
			ОбъектСтрокиДока.DMPalletID = ВыборкаТоваров.Палета;
		КонецЕсли;

	КонецЕсли;
	

	
	ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
	
КонецПроцедуры
Процедура GetDocRowsSelectOrderToReplace(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок)   //!!!
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
	                    |	ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
	                    |	&УсловиеСерия КАК Серия,
	                    |	&УсловиеЦена КАК Цена,
	                    |	СУММА(ВЫБОР
	                    |			КОГДА ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0) = 0
	                    |				ТОГДА ТаблицаТоваровВДокументе.КоличествоУпаковок
	                    |			ИНАЧЕ ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0)
	                    |		КОНЕЦ) КАК Количество,
	                    |	МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки
	                    |ПОМЕСТИТЬ ТаблицаТоваровВДокументе1С
	                    |ИЗ
	                    |	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТоваровВДокументе
	                    |ГДЕ
	                    |	ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ТаблицаТоваровВДокументе.Номенклатура,
	                    |	ТаблицаТоваровВДокументе.Характеристика,
						|	&УсловиеСерия
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	                    |	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК Характеристика,
	                    |	СУММА(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество) КАК Количество
	                    |ПОМЕСТИТЬ РезервыТСД
	                    |ИЗ
	                    |	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	                    |ГДЕ
	                    |	ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка <> &Ссылка
	                    |		И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.Шаблон.РезервироватьТовар
	                    |			И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	                    |	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	СвободныеОстатки.Номенклатура КАК Номенклатура,
	                    |	СвободныеОстатки.Характеристика КАК Характеристика,
	                    |	СвободныеОстатки.Серия КАК Серия,
	                    |	СУММА(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0)) КАК ВНаличииОстатокСерии
	                    |ПОМЕСТИТЬ ТоварыНаСкладахОстаткиСерии
	                    |ИЗ
	                    |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	                    |			,
	                    |			Номенклатура В
	                    |					(ВЫБРАТЬ
	                    |						ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура
	                    |					ИЗ
	                    |						ТаблицаТоваровВДокументе1С КАК ТаблицаТоваровВДокументе)
	                    |				И (&ВсеСклады
	                    |					ИЛИ Склад В (&Склады))
						|				И (&ВсеПомещения
	              		|					ИЛИ Помещение В (&Помещения))) КАК СвободныеОстатки
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	СвободныеОстатки.Номенклатура,
	                    |	СвободныеОстатки.Характеристика,
	                    |	СвободныеОстатки.Серия
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	                    |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	                    |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстатокСерии, 0)) КАК ВНаличииОстаток
	                    |ПОМЕСТИТЬ ТоварыНаСкладахОстатки
	                    |ИЗ
	                    |	ТоварыНаСкладахОстаткиСерии КАК ТоварыНаСкладахОстатки
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ТоварыНаСкладахОстатки.Номенклатура,
	                    |	ТоварыНаСкладахОстатки.Характеристика
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ЗаказыНаПеремещениеОстатки.Номенклатура КАК Номенклатура,
	                    |	ЗаказыНаПеремещениеОстатки.Характеристика КАК Характеристика,
	                    |	ЗаказыНаПеремещениеОстатки.Серия КАК Серия,
	                    |	ЗаказыНаПеремещениеОстатки.ЗаказаноОстаток КАК ОстатокНаПеремещение
	                    |ПОМЕСТИТЬ ОстаткиЗаказовНаПеремещение
	                    |ИЗ
	                    |	РегистрНакопления.ЗаказыНаПеремещение.Остатки(&ДатаКонтроля, ЗаказНаПеремещение = &ИсходныйДокумент) КАК ЗаказыНаПеремещениеОстатки
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ТаблицаТоваровВДокументе1С.Номенклатура КАК Номенклатура,
	                    |	ТаблицаТоваровВДокументе1С.Характеристика КАК Характеристика,
	                    |	ТаблицаТоваровВДокументе1С.Цена КАК Цена,
	                    |	СУММА(ЕСТЬNULL(ОстаткиЗаказовНаПеремещение.ОстатокНаПеремещение,0)) КАК Количество,
	                    |	ТаблицаТоваровВДокументе1С.НомерСтроки КАК НомерСтроки,
	                    |	ТаблицаТоваровВДокументе1С.Серия КАК Серия,
	                    |	СУММА(ТоварыНаСкладахОстаткиСерии.ВНаличииОстатокСерии) КАК ОстатокПоСерии,
	                    |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(РезервыТСД.Количество, 0)) КАК Лимит
	                    |ИЗ
	                    |	ТаблицаТоваровВДокументе1С КАК ТаблицаТоваровВДокументе1С
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РезервыТСД КАК РезервыТСД
	                    |		ПО ТаблицаТоваровВДокументе1С.Номенклатура = РезервыТСД.Номенклатура
	                    |			И ТаблицаТоваровВДокументе1С.Характеристика = РезервыТСД.Характеристика
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстаткиСерии КАК ТоварыНаСкладахОстаткиСерии
	                    |		ПО ТаблицаТоваровВДокументе1С.Номенклатура = ТоварыНаСкладахОстаткиСерии.Номенклатура
	                    |			И ТаблицаТоваровВДокументе1С.Характеристика = ТоварыНаСкладахОстаткиСерии.Характеристика
	                    |			И ТаблицаТоваровВДокументе1С.Серия = ТоварыНаСкладахОстаткиСерии.Серия
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
	                    |		ПО ТаблицаТоваровВДокументе1С.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	                    |			И ТаблицаТоваровВДокументе1С.Характеристика = ТоварыНаСкладахОстатки.Характеристика
						|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиЗаказовНаПеремещение КАК ОстаткиЗаказовНаПеремещение
	                    |			ПО ТаблицаТоваровВДокументе1С.Номенклатура = ОстаткиЗаказовНаПеремещение.Номенклатура
	                    |			И ТаблицаТоваровВДокументе1С.Характеристика = ОстаткиЗаказовНаПеремещение.Характеристика
	                    |			И ТаблицаТоваровВДокументе1С.Серия = ОстаткиЗаказовНаПеремещение.Серия
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ТаблицаТоваровВДокументе1С.Номенклатура,
	                    |	ТаблицаТоваровВДокументе1С.Характеристика,
	                    |	ТаблицаТоваровВДокументе1С.Цена,
	                    |	ТаблицаТоваровВДокументе1С.Количество,
	                    |	ТаблицаТоваровВДокументе1С.НомерСтроки,
	                    |	ТаблицаТоваровВДокументе1С.Серия
	                    |
						//|ИМЕЮЩИЕ
						//|	ТаблицаТоваровВДокументе1С.Количество - СУММА(ОстаткиЗаказовНаПеремещение.ОстатокНаПеремещение) > 0
						|
	                    |УПОРЯДОЧИТЬ ПО
	                    |	НомерСтроки");


	
		Запрос.УстановитьПараметр("ДатаКонтроля",СсылкаНаДок.ДатаСоздания);
		Запрос.УстановитьПараметр("Ссылка",СсылкаНаДок);
		Запрос.УстановитьПараметр("ИсходныйДокумент",СсылкаНаДок.ИсходныйДокумент);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ПриходныйОрдерНаТовары.","."+Шаблон.ВидДокумента+".");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК ","."+Шаблон.ИмяТабличнойЧастиПодбор+" КАК ");
		
		//Если у документа есть склад берем остатки по складу документа иначе склады Из настроек ТСД
		Попытка 
			ТекущийСклад = СсылкаНаДок.Склад;
			СписокСкладов=Новый Массив;
		    СписокСкладов.Добавить(ТекущийСклад);
		Исключение
			СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
		    Запрос.УстановитьПараметр("Склады",СписокСкладов);
		КонецПопытки;
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
		Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
		
		СписокПомещений=УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
		Запрос.УстановитьПараметр("Помещения",СписокПомещений);
		Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);

		Запрос.УстановитьПараметр("Документы",СсылкаНаДок.Задания.ВыгрузитьКолонку("Задание"));

		
		Попытка
			ЕстьЦены = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Цена")<>Неопределено;
		Исключение
			ЕстьЦены = Ложь;
		КонецПопытки;

		
		Если ЕстьЦены Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","ТаблицаТоваровВДокументе.Цена");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","0");
		КонецЕсли;
		
		
		Попытка
			ЕстьСерии = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Серия")<>Неопределено;
		Исключение
			ЕстьСерии = Ложь;
		КонецПопытки;
		
		Если ЕстьСерии Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","ТаблицаТоваровВДокументе.Серия");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		КонецЕсли;

		
		Попытка
			ЕстьКоличествоУпаковок = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено;
		Исключение
			ЕстьКоличествоУпаковок = Ложь;
		КонецПопытки;

		Если ЕстьКоличествоУпаковок Тогда
			Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество,","ТаблицаТоваровВДокументе.КоличествоУпаковок,");
			КонецЕсли;			
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.КоличествоУпаковок","ТаблицаТоваровВДокументе.Количество");
		КонецЕсли;
		
		
			
		
		Если Шаблон.ВидДокумента = "ЗаказПоставщику" Тогда
			Попытка
				ЕстьОтменено = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено")<>Неопределено;
			Исключение
				ЕстьОтменено = Ложь;
			КонецПопытки;
			
			Если ЕстьОтменено Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент И НЕ ТаблицаТоваровВДокументе.Отменено");
			КонецЕсли;	
		ИначеЕсли Шаблон.ВидДокумента = "ЗаказКлиента" Тогда
			Попытка
				ЕстьОтменено = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено")<>Неопределено И Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("ВариантОбеспечения")<>Неопределено;
			Исключение
				ЕстьОтменено = Ложь;
			КонецПопытки;
			
			Если ЕстьОтменено Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент И НЕ ТаблицаТоваровВДокументе.Отменено"); //И ТаблицаТоваровВДокументе.ВариантОбеспечения<>ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)");
			КонецЕсли;		
		КонецЕсли;

		Если Шаблон.ВидДокумента = "ПересчетТоваров" И УзелПО.НеОтображатьОстатки Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.КоличествоУпаковок","0");
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Количество","0");
		КонецЕсли;	
		
		Если Шаблон.РаспределениеТоваров = 1 Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент", "ТаблицаТоваровВДокументе.Ссылка В(&Документы)");
	    КонецЕсли;		

		Если Шаблон.ИспользоватьМаркировку И Шаблон.МаркировкаЗапретитьПодборНемаркируемыхТоваров Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент 
													|   	И
													|   	(
													|   	(ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
													|   	ИЛИ
													|   	(ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
													|   	И ТаблицаТоваровВДокументе.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
													|   	)");
			
		КонецЕсли;	
		
		
	Рез = Запрос.Выполнить().Выгрузить();
		
	Для каждого СтрокаДока Из Рез Цикл
		
		
		Если СтрокаДока.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектСтрокиДока=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));
		ОбъектСтрокиДока.DMBarcode="";
		
		Если ЗначениеЗаполнено(СтрокаДока.Характеристика) Тогда
			ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
		Иначе
			ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000";
		КонецЕсли;
		
		ОбъектСтрокиДока.DMPrice=СтрокаДока.Цена;	
		
		Попытка
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
				ОбъектСтрокиДока.DMSN = ПолучитьЗначениеСерии(УзелПО,СтрокаДока.Номенклатура,СтрокаДока.Серия);
			КонецЕсли;	
		Исключение
		КонецПопытки;	
		
			Попытка
				Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
					ОбъектСтрокиДока.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура,СсылкаНаДок.Клиент);
				КонецЕсли;
			Исключение 
			КонецПопытки;

		ОбъектСтрокиДока.Params = СформироватьЗаголовкиJSONParamsСтрокиДокумента(СтрокаДока.Номенклатура,СсылкаНаДок);
		
		ОбъектСтрокиДока.DMQuant=СтрокаДока.Количество;
		
			ЭтоУслуга = Ложь;
			Попытка 
				Если СтрокаДока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЭтоУслуга = Истина;
			   	КонецЕсли;
			Исключение
			КонецПопытки;

		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектСтрокиДока.DMLimit=0;
		ИначеЕсли ЭтоУслуга Тогда
			ОбъектСтрокиДока.DMLimit=999;	
		Иначе	
			Итог = Формат(СтрокаДока.Лимит, ПолучитьФорматнуюСтрокуЧисла());
			Попытка
				ОбъектСтрокиДока.DMLimit=Итог;
			Исключение
				ОбъектСтрокиДока.DMLimit=0;
			КонецПопытки;
		КонецЕсли;
	
		ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
	КонецЦикла;

	
		

	
КонецПроцедуры
Процедура GetDocRowsSborka_Select(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ЗапросСЛимитами.Номенклатура КАК Номенклатура,
	                    |	ЗапросСЛимитами.Характеристика КАК Характеристика,
	                    |	ЗапросСЛимитами.Серия КАК Серия,
	                    |	ЗапросСЛимитами.Цена КАК Цена,
	                    |	СУММА(ЗапросСЛимитами.Количество) КАК Количество,
	                    |	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(РезервыТСД.Количество, 0)) КАК Лимит,
	                    |	МИНИМУМ(ЗапросСЛимитами.НомерСтроки) КАК НомерСтроки
	                    |ПОМЕСТИТЬ ТоварыОстатки
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
	                    |		ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
	                    |		&УсловиеСерия КАК Серия,
	                    |		&УсловиеЦена КАК Цена,
	                    |		СУММА(ВЫБОР
	                    |				КОГДА ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0) = 0
	                    |					ТОГДА ТаблицаТоваровВДокументе.КоличествоУпаковок
	                    |				ИНАЧЕ ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0)
	                    |			КОНЕЦ) КАК Количество,
	                    |		МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки
	                    |	ИЗ
	                    |		Документ.СборкаТоваров.Товары КАК ТаблицаТоваровВДокументе
	                    |	ГДЕ
	                    |		ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
	                    |	
	                    |	СГРУППИРОВАТЬ ПО
	                    |		ТаблицаТоваровВДокументе.Номенклатура,
	                    |		ТаблицаТоваровВДокументе.Характеристика,
						|		&УсловиеСерия,
						|		&УсловиеЦена) КАК ЗапросСЛимитами
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	                    |				,
	                    |				&ВсеСклады
	                    |					ИЛИ Склад В (&Склады)
	                    |					ИЛИ Помещение В (&Склады)) КАК СвободныеОстаткиОстатки
	                    |		ПО ЗапросСЛимитами.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	                    |			И ЗапросСЛимитами.Характеристика = СвободныеОстаткиОстатки.Характеристика
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                    |			СУММА(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество) КАК Количество
	                    |		ИЗ
	                    |			Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	                    |		ГДЕ
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка <> &Ссылка
	                    |				И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.Шаблон.РезервироватьТовар
	                    |					И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	                    |		
	                    |		СГРУППИРОВАТЬ ПО
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры) КАК РезервыТСД
	                    |		ПО ЗапросСЛимитами.Номенклатура = РезервыТСД.Номенклатура
	                    |			И ЗапросСЛимитами.Характеристика = РезервыТСД.ХарактеристикаНоменклатуры
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ЗапросСЛимитами.Номенклатура,
	                    |	ЗапросСЛимитами.Характеристика,
	                    |	ЗапросСЛимитами.Серия,
	                    |	ЗапросСЛимитами.Цена
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	СУММА(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0)) КАК ВНаличииОстаток,
	                    |	СвободныеОстатки.Номенклатура КАК Номенклатура,
	                    |	СвободныеОстатки.Характеристика КАК Характеристика,
	                    |	СвободныеОстатки.Серия КАК Серия
	                    |ПОМЕСТИТЬ ТоварыНаСкладахОстатки
	                    |ИЗ
	                    |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	                    |			,
	                    |			Номенклатура В
	                    |					(ВЫБРАТЬ
	                    |						ТоварыОстатки.Номенклатура КАК Номенклатура
	                    |					ИЗ
	                    |						ТоварыОстатки КАК ТоварыОстатки)
	                    |				И (&ВсеСклады
	                    |					ИЛИ Склад В (&Склады)
	                    |					ИЛИ Помещение В (&Склады))) КАК СвободныеОстатки
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	СвободныеОстатки.Номенклатура,
	                    |	СвободныеОстатки.Характеристика,
	                    |	СвободныеОстатки.Серия
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ТоварыОстатки.Номенклатура КАК Номенклатура,
	                    |	ТоварыОстатки.Характеристика КАК Характеристика,
	                    |	ТоварыОстатки.Серия КАК Серия,
	                    |	ТоварыОстатки.Цена КАК Цена,
	                    |	ТоварыОстатки.Количество КАК Количество,
	                    |	ТоварыОстатки.Лимит КАК Лимит,
	                    |	ТоварыОстатки.НомерСтроки КАК НомерСтроки,
	                    |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)) КАК ОстатокПоСерии
	                    |ИЗ
	                    |	ТоварыОстатки КАК ТоварыОстатки
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
	                    |		ПО ТоварыОстатки.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	                    |			И ТоварыОстатки.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	                    |			И ТоварыОстатки.Серия = ТоварыНаСкладахОстатки.Серия
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ТоварыОстатки.Номенклатура,
	                    |	ТоварыОстатки.Характеристика,
	                    |	ТоварыОстатки.Серия,
	                    |	ТоварыОстатки.Цена,
	                    |	ТоварыОстатки.Количество,
	                    |	ТоварыОстатки.Лимит,
	                    |	ТоварыОстатки.НомерСтроки");


		Запрос.УстановитьПараметр("Ссылка",СсылкаНаДок);
		Запрос.УстановитьПараметр("ИсходныйДокумент",СсылкаНаДок.ИсходныйДокумент);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".СборкаТоваров.","."+Шаблон.ВидДокумента+".");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК ","."+Шаблон.ИмяТабличнойЧастиПодбор+" КАК ");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ТТНВходящаяЕГАИС.","."+Шаблон.ВидДокумента+".");
		
		//Если у документа есть склад берем остатки по складу документа иначе склады Из настроек ТСД
		Попытка 
			ТекущийСклад = СсылкаНаДок.ИсходныйДокумент.Склад;
			СписокСкладов=Новый Массив;
		    СписокСкладов.Добавить(ТекущийСклад);
		Исключение
			СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
		    Запрос.УстановитьПараметр("Склады",СписокСкладов);
		КонецПопытки;
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
		Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
		
		
		Попытка
			ЕстьЦены = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Цена")<>Неопределено;
		Исключение
			ЕстьЦены = Ложь;
		КонецПопытки;
		
	
		Если ЕстьЦены Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","ТаблицаТоваровВДокументе.Цена");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","0");
		КонецЕсли;
		
		
		Попытка
			ЕстьСерии = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Серия")<>Неопределено;
		Исключение
			ЕстьСерии = Ложь;
		КонецПопытки;
		
		Если ЕстьСерии Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","ТаблицаТоваровВДокументе.Серия");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		КонецЕсли;

		
		Попытка
			ЕстьКоличествоУпаковок = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено;
		Исключение
			ЕстьКоличествоУпаковок = Ложь;
		КонецПопытки;

		Если ЕстьКоличествоУпаковок Тогда
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.КоличествоУпаковок","ТаблицаТоваровВДокументе.Количество");
		КонецЕсли;
			
		
		Если Шаблон.ВидДокумента = "ЗаказПоставщику" Тогда
			Попытка
				ЕстьОтменено = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено")<>Неопределено;
			Исключение
				ЕстьОтменено = Ложь;
			КонецПопытки;
			
			Если ЕстьОтменено Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент И НЕ ТаблицаТоваровВДокументе.Отменено");
			КонецЕсли;	
		ИначеЕсли Шаблон.ВидДокумента = "ЗаказКлиента" Тогда
			Попытка
				ЕстьОтменено = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено")<>Неопределено И Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("ВариантОбеспечения")<>Неопределено;
			Исключение
				ЕстьОтменено = Ложь;
			КонецПопытки;
			
			Если ЕстьОтменено Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент И НЕ ТаблицаТоваровВДокументе.Отменено И ТаблицаТоваровВДокументе.ВариантОбеспечения<>ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)");
			КонецЕсли;		
		КонецЕсли;

		
		Если ДатаМобайл_ОбщийМодуль.ЕстьРегистрНакопления("СвободныеОстатки") Тогда
			Если УзелПО.УчитыватьОстаткиПоРегиструСвободныеОстатки Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"РегистрНакопления.ТоварыНаСкладах.Остатки","РегистрНакопления.СвободныеОстатки.Остатки");
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"СвободныеОстаткиОстатки.КОтгрузкеОстаток","СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток+СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток");
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ИЛИ Помещение В (&Склады)","");
			КонецЕсли;
		КонецЕсли;
		
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДока Из Рез Цикл
		
		
		Если СтрокаДока.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектСтрокиДока=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));
		ОбъектСтрокиДока.DMBarcode="";
		
		Если ЗначениеЗаполнено(СтрокаДока.Характеристика) Тогда
			ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
		Иначе
			ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000";
		КонецЕсли;
		
		ОбъектСтрокиДока.DMPrice=СтрокаДока.Цена;	
		
		Попытка
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
				ОбъектСтрокиДока.DMSN = ПолучитьЗначениеСерии(УзелПО,СтрокаДока.Номенклатура,СтрокаДока.Серия);
			КонецЕсли;	
		Исключение
		КонецПопытки;	
		
			Попытка
				Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
					ОбъектСтрокиДока.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура,СсылкаНаДок.Клиент);
				КонецЕсли;
			Исключение 
			КонецПопытки;

		ОбъектСтрокиДока.Params = СформироватьЗаголовкиJSONParamsСтрокиДокумента(СтрокаДока.Номенклатура,СсылкаНаДок);
		
		ОбъектСтрокиДока.DMQuant=СтрокаДока.Количество;
		
		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектСтрокиДока.DMLimit=0;
		Иначе	
			Итог = Формат(СтрокаДока.Лимит, ПолучитьФорматнуюСтрокуЧисла());
			Попытка
				ОбъектСтрокиДока.DMLimit=Итог;
			Исключение
				ОбъектСтрокиДока.DMLimit=0;
			КонецПопытки;
		КонецЕсли;
	
		ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
	КонецЦикла;

	
КонецПроцедуры
Процедура GetDocRowsSborka_Insert(УзелПО, Шаблон, ОбъектСписка, СсылкаНаДок)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ЗапросСЛимитами.Номенклатура КАК Номенклатура,
	                    |	ЗапросСЛимитами.Характеристика КАК Характеристика,
	                    |	ЗапросСЛимитами.Серия КАК Серия,
	                    |	ЗапросСЛимитами.Цена КАК Цена,
	                    |	СУММА(ЗапросСЛимитами.Количество) КАК Количество,
	                    |	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(РезервыТСД.Количество, 0)) КАК Лимит,
	                    |	МИНИМУМ(ЗапросСЛимитами.НомерСтроки) КАК НомерСтроки
	                    |ПОМЕСТИТЬ ТоварыОстатки
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
	                    |		ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
	                    |		&УсловиеСерия КАК Серия,
	                    |		&УсловиеЦена КАК Цена,
	                    |		СУММА(ВЫБОР
	                    |				КОГДА ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0) = 0
	                    |					ТОГДА ТаблицаТоваровВДокументе.КоличествоУпаковок
	                    |				ИНАЧЕ ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0)
	                    |			КОНЕЦ) КАК Количество,
	                    |		1 КАК НомерСтроки
	                    |	ИЗ
	                    |		Документ.СборкаТоваров КАК ТаблицаТоваровВДокументе
	                    |	ГДЕ
	                    |		ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
	                    |	
	                    |	СГРУППИРОВАТЬ ПО
	                    |		ТаблицаТоваровВДокументе.Номенклатура,
	                    |		ТаблицаТоваровВДокументе.Характеристика,
						|		&УсловиеСерия) КАК ЗапросСЛимитами
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	                    |				,
	                    |				&ВсеСклады
	                    |					ИЛИ Склад В (&Склады)
	                    |					ИЛИ Помещение В (&Склады)) КАК СвободныеОстаткиОстатки
	                    |		ПО ЗапросСЛимитами.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	                    |			И ЗапросСЛимитами.Характеристика = СвободныеОстаткиОстатки.Характеристика
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                    |			СУММА(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество) КАК Количество,
	                    |			1 КАК Поле1
	                    |		ИЗ
	                    |			Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
	                    |		ГДЕ
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка <> &Ссылка
	                    |				И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.Шаблон.РезервироватьТовар
	                    |					И ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	                    |		
	                    |		СГРУППИРОВАТЬ ПО
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
	                    |			ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры) КАК РезервыТСД
	                    |		ПО ЗапросСЛимитами.Номенклатура = РезервыТСД.Номенклатура
	                    |			И ЗапросСЛимитами.Характеристика = РезервыТСД.ХарактеристикаНоменклатуры
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ЗапросСЛимитами.Номенклатура,
	                    |	ЗапросСЛимитами.Характеристика,
	                    |	ЗапросСЛимитами.Серия,
	                    |	ЗапросСЛимитами.Цена
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	СУММА(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0)) КАК ВНаличииОстаток,
	                    |	СвободныеОстатки.Номенклатура КАК Номенклатура,
	                    |	СвободныеОстатки.Характеристика КАК Характеристика,
	                    |	СвободныеОстатки.Серия КАК Серия
	                    |ПОМЕСТИТЬ ТоварыНаСкладахОстатки
	                    |ИЗ
	                    |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	                    |			,
	                    |			Номенклатура В
	                    |					(ВЫБРАТЬ
	                    |						ТоварыОстатки.Номенклатура КАК Номенклатура
	                    |					ИЗ
	                    |						ТоварыОстатки КАК ТоварыОстатки)
	                    |				И (&ВсеСклады
	                    |					ИЛИ Склад В (&Склады)
	                    |					ИЛИ Помещение В (&Склады))) КАК СвободныеОстатки
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	СвободныеОстатки.Номенклатура,
	                    |	СвободныеОстатки.Характеристика,
	                    |	СвободныеОстатки.Серия
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ТоварыОстатки.Номенклатура КАК Номенклатура,
	                    |	ТоварыОстатки.Характеристика КАК Характеристика,
	                    |	ТоварыОстатки.Серия КАК Серия,
	                    |	ТоварыОстатки.Цена КАК Цена,
	                    |	ТоварыОстатки.Количество КАК Количество,
	                    |	ТоварыОстатки.Лимит КАК Лимит,
	                    |	ТоварыОстатки.НомерСтроки КАК НомерСтроки,
	                    |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)) КАК ОстатокПоСерии
	                    |ИЗ
	                    |	ТоварыОстатки КАК ТоварыОстатки
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
	                    |		ПО ТоварыОстатки.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	                    |			И ТоварыОстатки.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	                    |			И ТоварыОстатки.Серия = ТоварыНаСкладахОстатки.Серия
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ТоварыОстатки.Номенклатура,
	                    |	ТоварыОстатки.Характеристика,
	                    |	ТоварыОстатки.Серия,
	                    |	ТоварыОстатки.Цена,
	                    |	ТоварыОстатки.Количество,
	                    |	ТоварыОстатки.Лимит,
	                    |	ТоварыОстатки.НомерСтроки");


		Запрос.УстановитьПараметр("Ссылка",СсылкаНаДок);
		Запрос.УстановитьПараметр("ИсходныйДокумент",СсылкаНаДок.ИсходныйДокумент);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"СборкаТоваров",Шаблон.ВидДокумента);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК ","."+Шаблон.ИмяТабличнойЧастиПодбор+" КАК ");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ТТНВходящаяЕГАИС.","."+Шаблон.ВидДокумента+".");
		
		//Если у документа есть склад берем остатки по складу документа иначе склады Из настроек ТСД
		Попытка 
			ТекущийСклад = СсылкаНаДок.ИсходныйДокумент.Склад;
			СписокСкладов=Новый Массив;
		    СписокСкладов.Добавить(ТекущийСклад);
		Исключение
			СписокСкладов=УзелПО.Склады.ВыгрузитьКолонку("Склад");
		    Запрос.УстановитьПараметр("Склады",СписокСкладов);
		КонецПопытки;
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
		Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
		
		
		Попытка
			ЕстьЦены = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Цена")<>Неопределено;
		Исключение
			ЕстьЦены = Ложь;
		КонецПопытки;

		
		Если ЕстьЦены Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","ТаблицаТоваровВДокументе.Цена");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","0");
		КонецЕсли;
		
		
		Попытка
			ЕстьСерии = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Серия")<>Неопределено;
		Исключение
			ЕстьСерии = Ложь;
		КонецПопытки;
		
		Если ЕстьСерии Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","ТаблицаТоваровВДокументе.Серия");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		КонецЕсли;

		
		Попытка
			ЕстьКоличествоУпаковок = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено;
		Исключение
			ЕстьКоличествоУпаковок = Ложь;
		КонецПопытки;

		Если ЕстьКоличествоУпаковок Тогда
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.КоличествоУпаковок","ТаблицаТоваровВДокументе.Количество");
		КонецЕсли;
			
		
		Если Шаблон.ВидДокумента = "ЗаказПоставщику" Тогда
			Попытка
				ЕстьОтменено = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено")<>Неопределено;
			Исключение
				ЕстьОтменено = Ложь;
			КонецПопытки;
			
			Если ЕстьОтменено Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент И НЕ ТаблицаТоваровВДокументе.Отменено");
			КонецЕсли;	
		ИначеЕсли Шаблон.ВидДокумента = "ЗаказКлиента" Тогда
			Попытка
				ЕстьОтменено = Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено")<>Неопределено И Метаданные.Документы[Шаблон.ВидДокумента].ТабличныеЧасти[Шаблон.ИмяТабличнойЧастиПодбор].Реквизиты.Найти("ВариантОбеспечения")<>Неопределено;
			Исключение
				ЕстьОтменено = Ложь;
			КонецПопытки;
			
			Если ЕстьОтменено Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент","ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент И НЕ ТаблицаТоваровВДокументе.Отменено И ТаблицаТоваровВДокументе.ВариантОбеспечения<>ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)");
			КонецЕсли;		
		КонецЕсли; 
		
		Если ДатаМобайл_ОбщийМодуль.ЕстьРегистрНакопления("СвободныеОстатки") Тогда
			Если УзелПО.УчитыватьОстаткиПоРегиструСвободныеОстатки Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.ТоварыНаСкладах.Остатки","РегистрНакопления.СвободныеОстатки.Остатки");
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"СвободныеОстаткиОстатки.КОтгрузкеОстаток","СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток+СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток");
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИЛИ Помещение В (&Склады)","");
			КонецЕсли;
		КонецЕсли;
		
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДока Из Рез Цикл
		
		
		Если СтрокаДока.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектСтрокиДока=ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocRec"));
		ОбъектСтрокиДока.DMBarcode="";
		
		Если ЗначениеЗаполнено(СтрокаДока.Характеристика) Тогда
			ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрокаДока.Характеристика.УникальныйИдентификатор());
		Иначе
			ОбъектСтрокиДока.DMArtID = "8U-" + СокрЛП(СтрокаДока.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000";
		КонецЕсли;
		
		ОбъектСтрокиДока.DMPrice=СтрокаДока.Цена;	
		
		Попытка
			Если ЗначениеЗаполнено(СтрокаДока.Серия) Тогда
				ОбъектСтрокиДока.DMSN = ПолучитьЗначениеСерии(УзелПО,СтрокаДока.Номенклатура,СтрокаДока.Серия, Истина);
			КонецЕсли;	
		Исключение
		КонецПопытки;	
		
			Попытка
				Если СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах Тогда	
					ОбъектСтрокиДока.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрокаДока.Номенклатура,СсылкаНаДок.Клиент);
				КонецЕсли;
			Исключение 
			КонецПопытки;

		ОбъектСтрокиДока.Params = СформироватьЗаголовкиJSONParamsСтрокиДокумента(СтрокаДока.Номенклатура,СсылкаНаДок);
		
		ОбъектСтрокиДока.DMQuant=СтрокаДока.Количество;
		
		Если УзелПО.НеОтображатьОстатки Тогда
			ОбъектСтрокиДока.DMLimit=0;
		Иначе	
			Итог = Формат(СтрокаДока.Лимит, ПолучитьФорматнуюСтрокуЧисла());
			Попытка
				ОбъектСтрокиДока.DMLimit=Итог;
			Исключение
				ОбъектСтрокиДока.DMLimit=0;
			КонецПопытки;
		КонецЕсли;
	
		ОбъектСписка.DMDocRow.Добавить(ОбъектСтрокиДока);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//ФУНКЦИИ SendArtToPrint 
#Область SendArtToPrint

Процедура ВыполнитьПечатьОбычныхТоваров(УзелПО, лТовар, лХарактеристика, Barcode, Count, СтруктураParams)
	
	СтруктураПоиска = Новый Структура("ТипОперации", "Печать этикетки");
	СтрокиРеквизитов = УзелПО.Печать.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиРеквизитов.Количество() = 0 Тогда
		ВызватьИсключениеВС("SendArtToPrint. В обработке АРМ для терминала не указан шаблон печати этикеток. ");
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Если Не УзелПО.ОнлайнСвязьСПринтсервером Тогда
		КаталогСохранения = УзелПО.КаталогВыгрузкиФайлаПечати;
		ИмяФайла = ПолучитьНовоеИмяФайла();	
		Попытка
			ЗаписьXML.ОткрытьФайл(КаталогСохранения+ИмяФайла + ".xml", "UTF-8");
		Исключение
			ВызватьИсключениеВС("SendArtToPrint. Не удалось сохранить файл печати в каталоге: " + КаталогСохранения + " по причине: " + ОписаниеОшибки());	
		КонецПопытки;
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;	
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("PrintData");
	
	ЗаписатьЭлементXML(ЗаписьXML, "PrinterName", СтрокиРеквизитов[0].ИмяПринтера);
	ЗаписатьЭлементXML(ЗаписьXML, "TemplateName", СтрокиРеквизитов[0].ИмяШаблона);
	ЗаписатьЭлементXML(ЗаписьXML, "Count", СтрокиРеквизитов[0].КоличествоКопий*Count);		
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Head");
	
	ЗаписатьЭлементXML(ЗаписьXML, "ArtName", ЧистаяСтрока(лТовар.Наименование + " " + лХарактеристика.Наименование));
	
	Если ЗначениеЗаполнено(СтруктураParams.GS1) И Лев(СтруктураParams.GS1, 4) = "(01)" Тогда
		лШтрихкод = Сред(СтруктураParams.GS1, 6, 13);	
	Иначе	
		лШтрихкод = Barcode;
	КонецЕсли;
	
	Если стрДлина(Barcode) = 5 Тогда
		лШтрихкодВесовой = "";
		
		Попытка
			ПрефиксВесовогоТовара = Константы.ПрефиксВесовогоШтрихкода.Получить(); 
			ВесовойШкБезКС = "2" + ПрефиксВесовогоТовара + Barcode + "00000";
			лШтрихкодВесовой = ВесовойШкБезКС + КонтрольныйСимволEAN(ВесовойШкБезКС, 13);
		Исключение 
		КонецПопытки;
	КонецЕсли;

	ЗаписатьЭлементXML(ЗаписьXML, "Barcode", ЧистаяСтрока(лШтрихкод));
	
	BarcodeGS1 = Barcode;
	
	Если ЗначениеЗаполнено(СтруктураParams.GS1) Тогда
		// Barcode //[GS1_DMX]0104640057550637218HqXAdnjKK+Sb~d029910064~d02992IglIfyWPu4avVkl7Mm3+JLQ9JXgipBP9UCYHZeA3gdDF4VRvQ7Q1vUtrrmpfsPfF10f8SQbGSW41S39XxEoJeA==
		// GS1 //(01)04640057550637(21)8HqXAdnjKK+Sb(91)0064(92)IglIfyWPu4avVkl7Mm3+JLQ9JXgipBP9UCYHZeA3gdDF4VRvQ7Q1vUtrrmpfsPfF10f8SQbGSW41S39XxEoJeA==
		
		BarcodeGS1 = СтрЗаменить(BarcodeGS1, "[GS1_EAN]", "");
		BarcodeGS1 = СтрЗаменить(BarcodeGS1, "[GS1_DMX]", "");
	КонецЕсли;
	
	ЗаписатьЭлементXML(ЗаписьXML, "BarcodeGS1", BarcodeGS1);
	
	ЗапросШК = Новый Запрос;
	ЗапросШК.УстановитьПараметр("Номенклатура", лТовар);
	ЗапросШК.УстановитьПараметр("Штрихкод", лШтрихкод);
	
	ЗапросШК.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1) КАК КФ,
	|	Штрихкоды.Упаковка.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Номенклатура = &Номенклатура
	|	И Штрихкоды.Штрихкод = &Штрихкод";
	
	Выборка = ЗапросШк.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		лMeasure = Выборка.Наименование;
		лKf = Выборка.КФ;
	Иначе
		лMeasure = лТовар.ЕдиницаИзмерения.Наименование;
		лKf = 1;				
	КонецЕсли;
	
	ЗаписатьЭлементXML(ЗаписьXML, "Measure", ЧистаяСтрока(лMeasure));
	ЗаписатьЭлементXML(ЗаписьXML, "Kf", ЧистаяСтрока(лKf));
	
	ТекущаяЦена = ПолучитьЦенуТовара(лТовар, лХарактеристика, УзелПО.ТипЦен);	
	ЗаписатьЭлементXML(ЗаписьXML, "Price", ЧистаяСтрока(ТекущаяЦена));
	
	// Штрихкод для проверки ценников
	// b,2000000052663,price,0100250,50
	Если ТекущаяЦена < 0 Тогда
		ТекущаяЦена = 0;
	КонецЕсли;
	
	ТекущаяЦенаРубли = Формат(Цел(ТекущаяЦена), "ЧЦ=7; ЧН=0000000; ЧВН=; ЧГ=");
	ТекущаяЦенаКопейки = Формат((ТекущаяЦена - ТекущаяЦенаРубли)*100, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=");
	ТекущийBarcode = лШтрихкод;
	
	Если СтрДлина(ТекущийBarcode) > 13 Тогда
		ТекущийBarcode = Лев(ТекущийBarcode, 13);
	ИначеЕсли СтрДлина(ТекущийBarcode) < 13 Тогда
		ТекущийBarcode = ДобавитьЛидирующиеНули(ТекущийBarcode, 13);
	КонецЕсли;
	
	ЗаписатьЭлементXML(ЗаписьXML, "CheckBarcode", ЧистаяСтрока("b," + ТекущийBarcode + ",price," + ТекущаяЦенаРубли + "," + ТекущаяЦенаКопейки)); 		
	
	Атрибуты = ПолучитьАтрибуты(УзелПО);
	
	Для сч = 1 По 10 Цикл
		ИмяАтрибута = Атрибуты["ИмяАтрибута" + сч];
		
		Попытка
			ЗначениеАтрибута = ПолучитьЗначениеАтрибута(лТовар, ИмяАтрибута);
		Исключение
			ЗначениеАтрибута = "";
		КонецПопытки;	

		ЗаписатьЭлементXML(ЗаписьXML, "Attr" + сч, ЧистаяСтрока(ЗначениеАтрибута));
	КонецЦикла;
	
	ЗаписатьЭлементXML(ЗаписьXML, "QtyInt", ЧистаяСтрока(СтруктураParams.QtyInt));
	ЗаписатьЭлементXML(ЗаписьXML, "QtyFrac", ЧистаяСтрока(СтруктураParams.QtyFrac));
	ЗаписатьЭлементXML(ЗаписьXML, "ArtSN", ЧистаяСтрока(СтруктураParams.snValues));
	ЗаписатьЭлементXML(ЗаписьXML, "MeasureName", ЧистаяСтрока(СтруктураParams.MeasureName));
		
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Head
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Detail");		
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Detail
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Footer");
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Footer
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // PrintData
	
	Если Не УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ЗаписьXML.Закрыть();
	Иначе
		СтрокаДляЗапроса = ЗаписьXML.Закрыть();
		ОтправитьДанныеНаПринтсервер(УзелПО,СтрокаДляЗапроса);
	КонецЕсли;
	
КонецПроцедуры
Функция ДобавитьЛидирующиеНули(Строка,НужнаяДлина)
	
	СтрокаБезНулей = Строка;
	Пока СтрДлина(СтрокаБезНулей) < НужнаяДлина Цикл
		СтрокаБезНулей = "0" + СтрокаБезНулей;	
	КонецЦикла;	
	
	Возврат СтрокаБезНулей; 
	
КонецФункции	
Процедура ВыполнитьПечатьКодовМаркировкиОбувь(УзелПО, лТовар, лХарактеристика, Barcode, Count, СтруктураParams)
	
	Попытка КоличествоКМ = Число(СтруктураParams.QtyInt); Исключение КоличествоКМ = 1; КонецПопытки;
	
	КоличествоКопийКаждогоКМ = Count;
	МассивСвободныхКодовМаркировки = ДатаМобайл_Маркировка.ПолучитьСвободныеКодыМаркировки(КоличествоКМ, лТовар, лХарактеристика);
	
	Если МассивСвободныхКодовМаркировки.Количество() = 0 Тогда
		ВызватьИсключениеВС("SendArtToPrint. Не найдены свободные коды маркировки для " + лТовар.Наименование);
	ИначеЕсли МассивСвободныхКодовМаркировки.Количество() < КоличествоКМ Тогда
		ВызватьИсключениеВС("SendArtToPrint. Не хватает " + Строка(КоличествоКМ - МассивСвободныхКодовМаркировки.Количество()) + " свободных кодов маркировки для " + лТовар.Наименование);	
	КонецЕсли;
	
	ПорядковыйНомер = 0;
	
	Для каждого СвободныйКодМаркировки Из МассивСвободныхКодовМаркировки Цикл
		
		ПорядковыйНомер = ПорядковыйНомер + 1;					
		ЗаполнитьИЗакрытьФайлПечатиСвободногоКодаМаркировки(УзелПО, лТовар, лХарактеристика, Barcode, СвободныйКодМаркировки, ПорядковыйНомер, КоличествоКопийКаждогоКМ);
		ДатаМобайл_Маркировка.УстановитьДатуПечатиДляКМ(СвободныйКодМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры
Процедура ЗаполнитьИЗакрытьФайлПечатиСвободногоКодаМаркировки(УзелПО, лТовар, лХарактеристика, Barcode, СвободныйКодМаркировки, ПорядковыйНомер, КоличествоКопийКаждогоКМ)
	
	КаталогСохранения = УзелПО.КаталогВыгрузкиФайлаПечати;

	СтруктураПоиска = Новый Структура("ТипОперации", "Печать этикетки маркировка");
	СтрокиРеквизитов = УзелПО.Печать.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиРеквизитов.Количество() = 0 Тогда
		ВызватьИсключениеВС("SendArtToPrint. В обработке АРМ для терминала не указан шаблон печати этикеток маркированного товара. ");
	КонецЕсли;
	
	ИзвлеченныйКодМаркировки = ДатаМобайл_Маркировка.Base64ВШтрихкод(СвободныйКодМаркировки.ПолныйКод);

	ЗаписьXML = Новый ЗаписьXML;	
	
	Если Не УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ИмяФайла = ПолучитьНовоеИмяФайла(ПорядковыйНомер);
		Попытка
			ЗаписьXML.ОткрытьФайл(КаталогСохранения+ИмяФайла+".xml", "UTF-8");
		Исключение
			ВызватьИсключениеВС("SendArtToPrint. Не удалось сохранить файл печати в каталоге: "+КаталогСохранения+" по причине: " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;	

	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("PrintData");
	
	ЗаписатьЭлементXML(ЗаписьXML, "PrinterName", СтрокиРеквизитов[0].ИмяПринтера);
	ЗаписатьЭлементXML(ЗаписьXML, "TemplateName", СтрокиРеквизитов[0].ИмяШаблона);
	
	КоличествоКопийКаждогоКМ = ?(СтрокиРеквизитов[0].КоличествоКопий = 0, КоличествоКопийКаждогоКМ, СтрокиРеквизитов[0].КоличествоКопий*КоличествоКопийКаждогоКМ); 
	ЗаписатьЭлементXML(ЗаписьXML, "Count", КоличествоКопийКаждогоКМ);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Head");
	
	КодМаркировкиДляПечати = СтрЗаменить(ИзвлеченныйКодМаркировки, Символ(29), "~d029");
	КодМаркировкиДляПечати = "~d029" + КодМаркировкиДляПечати;
	КодМаркировкиБезFNC = СтрЗаменить(ИзвлеченныйКодМаркировки, Символ(29), "");
	
	ЗаписатьЭлементXML(ЗаписьXML, "ArtName", ЧистаяСтрока(лТовар.Наименование));
	ЗаписатьЭлементXML(ЗаписьXML, "Barcode", ЧистаяСтрока(Barcode));
	ЗаписатьЭлементXML(ЗаписьXML, "DmxBarcodePrint", КодМаркировкиДляПечати);
	ЗаписатьЭлементXML(ЗаписьXML, "DmxBarcode", КодМаркировкиБезFNC);
	ЗаписатьЭлементXML(ЗаписьXML, "GTIN", Сред(ИзвлеченныйКодМаркировки, 3, 14));
	ЗаписатьЭлементXML(ЗаписьXML, "SN", Сред(ИзвлеченныйКодМаркировки, 19, 13));
	
	ТекущаяЦена = ПолучитьЦенуТовара(лТовар, лХарактеристика, УзелПО.ТипЦен);	
	ЗаписатьЭлементXML(ЗаписьXML, "Price", ЧистаяСтрока(ТекущаяЦена));					
	
	Атрибуты = ПолучитьАтрибуты(УзелПО);
	
	Для сч = 1 По 10 Цикл
		
		ИмяАтрибута = Атрибуты["ИмяАтрибута" + сч];
		
		Попытка	
			ЗначениеАтрибута = ПолучитьЗначениеАтрибута(лТовар, ИмяАтрибута);
		Исключение
			ЗначениеАтрибута = "";
		КонецПопытки;
		
		ЗаписатьЭлементXML(ЗаписьXML, "Attr" + сч, ЧистаяСтрока(ЗначениеАтрибута));
		
	КонецЦикла;
				
	ЗаписьXML.ЗаписатьКонецЭлемента();//Head
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Detail");
	ЗаписьXML.ЗаписатьКонецЭлемента();//Detail
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Footer");
	ЗаписьXML.ЗаписатьКонецЭлемента();//Footer
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//PrintData
	
	Если Не УзелПО.ОнлайнСвязьСПринтсервером Тогда
		ЗаписьXML.Закрыть();
	Иначе
		СтрокаДляЗапроса = ЗаписьXML.Закрыть();
		ОтправитьДанныеНаПринтсервер(УзелПО,СтрокаДляЗапроса);
	КонецЕсли;	
	
	СтруктураТовара = Новый Структура("Номенклатура, Характеристика", лТовар, лХарактеристика);
	Шаблон = Справочники.ДатаМобайл_ШаблоныДокументов.ПустаяСсылка();
	ДатаМобайл_Маркировка.ПолучитьСправочникСсылкаМарка(Сред(ИзвлеченныйКодМаркировки, 1, 31), 31, "", "", Истина, СтруктураТовара,Шаблон);
	
КонецПроцедуры
Функция ПолучитьЗначениеАтрибута(лТовар, ИмяАтрибута)
	
	Если ИмяАтрибута <> "" 
		И ИмяАтрибута <> "!!! Ячейки !!!"
		И ИмяАтрибута <> "!!! Основная ячейка !!!" 
		И ИмяАтрибута <> "!!! Дополнительные ячейки !!!"
		И ИмяАтрибута <> "!!! Характеристики !!!"  Тогда
		
		Если Лев(ИмяАтрибута, 3) = "ДР_" Тогда 
			Попытка ЗначениеАтрибута = ПолучитьДополнительныйРеквизитАтрибута(лТовар, ИмяАтрибута); Исключение КонецПопытки;
		Иначе 
			ЗначениеАтрибута = ЧистаяСтрока(лТовар[ИмяАтрибута]);
		КонецЕсли;	
		
	Иначе 
		ЗначениеАтрибута = "";
	КонецЕсли;
	
	Возврат ЗначениеАтрибута;
	
КонецФункции // ()
Функция ПолучитьНовоеИмяФайла(ПорядковыйНомер=0)
	
	ИмяФайла = СтрЗаменить(ТекущаяДата(),":","");
	ИмяФайла = СтрЗаменить(ИмяФайла, ".","");
	ИмяФайла = СтрЗаменить(ИмяФайла, " ","");
	ИмяФайла = СтрЗаменить(ИмяФайла, "/","");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\","");
	
	Генератор = Новый ГенераторСлучайныхЧисел(1);
	ИдентификаторФайла = Генератор.СлучайноеЧисло(1, 1000);
	
	ИмяФайла = ИмяФайла + ИдентификаторФайла + ПорядковыйНомер;
	
	Возврат ИмяФайла;
	
КонецФункции // ()
Процедура ЗаписатьЭлементXML(ЗаписьXML, ИмяЭлемента, ТекстЭлемента)
	
	Попытка 
		ТекстЭлементаНаПечть = Строка(ТекстЭлемента);
	Исключение
		ТекстЭлементаНаПечть = "";
	КонецПопытки;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ЗаписьXML.ЗаписатьТекст(ТекстЭлементаНаПечть);
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры
Процедура ОтправитьДанныеНаПринтсервер(УзелПО, СтрокаДляЗапроса);

	АдресПринтсервера = УзелПО.АдресПринтсервера;
	ПортПринтсервера = УзелПО.ПортПринтсервера;
	
	Соединение = Новый HTTPСоединение(АдресПринтсервера,ПортПринтсервера,,,,1,);
	
	РесурсНаСервере = "/printFile/";
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/xml");
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаДляЗапроса,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	ЕстьОшибка = Ложь;
	
	Попытка 
		Результат = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ЕстьОшибка = Истина;
		ТекстОшибки = "SendArtToPrint. Ошибка онлайн соединения c сервером печати, проверьте настройки.";
	КонецПопытки;
	
	Соединение = Неопределено;
	
	Если ЕстьОшибка Тогда
		ВызватьИсключениеВС(ТекстОшибки);
	Иначе
		ТекстСообщения  = "" + Результат.КодСостояния +  " " + Результат.ПолучитьТелоКакСтроку();
		Если СтрНайти(Результат.ПолучитьТелоКакСтроку(),"File Uploaded")>0 Тогда
			// Успешная отправка данных
		Иначе
			ЕстьОшибка = Истина;
			ТекстОшибки = "SendArtToPrint. Ошибка отправки данных на печать: "+ТекстСообщения + ", проверьте настройки.";
			ВызватьИсключениеВС(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//ОБЩИЕ ФУНКЦИИ
#Область ВспомогательныеПродедурыИФункции
Функция ПолучитьСтруктуруСтрокиДокумента (ИмяТаблицы, УзелПО, СсылкаНаДок, СтрокаДокумента, UserName, ВызовИзWriteDoc = Ложь)
	
	Шаблон = СсылкаНаДок.Шаблон;
	ИспользоватьМаркировку 	= Шаблон.ИспользоватьМаркировку;
	ИспользоватьЕГАИС 		= Шаблон.ЕГАИС;
	ЗаписыватьПолныйКМ 		= Шаблон.МаркировкаЗаписыватьПолныйКМ;
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ДокументТСД", СсылкаНаДок);
	СтруктураСтроки.Вставить("ИмяТаблицы", ИмяТаблицы);	
	СтруктураСтроки.Вставить("ИдентификаторСтроки", Число(СтрокаДокумента.DMRowID));
	СтруктураСтроки.Вставить("Штрихкод",СтрокаДокумента.DMBarcode);
	СтруктураСтроки.Вставить("Уникальность", Новый УникальныйИдентификатор());	
	СтруктураСтроки.Вставить("Ячейка", СтрокаДокумента.DMCell);
	СтруктураСтроки.Вставить("КодТовара", СтрокаДокумента.DMArtID);
	СтруктураСтроки.Вставить("НазваниеТовара", СтрокаДокумента.DMArtName);
	СтруктураСтроки.Вставить("Количество", СтрокаДокумента.DMQuant);
	
	Если СтруктураСтроки.Количество > 0 Тогда 
		СтруктураСтроки.Вставить("КоличествоМест", 1);
	ИначеЕсли СтруктураСтроки.Количество < 0 Тогда 
		СтруктураСтроки.Вставить("КоличествоМест", -1);
	Иначе
		СтруктураСтроки.Вставить("КоличествоМест", 0);
	КонецЕсли;	
	
	СтруктураСтроки.Вставить("Пользователь", UserName);
	СтруктураСтроки.Вставить("ТСД", УзелПО);
	СтруктураСтроки.Вставить("Дата", СтрокаДокумента.DMDate);	
	
	ТекущаяЯчейкаСсылка = ДатаМобайл_ОбщийМодуль.ПолучитьЯчейкуПоКодуИлиШтрихкоду(СтрокаДокумента.DMCell,СсылкаНаДок);
	СтруктураСтроки.Вставить("ЯчейкаСсылка", ТекущаяЯчейкаСсылка);
	СтруктураСтроки.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Попытка
		Если Лев(СтрокаДокумента.DMArtID,3) = "8U-" Тогда
			СтруктураСтроки.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(СтрокаДокумента.DMArtID,4,36)));
			ИДХК = Сред(СтрокаДокумента.DMArtID,40,36);
			
			Если ИДХК <> "00000000-0000-0000-0000-000000000000" Тогда
				СтруктураСтроки.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХК));
			КонецЕсли;	
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СокрЛП(СтруктураСтроки.НазваниеТовара)) Тогда
			ВключатьАртикул=УзелПО.ДобавлятьАртикулВНаименование;
			
			СтруктураСтроки.НазваниеТовара = ?(ВключатьАртикул,СтруктураСтроки.Номенклатура.Артикул + " ","")
			+ СтруктураСтроки.Номенклатура.Наименование + " " 
			+ СтруктураСтроки.ХарактеристикаНоменклатуры.Наименование; 
		КонецЕсли;		
	Исключение	
	КонецПопытки; 
	
	СтруктураСтроки.Вставить("ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураСтроки.Вставить("КоэффициентЕдиницы", 1);
	СтруктураСтроки.Вставить("СерияСсылка", Справочники.СерииНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("СерийныйНомер", ДатаМобайл_Маркировка.ОбработатьЭкранированиеСтроки(СтрокаДокумента.DMSN, Ложь));
	ЭтоКодМаркировки = Ложь;
	
	// Переменные Params
	СтруктураParams = Новый Структура;
	СтруктураParams.Вставить("KM_GTIN","");
	СтруктураParams.Вставить("KM_SN","");
	СтруктураParams.Вставить("KM_Barcode","");
	СтруктураParams.Вставить("KM_RawBarcode","");		
	СтруктураParams.Вставить("KM_DecodedMrc","");
	СтруктураParams.Вставить("KM_RawMrc","");	
	СтруктураParams.Вставить("KM_TNVED","");
	СтруктураParams.Вставить("GS1","");
	СтруктураParams.Вставить("packAttrs","");
	СтруктураParams.Вставить("qty_in_pack",0);
	
	Попытка ПрочитатьВсеВходящиеПараметрыИзJSON(СтрокаДокумента.Params, СтруктураParams); Исключение КонецПопытки;
	
	// МАРКИРОВКА
	Если ИспользоватьМаркировку Тогда
		
		СтруктураСтроки.Вставить("ЦРПТМарка", СтруктураParams.KM_Barcode);
		
		Если СтруктураСтроки.ЦРПТМарка = "" Тогда
			СтруктураСтроки.ЦРПТМарка = СтруктураParams.KM_RawBarcode;	
		КонецЕсли;	       
		
		Если СтруктураСтроки.ЦРПТМарка = "" Тогда
			СтруктураСтроки.ЦРПТМарка = ДатаМобайл_Маркировка.ОбработатьЭкранированиеСтроки(СтрокаДокумента.DMPDFBarcode);
		КонецЕсли;
		
		СтруктураСтроки.Вставить("ЦРПТМарка_Длина", СтрДлина(СтруктураСтроки.ЦРПТМарка));	
		СтруктураСтроки.Вставить("Короб", ЧистаяСтрока(СтрокаДокумента.DMBoxPackID));
		
		Если ЗначениеЗаполнено(СтруктураParams.KM_SN) И Шаблон.ИсточникСерии = 2 Тогда
			ЭтоКодМаркировки = Истина;
			СтруктураСтроки.Вставить("СерийныйНомер", СтруктураParams.KM_SN);
		КонецЕсли;	
		
		СтруктураСтроки.Вставить("KM_GTIN", СтруктураParams.KM_GTIN);
		СтруктураСтроки.Вставить("KM_RawMrc", СтруктураParams.KM_RawMrc);
		СтруктураСтроки.Вставить("KM_DecodedMrc", СтруктураParams.KM_DecodedMrc);
		СтруктураСтроки.Вставить("GS1", СтруктураParams.GS1);
		СтруктураСтроки.Вставить("KM_TNVED", СтруктураParams.KM_TNVED);
		
		Попытка СтруктураСтроки.Вставить("КоличествоВУпаковке", Число(СтруктураParams.qty_in_pack)); Исключение СтруктураСтроки.Вставить("КоличествоВУпаковке", 0); КонецПопытки;
		
		Если ЗначениеЗаполнено(СтруктураСтроки.Номенклатура) Тогда
			ПараметрыТовара = Новый Структура("Номенклатура, Характеристика", СтруктураСтроки.Номенклатура, СтруктураСтроки.ХарактеристикаНоменклатуры);
		Иначе
			ПараметрыТовара = Неопределено;
		КонецЕсли;				
	
		Если ЗначениеЗаполнено(СтруктураСтроки.ЦРПТМарка) И (Не ВызовИзWriteDoc Или Шаблон.ИспользованиеУпаковочныхЛистовПодбор = 4 Или Не ДатаМобайл_Маркировка.ТребуетсяСпецОбработка(СсылкаНаДок)) Тогда
			Если Шаблон.ИспользованиеУпаковочныхЛистовПодбор = 4 Тогда //короба в палеты
				СтруктураСтроки.Вставить("КМСсылка", ДатаМобайл_Маркировка.ПолучитьСправочникСсылкаУпаковка(СтруктураСтроки.ЦРПТМарка, Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден, ПараметрыТовара));	
			Иначе //обычные документы маркировки
				СтруктураСтроки.Вставить("КМСсылка", ДатаМобайл_Маркировка.ПолучитьСправочникСсылкаМарка(СтруктураСтроки.ЦРПТМарка, СтруктураСтроки.ЦРПТМарка_Длина, СтруктураСтроки.KM_RawMrc, СтруктураСтроки.KM_TNVED, Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден, ПараметрыТовара, Шаблон));
			КонецЕсли;
		Иначе
			СтруктураСтроки.Вставить("КМСсылка", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());	
		КонецЕсли;
		
		//Получим данные по номенклатуре И характеристике Из упаковки (Если это формирование палеты)
		Если Не ЗначениеЗаполнено(СтруктураСтроки.Номенклатура) И ЗначениеЗаполнено(СтруктураСтроки.КМСсылка) Тогда		
			СтруктураСтроки.Вставить("Номенклатура", СтруктураСтроки.КМСсылка.Номенклатура);
			СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", СтруктураСтроки.КМСсылка.Характеристика);
			ПараметрыТовара = Новый Структура("Номенклатура, Характеристика", СтруктураСтроки.Номенклатура, СтруктураСтроки.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		ТекущийКороб =  СтрокаДокумента.DMBoxPackID;
		ТекущийКороб = ДатаМобайл_Маркировка.ОбработатьЭкранированиеСтроки(ТекущийКороб);
		
		Если СтрДлина(ТекущийКороб) = 20 И Лев(ТекущийКороб, 2) = "00" Тогда		
			ТекущийКороб = "(00)" + Сред(ТекущийКороб, 3, 18);
		ИначеЕсли СтрДлина(ТекущийКороб) = 18 Тогда		
			ТекущийКороб = "(00)" + Сред(ТекущийКороб, 1, 18);		
		КонецЕсли;
		
		ТекущийУпаковочныйЛист = СтрокаДокумента.DMPackID;		
		ТекущийУпаковочныйЛист = ДатаМобайл_Маркировка.ОбработатьЭкранированиеСтроки(ТекущийУпаковочныйЛист);
		
		Если СтрДлина(ТекущийУпаковочныйЛист) = 20 И Лев(ТекущийУпаковочныйЛист,2) = "00" Тогда		
			ТекущийУпаковочныйЛист = "(00)" +  Сред(ТекущийУпаковочныйЛист,3,18);
		ИначеЕсли СтрДлина(ТекущийУпаковочныйЛист) = 18 Тогда		
			ТекущийУпаковочныйЛист = "(00)" +  Сред(ТекущийУпаковочныйЛист,1,18);	
		КонецЕсли;

		// Если это не агрегация, то паковочный лист может быть пустым, используем тогда короб
		Если ТекущийУпаковочныйЛист = "" И ТекущийКороб <> "" Тогда
			ТекущийУпаковочныйЛист = ТекущийКороб;
			ТекущийКороб = "";	
		КонецЕсли;
				
		Если ТекущийКороб <> "" Тогда
			СтруктураСтроки.Вставить("КоробСсылка", ДатаМобайл_Маркировка.ПолучитьСправочникСсылкаУпаковка(ТекущийКороб, Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден, ПараметрыТовара));
		Иначе
			СтруктураСтроки.Вставить("КоробСсылка", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
		КонецЕсли;
		
		СтруктураСтроки.Вставить("Короб", ТекущийКороб);		
		
		Если ТекущийУпаковочныйЛист <> "" Тогда
			СтруктураСтроки.Вставить("УпаковочныйЛистСсылка", ДатаМобайл_Маркировка.ПолучитьСправочникСсылкаУпаковка(ТекущийУпаковочныйЛист, Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден, ПараметрыТовара));
		Иначе
			СтруктураСтроки.Вставить("УпаковочныйЛистСсылка", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
		КонецЕсли;
		
		СтруктураСтроки.Вставить("УпаковочныйЛист", ТекущийУпаковочныйЛист);
		СтруктураСтроки.Вставить("УпаковочныйЛистАтрибуты", СтруктураParams.packAttrs);
		
		Если ЗаписыватьПолныйКМ Тогда
			ПолныйКодМаркировки = СтруктураParams.GS1;
			СтруктураСтроки.Вставить("ПолныйКодМаркировки", ПолныйКодМаркировки);
		Иначе
			// Не сохранять криптохвосты в GS1
			Если (СтруктураСтроки.ЦРПТМарка_Длина = 31 // Обувь И прочее
				Или СтруктураСтроки.ЦРПТМарка_Длина = 25 // Блок табака
				Или СтруктураСтроки.ЦРПТМарка_Длина = 21 // Пачка табака
				Или СтруктураСтроки.ЦРПТМарка_Длина = 38 // Фото
				Или СтруктураСтроки.ЦРПТМарка_Длина = 24 Или СтруктураСтроки.ЦРПТМарка_Длина = 32) // Молочка
				Тогда
				СтруктураСтроки.GS1	= "";
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураСтроки.Штрихкод = "" Тогда	
			СтруктураСтроки.Штрихкод = УдалитьЛидирующиеНули(СтруктураParams.KM_GTIN);	
		КонецЕсли;	
				
	Иначе		
		ТекущийУпаковочныйЛист =  СтрокаДокумента.DMPackID;	
		//СимволРазделителяУпаковочныйЛист = Найти(СтрокаДокумента.DMPackID,"/");
		//Если СимволРазделителяУпаковочныйЛист>0 Тогда 
		//	ТекущийУпаковочныйЛист = Лев(ТекущийУпаковочныйЛист,СимволРазделителяУпаковочныйЛист-1);
		//КонецЕсли;
		
		Если ТекущийУпаковочныйЛист = "0" Тогда
			ТекущийУпаковочныйЛист = "";
		КонецЕсли;	
		
		СтруктураСтроки.Вставить("УпаковочныйЛист", ТекущийУпаковочныйЛист);
		СтруктураСтроки.Вставить("Короб", СтрокаДокумента.DMBoxPackID);
		
		СтруктураСтроки.Вставить("УпаковочныйЛистАтрибуты", СтруктураParams.packAttrs);

	КонецЕсли;
	
	УстановитьЕдиницу(СтруктураСтроки);
	
	// ЕГАИС
	Если ИспользоватьЕГАИС Тогда
		
		СтруктураСтроки.Вставить("КодТовара", СтрокаДокумента.DMArtEgaisID);
		
		Если Не ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
			ИмяСправочникаНоменклатурыЕГАИС = "КлассификаторАлкогольнойПродукцииЕГАИС";
		Иначе
			ИмяСправочникаНоменклатурыЕГАИС = "астНоменклатураЕГАИС";
		КонецЕсли;		
		
		СтруктураСтроки.Вставить("НоменклатураЕГАИС", Справочники[ИмяСправочникаНоменклатурыЕГАИС].ПустаяСсылка());	
				
		Попытка
			СтруктураСтроки.НоменклатураЕГАИС = Справочники[ИмяСправочникаНоменклатурыЕГАИС].ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(СтрокаДокумента.DMArtEgaisID,4,36)));
		Исключение
			СтруктураСтроки.НоменклатураЕГАИС = Справочники[ИмяСправочникаНоменклатурыЕГАИС].НайтиПоКоду(СокрЛП(СтрокаДокумента.DMDecodedPDFBarcode));
		КонецПопытки;
		
		СтруктураСтроки.Вставить("PDF", СтрокаДокумента.DMDecodedPDFBarcode);		
		
		Если СтрокаДокумента.DMDateBottling <> "" И СтрокаДокумента.DMDateBottling <> "1/1/00 12:00:00 AM" И СтрокаДокумента.DMDateBottling <> "01.01.00 12:00:00 AM" И СтрокаДокумента.DMDateBottling <> "010100" Тогда    			
			ДатаРозливаГод = Строка(Строка("20") + Строка(Сред(СтрокаДокумента.DMDateBottling, 5, 2)));
			ДатаРозливаМесяц = Сред(СтрокаДокумента.DMDateBottling, 3, 2);
			ДатаРозливаДень = ЛЕВ(СтрокаДокумента.DMDateBottling, 2);
			ДатаРозлива = Дата(Число(ДатаРозливаГод), Число(ДатаРозливаМесяц), Число(ДатаРозливаДень));
			СтруктураСтроки.Вставить("ЕгаисДатаРозлива", ДатаРозлива);
		КонецЕсли; 
		
		СтруктураСтроки.Вставить("ЕгаисМарка", ЧистаяСтрока(СтрокаДокумента.DMDataMatrixBarcode));
		СтруктураСтроки.Вставить("ЕгаисПолныйКод", ЧистаяСтрока(СтрокаДокумента.DMPDFBarcode));
		
		//Определение данных по марке
		Если Не ДатаМобайл_ОбщийМодуль.ЕстьАСТ() И ЗначениеЗаполнено(СтруктураСтроки.ЕгаисПолныйКод) И Не Шаблон.СопоставлениеЕГАИС Тогда			
			ДатаМобайл_ОбщийМодуль.ПолучитьНоменклатуруПоМарке(СтруктураСтроки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураСтроки.Номенклатура) И ЗначениеЗаполнено(СтруктураСтроки.НоменклатураЕГАИС) Тогда
			СтруктураСтроки.Номенклатура = ДатаМобайл_ОбщийМодуль.ПолучитьНоменклатуруПоЕГАИС(СтруктураСтроки.НоменклатураЕГАИС);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураСтроки.НоменклатураЕГАИС) И ЗначениеЗаполнено(СтруктураСтроки.Номенклатура) Тогда
			СтруктураСтроки.НоменклатураЕГАИС = ДатаМобайл_ОбщийМодуль.ПолучитьЕГАИСПоНоменклатуре(СтруктураСтроки.Номенклатура);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.DMBoxPackID) И Не ЗначениеЗаполнено(СтрокаДокумента.DMPackID) Тогда
			СтруктураСтроки.УпаковочныйЛист = СтрокаДокумента.DMBoxPackID;
			СтруктураСтроки.Короб = "";
		КонецЕсли;
		
		//Сопоставление
		Если Шаблон.СопоставлениеЕГАИС Тогда
			
			Если СтруктураСтроки.НоменклатураЕГАИС.Пустая() Тогда
			ИначеЕсли СтруктураСтроки.Номенклатура.Пустая() Тогда
			Иначе		
				
				ЗапросСопоставления = Новый Запрос;
				ЗапросСопоставления.УстановитьПараметр("Номенклатура", СтруктураСтроки.Номенклатура);
				ЗапросСопоставления.УстановитьПараметр("ЕГАИС_Номенклатура", СтруктураСтроки.НоменклатураЕГАИС);
				
				ЗапросСопоставления.Текст = "ВЫБРАТЬ
				|	ИСТИНА КАК Сопоставлен
				|ИЗ
				|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК ЕГАИС_СоответствиеНоменклатуры
				|ГДЕ
				|	ЕГАИС_СоответствиеНоменклатуры.АлкогольнаяПродукция = &ЕГАИС_Номенклатура
				|	И ЕГАИС_СоответствиеНоменклатуры.Номенклатура = &Номенклатура";
				
				Если ЗапросСопоставления.Выполнить().Пустой() Тогда
					
					МенеджерЗаписиЕГАИС = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
					МенеджерЗаписиЕГАИС.АлкогольнаяПродукция = СтруктураСтроки.НоменклатураЕГАИС;
					МенеджерЗаписиЕГАИС.Номенклатура = СтруктураСтроки.Номенклатура;
					МенеджерЗаписиЕГАИС.Записать();													
					
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//СЕРИИ
	Попытка ОпределитьСериюВСтрокеДокумента(Шаблон, СтруктураСтроки, ЭтоКодМаркировки, УзелПО); Исключение КонецПопытки;
	
	Возврат СтруктураСтроки;
	
КонецФункции
Процедура ОпределитьСериюВСтрокеДокумента(Шаблон, СтруктураСтроки, ЭтоКодМаркировки, УзелПО)

	ИмяТаблицы  = СтруктураСтроки.ИмяТаблицы;
	ТоварПоиска = СтруктураСтроки.Номенклатура;	
	СтрокаСерии = СокрЛП(СтруктураСтроки.СерийныйНомер);
	
	// СтруктураСтроки.СерияСсылка - будет определена в данной функции
	
	// ПОИСК СЕРИИ	
	Если ЗначениеЗаполнено(ТоварПоиска.ВладелецСерий) Тогда
		ВидНоменклатурыПоиск = ТоварПоиска.ВладелецСерий;
	Иначе
		ВидНоменклатурыПоиск = ТоварПоиска.ВидНоменклатуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСерии) И ВидНоменклатурыПоиск.ИспользоватьСерии Тогда
		
		// ДАННЫЕ ДЛЯ ПОИСКА СЕРИИ		
		
		ДатаПроизводства11 = Дата(1,1,1);
		ДатаОкончанияСрокаГодности17 = Дата(1,1,1);
		НомерСерии = "";
		
		РазобратьСтрокуСерииПоSNTypes(СтрокаСерии,ДатаПроизводства11,ДатаОкончанияСрокаГодности17,НомерСерии,ТоварПоиска,УзелПО.СерииРассчитыватьГоденДо);
		
		ЗапросСерий = Новый Запрос;                 
		ЗапросСерий.Текст =  "ВЫБРАТЬ
		|	СерииНоменклатуры.Ссылка КАК Серия
		| ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		| ГДЕ
		|	(СерииНоменклатуры.Номер = &Номер И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства И СерииНоменклатуры.ГоденДо = &ГоденДо)
		|	И СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатурыПоиск
		|	И НЕ СерииНоменклатуры.ПометкаУдаления";
		
		
		ЗапросСерий.УстановитьПараметр("ГоденДо",ДатаОкончанияСрокаГодности17);
		ЗапросСерий.УстановитьПараметр("Номер",НомерСерии);
		ЗапросСерий.УстановитьПараметр("ДатаПроизводства",ДатаПроизводства11);		
		ЗапросСерий.УстановитьПараметр("ВидНоменклатурыПоиск",ВидНоменклатурыПоиск); 
		
		РезультатСерий = ЗапросСерий.Выполнить();
		
		Если РезультатСерий.Пустой() Тогда
			
			// СОЗДАНИЕ СЕРИИ
			Если Шаблон.СоздаватьСерииЕслиНеНайдены Тогда				
				НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НоваяСерия.ВидНоменклатуры = ВидНоменклатурыПоиск;
				
				НоваяСерия.Номер = НомерСерии;
				НоваяСерия.ДатаПроизводства = ДатаПроизводства11;
				НоваяСерия.ГоденДо = ДатаОкончанияСрокаГодности17;
				
				НоваяСерия.Записать();
				СтруктураСтроки.СерияСсылка = НоваяСерия.Ссылка;
			КонецЕсли;
			
		Иначе 
			ВыборкаСерий = РезультатСерий.Выгрузить();
			
			Для каждого Стр Из ВыборкаСерий Цикл
				СтруктураСтроки.СерияСсылка = Стр.Серия;
				Прервать;
			КонецЦикла; 
		КонецЕсли;	
		
		// СЕРИИ МАРКИРОВКА
		Если Шаблон.ИспользоватьМаркировку Тогда 
			КМСсылка = СтруктураСтроки.КМСсылка;
			
			Если ЗначениеЗаполнено(СтруктураСтроки.СерияСсылка) И ЗначениеЗаполнено(КМСсылка) Тогда		
				Если Не ЗначениеЗаполнено(КМСсылка.Серия) Тогда
					КМОбъект = КМСсылка.ПолучитьОбъект();
					КМОбъект.Серия = СтруктураСтроки.СерияСсылка;
					КМОбъект.Записать();
				КонецЕсли;	
			ИначеЕсли Не ЗначениеЗаполнено(СтруктураСтроки.СерияСсылка) И ЗначениеЗаполнено(КМСсылка) Тогда	
				Если ЗначениеЗаполнено(КМСсылка.Серия) Тогда
					СтруктураСтроки.СерияСсылка = КМСсылка.Серия;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВызватьИсключениеВС(ТекстИсключения)
	
	ВызватьИсключение("<WSERRSTART>" + ТекстИсключения + "<WSERREND>"); 
	
КонецФункции
Функция ЧистаяСтрока(Знач ГрязнаяСтрока)
	
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, "'", "-");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, Символы.ВК, " ");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, Символы.ПС, "-");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, Символы.НПП, " ");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, ";", "");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, """", "''");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, "%", "");
	//ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, "&", "");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, "<", "[");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, ">", "]"); 
	ГрязнаяСтрока = СокрЛП(ГрязнаяСтрока);
	
	Модуль_ОбщегоНазначенияКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	ГрязнаяСтрока = Модуль_ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ГрязнаяСтрока, "");	
	
	Возврат Грязнаястрока; 
	
КонецФункции
Функция ПолучитьФорматнуюСтрокуЧисла()
	
	Возврат "ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=0"; 
	
КонецФункции
Функция СобратьТовары(СписокТоваров, УзелПО, СписокХарактеристик = Неопределено, Шаблон = Неопределено)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtList"));
	
	ТипЦен = УзелПО.ТипЦен;
	ВключатьАртикул = УзелПО.ДобавлятьАртикулВНаименование; 
	ВсеХарактеристикиПоШтрихкоду = УзелПО.ВыводитьВсеХарактеристикиПоШтрихкоду;
	УчитыватьОстаткиПоРегиструСвободныеОстатки = УзелПО.УчитыватьОстаткиПоРегиструСвободныеОстатки;
	
	Если ВсеХарактеристикиПоШтрихкоду Тогда
		СписокХарактеристик = Неопределено;
	КонецЕсли;
	
	ЗапросТоваров = Новый Запрос();
	
	ЗапросТоваров.УстановитьПараметр("Товар",СписокТоваров);
	ЗапросТоваров.УстановитьПараметр("ВсеТовары",Ложь);	
	Если СписокТоваров.Количество() = 0 Тогда
		ЗапросТоваров.УстановитьПараметр("ВсеТовары",Истина);
	КонецЕсли;
	
	Если СписокХарактеристик = Неопределено Тогда
		ЗапросТоваров.УстановитьПараметр("ВсеХарактеристики", Истина);
		ЗапросТоваров.УстановитьПараметр("Характеристики", СписокХарактеристик);
	Иначе	
		ЗапросТоваров.УстановитьПараметр("Характеристики", СписокХарактеристик);
		ЗапросТоваров.УстановитьПараметр("ВсеХарактеристики", Ложь);
		Если СписокТоваров.Количество() = 0 Тогда
			ЗапросТоваров.УстановитьПараметр("ВсеХарактеристики", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ЗапросТоваров.УстановитьПараметр("КаталогиТовара", УзелПО.ДоступныеГруппыТоваров.ВыгрузитьКолонку("Номенклатура"));
	ЗапросТоваров.УстановитьПараметр("ВсеКаталоги",Ложь);	
	Если УзелПО.ДоступныеГруппыТоваров.Количество() = 0 Тогда
		ЗапросТоваров.УстановитьПараметр("ВсеКаталоги", Истина);
	КонецЕсли;
	
	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
	ЗапросТоваров.УстановитьПараметр("Склады", СписокСкладов);
	ЗапросТоваров.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
	
	СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	ЗапросТоваров.УстановитьПараметр("Помещения", СписокПомещений);
	ЗапросТоваров.УстановитьПараметр("ВсеПомещения", СписокПомещений.Количество() = 0);
	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// ВЫБОРКА ССЫЛОК ТОВАРОВ И ХАРАКТЕРИСТИК ПО РАЗНЫМ УСЛОВИЯМ ВЕДЕНИЯ ХАРАКТЕРИСТИК
	// БЕЗ ХАРАКТЕРИСТИК
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВесМожноУказыватьВДокументах КАК Весовой,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка) КАК Характеристика
	|ПОМЕСТИТЬ СписокТоваровОбщий
	|ИЗ
	| 	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И (ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка) В (&Характеристики) ИЛИ &ВсеХарактеристики)
	|	И (Номенклатура.Ссылка В (&Товар) ИЛИ &ВсеТовары)
	|	И (Номенклатура.Ссылка В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	// ИНДИВИДУАЛЬНЫЕ ХАРАКТЕРИСТИКИ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВесМожноУказыватьВДокументах КАК Весовой,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	| 	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|			И (ХарактеристикиНоменклатуры.Ссылка В (&Характеристики) ИЛИ &ВсеХарактеристики)
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	//|	И НЕ Номенклатура.ПометкаУдаления
	|	И (Номенклатура.Ссылка В (&Товар) ИЛИ &ВсеТовары)
	|	И (Номенклатура.Ссылка В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	// ОБЩИЕ ХАРАКТЕРИСТИКИ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВесМожноУказыватьВДокументах,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|			И (ХарактеристикиНоменклатуры.Ссылка В (&Характеристики) ИЛИ &ВсеХарактеристики)
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	//|	И НЕ Номенклатура.ПометкаУдаления
	|	И (Номенклатура.Ссылка В (&Товар)ИЛИ &ВсеТовары)
	|	И (Номенклатура.Ссылка В ИЕРАРХИИ (&КаталогиТовара)ИЛИ &ВсеКаталоги)
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL   
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	// ОБЩИЕ С ДРУГИМ ВИДОМ ХАРАКТЕРИСТИКИ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВесМожноУказыватьВДокументах,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВладелецХарактеристик
	|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|			И (ХарактеристикиНоменклатуры.Ссылка В (&Характеристики) ИЛИ &ВсеХарактеристики)
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	//|	И НЕ Номенклатура.ПометкаУдаления
	|	И (Номенклатура.Ссылка В (&Товар) ИЛИ &ВсеТовары)
	|	И (Номенклатура.Ссылка В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL	
	|	
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыСОстатками1С
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(&ВсеСклады ИЛИ Склад В (&Склады)) 
	|				И 1=1
	|				И (Номенклатура.Ссылка В (&Товар) ИЛИ &ВсеТовары)
	|				И (Номенклатура.Ссылка В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|	) КАК СвободныеОстаткиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстаткиОстатки.Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика
	|;
	//|////////////////////////////////////////////////////////////////////////////////
	//|// список ячеек
	//|
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	Ячейки.Номенклатура,
	//|	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
	//|ПОМЕСТИТЬ СписокЯчеек
	//|ИЗ
	//|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
	//|СГРУППИРОВАТЬ ПО
	//|	Ячейки.Номенклатура
	//|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// ВЫБОРКА ЦЕН И ДОПОЛНИТЕЛЬНЫХ ДАННЫХ ПО ТОВАРАМ
	|	СписокТоваровОбщий.Номенклатура,
	|	СписокТоваровОбщий.Весовой,
	|	СписокТоваровОбщий.Характеристика,
	|	ЛОЖЬ КАК ЭтоНовыйТовар,
	|	ВЫБОР
	|		КОГДА СписокТоваровОбщий.Номенклатура.ПометкаУдаления ИЛИ СписокТоваровОбщий.Характеристика.ПометкаУдаления	             
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить,
	|	ВЫБОР
	|		КОГДА &ВключатьАртикул
	|			ТОГДА ВЫБОР КОГДА СписокТоваровОбщий.Номенклатура.Артикул = """" ТОГДА """" ИНАЧЕ СписокТоваровОбщий.Номенклатура.Артикул + "" "" КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ + СписокТоваровОбщий.Номенклатура.Наименование + "" "" + ЕстьNULL(СписокТоваровОбщий.Характеристика.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ВЫБОР
	|				КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель
	|			КОНЕЦ КАК ЧИСЛО(19, 2)), 0) КАК Цена,
	|	ЕСТЬNULL(СписокТоваровОбщий.Номенклатура.ВидНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии,
	//|  СписокЯчеек.АдресХранения
	|	ЕСТЬNULL(ТоварыСОстатками1С.ВНаличии, 0) КАК ВНаличии,
	|	ЕСТЬNULL(ТоварыСОстатками1С.ВРезерве, 0) КАК ВРезерве		 
	|ПОМЕСТИТЬ СписокТоваров
	|ИЗ
	|	СписокТоваровОбщий КАК СписокТоваровОбщий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = СписокТоваровОбщий.Номенклатура 
	|				И ЦеныНоменклатурыСрезПоследних.Характеристика = СписокТоваровОбщий.Характеристика 
	//|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
	//|			ПО СписокТоваровОбщий.Номенклатура = СписокЯчеек.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
	|			ПО ТоварыСОстатками1С.Номенклатура = СписокТоваровОбщий.Номенклатура
	|				И ТоварыСОстатками1С.Характеристика = СписокТоваровОбщий.Характеристика 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДатаМобайл_НовыеТоварыИзменения.Ссылка,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка),
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА ДатаМобайл_НовыеТоварыИзменения.Ссылка.ПометкаУдаления	             
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДатаМобайл_НовыеТоварыИзменения.Ссылка.Наименование,
	|	0,
	|  ЛОЖЬ,
	//|	""""
	|	0,
	|	0
	|ИЗ
	|	Справочник.ДатаМобайл_НовыеТовары.Изменения КАК ДатаМобайл_НовыеТоварыИзменения
	|ГДЕ
	|	ДатаМобайл_НовыеТоварыИзменения.Узел = &Узел
	|	И (ДатаМобайл_НовыеТоварыИзменения.Ссылка В (&Товар) ИЛИ ДатаМобайл_НовыеТоварыИзменения.Ссылка.Номенклатура В (&Товар) ИЛИ &ВсеТовары)
	|	И НЕ ДатаМобайл_НовыеТоварыИзменения.НомерСообщения ЕСТЬ NULL 
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|  ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// ВЫБОРКА ШТРИХКОДОВ
	|	ВЫРАЗИТЬ(ШтрихкодыНоменклатуры.Штрихкод КАК СТРОКА(60)) КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель,1) =0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         ВЫБОР КОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Знаменатель,1) КОНЕЦ, 1) КАК КФ,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Наименование, ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения.Наименование) КАК ЕИ
	|ПОМЕСТИТЬ СписокШтрихкодов
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	(ШтрихкодыНоменклатуры.Номенклатура В ИЕРАРХИИ  (&Товар) ИЛИ &ВсеТовары)
	|	И (ШтрихкодыНоменклатуры.Номенклатура В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ДатаМобайл_НовыеШтрихкоды.ШтрихКод КАК Строка(60)),
	|	ДатаМобайл_НовыеШтрихкоды.Номенклатура,
	|	ДатаМобайл_НовыеШтрихкоды.Характеристика,
	|	ДатаМобайл_НовыеШтрихкоды.Коэффициент,
	|	ДатаМобайл_НовыеШтрихкоды.Наименование
	|ИЗ
	|	РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
	|ГДЕ
	|	(ДатаМобайл_НовыеШтрихкоды.Номенклатура В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
	|	И (ДатаМобайл_НовыеШтрихкоды.Номенклатура В ИЕРАРХИИ (&КаталогиТовара) ИЛИ &ВсеКаталоги)
	|	И ДатаМобайл_НовыеШтрихкоды.Номенклатура ССЫЛКА Справочник.Номенклатура
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// СОЕДИНЕНИЕ ТАБЛИЦ ТОВАРОВ И ШТРИХКОДОВ
	|	СписокТоваров.Номенклатура,
	|	СписокТоваров.Весовой,
	|	СписокТоваров.Характеристика,
	|	СписокТоваров.ЭтоНовыйТовар,
	|	СписокТоваров.Удалить,
	|	СписокТоваров.Наименование,
	|	СписокТоваров.Цена,
	|	СписокТоваров.ИспользоватьСерии,
	//|  СписокТоваров.АдресХранения,
	|  СписокТоваров.ВНаличии,
	|  СписокТоваров.ВРезерве,
	|	ЕСТЬNULL(СписокШтрихкодов.Штрихкод,"""") КАК Штрихкод,
	|	ЕСТЬNULL(СписокШтрихкодов.КФ, 1) КАК КФ,
	|  ЕСТЬNULL(СписокШтрихкодов.ЕИ,""шт."") КАК  ЕИ
	|ИЗ
	|	СписокТоваров КАК СписокТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокШтрихкодов КАК СписокШтрихкодов
	|			ПО СписокШтрихкодов.Номенклатура = СписокТоваров.Номенклатура 
	|				И СписокШтрихкодов.Характеристика = СписокТоваров.Характеристика 
	|ИТОГИ ПО 
	|   СписокТоваров.Номенклатура, СписокТоваров.Характеристика
	|   
	|;
	| УНИЧТОЖИТЬ  СписокТоваровОбщий
	|;
	| УНИЧТОЖИТЬ  СписокТоваров
	|;
	| УНИЧТОЖИТЬ  СписокШтрихкодов
	//|;
	//| УНИЧТОЖИТЬ  СписокЯчеек
	|";
	
	ЗапросТоваров.Текст = ТекстЗапроса;
	лТипНеопределеннойДлины = Тип("Строка");
	
	Если ВсеХарактеристикиПоШтрихкоду Тогда		
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст,"И СписокШтрихкодов.Характеристика = СписокТоваров.Характеристика","");
	КонецЕсли;
	
	Если УчитыватьОстаткиПоРегиструСвободныеОстатки Тогда
		Если ДатаМобайл_ОбщийМодуль.ЕстьРегистрНакопления("СвободныеОстатки") Тогда
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "ТоварыНаСкладах", "СвободныеОстатки");
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "КОтгрузкеОстаток", "ВРезервеСоСкладаОстаток");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "1=1", "(&ВсеПомещения ИЛИ Помещение В (&Помещения))");
		КонецЕсли;
	Иначе
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "1=1", "(&ВсеПомещения ИЛИ Помещение В (&Помещения))");
	КонецЕсли;	
	
	ЗапросТоваров.УстановитьПараметр("Узел",УзелПО);
	ЗапросТоваров.УстановитьПараметр("ТипЦен",ТипЦен);
	ЗапросТоваров.УстановитьПараметр("ВключатьАртикул",ВключатьАртикул);
	ЗапросТоваров.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Товары = ЗапросТоваров.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Пока Товары.Следующий() Цикл
		СтрХарактеристика = Товары.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока СтрХарактеристика.Следующий() Цикл
		СтрТовара = СтрХарактеристика.Выбрать();
		НомСтр = 0;
		
		Пока СтрТовара.Следующий() Цикл
			Если НомСтр = 0 Тогда
				
				ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt"));

				ЭтоАлкоголь = Ложь;
				
				Попытка 
					Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда
					Если СтрТовара.Номенклатура.АлкогольнаяПродукция Тогда // Проверим наличие сопоставленной номенклатуры И организации
						КодЕГАИС = "";
						ЭтоАлкоголь = Истина;
						Товар = СтрТовара.НаименованиеТовара;
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
						|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
						|ИЗ
						|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
						|ГДЕ
						|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура";
						Запрос.УстановитьПараметр("Номенклатура", СтрТовара.Номенклатура);
						ТаблицаСоответствий = Запрос.Выполнить().Выбрать();
						
						Если ТаблицаСоответствий.Количество() = 1 Тогда
							Пока ТаблицаСоответствий.Следующий() Цикл
								Товар = ТаблицаСоответствий.АлкогольнаяПродукция.Наименование;
								КодЕГАИС = ТаблицаСоответствий.АлкогольнаяПродукция.Код; 
								Прервать;
							КонецЦикла;		
						КонецЕсли;
						ОбъектТовара.DMArtName = Лев(ЧистаяСтрока(Товар), 150);					
					Иначе
						ОбъектТовара.DMArtName = Лев(ЧистаяСтрока(СтрТовара.Наименование), 150);
					КонецЕсли;
					Иначе
						ОбъектТовара.DMArtName = Лев(ЧистаяСтрока(СтрТовара.Наименование), 150);
					КонецЕсли;
				Исключение
					ОбъектТовара.DMArtName = Лев(ЧистаяСтрока(СтрТовара.Наименование), 150);
				КонецПопытки;
				
				ОбъектТовара.DMArtID = ?(СтрТовара.ЭтоНовыйТовар, "8n-" + СокрЛП(СтрТовара.Номенклатура.УникальныйИдентификатор()), "8U-" + СокрЛП(СтрТовара.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СтрТовара.Характеристика.УникальныйИдентификатор()));	
				ОбъектТовара.DMArtPrice = СтрТовара.Цена;
				ОбъектТовара.DMisMark = СтрТовара.Удалить;
				
				DMUseSN = СтрТовара.ИспользоватьСерии;
				ОбъектТовара.DMUseSN = DMUseSN;
				
				ОбъектТовара.Params = СформироватьЗаголовкиJSONParamsТовара(СтрТовара.Номенклатура, DMUseSN, Шаблон, УзелПО);

				Если СтрТовара.Весовой Тогда	
					ОбъектТовара.DMMeasureType = 1;
					ОбъектТовара.DMWeightTask = ПолучитьДопускВесовогоТовара(СтрТовара.Номенклатура);				
				КонецЕсли;
				
				ОбъектТовара.DMMarkType = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрТовара.Номенклатура);

				Атрибуты = ПолучитьАтрибуты(УзелПО); 			
				Для сч = 1 По 10 Цикл	
					Попытка
						ИмяАтрибута = Атрибуты["ИмяАтрибута" + сч];
						
						Если СтрТовара.ЭтоНовыйТовар Тогда
							ОбъектТовара["DMArtAttr" + сч] = "";
						ИначеЕсли ИмяАтрибута = "!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
							//ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(СтрТовара.АдресХранения);
							ОбъектТовара["DMArtAttr" + сч] = ПолучитьСправочныеЯчейкиТовара(УзелПО,СтрТовара.Номенклатура,ИмяАтрибута);
						ИначеЕсли ИмяАтрибута = "!!! Характеристики !!!" Тогда
							ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(СтрТовара.Характеристика.Наименование);
						ИначеЕсли ЛЕВ(ИмяАтрибута,3) = "ДР_" Тогда 
							Попытка ОбъектТовара["DMArtAttr" + сч] = ПолучитьДополнительныйРеквизитАтрибута(СтрТовара.Номенклатура, ИмяАтрибута); Исключение КонецПопытки;	
						ИначеЕсли ЭтоАлкоголь И (сч = 6 Или сч = 9) Тогда
							Если сч = 6 Тогда 
								ОбъектТовара["DMArtAttr" + сч] = Строка(КодЕГАИС);
							ИначеЕсли сч = 9 И ИмяАтрибута <> "" Тогда
								Попытка
									ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(СтрТовара.Номенклатура[ИмяАтрибута].Код + " " + СтрТовара.Номенклатура[ИмяАтрибута].Наименование);
								Исключение
									ОбъектТовара["DMArtAttr" + сч] = "";
								КонецПопытки;
							Иначе 
								ОбъектТовара["DMArtAttr" + сч] = "";
							КонецЕсли;		
						ИначеЕсли ИмяАтрибута <> "" Тогда
							ОбъектТовара["DMArtAttr" + сч] = ЧистаяСтрока(СтрТовара.Номенклатура[ИмяАтрибута]);
						Иначе 
							ОбъектТовара["DMArtAttr" + сч] = "";
						КонецЕсли;
					Исключение
						ОбъектТовара["DMArtAttr" + сч] = "";
					КонецПопытки;
					
				КонецЦикла;
				
			ЭтоУслуга = Ложь;
			Попытка 
				Если СтрТовара.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЭтоУслуга = Истина;
			 	КонецЕсли;
			Исключение
			КонецПопытки;

				Если УзелПО.НеОтображатьОстатки Тогда
					ОбъектТовара.DMRest = 0;
				ИначеЕсли ЭтоУслуга Тогда
					ОбъектТовара.DMRest = 999;	
				Иначе
					Итог = (СтрТовара.ВНаличии-СтрТовара.ВРезерве);
					Итог = Формат(Итог, ПолучитьФорматнуюСтрокуЧисла());
					ОбъектТовара.DMRest = Итог;
				КонецЕсли;

				
				Если ОбъектТовара.DMArtName = "" И СтрТовара.ЭтоНовыйТовар Тогда
					ОбъектТовара.DMArtName = "УдалитьНовыйТовар";
					ОбъектТовара.DMisMark = Истина;
				КонецЕсли;	
				
			КонецЕсли;

			НомСтр = НомСтр + 1;
			
			Если УзелПО.ИспользоватьАртикулКакШтрихкодТовара И ТипЗнч(СтрТовара.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				Штрихкод = СтрТовара.Номенклатура.Артикул;
			Иначе
				Штрихкод = СтрТовара.ШтрихКод;
			КонецЕсли;
			
			Если Не Штрихкод = "" Тогда
				ОбъектШК = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode"));				
				
				Если СтрДлина(ШтрихКод) = 13 // EAN13
				И Лев(ШтрихКод, 1) = "2" // Внутренний штрихкод
				И Сред(ШтрихКод, 2, 1) = "_" Тогда // Найден префикс весового товара
					Штрихкод = Сред(ШтрихКод, 3, 5);
					ОбъектШК.DMBarcode = ЧистаяСтрока(Штрихкод);
				Иначе	
					ОбъектШК.DMBarcode = ЧистаяСтрока(ШтрихКод);
				КонецЕсли;	
				ОбъектШК.DMMeasureName = ЧистаяСтрока(СтрТовара.ЕИ);
				
				Если УзелПО.НеИспользоватьПересчетУпаковок Тогда
					ОбъектШК.DMMeasureK = 1;
				Иначе	
					ОбъектШК.DMMeasureK = СтрТовара.КФ;
				КонецЕсли;

				ОбъектШК.DMisMark = СтрТовара.Удалить;
				ОбъектШК.DMUseSN = 2;
				ОбъектТовара.DMBarcodeList.Добавить(ОбъектШК);
			КонецЕсли;			
		КонецЦикла;
		
		Если ОбъектТовара.DMArtName = "" Или ОбъектТовара.DMArtID = "" Тогда
			Продолжить;
		КонецЕсли;

		ОбъектСписка.DMArt.Добавить(ОбъектТовара);
	КонецЦикла;
	КонецЦикла;

	Возврат ОбъектСписка;

КонецФункции
Функция ПолучитьСправочныеЯчейкиТовара(УзелПО, Номенклатура, ИмяАтрибута)
	
	СтрокаЯчеек = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ячейки.Ячейка.Наименование КАК АдресХранения,
	|	ВЫБОР КОГДА Ячейки.ОсновнаяЯчейка ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ЯчейкиСПриоритетом	
	|ИЗ
	|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
	|ГДЕ
	|	Ячейки.Номенклатура=&Номенклатура 
	|	И (&ВсеСклады ИЛИ Ячейки.Склад В (&Склады))
	|	И (&ВсеПомещения ИЛИ Ячейки.Помещение В (&Помещения))
	|	И 1=1
	|;
	|ВЫБРАТЬ
	|	ЯчейкиСПриоритетом.АдресХранения КАК АдресХранения,
	|	ЯчейкиСПриоритетом.Приоритет КАК Приоритет
	|ИЗ
	|	ЯчейкиСПриоритетом КАК ЯчейкиСПриоритетом
	|УПОРЯДОЧИТЬ ПО 
	|	ЯчейкиСПриоритетом.Приоритет УБЫВ,
	|	ЯчейкиСПриоритетом.АдресХранения ВОЗР");
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		
	Если ИмяАтрибута = "!!! Основная ячейка !!!" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "Ячейки.ОсновнаяЯчейка");
	ИначеЕсли ИмяАтрибута = "!!! Дополнительные ячейки !!!" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "НЕ Ячейки.ОсновнаяЯчейка");	
	КонецЕсли;
	
	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
	Запрос.УстановитьПараметр("Склады", СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
	
	СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения", СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", СписокПомещений.Количество() = 0);

	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		Если СтрокаЯчеек = "" Тогда
			СтрокаЯчеек = СтрокаЯчеек + Рез.АдресХранения;
		Иначе	
			СтрокаЯчеек =  СтрокаЯчеек + ", " + Рез.АдресХранения;
		КонецЕсли;	
	КонецЦикла;	

	Возврат СтрокаЯчеек;

КонецФункции
Функция УстановитьЕдиницу(СтрокаТЧ)
	
	Если СтрокаТЧ.Штрихкод <> "" Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		//|	ВЫБОР
		//|		КОГДА Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)
		//|			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения
		//|		ИНАЧЕ Штрихкоды.Упаковка
		//|	КОНЕЦ КАК ЕИ,
		|	Штрихкоды.Упаковка КАК ЕИ,
		|	Штрихкоды.Номенклатура,
		|	Штрихкоды.Характеристика
		|ПОМЕСТИТЬ тШтрихкоды
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &код
		|	И (&ВсяНоменклатура
		|			ИЛИ Штрихкоды.Номенклатура = &Номенклатура)
		//|	И (&ВсеХарактеристики
		//|			ИЛИ Штрихкоды.Характеристика = &Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тШтрихкоды.ЕИ,
		|	тШтрихкоды.Номенклатура,
		|	тШтрихкоды.Характеристика
		|ИЗ
		|	тШтрихкоды КАК тШтрихкоды");
		
		Запрос.УстановитьПараметр("Код", СтрокаТЧ.Штрихкод);
		Запрос.УстановитьПараметр("Номенклатура", СтрокаТЧ.Номенклатура);
		Запрос.УстановитьПараметр("ВсяНоменклатура", СтрокаТЧ.Номенклатура.Пустая());
		Рез = Запрос.Выполнить().Выгрузить();
		
		Если Рез.Количество() > 0 Тогда
			СтрокаТЧ.ЕдиницаИзмерения = Рез[0].ЕИ;
			Если СтрокаТЧ.Номенклатура.Пустая() Тогда
				СтрокаТЧ.Номенклатура = Рез[0].Номенклатура;
			КонецЕсли;	
			Если СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая() Тогда
				СтрокаТЧ.ХарактеристикаНоменклатуры = Рез[0].Характеристика;
			КонецЕсли;	
		КонецЕсли;	
		
		Коэффициент = ?(СтрокаТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрокаТЧ.ЕдиницаИзмерения.Числитель)/?(СтрокаТЧ.ЕдиницаИзмерения.Знаменатель = 0, 1, СтрокаТЧ.ЕдиницаИзмерения.Знаменатель);
		
		Пересчет = Ложь;
		
		// Пересчет единиц мерных товаров, учет которых ведется в штуках
		Попытка
			Если 
				Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения)
				И СтрокаТЧ.Номенклатура.ВесИспользовать 
				И Не СтрокаТЧ.Номенклатура.ВесЕдиницаИзмерения.Пустая()
				И СтрокаТЧ.Номенклатура.ВесЧислитель <> 0 
				И СтрокаТЧ.ТСД.ПересчитыватьКоличество
				И СтрДлина(СтрокаТЧ.Штрихкод) = 5  // только весовые, может не всем подойти, надо закомментировать Тогда
				И СтрокаТЧ.ЕдиницаИзмерения.Пустая() Тогда
				
				Коэффициент = СтрокаТЧ.Номенклатура.ВесЧислитель;
				Пересчет = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
		ВесЕдиницаИзмерения = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ВесЕдиницаИзмерения");
		
		Попытка
			Если СтрокаТЧ.ТСД.НеИспользоватьПересчетУпаковок Тогда
				СтрокаТЧ.Количество = СтрокаТЧ.Количество;
			Иначе
				СтрокаТЧ.Количество = ?(Пересчет, СтрокаТЧ.Количество/ВесЕдиницаИзмерения.Числитель/Коэффициент, СтрокаТЧ.Количество/Коэффициент);			
			КонецЕсли;
			СтрокаТЧ.КоэффициентЕдиницы = Коэффициент;
		Исключение
			СтрокаТЧ.Количество = СтрокаТЧ.Количество;
			СтрокаТЧ.КоэффициентЕдиницы = 1;
		КонецПопытки;
		
	КонецЕсли;

КонецФункции	
Функция ПолучитьАтрибуты(УзелПО)
	
	СтруктураАтрибутов = Новый Структура;
	СтруктураАтрибутов.Вставить("ИмяАтрибута1", УзелПО.ИмяАтрибута1);
	СтруктураАтрибутов.Вставить("ИмяАтрибута2", УзелПО.ИмяАтрибута2);
	СтруктураАтрибутов.Вставить("ИмяАтрибута3", УзелПО.ИмяАтрибута3);
	СтруктураАтрибутов.Вставить("ИмяАтрибута4", УзелПО.ИмяАтрибута4);
	СтруктураАтрибутов.Вставить("ИмяАтрибута5", УзелПО.ИмяАтрибута5);
	СтруктураАтрибутов.Вставить("ИмяАтрибута6", УзелПО.ИмяАтрибута6);
	СтруктураАтрибутов.Вставить("ИмяАтрибута7", УзелПО.ИмяАтрибута7);
	СтруктураАтрибутов.Вставить("ИмяАтрибута8", УзелПО.ИмяАтрибута8);
	СтруктураАтрибутов.Вставить("ИмяАтрибута9", УзелПО.ИмяАтрибута9);
	СтруктураАтрибутов.Вставить("ИмяАтрибута10", УзелПО.ИмяАтрибута10);
	
	Возврат СтруктураАтрибутов;	
	
КонецФункции
Функция ПолучитьДополнительныйРеквизитАтрибута(Номенклатура, НаименованиеСвойства)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ 
	
	|ВЫБОР 
	|	КОГДА 
	|		ВЫРАЗИТЬ(ЕСТЬNULL(СправочникНоменклатураДополнительныеРеквизиты.Значение.Наименование,"""") КАК СТРОКА (100)) = """" 
	|	ТОГДА 
	|		СправочникНоменклатураДополнительныеРеквизиты.Значение 
	|	ИНАЧЕ
	|   	ВЫРАЗИТЬ(СправочникНоменклатураДополнительныеРеквизиты.Значение.Наименование КАК СТРОКА (100)) 
	|КОНЕЦ КАК Значение
	|ИЗ
	|Справочник.Номенклатура.ДополнительныеРеквизиты КАК СправочникНоменклатураДополнительныеРеквизиты
	|ГДЕ 
	|СправочникНоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
	|И СправочникНоменклатураДополнительныеРеквизиты.Свойство.Заголовок = &НаименованиеСвойства";
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("НаименованиеСвойства",СтрЗаменить(НаименованиеСвойства,"ДР_",""));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ЧистаяСтрока(Выборка.Значение);
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции
Функция ПолучитьДопускВесовогоТовара(Номенклатура, Партнер = Неопределено)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатаМобайл_ДопускиВесовыхТоваров.ПроцентДопуска КАК ПроцентДопуска,
	|	ДатаМобайл_ДопускиВесовыхТоваров.Партнер.Наименование
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ДопускиВесовыхТоваров КАК ДатаМобайл_ДопускиВесовыхТоваров
	|ГДЕ
	|	ДатаМобайл_ДопускиВесовыхТоваров.Номенклатура = &Номенклатура
	|	И ДатаМобайл_ДопускиВесовыхТоваров.Партнер = &Партнер
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДатаМобайл_ДопускиВесовыхТоваров.ПроцентДопуска КАК ПроцентДопуска,
	|	ДатаМобайл_ДопускиВесовыхТоваров.Партнер.Наименование
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ДопускиВесовыхТоваров КАК ДатаМобайл_ДопускиВесовыхТоваров
	|ГДЕ
	|	ДатаМобайл_ДопускиВесовыхТоваров.Номенклатура = &Номенклатура
	|	И ДатаМобайл_ДопускиВесовыхТоваров.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО 
	|	ДатаМобайл_ДопускиВесовыхТоваров.Партнер.Наименование УБЫВ";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Если Партнер = Неопределено Тогда
		Запрос.УстановитьПараметр("Партнер", Справочники.Партнеры.ПустаяСсылка());
	Иначе	
		Запрос.УстановитьПараметр("Партнер", Партнер);
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПроцентДопуска*0.01;
	Иначе
		Возврат 0;
	КонецЕсли;	
	
КонецФункции	
Функция ПолучитьДопускОСГ(Номенклатура, Партнер = Неопределено)
	
	ДопускОСГ = Неопределено;
	
	Попытка 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДатаМобайл_ДопускиОСГ_Ном.Допуск КАК Допуск
		|ПОИЕСТИТЬ ТаблицаДопуски	
		|ИЗ
		|	РегистрСведений.ДатаМобайл_ДопускиОСГ КАК ДатаМобайл_ДопускиОСГ_Ном
		|ГДЕ
		|	ДатаМобайл_ДопускиОСГ_Ном.НоменклатураВидНоменклатуры = &Номенклатура 
		|	И ДатаМобайл_ДопускиОСГ_Ном.Партнер = &Партнер
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	2 КАК Приоритет,
		|	ДатаМобайл_ДопускиОСГ_Вид.Допуск КАК Допуск
		|ИЗ
		|	РегистрСведений.ДатаМобайл_ДопускиОСГ КАК ДатаМобайл_ДопускиОСГ_Вид
		|ГДЕ
		|	ДатаМобайл_ДопускиОСГ_Вид.НоменклатураВидНоменклатуры = &Родитель
		|	И ДатаМобайл_ДопускиОСГ_Вид.Партнер = &Партнер
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	3 КАК Приоритет,
		|	ДатаМобайл_ДопускиОСГ_Вид.Допуск КАК Допуск
		|ИЗ
		|	РегистрСведений.ДатаМобайл_ДопускиОСГ КАК ДатаМобайл_ДопускиОСГ_Вид
		|ГДЕ
		|	ДатаМобайл_ДопускиОСГ_Вид.НоменклатураВидНоменклатуры = &ВидНоменклатуры
		|	И ДатаМобайл_ДопускиОСГ_Вид.Партнер = &Партнер
		|;
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаДопуски.Допуск КАК Допуск
		|ИЗ
		|	ТаблицаДопуски КАК ТаблицаДопуски
		|УПОРЯДОЧИТЬ ПО 
		|	ТаблицаДопуски.Приоритет ВОЗР";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Родитель", Номенклатура.Родитель);
		Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
		
		Если Партнер = Неопределено Тогда //допуск для товара
			Запрос.УстановитьПараметр("Партнер", Справочники.Партнеры.ПустаяСсылка());	
		ИначеЕсли ЗначениеЗаполнено(Партнер) Тогда //допуск для документа
			Запрос.УстановитьПараметр("Партнер", Партнер);
		Иначе
			Запрос.УстановитьПараметр("Партнер", Неопределено);
		КонецЕсли;	
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДопускОСГ = Выборка.Допуск;
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
	Возврат ДопускОСГ;
	
КонецФункции	
Функция ПолучитьКоличествоМест(СсылкаДокумента, СтрокаДока)
	
	КоличествоМест = Неопределено;
	
	Попытка
		Если СсылкаДокумента.Шаблон.ГрупповаяРабота Или СсылкаДокумента.Шаблон.РаспределениеТоваров = 2 Тогда
		Иначе	
			Если ЗначениеЗаполнено(СтрокаДока) Тогда
				Если СтрокаДока.Номенклатура.ДопУчетВШт Тогда
					КоличествоМест = СтрокаДока.КоличествоМест;		
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат КоличествоМест;	
	
КонецФункции	

Функция СерияНеПодходит(УзелПО, СсылкаНаДок, СтрокаДокумента, ШаблонПроверкиСерии)
	
	ВведеннаяСерия = СтрокаДокумента.DMSN;
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Попытка Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(СтрокаДокумента.DMArtID, 4, 36))); Исключение	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатаМобайл_ПроверкаСерий.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ПроверкаСерий.ШаблонСерии КАК ШаблонСерии,
	|	ИСТИНА КАК ЕстьШаблон
	|ПОМЕСТИТЬ ШаблонПроверки
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ПроверкаСерий КАК ДатаМобайл_ПроверкаСерий
	|ГДЕ
	|	ДатаМобайл_ПроверкаСерий.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблонПроверки.Номенклатура КАК Номенклатура,
	|	ШаблонПроверки.ШаблонСерии КАК ШаблонСерии,
	|	ШаблонПроверки.ЕстьШаблон КАК ЕстьШаблон,
	|	ВЫБОР
	|		КОГДА &ВведеннаяСерия ПОДОБНО ШаблонПроверки.ШаблонСерии
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ШаблонПодходит
	|ИЗ
	|	ШаблонПроверки КАК ШаблонПроверки";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВведеннаяСерия", ВведеннаяСерия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ШаблонПроверкиСерии = Выборка.ШаблонСерии;
		
		Если Выборка.ШаблонПодходит Тогда 
			Возврат Ложь; // корректная серия по шаблону
		Иначе	
			Возврат Истина; // серия не подходит по шаблону
		КонецЕсли;
	Иначе 
		Возврат Ложь; // Не задан шаблон
	КонецЕсли;	
	
КонецФункции	
Функция ТоварСопоставленОдинКОдному(НоменклатураЕГАИС)
	
	СопоставленОдинКОдному = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕГАИС_СоответствиеНоменклатуры.Номенклатура КАК Ссылка
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК ЕГАИС_СоответствиеНоменклатуры
	|ГДЕ
	|	ЕГАИС_СоответствиеНоменклатуры.АлкогольнаяПродукция = &ЕГАИСНоменклатура";
	Запрос.УстановитьПараметр("ЕГАИСНоменклатура", НоменклатураЕГАИС);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Количество() = 1 Тогда
		СопоставленОдинКОдному = Истина;	
	КонецЕсли;
	
	Возврат СопоставленОдинКОдному;
	
КонецФункции
Функция ЧисловойКодПоСсылке(Ссылка)
	
	ШестнадчатиричноеЧисло = СтрЗаменить(Строка(Ссылка.УникальныйИдентификатор()),"-","");
	Возврат ПреобразоватьИзШестнадцатиричнойСистемыСчисленияВДесятичноеЧисло(ШестнадчатиричноеЧисло);
	
КонецФункции
Функция ПреобразоватьИзШестнадцатиричнойСистемыСчисленияВДесятичноеЧисло(Знач Значение)
	
	Значение = НРег(Значение);
	ДлинаСтроки = СтрДлина(Значение);
	
	Результат = 0;
	
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Результат = Результат * 16 + Найти("0123456789abcdef", Сред(Значение, НомерСимвола, 1)) - 1;
	КонецЦикла;
	
	Возврат Формат(Результат, "ЧГ=0");
	
КонецФункции
Функция КодНоменклатурыЕГАИСПоPDF417(PDFBarcode)
	
	Сч = 0;
	Значение = СокрЛП(PDFBarcode);
		
	Если Сред(Значение, 4, 5) = "00000" Тогда
		Значение = Сред(Значение, 9, 11);
		Сч = 11;
	Иначе
		Значение = Сред(Значение, 8, 12);
		Сч = 12;
	КонецЕсли;

	Результат = 0;

	Для Поз = 1 По Сч Цикл

		Множитель = 1;
		
		Для СчМ = 1 По Сч - Поз Цикл   
			Множитель = Множитель * 36;
		КонецЦикла;

		Результат = Результат + (Найти("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Сред(Значение, Поз, 1)) - 1) * Множитель;

	КонецЦикла;

	Возврат Формат(Результат, "ЧЦ=19; ЧВН=; ЧГ=0");
	
КонецФункции
Функция ПолучитьОстаткиПоЯчейке(УзелПО, ТекущийСклад, лТовар, лХарактеристикаНоменклатуры, ТекущаяЯчейка)
	
	ОстаткиПоЯчейке = 0;
	
	ЗапросОстатковПоЯчейке = Новый Запрос("ВЫБРАТЬ
	|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток) КАК Остаток,
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки КАК ТоварыВЯчейкахОстатки
	|ГДЕ
	|	ТоварыВЯчейкахОстатки.Номенклатура = &Номенклатура
	|	И ТоварыВЯчейкахОстатки.Характеристика = &Характеристика
	|	И ТоварыВЯчейкахОстатки.Ячейка = &Ячейка
	|СГРУППИРОВАТЬ ПО 
	|	ТоварыВЯчейкахОстатки.Упаковка");
	
	ЗапросОстатковПоЯчейке.УстановитьПараметр("Номенклатура", лТовар);
	ЗапросОстатковПоЯчейке.УстановитьПараметр("Характеристика", лХарактеристикаНоменклатуры);
	ЗапросОстатковПоЯчейке.УстановитьПараметр("Ячейка", ТекущаяЯчейка);
	
	ВыборкаОстатокПоЯчейке = ЗапросОстатковПоЯчейке.Выполнить().Выбрать();
	
	Пока ВыборкаОстатокПоЯчейке.Следующий() Цикл
		КоэффициентУпаковки = ?(ВыборкаОстатокПоЯчейке.Упаковка.Числитель = 0, 1, ВыборкаОстатокПоЯчейке.Упаковка.Числитель)/?(ВыборкаОстатокПоЯчейке.Упаковка.Знаменатель = 0, 1, ВыборкаОстатокПоЯчейке.Упаковка.Знаменатель);
		ОстаткиПоЯчейке = ОстаткиПоЯчейке + ВыборкаОстатокПоЯчейке.Остаток*КоэффициентУпаковки;
	КонецЦикла;
	
	ОстаткиПоЯчейке = Формат(ОстаткиПоЯчейке, ПолучитьФорматнуюСтрокуЧисла());
	
	Возврат ОстаткиПоЯчейке;
	
КонецФункции
Функция ПолучитьОстаткиПоТовару(УзелПО, ТекущийСклад, лТовар, лХарактеристикаНоменклатуры)
	
	ОстаткиПоТовару = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(&ВсеСклады
	|					ИЛИ Склад В (&Склады))
	|				И (&ВсеПомещения
	|					ИЛИ Помещение В (&Помещения)) И Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК СвободныеОстаткиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстаткиОстатки.Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", лТовар);
	Запрос.УстановитьПараметр("Характеристика", лХарактеристикаНоменклатуры);
	
	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
	Запрос.УстановитьПараметр("Склады", СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);
	
	СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения", СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения", СписокПомещений.Количество() = 0);
	
	ВыборкаОстаток = Запрос.Выполнить().Выбрать();	
	Пока ВыборкаОстаток.Следующий() Цикл
		ОстаткиПоТовару = ОстаткиПоТовару + ВыборкаОстаток.ВНаличии - ВыборкаОстаток.ВРезерве;
	КонецЦикла;
	
	ОстаткиПоТовару = Формат(ОстаткиПоТовару, ПолучитьФорматнуюСтрокуЧисла());
	Возврат ОстаткиПоТовару;
	
КонецФункции

Функция ПолучитьЗаданиеПоЯчейке(УзелПО, СсылкаНаДок, лТовар, лХарактеристикаНоменклатуры, ТекущаяЯчейка,Тип)
	
	ЗаданиеПоЯчейке = 0;
	
	Если Тип = "Select" Тогда
		ИмяТЧ = СсылкаНаДок.Шаблон.ИмяТабличнойЧастиПодбор;
		УчитыватьЯчеекВЗадании = СсылкаНаДок.Шаблон.УчитыватьЯчеекВЗаданииПодбор;
	Иначе 
		ИмяТЧ = СсылкаНаДок.Шаблон.ИмяТабличнойЧастиПриемка;
		УчитыватьЯчеекВЗадании = СсылкаНаДок.Шаблон.УчитыватьЯчеекВЗаданииПриемка;
	КонецЕсли;
	
	ЗапросЗадания = Новый Запрос();
	ЗапросЗадания.Текст = "ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ЗАДАНИЕ.Количество, 0)) КАК Количество
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ЗАДАНИЕ
	|ГДЕ
	| Задание.ССылка = &ИсходныйДокумент
	|	И ЗАДАНИЕ.Номенклатура = &Номенклатура
	|	И ЗАДАНИЕ.Характеристика = &ХарактеристикаНоменклатуры";
	
	ЗапросЗадания.Текст = СтрЗаменить(ЗапросЗадания.Текст, "ПриобретениеТоваровУслуг", СсылкаНаДок.Шаблон.ВидДокумента);	
	ЗапросЗадания.Текст = СтрЗаменить(ЗапросЗадания.Текст, ".Товары", "." + ИмяТЧ);
	
	ЗапросЗадания.УстановитьПараметр("ИсходныйДокумент", СсылкаНаДок.ИсходныйДокумент);				
	ЗапросЗадания.УстановитьПараметр("Номенклатура", лТовар);
	ЗапросЗадания.УстановитьПараметр("ХарактеристикаНоменклатуры", лХарактеристикаНоменклатуры);
	
	Если УчитыватьЯчеекВЗадании Тогда	
		ЗапросЗадания.Текст = ЗапросЗадания.Текст + "
		|	И ЗАДАНИЕ.Ячейка = &Ячейка";
		
		ЗапросЗадания.УстановитьПараметр("Ячейка", ТекущаяЯчейка);		
	КонецЕсли;
	
	ВыборкаЗадания = ЗапросЗадания.Выполнить().Выбрать();
	
	Пока ВыборкаЗадания.Следующий() Цикл
		ЗаданиеПоЯчейке = ЗаданиеПоЯчейке + ВыборкаЗадания.Количество;		
	КонецЦикла;
	
	Возврат ЗаданиеПоЯчейке;		
			
КонецФункции
Функция ПолучитьТаблицуУпакованныхМарок(ИдентификаторУпаковки = "")
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", ИдентификаторУпаковки);		
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеУпаковкиУровень1.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ДанныеУпаковкиУровень1
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
	|ГДЕ
	|	ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода = &ИдентификаторУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковкиУровень2.Штрихкод.ЗначениеШтрихкода КАК Марка,
	|	ДанныеУпаковкиУровень2.Ссылка КАК Короб
	|ПОМЕСТИТЬ ПереченньМарок
	|ИЗ
	|	ДанныеУпаковкиУровень1 КАК ДанныеУпаковкиУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
	|		ПО ДанныеУпаковкиУровень1.Штрихкод = ДанныеУпаковкиУровень2.Ссылка
	|ГДЕ
	|	(ДанныеУпаковкиУровень1.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|			ИЛИ ДанныеУпаковкиУровень1.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	|	И ДанныеУпаковкиУровень2.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковкиУровень1.Штрихкод.ЗначениеШтрихкода,
	|	ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|ИЗ
	|	ДанныеУпаковкиУровень1 КАК ДанныеУпаковкиУровень1
	|ГДЕ
	|	ДанныеУпаковкиУровень1.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереченньМарок.Марка КАК Марка,
	|	ПереченньМарок.Короб КАК Короб,
	|	ЕСТЬNULL(ЕГАИС_РегистрМарок.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция
	|ИЗ
	|	ПереченньМарок КАК ПереченньМарок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК ЕГАИС_РегистрМарок
	|		ПО (ЕГАИС_РегистрМарок.АкцизнаяМарка.ЗначениеШтрихкода = ПереченньМарок.Марка)"; 
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
				
КонецФункции
Функция ПроверитьЗаписи(ИмяТаблицы, УзелПО, СсылкаНаДок, СтрокаДокумента, Объект = Неопределено)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок, "Шаблон");
	Шаблон = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	
	ЗначенияРеквизитовШаблон = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,"ГрупповаяРабота,ИспользованиеУпаковочныхЛистовПодбор,БыстроеСканирование,ИспользоватьМаркировку,МаркировкаСоздаватьСправочникКМЕслиНеНайден");
	Шаблон_ГрупповаяРабота = ЗначенияРеквизитовШаблон.ГрупповаяРабота;
	Шаблон_ИспользованиеУпаковочныхЛистовПодбор = ЗначенияРеквизитовШаблон.ИспользованиеУпаковочныхЛистовПодбор;
	Шаблон_БыстроеСканирование = ЗначенияРеквизитовШаблон.БыстроеСканирование;
	Шаблон_ИспользоватьМаркировку = ЗначенияРеквизитовШаблон.ИспользоватьМаркировку;
	Шаблон_МаркировкаСоздаватьСправочникКМЕслиНеНайден = ЗначенияРеквизитовШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	
	ЗапросСтрок = Новый Запрос;
	ЗапросСтрок.УстановитьПараметр("ТСД", УзелПО);
	ЗапросСтрок.УстановитьПараметр("ДокументТСД", СсылкаНаДок);
	ЗапросСтрок.УстановитьПараметр("ИдентификаторСтроки", Число(СтрокаДокумента.DMRowID));
	ЗапросСтрок.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
	ЗапросСтрок.Текст = "ВЫБРАТЬ
	|	ИСТИНА КАК Выгружен
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_СтрокиДокументов
	|ГДЕ
	|	ДатаМобайл_СтрокиДокументов.ТСД = &ТСД
	|	И ДатаМобайл_СтрокиДокументов.ссылка = &ДокументТСД
	|	И ДатаМобайл_СтрокиДокументов.ИдентификаторСтроки = &ИдентификаторСтроки
	|	И ДатаМобайл_СтрокиДокументов.Количество > 0
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	ИСТИНА КАК Выгружен
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_СтрокиДокументов
	|ГДЕ
	|	ДатаМобайл_СтрокиДокументов.ТСД = &ТСД
	|	И ДатаМобайл_СтрокиДокументов.ДокументТСД = &ДокументТСД
	|	И ДатаМобайл_СтрокиДокументов.ИдентификаторСтроки = &ИдентификаторСтроки
	|	И ДатаМобайл_СтрокиДокументов.ИмяТаблицы = &ИмяТаблицы
	|	И ДатаМобайл_СтрокиДокументов.Количество > 0
	|";
	
	Если СтрокаДокумента.DMQuant < 0 Тогда
		ЗапросСтрок.Текст = СтрЗаменить(ЗапросСтрок.Текст, "Количество > 0", "Количество < 0");
	КонецЕсли;
	
	Если ИмяТаблицы = "Insert" Тогда
		ЗапросСтрок.Текст = СтрЗаменить(ЗапросСтрок.Текст, "Подбор", "Приемка");
	КонецЕсли;
	
	Если Не ЗапросСтрок.Выполнить().Пустой() Тогда
		//ОБНОВЛЕНИЕ ЗНАЧЕНИЙ ВВОДИМЫХ ПОСЛЕ ЗАПИСИ СТРОКИ
		Если СтрокаДокумента.DMChangedPrice > 0 
			Или (СтрокаДокумента.DMPackID <> "" И Шаблон_ИспользованиеУпаковочныхЛистовПодбор = 2) Тогда
			
			Если Шаблон_ГрупповаяРабота Или Шаблон_БыстроеСканирование Тогда
				
				НаборЗаписей = РегистрыСведений.ДатаМобайл_СтрокиГрупповыхДокументов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ТСД.Установить(УзелПО);
				НаборЗаписей.Отбор.ДокументТСД.Установить(СсылкаНаДок);
				НаборЗаписей.Отбор.ДляОбмена.Установить(Ложь);
				НаборЗаписей.Отбор.ИдентификаторСтроки.Установить(Число(СтрокаДокумента.DMRowID));
				
				НаборЗаписей.Прочитать();
				
				Для каждого СтрокаЗаписи Из НаборЗаписей Цикл 
					СтрокаЗаписи.НоваяЦена = СтрокаДокумента.DMChangedPrice;
					УстановитьУпаковочныйЛист(СтрокаЗаписи,СтрокаДокумента,Шаблон_ИспользоватьМаркировку,Шаблон_МаркировкаСоздаватьСправочникКМЕслиНеНайден);
				КонецЦикла; 
				
				НаборЗаписей.Записать();
				
			Иначе
				Если Объект <> Неопределено Тогда
					СтруктураПоиска = Новый Структура("ИдентификаторСтроки,ТСД", Число(СтрокаДокумента.DMRowID), УзелПО);
					
					Если ИмяТаблицы = "Insert" Тогда
						СтрокиПодбора = Объект.СобранныеДанныеПриемка.НайтиСтроки(СтруктураПоиска);
					Иначе	
						СтрокиПодбора = Объект.СобранныеДанныеПодбор.НайтиСтроки(СтруктураПоиска);
					КонецЕсли;
					
					Если СтрокиПодбора.Количество() > 0 Тогда
						Для каждого СтрокаПодбора Из СтрокиПодбора Цикл
							СтрокаПодбора.НоваяЦена = СтрокаДокумента.DMChangedPrice;
							УстановитьУпаковочныйЛист(СтрокаПодбора, СтрокаДокумента, Шаблон_ИспользоватьМаркировку, Шаблон_МаркировкаСоздаватьСправочникКМЕслиНеНайден);
						КонецЦикла;
						
						Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
						Объект.ОбменДанными.Получатели.Очистить();							
						Объект.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	
Процедура УстановитьУпаковочныйЛист(СтруктураСтроки, СтрокаДокумента, ИспользоватьМаркировку, МаркировкаСоздаватьСправочникКМЕслиНеНайден)
	
	//Переменные Params
	СтруктураParams = Новый Структура;
	СтруктураParams.Вставить("KM_GTIN","");
	СтруктураParams.Вставить("KM_SN","");
	СтруктураParams.Вставить("KM_Barcode","");
	СтруктураParams.Вставить("KM_RawBarcode","");		
	СтруктураParams.Вставить("KM_DecodedMrc","");
	СтруктураParams.Вставить("KM_RawMrc","");	
	СтруктураParams.Вставить("KM_TNVED","");
	СтруктураParams.Вставить("GS1","");
	СтруктураParams.Вставить("packAttrs","");
	
	Попытка ПрочитатьВсеВходящиеПараметрыИзJSON(СтрокаДокумента.Params, СтруктураParams); Исключение КонецПопытки;
	
	ТекущийУпаковочныйЛист = СтрокаДокумента.DMPackID;		
	//СимволРазделителяУпаковочныйЛист = Найти(DMPackID,"/");
	//Если СимволРазделителяУпаковочныйЛист>0 Тогда 
	//	ТекущийУпаковочныйЛист = Лев(ТекущийУпаковочныйЛист,СимволРазделителяУпаковочныйЛист-1);
	//КонецЕсли;
	ТекущиеУпаковочныйЛистАтрибуты = СтруктураParams.packAttrs;

	Если ИспользоватьМаркировку Тогда 
		Если ЗначениеЗаполнено(СтруктураСтроки.Номенклатура) Тогда
			ПараметрыТовара = Новый Структура("Номенклатура, Характеристика", СтруктураСтроки.Номенклатура, СтруктураСтроки.ХарактеристикаНоменклатуры);
		Иначе
			ПараметрыТовара = Неопределено;
		КонецЕсли;
		
		ТекущийУпаковочныйЛист = СтрЗаменить(ТекущийУпаковочныйЛист,"[","(");
		ТекущийУпаковочныйЛист = СтрЗаменить(ТекущийУпаковочныйЛист,"]",")");
	
		Если СтрДлина(ТекущийУпаковочныйЛист) = 20 И Лев(ТекущийУпаковочныйЛист,2) = "00" Тогда		
			ТекущийУпаковочныйЛист = "(00)" +  Сред(ТекущийУпаковочныйЛист, 3, 18);
		КонецЕсли;	
		
		СтруктураСтроки.УпаковочныйЛист = ТекущийУпаковочныйЛист;
		Если ТекущийУпаковочныйЛист <> "" Тогда
			СтруктураСтроки.УпаковочныйЛистСсылка = ДатаМобайл_Маркировка.ПолучитьСправочникСсылкаУпаковка(ТекущийУпаковочныйЛист,МаркировкаСоздаватьСправочникКМЕслиНеНайден,ПараметрыТовара);
		КонецЕсли;
		
		СтруктураСтроки.УпаковочныйЛистАтрибуты = ТекущиеУпаковочныйЛистАтрибуты;
	Иначе
		СтруктураСтроки.УпаковочныйЛист = ТекущийУпаковочныйЛист;
		СтруктураСтроки.УпаковочныйЛистАтрибуты = ТекущиеУпаковочныйЛистАтрибуты;		
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьПревышениеГрупповогоЗадания(ИмяТаблицы, УзелПО, СсылкаНаДок, СтрокаДокумента, СтруктураСтроки)
	
	Шаблон = СсылкаНаДок.Шаблон;
	
	ЗапросПревышения = Новый Запрос;
	ЗапросПревышения.Текст = "ВЫБРАТЬ
	|	ЕстьNull(СУММА(ЕстьNull(ТаблицаТоваровВДокументе.Количество,0)),0) КАК КоличествоЗадание,
	|	0 КАК КоличествоПодбор
	|ПОМЕСТИТЬ ВременныеДанные
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТоваровВДокументе
	|ГДЕ
	|	ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент 
	|	И ТаблицаТоваровВДокументе.Номенклатура = &Номенклатура
	|	И ТаблицаТоваровВДокументе.Характеристика = &Характеристика
	|
	|ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ
	|	0,
	|   ЕстьNull(СУММА(ЕстьNull(ТаблицаТоваровВРегистре.Количество,0)),0)
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ТаблицаТоваровВРегистре
	|ГДЕ
	|	ТаблицаТоваровВРегистре.ДокументТСД = &ДокументТСД
	|	И ТаблицаТоваровВРегистре.Номенклатура = &Номенклатура
	|	И ТаблицаТоваровВРегистре.ХарактеристикаНоменклатуры = &Характеристика
	|	И ТаблицаТоваровВРегистре.ИмяТаблицы = &ИмяТаблицы
	|	И НЕ ТаблицаТоваровВРегистре.ДляОбмена
	|;
	|ВЫБРАТЬ 
	|ЕстьNull(СУММА(ЕстьNull(ВременныеДанные.КоличествоЗадание,0)),0) КАК КоличествоЗадание,
	|ЕстьNull(СУММА(ЕстьNull(ВременныеДанные.КоличествоПодбор,0)),0)  КАК КоличествоПодбор
	|
	|ИЗ ВременныеДанные КАК ВременныеДанные";
	
	ЗапросПревышения.УстановитьПараметр("ДокументТСД", СсылкаНаДок);
	ЗапросПревышения.УстановитьПараметр("ИсходныйДокумент", СсылкаНаДок.ИсходныйДокумент);
	ЗапросПревышения.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
	ЗапросПревышения.Текст = СтрЗаменить(ЗапросПревышения.Текст, ".ПриходныйОрдерНаТовары.", "." + Шаблон.ВидДокумента + ".");
	
	Если ИмяТаблицы = "Select" Тогда
		ЗапросПревышения.Текст = СтрЗаменить(ЗапросПревышения.Текст, ".Товары КАК ","." + Шаблон.ИмяТабличнойЧастиПодбор + " КАК ");
	Иначе
		ЗапросПревышения.Текст = СтрЗаменить(ЗапросПревышения.Текст, ".Товары КАК ","." + Шаблон.ИмяТабличнойЧастиПриемка + " КАК ");
	КонецЕсли;
	
	Если Шаблон.ЕГАИС Тогда
		Если Не ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
			ЗапросПревышения.Текст = СтрЗаменить(ЗапросПревышения.Текст,"ТаблицаТоваровВДокументе.Номенклатура","ТаблицаТоваровВДокументе.АлкогольнаяПродукция");
		Иначе
			ЗапросПревышения.Текст = СтрЗаменить(ЗапросПревышения.Текст,"ТаблицаТоваровВДокументе.Номенклатура","ТаблицаТоваровВДокументе.НоменклатураЕГАИС");
		КонецЕсли; 
		
		ЗапросПревышения.Текст = СтрЗаменить(ЗапросПревышения.Текст,"И ТаблицаТоваровВДокументе.Характеристика  =  &Характеристика","");
		ЗапросПревышения.Текст = СтрЗаменить(ЗапросПревышения.Текст,"И ТаблицаТоваровВРегистре.ХарактеристикаНоменклатуры  =  &Характеристика","");
		ЗапросПревышения.УстановитьПараметр("Номенклатура",СтруктураСтроки.НоменклатураЕГАИС);
	Иначе
		ЗапросПревышения.УстановитьПараметр("Номенклатура",СтруктураСтроки.Номенклатура);
		ЗапросПревышения.УстановитьПараметр("Характеристика",СтруктураСтроки.ХарактеристикаНоменклатуры);
	КонецЕсли;
	
	ВыборкаПревышения = ЗапросПревышения.Выполнить().Выбрать();
	
	Пока ВыборкаПревышения.Следующий() Цикл
		Если ВыборкаПревышения.КоличествоПодбор + СтрокаДокумента.DMQuant > ВыборкаПревышения.КоличествоЗадание Тогда
			Возврат Истина;
		КонецЕсли;
		Прервать;
	КонецЦикла;	
	
	Возврат Ложь;
		
КонецФункции	
Функция ПроверитьУникальностьМаркиЕгаисГрупповогоЗадания (ИмяТаблицы, УзелПО, СсылкаНаДок, СтрокаДокумента, СтруктураСтроки)
	
	Шаблон = СсылкаНаДок.Шаблон;
	
	ЗапросПревышения = Новый Запрос;
	ЗапросПревышения.Текст = "ВЫБРАТЬ
	|   ЕстьNull(СУММА(ЕстьNull(ТаблицаТоваровВРегистре.Количество,0)),0) КАК КоличествоПодбор
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ТаблицаТоваровВРегистре
	|ГДЕ
	|	ТаблицаТоваровВРегистре.ДокументТСД = &ДокументТСД
	|	И ТаблицаТоваровВРегистре.ЕгаисПолныйКод = &ЕгаисПолныйКод
	|	И ТаблицаТоваровВРегистре.ИмяТаблицы = &ИмяТаблицы
	|	И НЕ ТаблицаТоваровВРегистре.ДляОбмена";
	
	ЗапросПревышения.УстановитьПараметр("ДокументТСД", СсылкаНаДок);
	//ЗапросПревышения.УстановитьПараметр("ИсходныйДокумент", СсылкаНаДок.ИсходныйДокумент);
	ЗапросПревышения.УстановитьПараметр("ЕгаисПолныйКод", СтрокаДокумента.DMPDFBarcode);
	ЗапросПревышения.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
	
	ВыборкаПревышения = ЗапросПревышения.Выполнить().Выбрать();
	
	Пока ВыборкаПревышения.Следующий() Цикл
		Если ВыборкаПревышения.КоличествоПодбор > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		Прервать;
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции
Функция ПроверитьУникальностьКодаМаркировкиГрупповогоЗадания (ИмяТаблицы, УзелПО, СсылкаНаДок, СтрокаДокумента, СтруктураСтроки)
	
	Шаблон = СсылкаНаДок.Шаблон;
	
	ЗапросПревышения = Новый Запрос;
	ЗапросПревышения.Текст = "ВЫБРАТЬ
	|   ЕстьNull(СУММА(ЕстьNull(ТаблицаТоваровВРегистре.Количество,0)),0) КАК КоличествоПодбор
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ТаблицаТоваровВРегистре
	|ГДЕ
	|	ТаблицаТоваровВРегистре.ДокументТСД = &ДокументТСД
	|	И ТаблицаТоваровВРегистре.ЦРПТМарка = &ЦРПТМарка
	|	И ТаблицаТоваровВРегистре.ИмяТаблицы = &ИмяТаблицы
	|	И НЕ ТаблицаТоваровВРегистре.ДляОбмена";
	
	ЗапросПревышения.УстановитьПараметр("ДокументТСД", СсылкаНаДок);
	//ЗапросПревышения.УстановитьПараметр("ИсходныйДокумент", СсылкаНаДок.ИсходныйДокумент);
	ЗапросПревышения.УстановитьПараметр("ЦРПТМарка", СтруктураСтроки.ЦРПТМарка);
	ЗапросПревышения.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
	
	ВыборкаПревышения = ЗапросПревышения.Выполнить().Выбрать();
	
	Пока ВыборкаПревышения.Следующий() Цикл
		Если ВыборкаПревышения.КоличествоПодбор > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		Прервать;
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции
Функция ПроверитьПревышениеЗаданияПоСправкамЕГАИС(ИмяТаблицы, УзелПО, СсылкаНаДок, СтрокаДокумента, СтруктураСтроки)
	
	ЗначениеВозврата = 0;
	
	ТекущаяСправкаБ = Справочники.астСправкиАиБ_ЕГАИС.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	астПартииТоваровПоМаркамЕГАИС.СправкаБ КАК ТекущаяСправкаБ,
	|	1 КАК Количество
	|ИЗ
	|	РегистрНакопления.астПартииТоваровПоМаркамЕГАИС.Остатки(,ШтрихкодМарки.Наименование = &DMPDFBarcode) КАК астПартииТоваровПоМаркамЕГАИС
	|";

	Запрос.УстановитьПараметр("DMPDFBarcode", СтрокаДокумента.DMPDFBarcode);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда		
		ТекущаяСправкаБ = Выборка.ТекущаяСправкаБ; 	
	КонецЕсли;
	
	СтруктураСтроки.Вставить("ЕгаисСправкаБ", ТекущаяСправкаБ);
		
	Если ТекущаяСправкаБ.Пустая() Тогда
		Если СтрДлина(СтрокаДокумента.DMPDFBarcode) = 150 Тогда // нет на остатках новой марки, надо ругаться
			Возврат 3;
		Иначе	
			Возврат 0;
		КонецЕсли;	
	КонецЕсли;
	
	КоличествоПодобранных = 1;
	КоличествоВИсходномДокументе = 0;
	
	//ПОДБОР
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕгаисСправкаБ КАК СправкаБ,
	|	Сумма(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество) КАК Количество
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕгаисСправкаБ = &ТекущаяСправкаБ
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕгаисСправкаБ";
	
	Запрос.УстановитьПараметр("ТекущаяСправкаБ"		, ТекущаяСправкаБ);
	Запрос.УстановитьПараметр("Ссылка"				, СтруктураСтроки.ДокументТСД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда		
		КоличествоПодобранных =  КоличествоПодобранных+Выборка.Количество;
	КонецЕсли;
	
	//ЗАДАНИЕ	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	астТоварноТранспортныеНакладныеИзЕГАИСТовары.СправкаБ КАК СправкаБ,
	|	СУММА(астТоварноТранспортныеНакладныеИзЕГАИСТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.астТоварноТранспортныеНакладныеИзЕГАИС.Товары КАК астТоварноТранспортныеНакладныеИзЕГАИСТовары
	|ГДЕ
	|	астТоварноТранспортныеНакладныеИзЕГАИСТовары.Ссылка = &ИсходныйДокумент
	|	И астТоварноТранспортныеНакладныеИзЕГАИСТовары.СправкаБ = &ТекущаяСправкаБ
	|
	|СГРУППИРОВАТЬ ПО
	|	астТоварноТранспортныеНакладныеИзЕГАИСТовары.СправкаБ";
	
	Запрос.УстановитьПараметр("ТекущаяСправкаБ"		, ТекущаяСправкаБ);
	Запрос.УстановитьПараметр("ИсходныйДокумент"	, СсылкаНаДок.ИсходныйДокумент);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КоличествоВИсходномДокументе = КоличествоВИсходномДокументе + Выборка.Количество;
	КонецЕсли; 
	
	Если КоличествоВИсходномДокументе = 0 Тогда
		ЗначениеВозврата = 2;
		Возврат ЗначениеВозврата;
	КонецЕсли; 
	
	Если КоличествоВИсходномДокументе < КоличествоПодобранных Тогда
		ЗначениеВозврата = 1;	
	КонецЕсли; 	
	
	Возврат ЗначениеВозврата;

КонецФункции	
Функция ПроверитьПревышениеОстатковПоСерии(УзелПО, СсылкаНаДок, СтрокаДокумента, СтруктураСтроки, СообщениеОПревышении)
	
	Если Не ЗначениеЗаполнено(СтруктураСтроки.СерияСсылка)  Тогда
		
		СообщениеОПревышении = "" + ?(УзелПО.ДобавлятьАртикулВНаименование,СтруктураСтроки.Номенклатура.Артикул + " ","")
								  + СтруктураСтроки.Номенклатура + " "
								  + СтруктураСтроки.ХарактеристикаНоменклатуры + " " 
								  + СтруктураСтроки.СерийныйНомер + " " + Символы.ПС
								  + " Серия не найдена! Строка не будет записана!";
		Возврат Истина;
	КонецЕсли;	
	
	//Собрано по серии в незавершенных документах
	ЗапросСобрано = Новый Запрос;
	ЗапросСобрано.Текст = "ВЫБРАТЬ
	|	ЕстьNULL(Сумма(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество*ЕстьNULL(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель,1)),0) КАК КоличествоСобрано
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка.Шаблон.КонтролироватьОстатокПоСериям
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура = &ТекущийТовар
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры = &ТекущаяХарактеристика
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерияСсылка = &ТекущаяСерия
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка.Склад = &ТекущийСклад
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЯчейкаСсылка = &ТекущаяЯчейка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЕстьNULL(Сумма(ДатаМобайл_СтрокиГрупповыхДокументов.Количество*ЕстьNULL(ДатаМобайл_СтрокиГрупповыхДокументов.ЕдиницаИзмерения.Числитель,1)),0)
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_СтрокиГрупповыхДокументов
	|ГДЕ
	|	ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД.Шаблон.КонтролироватьОстатокПоСериям
	|	И ДатаМобайл_СтрокиГрупповыхДокументов.Номенклатура = &ТекущийТовар
	|	И ДатаМобайл_СтрокиГрупповыхДокументов.ХарактеристикаНоменклатуры = &ТекущаяХарактеристика
	|	И ДатаМобайл_СтрокиГрупповыхДокументов.СерияСсылка = &ТекущаяСерия
	|	И ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД.Склад = &ТекущийСклад
	|	И ДатаМобайл_СтрокиГрупповыхДокументов.ЯчейкаСсылка = &ТекущаяЯчейка";
	
	ЗапросСобрано.УстановитьПараметр("ТекущийТовар", СтруктураСтроки.Номенклатура);
	ЗапросСобрано.УстановитьПараметр("ТекущаяХарактеристика", СтруктураСтроки.ХарактеристикаНоменклатуры);
	ЗапросСобрано.УстановитьПараметр("ТекущаяСерия", СтруктураСтроки.СерияСсылка);
	ЗапросСобрано.УстановитьПараметр("ТекущийСклад", СсылкаНаДок.Склад);
	ЗапросСобрано.УстановитьПараметр("ТекущаяЯчейка", СтруктураСтроки.ЯчейкаСсылка);
	
	КоличествоСобрано = 0;
	ВыборкаСобрано = ЗапросСобрано.Выполнить().Выбрать();
	
	Пока ВыборкаСобрано.Следующий() Цикл
		КоличествоСобрано = КоличествоСобрано+ВыборкаСобрано.КоличествоСобрано;
	КонецЦикла;	
	
	//Собрано в текущей строке
	КоэффициентУпаковки = ?(СтруктураСтроки.ЕдиницаИзмерения.Числитель=0,1,СтруктураСтроки.ЕдиницаИзмерения.Числитель);
	КоличествоСобрано = КоличествоСобрано + СтруктураСтроки.Количество*КоэффициентУпаковки;
	
	//Остатки по серии в базе
	Если Не ЗначениеЗаполнено(СтруктураСтроки.ЯчейкаСсылка) Тогда
		ЗапросОстаток = Новый Запрос;
		ЗапросОстаток.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток), 0) - ЕСТЬNULL(СУММА(ТоварыНаСкладахОстатки.КОтгрузкеОстаток), 0) КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Номенклатура = &ТекущийТовар
		|				И Характеристика = &ТекущаяХарактеристика
		|				И Серия = &ТекущаяСерия
		|				И Склад = &ТекущийСклад) КАК ТоварыНаСкладахОстатки";
		
		ЗапросОстаток.УстановитьПараметр("ТекущийСклад", СсылкаНаДок.Склад);

	Иначе
		ЗапросОстаток = Новый Запрос;
		ЗапросОстаток.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток * ЕСТЬNULL(ТоварыНаСкладахОстатки.Упаковка.Числитель, 1)), 0) - ЕСТЬNULL(СУММА(ТоварыНаСкладахОстатки.КОтборуОстаток * ЕСТЬNULL(ТоварыНаСкладахОстатки.Упаковка.Числитель, 1)), 0) КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(
		|			,
		|			Номенклатура = &ТекущийТовар
		|				И Характеристика = &ТекущаяХарактеристика
		|				И Серия = &ТекущаяСерия
		|				И Ячейка = &ТекущаяЯчейка) КАК ТоварыНаСкладахОстатки";
		
		ЗапросОстаток.УстановитьПараметр("ТекущаяЯчейка", СтруктураСтроки.ЯчейкаСсылка);
		
	КонецЕсли;	
	
	ЗапросОстаток.УстановитьПараметр("ТекущийТовар", СтруктураСтроки.Номенклатура);
	ЗапросОстаток.УстановитьПараметр("ТекущаяХарактеристика", СтруктураСтроки.ХарактеристикаНоменклатуры);
	ЗапросОстаток.УстановитьПараметр("ТекущаяСерия", СтруктураСтроки.СерияСсылка);
	
	КоличествоОстаток = 0;
	ВыборкаОстаток = ЗапросОстаток.Выполнить().Выбрать();
	
	Пока ВыборкаОстаток.Следующий() Цикл
		КоличествоОстаток = КоличествоОстаток+ВыборкаОстаток.КоличествоОстаток;
	КонецЦикла;			
	
	Если КоличествоСобрано > КоличествоОстаток Тогда
		СообщениеОПревышении = "" + ?(УзелПО.ДобавлятьАртикулВНаименование,СтруктураСтроки.Номенклатура.Артикул + " ","")
								  + СтруктураСтроки.Номенклатура + " "
								  + СтруктураСтроки.ХарактеристикаНоменклатуры + " " 
								  + СтруктураСтроки.СерияСсылка + " " + Символы.ПС
								  + "Остаток: " + КоличествоОстаток 
								  + " Подобрано:  " + КоличествоСобрано 
								  + " Остаток по серии превышен! Строка не будет записана!";
		Возврат Истина;
	КонецЕсли;		
	
	Возврат Ложь;

КонецФункции	

Функция НайтиУзел(SN)  
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатаМобайл_СписокТСД.Ссылка
	|ИЗ
	|	ПланОбмена.ДатаМобайл_СписокТСД КАК ДатаМобайл_СписокТСД
	|ГДЕ
	|	ДатаМобайл_СписокТСД.Код = &Код");
	Запрос.УстановитьПараметр("Код", SN);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		Возврат Рез.Ссылка;
	КонецЕсли;	
	
	Возврат Неопределено; 
	
КонецФункции	
Функция NewTSD(SN, UserName)
	
	НовыйТСД = ПланыОбмена.ДатаМобайл_СписокТСД.СоздатьУзел();
	НовыйТСД.Код = SN;
	НовыйТСД.Наименование = SN;
	НовыйТСД.Записать();
	
	Если ЗначениеЗаполнено(НовыйТСД.Ссылка) Тогда
		ДатаМобайл_ОбщийМодуль.ЗаписьЗначенийУзлаОбменаТСД(НовыйТСД.Ссылка, "ТекущийПользователь", UserName);
	КонецЕсли;
	
	Возврат НовыйТСД.Ссылка;
	
КонецФункции
Функция ПолучитьЦенуТовара(Номенклатура, ХарактеристикаНоменклатуры, ТипЦен)
		
	лТекущаяЦена = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ТипЦен И Номенклатура = &Номенклатура И Характеристика = &ХарактеристикаНоменклатуры) КАК ЦеныНоменклатурыСрезПоследних");
	
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл    
		лТекущаяЦена =  Рез.Цена;
	КонецЦикла;	

	Возврат лТекущаяЦена;

КонецФункции
Функция КонтрольныйСимволEAN(ШтрихКод, Тип)

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13 Или Тип = 14, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) И (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;   
		
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 14 Тогда
		Нечетн = Нечетн + Сред(ШтрихКод, 13, 1);
		Нечетн = Нечетн * 3;
	ИначеЕсли Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // КонтрольныйСимволEAN()
Функция ПолучитьПризнакУчетаСерий(ВидНоменклатуры,Склад)
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат ВидНоменклатуры.ИспользоватьСерии;	
	Иначе
		Попытка
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
			|ИЗ
			|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
			|ГДЕ
			|	ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
			|	И ВидыНоменклатурыПолитикиУчетаСерий.Ссылка = &ВидНоменклатуры";
			
			Запрос.УстановитьПараметр("Склад",Склад);
			Запрос.УстановитьПараметр("ВидНоменклатуры",ВидНоменклатуры);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Если Выборка.ПолитикаУчетаСерий = Справочники.ПолитикиУчетаСерий.СерииНеИспользуются Тогда
					Возврат Ложь;
				Иначе
					Возврат ВидНоменклатуры.ИспользоватьСерии;
				КонецЕсли;	
			Иначе
				Возврат ВидНоменклатуры.ИспользоватьСерии;
			КонецЕсли;	
		Исключение
			Возврат ВидНоменклатуры.ИспользоватьСерии;	
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВидНоменклатуры.ИспользоватьСерии;
	
КонецФункции
Процедура ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураПараметров)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Params);
	ВходящиеПараметры = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Для каждого Элемент Из СтруктураПараметров Цикл
		Если ВходящиеПараметры.Свойство(Элемент.Ключ) Тогда
			СтруктураПараметров[Элемент.Ключ] = ДатаМобайл_Маркировка.ОбработатьЭкранированиеСтроки(ВходящиеПараметры[Элемент.Ключ]); 
		КонецЕсли;		
	КонецЦикла;

КонецПроцедуры
Функция ПроверитьТребуетсяВыгрузкаМарок(СсылкаНаДок)

	ВидДокумента = СсылкаНаДок.Шаблон.ВидДокумента;
	
	Если ВидДокумента = "ПриобретениеТоваровУслуг" 
		Или ВидДокумента = "ПриемкаТоваровИСМП" Тогда
		
		Возврат Истина;

	ИначеЕсли ВидДокумента = "ВозвратТоваровОтКлиента"	Тогда
		
		МаркиУказаныПоставщиком = Ложь;

		Если СсылкаНаДок.ИсходныйДокумент.ШтрихкодыУпаковок.Количество()>0 Тогда
			МаркиУказаныПоставщиком = Истина;
		КонецЕсли;
		
		Если МаркиУказаныПоставщиком Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	ИначеЕсли ВидДокумента = "УведомлениеОПриемкеМДЛП" Тогда
		ПрямойАкцепт = Ложь;
		
		Попытка 
			Если СсылкаНаДок.ИсходныйДокумент.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
				ПрямойАкцепт = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ПрямойАкцепт Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ()
Функция УдалитьЛидирующиеНули(Строка)
	
	СтрокаБезНулей = Строка;
	
	Пока Лев(СтрокаБезНулей,1) = "0" Цикл
		СтрокаБезНулей = Прав(СтрокаБезНулей, СтрДлина(СтрокаБезНулей) - 1);	
	КонецЦикла;	
	
	Возврат СтрокаБезНулей; 
	
КонецФункции	
Функция ПолучитьТоварыБезЗадания(УзелПО, СсылкаНаДок, КМ, GS1, ЗначениеШтрихкода)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	
	ЗначенияРеквизитовСсылкаНаДок = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДок, "Шаблон");
	Шаблон = ЗначенияРеквизитовСсылкаНаДок.Шаблон;
	
	ЗначенияРеквизитовШаблон = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "ВидДокумента");
	Шаблон_ВидДокумента = ЗначенияРеквизитовШаблон.ВидДокумента;

	Если ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() Тогда
		ЭтоДокументМДЛП = ДатаМобайл_МДЛП.ЭтоДокументМДЛП(Шаблон_ВидДокумента);
		
		Если Не ЭтоДокументМДЛП И СтрДлина(КМ) = 31 Тогда
			Если СтрНачинаетсяС(КМ, "01") И Сред(КМ, 17, 2) = "21" Тогда // скорее всего это ЛС
				ЭтоДокументМДЛП = Истина;	
			КонецЕсли;	
		КонецЕсли;
		
	Иначе
		ЭтоДокументМДЛП = Ложь;
	КонецЕсли;	
		
	ЭтоКММассивов = Ложь;	
		
	Если ТипЗнч(КМ) = Тип("Массив") Тогда
		ЭтоКММассивов = Истина;	
	КонецЕсли;	
	
	Если ЭтоДокументМДЛП И Метаданные.НайтиПоПолномуИмени("РегистрСведений.УАС_АналитикаНомеровУпаковок") <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УАС_АналитикаНомеровУпаковок.Номенклатура КАК Номенклатура,
		|	УАС_АналитикаНомеровУпаковок.Характеристика КАК Характеристика,
		|	УАС_АналитикаНомеровУпаковок.Серия КАК Серия,
		|	УАС_АналитикаНомеровУпаковок.НомерУпаковки КАК Марка
		|ПОМЕСТИТЬ Марки
		|ИЗ
		|	РегистрСведений.УАС_АналитикаНомеровУпаковок КАК УАС_АналитикаНомеровУпаковок
		|ГДЕ
		|	УАС_АналитикаНомеровУпаковок.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)
		|	И УАС_АналитикаНомеровУпаковок.НомерУпаковки ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Марки.Номенклатура КАК Номенклатура,
		|	Марки.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ НайденныеТовары
		|ИЗ
		|	Марки КАК Марки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
		|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
		|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
		|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТоварыСОстатками1С
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&ТекущаяДата,
		|			Номенклатура В (ВЫБРАТЬ
		|									НайденныеТовары.Номенклатура КАК Номенклатура
		|								ИЗ 
		|									НайденныеТовары КАК НайденныеТовары)						
		|			И (&ВсеСклады ИЛИ Склад В (&Склады))
		|			И (&ВсеПомещения ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	СвободныеОстаткиОстатки.Номенклатура,
		|	СвободныеОстаткиОстатки.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыСРезервамиТСД
		|ИЗ
		|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
		|ГДЕ	
		|	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
		|		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
		|			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
		|ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
		|ИЗ
		|	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
		|		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК Характеристика,
		|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество * (ВЫБОР
		|				КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель = 0
		|						ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
		|					ТОГДА 1
		|				ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель
		|			КОНЕЦ / ВЫБОР
		|				КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель = 0
		|						ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
		|					ТОГДА 1
		|				ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель
		|			КОНЕЦ), 0)) КАК ВРезервеТСД
		|ПОМЕСТИТЬ ТоварыСРезервамиТСД
		|ИЗ
		|	НайденныеТовары КАК НайденныеТовары
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
		|	ПО НайденныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
		| 		И НайденныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
		|СГРУППИРОВАТЬ ПО
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЧИСЛО(19, 2))) КАК Цена
		|ПОМЕСТИТЬ ТоварыСЦенами
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ТекущаяДата, 
		|			Номенклатура В (ВЫБРАТЬ
		|									НайденныеТовары.Номенклатура КАК Номенклатура
		|								ИЗ 
		|									НайденныеТовары КАК НайденныеТовары)
		|			И Характеристика В (ВЫБРАТЬ
		|									НайденныеТовары.Характеристика КАК Характеристика
		|								ИЗ 
		|									НайденныеТовары КАК НайденныеТовары)
		|			И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Марки.Марка КАК Марка,
		|	Марки.Номенклатура КАК Номенклатура,
		|	Марки.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА &ВключатьАртикул
		|			ТОГДА ВЫБОР
		|					КОГДА Марки.Номенклатура.Артикул = """"
		|						ТОГДА """"
		|					ИНАЧЕ Марки.Номенклатура.Артикул + "" ""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ + Марки.Номенклатура.Наименование + "" "" + ЕСТЬNULL(Марки.Характеристика.Наименование, """") КАК НаименованиеТовара,
		|	Марки.Номенклатура.ЕдиницаИзмерения.Наименование КАК НаименованиеУпаковки,
		|	Марки.Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
		|	1 КАК Коэффициент,
		|	"""" КАК НоменклатураКороба,
		|	"""" КАК ХарактеристикаКороба,
		|	"""" КАК УпаковкаКороба,
		|	"""" КАК КоэффициентУпаковкиКороба,
		|	ЕСТЬNULL(ТоварыСОстатками1С.ВНаличии, 0) КАК ВНаличии,
		|	ЕСТЬNULL(ТоварыСОстатками1С.ВРезерве, 0) КАК ВРезерве,
		|	ЕСТЬNULL(ТоварыСРезервамиТСД.ВРезервеТСД, 0) КАК ВРезервеТСД,
		|	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ИтоговыеДанныеУпаковки
		|ИЗ
		|	Марки КАК Марки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
		|		ПО Марки.Номенклатура = ТоварыСОстатками1С.Номенклатура
		|			И Марки.Характеристика = ТоварыСОстатками1С.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
		|		ПО Марки.Номенклатура = ТоварыСРезервамиТСД.Номенклатура
		|			И Марки.Характеристика = ТоварыСРезервамиТСД.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
		|		ПО Марки.Номенклатура = ТоварыСЦенами.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИтоговыеДанныеУпаковки.Марка КАК ЗначениеШтрихкода,
		|	ИтоговыеДанныеУпаковки.Номенклатура КАК Номенклатура,
		|	ИтоговыеДанныеУпаковки.Характеристика КАК Характеристика,
		|	ИтоговыеДанныеУпаковки.НаименованиеТовара КАК НаименованиеТовара,
		|	ИтоговыеДанныеУпаковки.НаименованиеУпаковки КАК НаименованиеУпаковки,
		|	ИтоговыеДанныеУпаковки.ИспользоватьСерии КАК ИспользоватьСерии,
		|	СУММА(ИтоговыеДанныеУпаковки.Коэффициент) КАК Коэффициент,
		|	ИтоговыеДанныеУпаковки.ВНаличии КАК ВНаличии,
		|	ИтоговыеДанныеУпаковки.ВРезерве КАК ВРезерве,
		|	ИтоговыеДанныеУпаковки.ВРезервеТСД КАК ВРезервеТСД,
		|	ИтоговыеДанныеУпаковки.Цена КАК Цена,
		|	0 КАК КоличествоВЗадании
		|ИЗ
		|	ИтоговыеДанныеУпаковки КАК ИтоговыеДанныеУпаковки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговыеДанныеУпаковки.Марка,
		|	ИтоговыеДанныеУпаковки.Номенклатура,
		|	ИтоговыеДанныеУпаковки.Характеристика,
		|	ИтоговыеДанныеУпаковки.НаименованиеТовара,
		|	ИтоговыеДанныеУпаковки.НаименованиеУпаковки,
		|	ИтоговыеДанныеУпаковки.ИспользоватьСерии,
		|	ИтоговыеДанныеУпаковки.ВНаличии,
		|	ИтоговыеДанныеУпаковки.ВРезерве,
		|	ИтоговыеДанныеУпаковки.ВРезервеТСД,
		|	ИтоговыеДанныеУпаковки.Цена,
		|	0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыСОстатками1С
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДокументыСРезервамиТСД
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеДокументыСРезервамиТСД
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыСРезервамиТСД
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыСЦенами
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Марки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НайденныеТовары
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ИтоговыеДанныеУпаковки";
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА &ВключатьАртикул
		|			ТОГДА ВЫБОР
		|					КОГДА ШтрихкодыУпаковокТоваров.Номенклатура.Артикул = """"
		|						ТОГДА """"
		|					ИНАЧЕ ШтрихкодыУпаковокТоваров.Номенклатура.Артикул + "" ""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ + ШтрихкодыУпаковокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Характеристика.Наименование, """") КАК НаименованиеТовара,
		|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Наименование, ШтрихкодыУпаковокТоваров.Номенклатура.ЕдиницаИзмерения.Наименование) КАК НаименованиеУпаковки,
		|	ШтрихкодыУпаковокТоваров.Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
		|	ВЫБОР
		|		КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Числитель,0) = 0
		|				ТОГДА 1
		|				ИНАЧЕ ШтрихкодыУпаковокТоваров.Упаковка.Числитель
		|			КОНЕЦ
		|		ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество 
		|	КОНЕЦ КАК Коэффициент,
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	0 КАК КоличествоВЗадании
		|ПОМЕСТИТЬ Марки
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)
		|	И ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.Номенклатура КАК Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА &ВключатьАртикул
		|			ТОГДА ВЫБОР
		|					КОГДА ПулКодовМаркировкиСУЗ.Номенклатура.Артикул = """"
		|						ТОГДА """"
		|					ИНАЧЕ ПулКодовМаркировкиСУЗ.Номенклатура.Артикул + "" ""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ + ПулКодовМаркировкиСУЗ.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ПулКодовМаркировкиСУЗ.Характеристика.Наименование, """") КАК НаименованиеТовара,
		|	ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Упаковка.Наименование,ПулКодовМаркировкиСУЗ.Номенклатура.ЕдиницаИзмерения.Наименование)  КАК НаименованиеУпаковки,
		|	ПулКодовМаркировкиСУЗ.Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
		|	ВЫБОР 
		|		КОГДА МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Упаковка.Числитель,1))=0 
		|		ТОГДА 1
		|		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Упаковка.Числитель,1)) 
		|	КОНЕЦ КАК Коэффициент,
		|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК ЗначениеШтрихкода,
		|	0 КАК КоличествоВЗадании
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК РегистрСведенийШтрихкодыНоменклатуры
	    |		ПО ПулКодовМаркировкиСУЗ.GTIN = ""0""+РегистрСведенийШтрихкодыНоменклатуры.Штрихкод ИЛИ ПулКодовМаркировкиСУЗ.GTIN = ""000000""+РегистрСведенийШтрихкодыНоменклатуры.Штрихкод ИЛИ ПулКодовМаркировкиСУЗ.GTIN = РегистрСведенийШтрихкодыНоменклатуры.Штрихкод 
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)
		|	И ПулКодовМаркировкиСУЗ.КодМаркировки ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""
		|СГРУППИРОВАТЬ ПО
		|	ПулКодовМаркировкиСУЗ.Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика,
		|	ВЫБОР
		|		КОГДА &ВключатьАртикул
		|			ТОГДА ВЫБОР
		|					КОГДА ПулКодовМаркировкиСУЗ.Номенклатура.Артикул = """"
		|						ТОГДА """"
		|					ИНАЧЕ ПулКодовМаркировкиСУЗ.Номенклатура.Артикул + "" ""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ + ПулКодовМаркировкиСУЗ.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ПулКодовМаркировкиСУЗ.Характеристика.Наименование, """"),
		|	ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Упаковка.Наименование,ПулКодовМаркировкиСУЗ.Номенклатура.ЕдиницаИзмерения.Наименование),  
		|	ПулКодовМаркировкиСУЗ.КодМаркировки	
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Марки.Номенклатура КАК Номенклатура,
		|	Марки.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ НайденныеТовары
		|ИЗ
		|	Марки КАК Марки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК ВНаличии,
		|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.КОтгрузкеОстаток, 0)) КАК ВРезерве,
		|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
		|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТоварыСОстатками1С
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&ТекущаяДата,
		|			Номенклатура В (ВЫБРАТЬ
		|									НайденныеТовары.Номенклатура КАК Номенклатура
		|								ИЗ 
		|									НайденныеТовары КАК НайденныеТовары)						
		|			И (&ВсеСклады ИЛИ Склад В (&Склады))
		|			И (&ВсеПомещения ИЛИ Помещение В (&Помещения))) КАК СвободныеОстаткиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	СвободныеОстаткиОстатки.Номенклатура,
		|	СвободныеОстаткиОстатки.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыСРезервамиТСД
		|ИЗ
		|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
		|ГДЕ	
		|	(ДатаМобайл_ДокументыТСД.Ссылка <> &ИсходноеЗадание)
		|		И (ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1))
		|			И (ДатаМобайл_ДокументыТСД.Шаблон.РезервироватьТовар)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество,0)) КАК Количество
		|ПОМЕСТИТЬ ДанныеДокументыСРезервамиТСД
		|ИЗ
		|	ДокументыСРезервамиТСД КАК ДокументыСРезервамиТСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанные
		|		ПО ДокументыСРезервамиТСД.Ссылка = ДатаМобайл_ДокументыТСДСобранныеДанные.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура КАК Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры КАК Характеристика,
		|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанные.Количество * (ВЫБОР
		|				КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель = 0
		|						ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
		|					ТОГДА 1
		|				ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Числитель
		|			КОНЕЦ / ВЫБОР
		|				КОГДА ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель = 0
		|						ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
		|					ТОГДА 1
		|				ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанные.ЕдиницаИзмерения.Знаменатель
		|			КОНЕЦ), 0)) КАК ВРезервеТСД
		|ПОМЕСТИТЬ ТоварыСРезервамиТСД
		|ИЗ
		|	НайденныеТовары КАК НайденныеТовары
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументыСРезервамиТСД КАК ДатаМобайл_ДокументыТСДСобранныеДанные
		|	ПО НайденныеТовары.Номенклатура = ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура
		| 		И НайденныеТовары.Характеристика = ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
		|СГРУППИРОВАТЬ ПО
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.Номенклатура,
		|	ДатаМобайл_ДокументыТСДСобранныеДанные.ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЧИСЛО(19, 2))) КАК Цена
		|ПОМЕСТИТЬ ТоварыСЦенами
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ТекущаяДата, 
		|			Номенклатура В (ВЫБРАТЬ
		|									НайденныеТовары.Номенклатура КАК Номенклатура
		|								ИЗ 
		|									НайденныеТовары КАК НайденныеТовары)
		|			И Характеристика В (ВЫБРАТЬ
		|									НайденныеТовары.Характеристика КАК Характеристика
		|								ИЗ 
		|									НайденныеТовары КАК НайденныеТовары)
		|			И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Марки.Номенклатура КАК Номенклатура,
		|	Марки.Характеристика КАК Характеристика,
		|	Марки.НаименованиеТовара КАК НаименованиеТовара,
		|	Марки.НаименованиеУпаковки КАК НаименованиеУпаковки,
		|	Марки.ИспользоватьСерии КАК ИспользоватьСерии,
		|	Марки.Коэффициент КАК Коэффициент,
		|	Марки.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	0 КАК КоличествоВЗадании,
		|	ЕСТЬNULL(ТоварыСОстатками1С.ВНаличии, 0) КАК ВНаличии,
		|	ЕСТЬNULL(ТоварыСОстатками1С.ВРезерве, 0) КАК ВРезерве,
		|	ЕСТЬNULL(ТоварыСРезервамиТСД.ВРезервеТСД, 0) КАК ВРезервеТСД,
		|	ЕСТЬNULL(ТоварыСЦенами.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ДанныеВыборки
		|ИЗ
		|	Марки КАК Марки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОстатками1С КАК ТоварыСОстатками1С
		|		ПО Марки.Номенклатура = ТоварыСОстатками1С.Номенклатура
		|			И Марки.Характеристика = ТоварыСОстатками1С.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСРезервамиТСД КАК ТоварыСРезервамиТСД
		|		ПО Марки.Номенклатура = ТоварыСРезервамиТСД.Номенклатура
		|			И Марки.Характеристика = ТоварыСРезервамиТСД.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
		|		ПО Марки.Номенклатура = ТоварыСЦенами.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		Если ЭтоКММассивов Тогда
			Запрос.Текст = Запрос.Текст +
			"
			|ВЫБРАТЬ
			|";
		Иначе
			Запрос.Текст = Запрос.Текст + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|";
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + 
		"
		|	ДанныеВыборки.Номенклатура КАК Номенклатура,
		|	ДанныеВыборки.Характеристика КАК Характеристика,
		|	ДанныеВыборки.НаименованиеТовара КАК НаименованиеТовара,
		|	ДанныеВыборки.НаименованиеУпаковки КАК НаименованиеУпаковки,
		|	ДанныеВыборки.ИспользоватьСерии КАК ИспользоватьСерии,
		|	ДанныеВыборки.Коэффициент КАК Коэффициент,
		|	ДанныеВыборки.ЗначениеШтрихкода КАК Марка,
		|	ДанныеВыборки.ВНаличии КАК ВНаличии,
		|	ДанныеВыборки.ВРезерве КАК ВРезерве,
		|	ДанныеВыборки.ВРезервеТСД КАК ВРезервеТСД,
		|	ДанныеВыборки.Цена КАК Цена,
		|	ДанныеВыборки.КоличествоВЗадании КАК КоличествоВЗадании
		|ПОМЕСТИТЬ ИтоговыеДанныеУпаковки
		|ИЗ 
		|	ДанныеВыборки КАК ДанныеВыборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИтоговыеДанныеУпаковки.Марка КАК ЗначениеШтрихкода,
		|	ИтоговыеДанныеУпаковки.Номенклатура КАК Номенклатура,
		|	ИтоговыеДанныеУпаковки.Характеристика КАК Характеристика,
		|	ИтоговыеДанныеУпаковки.НаименованиеТовара КАК НаименованиеТовара,
		|	ИтоговыеДанныеУпаковки.НаименованиеУпаковки КАК НаименованиеУпаковки,
		|	ИтоговыеДанныеУпаковки.ИспользоватьСерии КАК ИспользоватьСерии,
		|	СУММА(ИтоговыеДанныеУпаковки.Коэффициент) КАК Коэффициент,
		|	ИтоговыеДанныеУпаковки.ВНаличии КАК ВНаличии,
		|	ИтоговыеДанныеУпаковки.ВРезерве КАК ВРезерве,
		|	ИтоговыеДанныеУпаковки.ВРезервеТСД КАК ВРезервеТСД,
		|	ИтоговыеДанныеУпаковки.Цена КАК Цена,
		|	ИтоговыеДанныеУпаковки.КоличествоВЗадании КАК КоличествоВЗадании
		|ИЗ
		|	ИтоговыеДанныеУпаковки КАК ИтоговыеДанныеУпаковки
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговыеДанныеУпаковки.Марка,
		|	ИтоговыеДанныеУпаковки.Номенклатура,
		|	ИтоговыеДанныеУпаковки.Характеристика,
		|	ИтоговыеДанныеУпаковки.НаименованиеТовара,
		|	ИтоговыеДанныеУпаковки.НаименованиеУпаковки,
		|	ИтоговыеДанныеУпаковки.ИспользоватьСерии,
		|	ИтоговыеДанныеУпаковки.ВНаличии,
		|	ИтоговыеДанныеУпаковки.ВРезерве,
		|	ИтоговыеДанныеУпаковки.ВРезервеТСД,
		|	ИтоговыеДанныеУпаковки.Цена,
		|	ИтоговыеДанныеУпаковки.КоличествоВЗадании
		|
		|УПОРЯДОЧИТЬ ПО
		|	Коэффициент УБЫВ
		|;		
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыСОстатками1С
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДокументыСРезервамиТСД
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеДокументыСРезервамиТСД
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыСРезервамиТСД
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыСЦенами
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Марки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НайденныеТовары
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеВыборки
		|";
		
	КонецЕсли;
	
	//Если Шаблон.МаркировкаОнлайнПроверкаВложенностиУпаковок Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИтоговыеДанныеУпаковки.Марка", """""");	
	//КонецЕсли;
	
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	//Обувь:
	//01+GTIN+21+SN = 31
	//Лекарства:
	//01+GTIN+21+SN = 31
	//Фото:
	//01+GTIN+21+SN = 38
	//Молочка:
	//01+GTIN+21+SN = 24 ии 32
	
	Если Не ЭтоКММассивов Тогда
		Если СтрДлина(КМ) = 20 Тогда
			Если  ЭтоДокументМДЛП Тогда
				ЗначениеШтрихкода = Сред(КМ,3,18);
			Иначе	
				ЗначениеШтрихкода = "(00)" + Сред(КМ,3,18);
			КонецЕсли;
		ИначеЕсли СтрДлина(КМ) = 22 Тогда
			Если  ЭтоДокументМДЛП Тогда
				ЗначениеШтрихкода = Сред(КМ,5,18);
			Иначе	
				ЗначениеШтрихкода = "(00)" + Сред(КМ,5,18);
			КонецЕсли;	
		ИначеЕсли СтрДлина(КМ) = 21 Тогда
			ЗначениеШтрихкода = КМ;
		ИначеЕсли СтрДлина(КМ) = 25 Тогда
			ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 7);
		ИначеЕсли СтрДлина(КМ) = 24 Тогда
			ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 6);
		ИначеЕсли СтрДлина(КМ) = 38 Тогда
			ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 20);	
		ИначеЕсли СтрДлина(КМ) = 31 Тогда
			Если  ЭтоДокументМДЛП Тогда
				ЗначениеШтрихкода = Сред(КМ, 3, 14) +  Сред(КМ, 19, 13);
			Иначе	
				ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 13);
			КонецЕсли;
		ИначеЕсли СтрДлина(КМ) = 32 Тогда
			ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 14);	
			
		Иначе
			// упаковки			
			Если ЗначениеЗаполнено(GS1) Тогда
				GS1 = СтрЗаменить(GS1,"[","(");
				GS1 = СтрЗаменить(GS1,"]",")");
			Иначе
				GS1 = КМ;
			КонецЕсли;
			
			ЗначениеШтрихкода = GS1;
		КонецЕсли;
		
		// Символы _ И % присутствуют в алфавите маркировки, поэтому требуется экранирование через спецсимвол, символ $ не присутствует в алфавите маркировки
		ЗначениеШтрихкодаДляЗапроса = ""+ЗначениеШтрихкода;
		ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"_","$_");
		ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"%","$%");
		ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкодаДляЗапроса + "%";
		
		Запрос.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", ЗначениеШтрихкодаДляЗапроса);
		
	Иначе		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""", "В (&ЗначениеШтрихкодаДляЗапроса)"); 
		Запрос.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", КМ);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ИсходноеЗадание", СсылкаНаДок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Запрос.УстановитьПараметр("ВключатьАртикул", УзелПО.ДобавлятьАртикулВНаименование);
	Запрос.УстановитьПараметр("ТипЦен",УзелПО.ТипЦен);
	
	СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
	Запрос.УстановитьПараметр("Склады",СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
	
	СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
	Запрос.УстановитьПараметр("Помещения",СписокПомещений);
	Запрос.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция БылоСканированиеУпаковкиВСоставеДругойВЭтомДокументе(СтруктураСтроки = Неопределено, ДокументТСД = Неопределено, Шаблон = Неопределено)
	
	Если СтруктураСтроки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() Тогда
		ЭтоДокументМДЛП = ДатаМобайл_МДЛП.ЭтоДокументМДЛП(Шаблон.ВидДокумента);
	Иначе
		ЭтоДокументМДЛП = Ложь;
	КонецЕсли;
	
	// 1. Проверить что сканируем КМ, а ранее были отсканированы короб Или палета с этой КМ
	Если ЗначениеЗаполнено(СтруктураСтроки.КМСсылка) Тогда	
		
		Запрос = Новый Запрос;
		// Получим данные упаковок где хранится марка по базе 1с
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)) КАК Короб,
		|	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)) КАК Палета
		|ПОМЕСТИТЬ УпаковкиМарки
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
		|		ПО (ДанныеУпаковкиУровень1.Штрихкод = ШтрихкодыУпаковокТоваров.Ссылка)
		|			И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
		|				ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
		|		ПО (ДанныеУпаковкиУровень2.Штрихкод = ДанныеУпаковкиУровень1.Ссылка)
		|			И (ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
		|				ИЛИ ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ШтрихкодыУпаковокТоваров.Ссылка = &КМСсылка
		|;
		|
		// Получим собранные по документу упаковки
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СобранныеДанныеПодбор.УпаковочныйЛистСсылка КАК Упаковка
		|ПОМЕСТИТЬ СобранныеУпаковки
		|ИЗ
		|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
		|ГДЕ
		|	СобранныеДанныеПодбор.Ссылка = &ДокументТСД
		|	И СобранныеДанныеПодбор.УпаковочныйЛистСсылка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	СобранныеДанныеПодбор.УпаковочныйЛистСсылка
		|
		|ИМЕЮЩИЕ
		|	СУММА(СобранныеДанныеПодбор.Количество) > 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрСобранныеДанныеПодбор.УпаковочныйЛистСсылка
		|ИЗ
		|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК РегистрСобранныеДанныеПодбор
		|ГДЕ
		|	РегистрСобранныеДанныеПодбор.ДокументТСД = &ДокументТСД
		|	И РегистрСобранныеДанныеПодбор.УпаковочныйЛистСсылка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрСобранныеДанныеПодбор.УпаковочныйЛистСсылка
		|
		|ИМЕЮЩИЕ
		|	СУММА(РегистрСобранныеДанныеПодбор.Количество) > 0
		|;
		|
		// Проверим что упаковки еще не подбирались
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УпаковкиМарки.Короб КАК Короб,
		|	УпаковкиМарки.Палета КАК Палета
		|ИЗ
		|	УпаковкиМарки КАК УпаковкиМарки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СобранныеУпаковки КАК СобранныеУпаковки
		|		ПО (УпаковкиМарки.Короб = СобранныеУпаковки.Упаковка
		|				ИЛИ УпаковкиМарки.Палета = СобранныеУпаковки.Упаковка)
		|			И (СобранныеУпаковки.Упаковка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка))";
		
		
		Запрос.УстановитьПараметр("КМСсылка", СтруктураСтроки.КМСсылка);			
		Запрос.УстановитьПараметр("ДокументТСД", ДокументТСД);				
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			лТекущийКороб = Выборка.Короб;
			лТекущийПалета = Выборка.Палета;	
			Возврат Истина;		
		КонецЦикла;
		
	Иначе 	
		
		// 2. Проверить что сканируем короб Или палету, а ранее отсканированы КМ Из этой упаковки
		// 4. Проверить что сканируем палету, а ранее отсканирован короб Из этой палеты
		
		Если ЗначениеЗаполнено(СтруктураСтроки.УпаковочныйЛистСсылка) Тогда
			
			Запрос = Новый Запрос;
			//Получим данные подобранных КМ
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СобранныеДанныеПодбор.КМСсылка КАК ПодобранныйКМилиУпаковка
			|ПОМЕСТИТЬ СобранныеМарки
			|ИЗ
			|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
			|ГДЕ
			|	СобранныеДанныеПодбор.Ссылка = &ДокументТСД
			|	И СобранныеДанныеПодбор.КМСсылка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	СобранныеДанныеПодбор.КМСсылка
			|
			|ИМЕЮЩИЕ
			|	СУММА(СобранныеДанныеПодбор.Количество) > 0
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистрСобранныеДанныеПодбор.КМСсылка
			|ИЗ
			|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК РегистрСобранныеДанныеПодбор
			|ГДЕ
			|	РегистрСобранныеДанныеПодбор.ДокументТСД = &ДокументТСД
			|	И РегистрСобранныеДанныеПодбор.КМСсылка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	РегистрСобранныеДанныеПодбор.КМСсылка
			|
			|ИМЕЮЩИЕ
			|	СУММА(РегистрСобранныеДанныеПодбор.Количество) > 0
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СобранныеДанныеПодбор.УпаковочныйЛистСсылка
			|ИЗ
			|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
			|ГДЕ
			|	СобранныеДанныеПодбор.Ссылка = &ДокументТСД
			|	И СобранныеДанныеПодбор.УпаковочныйЛистСсылка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	СобранныеДанныеПодбор.УпаковочныйЛистСсылка
			|
			|ИМЕЮЩИЕ
			|	СУММА(СобранныеДанныеПодбор.Количество) > 0
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистрСобранныеДанныеПодбор.УпаковочныйЛистСсылка
			|ИЗ
			|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК РегистрСобранныеДанныеПодбор
			|ГДЕ
			|	РегистрСобранныеДанныеПодбор.ДокументТСД = &ДокументТСД
			|	И РегистрСобранныеДанныеПодбор.УпаковочныйЛистСсылка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	РегистрСобранныеДанныеПодбор.УпаковочныйЛистСсылка
			|
			|ИМЕЮЩИЕ
			|	СУММА(РегистрСобранныеДанныеПодбор.Количество) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)) КАК Короб,
			|	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)) КАК Палета
			|ПОМЕСТИТЬ УпаковкиМарки
			|ИЗ
			|	СобранныеМарки КАК СобранныеМарки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
			|		ПО (ДанныеУпаковкиУровень1.Штрихкод = СобранныеМарки.ПодобранныйКМилиУпаковка)
			|			И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
			|				ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
			|		ПО (ДанныеУпаковкиУровень2.Штрихкод = ДанныеУпаковкиУровень1.Ссылка)
			|			И (ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
			|				ИЛИ ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УпаковкиМарки.Короб,
			|	УпаковкиМарки.Палета
			|ИЗ
			|	УпаковкиМарки КАК УпаковкиМарки
			|ГДЕ
			|	УпаковкиМарки.Короб =  &УпаковочныйЛистСсылка
			|		ИЛИ УпаковкиМарки.Палета = &УпаковочныйЛистСсылка
			|";
			
			Запрос.УстановитьПараметр("ДокументТСД", ДокументТСД);
			Запрос.УстановитьПараметр("УпаковочныйЛистСсылка", СтруктураСтроки.УпаковочныйЛистСсылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				лТекущийКороб = Выборка.Короб;
				лТекущийПалета = Выборка.Палета;	
				Возврат Истина;		
			КонецЦикла;
			
			// 3. Проверить что сканируем короб, а ранее отсканирована палета с этим коробом
			
			Запрос = Новый Запрос;
			// Получим данные упаковок где хранится текущая упаковка по базе 1с
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)) КАК Палета
			|ПОМЕСТИТЬ УпаковкиМарки
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
			|		ПО (ДанныеУпаковкиУровень1.Штрихкод = ШтрихкодыУпаковокТоваров.Ссылка)
			|			И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
			|				ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|	И ШтрихкодыУпаковокТоваров.Ссылка = &УпаковочныйЛистСсылка
			|;
			|
			// Получим собранные по документу упаковки
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СобранныеДанныеПодбор.УпаковочныйЛистСсылка КАК Упаковка
			|ПОМЕСТИТЬ СобранныеУпаковки
			|ИЗ
			|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
			|ГДЕ
			|	СобранныеДанныеПодбор.Ссылка = &ДокументТСД
			|	И СобранныеДанныеПодбор.УпаковочныйЛистСсылка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	СобранныеДанныеПодбор.УпаковочныйЛистСсылка
			|
			|ИМЕЮЩИЕ
			|	СУММА(СобранныеДанныеПодбор.Количество) > 0
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистрСобранныеДанныеПодбор.УпаковочныйЛистСсылка
			|ИЗ
			|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК РегистрСобранныеДанныеПодбор
			|ГДЕ
			|	РегистрСобранныеДанныеПодбор.ДокументТСД = &ДокументТСД
			|	И РегистрСобранныеДанныеПодбор.УпаковочныйЛистСсылка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	РегистрСобранныеДанныеПодбор.УпаковочныйЛистСсылка
			|
			|ИМЕЮЩИЕ
			|	СУММА(РегистрСобранныеДанныеПодбор.Количество) > 0
			|;
			|
			// Проверим что упаковки еще не подбирались
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УпаковкиМарки.Палета КАК Палета
			|ИЗ
			|	УпаковкиМарки КАК УпаковкиМарки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СобранныеУпаковки КАК СобранныеУпаковки
			|		ПО (УпаковкиМарки.Палета = СобранныеУпаковки.Упаковка)
			|			И (СобранныеУпаковки.Упаковка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка))";
			
			
			Запрос.УстановитьПараметр("УпаковочныйЛистСсылка", СтруктураСтроки.УпаковочныйЛистСсылка);			
			Запрос.УстановитьПараметр("ДокументТСД", ДокументТСД);				
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				лТекущийПалета = Выборка.Палета;	
				Возврат Истина;		
			КонецЦикла;
		КонецЕсли;				
		
	КонецЕсли;
	
	Если ЭтоДокументМДЛП Тогда
		Если БылоСканированиеУпаковкиВСоставеДругойВЭтомДокументеМДЛП(СтруктураСтроки, ДокументТСД, Шаблон) Тогда
			Возврат Истина;	
		КонецЕсли;		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции
Функция БылоСканированиеУпаковкиВСоставеДругойВЭтомДокументеМДЛП(СтруктураСтроки, ДокументТСД, Шаблон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист, 1, 4) = ""(00)""
	|			ТОГДА ПОДСТРОКА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист, 5, 18)
	|		ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист
	|	КОНЕЦ КАК УпаковочныйЛист,
	|	СУММА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_УпаковкиМДЛП
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист, 1, 4) = ""(00)""
	|			ТОГДА ПОДСТРОКА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист, 5, 18)
	|		ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_УпаковкиМДЛП.УпаковочныйЛист КАК УпаковочныйЛист
	|ПОМЕСТИТЬ ВТ_УпаковкиИзПодбора
	|ИЗ
	|	ВТ_УпаковкиМДЛП КАК ВТ_УпаковкиМДЛП
	|ГДЕ
	|	ВТ_УпаковкиМДЛП.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиМДЛП.НомерУпаковки КАК НомерУпаковки
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|ГДЕ
	|	УпаковкиМДЛП.НомерУпаковки = &НомерУпаковки
	|	И УпаковкиМДЛП.НомерГрупповойУпаковки В
	|			(ВЫБРАТЬ
	|				ВТ_УпаковкиИзПодбора.УпаковочныйЛист КАК УпаковочныйЛист
	|			ИЗ
	|				ВТ_УпаковкиИзПодбора КАК ВТ_УпаковкиИзПодбора)";
	
	ЦРПТМарка = ДатаМобайл_МДЛП.УбратьИзМаркиУпрСимволы(СтруктураСтроки.ЦРПТМарка);
	
	Запрос.УстановитьПараметр("НомерУпаковки", ЦРПТМарка);
	Запрос.УстановитьПараметр("Ссылка", ДокументТСД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция УпаковочныйЛистУжеИмеетВложенность(СтруктураСтроки = Неопределено, ДокументТСД = Неопределено, Шаблон = Неопределено)
	
	Если СтруктураСтроки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() Тогда
		ЭтоДокументМДЛП = ДатаМобайл_МДЛП.ЭтоДокументМДЛП(Шаблон.ВидДокумента);
	Иначе
		ЭтоДокументМДЛП = Ложь;
	КонецЕсли;	
	
	//Проверить что сканируем короб Или палету, а ранее отсканированы КМ Из этой упаковки
	Если СтруктураСтроки.УпаковочныйЛист <> "" Тогда
		
		УпаковочныйЛистСсылка = ДатаМобайл_Маркировка.ПолучитьСправочникСсылкаУпаковка(СтруктураСтроки.УпаковочныйЛист);
		Если УпаковочныйЛистСсылка <> Неопределено Тогда
			
			Если УпаковочныйЛистСсылка.ВложенныеШтрихкоды.Количество() > 0 Тогда
				Возврат Истина;
			КонецЕсли;	
			
		КонецЕсли;			
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
Функция КодМаркировкиУжеАгрегирован(СтруктураСтроки = Неопределено, ДокументТСД = Неопределено, Шаблон = Неопределено)
	
	Если СтруктураСтроки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Проверить что агрегируем КМ который еще не агрегирован
	Если ЗначениеЗаполнено(СтруктураСтроки.КМСсылка) Или ЗначениеЗаполнено(СтруктураСтроки.КоробСсылка) Тогда
		
		Запрос = Новый Запрос;
		//Получим данные упаковок где хранится марка по базе 1с
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Короб
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
		|ГДЕ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = &КМСсылка ИЛИ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = &КоробСсылка
		|	И НЕ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("КМСсылка", СтруктураСтроки.КМСсылка);
		Запрос.УстановитьПараметр("КоробСсылка", СтруктураСтроки.КоробСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда	
			Возврат Истина;		
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РазрешеноРедактированиеТовара(УзелПО,UserName)
	
	СтруктураПоиска = Новый Структура("Пользователь", Справочники.Пользователи.НайтиПоНаименованию(UserName, Ложь));
	СтрокиПользователиТСД = УзелПО.ПользователиТСД.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПользователиТСД.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат СтрокиПользователиТСД[0].РазрешитьРедактированиеТовара; 
	КонецЕсли;
	
КонецФункции
Функция РасшифроватьМаскуВвода(Маска, Серия)
	
	НоваяМаска = СтрЗаменить(Маска, ".", "");	

	//Считаем год
	гПозиция = Найти(НоваяМаска, "y"); //Позиция года в серии
	гДлина = СтрЧислоВхождений(НоваяМаска, "y");
	//Считаем месяц
	мПозиция = Найти(НоваяМаска, "m"); //Позиция года в серии
	мДлина = СтрЧислоВхождений(НоваяМаска, "m");
	//Считаем день
	дПозиция = Найти(НоваяМаска, "d"); //Позиция года в серии
	дДлина = СтрЧислоВхождений(НоваяМаска, "d");
	
	Год = Сред(Серия, гПозиция, гДлина);
	Месяц = Сред(Серия, мПозиция, мДлина);
	День = Сред(Серия, дПозиция, дДлина);
	
	Если СтрДлина(Год) = 2 Тогда
		Год = "20" + Год;
	КонецЕсли;
	
	ДатаСерии = Дата(Число(Год), Число(Месяц), Число(День));
	
	Возврат ДатаСерии;
	
КонецФункции
Функция СформироватьМаскуВвода(Маска, ДатаСерии)
	
	Серия = "";
	
	Попытка 
		НоваяМаска = СтрЗаменить(Маска, "m", "M");	
		Серия = Формат(ДатаСерии, "ДФ=" + НоваяМаска);	
	Исключение 	
	КонецПопытки;
	
	Возврат Серия;
	
КонецФункции
Процедура РазобратьТэгиGS1(СтрокаСерии,ДатаПроизводства11,ДатаОкончанияСрокаГодности17,НомерСерии)

	СтрокиGS1 = СтрЗаменить(СтрокаСерии, "[", Символы.ПС);
	
	Для Сч = 1 По 4 Цикл		
		ТекущийТэг = СтрПолучитьСтроку(СтрокиGS1, Сч);
		
		Если ТекущийТэг = "" Тогда
			Продолжить;
		КонецЕсли;	

		// РАЗБОР GS1 ТЭГОВ 
		Если СтрНайти(ТекущийТэг, "11]") > 0 Тогда // Тэг 11 (Дата производства)		
			Тэг11 = Сред(ТекущийТэг,4);  	
			Год11 =  "20" + Лев(Тэг11,2);
			День11 = Прав(Тэг11,2);
			Месяц11 = Прав(Лев(Тэг11,4),2);
			ДатаПроизв = Год11+Месяц11+День11;
			ДатаПроизводства11 = Дата(ДатаПроизв);
		ИначеЕсли СтрНайти(ТекущийТэг, "17]") > 0 Или СтрНайти(ТекущийТэг, "15]") > 0  Тогда // Тэг 17 (Дата окончания срока годности) Или Тэг 15 (Дата окончания использования) 			
			Тэг17 = Сред(ТекущийТэг,4);  	
			Год17 =  "20" + Лев(Тэг17,2);
			День17 = Прав(Тэг17,2);
			Месяц17 = Прав(Лев(Тэг17,4),2);
			ДатаОСГ = Год17+Месяц17+День17;
			ДатаОкончанияСрокаГодности17 = Дата(ДатаОСГ);
		ИначеЕсли СтрНайти(ТекущийТэг,"21]") > 0 Тогда // Тэг 21 (серийный номер)
			СерийныйНомер21 = Сред(ТекущийТэг,4);
			НомерСерии = СерийныйНомер21
		ИначеЕсли СтрНайти(ТекущийТэг,"10]") > 0 Тогда // Тэг 10 (партия)
			Партия10 = Сред(ТекущийТэг,4);
			НомерСерии = Партия10;
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры	

Функция ОпределитьНоменклатуруПоGTIN(лНоменклатура,лХарактеристика,GTIN)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод");
	
	Запрос.УстановитьПараметр("Штрихкод",GTIN);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		лНоменклатура = Выборка.Номенклатура;
		лХарактеристика = Выборка.Характеристика;
	КонецЕсли;	 
	
КонецФункции	
Функция ПолучитьЗначениеСерии(УзелПО, лТовар, лСерия, Insert = Ложь)
	
	ЗначениеСерии = ПолучитьЗначенияSNTypesСерии(лТовар, лСерия, УзелПО.СерииРассчитыватьГоденДо);	

	Возврат ЗначениеСерии;
	
КонецФункции	
Функция ПолучитьЗначенияSNTypesСерии(лТовар, лСерия, РасчитыватьГоденДо)
		
	МассивТекущейСерии = Новый Массив;
	
	Если ЗначениеЗаполнено(лТовар) И ЗначениеЗаполнено(лСерия) Тогда
		
		Если ЗначениеЗаполнено(лТовар.ВидНоменклатуры.ВладелецСерий) Тогда
			ТекущийВладелецСерий = лТовар.ВидНоменклатуры.ВладелецСерий;
		Иначе
			ТекущийВладелецСерий = лТовар.ВидНоменклатуры;
		КонецЕсли;		
		
		Попытка
			Если ТекущийВладелецСерий.ИспользоватьНомерСерии Тогда // (10)
				МассивТекущейСерии.Добавить(СокрЛП(лСерия.Номер));
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Если ТекущийВладелецСерий.ИспользоватьДатуПроизводстваСерии Тогда  // (11)
				МассивТекущейСерии.Добавить(Формат(лСерия.ДатаПроизводства, "ДФ=dd.MM.yy"));
			КонецЕсли; 	
		Исключение
		КонецПопытки;
		
		Попытка
			Если ТекущийВладелецСерий.ИспользоватьСрокГодностиСерии Тогда	// (17)
				Если РасчитыватьГоденДо И ЗначениеЗаполнено(лСерия.ДатаПроизводства) И ЗначениеЗаполнено(лТовар.СрокГодности) Тогда // расчет по настройке
					ГоденДо = РассчитатьГоденДоСерии(лТовар,лСерия.ДатаПроизводства);
					МассивТекущейСерии.Добавить(Формат(ГоденДо, "ДФ=dd.MM.yy"));
					
				Иначе
					МассивТекущейСерии.Добавить(Формат(лСерия.ГоденДо, "ДФ=dd.MM.yy"));
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	СтрокаJSON = "";
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.УстановитьСтроку(ПараметрыJSON);

	ЗаписатьJSON(Запись, МассивТекущейСерии, НастройкиСериализации);
	СтрокаJSON = Запись.Закрыть();

	Возврат СтрокаJSON;

КонецФункции
Функция ПолучитьМассивСерий(УзелПО, ТекущийСклад, лТовар, лХарактеристикаНоменклатуры, ТекущаяЯчейка,Шаблон);

	МассивСерий = Новый Массив;
	
	Если  ЗначениеЗаполнено(ТекущаяЯчейка) Тогда
		ЗапросСерийПоЯчейке = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|  ТоварыВЯчейкахОстатки.Серия КАК Серия
		|ИЗ
		|  РегистрНакопления.ТоварыВЯчейках.Остатки(
		|        ,
		|        Номенклатура = &Номенклатура 
		|        И Характеристика = &Характеристика
		|        И Ячейка = &Ячейка) КАК ТоварыВЯчейкахОстатки
		|ГДЕ
		|  ТоварыВЯчейкахОстатки.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		
		ЗапросСерийПоЯчейке.УстановитьПараметр("Номенклатура", лТовар);
		ЗапросСерийПоЯчейке.УстановитьПараметр("Характеристика", лХарактеристикаНоменклатуры);
		ЗапросСерийПоЯчейке.УстановитьПараметр("Ячейка", ТекущаяЯчейка);
		
		Возврат ЗапросСерийПоЯчейке.Выполнить().Выгрузить().ВыгрузитьКолонку("Серия");
		
	Иначе    
		ЗапросСерийПоСкладам = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|  ТоварыНаСкладах.Серия КАК Серия
		|ИЗ
		|  РегистрНакопления.ТоварыНаСкладах.Остатки(
		|      ,
		|      (&ВсеСклады
		|        ИЛИ Склад В (&Склады))
		|          И (&ВсеПомещения
		|            ИЛИ Помещение В (&Помещения))
		|          И Номенклатура = &Номенклатура
		|          И Характеристика = &Характеристика) КАК ТоварыНаСкладах
		|ГДЕ
		|  ТоварыНаСкладах.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		
		ЗапросСерийПоСкладам.УстановитьПараметр("Номенклатура", лТовар);
		ЗапросСерийПоСкладам.УстановитьПараметр("Характеристика", лХарактеристикаНоменклатуры);
		ЗапросСерийПоСкладам.УстановитьПараметр("Ячейка", ТекущаяЯчейка);
		
		Если ЗначениеЗаполнено(ТекущийСклад) Тогда
			ЗапросСерийПоСкладам.УстановитьПараметр("Склады", ТекущийСклад);
			ЗапросСерийПоСкладам.УстановитьПараметр("ВсеСклады", Ложь);
		Иначе  
			СписокСкладов = УзелПО.Склады.ВыгрузитьКолонку("Склад");
			ЗапросСерийПоСкладам.УстановитьПараметр("Склады", СписокСкладов);
			
			Если СписокСкладов <> Неопределено Тогда
				ЗапросСерийПоСкладам.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество() = 0);
			Иначе
				ЗапросСерийПоСкладам.УстановитьПараметр("ВсеСклады", Истина);
			КонецЕсли;  
		КонецЕсли;
		
		СписокПомещений = УзелПО.Помещения.ВыгрузитьКолонку("Помещение");
		ЗапросСерийПоСкладам.УстановитьПараметр("Помещения", СписокПомещений);
		
		Если СписокПомещений <> Неопределено Тогда 
			ЗапросСерийПоСкладам.УстановитьПараметр("ВсеПомещения",СписокПомещений.Количество() = 0);
		Иначе
			ЗапросСерийПоСкладам.УстановитьПараметр("ВсеПомещения", Истина);
		КонецЕсли;
		
		Возврат ЗапросСерийПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Серия");
		
	КонецЕсли; 

КонецФункции

Процедура РазобратьСтрокуСерииПоSNTypes(СтрокаСерии, ДатаПроизводства11, ДатаОкончанияСрокаГодности17, НомерСерии, лТовар, РасчитатьГоденДо)
	
	Если Не ЗначениеЗаполнено(лТовар) Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(лТовар.ВидНоменклатуры.ВладелецСерий) Тогда
		ТекущийВладелецСерий = лТовар.ВидНоменклатуры.ВладелецСерий;
	Иначе
		ТекущийВладелецСерий = лТовар.ВидНоменклатуры;
	КонецЕсли;						
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаСерии);
	МассивТекущейСерии = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	ПорядковыйНомерМассива = 0;
	
	Попытка
		Если ТекущийВладелецСерий.ИспользоватьНомерСерии Тогда //(10)
			ПорядковыйНомерМассива = ПорядковыйНомерМассива + 1;
			НомерСерии = МассивТекущейСерии[ПорядковыйНомерМассива - 1];		
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если ТекущийВладелецСерий.ИспользоватьДатуПроизводстваСерии Тогда  //(11)
			ПорядковыйНомерМассива = ПорядковыйНомерМассива + 1;
			ДатаПроизводства11 = МассивТекущейСерии[ПорядковыйНомерМассива - 1];    //07.05.21	
			ДатаПроизводства11 = СтрЗаменить(ДатаПроизводства11, ".", "");				
			ДатаПроизводства11 = РасшифроватьМаскуВвода("dd.mm.yy", ДатаПроизводства11);
		КонецЕсли; 	
	Исключение
	КонецПопытки;
	
	Попытка
		Если ТекущийВладелецСерий.ИспользоватьСрокГодностиСерии Тогда	//(17)
			Если РасчитатьГоденДо И ЗначениеЗаполнено(ДатаПроизводства11) И ЗначениеЗаполнено(лТовар.СрокГодности) Тогда // расчет по настройке
				ДатаОкончанияСрокаГодности17 = РассчитатьГоденДоСерии(лТовар,ДатаПроизводства11);				
			Иначе
				ПорядковыйНомерМассива = ПорядковыйНомерМассива + 1;
				ДатаОкончанияСрокаГодности17 = МассивТекущейСерии[ПорядковыйНомерМассива-1];	 //07.05.21
				ДатаОкончанияСрокаГодности17 = СтрЗаменить(ДатаОкончанияСрокаГодности17, ".", "");				
				ДатаОкончанияСрокаГодности17 = РасшифроватьМаскуВвода("dd.mm.yy", ДатаОкончанияСрокаГодности17);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
КонецПроцедуры
Функция РассчитатьГоденДоСерии(лТовар,лДатаПроизводства)
	
	СрокГодности   = лТовар.СрокГодности; 
	СрокГодностиЕд = лТовар.ЕдиницаИзмеренияСрокаГодности;
	ГоденДо17      = Дата(1,1,1);
	
	Если СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Секунда Тогда
		ГоденДо17 = лДатаПроизводства + СрокГодности * 1;
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Минута Тогда
		ГоденДо17 = лДатаПроизводства + СрокГодности * 60;
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
		ГоденДо17 = лДатаПроизводства + СрокГодности * 60*60;
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.День Тогда
		ГоденДо17 = лДатаПроизводства + СрокГодности * 60*60*12;
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Сутки Тогда
		ГоденДо17 = лДатаПроизводства + СрокГодности * 60*60*24;
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Месяц Тогда
		ГоденДо17 = ДобавитьМесяц(лДатаПроизводства, СрокГодности * 1);
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Год Тогда
		ГоденДо17 = ДобавитьМесяц(лДатаПроизводства, СрокГодности * 12);
	КонецЕсли; 
	
	Возврат ГоденДо17;
	
КонецФункции
#Область JSONSettings
Функция СформироватьСтрокуJSONИзСтруктуры(Объект)
 
    СтрокаJSON = "{";
 
    Для каждого Элемент Из Объект Цикл
 
		//Если Элемент.Значение = "" Тогда
		//    Продолжить;
		//КонецЕсли;
 
        СтрокаJSON = СтрокаJSON + """" + Элемент.Ключ + """" + ":";
 
        Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
            СтрокаJSON = СтрокаJSON + """" + СтрЗаменить(Элемент.Значение, """", "\""") + """";
 
        ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
            СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент.Значение), Символы.НПП, "");
 
        ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
            СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение, "БЛ=false; БИ=true");
 
        ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
            // преобразование в unixtime
            СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение - Дата(1970,1,1,1,0,0), "ЧГ=0");
 
        ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
            СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
 
        ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
            СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
 
        ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
            СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
 
        Иначе
            СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент.Значение)) + """";
 
        КонецЕсли;
 
        СтрокаJSON = СтрокаJSON + ",";
 
    КонецЦикла;
 
    Если Прав(СтрокаJSON, 1) = "," Тогда
        СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
    КонецЕсли;
 
    Возврат СтрокаJSON + "}";
 
КонецФункции
Функция СформироватьСтрокуJSON(Объект)
 
    СтрокаJSON = "";
 
    Если ТипЗнч(Объект) = Тип("Массив") Тогда
        СтрокаJSON = СформироватьСтрокуJSONИзМассива(Объект);
 
    ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
        СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Объект);
 
    ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
        // преобразуем таблицу значений в массив структур - работает дольше, но кода меньше
        // Если нужна скорость, то нужно отдельно обработать таблицу значений
 
        СоставСтруктуры = "";
		
		Для каждого Колонка Из Объект.Колонки Цикл
            СоставСтруктуры = СоставСтруктуры + ?(ЗначениеЗаполнено(СоставСтруктуры), ",", "") + Колонка.Имя;
        КонецЦикла;
 
        МассивСтрок = Новый Массив;
		
		Для каждого Строка Из Объект Цикл
            СтруктураКолонок = Новый Структура(СоставСтруктуры);
            ЗаполнитьЗначенияСвойств(СтруктураКолонок, Строка);
            МассивСтрок.Добавить(СтруктураКолонок);
        КонецЦикла;
 
        СтрокаJSON = СформироватьСтрокуJSONИзМассива(МассивСтрок);
 
    КонецЕсли;
 
    Возврат СтрокаJSON;
 
КонецФункции
Функция СформироватьСтрокуJSONИзМассива(Объект)
 
    СтрокаJSON = "[";
 
    Для каждого Элемент Из Объект Цикл
 
        Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + СтрЗаменить(Элемент, """", "\""") + """";
 
        ИначеЕсли ТипЗнч(Элемент) = Тип("Число") Тогда
            СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент), Символы.НПП, "");
 
        ИначеЕсли ТипЗнч(Элемент) = Тип("Булево") Тогда
            СтрокаJSON = СтрокаJSON + Формат(Элемент, "БЛ=false; БИ=true");
 
        ИначеЕсли ТипЗнч(Элемент) = Тип("Дата") Тогда
            // преобразование в unixtime
            СтрокаJSON = СтрокаJSON + Формат(Элемент - Дата(1970,1,1,1,0,0), "ЧГ=0");
 
        ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
            СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
 
        ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
            СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
 
        ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда
            СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
 
        Иначе
            СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент)) + """";
 
        КонецЕсли;
 
        СтрокаJSON = СтрокаJSON + ",";
    КонецЦикла;
 
    Если Прав(СтрокаJSON, 1) = "," Тогда
        СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
    КонецЕсли;
 
    Возврат СтрокаJSON + "]";
 
КонецФункции
Функция URLEncode(стр)
 
	Длина = СтрДлина(Стр);
	Итог = "";
	
	Для Сч = 1 По Длина Цикл
		Знак = Сред(Стр, Сч, 1);
		Код = КодСимвола(Знак);
		
		Если ((Знак>= "a") И (Знак<= "z")) Или
			((Знак>= "A") И (Знак<= "Z")) Или
			((Знак>= "0") И (Знак<= "9")) Тогда
			Итог = Итог + Знак;
		Иначе
			Если (Код>= КодСимвола("А")) И (Код<= КодСимвола("п")) Тогда
				Итог = Итог + "%" + ПреобразоватьвСистему(208, 16) + "%" + ПреобразоватьвСистему(144 + Код-КодСимвола("А"), 16);
			ИначеЕсли (Код>= КодСимвола("р")) И (Код<= КодСимвола("я")) Тогда
				Итог = Итог + "%" + ПреобразоватьвСистему(209, 16) + "%" + ПреобразоватьвСистему(128 + Код-КодСимвола("р"), 16);
			ИначеЕсли (Знак = "ё") Тогда
				Итог = Итог + "%" + ПреобразоватьвСистему(209, 16) + "%" + ПреобразоватьвСистему(145, 16);
			ИначеЕсли (Знак = "Ё") Тогда
				Итог = Итог + "%" + ПреобразоватьвСистему(208, 16) + "%" + ПреобразоватьвСистему(129, 16);
			Иначе
				Итог = Итог + "%" + ПреобразоватьвСистему(Код, 16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Итог;
 
КонецФункции
Функция ПреобразоватьвСистему(Число10, Система)
 
    Если Система > 36 Или Система < 2 Тогда
        Сообщить("Выбранная система исчисления не поддерживается");
        Возврат -1;
    КонецЕсли;
 
    СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    СтрокаСистема = "";
	
	Пока Число10 > 0 Цикл
        РезДеления = Число10/Система;
        ЧислоСистема = Цел(РезДеления);
        остатокОтДеления = Число10 - Система*(ЧислоСистема);
        СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления + 1, 1) + СтрокаСистема;
        Число10 = ?(ЧислоСистема = 0, 0, РезДеления); 
    КонецЦикла;
 
    Нечётное = СтрДлина(СтрокаСистема) - Цел(СтрДлина(СтрокаСистема)/2)*2;
	
	Если Нечётное Тогда
        СтрокаСистема = "0" + СтрокаСистема;
    КонецЕсли;
 
    Возврат СтрокаСистема;
 
КонецФункции

Функция СформироватьЗаголовкиJSONParamsШаблона(ШаблонСсылка)
	
	СтрокаJSON = "";
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.УстановитьСтроку(ПараметрыJSON);
	
	Данные = Новый Структура;
	Данные.Вставить("isUnloadCompletedDoc", ШаблонСсылка.ВыгружатьВыполненныйНаТСДДокументАвтоматически);
	Данные.Вставить("isUnloadCompletedChildDoc", ШаблонСсылка.ВыгружатьВыполненныйНаТСДДочернийДокументАвтоматически);
	Данные.Вставить("qtyInPack", ШаблонСсылка.МаркировкаКоличествоЕдиницВУпаковкеПриАгрегации);
	Данные.Вставить("getSnListFromServer", ШаблонСсылка.ЗагружатьСписокСерийССервера);
	Данные.Вставить("useWarehouse2", ШаблонСсылка.ИспользоватьВторойСклад);
	Данные.Вставить("searchBarcodePriority", ?(ШаблонСсылка.ПервичныйПоискПоШКвЗадании, 1, 0));
	Данные.Вставить("is_check_pack_by_task_select", ШаблонСсылка.ПодборПроверкаУпаковочныхЛистовПоЗаданию); 
	
	Данные.Вставить("checkOwnerKm", ШаблонСсылка.МаркировкаПроверкаВладельцаКМ);
	Данные.Вставить("checkStatusKm", ШаблонСсылка.МаркировкаПроверкаСтатусаКМ);
	МассивСохраненныхСтатусовКМ = ДатаМобайл_ОбщийМодуль.РазложитьСтрокуВМассивЧисловыхПодстрокДМ(ШаблонСсылка.МаркировкаРазрешенныеСтатусыКМ);
	Данные.Вставить("allowedStatuses", МассивСохраненныхСтатусовКМ);
	
	Если ШаблонСсылка.ИспользованиеСерийниковПодбор<>0 Или ШаблонСсылка.ИспользованиеСерийниковПриемка<>0 Тогда
		Данные.Вставить("isMultiSnLogic", Истина);
	КонецЕсли;
	
	Данные.Вставить("is_ignore_art_mismatch_by_ean_km", ШаблонСсылка.МаркировкаИгнорироватьНесоответствиеТовараПоЕАNиКМ);
	
	ЗаписатьJSON(Запись, Данные, НастройкиСериализации);
	СтрокаJSON = Запись.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции
Функция СформироватьЗаголовкиJSONParamsДокумента(СсылкаДокумента)
	
	СтрокаJSON = "";
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.УстановитьСтроку(ПараметрыJSON);
	
	Если СсылкаДокумента.СписокДокументов.Количество()>0 Тогда
		IsParent = Истина;
	Иначе
		IsParent = Ложь;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СсылкаДокумента.РодительскийДокумент) Тогда
		ParentDocOutID = "d82-"+Строка(СсылкаДокумента.РодительскийДокумент.УникальныйИдентификатор());
	Иначе
		ParentDocOutID = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДокумента.Организация) Тогда
		Попытка inn = СсылкаДокумента.Организация.ИНН; Исключение inn = ""; КонецПопытки;
	Иначе
		inn = "";
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("ParentDocOutID", ParentDocOutID);
	Данные.Вставить("IsParent", IsParent);
	Данные.Вставить("priority", СсылкаДокумента.Приоритет);
	Данные.Вставить("inn", inn);
	
	ЗаписатьJSON(Запись, Данные, НастройкиСериализации);
	СтрокаJSON = Запись.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции
Функция СформироватьЗаголовкиJSONParamsТовара(СсылкаТовара, DMUseSN = Ложь, Шаблон = Неопределено, УзелПО = Неопределено)
	
	РассчитатьГоденДо = ?(УзелПО = Неопределено, Истина, УзелПО.СерииРассчитыватьГоденДо);
	Данные = Новый Структура;			
	
	Если DMUseSN Тогда
		
		МассивТиповСерийныхНомеров = Новый Массив;
		
		Если ЗначениеЗаполнено(СсылкаТовара.ВидНоменклатуры.ВладелецСерий) Тогда
			ТекущийВладелецСерий = СсылкаТовара.ВидНоменклатуры.ВладелецСерий;
		Иначе
			ТекущийВладелецСерий = СсылкаТовара.ВидНоменклатуры;
		КонецЕсли;	
		
		Попытка 
			Если ТекущийВладелецСерий.ИспользоватьНомерСерии Тогда //(10)
				МассивТиповСерийныхНомеров.Добавить("10");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Если ТекущийВладелецСерий.ИспользоватьДатуПроизводстваСерии Тогда  //(11)
				МассивТиповСерийныхНомеров.Добавить("11");
			КонецЕсли; 	
		Исключение
		КонецПопытки;
		
		Попытка
			Если ТекущийВладелецСерий.ИспользоватьСрокГодностиСерии Тогда	//(17)
				Если РассчитатьГоденДо И ЗначениеЗаполнено(СсылкаТовара.СрокГодности) И ТекущийВладелецСерий.ИспользоватьДатуПроизводстваСерии Тогда
					// не выгружаем тип серийного номера для даты срока годности
				Иначе
					МассивТиповСерийныхНомеров.Добавить("17");
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		ДопускОСГ =  ПолучитьДопускОСГ(СсылкаТовара);		
		
		Данные.Вставить("snTypes", МассивТиповСерийныхНомеров);
		
		Если ДопускОСГ <> Неопределено Тогда
			Данные.Вставить("remaining_expiration_date_in_days", ДопускОСГ);
		КонецЕсли; 		
	КонецЕсли;
	
	СтрокаJSON = "";
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.УстановитьСтроку(ПараметрыJSON);
	
	ЗаписатьJSON(Запись, Данные, НастройкиСериализации);
	СтрокаJSON = Запись.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции
Функция СформироватьЗаголовкиJSONParamsСтрокиДокумента(СсылкаТовара, СсылкаДокумента, СтрокаДока = Неопределено)
	
	Данные = Новый Структура;
	
	Попытка 
		Если СсылкаТовара.ВидНоменклатуры.ИспользоватьСерии Тогда		
			ДопускОСГ =  ПолучитьДопускОСГ(СсылкаТовара,СсылкаДокумента.Клиент);
			
			Если ДопускОСГ <> Неопределено Тогда
				Данные.Вставить("remaining_expiration_date_in_days", ДопускОСГ);
			КонецЕсли;
		КонецЕсли;		
	Исключение 
	КонецПопытки;
	
	КоличествоМест =  ПолучитьКоличествоМест(СсылкаДокумента,СтрокаДока);
	
	Если КоличествоМест<>Неопределено Тогда	
		Данные.Вставить("place_qty", КоличествоМест);	
	КонецЕсли;
	
	СтрокаJSON = "";
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.УстановитьСтроку(ПараметрыJSON);
	
	ЗаписатьJSON(Запись, Данные, НастройкиСериализации);
	СтрокаJSON = Запись.Закрыть();
	
	Возврат СтрокаJSON; 
	
КонецФункции	
#КонецОбласти

#КонецОбласти

//НЕ ИСПОЛЬЗУЮТСЯ - ФУНКЦИИ ЕГАИС ОПТ
#Область ФункцииЕГАИСОПТ
 
Функция GetTemplates_EGAIS(SN, UserName)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMTemplateList_EGAIS"));
	Возврат ОбъектСписка;

КонецФункции
Функция CreateDoc_EGAIS(SN, UserName, DocOutID, TemplateID)
	
	ОбъектДока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocHead_EGAIS"));
	Возврат ОбъектДока;

КонецФункции
Функция GetDocHeads_EGAIS(SN, UserName, DMDocsIDs)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocList_EGAIS"));
	Возврат ОбъектСписка;
	
КонецФункции
Функция WriteDoc_EGAIS(SN, UserName, DocHead_EGAIS, DocRowsSelect, Params)
	Возврат Истина;
КонецФункции
Функция OnArtEgaisScan_EGAIS(SN, UserName, ArtID, Barcode, BarcodeBox, PDFBarcode, DocOutID, Cell, DataMatrix)
	
	ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMOnEgaisArtScanResponse"));
	Возврат ОбъектТовара;
	
КонецФункции
Функция OnNewPack_EGAIS(SN, UserName, DocOutID)
	
	Возврат "";
	
КонецФункции
Функция OnWritePackSelect_EGAIS(SN, UserName, DocOutID, DocRowsSelect)
	
	Возврат Истина;  
	
КонецФункции
Функция OnWriteBoxSelect_EGAIS(SN, UserName, DocOutID, DocRowsSelect)
	
	Возврат Истина;  
	
КонецФункции
Функция SetDocCarantin_EGAIS(SN, UserName, DocOutID)
	
	Возврат Истина; 
	
КонецФункции
Функция OnDocScan_EGAIS(SN, UserName, Barcode)
	
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMDocList_EGAIS"));
	Возврат ОбъектСписка;
	
КонецФункции

#КонецОбласти

//НЕ ИСПОЛЬЗУЮТСЯ - СТАРЫЕ ФУНКЦИИ ВЕБ СЕРВИСА
#Область СтарыеФункции
Функция OnCellScan(SN, UserName, Barcode, DocID)
	
	//Не используется
	ОбъектЯчейки = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMCell"));
	Возврат ОбъектЯчейки; 
	
КонецФункции
Функция IsNewDocs(SN, UserName)
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.DMNewDocs) КАК DMNewDocs
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|		ИСТИНА КАК DMNewDocs
	|	ИЗ
	|		Справочник.ДатаМобайл_ДокументыТСД.Изменения КАК ДатаМобайл_ДокументыТСДИзменения
	|	ГДЕ
	|		ДатаМобайл_ДокументыТСДИзменения.Узел = &Узел) КАК ВложенныйЗапрос");
	
	Запрос.УстановитьПараметр("Узел",УзелПО.Ссылка);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		Возврат Рез.DMNewDocs;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
Функция OnCommitAutoInsertOnSelect(SN, UserName, Barcode, DocOutID)
	
	//Не используется
	Возврат Истина;
	
КонецФункции
Функция GetArtsDrafts(SN, UserName) 
	
	//Не используется
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtList"));
	Возврат ОбъектСписка; 
	
КонецФункции
Функция GetArtCells(SN, UserName, DocID, ArtID)
	
	//Не используется
	ОбъектСписка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMCellList"));	
	Возврат ОбъектСписка;
	
КонецФункции
Функция GetQtyInPack(Params)

	//Перем device_id, UserName;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Device","");
	СтруктураПараметров.Вставить("UserName","");
	СтруктураПараметров.Вставить("DocOutID","");
	
	ПрочитатьВсеВходящиеПараметрыИзJSON(Params, СтруктураПараметров);
	
	SN = СтруктураПараметров.Device;
	UserName =  СтруктураПараметров.UserName;
	DocOutID =  СтруктураПараметров.DocOutID;
	
	УзелПО = НайтиУзел(SN);
	Если УзелПО = Неопределено Тогда
		УзелПО = NewTSD(SN, UserName);
	КонецЕсли;

	Попытка
		СсылкаНаДок=Справочники.ДатаМобайл_ДокументыТСД.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(DocOutID,5)));
	Исключение	
		ВызватьИсключениеВС("GetQtyInPack. Не найден документ. ");
		Возврат "";
	КонецПопытки;
	
	Если Не СсылкаНаДок.ТСД.Пустая() Тогда
		Если СсылкаНаДок.ТСД<>УзелПО Тогда
			ВызватьИсключениеВС("GetQtyInPack. Чужой документ. ");
			Возврат "";
		КонецЕсли;	
	КонецЕсли;	
	
	Если СсылкаНаДок.ДатаЗавершенияСбора<>Дата(1,1,1) Тогда
		ВызватьИсключениеВС("GetQtyInPack. Закрытый документ. ");
		Возврат "";
	КонецЕсли;	
	
	Шаблон = СсылкаНаДок.Шаблон;
	
	QtyInPack = Шаблон.МаркировкаКоличествоЕдиницВУпаковкеПриАгрегации;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	
	Данные = Новый Структура;
	Данные.Вставить("QtyInPack", QtyInPack);
	
	ЗаписатьJSON(ЗаписьJSON, Данные);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;			
	
КонецФункции
Функция SendArtToPrint2(SN, UserName, ArtID, Barcode, Count, QtyInt, QtyFrac)

	Если Count = 0 Тогда
		ВызватьИсключениеВС("SendArtToPrint. Не указано количество этикеток для печати. ");
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураParams = Новый Структура;
	СтруктураParams.Вставить("QtyInt",QtyInt);
	СтруктураParams.Вставить("QtyFrac",QtyFrac);
	СтруктураParams.Вставить("snValues","");
	СтруктураParams.Вставить("MeasureName","");
	СтруктураParams.Вставить("isKM","");
	СтруктураParams.Вставить("GS1", "");
	СтруктураParams.Вставить("IsNeedPrintCopy", "");
	
	Возврат SendArtToPrint_main(SN, UserName, ArtID, Barcode, Count, СтруктураParams);
	
КонецФункции
Функция SendArtToPrintKM(SN, UserName, ArtID, Barcode, Count)
	
	Если Count = 0 Тогда
		ВызватьИсключениеВС("SendArtToPrint. Не указано количество этикеток для печати. ");
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураParams = Новый Структура;
	СтруктураParams.Вставить("QtyInt","");
	СтруктураParams.Вставить("QtyFrac","");
	СтруктураParams.Вставить("snValues","");
	СтруктураParams.Вставить("MeasureName","");
	СтруктураParams.Вставить("isKM","1");
	СтруктураParams.Вставить("GS1", "");
	СтруктураParams.Вставить("IsNeedPrintCopy", "");
	
	Возврат SendArtToPrint_main(SN, UserName, ArtID, Barcode, Count, СтруктураParams);
	
КонецФункции

#КонецОбласти






