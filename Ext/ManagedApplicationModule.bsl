///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

//РаботаСВнешнимОборудованием
Перем глПодключаемоеОборудование Экспорт; // для кэширования на клиенте
Перем глПодключаемоеОборудованиеСобытиеОбработано Экспорт; // для предотвращения повторной обработки события
Перем глДоступныеТипыОборудования Экспорт;
//Конец РаботаСВнешнимОборудованием

//++ НЕ ГОСИС
// ЭлектронноеВзаимодействие
Перем ПараметрыПодсистемыОбменСБанками Экспорт;
// При соответствующих настройках сертификата ЭП в соответствии будут храниться пары Сертификат-Пароль (в данном сеансе)
Перем СоответствиеСертификатаИПароля Экспорт;
// Конец ЭлектронноеВзаимодействие

Перем глКомпонентаОбменаСМобильнымиПриложениями Экспорт;
Перем глФормаНачальнойНастройкиПрограммы Экспорт;
//-- НЕ ГОСИС

// СтандартныеПодсистемы

// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие - хранилище переменных, где:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Инициализация (на примере СообщенияДляЖурналаРегистрации):
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Использование (на примере СообщенияДляЖурналаРегистрации):
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
Перем ПараметрыПриложения Экспорт;

// Конец СтандартныеПодсистемы

// ТехнологияСервиса
Перем ОповещениеПриПримененииЗапросовНаИспользованиеВнешнихРесурсовВМоделиСервиса Экспорт;
// Конец ТехнологияСервиса

// Параметры для фоновых заданий
Перем ПараметрыПроверкиФоновыхЗаданий Экспорт;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередНачаломРаботыСистемы()
	
	//++ НЕ ГОСИС
	глФормаНачальнойНастройкиПрограммы = ОткрытиеФормПриНачалеРаботыСистемыВызовСервера.ФормаНачальнойНастройкиПрограммы();
	//-- НЕ ГОСИС
	
	// --> Евлахов Игорь Николаевич (Начало) 30.05.2024
	// Задача #4182
	// Требуется вызывать после того как инициализированы стандартные подсистемы
	// Начало было
	//// << 13.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-991
	//КР_ЛокализацияИнформационнойБазыКлиент.ПередНачаломРаботыСистемы();
	//// >> 13.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-991
	// Конец было
	// <-- Евлахов Игорь Николаевич (Конец) 30.05.2024
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы();
	// Конец СтандартныеПодсистемы
	
	// --> Евлахов Игорь Николаевич (Начало) 30.05.2024
	// Задача #4182
	// Переместил вызов после инициализации стандартных подсистем
	// << 13.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-991
	КР_ЛокализацияИнформационнойБазыКлиент.ПередНачаломРаботыСистемы();
	// >> 13.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-991
	// <-- Евлахов Игорь Николаевич (Конец) 30.05.2024
	
	//++ Локализация
	//++ НЕ ГОСИС
	// ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователейКлиент.ПередНачаломРаботыСистемы();
	// Конец ИнтернетПоддержкаПользователей
	//-- НЕ ГОСИС
	//-- Локализация
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.ПередНачаломРаботыСистемы();
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	// Конец СтандартныеПодсистемы
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();
	// Конец ПодключаемоеОборудование
	
	Если глКомпонентаОбменаСМобильнымиПриложениями <> Неопределено Тогда
		
		Попытка
			глКомпонентаОбменаСМобильнымиПриложениями.Отключить(0);
		Исключение
			ИмяСобытия = НСтр("ru='Ошибка при отключении компоненты обмена данными'");
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			ИмяСобытия,
			"Ошибка",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,Истина);
		КонецПопытки;
		
		глКомпонентаОбменаСМобильнымиПриложениями = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	
	//++ НЕ ГОСИС
	Если Лев(Источник, 17) = "MobileApplication" Тогда
		МобильныеПриложенияКлиент.ОбработатьВнешнееСобытиеОтМобильногоПриложения(Источник, Событие, Данные);
		Возврат;
	КонецЕсли;
	//-- НЕ ГОСИС
	
	глПодключаемоеОборудованиеСобытиеОбработано = Ложь;
	
	//РаботаСВнешнимОборудованием
	// Подготовить данные
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";
	
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);
	
	// Передать на обработку данные
	Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='При обработке внешнего события от устройства произошла ошибка.'")
		                                                 + Символы.ПС + ОписаниеОшибки);
	КонецЕсли;
	//Конец РаботаСВнешнимОборудованием
	
КонецПроцедуры

Процедура ОбработкаПолученияФормыВыбораПользователейСистемыВзаимодействия(НазначениеВыбора, Форма, ИдентификаторОбсуждения, Параметры, ВыбраннаяФорма, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Обсуждения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
	
		МодульОбсужденияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияСлужебныйКлиент");
		МодульОбсужденияСлужебныйКлиент.ПриПолученииФормыВыбораПользователейСистемыВзаимодействия(НазначениеВыбора, Форма, ИдентификаторОбсуждения, Параметры, ВыбраннаяФорма, СтандартнаяОбработка);
	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Обсуждения
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//Петухов А.В.  24.10.2023  #3269   {
Процедура ПроверитьОбновлениеКонфигурацииZolla() Экспорт

	// << 24.07.2024 Петухов А.В., Фактор, #4316
	//Если ОбновлениеКонфигурацииКлиент.ПоддерживаетсяУстановкаОбновлений().Поддерживается Тогда		// Проверка прав, типа ИБ и типа клиента 
	//	КаталогОбновлений = злОбновлениеКонфигурацииВызовСервера.КаталогОбновлений();
	//	Если КаталогОбновлений <> "" Тогда															// Существует каталог обновлений Zolla
	//		Если НЕ злОбновлениеКонфигурацииВызовСервера.ВыполняетсяПроцессОбновления() Тогда		// Проверка незавершенной процедуры обновления
	//			ПервыйФайл = злОбновлениеКонфигурацииКлиент.ПервыйФайлОбновления(КаталогОбновлений);
	//			Если ПервыйФайл <> Неопределено Тогда												// Есть файл обновления в каталоге обновлений Zolla
	//				ОтключитьОбработчикОжидания("ПроверитьОбновлениеКонфигурацииZolla");
	//				злОбновлениеКонфигурацииКлиент.ЗапуститьОбновлениеКонфигурации(ПервыйФайл);
	//			Иначе
	//				ПодключитьОбработчикОжидания("ПроверитьОбновлениеКонфигурацииZolla", 60, Истина);
	//			КонецЕсли;
	//		Иначе
	//			ПодключитьОбработчикОжидания("ПроверитьОбновлениеКонфигурацииZolla", 60, Истина);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	ПериодичностьОбновления = 60;
	ТекущееСостояние = злОбновлениеКонфигурацииВызовСервера.СостояниеОбновления();
	Если ТекущееСостояние <> Неопределено Тогда
		Если ТекущееСостояние.Статус <> ПредопределенноеЗначение("Перечисление.злСтатусыОбновленияКонфигурации.ВыполняетсяОбновление") Тогда
			ИмяПользователя = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ПользователиКлиент.ТекущийПользователь(), "Наименование");
			Если СокрЛП(ИмяПользователя) = "zlUpdater" Тогда
				ИмяПользователяИБ = злОбновлениеКонфигурацииВызовСервера.ИмяУстановщика(ТекущееСостояние.Версия, ТекущееСостояние.КлючСообщения);
				ЗавершитьРаботуСистемы(Ложь, Истина, "/P """" /N """+СтрЗаменить(ИмяПользователяИБ,"""","""""")+"""");
			КонецЕсли;
		КонецЕсли;
		Если ТекущееСостояние.Статус = ПредопределенноеЗначение("Перечисление.злСтатусыОбновленияКонфигурации.ПолученФайлОбновления") Тогда
			// Оповещение об обновлении
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьОбновлениеКонфигурации", ОбщегоНазначенияКлиент.ОбщийМодуль("злОбновлениеКонфигурацииКлиент"), ТекущееСостояние.ИмяФайла); 
			ПоказатьОповещениеПользователя(
			"Доступно обновление конфигурации.",
			ОписаниеОповещения,
			"Получен файл обновления конфигурации. Нажмите для запуска процедуры обновления.",
			,
			СтатусОповещенияПользователя.Важное,
			"злОбновлениеКонфигурации");
			ПодключитьОбработчикОжидания("ПроверитьОбновлениеКонфигурацииZolla", ПериодичностьОбновления, Истина);
		ИначеЕсли ТекущееСостояние.Статус = ПредопределенноеЗначение("Перечисление.злСтатусыОбновленияКонфигурации.ВыполняетсяОбновление") Тогда
			// Проверка соответствия регистра и константы
			Если НЕ злОбновлениеКонфигурацииВызовСервера.ВыполняетсяПроцессОбновления() Тогда		// Проверка незавершенной процедуры обновления
				злОбновлениеКонфигурацииВызовСервера.ИзменитьСостояниеОбновления(ТекущееСостояние.Версия, 
				ПредопределенноеЗначение("Перечисление.злСтатусыОбновленияКонфигурации.ПроцедураОбновленияЗавершенаСОшибкой"),
				"Процесс обновления не выполняется. Перевод в ошибку");
				ПодключитьОбработчикОжидания("ПроверитьОбновлениеКонфигурацииZolla", ПериодичностьОбновления, Истина);
			Иначе
				ИмяПользователя = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ПользователиКлиент.ТекущийПользователь(), "Наименование");
				Если СокрЛП(ИмяПользователя) = "zlUpdater" Тогда
					ПодключитьОбработчикОжидания("ПроверитьОбновлениеКонфигурацииZolla", 5, Истина);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТекущееСостояние.Статус = ПредопределенноеЗначение("Перечисление.злСтатусыОбновленияКонфигурации.ПроцедураОбновленияЗавершенаСОшибкой") Тогда
			Если ТекущееСостояние.КоличествоОшибок < 2 Тогда
				Отказ = Ложь;
				ТекстОшибки = "";
				злОбновлениеКонфигурацииВызовСервера.РаспаковатьФайлОбновленияИзСообщения(ТекущееСостояние.КлючСообщения, Отказ, ТекстОшибки);
				Если Не Отказ Тогда
					// Оповещение о повторном обновлении
					ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьОбновлениеКонфигурации", ОбщегоНазначенияКлиент.ОбщийМодуль("злОбновлениеКонфигурацииКлиент"), ТекущееСостояние.ИмяФайла); 
					ПоказатьОповещениеПользователя(
					"Доступно обновление конфигурации.",
					ОписаниеОповещения,
					"Предыдущая попытка обновления завершилась с ошибкой. Нажмите для повторного запуска процедуры обновления.",
					,
					СтатусОповещенияПользователя.Важное,
					"злОбновлениеКонфигурации");
				Иначе
					злОбновлениеКонфигурацииВызовСервера.ИзменитьСостояниеОбновления(ТекущееСостояние.Версия, 
					ПредопределенноеЗначение("Перечисление.злСтатусыОбновленияКонфигурации.ОбновлениеОтменено"),
					СтрШаблон("Ошибка выгрузки файла сообщения: %1", ТекстОшибки));
				КонецЕсли;
			Иначе
				злОбновлениеКонфигурацииВызовСервера.ИзменитьСостояниеОбновления(ТекущееСостояние.Версия, 
				ПредопределенноеЗначение("Перечисление.злСтатусыОбновленияКонфигурации.ОбновлениеОтменено"),
				"Обновление отменено после двух ошибок");
			КонецЕсли;
			ПодключитьОбработчикОжидания("ПроверитьОбновлениеКонфигурацииZolla", ПериодичностьОбновления, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ПроверитьОбновлениеКонфигурацииZolla", ПериодичностьОбновления, Истина);
		КонецЕсли;
	Иначе
		ИмяПользователя = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ПользователиКлиент.ТекущийПользователь(), "Наименование");
		Если СокрЛП(ИмяПользователя) = "zlUpdater" Тогда
			//ЗавершитьРаботуСистемы(Ложь, Истина, "/P """" /N");
			ИмяПользователяИБ = злОбновлениеКонфигурацииВызовСервера.ИмяУстановщика();
			ЗавершитьРаботуСистемы(Ложь, Истина, "/P """" /N """+СтрЗаменить(ИмяПользователяИБ,"""","""""")+"""");
		Иначе
			ПодключитьОбработчикОжидания("ПроверитьОбновлениеКонфигурацииZolla", ПериодичностьОбновления, Истина);
		КонецЕсли;
	КонецЕсли;
	// >> 24.07.2024 Петухов А.В., Фактор, #4316

КонецПроцедуры
//}	

#КонецОбласти

#Область Инициализация

//++ НЕ ГОСИС
глНомерКонтейнераСбербанк     = 0;
глУстановленКаналСоСбербанком = Ложь;
//-- НЕ ГОСИС

глПодключаемоеОборудованиеСобытиеОбработано = Ложь;

#КонецОбласти
