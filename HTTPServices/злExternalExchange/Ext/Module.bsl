////////////////////////////////////////////////////
//// Объект Модуль.ExternalExchange
//// Создан: 05.10.2023 Петухов А.В., , #2984

#Область Операции

Функция Operation_post(Запрос)
	
	ИмяМетода = НРег(Запрос.ПараметрыURL.Получить("Act"));
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ПараметрыЗапроса = СтруктураПараметровЗапроса(Запрос);

	//После добавления или изменения метода внести исправление в общий макет РуководствоExternalExchange
	
	Возврат ОтветСервиса(501, "Метод не реализован");
	
КонецФункции

Функция Operation_get(Запрос)

	ИмяМетода = НРег(Запрос.ПараметрыURL.Получить("Act"));
	ПараметрыЗапроса = СтруктураПараметровЗапроса(Запрос);
	СтрокаТелаЗапроса = Запрос.ПолучитьТелоКакСтроку();

	Если НРег(ИмяМетода) = "man" Тогда
		
		СтрокаСодержания = СтрШаблон("Запрос описания методов.");
		ЗаписьЖурналаРегистрации("ExternalExchange.Operation.Man",УровеньЖурналаРегистрации.Информация,,,СтрокаСодержания); 
		Возврат ОписаниеМетодов(Запрос);

	ИначеЕсли НРег(ИмяМетода) = "time" Тогда
		
		СтрокаСодержания = СтрШаблон("Тестовый запрос текущего времени.");
		ЗаписьЖурналаРегистрации("ExternalExchange.Operation.Time",УровеньЖурналаРегистрации.Информация,,,СтрокаСодержания); 
		Результат = Новый Структура("time", ТекущаяДатаСеанса());
		Возврат ОтветСервиса(200, Результат);
		
	ИначеЕсли НРег(ИмяМетода) = "articlesalesreport" Тогда
		
		СтрокаСодержания = СтрШаблон("Запрос данных о продаже.");
		ЗаписьЖурналаРегистрации("ExternalExchange.Operation.ArticleSalesReport",УровеньЖурналаРегистрации.Информация,,,СтрокаСодержания); 
		Возврат ПродажиНоменклатуры(СтрокаТелаЗапроса);

	// << 18.04.2024 Петухов А.В., Фактор, #3916
	ИначеЕсли НРег(ИмяМетода) = "comparator_ut10" Тогда
		СтрокаСодержания = СтрШаблон("Сверка документов УТ10.");
		ЗаписьЖурналаРегистрации("ExternalExchange.Operation.Comparator_UT10",УровеньЖурналаРегистрации.Информация,,,СтрокаСодержания); 
		Возврат СверкаДокументов_УТ10(СтрокаТелаЗапроса);
	// >> 18.04.2024 Петухов А.В., Фактор, #3916
		
	КонецЕсли;
	
	//После добавления или изменения метода внести исправление в общий макет РуководствоExternalExchange

	Возврат ОтветСервиса(501, "Метод не реализован");
	
КонецФункции

// << 18.04.2024 Петухов А.В., Фактор, #3871
Функция СверкаДокументов_УТ10(СтрокаТелаЗапроса)

	Результат = Новый Массив;
	
	мсвПоляДата = Новый Массив;
	мсвПоляДата.Добавить("BeginDate");
	мсвПоляДата.Добавить("EndDate");
	Попытка
		ДанныеJSON = JSONВДанные(СтрокаТелаЗапроса, Ложь, мсвПоляДата);
	Исключение
		Возврат ОтветСервиса(400, "Некорректные параметры. Требуется JSON.");
	КонецПопытки;
	
	ТипОтчета = "";
	Дата_1 = Дата(1,1,1);
	Дата_2 = Дата(1,1,1);
	
	Если ТипЗнч(ДанныеJSON) = Тип("Структура") Тогда
		Если НЕ ДанныеJSON.Свойство("BeginDate", Дата_1) Тогда
			Возврат ОтветСервиса(400, "Некорректные параметры. Требуется наличие BeginDate в структуре.");
		КонецЕсли;
		Если НЕ ДанныеJSON.Свойство("EndDate", Дата_2) Тогда
			Возврат ОтветСервиса(400, "Некорректные параметры. Требуется наличие EndDate в структуре.");
		КонецЕсли;
		Если НЕ ДанныеJSON.Свойство("Type", ТипОтчета) Тогда
			Возврат ОтветСервиса(400, "Некорректные параметры. Требуется наличие Type в структуре.");
		КонецЕсли;
	Иначе
		Возврат ОтветСервиса(400, "Некорректные параметры. Требуется структура.");
	КонецЕсли;
	
	Попытка

		Запрос = Новый Запрос;
		Если ТипОтчета = "GoodsRelocation" Тогда
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПеремещениеТоваров.Ссылка КАК Ссылка,
			               |	ПеремещениеТоваров.ПометкаУдаления КАК ПометкаУдаления,
			               |	ПеремещениеТоваров.Номер КАК Номер,
			               |	ПеремещениеТоваров.Дата КАК Дата,
			               |	ПеремещениеТоваров.Проведен КАК Проведен,
			               |	ПеремещениеТоваров.КР_НомерВходящегоДокумента КАК КР_НомерВходящегоДокумента
			               |ИЗ
			               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			               |ГДЕ
			               |	ПеремещениеТоваров.Дата МЕЖДУ &Дата_1 И &Дата_2
			               |	И ПеремещениеТоваров.КР_НомерВходящегоДокумента <> """"";
		ИначеЕсли ТипОтчета = "GoodsIncome" Тогда
			Запрос.Текст = "ВЫБРАТЬ
		               |	ОтборРазмещениеТоваров.Ссылка,
		               |	ОтборРазмещениеТоваров.ПометкаУдаления,
		               |	ОтборРазмещениеТоваров.Номер,
		               |	ОтборРазмещениеТоваров.Дата,
		               |	ОтборРазмещениеТоваров.Проведен
		               |ИЗ
		               |	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		               |ГДЕ
		               |	ОтборРазмещениеТоваров.Дата МЕЖДУ &Дата_1 И &Дата_2
		               |	И ОтборРазмещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Размещение)
		               |";
		ИначеЕсли ТипОтчета = "GoodsOutcome" Тогда
			Запрос.Текст = "ВЫБРАТЬ
			               |	ОтборРазмещениеТоваров.Ссылка КАК Ссылка,
			               |	ОтборРазмещениеТоваров.ПометкаУдаления КАК ПометкаУдаления,
			               |	ОтборРазмещениеТоваров.Номер КАК Номер,
			               |	ОтборРазмещениеТоваров.Дата КАК Дата,
			               |	ОтборРазмещениеТоваров.Проведен КАК Проведен
			               |ИЗ
			               |	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
			               |ГДЕ
			               |	ОтборРазмещениеТоваров.Дата МЕЖДУ &Дата_1 И &Дата_2
			               |	И ОтборРазмещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Отбор)
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	РасходныйОрдерНаТовары.Ссылка,
			               |	РасходныйОрдерНаТовары.ПометкаУдаления,
			               |	РасходныйОрдерНаТовары.Номер,
			               |	РасходныйОрдерНаТовары.Дата,
			               |	РасходныйОрдерНаТовары.Проведен
			               |ИЗ
			               |	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
			               |ГДЕ
			               |	РасходныйОрдерНаТовары.Дата МЕЖДУ &Дата_1 И &Дата_2";
		ИначеЕсли ТипОтчета = "RetailSales" Тогда
			Запрос.Текст = "ВЫБРАТЬ
		               |	ОтчетОРозничныхПродажах.Ссылка,
		               |	ОтчетОРозничныхПродажах.ПометкаУдаления,
		               |	ОтчетОРозничныхПродажах.Номер,
		               |	ОтчетОРозничныхПродажах.Дата,
		               |	ОтчетОРозничныхПродажах.Проведен
		               |ИЗ
		               |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		               |ГДЕ
		               |	ОтчетОРозничныхПродажах.Дата МЕЖДУ &Дата_1 И &Дата_2
		               |";
		//ИначеЕсли ТипОтчета = "ReturnGoods" Тогда
		//	Запрос.Текст = "ВЫБРАТЬ
		//               |	ВозвратТоваровОтПокупателя.Ссылка,
		//               |	ВозвратТоваровОтПокупателя.ПометкаУдаления,
		//               |	ВозвратТоваровОтПокупателя.Номер,
		//               |	ВозвратТоваровОтПокупателя.Дата,
		//               |	ВозвратТоваровОтПокупателя.Проведен
		//               |ИЗ
		//               |	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		//               |ГДЕ
		//               |	ВозвратТоваровОтПокупателя.Дата МЕЖДУ &Дата_1 И &Дата_2
		//               |";
		//ИначеЕсли ТипОтчета = "Realization" Тогда
		//	Запрос.Текст = "ВЫБРАТЬ
		//               |	РеализацияТоваровУслуг.Ссылка,
		//               |	РеализацияТоваровУслуг.ПометкаУдаления,
		//               |	РеализацияТоваровУслуг.Номер,
		//               |	РеализацияТоваровУслуг.Дата,
		//               |	РеализацияТоваровУслуг.Проведен
		//               |ИЗ
		//               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//               |ГДЕ
		//               |	РеализацияТоваровУслуг.Дата МЕЖДУ &Дата_1 И &Дата_2
		//               |";
		КонецЕсли;
		Запрос.УстановитьПараметр("Дата_1", Дата_1);
		Запрос.УстановитьПараметр("Дата_2", Дата_2);
			
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			сткСтрокаОтвета = Новый Структура;
			сткСтрокаОтвета.Вставить("GUID", XMLСтрока(Выборка.Ссылка));
			сткСтрокаОтвета.Вставить("View", XMLСтрока(СтрШаблон("%1",Выборка.Ссылка)));
			сткСтрокаОтвета.Вставить("Date", Выборка.Дата);
			сткСтрокаОтвета.Вставить("DeletionMark", Выборка.ПометкаУдаления);
			сткСтрокаОтвета.Вставить("Posted", Выборка.Проведен);
			Если ТипОтчета = "GoodsRelocation" Тогда
				сткСтрокаОтвета.Вставить("Number", XMLСтрока(Выборка.КР_НомерВходящегоДокумента));
			Иначе
				сткСтрокаОтвета.Вставить("Number", XMLСтрока(Выборка.Номер));
			КонецЕсли;
			Результат.Добавить(сткСтрокаОтвета);
		КонецЦикла;
	
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда 
			ТекстОшибки = ОписаниеОшибки();
		КонецЕсли;
		Возврат ОтветСервиса(520, СокрЛП(ТекстОшибки));
	КонецПопытки;
	
	Возврат ОтветСервиса(200, Результат);
	
КонецФункции
// >> 18.04.2024 Петухов А.В., Фактор, #3871

Функция ПродажиНоменклатуры(СтрокаТелаЗапроса)

	Результат = Новый Массив;
	
	мсвПоляДата = Новый Массив;
	мсвПоляДата.Добавить("Date");
	Попытка
		ДанныеJSON = JSONВДанные(СтрокаТелаЗапроса, Ложь, мсвПоляДата);
	Исключение
		Возврат ОтветСервиса(400, "Некорректные параметры. Требуется JSON.");
	КонецПопытки;
	
	Если ТипЗнч(ДанныеJSON) = Тип("Структура") Тогда
		//Если НЕ ДанныеJSON.Свойство("Model") Тогда
		//	Возврат ОтветСервиса(400, "Некорректные параметры. Требуется наличие Model в структуре.");
		//КонецЕсли;
		//Если НЕ ДанныеJSON.Свойство("Color") Тогда
		//	Возврат ОтветСервиса(400, "Некорректные параметры. Требуется наличие Color в структуре.");
		//КонецЕсли;
		Если НЕ ДанныеJSON.Свойство("Article") Тогда
			Возврат ОтветСервиса(400, "Некорректные параметры. Требуется наличие Article в структуре.");
		КонецЕсли;
		Если НЕ ДанныеJSON.Свойство("Size") Тогда
			Возврат ОтветСервиса(400, "Некорректные параметры. Требуется наличие Size в структуре.");
		КонецЕсли;
		Если НЕ ДанныеJSON.Свойство("Date") Тогда
			Возврат ОтветСервиса(400, "Некорректные параметры. Требуется наличие Date в структуре.");
		КонецЕсли;
	Иначе
		Возврат ОтветСервиса(400, "Некорректные параметры. Требуется структура.");
	КонецЕсли;
	
	Попытка

		Склад = Неопределено;
		Если ДанныеJSON.Свойство("Storehouse") Тогда
			Ссылка = XMLЗначение(Тип("СправочникСсылка.Склады"), ДанныеJSON.Storehouse);
			Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда 
				Склад = Ссылка;
			Иначе
				Склад = Неопределено;
			КонецЕсли;    
		КонецЕсли;
		
		Запрос = Новый Запрос;

		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СпрНоменклатура.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ втНоменклатура
			|ИЗ
			|	Справочник.Номенклатура КАК СпрНоменклатура
			|ГДЕ
			|	СпрНоменклатура.Артикул = &Артикул
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КР_Размеры.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ втРазмеры
			|ИЗ
			|	Справочник.КР_Размеры КАК КР_Размеры
			|ГДЕ
			|	КР_Размеры.Код = &КодРазмера
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
			|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
			|ПОМЕСТИТЬ втТовары
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
			|		ПО (втНоменклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРазмеры КАК втРазмеры
			|		ПО (втРазмеры.Ссылка = ХарактеристикиНоменклатуры.КР_Размер)
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втНоменклатура
			|
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втРазмеры
			|
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК Ссылка,
			|	КлючиАналитикиУчетаНоменклатуры.Номенклатура КАК Номенклатура,
			|	КлючиАналитикиУчетаНоменклатуры.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ втКАУН
			|ИЗ
			|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК втТовары
			|		ПО КлючиАналитикиУчетаНоменклатуры.Номенклатура = втТовары.Номенклатура
			|			И КлючиАналитикиУчетаНоменклатуры.Характеристика = втТовары.Характеристика
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втТовары
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			|	ВыручкаИСебестоимостьПродаж.Склад КАК Склад,
			|	ВыручкаИСебестоимостьПродаж.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ втПродажи
			|ИЗ
			|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКАУН КАК втКАУН
			|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = втКАУН.Ссылка
			|ГДЕ
			|	ВыручкаИСебестоимостьПродаж.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ВыручкаИСебестоимостьПродаж.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
			|	И ИСТИНА
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	АналитикаУчетаНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	втПродажи.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ втРегистраторы
			|ИЗ
			|	втПродажи КАК втПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтчетОРозничныхПродажахТовары.Ссылка КАК Регистратор,
			|	ОтчетОРозничныхПродажахТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			|	СУММА(ОтчетОРозничныхПродажахТовары.Количество) КАК Количество,
			|	СУММА(ОтчетОРозничныхПродажахТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
			|	СУММА(ОтчетОРозничныхПродажахТовары.Сумма) КАК Сумма,
			|	ОтчетОРозничныхПродажахТовары.КР_НомерЧека КАК КР_НомерЧека,
			|	ОтчетОРозничныхПродажахТовары.КР_ДатаЧека КАК КР_ДатаЧека
			|ПОМЕСТИТЬ втПродажиПоРегистраторам
			|ИЗ
			|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРегистраторы КАК втРегистраторы
			|		ПО втРегистраторы.Регистратор = ОтчетОРозничныхПродажахТовары.Ссылка
			|СГРУППИРОВАТЬ ПО
			|	ОтчетОРозничныхПродажахТовары.Ссылка,
			|	ОтчетОРозничныхПродажахТовары.АналитикаУчетаНоменклатуры,
			|	ОтчетОРозничныхПродажахТовары.КР_НомерЧека,
			|	ОтчетОРозничныхПродажахТовары.КР_ДатаЧека
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	АналитикаУчетаНоменклатуры
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втРегистраторы
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втПродажи.Склад КАК Склад,
			|	втПродажи.Регистратор КАК Регистратор,
			|	втКАУН.Номенклатура КАК Номенклатура,
			|	втКАУН.Характеристика КАК Характеристика,
			|	втПродажиПоРегистраторам.Количество КАК Количество,
			|	втПродажиПоРегистраторам.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
			|	втПродажиПоРегистраторам.Сумма КАК Сумма,
			|	втПродажиПоРегистраторам.КР_НомерЧека КАК КР_НомерЧека,
			|	втПродажиПоРегистраторам.КР_ДатаЧека КАК КР_ДатаЧека
			|ПОМЕСТИТЬ втПродажиПоЧекам
			|ИЗ
			|	втПродажи КАК втПродажи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПродажиПоРегистраторам втПродажиПоРегистраторам
			|			ЛЕВОЕ СОЕДИНЕНИЕ втКАУН втКАУН
			|			ПО втПродажиПоРегистраторам.АналитикаУчетаНоменклатуры = втКАУН.Ссылка
			|		ПО втПродажи.Регистратор = втПродажиПоРегистраторам.Регистратор
			|		И втПродажи.АналитикаУчетаНоменклатуры = втПродажиПоРегистраторам.АналитикаУчетаНоменклатуры
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	КР_НомерЧека,
			|	КР_ДатаЧека
			|
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втКАУН
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втПродажиПоРегистраторам.Регистратор КАК Регистратор,
			|	втПродажиПоРегистраторам.КР_НомерЧека КАК КР_НомерЧека,
			|	втПродажиПоРегистраторам.КР_ДатаЧека КАК КР_ДатаЧека,
			|	СУММА(втПродажиПоРегистраторам.Сумма) КАК СуммаПоЧеку
			|ПОМЕСТИТЬ втЧекиРегистраторов
			|ИЗ
			|	втПродажиПоРегистраторам КАК втПродажиПоРегистраторам
			|СГРУППИРОВАТЬ ПО
			|	втПродажиПоРегистраторам.Регистратор,
			|	втПродажиПоРегистраторам.КР_НомерЧека,
			|	втПродажиПоРегистраторам.КР_ДатаЧека
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	КР_НомерЧека,
			|	КР_ДатаЧека
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втПродажиПоРегистраторам
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втЧеки.Регистратор КАК Регистратор,
			|	втЧеки.КР_НомерЧека КАК КР_НомерЧека,
			|	втЧеки.КР_ДатаЧека КАК КР_ДатаЧека,
			|	втЧеки.СуммаПоЧеку КАК СуммаПоЧеку,
			|	СУММА(ОплатаПлатежнымиКартами.Сумма) КАК СуммаОплатыКартами
			|ПОМЕСТИТЬ втОплатаКартами
			|ИЗ
			|	втЧекиРегистраторов КАК втЧеки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
			|		ПО втЧеки.Регистратор = ОплатаПлатежнымиКартами.Ссылка
			|			И втЧеки.КР_НомерЧека = ОплатаПлатежнымиКартами.КР_НомерЧека
			|			И втЧеки.КР_ДатаЧека = ОплатаПлатежнымиКартами.КР_ДатаЧека
			|СГРУППИРОВАТЬ ПО
			|	втЧеки.Регистратор,
			|	втЧеки.КР_НомерЧека,
			|	втЧеки.КР_ДатаЧека,
			|	втЧеки.СуммаПоЧеку
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	КР_НомерЧека,
			|	КР_ДатаЧека
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втПродажиПоЧекам.Склад КАК Склад,
			|	втПродажиПоЧекам.Номенклатура КАК Номенклатура,
			|	втПродажиПоЧекам.Характеристика КАК Характеристика,
			|	втПродажиПоЧекам.Количество КАК Количество,
			|	втПродажиПоЧекам.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
			|	втПродажиПоЧекам.Сумма КАК Сумма,
			|	втПродажиПоЧекам.КР_НомерЧека КАК КР_НомерЧека,
			|	втПродажиПоЧекам.КР_ДатаЧека КАК КР_ДатаЧека,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(втОплатаКартами.СуммаОплатыКартами,0) =0 ТОГДА 0
			|		КОГДА ЕСТЬNULL(втОплатаКартами.СуммаПоЧеку,0) =0 ТОГДА 0
			|		ИНАЧЕ втОплатаКартами.СуммаОплатыКартами/втОплатаКартами.СуммаПоЧеку
			|	КОНЕЦ КАК ДоляОплатыПлатежнымиКартами
			|ИЗ
			|	втПродажиПоЧекам КАК втПродажиПоЧекам
			|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатаКартами КАК втОплатаКартами
			|		ПО втПродажиПоЧекам.Регистратор = втОплатаКартами.Регистратор
			|			И втПродажиПоЧекам.КР_НомерЧека = втОплатаКартами.КР_НомерЧека
			|			И втПродажиПоЧекам.КР_ДатаЧека = втОплатаКартами.КР_ДатаЧека
			|
			|";
		
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ РАЗЛИЧНЫЕ
			//|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			//|	ВыручкаИСебестоимостьПродажОбороты.Склад КАК Склад,
			//|	ВыручкаИСебестоимостьПродажОбороты.Регистратор КАК Регистратор
			//|ПОМЕСТИТЬ втПродажи
			//|ИЗ
			//|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
			//|			&ДатаНачала,
			//|			&ДатаОкончания,
			//|			Регистратор,
			//|			АналитикаУчетаНоменклатуры В
			//|					(ВЫБРАТЬ
			//|						втКАУН.Ссылка
			//|					ИЗ
			//|						втКАУН КАК втКАУН)
			//|				И ИСТИНА) КАК ВыручкаИСебестоимостьПродажОбороты
			//|ГДЕ
			//|	ВыручкаИСебестоимостьПродажОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
			
		//Запрос.УстановитьПараметр("Артикул", СтрШаблон("%1 %2",ДанныеJSON.Model,ДанныеJSON.Color));
		Запрос.УстановитьПараметр("Артикул", ДанныеJSON.Article);
		Запрос.УстановитьПараметр("КодРазмера", ДанныеJSON.Size);
		Запрос.УстановитьПараметр("ДатаНачала", ДанныеJSON.Date);
		Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДатаСеанса());
		
		Если ЗначениеЗаполнено(Склад) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ИСТИНА","И ВыручкаИСебестоимостьПродаж.Склад = &Склад");
			Запрос.УстановитьПараметр("Склад", Склад);
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			сткСтрокаОтвета = Новый Структура;
			сткСтрокаОтвета.Вставить("Склад", XMLСтрока(Выборка.Склад));
			сткСтрокаОтвета.Вставить("Номенклатура", XMLСтрока(Выборка.Номенклатура));
			сткСтрокаОтвета.Вставить("ХарактеристикаНоменклатуры", XMLСтрока(Выборка.Характеристика));
			сткСтрокаОтвета.Вставить("Количество", Выборка.Количество);
			сткСтрокаОтвета.Вставить("Стоимость", Выборка.Сумма);
			сткСтрокаОтвета.Вставить("СтоимостьБезСкидок", Выборка.Сумма + Выборка.СуммаРучнойСкидки);
			Если Окр(Выборка.ДоляОплатыПлатежнымиКартами,2) = 0 Тогда
				сткСтрокаОтвета.Вставить("ФормаОплаты", "Наличная");
			ИначеЕсли Окр(Выборка.ДоляОплатыПлатежнымиКартами,2) >= 1 Тогда
				сткСтрокаОтвета.Вставить("ФормаОплаты", "Безналичная");
			Иначе
				сткСтрокаОтвета.Вставить("ФормаОплаты", "Смешанная");
			КонецЕсли;
			сткСтрокаОтвета.Вставить("НомерЧека", Выборка.КР_НомерЧека);
			сткСтрокаОтвета.Вставить("ДатаВремяЧека", Выборка.КР_ДатаЧека);
			Результат.Добавить(сткСтрокаОтвета);
		КонецЦикла;
	
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда 
			ТекстОшибки = ОписаниеОшибки();
		КонецЕсли;
		Возврат ОтветСервиса(520, СокрЛП(ТекстОшибки));
		//Возврат ОтветСервиса(520, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ОтветСервиса(200, Результат);
	
КонецФункции

Функция ОписаниеМетодов(Запрос)

	Ответ = Новый HTTPСервисОтвет(200);
	ТекстРуководства = СтрЗаменить(ПолучитьОбщийМакет("злРуководствоExternalExchange").ПолучитьТекст(), "%%АдресГенератора%%", Запрос.БазовыйURL);
	Ответ.УстановитьТелоИзСтроки(ТекстРуководства);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти     


#Область Служебные

Функция ОтветСервиса(ErrorCode, Result)

	Ответ = Новый HTTPСервисОтвет(ErrorCode);
	Если ErrorCode = 200 Тогда
		СтрокаТела = ДанныеВJSON(Result);
		Ответ.Заголовки.Вставить("Content-Type","application/json;charset=utf-8");
		//Ответ.Заголовки.Вставить("Content-Length", XMLСтрока(СтрДлина(СтрокаТела)));
		Ответ.УстановитьТелоИзСтроки(СтрокаТела);
	Иначе
		СтрокаТела = Result;
		Ответ.Заголовки.Вставить("Content-Type","text/plain; charset=utf-8");
		//Ответ.Заголовки.Вставить("Content-Length", XMLСтрока(СтрДлина(СтрокаТела)));
		Ответ.Причина = "Error";
		Ответ.УстановитьТелоИзСтроки(СтрокаТела);
	КонецЕсли;

	
	Возврат Ответ;
	
КонецФункции	

Функция ДанныеВJSON(Данные)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция JSONВДанные(JSON, ПрочитатьВСоответствие = Ложь, ИменаСвойствСоЗначениямиДата = Неопределено)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSON);
	
	Если ИменаСвойствСоЗначениямиДата = Неопределено Тогда
		Возврат ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	Иначе
		Возврат ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие, ИменаСвойствСоЗначениямиДата);
	КонецЕсли;
	
КонецФункции

Функция СтрокаВBase64(ВходящаяСтрока)
	
	Поток = Новый ПотокВПамяти;

	ЗаписьТекста = Новый ЗаписьТекста(Поток) ;
	ЗаписьТекста.Записать(ВходящаяСтрока);
	ЗаписьТекста.Закрыть();
	
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	СтрокаBase64 = Base64Строка(ДвоичныеДанные);
	
	Возврат СтрокаBase64;
	
КонецФункции

Функция СтруктураПараметровЗапроса(Запрос) 
	
	Результат = Новый Структура;
	
	Для Каждого Параметр Из Запрос.ПараметрыЗапроса Цикл 
		Результат.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
