#Область ОписаниеПеременных

&НаКлиенте
Перем Ссылка Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьДанныеФормыПриСозданииНаСервере();
	СброситьРазмерыИПоложениеОкна();
	ВывестиПоясняющийТекст();
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект, ПараметрыСканирования.ДопустимыеВидыПродукции, "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Характеристика", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Серия", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "Серия", "Характеристика");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСМППереопределяемый");
		Модуль.УстановитьПараметрыВыбораШаблонаЭтикетки(ЭтотОбъект, Элементы.ШаблонЭтикетки.Имя);
	КонецЕсли;
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УстановитьЗаголовокЭлементаИдентификаторВЕТИС();
	УстановитьФорматДатыГоденДо(ЭтотОбъект);
	УстановитьВидимостьДоступностьЭлементовПриСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ЭтоМаркировкаОстатков
		И ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
	КонецЕсли;
	
	Если Не УказатьИдентификаторВЕТИС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ИдентификаторПроисхожденияВЕТИС");
	КонецЕсли;
	
	Если Не УказатьСрокГодности Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ГоденДо");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура)
		Или Не ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара
		Или ШтрихкодированиеИСКлиентСервер.ЭтоEANИлиGTIN(КодМаркировки)
		Или ЭтоЧастичноеВыбытие(ЭтотОбъект) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Количество");
	КонецЕсли;
	
	Если Не РежимПечатиЭтикеток Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ШаблонЭтикетки");
		МассивНепроверяемыхРеквизитов.Добавить("ШаблонКодаМаркировки");
	ИначеЕсли Не ВидимостьШаблонаЭтикетки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ШаблонЭтикетки");
	КонецЕсли;
	
	Если Не Элементы.КоличествоПотребительскихУпаковок.Видимость Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КоличествоПотребительскихУпаковок");
	КонецЕсли;
	
	Если ЭтоЧастичноеВыбытие(ЭтотОбъект) Тогда
		
		Если ЧастичноеВыбытиеКоличество >= ЕмкостьПотребительскойУпаковки Тогда
			
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
				ТекстСообщения = НСтр("ru = 'При продаже на разлив количество должно быть меньше емкости флакона.'");
			ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
				ТекстСообщения = НСтр("ru = 'При поштучной продаже количество должно быть меньше емкости пачки.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Количество должно быть меньше емкости упаковки.'");
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				"ЧастичноеВыбытиеКоличество",,
				Отказ);
			
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ЕмкостьПотребительскойУпаковки");
		МассивНепроверяемыхРеквизитов.Добавить("ЧастичноеВыбытиеКоличество");
		МассивНепроверяемыхРеквизитов.Добавить("ЧастичноеВыбытиеВариантУчета");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СобытияФормИСПереопределяемый.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяФормыУказанияСерии = "";
	ШтрихкодированиеИСКлиентПереопределяемый.ЗаполнитьПолноеИмяФормыУказанияСерии(ИмяФормыУказанияСерии);
	
	Если ИсточникВыбора.ИмяФормы = ИмяФормыУказанияСерии Тогда
		Серия = ВыбранноеЗначение.Значение;
	КонецЕсли;
	
	Если ТипыНоменклатуры.НайтиПоЗначению(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		
		Если ВыбранноеЗначение <> Номенклатура
			И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			Номенклатура = ВыбранноеЗначение;
			НоменклатураПриИзмененииСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияУдалосьПодобрать.Видимость = ЗначениеЗаполнено(Серия);
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не Элементы.ПоискПоШтрихкоду.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
		ЭтотОбъект, Источник, Событие, Данные);
	
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВводШтрихкодаЗавершение(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ВидыПродукции = Новый Массив;
		ВидыПродукции.Добавить(ВидПродукции);
	Иначе
		ВидыПродукции = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыСканирования.ДопустимыеВидыПродукции, Ложь);
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(КодМаркировки) И ВидыПродукции.Количество() > 1 Тогда
		ВидыПродукцииПоКодуМаркировкиОстатков(ВидыПродукции, КодМаркировки, ПараметрыСканирования.Организация);
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, ВидыПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		
		ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект, ПараметрыУказанияСерий, Элемент.ТекстРедактирования, СтандартнаяОбработка, ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроисхожденияВЕТИСПриИзменении(Элемент)
	УстановитьФорматДатыГоденДо(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроисхожденияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПВЕТИСКлиент");
	ПараметрыОткрытия = Модуль.ПараметрыВыбораИдентификатораПросхождения(ПараметрыСканирования.ВидОперацииИСМП);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ЭтотОбъект);
	ПараметрыОткрытия.ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИдентификатораПроисхожденияВЕТИСЗавершение", ЭтотОбъект);
	ПараметрыОткрытия.Организация = ПараметрыСканирования.Организация;
	Модуль.ОткрытьФормуВыбораИдентификатораПроисхожденияВЕТИС(ПараметрыОткрытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДокументаВыбратьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеДокумента.ТекущиеДанные;
	Если ТекущиеДанные.Выбрать Тогда
		ИзменениеНоменклатуры = ТекущиеДанные.Номенклатура <> Номенклатура;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТекущиеДанные,,"Количество");
		ГоденДо = ТекущиеДанные.СрокГодности;
		Для Каждого СтрокаТЧ Из ДанныеДокумента Цикл
			Если СтрокаТЧ.Выбрать И СтрокаТЧ.ПолучитьИдентификатор() <> ТекущиеДанные.ПолучитьИдентификатор() Тогда
				СтрокаТЧ.Выбрать = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИзменениеНоменклатуры Тогда
			НоменклатураПриИзмененииСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеДокумента.ТекущиеДанные;
	ТекущиеДанные.Выбрать  = Истина;
	ИзменениеНоменклатуры = ТекущиеДанные.Номенклатура <> Номенклатура;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТекущиеДанные);
	ГоденДо = ТекущиеДанные.СрокГодности;
	Для Каждого СтрокаТЧ Из ДанныеДокумента Цикл
		Если СтрокаТЧ.Выбрать И СтрокаТЧ.ПолучитьИдентификатор() <> ТекущиеДанные.ПолучитьИдентификатор() Тогда
			СтрокаТЧ.Выбрать = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ИзменениеНоменклатуры Тогда
		НоменклатураПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоВУпаковкеПриИзменении(Элемент)
	РасчетОграниченийПолейЧастичногоВыбытия(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИзУпаковкиПриИзменении(Элемент)
	РасчетОграниченийПолейЧастичногоВыбытия(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбытияПриИзменении(Элемент)
	
	ПриИзмененииРежимаВыбытия();
	НастроитьЭлементыФормыЧастичногоВыбытия(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	ЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоясняющийТекстОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СкопироватьШтрихкодБуферОбмена" Тогда
		ИнтеграцияИСКлиент.СкопироватьШтрихКодВБуферОбмена(Элементы.БуферОбмена, ШтрихкодEAN);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СкопироватьКодМаркировкиВБуферОбмена" Тогда 
		ИнтеграцияИСКлиент.СкопироватьШтрихКодВБуферОбмена(Элементы.БуферОбмена, КодМаркировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводШтрихкодаЗавершение", ЭтотОбъект);
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "Характеристика", "ХарактеристикиИспользуются");
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект, "Серия", "СтатусУказанияСерий", "ТипНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииСервер()
	
	СобытияФормИСПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ЭтотОбъект,, ПараметрыУказанияСерий);
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ВидПродукцииНоменклатуры = ВидПродукции;
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
		ВидПродукцииНоменклатуры = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(Номенклатура);
	КонецЕсли;
	
	УказатьСрокГодности = ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
		И ПараметрыСканирования.ЗаполнятьСрокГодности
		И ЗначениеЗаполнено(ВидПродукцииНоменклатуры)
		И ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукцииНоменклатуры);
	
	Если УказатьИдентификаторВЕТИС И ЗначениеЗаполнено(ИдентификаторПроисхожденияВЕТИС) Тогда
		
		ДанныеСопоставления = Новый Структура;
		ДанныеСопоставления.Вставить("Номенклатура", Номенклатура);
		ДанныеСопоставления.Вставить("Характеристика", Характеристика);
		ДанныеСопоставления.Вставить("Серия", Серия);
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПВЕТИС");
		Если Не Модуль.НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(
				ИдентификаторПроисхожденияВЕТИС, ДанныеСопоставления) Тогда
			ИдентификаторПроисхожденияВЕТИС = Неопределено;
		ИначеЕсли УказатьСрокГодности Тогда
			ДанныеВЕТИС = ДанныеИдентификаторовПроисхожденияВЕТИС(ИдентификаторПроисхожденияВЕТИС);
			ГоденДо         = ДанныеВЕТИС[ИдентификаторПроисхожденияВЕТИС].СрокГодности;
			СкоропортящаясяПродукция = ДанныеВЕТИС[ИдентификаторПроисхожденияВЕТИС].СкоропортящаясяПродукция;
		КонецЕсли;
		
	КонецЕсли;

	ЗаполнитьОписаниеНоменклатуры();
	ОбновитьПараметрыЧастичногоВыбытия(Истина);
	
	ОбновитьОтображениеПоляНоменклатура();
	ОбновитьОтображениеПоляКоличество();
	СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Характеристика");
	СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Серия");
	ОбновитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПоляКоличество()
	
	ЭтоEANИлиGTIN = ШтрихкодированиеИСКлиентСервер.ЭтоEANИлиGTIN(КодМаркировки);
	
	Если ТребуетВзвешивания И Не ЭтоEANИлиGTIN Тогда
		Элементы.ГруппаКоличество.Видимость = ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара;
	Иначе
		Элементы.ГруппаКоличество.Видимость = Ложь;
		Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить("ОбщаяФорма.ФормаУточненияДанныхИС", "", ИмяПользователя);
	КонецЕсли;
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоясняющийТекст()
	
	МассивСтрок = Новый Массив;
	
	Элементы.ПоясняющийТекст.Высота = 1;
	Если Не РежимПечатиЭтикеток И Не ПустаяСтрока(КодМаркировки) Тогда
		
		Элементы.ПоясняющийТекст.Высота = 3;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Обработка кода маркировки:'"),, ЦветаСтиля.ПоясняющийТекст));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(КодМаркировки, Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылкиГосИС,, "СкопироватьКодМаркировкиВБуферОбмена"));
		МассивСтрок.Добавить(Символы.ПС);
		
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Номенклатура) = Тип("Массив") Тогда
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Штрихкоду'"),, ЦветаСтиля.ПоясняющийТекст));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ШтрихкодEAN, Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылкиГосИС,, "СкопироватьШтрихкодБуферОбмена"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'сопоставлено несколько номенклатурных позиций. Укажите номенклатуру.'"),, ЦветаСтиля.ПоясняющийТекст));
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Укажите номенклатуру.'"),, ЦветаСтиля.ПоясняющийТекст));
	КонецЕсли;
	
	Если УказатьИдентификаторВЕТИС Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Укажите специфику ВетИС.'"),, ЦветаСтиля.ПоясняющийТекст));
	КонецЕсли;
	
	Если Элементы.Серия.СписокВыбора.Количество() > 1 Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Укажите серию номенклатуры.'"),, ЦветаСтиля.ПоясняющийТекст));
	КонецЕсли;
	
	Если РежимПечатиЭтикеток Тогда
		Если МассивСтрок.Количество() Тогда
			Элементы.ПоясняющийТекст.Высота = Элементы.ПоясняющийТекст.Высота + 1;
			МассивСтрок.Добавить(Символы.ПС);
		КонецЕсли;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Укажите шаблон этикетки.'"),, ЦветаСтиля.ПоясняющийТекст));
	КонецЕсли;
	
	ПоясняющийТекст = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПриСозданииНаСервере()
	
	Заголовок = НСтр("ru = 'Уточнение данных'");
	
	Количество = Параметры.Количество;
	
	ОбработатьРежимВыбораИзДокумента();
	
	ТипыНоменклатуры.ЗагрузитьЗначения(Метаданные.ОпределяемыеТипы.Номенклатура.Тип.Типы());
	
	ПараметрыСканирования = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.ПараметрыСканирования);
	Склад                 = ПараметрыСканирования.Склад;
	ЦветТекстаПроблема    = ЦветаСтиля.ЦветТекстаПроблемаГосИС;
	
	ПараметрыУказанияСерий = ПараметрыСканирования.ПараметрыУказанияСерий;
	ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий(
		ПараметрыУказанияСерий, Метаданные.ОбщиеФормы.ФормаУточненияДанныхИС, ЭтотОбъект);
	
	КодМаркировки             = Параметры.КодМаркировки;
	ШтрихкодEAN               = Параметры.ШтрихкодEAN;
	GTIN                      = Параметры.GTIN;
	ВидПродукции              = Параметры.ВидПродукции;
	ВидУпаковки               = Параметры.ВидУпаковки;
	ЭтоМаркировкаОстатков     = ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(GTIN)
		Или ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(ШтрихкодEAN);
	
	Если ТипЗнч(Параметры.Номенклатура) = Тип("Массив") Тогда
		
		Элементы.Номенклатура.РежимВыбораИзСписка = Истина;
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(Параметры.Номенклатура);
		
	Иначе
		
		Номенклатура   = Параметры.Номенклатура;
		Характеристика = Параметры.Характеристика;
		Серия          = Параметры.Серия;
		НоменклатураПриИзмененииСервер();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) И Не Параметры.ПроизвольноеРедактированиеРеквизитов Тогда
		Элементы.Номенклатура.ТолькоПросмотр = Истина;
	Иначе
		ОбновитьОтображениеПоляНоменклатура();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Характеристика) И Не Параметры.ПроизвольноеРедактированиеРеквизитов
		Или ЭтоЧастичноеВыбытие(ЭтотОбъект) Тогда
		Элементы.Характеристика.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПредставлениеНоменклатуры) Тогда
		Элементы.Номенклатура.ПодсказкаВвода = Параметры.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		ВидимостьШаблонаЭтикетки  = РегистрыСведений["ПулКодовМаркировкиСУЗ"].ВидимостьШаблонаЭтикетки();
	КонецЕсли;
	
	Если Параметры.СоставКодаМаркировки = Неопределено Тогда
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировки, ПараметрыСканирования.ДопустимыеВидыПродукции);
		Если ДанныеРазбора <> Неопределено Тогда
			СоставКодаМаркировки = Новый ФиксированнаяСтруктура(ДанныеРазбора.СоставКодаМаркировки);
		КонецЕсли;
	Иначе
		СоставКодаМаркировки = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.СоставКодаМаркировки, Истина);
	КонецЕсли;
	ЭтоКодМаркировкиСоСрокомГодности = СоставКодаМаркировки <> Неопределено
		И СоставКодаМаркировки.Свойство("ГоденДо");
	
	Если Не ПустаяСтрока(ШтрихкодEAN) И Не ЗначениеЗаполнено(GTIN) Тогда
		GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN);
	КонецЕсли;
	
	ЗаполнитьСерииПоДокументу();
	ЗаполнитьИдентификаторыПроисхожденияВЕТИС();
	
	Если Не Параметры.УточнитьКоличествоПотребительскихУпаковок Тогда
		Элементы.КоличествоПотребительскихУпаковок.Видимость = Ложь;
	КонецЕсли;
	
	// Заполнение значений по-умолчанию: в источнике вызова есть ровно одна подходящая строка с незаполненными кодами маркировки
	Если ДанныеДокумента.Количество() = 1 Тогда
		ДанныеДокумента[0].Выбрать = Истина;
		ИзменениеНоменклатуры = (ДанныеДокумента[0].Номенклатура <> Номенклатура);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеДокумента[0],,"Количество");
		ГоденДо = ДанныеДокумента[0].СрокГодности;
		Если ИзменениеНоменклатуры Тогда
			НоменклатураПриИзмененииСервер();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСрокГодности();
	
	ЗаполнитьДанныеДляПечатиЭтикеток();
	ПервоначальноеЗаполнениеПоЧастичномуВыбытию();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРежимВыбораИзДокумента()
	
	Колонки = Новый Массив;
	
	Элементы.СтраницаУказаниеДанных.Видимость = Параметры.РежимПроизвольногоВвода;
	Элементы.СтраницаВыборИзСписка.Видимость  = Параметры.РежимПодбораИзДокумента;
	Элементы.ДанныеДокумента.Видимость = Параметры.РежимПодбораИзДокумента;
	Если Параметры.РежимПодбораИзДокумента Тогда
		Если Параметры.ДанныеДокумента.Количество() Тогда
			КолонкиКЗаполнению = Новый Массив;
			Элементы.РежимыВыбора.ТекущаяСтраница = Элементы.СтраницаВыборИзСписка;
			ПредставлениеИзвестныхДанныхМассивом = Новый Массив;
			Элемент = Параметры.ДанныеДокумента[0];
			// Настроим колонки таблицы выбора
			Для Каждого Колонка Из ПолучитьРеквизиты("ДанныеДокумента") Цикл
				Если Колонка.Имя = "Выбрать"
					Или Колонка.Имя = "ПредставлениеПустого" Тогда
				ИначеЕсли Не Элемент.Свойство(Колонка.Имя) Тогда
					Элементы["ДанныеДокумента"+Колонка.Имя].Видимость = Ложь;
					Если (Колонка.Имя = "Номенклатура"
						Или Колонка.Имя = "Характеристика"
						Или Колонка.Имя = "Серия")
						И ЗначениеЗаполнено(Параметры[Колонка.Имя]) Тогда
							Если ПредставлениеИзвестныхДанныхМассивом.Количество() Тогда
								ПредставлениеИзвестныхДанныхМассивом.Добавить(" / ");
							КонецЕсли;
							ПредставлениеИзвестныхДанныхМассивом.Добавить(Новый ФорматированнаяСтрока(
								""+Параметры[Колонка.Имя], , ЦветаСтиля.ЦветГиперссылкиГосИС, , ПолучитьНавигационнуюСсылку(Параметры[Колонка.Имя])));
					КонецЕсли;
				Иначе
					
					Колонки.Добавить(Колонка.Имя);
					КолонкиКЗаполнению.Добавить(Колонка.Заголовок);
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ДанныеДокументаВыбрать.Заголовок = СтрСоединить(КолонкиКЗаполнению, ",");
			
			Если ПредставлениеИзвестныхДанныхМассивом.Количество() Тогда
				ПредставлениеИзвестныхДанных = Новый ФорматированнаяСтрока(ПредставлениеИзвестныхДанныхМассивом);
			Иначе
				Элементы.ПредставлениеИзвестныхДанных.Видимость = Ложь;
			КонецЕсли;
			// Загрузим данные документа для выбора
			Для Каждого ВариантВыбора Из Параметры.ДанныеДокумента Цикл
				НоваяСтрока = ДанныеДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
				НоваяСтрока.СрокГодности = Параметры.ГоденДо;
				НоваяСтрока.ИдентификаторПроисхожденияВЕТИС = Параметры.ИдентификаторыПроисхожденияВЕТИС;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВариантВыбора);
			КонецЦикла;
			ТаблицаДанныеДокумента = ДанныеДокумента.Выгрузить();
			ТаблицаДанныеДокумента.Свернуть("Номенклатура,Характеристика,Серия,ИдентификаторПроисхожденияВЕТИС,СрокГодности","Количество");
			ДанныеДокумента.Загрузить(ТаблицаДанныеДокумента);
			
			Для Каждого СтрокаДанныеДокумента Из ДанныеДокумента Цикл
				ЭтоПустаяСтрока = Истина;
				Для Каждого ВидимаяКолонка Из Колонки Цикл
					ЭтоПустаяСтрока = ЭтоПустаяСтрока И Не ЗначениеЗаполнено(СтрокаДанныеДокумента[ВидимаяКолонка]);
				КонецЦикла;
				Если ЭтоПустаяСтрока Тогда
					СтрокаДанныеДокумента.ПредставлениеПустого = НСтр("ru = '<без уточнения>'");
				КонецЕсли;
			КонецЦикла;
			Если ДанныеДокумента.Количество() = 1 Тогда
				Элементы.РежимыВыбора.ТекущаяСтраница = Элементы.СтраницаУказаниеДанных;
			КонецЕсли;
		Иначе
			Элементы.СтраницаУказаниеДанных.Видимость = Истина;
			Элементы.СтраницаВыборИзСписка.Видимость = Ложь;
			Элементы.ДанныеДокумента.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не(Параметры.РежимПроизвольногоВвода И Параметры.РежимПодбораИзДокумента) Тогда
		Элементы.РежимыВыбора.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИдентификаторыПроисхожденияВЕТИС()
	
	УказатьИдентификаторВЕТИС = ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС")
		И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС;
	
	Если Не УказатьИдентификаторВЕТИС Тогда
		Возврат;
	Иначе
		Элементы.ИдентификаторПроисхожденияВЕТИС.АвтоОтметкаНезаполненного = ПараметрыСканирования.ЗаполнятьДанныеВЕТИС;
	КонецЕсли;
	
	ИдентификаторыВЕТИС = Новый Массив;
	
	Если ТипЗнч(Параметры.ИдентификаторыПроисхожденияВЕТИС) = Тип("Массив") Тогда
		ИдентификаторыВЕТИС = Параметры.ИдентификаторыПроисхожденияВЕТИС;
	ИначеЕсли ЗначениеЗаполнено(Параметры.ИдентификаторыПроисхожденияВЕТИС) Тогда
		ИдентификаторПроисхожденияВЕТИС = Параметры.ИдентификаторыПроисхожденияВЕТИС;
		ИдентификаторыВЕТИС.Добавить(ИдентификаторПроисхожденияВЕТИС);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ДанныеДокумента) Тогда
		Для Каждого СтрокаДокумента Из Параметры.ДанныеДокумента Цикл
			Если СтрокаДокумента.Свойство("ИдентификаторПроисхожденияВЕТИС")
				И ИдентификаторыВЕТИС.Найти(СтрокаДокумента.ИдентификаторПроисхожденияВЕТИС) = Неопределено Тогда
				ИдентификаторыВЕТИС.Добавить(СтрокаДокумента.ИдентификаторПроисхожденияВЕТИС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьИдентификаторыВЕТИСВСписокВыбора(ИдентификаторыВЕТИС, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСрокГодности()
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ВидПродукцииНоменклатуры = ВидПродукции;
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
		ВидПродукцииНоменклатуры = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(Номенклатура);
	КонецЕсли;
	
	УказатьСрокГодности = ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
		И ПараметрыСканирования.ЗаполнятьСрокГодности
		И ЗначениеЗаполнено(ВидПродукцииНоменклатуры)
		И ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукцииНоменклатуры);
	
	Если Не УказатьСрокГодности Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ГоденДо) Тогда
		ГоденДо         = Параметры.ГоденДо;
		СкоропортящаясяПродукция = Параметры.СкоропортящаясяПродукция;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИдентификаторыВЕТИСВСписокВыбора(Идентификаторы, РежимОткрытияСпискаВыбора = Ложь)
	
	Если Идентификаторы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПВЕТИС");
	ДанныеИдентификаторовПроисхождения = Модуль.ДанныеИдентификаторовПроисхождения(Идентификаторы);
	
	Для Каждого КлючИЗначение Из ДанныеИдентификаторовПроисхождения Цикл
		
		ПредставлениеСсылки = СтрШаблон(НСтр("ru = '%1'"), КлючИЗначение.Значение.Представление);
		Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Вставить(0, КлючИЗначение.Ключ, ПредставлениеСсылки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляПечатиЭтикеток()
	
	РежимПечатиЭтикеток = Параметры.РежимПечатиЭтикеток;
	
	СразуНаПринтер = Параметры.СразуНаПринтер;
	ШаблонЭтикетки = Параметры.ШаблонЭтикетки;
	ШаблонКодаМаркировки = Параметры.ШаблонКодаМаркировки;
	
	Если Не РежимПечатиЭтикеток Тогда
		Если ЗначениеЗаполнено(ШаблонЭтикетки)
				И ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
			ЗапомнитьВыбор = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ШаблоныКодовМаркировки) Тогда
		
		Элементы.ШаблонКодаМаркировки.СписокВыбора.ЗагрузитьЗначения(Параметры.ШаблоныКодовМаркировки);
		
		Если Элементы.ШаблонКодаМаркировки.СписокВыбора.НайтиПоЗначению(Параметры.ШаблонКодаМаркировки) <> Неопределено Тогда
			ШаблонКодаМаркировки = Параметры.ШаблонКодаМаркировки;
		Иначе
			ШаблонКодаМаркировки = Элементы.ШаблонКодаМаркировки.СписокВыбора.Получить(0).Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ВидПродукцииНоменклатуры = ВидПродукции;
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
		ВидПродукцииНоменклатуры = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(Номенклатура);
	КонецЕсли;
	
	Элементы.ШаблонКодаМаркировки.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(ВидПродукцииНоменклатуры)
			И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукцииНоменклатуры, Истина) Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
		Модуль.НастроитьШаблоныФормыУточненияДанных(ЭтотОбъект, ВидПродукцииНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДоступностьЭлементов()
	
	Элементы.ДекорацияУдалосьПодобрать.Видимость = Ложь;
	
	Если УказатьСрокГодности Тогда
		Элементы.ГруппаСрокГодности.Видимость = Истина;
	ИначеЕсли ЗначениеЗаполнено(ГоденДо) Тогда
		Элементы.ГруппаСрокГодности.Видимость = Истина;
		Элементы.ГруппаСрокГодности.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ГруппаСрокГодности.Видимость = Ложь;
	КонецЕсли;
	
	НастроитьЭлементыФормыЧастичногоВыбытия(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПоляНоменклатура()
	
	Если ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой
		И Не ПолученоПредставлениеGTIN Тогда
		
		ДанныеДляПолученияПредставленияGTINОстатков = Новый ТаблицаЗначений;
		ДанныеДляПолученияПредставленияGTINОстатков.Колонки.Добавить("Номенклатура",             Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ДанныеДляПолученияПредставленияGTINОстатков.Колонки.Добавить("GTIN",                     Метаданные.ОпределяемыеТипы.GTIN.Тип);
		ДанныеДляПолученияПредставленияGTINОстатков.Колонки.Добавить("ПредставлениеGTINОстатки", Новый ОписаниеТипов("Строка"));
		ДанныеДляПолученияПредставленияGTINОстатков.Колонки.Добавить("ВидПродукции",             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
		
		СтрокаТаблицы = ДанныеДляПолученияПредставленияGTINОстатков.Добавить();
		СтрокаТаблицы.GTIN = GTIN;
		
		ВидПродукцииДляПолученияПредставления = Неопределено;
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
			ВидПродукцииДляПолученияПредставления = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
			РегистрыСведений["КэшОписанияОстатковИСМП"].ЗаполнитьТаблицуПредставленийGTINОстатки(
				ДанныеДляПолученияПредставленияGTINОстатков,, ВидПродукцииДляПолученияПредставления);
		КонецЕсли;
			
		Если ДанныеДляПолученияПредставленияGTINОстатков.Количество() > 0 Тогда
			ПредставлениеGTIN = ДанныеДляПолученияПредставленияGTINОстатков[0].ПредставлениеGTINОстатки;
		Иначе
			ПредставлениеGTIN = GTIN;
		КонецЕсли;
		
		Элементы.Номенклатура.ПодсказкаВвода            = ПредставлениеGTIN;
		Элементы.Номенклатура.АвтоОтметкаНезаполненного = Ложь;
		
		ПолученоПредставлениеGTIN = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовПриСозданииНаСервере()
	
	ОбновитьВидимостьДоступностьЭлементов();
	
	Элементы.ГруппаПечатьЭтикеток.Видимость = РежимПечатиЭтикеток;
	Если РежимПечатиЭтикеток Тогда
		Элементы.ЗавершитьРедактирование.Видимость = Ложь;
		Элементы.Печать.Видимость                  = Истина;
		Элементы.Печать.КнопкаПоУмолчанию          = Истина;
	КонецЕсли;
	Элементы.ШаблонЭтикетки.Видимость = ВидимостьШаблонаЭтикетки;
	
	Элементы.ШаблонКодаМаркировки.Видимость = Элементы.ШаблонКодаМаркировки.СписокВыбора.Количество() > 1
		Или Не ЗначениеЗаполнено(ШаблонКодаМаркировки);
	
	Если УказатьИдентификаторВЕТИС Тогда
		Элементы.ГруппаДанныеВЕТИС.Видимость = Истина;
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторПроисхожденияВЕТИС) Тогда
		Элементы.ГруппаДанныеВЕТИС.Видимость = Истина;
		Элементы.ГруппаДанныеВЕТИС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ГруппаДанныеВЕТИС.Видимость = Ложь;
	КонецЕсли;
	
	Если УказатьСрокГодности И ЭтоКодМаркировкиСоСрокомГодности Тогда
		
		Элементы.ГоденДо.ТолькоПросмотр = Истина;
		
		Если УказатьИдентификаторВЕТИС Тогда
			Элементы.ИдентификаторПроисхожденияВЕТИС.ПараметрыВыбора = Новый ФиксированныйМассив(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					Новый ПараметрВыбора("Отбор.СкоропортящаясяПродукция", СкоропортящаясяПродукция)));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции
		Или ЗначениеЗаполнено(ЧастичноеВыбытиеВариантУчета) Тогда
		Элементы.ГруппаЗапомнитьВыбор.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.Номенклатура.ТолькоПросмотр
			И Не ТребуетВзвешивания Тогда
		Элементы.ПоискПоШтрихкоду.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСерииПоДокументу()
	
	Если Не Элементы.Серия.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТаблицыТовары = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		ДанныеТаблицыТовары = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	ИначеЕсли ЭтоАдресВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		ДанныеТаблицыТовары = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
	Иначе
		Возврат;
	КонецЕсли;
	
	Элементы.Серия.КнопкаВыпадающегоСписка = Истина;
	ДоступныеСерии = ДоступныеСерииПоДаннымТаблицыТовары(ДанныеТаблицыТовары);
	
	Для Каждого Серия Из ДоступныеСерии Цикл
		Если ЗначениеЗаполнено(Серия) Тогда
			Элементы.Серия.СписокВыбора.Добавить(Серия);
		Иначе
			Элементы.Серия.СписокВыбора.Добавить(Серия, НСтр("ru='<Неопределена>'"));
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступныеСерии.Количество() = 1 Тогда
		Серия = ДоступныеСерии[0];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДоступныеСерииПоДаннымТаблицыТовары(ДанныеТаблицыТовары)
	
	МассивДоступныхСерий = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", Номенклатура);
	Если ИнтеграцияИС.ХарактеристикиИспользуются() Тогда
		Отбор.Вставить("Характеристика", Характеристика);
	КонецЕсли;
	
	НайденныеСтроки = ДанныеТаблицыТовары.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		МассивДоступныхСерий.Добавить(Строка.Серия);
	КонецЦикла;
	
	МассивДоступныхСерий = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДоступныхСерий);
	
	Возврат МассивДоступныхСерий;
	
КонецФункции

&НаКлиенте
Процедура ВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТекстОшибки = "";
	ДанныеШтрихкода.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
	ДанныеШтрихкода.Вставить("ШтрихкодBase64", Истина);
	
	ШтрихкодНайден = Ложь;
	ОбработатьШтрихкод(ДанныеШтрихкода, ШтрихкодНайден, ТекстОшибки);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		
		Если ТипЗнч(ТекстОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытия.ТекстОшибкиФорматированнаяСтрока = ТекстОшибки;
		Иначе
			ПараметрыОткрытия.ТекстОшибки = ТекстОшибки;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытия);
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ШтрихкодНайден Тогда
		
		Штрихкоды = Новый Массив;
		Штрихкоды.Добавить(ДанныеШтрихкода);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеСопоставленияНеизвестныхШтрихкодов", ЭтотОбъект);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Штрихкоды, ЭтотОбъект, ОповещениеОЗакрытии);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытьПослеСканированияШтрихкодаНоменклатуры() Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкод(ДанныеШтрихкода, ШтрихкодНайден, ТекстОшибки = "")
	
	Если Не ДопустимыйФорматШтрихкода(ДанныеШтрихкода) Тогда
		ТекстОшибки = НСтр("ru='Недопустимый формат штрихкода'");
		Возврат;
	КонецЕсли;
	
	Штрихкоды = Новый Массив;
	Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(Штрихкоды);
	
	ДопустимыеДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN.СкопироватьКолонки();
	// Номенклатура уже выбрана. Можно предупреждать о несоответствии.
	Если Элементы.Номенклатура.ТолькоПросмотр Тогда
		Для Каждого СтрокаТЧ Из ДанныеПоШтрихкодамEAN Цикл
			Если СтрокаТЧ.Номенклатура = Номенклатура
				И СтрокаТЧ.Характеристика = Характеристика Тогда
				ЗаполнитьЗначенияСвойств(ДопустимыеДанныеПоШтрихкодамEAN.Добавить(), СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
	// Проверим известный вид продукции или хотя бы признак маркируемой продукции
	Иначе
		Для Каждого СтрокаТЧ Из ДанныеПоШтрихкодамEAN Цикл
			Подходит = СтрокаТЧ.МаркируемаяПродукция;
			Если ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() Тогда
				Подходит = Подходит И ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(СтрокаТЧ.ВидПродукции) <> Неопределено;
			КонецЕсли;
			Если Подходит Тогда
				ЗаполнитьЗначенияСвойств(ДопустимыеДанныеПоШтрихкодамEAN.Добавить(), СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодамEAN.Количество() = 0
		Или Не ЗначениеЗаполнено(ДанныеПоШтрихкодамEAN[0].Номенклатура) Тогда
		ШтрихкодНайден = Ложь;
		Возврат;
	ИначеЕсли ДопустимыеДанныеПоШтрихкодамEAN.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Отсканированный штрихкод не соответствует уточняемой номенклатуре'");
		Возврат;
	КонецЕсли;
	
	ШтрихкодНайден = Истина;
	
	Если ДопустимыеДанныеПоШтрихкодамEAN.Количество() = 1 Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДопустимыеДанныеПоШтрихкодамEAN[0],,"Количество");
		Если ТребуетВзвешивания Тогда
			Количество = ДопустимыеДанныеПоШтрихкодамEAN[0].Количество;
		КонецЕсли;
		
	Иначе
		
		НоменклатураСписок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДопустимыеДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("Номенклатура"));
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(НоменклатураСписок);
		Номенклатура = НоменклатураСписок[0];
		
	КонецЕсли;
	
	НоменклатураПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСопоставленияНеизвестныхШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
		ОбработатьШтрихкод(Результат.ЗарегистрированныеШтрихкоды[0], Неопределено);
		
		Если ЗакрытьПослеСканированияШтрихкодаНоменклатуры() Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму",0.1,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДопустимыйФорматШтрихкода(ДанныеШтрихкода)
	
	Если Не ДанныеШтрихкода.Свойство("ШтрихкодBase64") Или Не ДанныеШтрихкода.ШтрихкодBase64 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗначениеШтрихкода = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ДанныеШтрихкода.Штрихкод);
	Если НайтиНедопустимыеСимволыXML(ЗначениеШтрихкода) > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеШтрихкода.Штрихкод = ЗначениеШтрихкода;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокЭлементаИдентификаторВЕТИС()
	
	Элементы.ИдентификаторПроисхожденияВЕТИС.Заголовок = ИнтеграцияИСМПВЕТИСКлиентСервер.ИмяИдентификатораПроисхожденияВЕТИС();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВидыПродукцииПоКодуМаркировкиОстатков(ВидыПродукции, КодМаркировки, Организация)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМП");
		ВидыПродукцииКодаМаркировки = Модуль.ВидыПродукцииПоКодуМаркировкиОстатков(КодМаркировки, Организация);
		Если ВидыПродукцииКодаМаркировки <> Неопределено Тогда
			ВидыПродукции = ИнтеграцияИС.ПересечениеМассивов(ВидыПродукции, ВидыПродукцииКодаМаркировки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область Оборудование

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЧастичноеВыбытие

&НаСервере
Процедура ПервоначальноеЗаполнениеПоЧастичномуВыбытию()
	
	Если Не ШтрихкодированиеИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастичноеВыбытие                        = Параметры.ЧастичноеВыбытие;
	ЕмкостьПотребительскойУпаковкиНачальная = Параметры.ЕмкостьПотребительскойУпаковки;
	ЧастичноеВыбытиеКоличество              = Параметры.Количество;
	ЧастичноеВыбытиеОстаток                 = Параметры.ЧастичноеВыбытиеОстаток;
	ЧастичноеВыбытиеВыведено                = Параметры.ЧастичноеВыбытиеВыведено;
	ЧастичноеВыбытиеНеКорректныйОстаток     = Параметры.ЧастичноеВыбытиеНеКорректныйОстаток;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат;
	КонецЕсли;

	Если ЧастичноеВыбытие Тогда
		
		МассивДанныеШтрихкода = Новый Массив();
		ДанныеШтрихкода = Новый Структура();
		ДанныеШтрихкода.Вставить("Штрихкод",   КодМаркировки);
		ДанныеШтрихкода.Вставить("Количество", 1);
		МассивДанныеШтрихкода.Добавить(ДанныеШтрихкода);
		
		ДанныеОстаткаБылиПолучены = (Параметры.ЧастичноеВыбытиеОстаток <> Неопределено);
		
		Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП
			И ДанныеОстаткаБылиПолучены Тогда
			ПараметрыСканированияДанныхШтрихкода = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыСканирования);
			ПараметрыСканированияДанныхШтрихкода.ЗапрашиватьДанныеСервисаИСМП = Ложь;
		Иначе
			ПараметрыСканированияДанныхШтрихкода = ПараметрыСканирования;
		КонецЕсли;
		
		ДанныеПоШтрихкодам = ШтрихкодированиеИС.ДанныеПоШтрихкодам(МассивДанныеШтрихкода, ПараметрыСканированияДанныхШтрихкода);
		
		СтрокаДанных                   = ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0];
		ЕмкостьПотребительскойУпаковки = СтрокаДанных.ЕмкостьПотребительскойУпаковки;
		Номенклатура                   = СтрокаДанных.Номенклатура;
		Характеристика                 = СтрокаДанных.Характеристика;
		ЧастичноеВыбытиеНоменклатура   = СтрокаДанных.ЧастичноеВыбытиеНоменклатура;
		ЧастичноеВыбытиеХарактеристика = СтрокаДанных.ЧастичноеВыбытиеХарактеристика;
		
		Если ПараметрыСканированияДанныхШтрихкода.ЗапрашиватьДанныеСервисаИСМП
			И Не ДанныеОстаткаБылиПолучены Тогда
			ЧастичноеВыбытиеОстаток             = СтрокаДанных.ЧастичноеВыбытиеОстаток;
			ЧастичноеВыбытиеВыведено            = СтрокаДанных.ЧастичноеВыбытиеВыведено;
			ЧастичноеВыбытиеНеКорректныйОстаток = СтрокаДанных.ЧастичноеВыбытиеНеКорректныйОстаток;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьПараметрыЧастичногоВыбытия(Истина);
	
	РасчетОграниченийПолейЧастичногоВыбытия(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыЧастичногоВыбытия(Инициализация = Ложь)
	
	ОбщийМодульИнтеграцияИСМПКлиентСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСерверПовтИсп");
	ДанныеЧастичногоВыбытияПолученыИзГИСМТ       = ОбщийМодульИнтеграцияИСМПКлиентСерверПовтИсп.ЗапрашиватьДанныеСервиса();
	МожетВыбыватьЧастично                        = (ЗначениеЗаполнено(ЧастичноеВыбытиеВариантУчета)
		И ОбщийМодульИнтеграцияИСМПКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
			ВидПродукции,
			ПараметрыСканирования.ВидОперацииИСМП));
	
	Если Не МожетВыбыватьЧастично Тогда
		Возврат;
	КонецЕсли;
	
	Если Инициализация Тогда
		
		Если ДанныеЧастичногоВыбытияПолученыИзГИСМТ Тогда
			ЕмкостьПотребительскойУпаковкиГИСМТ = ЕмкостьПотребительскойУпаковкиНачальная;
		КонецЕсли;
		РежимВыбытия = Элементы.РежимВыбытия.СписокВыбора[0].Значение;
	
		ЗаголовокРежимаВыбытия = ОбщийМодульИнтеграцияИСМПКлиентСерверПовтИсп.ЗаголовокРежимаВыбытияПоВидуОперации(ПараметрыСканирования.ВидОперацииИСМП);
		
		Если ЗначениеЗаполнено(ЗаголовокРежимаВыбытия) Тогда
			Элементы.РежимВыбытия.Заголовок = ЗаголовокРежимаВыбытия;
		КонецЕсли;
		
		Для Каждого ЭлементСписка Из Элементы.РежимВыбытия.СписокВыбора Цикл
			
			ПредставлениеРежима = ОбщийМодульИнтеграцияИСМПКлиентСерверПовтИсп.ПредставлениеРежимаВыбытияПоВидуПродукции(
				ЭлементСписка.Значение,
				ВидПродукции);
			
			Если ЗначениеЗаполнено(ПредставлениеРежима) Тогда
				ЭлементСписка.Представление = ПредставлениеРежима;
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.Характеристика.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	ПриИзмененииРежимаВыбытия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеНоменклатуры()
	
	ОписаниеНоменклатуры = РегистрыСведений.ОписаниеНоменклатурыИС.ПолучитьОписание(Номенклатура)[Номенклатура];
	ЕмкостьПотребительскойУпаковкиИБ   = ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
	ЕмкостьПотребительскойУпаковки     = ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
	КоличествоВПотребительскойУпаковке = ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
	ЧастичноеВыбытиеВариантУчета       = ОписаниеНоменклатуры.ВариантЧастичногоВыбытия;
	Если Не ДанныеЧастичногоВыбытияПолученыИзГИСМТ Тогда
		ЕмкостьПотребительскойУпаковкиНачальная = ЕмкостьПотребительскойУпаковки;
	КонецЕсли;
	ЧастичноеВыбытиеИсходнаяНоменклатура   = Номенклатура;
	ЧастичноеВыбытиеИсходнаяХарактеристика = Характеристика;
	
	Если ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
		
		НастройкиЧастичногоВыбытия = РегистрыСведений.НастройкиЧастичногоВыбытияТоваровИСМП.ПолучитьОписание(Номенклатура, Характеристика);
		Если НастройкиЧастичногоВыбытия.НоменклатураНастроена Тогда
			ЧастичноеВыбытиеНоменклатура   = НастройкиЧастичногоВыбытия.НоменклатураЧастичногоВыбытия;
			ЧастичноеВыбытиеХарактеристика = НастройкиЧастичногоВыбытия.ХарактеристикаЧастичногоВыбытия;
		КонецЕсли;
		
		Если Элементы.Номенклатура.РежимВыбораИзСписка
			И Элементы.Номенклатура.СписокВыбора.НайтиПоЗначению(ЧастичноеВыбытиеНоменклатура) = Неопределено Тогда
			Элементы.Номенклатура.СписокВыбора.Добавить(ЧастичноеВыбытиеНоменклатура);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеНоменклатуры.УпаковкаЧастичногоВыбытия) Тогда
		ЕдиницаИзмерения = ОписаниеНоменклатуры.УпаковкаЧастичногоВыбытия;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРежимаВыбытия()
	
	Если ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
		
		ТаблицаНоменклатуры = Новый ТаблицаЗначений();
		ТаблицаНоменклатуры.Колонки.Добавить("НомерСтроки",                ОбщегоНазначения.ОписаниеТипаЧисло(10));
		ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",               Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ТаблицаНоменклатуры.Колонки.Добавить("Характеристика",             Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",           Метаданные.ОпределяемыеТипы.Упаковка.Тип);
		ТаблицаНоменклатуры.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
		
		НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.НомерСтроки    = 1;
		ЧастичноеВыбытиеКоличество = 1;
		
		Если ЭтоЧастичноеВыбытие(ЭтотОбъект) Тогда
			
			Номенклатура   = ЧастичноеВыбытиеНоменклатура;
			Характеристика = ЧастичноеВыбытиеХарактеристика;
			
		Иначе
			
			Номенклатура   = ЧастичноеВыбытиеИсходнаяНоменклатура;
			Характеристика = ЧастичноеВыбытиеИсходнаяХарактеристика;
			Количество     = 1;
			
		КонецЕсли;
		
		НоваяСтрока.Номенклатура   = Номенклатура;
		НоваяСтрока.Характеристика = Характеристика;
			
		ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ТаблицаНоменклатуры);
		
		ХарактеристикиИспользуются = НоваяСтрока.ХарактеристикиИспользуются;
		ЕдиницаИзмерения           = НоваяСтрока.ЕдиницаИзмерения;
		
		СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Характеристика");
		
	ИначеЕсли ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура Тогда
		
		Если ЭтоЧастичноеВыбытие(ЭтотОбъект) Тогда
			ЧастичноеВыбытиеКоличество = 1;
		Иначе
			Количество = ЕмкостьПотребительскойУпаковки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормыЧастичногоВыбытия(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭтоЧастичноеВыбытие = ЭтоЧастичноеВыбытие(Форма);
	
	ЭтоЧастичноеВыбытиеПоДаннымГИСМТ = (Форма.ДанныеЧастичногоВыбытияПолученыИзГИСМТ
		И (ЗначениеЗаполнено(Форма.ЧастичноеВыбытиеОстаток)
			Или ЗначениеЗаполнено(Форма.ЧастичноеВыбытиеВыведено)));
	
	Элементы.РежимВыбытия.Видимость                 = Форма.МожетВыбыватьЧастично;
	Элементы.ЕмкостьПотребительскойУпаковки.ТолькоПросмотр = (Форма.ДанныеЧастичногоВыбытияПолученыИзГИСМТ Или ЗначениеЗаполнено(Форма.ЕмкостьПотребительскойУпаковкиИБ));
	Элементы.РежимВыбытия.ТолькоПросмотр            = ЭтоЧастичноеВыбытиеПоДаннымГИСМТ;
	
	Элементы.ЕмкостьПотребительскойУпаковки.Видимость    = ЭтоЧастичноеВыбытие;
	Элементы.ЧастичноеВыбытиеКоличество.Видимость = ЭтоЧастичноеВыбытие;
	ДанныеПодсказкиЕмкостьЧастичногоВыбытия       = Новый Массив();
	
	Если ЭтоЧастичноеВыбытие
		И Форма.ЧастичноеВыбытиеНеКорректныйОстаток Тогда
		Элементы.ГруппаЧастичноеВыбытиеКоличество.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Элементы.ГруппаЧастичноеВыбытиеКоличество.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'По данным ГИС МТ остаток не корректный'"),,
			Форма.ЦветТекстаПроблема);
	Иначе
		Элементы.ГруппаЧастичноеВыбытиеКоличество.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Если ЭтоЧастичноеВыбытие
		И ЗначениеЗаполнено(Форма.ЕмкостьПотребительскойУпаковкиГИСМТ)
		И ЗначениеЗаполнено(Форма.ЕмкостьПотребительскойУпаковкиИБ)
		И Форма.ЕмкостьПотребительскойУпаковкиГИСМТ <> Форма.ЕмкостьПотребительскойУпаковкиИБ Тогда
		
		ДанныеПодсказкиЕмкостьЧастичногоВыбытия.Добавить(
			СтрШаблон(
				НСтр("ru = 'Емкость упаковки по данным информационной базы: %1 %2, по данным ГИС МТ: %3 %4'"),
				Форма.ЕмкостьПотребительскойУпаковкиИБ,
				Форма.ЕдиницаИзмерения,
				Форма.ЕмкостьПотребительскойУпаковкиГИСМТ,
				Форма.ЕдиницаИзмерения));
		
	КонецЕсли;
	
	Если ДанныеПодсказкиЕмкостьЧастичногоВыбытия.Количество() Тогда
		Элементы.ГруппаКоличествоЕмкость.ОтображениеПодсказки           = ОтображениеПодсказки.ОтображатьСнизу;
		Элементы.ГруппаКоличествоЕмкость.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			ДанныеПодсказкиЕмкостьЧастичногоВыбытия,,
			Форма.ЦветТекстаПроблема);
	Иначе
		Элементы.ГруппаКоличествоЕмкость.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	ДанныеПодсказкиКоличества = Новый Массив();
	Если ЗначениеЗаполнено(Форма.ЕдиницаИзмерения) Тогда
		ДанныеПодсказкиКоличества.Добавить(СокрЛП(Форма.ЕдиницаИзмерения));
	КонецЕсли;
	
	Если Форма.ДанныеЧастичногоВыбытияПолученыИзГИСМТ
		И Форма.ЧастичноеВыбытиеОстаток <> Неопределено Тогда
		ДанныеПодсказкиКоличества.Добавить(", ");
		ДанныеПодсказкиКоличества.Добавить(
			СтрШаблон(
				НСтр("ru = 'Остаток: %1 %2'"),
				Формат(Форма.ЧастичноеВыбытиеОстаток, "ЧН=0;"),
				Форма.ЕдиницаИзмерения));
	КонецЕсли;
	
	Элементы.ЕмкостьПотребительскойУпаковки.РасширеннаяПодсказка.Заголовок    = СокрЛП(Форма.ЕдиницаИзмерения);
	Элементы.ЧастичноеВыбытиеКоличество.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		ДанныеПодсказкиКоличества);
		
	Если ЗначениеЗаполнено(Форма.ЧастичноеВыбытиеВариантУчета)
		Или Форма.РежимВыбытия <> "Частично" Тогда
		Элементы.ГруппаРежимВыбытия.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		Элементы.ГруппаРежимВыбытия.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
	РасчетОграниченийПолейЧастичногоВыбытия(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетОграниченийПолейЧастичногоВыбытия(Форма)
	
	Если Не Форма.МожетВыбыватьЧастично Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Форма.ЧастичноеВыбытиеОстаток)Тогда
		
		Элементы.ЧастичноеВыбытиеКоличество.МаксимальноеЗначение = Форма.ЧастичноеВыбытиеОстаток;
		
	ИначеЕсли ЗначениеЗаполнено(Форма.ЕмкостьПотребительскойУпаковки) Тогда
		
		Элементы.ЧастичноеВыбытиеКоличество.МаксимальноеЗначение = Форма.ЕмкостьПотребительскойУпаковки - 1;
		
	Иначе
		
		Элементы.ЧастичноеВыбытиеКоличество.МаксимальноеЗначение = Неопределено;
		
	КонецЕсли;
	
	Элементы.ЧастичноеВыбытиеКоличество.МинимальноеЗначение = 1;
	Элементы.ЕмкостьПотребительскойУпаковки.МинимальноеЗначение    = 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЧастичноеВыбытие(Форма)
	
	Возврат (Форма.МожетВыбыватьЧастично
		И Форма.РежимВыбытия = "Частично");
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗакрытьФорму()
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктурыДанных = ШтрихкодированиеИСКлиент.ИнициализацияСтруктурыДанныхСохраненногоВыбора();
	
	СтруктурыДанных.ДанныеВыбора.Номенклатура                    = Номенклатура;
	СтруктурыДанных.ДанныеВыбора.Характеристика                  = Характеристика;
	СтруктурыДанных.ДанныеВыбора.Серия                           = Серия;
	
	СтруктурыДанных.ДанныеВыбора.ЭтоКодВводаОстатков               = ЭтоМаркировкаОстатков;
	СтруктурыДанных.ДанныеВыбора.ПредставлениеНоменклатуры         = ПредставлениеНоменклатуры();
	СтруктурыДанных.ДанныеВыбора.ИдентификаторПроисхожденияВЕТИС   = ИдентификаторПроисхожденияВЕТИС;
	СтруктурыДанных.ДанныеВыбора.ГоденДо                           = ГоденДо;
	СтруктурыДанных.ДанныеВыбора.СкоропортящаясяПродукция          = СкоропортящаясяПродукция;
	СтруктурыДанных.ДанныеВыбора.КодМаркировки                     = КодМаркировки;
	СтруктурыДанных.ДанныеВыбора.КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок;
	СтруктурыДанных.ДанныеВыбора.ПроизвольнаяЕдиницаУчета          = ПроизвольнаяЕдиницаУчета;
	СтруктурыДанных.ДанныеВыбора.ТребуетВзвешивания                = ТребуетВзвешивания;
	
	Если ТребуетВзвешивания
		И Не ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара Тогда
		СтруктурыДанных.ДанныеВыбора.Количество = 0;
	Иначе
		СтруктурыДанных.ДанныеВыбора.Количество = Количество;
	КонецЕсли;
	
	СтруктурыДанных.ДанныеВыбора.СоставКодаМаркировки     = СоставКодаМаркировки;
	СтруктурыДанных.ДанныеВыбора.ПроизвольнаяЕдиницаУчета = ПроизвольнаяЕдиницаУчета;
	СтруктурыДанных.ДанныеВыбора.ТребуетВзвешивания       = ТребуетВзвешивания;
	
	Если ЗначениеЗаполнено(GTIN) Тогда
		СтруктурыДанных.ДанныеВыбора.GTIN = GTIN;
	ИначеЕсли ЗначениеЗаполнено(ШтрихкодEAN) Тогда
		СтруктурыДанных.ДанныеВыбора.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN);
	КонецЕсли;
	
	СтруктурыДанных.ДанныеВыбора.ШаблонЭтикетки   = ШаблонЭтикетки;
	СтруктурыДанных.ДанныеВыбора.СразуНаПринтер   = СразуНаПринтер;
	СтруктурыДанных.ДанныеВыбора.ШаблонМаркировки = ШаблонКодаМаркировки;
	
	Если ЭтоЧастичноеВыбытие(ЭтотОбъект) Тогда
		
		СтруктурыДанных.ДанныеВыбора.ЧастичноеВыбытие               = Истина;
		СтруктурыДанных.ДанныеВыбора.Количество                     = ЧастичноеВыбытиеКоличество;
		СтруктурыДанных.ДанныеВыбора.ЕмкостьПотребительскойУпаковки = ЕмкостьПотребительскойУпаковки;
		СтруктурыДанных.ДанныеВыбора.ЧастичноеВыбытиеВариантУчета   = ЧастичноеВыбытиеВариантУчета;
		СтруктурыДанных.ДанныеВыбора.ЧастичноеВыбытиеНоменклатура   = ЧастичноеВыбытиеИсходнаяНоменклатура;
		СтруктурыДанных.ДанныеВыбора.ЧастичноеВыбытиеХарактеристика = ЧастичноеВыбытиеИсходнаяХарактеристика;
		
		Если ЕмкостьПотребительскойУпаковкиНачальная <> ЕмкостьПотребительскойУпаковки
			И (ЗначениеЗаполнено(ЕмкостьПотребительскойУпаковкиНачальная)
				Или Не ДанныеЧастичногоВыбытияПолученыИзГИСМТ) Тогда
			СтруктурыДанных.ДанныеВыбора.ЧастичноеВыбытиеСохранитьНовуюЕмкость = Истина;
		КонецЕсли;
		
	ИначеЕсли МожетВыбыватьЧастично Тогда
		
		СтруктурыДанных.ДанныеВыбора.ЧастичноеВыбытиеНоменклатура   = ЧастичноеВыбытиеНоменклатура;
		СтруктурыДанных.ДанныеВыбора.ЧастичноеВыбытиеХарактеристика = ЧастичноеВыбытиеХарактеристика;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕмкостьПотребительскойУпаковки)
		И ЗначениеЗаполнено(КоличествоВПотребительскойУпаковке)
		И ЧастичноеВыбытиеВариантУчета <> ПредопределенноеЗначение("Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура") Тогда
		Коэффициент = КоличествоВПотребительскойУпаковке / ЕмкостьПотребительскойУпаковки;
		СтруктурыДанных.ДанныеВыбора.Количество = Окр(СтруктурыДанных.ДанныеВыбора.Количество * Коэффициент, 3);
	КонецЕсли;
	
	СтруктурыДанных.ЗапомнитьВыбор = ЗапомнитьВыбор;
	
	Если ТребуетВзвешивания
		И ЗначениеЗаполнено(ШаблонЭтикетки)
		И ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара Тогда
		СтруктурыДанных.ДополнитьПолныйКодМаркировки = "3103";
	КонецЕсли;
	
	Закрыть(СтруктурыДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИдентификатораПроисхожденияВЕТИСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыВЕТИС = Новый Массив;
	ИдентификаторыВЕТИС.Добавить(Результат);
	ДобавитьИдентификаторыВЕТИСВСписокВыбора(ИдентификаторыВЕТИС);
	
	ИдентификаторПроисхожденияВЕТИС = Результат;
	УстановитьГоденДоИСкоропортящаясяПродукцияПоИдентификаторПроисхожденияВЕТИС();
	
	УстановитьФорматДатыГоденДо(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматДатыГоденДо(Форма)
	
	Если Форма.СкоропортящаясяПродукция Тогда
		ФорматДаты = "ДФ='dd.MM.yyyy HH:mm';";
	Иначе
		ФорматДаты = "ДФ=dd.MM.yyyy;";
	КонецЕсли;
	
	Форма.Элементы.ГоденДо.Формат               = ФорматДаты;
	Форма.Элементы.ГоденДо.ФорматРедактирования = ФорматДаты;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГоденДоИСкоропортящаясяПродукцияПоИдентификаторПроисхожденияВЕТИС()
	
	Если Не ЗначениеЗаполнено(ИдентификаторПроисхожденияВЕТИС) 
			Или ЭтоКодМаркировкиСоСрокомГодности
			Или Не УказатьСрокГодности Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВЕТИС = ДанныеИдентификаторовПроисхожденияВЕТИС(ИдентификаторПроисхожденияВЕТИС);
	
	ГоденДо         = ДанныеВЕТИС[ИдентификаторПроисхожденияВЕТИС].СрокГодности;
	СкоропортящаясяПродукция = ДанныеВЕТИС[ИдентификаторПроисхожденияВЕТИС].СкоропортящаясяПродукция;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеИдентификаторовПроисхожденияВЕТИС(ИдентификаторыПроисхождения)
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПВЕТИС");
	Возврат Модуль.ДанныеИдентификаторовПроисхождения(ИдентификаторыПроисхождения);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеНоменклатуры()
	
	Если ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой
		И Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		Если Не ПустаяСтрока(Элементы.Номенклатура.ПодсказкаВвода) Тогда
			Возврат Элементы.Номенклатура.ПодсказкаВвода;
		КонецЕсли;
		
	Иначе
		
		Возврат ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(Номенклатура), Ложь);	
		
	КонецЕсли;
	
КонецФункции

// Проверяет возможность закрытия формы уточнения данных после сканирования штрихкода номенклатуры
// 
// Возвращаемое значение:
//  Булево - форму можно закрыть
&НаКлиенте
Функция ЗакрытьПослеСканированияШтрихкодаНоменклатуры()
	
	// Специальные режимы уточнения: сканирование не закрывает форму
	Если РежимПечатиЭтикеток Тогда
		Возврат Ложь;
	ИначеЕсли УказатьИдентификаторВЕТИС
		И Не ЗначениеЗаполнено(ИдентификаторПроисхожденияВЕТИС) Тогда
		Возврат Ложь;
	ИначеЕсли УказатьСрокГодности
		И Не ЗначениеЗаполнено(ГоденДо) Тогда
		Возврат Ложь;
	// Штрихкод соответствует одному элементу
	ИначеЕсли Элементы.Номенклатура.СписокВыбора.Количество() Тогда
		Возврат Ложь;
	// Данные заполнены
	ИначеЕсли Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	// Введено количество (это не выбор номенклатуры)
	ИначеЕсли Элементы.Номенклатура.ТолькоПросмотр
			И ТребуетВзвешивания
			И Не ЗначениеЗаполнено(Количество) Тогда
		Возврат Ложь;
	// Для ввода коэффициента групповой упаковки
	ИначеЕсли Не ЗначениеЗаполнено(КоличествоПотребительскихУпаковок) И Элементы.КоличествоПотребительскихУпаковок.Видимость Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	СобытияФормИСКлиентПереопределяемый.ПроверитьЗаполнение(ЭтотОбъект, Отказ);
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Количество = РезультатВыполнения.Вес;
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'При выполнении операции произошла ошибка: %1'"),
				РезультатВыполнения.ОписаниеОшибки));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
