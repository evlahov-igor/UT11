#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// << 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	КР_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);	
	// >> 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыНакладной = ПолучитьИзВременногоХранилища(Параметры.АдресТовары);
	ЗаполнитьРеквизитыПриСоздании(ТоварыНакладной);
	ЗаполнитьТаблицуТоваров(ТоварыНакладной);
	
	УстановитьОтборСтрок();
	
	НастроитьЭлементыФормыПриСоздании();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ВыполняетсяЗакрытие И Модифицированность Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
		НСтр("ru = 'Данные были изменены. Перенести изменения в документ?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполняетсяЗакрытие = Истина;
		ПеренестиСтрокиВДокумент();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоОрдеруПриИзменении(Элемент)
	
	РассчитатьПоказательСтрокиКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЗаказуПриИзменении(Элемент)
	
	ПоЗаказамПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаголовокСпискаЗаказов = НСтр("ru='Заказы (%КоличествоДокументов%)'");
	ПараметрыФормы = Новый Структура("СписокДокументов, Заголовок", СписокРаспоряжений, ЗаголовокСпискаЗаказов);
	
	ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,
		Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТаблицаТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТаблицаТовары.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "Заказ"
			И ЗначениеЗаполнено(Элементы.ТаблицаТовары.ТекущиеДанные.Заказ) Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТаблицаТовары.ТекущиеДанные.Заказ);
		ИначеЕсли Поле.Имя = "Сделка"
			И ЗначениеЗаполнено(Элементы.ТаблицаТовары.ТекущиеДанные.Сделка) Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТаблицаТовары.ТекущиеДанные.Сделка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьСтроки(Команда)

	ОтметитьСтроки(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки(Команда)

	ОтметитьСтроки(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ПеренестиСтрокиВДокумент();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ЕдиницаИзмерения", "ТаблицаТовары.Упаковка");

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТовары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.ПрисутствуетВДокументе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Заказ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоличествоУпаковокВЗаказе.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоОрдеру");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПолностьюОбеспечен);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоличествоУпаковокВОрдере.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоОрдеру");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПолностьюОбеспечен);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоличествоУпаковок.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.СтрокаВыбрана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<удалить>'"));
	
	// << 07.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	КР_УстановитьУсловноеОформление();
	// >> 07.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПриСоздании(ТоварыНакладной)
	
	// Реквизиты.
	ИспользоватьНакладныеПоНесколькимЗаказам = Параметры.ИспользоватьНакладныеПоНесколькимЗаказам;
	ИспользоватьОрдернуюСхему                = Параметры.ОрдернаяСхемаПриОтгрузке ИЛИ Параметры.ОрдернаяСхемаПриПоступлении;
	ИспользоватьЗаказы                       = Параметры.ИспользуютсяЗаказы;
	
	Накладная             = Параметры.Накладная;
	Заказ                 = Параметры.Заказ;
	ПоЗаказам             = Параметры.НакладнаяПоЗаказам;
	ИмяМенеджераНакладной = Метаданные.НайтиПоТипу(ТипЗнч(Накладная)).Имя;
	ИмяПоляЗаказ          = Документы[ИмяМенеджераНакладной].ПараметрыЗаполненияДокумента().ИмяПоляЗаказ;
	ДополнительныеПоля    = ?(Параметры.ДополнительныеПоля = Неопределено, Новый Структура, Параметры.ДополнительныеПоля);
	
	Если Параметры.ОрдернаяСхемаПриОтгрузке Тогда
		ПоОрдеру = НЕ ПоЗаказам ИЛИ (Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить()
			= Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера);
	ИначеЕсли Параметры.ОрдернаяСхемаПриПоступлении Тогда
		ПоОрдеру = НЕ ПоЗаказам;
	Иначе
		ПоОрдеру = Ложь;
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаказамВФорме(ТоварыНакладной);
	
	Если ИспользоватьЗаказы И ИспользоватьОрдернуюСхему Тогда
		Заголовок = НСтр("ru = 'Подбор товаров по заказу/ордерам'");
	ИначеЕсли ИспользоватьЗаказы Тогда
		Заголовок = НСтр("ru = 'Подбор товаров по заказу'");
	Иначе
		Заголовок = НСтр("ru = 'Подбор товаров по ордерам'");
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.СформироватьЗаголовокФормыПодбора(Заголовок, Накладная);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваров(ТоварыНакладной)
	
	МенеджерНакладной = Документы[ИмяМенеджераНакладной];
	
	ТоварыНакладной.Колонки.Добавить("КоличествоВНакладной", Новый ОписаниеТипов("Число"));
	ТоварыНакладной.Колонки.Добавить("КоличествоУпаковокВНакладной", Новый ОписаниеТипов("Число"));
	ТоварыНакладной.Колонки.Добавить("ПрисутствуетВДокументе", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Строка Из ТоварыНакладной Цикл
		Строка.КоличествоВНакладной = Строка.Количество;
		Строка.КоличествоУпаковокВНакладной = Строка.КоличествоУпаковок;
		Строка.ПрисутствуетВДокументе = Истина;
	КонецЦикла;
	
	Если ИспользоватьНакладныеПоНесколькимЗаказам Тогда
		// Получаем полный список подходящих заказов
		МассивЗаказов = МенеджерНакладной.РаспоряженияНакладной(Накладная, Новый Массив(), Параметры.РеквизитыШапки);
	Иначе
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(Заказ);
		МассивЗаказов.Добавить(Накладная);
	КонецЕсли;
	
	ПараметрыЗаполнения = МенеджерНакладной.ПараметрыЗаполненияДокумента();
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру", ИспользоватьОрдернуюСхему);
	Если Параметры.РесурсыЗаполнения <> Неопределено Тогда
		ПараметрыЗаполнения.Вставить("Ресурсы", Параметры.РесурсыЗаполнения);
	КонецЕсли;
	МенеджерНакладной.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, Параметры.РеквизитыШапки, МассивЗаказов);
	
	МенеджерНакладной.ЗаполнитьПоЗаказамОрдерам(ТоварыНакладной, Накладная, ПараметрыЗаполнения);
	
	// << 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	// Дополним таблицу информацией по коробам             
	Если ЭтотОбъект.КР_ЭтоАдресныйСкладБезордернойОтгрузки Тогда 
		КР_РаспределитьТоварыПоКоробам(ТоварыНакладной, ИмяПоляЗаказ);   
	КонецЕсли;	
	// >> 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	
	АдресТоварыНакладной = ПоместитьВоВременноеХранилище(ТоварыНакладной.Скопировать(), УникальныйИдентификатор);
	
	ТоварыНакладной.Колонки[ИмяПоляЗаказ].Имя = "Заказ";
	
	ТаблицаТовары.Загрузить(ТоварыНакладной);
	Для Индекс = 0 По ТаблицаТовары.Количество() - 1 Цикл
		ТаблицаТовары[Индекс].ИндексТоваровНакладной = Индекс;
	КонецЦикла;
	
	УдалитьСтрокиБезОтклонений();
	ПересчитатьКоличествоУпаковок();
	РассчитатьПоказательСтрокиКоличество();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиБезОтклонений()
	
	КоличествоСтрок = ТаблицаТовары.Количество();
	Для Счетчик = 1 По КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаТовары[КоличествоСтрок - Счетчик];
		
		РаспоряжениеНакладная = ТипЗнч(СтрокаТаблицы.Заказ) = ТипЗнч(Накладная);
		НетОтклоненийЗаказ = РаспоряжениеНакладная Или СтрокаТаблицы.КодСтроки = 0 Или СтрокаТаблицы.КоличествоВНакладной = СтрокаТаблицы.КоличествоВЗаказе;
		НетОтклоненийОрдер = Не ИспользоватьОрдернуюСхему Или СтрокаТаблицы.КоличествоВНакладной = СтрокаТаблицы.КоличествоВОрдере;
		НетОтклонений = НетОтклоненийЗаказ И НетОтклоненийОрдер;
		
		Если НетОтклонений Тогда
			ТаблицаТовары.Удалить(КоличествоСтрок - Счетчик);
			Продолжить;
		КонецЕсли;
		
		Если РаспоряжениеНакладная Тогда
			СтрокаТаблицы.Заказ = Неопределено;
		КонецЕсли;
		
		Если СтрокаТаблицы.Заказ = Заказ ИЛИ СписокРаспоряжений.НайтиПоЗначению(СтрокаТаблицы.Заказ) <> Неопределено Тогда
			СтрокаТаблицы.ЗаказИзНакладной = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКоличествоУпаковок()
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокСуффикс");
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтруктураДействий.ПересчитатьКоличествоУпаковокСуффикс = "ВЗаказе";
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(Строка,
			СтруктураДействий, КэшированныеЗначения);
		
		СтруктураДействий.ПересчитатьКоличествоУпаковокСуффикс = "Собирается";
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(Строка,
			СтруктураДействий, КэшированныеЗначения);
		
		СтруктураДействий.ПересчитатьКоличествоУпаковокСуффикс = "ВОрдере";
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(Строка,
			СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказательСтрокиКоличество()
	
	Для Каждого ТекущаяСтрока Из ТаблицаТовары Цикл
		ТекущаяСтрока.КоличествоУпаковок = ?(ПоОрдеру, ТекущаяСтрока.КоличествоУпаковокВОрдере, ТекущаяСтрока.КоличествоУпаковокВЗаказе);
		ТекущаяСтрока.Количество = ?(ПоОрдеру, ТекущаяСтрока.КоличествоВОрдере, ТекущаяСтрока.КоличествоВЗаказе);
		
		ТекущаяСтрока.СтрокаВыбрана = (ТекущаяСтрока.КоличествоУпаковок <> ТекущаяСтрока.КоличествоУпаковокВНакладной)
			И (ТекущаяСтрока.ЗаказИзНакладной И ПоЗаказам Или Не ПоЗаказам);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	МенеджерНакладной = Документы[ИмяМенеджераНакладной];
	
	// Элементы формы.
	Элементы.ПоОрдеру.Видимость			= ИспользоватьЗаказы И ИспользоватьОрдернуюСхему;
	Элементы.СтраницыЗаказ.Видимость	= ИспользоватьЗаказы И Параметры.НакладнаяПоЗаказам
		И ИспользоватьНакладныеПоНесколькимЗаказам;
		
	Если НЕ Параметры.ОрдернаяСхемаПриОтгрузке Тогда
		Элементы.ПоОрдеру.ФорматРедактирования = "БЛ='Все заказанные'; БИ='Все принятые'";
	КонецЕсли;
	
	// Элементы таблицы товаров.
	Для каждого ДопПоле Из ДополнительныеПоля Цикл
		ЭлементФормы = Элементы[ДопПоле.Ключ]; // ПолеФормы -
		ЭлементФормы.Видимость = Истина;
		Если ЗначениеЗаполнено(ДопПоле.Значение) Тогда
			ЭлементФормы.Заголовок = ДопПоле.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОбъекта = Новый Структура(МенеджерНакладной.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий());
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Параметры.РеквизитыШапки);
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ПараметрыОбъекта, МенеджерНакладной);
	
	Если ПараметрыУказанияСерий.Свойство("ИспользоватьСерииНоменклатуры") Тогда
		Элементы.Серия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	ИначеЕсли ПараметрыУказанияСерий.Свойство("ТЧ") Тогда
		Элементы.Серия.Видимость = ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
												Или ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры;
	КонецЕсли;
	
	Элементы.КоличествоУпаковокВОрдере.Видимость    = ИспользоватьОрдернуюСхему;
	Элементы.КоличествоУпаковокСобирается.Видимость = ИспользоватьОрдернуюСхему;
	
	Элементы.КоличествоУпаковокВЗаказе.Видимость    = ИспользоватьЗаказы;
	Элементы.Заказ.Видимость                        = ИспользоватьЗаказы;
	Элементы.КодСтроки.Видимость                    = ИспользоватьЗаказы;
	
	ЕстьСобирающиесяТовары = ТаблицаТовары.Итог("КоличествоСобирается") > 0;
	Элементы.ДекорацияИнфо.Видимость = ЕстьСобирающиесяТовары;
	Элементы.ДекорацияИнформацияЕстьСобирающиесяТовары.Видимость = ЕстьСобирающиесяТовары;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаказамВФорме(ТоварыНакладной)
	
	Если Не ИспользоватьНакладныеПоНесколькимЗаказам Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаспоряжений.Очистить();
	Для Каждого ТекСтрока Из ТоварыНакладной Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяПоляЗаказ]) И СписокРаспоряжений.НайтиПоЗначению(ТекСтрока[ИмяПоляЗаказ]) = Неопределено Тогда
			СписокРаспоряжений.Добавить(ТекСтрока[ИмяПоляЗаказ]);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьНакладныеПоНесколькимЗаказам Тогда
		Если СписокРаспоряжений.Количество() = 1 Тогда
			Заказ = СписокРаспоряжений[0].Значение;
		ИначеЕсли СписокРаспоряжений.Количество() > 1 Тогда
			Заказ = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СписокРаспоряжений.Количество() > 1 Тогда
		НадписьВсегоЗаказов = НСтр("ru = 'Всего заказов'");
		НадписьЗаголовокЗаказы = НадписьВсегоЗаказов + ": " + СписокРаспоряжений.Количество();
	КонецЕсли;
	
	Если СписокРаспоряжений.Количество() <= 1 Тогда
		Элементы.СтраницыЗаказ.ТекущаяСтраница = Элементы.СтраницаЗаказ;
	Иначе
		Элементы.СтраницыЗаказ.ТекущаяСтраница = Элементы.СтраницаЗаказы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	ТоварыНакладной = ПолучитьИзВременногоХранилища(АдресТоварыНакладной);
	
	Товары = ТоварыНакладной.СкопироватьКолонки();
	Товары.Колонки.Добавить("ОтвязатьОтЗаказа");
	
	Для каждого Строка Из ТаблицаТовары Цикл
		Если Строка.СтрокаВыбрана Тогда
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТоварыНакладной[Строка.ИндексТоваровНакладной]);
			НоваяСтрока.КоличествоУпаковок	= Строка.КоличествоУпаковок;
			НоваяСтрока.Количество			= Строка.Количество;
			НоваяСтрока.ОтвязатьОтЗаказа	= Строка.КоличествоВЗаказе = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(Новый Структура("Товары", Товары));
	
КонецФункции

&НаКлиенте
Процедура ПеренестиСтрокиВДокумент()
	
	// Снятие модифицированности, т.к. перед закрытием признак проверяется.
	Модифицированность = Ложь;
	
	ТекстПредупреждения = ПроверитьВыборНесколькихЗаказов();
	
	Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьТоварыВХранилище();

	Закрыть();

	ОповеститьОВыборе(Новый Структура("ВыполняемаяОперация, АдресВХранилище",
						"ПодборТоваровИзЗаказа", АдресВХранилище));
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВыборНесколькихЗаказов()
	
	Если ИспользоватьНакладныеПоНесколькимЗаказам Тогда
		
		ПервыйЗаказ = Неопределено;
		ВыбранаСтрокаБезЗаказа = Ложь;
		ШаблонБолееОдногоЗаказа = НСтр("ru = 'Нельзя выбрать товары больше, чем по одному заказу.'");
		ШаблонБезЗаказаИПоЗаказу = НСтр("ru = 'Нельзя выбрать товары по заказу и без указания заказа одновременно.'");
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			Если СтрокаТовары.СтрокаВыбрана И СтрокаТовары.Количество <> 0 Тогда
				
				Если ПервыйЗаказ <> Неопределено И СтрокаТовары.Заказ <> ПервыйЗаказ
					И Не ИспользоватьНакладныеПоНесколькимЗаказам Тогда
					Возврат ШаблонБолееОдногоЗаказа;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.Заказ) Тогда
					ПервыйЗаказ = СтрокаТовары.Заказ;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТовары.Заказ) Тогда
					ВыбранаСтрокаБезЗаказа = Истина;
				КонецЕсли;
				
				Если ВыбранаСтрокаБезЗаказа И ПервыйЗаказ <> Неопределено Тогда
					Возврат ШаблонБезЗаказаИПоЗаказу;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ПоЗаказамПриИзмененииСервер()
	
	УстановитьОтборСтрок();
	
	Для каждого СтрокаТоваров Из ТаблицаТовары Цикл
		СтрокаТоваров.СтрокаВыбрана = (СтрокаТоваров.КоличествоУпаковок <> СтрокаТоваров.КоличествоУпаковокВНакладной)
			И (СтрокаТоваров.ЗаказИзНакладной И ПоЗаказам Или Не ПоЗаказам);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСтрок()
	
	Если ПоЗаказам Тогда
		Элементы.ТаблицаТовары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЗаказИзНакладной", Истина);
	Иначе
		Элементы.ТаблицаТовары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	// << 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	Если ЭтотОбъект.КР_ЭтоАдресныйСкладБезордернойОтгрузки Тогда 
		КР_ЗаполнитьСписокКоробовСУчетомОтбораПоЗаказам();   
	КонецЕсли;	
	// >> 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьСтроки(Значение)
	
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		СтрокаТоваров.СтрокаВыбрана = Значение;
	КонецЦикла;
	
	// << 07.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751 
	КР_ОтметитьСтроки(Значение);
	// >> 07.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	

КонецПроцедуры

#КонецОбласти

#Область КР_ДобавленныеПроцедурыИФункции

// << 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере
Процедура КР_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
		
	// КР_ЭтоАдресныйСкладБезордернойОтгрузки 
	РеквизитФормы = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(ЭтотОбъект,
		"КР_ЭтоАдресныйСкладБезордернойОтгрузки", Новый ОписаниеТипов("Булево"));  
	Параметры.Свойство("КР_ЭтоАдресныйСкладБезордернойОтгрузки", ЭтотОбъект.КР_ЭтоАдресныйСкладБезордернойОтгрузки);
	ЭтоАдресныйСкладБезордернойОтгрузки = ЭтотОбъект.КР_ЭтоАдресныйСкладБезордернойОтгрузки;
	
	Если ЭтоАдресныйСкладБезордернойОтгрузки Тогда     
				
		// ТаблицаТовары.КР_Короб 
		РеквизитФормы = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(ЭтотОбъект,
			"КР_Короб", Новый ОписаниеТипов("ДокументСсылка.УпаковочныйЛист"), "ТаблицаТовары");
			
		// КР_ГруппаТовары	
		ГруппаТовары = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(ЭтотОбъект,
			"КР_ГруппаТовары", , Элементы.ТаблицаТовары);
		КР_МетодыМодификацииФорм.УстановитьСвойстваОбычнаяГруппаГоризонтальноБезОтображения(
			ГруппаТовары);
			
		// КР_СписокКоробов	
		РеквизитФормыСписокКоробов = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(ЭтотОбъект,
			"КР_СписокКоробов", Новый ОписаниеТипов("СписокЗначений"), , 
			НСтр("ru = 'Список коробов'"));
				
		ЭлементФормыСписокКоробов = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
			РеквизитФормыСписокКоробов, ГруппаТовары, , "ТаблицаФормы");  
		ЭлементФормыСписокКоробов.ИзменятьСоставСтрок = Ложь;
		ЭлементФормыСписокКоробов.ИзменятьПорядокСтрок = Ложь;    
		ЭлементФормыСписокКоробов.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ЭлементФормыСписокКоробов.УстановитьДействие("ПриАктивизацииСтроки", "КР_СписокКоробовПриАктивизацииСтроки");
  		ЭлементФормыСписокКоробов.УстановитьДействие("Выбор", "КР_СписокКоробовВыбор");
		
		Элементы.Переместить(Элементы.ТаблицаТовары, ГруппаТовары);	
		
		// КР_СписокКоробов.Пометка
		ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
			"КР_СписокКоробов.Пометка", ЭлементФормыСписокКоробов);
		ЭлементФормы.УстановитьДействие("ПриИзменении", "КР_СписокКоробовПометкаПриИзменении");

		// КР_СписокКоробов.Значение
		ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
			"КР_СписокКоробов.Значение", ЭлементФормыСписокКоробов);  
		ЭлементФормы.ТолькоПросмотр = Истина;
		
		// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
		// КР_ЗагрузитьДанныеИзТСД
		КомандаФормы = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект,
			"КР_ЗагрузитьДанныеИзТСД", НСтр("ru = 'Загрузить данные из ТСД'"));
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		КомандаФормы.Картинка 			= БиблиотекаКартинок.ПодключаемоеОборудованиеТерминалСбораДанных16;
		КомандаФормы.Отображение 		= ОтображениеКнопки.Картинка;
		
		ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
			КомандаФормы, , Элементы.ТаблицаТоварыОтменитьПоиск);
		// >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
		
	КонецЕсли;
	
КонецПроцедуры // >> 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере
Процедура КР_УстановитьУсловноеОформление()
	
	Если ЭтотОбъект.КР_ЭтоАдресныйСкладБезордернойОтгрузки Тогда 
		//
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КР_СписокКоробовЗначение");

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КР_СписокКоробов.Значение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '< без короба >'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);
		
	КонецЕсли;
		
КонецПроцедуры // >> 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере
Процедура КР_РаспределитьТоварыПоКоробам(ТоварыНакладной, ИмяПоляЗаказ)
	
	МассивИспользуемыхКоробов = Новый Массив; 
	
	ТекстыЗапроса = Новый Массив;
	
	// Выберем исходные данные во временную таблицу
	ТекстыЗапроса.Добавить("ВЫБРАТЬ Т.* ПОМЕСТИТЬ ИсходныеДанные ИЗ &ТоварыНакладной КАК Т");   
	
	// Получим остатки по коробам
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Т.ДокументОтгрузки КАК ИмяПоляЗаказ,
	|	Т.Короб КАК Короб
	|ПОМЕСТИТЬ КоробаКОтгрузке
	|ИЗ
	|	РегистрНакопления.КР_КоробаКОтгрузке.Остатки(
	|			,
	|			ДокументОтгрузки В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.ИмяПоляЗаказ
	|				ИЗ
	|					ИсходныеДанные КАК Т)) КАК Т
	|ГДЕ
	|	Т.СобраноОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Короб,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ УпаковочныйЛистТовары
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка В
	|			(ВЫБРАТЬ
	|				КоробаКОтгрузке.Короб КАК Короб
	|			ИЗ
	|				КоробаКОтгрузке КАК КоробаКОтгрузке)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИмяПоляЗаказ КАК ИмяПоляЗаказ,
	|	Т.Короб КАК Короб,
	|	УЛ.Номенклатура КАК Номенклатура,
	|	УЛ.Характеристика КАК Характеристика,
	|	УЛ.Серия КАК Серия,
	|	УЛ.Количество КАК Количество
	|ИЗ
	|	КоробаКОтгрузке КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УпаковочныйЛистТовары КАК УЛ
	|		ПО Т.Короб = УЛ.Короб
	|ГДЕ
	|	(УЛ.Номенклатура, УЛ.Характеристика, УЛ.Серия, Т.ИмяПоляЗаказ) В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.Номенклатура,
	|				Т.Характеристика,
	|				Т.Серия,
	|				Т.ИмяПоляЗаказ
	|			ИЗ
	|				ИсходныеДанные КАК Т)"
	);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляЗаказ", ИмяПоляЗаказ);
	
	Запрос = Новый Запрос(ТекстЗапроса); 
	Запрос.УстановитьПараметр("ТоварыНакладной", ТоварыНакладной);   
	Запрос.УстановитьПараметр("Накладная", Накладная);   
	
	// Заполним для быстрого поиска "по ключам" информацию о размещении товаров в коробах
	ДанныеРазмещенияВКоробах = Новый Соответствие;
	РезультатЗапроса = Запрос.Выполнить();   
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		
		КлючПоиска = КР_СформироватьКлючПоискаДанныхПоКоробам(ВыборкаДетальныеЗаписи, ИмяПоляЗаказ);   
		РазмещениеВКоробах = ДанныеРазмещенияВКоробах[КлючПоиска];
		Если РазмещениеВКоробах = Неопределено Тогда 
			РазмещениеВКоробах = Новый Массив;
			ДанныеРазмещенияВКоробах[КлючПоиска] = РазмещениеВКоробах;
		КонецЕсли;	
		
		СтрокаДанных = Новый Структура;
		СтрокаДанных.Вставить("Короб", ВыборкаДетальныеЗаписи.Короб);
		СтрокаДанных.Вставить("Количество", ВыборкаДетальныеЗаписи.Количество); 
		РазмещениеВКоробах.Добавить(СтрокаДанных);
		
	КонецЦикла;	
	
	// Собственно распределение  
	// В процессе распределения мы будем разбивать исходные строки при необходимости
	// Так как платформа неявно создает итератор для обхода, 
	//	то нам не нужно беспокоиться о том что обход "не увидит" новых строк
	//	но мы должны их вставить после обрабатываемых строк 	
	ИндексСтроки = -1;   
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаДанных Из ТоварыНакладной Цикл 
		
		ИндексСтроки = ИндексСтроки + 1;
		
		КлючПоиска = КР_СформироватьКлючПоискаДанныхПоКоробам(СтрокаДанных, ИмяПоляЗаказ);   
		РазмещениеВКоробах = ДанныеРазмещенияВКоробах[КлючПоиска];
		
		// Если короба изначально нет или уже размещен (пустой массив)
		Если Не ЗначениеЗаполнено(РазмещениеВКоробах) Тогда  
			СтрокиКУдалению.Добавить(СтрокаДанных);
			Продолжить;
		КонецЕсли;
		
		РазмещениеВКоробе = РазмещениеВКоробах[0];  
		
		// Указываем короб для текущей строки
		СтрокаДанных.КР_Короб = РазмещениеВКоробе.Короб; 
		МассивИспользуемыхКоробов.Добавить(РазмещениеВКоробе.Короб);
		
		// A2105505-1914                
		//Количество = Мин(СтрокаДанных.Количество, СтрокаДанных.КоличествоВЗаказе);  
		Количество = СтрокаДанных.КоличествоВЗаказе;
		//
		
		Разница = Количество - РазмещениеВКоробе.Количество;
		
		// В коробе такое же количество
		Если Разница = 0 Тогда 
			
			// Удаляем информацию о коробе
			РазмещениеВКоробах.Удалить(0);   
			
		// В коробе больше. Уменьшаем остаток по коробу на разницу 	
		ИначеЕсли Разница < 0 Тогда   
		
			// Корректируем количестово в коробе
			РазмещениеВКоробе.Количество = -Разница;	
			
		// В коробе меньше. Делим строки
		Иначе
			
			// Добавляем копию строки
			НоваяСтрока = ТоварыНакладной.Вставить(ИндексСтроки + 1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			
			// Удаляем информацию о коробе
			РазмещениеВКоробах.Удалить(0);   
			
			Коэффициент = РазмещениеВКоробе.Количество / Количество; 
			
			// Корректируем данные  
			СтрокаДанных.Количество = СтрокаДанных.Количество * Коэффициент;	
			СтрокаДанных.КоличествоВЗаказе = СтрокаДанных.КоличествоВЗаказе * Коэффициент;	
			СтрокаДанных.КоличествоВНакладной = СтрокаДанных.КоличествоВНакладной * Коэффициент;	
			СтрокаДанных.КоличествоВОрдере = СтрокаДанных.КоличествоВОрдере * Коэффициент;	

			Коэффициент = Разница / НоваяСтрока.Количество;
			// Корректируем данные
			НоваяСтрока.Количество = НоваяСтрока.Количество * Коэффициент;	
			НоваяСтрока.КоличествоВЗаказе = НоваяСтрока.КоличествоВЗаказе * Коэффициент;	
			НоваяСтрока.КоличествоВНакладной = НоваяСтрока.КоличествоВНакладной * Коэффициент;	
			НоваяСтрока.КоличествоВОрдере = НоваяСтрока.КоличествоВОрдере * Коэффициент;	
			
			// В новой строке очищаем короб
			НоваяСтрока.КР_Короб = Неопределено;    
			
		КонецЕсли;	
				
	КонецЦикла;

	// Удаляем строки, на которые не хватило остатков
	Для Каждого СтрокаУКдалению Из СтрокиКУдалению Цикл 
		ТоварыНакладной.Удалить(СтрокаУКдалению);	
	КонецЦикла;
	
	КР_ЗаполнитьСписокКоробовСУчетомОтбораПоЗаказам();
	
КонецПроцедуры // >> 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере
Процедура КР_ЗаполнитьСписокКоробовСУчетомОтбораПоЗаказам()
	
	ЭтотОбъект.КР_СписокКоробов.Очистить();
	
	// Выгрузим используемые короба
	ОтборСтрок = Новый Структура;
	Если ПоЗаказам Тогда
		ОтборСтрок.Вставить("ЗаказИзНакладной", Истина);
	КонецЕсли;	

	МассивИспользуемыхКоробов = ТаблицаТовары.Выгрузить(ОтборСтрок, "КР_Короб").ВыгрузитьКолонку(0);
	МассивИспользуемыхКоробов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИспользуемыхКоробов);
	
	// Заполним список коробов. Сразу установим пометки
	Для Каждого Короб Из МассивИспользуемыхКоробов Цикл 
		ЭтотОбъект.КР_СписокКоробов.Добавить(Короб, , Истина);
	КонецЦикла;

КонецПроцедуры // >> 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	

// << 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере
Функция КР_СформироватьКлючПоискаДанныхПоКоробам(Данные, ИмяПоляЗаказ)

	Возврат XMLСтрока(Данные.Номенклатура) 
		+ XMLСтрока(Данные.Характеристика)
		+ XMLСтрока(Данные.Серия)
		+ XMLСтрока(Данные[ИмяПоляЗаказ]);

КонецФункции // >> 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	

// << 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_СписокКоробовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ОтборСтрок = Новый Структура;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		ОтборСтрок.Вставить("КР_Короб", ТекущиеДанные.Значение);  
	Иначе
		ОтборСтрок.Вставить("КР_Короб", Неопределено);  
	КонецЕсли;
		
	Если ПоЗаказам Тогда
		ОтборСтрок.Вставить("ЗаказИзНакладной", Истина);
	КонецЕсли;	
	
	Элементы.ТаблицаТовары.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);   
	
	ТолькоПросмотрДанных = ЗначениеЗаполнено(ОтборСтрок.КР_Короб);
	Элементы.КоличествоУпаковок.ТолькоПросмотр = ТолькоПросмотрДанных;
	Элементы.СтрокаВыбрана.ТолькоПросмотр = ТолькоПросмотрДанных;
		
КонецПроцедуры // >> 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_СписокКоробовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КР_СписокКоробов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "КР_СписокКоробовЗначение"
		И ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Значение);
	КонецЕсли;
				
КонецПроцедуры // >> 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_СписокКоробовПометкаПриИзменении(Элемент)
	
	// Синхронизируем пометки с учетом "установленого" отбора
	// Отберем строки непосредственно у объекта. 
	//	Т.е. мы не смотрим что именно отображено в таблице так как там может быть дополнительный фильтр по поиску  
	ТекущиеДанные = Элементы.КР_СписокКоробов.ТекущиеДанные;
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("КР_Короб", ТекущиеДанные.Значение);
	
	Пометка = ТекущиеДанные.Пометка;
	НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаДанных Из НайденныеСтроки Цикл 
		СтрокаДанных.СтрокаВыбрана = Пометка;	
	КонецЦикла;
	
КонецПроцедуры // >> 06.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 07.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751 
&НаСервере
Процедура КР_ОтметитьСтроки(Значение)

	Если ЭтотОбъект.КР_ЭтоАдресныйСкладБезордернойОтгрузки Тогда 
	
		Для Каждого СтрокаСписка Из ЭтотОбъект.КР_СписокКоробов Цикл
			СтрокаСписка.Пометка = Значение;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры // >> 07.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
&НаКлиенте
Процедура КР_ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	ДаннныеТСДДляРежимаОтладки = КР_РаботаСТСД.ПолучитьДаннныеТСДДляРежимаОтладки();
	Если ДаннныеТСДДляРежимаОтладки <> Неопределено Тогда
		// Подменяем типовую функцию по работе с ТСД "МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД"
		ОбработатьШтрихкоды(ДаннныеТСДДляРежимаОтладки);
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);

КонецПроцедуры // >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955

// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры // >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955

// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СоответствиеКоробовШтрихкодам = КР_РаботаСТСД.ПолучитьСоответствиеЭлементовШтрихкодам(ДанныеШтрихкодов);
	Для Каждого ТекущееСоответствие Из СоответствиеКоробовШтрихкодам Цикл
		
		Если ТекущееСоответствие.Значение = ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка") Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитСписокКоробов = ЭтотОбъект["КР_СписокКоробов"];
		ЭлементаСписка = РеквизитСписокКоробов.НайтиПоЗначению(ТекущееСоответствие.Значение);
		Если ЭлементаСписка = Неопределено Тогда
			// Нет смысла искать зависимые строки, если короба нет в списке
			Продолжить;
		КонецЕсли;
		
		ЭлементаСписка.Пометка = Истина;

		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("КР_Короб", ТекущееСоответствие.Значение);
		
		// Установим Пометку "Выбрано" для всех подчиненных строк
		НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаДанных Из НайденныеСтроки Цикл
			СтрокаДанных.СтрокаВыбрана = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
