#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.246";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f14fbf41-d149-4dd9-8a07-200e55d1112e");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерения ""Объект расчетов"".'" );
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Контрагенты.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаказПоставщику = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.ЗаказПоставщику <> &ОбъектРасчетовПустаяСсылка
		|			ТОГДА ДанныеРегистра.ЗаказПоставщику
		|		ИНАЧЕ ЕСТЬNULL(ОбъектыРасчетов.Ссылка, &ОбъектРасчетовПустаяСсылка)
		|	КОНЕЦ КАК ЗаказПоставщику,
		|	&ДополнительныеПоля КАК ДополнительныеПоля,
		|	ДанныеРегистра.НомерСтроки КАК НомерСтроки,
		|	ДанныеРегистра.Регистратор КАК Регистратор,
		|	ДанныеРегистра.УдалитьЗаказПоставщику КАК ИсточникОбъектаРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
		|			ПО ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договора
		|			ПО Договора.Ссылка = Аналитика.Договор
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО ДанныеРегистра.УдалитьЗаказПоставщику 				= ОбъектыРасчетов.Объект
		|			И ОбъектыРасчетов.ТипРасчетов 							= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|			И ОбъектыРасчетов.Контрагент 							= Аналитика.Контрагент
		|			И ОбъектыРасчетов.Организация							= Аналитика.Организация
		|			И ОбъектыРасчетов.ВалютаВзаиморасчетов 					= ДанныеРегистра.Валюта
		|
		|			И (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.УдалитьЗаказПоставщику) = ТИП(Справочник.ДоговорыКонтрагентов)
		|						И Договора.РазрешенаРаботаСДочернимиПартнерами
		|					ТОГДА Договора.Партнер
		|				ИНАЧЕ Аналитика.Партнер
		|			КОНЕЦ = ОбъектыРасчетов.Партнер)
		|
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И НЕ ДанныеРегистра.УдалитьЗаказПоставщику В (&ПустыеЗначенияОбъектовРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.ЗаказПоставщику <> &ОбъектРасчетовПустаяСсылка
		|			ТОГДА ДанныеРегистра.ЗаказПоставщику
		|		ИНАЧЕ ЕСТЬNULL(ОбъектыРасчетов.Ссылка, &ОбъектРасчетовПустаяСсылка)
		|	КОНЕЦ КАК ЗаказПоставщику,
		|	&ДополнительныеПоля КАК ДополнительныеПоля,
		|	ДанныеРегистра.НомерСтроки,
		|	ДанныеРегистра.Регистратор,
		|	ДанныеРегистра.АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
		|			ПО ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО ОбъектыРасчетов.ТипРасчетов 				= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|			И ОбъектыРасчетов.Организация 				= Аналитика.Организация
		|			И ОбъектыРасчетов.Контрагент 				= Аналитика.Контрагент
		|			И ОбъектыРасчетов.Договор 					= Аналитика.Договор
		|			И ОбъектыРасчетов.НаправлениеДеятельности 	= Аналитика.НаправлениеДеятельности
		|			И ОбъектыРасчетов.Партнер 					= Аналитика.Партнер
		|			И ОбъектыРасчетов.ВалютаВзаиморасчетов 		= ДанныеРегистра.Валюта
		|			И ОбъектыРасчетов.Объект 					= НЕОПРЕДЕЛЕНО
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И ДанныеРегистра.УдалитьЗаказПоставщику В(&ПустыеЗначенияОбъектовРасчетов)
		|ИТОГИ ПО
		|	Регистратор";
		
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Запрос.УстановитьПараметр("ПустыеЗначенияКонтрагент", ОбъектыРасчетовСервер.ПустыеЗначенияКонтрагент());
	Запрос.УстановитьПараметр("ОбъектРасчетовПустаяСсылка", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	ОбъектыРасчетовСервер.ДополнитьЗапросПрочимиПолями(Запрос, МетаданныеРегистра);
	
	ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
	
	Для Каждого ПорцияДанных Из ОбновляемыеДанные Цикл
	
		НачатьТранзакцию();
		
		Попытка
			ОбрабатываемыйДокумент = ПорцияДанных.Регистратор;
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ОбрабатываемыйДокумент);
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистраторы", ОбрабатываемыйДокумент);
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРегистратор.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
				НаборЗаписей = СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
				ЕстьОшибкаЗапонения = Ложь;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоваяСтрокаНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаНабора, ВыборкаДетальныеЗаписи);
					Если ВыборкаДетальныеЗаписи.ЗаказПоставщику = Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
						Если ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
							ИЛИ ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.АналитикаУчетаПоПартнерам) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось заполнить объект расчетов в наборе записей регистра накопления %1, строка № %2
								|в источнике данных объекта расчетов обнаружена ссылка на несуществующий элемент.'"),
								ПолноеИмяРегистра,
								ВыборкаРегистратор.Регистратор);
							ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								МетаданныеРегистра,
								,
								ТекстСообщения);
						ИначеЕсли НоваяСтрокаНабора.АналитикаУчетаПоПартнерам = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка()
								И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) Тогда
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось заполнить объект расчетов наборе записей регистра накопления %1, строка № %2
									|Не заполнена аналитика учета по партнерам.'"),
									ВыборкаРегистратор.Регистратор,
									ВыборкаДетальныеЗаписи.НомерСтроки);
								ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Ошибка,
									МетаданныеРегистра,
									,
									ТекстСообщения);
						Иначе
							Если ОбновлениеИнформационнойБазы.ОбъектОбработан(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов).Обработан Тогда
								Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) Тогда
									ОбъектРасчетов = Неопределено;
									Если Не ТипЗнч(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) = Тип("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам") Тогда
										ОбъектыРасчетовСервер.ДогенерироватьОбъектыРасчетов(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов);
										
										ДопПараметрыПоиска 						= ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
										Аналитика 								= ВыборкаДетальныеЗаписи.АналитикаУчетаПоПартнерам;
										ДопПараметрыПоиска.Контрагент 			= Аналитика.Контрагент;
										ДопПараметрыПоиска.Партнер				= Аналитика.Партнер;
										ДопПараметрыПоиска.ВалютаВзаиморасчетов = ВыборкаДетальныеЗаписи.Валюта;
										ДопПараметрыПоиска.ОбновлениеИБ			= Истина;
										
										ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
											ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
											Аналитика.Организация,
											Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком,
											ДопПараметрыПоиска);
									ИначеЕсли Не ВсеОбъектыРасчетовСгенерированы Тогда 
										ЕстьОшибкаЗапонения = Истина;
										Прервать;
									КонецЕсли;
									
									Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
										НоваяСтрокаНабора.ЗаказПоставщику = ОбъектРасчетов;
									Иначе
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Не удалось заполнить объект расчетов наборе записей регистра накопления %1, 
											|по источнику %2.'"),
											ПолноеИмяРегистра,
											ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов);
										ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
											УровеньЖурналаРегистрации.Ошибка,
											МетаданныеРегистра,
											,
											ТекстСообщения);
									КонецЕсли;
								КонецЕсли;
							Иначе
								ЕстьОшибкаЗапонения = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(НоваяСтрокаНабора.ЗаказПоставщику)
								И Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
								И Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.АналитикаУчетаПоПартнерам) Тогда
									ЕстьОшибкаЗапонения = Истина;
									Прервать;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(НоваяСтрокаНабора.ЗаказПоставщику)
						И Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
						И Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.АналитикаУчетаПоПартнерам)
						И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) Тогда
							ЕстьОшибкаЗапонения = Истина;
							Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьОшибкаЗапонения Тогда
					Продолжить;
				КонецЕсли;
				
				Если НаборЗаписей.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
			
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 , по причине: %2'");
			ТекстСообщения = СтрШаблон(Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				,
				ТекстСообщения);
		
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли