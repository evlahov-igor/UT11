#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.5.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("16adffef-b348-4a3d-ba79-afa8034e040b");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение ""Объект расчетов"" и реквизит ""Источник ГФУ расчетов""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	ИЛИ (ДанныеРегистра.ИсточникГФУРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчетов))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки                                       КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА НЕ РасчетыСКлиентами.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСКлиентами.ОбъектРасчетов
		|		КОГДА НЕ РасчетыСПоставщиками.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСПоставщиками.ОбъектРасчетов
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	КОНЕЦ                                                            КАК ОбъектРасчетов,
		|	ДанныеРегистра.Регистратор                                       КАК Регистратор,
		|	ДанныеРегистра.УдалитьОбъектРасчетов                             КАК ИсточникОбъектаРасчетов
		|ИЗ
		|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|		ПО ДанныеРегистра.Регистратор = РасчетыСКлиентами.Регистратор
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
		|			И ДанныеРегистра.УдалитьОбъектРасчетов = РасчетыСКлиентами.УдалитьЗаказКлиента
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|		ПО ДанныеРегистра.Регистратор = РасчетыСПоставщиками.Регистратор
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
		|			И ДанныеРегистра.УдалитьОбъектРасчетов = РасчетыСПоставщиками.УдалитьЗаказПоставщику
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И НЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
		|	И НЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		//++ Локализация
		//-- Локализация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки,
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)),
		|	ДанныеРегистра.Регистратор,
		|	ДанныеРегистра.УдалитьОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ДанныеРегистра.УдалитьОбъектРасчетов = ОбъектыРасчетов.Объект
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = ОбъектыРасчетов.Организация.ГоловнаяОрганизация
		|			И ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) = ОбъектыРасчетов.ТипРасчетов
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
		|	И (ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль)
		|	ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки,
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)),
		|	ДанныеРегистра.Регистратор,
		|	ДанныеРегистра.УдалитьОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ДанныеРегистра.УдалитьОбъектРасчетов = ОбъектыРасчетов.Объект
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = ОбъектыРасчетов.Организация.ГоловнаяОрганизация
		|			И ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) = ОбъектыРасчетов.ТипРасчетов
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
		|	И (ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль)
		|	ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки,
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)),
		|	ДанныеРегистра.Регистратор,
		|	ДанныеРегистра.УдалитьОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ДанныеРегистра.УдалитьОбъектРасчетов = ОбъектыРасчетов.Объект
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = ОбъектыРасчетов.Организация.ГоловнаяОрганизация
		|			И ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) = ОбъектыРасчетов.ТипРасчетов
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И ДанныеРегистра.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|
		//++ Локализация
		//-- Локализация
		|ИТОГИ ПО
		|	Регистратор";
		
	ПорцииДляОбработки = ОбъектыРасчетовСервер.ПорцииДанныхДляОбработки(ОбновляемыеДанные);
	
	Для Каждого ПорцияДанных Из ПорцииДляОбработки Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ПорцияДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистраторы", ПорцияДанных.ВыгрузитьКолонку("Регистратор"));
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРегистратор.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
				НаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей - 
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
				НаборЗаписей.Прочитать();
				
				ЕстьОшибкаЗапонения = Ложь;
				ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СтрокаНабора = НаборЗаписей[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
					
					Если Не ЗначениеЗаполнено(СтрокаНабора.ОбъектРасчетов) Тогда
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
							И ВыборкаДетальныеЗаписи.ОбъектРасчетов <> Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
								СтрокаНабора.ОбъектРасчетов = ВыборкаДетальныеЗаписи.ОбъектРасчетов;
						ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
							И ВыборкаДетальныеЗаписи.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
								Если ВсеОбъектыРасчетовСгенерированы Тогда
									Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
										И Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) Тогда
											ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru='Не найден объект расчетов для истоника данных: %1 по набору записей регистратора: %2'"),
												ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
												ВыборкаРегистратор.Регистратор));
									КонецЕсли;
								Иначе
									ЕстьОшибкаЗапонения = Истина;
									Прервать;
								КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаНабора.ИсточникГФУРасчетов) 
						И ЗначениеЗаполнено(СтрокаНабора.УдалитьИсточникГФУРасчетов) Тогда
									СтрокаНабора.ИсточникГФУРасчетов = СтрокаНабора.ОбъектРасчетов;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьОшибкаЗапонения Тогда
					Продолжить;
				КонецЕсли;
				
				Если НаборЗаписей.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
		
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
		
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1, по причине: %2'");
			ТекстСообщения = 
				СтрШаблон(Шаблон,
					ПолноеИмяРегистра,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				,
				ТекстСообщения);
		
		КонецПопытки;
	
	КонецЦикла;

	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
