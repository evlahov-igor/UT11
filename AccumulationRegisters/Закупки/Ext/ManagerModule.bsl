#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Склад)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.Закупки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.5.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("631a2f65-e6f5-4fdf-afb0-4cc9bb9495a5");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.Закупки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Источник ГФУ расчетов""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.Закупки.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.Закупки.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.Закупки КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ИсточникГФУРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчета)
	|		И НЕ (ДанныеРегистра.УдалитьИсточникГФУРасчетов ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				И ВЫРАЗИТЬ(ДанныеРегистра.УдалитьИсточникГФУРасчетов КАК Документ.ВозвратТоваровПоставщику).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчета", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.ИсточникГФУРасчетов <> &ОбъектРасчетовПустаяСсылка
		|			ТОГДА ДанныеРегистра.ИсточникГФУРасчетов
		|		ИНАЧЕ ЕСТЬNULL(ОбъектыРасчетов.Ссылка, &ОбъектРасчетовПустаяСсылка)
		|	КОНЕЦ КАК ИсточникГФУРасчетов,
		|	&ДополнительныеПоля КАК ДополнительныеПоля,
		|	ДанныеРегистра.Регистратор КАК Регистратор,
		|	ДанныеРегистра.НомерСтроки,
		|	ДанныеРегистра.УдалитьИсточникГФУРасчетов КАК ИсточникОбъектаРасчетов
		|ИЗ
		|	РегистрНакопления.Закупки КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договора
		|			ПО Договора.Ссылка = ДанныеРегистра.Договор
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОрганизацияСпр
		|			ПО ДанныеРегистра.Организация = ОрганизацияСпр.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО ДанныеРегистра.УдалитьИсточникГФУРасчетов 				= ОбъектыРасчетов.Объект
		|			И ОбъектыРасчетов.ТипРасчетов 							= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|			И ОбъектыРасчетов.Контрагент 							= ДанныеРегистра.Контрагент
		|			И ОбъектыРасчетов.Организация.ГоловнаяОрганизация 		= ОрганизацияСпр.ГоловнаяОрганизация
		|			И ОбъектыРасчетов.ВалютаВзаиморасчетов 					= ДанныеРегистра.ВалютаВзаиморасчетов
		|
		|			И (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.УдалитьИсточникГФУРасчетов) = ТИП(Справочник.ДоговорыКонтрагентов)
		|						И Договора.РазрешенаРаботаСДочернимиПартнерами
		|					ТОГДА Договора.Партнер
		|				ИНАЧЕ ДанныеРегистра.Партнер
		|			КОНЕЦ = ОбъектыРасчетов.Партнер) 
		|
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|ИТОГИ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.Закупки КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистра.Регистратор";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Запрос.УстановитьПараметр("ОбъектРасчетовПустаяСсылка", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	ОбъектыРасчетовСервер.ДополнитьЗапросПрочимиПолями(Запрос, МетаданныеРегистра);
	
	ПорцииДляОбработки = ОбъектыРасчетовСервер.ПорцииДанныхДляОбработки(ОбновляемыеДанные);
	
	ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
	
	Для Каждого ПорцияДанных Из ПорцииДляОбработки Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ПорцияДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистраторы", ПорцияДанных.ВыгрузитьКолонку("Регистратор"));
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			ВыборкаРегистратор = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КоличествоСтрок = РезультатЗапроса[1].Выгрузить();
			
			Если Не ВсеОбъектыРасчетовСгенерированы Тогда
				ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
			КонецЕсли;
			
			Пока ВыборкаРегистратор.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
				НаборЗаписей = СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
				ЕстьОшибкаЗапонения = Ложь;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоваяСтрокаНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаНабора, ВыборкаДетальныеЗаписи);
					Если Не ЗначениеЗаполнено(НоваяСтрокаНабора.ИсточникГФУРасчетов)
						И ВыборкаДетальныеЗаписи.ИсточникГФУРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка()
						И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.УдалитьИсточникГФУРасчетов) Тогда
							Если Не ВсеОбъектыРасчетовСгенерированы Тогда
								ЕстьОшибкаЗапонения = Истина;
								Прервать;
							Иначе
								ДопПараметрыПоиска = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
								ДопПараметрыПоиска.ОбновлениеИБ = Истина;
								ДопПараметрыПоиска.НеГенерироватьИсключение = Истина;
								
								ИсточникГФУ = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
									ВыборкаДетальныеЗаписи.УдалитьИсточникГФУРасчетов,
									ВыборкаДетальныеЗаписи.Организация,
									Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком,
									ДопПараметрыПоиска);
									
								Если ЗначениеЗаполнено(ИсточникГФУ) Тогда
									НоваяСтрокаНабора.ИсточникГФУРасчетов = ИсточникГФУ;
								КонецЕсли;
							КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьОшибкаЗапонения Тогда
					Продолжить;
				КонецЕсли;
				
				ИсходноеКоличествоСтрок = КоличествоСтрок.Найти(ВыборкаРегистратор.Регистратор, "Регистратор").КоличествоСтрок;
				
				Если ИсходноеКоличествоСтрок <> НаборЗаписей.Количество() Тогда
				
					ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='При обработке набора записей регистра накопления %1 обнаружились дубли строк по регистратору: %2'"),
						МетаданныеРегистра.Имя,
						ВыборкаРегистратор.Регистратор));
				
				КонецЕсли;
				
				Если НаборЗаписей.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
			
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 , по причине: %2'");
			ТекстСообщения = СтрШаблон(Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				,
				ТекстСообщения);
		
		КонецПопытки;
	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
