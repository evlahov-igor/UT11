#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Организация)
	|	И( ЗначениеРазрешено(Партнер)
	|	ИЛИ ЗначениеРазрешено(КорПартнер)
	|	) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.6.65";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c861d43c-d35a-44fc-b840-a9034842e90f");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение ""Объект расчетов""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов В (&ПустоеПолеПриемник)
	|	ИЛИ ДанныеРегистра.КорОбъектРасчетов В (&ПустоеПолеПриемник)
	|		И НЕ ДанныеРегистра.УдалитьКорОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|	ИЛИ ДанныеРегистра.ИсточникГФУРасчетов В (&ПустоеПолеПриемник)
	|		И НЕ ДанныеРегистра.УдалитьИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|	ИЛИ ДанныеРегистра.КорИсточникГФУРасчетов  В (&ПустоеПолеПриемник)
	|		И НЕ ДанныеРегистра.УдалитьКорИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчетов)";
	
	ПустоеПолеПриемник = Новый Массив();
	ПустоеПолеПриемник.Добавить(Неопределено);
	ПустоеПолеПриемник.Добавить(Справочники.ОбъектыРасчетов.ПустаяСсылка());
	ПустоеПолеПриемник.Добавить(Справочники.ДоговорыКредитовИДепозитов.ПустаяСсылка());
	ПустоеПолеПриемник.Добавить(Справочники.ПодарочныеСертификаты.ПустаяСсылка());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Запрос.УстановитьПараметр("ПустоеПолеПриемник", ПустоеПолеПриемник);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор,
		|	ДанныеРегистра.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА НЕ РасчетыСКлиентамиОР.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСКлиентамиОР.ОбъектРасчетов
		|		КОГДА НЕ РасчетыСПоставщикамиОР.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСПоставщикамиОР.ОбъектРасчетов
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	КОНЕЦ КАК ОбъектРасчетов,	
		|	ДанныеРегистра.УдалитьОбъектРасчетов КАК ИсточникОбъектРасчетов,
		|	
		|	ВЫБОР
		|		КОГДА НЕ РасчетыСКлиентамиКорОР.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСКлиентамиКорОР.ОбъектРасчетов
		|		КОГДА НЕ РасчетыСПоставщикамиКорОР.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСПоставщикамиКорОР.ОбъектРасчетов
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	КОНЕЦ КАК КорОбъектРасчетов,	
		|	ДанныеРегистра.УдалитьКОРОбъектРасчетов КАК ИсточникКорОбъектРасчетов,
		|	
		|	ВЫБОР
		|		КОГДА НЕ РасчетыСКлиентамиИсточникГФУ.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСКлиентамиИсточникГФУ.ОбъектРасчетов
		|		КОГДА НЕ РасчетыСПоставщикамиИсточникГФУ.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСПоставщикамиИсточникГФУ.ОбъектРасчетов
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	КОНЕЦ КАК ИсточникГФУ,
		|	ДанныеРегистра.УдалитьИсточникГФУРасчетов КАК ИсточникГФУРасчетов,
		|	
		|	ВЫБОР
		|		КОГДА НЕ РасчетыСКлиентамиКорИсточникГФУ.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСКлиентамиКорИсточникГФУ.ОбъектРасчетов
		|		КОГДА НЕ РасчетыСПоставщикамиКорИсточникГФУ.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСПоставщикамиКорИсточникГФУ.ОбъектРасчетов
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	КОНЕЦ КАК КорИсточникГФУ,
		|	ДанныеРегистра.УдалитьКорИсточникГфуРасчетов КАК ИсточникКорГФУРасчетов
		|ИЗ
		|	РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДанныеРегистра
		// ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентамиОР
		|		ПО РасчетыСКлиентамиОР.Регистратор В(&Регистраторы)
		|			И (ДанныеРегистра.Регистратор = РасчетыСКлиентамиОР.Регистратор)
		|			И (ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация)
		|			И (ДанныеРегистра.УдалитьОбъектРасчетов = РасчетыСКлиентамиОР.УдалитьЗаказКлиента
		|				ИЛИ (ДанныеРегистра.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
		|						И РасчетыСКлиентамиОР.УдалитьЗаказКлиента В (&ПустыеЗначенияОбъектовРасчетов)))
		|			И (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				ИЛИ ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И (ДанныеРегистра.КорПартнер = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.КорКонтрагент = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Контрагент
		|						ИЛИ ДанныеРегистра.Партнер = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.Контрагент = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Контрагент)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|					И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
		|				ИЛИ ДанныеРегистра.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И ДанныеРегистра.Партнер = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.Контрагент = РасчетыСКлиентамиОР.АналитикаУчетаПоПартнерам.Контрагент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщикамиОР
		|		ПО РасчетыСПоставщикамиОР.Регистратор В(&Регистраторы)
		|			И (ДанныеРегистра.Регистратор = РасчетыСПоставщикамиОР.Регистратор)
		|			И (ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация)
		|			И (ДанныеРегистра.УдалитьОбъектРасчетов = РасчетыСПоставщикамиОР.УдалитьЗаказПоставщику
		|				ИЛИ (ДанныеРегистра.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
		|						И РасчетыСПоставщикамиОР.УдалитьЗаказПоставщику В (&ПустыеЗначенияОбъектовРасчетов)))
		|			И (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				ИЛИ ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И (ДанныеРегистра.КорПартнер = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.КорКонтрагент = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Контрагент
		|						ИЛИ ДанныеРегистра.Партнер = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.Контрагент = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Контрагент)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|					И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
		|				ИЛИ ДанныеРегистра.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И ДанныеРегистра.Партнер = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.Контрагент = РасчетыСПоставщикамиОР.АналитикаУчетаПоПартнерам.Контрагент)
		|			
		// КорОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентамиКорОР
		|		ПО РасчетыСКлиентамиКорОР.Регистратор В(&Регистраторы)
		|			И (ДанныеРегистра.Регистратор = РасчетыСКлиентамиКорОР.Регистратор)
		|			И (ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентамиКорОР.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация)
		|			И (ДанныеРегистра.УдалитьКорОбъектРасчетов = РасчетыСКлиентамиКорОР.УдалитьЗаказКлиента)
		|			И (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				ИЛИ (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|						ИЛИ ДанныеРегистра.КорПартнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие))
		|					И (ДанныеРегистра.КорПартнер = РасчетыСКлиентамиКорОР.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.КорКонтрагент = РасчетыСКлиентамиКорОР.АналитикаУчетаПоПартнерам.Контрагент
		|						ИЛИ ДанныеРегистра.Партнер = РасчетыСКлиентамиКорОР.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.Контрагент = РасчетыСКлиентамиКорОР.АналитикаУчетаПоПартнерам.Контрагент)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|					И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
		|					И ДанныеРегистра.КорПартнер = РасчетыСКлиентамиКорОР.АналитикаУчетаПоПартнерам.Партнер
		|				ИЛИ ДанныеРегистра.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И НЕ(ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|							И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный))
		|					И ДанныеРегистра.Партнер = РасчетыСКлиентамиКорОР.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.Контрагент = РасчетыСКлиентамиКорОР.АналитикаУчетаПоПартнерам.Контрагент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщикамиКорОР
		|		ПО РасчетыСПоставщикамиКорОР.Регистратор В(&Регистраторы)
		|			И (ДанныеРегистра.Регистратор = РасчетыСПоставщикамиКорОР.Регистратор)
		|			И (ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщикамиКорОР.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация)
		|			И (ДанныеРегистра.УдалитьКорОбъектРасчетов = РасчетыСПоставщикамиКорОР.УдалитьЗаказПоставщику)
		|			И (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				ИЛИ (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|						ИЛИ ДанныеРегистра.КорПартнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие))
		|					И (ДанныеРегистра.КорПартнер = РасчетыСПоставщикамиКорОР.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.КорКонтрагент = РасчетыСПоставщикамиКорОР.АналитикаУчетаПоПартнерам.Контрагент
		|						ИЛИ ДанныеРегистра.Партнер = РасчетыСПоставщикамиКорОР.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.Контрагент = РасчетыСПоставщикамиКорОР.АналитикаУчетаПоПартнерам.Контрагент)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|					И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
		|					И ДанныеРегистра.КорПартнер = РасчетыСПоставщикамиКорОР.АналитикаУчетаПоПартнерам.Партнер
		|				ИЛИ ДанныеРегистра.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И НЕ(ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|						И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный))
		|					И ДанныеРегистра.Партнер = РасчетыСПоставщикамиКорОР.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.Контрагент = РасчетыСПоставщикамиКорОР.АналитикаУчетаПоПартнерам.Контрагент)
		|			
		|			
		// ИсточникГФУРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентамиИсточникГФУ
		|		ПО РасчетыСКлиентамиИсточникГФУ.Регистратор В(&Регистраторы)
		|			И (ДанныеРегистра.Регистратор = РасчетыСКлиентамиИсточникГФУ.Регистратор)
		|			И (ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентамиИсточникГФУ.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация)
		|			И (ДанныеРегистра.УдалитьИсточникГФУРасчетов = РасчетыСКлиентамиИсточникГФУ.УдалитьЗаказКлиента)
		|			И (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				ИЛИ ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И (ДанныеРегистра.КорПартнер = РасчетыСКлиентамиИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.КорКонтрагент = РасчетыСКлиентамиИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент
		|						ИЛИ ДанныеРегистра.Партнер = РасчетыСКлиентамиИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.Контрагент = РасчетыСКлиентамиИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|					И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
		|				ИЛИ ДанныеРегистра.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И ДанныеРегистра.Партнер = РасчетыСКлиентамиИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.Контрагент = РасчетыСКлиентамиИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщикамиИсточникГФУ
		|		ПО РасчетыСПоставщикамиИсточникГФУ.Регистратор В(&Регистраторы)
		|			И (ДанныеРегистра.Регистратор = РасчетыСПоставщикамиИсточникГФУ.Регистратор)
		|			И (ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщикамиИсточникГФУ.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация)
		|			И (ДанныеРегистра.УдалитьИсточникГФУРасчетов = РасчетыСПоставщикамиИсточникГФУ.УдалитьЗаказПоставщику)
		|			И (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				ИЛИ ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И (ДанныеРегистра.КорПартнер = РасчетыСПоставщикамиИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.КорКонтрагент = РасчетыСПоставщикамиИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент
		|						ИЛИ ДанныеРегистра.Партнер = РасчетыСПоставщикамиИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.Контрагент = РасчетыСПоставщикамиИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|					И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
		|				ИЛИ ДанныеРегистра.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И ДанныеРегистра.Партнер = РасчетыСПоставщикамиИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.Контрагент = РасчетыСПоставщикамиИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент)
		|			
		|			
		// КорИсточникГФУРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентамиКорИсточникГФУ
		|		ПО РасчетыСКлиентамиКорИсточникГФУ.Регистратор В(&Регистраторы)
		|			И (ДанныеРегистра.Регистратор = РасчетыСКлиентамиКорИсточникГФУ.Регистратор)
		|			И (ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация)
		|			И (ДанныеРегистра.УдалитьКорИсточникГФУРасчетов = РасчетыСКлиентамиКорИсточникГФУ.УдалитьЗаказКлиента)
		|			И (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				ИЛИ (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|						ИЛИ ДанныеРегистра.КорПартнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие))
		|					И (ДанныеРегистра.КорПартнер = РасчетыСКлиентамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.КорКонтрагент = РасчетыСКлиентамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент
		|						ИЛИ ДанныеРегистра.Партнер = РасчетыСКлиентамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.Контрагент = РасчетыСКлиентамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|					И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
		|					И ДанныеРегистра.КорПартнер = РасчетыСКлиентамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|				ИЛИ ДанныеРегистра.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И НЕ(ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|							И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный))
		|					И ДанныеРегистра.Партнер = РасчетыСКлиентамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.Контрагент = РасчетыСКлиентамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщикамиКорИсточникГФУ
		|		ПО РасчетыСПоставщикамиКорИсточникГФУ.Регистратор В(&Регистраторы)
		|			И (ДанныеРегистра.Регистратор = РасчетыСПоставщикамиКорИсточникГФУ.Регистратор)
		|			И (ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщикамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация)
		|			И (ДанныеРегистра.УдалитьКорИсточникГФУРасчетов = РасчетыСПоставщикамиКорИсточникГФУ.УдалитьЗаказПоставщику)
		|			И (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				ИЛИ (ДанныеРегистра.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|						ИЛИ ДанныеРегистра.КорПартнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие))
		|					И (ДанныеРегистра.КорПартнер = РасчетыСПоставщикамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.КорКонтрагент = РасчетыСПоставщикамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент
		|						ИЛИ ДанныеРегистра.Партнер = РасчетыСПоставщикамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|							И ДанныеРегистра.Контрагент = РасчетыСПоставщикамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|					И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
		|					И ДанныеРегистра.КорПартнер = РасчетыСПоставщикамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|				ИЛИ ДанныеРегистра.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И НЕ(ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
		|							И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный))
		|					И ДанныеРегистра.Партнер = РасчетыСПоставщикамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Партнер
		|					И ДанныеРегистра.Контрагент = РасчетыСПоставщикамиКорИсточникГФУ.АналитикаУчетаПоПартнерам.Контрагент)
		|ГДЕ
		|	ДанныеРегистра.Регистратор В(&Регистраторы)
		|
		|ИТОГИ ПО
		|	Регистратор";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	ПорцииДляОбработки = ОбъектыРасчетовСервер.ПорцииДанныхДляОбработки(ОбновляемыеДанные);
	
	ИспользоватьМФУ = Ложь;
	
	Для Каждого ПорцияДанных Из ПорцииДляОбработки Цикл
	
		НачатьТранзакцию();
			
		Попытка
				
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ПорцияДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистраторы", ПорцияДанных.ВыгрузитьКолонку("Регистратор"));
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ПоискТолькоПоСсылке = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
			ПоискТолькоПоСсылке.НеГенерироватьИсключение = Истина;
			ПоискТолькоПоСсылкеНеТолькоОстатки = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
			ПоискТолькоПоСсылкеНеТолькоОстатки.НеГенерироватьИсключение = Истина;
			ПоискТолькоПоСсылкеНеТолькоОстатки.Вставить("ТолькоОстатки", Ложь);
			
			Пока ВыборкаРегистратор.Следующий() Цикл
				
				ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
				ЕстьДвиженияПоРасчетнымРегистрам = Истина;
				РегистраторОбъект = Неопределено;

				ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
				НаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей - 
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
				НаборЗаписей.Прочитать();
			
				ДополнительныеКритерииПоиска = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
				ДополнительныеКритерииПоиска.НеГенерироватьИсключение = Истина;
                ДополнительныеКритерииПоиска.ВернутьПервый = Истина;
							
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СтрокаНабора = НаборЗаписей[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
					
					ЕстьОшибкаЗапонения = Ложь;
					
					ДополнительныеКритерииПоиска.Контрагент = СтрокаНабора.Контрагент;
					ДополнительныеКритерииПоиска.Партнер = СтрокаНабора.Партнер;
					КорДополнительныеКритерииПоиска = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
					КорДополнительныеКритерииПоиска.НеГенерироватьИсключение = Истина;
					КорДополнительныеКритерииПоиска.ВернутьПервый = Истина;
					КорДополнительныеКритерииПоиска.Контрагент = СтрокаНабора.КорКонтрагент;
					КорДополнительныеКритерииПоиска.Партнер = СтрокаНабора.КорПартнер;
					
					Если Не ЗначениеЗаполнено(СтрокаНабора.ОбъектРасчетов) Тогда
						Если НеОбъектРачетовИЗаполнен(СтрокаНабора.УдалитьОбъектРасчетов) Тогда
							СтрокаНабора.ОбъектРасчетов = СтрокаНабора.УдалитьОбъектРасчетов; 
						ИначеЕсли ВыборкаДетальныеЗаписи.ОбъектРасчетов <> Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
							СтрокаНабора.ОбъектРасчетов = ВыборкаДетальныеЗаписи.ОбъектРасчетов;
						Иначе
							Если ЗначениеЗаполнено(СтрокаНабора.УдалитьОбъектРасчетов) Тогда
								Если Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(СтрокаНабора.УдалитьОбъектРасчетов) Тогда
								ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(СтрокаНабора.УдалитьОбъектРасчетов,СтрокаНабора.Организация,,ДополнительныеКритерииПоиска);
								
									Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
										СтрокаНабора.ОбъектРасчетов = ОбъектРасчетов;
									ИначеЕсли СтрокаНабора.УдалитьОбъектРасчетов <> Неопределено Тогда
										Если ВсеОбъектыРасчетовСгенерированы Тогда
										
										ДополнительныеКритерииПоиска.Контрагент = Неопределено;
										ДополнительныеКритерииПоиска.Партнер = Неопределено;
										ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(СтрокаНабора.УдалитьОбъектРасчетов,,,ДополнительныеКритерииПоиска);
										
										Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
											СтрокаНабора.ОбъектРасчетов = ОбъектРасчетов;
										Иначе
											Если РегистраторОбъект = Неопределено Тогда
												РегистраторОбъект = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
												ЕстьДвиженияПоРасчетнымРегистрам = ОбъектыРасчетовСервер.ЕстьДвиженияПоРасчетнымРегистрам(РегистраторОбъект);
											КонецЕсли;
											
											Если ЕстьДвиженияПоРасчетнымРегистрам Тогда
												ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'Не найден объект расчетов для источника данных: %1 по набору записей регистратора: %2'"),
													ВыборкаДетальныеЗаписи.ИсточникОбъектРасчетов,
													ВыборкаРегистратор.Регистратор));
											КонецЕсли;
										КонецЕсли;
										
										Иначе
											ЕстьОшибкаЗапонения = Истина;
											Прервать;
										КонецЕсли;
									КонецЕсли;
								Иначе
									ОбъектыРасчетовСервер.ЗарегистрироватьСообщениеОНесуществующемОбъекте(
										МетаданныеРегистра, ВыборкаРегистратор.Регистратор, ВыборкаДетальныеЗаписи.НомерСтроки); 
								КонецЕсли;
							Иначе
								Если РегистраторОбъект = Неопределено Тогда
									РегистраторОбъект = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
									ЕстьДвиженияПоРасчетнымРегистрам = ОбъектыРасчетовСервер.ЕстьДвиженияПоРасчетнымРегистрам(РегистраторОбъект);
								КонецЕсли;
								
								Если ЕстьДвиженияПоРасчетнымРегистрам Тогда
									ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не найден объект расчетов для источника данных: %1 по набору записей регистратора: %2'"),
										ВыборкаДетальныеЗаписи.ИсточникОбъектРасчетов,
										ВыборкаРегистратор.Регистратор);
									ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Ошибка,
										МетаданныеРегистра,
										,
										ТекстСообщения);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаНабора.КорОбъектРасчетов) Тогда
						Если НеОбъектРачетовИЗаполнен(СтрокаНабора.УдалитьКорОбъектРасчетов) Тогда
							СтрокаНабора.КорОбъектРасчетов = СтрокаНабора.УдалитьКорОбъектРасчетов;
						ИначеЕсли  
							ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КорОбъектРасчетов) Тогда
							СтрокаНабора.КорОбъектРасчетов = ВыборкаДетальныеЗаписи.КорОбъектРасчетов;
						ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникКорОбъектРасчетов) Тогда
							Если Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.ИсточникКорОбъектРасчетов) Тогда
								КорОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ВыборкаДетальныеЗаписи.ИсточникКорОбъектРасчетов,,,ДополнительныеКритерииПоиска);
								
								Если ЗначениеЗаполнено(КорОбъектРасчетов) Тогда
									СтрокаНабора.КорОбъектРасчетов = КорОбъектРасчетов;
								Иначе
									КорОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ВыборкаДетальныеЗаписи.ИсточникКорОбъектРасчетов,,,КорДополнительныеКритерииПоиска);
									Если ЗначениеЗаполнено(КорОбъектРасчетов) Тогда
										СтрокаНабора.КорОбъектРасчетов = КорОбъектРасчетов;
									ИначеЕсли СтрокаНабора.УдалитьКорОбъектРасчетов <> Неопределено Тогда
										КорОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ВыборкаДетальныеЗаписи.ИсточникКорОбъектРасчетов,,,ПоискТолькоПоСсылке);
										Если ЗначениеЗаполнено(КорОбъектРасчетов) Тогда
											СтрокаНабора.КорОбъектРасчетов = КорОбъектРасчетов;
										Иначе
											КорОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ВыборкаДетальныеЗаписи.ИсточникКорОбъектРасчетов,,,ПоискТолькоПоСсылкеНеТолькоОстатки);
											Если ЗначениеЗаполнено(КорОбъектРасчетов) Тогда
												СтрокаНабора.КорОбъектРасчетов = КорОбъектРасчетов;
											Иначе
												Если ВсеОбъектыРасчетовСгенерированы Тогда
													Если РегистраторОбъект = Неопределено Тогда
														РегистраторОбъект = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
														ЕстьДвиженияПоРасчетнымРегистрам = ОбъектыРасчетовСервер.ЕстьДвиженияПоРасчетнымРегистрам(РегистраторОбъект);
													КонецЕсли;
													
													Если ЕстьДвиженияПоРасчетнымРегистрам Тогда
														ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															НСтр("ru = 'Не найден объект расчетов для источника данных: %1 по набору записей регистратора: %2'"),
															ВыборкаДетальныеЗаписи.ИсточникКорОбъектРасчетов,
															ВыборкаРегистратор.Регистратор));
													КонецЕсли;
												Иначе
													ЕстьОшибкаЗапонения = Истина;
													Прервать;
												КонецЕсли;
											КонецЕсли;
										КонецЕсли; 
									КонецЕсли;
								КонецЕсли;
							Иначе
								ОбъектыРасчетовСервер.ЗарегистрироватьСообщениеОНесуществующемОбъекте(
									МетаданныеРегистра, ВыборкаРегистратор.Регистратор, ВыборкаДетальныеЗаписи.НомерСтроки); 	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаНабора.ИсточникГФУРасчетов) Тогда
						Если НеОбъектРачетовИЗаполнен(СтрокаНабора.УдалитьИсточникГФУРасчетов) Тогда
							СтрокаНабора.ИсточникГФУРасчетов = СтрокаНабора.УдалитьИсточникГФУРасчетов;
						ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникГФУ) Тогда
							СтрокаНабора.ИсточникГФУРасчетов = ВыборкаДетальныеЗаписи.ИсточникГФУ;
						ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникГФУРасчетов) Тогда
							Если Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.ИсточникГФУРасчетов) Тогда
								ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ВыборкаДетальныеЗаписи.ИсточникГФУРасчетов,,,ДополнительныеКритерииПоиска);
								
								Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
									СтрокаНабора.ИсточникГФУРасчетов = ОбъектРасчетов;
								Иначе
									Если ВсеОбъектыРасчетовСгенерированы Тогда
										ЗаполнитьИсточникГФУПоЗаказу(ИспользоватьМФУ, СтрокаНабора, Ложь);
										Если Не ЗначениеЗаполнено(СтрокаНабора.ИсточникГФУРасчетов) Тогда
											Если РегистраторОбъект = Неопределено Тогда
												РегистраторОбъект = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
												ЕстьДвиженияПоРасчетнымРегистрам = ОбъектыРасчетовСервер.ЕстьДвиженияПоРасчетнымРегистрам(РегистраторОбъект);
											КонецЕсли;
											
											Если ЕстьДвиженияПоРасчетнымРегистрам Тогда
												ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'Не найден объект расчетов для источника данных: %1 по набору записей регистратора: %2'"),
													ВыборкаДетальныеЗаписи.ИсточникГФУРасчетов,
													ВыборкаРегистратор.Регистратор));
											КонецЕсли;
										КонецЕсли
									Иначе
										ЕстьОшибкаЗапонения = Истина;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							Иначе
								ОбъектыРасчетовСервер.ЗарегистрироватьСообщениеОНесуществующемОбъекте(
									МетаданныеРегистра, ВыборкаРегистратор.Регистратор, ВыборкаДетальныеЗаписи.НомерСтроки);	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					
					Если Не ЗначениеЗаполнено(СтрокаНабора.КорИсточникГФУРасчетов) Тогда
						Если НеОбъектРачетовИЗаполнен(СтрокаНабора.УдалитьКорИсточникГФУРасчетов) Тогда
							СтрокаНабора.КорИсточникГФУРасчетов = СтрокаНабора.УдалитьКорИсточникГФУРасчетов;
						ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КорИсточникГФУ)  Тогда
							СтрокаНабора.КорИсточникГФУРасчетов = ВыборкаДетальныеЗаписи.КорИсточникГФУ;
						ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникКорГФУРасчетов) Тогда
							Если Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.ИсточникКорГФУРасчетов) Тогда
								КорГФУ = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ВыборкаДетальныеЗаписи.ИсточникКорГФУРасчетов,,,ДополнительныеКритерииПоиска);
								
								Если ЗначениеЗаполнено(КорГФУ) Тогда
									СтрокаНабора.КорИсточникГФУРасчетов = КорГФУ;
								Иначе
									КорГФУ = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ВыборкаДетальныеЗаписи.ИсточникКорГФУРасчетов,,,КорДополнительныеКритерииПоиска);
									Если ЗначениеЗаполнено(КорГФУ) Тогда
										СтрокаНабора.КорИсточникГФУРасчетов = КорГФУ;
									Иначе
										КорГФУ = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ВыборкаДетальныеЗаписи.ИсточникКорГФУРасчетов,,,ПоискТолькоПоСсылке);
										Если ЗначениеЗаполнено(КорГФУ) Тогда
											СтрокаНабора.КорИсточникГФУРасчетов = КорГФУ;
										Иначе
											КорГФУ = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ВыборкаДетальныеЗаписи.ИсточникКорГФУРасчетов,,,ПоискТолькоПоСсылкеНеТолькоОстатки);
											Если ЗначениеЗаполнено(КорОбъектРасчетов) Тогда
												СтрокаНабора.КорИсточникГФУРасчетов = КорГФУ;
											Иначе
												Если ВсеОбъектыРасчетовСгенерированы Тогда
													ЗаполнитьИсточникГФУПоЗаказу(ИспользоватьМФУ, СтрокаНабора, Истина);
													Если Не ЗначениеЗаполнено(СтрокаНабора.КорИсточникГФУРасчетов) Тогда
														Если РегистраторОбъект = Неопределено Тогда
															РегистраторОбъект = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
															ЕстьДвиженияПоРасчетнымРегистрам = ОбъектыРасчетовСервер.ЕстьДвиженияПоРасчетнымРегистрам(РегистраторОбъект);
														КонецЕсли;
														
														Если ЕстьДвиженияПоРасчетнымРегистрам Тогда
															ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																НСтр("ru = 'Не найден объект расчетов для источника данных: %1 по набору записей регистратора: %2'"),
																ВыборкаДетальныеЗаписи.ИсточникКорГФУРасчетов,
																ВыборкаРегистратор.Регистратор));
														КонецЕсли;
													КонецЕсли;
												Иначе
													ЕстьОшибкаЗапонения = Истина;
													Прервать;
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							Иначе
								ОбъектыРасчетовСервер.ЗарегистрироватьСообщениеОНесуществующемОбъекте(
									МетаданныеРегистра, ВыборкаРегистратор.Регистратор, ВыборкаДетальныеЗаписи.НомерСтроки);	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьОшибкаЗапонения Тогда
					Продолжить;
				КонецЕсли;
				
				Если НаборЗаписей.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1, по причине: %2'");
			ТекстСообщения = 
				СтрШаблон(Шаблон,
					ПолноеИмяРегистра,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				,
				ТекстСообщения);
			
			КонецПопытки;
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция НеОбъектРачетовИЗаполнен(УдаляемыеДанные)
	
	Возврат ЗначениеЗаполнено(УдаляемыеДанные)
		И (ТипЗнч(УдаляемыеДанные) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов")
		Или ТипЗнч(УдаляемыеДанные) = Тип("СправочникСсылка.ПодарочныеСертификаты"));
	
КонецФункции

Процедура ЗаполнитьИсточникГФУПоЗаказу(ИспользоватьМФУ, СтрокаНабора, Кор)
	
	ПолеУдалитьОбъектРасчетов 		= ?(Кор, "УдалитьКорОбъектРасчетов", "УдалитьОбъектРасчетов");
	ПолеОбъектРасчетов 				= ?(Кор, "КорОбъектРасчетов", "ОбъектРасчетов");

	ПолеУдалитьИсточникГФУРасчетов 	= ?(Кор, "УдалитьКорИсточникГФУРасчетов", "УдалитьИсточникГФУРасчетов");
	ПолеИсточникГФУРасчетов 		= ?(Кор, "КорИсточникГФУРасчетов", "ИсточникГФУРасчетов");

	Если Не ИспользоватьМФУ Тогда
		ИсточникГФУОбъект = СтрокаНабора[ПолеУдалитьИсточникГФУРасчетов].ПолучитьОбъект();
		ПараметрыВзаиморасчетов = ОбъектыРасчетовСервер.ПараметрыВзаиморасчетовОбъектаРасчетов(ИсточникГФУОбъект);
		Если ТипЗнч(ПараметрыВзаиморасчетов) = Тип("Массив") Тогда
			ПараметрыВзаиморасчетов = ПараметрыВзаиморасчетов[0];
		КонецЕсли;
		ВзаиморасчетыСервер.ДополненныеПараметрыМеханизма(ИсточникГФУОбъект, ПараметрыВзаиморасчетов);
		
		ЭтоПродажаЗакупкаПоЗаказу = ПараметрыВзаиморасчетов.ЭтоПродажаЗакупка 
									И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(ИсточникГФУОбъект, ПараметрыВзаиморасчетов.ПорядокРасчетов) = Перечисления.ПорядокРасчетов.ПоЗаказам; 
		ЗаказОснование = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(ИсточникГФУОбъект, ПараметрыВзаиморасчетов.ЗаказОснование);
		СсылкаЯвляетсяОбъектомРасчетов = ОбъектыРасчетовСервер.СсылкаЯвляетсяОбъектомРасчетов(ИсточникГФУОбъект, 
											ПараметрыВзаиморасчетов);
		
		Если ЭтоПродажаЗакупкаПоЗаказу 
			И (СтрокаНабора[ПолеУдалитьОбъектРасчетов] = ЗаказОснование
				ИЛИ Не СсылкаЯвляетсяОбъектомРасчетов И Не ЗначениеЗаполнено(ЗаказОснование)) Тогда
			СтрокаНабора[ПолеИсточникГФУРасчетов]= СтрокаНабора[ПолеОбъектРасчетов];
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
