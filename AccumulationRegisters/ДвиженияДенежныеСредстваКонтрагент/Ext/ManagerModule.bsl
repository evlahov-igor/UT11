#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Партнер)
	|	И( ВЫБОР КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.Кассы) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.КассыККМ) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	КОГДА ТипЗначения(ДенежныеСредства) = Тип(Справочник.ФизическиеЛица) ТОГДА ЗначениеРазрешено(ДенежныеСредства)
	|	ИНАЧЕ ИСТИНА КОНЕЦ) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.62";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ea5384e2-9389-4513-bae1-dc038184bf43");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Ставка НДС"".
	|Заполняет измерение ""Объект расчетов"" и реквизит ""Источник ГФУ расчетов"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОперацияПоПлатежнойКарте.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Патенты.ДобавитьПродажаПоПатентуВСтавкуБезНДС";
	НоваяСтрока.Порядок = "Любой";
	//-- Локализация

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();

	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент;
	ТипыРегистраторов = МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	СписокДокументов = Новый Массив; 
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
		ДокПустаяСсылка = Новый (ТипРегистратора);
		СписокДокументов.Добавить(ДокПустаяСсылка.Метаданные().ПолноеИмя());
	КонецЦикла;
	
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(СписокДокументов, ",");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|ГДЕ
	|	(ДанныеРегистра.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьСтавкаНДС = &ПустаяСтавкаНДС)
	|	ИЛИ ДанныеРегистра.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			И НЕ ДанныеРегистра.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектРасчетов)
	|			И (ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|				ГДЕ
	|					РасчетыСПоставщиками.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСПоставщиками.УдалитьЗаказПоставщику = ДанныеРегистра.УдалитьОбъектРасчетов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|				ГДЕ
	|					РасчетыСКлиентами.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСКлиентами.УдалитьЗаказКлиента = ДанныеРегистра.УдалитьОбъектРасчетов)
	|					
	|			ИЛИ	ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|				ГДЕ
	|					РасчетыСПоставщикамиПоСрокам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСПоставщикамиПоСрокам.УдалитьОбъектРасчетов = ДанныеРегистра.УдалитьОбъектРасчетов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|				ГДЕ
	|					РасчетыСКлиентамиПоСрокам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСКлиентамиПоСрокам.УдалитьОбъектРасчетов = ДанныеРегистра.УдалитьОбъектРасчетов)
	|					
	|			ИЛИ	ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|				ГДЕ
	|					РасчетыСПоставщикамиПоДокументам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСПоставщикамиПоДокументам.УдалитьЗаказПоставщику = ДанныеРегистра.УдалитьОбъектРасчетов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|				ГДЕ
	|					РасчетыСКлиентамиПоДокументам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСКлиентамиПоДокументам.УдалитьЗаказКлиента = ДанныеРегистра.УдалитьОбъектРасчетов))
	|		
	|	ИЛИ ДанныеРегистра.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|		И ДанныеРегистра.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектРасчетов)
	|		И  (ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|				ГДЕ
	|					РасчетыСПоставщиками.Регистратор = ДанныеРегистра.Регистратор)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|				ГДЕ
	|					РасчетыСКлиентами.Регистратор = ДанныеРегистра.Регистратор))
	|	ИЛИ (ДанныеРегистра.УдалитьИсточникГФУРасчетов НЕ В (&ПустыеЗначенияОбъектРасчетов)
	|		И ДанныеРегистра.ИсточникГФУРасчетов = НЕОПРЕДЕЛЕНО
	|		И (ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|				ГДЕ
	|					РасчетыСПоставщиками.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСПоставщиками.УдалитьЗаказПоставщику = ДанныеРегистра.УдалитьИсточникГФУРасчетов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|				ГДЕ
	|					РасчетыСКлиентами.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСКлиентами.УдалитьЗаказКлиента = ДанныеРегистра.УдалитьИсточникГФУРасчетов)
	|					
	|			ИЛИ	ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|				ГДЕ
	|					РасчетыСПоставщикамиПоСрокам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСПоставщикамиПоСрокам.УдалитьОбъектРасчетов = ДанныеРегистра.УдалитьИсточникГФУРасчетов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|				ГДЕ
	|					РасчетыСКлиентамиПоСрокам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСКлиентамиПоСрокам.УдалитьОбъектРасчетов = ДанныеРегистра.УдалитьИсточникГФУРасчетов)
	|					
	|			ИЛИ	ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|				ГДЕ
	|					РасчетыСПоставщикамиПоДокументам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСПоставщикамиПоДокументам.УдалитьЗаказПоставщику = ДанныеРегистра.УдалитьИсточникГФУРасчетов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|				ГДЕ
	|					РасчетыСКлиентамиПоДокументам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСКлиентамиПоДокументам.УдалитьЗаказКлиента = ДанныеРегистра.УдалитьИсточникГФУРасчетов)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК Данные
	|ГДЕ
	|	Данные.ЗаявкаНаРасходованиеДенежныхСредств = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|	И Данные.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|	И НЕ Данные.ОтложенноеПроведение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК Данные
	|ГДЕ
	|	Данные.ЗаявкаНаРасходованиеДенежныхСредств = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|	И Данные.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|	И ВЫРАЗИТЬ(Данные.Регистратор КАК Документ.РасходныйКассовыйОрдер).ОплатаПоЗаявкам
	|	И НЕ Данные.ОтложенноеПроведение
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК Данные
	|ГДЕ
	|	Данные.ЗаявкаНаРасходованиеДенежныхСредств = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|	И Данные.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|	И ВЫРАЗИТЬ(Данные.Регистратор КАК Документ.СписаниеБезналичныхДенежныхСредств).ОплатаПоЗаявкам
	|	И НЕ Данные.ОтложенноеПроведение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК Данные
	|ГДЕ
	|	Данные.ЗаявкаНаРасходованиеДенежныхСредств = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|	И Данные.Регистратор ССЫЛКА Документ.ОперацияПоПлатежнойКарте
	|	И ВЫРАЗИТЬ(Данные.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ЗаявкаНаРасходованиеДенежныхСредств <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|	И НЕ Данные.ОтложенноеПроведение
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	ЗапросДвиженияДокументовБезЗаявок = Новый Запрос;
	ЗапросДвиженияДокументовБезЗаявок.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК Данные
	|ГДЕ
	|	Данные.ЗаявкаНаРасходованиеДенежныхСредств = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|	И Данные.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|	И НЕ Данные.ОтложенноеПроведение
	|	И Данные.Регистратор В (&Регистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК Данные
	|ГДЕ
	|	Данные.ЗаявкаНаРасходованиеДенежныхСредств = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|	И Данные.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|	И ВЫРАЗИТЬ(Данные.Регистратор КАК Документ.РасходныйКассовыйОрдер).ОплатаПоЗаявкам
	|	И НЕ Данные.ОтложенноеПроведение
	|	И Данные.Регистратор В (&Регистраторы)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК Данные
	|ГДЕ
	|	Данные.ЗаявкаНаРасходованиеДенежныхСредств = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|	И Данные.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|	И ВЫРАЗИТЬ(Данные.Регистратор КАК Документ.СписаниеБезналичныхДенежныхСредств).ОплатаПоЗаявкам
	|	И НЕ Данные.ОтложенноеПроведение
	|	И Данные.Регистратор В (&Регистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК Данные
	|ГДЕ
	|	Данные.ЗаявкаНаРасходованиеДенежныхСредств = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|	И Данные.Регистратор ССЫЛКА Документ.ОперацияПоПлатежнойКарте
	|	И ВЫРАЗИТЬ(Данные.Регистратор КАК Документ.ОперацияПоПлатежнойКарте).ЗаявкаНаРасходованиеДенежныхСредств <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|	И НЕ Данные.ОтложенноеПроведение
	|	И Данные.Регистратор В (&Регистраторы)
	|";
	
	ТипыНеВходящиеВОбъектыРасчетов = Новый Массив();
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатковДенежныхСредств"));
	//++ Локализация
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатковТМЦВЭксплуатации"));
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатковНДСПредъявленного"));
	//-- Локализация
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатков"));
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатковПоФинансовымИнструментам"));
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатковТоваров"));
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатковПрочиеРасходы"));
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатковВзаиморасчетов"));
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатковРасчетовПоЭквайрингу"));
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатковСПодотчетниками"));
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("ДокументСсылка.ВводОстатковПрочихАктивовПассивов"));
	ТипыНеВходящиеВОбъектыРасчетов.Добавить(Тип("СправочникСсылка.ПодарочныеСертификаты"));
	
	Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки                                                         КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА НЕ РасчетыСКлиентами.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСКлиентами.ОбъектРасчетов
		|		КОГДА НЕ РасчетыСПоставщиками.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСПоставщиками.ОбъектРасчетов
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	КОНЕЦ                                                                              КАК ОбъектРасчетов,
		|	ВЫБОР КОГДА ДанныеРегистра.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
		|				И НЕ ДанныеРегистра.УдалитьСтавкаНДС = &ПустаяСтавкаНДС ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ                                                                              КАК ЗаполнятьСтавкуНДС,
		|	ДанныеРегистра.УдалитьОбъектРасчетов                                               КАК ИсточникОбъектаРасчетов,
		|	ДанныеРегистра.Регистратор                                                         КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|		ПО ДанныеРегистра.Регистратор = РасчетыСКлиентами.Регистратор
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
		|			И ДанныеРегистра.Партнер = РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер
		|			И ДанныеРегистра.Контрагент = РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Контрагент
		|			И (ДанныеРегистра.Договор = НЕОПРЕДЕЛЕНО ИЛИ ДанныеРегистра.Договор = РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Договор)
		|			И ДанныеРегистра.НаправлениеДеятельностиКонтрагента = РасчетыСКлиентами.АналитикаУчетаПоПартнерам.НаправлениеДеятельности
		|			И ДанныеРегистра.ВалютаВзаиморасчетов = РасчетыСКлиентами.Валюта
		|			И РасчетыСКлиентами.ОбъектРасчетов.Объект = Неопределено
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|		ПО ДанныеРегистра.Регистратор = РасчетыСПоставщиками.Регистратор
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
		|			И ДанныеРегистра.Партнер = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Партнер
		|			И ДанныеРегистра.Контрагент = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Контрагент
		|			И (ДанныеРегистра.Договор = НЕОПРЕДЕЛЕНО ИЛИ ДанныеРегистра.Договор = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Договор)
		|			И ДанныеРегистра.НаправлениеДеятельностиКонтрагента = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.НаправлениеДеятельности
		|			И ДанныеРегистра.ВалютаВзаиморасчетов = РасчетыСПоставщиками.Валюта
		|			И РасчетыСПоставщиками.ОбъектРасчетов.Объект = Неопределено
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И ДанныеРегистра.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.НомерСтроки                                                         КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА НЕ РасчетыСКлиентами.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСКлиентами.ОбъектРасчетов
		|		КОГДА НЕ РасчетыСПоставщиками.Регистратор ЕСТЬ NULL
		|			ТОГДА РасчетыСПоставщиками.ОбъектРасчетов
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|	КОНЕЦ                                                                              КАК ОбъектРасчетов,
		|	ВЫБОР КОГДА ДанныеРегистра.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
		|				И НЕ ДанныеРегистра.УдалитьСтавкаНДС = &ПустаяСтавкаНДС ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ                                                                              КАК ЗаполнятьСтавкуНДС,
		|	ДанныеРегистра.УдалитьОбъектРасчетов                                               КАК ИсточникОбъектаРасчетов,
		|	ДанныеРегистра.Регистратор                                                         КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|		ПО ДанныеРегистра.Регистратор = РасчетыСКлиентами.Регистратор
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
		|			И ДанныеРегистра.УдалитьОбъектРасчетов = РасчетыСКлиентами.УдалитьЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|		ПО ДанныеРегистра.Регистратор = РасчетыСПоставщиками.Регистратор
		|			И ДанныеРегистра.Организация.ГоловнаяОрганизация = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация
		|			И ДанныеРегистра.УдалитьОбъектРасчетов = РасчетыСПоставщиками.УдалитьЗаказПоставщику
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И НЕ ДанныеРегистра.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектРасчетов)
		|	
		|ИТОГИ ПО
		|	Регистратор
		|
		|";
		
	ПорцииДляОбработки = ОбъектыРасчетовСервер.ПорцииДанныхДляОбработки(ОбновляемыеДанные);
	
	Для Каждого ПорцияДанных Из ПорцииДляОбработки Цикл
	
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ПорцияДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("ПустыеЗначенияОбъектРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
			Запрос.УстановитьПараметр("Регистраторы", ПорцияДанных.ВыгрузитьКолонку("Регистратор"));
			УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
			РезультатЗапроса = Запрос.Выполнить();
			
			ЗапросДвиженияДокументовБезЗаявок.УстановитьПараметр("Регистраторы", ПорцияДанных.ВыгрузитьКолонку("Регистратор"));
			РегистраторыДвиженияДокументовБезЗаявок = ЗапросДвиженияДокументовБезЗаявок.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
			
			ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРегистратор.Следующий() Цикл
				ОбъектРегистратора = Неопределено;
				ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
				НаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей(); // РегистрБухгалтерииНаборЗаписей - 
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
				НаборЗаписей.Прочитать();
				ЕстьОшибкаЗапонения = Ложь;
				ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
			
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СтрокаНабора = НаборЗаписей[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
					
					#Область ЗаполнениеСтавкиНДС
					Если ВыборкаДетальныеЗаписи.ЗаполнятьСтавкуНДС Тогда
						СтрокаНабора.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(СтрокаНабора.УдалитьСтавкаНДС);
						СтрокаНабора.УдалитьСтавкаНДС = Неопределено;
					КонецЕсли;
					#КонецОбласти
					
					#Область ЗаполнениеОбъектовРасчета
					Если Не ЗначениеЗаполнено(СтрокаНабора.ОбъектРасчетов) Тогда
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
							И ВыборкаДетальныеЗаписи.ОбъектРасчетов <> Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
							СтрокаНабора.ОбъектРасчетов = ВыборкаДетальныеЗаписи.ОбъектРасчетов;
						ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
							И ТипыНеВходящиеВОбъектыРасчетов.Найти(ТипЗнч(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)) <> Неопределено Тогда
							СтрокаНабора.ОбъектРасчетов = ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов;
						ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
							И ТипыНеВходящиеВОбъектыРасчетов.Найти(ТипЗнч(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)) = Неопределено
							И ОбщегоНазначения.СсылкаСуществует(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) Тогда
								//Если объект расчетов не найден по движениям в расчетных регистрах
								//пробуем искать по аналитике
								ПараметрыПоискаОР = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
								ПараметрыПоискаОР.Контрагент = СтрокаНабора.Контрагент;
								ПараметрыПоискаОР.Партнер = СтрокаНабора.Партнер;
								ПараметрыПоискаОР.НеГенерироватьИсключение = Истина;
								ПараметрыПоискаОР.ОбновлениеИБ = Истина;
								
								НайденныйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
									ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
									СтрокаНабора.Организация,
									,
									ПараметрыПоискаОР);
								
								
								Если Не ЗначениеЗаполнено(НайденныйОбъектРасчетов) Тогда
									ПараметрыПоискаОР = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
									ПараметрыПоискаОР.ОбновлениеИБ = Истина;
									ПараметрыПоискаОР.НеГенерироватьИсключение = Истина;
									ПараметрыПоискаОР.ВернутьПервый = Ложь;
									
									НайденныйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
										ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
										СтрокаНабора.Организация,
										,
										ПараметрыПоискаОР);
								КонецЕсли;
								
								Если Не ЗначениеЗаполнено(НайденныйОбъектРасчетов) Тогда
									НайденныйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
										ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
										,
										,
										ПараметрыПоискаОР);
								КонецЕсли;
								
								Если Не ЗначениеЗаполнено(НайденныйОбъектРасчетов) И ВсеОбъектыРасчетовСгенерированы Тогда
									РегистраторИзменяетРасчеты = Ложь;
									ТипыРасчетовОтличаются = Ложь;
									ЭтоКорректировкаРегистров = Ложь;
									
									Если ТипЗнч(ВыборкаРегистратор.Регистратор) = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
										РегистраторИзменяетРасчеты = Истина;
										ЭтоКорректировкаРегистров = Истина;
									Иначе
										Если ОбъектРегистратора = Неопределено Тогда
											ОбъектРегистратора = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
										КонецЕсли;
										
										ПараметрыВзаиморасчетовРегистратора = ОбъектыРасчетовСервер.ПараметрыВзаиморасчетовОбъектаРасчетов(
											ОбъектРегистратора);
											
										Если Не ТипЗнч(ПараметрыВзаиморасчетовРегистратора) = Тип("Массив") Тогда
											ПараметрыВзаиморасчетовРегистратора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВзаиморасчетовРегистратора);
										КонецЕсли;
										
										ТипРасчетов = ПараметрыВзаиморасчетовРегистратора[0].ТипРасчетов;
										
										Для Каждого ПарвметрВзаиморасчетов Из ПараметрыВзаиморасчетовРегистратора Цикл
											Если ПарвметрВзаиморасчетов.ТипРасчетов <> ТипРасчетов Тогда
													ТипыРасчетовОтличаются = Истина;
											КонецЕсли;
											
											Если ПарвметрВзаиморасчетов.ИзменяетПланОплаты Или ПарвметрВзаиморасчетов.ИзменяетПланОтгрузкиПоставки Тогда
												РегистраторИзменяетРасчеты = Истина;
											КонецЕсли;
										КонецЦикла;
										
										ТипРасчетов = ?(ТипыРасчетовОтличаются, Неопределено, ТипРасчетов);
									КонецЕсли; 
									
									Если РегистраторИзменяетРасчеты Тогда
										ТекстПроверкаИспользованияВРасчетныхРегистрах = ОбъектыРасчетовСервер.ТекстПроверкаИспользованияВРасчетныхРегистрах();
										ЗапросПроверкаПоРасчетнымРегистрам = Новый Запрос();
										ЗапросПроверкаПоРасчетнымРегистрам.Текст = СтрЗаменить(ТекстПроверкаИспользованияВРасчетныхРегистрах, ";", "");
										ЗапросПроверкаПоРасчетнымРегистрам.Текст = СтрЗаменить(ЗапросПроверкаПоРасчетнымРегистрам.Текст, "РАЗЛИЧНЫЕ", "ПЕРВЫЕ 1");
										ЗапросПроверкаПоРасчетнымРегистрам.УстановитьПараметр("ОбновляемыеДанные", ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов);
										ЗапросПроверкаПоРасчетнымРегистрам.УстановитьПараметр("Регистратор", ВыборкаРегистратор.Регистратор);
										ДобавитьОтборПоРегистратору(ЗапросПроверкаПоРасчетнымРегистрам.Текст);
										Если Не ЗапросПроверкаПоРасчетнымРегистрам.Выполнить().Пустой()
											Или ЭтоКорректировкаРегистров Тогда
											Если ТипРасчетов <> Неопределено Тогда
												НайденныйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
													ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
													СтрокаНабора.Организация,
													ТипРасчетов,
													ПараметрыПоискаОР);
											КонецЕсли;
											
											Если Не ЗначениеЗаполнено(НайденныйОбъектРасчетов) Тогда
												ПараметрыПоискаОР.Контрагент = СтрокаНабора.Контрагент;
												ПараметрыПоискаОР.Партнер = СтрокаНабора.Партнер;
												НайденныйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
													ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
													СтрокаНабора.Организация,
													ТипРасчетов,
													ПараметрыПоискаОР);
											КонецЕсли;

											Если Не ЗначениеЗаполнено(НайденныйОбъектРасчетов) Тогда
												ПараметрыПоискаОР.Контрагент = Неопределено;
												ПараметрыПоискаОР.Партнер = Неопределено;
												ПараметрыПоискаОР.ВалютаВзаиморасчетов = СтрокаНабора.ВалютаВзаиморасчетов;
												НайденныйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
													ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
													СтрокаНабора.Организация,
													ТипРасчетов,
													ПараметрыПоискаОР);
											КонецЕсли;

											Если Не ЗначениеЗаполнено(НайденныйОбъектРасчетов) Тогда
												ПараметрыПоискаОР.Контрагент = Неопределено;
												ПараметрыПоискаОР.Партнер = Неопределено;
												ПараметрыПоискаОР.Вставить("ТолькоОстатки", Ложь);
												НайденныйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
													ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
													СтрокаНабора.Организация,
													ТипРасчетов,
													ПараметрыПоискаОР);
											КонецЕсли;
											
											Если ЗначениеЗаполнено(НайденныйОбъектРасчетов) Тогда
												СтрокаНабора.ОбъектРасчетов = НайденныйОбъектРасчетов;
											Иначе
												Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
													И Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) Тогда
														ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Не удалось заполнить объект расчетов наборе записей регистра накопления %1,
															|регистратор %2, строка № %3, источник объекта расчтов %4.'"),
															ПолноеИмяРегистра,
															СтрокаНабора.Регистратор,
															СтрокаНабора.НомерСтроки,
															ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов);
														ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
															УровеньЖурналаРегистрации.Ошибка,
															МетаданныеРегистра,
															,
															ТекстСообщения);
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								ИначеЕсли Не ВсеОбъектыРасчетовСгенерированы Тогда
									ЕстьОшибкаЗапонения = Истина;
									Прервать;
								Иначе
									СтрокаНабора.ОбъектРасчетов = НайденныйОбъектРасчетов;
								КонецЕсли;
						ИначеЕсли Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
							И ВыборкаДетальныеЗаписи.ОбъектРасчетов <> Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
								СтрокаНабора.ОбъектРасчетов = ВыборкаДетальныеЗаписи.ОбъектРасчетов;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаНабора.УдалитьИсточникГФУРасчетов) 
						И Не ЗначениеЗаполнено(СтрокаНабора.ИсточникГФУРасчетов) Тогда
							Если ТипЗнч(СтрокаНабора.УдалитьИсточникГФУРасчетов) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
									СтрокаНабора.ИсточникГФУРасчетов = СтрокаНабора.УдалитьИсточникГФУРасчетов;
							Иначе
									СтрокаНабора.ИсточникГФУРасчетов = СтрокаНабора.ОбъектРасчетов;
							КонецЕсли;
					КонецЕсли;
					#КонецОбласти
				КонецЦикла;
				
				Если ЕстьОшибкаЗапонения Тогда
					Продолжить;
				КонецЕсли;
				
				ИндексРегистратора = РегистраторыДвиженияДокументовБезЗаявок.Найти(ВыборкаРегистратор.Регистратор);
				Если ИндексРегистратора = Неопределено Тогда
					Если НаборЗаписей.Модифицированность() Тогда
						ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
					Иначе
						ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
					КонецЕсли;
				Иначе
					ОбновитьДвиженияРегистратора(ВыборкаРегистратор.Регистратор, МетаданныеРегистра);
					РегистраторыДвиженияДокументовБезЗаявок.Удалить(ИндексРегистратора);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Регистратор Из РегистраторыДвиженияДокументовБезЗаявок Цикл // -ДокументСсылка
				ОбновитьДвиженияРегистратора(Регистратор, МетаданныеРегистра)
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1, по причине: %2'");
			ТекстСообщения = 
				СтрШаблон(Шаблон,
					ПолноеИмяРегистра,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ДобавитьОтборПоРегистратору(ТекстЗапроса)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСПоставщиками.УдалитьЗаказПоставщику В (&ОбновляемыеДанные)",
									"РасчетыСПоставщиками.УдалитьЗаказПоставщику В (&ОбновляемыеДанные)
									|	И РасчетыСПоставщиками.Регистратор = &Регистратор");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСКлиентами.УдалитьЗаказКлиента В (&ОбновляемыеДанные)",
									"РасчетыСКлиентами.УдалитьЗаказКлиента В (&ОбновляемыеДанные)
									|	И РасчетыСКлиентами.Регистратор = &Регистратор");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСПоставщикамиПоДокументам.УдалитьЗаказПоставщику В (&ОбновляемыеДанные)",
									"РасчетыСПоставщикамиПоДокументам.УдалитьЗаказПоставщику В (&ОбновляемыеДанные)
									|	И РасчетыСПоставщикамиПоДокументам.Регистратор = &Регистратор");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСКлиентамиПоДокументам.УдалитьЗаказКлиента В (&ОбновляемыеДанные)",
									"РасчетыСКлиентамиПоДокументам.УдалитьЗаказКлиента В (&ОбновляемыеДанные)
									|	И РасчетыСКлиентамиПоДокументам.Регистратор = &Регистратор");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСПоставщикамиПоСрокам.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)",
									"РасчетыСПоставщикамиПоСрокам.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)
									|	И РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = &Регистратор");
	 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСКлиентамиПоСрокам.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)",
									"РасчетыСКлиентамиПоСрокам.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)
									|	И РасчетыСКлиентамиПоСрокам.ДокументРегистратор = &Регистратор");
	
КонецПроцедуры

Процедура ОбновитьДвиженияРегистратора(Регистратор, МетаданныеРегистра)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(МетаданныеРегистра.ПолноеИмя() + ".НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
	ЭлементБлокировки = Блокировка.Добавить("Документ." + Регистратор.Метаданные().Имя);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
	Блокировка.Заблокировать();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	
	ДвиженияПоРегистру = Неопределено;
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Регистратор);
	ДанныеДляПроведения = МенеджерДокумента.ДанныеДокументаДляПроведения(Регистратор, МетаданныеРегистра.Имя);
	ДанныеДляПроведения.Свойство("ТаблицаДвиженияДенежныеСредстваКонтрагент", ДвиженияПоРегистру); // ТаблицаЗначений -
	
	Если ДвиженияПоРегистру <> Неопределено И ДвиженияПоРегистру.Количество() Тогда
		НаборЗаписей.Загрузить(ДвиженияПоРегистру);
	КонецЕсли;
	
	Если НаборЗаписей.Модифицированность() Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	Иначе
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
