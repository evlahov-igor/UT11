#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ДенежныеСредстваВПути.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийДенежныеСредстваВПути"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Отправитель, Неопределено КАК Истина)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом


#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ДенежныеСредстваВПути.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.6.81";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8499ea52-6fe3-41c0-8e86-32c80462990d");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДенежныеСредстваВПути.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет ""Договор эквайринга"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ОперацияПоПлатежнойКарте.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетБанкаПоОперациямЭквайринга.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВПути.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВПути.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДенежныеСредстваВПути";
	
	ИменаОбъектов = Новый Массив;
	//++ Локализация
	ИменаОбъектов.Добавить(Метаданные.Документы.ВводОстатков.ПолноеИмя());
	//-- Локализация
	ИменаОбъектов.Добавить(Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу.ПолноеИмя());
	ИменаОбъектов.Добавить(Метаданные.Документы.ОперацияПоПлатежнойКарте.ПолноеИмя());
	ИменаОбъектов.Добавить(Метаданные.Документы.ОтчетБанкаПоОперациямЭквайринга.ПолноеИмя());
	ИменаОбъектов.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя());
	ИменаОбъектов.Добавить(Метаданные.Документы.ЧекККМ.ПолноеИмя());
	ИменаОбъектов.Добавить(Метаданные.Документы.ЧекККМВозврат.ПолноеИмя());
	ИменаОбъектов.Добавить(Метаданные.Документы.РеализацияПодарочныхСертификатов.ПолноеИмя());
	ИменаОбъектов.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах.ПолноеИмя());
	ИменаОбъектов.Добавить(Метаданные.Документы.РасчетКурсовыхРазниц.ПолноеИмя());
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ИменаОбъектов, ",");;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВПути КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыЭквайринга.ПустаяСсылка)
	|	И ДанныеРегистра.ВидПереводаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу)
	|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (
	//++ Локализация
	|		ТИП(Документ.ВводОстатков),
	//-- Локализация
	|		ТИП(Документ.ВводОстатковРасчетовПоЭквайрингу),
	|		ТИП(Документ.ОперацияПоПлатежнойКарте),
	|		ТИП(Документ.ОтчетБанкаПоОперациямЭквайринга),
	|		ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|		ТИП(Документ.ЧекККМ),
	|		ТИП(Документ.ЧекККМВозврат),
	|		ТИП(Документ.РеализацияПодарочныхСертификатов),
	|		ТИП(Документ.ОтчетОРозничныхПродажах),
	|		ТИП(Документ.РасчетКурсовыхРазниц)
	|	)
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Регистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетБанкаПоОперациямЭквайринга КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Регистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Регистраторы)
	|";
	
	Запрос.УстановитьПараметр("Регистраторы", ОбновляемыеДанные.ВыгрузитьКолонку("Регистратор"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для каждого ПорцияДанных Из ОбновляемыеДанные Цикл
	
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ПорцияДанных.Регистратор);
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ПорцияДанных.Регистратор);
			НаборЗаписей.Прочитать();
			
			Если Выборка.НайтиСледующий(ПорцияДанных.Регистратор, "Ссылка") Тогда
				Для каждого ЗаписьНабора Из НаборЗаписей Цикл
					ЗаписьНабора.Договор = Выборка.ДоговорЭквайринга;
				КонецЦикла;
			Иначе
				Для каждого ЗаписьНабора Из НаборЗаписей Цикл
					ЗаписьНабора.Договор = Справочники.ДоговорыЭквайринга.ДоговорПоУмолчанию(
						ЗаписьНабора.Организация, ЗаписьНабора.Контрагент, ЗаписьНабора.Валюта);
				КонецЦикла;
			КонецЕсли;
			Выборка.Сбросить();
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 , по причине: %2'");
			ТекстСообщения = СтрШаблон(Шаблон, ПолноеИмяРегистра, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, МетаданныеРегистра,, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
