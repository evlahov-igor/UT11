#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийВыручкаИСебестоимостьПродаж"; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&Раздел КАК РазделДатыЗапрета
	|ИЗ
	|	&ИмяТаблицыИзменений КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		Таблица.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|";
	
	ИмяПараметраИмяРегистра = "ИмяРегистра" + ИмяРегистра;
	ИмяПараметраРаздел = "Раздел" + ИмяРегистра;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяРегистра", "&" + ИмяПараметраИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Раздел", "&" + ИмяПараметраРаздел);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяТаблицыИзменений", ИмяТаблицыИзменений);
	
	Запрос.УстановитьПараметр(ИмяПараметраИмяРегистра, ИмяРегистра);
	Запрос.УстановитьПараметр(ИмяПараметраРаздел, "ФинансовыйКонтур");
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)
	|	И ЗначениеРазрешено(Т.Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.5.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("45f4547f-9eb3-4292-93e0-7933e72e61b1");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит %Парам1% с типом %Парам2%.'");
	
	 Обработчик.Комментарий = СтрЗаменить(Обработчик.Комментарий, "%Парам1%", "ИсточникГФУРасчетов");
	 Обработчик.Комментарий = СтрЗаменить(Обработчик.Комментарий, "%Парам2%", "Справочник.ОбъектыРасчетов");
	 
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ИсточникГФУРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьИсточникГФУРасчетов В (&ПустыеЗначенияОбъектовРасчета)
	|		И НЕ (ДанныеРегистра.УдалитьИсточникГФУРасчетов ССЫЛКА Документ.ОтчетКомитенту
	|				И ВЫРАЗИТЬ(ДанныеРегистра.УдалитьИсточникГФУРасчетов КАК Документ.ОтчетКомитенту).УдержатьВознаграждение)
	|		И (ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|				ГДЕ
	|					РасчетыСПоставщиками.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСПоставщиками.УдалитьЗаказПоставщику = ДанныеРегистра.УдалитьИсточникГФУРасчетов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|				ГДЕ
	|					РасчетыСКлиентами.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСКлиентами.УдалитьЗаказКлиента = ДанныеРегистра.УдалитьИсточникГФУРасчетов)
	|					
	|			ИЛИ	ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|				ГДЕ
	|					РасчетыСПоставщикамиПоСрокам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСПоставщикамиПоСрокам.УдалитьОбъектРасчетов = ДанныеРегистра.УдалитьИсточникГФУРасчетов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|				ГДЕ
	|					РасчетыСКлиентамиПоСрокам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСКлиентамиПоСрокам.УдалитьОбъектРасчетов = ДанныеРегистра.УдалитьИсточникГФУРасчетов)
	|					
	|			ИЛИ	ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|				ГДЕ
	|					РасчетыСПоставщикамиПоДокументам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСПоставщикамиПоДокументам.УдалитьЗаказПоставщику = ДанныеРегистра.УдалитьИсточникГФУРасчетов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|				ГДЕ
	|					РасчетыСКлиентамиПоДокументам.Регистратор = ДанныеРегистра.Регистратор
	|					И РасчетыСКлиентамиПоДокументам.УдалитьЗаказКлиента = ДанныеРегистра.УдалитьИсточникГФУРасчетов))
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчета", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.ИсточникГФУРасчетов <> &ОбъектРасчетовПустаяСсылка
		|			ТОГДА ДанныеРегистра.ИсточникГФУРасчетов
		|		ИНАЧЕ ЕСТЬNULL(ОбъектыРасчетов.Ссылка, &ОбъектРасчетовПустаяСсылка)
		|	КОНЕЦ КАК ИсточникГФУРасчетов,
		|	&ДополнительныеПоля КАК ДополнительныеПоля,
		|	ДанныеРегистра.Регистратор КАК Регистратор,
		|	ДанныеРегистра.НомерСтроки,
		|	ДанныеРегистра.ЗаказКлиента КАК ЗаказКлиента,
		|	ДанныеРегистра.УдалитьИсточникГФУРасчетов КАК ИсточникОбъектаРасчетов
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
		|			ПО ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договора
		|			ПО Договора.Ссылка = Аналитика.Договор
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО ДанныеРегистра.УдалитьИсточникГФУРасчетов 				= ОбъектыРасчетов.Объект
		|			И ОбъектыРасчетов.ТипРасчетов 							= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|			И ОбъектыРасчетов.Контрагент 							= Аналитика.Контрагент
		|			И ОбъектыРасчетов.Организация					 		= Аналитика.Организация
		|			И ОбъектыРасчетов.ВалютаВзаиморасчетов 					= ДанныеРегистра.ВалютаВзаиморасчетов
		|
		|			И (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.УдалитьИсточникГФУРасчетов) = ТИП(Справочник.ДоговорыКонтрагентов)
		|						И Договора.РазрешенаРаботаСДочернимиПартнерами
		|					ТОГДА Договора.Партнер
		|				ИНАЧЕ Аналитика.Партнер
		|			КОНЕЦ = ОбъектыРасчетов.Партнер) 
		|
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|ИТОГИ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистра.Регистратор";
	
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Запрос.УстановитьПараметр("ОбъектРасчетовПустаяСсылка", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	ОбъектыРасчетовСервер.ДополнитьЗапросПрочимиПолями(Запрос, МетаданныеРегистра);
	
	ПорцииДляОбработки = ОбъектыРасчетовСервер.ПорцииДанныхДляОбработки(ОбновляемыеДанные);
	
	ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
	
	Для Каждого ПорцияДанных Из ПорцииДляОбработки Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ПорцияДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистраторы", ПорцияДанных.ВыгрузитьКолонку("Регистратор"));
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			ВыборкаРегистратор = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КоличествоСтрок = РезультатЗапроса[1].Выгрузить();
			
			Если Не ВсеОбъектыРасчетовСгенерированы Тогда
				ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
			КонецЕсли;
			
			Пока ВыборкаРегистратор.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
				НаборЗаписей = СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
				ЕстьОшибкаЗапонения = Ложь;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоваяСтрокаНабора = НаборЗаписей.Добавить();
					Если ВыборкаДетальныеЗаписи.ИсточникГФУРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка()
						И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.УдалитьИсточникГФУРасчетов) Тогда
						Если Не ВсеОбъектыРасчетовСгенерированы Тогда
							ЕстьОшибкаЗапонения = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаНабора, ВыборкаДетальныеЗаписи);
				КонецЦикла;
			
				Если ЕстьОшибкаЗапонения Тогда
					Продолжить;
				КонецЕсли;
				
				ИсходноеКоличествоСтрок = КоличествоСтрок.Найти(ВыборкаРегистратор.Регистратор, "Регистратор").КоличествоСтрок;
				
				Если ИсходноеКоличествоСтрок <> НаборЗаписей.Количество() Тогда
				
					ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='При обработке набора записей регистра накопления %1 обнаружились дубли строк по регистратору: %2'"),
						МетаданныеРегистра.Имя,
						ВыборкаРегистратор.Регистратор));
				
				КонецЕсли;
				
				Если НаборЗаписей.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
			
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 , по причине: %2'");
			ТекстСообщения = СтрШаблон(Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				,
				ТекстСообщения);
		
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
