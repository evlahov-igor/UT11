#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Склад)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ТоварыКОформлениюИзлишковНедостач.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.8.176";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0aee6d03-fe42-45ac-8c6d-6242921b8cec");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТоварыКОформлениюИзлишковНедостач.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документов информационной базы по регистру накопления ""Товары к оформлению излишков недостач"".
	|До завершения обработчика работа с документами не рекомендуется, т.к. информация в регистре некорректна.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктОРасхожденияхПослеПеремещения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаПриобретения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОприходованиеИзлишковТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОрдерНаОтражениеИзлишковТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОрдерНаОтражениеНедостачТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОрдерНаОтражениеПересортицыТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОрдерНаОтражениеПорчиТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПересортицаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПорчаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриходныйОрдерНаТовары.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеНедостачТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаИзлишковНедостачПоТоварнымМестам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаПоОрдеруНаТовары.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПересчетТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ТоварыКОформлениюИзлишковНедостач.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ТоварыКОформлениюИзлишковНедостач.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра	= "РегистрНакопления.ТоварыКОформлениюИзлишковНедостач";
	ИмяРегистра			= "ТоварыКОформлениюИзлишковНедостач";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКОформлениюИзлишковНедостач.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюИзлишковНедостач КАК ТоварыКОформлениюИзлишковНедостач
	|ГДЕ
	|	НЕ (
	|		(ТоварыКОформлениюИзлишковНедостач.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			И ЕСТЬNULL(ВЫРАЗИТЬ(ТоварыКОформлениюИзлишковНедостач.Регистратор КАК Документ.КорректировкаИзлишковНедостачПоТоварнымМестам).Дата, ДАТАВРЕМЯ(1,1,1)) >= ТоварыКОформлениюИзлишковНедостач.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач)
	|		ИЛИ (ТоварыКОформлениюИзлишковНедостач.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			И ЕСТЬNULL(ВЫРАЗИТЬ(ТоварыКОформлениюИзлишковНедостач.Регистратор КАК Документ.КорректировкаПоОрдеруНаТовары).Дата, ДАТАВРЕМЯ(1,1,1)) >= ТоварыКОформлениюИзлишковНедостач.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач)
	|		ИЛИ (ТоварыКОформлениюИзлишковНедостач.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			И ЕСТЬNULL(ВЫРАЗИТЬ(ТоварыКОформлениюИзлишковНедостач.Регистратор КАК Документ.ПересчетТоваров).Дата, ДАТАВРЕМЯ(1,1,1)) >= ТоварыКОформлениюИзлишковНедостач.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач)
	|	)
	|	И (
	|		ТоварыКОформлениюИзлишковНедостач.Регистратор ССЫЛКА Документ.КорректировкаИзлишковНедостачПоТоварнымМестам
	|			ИЛИ ТоварыКОформлениюИзлишковНедостач.Регистратор ССЫЛКА Документ.КорректировкаПоОрдеруНаТовары
	|			ИЛИ ТоварыКОформлениюИзлишковНедостач.Регистратор ССЫЛКА Документ.ПересчетТоваров
	|	)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ДопПараметры.ПолучитьТекстыЗапроса = Истина;
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ДокументыКОбновлению(), ",");
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	СписокДокументов = ДокументыКРегистрацииАдаптированнымЗапросом();
	Для каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		ИмяДокумента	= СтрРазделить(ПолноеИмяДокумента, ".")[1];
		ТекстыЗапроса	= Документы[ИмяДокумента].ДанныеДокументаДляПроведения(Неопределено, ИмяРегистра, ДопПараметры);
		Регистраторы	= ПроведениеДокументов.РегистраторыДляПерепроведения(ТекстыЗапроса,
																			ПолноеИмяРегистра,
																			ПолноеИмяДокумента);
		
		ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыКОформлениюИзлишковНедостач";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	СписокДокументов = ДокументыКОбновлению();
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(СписокДокументов,
																						ПолноеИмяРегистра,
																						Параметры.Очередь,
																						ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

Функция ДокументыКРегистрацииАдаптированнымЗапросом()
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить("Документ.АктОРасхожденияхПослеОтгрузки");
	СписокДокументов.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
	СписокДокументов.Добавить("Документ.АктОРасхожденияхПослеПриемки");
	СписокДокументов.Добавить("Документ.КорректировкаПриобретения");
	СписокДокументов.Добавить("Документ.КорректировкаРеализации");
	СписокДокументов.Добавить("Документ.ОприходованиеИзлишковТоваров");
	СписокДокументов.Добавить("Документ.ОрдерНаОтражениеИзлишковТоваров");
	СписокДокументов.Добавить("Документ.ОрдерНаОтражениеНедостачТоваров");
	СписокДокументов.Добавить("Документ.ОрдерНаОтражениеПересортицыТоваров");
	СписокДокументов.Добавить("Документ.ОрдерНаОтражениеПорчиТоваров");
	СписокДокументов.Добавить("Документ.ПересортицаТоваров");
	СписокДокументов.Добавить("Документ.ПорчаТоваров");
	СписокДокументов.Добавить("Документ.ПриходныйОрдерНаТовары");
	СписокДокументов.Добавить("Документ.СписаниеНедостачТоваров");
	Возврат СписокДокументов
КонецФункции

Функция ДокументыКОбновлению()
	СписокДокументов = ДокументыКРегистрацииАдаптированнымЗапросом();
	СписокДокументов.Добавить("Документ.КорректировкаИзлишковНедостачПоТоварнымМестам");
	СписокДокументов.Добавить("Документ.КорректировкаПоОрдеруНаТовары");
	СписокДокументов.Добавить("Документ.ПересчетТоваров");
	СписокДокументов.Добавить("Документ.Сторно");
	Возврат СписокДокументов
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
