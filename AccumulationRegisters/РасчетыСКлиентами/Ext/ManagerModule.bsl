#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем



// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|	ПО АналитикаУчетаПоПартнерам.КлючАналитики = ЭтотСписок.АналитикаУчетаПоПартнерам
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиПартнеры
	|	ПО ВнешниеПользователиПартнеры.ОбъектАвторизации = АналитикаУчетаПоПартнерам.Партнер
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВнешниеПользователиПартнеры.Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.246";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ea4a8129-9935-4278-a2f5-30bb7aaafcce");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСКлиентами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерения ""Объект расчетов"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Контрагенты.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|	ГДЕ ДанныеРегистра.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			И НЕ ДанныеРегистра.УдалитьКорОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчета)
	|			И НЕ ДанныеРегистра.КорАналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|	ГДЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			И НЕ ДанныеРегистра.УдалитьКорОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчета)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|	ГДЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|			И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ДанныеРегистра.КОплате <> 0
	|			И ДанныеРегистра.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|	ГДЕ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (ТИП(Документ.ОтчетКомиссионера),ТИП(Документ.ОтчетКомиссионераОСписании)) 
	|			И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДанныеРегистра.Сумма < 0
	|			И ДанныеРегистра.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|	ГДЕ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (ТИП(Документ.ОтчетКомиссионера),ТИП(Документ.ОтчетКомиссионераОСписании)) 
	|			И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ДанныеРегистра.Сумма < 0
	|			И ДанныеРегистра.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|	ГДЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ДанныеРегистра.Сумма < 0
	|			И (ДанныеРегистра.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1) ИЛИ ДанныеРегистра.ДатаПлатежа <> НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаПлатежа, ДЕНЬ))
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|	ГДЕ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (ТИП(Документ.СписаниеБезналичныхДенежныхСредств), ТИП(Документ.РасходныйКассовыйОрдер))
	|			И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДанныеРегистра.Сумма > 0
	|			И (ДанныеРегистра.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1) ИЛИ ДанныеРегистра.ДатаПлатежа <> НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаПлатежа, ДЕНЬ))
	|	) КАК ДанныеРегистра";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчета", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.ОбъектРасчетов <> &ОбъектРасчетовПустаяСсылка
		|			ТОГДА ДанныеРегистра.ОбъектРасчетов
		|		ИНАЧЕ ЕСТЬNULL(ОбъектыРасчетов.Ссылка, &ОбъектРасчетовПустаяСсылка)
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.КорОбъектРасчетов <> &ОбъектРасчетовПустаяСсылка
		|			ТОГДА ДанныеРегистра.КорОбъектРасчетов
		|		ИНАЧЕ ЕСТЬNULL(КорОбъектыРасчетов.Ссылка, &ОбъектРасчетовПустаяСсылка)
		|	КОНЕЦ КАК КорОбъектРасчетов,
		|	&ДополнительныеПоля КАК ДополнительныеПоля,
		|	ДанныеРегистра.Регистратор КАК Регистратор,
		|	ДанныеРегистра.НомерСтроки,
		|	ДанныеРегистра.УдалитьЗаказКлиента КАК ИсточникОбъектаРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
		|			ПО ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КорАналитика
		|			ПО ДанныеРегистра.КорАналитикаУчетаПоПартнерам = КорАналитика.Ссылка
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договора
		|			ПО Договора.Ссылка = Аналитика.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК КорДоговора
		|			ПО КорДоговора.Ссылка = КорАналитика.Договор
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО ДанныеРегистра.УдалитьЗаказКлиента 					= ОбъектыРасчетов.Объект
		|			И ОбъектыРасчетов.ТипРасчетов 							= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|			И ОбъектыРасчетов.Контрагент 							= Аналитика.Контрагент
		|			И ОбъектыРасчетов.Организация							= Аналитика.Организация
		|			И ОбъектыРасчетов.ВалютаВзаиморасчетов 					= ДанныеРегистра.Валюта
		|
		|			И (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.УдалитьЗаказКлиента) = ТИП(Справочник.ДоговорыКонтрагентов)
		|						И Договора.РазрешенаРаботаСДочернимиПартнерами
		|					ТОГДА Договора.Партнер
		|				ИНАЧЕ Аналитика.Партнер
		|			КОНЕЦ = ОбъектыРасчетов.Партнер) 
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК КорОбъектыРасчетов
		|			ПО ДанныеРегистра.УдалитьКорОбъектРасчетов 				= КорОбъектыРасчетов.Объект
		|			И КорОбъектыРасчетов.ТипРасчетов 						= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|			И КорОбъектыРасчетов.Контрагент 						= ЕСТЬNULL(КорАналитика.Контрагент, Аналитика.Контрагент)
		|			И КорОбъектыРасчетов.Организация						= ЕСТЬNULL(КорАналитика.Организация, Аналитика.Организация)
		|			И КорОбъектыРасчетов.ВалютаВзаиморасчетов 				= ДанныеРегистра.Валюта
		|
		|			И (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.УдалитьКорОбъектРасчетов) = ТИП(Справочник.ДоговорыКонтрагентов)
		|						И КорДоговора.РазрешенаРаботаСДочернимиПартнерами
		|					ТОГДА Договора.Партнер
		|				ИНАЧЕ ЕСТЬNULL(КорАналитика.Партнер, Аналитика.Партнер)
		|			КОНЕЦ = КорОбъектыРасчетов.Партнер)
		|
		|			И НЕ ДанныеРегистра.УдалитьКорОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
		|			И НЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И НЕ ДанныеРегистра.УдалитьЗаказКлиента В (&ПустыеЗначенияОбъектовРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.ОбъектРасчетов <> &ОбъектРасчетовПустаяСсылка
		|			ТОГДА ДанныеРегистра.ОбъектРасчетов
		|		ИНАЧЕ ЕСТЬNULL(ОбъектыРасчетов.Ссылка, &ОбъектРасчетовПустаяСсылка)
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.КорОбъектРасчетов <> &ОбъектРасчетовПустаяСсылка
		|			ТОГДА ДанныеРегистра.КорОбъектРасчетов
		|		ИНАЧЕ ЕСТЬNULL(КорОбъектыРасчетов.Ссылка, &ОбъектРасчетовПустаяСсылка)
		|	КОНЕЦ КАК КорОбъектРасчетов,
		|	&ДополнительныеПоля КАК ДополнительныеПоля,
		|	ДанныеРегистра.Регистратор,
		|	ДанныеРегистра.НомерСтроки,
		|	ДанныеРегистра.АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
		|			ПО ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КорАналитика
		|			ПО ДанныеРегистра.КорАналитикаУчетаПоПартнерам = КорАналитика.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО ОбъектыРасчетов.ТипРасчетов 				= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|			И ОбъектыРасчетов.Организация 				= Аналитика.Организация
		|			И ОбъектыРасчетов.Контрагент 				= Аналитика.Контрагент
		|			И ОбъектыРасчетов.Договор 					= Аналитика.Договор
		|			И ОбъектыРасчетов.НаправлениеДеятельности 	= Аналитика.НаправлениеДеятельности
		|			И ОбъектыРасчетов.Партнер 					= Аналитика.Партнер
		|			И ОбъектыРасчетов.ВалютаВзаиморасчетов 		= ДанныеРегистра.Валюта
		|			И ОбъектыРасчетов.Объект 					= НЕОПРЕДЕЛЕНО
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК КорОбъектыРасчетов
		|			ПО ДанныеРегистра.УдалитьКорОбъектРасчетов 	= КорОбъектыРасчетов.Объект
		|			И КорОбъектыРасчетов.ТипРасчетов 			= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|			И КорОбъектыРасчетов.Организация 			= ЕСТЬNULL(КорАналитика.Организация, КорАналитика.Организация)
		|			И КорОбъектыРасчетов.Партнер 				= ЕСТЬNULL(КорАналитика.Партнер, КорАналитика.Партнер)
		|			И КорОбъектыРасчетов.Контрагент 			= ЕСТЬNULL(КорАналитика.Контрагент, КорАналитика.Контрагент)
		|			И КорОбъектыРасчетов.ВалютаВзаиморасчетов 	= ДанныеРегистра.Валюта
		|			И НЕ ДанныеРегистра.УдалитьКорОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
		|			И НЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|	И ДанныеРегистра.УдалитьЗаказКлиента В (&ПустыеЗначенияОбъектовРасчетов)
		|ИТОГИ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&Регистраторы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистра.Регистратор";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Запрос.УстановитьПараметр("ПустыеЗначенияКонтрагент", ОбъектыРасчетовСервер.ПустыеЗначенияКонтрагент());
	Запрос.УстановитьПараметр("ОбъектРасчетовПустаяСсылка", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	ОбъектыРасчетовСервер.ДополнитьЗапросПрочимиПолями(Запрос, МетаданныеРегистра);
	
	ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
	
	Для Каждого ПорцияДанных Из ОбновляемыеДанные Цикл
	
		НачатьТранзакцию();
		
		Попытка
			ОбрабатываемыйДокумент = ПорцияДанных.Регистратор;
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ОбрабатываемыйДокумент);
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистраторы", ОбрабатываемыйДокумент);
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			ВыборкаРегистратор = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КоличествоСтрок = РезультатЗапроса[1].Выгрузить();
			
			Пока ВыборкаРегистратор.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
				НаборЗаписей = РегистрыНакопления.РасчетыСКлиентами.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
				ЕстьОшибкаЗапонения = Ложь;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоваяСтрокаНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаНабора, ВыборкаДетальныеЗаписи);
					Если ВыборкаДетальныеЗаписи.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
						Если ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
							ИЛИ ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.АналитикаУчетаПоПартнерам) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось заполнить объект расчетов наборе записей регистра накопления %1, строка № %2
								|в источнике данных объекта расчетов обнаружена ссылка на несуществующий элемент.'"),
								ВыборкаРегистратор.Регистратор,
								ВыборкаДетальныеЗаписи.НомерСтроки);
							ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								МетаданныеРегистра,
								,
								ТекстСообщения);
						ИначеЕсли НоваяСтрокаНабора.АналитикаУчетаПоПартнерам = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка()
								И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) Тогда
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось заполнить объект расчетов наборе записей регистра накопления %1, строка № %2
									|Не заполнена аналитика учета по партнерам.'"),
									ВыборкаРегистратор.Регистратор,
									ВыборкаДетальныеЗаписи.НомерСтроки);
								ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Ошибка,
									МетаданныеРегистра,
									,
									ТекстСообщения);
						Иначе
							Если ОбновлениеИнформационнойБазы.ОбъектОбработан(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов).Обработан Тогда
								Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) Тогда
									ОбъектРасчетов = Неопределено;
									Если Не ТипЗнч(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) = Тип("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам") Тогда
										ОбъектыРасчетовСервер.ДогенерироватьОбъектыРасчетов(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов);
										
										ДопПараметрыПоиска 						= ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
										Аналитика 								= ВыборкаДетальныеЗаписи.АналитикаУчетаПоПартнерам;
										ДопПараметрыПоиска.Контрагент 			= Аналитика.Контрагент;
										ДопПараметрыПоиска.Партнер				= Аналитика.Партнер;
										ДопПараметрыПоиска.ВалютаВзаиморасчетов = ВыборкаДетальныеЗаписи.Валюта;
										ДопПараметрыПоиска.ОбновлениеИБ			= Истина;
										
										ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
											ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов,
											Аналитика.Организация,
											Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом,
											ДопПараметрыПоиска);
									ИначеЕсли Не ВсеОбъектыРасчетовСгенерированы Тогда 
										ЕстьОшибкаЗапонения = Истина;
										Прервать;
									КонецЕсли;
									
									Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
										НоваяСтрокаНабора.ОбъектРасчетов = ОбъектРасчетов;
									Иначе
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Не удалось заполнить объект расчетов в наборе записей регистра накопления %1, 
											|по источнику %2.'"),
											ПолноеИмяРегистра,
											ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов);
										ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
											УровеньЖурналаРегистрации.Ошибка,
											МетаданныеРегистра,
											,
											ТекстСообщения);
									КонецЕсли;
								КонецЕсли;
							Иначе
								ЕстьОшибкаЗапонения = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(НоваяСтрокаНабора.ОбъектРасчетов)
							И Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов)
							И Не ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.АналитикаУчетаПоПартнерам)
							И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИсточникОбъектаРасчетов) Тогда
								ЕстьОшибкаЗапонения = Истина;
								Прервать;
						КонецЕсли;
					КонецЕсли;
					
					Если ТипЗнч(ВыборкаРегистратор.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") 
						И (ЗначениеЗаполнено(НоваяСтрокаНабора.УдалитьКорОбъектРасчетов) 
							ИЛИ ЗначениеЗаполнено(НоваяСтрокаНабора.КорОбъектРасчетов)
							ИЛИ ЗначениеЗаполнено(НоваяСтрокаНабора.КорАналитикаУчетаПоПартнерам))Тогда
						НоваяСтрокаНабора.КорОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
						НоваяСтрокаНабора.УдалитьКорОбъектРасчетов = Неопределено;
						НоваяСтрокаНабора.КорАналитикаУчетаПоПартнерам = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
					КонецЕсли;
					
					Если ТипЗнч(ВыборкаРегистратор.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") 
						И НоваяСтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Расход
						И НоваяСтрокаНабора.КОплате <> 0
						И НоваяСтрокаНабора.ДатаПлатежа <> Дата(1,1,1) Тогда
						НоваяСтрокаНабора.ДатаПлатежа = Дата(1,1,1);
						НоваяСтрокаНабора.ПорядокЗачетаПоДатеПлатежа = НоваяСтрокаНабора.ПорядокОперации;
					КонецЕсли;
					
					Если (ТипЗнч(ВыборкаРегистратор.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионера")
							ИЛИ ТипЗнч(ВыборкаРегистратор.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании"))
						И (НоваяСтрокаНабора.Сумма < 0 ИЛИ НоваяСтрокаНабора.КОплате < 0) Тогда
						Если НоваяСтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Приход
							И НоваяСтрокаНабора.ДатаПлатежа <> Дата(1,1,1) Тогда
							НоваяСтрокаНабора.ДатаПлатежа = Дата(1,1,1);
							НоваяСтрокаНабора.ПорядокЗачетаПоДатеПлатежа = НоваяСтрокаНабора.ПорядокОперации;
						ИначеЕсли НоваяСтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Расход
							И НоваяСтрокаНабора.ДатаПлатежа = Дата(1,1,1) Тогда
							НоваяСтрокаНабора.ДатаПлатежа = НачалоДня(НоваяСтрокаНабора.ДатаРегистратора);
							НоваяСтрокаНабора.ПорядокЗачетаПоДатеПлатежа = НоваяСтрокаНабора.ПорядокОперации;
						КонецЕсли;
					КонецЕсли;
					
					Если ТипЗнч(ВыборкаРегистратор.Регистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") 
						И НоваяСтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Расход
						И НоваяСтрокаНабора.Сумма < 0
						И (НоваяСтрокаНабора.ДатаПлатежа = Дата(1,1,1) ИЛИ НоваяСтрокаНабора.ДатаПлатежа <> НачалоДня(НоваяСтрокаНабора.ДатаРегистратора)) Тогда
						НоваяСтрокаНабора.ДатаПлатежа = НачалоДня(НоваяСтрокаНабора.ДатаРегистратора);
						НоваяСтрокаНабора.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(НоваяСтрокаНабора.ДатаПлатежа,
							Прав(НоваяСтрокаНабора.ПорядокЗачетаПоДатеПлатежа,11),
							Тип("ДокументСсылка.ВзаимозачетЗадолженности"),
							"4");
					КонецЕсли;
					
					Если (ТипЗнч(ВыборкаРегистратор.Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
							ИЛИ ТипЗнч(ВыборкаРегистратор.Регистратор) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"))
						И НоваяСтрокаНабора.Сумма > 0 И НоваяСтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
							НоваяСтрокаНабора.ДатаПлатежа = НачалоДня(НоваяСтрокаНабора.ДатаРегистратора);
							НоваяСтрокаНабора.ПорядокЗачетаПоДатеПлатежа = НоваяСтрокаНабора.ПорядокОперации;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЕстьОшибкаЗапонения Тогда
					Продолжить;
				КонецЕсли;
				
				ИсходноеКоличествоСтрок = КоличествоСтрок.Найти(ВыборкаРегистратор.Регистратор, "Регистратор").КоличествоСтрок;
				
				Если ИсходноеКоличествоСтрок <> НаборЗаписей.Количество() Тогда
				
					ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='При обработке набора записей регистра накопления %1 обнаружились дубли строк по регистратору: %2'"),
						МетаданныеРегистра.Имя,
						ВыборкаРегистратор.Регистратор));
				
				КонецЕсли;
				
				Если НаборЗаписей.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 , по причине: %2'");
			ТекстСообщения = СтрШаблон(Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				,
				ТекстСообщения);
		
		КонецПопытки;
	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	Если Параметры.ОбработкаЗавершена Тогда
		ОперативныеВзаиморасчетыСервер.ПослеОбновленияРегистровВзаиморасчетов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли