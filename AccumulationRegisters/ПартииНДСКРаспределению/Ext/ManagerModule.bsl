
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработкаПереходаСРегистраПартииПрочихРасходовНаРегистрПартииНДСКРаспределению

// Процедура конвертирует записи регистра ПартииПрочихРасходов, относящиеся к распределению НДС, в отдельный 
// регистр ПартииНДСКРаспределению.
// 
// Параметры:
// 	Регистратор - ДокументСсылка.ПриобретениеТоваровУслуг - документ-регистратор
// 	Набор - РегистрНакопленияНаборЗаписей.ПартииПрочихРасходов - набор записей регистра для обработки
// 	ВыборкаЗаписей - ВыборкаИзРезультатаЗапроса - записи набора с рассчитанными дополнительными полями
// 
// Возвращаемое значение:
// 	РегистрНакопленияНаборЗаписей.ПартииНДСКРаспределению - набор записей нового регистра
//
Функция ПеренестиДанныеРегистраПартииПрочихРасходовВРегистрПартииНДСКРаспределению(Регистратор, Набор, ВыборкаЗаписей) Экспорт
	
	НаборПартийНДС = РегистрыНакопления.ПартииНДСКРаспределению.СоздатьНаборЗаписей();
	НаборПартийНДС.ОбменДанными.Загрузка = Истина;
	НаборПартийНДС.Отбор.Регистратор.Установить(Регистратор);
	НаборПартийНДС.Прочитать();
		
	ЗаписиКУдалению = Новый Массив();
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если ВыборкаЗаписей.ПереноситьЗапись Тогда
			ЗаписьНабора = Набор[ВыборкаЗаписей.НомерСтроки - 1];
			ЗаписиКУдалению.Добавить(ЗаписьНабора);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗаписьНДС = НаборПартийНДС.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНДС, ВыборкаЗаписей);
			
	КонецЦикла;
	
	Для Каждого ЗаписьНабора Из ЗаписиКУдалению Цикл
		Набор.Удалить(ЗаписьНабора);
	КонецЦикла;
	
	Возврат НаборПартийНДС;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПартииНДСКРаспределению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.5.29";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a622f67a-34d8-4b3f-1ea0-3ee1c5159121");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПартииНДСКРаспределению.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит %1 с типом %2 в регистре Партии НДС к распределению.'");
	Обработчик.Комментарий = СтрШаблон(Обработчик.Комментарий, "СтавкаНДС", "СправочникСсылка.СтавкиНДС");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПартииНДСКРаспределению.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПартииНДСКРаспределению.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПартииПрочихРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Патенты.ДобавитьПродажаПоПатентуВСтавкуБезНДС";
	НоваяСтрока.Порядок = "Любой";
	//-- Локализация

КонецПроцедуры

// Описание
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПартииНДСКРаспределению";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартииНДСКРаспределению.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПартииНДСКРаспределению КАК ПартииНДСКРаспределению
	|ГДЕ
	|	ПартииНДСКРаспределению.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	И НЕ ПартииНДСКРаспределению.УдалитьСтавкаНДС = &ПустаяСтавкаНДС";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	УчетНДСЛокализация.УстановитьПараметрЗапросаПустаяСтавкаНДСПеречислением(Запрос);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииНДСКРаспределению;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			Блокировка.Заблокировать();
							
				НаборЗаписей = РегистрыНакопления.ПартииНДСКРаспределению.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Прочитать();
				НаборИзменен = Ложь;
				
				Для Каждого СтрокаНабораЗаписей Из НаборЗаписей Цикл
					Если Не ЗначениеЗаполнено(СтрокаНабораЗаписей.СтавкаНДС) Тогда
						СтрокаНабораЗаписей.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(СтрокаНабораЗаписей.УдалитьСтавкаНДС);
						СтрокаНабораЗаписей.УдалитьСтавкаНДС = Неопределено;
						НаборИзменен = Истина;
					КонецЕсли;
				КонецЦикла;
			
				Если НаборИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 по регистратору ""%2"", по причине: %3'");
			ТекстСообщения = 
				СтрШаблон(Шаблон, 
					ПолноеИмяРегистра, 
					Выборка.Регистратор, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, 
				, 
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
