#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийСебестоимостьТоваров"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СохранениеДвижений

// Добавляет в дополнительные свойства документа служебное свойство,
// в котором сохраняются дата начала и окончания периода,
// за который необходимо сохранить движения из ИБ в записываемый набор записей регистра.
//
Процедура ИнициализироватьСохранениеДвиженийДокументаЗаПериод(ДополнительныеСвойстваДокумента,
			НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	ДополнительныеСвойстваДокумента.Вставить("ДополнитьДвижениямиИзИБЗаПериод", Новый Структура);
	
	ДополнительныеСвойстваДокумента.ДополнитьДвижениямиИзИБЗаПериод.Вставить(
		"НачалоПериода",
		?(ЗначениеЗаполнено(НачалоПериода), НачалоПериода, Дата(1,1,1)));
	
	ДополнительныеСвойстваДокумента.ДополнитьДвижениямиИзИБЗаПериод.Вставить(
		"КонецПериода", 
		?(ЗначениеЗаполнено(КонецПериода),  КонецПериода,  ДобавитьМесяц(КонецМесяца(ТекущаяДатаСеанса()), 12*100)));
	
КонецПроцедуры

Процедура ИнициализироватьСохранениеДвиженийНабораЗаписейЗаПериод(Движение, ДополнительныеСвойстваДокумента) Экспорт
	
	Если ДополнительныеСвойстваДокумента.Свойство("ДополнитьДвижениямиИзИБЗаПериод") Тогда
		
		Движение.ДополнительныеСвойства.Вставить(
			"ДополнитьДвижениямиИзИБЗаПериод",
			ДополнительныеСвойстваДокумента.ДополнитьДвижениямиИзИБЗаПериод);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.СебестоимостьТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.3.18";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f699b4c2-4d86-4d79-89ee-b2f81be0566a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.СебестоимостьТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Очищает измерение ""Вид запасов"" в движениях регистра ""Себестоимость товаров"" для готовой продукции, отраженной отчетами переработчиков.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Обработчик обновления КА 2.4.9
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки; // см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки
	ПараметрыВыборки.ПолныеИменаОбъектов = ТипыДокументовКОбработке();
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПараметрыВыборки.ПолныеИменаРегистров;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Регистратор
	|ИЗ
	|	(
	// Очистка видов запасов в движениях по готовой продукции, отраженной отчетами переработчиков.
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Движения.Регистратор
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Движения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|			ПО ИСТИНА
	|	ГДЕ
	|		&ПартионныйУчетВерсии22
	|		И Движения.Период >= &ДатаПереходаНаПартионныйУчетВерсии22
	|		И Движения.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		И Движения.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер)
	|		И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	) КАК Движения
	|";
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22", РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22());
	Запрос.УстановитьПараметр("ДатаПереходаНаПартионныйУчетВерсии22", РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления КА 2.4.9:
// - очищаются виды запасов в движениях по готовой продукции, отраженной отчетами переработчиков.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() > 0 Тогда
		
		#Область ЗапросДляРегистраторов
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Движения.Период,
		|	Движения.Регистратор,
		|	Движения.ВидДвижения,
		|	Движения.Активность,
		|
		|	Движения.АналитикаУчетаНоменклатуры,
		|	Движения.РазделУчета КАК РазделУчета,
		
		|	(ВЫБОР
		|		КОГДА Ключи.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер)
		|		 И Движения.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|		ИНАЧЕ Движения.ВидЗапасов
		|	КОНЕЦ) КАК ВидЗапасов,
		|	Движения.Организация,
		|	Движения.Партия КАК Партия,
		|	Движения.АналитикаУчетаПартий,
		|	Движения.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
		|	Движения.ВидДеятельностиНДС,
		|
		|	Движения.Количество,
		|	Движения.Стоимость,
		|	Движения.СтоимостьБезНДС,
		|	Движения.СтоимостьЗабалансовая,
		|	Движения.ДопРасходы,
		|	Движения.ДопРасходыБезНДС,
		|	Движения.Трудозатраты,
		|	Движения.ПостатейныеПостоянныеСНДС,
		|	Движения.ПостатейныеПеременныеСНДС,
		|	Движения.ПостатейныеПостоянныеБезНДС,
		|	Движения.ПостатейныеПеременныеБезНДС,
		|	Движения.СтоимостьРегл,
		|	Движения.СтоимостьЗабалансоваяРегл,
		|	Движения.ДопРасходыРегл,
		|	Движения.ТрудозатратыРегл,
		|	Движения.ПостатейныеПостоянныеРегл,
		|	Движения.ПостатейныеПеременныеРегл,
		|	Движения.ПостояннаяРазница,
		|	Движения.ВременнаяРазница,
		|	Движения.СтоимостьУпр,
		|	Движения.ДопРасходыУпр,
		|	Движения.ТрудозатратыУпр,
		|	Движения.ПостатейныеПостоянныеУпр,
		|	Движения.ПостатейныеПеременныеУпр,
		|
		|	Движения.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|
		|	Движения.КорАналитикаУчетаНоменклатуры,
		|	Движения.КорРазделУчета КАК КорРазделУчета,
		|
		|	(ВЫБОР
		|		КОГДА КорКлючи.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер)
		|		 И Движения.КорРазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|		ИНАЧЕ Движения.КорВидЗапасов
		|	КОНЕЦ) КАК КорВидЗапасов,
		|	Движения.КорОрганизация,
		|	Движения.КорСтоимость,
		|	Движения.АналитикаУчетаПоПартнерам,
		|	Движения.ЗаказКлиента,
		|	Движения.Подразделение,
		|	Движения.АналитикаРасходов,
		|	Движения.СтатьяРасходовСписания,
		|	Движения.СтатьяДоходов,
		|	Движения.АналитикаДоходов,
		|	Движения.ПериодПродажи,
		|	Движения.СтатьяАктивовПассивов,
		|	Движения.АналитикаАктивовПассивов,
		|	Движения.ДокументДвижения,
		|	Движения.ИдентификаторСтроки,
		|	Движения.ГруппаПродукции,
		|	Движения.РасчетПартий,
		|	Движения.РасчетСебестоимости,
		|	Движения.КорПартия,
		|	Движения.КорАналитикаУчетаПартий,
		|	Движения.КорАналитикаФинансовогоУчета,
		|	Движения.КорВидДеятельностиНДС КАК КорВидДеятельностиНДС,
		|	Движения.НДСРегл,
		|	Движения.СтатьяКалькуляции КАК СтатьяКалькуляции,
		|	Движения.ТипЗаписи,
		|	Движения.ДокументИсточник,
		|	Движения.УдалитьАналитикаУчетаПартийПроизводства КАК УдалитьАналитикаУчетаПартийПроизводства,
		|	Движения.КорНаправлениеДеятельности
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК Движения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
		|		ПО Ключи.Ссылка = Движения.АналитикаУчетаНоменклатуры
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КорКлючи
		|		ПО КорКлючи.Ссылка = Движения.КорАналитикаУчетаНоменклатуры
		|
		|ГДЕ
		|	Движения.Регистратор = &Регистратор
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";
		
		#КонецОбласти
		
		Для Каждого ТекДанные Из ОбновляемыеДанные Цикл
			
			Регистратор = ТекДанные.Регистратор;
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				Блокировка.Заблокировать();
				
				Запрос.УстановитьПараметр("Регистратор", Регистратор);
				
				Результат = Запрос.Выполнить();
				
				Если Результат.Пустой() Тогда
					
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
					
				Иначе
					
					Набор = РегистрыНакопления.СебестоимостьТоваров.СоздатьНаборЗаписей();
					Набор.Отбор.Регистратор.Установить(Регистратор);
					Набор.Загрузить(Результат.Выгрузить());
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Регистратор.Метаданные(),
					ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ТипыДокументовКОбработке()
	
	Возврат "
		|Документ.КорректировкаРегистров,
		|Документ.РасчетСебестоимостиТоваров
		|";
		
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
