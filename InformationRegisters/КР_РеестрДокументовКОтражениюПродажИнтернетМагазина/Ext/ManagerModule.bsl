////////////////////////////////////////////////////
//// Модуль менеджера регистра сведений "КР_РеестрДокументовКОтражениюПродажИнтернетМагазина"
//// Создан: 25.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-725   
//// Разработка по ФДР С71.003 Интеграция УТ10 Торговля - УТ11. Цены и ОРП

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗарегистрироватьОбъект(Объект, РежимЗаписи, Отказ) Экспорт 
	
	// Определим ссылку на документ
	// Если документа не существует то установим ему ссылку, если еще не установлеоа
	Если Объект.ЭтоНовый() Тогда       
		ТипЗначения = ТипЗнч(Объект.Ссылка);
		ОбъектСсылка = Объект.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда 
			ОбъектСсылка = XMLЗначение(ТипЗначения, Строка(Новый УникальныйИдентификатор()));
			Объект.УстановитьСсылкуНового(ОбъектСсылка);
		КонецЕсли;         
	Иначе
		ОбъектСсылка = Объект.Ссылка;
	КонецЕсли;   		
	
	// Определим состав данных к отражению
	// Берем разницу предыдущее/текущее состояние документа
	// Если есть изменения - регистрируем. 
	
	ПроведениеДокумента = (РежимЗаписи = РежимЗаписиДокумента.Проведение);

	Запрос = Новый Запрос(ТекстЗапросаДанныеКОтражению());
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("ПроведениеДокумента", ПроведениеДокумента); 
	Запрос.УстановитьПараметр("Товары", Объект.Товары); 
	Запрос.УстановитьПараметр("ОплатаПлатежнымиКартами", Объект.ОплатаПлатежнымиКартами); 
	
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		Запись = РегистрыСведений.КР_РеестрДокументовКОтражениюПродажИнтернетМагазина.СоздатьМенеджерЗаписи();
		
		// A2105505-2142
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда 
			Запись.Объект = ОбъектСсылка;
			Запись.НомерЗаказаИнтернетМагазина = ВыборкаДетальныеЗаписи.НомерЗаказаИнтернетМагазина;
			Запись.ВидОперации = ВыборкаДетальныеЗаписи.ВидОперации;  
		КонецЕсли;	
		//
		
		Запись.Состояние = Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.КОбработке;

		Контекст = Новый Структура;
		Контекст.Вставить("ОтчетОРозничныхПродажах", ОбъектСсылка);
		Контекст.Вставить("НомерЗаказаИнтернетМагазина", Запись.НомерЗаказаИнтернетМагазина);
		Контекст.Вставить("ВидОперации", Запись.ВидОперации);
		
		СозданныйДокумент = ПолучитьСсылкуНаСозданныйДокумент(Контекст);  // A2105505-2142
			
		Если Не ЗначениеЗаполнено(Запись.СозданныйДокумент) // A2105505-2142
			И ОбщегоНазначения.СсылкаСуществует(СозданныйДокумент) Тогда 	
			Запись.СозданныйДокумент = СозданныйДокумент; 
		КонецЕсли;	
			
		Запись.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ОтразитьРеализацииТоваров() Экспорт
	
	ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.РеализацияТоваров;
	Контекст = Неопределено;
	Пока ПолучитьКонтекстКОбработке(Контекст, ВидОперации) Цикл 
		
		Попытка
			
			// Удалим накопленные сеансовые сообщения
			ПолучитьСообщенияПользователю(Истина);
			
			Если Не СоздатьОбновитьПродажуИнтернетМагазина(Контекст) Тогда 
				УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Ошибка, Контекст);
				Продолжить;
			КонецЕсли;	

			УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Отражено, Контекст);
			
		Исключение
			ОбработатьИсключение(Контекст);
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтразитьОплатыКартой() Экспорт
	
	ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ОплатаКартой;
	Контекст = Неопределено;
	Пока ПолучитьКонтекстКОбработке(Контекст, ВидОперации) Цикл 

		Попытка
			
			// Удалим накопленные сеансовые сообщения
			ПолучитьСообщенияПользователю(Истина);
			
			Если Не СоздатьОбновитьОплатуКартойИнтернетМагазина(Контекст) Тогда 
				УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Ошибка, Контекст);
				Продолжить;
			КонецЕсли;	

			УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Отражено, Контекст);
			
		Исключение
			ОбработатьИсключение(Контекст);
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтразитьОплатыНаличными() Экспорт
	
	ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ОплатаНаличными;
	Контекст = Неопределено;
	Пока ПолучитьКонтекстКОбработке(Контекст, ВидОперации) Цикл 
		
		Попытка
			
			// Удалим накопленные сеансовые сообщения
			ПолучитьСообщенияПользователю(Истина);
			
			Если Не СоздатьОбновитьОплатуНаличнымиИнтернетМагазина(Контекст) Тогда 
				УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Ошибка, Контекст);
				Продолжить;
			КонецЕсли;	

			УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Отражено, Контекст);
			
		Исключение
			ОбработатьИсключение(Контекст);
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтразитьВозвратыТоваров() Экспорт
	
	ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратТоваров;
	Контекст = Неопределено;
	Пока ПолучитьКонтекстКОбработке(Контекст, ВидОперации) Цикл 
		
		Попытка
			
			// Удалим накопленные сеансовые сообщения
			ПолучитьСообщенияПользователю(Истина);
			
			Если Не СоздатьОбновитьВозвратИнтернетМагазина(Контекст) Тогда 
				УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Ошибка, Контекст);
				Продолжить;
			КонецЕсли;	

			УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Отражено, Контекст);
			
		Исключение
			ОбработатьИсключение(Контекст);
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтразитьВозвратыОплатыКартой() Экспорт
	
	ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратОплатыКартой;
	Контекст = Неопределено;
	Пока ПолучитьКонтекстКОбработке(Контекст, ВидОперации) Цикл 

		Попытка
			
			// Удалим накопленные сеансовые сообщения
			ПолучитьСообщенияПользователю(Истина);
			
			Если Не СоздатьОбновитьВозвратОплатыКартойИнтернетМагазина(Контекст) Тогда 
				УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Ошибка, Контекст);
				Продолжить;
			КонецЕсли;	

			УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Отражено, Контекст);
			
		Исключение
			ОбработатьИсключение(Контекст);
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтразитьВозвратыОплатыНаличными() Экспорт
	
	ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратОплатыНаличными;
	Контекст = Неопределено;
	Пока ПолучитьКонтекстКОбработке(Контекст, ВидОперации) Цикл 
		
		Попытка
			
			// Удалим накопленные сеансовые сообщения
			ПолучитьСообщенияПользователю(Истина);
			
			Если Не СоздатьОбновитьВозвратОплатыНаличнымиИнтернетМагазина(Контекст) Тогда 
				УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Ошибка, Контекст);
				Продолжить;
			КонецЕсли;	

			УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Отражено, Контекст);
			
		Исключение
			ОбработатьИсключение(Контекст);
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеМетоды

Функция ПолучитьСсылкуНаСозданныйДокумент(Контекст, Знач ВидОперации = Неопределено)
	
	ОтчетОРозничныхПродажах = Контекст.ОтчетОРозничныхПродажах;
	НомерЗаказаИнтернетМагазина = Контекст.НомерЗаказаИнтернетМагазина;  
	
	Если ВидОперации = Неопределено Тогда 
		ВидОперации = Контекст.ВидОперации;  
	КонецЕсли;	
	
	ПредставлениеИдентификатора = "";
	
	Если ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.РеализацияТоваров Тогда 
		ТипЗначения = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ИначеЕсли ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратТоваров Тогда 
		ТипЗначения = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
		ПредставлениеИдентификатора = ПредставлениеИдентификатора + XMLСтрока(ОтчетОРозничныхПродажах);
	ИначеЕсли ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ОплатаКартой Тогда 
		ТипЗначения = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте");
	ИначеЕсли ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратОплатыКартой Тогда 
		ТипЗначения = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте");
		ПредставлениеИдентификатора = ПредставлениеИдентификатора + XMLСтрока(ОтчетОРозничныхПродажах);
	ИначеЕсли ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ОплатаНаличными Тогда 
		ТипЗначения = Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
	ИначеЕсли ВидОперации = Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратОплатыНаличными Тогда 
		ТипЗначения = Тип("ДокументСсылка.РасходныйКассовыйОрдер");		
		ПредставлениеИдентификатора = ПредставлениеИдентификатора + XMLСтрока(ОтчетОРозничныхПродажах);
	Иначе                 
		ТекстИсключения = НСтр("ru = 'Не определена логика получения типа документа по виду операции'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ПредставлениеИдентификатора = ПредставлениеИдентификатора 
		+ НомерЗаказаИнтернетМагазина + XMLСтрока(ВидОперации);
	GUID = КР_ОбщегоНазначениеСервер.GUIDИзСтроки(ПредставлениеИдентификатора);
	
	Возврат XMLЗначение(ТипЗначения, GUID);
	
КонецФункции

Функция ПолучитьКонтекстКОбработке(Контекст, ВидОперации)

	Запрос = Новый Запрос(ТекстЗапросаПолучитьПервуюЗаписьКОбработке());
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации); 

	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если Не ВыборкаДетальныеЗаписи.Следующий() Тогда  
		Возврат Ложь;
	КонецЕсли;	 
	
	// Создаем запись
	Запись = РегистрыСведений.КР_РеестрДокументовКОтражениюПродажИнтернетМагазина.СоздатьМенеджерЗаписи(); 
	ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);   
	Запись.Прочитать();  
	
	// Формируем контекст
	Контекст = Новый Структура;
	Контекст.Вставить("Запись", Запись);
	
	// Переводим запись в состояние Обрабатывается
	УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Обрабатывается, Контекст);
	
	Контекст.Вставить("ОтчетОРозничныхПродажах", Запись.Объект);
	Контекст.Вставить("Период", Запись.Объект.Дата);
	Контекст.Вставить("НомерЗаказаИнтернетМагазина", Запись.НомерЗаказаИнтернетМагазина);
	Контекст.Вставить("ВидОперации", Запись.ВидОперации);
	Контекст.Вставить("ЗаказКлиента", Неопределено);
	Контекст.Вставить("КассаККМ", Запись.Объект.КассаККМ);
	Контекст.Вставить("СозданныйДокумент", Неопределено);
	Контекст.Вставить("УдалитьДокумент", Не Запись.Объект.Проведен);
	
	Контекст.СозданныйДокумент = ПолучитьСсылкуНаСозданныйДокумент(Контекст); // A2105505-2142

	Возврат УстановитьЗаказПоНомеруЗаказаИнтернетМагазина(Контекст);
	
КонецФункции

Процедура УстановитьСостояниеЗаписи(Состояние, Контекст)

	// Убраны все крайние ситуайии при которых предполагалась паралельная обработка одной записи
	
	Запись = Контекст.Запись;
	
	Если Состояние = Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Обрабатывается
		Тогда 		
		Запись.Состояние = Состояние;  		
		Запись.Записать();
		Возврат;
	КонецЕсли;
	
	МассивСообщений = Новый Массив;

	МассивСообщенийСеанса = ПолучитьСообщенияПользователю(Истина);
	Если МассивСообщенийСеанса.Количество() Тогда
		Для Каждого СообщениеПользователю Из МассивСообщенийСеанса Цикл
			МассивСообщений.Добавить(СообщениеПользователю.Текст);
		КонецЦикла;
	КонецЕсли;	

	СозданныйДокумент = Контекст.СозданныйДокумент;
	Если ЗначениеЗаполнено(СозданныйДокумент)
		И ОбщегоНазначения.СсылкаСуществует(СозданныйДокумент) Тогда 	
		Запись.СозданныйДокумент = СозданныйДокумент; 
	КонецЕсли;	

	Запись.Состояние = Состояние;  
	Запись.СообщенияПользователю = СтрСоединить(МассивСообщений, Символы.ПС);   

	Запись.Записать();
	
КонецПроцедуры

Функция ИнициализироватьДокумент(Ссылка)    
	
	Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда 

		ДокументОбъект = Ссылка.ПолучитьОбъект(); 
		Если ДокументОбъект.Проведен Тогда 
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;	
		
		ДокументОбъект.ПометкаУдаления = Ложь; 
		КР_ОбщегоНазначениеСервер.ДокументОбъектОчистить(ДокументОбъект);
		
	Иначе            
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
		ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(Ссылка);  
		
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции

Функция ДокументОбъектПровести(ДокументОбъект)
		
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда   
		Возврат Ложь;	
	КонецЕсли;      
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка проведения документа %1:
			|%2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
			ДокументОбъект, ОбработкаОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке()));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

Процедура ДокументОбъектПометитьНаУдалениеЕслиСуществует(Ссылка)

	ТекстСообщения = НСтр("ru = 'Формирование документа не требуется'"); 
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);    
	
	Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда 

		ДокументОбъект = Ссылка.ПолучитьОбъект(); 
		ДокументОбъект.УстановитьПометкуУдаления(Истина);

		ТекстСообщения = НСтр("ru = 'Документ помечен на удаление'"); 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработатьИсключение(Контекст)

	ИнформацияОбОшибке = ИнформацияОбОшибке();
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.Причина) Тогда  
		ТекстСообщения = ОбработкаОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке);
	Иначе	
		ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;				
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Ошибка, Контекст);

КонецПроцедуры
		
Функция ПолучитьВыборкуПоТоварам(Контекст, ЭтоВозврат = Ложь)   

	Запрос = Новый Запрос(ТекстЗапросаТоварыИнтернетМагазина());
	Запрос.УстановитьПараметр("Ссылка", Контекст.ОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("НомерЗаказаИнтернетМагазина", Контекст.НомерЗаказаИнтернетМагазина);
	Запрос.УстановитьПараметр("МодификаторЗнака", ?(ЭтоВозврат, -1, 1));
	
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаПоТоварам = РезультатЗапроса.Выбрать();

	Возврат ВыборкаПоТоварам;
	
КонецФункции

Функция ПолучитьДанныеПоОплатеКартой(Контекст, ЭтоВозврат = Ложь)   

	Запрос = Новый Запрос(ТекстЗапросаОплатаКартойИнтернетМагазина());
	Запрос.УстановитьПараметр("Ссылка", Контекст.ОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("НомерЗаказаИнтернетМагазина", Контекст.НомерЗаказаИнтернетМагазина);
	Запрос.УстановитьПараметр("МодификаторЗнака", ?(ЭтоВозврат, -1, 1));
	
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаПоОплатеКартой = РезультатЗапроса.Выбрать();

	Возврат ВыборкаПоОплатеКартой;
	
КонецФункции

Функция СоздатьОбновитьПродажуИнтернетМагазина(Контекст)
	
	Ссылка = Контекст.СозданныйДокумент;
	Если Контекст.УдалитьДокумент Тогда 
		ДокументОбъектПометитьНаУдалениеЕслиСуществует(Ссылка);	
		Возврат Истина;
	КонецЕсли;
	
	// Нужно отменить проведенние реализации так как заказ может быть уменьшен
	// По этому инициализацию реализации с отменой проведения делаем раньше чем обновляем заказ
	РеализацияОбъект = ИнициализироватьДокумент(Ссылка);
	
	Возврат АктуализироватьДанныеЗаказаИнтернетМагазина(Контекст)
		И АктуализироватьДанныеРеализацииИнтернетМагазина(РеализацияОбъект, Контекст);
	
КонецФункции

Функция СоздатьОбновитьОплатуКартойИнтернетМагазина(Контекст)
	
	Ссылка = Контекст.СозданныйДокумент;
	ДанныеПоОплатеКартой = ПолучитьДанныеПоОплатеКартой(Контекст);
	Если Контекст.УдалитьДокумент
		Или Не ДанныеПоОплатеКартой.Следующий() Тогда 
		ДокументОбъектПометитьНаУдалениеЕслиСуществует(Ссылка);	
		Возврат Истина;
	КонецЕсли;
	
	НомерЗаказаИнтернетМагазина = Контекст.НомерЗаказаИнтернетМагазина;
	
    // Получим ссылку на реализацию.
	Реализация = ПолучитьСсылкуНаСозданныйДокумент(Контекст, // A2105505-2142
		Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.РеализацияТоваров);
		
	Если Не ОбщегоНазначения.СсылкаСуществует(Реализация) Тогда 
		ТекстСообщения = НСтр("ru = 'Не найдена реализация номеру заказа интернет-магазина %1'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, НомерЗаказаИнтернетМагазина);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;	

	ДокументОбъект = ИнициализироватьДокумент(Ссылка);
	ДокументОбъект.Заполнить(Реализация);
	
	СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
		ДокументОбъект.ХозяйственнаяОперация);
	ДокументОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	Для каждого СтрокаРасшифровкиПлатежа Из ДокументОбъект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = ДанныеПоОплатеКартой.Сумма;
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(ДокументОбъект, ДокументОбъект.СуммаДокумента, Ложь);
	
	ДокументОбъект.Дата = Контекст.Период; 
	ДокументОбъект.ЭквайринговыйТерминал = ДанныеПоОплатеКартой.ЭквайринговыйТерминал;
	ДокументОбъект.ДоговорЭквайринга = ДанныеПоОплатеКартой.ДоговорЭквайринга;
	
	Возврат ДокументОбъектПровести(ДокументОбъект);
				
КонецФункции

Функция СоздатьОбновитьОплатуНаличнымиИнтернетМагазина(Контекст)
	
	Ссылка = Контекст.СозданныйДокумент;
	Если Контекст.УдалитьДокумент Тогда 
		ДокументОбъектПометитьНаУдалениеЕслиСуществует(Ссылка);	
		Возврат Истина;
	КонецЕсли;
	
	НомерЗаказаИнтернетМагазина = Контекст.НомерЗаказаИнтернетМагазина;
	
    // Получим ссылку на реализацию.
	Реализация = ПолучитьСсылкуНаСозданныйДокумент(Контекст, // A2105505-2142
		Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.РеализацияТоваров);
		
	Если Не ОбщегоНазначения.СсылкаСуществует(Реализация) Тогда 
		ТекстСообщения = НСтр("ru = 'Не найдена реализация номеру заказа интернет-магазина %1'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, НомерЗаказаИнтернетМагазина);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;	

	ДокументОбъект = ИнициализироватьДокумент(Ссылка);
	ДокументОбъект.Заполнить(Реализация);
	
	СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
		ДокументОбъект.ХозяйственнаяОперация);
	ДокументОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	Для каждого СтрокаРасшифровкиПлатежа Из ДокументОбъект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	КонецЦикла;
	
	ДокументОбъект.Дата = Контекст.Период; 
	ДокументОбъект.КассаККМ = Контекст.КассаККМ; 
	ДокументОбъект.КР_ПоступлениеВКассуККМ = Истина;
	
	Если ДокументОбъект.СуммаДокумента = 0 Тогда 
		ДокументОбъектПометитьНаУдалениеЕслиСуществует(Ссылка);	
		Возврат Истина;
	КонецЕсли;	
	
	Возврат ДокументОбъектПровести(ДокументОбъект);
				
КонецФункции

Функция СоздатьОбновитьВозвратИнтернетМагазина(Контекст)
	
	Ссылка = Контекст.СозданныйДокумент;
	Если Контекст.УдалитьДокумент Тогда 
		ДокументОбъектПометитьНаУдалениеЕслиСуществует(Ссылка);	
		Возврат Истина;
	КонецЕсли;
	
	ВозвратОбъект = ИнициализироватьДокумент(Ссылка);
	
	Возврат АктуализироватьДанныеВозвратаИнтернетМагазина(ВозвратОбъект, Контекст);
	
КонецФункции

Функция СоздатьОбновитьВозвратОплатыКартойИнтернетМагазина(Контекст)
	
	Ссылка = Контекст.СозданныйДокумент;
	ДанныеПоОплатеКартой = ПолучитьДанныеПоОплатеКартой(Контекст, Истина);
	Если Контекст.УдалитьДокумент
		Или Не ДанныеПоОплатеКартой.Следующий() Тогда 
		ДокументОбъектПометитьНаУдалениеЕслиСуществует(Ссылка);	
		Возврат Истина;
	КонецЕсли;
	
	НомерЗаказаИнтернетМагазина = Контекст.НомерЗаказаИнтернетМагазина;
	
    // Получим ссылку на возврат товаров.
	ВозвратТоваров = ПолучитьСсылкуНаСозданныйДокумент(Контекст, // A2105505-2142
		Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратТоваров);
		
	Если Не ОбщегоНазначения.СсылкаСуществует(ВозвратТоваров) Тогда 
		ТекстСообщения = НСтр("ru = 'Не найден возврат товаров по номеру заказа интернет-магазина %1'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, НомерЗаказаИнтернетМагазина);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;	

	ДокументОбъект = ИнициализироватьДокумент(Ссылка);
	ДокументОбъект.Заполнить(ВозвратТоваров);
	
	СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
		ДокументОбъект.ХозяйственнаяОперация);
	ДокументОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	Для каждого СтрокаРасшифровкиПлатежа Из ДокументОбъект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = ДанныеПоОплатеКартой.Сумма;
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(ДокументОбъект, ДокументОбъект.СуммаДокумента, Ложь);
	
	ДокументОбъект.Дата = Контекст.Период; 
	ДокументОбъект.ЭквайринговыйТерминал = ДанныеПоОплатеКартой.ЭквайринговыйТерминал;
	ДокументОбъект.ДоговорЭквайринга = ДанныеПоОплатеКартой.ДоговорЭквайринга;
	
	Возврат ДокументОбъектПровести(ДокументОбъект);
				
КонецФункции

Функция СоздатьОбновитьВозвратОплатыНаличнымиИнтернетМагазина(Контекст)
	
	Ссылка = Контекст.СозданныйДокумент;
	Если Контекст.УдалитьДокумент Тогда 
		ДокументОбъектПометитьНаУдалениеЕслиСуществует(Ссылка);	
		Возврат Истина;
	КонецЕсли;
	
	НомерЗаказаИнтернетМагазина = Контекст.НомерЗаказаИнтернетМагазина;
	
    // Получим ссылку на возврат товаров.
	ВозвратТоваров = ПолучитьСсылкуНаСозданныйДокумент(Контекст, // A2105505-2142
		Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратТоваров);
		
	Если Не ОбщегоНазначения.СсылкаСуществует(ВозвратТоваров) Тогда 
		ТекстСообщения = НСтр("ru = 'Не найден возврат товаров по номеру заказа интернет-магазина %1'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, НомерЗаказаИнтернетМагазина);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;	

	ДокументОбъект = ИнициализироватьДокумент(Ссылка);
	ДокументОбъект.Заполнить(ВозвратТоваров);
	
	СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
		ДокументОбъект.ХозяйственнаяОперация);
	ДокументОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	Для Каждого СтрокаРасшифровкиПлатежа Из ДокументОбъект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	КонецЦикла;
	
	ДокументОбъект.Дата = Контекст.Период; 
	ДокументОбъект.КассаККМ = Контекст.КассаККМ; 
	ДокументОбъект.КР_ВозвратИзКассыККМ = Истина;
	
	Если ДокументОбъект.СуммаДокумента = 0
		Или Не ЗначениеЗаполнено(ДокументОбъект.РасшифровкаПлатежа[0].ОбъектРасчетов) Тогда 
		ДокументОбъектПометитьНаУдалениеЕслиСуществует(Ссылка);	
		Возврат Истина;
	КонецЕсли;	
	
	Возврат ДокументОбъектПровести(ДокументОбъект);
				
КонецФункции

Функция УстановитьЗаказПоНомеруЗаказаИнтернетМагазина(Контекст)
	
	НомерЗаказаИнтернетМагазина = Контекст.НомерЗаказаИнтернетМагазина;
	Запрос = Новый Запрос(ТекстЗапросаЗаказПоНомеруЗаказаИнтернетМагазина());
	Запрос.УстановитьПараметр("НомерЗаказаИнтернетМагазина", НомерЗаказаИнтернетМагазина);
	
	РезультатЗапроса = Запрос.Выполнить(); 	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();   
	КоличествоНайденыхЗаказов = ВыборкаДетальныеЗаписи.Количество();
	Если КоличествоНайденыхЗаказов = 1 Тогда   
		ВыборкаДетальныеЗаписи.Следующий();
		Контекст.ЗаказКлиента = ВыборкаДетальныеЗаписи.Ссылка;
		Возврат Истина;
	КонецЕсли;

	ТекстСообщения = НСтр("ru = 'По номеру заказа интернет-магазина %1 найдено ""%2"" заказов клиентов'"); 
	ТекстСообщения = СтрШаблон(ТекстСообщения, НомерЗаказаИнтернетМагазина, КоличествоНайденыхЗаказов);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

	УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияОтраженияПродажИнтернетМагазина.Ошибка, Контекст);
	
	Возврат Ложь;
	
КонецФункции	

Функция АктуализироватьДанныеЗаказаИнтернетМагазина(Контекст)

	ВыборкаПоТоварам = ПолучитьВыборкуПоТоварам(Контекст);   
	
	// Перезаполняем товарную часть заказа клиента
	ЗаказОбъект = Контекст.ЗаказКлиента.ПолучитьОбъект();
	Товары = ЗаказОбъект.Товары;
	Товары.Очистить();
	
	Пока ВыборкаПоТоварам.Следующий() Цикл 
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
		
		НоваяСтрока.ДатаОтгрузки = ЗаказОбъект.Дата;
		
	КонецЦикла;	
	
	ЗаказОбъект.ЦенаВключаетНДС = Истина;
	
	// Меняем статус заказа КОтгрузке чтоб можно было отгрузить товар
	ЗаказОбъект.УстановитьСтатус("КОтгрузке", Неопределено);
	
	// Инициализация документа         
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЗаказОбъект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ЗаказОбъект.Товары, СтруктураДействий, Неопределено);
	
	// Код обработки заполнения
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ЗаказОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ЗаказОбъект.Склад, СкладГруппа, ЗаказОбъект.Товары, Ложь);
	
	Возврат ДокументОбъектПровести(ЗаказОбъект);
	
КонецФункции

Функция АктуализироватьДанныеРеализацииИнтернетМагазина(РеализацияОбъект, Контекст)
	
	// Заполняем реализацию 
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("ПоЗаказам", Истина);
	ПараметрыОформления.Вставить("ПоОрдерам", Ложь);
	ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;  
	СкладОтгрузки = Справочники.Склады.ПустаяСсылка();
	Основание = Новый Структура;    
	Основание.Вставить("СкладОтгрузки", СкладОтгрузки);
	Основание.Вставить("ВариантОформленияПродажи", ВариантОформленияПродажи);
	Основание.Вставить("ПараметрыОформления", ПараметрыОформления); 
	Основание.Вставить("ДокументОснование", Контекст.ЗаказКлиента);
	
	РеализацияОбъект.Заполнить(Основание);  
	
	РеализацияОбъект.Дата = Контекст.Период; 

	РеализацияОбъект.КР_РозничнаяПродажа = Контекст.ОтчетОРозничныхПродажах;
	РеализацияОбъект.КР_ЗаказИнтернетМагазина = Контекст.ЗаказКлиента;
	РеализацияОбъект.КР_Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеТорговыйЗал(
		РеализацияОбъект.Склад, РеализацияОбъект.Дата); 
	
	РеализацияОбъект.СкидкиРассчитаны = Истина;
	Возврат ДокументОбъектПровести(РеализацияОбъект);
		
КонецФункции

Функция АктуализироватьДанныеВозвратаИнтернетМагазина(ВозвратОбъект, Контекст)

	НомерЗаказаИнтернетМагазина = Контекст.НомерЗаказаИнтернетМагазина;  
	
    // Получим ссылку на реализацию.
	Реализация = ПолучитьСсылкуНаСозданныйДокумент(Контекст, // A2105505-2142
		Перечисления.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.РеализацияТоваров);
		
	Если Не ОбщегоНазначения.СсылкаСуществует(Реализация) Тогда 
		ТекстСообщения = НСтр("ru = 'Не найдена реализация номеру заказа интернет-магазина %1'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, НомерЗаказаИнтернетМагазина);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не Реализация.Проведен Тогда 
		ТекстСообщения = НСтр("ru = 'Реализация товаров %1 не проведена. Возврат невозможен'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, Реализация);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ВозвратОбъект.Заполнить(Реализация);  
	ВозвратОбъект.ЦенаВключаетНДС = Истина;
	
	// Удаляем лишние данные из возврата согласно данным ОРП
	ОтборСтрок = Новый Структура("Номенклатура,Характеристика,Цена");
	ОбработанныеСтроки = Новый Соответствие;  
	ВыборкаПоТоварам = ПолучитьВыборкуПоТоварам(Контекст, Истина);  
	ЕстьОшибки = Ложь;  
	// Простой поиск и распределение. 
	// Свитаем что возврат идет без разбития или группировки строк... 
	//	т.е. при нахождении строки меняем заменяем все кроме кода строки 
	Пока ВыборкаПоТоварам.Следующий() Цикл 
		
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ВыборкаПоТоварам);
		НайденныеСтроки = ВозвратОбъект.Товары.НайтиСтроки(ОтборСтрок);
		
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда 
			ТекстСообщения = НСтр("ru = 'Не найдена строка товара в реализации %1 с параметрами
			|	Номенклатура/Характеристика/Цена %1/%2/%3'"); 
			ТекстСообщения = СтрШаблон(ТекстСообщения, 
				ОтборСтрок.Номенклатура, ОтборСтрок.Характеристика, ОтборСтрок.Цена);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ЕстьОшибки = Истина;   
			Продолжить;
		КонецЕсли;	
		
		Для Каждого СтрокаДанных Из НайденныеСтроки Цикл 
			
			Если ОбработанныеСтроки[СтрокаДанных] <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			
			ОбработанныеСтроки[СтрокаДанных] = Истина;
			
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаПоТоварам);
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Если ЕстьОшибки Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Удалим строки которые не обрабатывались
	Если ВыборкаПоТоварам.Количество() Тогда 
		
		Для Итератор = -ВозвратОбъект.Товары.Количество() + 1 По 0 Цикл 
			
			СтрокаДанных = ВозвратОбъект.Товары[-Итератор];
			Если ОбработанныеСтроки[СтрокаДанных] <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			
			ВозвратОбъект.Товары.Удалить(-Итератор);
			
		КонецЦикла;
		
	КонецЕсли;	                
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ВозвратОбъект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ВозвратОбъект.Товары, СтруктураДействий, Неопределено);	
	
	ВозвратОбъект.РасшифровкаПлатежа.Очистить();
	
	ВозвратОбъект.Дата = Контекст.Период; 
	ВозвратОбъект.КР_РозничныйВозврат = Контекст.ОтчетОРозничныхПродажах;
	ВозвратОбъект.КР_ЗаказИнтернетМагазина = Контекст.ЗаказКлиента;
	ВозвратОбъект.КР_Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеТорговыйЗал(
		ВозвратОбъект.Склад, ВозвратОбъект.Дата); 

	ВозвратОбъект.СуммаДокумента = ВозвратОбъект.ПолучитьСуммуДокумента();
	
	Возврат ДокументОбъектПровести(ВозвратОбъект);
		
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаДанныеКОтражению()
	
	Возврат
	"ВЫБРАТЬ
	|	Т.КР_НомерЗаказаИнтернетМагазина КАК НомерЗаказаИнтернетМагазина,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Количество КАК Количество,
	|	Т.Сумма КАК Сумма
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.КР_НомерЗаказаИнтернетМагазина КАК НомерЗаказаИнтернетМагазина,
	|	Т.Сумма КАК Сумма
	|ПОМЕСТИТЬ ОплатаПлатежнымиКартами
	|ИЗ
	|	&ОплатаПлатежнымиКартами КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
    |// Находим разницу между тем что уже было и тем что стало 
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Т.Количество > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.РеализацияТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратТоваров)
	|	КОНЕЦ КАК ВидОперации,
	|	Т.НомерЗаказаИнтернетМагазина КАК НомерЗаказаИнтернетМагазина,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	-Т.Количество КАК Количество,
	|	-Т.Сумма КАК Сумма
	|ПОМЕСТИТЬ ДетальныеЗаписи
	|ИЗ
	|	Товары КАК Т  
	|ГДЕ
	|	НЕ Т.НомерЗаказаИнтернетМагазина ПОДОБНО """"
	|	И &ПроведениеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Т.Количество > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.РеализацияТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратТоваров)
	|	КОНЕЦ,
	|	Т.КР_НомерЗаказаИнтернетМагазина,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Количество,
	|	Т.Сумма
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|	И Т.Ссылка.Проведен
	|	И НЕ Т.КР_НомерЗаказаИнтернетМагазина ПОДОБНО """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Т.Сумма > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ОплатаКартой)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратОплатыКартой)
	|	КОНЕЦ КАК ВидОперации,
	|	Т.НомерЗаказаИнтернетМагазина КАК НомерЗаказаИнтернетМагазина,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	-Т.Сумма КАК Сумма
	|ИЗ
	|	ОплатаПлатежнымиКартами КАК Т  
	|ГДЕ
	|	НЕ Т.НомерЗаказаИнтернетМагазина ПОДОБНО """"
	|	И &ПроведениеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Т.Сумма > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ОплатаКартой)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратОплатыКартой)
	|	КОНЕЦ,
	|	Т.КР_НомерЗаказаИнтернетМагазина,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	Т.Сумма
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|	И Т.Ссылка.Проведен
	|	И НЕ Т.КР_НомерЗаказаИнтернетМагазина ПОДОБНО """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОплатаПлатежнымиКартами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Полученная разница избыточно сгруппирована по номерклатуре, но корректна по сути
	|ВЫБРАТЬ
	|	Т.ВидОперации КАК ВидОперации,
	|	Т.НомерЗаказаИнтернетМагазина КАК НомерЗаказаИнтернетМагазина,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	СУММА(Т.Количество) КАК Количество,
	|	СУММА(Т.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ДанныеКОтражениюВРазрезеНоменклатуры
	|ИЗ
	|	ДетальныеЗаписи КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ВидОперации,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.НомерЗаказаИнтернетМагазина
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Т.Количество) <> 0
	|		ИЛИ СУММА(Т.Сумма) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДетальныеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Оставляем только данные к регистрации на отражение 
	|// Добавляем тригер на обработку наличной оплаты/возврата 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ВидОперации КАК ВидОперации,
	|	Т.НомерЗаказаИнтернетМагазина КАК НомерЗаказаИнтернетМагазина
	|ИЗ
	|	ДанныеКОтражениюВРазрезеНоменклатуры КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Т.ВидОперации В (
	|				ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.РеализацияТоваров), 
	|				ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ОплатаКартой) 
	|			)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ОплатаНаличными)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КР_ВидыОперацийПоОтражениюПродажИнтернетМагазина.ВозвратОплатыНаличными)
	|	КОНЕЦ КАК ВидОперации,
	|	Т.НомерЗаказаИнтернетМагазина КАК НомерЗаказаИнтернетМагазина
	|ИЗ
	|	ДанныеКОтражениюВРазрезеНоменклатуры КАК Т 
	|";
	
КонецФункции

Функция ТекстЗапросаПолучитьПервуюЗаписьКОбработке()

	Возврат
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Объект КАК Объект,
	|	Т.НомерЗаказаИнтернетМагазина КАК НомерЗаказаИнтернетМагазина,
	|	Т.ВидОперации КАК ВидОперации
	|ИЗ
	|	РегистрСведений.КР_РеестрДокументовКОтражениюПродажИнтернетМагазина КАК Т
	|ГДЕ
	|	Т.ВидОперации = &ВидОперации
	|	И Т.Состояние = ЗНАЧЕНИЕ(Перечисление.КР_СостоянияОтраженияПродажИнтернетМагазина.КОбработке)";
	
КонецФункции

Функция ТекстЗапросаЗаказПоНомеруЗаказаИнтернетМагазина()

	Возврат
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК Т
	|ГДЕ
	|	Т.Проведен
	|	И Т.КР_НомерЗаказаИнтернетМагазина = &НомерЗаказаИнтернетМагазина";
	
КонецФункции

Функция ТекстЗапросаТоварыИнтернетМагазина()

	Возврат
	"ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Упаковка КАК Упаковка,
	|	Т.Количество * &МодификаторЗнака КАК Количество,
	|	Т.КоличествоУпаковок * &МодификаторЗнака КАК КоличествоУпаковок,
	|	Т.Цена КАК Цена,
	|	Т.Сумма * &МодификаторЗнака КАК Сумма,
	|	Т.СтавкаНДС КАК СтавкаНДС,
	|	Т.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	0 КАК ПроцентАвтоматическойСкидки,
	|	Т.СуммаРучнойСкидки * &МодификаторЗнака КАК СуммаРучнойСкидки,
	|	0 КАК СуммаАвтоматическойСкидки
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|	И Т.КоличествоУпаковок * &МодификаторЗнака > 0
	|	И Т.Ссылка.Проведен
	|	И Т.КР_НомерЗаказаИнтернетМагазина = &НомерЗаказаИнтернетМагазина";
	
КонецФункции

Функция ТекстЗапросаОплатаКартойИнтернетМагазина()

	Возврат
	"ВЫБРАТЬ
	|	Т.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	Т.ЭквайринговыйТерминал.Владелец КАК ДоговорЭквайринга,
	|	СУММА(Т.Сумма) * &МодификаторЗнака КАК Сумма
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|	И Т.Ссылка.Проведен
	|	И Т.КР_НомерЗаказаИнтернетМагазина = &НомерЗаказаИнтернетМагазина   
	// << 29.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2606  
	// Выбираем только записи, соответствующие оплате или возврату
	// Оплата - МодификаторЗнака > 0 
	// Возврат - МодификаторЗнака < 0 
	// Т.Сумма при оплате > 0, при возврате < 0
	// Соответственно отношения сумм и модификатора к нулю должны совпадать
	|	И (Т.Сумма > 0) = (&МодификаторЗнака > 0)
	// >> 29.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2606
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	Т.ЭквайринговыйТерминал,
	|	Т.ЭквайринговыйТерминал.Владелец
	|
	|ИМЕЮЩИЕ
	|	СУММА(Т.Сумма) * &МодификаторЗнака > 0";
	
КонецФункции

#КонецОбласти

#КонецЕсли
