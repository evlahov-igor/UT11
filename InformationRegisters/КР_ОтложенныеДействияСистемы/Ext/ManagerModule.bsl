////////////////////////////////////////////////////
//// Модуль менеджера регистра сведений "КР_ОтложенныеДействияСистемы"
//// Создан: 14.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2384 

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗапланироватьДействиеСистемы(
		ИмяМетода, 
		Параметры, 
		Заголовок,
		Знач ЗапланированнаяДатаВыполнения = Неопределено,
		Владедец = Неопределено,
		ДействиеПриНаличииЗаписи = Неопределено
	) Экспорт 
	
	// ToDo: Удалить привилегированный режим и разграничить по правам
	// На этапе старта считаем что действие планирует процесс с правами суперпользователя 
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДействиеПриНаличииЗаписи = Неопределено Тогда 
		ДействиеПриНаличииЗаписи = ДействиеПриНаличииЗаписи_Заменить();
	КонецЕсли;
	
	Если ДействиеПриНаличииЗаписи = ДействиеПриНаличииЗаписи_ДобавитьНовую() Тогда 
		ДанныеИдентификатора = Строка(Новый УникальныйИдентификатор);
	Иначе
		ДанныеИдентификатора = ИмяМетода;
		Если ЗначениеЗаполнено(Владедец) Тогда 
			ДанныеИдентификатора = СтрШаблон("%1%2%3", ДанныеИдентификатора, ТипЗнч(Владедец), XMLСтрока(Владедец));
		КонецЕсли;
	КонецЕсли;	
	
	ХэшИдентификаторЗаписи = КР_ОбщегоНазначениеСервер.MD5(ДанныеИдентификатора);
	
	Запись = РегистрыСведений.КР_ОтложенныеДействияСистемы.СоздатьМенеджерЗаписи(); 
	
	Если ДействиеПриНаличииЗаписи = ДействиеПриНаличииЗаписи_ОставитьБезИзменений() Тогда 
		Запись.ХэшИдентификаторЗаписи = ХэшИдентификаторЗаписи;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;	
		
	Состояние = Перечисления.КР_СостоянияВыполненияОтложенныхДействийСистемы.КВыполнению;  
	Если Не ЗначениеЗаполнено(ЗапланированнаяДатаВыполнения) Тогда 
		ЗапланированнаяДатаВыполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запись.ХэшИдентификаторЗаписи = ХэшИдентификаторЗаписи; 
	Запись.ИмяМетода = ИмяМетода;                                         
	Запись.Параметры = Новый ХранилищеЗначения(Параметры); 
	Запись.ЗапланированнаяДатаВыполнения = ЗапланированнаяДатаВыполнения;
	Запись.Владелец = Владедец;   
	Запись.Заголовок = Заголовок;   
	Запись.Состояние = Состояние;  
	Запись.СообщенияПользователю = Неопределено;   
	Запись.ДатаПоследнейПопыткиВыполнения = Неопределено;
	Запись.КоличествоПопытокОбработки = Неопределено;
	Запись.Записать();
	
КонецПроцедуры

Процедура ВыполнитьЗапланированныеДействияСистемы(ИдентификаторыЗаписей = Неопределено) Экспорт
	
	Контекст = Неопределено;
	Пока ПолучитьЗапланированноеДействиеСистемы(Контекст, ИдентификаторыЗаписей) Цикл  
		
		Попытка
			
			// Удалим накопленные сеансовые сообщения
			ПолучитьСообщенияПользователю(Истина);
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(Контекст.ИмяМетода, Контекст.Параметры);

			УдалитьЗапланированноеДействиеСистемы(Контекст);
			
		Исключение
			ОбработатьИсключение(Контекст);
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ДействиеПриНаличииЗаписи_Заменить() Экспорт
	Возврат "ЗаменитьЗапись";
КонецФункции

Функция ДействиеПриНаличииЗаписи_ОставитьБезИзменений() Экспорт
	Возврат "ОставитьЗаписьОставитьБезИзменений";
КонецФункции

Функция ДействиеПриНаличииЗаписи_ДобавитьНовую() Экспорт
	Возврат "ДобавитьНовуюЗапись";
КонецФункции

#КонецОбласти

#Область СервисныеМетоды

Функция ПолучитьЗапланированноеДействиеСистемы(Контекст, ИдентификаторыЗаписей = Неопределено)

	Запись = РегистрыСведений.КР_ОтложенныеДействияСистемы.СоздатьМенеджерЗаписи(); 
	
	Если Не ЗначениеЗаполнено(ИдентификаторыЗаписей) Тогда 
		Запрос = Новый Запрос(ТекстЗапросаПолучитьПервуюЗаписьКВыполнению()); 
		Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());

		РезультатЗапроса = Запрос.Выполнить(); 
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если Не ВыборкаДетальныеЗаписи.Следующий() Тогда  
			Возврат Ложь;
		КонецЕсли;	 
		
		Запись.ХэшИдентификаторЗаписи = ВыборкаДетальныеЗаписи.ХэшИдентификаторЗаписи;        
		
	Иначе  
		
		Запись.ХэшИдентификаторЗаписи = ИдентификаторыЗаписей[0];
		ИдентификаторыЗаписей.Удалить(0);
		
	КонецЕсли;
	
	Запись.Прочитать();  
	
	// Формируем контекст
	Контекст = Новый Структура;
	Контекст.Вставить("Запись", Запись);
	
	// Переводим запись в состояние Обрабатывается
	УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияВыполненияОтложенныхДействийСистемы.Выполняется, Контекст);
	
	Контекст.Вставить("ИмяМетода", Запись.ИмяМетода);
	Контекст.Вставить("Параметры", Запись.Параметры.Получить());
	Контекст.Вставить("Владелец", Запись.Владелец);	

	Возврат Истина;
	
КонецФункции

Процедура ОбработатьИсключение(Контекст)
    
	ИнформацияОбОшибке = ИнформацияОбОшибке();
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.Причина) Тогда  
		ТекстСообщения = ОбработкаОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке);
	Иначе	
		ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;				
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	УстановитьСостояниеЗаписи(Перечисления.КР_СостоянияВыполненияОтложенныхДействийСистемы.Ошибка, Контекст);

КонецПроцедуры

Процедура УстановитьСостояниеЗаписи(Состояние, Контекст)

	Запись = Контекст.Запись;
	
	МассивСообщений = Новый Массив;
	
	ШаблонТекстаСообщенияСЗаполненнымКлючомДанных = "%2: %1";
	МассивСообщенийСеанса = ПолучитьСообщенияПользователю(Истина);
	Если МассивСообщенийСеанса.Количество() Тогда
		Для Каждого СообщениеПользователю Из МассивСообщенийСеанса Цикл  
			Если ЗначениеЗаполнено(СообщениеПользователю.КлючДанных) Тогда    
				ТекстСообщения = СтрШаблон(ШаблонТекстаСообщенияСЗаполненнымКлючомДанных,
					СообщениеПользователю.Текст, СообщениеПользователю.КлючДанных); 
			Иначе
				ТекстСообщения = СообщениеПользователю.Текст; 
			КонецЕсли;		
			МассивСообщений.Добавить(СообщениеПользователю.Текст);
		КонецЦикла;
	КонецЕсли;	

	Запись.Состояние = Состояние;  
	Запись.СообщенияПользователю = СтрСоединить(МассивСообщений, Символы.ПС);   
	Запись.ДатаПоследнейПопыткиВыполнения = ТекущаяДатаСеанса();
	Запись.КоличествоПопытокОбработки = Запись.КоличествоПопытокОбработки + 1;
	
	Запись.Записать();
	
КонецПроцедуры

Функция УдалитьЗапланированноеДействиеСистемы(Контекст)
		
	Контекст.Запись.Удалить(); 
	Возврат Истина;
	
КонецФункции	

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаПолучитьПервуюЗаписьКВыполнению()

	Возврат
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.ХэшИдентификаторЗаписи КАК ХэшИдентификаторЗаписи
	|ИЗ
	|	РегистрСведений.КР_ОтложенныеДействияСистемы КАК Т
	|ГДЕ
	|	Т.ЗапланированнаяДатаВыполнения <= &Период
	|	И Т.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.КР_СостоянияВыполненияОтложенныхДействийСистемы.КВыполнению), 
	|		ЗНАЧЕНИЕ(Перечисление.КР_СостоянияВыполненияОтложенныхДействийСистемы.Ошибка)
	|	)
	|	И Т.КоличествоПопытокОбработки < 2";
	
КонецФункции

#КонецОбласти

#КонецЕсли
