#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имя константы, хранящей номер задания для данного регистра.
// 
// Возвращаемое значение:
//	Строка - Строковое предствление имени константы НомерЗаданияКФормированиюДвиженийПоНДС.
Функция ИмяКонстантыНомераЗадания() Экспорт
	
	Возврат Метаданные.Константы.НомерЗаданияКФормированиюДвиженийПоНДС.Имя;
	
КонецФункции

// Увеличивает значение номера задания в константе.
//
// Возвращаемое значение:
//	Число - Новый номер задания из константы НомерЗаданияКФормированиюДвиженийПоНДС.
//
Функция УвеличитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Возвращает значение номера задани из константы.
//
// Возвращаемое значение:
//	Число - Номер текущего задания из константы НомерЗаданияКФормированиюДвиженийПоНДС.
//
Функция ПолучитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.ТекущийНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Метод создает запись регистра с заданными параметрами.
//
// Параметры:
//	ПериодЗадания   - Дата - Начало периода, для которого необходимо зарегистрировать задание к расчету
//	СчетФактура - ДокументСсылка - документ регистратор создавший движение в зависимых регистрах
//	Организация - СправочникСсылка.Организации - организация, по которой необходим перерасчет
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, СчетФактура, Организация, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если НомерЗадания = Неопределено Тогда
		НомерЗадания = ПолучитьНомерЗадания();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьМенеджерЗаписи();
	НаборЗаписей.Месяц        = НачалоМесяца(ПериодЗадания);
	НаборЗаписей.СчетФактура  = СчетФактура;
	НаборЗаписей.Организация  = Организация;
	НаборЗаписей.НомерЗадания = НомерЗадания;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		СтруктураПолей = Новый Структура("Месяц, Организация, СчетФактура");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			Если ЗначениеЗаполнено(СтруктураПолей.Организация) Тогда
				СоздатьЗаписьРегистра(СтруктураПолей.Месяц, СтруктураПолей.СчетФактура, СтруктураПолей.Организация, НомерЗадания);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сформировать задание к формированию движений по НДС за %1 в организации %2 по причине: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Учет НДС'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает перечень объектов метаданных, на основании данных которых формируются записи в регистре.
//
// Возвращаемое значение:
//   Массив - элементы - ОбъектМетаданных, при получении которых в процессе обмена надо формировать зписи в регистре.
//
Функция ВходящиеДанныеМеханизма() Экспорт
	
	ВходящиеДанные = УчетНДСУПСлужебный.ВходящиеДанныеМеханизма();
	
	Возврат ВходящиеДанные;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

//++ Локализация

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.5.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0df89174-9a53-4b87-bb6b-de3d2cd65aa0");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет поле СчетФактура.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.СчетФактураВыданныйАванс.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СчетФактураПолученныйАванс.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Описание
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт

	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЗаданияКФормированиюДвиженийПоНДС КАК Задания
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Задания.СчетФактура) = ТИП(Документ.СчетФактураВыданныйАванс)
	|	ИЛИ ТИПЗНАЧЕНИЯ(Задания.СчетФактура) = ТИП(Документ.СчетФактураПолученныйАванс)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ТекстЗапросаПолученияИтоговыхДанных = "ВЫБРАТЬ
	|	Задания.СчетФактура КАК СчетФактура,
	|	ВЫРАЗИТЬ(Задания.СчетФактура КАК Документ.СчетФактураПолученныйАванс).ДокументОснование КАК ДокументОснование
	|ИЗ
	|	РегистрСведений.ЗаданияКФормированиюДвиженийПоНДС КАК Задания
	|ГДЕ
	|	Задания.СчетФактура ССЫЛКА Документ.СчетФактураПолученныйАванс
	|	И Задания.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Задания.СчетФактура,
	|	ВЫРАЗИТЬ(Задания.СчетФактура КАК Документ.СчетФактураВыданныйАванс).ДокументОснование
	|ИЗ
	|	РегистрСведений.ЗаданияКФормированиюДвиженийПоНДС КАК Задания
	|ГДЕ
	|	Задания.Организация = &Организация
	|	И Задания.СчетФактура ССЫЛКА Документ.СчетФактураВыданныйАванс
	|	И НЕ ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(Задания.СчетФактура КАК Документ.СчетФактураВыданныйАванс).ДокументОснование) = ТИП(Документ.СчетФактураПолученныйАванс)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Задания.СчетФактура,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(Задания.СчетФактура КАК Документ.СчетФактураВыданныйАванс).ДокументОснование КАК Документ.СчетФактураПолученныйАванс).ДокументОснование
	|ИЗ
	|	РегистрСведений.ЗаданияКФормированиюДвиженийПоНДС КАК Задания
	|ГДЕ
	|	Задания.Организация = &Организация
	|	И Задания.СчетФактура ССЫЛКА Документ.СчетФактураВыданныйАванс
	|	И ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(Задания.СчетФактура КАК Документ.СчетФактураВыданныйАванс).ДокументОснование) = ТИП(Документ.СчетФактураПолученныйАванс)";
	
	Запрос = Новый Запрос(ТекстЗапросаПолученияИтоговыхДанных);
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка

			Организация = Выборка.Организация;
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Прочитать();
			
			Запрос.УстановитьПараметр("Организация", Организация);
			ОснованияСчетовФактур = Запрос.Выполнить().Выгрузить();
			ОснованияСчетовФактур.Индексы.Добавить("СчетФактура");
			
			Для Каждого СтрокаНабора Из НаборЗаписей Цикл
				Если ТипЗнч(СтрокаНабора.СчетФактура) = тип("ДокументСсылка.СчетФактураПолученныйАванс")
					Или ТипЗнч(СтрокаНабора.СчетФактура) = тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
						ОснованиеСчетаФактуры = ОснованияСчетовФактур.Найти(СтрокаНабора.СчетФактура);
						
						Если ОснованиеСчетаФактуры = Неопределено Тогда
							Шаблон = НСтр("ru = 'Не удалось определить ДокументОснование по документу %1 при обновлении регистра ""%2""'");
							ТекстСообщения = СтрШаблон(Шаблон, СтрокаНабора.СчетФактура, ПолноеИмяРегистра);
							
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;
						
						СтрокаНабора.СчетФактура = ОснованиеСчетаФактуры.ДокументОснование;
				КонецЕсли;
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				
				УникальныеЗаписи = НаборЗаписей.Выгрузить();
				УникальныеЗаписи.Свернуть("Месяц,СчетФактура,Организация,НомерЗадания");
				
				Если НаборЗаписей.Количество() <> УникальныеЗаписи.Количество() Тогда
					НаборЗаписей.Очистить();
					НаборЗаписей.Загрузить(УникальныеЗаписи);
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать обновить поле СчетФактура в регистр %1 по значению""%2"", по причине: %3'");
			ТекстСообщения =
				СтрШаблон(Шаблон,
					ПолноеИмяРегистра,
					Выборка.Организация,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, 
				, 
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#КонецОбласти

#КонецЕсли
