#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Заполнение РС.ОтносительныеКурсыВалют за текущий месяц в мнопольном режиме,
	// реализовано для возможности вводить новые финансовые документы при выполнении полного отложенного заполнения РС.ОтносительныеКурсыВалют
	// Таким образом при переходе на новую версию данные отбрабатываются в два этапа: сначала молопольно за текущий месяц, далее отложенно все оставщиеся записи
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ОтносительныеКурсыВалют.ОбработатьДанныеДляПереходаНаНовуюВерсиюМонопольно";
	Обработчик.Версия = "11.5.7.171";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f6cd04b4-abca-4aaf-ba9b-2ce57869d249");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр ""Относительные курсы валют"" по данным регистра ""Курсы валют"" за последний месяц'");
	
	// Полное отложенное заполнение РС.ОтносительныеКурсыВалют за исключением текущего месяца
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ОтносительныеКурсыВалют.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.171";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("65d9ec72-db56-4ed1-9544-66dc960427e1");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ОтносительныеКурсыВалют.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр ""Относительные курсы валют"" по данным регистра ""Курсы валют""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ОтносительныеКурсыВалют.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ОтносительныеКурсыВалют.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ОтносительныеКурсыВалют";
	
	БазоваяВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалют.Период КАК Период,
	|	КурсыВалют.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК ОтносительныеКурсыВалют
	|		ПО КурсыВалют.Период = ОтносительныеКурсыВалют.Период
	|			И КурсыВалют.Валюта = ОтносительныеКурсыВалют.Валюта
	|			И (ОтносительныеКурсыВалют.БазоваяВалюта = &БазоваяВалюта)
	|ГДЕ
	|	ОтносительныеКурсыВалют.Валюта ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("БазоваяВалюта", БазоваяВалюта);
	Данные = Запрос.Выполнить().Выгрузить();
	
	Данные.Колонки.Добавить("БазоваяВалюта");
	Данные.ЗаполнитьЗначения(БазоваяВалюта, "БазоваяВалюта");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ОтносительныеКурсыВалют;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТДанныеДляОбработки";
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДляОбработки.Период КАК Период,
	|	ДанныеДляОбработки.Валюта КАК Валюта,
	|	ДанныеДляОбработки.БазоваяВалюта КАК БазоваяВалюта
	|ИЗ
	|	ВТДанныеДляОбработки КАК ДанныеДляОбработки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				БлокировкаДанных = Новый БлокировкаДанных;
				
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.КурсыВалют");
				ЭлементБлокировкиДанных.УстановитьЗначение("Период", Выборка.Период);
				ЭлементБлокировкиДанных.УстановитьЗначение("Валюта", Выборка.Валюта);
				ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
				
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ОтносительныеКурсыВалют");
				ЭлементБлокировкиДанных.УстановитьЗначение("Период", Выборка.Период);
				ЭлементБлокировкиДанных.УстановитьЗначение("Валюта", Выборка.Валюта);
				ЭлементБлокировкиДанных.УстановитьЗначение("БазоваяВалюта", Выборка.БазоваяВалюта);
				ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
				
				БлокировкаДанных.Заблокировать();
				
				ДанныеРегистра = РегистрыСведений.КурсыВалют.СрезПоследних(Выборка.Период, Новый Структура("Валюта", Выборка.Валюта));
				
				НаборЗаписей = РегистрыСведений.ОтносительныеКурсыВалют.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
				НаборЗаписей.Отбор.Валюта.Установить(Выборка.Валюта);
				НаборЗаписей.Отбор.БазоваяВалюта.Установить(Выборка.БазоваяВалюта);
				
				Если ДанныеРегистра.Количество() > 0 Тогда
					
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Период = Выборка.Период;
					НоваяЗапись.Валюта = Выборка.Валюта;
					НоваяЗапись.БазоваяВалюта = Выборка.БазоваяВалюта;
					НоваяЗапись.КурсЧислитель = ДанныеРегистра[0].Курс;
					НоваяЗапись.КурсЗнаменатель = ДанныеРегистра[0].Кратность;
					
				КонецЕсли;
				
				// Добавляем допольнительтельное свойство, для последующего исключения выполнения
				//    обработки в процедуре ЗакрытиеМесяцаСервер.ПроверитьНеобходимостьПереоценки
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЗаписьПриОбновленииИнформационнойБазы");
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, Неопределено, ТекстСообщения);
				
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюМонопольно() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалют.Период КАК Период,
		|	КурсыВалют.Валюта КАК Валюта,
		|	КурсыВалют.Курс КАК КурсЧислитель,
		|	КурсыВалют.Кратность КАК КурсЗнаменатель,
		|	&БазоваяВалюта КАК БазоваяВалюта
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК ОтносительныеКурсыВалют
		|		ПО КурсыВалют.Период = ОтносительныеКурсыВалют.Период
		|			И КурсыВалют.Валюта = ОтносительныеКурсыВалют.Валюта
		|			И (ОтносительныеКурсыВалют.БазоваяВалюта = &БазоваяВалюта)
		|ГДЕ
		|	ОтносительныеКурсыВалют.Валюта ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|ИТОГИ ПО
		|	Валюта";
	
	Запрос.УстановитьПараметр("БазоваяВалюта", Константы.ВалютаРегламентированногоУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВалюта = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВалюта.Следующий() Цикл
		КоличествоЗаписей = 0;
	
		Выборка = ВыборкаВалюта.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если КоличествоЗаписей > 30 Тогда
				Прервать;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ОтносительныеКурсыВалют.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.Валюта.Установить(ВыборкаВалюта.Валюта);
			НаборЗаписей.Отбор.БазоваяВалюта.Установить(Выборка.БазоваяВалюта);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			// Добавляем допольнительтельное свойство, для последующего исключения выполнения
			//    обработки в процедуре ЗакрытиеМесяцаСервер.ПроверитьНеобходимостьПереоценки
			НаборЗаписей.ДополнительныеСвойства.Вставить("ЗаписьПриОбновленииИнформационнойБазы");
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			
			КоличествоЗаписей = КоличествоЗаписей + 1;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
