#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значения по умолчанию для ресурсов регистра.
// Имена ключей структуры должны строго соответствовать именам ресурсов регистра.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - структура значений ресурсов регистра.
Функция ЗначенияПоУмолчанию() Экспорт
	СтруктураЗначений = Новый Структура;
	
	СтруктураЗначений.Вставить("ИспользуетсяТрудНаемныхРаботников", Ложь);

	СтруктураЗначений.Вставить("СтавкаНалогаУСН", 6);
	СтруктураЗначений.Вставить("ИспользуетсяТрудНаемныхРаботниковНеТребуетОбновления", Истина);
	СтруктураЗначений.Вставить("ПрименяетсяУСНДоходыМинусРасходы", Ложь);
	СтруктураЗначений.Вставить("ОбъектНалогообложенияУСН", Перечисления.ОбъектыНалогообложенияПоУСН.Доходы);
	СтруктураЗначений.Вставить("УчетнаяПолитикаСуществует", Ложь);
	
	Возврат СтруктураЗначений
КонецФункции

// Возращает текст запроса по данным регистра.
// 
// Возвращаемое значение:
// 	Строка - Текст запроса.
Функция ТекстЗапросаДействующиеПараметрыНалоговУчетныхПолитик() Экспорт
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА ТаблицаСрезПоследних.Период ЕСТЬ NULL Тогда
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК УчетнаяПолитикаСуществует,
	|	ТаблицаСрезПоследних.Период КАК Период,
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация,
	|	ТаблицаСрезПоследних.СтавкаНалогаУСН КАК СтавкаНалогаУСН,
	|	ТаблицаСрезПоследних.ОбъектНалогообложенияУСН КАК ОбъектНалогообложенияУСН,
	|	ТаблицаСрезПоследних.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	ТаблицаСрезПоследних.БазаРаспределенияРасходовПоВидамДеятельности КАК БазаРаспределенияРасходовПоВидамДеятельности,
	|	ТаблицаСрезПоследних.РаздельныйУчетТоваров КАК РаздельныйУчетТоваров,
	|	ТаблицаСрезПоследних.ИспользуетсяТрудНаемныхРаботников КАК ИспользуетсяТрудНаемныхРаботников
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(&Период, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК ТаблицаСрезПоследних
	|		ПО ГоловныеОрганизации.Организация = ТаблицаСрезПоследних.Организация
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Формирует текстовое описание установленных параметров.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДатаДействия - Дата - период действия настроек.
// 	ДействующиеНастройки - Структура - действующие параметры учетной политики.
// Возвращаемое значение:
// 	Строка - Описание действующих параметров строкой.
Функция ОписаниеДействующихПараметров(Организация, ДатаДействия = Неопределено, ДействующиеНастройки = Неопределено) Экспорт
	
	Если ДействующиеНастройки = Неопределено Тогда
		ДействующиеНастройки = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
			"НастройкиУчетаУСН",
			Организация,
			ДатаДействия,
			Ложь);
	КонецЕсли;
	
	ДействующиеПараметрыНалогобложения = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик("НастройкиСистемыНалогообложения",
		Организация,
		КонецКвартала(ТекущаяДатаСеанса()),
		Истина);
	ПрименяетсяЕНВД = Ложь;
	Если ЗначениеЗаполнено(ДействующиеПараметрыНалогобложения) Тогда
		ПрименяетсяЕНВД = ДействующиеПараметрыНалогобложения.ПрименяетсяЕНВД;
	КонецЕсли;
	СтрокаШаблон = "%1: %2." + Символы.ПС;
	Если НЕ ЗначениеЗаполнено(ДействующиеНастройки) Тогда
		СтрокаОписанияНастроек = НСтр("ru='Не заданы параметры.'");
		Возврат СтрокаОписанияНастроек;
	КонецЕсли;
	СтрокаОписанияНастроек = СтрШаблон(СтрокаШаблон,
			НСтр("ru='Объект налогообложения УСН'"),
			ДействующиеНастройки.ОбъектНалогообложенияУСН);
	
	СтрокаОписанияНастроек = СтрокаОписанияНастроек 
		+ СтрШаблон(СтрокаШаблон, 
			НСтр("ru='Налоговая ставка'"),
			Строка(ДействующиеНастройки.СтавкаНалогаУСН)+"%");
			
	
	СтрокаОписанияНастроек = СтрокаОписанияНастроек 
		+ СтрШаблон(СтрокаШаблон, 
			НСтр("ru='Используется труд наемных работников'"),
			Строка(ДействующиеНастройки.ИспользуетсяТрудНаемныхРаботников));
	
	Возврат СтрокаОписанияНастроек
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкиУчетаУСН.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.4.51";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("574c382b-12ec-4faa-97d5-7bcc719cf6b0");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкиУчетаУСН.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр НастройкиУчетаУСН из настроек учетных политик организаций.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.УдалитьУчетныеПолитикиОрганизаций.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкиУчетаУСН.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.НастройкиУчетаУСН.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры
//++ Локализация

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.НастройкиУчетаУСН";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, КВАРТАЛ) КАК Период,
	|	ДанныеРегистра.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН КАК Настройки
	|		ПО (Настройки.Организация = ДанныеРегистра.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьУчетныеПолитикиОрганизаций КАК Политики
	|		ПО (ДанныеРегистра.УчетнаяПолитика = Политики.Ссылка)
	|ГДЕ
	|	Настройки.Организация ЕСТЬ NULL
	|	И НЕ Политики.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Настройки.Период, КВАРТАЛ) КАК Период,
	|	Настройки.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиУчетаУСН КАК Настройки
	|ГДЕ
	|	НЕ Настройки.РаздельныйУчетТоваров И Настройки.ПрименяетсяУСНДоходыМинусРасходы
	|	ИЛИ НЕ Настройки.ИспользуетсяТрудНаемныхРаботниковНеТребуетОбновления";
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НастройкиУчетаУСН;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТДанныеДляОбработки";
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДляОбработки.Период КАК Период,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляОбработки КАК ДанныеДляОбработки
	|		ПО ДанныеДляОбработки.Период = НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, КВАРТАЛ)
	|		И ДанныеДляОбработки.Организация = ДанныеРегистра.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН КАК Настройки
	|		ПО (Настройки.Организация = ДанныеДляОбработки.Организация)
	|ГДЕ
	|	Настройки.Организация ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Настройки.Период, КВАРТАЛ) КАК Период,
	|	Настройки.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.УдалитьУчетныеПолитикиОрганизаций.ПустаяСсылка) КАК УчетнаяПолитика
	|ИЗ
	|	РегистрСведений.НастройкиУчетаУСН КАК Настройки
	|ГДЕ
	|	НЕ Настройки.РаздельныйУчетТоваров И Настройки.ПрименяетсяУСНДоходыМинусРасходы
	|	ИЛИ НЕ Настройки.ИспользуетсяТрудНаемныхРаботниковНеТребуетОбновления
	|ИТОГИ
	|ПО
	|	УчетнаяПолитика";
	
	ВыборкаУчетнаяПолитика = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "УчетнаяПолитика");
	
	Пока ВыборкаУчетнаяПолитика.Следующий() Цикл

		НачатьТранзакцию();
	
		Попытка
			
			Если ВыборкаУчетнаяПолитика.УчетнаяПолитика.Пустая() Тогда
				
				Выборка = ВыборкаУчетнаяПолитика.Выбрать(ОбходРезультатаЗапроса.Прямой);
				
				Пока Выборка.Следующий() Цикл
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
					ЭлементБлокировки.УстановитьЗначение("Период", Выборка.Период);
					ЭлементБлокировки.УстановитьЗначение("Организация", Выборка.Организация);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					
					Блокировка.Заблокировать();
					
					НаборЗаписей = РегистрыСведений.НастройкиУчетаУСН.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
					НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
					
					НаборЗаписей.Прочитать();
					
					Для каждого СтрокаЗаписи Из НаборЗаписей Цикл
						
						СтрокаЗаписи.РаздельныйУчетТоваров = СтрокаЗаписи.ПрименяетсяУСНДоходыМинусРасходы;
						СтрокаЗаписи.ИспользуетсяТрудНаемныхРаботников = Истина;
						СтрокаЗаписи.ИспользуетсяТрудНаемныхРаботниковНеТребуетОбновления = Истина;
						
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
					
				КонецЦикла;
				
			Иначе
				БлокировкаУчетнаяПолитика = Новый БлокировкаДанных;
				
				ЭлементБлокировки = БлокировкаУчетнаяПолитика.Добавить("Справочник.УдалитьУчетныеПолитикиОрганизаций");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаУчетнаяПолитика.УчетнаяПолитика);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				
				БлокировкаУчетнаяПолитика.Заблокировать();
				
				ЗапросУчетнаяПолитика = Новый Запрос();
				ЗапросУчетнаяПолитика.Текст = "ВЫБРАТЬ
				|	УчетнаяПолитика.ОбъектНалогообложенияУСН,
				|	УчетнаяПолитика.СтавкаНалогаУСН,
				|	УчетнаяПолитика.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности КАК БазаРаспределенияРасходовПоВидамДеятельности
				|ИЗ
				|	Справочник.УдалитьУчетныеПолитикиОрганизаций КАК УчетнаяПолитика
				|ГДЕ
				|	УчетнаяПолитика.Ссылка = &УчетнаяПолитика";
				
				ЗапросУчетнаяПолитика.УстановитьПараметр("УчетнаяПолитика", ВыборкаУчетнаяПолитика.УчетнаяПолитика);
		
				РезультатЗапросаУчетнаяПолитика = ЗапросУчетнаяПолитика.Выполнить();
				
				Если РезультатЗапросаУчетнаяПолитика.Пустой() Тогда
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка получения настроек учетной политики ""%1"".'",
						ОбщегоНазначения.КодОсновногоЯзыка()), 
						ВыборкаУчетнаяПолитика.УчетнаяПолитика);
					ВызватьИсключение ТекстОшибки;
				Иначе
					НастройкаУчетнойПолитики = РезультатЗапросаУчетнаяПолитика.Выгрузить()[0];
				КонецЕсли;
				
				Выборка = ВыборкаУчетнаяПолитика.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
				Пока Выборка.Следующий() Цикл
						НаборЗаписей = РегистрыСведений.НастройкиУчетаУСН.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
						НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
						
						НоваяЗапись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
						ЗаполнитьЗначенияСвойств(НоваяЗапись, НастройкаУчетнойПолитики);
						НоваяЗапись.ПрименяетсяУСНДоходыМинусРасходы = НоваяЗапись.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
						НоваяЗапись.РаздельныйУчетТоваров = НоваяЗапись.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
						НоваяЗапись.ИспользуетсяТрудНаемныхРаботников = Истина;
						НоваяЗапись.ИспользуетсяТрудНаемныхРаботниковНеТребуетОбновления = Истина;
						ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
						
				КонецЦикла;
				
			КонецЕсли;
		
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, Неопределено, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
//-- Локализация

#КонецОбласти

#КонецЕсли
