#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Метод выводит в табличный документ предупреждение,
// если отчет формируетя по неактуальным данным
// Параметры:
//	Макет - ТабличныйДокумент - Макет, в который выводится предупреждение
//	ПараметрыРасчета - Структура - Свойства, в которых указаны данные о границах расчета.
Процедура ВывестиАктуальностьРасчета(Макет, ПараметрыРасчета) Экспорт
	Если ЗначениеЗаполнено(ПараметрыРасчета) И ПараметрыРасчета.Свойство("ГраницаВзаиморасчетов") Тогда
		Если ЗначениеЗаполнено(ПараметрыРасчета.ГраницаВзаиморасчетов) Тогда
			ТаблицаПредупреждение = Новый ТабличныйДокумент;
			ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
			Если Константы.АктуализироватьВзаиморасчетыПриФормированииОтчетов.Получить() Тогда
				ТекстПредупреждения = НСтр("ru ='Распределение расчетов выполнено до %ДатаАктуальности%. 
										|Запущено задание по распределению расчетов с %ДатаНачалаРаспределения% (требуется распределить расчеты для %КоличествоДокументов%). 
										|После распределения Вам будет предложено переформировать отчет.'");
			Иначе
				ТекстПредупреждения = НСтр("ru ='Распределение расчетов выполнено до %ДатаАктуальности%. 
										|Необходимо восстановить взаиморасчеты из формы закрытия месяца (пункт ""Формирование движений по расчетам с партнерами (контрагентами)"",
										|либо запустить регламентное задание ""Выполнение отложенных движений по расчетам с клиентами\поставщиками"".'");
			КонецЕсли;
			ДатаАктуальности = КонецМесяца(ПараметрыРасчета.ГраницаВзаиморасчетов - 1);
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаАктуальности%", Формат(ДатаАктуальности, "ДЛФ=D"));
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаНачалаРаспределения%", Формат(ПараметрыРасчета.ГраницаВзаиморасчетов, "ДЛФ=D"));
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%КоличествоДокументов%", ОбщегоНазначенияУТ.ЧислоДокументовПрописью(ПараметрыРасчета.КРасчету));
			ОбластьПредупреждение.Текст = ТекстПредупреждения;
			ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Макет.ВставитьОбласть(ОбластьПредупреждение, Макет.Область(1,1,1,1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		Иначе
			ПараметрыРасчета.Удалить("ГраницаВзаиморасчетов");
			ПараметрыРасчета.Удалить("НомерЗадания");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Метод возвращает значение константы "Номер задания",
// считанной при разделяемой блокировке.
//
// Возвращаемое значение:
//	Число - Номер текущего задания из константы "Номер задания к распределению расчетов с клиентами".
Функция ПолучитьНомерЗадания() Экспорт
	Возврат Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить();
КонецФункции

// Метод создает запись регистра на указанный период по всем аналитикам за месяц.
//
// Параметры:
//	ПериодЗадания   - Дата - Начало периода, для которого необходимо зарегистрировать задание к расчету.
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КРасчету.Организация КАК Организация,
	|	КРасчету.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Ключи.Организация
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = Ключи.Ссылка
	|	ГДЕ
	|		Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Расчеты.Активность
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыОфлайн.АналитикаУчетаПоПартнерам,
	|		Ключи.Организация
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыОфлайн
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|		ПО РасчетыОфлайн.АналитикаУчетаПоПартнерам = Ключи.Ссылка
	|	ГДЕ
	|		РасчетыОфлайн.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И РасчетыОфлайн.Активность
	|	) КАК КРасчету
	|");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодЗадания));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодЗадания));
	ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
	
	// Запишем задания
	НачатьТранзакцию();
	Попытка
		НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить();
		Для Каждого ТекущаяАналитика Из ТаблицаАналитик Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.СоздатьМенеджерЗаписи();
			НаборЗаписей.Месяц = НачалоМесяца(ПериодЗадания);
			НаборЗаписей.Организация = ТекущаяАналитика.Организация;
			НаборЗаписей.АналитикаУчетаПоПартнерам = ТекущаяАналитика.АналитикаУчетаПоПартнерам;
			НаборЗаписей.НомерЗадания = НомерЗадания;
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось записать задания к распределению расчетов с клиентами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя(),
										"Период",
										"РегламентныеОперации");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя(),
										"Период",
										"РегламентныеОперации");
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоличествоНеактуальныхДокументов(НачалоРасчета, КонецРасчета, АналитикиРасчета = Неопределено) Экспорт
	Запрос = Новый Запрос("
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КОЛИЧЕСТВО(Расчеты.Регистратор) КАК Количество
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ГДЕ
	|		Расчеты.Период МЕЖДУ &НачалоРасчета И &КонецРасчета
	|		И (Расчеты.АналитикаУчетаПоПартнерам В (&АналитикаУчетаПоПартнерам)
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|			ИЛИ &ПоВсемАналитикам)
	|		И Расчеты.Активность
	|");
	
	Запрос.УстановитьПараметр("НачалоРасчета", НачалоРасчета);
	Запрос.УстановитьПараметр("КонецРасчета", КонецРасчета);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикиРасчета.АналитикиУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ПоВсемАналитикам", НЕ Значениезаполнено(АналитикиРасчета.АналитикиУчетаПоПартнерам));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		КоличествоДокументов = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;
	Возврат КоличествоДокументов;
КонецФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.5.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7274a65c-9163-4640-8c55-b7f89ca78da9");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Объект расчетов""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Организация,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Месяц
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК ЗаданияКРаспределениюРасчетовСКлиентами
	|ГДЕ
	|	ЗаданияКРаспределениюРасчетовСКлиентами.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И (ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|			ГДЕ
	|				РасчетыСКлиентами.УдалитьЗаказКлиента = ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов
	|				И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = ЗаданияКРаспределениюРасчетовСКлиентами.АналитикаУчетаПоПартнерам)
	|		ИЛИ
	|		ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|			ГДЕ
	|				РасчетыСКлиентамиПоДокументам.УдалитьЗаказКлиента = ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов
	|				И РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам = ЗаданияКРаспределениюРасчетовСКлиентами.АналитикаУчетаПоПартнерам))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
			Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	1 КАК Приоритет,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Организация КАК Организация,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Месяц,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов КАК ИсточникОбъектаРасчетов,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ 
	|					РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|				ГДЕ РасчетыСКлиентами.УдалитьЗаказКлиента
	|						= ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов)
	|	ИЛИ ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|				ГДЕ РасчетыСКлиентамиПоДокументам.УдалитьЗаказКлиента 
	|						= ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов) КАК ОбъектРасчетовИспользуется,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК ЗаданияКРаспределениюРасчетовСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|			ПО ЗаданияКРаспределениюРасчетовСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|
	| 		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|			ПО Аналитика.Договор = Договоры.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ОбъектыРасчетов.Организация 		= Аналитика.Организация
	|				И ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов) = ТИП(Справочник.ДоговорыКонтрагентов)
	|							И Договоры.РазрешенаРаботаСДочернимиПартнерами
	|						ТОГДА Договоры.Партнер
	|					ИНАЧЕ Аналитика.Партнер
	|				КОНЕЦ = ОбъектыРасчетов.Партнер
	|				И ОбъектыРасчетов.Контрагент 	= Аналитика.Контрагент
	|				И ОбъектыРасчетов.ТипРасчетов 	= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И ОбъектыРасчетов.Объект 		= ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов
	|ГДЕ
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Организация = &Организация
	|		И ЗаданияКРаспределениюРасчетовСКлиентами.Месяц = &Месяц
	|		И НЕ ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	2 КАК Приоритет,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Организация КАК Организация,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Месяц,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов КАК ИсточникОбъектаРасчетов,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ 
	|					РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|				ГДЕ РасчетыСКлиентами.УдалитьЗаказКлиента
	|						= ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов)
	|	ИЛИ ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|				ГДЕ РасчетыСКлиентамиПоДокументам.УдалитьЗаказКлиента 
	|						= ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов) КАК ОбъектРасчетовИспользуется,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК ЗаданияКРаспределениюРасчетовСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) = ОбъектыРасчетов.ТипРасчетов
	|				И ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов = ОбъектыРасчетов.Объект
	|ГДЕ
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Организация = &Организация
	|		И ЗаданияКРаспределениюРасчетовСКлиентами.Месяц = &Месяц
	|		И НЕ ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	3 КАК Приоритет,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Организация КАК Организация,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Месяц,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов КАК ИсточникОбъектаРасчетов,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ЛОЖЬ КАК ОбъектРасчетовИспользуется,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК ЗаданияКРаспределениюРасчетовСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|			ПО ЗаданияКРаспределениюРасчетовСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ЗаданияКРаспределениюРасчетовСКлиентами.Организация = ОбъектыРасчетов.Организация
	|				И ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|				И ОбъектыРасчетов.Объект = НЕОПРЕДЕЛЕНО
	|				И ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) = ОбъектыРасчетов.ТипРасчетов
	|				И Аналитика.Контрагент = ОбъектыРасчетов.Контрагент
	|				И Аналитика.Партнер = ОбъектыРасчетов.Партнер
	|				И Аналитика.Договор = ОбъектыРасчетов.Договор
	|				И Аналитика.НаправлениеДеятельности = ОбъектыРасчетов.НаправлениеДеятельности
	|ГДЕ
	|	ЗаданияКРаспределениюРасчетовСКлиентами.Организация = &Организация
	|	И ЗаданияКРаспределениюРасчетовСКлиентами.Месяц = &Месяц
	|	И ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	
	Для Каждого ПорцияДанных Из ОбновляемыеДанные Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Организация", ПорцияДанных.Организация);
			ЭлементБлокировки.УстановитьЗначение("Месяц", ПорцияДанных.Месяц);
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Организация", ПорцияДанных.Организация);
			Запрос.УстановитьПараметр("Месяц", ПорцияДанных.Месяц);
			ОбъектыРасчетов = Запрос.Выполнить().Выгрузить();
			ОбъектыРасчетов.Индексы.Добавить("АналитикаУчетаПоПартнерам, ИсточникОбъектаРасчетов, ТолькоОстатки");
			
			НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ПорцияДанных.Организация);
			НаборЗаписей.Отбор.Месяц.Установить(ПорцияДанных.Месяц);
			НаборЗаписей.Прочитать();
			
			ЕстьОшибкаЗапонения = Ложь;
			ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
					СтруктураПоиска = Новый Структура("АналитикаУчетаПоПартнерам, ИсточникОбъектаРасчетов, Приоритет",
						ЗаписьНабора.АналитикаУчетаПоПартнерам,
						ЗаписьНабора.УдалитьОбъектРасчетов,
						1);
					НайденныйОбъектРасчетов = ОбъектыРасчетов.НайтиСтроки(СтруктураПоиска);
					
					Если НайденныйОбъектРасчетов.Количество() = 1
						И ЗначениеЗаполнено(НайденныйОбъектРасчетов[0].ОбъектРасчетов) Тогда 
						ЗаписьНабора.ОбъектРасчетов = НайденныйОбъектРасчетов[0].ОбъектРасчетов;
					Иначе
						СтруктураПоиска = Новый Структура("АналитикаУчетаПоПартнерам, ИсточникОбъектаРасчетов",
						ЗаписьНабора.АналитикаУчетаПоПартнерам,
						ЗаписьНабора.УдалитьОбъектРасчетов);
						НайденныйОбъектРасчетов = ОбъектыРасчетов.НайтиСтроки(СтруктураПоиска);
						
						НайденоНесколькоОбъектовРасчетов = Ложь;
					
						Если Не НайденныйОбъектРасчетов.Количество() Тогда
							Если ВсеОбъектыРасчетовСгенерированы Тогда
								ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не найден объект расчетов для истоника данных: %1'"),
									ЗаписьНабора.УдалитьОбъектРасчетов));
							Иначе
									ЕстьОшибкаЗапонения = Истина;
									Прервать;
							КонецЕсли;
						ИначеЕсли НайденныйОбъектРасчетов.Количество() = 1
							И ЗначениеЗаполнено(НайденныйОбъектРасчетов[0].ОбъектРасчетов) Тогда 
							ЗаписьНабора.ОбъектРасчетов = НайденныйОбъектРасчетов[0].ОбъектРасчетов;
						ИначеЕсли НайденныйОбъектРасчетов.Количество() = 2 Тогда
							Если НайденныйОбъектРасчетов[0].Приоритет <> НайденныйОбъектРасчетов[1].Приоритет Тогда
								Если ЗначениеЗаполнено(НайденныйОбъектРасчетов[0].ОбъектРасчетов) Тогда
									ЗаписьНабора.ОбъектРасчетов = НайденныйОбъектРасчетов[0].ОбъектРасчетов;
								ИначеЕсли ЗначениеЗаполнено(НайденныйОбъектРасчетов[1].ОбъектРасчетов) Тогда
									ЗаписьНабора.ОбъектРасчетов = НайденныйОбъектРасчетов[1].ОбъектРасчетов;
								Иначе
									Если НайденныйОбъектРасчетов[0].ОбъектРасчетовИспользуется 
										ИЛИ НайденныйОбъектРасчетов[1].ОбъектРасчетовИспользуется Тогда
											НайденоНесколькоОбъектовРасчетов = Истина;
									КонецЕсли;
								КонецЕсли;
							Иначе
								Если Не ЗначениеЗаполнено(ЗаписьНабора.УдалитьОбъектРасчетов) Тогда
									ЗаписьНабора.ОбъектРасчетов = НайденныйОбъектРасчетов[0].ОбъектРасчетов;
								Иначе
									НайденоНесколькоОбъектовРасчетов = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							СтруктураПоиска.Вставить("ТолькоОстатки", Ложь);
							
							НайденныйОбъектРасчетовНеТолькоОстатки = ОбъектыРасчетов.НайтиСтроки(СтруктураПоиска);
							Если НайденныйОбъектРасчетовНеТолькоОстатки.Количество() Тогда
								ЗаписьНабора.ОбъектРасчетов = НайденныйОбъектРасчетовНеТолькоОстатки[0].ОбъектРасчетов;
							Иначе
								ЗаписьНабора.ОбъектРасчетов = НайденныйОбъектРасчетов[0].ОбъектРасчетов;
							КонецЕсли;
							
						КонецЕсли;
						
						Если НайденоНесколькоОбъектовРасчетов Тогда
							Если ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ЗаписьНабора.УдалитьОбъектРасчетов)
								ИЛИ ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ЗаписьНабора.АналитикаУчетаПоПартнерам) Тогда
									ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не удалось заполнить объект расчетов наборе записей %1,
										|в источнике данных объекта расчетов %2, аналитика %3 обнаружена ссылка на несуществующий элемент.'"),
										ПолноеИмяРегистра,
										ЗаписьНабора.УдалитьОбъектРасчетов,
										ЗаписьНабора.АналитикаУчетаПоПартнерам);
									ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Ошибка,
										МетаданныеРегистра,
										,
										ТекстСообщения);
							Иначе
								ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Для для истоника данных: %1 найдено несколько объектов расчетов. Заполнение невозможно.'"),
									ЗаписьНабора.УдалитьОбъектРасчетов));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьОшибкаЗапонения Тогда
				Продолжить;
			КонецЕсли;
			
			Если НаборЗаписей.Модифицированность() Тогда
				НаборВТЗ = НаборЗаписей.Выгрузить();
				НаборВТЗ.Свернуть("Месяц,НомерЗадания,Организация,АналитикаУчетаПоПартнерам,ОбъектРасчетов,Документ,УдалитьОбъектРасчетов");
				НаборЗаписей.Загрузить(НаборВТЗ);

				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 , по причине: %2'");
			ТекстСообщения = СтрШаблон(Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				,
				ТекстСообщения);
		
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
