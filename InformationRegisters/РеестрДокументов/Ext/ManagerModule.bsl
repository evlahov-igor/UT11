#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.РеестрДокументов);
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам международного учета.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
КонецПроцедуры

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеестрДокументов = Неопределено;
	Если НЕ ТаблицыДляДвижений.Свойство("Таблица" + "РеестрДокументов", ТаблицаРеестрДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Набор.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Набор.Отбор.Ссылка.Установить(Документ);
	Набор.ЗагрузитьСОбработкой(ТаблицаРеестрДокументов);
	Набор.Записать();
	
	ОбновлениеИнформационнойБазыУТ.ОтметитьВыполнениеОбработкиИнтерактивно(Набор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Записывает в регистр данные по переданному разделителю записи.
//
// Параметры:
//  ТаблицыДляДвижений		 - Структура - содержит по ключу ТаблицыДляДвижений структуру
//  	имеющую ключ ТаблицаРеестрДокументов (ТаблицаЗначений).
//  РазделительЗаписи		 - Строка - измерение, по которому необходимо выполнить запись
//  ЗамещатьЗаписи			 - Булево - определяет режим замещения существующих записей разделителя. Истина - перед записью существующие
//		записи будут удалены. Ложь - записи будут дописаны к уже существующим в информационной базе записям.
//
Процедура ЗаписатьДанныеРазделителя(ТаблицыДляДвижений, РазделительЗаписи, ЗамещатьЗаписи = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.РазделительЗаписи.Установить(РазделительЗаписи);
	Набор.ЗагрузитьСОбработкой(ТаблицыДляДвижений.ТаблицаРеестрДокументов);
	Набор.Записать(ЗамещатьЗаписи);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

// Возвращает признак, того отражаются ли данные полученного объекта в реестре сведений или нет.
//
// Параметры:
//	ПроверяемыйОбъект - ДокументОбъект, ДокументСсылка, ДанныеФормыСтруктура, ОбъектМетаданных - 
//
// Возвращаемое значение:
//	Булево - Истина, если данные полученного объекта, отражаются в реестре сведений.
//
Функция ОбъектВключенВСоставДанныхРеестра(ПроверяемыйОбъект) Экспорт
	
	ТипЗначения = ТипЗнч(ПроверяемыйОбъект);
	Если ТипЗначения = Тип("ДанныеФормыСтруктура") Тогда
		Если Не ПроверяемыйОбъект.Свойство("Ссылка") Тогда
			Возврат Ложь;
		КонецЕсли;
		ТипСсылки = ТипЗнч(ПроверяемыйОбъект.Ссылка);
	Иначе	
		Если ТипЗначения = Тип("ОбъектМетаданных") Тогда
			МетаданныеЗначения = ПроверяемыйОбъект; // ОбъектМетаданныхДокумент
		Иначе
			МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗначения); // ОбъектМетаданныхДокумент
			
			Если МетаданныеЗначения = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеЗначения) Тогда
			Возврат Ложь;
		КонецЕсли;

		ТипСсылки = ТипЗнч(МетаданныеЗначения.СтандартныеРеквизиты.Ссылка.Тип.ПривестиЗначение());
	КонецЕсли;

	Возврат Метаданные.РегистрыСведений.РеестрДокументов.Измерения.Ссылка.Тип.СодержитТип(ТипСсылки);
	
КонецФункции

// Инициализирует и записывает данные документов, полученных объектов метаданных, в регистр сведений.
//
// Параметры:
//	ОбъектыМетаданных - Соответствие - объекты метаданных:
//		* Ключ		- ОбъектМетаданныхДокумент	- объект метаданных документа.
//		* Значение	- Неопределено				- пустое значение.
//
Процедура ОтразитьДанныеДокументовВРеестре(ОбъектыМетаданных) Экспорт
	
	ИменаОбъектов		= Новый Массив;
	СсылкиДокументов	= Новый Массив;
	
	Для Каждого ЭлементДанных Из ОбъектыМетаданных Цикл
		ОбъектДанных		= ЭлементДанных.Ключ;
		ПолноеИмяОбъекта	= ОбъектДанных.ПолноеИмя();
		
		ИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	КонецЦикла;
	
	НеиспользуемыеПоля = Новый Массив;
	НеиспользуемыеПоля.Добавить("Дополнительно");
	НеиспользуемыеПоля.Добавить("НомерПервичногоДокумента");
	
	Для Каждого ПолноеИмяОбъекта Из ИменаОбъектов Цикл
		
		ИмяДокумента = СтрРазделить(ПолноеИмяОбъекта, ".")[1];
		РезультатАдаптацииЗапроса = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру("РеестрДокументов");
		Регистраторы = ОбновлениеИнформационнойБазыУТ.ДанныеНезависимогоРегистраДляПерепроведения(
							РезультатАдаптацииЗапроса,
							"РегистрСведений.РеестрДокументов",
							ПолноеИмяОбъекта,
							НеиспользуемыеПоля);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СсылкиДокументов, Регистраторы.ВыгрузитьКолонку("Ссылка"));
		
	КонецЦикла;
	
	Для Каждого Ссылка Из СсылкиДокументов Цикл
		ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(Ссылка, "РеестрДокументов");
		РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, Ссылка, Неопределено, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает коллекцию типов, которые включены в измерение 'Ссылка'.
//
// Возвращаемое значение:
//	Массив Из Тип - коллекция типов, которые включены в измерение 'Ссылка'.
//
Функция ТипыДокументовРеестра() Экспорт
	
	ТипыСсылки = Метаданные.РегистрыСведений.РеестрДокументов.Измерения.Ссылка.Тип.Типы();
	
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.ВводОстатков"));
	//++ Локализация
	ИсключаемыеТипы.Очистить();
	//-- Локализация
	
	Если ИсключаемыеТипы.Количество() Тогда
		ТипыДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТипыСсылки, ИсключаемыеТипы);
	Иначе
		ТипыДокументов = ТипыСсылки;
	КонецЕсли;
	
	Возврат ТипыДокументов;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(Ссылка)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.8.105";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("22f04fae-835b-4553-94b3-4bf891ff0472");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр ""Реестр документов"" по данным относящихся к нему документов.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.АвансовыйОтчет.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктВыполненныхРабот.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктОРасхожденияхПослеПеремещения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.Бронирование.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатков.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковВзаиморасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковПрочихАктивовПассивов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковСПодотчетниками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровПоставщику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыемкаДенежныхСредствИзКассыККМ.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыкупВозвратнойТарыКлиентом.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыкупВозвратнойТарыУПоставщика.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыкупТоваровХранителем.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаВнутреннееПотребление.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаСборку.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказПоставщику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ИнвентаризационнаяОпись.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ИнвентаризацияНаличныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаПриобретения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.НачисленияКредитовИДепозитов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОперацияПоПлатежнойКарте.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОприходованиеИзлишковТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтгрузкаТоваровСХранения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтражениеРасхожденийПриИнкассацииДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетБанкаПоОперациямЭквайринга.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомитентуОЗакупках.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетОСписанииТоваровУХранителя.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПервичныйДокумент.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаТоваровХранителю.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПересортицаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПорчаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеТоваровНаСклад.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриемкаТоваровНаХранение.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриходныйКассовыйОрдер.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПрочиеДоходыРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РаспределениеПрочихЗатрат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СборкаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеНДСНаРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеНедостачТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеПринятыхНаХранениеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СчетНаОплатуКлиенту.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОприходованиеИзлишковТоваровУХранителя.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СчетФактураВыданныйАванс.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СчетФактураПолученныйАванс.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ПолноеИмя());
	//++ Локализация
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковТМЦВЭксплуатации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявлениеОВвозеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СчетФактураВыданный.ПолноеИмя());
	//-- Локализация
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СчетФактураВыданный.ОбработатьДанныеДляПереходаНаНовуюВерсиюТовары";
	НоваяСтрока.Порядок = "До";
	//-- Локализация
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	
	
#КонецОбласти

#Область ОбработатьДанныеДляПереходаНаНовуюВерсиюОРП

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюОРП";
	Обработчик.Версия = "11.5.7.147";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("51f09614-7c7d-4531-bb07-dba5fcb94452");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюОРП";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр ""Реестр документов"" по данным относящихся к нему документов (только отчеты о розничных продажах).'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

#КонецОбласти

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт 

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("ДатаДокументаИБ УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("ДатаДокументаИБ УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	#Область РегистрацияЧерезАдаптированныйТекстЗапросаДвиженийПоРегистру
	ОбрабатываемыеТипыДокументов = Новый Массив;
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаказКлиента");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаказНаВнутреннееПотребление");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаказНаПеремещение");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаказНаСборку");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.АвансовыйОтчет");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетКомиссионераОСписании");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетКомитентуОСписании");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.КорректировкаЗадолженности");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.СписаниеНДСНаРасходы");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.КорректировкаНазначенияТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетКомиссионера");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетКомитенту");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПрочиеДоходыРасходы");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.АктВыполненныхРабот");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.АктОРасхожденияхПослеПриемки");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.Бронирование");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВводОстатковВзаиморасчетов");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВводОстатковДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВводОстатковОПродажахЗаПрошлыеПериоды");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВводОстатковТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВводОстатковПрочихАктивовПассивов");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВводОстатковСПодотчетниками");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВнутреннееПотреблениеТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВозвратТоваровМеждуОрганизациями");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВозвратТоваровОтКлиента");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВозвратТоваровПоставщику");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВыкупВозвратнойТарыКлиентом");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВыкупВозвратнойТарыУПоставщика");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВыкупПринятыхНаХранениеТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВыкупТоваровХранителем");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаказКлиента");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаказНаВнутреннееПотребление");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаказНаПеремещение");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаказНаСборку");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаказПоставщику");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ИнвентаризационнаяОпись");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ИнвентаризацияНаличныхДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.КорректировкаПриобретения");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.КорректировкаРеализации");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.НачисленияКредитовИДепозитов");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОперацияПоПлатежнойКарте");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОприходованиеИзлишковТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтгрузкаТоваровСХранения");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтражениеРасхожденийПриИнкассацииДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетБанкаПоОперациямЭквайринга");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетКомитентуОЗакупках");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетОСписанииТоваровУХранителя");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетПоКомиссииМеждуОрганизациями");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПередачаТоваровМеждуОрганизациями");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПередачаТоваровХранителю");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПеремещениеТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПересортицаТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПорчаТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПоступлениеТоваровНаСклад");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПоступлениеТоваровОтХранителя");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПриемкаТоваровНаХранение");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПриобретениеУслугПрочихАктивов");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПриобретениеТоваровУслуг");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПриходныйКассовыйОрдер");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПрочееОприходованиеТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.РаспределениеПрочихЗатрат");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетБанкаПоОперациямЭквайринга");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОперацияПоПлатежнойКарте");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПриходныйКассовыйОрдер");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.СписаниеБезналичныхДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтгрузкаТоваровСХранения");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ИнвентаризацияНаличныхДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВнесениеДенежныхСредствВКассуККМ");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетОСписанииТоваровУХранителя");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПоступлениеТоваровНаСклад");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.СписаниеПринятыхНаХранениеТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВводОстатковТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПередачаТоваровХранителю");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВзаимозачетЗадолженности");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВыемкаДенежныхСредствИзКассыККМ");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтражениеРасхожденийПриИнкассацииДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.НачисленияКредитовИДепозитов");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.РасходныйКассовыйОрдер");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПриемкаТоваровНаХранение");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	
	ОбрабатываемыеТипыДокументов.Добавить("Документ.РеализацияТоваровУслуг");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.РеализацияУслугПрочихАктивов");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.СборкаТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.СписаниеБезналичныхДенежныхСредств");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.СписаниеНедостачТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.СписаниеПринятыхНаХранениеТоваров");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.СчетНаОплатуКлиенту");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОприходованиеИзлишковТоваровУХранителя");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.СчетФактураВыданныйАванс");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.СчетФактураПолученныйАванс");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ПервичныйДокумент");
	//++ Локализация
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ВводОстатков");
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ЗаявлениеОВвозеТоваров");
	//-- Локализация
	
	
	// Регистрация через АдаптированныйТекстЗапроса
	Для каждого ПолноеИмяДокумента Из ОбрабатываемыеТипыДокументов Цикл
		
		НеиспользуемыеПоля = Новый Массив;
		НеиспользуемыеПоля.Добавить("Дополнительно");
		НеиспользуемыеПоля.Добавить("РазделительЗаписи");
		НеиспользуемыеПоля.Добавить("НомерПервичногоДокумента");
		
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		РезультатАдаптацииЗапроса = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру("РеестрДокументов");
		Регистраторы = ОбновлениеИнформационнойБазыУТ.ДанныеНезависимогоРегистраДляПерепроведения(
			РезультатАдаптацииЗапроса, 
			"РегистрСведений.РеестрДокументов", 
			ПолноеИмяДокумента, 
			НеиспользуемыеПоля);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
		
	КонецЦикла;
	#КонецОбласти
	
	
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ОбрабатываемыеТипыДокументов, ",");
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
		
	ВсеКлючиОбработаны = Истина;
	
	ОбъектыМетаданных = Справочники.КлючиРеестраДокументов.ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
	ОбъектыМетаданных.Вставить(Метаданные.Справочники.КлючиРеестраДокументов);
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		ЕстьЗаблокированные = ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь,
			ОбъектМетаданных.Ключ.ПолноеИмя());
		Если ЕстьЗаблокированные Тогда
			ВсеКлючиОбработаны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ВсеКлючиОбработаны Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ИмяИзмеренияДляОтбора = "Ссылка";
	ДополнительныеПараметры.ЗаписыватьВОднойТранзакции = Ложь;
	ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей = Истина;
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	ВсеСделано = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Неопределено,
																			"РегистрСведений.РеестрДокументов",
																			Параметры.Очередь,
																			ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ВсеСделано;
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюОРП(Параметры) Экспорт 
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("ДатаДокументаИБ УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("ДатаДокументаИБ УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбрабатываемыеТипыДокументов = Новый Массив;
	ОбрабатываемыеТипыДокументов.Добавить("Документ.ОтчетОРозничныхПродажах");
	
	// Регистрация через АдаптированныйТекстЗапроса
	Для каждого ПолноеИмяДокумента Из ОбрабатываемыеТипыДокументов Цикл
		
		НеиспользуемыеПоля = Новый Массив;
		НеиспользуемыеПоля.Добавить("Дополнительно");
		НеиспользуемыеПоля.Добавить("РазделительЗаписи");
		НеиспользуемыеПоля.Добавить("НомерПервичногоДокумента");
		
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		РезультатАдаптацииЗапроса = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру("РеестрДокументов");
		Регистраторы = ОбновлениеИнформационнойБазыУТ.ДанныеНезависимогоРегистраДляПерепроведения(
							РезультатАдаптацииЗапроса, 
							"РегистрСведений.РеестрДокументов", 
							ПолноеИмяДокумента, 
							НеиспользуемыеПоля);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюОРП(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
