#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает настройку контроля обеспечения склада
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, для которого необходимо получить настройку контроля обеспечения
//	Возвращаемое значение:
//		Булево - настройка контроля обеспечения склада. Неопределено, если настройка отсутствует.
//
Функция НастройкаСклада(Склад) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Настройка.КонтролироватьСвободныеОстатки  КАК КонтролироватьСвободныеОстатки
	|ИЗ
	|	РегистрСведений.НастройкаКонтроляОбеспечения КАК Настройка
	|ГДЕ
	|	Настройка.Склад = &Склад
	|	И Настройка.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Настройка.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");

	Запрос.УстановитьПараметр("Склад", Склад);

	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Структура("КонтролироватьСвободныеОстатки");
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Сохраняет настройку контроля обеспечения склада
//
//	Параметры:
//		Склад                           - СправочникСсылка.Склады - склад, для которого необходимо сохранить настройку контроля обеспечения
//		КонтролироватьСвободныеОстатки  - Булево                  - необходимость контроля свободного остатка по складу, сохраняемое значение.
//                                                                  под потребности заказов с действием "К обеспечению".
//
Процедура УстановитьНастройку(Склад, КонтролироватьСвободныеОстатки) Экспорт

	НастройкаКонтроляСвободногоОстатка = НастройкаСклада(Склад);

	Если НастройкаКонтроляСвободногоОстатка.КонтролироватьСвободныеОстатки <> КонтролироватьСвободныеОстатки Тогда

		МенеджерЗаписи = РегистрыСведений.НастройкаКонтроляОбеспечения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Склад                                   = Склад;
		МенеджерЗаписи.КонтролироватьСвободныеОстатки          = КонтролироватьСвободныеОстатки;

		МенеджерЗаписи.Записать();

	КонецЕсли;

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Склад)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкаКонтроляОбеспечения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.8.106";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("77a2d1ed-ae8c-4cda-81d6-e75e48c96f6a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкаКонтроляОбеспечения.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака ""Перераспределять складские запасы""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкаКонтроляОбеспечения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Склады.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкаКонтроляОбеспечения.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Склады.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик обновления.
//  Параметры:
//   Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, "РегистрСведений.НастройкаКонтроляОбеспечения");
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, "РегистрСведений.НастройкаКонтроляОбеспечения");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
