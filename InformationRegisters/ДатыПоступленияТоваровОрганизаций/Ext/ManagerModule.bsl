#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ДатыПоступленияТоваровОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.8.63";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("93c9920d-a0c8-42bc-91d7-e956bc1cd320");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ДатыПоступленияТоваровОрганизаций.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет данными по документу ""Пересортица товаров"".'");
	//++ Локализация
	Обработчик.Комментарий = НСтр("ru = 'Заполняет данными по документам ""Пересортица товаров"" и ""Уведомление о ввозе прослеживаемых товаров"".'");
	//-- Локализация
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПересортицаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ДатыПоступленияТоваровОрганизаций.ПолноеИмя());
	//++ Локализация
	Читаемые.Добавить(Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ПолноеИмя());
	//-- Локализация
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ДатыПоступленияТоваровОрганизаций.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ДатыПоступленияТоваровОрганизаций.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПересортицаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт 
	
	ПолноеИмяРегистра = Метаданные.РегистрыСведений.ДатыПоступленияТоваровОрганизаций.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатыПоступленияТоваров.ВидЗапасов		КАК ВидЗапасов,
	|	ДатыПоступленияТоваров.Номенклатура		КАК Номенклатура,
	|	ДатыПоступленияТоваров.Характеристика	КАК Характеристика,
	|	ДатыПоступленияТоваров.Серия			КАК Серия,
	|	ДатыПоступленияТоваров.Назначение		КАК Назначение,
	|	ДатыПоступленияТоваров.НомерГТД			КАК НомерГТД
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЗапасыДокумента.ВидЗапасовОприходование	КАК ВидЗапасов,
	|		КлючиАналитики.Номенклатура				КАК Номенклатура,
	|		КлючиАналитики.Характеристика			КАК Характеристика,
	|		КлючиАналитики.Серия					КАК Серия,
	|		КлючиАналитики.Назначение				КАК Назначение,
	|		ЗапасыДокумента.НомерГТД				КАК НомерГТД
	|	ИЗ
	|		Документ.ПересортицаТоваров.ВидыЗапасов КАК ЗапасыДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПересортицаТоваров КАК ПересортицаТоваров
	|			ПО ЗапасыДокумента.Ссылка = ПересортицаТоваров.Ссылка
	|				И ПересортицаТоваров.Проведен
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
	|			ПО ЗапасыДокумента.АналитикаУчетаНоменклатурыОприходование = КлючиАналитики.Ссылка
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ДатыПоступленияТоваров
	|			ПО ЗапасыДокумента.ВидЗапасовОприходование = ДатыПоступленияТоваров.ВидЗапасов
	|				И КлючиАналитики.Номенклатура = ДатыПоступленияТоваров.Номенклатура
	|				И КлючиАналитики.Характеристика = ДатыПоступленияТоваров.Характеристика
	|				И КлючиАналитики.Серия = ДатыПоступленияТоваров.Серия
	|				И КлючиАналитики.Назначение = ДатыПоступленияТоваров.Назначение
	|				И ЗапасыДокумента.НомерГТД = ДатыПоступленияТоваров.НомерГТД
	|	
	|	ГДЕ
	|		ДатыПоступленияТоваров.ДатаПоступления ЕСТЬ NULL
	|		ИЛИ ДатыПоступленияТоваров.ДатаПоступления < ПересортицаТоваров.Дата
	//++ Локализация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТоварыДокумента.ВидЗапасов		КАК ВидЗапасов,
	|		ТоварыДокумента.Номенклатура	КАК Номенклатура,
	|		ТоварыДокумента.Характеристика	КАК Характеристика,
	|		ТоварыДокумента.Серия			КАК Серия,
	|		ТоварыДокумента.Назначение		КАК Назначение,
	|		ТоварыДокумента.НомерГТД		КАК НомерГТД
	|	ИЗ
	|		Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК ТоварыДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозе
	|			ПО ТоварыДокумента.Ссылка = УведомлениеОВвозе.Ссылка
	|				И УведомлениеОВвозе.Проведен
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ДатыПоступленияТоваров
	|			ПО ТоварыДокумента.ВидЗапасов = ДатыПоступленияТоваров.ВидЗапасов
	|				И ТоварыДокумента.Номенклатура = ДатыПоступленияТоваров.Номенклатура
	|				И ТоварыДокумента.Характеристика = ДатыПоступленияТоваров.Характеристика
	|				И ТоварыДокумента.Серия = ДатыПоступленияТоваров.Серия
	|				И ТоварыДокумента.Назначение = ДатыПоступленияТоваров.Назначение
	|				И ТоварыДокумента.НомерГТД = ДатыПоступленияТоваров.НомерГТД
	|	
	|	ГДЕ
	|		УведомлениеОВвозе.РНПТ <> """"
	|		И ТоварыДокумента.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|		И (ДатыПоступленияТоваров.ДатаПоступления ЕСТЬ NULL
	|			ИЛИ ДатыПоступленияТоваров.ДатаПоступления < УведомлениеОВвозе.Дата)
	//-- Локализация
	|	
	|	) КАК ДатыПоступленияТоваров";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИменаДокументов = Новый Массив;
	ИменаДокументов.Добавить(Метаданные.Документы.ПересортицаТоваров.ПолноеИмя());
	//++ Локализация
	ИменаДокументов.Добавить(Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ПолноеИмя());
	//-- Локализация
	
	ЕстьЗаблокированные = Ложь;
	
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		ЕстьЗаблокированные = ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(
								Параметры.Очередь,
								ИмяДокумента);
		
		Если ЕстьЗаблокированные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗаблокированные Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		
		Возврат;
	КонецЕсли;
	
	МетаданныеРегистра	= Метаданные.РегистрыСведений.ДатыПоступленияТоваровОрганизаций;
	ПолноеИмяРегистра	= МетаданныеРегистра.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ОбновляемыеДанные.Количество() Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь,
																							ПолноеИмяРегистра);
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДатыПоступленияТоваров.Дата)	КАК ДатаПоступления,
	|	ДатыПоступленияТоваров.ВидЗапасов		КАК ВидЗапасов,
	|	ДатыПоступленияТоваров.Номенклатура		КАК Номенклатура,
	|	ДатыПоступленияТоваров.Характеристика	КАК Характеристика,
	|	ДатыПоступленияТоваров.Серия			КАК Серия,
	|	ДатыПоступленияТоваров.Назначение		КАК Назначение,
	|	ДатыПоступленияТоваров.НомерГТД			КАК НомерГТД
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПересортицаТоваров.Дата					КАК Дата,
	|		ЗапасыДокумента.ВидЗапасовОприходование	КАК ВидЗапасов,
	|		КлючиАналитики.Номенклатура				КАК Номенклатура,
	|		КлючиАналитики.Характеристика			КАК Характеристика,
	|		КлючиАналитики.Серия					КАК Серия,
	|		КлючиАналитики.Назначение				КАК Назначение,
	|		ЗапасыДокумента.НомерГТД				КАК НомерГТД
	|	ИЗ
	|		Документ.ПересортицаТоваров.ВидыЗапасов КАК ЗапасыДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПересортицаТоваров КАК ПересортицаТоваров
	|			ПО ЗапасыДокумента.Ссылка = ПересортицаТоваров.Ссылка
	|				И ПересортицаТоваров.Проведен
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
	|			ПО ЗапасыДокумента.АналитикаУчетаНоменклатурыОприходование = КлючиАналитики.Ссылка
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ДатыПоступленияТоваров
	|			ПО ЗапасыДокумента.ВидЗапасовОприходование = ДатыПоступленияТоваров.ВидЗапасов
	|				И КлючиАналитики.Номенклатура = ДатыПоступленияТоваров.Номенклатура
	|				И КлючиАналитики.Характеристика = ДатыПоступленияТоваров.Характеристика
	|				И КлючиАналитики.Серия = ДатыПоступленияТоваров.Серия
	|				И КлючиАналитики.Назначение = ДатыПоступленияТоваров.Назначение
	|				И ЗапасыДокумента.НомерГТД = ДатыПоступленияТоваров.НомерГТД
	|	
	|	ГДЕ
	|		ДатыПоступленияТоваров.ДатаПоступления ЕСТЬ NULL
	|		ИЛИ ДатыПоступленияТоваров.ДатаПоступления < ПересортицаТоваров.Дата
	//++ Локализация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		УведомлениеОВвозе.Дата			КАК Дата,
	|		ТоварыДокумента.ВидЗапасов		КАК ВидЗапасов,
	|		ТоварыДокумента.Номенклатура	КАК Номенклатура,
	|		ТоварыДокумента.Характеристика	КАК Характеристика,
	|		ТоварыДокумента.Серия			КАК Серия,
	|		ТоварыДокумента.Назначение		КАК Назначение,
	|		ТоварыДокумента.НомерГТД		КАК НомерГТД
	|	ИЗ
	|		Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК ТоварыДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозе
	|			ПО ТоварыДокумента.Ссылка = УведомлениеОВвозе.Ссылка
	|				И УведомлениеОВвозе.Проведен
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ДатыПоступленияТоваров
	|			ПО ТоварыДокумента.ВидЗапасов = ДатыПоступленияТоваров.ВидЗапасов
	|				И ТоварыДокумента.Номенклатура = ДатыПоступленияТоваров.Номенклатура
	|				И ТоварыДокумента.Характеристика = ДатыПоступленияТоваров.Характеристика
	|				И ТоварыДокумента.Серия = ДатыПоступленияТоваров.Серия
	|				И ТоварыДокумента.Назначение = ДатыПоступленияТоваров.Назначение
	|				И ТоварыДокумента.НомерГТД = ДатыПоступленияТоваров.НомерГТД
	|	
	|	ГДЕ
	|		УведомлениеОВвозе.РНПТ <> """"
	|		И ТоварыДокумента.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|		И (ДатыПоступленияТоваров.ДатаПоступления ЕСТЬ NULL
	|			ИЛИ ДатыПоступленияТоваров.ДатаПоступления < УведомлениеОВвозе.Дата)
	//-- Локализация
	|	
	|	) КАК ДатыПоступленияТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидЗапасов,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	НомерГТД
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидЗапасов,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	НомерГТД";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбрабатываемыеДанные = РезультатЗапроса.Выгрузить();
	
	Для Каждого ПорцияДанных Из ОбрабатываемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборИзменен = Ложь;
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
				ИмяИзмерения = Измерение.Имя;
				ЭлементБлокировки.УстановитьЗначение(ИмяИзмерения, ПорцияДанных[ИмяИзмерения]);
			КонецЦикла;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ДатыПоступленияТоваровОрганизаций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидЗапасов.Установить(ПорцияДанных.ВидЗапасов);
			НаборЗаписей.Отбор.Номенклатура.Установить(ПорцияДанных.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ПорцияДанных.Характеристика);
			НаборЗаписей.Отбор.Серия.Установить(ПорцияДанных.Серия);
			НаборЗаписей.Отбор.Назначение.Установить(ПорцияДанных.Назначение);
			НаборЗаписей.Отбор.НомерГТД.Установить(ПорцияДанных.НомерГТД);
			
			НаборЗаписей.Прочитать();
			
			ЗаписьРегистра = ?(НаборЗаписей.Количество(),
								НаборЗаписей[0],
								НаборЗаписей.Добавить());
			
			Если ЗаписьРегистра.ДатаПоступления <> ПорцияДанных.ДатаПоступления Тогда
				НаборИзменен = Истина;
				
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ПорцияДанных);
			КонецЕсли;
			
			Если НаборИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %1 , по причине: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
										ПолноеИмяРегистра,
										ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									МетаданныеРегистра,
									,
									ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь,
																							ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
