
////////////////////////////////////////////////////
//// Модуль менеджера регистра сведений "КР_ИсходящиеДокументыСБИС"
//// Создан: 13.03.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1153
//// Разработка по ФДР С11.011, Интеграция УТ11 - СБИС

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// << 05.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153
Функция ЗаписатьСостояниеИсходящегоДокументаСБИС(ДокументСсылка, ТекстСообщения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// Получаем API СБИС
	// Если не найдено то ничего не делаем
	Результат = Неопределено;
	// --> Евлахов Игорь Николаевич (Начало) 17.01.2024
	// Задача #3518
	// *//--> Евлахов Игорь Николаевич (Начало было)
	//Если Не КР_ИнтеграцияСВнешнимиСистемами.ПолучитьМодульAPI("СБИС_API", Результат) Тогда 
	//	ТекстСообщения = Результат;
	//	Возврат Истина;
	//КонецЕсли;
	// *//<-- Евлахов Игорь Николаевич (Конец было)
	Если Не КР_ИнтеграцияСВнешнимиСистемами.ПолучитьВнешнююОбработкуСБИС(Результат) Тогда 
		Если Не КР_ИнтеграцияСВнешнимиСистемами.ПолучитьМодульAPI("СБИС_API", Результат) Тогда 
			ТекстСообщения = Результат;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 17.01.2024
	
	СБИС_API = Результат;  
	СБИС_API.СообщатьОшибкиПользователю = Ложь;
	СБИС_API.ЗаписыватьОшибкиВЖурналРегистрации = Истина;  
	
	// Готовим документ к выгрузке	
	Если Не СБИС_API.ПодготовитьДокументСБИС(ДокументСсылка, Результат) Тогда  
		ТекстСообщения = Результат;  
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	СБИСДокумент = Результат;  

	// Нам надо определить изменился или нет документ
	// Для этого серелизуем документ в JSON, берем MD5 и сверяем его с тем что был ранее
	ДанныеJSON = КР_ОбщегоНазначениеСервер.ДанныеВJSON(СБИСДокумент);  
	ХэшДокумент = КР_ОбщегоНазначениеСервер.MD5(ДанныеJSON);   

	Запись = РегистрыСведений.КР_ИсходящиеДокументыСБИС.СоздатьМенеджерЗаписи();
	Запись.Объект = ДокументСсылка;
	Запись.Прочитать();
	
	// Если запись уже есть и md5 документа совпадает то ничего не делаем
	// Иначе регистрируем к выгрузке новый "слепок"
	Если Запись.Выбран() 
		И Запись.ХэшДокумент = ХэшДокумент Тогда 
		Возврат Истина;
	КонецЕсли;
	
	// Готовим данные для записи
	ДокументХранилищеЗначения = Новый ХранилищеЗначения(СБИСДокумент);
	
	Запись.Объект = ДокументСсылка;           
	Запись.Состояние = Перечисления.КР_СостоянияСообщенийОбмена.Зарегистрировано;
	Запись.ДатаРегистрации = ТекущаяДатаСеанса();
	Запись.ДатаОтправки = Неопределено;   
	Запись.ДокументХранилищеЗначения = ДокументХранилищеЗначения;
	Запись.ХэшДокумент = ХэшДокумент;
	Запись.Записать();           
	
	ПроверитьСообщитьОНеобходимостиВыгрузитьЛистКассовойКниги(ДокументСсылка);
	
	Возврат Истина;
	
КонецФункции // >> 05.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153

Процедура УдалитьСостояниеИсходящегоДокументаСБИС(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КР_ИсходящиеДокументыСБИС.Объект КАК Документ
	|ИЗ
	|	РегистрСведений.КР_ИсходящиеДокументыСБИС КАК КР_ИсходящиеДокументыСБИС
	|ГДЕ
	|	КР_ИсходящиеДокументыСБИС.Объект = &Документ
	|	И КР_ИсходящиеДокументыСБИС.Состояние = ЗНАЧЕНИЕ(Перечисление.КР_СостоянияСообщенийОбмена.Ошибка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КР_ИсходящиеДокументыСБИС.Объект
	|ИЗ
	|	РегистрСведений.КР_ИсходящиеДокументыСБИС КАК КР_ИсходящиеДокументыСБИС
	|ГДЕ
	|	КР_ИсходящиеДокументыСБИС.Объект = &Документ
	|	И КР_ИсходящиеДокументыСБИС.Состояние = ЗНАЧЕНИЕ(Перечисление.КР_СостоянияСообщенийОбмена.Отправлено)
	|	И НЕ КР_ИсходящиеДокументыСБИС.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.КР_ИсходящиеДокументыСБИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
	НаборЗаписей.Записать();
	
	ПроверитьСообщитьОНеобходимостиВыгрузитьЛистКассовойКниги(ДокументСсылка);
	
КонецПроцедуры

Функция ЕстьСостояниеИсходящегоДокументаСБИС(Документ, Состояние = Неопределено) Экспорт
	
	Состояние = Перечисления.КР_СостоянияСообщенийОбмена.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КР_ИсходящиеДокументыСБИС.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.КР_ИсходящиеДокументыСБИС КАК КР_ИсходящиеДокументыСБИС
	|ГДЕ
	|	КР_ИсходящиеДокументыСБИС.Объект = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Состояние = Выборка.Состояние;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// << 07.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153
Функция ЕстьНеВыгруженныеДокументыВСбис(МассивСсылок, НеВыгруженныеДокументы = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	СписокСсылок = Новый СписокЗначений;
	СписокСсылок.ТипЗначения = Новый ОписаниеТипов(
		"ДокументСсылка.ПриходныйКассовыйОрдер,ДокументСсылка.РасходныйКассовыйОрдер,ДокументСсылка.ЛистКассовойКниги");
	СписокСсылок.ЗагрузитьЗначения(МассивСсылок);   
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Значение КАК Ссылка
	|ПОМЕСТИТЬ СписокСсылок
	|ИЗ
	|	&СписокСсылок КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСсылок.Ссылка КАК Ссылка
	|ИЗ
	|	СписокСсылок КАК СписокСсылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КР_ИсходящиеДокументыСБИС КАК КР_ИсходящиеДокументыСБИС
	|		ПО СписокСсылок.Ссылка = КР_ИсходящиеДокументыСБИС.Объект
	|			И (КР_ИсходящиеДокументыСБИС.Состояние = ЗНАЧЕНИЕ(Перечисление.КР_СостоянияСообщенийОбмена.Отправлено))
	|ГДЕ
	|	КР_ИсходящиеДокументыСБИС.Состояние ЕСТЬ NULL");     
	
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	РезультатЗапроса = Запрос.Выполнить();  
	
	НеВыгруженныеДокументы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат ЗначениеЗаполнено(НеВыгруженныеДокументы);

КонецФункции // >> 07.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153

// << 07.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153
Функция ПроверитьОтправитьДокументВСБИС(ДокументСсылка, Результат) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.КР_ИсходящиеДокументыСБИС.СоздатьМенеджерЗаписи();
	Запись.Объект = ДокументСсылка;
	Запись.Прочитать(); 
	
	НаборСостояний = Перечисления.КР_СостоянияСообщенийОбмена;
	МассивСостоянийКОбработке = Новый Массив;
	МассивСостоянийКОбработке.Добавить(НаборСостояний.Зарегистрировано);
	МассивСостоянийКОбработке.Добавить(НаборСостояний.Ошибка); 
	
	Если Не Запись.Выбран() 
		Или МассивСостоянийКОбработке.Найти(Запись.Состояние) = Неопределено Тогда 
		Результат = НСтр("ru = 'Для документа %1 отправка в СБИС не требуется'");
		Результат = СтрШаблон(Результат, ДокументСсылка);
		Возврат Истина;
	КонецЕсли;
	
	// Для Листа кассовой книги все документы в списке должны быть выгружены
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЛистКассовойКниги") Тогда
		МассивСсылок = ДокументСсылка.КассовыеОрдера.Выгрузить( , "Документ").ВыгрузитьКолонку(0);	
		Если ЕстьНеВыгруженныеДокументыВСбис(МассивСсылок) Тогда 
			Результат = НСтр("ru = 'Перед отправкой в СБИС документа %1 "
				+ "необходимо отправить в СБИС все связанные ПКО и РКО'");
			Результат = СтрШаблон(Результат, ДокументСсылка);
			Возврат Ложь; 
		КонецЕсли;	
	КонецЕсли;	
	
	// Получаем API и отправляем в СБИС
	
	// --> Евлахов Игорь Николаевич (Начало) 17.01.2024
	// Задача #3518
	// *//--> Евлахов Игорь Николаевич (Начало было)
	//Если Не КР_ИнтеграцияСВнешнимиСистемами.ПолучитьМодульAPI("СБИС_API", Результат) Тогда 
	//	Возврат Ложь;
	//КонецЕсли;
	// *//<-- Евлахов Игорь Николаевич (Конец было)
	Если Не КР_ИнтеграцияСВнешнимиСистемами.ПолучитьВнешнююОбработкуСБИС(Результат) Тогда 
		Если Не КР_ИнтеграцияСВнешнимиСистемами.ПолучитьМодульAPI("СБИС_API", Результат) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 17.01.2024
	
	СБИС_API = Результат;  
	СБИС_API.СообщатьОшибкиПользователю = Ложь;
	СБИС_API.ЗаписыватьОшибкиВЖурналРегистрации = Истина;
	
	// Удалим накопленные сеансовые сообщения
	ПолучитьСообщенияПользователю(Истина);
	
	// Документ в подготовленном виде уже есть в записи
	// Подготовлен при записи в рс 
	СБИСДокумент = Запись.ДокументХранилищеЗначения.Получить();
	Если СБИСДокумент = Неопределено Тогда 
		Результат = НСтр("ru = 'Не правильно заполнена запись регистра исходящие документы СБИС.
			|Перепроведите документ'");
		ЗарегистрироватьСостояниеОтправкиИсходящегоДокумента(
			Запись, НаборСостояний.Ошибка, Результат);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СБИС_API.ОтправитьДокументВСБИС(СБИСДокумент, Результат) Тогда 
		ЗарегистрироватьСостояниеОтправкиИсходящегоДокумента(
			Запись, НаборСостояний.Ошибка, Результат);
		Возврат Ложь;
	КонецЕсли;
	
	ЗарегистрироватьСостояниеОтправкиИсходящегоДокумента(
		Запись, НаборСостояний.Отправлено);
		
		
	СообщениеСГиперссылкой = Новый Структура;	
	СообщениеСГиперссылкой.Вставить("ТекстСообщения", 
		НСтр("ru = 'Документ выгружен в СБИС. Нажмите для перехода к подписанию'"));
	СообщениеСГиперссылкой.Вставить("Гиперссылка", Результат);
	
	Результат = СообщениеСГиперссылкой;
		
	Возврат Истина;
	
КонецФункции // >> 07.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153

#КонецОбласти  

#Область ПрочиеПроцедурыИФункции

// << 07.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153
Процедура ПроверитьСообщитьОНеобходимостиВыгрузитьЛистКассовойКниги(ДокументСсылка)  
	
	// Если сушеструет проведенный Лист кассовый книги
	//	то напомним что его надо переформировать
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЛистКассовойКниги.КассовыеОрдера КАК Т
	|ГДЕ
	|	Т.Документ = &КассовыйОрдер
	|	И Т.Ссылка.Проведен");
	Запрос.УстановитьПараметр("КассовыйОрдер", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ШаблонСообщения = НСтр("ru = 'Необходимо переформировать и отправить в СБИС %1'");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаДетальныеЗаписи.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;	
	
КонецПроцедуры // >> 07.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153

// << 07.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153
Процедура ЗарегистрироватьСостояниеОтправкиИсходящегоДокумента(Запись, Состояние, ТекстСообщения = Неопределено)

	Запись.Логирование = ТекстСообщения;
	Запись.Состояние = Состояние;
	Если Состояние = Перечисления.КР_СостоянияСообщенийОбмена.Отправлено Тогда 
		Запись.ДатаОтправки = ТекущаяДатаСеанса();
	КонецЕсли;	

	МассивСообщений = Новый Массив;

	МассивСообщенийСеанса = ПолучитьСообщенияПользователю(Истина);
	Если МассивСообщенийСеанса.Количество() Тогда
		Для Каждого СообщениеПользователю Из МассивСообщенийСеанса Цикл
			МассивСообщений.Добавить(СообщениеПользователю.Текст);
		КонецЦикла;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда 
		МассивСообщений.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Запись.Логирование = СтрСоединить(МассивСообщений, Символы.ПС);   
	
	Запись.Записать();
	
КонецПроцедуры // >> 07.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153

#КонецОбласти

#КонецЕсли
