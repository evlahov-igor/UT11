
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительности.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительностиКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаписьОшибочныеСообщения = ТекущийОбъект.ОшибочныеСообщения.Получить();	
	Если ТипЗнч(ЗаписьОшибочныеСообщения) = Тип("ТаблицаЗначений") Тогда
		ОшибочныеСообщения.Загрузить(ЗаписьОшибочныеСообщения);		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОшибочныеСообщения = Новый ХранилищеЗначения(ОшибочныеСообщения.Выгрузить(), Новый СжатиеДанных(9));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработатьСообщение(Команда)
	ОбработатьСообщениеНаСервере();
	Элементы.ОшибочныеСообщения.Обновить();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьСообщениеНаСервере()
	
	ТекСтрока = Элементы.ОшибочныеСообщения.ТекущаяСтрока; 
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = ОшибочныеСообщения.НайтиПоИдентификатору(ТекСтрока);
	
	ИнтеграционнаяИнформация = Новый Структура;
	ИнтеграционнаяИнформация.Вставить("Логирование", "");
	ИнтеграционнаяИнформация.Вставить("ЕстьОшибка", Ложь);
	ИнтеграционнаяИнформация.Вставить("ПолученоСообщений", 0);
	ИнтеграционнаяИнформация.Вставить("ОтправленоСообщений", 0);
	ИнтеграционнаяИнформация.Вставить("КоличествоОшибок", 0);
	ИнтеграционнаяИнформация.Вставить("УточненноеСостояние", Неопределено);
	ИнтеграционнаяИнформация.Вставить("СобытиеЖурналаРегистрации", "RabbitMQ.ИнтеграционнаяИнформация");
// << 18.12.2023 Петухов А.В., Фактор, #3530
	ИнтеграционнаяИнформация.Вставить("ЕстьСообщенияОтСебя", Ложь);
// >> 18.12.2023 Петухов А.В., Фактор, #3530
	
	ДанныеИБ = КР_ОбменRabbitОбщиеМеханизмыПовтИсп.ПолучитьТекущуюИнформационнуюБазу();
	ТекущаяИБ = ДанныеИБ.Ссылка;
	НастройкиПодключения = КР_ОбменRabbitОбщиеМеханизмыПовтИсп.ПолучитьНастройкиПодключенияКRabbit(ТекущаяИБ);
	
	ИнтеграционнаяИнформация.Вставить("ТекущаяИБ", ТекущаяИБ);
	ИнтеграционнаяИнформация.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	Если КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьВходящееСообщение(
			ТекДанные.ИмяОчереди, 
			ТекДанные.ВходящееСообщение, 
			ИнтеграционнаяИнформация,
			ТекДанные.ТекстОшибки) Тогда			
			
		ТекСтрока = ОшибочныеСообщения.НайтиПоИдентификатору(ТекДанные.ПолучитьИдентификатор());
		ОшибочныеСообщения.Удалить(ТекСтрока);
		
		Запись.ПолученоСообщений = Запись.ПолученоСообщений + 1;
		Запись.КоличествоОшибок = Запись.КоличествоОшибок - 1;
			
	КонецЕсли;
	
	Записать();
	
КонецПроцедуры

#КонецОбласти
