#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значения по умолчанию для ресурсов регистра.
// Имена ключей структуры должны строго соответствовать именам ресурсов регистра.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - структура значений ресурсов регистра.
Функция ЗначенияПоУмолчанию() Экспорт
	
	СтруктураЗначений = Новый Структура;
	
	СтруктураЗначений.Вставить("ПлательщикНДС", ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"));
	СтруктураЗначений.Вставить("РаздельныйУчетТоваровПоНалогообложениюНДС", Ложь);
	СтруктураЗначений.Вставить("РаздельныйУчетВНАПоНалогообложениюНДС", Ложь);
	СтруктураЗначений.Вставить("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС", Ложь);
	СтруктураЗначений.Вставить("ПериодичностьРаспределенияНДС", Перечисления.Периодичность.Квартал);
	СтруктураЗначений.Вставить("БазаНДС", Перечисления.ВидыБазыНДС.ВыручкаТекущегоКвартала);
	СтруктураЗначений.Вставить("ПравилоОтбораАвансовДляРегистрацииСчетовФактур", Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеДня);
	СтруктураЗначений.Вставить("УчетнаяПолитикаСуществует", Ложь);
	СтруктураЗначений.Вставить("ПериодичностьФормированияВычетовИВосстановленийНДС", Перечисления.Периодичность.Месяц);
	
	УчетНДСЛокализация.ДополнитьОписаниеНастроекУчетаНДСПоОрганизации(СтруктураЗначений);
	
	Возврат СтруктураЗначений;
	
КонецФункции

// Возращает текст запроса по данным регистра.
// 
// Возвращаемое значение:
// 	Строка - Текст запроса.
Функция ТекстЗапросаДействующиеПараметрыНалоговУчетныхПолитик() Экспорт
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА Таблица.Период ЕСТЬ NULL Тогда
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК УчетнаяПолитикаСуществует,
	|	Таблица.Период КАК Период,
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС.СрезПоследних(&Период, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК Таблица
	|		ПО ГоловныеОрганизации.Организация = Таблица.Организация
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ВыбираемыеПоля = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля;
	ОписаниеНастроек = ЗначенияПоУмолчанию();
	ОписаниеНастроек.Удалить("УчетнаяПолитикаСуществует");
	Для каждого Настройка Из ОписаниеНастроек Цикл
		ВыбираемыеПоля.Добавить(СтрШаблон("Таблица.%1", Настройка.Ключ));
	КонецЦикла;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	Возврат ТекстЗапроса
	
КонецФункции

// Формирует текстовое описание установленных параметров.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДатаДействия - Дата - период действия настроек.
// 	ДействующиеНастройки - Структура - действующие параметры учетной политики.
// Возвращаемое значение:
// 	Строка - Описание действующих параметров строкой.
Функция ОписаниеДействующихПараметров(Организация, ДатаДействия = Неопределено, ДействующиеНастройки = Неопределено) Экспорт
	
	СтрокаОписанияНастроек = "";
	
	Если ДействующиеНастройки = Неопределено Тогда
		ДействующиеНастройки = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
			"НастройкиУчетаНДС",
			Организация,
			ДатаДействия,
			Ложь);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДействующиеНастройки) Тогда
		СтрокаОписанияНастроек = НСтр("ru='Не заданы параметры.'");
		Возврат СтрокаОписанияНастроек;
	КонецЕсли;

	СтрокаШаблон = "%1: %2." + Символы.ПС;
	СтрокаШаблонБулево = "%1." + Символы.ПС;
	МассивСтрокОписанияПараметров = Новый Массив;  
	Если ДействующиеНастройки.ПлательщикНДС Тогда
		МассивСтрокОписанияПараметров.Добавить(
			СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Организация является плательщиком НДС'")));
		МассивСтрокОписанияПараметров.Добавить(
			СтрШаблон(СтрокаШаблон,
				НСтр("ru = 'Правило отбора авансов'"),
				ДействующиеНастройки.ПравилоОтбораАвансовДляРегистрацииСчетовФактур));
		Если ДействующиеНастройки.РаздельныйУчетТоваровПоНалогообложениюНДС Тогда
			МассивСтрокОписанияПараметров.Добавить(СтрШаблон(СтрокаШаблонБулево, НСтр("ru='Используется раздельный учет НДС'")));
		КонецЕсли;
	Иначе
		МассивСтрокОписанияПараметров.Добавить(СтрШаблон(СтрокаШаблонБулево, НСтр("ru='Организация не является плательщиком НДС'")));
	КонецЕсли;
	
	УчетНДСЛокализация.ДополнитьОписаниеДействующихНастроекУчетаНДС(МассивСтрокОписанияПараметров, ДействующиеНастройки);
	
	СтрокаОписанияНастроек = СтрСоединить(МассивСтрокОписанияПараметров, Символы.ВК);
	
	Возврат СтрокаОписанияНастроек
	
КонецФункции

// Возвращает параметры выбора статей и аналитик.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которой выполняется настройка
//  Дата - Дата - Период, на который выполняется настройка
//  ВариантУчетаНДСПриИзмененииВидаДеятельности - ПеречислениеСсылка.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую - Вариант учета НДС
//  
// Возвращаемое значение:
//  Массив - Параметры выбора статей и аналитик (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики).
//
Функция ПараметрыВыбораСтатейИАналитик(Организация, Дата, ВариантУчетаНДСПриИзмененииВидаДеятельности) Экспорт
	
	ПараметрыСистемыНалогообложения = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
			"НастройкиСистемыНалогообложения", Организация, Дата, Истина);
	
	МассивПараметров = Новый Массив;
	
	#Область СтатьяРасходовНеНДС
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Запись";
	ПараметрыВыбора.Статья      = "СтатьяРасходовНеНДС";
	
	ПараметрыВыбора.ДоступностьПоОперации = 
		(ВариантУчетаНДСПриИзмененииВидаДеятельности = Перечисления.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую.ВключатьВПрочиеРасходы
			ИЛИ ВариантУчетаНДСПриИзмененииВидаДеятельности = Перечисления.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую.ВключатьВСтоимостьИлиРасходыВЗависимостиОтПериода);
	ПараметрыВыбора.СкрыватьСтатьюНедоступнуюПоОперации = Ложь;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовНеНДС";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяЗатратНеНДС");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовНеНДС");
	
	МассивПараметров.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	#Область СтатьяРасходовЕНВД
	ПараметрыСистемыНалогообложения = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
			"НастройкиСистемыНалогообложения", Организация, Дата, Истина);
	Если ПараметрыСистемыНалогообложения = Неопределено Тогда
		ПрименяетсяЕНВД = Ложь;
	Иначе
		ПрименяетсяЕНВД = ПараметрыСистемыНалогообложения.ПрименяетсяЕНВД;
	КонецЕсли;
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Запись";
	ПараметрыВыбора.Статья      = "СтатьяРасходовЕНВД";
	ПараметрыВыбора.ДоступностьПоОперации = ПрименяетсяЕНВД
		И (ВариантУчетаНДСПриИзмененииВидаДеятельности = Перечисления.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую.ВключатьВПрочиеРасходы
			ИЛИ ВариантУчетаНДСПриИзмененииВидаДеятельности = Перечисления.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую.ВключатьВСтоимостьИлиРасходыВЗависимостиОтПериода);
	ПараметрыВыбора.СкрыватьСтатьюНедоступнуюПоОперации = Ложь;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовЕНВД";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяЗатратЕНВД");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовЕНВД");
	
	МассивПараметров.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	#Область СтатьяРасходовСписаниеНДС
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Запись";
	ПараметрыВыбора.Статья      = "СтатьяРасходовСписаниеНДС";
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовСписаниеНДС";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовСписаниеНДС");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовСписаниеНДС");
	
	МассивПараметров.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	Возврат МассивПараметров;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаЗаписи" Тогда
		Если ПолучитьФункциональнуюОпцию("ЛокализацияРФ") Тогда
			ВыбраннаяФорма = "ФормаЗаписиРФ";
			СтандартнаяОбработка = Ложь; 
		Иначе
			ВыбраннаяФорма = "ФормаЗаписи";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияУТ(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкиУчетаНДС.ОбработатьНезаполненныеДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.112";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4adaa4ef-87ac-4115-9d30-dea4726e596e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкиУчетаНДС.ЗарегистрироватьНезаполненныеДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Дозаполняет ресурсы регистра %1 значениями по умолчанию.'");
	Обработчик.Комментарий = СтрШаблон(Обработчик.Комментарий, "НастройкиУчетаНДС");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкиУчетаНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкиУчетаНДС.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.НастройкиУчетаНДС.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьНезаполненныеДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.НастройкиУчетаНДС";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Период КАК Период,
	|	Настройки.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК Настройки
	|ГДЕ
	|	Настройки.ПериодичностьРаспределенияНДС = ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)
	|
	//++ Локализация
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Настройки.Период КАК Период,
	|	Настройки.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК Настройки
	|ГДЕ
	|	Настройки.РаздельныйУчетВНАПоНалогообложениюНДС <> Настройки.РаздельныйУчетТоваровПоНалогообложениюНДС
	//-- Локализация
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Настройки.Период КАК Период,
	|	Настройки.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК Настройки
	|ГДЕ
	|	Настройки.БазаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыБазыНДС.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Настройки.Период КАК Период,
	|	Настройки.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК Настройки
	|ГДЕ
	|	Настройки.ПериодичностьФормированияВычетовИВосстановленийНДС = ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)";
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьНезаполненныеДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НастройкиУчетаНДС;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	ВыборкаПоИзмерениям = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
							Параметры.Очередь, ПолноеИмяОбъекта);
							
	Пока ВыборкаПоИзмерениям.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Период", ВыборкаПоИзмерениям.Период);
			ЭлементБлокировки.УстановитьЗначение("Организация", ВыборкаПоИзмерениям.Организация);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.НастройкиУчетаНДС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ВыборкаПоИзмерениям.Период);
			НаборЗаписей.Отбор.Организация.Установить(ВыборкаПоИзмерениям.Организация);
			НаборЗаписей.Прочитать();
			НаборИзменен = Ложь;
			Для каждого ЗаписьРегистра Из НаборЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.ПериодичностьРаспределенияНДС) Тогда
					ЗаписьРегистра.ПериодичностьРаспределенияНДС = Перечисления.Периодичность.Квартал;
					НаборИзменен = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.БазаНДС) Тогда
					ЗаписьРегистра.БазаНДС = Перечисления.ВидыБазыНДС.ВыручкаТекущегоКвартала;
					НаборИзменен = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.ПериодичностьФормированияВычетовИВосстановленийНДС) Тогда
					ЗаписьРегистра.ПериодичностьФормированияВычетовИВосстановленийНДС = Перечисления.Периодичность.Месяц;
					НаборИзменен = Истина;
				КонецЕсли;
				//++ Локализация
				Если ЗаписьРегистра.РаздельныйУчетВНАПоНалогообложениюНДС <> ЗаписьРегистра.РаздельныйУчетТоваровПоНалогообложениюНДС Тогда
					ЗаписьРегистра.РаздельныйУчетВНАПоНалогообложениюНДС = ЗаписьРегистра.РаздельныйУчетТоваровПоНалогообложениюНДС;
					НаборИзменен = Истина;
				КонецЕсли;
				//-- Локализация
			КонецЦикла;
			Если НаборИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение, МетаданныеОбъекта, Неопределено, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

//++ Локализация

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияЛокализация(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкиУчетаНДС.ОбработатьДанныеДляПереходаНаНовуюВерсиюМонопольно";
	Обработчик.Версия = "2.5.7.112";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("63cd04b4-abca-4aaf-ba9b-2ce99969d249");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр Настройки учета НДС из настроек учетных политик организаций.'");

КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюМонопольно() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Политики.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлательщикНДС,
	|	Политики.ПрименяетсяУчетНДСПоФактическомуИспользованию,
	|	Политики.ПрименяетсяОсвобождениеОтУплатыНДС,
	|	Политики.РаздельныйУчетТоваровПоНалогообложениюНДС,
	|	Политики.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС,
	|	Политики.УчетНДСДлительногоЦиклаПроизводства,
	|	Политики.Учитывать5ПроцентныйПорог,
	|	Политики.ВариантУчетаНДСПриИзмененииВидаДеятельности,
	|	Политики.СтатьяРасходовНеНДС,
	|	Политики.АналитикаРасходовНеНДС,
	|	Политики.СтатьяРасходовЕНВД,
	|	Политики.АналитикаРасходовЕНВД,
	|	Политики.СтатьяРасходовСписаниеНДС,
	|	Политики.АналитикаРасходовСписаниеНДС,
	|	Политики.ПравилоОтбораАвансовДляРегистрацииСчетовФактур,
	|	Политики.ЕстьРеализацияРаботУслугНеНаТерриторииРФ
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК Настройки
	|		ПО (Настройки.Организация = ДанныеРегистра.Организация)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьУчетныеПолитикиОрганизаций КАК Политики
	|		ПО (ДанныеРегистра.УчетнаяПолитика = Политики.Ссылка)
	|ГДЕ
	|	Настройки.Организация ЕСТЬ NULL
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
	
		НаборЗаписей = РегистрыСведений.НастройкиУчетаНДС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.ПериодичностьРаспределенияНДС = Перечисления.Периодичность.Квартал;
		НоваяЗапись.БазаНДС = Перечисления.ВидыБазыНДС.ВыручкаТекущегоКвартала;
		НоваяЗапись.РаздельныйУчетВНАПоНалогообложениюНДС = НоваяЗапись.РаздельныйУчетТоваровПоНалогообложениюНДС;
		НоваяЗапись.ПериодичностьОформленияСводныхСправок = Перечисления.Периодичность.Месяц;
		НоваяЗапись.ПериодичностьФормированияВычетовИВосстановленийНДС = Перечисления.Периодичность.Месяц;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
	КонецЦикла;
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#КонецЕсли
