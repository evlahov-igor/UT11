
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Идентификаторы обучения вида плана.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - Вид плана.
//  ТребуетсяПоследнийОбучающийся - Булево - Требуется последний обучающийся вид плана.
// 
// Возвращаемое значение:
//  Неопределено, ВыборкаИзРезультатаЗапроса - Идентификаторы обучения вида плана
Функция ИдентификаторыОбученияВидаПлана(ВидПлана, ТребуетсяПоследнийОбучающийся = Истина) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаРегистра.ВидПлана КАК ВидПлана,
	|	ТаблицаРегистра.ИдОбучения КАК ИдОбучения,
	|	ТаблицаРегистра.СтатусОбучения КАК СтатусОбучения,
	|	ТаблицаРегистра.ВремяИзмененияСостояния КАК ВремяИзмененияСостояния
	|ИЗ
	|	РегистрСведений.СервисПрогнозированияИдентификаторыОбучения КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ВидПлана = &ВидПлана
	|	И ТаблицаРегистра.СтатусОбучения <> &СтатусЗагружен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяИзмененияСостояния УБЫВ";
	
	СтатусЗагружен = СервисПрогнозирования.СтатусЗагружен();
	
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("СтатусЗагружен", СтатусЗагружен);
	
	Если Не ТребуетсяПоследнийОбучающийся Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<> &СтатусЗагружен", "= &СтатусЗагружен");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Заполнить идентификаторы обучения по виду плана.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - Вид плана.
//  ИдОбучения - Строка - Ид обучения.
//  СтатусОбучения - Строка - Статус обучения.
//  ТекстОшибки - Строка - Текст ошибки.
//  Готовность - Число - Готовность.
Процедура ЗаполнитьИдентификаторыОбученияПоВидуПлана(ВидПлана,
	ИдОбучения,
	СтатусОбучения = "",
	ТекстОшибки = "",
	Готовность = 0) Экспорт
	
	Набор = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.СоздатьНаборЗаписей();
	Набор.Отбор.ВидПлана.Установить(ВидПлана);
	Набор.Отбор.ИдОбучения.Установить(ИдОбучения);
	
	Запись = Набор.Добавить();
	Запись.ВидПлана = ВидПлана;
	Запись.ИдОбучения = ИдОбучения;
	Запись.СтатусОбучения = СтатусОбучения;
	Запись.ТекстОшибки = ТекстОшибки;
	Запись.Готовность = Готовность;
	Запись.ВремяИзмененияСостояния = ТекущаяДатаСеанса();
	
	Набор.Записать();
	
КонецПроцедуры

// Добавить текст ошибки к обучению по виду плана.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - Вид плана.
//  ТекстОшибки - Строка - Текст ошибки.
Процедура ДобавитьТекстОшибкиКОбучениюПоВидуПлана(ВидПлана, ТекстОшибки) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СервисПрогнозированияИдентификаторыОбучения");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировкиДанных.УстановитьЗначение("ВидПлана", ВидПлана);
		БлокировкаДанных.Заблокировать();
	
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаРегистра.ВидПлана КАК ВидПлана,
		|	ТаблицаРегистра.ИдОбучения КАК ИдОбучения,
		|	ТаблицаРегистра.СтатусОбучения КАК СтатусОбучения,
		|	ТаблицаРегистра.Готовность КАК Готовность
		|ИЗ
		|	РегистрСведений.СервисПрогнозированияИдентификаторыОбучения КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.ВидПлана = &ВидПлана
		|	И ТаблицаРегистра.СтатусОбучения В (&Статус)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяИзмененияСостояния УБЫВ";
		
		СтатусОбученияОбучаетсяГотов = Новый Массив();
		СтатусОбученияОбучаетсяГотов.Добавить(СервисПрогнозирования.СтатусНеизвестен());
		СтатусОбученияОбучаетсяГотов.Добавить(СервисПрогнозирования.СтатусОжидаетОбучения());
		СтатусОбученияОбучаетсяГотов.Добавить(СервисПрогнозирования.СтатусОбучается());
		СтатусОбученияОбучаетсяГотов.Добавить(СервисПрогнозирования.СтатусГотовКПолучению());
		СтатусОбученияОбучаетсяГотов.Добавить(СервисПрогнозирования.СтатусОшибкаОбучения());
		
		Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
		Запрос.УстановитьПараметр("Статус", СтатусОбученияОбучаетсяГотов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			Набор = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.СоздатьНаборЗаписей();
			Набор.Отбор.ВидПлана.Установить(ВидПлана);
			Набор.Отбор.ИдОбучения.Установить(Выборка.ИдОбучения);
			
			Запись = Набор.Добавить();
			Запись.ВидПлана = ВидПлана;
			Запись.ИдОбучения = Выборка.ИдОбучения;
			Запись.СтатусОбучения = "Ошибка обучения";
			Запись.ТекстОшибки = ТекстОшибки;
			Запись.Готовность = Выборка.Готовность;
			Запись.ВремяИзмененияСостояния = ТекущаяДатаСеанса();
			
			Набор.Записать();
		
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ЖурналСервисаПрогнозирования,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Информация об обучении модели.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - Вид плана.
// 
// Возвращаемое значение:
//  Структура - Информация об обучении модели из:
//  * ОбучающаясяМодель - Структура - из:
//   ** ИдОбучения - Строка - 
//   ** ВремяИзмененияСостояния - Дата -  
//   ** СтатусОбучения - Строка - 
//   ** ТекстОшибки - Строка - 
//   ** Готовность - Число - 
//  * ЗагруженнаяМодель - Структура - из:
//   ** ИдОбучения - Строка - 
//   ** ВремяИзмененияСостояния - Дата -  
//   ** СтатусОбучения - Строка - 
//   ** ТекстОшибки - Строка - 
//   ** Готовность - Число - 
Функция ИнформацияОбОбученииМодели(ВидПлана) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СервисПрогнозированияИдентификаторыОбучения.ИдОбучения КАК ИдОбучения,
	|	СервисПрогнозированияИдентификаторыОбучения.ВремяИзмененияСостояния КАК ВремяИзмененияСостояния,
	|	СервисПрогнозированияИдентификаторыОбучения.СтатусОбучения КАК СтатусОбучения,
	|	СервисПрогнозированияИдентификаторыОбучения.ТекстОшибки КАК ТекстОшибки,
	|	СервисПрогнозированияИдентификаторыОбучения.Готовность КАК Готовность
	|ИЗ
	|	РегистрСведений.СервисПрогнозированияИдентификаторыОбучения КАК СервисПрогнозированияИдентификаторыОбучения
	|ГДЕ
	|	СервисПрогнозированияИдентификаторыОбучения.ВидПлана = &ВидПлана
	|	И СервисПрогнозированияИдентификаторыОбучения.СтатусОбучения В(&СтатусОбученияОбучаетсяГотов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяИзмененияСостояния УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СервисПрогнозированияИдентификаторыОбучения.ИдОбучения КАК ИдОбучения,
	|	СервисПрогнозированияИдентификаторыОбучения.ВремяИзмененияСостояния КАК ВремяИзмененияСостояния,
	|	СервисПрогнозированияИдентификаторыОбучения.СтатусОбучения КАК СтатусОбучения,
	|	СервисПрогнозированияИдентификаторыОбучения.ТекстОшибки КАК ТекстОшибки,
	|	СервисПрогнозированияИдентификаторыОбучения.Готовность КАК Готовность
	|ИЗ
	|	РегистрСведений.СервисПрогнозированияИдентификаторыОбучения КАК СервисПрогнозированияИдентификаторыОбучения
	|ГДЕ
	|	СервисПрогнозированияИдентификаторыОбучения.ВидПлана = &ВидПлана
	|	И СервисПрогнозированияИдентификаторыОбучения.СтатусОбучения В(&СтатусОбученияЗагружен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяИзмененияСостояния УБЫВ";
	
	СтатусОбученияЗагружен = Новый Массив();
	СтатусОбученияЗагружен.Добавить(СервисПрогнозирования.СтатусЗагружен());
	
	СтатусОбученияОбучаетсяГотов = Новый Массив();
	СтатусОбученияОбучаетсяГотов.Добавить(СервисПрогнозирования.СтатусНеизвестен());
	СтатусОбученияОбучаетсяГотов.Добавить(СервисПрогнозирования.СтатусОжидаетОбучения());
	СтатусОбученияОбучаетсяГотов.Добавить(СервисПрогнозирования.СтатусОбучается());
	СтатусОбученияОбучаетсяГотов.Добавить(СервисПрогнозирования.СтатусГотовКПолучению());
	СтатусОбученияОбучаетсяГотов.Добавить(СервисПрогнозирования.СтатусОшибкаОбучения());
	
	Запрос.УстановитьПараметр("СтатусОбученияЗагружен", СтатусОбученияЗагружен);
	Запрос.УстановитьПараметр("СтатусОбученияОбучаетсяГотов", СтатусОбученияОбучаетсяГотов);
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаОбучается = Результат[0].Выбрать();
	ВыборкаЗагружен = Результат[1].Выбрать();
	
	Ответ = Новый Структура("ОбучающаясяМодель, ЗагруженнаяМодель", Неопределено, Неопределено);
	
	Если ВыборкаОбучается.Следующий() Тогда
		ШаблонСтруктурыОтвета = ШаблонОтветаИнформацииОбОбучении();
		ЗаполнитьЗначенияСвойств(ШаблонСтруктурыОтвета, ВыборкаОбучается);
		Ответ["ОбучающаясяМодель"] = ШаблонСтруктурыОтвета;
	КонецЕсли;
	Если ВыборкаЗагружен.Следующий() Тогда
		ШаблонСтруктурыОтвета = ШаблонОтветаИнформацииОбОбучении();
		ЗаполнитьЗначенияСвойств(ШаблонСтруктурыОтвета, ВыборкаЗагружен);
		Ответ["ЗагруженнаяМодель"] = ШаблонСтруктурыОтвета;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получить текст ошибки вида плана.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - Вид плана.
// 
// Возвращаемое значение:
//  Строка - Получить текст ошибки вида плана.
Функция ПолучитьТекстОшибкиВидаПлана(ВидПлана) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СервисПрогнозированияИдентификаторыОбучения.ВремяИзмененияСостояния КАК ВремяИзмененияСостояния,
	|	СервисПрогнозированияИдентификаторыОбучения.СтатусОбучения КАК СтатусОбучения,
	|	СервисПрогнозированияИдентификаторыОбучения.ТекстОшибки КАК ТекстОшибки,
	|	СервисПрогнозированияИдентификаторыОбучения.Готовность КАК Готовность
	|ИЗ
	|	РегистрСведений.СервисПрогнозированияИдентификаторыОбучения КАК СервисПрогнозированияИдентификаторыОбучения
	|ГДЕ
	|	СервисПрогнозированияИдентификаторыОбучения.ВидПлана = &ВидПлана
	|	И СервисПрогнозированияИдентификаторыОбучения.СтатусОбучения = &СтатусОбучения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяИзмененияСостояния УБЫВ";
	
	Запрос.УстановитьПараметр("СтатусОбучения", "Ошибка обучения");
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстОшибки = "";
	
	Если Выборка.Следующий() Тогда
		ТекстОшибки = Выборка.ТекстОшибки;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Шаблон ответа информации об обучении.
// 
// Возвращаемое значение:
//  Структура - Шаблон ответа информации об обучении:
// * ИдОбучения - Строка - 
// * ВремяИзмененияСостояния - Дата -  
// * СтатусОбучения - Строка - 
// * ТекстОшибки - Строка - 
// * Готовность - Число - 
Функция ШаблонОтветаИнформацииОбОбучении()
	
	Шаблон = Новый Структура();
	Шаблон.Вставить("ИдОбучения");
	Шаблон.Вставить("ВремяИзмененияСостояния");
	Шаблон.Вставить("СтатусОбучения");
	Шаблон.Вставить("ТекстОшибки");
	Шаблон.Вставить("Готовность");
	
	Возврат Шаблон;
	
КонецФункции

#КонецОбласти

#КонецЕсли