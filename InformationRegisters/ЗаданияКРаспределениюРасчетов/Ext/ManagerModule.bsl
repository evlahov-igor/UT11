#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ЗаданияКРаспределениюРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.5.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d44d389b-a5ce-495e-b273-2d2c26c69755");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЗаданияКРаспределениюРасчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение ""Объект расчетов""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияКРаспределениюРасчетов.ТипРасчетов,
	|	ЗаданияКРаспределениюРасчетов.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетов КАК ЗаданияКРаспределениюРасчетов
	|ГДЕ
	|	ЗаданияКРаспределениюРасчетов.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
			Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задания.ТипРасчетов КАК ТипРасчетов,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.УдалитьОбъектРасчетов КАК ИсточникОбъектаРасчетов,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетов КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|			ПО Задания.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договора
	|			ПО Договора.Ссылка = Аналитика.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО Задания.УдалитьОбъектРасчетов = ОбъектыРасчетов.Объект
	|				И Аналитика.Организация = ОбъектыРасчетов.Организация
	|				И ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(Задания.УдалитьОбъектРасчетов) = ТИП(Справочник.ДоговорыКонтрагентов)
	|							И Договора.РазрешенаРаботаСДочернимиПартнерами
	|						ТОГДА Договора.Партнер
	|					ИНАЧЕ Аналитика.Партнер
	|				КОНЕЦ = ОбъектыРасчетов.Партнер
	|				И Аналитика.Контрагент = ОбъектыРасчетов.Контрагент
	|				И Задания.Валюта = ОбъектыРасчетов.ВалютаВзаиморасчетов
	|				И Задания.ТипРасчетов = ОбъектыРасчетов.ТипРасчетов
	|ГДЕ
	|	Задания.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Задания.ТипРасчетов = &ТипРасчетов
	|	И НЕ Задания.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Задания.ТипРасчетов КАК ТипРасчетов,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.УдалитьОбъектРасчетов КАК ИсточникОбъектаРасчетов,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетов КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|			ПО Задания.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО Аналитика.Организация = ОбъектыРасчетов.Организация
	|				И Задания.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|				И ОбъектыРасчетов.Объект = НЕОПРЕДЕЛЕНО
	|				И Задания.ТипРасчетов = ОбъектыРасчетов.ТипРасчетов
	|				И Аналитика.Контрагент = ОбъектыРасчетов.Контрагент
	|				И Аналитика.Партнер = ОбъектыРасчетов.Партнер
	|				И Аналитика.Договор = ОбъектыРасчетов.Договор
	|				И Аналитика.НаправлениеДеятельности = ОбъектыРасчетов.НаправлениеДеятельности
	|				И Задания.Валюта = ОбъектыРасчетов.ВалютаВзаиморасчетов
	|ГДЕ
	|	Задания.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Задания.ТипРасчетов = &ТипРасчетов
	|	И Задания.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	
	Для Каждого ПорцияДанных Из ОбновляемыеДанные Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("ТипРасчетов", ПорцияДанных.ТипРасчетов);
			ЭлементБлокировки.УстановитьЗначение("АналитикаУчетаПоПартнерам", ПорцияДанных.АналитикаУчетаПоПартнерам);
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("ТипРасчетов", ПорцияДанных.ТипРасчетов);
			Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", ПорцияДанных.АналитикаУчетаПоПартнерам);
			ОбъектыРасчетов = Запрос.Выполнить().Выгрузить();
			ОбъектыРасчетов.Индексы.Добавить("ТипРасчетов, АналитикаУчетаПоПартнерам, ИсточникОбъектаРасчетов");
			
			НаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипРасчетов.Установить(ПорцияДанных.ТипРасчетов);
			НаборЗаписей.Отбор.АналитикаУчетаПоПартнерам.Установить(ПорцияДанных.АналитикаУчетаПоПартнерам);
			НаборЗаписей.Прочитать();
			
			ЕстьОшибкаЗапонения = Ложь;
			ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка()
						И ЗначениеЗаполнено(ЗаписьНабора.УдалитьОбъектРасчетов) Тогда
					СтруктураПоиска = Новый Структура("ТипРасчетов, АналитикаУчетаПоПартнерам, ИсточникОбъектаРасчетов",
						ЗаписьНабора.ТипРасчетов,
						ЗаписьНабора.АналитикаУчетаПоПартнерам,
						ЗаписьНабора.УдалитьОбъектРасчетов);
					НайденныйОбъектРасчетов = ОбъектыРасчетов.НайтиСтроки(СтруктураПоиска);
					
					Если НайденныйОбъектРасчетов.Количество() = 1 Тогда 
						ЗаписьНабора.ОбъектРасчетов = НайденныйОбъектРасчетов[0].ОбъектРасчетов;
					ИначеЕсли ВсеОбъектыРасчетовСгенерированы И Не НайденныйОбъектРасчетов.Количество() Тогда
						ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Не удалось заполнить объект расчетов в регистре сведений: %1 по источнику данных %2'"),
								ПолноеИмяРегистра,
								ЗаписьНабора.УдалитьОбъектРасчетов));
					ИначеЕсли Не ВсеОбъектыРасчетовСгенерированы И Не НайденныйОбъектРасчетов.Количество() Тогда 
						ЕстьОшибкаЗапонения = Истина;
						Прервать;
					Иначе
						СтруктураПоиска.Вставить("ТолькоОстатки", Ложь);
						НайденныйОбъектРасчетов = ОбъектыРасчетов.НайтиСтроки(СтруктураПоиска);
						Если НайденныйОбъектРасчетов.Количество() = 1 Тогда 
							ЗаписьНабора.ОбъектРасчетов = НайденныйОбъектРасчетов[0].ОбъектРасчетов;
						Иначе 
							ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Для для истоника данных: %1 найдено несколько объектов расчетов. Заполнение невозможно.'"),
								ЗаписьНабора.УдалитьОбъектРасчетов));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьОшибкаЗапонения Тогда
				Продолжить;
			КонецЕсли;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 , по причине: %2'");
			ТекстСообщения = СтрШаблон(Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				,
				ТекстСообщения);
		
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
