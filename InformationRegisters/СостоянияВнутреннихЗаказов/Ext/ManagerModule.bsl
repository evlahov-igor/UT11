#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура по переданной ссылке на заказ расчитывает и записывает в регистр сведений состояние заказа.
//
//	Параметры:
//		МассивЗаказов - Массив - Массив документов типов ЗаказНаПеремещение, ЗаказНаСборку, ЗаказНаВнутреннееПотребление
//								 в рамках проведения которого перерасчитывается состояние.
//
Процедура ОтразитьСостояниеЗаказа(МассивЗаказов) Экспорт
	
	ЗаказыПоТипам = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивЗаказов);
	
	Для Каждого Элемент Из ЗаказыПоТипам Цикл
		
		ТипЗаказа = Элемент.Ключ;
		Заказы = Элемент.Значение;
		
		Если ТипЗаказа = "Документ.ЗаказНаПеремещение"
				Или ТипЗаказа = "Документ.ЗаказНаСборку"
				Или ТипЗаказа = "Документ.ЗаказНаВнутреннееПотребление" Тогда
			
			Таблица = ТаблицаИзмененийСостоянийЗаказов(ТипЗаказа, Заказы);
			ЗаписатьСостояния(Таблица);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отражает изменения состояний заказов в регистре.
//
// Параметры:
//  ДокументИсточник - ДокументОбъект - записываемый документ.
//  МассивЗаказов - Массив из ДокументСсылка - массив отражаемых заказов.
//
Процедура ОтразитьСостоянияЗаказов(ДокументИсточник, МассивЗаказов) Экспорт
	
	ОтразитьСостояниеЗаказа(МассивЗаказов);
	
КонецПроцедуры

// Дополняет текст запроса механизма расчета состояний.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос) Экспорт

	СоответствиеЗаданий = Новый Соответствие();
	СоответствиеЗаданий.Вставить("ДвиженияТоварыКОтгрузкеИзменение", ТекстЗапросаТоварыКОтгрузке(Запрос));
	СоответствиеЗаданий.Вставить("ТоварыКПоступлениюИзменение", ТекстЗапросаТоварыКПоступлению(Запрос));
	СоответствиеЗаданий.Вставить("ДвиженияЗаказыНаПеремещениеИзменение", ТекстЗапросаЗаказыНаПеремещение(Запрос));
	СоответствиеЗаданий.Вставить("ДвиженияЗаказыНаСборкуИзменение", ТекстЗапросаЗаказыНаСборку(Запрос));
	СоответствиеЗаданий.Вставить("ДвиженияЗаказыНаВнутреннееПотреблениеИзменение", ТекстЗапросаЗаказыНаВнутреннееПотребление(Запрос));
	Если Не РаспределениеЗапасов.ДосчитыватьРегистрРегламентнымЗаданием() Тогда
		СоответствиеЗаданий.Вставить("ДвиженияРаспределениеЗапасовДвиженияИзменение",
			ТекстЗапросаДвиженияРаспределениеЗапасовДвиженияИзменение(Запрос));
		СоответствиеЗаданий.Вставить("СостоянияВнутреннихЗаказовИзменение",
			ТекстЗапросаСостоянияВнутреннихЗаказовИзменение(Запрос));
	КонецЕсли;
	Возврат СоответствиеЗаданий;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыАктуализацииСостоянийЗаказов() Экспорт
	
	Результат = Новый Структура("ПравилоОтбораЗаписей,ФункцияСравненияЗаписей,ФункцияСравненияЗаписейВоВременнуюТаблицу");
	
	Результат.ПравилоОтбораЗаписей =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаспределениеЗапасов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ ТаблицаПереопределяемый
		|ИЗ
		|	ФильтрПереопределяемый КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ПО РаспределениеЗапасов.Номенклатура  = Товары.Номенклатура
		|		И РаспределениеЗапасов.Характеристика = Товары.Характеристика
		|		И РаспределениеЗапасов.Склад          = Товары.Склад
		|		И РаспределениеЗапасов.Назначение     = Товары.Назначение
		|		И РаспределениеЗапасов.Состояние В(
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате))
		|				
		|ГДЕ
		|	НЕ РаспределениеЗапасов.Номенклатура ЕСТЬ NULL
		|		И ТИПЗНАЧЕНИЯ(РаспределениеЗапасов.ЗаказНаОтгрузку) В(
		|			ТИП(Документ.ЗаказНаСборку),
		|			ТИП(Документ.ЗаказНаВнутреннееПотребление),
		|			ТИП(Документ.ЗаказНаПеремещение))
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаОтгрузку";
		
	Результат.ФункцияСравненияЗаписейВоВременнуюТаблицу =
		"ВЫБРАТЬ
		|	ПередЗаписью.ЗаказНаОтгрузку КАК Заказ
		|ПОМЕСТИТЬ ИзменениеПереопределяемый
		|ИЗ
		|	ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриЗаписиПереопределяемый КАК ПриЗаписи
		|		ПО ПриЗаписи.ЗаказНаОтгрузку = ПередЗаписью.ЗаказНаОтгрузку
		|ГДЕ
		|		ПриЗаписи.ЗаказНаОтгрузку ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПриЗаписи.ЗаказНаОтгрузку КАК Заказ
		|ИЗ
		|	ПриЗаписиПереопределяемый КАК ПриЗаписи
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|		ПО ПередЗаписью.ЗаказНаОтгрузку = ПриЗаписи.ЗаказНаОтгрузку
		|ГДЕ
		|	ПередЗаписью.ЗаказНаОтгрузку ЕСТЬ NULL";
	
	Результат.ФункцияСравненияЗаписей = СтрЗаменить(Результат.ФункцияСравненияЗаписейВоВременнуюТаблицу,
		"ПОМЕСТИТЬ ИзменениеПереопределяемый", "");
	
Возврат Результат;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СостоянияВнутреннихЗаказов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.8.155";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5c37bbfd-0088-472d-ae36-15ae209c96f7");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияВнутреннихЗаказов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр по данным регистра сведений ""Распределение запасов"" и данным документов.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаВнутреннееПотребление.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаСборку.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаПеремещение.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаСборку.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ТоварыКОтгрузке.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ТоварыКПоступлению.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РаспределениеЗапасов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СостоянияВнутреннихЗаказов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СостоянияВнутреннихЗаказов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКОтгрузке.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыКПоступлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РаспределениеЗапасов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.СостоянияВнутреннихЗаказов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.СостоянияВнутреннихЗаказов");
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Заказы.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК Заказы
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВнутреннихЗаказов КАК СостоянияЗаказов
		|		ПО СостоянияЗаказов.Заказ = Заказы.Ссылка
		|ГДЕ
		|	Заказы.Проведен
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьЗаписи
		|			ИЗ
		|				Документ.ЗаказНаВнутреннееПотребление.Товары КАК Товары
		|			ГДЕ
		|				Товары.Ссылка = Заказы.Ссылка
		|					И НЕ Товары.Отменено
		|					И Товары.ВариантОбеспечения В(
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОбособленно))
		|			)
		|		И(
		// Регистр еще не обновлялся.
		|			НЕ ИСТИНА В(
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА КАК ЕстьЗаписи
		|				ИЗ
		|					РегистрНакопления.РаспределениеЗапасовДвижения КАК РаспределениеЗапасовДвижения
		|				ГДЕ
		|					РаспределениеЗапасовДвижения.Регистратор = Заказы.Ссылка)
		// Регистр обновился, но старое состояние не соответствует расчетному по данным регистра.
		|			ИЛИ СостоянияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ОжидаетсяОбеспечение)
		|				И НЕ ИСТИНА В(
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА КАК ЕстьЗаписи
		|					ИЗ
		|						РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|					ГДЕ
		|						РаспределениеЗапасов.ЗаказНаОтгрузку = Заказы.Ссылка
		|							И РаспределениеЗапасов.Состояние В(
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.УдалитьОтложитьОбеспечение))
		|				)
		|		)";
		
	// Заказы на внутреннее потребление.
	Запрос.Текст = ТекстЗапроса;
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
	// Заказы на перемещение.
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказНаВнутреннееПотребление", "Документ.ЗаказНаПеремещение");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
	// Заказы на сборку (операция - сборка).
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказНаВнутреннееПотребление", "Документ.ЗаказНаСборку");
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"Заказы.Проведен",
		"Заказы.Проведен И Заказы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
	// Заказы на сборку (операция - разборка).
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Заказы.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Заказы
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВнутреннихЗаказов КАК СостоянияЗаказов
		|		ПО СостоянияЗаказов.Заказ = Заказы.Ссылка
		|ГДЕ
		|	Заказы.Проведен
		|		И Заказы.Количество > Заказы.КоличествоОтменено
		|		И Заказы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
		|		И Заказы.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОбособленно))
		|		И(
		// Регистр еще не обновлялся.
		|			НЕ ИСТИНА В(
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА КАК ЕстьЗаписи
		|				ИЗ
		|					РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|				ГДЕ
		|					РаспределениеЗапасов.ЗаказНаОтгрузку = Заказы.Ссылка)
		// Регистр обновился, но старое состояние не соответствует расчетному по данным регистра.
		|			ИЛИ СостоянияЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ОжидаетсяОбеспечение)
		|				И НЕ ИСТИНА В(
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА КАК ЕстьЗаписи
		|					ИЗ
		|						РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|					ГДЕ
		|						РаспределениеЗапасов.ЗаказНаОтгрузку = Заказы.Ссылка
		|							И РаспределениеЗапасов.Состояние В(
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|								ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.УдалитьОтложитьОбеспечение))
		|				)
		|		)";
		
	Запрос.Текст = ТекстЗапроса;
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.ЗаказНаОтгрузку КАК Заказ
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК Таблица
		|ГДЕ
		|	Таблица.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|		И Таблица.РезервироватьПоМереПоступления <> 0
		|		И ТИПЗНАЧЕНИЯ(Таблица.ЗаказНаОтгрузку) В(
		|			ТИП(Документ.ЗаказНаПеремещение),
		|			ТИП(Документ.ЗаказНаВнутреннееПотребление),
		|			ТИП(Документ.ЗаказНаСборку))
		|		И ИСТИНА В(
		|			// Документы ввода остатков не обновлены.
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьЗаписи
		|			ИЗ
		|				Документ.ВводОстатков.Товары КАК Товары
		|			ГДЕ
		|				Товары.Ссылка.Проведен
		|					И Товары.Ссылка.ХозяйственнаяОперация В(
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковСобственныхТоваров),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковТоваровПолученныхНаКомиссию),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПринятойОтПоставщиков))
		|					И Товары.Номенклатура = Таблица.Номенклатура
		|					И Товары.Характеристика = Таблица.Характеристика
		|					И Товары.Ссылка.Склад = Таблица.Склад
		|					И Товары.Назначение = Таблица.Назначение
		|					И НЕ ИСТИНА В(
		|						ВЫБРАТЬ ПЕРВЫЕ 1
		|							ИСТИНА КАК ЕстьЗаписи
		|						ИЗ
		|							РегистрНакопления.РаспределениеЗапасовДвижения КАК Движения
		|						ГДЕ
		|							Движения.Активность
		|			 					И Движения.Регистратор = Товары.Ссылка))";
		
	Запрос.Текст = ТекстЗапроса;
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
	ТекстГруппировки = РегистрыНакопления.РаспределениеЗапасовДвижения.ТекстЗапросаИсправленныеДвижения();
	Если ТекстГруппировки <> "" Тогда
		
		ТекстыЗапроса = Новый Массив();
		ТекстыЗапроса.Добавить(ТекстГруппировки);
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Состояния.Заказ КАК Заказ
			|ИЗ
			|	РегистрСведений.СостоянияВнутреннихЗаказов КАК Состояния
			|ГДЕ
			|	ИСТИНА В(
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА КАК ЕстьЗаписи
			|		ИЗ
			|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
			|		ГДЕ
			|			РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
			|				И (РаспределениеЗапасов.РезервироватьПоМереПоступления > 0
			|					ИЛИ РаспределениеЗапасов.КОбеспечениюБезРезерва > 0
			|					ИЛИ РаспределениеЗапасов.ОтложитьРезервирование > 0)
			|				И РаспределениеЗапасов.ЗаказНаОтгрузку = Состояния.Заказ
			|				И ИСТИНА В(
			|					ВЫБРАТЬ ПЕРВЫЕ 1
			|						ИСТИНА КАК ЕстьЗаписи
			|				ИЗ
			|					ПроблемныеПозиции КАК ПроблемныеПозиции
			|				ГДЕ
			|					ПроблемныеПозиции.Номенклатура = РаспределениеЗапасов.Номенклатура
			|						И ПроблемныеПозиции.Характеристика = РаспределениеЗапасов.Характеристика
			|						И ПроблемныеПозиции.Склад = РаспределениеЗапасов.Склад
			|						И ПроблемныеПозиции.Назначение = РаспределениеЗапасов.Назначение))";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		
		ЗначенияПараметров = РаспределениеЗапасовДвижения.ЗначенияПараметровДляТекстовЗапросовПроведенияДокументов();
		Для Каждого Элемент Из ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если НЕ ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, "РегистрСведений.РаспределениеЗапасов") Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъекта = "РегистрСведений.СостоянияВнутреннихЗаказов";
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	НаборЗаписей = РегистрыСведений.СостоянияВнутреннихЗаказов.СоздатьНаборЗаписей();
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			// Блокировка документа.
			// регистры ТоварыКОтгрузке, ТоварыКПоступлению, ЗаказыНаВнутреннееПотребление, ЗаказыНаПеремещение, ЗаказыНаСборку не блокируем,
			// считаем что их не пишут без блокировки заказа.
			ТипЗаказа = Выборка.Заказ.Метаданные().ПолноеИмя();
			ЭлементБлокировки = Блокировка.Добавить(ТипЗаказа);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Заказ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			// Блокировка регистра распределения запасов.
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РаспределениеЗапасов");
			ЭлементБлокировки.УстановитьЗначение("ЗаказНаОтгрузку", Выборка.Заказ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			// Блокировка регистра состояний.
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Заказ", Выборка.Заказ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ЗначениеВМассиве = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Заказ);
			Таблица = ТаблицаИзмененийСостоянийЗаказов(ТипЗаказа, ЗначениеВМассиве);
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ, Истина);
			
			Если Таблица.Количество() = 1 Тогда
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Таблица[0]);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				
			КонецЕсли;
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Заказ);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаИзмененийСостоянийЗаказов(ТипДокумента, МассивЗаказов)
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипДокумента);
	СтруктураПараметровДокумента = МенеджерДокумента.ПараметрыДляРасчетаСостояний();
	
	ВременныеТаблицыДокумента       = МенеджерДокумента.ВременныеТаблицыДокументаДляРасчетаСостояний();
	ВременнаяТаблицаОстаткиЗаказов  = СтруктураПараметровДокумента.МодульОстаткиЗаказов.ВременнаяТаблицаОстаткиЗаказов();
	
	ТекстыЗапроса = Новый СписокЗначений();
	ТекстыЗапроса.Добавить(ВременныеТаблицыДокумента.ТоварыДокумента,          "");
	ТекстыЗапроса.Добавить(ВременныеТаблицыДокумента.РеквизитыДокумента,       "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОбеспечениеЗаказа(),                "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОстаткиЗаказов,                     "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОстаткиКОтгрузке(),                 "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОстаткиКПоступлению(),              "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаРасхожденияНакладнаяОрдер(),        "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОборотыКОтгрузкеСОрдерныхСкладов(), "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаЧастичноВНаличии(),                 "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаРезервПревышаетОстатки(),           "");
	ТекстыЗапроса.Добавить(ТекстЗапросаРасчетаСостояний(),                     "Таблица");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("КонтролироватьЗакрытиеЗаказа", СтруктураПараметровДокумента.КонтролироватьЗакрытиеЗаказа);
	Запрос.УстановитьПараметр("СтатусВПроцессеПоступления", СтруктураПараметровДокумента.СтатусВПроцессеПоступления);
	Запрос.УстановитьПараметр("СтатусВПроцессеОтгрузки", СтруктураПараметровДокумента.СтатусВПроцессеОтгрузки);
	Запрос.УстановитьПараметр("СтатусГотовКОтгрузке", СтруктураПараметровДокумента.СтатусГотовКОтгрузке);
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("МенеджерСоздаетОрдера",
		Константы.РежимФормированияРасходныхОрдеров.Получить() = Перечисления.РежимыФормированияРасходныхОрдеров.Менеджером);
	
	Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса, , Истина);

	Возврат Таблицы.Таблица;

КонецФункции

Функция ТекстЗапросаРасчетаСостояний()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                        КАК Заказ,
		|	Таблица.Состояние                     КАК Состояние,
		|	Таблица.ЕстьРасхожденияОрдерНакладная КАК ЕстьРасхожденияОрдерНакладная,
		|	Таблица.РезервПревышаетОстатки        КАК РезервПревышаетОстатки
		|ИЗ(
		|ВЫБРАТЬ
		|	ВтРеквизитыДокумента.Ссылка КАК Ссылка,
		|
		|	ВЫБОР КОГДА НЕ ВтРеквизитыДокумента.Проведен ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ПустаяСсылка)
		|
		|		КОГДА ВТОбеспечениеЗаказа.Ссылка ЕСТЬ NULL ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ПустаяСсылка)
		|
		|		КОГДА ВТОбеспечениеЗаказа.ЕстьКОбеспечению ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ГотовКОбеспечению)
		|
		|		КОГДА НЕ ВтЧастичноВНаличии.Ссылка ЕСТЬ NULL ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ОжидаетсяОбеспечение)
		|
		|		КОГДА НЕ ВтРеквизитыДокумента.СтатусКОтгрузке ИЛИ НЕ ВТОбеспечениеЗаказа.ВсеОтгрузить ТОГДА
		|
		|			&СтатусГотовКОтгрузке
		|
		|		КОГДА &МенеджерСоздаетОрдера И ВтОборотыКОтгрузке.Расход = 0 ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ГотовКОтгрузке)
		|
		|		КОГДА НЕ ВтОстаткиЗаказов.Распоряжение ЕСТЬ NULL ТОГДА
		|
		|			&СтатусВПроцессеОтгрузки
		|
		|		КОГДА НЕ ВтОстаткиКОтгрузке.Распоряжение ЕСТЬ NULL ТОГДА
		|
		|			&СтатусВПроцессеОтгрузки
		|
		|		КОГДА НЕ ВтОстаткиКПоступлению.Распоряжение ЕСТЬ NULL ТОГДА
		|
		|			&СтатусВПроцессеПоступления
		|
		|		КОГДА НЕ ВтРеквизитыДокумента.СтатусЗакрыт И &КонтролироватьЗакрытиеЗаказа ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ГотовКЗакрытию)
		|
		|		ИНАЧЕ
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.Закрыт)
		|
		|	КОНЕЦ КАК Состояние,
		|// РЕЗЕРВ ПРЕВЫШАЕТ ОСТАТКИ ////////////////////////////////////////////////////
		|	НЕ ВтРезервПревышаетОстатки.Ссылка ЕСТЬ NULL КАК РезервПревышаетОстатки,
		|	ВЫБОР КОГДА ВтРасхожденияНакладнаяОрдер.Распоряжение ЕСТЬ NULL ТОГДА
		|				ЛОЖЬ
		|			ИНАЧЕ
		|				ИСТИНА
		|		КОНЕЦ КАК ЕстьРасхожденияОрдерНакладная
		|
		|ИЗ
		|	ВтРеквизитыДокумента КАК ВтРеквизитыДокумента
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбеспечениеЗаказа КАК ВТОбеспечениеЗаказа
		|		ПО ВТОбеспечениеЗаказа.Ссылка = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЧастичноВНаличии КАК ВтЧастичноВНаличии
		|		ПО ВтЧастичноВНаличии.Ссылка = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРезервПревышаетОстатки КАК ВтРезервПревышаетОстатки
		|		ПО ВтРезервПревышаетОстатки.Ссылка = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОборотыКОтгрузке КАК ВтОборотыКОтгрузке
		|		ПО ВтОборотыКОтгрузке.Распоряжение = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиЗаказов КАК ВтОстаткиЗаказов
		|		ПО ВтОстаткиЗаказов.Распоряжение = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиКОтгрузке КАК ВтОстаткиКОтгрузке
		|		ПО ВтОстаткиКОтгрузке.Распоряжение = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиКПоступлению КАК ВтОстаткиКПоступлению
		|		ПО ВтОстаткиКПоступлению.Распоряжение = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасхожденияНакладнаяОрдер КАК ВтРасхожденияНакладнаяОрдер
		|		ПО ВтРасхожденияНакладнаяОрдер.Распоряжение = ВтРеквизитыДокумента.Ссылка) КАК Таблица";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаОбеспечениеЗаказа()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Ссылка КАК Ссылка,
		|	
		|	МАКСИМУМ(Набор.ЕстьКОбеспечению) КАК ЕстьКОбеспечению,
		|	МИНИМУМ(Набор.ВсеОтгрузить)      КАК ВсеОтгрузить
		|	
		|ПОМЕСТИТЬ ВТОбеспечениеЗаказа
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.Ссылка КАК Ссылка,
		|		
		|		ВЫБОР КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|							И Таблица.ЭтоТовар ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ КАК ЕстьКОбеспечению,
		|		
		|		ВЫБОР КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ КАК ВсеОтгрузить
		|	
		|	ИЗ
		|		ВтТоварыДокумента КАК Таблица) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Ссылка";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ВременнаяТаблицаОстаткиКОтгрузке()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ДокументОтгрузки КАК Распоряжение,
		|	Таблица.КОтгрузкеОстаток КАК Количество
		|ПОМЕСТИТЬ ВтОстаткиКОтгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&МассивЗаказов)) КАК Таблица";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаОстаткиКПоступлению()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ДокументПоступления КАК Распоряжение,
		|	Таблица.КОформлениюОрдеровОстаток КАК Количество
		|ПОМЕСТИТЬ ВтОстаткиКПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления В (&МассивЗаказов)) КАК Таблица";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаРасхожденияНакладнаяОрдер()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Набор.Распоряжение КАК Распоряжение
		|ПОМЕСТИТЬ ВтРасхожденияНакладнаяОрдер
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.ДокументОтгрузки КАК Распоряжение,
		|
		|		Таблица.Номенклатура     КАК Номенклатура,
		|		Таблица.Характеристика   КАК Характеристика,
		|		Таблица.Склад            КАК Склад,
		|		Таблица.Назначение       КАК Назначение,
		|		Таблица.Серия            КАК Серия
		|
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,, ДокументОтгрузки В (&МассивЗаказов)) КАК Таблица
		|ГДЕ
		|	Таблица.КОформлениюРасход <> Таблица.КОтгрузкеРасход + Таблица.СобраноПриход
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Таблица.ДокументПоступления КАК Распоряжение,
		|
		|		Таблица.Номенклатура     КАК Номенклатура,
		|		Таблица.Характеристика   КАК Характеристика,
		|		Таблица.Склад            КАК Склад,
		|		Таблица.Назначение       КАК Назначение,
		|		Таблица.Серия            КАК Серия
		|
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(,ДокументПоступления В (&МассивЗаказов)) КАК Таблица
		|ГДЕ
		|	Таблица.КОформлениюПоступленийПоОрдерамОстаток <> 0
		|
		|) КАК Набор";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаОборотыКОтгрузкеСОрдерныхСкладов()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ДокументОтгрузки  КАК Распоряжение,
		|	Таблица.КОтгрузкеПриход   КАК Приход,
		|	Таблица.КОтгрузкеРасход + Таблица.КСборкеПриход + Таблица.СобираетсяПриход + Таблица.СобраноПриход КАК Расход //все ордера
		|ПОМЕСТИТЬ ВтОборотыКОтгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,,
		|		ДокументОтгрузки В (&МассивЗаказов)
		|		И Склад В(
		|			ВЫБРАТЬ
		|				СпрСклады.Ссылка КАК Склад
		|			ИЗ
		|				Справочник.Склады КАК СпрСклады
		|			ГДЕ
		|				СпрСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И СпрСклады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата)) КАК Таблица";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ВременнаяТаблицаЧастичноВНаличии()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Заказы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТЧастичноВНаличии
		|ИЗ
		|	ВТОбеспечениеЗаказа КАК Заказы
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК Сведения
		|		ПО Сведения.ЗаказНаОтгрузку = Заказы.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	Заказы.Ссылка
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР КОГДА Сведения.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе) ТОГДА
		|				Сведения.Зарезервировано + Сведения.Обеспечено
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ) < СУММА(Сведения.РезервироватьПоМереПоступления + Сведения.ОтложитьРезервирование + Сведения.КОбеспечениюБезРезерва)";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ВременнаяТаблицаРезервПревышаетОстатки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Заказы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтРезервПревышаетОстатки
		|ИЗ
		|	ВтРеквизитыДокумента КАК Заказы
		|ГДЕ
		|	ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрСведений.РаспределениеЗапасов КАК Записи
		|		ГДЕ
		|			Записи.ЗаказНаОтгрузку = Заказы.Ссылка
		|				И Записи.Состояние В(
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве),
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе))
		|					И Записи.РезервПревышаетОстатки)";
	
	Возврат ТекстЗапроса
	
КонецФункции

Процедура ЗаписатьСостояния(Таблица)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
	
		Набор = РегистрыСведений.СостоянияВнутреннихЗаказов.СоздатьНаборЗаписей();
		Набор.Отбор.Заказ.Установить(СтрокаТаблицы.Заказ);
		
		Если Не СтрокаТаблицы.Состояние.Пустая() Тогда
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
		КонецЕсли;
		
		Набор.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#Область СлужебныеМетодыФормированияСостояний

#Область ТекстыЗапросовПоКонтрольнымРегистрам

Функция ТекстЗапросаТоварыКОтгрузке(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ДокументОтгрузки КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияТоварыКОтгрузкеИзменение КАК Таблица
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Таблица.ДокументОтгрузки) В (ТИП(Документ.ЗаказНаПеремещение),
	|		ТИП(Документ.ЗаказНаСборку),
	|		ТИП(Документ.ЗаказНаВнутреннееПотребление))
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаТоварыКПоступлению(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ДокументПоступления КАК ОтражаемыйДокумент
	|ИЗ
	|	ТоварыКПоступлениюИзменение КАК Таблица
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Таблица.ДокументПоступления) В (ТИП(Документ.ЗаказНаПеремещение),
	|		ТИП(Документ.ЗаказНаСборку),
	|		ТИП(Документ.ЗаказНаВнутреннееПотребление))
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаЗаказыНаПеремещение(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ЗаказНаПеремещение КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияЗаказыНаПеремещениеИзменение КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаЗаказыНаСборку(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ЗаказНаСборку КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияЗаказыНаСборкуИзменение КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаЗаказыНаВнутреннееПотребление(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ЗаказНаВнутреннееПотребление КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияЗаказыНаВнутреннееПотреблениеИзменение КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаДвиженияРаспределениеЗапасовДвиженияИзменение(Запрос)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеДвижения.ЗаказНаОтгрузку КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияРаспределениеЗапасовДвиженияИзменение КАК ВсеДвижения
	|ГДЕ
	|	ВсеДвижения.ЗаказНаОтгрузку <> НЕОПРЕДЕЛЕНО
	|		И ТИПЗНАЧЕНИЯ(ВсеДвижения.ЗаказНаОтгрузку) В(
	|			ТИП(Документ.ЗаказНаВнутреннееПотребление),
	|			ТИП(Документ.ЗаказНаПеремещение),
	|			ТИП(Документ.ЗаказНаСборку))
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;

КонецФункции

Функция ТекстЗапросаСостоянияВнутреннихЗаказовИзменение(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Заказ КАК ОтражаемыйДокумент
	|ИЗ
	|	СостоянияВнутреннихЗаказовИзменение КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
