#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Кэширует свойство Использование регламентных заданий в одноименном реквизите регистра.
//
// Параметры:
//	ОтборОрганизации - Массив - организация для кэширования свойства.
//	
// Возвращаемое значение:
// 	Число - количество обработанных данных для замера производительности
//
Функция ОбновитьКэшСвойстваИспользованиеРегламентногоЗадания(ОтборОрганизации = Неопределено) Экспорт
	
	КоличествоДанных = 0; // для замера производительности
	ОписаниеЗадания  = СформироватьОписаниеЗадания();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Организация КАК Организация,
	|	Задания.РегламентноеЗадание КАК ИдентификаторЗадания,
	|	Задания.ДатаНачалаЗакрытияПрошлогоПериода,
	|	Задания.ЗакрыватьОперативныйУчетВПрошломПериоде,
	|	Задания.ЗакрыватьРегламентированныйУчетВПрошломПериоде,
	|	Задания.ЗакрыватьМеждународныйУчетВПрошломПериоде,
	|	Задания.РежимЗакрытияТекущегоПериода,
	|	Задания.ЗакрыватьОперативныйУчетВТекущемПериоде,
	|	Задания.ЗакрыватьРегламентированныйУчетВТекущемПериоде,
	|	Задания.Использование
	|ИЗ
	|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК Задания
	|ГДЕ
	|	(Задания.Организация В (&ОтборОрганизации)
	|			ИЛИ &ПоВсемОрганизациям)";
	
	Запрос.УстановитьПараметр("ОтборОрганизации", 	ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации));
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ОтборОрганизации));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КоличествоДанных = КоличествоДанных + 1;
		
		Задание = РегламентныеЗаданияСервер.Задание(Выборка.ИдентификаторЗадания);
		
		Если Задание = Неопределено Тогда
			
			// Задание не найдено - удалим запись регистра.
			Запись = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.СоздатьМенеджерЗаписи();
			Запись.Организация = Выборка.Организация;
			
			Запись.Удалить();
			
		ИначеЕсли Задание.Использование <> Выборка.Использование Тогда
			
			// Обновим кэш свойства "Использование".
			ЗаполнитьЗначенияСвойств(ОписаниеЗадания, Выборка);
			ОписаниеЗадания.Использование = Задание.Использование;
			
			ЗаписатьРегламентноеЗаданиеПоОрганизации(ОписаниеЗадания);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоДанных;
	
КонецФункции

// Возвращает описание регламентного задания закрытия месяца по указанной организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация для получения регламентного задания.
//
// Возвращаемое значение:
//	Структура - Описание:
//		* Организация - СправочникСсылка.Организации
//		* ИдентификаторЗадания - УникальныйИдентификатор
//		* ДатаНачалаЗакрытияПрошлогоПериода - Дата
//		* ЗакрыватьОперативныйУчетВПрошломПериоде - Булево
//		* ЗакрыватьРегламентированныйУчетВПрошломПериоде - Булево
//		* ЗакрыватьМеждународныйУчетВПрошломПериоде - Булево
//		* ЗакрыватьОперативныйУчетВТекущемПериоде - Булево
//		* ЗакрыватьРегламентированныйУчетВТекущемПериоде - Булево
//		* Задание - РегламентноеЗадание
//		* СостояниеЗадания - Структура - см. ОбщегоНазначенияУТ.ПолучитьСостояниеПоследнегоЗадания().
//
Функция ПолучитьРегламентноеЗаданиеПоОрганизации(Организация) Экспорт
	
	Если Организация = Неопределено Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	ОписаниеЗадания = СформироватьОписаниеЗадания();
	ОписаниеЗадания.Организация = Организация;
	ОписаниеЗадания.ЗаданиеСуществует = Ложь;
	ОписаниеЗадания.НастройкаСуществует = Ложь;
	ОписаниеЗадания.ДатаНачалаЗакрытияПрошлогоПериода = Дата(1, 1, 1);
	ОписаниеЗадания.ЗакрыватьОперативныйУчетВПрошломПериоде = Ложь;
	ОписаниеЗадания.ЗакрыватьРегламентированныйУчетВПрошломПериоде = Ложь;
	ОписаниеЗадания.ЗакрыватьМеждународныйУчетВПрошломПериоде = Ложь;
	ОписаниеЗадания.РежимЗакрытияТекущегоПериода = Перечисления.РежимыЗакрытияМесяца.ОкончательноеЗакрытие;
	ОписаниеЗадания.ЗакрыватьОперативныйУчетВТекущемПериоде = Ложь;
	ОписаниеЗадания.ЗакрыватьРегламентированныйУчетВТекущемПериоде = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.РегламентноеЗадание,
	|	Задания.ДатаНачалаЗакрытияПрошлогоПериода,
	|	Задания.ЗакрыватьОперативныйУчетВПрошломПериоде,
	|	Задания.ЗакрыватьРегламентированныйУчетВПрошломПериоде,
	|	Задания.ЗакрыватьМеждународныйУчетВПрошломПериоде,
	|	Задания.РежимЗакрытияТекущегоПериода,
	|	Задания.ЗакрыватьОперативныйУчетВТекущемПериоде,
	|	Задания.ЗакрыватьРегламентированныйУчетВТекущемПериоде
	|ИЗ
	|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК Задания
	|ГДЕ
	|	Задания.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеЗадания, Выборка);
		ОписаниеЗадания.НастройкаСуществует  = Истина;
		ОписаниеЗадания.ИдентификаторЗадания = Выборка.РегламентноеЗадание;
	КонецЕсли;
	
	Если ОписаниеЗадания.ИдентификаторЗадания <> Неопределено Тогда
		
		ОписаниеЗадания.Задание = РегламентныеЗаданияСервер.Задание(ОписаниеЗадания.ИдентификаторЗадания);
		
		Если ОписаниеЗадания.Задание <> Неопределено Тогда
			ОписаниеЗадания.ЗаданиеСуществует = Истина;
			ОписаниеЗадания.Использование 	  = ОписаниеЗадания.Задание.Использование; // получаем не из кэша регистра, а из самого задания
			ОписаниеЗадания.СостояниеЗадания  = ОбщегоНазначенияУТ.ПолучитьСостояниеПоследнегоЗадания(ОписаниеЗадания.Задание);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеЗадания;
	
КонецФункции

// Сохраняет параметры регламентного задания закрытия месяца.
//
// Параметры:
//	ОписаниеЗадания - Структура:
//		* Организация - СправочникСсылка.Организации - 
//		* ИдентификаторЗадания - УникальныйИдентификатор -
//		* УдалитьЗакрываемыйПериодОУ - Дата -
//		* УдалитьЗакрываемыйПериодРУ - Дата -
//		* УдалитьЗакрываемыйПериодМУ - Дата -
//
Процедура ЗаписатьРегламентноеЗаданиеПоОрганизации(ОписаниеЗадания) Экспорт
	
	Запись = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(Запись, ОписаниеЗадания);
	Запись.Организация 		   		   = ОписаниеЗадания.Организация;
	Запись.РегламентноеЗадание 		   = ОписаниеЗадания.ИдентификаторЗадания;
	Запись.Использование	   		   = ОписаниеЗадания.Использование;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись.Записать(Истина);
	
КонецПроцедуры

// Возвращает массив организаций, у которых есть включенные регламентные задания закрытия месяца.
//
// Параметры:
//	ОтборОрганизации - Массив - организация для проверки наличия включенного регламентного задания.
//
// Возвращаемое значение:
//	Массив - массив организаций
//
Функция ПолучитьОрганизацииСВключеннымиРегламентнымиЗаданиями(ОтборОрганизации = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК Задания
	|ГДЕ
	|	(Задания.Организация В (&ОтборОрганизации)
	|			ИЛИ &ПоВсемОрганизациям)
	|	И Задания.Использование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ОтборОрганизации", 	ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации));
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ОтборОрганизации));
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьОписаниеЗадания()
	
	Возврат Новый Структура(
		"Организация, ИдентификаторЗадания, ДатаНачалаЗакрытияПрошлогоПериода,
		|ЗакрыватьОперативныйУчетВПрошломПериоде, ЗакрыватьРегламентированныйУчетВПрошломПериоде,
		|ЗакрыватьМеждународныйУчетВПрошломПериоде, РежимЗакрытияТекущегоПериода,
		|ЗакрыватьОперативныйУчетВТекущемПериоде, ЗакрыватьРегламентированныйУчетВТекущемПериоде,
		|Задание, Использование, СостояниеЗадания, ЗаданиеСуществует, НастройкаСуществует");
	
КонецФункции

Процедура ЗаполнитьПризнакНаличияЗаданияУОрганизаций(СписокВыбора) Экспорт
	
	ПустаяКартинка    = Новый Картинка;
	МассивОрганизаций = ПолучитьОрганизацииСВключеннымиРегламентнымиЗаданиями();
	
	Для Каждого ТекущаяОрганизация Из СписокВыбора Цикл
		ЕстьРегламентноеЗадание 	= (МассивОрганизаций.Найти(ТекущаяОрганизация.Значение) <> Неопределено);
		ТекущаяОрганизация.Картинка = ?(ЕстьРегламентноеЗадание, БиблиотекаКартинок.РегламентноеЗадание, ПустаяКартинка);
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b3a2ff1f-8312-4d9c-a28a-156eb9037920");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новые реквизиты регистра сведений %Парам1%.'");
	Обработчик.Комментарий = СтрЗаменить(Обработчик.Комментарий, "%Парам1%", Метаданные.РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.Синоним);
	 
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра             = ПолноеИмяРегистра;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Организация
	|ИЗ
	|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.РежимЗакрытияТекущегоПериода = ЗНАЧЕНИЕ(Перечисление.РежимыЗакрытияМесяца.ПустаяСсылка)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, 
		Результат,
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	МетаданныеРегистра    = Метаданные.РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца;
	ПолноеИмяРегистра     = МетаданныеРегистра.ПолноеИмя();
	ПредставлениеРегистра = МетаданныеРегистра.Представление();
	
	ДополнительныеПараметрыВыборкиДанныхДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяРегистра, ДополнительныеПараметрыВыборкиДанныхДляОбработки);
	
	РассчитыватьПредварительнуюСтоимость = 
		ПолучитьФункциональнуюОпцию("РассчитыватьПредварительнуюСтоимостьРегламентнымЗаданием");
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РегламентныеЗаданияЗакрытияМесяца");
			ЭлементБлокировки.УстановитьЗначение("Организация", Выборка.Организация);
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 И НЕ РассчитыватьПредварительнуюСтоимость Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			Иначе
				Запись = НаборЗаписей[0];
				Если ЗначениеЗаполнено(Запись.УдалитьЗакрываемыйПериодОУ) Тогда
					Запись.ЗакрыватьОперативныйУчетВПрошломПериоде = Истина;
				КонецЕсли;
				Если РассчитыватьПредварительнуюСтоимость Тогда
					Запись.РежимЗакрытияТекущегоПериода = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие;
					Запись.ЗакрыватьОперативныйУчетВТекущемПериоде = Истина;
				Иначе
					Запись.РежимЗакрытияТекущегоПериода = Перечисления.РежимыЗакрытияМесяца.ОкончательноеЗакрытие;
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
		
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать набор записей регистра ""%1"" с отбором ""Организация = %2"" по причине:
				|%3'"), ПредставлениеРегистра, Выборка.Организация, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, , ТекстСообщения);
		
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра) Тогда
		ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
