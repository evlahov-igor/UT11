// 14.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1404 
// За основу настроек взят Отчет.ДвиженияДокумента

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//         - Неопределено
//   КлючВарианта - Строка
//                - Неопределено
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// См. ОтчетыПереопределяемый.ПриСозданииНаСервере.
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.Параметры.ПредставлениеВарианта = "Расшифровка" Тогда
		ВызватьИсключение НСтр("ru = 'Выбранное действие в данном отчете не доступно.'");
	КонецЕсли;
	
	СсылкаНаОбъект = Неопределено;
	
	Если Не Форма.Параметры.Свойство("СсылкаНаОбъект", СсылкаНаОбъект)
		И Не Форма.Параметры.Свойство("ПараметрКоманды", СсылкаНаОбъект)
		И Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда 
		
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровДанных = Новый Структура("СсылкаНаОбъект", СсылкаНаОбъект);
	УстановитьПараметрыДанных(КомпоновщикНастроек.Настройки, СтруктураПараметровДанных, 
		КомпоновщикНастроек.ПользовательскиеНастройки);
	
КонецПроцедуры

// См. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере.
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	НайденныйПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СсылкаНаОбъект");
	Если НайденныйПараметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = НайденныйПараметр.Значение;
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровДанных = Новый Структура("СсылкаНаОбъект", СсылкаНаОбъект);
	УстановитьПараметрыДанных(НовыеНастройкиКД, СтруктураПараметровДанных);
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - Произвольный - 
//       Параметры контекста, в котором используется отчет.
//       Используется для передачи в параметрах метода ОтчетыСервер.ПодключитьСхему().
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже.
//       Может не использоваться если переинициализация выполняется безусловно.
//   КлючВарианта - Строка
//                - Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов для варианта расшифровки или без контекста.
//   Настройки - НастройкиКомпоновкиДанных
//             - Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//   ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных
//                             - Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда пользовательские настройки не надо загружать (уже загружены ранее).
//
// Варианты вызова:
//   Если КлючСхемы <> "1" Тогда
//   	КлючСхемы = "1";
//   	СхемаКД = ПолучитьОбщийМакет("МояОбщаяСхемаКомпоновки");
//   	ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//   КонецЕсли; - компоновщик отчета инициализируется на основании схемы из общих макетов.
//   Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
//   	ПолноеИмяОбъектаМетаданных = "";
//   	Для Каждого ЭлементКД Из НовыеПользовательскиеНастройкиКД.Элементы Цикл
//   		Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
//   			ИмяПараметра = Строка(ЭлементКД.Параметр);
//   			Если ИмяПараметра = "ОбъектМетаданных" Тогда
//   				ПолноеИмяОбъектаМетаданных = ЭлементКД.Значение;
//   			КонецЕсли;
//   		КонецЕсли;
//   	КонецЦикла;
//   	Если КлючСхемы <> ПолноеИмяОбъектаМетаданных Тогда
//   		КлючСхемы = ПолноеИмяОбъектаМетаданных;
//   		СхемаКД = Новый СхемаКомпоновкиДанных;
//   		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//   	КонецЕсли;
//   КонецЕсли; - схема зависит от значения параметра, выведенного в пользовательские настройки отчета.
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, Настройки, ПользовательскиеНастройки) Экспорт
		
	Если ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Если ТипЗнч(ПользовательскиеНастройки) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	КонецЕсли;

	НайденныйПараметр = Настройки.ПараметрыДанных.Элементы.Найти("СсылкаНаОбъект");
	Если НайденныйПараметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = НайденныйПараметр.Значение;
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровДанных = Новый Структура("СсылкаНаОбъект", СсылкаНаОбъект);
	УстановитьПараметрыДанных(Настройки, СтруктураПараметровДанных, ПользовательскиеНастройки);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
    СтандартнаяОбработка = Ложь;
	
	//
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 
	
	//
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;  
	УстановитьВременнуюТаблицуСсылкиНаОбъекты(НастройкиОтчета, МенеджерВременныхТаблиц);
	
	//
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанных"));
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , ДанныеРасшифровки, Истина, , МенеджерВременныхТаблиц);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Процедура УстановитьПараметрыДанных(Настройки, ЗначенияПараметров, ПользовательскиеНастройки = Неопределено)
	
	ПараметрыДанных = Настройки.ПараметрыДанных.Элементы;
	
	Для Каждого ЗначениеПараметра Из ЗначенияПараметров Цикл 
		
		ПараметрДанных = ПараметрыДанных.Найти(ЗначениеПараметра.Ключ);
		
		Если ПараметрДанных = Неопределено Тогда
			ПараметрДанных = ПараметрыДанных.Добавить();
			ПараметрДанных.Параметр = Новый ПараметрКомпоновкиДанных(ЗначениеПараметра.Ключ);
		КонецЕсли;
		
		ПараметрДанных.Использование = Истина;
		ПараметрДанных.Значение = ЗначениеПараметра.Значение;
		
		Если Не ЗначениеЗаполнено(ПараметрДанных.ИдентификаторПользовательскойНастройки)
			Или ТипЗнч(ПользовательскиеНастройки) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		СоответствующийПараметр = ПользовательскиеНастройки.Элементы.Найти(
			ПараметрДанных.ИдентификаторПользовательскойНастройки);
		
		Если СоответствующийПараметр <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(СоответствующийПараметр, ПараметрДанных, "Использование, Значение");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыОтчета(Настройки, ПользовательскиеНастройки)
	
	Результат = Новый Структура("СсылкаНаОбъект");
		
	НайденныйПараметр = Неопределено;
	
	Если ТипЗнч(ПользовательскиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого Элемент Из ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ИмяПараметра = Строка(Элемент.Параметр);
				Если ИмяПараметра = "СсылкаНаОбъект" Тогда
					 НайденныйПараметр = Элемент;
					 Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НайденныйПараметр = Неопределено
		Или Не ЗначениеЗаполнено(НайденныйПараметр.Значение) Тогда
		
		НайденныйПараметр = Настройки.ПараметрыДанных.Элементы.Найти("СсылкаНаОбъект");
	КонецЕсли;
	
	Если НайденныйПараметр <> Неопределено Тогда
		Результат.СсылкаНаОбъект = НайденныйПараметр.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьВременнуюТаблицуСсылкиНаОбъекты(НастройкиОтчета, МенеджерВременныхТаблиц)   
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.КлючСообщения КАК КлючСообщения,
	|	Т.СписокСсылокНаОбъекты КАК СписокСсылокНаОбъекты,
	|	1 КАК ТипИсточника
	|ИЗ
	|	РегистрСведений.КР_ВходящиеСообщения КАК Т
	|ГДЕ
	|	(НЕ &ЕстьОтборТипИсточника
	|			ИЛИ 1 В (&ТипИсточника))
	|	И (НЕ &ЕстьОтборПоСсылке
	|			ИЛИ Т.СписокСсылокНаОбъекты ПОДОБНО ""%"" + &СсылкаНаОбъектСрокой + ""%"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.КлючСообщения,
	|	Т.СписокСсылокНаОбъекты,
	|	-1
	|ИЗ
	|	РегистрСведений.КР_ИсходящиеСообщения КАК Т
	|ГДЕ
	|	(НЕ &ЕстьОтборТипИсточника
	|			ИЛИ -1 В (&ТипИсточника))
	|	И (НЕ &ЕстьОтборПоСсылке
	|			ИЛИ Т.СписокСсылокНаОбъекты ПОДОБНО ""%"" + &СсылкаНаОбъектСрокой + ""%"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.КлючСообщения,
	|	Т.СписокСсылокНаОбъекты,
	|	0
	|ИЗ
	|	РегистрСведений.КР_АрхивСообщений КАК Т
	|ГДЕ
	|	(НЕ &ЕстьОтборТипИсточника
	|			ИЛИ 0 В (&ТипИсточника))
	|	И (НЕ &ЕстьОтборПоСсылке
	|			ИЛИ Т.СписокСсылокНаОбъекты ПОДОБНО ""%"" + &СсылкаНаОбъектСрокой + ""%"")";
	
	Запрос = Новый Запрос(ТекстЗапроса); 
	
	// ТипИсточника
	ПараметрТипИсточника = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ТипИсточника");
	Запрос.УстановитьПараметр("ЕстьОтборТипИсточника", ПараметрТипИсточника.Использование); 
	Запрос.УстановитьПараметр("ТипИсточника", ПараметрТипИсточника.Значение); 
	
	МодульКонвертации = КР_ОбщегоНазначениеСервер;

	// СсылкаНаОбъект
	ПараметрСсылкаНаОбъект = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "СсылкаНаОбъект");
	Запрос.УстановитьПараметр("ЕстьОтборПоСсылке", ПараметрСсылкаНаОбъект.Использование);  
	Если ЗначениеЗаполнено(ПараметрСсылкаНаОбъект.Значение) Тогда 

		СсылкаСтруктурой = МодульКонвертации.СсылкаВСтруктуру(ПараметрСсылкаНаОбъект.Значение);
		// Удалим представление потому что оно может поменяться
		СсылкаСтруктурой.Удалить("Представление");
		СсылкаНаОбъектСрокой = МодульКонвертации.ДанныеВJSON(СсылкаСтруктурой);
		
		// Удалим последнюю фигурную скобку так как исходный текст ссылки содержит еще 1 парамер который мы удалили
		СсылкаНаОбъектСрокой = Сред(СсылкаНаОбъектСрокой, 2, СтрДлина(СсылкаНаОбъектСрокой) - 2);
		
	Иначе
		СсылкаНаОбъектСрокой = "<НеИспользовать>"	
	КонецЕсли;	
	Запрос.УстановитьПараметр("СсылкаНаОбъектСрокой", СсылкаНаОбъектСрокой); 
	
	// Готовим таблицу для данных
	СсылкиНаОбъекты = Новый ТаблицаЗначений;
	СсылкиНаОбъекты.Колонки.Добавить("КлючСообщения", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	СсылкиНаОбъекты.Колонки.Добавить("ТипИсточника", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	СсылкиНаОбъекты.Колонки.Добавить("Ссылка", ОбщегоНазначения.ОписаниеТипаВсеСсылки());  
	
	// заполняем данными
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Данные = МодульКонвертации.JSONВДанные(ВыборкаДетальныеЗаписи.СписокСсылокНаОбъекты); 
		Для Каждого ЭлементМассива Из Данные Цикл 
			НоваяСтрока = СсылкиНаОбъекты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			НоваяСтрока.Ссылка = МодульКонвертации.СтруктураВСсылку(ЭлементМассива);
		КонецЦикла;	
		
	КонецЦикла;	 
	
	// Помещаем в менеджер 
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.КлючСообщения КАК КлючСообщения,
	|	Т.ТипИсточника КАК ТипИсточника,
	|	Т.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СсылкиНаОбъекты
	|ИЗ
	|	&СсылкиНаОбъекты КАК Т";
	
	Запрос.УстановитьПараметр("СсылкиНаОбъекты", СсылкиНаОбъекты);
	Запрос.Выполнить();
	
КонецПроцедуры	

#КонецОбласти
