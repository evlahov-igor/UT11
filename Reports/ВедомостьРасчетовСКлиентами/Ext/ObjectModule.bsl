#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета:
//   	* Параметры - Структура:
//   		** ОписаниеКоманды - Структура:
//   			*** ДополнительныеПараметры - Структура.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	
	Если Параметры.Свойство("ПараметрКоманды")
			И Параметры.Свойство("ОписаниеКоманды")
			И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда 
		
		СформироватьПараметрыОтчета(Параметры.ПараметрКоманды, ЭтаФорма.ФормаПараметры, Параметры);
		
		ПараметрКоманды = Параметры.ПараметрКоманды;
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
			Если ПараметрКоманды.Количество() > 0 Тогда
				ПервыйЭлемент = ПараметрКоманды[0];
			Иначе
				ПервыйЭлемент = Неопределено;
			КонецЕсли;
		Иначе
			ПервыйЭлемент = ПараметрКоманды;
		КонецЕсли;
		
		Если ТипЗнч(ПервыйЭлемент) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
			ЭтаФорма.ФормаПараметры.Отбор = Новый Структура("ВзаимозачетЗадолженности", ПараметрКоманды);
			ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = "ВзаимозачетЗадолженности";
			Параметры.КлючНазначенияИспользования = "ВзаимозачетЗадолженности";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаПараметры = ЭтаФорма.ФормаПараметры;
	
	Если ФормаПараметры.Свойство("Отбор")
	 И ФормаПараметры.Отбор.Свойство("ВзаимозачетЗадолженности") Тогда
		ВзаимозачетСсылка = ФормаПараметры.Отбор.ВзаимозачетЗадолженности[0];
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВзаимозачетСсылка, "Дата,ВидОперации,Организация,ОрганизацияКредитор,КонтрагентДебитор,КонтрагентКредитор");
		Если Реквизиты <> Неопределено Тогда
			Если ЗначениеЗаполнено(Реквизиты.Организация) Тогда	
				ФормаПараметры.Отбор.Вставить("Организация", Реквизиты.Организация);
				Если ЗначениеЗаполнено(Реквизиты.ОрганизацияКредитор) Тогда
					Отбор = Новый Массив;
					Отбор.Добавить(Реквизиты.Организация);
					Отбор.Добавить(Реквизиты.ОрганизацияКредитор);
					ФормаПараметры.Отбор.Вставить("Организация", Отбор);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Реквизиты.КонтрагентДебитор) Тогда
				КонтрагентДебитор = Реквизиты.КонтрагентДебитор;
				Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
					КонтрагентДебитор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.КонтрагентДебитор,"Партнер");
				КонецЕсли;
				ОтборПоКонрагенту = КонтрагентДебитор; 
				Если ЗначениеЗаполнено(Реквизиты.КонтрагентКредитор)
					И Реквизиты.КонтрагентКредитор <> Реквизиты.КонтрагентДебитор Тогда
					КонтрагентКредитор = Реквизиты.КонтрагентКредитор;
					Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
						КонтрагентКредитор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.КонтрагентКредитор,"Партнер");
					КонецЕсли; 
					ОтборПоКонрагенту = Новый Массив;
					ОтборПоКонрагенту.Добавить(КонтрагентДебитор);
					ОтборПоКонрагенту.Добавить(КонтрагентКредитор);
				КонецЕсли;
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
					ФормаПараметры.Отбор.Вставить("Контрагент", ОтборПоКонрагенту);
				Иначе
					ФормаПараметры.Отбор.Вставить("Партнер", ОтборПоКонрагенту);
				КонецЕсли;
			КонецЕсли;
			Период = Новый СтандартныйПериод;
			Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
			Период.ДатаНачала = НачалоМесяца(Реквизиты.Дата);
			Период.ДатаОкончания = КонецДня(Реквизиты.Дата);
			ФормаПараметры.Отбор.Вставить("Период", Период);
		КонецЕсли;
		ФормаПараметры.Отбор.Удалить("ВзаимозачетЗадолженности");
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	// Изменение настроек по функциональным опциям
	НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы);
	
	// Установка значений по умолчанию
	УстановитьОбязательныеНастройки(КомпоновщикНастроекФормы, Истина);
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	УстановитьОбязательныеНастройки(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	
	// Сформируем отчет
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Определим состав выбранных полей
	МассивВыбранныхПолей = Новый Массив;
	НайтиВыбранныеПоляРекурсивно(НастройкиОтчета.Выбор.Элементы, МассивВыбранныхПолей);
	УстановитьНастройкиОтбораНепустыхПолей(НастройкиОтчета, МассивВыбранныхПолей, СхемаКомпоновкиДанных.ВычисляемыеПоля);
	
	// Установим тексты запросов наборов данных:
	// Расчеты по срокам
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных; // НаборДанныхОбъединениеСхемыКомпоновкиДанных 
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаВтОтборПоСегментуПартнеров());
	ТекстыЗапросов.Добавить(ТекстЗапросаРасчетыПоСрокам(МассивВыбранныхПолей, НастройкиОтчета, СхемаКомпоновкиДанных.ВычисляемыеПоля));
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ";");
	НаборДанных.Элементы.РасчетыПоСрокам.Запрос = ТекстЗапроса;
	
	// План оплат
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаВтОтборПоСегментуПартнеров());
	ТекстыЗапросов.Добавить(ТекстЗапросаВтКурсыВалют());
	ТекстыЗапросов.Добавить(ТекстЗапросаПланОплат(МассивВыбранныхПолей, НастройкиОтчета, СхемаКомпоновкиДанных.ВычисляемыеПоля));
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ";");
	НаборДанных.Элементы.ПланОплат.Запрос = ТекстЗапроса;
	
	// План отгрузок
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаВтОтборПоСегментуПартнеров());
	ТекстыЗапросов.Добавить(ТекстЗапросаВтКурсыВалют());
	ТекстыЗапросов.Добавить(ТекстЗапросаПланОтгрузок(МассивВыбранныхПолей, НастройкиОтчета, СхемаКомпоновкиДанных.ВычисляемыеПоля));
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ";");
	НаборДанных.Элементы.ПланОтгрузок.Запрос = ТекстЗапроса;
	
	// Расчеты
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаВтОтборПоСегментуПартнеров());
	ТекстыЗапросов.Добавить(ТекстЗапросаВтКурсыВалют());
	ТекстыЗапросов.Добавить(ТекстЗапросаРасчеты());
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ";");
	НаборДанных.Элементы.Расчеты.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	//Предупреждение о невыполенном распределении взаиморасчетов.
	ВзаиморасчетыСервер.ВывестиПредупреждениеОбОбновлении(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОбязательныеНастройки(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы)
	
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикНастроек);
	
КонецПроцедуры

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, "Контрагент");
	КонецЕсли;
КонецПроцедуры

Функция ТекстЗапросаРасчетыПоСрокам(МассивВыбранныхПолей, НастройкиОтчета, ВычисляемыеПоля)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитикаУчета.Организация                                     КАК Организация,
	|	АналитикаУчета.Партнер                                         КАК Партнер,
	|	АналитикаУчета.Контрагент                                      КАК Контрагент,
	|	АналитикаУчета.Договор                                         КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности                         КАК НаправлениеДеятельности,
	|	РасчетыПоСрокам.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                                          КАК Валюта,
	|	РасчетыПоСрокам.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	РасчетыПоСрокам.ДатаВозникновения                              КАК ДатаВозникновения,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|
	|	NULL                                                           КАК Регистратор,
	|	РасчетыПоСрокам.Регистратор                                    КАК РегистраторРасчетов,
	|	РасчетыПоСрокам.ПериодСекунда                                  КАК ПериодСекунда,
	|
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглНачальныйОстаток
	|	КОНЕЦ                                                          КАК ДолгКлиентаНачальныйОстаток,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглНачальныйОстаток
	|	КОНЕЦ                                                          КАК НашДолгНачальныйОстаток,
	|	0                                                              КАК ПлановаяОплатаНачальныйОстаток,
	|	0                                                              КАК ПлановаяОтгрузкаНачальныйОстаток,
	|
	|	0                                                              КАК Заказано,
	|	0                                                              КАК ЗаказаноКОплате,
	|	0                                                              КАК Отгружено,
	|	0                                                              КАК Зачтено,
	|	0                                                              КАК Оплачено,
	|	0                                                              КАК СписаниеПереоценка,
	|	0                                                              КАК Оплачивается,
	|	0                                                              КАК Отгружается,
	|
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглКонечныйОстаток
	|	КОНЕЦ                                                          КАК ДолгКлиентаКонечныйОстаток,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглКонечныйОстаток
	|	КОНЕЦ                                                          КАК НашДолгКонечныйОстаток,
	|	0                                                              КАК ПлановаяОплатаКонечныйОстаток,
	|	0                                                              КАК ПлановаяОтгрузкаКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.ОстаткиИОбороты({&НачалоПериода}, {&КонецПериода}, Авто) КАК РасчетыПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И (ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглНачальныйОстаток
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглНачальныйОстаток
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглКонечныйОстаток
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглКонечныйОстаток
	|	КОНЕЦ <> 0)
	|{ГДЕ
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|		(ВЫБРАТЬ
	|			ОтборПоСегментуПартнеров.Партнер
	|		ИЗ
	|			ОтборПоСегментуПартнеров
	|		ГДЕ
	|			ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналитикаУчета.Организация                                     КАК Организация,
	|	АналитикаУчета.Партнер                                         КАК Партнер,
	|	АналитикаУчета.Контрагент                                      КАК Контрагент,
	|	АналитикаУчета.Договор                                         КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности                         КАК НаправлениеДеятельности,
	|	РасчетыПоСрокам.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                                          КАК Валюта,
	|	РасчетыПоСрокам.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	РасчетыПоСрокам.ДатаВозникновения                              КАК ДатаВозникновения,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|
	|	РасчетыПоСрокам.ДокументРегистратор                            КАК Регистратор,
	|	РасчетыПоСрокам.Регистратор                                    КАК РегистраторРасчетов,
	|	РасчетыПоСрокам.Период                                         КАК ПериодСекунда,
	|
	|	0                                                              КАК ДолгКлиентаНачальныйОстаток,
	|	0                                                              КАК НашДолгНачальныйОстаток,
	|	0                                                              КАК ПлановаяОплатаНачальныйОстаток,
	|	0                                                              КАК ПлановаяОтгрузкаНачальныйОстаток,
	|
	|	0                                                              КАК Заказано,
	|	0                                                              КАК ЗаказаноКОплате,
	|	&Отгружено                                                     КАК Отгружено,
	|	&Зачтено                                                       КАК Зачтено,
	|	&Оплачено                                                      КАК Оплачено,
	|	&СписаниеПереоценка                                            КАК СписаниеПереоценка,
	|	0                                                              КАК Оплачивается,
	|	0                                                              КАК Отгружается,
	|
	|	0                                                              КАК ДолгКлиентаКонечныйОстаток,
	|	0                                                              КАК НашДолгКонечныйОстаток,
	|	0                                                              КАК ПлановаяОплатаКонечныйОстаток,
	|	0                                                              КАК ПлановаяОтгрузкаКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И (&ОтборыВыбранныхПолей)
	|{ГДЕ
	|	РасчетыПоСрокам.Период МЕЖДУ &НачалоПериода И &КонецПериода,
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|";
	
	ТекстОтборов = "";
	Для Каждого ВыбранноеПоле Из МассивВыбранныхПолей Цикл
		Если ВычисляемыеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле) <> Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле).Тип.Типы().Найти(Тип("Число")) <> Неопределено Тогда
			Если СтрНайти(Строка(ВыбранноеПоле.Поле),"ПользовательскиеПоля") = 0 
				И СтрНайти("&Отгружено, &Зачтено, &Оплачено, &СписаниеПереоценка", Строка(ВыбранноеПоле.Поле)) > 0 Тогда
				ТекстОтборов = ТекстОтборов + ?(ТекстОтборов = "","", "ИЛИ") +"
					|	&" + Строка(ВыбранноеПоле.Поле) + " <> 0 ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборыВыбранныхПолей", ?(ТекстОтборов = "", "ЛОЖЬ", ТекстОтборов));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Отгружено", ВзаиморасчетыСервер.ШаблонПоляОтгруженоКлиенту());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Зачтено", ВзаиморасчетыСервер.ШаблонПоляЗачтеноКлиенту());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Оплачено", ВзаиморасчетыСервер.ШаблонПоляОплаченоКлиентом());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СписаниеПереоценка", ВзаиморасчетыСервер.ШаблонПоляСписаниеПереоценкаЗадолженности());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПланОплат(МассивВыбранныхПолей, НастройкиОтчета, ВычисляемыеПоля)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитикаУчета.Организация               КАК Организация,
	|	АналитикаУчета.Партнер                   КАК Партнер,
	|	АналитикаУчета.Контрагент                КАК Контрагент,
	|	АналитикаУчета.Договор                   КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	РасчетыПланОплат.ОбъектРасчетов          КАК ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПланОплат.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                    КАК Валюта,
	|	РасчетыПланОплат.ДокументПлан            КАК РасчетныйДокумент,
	|	РасчетыПланОплат.ДатаВозникновения       КАК ДатаВозникновения,
	|	РасчетыПланОплат.ДатаПлановогоПогашения  КАК ДатаПлановогоПогашения,
	|	
	|	NULL                                     КАК Регистратор,
	|	РасчетыПланОплат.Регистратор             КАК РегистраторРасчетов,
	|	РасчетыПланОплат.ПериодСекунда           КАК ПериодСекунда,
	|	
	|	0                                        КАК ДолгКлиентаНачальныйОстаток,
	|	0                                        КАК НашДолгНачальныйОстаток,
	|	РасчетыПланОплат.КОплатеНачальныйОстаток *
	|		КурсВалюты.Коэффициент               КАК ПлановаяОплатаНачальныйОстаток,
	|	0                                        КАК ПлановаяОтгрузкаНачальныйОстаток,
	|	
	|	0                                        КАК Заказано,
	|	0                                        КАК ЗаказаноКОплате,
	|	0                                        КАК Отгружено,
	|	0                                        КАК Зачтено,
	|	0                                        КАК Оплачено,
	|	0                                        КАК СписаниеПереоценка,
	|	0                                        КАК Оплачивается,
	|	0                                        КАК Отгружается,
	|	
	|	0                                        КАК ДолгКлиентаКонечныйОстаток,
	|	0                                        КАК НашДолгКонечныйОстаток,
	|	РасчетыПланОплат.КОплатеКонечныйОстаток *
	|		КурсВалюты.Коэффициент               КАК ПлановаяОплатаКонечныйОстаток,
	|	0                                        КАК ПлановаяОтгрузкаКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат.ОстаткиИОбороты({(&НачалоПериода)}, {(&КонецПериода)}, Авто) КАК РасчетыПланОплат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО РасчетыПланОплат.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалюты
	|		ПО (КурсВалюты.Валюта = РасчетыПланОплат.Валюта)
	|			И (КурсВалюты.Организация = АналитикаУчета.Организация)
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|{ГДЕ
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналитикаУчета.Организация               КАК Организация,
	|	АналитикаУчета.Партнер                   КАК Партнер,
	|	АналитикаУчета.Контрагент                КАК Контрагент,
	|	АналитикаУчета.Договор                   КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	РасчетыПланОплат.ОбъектРасчетов          КАК ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПланОплат.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                    КАК Валюта,
	|	РасчетыПланОплат.ДокументПлан            КАК РасчетныйДокумент,
	|	РасчетыПланОплат.ДатаВозникновения       КАК ДатаВозникновения,
	|	РасчетыПланОплат.ДатаПлановогоПогашения  КАК ДатаПлановогоПогашения,
	|	
	|	РасчетыПланОплат.ДокументРегистратор     КАК Регистратор,
	|	РасчетыПланОплат.Регистратор             КАК РегистраторРасчетов,
	|	РасчетыПланОплат.Период                  КАК ПериодСекунда,
	|	
	|	0                                        КАК ДолгКлиентаНачальныйОстаток,
	|	0                                        КАК НашДолгНачальныйОстаток,
	|	0                                        КАК ПлановаяОплатаНачальныйОстаток,
	|	0                                        КАК ПлановаяОтгрузкаНачальныйОстаток,
	|	
	|	0                                        КАК Заказано,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыПланОплат.ДокументПлан) В (&ТипыДокументовПлана)
	|				И РасчетыПланОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПланОплат.КОплате
	|		ИНАЧЕ 0
	|	КОНЕЦ * КурсВалюты.Коэффициент           КАК ЗаказаноКОплате,
	|	0                                        КАК Отгружено,
	|	0                                        КАК Зачтено,
	|	0                                        КАК Оплачено,
	|	0                                        КАК СписаниеПереоценка,
	|	0                                        КАК Оплачивается,
	|	0                                        КАК Отгружается,
	|	
	|	0                                        КАК ДолгКлиентаКонечныйОстаток,
	|	0                                        КАК НашДолгКонечныйОстаток,
	|	0                                        КАК ПлановаяОплатаКонечныйОстаток,
	|	0                                        КАК ПлановаяОтгрузкаКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыПланОплат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО РасчетыПланОплат.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалюты
	|		ПО (КурсВалюты.Валюта = РасчетыПланОплат.Валюта)
	|			И (КурсВалюты.Организация = АналитикаУчета.Организация)
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И &ЗаказаноКОплате
	|{ГДЕ
	|	РасчетыПланОплат.Период МЕЖДУ &НачалоПериода И &КонецПериода,
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|";
	
	Для Каждого ВыбранноеПоле Из МассивВыбранныхПолей Цикл
		Если ВычисляемыеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле) <> Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле).Тип.Типы().Найти(Тип("Число")) <> Неопределено Тогда
			Если СтрНайти(Строка(ВыбранноеПоле.Поле),"ПользовательскиеПоля") = 0 
				И Строка(ВыбранноеПоле.Поле) = "ЗаказаноКОплате" Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказаноКОплате", "
					|	ВЫБОР
					|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыПланОплат.ДокументПлан) В (&ТипыДокументовПлана)
					|				И РасчетыПланОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
					|			ТОГДА РасчетыПланОплат.КОплате <> 0
					|		ИНАЧЕ ЛОЖЬ
					|	КОНЕЦ
					|");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказаноКОплате", "ЛОЖЬ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТипыДокументовПлана", ПолучитьТипыДокументовПлана());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПланОтгрузок(МассивВыбранныхПолей, НастройкиОтчета, ВычисляемыеПоля)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитикаУчета.Организация                  КАК Организация,
	|	АналитикаУчета.Партнер                      КАК Партнер,
	|	АналитикаУчета.Контрагент                   КАК Контрагент,
	|	АналитикаУчета.Договор                      КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	РасчетыПланОтгрузок.ОбъектРасчетов          КАК ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПланОтгрузок.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                       КАК Валюта,
	|	РасчетыПланОтгрузок.ДокументПлан            КАК РасчетныйДокумент,
	|	РасчетыПланОтгрузок.ДатаВозникновения       КАК ДатаВозникновения,
	|	РасчетыПланОтгрузок.ДатаПлановогоПогашения  КАК ДатаПлановогоПогашения,
	|	
	|	NULL                                        КАК Регистратор,
	|	РасчетыПланОтгрузок.Регистратор             КАК РегистраторРасчетов,
	|	РасчетыПланОтгрузок.ПериодСекунда           КАК ПериодСекунда,
	|	
	|	0                                           КАК ДолгКлиентаНачальныйОстаток,
	|	0                                           КАК НашДолгНачальныйОстаток,
	|	0                                           КАК ПлановаяОплатаНачальныйОстаток,
	|	РасчетыПланОтгрузок.СуммаНачальныйОстаток
	|		* КурсВалюты.Коэффициент                КАК ПлановаяОтгрузкаНачальныйОстаток,
	|	
	|	0                                           КАК Заказано,
	|	0                                           КАК ЗаказаноКОплате,
	|	0                                           КАК Отгружено,
	|	0                                           КАК Зачтено,
	|	0                                           КАК Оплачено,
	|	0                                           КАК СписаниеПереоценка,
	|	0                                           КАК Оплачивается,
	|	0                                           КАК Отгружается,
	|	
	|	0                                           КАК ДолгКлиентаКонечныйОстаток,
	|	0                                           КАК НашДолгКонечныйОстаток,
	|	0                                           КАК ПлановаяОплатаКонечныйОстаток,
	|	РасчетыПланОтгрузок.СуммаКонечныйОстаток
	|		* КурсВалюты.Коэффициент                КАК ПлановаяОтгрузкаКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок.ОстаткиИОбороты({&НачалоПериода}, {&КонецПериода}, Авто) КАК РасчетыПланОтгрузок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыПланОтгрузок.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалюты
	|			ПО (КурсВалюты.Валюта = РасчетыПланОтгрузок.Валюта)
	|				И (КурсВалюты.Организация = АналитикаУчета.Организация)
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|{ГДЕ
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналитикаУчета.Организация                  КАК Организация,
	|	АналитикаУчета.Партнер                      КАК Партнер,
	|	АналитикаУчета.Контрагент                   КАК Контрагент,
	|	АналитикаУчета.Договор                      КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	РасчетыПланОтгрузок.ОбъектРасчетов          КАК ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПланОтгрузок.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                       КАК Валюта,
	|	РасчетыПланОтгрузок.ДокументПлан            КАК РасчетныйДокумент,
	|	РасчетыПланОтгрузок.ДатаВозникновения       КАК ДатаВозникновения,
	|	РасчетыПланОтгрузок.ДатаПлановогоПогашения  КАК ДатаПлановогоПогашения,
	|	
	|	РасчетыПланОтгрузок.ДокументРегистратор     КАК Регистратор,
	|	РасчетыПланОтгрузок.Регистратор             КАК РегистраторРасчетов,
	|	РасчетыПланОтгрузок.Период                  КАК ПериодСекунда,
	|	
	|	0                                           КАК ДолгКлиентаНачальныйОстаток,
	|	0                                           КАК НашДолгНачальныйОстаток,
	|	0                                           КАК ПлановаяОплатаНачальныйОстаток,
	|	0                                           КАК ПлановаяОтгрузкаНачальныйОстаток,
	|	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыПланОтгрузок.ДокументПлан) В (&ТипыДокументовПлана)
	|				И РасчетыПланОтгрузок.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПланОтгрузок.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ * КурсВалюты.Коэффициент              КАК Заказано,
	|	0                                           КАК ЗаказаноКОплате,
	|	0                                           КАК Отгружено,
	|	0                                           КАК Зачтено,
	|	0                                           КАК Оплачено,
	|	0                                           КАК СписаниеПереоценка,
	|	0                                           КАК Оплачивается,
	|	0                                           КАК Отгружается,
	|	
	|	0                                           КАК ДолгКлиентаКонечныйОстаток,
	|	0                                           КАК НашДолгКонечныйОстаток,
	|	0                                           КАК ПлановаяОплатаКонечныйОстаток,
	|	0                                           КАК ПлановаяОтгрузкаКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК РасчетыПланОтгрузок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыПланОтгрузок.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалюты
	|			ПО (КурсВалюты.Валюта = РасчетыПланОтгрузок.Валюта)
	|				И (КурсВалюты.Организация = АналитикаУчета.Организация)
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И &Заказано
	|{ГДЕ
	|	РасчетыПланОтгрузок.Период МЕЖДУ &НачалоПериода И &КонецПериода,
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|";
	
	Для Каждого ВыбранноеПоле Из МассивВыбранныхПолей Цикл
		Если ВычисляемыеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле) <> Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле).Тип.Типы().Найти(Тип("Число")) <> Неопределено Тогда
			Если СтрНайти(Строка(ВыбранноеПоле.Поле),"ПользовательскиеПоля") = 0 
				И Строка(ВыбранноеПоле.Поле) = "Заказано" Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Заказано", "
					|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыПланОтгрузок.ДокументПлан) В (&ТипыДокументовПлана)
					|				И РасчетыПланОтгрузок.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
					|			ТОГДА РасчетыПланОтгрузок.Сумма <> 0
					|		ИНАЧЕ ЛОЖЬ
					|	КОНЕЦ
					|");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Заказано", "ЛОЖЬ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТипыДокументовПлана", ПолучитьТипыДокументовПлана());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчеты()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитикаУчета.Организация                  КАК Организация,
	|	АналитикаУчета.Партнер                      КАК Партнер,
	|	АналитикаУчета.Контрагент                   КАК Контрагент,
	|	АналитикаУчета.Договор                      КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	РасчетыСКлиентами.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыСКлиентами.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                       КАК Валюта,
	|	Неопределено                                КАК РасчетныйДокумент,
	|	ДАТАВРЕМЯ(1,1,1)                            КАК ДатаВозникновения,
	|	ДАТАВРЕМЯ(1,1,1)                            КАК ДатаПлановогоПогашения,
	|	
	|	NULL                                        КАК Регистратор,
	|	РасчетыСКлиентами.Регистратор               КАК РегистраторРасчетов,
	|	РасчетыСКлиентами.ПериодСекунда             КАК ПериодСекунда,
	|	
	|	0                                           КАК ДолгКлиентаНачальныйОстаток,
	|	0                                           КАК НашДолгНачальныйОстаток,
	|	0                                           КАК ПлановаяОплатаНачальныйОстаток,
	|	0                                           КАК ПлановаяОтгрузкаНачальныйОстаток,
	|	
	|	0                                           КАК Заказано,
	|	0                                           КАК ЗаказаноКОплате,
	|	0                                           КАК Отгружено,
	|	0                                           КАК Зачтено,
	|	0                                           КАК Оплачено,
	|	0                                           КАК СписаниеПереоценка,
	|	ВЫБОР КОГДА РасчетыСКлиентами.ОплачиваетсяКонечныйОстаток > 0 
	|			ТОГДА РасчетыСКлиентами.ОплачиваетсяКонечныйОстаток 
	|		ИНАЧЕ 0 
	|	КОНЕЦ * КурсВалюты.Коэффициент              КАК Оплачивается,
	|	ВЫБОР КОГДА РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток > 0 
	|			ТОГДА РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток
	|		ИНАЧЕ 0 
	|	КОНЕЦ * КурсВалюты.Коэффициент              КАК Отгружается,
	|	
	|	0                                           КАК ДолгКлиентаКонечныйОстаток,
	|	0                                           КАК НашДолгКонечныйОстаток,
	|	0                                           КАК ПлановаяОплатаКонечныйОстаток,
	|	0                                           КАК ПлановаяОтгрузкаКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты({&НачалоПериода}, {&КонецПериода}, Авто) КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалюты
	|			ПО (КурсВалюты.Валюта = РасчетыСКлиентами.Валюта)
	|				И (КурсВалюты.Организация = АналитикаУчета.Организация)
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И (РасчетыСКлиентами.ОплачиваетсяКонечныйОстаток > 0 
	|		ИЛИ РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток > 0)
	|{ГДЕ
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОтборПоСегментуПартнеров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сегменты.Партнер КАК Партнер,
	|	ИСТИНА           КАК ИспользуетсяОтборПоСегментуПартнеров
	|ПОМЕСТИТЬ ОтборПоСегментуПартнеров
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК Сегменты
	|{ГДЕ
	|	Сегменты.Сегмент.* КАК СегментПартнеров,
	|	Сегменты.Партнер.* КАК Партнер}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ИспользуетсяОтборПоСегментуПартнеров
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтКурсыВалют()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	КурсВалюты.Валюта  КАК Валюта,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА 1
	|		КОГДА 2
	|			ТОГДА ЕСТЬNULL(КурсВалюты.КурсЧислитель, 1) * ЕСТЬNULL(КурсВалютыУпр.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменатель, 1) * ЕСТЬNULL(КурсВалютыУпр.КурсЧислитель, 1))
	|		ИНАЧЕ ЕСТЬNULL(КурсВалюты.КурсЧислитель, 1) * ЕСТЬNULL(КурсВалютыРегл.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменатель, 1) * ЕСТЬNULL(КурсВалютыРегл.КурсЧислитель, 1))
	|	КОНЕЦ              КАК Коэффициент
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних({(&КонецПериода)}, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|				{(&КонецПериода)},
	|				Валюта = &ВалютаУправленческогоУчета
	|					И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыУпр
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних({(&КонецПериода)}, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыРегл
	|		ПО Организации.ВалютаРегламентированногоУчета = КурсВалютыРегл.Валюта
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТипыДокументовПлана()
	
	ТекстТиповДокументов = ""; 
	
	
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаказКлиента), ";
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента), ";
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ГрафикИсполненияДоговора)";
	
	Возврат ТекстТиповДокументов;
КонецФункции

Процедура СформироватьПараметрыОтчета(ПараметрКоманды, ПараметрыФормы, Параметры)
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		ЭтоМассив = Истина;
		Если ПараметрКоманды.Количество() > 0 Тогда
			ПервыйЭлемент = ПараметрКоманды[0];
		Иначе
			ПервыйЭлемент = Неопределено;
		КонецЕсли;
	Иначе
		ЭтоМассив = Ложь;
		ПервыйЭлемент = ПараметрКоманды;
	КонецЕсли;
	
	Если ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Партнеры") Тогда
		Если ЭтоМассив Тогда
			ЕстьПодчиненныеПартнеры = Ложь;
			Для Каждого ЭлементПараметраКоманды Из ПараметрКоманды Цикл
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ЭлементПараметраКоманды) Тогда
					ЕстьПодчиненныеПартнеры = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьПодчиненныеПартнеры = ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ПараметрКоманды);
		КонецЕсли;
		
		Если ЕстьПодчиненныеПартнеры Тогда
			ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
			ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
			ЗначениеОтбора = ПараметрКоманды;
			Если ЭтоМассив Тогда
				ЗначениеОтбора = Новый СписокЗначений;
				ЗначениеОтбора.ЗагрузитьЗначения(ПараметрКоманды);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			Иначе
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			КонецЕсли;
			ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
			ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
			Параметры.ФиксированныеНастройки = ФиксированныеНастройки;
			ПараметрыФормы.КлючНазначенияИспользования = "ГруппаПартнеров";
			Параметры.КлючНазначенияИспользования = "ГруппаПартнеров";
		Иначе
			ПараметрыФормы.Отбор = Новый Структура("Партнер", ПараметрКоманды);
			ПараметрыФормы.КлючНазначенияИспользования = ПараметрКоманды;
			Параметры.КлючНазначенияИспользования = ПараметрКоманды;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
		ИЛИ ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		ПараметрыФормы.Отбор = Новый Структура("Договор", ПараметрКоманды);
		ПараметрыФормы.КлючНазначенияИспользования = ПараметрКоманды;
		Параметры.КлючНазначенияИспользования = ПараметрКоманды;
	ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
		Если ЭтоМассив Тогда
			ПараметрыФормы.Отбор = Новый Структура("ОбъектРасчетов", ПараметрКоманды);
			ПараметрыФормы.КлючНазначенияИспользования = ПараметрКоманды;
			Параметры.КлючНазначенияИспользования = ПараметрКоманды;
		Иначе
			ПараметрыФормы.Отбор = Новый Структура("ОбъектРасчетов", ПервыйЭлемент);
			ПараметрыФормы.КлючНазначенияИспользования = ПервыйЭлемент;
			Параметры.КлючНазначенияИспользования = ПервыйЭлемент;
		КонецЕсли;
	Иначе
		ОбъектРасчетов = ОбъектыРасчетовСервер.ОбъектРасчетовИзСсылки(ПервыйЭлемент);
		ПараметрыФормы.Отбор = Новый Структура("ОбъектРасчетов", ОбъектРасчетов);
		ПараметрыФормы.КлючНазначенияИспользования = ОбъектРасчетов;
		Параметры.КлючНазначенияИспользования = ОбъектРасчетов;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиВыбранныеПоляРекурсивно(КоллекцияЭлементов, МассивЭлементов)

	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если Элемент.Использование Тогда
				МассивЭлементов.Добавить(Элемент);
			КонецЕсли;
		Иначе
			НайтиВыбранныеПоляРекурсивно(Элемент.Элементы, МассивЭлементов);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьНастройкиОтбораНепустыхПолей(НастройкиОтчета, МассивВыбранныхПолей, ВычисляемыеПоля)
	ГруппировкиОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьГруппировки(НастройкиОтчета);
	// Найдем последнюю используемую группировку и установим до нее отбор.
	Для Каждого ЭлементСписка Из ГруппировкиОтчета Цикл
		Группировка = ЭлементСписка.Значение; // ГруппировкаКомпоновкиДанных
		Если Группировка.Использование Тогда
			ГруппаИли = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(Группировка.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			ГруппаИли.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
			ГруппаИли.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
			Для Каждого ВыбранноеПоле Из МассивВыбранныхПолей Цикл
				Если ВычисляемыеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено
					И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле) <> Неопределено
					И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле).Тип.Типы().Найти(Тип("Число")) <> Неопределено Тогда
					ЭлементОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
						ГруппаИли, 
						Строка(ВыбранноеПоле.Поле),
						0,
						ВидСравненияКомпоновкиДанных.НеРавно);
				КонецЕсли;
			КонецЦикла;
			ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("ВыводитьОтбор");
			ПараметрГруппировкиВыводитьОтбор = Группировка.ПараметрыВывода.Элементы.Найти(ПараметрГруппировки);
			ПараметрГруппировкиВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			ПараметрГруппировкиВыводитьОтбор.Использование = Истина;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецЕсли