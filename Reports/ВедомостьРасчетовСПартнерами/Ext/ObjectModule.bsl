#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	Настройки.События.ПередЗаполнениемПанелиБыстрыхНастроек = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	ФормаПараметры = ЭтаФорма.ФормаПараметры;
	
	Если Параметры.Свойство("ПараметрКоманды")
			И Параметры.Свойство("ОписаниеКоманды")
			И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда 
		
		СформироватьПараметрыОтчета(Параметры.ПараметрКоманды, ФормаПараметры , Параметры);
		
		ЗначенияФункциональныхОпций = Новый Структура("БазоваяВерсия", ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
		
		ПараметрКоманды = Параметры.ПараметрКоманды;
		
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
			ЭтоМассив = Истина;
			Если ПараметрКоманды.Количество() > 0 Тогда
				ПервыйЭлемент = ПараметрКоманды[0];
			Иначе
				ПервыйЭлемент = Неопределено;
			КонецЕсли;
		Иначе
			ЭтоМассив = Ложь;
			ПервыйЭлемент = ПараметрКоманды;
		КонецЕсли;
		
		Если ТипЗнч(ПервыйЭлемент) = Тип("ДокументСсылка.СверкаВзаиморасчетов") Тогда
			ЭтаФорма.ФормаПараметры.Отбор = Новый Структура("СверкаВзаиморасчетов", ПервыйЭлемент);
			ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = "СверкаВзаиморасчетов";
			Параметры.КлючНазначенияИспользования = "СверкаВзаиморасчетов";
			Параметры.КлючВарианта = ИмяКлючаВариантаВЗависимостиОтФлагаБазовая("ПоСверкеВзаиморасчетовКонтекст", 
			                                                                    ЗначенияФункциональныхОпций.БазоваяВерсия);
		
		ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЭтаФорма.ФормаПараметры.Отбор = Новый Структура("Контрагент", ПараметрКоманды);
			ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = "Контрагент";
			Параметры.КлючНазначенияИспользования = "Контрагент";
			Параметры.КлючВарианта = ИмяКлючаВариантаВЗависимостиОтФлагаБазовая("ПоКонтрагентамКонтекст", 
			                                                                    ЗначенияФункциональныхОпций.БазоваяВерсия);

		ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ЭтаФорма.ФормаПараметры.Отбор = Новый Структура("Договор", ПараметрКоманды);
			ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = "Договор";
			Параметры.КлючНазначенияИспользования = "Договор";
			Параметры.КлючВарианта = ИмяКлючаВариантаВЗависимостиОтФлагаБазовая("РасчетыСПартнерами", 
			                                                                    ЗначенияФункциональныхОпций.БазоваяВерсия);
			
		ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Партнеры") ИЛИ
			      ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
			
			СформироватьПараметрыФормыНаСервере(ПараметрКоманды, ЭтаФорма.ФормаПараметры, Параметры,
			                                    ПервыйЭлемент, ЭтоМассив, ЗначенияФункциональныхОпций.БазоваяВерсия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФормаПараметры.Свойство("Отбор")
	 И ФормаПараметры.Отбор.Свойство("СверкаВзаиморасчетов") Тогда
		Реквизиты = Документы.СверкаВзаиморасчетов.РеквизитыДокумента(ФормаПараметры.Отбор.СверкаВзаиморасчетов);
		Если Реквизиты <> Неопределено Тогда
			Если ЗначениеЗаполнено(Реквизиты.Организация) Тогда	
				ФормаПараметры.Отбор.Вставить("Организация", Реквизиты.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
					ФормаПараметры.Отбор.Вставить("Контрагент", Реквизиты.Контрагент);
				Иначе
					ФормаПараметры.Отбор.Вставить("Партнер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Контрагент,"Партнер"));
				КонецЕсли;
			КонецЕсли;
			Период = Новый СтандартныйПериод;
			Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
			Период.ДатаНачала = Реквизиты.НачалоПериода;
			Период.ДатаОкончания = Реквизиты.КонецПериода;
			ФормаПараметры.Отбор.Вставить("Период", Период);
		КонецЕсли;
		ФормаПараметры.Отбор.Удалить("СверкаВзаиморасчетов");
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	// Изменение настроек по функциональным опциям
	НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы);
	
	// Установка значений по умолчанию
	УстановитьОбязательныеНастройки(КомпоновщикНастроекФормы, Истина);
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;
КонецПроцедуры

// Вызывается до перезаполнения панели настроек формы отчета.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета.
//   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//   * ОтчетОбъектИлиПолноеИмя - ОтчетОбъект - отчет.
//
Процедура ПередЗаполнениемПанелиБыстрыхНастроек(ЭтаФорма, ПараметрыЗаполнения) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Если ТипЗнч(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя) = Тип("Строка") Тогда
			ЭлементыПользовательскихНастроек = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		Иначе
			ОтборОтчета = ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя.КомпоновщикНастроек.Настройки.Отбор; // ОтборКомпоновкиДанных -
			ЭлементыПользовательскихНастроек = ОтборОтчета.Элементы;
		КонецЕсли;
		
		Для Каждого ЭлементОтбора Из ЭлементыПользовательскихНастроек Цикл
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер") Тогда
				ЭлементОтбора.ПредставлениеПользовательскойНастройки = "Контрагент";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	УстановитьОбязательныеНастройки(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	
	// Сформируем отчет
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрДанныеОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета,"ДанныеОтчета");
	Расчеты = СхемаКомпоновкиДанных.НаборыДанных.Расчеты; // НаборДанныхОбъединениеСхемыКомпоновкиДанных -
	
	// Определим состав выбранных полей
	МассивВыбранныхПолей = Новый Массив;
	НайтиВыбранныеПоляРекурсивно(НастройкиОтчета.Выбор.Элементы, МассивВыбранныхПолей);
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаВтОтборПоСегментуПартнеров());
	ТекстыЗапросов.Добавить(ТекстЗапросаРасчетыСКлиентами(МассивВыбранныхПолей, НастройкиОтчета, СхемаКомпоновкиДанных.ВычисляемыеПоля));
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ";");
	Расчеты.Элементы.РасчетыСКлиентами.Запрос = ТекстЗапроса;
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаВтОтборПоСегментуПартнеров());
	ТекстыЗапросов.Добавить(ТекстЗапросаРасчетыСПоставщиками(МассивВыбранныхПолей, НастройкиОтчета, СхемаКомпоновкиДанных.ВычисляемыеПоля));
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ";");
	Расчеты.Элементы.РасчетыСПоставщиками.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	//Предупреждение о невыполенном распределении взаиморасчетов.
	ВзаиморасчетыСервер.ВывестиПредупреждениеОбОбновлении(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОбязательныеНастройки(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы)
	
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикНастроек);
	УстановитьДатуОтчета(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	
КонецПроцедуры

Процедура УстановитьДатуОтчета(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы)
	
	ПараметрДатаОтчетаГраница = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "КонецПериодаГраница");
	ПараметрДатаОтчетаГраница.Использование = Истина;

	ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период"); // ЗначениеПараметраНастроекКомпоновкиДанных -
	ПериодЗначение = ПараметрПериод.Значение; // СтандартныйПериод - 
	Если ПараметрПериод.Использование И ЗначениеЗаполнено(ПериодЗначение.ДатаНачала) Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоОстатки", ПериодЗначение.ДатаНачала);
		ПараметрДатаОтчетаГраница.Значение = Новый Граница(КонецДня(ПериодЗначение.ДатаОкончания), ВидГраницы.Включая);
	Иначе
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоОстатки", Дата(1,1,1,0,0,1));
		ПараметрДатаОтчетаГраница.Значение = Дата(1,1,1)
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, "Контрагент");
	КонецЕсли;
КонецПроцедуры

Функция ТекстЗапросаРасчетыСКлиентами(МассивВыбранныхПолей, НастройкиОтчета, ВычисляемыеПоля)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитикаУчета.Организация                       КАК Организация,
	|	АналитикаУчета.Партнер                           КАК Партнер,
	|	АналитикаУчета.Контрагент                        КАК Контрагент,
	|	АналитикаУчета.Договор                           КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности           КАК НаправлениеДеятельности,
	|	РасчетыПоСрокам.ОбъектРасчетов                   КАК ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                            КАК Валюта,
	|	РасчетыПоСрокам.РасчетныйДокумент                КАК РасчетныйДокумент,
	|	РасчетыПоСрокам.ДатаВозникновения                КАК ДатаВозникновения,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения           КАК ДатаПлановогоПогашения,
	|
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглНачальныйОстаток
	|	КОНЕЦ                                            КАК ДолгПартнераНачальныйОстаток,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглНачальныйОстаток
	|	КОНЕЦ                                            КАК НашДолгНачальныйОстаток,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгНачальныйОстаток - РасчетыПоСрокам.ПредоплатаНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрНачальныйОстаток - РасчетыПоСрокам.ПредоплатаУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглНачальныйОстаток - РасчетыПоСрокам.ПредоплатаРеглНачальныйОстаток
	|	КОНЕЦ                                            КАК СальдоНачальное,
	|
	|	0                                                КАК ОплаченоПартнеру,
	|	0                                                КАК ОтгруженоПартнеру,
	|	0                                                КАК Зачтено,
	|	0                                                КАК ОтгруженоНам,
	|	0                                                КАК ОплаченоНам,
	|	0                                                КАК СписаниеПереоценка,
	|
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглКонечныйОстаток
	|	КОНЕЦ                                            КАК ДолгПартнераКонечныйОстаток,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглКонечныйОстаток
	|	КОНЕЦ                                            КАК НашДолгКонечныйОстаток,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгКонечныйОстаток - РасчетыПоСрокам.ПредоплатаКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрКонечныйОстаток - РасчетыПоСрокам.ПредоплатаУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглКонечныйОстаток - РасчетыПоСрокам.ПредоплатаРеглКонечныйОстаток
	|	КОНЕЦ                                            КАК СальдоКонечное,
	|
	|	2                                                КАК ТипРасчетов,
	|	NULL                                             КАК Регистратор,
	|	РасчетыПоСрокам.Регистратор                      КАК РегистраторРасчетов,
	|
	|	РасчетыПоСрокам.ПериодСекунда                    КАК ПериодСекунда,
	|	РасчетыПоСрокам.ПериодДень                       КАК ПериодДень,
	|	РасчетыПоСрокам.ПериодНеделя                     КАК ПериодНеделя,
	|	РасчетыПоСрокам.ПериодДекада                     КАК ПериодДекада,
	|	РасчетыПоСрокам.ПериодМесяц                      КАК ПериодМесяц,
	|	РасчетыПоСрокам.ПериодКвартал                    КАК ПериодКвартал,
	|	РасчетыПоСрокам.ПериодПолугодие                  КАК ПериодПолугодие,
	|	РасчетыПоСрокам.ПериодГод                        КАК ПериодГод
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.ОстаткиИОбороты({&НачалоПериода}, {&КонецПериода}, Авто) КАК РасчетыПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И (ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглНачальныйОстаток
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглНачальныйОстаток
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглКонечныйОстаток
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглКонечныйОстаток
	|	КОНЕЦ <> 0)
	|{ГДЕ
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналитикаУчета.Организация,
	|	АналитикаУчета.Партнер,
	|	АналитикаУчета.Контрагент,
	|	АналитикаУчета.Договор,
	|	АналитикаУчета.НаправлениеДеятельности,
	|	РасчетыПоСрокам.ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                            КАК Валюта,
	|	РасчетыПоСрокам.РасчетныйДокумент,
	|	РасчетыПоСрокам.ДатаВозникновения,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения,
	|
	|	0                                                КАК ДолгПартнераНачальныйОстаток,
	|	0                                                КАК НашДолгНачальныйОстаток,
	|	0                                                КАК СальдоНачальное,
	|	0                                                КАК ОплаченоПартнеру,
	|	&ОтгруженоПартнеру                               КАК ОтгруженоПартнеру,
	|	&Зачтено                                         КАК Зачтено,
	|	0                                                КАК ОтгруженоНам,
	|	&ОплаченоНам                                     КАК ОплаченоНам,
	|	&СписаниеПереоценка                              КАК СписаниеПереоценка,
	|	0                                                КАК ДолгПартнераКонечныйОстаток,
	|	0                                                КАК НашДолгКонечныйОстаток,
	|	0                                                КАК СальдоКонечное,
	|
	|	2                                                КАК ТипРасчетов,
	|	РасчетыПоСрокам.ДокументРегистратор              КАК Регистратор,
	|	РасчетыПоСрокам.Регистратор                      КАК РегистраторРасчетов,
	|
	|	РасчетыПоСрокам.Период                           КАК ПериодСекунда,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ)      КАК ПериодДень,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, НЕДЕЛЯ)    КАК ПериодНеделя,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕКАДА)    КАК ПериодДекада,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, МЕСЯЦ)     КАК ПериодМесяц,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, КВАРТАЛ)   КАК ПериодКвартал,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ГОД)       КАК ПериодГод
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И РасчетыПоСрокам.Активность
	|	И (&ОтборыВыбранныхПолей)
	|{ГДЕ
	|	РасчетыПоСрокам.Период МЕЖДУ &НачалоПериода И &КонецПериода,
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|
	|";
	
	ТекстОтборов = "";
	Для Каждого ВыбранноеПоле Из МассивВыбранныхПолей Цикл
		Если ВычисляемыеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле) <> Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле).Тип.Типы().Найти(Тип("Число")) <> Неопределено Тогда
			Если СтрНайти(Строка(ВыбранноеПоле.Поле),"ПользовательскиеПоля") = 0 
				И СтрНайти("&ОтгруженоПартнеру, &Зачтено, &ОплаченоНам, &СписаниеПереоценка", Строка(ВыбранноеПоле.Поле)) > 0 Тогда
				ТекстОтборов = ТекстОтборов + ?(ТекстОтборов = "","", "ИЛИ") +"
					|	&" + Строка(ВыбранноеПоле.Поле) + " <> 0 ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборыВыбранныхПолей", ?(ТекстОтборов = "", "ЛОЖЬ", ТекстОтборов));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОтгруженоПартнеру", ВзаиморасчетыСервер.ШаблонПоляОтгруженоКлиенту());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Зачтено", ВзаиморасчетыСервер.ШаблонПоляЗачтеноКлиенту());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОплаченоНам", ВзаиморасчетыСервер.ШаблонПоляОплаченоКлиентом());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СписаниеПереоценка", ВзаиморасчетыСервер.ШаблонПоляСписаниеПереоценкаЗадолженности());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщиками(МассивВыбранныхПолей, НастройкиОтчета, ВычисляемыеПоля)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитикаУчета.Организация                       КАК Организация,
	|	АналитикаУчета.Партнер                           КАК Партнер,
	|	АналитикаУчета.Контрагент                        КАК Контрагент,
	|	АналитикаУчета.Договор                           КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности           КАК НаправлениеДеятельности,
	|	РасчетыПоСрокам.ОбъектРасчетов                   КАК ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                            КАК Валюта,
	|	РасчетыПоСрокам.РасчетныйДокумент                КАК РасчетныйДокумент,
	|	РасчетыПоСрокам.ДатаВозникновения                КАК ДатаВозникновения,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения           КАК ДатаПлановогоПогашения,
	|
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглНачальныйОстаток
	|	КОНЕЦ                                            КАК ДолгПартнераНачальныйОстаток,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглНачальныйОстаток
	|	КОНЕЦ                                            КАК НашДолгНачальныйОстаток,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаНачальныйОстаток - РасчетыПоСрокам.ДолгНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрНачальныйОстаток - РасчетыПоСрокам.ДолгУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглНачальныйОстаток - РасчетыПоСрокам.ДолгРеглНачальныйОстаток
	|	КОНЕЦ                                            КАК СальдоНачальное,
	|
	|	0                                                КАК ОплаченоПартнеру,
	|	0                                                КАК ОтгруженоПартнеру,
	|	0                                                КАК Зачтено,
	|	0                                                КАК ОтгруженоНам,
	|	0                                                КАК ОплаченоНам,
	|	0                                                КАК СписаниеПереоценка,
	|
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглКонечныйОстаток
	|	КОНЕЦ                                            КАК ДолгПартнераКонечныйОстаток,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглКонечныйОстаток
	|	КОНЕЦ                                            КАК НашДолгКонечныйОстаток,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаКонечныйОстаток - РасчетыПоСрокам.ДолгКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрКонечныйОстаток - РасчетыПоСрокам.ДолгУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглКонечныйОстаток - РасчетыПоСрокам.ДолгРеглКонечныйОстаток
	|	КОНЕЦ                                            КАК СальдоКонечное,
	|
	|	3                                                КАК ТипРасчетов,
	|	NULL                                             КАК Регистратор,
	|	РасчетыПоСрокам.Регистратор                      КАК РегистраторРасчетов,
	|
	|	РасчетыПоСрокам.ПериодСекунда                    КАК ПериодСекунда,
	|	РасчетыПоСрокам.ПериодДень                       КАК ПериодДень,
	|	РасчетыПоСрокам.ПериодНеделя                     КАК ПериодНеделя,
	|	РасчетыПоСрокам.ПериодДекада                     КАК ПериодДекада,
	|	РасчетыПоСрокам.ПериодМесяц                      КАК ПериодМесяц,
	|	РасчетыПоСрокам.ПериодКвартал                    КАК ПериодКвартал,
	|	РасчетыПоСрокам.ПериодПолугодие                  КАК ПериодПолугодие,
	|	РасчетыПоСрокам.ПериодГод                        КАК ПериодГод
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.ОстаткиИОбороты({&НачалоПериода}, {&КонецПериода}, Авто) КАК РасчетыПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И (ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглНачальныйОстаток
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаНачальныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрНачальныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглНачальныйОстаток
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглКонечныйОстаток
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаКонечныйОстаток
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрКонечныйОстаток
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглКонечныйОстаток
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ДолгОборот
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ДолгУпрОборот
	|		ИНАЧЕ РасчетыПоСрокам.ДолгРеглОборот
	|	КОНЕЦ <> 0 ИЛИ
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.ПредоплатаОборот
	|		КОГДА 2
	|			ТОГДА РасчетыПоСрокам.ПредоплатаУпрОборот
	|		ИНАЧЕ РасчетыПоСрокам.ПредоплатаРеглОборот
	|	КОНЕЦ <> 0)
	|{ГДЕ
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналитикаУчета.Организация,
	|	АналитикаУчета.Партнер,
	|	АналитикаУчета.Контрагент,
	|	АналитикаУчета.Договор,
	|	АналитикаУчета.НаправлениеДеятельности,
	|	РасчетыПоСрокам.ОбъектРасчетов,
	|	ВЫБОР &ДанныеОтчета
	|		КОГДА 4
	|			ТОГДА РасчетыПоСрокам.Валюта
	|		КОГДА 2
	|			ТОГДА &ВалютаУправленческогоУчета
	|		ИНАЧЕ АналитикаУчета.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ                                            КАК Валюта,
	|	РасчетыПоСрокам.РасчетныйДокумент,
	|	РасчетыПоСрокам.ДатаВозникновения,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения,
	|
	|	0                                                КАК ДолгПартнераНачальныйОстаток,
	|	0                                                КАК НашДолгНачальныйОстаток,
	|	0                                                КАК СальдоНачальное,
	|	&ОплаченоПартнеру                                КАК ОплаченоПартнеру,
	|	0                                                КАК ОтгруженоПартнеру,
	|	&Зачтено                                         КАК Зачтено,
	|	&ОтгруженоНам                                    КАК ОтгруженоНам,
	|	0                                                КАК ОплаченоНам,
	|	&СписаниеПереоценка                              КАК СписаниеПереоценка,
	|	0                                                КАК ДолгПартнераКонечныйОстаток,
	|	0                                                КАК НашДолгКонечныйОстаток,
	|	0                                                КАК СальдоКонечное,
	|
	|	3                                                КАК ТипРасчетов,
	|	РасчетыПоСрокам.ДокументРегистратор              КАК Регистратор,
	|	РасчетыПоСрокам.Регистратор                      КАК РегистраторРасчетов,
	|
	|	РасчетыПоСрокам.Период                           КАК ПериодСекунда,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕНЬ)      КАК ПериодДень,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, НЕДЕЛЯ)    КАК ПериодНеделя,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ДЕКАДА)    КАК ПериодДекада,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, МЕСЯЦ)     КАК ПериодМесяц,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, КВАРТАЛ)   КАК ПериодКвартал,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|	НАЧАЛОПЕРИОДА(РасчетыПоСрокам.Период, ГОД)       КАК ПериодГод
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И РасчетыПоСрокам.Активность
	|	И (&ОтборыВыбранныхПолей)
	|{ГДЕ
	|	РасчетыПоСрокам.Период МЕЖДУ &НачалоПериода И &КонецПериода,
	|	АналитикаУчета.Организация.* КАК Организация,
	|	АналитикаУчета.Партнер.* КАК Партнер,
	|	АналитикаУчета.Контрагент.* КАК Контрагент,
	|	АналитикаУчета.Договор.* КАК Договор,
	|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|	(АналитикаУчета.Партнер В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуПартнеров.Партнер
	|			ИЗ
	|				ОтборПоСегментуПартнеров
	|			ГДЕ
	|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|
	|";
	
	
	ТекстОтборов = "";
	Для Каждого ВыбранноеПоле Из МассивВыбранныхПолей Цикл
		Если ВычисляемыеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле) <> Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле).Тип.Типы().Найти(Тип("Число")) <> Неопределено Тогда
			Если СтрНайти(Строка(ВыбранноеПоле.Поле),"ПользовательскиеПоля") = 0 
				И СтрНайти("&ОтгруженоНам, &Зачтено, &ОплаченоПартнеру, &СписаниеПереоценка", Строка(ВыбранноеПоле.Поле)) > 0 Тогда
				ТекстОтборов = ТекстОтборов + ?(ТекстОтборов = "","", "ИЛИ") +"
					|	&" + Строка(ВыбранноеПоле.Поле) + " <> 0 ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборыВыбранныхПолей", ?(ТекстОтборов = "", "ЛОЖЬ", ТекстОтборов));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОтгруженоНам", ВзаиморасчетыСервер.ШаблонПоляПоставленоПоставщиком());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Зачтено", ВзаиморасчетыСервер.ШаблонПоляЗачтеноПоставщиком());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОплаченоПартнеру", ВзаиморасчетыСервер.ШаблонПоляОплаченоПоставщику());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СписаниеПереоценка", ВзаиморасчетыСервер.ШаблонПоляСписаниеПереоценкаЗадолженности());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОтборПоСегментуПартнеров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сегменты.Партнер КАК Партнер,
	|	ИСТИНА           КАК ИспользуетсяОтборПоСегментуПартнеров
	|ПОМЕСТИТЬ ОтборПоСегментуПартнеров
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК Сегменты
	|{ГДЕ
	|	Сегменты.Сегмент.* КАК СегментПартнеров,
	|	Сегменты.Партнер.* КАК Партнер}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ИспользуетсяОтборПоСегментуПартнеров
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьПараметрыОтчета(ПараметрКоманды, ПараметрыФормы, Параметры)
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		ЭтоМассив = Истина;
		Если ПараметрКоманды.Количество() > 0 Тогда
			ПервыйЭлемент = ПараметрКоманды[0];
		Иначе
			ПервыйЭлемент = Неопределено;
		КонецЕсли;
	Иначе
		ЭтоМассив = Ложь;
		ПервыйЭлемент = ПараметрКоманды;
	КонецЕсли;
	
	Если ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Партнеры") Тогда
		Если ЭтоМассив Тогда
			ЕстьПодчиненныеПартнеры = Ложь;
			Для Каждого ЭлементПараметраКоманды Из ПараметрКоманды Цикл
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ЭлементПараметраКоманды) Тогда
					ЕстьПодчиненныеПартнеры = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьПодчиненныеПартнеры = ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ПараметрКоманды);
		КонецЕсли;
		
		Если ЕстьПодчиненныеПартнеры Тогда
			ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
			ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
			ЗначениеОтбора = ПараметрКоманды;
			Если ЭтоМассив Тогда
				ЗначениеОтбора = Новый СписокЗначений;
				ЗначениеОтбора.ЗагрузитьЗначения(ПараметрКоманды);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			Иначе
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			КонецЕсли;
			ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
			ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
			Параметры.ФиксированныеНастройки = ФиксированныеНастройки;
			ПараметрыФормы.КлючНазначенияИспользования = "ГруппаПартнеров";
			Параметры.КлючНазначенияИспользования = "ГруппаПартнеров";
		Иначе
			ПараметрыФормы.Отбор = Новый Структура("Партнер", ПараметрКоманды);
			ПараметрыФормы.КлючНазначенияИспользования = ПараметрКоманды;
			Параметры.КлючНазначенияИспользования = ПараметрКоманды;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
		ИЛИ ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		ПараметрыФормы.Отбор = Новый Структура("Договор", ПараметрКоманды);
		ПараметрыФормы.КлючНазначенияИспользования = ПараметрКоманды;
		Параметры.КлючНазначенияИспользования = ПараметрКоманды;
	ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
		ПараметрыФормы.Отбор = Новый Структура("СегментПартнеров", ПараметрКоманды);
		ПараметрыФормы.КлючНазначенияИспользования = ПараметрКоманды;
		Параметры.КлючНазначенияИспользования = ПараметрКоманды;
	ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
		Если ЭтоМассив Тогда
			ПараметрыФормы.Отбор = Новый Структура("ОбъектРасчетов", ПараметрКоманды);
			ПараметрыФормы.КлючНазначенияИспользования = ПараметрКоманды;
			Параметры.КлючНазначенияИспользования = ПараметрКоманды;
		Иначе
			ПараметрыФормы.Отбор = Новый Структура("ОбъектРасчетов", ПервыйЭлемент);
			ПараметрыФормы.КлючНазначенияИспользования = ПервыйЭлемент;
			Параметры.КлючНазначенияИспользования = ПервыйЭлемент;
		КонецЕсли;
	Иначе
		ОбъектРасчетов = ВзаиморасчетыСервер.ОбъектРасчетовПоСсылке(ПервыйЭлемент);
		ПараметрыФормы.Отбор = Новый Структура("ОбъектРасчетов", ОбъектРасчетов);
		ПараметрыФормы.КлючНазначенияИспользования = ОбъектРасчетов;
		Параметры.КлючНазначенияИспользования = ОбъектРасчетов;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПараметрыФормыНаСервере(ПараметрКоманды, ПараметрыФормы, Параметры, ПервыйЭлемент, ЭтоМассив, ЭтоБазовая)
	
	Если ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Партнеры") Тогда
		
		Если ЭтоМассив Тогда
			ЕстьПодчиненныеПартнеры = Ложь;
			Для Каждого ЭлементПараметраКоманды Из ПараметрКоманды Цикл
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ЭлементПараметраКоманды) Тогда
					ЕстьПодчиненныеПартнеры = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьПодчиненныеПартнеры = ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ПараметрКоманды);
		КонецЕсли;
		
		Если ЕстьПодчиненныеПартнеры Тогда
			ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
			ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
			ЗначениеОтбора = ПараметрКоманды;
			Если ЭтоМассив Тогда
				ЗначениеОтбора = Новый СписокЗначений;
				ЗначениеОтбора.ЗагрузитьЗначения(ПараметрКоманды);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			Иначе
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			КонецЕсли;
			ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
			ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
			Параметры.ФиксированныеНастройки = ФиксированныеНастройки;
			ПараметрыФормы.КлючНазначенияИспользования = "ГруппаПартнеров";
			Параметры.КлючНазначенияИспользования = "ГруппаПартнеров";
			
		Иначе
			ПараметрыФормы.Отбор = Новый Структура("Партнер", ПараметрКоманды);
			ПараметрыФормы.КлючНазначенияИспользования = "Партнер";
			Параметры.КлючНазначенияИспользования = "Партнер";
			
		КонецЕсли;
		
		Параметры.КлючВарианта = ИмяКлючаВариантаВЗависимостиОтФлагаБазовая("ПоПартнерамКонтекст", ЭтоБазовая);
		
	ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
		
		ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
		ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		
		ЭлементОтбора.ПравоеЗначение = СегментыВызовСервера.СписокЗначений(ПервыйЭлемент);
		ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
		Параметры.ФиксированныеНастройки = ФиксированныеНастройки;
		
		ПараметрыФормы.КлючНазначенияИспользования = "СегментПартнеров";
		Параметры.КлючНазначенияИспользования = "СегментПартнеров";
		Параметры.КлючВарианта = ИмяКлючаВариантаВЗависимостиОтФлагаБазовая("ПоПартнерамКонтекст", ЭтоБазовая);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяКлючаВариантаВЗависимостиОтФлагаБазовая(ИмяКлючаВарианта, ЭтоБазовая)
	
	Если Не ЭтоБазовая Тогда
		Возврат ИмяКлючаВарианта;
	КонецЕсли;
	
	Если ИмяКлючаВарианта = "ПоСверкеВзаиморасчетовКонтекст" Тогда
		Возврат "ПоСверкеВзаиморасчетовКонтекстБазовая";
	ИначеЕсли ИмяКлючаВарианта = "ПоКонтрагентамКонтекст" Тогда
		Возврат "ПоКонтрагентамКонтекстБазовая";
	ИначеЕсли ИмяКлючаВарианта = "РасчетыСПартнерами" Тогда
		Возврат "РасчетыСПартнерамиБазовая";
	ИначеЕсли ИмяКлючаВарианта = "ПоПартнерамКонтекст" Тогда
		Возврат "ПоПартнерамКонтекстБазовая";
	КонецЕсли;
	
КонецФункции

Процедура НайтиВыбранныеПоляРекурсивно(КоллекцияЭлементов, МассивЭлементов)

	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если Элемент.Использование Тогда
				МассивЭлементов.Добавить(Элемент);
			КонецЕсли;
		Иначе
			НайтиВыбранныеПоляРекурсивно(Элемент.Элементы, МассивЭлементов);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли