#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//										Конструктор структуры: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа().
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаВнутреннееПотребление);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Корректирует строки, по которым не была оформлено списание или отгрузка или имеются расхождения по мерным товарам.
//
// Параметры:
// 		СтруктураПараметров - Структура - Структура параметров корректировки, конструктор: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа().
//
// Возвращаемое значение:
// 		Структура
// 		*	КоличествоСтрок - Количество отмененных/скорректированных строк.
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	Если Не СтруктураПараметров.ОтменитьНеотработанныеСтроки И Не СтруктураПараметров.СкорректироватьМерныеТовары Тогда
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(Неопределено)
	КонецЕсли;
	
	КоличествоСкорректированныхСтрок = 0;
	
	Если Не СтруктураПараметров.ПроверятьОстатки Тогда
		
		СвойстваОтмененнойСтроки = Новый Структура("Отменено, СтатусУказанияСерий", Истина, 0);
		
		Для каждого СтрокаТовары Из Товары Цикл
			Если Не СтрокаТовары.Отменено Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТовары, СвойстваОтмененнойСтроки);
				КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСкорректированныхСтрок);
	КонецЕсли;
	
	ПараметрыЗаполнения = ЗаказыСервер.ПараметрыЗаполненияДляОтменыСтрок();
	ПараметрыЗаполнения.МенеджерРегистра  = РегистрыНакопления.ЗаказыНаВнутреннееПотребление;
	ПараметрыЗаполнения.ИмяТабличнойЧасти = "Товары";
	ПараметрыЗаполнения.ПутиКДанным.Вставить("Склад", "Склад");
	ПараметрыЗаполнения.ПутиКДанным.Вставить("Назначение", "Назначение");
	
	ПараметрыОтмены = ЗаказыСервер.ПараметрыОтменыСтрокЗаказов();
	ПараметрыОтмены.ОтменятьТолькоМерныеТовары = НЕ СтруктураПараметров.ОтменитьНеотработанныеСтроки
		И СтруктураПараметров.СкорректироватьМерныеТовары;
	ПараметрыОтмены.СкорректироватьМерныеТовары = СтруктураПараметров.СкорректироватьМерныеТовары;
	
	РезультатОтмены = ЗаказыСервер.ОтменитьНеотработанныеСтрокиПоОтгрузке(ЭтотОбъект, ПараметрыЗаполнения, ПараметрыОтмены);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаВнутреннееПотребление));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Возврат РезультатОтмены;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Товары") Тогда
		
		Если ДанныеЗаполнения.Свойство("РеквизитыШапки") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из ДанныеЗаполнения.Товары Цикл
			ДанныеСтроки = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЭлементКоллекции);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаказНаВнутреннееПотреблениеЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	// Выбор статей и аналитик.
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаВнутреннееПотребление.ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаказНаВнутреннееПотребление.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если НеОтгружатьЧастями
		И ЗначениеЗаполнено(ДатаОтгрузки)
		И ДатаОтгрузки < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаОтгрузки",
			,
			Отказ);
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДатаОтгрузки");
	МассивНепроверяемыхРеквизитов.Добавить("Склад");
	
	Для каждого СтрокаТЧ Из Товары Цикл
		
		АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);
		
		// Дата отгрузки в тч Товары должна быть не меньше даты документа
		Если Не НеОтгружатьЧастями И ЗначениеЗаполнено(СтрокаТЧ.ДатаОтгрузки) И СтрокаТЧ.ДатаОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа ""%Дата%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ДатаОтгрузки"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыВстраивания = Документы.ЗаказНаВнутреннееПотребление.ДоступныеОстаткиПараметрыВстраивания();
	ТаблицаОшибок = ОбеспечениеВДокументахСервер.ТаблицаОшибокЗаполнения(ЭтотОбъект, ПараметрыВстраивания);

	ДатаОтгрузкиОбязательна  = Ложь;
	СкладОбязателен          = Ложь;
	ШаблонТекстаДатаОтгрузки = НСтр("ru='Не заполнена колонка ""Дата отгрузки"" в строке %НомерСтроки% списка ""Товары""'");
	
	Для ТекИндекс = 0 По ТаблицаОшибок.Количество() - 1 Цикл
		
		СтрокаОшибки = ТаблицаОшибок[ТекИндекс];
		
		Если СтрокаОшибки.ДатаОтгрузкиОбязательна И Не НеОтгружатьЧастями И СтрокаОшибки.ДатаОтгрузкиНеЗаполнена Тогда
			
			ТекстОшибки   = СтрЗаменить(ШаблонТекстаДатаОтгрузки, "%НомерСтроки%", СтрокаОшибки.НомерСтроки);
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаОшибки.НомерСтроки, "ДатаОтгрузки");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТабЧасти, , Отказ);
			
		КонецЕсли;
		
		СкладОбязателен = СкладОбязателен Или СтрокаОшибки.СкладОбязателен;
		ДатаОтгрузкиОбязательна = ДатаОтгрузкиОбязательна Или СтрокаОшибки.ДатаОтгрузкиОбязательна;
		
	КонецЦикла;
	
	Если ДатаОтгрузкиОбязательна И НеОтгружатьЧастями И Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Дата отгрузки"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);
		
	КонецЕсли;
	
	Если СкладОбязателен И Не ЗначениеЗаполнено(Склад) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Склад"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Склад", , Отказ);
		
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаВнутреннееПотребление),
		Отказ,
		МассивНепроверяемыхРеквизитов);
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Выбор статей и аналитик.
	ПроверитьСтатьиИАналитики = Истина;
	Если ПроверитьСтатьиИАналитики Тогда
		ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаВнутреннееПотребление.ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация);
		ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	КонецЕсли;
	
	ПараметрыПроверки = УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС();
	ПараметрыПроверки.ИмяТабличнойЧасти = "Товары";
	ПараметрыПроверки.ИмяРеквизитаСтатьяРасходов = "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаРасходов = "АналитикаРасходов";
	ПараметрыПроверки.ИмяРеквизитаСтатьяАктивовПассивов = "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаАктивовПассивов = "АналитикаАктивовПассивов";
	
	УчетНДСУП.ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(
		ЭтотОбъект,
		ПотреблениеДляДеятельности,
		ПараметрыПроверки,
		Отказ);
		
	ЗаказНаВнутреннееПотреблениеЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// << 19.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-862
	КР_ОбработкаПроверкиЗаполненияДополнительно(Отказ, ПроверяемыеРеквизиты);
	// >> 19.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-862
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	Если НЕ НеОтгружатьЧастями Тогда
		
		НоваяДатаОтгрузки = Дата(1, 1, 1);
		
		Если Товары.Количество() > 0 Тогда
			
			СтрокиКОбеспечению = Товары.НайтиСтроки(Новый Структура("Отменено", Ложь));
			
			Если СтрокиКОбеспечению.Количество() > 0 Тогда
				
				ТаблицаСтрокКОбеспечению = Товары.Выгрузить(СтрокиКОбеспечению, "ДатаОтгрузки");
				ТаблицаСтрокКОбеспечению.Сортировать("ДатаОтгрузки Возр");
				НоваяДатаОтгрузки = ТаблицаСтрокКОбеспечению[0].ДатаОтгрузки;
				
			КонецЕсли;
				
		КонецЕсли;
		
		ДатаОтгрузки = НоваяДатаОтгрузки;
	Иначе
		ОбеспечениеВДокументахСервер.ЗаполнитьДатыОтгрузкиВТаблице(ДатаОтгрузки, Товары, "ДатаОтгрузки");
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ЗаказНаВнутреннееПотребление.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,
	
	НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаВнутреннееПотребление));
	
	ШаблонНазначения = Документы.ЗаказНаВнутреннееПотребление.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(Назначение, ШаблонНазначения, ЭтотОбъект, "НаправлениеДеятельности", Отказ);
	
	// Выбор статей и аналитик.
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказНаВнутреннееПотребление.ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ЗаказНаВнутреннееПотреблениеЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	// << 02.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
	КР_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения);
	// >> 02.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ШаблонНазначения = Документы.ЗаказНаВнутреннееПотребление.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, Подразделение, ПотреблениеДляДеятельности);
	
	ЗаказНаВнутреннееПотреблениеЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование       = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаВнутреннееПотребление") Тогда
		Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	Иначе
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	МаксимальныйКодСтроки = 0;
	Назначение            = Неопределено;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	Для каждого СтрокаТовары Из Товары Цикл
	
		СтрокаТовары.ДатаОтгрузки       = Дата(1, 1, 1);
		СтрокаТовары.Отменено           = Ложь;
		СтрокаТовары.КодСтроки          = 0;
		
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
	ЗаказНаВнутреннееПотреблениеЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ВыполнитьКонтрольЗаказаПослеПроведения(Отказ);
	
	ЗаказНаВнутреннееПотреблениеЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ЗаказНаВнутреннееПотреблениеЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Автор         = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаВнутреннееПотребление") Тогда
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Товары);
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	ПараметрыЗаполнения = Документы.ЗаказНаВнутреннееПотребление.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ПотреблениеДляДеятельности, ПараметрыЗаполнения);
	
	// --> Евлахов Игорь Николаевич (Начало) 11.03.2024
	// Задача #3848 
	ДатаВыдачи = НачалоДня(ТекущаяДатаСеанса());
	
	Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
		СтрокаТаблицы.злДатаВыдачи = ДатаВыдачи;		
	КонецЦикла;
	// <-- Евлахов Игорь Николаевич (Конец) 11.03.2024
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Проверяет возможность проведения документа в статусе "Закрыт".
//
// Параметры:
//  Отказ	 - Булево - параметр "Отказ" обработки проведения.
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Отказ)

	КонтролироватьОтгрузку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаВнутреннееПотреблениеБезПолнойОтгрузки");
	
	Если Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт
		И КонтролироватьОтгрузку Тогда
		Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
		ДополнительныеПараметры = Новый Структура("КонтрольВыполненияЗаказа", Истина);
		
		Запрос = Документы.ЗаказНаВнутреннееПотребление.СформироватьЗапросПроверкиПриСменеСтатуса(Массив, "Закрыт", ДополнительныеПараметры);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаОтгрузка = Результат.Выбрать();
		
		Пока ВыборкаОтгрузка.Следующий() Цикл
			
			ПроверкаПройдена = Документы.ЗаказНаВнутреннееПотребление.ПроверкаПередСменойСтатуса(ВыборкаОтгрузка, Статус, ДополнительныеПараметры); 
			Если Не ПроверкаПройдена Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КР_ДополнительныеПроцедурыИФункции

#Область ОбработчикиСобытий

// << 19.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-862
Процедура КР_ОбработкаПроверкиЗаполненияДополнительно(Отказ, ПроверяемыеРеквизиты)
	
	МассивПроверяемыхРеквизитов = Новый Массив;       
	
	ЭтоСписаниеТоваровПоТребованию =
		(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию);
		
	Если ЭтоСписаниеТоваровПоТребованию Тогда
		МассивПроверяемыхРеквизитов.Добавить("Товары.КР_ВидБрака");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить());
		Запрос.УстановитьПараметр("НетПричины",
			Справочники.КР_ПричиныОтсутствияКодаМаркировкиИСМП.ПустаяСсылка());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.КР_КодМаркировкиИСМП КАК КР_КодМаркировкиИСМП,
		|	ТаблицаТовары.КР_ПричинаОтсутствияКодаМаркировкиИСМП КАК КР_ПричинаОтсутствияКодаМаркировкиИСМП
		|ПОМЕСТИТЬ врт_ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.ОшибкаНетКодаНетПричины КАК ОшибкаНетКодаНетПричины,
		|	ВложенныйЗапрос.ОшибкаЕстьКодЕстьПричина КАК ОшибкаЕстьКодЕстьПричина
		|ИЗ
		|	(ВЫБРАТЬ
		|		врт_ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|		ВЫБОР
		|			КОГДА врт_ТаблицаТовары.КР_КодМаркировкиИСМП = """"
		|					И врт_ТаблицаТовары.КР_ПричинаОтсутствияКодаМаркировкиИСМП = &НетПричины
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ОшибкаНетКодаНетПричины,
		|		ВЫБОР
		|			КОГДА НЕ врт_ТаблицаТовары.КР_КодМаркировкиИСМП = """"
		|					И НЕ врт_ТаблицаТовары.КР_ПричинаОтсутствияКодаМаркировкиИСМП = &НетПричины
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ОшибкаЕстьКодЕстьПричина
		|	ИЗ
		|		врт_ТаблицаТовары КАК врт_ТаблицаТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК спр_Характеристики
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК спр_ТНВЭД
		|				ПО спр_Характеристики.КР_КодТНВЭД = спр_ТНВЭД.Ссылка
		|			ПО врт_ТаблицаТовары.Характеристика = спр_Характеристики.Ссылка
		|	ГДЕ
		|		ЕСТЬNULL(спр_ТНВЭД.КР_Маркируется, ЛОЖЬ)) КАК ВложенныйЗапрос
		|ГДЕ
		|	(ВложенныйЗапрос.ОшибкаНетКодаНетПричины
		|			ИЛИ ВложенныйЗапрос.ОшибкаЕстьКодЕстьПричина)";
		
		ИмяПоляПричина = НСтр("ru = 'Причина отсутствия кода маркировки ИС МП'");
		ИмяПоляКодИСМП = НСтр("ru = 'Код маркировки ИС МП'");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Товары""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			ПолеПричинаОтсутствияКМ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Товары", Выборка.НомерСтроки, "КР_ПричинаОтсутствияКодаМаркировкиИСМП");
			
			Если Выборка.ОшибкаНетКодаНетПричины Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не заполнено поле ""%1"" '"),
						ИмяПоляПричина);
			КонецЕсли;
			
			Если Выборка.ОшибкаЕстьКодЕстьПричина Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Одновременно заполнены поля ""%1"" и ""%2"" '"),
						ИмяПоляКодИСМП, ИмяПоляПричина);
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки + АдресОшибки,
				ЭтотОбъект, ПолеПричинаОтсутствияКМ, , Отказ);
		КонецЦикла;
	КонецЕсли;
	
	// << 02.02.2023 Федотов А.М., КРОК, Jira№A2105505-1188
	РасширенныеПрава = Пользователи.РолиДоступны("КР_РасширенноеЗаполнениеПередачаВЭксплуатацию");
	ЭтоМагазин = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "КР_ВидСклада") = Перечисления.КР_ВидыСкладов.Магазин);
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию
		И ЭтоМагазин И Не РасширенныеПрава Тогда
		МассивПроверяемыхРеквизитов.Добавить("Товары.ФизическоеЛицо");
	КонецЕсли;
	// >> 02.02.2023 Федотов А.М., КРОК, Jira№A2105505-1188
	
	// << 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188   
	ЛокальныйОтказ = Ложь; // A2105505-2036	
	КР_ПроверитьНаОшибкиПоФорменнойОдежде(ЛокальныйОтказ);  
	Если Не РасширенныеПрава  // A2105505-2036	
		И ЛокальныйОтказ Тогда  
		Отказ = Истина;
	КонецЕсли; // A2105505-2036	
	// >> 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеРеквизиты, МассивПроверяемыхРеквизитов, Истина);
	
КонецПроцедуры // >> 19.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-862

// << 02.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
Процедура КР_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ЭтоМагазин = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "КР_ВидСклада") = Перечисления.КР_ВидыСкладов.Магазин);

	Если ЭтоМагазин Тогда 
		
		ДатаОтгрузки = Дата;
		
		Для Каждого СтрокаДанных Из Товары Цикл     
			
			СтрокаДанных.ДатаОтгрузки = Дата;
			СтрокаДанных.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;	
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // >> 02.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188

// << 02.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
Процедура КР_ПроверитьНаОшибкиПоФорменнойОдежде(Отказ)

	ШаблонОшибки = НСтр("ru = 'В строке %НомерСтроки% %Товар% не является форменной одеждой'");
	
	КатегорияЭксплуатацииФорменнойОдежды = 
		КР_ДополнительныеНастройкиПовтИсп.Значение("КатегорияЭксплуатацииФорменнойОдежды");   
		
	Uniform = Справочники.КР_ТипыТовара.Uniform;
	
	Для Каждого СтрокаДанных Из Товары Цикл

		Если СтрокаДанных.КатегорияЭксплуатации = КатегорияЭксплуатацииФорменнойОдежды
			И СтрокаДанных.Номенклатура.КР_ТипТовара <> Uniform Тогда 
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибки, "%НомерСтроки%", СтрокаДанных.НомерСтроки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%", СтрокаДанных.Номенклатура);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Товаря", СтрокаДанных.НомерСтроки, "Номенклатура");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);	
				
		КонецЕсли;  
		
	КонецЦикла;
	
КонецПроцедуры // >> 02.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188

#КонецОбласти

#КонецОбласти

#КонецЕсли
