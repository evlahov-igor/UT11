#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, Документ);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаРасчетыПоЭквайрингу(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДенежныеСредстваВПути(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	
	ВводОстатковЛокализация.ВводОстатковРасчетовПоЭквайрингуДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(Запрос, ТекстыЗапроса, Регистры, ПустаяСсылка().Метаданные());
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("УчетДенежныхСредств");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
	ВводОстатковЛокализация.ВводОстатковРасчетовПоЭквайрингуЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Обработки.СправочноеРазмещениеНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	ВводОстатковЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	ВводОстатковЛокализация.ВводОстатковРасчетовПоЭквайрингуДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
КонецПроцедуры

#КонецОбласти


#Область ДляВызоваИзДругихПодсистем

// Добавляет команду создания документа на основании.
//
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
// Возвращаемое значение:
//	КомандаФормы - добавляемая команда.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу);
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)

	ВыбраннаяОперация = Неопределено;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВыбраннаяОперация = Параметры.Ключ.ХозяйственнаяОперация;
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
		Параметры.ЗначенияЗаполнения.Свойство("ХозяйственнаяОперация", ВыбраннаяОперация);
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		ВыбраннаяОперация = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования,"ХозяйственнаяОперация");
	ИначеЕсли Параметры.Свойство("ОтборПоТипамОпераций") И Параметры.ОтборПоТипамОпераций.Количество() = 1 Тогда
		ВыбраннаяОперация = Параметры.ОтборПоТипамОпераций[0].Значение;
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ВыбраннаяОперация);
		Параметры.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		Если Параметры.Свойство("Организация") Тогда
			ЗначенияЗаполнения.Вставить("Организация", Параметры.Организация);
		КонецЕсли;
		Если Параметры.Свойство("ОтражатьВОперативномУчете") Тогда
			ЗначенияЗаполнения.Вставить("ОтражатьВОперативномУчете", Параметры.ОтражатьВОперативномУчете);
		КонецЕсли;
		Если Параметры.Свойство("ОтражатьВБУиНУ") Тогда
			ЗначенияЗаполнения.Вставить("ОтражатьВБУиНУ", Параметры.ОтражатьВБУиНУ);
		КонецЕсли;
		Если Параметры.Свойство("ОтражатьВУУ") Тогда
			ЗначенияЗаполнения.Вставить("ОтражатьВУУ", Параметры.ОтражатьВУУ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Данные.Ссылка <> Неопределено Тогда
		Представление = ВводОстатковВызовСервера.ЗаголовокДокументаВводОстатковПоХозяйственнойОперации(Данные.Ссылка,
			Данные.Номер,
			Данные.Дата,
			Данные.ХозяйственнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных; 
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ВводОстатковРасчетовПоЭквайрингу";
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента, Истина);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента);
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ТекстЗапроса;
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеДокумента.Дата КАК Период,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.ОтражатьВОперативномУчете КАК ОтражатьВОперативномУчете,
		|	ДанныеДокумента.ОтражатьВБУиНУ КАК ОтражатьВБУиНУ,
		|	ДанныеДокумента.ОтражатьВУУ КАК ОтражатьВУУ,
		|	ДанныеДокумента.Ответственный КАК Ответственный,
		|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК СТРОКА(100)) КАК Комментарий,
		|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
		|	ДанныеДокумента.Проведен КАК Проведен,
		|	ДанныеДокумента.Исправление КАК Исправление,
		|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент,
		|	НастройкиХозяйственныхОпераций.Ссылка КАК НастройкаХозяйственнойОперации,
		|	СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиРасчетыПоЭквайрингу.Сумма, 0)) КАК СуммаДокумента
		|ИЗ
		|	Документ.ВводОстатковРасчетовПоЭквайрингу КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковРасчетовПоЭквайрингу.РасчетыПоЭквайрингу КАК ДанныеТабличнойЧастиРасчетыПоЭквайрингу
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиРасчетыПоЭквайрингу.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
		|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокумента.Дата,
		|	ДанныеДокумента.Номер,
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Валюта,
		|	ДанныеДокумента.ХозяйственнаяОперация,
		|	ДанныеДокумента.ОтражатьВОперативномУчете,
		|	ДанныеДокумента.ОтражатьВБУиНУ,
		|	ДанныеДокумента.ОтражатьВУУ,
		|	ДанныеДокумента.Ответственный,
		|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК СТРОКА(100)),
		|	ДанныеДокумента.ПометкаУдаления,
		|	ДанныеДокумента.Исправление,
		|	ДанныеДокумента.СторнируемыйДокумент,
		|	ДанныеДокумента.ИсправляемыйДокумент,
		|	ДанныеДокумента.Проведен,
		|	НастройкиХозяйственныхОпераций.Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер",  Реквизиты.Номер);
	
	Запрос.УстановитьПараметр("Организация",                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",          Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация));
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",     Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ОтражатьВОперативномУчете",      Реквизиты.ОтражатьВОперативномУчете);
	Запрос.УстановитьПараметр("ОтражатьВБУиНУ",                 Реквизиты.ОтражатьВБУиНУ);
	Запрос.УстановитьПараметр("ОтражатьВУУ",                    Реквизиты.ОтражатьВУУ);
	Запрос.УстановитьПараметр("Комментарий",                    Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("Проведен",                       Реквизиты.Проведен);
	Запрос.УстановитьПараметр("Валюта",                         Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ПометкаУдаления",                Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Ответственный",                  Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("СуммаДокумента",                 Реквизиты.СуммаДокумента);
	Запрос.УстановитьПараметр("ПустоеНазначение",               Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("Исправление",                    Реквизиты.Исправление);
	Запрос.УстановитьПараметр("СторнируемыйДокумент",           Реквизиты.СторнируемыйДокумент);
	Запрос.УстановитьПараметр("ИсправляемыйДокумент",           Реквизиты.ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("НастройкаХозяйственнойОперации", Реквизиты.НастройкаХозяйственнойОперации);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ." + Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу.Имя));	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтКурсыВалют";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.КурсЧислитель / КурсыВалютСрезПоследних.КурсЗнаменатель КАК КоэффициентПересчета
	|	
	|ПОМЕСТИТЬ ВтКурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|			&Период,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					&ВалютаУправленческогоУчета
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств
	|				ИЗ
	|					Документ.ВводОстатковРасчетовПоЭквайрингу.РасчетыПоЭквайрингу КАК ВводОстатковРасчетыПоЭквайрингу
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|						ПО ВводОстатковРасчетыПоЭквайрингу.ДоговорЭквайринга.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
	|				ГДЕ
	|					ВводОстатковРасчетыПоЭквайрингу.Ссылка = &Ссылка
	|				) И БазоваяВалюта = &ВалютаРегламентированногоУчета
	|	) КАК КурсыВалютСрезПоследних";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыПоЭквайрингу(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыПоЭквайрингу";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасчетыПоЭквайрингу.НомерСтроки             КАК НомерСтроки,
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Организация                                КАК Организация,
	|	РасчетыПоЭквайрингу.ТипДенежныхСредств      КАК ТипДенежныхСредств,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	РасчетыПоЭквайрингу.ЭквайринговыйТерминал   КАК ЭквайринговыйТерминал,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга       КАК Договор,
	|	РасчетыПоЭквайрингу.НомерПлатежнойКарты     КАК НомерПлатежнойКарты,
	|	РасчетыПоЭквайрингу.ДатаПлатежа             КАК ДатаПлатежа,
	|	РасчетыПоЭквайрингу.Сумма                   КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента) КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ВводОстатковРасчетовПоЭквайрингу.РасчетыПоЭквайрингу КАК РасчетыПоЭквайрингу
	|ГДЕ
	|	РасчетыПоЭквайрингу.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковДенежныхСредствКПоступлениюОтЭквайера)
	|	И РасчетыПоЭквайрингу.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.ПоступлениеПоПлатежнойКарте)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоЭквайрингу.НомерСтроки             КАК НомерСтроки,
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	&Организация                                КАК Организация,
	|	РасчетыПоЭквайрингу.ТипДенежныхСредств      КАК ТипДенежныхСредств,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	РасчетыПоЭквайрингу.ЭквайринговыйТерминал   КАК ЭквайринговыйТерминал,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга       КАК Договор,
	|	РасчетыПоЭквайрингу.НомерПлатежнойКарты     КАК НомерПлатежнойКарты,
	|	РасчетыПоЭквайрингу.ДатаПлатежа             КАК ДатаПлатежа,
	|	РасчетыПоЭквайрингу.Сумма                   КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту) КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ВводОстатковРасчетовПоЭквайрингу.РасчетыПоЭквайрингу КАК РасчетыПоЭквайрингу
	|ГДЕ
	|	РасчетыПоЭквайрингу.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковДенежныхСредствКПоступлениюОтЭквайера)
	|	И РасчетыПоЭквайрингу.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.СписаниеПоПлатежнойКарте)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ТипДенежныхСредств,
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваВПути(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваВПути";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасчетыПоЭквайрингу.НомерСтроки                                                    КАК НомерСтроки,
	|	&Период                                                                            КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                                             КАК ВидДвижения,
	|	&Организация                                                                       КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу) КАК ВидПереводаДенежныхСредств,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга.БанковскийСчет                               КАК Получатель,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга.Контрагент                                   КАК Контрагент,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга                                              КАК Договор,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга.БанковскийСчет.ВалютаДенежныхСредств         КАК Валюта,
	|	РасчетыПоЭквайрингу.Сумма                                                          КАК Сумма,
	|	РасчетыПоЭквайрингу.СуммаРегл                                                      КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ДоговорыЭквайринга.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаУправленческогоУчета
	|			ТОГДА РасчетыПоЭквайрингу.Сумма
	|		ИНАЧЕ
	|			РасчетыПоЭквайрингу.Сумма * ЕСТЬNULL(КурсыВалютСчета.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ                                                                              КАК СуммаУпр,
	|	РасчетыПоЭквайрингу.ИдентификаторСтроки                                            КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации                                                    КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ВводОстатковРасчетовПоЭквайрингу.РасчетыПоЭквайрингу КАК РасчетыПоЭквайрингу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютСчета
	|			ПО КурсыВалютСчета.Валюта = ДоговорыЭквайринга.БанковскийСчет.ВалютаДенежныхСредств
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютУпр
	|			ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		ПО РасчетыПоЭквайрингу.ДоговорЭквайринга = ДоговорыЭквайринга.Ссылка
	|ГДЕ
	|	РасчетыПоЭквайрингу.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковДенежныхСредствКПоступлениюОтЭквайера)
	|	И РасчетыПоЭквайрингу.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.ПоступлениеПоПлатежнойКарте)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоЭквайрингу.НомерСтроки                                                    КАК НомерСтроки,
	|	&Период                                                                            КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                                             КАК ВидДвижения,
	|	&Организация                                                                       КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу) КАК ВидПереводаДенежныхСредств,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга.БанковскийСчет                               КАК Получатель,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга.Контрагент                                   КАК Контрагент,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга                                              КАК Договор,
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга.БанковскийСчет.ВалютаДенежныхСредств         КАК Валюта,
	|	РасчетыПоЭквайрингу.Сумма                                                          КАК Сумма,
	|	РасчетыПоЭквайрингу.СуммаРегл                                                      КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ДоговорыЭквайринга.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаУправленческогоУчета
	|			ТОГДА РасчетыПоЭквайрингу.Сумма
	|		ИНАЧЕ
	|			РасчетыПоЭквайрингу.Сумма * ЕСТЬNULL(КурсыВалютСчета.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ                                                                              КАК СуммаУпр,
	|	РасчетыПоЭквайрингу.ИдентификаторСтроки                                            КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации                                                    КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ВводОстатковРасчетовПоЭквайрингу.РасчетыПоЭквайрингу КАК РасчетыПоЭквайрингу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютСчета
	|			ПО КурсыВалютСчета.Валюта = ДоговорыЭквайринга.БанковскийСчет.ВалютаДенежныхСредств
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютУпр
	|			ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		ПО РасчетыПоЭквайрингу.ДоговорЭквайринга = ДоговорыЭквайринга.Ссылка
	|ГДЕ
	|	РасчетыПоЭквайрингу.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковДенежныхСредствКПоступлениюОтЭквайера)
	|	И РасчетыПоЭквайрингу.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.СписаниеПоПлатежнойКарте)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК МестоХранения,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	&Период КАК ДатаДокументаИБ,
	|	&Ссылка КАК Ссылка,
	|	&Номер КАК НомерДокументаИБ,
	|	НЕОПРЕДЕЛЕНО КАК Статус,
	|	&Ответственный КАК Ответственный,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО КАК Дополнительно,
	|	&Комментарий КАК Комментарий,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПервичногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НомерПервичногоДокумента,
	|	СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиРасчетыПоЭквайрингу.Сумма, 0)) КАК Сумма,
	|	&Валюта КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	&Исправление КАК СторноИсправление,
	|	&СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	&Период КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет
	|ИЗ
	|	Документ.ВводОстатковРасчетовПоЭквайрингу КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковРасчетовПоЭквайрингу.РасчетыПоЭквайрингу КАК
	|			ДанныеТабличнойЧастиРасчетыПоЭквайрингу
	|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиРасчетыПоЭквайрингу.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ВводОстатковЛокализация.ВводОстатковРасчетовПоЭквайрингуДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ВводОстатковРасчетовПоЭквайрингу.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.6.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7a969360-2f99-4ef1-b32e-c5b555f1db6d");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВводОстатковРасчетовПоЭквайрингу.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет заполнение реквизита Договор эквайринга.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ДоговорыЭквайринга.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ЭквайринговыеТерминалы.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Регистрирует данные для обработчика обновления ОбработатьДанныеДляПереходаНаНовуюВерсию
// 
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ВводОстатковРасчетовПоЭквайрингу";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоЭквайрингу.Ссылка
	|ИЗ
	|	Документ.ВводОстатковРасчетовПоЭквайрингу.РасчетыПоЭквайрингу КАК РасчетыПоЭквайрингу
	|ГДЕ
	|	РасчетыПоЭквайрингу.ДоговорЭквайринга = ЗНАЧЕНИЕ(Справочник.ДоговорыЭквайринга.ПустаяСсылка)
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы.ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0
		Или Не ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Для Каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			ОбъектИзменен = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда
				
				#Область Эквайринг
				Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковДенежныхСредствКПоступлениюОтЭквайера Тогда
					Для каждого СтрокаТЧ Из ДокументОбъект.РасчетыПоЭквайрингу Цикл
						Если ЗначениеЗаполнено(СтрокаТЧ.ЭквайринговыйТерминал) Тогда
							СтрокаТЧ.ДоговорЭквайринга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.ЭквайринговыйТерминал, "Владелец");
						КонецЕсли;
					КонецЦикла;
					ОбъектИзменен = Истина;
				КонецЕсли;
				#КонецОбласти
			КонецЕсли;
				
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
