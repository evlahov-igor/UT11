#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура - состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.УпаковочныйЛист";
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка)
	|			ИЛИ ВидыНоменклатуры.НастройкаИспользованияСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА 2
	|				ИНАЧЕ 11
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

// Функция возращает массив с данными штрихкодов
//
// Параметры:
//  Штрихкоды - Массив, Строка - массив строк с кодами упаковочных листов или один код в виде строки.
//
// Возвращаемое значение:
//  	Массив - массив ссылок типа ДокументСсылка.УпаковочныйЛист.
//
Функция МассивСсылокПоМассивуКодов(Штрихкоды) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковочныеЛисты") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// Нужно добавить фильтрацию по отправителю (источнику) упаковочного листа
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Код В(&МассивШтрихкодов)";
	
	МассивШтрихкодов = Новый Массив;
	
	Если ТипЗнч(Штрихкоды) = Тип("Массив") Тогда
		
		Для Каждого ТекШтрихкод Из Штрихкоды Цикл
			Штрихкод = ВРег(СокрЛП(ТекШтрихкод));
			МассивШтрихкодов.Добавить(Штрихкод);
		КонецЦикла;
		
	Иначе
		
		МассивШтрихкодов.Добавить(Штрихкоды);
		
	КонецЕсли;
	
	

	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

// Процедура дополняет соответствие с данными штрихкодов номенклатуры
//	данными упаковочных листов.
//
// Параметры:
//	КешированныеЗначения - Структура - структура с кешируемыми значениями;
//	Штрихкоды            - Массив    - массив со штрихкодами.
//
Процедура ДополнитьДанныеПоШтрихкодам(КешированныеЗначения, Штрихкоды) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(УпаковочныйЛист.Ссылка) КАК Ссылка,
	|	КОЛИЧЕСТВО(*) КАК Количество,
	|	УпаковочныйЛист.Код КАК Штрихкод
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Код В(&МассивШтрихкодов)
	|	И УпаковочныйЛист.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковочныйЛист.Код";
	
	МассивШтрихкодов = Новый Массив;
	
	Для Каждого ТекШтрихкод Из Штрихкоды Цикл
		Штрихкод = ВРег(СокрЛП(ТекШтрихкод));
		МассивШтрихкодов.Добавить(Штрихкод);
	КонецЦикла;

	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекДанные = КешированныеЗначения.Штрихкоды[ВРег(СокрЛП(Выборка.Штрихкод))];
		Если ТекДанные.НеизвестныйШтрихкод
			И Выборка.Количество = 1 Тогда
			ТекДанные.УпаковочныйЛист     = Выборка.Ссылка;
			ТекДанные.НеизвестныйШтрихкод = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция создает новый проведенный документ "Упаковочный лист" и возвращает ссылку на него.
//
// Параметры:
//	ДанныеЗаполнения - Структура - структура для заполнения свойств новго документа.
//
// Возвращаемое значение:
//	ДокументСсылка.УпаковочныйЛист - ссылка документа "Упаковочный лист".
//
Функция СоздатьПровестиНовый(ДанныеЗаполнения = Неопределено) Экспорт
	
	ДокОбъект = Документы.УпаковочныйЛист.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДатаСеанса();
	ДокОбъект.Заполнить(ДанныеЗаполнения);
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

// Рассчитывает следующий код упаковочного листа
//
// Возвращаемое значение:
//	Строка - код упаковочного листа.
//
Функция ПолучитьКодНового(
	// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	Дата // Дата документа, требуется для генерации кода в разрезе годов
	// >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	
	) Экспорт

	// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	//ДлинаКодаБезПрефикса = 9;      
	ДлинаКодаБезПрефикса = 7;  

	// п.62 - требование использовать префикс ИБ "как есть" без перевода в число
	КР_НеПреобразовыватьПрефиксНомера = Истина;
	
	// Если не заполнена дата документа то ничего делать не будем
	// Выскочит платформенная ошибка
	Если Не ЗначениеЗаполнено(Дата) Тогда 
		Возврат "";
	КонецЕсли;	
	
	// Ниже код (типовой) блокировки "одновременного создания" следующего номера
	//	реализованного на блокировке константы
	// В текущей задаче требуется нумирация в пределах года
	// Понятно, что в этом случае нужно блокировать записи в разрезе года
	//	но доработка такого уровня (добавление новой сущности типа РС) 
	//	в данный момент не целесообразна
	// Константа.КодПоследнегоУпаковочногоЛиста по глоббальному поиску нигде не используется
	// Оставляем ее использование в типовом варианте
	// >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.КодПоследнегоУпаковочногоЛиста");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
//Петухов А.В.  27.09.2023  #3112   {
	//Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
//}	
	// >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УпаковочныйЛист.Код КАК Код
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Код ПОДОБНО &ШаблонКода
	// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
//Петухов А.В.  27.09.2023  #3112   {
	//|	И ГОД(УпаковочныйЛист.Дата) = ГОД(&Дата)
	|	И УпаковочныйЛист.Дата МЕЖДУ &НачалоГода И &КонецГода
//}	
	// >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	
	|
	|УПОРЯДОЧИТЬ ПО
	|	УпаковочныйЛист.Код УБЫВ";
		
	Префикс = СокрЛП(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить());
	КодПрефикса = "";
	Если ЗначениеЗаполнено(Префикс) Тогда    
		// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		Если КР_НеПреобразовыватьПрефиксНомера Тогда 
			КодПрефикса = Префикс;
		Иначе	
		// >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	
		КодПрефикса = СтрЗаменить(Строка(КодСимвола(ВРег(Прав(Префикс,1)))), Символы.НПП, "");
		КодПрефикса = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодПрефикса, 5);
		Если СтрДлина(Префикс) > 1 Тогда
			КодПрефикса =  СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
				СтрЗаменить(Строка(КодСимвола(ВРег(Лев(Префикс,1)))), Символы.НПП, ""), 5)
				+ КодПрефикса;
		КонецЕсли;
		// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		КонецЕсли;	
		// >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	
	КонецЕсли;
	
	ШаблонКода = КодПрефикса;
	Для Счет = 1 По ДлинаКодаБезПрефикса Цикл
		ШаблонКода = ШаблонКода + "[0-9]";
	КонецЦикла;

//Петухов А.В.  27.09.2023  #3112   {
	Год = Формат(Год(Дата),"ЧЦ=4; ЧВН=; ЧГ=0");
	ШаблонКода = СтрШаблон("%1 %2",ШаблонКода,Год);
//}	
	
	Запрос.УстановитьПараметр("ШаблонКода", ШаблонКода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		Если КР_НеПреобразовыватьПрефиксНомера Тогда 
//Петухов А.В.  27.09.2023  #3112   {
			//Код = Прав(Выборка.Код, ДлинаКодаБезПрефикса);
			Код = Сред(Выборка.Код, СтрДлина(Выборка.Код)-ДлинаКодаБезПрефикса - 5 + 1, ДлинаКодаБезПрефикса);
//}	
			Код = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
				СтрЗаменить(Строка(Число(Код)+1), Символы.НПП,""),
				ДлинаКодаБезПрефикса); 
//Петухов А.В.  27.09.2023  #3112   {
			//Код = КодПрефикса + Код;	
			Код = СтрШаблон("%1%2 %3",КодПрефикса,Код,Год);	
//}	
		Иначе	
		// >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	
//Петухов А.В.  27.09.2023  #3112   {
			//Код = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
			//	СтрЗаменить(Строка(Число(Выборка.Код)+1), Символы.НПП,""),
			//	СтрДлина(КодПрефикса) + ДлинаКодаБезПрефикса);
			КодБезГода = Лев(Выборка.Код,ДлинаКодаБезПрефикса);
			Код = СтрШаблон("%1 %2", СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
				СтрЗаменить(Строка(Число(КодБезГода)+1), Символы.НПП,""),
				СтрДлина(КодПрефикса) + ДлинаКодаБезПрефикса), Год);
//}	
		// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		КонецЕсли;	
		// >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	
	Иначе
//Петухов А.В.  27.09.2023  #3112   {
		//Код = КодПрефикса + СтроковыеФункцииКлиентСервер.ДополнитьСтроку("1", ДлинаКодаБезПрефикса);
		Код = СтрШаблон("%1%2 %3",КодПрефикса,СтроковыеФункцииКлиентСервер.ДополнитьСтроку("1", ДлинаКодаБезПрефикса),Год);	
//}	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.КодПоследнегоУпаковочногоЛиста.Установить(СтрЗаменить(Код, Символы.НПП, ""));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Код;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Код");
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = Метаданные.Документы.УпаковочныйЛист.ПредставлениеОбъекта + " " + Данные.Код;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Добавляет команду создания документа "Упаковочный лист".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  Неопределено, СтрокаТаблицыЗначений - Добавить команду создать на основании
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.УпаковочныйЛист) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.УпаковочныйЛист.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.УпаковочныйЛист);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУпаковочныеЛисты";

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УпаковочныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Упаковочный лист'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УпаковочныйЛистСРасшифровкой";
	КомандаПечати.Представление = НСтр("ru = 'Упаковочный лист (с расшифровкой состава)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокУпаковочныхЛистов";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ЭтикеткаУпаковочныеЛисты";
	КомандаПечати.Представление = НСтр("ru = 'Этикетка упаковочного листа'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УпаковочныйЛист") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УпаковочныйЛист",
				НСтр("ru = 'Упаковочный лист'"),
				ПечатьУпаковочныйЛист(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УпаковочныйЛистСРасшифровкой") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УпаковочныйЛистСРасшифровкой",
				НСтр("ru = 'Упаковочный лист (с расшифровкой состава)'"),
				ПечатьУпаковочныйЛистСРасшифровкой(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
			
КонецПроцедуры

Функция ПечатьУпаковочныйЛист(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ВыводитьУпаковки = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "УпаковочныйЛист";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(УпаковочныйЛист.Ссылка) КАК Представление,
	|	УпаковочныйЛист.Дата КАК Дата,
	|	УпаковочныйЛист.Код КАК Код,
	|	УпаковочныйЛист.Вид КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(УпаковочныйЛист.СкладУпаковки) КАК СкладПредставление,
	|	УпаковочныйЛист.Упаковал.ФизическоеЛицо КАК Упаковщик,
	|	УпаковочныйЛист.Основание КАК Основание
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковочныйЛистТовары.НомерСтроки КАК НомерСтроки,
	|	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПРЕДСТАВЛЕНИЕ(УпаковочныйЛистТовары.УпаковочныйЛистРодитель) КАК УпаковочныйЛистРодитель,
	|	ПРЕДСТАВЛЕНИЕ(УпаковочныйЛистТовары.УпаковочныйЛист) КАК УпаковочныйЛист,
	|	УпаковочныйЛистТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	УпаковочныйЛистТовары.Характеристика.НаименованиеПолное КАК ХарактеристикаПредставление,
	|	УпаковочныйЛистТовары.Серия.Наименование КАК СерияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(УпаковочныйЛистТовары.Упаковка) КАК УпаковкаПредставление,
	|	УпаковочныйЛистТовары.Номенклатура.Код КАК Код,
	|	УпаковочныйЛистТовары.Номенклатура.Артикул КАК Артикул,
	|	УпаковочныйЛистТовары.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(УпаковочныйЛистТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА УпаковочныйЛистТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(УпаковочныйЛистТовары.Упаковка)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(УпаковочныйЛистТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
	|	УпаковочныйЛистТовары.Количество
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|ГДЕ
	|	УпаковочныйЛистТовары.Ссылка В(&МассивОбъектов)
	|	И УпаковочныйЛистТовары.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[0]; // РезультатЗапроса
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать();
	
	РезультатЗапроса = МассивРезультатов[1]; // РезультатЗапроса
	ВыборкаПоТабличнымЧастям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РеквизитыДокумента = Новый Структура("Код, Дата, Представление");
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УпаковочныйЛист.ПФ_MXL_УпаковочныйЛист");
	
	ОбластьЗаголовок 		  = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСкладУпаковщик     = Макет.ПолучитьОбласть("СкладУпаковщик");
	ОбластьОснование	 	  = Макет.ПолучитьОбласть("Основание");
	
	ОбластьШапкаТаблицыНачало 					= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыТоварНачало 			= Макет.ПолучитьОбласть("СтрокаТаблицыТовар|НачалоСтроки");
	ОбластьСтрокаТаблицыУпаковочныйЛистНачало	= Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|НачалоСтроки");
	ОбластьПодвалТаблицыНачало 					= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыТоварКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицыТовар|КолонкаКодов");
	ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаКодов = Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов 		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Если НЕ ВыводитьКоды Тогда
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	Если НЕ ВыводитьУпаковки Тогда
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
				+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыТоварКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицыТовар|КолонкаТоваров");
	ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыТоварКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицыТовар|КонецСтроки");
	ОбластьСтрокаТаблицыУпаковочныйЛистКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|КонецСтроки");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	Если ВыводитьУпаковки Тогда
		ОбластьШапкаТаблицыКолонкаУпаковок = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьСтрокаТаблицыТоварКолонкаУпаковок = Макет.ПолучитьОбласть("СтрокаТаблицыТовар|КолонкаУпаковок");
		ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаУпаковок = Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|КолонкаУпаковок");
		ОбластьПодвалТаблицыКолонкаУпаковок = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			ТекстСообщения = НСтр("ru='Невозможно напечатать ""%Документ%"", т.к. не заполнена табличная часть.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Документ%", ВыборкаПоДокументам.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
			
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТекстЗаголовка = ВыборкаПоДокументам.Представление;
		ВыводитьСкладИУпаковщика = Истина;
		Если ВыборкаПоДокументам.Вид = Перечисления.ВидыУпаковочныхЛистов.Входящий Тогда
			ТекстЗаголовка = ТекстЗаголовка  + " " + НСтр("ru='(входящий)'", ОбщегоНазначения.КодОсновногоЯзыка());
			ВыводитьСкладИУпаковщика = Ложь;
		ИначеЕсли ВыборкаПоДокументам.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий Тогда
			ТекстЗаголовка = ТекстЗаголовка + " " + НСтр("ru='(исходящий)'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьОснование.Параметры.ОснованиеПредставление = ВыборкаПоДокументам.Основание;
		ТабличныйДокумент.Вывести(ОбластьОснование);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		НомерСтроки = 0;
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;
			
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыНачало = ОбластьСтрокаТаблицыУпаковочныйЛистНачало;
				ОбластьСтрокаКолонкаКодов = ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаКодов;
				ОбластьСтрокаТаблицыКолонкаТоваров = ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаТоваров;
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.УпаковочныйЛист = ВыборкаПоСтрокамТЧ.УпаковочныйЛист;
				Если ВыводитьКоды Тогда
					ОбластьСтрокаТаблицыКолонкаКодов = ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаКодов;
				КонецЕсли;
				Если ВыводитьУпаковки Тогда
					ОбластьСтрокаТаблицыКолонкаУпаковок = ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаУпаковок;
				КонецЕсли;
				ОбластьСтрокаТаблицыКонец = ОбластьСтрокаТаблицыУпаковочныйЛистКонец;
			Иначе
				ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
				ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
				ОбластьСтрокаТаблицыНачало = ОбластьСтрокаТаблицыТоварНачало;
				ОбластьСтрокаТаблицыКолонкаКодов = ОбластьСтрокаТаблицыТоварКолонкаКодов;
				ОбластьСтрокаТаблицыКолонкаТоваров = ОбластьСтрокаТаблицыТоварКолонкаТоваров;
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаПоСтрокамТЧ.НоменклатураПредставление,
					ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление,
					, // Упаковка
					ВыборкаПоСтрокамТЧ.СерияПредставление,
					ДопПараметрыПредставлениеНоменклатуры);
				Если ВыводитьКоды Тогда
					ОбластьСтрокаТаблицыКолонкаКодов = ОбластьСтрокаТаблицыТоварКолонкаКодов;
				КонецЕсли;
				Если ВыводитьУпаковки Тогда
					ОбластьСтрокаТаблицыКолонкаУпаковок = ОбластьСтрокаТаблицыТоварКолонкаУпаковок;
				КонецЕсли;
				ОбластьСтрокаТаблицыКонец = ОбластьСтрокаТаблицыТоварКонец;
			КонецЕсли;
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ[ИмяКолонкиКодов];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;
				
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			Если ВыводитьУпаковки Тогда
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		Если ВыводитьСкладИУпаковщика Тогда
			ОбластьСкладУпаковщик.Параметры.УпаковщикПредставление = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Упаковщик, ВыборкаПоДокументам.Дата);
			ОбластьСкладУпаковщик.Параметры.СкладПредставление = СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.СкладПредставление);
			ТабличныйДокумент.Вывести(ОбластьСкладУпаковщик);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьУпаковочныйЛистСРасшифровкой(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	ВыводитьУпаковки = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "УпаковочныйЛист";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковочныйЛистТовары.Ссылка,
	|	ИСТИНА КАК ЕстьВложенностьУпаковочныхЛистов
	|ПОМЕСТИТЬ СложныеУпаковочныеЛисты
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|ГДЕ
	|	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист
	|	И УпаковочныйЛистТовары.УпаковочныйЛистРодитель <> ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|	И УпаковочныйЛистТовары.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковочныйЛистТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(УпаковочныйЛист.Ссылка) КАК Представление,
	|	УпаковочныйЛист.Дата КАК Дата,
	|	УпаковочныйЛист.Код КАК Код,
	|	УпаковочныйЛист.Вид КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(УпаковочныйЛист.СкладУпаковки) КАК СкладПредставление,
	|	УпаковочныйЛист.Упаковал.ФизическоеЛицо КАК Упаковщик,
	|	УпаковочныйЛист.Основание КАК Основание,
	|	ЕСТЬNULL(СложныеУпаковочныеЛисты.ЕстьВложенностьУпаковочныхЛистов, ЛОЖЬ) КАК ЕстьВложенностьУпаковочныхЛистов
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ СложныеУпаковочныеЛисты КАК СложныеУпаковочныеЛисты
	|		ПО УпаковочныйЛист.Ссылка = СложныеУпаковочныеЛисты.Ссылка
	|ГДЕ
	|	УпаковочныйЛист.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковочныйЛистТовары.НомерСтроки КАК НомерСтроки,
	|	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	УпаковочныйЛистТовары.УпаковочныйЛистРодитель.Код КАК УпаковочныйЛистРодительКод,
	|	УпаковочныйЛистТовары.УпаковочныйЛистРодитель.Дата КАК УпаковочныйЛистРодительДата,
	|	ЕСТЬNULL(УпаковочныйЛистТовары.Номенклатура.НаименованиеПолное, """") КАК НоменклатураПредставление,
	|	ЕСТЬNULL(УпаковочныйЛистТовары.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаПредставление,
	|	ЕСТЬNULL(УпаковочныйЛистТовары.Серия.Наименование, """") КАК СерияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(УпаковочныйЛистТовары.Упаковка) КАК УпаковкаПредставление,
	|	УпаковочныйЛистТовары.Номенклатура.Код КАК Код,
	|	УпаковочныйЛистТовары.Номенклатура.Артикул КАК Артикул,
	|	УпаковочныйЛистТовары.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(УпаковочныйЛистТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА УпаковочныйЛистТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(УпаковочныйЛистТовары.Упаковка)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(УпаковочныйЛистТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
	|	УпаковочныйЛистТовары.Количество
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|ГДЕ
	|	УпаковочныйЛистТовары.Ссылка В(&МассивОбъектов)
	|	И НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	УпаковочныйЛистРодительКод,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УпаковочныйЛистТовары.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|			ТОГДА УпаковочныйЛистТовары.Ссылка
	|		ИНАЧЕ УпаковочныйЛистТовары.УпаковочныйЛистРодитель
	|	КОНЕЦ КАК УпаковочныйЛистРодитель,
	|	УпаковочныйЛистТовары.УпаковочныйЛист КАК УпаковочныйЛист,
	|	УпаковочныйЛистТовары.Ссылка КАК Ссылка,
	|	УпаковочныйЛистТовары.УпаковочныйЛист.Дата КАК Дата,
	|	УпаковочныйЛистТовары.УпаковочныйЛист.Код КАК Код
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|ГДЕ
	|	УпаковочныйЛистТовары.Ссылка В(&МассивОбъектов)
	|	И УпаковочныйЛистТовары.ЭтоУпаковочныйЛист";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[1]; // РезультатЗапроса
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать();
	
	РезультатЗапроса = МассивРезультатов[2]; // РезультатЗапроса
	ВыборкаПоТабличнымЧастям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РезультатЗапроса = МассивРезультатов[3]; // РезультатЗапроса
	УпаковочныеЛистыПоДокументам = РезультатЗапроса.Выгрузить();
	
	РеквизитыДокумента = Новый Структура("Код, Дата, Представление");
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УпаковочныйЛист.ПФ_MXL_УпаковочныйЛист");
	ВыводитьУпаковочныеЛисты = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковочныеЛисты");

	ОбластьЗаголовок 		  = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСкладУпаковщик     = Макет.ПолучитьОбласть("СкладУпаковщик");
	ОбластьОснование	 	  = Макет.ПолучитьОбласть("Основание");
	
	ОбластьШапкаТаблицыНачало 					= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыТоварНачало 			= Макет.ПолучитьОбласть("СтрокаТаблицыТовар|НачалоСтроки");
	ОбластьСтрокаТаблицыУпаковочныйЛистНачало	= Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|НачалоСтроки");
	ОбластьПодвалТаблицыНачало 					= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыУпаковочныйЛистРодитель					= Макет.ПолучитьОбласть("ШапкаТаблицы|УпаковочныйЛистРодитель");
	ОбластьСтрокаТаблицыТоварУпаковочныйЛистРодитель 			= Макет.ПолучитьОбласть("СтрокаТаблицыТовар|УпаковочныйЛистРодитель");
	ОбластьСтрокаТаблицыУпаковочныйЛистУпаковочныйЛистРодитель 	= Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|УпаковочныйЛистРодитель");
	ОбластьПодвалТаблицыУпаковочныйЛистРодитель 				= Макет.ПолучитьОбласть("ПодвалТаблицы|УпаковочныйЛистРодитель");
	
	ОбластьШапкаТаблицыКолонкаКодов 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыТоварКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицыТовар|КолонкаКодов");
	ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаКодов = Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов 		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Если НЕ ВыводитьУпаковочныеЛисты Тогда
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("УпаковочныйЛистРодитель").ШиринаКолонки;
	КонецЕсли;
			
	Если НЕ ВыводитьКоды Тогда	
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	Если НЕ ВыводитьУпаковки Тогда
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
				+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров 					= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыТоварКолонкаТоваров 			= Макет.ПолучитьОбласть("СтрокаТаблицыТовар|КолонкаТоваров");
	ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 					= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	Если ВыводитьУпаковки Тогда
		ОбластьШапкаТаблицыКолонкаУпаковок 					= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьСтрокаТаблицыТоварКолонкаУпаковок 			= Макет.ПолучитьОбласть("СтрокаТаблицыТовар|КолонкаУпаковок");
		ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаУпаковок	= Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|КолонкаУпаковок");
		ОбластьПодвалТаблицыКолонкаУпаковок 				= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");
	КонецЕсли;
	
	ОбластьШапкаТаблицыКонец 					= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыТоварКонец 				= Макет.ПолучитьОбласть("СтрокаТаблицыТовар|КонецСтроки");
	ОбластьСтрокаТаблицыУпаковочныйЛистКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныйЛист|КонецСтроки");
	ОбластьПодвалТаблицыКонец 					= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");

	ОбластьШапкаТаблицыУпаковочныеЛисты 	= Макет.ПолучитьОбласть("ШапкаТаблицыУпаковочныеЛисты");  
	ОбластьСтрокаТаблицыУпаковочныеЛисты 	= Макет.ПолучитьОбласть("СтрокаТаблицыУпаковочныеЛисты");
	ОбластьПодвалТаблицыУпаковочныеЛисты 	= Макет.ПолучитьОбласть("ПодвалТаблицыУпаковочныеЛисты");
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
			
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			ТекстСообщения = НСтр("ru='Невозможно напечатать ""%Документ%"", т.к. не заполнена табличная часть.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Документ%", ВыборкаПоДокументам.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		УпаковочныеЛистыДокумента = УпаковочныеЛистыПоДокументам.Скопировать(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка));
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыводитьСкладИУпаковщика = Истина;
		Если ВыборкаПоДокументам.Вид = Перечисления.ВидыУпаковочныхЛистов.Входящий Тогда
			
			ТекстЗаголовка = НСтр("ru='Упаковочный лист (входящий)'", ОбщегоНазначения.КодОсновногоЯзыка());
			ВыводитьСкладИУпаковщика = Ложь;
			
		ИначеЕсли ВыборкаПоДокументам.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий Тогда
			
			ТекстЗаголовка = НСтр("ru='Упаковочный лист (исходящий)'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ВыборкаПоДокументам.Представление;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьОснование.Параметры.ОснованиеПредставление = ВыборкаПоДокументам.Основание;
		ТабличныйДокумент.Вывести(ОбластьОснование);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыУпаковочныйЛистРодитель);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		НомерСтроки = 0;
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыНачало = ОбластьСтрокаТаблицыУпаковочныйЛистНачало;
				ОбластьСтрокаУпаковочныйЛистРодитель = ОбластьСтрокаТаблицыУпаковочныйЛистУпаковочныйЛистРодитель;
				ОбластьСтрокаКолонкаКодов = ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаКодов;
				ОбластьСтрокаТаблицыКолонкаТоваров = ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаТоваров;
				Если ВыводитьКоды Тогда
					ОбластьСтрокаТаблицыКолонкаКодов = ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаКодов;
				КонецЕсли;
				Если ВыводитьУпаковки Тогда
					ОбластьСтрокаТаблицыКолонкаУпаковок = ОбластьСтрокаТаблицыУпаковочныйЛистКолонкаУпаковок;
				КонецЕсли;
				ОбластьСтрокаТаблицыКонец = ОбластьСтрокаТаблицыУпаковочныйЛистКонец;
			Иначе
				ОбластьСтрокаТаблицыНачало = ОбластьСтрокаТаблицыТоварНачало;
				ОбластьСтрокаУпаковочныйЛистРодитель = ОбластьСтрокаТаблицыТоварУпаковочныйЛистРодитель;
				ОбластьСтрокаТаблицыКолонкаКодов = ОбластьСтрокаТаблицыТоварКолонкаКодов;
				ОбластьСтрокаТаблицыКолонкаТоваров = ОбластьСтрокаТаблицыТоварКолонкаТоваров;
				Если ВыводитьКоды Тогда
					ОбластьСтрокаТаблицыКолонкаКодов = ОбластьСтрокаТаблицыТоварКолонкаКодов;
				КонецЕсли;
				Если ВыводитьУпаковки Тогда
					ОбластьСтрокаТаблицыКолонкаУпаковок = ОбластьСтрокаТаблицыТоварКолонкаУпаковок;
				КонецЕсли;
				ОбластьСтрокаТаблицыКонец = ОбластьСтрокаТаблицыТоварКонец;
			КонецЕсли;
			
			ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьУпаковочныеЛисты Тогда
				ОбластьСтрокаУпаковочныйЛистРодитель.Параметры.УпаковочныйЛистРодитель = ВыборкаПоСтрокамТЧ.УпаковочныйЛистРодительКод; 
				ТабличныйДокумент.Присоединить(ОбластьСтрокаУпаковочныйЛистРодитель);
			КонецЕсли;
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ[ИмяКолонкиКодов];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;
				
			ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
			ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоСтрокамТЧ.НоменклатураПредставление,
				ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление,
				, // Упаковка
				ВыборкаПоСтрокамТЧ.СерияПредставление,
				ДопПараметрыПредставлениеНоменклатуры);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			Если ВыводитьУпаковки Тогда
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьУпаковочныеЛисты Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыУпаковочныйЛистРодитель);
		КонецЕсли;	
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		Если ВыводитьСкладИУпаковщика Тогда
			
			ОбластьСкладУпаковщик.Параметры.УпаковщикПредставление	= ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Упаковщик, ВыборкаПоДокументам.Дата);
			ОбластьСкладУпаковщик.Параметры.СкладПредставление		= СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.СкладПредставление);
			
			ТабличныйДокумент.Вывести(ОбластьСкладУпаковщик);
			
		КонецЕсли;
		
		Если ВыборкаПоДокументам.ЕстьВложенностьУпаковочныхЛистов Тогда
			
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыУпаковочныеЛисты);
			
			РекурсивноВывестиИерархиюУпаковочныхЛистов(ТабличныйДокумент, ОбластьСтрокаТаблицыУпаковочныеЛисты, УпаковочныеЛистыДокумента, ВыборкаПоДокументам.Ссылка);
			
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыУпаковочныеЛисты);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура РекурсивноВывестиИерархиюУпаковочныхЛистов(ТабличныйДокумент, ОбластьСтрокаТаблицыУпаковочныеЛисты, УпаковочныеЛистыДокумента, УпаковочныйЛистРодитель, Уровень = 0) Экспорт
	
	Если Уровень = 0 Тогда
		Отступ = "";
	Иначе
		Отступ = "└";
	КонецЕсли;
	
	Для Счет=1 По Уровень Цикл
		Отступ = Символы.НПП + Символы.НПП + Отступ;
	КонецЦикла;	
	
	Уровень = Уровень + 1;
	
	НайденныеСтроки = УпаковочныеЛистыДокумента.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛистРодитель));
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		ПредставлениеУпаковочногоЛиста = НСтр("ru = '%Отступ% %УпаковочныйЛист% от %Дата%'", ОбщегоНазначения.КодОсновногоЯзыка());
		ПредставлениеУпаковочногоЛиста = СтрЗаменить(ПредставлениеУпаковочногоЛиста, "%УпаковочныйЛист%", Строка.Код);
		ПредставлениеУпаковочногоЛиста = СтрЗаменить(ПредставлениеУпаковочногоЛиста, "%Дата%", Строка.Дата);
		ПредставлениеУпаковочногоЛиста = СтрЗаменить(ПредставлениеУпаковочногоЛиста, "%Отступ%", Отступ);

		ОбластьСтрокаТаблицыУпаковочныеЛисты.Параметры.УпаковочныйЛист = ПредставлениеУпаковочногоЛиста;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыУпаковочныеЛисты);

		РекурсивноВывестиИерархиюУпаковочныхЛистов(ТабличныйДокумент, ОбластьСтрокаТаблицыУпаковочныеЛисты, УпаковочныеЛистыДокумента, Строка.УпаковочныйЛист, Уровень);
		
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#Область КР_ДобавленныеПроцедурыИФункции

#Область ПрограммныйИнтерфейс

// << 22.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1098
// Функция, аналогичная НайтиПоНомеру() для документа без нумерации
//
// Параметры:
//  КодДокумента - Строка, Число -
//  ДатаИнтервала - Дата -
//
// Возвращаемое значение:
//  Неопределено, ДокументСсылка.УпаковочныйЛист -
//
Функция НайтиПоКоду(КодДокумента, ДатаИнтервала = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(КодДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УказанИнтервал = ЗначениеЗаполнено(ДатаИнтервала);
	Если Метаданные.Документы.УпаковочныйЛист.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		ПериодичностьИнтервала = "ГОД";
	ИначеЕсли Метаданные.Документы.УпаковочныйЛист.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		ПериодичностьИнтервала = "КВАРТАЛ";
	ИначеЕсли Метаданные.Документы.УпаковочныйЛист.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		ПериодичностьИнтервала = "МЕСЯЦ";
	ИначеЕсли Метаданные.Документы.УпаковочныйЛист.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		ПериодичностьИнтервала = "ДЕНЬ";
	Иначе
		ПериодичностьИнтервала = "СЕКУНДА";
		УказанИнтервал = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодДокумента"  , КодДокумента);
	Запрос.УстановитьПараметр("УказанИнтервал", УказанИнтервал);
	Запрос.УстановитьПараметр("ДатаИнтервала" , ДатаИнтервала);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УпаковочныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Код = &КодДокумента
	|	И ВЫБОР
	|			КОГДА &УказанИнтервал
	|				ТОГДА УпаковочныйЛист.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаИнтервала, %ПериодичностьИнтервала%) И КОНЕЦПЕРИОДА(&ДатаИнтервала, %ПериодичностьИнтервала%)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПериодичностьИнтервала%", ПериодичностьИнтервала);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.УпаковочныйЛист.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции // >> 22.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1098

#Область Проведение

// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
// Метод типового механизма. Использование префикса не возможно
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт

	МеханизмыДокумента.Добавить("КР_КоробаНаСкладах");   
	
КонецПроцедуры // >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
// Метод типового механизма. Использование префикса не возможно
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
	КонецЕсли;

	КР_ТекстЗапросаТаблицаКоробаНаСкладах(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции // >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

#КонецОбласти

// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
Функция КР_ТекстЗапросаТаблицаКоробаНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "КР_КоробаНаСкладах";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК Период,
	|	&Ссылка КАК Короб,
	|	&СкладУпаковки КАК Склад,
	|	1 КАК ВНаличии
	|ГДЕ
	|	&УчетОстатковКоробов
	|	И &УчетПоКоробамВедетсяВУТ11
	|";      
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции // >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

#КонецОбласти

// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
// Метод типового механизма. Использование префикса не желательно
Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                         КАК Период,
	|	ДанныеШапки.Ссылка                       КАК Ссылка,
	|	ДанныеШапки.СкладУпаковки                КАК СкладУпаковки, 
	|	ЕСТЬNULL(ДанныеШапки.СкладУпаковки.КР_УчетОстатковКоробов, ЛОЖЬ)
	|											 КАК УчетОстатковКоробов,
	|	ДанныеШапки.ПометкаУдаления              КАК ПометкаУдаления,
	|	ДанныеШапки.Проведен                     КАК Проведен
	|
	|ИЗ
	|	Документ.УпаковочныйЛист КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("СкладУпаковки", Реквизиты.СкладУпаковки);
	Запрос.УстановитьПараметр("УчетОстатковКоробов", Реквизиты.УчетОстатковКоробов);
	Запрос.УстановитьПараметр("ПометкаУдаления", Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен", Реквизиты.Проведен);

	// A2105505-1645 
	ДатаНачалаДвиженияКоробовПоДокументамУТ11 = 
		КР_ДополнительныеНастройкиПовтИсп.Значение("ДатаНачалаДвиженияКоробовПоДокументамУТ11", Ложь);
		
	Запрос.УстановитьПараметр("УчетПоКоробамВедетсяВУТ11", 
		Не ЗначениеЗаполнено(ДатаНачалаДвиженияКоробовПоДокументамУТ11)
		Или ДатаНачалаДвиженияКоробовПоДокументамУТ11 <= Реквизиты.Период);	
	//
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли