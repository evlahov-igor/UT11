#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ЦеныИСкидки");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов - таблиц значений - данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаБонусныеБаллы(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Добавляет команду создания документа "Начисление и списание бонусных баллов".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	ТаблицаЗначений, Неопределено - сформированные команды для вывода в подменю.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.НачислениеИСписаниеБонусныхБаллов) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.НачислениеИСписаниеБонусныхБаллов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.НачислениеИСписаниеБонусныхБаллов);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьБонусныеПрограммыЛояльности";

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                   КАК Ссылка,
	|	ДанныеДокумента.Дата                                     КАК Период,
	|	ДанныеДокумента.БонуснаяПрограммаЛояльности              КАК БонуснаяПрограммаЛояльности,
	|	ДанныеДокумента.ПериодДействия                           КАК ПериодДействия,
	|	ДанныеДокумента.КоличествоПериодовДействия               КАК КоличествоПериодовДействия,
	|	ДанныеДокумента.ПериодОтсрочкиНачалаДействия             КАК ПериодОтсрочкиНачалаДействия,
	|	ДанныеДокумента.КоличествоПериодовОтсрочкиНачалаДействия КАК КоличествоПериодовОтсрочкиНачалаДействия,
	|	ДанныеДокумента.ДатаОкончанияСрокаДействия               КАК ДатаОкончанияСрокаДействия
	|ИЗ
	|	Документ.НачислениеИСписаниеБонусныхБаллов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Ссылка",                                   Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Период",                                   Реквизиты.Период);
	Запрос.УстановитьПараметр("БонуснаяПрограммаЛояльности",              Реквизиты.БонуснаяПрограммаЛояльности);
	Запрос.УстановитьПараметр("ПериодДействия",                           Реквизиты.ПериодДействия);
	Запрос.УстановитьПараметр("КоличествоПериодовДействия",               Реквизиты.КоличествоПериодовДействия);
	Запрос.УстановитьПараметр("ПериодОтсрочкиНачалаДействия",             Реквизиты.ПериодОтсрочкиНачалаДействия);
	Запрос.УстановитьПараметр("КоличествоПериодовОтсрочкиНачалаДействия", Реквизиты.КоличествоПериодовОтсрочкиНачалаДействия);
	Запрос.УстановитьПараметр("ДатаОкончанияСрокаДействия",               Реквизиты.ДатаОкончанияСрокаДействия);
	
КонецПроцедуры

Функция ТекстЗапросаБонусныеБаллы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "БонусныеБаллы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтБонусныеБаллы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтБонусныеБаллы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	БонусныеБаллы.Период                      КАК Период,
	|	БонусныеБаллы.ВидДвижения                 КАК ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер                     КАК Партнер,
	|	СУММА(БонусныеБаллы.Начислено)            КАК Начислено,
	|	СУММА(БонусныеБаллы.КСписанию)            КАК КСписанию
	|ИЗ
	|	ВтБонусныеБаллы КАК БонусныеБаллы
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер,
	|	БонусныеБаллы.Период,
	|	БонусныеБаллы.ВидДвижения";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтБонусныеБаллы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтБонусныеБаллы";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачалоПериода(ВЫБОР
	|		КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, &КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, НЕДЕЛЯ, &КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, &КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, КВАРТАЛ, &КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ГОД, &КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕКАДА, &КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&Период, ПОЛУГОДИЕ, &КоличествоПериодовОтсрочкиНачалаДействия)
	|		ИНАЧЕ &Период
	|	КОНЕЦ, ДЕНЬ)                                      КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
	|	&БонуснаяПрограммаЛояльности                      КАК БонуснаяПрограммаЛояльности,
	|	ТабличнаяЧасть.Партнер                            КАК Партнер,
	|	ТабличнаяЧасть.Баллы                              КАК Начислено,
	|	0                                                 КАК КСписанию
	|ПОМЕСТИТЬ ВтБонусныеБаллы
	|ИЗ
	|	Документ.НачислениеИСписаниеБонусныхБаллов.Начисление КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачалоПериода(ВЫБОР КОГДА &ДатаОкончанияСрокаДействия = ДатаВремя(1,1,1) ТОГДА 
	|		ВЫБОР
	|			КОГДА &ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ДЕНЬ, &КоличествоПериодовДействия)
	|			КОГДА &ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, НЕДЕЛЯ, &КоличествоПериодовДействия)
	|			КОГДА &ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, МЕСЯЦ, &КоличествоПериодовДействия)
	|			КОГДА &ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, КВАРТАЛ, &КоличествоПериодовДействия)
	|			КОГДА &ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ГОД, &КоличествоПериодовДействия)
	|			КОГДА &ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ДЕКАДА, &КоличествоПериодовДействия)
	|			КОГДА &ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ТабличнаяЧасть.Период, ПОЛУГОДИЕ, &КоличествоПериодовДействия)
	|			ИНАЧЕ &Период
	|		КОНЕЦ
	|	ИНАЧЕ
	|		&ДатаОкончанияСрокаДействия
	|	КОНЕЦ, ДЕНЬ) КАК Период,
	|	ТабличнаяЧасть.ВидДвижения                        КАК ВидДвижения,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности        КАК БонуснаяПрограммаЛояльности,
	|	ТабличнаяЧасть.Партнер                            КАК Партнер,
	|	ТабличнаяЧасть.Начислено                          КАК Начислено,
	|	ТабличнаяЧасть.КСписанию                          КАК КСписанию
	|ИЗ (
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, &КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, НЕДЕЛЯ, &КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, &КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, КВАРТАЛ, &КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ГОД, &КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕКАДА, &КоличествоПериодовОтсрочкиНачалаДействия)
	|			КОГДА &ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ПОЛУГОДИЕ, &КоличествоПериодовОтсрочкиНачалаДействия)
	|			ИНАЧЕ &Период
	|		КОНЕЦ                                             КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
	|		&БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|		ТабличнаяЧасть.Партнер                            КАК Партнер,
	|		0                                                 КАК Начислено,
	|		ТабличнаяЧасть.Баллы                              КАК КСписанию
	|ИЗ
	|	Документ.НачислениеИСписаниеБонусныхБаллов.Начисление КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И (&КоличествоПериодовДействия > 0 ИЛИ &ДатаОкончанияСрокаДействия <> ДатаВремя(1,1,1))) КАК ТабличнаяЧасть
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачалоПериода(&Период, ДЕНЬ)                      КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)            КАК ВидДвижения,
	|	&БонуснаяПрограммаЛояльности                      КАК БонуснаяПрограммаЛояльности,
	|	ТабличнаяЧасть.Партнер                            КАК Партнер,
	|	ТабличнаяЧасть.Баллы                              КАК Начислено,
	|	ТабличнаяЧасть.Баллы                              КАК КСписанию
	|ИЗ
	|	Документ.НачислениеИСписаниеБонусныхБаллов.Списание КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
