
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ВыводДанныхОТоварномСоставе) Тогда
		Объект.ВыводДанныхОТоварномСоставе 
			= Метаданные.Документы.ТранспортнаяНакладная.Реквизиты.ВыводДанныхОТоварномСоставе.ЗначениеЗаполнения;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительности.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОчиститьСообщения();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	МассивОбъектов = Новый Массив;
	Для Каждого СтрТабл Из Объект.ДокументыОснования Цикл
		МассивОбъектов.Добавить(СтрТабл.ДокументОснование);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ЗаданиеНаПеревозку) Тогда
		МассивОбъектов.Добавить(Объект.ЗаданиеНаПеревозку);
	КонецЕсли;	
	
	Оповестить("Запись_ТранспортнаяНакладная", МассивОбъектов);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если Объект.ПометкаУдаления Тогда
		Оповестить("Запись_ТранспортнаяНакладная");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительностиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// << 18.04.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1465
	КР_ПослеЗаписиНаСервереДополнительно(ТекущийОбъект, ПараметрыЗаписи);
	// >> 18.04.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1465

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение.Свойство("Водитель", 				Объект.Водитель);
	ВыбранноеЗначение.Свойство("УдостоверениеСерия", 	Объект.УдостоверениеСерия);
	ВыбранноеЗначение.Свойство("УдостоверениеНомер",	Объект.УдостоверениеНомер);
КонецПроцедуры

&НаКлиенте
Процедура ВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ВодительЗаписан = Ложь;	
	Для Каждого ИнформацияВодителя Из Элемент.СписокВыбора Цикл
		Если ИнформацияВодителя.Значение.Водитель = Текст Тогда 
			ВодительЗаписан = Истина
		КонецЕсли;
	КонецЦикла;
	Если Не ВодительЗаписан Тогда
		Объект.УдостоверениеНомер = "";
		Объект.УдостоверениеСерия  = "";
		Объект.Водитель			  = Текст;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильГосударственныйНомерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение.Свойство("АвтомобильМарка",							Объект.АвтомобильМарка);
	ВыбранноеЗначение.Свойство("АвтомобильГосударственныйНомер",			Объект.АвтомобильГосударственныйНомер);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаВид",					Объект.ЛицензионнаяКарточкаВид);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаНомер",					Объект.ЛицензионнаяКарточкаНомер);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаРегистрационныйНомер",	Объект.ЛицензионнаяКарточкаРегистрационныйНомер);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаСерия",					Объект.ЛицензионнаяКарточкаСерия);
	ВыбранноеЗначение.Свойство("Прицеп",									Объект.Прицеп);
	ВыбранноеЗначение.Свойство("ГосударственныйНомерПрицепа",				Объект.ГосударственныйНомерПрицепа);
	ВыбранноеЗначение.Свойство("ВидПеревозки",								Объект.ВидПеревозки);
	ВыбранноеЗначение.Свойство("АвтомобильВместимостьВКубическихМетрах",	Объект.АвтомобильВместимостьВКубическихМетрах);
	ВыбранноеЗначение.Свойство("АвтомобильГрузоподъемностьВТоннах",			Объект.АвтомобильГрузоподъемностьВТоннах);
	ВыбранноеЗначение.Свойство("АвтомобильТип",								Объект.АвтомобильТип);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	
	ЗаполнитьСпискиВыбораВодителейИТС();	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПогрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		"АдресПогрузки",
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресПогрузкиПриИзменении(Элемент)
		
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект.АдресПогрузки,
		Объект.АдресПогрузкиЗначенияПолей);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресПогрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	ДоставкаТоваровКлиент.ОчиститьПредставлениеАдреса(
		Объект.АдресПогрузки,
		Объект.АдресПогрузкиЗначенияПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПогрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	АдресПогрузкиПриИзменении(Элемент);	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
		Элемент,
		Объект.АдресДоставки,
		Объект.АдресДоставкиЗначенияПолей);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		"АдресДоставки",
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ДоставкаТоваровКлиент.ОчиститьПредставлениеАдреса(
		Объект.АдресДоставки,
		Объект.АдресДоставкиЗначенияПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	АдресДоставкиПриИзменении(Элемент);	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПеревозкиПриИзменении(Элемент)
			
	УстановитьБанковскийСчетЗаказчикаПеревозки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикПриИзменении(Элемент)
		
	УстановитьБанковскийСчетПлательщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	УстановитьБанковскийСчетПеревозчика();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильТипОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение.Свойство("АвтомобильВместимостьВКубическихМетрах",	Объект.АвтомобильВместимостьВКубическихМетрах);
	ВыбранноеЗначение.Свойство("АвтомобильГрузоподъемностьВТоннах",			Объект.АвтомобильГрузоподъемностьВТоннах);
	ВыбранноеЗначение.Свойство("АвтомобильТип",								Объект.АвтомобильТип);
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильТипОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ТранспортноеСредствоЗаписано = Ложь;	
	Для Каждого ИнформацияТранспортногоСредства Из Элемент.СписокВыбора Цикл
		Если ИнформацияТранспортногоСредства.Значение.АвтомобильТип = Текст Тогда 
			ТранспортноеСредствоЗаписано = Истина
		КонецЕсли;
	КонецЦикла;
	Если Не ТранспортноеСредствоЗаписано Тогда
		Объект.АвтомобильГрузоподъемностьВТоннах  		= 0;
		Объект.АвтомобильВместимостьВКубическихМетрах  	= 0;
		Объект.АвтомобильТип							= Текст;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПослеУдаления(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеПриИзменении(Элемент)
		
	Если Элемент.Родитель.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элементы.ДокументыОснования.ТекущаяСтрока); 
	
	НайденныеСтроки = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекущаяСтрока.ДокументОснование));
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		
		Объект.ДокументыОснования.Удалить(НайденныеСтроки[1]);
		Элементы.ДокументыОснования.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьМассыПоДокументамОснованиям(Команда)
	
	Если Не ДокументыОснованияЗаполнены(Объект.ДокументыОснования) Тогда
		
		ТекстСообщения = НСтр("ru = 'Перед выполнением команды необходимо заполнить список документов-оснований.'");
		
		ПоказатьПредупреждение(,ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПерезаполнитьМассыПоДокументамОснованиямНаСервере();
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
		
	ЗаполнитьСпискиВыбораВодителейИТС();
	
	Элементы.ЗаданиеНаПеревозку.Видимость = ЗначениеЗаполнено(Объект.ЗаданиеНаПеревозку);
	
	УправлениеФормой(ЭтаФорма);
	
	// << 17.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-531   
	КР_ПриЧтенииСозданииНаСервереДополнительно(); 
	// >> 17.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-531
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ВыводитьТолькоНомераНакладных = Истина;
	
	Если Форма.Объект.ДокументыОснования.Количество() = 1 Тогда 	
		ВыводитьТолькоНомераНакладных = Ложь;	
	КонецЕсли;
		
	Форма.Элементы.ВыводДанныхОТоварномСоставе.Доступность = Не ВыводитьТолькоНомераНакладных;
			
	Если ВыводитьТолькоНомераНакладных Тогда 																
		Форма.Объект.ВыводДанныхОТоварномСоставе = ПредопределенноеЗначение("Перечисление.ВариантыВыводаДанныхОТоварномСоставе.НомераНакладных");
	КонецЕсли;
																							
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
КонецПроцедуры

&НаСервере
Процедура УстановитьБанковскийСчетПлательщика()
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетПлательщика) Тогда	
		Если ЗначениеЗаполнено(Объект.Плательщик) Тогда
			Если  ТипЗнч(Объект.Плательщик) = Тип("СправочникСсылка.Контрагенты") Тогда
				Объект.БанковскийСчетПлательщика = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Плательщик);
			Иначе
				СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
				СтруктураПараметров.Организация    		= Объект.Плательщик;
				Объект.БанковскийСчетПлательщика = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБанковскийСчетЗаказчикаПеревозки()
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетЗаказчикаПеревозки) Тогда	
		Если ЗначениеЗаполнено(Объект.ЗаказчикПеревозки) Тогда
			Если  ТипЗнч(Объект.ЗаказчикПеревозки) = Тип("СправочникСсылка.Контрагенты") Тогда
				Объект.БанковскийСчетЗаказчикаПеревозки = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.ЗаказчикПеревозки);
			Иначе
				СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
				СтруктураПараметров.Организация    		= Объект.ЗаказчикПеревозки;
				Объект.БанковскийСчетЗаказчикаПеревозки = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры	
	
&НаСервере
Процедура УстановитьБанковскийСчетПеревозчика()
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетПеревозчика) Тогда	
		Если ЗначениеЗаполнено(Объект.Перевозчик) Тогда		
			Объект.БанковскийСчетПеревозчика = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Перевозчик);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ЗаполнитьСпискиВыбораВодителейИТС()
	
	Элементы.Водитель.СписокВыбора.Очистить();
	Элементы.АвтомобильГосударственныйНомер.СписокВыбора.Очистить();
	Элементы.АвтомобильТип.СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
		Возврат;
	КонецЕсли;

	#Область Водитель
	
	Запрос =  Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	ТранспортнаяНакладная.Водитель КАК Водитель,
	|	ТранспортнаяНакладная.УдостоверениеСерия КАК УдостоверениеСерия,
	|	ТранспортнаяНакладная.УдостоверениеНомер КАК УдостоверениеНомер,
	|	МАКСИМУМ(ТранспортнаяНакладная.Дата) КАК Дата
	|ИЗ
	|	Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
	|ГДЕ
	|	ТранспортнаяНакладная.Грузоотправитель = &Грузоотправитель
	|	И ТранспортнаяНакладная.Водитель <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортнаяНакладная.Водитель,
	|	ТранспортнаяНакладная.УдостоверениеСерия,
	|	ТранспортнаяНакладная.УдостоверениеНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ТранспортнаяНакладная.Дата) УБЫВ";
	
	Запрос.УстановитьПараметр("Грузоотправитель", Объект.Грузоотправитель);
	
	Элементы.Водитель.СписокВыбора.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
		
	Пока РезультатЗапроса.Следующий() Цикл
		ИнформацияВодителя = Новый Структура("Водитель, УдостоверениеСерия, УдостоверениеНомер");
		ЗаполнитьЗначенияСвойств(ИнформацияВодителя, РезультатЗапроса);
		Элементы.Водитель.СписокВыбора.Добавить(ИнформацияВодителя, РезультатЗапроса.Водитель);
	КонецЦикла;	
	
	#КонецОбласти

	#Область АвтомобильГосударственныйНомер 
	
	Запрос =  Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	ТранспортнаяНакладная.АвтомобильМарка КАК АвтомобильМарка,
	|	ТранспортнаяНакладная.АвтомобильГосударственныйНомер КАК АвтомобильГосударственныйНомер,
	|	ТранспортнаяНакладная.ЛицензионнаяКарточкаВид КАК ЛицензионнаяКарточкаВид,
	|	ТранспортнаяНакладная.ЛицензионнаяКарточкаНомер КАК ЛицензионнаяКарточкаНомер,
	|	ТранспортнаяНакладная.ЛицензионнаяКарточкаРегистрационныйНомер КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ТранспортнаяНакладная.ЛицензионнаяКарточкаСерия КАК ЛицензионнаяКарточкаСерия,
	|	ТранспортнаяНакладная.Прицеп КАК Прицеп,
	|	ТранспортнаяНакладная.ГосударственныйНомерПрицепа КАК ГосударственныйНомерПрицепа,
	|	ТранспортнаяНакладная.ВидПеревозки КАК ВидПеревозки,
	|	МАКСИМУМ(ТранспортнаяНакладная.Дата) КАК Дата,
	|	ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах КАК АвтомобильГрузоподъемностьВТоннах,
	|	ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах КАК АвтомобильВместимостьВКубическихМетрах,
	|	ТранспортнаяНакладная.АвтомобильТип КАК АвтомобильТип
	|ИЗ
	|	Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
	|ГДЕ
	|	ТранспортнаяНакладная.Грузоотправитель = &Грузоотправитель
	|	И ТранспортнаяНакладная.АвтомобильГосударственныйНомер <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортнаяНакладная.АвтомобильМарка,
	|	ТранспортнаяНакладная.АвтомобильГосударственныйНомер,
	|	ТранспортнаяНакладная.ЛицензионнаяКарточкаВид,
	|	ТранспортнаяНакладная.ЛицензионнаяКарточкаНомер,
	|	ТранспортнаяНакладная.ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ТранспортнаяНакладная.ЛицензионнаяКарточкаСерия,
	|	ТранспортнаяНакладная.Прицеп,
	|	ТранспортнаяНакладная.ГосударственныйНомерПрицепа,
	|	ТранспортнаяНакладная.ВидПеревозки,
	|	ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах,
	|	ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах,
	|	ТранспортнаяНакладная.АвтомобильТип
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ТранспортнаяНакладная.Дата) УБЫВ";
	
	Запрос.УстановитьПараметр("Грузоотправитель", Объект.Грузоотправитель);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.АвтомобильГосударственныйНомер.СписокВыбора.Очистить();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ИнформацияТранспортногоСредства = Новый Структура("АвтомобильГосударственныйНомер, АвтомобильМарка, АвтомобильТип,
															|АвтомобильГрузоподъемностьВТоннах, АвтомобильВместимостьВКубическихМетрах,
															|ЛицензионнаяКарточкаВид, ЛицензионнаяКарточкаНомер, ЛицензионнаяКарточкаРегистрационныйНомер,
															|ЛицензионнаяКарточкаСерия, Прицеп, ГосударственныйНомерПрицепа, ВидПеревозки");
		ЗаполнитьЗначенияСвойств(ИнформацияТранспортногоСредства, РезультатЗапроса);
		Элементы.АвтомобильГосударственныйНомер.СписокВыбора.Добавить(ИнформацияТранспортногоСредства, РезультатЗапроса.АвтомобильГосударственныйНомер);
	КонецЦикла;
	
	#КонецОбласти

	#Область АвтомобильТип 
	
	Запрос =  Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	МАКСИМУМ(ТранспортнаяНакладная.Дата) КАК Дата,
	|	ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах КАК АвтомобильГрузоподъемностьВТоннах,
	|	ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах КАК АвтомобильВместимостьВКубическихМетрах,
	|	ТранспортнаяНакладная.АвтомобильТип КАК АвтомобильТип
	|ИЗ
	|	Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
	|ГДЕ
	|	ТранспортнаяНакладная.Грузоотправитель = &Грузоотправитель
	|	И ТранспортнаяНакладная.АвтомобильГосударственныйНомер = """"
	|	И ТранспортнаяНакладная.АвтомобильТип <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах,
	|	ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах,
	|	ТранспортнаяНакладная.АвтомобильТип
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ТранспортнаяНакладная.Дата) УБЫВ";
	
	Запрос.УстановитьПараметр("Грузоотправитель", Объект.Грузоотправитель);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.АвтомобильТип.СписокВыбора.Очистить();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ИнформацияТранспортногоСредства = Новый Структура("АвтомобильТип, АвтомобильГрузоподъемностьВТоннах, АвтомобильВместимостьВКубическихМетрах");
		ЗаполнитьЗначенияСвойств(ИнформацияТранспортногоСредства, РезультатЗапроса);
		Элементы.АвтомобильТип.СписокВыбора.Добавить(ИнформацияТранспортногоСредства, РезультатЗапроса.АвтомобильТип);
	КонецЦикла;     
	
	#КонецОбласти

	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументыОснованияЗаполнены(ДокументыОснования)
	
	ОснованияЗаполнены = Не (ДокументыОснования.Количество() = 0);
	
	Для Каждого СтрокаОснования Из ДокументыОснования Цикл
		Если Не ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
			ОснованияЗаполнены = Ложь;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОснованияЗаполнены;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьМассыПоДокументамОснованиямНаСервере()
	
	МассивОснований	= Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	ТипыОбъектов	= ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(МассивОснований);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = Документы.ЗаданиеНаПеревозку.ТекстЗапросаПолученияСпискаНакладныхИзЗаданийНаПеревозку(Истина)
					+ ОбщегоНазначенияУТ.РазделительЗапросовВПакете()
					+ Документы.ТранспортнаяНакладная.ТекстВТМассыИзОснований(ТипыОбъектов, Запрос);
	
	ЗаданияНаПеревозку = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ЗаданиеНаПеревозку) Тогда
		ЗаданияНаПеревозку.Добавить(Объект.ЗаданиеНаПеревозку);
	КонецЕсли;
	
	СпособыДоставкиПоЗаданиюНаПеревозку = ДоставкаТоваровКлиентСервер.СпособыДоставкиДоКлиентаСНашимУчастием(
											ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
	
	Запрос.УстановитьПараметр("ЗаданияНаПеревозку", ЗаданияНаПеревозку);
	Запрос.УстановитьПараметр("ВсеСтрокиАдресов", Истина);
	Запрос.УстановитьПараметр("ВыделенныеСтрокиАдресов", Новый Массив);
	Запрос.УстановитьПараметр("СпособыДоставкиПоЗаданиюНаПеревозку", СпособыДоставкиПоЗаданиюНаПеревозку);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными()[4]; // РезультатЗапроса
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.МассаБрутто	= 0;
	Объект.МассаНетто	= 0;
	
	Пока Выборка.Следующий() Цикл
		Объект.МассаБрутто	= Объект.МассаБрутто + Выборка.МассаБрутто;
		Объект.МассаНетто	= Объект.МассаНетто + Выборка.МассаНетто;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КР_ДобавленныеПроцедурыИФункции

// << 17.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-531   
&НаСервере
Процедура КР_ПриЧтенииСозданииНаСервереДополнительно() 
	
	// << 03.04.2023 Новиков Н.С., КРОК, JIRA№A2105505-1465
	
	#Область КР_Элементы_Шапка
	
	КР_ГруппаШапка = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_ГруппаШапка", , Элементы.ГруппаСтраницы);
	КР_ГруппаШапка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	КР_ГруппаШапка.Отображение = ОтображениеОбычнойГруппы.Нет;
	КР_ГруппаШапка.ОтображатьЗаголовок = Ложь; 
	КР_ГруппаШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	КР_ГруппаПодвал = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_ГруппаПодвал", ЭтотОбъект);
	КР_ГруппаПодвал.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	КР_ГруппаПодвал.Отображение = ОтображениеОбычнойГруппы.Нет;
	КР_ГруппаПодвал.ОтображатьЗаголовок = Ложь;
	КР_ГруппаПодвал.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Право;
	КР_ГруппаПодвал.РастягиватьПоГоризонтали = Истина;
	
	КР_ГруппаИтого = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_ГруппаИтого", КР_ГруппаПодвал);
	КР_ГруппаИтого.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	КР_ГруппаИтого.Отображение = ОтображениеОбычнойГруппы.Нет;
	КР_ГруппаИтого.ОтображатьЗаголовок = Ложь;
	КР_ГруппаИтого.Подсказка = НСтр("ru = 'Итоги'");
	КР_ГруппаИтого.ЦветФона = ЦветаСтиля.ИтогиФон;
	
	Если Элементы.ЗаданиеНаПеревозку.Родитель.Имя <> "КР_ГруппаШапка" Тогда
		Элементы.Переместить(Элементы.ЗаданиеНаПеревозку, КР_ГруппаШапка);
	КонецЕсли;
	Элементы.ЗаданиеНаПеревозку.Вид = ВидПоляФормы.ПолеВвода;
	Элементы.ЗаданиеНаПеревозку.Видимость = Истина;
	
	// << 27.01.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-848
	КР_ИдСтрокиЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_ИдентификаторСтроки", КР_ГруппаШапка);
	КР_ИдСтрокиЭлемент.РедактированиеТекста		= Ложь;
	КР_ИдСтрокиЭлемент.КнопкаВыбора				= Истина;
	КР_ИдСтрокиЭлемент.КнопкаОчистки			= Истина;
	КР_ИдСтрокиЭлемент.УстановитьДействие("НачалоВыбора",			"КР_ИдентификаторСтрокиНачалоВыбора");
	
	Элементы.ЗаданиеНаПеревозку.УстановитьДействие("ПриИзменении",	"КР_ЗаданиеНаПеревозкуПриИзменении");
	// >> 27.01.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-848
	
	КР_ИдСтрокиЭлемент.Видимость = Ложь;
	
	Декорация = КР_МетодыМодификацииФорм.ВставитьДекорациюФормы(ЭтотОбъект,
		"КР_ВыбратьМаршрут", КР_ГруппаШапка, Элементы.КР_ИдентификаторСтроки); 
	Декорация.ЦветТекста  = ЦветаСтиля["ТекстИнформационнойНадписи"];   
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ЗаданиеНаПеревозку) Тогда
		Декорация.Заголовок = НСтр("ru = 'Изменить маршрут'");
	Иначе
		Декорация.Заголовок = НСтр("ru = 'Выбрать маршрут'");
	КонецЕсли;	
	Декорация.Гиперссылка = Истина;
	Декорация.Видимость   = ЗначениеЗаполнено(Объект.Ссылка); 
	Декорация.УстановитьДействие("Нажатие", "КР_ВыбратьМаршрутНажатие" );
	
	#КонецОбласти
	
	#Область КР_Элементы_Подвала
	
	// КР_ВесГрузаИтого                            
	РеквизитФормы = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(
		ЭтотОбъект, "КР_ВесГрузаИтого", ОбщегоНазначения.ОписаниеТипаЧисло(
			15, 3, ДопустимыйЗнак.Неотрицательный), , НСтр("ru = 'Вес груза (итого)'"));
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект, РеквизитФормы, КР_ГруппаИтого);	
	ЭлементФормы.ТолькоПросмотр = Истина;
	
	// КР_ОбъемГрузаИтого                            
	РеквизитФормы = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(
		ЭтотОбъект, "КР_ОбъемГрузаИтого", ОбщегоНазначения.ОписаниеТипаЧисло(
			6, 2, ДопустимыйЗнак.Неотрицательный), , НСтр("ru = 'Объем груза (итого)'"));
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект, РеквизитФормы, КР_ГруппаИтого);	
	ЭлементФормы.ТолькоПросмотр = Истина;
	
	#КонецОбласти
	
	#Область КР_Элементы_Страница_Основное
	
	// КР_Отправитель
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_Отправитель", Элементы.ГруппаЛево);
	Элементы.КР_Отправитель.АвтоМаксимальнаяШирина = Ложь;
	Элементы.КР_Отправитель.МаксимальнаяШирина = 28;
	// ГалкинАН #4309 (07.08.2024) galkin.an {
	Элементы.КР_Отправитель.УстановитьДействие("ПриИзменении", "КР_ОтправительПриИзменении");
	// #4309 }
	
	// КР_Получатель
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_Получатель", Элементы.ГруппаЛево);
	Элементы.КР_Получатель.АвтоМаксимальнаяШирина = Ложь;
	Элементы.КР_Получатель.МаксимальнаяШирина = 28;
	// ГалкинАН #4309 (07.08.2024) galkin.an {	
	Элементы.КР_Получатель.УстановитьДействие("ПриИзменении", "КР_ПолучательПриИзменении");
	// #4309 }
	
	// КР_ЭкспедиторПартнер
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ЭкспедиторПартнер", Элементы.ГруппаЛево);
	Элементы.КР_ЭкспедиторПартнер.АвтоМаксимальнаяШирина = Ложь;
	Элементы.КР_ЭкспедиторПартнер.МаксимальнаяШирина = 28;
	Элементы.КР_ЭкспедиторПартнер.УстановитьДействие("ПриИзменении", "КР_ЭкспедиторПартнерПриИзменении");
	
	// КР_Экспедитор
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_Экспедитор", Элементы.ГруппаЛево);
	Элементы.КР_Экспедитор.АвтоМаксимальнаяШирина = Ложь;
	Элементы.КР_Экспедитор.МаксимальнаяШирина = 28;
	Элементы.КР_Экспедитор.Видимость = Ложь;
	
	// --> Евлахов Игорь Николаевич (Начало) 14.06.2024
	// Задача #3598
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.злСтатус", Элементы.ГруппаПраво);
	Элементы.злСтатус.АвтоМаксимальнаяШирина = Ложь;
	Элементы.злСтатус.МаксимальнаяШирина = 28;
	// <-- Евлахов Игорь Николаевич (Конец) 14.06.2024

	// ГалкинАН #4309 (07.08.2024) galkin.an {
	
	// КР_ЧерезЦС
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ЧерезЦС", Элементы.ГруппаПраво);
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Элементы.КР_ЧерезЦС.УстановитьДействие("ПриИзменении", "КР_ЧерезЦСПриИзменении");
	// #4309 }
	#КонецОбласти
	
	#Область КР_Элементы_Страница_ТоварныйРаздел
	
	// ГруппаДоверенность 
	Элементы.Переместить(Элементы.ГруппаДоверенность, Элементы.ГруппаПодписи);
	Элементы.ДоверенностьДата.Ширина = 7;
	
	// КР_ОценочнаяCтоимость
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ОценочнаяCтоимость", Элементы.ГруппаТоварныйРаздел, Элементы.ГруппаВыводДанныхОТоварномСоставе);
	
	// КР_ВесГруза
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ВесГруза", Элементы.ГруппаМасса);
	Элементы.КР_ВесГруза.АвтоМаксимальнаяШирина = Ложь;
	Элементы.КР_ВесГруза.МаксимальнаяШирина = 10;
	Элементы.КР_ВесГруза.ТолькоПросмотр = Истина;
	
	// КР_ОбъемГрузаТовар
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ОбъемГрузаТовар", Элементы.ГруппаМасса);
	Элементы.КР_ОбъемГрузаТовар.АвтоМаксимальнаяШирина = Ложь;
	Элементы.КР_ОбъемГрузаТовар.МаксимальнаяШирина = 10;
	Элементы.КР_ОбъемГрузаТовар.ТолькоПросмотр = Истина;
	
	// КР_КоличествоКоробов
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_КоличествоКоробов", Элементы.ГруппаМасса);
	Элементы.КР_КоличествоКоробов.АвтоМаксимальнаяШирина = Ложь;
	Элементы.КР_КоличествоКоробов.МаксимальнаяШирина = 10;
	Элементы.КР_КоличествоКоробов.УстановитьДействие("ПриИзменении", "КР_КоличествоКоробовПриИзменении");
	
	// --> Евлахов Игорь Николаевич (Начало) 31.08.2023
	// Задача #3058
	// злСрокДействияДоверенности
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.злСрокДействияДоверенности", Элементы.ГруппаДоверенность, Элементы.ДоверенностьВыдана);
	Элементы.злСрокДействияДоверенности.АвтоМаксимальнаяШирина = Ложь;
	Элементы.злСрокДействияДоверенности.МаксимальнаяШирина = 28;
	Элементы.злСрокДействияДоверенности.КнопкаОчистки = Истина;
	// <-- Евлахов Игорь Николаевич (Конец) 31.08.2023
	#КонецОбласти    
	
	#Область КР_Элементы_Страница_ТранспортныйРаздел
	
	// КР_Водитель
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_Водитель", Элементы.ГруппаВодитель, Элементы.Водитель);
	Элементы.КР_Водитель.АвтоМаксимальнаяШирина = Ложь;
	Элементы.КР_Водитель.МаксимальнаяШирина = 30;
	Элементы.КР_Водитель.УстановитьДействие("ПриИзменении", "КР_ВодительПриИзменении");
	
	// КР_ТранспортноеСредство
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ТранспортноеСредство", Элементы.ГруппаТранспортноеСредство, Элементы.АвтомобильГосударственныйНомер);
	Элементы.КР_ТранспортноеСредство.АвтоМаксимальнаяШирина = Ложь;
	Элементы.КР_ТранспортноеСредство.МаксимальнаяШирина = 30;
	Элементы.КР_ТранспортноеСредство.УстановитьДействие("ПриИзменении", "КР_ТранспортноеСредствоПриИзменении");
	
	// << 06.04.2023 Марченко С.Н., КРОК, JIRA№A2105505-1524
	
	// ГалкинАН #4309 (07.08.2024) galkin.an {
	//Было
	//// КР_ЧерезЦС
	//ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
	//	"Объект.КР_ЧерезЦС", Элементы.ГруппаТранспортныйРазделОсновное);
	//ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	// #4309 }
	
	// КР_ПолучательЛогистика
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ПолучательЛогистика", Элементы.ГруппаТранспортныйРазделОсновное);
	
	// КР_ОтправительЛогистика
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ОтправительЛогистика", Элементы.ГруппаТранспортныйРазделОсновное);
	
	// >> 06.04.2023 Марченко С.Н., КРОК, JIRA№A2105505-1524
	
	// --> Евлахов Игорь Николаевич (Начало) 08.09.2023
	// Задача #3065 e1cib/data/Справочник.узЗадачи?ref=811d00155d7d36f411ee3fec1935f64c
	// КР_ДатаДоставкиФакт
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ДатаДоставкиФакт", Элементы.ГруппаТранспортныйРазделОсновное, Элементы.Перевозчик);
	ЭлементФормы.Заголовок = "Дата доставки (для печатных форм)";
	// <-- Евлахов Игорь Николаевич (Конец) 08.09.2023

	// ГалкинАН #4309 (07.08.2024) galkin.an {
	
	Элементы.Переместить(Элементы.ГруппаВодитель, Элементы.ГруппаТранспортныйРазделПраво);
	Элементы.Переместить(Элементы.ГруппаЛицензионнаяКарточка, Элементы.ГруппаТранспортныйРазделЛево);

	Элементы.ГруппаТранспортныйРазделЛево.Объединенная = Истина;
	Элементы.ГруппаТранспортныйРазделПраво.Объединенная = Истина;
	
	Элементы.ГруппаТранспортныйРазделПраво.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	Элементы.ГруппаТранспортныйРазделПраво.ЦветФона = ОбщегоНазначенияВызовСервера.ЦветСтиля("АльтернативныйЦветФонаПоля");
	
	Если КР_МетодыМодификацииФорм.ЕстьЭлементФормы(ЭтотОбъект, Элементы.ВидПеревозки.Имя) Тогда
		Элементы.ВидПеревозки.Видимость = Ложь;
	КонецЕсли;
	
	// #4309 }
	
	#КонецОбласти    
	
	#Область КР_Элементы_Страница_ПрочиеМашиноместа
	
	// Страница "Прочие машиноместа"
	// ГалкинАН #4309 (07.08.2024) galkin.an {
	// Было.
	//	СтраницаПрочиеМашиноместа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(ЭтотОбъект,
	//	"КР_СтраницаПрочиеМашиноместа", Элементы.ГруппаСтраницы);
	// Стало.
	СтраницаПрочиеМашиноместа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(ЭтотОбъект,
		"КР_СтраницаПрочиеМашиноместа", Элементы.ГруппаСтраницы, Элементы.ГруппаТранспортныйРаздел);
	// #4309 }
	СтраницаПрочиеМашиноместа.Вид = ВидГруппыФормы.Страница;
	СтраницаПрочиеМашиноместа.Заголовок = НСтр("ru = 'Прочие машиноместа'");
	Если Не ЗначениеЗаполнено(СтраницаПрочиеМашиноместа.ПутьКДаннымЗаголовка) Тогда
		СтраницаПрочиеМашиноместа.ПутьКДаннымЗаголовка = "Объект.КР_ПрочиеМашиноместа.КоличествоСтрок";
	КонецЕсли;
	
	// КР_ПрочиеМашиноместа
	ТаблицаПрочиеМашиноместа = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ПрочиеМашиноместа", СтраницаПрочиеМашиноместа);
	ТаблицаПрочиеМашиноместа.Подвал = Истина;
	ТаблицаПрочиеМашиноместа.УстановитьДействие("ПриОкончанииРедактирования", "КР_ПрочиеМашиноместаПриОкончанииРедактирования");
	ТаблицаПрочиеМашиноместа.УстановитьДействие("ПослеУдаления", "КР_ПрочиеМашиноместаПослеУдаления");
	
	// КР_ПрочиеМашиноместа.НомерСтроки
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ПрочиеМашиноместа.НомерСтроки", ТаблицаПрочиеМашиноместа);
	
	// КР_ПрочиеМашиноместа.ОписаниеМеста
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ПрочиеМашиноместа.ОписаниеМеста", ТаблицаПрочиеМашиноместа);
	
	// КР_ПрочиеМашиноместа.КоличествоМест
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ПрочиеМашиноместа.КоличествоМест", ТаблицаПрочиеМашиноместа);
	
	// КР_ПрочиеМашиноместа.ВесГруза
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ПрочиеМашиноместа.ВесГруза", ТаблицаПрочиеМашиноместа);
	Элементы.КР_ПрочиеМашиноместаВесГруза.ПутьКДаннымПодвала = "Объект.КР_ПрочиеМашиноместа.ИтогВесГруза";
	
	// КР_ПрочиеМашиноместа.ОбъемГруза
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ПрочиеМашиноместа.ОбъемГруза", ТаблицаПрочиеМашиноместа);
	Элементы.КР_ПрочиеМашиноместаОбъемГруза.ПутьКДаннымПодвала = "Объект.КР_ПрочиеМашиноместа.ИтогОбъемГруза";
	
	// КР_ПрочиеМашиноместа.ТипоразмерУпаковки
	КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ПрочиеМашиноместа.ТипоразмерУпаковки", ТаблицаПрочиеМашиноместа);
	Элементы.КР_ПрочиеМашиноместаТипоразмерУпаковки.УстановитьДействие("ПриИзменении", "КР_ПрочиеМашиноместаТипоразмерУпаковкиПриИзменении");
	
	#КонецОбласти    
	// >> 03.04.2023 Новиков Н.С., КРОК, JIRA№A2105505-1465 
	
	// << 17.04.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1465
	РеквизитФормы = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(ЭтотОбъект,
		"КР_ДопСведениеДатаДоставкиФакт", Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.ДополнительныеСведения"));
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект.Ссылка;
	МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КР_ДатаДоставкиФакт;
	МенеджерЗаписи.Прочитать();
	ЗначениеВРеквизитФормы(МенеджерЗаписи, "КР_ДопСведениеДатаДоставкиФакт");
	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "КР_ДопСведениеДатаДоставкиФакт.Значение", , Элементы.Перевозчик);
	ЭлементФормы.Заголовок = НСтр("ru = 'Дата доставки (факт)'");
	ЭлементФормы.ОграничениеТипа = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ЭлементФормы.РастягиватьПоГоризонтали = Ложь;
	ЭлементФормы.Ширина = 15;
	ЭлементФормы.УстановитьДействие("ПриИзменении", "КР_ДатаДоставкиФактПриИзменении");
	
	// --> Евлахов Игорь Николаевич (Начало) 19.12.2023
	// Задача #3309 
	// *//--> Евлахов Игорь Николаевич (Начало было)
	// Происходит вызов процедуры, которая заполняет сохраняемые реквизиты
	// без изменения Модифицированность = Истина. Изменять сохраняемые реквизиты,
	// при открытии формы не надо.
	//КР_ОбновитьИтоги();
	// *//<-- Евлахов Игорь Николаевич (Конец было)
	// <-- Евлахов Игорь Николаевич (Конец) 19.12.2023
	// >> 17.04.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1465
	
КонецПроцедуры // >> 17.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-531

// << 18.04.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1465
&НаСервере
Процедура КР_ПослеЗаписиНаСервереДополнительно(ТекущийОбъект, ПараметрыЗаписи)
	
	МенеджерЗаписи = РеквизитФормыВЗначение("КР_ДопСведениеДатаДоставкиФакт");
	Если МенеджерЗаписи.Модифицированность() Тогда
		МенеджерЗаписи.Объект = Объект.Ссылка;
		МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КР_ДатаДоставкиФакт;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// ГалкинАН #4309 (07.08.2024) galkin.an {

&НаСервере
Процедура злЗаполнитьПолучателяОтправителяЛогистика()

	Документы.ТранспортнаяНакладная.злЗаполнитьПолучателяОтправителяЛогистика(Объект);
	
КонецПроцедуры

&НаСервере
Процедура злУстановитьАдресСклада(Склад, ИмяПоля)

	Документы.ТранспортнаяНакладная.злУстановитьАдресСклада(Объект, Склад, ИмяПоля);
		
КонецПроцедуры

// #4309 }

#Область КР_СобытияЭлементовФормы 

// << 27.01.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-848
&НаКлиенте
Процедура КР_ЗаданиеНаПеревозкуПриИзменении(Элемент)
	
	// Если "ЗаданиеНаПеревозку" было изменено, то очистим зависимый от него реквизит "ИдентификаторСтроки"
	Объект.КР_ИдентификаторСтроки = "";
	
	// << 04.04.2023 Новиков Н.С., КРОК, JIRA№A2105505-1465
	Если ЗначениеЗаполнено(Объект.ЗаданиеНаПеревозку) Тогда
		Элементы.КР_ВыбратьМаршрут.Видимость = Истина;
	Иначе
		Элементы.КР_ВыбратьМаршрут.Видимость = Ложь;
	КонецЕсли;	
	// >> 04.04.2023 Новиков Н.С., КРОК, JIRA№A2105505-1465 
	
КонецПроцедуры // >> 27.01.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-848

// << 27.01.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-848
&НаКлиенте
Процедура КР_ИдентификаторСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ЗаданиеНаПеревозку) Тогда
		ТекстСообщения =
			НСтр("ru = 'Выбор реквизита ""Идентификатор строки"" возможен только при заполненном реквизите ""Задание на перевозку""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ЗаданиеНаПеревозку");
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораИд = Новый Структура;
	ПараметрыВыбораИд.Вставить("ЗаданиеНаПеревозку", Объект.ЗаданиеНаПеревозку);
	
	ОповещениеОВыбореСтроки = Новый ОписаниеОповещения("КР_ОповещениеОВыбореИдентификаторСтроки", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.КР_ФормаВыбораСтрокиЗаданиеНаПеревозку", ПараметрыВыбораИд, ЭтотОбъект,
		, , , ОповещениеОВыбореСтроки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // >> 27.01.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-848

// << 18.04.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1465
&НаКлиенте
Процедура КР_ДатаДоставкиФактПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры // >> 18.04.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаКлиенте
Процедура КР_ПрочиеМашиноместаПриОкончанииРедактирования(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КР_ОбновитьИтоги();

КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаКлиенте
Процедура КР_ПрочиеМашиноместаПослеУдаления(Элемент)
	
	КР_ОбновитьИтоги();

КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаКлиенте
Процедура КР_ЭкспедиторПартнерПриИзменении(Элемент)

	КР_ЭкспедиторПартнерПриИзмененииСервер();
	
КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаКлиенте
Процедура КР_ПрочиеМашиноместаТипоразмерУпаковкиПриИзменении(Элемент)

	ТекСтрока = Элементы.КР_ПрочиеМашиноместа.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.ТипоразмерУпаковки) Тогда
		ТекСтрока.ОбъемГруза = ТекСтрока.КоличествоМест *
			ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекСтрока.ТипоразмерУпаковки, "Объем");
		Элементы.КР_ПрочиеМашиноместаОбъемГруза.Доступность = Ложь;
	Иначе
		ТекСтрока.ОбъемГруза = 0;
		Элементы.КР_ПрочиеМашиноместаОбъемГруза.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаКлиенте
Процедура КР_ВодительПриИзменении(Элемент)

	КР_ЗаполнитьДанныеВодителя();
	
КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаКлиенте
Процедура КР_ТранспортноеСредствоПриИзменении(Элемент)

	КР_ЗаполнитьДанныеТранспортногоСредства();
	
КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаКлиенте
Процедура КР_КоличествоКоробовПриИзменении(Элемент)
	
	КР_ОбновитьИтоги();
	
КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаКлиенте
Процедура КР_ВыбратьМаршрутНажатие()
	
	ОповещениеОВыбореСтроки = Новый ОписаниеОповещения("КР_ОповещениеОВыбореСтрокиЗаданиеНаПеревозку", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ЗаданиеНаПеревозку", Объект.ЗаданиеНаПеревозку);
	
	ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.КР_ФормаВыбораСтрокиЗаданиеНаПеревозку", ПараметрыФормы, ЭтотОбъект,
		, , , ОповещениеОВыбореСтроки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Элементы.КР_ВыбратьМаршрут.Заголовок = "Изменить маршрут";	
		
КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// ГалкинАН #4309 (07.08.2024) galkin.an {

&НаКлиенте
Процедура КР_ЧерезЦСПриИзменении(Элемент)
	
	злЗаполнитьПолучателяОтправителяЛогистика();
	
КонецПроцедуры 

&НаКлиенте
Процедура КР_ОтправительПриИзменении(Элемент)
	
	злЗаполнитьПолучателяОтправителяЛогистика();
	злУстановитьАдресСклада(Объект.КР_Отправитель, "АдресПогрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура КР_ПолучательПриИзменении(Элемент)
	
	злЗаполнитьПолучателяОтправителяЛогистика();
	злУстановитьАдресСклада(Объект.КР_Получатель, "АдресДоставки");
	
КонецПроцедуры

// #4309 }

#КонецОбласти

#Область КР_Страница_Основное

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаСервере
Процедура КР_ЭкспедиторПартнерПриИзмененииСервер()

	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.КР_ЭкспедиторПартнер, Объект.КР_Экспедитор);
	
КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 27.01.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-848
// Обработка выбора индентификатора строки.
//
// Параметры:
//  Результат - Строка - Строка, содержащая идентификатор выбранной строки
//  ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
&НаКлиенте
Процедура КР_ОповещениеОВыбореИдентификаторСтроки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
		Объект.КР_ИдентификаторСтроки = Результат.КлючСвязи;
		// >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
	Иначе
		Объект.КР_ИдентификаторСтроки = "";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КР_Страница_ТранспортныйРаздел  

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
// Обработка выбора индентификатора строки.
//
// Параметры:
//  Результат - Строка - Строка, содержащая идентификатор выбранной строки
//  ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
&НаКлиенте
Процедура КР_ОповещениеОВыбореСтрокиЗаданиеНаПеревозку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.КР_ИдентификаторСтроки = Результат.КлючСвязи;
		Объект.Перевозчик = Результат.КР_Перевозчик;
		
		Объект.КР_Водитель = Результат.КР_Водитель;
		КР_ЗаполнитьДанныеВодителя();
		
		Объект.КР_ТранспортноеСредство = Результат.КР_ТранспортноеСредство;
		КР_ЗаполнитьДанныеТранспортногоСредства();
	КонецЕсли;

КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаСервере
Процедура КР_ЗаполнитьДанныеТранспортногоСредства()

	// ГалкинАН #4309 (08.08.2024) galkin.an {
	// Было.
	//Если ЗначениеЗаполнено(Объект.КР_ТранспортноеСредство) Тогда
	//	ДанныеТранспортногоСредства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КР_ТранспортноеСредство, 
	//		"Код, Марка, Прицеп, ВидПеревозки, Тип, ГосударственныйНомерПрицепа, ГрузоподъемностьВТоннах, ВместимостьВКубическихМетрах,
	//		|ЛицензионнаяКарточкаСерия, ЛицензионнаяКарточкаНомер, ЛицензионнаяКарточкаВид, ЛицензионнаяКарточкаРегистрационныйНомер");		
	//									
	//	Объект.АвтомобильГосударственныйНомер = ДанныеТранспортногоСредства.Код;
	//	Объект.АвтомобильМарка = ДанныеТранспортногоСредства.Марка;
	//	
	//	Объект.Прицеп = ДанныеТранспортногоСредства.Прицеп;
	//	Объект.ГосударственныйНомерПрицепа = ДанныеТранспортногоСредства.ГосударственныйНомерПрицепа; 
	//	
	//	Объект.ВидПеревозки  = ДанныеТранспортногоСредства.ВидПеревозки;
	//	Объект.АвтомобильТип = ДанныеТранспортногоСредства.Тип;
	//	
	//	Объект.АвтомобильВместимостьВКубическихМетрах = ДанныеТранспортногоСредства.ВместимостьВКубическихМетрах;
	//	Объект.АвтомобильГрузоподъемностьВТоннах = ДанныеТранспортногоСредства.ГрузоподъемностьВТоннах;
	//	
	//	Объект.ЛицензионнаяКарточкаСерия = ДанныеТранспортногоСредства.ЛицензионнаяКарточкаСерия;
	//	Объект.ЛицензионнаяКарточкаНомер = ДанныеТранспортногоСредства.ЛицензионнаяКарточкаНомер;
	//	Объект.ЛицензионнаяКарточкаВид   = ДанныеТранспортногоСредства.ЛицензионнаяКарточкаВид;
	//	Объект.ЛицензионнаяКарточкаРегистрационныйНомер = ДанныеТранспортногоСредства.ЛицензионнаяКарточкаРегистрационныйНомер;
	//Иначе
	//	Объект.АвтомобильГосударственныйНомер = "";
	//	Объект.АвтомобильМарка = "";
	//	Объект.Прицеп = "";
	//	Объект.ГосударственныйНомерПрицепа = ""; 
	//	Объект.ВидПеревозки  = "";
	//	Объект.АвтомобильТип = Справочники.ТипыТранспортныхСредств.ПустаяСсылка();
	//	Объект.АвтомобильВместимостьВКубическихМетрах = 0;
	//	Объект.АвтомобильГрузоподъемностьВТоннах = 0;
	//	Объект.ЛицензионнаяКарточкаСерия = "";
	//	Объект.ЛицензионнаяКарточкаНомер = "";
	//	Объект.ЛицензионнаяКарточкаВид   = "";
	//	Объект.ЛицензионнаяКарточкаРегистрационныйНомер = "";
	//КонецЕсли;
	//Стало.
	Документы.ТранспортнаяНакладная.злЗаполнитьДанныеТранспортногоСредства(Объект);	
	// #4309 }
	
КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаСервере
Процедура КР_ЗаполнитьДанныеВодителя()
	
	Если ЗначениеЗаполнено(Объект.КР_Водитель) Тогда
		ВодительскоеУдостоверение = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(Объект.КР_Водитель, 
										Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение, Объект.Дата);
		
		Объект.Водитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КР_Водитель, "Наименование");
		Объект.УдостоверениеСерия = ВодительскоеУдостоверение.Серия;
		Объект.УдостоверениеНомер = ВодительскоеУдостоверение.Номер;
	Иначе
		Объект.Водитель = "";
		Объект.УдостоверениеСерия = "";
		Объект.УдостоверениеНомер = "";
	КонецЕсли;	
	
КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

#КонецОбласти

#Область КР_Прочее

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
//
&НаСервере
Процедура КР_ОбновитьИтоги()
	
	СтруктураКоэффициентов = КР_ЗначенияКоэффициентов();
	
	// --> Евлахов Игорь Николаевич (Начало) 08.11.2023
	// Задача #3309
	Объект.КР_ОбъемГрузаТовар = Объект.КР_КоличествоКоробов * СтруктураКоэффициентов.КоэфОбъемаКороба;
	// <-- Евлахов Игорь Николаевич (Конец) 08.11.2023
	
	ЭтотОбъект.КР_ВесГрузаИтого = Объект.КР_ВесГрузаПоПрочимМашиноместам +
		Объект.КР_КоличествоКоробов * СтруктураКоэффициентов.КоэфВесаКороба;
	ЭтотОбъект.КР_ОбъемГрузаИтого = Объект.КР_ОбъемГрузаПоПрочимМашиноместам +
		Объект.КР_КоличествоКоробов * СтруктураКоэффициентов.КоэфОбъемаКороба;
	
КонецПроцедуры // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

// << 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465
&НаСервереБезКонтекста
Функция КР_ЗначенияКоэффициентов()
	
	СтруктураКоэффициентов = Новый Структура;
	СтруктураКоэффициентов.Вставить("КоэфВесаКороба", КР_ДополнительныеНастройкиПовтИсп.Значение("КоэффициентВесаКороба"));
	СтруктураКоэффициентов.Вставить("КоэфОбъемаКороба", КР_ДополнительныеНастройкиПовтИсп.Значение("КоэффициентОбъемаКороба"));
	
	Возврат СтруктураКоэффициентов;
	
КонецФункции  // >> 04.04.2023 Новиков Н.С., КРОК, JIRA№ A2105505-1465

#КонецОбласти

#КонецОбласти
