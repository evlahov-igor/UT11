
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
		
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма,
		Новый Структура("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяПо);
	ДоставкаТоваров.УстановитьДоступностьАдресовДоставки(ЭтаФорма.Элементы);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительности.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительностиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ЗаполнитьТоварыКДоставке();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТоварыКДоставке", ТоварыКДоставке.Выгрузить());
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	ОбработкаОповещенияЛокализация(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.РабочееМестоМенеджераПоДоставке.Форма.ФормаВыбораРаспоряжений" Тогда
		РазбитьПунктДоставки(ВыбранноеЗначение);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьТоварыКДоставке();
	
	ЗаполнитьСлужебныеРеквизитыМаршрута();
	
	Элементы.РаспоряженияЗаполнитьПоРасходнымОрдерам.Доступность  = ЗначениеЗаполнено(Объект.Ссылка);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_ЗаданиеНаПеревозку", Неопределено, Объект.Ссылка);
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
		
	Если Объект.Распоряжения.Количество() > 0 Тогда
		Если Склад <> Объект.Склад Тогда		
			Ответ = Неопределено;
		
			ПоказатьВопрос(Новый ОписаниеОповещения("СкладПриИзмененииЗавершение", ЭтотОбъект),
				НСтр("ru='Списки будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
            Возврат;
		Иначе
			Возврат;	
		КонецЕсли;
	Иначе 	
		
		Склад = Объект.Склад;
		
	КонецЕсли;
	
	ПриИзмененииСкладаСервер();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        
        Объект.Склад = Склад;
        Возврат;
        
    Иначе
        
        Склад = Объект.Склад;
        
    КонецЕсли;
    
    ПриИзмененииСкладаСервер();

КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоПриИзменении(Элемент)
	
	ТранспортноеСредствоПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыДоставки.СоСклада")
		И ЕстьОрдерныеСклады
		И СтатусБыл <> Объект.Статус
		И СтатусБыл <> ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Закрыто")
		И СтатусБыл <> ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Отправлено")
		И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Закрыто")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Отправлено")) Тогда
		
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Перезаполнить'"));
		Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не перезаполнять'"));
		Текст = НСтр("ru = 'Перезаполнить задание по связанным расходным ордерам на товары?';");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОПерезаполненииПоОрдерам", ЭтотОбъект), Текст, Режим);
		
	Иначе
		
		ТекстОповещения = ПриИзмененииСтатусаИПерезаполнении();
		ОповеститьОбИзменениях(ТекстОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильВместимостьВКубическихМетрахПриИзменении(Элемент)
	
	АвтомобильГрузоподъемностьВместимостьПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильГрузоподъемностьВТоннахПриИзменении(Элемент)
	
	АвтомобильГрузоподъемностьВместимостьПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяРейсаПланСПриИзменении(Элемент)
	
	Для Каждого СтрокаМаршрута Из Объект.Маршрут Цикл
		
		Если СтрокаМаршрута.ВремяС = '00010101'
			ИЛИ СтрокаМаршрута.ВремяС < Объект.ДатаВремяРейсаПланС Тогда
			СтрокаМаршрута.ВремяС = Объект.ДатаВремяРейсаПланС;
			СтрокаМаршрута.ВремяСБезДаты = Дата(1,1,1,Час(СтрокаМаршрута.ВремяС),Минута(СтрокаМаршрута.ВремяС),0);
			Если СтрокаМаршрута.ВремяС > СтрокаМаршрута.ВремяПо Тогда
				СтрокаМаршрута.ВремяПо = СтрокаМаршрута.ВремяС;
				СтрокаМаршрута.ВремяСБезДаты = Дата(1,1,1,Час(СтрокаМаршрута.ВремяПо),Минута(СтрокаМаршрута.ВремяПо),0);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеВыполняетПриИзменении(Элемент)
	
	НастроитьПоТипуИсполнителя()
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	
	ПеревозчикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	ВодительПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВодительФИООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение.Свойство("Водитель", 				Объект.ВодительФИО);
	ВыбранноеЗначение.Свойство("УдостоверениеСерия", 	Объект.УдостоверениеСерия);
	ВыбранноеЗначение.Свойство("УдостоверениеНомер",	Объект.УдостоверениеНомер);
КонецПроцедуры

&НаКлиенте
Процедура ВодительФИООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ВодительЗаписан = Ложь;	
	Для Каждого ИнформацияВодителя Из Элемент.СписокВыбора Цикл
		Если ИнформацияВодителя.Значение.Водитель = Текст Тогда 
			ВодительЗаписан = Истина
		КонецЕсли;
	КонецЦикла;
	Если Не ВодительЗаписан Тогда
		Объект.УдостоверениеНомер = "";
		Объект.УдостоверениеСерия = "";
		Объект.ВодительФИО   	  = Текст;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильГосударственныйНомерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение.Свойство("АвтомобильМарка",							Объект.АвтомобильМарка);
	ВыбранноеЗначение.Свойство("АвтомобильГосударственныйНомер",			Объект.АвтомобильГосударственныйНомер);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаВид",					Объект.ЛицензионнаяКарточкаВид);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаНомер",					Объект.ЛицензионнаяКарточкаНомер);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаРегистрационныйНомер",	Объект.ЛицензионнаяКарточкаРегистрационныйНомер);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаСерия",					Объект.ЛицензионнаяКарточкаСерия);
	ВыбранноеЗначение.Свойство("Прицеп",									Объект.Прицеп);
	ВыбранноеЗначение.Свойство("ГосударственныйНомерПрицепа",				Объект.ГосударственныйНомерПрицепа);
	ВыбранноеЗначение.Свойство("ВидПеревозки",								Объект.ВидПеревозки);
	ВыбранноеЗначение.Свойство("АвтомобильВместимостьВКубическихМетрах",	Объект.АвтомобильВместимостьВКубическихМетрах);
	ВыбранноеЗначение.Свойство("АвтомобильГрузоподъемностьВТоннах",			Объект.АвтомобильГрузоподъемностьВТоннах);
	ВыбранноеЗначение.Свойство("АвтомобильТип",								Объект.АвтомобильТип);
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильТипОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение.Свойство("АвтомобильВместимостьВКубическихМетрах",	Объект.АвтомобильВместимостьВКубическихМетрах);
	ВыбранноеЗначение.Свойство("АвтомобильГрузоподъемностьВТоннах",			Объект.АвтомобильГрузоподъемностьВТоннах);
	ВыбранноеЗначение.Свойство("АвтомобильТип",								Объект.АвтомобильТип);
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильТипОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ТранспортноеСредствоЗаписано = Ложь;	
	Для Каждого ИнформацияТранспортногоСредства Из Элемент.СписокВыбора Цикл
		Если ИнформацияТранспортногоСредства.Значение.АвтомобильТип = Текст Тогда 
			ТранспортноеСредствоЗаписано = Истина
		КонецЕсли;
	КонецЦикла;
	Если Не ТранспортноеСредствоЗаписано Тогда
		Объект.АвтомобильГрузоподъемностьВТоннах  		= "";
		Объект.АвтомобильВместимостьВКубическихМетрах  	= "";
		Объект.АвтомобильТип							= Текст;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМаршрут

&НаКлиенте
Процедура МаршрутПередУдалением(Элемент, Отказ)
		
	ВыделенныеСтроки = Элементы.Маршрут.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество()>0 Тогда
		Модифицированность = Истина;
		МаршрутПередУдалениемНаСервере(Элементы.Маршрут.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
 
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДоставленоПриИзменении(Элемент)
	
	Если Элементы.Маршрут.ТекущиеДанные.Доставлено Тогда
				
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи",Элементы.Маршрут.ТекущиеДанные.КлючСвязи);
		СтруктураПоиска.Вставить("Доставлено", Ложь);
		
		Для Каждого СтрокаРаспоряжений Из Объект.Распоряжения.НайтиСтроки(СтруктураПоиска) Цикл
			СтрокаРаспоряжений.Доставлено = Истина; 	
		КонецЦикла;	
		
	Иначе 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи",Элементы.Маршрут.ТекущиеДанные.КлючСвязи);
		СтруктураПоиска.Вставить("Доставлено", Истина);
		
		Для Каждого СтрокаРаспоряжений Из Объект.Распоряжения.НайтиСтроки(СтруктураПоиска) Цикл
			СтрокаРаспоряжений.Доставлено = Ложь; 	
		КонецЦикла;	
		
	КонецЕсли;
	
	// << 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
	КР_МаршрутДоставленоПриИзмененииДополнительно();
	// >> 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = "Адрес";
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		ТекущиеДанные[ИмяРеквизитаАдресаДоставки],
		ТекущиеДанные[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОткрытие(Элемент, СтандартнаяОбработка)
	
	АдресПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОчистка(Элемент, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = "Адрес";
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	
	ДоставкаТоваровКлиент.ОчиститьПредставлениеАдреса(
		ТекущиеДанные[ИмяРеквизитаАдресаДоставки],
		ТекущиеДанные[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = "Адрес";
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		ТекущиеДанные,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутВремяСПриИзменении(Элемент)
	
	ПриИзмененииВремяС();
	ОтсортироватьСписокМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДатаСПриИзменении(Элемент)
	
	ПриИзмененииВремяС();
	ОтсортироватьСписокМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутВремяПоПриИзменении(Элемент)

	ПриИзмененииВремяПо();
	ОтсортироватьСписокМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутВесПриИзменении(Элемент)
	ОбновитьИтоговыйВесОбъемЗаполненность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутОбъемПриИзменении(Элемент)
	ОбновитьИтоговыйВесОбъемЗаполненность(ЭтаФорма);  
	// << 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
	КР_МаршрутОбъемПриИзмененииДополнительно();
	// >> 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Поле.Имя = "МаршрутПолучателиОтправители" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаданиеНаПеревозку", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТранспортноеСредство", Объект.ТранспортноеСредство);
		ПараметрыФормы.Вставить("ВесЗадания", Объект.Маршрут.Итог("Вес"));
		ПараметрыФормы.Вставить("ОбъемЗадания", Объект.Маршрут.Итог("Объем"));
		ПараметрыФормы.Вставить("ДатаВремяРейсаПланС", Объект.ДатаВремяРейсаПланС);
		ПараметрыФормы.Вставить("ВидДоставки", Объект.Операция);
		ПараметрыФормы.Вставить("Адрес", ТекущиеДанные.Адрес);
		ПараметрыФормы.Вставить("ВремяС", ТекущиеДанные.ВремяС);
		ПараметрыФормы.Вставить("ВремяПо", ТекущиеДанные.ВремяПо);
		ПараметрыФормы.Вставить("АдресРаспоряжений", ПоместитьРаспоряженияВХранилище(ТекущиеДанные.КлючСвязи));
		ПараметрыФормы.Вставить("Статус", Объект.Статус);
		ПараметрыФормы.Вставить("АдресТоваровКДоставке", ПоместитьВХранилищеТоварыКДоставке());
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРедактированияРаспоряжений",ЭтотОбъект);

		ОткрытьФорму("Обработка.РабочееМестоМенеджераПоДоставке.Форма.ФормаРаспоряженияПоПункту",
			ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	МаршрутВыборЛокализация(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура ОткрытьСклады(Команда)
	
	ПараметрыФормы = Новый Структура("МассивДокументов, ЗаголовокФормы",
		СкладыПогрузки.ВыгрузитьЗначения(), НСтр("ru = 'Склады погрузки'"));
	ОткрытьФорму("ОбщаяФорма.СписокПроизвольныхОбъектовУП",
		ПараметрыФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнестиПоВремени(Команда)
	
	ОчиститьСообщения();
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Маршрут)
		И Не ПроверитьРазбитьПунктДоставкиСервер() Тогда
		
		АдресРаспоряжений = ПоместитьРаспоряженияВХранилище(Элементы.Маршрут.ТекущиеДанные.КлючСвязи);
		ПараметрыФормы = Новый Структура("АдресРаспоряжений", АдресРаспоряжений);
		ОткрытьФорму("Обработка.РабочееМестоМенеджераПоДоставке.Форма.ФормаВыбораРаспоряжений", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбъединитьПоВремени(Команда)
	
	ОчиститьСообщения();	

	ВыделенныеСтроки = Элементы.Маршрут.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() < 2 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для объединения необходимо выделить хотя бы 2 строки.';"));
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ПроверитьПередОбъединением(ВыделенныеСтроки);
	
	Если СтруктураВозврата.РазныеАдреса Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось объединить выделенные строки: выберите строки с одинаковыми адресами.';"));
		Возврат;	
	ИначеЕсли СтруктураВозврата.РазныеДанные Тогда
		СтрВопроса = НСтр("ru = 'Выделенные строки содержат несколько значений данных (время, доп. информация). Объединение строк приведет к потере всех значений, кроме первой строки. Продолжить?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ОбъединитьПоВремениЗавершение",
			ЭтотОбъект, Новый Структура("ВыделенныеСтроки, СтруктураВозврата", ВыделенныеСтроки, СтруктураВозврата)),
			СтрВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
		
	 ОбъединитьПоВремениФрагмент(ВыделенныеСтроки, СтруктураВозврата);
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьПоВремениЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    СтруктураВозврата = ДополнительныеПараметры.СтруктураВозврата;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОбъединитьПоВремениФрагмент(ВыделенныеСтроки, СтруктураВозврата);

КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьПоВремениФрагмент(Знач ВыделенныеСтроки, Знач СтруктураВозврата)
    
    ОбъединитьСтрокиМаршрута(ВыделенныеСтроки,СтруктураВозврата.МассивКодовСтрок)

КонецПроцедуры

&НаКлиенте
Процедура МаршрутДоставленоУстановитьВсе(Команда)
		
	Для Каждого СтрокаРаспоряжений Из Объект.Распоряжения Цикл
		СтрокаРаспоряжений.Доставлено = Истина; 	
	КонецЦикла;	
	
	Для Каждого СтрокаМаршрута Из Объект.Маршрут Цикл
		СтрокаМаршрута.Доставлено = Истина; 	
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДоставленоСнятьВсе(Команда)
		
	Для Каждого СтрокаРаспоряжений Из Объект.Распоряжения Цикл
		СтрокаРаспоряжений.Доставлено = Ложь; 	
	КонецЦикла;	
	
	Для Каждого СтрокаМаршрута Из Объект.Маршрут Цикл
		СтрокаМаршрута.Доставлено = Ложь; 	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРасходнымОрдерам(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаданиеНаПеревозку.ФормаДокумента.Команда.ЗаполнитьПоРасходнымОрдерам");
	
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Перезаполнить'"));
	Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не перезаполнять'"));
	Текст = НСтр("ru = 'Перезаполнить задание по связанным расходным ордерам на товары?';");
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОПерезаполненииПоОрдерам", ЭтотОбъект), Текст, Режим);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортноеСредство.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаданиеВыполняет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаданийНаПеревозку.Формируется;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Ложь);
	
	// << 01.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	КР_УстановитьУсловноеОформлениеДополнительно();
	// >> 01.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ТабличнаяЧастьРаспоряжения

&НаКлиенте
Процедура ОткрытьФормуПодбораРаспоряжений()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Склад",Склад);
	МаршрутТекущаяСтрока = Элементы.Маршрут.ТекущаяСтрока;
	Если МаршрутТекущаяСтрока <> Неопределено Тогда
		ПараметрыФормы.Вставить("Зона",Элементы.Маршрут.ТекущиеДанные.Зона);
	КонецЕсли;
	ПараметрыФормы.Вставить("ВидДоставки", Объект.Операция);
	ПараметрыФормы.Вставить("ЗаданиеНаПеревозку", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОтборПоТипуИсполнителей", Объект.ЗаданиеВыполняет);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодбораРаспоряжений", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаданиеНаПеревозку.Форма.ФормаПодбораРаспоряжений", ПараметрыФормы,
		ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораРаспоряжений(СтруктураВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПослеПодбораРаспоряженийСервер(СтруктураВозврата);
	
КонецПроцедуры

&НаСервере
Процедура ПослеПодбораРаспоряженийСервер(СтруктураВозврата)
	
	Распоряжения = ПолучитьИзВременногоХранилища(СтруктураВозврата.АдресРаспоряжений);
	Товары = ПолучитьИзВременногоХранилища(СтруктураВозврата.АдресТоваров);
	
	Запрос = Новый Запрос(ТекстЗапросаИзмененныеДобавленныеСтрокиРаспоряжений());
	Запрос.УстановитьПараметр("ИсходнаяТаблица",Объект.Распоряжения.Выгрузить());
	Запрос.УстановитьПараметр("ПодобранныеРаспоряжения", Распоряжения);
	Запрос.УстановитьПараметр("ИсходныеТовары", ТоварыКДоставке.Выгрузить());
	Запрос.УстановитьПараметр("ПодобранныеТовары", Товары);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Модифицированность = Не РезультатЗапроса[5].Пустой()
		Или Не РезультатЗапроса[6].Пустой()
		Или Не РезультатЗапроса[7].Пустой();
	
	ИзмененныеДобавленныеСтроки = Новый Массив;
	СтрокаМаршрута = Неопределено;
	
	СтруктураПоиска = Новый Структура("Распоряжение,Склад");
	
	ВыборкаИзмененныеСтроки = РезультатЗапроса[5].Выбрать();
	
	Пока ВыборкаИзмененныеСтроки.Следующий() Цикл
		
		СтрокаРаспоряжений = Объект.Распоряжения[ВыборкаИзмененныеСтроки.НомерСтроки - 1];
		ИзменениеВес = ВыборкаИзмененныеСтроки.Вес - СтрокаРаспоряжений.Вес;
		ИзменениеОбъем = ВыборкаИзмененныеСтроки.Объем - СтрокаРаспоряжений.Объем;
		ЗаполнитьЗначенияСвойств(СтрокаРаспоряжений, ВыборкаИзмененныеСтроки);
		ИзменитьВесОбъемМаршрута(СтрокаРаспоряжений.КлючСвязи, ИзменениеВес, ИзменениеОбъем);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРаспоряжений);
		// Товары будут заново добавлены, удалим строки до изменения
		Для Каждого СтрокаТовары Из ТоварыКДоставке.НайтиСтроки(СтруктураПоиска) Цикл
			ТоварыКДоставке.Удалить(СтрокаТовары);
		КонецЦикла;
		ИзмененныеДобавленныеСтроки.Добавить(СтрокаРаспоряжений);
	КонецЦикла;
	
	ВыборкаДобавляемыеСтроки = РезультатЗапроса[6].Выбрать();
	Пока ВыборкаДобавляемыеСтроки.Следующий() Цикл
		
		СтрокаРаспоряжений = Объект.Распоряжения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспоряжений, ВыборкаДобавляемыеСтроки);
		
		СтрокаМаршрута = ДоставкаТоваров.ДобавитьИзменитьПунктПоРеквизитамДоставки(
			Объект.Маршрут, ВыборкаДобавляемыеСтроки, Объект.ДатаВремяРейсаПланС);
		
		СтрокаРаспоряжений.КлючСвязи = СтрокаМаршрута.КлючСвязи;
		
		ИзмененныеДобавленныеСтроки.Добавить(СтрокаРаспоряжений);
		
	КонецЦикла;
	
	ТоварыИзмененныхИДобавленныхРаспоряжений = РезультатЗапроса[7].Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТоварыИзмененныхИДобавленныхРаспоряжений, ТоварыКДоставке);
	
	ОбновитьИтоговыйВесОбъемЗаполненность(ЭтаФорма);
	
	ОбновитьСкладыПогрузки();
	ЗаполнитьСлужебныеРеквизитыМаршрута();
	ДоставкаТоваров.ЗаполнитьПризнакДоставляетсяПолностью(ТоварыИзмененныхИДобавленныхРаспоряжений,
		Объект.Распоряжения, ИзмененныеДобавленныеСтроки);
	
	Если СтрокаМаршрута <> Неопределено Тогда
		Элементы.Маршрут.ТекущаяСтрока = СтрокаМаршрута.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаИзмененныеДобавленныеСтрокиРаспоряжений()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтроки,
	|	ИсходнаяТаблица.Распоряжение,
	|	ИсходнаяТаблица.Склад,
	|	ИсходнаяТаблица.Вес,
	|	ИсходнаяТаблица.Объем
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодобранныеРаспоряжения.Распоряжение,
	|	ПодобранныеРаспоряжения.Вес,
	|	ПодобранныеРаспоряжения.Объем,
	|	ПодобранныеРаспоряжения.Перевозчик,
	|	ПодобранныеРаспоряжения.ПолучательОтправитель,
	|	ПодобранныеРаспоряжения.ВремяС,
	|	ПодобранныеРаспоряжения.ВремяПо,
	|	ПодобранныеРаспоряжения.ДополнительнаяИнформация,
	|	ПодобранныеРаспоряжения.Склад,
	|	ПодобранныеРаспоряжения.Адрес,
	|	ПодобранныеРаспоряжения.АдресЗначенияПолей,
	|	ПодобранныеРаспоряжения.Зона
	|ПОМЕСТИТЬ ПодобранныеРаспоряжения
	|ИЗ
	|	&ПодобранныеРаспоряжения КАК ПодобранныеРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеТовары.Распоряжение,
	|	ИсходныеТовары.Склад,
	|	ИсходныеТовары.ПолучательОтправитель,
	|	ИсходныеТовары.Номенклатура,
	|	ИсходныеТовары.Характеристика,
	|	ИсходныеТовары.Назначение,
	|	ИсходныеТовары.Серия,
	|	ИсходныеТовары.Количество,
	|	ИсходныеТовары.ВсеТовары
	|ПОМЕСТИТЬ ИсходныеТовары
	|ИЗ
	|	&ИсходныеТовары КАК ИсходныеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодобранныеТовары.Распоряжение,
	|	ПодобранныеТовары.Склад,
	|	ПодобранныеТовары.ПолучательОтправитель,
	|	ПодобранныеТовары.Номенклатура,
	|	ПодобранныеТовары.Характеристика,
	|	ПодобранныеТовары.Назначение,
	|	ПодобранныеТовары.Серия,
	|	ПодобранныеТовары.Количество,
	|	ПодобранныеТовары.ВсеТовары
	|ПОМЕСТИТЬ ПодобранныеТовары
	|ИЗ
	|	&ПодобранныеТовары КАК ПодобранныеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспоряженияСвернутые.Распоряжение,
	|	РаспоряженияСвернутые.Склад,
	|	СУММА(РаспоряженияСвернутые.Вес) КАК Вес,
	|	СУММА(РаспоряженияСвернутые.Объем) КАК Объем,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИсходнаяТаблица.Распоряжение ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ИзмененнаяСтрока
	|ПОМЕСТИТЬ РаспоряженияСвернутые
	|ИЗ
	|	ПодобранныеРаспоряжения КАК РаспоряженияСвернутые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ПО (ИсходнаяТаблица.Распоряжение = РаспоряженияСвернутые.Распоряжение)
	|			И (ИсходнаяТаблица.Склад = РаспоряженияСвернутые.Склад)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспоряженияСвернутые.Склад,
	|	РаспоряженияСвернутые.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененныеСтроки.Вес,
	|	ИзмененныеСтроки.Объем,
	|	ИсходнаяТаблица.НомерСтроки
	|ИЗ
	|	РаспоряженияСвернутые КАК ИзмененныеСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ПО (ИсходнаяТаблица.Распоряжение = ИзмененныеСтроки.Распоряжение)
	|			И (ИсходнаяТаблица.Склад = ИзмененныеСтроки.Склад)
	|ГДЕ
	|	ИзмененныеСтроки.ИзмененнаяСтрока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавляемыеСтроки.Распоряжение,
	|	РаспоряженияСвернутые.Вес,
	|	ДобавляемыеСтроки.Объем,
	|	ДобавляемыеСтроки.Перевозчик,
	|	ДобавляемыеСтроки.ПолучательОтправитель,
	|	ДобавляемыеСтроки.ВремяС,
	|	ДобавляемыеСтроки.ВремяПо,
	|	ДобавляемыеСтроки.ДополнительнаяИнформация,
	|	ДобавляемыеСтроки.Склад,
	|	ДобавляемыеСтроки.Адрес,
	|	ДобавляемыеСтроки.АдресЗначенияПолей,
	|	ДобавляемыеСтроки.Зона,
	|	ДобавляемыеСтроки.Распоряжение Ссылка Документ.ПоручениеЭкспедитору КАК ЭтоПоручениеЭкспедитору
	|ИЗ
	|	ПодобранныеРаспоряжения КАК ДобавляемыеСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияСвернутые КАК РаспоряженияСвернутые
	|		ПО (РаспоряженияСвернутые.Распоряжение = ДобавляемыеСтроки.Распоряжение)
	|			И (РаспоряженияСвернутые.Склад = ДобавляемыеСтроки.Склад)
	|			И (НЕ РаспоряженияСвернутые.ИзмененнаяСтрока)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодобранныеТовары.Распоряжение,
	|	ПодобранныеТовары.Склад,
	|	ПодобранныеТовары.ПолучательОтправитель,
	|	ПодобранныеТовары.Номенклатура,
	|	ПодобранныеТовары.Характеристика,
	|	ПодобранныеТовары.Назначение,
	|	ПодобранныеТовары.Серия,
	|	ПодобранныеТовары.Количество,
	|	ПодобранныеТовары.ВсеТовары
	|ИЗ
	|	ПодобранныеТовары КАК ПодобранныеТовары";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТабличнаяЧастьМаршрут

&НаСервере 
Процедура МаршрутПередУдалениемНаСервере(Знач ВыделенныеСтроки)
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.Маршрут.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		КлючСвязи = ТекущаяСтрока.КлючСвязи;
		
		Объект.Маршрут.Удалить(ТекущаяСтрока);
		
		СтруктураПоиска = Новый Структура("Распоряжение, Склад");
		НайденныеСтроки = Объект.Распоряжения.НайтиСтроки(Новый Структура("КлючСвязи",КлючСвязи));
		Для Каждого СтрокаРаспоряжений Из НайденныеСтроки Цикл
			Объект.Распоряжения.Удалить(СтрокаРаспоряжений);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРаспоряжений);
			НайденныеСтрокиТоваров = ТоварыКДоставке.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТовары Из НайденныеСтрокиТоваров Цикл
				ТоварыКДоставке.Удалить(СтрокаТовары);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьИтоговыйВесОбъемЗаполненность(ЭтаФорма);
	
	ОбновитьСкладыПогрузки();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьРазбитьПунктДоставкиСервер()
	
	КлючСвязи = Объект.Маршрут.НайтиПоИдентификатору(Элементы.Маршрут.ТекущаяСтрока).КлючСвязи;
	КоличествоРаспоряжений = Объект.Распоряжения.НайтиСтроки(Новый Структура("КлючСвязи",КлючСвязи)).Количество();
	Если КоличествоРаспоряжений < 2 Тогда
		Текст = НСтр("ru='Разбиение строки возможно для адресов, к которым относится более одного распоряжения';");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Истина;
	КонецЕсли;
	Если КоличествоРаспоряжений > 2 Тогда
		Возврат Ложь; //Вернуться в клиент и открыть форму выбора распоряжений
	КонецЕсли;
	МассивРаспоряжений = Новый Массив;
	Отбор = Новый Структура("КлючСвязи", КлючСвязи);
	СтрокаРаспоряжения = Объект.Распоряжения.НайтиСтроки(Отбор)[1];
	МассивРаспоряжений.Добавить(Новый Структура("Распоряжение,Склад", СтрокаРаспоряжения.Распоряжение, СтрокаРаспоряжения.Склад));
	РазбитьПунктДоставки(МассивРаспоряжений); // Случай с двумя распоряжениями - просто разбиваем без выбора
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура РазбитьПунктДоставки(Распоряжения)
	
	Если ТипЗнч(Распоряжения) <> Тип("Массив") Тогда		
		МассивРаспоряжений = Новый Массив;
		Для Каждого Строка Из ПолучитьИзВременногоХранилища(Распоряжения.АдресРаспоряжений) Цикл
			МассивРаспоряжений.Добавить(Новый Структура("Распоряжение,Склад", Строка.Распоряжение, Строка.Склад));	
		КонецЦикла;	
	Иначе
		МассивРаспоряжений = Распоряжения;
	КонецЕсли;
	
	ИдентификаторСтрокиМаршрута = Элементы.Маршрут.ТекущаяСтрока;
	
	СтрокаМаршрута = Объект.Маршрут.НайтиПоИдентификатору(ИдентификаторСтрокиМаршрута); 
	НоваяСтрока = Объект.Маршрут.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМаршрута);
	КлючСвязи = Строка(Новый УникальныйИдентификатор);
	НоваяСтрока.КлючСвязи = КлючСвязи;
	
	Для Каждого СтруктураПоиск Из МассивРаспоряжений Цикл
		СтрокаРаспоряжений = Объект.Распоряжения.НайтиСтроки(СтруктураПоиск)[0];
		СтрокаРаспоряжений.КлючСвязи = КлючСвязи;
	КонецЦикла;
		
	Элементы.Маршрут.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ОбновитьВесИОбъемСтрокиМаршрута(СтрокаМаршрута);
	ОбновитьВесИОбъемСтрокиМаршрута(НоваяСтрока);
	ОбновляемыеСтроки = Новый Массив;
	ОбновляемыеСтроки.Добавить(СтрокаМаршрута);
	ОбновляемыеСтроки.Добавить(НоваяСтрока);
	ЗаполнитьСлужебныеРеквизитыМаршрута(ОбновляемыеСтроки);
	ОбновитьИтоговыйВесОбъемЗаполненность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПередОбъединением(ВыделенныеСтроки)
	
	СоответствиеАдресов = Новый Соответствие;
	СоответствиеЗонДоставки = Новый Соответствие;
	СоответствиеВремяС = Новый Соответствие;
	СоответствиеВремяПо = Новый Соответствие;
	СоответствиеДополнительнаяИнформация = Новый Соответствие;
	СоответствиеДоставлено = Новый Соответствие;	
	
	МассивКодовСтрок = Новый Массив;
	СтруктураВозврата = Новый Структура;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаРаспоряжений = Объект.Маршрут.НайтиПоИдентификатору(Идентификатор);
		
		СоответствиеАдресов.Вставить(СтрокаРаспоряжений.Адрес,"");
		СоответствиеЗонДоставки.Вставить(СтрокаРаспоряжений.Зона,"");
		СоответствиеВремяС.Вставить(СтрокаРаспоряжений.ВремяС,"");
		СоответствиеВремяПо.Вставить(СтрокаРаспоряжений.ВремяПо,"");
		СоответствиеДополнительнаяИнформация.Вставить(СтрокаРаспоряжений.ДополнительнаяИнформация,"");
		СоответствиеДоставлено.Вставить(СтрокаРаспоряжений.Доставлено,"");
		
		МассивКодовСтрок.Добавить(СтрокаРаспоряжений.КлючСвязи);
	КонецЦикла;
		
	Если СоответствиеАдресов.Количество()>1 Тогда
		СтруктураВозврата.Вставить("РазныеАдреса",Истина);
		Возврат СтруктураВозврата;
	ИначеЕсли СоответствиеЗонДоставки.Количество()>1
			ИЛИ СоответствиеВремяС.Количество() > 1
			ИЛИ СоответствиеВремяПо.Количество() > 1
			ИЛИ СоответствиеДополнительнаяИнформация.Количество()>1
			ИЛИ СоответствиеДоставлено.Количество() > 1
			ИЛИ СоответствиеЗонДоставки.Количество() > 1 Тогда
		СтруктураВозврата.Вставить("РазныеАдреса",Ложь);
		СтруктураВозврата.Вставить("РазныеДанные",Истина);
	Иначе
		СтруктураВозврата.Вставить("РазныеАдреса",Ложь);
		СтруктураВозврата.Вставить("РазныеДанные",Ложь);
	КонецЕсли;
	
	СтруктураВозврата.Вставить("МассивКодовСтрок",МассивКодовСтрок);
	
	Возврат СтруктураВозврата;	
		
КонецФункции

&НаСервере
Функция ОбъединитьСтрокиМаршрута(ВыделенныеСтроки,МассивКодовСтрок)
		
	СтрокаМаршрута = Объект.Маршрут.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	НовыйКлючСвязи = СтрокаМаршрута.КлючСвязи;
	СтрокаМаршрута.Вес = 0;
	СтрокаМаршрута.Объем = 0;
	
	Для Каждого СтрокаРаспоряжений Из Объект.Распоряжения Цикл
		
		Если МассивКодовСтрок.Найти(СтрокаРаспоряжений.КлючСвязи)<>Неопределено Тогда
			СтрокаРаспоряжений.КлючСвязи = НовыйКлючСвязи;
			СтрокаМаршрута.Вес = СтрокаМаршрута.Вес + СтрокаРаспоряжений.Вес;
			СтрокаМаршрута.Объем = СтрокаМаршрута.Объем + СтрокаРаспоряжений.Объем;
		КонецЕсли;	
		
	КонецЦикла;	
	
	СтрокаПропущена = Ложь;
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		Если Не СтрокаПропущена Тогда
			СтрокаПропущена = Истина;
			Продолжить;
		КонецЕсли;
		
		Объект.Маршрут.Удалить(Объект.Маршрут.НайтиПоИдентификатору(Идентификатор));	
		
	КонецЦикла;
	
	ОбновляемыеСтроки = Новый Массив;
	ОбновляемыеСтроки.Добавить(СтрокаМаршрута);
	ЗаполнитьСлужебныеРеквизитыМаршрута(ОбновляемыеСтроки);
	
КонецФункции

&НаКлиенте
Процедура ОтсортироватьСписокМаршрута()
	
	Объект.Маршрут.Сортировать("ВремяС, ВремяПо, Адрес");
		
КонецПроцедуры	

&НаКлиенте
Процедура ПриИзмененииВремяС()
	
	ТекущаяСтрокаМаршрута = Элементы.Маршрут.ТекущиеДанные;
	ТекущаяСтрокаМаршрута.ВремяС = НачалоДня(ТекущаяСтрокаМаршрута.ВремяС)
		+ Час(ТекущаяСтрокаМаршрута.ВремяСБезДаты)*60*60 + Минута(ТекущаяСтрокаМаршрута.ВремяСБезДаты)*60;
		
	Если ТекущаяСтрокаМаршрута.ВремяПо < ТекущаяСтрокаМаршрута.ВремяС Тогда
		ТекущаяСтрокаМаршрута.ВремяПо = ТекущаяСтрокаМаршрута.ВремяС;
		ТекущаяСтрокаМаршрута.ВремяПоБезДаты = ТекущаяСтрокаМаршрута.ВремяСБезДаты;
	КонецЕсли;
	
	Если ТекущаяСтрокаМаршрута.ВремяС < Объект.ДатаВремяРейсаПланС Тогда
		Объект.ДатаВремяРейсаПланС = ТекущаяСтрокаМаршрута.ВремяС;
		ПоказатьОповещениеПользователя(НСтр("ru='Плановая дата начала рейса изменена'"),,
			НСтр("ru='Выбранная дата раньше плановой даты начала рейса.'"));
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриИзмененииВремяПо()
	
	ТекущаяСтрокаМаршрута = Элементы.Маршрут.ТекущиеДанные;
	ТекущаяСтрокаМаршрута.ВремяПо = НачалоДня(ТекущаяСтрокаМаршрута.ВремяПо)
		+ Час(ТекущаяСтрокаМаршрута.ВремяПоБезДаты)*60*60 + Минута(ТекущаяСтрокаМаршрута.ВремяПоБезДаты)*60;
	
	Если ТекущаяСтрокаМаршрута.ВремяПо < ТекущаяСтрокаМаршрута.ВремяС Тогда
		ТекущаяСтрокаМаршрута.ВремяС = ТекущаяСтрокаМаршрута.ВремяПо;
		ТекущаяСтрокаМаршрута.ВремяСБезДаты = ТекущаяСтрокаМаршрута.ВремяПоБезДаты;
	КонецЕсли;
	
	Если Объект.ДатаВремяРейсаПланС <> '00010101' И Объект.ДатаВремяРейсаПланПо < ТекущаяСтрокаМаршрута.ВремяПо Тогда
		Объект.ДатаВремяРейсаПланПо = ТекущаяСтрокаМаршрута.ВремяПо;
		ПоказатьОповещениеПользователя(НСтр("ru='Плановая дата окончания рейса изменена'"),,
			НСтр("ru='Выбранная дата позже плановой даты окончания рейса.'"));
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЦветЗеленый = ЦветаСтиля.РезультатУспехЦвет;
	ЦветКрасный = ЦветаСтиля.РезультатПроблемаЦвет;
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	КоэффициентПересчетаВТонны     			 = ДоставкаТоваров.КоэффициентПересчетаВТонны();
	КоэффициентПересчетаВКубическиеМетры     = ДоставкаТоваров.КоэффициентПересчетаВКубическиеМетры();
		
	РеквизитыТС = ДоставкаТоваров.РеквизитыТС(Объект.ТранспортноеСредство);
	ЗаполнитьЗначенияСвойств(ЭтаФорма,РеквизитыТС);
	ОбновитьИтоговыйВесОбъемЗаполненность(ЭтаФорма);
	ОтобразитьЕдПользователяНаСервере(ЭтаФорма);
	
	ТекстЗаголовка = НСтр("ru='Объем, %ЕдиницаИзмеренияОбъема%'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ЕдиницаИзмеренияОбъема%", Строка(ЕдиницаИзмеренияОбъема));
	Элементы.МаршрутОбъем.Заголовок = ТекстЗаголовка;
	
	ТекстЗаголовка = НСтр("ru='Вес, %ЕдиницаИзмеренияВеса%'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ЕдиницаИзмеренияВеса%", Строка(ЕдиницаИзмеренияВеса));
	Элементы.МаршрутВес.Заголовок = ТекстЗаголовка;
	
	// << 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	КР_ПриЧтенииСозданииНаСервереДополнительно();
	// >> 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	
	Склад      = Объект.Склад;
	Перевозчик = Объект.Перевозчик;
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыМаршрута();
	
	СтатусБыл = Объект.Статус;
	
	ОбновитьСкладыПогрузки();
	
	Если Объект.Операция = Перечисления.ВидыДоставки.НаСклад Тогда
		Элементы.МаршрутПолучателиОтправители.Заголовок      = НСтр("ru = 'Отправители'");
		Элементы.Статус.СписокВыбора.Очистить();
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Формируется);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Отправлено);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Закрыто);
	Иначе
		Элементы.МаршрутПолучателиОтправители.Заголовок      = НСтр("ru = 'Получатели'");
		Элементы.Статус.СписокВыбора.Очистить();
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Формируется);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.КПогрузке);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Отправлено);
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Закрыто);
	КонецЕсли;
	
	НастроитьПоТипуИсполнителя();
	
	ПриЧтенииСозданииНаСервереЛокализация();
	
КонецПроцедуры

&НаСервере
Процедура ТранспортноеСредствоПриИзмененииНаСервере()
	
	ПараметрыТТН = Новый Структура;
	ПараметрыТТН.Вставить("АвтомобильГосударственныйНомер");
	ПараметрыТТН.Вставить("АвтомобильМарка");	
	ПараметрыТТН.Вставить("ВидПеревозки");
	ПараметрыТТН.Вставить("АвтомобильТип");
	ПараметрыТТН.Вставить("АвтомобильВместимостьВКубическихМетрах");
	ПараметрыТТН.Вставить("АвтомобильГрузоподъемностьВТоннах");
	ПараметрыТТН.Вставить("ЛицензионнаяКарточкаСерия");
	ПараметрыТТН.Вставить("ЛицензионнаяКарточкаНомер");
	ПараметрыТТН.Вставить("ЛицензионнаяКарточкаВид");
	ПараметрыТТН.Вставить("ЛицензионнаяКарточкаРегистрационныйНомер");
	ПараметрыТТН.Вставить("Прицеп");
	ПараметрыТТН.Вставить("ГосударственныйНомерПрицепа");
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранспортныеСредства.Код КАК АвтомобильГосударственныйНомер,
		|	ТранспортныеСредства.Марка КАК АвтомобильМарка,
		|	ТранспортныеСредства.ВидПеревозки КАК ВидПеревозки,
		|	ТранспортныеСредства.Тип КАК АвтомобильТип,
		|	ТранспортныеСредства.ВместимостьВКубическихМетрах КАК АвтомобильВместимостьВКубическихМетрах,
		|	ТранспортныеСредства.ГрузоподъемностьВТоннах КАК АвтомобильГрузоподъемностьВТоннах,
		|	ТранспортныеСредства.ЛицензионнаяКарточкаВид,
		|	ТранспортныеСредства.ЛицензионнаяКарточкаНомер,
		|	ТранспортныеСредства.ЛицензионнаяКарточкаРегистрационныйНомер,
		|	ТранспортныеСредства.ЛицензионнаяКарточкаСерия,
		|	ТранспортныеСредства.Прицеп,
		|	ТранспортныеСредства.ГосударственныйНомерПрицепа КАК ГосударственныйНомерПрицепа
		|ИЗ
		|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
		|ГДЕ
		|	ТранспортныеСредства.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ТипыТранспортныхСредств.Наименование,
		|	ТипыТранспортныхСредств.ВместимостьВКубическихМетрах,
		|	ТипыТранспортныхСредств.ГрузоподъемностьВТоннах,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Справочник.ТипыТранспортныхСредств КАК ТипыТранспортныхСредств
		|ГДЕ
		|	ТипыТранспортныхСредств.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.ТранспортноеСредство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыТТН, Выборка);
		КонецЕсли;			
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыТТН);
	
	ГрузоподъемностьВЕдПользователя = Объект.АвтомобильГрузоподъемностьВТоннах / КоэффициентПересчетаВТонны;
	ВместимостьВЕдПользователя = Объект.АвтомобильВместимостьВКубическихМетрах / КоэффициентПересчетаВКубическиеМетры;
	
	ОбновитьИтоговыйВесОбъемЗаполненность(ЭтаФорма);
	ОтобразитьЕдПользователяНаСервере(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоговыйВесОбъемЗаполненность(Форма)
	
	Вес = Форма.Объект.Маршрут.Итог("Вес");
	Объем = Форма.Объект.Маршрут.Итог("Объем");
	Форма.Объект.Вес   = Вес * Форма.КоэффициентПересчетаВТонны;
	Форма.Объект.Объем = Объем * Форма.КоэффициентПересчетаВКубическиеМетры;
	
	ДанныеВесОбъем = Новый Структура;
	ДанныеВесОбъем.Вставить("ГрузоподъемностьВЕдПользователя", Форма.ГрузоподъемностьВЕдПользователя);
	ДанныеВесОбъем.Вставить("ВместимостьВЕдПользователя", Форма.ВместимостьВЕдПользователя);
	ДанныеВесОбъем.Вставить("Вес", Вес);
	ДанныеВесОбъем.Вставить("Объем", Объем);
	
	ДоставкаТоваровКлиентСервер.ОтобразитьНедогрузПерегруз(Форма, ДанныеВесОбъем)
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьВесИОбъемСтрокиМаршрута(СтрокаМаршрута)
	
	СтрокиРаспоряжения = Объект.Распоряжения.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаМаршрута.КлючСвязи));
	
	СтрокаМаршрута.Вес = 0;
	СтрокаМаршрута.Объем = 0;
		
	Для Каждого СтрокаРаспоряжений Из СтрокиРаспоряжения Цикл
		
		СтрокаМаршрута.Вес = СтрокаРаспоряжений.Вес + СтрокаМаршрута.Вес;
		СтрокаМаршрута.Объем = СтрокаРаспоряжений.Объем + СтрокаМаршрута.Объем;
		
	КонецЦикла;	 
		 	
КонецПроцедуры

&НаСервере
Функция ПоместитьРаспоряженияВХранилище(КлючСвязи)
	
	СтруктураПоиск = Новый Структура("КлючСвязи",КлючСвязи);
	Распоряжения = Объект.Распоряжения.Выгрузить(СтруктураПоиск);
	
	Возврат ПоместитьВоВременноеХранилище(Распоряжения, УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ПриИзмененииСкладаСервер()
	
	Объект.Распоряжения.Очистить();
	Объект.Маршрут.Очистить();
	ТоварыКДоставке.Очистить();
	Объект.Вес = 0;
	Объект.Объем = 0;
	
	ОбновитьСкладыПогрузки();
	
	// << 27.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	КР_ПриИзмененииСкладаСерверДополнительно();
	// >> 27.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСкладыПогрузки()
	
	Склады = Объект.Распоряжения.Выгрузить(,"Склад");
	Склады.Свернуть("Склад");
	СкладыПогрузки.ЗагрузитьЗначения(Склады.ВыгрузитьКолонку("Склад"));
	
	СкладГруппа = Склад.ЭтоГруппа;
	ЕстьОрдерныеСклады = СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад(Склад, Объект.ДатаВремяРейсаПланС);
		
	Элементы.КартинкаНесколькоСкладов.Видимость = СкладГруппа;
	Элементы.ОткрытьСклады.Видимость            = СкладГруппа;
	Элементы.РаспоряженияЗаполнитьПоРасходнымОрдерам.Видимость    = ЕстьОрдерныеСклады
		И Объект.Операция = Перечисления.ВидыДоставки.СоСклада;
	Элементы.РаспоряженияЗаполнитьПоРасходнымОрдерам.Доступность  = ЗначениеЗаполнено(Объект.Ссылка);
	Если Объект.Операция = Перечисления.ВидыДоставки.НаСклад Тогда
		ТекстЗаголовка = НСтр("ru = 'Склады назначения (%СкладыКоличество%)'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Склады погрузки (%СкладыКоличество%)'");
	КонецЕсли;
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%СкладыКоличество%", Склады.Количество());
	Элементы.ОткрытьСклады.Заголовок = ТекстЗаголовка;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОПерезаполненииПоОрдерам(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстОповещения = ПриИзмененииСтатусаИПерезаполнении(Результат = КодВозвратаДиалога.Да);
	
	ОповеститьОбИзменениях(ТекстОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзменениях(ТекстОповещения)
	
	Если Не ПустаяСтрока(ТекстОповещения) Тогда
		ПоказатьОповещениеПользователя(,,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПриИзмененииСтатусаИПерезаполнении(ПерезаполнитьПоРасходнымОрдерам = Ложь)
	
	// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
	КР_УстановитьВидимостьКомандыПеренестиМаршруты();
	// >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

	ТекстСообщенияОПерезаполненииПоОрдерам = "";
	Если ПерезаполнитьПоРасходнымОрдерам Тогда
		Если ЗаполнитьПоРасходнымОрдерамНаСервере() Тогда
			Если Объект.Распоряжения.Количество() > 0 Тогда
				ТекстСообщенияОПерезаполненииПоОрдерам = НСтр("ru = 'Задание на перевозку перезаполнено по расходным ордерам на товары.'");
			Иначе
				ТекстСообщенияОПерезаполненииПоОрдерам = НСтр("ru = 'После перезаполнения по расходным ордерам на товары в задании на перевозку не осталось распоряжений на доставку.'");
			КонецЕсли;
		Иначе
			ТекстСообщенияОПерезаполненииПоОрдерам = НСтр("ru = 'Задание на перевозку не перезаполнено, т.к. соответствует расходным ордерам на товары.'");
		КонецЕсли;
	КонецЕсли;
	
	Если СтатусБыл = Объект.Статус Тогда
		Возврат ТекстСообщенияОПерезаполненииПоОрдерам;
	КонецЕсли;
	
	СтатусБыл = Объект.Статус;
	
	ТекстСообщенияОВремени = Документы.ЗаданиеНаПеревозку.ЗаполнитьВремяРейсаПланФакт(Объект);
	
	Возврат ТекстСообщенияОВремени;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыМаршрута(ОбновляемыеСтроки = Неопределено)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Распоряжения.Распоряжение КАК Распоряжение,
	|	Распоряжения.Склад КАК Склад,
	|	Распоряжения.Перевозчик КАК Перевозчик,
	|	Распоряжения.ПолучательОтправитель КАК ПолучательОтправитель,
	|	Распоряжения.КлючСвязи КАК КлючСвязи,
	|	Распоряжения.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	&Распоряжения КАК Распоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Маршрут.Адрес КАК Адрес,
	|	Маршрут.АдресЗначенияПолей КАК АдресЗначенияПолей,
	|	Маршрут.НомерСтроки КАК НомерСтроки,
	|	Маршрут.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ Маршрут
	|ИЗ
	|	&Маршрут КАК Маршрут
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	Распоряжения.Распоряжение КАК Распоряжение,
	|	Распоряжения.Склад КАК Склад,
	|	Распоряжения.Перевозчик КАК ПеревозчикПартнер,
	|	Распоряжения.ПолучательОтправитель КАК ПолучательОтправитель,
	|	Распоряжения.НомерСтроки КАК НомерСтрокиРаспоряжений,
	|	Маршрут.Адрес КАК АдресДоставки,
	|	Маршрут.АдресЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	Маршрут.НомерСтроки КАК НомерСтрокиМаршрута
	|ПОМЕСТИТЬ РаспоряженияМаршрут
	|ИЗ
	|	Маршрут КАК Маршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Распоряжения КАК Распоряжения
	|		ПО Маршрут.КлючСвязи = Распоряжения.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспоряженияМаршрут.НомерСтрокиРаспоряжений КАК НомерСтрокиРаспоряжений,
	|	МАКСИМУМ(РаспоряженияМаршрут.НомерСтрокиМаршрута) КАК НомерСтрокиМаршрута,
	|	МАКСИМУМ(РаспоряженияМаршрут.ПеревозчикПартнер) КАК Перевозчик,
	|	МАКСИМУМ(РаспоряженияМаршрут.ПолучательОтправитель) КАК ПолучательОтправитель
	|ИЗ
	|	РаспоряженияМаршрут КАК РаспоряженияМаршрут
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспоряженияМаршрут.НомерСтрокиРаспоряжений
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиМаршрута,
	|	НомерСтрокиРаспоряжений,
	|	МАКСИМУМ(РаспоряженияМаршрут.ПеревозчикПартнер),
	|	МАКСИМУМ(РаспоряженияМаршрут.ПолучательОтправитель)";
	
	Запрос.УстановитьПараметр("Распоряжения", Объект.Распоряжения.Выгрузить());
	Если ОбновляемыеСтроки = Неопределено Тогда
		Запрос.УстановитьПараметр("Маршрут", Объект.Маршрут.Выгрузить());
	Иначе
		Запрос.УстановитьПараметр("Маршрут", Объект.Маршрут.Выгрузить(ОбновляемыеСтроки));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку",	Объект.Ссылка);
		
	Результат = Запрос.Выполнить().Выбрать();
	ШаблонСПеревозчиком = НСтр("ru = '%Перевозчик% (для %ПолучателиОтправители%)'");
	Пока Результат.СледующийПоЗначениюПоля("НомерСтрокиМаршрута") Цикл
		
		СтрокаМаршрута = Объект.Маршрут[Результат.НомерСтрокиМаршрута - 1];
		ПолучателиОтправителиПоПункту = "";
		КоличествоРаспоряжений = 0;
		
		Пока Результат.СледующийПоЗначениюПоля("Перевозчик") Цикл
			
			ПолучателиОтправителиПоПеревозчику = "";
			Пока Результат.СледующийПоЗначениюПоля("ПолучательОтправитель") Цикл
				
				Пока Результат.Следующий() Цикл
					КоличествоРаспоряжений = КоличествоРаспоряжений + 1;
				КонецЦикла;
				
				ПолучателиОтправителиПоПеревозчику = ПолучателиОтправителиПоПеревозчику + Результат.ПолучательОтправитель + "," + " ";
			КонецЦикла;
			ПолучателиОтправителиПоПеревозчику = Лев(ПолучателиОтправителиПоПеревозчику, СтрДлина(ПолучателиОтправителиПоПеревозчику)-2);
			Если ЗначениеЗаполнено(Результат.Перевозчик) Тогда
				ПолучателиОтправителиПоПеревозчику = СтрЗаменить(ШаблонСПеревозчиком, "%ПолучателиОтправители%", ПолучателиОтправителиПоПеревозчику);
				ПолучателиОтправителиПоПеревозчику = СтрЗаменить(ПолучателиОтправителиПоПеревозчику, "%Перевозчик%", Результат.Перевозчик);
			КонецЕсли;
			ПолучателиОтправителиПоПункту = ПолучателиОтправителиПоПункту + ПолучателиОтправителиПоПеревозчику + "," + " ";
		КонецЦикла;
		
		СтрокаМаршрута.ПолучателиОтправители = ПолучателиОтправителиПоПункту
			+ СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоРаспоряжений, НСтр("ru = 'распоряжение, распоряжения, распоряжений'"))
			+ НСтр("ru = '...'");
		
		СтрокаМаршрута.ВремяСБезДаты   = ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаМаршрута.ВремяС);
		СтрокаМаршрута.ВремяПоБезДаты  = ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаМаршрута.ВремяПо);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыМаршрутаЛокализация(МенеджерВременныхТаблиц);
	// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
	// Дополнительно инициализируем данные "ВремяСБезДаты" и "ВремяПоБезДаты",
	// даже если они не попали в типовую выборку  выше
	КР_ЗаполнитьРеквизитыМаршрутВремяСПо();
	// >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеТоварыКДоставке()
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыКДоставке.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ИзменитьВесОбъемМаршрута(КлючСвязи, ИзменениеВес, ИзменениеОбъем)
	
	СтрокаМаршрута = СтрокаМаршрутаПоКлючуСвязи(КлючСвязи);
	СтрокаМаршрута.Вес = СтрокаМаршрута.Вес + ИзменениеВес;
	СтрокаМаршрута.Объем = СтрокаМаршрута.Объем + ИзменениеОбъем;
	
КонецПроцедуры

&НаСервере
Функция СтрокаМаршрутаПоКлючуСвязи(КлючСвязи)
	Возврат Объект.Маршрут.НайтиСтроки(Новый Структура("КлючСвязи",КлючСвязи))[0];
КонецФункции

&НаСервере
Функция ЗаполнитьПоРасходнымОрдерамНаСервере()
	
	ЕстьИзменения = ДоставкаТоваров.ПерезаполнитьЗаданиеНаПеревозкуПоРасходнымОрдерам(Объект, ТоварыКДоставке);
	ОбновитьИтоговыйВесОбъемЗаполненность(ЭтаФорма);
	ОбновитьСкладыПогрузки();
	ЗаполнитьСлужебныеРеквизитыМаршрута();
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Процедура НастроитьПоТипуИсполнителя()
	
	ВыполняетПеревозчик = Объект.ЗаданиеВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик;
	
	Элементы.Перевозчик.Видимость             = ВыполняетПеревозчик;
	Элементы.Водитель.Видимость               = Не ВыполняетПеревозчик;
	Элементы.КурьерЭкспедитор.Видимость       = Не ВыполняетПеревозчик;
	Элементы.ИнформацияОТСИВодителе.Видимость = ВыполняетПеревозчик
												И Объект.Операция = Перечисления.ВидыДоставки.СоСклада;
	
	Если ВыполняетПеревозчик
		И ЗначениеЗаполнено(Объект.Перевозчик) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ЗаполнитьКонтрагентаИБанковскийСчетПеревозчика();
		КонецЕсли;
		
	
	Иначе
		Объект.Перевозчик = Справочники.Партнеры.ПустаяСсылка();
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.БанковскийСчетПеревозчика = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		
		Перевозчик = Объект.Перевозчик;
	КонецЕсли;
	
	ЗаполнитьСпискиВыбораВодителейИТС();
	
	// << 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	КР_НастроитьПоТипуИсполнителяДополнительно();
	// >> 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	
КонецПроцедуры

&НаСервере
Процедура ПеревозчикПриИзмененииНаСервере()
	
	Если Перевозчик <> Объект.Перевозчик Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.БанковскийСчетПеревозчика = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		
		ЗаполнитьСпискиВыбораВодителейИТС();		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Перевозчик) Тогда
		ЗаполнитьКонтрагентаИБанковскийСчетПеревозчика();
	Иначе
		Объект.Перевозчик = Справочники.Партнеры.ПустаяСсылка();
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.БанковскийСчетПеревозчика = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Перевозчик = Объект.Перевозчик;
	
КонецПроцедуры

&НаСервере
Процедура ВодительПриИзмененииНаСервере()
	
	ПараметрыТТН = Новый Структура;
	ПараметрыТТН.Вставить("ВодительФИО");
	ПараметрыТТН.Вставить("УдостоверениеСерия");
	ПараметрыТТН.Вставить("УдостоверениеНомер");
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Наименование КАК ВодительФИО,
		|	ДокументыФизическихЛиц.Серия КАК УдостоверениеСерия,
		|	ДокументыФизическихЛиц.Номер КАК УдостоверениеНомер
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛиц
		|		ПО ФизическиеЛица.Ссылка = ДокументыФизическихЛиц.Физлицо
		|			И (ДокументыФизическихЛиц.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение))
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Водитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыТТН, Выборка);
		КонецЕсли;			
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыТТН);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	Объект.БанковскийСчетПеревозчика = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДополнительнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("МаршрутДополнительнаяИнформацияНачалоВыбораЗавершение", ЭтотОбъект);
	ЗаголовокФормыРедактирования = НСтр("ru='Дополнительная информация'");
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Элементы.МаршрутДополнительнаяИнформация.ТекстРедактирования,
		ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДополнительнаяИнформацияНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
		ТекущиеДанные.ДополнительнаяИнформация = РезультатЗакрытия;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРаспоряжение(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьБлокировкуЗадания() Тогда
		
		Если Не ЗначениеЗаполнено(Склад) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Перед подбором распоряжений необходимо указать склад.'"));
			Возврат;
		КонецЕсли;
		
		ОткрытьФормуПодбораРаспоряжений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияРаспоряжений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	ПослеРедактированияРаспоряженийСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПослеРедактированияРаспоряженийСервер(Результат)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.ПолучательОтправитель,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ТоварыКДоставке.Количество,
	|	ТоварыКДоставке.ВсеТовары
	|ПОМЕСТИТЬ ТоварыКДоставке
	|ИЗ
	|	&ТоварыКДоставке КАК ТоварыКДоставке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.ПолучательОтправитель,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ТоварыКДоставке.Количество,
	|	ТоварыКДоставке.ВсеТовары
	|ПОМЕСТИТЬ ТоварыКДоставкеОтредактированные
	|ИЗ
	|	&ТоварыКДоставкеОтредактированные КАК ТоварыКДоставке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжения.КлючСвязи,
	|	Распоряжения.Распоряжение,
	|	Распоряжения.Вес,
	|	Распоряжения.Объем,
	|	Распоряжения.Перевозчик,
	|	Распоряжения.ПолучательОтправитель,
	|	Распоряжения.ВремяС,
	|	Распоряжения.ВремяПо,
	|	Распоряжения.ДополнительнаяИнформация,
	|	Распоряжения.Доставлено,
	|	Распоряжения.Склад,
	|	Распоряжения.ДоставляетсяПолностью
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	&Распоряжения КАК Распоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжения.КлючСвязи,
	|	Распоряжения.Распоряжение,
	|	Распоряжения.Вес,
	|	Распоряжения.Объем,
	|	Распоряжения.Перевозчик,
	|	Распоряжения.ПолучательОтправитель,
	|	Распоряжения.ВремяС,
	|	Распоряжения.ВремяПо,
	|	Распоряжения.ДополнительнаяИнформация,
	|	Распоряжения.Доставлено,
	|	Распоряжения.Склад,
	|	Распоряжения.ДоставляетсяПолностью
	|ПОМЕСТИТЬ РаспоряженияОтредактированные
	|ИЗ
	|	&РаспоряженияОтредактированные КАК Распоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспоряженияОтредактированные.КлючСвязи,
	|	РаспоряженияОтредактированные.Распоряжение,
	|	РаспоряженияОтредактированные.Перевозчик,
	|	РаспоряженияОтредактированные.ПолучательОтправитель,
	|	РаспоряженияОтредактированные.ВремяС,
	|	РаспоряженияОтредактированные.ВремяПо,
	|	РаспоряженияОтредактированные.ДополнительнаяИнформация,
	|	РаспоряженияОтредактированные.Склад,
	|	РаспоряженияОтредактированные.Вес КАК Вес,
	|	РаспоряженияОтредактированные.Объем КАК Объем,
	|	РаспоряженияОтредактированные.Доставлено КАК Доставлено,
	|	РаспоряженияОтредактированные.ДоставляетсяПолностью КАК ДоставляетсяПолностью
	|ПОМЕСТИТЬ РаспоряженияРезультат
	|ИЗ
	|	РаспоряженияОтредактированные КАК РаспоряженияОтредактированные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Распоряжения.КлючСвязи,
	|	Распоряжения.Распоряжение,
	|	Распоряжения.Перевозчик,
	|	Распоряжения.ПолучательОтправитель,
	|	Распоряжения.ВремяС,
	|	Распоряжения.ВремяПо,
	|	Распоряжения.ДополнительнаяИнформация,
	|	Распоряжения.Склад,
	|	Распоряжения.Вес,
	|	Распоряжения.Объем,
	|	Распоряжения.Доставлено,
	|	Распоряжения.ДоставляетсяПолностью
	|ИЗ
	|	Распоряжения КАК Распоряжения
	|ГДЕ
	|	Распоряжения.КлючСвязи <> &КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдаленныеРаспоряжения.Распоряжение
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Распоряжения.Распоряжение КАК Распоряжение,
	|		1 КАК ПолеСворачивания
	|	ИЗ
	|		Распоряжения КАК Распоряжения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РаспоряженияРезультат.Распоряжение,
	|		-1
	|	ИЗ
	|		РаспоряженияРезультат КАК РаспоряженияРезультат) КАК УдаленныеРаспоряжения
	|
	|СГРУППИРОВАТЬ ПО
	|	УдаленныеРаспоряжения.Распоряжение
	|
	|ИМЕЮЩИЕ
	|	СУММА(УдаленныеРаспоряжения.ПолеСворачивания) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспоряженияРезультат.КлючСвязи,
	|	РаспоряженияРезультат.Распоряжение,
	|	РаспоряженияРезультат.Перевозчик,
	|	РаспоряженияРезультат.ПолучательОтправитель,
	|	РаспоряженияРезультат.ВремяС,
	|	РаспоряженияРезультат.ВремяПо,
	|	РаспоряженияРезультат.ДополнительнаяИнформация,
	|	РаспоряженияРезультат.Склад,
	|	РаспоряженияРезультат.Вес,
	|	РаспоряженияРезультат.Объем,
	|	РаспоряженияРезультат.Доставлено,
	|	РаспоряженияРезультат.ДоставляетсяПолностью
	|ИЗ
	|	РаспоряженияРезультат КАК РаспоряженияРезультат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РаспоряженияОтредактированные.Вес) КАК Вес,
	|	СУММА(РаспоряженияОтредактированные.Объем) КАК Объем,
	|	МИНИМУМ(РаспоряженияОтредактированные.Доставлено) КАК Доставлено,
	|	КОЛИЧЕСТВО(*) КАК КоличествоРаспоряжений
	|ИЗ
	|	РаспоряженияОтредактированные КАК РаспоряженияОтредактированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.ПолучательОтправитель,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ТоварыКДоставке.Количество,
	|	ТоварыКДоставке.ВсеТовары
	|ИЗ
	|	ТоварыКДоставке КАК ТоварыКДоставке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Распоряжения КАК Распоряжения
	|		ПО (Распоряжения.Распоряжение = ТоварыКДоставке.Распоряжение)
	|			И (Распоряжения.Склад = ТоварыКДоставке.Склад)
	|ГДЕ
	|	Распоряжения.КлючСвязи <> &КлючСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКДоставкеОтредактированные.Распоряжение,
	|	ТоварыКДоставкеОтредактированные.Склад,
	|	ТоварыКДоставкеОтредактированные.ПолучательОтправитель,
	|	ТоварыКДоставкеОтредактированные.Номенклатура,
	|	ТоварыКДоставкеОтредактированные.Характеристика,
	|	ТоварыКДоставкеОтредактированные.Назначение,
	|	ТоварыКДоставкеОтредактированные.Серия,
	|	ТоварыКДоставкеОтредактированные.Количество,
	|	ТоварыКДоставкеОтредактированные.ВсеТовары
	|ИЗ
	|	ТоварыКДоставкеОтредактированные КАК ТоварыКДоставкеОтредактированные";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	СтрокаПункт = Объект.Маршрут.НайтиПоИдентификатору(Элементы.Маршрут.ТекущаяСтрока);
	
	Запрос.УстановитьПараметр("РаспоряженияОтредактированные", ПолучитьИзВременногоХранилища(Результат.АдресРаспоряжений));
	Запрос.УстановитьПараметр("ТоварыКДоставкеОтредактированные", ПолучитьИзВременногоХранилища(Результат.АдресТоваровКДоставке));
	Запрос.УстановитьПараметр("ТоварыКДоставке", ТоварыКДоставке.Выгрузить());
	Запрос.УстановитьПараметр("Распоряжения", Объект.Распоряжения.Выгрузить());
	Запрос.УстановитьПараметр("КлючСвязи", СтрокаПункт.КлючСвязи);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВГраница = РезультатЗапроса.ВГраница();
	
	Выборка = РезультатЗапроса[ВГраница-1].Выбрать();
	Выборка.Следующий();
	Если Выборка.КоличествоРаспоряжений = 0 Тогда
		Объект.Маршрут.Удалить(СтрокаПункт);
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаПункт,Выборка);
	КонецЕсли;
	
	Объект.Распоряжения.Загрузить(РезультатЗапроса[ВГраница-2].Выгрузить());
		
	ТоварыКДоставке.Загрузить(РезультатЗапроса[ВГраница].Выгрузить());
	ДоставкаТоваров.ЗаполнитьПризнакДоставляетсяПолностью(ТоварыКДоставке.Выгрузить(), Объект.Распоряжения);
	
	ЗаполнитьСлужебныеРеквизитыМаршрута();
	ОбновитьИтоговыйВесОбъемЗаполненность(ЭтаФорма);
	ОбновитьСкладыПогрузки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыКДоставке()
	НаборЗаписей = РегистрыСведений.ТоварыКДоставке.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаданиеНаПеревозку.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	ТоварыКДоставке.Загрузить(НаборЗаписей.Выгрузить());
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьКонтрагентаИБанковскийСчетПеревозчика()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Перевозчик, Объект.Контрагент);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.БанковскийСчетПеревозчика = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьБлокировкуЗадания()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Истина;
	Иначе
		Попытка
			ДокОбъект = Объект.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеФормыДляРедактирования();
			Возврат Истина;
		Исключение
			Текст = НСтр("ru = 'Не удалось заблокировать %Задание% для изменений.'");
			Текст = СтрЗаменить(Текст,"%Задание%", Объект.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Объект.Ссылка);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиВыбораВодителейИТС()
	
	Элементы.ВодительФИО.СписокВыбора.Очистить();
	Элементы.АвтомобильГосударственныйНомер.СписокВыбора.Очистить();
	Элементы.АвтомобильТип.СписокВыбора.Очистить();
	
	Если Не (Объект.ЗаданиеВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик
		И Объект.Операция = Перечисления.ВидыДоставки.СоСклада
		И ЗначениеЗаполнено(Объект.Перевозчик)) Тогда
		Возврат;
	КонецЕсли;
	
	#Область ВодительФИО
	
	Запрос =  Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	ЗаданиеНаПеревозку.ВодительФИО КАК Водитель,
	|	ЗаданиеНаПеревозку.УдостоверениеНомер КАК УдостоверениеНомер,
	|	ЗаданиеНаПеревозку.УдостоверениеСерия КАК УдостоверениеСерия,
	|	МАКСИМУМ(ЗаданиеНаПеревозку.Дата) КАК Дата
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ГДЕ
	|	ЗаданиеНаПеревозку.Перевозчик = &Перевозчик
	|	И ЗаданиеНаПеревозку.ВодительФИО <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозку.ВодительФИО,
	|	ЗаданиеНаПеревозку.УдостоверениеСерия,
	|	ЗаданиеНаПеревозку.УдостоверениеНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ЗаданиеНаПеревозку.Дата) УБЫВ";
	
	Запрос.УстановитьПараметр("Перевозчик", Объект.Перевозчик);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока РезультатЗапроса.Следующий() Цикл
		ИнформацияВодителя = Новый Структура("Водитель, УдостоверениеСерия, УдостоверениеНомер");
		ЗаполнитьЗначенияСвойств(ИнформацияВодителя, РезультатЗапроса);
		Элементы.ВодительФИО.СписокВыбора.Добавить(ИнформацияВодителя, РезультатЗапроса.Водитель);
	КонецЦикла;	
	
	#КонецОбласти
	
	#Область АвтомобильГосударственныйНомер
	
	Запрос =  Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	ЗаданиеНаПеревозку.АвтомобильМарка КАК АвтомобильМарка,
	|	ЗаданиеНаПеревозку.АвтомобильГосударственныйНомер КАК АвтомобильГосударственныйНомер,
	|	ЗаданиеНаПеревозку.ЛицензионнаяКарточкаВид КАК ЛицензионнаяКарточкаВид,
	|	ЗаданиеНаПеревозку.ЛицензионнаяКарточкаНомер КАК ЛицензионнаяКарточкаНомер,
	|	ЗаданиеНаПеревозку.ЛицензионнаяКарточкаРегистрационныйНомер КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ЗаданиеНаПеревозку.ЛицензионнаяКарточкаСерия КАК ЛицензионнаяКарточкаСерия,
	|	ЗаданиеНаПеревозку.Прицеп КАК Прицеп,
	|	ЗаданиеНаПеревозку.ГосударственныйНомерПрицепа КАК ГосударственныйНомерПрицепа,
	|	ЗаданиеНаПеревозку.ВидПеревозки КАК ВидПеревозки,
	|	МАКСИМУМ(ЗаданиеНаПеревозку.Дата) КАК Дата,
	|	ЗаданиеНаПеревозку.АвтомобильГрузоподъемностьВТоннах КАК АвтомобильГрузоподъемностьВТоннах,
	|	ЗаданиеНаПеревозку.АвтомобильВместимостьВКубическихМетрах КАК АвтомобильВместимостьВКубическихМетрах,
	|	ЗаданиеНаПеревозку.АвтомобильТип КАК АвтомобильТип
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ГДЕ
	|	ЗаданиеНаПеревозку.Перевозчик = &Перевозчик
	|	И ЗаданиеНаПеревозку.АвтомобильГосударственныйНомер <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозку.АвтомобильМарка,
	|	ЗаданиеНаПеревозку.АвтомобильГосударственныйНомер,
	|	ЗаданиеНаПеревозку.ЛицензионнаяКарточкаВид,
	|	ЗаданиеНаПеревозку.ЛицензионнаяКарточкаНомер,
	|	ЗаданиеНаПеревозку.ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ЗаданиеНаПеревозку.ЛицензионнаяКарточкаСерия,
	|	ЗаданиеНаПеревозку.Прицеп,
	|	ЗаданиеНаПеревозку.ГосударственныйНомерПрицепа,
	|	ЗаданиеНаПеревозку.ВидПеревозки,
	|	ЗаданиеНаПеревозку.АвтомобильГрузоподъемностьВТоннах,
	|	ЗаданиеНаПеревозку.АвтомобильВместимостьВКубическихМетрах,
	|	ЗаданиеНаПеревозку.АвтомобильТип
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ЗаданиеНаПеревозку.Дата) УБЫВ";
	
	Запрос.УстановитьПараметр("Перевозчик", Объект.Перевозчик);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.АвтомобильГосударственныйНомер.СписокВыбора.Очистить();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ИнформацияТранспортногоСредства = Новый Структура("АвтомобильГосударственныйНомер, АвтомобильМарка, АвтомобильТип, АвтомобильГрузоподъемностьВТоннах, АвтомобильВместимостьВКубическихМетрах, ЛицензионнаяКарточкаВид, ЛицензионнаяКарточкаНомер, ЛицензионнаяКарточкаРегистрационныйНомер, ЛицензионнаяКарточкаСерия, Прицеп, ГосударственныйНомерПрицепа, ВидПеревозки");
		ЗаполнитьЗначенияСвойств(ИнформацияТранспортногоСредства, РезультатЗапроса);
		Элементы.АвтомобильГосударственныйНомер.СписокВыбора.Добавить(ИнформацияТранспортногоСредства, РезультатЗапроса.АвтомобильГосударственныйНомер);
	КонецЦикла;
	
	#КонецОбласти
	
	#Область АвтомобильТип
	
	Запрос =  Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	МАКСИМУМ(ЗаданиеНаПеревозку.Дата) КАК Дата,
	|	ЗаданиеНаПеревозку.АвтомобильГрузоподъемностьВТоннах КАК АвтомобильГрузоподъемностьВТоннах,
	|	ЗаданиеНаПеревозку.АвтомобильВместимостьВКубическихМетрах КАК АвтомобильВместимостьВКубическихМетрах,
	|	ЗаданиеНаПеревозку.АвтомобильТип КАК АвтомобильТип
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ГДЕ
	|	ЗаданиеНаПеревозку.Перевозчик = &Перевозчик
	|	И ЗаданиеНаПеревозку.АвтомобильГосударственныйНомер = """"
	|	И ЗаданиеНаПеревозку.АвтомобильТип <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозку.АвтомобильГрузоподъемностьВТоннах,
	|	ЗаданиеНаПеревозку.АвтомобильВместимостьВКубическихМетрах,
	|	ЗаданиеНаПеревозку.АвтомобильТип
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ЗаданиеНаПеревозку.Дата) УБЫВ";
	
	Запрос.УстановитьПараметр("Перевозчик", Объект.Перевозчик);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.АвтомобильТип.СписокВыбора.Очистить();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ИнформацияТранспортногоСредства = Новый Структура("АвтомобильТип, АвтомобильГрузоподъемностьВТоннах, АвтомобильВместимостьВКубическихМетрах");
		ЗаполнитьЗначенияСвойств(ИнформацияТранспортногоСредства, РезультатЗапроса);
		Элементы.АвтомобильТип.СписокВыбора.Добавить(ИнформацияТранспортногоСредства, РезультатЗапроса.АвтомобильТип);
	КонецЦикла;     
	
	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура АвтомобильГрузоподъемностьВместимостьПриИзменении()
	
	ГрузоподъемностьВЕдПользователя = Объект.АвтомобильГрузоподъемностьВТоннах / КоэффициентПересчетаВТонны;
	ВместимостьВЕдПользователя = Объект.АвтомобильВместимостьВКубическихМетрах / КоэффициентПересчетаВКубическиеМетры;
	ОтобразитьЕдПользователяНаСервере(ЭтаФорма);
	ОбновитьИтоговыйВесОбъемЗаполненность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьЕдПользователяНаСервере(Форма)
	
	Форма.Элементы.ДекорацияЕдиницаИзмеренияОбъема.Заголовок = СтрШаблон(НСтр("ru='(%1 %2)'"), 
		Форма.ВместимостьВЕдПользователя,
		Строка(Форма.ЕдиницаИзмеренияОбъема));
		
	Форма.Элементы.ДекорацияЕдиницаИзмеренияВеса.Заголовок = СтрШаблон(НСтр("ru='(%1 %2)'"), 
		Форма.ГрузоподъемностьВЕдПользователя,
		Строка(Форма.ЕдиницаИзмеренияВеса));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Локализация

#Область ТранспортнаяНакладная

&НаКлиенте
Процедура ОформитьТранспортныеНакладные(Команда)
	
	//++ Локализация
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаданиеНаПеревозку.ФормаДокумента.Команда.ОформитьТранспортныеНакладные");
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ НЕ Объект.Проведен
		ИЛИ Модифицированность Тогда 
		
		ТекстВопроса = НСтр("ru = 'Ввод транспортных накладных возможен только после проведения документа.'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК,     НСтр("ru = 'Провести'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОформитьТранспортныеНакладныеОбработкаОтвета", ЭтотОбъект),
			ТекстВопроса, СписокКнопок);
		Возврат;
		
	КонецЕсли;
	
	ОформитьТранспортныеНакладныеЗавершение();
	
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

&НаСервере
Функция СоздатьТранспортныеНакладныеНаСервере(ВыделенныеСтрокиИдентификаторы)
	
	ВыделенныеСтроки = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтрокиИдентификаторы Цикл
		ИсходныйНомерСтроки = Объект.Маршрут.НайтиПоИдентификатору(ИдентификаторСтроки).ИсходныйНомерСтроки;
		ВыделенныеСтроки.Добавить(ИсходныйНомерСтроки);
	КонецЦикла;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	РезультатПроверки = Документы.ТранспортнаяНакладная.ПроверитьДокументыОснования(МассивОбъектов,ВыделенныеСтроки);
	
	Если РезультатПроверки.ЗаданияНаПеревозкуПоКоторымНакладныеУжеСозданы.Количество() <> 0 Тогда
		ТекстСообщения = НСтр("ru='По выделенным адресам не требуется оформлять транспортные накладные, т.к. они уже оформлены.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	СозданныеТранспортныеНакладные = Документы.ТранспортнаяНакладная.СоздатьТранспортныеНакладные(
			РезультатПроверки.ЗаданияНаПеревозкуДляСозданияТранспортныхНакладных,
			ВыделенныеСтроки);
			
	Если СозданныеТранспортныеНакладные.Количество() > 0 Тогда
		ЗаполнитьСлужебныеРеквизитыМаршрута();
	КонецЕсли;
			
	Возврат СозданныеТранспортныеНакладные;
	
КонецФункции

&НаКлиенте
Процедура ОформитьТранспортныеНакладныеЗавершение(РезультатПроверки = Истина)
		
	Если Не РезультатПроверки Тогда 
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтрокиИдентификаторы = Элементы.Маршрут.ВыделенныеСтроки;
	
	Если ВыделенныеСтрокиИдентификаторы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно создать транспортные накладные. Не выделено ни одного адреса доставки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Маршрут");
		Возврат;
	КонецЕсли;
	
	СозданныеТранспортныеНакладные = СоздатьТранспортныеНакладныеНаСервере(ВыделенныеСтрокиИдентификаторы);
	
	Если СозданныеТранспортныеНакладные.Количество() > 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТранспортныеНакладные", СозданныеТранспортныеНакладные);
		ОткрытьФорму(
			"Документ.ТранспортнаяНакладная.Форма.СозданныеТранспортныеНакладные", 
			ПараметрыФормы);
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьТранспортныеНакладныеОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт 
		
	РезультатПроверки = Истина;
	
	Если КодОтвета = КодВозвратаДиалога.ОК И ПроверитьЗаполнение() Тогда
		Попытка
			РезультатПроверки = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Исключение
			ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
			РезультатПроверки = Ложь;
		КонецПопытки;
	Иначе
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	ОформитьТранспортныеНакладныеЗавершение(РезультатПроверки)
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

&НаКлиенте
Процедура МаршрутВыборЛокализация(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ Локализация
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Поле.Имя = "МаршрутТранспортнаяНакладнаяОформлена" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаданиеНаПеревозку", Объект.Ссылка);
		ПараметрыФормы.Вставить("АдресДоставки", ТекущиеДанные.Адрес);
		ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.СозданныеТранспортныеНакладные", ПараметрыФормы);
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыМаршрутаЛокализация(МенеджерВременныхТаблиц)
	
	//++ Локализация
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьТТН") 
		И ПравоДоступа("Чтение", Метаданные.Документы.ТранспортнаяНакладная)) Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = Документы.ЗаданиеНаПеревозку.ТекстЗапросаПолученияСпискаНакладныхИзЗаданийНаПеревозку(Ложь)
	+ ОбщегоНазначенияУТ.РазделительЗапросовВПакете() +
	"ВЫБРАТЬ
	|	РаспоряженияМаршрут.НомерСтрокиМаршрута КАК НомерСтрокиМаршрута,
	|	МАКСИМУМ(НЕ ТранспортнаяНакладнаяДокументыОснованияОснования.Ссылка ЕСТЬ NULL) КАК ТранспортнаяНакладнаяОформлена
	|ИЗ
	|	РаспоряженияМаршрут КАК РаспоряженияМаршрут
	|		ЛЕВОЕ СОЕДИНЕНИЕ НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку
	|		ПО РаспоряженияМаршрут.НомерСтрокиМаршрута = НакладныеПоЗаданиямНаПеревозку.НомерСтрокиМаршрута
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснованияОснования
	|		ПО (ТранспортнаяНакладнаяДокументыОснованияОснования.Ссылка.АдресДоставки = НакладныеПоЗаданиямНаПеревозку.АдресДоставки)
	|			И (ТранспортнаяНакладнаяДокументыОснованияОснования.ДокументОснование = НакладныеПоЗаданиямНаПеревозку.Накладная)
	|			И (ТранспортнаяНакладнаяДокументыОснованияОснования.Ссылка.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку)
	|			И (ТранспортнаяНакладнаяДокументыОснованияОснования.Ссылка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспоряженияМаршрут.НомерСтрокиМаршрута
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиМаршрута";
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку",	Объект.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаМаршрута = Объект.Маршрут[Результат.НомерСтрокиМаршрута - 1];
		СтрокаМаршрута.ТранспортнаяНакладнаяОформлена = Результат.ТранспортнаяНакладнаяОформлена;
		
	КонецЦикла;
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервереЛокализация()
	
	//++ Локализация
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ТранспортнаяНакладная) Тогда
		Элементы.МаршрутТранспортнаяНакладнаяОформлена.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ТранспортнаяНакладная) Тогда 
		Элементы.МаршрутОформитьТранспортныеНакладные.Видимость = Ложь;	
	КонецЕсли;
	
	Если Объект.Операция = Перечисления.ВидыДоставки.НаСклад Тогда
		Элементы.МаршрутТранспортнаяНакладнаяОформлена.Видимость = Ложь;
		Элементы.МаршрутТранспортнаяНакладнаяОформлена.Видимость = Ложь;
		Элементы.МаршрутОформитьТранспортныеНакладные.Видимость  = Ложь;
	Иначе
		Элементы.МаршрутТранспортнаяНакладнаяОформлена.Видимость = Истина;
		Элементы.МаршрутТранспортнаяНакладнаяОформлена.Видимость = Истина;
		Элементы.МаршрутОформитьТранспортныеНакладные.Видимость  = Истина;
	КонецЕсли;
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЛокализация(ИмяСобытия, Параметр, Источник);
	
	//++ Локализация
	
	Если ТранспортнаяНакладнаяКлиент.ЭтоОповещениеЗаписиТранспортнойНакладной(ЭтотОбъект, ИмяСобытия, Параметр, Источник) Тогда
		ЗаполнитьСлужебныеРеквизитыМаршрута();
	КонецЕсли;
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти       

#Область КР_ДобавленныеПроцедурыИФункции 

#Область КР_ОбработчикиСобытийФормы

// << 24.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
&НаСервере
Процедура КР_ПриЧтенииСозданииНаСервереДополнительно()
	
	#Область ДобавлениеРеквизитов
	
	КР_ДобавитьЭлементыНаФорму();
	
	#КонецОбласти

	КР_УстановитьВидимостиДоступности();
	
КонецПроцедуры // >> 24.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376

// << 24.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
&НаСервере
Процедура КР_ДобавитьЭлементыНаФорму()
	
	// << 11.01.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	Элементы.ДатаС.Заголовок = НСтр("ru = 'Дата доставки, план'");
	// >> 11.01.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	
	СтоимостьЗаголовок = НСтр("ru = 'Стоимость'");
	ТарифЗаголовок = НСтр("ru = 'Тариф'");
	
	РеквизитРаспоряжения = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(
		ЭтотОбъект, "КР_Распоряжения", ОбщегоНазначения.ОписаниеТипаСтрока(100), "Объект.Маршрут", НСтр("ru = 'Распоряжения'"));
		
	КР_ДобавитьСтрокуТЧМаршрутКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ДобавитьСтрокуТЧМаршрут", НСтр("ru = 'Добавить'"), "КР_ДобавитьСтрокуТЧМаршрут");
	КР_ДобавитьСтрокуТЧМаршрутЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_ДобавитьСтрокуТЧМаршрутКоманда, Элементы.Маршрут.КоманднаяПанель, Элементы.МаршрутДобавитьРаспоряжение);
		
	КР_ЗаполнитьГруппа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_Заполнить", Элементы.Маршрут.КоманднаяПанель);
	КР_ЗаполнитьГруппа.Вид = ВидГруппыФормы.Подменю;
	КР_ЗаполнитьГруппа.Заголовок = НСтр("ru = 'Заполнить'");

	// << 28.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1300
	КР_ОбновитьФактическиеДанныеКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ОбновитьПоФактическимДаннымОтгрузки", НСтр("ru = 'Обновить по фактическим данным отгрузки'"));
	КР_ОбновитьФактическиеДанныеЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_ОбновитьФактическиеДанныеКоманда, КР_ЗаполнитьГруппа);
	// >> 28.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1300
	
	КР_РассчитатьПоТарифуКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_РассчитатьПоТарифу", НСтр("ru = 'Рассчитать по тарифу'"));
	КР_РассчитатьПоТарифуЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_РассчитатьПоТарифуКоманда, КР_ЗаполнитьГруппа);
	
	КР_ПодтвердитьВсеЗатратыПоСчетуКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ПодтвердитьВсеЗатратыПоСчету", НСтр("ru = 'Подтвердить все затраты по счету'"));
	КР_ПодтвердитьВсеЗатратыПоСчетуЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_ПодтвердитьВсеЗатратыПоСчетуКоманда, КР_ЗаполнитьГруппа);
	
	КР_ПереключитьВидимостьПоказателейРасчетаТарифаКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ПереключитьВидимостьПоказателейРасчетаТарифа", НСтр("ru = 'Показатели расчета тарифа'"));
	КР_ПереключитьВидимостьПоказателейРасчетаТарифаЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_ПереключитьВидимостьПоказателейРасчетаТарифаКоманда, Элементы.Маршрут.КоманднаяПанель);
	КР_ПереключитьВидимостьПоказателейРасчетаТарифаЭлемент.Пометка = Истина;
	
	КР_ПереключитьВидимостьПоказателейНДСКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ПереключитьВидимостьПоказателейНДС", НСтр("ru = 'Показатели НДС'"));
	КР_ПереключитьВидимостьПоказателейНДСЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_ПереключитьВидимостьПоказателейНДСКоманда, Элементы.Маршрут.КоманднаяПанель);
	КР_ПереключитьВидимостьПоказателейНДСЭлемент.Пометка = Истина;
	
	КР_ПереключитьВидимостьДанныхСчетаЭкспедитораКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ПереключитьВидимостьДанныхСчетаЭкспедитора", НСтр("ru = 'Данные счета экспедитора'"));
	КР_ПереключитьВидимостьДанныхСчетаЭкспедитораЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_ПереключитьВидимостьДанныхСчетаЭкспедитораКоманда, Элементы.Маршрут.КоманднаяПанель);
	КР_ПереключитьВидимостьДанныхСчетаЭкспедитораЭлемент.Пометка = Истина;

	КР_ЭкспедиторПартнерЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_ЭкспедиторПартнер", Элементы.ГруппаЛево);
	КР_ЭкспедиторПартнерЭлемент.АвтоМаксимальнаяШирина = Ложь;
	КР_ЭкспедиторПартнерЭлемент.МаксимальнаяШирина = 28;
	КР_ЭкспедиторПартнерЭлемент.УстановитьДействие("ПриИзменении", "КР_ЭкспедиторПартнерПриИзменении");
	
	КР_ЗонаДоставкиЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_ЗонаДоставки", , Элементы.Ответственный);
	КР_ЗонаДоставкиЭлемент.АвтоМаксимальнаяШирина = Ложь;
	КР_ЗонаДоставкиЭлемент.МаксимальнаяШирина = 28;
	КР_ЗонаДоставкиЭлемент.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;

	Элементы.МаршрутГруппаАдресЗонаПолучатели.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	КР_ТипЗаданияЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ТипЗадания", Элементы.Маршрут);
	// << 13.01.2023, Федоров Д.Е., КРОК, Jira№ A2105505-909
	КР_ТипЗаданияЭлемент.УстановитьДействие("ПриИзменении", "КР_ТипЗаданияПриИзменении");
	// >> 13.01.2023, Федоров Д.Е., КРОК, Jira№ A2105505-909
	
	КР_КолонкиДанныеОПеревозчике = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_ДанныеОПеревозчике", Элементы.Маршрут);
	
	КР_ПеревозчикЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_Перевозчик", КР_КолонкиДанныеОПеревозчике);
	
	КР_ТипВладенияТСЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ТипВладенияТС", КР_КолонкиДанныеОПеревозчике);
	КР_ТипВладенияТСЭлемент.УстановитьДействие("ПриИзменении", "КР_МаршрутТипВладенияТСПриИзменении");
	
	КР_КолонкиДанныеОТранспорте = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_ДанныеОТранспорте", Элементы.Маршрут);
	КР_КолонкиДанныеОТранспорте.Группировка = ГруппировкаКолонок.Вертикальная;
	
	КР_ВодительЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_Водитель", КР_КолонкиДанныеОТранспорте);                                     
	КР_ВодительЭлемент.УстановитьДействие("АвтоПодбор", "злВодительАвтоПодбор");		// #4451.. Фомин Д.Ю. 29.07.2024.
		
	КР_ТранспортноеСредствоЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ТранспортноеСредство", КР_КолонкиДанныеОТранспорте);
	КР_ТранспортноеСредствоЭлемент.УстановитьДействие("ПриИзменении", "КР_МаршрутТранспортноеСредствоПриИзменении");
	
	КР_ПрицепЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_Прицеп", КР_КолонкиДанныеОТранспорте);
	
	КР_ОтгруженоЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_Отгружено", Элементы.Маршрут, Элементы.МаршрутГруппаАдресЗонаПолучатели);
	КР_ОтгруженоЭлемент.ШиринаЭлемента = 1;
	
	КР_КолонкиМаршрутаЛевоГруппа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_КолонкиМаршрутаЛево", Элементы.МаршрутГруппаАдресЗонаПолучатели);
	КР_КолонкиМаршрутаЛевоГруппа.Группировка = ГруппировкаКолонок.Вертикальная;
	
	КР_КолонкиМаршрутаПравоГруппа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_КолонкиМаршрутаПраво", Элементы.МаршрутГруппаАдресЗонаПолучатели);
	КР_КолонкиМаршрутаПравоГруппа.Группировка = ГруппировкаКолонок.Вертикальная;
		  
	КР_ПолучательОтправительЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ПолучательОтправитель", КР_КолонкиМаршрутаЛевоГруппа);
	КР_ПолучательОтправительЭлемент.УстановитьДействие("ПриИзменении", "КР_ПолучательОтправительПриИзменении");
	КР_ПолучательОтправительЭлемент.УстановитьДействие("НачалоВыбора", "КР_ПолучательОтправительНачалоВыбора");
	КР_ПолучательОтправительЭлемент.УстановитьДействие("Очистка", "КР_ПолучательОтправительОчистка");
	
	КР_МаршрутЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_Маршрут", КР_КолонкиМаршрутаПравоГруппа);
	КР_МаршрутЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	КР_МаршрутЭлемент.Ширина = 15;
	КР_МаршрутЭлемент.УстановитьДействие("ПриИзменении", "КР_МаршрутПриИзменении");
	КР_МаршрутЭлемент.УстановитьДействие("НачалоВыбора", "КР_МаршрутНачалоВыбора");
	
	Элементы.МаршрутЗонаДоставки.Ширина = 15;
	Элементы.ДатаС.УстановитьДействие("ПриИзменении", "КР_МаршрутДатаСПриИзменении");
	
	Элементы.Переместить(Элементы.МаршрутАдрес, КР_КолонкиМаршрутаЛевоГруппа, КР_ПолучательОтправительЭлемент);
	Элементы.Переместить(Элементы.МаршрутЗонаДоставки, КР_КолонкиМаршрутаПравоГруппа, КР_МаршрутЭлемент);
	Элементы.Переместить(Элементы.МаршрутПолучателиОтправители, КР_КолонкиМаршрутаЛевоГруппа); 
	
	КР_РаспоряженияЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_Распоряжения", КР_КолонкиМаршрутаПравоГруппа);
	КР_РаспоряженияЭлемент.Ширина = 15;
    
	КР_КолонкиДоставленоГруппа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_КолонкиДоставлено", Элементы.Маршрут, Элементы.МаршрутВес);
	КР_КолонкиДоставленоГруппа.Группировка = ГруппировкаКолонок.Вертикальная;

	КР_ДоставленоЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.Доставлено", КР_КолонкиДоставленоГруппа);
	КР_ДоставленоЭлемент.ТолькоПросмотр = Истина;

	КР_ФактическаяДатаДоставкиЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ФактическаяДатаДоставки", КР_КолонкиДоставленоГруппа);
	КР_ФактическаяДатаДоставкиЭлемент.Заголовок = НСтр("ru = 'Дата доставки, факт'");
	КР_ФактическаяДатаДоставкиЭлемент.УстановитьДействие("ПриИзменении", "КР_ФактическаяДатаДоставкиПриИзменении");

	// << 02.10.2023, Петухов А.В., Фактор, #3130
	КР_ВремяПодачиТранспортаЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ВремяПодачиТранспорта", КР_КолонкиДоставленоГруппа);
	КР_ВремяПодачиТранспортаЭлемент.Заголовок = НСтр("ru = 'Время подачи транспорта'");

	КР_ПорядокЗагрузкиЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ПорядокЗагрузки", КР_КолонкиДоставленоГруппа);
	КР_ПорядокЗагрузкиЭлемент.Заголовок = НСтр("ru = 'Порядок загрузки от кабины'");
	// >> 02.10.2023, Петухов А.В., Фактор, #3130
	
	КР_КоличествоПаллетЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_КоличествоПаллет", Элементы.Маршрут, Элементы.МаршрутДополнительнаяИнформация);
	КР_КоличествоПаллетЭлемент.Заголовок = НСтр("ru = 'Паллет, шт.'");
	КР_КоличествоПаллетЭлемент.УстановитьДействие("ПриИзменении", "КР_КоличествоПаллетПриИзменении");
	
	КР_КолонкиТарифГруппа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_КолонкиТариф", Элементы.Маршрут);
	КР_КолонкиТарифГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;   
	КР_КолонкиТарифГруппа.Заголовок = ТарифЗаголовок;
	КР_КолонкиТарифГруппа.ОтображатьВШапке = Истина; 
	КР_КолонкиТарифГруппа.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
      	
	КР_ТарифСтавкаЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ТарифСтавка", КР_КолонкиТарифГруппа);
	КР_ТарифСтавкаЭлемент.Заголовок = НСтр("ru = 'Ставка'");
	КР_ТарифСтавкаЭлемент.Ширина = 7;
	КР_ТарифСтавкаЭлемент.УстановитьДействие("ПриИзменении", "КР_ТарифСтавкаПриИзменении");
		
	КР_ТарифСтоимостьЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ТарифСтоимость", КР_КолонкиТарифГруппа);
	КР_ТарифСтоимостьЭлемент.Заголовок = СтоимостьЗаголовок;
	КР_ТарифСтоимостьЭлемент.Ширина = 7;
	КР_ТарифСтоимостьЭлемент.ТолькоПросмотр = Истина;
		
	КР_КолонкиППРГруппа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_КолонкиППР", Элементы.Маршрут);
	КР_КолонкиППРГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;
	КР_КолонкиППРГруппа.Заголовок = НСтр("ru = 'ППР'");
	КР_КолонкиППРГруппа.ОтображатьВШапке = Истина;
	КР_КолонкиППРГруппа.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	
	КР_ПРРНаличиеЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ПРРНаличие", КР_КолонкиППРГруппа);
	КР_ПРРНаличиеЭлемент.ОтображатьВШапке = Ложь;
	КР_ПРРНаличиеЭлемент.УстановитьДействие("ПриИзменении", "КР_ПРРНаличиеПриИзменении");
	
	КР_ПРРТарифЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ПРРТариф", КР_КолонкиППРГруппа);
	КР_ПРРТарифЭлемент.Заголовок = ТарифЗаголовок;
	КР_ПРРТарифЭлемент.Ширина = 7;
	КР_ПРРТарифЭлемент.УстановитьДействие("ПриИзменении", "КР_ПРРТарифПриИзменении");
	
	КР_ПРРСтоимостьЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ПРРСтоимость", КР_КолонкиППРГруппа);
	КР_ПРРСтоимостьЭлемент.Заголовок = СтоимостьЗаголовок;
	КР_ПРРСтоимостьЭлемент.Ширина = 7;
	КР_ПРРСтоимостьЭлемент.ТолькоПросмотр = Истина;
	
	КР_КолонкиДопСтоимостьГруппа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_КолонкиДопСтоимость", Элементы.Маршрут);
	КР_КолонкиДопСтоимостьГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;   
	КР_КолонкиДопСтоимостьГруппа.Заголовок = НСтр("ru = 'Дополнительная стоимость'");
	КР_КолонкиДопСтоимостьГруппа.ОтображатьВШапке = Истина; 
	КР_КолонкиДопСтоимостьГруппа.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	
	КР_ДополнительноКоличествоЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ДополнительноКоличество", КР_КолонкиДопСтоимостьГруппа);
	КР_ДополнительноКоличествоЭлемент.Заголовок = НСтр("ru = 'Количество'");
	КР_ДополнительноКоличествоЭлемент.Ширина = 1;
	КР_ДополнительноКоличествоЭлемент.УстановитьДействие("ПриИзменении", "КР_ДополнительноКоличествоПриИзменении");
	
	КР_ДополнительноТарифЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ДополнительноТариф", КР_КолонкиДопСтоимостьГруппа);
	КР_ДополнительноТарифЭлемент.Заголовок = ТарифЗаголовок;
	КР_ДополнительноТарифЭлемент.Ширина = 7;
	КР_ДополнительноТарифЭлемент.УстановитьДействие("ПриИзменении", "КР_ДополнительноТарифПриИзменении");
	
	КР_ДополнительноСтоимостьЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ДополнительноСтоимость", КР_КолонкиДопСтоимостьГруппа);
	КР_ДополнительноСтоимостьЭлемент.Заголовок = СтоимостьЗаголовок;
	КР_ДополнительноСтоимостьЭлемент.Ширина = 7;
	КР_ДополнительноСтоимостьЭлемент.ТолькоПросмотр = Истина;
	
	КР_СтоимостьДоставкиЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_СтоимостьДоставки", Элементы.Маршрут);
	КР_СтоимостьДоставкиЭлемент.ТолькоПросмотр = Истина;
	
	КР_КолонкиНДСГруппа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_КолонкиНДС", Элементы.Маршрут);
	КР_КолонкиНДСГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;
	КР_КолонкиНДСГруппа.Заголовок = НСтр("ru = 'НДС'");
	КР_КолонкиНДСГруппа.ОтображатьВШапке = Истина;
	КР_КолонкиНДСГруппа.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	
	КР_СтавкаНДСЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_СтавкаНДС", КР_КолонкиНДСГруппа);
	КР_СтавкаНДСЭлемент.Заголовок = НСтр("ru = 'Ставка'");
	КР_СтавкаНДСЭлемент.УстановитьДействие("ПриИзменении", "КР_СтавкаНДСПриИзменении");
	КР_СтавкаНДСЭлемент.Ширина = 7;
	
	КР_СуммаНДСЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_СуммаНДС", КР_КолонкиНДСГруппа);
	КР_СуммаНДСЭлемент.Заголовок = НСтр("ru = 'Сумма'");
	КР_СуммаНДСЭлемент.Ширина = 7;
	
	КР_ОбщаяСтоимостьДоставкиСНДСЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ОбщаяСтоимостьДоставкиСНДС", Элементы.Маршрут);
	КР_ОбщаяСтоимостьДоставкиСНДСЭлемент.ТолькоПросмотр = Истина;
	
	КР_КолонкиСчетГруппа = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_КолонкиСчет", Элементы.Маршрут);
	КР_КолонкиСчетГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;
	КР_КолонкиСчетГруппа.Заголовок = НСтр("ru = 'Счет'");
	КР_КолонкиСчетГруппа.ОтображатьВШапке = Истина;
	КР_КолонкиСчетГруппа.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;

	КР_НомерСчетаЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_НомерСчета", КР_КолонкиСчетГруппа);
	КР_НомерСчетаЭлемент.Заголовок = НСтр("ru = '№ счета'");
	КР_НомерСчетаЭлемент.Ширина = 1;

	КР_ДатаСчетаЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_ДатаСчета", КР_КолонкиСчетГруппа);
	КР_ДатаСчетаЭлемент.Заголовок = НСтр("ru = 'Дата'");
	КР_ДатаСчетаЭлемент.Ширина = 7;

	КР_ПодтвержденоЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.Маршрут.КР_Подтверждено", КР_КолонкиСчетГруппа);
	КР_ПодтвержденоЭлемент.ШиринаЭлемента = 1;
	КР_ПодтвержденоЭлемент.УстановитьДействие("ПриИзменении", "КР_ПодтвежденоПриИзменении");
	
	// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
	КР_ОбновитьПоДаннымГрафикаОтгрузкиКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ОбновитьПоДаннымГрафикаОтгрузки", НСтр("ru = 'Обновить по данным графика отгрузки'"));
	КР_ОбновитьПоДаннымГрафикаОтгрузкиКомандаЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_ОбновитьПоДаннымГрафикаОтгрузкиКоманда, КР_ЗаполнитьГруппа);
		
	КР_ПеренестиМаршрутыКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ПеренестиМаршруты", НСтр("ru = 'Перенести маршруты'"));
	КР_ПеренестиМаршрутыЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_ПеренестиМаршрутыКоманда, КР_ЗаполнитьГруппа);
	// >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
	
	// << 27.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ТипЗначения = ТипЗнч(Объект.Склад);
		Элементы.Склад.ОграничениеТипа = Новый ОписаниеТипов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения));
	Иначе
		Элементы.Склад.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли;
	Элементы.Склад.УстановитьДействие("Очистка", "КР_СкладОчистка");
	
	Элементы.МаршрутОбъем.ОграничениеТипа =
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный);
	Элементы.МаршрутОбъем.Формат = "ЧЦ=15; ЧДЦ=2";
	// >> 27.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	
	// << 07.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1359
	ТекстЗаголовка = НСтр("ru = 'Объем, %ЕдиницаИзмеренияОбъема%'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ЕдиницаИзмеренияОбъема%", НСтр("ru = 'м3'"));
	Элементы.МаршрутОбъем.Заголовок = ТекстЗаголовка;
	
	ТекстЗаголовка = НСтр("ru = 'Вес, %ЕдиницаИзмеренияВеса%'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ЕдиницаИзмеренияВеса%", НСтр("ru = 'кг'"));
	Элементы.МаршрутВес.Заголовок = ТекстЗаголовка;
	// >> 07.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1359
	
КонецПроцедуры // >> 24.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376

// << 24.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
&НаСервере
Процедура КР_УстановитьВидимостиДоступности()
	
	// << 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	ЕстьФлагПодтвержден = (Объект.Маршрут.НайтиСтроки(Новый Структура("КР_Подтверждено", Истина)).Количество() > 0);
	// >> 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	// << 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	ВыполняетПеревозчик = (Объект.ЗаданиеВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик);
	// >> 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	
	Элементы.КурьерЭкспедитор.ТолькоПросмотр = ЕстьФлагПодтвержден;
	Элементы.Перевозчик.ТолькоПросмотр = ЕстьФлагПодтвержден;
	// << 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	Элементы.КР_ЭкспедиторПартнер.ТолькоПросмотр = ЕстьФлагПодтвержден;
	Элементы.КР_ЭкспедиторПартнер.Видимость = ВыполняетПеревозчик;
	Элементы.Перевозчик.Видимость = Не ВыполняетПеревозчик;
	Элементы.Водитель.Видимость = Не ВыполняетПеревозчик;
	// >> 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	// << 20.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	Элементы.КР_ЗонаДоставки.Видимость = ВыполняетПеревозчик;
	// >> 20.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	Элементы.Статус.ТолькоПросмотр = ЕстьФлагПодтвержден;
	Элементы.Склад.ТолькоПросмотр = ЕстьФлагПодтвержден;
	Элементы.Водитель.ТолькоПросмотр = ЕстьФлагПодтвержден;
	
	Элементы.МаршрутЗонаДоставки.ТолькоПросмотр = Истина;
	
	// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
	Элементы.ИнформацияОТСИВодителе.Видимость					= Ложь;
	Элементы.МаршрутДобавитьРаспоряжение.Видимость				= Ложь;
	Элементы.МаршрутРазбитьСтроку.Видимость						= Ложь;
	Элементы.МаршрутОбъединитьСтроки.Видимость					= Ложь;
	Элементы.МаршрутОформитьТранспортныеНакладные.Видимость		= Ложь;
	Элементы.РаспоряженияЗаполнитьПоРасходнымОрдерам.Видимость	= Ложь;
	Элементы.ГруппаВремяФакт.Видимость							= Ложь;
	Элементы.ДатаВремяРейсаПланПо.Видимость						= Ложь;
	Элементы.ГруппаЗаданияПодвал.Видимость						= Ложь;
	Элементы.ТранспортноеСредство.Видимость						= Ложь;
	Элементы.ДатаВремяРейсаПланС.Видимость						= Ложь;
	
	КР_УстановитьВидимостьКомандыПеренестиМаршруты();
	// >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
	
КонецПроцедуры // >> 24.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376

// << 01.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаСервере
Процедура КР_УстановитьУсловноеОформлениеДополнительно()
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ЭлементУО.Отбор, "Объект.Маршрут.КР_Подтверждено", Истина);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутДоставлено");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутАдрес");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВремяС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВремяПо");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутВес");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутОбъем");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_КоличествоПаллет");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ФактическаяДатаДоставки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_Маршрут");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_Отгружено");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ТарифСтавка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ТарифСтоимость");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ПРРНаличие");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ПРРТариф");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ПРРСтоимость");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ДополнительноКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ДополнительноТариф");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ДополнительноСтоимость");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_СтоимостьДоставки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_СтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_СуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ОбщаяСтоимостьДоставкиСНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_НомерСчета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ДатаСчета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_ПолучательОтправитель");
	
	Если Не Пользователи.РолиДоступны("КР_ОтменаПодтвержденияФактаПеревозки") Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутКР_Подтверждено");
	КонецЕсли;
	
КонецПроцедуры // >> 01.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

#КонецОбласти

#Область КР_ОбработчикиСобытийЭлементовШапкиФормы

// << 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ЭкспедиторПартнерПриИзменении(Элемент)
	
	КР_ЭкспедиторПартнерПриИзмененииНаСервере();
	
	Если Объект.Маршрут.Количество() Тогда
		 Оповещение = Новый ОписаниеОповещения("КР_ЗаполнитьТипыВладенияТСОтвет", ЭтотОбъект);
		 ПоказатьВопрос(
		 	Оповещение,
			НСтр("ru = 'Перезаполнить типы владения ТС в табличной части?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

// << 27.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_СкладОчистка(Элемент, СтандартнаяОбработка)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));
	
	Элементы.Склад.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры // >> 27.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

#КонецОбласти

#Область КР_ОбработчикиСобытийЭлементовТаблицыФормыМаршрут

// << 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_МаршрутДоставленоПриИзмененииДополнительно()
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущиеДанные.Доставлено Тогда
		ТекущиеДанные.КР_ФактическаяДатаДоставки =  ТекущаяДата();
	Иначе         
		ТекущиеДанные.КР_ФактическаяДатаДоставки =  Дата(1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КР_МаршрутОбъемПриИзмененииДополнительно()
	
	КР_РассчитатьСтоимостьПРР();
	КР_РассчитатьСтоимостьТарифа();
	
КонецПроцедуры // >> 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376

// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ФактическаяДатаДоставкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	ТекущиеДанные.Доставлено = ЗначениеЗаполнено(ТекущиеДанные.КР_ФактическаяДатаДоставки);
	
КонецПроцедуры // >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ТарифСтавкаПриИзменении(Элемент)
	
    КР_РассчитатьСтоимостьТарифа();
	
КонецПроцедуры // >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376 

// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_КоличествоПаллетПриИзменении(Элемент)
	
    КР_РассчитатьСтоимостьТарифа();
	
КонецПроцедуры // >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376 

// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ПРРНаличиеПриИзменении(Элемент)
	
    КР_РассчитатьСтоимостьПРР();
	
КонецПроцедуры // >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376  

// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ПРРТарифПриИзменении(Элемент)
	
    КР_РассчитатьСтоимостьПРР();
	
КонецПроцедуры // >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ДополнительноТарифПриИзменении(Элемент)
	
    КР_РассчитатьСтоимостьДополнительно();
	
КонецПроцедуры // >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376   

// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ДополнительноКоличествоПриИзменении(Элемент)
	
    КР_РассчитатьСтоимостьДополнительно();
	
КонецПроцедуры // >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376   

// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_МаршрутПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	// << 11.01.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-325
	// Рефакторинг справочника КР_Маршруты
	ТекущиеДанные.Зона = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.КР_Маршрут, "ЗонаДоставки");
	// >> 11.01.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-325
	
	КР_РассчитатьСтоимостьТарифа();
	КР_РассчитатьСтоимостьДополнительно();
	
КонецПроцедуры // >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 20.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_МаршрутНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.КР_ЗонаДоставки) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"           , Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"    , Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"    , Истина);
	ПараметрыФормыВыбора.Вставить("ФиксированныеНастройки",
		КР_ФиксированныеНастройкиОтбора(Объект.КР_ЗонаДоставки));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КР_МаршрутОкончаниеВыбора", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.КР_Маршруты.ФормаВыбора",
		ПараметрыФормыВыбора,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // >> 20.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_СтавкаНДСПриИзменении(Элемент)
	
	КР_РассчитатьСтоимостьДоставки();
	
КонецПроцедуры // >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ПолучательОтправительПриИзменении(Элемент)
	
	// << 13.01.2023, Федоров Д.Е., КРОК, Jira№ A2105505-909
	КР_ЗаполнитьЗависимыеРеквизитыПолучательОтправительТипЗадания(Элемент);
	
	// Фрагмент кода, перенесенный в "КР_ЗаполнитьЗависимыеРеквизитыПолучательОтправительТипЗадания":
	
	//ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	//ПолучательОтправитель = ТекущиеДанные.КР_ПолучательОтправитель;
	//
	//Если ТипЗнч(ПолучательОтправитель) = Тип("СправочникСсылка.Партнеры") Тогда
	//	Адрес = КР_ПолучитьАдресПартнера(ПолучательОтправитель);
	//ИначеЕсли ТипЗнч(ПолучательОтправитель) = Тип("СправочникСсылка.Склады") Тогда
	//	// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
	//	Если ЗначениеЗаполнено(ПолучательОтправитель) Тогда
	//		МассивИндексовСтрок = Новый Массив;
	//		МассивИндексовСтрок.Добавить(Элементы.Маршрут.ТекущаяСтрока);
	//		КР_ОбновитьДанныеСтрокПоГрафикуОтгрузкиНаСервере(МассивИндексовСтрок);
	//	КонецЕсли;
	//	// >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
	//	Адрес = КР_ПолучитьАдресСклада(ПолучательОтправитель);
	//Иначе
	//	Адрес = "";
	//КонецЕсли;
	//
	//ТекущиеДанные.Адрес = Адрес;
	
	// >> 13.01.2023, Федоров Д.Е., КРОК, Jira№ A2105505-909
	
КонецПроцедуры // >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 11.01.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-325
&НаКлиенте
Процедура КР_ПолучательОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.КР_ПолучательОтправитель = Неопределено Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ТекущиеДанные.КР_ПолучательОтправитель)));
	КонецЕсли;
	
КонецПроцедуры // >> 11.01.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-325

// << 11.01.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-325
&НаКлиенте
Процедура КР_ПолучательОтправительОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.ОграничениеТипа = КР_ПолучитьОграниченияТипаПолучательОтправитель();
	
КонецПроцедуры // >> 11.01.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-325

// << 19.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_МаршрутДатаСПриИзменении(Элемент)
	
	ПриИзмененииВремяС();
	
КонецПроцедуры // >> 19.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

&НаКлиенте
Процедура КР_МаршрутТранспортноеСредствоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Маршрут.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КР_ЗаполнитьТипыВладенияТСНаСервере(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КР_МаршрутТипВладенияТСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	
	Если Объект.Маршрут.Количество() > 1 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущееТС"         , ТекущиеДанные.КР_ТранспортноеСредство);
		ДополнительныеПараметры.Вставить("ТекущийТипВладения", ТекущиеДанные.КР_ТипВладенияТС);
		
		Оповещение = Новый ОписаниеОповещения(
			"КР_ВручнуюЗаполнитьТипВладенияТСОтвет",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Установить этот тип владения ТС для всех строк документа с тем же ТС?'"),
			РежимДиалогаВопрос.ДаНет,
			15,
			КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

// << 24.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ПодтвежденоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Маршрут.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КР_ПодтвежденоПриИзмененииНаСервере(ТекущаяСтрока);
	
КонецПроцедуры // >> 24.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// #4451.. Фомин Д.Ю. 29.07.2024.
&НаКлиенте
Процедура злВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = злПолучитьСписокФизЛиц(Текст);
	КонецЕсли;	
	
КонецПроцедуры
// ..#4451

#КонецОбласти   

#Область КР_ОбработчикиКомандТаблицыФормыМаршрут

// << 28.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1300
&НаКлиенте
Процедура КР_ОбновитьПоФактическимДаннымОтгрузки(Команда)
	
	КР_ОбновитьПоФактическимДаннымОтгрузкиНаСервере();
	
КонецПроцедуры // >> 28.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1300

// << 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ДобавитьСтрокуТЧМаршрут(Команда)
	
	нСтрока = Объект.Маршрут.Добавить();
	нСтрока.КлючСвязи = Новый УникальныйИдентификатор;
	нСтрока.КР_ПолучательОтправитель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	
КонецПроцедуры // >> 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_РассчитатьПоТарифу(Команда)
	
	ОчиститьСообщения();
	
	КР_РассчитатьПоТарифуНаСервере();
	
КонецПроцедуры // >> 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ПодтвердитьВсеЗатратыПоСчету(Команда)
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка табличной части.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КР_НомерСчета", ТекущиеДанные.КР_НомерСчета);
	ПараметрыОтбора.Вставить("КР_ДатаСчета" , ТекущиеДанные.КР_ДатаСчета);
		
	// --> Евлахов Игорь Николаевич (Начало) 24.07.2023 13:04:57
	// Задача #2905 e1cib/data/Справочник.узЗадачи?ref=811c00155d7d36f411ee198dfa54afa1
	// *//--> Евлахов Игорь Николаевич (Начало было)
	
	//КР_ПодтвердитьВсеЗатратыПоСчетуНаСервере(ПараметрыОтбора);
	
	// *//<-- Евлахов Игорь Николаевич (Конец было)
	// Обрабатываться будут только ранее не подтвержденные строки.
	ПараметрыОтбора.Вставить("КР_Подтверждено", Ложь);
	
	СтрокиМаршрутов = Объект.Маршрут.НайтиСтроки(ПараметрыОтбора);	
	КоличествоСтрокМаршрутов = СтрокиМаршрутов.Количество();
	
	Если КоличествоСтрокМаршрутов > 0 Тогда
		Режим 			= РежимДиалогаВопрос.ДаНет;
		ИмяПроцедуры 	= "злПослеЗакрытияВопросаПодтвердитьВсеЗатратыПоСчету";
		
		Если ЗначениеЗаполнено(ПараметрыОтбора.КР_НомерСчета) 
			И ЗначениеЗаполнено(ПараметрыОтбора.КР_ДатаСчета) Тогда
			
			ТекстШаблона 	= НСтр("ru = 'Подтвердить все затраты по счету: %1 от %2. Будет обработано кол-во строк: %3. Продолжить?'");
			ТекстВопроса 	= СтрШаблон(ТекстШаблона, 
									 	СокрЛП(ПараметрыОтбора.КР_НомерСчета),
									 	Формат(ПараметрыОтбора.КР_ДатаСчета, "ДФ=dd.MM.yyyy"),
									 	Формат(КоличествоСтрокМаршрутов, "ЧДЦ=0; ЧН=0; ЧГ=0")); 		
		ИначеЕсли Не ЗначениеЗаполнено(ПараметрыОтбора.КР_НомерСчета) 
				И ЗначениеЗаполнено(ПараметрыОтбора.КР_ДатаСчета) Тогда
			ТекстШаблона = НСтр("ru = 'Подтвердить все затраты для строк с пустым номером счета от %1."
									+ " Будет обработано кол-во строк: %2. Продолжить?'");
			ТекстВопроса = СтрШаблон(ТекстШаблона,
									 Формат(ПараметрыОтбора.КР_ДатаСчета, "ДФ=dd.MM.yyyy"),
									 Формат(КоличествоСтрокМаршрутов, "ЧДЦ=0; ЧН=0; ЧГ=0")); 
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОтбора.КР_НомерСчета) 
				И Не ЗначениеЗаполнено(ПараметрыОтбора.КР_ДатаСчета) Тогда
			ТекстШаблона = НСтр("ru = 'Подтвердить все затраты по счету: %1 с пустой датой."
									+ " Будет обработано кол-во строк: %2. Продолжить?'");
			ТекстВопроса = СтрШаблон(ТекстШаблона,
									 СокрЛП(ПараметрыОтбора.КР_НомерСчета),
									 Формат(КоличествоСтрокМаршрутов, "ЧДЦ=0; ЧН=0; ЧГ=0"));
		Иначе
			ТекстШаблона = НСтр("ru = 'Подтвердить все затраты для строк с пустым номером счета и пустой датой."
									+ " Будет обработано кол-во строк: %1. Продолжить?'");
			ТекстВопроса = СтрШаблон(ТекстШаблона, Формат(КоличествоСтрокМаршрутов, "ЧДЦ=0; ЧН=0; ЧГ=0"));
		КонецЕсли;
		ДополнительныеПараметры = Новый Структура();	
		ДополнительныеПараметры.Вставить("ПараметрыОтбора", ПараметрыОтбора);
		
		Оповещение = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0); 
	Иначе
		// Нет строк, подпадающих под условия отбора
		Если ЗначениеЗаполнено(ПараметрыОтбора.КР_НомерСчета) 
			И ЗначениеЗаполнено(ПараметрыОтбора.КР_ДатаСчета) Тогда 
			ТекстШаблона = НСтр("ru = 'Отсутствуют неподтвержденные строки маршрутов по счету: %1 от %2'");
			ТекстПредупреждения = СтрШаблон(ТекстШаблона, 
											ПараметрыОтбора.КР_НомерСчета,
											Формат(ПараметрыОтбора.КР_ДатаСчета, "ДФ=dd.MM.yyyy"));	
		ИначеЕсли Не ЗначениеЗаполнено(ПараметрыОтбора.КР_НомерСчета) 
				И ЗначениеЗаполнено(ПараметрыОтбора.КР_ДатаСчета) Тогда
			ТекстШаблона = НСтр("ru = 'Отсутствуют неподтвержденные строки маршрутов с пустым номером счета от %1'");
			ТекстПредупреждения = СтрШаблон(ТекстШаблона, Формат(ПараметрыОтбора.КР_ДатаСчета, "ДФ=dd.MM.yyyy")); 
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОтбора.КР_НомерСчета) 
				И Не ЗначениеЗаполнено(ПараметрыОтбора.КР_ДатаСчета) Тогда
			ТекстШаблона = НСтр("ru = 'Отсутствуют неподтвержденные строки маршрутов по счету: %1 с пустой датой.'");
			ТекстПредупреждения = СтрШаблон(ТекстШаблона, ПараметрыОтбора.КР_НомерСчета);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Отсутствуют неподтвержденные строки маршрутов с пустым счетом и пустой датой.'");		
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;		
	// <-- Евлахов Игорь Николаевич (Конец) 24.07.2023 13:05:44 #2905
	
КонецПроцедуры // >> 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ПереключитьВидимостьПоказателейРасчетаТарифа(Команда)
	
	Элементы.КР_ПереключитьВидимостьПоказателейРасчетаТарифа.Пометка =
		Не Элементы.КР_ПереключитьВидимостьПоказателейРасчетаТарифа.Пометка;
	
	КР_КолонкиТариф = Элементы.Найти("КР_КолонкиТариф");
	Если Не КР_КолонкиТариф = Неопределено Тогда
		КР_КолонкиТариф.Видимость = Не КР_КолонкиТариф.Видимость;
	КонецЕсли;
	
	КР_КолонкиППР = Элементы.Найти("КР_КолонкиППР");
	Если Не КР_КолонкиППР = Неопределено Тогда
		КР_КолонкиППР.Видимость = Не КР_КолонкиППР.Видимость;
	КонецЕсли;
	
	КР_КолонкиДопСтоимость = Элементы.Найти("КР_КолонкиДопСтоимость");
	Если Не КР_КолонкиДопСтоимость = Неопределено Тогда
		КР_КолонкиДопСтоимость.Видимость = Не КР_КолонкиДопСтоимость.Видимость;
	КонецЕсли;
	
	КР_КолонкаСтоимостьДоставки = Элементы.Найти("КР_СтоимостьДоставки");
	Если Не КР_КолонкаСтоимостьДоставки = Неопределено Тогда
		КР_КолонкаСтоимостьДоставки.Видимость = Не КР_КолонкаСтоимостьДоставки.Видимость;
	КонецЕсли;
	
КонецПроцедуры // >> 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ПереключитьВидимостьПоказателейНДС(Команда)
	
	Элементы.КР_ПереключитьВидимостьПоказателейНДС.Пометка = Не Элементы.КР_ПереключитьВидимостьПоказателейНДС.Пометка;
	
	КР_КолонкиНДС = Элементы.Найти("КР_КолонкиНДС");
	Если Не КР_КолонкиНДС = Неопределено Тогда
		КР_КолонкиНДС.Видимость = Не КР_КолонкиНДС.Видимость;
	КонецЕсли;
	
КонецПроцедуры // >> 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_ПереключитьВидимостьДанныхСчетаЭкспедитора(Команда)
	
	Элементы.КР_ПереключитьВидимостьДанныхСчетаЭкспедитора.Пометка =
		Не Элементы.КР_ПереключитьВидимостьДанныхСчетаЭкспедитора.Пометка;
	
	КР_КолонкиСчет = Элементы.Найти("КР_КолонкиСчет");
	Если Не КР_КолонкиСчет = Неопределено Тогда
		КР_КолонкиСчет.Видимость = Не КР_КолонкиСчет.Видимость;
	КонецЕсли;
	
КонецПроцедуры // >> 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
// Команда "Обновить по данным графика отгрузки"
//
// Параметры:
//  Команда - КомандаФормы - Вызываемая команда формы
&НаКлиенте
Процедура КР_ОбновитьПоДаннымГрафикаОтгрузки(Команда)
	
	МассивИдентификаторовВыделенныхСтрок = Элементы.Маршрут.ВыделенныеСтроки;
	Если МассивИдентификаторовВыделенныхСтрок.Количество() = 0 Тогда
		СообщениеПользователю = НСтр("ru='Не выбраны строки документа'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеПользователю);
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("МассивИдентификаторовВыделенныхСтрок", МассивИдентификаторовВыделенныхСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("КР_ОбновитьПоДаннымГрафикаОтгрузкиОтвет", ЭтотОбъект, СтруктураДанных);
	ТекстВопроса = НСтр("ru = 'В выбранных строках будет произведено обновление данных о маршруте, "
		+ "дате и времени доставки. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
// Команда "Перенести маршруты"
//
// Параметры:
//  Команда - КомандаФормы - Вызываемая команда формы
&НаКлиенте
Процедура КР_ПеренестиМаршруты(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Маршрут.Количество() = 1 Тогда
		СообщениеПользователю = НСтр("ru='Запрещено выполнять перенос маршрутов, при наличии только одной строки маршрута.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеПользователю);
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторовВыделенныхСтрок = Элементы.Маршрут.ВыделенныеСтроки;
	Если МассивИдентификаторовВыделенныхСтрок.Количество() = 0 Тогда
		СообщениеПользователю = НСтр("ru='Не выбраны строки документа'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеПользователю);
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("МассивИдентификаторовВыделенныхСтрок", МассивИдентификаторовВыделенныхСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("КР_ПеренестиМаршрутыОтвет", ЭтотОбъект, СтруктураДанных);
	ТекстВопроса = НСтр("ru = 'Будет создан новый документ ""Задание на перевозку"","
		+ "в который будут перенесены выделенные строки ТЧ ""Маршруты"". Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

#КонецОбласти

#Область КР_ПроцедурыОписанияОповещения

&НаКлиенте
Процедура злПослеЗакрытияВопросаПодтвердитьВсеЗатратыПоСчету(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ПараметрыОтбора = ДополнительныеПараметры.ПараметрыОтбора;
			
	КР_ПодтвердитьВсеЗатратыПоСчетуНаСервере(ПараметрыОтбора);
	
	ЭтаФорма.Модифицированность = Истина;
	
	ТекстСообщения = НСтр("ru = 'Подтверждение затрат'");
	ТекстПояснения = НСтр("ru = 'Успешно выполнено.'"); 
	
	ПоказатьОповещениеПользователя(ТекстСообщения,, ТекстПояснения, БиблиотекаКартинок.ДиалогИнформация);
		
КонецПроцедуры

#КонецОбласти

#Область КР_СлужебныеПроцедурыИФункции 

// << 11.01.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-325
&НаСервереБезКонтекста
Функция КР_ПолучитьОграниченияТипаПолучательОтправитель()
	Возврат Метаданные.ОпределяемыеТипы.ОтправительПолучательДоставки.Тип;
КонецФункции // >> 11.01.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-325

// << 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_РассчитатьСтоимостьТарифа()
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КР_ТарифСтавка = 0 Тогда
		ТекущиеДанные.КР_ТарифСтоимость = 0;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.КР_Маршрут) Тогда
		Возврат;	
	КонецЕсли;
	
	ВидТарифаОбъем = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.КР_ВидыТарифовПеревозчиков.ОбъемВМ3");
	ВидТарифаМаршрута = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.КР_Маршрут, "ВидТарифа");
       
	Если ВидТарифаМаршрута = ВидТарифаОбъем Тогда 
		ТекущиеДанные.КР_ТарифСтоимость = ТекущиеДанные.КР_ТарифСтавка * ТекущиеДанные.Объем;		
	Иначе 
		ТекущиеДанные.КР_ТарифСтоимость = ТекущиеДанные.КР_ТарифСтавка;
	КонецЕсли;	
	
	КР_РассчитатьСтоимостьДоставки();
	
КонецПроцедуры // >> 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376

// << 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_РассчитатьСтоимостьДополнительно()
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КР_ДополнительноСтоимость = ТекущиеДанные.КР_ДополнительноКоличество * ТекущиеДанные.КР_ДополнительноТариф;  
	
	КР_РассчитатьСтоимостьДоставки();
	
КонецПроцедуры // >> 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376

// << 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_РассчитатьСтоимостьПРР()
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.КР_ПРРНаличие Тогда
		ТекущиеДанные.КР_ПРРСтоимость = 0;
		Возврат;	
	КонецЕсли; 
	
	ТекущиеДанные.КР_ПРРСтоимость = ТекущиеДанные.КР_ПРРТариф * ТекущиеДанные.Объем;
	
	Если ТекущиеДанные.КР_ТипЗадания = ПредопределенноеЗначение("Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаПоГороду") Тогда
		ТекущиеДанные.КР_ПРРСтоимость = ТекущиеДанные.КР_ПРРСтоимость * 2;
	КонецЕсли;

	КР_РассчитатьСтоимостьДоставки();
	
КонецПроцедуры // >> 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376

// << 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_РассчитатьСтоимостьДоставки()
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КР_СтоимостьДоставки = ТекущиеДанные.КР_ТарифСтоимость 
											+ ТекущиеДанные.КР_ПРРСтоимость 
												+ ТекущиеДанные.КР_ДополнительноСтоимость;
	ТекущиеДанные.КР_СтоимостьДоставки = КР_СтоимостьДоставки;
	Если КР_СтоимостьДоставки <> 0 И ЗначениеЗаполнено(ТекущиеДанные.КР_СтавкаНДС) Тогда
		ТекущиеДанные.КР_СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
									КР_СтоимостьДоставки, ТекущиеДанные.КР_СтавкаНДС, Ложь);
	Иначе
		ТекущиеДанные.КР_СуммаНДС = 0;
	КонецЕсли;
	
	ТекущиеДанные.КР_ТарифСтоимостьСНДС = ТекущиеДанные.КР_ТарифСтоимость +
		УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекущиеДанные.КР_ТарифСтоимость, ТекущиеДанные.КР_СтавкаНДС, Ложь);
	ТекущиеДанные.КР_ПРРСтоимостьСНДС = ТекущиеДанные.КР_ПРРСтоимость +
		УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекущиеДанные.КР_ПРРСтоимость, ТекущиеДанные.КР_СтавкаНДС, Ложь);
	
	ТекущиеДанные.КР_ОбщаяСтоимостьДоставкиСНДС = ТекущиеДанные.КР_СтоимостьДоставки + ТекущиеДанные.КР_СуммаНДС;
	
КонецПроцедуры // >> 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376

// << 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
// Описание:  Возвращает адрес склада из контактной информации
// Параметры:
// Склад - СправочникСсылка.Склады
// Возвращаемое значение:
// Строка
&НаСервереБезКонтекста
Функция КР_ПолучитьАдресСклада(Склад)
	
	// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	// Ошибка функции БСП. Если у объекта нет КИ, подходящей под отбор,
	// функция ПредставлениеКонтактнойИнформацииОбъекта возвращает Неопределено
	Результат = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
										Склад, Справочники.ВидыКонтактнойИнформации.АдресСклада);
	
	Возврат ?(Результат = Неопределено, "", Результат);
	// >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	
КонецФункции // >> 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376

// << 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376
// Описание:  Возвращает адрес Парнера из контактной информации
// Параметры:
// Партнер - СправочникСсылка.Партнеры
// Возвращаемое значение:
// Строка
&НаСервереБезКонтекста
Функция КР_ПолучитьАдресПартнера(Партнер)
	
	// << 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	ВидыКИПартнера = УправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацииОбъекта(
													Партнер, Перечисления.ТипыКонтактнойИнформации.Адрес);
	ВидыКИАдресДоставки = ВидыКИПартнера.НайтиСтроки(Новый Структура("ИдентификаторДляФормул", "АдресДоставки"));
	Если Не ВидыКИАдресДоставки.Количество() Тогда
		Возврат "";
	КонецЕсли;
	
	// Ошибка функции БСП. Если у объекта нет КИ, подходящей под отбор,
	// функция ПредставлениеКонтактнойИнформацииОбъекта возвращает Неопределено
	Результат = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
													Партнер, ВидыКИАдресДоставки[0].Ссылка);
	
	Возврат ?(Результат = Неопределено, "", Результат);
	// >> 05.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
	
КонецФункции // >> 30.08.2022, Мельников А.А., КРОК, Jira№ A2105505-376

// << 05.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаСервереБезКонтекста
Функция КР_ЕстьТарифПеревозчика(ТарифыПоМаршруту, ОбъемГруза, НайденныйТариф)
	
	Для Каждого СтрокаТариф Из ТарифыПоМаршруту Цикл
		Если ОбъемГруза >= СтрокаТариф.ОбъемМинимум И ОбъемГруза <= СтрокаТариф.ОбъемМаксимум Тогда
			НайденныйТариф = СтрокаТариф;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // >> 05.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаСервере
Процедура КР_ЭкспедиторПартнерПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.КР_ЭкспедиторПартнер) Тогда
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(
			Объект.КР_ЭкспедиторПартнер, Объект.КР_ЭкспедиторКонтрагент, Истина);
	Иначе
		Объект.КР_ЭкспедиторПартнер = Справочники.Партнеры.ПустаяСсылка();
		Объект.КР_ЭкспедиторКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КР_ЗаполнитьТипыВладенияТСОтвет(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КР_ЗаполнитьТипыВладенияТСНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КР_ЗаполнитьТипыВладенияТСНаСервере(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ЗаполнитьВсюТЧ = Истина;
		ТекущиеДанные = Объект.Маршрут.Выгрузить();
	Иначе
		ЗаполнитьВсюТЧ = Ложь;
		ТекущиеДанные = Объект.Маршрут.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	Если ЗаполнитьВсюТЧ Тогда
		МассивТС = ОбщегоНазначения.ВыгрузитьКолонку(ТекущиеДанные, "КР_ТранспортноеСредство", Истина);
	Иначе
		МассивТС = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.КР_ТранспортноеСредство);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Экспедитор"          , Объект.КР_ЭкспедиторПартнер);
	Запрос.УстановитьПараметр("ТранспортныеСредства", МассивТС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КР_ВладениеТранспортнымСредством.ТранспортноеСредство КАК ТранспортноеСредство,
	|	КР_ВладениеТранспортнымСредством.ТипВладенияТС КАК ТипВладенияТС
	|ИЗ
	|	РегистрСведений.КР_ВладениеТранспортнымСредством КАК КР_ВладениеТранспортнымСредством
	|ГДЕ
	|	КР_ВладениеТранспортнымСредством.Экспедитор = &Экспедитор
	|	И КР_ВладениеТранспортнымСредством.ТранспортноеСредство В(&ТранспортныеСредства)";
	
	ДанныеРегистра = Запрос.Выполнить().Выгрузить();
	
	Если ЗаполнитьВсюТЧ Тогда
		Для Каждого ТекСтрока Из Объект.Маршрут Цикл
			ТекДанныеРегистра = ДанныеРегистра.Найти(
				ТекСтрока.КР_ТранспортноеСредство, "ТранспортноеСредство");
			Если Не ТекДанныеРегистра = Неопределено Тогда
				ТекСтрока.КР_ТипВладенияТС = ТекДанныеРегистра.ТипВладенияТС;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекДанныеРегистра = ДанныеРегистра.Найти(
			ТекущиеДанные.КР_ТранспортноеСредство, "ТранспортноеСредство");
		Если Не ТекДанныеРегистра = Неопределено Тогда
			ТекущиеДанные.КР_ТипВладенияТС = ТекДанныеРегистра.ТипВладенияТС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КР_НастроитьПоТипуИсполнителяДополнительно()
	
	ВыполняетПеревозчик = (Объект.ЗаданиеВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик);
	
	Если Не ВыполняетПеревозчик Тогда
		Объект.КР_ЭкспедиторПартнер = Справочники.Партнеры.ПустаяСсылка();
		Объект.КР_ЭкспедиторКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	КР_УстановитьВидимостиДоступности();
	
КонецПроцедуры

&НаКлиенте
Процедура КР_ВручнуюЗаполнитьТипВладенияТСОтвет(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КР_ВручнуюЗаполнитьТипВладенияТСНаСервере(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура КР_ВручнуюЗаполнитьТипВладенияТСНаСервере(ПараметрыЗаполнения)
	
	ТекущееТС = ПараметрыЗаполнения.ТекущееТС;
	ТекущийТипВладения = ПараметрыЗаполнения.ТекущийТипВладения;
	
	нСтроки = Объект.Маршрут.НайтиСтроки(Новый Структура("КР_ТранспортноеСредство", ТекущееТС));
	Для Каждого нСтрока Из нСтроки Цикл
		нСтрока.КР_ТипВладенияТС = ТекущийТипВладения;
	КонецЦикла;
	
КонецПроцедуры // >> 19.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
// Выполнение команды "Обновить данные строк по графику отгрузки" на сервере
//
// Параметры:
//  МассивИндексовСтрок - Массив - Массив, содержащий идентификаторов выделенных строк.
&НаСервере
Процедура КР_ОбновитьДанныеСтрокПоГрафикуОтгрузкиНаСервере(МассивИндексовСтрок)
	
	МассивСтрок = Новый Массив;
	Для Каждого ИдентификаторСтроки Из МассивИндексовСтрок Цикл
		МассивСтрок.Добавить(Объект.Маршрут.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	ДанныеДляОбработки = Объект.Маршрут.Выгрузить(МассивСтрок, "КР_ПолучательОтправитель, КР_ТипЗадания, НомерСтроки");
	
	Запрос = Новый Запрос;
	Запрос.Текст = КР_ТекстЗапросаОбновлениеДанныхСтрокиМаршрута();
	Запрос.УстановитьПараметр("ДанныеДляОбработки", ДанныеДляОбработки);
	Запрос.УстановитьПараметр("ДатаСреза",			Объект.ДатаВремяРейсаПланС);
	Запрос.УстановитьПараметр("ДеньОтгрузки",		ДеньНедели(Объект.ДатаВремяРейсаПланС));
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСтрокиМаршрут 							= Объект.Маршрут[Выборка.НомерСтроки - 1];
		Дата											= НачалоДня(Выборка.ДатаС);
		ДанныеСтрокиМаршрут.ВремяСБезДаты				= Выборка.ВремяС;
		ДанныеСтрокиМаршрут.ВремяПоБезДаты				= Выборка.ВремяПо;
		ДанныеСтрокиМаршрут.ВремяС						= КР_ОбщегоНазначениеСервер.ДобавитьКДатеВремя(Дата, Выборка.ВремяС);
		ДанныеСтрокиМаршрут.ВремяПо						= КР_ОбщегоНазначениеСервер.ДобавитьКДатеВремя(Дата, Выборка.ВремяПо);
		ДанныеСтрокиМаршрут.КР_Маршрут					= Выборка.Маршрут;
		ДанныеСтрокиМаршрут.КР_ПРРНаличие				= Выборка.ПРР;
		ДанныеСтрокиМаршрут.ДополнительнаяИнформация	= Выборка.ДополнительнаяИнформация;
		// << 02.10.2023, Петухов А.В., Фактор, #3130
		ДанныеСтрокиМаршрут.КР_ВремяПодачиТранспорта	= Выборка.ВремяПодачиТранспорта;
		// >> 02.10.2023, Петухов А.В., Фактор, #3130
	КонецЦикла;
	
КонецПроцедуры // >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
// Обработчик ответа на вопрос об обновлении данных маршрута
//
// Параметры:
//  Результат - КодВозвратаДиалога - Ответ на вопрос.
//  ДополнительныеПараметры - Структура - Дополнительные параметры вопроса.
&НаКлиенте
Процедура КР_ОбновитьПоДаннымГрафикаОтгрузкиОтвет(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КР_ОбновитьДанныеСтрокПоГрафикуОтгрузкиНаСервере(ДополнительныеПараметры.МассивИдентификаторовВыделенныхСтрок);

КонецПроцедуры // >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
// Обработчик ответа на вопрос о переносе строк маршрутов
//
// Параметры:
//  Результат - КодВозвратаДиалога - Ответ на вопрос.
//  ДополнительныеПараметры - Структура - Дополнительные параметры вопроса.
&НаКлиенте
Процедура КР_ПеренестиМаршрутыОтвет(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СозданныйДокументСсылка = КР_ПеренестиМаршрутыНаСервере(ДополнительныеПараметры.МассивИдентификаторовВыделенныхСтрок);
	Если ЗначениеЗаполнено(СозданныйДокументСсылка) Тогда
		ПоказатьЗначение(, СозданныйДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры // >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
// Обработчик ответа на вопрос о переносе строк маршрутов
//
// Параметры:
//  МассивИдентификаторовВыделенныхСтрок - Массив - Массив, содержащий идентификаторов выделенных строк.
//
// Возвращаемое значение:
//  ДокументСсылка.ЗаданиеНаПеревозку - созданный документ.
&НаСервере
Функция КР_ПеренестиМаршрутыНаСервере(МассивИдентификаторовВыделенныхСтрок)
	
	СозданныйДокумент				= Документы.ЗаданиеНаПеревозку.ПустаяСсылка();
	ТранзакцияВыполненаУспешно		= Истина;
	// 1. Выполним запись текущего документа (вне транзакции, чтобы сохранить текущие изменени на форме)
	Записать();
	// Транзакия, позволяющая выполнить полноценный контроль зависимых объектов.
	НачатьТранзакцию();
	Попытка
		// 2. Удалим переносимые строки и создадим новый документ с перенесенной строкой
		СозданныйДокумент			= КР_ВыполнитьПереносСтрокВНовыйДокумент(МассивИдентификаторовВыделенныхСтрок);
		СообщениеШаблон				= НСтр("ru='Строки перенесены в новый документ %1'");
		Сообщение					= СтрШаблон(СообщениеШаблон, СозданныйДокумент);
		// 3. Перепроведем текущий документ после удаления строк
		Записать();
		ОбщегоНазначения.СообщитьПользователю(Сообщение);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТранзакцияВыполненаУспешно = Ложь;
		ОписаниеОшибки				= ОписаниеОшибки();
		СообщениеОбОшибкеШаблон 	= НСтр("ru='Не удалось перенести маршруты по причине: %1'");
		СообщениеОбОшибке			= СтрШаблон(СообщениеОбОшибкеШаблон, ОписаниеОшибки);
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
	КонецПопытки;
	
	Возврат СозданныйДокумент;
	
КонецФункции // >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
// Функция по переносу выделенных строк в новый создаваемый документ
//
// Параметры:
//  МассивИдентификаторовВыделенныхСтрок - Массив - Массив, содержащий идентификаторов выделенных строк.
//
// Возвращаемое значение:
//  ДокументСсылка.ЗаданиеНаПеревозку - созданный документ.
&НаСервере
Функция КР_ВыполнитьПереносСтрокВНовыйДокумент(МассивИдентификаторовВыделенныхСтрок)
	
	ДокОбъект						= РеквизитФормыВЗначение("Объект");
	НовоеЗаданиеНаПеревозку			= ДокОбъект.Скопировать();
	НовоеЗаданиеНаПеревозку.Дата 	= ТекущаяДатаСеанса();
	
	НомерСтроки = МассивИдентификаторовВыделенныхСтрок.Количество();
	Пока НомерСтроки > 0 Цикл
		ТекущийИдентификатор	= МассивИдентификаторовВыделенныхСтрок[НомерСтроки - 1];
		ТекущаяСтрока			= Объект.Маршрут.НайтиПоИдентификатору(ТекущийИдентификатор);
		НоваяСтрока				= НовоеЗаданиеНаПеревозку.Маршрут.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Объект.Маршрут.Удалить(ТекущаяСтрока);
		НомерСтроки				= НомерСтроки - 1;
	КонецЦикла;
	
	НовоеЗаданиеНаПеревозку.Записать();
	
	Возврат НовоеЗаданиеНаПеревозку.Ссылка;
	
КонецФункции // >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
&НаСервере
Процедура КР_УстановитьВидимостьКомандыПеренестиМаршруты()
	
	Элементы.КР_ПеренестиМаршруты.Доступность = (Объект.Статус = Перечисления.СтатусыЗаданийНаПеревозку.Формируется);
	
КонецПроцедуры // >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
// Функция содержащая текст запроса для обновления данных маршрута
//
// Возвращаемое значение:
//  Строка - Текст запроса.
&НаСервере
Функция КР_ТекстЗапросаОбновлениеДанныхСтрокиМаршрута()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДанныеДляОбработки.КР_ПолучательОтправитель КАК Справочник.Склады) КАК Склад,
	|	ДанныеДляОбработки.КР_ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаТуда) КАК ПеревозкаТуда,
	|	ДанныеДляОбработки.НомерСтроки КАК НомерСтроки,
	|	&ДеньОтгрузки КАК ДеньОтгрузки
	|ПОМЕСТИТЬ ДанныеМаршрутов
	|ИЗ
	|	&ДанныеДляОбработки КАК ДанныеДляОбработки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	ДеньОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	График.Склад КАК Склад,
	|	ДОБАВИТЬКДАТЕ(&ДатаСреза, ДЕНЬ, График.ДнейВПути - 1) КАК ДатаС,
	// << 02.10.2023, Петухов А.В., Фактор, #3130
	|	График.ВремяОтгрузки КАК ВремяПодачиТранспорта,
	// >> 02.10.2023, Петухов А.В., Фактор, #3130
	|	График.РежимРазгрузкиНачало КАК ВремяС,
	|	График.РежимРазгрузкиОкончание КАК ВремяПо,
	|	График.Маршрут КАК Маршрут,
	|	График.МаршрутОбратно КАК МаршрутОбратно,
	|	График.ПРР КАК ПРР,
	|	График.ДополнительнаяИнформация КАК ДополнительнаяИнформация
	|ПОМЕСТИТЬ График
	|ИЗ
	|	РегистрСведений.КР_ГрафикОтгрузкиИПриемкиТМЦ.СрезПоследних(
	|			&ДатаСреза,
	|			(Склад, ДеньОтгрузки) В
	|				(ВЫБРАТЬ
	|					ДанныеМаршрутов.Склад КАК Склад,
	|					ДанныеМаршрутов.ДеньОтгрузки КАК ДеньОтгрузки
	|				ИЗ
	|					ДанныеМаршрутов)) КАК График
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	График.ДатаС КАК ДатаС,
	// << 02.10.2023, Петухов А.В., Фактор, #3130
	|	График.ВремяПодачиТранспорта КАК ВремяПодачиТранспорта,
	// >> 02.10.2023, Петухов А.В., Фактор, #3130
	|	График.ВремяС КАК ВремяС,
	|	График.ВремяПо КАК ВремяПо,
	|	ВЫБОР
	|		КОГДА ДанныеМаршрутов.ПеревозкаТуда
	|			ТОГДА График.Маршрут
	|		ИНАЧЕ График.МаршрутОбратно
	|	КОНЕЦ КАК Маршрут,
	|	ДанныеМаршрутов.НомерСтроки КАК НомерСтроки,
	|	ДанныеМаршрутов.Склад КАК Склад,
	|	График.ПРР КАК ПРР,
	|	График.ДополнительнаяИнформация КАК ДополнительнаяИнформация
	|ИЗ
	|	ДанныеМаршрутов КАК ДанныеМаршрутов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ График КАК График
	|		ПО ДанныеМаршрутов.Склад = График.Склад";
	
КонецФункции // >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 01.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаСервере
Процедура КР_РассчитатьПоТарифуНаСервере()
	
	Модифицированность = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Доставки"            , Объект.Маршрут.Выгрузить(Новый Структура("КР_Подтверждено", Ложь)));
	Запрос.УстановитьПараметр("Экспедитор"          , Объект.КР_ЭкспедиторКонтрагент);
	Запрос.УстановитьПараметр("ЗонаДоставкиСегменты", КР_ДополнительныеНастройкиПовтИсп.Значение("ЗоныДоставкиСегменты"));
	Запрос.УстановитьПараметр("ЗонаДоставкиРегионы" , КР_ДополнительныеНастройкиПовтИсп.Значение("ЗоныДоставкиРегионы"));
	Запрос.УстановитьПараметр("ВидТарифаПаллеты"    , Перечисления.КР_ВидыТарифовПеревозчиков.Паллеты);
	Запрос.УстановитьПараметр("ВидТарифаОбъем"      , Перечисления.КР_ВидыТарифовПеревозчиков.ОбъемВМ3);
	Запрос.УстановитьПараметр("ВидТарифаМаршрут"    , Перечисления.КР_ВидыТарифовПеревозчиков.Маршрут);
	
	// << 31.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-2055     
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда 
		Запрос.УстановитьПараметр("ДатаДокумента", ТекущаяДатаСеанса());    
	Иначе	
		Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
   	КонецЕсли;
	// >> 31.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-2055

	// << 24.05.2024 Петухов А.В., Фактор, #4119
	Если Объект.КР_ЗонаДоставки = КР_ДополнительныеНастройкиПовтИсп.Значение("ЗоныДоставкиСегменты") Тогда // МРС
		ДелитьСтоимостьОбратнойПеревозки = Истина;
	Иначе
		ДелитьСтоимостьОбратнойПеревозки = Ложь;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДелитьСтоимостьОбратнойПеревозки", ДелитьСтоимостьОбратнойПеревозки);    
	// >> 24.05.2024 Петухов А.В., Фактор, #4119
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Экспедитор КАК Экспедитор,
	|	Доставки.НомерСтроки КАК НомерСтроки,
	// << 31.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-2055
	//|	НАЧАЛОПЕРИОДА(Доставки.ВремяС, ДЕНЬ) КАК ДатаОтправки,
	|	НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ) КАК ДатаОтправки,
	// >> 31.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-2055
	|	Доставки.Объем КАК Объем,
	|	Доставки.КлючСвязи КАК КлючСвязи,
	|	Доставки.КР_КоличествоПаллет КАК КоличествоПаллет,
	|	Доставки.КР_Маршрут КАК Маршрут,
	|	Доставки.КР_ТранспортноеСредство КАК ТранспортноеСредство,
	|	Доставки.КР_ТипЗадания КАК ТипЗадания
	|ПОМЕСТИТЬ врт_Доставки
	|ИЗ
	|	&Доставки КАК Доставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_Доставки.ДатаОтправки КАК ДатаОтправки,
	|	врт_Доставки.Маршрут КАК Маршрут,
	|	врт_Доставки.ТранспортноеСредство КАК ТранспортноеСредство,
	|	врт_Доставки.ТипЗадания КАК ТипЗадания,
	|	СУММА(врт_Доставки.Объем) КАК Объем
	|ПОМЕСТИТЬ врт_ОбъемыПоМаршрутамРегионам
	|ИЗ
	|	врт_Доставки КАК врт_Доставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КР_Маршруты КАК спр_Маршруты
	|		ПО врт_Доставки.Маршрут = спр_Маршруты.Ссылка
	|ГДЕ
	|	спр_Маршруты.ВидТарифа = &ВидТарифаОбъем
	|	И спр_Маршруты.ЗонаДоставки В ИЕРАРХИИ(&ЗонаДоставкиРегионы)
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_Доставки.Маршрут,
	|	врт_Доставки.ДатаОтправки,
	|	врт_Доставки.ТранспортноеСредство,
	|	врт_Доставки.ТипЗадания
	// << 24.05.2024 Петухов А.В., Фактор, #4119
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	врт_Доставки.ДатаОтправки КАК ДатаОтправки,
	|	врт_Доставки.Маршрут КАК Маршрут,
	|	врт_Доставки.ТранспортноеСредство КАК ТранспортноеСредство,
	|	врт_Доставки.ТипЗадания КАК ТипЗадания,
	|	СУММА(врт_Доставки.Объем) КАК Объем
	|ИЗ
	|	врт_Доставки КАК врт_Доставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КР_Маршруты КАК спр_Маршруты
	|		ПО врт_Доставки.Маршрут = спр_Маршруты.Ссылка
	|ГДЕ
	|	&ДелитьСтоимостьОбратнойПеревозки
	|	И врт_Доставки.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаОбратно)
	|СГРУППИРОВАТЬ ПО
	|	врт_Доставки.Маршрут,
	|	врт_Доставки.ДатаОтправки,
	|	врт_Доставки.ТранспортноеСредство,
	|	врт_Доставки.ТипЗадания
	// >> 24.05.2024 Петухов А.В., Фактор, #4119
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_Доставки.Маршрут КАК Маршрут,
	|	врт_Доставки.ТранспортноеСредство КАК ТранспортноеСредство,
	// --> Евлахов Игорь Николаевич (Начало) 27.02.2024
	// Задача #3837
	|	врт_Доставки.ТипЗадания КАК ТипЗадания,
	// <-- Евлахов Игорь Николаевич (Конец) 27.02.2024
	|	МАКСИМУМ(врт_Доставки.КоличествоПаллет) КАК КоличествоПаллет
	|ПОМЕСТИТЬ врт_КоличествоПаллетПоМаршрутам
	|ИЗ
	|	врт_Доставки КАК врт_Доставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КР_Маршруты КАК спр_Маршруты
	|		ПО врт_Доставки.Маршрут = спр_Маршруты.Ссылка
	|ГДЕ
	|	спр_Маршруты.ВидТарифа = &ВидТарифаПаллеты
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_Доставки.Маршрут,
	// --> Евлахов Игорь Николаевич (Начало) 27.02.2024
	// Задача #3837
	|	врт_Доставки.ТипЗадания,
	// <-- Евлахов Игорь Николаевич (Конец) 27.02.2024
	|	врт_Доставки.ТранспортноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_Доставки.Экспедитор КАК Экспедитор,
	|	врт_Доставки.КлючСвязи КАК КлючСвязи,
	|	врт_Доставки.ДатаОтправки КАК ДатаОтправки,
	|	врт_Доставки.Маршрут КАК Маршрут,
	|	врт_Доставки.ТранспортноеСредство КАК ТранспортноеСредство,
	|	врт_Доставки.ТипЗадания КАК ТипЗадания,
	|	спр_Маршруты.ВидТарифа КАК ВидТарифа,
	|	ВЫБОР
	// << 24.05.2024 Петухов А.В., Фактор, #4119
	|		КОГДА ИСТИНА
	|			И спр_Маршруты.ВидТарифа = &ВидТарифаМаршрут
	|			И &ДелитьСтоимостьОбратнойПеревозки
	|			И врт_Доставки.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаОбратно)
	|			ТОГДА ЕСТЬNULL(врт_ОбъемыПоМаршрутамРегионам.Объем, врт_Доставки.Объем)
	// >> 24.05.2024 Петухов А.В., Фактор, #4119
	|		КОГДА спр_Маршруты.ВидТарифа = &ВидТарифаОбъем
	|				И спр_Маршруты.ЗонаДоставки В ИЕРАРХИИ (&ЗонаДоставкиСегменты)
	|			ТОГДА врт_Доставки.Объем
	|		КОГДА спр_Маршруты.ВидТарифа = &ВидТарифаОбъем
	|				И спр_Маршруты.ЗонаДоставки В ИЕРАРХИИ (&ЗонаДоставкиРегионы)
	|			ТОГДА ЕСТЬNULL(врт_ОбъемыПоМаршрутамРегионам.Объем, врт_Доставки.Объем)
	|		КОГДА спр_Маршруты.ВидТарифа = &ВидТарифаМаршрут
	|			ТОГДА врт_Доставки.Объем
	|		КОГДА спр_Маршруты.ВидТарифа = &ВидТарифаПаллеты
	|			ТОГДА ЕСТЬNULL(врт_КоличествоПаллетПоМаршрутам.КоличествоПаллет, врт_Доставки.КоличествоПаллет)
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПоказательТарифа
	|ПОМЕСТИТЬ врт_ПоказателиТарифов
	|ИЗ
	|	врт_Доставки КАК врт_Доставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_ОбъемыПоМаршрутамРегионам КАК врт_ОбъемыПоМаршрутамРегионам
	|		ПО врт_Доставки.ДатаОтправки = врт_ОбъемыПоМаршрутамРегионам.ДатаОтправки
	|			И врт_Доставки.Маршрут = врт_ОбъемыПоМаршрутамРегионам.Маршрут
	|			И врт_Доставки.ТранспортноеСредство = врт_ОбъемыПоМаршрутамРегионам.ТранспортноеСредство
	|			И врт_Доставки.ТипЗадания = врт_ОбъемыПоМаршрутамРегионам.ТипЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КР_Маршруты КАК спр_Маршруты
	|		ПО врт_Доставки.Маршрут = спр_Маршруты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_КоличествоПаллетПоМаршрутам КАК врт_КоличествоПаллетПоМаршрутам
	|		ПО врт_Доставки.Маршрут = врт_КоличествоПаллетПоМаршрутам.Маршрут
	|			И врт_Доставки.ТранспортноеСредство = врт_КоличествоПаллетПоМаршрутам.ТранспортноеСредство
	// --> Евлахов Игорь Николаевич (Начало) 27.02.2024
	// Задача #3837
	|			И врт_Доставки.ТипЗадания = врт_КоличествоПаллетПоМаршрутам.ТипЗадания 
	// <-- Евлахов Игорь Николаевич (Конец) 27.02.2024
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врт_ОбъемыПоМаршрутамРегионам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врт_КоличествоПаллетПоМаршрутам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// << 19.02.2024 Петухов А.В., Фактор, #3732
	//|ВЫБРАТЬ
	//|	врт_ТарифыПеревозчиковСрез.Период КАК Период,
	//|	врт_ТарифыПеревозчиковСрез.Экспедитор КАК Экспедитор,
	//|	врт_ТарифыПеревозчиковСрез.Маршрут КАК Маршрут,
	//|	врт_ТарифыПеревозчиковСрез.ВидТарифа КАК ВидТарифа,
	//|	врт_ТарифыПеревозчиковСрез.Объем КАК Объем,
	//|	врт_ТарифыПеревозчиковСрез.Объем КАК Объем,
	//|	ЕСТЬNULL(врт_Варианты.МинимальноеЗначение, 0) КАК МинимальноеЗначение,
	//|	ЕСТЬNULL(врт_Варианты.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение
	//|ПОМЕСТИТЬ врт_ТарифыПеревозчиков
	//|ИЗ
	//|	врт_ТарифыПеревозчиковСрез КАК врт_ТарифыПеревозчиковСрез
	//|		ЛЕВОЕ СОЕДИНЕНИЕ врт_Варианты КАК врт_Варианты
	//|		ПО (ИСТИНА)
	//|			И врт_Варианты.Экспедитор = врт_ТарифыПеревозчиковСрез.Экспедитор
	//|			И врт_Варианты.Маршрут = врт_ТарифыПеревозчиковСрез.Маршрут
	//|			И врт_Варианты.ВидТарифа = врт_ТарифыПеревозчиковСрез.ВидТарифа
	//|			И врт_Варианты.Объем = врт_ТарифыПеревозчиковСрез.Объем
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	врт_ПоказателиТарифов.КлючСвязи КАК КлючСвязи,
	//|	врт_ПоказателиТарифов.Маршрут КАК Маршрут,
	//|	врт_ПоказателиТарифов.ТранспортноеСредство КАК ТранспортноеСредство,
	//|	врт_ПоказателиТарифов.Экспедитор КАК Экспедитор,
	//|	врт_ПоказателиТарифов.ТипЗадания КАК ТипЗадания,
	//|	врт_ПоказателиТарифов.ВидТарифа КАК ВидТарифа,
	//|	рс_ТарифыПеревозчиков.Период КАК ПериодТарифа,
	//|	рс_ТарифыПеревозчиков.Объем КАК ОбъемТарифа,
	//|	рс_ТарифыПеревозчиков.Объем КАК ОбъемТарифа
	//|ПОМЕСТИТЬ врт_ПериодыТарифа
	//|ИЗ
	//|	врт_ПоказателиТарифов КАК врт_ПоказателиТарифов
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КР_ТарифыПеревозчиков КАК рс_ТарифыПеревозчиков
	//|		ПО врт_ПоказателиТарифов.ДатаОтправки >= рс_ТарифыПеревозчиков.Период
	//|			И врт_ПоказателиТарифов.Экспедитор = рс_ТарифыПеревозчиков.Экспедитор
	//|			И врт_ПоказателиТарифов.Маршрут = рс_ТарифыПеревозчиков.Маршрут
	//|			И врт_ПоказателиТарифов.ВидТарифа = рс_ТарифыПеревозчиков.ВидТарифа
	//|			И (врт_ПоказателиТарифов.ПоказательТарифа МЕЖДУ рс_ТарифыПеревозчиков.Объем.МинимальноеЗначение И рс_ТарифыПеревозчиков.Объем.МаксимальноеЗначение)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВложенныйЗапрос.КлючСвязи КАК КлючСвязи,
	//|	ВложенныйЗапрос.КР_СтавкаНДС КАК КР_СтавкаНДС,
	//|	ВложенныйЗапрос.КР_ТарифСтавка КАК КР_ТарифСтавка,
	//|	ВложенныйЗапрос.КР_ПРРТариф КАК КР_ПРРТариф,
	//|	ВложенныйЗапрос.КР_ТарифСтавка * ВложенныйЗапрос.ПоказательТарифа КАК КР_ТарифСтоимость
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		врт_Доставки.КлючСвязи КАК КлючСвязи,
	//|		ВЫБОР
	//|			КОГДА врт_Доставки.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаТуда)
	//|				ТОГДА ЕСТЬNULL(рс_ТарифыПеревозчиков.ТарифТуда, 0)
	//|			КОГДА врт_Доставки.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаОбратно)
	//|				ТОГДА ЕСТЬNULL(рс_ТарифыПеревозчиков.ТарифОбратно, 0)
	//|			КОГДА врт_Доставки.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаПоГороду)
	//|				ТОГДА ЕСТЬNULL(рс_ТарифыПеревозчиков.ТарифПоГороду, 0)
	//|			ИНАЧЕ 0
	//|		КОНЕЦ КАК КР_ТарифСтавка,
	//|		ЕСТЬNULL(рс_ТарифыПеревозчиков.ТарифПРР, 0) КАК КР_ПРРТариф,
	//|		ЕСТЬNULL(рс_ТарифыПеревозчиков.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК КР_СтавкаНДС,
	//|		ВЫБОР
	//|			КОГДА врт_ПоказателиТарифов.ВидТарифа = &ВидТарифаОбъем
	//|				ТОГДА врт_Доставки.Объем
	//|			ИНАЧЕ 1
	//|		КОНЕЦ КАК ПоказательТарифа
	//|	ИЗ
	//|		врт_Доставки КАК врт_Доставки
	//|			ЛЕВОЕ СОЕДИНЕНИЕ врт_ПериодыТарифа КАК врт_ПериодыТарифа
	//|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КР_ТарифыПеревозчиков КАК рс_ТарифыПеревозчиков
	//|				ПО врт_ПериодыТарифа.ПериодТарифа = рс_ТарифыПеревозчиков.Период
	//|					И врт_ПериодыТарифа.Экспедитор = рс_ТарифыПеревозчиков.Экспедитор
	//|					И врт_ПериодыТарифа.Маршрут = рс_ТарифыПеревозчиков.Маршрут
	//|					И врт_ПериодыТарифа.ВидТарифа = рс_ТарифыПеревозчиков.ВидТарифа
	//|					И врт_ПериодыТарифа.ОбъемТарифа = рс_ТарифыПеревозчиков.Объем
	//|			ПО врт_Доставки.КлючСвязи = врт_ПериодыТарифа.КлючСвязи
	//|			ЛЕВОЕ СОЕДИНЕНИЕ врт_ПоказателиТарифов КАК врт_ПоказателиТарифов
	//|			ПО врт_Доставки.КлючСвязи = врт_ПоказателиТарифов.КлючСвязи) КАК ВложенныйЗапрос";
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врт_ПоказателиТарифов.Экспедитор КАК Экспедитор,
	|	врт_ПоказателиТарифов.Маршрут КАК Маршрут,
	|	врт_ПоказателиТарифов.ВидТарифа КАК ВидТарифа,
	|	КР_КлассификацияОбъемовГруза.Ссылка КАК Объем,
	|	КР_КлассификацияОбъемовГруза.МинимальноеЗначение КАК МинимальноеЗначение,
	|	КР_КлассификацияОбъемовГруза.МаксимальноеЗначение КАК МаксимальноеЗначение
	|ПОМЕСТИТЬ врт_Варианты
	|ИЗ
	|	врт_ПоказателиТарифов КАК врт_ПоказателиТарифов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КР_КлассификацияОбъемовГруза КАК КР_КлассификацияОбъемовГруза
	|		ПО (КР_КлассификацияОбъемовГруза.МинимальноеЗначение <= врт_ПоказателиТарифов.ПоказательТарифа)
	|			И (КР_КлассификацияОбъемовГруза.МаксимальноеЗначение >= врт_ПоказателиТарифов.ПоказательТарифа)
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	рс_ТарифыПеревозчиков.Экспедитор КАК Экспедитор,
	|	рс_ТарифыПеревозчиков.Маршрут КАК Маршрут,
	|	рс_ТарифыПеревозчиков.ВидТарифа КАК ВидТарифа,
	|	рс_ТарифыПеревозчиков.Объем КАК Объем,
	|	рс_ТарифыПеревозчиков.ТарифТуда КАК ТарифТуда,
	|	рс_ТарифыПеревозчиков.ТарифОбратно КАК ТарифОбратно,
	|	рс_ТарифыПеревозчиков.ТарифПоГороду КАК ТарифПоГороду,
	|	рс_ТарифыПеревозчиков.ТарифПРР КАК ТарифПРР,
	|	рс_ТарифыПеревозчиков.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ врт_ТарифыПеревозчиковСрез
	|ИЗ
	|	РегистрСведений.КР_ТарифыПеревозчиков.СрезПоследних(
	|			НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ),
	|			(Экспедитор, Маршрут, ВидТарифа, Объем) В
	|				(ВЫБРАТЬ
	|					врт_Варианты.Экспедитор,
	|					врт_Варианты.Маршрут,
	|					врт_Варианты.ВидТарифа,
	|					врт_Варианты.Объем
	|				ИЗ
	|					врт_Варианты КАК врт_Варианты)) КАК рс_ТарифыПеревозчиков
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ТарифыПеревозчиковСрез.Экспедитор КАК Экспедитор,
	|	врт_ТарифыПеревозчиковСрез.Маршрут КАК Маршрут,
	|	врт_ТарифыПеревозчиковСрез.ВидТарифа КАК ВидТарифа,
	|	врт_ТарифыПеревозчиковСрез.ТарифТуда КАК ТарифТуда,
	|	врт_ТарифыПеревозчиковСрез.ТарифОбратно КАК ТарифОбратно,
	|	врт_ТарифыПеревозчиковСрез.ТарифПоГороду КАК ТарифПоГороду,
	|	врт_ТарифыПеревозчиковСрез.ТарифПРР КАК ТарифПРР,
	|	врт_ТарифыПеревозчиковСрез.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(врт_Варианты.МинимальноеЗначение, 0) КАК МинимальноеЗначение,
	|	ЕСТЬNULL(врт_Варианты.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение
	|ПОМЕСТИТЬ врт_ТарифыПеревозчиков
	|ИЗ
	|	врт_ТарифыПеревозчиковСрез КАК врт_ТарифыПеревозчиковСрез
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_Варианты КАК врт_Варианты
	|		ПО (ИСТИНА)
	|			И (врт_Варианты.Экспедитор = врт_ТарифыПеревозчиковСрез.Экспедитор)
	|			И (врт_Варианты.Маршрут = врт_ТарифыПеревозчиковСрез.Маршрут)
	|			И (врт_Варианты.ВидТарифа = врт_ТарифыПеревозчиковСрез.ВидТарифа)
	|			И (врт_Варианты.Объем = врт_ТарифыПеревозчиковСрез.Объем)
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врт_Варианты
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врт_ТарифыПеревозчиковСрез
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_Доставки.КлючСвязи КАК КлючСвязи,
	|	врт_Доставки.Экспедитор КАК Экспедитор,
	|	врт_Доставки.Маршрут КАК Маршрут,
	|	врт_Доставки.ТипЗадания КАК ТипЗадания,
	|	врт_ПоказателиТарифов.ВидТарифа КАК ВидТарифа,
	|	врт_ПоказателиТарифов.ПоказательТарифа КАК ОбъемСумма,
	|	ВЫБОР
	|		КОГДА врт_ПоказателиТарифов.ВидТарифа = &ВидТарифаОбъем
	|			ТОГДА врт_Доставки.Объем
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПоказательТарифа
	|ПОМЕСТИТЬ врт_ДоставкиДоп
	|ИЗ
	|	врт_Доставки КАК врт_Доставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врт_ПоказателиТарифов КАК врт_ПоказателиТарифов
	|		ПО врт_Доставки.КлючСвязи = врт_ПоказателиТарифов.КлючСвязи
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ДоставкиДоп.КлючСвязи КАК КлючСвязи,
	|	ЕСТЬNULL(врт_ТарифыПеревозчиков.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК КР_СтавкаНДС,
	|	ВЫБОР
	|		КОГДА врт_ДоставкиДоп.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаТуда)
	|			ТОГДА ЕСТЬNULL(врт_ТарифыПеревозчиков.ТарифТуда, 0)
	|		КОГДА врт_ДоставкиДоп.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаОбратно)
	|			ТОГДА ЕСТЬNULL(врт_ТарифыПеревозчиков.ТарифОбратно, 0)
	|		КОГДА врт_ДоставкиДоп.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаПоГороду)
	|			ТОГДА ЕСТЬNULL(врт_ТарифыПеревозчиков.ТарифПоГороду, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КР_ТарифСтавка,
	|	ЕСТЬNULL(врт_ТарифыПеревозчиков.ТарифПРР, 0) КАК КР_ПРРТариф,
	|	ВЫБОР
	|		КОГДА врт_ДоставкиДоп.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаТуда)
	|			ТОГДА ЕСТЬNULL(врт_ТарифыПеревозчиков.ТарифТуда * врт_ДоставкиДоп.ПоказательТарифа, 0)
	|		КОГДА врт_ДоставкиДоп.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаОбратно)
	|			ТОГДА ЕСТЬNULL(врт_ТарифыПеревозчиков.ТарифОбратно * врт_ДоставкиДоп.ПоказательТарифа, 0)
	|		КОГДА врт_ДоставкиДоп.ТипЗадания = ЗНАЧЕНИЕ(Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаПоГороду)
	|			ТОГДА ЕСТЬNULL(врт_ТарифыПеревозчиков.ТарифПоГороду * врт_ДоставкиДоп.ПоказательТарифа, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КР_ТарифСтоимость
	|ИЗ
	|	врт_ДоставкиДоп КАК врт_ДоставкиДоп
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_ТарифыПеревозчиков КАК врт_ТарифыПеревозчиков
	|		ПО (ИСТИНА)
	|			И врт_ДоставкиДоп.Экспедитор = врт_ТарифыПеревозчиков.Экспедитор
	|			И врт_ДоставкиДоп.Маршрут = врт_ТарифыПеревозчиков.Маршрут
	|			И врт_ДоставкиДоп.ВидТарифа = врт_ТарифыПеревозчиков.ВидТарифа
	|			И (врт_ДоставкиДоп.ОбъемСумма МЕЖДУ врт_ТарифыПеревозчиков.МинимальноеЗначение И врт_ТарифыПеревозчиков.МаксимальноеЗначение)
	// >> 19.02.2024 Петухов А.В., Фактор, #3732
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	// << 20.02.2024 Петухов А.В., Фактор, #3738
	сткРеквизитыСкладаШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "КР_ВидСклада, БизнесРегион");
	// >> 20.02.2024 Петухов А.В., Фактор, #3738
	Пока Выборка.Следующий() Цикл
		ТекСтроки = Объект.Маршрут.НайтиСтроки(Новый Структура("КлючСвязи", Выборка.КлючСвязи));
		Для Каждого ТекСтрока Из ТекСтроки Цикл
			Если Не ЗначениеЗаполнено(ТекСтрока.ВремяС) Тогда
				ПолеДатаДоставки = "Объект." +
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Маршрут", ТекСтрока.НомерСтроки, "ВремяС");
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не указана дата доставки. Тарифы не рассчитаны.'"), Объект.Ссылка, ПолеДатаДоставки);
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка);
			
			// << 24.05.2024 Петухов А.В., Фактор, #4119
			Если ДелитьСтоимостьОбратнойПеревозки И ТекСтрока.КР_ТипЗадания = Перечисления.КР_ТипЗаданияНаПеревозку.ПеревозкаОбратно Тогда
				сткОтбор = Новый Структура("КР_ТипЗадания,КР_Маршрут,ВремяС,КР_ТранспортноеСредство,КР_Перевозчик");
				ЗаполнитьЗначенияСвойств(сткОтбор, ТекСтрока);
				мсвСвязанныеСтроки = Объект.Маршрут.НайтиСтроки(сткОтбор);
				Если мсвСвязанныеСтроки.Количество() > 1 Тогда
					СтоимостьПоСтроке = Окр(ТекСтрока.КР_ТарифСтавка/мсвСвязанныеСтроки.Количество(), 2);
					ТекСтрока.КР_ТарифСтоимость = СтоимостьПоСтроке;
					ПотериПриОкруглении = СтоимостьПоСтроке*мсвСвязанныеСтроки.Количество() - ТекСтрока.КР_ТарифСтавка;
					Если ПотериПриОкруглении <> 0 Тогда // Погрешность округления в последнюю строку
						ПоследняяСтрока = мсвСвязанныеСтроки.Получить(мсвСвязанныеСтроки.Количество()-1);
						Если Объект.Маршрут.Индекс(ТекСтрока) = Объект.Маршрут.Индекс(ПоследняяСтрока) Тогда
							ТекСтрока.КР_ТарифСтоимость = ТекСтрока.КР_ТарифСтоимость - ПотериПриОкруглении;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// >> 24.05.2024 Петухов А.В., Фактор, #4119
			// << 20.02.2024 Петухов А.В., Фактор, #3738
			Если сткРеквизитыСкладаШапки.КР_ВидСклада = Перечисления.КР_ВидыСкладов.Магазин
				И ТипЗнч(ТекСтрока.КР_ПолучательОтправитель) = Тип("СправочникСсылка.Склады") Тогда
				сткРеквизитыСкладаСтроки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтрока.КР_ПолучательОтправитель, "КР_ВидСклада, БизнесРегион");
				Если сткРеквизитыСкладаСтроки.КР_ВидСклада = Перечисления.КР_ВидыСкладов.Магазин
					И сткРеквизитыСкладаСтроки.БизнесРегион <> сткРеквизитыСкладаШапки.БизнесРегион Тогда
					ТекСтрока.КР_ПРРТариф = ТекСтрока.КР_ПРРТариф*2;
				КонецЕсли;
			КонецЕсли;
			// >> 20.02.2024 Петухов А.В., Фактор, #3738
			ТекСтрока.КР_ПРРСтоимость = ?(ТекСтрока.КР_ПРРНаличие, ТекСтрока.КР_ПРРТариф * ТекСтрока.Объем *
				?(ТекСтрока.КР_ТипЗадания = Перечисления.КР_ТипЗаданияНаПеревозку.ПеревозкаПоГороду, 2, 1), 0);
			ТекСтрока.КР_СтоимостьДоставки = ТекСтрока.КР_ТарифСтоимость + 
				ТекСтрока.КР_ДополнительноСтоимость + ТекСтрока.КР_ПРРСтоимость;
			ТекСтрока.КР_СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
									ТекСтрока.КР_СтоимостьДоставки, ТекСтрока.КР_СтавкаНДС, Ложь);
			ТекСтрока.КР_ТарифСтоимостьСНДС = ТекСтрока.КР_ТарифСтоимость +
				УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.КР_ТарифСтоимость, ТекСтрока.КР_СтавкаНДС, Ложь);
			ТекСтрока.КР_ПРРСтоимостьСНДС = ТекСтрока.КР_ПРРСтоимость +
				УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.КР_ПРРСтоимость, ТекСтрока.КР_СтавкаНДС, Ложь);
			ТекСтрока.КР_ОбщаяСтоимостьДоставкиСНДС = ТекСтрока.КР_СтоимостьДоставки + ТекСтрока.КР_СуммаНДС;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // >> 01.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 28.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1300
&НаСервере
Процедура КР_ОбновитьПоФактическимДаннымОтгрузкиНаСервере()
	
	НеподтвержденныеПеревозки = Объект.Маршрут.НайтиСтроки(
		Новый Структура("КР_Подтверждено", Ложь));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", Объект.Ссылка);
	Запрос.УстановитьПараметр("КлючиСвязи",
		ОбщегоНазначения.ВыгрузитьКолонку(НеподтвержденныеПеревозки, "КлючСвязи"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаданияНаПеревозку.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СУММА(ЕСТЬNULL(ТранспортнаяНакладная.МассаБрутто, 0)) КАК Вес,
	|	СУММА(ЕСТЬNULL(ТранспортнаяНакладная.КР_ОбъемГруза, 0)) КАК Объем,
	|	НЕ ТранспортнаяНакладная.Ссылка ЕСТЬ NULL КАК КР_Отгружено,
	|	ЕСТЬNULL(ТранспортнаяНакладная.КР_ДатаДоставкиФакт, ДАТАВРЕМЯ(1, 1, 1)) КАК КР_ФактическаяДатаДоставки
	|ИЗ
	|	РегистрНакопления.КР_ЗаданияНаПеревозку КАК ЗаданияНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
	|		ПО ЗаданияНаПеревозку.Регистратор = ТранспортнаяНакладная.Ссылка
	|ГДЕ
	|	ЗаданияНаПеревозку.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	|	И ЗаданияНаПеревозку.ИдентификаторСтроки В(&КлючиСвязи)
	|	И ЗаданияНаПеревозку.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданияНаПеревозку.ИдентификаторСтроки,
	|	ЕСТЬNULL(ТранспортнаяНакладная.КР_ДатаДоставкиФакт, ДАТАВРЕМЯ(1, 1, 1)),
	|	НЕ ТранспортнаяНакладная.Ссылка ЕСТЬ NULL";
	
	ФактДанные = Запрос.Выполнить().Выгрузить();
	Для Каждого Перевозка Из НеподтвержденныеПеревозки Цикл
		ТекФактДанные = ФактДанные.Найти(Перевозка.КлючСвязи, "ИдентификаторСтроки");
		Если ТекФактДанные = Неопределено Тогда
			Перевозка.КР_Отгружено = Ложь;
		Иначе
			ЗаполнитьЗначенияСвойств(Перевозка, ТекФактДанные);
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры // >> 28.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1300

// << 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаСервере
Процедура КР_ПодтвердитьВсеЗатратыПоСчетуНаСервере(ПараметрыОтбораСтрок)
	
	нСтроки = Объект.Маршрут.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого нСтрока Из нСтроки Цикл
		нСтрока.КР_Подтверждено = Истина;
	КонецЦикла;
	
КонецПроцедуры // >> 31.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
&НаСервере
Процедура КР_ЗаполнитьРеквизитыМаршрутВремяСПо()
	
	Для Каждого СтрокаМаршрут Из Объект.Маршрут Цикл
		СтрокаМаршрут.ВремяСБезДаты		= ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаМаршрут.ВремяС);
		СтрокаМаршрут.ВремяПоБезДаты	= ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаМаршрут.ВремяПо);
	КонецЦикла;
	
КонецПроцедуры // >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 20.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаКлиенте
Процедура КР_МаршрутОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат = ТекущиеДанные.КР_Маршрут Тогда
		ТекущиеДанные.КР_Маршрут = Результат;
		КР_МаршрутПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры // >> 20.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 27.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаСервере
Процедура КР_ПриИзмененииСкладаСерверДополнительно()
	
	ТипЗначения = ТипЗнч(Объект.Склад);
	Элементы.Склад.ОграничениеТипа = Новый ОписаниеТипов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения));
	
КонецПроцедуры // >> 27.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 13.01.2023, Федоров Д.Е., КРОК, Jira№ A2105505-909
&НаКлиенте
Процедура КР_ТипЗаданияПриИзменении(Элемент)
	
	КР_ЗаполнитьЗависимыеРеквизитыПолучательОтправительТипЗадания(Элемент);
	
КонецПроцедуры // >> 13.01.2023, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 13.01.2023, Федоров Д.Е., КРОК, Jira№ A2105505-909
&НаКлиенте
Процедура КР_ЗаполнитьЗависимыеРеквизитыПолучательОтправительТипЗадания(Элемент)
	
	// Алгоритм процедуры перенесен из "КР_ПолучательОтправительПриИзменении".
	// Выполняется при вызове из "КР_ПолучательОтправительПриИзменении" и "КР_ТипЗаданияПриИзменении".
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	ПолучательОтправитель = ТекущиеДанные.КР_ПолучательОтправитель;
	// << 13.01.2023, Федоров Д.Е., КРОК, Jira№ A2105505-909
	Если Не ЗначениеЗаполнено(ТекущиеДанные.КР_ТипЗадания) Тогда
		ТекущиеДанные.КР_ТипЗадания = ПредопределенноеЗначение("Перечисление.КР_ТипЗаданияНаПеревозку.ПеревозкаТуда");
	КонецЕсли;
	// >> 13.01.2023, Федоров Д.Е., КРОК, Jira№ A2105505-909
	
	Если ТипЗнч(ПолучательОтправитель) = Тип("СправочникСсылка.Партнеры") Тогда
		Адрес = КР_ПолучитьАдресПартнера(ПолучательОтправитель);
	ИначеЕсли ТипЗнч(ПолучательОтправитель) = Тип("СправочникСсылка.Склады") Тогда
		// << 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
		Если ЗначениеЗаполнено(ПолучательОтправитель) Тогда
			МассивИндексовСтрок = Новый Массив;
			МассивИндексовСтрок.Добавить(Элементы.Маршрут.ТекущаяСтрока);
			КР_ОбновитьДанныеСтрокПоГрафикуОтгрузкиНаСервере(МассивИндексовСтрок);
		КонецЕсли;
		// >> 30.11.2022, Федоров Д.Е., КРОК, Jira№ A2105505-909
		Адрес = КР_ПолучитьАдресСклада(ПолучательОтправитель);
	Иначе
		Адрес = "";
	КонецЕсли;
	
	ТекущиеДанные.Адрес = Адрес;
	
КонецПроцедуры // >> 13.01.2023, Федоров Д.Е., КРОК, Jira№ A2105505-909

// << 17.01.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376
&НаСервереБезКонтекста
Функция КР_ФиксированныеНастройкиОтбора(ЗонаДоставки)
	
	ЭтоГруппаЗон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗонаДоставки, "ЭтоГруппа");
	Если ЭтоГруппаЗон Тогда
		ВидОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
	Иначе
		ВидОтбора = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		КомпоновщикНастроек,
		Новый ПолеКомпоновкиДанных("ЗонаДоставки"),
		ЗонаДоставки,
		ВидОтбора);
		
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции // >> 17.01.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-376

// << 13.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1395
&НаСервере
Процедура КР_ПодтвежденоПриИзмененииНаСервере(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Маршрут.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КР_Подтверждено = Ложь
		И Не Пользователи.РолиДоступны("КР_ОтменаПодтвержденияФактаПеревозки") Тогда
		ТекущиеДанные.КР_Подтверждено = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Недостаточно прав для отмены подтверждения перевозки'"));
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // >> 13.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1395

// #4451.. Фомин Д.Ю. 29.07.2024.
&НаСервереБезКонтекста
Функция злПолучитьСписокФизЛиц(Текст)
	
	СписокФизЛиц = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.ПометкаУдаления = ЛОЖЬ
	               |	И ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	               |	И ФизическиеЛица.Наименование ПОДОБНО &Наименование
	               |	И ФизическиеЛица.КР_ЭтоВодитель";
	Запрос.УстановитьПараметр("Наименование", Текст + "%");					   
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		СписокФизЛиц.Добавить(Результат.Ссылка);
	КонецЦикла;
	
	Возврат СписокФизЛиц;
	
КонецФункции
// ..#4451

#КонецОбласти

#КонецОбласти
