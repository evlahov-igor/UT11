
////////////////////////////////////////////////////
//// Модуль формы "КР_ЗагрузкаЦенИзExcel" документа "УстановкаЦенНоменклатуры"
//// Создан: 03.03.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1048
//// Разработка по ФДР С31.011, Обработка Загрузка цен номенклатуры

#Область ОписаниеПеременных

&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВидыЦен") Тогда
		СписокВидовЦен.ЗагрузитьЗначения(Параметры.ВидыЦен);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен список видов цен'"),,,, Отказ);
	КонецЕсли;
	
	СформироватьШаблонВводаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПодтверждениеЗакрытияФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ Или (ПодтверждениеЗакрытияФормы <> Истина);
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = НСтр("ru = 'Введенные данные не будут записаны.'");
		Возврат;
	КонецЕсли;
		
	Если Отказ Тогда
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Введенные данные не будут записаны. Закрыть форму?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ТаблицаРезультат.Номенклатура");
	ПроверяемыеРеквизиты.Добавить("ТаблицаРезультат.ВидЦены");
	// << 19.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2575
	//ПроверяемыеРеквизиты.Добавить("ТаблицаРезультат.Цена");
	// >> 19.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2575
	
	Если ВариантПоиска = 1 И ВариантУстановкиЦен = 1 Тогда
		ПроверяемыеРеквизиты.Добавить("ТаблицаРезультат.Характеристика");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийЭлементовФормы

&НаКлиенте
Процедура ВариантПоискаПриИзменении(Элемент)
	
	Элементы.ВариантУстановкиЦен.Видимость = Булево(ВариантПоиска);
    Элементы.ВариантПоискаНоменклатуры.Видимость = Не Булево(ВариантПоиска);
	Элементы.ТаблицаРезультатХарактеристика.Видимость = Булево(ВариантПоиска) И Булево(ВариантУстановкиЦен);
	
	СформироватьШаблонВводаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПоискаНоменклатурыПриИзменении(Элемент)
	
	СформироватьШаблонВводаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантУстановкиЦенПриИзменении(Элемент)
	
	Элементы.ТаблицаРезультатХарактеристика.Видимость = Булево(ВариантПоиска) И Булево(ВариантУстановкиЦен);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводДанныхПриИзменении(Элемент)
	
	ПодтверждениеЗакрытияФормы = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	ПереходКСледующемуШагу();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ПереходКПредыдущемуШагу();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		Закрыть();
	Иначе 
		ПодтверждениеЗакрытияФормы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьШаблонВводаДанных()
	
	ВводДанных.Очистить();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УстановкаЦенНоменклатуры.КР_ЗагрузкаЦен");
	
	Если ВариантПоиска = 1 Тогда
		ИмяОбласти = "Штрихкод";
	Иначе
		Если ВариантПоискаНоменклатуры = 1 Тогда
			ИмяОбласти = "Артикул";
		Иначе
			ИмяОбласти = "МодельЦвет";
		КонецЕсли;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	ВводДанных.Вывести(Область);
	
	Для Каждого ЭлементВидЦены Из СписокВидовЦен Цикл
		Область = Макет.ПолучитьОбласть("ВидЦены");
		Область.Параметры.ВидЦены = ЭлементВидЦены.Значение;
		ВводДанных.Присоединить(Область);
	КонецЦикла;
	
	Если ВариантПоискаНоменклатуры = 0 Тогда
		ВводДанных.ФиксацияСлева = 2;
	Иначе
		ВводДанных.ФиксацияСлева = 1;
	КонецЕсли;
	ВводДанных.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКСледующемуШагу()
	
	ОчиститьСообщения();
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводДанных Тогда
		ВыполнитьШагЧтениеДанныхИзШаблонаВвода();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
		ВыполнитьШагПеренестиДанныеВДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКПредыдущемуШагу()
	
	ОчиститьСообщения();
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
		ТаблицаРезультат.Очистить();
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводДанных;
		Элементы.ФормаДалее.Заголовок = НСтр("ru = 'Далее >'");
		Элементы.ФормаНазад.Видимость = Ложь;
		
		Элементы.ВариантПоиска.Доступность = Истина;
		Элементы.ВариантПоискаНоменклатуры.Доступность = Истина;
		Элементы.ВариантУстановкиЦен.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьШагЧтениеДанныхИзШаблонаВвода()
	
	Если Не ДанныеШаблонаПрочитаны() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультат;
	Элементы.ФормаДалее.Заголовок = НСтр("ru = 'Перенести в документ'");
	Элементы.ФормаНазад.Видимость = Истина;
	
	Элементы.ВариантПоиска.Доступность = Ложь;
	Элементы.ВариантПоискаНоменклатуры.Доступность = Ложь;
	Элементы.ВариантУстановкиЦен.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ДанныеШаблонаПрочитаны()
	
	Отказ = Ложь;
	
	ВремТаблица = ТаблицаРезультат.Выгрузить();
	ВремТаблица.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ВремТаблица.Колонки.Добавить("Штрихкод"   , ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ВремТаблица.Колонки.Добавить("Артикул"    , ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ВремТаблица.Колонки.Добавить("Модель"     , ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ВремТаблица.Колонки.Добавить("Цвет"       , ОбщегоНазначения.ОписаниеТипаСтрока(15));
	
	НачальныйНомерКолонки = 2;
	ПоискМодельЦвет = Ложь;
	ПоискАртикул = Ложь;
	ПоискШтрихкод = Ложь;
	
	Если ВариантПоиска = 1 Тогда
		ПоискШтрихкод = Истина;
	Иначе
		Если ВариантПоискаНоменклатуры = 1 Тогда
			ПоискАртикул = Истина;
		Иначе
			ПоискМодельЦвет = Истина;
			НачальныйНомерКолонки = 3;
		КонецЕсли;
	КонецЕсли;
	
	ВсегоСтрок = ВводДанных.ВысотаТаблицы;
	ВсегоКолонок = ВводДанных.ШиринаТаблицы;
	
	Для НомерСтроки = 2 По ВсегоСтрок Цикл
		ТекШтрихкодАртикулМодель = СокрЛП(ВводДанных.Область(НомерСтроки, 1).Текст);
		ТекЦвет = СокрЛП(ВводДанных.Область(НомерСтроки, 2).Текст);
		
		Если ПустаяСтрока(ТекШтрихкодАртикулМодель)
				Или (ПоискМодельЦвет И ПустаяСтрока(ТекЦвет)) Тогда
			ТекстСообщения = НСтр("ru = 'Строка %1. Не указаны данные поиска номенклатуры. Строка не обработана'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		Если ПоискШтрихкод Тогда
			СтруктураПоиска.Вставить("Штрихкод", ТекШтрихкодАртикулМодель);
			ФрагментОшибки = СтрШаблон(НСтр("ru = '[Штрихкод] - ""%1""'"), ТекШтрихкодАртикулМодель);
		ИначеЕсли ПоискАртикул Тогда
			СтруктураПоиска.Вставить("Артикул", ТекШтрихкодАртикулМодель);
			ФрагментОшибки = СтрШаблон(НСтр("ru = '[Артикул] - ""%1""'"), ТекШтрихкодАртикулМодель);
		ИначеЕсли ПоискМодельЦвет Тогда
			СтруктураПоиска.Вставить("Модель", ТекШтрихкодАртикулМодель);
			СтруктураПоиска.Вставить("Цвет", ТекЦвет);
			ФрагментОшибки = СтрШаблон(НСтр("ru = '[Модель Цвет] - ""%1""'"), ТекШтрихкодАртикулМодель + " " + ТекЦвет);
		КонецЕсли;
		
		Если ВремТаблица.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			ТекстСообщения = НСтр("ru = 'Строка %1. Найдены дублирующие данные по ключу %2. Строка не обработана'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, НомерСтроки, ФрагментОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Для НомерКолонки = НачальныйНомерКолонки По ВсегоКолонок Цикл
			нСтрока = ВремТаблица.Добавить();
			нСтрока.НомерСтроки = НомерСтроки;
			нСтрока.ВидЦены = ВводДанных.Область(1, НомерКолонки).Расшифровка;
			нСтрока.Цена = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СокрЛП(ВводДанных.Область(НомерСтроки, НомерКолонки).Текст));
			ЗаполнитьЗначенияСвойств(нСтрока, СтруктураПоиска);
			
			// << 18.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2575
			//Если Не ЗначениеЗаполнено(нСтрока.Цена) Тогда
			//	ТекстСообщения = НСтр("ru = 'Строка %1, колонка %2. Ключ %3. Цена не заполнена или заполнена неверно'");
			//	ТекстСообщения = СтрШаблон(ТекстСообщения, НомерСтроки, НомерКолонки, ФрагментОшибки);
			//	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			//КонецЕсли;
			// >> 18.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2575
		КонецЦикла;
	КонецЦикла;
	
	Возврат Не Отказ И ЗаполнитьТаблицуРезультат(ВремТаблица);
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуРезультат(ТаблицаЗаполнения)
	
	ТаблицаРезультат.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаЗаполнения);
	Запрос.УстановитьПараметр("ВариантПоиска", ВариантПоиска);
	Запрос.УстановитьПараметр("ВариантПоискаНоменклатуры", ВариантПоискаНоменклатуры);
	Запрос.УстановитьПараметр("ВариантУстановкиЦен", ВариантУстановкиЦен);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЦен.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЦен.Штрихкод КАК Штрихкод,
	|	ТаблицаЦен.Артикул КАК Артикул,
	|	ТаблицаЦен.Модель КАК Модель,
	|	ТаблицаЦен.Цвет КАК Цвет,
	|	ТаблицаЦен.ВидЦены КАК ВидЦены,
	|	ТаблицаЦен.Цена КАК Цена
	|ПОМЕСТИТЬ врт_ТаблицаЦен
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ТаблицаЦен.НомерСтроки КАК НомерСтроки,
	|	врт_ТаблицаЦен.Модель КАК Модель,
	|	спр_Цвета.Ссылка КАК Цвет,
	|	врт_ТаблицаЦен.ВидЦены КАК ВидЦены,
	|	врт_ТаблицаЦен.Цена КАК Цена
	|ПОМЕСТИТЬ врт_ТаблицаЦенСЦветами
	|ИЗ
	|	врт_ТаблицаЦен КАК врт_ТаблицаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КР_Цвета КАК спр_Цвета
	|		ПО врт_ТаблицаЦен.Цвет = спр_Цвета.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ТаблицаЦенСЦветами.НомерСтроки КАК НомерСтроки,
	|	спр_Номенклатура.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	врт_ТаблицаЦенСЦветами.ВидЦены КАК ВидЦены,
	|	врт_ТаблицаЦенСЦветами.Цена КАК Цена
	|ИЗ
	|	врт_ТаблицаЦенСЦветами КАК врт_ТаблицаЦенСЦветами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спр_Номенклатура
	|		ПО врт_ТаблицаЦенСЦветами.Модель = спр_Номенклатура.КР_Модель
	|			И врт_ТаблицаЦенСЦветами.Цвет = спр_Номенклатура.КР_Цвет
	|ГДЕ
	|	&ВариантПоиска = 0
	|	И &ВариантПоискаНоменклатуры = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врт_ТаблицаЦен.НомерСтроки,
	|	спр_Номенклатура.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	врт_ТаблицаЦен.ВидЦены,
	|	врт_ТаблицаЦен.Цена
	|ИЗ
	|	врт_ТаблицаЦен КАК врт_ТаблицаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спр_Номенклатура
	|		ПО врт_ТаблицаЦен.Артикул = спр_Номенклатура.Артикул
	|ГДЕ
	|	&ВариантПоиска = 0
	|	И &ВариантПоискаНоменклатуры = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врт_ТаблицаЦен.НомерСтроки,
	|	ЕСТЬNULL(рс_ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	врт_ТаблицаЦен.ВидЦены,
	|	врт_ТаблицаЦен.Цена
	|ИЗ
	|	врт_ТаблицаЦен КАК врт_ТаблицаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК рс_ШтрихкодыНоменклатуры
	|		ПО врт_ТаблицаЦен.Штрихкод = рс_ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	&ВариантПоиска = 1
	|	И &ВариантУстановкиЦен = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врт_ТаблицаЦен.НомерСтроки,
	|	ЕСТЬNULL(рс_ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЕСТЬNULL(рс_ШтрихкодыНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|	врт_ТаблицаЦен.ВидЦены,
	|	врт_ТаблицаЦен.Цена
	|ИЗ
	|	врт_ТаблицаЦен КАК врт_ТаблицаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК рс_ШтрихкодыНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК спр_Характеристики
	|			ПО рс_ШтрихкодыНоменклатуры.Характеристика = спр_Характеристики.Ссылка
	|		ПО врт_ТаблицаЦен.Штрихкод = рс_ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	&ВариантПоиска = 1
	|	И &ВариантУстановкиЦен = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаПроверки = Запрос.Выполнить().Выгрузить();
	
	ШаблонСообщения = НСтр("ru = 'Строка %1. Не найдена %2. Строка не обработана'");
	ШаблонСообщенияДубли = НСтр("ru = 'Строка %1. Найдены дублирующие данные по номенклатуре. Строка не обработана'");
	
	Для Каждого ТекСтрока Из ТаблицаПроверки Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
				ТекСтрока.НомерСтроки, НСтр("ru = 'номенклатура'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Если Булево(ВариантПоиска) И Булево(ВариантУстановкиЦен) Тогда
			Если Не ЗначениеЗаполнено(ТекСтрока.Характеристика) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения,
					ТекСтрока.НомерСтроки, НСтр("ru = 'характеристика'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
		ИначеЕсли Булево(ВариантПоиска) И Не Булево(ВариантУстановкиЦен) Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
			Если ТаблицаРезультат.НайтиСтроки(СтруктураПоиска).Количество() Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияДубли, ТекСтрока.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаРезультат.Добавить(), ТекСтрока);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьШагПеренестиДанныеВДокумент()
	
	Если ПроверитьЗаполнение() Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		Закрыть(ПоместитьТаблицуЦенВоВременноеХранилище());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуЦенВоВременноеХранилище()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаРезультат.Выгрузить());
	Запрос.УстановитьПараметр("ВариантУстановкиЦен", ВариантУстановкиЦен);
	// 19.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2575
	// Изменент текст запроса - доступны нулевые цены
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.Характеристика КАК Характеристика,
	|	ТаблицаЦен.ВидЦены КАК ВидЦены,
	|	ТаблицаЦен.Цена КАК Цена
	|ПОМЕСТИТЬ врт_ТаблицаЦен
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врт_ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	спр_Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	спр_Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	врт_ТаблицаЦен.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ врт_НоменклатураСВидом
	|ИЗ
	|	врт_ТаблицаЦен КАК врт_ТаблицаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спр_Номенклатура
	|		ПО врт_ТаблицаЦен.Номенклатура = спр_Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_НоменклатураСВидом.Номенклатура КАК Номенклатура,
	|	спр_Характеристики.Ссылка КАК Характеристика,
	|	врт_НоменклатураСВидом.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ врт_НоменклатураСХарактеристикой
	|ИЗ
	|	врт_НоменклатураСВидом КАК врт_НоменклатураСВидом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК спр_Характеристики
	|		ПО врт_НоменклатураСВидом.Номенклатура = спр_Характеристики.Владелец
	|ГДЕ
	|	врт_НоменклатураСВидом.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врт_НоменклатураСВидом.Номенклатура,
	|	спр_Характеристики.Ссылка,
	|	врт_НоменклатураСВидом.ВидЦены
	|ИЗ
	|	врт_НоменклатураСВидом КАК врт_НоменклатураСВидом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК спр_Характеристики
	|		ПО врт_НоменклатураСВидом.ВидНоменклатуры = спр_Характеристики.Владелец
	|ГДЕ
	|	врт_НоменклатураСВидом.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_НоменклатураСХарактеристикой.Номенклатура КАК Номенклатура,
	|	врт_НоменклатураСХарактеристикой.Характеристика КАК Характеристика,
	|	спр_Характеристики.ХарактеристикаНоменклатурыДляЦенообразования КАК ХарактеристикаЦО,
	|	врт_НоменклатураСХарактеристикой.ВидЦены КАК ВидЦены,
	|	ЕСТЬNULL(врт_ТаблицаЦен.Цена, 0) КАК Цена
	|ПОМЕСТИТЬ врт_ИтоговыеДанные
	|ИЗ
	|	врт_НоменклатураСХарактеристикой КАК врт_НоменклатураСХарактеристикой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК спр_Характеристики
	|		ПО врт_НоменклатураСХарактеристикой.Характеристика = спр_Характеристики.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врт_ТаблицаЦен КАК врт_ТаблицаЦен
	|		ПО врт_НоменклатураСХарактеристикой.Номенклатура = врт_ТаблицаЦен.Номенклатура
	|			И врт_НоменклатураСХарактеристикой.ВидЦены = врт_ТаблицаЦен.ВидЦены
	|			И (ВЫБОР
	|				КОГДА &ВариантУстановкиЦен = 1
	|					ТОГДА врт_НоменклатураСХарактеристикой.Характеристика = врт_ТаблицаЦен.Характеристика
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врт_ИтоговыеДанные.Номенклатура КАК Номенклатура,
	|	врт_ИтоговыеДанные.Характеристика КАК Характеристика,
	|	врт_ИтоговыеДанные.ВидЦены КАК ВидЦены,
	|	врт_ИтоговыеДанные.Цена КАК Цена
	|ИЗ
	|	врт_ИтоговыеДанные КАК врт_ИтоговыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врт_ИтоговыеДанные.Номенклатура КАК Номенклатура,
	|	врт_ИтоговыеДанные.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	врт_ИтоговыеДанные.ВидЦены КАК ВидЦены,
	|	врт_ИтоговыеДанные.Цена КАК Цена
	|ИЗ
	|	врт_ИтоговыеДанные КАК врт_ИтоговыеДанные
	|	
	|ГДЕ
	|	НЕ врт_ИтоговыеДанные.ХарактеристикаЦО = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Товары", ПакетРезультатов[ПакетРезультатов.ВГраница() - 1].Выгрузить());
	СтруктураВозврата.Вставить("Товары2_5", ПакетРезультатов[ПакетРезультатов.ВГраница()].Выгрузить());
	
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураВозврата);
	
	Возврат АдресХранилища;
	
КонецФункции

#КонецОбласти
