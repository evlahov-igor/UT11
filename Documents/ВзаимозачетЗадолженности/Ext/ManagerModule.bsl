#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Взаиморасчеты");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("СуммыДокументовВВалютахУчета");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
	ВзаимозачетЗадолженностиЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * ТаблицаИмяРегистра - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры);
		
		ВзаимозачетЗадолженностиЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	ВзаимозачетЗадолженностиЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Взаимозачет задолженности".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВзаимозачетЗадолженности) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ВзаимозачетЗадолженности);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	#Область ВедомостьРасчетовСКлиентами_ДобавитьКомандуОтчета
	КомандаОтчета = ВзаиморасчетыСервер.ВедомостьРасчетовСКлиентами_ДобавитьКомандуОтчета(КомандыОтчетов);
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера);
	
	Если КомандаОтчета <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчета,"ВидОперации", Операции,
			ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	#КонецОбласти
	
	#Область ВедомостьРасчетовСПоставщиками_ДобавитьКомандуОтчета
	КомандаОтчета = ВзаиморасчетыСервер.ВедомостьРасчетовСПоставщиками_ДобавитьКомандуОтчета(КомандыОтчетов);
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями);
	
	Если КомандаОтчета <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчета,"ВидОперации", Операции,
			ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	#КонецОбласти
	
	#Область ВедомостьРасчетовМеждуОрганизациями_ДобавитьКомандуОтчета
	КомандаОтчета = ВзаиморасчетыСервер.ВедомостьРасчетовМеждуОрганизациями_ДобавитьКомандуОтчета(КомандыОтчетов);
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями);
	
	Если КомандаОтчета <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчета,"ВидОперации", Операции,
			ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	#КонецОбласти
	
	#Область ВедомостьРасчетовСПартнерами_ДобавитьКомандуОтчета
	КомандаОтчета = ВзаиморасчетыСервер.ВедомостьРасчетовСПартнерами_ДобавитьКомандуОтчета(КомандыОтчетов);
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный);
	Операции.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер);
	
	Если КомандаОтчета <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчета,"ВидОперации", Операции,
			ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	#КонецОбласти
	
	ВзаимозачетЗадолженностиЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

// Процедура заполняет массивы реквизитов, зависимых от вида операции документа.
//
// Параметры:
//	ВидОперации - ПеречислениеСсылка.ВидыОперацийВзаимозачетаЗадолженности - Выбранный вид операции.
//	МассивВсехРеквизитов - Массив - Массив всех имен реквизитов, зависимых от вида операции.
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемых в выбранного вида операции.
//
Процедура ЗаполнитьИменаРеквизитовПоВидуОперации(ВидОперации, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ОрганизацияКредитор");
	МассивВсехРеквизитов.Добавить("КонтрагентКредитор");
	МассивВсехРеквизитов.Добавить("ТипДебитора");
	МассивВсехРеквизитов.Добавить("ТипКредитора");
	МассивВсехРеквизитов.Добавить("ДебиторскаяЗадолженность.ОбъектРасчетовЗеркальный");
	МассивВсехРеквизитов.Добавить("КредиторскаяЗадолженность.ОбъектРасчетовЗеркальный");
	МассивВсехРеквизитов.Добавить("ОбъектРасчетовИнтеркампаниЗеркальный");
	МассивВсехРеквизитов.Добавить("ОбъектРасчетовДебиторКредиторЗеркальный");
	МассивВсехРеквизитов.Добавить("НомерВходящегоДокумента");
	МассивВсехРеквизитов.Добавить("ДатаВходящегоДокумента");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами Тогда
		МассивРеквизитовОперации.Добавить("КонтрагентКредитор");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияКредитор");
		МассивРеквизитовОперации.Добавить("ДебиторскаяЗадолженность.ОбъектРасчетовЗеркальный");
		МассивРеквизитовОперации.Добавить("КредиторскаяЗадолженность.ОбъектРасчетовЗеркальный");
		МассивРеквизитовОперации.Добавить("ОбъектРасчетовИнтеркампаниЗеркальный");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный Тогда //произвольный
		МассивРеквизитовОперации.Добавить("КонтрагентКредитор");
		МассивРеквизитовОперации.Добавить("ТипДебитора");
		МассивРеквизитовОперации.Добавить("ТипКредитора");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера Тогда
		
		МассивРеквизитовОперации.Добавить("КонтрагентКредитор");
		МассивРеквизитовОперации.Добавить("НомерВходящегоДокумента");
		МассивРеквизитовОперации.Добавить("ДатаВходящегоДокумента");
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление реквизитов в заивисимости от вида операции взаимозачета.
//
// Параметры:
//	ВидОперации - ПеречислениеСсылка.ВидыОперацийВзаимозачетаЗадолженности - Выбранный вид операции.
//
// Возвращаемое значение:
// Структура - содержит структуру с ключами:
//     * Организация         - Строка - Представление организации.
//     * ОрганизацияКредитор - Строка - Представление организации-кредитора.
//     * КонтрагентДебитор   - Строка - Представление контрагента-дебитора.
//     * КонтрагентКредитор  - Строка - Представление контрагента-кредитора.
Функция ПредставлениеРеквизитовПоВидуОперации(ВидОперации) Экспорт
	
	СтруктураПредставлений = Новый Структура;
	
	СтруктураПредставлений.Вставить("Организация", НСтр("ru='Организация'"));
	СтруктураПредставлений.Вставить("ОрганизацияКредитор", НСтр("ru='Организация'"));
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями Тогда
		
		СтруктураПредставлений.Вставить("Организация",         НСтр("ru='Организация для передачи аванса'"));
		СтруктураПредставлений.Вставить("ОрганизацияКредитор", НСтр("ru='Организация, получившая аванс'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями Тогда
		
		СтруктураПредставлений.Вставить("Организация",         НСтр("ru='Организация, уплатившая аванс'"));
		СтруктураПредставлений.Вставить("ОрганизацияКредитор", НСтр("ru='Организация для передачи аванса'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями Тогда
		
		СтруктураПредставлений.Вставить("Организация",         НСтр("ru='Организация, выполнившая отгрузку'"));
		СтруктураПредставлений.Вставить("ОрганизацияКредитор", НСтр("ru='Организация для передачи долга'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями Тогда
		
		СтруктураПредставлений.Вставить("Организация",         НСтр("ru='Организация, оформившая поступление'"));
		СтруктураПредставлений.Вставить("ОрганизацияКредитор", НСтр("ru='Организация для передачи долга'"));
		
	КонецЕсли;
	
	СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Дебитор'"));
	СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Кредитор'"));
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Клиент'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Клиент'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Клиент-получатель'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Клиент-кредитор'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Клиент-дебитор'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Клиент-получатель'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Клиент-получатель'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Комиссионер-дебитор'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Клиент-дебитор'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Комиссионер-получатель'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Поставщик'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Поставщик'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Поставщик-дебитор'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Поставщик-получатель'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Поставщик-получатель'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Поставщик-кредитор'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Контрагент'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Контрагент'"));
		
	КонецЕсли;
	
	Возврат СтруктураПредставлений;
	
КонецФункции


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	( ЗначениеРазрешено(Организация)
	|	ИЛИ ЗначениеРазрешено(ДебиторскаяЗадолженность.Организация)
	|	ИЛИ ЗначениеРазрешено(КредиторскаяЗадолженность.Организация)
	|	)И( ЗначениеРазрешено(ДебиторскаяЗадолженность.Партнер)
	|	ИЛИ ЗначениеРазрешено(КредиторскаяЗадолженность.Партнер)
	|	) 
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	( ЗначениеРазрешено(Организация)
	|	ИЛИ ЗначениеРазрешено(ДебиторскаяЗадолженность.Организация)
	|	ИЛИ ЗначениеРазрешено(КредиторскаяЗадолженность.Организация)
	|	)И( ЗначениеРазрешено(ДебиторскаяЗадолженность.Партнер)
	|	ИЛИ ЗначениеРазрешено(КредиторскаяЗадолженность.Партнер)
	|	)И ЗначениеРазрешено(ВидОперации)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	МассивТиповОрганизаций = Новый Массив;
	МассивТиповОрганизаций.Добавить(Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент);
	МассивТиповОрганизаций.Добавить(Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик);
	Запрос.УстановитьПараметр("ТипыОрганизаций", МассивТиповОрганизаций);
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями);
	Запрос.УстановитьПараметр("ОперацииВзаимозачетаМеждуОрганизациями", МассивОпераций);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата               КАК Период,
	|	ДанныеДокумента.Ссылка             КАК Ссылка,
	|	ДанныеДокумента.Номер              КАК Номер,
	|	ДанныеДокумента.Организация        КАК Организация,
	|	ДанныеДокумента.Подразделение      КАК Подразделение,
	|	ДанныеДокумента.ВидОперации        КАК ВидОперации
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности  КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                           Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер",                            Реквизиты.Номер);
	Запрос.УстановитьПараметр("Организация",                      Реквизиты.Организация);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",   ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация));
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",       ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета());
	Запрос.УстановитьПараметр("Подразделение",                    Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВзаимозачетЗадолженности"));
	
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности;
	НастройкаХозОперации = Справочники.НастройкиХозяйственныхОпераций.ВзаимозачетЗадолженности;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносАванса;
		НастройкаХозОперации = Справочники.НастройкиХозяйственныхОпераций.ПереносАванса;
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносДолга;
		НастройкаХозОперации = Справочники.НастройкиХозяйственныхОпераций.ПереносДолга;
	
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеОплатыЧерезКомиссионера;
		НастройкаХозОперации = Справочники.НастройкиХозяйственныхОпераций.ПереносАванса;
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеВозвратаОплатыЧерезКомиссионера;
		НастройкаХозОперации = Справочники.НастройкиХозяйственныхОпераций.ПереносАванса;
	КонецЕсли;
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("НастройкаХозОперации", НастройкаХозОперации);
	Запрос.УстановитьПараметр("ВидОперации", Реквизиты.ВидОперации);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос) Экспорт
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.ВалютаРегламентированногоУчета,
	                                                                         Неопределено, // ВалютаВзаиморасчетов
	                                                                         Запрос.Параметры.Период,
	                                                                         Запрос.Параметры.Организация);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",           Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",          Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Процедура ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос) Экспорт
	
	Если Запрос.Параметры.Свойство("ВтДебиторскаяКредиторскаяЗадолженностьИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВременныхТаблиц = Новый Запрос;
	ЗапросВременныхТаблиц.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВременныхТаблиц.Текст = ТекстЗапросаВтДебиторскаяЗадолженность() + ОбщегоНазначения.РазделительПакетаЗапросов()
								+ ТекстЗапросаВтКредиторскаяЗадолженность() + ОбщегоНазначения.РазделительПакетаЗапросов()
								+ ТекстЗапросаВтДанныеДокумента()  + ОбщегоНазначения.РазделительПакетаЗапросов()
								+ ТекстЗапросаВтРасчетыСКлиентамиПредварительная() + ОбщегоНазначения.РазделительПакетаЗапросов()
								+ ТекстЗапросаВтРасчетовПоПоставщикамиПредварительная();
	
	ЗапросВременныхТаблиц.УстановитьПараметр("Ссылка",                            Запрос.Параметры.Ссылка);
	ЗапросВременныхТаблиц.УстановитьПараметр("Организация",                       Запрос.Параметры.Организация);
	ЗапросВременныхТаблиц.УстановитьПараметр("Подразделение",                     Запрос.Параметры.Подразделение);
	ЗапросВременныхТаблиц.УстановитьПараметр("ВалютаРегламентированногоУчета",    Запрос.Параметры.ВалютаРегламентированногоУчета);
	
	ЗапросВременныхТаблиц.ВыполнитьПакет();
	
	Запрос.УстановитьПараметр("ВтДебиторскаяКредиторскаяЗадолженностьИнициализированы", Истина);

КонецПроцедуры

Процедура ИнициализироватьВременныеТаблицыПоРасчетам(Запрос, ВидЗадолженности = Неопределено)
	
	ЗапросВременнойТаблицы = Новый Запрос;
	ЗапросВременнойТаблицы.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросВременнойТаблицы.УстановитьПараметр("Ссылка",                            Запрос.Параметры.Ссылка);
	ЗапросВременнойТаблицы.УстановитьПараметр("Организация",                       Запрос.Параметры.Организация);
	ЗапросВременнойТаблицы.УстановитьПараметр("Подразделение",                     Запрос.Параметры.Подразделение);
	ЗапросВременнойТаблицы.УстановитьПараметр("ВалютаРегламентированногоУчета",    Запрос.Параметры.ВалютаРегламентированногоУчета);
	
	ТекстЗапроса = "";
	Если (ВидЗадолженности = "Клиенты" ИЛИ ВидЗадолженности = Неопределено)
		И НЕ Запрос.Параметры.Свойство("ВтРасчетовПоКлиентамИнициализирована") Тогда
		Запрос.УстановитьПараметр("ВтРасчетовПоКлиентамИнициализирована", Истина);
		ТекстЗапроса = ТекстЗапросаВтРасчетыСКлиентами();
	КонецЕсли;
	
	Если (ВидЗадолженности = "Поставщики" ИЛИ ВидЗадолженности = Неопределено)
		И НЕ Запрос.Параметры.Свойство("ВтРасчетовПоПоставщикамИнициализирована") Тогда
		Запрос.УстановитьПараметр("ВтРасчетовПоПоставщикамИнициализирована", Истина);
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВтРасчетовПоПоставщиками();
	КонецЕсли;
	
	Если ВидЗадолженности = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВтРасчетыПоЗадолженности();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ЗапросВременнойТаблицы.Текст = ТекстЗапроса;
		ЗапросВременнойТаблицы.ВыполнитьПакет();
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры = Неопределено) Экспорт
	
	ТекстЗапросаДанных =
	"ВЫБРАТЬ
	|	""ДебиторскаяЗадолженность"" КАК ИсточникДанных,
	|	ЛОЖЬ КАК РаспределятьОбщуюСумму,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК ПериодБазыНДС,
	|
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.Сумма КАК СуммаБезНДС,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаНДСВзаиморасчетов,
	|
	|	ИСТИНА КАК ОтражаетсяВРасчетах,
	|	ТаблицаДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ЛОЖЬ КАК ПересчитыватьПоДаннымРасчетов
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	""КредиторскаяЗадолженность "" КАК ИсточникДанных,
	|	ЛОЖЬ КАК РаспределятьОбщуюСумму,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК ПериодБазыНДС,
	|
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.Сумма КАК СуммаБезНДС,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаНДСВзаиморасчетов,
	|
	|	ИСТИНА КАК ОтражаетсяВРасчетах,
	|	ТаблицаДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ЛОЖЬ КАК ПересчитыватьПоДаннымРасчетов
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность  КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|";
	
	РегистрыСведений.СуммыДокументовВВалютахУчета.СформироватьПоДаннымДокумента(
		Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанных);

КонецПроцедуры

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос);
	ИнициализироватьВременныеТаблицыПоРасчетам(Запрос, "Клиенты");
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = ТекстЗапросаРасчетыСКлиентами();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос);
	ИнициализироватьВременныеТаблицыПоРасчетам(Запрос, "Поставщики");
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = ТекстЗапросаРасчетыСПоставщиками();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует движения по регистру ДвиженияКонтрагентКонтрагент на временных таблиц дебиторской и кредиторской задолженности.
//
Процедура ПодготовитьТаблицуДвиженияКонтрагентКонтрагент(Запрос)
	
	Если Запрос.Параметры.Свойство("ДвиженияКонтрагентКонтрагентПодготовлены") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос);
	ИнициализироватьВременныеТаблицыПоРасчетам(Запрос);
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ЗапросЗадолженостей = Новый Запрос;
	ЗапросЗадолженостей.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросЗадолженостей.УстановитьПараметр("Ссылка",                            Запрос.Параметры.Ссылка);
	ЗапросЗадолженостей.УстановитьПараметр("Период",                            Запрос.Параметры.Период);
	ЗапросЗадолженостей.УстановитьПараметр("Подразделение",                     Запрос.Параметры.Подразделение);
	ЗапросЗадолженостей.УстановитьПараметр("ВалютаУправленческогоУчета",        Запрос.Параметры.ВалютаУправленческогоУчета);
	ЗапросЗадолженостей.УстановитьПараметр("ВалютаРегламентированногоУчета",    Запрос.Параметры.ВалютаРегламентированногоУчета);
	ЗапросЗадолженостей.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",    Запрос.Параметры.КоэффициентПересчетаВВалютуУпр);
	ЗапросЗадолженостей.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",   Запрос.Параметры.КоэффициентПересчетаВВалютуРегл);
	
	ЗапросЗадолженостей.Текст = 
	"ВЫБРАТЬ
	|	&Период                                                КАК Период,
	|	Задолженность.ВидДвижения                              КАК ВидДвижения,
	|	&ХозяйственнаяОперация                                 КАК ХозяйственнаяОперация,
	|	Задолженность.Организация                              КАК Организация,
	|	&Подразделение                                         КАК Подразделение,
	|	
	|	Задолженность.Партнер                                  КАК Партнер,
	|	Задолженность.Контрагент                               КАК Контрагент,
	|	Задолженность.Договор                                  КАК Договор,
	|	Задолженность.НаправлениеДеятельности                  КАК НаправлениеДеятельности,
	|	Задолженность.ОбъектРасчетов                           КАК ОбъектРасчетов,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК КорПартнер,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорКонтрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК КорДоговор,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорНаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорОбъектРасчетов,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК ТипСуммы,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорТипСуммы,
	|	
	|	ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Задолженность.СуммаВзаиморасчетов
	|		КОГДА Задолженность.Сумма <> 0 
	|			ТОГДА ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))
	|		ИНАЧЕ Задолженность.СуммаУпр
	|	КОНЕЦ                                                  КАК Сумма,
	|	0                                                      КАК СуммаБезНДС,
	|	ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА Задолженность.СуммаВзаиморасчетов
	|		КОГДА Задолженность.Сумма <> 0
	|			ТОГДА ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|		ИНАЧЕ Задолженность.СуммаРегл
	|	КОНЕЦ                                                  КАК СуммаРегл,
	|	0                                                      КАК СуммаРеглБезНДС,
	|	
	|	Задолженность.ВалютаВзаиморасчетов                     КАК Валюта,
	|	Задолженность.СуммаВзаиморасчетов                      КАК СуммаВВалюте,
	|	0                                                      КАК СуммаБезНДСВВалюте,
	|	
	|	Задолженность.ВалютаВзаиморасчетов                     КАК ВалютаВзаиморасчетов,
	|	ВЫБОР КОГДА Задолженность.СуммаВзаиморасчетов = 0 
	|		ТОГДА 1
	|		ИНАЧЕ (ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|					ТОГДА Задолженность.СуммаВзаиморасчетов 
	|					КОГДА Задолженность.Сумма <> 0
	|						ТОГДА ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|					ИНАЧЕ Задолженность.СуммаРегл
	|				КОНЕЦ) / Задолженность.СуммаВзаиморасчетов
	|	КОНЕЦ                                                  КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.СуммаВзаиморасчетов                      КАК СуммаВВалютеВзаиморасчетов,
	|	0                                                      КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК КорВалютаВзаиморасчетов,
	|	0                                                      КАК КорСуммаВВалютеВзаиморасчетов,
	|	0                                                      КАК КорСуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	Задолженность.ОбъектРасчетов                           КАК ИсточникГФУРасчетов,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорИсточникГФУРасчетов,
	|	Задолженность.Организация = Задолженность.Организация.ГоловнаяОрганизация КАК ЭтоГоловнаяОрганизация,
	|	ЛОЖЬ                                                   КАК Сторно
	|ИЗ
	|	ВтРасчетыПоЗадолженности КАК Задолженность
	|ГДЕ
	|	Задолженность.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задолженность.Организация,
	|	Задолженность.Сумма УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период                                                КАК Период,
	|	Задолженность.ВидДвижения                              КАК ВидДвижения,
	|	&ХозяйственнаяОперация                                 КАК ХозяйственнаяОперация,
	|	Задолженность.Организация                              КАК Организация,
	|	&Подразделение                                         КАК Подразделение,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК Партнер,
	|	НЕОПРЕДЕЛЕНО                                           КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                           КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                           КАК ОбъектРасчетов,
	|	
	|	Задолженность.Партнер                                  КАК КорПартнер,
	|	Задолженность.Контрагент                               КАК КорКонтрагент,
	|	Задолженность.Договор                                  КАК КорДоговор,
	|	Задолженность.НаправлениеДеятельности                  КАК КорНаправлениеДеятельности,
	|	Задолженность.ОбъектРасчетов                           КАК КорОбъектРасчетов,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК ТипСуммы,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорТипСуммы,
	|	
	|	ВЫБОР 
	|		КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета ТОГДА
	|			Задолженность.СуммаВзаиморасчетов
	|		КОГДА Задолженность.Сумма <> 0 ТОГДА
	|			ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))
	|		ИНАЧЕ
	|			Задолженность.СуммаУпр
	|	КОНЕЦ                                                  КАК Сумма,
	|	0                                                      КАК СуммаБезНДС,
	|	ВЫБОР 
	|		КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета ТОГДА
	|			Задолженность.СуммаВзаиморасчетов
	|		КОГДА Задолженность.Сумма <> 0 ТОГДА
	|			ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|		ИНАЧЕ
	|			Задолженность.СуммаРегл
	|	КОНЕЦ                                                  КАК СуммаРегл,
	|	0                                                      КАК СуммаРеглБезНДС,
	|	
	|	Задолженность.ВалютаВзаиморасчетов                     КАК Валюта,
	|	Задолженность.СуммаВзаиморасчетов                      КАК СуммаВВалюте,
	|	0                                                      КАК СуммаБезНДСВВалюте,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК ВалютаВзаиморасчетов,
	|	0                                                      КАК СуммаВВалютеВзаиморасчетов,
	|	0                                                      КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	Задолженность.ВалютаВзаиморасчетов                     КАК КорВалютаВзаиморасчетов,
	|	ВЫБОР КОГДА Задолженность.СуммаВзаиморасчетов = 0 
	|		ТОГДА 1
	|		ИНАЧЕ (ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|					ТОГДА Задолженность.СуммаВзаиморасчетов
	|					КОГДА Задолженность.Сумма <> 0 ТОГДА
	|						ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|					ИНАЧЕ Задолженность.СуммаРегл
	|				КОНЕЦ) / Задолженность.СуммаВзаиморасчетов
	|	КОНЕЦ                                                  КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.СуммаВзаиморасчетов                      КАК КорСуммаВВалютеВзаиморасчетов,
	|	0                                                      КАК КорСуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	НЕОПРЕДЕЛЕНО                                           КАК ИсточникГФУРасчетов,
	|	Задолженность.ОбъектРасчетов                           КАК КорИсточникГФУРасчетов,
	|	Задолженность.Организация = Задолженность.Организация.ГоловнаяОрганизация КАК ЭтоГоловнаяОрганизация,
	|	ЛОЖЬ                                                   КАК Сторно
	|ИЗ
	|	ВтРасчетыПоЗадолженности КАК Задолженность
	|ГДЕ
	|	Задолженность.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задолженность.Организация,
	|	Задолженность.Сумма УБЫВ";
	
	ЗапросЗадолженостей.УстановитьПараметр("ХозяйственнаяОперация", Запрос.Параметры.ХозяйственнаяОперация);
	Результат = ЗапросЗадолженостей.ВыполнитьПакет();
	
	ТаблицаДвиженияКонтрагентКонтрагент = Неопределено;
	ВзаиморасчетыСервер.ПровестиВзаимозачет(
		Результат[0].Выгрузить(),
		Результат[1].Выгрузить(),
		ТаблицаДвиженияКонтрагентКонтрагент);
	
	ЗапросЗадолженостей.УстановитьПараметр("ТаблицаДвиженияКонтрагентКонтрагент", ТаблицаДвиженияКонтрагентКонтрагент);
	ЗапросЗадолженостей.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДвиженияКонтрагентКонтрагент.Период,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Регистратор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.НомерСтроки,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ХозяйственнаяОперация,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Организация,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Подразделение,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Партнер,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Контрагент,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Договор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.НаправлениеДеятельности,
	|	ТаблицаДвиженияКонтрагентКонтрагент.ОбъектРасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорПартнер,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорКонтрагент,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорДоговор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорНаправлениеДеятельности,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорОбъектРасчетов,
	
	|	ТаблицаДвиженияКонтрагентКонтрагент.ТипСуммы,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорТипСуммы,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Сумма,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДС,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаРегл,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаРеглБезНДС,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Валюта,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаВВалюте,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДСВВалюте,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ВалютаВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаВВалютеВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорВалютаВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорСуммаВВалютеВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорСуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ИсточникГФУРасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорИсточникГФУРасчетов
	|ПОМЕСТИТЬ ВтДвиженияКонтрагентКонтрагент
	|ИЗ
	|	&ТаблицаДвиженияКонтрагентКонтрагент КАК ТаблицаДвиженияКонтрагентКонтрагент";
	
	ЗапросЗадолженостей.ВыполнитьПакет();
	
	Запрос.УстановитьПараметр("ДвиженияКонтрагентКонтрагентПодготовлены", Истина);

КонецПроцедуры

Функция ТекстЗапросаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентКонтрагент";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ПодготовитьТаблицуДвиженияКонтрагентКонтрагент(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДвиженияКонтрагентКонтрагент.Период,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Регистратор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.НомерСтроки,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ХозяйственнаяОперация,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Организация,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Подразделение,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Партнер,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Контрагент,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Договор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.НаправлениеДеятельности,
	|	ТаблицаДвиженияКонтрагентКонтрагент.ОбъектРасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорПартнер,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорКонтрагент,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорДоговор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорНаправлениеДеятельности,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорОбъектРасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ТипСуммы,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорТипСуммы,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Сумма,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДС,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаРегл,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаРеглБезНДС,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Валюта,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаВВалюте,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДСВВалюте,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ВалютаВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаВВалютеВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорВалютаВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорСуммаВВалютеВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорСуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ИсточникГФУРасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорИсточникГФУРасчетов
	|ИЗ
	|	ВтДвиженияКонтрагентКонтрагент КАК ТаблицаДвиженияКонтрагентКонтрагент";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияПоПрочимАктивамПассивам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ПодготовитьТаблицуДвиженияКонтрагентКонтрагент(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияКонтрагентКонтрагент.Период                     КАК Период,
	|	ДвиженияКонтрагентКонтрагент.Организация                КАК Организация,
	|	ОбъектыКорРасчетов.Подразделение                        КАК Подразделение,
	|	ДвиженияКонтрагентКонтрагент.КорНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСФилиалами) КАК Статья,
	|	ДвиженияКонтрагентКонтрагент.КорКонтрагент              КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	ДвиженияКонтрагентКонтрагент.СуммаРегл   КАК СуммаРегл,
	|	ДвиженияКонтрагентКонтрагент.Сумма       КАК СуммаУпр,
	|	ДвиженияКонтрагентКонтрагент.Сумма       КАК СуммаСНДС,
	|	ДвиженияКонтрагентКонтрагент.СуммаБезНДС КАК СуммаБезНДС,
	|
	|	ОбъектыКорРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	НастройкиХозяйственныхОпераций.Ссылка      КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтДвиженияКонтрагентКонтрагент КАК ДвиженияКонтрагентКонтрагент
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыКорРасчетов
	|		ПО ДвиженияКонтрагентКонтрагент.КорОбъектРасчетов = ОбъектыКорРасчетов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДвиженияКонтрагентКонтрагент.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	ДвиженияКонтрагентКонтрагент.Организация.ГоловнаяОрганизация <> ДвиженияКонтрагентКонтрагент.Контрагент.ГоловнаяОрганизация
	|	И ДвиженияКонтрагентКонтрагент.Организация.ГоловнаяОрганизация <> ДвиженияКонтрагентКонтрагент.КорКонтрагент.ГоловнаяОрганизация
	|	И (ДвиженияКонтрагентКонтрагент.Организация = ДвиженияКонтрагентКонтрагент.КорКонтрагент.ГоловнаяОрганизация
	|		ИЛИ ДвиженияКонтрагентКонтрагент.Организация.ГоловнаяОрганизация = ДвиженияКонтрагентКонтрагент.КорКонтрагент)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияКонтрагентКонтрагент.Период                   КАК Период,
	|	ДвиженияКонтрагентКонтрагент.Организация              КАК Организация,
	|	ОбъектыРасчетов.Подразделение                         КАК Подразделение,
	|	ДвиженияКонтрагентКонтрагент.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСФилиалами) КАК Статья,
	|	ДвиженияКонтрагентКонтрагент.Контрагент               КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|
	|	ДвиженияКонтрагентКонтрагент.СуммаРегл   КАК СуммаРегл,
	|	ДвиженияКонтрагентКонтрагент.Сумма       КАК СуммаУпр,
	|	ДвиженияКонтрагентКонтрагент.Сумма       КАК СуммаСНДС,
	|	ДвиженияКонтрагентКонтрагент.СуммаБезНДС КАК СуммаБезНДС,
	|
	|	ОбъектыРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	НастройкиХозяйственныхОпераций.Ссылка   КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтДвиженияКонтрагентКонтрагент КАК ДвиженияКонтрагентКонтрагент
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ДвиженияКонтрагентКонтрагент.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДвиженияКонтрагентКонтрагент.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	ДвиженияКонтрагентКонтрагент.Организация.ГоловнаяОрганизация <> ДвиженияКонтрагентКонтрагент.Контрагент.ГоловнаяОрганизация
	|	И ДвиженияКонтрагентКонтрагент.Организация.ГоловнаяОрганизация <> ДвиженияКонтрагентКонтрагент.КорКонтрагент.ГоловнаяОрганизация
	|	И (ДвиженияКонтрагентКонтрагент.Организация = ДвиженияКонтрагентКонтрагент.Контрагент.ГоловнаяОрганизация
	|		ИЛИ ДвиженияКонтрагентКонтрагент.Организация.ГоловнаяОрганизация = ДвиженияКонтрагентКонтрагент.Контрагент)
	|";
	
	ТекстЗапроса = ТекстЗапроса
		+ ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()
		+ ПрочиеАктивыПассивыСервер.ТекстЗапросаВзаимозачетСФилиалами();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДебиторскаяЗадолженность()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ТипРасчетов                     КАК ТипРасчетов,
	|	ДанныеДокумента.ОбъектРасчетов                  КАК ОбъектРасчетов,
	|	ДанныеДокумента.ОбъектРасчетовЗеркальный        КАК ОбъектРасчетовЗеркальный,
	|
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Контрагент) = ТИП(Справочник.Организации)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ ДанныеДокумента.Партнер
	|	КОНЕЦ                                           КАК Партнер,
	|	ОбъектыРасчетов.Организация                     КАК Организация,
	|	ОбъектыРасчетов.Договор                         КАК Договор,
	|	ОбъектыРасчетов.Контрагент                      КАК Контрагент,
	|	ВЫБОР КОГДА ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И ЕСТЬNULL(Направления.УчетДоходов, ЛОЖЬ)
	|				ИЛИ ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И ЕСТЬNULL(Направления.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|		ТОГДА 
	|			ОбъектыРасчетов.НаправлениеДеятельности
	|		ИНАЧЕ 
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ                                           КАК НаправлениеДеятельности,
	|
	|	ДанныеДокумента.Сумма                           КАК Сумма,
	|	ДанныеДокумента.СуммаВзаиморасчетов             КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.ВалютаВзаиморасчетов            КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаРегл                       КАК СуммаРегл,
	|	ДанныеДокумента.СуммаУпр                        КАК СуммаУпр,
	|	ОбъектыРасчетов.Подразделение                   КАК Подразделение,
	|
	|	НЕОПРЕДЕЛЕНО                                    КАК КорОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО                                    КАК КорПартнер,
	|	НЕОПРЕДЕЛЕНО                                    КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО                                    КАК КорДоговор,
	|	НЕОПРЕДЕЛЕНО                                    КАК КорКонтрагент,
	|	НЕОПРЕДЕЛЕНО                                    КАК КорНаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ВтДебиторскаяЗадолженность
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ОбъектыРасчетов.Ссылка = ДанныеДокумента.ОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК Направления
	|			ПО Направления.Ссылка = ОбъектыРасчетов.НаправлениеДеятельности
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ТипРасчетов                     КАК ТипРасчетов,
	|	ДанныеДокумента.ОбъектРасчетов                  КАК ОбъектРасчетов,
	|	ДанныеДокумента.ОбъектРасчетовЗеркальный        КАК ОбъектРасчетовЗеркальный,
	|
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Контрагент) = ТИП(Справочник.Организации)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ ДанныеДокумента.Партнер
	|	КОНЕЦ                                           КАК Партнер,
	|	ОбъектыРасчетов.Организация                     КАК Организация,
	|	ОбъектыРасчетов.Договор                         КАК Договор,
	|	ОбъектыРасчетов.Контрагент                      КАК Контрагент,
	|	ВЫБОР КОГДА ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И ЕСТЬNULL(Направления.УчетДоходов, ЛОЖЬ)
	|				ИЛИ ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И ЕСТЬNULL(Направления.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|		ТОГДА 
	|			ОбъектыРасчетов.НаправлениеДеятельности
	|		ИНАЧЕ 
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ                                           КАК НаправлениеДеятельности,
	|
	|	0                                               КАК Сумма,
	|	Долги.Сумма                                     КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.ВалютаВзаиморасчетов            КАК ВалютаВзаиморасчетов,
	|	Долги.СуммаРегл                                 КАК СуммаРегл,
	|	Долги.СуммаУпр                                  КАК СуммаУпр,
	|
	|	ОбъектыРасчетов.Подразделение                   КАК Подразделение,
	|
	|	Долги.ОбъектРасчетов                            КАК КорОбъектРасчетов,
	|	Долги.ОбъектРасчетов.Партнер                    КАК КорПартнер,
	|	Долги.ОбъектРасчетов.Организация                КАК КорОрганизация,
	|	Долги.ОбъектРасчетов.Договор                    КАК КорДоговор,
	|	Долги.ОбъектРасчетов.Контрагент                 КАК КорКонтрагент,
	|	Долги.ОбъектРасчетов.НаправлениеДеятельности    КАК КорНаправлениеДеятельности
	|
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ОбъектыРасчетов.Ссылка = ДанныеДокумента.ОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК Долги
	|			ПО Долги.Ссылка = ДанныеДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК Направления
	|			ПО Направления.Ссылка = ОбъектыРасчетов.НаправлениеДеятельности
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтКредиторскаяЗадолженность()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ТипРасчетов                     КАК ТипРасчетов,
	|	ДанныеДокумента.ОбъектРасчетов                  КАК ОбъектРасчетов,
	|	ДанныеДокумента.ОбъектРасчетовЗеркальный        КАК ОбъектРасчетовЗеркальный,
	|
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Контрагент) = ТИП(Справочник.Организации)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ ДанныеДокумента.Партнер
	|	КОНЕЦ                                           КАК Партнер,
	|	ОбъектыРасчетов.Организация                     КАК Организация,
	|	ОбъектыРасчетов.Договор                         КАК Договор,
	|	ОбъектыРасчетов.Контрагент                      КАК Контрагент,
	|	ВЫБОР КОГДА ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И ЕСТЬNULL(Направления.УчетДоходов, ЛОЖЬ)
	|				ИЛИ ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И ЕСТЬNULL(Направления.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|		ТОГДА 
	|			ОбъектыРасчетов.НаправлениеДеятельности
	|		ИНАЧЕ 
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ                                           КАК НаправлениеДеятельности,
	|
	|	ДанныеДокумента.Сумма                           КАК Сумма,
	|	ДанныеДокумента.СуммаВзаиморасчетов             КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.ВалютаВзаиморасчетов            КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаРегл                       КАК СуммаРегл,
	|	ДанныеДокумента.СуммаУпр                        КАК СуммаУпр,
	|
	|	ОбъектыРасчетов.Подразделение                   КАК Подразделение,
	|
	|	НЕОПРЕДЕЛЕНО                                    КАК КорОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО                                    КАК КорПартнер,
	|	НЕОПРЕДЕЛЕНО                                    КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО                                    КАК КорДоговор,
	|	НЕОПРЕДЕЛЕНО                                    КАК КорКонтрагент,
	|	НЕОПРЕДЕЛЕНО                                    КАК КорНаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ВтКредиторскаяЗадолженность
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ОбъектыРасчетов.Ссылка = ДанныеДокумента.ОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК Направления
	|			ПО Направления.Ссылка = ОбъектыРасчетов.НаправлениеДеятельности
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями)
	|		ИЛИ ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ТипРасчетов                     КАК ТипРасчетов,
	|	ДанныеДокумента.ОбъектРасчетов                  КАК ОбъектРасчетов,
	|	ДанныеДокумента.ОбъектРасчетовЗеркальный        КАК ОбъектРасчетовЗеркальный,
	|
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Контрагент) = ТИП(Справочник.Организации)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ ДанныеДокумента.Партнер
	|	КОНЕЦ                                           КАК Партнер,
	|	ОбъектыРасчетов.Организация                     КАК Организация,
	|	ОбъектыРасчетов.Договор                         КАК Договор,
	|	ОбъектыРасчетов.Контрагент                      КАК Контрагент,
	|	ВЫБОР КОГДА ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И ЕСТЬNULL(Направления.УчетДоходов, ЛОЖЬ)
	|				ИЛИ ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И ЕСТЬNULL(Направления.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|		ТОГДА 
	|			ОбъектыРасчетов.НаправлениеДеятельности
	|		ИНАЧЕ 
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ                                           КАК НаправлениеДеятельности,
	|
	|	0                                               КАК Сумма,
	|	Долги.Сумма                                     КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.ВалютаВзаиморасчетов            КАК ВалютаВзаиморасчетов,
	|	Долги.СуммаРегл                                 КАК СуммаРегл,
	|	Долги.СуммаУпр                                  КАК СуммаУпр,
	|
	|	ОбъектыРасчетов.Подразделение                   КАК Подразделение,
	|
	|	Долги.ОбъектРасчетов                            КАК КорОбъектРасчетов,
	|	Долги.ОбъектРасчетов.Партнер                    КАК КорПартнер,
	|	Долги.ОбъектРасчетов.Организация                КАК КорОрганизация,
	|	Долги.ОбъектРасчетов.Договор                    КАК КорДоговор,
	|	Долги.ОбъектРасчетов.Контрагент                 КАК КорКонтрагент,
	|	Долги.ОбъектРасчетов.НаправлениеДеятельности    КАК КорНаправлениеДеятельности
	|
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ОбъектыРасчетов.Ссылка = ДанныеДокумента.ОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК Долги
	|			ПО Долги.Ссылка = ДанныеДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК Направления
	|			ПО Направления.Ссылка = ОбъектыРасчетов.НаправлениеДеятельности
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями)
	|	И ДанныеДокумента.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеДокумента()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                          КАК Ссылка,
	|	ДанныеДокумента.Проведен                                        КАК Проведен,
	|	ДанныеДокумента.Дата                                            КАК Дата,
	|	ДанныеДокумента.Номер                                           КАК Номер,
	|	ДанныеДокумента.ВидОперации                                     КАК ВидОперации,
	|	ДанныеДокумента.СуммаРегл                                       КАК СуммаРегл,
	|	ДанныеДокумента.СуммаУпр                                        КАК СуммаУпр,
	|
	|	ДанныеДокумента.Организация                                     КАК Организация,
	|	ДанныеДокумента.ОрганизацияКредитор                             КАК ОрганизацияКредитор,
	|	ДанныеДокумента.ОбъектРасчетовИнтеркампани                      КАК ОбъектРасчетовИнтеркампани,
	|	ДанныеДокумента.ОбъектРасчетовИнтеркампаниЗеркальный            КАК ОбъектРасчетовИнтеркампаниЗеркальный,
	|
	|	ДанныеДокумента.ТипДебитора                                     КАК ТипДебитора,
	|	ДанныеДокумента.ТипКредитора                                    КАК ТипКредитора,
	|	ДанныеДокумента.КонтрагентДебитор                               КАК КонтрагентДебитор,
	|	ДанныеДокумента.КонтрагентКредитор                              КАК КонтрагентКредитор,
	|	ДанныеДокумента.ОбъектРасчетовДебиторКредитор                   КАК ОбъектРасчетовДтКт,
	|	ДанныеДокумента.ОбъектРасчетовДебиторКредиторЗеркальный         КАК ОбъектРасчетовДтКтЗеркальный,
	|
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.КонтрагентДебитор) = ТИП(Справочник.Организации)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                           КАК ДебиторОрганизация,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.КонтрагентКредитор) = ТИП(Справочник.Организации)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                           КАК КредиторОрганизация
	|
	|ПОМЕСТИТЬ ВтДанныеДокумента
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//1. Организация - КонтрагентДт - ОбъектРасчетовДт - Расход - СуммаДт - РасчетыСКлиентом
//2. Организация - КонтрагентКт - ОбъектРасчетовКт - Расход - -СуммаКт - РасчетыСКлиентом
//3. КонтрагентДт(Орг) - КонтрагентКт - ОбъектРасчетовДтКт - Расход - СуммаКт - РасчетыСКлиентом
//4. КонтрагентКт(Орг) - КонтрагентДт(Не орг) - ОбъектРасчетовДтКт - Приход - СуммаДт - РасчетыСПоставщиком
//
Функция ТекстЗапросаВтРасчетыСКлиентамиПредварительная()

	ТекстЗапроса = "
	// Расчеты по основной организации
	|	ВЫБРАТЬ // дебиторская задолженность дебитора-клиента перед организацией считается оплаченной
	|		ДебиторскаяЗадолженность.Ссылка                        КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                 КАК ВидДвижения,
	|		ДебиторскаяЗадолженность.Организация                   КАК Организация,
	|		ДебиторскаяЗадолженность.Партнер                       КАК Партнер,
	|		ДебиторскаяЗадолженность.Контрагент                    КАК Контрагент,
	|		ДебиторскаяЗадолженность.Договор                       КАК Договор,
	|		ДебиторскаяЗадолженность.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|
	|		ДебиторскаяЗадолженность.ОбъектРасчетов                КАК ОбъектРасчетов,
	|		ДебиторскаяЗадолженность.ОбъектРасчетовЗеркальный      КАК ОбъектРасчетовЗеркальный,
	|		ДебиторскаяЗадолженность.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|
	|		0                                                      КАК Сумма,
	|		ДебиторскаяЗадолженность.СуммаВзаиморасчетов           КАК СуммаВзаиморасчетов,
	|		ДебиторскаяЗадолженность.СуммаРегл                     КАК СуммаРегл,
	|		ДебиторскаяЗадолженность.СуммаУпр                      КАК СуммаУпр,
	|
	|		ДебиторскаяЗадолженность.КорОбъектРасчетов             КАК КорОбъектРасчетов,
	|		ДебиторскаяЗадолженность.КорПартнер                    КАК КорПартнер,
	|		ДебиторскаяЗадолженность.КорОрганизация                КАК КорОрганизация,
	|		ДебиторскаяЗадолженность.КорДоговор                    КАК КорДоговор,
	|		ДебиторскаяЗадолженность.КорКонтрагент                 КАК КорКонтрагент,
	|		ДебиторскаяЗадолженность.КорНаправлениеДеятельности    КАК КорНаправлениеДеятельности
	|	ПОМЕСТИТЬ ВтРасчетовПоКлиентамПредварительная
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
	|	ГДЕ
	|		ДебиторскаяЗадолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|		И ДебиторскаяЗадолженность.СуммаВзаиморасчетов <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // кредиторская задолженность организации перед кредитором-клиентом сторнируется
	|		КредиторскаяЗадолженность.Ссылка                       КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                 КАК ВидДвижения,
	|		КредиторскаяЗадолженность.Организация                  КАК Организация,
	|		КредиторскаяЗадолженность.Партнер                      КАК Партнер,
	|		КредиторскаяЗадолженность.Контрагент                   КАК Контрагент,
	|		КредиторскаяЗадолженность.Договор                      КАК Договор,
	|		КредиторскаяЗадолженность.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|
	|		КредиторскаяЗадолженность.ОбъектРасчетов               КАК ОбъектРасчетов,
	|		КредиторскаяЗадолженность.ОбъектРасчетовЗеркальный     КАК ОбъектРасчетовЗеркальный,
	|		КредиторскаяЗадолженность.ВалютаВзаиморасчетов         КАК ВалютаВзаиморасчетов,
	|
	|		0                                                      КАК Сумма,
	|		-КредиторскаяЗадолженность.СуммаВзаиморасчетов         КАК СуммаВзаиморасчетов,
	|		-КредиторскаяЗадолженность.СуммаРегл                   КАК СуммаРегл,
	|		-КредиторскаяЗадолженность.СуммаУпр                    КАК СуммаУпр,
	|
	|		КредиторскаяЗадолженность.КорОбъектРасчетов            КАК КорОбъектРасчетов,
	|		КредиторскаяЗадолженность.КорПартнер                   КАК КорПартнер,
	|		КредиторскаяЗадолженность.КорОрганизация               КАК КорОрганизация,
	|		КредиторскаяЗадолженность.КорДоговор                   КАК КорДоговор,
	|		КредиторскаяЗадолженность.КорКонтрагент                КАК КорКонтрагент,
	|		КредиторскаяЗадолженность.КорНаправлениеДеятельности   КАК КорНаправлениеДеятельности
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК КредиторскаяЗадолженность
	|	ГДЕ
	|		КредиторскаяЗадолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|		И КредиторскаяЗадолженность.СуммаВзаиморасчетов <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// 3.
	|	ВЫБРАТЬ // перенос кредиторки по клиенту у дебитора-организации на кредиторку поставщику перед кредитором-клиентом
	|		ДанныеДокумента.Ссылка                                     КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                     КАК ВидДвижения,
	|		ДанныеДокумента.КонтрагентДебитор                          КАК Организация,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.Партнер                 КАК Партнер,
	|		ДанныеДокумента.КонтрагентКредитор                         КАК Контрагент,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.Договор                 КАК Договор,
	|		ВЫБОР КОГДА ДанныеДокумента.ОбъектРасчетовДтКт.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И ЕСТЬNULL(Направления.УчетДоходов, ЛОЖЬ)
	|				ИЛИ ДанныеДокумента.ОбъектРасчетовДтКт.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И ЕСТЬNULL(Направления.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|			ТОГДА 
	|				ДанныеДокумента.ОбъектРасчетовДтКт.НаправлениеДеятельности
	|			ИНАЧЕ 
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		КОНЕЦ                                                      КАК НаправлениеДеятельности,
	|
	|		ДанныеДокумента.ОбъектРасчетовДтКт                         КАК ОбъектРасчетов,
	|		ДанныеДокумента.ОбъектРасчетовДтКтЗеркальный               КАК ОбъектРасчетовЗеркальный,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|
	|		0                                                          КАК Сумма,
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ОбъектРасчетовДтКт.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				ТОГДА КредиторскаяЗадолженность.СуммаРегл
	|			//Для поддержки старых документов, в которых мог быть пустой объект расчетов с разными валютами.
	|			ИНАЧЕ КредиторскаяЗадолженность.СуммаВзаиморасчетов
	|		КОНЕЦ                                                      КАК СуммаВзаиморасчетов,
	|		КредиторскаяЗадолженность.СуммаРегл                        КАК СуммаРегл,
	|		КредиторскаяЗадолженность.СуммаУпр                         КАК СуммаУпр,
	|
	|		КредиторскаяЗадолженность.КорОбъектРасчетов                КАК КорОбъектРасчетов,
	|		КредиторскаяЗадолженность.КорПартнер                       КАК КорПартнер,
	|		КредиторскаяЗадолженность.КорОрганизация                   КАК КорОрганизация,
	|		КредиторскаяЗадолженность.КорДоговор                       КАК КорДоговор,
	|		КредиторскаяЗадолженность.КорКонтрагент                    КАК КорКонтрагент,
	|		КредиторскаяЗадолженность.КорНаправлениеДеятельности       КАК КорНаправлениеДеятельности
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК КредиторскаяЗадолженность
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДокумента КАК ДанныеДокумента ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК Направления
	|			ПО Направления.Ссылка = ДанныеДокумента.ОбъектРасчетовДтКт.НаправлениеДеятельности
	|	ГДЕ
	|		ДанныеДокумента.ДебиторОрганизация И ДанныеДокумента.КонтрагентКредитор <> ДанныеДокумента.КонтрагентДебитор
	|		И КредиторскаяЗадолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|		И КредиторскаяЗадолженность.СуммаРегл <> 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	//4.
	|	ВЫБРАТЬ // добавление дебиторской задолженности по клиентам у организации-кредитора
	|		ДанныеДокумента.Ссылка                                     КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                     КАК ВидДвижения,
	|		ДанныеДокумента.КонтрагентКредитор                         КАК Организация,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.Партнер                 КАК Партнер,
	|		ДанныеДокумента.КонтрагентДебитор                          КАК Контрагент,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.Договор                 КАК Договор,
	|		ВЫБОР КОГДА ДанныеДокумента.ОбъектРасчетовДтКт.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И ЕСТЬNULL(Направления.УчетДоходов, ЛОЖЬ)
	|				ИЛИ ДанныеДокумента.ОбъектРасчетовДтКт.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И ЕСТЬNULL(Направления.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|			ТОГДА 
	|				ДанныеДокумента.ОбъектРасчетовДтКт.НаправлениеДеятельности
	|			ИНАЧЕ 
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		КОНЕЦ                                                      КАК НаправлениеДеятельности,
	|
	|		ДанныеДокумента.ОбъектРасчетовДтКт                         КАК ОбъектРасчетов,
	|		ДанныеДокумента.ОбъектРасчетовДтКтЗеркальный               КАК ОбъектРасчетовЗеркальный,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|
	|		0                                                          КАК Сумма,
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ОбъектРасчетовДтКт.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				ТОГДА ДебиторскаяЗадолженность.СуммаРегл
	|			//Для поддержки старых документов, в которых мог быть пустой объект расчетов с разными валютами.
	|			ИНАЧЕ ДебиторскаяЗадолженность.СуммаВзаиморасчетов
	|		КОНЕЦ                                                      КАК СуммаВзаиморасчетов,
	|		ДебиторскаяЗадолженность.СуммаРегл                         КАК СуммаРегл,
	|		ДебиторскаяЗадолженность.СуммаУпр                          КАК СуммаУпр,
	|
	|		ДебиторскаяЗадолженность.КорОбъектРасчетов                 КАК КорОбъектРасчетов,
	|		ДебиторскаяЗадолженность.КорПартнер                        КАК КорПартнер,
	|		ДебиторскаяЗадолженность.КорОрганизация                    КАК КорОрганизация,
	|		ДебиторскаяЗадолженность.КорДоговор                        КАК КорДоговор,
	|		ДебиторскаяЗадолженность.КорКонтрагент                     КАК КорКонтрагент,
	|		ДебиторскаяЗадолженность.КорНаправлениеДеятельности        КАК КорНаправлениеДеятельности
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДокумента КАК ДанныеДокумента
	|				ПО ИСТИНА
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК Направления
	|				ПО Направления.Ссылка = ДанныеДокумента.ОбъектРасчетовДтКт.НаправлениеДеятельности
	|	ГДЕ
	|		ДанныеДокумента.КредиторОрганизация
	|		И НЕ ДанныеДокумента.ДебиторОрганизация 
	|		И ДанныеДокумента.КонтрагентКредитор <> ДанныеДокумента.КонтрагентДебитор
	// клиент контр клиент орг
	|		И ДебиторскаяЗадолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|		И ДебиторскаяЗадолженность.СуммаРегл <> 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// 1. Организация - КонтрагентДт - ОбъектРасчетовДт - Приход - -СуммаДт - РасчетыСПоставщиком 
// 2. Организация - КонтрагентКт - ОбъектРасчетовКт - Приход - СуммаКт - РасчетыСПоставщиком
// 3. КонтрагентДт(Орг) - КонтрагентКт - ОбъектРасчетовДтКт - Приход - -СуммаКт - РасчетыСПоставщиком
// 4. КонтрагентКт(Орг) - КонтрагентДт(Не Орг) - ОбъектРасчетовДтКт - Приход - СуммаДт - РасчетыСПоставщиком
// 5. Организация - ОрганизацияКт - ОбъектРасчетовИнтеркампани - Приход - Сумма
//
Функция ТекстЗапросаВтРасчетовПоПоставщикамиПредварительная()
	
	ТекстЗапроса = "
	// 1. Расчеты по основной организации
	|	ВЫБРАТЬ // дебиторская задолженность дебитора-поставщика перед организацией сторнируется
	|		ДебиторскаяЗадолженность.Ссылка                        КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                 КАК ВидДвижения,
	|		ДебиторскаяЗадолженность.Организация                   КАК Организация,
	|		ДебиторскаяЗадолженность.Партнер                       КАК Партнер,
	|		ДебиторскаяЗадолженность.Контрагент                    КАК Контрагент,
	|		ДебиторскаяЗадолженность.Договор                       КАК Договор,
	|		ДебиторскаяЗадолженность.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|
	|		ДебиторскаяЗадолженность.ОбъектРасчетов                КАК ОбъектРасчетов,
	|		ДебиторскаяЗадолженность.ОбъектРасчетовЗеркальный      КАК ОбъектРасчетовЗеркальный,
	|		ДебиторскаяЗадолженность.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|
	|		-ДебиторскаяЗадолженность.Сумма                        КАК Сумма,
	|		-ДебиторскаяЗадолженность.СуммаВзаиморасчетов          КАК СуммаВзаиморасчетов,
	|		-ДебиторскаяЗадолженность.СуммаРегл                    КАК СуммаРегл,
	|		-ДебиторскаяЗадолженность.СуммаУпр                     КАК СуммаУпр,
	|
	|		ДебиторскаяЗадолженность.КорОбъектРасчетов             КАК КорОбъектРасчетов,
	|		ДебиторскаяЗадолженность.КорПартнер                    КАК КорПартнер,
	|		ДебиторскаяЗадолженность.КорОрганизация                КАК КорОрганизация,
	|		ДебиторскаяЗадолженность.КорДоговор                    КАК КорДоговор,
	|		ДебиторскаяЗадолженность.КорКонтрагент                 КАК КорКонтрагент,
	|		ДебиторскаяЗадолженность.КорНаправлениеДеятельности    КАК КорНаправлениеДеятельности
	|	ПОМЕСТИТЬ ВтРасчетовПоПоставщикамПредварительная
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
	|	ГДЕ
	|		ДебиторскаяЗадолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|		И ДебиторскаяЗадолженность.СуммаВзаиморасчетов <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// 2.
	|	ВЫБРАТЬ // кредиторская задолженность организации перед кредитором-поставщиком считается оплаченной
	|		КредиторскаяЗадолженность.Ссылка                      КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                КАК ВидДвижения,
	|		КредиторскаяЗадолженность.Организация                 КАК Организация,
	|		КредиторскаяЗадолженность.Партнер                     КАК Партнер,
	|		КредиторскаяЗадолженность.Контрагент                  КАК Контрагент,
	|		КредиторскаяЗадолженность.Договор                     КАК Договор,
	|		КредиторскаяЗадолженность.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|
	|		КредиторскаяЗадолженность.ОбъектРасчетов              КАК ОбъектРасчетов,
	|		КредиторскаяЗадолженность.ОбъектРасчетовЗеркальный    КАК ОбъектРасчетовЗеркальный,
	|		КредиторскаяЗадолженность.ВалютаВзаиморасчетов        КАК ВалютаВзаиморасчетов,
	|
	|		КредиторскаяЗадолженность.Сумма                       КАК Сумма,
	|		КредиторскаяЗадолженность.СуммаВзаиморасчетов         КАК СуммаВзаиморасчетов,
	|		КредиторскаяЗадолженность.СуммаРегл                   КАК СуммаРегл,
	|		КредиторскаяЗадолженность.СуммаУпр                    КАК СуммаУпр,
	|
	|		КредиторскаяЗадолженность.КорОбъектРасчетов           КАК КорОбъектРасчетов,
	|		КредиторскаяЗадолженность.КорПартнер                  КАК КорПартнер,
	|		КредиторскаяЗадолженность.КорОрганизация              КАК КорОрганизация,
	|		КредиторскаяЗадолженность.КорДоговор                  КАК КорДоговор,
	|		КредиторскаяЗадолженность.КорКонтрагент               КАК КорКонтрагент,
	|		КредиторскаяЗадолженность.КорНаправлениеДеятельности  КАК КорНаправлениеДеятельности
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК КредиторскаяЗадолженность
	|	ГДЕ
	|		КредиторскаяЗадолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|		И КредиторскаяЗадолженность.СуммаВзаиморасчетов <> 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// 3.(РасчетыСПоставщиком, Дебитор-Организация)
	|	ВЫБРАТЬ // перенос кредиторки по поставщику у дебитора-организации на кредиторку по поставщику перед кредитором-поставщиком
	|		ДанныеДокумента.Ссылка                                     КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                     КАК ВидДвижения,
	|		ДанныеДокумента.КонтрагентДебитор                          КАК Организация,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.Партнер                 КАК Партнер,
	|		ДанныеДокумента.КонтрагентКредитор                         КАК Контрагент,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.Договор                 КАК Договор,
	|		ВЫБОР КОГДА ДанныеДокумента.ОбъектРасчетовДтКт.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И ЕСТЬNULL(Направления.УчетДоходов, ЛОЖЬ)
	|				ИЛИ ДанныеДокумента.ОбъектРасчетовДтКт.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И ЕСТЬNULL(Направления.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|			ТОГДА 
	|				ДанныеДокумента.ОбъектРасчетовДтКт.НаправлениеДеятельности
	|			ИНАЧЕ 
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		КОНЕЦ                                                      КАК НаправлениеДеятельности,
	|
	|		ДанныеДокумента.ОбъектРасчетовДтКт                         КАК ОбъектРасчетов,
	|		ДанныеДокумента.ОбъектРасчетовДтКтЗеркальный               КАК ОбъектРасчетовЗеркальный,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|
	|		0                                                          КАК Сумма,
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ОбъектРасчетовДтКт.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				ТОГДА -КредиторскаяЗадолженность.СуммаРегл
	|			//Для поддержки старых документов, в которых мог быть пустой объект расчетов с разными валютами.
	|			ИНАЧЕ -КредиторскаяЗадолженность.СуммаВзаиморасчетов
	|		КОНЕЦ                                                      КАК СуммаВзаиморасчетов,
	|		-КредиторскаяЗадолженность.СуммаРегл                       КАК СуммаРегл,
	|		-КредиторскаяЗадолженность.СуммаУпр                        КАК СуммаУпр,
	|
	|		КредиторскаяЗадолженность.КорОбъектРасчетов                КАК КорОбъектРасчетов,
	|		КредиторскаяЗадолженность.КорПартнер                       КАК КорПартнер,
	|		КредиторскаяЗадолженность.КорОрганизация                   КАК КорОрганизация,
	|		КредиторскаяЗадолженность.КорДоговор                       КАК КорДоговор,
	|		КредиторскаяЗадолженность.КорКонтрагент                    КАК КорКонтрагент,
	|		КредиторскаяЗадолженность.КорНаправлениеДеятельности       КАК КорНаправлениеДеятельности
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК КредиторскаяЗадолженность
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДокумента КАК ДанныеДокумента
	|				ПО ИСТИНА
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК Направления
	|				ПО Направления.Ссылка = ДанныеДокумента.ОбъектРасчетовДтКт.НаправлениеДеятельности
	|	ГДЕ
	|		ДанныеДокумента.ДебиторОрганизация И ДанныеДокумента.КонтрагентКредитор <> ДанныеДокумента.КонтрагентДебитор
	|		И КредиторскаяЗадолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|		И КредиторскаяЗадолженность.СуммаРегл <> 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// 4.(РасчетыСПоставщиком, Кредитор-Организация)
	|	ВЫБРАТЬ // перенос кредиторки по поставщику у дебитора-организации на кредиторку по поставщику перед кредитором-поставщиком
	|		ДанныеДокумента.Ссылка                                     КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                     КАК ВидДвижения,
	|		ДанныеДокумента.КонтрагентКредитор                         КАК Организация,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.Партнер                 КАК Партнер,
	|		ДанныеДокумента.КонтрагентДебитор                          КАК Контрагент,
	|		ДанныеДокумента.ОбъектРасчетовДтКт.Договор                 КАК Договор,
	|		ВЫБОР КОГДА ДанныеДокумента.ОбъектРасчетовДтКт.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И ЕСТЬNULL(Направления.УчетДоходов, ЛОЖЬ)
	|				ИЛИ ДанныеДокумента.ОбъектРасчетовДтКт.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И ЕСТЬNULL(Направления.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|			ТОГДА 
	|				ДанныеДокумента.ОбъектРасчетовДтКт.НаправлениеДеятельности
	|			ИНАЧЕ 
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		КОНЕЦ                                                      КАК НаправлениеДеятельности,
	|
	|		ДанныеДокумента.ОбъектРасчетовДтКт                         КАК ОбъектРасчетов,
	|		ДанныеДокумента.ОбъектРасчетовДтКтЗеркальный               КАК ОбъектРасчетовЗеркальный,
	|		ДебиторскаяЗадолженность.ВалютаВзаиморасчетов              КАК ВалютаВзаиморасчетов,
	|
	|		ДебиторскаяЗадолженность.Сумма                             КАК Сумма,
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ОбъектРасчетовДтКт.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				ТОГДА ДебиторскаяЗадолженность.СуммаРегл
	|			//Для поддержки старых документов, в которых мог быть пустой объект расчетов с разными валютами.
	|			ИНАЧЕ ДебиторскаяЗадолженность.СуммаВзаиморасчетов
	|		КОНЕЦ                                                      КАК СуммаВзаиморасчетов,
	|		ДебиторскаяЗадолженность.СуммаРегл                         КАК СуммаРегл,
	|		ДебиторскаяЗадолженность.СуммаУпр                          КАК СуммаУпр,
	|
	|		ДебиторскаяЗадолженность.КорОбъектРасчетов                 КАК КорОбъектРасчетов,
	|		ДебиторскаяЗадолженность.КорПартнер                        КАК КорПартнер,
	|		ДебиторскаяЗадолженность.КорОрганизация                    КАК КорОрганизация,
	|		ДебиторскаяЗадолженность.КорДоговор                        КАК КорДоговор,
	|		ДебиторскаяЗадолженность.КорКонтрагент                     КАК КорКонтрагент,
	|		ДебиторскаяЗадолженность.КорНаправлениеДеятельности        КАК КорНаправлениеДеятельности
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДокумента КАК ДанныеДокумента
	|				ПО ИСТИНА
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК Направления
	|				ПО Направления.Ссылка = ДанныеДокумента.ОбъектРасчетовДтКт.НаправлениеДеятельности
	|	ГДЕ
	|		ДанныеДокумента.КредиторОрганизация
	|		И НЕ ДанныеДокумента.ДебиторОрганизация
	|		И ДанныеДокумента.КонтрагентКредитор <> ДанныеДокумента.КонтрагентДебитор
	|		И ДебиторскаяЗадолженность.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|		И ДебиторскаяЗадолженность.СуммаВзаиморасчетов <> 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// 5. (МеждуОрганизациями)
	|	ВЫБРАТЬ // перенос дебиторки по клиентам у организации на организацию-кредитора
	|		ДанныеДокумента.Ссылка                                             КАК Ссылка,
	|		ВЫБОР КОГДА ДанныеДокумента.Организация = ДанныеДокумента.ОбъектРасчетовИнтеркампани.Организация
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОНЕЦ                                                              КАК ВидДвижения,
	|		ВЫБОР КОГДА ДанныеДокумента.Организация = ДанныеДокумента.ОбъектРасчетовИнтеркампани.Организация
	|			ТОГДА ДанныеДокумента.ОрганизацияКредитор
	|			ИНАЧЕ ДанныеДокумента.Организация
	|		КОНЕЦ                                                              КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)                      КАК Партнер,
	|		ВЫБОР КОГДА ДанныеДокумента.Организация = ДанныеДокумента.ОбъектРасчетовИнтеркампани.Организация
	|			ТОГДА ДанныеДокумента.Организация
	|			ИНАЧЕ ДанныеДокумента.ОрганизацияКредитор
	|		КОНЕЦ                                                              КАК Контрагент,
	|		ДанныеДокумента.ОбъектРасчетовИнтеркампани.Договор                 КАК Договор,
	|		ВЫБОР КОГДА ДанныеДокумента.ОбъектРасчетовДтКт.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И ЕСТЬNULL(Направления.УчетДоходов, ЛОЖЬ)
	|				ИЛИ ДанныеДокумента.ОбъектРасчетовДтКт.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И ЕСТЬNULL(Направления.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|			ТОГДА 
	|				ДанныеДокумента.ОбъектРасчетовИнтеркампани.НаправлениеДеятельности
	|			ИНАЧЕ 
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		КОНЕЦ                                                      КАК НаправлениеДеятельности,
	|
	|		ВЫБОР КОГДА ДанныеДокумента.Организация = ДанныеДокумента.ОбъектРасчетовИнтеркампани.Организация
	|			ТОГДА ДанныеДокумента.ОбъектРасчетовИнтеркампаниЗеркальный
	|			ИНАЧЕ ДанныеДокумента.ОбъектРасчетовИнтеркампани
	|		КОНЕЦ                                                              КАК ОбъектРасчетов,
	|		ВЫБОР КОГДА ДанныеДокумента.Организация = ДанныеДокумента.ОбъектРасчетовИнтеркампани.Организация
	|			ТОГДА ДанныеДокумента.ОбъектРасчетовИнтеркампани
	|			ИНАЧЕ ДанныеДокумента.ОбъектРасчетовИнтеркампаниЗеркальный
	|		КОНЕЦ                                                              КАК ОбъектРасчетовЗеркальный,
	|		ДебиторскаяЗадолженность.ВалютаВзаиморасчетов                      КАК ВалютаВзаиморасчетов,
	|
	|		0                                                                  КАК Сумма,
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ОбъектРасчетовИнтеркампани.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				ТОГДА ДебиторскаяЗадолженность.СуммаРегл
	|			//Для поддержки старых документов, в которых мог быть пустой объект расчетов с разными валютами.
	|			ИНАЧЕ ДебиторскаяЗадолженность.СуммаВзаиморасчетов
	|		КОНЕЦ                                                              КАК СуммаВзаиморасчетов,
	|		ДебиторскаяЗадолженность.СуммаРегл                                 КАК СуммаРегл,
	|		ДебиторскаяЗадолженность.СуммаУпр                                  КАК СуммаУпр,
	|
	|		НЕОПРЕДЕЛЕНО                                                       КАК КорОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                                                       КАК КорПартнер,
	|		НЕОПРЕДЕЛЕНО                                                       КАК КорОрганизация,
	|		НЕОПРЕДЕЛЕНО                                                       КАК КорДоговор,
	|		НЕОПРЕДЕЛЕНО                                                       КАК КорКонтрагент,
	|		НЕОПРЕДЕЛЕНО                                                       КАК КорНаправлениеДеятельности
	|	ИЗ 
	|		ВтДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДокумента КАК ДанныеДокумента
	|				ПО ИСТИНА
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК Направления
	|				ПО Направления.Ссылка = ДанныеДокумента.ОбъектРасчетовДтКт.НаправлениеДеятельности
	|	ГДЕ
	|		ДанныеДокумента.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями))
	|		И ДебиторскаяЗадолженность.СуммаРегл <> 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Объединяем предварительные расчеты с зеркальными по интеркампани
Функция ТекстЗапросаВтРасчетыСКлиентами()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗадолженностьПредварительная.Ссылка                        КАК Ссылка,
	|	ЗадолженностьПредварительная.ВидДвижения                   КАК ВидДвижения,
	|	ЗадолженностьПредварительная.Организация                   КАК Организация,
	|	ЗадолженностьПредварительная.Партнер                       КАК Партнер,
	|	ЗадолженностьПредварительная.Контрагент                    КАК Контрагент,
	|	ЗадолженностьПредварительная.ОбъектРасчетов                КАК ОбъектРасчетов,
	|	ЗадолженностьПредварительная.Договор                       КАК Договор,
	|	ВЫБОР
	|		КОГДА ЗадолженностьПредварительная.НаправлениеДеятельности.УчетДоходов
	|			ТОГДА ЗадолженностьПредварительная.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) 
	|	КОНЕЦ                                                      КАК НаправлениеДеятельности,
	|	ЗадолженностьПредварительная.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|
	|	ЗадолженностьПредварительная.Сумма                         КАК Сумма,
	|	ЗадолженностьПредварительная.СуммаВзаиморасчетов           КАК СуммаВзаиморасчетов,
	|	ЗадолженностьПредварительная.СуммаРегл                     КАК СуммаРегл,
	|	ЗадолженностьПредварительная.СуммаУпр                      КАК СуммаУпр,
	|
	|	ЗадолженностьПредварительная.КорОбъектРасчетов             КАК КорОбъектРасчетов,
	|	ЗадолженностьПредварительная.КорПартнер                    КАК КорПартнер,
	|	ЗадолженностьПредварительная.КорОрганизация                КАК КорОрганизация,
	|	ЗадолженностьПредварительная.КорДоговор                    КАК КорДоговор,
	|	ЗадолженностьПредварительная.КорКонтрагент                 КАК КорКонтрагент,
	|	ВЫБОР
	|		КОГДА ЗадолженностьПредварительная.КорНаправлениеДеятельности.УчетДоходов
	|			ТОГДА ЗадолженностьПредварительная.КорНаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) 
	|	КОНЕЦ                                                      КАК КорНаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ВтРасчетовПоКлиентам
	|ИЗ
	|	ВтРасчетовПоКлиентамПредварительная КАК ЗадолженностьПредварительная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадолженностьПоставщикам.Ссылка                                              КАК Ссылка,
	|	ВЫБОР КОГДА ЗадолженностьПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
	|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ                                                                        КАК ВидДвижения,
	|	ЗадолженностьПоставщикам.Контрагент                                          КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)                                КАК Партнер,
	|	ЗадолженностьПоставщикам.Организация                                         КАК Контрагент,
	|	ЗадолженностьПоставщикам.ОбъектРасчетовЗеркальный                            КАК ОбъектРасчетов,
	|	ЗадолженностьПоставщикам.ОбъектРасчетовЗеркальный.Договор                    КАК Договор,
	|	ВЫБОР
	|		КОГДА ЗадолженностьПоставщикам.ОбъектРасчетовЗеркальный.НаправлениеДеятельности.УчетДоходов
	|			ТОГДА ЗадолженностьПоставщикам.ОбъектРасчетовЗеркальный.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) 
	|	КОНЕЦ                                                                        КАК НаправлениеДеятельности,
	|	ЗадолженностьПоставщикам.ОбъектРасчетовЗеркальный.ВалютаВзаиморасчетов       КАК ВалютаВзаиморасчетов,
	|
	|	ЗадолженностьПоставщикам.Сумма                                               КАК Сумма,
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗадолженностьПоставщикам.ОбъектРасчетовЗеркальный.ВалютаВзаиморасчетов, Неопределено) = &ВалютаРегламентированногоУчета
	|				ТОГДА ЗадолженностьПоставщикам.СуммаРегл
	|			//Для поддержки старых документов, в которых мог быть пустой объект расчетов с разными валютами.
	|			ИНАЧЕ ЗадолженностьПоставщикам.СуммаВзаиморасчетов
	|	КОНЕЦ                                                                        КАК СуммаВзаиморасчетов,
	|	ЗадолженностьПоставщикам.СуммаРегл                                           КАК СуммаРегл,
	|	ЗадолженностьПоставщикам.СуммаУпр                                            КАК СуммаУпр,
	|
	|	НЕОПРЕДЕЛЕНО                                                                 КАК КорОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК КорПартнер,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК КорДоговор,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК КорКонтрагент,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК КорНаправлениеДеятельности
	|
	|ИЗ
	|	ВтРасчетовПоПоставщикамПредварительная КАК ЗадолженностьПоставщикам
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ЗадолженностьПоставщикам.Контрагент) = ТИП(Справочник.Организации)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРасчетовПоПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗадолженностьПредварительная.Ссылка                  КАК Ссылка,
	|	ЗадолженностьПредварительная.ВидДвижения             КАК ВидДвижения,
	|	ЗадолженностьПредварительная.Организация             КАК Организация,
	|	ЗадолженностьПредварительная.Партнер                 КАК Партнер,
	|	ЗадолженностьПредварительная.Контрагент              КАК Контрагент,
	|	ЗадолженностьПредварительная.ОбъектРасчетов          КАК ОбъектРасчетов,
	|	ЗадолженностьПредварительная.Договор                 КАК Договор,
	|	ВЫБОР
	|		КОГДА ЗадолженностьПредварительная.НаправлениеДеятельности.УчетРасчетовСПоставщиками
	|			ТОГДА ЗадолженностьПредварительная.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) 
	|	КОНЕЦ                                                КАК НаправлениеДеятельности,
	|	ЗадолженностьПредварительная.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|
	|	ЗадолженностьПредварительная.Сумма                   КАК Сумма,
	|	ЗадолженностьПредварительная.СуммаВзаиморасчетов     КАК СуммаВзаиморасчетов,
	|	ЗадолженностьПредварительная.СуммаРегл               КАК СуммаРегл,
	|	ЗадолженностьПредварительная.СуммаУпр                КАК СуммаУпр,
	|
	|	ЗадолженностьПредварительная.КорОбъектРасчетов             КАК КорОбъектРасчетов,
	|	ЗадолженностьПредварительная.КорПартнер                    КАК КорПартнер,
	|	ЗадолженностьПредварительная.КорОрганизация                КАК КорОрганизация,
	|	ЗадолженностьПредварительная.КорДоговор                    КАК КорДоговор,
	|	ЗадолженностьПредварительная.КорКонтрагент                 КАК КорКонтрагент,
	|	ВЫБОР
	|		КОГДА ЗадолженностьПредварительная.КорНаправлениеДеятельности.УчетРасчетовСПоставщиками
	|			ТОГДА ЗадолженностьПредварительная.КорНаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) 
	|	КОНЕЦ                                                      КАК КорНаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ВтРасчетовПоПоставщикам
	|ИЗ
	|	ВтРасчетовПоПоставщикамПредварительная КАК ЗадолженностьПредварительная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадолженностьКлиентов.Ссылка                                              КАК Ссылка,
	|	ВЫБОР КОГДА ЗадолженностьКлиентов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
	|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ                                                                     КАК ВидДвижения,
	|	ЗадолженностьКлиентов.Контрагент                                          КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)                             КАК Партнер,
	|	ЗадолженностьКлиентов.Организация                                         КАК Контрагент,
	|	ЗадолженностьКлиентов.ОбъектРасчетовЗеркальный                            КАК ОбъектРасчетов,
	|	ЗадолженностьКлиентов.ОбъектРасчетовЗеркальный.Договор                    КАК Договор,
	|	ВЫБОР
	|		КОГДА ЗадолженностьКлиентов.ОбъектРасчетовЗеркальный.НаправлениеДеятельности.УчетРасчетовСПоставщиками
	|			ТОГДА ЗадолженностьКлиентов.ОбъектРасчетовЗеркальный.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) 
	|	КОНЕЦ                                                                     КАК НаправлениеДеятельности,
	|	ЗадолженностьКлиентов.ОбъектРасчетовЗеркальный.ВалютаВзаиморасчетов       КАК ВалютаВзаиморасчетов,
	|
	|	ЗадолженностьКлиентов.Сумма                                               КАК Сумма,
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗадолженностьКлиентов.ОбъектРасчетовЗеркальный.ВалютаВзаиморасчетов, Неопределено) = &ВалютаРегламентированногоУчета
	|				ТОГДА ЗадолженностьКлиентов.СуммаРегл
	|			//Для поддержки старых документов, в которых мог быть пустой объект расчетов с разными валютами.
	|			ИНАЧЕ ЗадолженностьКлиентов.СуммаВзаиморасчетов
	|	КОНЕЦ                                                                     КАК СуммаВзаиморасчетов,
	|	ЗадолженностьКлиентов.СуммаРегл                                           КАК СуммаРегл,
	|	ЗадолженностьКлиентов.СуммаУпр                                            КАК СуммаУпр,
	|
	|	НЕОПРЕДЕЛЕНО                                                              КАК КорОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО                                                              КАК КорПартнер,
	|	НЕОПРЕДЕЛЕНО                                                              КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО                                                              КАК КорДоговор,
	|	НЕОПРЕДЕЛЕНО                                                              КАК КорКонтрагент,
	|	НЕОПРЕДЕЛЕНО                                                              КАК КорНаправлениеДеятельности
	|
	|ИЗ
	|	ВтРасчетовПоКлиентамПредварительная КАК ЗадолженностьКлиентов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ЗадолженностьКлиентов.Контрагент) = ТИП(Справочник.Организации)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыСКлиентами()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка         КАК Регистратор,
	|	ДанныеДокумента.Дата   КАК Период,
	|	ДанныеДокумента.Дата   КАК ДатаРегистратора,
	|	ДанныеДокумента.Номер  КАК НомерРегистратора,
	|	ТабличнаяЧасть.ВидДвижения                     КАК ВидДвижения,
	|	
	|	// Измерения
	|	ЕСТЬNULL(РегистрАналитикаУчетаПоПартнерам.КлючАналитики, НЕОПРЕДЕЛЕНО) КАК АналитикаУчетаПоПартнерам,
	|
	|	ТабличнаяЧасть.Организация                                            КАК Организация,
	|	ТабличнаяЧасть.Контрагент                                             КАК Контрагент,
	|	ТабличнаяЧасть.Партнер                                                КАК Партнер,
	|	ТабличнаяЧасть.Договор                                                КАК Договор,
	|	ТабличнаяЧасть.НаправлениеДеятельности                                КАК НаправлениеДеятельности,
	|
	|	ТабличнаяЧасть.ОбъектРасчетов                                         КАК ОбъектРасчетов,
	|	ТабличнаяЧасть.ВалютаВзаиморасчетов                                   КАК Валюта,
	|	
	|	// Сумма в валюте взаиморассчетов.
	|	ТабличнаяЧасть.СуммаВзаиморасчетов                                    КАК Сумма,
	|	ТабличнаяЧасть.СуммаВзаиморасчетов                                    КАК КОплате,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета ТОГДА
	|			ТабличнаяЧасть.СуммаВзаиморасчетов
	|		ИНАЧЕ
	|			ТабличнаяЧасть.СуммаРегл
	|	КОНЕЦ                                                                 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета ТОГДА
	|			ТабличнаяЧасть.СуммаВзаиморасчетов
	|		ИНАЧЕ
	|			ТабличнаяЧасть.СуммаУпр
	|	КОНЕЦ                                                                 КАК СуммаУпр,
	|	
	|	// Реквизиты
	|	&ХозяйственнаяОперация                                                КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет)                        КАК ФормаОплаты,
	|	&ВалютаРегламентированногоУчета                                       КАК ВалютаДокумента,
	|
	|	ЕСТЬNULL(КорРегистрАналитикаУчетаПоПартнерам.КлючАналитики, НЕОПРЕДЕЛЕНО) КАК КорАналитикаУчетаПоПартнерам,
	|	ТабличнаяЧасть.КорОбъектРасчетов                                      КАК КорОбъектРасчетов,
	|	ТабличнаяЧасть.КорПартнер                                             КАК КорПартнер,
	|	ТабличнаяЧасть.КорОрганизация                                         КАК КорОрганизация,
	|	ТабличнаяЧасть.КорДоговор                                             КАК КорДоговор,
	|	ТабличнаяЧасть.КорКонтрагент                                          КАК КорКонтрагент,
	|	ТабличнаяЧасть.КорНаправлениеДеятельности                             КАК КорНаправлениеДеятельности,
	|	ВЫБОР КОГДА ТабличнаяЧасть.СуммаВзаиморасчетов > 0 И ТабличнаяЧасть.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИЛИ ТабличнаяЧасть.СуммаВзаиморасчетов < 0 И ТабличнаяЧасть.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата,ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ                                                                 КАК ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносДолга)
	|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер)
	|			ТОГДА 3
	|		ИНАЧЕ 1
	|	КОНЕЦ                                                                 КАК Вид,
	|	&НастройкаХозОперации                                                 КАК НастройкаХозяйственнойОперации,
	|	ТабличнаяЧасть.ОбъектРасчетов.УникальныйИдентификатор                 КАК ИдентификаторФинЗаписи
	|	
	|ИЗ
	|	ВтРасчетовПоКлиентам КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДокумента КАК ДанныеДокумента ПО ИСТИНА
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО
	|			ТабличнаяЧасть.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|			И ТабличнаяЧасть.Партнер     = РегистрАналитикаУчетаПоПартнерам.Партнер
	|			И ТабличнаяЧасть.Контрагент  = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|			И ТабличнаяЧасть.Договор     = РегистрАналитикаУчетаПоПартнерам.Договор
	|			И ТабличнаяЧасть.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПоПартнерам КАК КорРегистрАналитикаУчетаПоПартнерам
	|		ПО
	|			ТабличнаяЧасть.КорОрганизация = КорРегистрАналитикаУчетаПоПартнерам.Организация
	|			И ТабличнаяЧасть.КорПартнер     = КорРегистрАналитикаУчетаПоПартнерам.Партнер
	|			И ТабличнаяЧасть.КорКонтрагент  = КорРегистрАналитикаУчетаПоПартнерам.Контрагент
	|			И ТабличнаяЧасть.КорДоговор     = КорРегистрАналитикаУчетаПоПартнерам.Договор
	|			И ТабличнаяЧасть.КорНаправлениеДеятельности = КорРегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                                 КАК Регистратор,
	|	ДанныеДокумента.Дата                                                   КАК Период,
	|	ДанныеДокумента.Дата                                                   КАК ДатаРегистратора,
	|	ДанныеДокумента.Номер                                                  КАК НомерРегистратора,
	|	ТабличнаяЧасть.ВидДвижения                                             КАК ВидДвижения,
	|	
	|	ЕСТЬNULL(РегистрАналитикаУчетаПоПартнерам.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ТабличнаяЧасть.Организация                                             КАК Организация,
	|	ТабличнаяЧасть.Контрагент                                              КАК Контрагент,
	|	ТабличнаяЧасть.Партнер                                                 КАК Партнер,
	|	ТабличнаяЧасть.Договор                                                 КАК Договор,
	|	ТабличнаяЧасть.НаправлениеДеятельности                                 КАК НаправлениеДеятельности,
	|
	|	ТабличнаяЧасть.ОбъектРасчетов                                          КАК ОбъектРасчетов,
	|	ТабличнаяЧасть.ВалютаВзаиморасчетов                                    КАК Валюта,
	|	
	|	// Ресурсы
	|	// Сумма в валюте взаиморассчетов
	|	ТабличнаяЧасть.СуммаВзаиморасчетов                                     КАК Сумма,
	|	ТабличнаяЧасть.СуммаВзаиморасчетов                                     КАК КОплате,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета ТОГДА
	|			ТабличнаяЧасть.СуммаВзаиморасчетов
	|		ИНАЧЕ
	|			ТабличнаяЧасть.СуммаРегл
	|	КОНЕЦ                                                                  КАК СуммаРегл,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета ТОГДА
	|			ТабличнаяЧасть.СуммаВзаиморасчетов
	|		ИНАЧЕ
	|			ТабличнаяЧасть.СуммаУпр
	|	КОНЕЦ                                                                  КАК СуммаУпр,
	|	
	|	// Реквизиты
	|	&ХозяйственнаяОперация                                                  КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет)                          КАК ФормаОплаты,
	|	&ВалютаРегламентированногоУчета                                         КАК ВалютаДокумента,
	|
	|	ЕСТЬNULL(КорРегистрАналитикаУчетаПоПартнерам.КлючАналитики, НЕОПРЕДЕЛЕНО) КАК КорАналитикаУчетаПоПартнерам,
	|	ТабличнаяЧасть.КорОбъектРасчетов                                      КАК КорОбъектРасчетов,
	|	ТабличнаяЧасть.КорПартнер                                             КАК КорПартнер,
	|	ТабличнаяЧасть.КорОрганизация                                         КАК КорОрганизация,
	|	ТабличнаяЧасть.КорДоговор                                             КАК КорДоговор,
	|	ТабличнаяЧасть.КорКонтрагент                                          КАК КорКонтрагент,
	|	ТабличнаяЧасть.КорНаправлениеДеятельности                             КАК КорНаправлениеДеятельности,
	|	ВЫБОР КОГДА ТабличнаяЧасть.СуммаВзаиморасчетов > 0 И ТабличнаяЧасть.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИЛИ ТабличнаяЧасть.СуммаВзаиморасчетов < 0 И ТабличнаяЧасть.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ                                                                 КАК ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносДолга)
	|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер)
	|			ТОГДА 3
	|		ИНАЧЕ 1
	|	КОНЕЦ                                                                 КАК Вид,
	|	&НастройкаХозОперации                                                 КАК НастройкаХозяйственнойОперации,
	|	ТабличнаяЧасть.ОбъектРасчетов.УникальныйИдентификатор                 КАК ИдентификаторФинЗаписи
	|	
	|ИЗ
	|	ВтРасчетовПоПоставщикам КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеДокумента КАК ДанныеДокумента ПО ИСТИНА
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО
	|			ТабличнаяЧасть.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|			И ТабличнаяЧасть.Партнер     = РегистрАналитикаУчетаПоПартнерам.Партнер
	|			И ТабличнаяЧасть.Контрагент  = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|			И ТабличнаяЧасть.Договор     = РегистрАналитикаУчетаПоПартнерам.Договор
	|			И ТабличнаяЧасть.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПоПартнерам КАК КорРегистрАналитикаУчетаПоПартнерам
	|		ПО
	|			ТабличнаяЧасть.КорОрганизация = КорРегистрАналитикаУчетаПоПартнерам.Организация
	|			И ТабличнаяЧасть.КорПартнер     = КорРегистрАналитикаУчетаПоПартнерам.Партнер
	|			И ТабличнаяЧасть.КорКонтрагент  = КорРегистрАналитикаУчетаПоПартнерам.Контрагент
	|			И ТабличнаяЧасть.КорДоговор     = КорРегистрАналитикаУчетаПоПартнерам.Договор
	|			И ТабличнаяЧасть.КорНаправлениеДеятельности = КорРегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРасчетыПоЗадолженности()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Задолженность.ВидДвижения КАК ВидДвижения,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задолженность.Договор КАК Договор,
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.СуммаРегл КАК СуммаРегл,
	|	Задолженность.СуммаУпр КАК СуммаУпр,
	|	Задолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ВтРасчетыПоЗадолженности
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР КОГДА РасчетыСКлиентами.СуммаВзаиморасчетов < 0
	|			ТОГДА ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				КОНЕЦ
	|			ИНАЧЕ РасчетыСКлиентами.ВидДвижения
	|		КОНЕЦ                                     КАК ВидДвижения,
	|		РасчетыСКлиентами.Организация             КАК Организация,
	|		РасчетыСКлиентами.Партнер                 КАК Партнер,
	|		РасчетыСКлиентами.Контрагент              КАК Контрагент,
	|		РасчетыСКлиентами.ОбъектРасчетов          КАК ОбъектРасчетов,
	|		РасчетыСКлиентами.Договор                 КАК Договор,
	|		РасчетыСКлиентами.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		РасчетыСКлиентами.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|		ВЫБОР КОГДА РасчетыСКлиентами.Сумма < 0
	|			ТОГДА -РасчетыСКлиентами.Сумма
	|			ИНАЧЕ РасчетыСКлиентами.Сумма
	|		КОНЕЦ                                     КАК Сумма,
	|		ВЫБОР КОГДА РасчетыСКлиентами.СуммаРегл < 0
	|			ТОГДА -РасчетыСКлиентами.СуммаРегл
	|			ИНАЧЕ РасчетыСКлиентами.СуммаРегл
	|		КОНЕЦ                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА РасчетыСКлиентами.СуммаУпр < 0
	|			ТОГДА -РасчетыСКлиентами.СуммаУпр
	|			ИНАЧЕ РасчетыСКлиентами.СуммаУпр
	|		КОНЕЦ                                     КАК СуммаУпр,
	|		ВЫБОР КОГДА РасчетыСКлиентами.СуммаВзаиморасчетов < 0
	|			ТОГДА -РасчетыСКлиентами.СуммаВзаиморасчетов
	|			ИНАЧЕ РасчетыСКлиентами.СуммаВзаиморасчетов
	|		КОНЕЦ                                     КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ВтРасчетовПоКлиентам КАК РасчетыСКлиентами
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВЫБОР КОГДА РасчетыСПоставщиками.СуммаВзаиморасчетов < 0
	|			ТОГДА ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				КОНЕЦ
	|			ИНАЧЕ РасчетыСПоставщиками.ВидДвижения
	|		КОНЕЦ                                        КАК ВидДвижения,
	|		РасчетыСПоставщиками.Организация             КАК Организация,
	|		РасчетыСПоставщиками.Партнер                 КАК Партнер,
	|		РасчетыСПоставщиками.Контрагент              КАК Контрагент,
	|		РасчетыСПоставщиками.ОбъектРасчетов          КАК ОбъектРасчетов,
	|		РасчетыСПоставщиками.Договор                 КАК Договор,
	|		РасчетыСПоставщиками.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		РасчетыСПоставщиками.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.Сумма < 0
	|			ТОГДА -РасчетыСПоставщиками.Сумма
	|			ИНАЧЕ РасчетыСПоставщиками.Сумма
	|		КОНЕЦ                                        КАК Сумма,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.СуммаРегл < 0
	|			ТОГДА -РасчетыСПоставщиками.СуммаРегл
	|			ИНАЧЕ РасчетыСПоставщиками.СуммаРегл
	|		КОНЕЦ                                        КАК СуммаРегл,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.СуммаУпр < 0
	|			ТОГДА -РасчетыСПоставщиками.СуммаУпр
	|			ИНАЧЕ РасчетыСПоставщиками.СуммаУпр
	|		КОНЕЦ                                        КАК СуммаУпр,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.СуммаВзаиморасчетов < 0
	|			ТОГДА -РасчетыСПоставщиками.СуммаВзаиморасчетов
	|			ИНАЧЕ РасчетыСПоставщиками.СуммаВзаиморасчетов
	|		КОНЕЦ                                        КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ВтРасчетовПоПоставщикам КАК РасчетыСПоставщиками
	|
	|	) КАК Задолженность
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ИдентификаторМетаданных                                               КАК ТипСсылки,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)  КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                                            КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                                           КАК Партнер,
	|	Неопределено                                                           КАК МестоХранения,
	|	ВЫБОР КОГДА ДанныеДокумента.КонтрагентДебитор = НЕОПРЕДЕЛЕНО
	|		ТОГДА ДанныеДокумента.КонтрагентКредитор
	|		ИНАЧЕ ДанныеДокумента.КонтрагентДебитор
	|	КОНЕЦ                                                                  КАК Контрагент,
	|	ДанныеДокумента.Подразделение                                          КАК Подразделение,
	|	ДанныеДокумента.Дата                                                   КАК ДатаДокументаИБ,
	|	ДанныеДокумента.Ссылка                                                 КАК Ссылка,
	|	ДанныеДокумента.Номер                                                  КАК НомерДокументаИБ,
	|	НЕОПРЕДЕЛЕНО                                                           КАК Статус,
	|	ДанныеДокумента.Ответственный                                          КАК Ответственный,
	|	ЛОЖЬ                                                                   КАК ДополнительнаяЗапись,
	|	""""                                                                   КАК Дополнительно,
	|	ДанныеДокумента.Комментарий                                            КАК Комментарий,
	|	ДанныеДокумента.Проведен                                               КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления                                        КАК ПометкаУдаления,
	|	ДАТАВРЕМЯ(1,1,1)                                                       КАК ДатаПервичногоДокумента,
	|	""""                                                                   КАК НомерПервичногоДокумента,
	|	ДанныеДокумента.СуммаРегл                                              КАК Сумма,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета             КАК Валюта,
	|	НЕОПРЕДЕЛЕНО                                                           КАК Договор,
	|	ЛОЖЬ                                                                   КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                                                           КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                                                           КАК ИсправляемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                                                           КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Дата                                                   КАК ДатаОтраженияВУчете
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	СинонимТаблицыДокумента = "";
	
	ПолноеИмяДокумента = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента, Истина);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента);
	КонецЕсли;
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ПараметрыПроведения;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	ВзаимозачетЗадолженностиЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Структура = Новый Структура("Данные, Макеты",
		ПолучитьДанныеОбъектаПоМакетам(МассивДокументов, МассивИменМакетов),
		ПолучитьМакетыИОписанияСекций(МассивИменМакетов));
				
	Возврат Структура;
	
КонецФункции

Функция ПолучитьДанныеОбъектаПоМакетам(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	МассивРезультатов = ПолучитьДанныеВзаимозачетЗадолженности(МассивДокументов);
	
	Выборка = МассивРезультатов[0].Выбрать();
	ВыборкаДебиторскаяЗадолженность = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКредиторскаяЗадолженность = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
	
		ДанныеОбъекта = Новый Структура;
		ДанныеОбъекта.Вставить("Организация",                               Выборка.Организация);
		ДанныеОбъекта.Вставить("ДолжностьРуководителя",                     Выборка.ДолжностьРуководителя);
		ДанныеОбъекта.Вставить("Руководитель",                              Выборка.Руководитель);
		ДанныеОбъекта.Вставить("ОрганизацияКредитор",                       Выборка.ОрганизацияКредитор);
		ДанныеОбъекта.Вставить("ДолжностьРуководителяОрганизацииКредитора", Выборка.ДолжностьРуководителяОрганизацииКредитора);
		ДанныеОбъекта.Вставить("РуководительОрганизацииКредитора",          Выборка.РуководительОрганизацииКредитора);
		ДанныеОбъекта.Вставить("Дата",                                      Формат(Выборка.Дата, "ДЛФ=ДД"));
		ДанныеОбъекта.Вставить("АдресОрганизации",                          ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Выборка.ОрганизацияСсылка, "Юридический", Выборка.Дата));
		ДанныеОбъекта.Вставить("АдресОрганизацииКредитора",                 ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Выборка.ОрганизацияКредиторСсылка, "Юридический", Выборка.Дата));
		ДанныеОбъекта.Вставить("Взаимозачет",                               Выборка.Взаимозачет);
		ДанныеОбъекта.Вставить("ВзаимозачетМеждуОрганизациями",             Выборка.ВзаимозачетМеждуОрганизациями);
		ДанныеОбъекта.Вставить("Сумма", ФормированиеПечатныхФорм.ФорматСумм(Выборка.СуммаРегл, Выборка.ВалютаРегламентированногоУчета));
		
		СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(Выборка.СуммаРегл, Выборка.ВалютаРегламентированногоУчета);
		ДанныеОбъекта.Вставить("СуммаПрописью", СуммаПрописью);

		ДанныеОбъекта.Вставить("ДебиторскаяЗадолженность", Новый Массив);
		ДанныеОбъекта.Вставить("КредиторскаяЗадолженность", Новый Массив);
		
		ДанныеОбъекта.Вставить("КонтрагентДебитор",  Справочники.Контрагенты.СокрЮрНаименованиеНаДату(Выборка.КонтрагентДебитор, Выборка.Дата));
		ДанныеОбъекта.Вставить("КонтрагентКредитор",  Справочники.Контрагенты.СокрЮрНаименованиеНаДату(Выборка.КонтрагентКредитор, Выборка.Дата));
		
		АдресКонтрагентаДебитора = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			Выборка.КонтрагентДебитор, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,, Выборка.Дата);
		ДанныеОбъекта.Вставить("АдресКонтрагентаДебитора", АдресКонтрагентаДебитора);
		
		АдресКонтрагентаКредитора = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			Выборка.КонтрагентКредитор, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,, Выборка.Дата);
		ДанныеОбъекта.Вставить("АдресКонтрагентаКредитора", АдресКонтрагентаКредитора);
		
		АдресОрганизацииКредитора = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			Выборка.КонтрагентКредитор, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,, Выборка.Дата);
		ДанныеОбъекта.Вставить("АдресОрганизацииКредитора", АдресОрганизацииКредитора);
		
		Если ВыборкаДебиторскаяЗадолженность.НайтиСледующий(Выборка.Ссылка, "Ссылка") Тогда 
			СформироватьТаблицуЗадолженности(ВыборкаДебиторскаяЗадолженность, ДанныеОбъекта.ДебиторскаяЗадолженность);
		КонецЕсли;
		Если ВыборкаКредиторскаяЗадолженность.НайтиСледующий(Выборка.Ссылка, "Ссылка") Тогда 
			СформироватьТаблицуЗадолженности(ВыборкаКредиторскаяЗадолженность, ДанныеОбъекта.КредиторскаяЗадолженность);
		КонецЕсли;

		ДанныеОбъектаПоМакетам = Новый Структура;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ДанныеОбъекта);
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(Выборка.Ссылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	Возврат ДанныеПоВсемОбъектам;
	
КонецФункции

Функция ПолучитьМакетыИОписанияСекций(знач МассивИменМакетов) Экспорт
	
	ОписаниеСекций = Новый Структура;
	ДвоичныеДанныеМакетов = Новый Структура;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		
		Макет = Неопределено;
		ОписаниеСекцийМакета = Неопределено;
		//++ Локализация
		Если ИмяМакета = "ПФ_DOC_АктВзаимозачета_ru" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейВзаимозачетЗадолженности();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВзаимозачетЗадолженности.ПФ_DOC_АктВзаимозачета_ru");
		ИначеЕсли ИмяМакета = "ПФ_DOC_АктПереуступкиДолга_ru" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейВзаимозачетЗадолженности();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВзаимозачетЗадолженности.ПФ_DOC_АктПереуступкиДолга_ru");
		ИначеЕсли ИмяМакета = "ПФ_DOC_АктПереуступкиДолгаМеждуОрганизациями_ru" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейВзаимозачетЗадолженности();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВзаимозачетЗадолженности.ПФ_DOC_АктПереуступкиДолгаМеждуОрганизациями_ru");
		КонецЕсли;
		//-- Локализация
		
		Если ОписаниеСекцийМакета <> Неопределено И Макет <> Неопределено Тогда
			
			ОписаниеСекций.Вставить(ИмяМакета, ОписаниеСекцийМакета);
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, Макет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Структура = Новый Структура("ОписаниеСекций, ДвоичныеДанныеМакетов",
		ОписаниеСекций,
		ДвоичныеДанныеМакетов);
	
	Возврат Структура;
	
КонецФункции

// Формирует таблицу задолженности.
// 
// Параметры:
// 	РезультатЗапроса - РезультатЗапроса - результат запроса.
// 	МассивСтрок - Массив - Изменяемый массив строк
Процедура СформироватьТаблицуЗадолженности(РезультатЗапроса, МассивСтрок)
	
	НомерСтроки = 0;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы = Новый Структура;
		СтрокаТаблицы.Вставить("НомерСтроки", НомерСтроки);
		СтрокаТаблицы.Вставить("Сумма", Формат(Выборка.СуммаВзаиморасчетов, "ЧДЦ=2"));
		СтрокаТаблицы.Вставить("Валюта", Выборка.ВалютаВзаиморасчетов);
		
		ТекстДокумент = "";
		Если ЗначениеЗаполнено(Выборка.НаименованиеДляПечати) Тогда
			ТекстДокумент = Выборка.НаименованиеДляПечати;
		ИначеЕсли ЗначениеЗаполнено(Выборка.ТипДокумента) Тогда
			ТекстДокумент = ТекстДокумент
				+ ?(Не ПустаяСтрока(ТекстДокумент), ", " + Символы.ПС, "")
				+ ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Выборка, Строка(Выборка.ТипДокумента));
		КонецЕсли;
		Если ПустаяСтрока(ТекстДокумент) Тогда
			ТекстДокумент = НСтр("ru = 'Без документа'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
	
		СтрокаТаблицы.Вставить("Документ", ТекстДокумент);
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	МассивДокументов - Массив из ДокументСсылка - массив документов.
// Возвращаемое значение:
// 	Массив из РезультатЗапроса - 
Функция ПолучитьДанныеВзаимозачетЗадолженности(МассивДокументов)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
		МассивДокументов,
		МенеджерВременныхТаблиц);
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
		МассивДокументов,
		МенеджерВременныхТаблиц,
		"ОрганизацияКредитор", 
		Новый Структура("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель),
		"ТаблицаОтветственныеЛицаОрганизацииКредитора");
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК Организация,
	|	ДанныеДокумента.Организация КАК ОрганизацияСсылка,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ДанныеДокумента.ОрганизацияКредитор.НаименованиеСокращенное КАК ОрганизацияКредитор,
	|	ДанныеДокумента.ОрганизацияКредитор КАК ОрганизацияКредиторСсылка,
	|	ТаблицаОтветственныеЛицаОрганизацииКредитора.РуководительНаименование КАК РуководительОрганизацииКредитора,
	|	ТаблицаОтветственныеЛицаОрганизацииКредитора.РуководительДолжность КАК ДолжностьРуководителяОрганизацииКредитора,
	|	ДанныеДокумента.КонтрагентДебитор КАК КонтрагентДебитор,
	|	ДанныеДокумента.КонтрагентКредитор КАК КонтрагентКредитор,
	|	ВЫБОР КОГДА (НЕ (ДанныеДокумента.ВидОперации В (&ВидыОперацийМеждуОрганизациями)) И ДанныеДокумента.КонтрагентДебитор = ДанныеДокумента.КонтрагентКредитор)
	|			ИЛИ (ДанныеДокумента.ВидОперации В (&ВидыОперацийМеждуОрганизациями) И ДанныеДокумента.Организация = ДанныеДокумента.ОрганизацияКредитор) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Взаимозачет,
	|	ВЫБОР КОГДА ДанныеДокумента.ВидОперации В (&ВидыОперацийМеждуОрганизациями) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ВзаимозачетМеждуОрганизациями,
	|	ДанныеДокумента.СуммаРегл КАК СуммаРегл
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛицаОрганизацииКредитора КАК ТаблицаОтветственныеЛицаОрганизацииКредитора
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛицаОрганизацииКредитора.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.ТипРасчетов КАК ТипРасчетов,
	|	ВЫБОР КОГДА Задолженность.ОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов.Объект)
	|	КОНЕЦ КАК ТипДокумента,
	|	Задолженность.ОбъектРасчетов.Дата КАК Дата,
	|	Задолженность.ОбъектРасчетов.Номер КАК Номер,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов.Объект) = ТИП(Справочник.ДоговорыКонтрагентов) ТОГДА
	|		ВЫРАЗИТЬ(Задолженность.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов).НаименованиеДляПечати
	|			КОГДА ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов.Объект) = ТИП(Справочник.ДоговорыМеждуОрганизациями) ТОГДА
	|		ВЫРАЗИТЬ(Задолженность.ОбъектРасчетов.Объект КАК Справочник.ДоговорыМеждуОрганизациями).НаименованиеДляПечати
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаименованиеДляПечати,
	|	Задолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка В (&МассивДокументов)
	|
	|ИТОГИ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.ТипРасчетов КАК ТипРасчетов,
	|	ВЫБОР КОГДА Задолженность.ОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов.Объект)
	|	КОНЕЦ КАК ТипДокумента,
	|	Задолженность.ОбъектРасчетов.Дата КАК Дата,
	|	Задолженность.ОбъектРасчетов.Номер КАК Номер,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов.Объект) = ТИП(Справочник.ДоговорыКонтрагентов) ТОГДА
	|		ВЫРАЗИТЬ(Задолженность.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов).НаименованиеДляПечати
	|			КОГДА ТИПЗНАЧЕНИЯ(Задолженность.ОбъектРасчетов.Объект) = ТИП(Справочник.ДоговорыМеждуОрганизациями) ТОГДА
	|		ВЫРАЗИТЬ(Задолженность.ОбъектРасчетов.Объект КАК Справочник.ДоговорыМеждуОрганизациями).НаименованиеДляПечати
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаименованиеДляПечати,
	|	Задолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка В (&МассивДокументов)
	|
	|ИТОГИ ПО
	|	Ссылка
	|");
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями);
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВидыОперацийМеждуОрганизациями", МассивОпераций);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
		
	Возврат МассивРезультатов;

КонецФункции
//++ Локализация

Функция ПолучитьОписаниеОбластейВзаимозачетЗадолженности()

	Секции = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ВерхнийКолонтитул","ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "НижнийКолонтитул","НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ЗаголовокДокумента", "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ДебиторскаяЗадолженность", "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "КредиторскаяЗадолженность", "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицы", "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицы", "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Итог", "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Подвал", "Общая");
	
	Возврат Секции;

КонецФункции
//-- Локализация

// Параметры:
// 	СтруктураДанныхОбъектаПечати - Структура - состоит из:
// * ОсновнойПолучатель - Строка -
// * МассивРеквизитовПолучателей - Массив из Строка -
// * МассивДанных - Массив из ДокументСсылка -
// 
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "КонтрагентДебитор";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтрагентДебитор");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтрагентКредитор");
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         * Имя            - Строка - Уникальное имя общего реквизита.
//         * Представление  - Строка - Представление общего реквизита.
//         * Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         * Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         * Имя            - Строка - Уникальное имя вложения.
//         * Представление  - Строка - Представление варианта.
//         * ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов
//      * Ключ     - Строка - имя вложения в шаблоне;
//      * Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ВзаимозачетЗадолженности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.6.70";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6c702e29-6b3a-4868-94ab-572afd5ef21a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВзаимозачетЗадолженности.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Объекты расчетов"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "Организация");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "КонтрагентДебитор");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "КонтрагентКредитор");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "ОрганизацияКредитор");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "УдалитьОбъектРасчетовИнтеркампани");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "ДебиторскаяЗадолженность.УдалитьЗаказ");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "ДебиторскаяЗадолженность.Партнер");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "ДебиторскаяЗадолженность.Организация");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "КредиторскаяЗадолженность.УдалитьЗаказ");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "КредиторскаяЗадолженность.Партнер");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, "КредиторскаяЗадолженность.Организация");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаимозачетЗадолженности.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
	|ГДЕ
	|
	|//Заполнение объектов расчетов
	|	((ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА
	|			ИЗ
	|				Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ТЧКредиторскаяЗадолженность
	|			ГДЕ
	|				ТЧКредиторскаяЗадолженность.Ссылка = ВзаимозачетЗадолженности.Ссылка
	|				И ТЧКредиторскаяЗадолженность.ОбъектРасчетов = &ОбъектРасчетовПустаяСсылка))
	|	ИЛИ (ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ТЧДебиторскаяЗадолженность
	|			ГДЕ
	|				ТЧДебиторскаяЗадолженность.Ссылка = ВзаимозачетЗадолженности.Ссылка
	|				И ТЧДебиторскаяЗадолженность.ОбъектРасчетов = &ОбъектРасчетовПустаяСсылка))
	|	ИЛИ (ВзаимозачетЗадолженности.ОбъектРасчетовИнтеркампани = &ОбъектРасчетовПустаяСсылка
	|		И (ВзаимозачетЗадолженности.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями)
	|			ИЛИ ВзаимозачетЗадолженности.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями)))
	|	ИЛИ (ВзаимозачетЗадолженности.ОбъектРасчетовДебиторКредитор = &ОбъектРасчетовПустаяСсылка
	|			И (ВзаимозачетЗадолженности.ТипДебитора = ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияКлиент)
	|				ИЛИ ВзаимозачетЗадолженности.ТипДебитора = ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик)
	|				ИЛИ ВзаимозачетЗадолженности.ТипКредитора = ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияКлиент)
	|				ИЛИ ВзаимозачетЗадолженности.ТипКредитора = ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик))
	|			И ВзаимозачетЗадолженности.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
	|			И ВзаимозачетЗадолженности.КонтрагентДебитор <> ВзаимозачетЗадолженности.КонтрагентКредитор)
	|)
	|
	|//Замена устаревших видов операций взаимозачета
	|	ИЛИ ВзаимозачетЗадолженности.ВидОперации В 
	|			(ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Клиента),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Поставщика),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями))";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Запрос.УстановитьПараметр("ОбъектРасчетовПустаяСсылка", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ОбновляемыеДанные.Количество() Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	#Область ТекстЗапросаДанныхКОбновлению
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка
	|ПОМЕСТИТЬ ОбновляемыеДанные
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка               КАК Ссылка,
	|	ВзаимозачетЗадолженности.ВерсияДанных  КАК ВерсияДанных
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
	|			ПО ОбновляемыеДанные.Ссылка = ВзаимозачетЗадолженности.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|			
	|
	|//Заполнение объектов расчета в ТЧ ДебиторскаяЗадолженность для не пустого поля УдалитьЗаказ
	|ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка               КАК Ссылка,
	|	""ДебиторскаяЗадолженность""           КАК ИмяТЧ,
	|	ТЧЗадолженность.НомерСтроки КАК НомерСтроки,
	|	&ОпределениеОрганизации КАК Организация,
	|	ОбъектыРасчетов.Ссылка                  КАК ОбъектРасчетов
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ТЧЗадолженность
	|			ПО ОбновляемыеДанные.Ссылка = ТЧЗадолженность.Ссылка
	|				И ТЧЗадолженность.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
	|			ПО ОбновляемыеДанные.Ссылка = ВзаимозачетЗадолженности.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ТЧЗадолженность.ТипРасчетов = ОбъектыРасчетов.ТипРасчетов
	|				И &ОпределениеОрганизации = ОбъектыРасчетов.Организация
	|				И ТЧЗадолженность.УдалитьЗаказ = ОбъектыРасчетов.Объект
	|				И ТЧЗадолженность.Партнер = ОбъектыРасчетов.Партнер
	|				И ТЧЗадолженность.ВалютаВзаиморасчетов = ОбъектыРасчетов.ВалютаВзаиморасчетов
	|				И ВзаимозачетЗадолженности.КонтрагентДебитор = ОбъектыРасчетов.Контрагент
	|ГДЕ 
	|	НЕ ТЧЗадолженность.УдалитьЗаказ В(&ПустыеЗначенияОбъектовРасчетов) 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//Заполнение объектов расчета в ТЧ ДебиторскаяЗадолженность для пустого поля УдалитьЗаказ
	|ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка               КАК Ссылка,
	|	""ДебиторскаяЗадолженность""           КАК ИмяТЧ,
	|	ТЧЗадолженность.НомерСтроки КАК НомерСтроки,
	|	ТЧЗадолженность.Организация КАК Организация,
	|	ОбъектыРасчетов.Ссылка                  КАК ОбъектРасчетов
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ТЧЗадолженность
	|			ПО ОбновляемыеДанные.Ссылка = ТЧЗадолженность.Ссылка
	|				И ТЧЗадолженность.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
	|			ПО ОбновляемыеДанные.Ссылка = ВзаимозачетЗадолженности.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО НЕОПРЕДЕЛЕНО = ОбъектыРасчетов.Объект
	|				И ТЧЗадолженность.ТипРасчетов = ОбъектыРасчетов.ТипРасчетов
	|				И ТЧЗадолженность.Организация = ОбъектыРасчетов.Организация
	|				И ТЧЗадолженность.Партнер = ОбъектыРасчетов.Партнер
	|				И ВзаимозачетЗадолженности.КонтрагентДебитор = ОбъектыРасчетов.Контрагент
	|				И ТЧЗадолженность.ВалютаВзаиморасчетов = ОбъектыРасчетов.ВалютаВзаиморасчетов
	|				И ВЫБОР КОГДА ВзаимозачетЗадолженности.ТипДебитора В (ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияКлиент),
	|															ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик))
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					КОНЕЦ = ОбъектыРасчетов.Договор
	|				И ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) = ОбъектыРасчетов.НаправлениеДеятельности
	|ГДЕ
	|	ТЧЗадолженность.УдалитьЗаказ В(&ПустыеЗначенияОбъектовРасчетов) 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//Заполнение объектов расчета в ТЧ КредиторскаяЗадолженность для не пустого поля УдалитьЗаказ
	|ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка                КАК Ссылка,
	|	""КредиторскаяЗадолженность""           КАК ИмяТЧ,
	|	ТЧЗадолженность.НомерСтроки КАК НомерСтроки,
	|	&ОпределениеОрганизации КАК Организация,
	|	ОбъектыРасчетов.Ссылка                   КАК ОбъектРасчетов
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ТЧЗадолженность
	|			ПО ОбновляемыеДанные.Ссылка = ТЧЗадолженность.Ссылка
	|				И ТЧЗадолженность.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
	|			ПО ОбновляемыеДанные.Ссылка = ВзаимозачетЗадолженности.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ТЧЗадолженность.ТипРасчетов = ОбъектыРасчетов.ТипРасчетов
	|				И &ОпределениеОрганизации = ОбъектыРасчетов.Организация
	|				И ТЧЗадолженность.УдалитьЗаказ = ОбъектыРасчетов.Объект
	|				И ТЧЗадолженность.Партнер = ОбъектыРасчетов.Партнер
	|				И ТЧЗадолженность.ВалютаВзаиморасчетов = ОбъектыРасчетов.ВалютаВзаиморасчетов
	|				И ВзаимозачетЗадолженности.КонтрагентКредитор = ОбъектыРасчетов.Контрагент
	|ГДЕ 
	|	НЕ ТЧЗадолженность.УдалитьЗаказ В(&ПустыеЗначенияОбъектовРасчетов) 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//Заполнение объектов расчета в ТЧ КредиторскаяЗадолженность для пустого поля УдалитьЗаказ
	|ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка                КАК Ссылка,
	|	""КредиторскаяЗадолженность""           КАК ИмяТЧ,
	|	ТЧЗадолженность.НомерСтроки КАК НомерСтроки,
	|	ТЧЗадолженность.Организация КАК Организация,
	|	ОбъектыРасчетов.Ссылка                   КАК ОбъектРасчетов
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ТЧЗадолженность
	|			ПО ОбновляемыеДанные.Ссылка = ТЧЗадолженность.Ссылка
	|				И ТЧЗадолженность.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
	|			ПО ОбновляемыеДанные.Ссылка = ВзаимозачетЗадолженности.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО НЕОПРЕДЕЛЕНО = ОбъектыРасчетов.Объект
	|				И ТЧЗадолженность.ТипРасчетов = ОбъектыРасчетов.ТипРасчетов
	|				И ТЧЗадолженность.Организация = ОбъектыРасчетов.Организация
	|				И ТЧЗадолженность.Партнер = ОбъектыРасчетов.Партнер
	|				И ВзаимозачетЗадолженности.КонтрагентКредитор = ОбъектыРасчетов.Контрагент
	|				И ТЧЗадолженность.ВалютаВзаиморасчетов = ОбъектыРасчетов.ВалютаВзаиморасчетов
	|				И ВЫБОР КОГДА ВзаимозачетЗадолженности.ТипКредитора В (ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияКлиент),
	|															ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик))
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					КОНЕЦ = ОбъектыРасчетов.Договор
	|				И ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) = ОбъектыРасчетов.НаправлениеДеятельности
	|ГДЕ
	|	ТЧЗадолженность.УдалитьЗаказ В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|//Заполнение поля ОбъектРасчетовИнтеркампани
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка               КАК Взаимозачет,
	|	ОбъектыРасчетов.Ссылка                 КАК ОбъектРасчетовИнтеркампани,
	|	ОбъектыРасчетов.ТолькоОстатки          КАК ТолькоОстатки,
	|	ОбъектыРасчетов.ВалютаВзаиморасчетов   КАК ВалютаВзаиморасчетов
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
	|			ПО ОбновляемыеДанные.Ссылка = ВзаимозачетЗадолженности.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ВзаимозачетЗадолженности.Организация = ОбъектыРасчетов.Организация
	|				И ВзаимозачетЗадолженности.ОрганизацияКредитор = ОбъектыРасчетов.Контрагент
	|				И ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) = ОбъектыРасчетов.Партнер
	|				И (ВзаимозачетЗадолженности.УдалитьОбъектРасчетовИнтеркампани = ОбъектыРасчетов.Объект
	|					ИЛИ (ВзаимозачетЗадолженности.УдалитьОбъектРасчетовИнтеркампани В (&ПустыеЗначенияОбъектовРасчетов)
	|							И ОбъектыРасчетов.Объект = Неопределено))
	|ГДЕ
	|	ВзаимозачетЗадолженности.ОбъектРасчетовИнтеркампани = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//Заполнение поля ОбъектРасчетовДебиторКредитор
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВзаимозачетЗадолженности.ТипКредитора В (&Клиент)
	|				И ВзаимозачетЗадолженности.ТипДебитора В (&Клиент)
	|			ТОГДА &РасчетыСКлиентом
	|		КОГДА ВзаимозачетЗадолженности.ТипКредитора В (&Поставщик)
	|				И ВзаимозачетЗадолженности.ТипДебитора В (&Поставщик)
	|			ТОГДА &РасчетыСПоставщиком
	|		КОГДА ТИПЗНАЧЕНИЯ(ВзаимозачетЗадолженности.КонтрагентДебитор) = ТИП(Справочник.Организации)
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаимозачетЗадолженности.ТипКредитора В (&Клиент)
	|						ТОГДА &РасчетыСКлиентом
	|					КОГДА ВзаимозачетЗадолженности.ТипКредитора В (&Поставщик)
	|						ТОГДА &РасчетыСПоставщиком
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(ВзаимозачетЗадолженности.КонтрагентКредитор) = ТИП(Справочник.Организации)
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаимозачетЗадолженности.ТипДебитора В (&Клиент)
	|						ТОГДА &РасчетыСКлиентом
	|					КОГДА ВзаимозачетЗадолженности.ТипДебитора В (&Поставщик)
	|						ТОГДА &РасчетыСПоставщиком
	|				КОНЕЦ
	|	КОНЕЦ КАК ТипРасчетов,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВзаимозачетЗадолженности.КонтрагентДебитор) = ТИП(Справочник.Организации)
	|			ТОГДА ВзаимозачетЗадолженности.КонтрагентДебитор
	|		КОГДА ТИПЗНАЧЕНИЯ(ВзаимозачетЗадолженности.КонтрагентКредитор) = ТИП(Справочник.Организации)
	|			ТОГДА ВзаимозачетЗадолженности.КонтрагентКредитор
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВзаимозачетЗадолженности.КонтрагентДебитор) = ТИП(Справочник.Организации)
	|			ТОГДА ВзаимозачетЗадолженности.КонтрагентКредитор
	|		КОГДА ТИПЗНАЧЕНИЯ(ВзаимозачетЗадолженности.КонтрагентКредитор) = ТИП(Справочник.Организации)
	|			ТОГДА ВзаимозачетЗадолженности.КонтрагентДебитор
	|	КОНЕЦ КАК Контрагент,
	|	ВзаимозачетЗадолженности.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеДляПоискаОРДебиторКредитор
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ВзаимозачетЗадолженности
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ПО ОбновляемыеДанные.Ссылка = ВзаимозачетЗадолженности.Ссылка
	|ГДЕ
	|	ВзаимозачетЗадолженности.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)
	|	И (ВзаимозачетЗадолженности.ТипДебитора = ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияКлиент)
	|			ИЛИ ВзаимозачетЗадолженности.ТипДебитора = ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик)
	|			ИЛИ ВзаимозачетЗадолженности.ТипКредитора = ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияКлиент)
	|			ИЛИ ВзаимозачетЗадолженности.ТипКредитора = ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик))
	|	И ВзаимозачетЗадолженности.КонтрагентДебитор <> ВзаимозачетЗадолженности.КонтрагентКредитор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляПоискаОР.Ссылка КАК Взаимозачет,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетовДебиторКредитор
	|ИЗ
	|	ДанныеДляПоискаОРДебиторКредитор КАК ДанныеДляПоискаОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ДанныеДляПоискаОР.ТипРасчетов = ОбъектыРасчетов.ТипРасчетов)
	|			И (ОбъектыРасчетов.Организация = ДанныеДляПоискаОР.Организация)
	|			И (ОбъектыРасчетов.Контрагент = ДанныеДляПоискаОР.Контрагент)
	|			И (ОбъектыРасчетов.Объект = НЕОПРЕДЕЛЕНО)";
	#КонецОбласти
	
	ТекстЗапросаОпределениеОрганизации = "
	|ЕСТЬNULL(
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ТЧЗадолженность.УдалитьЗаказ) = ТИП(Документ.ПередачаТоваровМеждуОрганизациями) 
	|			И ТЧЗадолженность.ТипРасчетов = &РасчетыСПоставщиком ТОГДА
	|				ВЫРАЗИТЬ(ТЧЗадолженность.УдалитьЗаказ КАК Документ.ПередачаТоваровМеждуОрганизациями).ОрганизацияПолучатель
	|	КОГДА ТИПЗНАЧЕНИЯ(ТЧЗадолженность.УдалитьЗаказ) = ТИП(Справочник.ДоговорыМеждуОрганизациями) 
	|			И ТЧЗадолженность.ТипРасчетов = &РасчетыСПоставщиком ТОГДА
	|				ВЫРАЗИТЬ(ТЧЗадолженность.УдалитьЗаказ КАК Справочник.ДоговорыМеждуОрганизациями).ОрганизацияПолучатель
	|	КОГДА ТИПЗНАЧЕНИЯ(ТЧЗадолженность.УдалитьЗаказ) = ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями) 
	|			И ТЧЗадолженность.ТипРасчетов = &РасчетыСПоставщиком ТОГДА
	|				ВЫРАЗИТЬ(ТЧЗадолженность.УдалитьЗаказ КАК Документ.ОтчетПоКомиссииМеждуОрганизациями).Комиссионер
	|	ИНАЧЕ
	|		ТЧЗадолженность.УдалитьЗаказ.Организация
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ТЧЗадолженность.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА
	|			ВЫБОР
	|				КОГДА ВзаимозачетЗадолженности.ВидОперации В (
	|					ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями),
	|					ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями)
	|				)
	|					ТОГДА ВзаимозачетЗадолженности.ОрганизацияКредитор
	|				ИНАЧЕ ВзаимозачетЗадолженности.Организация
	|			КОНЕЦ                              
	|	ИНАЧЕ
	|		ТЧЗадолженность.Организация
	|	КОНЕЦ
	|)"; //@Query-part
	
	Клиенты = Новый Массив();
	Клиенты.Добавить(Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент);
	Клиенты.Добавить(Перечисления.ТипыУчастниковВзаимозачета.Клиент);
	
	Поставщики = Новый Массив();
	Поставщики.Добавить(Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик);
	Поставщики.Добавить(Перечисления.ТипыУчастниковВзаимозачета.Поставщик);
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Запрос.УстановитьПараметр("РасчетыСПоставщиком", Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	Запрос.УстановитьПараметр("РасчетыСКлиентом", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	Запрос.УстановитьПараметр("Поставщик", Поставщики);
	Запрос.УстановитьПараметр("Клиент", Клиенты);
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеОрганизации", ТекстЗапросаОпределениеОрганизации);
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДокумент = РезультатЗапроса[1].Выбрать();
	ВыборкаТЧ = РезультатЗапроса[2].Выгрузить();
	ВыборкаТЧ.Индексы.Добавить("Ссылка, ИмяТЧ, НомерСтроки");
	ВыборкаОбъектРасчетовИнтеркампани = РезультатЗапроса[3].Выгрузить();
	ВыборкаОбъектРасчетовИнтеркампани.Индексы.Добавить("Взаимозачет");
	ВыборкаОбъектРасчетовДебиторКредитор = РезультатЗапроса[5].Выгрузить();
	ВыборкаОбъектРасчетовДебиторКредитор.Индексы.Добавить("Взаимозачет");
	КомментарийЗачетОплат = НСтр("ru = 'Сформирован автоматически обработкой ""Зачет оплат"".'");
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		Ссылка = ВыборкаДокумент.Ссылка;
		ПроблемныеОбъектыРасчетов = Новый Массив();
		
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Ссылка,
				ВыборкаДокумент.ВерсияДанных,
				Параметры.Очередь);
				
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			#Область ЗаполнениеТабличныхЧастей

			ГотовКЗаполнению = Истина;
			ТабЧастиЗадолженности = Новый Массив();
			ТабЧастиЗадолженности.Добавить("ДебиторскаяЗадолженность");
			ТабЧастиЗадолженности.Добавить("КредиторскаяЗадолженность");
			
			Для Каждого ТабЧастьЗадолженность Из ТабЧастиЗадолженности Цикл
				ТЧ = ДокументОбъект[ТабЧастьЗадолженность]; // ТабличнаяЧасть 
				Для Каждого СтрокаЗадолженность Из ТЧ Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаЗадолженность.ОбъектРасчетов) Тогда
						Отбор = Новый Структура("Ссылка, ИмяТЧ, НомерСтроки", Ссылка, ТабЧастьЗадолженность, СтрокаЗадолженность.НомерСтроки);
						НайденныйОР = ВыборкаТЧ.НайтиСтроки(Отбор);
						
						Если НайденныйОР.Количество() = 1 Тогда
							ОбъектРасчетов = НайденныйОР[0].ОбъектРасчетов;
							Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
								СтрокаЗадолженность.ОбъектРасчетов = ОбъектРасчетов;
							ИначеЕсли Не ЗначениеЗаполнено(ОбъектРасчетов) И ЗначениеЗаполнено(СтрокаЗадолженность.УдалитьЗаказ) Тогда
								ДополнительныеКритерииПоиска = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
								ДополнительныеКритерииПоиска.Партнер = СтрокаЗадолженность.Партнер;
								ДополнительныеКритерииПоиска.Контрагент = ?(ТабЧастьЗадолженность = "КредиторскаяЗадолженность",
									ДокументОбъект.КонтрагентКредитор,
									ДокументОбъект.КонтрагентДебитор);
								ДополнительныеКритерииПоиска.ВернутьПервый = Ложь;
								
								ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
									СтрокаЗадолженность.УдалитьЗаказ,
									НайденныйОР[0].Организация,
									СтрокаЗадолженность.ТипРасчетов,
									ДополнительныеКритерииПоиска);
									Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
										СтрокаЗадолженность.ОбъектРасчетов = ОбъектРасчетов;
									ИначеЕсли ДокументОбъект.Проведен Тогда
										Если Не ПроблемныеОбъектыРасчетов.Количество() Тогда
											ПроблемныеОбъектыРасчетов = ПроблемныеОбъектыРасчетов(ДокументОбъект);
										КонецЕсли;
									
									Если ПроблемныеОбъектыРасчетов.Найти(СтрокаЗадолженность.УдалитьЗаказ) = Неопределено Тогда
											Если ОбъектыРасчетовСервер.ОбъектГотовКЗаполнению(
													СтрокаЗадолженность.ОбъектРасчетов,
													СтрокаЗадолженность.УдалитьЗаказ,
													ГотовКЗаполнению) Тогда
											ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Не удалось заполнить объект расчетов в документе: %1, строка № %2, таличная часть %3'"),
												Ссылка,
												СтрокаЗадолженность.НомерСтроки,
												ТабЧастьЗадолженность));
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
										
							КонецЕсли;
						ИначеЕсли ДокументОбъект.Проведен Тогда
							Если ОбъектыРасчетовСервер.ОбъектГотовКЗаполнению(
									СтрокаЗадолженность.ОбъектРасчетов,
									СтрокаЗадолженность.УдалитьЗаказ,
									ГотовКЗаполнению) Тогда
								ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не удалось заполнить объект расчетов в документе: %1, строка № %2, таличная часть %3'"),
									Ссылка,
									СтрокаЗадолженность.НомерСтроки,
									ТабЧастьЗадолженность));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			#КонецОбласти
			
			#Область ЗаполнениеОбъектРасчетовИнтеркампани
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ОбъектРасчетовИнтеркампани)
				И (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями
					ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями)
				Тогда
					Отбор = Новый Структура("Взаимозачет", Ссылка);
					НайденныеСтроки = ВыборкаОбъектРасчетовИнтеркампани.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 1 И ЗначениеЗаполнено(НайденныеСтроки[0].ОбъектРасчетовИнтеркампани) Тогда
						ДокументОбъект.ОбъектРасчетовИнтеркампани = НайденныеСтроки[0].ОбъектРасчетовИнтеркампани;
					ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
						УникальынеВалютыВзаиморасчета = ДокументОбъект.ДебиторскаяЗадолженность.ВыгрузитьКолонку("ВалютаВзаиморасчетов");
						ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(УникальынеВалютыВзаиморасчета);
						Если УникальынеВалютыВзаиморасчета.Количество() = 1 Тогда
							ВалютаВзаиморасчетов = УникальынеВалютыВзаиморасчета[0];
							ОтборПоВалюте = Новый Структура("Взаимозачет, ВалютаВзаиморасчетов", Ссылка, ВалютаВзаиморасчетов);
							НайденныеСтрокиПоВалюте = ВыборкаОбъектРасчетовИнтеркампани.НайтиСтроки(ОтборПоВалюте);
							
							Если НайденныеСтрокиПоВалюте.Количество() = 1 И ЗначениеЗаполнено(НайденныеСтрокиПоВалюте[0].ОбъектРасчетовИнтеркампани) Тогда
								ДокументОбъект.ОбъектРасчетовИнтеркампани = НайденныеСтрокиПоВалюте[0].ОбъектРасчетовИнтеркампани;
							ИначеЕсли НайденныеСтрокиПоВалюте.Количество() > 1 Тогда
								ОтборПоВалюте.Вставить("ТолькоОстатки", Ложь);
								ДополнительныйПоиск = ВыборкаОбъектРасчетовИнтеркампани.НайтиСтроки(ОтборПоВалюте);
								Если ДополнительныйПоиск.Количество() = 1
									И ЗначениеЗаполнено(ДополнительныйПоиск[0].ОбъектРасчетовИнтеркампани) Тогда
										ДокументОбъект.ОбъектРасчетовИнтеркампани = ДополнительныйПоиск[0].ОбъектРасчетовИнтеркампани;
								Иначе
									Если ОбъектыРасчетовСервер.ОбъектГотовКЗаполнению(
											ДокументОбъект.ОбъектРасчетовИнтеркампани,
											ДокументОбъект.УдалитьОбъектРасчетовИнтеркампани,
											ГотовКЗаполнению) Тогда
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Не удалось заполнить поле Объект расчетов интеркампани в документе: %1'"),
												Ссылка);
						
										ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
											УровеньЖурналаРегистрации.Предупреждение,
											МетаданныеДокумента,
											,
											ТекстСообщения);
									КонецЕсли;
								КонецЕсли;
							Иначе
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не удалось заполнить поле Объект расчетов интеркампани в документе: %1'"),
										Ссылка);
				
								ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									МетаданныеДокумента,
									,
									ТекстСообщения);
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли ДокументОбъект.Проведен Тогда
						Если ОбъектыРасчетовСервер.ОбъектГотовКЗаполнению(
							ДокументОбъект.ОбъектРасчетовИнтеркампани,
							ДокументОбъект.УдалитьОбъектРасчетовИнтеркампани,
							ГотовКЗаполнению) Тогда
								
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось заполнить поле Объект расчетов интеркампани в документе: %1'"),
									Ссылка);
			
							ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Предупреждение,
								МетаданныеДокумента,
								,
								ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
			КонецЕсли;
				
			#КонецОбласти
			
			#Область ЗаполнениеОбъектРасчетовДебиторКредитор
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ОбъектРасчетовДебиторКредитор) 
				И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный
				И (ДокументОбъект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
				ИЛИ ДокументОбъект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик
				ИЛИ ДокументОбъект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
				ИЛИ ДокументОбъект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик)
				И ДокументОбъект.КонтрагентДебитор <> ДокументОбъект.КонтрагентКредитор Тогда
					Отбор = Новый Структура("Взаимозачет", Ссылка);
					НайденныеСтроки = ВыборкаОбъектРасчетовДебиторКредитор.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 1 И ЗначениеЗаполнено(НайденныеСтроки[0].ОбъектРасчетовДебиторКредитор) Тогда
						ДокументОбъект.ОбъектРасчетовДебиторКредитор = НайденныеСтроки[0].ОбъектРасчетовДебиторКредитор;
					ИначеЕсли ДокументОбъект.Проведен Тогда
						ДанныеДляПоискаОРДебиторКредитор = МенеджерВТ.Таблицы[1].ПолучитьДанные().Выгрузить();	
						Если ДанныеДляПоискаОРДебиторКредитор.Количество() Тогда 
							АналитикаПоиска = ДанныеДляПоискаОРДебиторКредитор[0];
							ПараметрыПоиска = ОбъектыРасчетовСервер.ПолучитьПараметрыОбъектаРасчетов();
							ПараметрыПоиска.Контрагент	= АналитикаПоиска.Контрагент;
							ПараметрыПоиска.Партнер		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АналитикаПоиска.Контрагент, "Партнер");
							ПараметрыПоиска.Организация	= АналитикаПоиска.Организация;
							ПараметрыПоиска.Договор 	= ?(ТипЗнч(АналитикаПоиска.Контрагент) = Тип("СправочникСсылка.Контрагенты"),
																Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),
																Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка());
							ПараметрыПоиска.ТипРасчетов	= ?(АналитикаПоиска.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом, 
																Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком,
																Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
							
							ОРДебиторКредитор = ОбъектыРасчетовСервер.НайтиОбъектРасчетовПоАналитикеУчетаПоПартнерам(ПараметрыПоиска);
							
							Если ЗначениеЗаполнено(ОРДебиторКредитор) Тогда
								ДокументОбъект.ОбъектРасчетовДебиторКредитор = ОРДебиторКредитор;
							Иначе
								ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не удалось заполнить поле Объект расчетов Дебитор/Кредитор в документе: %1';"),
									Ссылка));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
			КонецЕсли;
			#КонецОбласти
			
			#Область ИзменениеВидаОперацииВзаимозачета
			Если ДокументОбъект.Комментарий = КомментарийЗачетОплат
				И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента
				И ДокументОбъект.ДебиторскаяЗадолженность.Количество() = 1 Тогда
					ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент;
				
			ИначеЕсли ДокументОбъект.Комментарий = КомментарийЗачетОплат
				И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика
				И ДокументОбъект.ДебиторскаяЗадолженность.Количество() = 1 Тогда
					ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент;
			
			ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями
				И ДокументОбъект.ДебиторскаяЗадолженность.Количество() = 1 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями;
			
			ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями
				И ДокументОбъект.ДебиторскаяЗадолженность.Количество() = 1 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями;
				
			ИначеЕсли ДокументОбъект.ВидОперации <> Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер
				И ДокументОбъект.ВидОперации <> Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный;
				
			КонецЕсли;
			#КонецОбласти

			Если Не ГотовКЗаполнению Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ДокументОбъект.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
	
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Ссылка);
		КонецПопытки;
	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

Функция ТекстЗапросаРегистрацияДанныхДляГенерацииПустогоОбъектаРасчетов() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.Ссылка.КонтрагентДебитор КАК Контрагент
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ВзаимозачетЗадолженностиДебиторскаяЗадолженность
	|ГДЕ
	|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.УдалитьЗаказ В (&ПустыеЗначенияОбъектРасчетов)
	|	И ВзаимозачетЗадолженностиДебиторскаяЗадолженность.Ссылка.Проведен
	|	И ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.Ссылка.КонтрагентКредитор КАК Контрагент
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ВзаимозачетЗадолженностиКредиторскаяЗадолженность
	|ГДЕ
	|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.УдалитьЗаказ В (&ПустыеЗначенияОбъектРасчетов)
	|	И ВзаимозачетЗадолженностиКредиторскаяЗадолженность.Ссылка.Проведен
	|	И ВзаимозачетЗадолженностиКредиторскаяЗадолженность.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолучениеДанныхДляГенерацииПустогоОбъектаРасчетов() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТЧДебиторскаяЗадолженность.ТипРасчетов КАК ТипРасчетов,
	|	ТЧДебиторскаяЗадолженность.Организация,
	|	ТЧДебиторскаяЗадолженность.Партнер,
	|	ИсточникДанных.КонтрагентДебитор,
	|	ВЫБОР КОГДА ИсточникДанных.ТипДебитора В (ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияКлиент),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик))
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка),
	|	ТЧДебиторскаяЗадолженность.ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ТЧДебиторскаяЗадолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ИсточникДанных
	|		ПО ТЧДебиторскаяЗадолженность.Ссылка = ИсточникДанных.Ссылка
	|ГДЕ
	|	ТЧДебиторскаяЗадолженность.УдалитьЗаказ В (&ПустыеЗначенияОбъектРасчетов)
	|	И ИсточникДанных.Проведен
	|	И ИсточникДанных.КонтрагентДебитор В (&ОбрабатываемыеДанные)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТЧКредиторскаяЗадолженность.ТипРасчетов КАК ТипРасчетов,
	|	ТЧКредиторскаяЗадолженность.Организация,
	|	ТЧКредиторскаяЗадолженность.Партнер,
	|	ИсточникДанных.КонтрагентКредитор,
	|	ВЫБОР КОГДА ИсточникДанных.ТипКредитора В (ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияКлиент),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик))
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка),
	|	ТЧКредиторскаяЗадолженность.ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ТЧКредиторскаяЗадолженность
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК ИсточникДанных
	|		ПО ТЧКредиторскаяЗадолженность.Ссылка = ИсточникДанных.Ссылка
	|ГДЕ
	|	ТЧКредиторскаяЗадолженность.УдалитьЗаказ В (&ПустыеЗначенияОбъектРасчетов)
	|	И ИсточникДанных.Проведен
	|	И ИсточникДанных.КонтрагентКредитор В (&ОбрабатываемыеДанные)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПроблемныеОбъектыРасчетов(Регистратор)
	
	ОбъектыРасчетов = Новый Массив();
	
	Для Каждого СтрокаТЧ Из Регистратор.ДебиторскаяЗадолженность Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов) 
				И ЗначениеЗаполнено(СтрокаТЧ.УдалитьЗаказ) Тогда
					ОбъектыРасчетов.Добавить(СтрокаТЧ.УдалитьЗаказ);
				КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Регистратор.КредиторскаяЗадолженность Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов) 
				И ЗначениеЗаполнено(СтрокаТЧ.УдалитьЗаказ) Тогда
					ОбъектыРасчетов.Добавить(СтрокаТЧ.УдалитьЗаказ);
				КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДебиторскаяЗадолженность.УдалитьЗаказ КАК ОбъектРасчетов
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
	|ГДЕ
	|	ДебиторскаяЗадолженность.УдалитьЗаказ В(&ОбъектыРасчетов)
	|	И ДебиторскаяЗадолженность.Ссылка = &Регистратор
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|				ГДЕ
	|					РасчетыСКлиентами.Регистратор = &Регистратор
	|					И РасчетыСКлиентами.УдалитьЗаказКлиента = ДебиторскаяЗадолженность.ОбъектРасчетов)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|				ГДЕ
	|					РасчетыСПоставщиками.Регистратор = &Регистратор
	|					И РасчетыСПоставщиками.УдалитьЗаказПоставщику = ДебиторскаяЗадолженность.ОбъектРасчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КредиторскаяЗадолженность.УдалитьЗаказ
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК КредиторскаяЗадолженность
	|ГДЕ
	|	КредиторскаяЗадолженность.УдалитьЗаказ В(&ОбъектыРасчетов)
	|	И КредиторскаяЗадолженность.Ссылка = &Регистратор
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|				ГДЕ
	|					РасчетыСКлиентами.Регистратор = &Регистратор
	|					И РасчетыСКлиентами.УдалитьЗаказКлиента = КредиторскаяЗадолженность.ОбъектРасчетов)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|				ГДЕ
	|					РасчетыСПоставщиками.Регистратор = &Регистратор
	|					И РасчетыСПоставщиками.УдалитьЗаказПоставщику = КредиторскаяЗадолженность.ОбъектРасчетов)");
	Запрос.УстановитьПараметр("ОбъектыРасчетов", ОбъектыРасчетов);
	Запрос.УстановитьПараметр("Регистратор", Регистратор.Ссылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
