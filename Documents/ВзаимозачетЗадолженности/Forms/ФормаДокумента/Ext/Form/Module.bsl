#Область ОписаниеПеременных

&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

&НаКлиенте
Перем ПараметрыОжидания;

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

&НаКлиенте
Перем ПредыдущиеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	УстановитьУсловноеОформление();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	СписаниеДебиторскойЗадолженности = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности;
	СписаниеКредиторскойЗадолженности = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаПодвал.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	ФормированиеФискальныхЧековСервер.ФормаПриСозданииНаСервере(ЭтотОбъект);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УстановитьВидимостьБазоваяВерсия();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный
		И Объект.ДебиторскаяЗадолженность.Количество() > 0 Тогда
		ВалютаВзаиморасчетов = Объект.ДебиторскаяЗадолженность[0].ВалютаВзаиморасчетов;
	КонецЕсли;
	ПриЧтенииСозданииНаСервере();
	
	ФормированиеФискальныхЧековСервер.ФормаПриЧтенииНаСервере(ЭтотОбъект);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Справочник.ОбъектыРасчетов.Форма.ПодборОбъектовРасчетов" Тогда
		
		Если РезультатВыбора.ХозяйственнаяОперация = СписаниеДебиторскойЗадолженности Тогда
			ПолучитьДебиторскуюЗадолженностиИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
			Если Объект.ДебиторскаяЗадолженность.Количество() > 0 Тогда
				УстановитьВалютуВзаиморасчетов(Объект.ДебиторскаяЗадолженность[0].ВалютаВзаиморасчетов);
			КонецЕсли;
			
			Если НЕ НоваяАрхитектураВзаиморасчетов Тогда
				ПараметрыЗадолженностиДебитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
				ЗаполняемаяТЧ = "ДебиторскаяЗадолженность";
				АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор);
				Если АналитикаКРасчету.Количество() > 0 Тогда
					ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура("ТолькоСуммы");
			АвтоТест_РассчитатьВзаимозачетЗавершение(Неопределено,ДополнительныеПараметры);
			
		Иначе
			ПолучитьКредиторскуюЗадолженностиИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
			Если Объект.КредиторскаяЗадолженность.Количество() > 0 Тогда
				УстановитьВалютуВзаиморасчетов(Объект.КредиторскаяЗадолженность[0].ВалютаВзаиморасчетов);
			КонецЕсли;
			
			Если НЕ НоваяАрхитектураВзаиморасчетов Тогда
				ПараметрыЗадолженностиКредитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
				ЗаполняемаяТЧ = "КредиторскаяЗадолженность";
				АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиКредитор);
				Если АналитикаКРасчету.Количество() > 0 Тогда
					ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура("ТолькоСуммы");
			АвтоТест_РассчитатьВзаимозачетЗавершение(Неопределено,ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами	
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ФормированиеФискальныхЧековСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_ВзаимозачетЗадолженности", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СуммаДтРегл  = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
		СуммаКтРегл  = Объект.КредиторскаяЗадолженность.Итог("СуммаРегл");
		СуммаДтУпр   = Объект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
		СуммаКтУпр   = Объект.КредиторскаяЗадолженность.Итог("СуммаУпр");
		
		Если Объект.КредиторскаяЗадолженность.Итог("Сумма")<>0 Тогда
			Для Каждого Строка Из Объект.КредиторскаяЗадолженность Цикл
				Строка.Сумма = 0;
			КонецЦикла;
		КонецЕсли;
		
		Если Объект.ДебиторскаяЗадолженность.Итог("Сумма")<>0 Тогда
			Для Каждого Строка Из Объект.ДебиторскаяЗадолженность Цикл
				Строка.Сумма = 0;
			КонецЦикла;
		КонецЕсли;
		
		Если СуммаДтРегл = СуммаКтРегл Тогда
			Объект.СуммаРегл = СуммаДтРегл;
		КонецЕсли;
		Если СуммаДтУпр = СуммаКтУпр Тогда
			Объект.СуммаУпр = СуммаДтУпр;
		КонецЕсли;
		
		Если СуммаДтРегл <> СуммаКтРегл ИЛИ СуммаДтУпр <> СуммаКтУпр Тогда
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный") Тогда
				Отказ = Истина;
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение", 
					ЭтотОбъект,
					ДополнительныеПараметры);
				
				ПересчитатьСуммыРеглУпр(ОписаниеОповещения);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса Тогда
		ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПереключательДебиторскаяЗадолженность = 0 ИЛИ ПереключательКредиторскаяЗадолженность = 0 Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ДополнительныеСвойства.Вставить("ДебиторскаяБезРазбиения", ПереключательДебиторскаяЗадолженность = 0);
		ДокументОбъект.ДополнительныеСвойства.Вставить("КредиторскаяБезРазбиения", ПереключательКредиторскаяЗадолженность = 0);
		
		Если Элементы.ГруппаДебиторскаяЗадолженность.Видимость Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("ИмяСпискаДт", Элементы.ГруппаДебиторскаяЗадолженность.Заголовок);
		КонецЕсли;
		Если Элементы.ГруппаПолучательДт.Видимость Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("ИмяСпискаДт", Элементы.ГруппаПолучательДт.Заголовок);
		КонецЕсли;
		
		Если Элементы.ГруппаКредиторскаяЗадолженность.Видимость Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("ИмяСпискаКт", Элементы.ГруппаКредиторскаяЗадолженность.Заголовок);
		КонецЕсли;
		Если Элементы.ГруппаПолучательКт.Видимость Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("ИмяСпискаКт", Элементы.ГруппаПолучательКт.Заголовок);
		КонецЕсли;
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ИнициализироватьПредыдущиеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Возврат; // не пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() = 0 Тогда
	
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("ВидОперации", Объект.ВидОперации);
		Оповещение = Новый ОписаниеОповещения("ВидОперацииНачалоВыбораЗавершение", ЭтаФорма);
		ОткрытьФорму(
			"Документ.ВзаимозачетЗадолженности.Форма.ВыборВидаОперации",
			ПараметрыФормы,
			ЭтаФорма,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Объект.ВидОперации <> Результат Тогда
		Объект.ВидОперации = Результат;
		Модифицированность = Истина;
		ВидОперацииПриИзмененииСервер();
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ВидОперацииПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДебитораПриИзменении(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	Оповещение = Новый ОписаниеОповещения(
		"ТипДебитораПриИзмененииНужноОчищатьТЧЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	НужноОчищатьТЧ(Оповещение, ЕстьСтроки("ДебиторскаяЗадолженность"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДебитораПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	Если ОчиститьТЧ = КодВозвратаДиалога.Да Тогда
		
		Объект.ОбъектРасчетовДебиторКредитор = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
		ТипДебитораПриИзмененииНаСервере();
		
		ОчиститьТабличнуюЧасть("ДебиторскаяЗадолженность");
		ПредыдущиеЗначения.ТипДебитора = Объект.ТипДебитора;
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.КонтрагентДебитор);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
	Иначе
		Объект.ТипДебитора = ПредыдущиеЗначения.ТипДебитора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКредитораПриИзменении(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	Оповещение = Новый ОписаниеОповещения(
		"ТипКредитораПриИзмененииНужноОчищатьТЧЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	НужноОчищатьТЧ(Оповещение, ЕстьСтроки("КредиторскаяЗадолженность"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКредитораПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	Если ОчиститьТЧ = КодВозвратаДиалога.Да Тогда
		
		Объект.ОбъектРасчетовДебиторКредитор = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
		ТипКредитораПриИзмененииНаСервере();
		
		ОчиститьТабличнуюЧасть("КредиторскаяЗадолженность");
		ПредыдущиеЗначения.ТипКредитора = Объект.ТипКредитора;
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.КонтрагентКредитор);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
	Иначе
		Объект.ТипКредитора = ПредыдущиеЗначения.ТипКредитора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДебиторПриИзменении(Элемент)
	
	ИмяТаблицы = "ДебиторскаяЗадолженность";
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями") Тогда
		ИмяТаблицы = "КредиторскаяЗадолженность";
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
	
	Объект.ОбъектРасчетовДебиторКредитор = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("КонтрагентДебиторПриИзмененииНужноОчищатьТЧЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ЕстьСтроки(ИмяТаблицы));
	
КонецПроцедуры

// Параметры:
// 	ОчиститьТЧ - Булево
// 	ДополнительныеПараметры - Структура:
// 	 * Элемент - ПолеФормы
&НаКлиенте
Процедура КонтрагентДебиторПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	Если ОчиститьТЧ = КодВозвратаДиалога.Да Тогда
		
		КонтрагентДебиторПриИзмененииНаСервере();
		
		ЗаполнитьПартнераДебитора();
		
		ОчиститьТабличнуюЧасть(ДополнительныеПараметры.ИмяТаблицы);
		ПредыдущиеЗначения.КонтрагентДебитор = Объект.КонтрагентДебитор;
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, ДополнительныеПараметры.Элемент);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
	Иначе
		Объект.КонтрагентДебитор = ПредыдущиеЗначения.КонтрагентДебитор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ЕстьСтроки = ЕстьСтроки("КредиторскаяЗадолженность");
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями") Тогда
			ЕстьСтроки = ЕстьСтроки ИЛИ	ЕстьСтроки("ДебиторскаяЗадолженность");
	КонецЕсли;
	
	
	Объект.ОбъектРасчетовДебиторКредитор = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("КонтрагентКредиторПриИзмененииНужноОчищатьТЧЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ЕстьСтроки);
	
КонецПроцедуры

// Параметры:
// 	ОчиститьТЧ - Булево
// 	ДополнительныеПараметры - Структура:
// 	 * Элемент - ПолеФормы
&НаКлиенте
Процедура КонтрагентКредиторПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	Если ОчиститьТЧ = КодВозвратаДиалога.Да Тогда 
		
		КонтрагентКредиторПриИзмененииНаСервере();
		
		ЗаполнитьПартнераКредитора();
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями") Тогда
			ЗаполнитьПартнераДебитора();
			ОчиститьТабличнуюЧасть("ДебиторскаяЗадолженность");
		КонецЕсли;
		
		ОчиститьТабличнуюЧасть("КредиторскаяЗадолженность");
		ПредыдущиеЗначения.КонтрагентКредитор = Объект.КонтрагентКредитор;
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, ДополнительныеПараметры.Элемент);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
	Иначе
		Объект.КонтрагентКредитор = ПредыдущиеЗначения.КонтрагентКредитор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЕстьСтроки = ЕстьСтроки("ДебиторскаяЗадолженность") ИЛИ ЕстьСтроки("КредиторскаяЗадолженность");
	
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("ОрганизацияПриИзмененииНужноОчищатьТЧЗавершение", ЭтотОбъект),
		ЕстьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	Если ОчиститьТЧ = КодВозвратаДиалога.Да Тогда
		Объект.ОбъектРасчетовИнтеркампани = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
		Объект.ОбъектРасчетовИнтеркампаниЗеркальный = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
		ОрганизацияПриИзмененииСервер();
		ПредыдущиеЗначения.Организация = Объект.Организация;
	Иначе
		Объект.Организация = ПредыдущиеЗначения.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовИнтеркампаниНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ТипРасчетов", ?(РасчетыСКлиентамиДебитор,
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")));
	Отбор = Новый Массив;
	Отбор.Добавить(Объект.Организация);
	Отбор.Добавить(Объект.ОрганизацияКредитор);
	ЗначенияОтбора.Вставить("Организация", Отбор);
	ЗначенияОтбора.Вставить("Контрагент",  Отбор);
	
	НастройкиВыбора = Новый Структура();
	НастройкиВыбора.Вставить("ТекущаяСтрока", Объект.ОбъектРасчетовИнтеркампани);
	НастройкиВыбора.Вставить("УчитыватьФилиалы", Ложь);
	
	ОткрытьФормуВыбораОбъектовРасчетов(Элемент, ЗначенияОтбора, НастройкиВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовИнтеркампаниОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.ОбъектРасчетовИнтеркампани = ВыбранноеЗначение.ОбъектРасчетов;
		Модифицированность = Истина;
		ЗаблокироватьОбъектыРасчетов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовИнтеркампаниЗеркальныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ТипРасчетов", ?(РасчетыСКлиентамиДебитор,
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")));
	ЗначенияОтбора.Вставить("Организация", Объект.ОрганизацияКредитор);
	ЗначенияОтбора.Вставить("Контрагент",  Объект.Организация);
	
	НастройкиВыбора = Новый Структура();
	НастройкиВыбора.Вставить("ТекущаяСтрока", Объект.ОбъектРасчетовИнтеркампаниЗеркальный);
	НастройкиВыбора.Вставить("УчитыватьФилиалы", Ложь);
	
	ОткрытьФормуВыбораОбъектовРасчетов(Элемент, ЗначенияОтбора, НастройкиВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовИнтеркампаниЗеркальныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.ОбъектРасчетовИнтеркампаниЗеркальный = ВыбранноеЗначение.ОбъектРасчетов;
		Модифицированность = Истина;
		ЗаблокироватьОбъектыРасчетов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовДебиторКредиторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияОтбора = Новый Структура;
	
	Если РасчетыМеждуОрганизациямиДебитор И (НЕ РасчетыМеждуОрганизациямиКредитор ИЛИ РасчетыСКлиентамиКредитор) Тогда
		ЗначенияОтбора.Вставить("Организация", Объект.КонтрагентДебитор);
		ЗначенияОтбора.Вставить("Контрагент",  Объект.КонтрагентКредитор);
		
		ЗначенияОтбора.Вставить("ТипРасчетов", ?(РасчетыСКлиентамиКредитор,
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")));
	Иначе
		ЗначенияОтбора.Вставить("Организация", Объект.КонтрагентКредитор);
		ЗначенияОтбора.Вставить("Контрагент",  Объект.КонтрагентДебитор);
		
		ЗначенияОтбора.Вставить("ТипРасчетов", ?(РасчетыСКлиентамиДебитор ИЛИ РасчетыМеждуОрганизациямиДебитор,
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")));
	КонецЕсли;

	НастройкиВыбора = Новый Структура();
	НастройкиВыбора.Вставить("ТекущаяСтрока", Объект.ОбъектРасчетовДебиторКредитор);
	
	ОткрытьФормуВыбораОбъектовРасчетов(Элемент, ЗначенияОтбора, НастройкиВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовДебиторКредиторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.ОбъектРасчетовДебиторКредитор = ВыбранноеЗначение.ОбъектРасчетов;
		Модифицированность = Истина;
		ЗаблокироватьОбъектыРасчетов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовДебиторКредиторЗеркальныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияОтбора = Новый Структура;
	
	Если РасчетыМеждуОрганизациямиДебитор И (НЕ РасчетыМеждуОрганизациямиКредитор ИЛИ РасчетыСКлиентамиКредитор) Тогда
		ЗначенияОтбора.Вставить("Организация", Объект.КонтрагентКредитор);
		ЗначенияОтбора.Вставить("Контрагент",  Объект.КонтрагентДебитор);
		
		ЗначенияОтбора.Вставить("ТипРасчетов", ?(РасчетыСКлиентамиДебитор ИЛИ РасчетыМеждуОрганизациямиДебитор,
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")));
	Иначе
		ЗначенияОтбора.Вставить("Организация", Объект.КонтрагентДебитор);
		ЗначенияОтбора.Вставить("Контрагент",  Объект.КонтрагентКредитор);
		
		ЗначенияОтбора.Вставить("ТипРасчетов", ?(РасчетыСКлиентамиКредитор,
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
												ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")));
	КонецЕсли;

	НастройкиВыбора = Новый Структура();
	НастройкиВыбора.Вставить("ТекущаяСтрока", Объект.ОбъектРасчетовДебиторКредиторЗеркальный);
	
	ОткрытьФормуВыбораОбъектовРасчетов(Элемент, ЗначенияОтбора, НастройкиВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовДебиторКредиторЗеркальныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.ОбъектРасчетовДебиторКредиторЗеркальный = ВыбранноеЗначение.ОбъектРасчетов;
		Модифицированность = Истина;
		ЗаблокироватьОбъектыРасчетов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаДебиторскаяЗадолженность И Не ПереключательДебиторскаяЗадолженность Тогда
		ДебиторскаяЗадолженностьПриНачалеРедактирования(Элемент, Ложь, Ложь);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаКредиторскаяЗадолженность И Не ПереключательКредиторскаяЗадолженность Тогда
		КредиторскаяЗадолженностьПриНачалеРедактирования(Элемент, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДебиторскаяЗадолженностьПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если Не ПереключательДебиторскаяЗадолженность Тогда
		Если Объект.ДебиторскаяЗадолженность.Количество() = 0 Тогда
			НоваяСтрока = Объект.ДебиторскаяЗадолженность.Добавить();
			Элементы.ДебиторскаяЗадолженность.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ИначеЕсли Объект.ДебиторскаяЗадолженность.Количество() = 1 Тогда
			Если Элементы.ДебиторскаяЗадолженность.ТекущаяСтрока = Неопределено Тогда
				Элементы.ДебиторскаяЗадолженность.ТекущаяСтрока = Объект.ДебиторскаяЗадолженность[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.ДебиторскаяЗадолженность.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ПереключательДебиторскаяЗадолженность = 1;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКредиторскаяЗадолженностьПриИзменении(Элемент)
	
	Если Не ПереключательКредиторскаяЗадолженность Тогда
		Если Объект.КредиторскаяЗадолженность.Количество() = 0 Тогда
			НоваяСтрока = Объект.КредиторскаяЗадолженность.Добавить();
			Элементы.КредиторскаяЗадолженность.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ИначеЕсли Объект.КредиторскаяЗадолженность.Количество() = 1 Тогда
			Если Элементы.КредиторскаяЗадолженность.ТекущаяСтрока = Неопределено Тогда
				Элементы.КредиторскаяЗадолженность.ТекущаяСтрока = Объект.КредиторскаяЗадолженность[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.КредиторскаяЗадолженность.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ПереключательКредиторскаяЗадолженность = 1;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовИнтеркампаниПриИзменении(Элемент)
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовИнтеркампаниЗеркальныйПриИзменении(Элемент)
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовДебиторКредиторПриИзменении(Элемент)
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовДебиторКредиторЗеркальныйПриИзменении(Элемент)
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ПартнерКомиссионнойПродажиПриИзменении(Элемент)
	
	ПартнерКомиссионнойПродажиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерКомиссионнойПродажиПриИзмененииНаСервере()
	
	ЭтоОплатаЧерезКомиссионера = ?(Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера, Истина, Ложь);
	
	Если ЭтоОплатаЧерезКомиссионера Тогда
		ТекущаяСтрокаКлиент = Объект.ДебиторскаяЗадолженность[0];
		ТекущаяСтрокаКомиссионер = Объект.КредиторскаяЗадолженность[0];
	Иначе
		ТекущаяСтрокаКомиссионер = Объект.ДебиторскаяЗадолженность[0];
		ТекущаяСтрокаКлиент = Объект.КредиторскаяЗадолженность[0];
	КонецЕсли;
	
	ДанныеДоговораКомиссионера = ПолучитьДанныеПоДоговоруИзОбъектаРасчетов(ТекущаяСтрокаКомиссионер.ОбъектРасчетов);
	
	Если ДанныеДоговораКомиссионера.ВестиРасчетыЧерезКонечныхПокупателей Тогда
		ТекущаяСтрокаКлиент.Партнер = ПартнерКомиссионнойПродажи;
	Иначе
		ТекущаяСтрокаКлиент.Партнер = ТекущаяСтрокаКомиссионер.Партнер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентКомиссионнойПродажиПриИзменении(Элемент)
	
	КлиентКомиссионнойПродажиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КлиентКомиссионнойПродажиПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(КлиентКомиссионнойПродажи) Тогда
		ПартнерКомиссионнойПродажи = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(КлиентКомиссионнойПродажи);
	Иначе
		ПартнерКомиссионнойПродажи = Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
	
	ЭтоОплатаЧерезКомиссионера = ?(Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера, Истина, Ложь);
	ЭтоВозвратОплатыЧерезКомиссионера = ?(Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера, Истина, Ложь);
	
	Если (ЭтоОплатаЧерезКомиссионера Или ЭтоВозвратОплатыЧерезКомиссионера)
		И Объект.КредиторскаяЗадолженность.Количество() = 1 И Объект.ДебиторскаяЗадолженность.Количество() = 1 Тогда
			Если ЭтоОплатаЧерезКомиссионера Тогда
				ТекущаяСтрокаКлиент = Объект.ДебиторскаяЗадолженность[0];
				ТекущаяСтрокаКомиссионер = Объект.КредиторскаяЗадолженность[0];
				ИмяРеквизитаКонтрагентаКлиента = "КонтрагентДебитор";
			Иначе
				ТекущаяСтрокаКомиссионер = Объект.ДебиторскаяЗадолженность[0];
				ТекущаяСтрокаКлиент = Объект.КредиторскаяЗадолженность[0];
				ИмяРеквизитаКонтрагентаКлиента = "КонтрагентКредитор";
			КонецЕсли;
			
			ДанныеДоговораКомиссионера = ПолучитьДанныеПоДоговоруИзОбъектаРасчетов(ТекущаяСтрокаКомиссионер.ОбъектРасчетов);
			ДанныеДоговораКлиента = ПолучитьДанныеПоДоговоруИзОбъектаРасчетов(ТекущаяСтрокаКлиент.ОбъектРасчетов);
			
			Если ДанныеДоговораКомиссионера.ВестиРасчетыЧерезКонечныхПокупателей Тогда
				ТекущаяСтрокаКлиент.Партнер = ПартнерКомиссионнойПродажи;
				Объект[ИмяРеквизитаКонтрагентаКлиента] = КлиентКомиссионнойПродажи;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДоговораКлиента.Договор) Тогда
				
				Если ПартнерКомиссионнойПродажи <> ДанныеДоговораКлиента.Договор.Партнер
					Или КлиентКомиссионнойПродажи <> ДанныеДоговораКлиента.Договор.Контрагент Тогда
					
					ТекущаяСтрокаКлиент.ОбъектРасчетов = Неопределено;
					
					Если ЭтоОплатаЧерезКомиссионера Тогда
						УстановитьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
					Иначе
						УстановитьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДебиторскаяЗадолженность

&НаКлиенте
Процедура ДебиторскаяЗадолженностьБезРазбиенияОбъектРасчетовПриИзменении(Элемент)
	ОбъектРасчетовРасчетовПриИзменении("ДебиторскаяЗадолженность");
	ДебиторскаяЗадолженностьБезРазбиенияОбъектРасчетовПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьБезРазбиенияВалютаВзаиморасчетовПриИзменении(Элемент)
	ДебиторскаяЗадолженностьВалютаВзаиморасчетовПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		Если Не (РасчетыМеждуОрганизациямиДебитор Или ЗначениеЗаполнено(ПартнерДебитор)) Тогда
			ЗаполнитьПартнераДебитора();
		КонецЕсли;
		
		ТекущиеДанные.Партнер = ПартнерДебитор;
		
		СуммаОстатокРегл = Объект.СуммаРегл - Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
		Элемент.ТекущиеДанные.СуммаРегл = СуммаОстатокРегл;
		
		СуммаОстатокУпр = Объект.СуммаУпр - Объект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
		Элемент.ТекущиеДанные.СуммаУпр = СуммаОстатокУпр;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьОбъектРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовНачалоВыбора("Дт", Элемент, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьОбъектРасчетовПриИзменении(Элемент)
	ОбъектРасчетовРасчетовПриИзменении("ДебиторскаяЗадолженность");
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьОбъектРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовОбработкаВыбора("Дт", ВыбранноеЗначение);
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьОбъектРасчетовЗеркальныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовНачалоВыбора("Дт", Элемент, ДанныеВыбора, "Зеркальный");	
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьОбъектРасчетовЗеркальныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовОбработкаВыбора("Дт", ВыбранноеЗначение);
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательДтБезРазбиенияОбъектРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовНачалоВыбора("Дт", Элемент, ДанныеВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ПолучательДтБезРазбиенияОбъектРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовОбработкаВыбора("Дт", ВыбранноеЗначение);
	ПолучательДтБезРазбиенияОбъектРасчетовОбработкаВыбораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущаяСтрокаЗадолженности("Дт");
	ТекущиеДанные.СуммаУпр  = 0;
	ТекущиеДанные.СуммаРегл = 0;
	
	ЗаполнитьСуммыУпрРегл(СтруктураПараметровЗадолженности(ЭтаФорма, Ложь), Истина);
	
	Если ТекущиеДанные.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		ТекущиеДанные.СуммаРегл = ТекущиеДанные.СуммаВзаиморасчетов;
	ИначеЕсли ТекущиеДанные.СуммаРегл = 0 И ЗначениеЗаполнено(ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
		ТекущиеДанные.СуммаРегл = ПересчитатьВСуммуРегл(ТекущиеДанные.СуммаВзаиморасчетов,
			ТекущиеДанные.ВалютаВзаиморасчетов)
	КонецЕсли;
	Если ТекущиеДанные.ВалютаВзаиморасчетов = ВалютаУправленческогоУчета Тогда
		ТекущиеДанные.СуммаУпр = ТекущиеДанные.СуммаВзаиморасчетов;
	ИначеЕсли ТекущиеДанные.СуммаУпр = 0 И ЗначениеЗаполнено(ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
		ТекущиеДанные.СуммаУпр = ПересчитатьВСуммуУпр(ТекущиеДанные.СуммаВзаиморасчетов,
			ТекущиеДанные.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера"))
		И Объект.КредиторскаяЗадолженность.Количество() = 1 Тогда
	
		Объект.КредиторскаяЗадолженность[0].СуммаУпр = Объект.ДебиторскаяЗадолженность[0].СуммаУпр;
		Объект.КредиторскаяЗадолженность[0].СуммаРегл = Объект.ДебиторскаяЗадолженность[0].СуммаРегл;
		Объект.КредиторскаяЗадолженность[0].СуммаВзаиморасчетов = Объект.ДебиторскаяЗадолженность[0].СуммаВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьПослеУдаления(Элемент)
	ОчиститьВалютуВзаиморасчетов();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьОбъектРасчетовОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьВалютуВзаиморасчетов();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ПолучательДтБезРазбиенияОбъектРасчетовОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьВалютуВзаиморасчетов();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьБезРазбиенияОбъектРасчетовОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьВалютуВзаиморасчетов();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьОбъектРасчетовЗеркальныйПриИзменении(Элемент)
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьБезРазбиенияОбъектРасчетовЗеркальныйПриИзменении(Элемент)
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКредиторскаяЗадолженность

&НаКлиенте
Процедура КредиторскаяЗадолженностьБезРазбиенияОбъектРасчетовПриИзменении(Элемент)
	ОбъектРасчетовРасчетовПриИзменении("КредиторскаяЗадолженность");
	КредиторскаяЗадолженностьБезРазбиенияОбъектРасчетовПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьБезРазбиенияВалютаВзаиморасчетовПриИзменении(Элемент)
	КредиторскаяЗадолженностьВалютаВзаиморасчетовПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		
		Если НЕ (РасчетыМеждуОрганизациямиКредитор ИЛИ ЗначениеЗаполнено(ПартнерКредитор)) Тогда
			ЗаполнитьПартнераКредитора();
		КонецЕсли;
		
		ТекущиеДанные.Партнер = ПартнерКредитор;
		
		СуммаОстатокРегл = Объект.СуммаРегл - Объект.КредиторскаяЗадолженность.Итог("СуммаРегл");
		ТекущиеДанные.СуммаРегл = СуммаОстатокРегл;
		
		СуммаОстатокУпр = Объект.СуммаУпр - Объект.КредиторскаяЗадолженность.Итог("СуммаУпр");
		ТекущиеДанные.СуммаУпр = СуммаОстатокУпр;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьОбъектРасчетовПриИзменении(Элемент)
	ОбъектРасчетовРасчетовПриИзменении("КредиторскаяЗадолженность");
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьОбъектРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовНачалоВыбора("Кт", Элемент, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьОбъектРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовОбработкаВыбора("Кт", ВыбранноеЗначение); 
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьОбъектРасчетовЗеркальныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовНачалоВыбора("Кт", Элемент, ДанныеВыбора, "Зеркальный");
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьОбъектРасчетовЗеркальныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовОбработкаВыбора("Кт", ВыбранноеЗначение);
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьСуммаВзаиморасчетовПриИзменении(Элемент)

	ТекущиеДанные = ТекущаяСтрокаЗадолженности("Кт");
	ТекущиеДанные.СуммаУпр  = 0;
	ТекущиеДанные.СуммаРегл = 0;
	
	ЗаполнитьСуммыУпрРегл(СтруктураПараметровЗадолженности(ЭтаФорма, Истина), Ложь);
	
	Если ТекущиеДанные.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		ТекущиеДанные.СуммаРегл = ТекущиеДанные.СуммаВзаиморасчетов;
	ИначеЕсли ТекущиеДанные.СуммаРегл = 0 И ЗначениеЗаполнено(ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
		ТекущиеДанные.СуммаРегл = ПересчитатьВСуммуРегл(ТекущиеДанные.СуммаВзаиморасчетов,
			ТекущиеДанные.ВалютаВзаиморасчетов);
	КонецЕсли;
	Если ТекущиеДанные.ВалютаВзаиморасчетов = ВалютаУправленческогоУчета Тогда
		ТекущиеДанные.СуммаУпр = ТекущиеДанные.СуммаВзаиморасчетов;
	ИначеЕсли ТекущиеДанные.СуммаУпр = 0 И ЗначениеЗаполнено(ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
		ТекущиеДанные.СуммаУпр = ПересчитатьВСуммуУпр(ТекущиеДанные.СуммаВзаиморасчетов,
			ТекущиеДанные.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера"))
		И Объект.ДебиторскаяЗадолженность.Количество() = 1 Тогда
		
		Объект.ДебиторскаяЗадолженность[0].СуммаУпр = Объект.КредиторскаяЗадолженность[0].СуммаУпр;
		Объект.ДебиторскаяЗадолженность[0].СуммаРегл = Объект.КредиторскаяЗадолженность[0].СуммаРегл;
		Объект.ДебиторскаяЗадолженность[0].СуммаВзаиморасчетов = Объект.КредиторскаяЗадолженность[0].СуммаВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКтБезРазбиенияОбъектРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовНачалоВыбора("Кт", Элемент, ДанныеВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ПолучательКтБезРазбиенияОбъектРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовОбработкаВыбора("Кт", ВыбранноеЗначение);
	ПолучательКтБезРазбиенияОбъектРасчетовОбработкаВыбораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьПослеУдаления(Элемент)
	ОчиститьВалютуВзаиморасчетов();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьОбъектРасчетовОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьВалютуВзаиморасчетов();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКтБезРазбиенияОбъектРасчетовОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьВалютуВзаиморасчетов();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьБезРазбиенияОбъектРасчетовОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьВалютуВзаиморасчетов();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьОбъектРасчетовЗеркальныйПриИзменении(Элемент)
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьБезРазбиенияОбъектРасчетовЗеркальныйПриИзменении(Элемент)
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетаКомиссионераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРасчетовНачалоВыбора("Кт", Элемент, ДанныеВыбора);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоДоговоруИзОбъектаРасчетов(ОбъектРасчета)
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураДанных.Вставить("ВестиРасчетыЧерезКонечныхПокупателей", Ложь);
	
	ДоговорКомиссионера = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ОбъектРасчета) Тогда
		Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчета, "Договор");
		СтруктураДанных.Договор = Договор;
		Если ЗначениеЗаполнено(Договор) Тогда
			СтруктураДанных.ВестиРасчетыЧерезКонечныхПокупателей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВестиРасчетыЧерезКонечныхПокупателей");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура ОбъектРасчетовКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеПоКомиссионеру = Объект.КредиторскаяЗадолженность[0];
	Если Не ЗначениеЗаполнено(ДанныеПоКомиссионеру.ОбъектРасчетов) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru ='Не задан объект расчетов комиссионера. Выберете объект расчетов комиссионера.'"));
		Возврат;
	КонецЕсли;
	
	Вид = "Дт";
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, Ложь);
	ТекущиеДанные = ТекущаяСтрокаЗадолженности(Вид);
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ТипРасчетов", ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"));
	ЗначенияОтбора.Вставить("Организация", ПараметрыЗадолженности.Организация.Значение);
	ЗначенияОтбора.Вставить("ПлатежиПо275ФЗ" , Ложь);
	ДанныеДоговораСКомиссионером = ПолучитьДанныеПоДоговоруИзОбъектаРасчетов(ДанныеПоКомиссионеру.ОбъектРасчетов);
	ПараметрыОтбораКонечногоКлиента = Новый Структура();
	ПараметрыОтбораКонечногоКлиента.Вставить("ВыбратьОбъектыРасчетовСКонечнымКлиентом", Истина);
	ПараметрыОтбораКонечногоКлиента.Вставить("ДоговорСКомиссионером", ДанныеДоговораСКомиссионером.Договор);
	Если ДанныеДоговораСКомиссионером.ВестиРасчетыЧерезКонечныхПокупателей Тогда
		ПараметрыОтбораКонечногоКлиента.Вставить("Партнер", ТекущиеДанные.Партнер);
		ПараметрыОтбораКонечногоКлиента.Вставить("Контрагент", ПараметрыЗадолженности.Контрагент.Значение);
	Иначе
		ПараметрыОтбораКонечногоКлиента.Вставить("Партнер", ПартнерКомиссионнойПродажи);
		ПараметрыОтбораКонечногоКлиента.Вставить("Контрагент", КлиентКомиссионнойПродажи);
	КонецЕсли;
	
	НастройкиВыбора = Новый Структура;
	НастройкиВыбора.Вставить("ВыбратьОбъектыРасчетовПоКомиссии", ПараметрыОтбораКонечногоКлиента);
	НастройкиВыбора.Вставить("Сумма", 0);
	НастройкиВыбора.Вставить("ПодборДебиторскойЗадолженности", Ложь);
	
	ОткрытьФормуВыбораОбъектовРасчетов(Элемент, ЗначенияОтбора, НастройкиВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовКлиентаВозвратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеПоКомиссионеру = Объект.ДебиторскаяЗадолженность[0];
	Если Не ЗначениеЗаполнено(ДанныеПоКомиссионеру.ОбъектРасчетов) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не задан объект расчетов комиссионера. Выберете объект расчетов комиссионера.'"));
		Возврат;
	КонецЕсли;
	
	Вид = "Кт";
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	ТекущиеДанные = ТекущаяСтрокаЗадолженности(Вид);
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ТипРасчетов", ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"));
	ЗначенияОтбора.Вставить("Организация", ПараметрыЗадолженности.Организация.Значение);
	ЗначенияОтбора.Вставить("ПлатежиПо275ФЗ" , Ложь);
	
	ДанныеДоговораСКомиссионером = ПолучитьДанныеПоДоговоруИзОбъектаРасчетов(ДанныеПоКомиссионеру.ОбъектРасчетов);
	ПараметрыОтбораКонечногоКлиента = Новый Структура();
	ПараметрыОтбораКонечногоКлиента.Вставить("ВыбратьОбъектыРасчетовСКонечнымКлиентом", Истина);
	ПараметрыОтбораКонечногоКлиента.Вставить("ДоговорСКомиссионером", ДанныеДоговораСКомиссионером.Договор);
	Если ДанныеДоговораСКомиссионером.ВестиРасчетыЧерезКонечныхПокупателей Тогда
		ПараметрыОтбораКонечногоКлиента.Вставить("Партнер", ТекущиеДанные.Партнер);
		ПараметрыОтбораКонечногоКлиента.Вставить("Контрагент", ПараметрыЗадолженности.Контрагент.Значение);
	Иначе
		ПараметрыОтбораКонечногоКлиента.Вставить("Партнер", ПартнерКомиссионнойПродажи);
		ПараметрыОтбораКонечногоКлиента.Вставить("Контрагент", КлиентКомиссионнойПродажи);
	КонецЕсли;
	
	НастройкиВыбора = Новый Структура;
	НастройкиВыбора.Вставить("ВыбратьОбъектыРасчетовПоКомиссии", ПараметрыОтбораКонечногоКлиента);
	НастройкиВыбора.Вставить("Сумма", 0);
	НастройкиВыбора.Вставить("ПодборДебиторскойЗадолженности", Ложь);
	
	ОткрытьФормуВыбораОбъектовРасчетов(Элемент, ЗначенияОтбора, НастройкиВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

// Функция используется в автотесте процесса продаж.
//
&НаКлиенте
Процедура АвтоТест_РассчитатьВзаимозачет(Команда) Экспорт
	
	ОчиститьСообщения();
	Если ОбновлениеНеЗавершено() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Заполнение документа недоступно, т.к. не завершено обновление системы.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДебиторки = СтруктураПараметровЗадолженности(ЭтаФорма);
	ПараметрыКредиторки = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
		ПараметрыДебиторки.Организация.ИмяРеквизита,
		ПараметрыДебиторки.Организация.Представление);
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
		ПараметрыДебиторки.Контрагент.ИмяРеквизита,
		ПараметрыДебиторки.Контрагент.Представление);
	
	Если ПараметрыДебиторки.Организация.ИмяРеквизита <> ПараметрыКредиторки.Организация.ИмяРеквизита Тогда
		ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
			ПараметрыКредиторки.Организация.ИмяРеквизита,
			ПараметрыКредиторки.Организация.Представление);
	КонецЕсли;
	
	Если ПараметрыДебиторки.Контрагент.ИмяРеквизита <> ПараметрыКредиторки.Контрагент.ИмяРеквизита Тогда
		ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
			ПараметрыКредиторки.Контрагент.ИмяРеквизита,
			ПараметрыКредиторки.Контрагент.Представление);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РассчитатьВзаимозачетЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВзаимозачетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьСтрокиДтЗадолженности = ЕстьСтроки("ДебиторскаяЗадолженность");
	ЕстьСтрокиКтЗадолженности =  ЕстьСтроки("КредиторскаяЗадолженность");
	
	Если ЕстьСтрокиДтЗадолженности ИЛИ ЕстьСтрокиКтЗадолженности Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьВзаимозачет", ЭтотОбъект), 
			НСтр("ru='При выполнении операции табличные части дебиторской и кредиторской задолженности будут очищены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
	Иначе
		АвтоТест_РассчитатьВзаимозачетЗавершение(Неопределено, Неопределено);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВзаимозачет(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	Иначе
		Объект.СуммаРегл = 0;
		Объект.СуммаУпр = 0;
		
		Объект.ДебиторскаяЗадолженность.Очистить();
		Объект.КредиторскаяЗадолженность.Очистить();
		АвтоТест_РассчитатьВзаимозачетЗавершение(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамДебиторскуюЗадолженность(Команда)
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма);
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
		ПараметрыЗадолженности.Организация.ИмяРеквизита,
		ПараметрыЗадолженности.Организация.Представление);
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
		ПараметрыЗадолженности.Контрагент.ИмяРеквизита,
		ПараметрыЗадолженности.Контрагент.Представление);
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамДебиторскуюЗадолженностьЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамКредиторскуюЗадолженность(Команда)
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
		ПараметрыЗадолженности.Организация.ИмяРеквизита,
		ПараметрыЗадолженности.Организация.Представление);
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
		ПараметрыЗадолженности.Контрагент.ИмяРеквизита,
		ПараметрыЗадолженности.Контрагент.Представление);
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамКредиторскуюЗадолженностьЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДебиторскойЗадолженности(Команда)
	
	ОчиститьСообщения();
	Если ОбновлениеНеЗавершено() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Заполнение документа недоступно, т.к. не завершено обновление системы.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадолженностиКредитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
		ПараметрыЗадолженностиКредитор.Организация.ИмяРеквизита,
		ПараметрыЗадолженностиКредитор.Организация.Представление);
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
		ПараметрыЗадолженностиКредитор.Контрагент.ИмяРеквизита,
		ПараметрыЗадолженностиКредитор.Контрагент.Представление);
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоДебиторскойЗадолженностиЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДебиторскойЗадолженностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗадолженностиКредитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	Если НЕ НоваяАрхитектураВзаиморасчетов Тогда
		АналитикаКРасчету = ЕстьЗаданияКРаспределению(, ПараметрыЗадолженностиКредитор);
			
		Если АналитикаКРасчету.Количество() > 0 Тогда
			ЗаполняемаяТЧ = "КредиторскаяЗадолженность";
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаРеглДт = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
	Если Объект.ДебиторскаяЗадолженность.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Дебиторская задолженность не заполнена!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамКредиторскуюЗадолженностьСервер(ПараметрыЗадолженностиКредитор);
	
	Объект.СуммаРегл = СуммаРеглДт;
	
	РассчитатьСуммыВзаимозачета(Объект.СуммаРегл);
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДолгамАвансамВыданным(Команда)
	ЗаполнитьПолучателяПоАвансамДолгам("Кт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКредиторскойЗадолженности(Команда)
	
	ОчиститьСообщения();
	Если ОбновлениеНеЗавершено() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Заполнение документа недоступно, т.к. не завершено обновление системы.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадолженностиДебитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
		ПараметрыЗадолженностиДебитор.Организация.ИмяРеквизита,
		ПараметрыЗадолженностиДебитор.Организация.Представление);
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить(
		ПараметрыЗадолженностиДебитор.Контрагент.ИмяРеквизита,
		ПараметрыЗадолженностиДебитор.Контрагент.Представление);
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКредиторскойЗадолженностиЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКредиторскойЗадолженностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗадолженностиДебитор  = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	Если НЕ НоваяАрхитектураВзаиморасчетов Тогда
		АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор);
		
		Если АналитикаКРасчету.Количество() > 0 Тогда
			ЗаполняемаяТЧ = "ДебиторскаяЗадолженность";
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаРеглКт = Объект.КредиторскаяЗадолженность.Итог("СуммаРегл");
	Если Объект.КредиторскаяЗадолженность.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Кредиторская задолженность не заполнена!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамДебиторскуюЗадолженностьСервер(ПараметрыЗадолженностиДебитор);
	
	Объект.СуммаРегл = СуммаРеглКт;
	РассчитатьСуммыВзаимозачета(Объект.СуммаРегл);
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДолгамАвансамПолученным(Команда)
	ЗаполнитьПолучателяПоАвансамДолгам("Дт");
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьСвойстваЭлементовФормыПоВидуОперации()
	
	ПроизвольнаяОперация = (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный);
	ОперацияПоЗачетуПлатежаЧерезКомиссионера = (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера);
	ОперацияПоВозвратуПлатежаОтКомиссионера = (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера);
	
	ОперацияБартер = (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер);
	
	Элементы.ТипДебитора.Видимость  = ПроизвольнаяОперация;
	Элементы.ТипКредитора.Видимость = ПроизвольнаяОперация;
	Элементы.ФормаРассчитатьВзаимозачет.Видимость = ПроизвольнаяОперация ИЛИ ОперацияБартер;
	
	СтруктураПредставлений = Документы.ВзаимозачетЗадолженности.ПредставлениеРеквизитовПоВидуОперации(Объект.ВидОперации);
	Элементы.Организация.Заголовок = СтруктураПредставлений.Организация;
	Элементы.ОрганизацияКредитор.Заголовок = СтруктураПредставлений.ОрганизацияКредитор;
	Элементы.ТипДебитора.Заголовок = СтруктураПредставлений.КонтрагентДебитор;
	Элементы.ТипКредитора.Заголовок = СтруктураПредставлений.КонтрагентКредитор;
	
	Элементы.КонтрагентДебитор.Заголовок = СтруктураПредставлений.КонтрагентДебитор;
	Элементы.КонтрагентКредитор.Заголовок = СтруктураПредставлений.КонтрагентКредитор;
	
	Если ПроизвольнаяОперация Тогда
		Элементы.КонтрагентДебитор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.КонтрагентКредитор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		Элементы.КонтрагентДебитор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.КонтрагентКредитор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	КонецЕсли;
	
	Элементы.ВыборДебитора.Видимость = Не ОперацияПоЗачетуПлатежаЧерезКомиссионера
		И Не ОперацияПоВозвратуПлатежаОтКомиссионера;
	
	МеждуОрганизациями = ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации);
	Элементы.ОрганизацияКредитор.Видимость          = МеждуОрганизациями;
	
	ВидимостьЭлемента = ВыбранВидОперацииМеждуКонтрагентами(Объект.ВидОперации);
	Элементы.ВыборКредитора.Видимость = ВидимостьЭлемента И Не ОперацияПоЗачетуПлатежаЧерезКомиссионера
		И Не ОперацияПоВозвратуПлатежаОтКомиссионера;
	
	УстановитьВидимостьЗадолженности();
	Если ВыбранВидОперацииПереносАванса() Тогда
		
		НовыйЗаголовок = НСтр("ru='Авансы'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НовыйЗаголовок;
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НовыйЗаголовок;
		
	ИначеЕсли ВыбранВидОперацииПереносДолга() Тогда
		
		НовыйЗаголовок = НСтр("ru='Долги'");
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НовыйЗаголовок;
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НовыйЗаголовок;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер Тогда
		
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НСтр("ru='Отгрузки'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НСтр("ru='Поступления'");
		
	Иначе
		
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НСтр("ru='Дебиторская задолженность'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НСтр("ru='Кредиторская задолженность'");
		
	КонецЕсли;
	
	Если НЕ ПереключательДебиторскаяЗадолженность Тогда
		Элементы.СтраницыДебиторскаяЗадолженность.ТекущаяСтраница = Элементы.ДебиторскаяЗадолженностьБезРазбиения;
		УстановитьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
	Иначе
		Элементы.СтраницыДебиторскаяЗадолженность.ТекущаяСтраница = Элементы.ДебиторскаяЗадолженностьСписком;
	КонецЕсли;
	
	Если НЕ ПереключательКредиторскаяЗадолженность Тогда
		Элементы.СтраницыКредиторскаяЗадолженность.ТекущаяСтраница = Элементы.КредиторскаяЗадолженностьБезРазбиения;
		УстановитьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
	Иначе
		Элементы.СтраницыКредиторскаяЗадолженность.ТекущаяСтраница = Элементы.КредиторскаяЗадолженностьСписком;
	КонецЕсли;
	
	УстановитьВидимостьФилиалов();
	УстановитьВидимостьОбъектаРасчетовДтКт();
	Элементы.ОбъектРасчетовИнтеркампани.Видимость = МеждуОрганизациями;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗадолженности()
	
	Элементы.ГруппаПодвал.Видимость = Ложь;
	Элементы.ГруппаИтогоРасчеты.Видимость = Ложь;
	
	Элементы.ДебиторскаяЗадолженностьСуммаРегл.Видимость = Ложь;
	Элементы.ДебиторскаяЗадолженностьСуммаУпр.Видимость = Ложь;
	
	Элементы.КредиторскаяЗадолженностьСуммаРегл.Видимость = Ложь;
	Элементы.КредиторскаяЗадолженностьСуммаУпр.Видимость = Ложь;
	
	ЗаголовокКнопки = НСтр("ru = 'Заполнить'");
	ОперацииСКлиентом = ВыбранВидОперацииСКлиентом();
	Если ВыбранВидОперацииПереносАванса() Тогда
		
		Элементы.ГруппаДебиторскаяЗадолженность.Видимость = НЕ ОперацииСКлиентом;
		Элементы.КнопкиДебиторскаяЗадолженность.Видимость = ОперацииСКлиентом;
		Элементы.ДебиторскаяЗадолженностьБезРазбиения.Видимость = ОперацииСКлиентом;
		Элементы.ГруппаПолучательКт.Видимость = НЕ ОперацииСКлиентом;
		
		Элементы.ГруппаКредиторскаяЗадолженность.Видимость = ОперацииСКлиентом;
		Элементы.КнопкиКредиторскаяЗадолженность.Видимость = НЕ ОперацииСКлиентом;
		Элементы.КредиторскаяЗадолженностьБезРазбиения.Видимость = НЕ ОперацииСКлиентом;
		Элементы.ГруппаПолучательДт.Видимость = ОперацииСКлиентом;
		
		Элементы.СтраницаОтраженияОплатыЧерезКомиссионера.Видимость = Ложь;
		Элементы.СтраницаОтражениеВозвратаОплатыЧерезКомиссионера.Видимость = Ложь;
		Элементы.ДанныеПоВходящемуДокументу.Видимость = Ложь;
		
		ЗаголовокКнопки = НСтр("ru = 'Заполнить по авансам'");
		
	ИначеЕсли ВыбранВидОперацииПереносДолга() Тогда
		
		Элементы.ГруппаПодвал.Видимость = Истина;
		Элементы.ГруппаИтогоРасчеты.Видимость = Ложь;
		
		Элементы.ГруппаДебиторскаяЗадолженность.Видимость = ОперацииСКлиентом;
		Элементы.КнопкиДебиторскаяЗадолженность.Видимость = НЕ ОперацииСКлиентом;
		Элементы.ДебиторскаяЗадолженностьБезРазбиения.Видимость = НЕ ОперацииСКлиентом;
		Элементы.ГруппаПолучательКт.Видимость = ОперацииСКлиентом;
		
		Элементы.ГруппаКредиторскаяЗадолженность.Видимость = НЕ ОперацииСКлиентом;
		Элементы.КнопкиКредиторскаяЗадолженность.Видимость = ОперацииСКлиентом;
		Элементы.КредиторскаяЗадолженностьБезРазбиения.Видимость = ОперацииСКлиентом;
		Элементы.ГруппаПолучательДт.Видимость = НЕ ОперацииСКлиентом;
		
		Элементы.СтраницаОтраженияОплатыЧерезКомиссионера.Видимость = Ложь;
		Элементы.СтраницаОтражениеВозвратаОплатыЧерезКомиссионера.Видимость = Ложь;
		Элементы.ДанныеПоВходящемуДокументу.Видимость = Ложь;
		
		ЗаголовокКнопки = НСтр("ru = 'Заполнить по долгам'");
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера Тогда
		
		Элементы.ГруппаПодвал.Видимость = Истина;
		Элементы.ГруппаИтогоРасчеты.Видимость = Ложь;
		
		Элементы.ГруппаДебиторскаяЗадолженность.Видимость = Ложь;
		Элементы.КнопкиДебиторскаяЗадолженность.Видимость = Ложь;
		Элементы.ДебиторскаяЗадолженностьБезРазбиения.Видимость = Ложь;
		Элементы.ГруппаПолучательКт.Видимость = Ложь;
		
		Элементы.ГруппаКредиторскаяЗадолженность.Видимость = Ложь;
		Элементы.КнопкиКредиторскаяЗадолженность.Видимость = Ложь;
		Элементы.КредиторскаяЗадолженностьБезРазбиения.Видимость = Ложь;
		Элементы.ГруппаПолучательДт.Видимость = Ложь;
		
		Элементы.СтраницаОтраженияОплатыЧерезКомиссионера.Видимость = Истина;
		Элементы.СтраницаОтражениеВозвратаОплатыЧерезКомиссионера.Видимость = Ложь;
		
		Элементы.ДанныеПоВходящемуДокументу.Заголовок = НСтр("ru = 'Данные по входящему платежному документу'");
		Элементы.ДанныеПоВходящемуДокументу.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера Тогда
		
		Элементы.ГруппаПодвал.Видимость = Истина;
		Элементы.ГруппаИтогоРасчеты.Видимость = Ложь;
		
		Элементы.ГруппаДебиторскаяЗадолженность.Видимость = Ложь;
		Элементы.КнопкиДебиторскаяЗадолженность.Видимость = Ложь;
		Элементы.ДебиторскаяЗадолженностьБезРазбиения.Видимость = Ложь;
		Элементы.ГруппаПолучательКт.Видимость = Ложь;
		
		Элементы.ГруппаКредиторскаяЗадолженность.Видимость = Ложь;
		Элементы.КнопкиКредиторскаяЗадолженность.Видимость = Ложь;
		Элементы.КредиторскаяЗадолженностьБезРазбиения.Видимость = Ложь;
		Элементы.ГруппаПолучательДт.Видимость = Ложь;
		
		Элементы.СтраницаОтраженияОплатыЧерезКомиссионера.Видимость = Ложь;
		Элементы.СтраницаОтражениеВозвратаОплатыЧерезКомиссионера.Видимость = Истина;
		
		Элементы.ДанныеПоВходящемуДокументу.Заголовок = НСтр("ru = 'Данные по входящему платежному документу возврата'");
		Элементы.ДанныеПоВходящемуДокументу.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаПодвал.Видимость = Истина;
		Элементы.ГруппаИтогоРасчеты.Видимость = Истина;
		
		Элементы.ДебиторскаяЗадолженностьСуммаРегл.Видимость = Истина;
		Элементы.ДебиторскаяЗадолженностьСуммаУпр.Видимость = Истина;
		
		Элементы.КредиторскаяЗадолженностьСуммаРегл.Видимость = Истина;
		Элементы.КредиторскаяЗадолженностьСуммаУпр.Видимость = Истина;
		
		Элементы.ГруппаДебиторскаяЗадолженность.Видимость = Истина;
		Элементы.КнопкиДебиторскаяЗадолженность.Видимость = Истина;
		Элементы.ДебиторскаяЗадолженностьБезРазбиения.Видимость = Истина;
		Элементы.ГруппаПолучательКт.Видимость = Ложь;
		
		Элементы.ГруппаКредиторскаяЗадолженность.Видимость = Истина;
		Элементы.КнопкиКредиторскаяЗадолженность.Видимость = Истина;
		Элементы.КредиторскаяЗадолженностьБезРазбиения.Видимость = Истина;
		Элементы.ГруппаПолучательДт.Видимость = Ложь;
		
		Элементы.СтраницаОтраженияОплатыЧерезКомиссионера.Видимость = Ложь;
		Элементы.СтраницаОтражениеВозвратаОплатыЧерезКомиссионера.Видимость = Ложь;
		Элементы.ДанныеПоВходящемуДокументу.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ЗаполнитьПоДолгамАвансамВыданным.Заголовок = ЗаголовокКнопки;
	Элементы.ЗаполнитьПоДолгамАвансамПолученным.Заголовок = ЗаголовокКнопки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбъектаРасчетовДтКт()
	Элементы.ОбъектРасчетовДебиторКредитор.Видимость = (Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		ИЛИ Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик
		ИЛИ Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		ИЛИ Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик)
		И (Объект.КонтрагентДебитор <> Объект.КонтрагентКредитор
			ИЛИ НЕ (ЗначениеЗаполнено(Объект.КонтрагентДебитор) ИЛИ ЗначениеЗаполнено(Объект.КонтрагентКредитор)));
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЗадолженность(Вид, ЗаполнитьПартнера = Истина)
	
	Если Вид = "Дт" Тогда
		ИмяТЧ                    = "ДебиторскаяЗадолженность";
		ИмяЭлементаПереключатель = "ПереключательДебиторскаяЗадолженность";
	Иначе
		ИмяТЧ                    = "КредиторскаяЗадолженность";
		ИмяЭлементаПереключатель = "ПереключательКредиторскаяЗадолженность";
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ИмяТЧ];
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	Элементы[ИмяТЧ].ТекущаяСтрока      = ТабличнаяЧасть[0].ПолучитьИдентификатор();
	ЭтаФорма[ИмяЭлементаПереключатель] = ТабличнаяЧасть.Количество() > 1;
	Если ЗаполнитьПартнера Тогда
		Если Вид = "Дт" Тогда
			ЗаполнитьПартнераДебитора();
		Иначе
			ЗаполнитьПартнераКредитора();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяСтрокаЗадолженности(Вид)

	ИмяТЧ = ?(Вид = "Дт", "ДебиторскаяЗадолженность", "КредиторскаяЗадолженность");
	СтрокаТаблицы = Элементы[ИмяТЧ].ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = Объект[ИмяТЧ][0];
	КонецЕсли;
	Возврат СтрокаТаблицы;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения()

	Если Объект.ДебиторскаяЗадолженность.Количество() Тогда
		
		ТекСтрока = Объект.ДебиторскаяЗадолженность[0];
		
		ТолькоПросмотрПартнераВалюты = НЕ РазрешенаРаботаСДочернимиПартнерами(ТекСтрока.ОбъектРасчетов);
		
		Элементы.ДебиторскаяЗадолженностьБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.ПартнерКомиссионнойПродажи.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.КомиссионерПартнерВозврата.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		
		Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаРегл.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
		Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаУпр.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаУправленческогоУчета;
		
		Элементы.СуммаРеглКлиентаИКомиссионера.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
		Элементы.СуммаУпрКлиентаИКомиссионера.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаУправленческогоУчета;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения()
	
	Если Объект.КредиторскаяЗадолженность.Количество() Тогда
		
		ТекСтрока = Объект.КредиторскаяЗадолженность[0];
		
		ТолькоПросмотрПартнераВалюты = НЕ РазрешенаРаботаСДочернимиПартнерами(ТекСтрока.ОбъектРасчетов);
		
		Элементы.КредиторскаяЗадолженностьБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.ПартнерКомиссионнойПродажиВозврат.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.КомиссионерПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		
		Элементы.КредиторскаяЗадолженностьБезРазбиенияСуммаРегл.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
		Элементы.КредиторскаяЗадолженностьБезРазбиенияСуммаУпр.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаУправленческогоУчета;
		
		Элементы.СуммаРеглКомиссионераИКлиента.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
		Элементы.СуммаУпрКомиссионераИКлиента.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаУправленческогоУчета;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьПартнер.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ОбъектРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КредиторскаяЗадолженностьПартнер.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КредиторскаяЗадолженность.ОбъектРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьСуммаРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаРегл.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ВалютаВзаиморасчетов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаРегламентированногоУчета");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КредиторскаяЗадолженностьСуммаРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КредиторскаяЗадолженностьБезРазбиенияСуммаРегл.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КредиторскаяЗадолженность.ВалютаВзаиморасчетов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаРегламентированногоУчета");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Валюта расчетов = ВалютаУпр
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьСуммаУпр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаУпр.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ВалютаВзаиморасчетов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаУправленческогоУчета");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КредиторскаяЗадолженностьСуммаУпр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаУпр.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КредиторскаяЗадолженность.ВалютаВзаиморасчетов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаУправленческогоУчета");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьФилиалов()
	
	ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	МеждуОрганизациями = ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации);
	
	Элементы.ДебиторскаяЗадолженностьОрганизация.Видимость  = ЕстьФилиалы;
	Элементы.ДебиторскаяЗадолженностьБезРазбиенияОрганизация.Видимость  = ЕстьФилиалы;
	Элементы.КредиторскаяЗадолженностьОрганизация.Видимость = ЕстьФилиалы И Не МеждуОрганизациями;
	Элементы.КредиторскаяЗадолженностьБезРазбиенияОрганизация.Видимость = ЕстьФилиалы И Не МеждуОрганизациями;
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьВыборВидаОперации()
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь()
		И НЕ Пользователи.РолиДоступны("ДобавлениеИзменениеДокументовКорректировкиЗадолженности") Тогда
		
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент);
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент);
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент);
		
		Если Элементы.ВидОперации.СписокВыбора.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
			Элементы.ВидОперации.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ВидОперации.РежимВыбораИзСписка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура АвтоТест_РассчитатьВзаимозачетЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ТолькоСуммы = ДополнительныеПараметры.Свойство("ТолькоСуммы");
	Иначе
		ТолькоСуммы = Ложь;
	КонецЕсли;
	
	ПараметрыЗадолженностиДебитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
	ПараметрыЗадолженностиКредитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	Если НЕ ТолькоСуммы Тогда
		
		Если НЕ НоваяАрхитектураВзаиморасчетов Тогда
			АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор, ПараметрыЗадолженностиКредитор);
			
			Если АналитикаКРасчету.Количество() > 0 Тогда
				ЗаполняемаяТЧ = "";
				ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьПоОстаткамДебиторскуюКредиторскуюЗадолженностьСервер(ПараметрыЗадолженностиДебитор, ПараметрыЗадолженностиКредитор);
		РассчитатьСуммыВзаимозачета(Объект.СуммаРегл);
		
		Элементы.ДебиторскаяЗадолженность.Обновить();
		Элементы.КредиторскаяЗадолженность.Обновить();
		АвтоТест_РассчитатьВзаимозачетЗавершениеНаСервере();
	Иначе
		
		Если ЗаполняемаяТЧ = "" Тогда
			ЗаполнитьСуммыУпрРегл(ПараметрыЗадолженностиДебитор, Истина);
			ЗаполнитьСуммыУпрРегл(ПараметрыЗадолженностиКредитор, Ложь);
		ИначеЕсли ЗаполняемаяТЧ = "ДебиторскаяЗадолженность" Тогда
			ЗаполнитьСуммыУпрРегл(ПараметрыЗадолженностиДебитор, Истина);
		Иначе
			ЗаполнитьСуммыУпрРегл(ПараметрыЗадолженностиКредитор, Ложь);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АвтоТест_РассчитатьВзаимозачетЗавершениеНаСервере()
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамДебиторскуюЗадолженностьСервер(ПараметрыЗадолженностиКредитор)
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(
		ПараметрыЗадолженностиКредитор.Организация.Значение,
		ПараметрыЗадолженностиКредитор.Контрагент.Значение,
		Перечисления.ТипыЗадолженности.Дебиторская,
		ПараметрыЗадолженностиКредитор.ТипРасчетов,
		Объект.Дата,
		ВалютаРегламентированногоУчета,
		Объект.ДебиторскаяЗадолженность);
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамКредиторскуюЗадолженностьСервер(ПараметрыЗадолженностиКредитор)
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(
		ПараметрыЗадолженностиКредитор.Организация.Значение,
		ПараметрыЗадолженностиКредитор.Контрагент.Значение,
		Перечисления.ТипыЗадолженности.Кредиторская,
		ПараметрыЗадолженностиКредитор.ТипРасчетов,
		Объект.Дата,
		ВалютаРегламентированногоУчета,
		Объект.КредиторскаяЗадолженность);
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамДебиторскуюКредиторскуюЗадолженностьСервер(ПараметрыЗадолженностиДебитор, ПараметрыЗадолженностиКредитор)
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(
		ПараметрыЗадолженностиДебитор.Организация.Значение,
		ПараметрыЗадолженностиДебитор.Контрагент.Значение,
		Перечисления.ТипыЗадолженности.Дебиторская,
		ПараметрыЗадолженностиДебитор.ТипРасчетов,
		Объект.Дата,
		ВалютаРегламентированногоУчета,
		Объект.ДебиторскаяЗадолженность);
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(
		ПараметрыЗадолженностиКредитор.Организация.Значение,
		ПараметрыЗадолженностиКредитор.Контрагент.Значение,
		Перечисления.ТипыЗадолженности.Кредиторская,
		ПараметрыЗадолженностиКредитор.ТипРасчетов,
		Объект.Дата,
		ВалютаРегламентированногоУчета,
		Объект.КредиторскаяЗадолженность);
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамДебиторскуюЗадолженностьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище(Объект.ДебиторскаяЗадолженность);
	
	ПараметрыЗадолженности  = СтруктураПараметровЗадолженности(ЭтаФорма);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектСсылка",                          Объект.Ссылка);
	ПараметрыОткрытия.Вставить("АдресПлатежейВХранилище",               АдресПлатежейВХранилище);
	ПараметрыОткрытия.Вставить("Организация",                           ПараметрыЗадолженности.Организация.Значение);
	ПараметрыОткрытия.Вставить("УчитыватьФилиалы",                      Истина);
	ПараметрыОткрытия.Вставить("Контрагент",                            ПараметрыЗадолженности.Контрагент.Значение);
	ПараметрыОткрытия.Вставить("Валюта",                                ВалютаРегламентированногоУчета);
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный")
		И Объект.КредиторскаяЗадолженность.Количество() > 0 Тогда
		ПараметрыОткрытия.Вставить("ВалютаДокумента", Объект.КредиторскаяЗадолженность[0].ВалютаВзаиморасчетов);
	КонецЕсли; 
	ПараметрыОткрытия.Вставить("СуммаДокумента",                        0);
	ПараметрыОткрытия.Вставить("ДатаДокумента",                         Объект.Дата);
	ПараметрыОткрытия.Вставить("ТипРасчетов",                           ПараметрыЗадолженности.ТипРасчетов);
	ПараметрыОткрытия.Вставить("ИдентификаторПлатежа",                  "");
	ПараметрыОткрытия.Вставить("ПартнерПрочиеОтношения",                Ложь);
	ПараметрыОткрытия.Вставить("ПодборДебиторскойЗадолженности",        Истина);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер") Тогда
		ПараметрыОткрытия.Вставить("ПодборТолькоБезусловнойЗадолженности",  Ложь);
	Иначе
		ПараметрыОткрытия.Вставить("ПодборТолькоБезусловнойЗадолженности",  Истина);
		ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		ПараметрыОткрытия.Вставить("ОднаВалютаВзаиморасчетов", Истина);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ДополнительныеОтборы",                  Новый Соответствие());
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Неопределено);
	
	ОткрытьФорму(
		"Справочник.ОбъектыРасчетов.Форма.ПодборОбъектовРасчетов",
		ПараметрыОткрытия, 
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамКредиторскуюЗадолженностьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище(Объект.КредиторскаяЗадолженность);
	
	ПараметрыЗадолженности  = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектСсылка",                          Объект.Ссылка);
	ПараметрыОткрытия.Вставить("АдресПлатежейВХранилище",               АдресПлатежейВХранилище);
	ПараметрыОткрытия.Вставить("Организация",                           ПараметрыЗадолженности.Организация.Значение);
	ПараметрыОткрытия.Вставить("УчитыватьФилиалы",                      Истина);
	ПараметрыОткрытия.Вставить("Контрагент",                            ПараметрыЗадолженности.Контрагент.Значение);
	ПараметрыОткрытия.Вставить("Валюта",                                ВалютаРегламентированногоУчета);
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный")
		И Объект.ДебиторскаяЗадолженность.Количество() > 0 Тогда
		ПараметрыОткрытия.Вставить("ВалютаДокумента", Объект.ДебиторскаяЗадолженность[0].ВалютаВзаиморасчетов);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("СуммаДокумента",                        0);
	ПараметрыОткрытия.Вставить("ДатаДокумента",                         Объект.Дата);
	ПараметрыОткрытия.Вставить("ТипРасчетов",                           ПараметрыЗадолженности.ТипРасчетов);
	ПараметрыОткрытия.Вставить("ИдентификаторПлатежа",                  "");
	ПараметрыОткрытия.Вставить("ПартнерПрочиеОтношения",                Ложь);
	ПараметрыОткрытия.Вставить("ПодборДебиторскойЗадолженности",        Ложь);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер") Тогда
		ПараметрыОткрытия.Вставить("ПодборТолькоБезусловнойЗадолженности",  Ложь);

	Иначе
		ПараметрыОткрытия.Вставить("ПодборТолькоБезусловнойЗадолженности",  Истина);
		ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		ПараметрыОткрытия.Вставить("ОднаВалютаВзаиморасчетов", Истина);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ДополнительныеОтборы",                  Новый Соответствие());
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Неопределено);
	
	ОткрытьФорму(
		"Справочник.ОбъектыРасчетов.Форма.ПодборОбъектовРасчетов",
		ПараметрыОткрытия, 
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнераВТабличнойЧасти(ОбъектТабличнаяЧасть, ПартнерСсылка, РасчетыМеждуОрганизациями)
	
	Если НЕ ЗначениеЗаполнено(ПартнерСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ОбъектТабличнаяЧасть Цикл
		Если РасчетыМеждуОрганизациями Тогда
			СтрокаТаблицы.Партнер = Неопределено;
		ИначеЕсли СтрокаТаблицы.Партнер <> ПартнерСсылка Тогда
			СтрокаТаблицы.Партнер = ПартнерСсылка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнераДебитора()

	Если НЕ РасчетыМеждуОрганизациямиДебитор Тогда
		Если ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
			ПартнерДебитор = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.КонтрагентДебитор);
		Иначе
			ПартнерДебитор = Справочники.Партнеры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями Тогда
		
		Если Не (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера) Тогда
			ЗаполнитьПартнераВТабличнойЧасти(Объект.ДебиторскаяЗадолженность, ПартнерДебитор, РасчетыМеждуОрганизациямиДебитор);
			ЗаполнитьПартнераВТабличнойЧасти(Объект.КредиторскаяЗадолженность, ПартнерДебитор, РасчетыМеждуОрганизациямиКредитор);
		КонецЕсли;
		
	Иначе
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера Тогда
			ЗаполнитьДанныеКонечногоКлиента(Истина, ПартнерДебитор);
		Иначе 
			ЗаполнитьПартнераВТабличнойЧасти(Объект.ДебиторскаяЗадолженность, ПартнерДебитор, РасчетыМеждуОрганизациямиДебитор);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКонечногоКлиента(ПерезаполнятьДанныеДокумента = Ложь, ПартнерСсылка = Неопределено)
	
	ЭтоОплатаЧерезКомиссионера = ?(Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера, Истина, Ложь);
	ЭтоВозвратОплатыЧерезКомиссионера = ?(Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера, Истина, Ложь);
	
	Если (ЭтоОплатаЧерезКомиссионера Или ЭтоВозвратОплатыЧерезКомиссионера)
		И Объект.КредиторскаяЗадолженность.Количество() = 1 И Объект.ДебиторскаяЗадолженность.Количество() = 1 Тогда
		
		Если ЭтоОплатаЧерезКомиссионера Тогда
			ТекущаяСтрокаКлиент = Объект.ДебиторскаяЗадолженность[0];
			ТекущаяСтрокаКомиссионер = Объект.КредиторскаяЗадолженность[0];
			ИмяРеквизитаКонтрагентаКлиента = "КонтрагентДебитор";
			ИмяРеквизитаКонтрагентаКомиссионера = "КонтрагентКредитор";
		Иначе
			ТекущаяСтрокаКомиссионер = Объект.ДебиторскаяЗадолженность[0];
			ТекущаяСтрокаКлиент = Объект.КредиторскаяЗадолженность[0];
			ИмяРеквизитаКонтрагентаКлиента = "КонтрагентКредитор";
			ИмяРеквизитаКонтрагентаКомиссионера = "КонтрагентДебитор";
		КонецЕсли;
		
		Если Не ПартнерСсылка = Неопределено И ТекущаяСтрокаКомиссионер.Партнер <> ПартнерСсылка Тогда
			ТекущаяСтрокаКомиссионер.Партнер = ПартнерСсылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрокаКомиссионер.ОбъектРасчетов) Тогда
			ДанныеДоговораКомиссионера = ПолучитьДанныеПоДоговоруИзОбъектаРасчетов(ТекущаяСтрокаКомиссионер.ОбъектРасчетов);
			ДоговорКомиссионера = ДанныеДоговораКомиссионера.Договор;
		Иначе
			ДанныеДоговораКомиссионера = Неопределено;
			ДоговорКомиссионера = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрокаКлиент.ОбъектРасчетов) Тогда
			ДанныеДоговораКлиента = ПолучитьДанныеПоДоговоруИзОбъектаРасчетов(ТекущаяСтрокаКлиент.ОбъектРасчетов);
			ДоговорКлиента = ДанныеДоговораКлиента.Договор;
		Иначе
			ДанныеДоговораКлиента = Неопределено;
			ДоговорКлиента = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКлиента) Тогда
			ПартнерКомиссионнойПродажи = ДоговорКлиента.Партнер;
			КлиентКомиссионнойПродажи = ДоговорКлиента.Контрагент;
		КонецЕсли;
		
		Если ПерезаполнятьДанныеДокумента
			И ЗначениеЗаполнено(ДанныеДоговораКомиссионера) Тогда
			
			Если ТекущаяСтрокаКомиссионер.Партнер <> ДоговорКомиссионера.Партнер
				Или Объект[ИмяРеквизитаКонтрагентаКомиссионера] <> ДоговорКомиссионера.Контрагент Тогда
				
				ТекущаяСтрокаКомиссионер.ОбъектРасчетов = Неопределено;
				
				Если ЭтоОплатаЧерезКомиссионера Тогда
					УстановитьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
				Иначе
					УстановитьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДанныеДоговораКомиссионера.ВестиРасчетыЧерезКонечныхПокупателей Тогда
				НовыйПартнерКомиссионнойПродажи = ПартнерКомиссионнойПродажи;
				НовыйКлиентКомиссионнойПродажи = КлиентКомиссионнойПродажи;
			Иначе
				НовыйПартнерКомиссионнойПродажи = ТекущаяСтрокаКомиссионер.Партнер;
				НовыйКлиентКомиссионнойПродажи = Объект[ИмяРеквизитаКонтрагентаКомиссионера];
			КонецЕсли;
			
			Если ТекущаяСтрокаКлиент.Партнер <> НовыйПартнерКомиссионнойПродажи
				Или Объект[ИмяРеквизитаКонтрагентаКлиента] <> НовыйКлиентКомиссионнойПродажи Тогда
				
				ТекущаяСтрокаКлиент.Партнер = НовыйПартнерКомиссионнойПродажи;
				Объект[ИмяРеквизитаКонтрагентаКлиента] = НовыйКлиентКомиссионнойПродажи;
				ТекущаяСтрокаКлиент.ОбъектРасчетов = Неопределено;
				
				Если ЭтоОплатаЧерезКомиссионера Тогда
					УстановитьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
				Иначе
					УстановитьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
				КонецЕсли;
				
			КонецЕсли
			
		КонецЕсли;
		
		Если ПерезаполнятьДанныеДокумента
			И ЗначениеЗаполнено(ДоговорКлиента) Тогда
			
			Если ЗначениеЗаполнено(ДоговорКомиссионера)
				И ДоговорКлиента.ДоговорСКомиссионером <> ДоговорКомиссионера Тогда
			
				ТекущаяСтрокаКлиент.ОбъектРасчетов = Неопределено;
				Если ЭтоОплатаЧерезКомиссионера Тогда
					УстановитьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
				Иначе
					УстановитьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
				КонецЕсли;
				
			ИначеЕсли ДоговорКлиента.Контрагент <> КлиентКомиссионнойПродажи
				Или ДоговорКлиента.Партнер <> ПартнерКомиссионнойПродажи Тогда
				
				ТекущаяСтрокаКлиент.ОбъектРасчетов = Неопределено;
				Если ЭтоОплатаЧерезКомиссионера Тогда
					УстановитьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
				Иначе
					УстановитьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнераКредитора(ОчиститьТЧ = Ложь)
	
	Если Не РасчетыМеждуОрганизациямиКредитор Тогда
		Если ЗначениеЗаполнено(Объект.КонтрагентКредитор) Тогда
			ПартнерКредитор = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.КонтрагентКредитор);
		Иначе
			ПартнерКредитор = Справочники.Партнеры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера Тогда
			ЗаполнитьДанныеКонечногоКлиента(Истина, ПартнерКредитор);
	Иначе
		ЗаполнитьПартнераВТабличнойЧасти(Объект.КредиторскаяЗадолженность, ПартнерКредитор, РасчетыМеждуОрганизациямиКредитор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ДебиторскаяЗадолженностьВалютаВзаиморасчетовПриИзменении()
	УстановитьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
	ОчиститьСуммы("ДебиторскаяЗадолженность", Истина);
КонецПроцедуры

&НаСервере
Процедура КредиторскаяЗадолженностьВалютаВзаиморасчетовПриИзмененииНаСервере()
	УстановитьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
	ОчиститьСуммы("КредиторскаяЗадолженность", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовРасчетовПриИзменении(ИмяТаблицы)
	Если Объект[ИмяТаблицы].Количество() = 1 
			И НЕ ЗначениеЗаполнено(Объект[ИмяТаблицы][0].ОбъектРасчетов) Тогда
			Объект[ИмяТаблицы][0].ВалютаВзаиморасчетов = Неопределено;
			Объект[ИмяТаблицы][0].Организация = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовНачалоВыбора(Вид, Элемент, ДанныеВыбора, Зеркальный = Неопределено)
	
	ЭтоДебет = Вид = "Дт";
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, НЕ ЭтоДебет);
	
	ТипКлиента = ?(ЭтоДебет, РасчетыСКлиентамиДебитор, РасчетыСКлиентамиКредитор);
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ТипРасчетов", ?(ТипКлиента,
											ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"),
											ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")));
	Если НЕ ЗначениеЗаполнено(Зеркальный) Тогда
		ЗначенияОтбора.Вставить("Организация", ПараметрыЗадолженности.Организация.Значение);
		ЗначенияОтбора.Вставить("Контрагент",  ПараметрыЗадолженности.Контрагент.Значение);
	Иначе
		ЗначенияОтбора.Вставить("Организация", ПараметрыЗадолженности.Контрагент.Значение);
		ЗначенияОтбора.Вставить("Контрагент",  ПараметрыЗадолженности.Организация.Значение);
	КонецЕсли;
	ЗначенияОтбора.Вставить("ПлатежиПо275ФЗ" , Ложь);
	
	ОбъектРасчетов = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
	Если ТипЗнч(ЗначенияОтбора.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ЗначенияОтбора.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
	ИначеЕсли ЭтоДебет Тогда
		Если Элементы.ДебиторскаяЗадолженность.ТекущиеДанные <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Зеркальный) Тогда
				ОбъектРасчетов = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные.ОбъектРасчетов;
			Иначе
				ОбъектРасчетов = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные.ОбъектРасчетовЗеркальный;
			КонецЕсли;
		ИначеЕсли Объект.ДебиторскаяЗадолженность.Количество() > 0 Тогда
			Если НЕ ЗначениеЗаполнено(Зеркальный) Тогда
				ОбъектРасчетов = Объект.ДебиторскаяЗадолженность[0].ОбъектРасчетов;
			Иначе
				ОбъектРасчетов = Объект.ДебиторскаяЗадолженность[0].ОбъектРасчетовЗеркальный;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Элементы.КредиторскаяЗадолженность.ТекущиеДанные <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Зеркальный) Тогда
				ОбъектРасчетов = Элементы.КредиторскаяЗадолженность.ТекущиеДанные.ОбъектРасчетов;
			Иначе
				ОбъектРасчетов = Элементы.КредиторскаяЗадолженность.ТекущиеДанные.ОбъектРасчетовЗеркальный;
			КонецЕсли;
		ИначеЕсли Объект.КредиторскаяЗадолженность.Количество() > 0 Тогда
			Если НЕ ЗначениеЗаполнено(Зеркальный) Тогда
				ОбъектРасчетов = Объект.КредиторскаяЗадолженность[0].ОбъектРасчетов;
			Иначе
				ОбъектРасчетов = Объект.КредиторскаяЗадолженность[0].ОбъектРасчетовЗеркальный;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиВыбора = Новый Структура;
	НастройкиВыбора.Вставить("Сумма", 0);
	НастройкиВыбора.Вставить("ПодборДебиторскойЗадолженности", ЭтоДебет);
	НастройкиВыбора.Вставить("ТекущаяСтрока", ОбъектРасчетов);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера") Тогда
		НастройкиВыбора.Вставить("ВыбратьОбъектыРасчетовПоКомиссии", Новый Структура("ВыбратьОбъектыРасчетовСКонечнымКлиентом", Ложь));
	КонецЕсли;

	ОткрытьФормуВыбораОбъектовРасчетов(Элемент, ЗначенияОтбора, НастройкиВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовОбработкаВыбора(Вид, ВыбранноеЗначение)
		
	ТекущиеДанные = ТекущаяСтрокаЗадолженности(Вид);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера") Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение, "ОбъектРасчетов, ВалютаВзаиморасчетов");
			ЗаполнитьДанныеКонечногоКлиента(Истина);
		Иначе
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
		КонецЕсли;
		Модифицированность = Истина;
		ТекущиеДанные.СуммаРегл = 0;
		ТекущиеДанные.СуммаУпр = 0;
		Если Вид = "Дт" Тогда
			УстановитьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
		Иначе
			УстановитьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
		КонецЕсли;
		УстановитьВалютуВзаиморасчетов(ВыбранноеЗначение.ВалютаВзаиморасчетов);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	ЗаполнитьСписокОрганизаций();
	
	УстановитьВидимостьФилиалов();
	
	ФормированиеФискальныхЧековСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект);
	
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКредиторПриИзменении(Элемент)
	
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("ОрганизацияКредиторПриИзмененииНужноОчищатьТЧЗавершение", ЭтотОбъект),
		ЕстьСтроки("КредиторскаяЗадолженность"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКредиторПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	Если ОчиститьТЧ = КодВозвратаДиалога.Да Тогда
		ОрганизацияКредиторПриИзмененииНаСервере();
		ПредыдущиеЗначения.ОрганизацияКредитор = Объект.ОрганизацияКредитор;
	Иначе
		Объект.ОрганизацияКредитор = ПредыдущиеЗначения.ОрганизацияКредитор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияКредиторПриИзмененииНаСервере()
	
	Объект.ОбъектРасчетовИнтеркампани = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
	Объект.ОбъектРасчетовИнтеркампаниЗеркальный = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
	ФормированиеФискальныхЧековСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект);
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ОчиститьСуммыДокумента(ЭтаФорма);
	
	ИнициализироватьЗадолженность("Дт");
	ИнициализироватьЗадолженность("Кт");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный Тогда
		ВалютаВзаиморасчетов = Неопределено;
	Иначе
		
		Если ВыбранВидОперацииСКлиентом() Тогда
			ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
			ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
		ИначеЕсли ВыбранВидОперацииСПоставщиком() Тогда
			ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
			ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
		Иначе //Бартер
			ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
			ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
		КонецЕсли;
		
		Если Объект.ТипДебитора <> ТипДебитора Тогда
			Объект.ТипДебитора = ТипДебитора;
			УстановитьТипДебитора();
		КонецЕсли;
		
		Если Объект.ТипКредитора <> ТипКредитора Тогда
			Объект.ТипКредитора = ТипКредитора;
			УстановитьТипКредитора();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КонтрагентКредитор) И НЕ ВыбранВидОперацииМеждуКонтрагентами(Объект.ВидОперации) Тогда
		Объект.КонтрагентКредитор = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияКредитор) И НЕ ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) Тогда
		Объект.ОрганизацияКредитор = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) Тогда
		Объект.ОбъектРасчетовИнтеркампани = Справочники.ОбъектыРасчетов.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		И НЕ Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик Тогда
		Объект.ОбъектРасчетовДебиторКредитор = Справочники.ОбъектыРасчетов.ПустаяСсылка();
	КонецЕсли;
	
	ФормированиеФискальныхЧековСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект);
	
	ЗаполнитьСписокОрганизаций();
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ТипДебитораПриИзмененииНаСервере()
	
	УстановитьВидимостьОбъектаРасчетовДтКт();
	УстановитьТипДебитора();
	ЗаполнитьПартнераДебитора();
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ТипКредитораПриИзмененииНаСервере()
	
	УстановитьВидимостьОбъектаРасчетовДтКт();
	УстановитьТипКредитора();
	ЗаполнитьПартнераКредитора();
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентДебиторПриИзмененииНаСервере()
	
	ФормированиеФискальныхЧековСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект);
	УстановитьВидимостьОбъектаРасчетовДтКт();
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентКредиторПриИзмененииНаСервере()
	
	ФормированиеФискальныхЧековСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект);
	УстановитьВидимостьОбъектаРасчетовДтКт();
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ДебиторскаяЗадолженностьБезРазбиенияОбъектРасчетовПриИзмененииНаСервере()
	УстановитьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаСервере
Процедура ПолучательДтБезРазбиенияОбъектРасчетовОбработкаВыбораНаСервере()
	
	ЗаполнитьПолучателяПоАвансамДолгам("Дт");
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура КредиторскаяЗадолженностьБезРазбиенияОбъектРасчетовПриИзмененииНаСервере()
	УстановитьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
	ЗаблокироватьОбъектыРасчетов();
КонецПроцедуры

&НаСервере
Процедура ПолучательКтБезРазбиенияОбъектРасчетовОбработкаВыбораНаСервере()
	
	ЗаполнитьПолучателяПоАвансамДолгам("Кт");
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами
// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Возврат; // не пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ФискальнаяОперация 

&НаКлиенте
Процедура ФискальнаяОперацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "КонтрагентПоставщикПробитьЧек" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяКомандыПробитияЧека = "КонтрагентПоставщик";
		ИмяКомандыПробитияЧекаПриИзмененииНаСервере();
		
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств");
		
		ФормированиеФискальныхЧековКлиент.ОтобразитьЧек(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ФискальнаяОперацияЗавершение", ЭтотОбъект));
		
	ИначеЕсли НавигационнаяСсылка = "КонтрагентПоставщикОткрытьЗаписьФискальнойОперации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств");
		ПодключаемоеОборудованиеУТКлиент.ОткрытьЗаписьФискальнойОперации(ЭтотОбъект, Объект.Ссылка, , ТипРасчета);
	
	ИначеЕсли НавигационнаяСсылка = "КонтрагентДебиторПробитьЧек" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяКомандыПробитияЧека = "КонтрагентДебитор";
		ИмяКомандыПробитияЧекаПриИзмененииНаСервере();
		
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
		
		ФормированиеФискальныхЧековКлиент.ОтобразитьЧек(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ФискальнаяОперацияЗавершение", ЭтотОбъект));
		
	ИначеЕсли НавигационнаяСсылка = "КонтрагентДебиторОткрытьЗаписьФискальнойОперации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
		ПодключаемоеОборудованиеУТКлиент.ОткрытьЗаписьФискальнойОперации(ЭтотОбъект, Объект.Ссылка, , ТипРасчета);
		
	ИначеЕсли НавигационнаяСсылка = "КонтрагентКредиторПробитьЧек" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяКомандыПробитияЧека = "КонтрагентКредитор";
		ИмяКомандыПробитияЧекаПриИзмененииНаСервере();
		
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
		
		ФормированиеФискальныхЧековКлиент.ОтобразитьЧек(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ФискальнаяОперацияЗавершение", ЭтотОбъект));
		
	ИначеЕсли НавигационнаяСсылка = "КонтрагентКредиторОткрытьЗаписьФискальнойОперации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
		ПодключаемоеОборудованиеУТКлиент.ОткрытьЗаписьФискальнойОперации(ЭтотОбъект, Объект.Ссылка, , ТипРасчета);
		
	ИначеЕсли НавигационнаяСсылка = "ОрганизацияПробитьЧек" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяКомандыПробитияЧека = "ОрганизацияДебитор";
		ИмяКомандыПробитияЧекаПриИзмененииНаСервере();
		
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
		
		ФормированиеФискальныхЧековКлиент.ОтобразитьЧек(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ФискальнаяОперацияЗавершение", ЭтотОбъект));
		
	ИначеЕсли НавигационнаяСсылка = "ОрганизацияОткрытьЗаписьФискальнойОперации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
		ПодключаемоеОборудованиеУТКлиент.ОткрытьЗаписьФискальнойОперации(ЭтотОбъект, Объект.Ссылка, , ТипРасчета);
		
	ИначеЕсли НавигационнаяСсылка = "ОрганизацияКредиторПробитьЧек" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяКомандыПробитияЧека = "ОрганизацияКредитор";
		ИмяКомандыПробитияЧекаПриИзмененииНаСервере();
		
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
		
		ФормированиеФискальныхЧековКлиент.ОтобразитьЧек(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ФискальнаяОперацияЗавершение", ЭтотОбъект));
		
	ИначеЕсли НавигационнаяСсылка = "ОрганизацияКредиторОткрытьЗаписьФискальнойОперации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
		ПодключаемоеОборудованиеУТКлиент.ОткрытьЗаписьФискальнойОперации(ЭтотОбъект, Объект.Ссылка, , ТипРасчета);
		
	ИначеЕсли НавигационнаяСсылка = "НастроитьОборудование" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Обработка.ПредпросмотрЧека.Форма.ОшибкаПодключенияККТ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИмяКомандыПробитияЧекаПриИзмененииНаСервере()
	
	ФормированиеФискальныхЧековСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФискальнаяОперацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФискальнаяОперацияЗавершениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ФискальнаяОперацияЗавершениеНаСервере()
	
	ФормированиеФискальныхЧековСервер.ОбновитьГиперссылкуПробитияФискальногоЧека(Объект.Ссылка, ЭтотОбъект, ТекстДокументыНаОснованииПодвал);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();
	ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
	
	ЗаполнитьСписокОрганизаций();
	УстановитьТипДебитора();
	УстановитьТипКредитора();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ИнициализироватьЗадолженность("Дт", Ложь);
	ИнициализироватьЗадолженность("Кт", Ложь);
	ЗаполнитьДанныеКонечногоКлиента();
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
	ОграничитьВыборВидаОперации();
	
	Элементы.ЗаполнитьПоКредиторскойЗадолженности.Доступность = НЕ ТолькоПросмотр;
	Элементы.ЗаполнитьПоДебиторскойЗадолженности.Доступность = НЕ ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище(Знач РасшифровкаПлатежа)
	
	ТЗ = РасшифровкаПлатежа.Выгрузить();
	ТЗ.Колонки.Удалить("Сумма");
	ТЗ.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
	
	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(
		ТЗ,
		УникальныйИдентификатор);
	
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьДебиторскуюЗадолженностиИзХранилища(АдресПлатежейВХранилище)

	ДебиторскаяЗадолженность = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище); // ТаблицаЗначений
	ДебиторскаяЗадолженность.Свернуть("ТипРасчетов, Партнер, ОбъектРасчетов, ВалютаВзаиморасчетов, Организация","Сумма, НашДолг, ДолгПартнера");
	ДебиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	
	Для Каждого СтрокаЗадолженности Из ДебиторскаяЗадолженность Цикл
		СтрокаЗадолженности.СуммаВзаиморасчетов = СтрокаЗадолженности.Сумма;
	КонецЦикла;
	Объект.ДебиторскаяЗадолженность.Загрузить(ДебиторскаяЗадолженность);
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКредиторскуюЗадолженностиИзХранилища(АдресПлатежейВХранилище)

	КредиторскаяЗадолженность = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище); // ТаблицаЗначений
	КредиторскаяЗадолженность.Свернуть("ТипРасчетов, Партнер, ОбъектРасчетов, ВалютаВзаиморасчетов, Организация","Сумма, НашДолг, ДолгПартнера");
	КредиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	
	Для Каждого СтрокаЗадолженности Из КредиторскаяЗадолженность Цикл
		СтрокаЗадолженности.СуммаВзаиморасчетов = СтрокаЗадолженности.Сумма;
	КонецЦикла;
	Объект.КредиторскаяЗадолженность.Загрузить(КредиторскаяЗадолженность);
	ЗаблокироватьОбъектыРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипДебитора()
	
	РасчетыМеждуОрганизациямиДебитор =
		Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		Или Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик;
	
	РасчетыСКлиентамиДебитор =
		Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент
		Или Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент;
		
	ОграничениеТипа = ?(РасчетыМеждуОрганизациямиДебитор, ТипСсылкаОрганизации, ТипСсылкаКонтрагенты);
	
	Если Элементы.КонтрагентДебитор.ОграничениеТипа <> ОграничениеТипа Тогда
		Элементы.КонтрагентДебитор.ОграничениеТипа = ОграничениеТипа;
		Элементы.КлиентКомиссионнойПродажи.ОграничениеТипа = ОграничениеТипа;
	КонецЕсли;
	
	Элементы.ДебиторскаяЗадолженностьПартнер.Видимость = Не РасчетыМеждуОрганизациямиДебитор;
	Элементы.ДебиторскаяЗадолженностьБезРазбиенияПартнер.Видимость = Не РасчетыМеждуОрганизациямиДебитор;
	
	Элементы.КонтрагентДебитор.РежимВыбораИзСписка = РасчетыМеждуОрганизациямиДебитор;
	Если РасчетыМеждуОрганизациямиДебитор Тогда
		МассивОрганизация = ОрганизацииДляВыбора.ВыгрузитьЗначения();
		Элементы.КонтрагентДебитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизация);
	Иначе
		Элементы.КонтрагентДебитор.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипКредитора()
	
	РасчетыМеждуОрганизациямиКредитор =
		Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		Или Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик;
		
	РасчетыСКлиентамиКредитор =
		Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент
		Или Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент;
		
	ОграничениеТипа = ?(РасчетыМеждуОрганизациямиКредитор, ТипСсылкаОрганизации, ТипСсылкаКонтрагенты);
	
	Если Элементы.КонтрагентКредитор.ОграничениеТипа <> ОграничениеТипа Тогда
		Элементы.КонтрагентКредитор.ОграничениеТипа = ОграничениеТипа;
		Элементы.Комиссионер.ОграничениеТипа = ОграничениеТипа;
		Элементы.КлиентКомиссионнойПродажиВозврат.ОграничениеТипа = ОграничениеТипа;
		Элементы.КомиссионерВозврата.ОграничениеТипа = ОграничениеТипа;
	КонецЕсли;
	
	Элементы.КредиторскаяЗадолженностьПартнер.Видимость = Не РасчетыМеждуОрганизациямиКредитор;
	Элементы.КредиторскаяЗадолженностьБезРазбиенияПартнер.Видимость = Не РасчетыМеждуОрганизациямиКредитор;
	
	Элементы.КонтрагентКредитор.РежимВыбораИзСписка = РасчетыМеждуОрганизациямиКредитор;
	Если РасчетыМеждуОрганизациямиКредитор Тогда
		МассивОрганизация = ОрганизацииДляВыбора.ВыгрузитьЗначения();
		Элементы.КонтрагентКредитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизация);
	Иначе
		Элементы.КонтрагентКредитор.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыВзаимозачетаСервер(ЗНАЧ СуммаВзаимозачета)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ИсходнаяТаблицаДокумента КАК ИсходнаяТаблицаДокумента
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*,
	|	ТаблицаДокумента.ОбъектРасчетов.Дата КАК Дата,
	|	ТаблицаДокумента.ОбъектРасчетов.Номер КАК Номер
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|");
	
	МассивТабличныйЧастей = Новый Массив;
	МассивТабличныйЧастей.Добавить("ДебиторскаяЗадолженность");
	МассивТабличныйЧастей.Добавить("КредиторскаяЗадолженность");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
		
		СуммаДокумента = СуммаВзаимозачета;
		
		ТаблицаДокумента = Объект[ТабличнаяЧасть].Выгрузить(,);
		Запрос.УстановитьПараметр("ИсходнаяТаблицаДокумента", ТаблицаДокумента);
		
		Объект[ТабличнаяЧасть].Очистить();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СуммаРегл = Мин(Выборка.СуммаРегл, СуммаДокумента);
			Если СуммаРегл > 0 Тогда
			
				СтрокаТаблицы = Объект[ТабличнаяЧасть].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				
				Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
					СтрокаТаблицы.СуммаУпр = СуммаРегл;
				ИначеЕсли СуммаРегл = СуммаДокумента И НЕ СтрокаТаблицы.СуммаРегл = 0 И НЕ СтрокаТаблицы.СуммаУпр = 0 Тогда
					СтрокаТаблицы.СуммаУпр = СуммаРегл / (СтрокаТаблицы.СуммаРегл / СтрокаТаблицы.СуммаУпр);
				КонецЕсли;
				
				Если СуммаРегл = СуммаДокумента Тогда
					
					ВзаиморасчетыСервер.СписатьСуммуПропорционально(
						СтрокаТаблицы.СуммаВзаиморасчетов,
						СтрокаТаблицы.СуммаРегл - СуммаРегл,
						СтрокаТаблицы.СуммаРегл);
						
				КонецЕсли;
				
				СтрокаТаблицы.СуммаРегл = СуммаРегл;
				СуммаДокумента = СуммаДокумента - СтрокаТаблицы.СуммаРегл;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	СуммаВзаимозачетаУпрДт = Объект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
	СуммаВзаимозачетаУпрКт = Объект.КредиторскаяЗадолженность.Итог("СуммаУпр");
	СуммаВзаимозачетаУпр = Мин(СуммаВзаимозачетаУпрДт,СуммаВзаимозачетаУпрКт);
	Если СуммаВзаимозачетаУпрДт <> СуммаВзаимозачетаУпрКт Тогда
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
			
			СуммаДокумента = СуммаВзаимозачетаУпр;
			
			ТаблицаДокумента = Объект[ТабличнаяЧасть].Выгрузить(,);
			Запрос.УстановитьПараметр("ИсходнаяТаблицаДокумента", ТаблицаДокумента);
			
			Объект[ТабличнаяЧасть].Очистить();
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СуммаУпр = Мин(Выборка.СуммаУпр, СуммаДокумента);
				Если СуммаУпр > 0 Тогда
				
					СтрокаТаблицы = Объект[ТабличнаяЧасть].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
					
					Если СтрокаТаблицы.ВалютаВзаиморасчетов <> ВалютаУправленческогоУчета Тогда
						СтрокаТаблицы.СуммаУпр = СуммаУпр;
					Иначе
						СтрокаТаблицы.СуммаУпр = СтрокаТаблицы.СуммаВзаиморасчетов;
					КонецЕсли;
					СуммаДокумента = СуммаДокумента - СтрокаТаблицы.СуммаУпр;
				Иначе
					СтрокаТаблицы = Объект[ТабличнаяЧасть].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
					
					СтрокаТаблицы.СуммаУпр = 0;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Объект.СуммаРегл = СуммаВзаимозачета;
	Объект.СуммаУпр  = СуммаВзаимозачетаУпр;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВзаимозачета(Знач СуммаДокументаРегл = 0)
	
	Дебиторская  = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
	Кредиторская = Объект.КредиторскаяЗадолженность.Итог("СуммаРегл");
	Если СуммаДокументаРегл <> 0 Тогда
		СуммаВзаимозачета = Мин(Дебиторская, Кредиторская, СуммаДокументаРегл);
	Иначе
		СуммаВзаимозачета = Мин(Дебиторская, Кредиторская);
	КонецЕсли;
	
	Если СуммаВзаимозачета = 0 Тогда
		Объект.ДебиторскаяЗадолженность.Очистить();
		Объект.КредиторскаяЗадолженность.Очистить();
		ИнициализироватьЗадолженность("Дт");
		ИнициализироватьЗадолженность("Кт");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("СуммаВзаимозачета", СуммаВзаимозачета);
	Оповещение = Новый ОписаниеОповещения("РассчитатьСуммыВзаимозачетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СуммаВзаимозачета < СуммаДокументаРегл Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Взаимозачет возможен на сумму %1 %2, скорректировать сумму?'"),
			СуммаВзаимозачета,
			ВалютаРегламентированногоУчета);
		КодОтвета = Неопределено;
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВзаимозачетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитатьСуммыВзаимозачетаФрагмент(ДополнительныеПараметры.СуммаВзаимозачета);
	Иначе
		ИнициализироватьЗадолженность("Дт");
		ИнициализироватьЗадолженность("Кт");
		УстановитьСвойстваЭлементовФормыПоВидуОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВзаимозачетаФрагмент(Знач СуммаВзаимозачета)
	
	РассчитатьСуммыВзаимозачетаСервер(СуммаВзаимозачета);
	
	ИнициализироватьЗадолженность("Дт");
	ИнициализироватьЗадолженность("Кт");
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Рассчитан взаимозачет на сумму %1'"), 
		СуммаВзаимозачета);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Рассчитан взаимозачет'"),, Текст, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораОбъектовРасчетов(Элемент, ЗначенияОтбора, ЕщеНастройкиВыбора = Неопределено)
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Сумма = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
		
	НастройкиВыбора = Новый Структура;
	НастройкиВыбора.Вставить("ВыборОснованияПлатежа", Ложь);
	НастройкиВыбора.Вставить("РедактируемыйДокумент", Объект.Ссылка);
	НастройкиВыбора.Вставить("Валюта", ВалютаРегламентированногоУчета);
	НастройкиВыбора.Вставить("Сумма", Сумма);
	НастройкиВыбора.Вставить("УчитыватьФилиалы", Истина);
	НастройкиВыбора.Вставить("Отбор", ЗначенияОтбора);
	НастройкиВыбора.Вставить("ВернутьСтруктуру", Истина);
	Если ЕщеНастройкиВыбора <> 	Неопределено Тогда
		Для Каждого Настройка Из ЕщеНастройкиВыбора Цикл
			НастройкиВыбора.Вставить(Настройка.Ключ, Настройка.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		НастройкиВыбора.Отбор.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		НастройкиВыбора.Удалить("Валюта");
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ОбъектыРасчетов.ФормаВыбора", НастройкиВыбора, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура НужноОчищатьТЧ(ОписаниеОповещения, ЕстьСтроки)
	
	Если ЕстьСтроки Тогда
		
		ТекстВопроса = НСтр("ru='Суммы взаимозачета могут стать неактуальным.
		                        |Очистить списки задолженностей?'");
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСуммы(ИмяТЧ, ТолькоВТекущейСтроке = ЛОЖЬ)
	
	Если НЕ ТолькоВТекущейСтроке Тогда
		ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(
			Объект[ИмяТЧ],
			0,
			"СуммаРегл,СуммаУпр,СуммаВзаиморасчетов");
	Иначе
		Если Объект[ИмяТЧ].Количество() Тогда
			ТекСтрока = Объект[ИмяТЧ][0];
			ТекСтрока.СуммаРегл = 0;
			ТекСтрока.СуммаУпр = 0;
			ТекСтрока.СуммаВзаиморасчетов = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСуммыДокумента(Форма)
	
	Объект = Форма.Объект;
	
	Объект.ДебиторскаяЗадолженность.Очистить();
	НовСтр = Объект.ДебиторскаяЗадолженность.Добавить();
	НовСтр.ВалютаВзаиморасчетов = Форма.ВалютаРегламентированногоУчета;
	Объект.КредиторскаяЗадолженность.Очистить();
	НовСтр = Объект.КредиторскаяЗадолженность.Добавить();
	НовСтр.ВалютаВзаиморасчетов = Форма.ВалютаРегламентированногоУчета;
	Объект.СуммаДокумента = 0;
	Объект.СуммаРегл = 0;
	Объект.СуммаУпр = 0;
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектРасчетовИнтеркампани) 
		И НЕ ЗначениеЗаполнено(Объект.ОбъектРасчетовДебиторКредитор) Тогда
		Форма.ВалютаВзаиморасчетов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОрганизаций()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.Ссылка <> &ЭтаОрганизация
	|	И Организации.ГоловнаяОрганизация <> &ЭтаОрганизация
	|	И (Организации.Предопределенный = &ИспользоватьУпрОрганизацию
	|			ИЛИ НЕ Организации.Предопределенный)
	|	И (Организации.Ссылка НЕ В (
	|		ВЫБРАТЬ
	|			Организации.ГоловнаяОрганизация КАК Ссылка
	|		ИЗ
	|			Справочник.Организации КАК Организации
	|		ГДЕ
	|			Организации.Ссылка = &ЭтаОрганизация)
	|		ИЛИ &ВидОперации НЕ В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер),
	|								ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный)))
	|");
	
	Запрос.УстановитьПараметр("ЭтаОрганизация", Объект.Организация);
	Запрос.УстановитьПараметр("ИспользоватьУпрОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	Запрос.УстановитьПараметр("ВидОперации", Объект.ВидОперации);
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОрганизацииДляВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	
	Если ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) Тогда
		Элементы.ОрганизацияКредитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	КонецЕсли;
	
	Если РасчетыМеждуОрганизациямиДебитор Тогда
		Элементы.КонтрагентДебитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	КонецЕсли;
	
	Если РасчетыМеждуОрганизациямиКредитор Тогда
		Элементы.КонтрагентКредитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПараметровЗадолженности(Форма, ЭтоКредиторскаяЗадолженность = Ложь)
	
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УчитыватьФилиалы", Истина);
	
	ОперацииИсключение = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями");
	
	Если ЭтоКредиторскаяЗадолженность И ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) И НЕ ОперацииИсключение
		ИЛИ (НЕ ЭтоКредиторскаяЗадолженность И ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) И ОперацииИсключение) Тогда
		ИмяРеквизита = "ОрганизацияКредитор";
		СтруктураПараметров.УчитыватьФилиалы = Ложь;
	Иначе
		ИмяРеквизита = "Организация";
	КонецЕсли;
	
	СтруктураЗначения = Новый Структура(
		"ИмяРеквизита, Значение, Представление",
		ИмяРеквизита,
		Объект[ИмяРеквизита],
		Форма.СтруктураПредставлений[ИмяРеквизита]);
		
	СтруктураПараметров.Вставить("Организация", СтруктураЗначения);
	
	Если ЭтоКредиторскаяЗадолженность И ВыбранВидОперацииМеждуКонтрагентами(Объект.ВидОперации) Тогда
		ИмяРеквизита = "КонтрагентКредитор";
	Иначе
		ИмяРеквизита = "КонтрагентДебитор";
	КонецЕсли;
	
	СтруктураЗначения = Новый Структура(
		"ИмяРеквизита, Значение, Представление",
		ИмяРеквизита,
		Объект[ИмяРеквизита],
		Форма.СтруктураПредставлений[ИмяРеквизита]);
		
	СтруктураПараметров.Вставить("Контрагент", СтруктураЗначения);
	
	Если (Форма.РасчетыСКлиентамиДебитор И НЕ ЭтоКредиторскаяЗадолженность)
	 ИЛИ (Форма.РасчетыСКлиентамиКредитор И ЭтоКредиторскаяЗадолженность) Тогда
		СтруктураПараметров.Вставить("ТипРасчетов", 
			ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"));
	Иначе
		СтруктураПараметров.Вставить("ТипРасчетов", 
			ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком"));
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ВыбранВидОперацииСПоставщиком()
	
	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями
		
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями;
	
КонецФункции

&НаСервере
Функция ВыбранВидОперацииСКлиентом()
	
	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями
		
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями
		
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера;
		
КонецФункции

&НаСервере
Функция ВыбранВидОперацииПереносАванса()
	
	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями
		
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями;
		
КонецФункции

&НаСервере
Функция ВыбранВидОперацииПереносДолга()
	
	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями
		
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранВидОперацииМеждуОрганизациями(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями")
	
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями");
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранВидОперацииМеждуКонтрагентами(ВидОперации)
	
	Возврат НЕ ЗначениеЗаполнено(ВидОперации)
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами")
		
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный")
		
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами")
		
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера");
		
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор = Неопределено, ПараметрыЗадолженностиКредитор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|			ПО Задания.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|ГДЕ
	|	(&ОтборКлиентДт
	|	ИЛИ
	|	&ОтборКлиентКт)
	|	И Задания.Месяц <= &ТекущийМесяц
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|			ПО Задания.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|ГДЕ
	|	(&ОтборПоставщикДт
	|	ИЛИ
	|	&ОтборПоставщикКт)
	|	И Задания.Месяц <= &ТекущийМесяц";
	
	ОтборДт = ?(НЕ ЗначениеЗаполнено(ПараметрыЗадолженностиДебитор),"ЛОЖЬ","(АналитикаПоПартнерам.Организация В (&ОрганизацияДт)
	|		И АналитикаПоПартнерам.Контрагент = &КонтрагентДт
	|		И &ТипРасчетовДт = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом))");
	
	ОтборКт = ?(НЕ ЗначениеЗаполнено(ПараметрыЗадолженностиКредитор),"ЛОЖЬ","(АналитикаПоПартнерам.Организация В (&ОрганизацияКт)
	|		И АналитикаПоПартнерам.Контрагент = &КонтрагентКт
	|		И &ТипРасчетовКт = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом))");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборКлиентДт", ОтборДт);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборКлиентКт", ОтборКт);
	
	ОтборДт = СтрЗаменить(ОтборДт, ".РасчетыСКлиентом)", ".РасчетыСПоставщиком)");
	ОтборКт = СтрЗаменить(ОтборКт, ".РасчетыСКлиентом)", ".РасчетыСПоставщиком)");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоставщикДт", ОтборДт);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоставщикКт", ОтборКт);
	
	Если ЗначениеЗаполнено(ПараметрыЗадолженностиДебитор) Тогда
		Запрос.УстановитьПараметр("ОрганизацияДт", ОрганизацииКРасчету(ПараметрыЗадолженностиДебитор));
		Запрос.УстановитьПараметр("КонтрагентДт",  ПараметрыЗадолженностиДебитор.Контрагент.Значение);
		Запрос.УстановитьПараметр("ТипРасчетовДт", ПараметрыЗадолженностиДебитор.ТипРасчетов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗадолженностиКредитор) Тогда
		Запрос.УстановитьПараметр("ОрганизацияКт", ОрганизацииКРасчету(,ПараметрыЗадолженностиКредитор));
		Запрос.УстановитьПараметр("КонтрагентКт",  ПараметрыЗадолженностиКредитор.Контрагент.Значение);
		Запрос.УстановитьПараметр("ТипРасчетовКт", ПараметрыЗадолженностиКредитор.ТипРасчетов);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущийМесяц",  НачалоМесяца(Объект.Дата));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КлючАналитики");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСуммыУпрРегл(ПараметрыСтруктура, ЭтоДебет)
	
	Если ЭтоДебет Тогда
		ТабличнаяЧасть = Объект.ДебиторскаяЗадолженность;
	Иначе
		ТабличнаяЧасть = Объект.КредиторскаяЗадолженность;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ОбъектРасчетов, Партнер");
	
	МассивОбъектовРасчетов = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если МассивОбъектовРасчетов.Найти(СтрокаТЧ.ОбъектРасчетов) = Неопределено
			И СтрокаТЧ.СуммаВзаиморасчетов <> 0 Тогда
			МассивОбъектовРасчетов.Добавить(СтрокаТЧ.ОбъектРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	ОстаткиЗадолженности = ОстаткиЗадолженностиПоОбъектамРасчетов(ПараметрыСтруктура, МассивОбъектовРасчетов);
	ОстаткиЗадолженности.Индексы.Добавить("ОбъектРасчетов, Партнер");
	
	Для Каждого СтрокаТЧ  Из ТабличнаяЧасть Цикл
		Если СтрокаТЧ.СуммаВзаиморасчетов <> 0 Тогда
			СтруктураПоиска.ОбъектРасчетов = СтрокаТЧ.ОбъектРасчетов;
			СтруктураПоиска.Партнер = СтрокаТЧ.Партнер;
			
			СтрокиОстатков = ОстаткиЗадолженности.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОстатков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокиОстатков[0].СуммаВзаиморасчетов > 0 Тогда
				СтрокаТЧ.СуммаУпр = СтрокиОстатков[0].СуммаУпр * (СтрокаТЧ.СуммаВзаиморасчетов / СтрокиОстатков[0].СуммаВзаиморасчетов);
				СтрокаТЧ.СуммаРегл = СтрокиОстатков[0].СуммаРегл * (СтрокаТЧ.СуммаВзаиморасчетов / СтрокиОстатков[0].СуммаВзаиморасчетов);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Объект.СуммаРегл = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
	Объект.СуммаУпр  = Объект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
	
КонецПроцедуры

&НаСервере
Функция ОстаткиЗадолженностиПоОбъектамРасчетов(ПараметрыАналитики, МассивОбъектовРасчетов)
	
	ЗапросОрганизаций = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация В (&Организация)
	|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
	Если ПараметрыАналитики.УчитыватьФилиалы Тогда
		ЗапросОрганизаций.УстановитьПараметр("Организация", ПараметрыАналитики.Организация.Значение);
		ДоступныеОрганизации = ЗапросОрганизаций.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ДоступныеОрганизации.Добавить(ПараметрыАналитики.Организация.Значение);
		Организация = ДоступныеОрганизации;
	Иначе
		Организация = ПараметрыАналитики.Организация.Значение;
	КонецЕсли;
	
	ТекстВтАналитика = "
		|ВЫБРАТЬ
		|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
		|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|ГДЕ
		|	РегистрАналитикаУчетаПоПартнерам.Организация В (&Организация)
		|	И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	
	Если НЕ НоваяАрхитектураВзаиморасчетов Тогда
		
		ТекстРасчетыСКлиентами = "
		|ВЫБРАТЬ
		|	Аналитика.Партнер КАК Партнер,
		|	Остатки.ЗаказКлиента КАК ОбъектРасчетов,
		|	ВЫБОР
		|		КОГДА Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток < 0 
		|			ТОГДА -(Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток)
		|		ИНАЧЕ Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток < 0 
		|			ТОГДА -(Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток)
		|		ИНАЧЕ Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток
		|	КОНЕЦ КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток < 0 
		|			ТОГДА -(Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток)
		|		ИНАЧЕ Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток
		|	КОНЕЦ КАК СуммаУпр
		|ИЗ РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&Граница, ЗаказКлиента В (&МассивОбъектовРасчетов) И АналитикаУчетаПоПартнерам В (
		|																ВЫБРАТЬ Аналитика.АналитикаУчетаПоПартнерам
		|																ИЗ ВтАналитика КАК Аналитика)) КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
		|			ПО Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
		|";
		
		ТекстРасчетыСПоставщками = "
		|ВЫБРАТЬ
		|	Аналитика.Партнер       КАК Партнер,
		|	Остатки.ЗаказПоставщику КАК ОбъектРасчетов,
		|	ВЫБОР
		|		КОГДА Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток < 0 
		|			ТОГДА -(Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток)
		|		ИНАЧЕ Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток < 0 
		|			ТОГДА -(Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток)
		|		ИНАЧЕ Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток
		|	КОНЕЦ КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток < 0 
		|			ТОГДА -(Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток)
		|		ИНАЧЕ Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток
		|	КОНЕЦ КАК СуммаУпр
		|ИЗ РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&Граница, ЗаказПоставщику В (&МассивОбъектовРасчетов) И АналитикаУчетаПоПартнерам В (
		|																ВЫБРАТЬ Аналитика.АналитикаУчетаПоПартнерам
		|																ИЗ ВтАналитика КАК Аналитика)) КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
		|			ПО Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
		|";
		
		Если Не ЗначениеЗаполнено(ПараметрыАналитики.ТипРасчетов) Тогда
			
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстРасчетыСПоставщками;
			
		ИначеЕсли ПараметрыАналитики.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами;
		Иначе
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСПоставщками;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		МоментВремени = КонецДня(Объект.Дата);
		Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", ПараметрыАналитики.Контрагент.Значение);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.УстановитьПараметр("МассивОбъектовРасчетов", МассивОбъектовРасчетов);
		
	Иначе
		
		ТекстРасчетыСКлиентами = "
		|ВЫБРАТЬ
		|	Аналитика.Партнер                                       КАК Партнер,
		|	Остатки.ОбъектРасчетов                                  КАК ОбъектРасчетов,
		|	Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток         КАК СуммаВзаиморасчетов,
		|	Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток КАК СуммаРегл,
		|	Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток   КАК СуммаУпр
		|ИЗ РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&Граница, ОбъектРасчетов В (&МассивОбъектовРасчетов) И АналитикаУчетаПоПартнерам В (
		|																ВЫБРАТЬ Аналитика.АналитикаУчетаПоПартнерам
		|																ИЗ ВтАналитика КАК Аналитика)) КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
		|			ПО Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
		|";
		
		ТекстРасчетыСПоставщками = "
		|ВЫБРАТЬ
		|	Аналитика.Партнер                                       КАК Партнер,
		|	Остатки.ОбъектРасчетов                                  КАК ОбъектРасчетов,
		|	Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток         КАК СуммаВзаиморасчетов,
		|	Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток КАК СуммаРегл,
		|	Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток   КАК СуммаУпр
		|ИЗ РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&Граница, ОбъектРасчетов В (&МассивОбъектовРасчетов) И АналитикаУчетаПоПартнерам В (
		|																ВЫБРАТЬ Аналитика.АналитикаУчетаПоПартнерам
		|																ИЗ ВтАналитика КАК Аналитика)) КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
		|			ПО Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
		|";
		
		Запрос = Новый Запрос;
		МоментВремени = КонецДня(Объект.Дата);
		Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", ПараметрыАналитики.Контрагент.Значение);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.УстановитьПараметр("МассивОбъектовРасчетов", МассивОбъектовРасчетов);
		
		Если Не ЗначениеЗаполнено(ПараметрыАналитики.ТипРасчетов) Тогда
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстРасчетыСПоставщками;
		ИначеЕсли ПараметрыАналитики.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами;
		Иначе
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСПоставщками;
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммыРеглУпр(ОписаниеОповещения)
	
	ТекстВопроса = НСтр("ru = 'Суммы регламентированного и управленческого учёта по строкам в табличной части не равны суммам документам, пересчитать суммы документа?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", ЭтаФорма);
	ДопПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПересчитатьСуммыДокументаПоРасшифровкеПлатежаЗавершение",ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыДокументаПоРасшифровкеПлатежаЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Объект.СуммаРегл = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
		Объект.СуммаУпр = Объект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СостояниеФоновогоЗаданияВзаиморасчетов()
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСКлиентами()+Ключ);
	ЗаданияРасчетовСКлиентами = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСПоставщиками()+Ключ);
	ЗаданияРасчетовСПоставщиками = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если ЗаданияРасчетовСКлиентами.Количество() = 0 И ЗаданияРасчетовСПоставщиками.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Если ЗаданияРасчетовСКлиентами.Количество() > 0 И ЗаданияРасчетовСКлиентами[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				Возврат "Ошибка";
		ИначеЕсли ЗаданияРасчетовСКлиентами.Количество() > 0 И ЗаданияРасчетовСКлиентами[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
			КлиентЗавершено = Ложь;
		Иначе
			КлиентЗавершено = Истина;
		КонецЕсли;
		
		Если ЗаданияРасчетовСПоставщиками.Количество() > 0 И ЗаданияРасчетовСПоставщиками[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Возврат "Ошибка";
		ИначеЕсли ЗаданияРасчетовСПоставщиками.Количество() > 0 И ЗаданияРасчетовСПоставщиками[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ПоставщикЗавершено = Ложь;
		Иначе
			ПоставщикЗавершено = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ КлиентЗавершено ИЛИ НЕ ПоставщикЗавершено Тогда
		Возврат "Активно";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	Состояние = СостояниеФоновогоЗаданияВзаиморасчетов();
	
	Если Состояние = Неопределено Тогда
		
		Если ЗаполняемаяТЧ = "ДебиторскаяЗадолженность" Тогда
			ПараметрыЗадолженностиДебитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
			АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор);
			РаспределятьРасчетыСКлиентами = 
				ПараметрыЗадолженностиДебитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом");
			РаспределятьРасчетыСПоставщиком =
				ПараметрыЗадолженностиДебитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком");
		ИначеЕсли ЗаполняемаяТЧ = "КредиторскаяЗадолженность" Тогда
			ПараметрыЗадолженностиКредитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
			АналитикаКРасчету = ЕстьЗаданияКРаспределению(,ПараметрыЗадолженностиКредитор);
			РаспределятьРасчетыСКлиентами = 
				ПараметрыЗадолженностиКредитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом");
			РаспределятьРасчетыСПоставщиком =
				ПараметрыЗадолженностиКредитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком");
		Иначе
			ПараметрыЗадолженностиДебитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
			ПараметрыЗадолженностиКредитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
			АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор, ПараметрыЗадолженностиКредитор);
			РаспределятьРасчетыСКлиентами = 
				ПараметрыЗадолженностиДебитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом")
				ИЛИ ПараметрыЗадолженностиКредитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом");
			РаспределятьРасчетыСПоставщиком =
				ПараметрыЗадолженностиДебитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")
				ИЛИ ПараметрыЗадолженностиКредитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком");
		КонецЕсли;
		
		РасчетыРаспределены = АналитикаКРасчету.Количество() = 0;
		
		Если НЕ РасчетыРаспределены Тогда
			
			Ключ = Новый УникальныйИдентификатор();
			СтруктураРасчетов = Новый Структура("АналитикиУчетаПоПартнерам, Организации", АналитикаКРасчету, Неопределено);
			
			Если ФормаДлительнойОперации = Неопределено Тогда
				ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, УникальныйИдентификатор); // ФормаКлиентскогоПриложения
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжидания);
				Элемент = ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации; // ПолеФормы
				Элемент.Заголовок = НСтр("ru = 'Пожалуйста, подождите...'")+Символы.ПС+
					НСтр("ru = 'Выполняется распределение расчетов по документам.'");
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжидания);
			КонецЕсли;
			
			Если РаспределятьРасчетыСКлиентами Тогда
				РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(,СтруктураРасчетов,"РасчетыСКлиентами",
					РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСКлиентами()+Строка(Ключ));
			КонецЕсли;
			
			Если РаспределятьРасчетыСПоставщиком Тогда
				РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(,СтруктураРасчетов,"РасчетыСПоставщиками",
					РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСПоставщиками()+Строка(Ключ));
			КонецЕсли;
			
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
		Иначе
			
			Ключ = Неопределено;
			
			Если ФормаДлительнойОперации <> Неопределено Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура("ТолькоСуммы");
			Если ЗаполняемаяТЧ = "ДебиторскаяЗадолженность" Тогда
				АвтоТест_РассчитатьВзаимозачетЗавершение(Неопределено,ДополнительныеПараметры);
				ЗаблокироватьОбъектыРасчетов();
			ИначеЕсли ЗаполняемаяТЧ = "КредиторскаяЗадолженность" Тогда
				АвтоТест_РассчитатьВзаимозачетЗавершение(Неопределено,ДополнительныеПараметры);
				ЗаблокироватьОбъектыРасчетов();
			Иначе
				АвтоТест_РассчитатьВзаимозачетЗавершение(Неопределено,Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Состояние = "Активно" Тогда
		
		Если ФормаДлительнойОперации = Неопределено Тогда
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, УникальныйИдентификатор); // ФормаКлиентскогоПриложения
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжидания);
			Элемент = ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации; // ПолеФормы
			Элемент.Заголовок = НСтр("ru = 'Пожалуйста, подождите...'")+Символы.ПС+
				НСтр("ru = 'Выполняется распределение расчетов по документам.'");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжидания);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОжидания.ТекущийИнтервал, Истина);
		
	Иначе
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ТекстСообщения = НСтр("ru = 'Во время распределения расчетов по документам произошла ошибка. Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПересчитатьВСуммуРегл(Сумма,Валюта)
	Возврат РаботаСКурсамиВалютУТ.ПересчитатьВВалюту(Сумма,
				ВалютаРегламентированногоУчета,
				Валюта,
				ВалютаРегламентированногоУчета,
				Объект.Дата);
КонецФункции

&НаСервере
Функция ПересчитатьВСуммуУпр(Сумма,Валюта)
	Возврат РаботаСКурсамиВалютУТ.ПересчитатьВВалюту(Сумма,
				ВалютаРегламентированногоУчета,
				Валюта,
				ВалютаУправленческогоУчета,
				Объект.Дата);
КонецФункции

&НаСервере
Процедура УстановитьВидимостьБазоваяВерсия()
	
	ЭтоНеБазовая = ПолучитьФункциональнуюОпцию("НеБазоваяВерсия");
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ДекорацияСуммаУпрПодвал");
	МассивЭлементов.Добавить("ДебиторскаяЗадолженностьИтогСуммаУпр");
	МассивЭлементов.Добавить("КредиторскаяЗадолженностьИтогСуммаУпр");
	МассивЭлементов.Добавить("ПолеВалютаУпрУчета");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ЭтоНеБазовая);
	Если НЕ ЭтоНеБазовая Тогда
		Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаРегл.Заголовок = НСтр("ru = 'Сумма'");
		Элементы.КредиторскаяЗадолженностьБезРазбиенияСуммаРегл.Заголовок = НСтр("ru = 'Сумма'");
		Элементы.ДекорацияСуммаРеглПодвал.Заголовок = НСтр("ru = 'Сумма'");
		Элементы.КредиторскаяЗадолженностьСуммаРегл.Заголовок = НСтр("ru = 'Сумма'");
		Элементы.ДебиторскаяЗадолженностьСуммаРегл.Заголовок = НСтр("ru = 'Сумма'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОрганизацииКРасчету(ПараметрыЗадолженностиДебитор = Неопределено, ПараметрыЗадолженностиКредитор = Неопределено)
	
	ДоступныеОрганизации = Новый Массив;
	
	ЗапросОрганизаций = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация В (&Организация)
	|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
	Если ЗначениеЗаполнено(ПараметрыЗадолженностиДебитор) Тогда
		Если ПараметрыЗадолженностиДебитор.УчитыватьФилиалы Тогда
			ЗапросОрганизаций.УстановитьПараметр("Организация", ПараметрыЗадолженностиДебитор.Организация.Значение);
			ДоступныеОрганизацииДт = ЗапросОрганизаций.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Для Каждого Орг Из ДоступныеОрганизацииДт Цикл
				ДоступныеОрганизации.Добавить(Орг);
			КонецЦикла;
		КонецЕсли;
		ДоступныеОрганизации.Добавить(ПараметрыЗадолженностиДебитор.Организация.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗадолженностиКредитор) Тогда
		Если ПараметрыЗадолженностиКредитор.УчитыватьФилиалы Тогда
			ЗапросОрганизаций.УстановитьПараметр("Организация", ПараметрыЗадолженностиКредитор.Организация.Значение);
			ДоступныеОрганизацииКт = ЗапросОрганизаций.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Для Каждого Орг Из ДоступныеОрганизацииКт Цикл
				ДоступныеОрганизации.Добавить(Орг);
			КонецЦикла;
		КонецЕсли;
		ДоступныеОрганизации.Добавить(ПараметрыЗадолженностиКредитор.Организация.Значение);
	КонецЕсли;
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолучателяПоАвансамДолгам(ВидПолучателя, Валюта = Неопределено)
		
	ИмяПолучатель = ?(ВидПолучателя = "Дт", "ДебиторскаяЗадолженность", "КредиторскаяЗадолженность");
	ИмяОтправитель = ?(ВидПолучателя = "Дт", "КредиторскаяЗадолженность", "ДебиторскаяЗадолженность");
	Задолженность = Объект[ИмяОтправитель];
	Если Задолженность.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(Задолженность[0].ВалютаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Получатель = Объект[ИмяПолучатель][0];
	Если Валюта = Неопределено Тогда
		Валюта = Получатель.ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			Валюта = Задолженность[0].ВалютаВзаиморасчетов;
			Получатель.ВалютаВзаиморасчетов = Валюта;
		КонецЕсли;
	КонецЕсли;
	Валюты = Задолженность.Выгрузить(, "ВалютаВзаиморасчетов"); // ТаблицаЗначений
	НоваяСтрока = Валюты.Добавить();
	НоваяСтрока.ВалютаВзаиморасчетов = Валюта;
	
	КурсыВалют = ПолучитьКоэффициентыПересчетаВВалюту(Валюты);
	НовыйКурс = КурсыВалют[Валюта];
	ИтогоЗадолженность = 0;
	Для Каждого Строка Из Задолженность Цикл
		
		Сумма = Строка.СуммаВзаиморасчетов;
		Если ЗначениеЗаполнено(Строка.ВалютаВзаиморасчетов) И Строка.ВалютаВзаиморасчетов <> Валюта Тогда
			ТекущийКурс = КурсыВалют[Строка.ВалютаВзаиморасчетов];
			Сумма = Сумма * ТекущийКурс.КурсЧислитель /ТекущийКурс.КурсЗнаменатель / (НовыйКурс.КурсЧислитель / НовыйКурс.КурсЗнаменатель);
			Если Валюта = ВалютаРегламентированногоУчета Тогда
				Сумма = Строка.СуммаРегл;
			КонецЕсли;
			Если Валюта = ВалютаУправленческогоУчета Тогда
				Сумма = Строка.СуммаУпр;
			КонецЕсли;
		КонецЕсли;
		ИтогоЗадолженность = ИтогоЗадолженность + Сумма;
		
	КонецЦикла;
	Получатель.СуммаВзаиморасчетов = Окр(ИтогоЗадолженность, 2);
	Получатель.СуммаУпр = Задолженность.Итог("СуммаУпр");
	Получатель.СуммаРегл = Задолженность.Итог("СуммаРегл");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоэффициентыПересчетаВВалюту(Валюты)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	КурсыВалютСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период, Валюта В (&Валюты) И БазоваяВалюта = &ВалютаРегл) КАК КурсыВалютСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	КурсыВалютСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаРегл И БазоваяВалюта = &ВалютаРегл) КАК КурсыВалютСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	КурсыВалютСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУпр И БазоваяВалюта = &ВалютаРегл) КАК КурсыВалютСрезПоследних";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Валюты", Валюты);
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУправленческогоУчета);
	
	КурсыВалют = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Соответствие;
	Для Каждого ТекущаяВалюта Из КурсыВалют Цикл
		Курс = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(ТекущаяВалюта.КурсЧислитель, ТекущаяВалюта.КурсЗнаменатель);
		Результат.Вставить(ТекущаяВалюта.Валюта, Курс);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВалютуВзаиморасчетов(НоваяВалютаВзаиморасчетов)
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный") Тогда
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = НоваяВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВалютуВзаиморасчетов()
	
	ДтПусто = Объект.ДебиторскаяЗадолженность.Количество() = 0 
				ИЛИ Объект.ДебиторскаяЗадолженность.Количество() = 1 
					И НЕ ЗначениеЗаполнено(Объект.ДебиторскаяЗадолженность[0].ОбъектРасчетов);
	КтПусто = Объект.КредиторскаяЗадолженность.Количество() = 0 
				ИЛИ Объект.КредиторскаяЗадолженность.Количество() = 1 
					И НЕ ЗначениеЗаполнено(Объект.КредиторскаяЗадолженность[0].ОбъектРасчетов);
	ШапкаПусто = НЕ ЗначениеЗаполнено(Объект.ОбъектРасчетовИнтеркампани) 
					И НЕ ЗначениеЗаполнено(Объект.ОбъектРасчетовДебиторКредитор);
	
	Если ДтПусто И КтПусто И ШапкаПусто Тогда
		ВалютаВзаиморасчетов = Неопределено;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьОбъектыРасчетов()
	
	РазблокироватьДанныеДляРедактирования(, УникальныйИдентификатор);
	
	МассивОбъектовРасчета = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ДебиторскаяЗадолженность Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
			МассивОбъектовРасчета.Добавить(СтрокаТаблицы.ОбъектРасчетов);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетовЗеркальный) Тогда
			МассивОбъектовРасчета.Добавить(СтрокаТаблицы.ОбъектРасчетовЗеркальный);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.КредиторскаяЗадолженность Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
			МассивОбъектовРасчета.Добавить(СтрокаТаблицы.ОбъектРасчетов);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетовЗеркальный) Тогда
			МассивОбъектовРасчета.Добавить(СтрокаТаблицы.ОбъектРасчетовЗеркальный);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.ОбъектРасчетовИнтеркампани) Тогда
		МассивОбъектовРасчета.Добавить(Объект.ОбъектРасчетовИнтеркампани);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОбъектРасчетовИнтеркампаниЗеркальный) Тогда
		МассивОбъектовРасчета.Добавить(Объект.ОбъектРасчетовИнтеркампаниЗеркальный);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОбъектРасчетовДебиторКредитор) Тогда
		МассивОбъектовРасчета.Добавить(Объект.ОбъектРасчетовДебиторКредитор);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОбъектРасчетовДебиторКредиторЗеркальный) Тогда
		МассивОбъектовРасчета.Добавить(Объект.ОбъектРасчетовДебиторКредиторЗеркальный);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОбъектовРасчета);
	
	Для Каждого ОбъектРасчетов Из МассивОбъектовРасчета Цикл
		//@skip-warning
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ОбъектРасчетов,, УникальныйИдентификатор);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заполненность табличной части ИмяТаблицы
// 
// Параметры:
//  ИмяТаблицы - Строка - Возможные значения: "ДебиторскаяЗадолженность", "КредиторскаяЗадолженность".
// 
// Возвращаемое значение:
//  Булево - Истина, если есть данные.
//
&НаКлиенте
Функция ЕстьСтроки(ИмяТаблицы)
	
	ЗадолженностьСписком = Истина;
	Если ИмяТаблицы = "ДебиторскаяЗадолженность" Тогда
		ЗадолженностьСписком = ПереключательДебиторскаяЗадолженность = 1;
	Иначе
		ЗадолженностьСписком = ПереключательКредиторскаяЗадолженность = 1;
	КонецЕсли;
	
	Если ЗадолженностьСписком Тогда
		ЕстьСтроки = Объект[ИмяТаблицы].Количество() > 0;
	Иначе
		ЕстьСтроки = Не (Объект[ИмяТаблицы][0].ОбъектРасчетовЗеркальный = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка")
			И Объект[ИмяТаблицы][0].ОбъектРасчетов = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка")
			И Объект[ИмяТаблицы][0].Сумма = 0
			И Объект[ИмяТаблицы][0].СуммаВзаиморасчетов = 0
			И Объект[ИмяТаблицы][0].ВалютаВзаиморасчетов = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка")
			И Объект[ИмяТаблицы][0].СуммаРегл = 0
			И Объект[ИмяТаблицы][0].СуммаУпр = 0);
	КонецЕсли;
	
	Возврат ЕстьСтроки;
	
КонецФункции


// Очищает табличную часть ИмяТаблицы в соответствии с переключателями
// 
// Параметры:
//  ИмяТаблицы - Строка - Возможные значения: "ДебиторскаяЗадолженность", "КредиторскаяЗадолженность".
&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(ИмяТаблицы)
	
	ЗадолженностьСписком = Истина;
	Если ИмяТаблицы = "ДебиторскаяЗадолженность" Тогда
		ЗадолженностьСписком = ПереключательДебиторскаяЗадолженность = 1;
	Иначе
		ЗадолженностьСписком = ПереключательКредиторскаяЗадолженность = 1;
	КонецЕсли;
	
	Если ЗадолженностьСписком Тогда
		Объект[ИмяТаблицы].Очистить();
	Иначе
		Объект[ИмяТаблицы][0].ОбъектРасчетовЗеркальный = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
		Объект[ИмяТаблицы][0].ОбъектРасчетов = ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка");
		Объект[ИмяТаблицы][0].Сумма = 0;
		Объект[ИмяТаблицы][0].СуммаВзаиморасчетов = 0;
		Объект[ИмяТаблицы][0].ВалютаВзаиморасчетов = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		Объект[ИмяТаблицы][0].СуммаРегл = 0;
		Объект[ИмяТаблицы][0].СуммаУпр = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПредыдущиеЗначения()
		ПредыдущиеЗначения = Новый Структура();
		ПредыдущиеЗначения.Вставить("КонтрагентДебитор", Объект.КонтрагентДебитор);
		ПредыдущиеЗначения.Вставить("КонтрагентКредитор", Объект.КонтрагентКредитор);
		ПредыдущиеЗначения.Вставить("Организация", Объект.Организация);
		ПредыдущиеЗначения.Вставить("ОрганизацияКредитор", Объект.ОрганизацияКредитор);
		ПредыдущиеЗначения.Вставить("ТипДебитора", Объект.ТипДебитора);
		ПредыдущиеЗначения.Вставить("ТипКредитора", Объект.ТипКредитора);
КонецПроцедуры


#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

&НаСервере
Функция РазрешенаРаботаСДочернимиПартнерами(ОбъектРасчетов)
	
	Результат = Ложь;
	Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
		Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "Объект");
		Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "РазрешенаРаботаСДочернимиПартнерами");
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбновлениеНеЗавершено()
	
	Возврат НЕ ВзаиморасчетыСервер.ОтложенноеОбновлениеРегистровВзаиморасчетовЗавершено(Истина);
	
КонецФункции



#КонецОбласти
