#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//								Конструктор структуры: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа().
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаПеремещение);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Корректирует строки, по которым не была оформлено перемещение или складские оредера или имеются расхождения по мерным
// товарам.
//
// Параметры:
// 		СтруктураПараметров - Структура - Структура параметров корректировки, конструктор: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа().
//
// Возвращаемое значение:
// 		Структура
// 		*	КоличествоСтрок - Количество отмененных/скорректированных строк.
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	Если Не СтруктураПараметров.ОтменитьНеотработанныеСтроки И Не СтруктураПараметров.СкорректироватьМерныеТовары Тогда
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(Неопределено)
	КонецЕсли;
	
	КоличествоСкорректированныхСтрок = 0;
	
	Если Не СтруктураПараметров.ПроверятьОстатки Тогда
		
		СвойстваОтмененнойСтроки = Новый Структура("Отменено, СтатусУказанияСерий", Истина, 0);
		
		Для каждого СтрокаТовары Из Товары Цикл
			Если Не СтрокаТовары.Отменено Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТовары, СвойстваОтмененнойСтроки);
				КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСкорректированныхСтрок);
	КонецЕсли;
	
	ПараметрыЗаполнения = ЗаказыСервер.ПараметрыЗаполненияДляОтменыСтрок();
	ПараметрыЗаполнения.МенеджерРегистра  = РегистрыНакопления.ЗаказыНаПеремещение;
	ПараметрыЗаполнения.ИмяТабличнойЧасти = "Товары";
	ПараметрыЗаполнения.ПутиКДанным.Вставить("Склад", "СкладОтправитель");
	Если ОбосабливатьПоНазначениюЗаказа Тогда
		ПараметрыЗаполнения.ТаблицаЗамен = Товары.Выгрузить(,"НомерСтроки, Назначение");
		Справочники.Назначения.ЗаполнитьНазначениеОбеспечения(ПараметрыЗаполнения.ТаблицаЗамен, Назначение, "Назначение");
	КонецЕсли;
	
	ПараметрыОтмены = ЗаказыСервер.ПараметрыОтменыСтрокЗаказов();
	ПараметрыОтмены.ОтменятьТолькоМерныеТовары = НЕ СтруктураПараметров.ОтменитьНеотработанныеСтроки
		И СтруктураПараметров.СкорректироватьМерныеТовары;
	ПараметрыОтмены.СкорректироватьМерныеТовары = СтруктураПараметров.СкорректироватьМерныеТовары;
	
	РезультатОтмены = ЗаказыСервер.ОтменитьНеотработанныеСтрокиПоОтгрузке(ЭтотОбъект, ПараметрыЗаполнения, ПараметрыОтмены);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаПеремещение));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Возврат РезультатОтмены;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

// Параметры:
//  ДанныеЗаполнения - Структура - данные для заполнения документа:
//    * Товары - ТаблицаЗначений - таблица которую нужно использовать для заполнения табличной части документа.
//    * СтандартнаяОбработка - Булево - Нужно установить ложь, если не нужно выполнять стандартную обработку события.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Основание") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			Или ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ПриемкаТоваровНаХранение") Тогда
			
			ЗаполнитьПоПриобретениюТоваров(ДанныеЗаполнения);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Неверные параметры создания документа на основании'");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкеНаВозвратТоваровОтКлиента(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		ЗаполнитьПоЗаказуНаВнутреннееПотребление(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		ЗаполнитьПоЗаказуНаСборку(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад") Тогда
		ЗаполнитьПоПоступлениюТоваров(ДанныеЗаполнения);
	КонецЕсли;
	
	ЕстьВариантОбеспечения = ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("Товары")
			И ТипЗнч(ДанныеЗаполнения.Товары) = Тип("ТаблицаЗначений")
			И ДанныеЗаполнения.Товары.Колонки.Найти("ВариантОбеспечения") <> Неопределено;
	
	ИнициализироватьДокумент(ДанныеЗаполнения, Не ЕстьВариантОбеспечения);
	
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	Документы.ЗаказНаПеремещение.ПроверитьИОчиститьОрганизацию(ЭтотОбъект, ОрганизацияПолучатель);
	Документы.ЗаказНаПеремещение.ПроверитьИОчиститьОрганизацию(ЭтотОбъект, Организация);
	
	ЗаказНаПеремещениеЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ЗаказНаПеремещение.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	// Склад получатель и склад отправитель должны различаться
	Если ЗначениеЗаполнено(СкладОтправитель) И СкладОтправитель = СкладПолучатель Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Один склад не может быть как отправителем, так и получателем. Измените один из складов.'"),
			ЭтотОбъект,
			"СкладОтправитель",
			,
			Отказ);
		
	КонецЕсли;
	
	// Желаемая дата поступления в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;
	
	// Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
		
		ТекстОшибки = НСтр("ru='Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.'");
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОрганизацияПолучатель",
			,
			Отказ);
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("СкладОтправитель");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НачалоОтгрузки");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ОкончаниеПоступления");
	
	ПараметрыВстраивания = Документы.ЗаказНаПеремещение.ДоступныеОстаткиПараметрыВстраивания();
	ТаблицаОшибок = ОбеспечениеВДокументахСервер.ТаблицаОшибокЗаполнения(ЭтотОбъект, ПараметрыВстраивания);
	
	СкладОтправительОбязателен = Ложь;
	
	ШаблонТекста = ?(ИспользоватьДлительностьПеремещения,
		НСтр("ru='Не заполнена колонка ""Начало отгрузки"" в строке %НомерСтроки% списка ""Товары""'"),
		НСтр("ru='Не заполнена колонка ""Дата отгрузки"" в строке %НомерСтроки% списка ""Товары""'"));
		
	Для ТекИндекс = 0 По ТаблицаОшибок.Количество() - 1 Цикл
		
		СтрокаОшибки = ТаблицаОшибок[ТекИндекс];
		
		Если СтрокаОшибки.ДатаОтгрузкиОбязательна И СтрокаОшибки.ДатаОтгрузкиНеЗаполнена Тогда
			
			ТекстОшибки   = СтрЗаменить(ШаблонТекста, "%НомерСтроки%", СтрокаОшибки.НомерСтроки);
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаОшибки.НомерСтроки, "НачалоОтгрузки");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТабЧасти, , Отказ);
			
		КонецЕсли;
		
		СкладОтправительОбязателен = СкладОтправительОбязателен Или СтрокаОшибки.СкладОбязателен;
		
	КонецЦикла;
	
	Если СкладОтправительОбязателен И Не ЗначениеЗаполнено(СкладОтправитель) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Склад-отправитель"" не заполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "СкладОтправитель", , Отказ);
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Товары Цикл
		
		АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);
		
		Если ИспользоватьДлительностьПеремещения
			И НЕ СтрокаТЧ.Отменено
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.ОкончаниеПоступления)
			И СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Окончание поступления""'");
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ОкончаниеПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ИспользоватьДлительностьПеремещения И ЗначениеЗаполнено(СтрокаТЧ.НачалоОтгрузки) И ЗначениеЗаполнено(СтрокаТЧ.ОкончаниеПоступления) И СтрокаТЧ.НачалоОтгрузки > СтрокаТЧ.ОкончаниеПоступления Тогда
			
			ТекстОшибки = НСтр("ru='Дата окончания поступления меньше даты начала отгрузки'");
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ОкончаниеПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.НачалоОтгрузки) И СтрокаТЧ.НачалоОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата начала отгрузки должна быть не меньше даты документа ""%Дата%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "НачалоОтгрузки"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ИспользоватьДлительностьПеремещения И ЗначениеЗаполнено(СтрокаТЧ.ОкончаниеПоступления) И СтрокаТЧ.ОкончаниеПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата окончания поступления должна быть не меньше даты документа ""%Дата%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ОкончаниеПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаПеремещение),
		Отказ,
		МассивНепроверяемыхРеквизитов);
	
	ПараметрыПроверки = УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС();
	ПараметрыПроверки.ИмяТабличнойЧасти = "Товары";
	УчетНДСУП.ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(
		ЭтотОбъект, 
		ПеремещениеПодДеятельность, 
		ПараметрыПроверки, 
		Отказ);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ЗаказНаПеремещениеЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	
	Если Не ИспользоватьДлительностьПеремещения Тогда
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("НачалоОтгрузки"), "ОкончаниеПоступления");
	КонецЕсли;
	
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(
		ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(
			ЭтотОбъект,
			Документы.ЗаказНаПеремещение));
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаказНаПеремещение.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ШаблонНазначения = Документы.ЗаказНаПеремещение.ШаблонНазначения(ЭтотОбъект);
	ПерегенерацияНазначения = Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(Назначение, ШаблонНазначения,
		ЭтотОбъект, "НаправлениеДеятельности", Отказ);
	
	Если ПерегенерацияНазначения Тогда
		ОбосабливатьПоНазначениюЗаказа = Константы.ВариантОбособленияТоваровВПеремещении.Получить()
			<> Перечисления.ВариантыОбособленияТоваровВПеремещении.НазначениеПолучателя;
	КонецЕсли;
	
	ЗаказНаПеремещениеЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
    // << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
	// Дополнительные проверки
	КР_ПередЗаписьюДополнительно(Отказ, РежимЗаписи, РежимПроведения);
	// >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ШаблонНазначения = Документы.ЗаказНаПеремещение.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, СкладПолучатель, ПеремещениеПодДеятельность);
	
	ЗаказНаПеремещениеЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование       = Неопределено;
	ЖелаемаяДатаПоступления = Дата(1, 1, 1);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаПеремещение") Тогда
		Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	Иначе
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	МаксимальныйКодСтроки   = 0;
	Назначение              = Справочники.Назначения.ПустаяСсылка();
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	Для каждого СтрокаТовары Из Товары Цикл
	
		СтрокаТовары.НачалоОтгрузки = Дата(1, 1, 1);
		СтрокаТовары.ОкончаниеПоступления = Дата(1, 1, 1);
		СтрокаТовары.Отменено             = Ложь;
		СтрокаТовары.КодСтроки            = 0;
		СтрокаТовары.Назначение = Справочники.Назначения.ПустаяСсылка();
		
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
	ЗаказНаПеремещениеЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	ВыполнитьКонтрольЗаказаПослеПроведения(Отказ);
	
	ЗаказНаПеремещениеЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);
	ЗаказНаПеремещениеЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено, ЗаполнятьВариантОбеспечения = Истина)

	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация = Организация;
	ПараметрыЗаполнения.Дата = Дата;
	ПараметрыЗаполнения.Склад = СкладПолучатель;
	ПараметрыЗаполнения.ДвижениеТоваровНаСкладах = Истина;
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ПеремещениеПодДеятельность, ПараметрыЗаполнения);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаПеремещение") Тогда
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;

	Если ЗаполнятьВариантОбеспечения Тогда
		ОбеспечениеВДокументахСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Товары);
	КонецЕсли;
	
	ОбосабливатьПоНазначениюЗаказа = Константы.ВариантОбособленияТоваровВПеремещении.Получить()
		<> Перечисления.ВариантыОбособленияТоваровВПеремещении.НазначениеПолучателя;
	
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.Свойство("Товары") Тогда
		ЗаполнитьТоварыПоТаблице(ДанныеЗаполнения.Товары);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаВозвратТоваровОтКлиента(ЗаявкаНаВозврат)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Статус                  КАК СтатусДокумента,
	|	ЗаказКлиента.Приоритет               КАК Приоритет,
	|	ЗаказКлиента.Проведен                КАК Проведен,
	|	ЗаказКлиента.Организация             КАК Организация,
	|	ЗаказКлиента.Сделка                  КАК Сделка,
	|	ЗаказКлиента.Подразделение           КАК Подразделение,
	|	ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗаказКлиента.СпособКомпенсации       КАК СпособКомпенсации
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаявкаНаВозврат");
	
	Запрос.УстановитьПараметр("ЗаявкаНаВозврат", ЗаявкаНаВозврат);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.СпособКомпенсации <> Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		ТекстОшибки = НСтр("ru='Ввод на основании возможен для заявок на возврат со способом компенсации ""Заменить товары"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаявкаНаВозврат,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	// Заполнение шапки
	Организация             = Реквизиты.Организация;
	Приоритет               = Реквизиты.Приоритет;
	Сделка                  = Реквизиты.Сделка;
	ДокументОснование       = ЗаявкаНаВозврат;
	Подразделение           = Реквизиты.Подразделение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	
	// Заполнение табличной части.
	
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ПараметрыТаблицыТовары.ПолучатьРаботы = Ложь;
	
	ТаблицаТовары = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаявкаНаВозврат, ПараметрыТаблицыТовары);
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		Товары.Загрузить(ТаблицаТовары);
		СкладПолучатель = ТаблицаТовары[0].Склад;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения)

	ЗаказКлиента = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Статус                  КАК СтатусДокумента,
	|	ЗаказКлиента.Приоритет               КАК Приоритет,
	|	ЗаказКлиента.Проведен                КАК Проведен,
	|	ЗаказКлиента.Организация             КАК Организация,
	|	ВЫБОР КОГДА ЗаказКлиента.Сделка.ОбособленныйУчетТоваровПоСделке ТОГДА
	|				ЗаказКлиента.Сделка
	|		КОНЕЦ                            КАК Сделка,
	|	ЗаказКлиента.Подразделение           КАК Подразделение,
	|	ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	// Заполнение шапки
	Организация             = Реквизиты.Организация;
	Приоритет               = Реквизиты.Приоритет;
	Сделка                  = Реквизиты.Сделка;
	ДокументОснование       = ЗаказКлиента;
	Подразделение           = Реквизиты.Подразделение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	СкладПолучатель         = ДанныеЗаполнения.Склад;
	
	// Заполнение табличной части.
	
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ПараметрыТаблицыТовары.ПолучатьРаботы = Ложь;
	ПараметрыТаблицыТовары.Отбор          = СкладПолучатель;
	
	ТаблицаТовары = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента, ПараметрыТаблицыТовары);
	Товары.Загрузить(ТаблицаТовары);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаВнутреннееПотребление(ЗаказНаПотребление)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заказ.Статус                  КАК СтатусДокумента,
	|	Заказ.Приоритет               КАК Приоритет,
	|	Заказ.Проведен                КАК Проведен,
	|	Заказ.Организация             КАК Организация,
	|	Заказ.Сделка                  КАК Сделка,
	|	Заказ.Подразделение           КАК Подразделение,
	|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Заказ.Склад                   КАК СкладДокумента
	|ИЗ
	|	Документ.ЗаказНаВнутреннееПотребление КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказНаПотребление");
	
	Запрос.УстановитьПараметр("ЗаказНаПотребление", ЗаказНаПотребление);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказНаПотребление,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	// Заполнение шапки
	Организация             = Реквизиты.Организация;
	Приоритет               = Реквизиты.Приоритет;
	Сделка                  = Реквизиты.Сделка;
	ДокументОснование       = ЗаказНаПотребление;
	Подразделение           = Реквизиты.Подразделение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	СкладПолучатель         = Реквизиты.СкладДокумента;
	
	// Заполнение табличной части.
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ПараметрыТаблицыТовары.ПолучатьРаботы = Ложь;

	ТаблицаТовары = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаказНаПотребление, ПараметрыТаблицыТовары);
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		Товары.Загрузить(ТаблицаТовары);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаСборку(ЗаказНаСборку)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заказ.Статус                  КАК СтатусДокумента,
	|	Заказ.Приоритет               КАК Приоритет,
	|	Заказ.Проведен                КАК Проведен,
	|	Заказ.Организация             КАК Организация,
	|	Заказ.Сделка                  КАК Сделка,
	|	Заказ.Подразделение           КАК Подразделение,
	|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Заказ.Склад                   КАК СкладДокумента,
	|	Заказ.ХозяйственнаяОперация   КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказНаСборку");
	
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		ТекстОшибки = НСтр("ru='Ввод на основании возможен для заказов на сборку с операцией ""Сборка из комплектующих"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказНаСборку,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	// Заполнение шапки
	Организация             = Реквизиты.Организация;
	Сделка                  = Реквизиты.Сделка;
	Приоритет               = Реквизиты.Приоритет;
	ДокументОснование       = ЗаказНаСборку;
	Подразделение           = Реквизиты.Подразделение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	СкладПолучатель         = Реквизиты.СкладДокумента;
	
	// Заполнение табличной части.
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ПараметрыТаблицыТовары.ПолучатьРаботы = Ложь;
	
	ТаблицаТовары = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаказНаСборку, ПараметрыТаблицыТовары);
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		Товары.Загрузить(ТаблицаТовары);
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьПоПриобретениюТоваров(ДанныеЗаполнения)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Шапка.Ссылка                  КАК Ссылка,
	|	Шапка.Организация             КАК Организация,
	|	Шапка.Сделка                  КАК Сделка,
	|	Шапка.Склад                   КАК СкладОтправитель,
	|	Шапка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕ Шапка.Проведен             КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Назначение          КАК Назначение,
	|	Товары.Склад               КАК Склад,
	|	Товары.Серия               КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.Количество          КАК Количество,
	|	Товары.КоличествоУпаковок  КАК КоличествоУпаковок,
	|	Товары.Упаковка            КАК Упаковка,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) КАК ВариантОбеспечения,
	|	ВЫБОР
	|		КОГДА Товары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Обособленно
	|
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И Товары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И Товары.Склад = &Склад
	|;
	|
	|////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура   КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Назначение     КАК Назначение,
	|	Серии.Склад          КАК Склад,
	|	Серии.Серия          КАК Серия,
	|	Серии.Количество     КАК Количество
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &ДокументОснование
	|	И Серии.Склад = &Склад";
	
	Если ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ПриемкаТоваровНаХранение") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"Документ.ПриобретениеТоваровУслуг", "Документ.ПриемкаТоваровНаХранение");
	КонецЕсли;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения.Основание);
	Запрос.УстановитьПараметр("Склад",             ДанныеЗаполнения.Склад);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	ТоварыОснования  = ПакетРезультатов[1].Выгрузить();
	
	Если ТоварыОснования.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Документ %Документ% не содержит товаров. Ввод на основании документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения.Основание);
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Шапка = ПакетРезультатов[0].Выбрать();
	Шапка.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(Шапка.Ссылка, Неопределено, Шапка.ЕстьОшибкиПроведен);
	
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	ДокументОснование = ДанныеЗаполнения.Основание;
	СкладОтправитель  = ДанныеЗаполнения.Склад;
	
	// Разбиение строк, заполнение серий со статусом 10.
	ИндексыСтрок    = Новый Массив();
	
	Для Каждого СтрокаТовары Из ТоварыОснования Цикл
		Если СтрокаТовары.СтатусУказанияСерий = 10 Тогда
			ИндексыСтрок.Вставить(0, ТоварыОснования.Индекс(СтрокаТовары));
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексыСтрок.Количество() > 0 Тогда
		СерииОснования = ПакетРезультатов[2].Выгрузить();
		КлючСерии      = "Номенклатура, Характеристика, Склад, Назначение";
		
		НакладныеСервер.ПеренестиСерииИзТаблицыВСтроки(ТоварыОснования, ИндексыСтрок, СерииОснования, КлючСерии);
	КонецЕсли;
	
	Товары.Загрузить(ТоварыОснования);
	
	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаПеремещение);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюТоваров(ДокументПоступления)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Ссылка                  КАК Ссылка,
	|	Шапка.Организация             КАК Организация,
	|	Шапка.Сделка                  КАК Сделка,
	|	Шапка.Склад                   КАК СкладОтправитель,
	|	Шапка.Подразделение           КАК Подразделение,
	|	Шапка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕ Шапка.Проведен             КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПоступлениеТоваровНаСклад КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Упаковка КАК Упаковка,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) КАК ВариантОбеспечения,
	|	ВЫБОР
	|		КОГДА Товары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Обособленно
	|ИЗ
	|	Документ.ПоступлениеТоваровНаСклад.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Назначение КАК Назначение,
	|	Серии.Серия КАК Серия,
	|	Серии.Количество КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровНаСклад.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &ДокументОснование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступления);
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ТоварыОснования = ПакетРезультатов[1].Выгрузить();
	Если ТоварыОснования.Количество() = 0 Тогда

		ТекстОшибки = НСтр("ru='Документ %Документ% не содержит товаров. Ввод на основании документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументПоступления);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Шапка = ПакетРезультатов[0].Выбрать();
	Шапка.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Шапка.Ссылка,
		,
		Шапка.ЕстьОшибкиПроведен,);
	
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	ДокументОснование = ДокументПоступления;
	
	// Разбиение строк, заполнение серий со статусом 10.
	ИндексыСтрок = Новый Массив();
	Для Каждого СтрокаТовары Из ТоварыОснования Цикл
		
		Если СтрокаТовары.СтатусУказанияСерий = 10 Тогда
			ИндексыСтрок.Вставить(0, ТоварыОснования.Индекс(СтрокаТовары));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИндексыСтрок.Количество() > 0 Тогда
		
		СерииОснования = ПакетРезультатов[2].Выгрузить();
		КлючСерии = "Номенклатура, Характеристика, Склад, Назначение";
		НакладныеСервер.ПеренестиСерииИзТаблицыВСтроки(ТоварыОснования, ИндексыСтрок, СерииОснования, КлючСерии);
		
	КонецЕсли;
	
	// Заполнение табличной части товары.
	Товары.Загрузить(ТоварыОснования);
	
	СкладОтправитель = ДокументПоступления.Склад;

	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаПеремещение);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьТоварыПоТаблице(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачалоОтгрузки = НачалоДня(ДанныеЗаполнения[0].НачалоОтгрузки);
	ОкончаниеПоступления = НачалоДня(ДанныеЗаполнения[0].ОкончаниеПоступления);
	Длительность = Цел((ОкончаниеПоступления - НачалоОтгрузки) / 86400);
	ОбщаяДлительность = Истина;
	ОтгрузкаИПоступлениеОднойДатой = (НачалоОтгрузки = ОкончаниеПоступления);
	
	Для Каждого СтрокаДанныхЗаполнения Из ДанныеЗаполнения Цикл
		
		Строка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДанныхЗаполнения);
		
		Если ОтгрузкаИПоступлениеОднойДатой
			И (НачалоДня(Строка.НачалоОтгрузки) <> НачалоДня(Строка.ОкончаниеПоступления)) Тогда
			
			ОтгрузкаИПоступлениеОднойДатой = Ложь;
			
		КонецЕсли;
		
		Если ОбщаяДлительность
			И Длительность <> Цел((НачалоДня(Строка.ОкончаниеПоступления) - НачалоДня(Строка.НачалоОтгрузки)) / 86400) Тогда
			
			ОбщаяДлительность = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИспользоватьДлительностьПеремещения = Не ОтгрузкаИПоступлениеОднойДатой;
	Если ИспользоватьДлительностьПеремещения И ОбщаяДлительность Тогда
		ДлительностьПеремещения = Длительность;
	Иначе
		ДлительностьПеремещения = 0;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность проведения документа в статусе "Закрыт".
//
// Параметры:
//  Отказ	 - Булево - параметр "Отказ" обработки проведения.
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Отказ)

	КонтролироватьОтгрузку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки");
	
	Если Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт
		И КонтролироватьОтгрузку Тогда
		Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
		ДополнительныеПараметры = Новый Структура("КонтрольВыполненияЗаказа", Истина);
		
		Запрос = Документы.ЗаказНаПеремещение.СформироватьЗапросПроверкиПриСменеСтатуса(Массив, "Закрыт", ДополнительныеПараметры);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаОтгрузка = Результат.Выбрать();
		
		Пока ВыборкаОтгрузка.Следующий() Цикл
			
			ПроверкаПройдена = Документы.ЗаказНаПеремещение.ПроверкаПередСменойСтатуса(ВыборкаОтгрузка, Статус, ДополнительныеПараметры);
			Если Не ПроверкаПройдена Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КР_ДобавленныеПроцедурыИФункции

#Область КР_ПрограммныйИнтерфейс

// << 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148
Функция КР_ПодобратьАналогиНаОтсутствующийТовар() Экспорт  
	
	// 05.12.2023 A2105505-2516
	//	Механизм был полностью переработан по новым требованиям ФДР
	// ОБНОВЛЕННЫЙ АЛГОРИТМ (кратко)
	//	1. Формируем таблицу групп аналогов с приоритетами
	//	2. Формируем потребность по группам/размерам из исходной таблицы товаров: 
	//	   приводим к виду Группа аналогов, размер, количество (макс по группе/размеру)
	//	3. Вычитаем количество остатков, рассчитанных по группе аналогов/размеру на складе получателе
	//	4. Подбираем номенклатуру/характеристику из остатков на складе отправителе на количество товаров исходя из приоритета	
	
	// Получим отсутствующий на остатках товар 
	Запрос = Новый Запрос(КР_ТекстЗапросаКорректировкаПотребностиИПодборАналогов());   
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
	Запрос.УстановитьПараметр("Период", КонецДня(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если нечего заказывать на отправителе (нет остатков) 
	//	"говорим" вызывающему процессу что ничего не сделали 
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Ложь;  
	КонецЕсли;	
		
	КОбеспечению = Перечисления.ВариантыОбеспечения.КОбеспечению;
	МаксимальныйКодСтроки = 0;
	Товары.Очистить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);  
		НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
		НоваяСтрока.ВариантОбеспечения = КОбеспечению;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // >> 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148

#КонецОбласти

#Область КР_ОбработчикиСобытий

// << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
// Дополнительные проверки   
// Входные Параметры:
// Отказ - Булево - Стандартный из события
// РежимЗаписи - РежимЗаписиДокумента - Стандартный из события 
// РежимПроведения - РежимПроведенияДокумента - Стандартный из события
//
Процедура КР_ПередЗаписьюДополнительно(Отказ, РежимЗаписи, РежимПроведения) 
	
	// << 16.05.2023 Федотов А.М., КРОК, Jira№A2105505-1657
	КР_ДополнительныеДействияВМагазине.ПроверитьЗаблокироватьЗаписьДокументаВМагазине(ЭтотОбъект, Отказ, "СкладПолучатель");
	// >> 16.05.2023 Федотов А.М., КРОК, Jira№A2105505-1657
	
	РеквизитыПроверки = Документы.ЗаказНаПеремещение.КР_РеквизитыПроверкиРазрешенияРедактирования();
	ЗаполнитьЗначенияСвойств(РеквизитыПроверки, ЭтотОбъект);
	Документы.ЗаказНаПеремещение.КР_ПроверитьРазрешениеРедактирования(РеквизитыПроверки, Отказ); 
	
	// << 23.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1446 
	// Отключение для запуска первого релиза.
	
	//// << 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937
	//Если Не ЗначениеЗаполнено(КР_Контейнер) И
	//	РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	КР_КонтрольУникальности(Отказ);
	//КонецЕсли;
	//// >> 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937
	
	// >> 23.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1446 
	
	// << 28.03.2023, Федоров Д.Е., КРОК, JIRA№ A2105505-1112
	КР_УстановитьЗначениеРасклипсовки(Отказ, РежимЗаписи);
	// >> 28.03.2023, Федоров Д.Е., КРОК, JIRA№ A2105505-1112
	
	// << 29.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1015
	Если Не ЗначениеЗаполнено(КР_Контейнер) Тогда
		КР_ОтложенноеРаспределение = Ложь;
	КонецЕсли;
	// >> 29.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1015
	
КонецПроцедуры // >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 

#КонецОбласти

#Область КР_СлужебныеПроцедурыИФункции

// << 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937
Процедура КР_КонтрольУникальности(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Дата));
	Запрос.УстановитьПараметр("КонецДня", КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
	Запрос.УстановитьПараметр("ПустойКонтейнер", Справочники.КР_Контейнеры.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПеремещение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	НЕ ЗаказНаПеремещение.Ссылка = &Ссылка
	|	И ЗаказНаПеремещение.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И ЗаказНаПеремещение.Проведен
	|	И ЗаказНаПеремещение.Организация = &Организация
	|	И ЗаказНаПеремещение.СкладПолучатель = &СкладПолучатель
	|	И ЗаказНаПеремещение.КР_Контейнер = &ПустойКонтейнер";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТекстОшибки = НСтр("ru = 'Заказ перемещения на склад ""%1"" не уникален в разрезе дня (%2)'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СкладПолучатель, Выборка.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка, , , Отказ);
	КонецЕсли;
	
КонецПроцедуры // >> 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937

// << 28.03.2023, Федоров Д.Е., КРОК, JIRA№ A2105505-1112
Процедура КР_УстановитьЗначениеРасклипсовки(Отказ, РежимЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеРасклипсовки = Документы.ЗаказНаПеремещение.КР_ПолучитьЗначениеРасклипсовки(ЭтотОбъект);
	
	Документы.ЗаказНаПеремещение.КР_ЗаписатьЗначениеРасклипсовки(ЭтотОбъект, ЗначениеРасклипсовки);
	
КонецПроцедуры // >> 28.03.2023, Федоров Д.Е., КРОК, JIRA№ A2105505-1112

#КонецОбласти

#Область КР_ТекстыЗапросов

// << 05.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2516
Функция КР_ТекстЗапросаКорректировкаПотребностиИПодборАналогов()

	ТекстыЗапроса = Новый Массив;
	
	// Выбираем товары во временную таблицу 
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	Т.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Т"
	);

	// Нормализация данных
	
	// Дополняем Группой аналогов и размером
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторЗаписи,
	|	Т.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Т.Характеристика.КР_Размер, ЗНАЧЕНИЕ(Справочник.КР_Размеры.ПустаяСсылка)) КАК Размер,
	|	НЕ ГА.ГруппаАналоговТоваров ЕСТЬ NULL КАК ЕстьАналоги,
	|	ЕСТЬNULL(ГА.ГруппаАналоговТоваров, ЗНАЧЕНИЕ(Справочник.КР_ГруппыАналоговТоваров.ПустаяСсылка)) КАК ГруппаАналоговТоваров,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДополненная
	|ИЗ
	|	Товары КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КР_СоставГруппАналоговТоваров КАК ГА
	|		ПО Т.Номенклатура = ГА.Номенклатура
    |
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	ЕСТЬNULL(Т.Характеристика.КР_Размер, ЗНАЧЕНИЕ(Справочник.КР_Размеры.ПустаяСсылка)),
	|	НЕ ГА.ГруппаАналоговТоваров ЕСТЬ NULL,
	|	ЕСТЬNULL(ГА.ГруппаАналоговТоваров, ЗНАЧЕНИЕ(Справочник.КР_ГруппыАналоговТоваров.ПустаяСсылка))"
	);

	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ Товары");
	
	// Формируем идентификаторы групп аналогов 
	//	для того чтоб представить системе номенклатуру не имеющую аналогов как будто это аналог 
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АВТОНОМЕРЗАПИСИ() КАК Идентификатор,
	|	Т.ЕстьАналоги КАК ЕстьАналоги,
	|	ВЫБОР
	|		КОГДА Т.ЕстьАналоги
	|			ТОГДА Т.ГруппаАналоговТоваров
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГруппаАналоговТоваров,
	|	ВЫБОР
	|		КОГДА Т.ЕстьАналоги
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.ИдентификаторЗаписи
	|	КОНЕЦ КАК ИдентификаторЗаписи,
	|	ВЫБОР
	|		КОГДА Т.ЕстьАналоги
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Т.ЕстьАналоги
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.Размер
	|	КОНЕЦ КАК Размер
	|ПОМЕСТИТЬ ИдентификаторыГруппАналогов
	|ИЗ
	|	ТоварыДополненная КАК Т"
	);
	// Представляем исходные занные в виде Группа аналогов, количество
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Ид.Идентификатор КАК ИдентификаторГруппыАналогов,
	|	Т.Размер КАК Размер,
	|	Т.Количество КАК Количество,
	// A2105505-2636
	|	Т.Номенклатура КАК Номенклатура
	// A2105505-2636
	|ПОМЕСТИТЬ КоличествоПоГруппамАналогов
	|ИЗ
	|	ТоварыДополненная КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыГруппАналогов КАК Ид
	|		ПО (ВЫБОР
	|				КОГДА Т.ЕстьАналоги
	|					ТОГДА Т.ГруппаАналоговТоваров
	|				ИНАЧЕ Т.ИдентификаторЗаписи
	|			КОНЕЦ = ВЫБОР
	|				КОГДА Ид.ЕстьАналоги
	|					ТОГДА Ид.ГруппаАналоговТоваров
	|				ИНАЧЕ Ид.ИдентификаторЗаписи
	|			КОНЕЦ)"
	);

	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ТоварыДополненная");
	
	// Выбираем данные по максимальному количеству в группе аналогов
	// Если есть совпадение по количеству то берем любое
	ТекстыЗапроса.Добавить(
    "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ИдентификаторГруппыАналогов КАК ИдентификаторГруппыАналогов,
	|	Т.Размер КАК Размер,
	|	Т.Количество КАК Количество,
	// A2105505-2636
	|	Т.Номенклатура КАК Номенклатура
	// A2105505-2636
	|ПОМЕСТИТЬ ДанныеКОбработке
	|ИЗ
	|	КоличествоПоГруппамАналогов КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Т.ИдентификаторГруппыАналогов КАК ИдентификаторГруппыАналогов,
	|			Т.Размер КАК Размер,
	|			МАКСИМУМ(Т.Количество) КАК Количество
	|		ИЗ
	|			КоличествоПоГруппамАналогов КАК Т
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.ИдентификаторГруппыАналогов,
	|			Т.Размер) КАК Макс
	|		ПО Т.ИдентификаторГруппыАналогов = Макс.ИдентификаторГруппыАналогов
	|			И Т.Размер = Макс.Размер
	|			И Т.Количество = Макс.Количество"
	);
	
	// Готовим таблицу аналогов с приоритетом
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Идентификатор КАК ИдентификаторГруппыАналогов,
	|	ЕСТЬNULL(ГА.Номенклатура, Т.Номенклатура) КАК Номенклатура,
	|	Д.Размер КАК Размер,
	// << 16.07.2024 Вдовенко С.А., КРОК, A2105505-2678
	// 100 выбрано как максимально низкий приоритет, т.к. у измерения размерность -  2 знака
	//|	ЕСТЬNULL(ГА.Номенклатура.КоллекцияНоменклатуры.Код, Т.Номенклатура.КоллекцияНоменклатуры.Код) КАК Приоритет
	|	ЕСТЬNULL(ГА.Приоритет, 100) КАК Приоритет
	// >> 16.07.2024 Вдовенко С.А., КРОК, A2105505-2678
	|ПОМЕСТИТЬ Аналоги
	|ИЗ
	|	ИдентификаторыГруппАналогов КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеКОбработке КАК Д
	|		ПО Т.Идентификатор = Д.ИдентификаторГруппыАналогов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КР_СоставГруппАналоговТоваров КАК ГА
	|		ПО Т.ГруппаАналоговТоваров = ГА.ГруппаАналоговТоваров"
	);

	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ИдентификаторыГруппАналогов");
	
	// Выбираем остатки по группам аналогов со склада отправителя, 
	//	группируем их
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	А.ИдентификаторГруппыАналогов КАК ИдентификаторГруппыАналогов,
	// A2105505-2636
	|	А.Номенклатура КАК Номенклатура,
	// A2105505-2636
	|	А.Размер КАК Размер,
	|	Т.ВНаличииОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиПолучателяДетально
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, Склад = &СкладПолучатель) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналоги КАК А
	|		ПО Т.Номенклатура = А.Номенклатура
	|			И Т.Характеристика.КР_Размер = А.Размер
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	А.ИдентификаторГруппыАналогов,
	// A2105505-2636
	|	А.Номенклатура,
	// A2105505-2636
	|	А.Размер,
	|	-Т.КОтгрузкеОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(&Период, Склад = &СкладПолучатель) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналоги КАК А
	|		ПО Т.Номенклатура = А.Номенклатура
	|			И Т.Характеристика.КР_Размер = А.Размер
	|ГДЕ
	|	Т.КОтгрузкеОстаток > 0
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	А.ИдентификаторГруппыАналогов,
	// A2105505-2636
	|	А.Номенклатура,
	// A2105505-2636
	|	А.Размер,
	// A2105505-2636
	|	Т.КОформлениюПоступленийПоРаспоряжениюОстаток
	// A2105505-2636
	//|	-Т.КОформлениюПоступленийПоРаспоряжениюОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(&Период, Склад = &СкладПолучатель) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналоги КАК А
	|		ПО Т.Номенклатура = А.Номенклатура
	|			И Т.Характеристика.КР_Размер = А.Размер
	|ГДЕ
	|	Т.КОформлениюПоступленийПоРаспоряжениюОстаток > 0
	|;
    | 
	// A2105505-2636
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИдентификаторГруппыАналогов КАК ИдентификаторГруппыАналогов,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Размер КАК Размер,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ ОстаткиПолучателяСводно
	|ИЗ
	|	ОстаткиПолучателяДетально КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ИдентификаторГруппыАналогов,
	|	Т.Номенклатура,
	|	Т.Размер
	|
	|ИМЕЮЩИЕ
	|	СУММА(Т.Количество) > 0
	|;
    |
	// A2105505-2636
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИдентификаторГруппыАналогов КАК ИдентификаторГруппыАналогов,
	|	Т.Размер КАК Размер,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ ОстаткиПолучателя
	|ИЗ
	|	ОстаткиПолучателяДетально КАК Т
    |
	|СГРУППИРОВАТЬ ПО
	|	Т.ИдентификаторГруппыАналогов,
	|	Т.Размер
    |
	|ИМЕЮЩИЕ
	|	СУММА(Т.Количество) > 0
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиПолучателяДетально"
	); 
	
	// A2105505-2636
	// Вычисляем потребность по номенклатуре с учетом остатков на получателе
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Т.ИдентификаторГруппыАналогов КАК ИдентификаторГруппыАналогов,
	|	Т.Размер КАК Размер,
	|	Т.Количество + ЕСТЬNULL(О.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ ПромежуточныеИтоги
	|ИЗ
	|	ДанныеКОбработке КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПолучателяСводно КАК О
	|		ПО Т.ИдентификаторГруппыАналогов = О.ИдентификаторГруппыАналогов
	|			И Т.Размер = О.Размер
	|			И Т.Номенклатура = О.Номенклатура"
	);
	// A2105505-2636  
	
	// Вычисляем потребность по группе с учетом остатков на получателе
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Т.ИдентификаторГруппыАналогов КАК ИдентификаторГруппыАналогов,
	|	Т.Размер КАК Размер,
	|	Т.Количество - ЕСТЬNULL(О.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ Потребность
	|ИЗ 
	// A2105505-2636  
	|	ПромежуточныеИтоги КАК Т
	// A2105505-2636  
	//|	ДанныеКОбработке КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПолучателя КАК О
	|		ПО Т.ИдентификаторГруппыАналогов = О.ИдентификаторГруппыАналогов
	|			И Т.Размер = О.Размер
	|ГДЕ
	|	Т.Количество - ЕСТЬNULL(О.Количество, 0) > 0"
	);

	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ДанныеКОбработке");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ОстаткиПолучателя");
	
	// A2105505-2636  
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ПромежуточныеИтоги"); 
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ОстаткиПолучателяСводно"); 
	// A2105505-2636  
	
	// Выбираем остатки по группам аналогов на складе отправителе, гуппируем
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	А.ИдентификаторГруппыАналогов КАК ИдентификаторГруппыАналогов,
	|	А.Размер КАК Размер,
	|	А.Приоритет КАК Приоритет,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.ВНаличииОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиОтправителяДетально
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, Склад = &СкладОтправитель) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналоги КАК А
	|		ПО Т.Номенклатура = А.Номенклатура
	|			И Т.Характеристика.КР_Размер = А.Размер
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	А.ИдентификаторГруппыАналогов,
	|	А.Размер,
	|	А.Приоритет,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	-Т.КОтгрузкеОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(&Период, Склад = &СкладОтправитель) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналоги КАК А
	|		ПО Т.Номенклатура = А.Номенклатура
	|			И Т.Характеристика.КР_Размер = А.Размер
	|ГДЕ
	|	Т.КОтгрузкеОстаток > 0
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИдентификаторГруппыАналогов КАК ИдентификаторГруппыАналогов,
	|	Т.Размер КАК Размер,
	|	Т.Приоритет КАК Приоритет,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ ОстаткиОтправителя
	|ИЗ
	|	ОстаткиОтправителяДетально КАК Т
    |
	|СГРУППИРОВАТЬ ПО
	|	Т.ИдентификаторГруппыАналогов,
	|	Т.Размер,
	|	Т.Приоритет,
	|	Т.Номенклатура,
	|	Т.Характеристика
    |
	|ИМЕЮЩИЕ
	|	СУММА(Т.Количество) > 0
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиОтправителяДетально"
	);
	
	// Получаем итоговую таблицу товаров к отгрузке с учетом приоритетов и наличия на отправителе
	//	(выполняем распределение)
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Т.ИдентификаторГруппыАналогов КАК ИдентификаторГруппыАналогов,
	|	Т.Размер КАК Размер,
	|	Т.Приоритет КАК Приоритет,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	МАКСИМУМ(Т.Количество) КАК Количество,
	|	МАКСИМУМ(Т.Количество) + СУММА(ЕСТЬNULL(Т1.Количество, 0)) КАК ИтогКоличество
	|ПОМЕСТИТЬ ОстатокСИтогами
	|ИЗ
	|	ОстаткиОтправителя КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиОтправителя КАК Т1
	|		ПО Т.ИдентификаторГруппыАналогов = Т1.ИдентификаторГруппыАналогов
	|			И Т.Размер = Т1.Размер
	|			И Т.Приоритет > Т1.Приоритет
    |
	|СГРУППИРОВАТЬ ПО
	|	Т.ИдентификаторГруппыАналогов,
	|	Т.Размер,
	|	Т.Приоритет,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	О.Номенклатура КАК Номенклатура,
	|	О.Характеристика КАК Характеристика,
	|	О.Количество - ВЫБОР
	|		КОГДА Т.Количество < ЕСТЬNULL(О.ИтогКоличество, 0)
	|			ТОГДА ЕСТЬNULL(О.ИтогКоличество, 0) - Т.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Потребность КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстатокСИтогами КАК О
	|		ПО Т.ИдентификаторГруппыАналогов = О.ИдентификаторГруппыАналогов
	|			И Т.Размер = О.Размер
	|ГДЕ
	|	О.Количество - ВЫБОР
	|			КОГДА Т.Количество < ЕСТЬNULL(О.ИтогКоличество, 0)
	|				ТОГДА ЕСТЬNULL(О.ИтогКоличество, 0) - Т.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ > 0"
	);
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ОстаткиОтправителя");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ОстатокСИтогами");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ Потребность");  
	
	Возврат СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции // >> 05.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2516

#КонецОбласти

#КонецОбласти

#КонецЕсли
