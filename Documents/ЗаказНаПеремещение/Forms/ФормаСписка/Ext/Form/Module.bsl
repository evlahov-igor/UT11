
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьТекстЗапросаСписка();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()), Истина);
	
	УстановитьВидимость();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// << 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937
	КР_ПриСозданииНаСервереДополнительно(Отказ, СтандартнаяОбработка);
	// >> 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительности.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительностиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗакрытиеЗаказов" Тогда
		Элементы.Список.Обновить();
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ОбеспечениеВДокументахКлиент.СписокПриИзменении(ЭтотОбъект, "Документ.ЗаказНаПеремещение.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаКлиенте
Процедура СоздатьЗаказНаВнутреннююПередачуТоваров(Команда)
	
	ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами");
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", Новый Структура("ХозяйственнаяОперация", ХозяйственнаяОперация));
	ОткрытьФорму("Документ.ЗаказНаПеремещение.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыт(Команда)
	
	ВыделенныеСсылки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураЗакрытия = Новый Структура;
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения(ВыделенныеСсылки);
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказов);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКВыполнению(Команда)
	
	ВыделенныеСсылки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""К выполнению"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусКВыполнениюЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСсылки", ВыделенныеСсылки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКВыполнениюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСсылки = ДополнительныеПараметры.ВыделенныеСсылки;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        
        Возврат;
        
    КонецЕсли;
    
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСсылки, "КВыполнению");
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСсылки.Количество(),
    НСтр("ru = 'К выполнению'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКОбеспечению(Команда)
	
	ВыделенныеСсылки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""К обеспечению"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусКОбеспечениюЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСсылки", ВыделенныеСсылки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКОбеспечениюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСсылки = ДополнительныеПараметры.ВыделенныеСсылки;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        
        Возврат;
        
    КонецЕсли;
    
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСсылки, "КОбеспечению");
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСсылки.Количество(),
    НСтр("ru = 'К обеспечению'"));

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьТекстЗапросаСписка()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, Список);
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СостоянияВнутреннихЗаказов) Тогда
		
		СвойстваСписка.ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументЗаказНаПеремещение.Ссылка,
		|	ДокументЗаказНаПеремещение.ПометкаУдаления,
		|	ДокументЗаказНаПеремещение.Номер,
		|	ДокументЗаказНаПеремещение.Дата,
		|	ДокументЗаказНаПеремещение.Проведен,
		|	ДокументЗаказНаПеремещение.ДлительностьПеремещения,
		|	ДокументЗаказНаПеремещение.ЖелаемаяДатаПоступления,
		|	ДокументЗаказНаПеремещение.Комментарий,
		|	ДокументЗаказНаПеремещение.МаксимальныйКодСтроки,
		|	ДокументЗаказНаПеремещение.Организация,
		|	ДокументЗаказНаПеремещение.ОрганизацияПолучатель,
		|	ДокументЗаказНаПеремещение.Ответственный,
		|	ДокументЗаказНаПеремещение.Подразделение,
		|	ДокументЗаказНаПеремещение.Сделка,
		|	ДокументЗаказНаПеремещение.СкладОтправитель,
		|	ДокументЗаказНаПеремещение.СкладПолучатель,
		|	ДокументЗаказНаПеремещение.Статус,
		|	ДокументЗаказНаПеремещение.Приоритет,
		|	ДокументЗаказНаПеремещение.ХозяйственнаяОперация,
		|	ДокументЗаказНаПеремещение.Назначение,
		|	ДокументЗаказНаПеремещение.ДокументОснование,
		|	ДокументЗаказНаПеремещение.СостояниеЗаполненияМногооборотнойТары,
		|	ДокументЗаказНаПеремещение.МоментВремени,
		|	ДокументЗаказНаПеремещение.Автор,
		|	ВЫБОР
		|		КОГДА НЕ ДокументЗаказНаПеремещение.Проведен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СостоянияВнутреннихЗаказов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.Закрыт))
		|	КОНЕЦ КАК Состояние,
		|	ЕСТЬNULL(СостоянияВнутреннихЗаказов.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ) КАК ЕстьРасхожденияОрдерНакладная,
		|	ВЫБОР КОГДА СостоянияВнутреннихЗаказов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ГотовКОтгрузке) ТОГДА
		|				СостоянияВнутреннихЗаказов.РезервПревышаетОстатки
		|			ИНАЧЕ
		| 				ЛОЖЬ
		|		КОНЕЦ КАК РезервПревышаетОстатки
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ДокументЗаказНаПеремещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВнутреннихЗаказов КАК СостоянияВнутреннихЗаказов
		|		ПО (СостоянияВнутреннихЗаказов.Заказ = ДокументЗаказНаПеремещение.Ссылка)";
		
	Иначе
		
		СвойстваСписка.ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументЗаказНаПеремещение.Ссылка,
		|	ДокументЗаказНаПеремещение.ПометкаУдаления,
		|	ДокументЗаказНаПеремещение.Номер,
		|	ДокументЗаказНаПеремещение.Дата,
		|	ДокументЗаказНаПеремещение.Проведен,
		|	ДокументЗаказНаПеремещение.ДлительностьПеремещения,
		|	ДокументЗаказНаПеремещение.ЖелаемаяДатаПоступления,
		|	ДокументЗаказНаПеремещение.Комментарий,
		|	ДокументЗаказНаПеремещение.МаксимальныйКодСтроки,
		|	ДокументЗаказНаПеремещение.Организация,
		|	ДокументЗаказНаПеремещение.ОрганизацияПолучатель,
		|	ДокументЗаказНаПеремещение.Ответственный,
		|	ДокументЗаказНаПеремещение.Подразделение,
		|	ДокументЗаказНаПеремещение.Сделка,
		|	ДокументЗаказНаПеремещение.СкладОтправитель,
		|	ДокументЗаказНаПеремещение.СкладПолучатель,
		|	ДокументЗаказНаПеремещение.Статус,
		|	ДокументЗаказНаПеремещение.Приоритет,
		|	ДокументЗаказНаПеремещение.ХозяйственнаяОперация,
		|	ДокументЗаказНаПеремещение.Назначение,
		|	ДокументЗаказНаПеремещение.ДокументОснование,
		|	ДокументЗаказНаПеремещение.СостояниеЗаполненияМногооборотнойТары,
		|	ДокументЗаказНаПеремещение.Автор,
		|	ДокументЗаказНаПеремещение.МоментВремени
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ДокументЗаказНаПеремещение";
		
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ПравоДоступаДобавление = Документы.ЗаказНаПеремещение.ПравоДоступаДобавление();
	
	ИспользоватьРасширенноеОбеспечениеПотребностей = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс");
	
	Элементы.ФормаСписокГруппаСоздать.Видимость = ПравоДоступаДобавление
		И (ИспользоватьРасширенноеОбеспечениеПотребностей Или ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс);
	Если Элементы.ФормаСписокГруппаСоздать.Видимость Тогда
		Элементы.ФормаСоздать.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаСоздать.Видимость = ПравоДоступаДобавление И ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс;
	Если Элементы.ГруппаСоздать.Видимость Тогда
		Элементы.СписокСоздать.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьСтатусы = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПеремещение);
	Элементы.ГруппаУстановитьСтатус.Видимость = ИспользоватьСтатусы;
	
	Если ИспользоватьСтатусы Тогда
		ИспользоватьСтатусЗакрыт = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки");
		Элементы.УстановитьСтатусЗакрыт.Видимость = ИспользоватьСтатусЗакрыт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам()
	ОбеспечениеВДокументахКлиент.ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

#КонецОбласти

#Область Производительность

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПеремещение.ФормаСписка.Элемент.Список.Выбор");
	
КонецПроцедуры

#КонецОбласти

#Область КР_ДобавленныеПроцедурыИФункции

#Область КР_ДобавленныеОбработчикиСобытий

// << 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937
&НаСервере
Процедура КР_ПриСозданииНаСервереДополнительно(Отказ, СтандартнаяОбработка)
	
	#Область КР_ДобавлениеРеквизитовФормы           
	
	Если КР_НастроитьСписок() Тогда
		КР_КонтейнерЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
			ЭтотОбъект, "Список.КР_Контейнер", Элементы.Список, Элементы.Статус);
		КР_РаспределениеСетамиЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
			ЭтотОбъект, "Список.КР_РаспределениеСетами", Элементы.Список, Элементы.Статус);
		КР_ОтложенноеРаспределениеЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
			ЭтотОбъект, "Список.КР_ОтложенноеРаспределение", Элементы.Список);
		КР_СпецраспределениеЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
			ЭтотОбъект, "Список.КР_Спецраспределение", Элементы.Список);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры // >> 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937

#КонецОбласти

#Область КР_Прочее

// << 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937
&НаСервере
Функция КР_НастроитьСписок()
	
	ТекстПоиска = "ДокументЗаказНаПеремещение.Ссылка,";
	ТекстЗамены = "ДокументЗаказНаПеремещение.Ссылка," +
		Символы.ПС + Символы.Таб + "ДокументЗаказНаПеремещение.КР_Контейнер," +
		// << 15.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1015
		Символы.ПС + Символы.Таб + "ДокументЗаказНаПеремещение.КР_ОтложенноеРаспределение," +
		// >> 15.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1015
		// << 15.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1146
		Символы.ПС + Символы.Таб + "ДокументЗаказНаПеремещение.КР_Спецраспределение," +
		// >> 15.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1146
		Символы.ПС + Символы.Таб + "ДокументЗаказНаПеремещение.КР_РаспределениеСетами,";
	ТекстЗапросаДинСписка = Список.ТекстЗапроса;
		
	Если СтрНайти(ТекстЗапросаДинСписка, ТекстПоиска) Тогда
		ТекстЗапросаДинСписка = СтрЗаменить(ТекстЗапросаДинСписка, ТекстПоиска, ТекстЗамены);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Список.ТекстЗапроса = ТекстЗапросаДинСписка;
	
	Возврат Истина;
	
КонецФункции // >> 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937

#КонецОбласти

#КонецОбласти