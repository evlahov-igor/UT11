
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

&НаКлиенте
Перем ФормаМодифицирована; // используется для отработки события изменения модифицированности формы

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПараметрыВстраивания = Документы.ЗаказНаПеремещение.ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриСозданииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Элементы.ГруппаОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	Элементы.ЗакрытьЗаказ.Доступность = ПравоДоступа("Изменение",Метаданные.Документы.ЗаказНаПеремещение);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС1);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо1);
	
	// Установка списка доступных статусов
	Перечисления.СтатусыВнутреннихЗаказов.ЗаполнитьСписокВыбора(Элементы.Статус.СписокВыбора, 
		ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки") 
		ИЛИ Объект.Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.СервисДоставки
	СервисДоставки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ЭлектронноеВзаимодействие.СервисДоставки
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// << 16.05.2023 Федотов А.М., КРОК, Jira№A2105505-1657
	КР_ПриСозданииНаСервереДополнительно(Отказ, СтандартнаяОбработка);
	// >> 16.05.2023 Федотов А.М., КРОК, Jira№A2105505-1657
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительности.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	// << 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	КР_ПриЧтенииСозданииНаСервереДополнительно();
	// >> 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаПеремещение));
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	УстановитьВидимостьОбеспечения();
	УстановитьПараметрыВыбораОрганизации();
	УправлениеЭлементамиФормы();
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы,Объект);
	
	КонтролироватьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(Объект.СкладПолучатель, Объект.Дата);
	
	УстановитьВидимостьЭлементовИспользованияДлительности();
	
	ДлительностьПеремещения = Объект.ДлительностьПеремещения;
	
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтотОбъект);
	
	АктуализироватьПеремещениеПодДеятельность(Ложь);
	
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииМодифицированностиФормы", 1);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// << 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	КР_ПриОткрытииДополнительно(Отказ);
	// >> 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительностиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПеремещение.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспеченияЗаказов.Форма.Форма" Тогда
		
		АдресТаблицыДвижений = ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
			ВыбранноеЗначение.КодДействия,
			ВыбранноеЗначение.АдресАналитик,
			ВыбранноеЗначение.ПараметрыЗаполнения);
			
		// Возврат управления в форму обработки состояния обеспечения.
		ВыполнитьОбработкуОповещения(ВыбранноеЗначение.ВыполняемоеОповещение, АдресТаблицыДвижений);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		РезультатОтмены = СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк'"), , РезультатОтмены.Оповещение);
		
	// << 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
	// Реализован новый механизм подбора
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.КР_ФормаПодбораКоробов" Тогда
		КР_ОбработкаВыбораПодборКоробовНаКлиенте(ВыбранноеЗначение);	
	// >> 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
		
	КонецЕсли;
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	КР_РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	// >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПараметрыВстраивания = Документы.ЗаказНаПеремещение.ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтаФорма,
			"Товары",
			"Номенклатура,Характеристика,Количество,,НачалоОтгрузки",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	
	ОбеспечениеВДокументахСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	УстановитьВидимостьОбеспечения();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
	// Требуются дополнительные проверки
	КР_УстановитьВидимостиДоступностиНаСервере();
	// >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ФормаМодифицирована = Неопределено;
	Подключаемый_ПриИзмененииМодифицированностиФормы();
	
	ОповеститьОПроведенииДокумента(ПараметрыЗаписи);
	ОбеспечениеВДокументахКлиент.ПослеЗаписи(ЭтотОбъект, "Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов");
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// << 08.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	КР_ПослеЗаписиДополнительно();
	// >> 08.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	АктуализироватьПеремещениеПодДеятельность();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	СкладОтправительПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ТекущаяОрганизация <> Объект.Организация
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель)
		И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами") Тогда
		
		ОрганизацияПриИзмененииСервер();
		ТекущаяОрганизация = Объект.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	СкладПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДлительностьПеремещенияПриИзменении(Элемент)
	
	Если Объект.ИспользоватьДлительностьПеремещения Тогда
		Объект.ДлительностьПеремещения = ДлительностьПеремещения;
	Иначе
		ДлительностьПеремещения = Объект.ДлительностьПеремещения;
		Объект.ДлительностьПеремещения = 0;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовИспользованияДлительности();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
			И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияПроблемаНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияОтгружаетсяНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ДекорацияСервисДоставкиСоздатьНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.СервисДоставки
	СервисДоставкиКлиентПереопределяемый.ОткрытьФормуНовогоЗаказаНаДоставку(ЭтаФорма);
	// Конец ЭлектронноеВзаимодействие.СервисДоставки
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСервисДоставкиСписокЗаказовНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.СервисДоставки
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	СервисДоставкиКлиент.ОткрытьФормуСпискаЗаказовНаДоставку(ПараметрыФормы);
	// Конец ЭлектронноеВзаимодействие.СервисДоставки
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСервисДоставкиДобавитьВЗаказНаДоставкуНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.СервисДоставки
	ПараметрыОткрытия = Новый Структура();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОткрытия.Вставить("ДокументОснование", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("ОбработкаВыбора", "ДобавитьДокументОснованиеВВыбранныйЗаказНаДоставку");
	КонецЕсли;
	
	СервисДоставкиКлиент.ОткрытьФормуСпискаЗаказовНаДоставку(ПараметрыОткрытия);
	// Конец ЭлектронноеВзаимодействие.СервисДоставки
	
КонецПроцедуры

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ДоставкаТоваровКлиентСервер.ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ДоставкаТоваровКлиентСервер.ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОчиститьПредставлениеАдреса(
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ДоставкаТоваровКлиентСервер.ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
		Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказНаПеремещение.Форма.ФормаДокумента.Элементы.Товары.Выбор");
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыДоступно И Не ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Неопределено);
		
		Если ПараметрыФормы <> Неопределено Тогда
			ОткрытьФорму("Обработка.ЗапросКоличестваИСерий.Форма", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	     
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
	ПараметрыПроверкиСерий.Склад = Новый Структура("Отправитель, Получатель", Объект.СкладОтправитель, Объект.СкладПолучатель);
	ПараметрыПроверкиСерий.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	Если КонтролироватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.СкладПолучатель;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления), Объект.ЖелаемаяДатаПоступления, Объект.Дата);
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина-получателя. Заказывать его не рекомендуется.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныЗакупки";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Истина;
		
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	КонецЕсли;

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	КР_РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	// >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Товары, ЭтотОбъект);
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,Доступно,СкладОбязателен,ДатаОтгрузкиОбязательна");
		ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
		ПараметрыПроверкиСерий.Склад = Новый Структура("Отправитель, Получатель", Объект.СкладОтправитель, Объект.СкладПолучатель);
		ПараметрыПроверкиСерий.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Товары.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	КР_РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	// >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	ОбновитьКолонкуДоступноСервер();
	// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	КР_РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	// >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)

	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
	ПараметрыПроверкиСерий.Склад = Новый Структура("Отправитель, Получатель", Объект.СкладОтправитель, Объект.СкладПолучатель);
	ПараметрыПроверкиСерий.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);

	// << 28.11.2022,  Федоров Д.Е.,  КРОК,  Jira№A2105505-933
	КР_РаботаСКоробамиКлиент.ТоварыОтмененоПриИзменении(ЭтотОбъект, ТекущаяСтрока.КР_Короб, ТекущаяСтрока.Отменено);
	// >> 28.11.2022,  Федоров Д.Е.,  КРОК,  Jira№A2105505-933

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВариантОбеспеченияПриИзменении(Элемент)
	
	ВариантОбеспеченияВыбранноеЗначение = ОбеспечениеВДокументахКлиент.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		Элементы.Товары.ТекущиеДанные);
	
	Если ВариантОбеспеченияВыбранноеЗначение.ОткрытьФормуВыбораСкладаИСерий Тогда
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия());
		
		Если ПараметрыФормы <> Неопределено Тогда
			
			ПараметрыФормы.ПодборСерий = Истина;
			ПараметрыФормы.ВариантОбеспеченияПоДокументу = ВариантОбеспеченияВыбранноеЗначение.ВариантОбеспечения;
			ОткрытьФорму(
				"Обработка.ЗапросКоличестваИСерий.Форма",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
			
		КонецЕсли;
		
	Иначе
		
		ТоварыВариантОбеспеченияПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВариантОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВариантОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияОбработкаВыбора(
		ЭтотОбъект,
		Элементы.Товары.ТекущиеДанные,
		ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбособленноПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	ОбеспечениеВДокументахКлиент.ОбособленноПриИзменении(СтрокаТаблицы);
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПеремещение.ФормаДокумента.Команда.ЗагрузитьДанныеИзТСД");
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПеремещение.ФормаДокумента.Команда.ПодобратьТовары");
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Отправитель"" не заполнено'"), Объект.Ссылка, "Объект.СкладОтправитель",, Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",                                     Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                   Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                    ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Назначение",                                Объект.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                             Объект.Подразделение);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",                Истина);
	ПараметрыФормы.Вставить("ДоступныеОстаткиПараметрыДокумента",        Неопределено);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ОбновитьКэшНоменклатура");
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Товары) Тогда
		СкопироватьСтрокиНаСервере();
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество,,НачалоОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияДокумента(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#Область Обеспечение

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПеремещение.ФормаДокумента.Команда.СоздатьКорректировкуНазначенияРезервирование");
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Истина);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ОбеспечениеВДокументахКлиент.ОткрытьЗаполнениеКорректировкиНазначения(
			Истина,
			Объект.Ссылка,
			ОписаниеКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПеремещение.ФормаДокумента.Команда.СоздатьКорректировкуНазначенияСнятиеРезерва");
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Ложь);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ОбеспечениеВДокументахКлиент.ОткрытьЗаполнениеКорректировкиНазначения(
			Ложь,
			Объект.Ссылка,
			ОписаниеКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_ОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_НЕОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура КОбеспечению(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ");
	
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьПоМереПоступления(Команда)
	
	ОбеспечениеУстановитьДействие("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬПОМЕРЕПОСТУПЛЕНИЯ");
	
КонецПроцедуры

&НаКлиенте
Процедура НеОбеспечивать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузить(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_ОТГРУЗИТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура Резервировать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура ЗакрытьЗаказ(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЗаказЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказФрагмент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказовКЗакрытию);
	СтруктураЗакрытия.Вставить("ДокументИнициатор",            Объект.Ссылка);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьЗаказФрагмент", ЭтотОбъект);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи",ОписаниеОповещения);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОкончаниеПоступления(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		
		// << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
		// требуются доп проверки при изменении даты отгрузки  
		ОписаниеОповещения = Новый ОписаниеОповещения("КР_ЗаполнитьОкончаниеПоступленияЗавершение", ЭтотОбъект);
		// >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
		     	
		Если Объект.ИспользоватьДлительностьПеремещения Тогда
			ЗаголовокФормыВводаДаты = НСтр("ru = 'Введите дату окончания поступления'");
		Иначе
			ЗаголовокФормыВводаДаты = НСтр("ru = 'Введите дату отгрузки'");
		КонецЕсли;
		ПоказатьВводДаты(ОписаниеОповещения, Объект.ЖелаемаяДатаПоступления, ЗаголовокФормыВводаДаты, ЧастиДаты.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление обеспечения.
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ТоварыНачалоОтгрузки", "Объект.Товары.НачалоОтгрузки", "Объект.Товары.ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "СкладОтправитель", "Объект.СкладОтправитель", "СкладОбязателен");
	
	ОбеспечениеВДокументахСервер.УстановитьУсловноеОформлениеОбособленно(
		УсловноеОформление,
		Элементы.ТоварыОбособленно,
		"Объект.Товары.ВариантОбеспечения",
		"Объект.Товары.ТипНоменклатуры");
		
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиДобавитьОформлениеКолонкиДоступно(ЭтотОбъект);
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//
	
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтотОбъект);
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНачалоОтгрузки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОкончаниеПоступления.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНачалоОтгрузки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОкончаниеПоступления.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОбеспечения.Отгрузить;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");

	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура СкладПолучательПриИзмененииСервер()
	
	КонтролироватьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(Объект.СкладПолучатель, Объект.Дата);
	
	Если КонтролироватьАссортимент Тогда
		АссортиментСервер.ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект, "СкладПолучатель");
	КонецЕсли;
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("СкладПолучатель");
	
	АктуализироватьПеремещениеПодДеятельность();
	
	// << 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	КР_УстановитьВидимостиДоступностиНаСервере();
	// >> 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("ХозяйственнаяОперация");
	
	УстановитьПараметрыВыбораОрганизации();
	Документы.ЗаказНаПеремещение.ПроверитьИОчиститьОрганизацию(Объект, Объект.ОрганизацияПолучатель);
	Документы.ЗаказНаПеремещение.ПроверитьИОчиститьОрганизацию(Объект, Объект.Организация);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	Документы.ЗаказНаПеремещение.ПроверитьИОчиститьОрганизацию(Объект, Объект.ОрганизацияПолучатель);
	АктуализироватьПеремещениеПодДеятельность();
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьПеремещениеПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.Дата = Объект.Дата;
	ПараметрыЗаполнения.Склад = Объект.СкладПолучатель;
	ПараметрыЗаполнения.ДвижениеТоваровНаСкладах = Истина;
	
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ПеремещениеПодДеятельность, 
	    Объект.ПеремещениеПодДеятельность, 
	    ПараметрыЗаполнения, 
	    УчетНДСКэшированныеЗначенияПараметров);
	
	Если Заполнить Тогда
		
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ПеремещениеПодДеятельность, 
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности(ЭтотОбъект);
	
	Объект.ОбосабливатьПоНазначениюЗаказа = Константы.ВариантОбособленияТоваровВПеремещении.Получить()
		<> Перечисления.ВариантыОбособленияТоваровВПеремещении.НазначениеПолучателя;
		
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура СкладОтправительПриИзмененииСервер()
	
	// << 28.11.2022,  Федоров Д.Е.,  КРОК,  Jira№A2105505-933
	Документы.ЗаказНаПеремещение.КР_ОчиститьСтрокиПриИзмененииСклада(Объект.Товары);
	// >> 28.11.2022,  Федоров Д.Е.,  КРОК,  Jira№A2105505-933

	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара,
			"Номенклатура,Характеристика,ХарактеристикиИспользуются,Упаковка,КоличествоУпаковок,ВариантОбеспечения,
			|Обособленно,Серия");
		
		ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
		
		Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
			ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения");
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ТекущаяСтрока.НачалоОтгрузки = ОбеспечениеВДокументахСервер.ДатаОтгрузкиОбработкаВыбораПодбор(
			СтрокаТовара.ДатаОтгрузки,
			ТекущаяСтрока.ВариантОбеспечения,
			Макс(НачалоДня, Объект.ЖелаемаяДатаПоступления - 86400 * Объект.ДлительностьПеремещения));
			
		Если ЗначениеЗаполнено(ТекущаяСтрока.НачалоОтгрузки) Тогда
			
			ТекущаяСтрока.ОкончаниеПоступления = Макс(ТекущаяСтрока.НачалоОтгрузки + 86400 * Объект.ДлительностьПеремещения,
				НачалоДня + 86400 * Объект.ДлительностьПеремещения,
				Объект.ЖелаемаяДатаПоступления);
				
		КонецЕсли;
			
	КонецЦикла;
	
	Если КонтролироватьАссортимент Тогда
		АссортиментСервер.ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект, "СкладПолучатель", ТаблицаТоваров);
	КонецЕсли;
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	ОбновитьКолонкуДоступноСервер();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если Не ШтрихкодированиеНоменклатурыКлиент.ШтрихкодыВалидны(ДанныеШтрихкодов) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	Если КонтролироватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.СкладПолучатель;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления), Объект.ЖелаемаяДатаПоступления, Объект.Дата);
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина-получателя. Заказывать его не рекомендуется.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныЗакупки";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Истина;
		//
		СтруктураДействий.ПараметрыПроверкиАссортимента = СтруктураПроверкиАссортимента;
	КонецЕсли;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
	КонецЕсли;
	
	// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	КР_РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	// >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	
	ДобавитьДействияОбеспеченияНаСервере(
		СтруктураПараметровДействия.СтруктураДействийСДобавленнымиСтроками,
		"ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
	ОбеспечениеВДокументахКлиентСервер.УдалитьДействияОбеспечения(СтруктураПараметровДействия.СтруктураДействийСДобавленнымиСтроками);
	
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий());
	Если ПараметрыФормы <> Неопределено Тогда
		
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаПеремещение));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаказНаПеремещение.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ЭтоПередачаТоваровМеждуОбособленнымиПодразделениями = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами);
	
	Элементы.Организация.Заголовок = ?(ЭтоПередачаТоваровМеждуОбособленнымиПодразделениями,
		НСтр("ru = 'Организация-отправитель'"), НСтр("ru = 'Организация'"));

КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	Колонки = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,НачалоОтгрузки";
	
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, Колонки);
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ОбновитьКолонкуДоступноСервер();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов()
	
	Если ОбеспечениеВДокументахКлиент.НужноОбновитьДоступностьПослеЗаписи(ЭтотОбъект,
		"Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов") Тогда
			
		ОбновитьОбеспечениеПослеЗаписиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспечения(Режим)
	
	ПараметрыФормы = ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения(
		ЭтотОбъект,
		Элементы.Товары.ТекущаяСтрока,
		Режим);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий(Режим)
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.Поля.Склад = "Объект.СкладОтправитель";
	ПараметрыПроверки.Тексты.Склад = НСтр("ru = 'Поле ""Склад-отправитель"" не заполнено'");
	
	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
				Объект,
				Объект.Товары,
				Элементы.Товары.ТекущаяСтрока,
				ПараметрыПроверки,
				Объект.СкладОтправитель,
				Режим) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(Режим);
	ПараметрыФормы.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ТоварыВариантОбеспеченияПриИзмененииНаСервере()
	
	Изменения = ОбеспечениеВДокументахСервер.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		Элементы.Товары.ТекущаяСтрока);
		
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействияНепосредственно();
	ПослеЗаполненияОбеспечения(Изменения, Режим, Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(КодДействия, АдресАналитик, ПараметрыЗаполнения)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
		КодДействия,
		АдресАналитик,
		ЭтотОбъект);
	
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимСостоянияОбеспечения();
	ПослеЗаполненияОбеспечения(Изменения, Режим, ПараметрыЗаполнения);
	АдресТаблицыДвижений = АдресТаблицыДвиженийВХранилище();
	Возврат АдресТаблицыДвижений;
	
КонецФункции

&НаСервере
Функция АдресТаблицыДвиженийВХранилище()
	
	Возврат ОбеспечениеВДокументахСервер.АдресТаблицыДвиженийВХранилище(ЭтотОбъект);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДокументаДляДействийОбеспечения(Форма)
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("Форма",                              Форма);
	ПараметрыДокумента.Вставить("Коллекция",                          Форма.Объект.Товары);
	ПараметрыДокумента.Вставить("ВариантОбеспеченияИФлагОбособленно", Неопределено);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияНажатиеОбщий()
	
	ПараметрыФормы = ОбеспечениеВДокументахКлиент.ГиперссылкаСостояниеОбеспеченияНажатие(ЭтотОбъект);
	
	Если ПараметрыФормы.КонтекстИспользования = "ТАБЛИЦА" Тогда
		
		ПараметрыФормы.АдресТаблицыДвижений = АдресТаблицыДвиженийВХранилище();
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, ПоляСтрокой)
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект);
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, ПоляСтрокой)
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект);
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормыДокумента()
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект);
	ОбеспечениеВДокументахСервер.ЗаполнитьСлужебныеРеквизитыФормыДокумента(ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Функция ОбеспечениеУстановитьДействие(КодДействия)
	
	// << 19.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
	КР_РаботаСКоробамиСервер.ДополнитьВыделенныеСтрокиКоробами(ЭтотОбъект);	
	// >> 19.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
	
	Результат = ОбеспечениеВДокументахСервер.ОбеспечениеУстановитьДействиеСтруктураРезультата();
	
	Если КодДействия = "ФЛАГ_ОБОСОБЛЕННО" Или КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" Тогда
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействиеОбособленно(
			КодДействия,
			ЭтотОбъект,
			Элементы.Товары.ВыделенныеСтроки);
			
		ОбновитьКолонкуДоступноСервер();
		
	Иначе
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействие(
			КодДействия,
			ЭтотОбъект,
			Элементы.Товары.ВыделенныеСтроки);
			
		ЗаполнитьЗначенияСвойств(Результат, Изменения);
		
		Если Изменения.ТаблицаИзменений <> Неопределено Тогда
			ПослеЗаполненияОбеспечения(
				Изменения.ТаблицаИзменений,
				ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
				Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбеспечениеУстановитьДействиеСВопросом(КодДействия)
	
	Результат = ОбеспечениеУстановитьДействие(КодДействия);
	
	ОбеспечениеВДокументахКлиент.ПоказатьВопросЗаполнятьОбеспечениеЦелымиУпаковками(
		ЭтотОбъект,
		Объект.Товары,
		Результат,
		"ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками");
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками(Ответ, Результат) Экспорт
	
	ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат)
	
	СтруктураРезультата = ОбеспечениеВДокументахСервер.УстановитьДействиеПослеВопроса(Ответ, Результат, ЭтотОбъект);
	ПослеЗаполненияОбеспечения(
		СтруктураРезультата.ТаблицаИзменений,
		ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
		СтруктураРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииМодифицированностиФормы()
	
	Если ФормаМодифицирована <> Модифицированность Тогда
		
		ФормаМодифицирована = Модифицированность;
		ОбеспечениеВДокументахКлиент.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияОбеспечения(Изменения, Режим = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	Документы.ЗаказНаПеремещение.ПослеЗаполненияОбеспечения(Объект, Изменения, Режим, ПараметрыЗаполнения);
	
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для Каждого Изменение Из Изменения Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Изменение.Строка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкуДоступноСервер()
	
	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбеспечениеПослеЗаписиНаСервере()
	
	ОбеспечениеВДокументахСервер.ОбновитьДоступностьПослеЗаписи(ЭтотОбъект);
	ОбеспечениеВДокументахСервер.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерии(ВыбранноеЗначение, ПараметрыФормы) Экспорт
	
	Если Не ОбеспечениеВДокументахКлиент.ЕстьПодобранныеТовары(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = ОбработатьВыборСкладаИСерииНаСервере(ВыбранноеЗначение, ПараметрыФормы);
	ТекстОповещения = ОбеспечениеВДокументахКлиент.ТекстОповещенияОбработкиВыборСкладаИСерии(ПараметрыФормы.Режим);
	ПоказатьОповещениеПользователя(ТекстОповещения, , Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыборСкладаИСерииНаСервере(ВыбранноеЗначение, ПараметрыФормы)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ПриВыбореСклада(
		ВыбранноеЗначение,
		ЭтотОбъект,
		Элементы.Товары.ТекущаяСтрока,
		ПараметрыФормы.ЗаполняемыеПоля);
		
	ПослеЗаполненияОбеспечения(Изменения, ПараметрыФормы.Режим);
	ТекстОбработаноСтрок = ОбеспечениеВДокументахСервер.ТекстОбработаноСтрок(Изменения.Количество());
	Возврат ТекстОбработаноСтрок;
	
КонецФункции

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	ЕстьПраво = ОбеспечениеВДокументахСервер.ЕстьПравоПросмотраГиперссылкиСостоянияОбеспечения();
	Элементы.СтраницыГиперссылкаСостояниеОбеспечения.Видимость = ЕстьПраво;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.ТоварыСоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.ТоварыСоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийДобавленныеСтроки = Новый Структура;
	СтруктураДействийДобавленныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействийДобавленныеСтроки, "ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика,,НачалоОтгрузки",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОкончаниеПоступленияЗавершение(Дата, ДополнительныеПараметры) Экспорт
	
	Если Дата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьОкончаниеПоступленияНаСервере(Дата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОкончаниеПоступленияНаСервере(ОкончаниеПоступления)
	
	ДлительностьПеремещения = Объект.ДлительностьПеремещения * 86400;
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		СтрокаТЧ.НачалоОтгрузки = ОкончаниеПоступления - ДлительностьПеремещения;
		СтрокаТЧ.ОкончаниеПоступления = ОкончаниеПоступления;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОПроведенииДокумента(ПараметрыЗаписи)

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимЗаписи",      ПараметрыЗаписи.РежимЗаписи);
	ПараметрыОповещения.Вставить("ЕстьРаспоряжение", Истина);

	Оповестить("Запись_ЗаказНаПеремещение", ПараметрыОповещения, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОрганизации()
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоВзаимосвязанные"));
	КонецЕсли;
	
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

#Область ОтменаСтрок

&НаКлиенте
Процедура ОтменитьНеотработанные(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПеремещение.ФормаДокумента.Команда.ОтменитьНеотработанные");
	
	РезультатОтмены = ОтменитьНеотработанныеСервер();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк'"), , РезультатОтмены.Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ОтменитьНеотработанныеСервер()
	
	СтруктураКорректировкиСтрокЗаказа = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	СтруктураКорректировкиСтрокЗаказа.ОтменитьНеотработанныеСтроки = Истина;
	
	Возврат СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
	
КонецФункции

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПеремещение.ФормаДокумента.Команда.ОтменитьВыделенныеСтроки");
	
	ОтменитьВыделенныеСтрокиСервер();
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена выделенных строк'"), , НСтр("ru = 'Выделенные строки отменены'"));

	// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	КР_РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	// >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыделенныеСтрокиСервер()
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
	КэшированныеЗначения = Неопределено;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		Строка = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		Строка.Отменено = Истина;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ОбновитьКолонкуДоступноСервер();
	
	// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	КР_РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	// >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Функция СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров)
	
	ЗаказОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураДополнительныхПараметров.ПроверятьОстатки =
		ЗаказОбъект.Статус <> Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению;
	
	СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров);
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		ЗаказОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ЗаказОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	ОбновитьКолонкуДоступноСервер();
	
	Модифицированность = Истина;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ОчиститьСообщения();	
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	Если Не Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	// Если документ записан впервые, в ОбъектыОснований находится пустая ссылка, нужно актуализировать.
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ДополнительныеПараметры.ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	
	ОбеспечениеВДокументахКлиент.ОткрытьЗаполнениеКорректировкиНазначения(
		ДополнительныеПараметры.Резервирование,
		Объект.Ссылка,
		ДополнительныеПараметры.ОписаниеКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовИспользованияДлительности()
	
	Если Объект.ИспользоватьДлительностьПеремещения Тогда
		Элементы.ТоварыНачалоОтгрузки.Заголовок = НСтр("ru='Начало отгрузки'");
	Иначе
		Элементы.ТоварыНачалоОтгрузки.Заголовок = НСтр("ru='Дата отгрузки'");
	КонецЕсли;
	
	Элементы.ДлительностьПеремещения.ТолькоПросмотр = Не Объект.ИспользоватьДлительностьПеремещения;
	Элементы.ТоварыОкончаниеПоступления.Видимость = Объект.ИспользоватьДлительностьПеремещения;
	
	Элементы.ЗаполнитьОкончаниеПоступления.Заголовок = ?(Объект.ИспользоватьДлительностьПеремещения,
		НСтр("ru = 'Заполнить окончание поступления'"),
		НСтр("ru = 'Заполнить дату отгрузки'"));
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область КР_ДобавленныеПроцедурыИФункции

#Область КР_ДобавленныеОбработчикиСобытий

// << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377
// Установка доступности колонок ТЧ в зависимости от содержимого  
// Элемент - Элемент формы
//
&НаКлиенте
Процедура КР_ТоварыПриАктивизацииСтроки(Элемент)
	
	КР_РаботаСКоробамиКлиент.ТоварыПриАктивизацииСтроки(Элемент, ЭтотОбъект);	 
	   
КонецПроцедуры // >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377

// << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377
// Требуется ограничить возможности редактирования ТЧ от заполненности в строке Короба
// Элемент - Элемент формы
//
&НаКлиенте
Процедура КР_ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	КР_РаботаСКоробамиКлиент.ТоварыПередНачаломДобавленияДополнительно(ЭтотОбъект, Элемент, Отказ,
																			Копирование, Родитель, Группа);
	
КонецПроцедуры // >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377

// << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377
// Требуется ограничить возможности редактирования ТЧ от заполненности в строке Короба 
// Элемент - Элемент формы 
// Отказ - Булево
//
&НаКлиенте
Процедура КР_ТоварыПередУдалением(Элемент, Отказ)
	
	КР_РаботаСКоробамиКлиент.ТоварыПередУдалениемДополнительно(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры // >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377

// << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377
// Требуется в строках с коробом менять дату сразу по всем  строкам с текущим коробом 
// Элемент - Элемент формы
//
&НаКлиенте
Процедура КР_ТоварыНачалоОтгрузкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтрокаКороба = ЗначениеЗаполнено(ТекущиеДанные.КР_Короб);
	
	Если ЭтоСтрокаКороба Тогда
		ТекущийКороб = ТекущиеДанные.КР_Короб;
		ОписаниеОповещения = Новый ОписаниеОповещения("КР_ПослеПодтвержденияИзмененияДатыОтгрузкиКороба", ЭтотОбъект,
				Новый Структура("Короб, НачалоОтгрузки", ТекущийКороб, ТекущиеДанные.НачалоОтгрузки));
		ТекстВопроса = НСтр("ru = 'Новая дата будет установлена по всем строкам Короба.
						           |Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры // >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377

#КонецОбласти 

#Область злОбработчикиКомандФормы

// --> Евлахов Игорь Николаевич (Начало) 05.02.2024
// Задача #3617
&НаКлиенте
Процедура Подключаемый_ПоискПоСпискуШтрихкодовВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкодаСписком(Оповещение);	
	
КонецПроцедуры
// <-- Евлахов Игорь Николаевич (Конец) 05.02.2024

#КонецОбласти

// << 16.05.2023 Федотов А.М., КРОК, Jira№A2105505-1657
Процедура КР_ПриСозданииНаСервереДополнительно(Отказ, СтандартнаяОбработка)
	КР_ДополнительныеДействияВМагазине.ПроверитьЗаблокироватьФормуДокументаВМагазине(ЭтотОбъект, "СкладПолучатель");
КонецПроцедуры

// << 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
// Вызывается после всего типового кода Стандартного события ПриСозданииНаСервере, для модификации реквизитов  
&НаСервере
Процедура КР_ПриЧтенииСозданииНаСервереДополнительно()

	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	#Область злДобавлениеКомандФормы
	
	// --> Евлахов Игорь Николаевич (Начало) 05.02.2024
	// Задача #3617
	ИмяКоманды 	= "злКомандаПоискПоСпискуШтрихкодов";
	ЗаголовокПоискПоСпискуШтрихкодов 	= НСтр("ru = 'Найти товары по списку штрихкодов'");
	ДействиеПоискПоСпискуШтрихкодов 	= "Подключаемый_ПоискПоСпискуШтрихкодовВыполнить";
	
	КомандаПоискПоСпискуШтрихкодов = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект, 
																					ИмяКоманды, 
																					ЗаголовокПоискПоСпискуШтрихкодов, 
																					ДействиеПоискПоСпискуШтрихкодов);
	
	КомандаПоискПоСпискуШтрихкодов.Картинка	= БиблиотекаКартинок.СоздатьШтрихкод;
	КомандаПоискПоСпискуШтрихкодов.Отображение = ОтображениеКнопки.Картинка;
	КомандаПоискПоСпискуШтрихкодов.ИзменяетСохраняемыеДанные = Истина;
	КомандаПоискПоСпискуШтрихкодов.Подсказка = ЗаголовокПоискПоСпискуШтрихкодов;
	КомандаПоискПоСпискуШтрихкодов.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F8);
	// <-- Евлахов Игорь Николаевич (Конец) 05.02.2024
	
	#КонецОбласти
			
	#Область КР_ДобавлениеРеквизитовФормы           
			
	КР_РаботаСКоробамиСервер.ПриСозданииНаСервере(ЭтотОбъект, Ложь, Ложь);
		
	КР_ПодобратьКоробаКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ПодобратьКороба", НСтр("ru = 'Подобрать короба'"));
	КР_ПодобратьКоробаЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_ПодобратьКоробаКоманда, Элементы.ГруппаЗаполнить);
	КР_ПодобратьКоробаЭлемент.Картинка = БиблиотекаКартинок.ПодобратьТовары;
	
	// << 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	КР_СкладEsolutions = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(
		ЭтотОбъект, "КР_СкладEsolutions", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ЭтотОбъект.КР_СкладEsolutions = КР_ДополнительныеНастройкиПовтИсп.СкладEsolutions();
	
	КР_СтатусEsolutionsРеквизит = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(
		ЭтотОбъект, "КР_СтатусEsolutions", Новый ОписаниеТипов(
			"ПеречислениеСсылка.КР_СтатусыАнонсаПоставкиДляСистемыEsolutions"), , НСтр("ru = 'Статус eSolutions'"));
	КР_СтатусEsolutionsЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_СтатусEsolutionsРеквизит, Элементы.ГруппаСтатусПриоритет);
	КР_СтатусEsolutionsЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	КР_СтатусEsolutionsЭлемент.Гиперссылка = Истина;
	Элементы.КР_СтатусEsolutions.УстановитьДействие("Нажатие", "КР_СтатусEsolutionsНажатие");
	// >> 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	
	// << 08.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	КР_АнонсПоставкиКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_АнонсПоставки", НСтр("ru = 'Анонс поставки'"), "КР_АнонсПоставкиEsolutions");
	КР_АнонсПоставкиЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_АнонсПоставкиКоманда, Элементы.ФормаГруппаКомандыФормы);
	// >> 08.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	
	// << 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937
	КР_ГруппаКонтейнер = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_ГруппаКонтейнер", Элементы.ШапкаЛево);
	КР_ГруппаКонтейнер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	КР_ГруппаКонтейнер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	КР_ГруппаКонтейнер.Отображение = ОтображениеОбычнойГруппы.Нет;
	КР_ГруппаКонтейнер.ОтображатьЗаголовок = Ложь;
	
	КР_КонтейнерЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_Контейнер", КР_ГруппаКонтейнер);
	КР_РаспределениеСетамиЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_РаспределениеСетами", КР_ГруппаКонтейнер);
	КР_РаспределениеСетамиЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	// >> 16.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-937
	
	// << 28.11.2022,  Федоров Д.Е.,  КРОК,  Jira№A2105505-933
	КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(ЭтотОбъект, "КР_ЭтоМассоваяОтменаСтрок", Новый ОписаниеТипов("Булево"));
	// >> 28.11.2022,  Федоров Д.Е.,  КРОК,  Jira№A2105505-933
	
	// << 21.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1146
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_Спецраспределение", КР_ГруппаКонтейнер);
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	// >> 21.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1146
	
	// << 15.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1015
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_ОтложенноеРаспределение", КР_ГруппаКонтейнер);
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	// >> 15.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1015
	
	// << 29.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1456
	
	// КР_СобранМаркируемыйТовар
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_СобранМаркируемыйТовар", Элементы.СрокиПеремещения);    
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	// A2105505-1588
	ЭлементФормы.ТолькоПросмотр = Не ЭтоПолноправныйПользователь;
	
	// КР_СобранНеМаркируемыйТовар
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_СобранНеМаркируемыйТовар", Элементы.СрокиПеремещения);
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	// A2105505-1588
	ЭлементФормы.ТолькоПросмотр = Не ЭтоПолноправныйПользователь;
	
	// КР_СобраныАксессуары
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_СобраныАксессуары", Элементы.СрокиПеремещения);
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	// A2105505-1588
	ЭлементФормы.ТолькоПросмотр = Не ЭтоПолноправныйПользователь;
	// >> 29.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1456
	
	// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	КР_МетодыМодификацииФорм.ДобавитьЭлементФормыГруппаИтого(ЭтотОбъект,
		Неопределено, Элементы.ГруппаОтветственный);
	КР_МетодыМодификацииФорм.ДобавитьРекизитФормыКоличествоТоварыИтого(ЭтотОбъект);
	КР_МетодыМодификацииФорм.ДобавитьЭлементФормыКоличествоТоварыИтого(ЭтотОбъект,
		Элементы.КР_ГруппаИтого, Неопределено);
	// >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	
	// << 31.03.2023 ФедотовАМ КРОК JIRA№A2105505-1493
	КР_ЗагрузитьИзВнешнегоФайлаКоманда = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ЗагрузитьИзВнешнегоФайла", НСтр("ru = 'Загрузить из внешнего файла'"), "КР_ЗагрузитьИзВнешнегоФайла");
	КР_ЗагрузитьИзВнешнегоФайлаКоманда.Картинка = БиблиотекаКартинок.ЗагрузкаИзВнешнегоИсточника;
	КР_ЗагрузитьИзВнешнегоФайлаЭлемент = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КР_ЗагрузитьИзВнешнегоФайлаКоманда, Элементы.ГруппаЗаполнить);
	// >> 31.03.2023 ФедотовАМ КРОК JIRA№A2105505-1493
	
	// << 17.05.2023, Гашников А.П., КРОК, Jira№ A2105505-1467
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ОсновнойЗаказПодсортировки", Элементы.ШапкаЛево);
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	// >> 17.05.2023, Гашников А.П., КРОК, Jira№ A2105505-1467
	
	#КонецОбласти
	
	
	// << 16.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-377
	// Установка действий типовых элементов формы
	Элементы.Товары.УстановитьДействие("ПриАктивизацииСтроки", "КР_ТоварыПриАктивизацииСтроки");
	Элементы.Товары.УстановитьДействие("ПередНачаломДобавления", "КР_ТоварыПередНачаломДобавления");
	Элементы.Товары.УстановитьДействие("ПередУдалением", "КР_ТоварыПередУдалением");
	Элементы.ТоварыНачалоОтгрузки.УстановитьДействие("ПриИзменении", "КР_ТоварыНачалоОтгрузкиПриИзменении");
	// >> 16.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-377
	
	#Область злДобавлениеЭлементовФормы
	// --> Евлахов Игорь Николаевич (Начало) 05.02.2024
	// Задача #3617
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект, 
																КомандаПоискПоСпискуШтрихкодов, 
																Элементы.ГруппаДобавитьСтроки,
																, 
																"КнопкаФормы");  
	// <-- Евлахов Игорь Николаевич (Конец) 05.02.2024
	
	// --> Евлахов Игорь Николаевич (Начало) 09.09.2024
	// Задача #4655
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.злРегламентнаяПодсортировка", Элементы.ПраваяКолонка);
	ЭлементФормы.ТолькоПросмотр = Истина;
	// <-- Евлахов Игорь Николаевич (Конец) 09.09.2024
	
	#КонецОбласти
	
	КР_УстановитьВидимостиДоступностиНаСервере();	 
	
	// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	КР_РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	// >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	
КонецПроцедуры // >> 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 

// << 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
&НаКлиенте
Процедура КР_ПриОткрытииДополнительно(Отказ)
	
	ПодключитьОбработчикОжидания("КР_ЗаполнитьСтатусEsolutions", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КР_ПослеЗаписиДополнительно()
	
	ПодключитьОбработчикОжидания("КР_ЗаполнитьСтатусEsolutions", 0.1, Истина);
	// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	КР_РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	// >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
	
КонецПроцедуры

&НаКлиенте
Процедура КР_ЗаполнитьСтатусEsolutions()
	
	Если Не Объект.Ссылка.Пустая() И Объект.СкладПолучатель = ЭтотОбъект.КР_СкладEsolutions Тогда
		ЭтотОбъект.КР_СтатусEsolutions = ПолучитьСтатусEsolutionsНаСервере(Объект.Ссылка);
	КонецЕсли;
	
	Если ЭтотОбъект.КР_СтатусEsolutions = ПредопределенноеЗначение(
			"Перечисление.КР_СтатусыАнонсаПоставкиДляСистемыEsolutions.Отправлен") Тогда
		ПодключитьОбработчикОжидания("КР_ЗаполнитьСтатусEsolutions", 600, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтатусEsolutionsНаСервере(Заказ)
	
	Возврат РегистрыСведений.КР_СтатусыПоставкиТоваровНаEsolutions.ПолучитьСтатусЗаказа(Заказ);
	
КонецФункции

&НаКлиенте
Процедура КР_АнонсПоставкиEsolutions(Команда)
	
	// --> Евлахов Игорь Николаевич (Начало) 07.12.2023
	// Задача #3407
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВходящиеДанные = злПроверитьВозможностьФормированияАнонсаПоставки(Объект.Ссылка);
		
		Если ВходящиеДанные.ЕстьОшибка Тогда
			ПоказатьПредупреждение(,ВходящиеДанные.ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 07.12.2023
	
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("КР_АнонсПоставкиEsolutionsПродолжение", ЭтотОбъект),
			НСтр("ru = 'Для выполнения команды необходимо записать документ. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет, ,
			КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	КР_АнонсПоставкиEsolutionsЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура КР_АнонсПоставкиEsolutionsПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КР_АнонсПоставкиEsolutionsЗавершение", ЭтотОбъект);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
	Если Объект.Проведен Тогда
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Иначе
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	КонецЕсли;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать(ПараметрыЗаписи);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КР_АнонсПоставкиEsolutionsЗавершение(
	Результат = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	КР_АнонсПоставкиEsolutionsНаСервере(Объект.Ссылка);
	
	ПодключитьОбработчикОжидания("КР_ЗаполнитьСтатусEsolutions", 0.1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КР_АнонсПоставкиEsolutionsНаСервере(Заказ)
	
	ОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", "ESolutionsSecureFTP");
	Если ЗначениеЗаполнено(ОбработкаСсылка) Тогда
		ОбработкаОбъект = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ОбработкаСсылка);
		ОбработкаОбъект.АнонсЗаказаНаСкладEsolution(Заказ);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не найдена обработка взаимодействия с eSolutions.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КР_СтатусEsolutionsНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // >> 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772

// --> Евлахов Игорь Николаевич (Начало) 07.12.2023
// Задача #3407
&НаСервереБезКонтекста
Функция злПроверитьВозможностьФормированияАнонсаПоставки(ЗаказНаПеремещение)
	
	ИсходящиеДанные = Новый Структура();
	
	ИсходящиеДанные.Вставить("ЕстьОшибка",  Ложь);
	ИсходящиеДанные.Вставить("ТекстОшибки", "");
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТПеремещениеТоваров
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.ЗаказНаПеремещение = &ЗаказНаПеремещение
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПеремещениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	ПеремещениеТоваров.ЗаказНаПеремещение = &ЗаказНаПеремещение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатусыПоставки.Объект КАК Объект,
	               |	СтатусыПоставки.Статус КАК Статус
	               |ИЗ
	               |	РегистрСведений.КР_СтатусыПоставкиТоваровНаEsolutions.СрезПоследних(
	               |			,
	               |			Объект В
	               |				(ВЫБРАТЬ
	               |					ВТПеремещениеТоваров.Ссылка КАК Ссылка
	               |				ИЗ
	               |					ВТПеремещениеТоваров КАК ВТПеремещениеТоваров)) КАК СтатусыПоставки
	               |ГДЕ
	               |	(СтатусыПоставки.Статус = ЗНАЧЕНИЕ(Перечисление.КР_СтатусыАнонсаПоставкиДляСистемыEsolutions.Отправлен)
	               |			ИЛИ СтатусыПоставки.Статус = ЗНАЧЕНИЕ(Перечисление.КР_СтатусыАнонсаПоставкиДляСистемыEsolutions.Зарегистрирован))";
	
	#КонецОбласти
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
	
	Результат 	= Запрос.Выполнить();
	Выборка 	= Результат.Выбрать();
	
	ТекстОшибки = НСтр("ru = 'Запрещено выполнять операцию ""Анонс поставки"".
								|У заказа есть ""Перемещение товаров"" в статусе eSolutions:"
				+ Символы.НПП + "Отправлен или Зарегистрирован'");
				
	ТекстШаблона = НСтр("ru = '%1 статус eSolutions: %2'");
			
	Пока Выборка.Следующий() Цикл
		ИсходящиеДанные.Вставить("ЕстьОшибка",  Истина);
		
		ТекстСообщения = СтрШаблон(ТекстШаблона, Выборка.Объект, Выборка.Статус);
		ТекстОшибки = ТекстОшибки + Символы.ПС + ТекстСообщения;			
	КонецЦикла;
	
	Если ИсходящиеДанные.ЕстьОшибка Тогда
		ИсходящиеДанные.ТекстОшибки = ТекстОшибки;
	КонецЕсли;
		
	Возврат(ИсходящиеДанные);
	
КонецФункции
// <-- Евлахов Игорь Николаевич (Конец) 07.12.2023

// << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377
&НаСервере
Процедура КР_УстановитьВидимостиДоступностиНаСервере()
	
	// << 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	ЭтоСкладEsolutions = (Объект.СкладПолучатель = КР_ДополнительныеНастройкиПовтИсп.СкладEsolutions());
	Элементы.КР_СтатусEsolutions.Видимость = ЭтоСкладEsolutions;
	Элементы.КР_АнонсПоставки.Видимость = ЭтоСкладEsolutions;
	// >> 03.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-772
	
	// << 29.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1015
	Элементы.КР_ОтложенноеРаспределение.Видимость = ЗначениеЗаполнено(Объект.КР_Контейнер);
	// >> 29.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1015
		
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДоступЗапрещен = Ложь;
	РеквизитыПроверки = Документы.ЗаказНаПеремещение.КР_РеквизитыПроверкиРазрешенияРедактирования();
	ЗаполнитьЗначенияСвойств(РеквизитыПроверки, Объект);
	Документы.ЗаказНаПеремещение.КР_ПроверитьРазрешениеРедактирования(РеквизитыПроверки, ДоступЗапрещен);
	Если ДоступЗапрещен Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;	
	КонецЕсли;   
	
КонецПроцедуры // >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377
           
// << 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377
// Открытие формы подборов. 
// Команда - Команда формы
// 
&НаКлиенте
Процедура КР_ПодобратьКороба(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПеремещение.ФормаДокумента.Команда.КР_ПодобратьКороба");
		
	ПараметрыФормы = Новый Структура;
	
	СписокПодобранныхКоробов = Новый Массив;
	КолонкиКорзиныСтрокой = 
			"КР_Короб, Номенклатура, Характеристика, Упаковка, КоличествоУпаковок, ХарактеристикиИспользуются, НомерСтроки";
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.КР_Короб) Тогда
			ДанныеСтроки = Новый Структура(КолонкиКорзиныСтрокой);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТЧ);   
			СписокПодобранныхКоробов.Добавить(ДанныеСтроки);
		КонецЕсли;                                          
	КонецЦикла;
	ПараметрыФормы.Вставить("СписокПодобранныхКоробов",     СписокПодобранныхКоробов);
	
	ОткрытьФорму("ОбщаяФорма.КР_ФормаПодбораКоробов", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры // >> 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377

// << 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377
// ВыбранноеЗначение - Структура 
//
&НаКлиенте
Процедура КР_ОбработкаВыбораПодборКоробовНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	КР_ОбработкаВыбораПодборКоробовНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры // >> 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 

// << 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
// ВыбранноеЗначение - Структура 
//
&НаСервере
Процедура КР_ОбработкаВыбораПодборКоробовНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	СекундВСутках = 86400;
	     
	// Удаление строк которые пропали из списка
	КР_РаботаСКоробамиСервер.УдалитьИсчезнувшиеСтрокиПослеПодбора(Объект.Товары, ТаблицаТоваров); 
	
	// Добавление новых строк
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовара.НомерСтроки) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара,
			"Номенклатура, Характеристика, Упаковка, КоличествоУпаковок, КР_Короб, ХарактеристикиИспользуются");
		
		ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен, ДатаОтгрузкиОбязательна");
		
		ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ТекущаяСтрока.НачалоОтгрузки = ОбеспечениеВДокументахСервер.ДатаОтгрузкиОбработкаВыбораПодбор(
			ТекущаяДатаСеанса(),
			ТекущаяСтрока.ВариантОбеспечения,
			Макс(НачалоДня, Объект.ЖелаемаяДатаПоступления - СекундВСутках * Объект.ДлительностьПеремещения));
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.НачалоОтгрузки) Тогда
			
			ТекущаяСтрока.ОкончаниеПоступления = Макс(
				ТекущаяСтрока.НачалоОтгрузки + СекундВСутках * Объект.ДлительностьПеремещения,
				НачалоДня + СекундВСутках * Объект.ДлительностьПеремещения,
				Объект.ЖелаемаяДатаПоступления);
			
		КонецЕсли;
		
		ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;

	КонецЦикла;
	
	Если КонтролироватьАссортимент Тогда
		АссортиментСервер.ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект, "СкладПолучатель", ТаблицаТоваров);
	КонецЕсли;
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
		Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	ОбновитьКолонкуДоступноСервер();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

КонецПроцедуры // >> 15.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 

// << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377
// Обработчик оповещения, вызывается из КР_ТоварыНачалоОтгрузкиПриИзменении.
// Меняет дату отгрузки у нескольких строк с одним и тем же коробом. 
// Результат - КодВозвратаДиалога
// ДополнительныеПараметры - Структура
//
&НаКлиенте
Процедура КР_ПослеПодтвержденияИзмененияДатыОтгрузкиКороба(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		СтрокаТовараОбъекта = Объект.Товары[КэшированныеСтроки.Товары.НомерСтроки - 1];
		СтрокаТовараОбъекта.НачалоОтгрузки = КэшированныеСтроки.Товары.НачалоОтгрузки;
		СтрокаТовараОбъекта.ОкончаниеПоступления = КэшированныеСтроки.Товары.ОкончаниеПоступления; 	
		Возврат;
	КонецЕсли;
	   
	Если ТипЗнч(ДополнительныеПараметры.Короб) = Тип("Массив") Тогда 
		СтрокиКороба = Новый Массив;
		Для Каждого Короб Из ДополнительныеПараметры.Короб Цикл
			СтрокиТекущегоКороба = Объект.Товары.НайтиСтроки(Новый Структура("КР_Короб", Короб));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиКороба, СтрокиТекущегоКороба);
		КонецЦикла;
	Иначе
		СтрокиКороба = Объект.Товары.НайтиСтроки(Новый Структура("КР_Короб", ДополнительныеПараметры.Короб));
	КонецЕсли;
	
	Для Каждого СтрокаКороба Из  СтрокиКороба Цикл 
		Если ДополнительныеПараметры.Свойство("НачалоОтгрузки") Тогда
			СтрокаКороба.НачалоОтгрузки = ДополнительныеПараметры.НачалоОтгрузки;		
		КонецЕсли;    
		Если ДополнительныеПараметры.Свойство("ОкончаниеПоступления") Тогда
			СтрокаКороба.НачалоОтгрузки = ДополнительныеПараметры.ОкончаниеПоступления;		
		КонецЕсли;  
	КонецЦикла; 
	
	Если ДополнительныеПараметры.Свойство("НачалоОтгрузки") Тогда           
		// Типовая логика для строк не коробов.
		ЗаполнитьОкончаниеПоступленияНаСервере(ДополнительныеПараметры.НачалоОтгрузки);  
	КонецЕсли;
	   
КонецПроцедуры // >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377

// << 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377
// При изменении даты отгрузки надо менять её сразу у всех строк короба
// Дата - Дата
// ДополнительныеПараметры - Структура
//
&НаКлиенте
Процедура КР_ЗаполнитьОкончаниеПоступленияЗавершение(Дата, ДополнительныеПараметры) Экспорт
	
	Если Дата = Неопределено Тогда
		Возврат;
	КонецЕсли;     
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	ЕстьСтрокиКороба = Ложь; 
	МассивЗатронутыхКоробов = Новый МАссив;
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(СтрокаТЧ.КР_Короб) Тогда			
			МассивЗатронутыхКоробов.Добавить(СтрокаТЧ.КР_Короб);
		КонецЕсли;
	КонецЦикла;          
	
	ЕстьСтрокиКороба = МассивЗатронутыхКоробов.Количество() > 0;
	Если ЕстьСтрокиКороба Тогда     
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗатронутыхКоробов); 
		ОписаниеОповещения = Новый ОписаниеОповещения("КР_ПослеПодтвержденияИзмененияДатыОтгрузкиКороба", ЭтотОбъект, 
											Новый Структура("Короб, НачалоОтгрузки", МассивЗатронутыхКоробов, Дата));
		ТекстВопроса = НСтр("ru = 'Новая дата будет установлена по всем строкам Короба.	
							|Продолжить?'");	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
	Иначе  	
		ЗаполнитьОкончаниеПоступленияНаСервере(Дата);
	КонецЕсли;
	
КонецПроцедуры // >> 17.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377

// << 26.08.2022, Мельников А.А., КРОК, Jira№ A2105505-377 
// Так как события изменения элементов не экспортные а в случае изменения элемента где-то в общем модуле,
// надо дергать событие. То придумал вот так. 
// ИмяСобытия - Строка
// Элемент - Элемент формы
// 
&НаКлиенте
Процедура КР_ВызывательСобытий(ИмяСобытия, Элемент) Экспорт
	Выполнить(СтрШаблон("%1(Элемент);", ИмяСобытия));	   
КонецПроцедуры // >> 18.08.2022, Мельников А.А., КРОК, Jira№ A2105505-384 

// << 28.11.2022,  Федоров Д.Е.,  КРОК,  Jira№A2105505-933
// Обработка ответа на вопрос об отмене всех текущих коробов
//
// Параметры:
//  Результат - КодВозвратаДиалога - Ответ на вопрос.
//  Параметры - Структура - Дополнительные параметры ответа.
//
&НаКлиенте
Процедура КР_ОтменитьВсеТекущиеКоробаОтвет(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КР_ЭтоМассоваяОтменаСтрок			= Истина;
		ИндексИзменяемойСтроки				= Элементы.Товары.ТекущаяСтрока;
		СтрокиТоваров						= Объект.Товары.НайтиСтроки(Параметры);
		// Обходим строки и выполняем типовой механизм для каждой "ТоварыОтмененоПриИзменении"
		Для Каждого СтрокаТовара Из СтрокиТоваров Цикл
			СтрокаТовара.Отменено			= Не СтрокаТовара.Отменено;
			Элементы.Товары.ТекущаяСтрока	= СтрокаТовара.ПолучитьИдентификатор();
			ТоварыОтмененоПриИзменении(Элементы.ТоварыОтменено);
		КонецЦикла;
		// Вернем выделенную строку
		Элементы.Товары.ТекущаяСтрока		= ИндексИзменяемойСтроки;
		КР_ЭтоМассоваяОтменаСтрок			= Ложь;
		
	КонецЕсли;

КонецПроцедуры // >> 28.11.2022,  Федоров Д.Е.,  КРОК,  Jira№A2105505-933

// << 31.03.2023 ФедотовАМ КРОК JIRA№A2105505-1493
&НаКлиенте
Процедура КР_ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыЗагрузки = РаботаСТабличнымиЧастямиКлиент.ПараметрыЗагрузкиНоменклатуры();
	ПараметрыЗагрузки.Организация = Объект.Организация;
	ПараметрыЗагрузки.ЗагружатьЦены = Истина;
	ПараметрыЗагрузки.ДатаЗаполнения     = Объект.Дата;
	
	Оповещение = Новый ОписаниеОповещения("КР_ЗагрузитьИзВнешнегоФайлаЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПоказатьФормуЗагрузкиНоменклатуры(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры // >> 31.03.2023 ФедотовАМ КРОК JIRA№A2105505-1493

// << 31.03.2023 ФедотовАМ КРОК JIRA№A2105505-1493
&НаКлиенте
Процедура КР_ЗагрузитьИзВнешнегоФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресЗагруженныхДанных) Тогда
		КР_ПолучитьЗагруженныеТоварыИзХранилища(АдресЗагруженныхДанных);
	КонецЕсли;
	
КонецПроцедуры // >> 31.03.2023 ФедотовАМ КРОК JIRA№A2105505-1493

// << 31.03.2023 ФедотовАМ КРОК JIRA№A2105505-1493
&НаСервере
Процедура КР_ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	
    ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий,
			"ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
	ПараметрыПроверкиСерий.Склад = Новый Структура("Отправитель, Получатель", Объект.СкладОтправитель, Объект.СкладПолучатель);
	ПараметрыПроверкиСерий.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	Если КонтролироватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.СкладПолучатель;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления), Объект.ЖелаемаяДатаПоступления, Объект.Дата);
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина-получателя. Заказывать его не рекомендуется.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныЗакупки";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Истина;
		
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	КонецЕсли;

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров
		// << 16.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2251
		, , "КодСтроки"
		// >> 16.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2251
		);
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", СтрокаТЧТовары.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", СтрокаТЧТовары.Упаковка);		
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ОбновитьКолонкуДоступноСервер();	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры // >> 31.03.2023 ФедотовАМ КРОК JIRA№A2105505-1493

// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
&НаКлиентеНаСервереБезКонтекста
Процедура КР_РассчитатьИтоговыеПоказателиФормы(Форма)
	
	ОбъектТоварыИтогКоличество = 0;
	Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		Если Не СтрокаТовары.Отменено Тогда
			ОбъектТоварыИтогКоличество = ОбъектТоварыИтогКоличество + СтрокаТовары.Количество;
		КонецЕсли;
	КонецЦикла;
	Форма.КР_КоличествоТоварыИтого = ОбъектТоварыИтогКоличество;

КонецПроцедуры // >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469

#КонецОбласти
