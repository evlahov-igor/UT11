#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат формы для анализа
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	РассчитатьЧислоДней();
	//ОбновитьСтатусЗаявкиСмартвей();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();

	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_РасходныйКассовыйОрдер" Тогда
		ЗаполнитьДанныеОбОплатеЗаявки();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ВывестиИнформациюОБронировании();
	ЗаполнитьДанныеОбОплатеЗаявки();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Используется для автоматического обновления формы платежного календаря
	Оповестить("Запись_ЗаявкаНаРасходованиеДенежныхСредств", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Параметры:
//     Элемент - ПолеФормы - Изменившийся реквизит
//
&НаКлиенте
Процедура РеквизитФормыПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ТекущийСтатус <> Объект.Статус Тогда
		СтатусПриИзмененииСервер();
		ТекущийСтатус = Объект.Статус;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокСотрудников.Согласована Тогда
		Объект.КтоРешил = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	УстановитьСписокСтатусов();
	НастроитьЗависимыеЭлементыФормыНаСервере("Статус");
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ЗаполнитьКонтактнуюИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФизЛицПриИзменении(Элемент)
	
	Если Объект.СписокФизЛиц Тогда
		
		Если Не Объект.КомандируемыеСотрудники.Количество() Тогда
			СтрокаТЧ = Объект.КомандируемыеСотрудники.Добавить();
			СтрокаТЧ.Сотрудник = Объект.Сотрудник;
		КонецЕсли;
		
		Объект.Сотрудник = Неопределено;
		Объект.ЛицевойСчет = Неопределено;
	Иначе
		Для каждого СтрокаТЧ Из Объект.ВыдачаПодОтчет Цикл
			СтрокаТЧ.Сотрудник = Неопределено;
			СтрокаТЧ.ЛицевойСчет = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	СписокФизЛицПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СписокФизЛицПриИзмененииНаСервере()
	
	Элементы.ГруппаКомандируемыеСотрудники.Заголовок = ЗаголовокКомандируемыеСотрудники();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("СписокФизЛиц");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПериодПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаНачала = Объект.ДатаОкончания;
	КонецЕсли;
	
	ПериодПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении()
	
	Объект.БронироватьУбытиеТудаНеРаньше = Объект.ДатаНачала;
	Объект.БронироватьПрибытиеТудаНеПозже = Объект.ДатаНачала;
	Объект.БронироватьУбытиеОбратноНеРаньше = Объект.ДатаОкончания;
	Объект.БронироватьПрибытиеОбратноНеПозже = Объект.ДатаОкончания;
	
	РассчитатьЧислоДней();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧислоДнейПриИзменении(Элемент)
	
	СекундВМинуте = 60;
	МинутВЧасе = 60;
	ЧасовВДне = 24;
	
	Объект.ДатаОкончания = Объект.ДатаНачала + (ЧислоДней - 1) * СекундВМинуте * МинутВЧасе * ЧасовВДне;
	
	Элементы.ЧислоДней.Заголовок = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
		ЧислоДней, НСтр("ru='день'"), НСтр("ru='дня'"), НСтр("ru='дней'"), НСтр("ru='м'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.КомментарийРасходов", НСтр("ru = 'Детализация расходов'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СверхЛимитаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьФактическаяОплатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ОплатаЗаявокНаРасходованиеДенежныхСредств");
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОплатаЗаявокНаРасходованиеДенежныхСредств");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЗаявкаНаРасходованиеДенежныхСредств", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Отчет.ОплатаЗаявокНаРасходованиеДенежныхСредств.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОБронированииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Не (СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "e1c:")
		Или СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "e1cib/")
		Или СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "e1ccs/")) Тогда
		
		СтандартнаяОбработка = Ложь;
		БронированиеСсылка = БронированиеСсылка(НавигационнаяСсылкаФорматированнойСтроки);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  БронированиеСсылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция БронированиеСсылка(ИдентификаторБронирования)
	
	Возврат Документы.Бронирование.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторБронирования));
	
КонецФункции

&НаКлиенте
Процедура СостояниеБронированияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//++ Локализация
	Если НавигационнаяСсылкаФорматированнойСтроки = "Отправить" Тогда
		
		ОбщегоНазначенияУТКлиент.ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокумента(
			ЭтотОбъект, Новый ОписаниеОповещения("ОтправитьЗаявкуПродолжение", ЭтотОбъект));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Обновить" Тогда
		
		ДлительнаяОперация = ОбновитьСтатусБронированияПоЗаявке();
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеОбновленияСтатуса", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиСотрудники

&НаКлиенте
Процедура КомандируемыеСотрудникиПриИзменении(Элемент)
	
	Элементы.ГруппаКомандируемыеСотрудники.Заголовок = ЗаголовокКомандируемыеСотрудники();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	Если ФормаОплаты = "Безналичными" Тогда
		Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная");
	ИначеЕсли ФормаОплаты = "Наличными" Тогда
		Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
	Иначе
		ФормаОплаты = "ВЛюбойФорме";
		Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПустаяСсылка");
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы("ФормаОплатыЗаявки");
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриИзменении(Элемент)
	
	Элементы.ГруппаВыдатьПодОтчет.Заголовок = НСтр("ru='Выдать под отчет на командировочные расходы:'") +
		" " + Объект.ВыдачаПодОтчет.Итог("Сумма") + " " + Строка(Объект.Валюта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект,
		Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		РассчитатьЧислоДней();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЧислоДней()
	
	СекундВМинуте = 60;
	МинутВЧасе = 60;
	ЧасовВДне = 24;
	
	ЧислоДней = (Объект.ДатаОкончания - Объект.ДатаНачала) / (СекундВМинуте * МинутВЧасе * ЧасовВДне) + 1;
	
	Элементы.ЧислоДней.Заголовок = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
		ЧислоДней, НСтр("ru='день'"), НСтр("ru='дня'"), НСтр("ru='дней'"), НСтр("ru='м'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудников(Команда)
	
	ЗаполнитьСотрудниковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудниковНаСервере()
	
	МассивСотрудников = Объект.КомандируемыеСотрудники.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	МассивСотрудников = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивСотрудников);
	
	Объект.ВыдачаПодОтчет.Очистить();
	Для каждого СотрудникСсылка Из МассивСотрудников Цикл
		Объект.ВыдачаПодОтчет.Добавить().Сотрудник = СотрудникСсылка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьВсе(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("СкачатьВсеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьВсеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоФайлов = СкачатьВсеНаСервере(Результат[0]);
	
	Если ЧислоФайлов Тогда
		ПоказатьОповещениеПользователя(СтрШаблон(НСтр("ru = 'Файлы скачаны (%1)'"), ЧислоФайлов));
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Нет файлов для скачивания'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СкачатьВсеНаСервере(Каталог)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ДанныеСправочника.Наименование КАК Наименование,
	|	ДанныеСправочника.Расширение КАК Расширение
	|ИЗ
	|	Справочник.БронированиеПрисоединенныеФайлы КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.ВладелецФайла В (&СписокБилетов)
	|	И НЕ ДанныеСправочника.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("СписокБилетов", СписокБилетов);
	
	ЧислоФайлов = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка, Ложь); // ДвоичныеДанные
		Если ДанныеФайла <> Неопределено Тогда
			ДанныеФайла.Записать(Каталог + "\" + Выборка.Наименование + "." + Выборка.Расширение);
			ЧислоФайлов = ЧислоФайлов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЧислоФайлов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеБронирования(Команда)
	
	//++ Локализация
	ОбновитьДанныеБронированияЛокализация(Команда);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаявку(Команда)
	
	Объект.Закрыта = Истина;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Свойства

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПравоСогласования = ПраваПользователяПовтИсп.СогласованиеЗаявокНаКомандировку();
	
	ДенежныеСредстваСервер.УправлениеЭлементамиФормыПриЧтенииСозданииНаСервере(ЭтотОбъект);
	
	ВывестиИнформациюОБронировании();
	ЗаполнитьДанныеОбОплатеЗаявки();
	УстановитьСписокСтатусов();
	УправлениеЭлементамиФормы();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтаФорма, ИзмененныйРеквизит, РеквизитыФормы(ЭтаФорма));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтаФорма, ИзмененныйРеквизит, РеквизитыФормы(ЭтаФорма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Структура;
	РеквизитыФормы.Вставить("ПравоСогласования");
	РеквизитыФормы.Вставить("ИспользоватьИнтеграциюСоСмартвей");
	РеквизитыФормы.Вставить("ОстатокОплаты");
	
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	
	Возврат РеквизитыФормы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеОбОплатеЗаявки()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОстатокОплаты = -1;
	Иначе
		ОстатокОплаты = ОстатокОплатыПоЗаявке(Объект.Ссылка);
	КонецЕсли;
	
	Если ОстатокОплаты < 0 Тогда
		НадписьФактическаяОплата = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='<span style=""color: %1"">Не оплачена</span>'"), "ЦветТекстаПредупреждение");
	ИначеЕсли ОстатокОплаты = 0 Тогда
		Если Объект.Закрыта Тогда
			СуммаЗакрыто = СуммаЗакрыто(Объект.Ссылка);
			НадписьФактическаяОплата = СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru='Оплачена частично, <span style=""color: %1"">закрыто: %2</span>'"),
				"ЦветТекстаПредупреждение", ФормированиеПечатныхФорм.ФорматСумм(СуммаЗакрыто, Объект.Валюта));
		Иначе
			НадписьФактическаяОплата = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Оплачена полностью'"));
		КонецЕсли;
	Иначе
		НадписьФактическаяОплата = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='Оплачена частично, <span style=""color: %1"">не оплачено: %2</span>'"),
			"ЦветТекстаПредупреждение", ФормированиеПечатныхФорм.ФорматСумм(ОстатокОплаты, Объект.Валюта));
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ОстатокОплаты");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстатокОплатыПоЗаявке(Ссылка)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|	И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.СуммаОстаток КАК НеОплачено
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|	) КАК ДенежныеСредства
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если МассивРезультатов[0].Пустой() Тогда
		Результат = -1;
	Иначе
		Результат = МассивРезультатов[1].Выгрузить()[0].НеОплачено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаЗакрыто(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	-СУММА(ДенежныеСредства.Сумма) КАК Закрыто
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|	И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДенежныеСредства.Сумма < 0
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить()[0].Закрыто;
	
КонецФункции

&НаСервере
Процедура ВывестиИнформациюОБронировании()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.НомерБилета                             КАК Номер,
	|	ДанныеДокумента.ДатаОтправления                         КАК ДатаНач,
	|	ДанныеДокумента.ДатаПрибытия                            КАК ДатаКон,
	|	ДанныеДокумента.СуммаДокумента                          КАК Сумма,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Валюта)                   КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипУслуги)                КАК ТипУслуги,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ДеталиПоездки КАК Строка(100)) КАК Детали,
	|	ДанныеДокумента.Ссылка                                  КАК Ссылка,
	|	КОЛИЧЕСТВО(Файлы.Ссылка)                                КАК КоличествоФайлов
	|ИЗ
	|	Документ.Бронирование КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БронированиеПрисоединенныеФайлы КАК Файлы
	|	ПО
	|		Файлы.ВладелецФайла = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.ДокументОснование = &Ссылка
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	СтрокаБронирований = "";
	ШаблонСсылка = НСтр("ru='%1 %2'");
	ШаблонБилет = НСтр("ru='%1 - %2, %3 %4'");
	ШаблонФайлы = НСтр("ru='Файлы (%1)'");
	
	СписокБилетов.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Пока Выборка.Следующий() Цикл
		
		СписокБилетов.Добавить(Выборка.Ссылка);
		
		СтрокаБронирований = СтрокаБронирований
			+ "<a href = " + ПолучитьНавигационнуюСсылку(Выборка.Ссылка) + ">" + СтрШаблон(ШаблонСсылка, Выборка.ТипУслуги, Выборка.Номер) + "</a>"
			+ " " + СтрШаблон(ШаблонБилет, Выборка.ДатаНач, Выборка.ДатаКон, Выборка.Сумма, Выборка.Валюта)
			+ ?(Выборка.КоличествоФайлов > 0, "   " + "<a href = " + Строка(Выборка.Ссылка.УникальныйИдентификатор()) + ">" + СтрШаблон(ШаблонФайлы, Выборка.КоличествоФайлов) + "</a>", "")
			+ Символы.ПС;
	КонецЦикла;
	
	ИнформацияОБронировании = СтроковыеФункции.ФорматированнаяСтрока(СтрокаБронирований);
	
	Элементы.СкачатьВсе.Видимость = СписокБилетов.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокСтатусов()
	
	СписокВыбора = Элементы.Статус.СписокВыбора;
	
	Если Не ПравоСогласования Тогда
		
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Перечисления.СтатусыЗаявокСотрудников.Подготовлена);
		СписокВыбора.Добавить(Перечисления.СтатусыЗаявокСотрудников.Отклонена);
		
		Если ПравоСогласования Или Объект.Статус = Перечисления.СтатусыЗаявокСотрудников.Согласована Тогда
			СписокВыбора.Добавить(Перечисления.СтатусыЗаявокСотрудников.Согласована);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ГруппаКомандируемыеСотрудники.Заголовок = ЗаголовокКомандируемыеСотрудники();
	
	Элементы.ГруппаВыдатьПодОтчет.Заголовок = НСтр("ru='Выдать под отчет на командировочные расходы:'") +
		" " + Объект.ВыдачаПодОтчет.Итог("Сумма") + " " + Строка(Объект.Валюта);
		
	Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
		ФормаОплаты = "Безналичными";
	ИначеЕсли Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
		ФормаОплаты = "Наличными"
	Иначе
		ФормаОплаты = "ВЛюбойФорме";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформацию()
	
	Объект.Телефон = "";
	Объект.АдресЭлектроннойПочты = "";
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		ОбъектыКИ = Новый Массив;
		ОбъектыКИ.Добавить(Объект.Сотрудник);
		
		ТипыКИ = Новый Массив;
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		КИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбъектыКИ, ТипыКИ);
		
		Если КИ.Количество() Тогда
			Для каждого СтрокаКИ Из КИ Цикл
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					Объект.Телефон = СтрокаКИ.Представление;
				ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Объект.АдресЭлектроннойПочты = СтрокаКИ.Представление;
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.Телефон) И ЗначениеЗаполнено(Объект.АдресЭлектроннойПочты) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокКомандируемыеСотрудники()
	
	СотрудникиСтрокой = Новый Массив;
	
	РеквизитыСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Объект.КомандируемыеСотрудники.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник"), "Наименование");
	Для каждого КлючИЗначение Из РеквизитыСотрудников Цикл
		СотрудникиСтрокой.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Если Не СотрудникиСтрокой.Количество() Тогда
		СотрудникиСтрокой.Добавить(НСтр("ru='<указать сотрудников>'"));
	КонецЕсли;
	
	Возврат СтрСоединить(СотрудникиСтрокой, "; ");
	
КонецФункции

#КонецОбласти

#КонецОбласти

//++ Локализация
#Область Локализация

#Область Локализация_ПодключаемыеОбработчикиСобытийФормы

&НаСервере
Процедура Подключаемый_ПриСозданииНаСервереЛокализация(Отказ, СтандартнаяОбработка)
	
	ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервереЛокализация();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПриЧтенииНаСервереЛокализация(ТекущийОбъект)
	
	ПриЧтенииНаСервере(ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервереЛокализация();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПослеЗаписиНаСервереЛокализация(ТекущийОбъект, ПараметрыЗаписи)
	
	ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	Если ИспользоватьИнтеграциюСоСмартвей Тогда
		ЗаполнитьСостояниеБронирования();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЛокализацияОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтправитьЗаявкуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДлительнаяОперация = ОтправитьЗаявкуНаСервере();
		Если ДлительнаяОперация <> Неопределено Тогда
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеОтправкиЗаявки", ЭтотОбъект);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьСообщения = Истина;
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЛокализацияКоманды

&НаКлиенте
Процедура ОбновитьДанныеБронированияЛокализация(Команда)
	
	ДлительнаяОперация = НачатьОбновлениеНаСервере();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьПолучениеДанныхБронирования", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьОбновлениеНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.КлючФоновогоЗадания = Метаданные.РегламентныеЗадания.ПолучениеДанныхСмартвей.Ключ;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения, "ИнтеграцияСмартвей.ПолучитьДанныеБронированияПоЗаявке", Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолучениеДанныхБронирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиИнформациюОБронировании();
	
КонецПроцедуры

#КонецОбласти

#Область ЛокализацияСлужебные

&НаСервере
Процедура ПриЧтенииСозданииНаСервереЛокализация()
	
	ИспользоватьИнтеграциюСоСмартвей = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСоСмартвей");
	
	Если ИспользоватьИнтеграциюСоСмартвей Тогда
		ЗаполнитьСостояниеБронирования();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостояниеБронирования()
	
	СостояниеБронированияЗаявки = Неопределено;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДанныеСостояния = РегистрыСведений.СостоянияБронированияЗаявокНаКомандировку.ПолучитьПоследнее(
			, Новый Структура("ЗаявкаНаКомандировку", Объект.Ссылка));
		СостояниеБронированияЗаявки = ДанныеСостояния.Состояние;
	КонецЕсли;
	
	СтрокиСостоянияБронирования = Новый Массив;
	Если Не ЗначениеЗаполнено(СостояниеБронированияЗаявки) Тогда
		СтрокиСостоянияБронирования.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'Не отправлена в систему бронирования'"),, ЦветаСтиля.ЦветОсобогоТекста));
		СтрокиСостоянияБронирования.Добавить(" ");
		СтрокиСостоянияБронирования.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'Отправить'"),,,, "Отправить"));
	Иначе
		Если СостояниеБронированияЗаявки = Перечисления.СостоянияБронированияЗаявокНаКомандировку.Отправлена Тогда
			ШаблонТекстаСостояния = НСтр("ru = '%1 в систему бронирования'");
		Иначе
			ШаблонТекстаСостояния = НСтр("ru = '%1 в системе бронирования'");
		КонецЕсли;
		СтрокиСостоянияБронирования.Добавить(СтрШаблон(ШаблонТекстаСостояния, СостояниеБронированияЗаявки));
		СтрокиСостоянияБронирования.Добавить(" ");
		СтрокиСостоянияБронирования.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'Обновить статус обработки'"),,,, "Обновить"));
	КонецЕсли;
	
	НадписьСостояниеБронирования = Новый ФорматированнаяСтрока(СтрокиСостоянияБронирования);
	
КонецПроцедуры

&НаСервере
Функция ОтправитьЗаявкуНаСервере()
	
	ДанныеДляОтправки = Документы.ЗаявкаНаКомандировку.ДанныеЗаявокДляБронирования(Объект.Ссылка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения, "ИнтеграцияСмартвей.ОтправитьЗаявки", Объект.Ссылка, ДанныеДляОтправки);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеОтправкиЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Сообщения") И Результат.Сообщения <> Неопределено Тогда
			Для каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Свойство("Статус") Тогда
			Если Результат.Статус = "Ошибка" Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
			ИначеЕсли Результат.Статус = "Выполнено" Тогда
				ЗаполнитьСостояниеБронирования();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСтатусБронированияПоЗаявке()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения, "ИнтеграцияСмартвей.ПолучитьСтатусыЗаявок", Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеОбновленияСтатуса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Статус") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		ИначеЕсли Результат.Статус = "Выполнено" Тогда
			ЗаполнитьСостояниеБронирования();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

#Если НаСервере Тогда

Если Не ПодключеныОбработчикиЛокализация И ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейРФ") Тогда
	
	ПодключеныОбработчикиЛокализация = Истина;
	
	ПодключаемыеОбработчикиСобытийФормы = Новый Массив;
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПриСозданииНаСервере");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПриЧтенииНаСервере");
	ПодключаемыеОбработчикиСобытийФормы.Добавить("ПослеЗаписиНаСервере");
	
	Для каждого Обработчик Из ПодключаемыеОбработчикиСобытийФормы Цикл
		УстановитьДействие(Обработчик, "Подключаемый_" + Обработчик + "Локализация");
	КонецЦикла;
	
КонецЕсли;

#КонецЕсли

#КонецОбласти
//-- Локализация
