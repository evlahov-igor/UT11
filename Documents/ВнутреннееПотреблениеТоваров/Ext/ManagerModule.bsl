#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ВнутреннееТовародвижение");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОперативныйУчетТоваровОрганизаций");
	МеханизмыДокумента.Добавить("ПриемНаОтветхранение");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("СерийныйУчет");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов"); // для формирования таблицы изменений регистров
	
	ВнутреннееПотреблениеТоваровЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция таблиц данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры);
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(Документ, Запрос, ТекстыЗапроса, Регистры);
		
		// << 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
		КР_ТекстЗапросаТаблицаТоварыКОтбору(Запрос, ТекстыЗапроса, Регистры);
		КР_ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
		КР_ТекстЗапросаТаблицаТоварыВЯчейках(Запрос, ТекстыЗапроса, Регистры);
		// >> 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
		
		ВнутреннееПотреблениеТоваровЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	ОформитьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(
		Запрос, ТекстыЗапроса, Регистры, Метаданные.Документы.ВнутреннееПотреблениеТоваров);
		
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ПрочееОприходованиеТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандыСозданияНаОсновании(
		КомандыСозданияНаОсновании, 
		Метаданные.Документы.ВнутреннееПотреблениеТоваров, 
		Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию);
	
	
	ВнутреннееПотреблениеТоваровЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Внутреннее потребление товаров".
//
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - таблица команд
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - добавленная команда.
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВнутреннееПотреблениеТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнутреннееПотребление";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Внутреннее потребление товаров".
//
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - таблица команд
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - добавленная команда.
Функция ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВнутреннееПотреблениеТоваров) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.ВнутреннееПотреблениеТоваровСоздатьНаОснованииЗаказа";
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнутреннееПотребление";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Внутреннее потребление товаров".
//
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - таблица команд
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - добавленная команда.
Функция ДобавитьКомандуСоздатьНаОснованииСписаниеНаРасходыАктивы(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВнутреннееПотреблениеТоваров) И ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление") Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СписаниеНаРасходыАктивыНаОсновании";
		КомандаСоздатьНаОсновании.Идентификатор = "СписаниеНаРасходыАктивыНаОсновании";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Списание на расходы / активы'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "НеБазоваяВерсия";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.ОстаткиТоваровОрганизаций.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	ВнутреннееПотреблениеТоваровЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#Область Заполнение

// Возвращает структуру необходимую для дальнейшего использования при заполнении документа.
//
// Возвращаемое значение:
//   Структура - структура параметров заполнения документа.
//
Функция ПараметрыЗаполненияДокумента() Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
	
	ПараметрыЗаполнения.Вставить("МассивЗаказов",         Неопределено);
	ПараметрыЗаполнения.Вставить("ФормаОткрыта",          Ложь);
	ПараметрыЗаполнения.Вставить("ФормаОбъекта",          Неопределено);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру",     Неопределено);
	
	ПараметрыЗаполнения.Вставить("РеквизитыШапки",        Неопределено);
	ПараметрыЗаполнения.Вставить("Склад",                 Справочники.Склады.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Организация",           Справочники.Организации.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Подразделение",         Справочники.СтруктураПредприятия.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	
	ПараметрыЗаполнения.Вставить("ИмяДокумента",          "ВнутреннееПотреблениеТоваров");
	ПараметрыЗаполнения.Вставить("ИмяРегистраЗаказ",      "ЗаказыНаВнутреннееПотребление");
	ПараметрыЗаполнения.Вставить("ИмяПоляЗаказ",          "ЗаказНаВнутреннееПотребление");
		
	ПараметрыЗаполнения.Вставить("КлючевыеПоля",          "Номенклатура, Характеристика, Серия, Назначение");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Производит инициализацию структуры параметров заполнения по реквизитам шапки и по заказам.
//
// Параметры:
//  ПараметрыЗаполнения	 - Структура - Параметры по умолчанию получаемые в методе ПараметрыЗаполненияДокумента()
//  РеквизитыШапки		 - Структура - Содержит ключи на основании которых будет происходить заполнение
//  МассивЗаказов		 - Массив - Ссылки на заказы по которым будет происходить заполнение.
//
Процедура ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, МассивЗаказов) Экспорт
	
	ПараметрыЗаполнения.МассивЗаказов	= МассивЗаказов;
	ПараметрыЗаполнения.РеквизитыШапки	= РеквизитыШапки;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.Склад) Тогда
		ПараметрыЗаполнения.Склад = РеквизитыШапки.Склад;
	КонецЕсли;
	
	ПараметрыЗаполнения.Организация				= РеквизитыШапки.Организация;
	ПараметрыЗаполнения.Подразделение			= РеквизитыШапки.Подразделение;
	ПараметрыЗаполнения.ХозяйственнаяОперация	= РеквизитыШапки.ХозяйственнаяОперация;
	
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру = Неопределено Тогда
		ПараметрыЗаполнения.ЗаполнятьПоОрдеру = НакладныеСервер.ЗаполнятьПоОрдеру(ПараметрыЗаполнения.Склад);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат запроса для заполнения накладной по заказам/ордерам
//
// Параметры:
//  ДанныеОтбора   - Структура - поля, по которым будут отобраны остатки заказов для заполнения документа
//  КонтекстВызова - Строка - определяет контекст вызова процедуры: "Подбор", "Заполнение".
//
// Возвращаемое значение:
//  Структура - структура содержащая выборку результата запроса и дополнительные данные для заполнения.
//
Функция РезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора, КонтекстВызова) Экспорт
	
	// Описание всех возможных параметров запроса.
	ПараметрыЗапросов = Новый Структура("ОтобратьПоЗаказу, МассивЗаказов,
	                                    |Организация, Склад, ХозяйственнаяОперация, Сделка,
	                                    |Регистратор, ТоварыНакладной, НакладнаяПоЗаказам");
	ПараметрыЗапросов.Вставить("УчитыватьСобирается", Ложь);
	ПараметрыЗапросов.Вставить("ЗаполнятьПоСобирается", Ложь);
	
	СписокЗапросов   = Новый СписокЗначений();
	ИменаПодзапросов = Новый Массив();
	
	// Обработка параметров вызова метода.
	Если КонтекстВызова = "СозданиеНаОсновании" Тогда
		
		ПараметрыЗапросаДляСозданияНаОсновании(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	ИначеЕсли КонтекстВызова = "Подбор" Тогда
		
		ПараметрыЗапросаДляПодбора(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	ИначеЕсли КонтекстВызова = "ПерезаполнениеПоОрдерам" Тогда
		
		ПараметрыЗапросаДляПерезаполненияПоОрдерам(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	ИначеЕсли КонтекстВызова = "ЗаполнениеПоЗаказам" Тогда
		
		ПараметрыЗапросаДляЗаполненияПоЗаказам(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	КонецЕсли;
	
	
	// Описание всех возможных текстов запросов.
	ТекстыЗапросов = Новый Соответствие();
	ТекстыЗапросов.Вставить("ВтЗаказыОтбор",    ТекстЗапросаВременнойТаблицыРаспоряжений());
	ТекстыЗапросов.Вставить("ВтНакладная",      ТекстЗапросаВременнойТаблицыНакладной());
	ТекстыЗапросов.Вставить("ТаблицаОтгружено", ТекстЗапросаОтгруженоПоОрдерам());
	
	// Используемые подзапросы для формирования таблицы "ТаблицаОформить" должны быть обернуты методом ТекстЗапросаОбъединения(...).
	ТекстыПодзапросов = Новый Соответствие();
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		ТекстыПодзапросов.Вставить("БлокРегистрЗаказы",          ТекстЗапросаОстаткиРегистраЗаказы());
		ТекстыПодзапросов.Вставить("БлокСторноНакладная",        ТекстЗапросаСторноНакладная());
	КонецЕсли;
	ТекстыПодзапросов.Вставить("БлокНовыеДвиженияНакладная", ТекстЗапросаНовыеДвиженияНакладная());
	
	Для Каждого Элемент Из СписокЗапросов Цикл
		Элемент.Представление = ТекстыЗапросов[Элемент.Значение];
	КонецЦикла;
	
	Элемент = СписокЗапросов.НайтиПоЗначению("ТаблицаОформить");
	Если Элемент <> Неопределено Тогда
		Элемент.Представление = ТекстЗапросаОбъединения(ИменаПодзапросов, ТекстыПодзапросов);
	КонецЕсли;
	
	// Инициализация запроса.
	Запрос = Новый Запрос();
	
	Для Каждого Параметр Из ПараметрыЗапросов Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Для Каждого Элемент Из СписокЗапросов Цикл
		Запрос.Текст = Запрос.Текст + Элемент.Представление;
	КонецЦикла;
	
	// Выполнение запроса, возврат результата.
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураРезультата = Новый Структура();
	Для Каждого Элемент Из СписокЗапросов Цикл
		СтруктураРезультата.Вставить(Элемент.Значение, РезультатЗапроса[СписокЗапросов.Индекс(Элемент)].Выгрузить());
	КонецЦикла;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Формирует структуру для создания внутреннего потребления товаров по одному или нескольким заказам на внутреннее
// потреление/заказам на ремонт Если в переданных заказах отличаются реквизиты шапки, выдается сообщение об ошибке.
//
// Параметры:
//  МассивСсылок - Массив - заказы на внутреннее потребление, по которым необходимо ввести накладную
//  СвойстваЗаказов - Структура - структура, в которую будут помещены реквизиты шапки из массива заказов.
//
// Возвращаемое значение:
//  Булево - Ложь, если в переданных заказах отличаются реквизиты шапки.
//
Функция ДанныеЗаполненияНакладной(МассивСсылок, СвойстваЗаказов = Неопределено) Экспорт
	
	ТекстыЗапроса = Новый Массив();
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		
		Текст =
			"ВЫБРАТЬ
			|	Заказ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
			|	Заказ.Организация КАК Организация,
			|	Заказ.Подразделение КАК Подразделение,
			|	Заказ.Склад КАК Склад,
			|	Заказ.Сделка КАК Сделка,
			|	Заказ.ПотреблениеДляДеятельности КАК ПотреблениеДляДеятельности,
			|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
			|ИЗ
			|	Документ.ЗаказНаВнутреннееПотребление КАК Заказ
			|ГДЕ
			|	Заказ.Ссылка = &Заказ";
		ТекстыЗапроса.Добавить(Текст);
		
	КонецЕсли;
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос.УстановитьПараметр("Заказ", МассивСсылок[0]);
	
	РеквизитыШапки = Новый Структура("ХозяйственнаяОперация, Организация, Склад, Сделка, Подразделение,
		|ПотреблениеДляДеятельности, НаправлениеДеятельности");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыШапки, Выборка);
	КонецЕсли;
	
	Возврат РеквизитыШапки;
	
КонецФункции

// Формирует данные необходимые для проверки ввода накладной на основании распоряжений.
// (см. функцию СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа)
//
// Параметры:
//  Распоряжения - Массив - список распоряжений, на основании которых оформляется накладная
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - вид операции оформляемой накладной.
//
// Возвращаемое значение:
//  Структура - данные для проверки ввода.
//
Функция ДанныеДляПроверкиВводаНаОсновании(Распоряжения, ХозяйственнаяОперация = Неопределено) Экспорт
	
	ДанныеДляВвода = Новый Структура("Основание, Статус, ЕстьОтгрузить, РаспоряженияКОформлению, МожноСгруппировать");
	ДанныеДляВвода.ЕстьОтгрузить = Ложь;
	ДанныеДляВвода.МожноСгруппировать = Ложь;
	ДанныеДляВвода.Вставить("Склад");
	ДанныеДляВвода.Вставить("ХозяйственнаяОперация");
	
	ТекстыЗапросов = Новый Массив;
	
	Тексты = Новый Массив();
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		
		Текст =
			"ВЫБРАТЬ
			|	ЗаказНаВнутреннееПотребление.Ссылка КАК Основание,
			|	ЗаказНаВнутреннееПотребление.Статус КАК Статус,
			|	ЗаказНаВнутреннееПотребление.Склад  КАК Склад,
			|	ЗаказНаВнутреннееПотребление.ХозяйственнаяОперация КАК ХозяйственнаяОперация
			|ИЗ
			|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
			|ГДЕ
			|	ЗаказНаВнутреннееПотребление.Ссылка В(&Распоряжения)";
		Тексты.Добавить(Текст);
		
	КонецЕсли;
	
	Текст = СтрСоединить(Тексты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапросов.Добавить(Текст);
	
	Тексты = Новый Массив();
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		
		Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1
			|ИЗ
			|	Документ.ЗаказНаВнутреннееПотребление.Товары КАК ТоварыЗаказа
			|ГДЕ
			|	ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
			|	И ТоварыЗаказа.Ссылка В(&Распоряжения)
			|	И НЕ ТоварыЗаказа.Отменено";
		Тексты.Добавить(Текст);
		
	КонецЕсли;
	
	Текст = СтрСоединить(Тексты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапросов.Добавить(Текст);
	
	ТекстыЗапросов.Добавить(РегистрыНакопления.ЗаказыНаВнутреннееПотребление.ТекстЗапросаОстатки("ВтОстаткиКОформлению"));
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОстаткиКОформлению.ЗаказНаВнутреннееПотребление КАК РаспоряженияКОформлению
		|ИЗ
		|	ВтОстаткиКОформлению КАК ОстаткиКОформлению");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ОстаткиКОформлению.Склад) КАК Склад,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОстаткиКОформлению.Склад) > 1 КАК РазныеСклады
		|ИЗ
		|	ВтОстаткиКОформлению КАК ОстаткиКОформлению");
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете()));
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("Регистратор", Неопределено);
	Запрос.УстановитьПараметр("ОтборПоСкладу", Ложь);
	Запрос.УстановитьПараметр("Склад", Неопределено);
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		ДанныеДляВвода.Основание     = Выборка.Основание;
		ДанныеДляВвода.Статус        = Выборка.Статус;
		ДанныеДляВвода.ЕстьОтгрузить = Не Результат[1].Пустой();
		
		ДанныеДляВвода.ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
	КонецЕсли;
	
	Если Не Результат[3].Пустой() Тогда
		ДанныеДляВвода.РаспоряженияКОформлению = Результат[3].Выгрузить().ВыгрузитьКолонку("РаспоряженияКОформлению");
		Выборка = Результат[4].Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеДляВвода.МожноСгруппировать = Не Выборка.РазныеСклады;
			ДанныеДляВвода.Склад = Выборка.Склад;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДляВвода;
	
КонецФункции

// Формирует параметры для открытия формы рабочего места "Документы к оформлению".
//
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - вид операции оформляемой накладной.
//
// Возвращаемое значение:
//  Структура - параметры для открытия формы с полями:
//     * ИмяФормы - Строка - имя формы РМ
//     * ПараметрыФормы - Структура - параметры формы РМ.
//
Функция ПараметрыОткрытияФормыРабочегоМеста(ХозяйственнаяОперация = Неопределено) Экспорт
	
	ОтборХозяйственныеОперации = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ОтборХозяйственныеОперации.Добавить(ХозяйственнаяОперация);
	Иначе
		ОтборХозяйственныеОперации.ЗагрузитьЗначения(ХозяйственныеОперацииДокумента());
	КонецЕсли;
	
	ОтборТипыДокументов = Новый СписокЗначений;
	ОтборТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВнутреннееПотреблениеТоваров));
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
	ПараметрыОтбора.Вставить("ОтборТипыДокументов", ОтборТипыДокументов);
	
	ПараметрыОткрытия = Новый Структура("ИмяФормы, ПараметрыФормы");
	ПараметрыОткрытия.ИмяФормы = "Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению";
	ПараметрыОткрытия.ПараметрыФормы = Новый Структура;
	ПараметрыОткрытия.ПараметрыФормы.Вставить("КлючНазначенияФормы",     "ВнутренниеПотребленияТоваров");
	ПараметрыОткрытия.ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Процедура заполняет поля объекта
//
// Параметры:
//  Объект				 - ДокументОбъект.ВнутреннееПотреблениеТоваров	 - объект для заполнения
//  ПараметрыЗаполнения	 - Структура									 - структура содержащая ключи РеквизитыШапки, ИмяРегистраЗаказ, ИмяПоляЗаказ
//  МассивЗаказов		 - Массив										 - массив заказов.
//
Процедура ЗаполнитьШапкуДокументаПоЗаказу(Объект, ПараметрыЗаполнения, МассивЗаказов) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения.РеквизитыШапки);
	
	Объект.Склад = ПараметрыЗаполнения.Склад;
	Объект.ПотреблениеПоЗаказам = Истина;
	
	Объект.Дата = ?(МассивЗаказов.Количество() = 1,
		ЗаказыСервер.ПолучитьМинимальнуюДатуОтгрузкиЗаказа(МассивЗаказов, ПараметрыЗаполнения.ИмяРегистраЗаказ, 
			ПараметрыЗаполнения.ИмяПоляЗаказ),
		ЗаказыСервер.ПолучитьМаксимальнуюДатуОтгрузкиЗаказа(МассивЗаказов, ПараметрыЗаполнения.ИмяРегистраЗаказ, 
			ПараметрыЗаполнения.ИмяПоляЗаказ));
	
	// Заполнение заказа(-ов) в шапке.
	Если МассивЗаказов.Количество() = 1 Тогда
		Объект.ЗаказНаВнутреннееПотребление = МассивЗаказов[0];
	Иначе
		
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(
			Объект.ЗаказНаВнутреннееПотребление, 
			Объект.Товары, 
			ПараметрыЗаполнения.ИмяПоляЗаказ);
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает поле КоличествоУпаковок и другие зависимые поля
//
// Параметры:
//  Товары				 - ДанныеФормыКоллекция - Табличная часть "Товары"
//  ПараметрыЗаполнения	 - Структура -
//
Процедура ОбновитьЗависимыеРеквизитыТабличнойЧасти(Товары, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Если ПараметрыЗаполнения.ФормаОткрыта Тогда
		ФормаИлиПараметрыВыбора = ПараметрыЗаполнения.ФормаОбъекта;
	Иначе
		ФормаИлиПараметрыВыбора = Документы.ВнутреннееПотреблениеТоваров.ПараметрыВыбораСтатейИАналитик(ПараметрыЗаполнения.ХозяйственнаяОперация);
	КонецЕсли;
	
	ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры(
		СтруктураДействий,
		ФормаИлиПараметрыВыбора,
		ПараметрыЗаполнения.ХозяйственнаяОперация,
		ПараметрыЗаполнения.Организация,
		ПараметрыЗаполнения.Подразделение);
	
	Для Каждого Строка Из Товары Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	КонецЦикла;

КонецПроцедуры

// Возвращает массив содержащий переданную накладную, а так же:
// А. Заказ из массива заказов (если в массиве один элемент)
// Б. Все заказы которые подходят под отбор по реквизитам шапки.
//
// Параметры:
//  Накладная		 - ДокументСсылка.ВнутреннееПотреблениеТоваров -
//  МассивЗаказов	 - Массив - Массив заказов на внутреннее потребление, заказов на ремонт
//  РеквизитыШапки	 - Структура - Должна содержать ключи Организация, Склад,
//  								Сделка, ХозяйственнаяОперация и НаправлениеДеятельности.
//
// Возвращаемое значение:
//  Массив - массив документов ЗаказНаВнутреннееПотребление, ЗаказНаРемонт.
//
Функция РаспоряженияНакладной(Накладная, МассивЗаказов, РеквизитыШапки) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",        МассивЗаказов.Количество() = 1);
	Запрос.УстановитьПараметр("Регистратор",             Накладная);
	Запрос.УстановитьПараметр("МассивЗаказов",           МассивЗаказов);
	Запрос.УстановитьПараметр("Организация",             РеквизитыШапки.Организация);
	Запрос.УстановитьПараметр("Склад",                   РеквизитыШапки.Склад);
	Запрос.УстановитьПараметр("Сделка",                  РеквизитыШапки.Сделка);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",   РеквизитыШапки.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", РеквизитыШапки.НаправлениеДеятельности);
	
	ТекстыЗапроса = Новый Массив();
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		
		Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказНаВнутреннееПотребление.Ссылка КАК Заказ
			|ИЗ
			|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
			|ГДЕ
			|	ВЫБОР
			|		КОГДА &ОтобратьПоЗаказу ТОГДА
			|			ЗаказНаВнутреннееПотребление.Ссылка В (&МассивЗаказов)
			|		ИНАЧЕ
			|			ЗаказНаВнутреннееПотребление.Организация           = &Организация
			|			И ЗаказНаВнутреннееПотребление.Склад                 = &Склад
			|			И ЗаказНаВнутреннееПотребление.Сделка                = &Сделка
			|			И ЗаказНаВнутреннееПотребление.ХозяйственнаяОперация = &ХозяйственнаяОперация
			|			И ЗаказНаВнутреннееПотребление.НаправлениеДеятельности = &НаправлениеДеятельности
			|	КОНЕЦ
			|	И ЗаказНаВнутреннееПотребление.Проведен";
		ТекстыЗапроса.Добавить(Текст);
		
	КонецЕсли;
	
	
	Текст =
		"ВЫБРАТЬ
		|	&Регистратор КАК Заказ";
	ТекстыЗапроса.Добавить(Текст);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ");
	
КонецФункции

// Возвращает список реквизитов, по которым можно сгруппировать распоряжения в пределах одной накладной.
//
// Возвращаемое значение:
//  Строка - имена реквизитов, разделенные запятыми.
//
Функция КлючевыеПоляШапкиРаспоряжения() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам") Тогда
		Возврат "Организация, НаправлениеДеятельности, Подразделение, ПотреблениеДляДеятельности";
	Иначе
		Возврат "Ссылка";
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПоЗаказамОрдерам(Товары, Регистратор, ПараметрыЗаполнения) Экспорт
	
	ОтборПоСкладу = ЗначениеЗаполнено(ПараметрыЗаполнения.Склад);
	
	// Если не нужно заполнять по ордеру, передаем пустые параметры запроса - по ордерам вернется пустая таблица.
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		РаспоряженияДляОрдеров = ПараметрыЗаполнения.МассивЗаказов;
		РегистраторДляОрдеров  = Регистратор;
	Иначе
		РаспоряженияДляОрдеров = Неопределено;
		РегистраторДляОрдеров  = Неопределено;
	КонецЕсли;
	
	// Заказы
	
	ТекстыЗапроса = Новый Массив();
	
	ТекстЗапросаРегистраЗаказы = РегистрыНакопления.ЗаказыНаВнутреннееПотребление.ТекстЗапросаОстатки("ВтДанныеУчета");
		
	ТекстыЗапроса.Добавить(ТекстЗапросаРегистраЗаказы);
	
	Тексты = Новый Массив();
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		
		ТекстЗапросаЗаказ = Документы.ЗаказНаВнутреннееПотребление.ТекстЗапросаТоварыДокумента();
		Тексты.Добавить(ТекстЗапросаЗаказ);
		
	КонецЕсли;
	
	
	Текст = СтрСоединить(Тексты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстыЗапроса.Добавить(Текст);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Распоряжения", ПараметрыЗаполнения.МассивЗаказов);
	Запрос.УстановитьПараметр("Регистратор",  Регистратор);
	Запрос.УстановитьПараметр("ОтборПоСкладу", ОтборПоСкладу);
	Запрос.УстановитьПараметр("Склад", Неопределено);
	Если ОтборПоСкладу Тогда
		Запрос.УстановитьПараметр("Склад", ПараметрыЗаполнения.Склад);
	КонецЕсли;
	
	ТаблицаЗаказы = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаказы.Колонки.КОформлению.Имя = "КоличествоВЗаказе";
	
	// Ордера
	Запрос = Новый Запрос();
	
	Отбор = Новый Соответствие;
	Если ОтборПоСкладу Тогда
		ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(Отбор, "Склад", "&Склад");
	КонецЕсли;	
	
	ТекстЗапросаОсталосьОформить = РегистрыНакопления.ТоварыКОтгрузке.ТекстЗапросаОсталосьОформить(Отбор);
	
	Запрос.Текст = ТекстЗапросаОсталосьОформить;
	
	Запрос.УстановитьПараметр("Распоряжения", РаспоряженияДляОрдеров);
	Запрос.УстановитьПараметр("Регистратор",   РегистраторДляОрдеров);
	Если ОтборПоСкладу Тогда
		Запрос.УстановитьПараметр("Склад", ПараметрыЗаполнения.Склад);
	КонецЕсли;
	
	ТаблицаОрдера = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОрдера.Колонки.Количество.Имя   = "КоличествоВОрдере";
	ТаблицаОрдера.Колонки.Распоряжение.Имя = "ЗаказНаВнутреннееПотребление";
	ТаблицаОрдера.Колонки.Собирается.Имя = "КоличествоСобирается";
	
	// Распределение полученных таблиц
	
	Товары.Индексы.Добавить("ЗаказНаВнутреннееПотребление, " + ПараметрыЗаполнения.КлючевыеПоля);
	
	// Добавление количества заказов
	Ключ = "ЗаказНаВнутреннееПотребление, КодСтроки, " + ПараметрыЗаполнения.КлючевыеПоля;
	
	Условие = "ПО [Количество]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаЗаказы, Товары, "КоличествоВЗаказе", Ключ, Условие, Истина);
	
	// Добавление отдельными строками нераспределенного количества заказов
	НакладныеСервер.ДополнитьТаблицу(ТаблицаЗаказы, Товары, "КоличествоВЗаказе");
	
	// Добавление количества ордеров.
	Ключ = "ЗаказНаВнутреннееПотребление, " + ПараметрыЗаполнения.КлючевыеПоля;
	
	// Есть накладные и заказы
	Условие = "[Количество], [КоличествоВЗаказе], ПО [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Есть заказы, нет накладных
	Условие = "НЕ [Количество], [КоличествоВЗаказе], ПО [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Есть накладные, нет заказов
	Условие = "[Количество], НЕ [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Добавление отдельными строками нераспределенного количества ордеров
	НакладныеСервер.ДополнитьТаблицу(ТаблицаОрдера, Товары, "КоличествоВОрдере");
	
	// Дополнительная информация - сколько товара собирается
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоСобирается", Ключ, "", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Склад,Дата,ХозяйственнаяОперация,Статус";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		
		ВозможенУчетСерийВЭксплуатации = Ложь;
	
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры =
			ВозможенУчетСерийВЭксплуатации
			ИЛИ ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
			
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям =
			ВозможенУчетСерийВЭксплуатации 
			ИЛИ ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		
	Иначе
		
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		
	КонецЕсли;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию
		И Объект.Статус = Перечисления.СтатусыВнутреннихПотреблений.Принято Тогда
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаТМЦВЭксплуатацию);
	КонецЕсли;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	
	ПараметрыУказанияСерий.ЭтоНакладная	= Истина;
	ПараметрыУказанияСерий.Дата	= Объект.Дата;
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");

	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Товары_ЗаказНаВнутреннееПотребление");
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Товары_КодСтроки");
	
	ПараметрыУказанияСерий.РегистрироватьСерии = НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// 
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//		
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	&Склад                     КАК Склад,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Назначение          КАК Назначение,
	|	Товары.Серия               КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
	|	Товары.Количество          КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Склад
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	Товары.Склад             КАК Склад,
	|	Товары.Номенклатура      КАК Номенклатура,
	|	Товары.Характеристика    КАК Характеристика,
	|	Товары.Назначение        КАК Назначение,
	|	Товары.Серия             КАК Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Склад
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ
	|	&Склад               КАК Склад,
	|	Серии.Номенклатура   КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Назначение     КАК Назначение,
	|	Серии.Количество     КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 3
	|ВЫБРАТЬ
	|	Серии.Склад             КАК Склад,
	|	Серии.Номенклатура      КАК Номенклатура,
	|	Серии.Характеристика    КАК Характеристика,
	|	Серии.Назначение        КАК Назначение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Склад
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 4
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель КАК СтарыйСтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель КАК СтарыйСтатусУказанияСерийПолучатель,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Дата >= Склады.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|						ТОГДА
	|							ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|											И ТоварыДляЗапроса.Количество > 0
	|										ИЛИ Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					ИНАЧЕ
	|						ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ИЛИ Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 8
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеНаВнутренниеНужды
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|								И ТоварыДляЗапроса.Количество > 0
	|							ИЛИ Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА
	|							ВЫБОР
	|								КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|									ТОГДА 4
	|								ИНАЧЕ 2
	|							КОНЕЦ
	|					ИНАЧЕ
	|						ВЫБОР
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|								ТОГДА 3
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерийОтправитель,
	|	ВЫБОР
	|		КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|				ИЛИ НЕ &ПриемкаТМЦВЭксплуатацию
	|			ТОГДА 0
	|		КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСерииТМЦВЭксплуатации
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 20
	|					ИНАЧЕ 19
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерийПолучатель
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.Склад = ТоварыДляЗапроса.Склад
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|			И ТоварыДляЗапроса.Назначение = СерииДляЗапроса.Назначение
	|			И ТоварыДляЗапроса.Склад = СерииДляЗапроса.Склад
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|			И ТоварыДляЗапроса.Склад = ПолитикиУчетаСерий.Склад
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ТоварыДляЗапроса.Склад = Склады.Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 5
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки                    КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
	|	Статусы.СтатусУказанияСерийПолучатель  КАК СтатусУказанияСерийПолучатель,
	|	ВЫБОР
	|		КОГДА Статусы.СтатусУказанияСерийПолучатель > 0
	|			ТОГДА Статусы.СтатусУказанияСерийПолучатель
	|		ИНАЧЕ Статусы.СтатусУказанияСерийОтправитель
	|	КОНЕЦ                                  КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерийОтправитель <> Статусы.СтарыйСтатусУказанияСерийОтправитель
	|		ИЛИ Статусы.СтатусУказанияСерийПолучатель <> Статусы.СтарыйСтатусУказанияСерийПолучатель
	|		ИЛИ ВЫБОР
	|				КОГДА Статусы.СтатусУказанияСерийПолучатель > 0
	|					ТОГДА Статусы.СтатусУказанияСерийПолучатель
	|				ИНАЧЕ Статусы.СтатусУказанияСерийОтправитель
	|			КОНЕЦ <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//	ЗначенияПолейДляОпределенияРаспоряжения - Структура - состав полей определяется значением
//		поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
//  ДокументСсылка - распоряжение на поступление или отгрузку.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	
	Если ЗначенияПолейДляОпределенияРаспоряжения.Товары_КодСтроки <> 0 Тогда 
		Возврат ЗначенияПолейДляОпределенияРаспоряжения.Товары_ЗаказНаВнутреннееПотребление;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет серии товаров по расходным ордерам, выписанным на основе этого документа.
//
// Параметры:
//  Объект - ДокументОбъект.ВнутреннееПотреблениеТоваров, ДанныеФормыСтруктура - заполняемый документ.
//
Процедура ЗаполнитьСерииПоОтгрузке(Объект) Экспорт
	
	ПараметрыИспользованияСерийНаСкладе = Новый Структура("Склад", Объект.Склад);
	
	УстановитьПривилегированныйРежим(Истина);
	ВозможенУчетСерийВЭксплуатации = Ложь;
	ИспользоватьСерииНоменклатурыСклад = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",
																	ПараметрыИспользованияСерийНаСкладе);
	ИспользоватьОрдернуюСхемуПриОтгрузке = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Объект.Склад, Объект.Дата);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнятьСерии = ВозможенУчетСерийВЭксплуатации
						И ИспользоватьСерииНоменклатурыСклад
						И ИспользоватьОрдернуюСхемуПриОтгрузке;
	
	Если Не ЗаполнятьСерии Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПотребленияТоваров.ЗаказНаВнутреннееПотребление КАК Ссылка
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	&Товары КАК ПотребленияТоваров
	|ГДЕ
	|	ПотребленияТоваров.ЗаказНаВнутреннееПотребление <> &РаспоряжениеПоУмолчанию
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	РасходныеОрдера.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РасходныеОрдера
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныеОрдера
	|
	|ГДЕ
	|	РасходныеОрдера.Проведен
	|	И РасходныеОрдера.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК Товары
	|			ГДЕ
	|				Товары.Ссылка = РасходныеОрдера.Ссылка
	|				И ВЫБОР
	|					КОГДА &ПотреблениеПоЗаказам
	|						ТОГДА Товары.Распоряжение В
	|								(ВЫБРАТЬ
	|									Распоряжения.Ссылка КАК Ссылка
	|								ИЗ
	|									Распоряжения КАК Распоряжения)
	|					ИНАЧЕ Товары.Распоряжение = &Ссылка
	|				КОНЕЦ
	|			)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ
	|	ПотребленияТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПотребленияТоваров
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ПотребленияТоваров
	|
	|ГДЕ
	|	ПотребленияТоваров.Проведен
	|	И ПотребленияТоваров.Ссылка <> &Ссылка
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ВнутреннееПотреблениеТоваров.Товары КАК Товары
	|			ГДЕ
	|				Товары.Ссылка = ПотребленияТоваров.Ссылка
	|				И Товары.ЗаказНаВнутреннееПотребление В
	|						(ВЫБРАТЬ
	|							Распоряжения.Ссылка КАК Ссылка
	|						ИЗ
	|							Распоряжения КАК Распоряжения)
	|			)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 3
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РасходныеОрдера КАК РасходныеОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК Товары
	|		ПО Товары.Ссылка = РасходныеОрдера.Ссылка
	|			И НЕ ВЫБОР
	|				КОГДА &ПотреблениеПоЗаказам
	|					ТОГДА Товары.Распоряжение В
	|							(ВЫБРАТЬ
	|								Распоряжения.Ссылка КАК Ссылка
	|							ИЗ
	|								Распоряжения КАК Распоряжения)
	|				ИНАЧЕ Товары.Распоряжение = &Ссылка
	|			КОНЕЦ
	|
	|ГДЕ
	|	НЕ Товары.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	ПотребленияТоваров КАК ПотребленияТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК Товары
	|			ПО ПотребленияТоваров.Ссылка = Товары.Ссылка
	|			И НЕ Товары.ЗаказНаВнутреннееПотребление В
	|					(ВЫБРАТЬ
	|						Распоряжения.Ссылка КАК Ссылка
	|					ИЗ
	|						Распоряжения КАК Распоряжения)
	|
	|ГДЕ
	|	НЕ Товары.Ссылка ЕСТЬ NULL";
	
	РаспоряжениеПоУмолчанию = Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка();
	
	ВыгружаемыеКолонки = "НомерСтроки, Номенклатура ,Характеристика, Назначение, Количество, 
							|ЗаказНаВнутреннееПотребление";
	Товары = Объект.Товары.Выгрузить(, ВыгружаемыеКолонки);
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПотреблениеПоЗаказам", Объект.ПотреблениеПоЗаказам);
	Запрос.УстановитьПараметр("РаспоряжениеПоУмолчанию", РаспоряжениеПоУмолчанию);
	Запрос.УстановитьПараметр("Товары", Товары);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура		КАК Номенклатура,
	|	Остатки.Характеристика		КАК Характеристика,
	|	Остатки.Назначение			КАК Назначение,
	|	Остатки.Серия				КАК Серия,
	|	СУММА(Остатки.Количество)	КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Номенклатура		КАК Номенклатура,
	|		Товары.Характеристика	КАК Характеристика,
	|		Товары.Назначение		КАК Назначение,
	|		Товары.Серия			КАК Серия,
	|		Товары.Количество		КАК Количество
	|	ИЗ
	|		РасходныеОрдера КАК РасходныеОрдера
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК Товары
	|			ПО Товары.Ссылка = РасходныеОрдера.Ссылка
	|				И Товары.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить)
	|				И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	ГДЕ
	|		НЕ Товары.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.Номенклатура		КАК Номенклатура,
	|		Товары.Характеристика	КАК Характеристика,
	|		Товары.Назначение		КАК Назначение,
	|		Товары.Серия			КАК Серия,
	|		-Товары.Количество		КАК Количество
	|	ИЗ
	|		ПотребленияТоваров КАК ПотребленияТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК Товары
	|			ПО ПотребленияТоваров.Ссылка = Товары.Ссылка
	|				И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	ГДЕ
	|		НЕ Товары.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Серии.Номенклатура		КАК Номенклатура,
	|		Серии.Характеристика	КАК Характеристика,
	|		Серии.Назначение		КАК Назначение,
	|		Серии.Серия				КАК Серия,
	|		-Серии.Количество		КАК Количество
	|	ИЗ
	|		ПотребленияТоваров КАК ПотребленияТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Серии КАК Серии
	|			ПО ПотребленияТоваров.Ссылка = Серии.Ссылка
	|	ГДЕ
	|		НЕ Серии.Ссылка ЕСТЬ NULL
	|	
	|	) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.Назначение,
	|	Остатки.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.Количество) <> 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	Товары.НомерСтроки		КАК НомерСтроки,
	|	Товары.Номенклатура		КАК Номенклатура,
	|	Товары.Характеристика	КАК Характеристика,
	|	Товары.Назначение		КАК Назначение,
	|	Товары.Количество		КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Количество > 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ВсяНоменклатура
	|		ПО Товары.Номенклатура = ВсяНоменклатура.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВсяНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|			И (ЕСТЬNULL(ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСерииТМЦВЭксплуатации, ЛОЖЬ))
	|
	|ГДЕ
	|	НЕ ВидыНоменклатуры.Ссылка ЕСТЬ NULL
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 3
	|ВЫБРАТЬ
	|	Товары.Номенклатура			КАК Номенклатура,
	|	Товары.Характеристика		КАК Характеристика,
	|	Товары.Назначение			КАК Назначение,
	|	СУММА(Товары.Количество)	КАК Количество
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ВсяНоменклатура
	|		ПО Товары.Номенклатура = ВсяНоменклатура.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВсяНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|			И (ЕСТЬNULL(ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСерииТМЦВЭксплуатации, ЛОЖЬ))
	|
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаСерийОрдера = РезультатЗапроса[0].Выгрузить();
	
	ПоляПоискаБезСерий	= "Номенклатура, Характеристика, Назначение";
	ПоляПоискаССерией	= "Номенклатура, Характеристика, Назначение, Серия";
	
	ОтборСтрокБезСерий	= Новый Структура(ПоляПоискаБезСерий);
	ОтборСтрокССерией	= Новый Структура(ПоляПоискаССерией);
	
	ТаблицаСерийОрдера.Индексы.Добавить(ПоляПоискаБезСерий);
	ТаблицаСерийОрдера.Индексы.Добавить(ПоляПоискаССерией);
	
	ДействияСоСтрокой = Новый Структура("ПересчитатьКоличествоУпаковок");
	
	ВыборкаНомеровСтрокССериями = РезультатЗапроса[2].Выбрать();
	
	Пока ВыборкаНомеровСтрокССериями.Следующий() Цикл
		
		СтрокаТоваров = Объект.Товары[ВыборкаНомеровСтрокССериями.НомерСтроки - 1];
		
		ОстатокПоТовару = СтрокаТоваров.Количество;
		ОстатокПоТоваруИсходный = ОстатокПоТовару;
		
		ОтборСтрок = ?(ЗначениеЗаполнено(СтрокаТоваров.Серия), ОтборСтрокССерией, ОтборСтрокБезСерий);
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТоваров);
		
		СтрокиССериями = ТаблицаСерийОрдера.НайтиСтроки(ОтборСтрок);
		
		Если СтрокиССериями.Количество() Тогда
			
			ПерваяСтрока = Истина;
			
			Для Каждого СтрокаССерией Из СтрокиССериями Цикл
				
				Если СтрокаССерией.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ПерваяСтрока Тогда
					НоваяСтрока = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
					
					СтрокаТоваров = НоваяСтрока;
				КонецЕсли;
				
				ПерваяСтрока = Ложь;
				КоличествоЗаполнения = Мин(ОстатокПоТовару, СтрокаССерией.Количество);
				
				СтрокаТоваров.Серия = СтрокаССерией.Серия;
				СтрокаТоваров.Количество = КоличествоЗаполнения;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, ДействияСоСтрокой, Неопределено);
				
				СтрокаССерией.Количество = СтрокаССерией.Количество - КоличествоЗаполнения;
				
				ОстатокПоТовару = ОстатокПоТовару - КоличествоЗаполнения;
				
				Если ОстатокПоТовару <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОстатокПоТовару > 0 Тогда
			
			Если ОстатокПоТоваруИсходный > ОстатокПоТовару Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
				
				СтрокаТоваров = НоваяСтрока;
				СтрокаТоваров.Количество = ОстатокПоТовару;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, ДействияСоСтрокой, Неопределено);
			КонецЕсли;
			
			СтрокаТоваров.Серия = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Серии.Очистить();
	
	ОтборСтрок = ОтборСтрокБезСерий;
	
	ВыборкаТовары = РезультатЗапроса[3].Выбрать();
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		ОстатокПоТовару = ВыборкаТовары.Количество;
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ВыборкаТовары);
		
		СтрокиССериями = ТаблицаСерийОрдера.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаССерией Из СтрокиССериями Цикл
			
			Если СтрокаССерией.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
			
			КоличествоЗаполнения = Мин(ОстатокПоТовару,СтрокаССерией.Количество);
			
			НоваяСтрока.Серия = СтрокаССерией.Серия;
			НоваяСтрока.Количество = КоличествоЗаполнения;
			
			СтрокаССерией.Количество = СтрокаССерией.Количество - КоличествоЗаполнения;
			
			ОстатокПоТовару = ОстатокПоТовару - КоличествоЗаполнения;
			
			Если ОстатокПоТовару = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СменаСтатуса

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
// 		МассивДокументов - Массив из ДокументСсылка.ВнутреннееПотреблениеТоваров - Массив ссылок на документы, которые надо проверять
// 		НовыйСтатус - Строка - Имя нового статуса
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
// 		Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыВнутреннихПотреблений[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка                КАК Ссылка,
	|	ТаблицаДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус)                  КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ                                   КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен              КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления       КАК ПометкаУдаления,
	|	ИСТИНА                                  КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции// СформироватьЗапросПроверкиПриСменеСтатуса();

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
// 		ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
// 		НовыйСтатус - ПеречислениеСсылка.СтатусыВнутреннихПотреблений - Новый статус
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыВнутреннихПотреблений[НовыйСтатус];
	
	Если ВыборкаПроверки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		
		ТекстОшибки = НСтр("ru='У документа %1 статус ""%2"" не установлен, т.к. статусы не используются для операции, выбранной в документе'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ВыборкаПроверки.Ссылка, ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка,,, Отказ);
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Возвращает таблицу используемых статусов документа учитывая зависимости от функциональных опций и иных параметров.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка
//
Функция СтатусыДокументаИзменяемыеИзСписка() Экспорт
	
	Таблица = ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыВнутреннихПотреблений") Тогда
		ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыВнутреннихПотреблений.Отгружено);
		ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыВнутреннихПотреблений.Принято);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает список всех хоз. операций, используемых в документе.
// 
// Возвращаемое значение:
// 	Массив - Список всех хоз. операций, используемых в документе.
//
Функция ХозяйственныеОперацииДокумента() Экспорт

	СписокОпераций = Новый Массив;
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию);
	
	ВнутреннееПотреблениеТоваровЛокализация.ХозяйственныеОперацииДокумента(СписокОпераций);	
	
	Возврат СписокОпераций;
	
КонецФункции

// Функция определяет реквизиты выбранного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнутреннееПотреблениеТоваров - Ссылка на документ.
//
// Возвращаемое значение:
//	Структура - реквизиты внутреннего потребления товаров.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
	Иначе
		Дата = Дата(1,1,1);
		Организация = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация",
		Дата,
		Организация,);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Заполняет массив реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//  ХозяйственнаяОперация	 - ПеречислениеСсылка.ХозяйственныеОперации	 -
//  МассивВсехРеквизитов	 - Массив									 - Массив всех реквизитов, зависимых от хозяйственной операции
//  МассивРеквизитовОперации - Массив									 - Массив имен реквизитов, используемыз в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	ВнутреннееПотреблениеТоваровЛокализация.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
КонецПроцедуры

// Устанавливает условное оформление типа документа в динамическом списке по хозяйственной операции документа.
//
// Параметры:
//  Список - ДинамическийСписок - Динамической список формы.
//
Процедура УстановитьУсловноеОформлениеСписка(Список) Экспорт
	
	ОформляемоеПоле = "Тип";
	
	// Списание на активы/пассивы
	
	Элемент = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тип");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Списание на расходы'"));
	
	ВнутреннееПотреблениеТоваровЛокализация.УстановитьУсловноеОформлениеСписка(Список);
	
КонецПроцедуры

// Инициализирует параметры заполнения вида деятельности НДС
//
// Параметры:
//  Объект - ДокументОбъект.ВнутреннееПотреблениеТоваров, ДанныеФормыСтруктура - документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	
	ПараметрыЗаполнения.Организация             = Объект.Организация;
	ПараметрыЗаполнения.Дата                    = Объект.Дата;
	ПараметрыЗаполнения.Склад                   = Объект.Склад;
	ПараметрыЗаполнения.Договор                 = Неопределено;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию Тогда
		ПараметрыЗаполнения.СписаниеТоваровИРаботНаСтатьи = Истина;
	КонецЕсли;
	
	
	ВнутреннееПотреблениеТоваровЛокализация.ПараметрыЗаполненияВидаДеятельностиНДС(Объект, ПараметрыЗаполнения);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти


// Осуществляет инициализацию структуры состояния выполнения документа
//
// Возвращаемое значение:
//  Структура - содержит следующие ключи:
//     * ВыводитьТаблицыОтгрузка   - Число -
//     * ЭтоНакладная              - Булево -
//     * СкладВШапке               - Булево -
//     * ТекстТоварУслугаОтгрузка  - Строка -
//     * ИмяПоляНакладнаяПоЗаказам - Строка -
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка", 1);
	СтруктураСостояние.Вставить("ЭтоНакладная", Истина);
	СтруктураСостояние.Вставить("СкладВШапке", Истина);
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка", НСтр("ru = 'Товар'"));
	СтруктураСостояние.Вставить("ИмяПоляНакладнаяПоЗаказам", "ПотреблениеПоЗаказам");
	
	Возврат СтруктураСостояние;
	
КонецФункции

// Параметры встраивания направлений деятельности в документ.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
// Возвращаемое значение:
//  см. НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности.
Функция ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма) Экспорт
	
	ПорядокОбработкиДокумента = НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности();
	ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляЗаполненияНазначения = "Товары";
	ТаблицаУсловий = НаправленияДеятельностиСервер.УсловияОбработкиНазначенийВСтроках("ТипНоменклатуры,КодСтроки");
	ПорядокОбработкиДокумента.УсловияОбработкиСтрок.Вставить("Товары", ТаблицаУсловий);
	ПорядокОбработкиДокумента.ИмяЭлементаФормыОбособленно = "ТоварыОбособленно";
	ПорядокОбработкиДокумента.ИмяГруппыЭлементовКомандыОбособленно = "ТоварыГруппаКомандыОбособленно";
	ПорядокОбработкиДокумента.ИмяРеквизитаПоЗаказу = "ПотреблениеПоЗаказам";
	
	Возврат ПорядокОбработкиДокумента;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Склад)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Печать

// Возвращает правила печати печатной формы Задания на отбор (размещение) товаров.
//
// Возвращаемое значение:
//	Структура - состав свойств см. Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ДобавитьКомандуПечати.
//
Функция ПравилаПечатиЗаданияНаОтборРазмещение() Экспорт
	
	ПравилаПечатиЗадания = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ПравилаПечатиЗаданияНаОтборРазмещение();
	ПравилаПечатиЗадания.ИспользуютсяИсправленияДокумента = Истина;
	
	Возврат ПравилаПечатиЗадания;
	
КонецФункции

#КонецОбласти

// Возвращает структуру с наименованием табличных частей документа, хранящих информацию о товарах.
//
// Возвращаемое значение:
//	Структура - коллекция, содержащая следующие наименования табличных частей:
//		* Товары - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные о товарах документа.
//	
Функция КоллекцияТабличныхЧастейТоваров() Экспорт
	
	ТаблицыДокумента = Новый Структура("Товары");
	
	Возврат ТаблицыДокумента;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеДокументаПоЗаказамОрдерам

Функция ДанныеТаблицыТоварыДокумента(Накладная) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки                  КАК НомерСтроки,
	|	Таблица.Номенклатура                 КАК Номенклатура,
	|	Таблица.Характеристика               КАК Характеристика,
	|	Таблица.Упаковка                     КАК Упаковка,
	|	Таблица.КоличествоУпаковок           КАК КоличествоУпаковок,
	|	Таблица.Количество                   КАК Количество,
	|	Таблица.КодСтроки                    КАК КодСтроки,
	|	Таблица.СтатусУказанияСерий          КАК СтатусУказанияСерий,
	|	Таблица.СтатьяРасходов               КАК СтатьяРасходов,
	|	Таблица.АналитикаРасходов            КАК АналитикаРасходов,
	|	ВЫБОР КОГДА Таблица.Ссылка.ПотреблениеПоЗаказам
	|		ТОГДА Таблица.ЗаказНаВнутреннееПотребление
	|		ИНАЧЕ Таблица.Ссылка
	|	КОНЕЦ                                КАК ЗаказНаВнутреннееПотребление,
	|	Таблица.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	Таблица.Серия                        КАК Серия,
	|	Таблица.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры,
	|	Таблица.ГруппаПродукции              КАК ГруппаПродукции,
	|	Таблица.Назначение                   КАК Назначение,
	|
	|	&ВнутреннееПотреблениеТоваров_ТоварыЛокализация
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Накладная";
	
	ВнутреннееПотреблениеТоваровЛокализация.ДобавитьВТекстЗапросаРеквизитыТаблицыТовары(ТекстЗапроса, "Таблица");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Накладная", Накладная);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


// Возвращает параметры выбора статей и аналитик.
// 
// Возвращаемое значение:
//  см. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики
//
Функция ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация) Экспорт
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект.Товары";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи = "ТипСтатьи";
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ТоварыСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ТоварыАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ТоварыАналитикаАктивовПассивов");
	
	ВнутреннееПотреблениеТоваровЛокализация.ПараметрыВыбораСтатейИАналитик(
		ПараметрыВыбора,
		ХозяйственнаяОперация);
	
	Возврат ПараметрыВыбора;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда

		СтандартнаяОбработка = Ложь;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Списание товаров на хознужды %1 от %2'"),
			Данные.Номер,
			Данные.Дата);
		
	ИначеЕсли ЗначениеЗаполнено(Данные.ХозяйственнаяОперация) Тогда

		СтандартнаяОбработка = Ложь;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %2 от %3'"),
			Данные.ХозяйственнаяОперация,
			Данные.Номер,
			Данные.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Номенклатура");
		СтруктураПолей.Вставить("Характеристика");
		СтруктураПолей.Вставить("ФизическоеЛицо");
		СтруктураПолей.Вставить("СтатьяРасходов");
		СтруктураПолей.Вставить("АналитикаРасходов");
		
		УсловиеОтбора = "ИСТИНА";
		Для Каждого КлючИЗначениеОтбора Из Параметры.Отбор Цикл
			Если СтруктураПолей.Свойство(КлючИЗначениеОтбора.Ключ) Тогда
				УсловиеОтбора = УсловиеОтбора + "
					|	И Строки." + КлючИЗначениеОтбора.Ключ + " = &" + КлючИЗначениеОтбора.Ключ;
				Запрос.УстановитьПараметр(КлючИЗначениеОтбора.Ключ, КлючИЗначениеОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документы.Ссылка,
		|	Документы.Номер,
		|	Документы.Дата,
		|	Документы.ПометкаУдаления
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров КАК Документы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК Строки
		|	    ПО Строки.Ссылка = Документы.Ссылка
		|ГДЕ
		|	Документы.Номер ПОДОБНО &СтрокаПоиска
		|   И &УсловиеОтбора
		|";
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
		
		ДанныеВыбора = Новый СписокЗначений;

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстЗначения = СокрЛП(Выборка.Номер) + " (" + Выборка.Дата + ")";
			
			ЗначениеСписка = Новый Структура;
			ЗначениеСписка.Вставить("Значение", Выборка.Ссылка);
			ЗначениеСписка.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		
			ДанныеВыбора.Добавить(ЗначениеСписка, ТекстЗначения);
			
		КонецЦикла; 	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Если ИмяРегистра = "ТоварыКОтгрузке" Тогда
		ИсточникиДанных.Вставить("Товары.ЗаказНаВнутреннееПотребление");	
	КонецЕсли;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Дата                           КАК Период,
		|	Таблица.Номер                          КАК Номер,
		|	Таблица.Организация                    КАК Организация,
		|	Таблица.Склад                          КАК Склад,
		|	Таблица.Ссылка                         КАК Ссылка,
		|	Таблица.Подразделение                  КАК Подразделение,
		|	ЕСТЬNULL(Таблица.Подразделение.ВариантОбособленногоУчетаТоваров, ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПустаяСсылка)) КАК ВариантОбособленногоУчетаТоваров,
		|	Таблица.Дата                           КАК ДатаРаспоряжения,
		|	Таблица.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
		|	Таблица.ЗаказНаВнутреннееПотребление   КАК ЗаказНаВнутреннееПотребление,
		|	Таблица.ПотреблениеПоЗаказам           КАК ПоЗаказуНаВнутреннееПотребление,
		|	Таблица.ПотреблениеДляДеятельности     КАК ПотреблениеДляДеятельности,
		|	Таблица.НаправлениеДеятельности        КАК НаправлениеДеятельности,
		|	Таблица.Ответственный                  КАК Менеджер,
		|	Таблица.Сделка                         КАК Сделка,
		|	ЕСТЬNULL(Таблица.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ) КАК ОбособленныйУчетТоваровПоСделке,
		|	ВЫБОР
		|		КОГДА Таблица.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И Таблица.Дата >= Таблица.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                  КАК ОрдернаяСхемаПриОтгрузке,
		|	Таблица.Ответственный                  КАК Ответственный,
		|	Таблица.Комментарий                    КАК Комментарий,
		|	Таблица.Исправление                    КАК Исправление,
		|	Таблица.СторнируемыйДокумент           КАК СторнируемыйДокумент,
		|	Таблица.ИсправляемыйДокумент           КАК ИсправляемыйДокумент,
		|	Таблица.ПометкаУдаления                КАК ПометкаУдаления,
		|	Таблица.Проведен                       КАК Проведен,
		|	Таблица.Статус                         КАК Статус,
		|	НастройкиХозяйственныхОпераций.Ссылка  КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
		|		ПО Таблица.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";

	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Склад",                            Реквизиты.Склад);
	Запрос.УстановитьПараметр("Период",                           Реквизиты.Период);
	Запрос.УстановитьПараметр("ДатаРаспоряжения",                 Реквизиты.ДатаРаспоряжения);
	Запрос.УстановитьПараметр("Организация",                      Реквизиты.Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",            Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ОрдернаяСхемаПриОтгрузке",         Реквизиты.ОрдернаяСхемаПриОтгрузке);
	Запрос.УстановитьПараметр("ЗаказНаВнутреннееПотребление",     Реквизиты.ЗаказНаВнутреннееПотребление);
	Запрос.УстановитьПараметр("ПоЗаказуНаВнутреннееПотребление",  Реквизиты.ПоЗаказуНаВнутреннееПотребление);
	Запрос.УстановитьПараметр("Сделка",                           Реквизиты.Сделка);
	Запрос.УстановитьПараметр("ОбособленныйУчетТоваровПоСделке",  Реквизиты.ОбособленныйУчетТоваровПоСделке);
	Запрос.УстановитьПараметр("ВариантОбособленногоУчетаТоваров", Реквизиты.ВариантОбособленногоУчетаТоваров);
	Запрос.УстановитьПараметр("Подразделение",                    Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ПотреблениеДляДеятельности",       Реквизиты.ПотреблениеДляДеятельности);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",          Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("Менеджер",                         Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("Валюта",                           Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("ПустойКлючСвязи",                  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("ПустаяСерия",                      Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеНазначение",                 Справочники.Назначения.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("СкладскаяОперация", Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды);
	
	Запрос.УстановитьПараметр("Номер",                            Реквизиты.Номер);
	Запрос.УстановитьПараметр("Ответственный",                    Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Комментарий",                      Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",                  Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                         Реквизиты.Проведен);
	
	Запрос.УстановитьПараметр("Исправление",                      Реквизиты.Исправление);
	Запрос.УстановитьПараметр("СторнируемыйДокумент",             Реквизиты.СторнируемыйДокумент);
	Запрос.УстановитьПараметр("ИсправляемыйДокумент",             Реквизиты.ИсправляемыйДокумент);
	
	Запрос.УстановитьПараметр("НастройкаХозяйственнойОперации",   Реквизиты.НастройкаХозяйственнойОперации);
	Запрос.УстановитьПараметр("Статус",                           Реквизиты.Статус);
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru='Внутреннее потребление товаров'"));

	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли; 
	
	ВнутреннееПотреблениеТоваровЛокализация.ДополнитьЗначенияПараметровПроведения(ЗначенияПараметровПроведения, Реквизиты);
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;

	ЗапросАналитик = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Серия КАК Серия
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаВидыЗапасов.ВидЗапасов.ВладелецТовара КАК Склад,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|		&ПустаяСерия КАК Серия
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаВидыЗапасов.ВидЗапасов.ВладелецТовара КАК Склад,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		&ПустоеНазначение КАК Назначение,
	|		&ПустаяСерия КАК Серия
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВидыЗапасовВладельца.ВладелецТовара КАК Склад,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|		&ПустаяСерия КАК Серия
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ВидыЗапасов КАК ВидыЗапасовВладельца
	|		ПО
	|			ТаблицаВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца = ВидыЗапасовВладельца.Ссылка
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И ВидыЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВидыЗапасовВладельца.ВладелецТовара КАК Склад,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		&ПустоеНазначение КАК Назначение,
	|		&ПустаяСерия КАК Серия
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ВидыЗапасов КАК ВидыЗапасовВладельца
	|		ПО
	|			ТаблицаВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца = ВидыЗапасовВладельца.Ссылка
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И ВидыЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		&ПустоеНазначение КАК Назначение,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Серия КАК Серия
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|	) КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаТовары.Номенклатура = Аналитика.Номенклатура
	|		И ТаблицаТовары.Характеристика = Аналитика.Характеристика
	|		И ТаблицаТовары.Назначение = Аналитика.Назначение
	|		И ТаблицаТовары.Серия = Аналитика.Серия
	|		И ТаблицаТовары.Склад = Аналитика.МестоХранения
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Назначение,
	|	ТаблицаТовары.Серия
	|");
	
	ЗапросАналитик.УстановитьПараметр("Ссылка",                 Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Подразделение",          Запрос.Параметры.Подразделение);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение",       Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("ПустаяСерия",            Справочники.СерииНоменклатуры.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("ХозяйственнаяОперация",  Запрос.Параметры.ХозяйственнаяОперация);
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям",
		Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаВнутреннееПотребление";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки                  КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)     КАК ВидДвижения,
		|	ТаблицаТовары.Ссылка.Дата                  КАК Период,
		|	ТаблицаТовары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
		|	ТаблицаТовары.Номенклатура                 КАК Номенклатура,
		|	ТаблицаТовары.Характеристика               КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14)
		|			ТОГДА ТаблицаТовары.Серия
		|	КОНЕЦ                                      КАК Серия,
		|	ТаблицаТовары.КодСтроки                    КАК КодСтроки,
		|	&Склад                                     КАК Склад,
		|	ТаблицаТовары.Количество                   КАК Заказано,
		|	ТаблицаТовары.Количество                   КАК КОформлению
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.КодСтроки <> 0
		|	И &ПоЗаказуНаВнутреннееПотребление
		|
		|";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаСерии.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество,
	|	&Склад КАК Отправитель,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка) КАК ПомещениеОтправителя,
	|	НЕОПРЕДЕЛЕНО КАК ПомещениеПолучателя,
	|	&СкладскаяОперация КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НЕ &ОрдернаяСхемаПриОтгрузке КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Количество,
	|	&Склад,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	&СкладскаяОперация,
	|	&Ссылка,
	|	&Период,
	|	&Ссылка,
	|	НЕ &ОрдернаяСхемаПриОтгрузке
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаВидыЗапасов.НомерСтроки                КАК НомерСтроки,
		|	Справочник.ВидЗапасовВладельца                КАК ВидЗапасовВладельца,
		|	ТаблицаВидыЗапасов.ВидЗапасов                 КАК ВидЗапасов,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
		|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры
		|		ИНАЧЕ АналитикаСебестоимости.КлючАналитики
		|	КОНЕЦ                                         КАК АналитикаУчетаСебестоимости,
		|	Аналитика.Номенклатура                        КАК Номенклатура,
		|	Аналитика.Характеристика                      КАК Характеристика,
		|	Аналитика.Назначение                          КАК Назначение,
		|	ТаблицаВидыЗапасов.НомерГТД                   КАК НомерГТД,
		|	ТаблицаВидыЗапасов.Количество                 КАК Количество,
		|	ТаблицаВидыЗапасов.КоличествоПоРНПТ           КАК КоличествоПоРНПТ,
		|	&ХозяйственнаяОперация                        КАК ХозяйственнаяОперация,
		// Если мы списываем товары или комплектующие на статью по модернизации или покупке ОС, НМА
		// то весь входящий НДС приводим к общему знаменателю (всегда ""висит"" остаток на 19 счета).
		|	ВЫБОР
		|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			И ТаблицаВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА))
		|			И ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ВводОСВэксплуатацию)
		|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
		|	ИНАЧЕ
		|		&ПотреблениеДляДеятельности
		|	КОНЕЦ                                         КАК НалогообложениеНДС,
		|	ТаблицаВидыЗапасов.СтатьяРасходов             КАК СтатьяРасходов,
		|	ТаблицаВидыЗапасов.АналитикаРасходов          КАК АналитикаРасходов,
		|	ТаблицаВидыЗапасов.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
 		|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя       КАК КорВидЗапасов,
		|	КлючиКомитента.КлючАналитики                  КАК АналитикаКомитента,
		|	КлючиКомитентаБезНазначения.КлючАналитики     КАК АналитикаКомитентаБезНазначения,
		|	ВЫБОР КОГДА Справочник.ВладелецТовара ССЫЛКА Справочник.Организации
		|		ТОГДА АналитикаРасчетовИнтеркампани.КлючАналитики
		|		ИНАЧЕ АналитикаРасчетов.КлючАналитики
		|	КОНЕЦ                                         КАК АналитикаРасчетовСКомитентом,
		|	КлючиКомитента.МестоХранения				  КАК Комитент,
		|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов      КАК ТипЗапасов,
		|	ТаблицаВидыЗапасов.ИдентификаторСтроки        КАК ИдентификаторСтроки,
		|	ТаблицаВидыЗапасов.ИдентификаторФинЗаписи     КАК ИдентификаторФинЗаписи,
		|	КлючиПроизводства.КлючАналитики               КАК АналитикаПроизводства,
		|	Аналитика.СкладскаяТерритория.ЦеховаяКладовая КАК ЦеховаяКладовая
		|
		|ПОМЕСТИТЬ ВтВидыЗапасов
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
		|
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ВидыЗапасов КАК Справочник
		|	ПО
		|		ТаблицаВидыЗапасов.ВидЗапасов = Справочник.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
		|	ПО
		|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиКомитента
		|	ПО
		|		Аналитика.Номенклатура = КлючиКомитента.Номенклатура
		|		И Аналитика.Характеристика = КлючиКомитента.Характеристика
		|		И Аналитика.Назначение = КлючиКомитента.Назначение
		|		И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = КлючиКомитента.Серия
		|		И ТаблицаВидыЗапасов.ВидЗапасов.ВладелецТовара = КлючиКомитента.МестоХранения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиКомитентаБезНазначения
		|	ПО
		|		КлючиКомитента.Номенклатура = КлючиКомитентаБезНазначения.Номенклатура
		|		И КлючиКомитента.Характеристика = КлючиКомитентаБезНазначения.Характеристика
		|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = КлючиКомитентаБезНазначения.Назначение
		|		И КлючиКомитента.Серия = КлючиКомитентаБезНазначения.Серия
		|		И ТаблицаВидыЗапасов.ВидЗапасов.ВладелецТовара = КлючиКомитентаБезНазначения.МестоХранения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиПроизводства
		|	ПО
		|		Аналитика.Номенклатура = КлючиПроизводства.Номенклатура
		|		И Аналитика.Характеристика = КлючиПроизводства.Характеристика
		|		И Аналитика.Назначение = КлючиПроизводства.Назначение
		|		И ТаблицаВидыЗапасов.Серия = КлючиПроизводства.Серия
		|		И &Подразделение = КлючиПроизводства.МестоХранения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаСебестоимости
		|	ПО Аналитика.Номенклатура = АналитикаСебестоимости.Номенклатура
		|		И Аналитика.Характеристика = АналитикаСебестоимости.Характеристика
		|		И Аналитика.Серия = АналитикаСебестоимости.Серия
		|		И Аналитика.МестоХранения = АналитикаСебестоимости.МестоХранения
		|		И &ПустоеНазначение = АналитикаСебестоимости.Назначение
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|	ПО
		|		ТаблицаВидыЗапасов.СтатьяРасходов = СтатьиРасходов.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетов
		|		ПО АналитикаРасчетов.Организация = &Организация
		|		И АналитикаРасчетов.Партнер = Справочник.ВладелецТовара
		|		И АналитикаРасчетов.Контрагент = Справочник.Контрагент
		|		И АналитикаРасчетов.Договор = Справочник.Договор
		|		И АналитикаРасчетов.НаправлениеДеятельности = ТаблицаВидыЗапасов.Назначение.НаправлениеДеятельности
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетовИнтеркампани
		|		ПО АналитикаРасчетовИнтеркампани.Организация = &Организация
		|		И АналитикаРасчетовИнтеркампани.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|		И АналитикаРасчетовИнтеркампани.Контрагент = Справочник.Контрагент
		|		И АналитикаРасчетовИнтеркампани.Договор = Справочник.Договор
		|		И АналитикаРасчетов.НаправлениеДеятельности = ТаблицаВидыЗапасов.Назначение.НаправлениеДеятельности
		|ГДЕ
		|	ТаблицаВидыЗапасов.Ссылка = &Ссылка";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период КАК Период,
		|	&Склад КАК Склад,
		|	&Организация КАК ОрганизацияОтгрузки,
		|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации ТОГДА
		|		ТаблицаВидыЗапасов.ВидЗапасовВладельца.Организация
		|	ИНАЧЕ
		|		&Организация
		|	КОНЕЦ КАК Организация,
		|
		|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации ТОГДА
		|		ТаблицаВидыЗапасов.ВидЗапасовВладельца
		|	ИНАЧЕ
		|		ТаблицаВидыЗапасов.ВидЗапасов
		|	КОНЕЦ КАК ВидЗапасов,
		|
		|	ТаблицаВидыЗапасов.Номенклатура КАК Номенклатура,
		|	ТаблицаВидыЗапасов.Характеристика КАК Характеристика,
		|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ТаблицаВидыЗапасов.Количество КАК Количество,
		|	ТаблицаВидыЗапасов.КоличествоПоРНПТ КАК КоличествоПоРНПТ,
		|	ВЫБОР 
		|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
		|				И ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			ТОГДА
		|				ВЫБОР ТаблицаВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС) ТОГДА
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства) ТОГДА
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА) ТОГДА
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
		|				КОНЕЦ
		|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
		|				И ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
		|		
		|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
		|		ИНАЧЕ
		|			&ХозяйственнаяОперация_Локализация
		|	КОНЕЦ КАК ХозяйственнаяОперация,
		|
		|	ТаблицаВидыЗапасов.НалогообложениеНДС КАК НалогообложениеНДС,
		|
		|	ТаблицаВидыЗапасов.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаВидыЗапасов.АналитикаРасходов КАК АналитикаРасходов,
		|	ТаблицаВидыЗапасов.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|
		|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
		|		ТаблицаВидыЗапасов.АналитикаКомитента
		|	ИНАЧЕ
		|		НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК КорАналитикаУчетаНоменклатуры,
		|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
		|		НЕОПРЕДЕЛЕНО
		|	ИНАЧЕ
		|		ТаблицаВидыЗапасов.КорВидЗапасов
		|	КОНЕЦ КАК КорВидЗапасов
		|ИЗ
		|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	ВнутреннееПотреблениеТоваровЛокализация.ДополнитьТекстЗапросаТаблицаТоварыОрганизаций(ТекстЗапроса);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизацийКПередаче";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                     КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	&Период                                            КАК Период,
	|	&Склад                                             КАК Склад,
	|	ТаблицаВидыЗапасов.ВидЗапасовВладельца.Организация КАК ОрганизацияВладелец,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                      КАК ВидЗапасовПродавца,
	|	ТаблицаВидыЗапасов.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Номенклатура                    КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика                  КАК Характеристика,
	|	ТаблицаВидыЗапасов.Количество                      КАК Количество,
	|	&ХозяйственнаяОперация                             КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.НалогообложениеНДС              КАК НалогообложениеНДС
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ТаблицаВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюОтчетовКомитенту";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки            КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)    КАК ВидДвижения,
	|	&Период                                   КАК Период,
	|	ТаблицаВидыЗапасов.ВидЗапасов             КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.АналитикаКомитентаБезНазначения КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов.Валюта      КАК Валюта,
	|	ТаблицаВидыЗапасов.НомерГТД               КАК НомерГТД,
	|	0                                         КАК Количество,
	|	0                                         КАК СуммаВыручки,
	|	ТаблицаВидыЗапасов.Количество             КАК КоличествоСписано,
	|	0                                         КАК КоличествоКОформлению,
	|	0                                         КАК КоличествоКОформлениюПоРНПТ,
	|	0                                         КАК СуммаВыручкиКОформлению,
	|	ТаблицаВидыЗапасов.Количество             КАК КоличествоСписаноКОформлению,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ       КАК КоличествоСписаноКОформлениюПоРНПТ,
	|	ТаблицаВидыЗапасов.Номенклатура           КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика         КАК Характеристика,
	|	&ХозяйственнаяОперация                    КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                              КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО                              КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.НалогообложениеНДС     КАК НалогообложениеНДС,
	|	ТаблицаВидыЗапасов.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеКомиссионныхТоваров) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ТаблицаВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	Строки.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			Строки.АналитикаКомитентаБезНазначения
	|		ИНАЧЕ
	|			ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|				ТОГДА Строки.АналитикаУчетаНоменклатуры
	|				ИНАЧЕ Строки.АналитикаУчетаСебестоимости
	|			КОНЕЦ
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	ВЫБОР КОГДА Строки.ЦеховаяКладовая И Строки.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) 
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ КАК РазделУчета,
	|
	|	ВЫБОР
	|		КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			Строки.ВидЗапасов
	|		КОНЕЦ КАК ВидЗапасов,
	|
	|	Строки.Количество КАК Количество,
	|	0 КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация_Условие1
	|			ТОГДА &ХозяйственнаяОперация_Значение1
	|		КОГДА &ХозяйственнаяОперация_Условие2
	|			ТОГДА &ХозяйственнаяОперация_Значение2
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		ИНАЧЕ
	|			&ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|
	|	Неопределено КАК КорРазделУчета,
	|	Строки.КорВидЗапасов КАК КорВидЗапасов,
	|	Неопределено КАК КорАналитикаУчетаНоменклатуры,
	|
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов ТОГДА 
	|		Строки.СтатьяРасходов
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяРасходовСписания,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов ТОГДА 
	|		Строки.АналитикаРасходов 
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаРасходов,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА 
	|		Строки.СтатьяРасходов
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяАктивовПассивов,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА 
	|		Строки.АналитикаАктивовПассивов 
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаАктивовПассивов,
	|	Строки.АналитикаРасчетовСКомитентом КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам И &ОбособленныйУчетТоваровПоСделке
	|			ТОГДА &Сделка
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			ТОГДА &Менеджер
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			ТОГДА &Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорАналитикаФинансовогоУчета,
	|	Строки.НалогообложениеНДС КАК КорВидДеятельностиНДС,
	|	ЕСТЬNULL(ПрочиеРасходы.ОрганизацияПолучатель, НЕОПРЕДЕЛЕНО) КАК КорОрганизация,
	|	&НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КАК ТипЗаписи,
	|	Строки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация_Условие1
	|			ТОГДА &НастройкаХозяйственнойОперации_Значение1
	|		КОГДА &ХозяйственнаяОперация_Условие2
	|			ТОГДА &НастройкаХозяйственнойОперации_Значение2
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаВСоставОС)
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаНаПрочиеЦели)
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаНаПрочиеЦели)
	|		ИНАЧЕ
	|			&НастройкаХозяйственнойОперации
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтПрочиеРасходы КАК ПрочиеРасходы
	|		ПО ПрочиеРасходы.СтатьяРасходов = Строки.СтатьяРасходов
	|		И ПрочиеРасходы.АналитикаРасходов = Строки.АналитикаРасходов
	|		И ПрочиеРасходы.ИдентификаторФинЗаписи = Строки.ИдентификаторФинЗаписи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	Строки.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	Строки.АналитикаУчетаСебестоимости КАК АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|	КОНЕЦ КАК РазделУчета,
	|
	|	Строки.ВидЗапасов КАК ВидЗапасов,
	|
	|	Строки.Количество КАК Количество,
	|	0 КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		ИНАЧЕ
	|			&ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|
	|	Неопределено КАК КорРазделУчета,
	|	Строки.КорВидЗапасов КАК КорВидЗапасов,
	|	Неопределено КАК КорАналитикаУчетаНоменклатуры,
	|
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов ТОГДА 
	|		Строки.СтатьяРасходов
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяРасходовСписания,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов ТОГДА 
	|		Строки.АналитикаРасходов 
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаРасходов,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА 
	|		Строки.СтатьяРасходов
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяАктивовПассивов,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА 
	|		Строки.АналитикаАктивовПассивов 
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаАктивовПассивов,
	|	Строки.АналитикаРасчетовСКомитентом КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам И &ОбособленныйУчетТоваровПоСделке
	|			ТОГДА &Сделка
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			ТОГДА &Менеджер
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			ТОГДА &Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорАналитикаФинансовогоУчета,
	|	Строки.НалогообложениеНДС КАК КорВидДеятельностиНДС,
	|	ЕСТЬNULL(ПрочиеРасходы.ОрганизацияПолучатель, НЕОПРЕДЕЛЕНО) КАК КорОрганизация,
	|	&НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КАК ТипЗаписи,
	|	Строки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаВСоставОС)
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаНаПрочиеЦели)
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаНаПрочиеЦели)
	|		ИНАЧЕ
	|			&НастройкаХозяйственнойОперации
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтПрочиеРасходы КАК ПрочиеРасходы
	|		ПО ПрочиеРасходы.СтатьяРасходов = Строки.СтатьяРасходов
	|		И ПрочиеРасходы.АналитикаРасходов = Строки.АналитикаРасходов
	|		И ПрочиеРасходы.ИдентификаторФинЗаписи = Строки.ИдентификаторФинЗаписи
	|ГДЕ
	|	Строки.ТипЗапасов В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца))";
	
	ВнутреннееПотреблениеТоваровЛокализация.ДополнитьТекстЗапросаТаблицаСебестоимостьТоваров(ТекстЗапроса);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураДоходыРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация_Условие1
	|			ТОГДА &ХозяйственнаяОперация_Значение1
	|		КОГДА &ХозяйственнаяОперация_Условие2
	|			ТОГДА &ХозяйственнаяОперация_Значение2
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		ИНАЧЕ
	|			&ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			Строки.АналитикаКомитентаБезНазначения
	|		ИНАЧЕ
	|			ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|				ТОГДА Строки.АналитикаУчетаНоменклатуры
	|				ИНАЧЕ Строки.АналитикаУчетаСебестоимости
	|			КОНЕЦ
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		Строки.Комитент
	|	ИНАЧЕ
	|		&Склад
	|	КОНЕЦ КАК Склад,
	|
	|	ВЫБОР
	|		КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			Строки.ВидЗапасов
	|		КОНЕЦ КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|
	|	Строки.СтатьяРасходов КАК СтатьяДоходовРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	Строки.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			ВидыЗапасов.Договор.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|				ТОГДА Строки.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности
	|				ИНАЧЕ Строки.АналитикаУчетаСебестоимости.Назначение.НаправлениеДеятельности
	|			КОНЕЦ
	|	КОНЕЦ КАК НаправлениеДеятельностиНоменклатуры,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|
	|	Строки.Количество КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		Строки.ВидЗапасов
	|	ИНАЧЕ
	|		Строки.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры
	|
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО Строки.ВидЗапасов = ВидыЗапасов.Ссылка";
	
	ВнутреннееПотреблениеТоваровЛокализация.ДополнитьТекстЗапросаТаблицаСебестоимостьТоваров(ТекстЗапроса);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                            КАК Партнер,
	|	НЕОПРЕДЕЛЕНО                            КАК Контрагент,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&Склад                                  КАК МестоХранения,
	|	&Подразделение                          КАК Подразделение,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	НЕОПРЕДЕЛЕНО                            КАК Валюта,
	|	0                                       КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	""""                                    КАК Дополнительно,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&Исправление                            КАК СторноИсправление,
	|	&СторнируемыйДокумент                   КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент                   КАК ИсправляемыйДокумент,
	|	&Период                                 КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТоварыДокумента.Ссылка				КАК Ссылка,
	|	ДанныеШапки.Дата					КАК Период,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|			И НЕ ТоварыДокумента.ЗаказНаВнутреннееПотребление В(НЕОПРЕДЕЛЕНО,
	|																ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка))
	|			ТОГДА ТоварыДокумента.ЗаказНаВнутреннееПотребление
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ								КАК Заказ,
	|	ДанныеШапки.Ссылка					КАК Накладная,
	|	ДанныеШапки.Исправление				КАК Исправление,
	|	ДанныеШапки.ИсправляемыйДокумент	КАК ИсправляемыйДокумент,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|			И НЕ ТоварыДокумента.ЗаказНаВнутреннееПотребление В(НЕОПРЕДЕЛЕНО,
	|																ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка))
	|			ТОГДА ТоварыДокумента.ЗаказНаВнутреннееПотребление.Подразделение
	|		ИНАЧЕ ДанныеШапки.Подразделение
	|	КОНЕЦ								КАК Получатель,
	|	ДанныеШапки.Склад					КАК Склад,
	|	ТоварыДокумента.Номенклатура		КАК Номенклатура,
	|	ТоварыДокумента.Характеристика		КАК Характеристика,
	|	ТоварыДокумента.Назначение			КАК Назначение,
	|	ТоварыДокумента.Серия				КАК Серия,
	|	ТоварыДокумента.СтатусУказанияСерийОтправитель	КАК СтатусУказанияСерий,
	|	ТоварыДокумента.Количество			КАК Количество,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|				И ТоварыДокумента.КодСтроки = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ								КАК СверхЗаказа,
	|	ЛОЖЬ								КАК Отменено,
	|	ИСТИНА								КАК ЭтоНакладная,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ								КАК ОтгрузкаПоЗаказу
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ДанныеШапки
	|		ПО ТоварыДокумента.Ссылка = ДанныеШапки.Ссылка
	|
	|ГДЕ
	|	ТоварыДокумента.Ссылка В(&Ссылка)
	|	И ТоварыДокумента.Количество <> 0";
	
	СкладыСервер.ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры

Процедура ОформитьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТоварыДокумента.Ссылка				КАК Ссылка,
	|	ДанныеШапки.Дата					КАК Период,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|			И НЕ ТоварыДокумента.ЗаказНаВнутреннееПотребление В(НЕОПРЕДЕЛЕНО,
	|																ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка))
	|			ТОГДА ТоварыДокумента.ЗаказНаВнутреннееПотребление
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ								КАК Заказ,
	|	ДанныеШапки.Ссылка					КАК Накладная,
	|	ДанныеШапки.Исправление				КАК Исправление,
	|	ДанныеШапки.ИсправляемыйДокумент	КАК ИсправляемыйДокумент,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|			И НЕ ТоварыДокумента.ЗаказНаВнутреннееПотребление В(НЕОПРЕДЕЛЕНО,
	|																ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка))
	|			ТОГДА ТоварыДокумента.ЗаказНаВнутреннееПотребление.Подразделение
	|		ИНАЧЕ ДанныеШапки.Подразделение
	|	КОНЕЦ								КАК Получатель,
	|	ДанныеШапки.Склад					КАК Склад,      
	// << 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
	|	ДанныеШапки.КР_Помещение			КАК КР_Помещение,      
	// >> 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
	|	ТоварыДокумента.Номенклатура		КАК Номенклатура,
	|	ТоварыДокумента.Характеристика		КАК Характеристика,
	|	ТоварыДокумента.Назначение			КАК Назначение,
	|	ТоварыДокумента.Серия				КАК Серия,
	|	ТоварыДокумента.СтатусУказанияСерийОтправитель	КАК СтатусУказанияСерий,
	|	ТоварыДокумента.Количество			КАК Количество,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|				И ТоварыДокумента.КодСтроки = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ								КАК СверхЗаказа,
	|	ЛОЖЬ								КАК Отменено,
	|	ИСТИНА								КАК ЭтоНакладная,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ								КАК ОтгрузкаПоЗаказу
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ДанныеШапки
	|		ПО ТоварыДокумента.Ссылка = ДанныеШапки.Ссылка
	|
	|ГДЕ
	|	ТоварыДокумента.Ссылка В(&Ссылка)
	|	И ТоварыДокумента.Количество <> 0";
	
	ОбъектМетаданных	= Метаданные.Документы.ВнутреннееПотреблениеТоваров;
	ИмяТЧСерии			= "Серии";

	// << 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188  
	// Используем структуру "Регистры" для универсальной передачи дополнительных параметров  
	// ВАЖНО! Значение свойства имени регистра "обычно" не определено,
	//	но если происходит перезаполнение регистров без перепроведения (ч/з эмуляцию)
	//	то в качестве значения свойства перезаполняемого регистра указан набор записей этого регистра
	//	По этой причине это значение надо "сохранить"                       
	ДоступноИзменениеТоварыКОтгрузке = КР_ПроведениеДокументовПереопределяемый.ДоступноИзменениеШаблоновПроведения(
			"ТоварыКОтгрузке", "ОформитьОтгрузкуТоваров", "ШаблонТекстаЗапросаТоварыКОтгрузке", Регистры);
	
	Если ДоступноИзменениеТоварыКОтгрузке Тогда 	
		
		ПараметрыШаблона = Регистры.ТоварыКОтгрузке.ШаблонТекстаЗапросаТоварыКОтгрузке;
		// Переопределеное полей выборки
		ПараметрыШаблона.КР_Собрано = 
		"ВЫБОР 
		|	КОГДА ДанныеДокумента.Склад.КР_АдресныйСкладБезордернойОтгрузки
		|		ТОГДА ДанныеДокумента.Количество
		|	ИНАЧЕ 0
		|КОНЕЦ";

	КонецЕсли;                  
	
	ДоступноИзменениеТоварыНаСкладах = 
		КР_ПроведениеДокументовПереопределяемый.ДоступноИзменениеШаблоновПроведения(
			"ТоварыНаСкладах", "ОформитьОтгрузкуТоваров", "ШаблонТекстаЗапросаТоварыНаСкладах", Регистры);
	
	Если ДоступноИзменениеТоварыНаСкладах Тогда 	
	
		ПараметрыШаблона = Регистры.ТоварыНаСкладах.ШаблонТекстаЗапросаТоварыНаСкладах;
		// Переопределеное полей выборки
		ПараметрыШаблона.КР_Помещение = 
		"ВЫБОР 
		|	КОГДА ДанныеДокумента.Склад.КР_АдресныйСкладБезордернойОтгрузки
		|		ТОГДА ДанныеДокумента.КР_Помещение
		|	ИНАЧЕ 0
		|КОНЕЦ";
		
	КонецЕсли;
	
	// >> 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188	 
	
	СкладыСервер.ОформитьОтгрузкуТоваров(Запрос,
										ТекстыЗапроса,
										Регистры,
										ТекстЗапросаДанныхДокумента,
										ОбъектМетаданных,
										ИмяТЧСерии);

	// << 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188 
	// Восстанавливаем значение свойства регистра
	Если ДоступноИзменениеТоварыНаСкладах Тогда 	
		Регистры.ТоварыНаСкладах = Регистры.ТоварыНаСкладах.ПредыдущееЗначение;   
	КонецЕсли;	        
	Если ДоступноИзменениеТоварыКОтгрузке Тогда 	
		Регистры.ТоварыКОтгрузке = Регистры.ТоварыКОтгрузке.ПредыдущееЗначение;   
	КонецЕсли;	
	// >> 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188 
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаБезНДСУпр,
	|	0 КАК СуммаСНДСРегл,
	|	0 КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаРасходы.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаРасходы
	|ГДЕ
	|	ТаблицаРасходы.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	ПолноеИмяДокумента = "Документ.ВнутреннееПотреблениеТоваров";
	
	ВЗапросеЕстьИсточник = Истина;
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ОрдернаяСхемаПриОтгрузке", 
		"ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ТаблицаТовары.Ссылка.Дата >= ТаблицаТовары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	ПереопределениеРасчетаПараметров.Вставить("ПоЗаказуНаВнутреннееПотребление",
		"ТаблицаТовары.Ссылка.ПотреблениеПоЗаказам");
	
	Если ИмяРегистра = "РаспределениеЗапасовДвижения" Тогда
		
		ТекстыЗапроса = Новый СписокЗначений();
		СинонимТаблицыДокумента = "ТабЧасть";
		ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса.ВыгрузитьЗначения(), ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
	ИначеЕсли ИмяРегистра = "ЗаказыНаВнутреннееПотребление" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
	
	Иначе
		
		ТекстЗапроса = ВнутреннееПотреблениеТоваровЛокализация.АдаптированныйТекстЗапросаДвиженийПоРегистру(
						ИмяРегистра, 
						СинонимТаблицыДокумента, 
						ВЗапросеЕстьИсточник, 
						ПереопределениеРасчетаПараметров);
						
	КонецЕсли;
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС"
		ИЛИ ИмяРегистра = "ДокументыПоНМА" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;

КонецФункции

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка         КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата    КАК Период,
		|	ТабЧасть.Номенклатура   КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Ссылка.Склад   КАК Склад,
		|	ТабЧасть.Назначение     КАК Назначение,
		|	ТабЧасть.Количество     КАК Количество,
		|	НЕОПРЕДЕЛЕНО            КАК ЗапланированныйРасходРаспределенногоЗапаса,
		|	ИСТИНА                  КАК КонтрольСвободногоОстатка,
		|	ЛОЖЬ                    КАК ИгнорироватьРезервыПриКонтролеОстатков
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.КодСтроки = 0";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		// Нет дополнительных параметров.
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтВидыЗапасов");
	ДополнительныеТаблицы.Добавить("ВтПрочиеРасходы");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[1], ТекстыЗапроса) Тогда
			ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область СписаниеНаРасходыАктивы_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов 					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НалогообложениеНДС			КАК ВидДеятельностиНДС,
	|	ТаблицаДокумента.ПотреблениеДляДеятельности		КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	ЕСТЬNULL(ПрочиеРасходы.ОрганизацияПолучатель, НЕОПРЕДЕЛЕНО) КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО 								    			КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.КорВидЗапасов				  			КАК КорВидЗапасов,
	|	ТаблицаВидыЗапасов.СтатьяРасходов 			    			КАК СтатьяРасходовАктивов,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаРасходов                
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаАктивовПассивов
	|	КОНЕЦ    						  			    			КАК АналитикаРасходовАктивов,
	|	&НаправлениеДеятельности    								КАК КорНаправлениеДеятельности,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО						КАК Сделка,
	|	ТаблицаДокумента.Подразделение		КАК Подразделение,
	|	ТаблицаДокумента.Ответственный		КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 						КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 		КАК Количество,
	|
	// Прочие поля
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация_Условие1
	|			ТОГДА &ХозяйственнаяОперация_Значение1
	|		КОГДА &ХозяйственнаяОперация_Условие2
	|			ТОГДА &ХозяйственнаяОперация_Значение2
	|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА ТаблицаВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
	|					КОГДА ТаблицаВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		ИНАЧЕ
	|			ТаблицаДокумента.ХозяйственнаяОперация
	|	КОНЕЦ 														 КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 						 КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.ИдентификаторФинЗаписи					 КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация_Условие1
	|			ТОГДА &НастройкаХозяйственнойОперации_Значение1
	|		КОГДА &ХозяйственнаяОперация_Условие2
	|			ТОГДА &НастройкаХозяйственнойОперации_Значение2
	|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА ТаблицаВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаВСоставОС)
	|					КОГДА ТаблицаВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаНаПрочиеЦели)
	|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаНаПрочиеЦели)
	|		ИНАЧЕ
	|			&НастройкаХозяйственнойОперации
	|	КОНЕЦ 														 КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтПрочиеРасходы КАК ПрочиеРасходы
	|		ПО ПрочиеРасходы.СтатьяРасходов = ТаблицаВидыЗапасов.СтатьяРасходов
	|		И ПрочиеРасходы.АналитикаРасходов = ТаблицаВидыЗапасов.АналитикаРасходов
	|		И ПрочиеРасходы.ИдентификаторФинЗаписи = ТаблицаВидыЗапасов.ИдентификаторФинЗаписи
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.ТипЗапасов В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца))";
	
	// Заменим шаблоны в тексте запроса.
	ВнутреннееПотреблениеТоваровЛокализация.ДополнитьТекстЗапросаТаблицаСебестоимостьТоваров(ТекстЗапроса, "ТаблицаВидыЗапасов");
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.СписаниеНаРасходыАктивы,
		ТекстЗапроса);
	
	#КонецОбласти

	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр",  Метаданные.Документы.ВнутреннееПотреблениеТоваров))
		И (ПравоДоступа("Добавление", Метаданные.Документы.ВнутреннееПотреблениеТоваров)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ВнутреннееПотреблениеТоваров))
		И ПравоДоступа("Просмотр",  Метаданные.Документы.ЗаказНаВнутреннееПотребление)
		И ПравоДоступа("Чтение",    Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление)
		И ПравоДоступа("Чтение",    Метаданные.РегистрыНакопления.ТоварыКОтгрузке)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаВнутреннееПотребление");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ВнутренниеПотребленияТоваровКОформлению = Обработки.ЖурналДокументовВнутреннегоТовародвижения.КоличествоСтрокКОформлению(
		ХозяйственныеОперацииДокумента());
	
	// Заполнение дел.
	// ВнутреннееТовародвижение
	ДелоРодитель = ТекущиеДела.Найти("ВнутреннееТовародвижение", "Идентификатор");
	Если ДелоРодитель = Неопределено Тогда
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ВнутреннееТовародвижение";
		ДелоРодитель.Представление  = НСтр("ru = 'Внутреннее товародвижение'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Склад;
	КонецЕсли;
	ДелоРодитель.ЕстьДела = ДелоРодитель.ЕстьДела Или ВнутренниеПотребленияТоваровКОформлению > 0;
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыРабочегоМеста();
	ПараметрыОткрытия.ПараметрыФормы.Вставить("КлючНазначенияФормы", "ТекущиеДела");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВнутренниеПотребленияТоваровКОформлению";
	Дело.ЕстьДела       = ВнутренниеПотребленияТоваровКОформлению > 0;
	Дело.Представление  = НСтр("ru = 'Внутренние потребления товаров к оформлению'");
	Дело.Количество     = ВнутренниеПотребленияТоваровКОформлению;
	Дело.Важное         = Ложь;
	Дело.Форма          = ПараметрыОткрытия.ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыОткрытия.ПараметрыФормы;
	Дело.Владелец       = "ВнутреннееТовародвижение";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.ВнутреннееПотреблениеТоваров) Тогда
		// Внутреннее потребление товаров
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ВнутреннееПотреблениеТоваров";
		КомандаПечати.Представление = ?(ПолучитьФункциональнуюОпцию("БазоваяВерсия"),НСтр("ru = 'Списание товаров на хознужды'"),НСтр("ru = 'Внутреннее потребление товаров'"));
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;

	// Задание на отбор товаров
	Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ДобавитьКомандуПечати(КомандыПечати, "ЗаданиеНаОтбор");

	ВнутреннееПотреблениеТоваровЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВнутреннееПотреблениеТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ВнутреннееПотреблениеТоваров",
			НСтр("ru = 'Внутреннее потребление товаров'"),
			ПечатьВнутреннееПотреблениеТоваров(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	ВнутреннееПотреблениеТоваровЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПечатьВнутреннееПотреблениеТоваров(МассивОбъектов, ОбъектыПечати)

	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьДопКолонку = ЗначениеЗаполнено(ИмяКолонкиКодов);

	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПоДокументам.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка                             КАК Ссылка,
	|	Документ.Номер                              КАК Номер,
	|	Документ.Дата                               КАК Дата,
	|	Документ.ИсправляемыйДокумент.Номер         КАК НомерИсправляемогоДокумента,
	|	Документ.ИсправляемыйДокумент.Дата          КАК ДатаИсправляемогоДокумента,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Документ.Склад)         КАК Склад,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Документ.Подразделение)	КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Документ.Организация)   КАК Организация,
	|	Документ.Организация.Префикс                КАК Префикс,
	|	Документ.Товары.(
	|
	|		НомерСтроки КАК НомерСтроки,
	|		&ДопКолонка КАК ДопКолонка,
	|		Номенклатура.НаименованиеПолное     КАК Номенклатура,
	|		Характеристика.НаименованиеПолное   КАК Характеристика,
	|		ВЫБОР
	|			КОГДА Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|				ПРЕДСТАВЛЕНИЕССЫЛКИ(Номенклатура.ЕдиницаИзмерения)
	|			ИНАЧЕ 
	|				ПРЕДСТАВЛЕНИЕССЫЛКИ(Упаковка)
	|		КОНЕЦ              КАК Упаковка,
	|		КоличествоУпаковок КАК Количество
	|
	|	) КАК ТаблицаТовары
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата, Ссылка, НомерСтроки
	|";
	
	ПодстановкаДопКолонка = "0";
	Если ВыводитьДопКолонку Тогда
		ПодстановкаДопКолонка = "Номенклатура." + ИмяКолонкиКодов;
	КонецЕсли;
	
	ЗапросПоДокументам.Текст = СтрЗаменить(ЗапросПоДокументам.Текст, "&ДопКолонка", ПодстановкаДопКолонка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВнутреннееПотреблениеТоваров";

	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс, НомерИсправляемогоДокумента, ДатаИсправляемогоДокумента");
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		СинонимДокумента = НСтр("ru = 'Списание товаров на хознужды'");
	Иначе
		СинонимДокумента = Метаданные.Документы.ВнутреннееПотреблениеТоваров.Синоним;
	КонецЕсли;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВнутреннееПотреблениеТоваров.ПФ_MXL_ВнутреннееПотреблениеТоваров");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодписи   = Макет.ПолучитьОбласть("Подписи");
	Если ВыводитьДопКолонку Тогда
		ОбластьСтрока       = Макет.ПолучитьОбласть("СтрокаДопКолонка");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыДопКолонка");
	Иначе
		ОбластьСтрока       = Макет.ПолучитьОбласть("Строка");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	ВыборкаДокументы = ЗапросПоДокументам.Выполнить().Выбрать();
	
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Вывод заголовка.
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаДокументы);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаДокументы);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьЗаголовок, ВыборкаДокументы.Ссылка);
		ТабДокумент.Вывести(ОбластьЗаголовок);
		
		// Вывод шапки.
		Если ВыводитьДопКолонку Тогда
			ОбластьШапкаТаблицы.Параметры.ДопКолонка = ПредставлениеКолонкиКодов;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Вывод строк документа.
		
		ВыборкаТовары = ВыборкаДокументы.ТаблицаТовары; // ВыборкаИзРезультатаЗапроса
		ВыборкаСтроки = ВыборкаТовары.Выбрать();
		Пока ВыборкаСтроки.Следующий() Цикл
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаСтроки);
			
			ОбластьСтрока.Параметры.Номенклатура = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаСтроки.Номенклатура,
				ВыборкаСтроки.Характеристика,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
			
			ТабДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		// Вывод подвала.
		ТабДокумент.Вывести(ОбластьПодписи);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаТовары.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаТовары.Партия КАК Партия
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	И ТаблицаТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВЭксплуатацию)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДляПечати = РезультатЗапроса.Выгрузить();
	
	Возврат ДанныеДляПечати;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокумента

Процедура ПараметрыЗапросаДляСозданияНаОсновании(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("МассивЗаказов",    ДанныеОтбора.МассивЗаказов);
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу", Истина);
	ПараметрыЗапросов.Вставить("Склад", ДанныеОтбора.РеквизитыШапки.Склад);
	ПараметрыЗапросов.Вставить("НаправлениеДеятельности", ДанныеОтбора.РеквизитыШапки.НаправлениеДеятельности);
	
	Если ДанныеОтбора.ЗаполнятьПоОрдеру Тогда
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		ИменаЗапросов.Добавить("ТаблицаОтгружено");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		
		
	Иначе
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыЗапросаДляПодбора(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу", ДанныеОтбора.МассивЗаказов.Количество() = 1);
	ПараметрыЗапросов.Вставить("Регистратор",      ДанныеОтбора.РеквизитыШапки.Ссылка);
	ПараметрыЗапросов.Вставить("Организация",      ДанныеОтбора.РеквизитыШапки.Организация);
	ПараметрыЗапросов.Вставить("Склад",            ДанныеОтбора.РеквизитыШапки.Склад);
	ПараметрыЗапросов.Вставить("ХозяйственнаяОперация", ДанныеОтбора.РеквизитыШапки.ХозяйственнаяОперация);
	ПараметрыЗапросов.Вставить("Сделка",                ДанныеОтбора.РеквизитыШапки.Сделка);
	ПараметрыЗапросов.Вставить("НаправлениеДеятельности", ДанныеОтбора.РеквизитыШапки.НаправлениеДеятельности);
	ПараметрыЗапросов.Вставить("ТоварыНакладной",       ДанныеОтбора.ТоварыНакладной);
	ПараметрыЗапросов.Вставить("НакладнаяПоЗаказам",    ДанныеОтбора.НакладнаяПоЗаказам);
	ПараметрыЗапросов.Вставить("УчитыватьСобирается", Истина);
	
	ИменаЗапросов.Добавить("ВтЗаказыОтбор");
	ИменаЗапросов.Добавить("ВтНакладная");
	ИменаЗапросов.Добавить("ТаблицаОтгружено");
	
	ИменаЗапросов.Добавить("ТаблицаОформить");
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		ИменаПодзапросов.Добавить("БлокСторноНакладная");
	КонецЕсли;
	ИменаПодзапросов.Добавить("БлокНовыеДвиженияНакладная");
	

КонецПроцедуры

Процедура ПараметрыЗапросаДляПерезаполненияПоОрдерам(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("МассивЗаказов",      ДанныеОтбора.МассивЗаказов);
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу",   Истина);
	ПараметрыЗапросов.Вставить("Регистратор",        ДанныеОтбора.РеквизитыШапки.Ссылка);
	ПараметрыЗапросов.Вставить("Склад",              ДанныеОтбора.РеквизитыШапки.Склад);
	ПараметрыЗапросов.Вставить("ТоварыНакладной",    ДанныеОтбора.ТоварыНакладной);
	ПараметрыЗапросов.Вставить("НакладнаяПоЗаказам", ДанныеОтбора.НакладнаяПоЗаказам);
	ПараметрыЗапросов.Вставить("УчитыватьСобирается", Истина);
	ПараметрыЗапросов.Вставить("ЗаполнятьПоСобирается", Истина);
	
	ИменаЗапросов.Добавить("ВтЗаказыОтбор");
	ИменаЗапросов.Добавить("ВтНакладная");
	ИменаЗапросов.Добавить("ТаблицаОтгружено");
	
	ИменаЗапросов.Добавить("ТаблицаОформить");
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		ИменаПодзапросов.Добавить("БлокСторноНакладная");
	КонецЕсли;
	ИменаПодзапросов.Добавить("БлокНовыеДвиженияНакладная");
	

КонецПроцедуры

Процедура ПараметрыЗапросаДляЗаполненияПоЗаказам(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("МассивЗаказов",    ДанныеОтбора.МассивЗаказов);
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу", ДанныеОтбора.МассивЗаказов.Количество() = 1);
	ПараметрыЗапросов.Вставить("Регистратор",      ДанныеОтбора.РеквизитыШапки.Ссылка);
	ПараметрыЗапросов.Вставить("Организация",      ДанныеОтбора.РеквизитыШапки.Организация);
	ПараметрыЗапросов.Вставить("Склад",            ДанныеОтбора.РеквизитыШапки.Склад);
	ПараметрыЗапросов.Вставить("ХозяйственнаяОперация", ДанныеОтбора.РеквизитыШапки.ХозяйственнаяОперация);
	ПараметрыЗапросов.Вставить("Сделка",                ДанныеОтбора.РеквизитыШапки.Сделка);
	ПараметрыЗапросов.Вставить("НаправлениеДеятельности", ДанныеОтбора.РеквизитыШапки.НаправлениеДеятельности);
	
	Если ДанныеОтбора.ЗаполнятьПоОрдеру Тогда
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		ИменаЗапросов.Добавить("ТаблицаОтгружено");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
			ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
			ИменаПодзапросов.Добавить("БлокСторноНакладная");
		КонецЕсли;
		
	
	Иначе
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
			ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
			ИменаПодзапросов.Добавить("БлокСторноНакладная");
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременнойТаблицыНакладной()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Количество            КАК Количество,
		|
		|	Таблица.НомерСтроки           КАК НомерСтроки,
		|	Таблица.Номенклатура          КАК Номенклатура,
		|	Таблица.Характеристика        КАК Характеристика,
		|	Таблица.Назначение            КАК Назначение,
		|	Таблица.Серия                 КАК Серия,
		|	Таблица.СтатьяРасходов        КАК СтатьяРасходов,
		|	Таблица.АналитикаРасходов     КАК АналитикаРасходов,
		|	Таблица.ФизическоеЛицо        КАК ФизическоеЛицо,
		|	Таблица.КатегорияЭксплуатации КАК КатегорияЭксплуатации,
		|	Таблица.ГруппаПродукции       КАК ГруппаПродукции,
		|
		|	Таблица.КодСтроки             КАК КодСтроки,
		|	Таблица.Упаковка              КАК Упаковка,
		|
		|	ВЫБОР КОГДА НЕ &НакладнаяПоЗаказам ТОГДА
		|				&Регистратор
		|			ИНАЧЕ
		|				Таблица.ЗаказНаВнутреннееПотребление
		|		КОНЕЦ                     КАК Заказ
		|
		|ПОМЕСТИТЬ ВТНакладная
		|ИЗ
		|	&ТоварыНакладной КАК Таблица
		|;
		|
		|//////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнойТаблицыРаспоряжений()
	
	ТекстыЗапроса = Новый Массив();
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		
		Текст =
			"ВЫБРАТЬ
			|	ЗаказНаВнутреннееПотребление.Ссылка КАК Заказ
			|ПОМЕСТИТЬ ВТЗаказыОтбор
			|ИЗ
			|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
			|ГДЕ
			|	ВЫБОР
			|		КОГДА &ОтобратьПоЗаказу ТОГДА
			|			ЗаказНаВнутреннееПотребление.Ссылка В (&МассивЗаказов)
			|		ИНАЧЕ
			|			ЗаказНаВнутреннееПотребление.Организация           = &Организация
			|			И ЗаказНаВнутреннееПотребление.Склад                 = &Склад
			|			И ЗаказНаВнутреннееПотребление.Сделка                = &Сделка
			|			И ЗаказНаВнутреннееПотребление.ХозяйственнаяОперация = &ХозяйственнаяОперация
			|			И ЗаказНаВнутреннееПотребление.НаправлениеДеятельности = &НаправлениеДеятельности
			|	КОНЕЦ
			|	И ЗаказНаВнутреннееПотребление.Проведен";
		ТекстыЗапроса.Добавить(Текст);
		
	КонецЕсли;
	
	
	Текст =
		"ВЫБРАТЬ
		|	&Регистратор КАК Заказ";
	ТекстыЗапроса.Добавить(Текст);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|;
		|
		|//////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбъединения(Имена, Тексты)
	
	ТекстОбъединения = "";
	ЭтоПервыйБлок = Истина;
	
	Для Каждого Имя Из Имена Цикл
		
		Если ЭтоПервыйБлок Тогда
			ЭтоПервыйБлок = Ложь;
		Иначе
			
			ТекстОбъединения = ТекстОбъединения + "
			                                      |
			                                      |	ОБЪЕДИНИТЬ ВСЕ
			                                      |
			                                      |";
			
		КонецЕсли;
		
		ТекстОбъединения = ТекстОбъединения + Тексты[Имя];
		
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Заказ             КАК ЗаказНаВнутреннееПотребление,
		|	Набор.КодСтроки         КАК КодСтроки,
		|
		|	Набор.Номенклатура                     КАК Номенклатура,
		|	Набор.Характеристика                   КАК Характеристика,
		|	МАКСИМУМ(Набор.Назначение)             КАК Назначение,
		|	Набор.Серия                            КАК Серия,
		|	МАКСИМУМ(Набор.Дата)                   КАК Дата,
		|	МАКСИМУМ(Набор.НомерСтроки)            КАК НомерСтроки,
		|	МАКСИМУМ(Набор.ДатаОтгрузки)           КАК ДатаОтгрузки,
		|	МАКСИМУМ(Набор.СтатьяРасходов)         КАК СтатьяРасходов,
		|	МАКСИМУМ(Набор.АналитикаРасходов)      КАК АналитикаРасходов,
		|	МАКСИМУМ(Набор.ГруппаПродукции)        КАК ГруппаПродукции,
		|	МАКСИМУМ(Набор.ПрисутствуетВДокументе) КАК ПрисутствуетВДокументе,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				Набор.Упаковка
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ)                             КАК УпаковкаНакладной,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ
		|				Набор.Упаковка
		|		КОНЕЦ)                             КАК УпаковкаЗаказа,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				Набор.УпаковкаКоэффициент
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ)                             КАК УпаковкаНакладнойКоэффициент,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ
		|				Набор.УпаковкаКоэффициент
		|		КОНЕЦ)                             КАК УпаковкаЗаказаКоэффициент,
		|
		|
		|	СУММА(Набор.КоличествоВЗаказе)        КАК КоличествоВЗаказе,
		|	СУММА(Набор.КоличествоВНакладной)     КАК КоличествоВНакладной,
		|	&ЗаказНаВнутреннееПотребление_ТоварыЛокализация
		|ИЗ ТекстОбъединения КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Заказ, Набор.КодСтроки,
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Серия,
		|	ВЫБОР КОГДА Набор.КодСтроки <> 0 ТОГДА
		|				0
		|			ИНАЧЕ
		|				Набор.НомерСтроки
		|		КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.КоличествоВЗаказе) > 0 ИЛИ СУММА(Набор.КоличествоВНакладной) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата, Заказ, НомерСтроки
		|;
		|
		|/////////////////////////////////////////////////////////////////////
		|";
	
	ЗаказНаВнутреннееПотреблениеЛокализация.ДобавитьВТекстЗапросаМаксимумРеквизитыТаблицыТовары(ТекстЗапроса, "Набор");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекстОбъединения", "(" + ТекстОбъединения + ")");
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиРегистраЗаказы()
	
	ТекстЗапроса =
		"	ВЫБРАТЬ
		|		ТаблицаОстатки.ЗаказНаВнутреннееПотребление КАК Заказ,
		|		ТаблицаОстатки.КодСтроки          КАК КодСтроки,
		|
		|		ТаблицаОстатки.КОформлениюОстаток КАК КоличествоВЗаказе,
		|		0                                 КАК КоличествоВНакладной,
		|
		|		// Справочная информация.
		|		ТаблицаОстатки.Номенклатура       КАК Номенклатура,
		|		ТаблицаОстатки.Характеристика     КАК Характеристика,
		|
		|		ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|			
		|					Таблица.Ссылка.Назначение
		|			
		|				ИНАЧЕ
		|
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|			КОНЕЦ                         КАК Назначение,
		|
		|		ТаблицаОстатки.Серия              КАК Серия,
		|		Таблица.Ссылка.Дата               КАК Дата,
		|		Таблица.НомерСтроки               КАК НомерСтроки,
		|		Таблица.ДатаОтгрузки              КАК ДатаОтгрузки,
		|		Таблица.СтатьяРасходов            КАК СтатьяРасходов,
		|		Таблица.АналитикаРасходов         КАК АналитикаРасходов,
		|		Таблица.ГруппаПродукции           КАК ГруппаПродукции,
		|		ЛОЖЬ                              КАК ПрисутствуетВДокументе,
		|
		|		Таблица.Упаковка                          КАК Упаковка,
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент,
		|
		|		&ЗаказНаВнутреннееПотребление_ТоварыЛокализация
		|	ИЗ
		|		РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(,
		|				(ЗаказНаВнутреннееПотребление, Склад) В(
		|					ВЫБРАТЬ
		|						Таблица.Заказ КАК Заказ,
		|						&Склад КАК Склад
		|					ИЗ
		|						ВТЗаказыОтбор КАК Таблица)) КАК ТаблицаОстатки
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК Таблица
		|			ПО ТаблицаОстатки.ЗаказНаВнутреннееПотребление = Таблица.Ссылка
		|			 И ТаблицаОстатки.КодСтроки = Таблица.КодСтроки";
	
		ЗаказНаВнутреннееПотреблениеЛокализация.ДобавитьВТекстЗапросаРеквизитыТаблицыТовары(ТекстЗапроса, "Таблица");
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Таблица.Упаковка",
			"Таблица.Номенклатура"));
			
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСторноНакладная()
	
	ТекстЗапроса =
		"	ВЫБРАТЬ
		|		ТаблицаСторно.ЗаказНаВнутреннееПотребление КАК Заказ,
		|		ТаблицаСторно.КодСтроки          КАК КодСтроки,
		|
		|		ТаблицаСторно.КОформлению        КАК КоличествоВЗаказе,
		|		0                                КАК КоличествоВНакладной,
		|
		|		// Справочная информация.
		|		ТаблицаСторно.Номенклатура       КАК Номенклатура,
		|		ТаблицаСторно.Характеристика     КАК Характеристика,
		|
		|		ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|			
		|					Таблица.Ссылка.Назначение
		|			
		|				ИНАЧЕ
		|
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|			КОНЕЦ                        КАК Назначение,
		|
		|		ТаблицаСторно.Серия              КАК Серия,
		|		Таблица.Ссылка.Дата              КАК Дата,
		|		Таблица.НомерСтроки              КАК НомерСтроки,
		|		Таблица.ДатаОтгрузки             КАК ДатаОтгрузки,
		|		Таблица.СтатьяРасходов           КАК СтатьяРасходов,
		|		Таблица.АналитикаРасходов        КАК АналитикаРасходов,
		|		Таблица.ГруппаПродукции          КАК ГруппаПродукции,
		|		ЛОЖЬ                             КАК ПрисутствуетВДокументе,
		|
		|		Таблица.Упаковка                 КАК Упаковка,
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент,
		|
		|		&ЗаказНаВнутреннееПотребление_ТоварыЛокализация
		|	ИЗ
		|		РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ТаблицаСторно
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК Таблица
		|			ПО Таблица.Ссылка = ТаблицаСторно.ЗаказНаВнутреннееПотребление
		|			 И Таблица.КодСтроки = ТаблицаСторно.КодСтроки
		|
		|	ГДЕ
		|		ТаблицаСторно.Регистратор = &Регистратор
		|		И (ТаблицаСторно.ЗаказНаВнутреннееПотребление, ТаблицаСторно.Склад) В(
		|			ВЫБРАТЬ
		|				Таблица.Заказ КАК Заказ,
		|				&Склад КАК Склад
		|			ИЗ
		|				ВТЗаказыОтбор КАК Таблица)
		|		И ТаблицаСторно.Активность";
		
		ЗаказНаВнутреннееПотреблениеЛокализация.ДобавитьВТекстЗапросаРеквизитыТаблицыТовары(ТекстЗапроса, "Таблица");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Таблица.Упаковка",
			"Таблица.Номенклатура"));
			
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаОтгруженоПоОрдерам()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОстатки.ДокументОтгрузки       КАК ЗаказНаВнутреннееПотребление,
		|	ТаблицаОстатки.Номенклатура           КАК Номенклатура,
		|	ТаблицаОстатки.Характеристика         КАК Характеристика,
		|	ТаблицаОстатки.Серия                  КАК Серия,
		|	ТаблицаОстатки.Назначение             КАК Назначение,
		|	1                                     КАК УпаковкаКоэффициент,
		|	
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатки.ДокументОтгрузки = &Регистратор ТОГДА
		|					ТаблицаОстатки.Собирается
		|				ИНАЧЕ
		|					0
		|		КОНЕЦ)                            КАК Собирается,
		|	
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|					ТаблицаОстатки.КОтгрузке
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ТаблицаОстатки.Регистратор <> &Регистратор ТОГДА
		|					- ТаблицаОстатки.КОформлению
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА &ЗаполнятьПоСобирается И ТаблицаОстатки.ДокументОтгрузки = &Регистратор ТОГДА
		|					ТаблицаОстатки.Собирается
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		 + ТаблицаОстатки.Собрано)         КАК Количество
		|ИЗ
		|	ВТЗаказыОтбор КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК ТаблицаОстатки
		|		ПО Таблица.Заказ = ТаблицаОстатки.ДокументОтгрузки
		|		 И &Склад = ТаблицаОстатки.Склад
		|		 И ТаблицаОстатки.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОстатки.ДокументОтгрузки,
		|	ТаблицаОстатки.Номенклатура, ТаблицаОстатки.Характеристика, ТаблицаОстатки.Серия, ТаблицаОстатки.Назначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|					ТаблицаОстатки.КОтгрузке
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ТаблицаОстатки.Регистратор <> &Регистратор ТОГДА
		|					- ТаблицаОстатки.КОформлению
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА &УчитыватьСобирается И ТаблицаОстатки.ДокументОтгрузки = &Регистратор ТОГДА
		|					ТаблицаОстатки.Собирается
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ + ТаблицаОстатки.Собрано) > 0
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНовыеДвиженияНакладная()
	
	ТекстЗапроса =
		"	ВЫБРАТЬ
		|		Таблица.Заказ       КАК Заказ,
		|		Таблица.КодСтроки   КАК КодСтроки,
		|		0                   КАК КоличествоВЗаказе,
		|		Таблица.Количество  КАК КоличествоВНакладной,
		|
		|		// Справочная информация.
		|		Таблица.Номенклатура          КАК Номенклатура,
		|		Таблица.Характеристика        КАК Характеристика,
		|		Таблица.Назначение            КАК Назначение,
		|		Таблица.Серия                 КАК Серия,
		|		НЕОПРЕДЕЛЕНО                  КАК Дата,
		|		Таблица.НомерСтроки           КАК НомерСтроки,
		|		НЕОПРЕДЕЛЕНО                  КАК ДатаОтгрузки,
		|		Таблица.СтатьяРасходов        КАК СтатьяРасходов,
		|		Таблица.АналитикаРасходов     КАК АналитикаРасходов,
		|		Таблица.ГруппаПродукции       КАК ГруппаПродукции,
		|		ИСТИНА                        КАК ПрисутствуетВДокументе,
		|
		|		Таблица.Упаковка                          КАК Упаковка,
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент,
		|
		|		&ЗаказНаВнутреннееПотребление_ТоварыЛокализация
		|	ИЗ
		|		ВтНакладная КАК Таблица";
	
	ЗаказНаВнутреннееПотреблениеЛокализация.ДобавитьВТекстЗапросаРеквизитыТаблицыТовары(ТекстЗапроса, "Таблица");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"Таблица.Номенклатура"));
			
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ВнутреннееПотреблениеТоваров";
КонецФункции

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ВнутреннееПотреблениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.8.73";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5706daba-dbad-4f69-82de-24ccecde910d");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВнутреннееПотреблениеТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет документы ""Внутреннее потребление товаров"":
								  |- Заполняет реквизит ""Идентификатор фин. записи"" табличной части ""Виды запасов"".
								  |- Заполняет реквизит ""Настройка счетов учета"".
								  |- Заполняет реквизиты ""Статус указания серий (отправитель)"", ""Статус указания серий (получатель)"".
								  |- Заполняет реквизит ""Статус""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя());
	//++ Локализация
	Читаемые.Добавить(Метаданные.Справочники.ПартииТМЦВЭксплуатации.ПолноеИмя());
	//-- Локализация
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ	
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихПотреблений.ПустаяСсылка)
	|
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТабЧасть
	|		ГДЕ
	|			ТабЧасть.Ссылка = Документ.Ссылка
	|			И ТабЧасть.ИдентификаторФинЗаписи = """")
	|
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТабЧастьТовары
	|		ГДЕ
	|			ТабЧастьТовары.Ссылка = Документ.Ссылка

	|			И (ТабЧастьТовары.СтатусУказанияСерий <> 0
	|					И ТабЧастьТовары.СтатусУказанияСерийОтправитель = 0
	|					И ТабЧастьТовары.СтатусУказанияСерийПолучатель = 0
	//++ Локализация
	|				ИЛИ НЕ ЕСТЬNULL(ТабЧастьТовары.Партия.Партия258, ЛОЖЬ)
	|					И ТабЧастьТовары.УдалитьПартияТМЦВЭксплуатации <> ЗНАЧЕНИЕ(Справочник.ПартииТМЦВЭксплуатации.ПустаяСсылка)
	|
	//-- Локализация
	|			)
	|		)
	//-- НЕ УТ
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	//++ Локализация
	ЧитаемыеДанные = Новый Массив;
	ЧитаемыеДанные.Добавить("Справочник.ПартииТМЦВЭксплуатации");
	ДополнительныеПараметрыПроцедуры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроцедуры.ИмяВременнойТаблицы = "ВТЗаблокированныеДанные";
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
			Параметры.Очередь, 
			ЧитаемыеДанные, 
			МенеджерВременныхТаблиц, 
			ДополнительныеПараметрыПроцедуры);
	//-- Локализация

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	ВТДляОбработки КАК ВТДляОбработки";
	
	//++ Локализация
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДляОбработки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаблокированныеСсылки
	|ИЗ
	|	ВТДляОбработки КАК ВТДляОбработки
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТабличнаяЧасть
	|		ПО (ТабличнаяЧасть.Ссылка = ВТДляОбработки.Ссылка)
	|ГДЕ
	|	ТабличнаяЧасть.УдалитьПартияТМЦВЭксплуатации В
	|			(ВЫБРАТЬ
	|				ВТЗаблокированныеДанные.Ссылка
	|			ИЗ
	|				ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	ВТДляОбработки КАК ВТДляОбработки
	|ГДЕ
	|	НЕ ВТДляОбработки.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТЗаблокированныеСсылки.Ссылка
	|				ИЗ
	|					ВТЗаблокированныеСсылки КАК ВТЗаблокированныеСсылки)";
	//-- Локализация
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
 	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Ссылка = Выборка.Ссылка;
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Ссылка.ПолучитьОбъект(); // ДокументОбъект.ВнутреннееПотреблениеТоваров
			Если ДокументОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
 				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ДокументОбъект, "ВидыЗапасов");
			
			
			СписокПартий = Новый Массив;
			Для Каждого ДанныеСтроки Из ДокументОбъект.Товары Цикл
				
				//++ Локализация
				Если ЗначениеЗаполнено(ДанныеСтроки.УдалитьПартияТМЦВЭксплуатации)
					И НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия) Тогда
					СписокПартий.Добавить(ДанныеСтроки.УдалитьПартияТМЦВЭксплуатации);
				КонецЕсли;
				//-- Локализация
				
				Если ДанныеСтроки.СтатусУказанияСерий <> 0
					И ДанныеСтроки.СтатусУказанияСерийОтправитель = 0
					И ДанныеСтроки.СтатусУказанияСерийПолучатель = 0 Тогда
					
					ДанныеСтроки.СтатусУказанияСерийОтправитель = ДанныеСтроки.СтатусУказанияСерий;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДокументОбъект.Статус = Перечисления.СтатусыВнутреннихПотреблений.ПустаяСсылка() Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыВнутреннихПотреблений.Принято;
			КонецЕсли;
			
			//++ Локализация
			Если СписокПартий.Количество() <> 0 Тогда
				
				РеквизитыПартий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					СписокПартий, "НоваяПартия,Партия258");
				
				Для Каждого ДанныеСтроки Из ДокументОбъект.Товары Цикл
					
					Если ЗначениеЗаполнено(ДанныеСтроки.УдалитьПартияТМЦВЭксплуатации)
						И НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия) Тогда
					
						СвойстваПартии = РеквизитыПартий.Получить(ДанныеСтроки.УдалитьПартияТМЦВЭксплуатации);
						Если СвойстваПартии <> Неопределено Тогда
							
							Если НЕ СвойстваПартии.Партия258
								И ЗначениеЗаполнено(СвойстваПартии.НоваяПартия) Тогда
								ДанныеСтроки.Партия = СвойстваПартии.НоваяПартия;
							ИначеЕсли СвойстваПартии.Партия258 Тогда
								ДанныеСтроки.Партия = ДанныеСтроки.УдалитьПартияТМЦВЭксплуатации;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			//-- Локализация
			
			Если ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

#КонецОбласти

#Область КР_ДобавленныеПроцедурыИФункции

#Область Проведение

// << 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
Функция КР_ТекстЗапросаТаблицаТоварыКОтбору(Запрос, ТекстыЗапроса, Регистры)
		
	ИмяРегистра = "ТоварыКОтбору";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период									КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 	КАК ВидДвижения,
	|	ТаблицаТовары.ЗаказНаВнутреннееПотребление	КАК Распоряжение,
	|	ТаблицаТовары.Номенклатура				КАК Номенклатура,
	|	ТаблицаТовары.Характеристика			КАК Характеристика,
	|	ТаблицаТовары.Назначение				КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В(6, 8, 10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ									КАК Серия,
	|	ТаблицаТовары.Упаковка					КАК ТоварноеМесто,
	|	ТаблицаТовары.КоличествоУпаковок		КАК КОтбору,
	|	0										КАК Отбирается,
	|	ТаблицаТовары.КоличествоУпаковок		КАК Отобрано
	|
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ДанныеШапки
	|		ПО ТаблицаТовары.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	// << 19.04.2023 Марченко С.Н., КРОК, JIRA№A2105505-1573 
	|	И ТаблицаТовары.ЗаказНаВнутреннееПотребление <> ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка)
	// >> 19.04.2023 Марченко С.Н., КРОК, JIRA№A2105505-1573
	|	И ДанныеШапки.Склад.КР_АдресныйСкладБезордернойОтгрузки
	|	И ТаблицаТовары.КоличествоУпаковок <> 0 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	| ВЫБРАТЬ
	|	&Период									КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
	|	ТаблицаТовары.ЗаказНаВнутреннееПотребление	КАК Распоряжение,
	|	ТаблицаТовары.Номенклатура				КАК Номенклатура,
	|	ТаблицаТовары.Характеристика			КАК Характеристика,
	|	ТаблицаТовары.Назначение				КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В(6, 8, 10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ									КАК Серия,
	|	ТаблицаТовары.Упаковка					КАК ТоварноеМесто,
	|	0										КАК КОтбору,
	|	0										КАК Отбирается,
	|	ТаблицаТовары.КоличествоУпаковок		КАК Отобрано
	|
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ДанныеШапки
	|		ПО ТаблицаТовары.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	// << 19.04.2023 Марченко С.Н., КРОК, JIRA№A2105505-1573 
	|	И ТаблицаТовары.ЗаказНаВнутреннееПотребление <> ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка)
	// >> 19.04.2023 Марченко С.Н., КРОК, JIRA№A2105505-1573
	|	И ДанныеШапки.Склад.КР_АдресныйСкладБезордернойОтгрузки
	|	И ТаблицаТовары.КоличествоУпаковок <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции // >> 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188

// << 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
Функция КР_ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
		
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	         	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период									КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
	|	ДанныеШапки.Склад						КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|			И НЕ ТаблицаТовары.ЗаказНаВнутреннееПотребление В(НЕОПРЕДЕЛЕНО,
	|				ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка))
	|			ТОГДА ТаблицаТовары.ЗаказНаВнутреннееПотребление.Подразделение
	|		ИНАЧЕ ДанныеШапки.Подразделение
	|	КОНЕЦ									КАК Получатель,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|			И НЕ ТаблицаТовары.ЗаказНаВнутреннееПотребление В(НЕОПРЕДЕЛЕНО,
	|				ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка))
	|			ТОГДА ТаблицаТовары.ЗаказНаВнутреннееПотребление
	|		ИНАЧЕ ДанныеШапки.Ссылка
	|	КОНЕЦ									КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура				КАК Номенклатура,
	|	ТаблицаТовары.Характеристика			КАК Характеристика,
	|	ТаблицаТовары.Назначение				КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В(6, 8, 10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ									КАК Серия,
	|	0										КАК ВРезерве,
	|	0										КАК КОтгрузке,
	|	0										КАК КОформлению,
	|	0										КАК КСборке,
	|	0										КАК Собирается, 
	|	ТаблицаТовары.Количество				КАК Собрано
	|
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ДанныеШапки
	|		ПО ТаблицаТовары.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ДанныеШапки.Склад.КР_АдресныйСкладБезордернойОтгрузки
	|	И ТаблицаТовары.Количество <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период									КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 	КАК ВидДвижения,
	|	ДанныеШапки.Склад						КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|			И НЕ ТаблицаТовары.ЗаказНаВнутреннееПотребление В(НЕОПРЕДЕЛЕНО,
	|				ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка))
	|			ТОГДА ТаблицаТовары.ЗаказНаВнутреннееПотребление.Подразделение
	|		ИНАЧЕ ДанныеШапки.Подразделение
	|	КОНЕЦ									КАК Получатель,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПотреблениеПоЗаказам
	|			И НЕ ТаблицаТовары.ЗаказНаВнутреннееПотребление В(НЕОПРЕДЕЛЕНО,
	|				ЗНАЧЕНИЕ(Документ.ЗаказНаВнутреннееПотребление.ПустаяСсылка))
	|			ТОГДА ТаблицаТовары.ЗаказНаВнутреннееПотребление
	|		ИНАЧЕ ДанныеШапки.Ссылка
	|	КОНЕЦ									КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура				КАК Номенклатура,
	|	ТаблицаТовары.Характеристика			КАК Характеристика,
	|	ТаблицаТовары.Назначение				КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В(6, 8, 10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ									КАК Серия,
	|	0										КАК ВРезерве,
	|	0										КАК КОтгрузке,
	|	0										КАК КОформлению,
	|	ТаблицаТовары.Количество				КАК КСборке,
	|	0										КАК Собирается, 
	|	0										КАК Собрано
	|
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ДанныеШапки
	|		ПО ТаблицаТовары.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ДанныеШапки.Склад.КР_АдресныйСкладБезордернойОтгрузки
	|	И ТаблицаТовары.Количество <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции // >> 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188

// << 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188
Функция КР_ТекстЗапросаТаблицаТоварыВЯчейках(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыВЯчейках";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ДанныеШапки.КР_Ячейка КАК Ячейка,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В(6, 8, 10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТовары.КоличествоУпаковок КАК ВНаличии,
	|	0 КАК КОтбору,
	|	0 КАК КРазмещению
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ДанныеШапки
	|		ПО (ДанныеШапки.Ссылка = ТаблицаТовары.Ссылка)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КоличествоУпаковок <> 0  
	|	И ДанныеШапки.Склад.КР_АдресныйСкладБезордернойОтгрузки
	|	И ДанныеШапки.КР_Помещение.НастройкаАдресногоХранения = ЗНАЧЕНИЕ(Перечисление.НастройкиАдресногоХранения.ЯчейкиОстатки)
	|"; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции // >> 03.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1188

#КонецОбласти

#КонецОбласти

#КонецЕсли
