#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОперативныйУчетТоваровОрганизаций");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
	КорректировкаНазначенияТоваровЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция таблиц данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыВЯчейках(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(Документ, Запрос, ТекстыЗапроса, Регистры);
		
		КорректировкаНазначенияТоваровЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	КорректировкаНазначенияТоваровЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Корректировка назначения товаров".
//
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - таблица команд.
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.КорректировкаНазначенияТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОбособленноеОбеспечениеЗаказов";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КорректировкаНазначенияТоваровЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.КорректировкаНазначенияТоваров";
	
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад");
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад");
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПустаяСсылка());
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ИсходноеНазначение");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("НовоеНазначение");
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;

КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	ВЫРАЗИТЬ(Товары.ИсходноеНазначение КАК Справочник.Назначения) КАК ИсходноеНазначение,
	|	ВЫРАЗИТЬ(Товары.НовоеНазначение КАК Справочник.Назначения) КАК НовоеНазначение,
	|	Товары.Склад,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(Товары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСкладскиеДвижения,
	|	Товары.Склад,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТоварыДляЗапроса КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.ЕстьСкладскиеДвижения
	|					ТОГДА ВЫБОР
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|								ТОГДА ВЫБОР
	|										КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|											ТОГДА ВЫБОР
	|													КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|														ТОГДА 13
	|													ИНАЧЕ 14
	|												КОНЕЦ
	|										ИНАЧЕ ВЫБОР
	|												КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|													ТОГДА 9
	|												ИНАЧЕ 10
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|								ТОГДА ВЫБОР
	|										КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 7
	|										ИНАЧЕ 8
	|									КОНЕЦ
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|									И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|								ТОГДА ВЫБОР
	|										КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 3
	|										ИНАЧЕ 4
	|									КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|							ТОГДА ВЫБОР
	|									КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|										ТОГДА 13
	|									ИНАЧЕ 14
	|								КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|			И (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

// Возвращает текст запроса, определяющий используются ли складские перемещения на переданном складе,
// и используется ли адресное хранение в переданном перемещении.
//
// Параметры:
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы в которую нужно поместить результат. Если не задать параметр,
//                                 временная таблица не будет создана.
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаИспользованиеПомещенийИАдресногоХранения(ИмяВременнойТаблицы = "") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьСкладскиеПомещения
	|				И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Помещение КАК Справочник.СкладскиеПомещения).ИспользоватьАдресноеХранение
	|							И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Помещение КАК Справочник.СкладскиеПомещения).ДатаНачалаАдресногоХраненияОстатков
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьАдресноеХранение
	|						И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаАдресногоХраненияОстатков
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ИспользоватьАдресноеХранение,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьСкладскиеПомещения
	|				И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьСкладскиеПомещения
	|ПОМЕСТИТЬ ИмяВременнойТаблицыПереопределяемый
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицыПереопределяемый", ИмяВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВременнойТаблицыПереопределяемый", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает массив доступных действий с документом КорректировкаНазначенияТоваров
//
// Параметры:
//  Назначение		 - СправочникСсылка.Назначения	 - назначение, выбранное в корректировке, 
//                      для алгоритма имеет смысл только давальческое
// Возвращаемое значение:
//  Массив - массив элементов типа ПеречислениеСсылка.ВидыОперацийКорректировкиНазначения.
//
Функция ДоступныеДействия(Назначение = Неопределено) Экспорт
	
	ЧастичныеПрава = Ложь;
	
	Если Не Пользователи.РолиДоступны("ДополнительныеОперацииКорректировкиНазначенияТоваров") Тогда
		ЧастичныеПрава = Истина;
	КонецЕсли;
	
	ЭтоДавальческийМатериал = Ложь;
	Если ЗначениеЗаполнено(Назначение) Тогда
		
		ТипНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "ТипНазначения");
		
		Если ТипНазначения = Перечисления.ТипыНазначений.Давальческое21
			Или ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22
			Или ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22 Тогда
			ЭтоДавальческийМатериал = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Массив = Новый Массив();
	Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв);
	
	Если Не ЧастичныеПрава Тогда
		Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	КонецЕсли;
	
	Если Не ЧастичныеПрава Тогда
		Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать);
	КонецЕсли;
	
	Если Не ЭтоДавальческийМатериал Тогда
		Массив.Добавить(Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать);
	КонецЕсли;

	Возврат Массив;
	
КонецФункции

// Производит поиск назначения соответствующего заказу
//
// Параметры:
//  Заказ - ЛюбаяСсылка - Ссылка на заказ, назначение которого нужно определить.
//
// Возвращаемое значение:
//  СправочникСсылка.Назначения - назначения, связанное с заказом.
//
Функция НазначениеЗаказа(Заказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	
	ПутьКПолюНазначение = "Назначение";
	
	Назначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, ПутьКПолюНазначение);
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		// Исключения.
		Назначение = Документы.ЗаказНаСборку.НазначениеЗаказа(Заказ);
	Иначе
		Назначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, ПутьКПолюНазначение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Назначение) Тогда
		ЗаказНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "Заказ");
		Если ЗначениеЗаполнено(ЗаказНазначения) И ЗаказНазначения = Заказ Тогда
			Возврат Назначение;
		Иначе
			Возврат Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Проверяет есть ли доступ у текущего пользователя к изменению документа
//
// Параметры:
//  Ссылка - ДокументСсылка.КорректировкаНазначенияТоваров -
//
// Возвращаемое значение:
//  Булево -
//
Функция ДоступнаВозможностьИзменения(Ссылка) Экспорт
	
	ЕстьДоступ = Истина;
	ВидОперацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидОперации");
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.КорректировкаНазначенияТоваров) Тогда
		ЕстьДоступ = Ложь;
	ИначеЕсли Не Пользователи.РолиДоступны("ДополнительныеОперацииКорректировкиНазначенияТоваров") Тогда
		// Частичные права
		ВидОперацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидОперации");
		Если ВидОперацииДокумента = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям
			Или ВидОперацииДокумента = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
			ЕстьДоступ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьДоступ;
	
КонецФункции


// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.ТипыНазначений.Удалить(ШаблонНазначения.ТипыНазначений.Найти(Перечисления.ТипыНазначений.ДавальческоеПродукция22));
	ШаблонНазначения.УсловиеИспользования = "Объект.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв)";
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.ТипыНазначений.Удалить(ШаблонНазначения.ТипыНазначений.Найти(Перечисления.ТипыНазначений.ДавальческоеПродукция22));
	ШаблонНазначения.Договор = "&Договор";
	ШаблонНазначения.УсловиеИспользования = "Объект.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв)";
	
	// Остатки списываемых товаров на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.ИсходноеНазначение", "ВНаличии");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Товары.Склад";
	
	// Потребности в оприходуемых товарах на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.НовоеНазначение", "Потребность");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Товары.Склад";
	
	Возврат МакетФормы;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Добавляет команду создания документа "Корректировка назначения товаров" на основании "Заказа клиента".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//   Неопределено, Структура - См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииЗаказаКлиента(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.КорректировкаНазначенияТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОбособленноеОбеспечениеЗаказов";
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьКорректировкуНазначенияТоваровНаОснованииЗаказаКлиента";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Возвращает структуру с наименованием табличных частей документа, хранящих информацию о товарах.
//
// Возвращаемое значение:
//	Структура - коллекция, содержащая следующие наименования табличных частей:
//		* Товары - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные о товарах документа.
//	
Функция КоллекцияТабличныхЧастейТоваров() Экспорт
	
	ТаблицыДокумента = Новый Структура("Товары");
	
	Возврат ТаблицыДокумента;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьНазначениеПоВидуОперации(Назначение, Заказ, ВидОперации, СтрокаТаблицы, ЭтоНазначениеШапки) Экспорт
	
	Если ЭтоНазначениеШапки Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать") Тогда
			СтрокаТаблицы.НовоеНазначение = Назначение;
			СтрокаТаблицы.НовыйЗаказ = Заказ;
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать") Тогда
			СтрокаТаблицы.НовоеНазначение = Назначение;
			СтрокаТаблицы.НовыйЗаказ = Заказ;
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв") Тогда
			СтрокаТаблицы.ИсходноеНазначение = Назначение;
			СтрокаТаблицы.ИсходныйЗаказ = Заказ;
		КонецЕсли;
		
	Иначе
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать") Тогда
			СтрокаТаблицы.ИсходноеНазначение = Назначение;
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям") Тогда
			СтрокаТаблицы.ИсходноеНазначение = Назначение;
		КонецЕсли;
		СтрокаТаблицы.ИсходныйЗаказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "Заказ");
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеПоОстаткам

// Возвращает таблицу для заполнения корректировки назначения.
// Параметры:
//  Назначение - СправочникСсылка.Назначения -
//  Товары - ТаблицаЗначений
//  Регистратор - ДокументСсылка.КорректировкаНазначенияТоваров, Неопределено -
// Возвращаемое значение:
//  Структура -
//   *ТаблицаТоваров - ТаблицаЗначений -
//   *ТаблицаИтогов - ТаблицаЗначений -
Функция ТаблицаСнятияРезерва(Назначение, Товары, Регистратор) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Назначение",      Назначение);
	Запрос.УстановитьПараметр("Товары",          Товары);
	Запрос.УстановитьПараметр("ВсеТовары",       Товары.Количество() = 0);
	Запрос.УстановитьПараметр("Регистратор",     Регистратор);
	Запрос.УстановитьПараметр("ОстатокНаСкладе", Истина);
	Запрос.УстановитьПараметр("СвернутьНазначения", Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	&ПолеНазначениеОтборТоваров КАК Назначение
		|ПОМЕСТИТЬ ОтборТоваров
		|ИЗ
		|	&Товары КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика
		|;
		|///////////////////////////////////
		|
		|ВЫБРАТЬ
		|	&Назначение КАК Назначение
		|ПОМЕСТИТЬ ОтборНазначений";
	ПолеНазначениеОтборТоваров = "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	Если Товары.Колонки.Найти("Назначение") <> Неопределено Тогда
		ПолеНазначениеОтборТоваров = "Таблица.Назначение";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеНазначениеОтборТоваров", ПолеНазначениеОтборТоваров);
	
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаИсточникДанных(Ложь);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ОтборТоваровИсточникаДанных
		|ИЗ
		|	ИсточникДанных КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика";
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапросаСвободныеОстатки();
	Запрос.Выполнить();
	
	ДобавитьВременнуюТаблицуСортировкаСкладов(Запрос, "ИсточникДанных", "ИсточникДанных");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв) КАК ВидОперации,
		|	&Назначение                                                            КАК НазначениеДляИтогов,
		|	Таблица.Номенклатура                                                   КАК Номенклатура,
		|	Таблица.Номенклатура.ЕдиницаИзмерения                                  КАК ЕдиницаИзмерения,
		|	Таблица.Характеристика                                                 КАК Характеристика,
		|	Таблица.Склад                                                          КАК Склад,
		|	Таблица.Назначение                                                     КАК ИсходноеНазначение,
		|	Таблица.Назначение.Заказ                                               КАК ИсходныйЗаказ,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                           КАК НовоеНазначение,
		|	НЕОПРЕДЕЛЕНО                                                           КАК НовыйЗаказ,
		|	Таблица.Потребность                                                    КАК Потребность,
		|	Таблица.Запас                                                          КАК Запас,
		|	Таблица.Резерв                                                         КАК Резерв,
		|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0)                                 КАК Свободно,
		|	ЕСТЬNULL(ТаблицаСортировкиСкладов.ПриоритетСклада, 0)                  КАК СортировкаСклада,
		|	НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL                              КАК ЭтоСкладОтгрузки
		|ИЗ
		|	ИсточникДанных КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеОстатки КАК СвободныеОстатки
		|		ПО СвободныеОстатки.Склад          = Таблица.Склад
		|		 И СвободныеОстатки.Номенклатура   = Таблица.Номенклатура
		|		 И СвободныеОстатки.Характеристика = Таблица.Характеристика
		|		 И СвободныеОстатки.Свободно > 0
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СортировкаСкладов КАК ТаблицаСортировкиСкладов
		|		ПО ТаблицаСортировкиСкладов.Склад          = Таблица.Склад
		|		 И ТаблицаСортировкиСкладов.Назначение     = Таблица.Назначение
		|		 И ТаблицаСортировкиСкладов.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСортировкиСкладов.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыОтгрузки КАК ТаблицаСкладовОтгрузки
		|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
		|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
		|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
		|ГДЕ
		|	Таблица.Запас > 0
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ЭтоСкладОтгрузки,
		|	СортировкаСклада,
		|	Запас УБЫВ";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	
	Тексты = Новый Массив();
	Текст =
		"ВЫБРАТЬ
		|	&Назначение                               КАК НазначениеДляИтогов,
		|	Таблица.Номенклатура                      КАК Номенклатура,
		|	Таблица.Характеристика                    КАК Характеристика,
		|	Таблица.Склад                             КАК Склад,
		|	Таблица.Запас                             КАК ВНаличии,
		|	Таблица.Потребность - Таблица.КЗаказу     КАК Обеспечено,
		|	Таблица.Потребность                       КАК Потребность,
		|	НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL КАК ЭтоСкладОтгрузки
		|ПОМЕСТИТЬ ТаблицаИтогов
		|ИЗ
		|	ИсточникДанных КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыОтгрузки КАК ТаблицаСкладовОтгрузки
		|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
		|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
		|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	Тексты.Добавить(Текст);
	
	Текст = ВременнаяТаблицаЗаказыНаПеремещение(Ложь);
	Тексты.Добавить(Текст);
	
	Текст =
		"ВЫБРАТЬ
		|	&Назначение КАК НазначениеДляИтогов,
		|	ТаблицаИтогов.Номенклатура КАК Номенклатура,
		|	ТаблицаИтогов.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаИтогов.ВНаличии) КАК ВНаличии,
		|	СУММА(ТаблицаИтогов.Обеспечено) - МАКСИМУМ(ЕСТЬNULL(ЗаказыНаПеремещение.Количество, 0)) КАК Обеспечено,
		|	СУММА(ТаблицаИтогов.Потребность) - МАКСИМУМ(ЕСТЬNULL(ЗаказыНаПеремещение.Количество, 0)) КАК Потребность
		|ИЗ
		|	ТаблицаИтогов КАК ТаблицаИтогов
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыНаПеремещение КАК ЗаказыНаПеремещение
		|		ПО ЗаказыНаПеремещение.Номенклатура = ТаблицаИтогов.Номенклатура
		|		 И ЗаказыНаПеремещение.Характеристика = ТаблицаИтогов.Характеристика
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаИтогов.Номенклатура,
		|	ТаблицаИтогов.Характеристика";
		
	Тексты.Добавить(Текст);
	
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураВозврата.Вставить("ТаблицаИтоговСводно", Запрос.Выполнить().Выгрузить());
	СтруктураВозврата.Вставить("ТаблицаИтогов", Запрос.МенеджерВременныхТаблиц.Таблицы["ТаблицаИтогов"].ПолучитьДанные().Выгрузить());
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает таблицу для заполнения корректировки назначения.
// Параметры:
//  Организация - СправочникСсылка.СтруктураПредприятия -
//  Товары - ТаблицаЗначений
//  Регистратор - ДокументСсылка.КорректировкаНазначенияТоваров, Неопределено -
// Возвращаемое значение:
//  Структура -
//   *ТаблицаТоваров - ТаблицаЗначений -
//   *ТаблицаИтогов - ТаблицаЗначений -

Функция ТаблицаСнятияРезерваПоМногимНазначениям(Организация, Товары, Регистратор, Назначения) Экспорт

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ВсеОрганизации",  Организация = Неопределено);
	Запрос.УстановитьПараметр("Товары",          Товары);
	Запрос.УстановитьПараметр("ВсеТовары",       Товары.Количество() = 0);
	Запрос.УстановитьПараметр("Регистратор",     Регистратор);
	Запрос.УстановитьПараметр("ОстатокНаСкладе", Истина);
	Запрос.УстановитьПараметр("Назначения",      Назначения);
	Запрос.УстановитьПараметр("ЕстьОтборНазначений", Назначения.Количество() > 0);
	Запрос.УстановитьПараметр("СвернутьНазначения", Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	&ПолеНазначениеОтборТоваров КАК Назначение
		|ПОМЕСТИТЬ ОтборТоваров
		|ИЗ
		|	&Товары КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика
		|;
		|///////////////////////////////////
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Таблица.Назначение КАК Назначение
		|ПОМЕСТИТЬ ОтборНазначений
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК Таблица
		|ГДЕ
		|	Таблица.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И (&ВсеОрганизации ИЛИ Таблица.Назначение.Заказ.Организация = &Организация)
		|		И НЕ Таблица.Назначение.ТипНазначения В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПоставкаПодПринципала))
		|		И (НЕ &ЕстьотборНазначений ИЛИ Таблица.Назначение В(&Назначения))
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение";
	НазначенияЕстьВТоварах = Товары.Колонки.Найти("Назначение") <> Неопределено;
	ПолеНазначениеОтборТоваров = "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	Если НазначенияЕстьВТоварах Тогда
		ПолеНазначениеОтборТоваров = "Таблица.Назначение";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеНазначениеОтборТоваров", ПолеНазначениеОтборТоваров);

	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаИсточникДанных(НазначенияЕстьВТоварах);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ОтборТоваровИсточникаДанных
		|ИЗ
		|	ИсточникДанных КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика";
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапросаСвободныеОстатки();
	Запрос.Выполнить();
	
	ДобавитьВременнуюТаблицуСортировкаСкладов(Запрос, "ИсточникДанных", "ИсточникДанных");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв) КАК ВидОперации,
		|	Таблица.Назначение                                                     КАК НазначениеДляИтогов,
		|	Таблица.Номенклатура                                                   КАК Номенклатура,
		|	Таблица.Номенклатура.ЕдиницаИзмерения                                  КАК ЕдиницаИзмерения,
		|	Таблица.Характеристика                                                 КАК Характеристика,
		|	Таблица.Склад                                                          КАК Склад,
		|	Таблица.Назначение                                                     КАК ИсходноеНазначение,
		|	Таблица.Назначение.Заказ                                               КАК ИсходныйЗаказ,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                           КАК НовоеНазначение,
		|	НЕОПРЕДЕЛЕНО                                                           КАК НовыйЗаказ,
		|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0)                                 КАК Свободно,
		|	Таблица.Потребность                                                    КАК Потребность,
		|	Таблица.Запас                                                          КАК Запас,
		|	Таблица.Резерв                                                         КАК Резерв,
		|	ЕСТЬNULL(ТаблицаСортировкиСкладов.ПриоритетСклада, 0)                  КАК СортировкаСклада,
		|	НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL                              КАК ЭтоСкладОтгрузки
		|ИЗ
		|	ИсточникДанных КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеОстатки КАК СвободныеОстатки
		|		ПО СвободныеОстатки.Склад          = Таблица.Склад
		|		 И СвободныеОстатки.Номенклатура   = Таблица.Номенклатура
		|		 И СвободныеОстатки.Характеристика = Таблица.Характеристика
		|		 И СвободныеОстатки.Свободно > 0
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СортировкаСкладов КАК ТаблицаСортировкиСкладов
		|		ПО ТаблицаСортировкиСкладов.Склад          = Таблица.Склад
		|		 И ТаблицаСортировкиСкладов.Назначение     = Таблица.Назначение
		|		 И ТаблицаСортировкиСкладов.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСортировкиСкладов.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыОтгрузки КАК ТаблицаСкладовОтгрузки
		|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
		|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
		|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
		|ГДЕ
		|	Таблица.Запас > 0
		|УПОРЯДОЧИТЬ ПО
		|	ИсходноеНазначение,
		|	Номенклатура,
		|	Характеристика,
		|	ЭтоСкладОтгрузки,
		|	СортировкаСклада,
		|	Запас УБЫВ";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	
	Тексты = Новый Массив();
	Текст =
		"ВЫБРАТЬ
		|	Таблица.Назначение                        КАК НазначениеДляИтогов,
		|	Таблица.Номенклатура                      КАК Номенклатура,
		|	Таблица.Характеристика                    КАК Характеристика,
		|	Таблица.Склад                             КАК Склад,
		|	Таблица.Запас                             КАК ВНаличии,
		|	Таблица.Потребность - Таблица.КЗаказу     КАК Обеспечено,
		|	Таблица.Потребность                       КАК Потребность,
		|	НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL КАК ЭтоСкладОтгрузки
		|ПОМЕСТИТЬ ТаблицаИтогов
		|ИЗ
		|	ИсточникДанных КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыОтгрузки КАК ТаблицаСкладовОтгрузки
		|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
		|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
		|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	Тексты.Добавить(Текст);
	
	Текст = ВременнаяТаблицаЗаказыНаПеремещение(Истина);
	Тексты.Добавить(Текст);
	
	Текст =
		"ВЫБРАТЬ
		|	ТаблицаИтогов.НазначениеДляИтогов КАК НазначениеДляИтогов,
		|	ТаблицаИтогов.Номенклатура КАК Номенклатура,
		|	ТаблицаИтогов.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаИтогов.ВНаличии) КАК ВНаличии,
		|	СУММА(ТаблицаИтогов.Обеспечено) - МАКСИМУМ(ЕСТЬNULL(ЗаказыНаПеремещение.Количество, 0)) КАК Обеспечено,
		|	СУММА(ТаблицаИтогов.Потребность) - МАКСИМУМ(ЕСТЬNULL(ЗаказыНаПеремещение.Количество, 0)) КАК Потребность
		|ИЗ
		|	ТаблицаИтогов КАК ТаблицаИтогов
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыНаПеремещение КАК ЗаказыНаПеремещение
		|		ПО ЗаказыНаПеремещение.Номенклатура = ТаблицаИтогов.Номенклатура
		|		 И ЗаказыНаПеремещение.Характеристика = ТаблицаИтогов.Характеристика
		|		 И ЗаказыНаПеремещение.Назначение = ТаблицаИтогов.НазначениеДляИтогов
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаИтогов.Номенклатура,
		|	ТаблицаИтогов.Характеристика,
		|	ТаблицаИтогов.НазначениеДляИтогов";
		
	Тексты.Добавить(Текст);
	
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураВозврата.Вставить("ТаблицаИтоговСводно", Запрос.Выполнить().Выгрузить());
	СтруктураВозврата.Вставить("ТаблицаИтогов", Запрос.МенеджерВременныхТаблиц.Таблицы["ТаблицаИтогов"].ПолучитьДанные().Выгрузить());
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает таблицу для заполнения корректировки назначения.
// Параметры:
//  Назначение - СправочникСсылка.Назначения -
//  Источники - Структура -
//  ТолькоСкладОтгрузки - 
//  Организация - СправочникСсылка.СтруктураПредприятия - 
//  Товары - ТаблицаЗначений
//  Регистратор - ДокументСсылка.КорректировкаНазначенияТоваров, Неопределено -
// Возвращаемое значение:
//  Структура -
//   *ТаблицаТоваров - ТаблицаЗначений -
//   *ТаблицаИтогов - ТаблицаЗначений -

Функция ТаблицаРезервирования(Назначение, Источники, ТолькоСкладОтгрузки, Организация, Товары, Регистратор) Экспорт
	
	НесколькоНазначений = ТипЗнч(Назначение) = Тип("Массив");
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Назначение",           Назначение);
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ВсеОрганизации",       Организация = Неопределено);
	Запрос.УстановитьПараметр("Товары",               Товары);
	Запрос.УстановитьПараметр("ВсеТовары",            Товары.Количество() = 0);
	Запрос.УстановитьПараметр("Регистратор",          Регистратор);
	Запрос.УстановитьПараметр("ОстатокНаСкладе",      Источники.ОстатокНаСкладе);
	Запрос.УстановитьПараметр("РезервыПодНазначения", Источники.РезервыПодНазначения);
	Запрос.УстановитьПараметр("ТолькоСкладОтгрузки",  ТолькоСкладОтгрузки);
	Запрос.УстановитьПараметр("СвернутьНазначения",   НесколькоНазначений);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ПОМЕСТИТЬ РазрешенныеСклады
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад";
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	&ПолеНазначениеОтборТоваров КАК Назначение
		|ПОМЕСТИТЬ ОтборТоваров
		|ИЗ
		|	&Товары КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика
		|;
		|///////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Назначения.Ссылка КАК Назначение
		|ПОМЕСТИТЬ ОтборНазначений
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|ГДЕ
		|	Назначения.Ссылка В (&Назначение)
		|;
		|///////////////////////////////////
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Назначения.Назначение.ТипНазначения КАК ТипНазначения,
		|	ВЫБОР КОГДА Назначения.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21) ТОГДА
		|				Назначения.Назначение.Заказ.Партнер
		|			ИНАЧЕ
		|				Назначения.Назначение.Партнер
		|		КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА Назначения.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21) ТОГДА
		|				Назначения.Назначение.Заказ.Договор
		|			ИНАЧЕ
		|				Назначения.Назначение.Договор
		|		КОНЕЦ КАК Договор
		|ИЗ
		|	ОтборНазначений КАК Назначения";
	ПолеНазначениеОтборТоваров = "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	Если Товары.Колонки.Найти("Назначение") <> Неопределено Тогда
		ПолеНазначениеОтборТоваров = "Таблица.Назначение";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеНазначениеОтборТоваров", ПолеНазначениеОтборТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Запрос.УстановитьПараметр("ТипНазначения", Выборка.ТипНазначения);
	Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
	Запрос.УстановитьПараметр("Договор", Выборка.Договор);
	
	Запрос.Текст = ТекстЗапросаИсточникДанных(Ложь);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ОтборТоваровИсточникаДанных
		|ИЗ
		|	ИсточникДанных КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика";
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапросаСвободныеОстатки();
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Назначение КАК Назначение
		|ПОМЕСТИТЬ ОтборНазначенийИсточников
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК Таблица
		|ГДЕ
		|	&РезервыПодНазначения
		|		И Таблица.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И Таблица.Назначение НЕ В(&Назначение)
		|		И (&ВсеОрганизации ИЛИ Таблица.Назначение.Заказ.Организация = &Организация)
		|		И ВЫБОР КОГДА &ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21)
		|					ТОГДА
		|						Таблица.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21)
		|							И &Партнер = Таблица.Назначение.Заказ.Партнер 
		|							И &Договор = Таблица.Назначение.Заказ.Договор 
		|						ИЛИ Таблица.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное)
		|				КОГДА
		|					&ТипНазначения В(
		|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
		|					ТОГДА
		|						Таблица.Назначение.ТипНазначения В(
		|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
		|							И &Партнер = Таблица.Назначение.Партнер
		|							И &Договор = Таблица.Назначение.Договор
		|						ИЛИ Таблица.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное)
		|				ИНАЧЕ
		|					НЕ Таблица.Назначение.ТипНазначения В(
		|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
		|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПоставкаПодПринципала))
		|			КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение";
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапросаОбеспечениеЗаказов();
	Запрос.Выполнить();
	Если НесколькоНазначений Тогда // назначение получатель используется только на второй странице, на первой его нет.
		Запрос.УстановитьПараметр("Назначение", Справочники.Назначения.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Назначение                                  КАК Назначение,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК НазначениеИсточник,
		|	Таблица.Номенклатура                         КАК Номенклатура,
		|	Таблица.Характеристика                       КАК Характеристика,
		|	Таблица.Склад                                КАК Склад,
		|	Таблица.Потребность                          КАК Потребность,
		|	Таблица.Запас                                КАК Запас,
		|	Таблица.Резерв                               КАК Резерв
		|ПОМЕСТИТЬ ТаблицаЗаполненияКорректировки
		|ИЗ
		|	СвободныеОстатки КАК Таблица
		|ГДЕ
		|	Таблица.Запас > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	&Назначение                                 КАК Назначение,
		|	ТаблицаНазначенийИсточников.Назначение      КАК НазначениеИсточник,
		|	ТаблицаНазначенийИсточников.Номенклатура    КАК Номенклатура,
		|	ТаблицаНазначенийИсточников.Характеристика  КАК Характеристика,
		|	ТаблицаНазначенийИсточников.Склад           КАК Склад,
		|	ТаблицаНазначенийИсточников.Потребность     КАК Потребность,
		|	ТаблицаНазначенийИсточников.Запас           КАК Запас,
		|	ТаблицаНазначенийИсточников.Резерв          КАК Резерв
		|ИЗ
		|	ОбеспечениеЗаказов КАК ТаблицаНазначенийИсточников
		|ГДЕ
		|	ТаблицаНазначенийИсточников.Запас > 0";
	Запрос.Выполнить();
	
	ИмяТаблицыИсточникДанных = "ИсточникДанных";
	Если НесколькоНазначений Тогда
		
		ИмяТаблицыИсточникДанных = "ИсточникДанных1";
		Текст = ТекстЗапросаИсточникДанных(Ложь);
		Запрос.Текст = СтрЗаменить(Текст, "ИсточникДанных", ИмяТаблицыИсточникДанных);
		Запрос.УстановитьПараметр("СвернутьНазначения", Ложь);
		Запрос.Выполнить();
		
	КонецЕсли;
	ДобавитьВременнуюТаблицуСортировкаСкладов(Запрос, ИмяТаблицыИсточникДанных, ИмяТаблицыИсточникДанных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад
		|ПОМЕСТИТЬ СкладыОтгрузкиСвернутые
		|ИЗ
		|	СкладыОтгрузки КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|ВЫБРАТЬ
		|	Таблица.Номенклатура             КАК Номенклатура,
		|	Таблица.Характеристика           КАК Характеристика,
		|	Таблица.Склад                    КАК Склад,
		|	МИНИМУМ(Таблица.ПриоритетСклада) КАК ПриоритетСклада
		|ПОМЕСТИТЬ СортировкаСкладовСвернутая
		|ИЗ
		|	СортировкаСкладов КАК Таблица
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать) КАК ВидОперации,
		|	Таблица.Назначение                                                       КАК НазначениеДляИтогов,
		|	Таблица.Номенклатура                                                     КАК Номенклатура,
		|	Таблица.Номенклатура.ЕдиницаИзмерения                                    КАК ЕдиницаИзмерения,
		|	Таблица.Характеристика                                                   КАК Характеристика,
		|	Таблица.Склад                                                            КАК Склад,
		|	Таблица.НазначениеИсточник                                               КАК ИсходноеНазначение,
		|	Таблица.НазначениеИсточник.Заказ                                         КАК ИсходныйЗаказ,
		|	Таблица.Назначение                                                       КАК НовоеНазначение,
		|	Таблица.Назначение.Заказ                                                 КАК НовыйЗаказ,
		|	Таблица.Потребность                                                      КАК Потребность,
		|	Таблица.Запас                                                            КАК Запас,
		|	Таблица.Резерв                                                           КАК Резерв,
		|	НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL                                КАК ЭтоСкладОтгрузки,
		|	ЕСТЬNULL(ТаблицаСортировкиСкладов.ПриоритетСклада, 0)                    КАК СортировкаСклада
		|ИЗ
		|	ТаблицаЗаполненияКорректировки КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СортировкаСкладовСвернутая КАК ТаблицаСортировкиСкладов
		|		ПО ТаблицаСортировкиСкладов.Склад          = Таблица.Склад
		|		 И ТаблицаСортировкиСкладов.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСортировкиСкладов.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыОтгрузкиСвернутые КАК ТаблицаСкладовОтгрузки
		|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
		|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеСклады КАК РазрешенныеСклады
		|		ПО РазрешенныеСклады.Склад = Таблица.Склад
		|ГДЕ
		|	НЕ &ТолькоСкладОтгрузки ИЛИ НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ЭтоСкладОтгрузки УБЫВ,
		|	СортировкаСклада УБЫВ,
		|	НазначениеИсточник";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Тексты = Новый Массив();
	Текст =
		"ВЫБРАТЬ
		|	&Назначение                             КАК НазначениеДляИтогов,
		|	Набор.Номенклатура                      КАК Номенклатура,
		|	Набор.Характеристика                    КАК Характеристика,
		|	Набор.Склад                             КАК Склад,
		|	СУММА(Набор.ВНаличии)                   КАК ВНаличии,
		|	СУММА(Набор.Обеспечено)                 КАК Обеспечено,
		|	СУММА(Набор.Потребность)                КАК Потребность,
		|	МАКСИМУМ(Набор.ЭтоСкладОтгрузки)        КАК ЭтоСкладОтгрузки
		|ПОМЕСТИТЬ ТаблицаИтогов
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура                      КАК Номенклатура,
		|		Таблица.Характеристика                    КАК Характеристика,
		|		Таблица.Склад                             КАК Склад,
		|		Таблица.Запас                             КАК ВНаличии,
		|		Таблица.Потребность - Таблица.КЗаказу     КАК Обеспечено,
		|		Таблица.Потребность                       КАК Потребность,
		|		НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL КАК ЭтоСкладОтгрузки
		|	ИЗ
		|		ИсточникДанных КАК Таблица
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ СкладыОтгрузкиСвернутые КАК ТаблицаСкладовОтгрузки
		|			ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
		|			 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
		|			 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеСклады КАК РазрешенныеСклады
		|		ПО РазрешенныеСклады.Склад = Таблица.Склад
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Блок добавляется, потому-что в таблице заполнения могут быть склады других назначений, отсуствующие в источнике данных.
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура                      КАК Номенклатура,
		|		Таблица.Характеристика                    КАК Характеристика,
		|		Таблица.Склад                             КАК Склад,
		|		0                                         КАК ВНаличии,
		|		0                                         КАК Обеспечено,
		|		0                                         КАК Потребность,
		|		НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL КАК ЭтоСкладОтгрузки
		|	ИЗ
		|		ТаблицаЗаполненияКорректировки КАК Таблица
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ СкладыОтгрузкиСвернутые КАК ТаблицаСкладовОтгрузки
		|			ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
		|			 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
		|			 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	Тексты.Добавить(Текст);
	
	Текст = ВременнаяТаблицаЗаказыНаПеремещение(Ложь);
	Тексты.Добавить(Текст);
	
	Текст =
		"ВЫБРАТЬ
		|	&Назначение КАК НазначениеДляИтогов,
		|	ТаблицаИтогов.Номенклатура КАК Номенклатура,
		|	ТаблицаИтогов.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаИтогов.ВНаличии) КАК ВНаличии,
		|	СУММА(ТаблицаИтогов.Обеспечено) - МАКСИМУМ(ЕСТЬNULL(ЗаказыНаПеремещение.Количество, 0)) КАК Обеспечено,
		|	СУММА(ТаблицаИтогов.Потребность) - МАКСИМУМ(ЕСТЬNULL(ЗаказыНаПеремещение.Количество, 0)) КАК Потребность
		|ИЗ
		|	ТаблицаИтогов КАК ТаблицаИтогов
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыНаПеремещение КАК ЗаказыНаПеремещение
		|		ПО ЗаказыНаПеремещение.Номенклатура = ТаблицаИтогов.Номенклатура
		|		 И ЗаказыНаПеремещение.Характеристика = ТаблицаИтогов.Характеристика
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаИтогов.Номенклатура,
		|	ТаблицаИтогов.Характеристика";
	
	Тексты.Добавить(Текст);
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураВозврата.Вставить("ТаблицаИтоговСводно", Запрос.Выполнить().Выгрузить());
	СтруктураВозврата.Вставить("ТаблицаИтогов", Запрос.МенеджерВременныхТаблиц.Таблицы["ТаблицаИтогов"].ПолучитьДанные().Выгрузить());
	
	Тексты = Новый Массив();
	Текст =
		"УНИЧТОЖИТЬ ТаблицаИтогов;
		|УНИЧТОЖИТЬ ЗаказыНаПеремещение;
		|
		|////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК НазначениеДляИтогов,
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Потребность КАК Потребность,
		|	Таблица.Запас КАК Запас
		|ПОМЕСТИТЬ ТаблицаИтогов
		|	
		|ИЗ
		|	СвободныеОстатки КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеСклады КАК РазрешенныеСклады
		|		ПО РазрешенныеСклады.Склад = Таблица.Склад
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ТаблицаНазначенийИсточников.Назначение КАК НазначениеДляИтогов,
		|	ТаблицаНазначенийИсточников.Номенклатура КАК Номенклатура,
		|	ТаблицаНазначенийИсточников.Характеристика КАК Характеристика,
		|	ТаблицаНазначенийИсточников.Склад КАК Склад,
		|	ТаблицаНазначенийИсточников.Потребность КАК Потребность,
		|	ТаблицаНазначенийИсточников.Запас КАК Запас
		|ИЗ
		|	ОбеспечениеЗаказов КАК ТаблицаНазначенийИсточников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеСклады КАК РазрешенныеСклады
		|		ПО РазрешенныеСклады.Склад = ТаблицаНазначенийИсточников.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, НазначениеДляИтогов";
	Тексты.Добавить(Текст);
	Текст = ВременнаяТаблицаЗаказыНаПеремещение(Истина);
	Тексты.Добавить(Текст);
	Текст =
		"ВЫБРАТЬ
		|	&Назначение КАК Назначение,
		|	ТаблицаИтогов.НазначениеДляИтогов КАК ИсходноеНазначение,
		|	ТаблицаИтогов.Номенклатура КАК Номенклатура,
		|	ТаблицаИтогов.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаИтогов.Потребность) - МАКСИМУМ(ЕСТЬNULL(ЗаказыНаПеремещение.Количество, 0)) КАК Потребность,
		|	СУММА(ТаблицаИтогов.Запас) КАК Запас
		|ИЗ
		|	ТаблицаИтогов КАК ТаблицаИтогов
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыНаПеремещение КАК ЗаказыНаПеремещение
		|		ПО ЗаказыНаПеремещение.Номенклатура = ТаблицаИтогов.Номенклатура
		|		 И ЗаказыНаПеремещение.Характеристика = ТаблицаИтогов.Характеристика
		|		 И ЗаказыНаПеремещение.Назначение = ТаблицаИтогов.НазначениеДляИтогов
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаИтогов.Номенклатура,
		|	ТаблицаИтогов.Характеристика,
		|	ТаблицаИтогов.НазначениеДляИтогов";
	
	Тексты.Добавить(Текст);
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	СтруктураВозврата.Вставить("ТаблицаИтоговИсточниковОбеспечения", Запрос.Выполнить().Выгрузить());
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает таблицу для заполнения корректировки назначения.
// Параметры:
//  Назначения - Массив Из СправочникСсылка.Назначения -
//  ТолькоСкладОтгрузки - Булево -
//  Товары - ТаблицаЗначений
//  Регистратор - ДокументСсылка.КорректировкаНазначенияТоваров, Неопределено -
// Возвращаемое значение:
//  Структура -
//   *ТаблицаТоваров - ТаблицаЗначений -
//   *ТаблицаИтогов - ТаблицаЗначений -

Функция ТаблицаПоМногимНазначениям(Назначения, ТолькоСкладОтгрузки, Товары, Регистратор) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Назначение",          Назначения);
	Запрос.УстановитьПараметр("Товары",              Товары);
	Запрос.УстановитьПараметр("ВсеТовары",           Товары.Количество() = 0);
	Запрос.УстановитьПараметр("ТолькоСкладОтгрузки", ТолькоСкладОтгрузки);
	Запрос.УстановитьПараметр("Регистратор",         Регистратор);
	Запрос.УстановитьПараметр("СвернутьНазначения",  Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение КАК Назначение
		|ПОМЕСТИТЬ ОтборТоваров
		|ИЗ
		|	&Товары КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика
		|;
		|///////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Назначения.Ссылка КАК Назначение
		|ПОМЕСТИТЬ ОтборНазначений
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|ГДЕ
		|	Назначения.Ссылка В (&Назначение)";
	
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапросаИсточникДанных(Истина);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Назначение                           КАК Назначение,
		|	Таблица.Номенклатура                         КАК Номенклатура,
		|	Таблица.Характеристика                       КАК Характеристика,
		|	Таблица.Склад                                КАК Склад,
		|	Таблица.Запас                                КАК ВНаличии,
		|	Таблица.Потребность - Таблица.КЗаказу        КАК Обеспечено,
		|	Таблица.Потребность                          КАК Потребность
		|ПОМЕСТИТЬ ТаблицаЗаполненияКорректировки
		|ИЗ
		|	ИсточникДанных КАК Таблица";
	Запрос.Выполнить();
	
	ДобавитьВременнуюТаблицуСортировкаСкладов(Запрос, "ИсточникДанных", "ИсточникДанных");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.ПустаяСсылка)  КАК ВидОперации,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                             КАК НазначениеДляИтогов,
		|	Таблица.Номенклатура                                                     КАК Номенклатура,
		|	МАКСИМУМ(Таблица.Номенклатура.ЕдиницаИзмерения)                          КАК ЕдиницаИзмерения,
		|	Таблица.Характеристика                                                   КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                                 КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                             КАК ИсходноеНазначение,
		|	НЕОПРЕДЕЛЕНО                                                             КАК ИсходныйЗаказ,
		|	Таблица.Назначение                                                       КАК НовоеНазначение,
		|	МАКСИМУМ(Таблица.Назначение.Заказ)                                       КАК НовыйЗаказ,
		|	СУММА(Таблица.ВНаличии)                                                  КАК ВНаличии,
		|	СУММА(Таблица.Обеспечено)                                                КАК Обеспечено,
		|	СУММА(Таблица.Потребность)                                               КАК Потребность
		|ИЗ
		|	ТаблицаЗаполненияКорректировки КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыОтгрузки КАК ТаблицаСкладовОтгрузки
		|		ПО ТаблицаСкладовОтгрузки.Склад          = Таблица.Склад
		|		 И ТаблицаСкладовОтгрузки.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСкладовОтгрузки.Характеристика = Таблица.Характеристика
		|		 И ТаблицаСкладовОтгрузки.Назначение     = Таблица.Назначение
		|ГДЕ
		|	НЕ &ТолькоСкладОтгрузки ИЛИ НЕ ТаблицаСкладовОтгрузки.Склад ЕСТЬ NULL
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	НовоеНазначение";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеОбработкиЗаполненияКорректировкиНазначения

Функция СоздатьЗаполнитьИПровестиДокумент(РеквизитыШапки, Таблица) Экспорт
	
	Результат = Новый Структура("Документ,Проведен,Ошибки");

	Документ = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	
	ДанныеЗаполнения = Новый Структура("РеквизитыШапки,Товары", РеквизитыШапки, Таблица);
	Документ.Заполнить(ДанныеЗаполнения);
	Ошибка = Не Документ.ПроверитьЗаполнение();
	Если Не Ошибка Тогда
		
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Проведение);
			Результат.Проведен = Истина;
		Исключение
			
			Результат.Ошибки = ПолучитьСообщенияПользователю(Истина);
			Документ.Записать(РежимЗаписиДокумента.Запись);
			Результат.Проведен = Ложь;
			
		КонецПопытки;
		
	Иначе
		
		Результат.Ошибки = ПолучитьСообщенияПользователю(Истина);
		Документ.Записать(РежимЗаписиДокумента.Запись);
		Результат.Проведен = Ложь;
		
	КонецЕсли;
	
	Результат.Документ = Документ.Ссылка;
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Таблица - ТаблицаЗначений - таблица соответствующая табличной части "Товары" документа.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка, содержащая признаки указания помещений ячеек и серий для строки.
//
Функция УказаниеПомещенийЯчеекСерийДляСтроки(Таблица) Экспорт
	
	Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СтатусУказанияСерий", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	// Заполнение номера строки для расчетов, и последующей связи с ТаблицаТовары
	Для НомерСтроки = 1 По Таблица.Количество() Цикл
		Таблица[НомерСтроки - 1].НомерСтроки = НомерСтроки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапросаТаблицаТоваров =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Склад КАК Склад
	|ПОМЕСТИТЬ СтрокиТаблицы
	|ИЗ
	|	&Товары КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Склад,
	|	ЕстьNULL(СкладскиеПомещения.Ссылка, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) КАК Помещение
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	СтрокиТаблицы КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеПомещения КАК СкладскиеПомещения
	|		ПО ТаблицаТоваров.Склад = СкладскиеПомещения.Владелец
	|		И СкладскиеПомещения.ПометкаУдаления = ЛОЖЬ";
	
	// Определение использования помещений по складам и адресного хранения
	// + Определение использования серий по складам.
	ТекстОкончанияЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки,
	|	МАКСИМУМ(Таблица.ИспользоватьАдресноеХранение) КАК ИспользоватьАдресноеХранение,
	|	МАКСИМУМ(Таблица.ИспользоватьСкладскиеПомещения) КАК ИспользоватьСкладскиеПомещения,
	|	МАКСИМУМ(ВЫБОР КОГДА ЕСТЬNULL(ТаблицаСтатусов.СтатусУказанияСерий, 0) > 0 ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ) КАК ИспользоватьСерии
	|ИЗ
	|	ВТИспользованиеПомещенийИАдресногоХранения КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтатусов КАК ТаблицаСтатусов
	|		ПО Таблица.НомерСтроки = ТаблицаСтатусов.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НомерСтроки";
	
	ТекстАдресноеХранение = Документы.КорректировкаНазначенияТоваров.ТекстЗапросаИспользованиеПомещенийИАдресногоХранения(
		"ВТИспользованиеПомещенийИАдресногоХранения");
	ТекстСтатусыСерий = Документы.КорректировкаНазначенияТоваров.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Неопределено);

	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить(ТекстЗапросаТаблицаТоваров);
	ТекстыЗапросов.Добавить(ТекстАдресноеХранение);
	ТекстыЗапросов.Добавить(ТекстСтатусыСерий);
	ТекстыЗапросов.Добавить(ТекстОкончанияЗапроса);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Товары", Таблица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;

КонецФункции

// Параметры:
//  ТаблицаПолуфабрикатов - ТаблицаЗначений - Таблица полуфабрикатов.
//  ТаблицаМатериалов - ТаблицаЗначений - Таблица материалов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица распределения материалов с учетом коэффициентов для полуфабрикатов.
//
Функция РаспределитьТоварыВстречнойКорректировки(ТаблицаПолуфабрикатов, ТаблицаМатериалов) Экспорт

	ТаблицаПолуфабрикатов.Колонки.Добавить("КоэффициентРаспределения", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаПолуфабрикатов.Колонки.Добавить("КлючРаспределения", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	ИтогКоличество = ТаблицаПолуфабрикатов.Итог("Количество");
	
	ИндексСтроки = ТаблицаПолуфабрикатов.Количество() - 1;
	Пока ИндексСтроки > -1 Цикл
	
		СтрокаТаблицы = ТаблицаПолуфабрикатов[ИндексСтроки];
		
		СтрокаТаблицы.КлючРаспределения        = ИндексСтроки;
		СтрокаТаблицы.КоэффициентРаспределения = Цел(СтрокаТаблицы.Количество / ИтогКоличество * 1000) / 1000;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	ТаблицаПолуфабрикатов.Сортировать("Количество Убыв");
	
	ИтогКоэффициентРаспределения = ТаблицаПолуфабрикатов.Итог("КоэффициентРаспределения");
	Если ИтогКоэффициентРаспределения <> 1 Тогда
		СтрокаТаблицы = ТаблицаПолуфабрикатов[0];
		СтрокаТаблицы.КоэффициентРаспределения =
			СтрокаТаблицы.КоэффициентРаспределения + 1 - ИтогКоэффициентРаспределения;
	КонецЕсли;
		
	ТаблицаМатериалов.Колонки.Добавить("КлючРаспределения", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	ИндексСтроки = ТаблицаМатериалов.Количество() - 1;
	Пока ИндексСтроки > -1 Цикл
		
		СтрокаТаблицы = ТаблицаМатериалов[ИндексСтроки];
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Упаковка) Тогда
			ТипИзмеряемойВеличины = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
										СтрокаТаблицы.Упаковка, "ТипИзмеряемойВеличины");
		Иначе
			ТипИзмеряемойВеличины = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
										СтрокаТаблицы.Номенклатура, "ЕдиницаИзмерения.ТипИзмеряемойВеличины");
		КонецЕсли;
		
		РаспределитьШтучно = ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;
		
		ИтогКоличествоРаспределения = СтрокаТаблицы.Количество;
		
		ИндексСтрокиСНаибольшимКоличеством = -1;
		Для Каждого СтрокаИсходнойТаблицы Из ТаблицаПолуфабрикатов Цикл
			
			КоличествоРаспределения =
				Цел(СтрокаТаблицы.Количество * СтрокаИсходнойТаблицы.КоэффициентРаспределения * 1000) / 1000;
			
			Если РаспределитьШтучно Тогда
				КоличествоРаспределенияОкр = Окр(КоличествоРаспределения);
				Если КоличествоРаспределения <> КоличествоРаспределенияОкр Тогда
					КоличествоРаспределения = ?(КоличествоРаспределенияОкр = 0, 1, КоличествоРаспределенияОкр);
				КонецЕсли;
				КоличествоРаспределения = Мин(КоличествоРаспределения, ИтогКоличествоРаспределения);
			ИначеЕсли КоличествоРаспределения = 0 Тогда
				КоличествоРаспределения = ИтогКоличествоРаспределения;
			КонецЕсли;
			
			НоваяСтрокаТаблицы = ТаблицаМатериалов.Добавить();
			НоваяСтрокаТаблицы.НовоеНазначение   = СтрокаИсходнойТаблицы.ИсходноеНазначение;
			НоваяСтрокаТаблицы.КлючРаспределения = СтрокаИсходнойТаблицы.КлючРаспределения;
			НоваяСтрокаТаблицы.Количество        = КоличествоРаспределения;
			
			ЗаполнитьЗначенияСвойств(
				НоваяСтрокаТаблицы, СтрокаТаблицы,, "НовоеНазначение, КлючРаспределения, Количество");
			
			Если ИндексСтрокиСНаибольшимКоличеством = -1 Тогда
				ИндексСтрокиСНаибольшимКоличеством = ТаблицаМатериалов.Количество() - 1;
			КонецЕсли;
			
			ИтогКоличествоРаспределения = ИтогКоличествоРаспределения - НоваяСтрокаТаблицы.Количество;
			Если ИтогКоличествоРаспределения = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИтогКоличествоРаспределения <> 0 Тогда
			НоваяСтрокаТаблицы = ТаблицаМатериалов[ИндексСтрокиСНаибольшимКоличеством];
			НоваяСтрокаТаблицы.Количество = НоваяСтрокаТаблицы.Количество + ИтогКоличествоРаспределения;
		КонецЕсли;
		
		ТаблицаМатериалов.Удалить(ИндексСтроки);
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	Результат = ТаблицаМатериалов.СкопироватьКолонки();
	ТаблицаМатериалов.Индексы.Добавить("КлючРаспределения");
	Для Каждого СтрокаТаблицы Из ТаблицаПолуфабрикатов Цикл
		
		НоваяСтрокаТаблицы = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТаблицы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ТаблицаМатериалов.Скопировать(Новый Структура("КлючРаспределения", СтрокаТаблицы.КлючРаспределения)),
			Результат);
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура СнятьРезервы(ТаблицаТовары, СнятьИзлишекРезервов, ИтогиПоТоварам) Экспорт
	
	Если СнятьИзлишекРезервов Тогда
		
		Если ТипЗнч(ТаблицаТовары) = Тип("ДанныеФормыКоллекция") Тогда
			Таблица = ТаблицаТовары.Выгрузить();
		Иначе
			Таблица = ТаблицаТовары.Скопировать();
		КонецЕсли;
		Итоги = ИтогиПоТоварам;
		Если ТипЗнч(Итоги) = Тип("ДанныеФормыКоллекция") Тогда
			Итоги = Итоги.Выгрузить();
		КонецЕсли;
		ГруппировкиСтрок = "НазначениеДляИтогов,Номенклатура,Характеристика";
		Итоги.Свернуть(ГруппировкиСтрок, "Потребность");
		Итоги.Индексы.Добавить(ГруппировкиСтрок);
		
		Таблица.Колонки.Добавить("РезервПоПотребности");
		
		СтруктураКлючевыхПолей = Новый Структура(ГруппировкиСтрок);
		
		Для Счетчик = 1 По Таблица.Количество() Цикл
			
			Строка = Таблица[Счетчик - 1];
			Если СтруктураКлючевыхПолей.НазначениеДляИтогов <> Строка.НазначениеДляИтогов
					Или СтруктураКлючевыхПолей.Номенклатура <> Строка.Номенклатура
					Или СтруктураКлючевыхПолей.Характеристика <> Строка.Характеристика Тогда
					
					ЗаполнитьЗначенияСвойств(СтруктураКлючевыхПолей, Строка);
					НайденныеСтроки = Итоги.НайтиСтроки(СтруктураКлючевыхПолей);
					
			КонецЕсли;
			Строка.РезервПоПотребности = Макс(0, Мин(Строка.Запас - Строка.Резерв, Строка.Потребность - Строка.Резерв));
			НайденныеСтроки[0].Потребность = НайденныеСтроки[0].Потребность - Строка.РезервПоПотребности;
			
		КонецЦикла;
		Для Счетчик = 1 По Таблица.Количество() Цикл
			
			Строка = Таблица[Счетчик - 1];
			Если СтруктураКлючевыхПолей.НазначениеДляИтогов <> Строка.НазначениеДляИтогов
					Или СтруктураКлючевыхПолей.Номенклатура <> Строка.Номенклатура
					Или СтруктураКлючевыхПолей.Характеристика <> Строка.Характеристика Тогда
					
					ЗаполнитьЗначенияСвойств(СтруктураКлючевыхПолей, Строка);
					НайденныеСтроки = Итоги.НайтиСтроки(СтруктураКлючевыхПолей);
					
			КонецЕсли;
			ТекПотребность = Макс(0, Мин(Строка.Запас - Строка.Резерв - Строка.РезервПоПотребности, НайденныеСтроки[0].Потребность));
			Строка.РезервПоПотребности = Строка.РезервПоПотребности + ТекПотребность;
			НайденныеСтроки[0].Потребность = НайденныеСтроки[0].Потребность - ТекПотребность;
			
			ТаблицаТовары[Счетчик - 1].Количество = Макс(0, Строка.Запас - Строка.Резерв - Строка.РезервПоПотребности);
			ТаблицаТовары[Счетчик - 1].Отметка = ТаблицаТовары[Счетчик - 1].Количество > 0;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка Из ТаблицаТовары Цикл
			
			// Снять все резервы
			Строка.Количество = Макс(0, Строка.Запас - Строка.Резерв);
			Строка.Отметка = Строка.Количество > 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРезервы(Таблица, ТаблицаИтоги) Экспорт
	
	ГруппировкиСтрок = "НазначениеДляИтогов,Номенклатура,Характеристика";
	СтрокиСоСкладом = Новый Массив();
	Для Каждого Строка Из ТаблицаИтоги Цикл
		Если Не Строка.Склад.Пустая() Тогда
			СтрокиСоСкладом.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(ТаблицаИтоги) = Тип("ДанныеФормыКоллекция") Тогда
		Итоги = ТаблицаИтоги.Выгрузить(СтрокиСоСкладом, ГруппировкиСтрок + ",Потребность,Обеспечено");
	ИначеЕсли ТипЗнч(ТаблицаИтоги) = Тип("ТаблицаЗначений") Тогда
		Итоги = ТаблицаИтоги.Скопировать(СтрокиСоСкладом, ГруппировкиСтрок + ",Потребность,Обеспечено");
	КонецЕсли;
	Итоги.Свернуть(ГруппировкиСтрок, "Потребность,Обеспечено");
	Итоги.Колонки.НазначениеДляИтогов.Имя = "НовоеНазначение";
	ГруппировкиСтрок = "НовоеНазначение,Номенклатура,Характеристика";
	Итоги.Индексы.Добавить(ГруппировкиСтрок);
	
	СтруктураКлючевыхПолей = Новый Структура(ГруппировкиСтрок);
	Потребность = 0;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Строка.ВидОперации <> Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураКлючевыхПолей.НовоеНазначение <> Строка.НовоеНазначение
				Или СтруктураКлючевыхПолей.Номенклатура <> Строка.Номенклатура
				Или СтруктураКлючевыхПолей.Характеристика <> Строка.Характеристика Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураКлючевыхПолей, Строка);
				НайденныеСтроки = Итоги.НайтиСтроки(СтруктураКлючевыхПолей);
				Потребность = Макс(НайденныеСтроки[0].Потребность - НайденныеСтроки[0].Обеспечено, 0);
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ИсходноеНазначение) Тогда
			
			Строка.Количество = Макс(Мин(Потребность, Строка.Запас - Строка.Резерв), 0);
			Потребность = Потребность - Строка.Количество;
			Строка.Отметка = Строка.Количество > 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбсуживающиеФормуДокумента

// Параметры:
//  Объект - ДанныеФормыСтруктура:
//   * Товары - ДанныеФормыКоллекция - коллекция на форме.
//  МассивСтрок - Массив - обрабатываемые строки коллекции.
Процедура ЗаполнитьЗаказВТабличнойЧастиТовары(Объект, МассивСтрок = Неопределено) Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ИсходноеНазначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("НовоеНазначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	Строки = ?(МассивСтрок = Неопределено, Объект.Товары, МассивСтрок);
	
	Для Каждого Строка Из Строки Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ИндексСтроки = Объект.Товары.Индекс(Строка);
	КонецЦикла;
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Строка.ИндексСтроки КАК ИндексСтроки,
		|	Строка.ИсходноеНазначение КАК ИсходноеНазначение,
		|	Строка.НовоеНазначение КАК НовоеНазначение
		|ПОМЕСТИТЬ Строки
		|ИЗ
		|	&Строки КАК Строка
		|;
		|ВЫБРАТЬ
		|	Строка.ИндексСтроки КАК ИндексСтроки,
		|	ЕСТЬNULL(ТаблицаИсходноеНазначение.Заказ, НЕОПРЕДЕЛЕНО) КАК ИсходныйЗаказ,
		|	ЕСТЬNULL(ТаблицаНовоеНазначение.Заказ, НЕОПРЕДЕЛЕНО) КАК НовыйЗаказ
		|ИЗ
		|	Строки КАК Строка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК ТаблицаИсходноеНазначение
		|		ПО ТаблицаИсходноеНазначение.Ссылка = Строка.ИсходноеНазначение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК ТаблицаНовоеНазначение
		|		ПО ТаблицаНовоеНазначение.Ссылка = Строка.НовоеНазначение";
	Запрос.УстановитьПараметр("Строки", Таблица);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Объект.Товары[Выборка.ИндексСтроки];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ИсходныйЗаказ,НовыйЗаказ");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ДопустимыНазначенияБезЗаказа() Экспорт
	
	ДопустимыНазначенияБезЗаказа = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	
	Возврат ДопустимыНазначенияБезЗаказа;
	
КонецФункции

Функция СоздатьКорректировкуНазначенияТоваровНаОснованииЗаказаКлиентаПроверкаТипаНазначения(ОбъектОснование) Экспорт
	
	РезультатПроверки = Новый Структура("ТекстОшибки", Неопределено);
	
	Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		Назначение = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(ОбъектОснование);
		
		Если ЗначениеЗаполнено(Назначение)
			И Назначение.ТипНазначения = Перечисления.ТипыНазначений.ПоставкаПодПринципала Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Для данного типа назначения корректировка недоступна. Необходимо переделать исходные документы.'");
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы
// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#КонецОбласти

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Ссылка", 			   Реквизиты.Ссылка); // Предназначен для использования в процедуре ИнициализироватьВидыЗапасов
	Запрос.УстановитьПараметр("Период", 			   Реквизиты.Период);
	Запрос.УстановитьПараметр("ПометкаУдаления", 	   Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Номер", 				   Реквизиты.Номер);
	Запрос.УстановитьПараметр("Проведен", 			   Реквизиты.Проведен);
	Запрос.УстановитьПараметр("Комментарий", 		   Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("Организация", 		   Реквизиты.Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КорректировкаОбособленногоУчета);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	Запрос.УстановитьПараметр("НомерНаПечать",         ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	Запрос.УстановитьПараметр("НастройкаХозяйственнойОперации", Справочники.НастройкиХозяйственныхОпераций.КорректировкаОбособленногоУчета);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Номенклатура         КАК Номенклатура,
	|	Ключи.Характеристика       КАК Характеристика,
	|	Ключи.Назначение           КАК Назначение,
	|	Ключи.Серия                КАК Серия,
	|	Ключи.МестоХранения        КАК Склад
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Товары.АналитикаУчетаНоменклатуры.Номенклатура         КАК Номенклатура,
	|		Товары.АналитикаУчетаНоменклатуры.Характеристика       КАК Характеристика,
	|		&ПустоеНазначение          КАК Назначение,
	|		Товары.АналитикаУчетаНоменклатуры.Серия                КАК Серия,
	|		Товары.АналитикаУчетаНоменклатуры.МестоХранения        КАК МестоХранения
	|	ИЗ
	|		Документ.КорректировкаНазначенияТоваров.ВидыЗапасов КАК Товары
	|	ГДЕ
	|		Товары.Ссылка = &Ссылка
	|		И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|	) КАК Ключи
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура      = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия          = Аналитика.Серия
	|		И Ключи.МестоХранения = Аналитика.МестоХранения
	|		И Ключи.Назначение = Аналитика.Назначение
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL
	|");
	
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
КонецПроцедуры

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА ЕСТЬNULL(ВидыЗапасовВладельца.Организация, ЕСТЬNULL(ТаблицаВидыЗапасов.ВидЗапасов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА
	|				ЕСТЬNULL(ВидыЗапасовВладельца.Организация, ТаблицаВидыЗапасов.ВидЗапасов.Организация)
	|			ИНАЧЕ
	|				&Организация
	|		КОНЕЦ                                                   КАК Организация,
	|	ТаблицаВидыЗапасов.НомерСтроки								КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура										КАК Номенклатура,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика									КАК Характеристика,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Серия												КАК Серия,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая	КАК ЦеховаяКладовая,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение										КАК Назначение,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.Назначение КАК НовоеНазначение,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры				КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики						КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование	КАК АналитикаУчетаНоменклатурыОприходование,
	|	АналитикаБезНазначения.КлючАналитики						КАК АналитикаУчетаНоменклатурыОприходованиеБезНазначения,
	|	ЕСТЬNULL(ВидыЗапасовВладельца.Ссылка, ТаблицаВидыЗапасов.ВидЗапасов)	КАК ВидЗапасов,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ВидЗапасовОприходование = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА ЕСТЬNULL(ВидыЗапасовВладельца.Ссылка, ТаблицаВидыЗапасов.ВидЗапасов.Ссылка)
	|		ИНАЧЕ ТаблицаВидыЗапасов.ВидЗапасовОприходование
	|	КОНЕЦ														КАК ВидЗапасовОприходование,
	|	ТаблицаВидыЗапасов.НомерГТД									КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество								КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ							КАК КоличествоПоРНПТ,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки                      КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовВладельца
	|	ПО ТаблицаВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|		И ТаблицаВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца = ВидыЗапасовВладельца.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура = АналитикаБезНазначения.Номенклатура
	|		И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика = АналитикаБезНазначения.Характеристика
	|		И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Серия = АналитикаБезНазначения.Серия
	|		И ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения = АналитикаБезНазначения.МестоХранения
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаБезНазначения.Назначение
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	1												КАК Порядок,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	&Период											КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)			КАК ВидДвижения,
	|	ТаблицаВидыЗапасов.Организация					КАК Организация,
	|	ТаблицаВидыЗапасов.Организация					КАК ОрганизацияОтгрузки,
	|	ТаблицаВидыЗапасов.Номенклатура					КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика				КАК Характеристика,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ				КАК КоличествоПоРНПТ,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК КорВидЗапасов,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование КАК КорАналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2												КАК Порядок,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	&Период											КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	ТаблицаВидыЗапасов.Организация					КАК Организация,
	|	НЕОПРЕДЕЛЕНО									КАК ОрганизацияОтгрузки,
	|	ТаблицаВидыЗапасов.Номенклатура					КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика				КАК Характеристика,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ				КАК КоличествоПоРНПТ,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатуры,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК КорВидЗапасов,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДатыПоступленияТоваровОрганизаций";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступленияТоваров.ДатаПоступления КАК ДатаПоступления,
	|	ТаблицаВидыЗапасов.Номенклатура КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика КАК Характеристика,
	|	ТаблицаВидыЗапасов.Серия КАК Серия,
	|	ТаблицаВидыЗапасов.НовоеНазначение КАК Назначение,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ПоступленияТоваров
	|	ПО
	|		ТаблицаВидыЗапасов.ВидЗапасов = ПоступленияТоваров.ВидЗапасов
	|		И ТаблицаВидыЗапасов.Номенклатура = ПоступленияТоваров.Номенклатура
	|		И ТаблицаВидыЗапасов.Характеристика = ПоступленияТоваров.Характеристика
	|		И ТаблицаВидыЗапасов.Серия = ПоступленияТоваров.Серия
	|		И ТаблицаВидыЗапасов.НовоеНазначение = ПоступленияТоваров.Назначение
	|		И ТаблицаВидыЗапасов.НомерГТД = ПоступленияТоваров.НомерГТД
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ПоступленияТоваровПолучатель
	|	ПО
	|		ТаблицаВидыЗапасов.ВидЗапасовОприходование = ПоступленияТоваровПолучатель.ВидЗапасов
	|		И ТаблицаВидыЗапасов.Номенклатура = ПоступленияТоваровПолучатель.Номенклатура
	|		И ТаблицаВидыЗапасов.Характеристика = ПоступленияТоваровПолучатель.Характеристика
	|		И ТаблицаВидыЗапасов.Серия = ПоступленияТоваровПолучатель.Серия
	|		И ТаблицаВидыЗапасов.НовоеНазначение = ПоступленияТоваровПолучатель.Назначение
	|		И ТаблицаВидыЗапасов.НомерГТД = ПоступленияТоваровПолучатель.НомерГТД
	|
	|ГДЕ
	|	(ПоступленияТоваровПолучатель.ДатаПоступления ЕСТЬ NULL
	|		ИЛИ ПоступленияТоваровПолучатель.ДатаПоступления < &Период)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаВидыЗапасов.Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика,
	|	ТаблицаВидыЗапасов.Серия,
	|	ТаблицаВидыЗапасов.НовоеНазначение,
	|	ТаблицаВидыЗапасов.НомерГТД";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	(ВЫБОР
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ ВЫБОР КОГДА ТаблицаВидыЗапасов.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		КОНЕЦ
	|	КОНЕЦ) КАК РазделУчета,
	|
	|	(ВЫБОР
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ ВЫБОР КОГДА ТаблицаВидыЗапасов.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		КОНЕЦ
	|	КОНЕЦ) КАК КорРазделУчета,
	|	1												КАК Порядок,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)			КАК ВидДвижения,
	|	&Период											КАК Период,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ											КАК АналитикаУчетаНоменклатуры,
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.Организация, &Организация)	КАК Организация,
	|   ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	0												КАК Стоимость,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК КорВидЗапасов,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходованиеБезНазначения
	|	КОНЕЦ											КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО									КАК ВидДеятельностиНДС,
	|	ВЫБОР 
	|		КОГДА &ПартионныйУчетВерсии22
	|			ТОГДА ЕСТЬNULL(ТаблицаВидыЗапасов.НовоеНазначение.ВидДеятельностиНДС,ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ КАК КорВидДеятельностиНДС,
	|	Неопределено									КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение					КАК Подразделение,
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.НовоеНазначение.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КАК ТипЗаписи,
	|	
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	 &НастройкаХозяйственнойОперации       КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО ВидыЗапасов.Ссылка = ТаблицаВидыЗапасов.ВидЗапасов
	|ГДЕ
	|	&УчитыватьСебестоимостьТоваровПоНазначениям
	|	ИЛИ ТаблицаВидыЗапасов.ВидЗапасов <> ТаблицаВидыЗапасов.ВидЗапасовОприходование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	(ВЫБОР
	|		КОГДА ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		КОГДА ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ ВЫБОР КОГДА ТаблицаВидыЗапасов.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		КОНЕЦ
	|	КОНЕЦ) КАК РазделУчета,
	|
	|	НЕОПРЕДЕЛЕНО 									КАК КорРазделУчета,
	|	2												КАК Порядок,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	&Период											КАК Период,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходованиеБезНазначения
	|	КОНЕЦ											КАК АналитикаУчетаНоменклатуры,
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.Организация, &Организация)	КАК Организация,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	0												КАК Стоимость,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|   НЕОПРЕДЕЛЕНО									КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаУчетаНоменклатуры,
	|	ВЫБОР 
	|		КОГДА &ПартионныйУчетВерсии22
	|			ТОГДА ЕСТЬNULL(ТаблицаВидыЗапасов.НовоеНазначение.ВидДеятельностиНДС,ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО 									КАК КорВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение					КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение) КАК ТипЗаписи,
	|	
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	 &НастройкаХозяйственнойОперации       КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	&УчитыватьСебестоимостьТоваровПоНазначениям
	|	ИЛИ ТаблицаВидыЗапасов.ВидЗапасов <> ТаблицаВидыЗапасов.ВидЗапасовОприходование
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Помещение                КАК Помещение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.НовоеНазначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Помещение                КАК Помещение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.ИсходноеНазначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыВЯчейках(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыВЯчейках";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Ячейка КАК Ячейка,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА ТаблицаТовары.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.НовоеНазначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ))
	|	И ВЫБОР
	|			КОГДА ТаблицаТовары.Склад.ИспользоватьСкладскиеПомещения
	|					И &Период >= ТаблицаТовары.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаТовары.Помещение.ИспользоватьАдресноеХранение
	|								И &Период >= ТаблицаТовары.Помещение.ДатаНачалаАдресногоХраненияОстатков
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОГДА ТаблицаТовары.Склад.ИспользоватьАдресноеХранение
	|					И &Период >= ТаблицаТовары.Склад.ДатаНачалаАдресногоХраненияОстатков
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Ячейка,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА ТаблицаТовары.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.ИсходноеНазначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ 
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (ЕСТЬNULL(ТаблицаТовары.НовоеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ТаблицаТовары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ))
	|	И ВЫБОР
	|			КОГДА ТаблицаТовары.Склад.ИспользоватьСкладскиеПомещения
	|					И &Период >= ТаблицаТовары.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаТовары.Помещение.ИспользоватьАдресноеХранение
	|								И &Период >= ТаблицаТовары.Помещение.ДатаНачалаАдресногоХраненияОстатков
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОГДА ТаблицаТовары.Склад.ИспользоватьАдресноеХранение
	|					И &Период >= ТаблицаТовары.Склад.ДатаНачалаАдресногоХраненияОстатков
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураНоменклатура";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период											КАК Период,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.Организация, &Организация)	КАК Организация,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение					КАК Подразделение,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ											КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК НаправлениеДеятельности,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения	КАК Склад,
	|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов					КАК ТипЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходованиеБезНазначения
	|	КОНЕЦ											КАК КорАналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.Назначение.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК КорНаправлениеДеятельности,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения									КАК КорСклад,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование.ТипЗапасов		КАК КорТипЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК КорВидЗапасов,
	|
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.Количество					КАК КорКоличество,
	|
	|	0												КАК Стоимость,
	|	0												КАК СтоимостьБезНДС,
	|	0												КАК СтоимостьРегл,
	|
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ИсточникГФУНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование		КАК КорИсточникГФУНоменклатуры
	|
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	НЕОПРЕДЕЛЕНО                            КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                            КАК Партнер,
	|	НЕОПРЕДЕЛЕНО                            КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО                            КАК Договор,
	|	НЕОПРЕДЕЛЕНО                            КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                            КАК МестоХранения,
	|	НЕОПРЕДЕЛЕНО                            КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО                            КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	НЕОПРЕДЕЛЕНО                            КАК Валюта,
	|	НЕОПРЕДЕЛЕНО                            КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО                            КАК Дополнительно,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&Период                                 КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка             КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата        КАК Период,
		|	ТабЧасть.Номенклатура       КАК Номенклатура,
		|	ТабЧасть.Характеристика     КАК Характеристика,
		|	ТабЧасть.Склад              КАК Склад,
		|	ТабЧасть.ИсходноеНазначение КАК Назначение,
		|	ТабЧасть.Количество         КАК Количество,
		|	НЕОПРЕДЕЛЕНО                КАК ЗапланированныйРасходРаспределенногоЗапаса,
		|	ИСТИНА                      КАК КонтрольСвободногоОстатка,
		|	ИСТИНА                      КАК ИгнорироватьРезервыПриКонтролеОстатков
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТабЧасть";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка           КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата      КАК Период,
		|	ТабЧасть.Номенклатура     КАК Номенклатура,
		|	ТабЧасть.Характеристика   КАК Характеристика,
		|	ТабЧасть.Склад            КАК Склад,
		|	ТабЧасть.НовоеНазначение  КАК Назначение,
		|	ТабЧасть.Количество       КАК Количество,
		|	ЛОЖЬ                      КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО              КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров.Товары КАК ТабЧасть";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		// Нет дополнительных параметров.
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтВидыЗапасов");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область Перемещение_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.Организация,
	|		ТаблицаДокумента.Организация) 								КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры 	 				КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов					 				КАК ВидЗапасов,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ЕСТЬNULL(ТаблицаВидыЗапасов.НовоеНазначение.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ 															КАК ВидДеятельностиНДС,
	|	ЕСТЬNULL(ТаблицаВидыЗапасов.НовоеНазначение.ВидДеятельностиНДС,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО                                            		КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО 									   				КАК КорПартия,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование 		КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование             			КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО 						КАК Сделка,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение	КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО						КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 						КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 			КАК Количество,
	|	НЕОПРЕДЕЛЕНО 							КАК ИдентификаторСтроки,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаОбособленногоУчета) КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 										 КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации												 КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И (&УчитыватьСебестоимостьТоваровПоНазначениям
	|		ИЛИ ТаблицаВидыЗапасов.ВидЗапасов <> ТаблицаВидыЗапасов.ВидЗапасовОприходование)
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.Перемещение,
		ТекстЗапроса);
		
	#КонецОбласти
	
	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеТабличнойЧасти

#Область ЗаполнениеПоОстаткам

Функция ТекстЗапросаИсточникДанных(ВТалицеОтбораЕстьНазначение)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Назначение КАК Назначение,
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад КАК Склад,
		|	СУММА(Набор.Запас) КАК Запас,
		|	СУММА(Набор.Резерв) КАК Резерв,
		|	СУММА(Набор.КЗаказу) КАК КЗаказу,
		|	СУММА(Набор.Потребность) КАК Потребность
		|ПОМЕСТИТЬ ИсточникДанных
		|ИЗ(
		|	ВЫБРАТЬ
		|		ВЫБОР КОГДА &СвернутьНазначения ТОГДА
		|					НЕОПРЕДЕЛЕНО
		|				ИНАЧЕ
		|					ТаблицаОстатков.Назначение
		|			КОНЕЦ КАК Назначение,
		|		ТаблицаОстатков.Номенклатура           КАК Номенклатура,
		|		ТаблицаОстатков.Характеристика         КАК Характеристика,
		|		ТаблицаОстатков.Склад                  КАК Склад,
		|		ВЫБОР КОГДА ТаблицаОстатков.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе) ТОГДА
		|					ТаблицаОстатков.Запас
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ КАК Запас,
		|		ВЫБОР КОГДА ТаблицаОстатков.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе) ТОГДА
		|					ТаблицаОстатков.Запас - ТаблицаОстатков.Свободно
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ КАК Резерв,
		|		ТаблицаОстатков.КОбеспечениюБезРезерва
		|			+ ТаблицаОстатков.РезервироватьПоМереПоступления
		|			+ ТаблицаОстатков.ОтложитьРезервирование
		|			+ ТаблицаОстатков.Резервировать
		|			- ТаблицаОстатков.Запас КАК КЗаказу,
		|		ТаблицаОстатков.КОбеспечениюБезРезерва
		|			+ ТаблицаОстатков.РезервироватьПоМереПоступления
		|			+ ТаблицаОстатков.ОтложитьРезервирование
		|			+ ТаблицаОстатков.Резервировать КАК Потребность
		|	ИЗ
		|		РегистрСведений.РаспределениеЗапасов КАК ТаблицаОстатков
		|	ГДЕ
		|		ТаблицаОстатков.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			И ТаблицаОстатков.Назначение В(
		|				ВЫБРАТЬ
		|					Отбор.Назначение КАК Назначение
		|				ИЗ
		|					ОтборНазначений КАК Отбор)
		|			И (&ВсеТовары
		|				ИЛИ (ТаблицаОстатков.Номенклатура, ТаблицаОстатков.Характеристика, &ПолеНазначениеТаблицыОстатков) В(
		|				ВЫБРАТЬ
		|					Отбор.Номенклатура КАК Номенклатура,
		|					Отбор.Характеристика КАК Характеристика,
		|					&ПолеНазначениеОтбора
		|				ИЗ
		|					ОтборТоваров КАК Отбор))
		|			И ТаблицаОстатков.Состояние В(
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеподтвержденное),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР КОГДА &СвернутьНазначения ТОГДА
		|					НЕОПРЕДЕЛЕНО
		|				ИНАЧЕ
		|					ТаблицаОстатков.Назначение
		|			КОНЕЦ КАК Назначение,
		|		ТаблицаОстатков.Номенклатура                             КАК Номенклатура,
		|		ТаблицаОстатков.Характеристика                           КАК Характеристика,
		|		ТаблицаОстатков.Склад                                    КАК Склад,
		|		ТаблицаОстатков.Отгрузить - ТаблицаОстатков.Поступило    КАК Запас,
		|		0                                                        КАК Резерв,
		|		-ТаблицаОстатков.Отгрузить + ТаблицаОстатков.Поступило   КАК КЗаказу,
		|		0                                                        КАК Потребность
		|	ИЗ
		|		РегистрНакопления.РаспределениеЗапасовДвижения КАК ТаблицаОстатков
		|	ГДЕ
		|		ТаблицаОстатков.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			И ТаблицаОстатков.Назначение В(
		|				ВЫБРАТЬ
		|					Отбор.Назначение КАК Назначение
		|				ИЗ
		|					ОтборНазначений КАК Отбор)
		|			И (&ВсеТовары ИЛИ (ТаблицаОстатков.Номенклатура, ТаблицаОстатков.Характеристика, &ПолеНазначениеТаблицыОстатков) В(
		|				ВЫБРАТЬ
		|					Отбор.Номенклатура КАК Номенклатура,
		|					Отбор.Характеристика КАК Характеристика,
		|					&ПолеНазначениеОтбора
		|				ИЗ
		|					ОтборТоваров КАК Отбор))
		|			И ТаблицаОстатков.Активность
		|			И ТаблицаОстатков.Регистратор = &Регистратор) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Назначение,
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад";
	
	ПолеНазначениеТаблицыОстатков = "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	ПолеНазначениеОтбора = "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	Если ВТалицеОтбораЕстьНазначение Тогда
		ПолеНазначениеТаблицыОстатков = "ТаблицаОстатков.Назначение";
		ПолеНазначениеОтбора = "Отбор.Назначение";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеНазначениеТаблицыОстатков", ПолеНазначениеТаблицыОстатков);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеНазначениеОтбора", ПолеНазначениеОтбора);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСвободныеОстатки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад КАК Склад,
		|	СУММА(Набор.Потребность) КАК Потребность,
		|	СУММА(Набор.Запас) КАК Запас,
		|	СУММА(Набор.Резерв) КАК Резерв,
		|	СУММА(Набор.Свободно) КАК Свободно
		|ПОМЕСТИТЬ СвободныеОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		РаспределениеЗапасов.Номенклатура КАК Номенклатура,
		|		РаспределениеЗапасов.Характеристика КАК Характеристика,
		|		РаспределениеЗапасов.Склад КАК Склад,
		|		РаспределениеЗапасов.КОбеспечениюБезРезерва + РаспределениеЗапасов.Резервировать + РаспределениеЗапасов.РезервироватьПоМереПоступления + РаспределениеЗапасов.ОтложитьРезервирование КАК Потребность,
		|		РаспределениеЗапасов.Свободно КАК Свободно,
		|		РаспределениеЗапасов.Запас КАК Запас,
		|		РаспределениеЗапасов.Запас - РаспределениеЗапасов.Свободно КАК Резерв
		|	ИЗ
		|		РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|	ГДЕ
		|		&ОстатокНаСкладе
		|			И (РаспределениеЗапасов.Номенклатура, РаспределениеЗапасов.Характеристика) В(
		|				ВЫБРАТЬ
		|					ОтборТоваров.Номенклатура   КАК Номенклатура,
		|					ОтборТоваров.Характеристика КАК Характеристика
		|				ИЗ
		|					ОтборТоваровИсточникаДанных КАК ОтборТоваров)
		|			И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И РаспределениеЗапасов.Состояние В(
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокумента.Номенклатура КАК Номенклатура,
		|		ДвиженияДокумента.Характеристика КАК Характеристика,
		|		ДвиженияДокумента.Склад КАК Склад,
		|		0 КАК Потребность,
		|		ДвиженияДокумента.Отгрузить - ДвиженияДокумента.Поступило КАК Свободно,
		|		ДвиженияДокумента.Отгрузить - ДвиженияДокумента.Поступило КАК Запас,
		|		0 КАК Резерв
		|	ИЗ
		|		РегистрНакопления.РаспределениеЗапасовДвижения КАК ДвиженияДокумента
		|	ГДЕ
		|		&ОстатокНаСкладе
		|			И (ДвиженияДокумента.Номенклатура, ДвиженияДокумента.Характеристика) В(
		|				ВЫБРАТЬ
		|					ОтборТоваров.Номенклатура КАК Номенклатура,
		|					ОтборТоваров.Характеристика КАК Характеристика
		|				ИЗ
		|					ОтборТоваровИсточникаДанных КАК ОтборТоваров)
		|			И ДвиженияДокумента.Активность
		|			И ДвиженияДокумента.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И ДвиженияДокумента.Регистратор = &Регистратор) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбеспечениеЗаказов()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Назначение КАК Назначение,
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад КАК Склад,
		|	СУММА(Набор.Потребность) КАК Потребность,
		|	СУММА(Набор.Запас) КАК Запас,
		|	СУММА(Набор.Резерв) КАК Резерв
		|ПОМЕСТИТЬ ОбеспечениеЗаказов
		|ИЗ(
		|	ВЫБРАТЬ
		|		РаспределениеЗапасов.Назначение КАК Назначение,
		|		РаспределениеЗапасов.Номенклатура КАК Номенклатура,
		|		РаспределениеЗапасов.Характеристика КАК Характеристика,
		|		РаспределениеЗапасов.Склад КАК Склад,
		|		РаспределениеЗапасов.КОбеспечениюБезРезерва + РаспределениеЗапасов.Резервировать + РаспределениеЗапасов.РезервироватьПоМереПоступления + РаспределениеЗапасов.ОтложитьРезервирование КАК Потребность,
		|		РаспределениеЗапасов.Запас КАК Запас,
		|		РаспределениеЗапасов.Запас - Свободно КАК Резерв
		|	ИЗ
		|		РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|	ГДЕ
		|		РаспределениеЗапасов.Назначение В(
		|				ВЫБРАТЬ
		|					Отбор.Назначение КАК Назначение
		|				ИЗ
		|					ОтборНазначенийИсточников КАК Отбор)
		|			И (РаспределениеЗапасов.Номенклатура, РаспределениеЗапасов.Характеристика) В(
		|				ВЫБРАТЬ
		|					Отбор.Номенклатура   КАК Номенклатура,
		|					Отбор.Характеристика КАК Характеристика
		|				ИЗ
		|					ОтборТоваровИсточникаДанных КАК Отбор)
		|			И РаспределениеЗапасов.Состояние В(
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокумента.Назначение КАК Назначение,
		|		ДвиженияДокумента.Номенклатура КАК Номенклатура,
		|		ДвиженияДокумента.Характеристика КАК Характеристика,
		|		ДвиженияДокумента.Склад КАК Склад,
		|		0 КАК Потребность,
		|		ДвиженияДокумента.Отгрузить - ДвиженияДокумента.Поступило КАК Запас,
		|		0 КАК Резерв
		|	ИЗ
		|		РегистрНакопления.РаспределениеЗапасовДвижения КАК ДвиженияДокумента
		|	ГДЕ
		|		ДвиженияДокумента.Назначение В(
		|				ВЫБРАТЬ
		|					Отбор.Назначение КАК Назначение
		|				ИЗ
		|					ОтборНазначенийИсточников КАК Отбор)
		|			И (ДвиженияДокумента.Номенклатура, ДвиженияДокумента.Характеристика) В(
		|				ВЫБРАТЬ
		|					ОтборТоваров.Номенклатура КАК Номенклатура,
		|					ОтборТоваров.Характеристика КАК Характеристика
		|				ИЗ
		|					ОтборТоваровИсточникаДанных КАК ОтборТоваров)
		|			И ДвиженияДокумента.Активность
		|			И ДвиженияДокумента.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И ДвиженияДокумента.Регистратор = &Регистратор) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Назначение,
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаЗаказыНаПеремещение(ВТаблицеИтоговЕстьНазначение)
	
	Текст =
		"ВЫБРАТЬ
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	СУММА(ВЫБОР КОГДА Таблица.КОбеспечению > Таблица.Запас Тогда
		|				Таблица.Запас
		|			ИНАЧЕ
		|				Таблица.КОбеспечению
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ЗаказыНаПеремещение
		|ИЗ(
		|	ВЫБРАТЬ
		|		Набор.Заказ КАК Заказ,
		|		Набор.Назначение КАК Назначение,
		|		Набор.Номенклатура КАК Номенклатура,
		|		Набор.Характеристика КАК Характеристика,
		|		СУММА(Набор.КОбеспечению) КАК КОбеспечению,
		|		СУММА(Набор.Запас) КАК Запас
		|	ИЗ(
		|		ВЫБРАТЬ
		|			РаспределениеЗапасов.ЗаказНаОтгрузку КАК Заказ,
		|			&РаспределениеЗапасовНазначениеПереопределяемый КАК Назначение,
		|			РаспределениеЗапасов.Номенклатура КАК Номенклатура,
		|			РаспределениеЗапасов.Характеристика КАК Характеристика,
		|			РаспределениеЗапасов.КОбеспечениюБезРезерва КАК КОбеспечению,
		|			0 КАК Запас
		|		ИЗ
		|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ГДЕ
		|			РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|				И (РаспределениеЗапасов.Номенклатура, РаспределениеЗапасов.Характеристика, &РаспределениеЗапасовНазначениеПереопределяемый) В(
		|					ВЫБРАТЬ
		|						ТаблицаИтогов.Номенклатура КАК Номенклатура,
		|						ТаблицаИтогов.Характеристика КАК Характеристика,
		|						&ТаблицаИтоговНазначениеПереопределяемый КАК Назначение
		|					ИЗ
		|						ТаблицаИтогов КАК ТаблицаИтогов)
		|				И (&ВТаблицеИтоговЕстьНазначениеПереопределяемый Или (РаспределениеЗапасов.Назначение) В(
		|					ВЫБРАТЬ
		|						ОтборНазначений.Назначение КАК Назначение
		|					ИЗ
		|						ОтборНазначений КАК ОтборНазначений))
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			РаспределениеЗапасов.ЗаказНаПоступление КАК Заказ,
		|			&РаспределениеЗапасовНазначениеПереопределяемый КАК Назначение,
		|			РаспределениеЗапасов.Номенклатура КАК Номенклатура,
		|			РаспределениеЗапасов.Характеристика КАК Характеристика,
		|			0 КАК КОбеспечению,
		|			РаспределениеЗапасов.Запас КАК Запас
		|		ИЗ
		|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ГДЕ
		|			РаспределениеЗапасов.Состояние В(
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление),
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеподтвержденное))
		|				И (РаспределениеЗапасов.Номенклатура, РаспределениеЗапасов.Характеристика, &РаспределениеЗапасовНазначениеПереопределяемый) В(
		|					ВЫБРАТЬ
		|						ТаблицаИтогов.Номенклатура КАК Номенклатура,
		|						ТаблицаИтогов.Характеристика КАК Характеристика,
		|						&ТаблицаИтоговНазначениеПереопределяемый КАК Назначение
		|					ИЗ
		|						ТаблицаИтогов КАК ТаблицаИтогов)
		|				И (&ВТаблицеИтоговЕстьНазначениеПереопределяемый ИЛИ (РаспределениеЗапасов.Назначение) В(
		|					ВЫБРАТЬ
		|						ОтборНазначений.Назначение КАК Назначение
		|					ИЗ
		|						ОтборНазначений КАК ОтборНазначений))) КАК Набор
		|	СГРУППИРОВАТЬ ПО
		|		Набор.Заказ,
		|		Набор.Номенклатура,
		|		Набор.Характеристика,
		|		Набор.Назначение
		|	ИМЕЮЩИЕ
		|		СУММА(Набор.КОбеспечению) <> 0 И СУММА(Набор.Запас) <> 0) КАК Таблица
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение";
	
	РаспределениеЗапасовНазначение = "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	ТаблицаИтоговНазначение = "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	ВТаблицеИтоговЕстьНазначениеПереопределяемый = "ЛОЖЬ";
	Если ВТаблицеИтоговЕстьНазначение Тогда
		РаспределениеЗапасовНазначение = "РаспределениеЗапасов.Назначение";
		ТаблицаИтоговНазначение = "ТаблицаИтогов.НазначениеДляИтогов";
		ВТаблицеИтоговЕстьНазначениеПереопределяемый = "ИСТИНА";
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, "&РаспределениеЗапасовНазначениеПереопределяемый", РаспределениеЗапасовНазначение);
	Текст = СтрЗаменить(Текст, "&ТаблицаИтоговНазначениеПереопределяемый", ТаблицаИтоговНазначение);
	Текст = СтрЗаменить(Текст, "&ВТаблицеИтоговЕстьНазначениеПереопределяемый", ВТаблицеИтоговЕстьНазначениеПереопределяемый);
	
	Возврат Текст;
	
	
КонецФункции

#КонецОбласти

// Возвращает таблицу товаров с остатками детализированными до серии, помещения, ячейки.
//
// Параметры:
//
//  ТаблицаТовары - ТаблицаЗначений - таблица значения с колонками:
//		* Заказ						 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ переданный как входящий параметр функции
//		* ЗаказИсточник				 - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказНаПеремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказПоставщику - заказ который зарезервировал тот же товар который нужен заказу, переданному как входящий параметр функции
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* НовоеНазначение			 - СправочникСсылка.Назначения - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* ЕдиницаИзмерения			 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* СкладОтгрузки				 - СправочникСсылка.Склады - склад указанный в заказе, склад потребности
//		* Потребность				 - Число - количество необеспеченного товара по заказу
//		* Обеспечено				 - Число - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* ПотребностьОсновногоСклада - Булево - признак того что текущий склад соответствует складу отгрузки
//		* Количество				 - Число - всегда 0
//		* Отметка					 - Булево - всегда Ложь
//		* СортировкаСклада			 - Число - данные для сортировки складов
//		* ЭтоОстатокЗаказа			 - Булево - признак того что в колонке СвободныйОстаток не остаток склада, а резерв заказа.
//  Ссылка - ДокументСсылка.КорректировкаНазначенияТоваров - Будет ли помещены в результирующую таблицу остатки по складам не указанным в заказе
//  ТолькоОтмеченные - Булево - будут ли получены остатки по ячейкам и помещениям по строкам переданной таблице, у
//                              которых не взведен флаг Отметка.
//
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значения с колонками:
//		* ИсходноеНазначение		 - СправочникСсылка.Назначения - назначение соответствующее колонке Заказ
//		* ИсходноеНазначениеДвиженияПоСкладскимРегистрам	 - Булево - назначение соответствующее колонке ЗаказИсточник
//		* Номенклатура				 - СправочникСсылка.Номенклатура -
//		* Характеристика			 - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* Серия						 - СправочникСсылка.СерииНоменклатуры -
//		* Склад						 - СправочникСсылка.Склады - склад на котором в данный момент находится товар
//		* Обеспечено				 - Число - количество товара зарезервированного заказом по указанному товару или свободный остаток товара по складу, помещению, серии
//		* ОбеспеченоУпаковок		 - Число - количество товара зарезервированного заказом по указанному товару или свободный остаток товара по складу, помещению, серии
//		* Помещение					 - СправочникСсылка.СкладскиеПомещения - количество зарезервированного и ожидаемого к прибытию обособленного товара
//		* Упаковка					 - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Ячейка					 - СправочникСсылка.СкладскиеЯчейки -
//		* СвободныйОстаток			 - Число - свободный остаток товара по складу
//		* Количество				 - Число - количество к корректировке введенное пользователем.
//
Функция ТаблицаПомещенияЯчейкиПоТоварам(ТаблицаТовары, Ссылка, ТолькоОтмеченные = Истина) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(таб.ИсходноеНазначение КАК Справочник.Назначения) КАК Назначение,
	|	таб.Номенклатура КАК Номенклатура,
	|	таб.Характеристика КАК Характеристика,
	|	таб.Склад КАК Склад,
	|	таб.Запас - Таб.Резерв КАК СвободныйОстаток,
	|	таб.Количество КАК Количество
	|ПОМЕСТИТЬ ВтТоварыЗаказа
	|ИЗ
	|	&ТаблицаТовары КАК таб
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение, Номенклатура, Характеристика, Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1) Для складов и всех помещений этих складов определяется признак адресного хранения
	// чтобы понимать откуда получать остатки - либо из товаров на складах, либо из товаров в ячейках.
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад,
	|	ЕСТЬNULL(СкладыИПомещения.Ссылка, ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) КАК Помещение,
	|	ВЫБОР
	|		КОГДА Склады.Ссылка.ИспользоватьСкладскиеПомещения
	|				И &Дата >= Склады.Ссылка.ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ВЫБОР
	|					КОГДА СкладыИПомещения.Ссылка.ИспользоватьАдресноеХранение
	|							И &Дата >= СкладыИПомещения.Ссылка.ДатаНачалаАдресногоХраненияОстатков
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Склады.Ссылка.ИспользоватьАдресноеХранение
	|						И &Дата >= Склады.Ссылка.ДатаНачалаАдресногоХраненияОстатков
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ИспользоватьАдресноеХранение
	|ПОМЕСТИТЬ СкладыИПомещения
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеПомещения КАК СкладыИПомещения
	|		ПО СкладыИПомещения.Владелец = Склады.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыЗаказа КАК СкладыЗаказа
	|		ПО СкладыЗаказа.Склад = Склады.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад, Помещение, ИспользоватьАдресноеХранение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2) Таблицы отборов для обращения к источникам данных об остатках.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеАналитики.КлючАналитики КАК АналитикаУчетаНоменклатуры
	|ПОМЕСТИТЬ ТоварыОрганизацийОтбор
	|ИЗ
	|	РегистрСведений.АналитикаУчетаНоменклатуры КАК ВсеАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыЗаказа КАК Фильтр
	|		ПО Фильтр.Назначение = ВсеАналитики.Назначение
	|			И Фильтр.Номенклатура = ВсеАналитики.Номенклатура
	|			И Фильтр.Характеристика = ВсеАналитики.Характеристика
	|			И Фильтр.Склад = ВсеАналитики.МестоХранения
	|ГДЕ
	|	НЕ Фильтр.Назначение.ДвиженияПоСкладскимРегистрам
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Ячейки.Ссылка КАК Ячейка
	|ПОМЕСТИТЬ ТоварыВЯчейкахОтбор
	|ИЗ
	|	ВтТоварыЗаказа КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК Ячейки
	|		ПО Ячейки.Владелец = Таблица.Склад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыИПомещения КАК СкладыИПомещения
	|		ПО СкладыИПомещения.Помещение = Ячейки.Помещение
	|			И СкладыИПомещения.Склад = Ячейки.Владелец
	|ГДЕ
	|	ЕСТЬNULL(Таблица.Назначение.ДвиженияПоСкладскимРегистрам, ИСТИНА)
	|		И СкладыИПомещения.ИспользоватьАдресноеХранение
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение, Номенклатура, Характеристика, Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад КАК Склад,
	|	СкладыИПомещения.Помещение КАК Помещение
	|ПОМЕСТИТЬ ТоварыНаСкладахОтбор
	|ИЗ
	|	ВтТоварыЗаказа КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыИПомещения КАК СкладыИПомещения
	|		ПО СкладыИПомещения.Склад = Таблица.Склад
	|ГДЕ
	|	ЕСТЬNULL(Таблица.Назначение.ДвиженияПоСкладскимРегистрам, ИСТИНА)
	|		И НЕ СкладыИПомещения.ИспользоватьАдресноеХранение
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение, Номенклатура, Характеристика, Склад, Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3) Остатки из источников согласно таблицам отбора.
	|ВЫБРАТЬ
	|	Остатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Остатки.КоличествоОстаток КАК ВНаличии
	|ПОМЕСТИТЬ ТоварыОрганизаций
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(,
	|		АналитикаУчетаНоменклатуры В(
	|			ВЫБРАТЬ
	|				Фильтр.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|			ИЗ
	|				ТоварыОрганизацийОтбор КАК Фильтр)) КАК Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Движения.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -Движения.Количество
	|		ИНАЧЕ Движения.Количество
	|	КОНЕЦ КАК ВНаличии
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыОрганизацийОтбор КАК Фильтр
	|		ПО Фильтр.АналитикаУчетаНоменклатуры = Движения.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|		И Движения.Активность
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Назначение КАК Назначение,
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	Остатки.Ячейка КАК Ячейка,
	|	Остатки.Упаковка КАК Упаковка,
	|	Остатки.Серия КАК Серия,
	|	Остатки.ВНаличииОстаток - Остатки.КОтборуОстаток КАК ВНаличии
	|ПОМЕСТИТЬ ТоварыВЯчейках
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(,
	|			(Назначение, Номенклатура, Характеристика, Ячейка) В(
	|				ВЫБРАТЬ
	|					Фильтр.Назначение КАК Назначение,
	|					Фильтр.Номенклатура КАК Номенклатура,
	|					Фильтр.Характеристика КАК Характеристика,
	|					Фильтр.Ячейка КАК Ячейка
	|				ИЗ
	|					ТоварыВЯчейкахОтбор КАК Фильтр)) КАК Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Движения.Назначение КАК Назначение,
	|	Движения.Номенклатура КАК Номенклатура,
	|	Движения.Характеристика КАК Характеристика,
	|	Движения.Ячейка КАК Ячейка,
	|	Движения.Упаковка КАК Упаковка,
	|	Движения.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -Движения.ВНаличии
	|		ИНАЧЕ Движения.ВНаличии
	|	КОНЕЦ КАК ВНаличии
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОтбор КАК Фильтр
	|		ПО Фильтр.Назначение = Движения.Назначение
	|			И Фильтр.Номенклатура = Движения.Номенклатура
	|			И Фильтр.Характеристика = Движения.Характеристика
	|			И Фильтр.Ячейка = Движения.Ячейка
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|		И Движения.Активность
	|ИНДЕКСИРОВАТЬ ПО
	|	Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Назначение КАК Назначение,
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	Остатки.Склад КАК Склад,
	|	Остатки.Помещение КАК Помещение,
	|	Остатки.Серия КАК Серия,
	|	Остатки.ВНаличииОстаток - Остатки.КОтгрузкеОстаток КАК ВНаличии
	|ПОМЕСТИТЬ ТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
	|			(Назначение, Номенклатура, Характеристика, Склад, Помещение) В(
	|				ВЫБРАТЬ
	|					Фильтр.Назначение КАК Назначение,
	|					Фильтр.Номенклатура КАК Номенклатура,
	|					Фильтр.Характеристика КАК Характеристика,
	|					Фильтр.Склад КАК Склад,
	|					Фильтр.Помещение КАК Помещение
	|				ИЗ
	|					ТоварыНаСкладахОтбор КАК Фильтр)) КАК Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Движения.Назначение КАК Назначение,
	|	Движения.Номенклатура КАК Номенклатура,
	|	Движения.Характеристика КАК Характеристика,
	|	Движения.Склад КАК Склад,
	|	Движения.Помещение КАК Помещение,
	|	Движения.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -Движения.ВНаличии
	|		ИНАЧЕ Движения.ВНаличии
	|	КОНЕЦ КАК ВНаличии
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыНаСкладахОтбор КАК Фильтр
	|		ПО Фильтр.Назначение = Движения.Назначение
	|			И Фильтр.Номенклатура = Движения.Номенклатура
	|			И Фильтр.Характеристика = Движения.Характеристика
	|			И Фильтр.Склад = Движения.Склад
	|			И Фильтр.Помещение = Движения.Помещение
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|		И Движения.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4) Объединение таблиц остатков из разных источников.
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка) КАК Помещение,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Ячейка,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	СУММА(ТоварыОрганизаций.ВНаличии) КАК ВНаличии
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	ТоварыОрганизаций КАК ТоварыОрганизаций
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Назначение,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Характеристика,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.МестоХранения,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Серия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВЯчейках.Назначение КАК Назначение,
	|	ТоварыВЯчейках.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейках.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ТоварыВЯчейках.Ячейка.Владелец) КАК Склад,
	|	МАКСИМУМ(ТоварыВЯчейках.Ячейка.Помещение) КАК Помещение,
	|	ТоварыВЯчейках.Ячейка КАК Ячейка,
	|	ТоварыВЯчейках.Упаковка КАК Упаковка,
	|	ТоварыВЯчейках.Серия КАК Серия,
	|	СУММА(ТоварыВЯчейках.ВНаличии) КАК ВНаличии
	|ИЗ
	|	ТоварыВЯчейках КАК ТоварыВЯчейках
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВЯчейках.Назначение,
	|	ТоварыВЯчейках.Номенклатура,
	|	ТоварыВЯчейках.Характеристика,
	|	ТоварыВЯчейках.Ячейка,
	|	ТоварыВЯчейках.Упаковка,
	|	ТоварыВЯчейках.Серия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Назначение КАК Назначение,
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ТоварыНаСкладах.Склад КАК Склад,
	|	ТоварыНаСкладах.Помещение КАК Помещение,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Ячейка,
	|	ТоварыНаСкладах.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ТоварыНаСкладах.Серия КАК Серия,
	|	СУММА(ТоварыНаСкладах.ВНаличии) КАК ВНаличии
	|ИЗ
	|	ТоварыНаСкладах КАК ТоварыНаСкладах
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Назначение,
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика,
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Помещение,
	|	ТоварыНаСкладах.Серия
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение, Номенклатура, Характеристика, Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5) Дополнение таблицы результата нужными полями.
	|ВЫБРАТЬ
	|	Остатки.Назначение КАК Назначение,
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	Остатки.Склад КАК Склад,
	|	Остатки.Помещение КАК Помещение,
	|	Остатки.Ячейка КАК Ячейка,
	|	ВЫБОР
	|		КОГДА Остатки.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА Остатки.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	Остатки.Серия КАК Серия,
	|	Остатки.ВНаличии КАК Обеспечено,
	|	ЕСТЬNULL(Остатки.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) КАК НазначениеДвиженияПоСкладскимРегистрам,
	|	Остатки.ВНаличии * ЕСТЬNULL(&ТекстЗапросаКоэффициентаУпаковки, 1) КАК ОбеспеченоЕдиниц,
	|	Товары.СвободныйОстаток КАК СвободныйОстаток,
	|	Товары.Количество КАК Количество
	|ИЗ
	|	Остатки КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыЗаказа КАК Товары
	|		ПО Товары.Назначение = Остатки.Назначение
	|		 И Товары.Номенклатура = Остатки.Номенклатура
	|		 И Товары.Характеристика = Остатки.Характеристика
	|		 И Товары.Склад = Остатки.Склад
	|ГДЕ
	|	Остатки.ВНаличии > 0
	|		И (Остатки.Помещение <> ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|				ИЛИ Остатки.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				ИЛИ Остатки.Ячейка <> ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка))
	|УПОРЯДОЧИТЬ ПО
	|	Назначение,
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Помещение,
	|	Ячейка,
	|	Серия,
	|	Упаковка";
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Если ТолькоОтмеченные Тогда
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары.Скопировать(Новый Структура("Отметка", Истина)));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	КонецЕсли;
	
	ТекстЗапросаКоэффициентаУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Остатки.Упаковка","Остатки.Номенклатура");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентаУпаковки", ТекстЗапросаКоэффициентаУпаковки);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

Процедура СлитьТаблицыПоСкладуИПомещениям(ТаблицаПоСкладамВЦелом, ТаблицаПомещенияЯчейки) Экспорт
	
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Серия") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	КонецЕсли;
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Помещение") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Помещение", Новый ОписаниеТипов("СправочникСсылка.СкладскиеПомещения"));
	КонецЕсли;
	Если ТаблицаПоСкладамВЦелом.Колонки.Найти("Ячейка") = Неопределено Тогда
		ТаблицаПоСкладамВЦелом.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Назначение, Номенклатура, Характеристика, Склад");
	
	СтрокиКУдалению = Новый Массив();
	
	Для ИндексСтроки = 0 По ТаблицаПоСкладамВЦелом.Количество() - 1 Цикл
		
		Строка = ТаблицаПоСкладамВЦелом[ИндексСтроки];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СтруктураПоиска.Назначение = Строка.ИсходноеНазначение;
		
		НайденныеСтроки = ТаблицаПомещенияЯчейки.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			КоличествоОстаток = Строка.Количество;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяСтрока = ТаблицаПоСкладамВЦелом.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, "Помещение,Ячейка,Серия,Упаковка");
				
				Если НайденнаяСтрока.ОбеспеченоЕдиниц > КоличествоОстаток Тогда
					НоваяСтрока.Количество = КоличествоОстаток;
					КоличествоОстаток = 0;
				Иначе
					НоваяСтрока.Количество = НайденнаяСтрока.ОбеспеченоЕдиниц;
					КоличествоОстаток = КоличествоОстаток - НайденнаяСтрока.ОбеспеченоЕдиниц;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокиКУдалению.Добавить(Строка); // Текущая строка заменена на строки из таблицы по помещениям
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаПоСкладамВЦелом.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры





Процедура ДобавитьВременнуюТаблицуСортировкаСкладов(Запрос, ИмяИсточникДанных, ИмяТаблицаЗаполненияКорректировки)
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	ПодстановкаИсточникДанных КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПодстановкаИсточникДанных", ИмяИсточникДанных);
	Запрос.Выполнить();
	
	Запрос.Текст = РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспеченияВсехСкладов(
		Перечисления.ТипыОбеспечения.Перемещение);
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК СкладПолучатель,
		|	Таблица.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей КАК СкладОтправитель,
		|	1 КАК Уровень
		|ИЗ
		|	ВтСпособыОбеспечения КАК Таблица
		|ГДЕ
		|	Таблица.Склад <> Таблица.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей
		|		И (Таблица.Номенклатура, Таблица.Характеристика) В(
		|			ВЫБРАТЬ
		|				Отбор.Номенклатура   КАК Номенклатура,
		|				Отбор.Характеристика КАК Характеристика
		|			ИЗ
		|				&ПодстановкаОтбораТоваров КАК Отбор)
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, СкладОтправитель, СкладПолучатель";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПодстановкаОтбораТоваров", ИмяТаблицаЗаполненияКорректировки);
	ТаблицаИсходная = Запрос.Выполнить().Выгрузить();

	ГруппировкиПоТоварам = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ТаблицаИсходная, "Номенклатура, Характеристика", "");
	Для Каждого Группировка Из ГруппировкиПоТоварам Цикл
		
		Таблица = Группировка.Таблица;
		Таблица.Индексы.Добавить("СкладПолучатель");
		
		ОбработкаЗавершена = Ложь;
		Пока Не ОбработкаЗавершена Цикл
			
			ОбработкаЗавершена = Истина;
			Для Каждого СтрокаТаблицы Из Группировка.Таблица Цикл
				
				НайденнаяСтрока = Таблица.Найти(СтрокаТаблицы.СкладОтправитель, "СкладПолучатель");
				Если НайденнаяСтрока <> Неопределено Тогда
					
					ОбработкаЗавершена = Ложь;
					СтрокаТаблицы.Уровень = СтрокаТаблицы.Уровень + НайденнаяСтрока.Уровень;
					СтрокаТаблицы.СкладОтправитель = НайденнаяСтрока.СкладОтправитель;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаИсходная.Очистить();
	Для Каждого Группировка Из ГруппировкиПоТоварам Цикл
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаИсходная, Группировка.Таблица);
	КонецЦикла;

	Запрос.УстановитьПараметр("ТаблицаИерархииСкладов", ТаблицаИсходная);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	
		|	Таблица.СкладПолучатель  КАК Склад,
		|	Таблица.СкладОтправитель КАК КорневойИсточник,
		|	Таблица.Уровень          КАК Уровень
		|ПОМЕСТИТЬ ИерархияСкладов
		|ИЗ
		|	&ТаблицаИерархииСкладов КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	
	Запрос.Выполнить();

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Назначение     КАК Назначение,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	
		|	МАКСИМУМ(ЕСТЬNULL(ИерархияСкладов.Уровень, 0)
		|		+ ВЫБОР КОГДА ИерархияСкладов.КорневойИсточник = ИерархияСкладовСкладДокумента.КорневойИсточник
		|			И ИерархияСкладов.Уровень <= ИерархияСкладовСкладДокумента.Уровень ТОГДА
		|					1000
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ) КАК ПриоритетСклада
		|ПОМЕСТИТЬ СортировкаСкладов
		|ИЗ
		|	ПодстановкаТаблицаЗаполненияКорректировки КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПодстановкаИсточникДанных КАК ТаблицаДокумента
		|		ПО ТаблицаДокумента.Назначение     = Таблица.Назначение
		|		 И ТаблицаДокумента.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаДокумента.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИерархияСкладов КАК ИерархияСкладовСкладДокумента
		|		ПО ИерархияСкладовСкладДокумента.Номенклатура   = Таблица.Номенклатура
		|		 И ИерархияСкладовСкладДокумента.Характеристика = Таблица.Характеристика
		|		 И ИерархияСкладовСкладДокумента.Склад          = ТаблицаДокумента.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИерархияСкладов КАК ИерархияСкладов
		|		ПО ИерархияСкладов.Номенклатура   = Таблица.Номенклатура
		|		 И ИерархияСкладов.Характеристика = Таблица.Характеристика
		|		 И ИерархияСкладов.Склад          = Таблица.Склад
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Назначение,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение, Номенклатура, Характеристика, Склад";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодстановкаТаблицаЗаполненияКорректировки", ИмяТаблицаЗаполненияКорректировки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодстановкаИсточникДанных", ИмяИсточникДанных);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение     КАК Назначение
		|ПОМЕСТИТЬ СкладыОтгрузки
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК Таблица
		|ГДЕ
		|	(Таблица.Назначение, Таблица.Склад, Таблица.Номенклатура, Таблица.Характеристика) В(
		|			ВЫБРАТЬ 
		|				Отбор.Назначение     КАК Назначение, 
		|				Отбор.Склад          КАК Склад, 
		|				Отбор.Номенклатура   КАК Номенклатура, 
		|				Отбор.Характеристика КАК Характеристика
		|			ИЗ
		|				ИсточникДанных КАК Отбор)
		|		И Таблица.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад, Номенклатура, Характеристика, Назначение";
	Запрос.Текст = СтрЗаменить(Текст, "ИсточникДанных", ИмяИсточникДанных);
	Запрос.Выполнить();

КонецПроцедуры

// Функция проверяет что по назначению есть товары с действием Обеспечивать обособленно.
//
// Параметры:
//  Назначение - СправочникСсылка.Назначения - Назначение
//  АдресТоваров - Строка - адрес во временном хранилище с отбором товаров, для поиска движений конкретной номенклатуры
//
// Возвращаемое значение:
//   Булево - Истина - если товары есть.
//
Функция ЕстьТоварыКОбособленномуОбеспечению(Назначение, АдресТоваров = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Если Не ЭтоАдресВременногоХранилища(АдресТоваров) Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьЗаписи
			|ИЗ
			|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
			|ГДЕ
			|	РаспределениеЗапасов.Назначение В(&Назначение)
			|		И РаспределениеЗапасов.Состояние В(
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеподтвержденное),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка))
			|		И РаспределениеЗапасов.Склад ССЫЛКА Справочник.Склады";
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика
			|;
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьЗаписи
			|ИЗ
			|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
			|ГДЕ
			|	РаспределениеЗапасов.Назначение В(&Назначение)
			|		И РаспределениеЗапасов.Состояние В(
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеподтвержденное),
			|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка))
			|		И РаспределениеЗапасов.Склад ССЫЛКА Справочник.Склады
			|		И (РаспределениеЗапасов.Номенклатура, РаспределениеЗапасов.Характеристика) В (
			|			ВЫБРАТЬ
			|				Товары.Номенклатура КАК Номенклатура,
			|				Товары.Характеристика КАК Характеристика
			|			ИЗ
			|				Товары КАК Товары)";
		Запрос.УстановитьПараметр("Товары", ПолучитьИзВременногоХранилища(АдресТоваров));
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Назначение", Назначение);
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция проверяет что по назначению есть обособленные остатки товаров.
//
// Параметры:
//  Назначение - СправочникСсылка.Назначения - Назначение
//  АдресТоваров - Строка - адрес во временном хранилище с отбором товаров, для поиска движений конкретной номенклатуры
//
// Возвращаемое значение:
//   Булево - Истина - если товары есть.
//
Функция ЕстьТоварыКСнятиюРезерва(Назначение, АдресТоваров = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Если Не ЭтоАдресВременногоХранилища(АдресТоваров) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|ГДЕ
		|	РаспределениеЗапасов.Назначение В(&Назначение)
		|		И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|		И РаспределениеЗапасов.Склад ССЫЛКА Справочник.Склады";
		
	Иначе
	
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика
			|;
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьЗаписи
			|ИЗ
			|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
			|ГДЕ
			|	РаспределениеЗапасов.Назначение В(&Назначение)
			|		И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
			|		И РаспределениеЗапасов.Склад ССЫЛКА Справочник.Склады
			|		И (Номенклатура,Характеристика) В (
			|			ВЫБРАТЬ
			|				Товары.Номенклатура КАК Номенклатура,
			|				Товары.Характеристика КАК Характеристика
			|			ИЗ
			|				Товары КАК Товары)";
		Запрос.УстановитьПараметр("Товары", ПолучитьИзВременногоХранилища(АдресТоваров));
			
	КонецЕсли;
	Запрос.УстановитьПараметр("Назначение", Назначение);
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции


// Непосредственное заполнение табличной части Товары документа КорректировкаНазначенияТоваров
// обособленными резервами по переданному назначению.
//
// Параметры:
//  Назначение					 - СправочникСсылка.Назначения, Массив - Назначение или массив назначений по которым необходимо полученить данные обособленного обеспечения
//  Организация					 - СправочникСсылка.Организации -
//  КорректировкаНазначения		 - ДокументСсылка.КорректировкаНазначенияТоваров - текущая корректировка, для сторнирования ее движений
//  ВидОперации					 - ПеречислениеСсылка.ВидыОперацийКорректировкиНазначения - вид операции текущего/создаваемого документа Корректировка назначения товаров.
//  Товары - ДанныеФормыКоллекция - Табличная часть заполняемого документа
//  ТоварыОтбор - ТаблицаЗначений - Таблица содержащая отбор по номенклатуре и характерристике
Процедура ЗаполнитьПоОснованию(Назначение, Организация, КорректировкаНазначения, ВидОперации, Товары, ТоварыОтбор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыОтбор = Неопределено Тогда
		ТоварыОтбор = Новый ТаблицаЗначений();
		ТоварыОтбор.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТоварыОтбор.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям Тогда
		
		РезультатСнятияРезервов = ТаблицаСнятияРезерваПоМногимНазначениям(Организация, ТоварыОтбор, КорректировкаНазначения, Назначение);
		Таблица = РезультатСнятияРезервов.ТаблицаТоваров;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв Тогда
		
		РеквизитыНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Назначение, "Заказ");
		
		РезультатСнятияРезервов = ТаблицаСнятияРезерва(Назначение, ТоварыОтбор, КорректировкаНазначения);
		Таблица = РезультатСнятияРезервов.ТаблицаТоваров;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать
				Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать Тогда
		
		РезультатРезервирования = ТаблицаРезервирования(
			Назначение,
			Новый Структура("ОстатокНаСкладе,РезервыПодНазначения", Истина, Ложь),
			Истина,
			Организация,
			ТоварыОтбор,
			КорректировкаНазначения);
		Таблица = РезультатРезервирования.ТаблицаТоваров;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Булево"));
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям
			Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв Тогда
			
			СнятьРезервы(Таблица, Истина, РезультатСнятияРезервов.ТаблицаИтогов);
			ТаблицаПомещенияЯчейки = ТаблицаПомещенияЯчейкиПоТоварам(Таблица, КорректировкаНазначения, Ложь);
			Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			СлитьТаблицыПоСкладуИПомещениям(Таблица, ТаблицаПомещенияЯчейки);
			
	Иначе
		
		УстановитьРезервы(Таблица, РезультатРезервирования.ТаблицаИтогов);
		
	КонецЕсли;
	
	ВсегоСтрок = Таблица.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		ТекСтрока = Таблица[ВсегоСтрок - Счетчик];
		Если ТекСтрока.Количество <= 0 Тогда
			Таблица.Удалить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Товары.Загрузить(Таблица);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоУпаковок",
		ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры

// Функция проверяет что у документа (заказа) есть движения по другим назначениям, по которым доступно резервирование.
//
// Параметры:
//  Регистратор - ОпределяемыйТип.ОжидаемаяОтгрузка - Заказ, движения которого нужно анализировать.
//
// Возвращаемое значение:
//  Булево - Истина, если в движениях есть не пустое назначение, ложь, в противном случае.
//
Функция ЕстьТоварыКСтороннемуОбособленномуОбеспечению(Регистратор) Экспорт
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|ГДЕ
		|	РаспределениеЗапасов.ЗаказНаОтгрузку = &Регистратор
		|		И РаспределениеЗапасов.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|		И РаспределениеЗапасов.Склад ССЫЛКА Справочник.Склады
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьЗаписи
		|			ИЗ
		|				РегистрСведений.РаспределениеЗапасов КАК ДругиеНазначения
		|			ГДЕ
		|				ДругиеНазначения.Номенклатура = РаспределениеЗапасов.Номенклатура
		|					И ДругиеНазначения.Характеристика = РаспределениеЗапасов.Характеристика
		|					И ДругиеНазначения.Склад = РаспределениеЗапасов.Склад
		|					И ДругиеНазначения.Назначение = РаспределениеЗапасов.Назначение
		|					И РаспределениеЗапасов.Состояние В(
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление),
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеподтвержденное),
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)))";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция проверяет что у документа (заказа) есть движения по другим назначениям, по которым доступно снятие резерва.
//
// Параметры:
//  Регистратор - ОпределяемыйТип.ОжидаемаяОтгрузка - Заказ, движения которого нужно анализировать.
//
// Возвращаемое значение:
//  Булево - Истина, если в движениях есть не пустое назначение, ложь, в противном случае.
//
Функция ЕстьТоварыКСтороннемуСнятиюРезерва(Регистратор) Экспорт
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|ГДЕ
		|	РаспределениеЗапасов.ЗаказНаОтгрузку = &Регистратор
		|		И РаспределениеЗапасов.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|		И РаспределениеЗапасов.Склад ССЫЛКА Справочник.Склады
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьЗаписи
		|			ИЗ
		|				РегистрСведений.РаспределениеЗапасов КАК ДругиеНазначения
		|			ГДЕ
		|				ДругиеНазначения.Номенклатура = РаспределениеЗапасов.Номенклатура
		|					И ДругиеНазначения.Характеристика = РаспределениеЗапасов.Характеристика
		|					И ДругиеНазначения.Склад = РаспределениеЗапасов.Склад
		|					И ДругиеНазначения.Назначение = РаспределениеЗапасов.Назначение
		|					И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе))";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.КорректировкаНазначенияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.8.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9afe1309-fd83-44a3-829d-bcb21c5cee14");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.КорректировкаНазначенияТоваров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет поле ""Идентификатор строки"" в табличных частях.
	|	|Заполняет поле ""Новый заказ"" и ""Исходный заказ"" в табличной части ""Товары"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров КАК Документ
		|ГДЕ
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Документ.КорректировкаНазначенияТоваров.ВидыЗапасов КАК ТабЧасть
		|		ГДЕ
		|			ТабЧасть.Ссылка = Документ.Ссылка
		|			И ТабЧасть.ИдентификаторСтроки = """")
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров КАК Документ
		|ГДЕ
		|	ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			Документ.КорректировкаНазначенияТоваров.Товары КАК ТабЧасть
		|		ГДЕ
		|			ТабЧасть.Ссылка = Документ.Ссылка
		|				И (ТабЧасть.ИсходноеНазначение.Заказ <> ТабЧасть.ИсходныйЗаказ
		|						ИЛИ ТабЧасть.НовоеНазначение.Заказ <> ТабЧасть.НовыйЗаказ))";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТребуетсяОбновлениеЗаказа
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров КАК Документ
		|ГДЕ
		|	ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			Документ.КорректировкаНазначенияТоваров.Товары КАК ТабЧасть
		|		ГДЕ
		|			ТабЧасть.Ссылка = Документ.Ссылка
		|				И (ЕСТЬNULL(ТабЧасть.ИсходноеНазначение.Заказ, НЕОПРЕДЕЛЕНО) <> ТабЧасть.ИсходныйЗаказ
		|						ИЛИ ЕСТЬNULL(ТабЧасть.НовоеНазначение.Заказ, НЕОПРЕДЕЛЕНО) <> ТабЧасть.НовыйЗаказ))
		|		И Документ.Ссылка В (&ОбновляемыеДанные)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|/////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТребуетсяОбновлениеЗаказа.Ссылка КАК Ссылка,
		|	Товары.ИсходноеНазначение КАК Назначение
		|ПОМЕСТИТЬ ВсеНазначенияДокумента
		|ИЗ
		|	ТребуетсяОбновлениеЗаказа КАК ТаблицаТребуетсяОбновлениеЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаНазначенияТоваров.Товары КАК Товары
		|		ПО Товары.Ссылка = ТаблицаТребуетсяОбновлениеЗаказа.Ссылка
		|		 И Товары.ИсходноеНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТребуетсяОбновлениеЗаказа.Ссылка КАК Ссылка,
		|	Товары.НовоеНазначение КАК Назначение
		|ИЗ
		|	ТребуетсяОбновлениеЗаказа КАК ТаблицаТребуетсяОбновлениеЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаНазначенияТоваров.Товары КАК Товары
		|		ПО Товары.Ссылка = ТаблицаТребуетсяОбновлениеЗаказа.Ссылка
		|		 И Товары.НовоеНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|/////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка,
		|	ТаблицаВсеНазначенияДокумента.Назначение КАК Назначение
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеНазначенияДокумента КАК ТаблицаВсеНазначенияДокумента
		|		ПО ТаблицаВсеНазначенияДокумента.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Ссылка В (&ОбновляемыеДанные)
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|/////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка,
		|	НЕ ТаблицаТребуетсяОбновлениеЗаказа.Ссылка ЕСТЬ NULL КАК ТребуетсяОбновлениеЗаказа
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТребуетсяОбновлениеЗаказа КАК ТаблицаТребуетсяОбновлениеЗаказа
		|		ПО ТаблицаТребуетсяОбновлениеЗаказа.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Ссылка В (&ОбновляемыеДанные)
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные.ВыгрузитьКолонку("Ссылка"));
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Выборка = ПакетРезультатов[ПакетРезультатов.ВГраница()].Выбрать();
	ВыборкаНазначений = ПакетРезультатов[ПакетРезультатов.ВГраница() - 1].Выбрать();
	
	ЗапросЗаказов = Новый Запрос();
	ЗапросЗаказов.Текст =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.Заказ КАК Заказ
		|ИЗ
		|	Справочник.Назначения КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылки)";
	СоответствиеЗаказов = Новый Соответствие();
	
	МассивНазначений = Новый Массив();
	ВыборкаНазначений.Следующий();
	Пока Выборка.Следующий() Цикл
		
		МассивНазначений.Очистить();
		Пока ВыборкаНазначений.Ссылка = Выборка.Ссылка Цикл
			Если ЗначениеЗаполнено(ВыборкаНазначений.Назначение) Тогда
				МассивНазначений.Добавить(ВыборкаНазначений.Назначение);
			КонецЕсли;
			Если Не ВыборкаНазначений.Следующий() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НачатьТранзакцию();
		
		Попытка
			Ссылка = Выборка.Ссылка;
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Для Каждого Элемент Из МассивНазначений Цикл
				ЭлементБлокировки = Блокировка.Добавить("Справочник.Назначения");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Элемент);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			КонецЦикла;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			
			ИзмениласьВерсияОбъекта = Ложь;
			Если ДокументОбъект <> Неопределено Тогда
				
				ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ДокументОбъект, "ВидыЗапасов");
				
				Если Выборка.ТребуетсяОбновлениеЗаказа Тогда
					
					СоответствиеЗаказов.Очистить();
					ЗапросЗаказов.УстановитьПараметр("Ссылки", МассивНазначений);
					ВыборкаЗаказов = ЗапросЗаказов.Выполнить().Выбрать();
					Пока ВыборкаЗаказов.Следующий() Цикл
						СоответствиеЗаказов.Вставить(
							ВыборкаЗаказов.Ссылка,
							?(ВыборкаЗаказов.Заказ = Неопределено, 0, ВыборкаЗаказов.Заказ));
					КонецЦикла;
					
					Для Каждого СтрокаТаблицы Из ДокументОбъект.Товары Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.ИсходноеНазначение) Тогда
							ЗначениеЗаказа = СоответствиеЗаказов.Получить(СтрокаТаблицы.ИсходноеНазначение);
							Если ЗначениеЗаказа = Неопределено Тогда
								ИзмениласьВерсияОбъекта = Истина;
								Прервать;
							КонецЕсли;
							Если ЗначениеЗаказа = 0 Тогда
								ЗначениеЗаказа = Неопределено;
							КонецЕсли;
							Если СтрокаТаблицы.ИсходныйЗаказ <> ЗначениеЗаказа Тогда
								СтрокаТаблицы.ИсходныйЗаказ = ЗначениеЗаказа;
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТаблицы.НовоеНазначение) Тогда
							ЗначениеЗаказа = СоответствиеЗаказов.Получить(СтрокаТаблицы.НовоеНазначение);
							Если ЗначениеЗаказа = Неопределено Тогда
								ИзмениласьВерсияОбъекта = Истина;
								Прервать;
							КонецЕсли;
							Если ЗначениеЗаказа = 0 Тогда
								ЗначениеЗаказа = Неопределено;
							КонецЕсли;
							Если СтрокаТаблицы.НовыйЗаказ <> ЗначениеЗаказа Тогда
								СтрокаТаблицы.НовыйЗаказ = ЗначениеЗаказа;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ИзмениласьВерсияОбъекта Тогда
				Если ДокументОбъект <> Неопределено И ДокументОбъект.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	СинонимТаблицыДокумента = "";
	ПолноеИмяДокумента = "Документ.КорректировкаНазначенияТоваров";
	ПереопределениеРасчетаПараметров = Новый Структура;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ВЗапросеЕстьИсточник    = Истина;
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
		
	Если ИмяРегистра = "РаспределениеЗапасовДвижения" Тогда
		
		ТекстыЗапроса = Новый СписокЗначений();
		СинонимТаблицыДокумента = "ТабЧасть";
		ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстЗапроса = СтрСоединить(ТекстыЗапроса.ВыгрузитьЗначения(), ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
