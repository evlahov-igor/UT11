#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.АктОРасхожденияхПослеОтгрузки);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий);
	
	
	ПараметрыОкругления = Документы.АктОРасхожденияхПослеОтгрузки.ПараметрыТЧДляОкругления("ПоДокументу");
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["Товары"]);
	
	АктОРасхожденияхПослеОтгрузкиЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Если ЭтоНовый() И Не ЗначениеЗаполнено(Автор) Тогда
		Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	АктОРасхожденияхПослеОтгрузкиЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);

	// << 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595
	КР_ПриЗаписи(Отказ);
	// >> 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Автор = Пользователи.АвторизованныйПользователь();
	ЗаполненНаОснованииДокумента = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			Если ДанныеЗаполнения.Свойство("ДокументОснование") 
				И (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
					ИЛИ ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения")
					ИЛИ ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваровХранителю")
					ИЛИ ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) Тогда
				
				ЗаполненНаОснованииДокумента = Истина;
				ЗаполнитьНаОсновании(ДанныеЗаполнения.ДокументОснование);
				
			Иначе
				ЗаполнитьПоОтбору(ДанныеЗаполнения);
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваровХранителю")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
			ЗаполненНаОснованииДокумента = Истина;
			ЗаполнитьНаОсновании(ДанныеЗаполнения);
			ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗаполненНаОснованииДокумента  Тогда
		
		Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении)
			Или РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении)
			Тогда
		
			ИнициализироватьУсловияПродаж();
		
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);

	Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) 
		И (Не ЗначениеЗаполнено(НалогообложениеНДС) Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"))
		И Не (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи) Тогда
		НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Организация, , Договор, , Дата);
	КонецЕсли;
	АктОРасхожденияхПослеОтгрузкиЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

	// << 28.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2595  
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Тогда 
		КР_СкладРазбораРасхождений = 
			Документы.АктОРасхожденияхПослеОтгрузки.КР_ПолучитьСкладРазбораРасхождений(Контрагент);
	КонецЕсли;		
	// >> 28.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2595
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НалогообложениеНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	
	АвторизованВнешнийПользователь = ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь();
	ТипОснованияРеализация         = РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении);
	
	Если АвторизованВнешнийПользователь Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Действие");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоУпаковокПоДокументу");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоПоДокументу");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ТекстовоеОписание");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Реализация");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
	                                            НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.АктОРасхожденияхПослеОтгрузки),
	                                            Отказ,
	                                            МассивНепроверяемыхРеквизитов);
	
	//Проверка того, что реализации по заказу
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ЗаказКлиента");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
	
	Если АвторизованВнешнийПользователь Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацииДокумента.Реализация
		|ПОМЕСТИТЬ ДокументыОснования
		|ИЗ
		|	&ДокументыОснования КАК РеализацииДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыОснования.Реализация
		|ИЗ
		|	ДокументыОснования КАК ДокументыОснования
		|ГДЕ
		|	НЕ ДокументыОснования.Реализация В(&ПустыеСсылки)";
		
		ПустыеСсылки = Новый Массив;
		ПустыеСсылки.Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
		ПустыеСсылки.Добавить(Документы.ПередачаТоваровХранителю.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("ДокументыОснования", Товары.Выгрузить(,"Реализация"));
		Запрос.УстановитьПараметр("ПустыеСсылки",       ПустыеСсылки);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			КоличествоРеализацийОснований = 0;
		Иначе
			КоличествоРеализацийОснований = РезультатЗапроса.Выбрать().Количество();
		КонецЕсли;
		
		Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
			
			ТекущаяСтрока = Товары[ТекИндекс];
			
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И Не ЗначениеЗаполнено(ТекущаяСтрока.ТекстовоеОписание) Тогда
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Текстовое описание"" в строке %НомерСтроки% списка ""Товары""'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ТекстовоеОписание"),
				,
				Отказ)
			КонецЕсли;
			
			Если КоличествоРеализацийОснований > 1 И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Реализация) Тогда
				
				АктПоПередаче = РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении);
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""%Реализация%"" в строке %НомерСтроки% списка ""Товары""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Реализация%", ?(Не АктПоПередаче, НСтр("ru='Реализация'"), НСтр("ru='Передача'")));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Реализация"),
				,
				Отказ);
			КонецЕсли;
			
			Если Не ТекущаяСтрока.ЗаполненоПоРеализации
				И Не ЗначениеЗаполнено(ТекущаяСтрока.КоличествоУпаковок) Тогда
			
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Количество факт"" в строке %НомерСтроки% списка ""Товары""'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "КоличествоУпаковок"),
					,
					Отказ);
			
		КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		МассивРеализацийПоЗаказу = Новый Массив;
		ПроверкиПоЗаказуТребуются = Ложь;
		
		Если ТипОснованияРеализация Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	РеализацииДокумента.Реализация
			|ПОМЕСТИТЬ ДокументыОснования
			|ИЗ
			|	&ДокументыОснования КАК РеализацииДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДокументыОснования.Реализация
			|ИЗ
			|	ДокументыОснования КАК ДокументыОснования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|		ПО ДокументыОснования.Реализация = РеализацияТоваровУслуг.Ссылка
			|ГДЕ
			|	РеализацияТоваровУслуг.РеализацияПоЗаказам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДокументыОснования.Реализация
			|ИЗ
			|	ДокументыОснования КАК ДокументыОснования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровХранителю КАК ПередачаТоваров
			|		ПО ДокументыОснования.Реализация = ПередачаТоваров.Ссылка
			|ГДЕ
			|	ПередачаТоваров.ПередачаПоЗаказам
			|";
			
			Запрос.УстановитьПараметр("ДокументыОснования", Товары.Выгрузить(,"Реализация"));
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ПроверкиПоЗаказуТребуются = Истина;
				МассивРеализацийПоЗаказу = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Реализация");
			КонецЕсли;
			
		КонецЕсли;
		
		Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
			
			ТекущаяСтрока = Товары[ТекИндекс];
			
			Если ПроверкиПоЗаказуТребуются Тогда 
				Если Не ЗначениеЗаполнено(ТекущаяСтрока["ЗаказКлиента"]) И ЗначениеЗаполнено(ТекущаяСтрока.Реализация)
					И МассивРеализацийПоЗаказу.Найти(ТекущаяСтрока.Реализация) <> Неопределено Тогда
					
					ТекстОшибки = НСтр("ru='Не заполнено поле ""Заказ клиента"" в строке %НомерСтроки% списка ""Товары""'");
					ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ЗаказКлиента"),
					,
					Отказ);
					
					ТекстОшибки = НСтр("ru='Не заполнено поле ""Код строки"" в строке %НомерСтроки% списка ""Товары""'");
					ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ЗаказКлиента"),
					,
					Отказ);
					
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущаяСтрока.ЗаполненоПоРеализации
				И Не ЗначениеЗаполнено(ТекущаяСтрока.КоличествоУпаковокПоДокументу) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Количество по документу"" в строке %НомерСтроки% списка ""Товары""'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "КоличествоУпаковокПоДокументу"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ТекущаяСтрока.ЗаполненоПоРеализации
				И Не ЗначениеЗаполнено(ТекущаяСтрока.Сумма)
				И Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи
				И Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Сумма"" в строке %НомерСтроки% списка ""Товары""'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Сумма"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Статус <> Перечисления.СтатусыАктаОРасхождениях.НеСогласовано 
				И (ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокПоДокументу) <> 0 
				И Не ЗначениеЗаполнено(ТекущаяСтрока["Действие"]) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Как отражать расхождение"" в строке %НомерСтроки% списка ""Товары""'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Действие"),
					,
					Отказ);
				
			КонецЕсли;
				
			Если Не ТекущаяСтрока.ЗаполненоПоРеализации
				И Не ЗначениеЗаполнено(ТекущаяСтрока.КоличествоУпаковок) Тогда
			
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Количество факт"" в строке %НомерСтроки% списка ""Товары""'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "КоличествоУпаковок"),
				,
				Отказ);
			
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Реализация)
				И Статус <> Перечисления.СтатусыАктаОРасхождениях.НеСогласовано Тогда
				
				Если ТипОснованияАктаОРасхождении = ПередачаНаКомиссию.ТипОснованияАкта() Тогда
					ИмяКолонки = НСтр("ru = 'Передача на комиссию'");
				Иначе
					ИмяКолонки = ?(ТипОснованияРеализация, НСтр("ru = 'Реализация'"), НСтр("ru = 'Возврат поставщику'"));
				КонецЕсли;
				
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не заполнено поле ""%1"" в строке ""%2"" списка ""Товары""'"), ИмяКолонки, ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Реализация"),
				,
				Отказ);
				
			КонецЕсли;
		
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
			
			ДокументОснование = Неопределено;
			СоответствиеНоменклатураТип = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Товары.ВыгрузитьКолонку("Номенклатура"), "ТипНоменклатуры");		
			
			Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.РеализацияТоваровУслуг Тогда 
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Цена) Тогда
				
					ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Цена"" в строке %НомерСтроки% списка ""Товары""'");
					ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
					
					Если ТекущаяСтрока.ЗаполненоПоРеализации Тогда				
						
						Если ДокументОснование <> ТекущаяСтрока.Реализация Тогда
							ДокументОснование = ТекущаяСтрока.Реализация;
							ЗначениеРеквизитовДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ВернутьМногооборотнуюТару, ТребуетсяЗалогЗаТару");
						КонецЕсли;

						Если Не СоответствиеНоменклатураТип.Получить(ТекущаяСтрока.Номенклатура) = Перечисления.ТипыНоменклатуры.МногооборотнаяТара 
							Или СоответствиеНоменклатураТип.Получить(ТекущаяСтрока.Номенклатура) = Перечисления.ТипыНоменклатуры.МногооборотнаяТара 
								И (Не ЗначениеРеквизитовДокументаОснования.ВернутьМногооборотнуюТару Или ЗначениеРеквизитовДокументаОснования.ТребуетсяЗалогЗаТару) Тогда
					
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								                   ТекстОшибки,
								                   ЭтотОбъект,
								                   ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Цена"),
								                   ,
								                   Отказ);
							
						КонецЕсли;
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						                   ТекстОшибки,
						                   ЭтотОбъект,
						                   ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Цена"),
						                   ,
						                   Отказ);
					КонецЕсли; 			
				КонецЕсли;	
			КонецЕсли;	
		
		КонецЦикла;
		
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		Если Не ЗначениеЗаполнено(Партнер) Тогда
			
			Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратПоставщику Тогда
				ТекстОшибки = НСтр("ru = 'Поле ""Поставщик"" не заполнено'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Поле ""Клиент"" не заполнено'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"Партнер",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
		Если Не ЗначениеЗаполнено(Соглашение) ИЛИ 
			 Не ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Договор");
		КонецЕсли;
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(ТипОснованияАктаОРасхождении) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Соглашение");
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияОтгрузкаТоваровСХранения(ТипОснованияАктаОРасхождении) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Соглашение");
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении)
		Или РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении) Тогда
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействийПоТипуОснованияАкта(ТипОснованияАктаОРасхождении);
		Если Не Обработчик.СоглашенияСКлиентамиПрименимы() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Соглашение");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.РеализацияТоваровУслуг
		Или РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении)
		Или РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении) Тогда
			
		ОписаниеМетаданных = РасхожденияСервер.ОписаниеМетаданныхПроверкиВозможностиВнесенияИзлишкаВНакладную();
		ОписаниеМетаданных.ИмяПоляНакладнойЗаказ = "ЗаказКлиента";
		ОписаниеМетаданных.ИмяПоляРегистраЗаказ  = "ЗаказКлиента";
		ОписаниеМетаданных.ИмяПоляАктаЗаказ = "ЗаказКлиента";
		ОписаниеМетаданных.ИмяПоляАктаНакладная = "Реализация";
		
		РасхожденияСервер.ПроверкаВозможностиВнесенияИзлишкаВНакладную(ЭтотОбъект, "ЗаказыКлиентов", ОписаниеМетаданных, Отказ);
	КонецЕсли;
	
	Если РасхожденияКлиентСервер.ТипОснованияОтгрузкаТоваровСХранения(ТипОснованияАктаОРасхождении)
		Или РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении)
		Или РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НалогообложениеНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении)
		Или РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении)
		Или РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении) Тогда
		
		ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект,Отказ);
		
	Иначе
		ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	АктОРасхожденияхПослеОтгрузкиЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

	// << 28.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2595
	КР_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты);
	// >> 28.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2595

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	АктОРасхожденияхПослеОтгрузкиЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	АктОРасхожденияхПослеОтгрузкиЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоОтбору(СтруктураОтбора)
	
	Если СтруктураОтбора.Свойство("Организация") Тогда
		Организация = СтруктураОтбора.Организация;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Партнер") Тогда
		Партнер = СтруктураОтбора.Партнер;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Контрагент") Тогда
		Контрагент = СтруктураОтбора.Контрагент;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Валюта") Тогда
		Валюта = СтруктураОтбора.Валюта;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = СтруктураОтбора.ХозяйственнаяОперация;
		ТипОснованияАктаОРасхождении = ТипОснованияАктаОРасхожденииПоХозОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ТипОснованияАктаОРасхождении") Тогда
		ТипОснованияАктаОРасхождении = СтруктураОтбора.ТипОснованияАктаОРасхождении;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОсновании(Основание)
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.РеализацияТоваровУслуг;
		Запрос.Текст = ТекстЗапросаПоОснованиюРеализации();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратПоставщику;
		Запрос.Текст = ТекстЗапросаПоОснованиюВозврату();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
		
		ХозяйственнаяОперацияОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ХозяйственнаяОперация");
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействий(ХозяйственнаяОперацияОснование);
		
		ТипОснованияАктаОРасхождении = Обработчик.ТипОснованияАкта();
		Запрос.Текст = ТекстЗапросаПоОснованиюПередачи();
		
	Иначе
		
		ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ОтгрузкаТоваровСХранения;
		Запрос.Текст = ТекстЗапросаПоОснованиюОтгрузкиСХранения();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Основание", Основание);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииПоОперации(Основание,
									"АктОРасхожденияхПослеОтгрузки",
									РеквизитыОснования.ХозяйственнаяОперация);
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыОснования.РеализацияТоваровУслуг,
		РеквизитыОснования.СтатусДокумента,
		РеквизитыОснования.ЕстьОшибкиПроведен,
		РеквизитыОснования.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов,
		РеквизитыОснования.СоглашениеДоступноВнешнимПользователям);
	
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОснования);
	
	Товары.Загрузить(РезультатЗапроса[1].Выгрузить());
	Серии.Загрузить(РезультатЗапроса[2].Выгрузить());
	
КонецПроцедуры

Функция ТекстЗапросаПоОснованиюРеализации()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕ РеализацияТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
	|			ИЛИ РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваровУслуг,
	|	РеализацияТоваровУслуг.Статус КАК СтатусДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Менеджер,
	|	РеализацияТоваровУслуг.НалогообложениеНДС,
	|	РеализацияТоваровУслуг.Партнер,
	|	РеализацияТоваровУслуг.Валюта,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Грузоотправитель) КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.ХозяйственнаяОперация,
	|	РеализацияТоваровУслуг.ЦенаВключаетНДС,
	|	РеализацияТоваровУслуг.Договор,
	|	РеализацияТоваровУслуг.КонтактноеЛицо,
	|	РеализацияТоваровУслуг.Соглашение,
	|	РеализацияТоваровУслуг.Подразделение,
	|	РеализацияТоваровУслуг.Соглашение.ДоступноВнешнимПользователям КАК СоглашениеДоступноВнешнимПользователям
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика,
	|	РеализацияТоваровУслугТовары.Серия,
	|	РеализацияТоваровУслугТовары.Назначение,
	|	РеализацияТоваровУслугТовары.Назначение КАК НазначениеОтправителя,
	|	РеализацияТоваровУслугТовары.Упаковка,
	|	РеализацияТоваровУслугТовары.КоличествоУпаковок,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.ВидЦены,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.КоличествоУпаковок = 0
	|			ТОГДА РеализацияТоваровУслугТовары.Цена
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Сумма / РеализацияТоваровУслугТовары.КоличествоУпаковок КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.Склад,
	|	РеализацияТоваровУслугТовары.Подразделение,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.СуммаСНДС,
	|	РеализацияТоваровУслугТовары.СтатусУказанияСерий,
	|	РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
	|	РеализацияТоваровУслугТовары.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслугТовары.КодСтроки КАК КодСтроки,
	|	ИСТИНА КАК ЗаполненоПоРеализации,
	|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковокПоДокументу,
	|	РеализацияТоваровУслугТовары.Количество КАК КоличествоПоДокументу,
	|	РеализацияТоваровУслугТовары.Сумма КАК СуммаПоДокументу,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДСПоДокументу,
	|	РеализацияТоваровУслугТовары.СуммаСНДС КАК СуммаСНДСПоДокументу
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслугСерии.Серия          КАК Серия,
	|	РеализацияТоваровУслугСерии.Количество     КАК Количество,
	|	РеализацияТоваровУслугСерии.Количество     КАК КоличествоПоДокументу,
	|	РеализацияТоваровУслугСерии.Номенклатура   КАК Номенклатура,
	|	РеализацияТоваровУслугСерии.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугСерии.Назначение     КАК Назначение,
	|	РеализацияТоваровУслугСерии.Назначение     КАК НазначениеОтправителя,
	|	РеализацияТоваровУслугСерии.Склад          КАК Склад,
	|	РеализацияТоваровУслугСерии.Ссылка         КАК Реализация,
	|	ИСТИНА                                     КАК ЗаполненоПоРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Серии КАК РеализацияТоваровУслугСерии
	|ГДЕ
	|	РеализацияТоваровУслугСерии.Ссылка = &Основание
	|";

КонецФункции 

Функция ТекстЗапросаПоОснованиюВозврату()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕ ВозвратТоваровПоставщику.Проведен КАК ЕстьОшибкиПроведен,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	ВозвратТоваровПоставщику.Ссылка КАК РеализацияТоваровУслуг,
	|	НЕОПРЕДЕЛЕНО КАК СтатусДокумента,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.Менеджер,
	|	ВозвратТоваровПоставщику.НалогообложениеНДС,
	|	ВозвратТоваровПоставщику.Партнер,
	|	ВозвратТоваровПоставщику.Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровПоставщику.Грузоотправитель) КАК Грузоотправитель,
	|	ВозвратТоваровПоставщику.ХозяйственнаяОперация,
	|	ВозвратТоваровПоставщику.ЦенаВключаетНДС,
	|	ВозвратТоваровПоставщику.Договор,
	|	ВозвратТоваровПоставщику.КонтактноеЛицо,
	|	ВозвратТоваровПоставщику.Соглашение,
	|	ВозвратТоваровПоставщику.Подразделение,
	|	ЛОЖЬ КАК СоглашениеДоступноВнешнимПользователям
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика,
	|	ВозвратТоваровПоставщикуТовары.Серия,
	|	ВозвратТоваровПоставщикуТовары.Назначение,
	|	ВозвратТоваровПоставщикуТовары.Назначение КАК НазначениеОтправителя,
	|	ВозвратТоваровПоставщикуТовары.Упаковка,
	|	ВозвратТоваровПоставщикуТовары.КоличествоУпаковок,
	|	ВозвратТоваровПоставщикуТовары.Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.Сумма,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Склад,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаСНДС,
	|	ВозвратТоваровПоставщикуТовары.СтатусУказанияСерий,
	|	ВозвратТоваровПоставщикуТовары.Ссылка КАК Реализация,
	|	ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) КАК ЗаказКлиента,
	|	ИСТИНА КАК ЗаполненоПоРеализации,
	|	ВозвратТоваровПоставщикуТовары.КоличествоУпаковок КАК КоличествоУпаковокПоДокументу,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК КоличествоПоДокументу,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаПоДокументу,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДСПоДокументу,
	|	ВозвратТоваровПоставщикуТовары.СуммаСНДС КАК СуммаСНДСПоДокументу,
	|	ВозвратТоваровПоставщикуТовары.ДокументПоступления
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровПоставщикуСерии.Серия КАК Серия,
	|	ВозвратТоваровПоставщикуСерии.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуСерии.Количество КАК КоличествоПоДокументу,
	|	ВозвратТоваровПоставщикуСерии.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуСерии.Характеристика КАК Характеристика,
	|	ВозвратТоваровПоставщикуСерии.Назначение КАК Назначение,
	|	ВозвратТоваровПоставщикуСерии.Назначение КАК НазначениеОтправителя,
	|	ВозвратТоваровПоставщикуСерии.Ссылка.Склад КАК Склад,
	|	ВозвратТоваровПоставщикуСерии.Ссылка КАК Реализация,
	|	ИСТИНА КАК ЗаполненоПоРеализации
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Серии КАК ВозвратТоваровПоставщикуСерии
	|ГДЕ
	|	ВозвратТоваровПоставщикуСерии.Ссылка = &Основание";

КонецФункции

Функция ТекстЗапросаПоОснованиюОтгрузкиСХранения()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтгрузкаТоваровСХранения.Ссылка                                      КАК РеализацияТоваровУслуг,
	|	НЕОПРЕДЕЛЕНО                                                         КАК СтатусДокумента,
	|	ОтгрузкаТоваровСХранения.Партнер                                     КАК Партнер,
	|	ОтгрузкаТоваровСХранения.Контрагент                                  КАК Контрагент,
	|	ОтгрузкаТоваровСХранения.Организация                                 КАК Организация,
	|	ОтгрузкаТоваровСХранения.Подразделение                               КАК Подразделение,
	|	ОтгрузкаТоваровСХранения.Соглашение                                  КАК Соглашение,
	|	ОтгрузкаТоваровСХранения.Договор                                     КАК Договор,
	|	ОтгрузкаТоваровСХранения.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ОтгрузкаТоваровСХранения.Менеджер                                    КАК Менеджер,
	|	ОтгрузкаТоваровСХранения.Валюта                                      КАК Валюта,
	|	ОтгрузкаТоваровСХранения.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК НалогообложениеНДС,
	|	ПРЕДСТАВЛЕНИЕ(ОтгрузкаТоваровСХранения.Грузоотправитель)             КАК Грузоотправитель,
	|	ОтгрузкаТоваровСХранения.КонтактноеЛицо                              КАК КонтактноеЛицо,
	|	ЛОЖЬ                                                                 КАК СоглашениеДоступноВнешнимПользователям,
	|	НЕ ОтгрузкаТоваровСХранения.Проведен                                 КАК ЕстьОшибкиПроведен,
	|	ЛОЖЬ                                                                 КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения КАК ОтгрузкаТоваровСХранения
	|ГДЕ
	|	ОтгрузкаТоваровСХранения.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтгрузкаТоваровСХраненияТовары.Номенклатура        КАК Номенклатура,
	|	ОтгрузкаТоваровСХраненияТовары.Характеристика      КАК Характеристика,
	|	ОтгрузкаТоваровСХраненияТовары.Упаковка            КАК Упаковка,
	|	ОтгрузкаТоваровСХраненияТовары.Назначение          КАК Назначение,
	|	ОтгрузкаТоваровСХраненияТовары.Назначение          КАК НазначениеОтправителя,
	|	ОтгрузкаТоваровСХраненияТовары.Серия               КАК Серия,
	|	ОтгрузкаТоваровСХраненияТовары.КоличествоУпаковок  КАК КоличествоУпаковок,
	|	ОтгрузкаТоваровСХраненияТовары.Количество          КАК Количество,
	|	ОтгрузкаТоваровСХраненияТовары.Цена                КАК Цена,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)              КАК СтавкаНДС,
	|	ОтгрузкаТоваровСХраненияТовары.Сумма               КАК Сумма,
	|	ОтгрузкаТоваровСХраненияТовары.Склад               КАК Склад,
	|	0                                                  КАК СуммаНДС,
	|	ОтгрузкаТоваровСХраненияТовары.Сумма               КАК СуммаСНДС,
	|	ОтгрузкаТоваровСХраненияТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ОтгрузкаТоваровСХраненияТовары.Ссылка              КАК Реализация,
	|	ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)       КАК ЗаказКлиента,
	|	ИСТИНА                                             КАК ЗаполненоПоРеализации,
	|	ОтгрузкаТоваровСХраненияТовары.КоличествоУпаковок  КАК КоличествоУпаковокПоДокументу,
	|	ОтгрузкаТоваровСХраненияТовары.Количество          КАК КоличествоПоДокументу,
	|	ОтгрузкаТоваровСХраненияТовары.Сумма               КАК СуммаПоДокументу,
	|	0                                                  КАК СуммаНДСПоДокументу,
	|	ОтгрузкаТоваровСХраненияТовары.Сумма               КАК СуммаСНДСПоДокументу
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения.Товары КАК ОтгрузкаТоваровСХраненияТовары
	|ГДЕ
	|	ОтгрузкаТоваровСХраненияТовары.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтгрузкаТоваровСХраненияСерии.Номенклатура   КАК Номенклатура,
	|	ОтгрузкаТоваровСХраненияСерии.Характеристика КАК Характеристика,
	|	ОтгрузкаТоваровСХраненияСерии.Назначение     КАК Назначение,
	|	ОтгрузкаТоваровСХраненияСерии.Назначение     КАК НазначениеОтправителя,
	|	ОтгрузкаТоваровСХраненияСерии.Серия          КАК Серия,
	|	ОтгрузкаТоваровСХраненияСерии.Количество     КАК Количество,
	|	ОтгрузкаТоваровСХраненияСерии.Количество     КАК КоличествоПоДокументу,
	|	ОтгрузкаТоваровСХраненияСерии.Склад          КАК Склад,
	|	ОтгрузкаТоваровСХраненияСерии.Ссылка         КАК Реализация,
	|	ИСТИНА                                       КАК ЗаполненоПоРеализации
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения.Серии КАК ОтгрузкаТоваровСХраненияСерии
	|ГДЕ
	|	ОтгрузкаТоваровСХраненияСерии.Ссылка = &Основание";
	
КонецФункции

Функция ТекстЗапросаПоОснованиюПередачи()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПередачаТоваров.Ссылка                                               КАК РеализацияТоваровУслуг,
	|	НЕОПРЕДЕЛЕНО                                                         КАК СтатусДокумента,
	|	ПередачаТоваров.Партнер                                              КАК Партнер,
	|	ПередачаТоваров.Контрагент                                           КАК Контрагент,
	|	ПередачаТоваров.Организация                                          КАК Организация,
	|	ПередачаТоваров.Подразделение                                        КАК Подразделение,
	|	ПередачаТоваров.Соглашение                                           КАК Соглашение,
	|	ПередачаТоваров.Договор                                              КАК Договор,
	|	ПередачаТоваров.ХозяйственнаяОперация                                КАК ХозяйственнаяОперация,
	|	ПередачаТоваров.Менеджер                                             КАК Менеджер,
	|	ПередачаТоваров.Валюта                                               КАК Валюта,
	|	ЛОЖЬ                                                                 КАК ЦенаВключаетНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)           КАК НалогообложениеНДС,
	|	ПРЕДСТАВЛЕНИЕ(ПередачаТоваров.Грузоотправитель)                      КАК Грузоотправитель,
	|	ПередачаТоваров.КонтактноеЛицо                                       КАК КонтактноеЛицо,
	|	ЕСТЬNULL(Соглашения.ДоступноВнешнимПользователям, ЛОЖЬ)              КАК СоглашениеДоступноВнешнимПользователям,
	|	НЕ ПередачаТоваров.Проведен                                          КАК ЕстьОшибкиПроведен,
	|	ЛОЖЬ                                                                 КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ПередачаТоваровХранителю КАК ПередачаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК Соглашения
	|		ПО ПередачаТоваров.Соглашение = Соглашения.Ссылка
	|ГДЕ
	|	ПередачаТоваров.Ссылка = &Основание
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыПередачи.Номенклатура           КАК Номенклатура,
	|	ТоварыПередачи.Характеристика         КАК Характеристика,
	|	ТоварыПередачи.Упаковка               КАК Упаковка,
	|	ТоварыПередачи.Назначение             КАК Назначение,
	|	ТоварыПередачи.НазначениеОтправителя  КАК НазначениеОтправителя,
	|	ТоварыПередачи.Серия                  КАК Серия,
	|	ТоварыПередачи.КоличествоУпаковок     КАК КоличествоУпаковок,
	|	ТоварыПередачи.Количество             КАК Количество,
	|	ТоварыПередачи.ВидЦены                КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ТоварыПередачи.КоличествоУпаковок = 0
	|			ТОГДА ТоварыПередачи.Цена
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ТоварыПередачи.Сумма / ТоварыПередачи.КоличествоУпаковок КАК ЧИСЛО(31, 2))
	|	КОНЕЦ                                 КАК Цена,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС) КАК СтавкаНДС,
	|	ТоварыПередачи.Сумма                  КАК Сумма,
	|	ТоварыПередачи.Склад                  КАК Склад,
	|	0                                     КАК СуммаНДС,
	|	ТоварыПередачи.Сумма                  КАК СуммаСНДС,
	|	ТоварыПередачи.СтатусУказанияСерий    КАК СтатусУказанияСерий,
	|	ТоварыПередачи.Ссылка                 КАК Реализация,
	|	ТоварыПередачи.ЗаказКлиента           КАК ЗаказКлиента,
	|	ТоварыПередачи.КодСтроки              КАК КодСтроки,
	|	ИСТИНА                                КАК ЗаполненоПоРеализации,
	|	ТоварыПередачи.КоличествоУпаковок     КАК КоличествоУпаковокПоДокументу,
	|	ТоварыПередачи.Количество             КАК КоличествоПоДокументу,
	|	ТоварыПередачи.Сумма                  КАК СуммаПоДокументу,
	|	0                                     КАК СуммаНДСПоДокументу,
	|	ТоварыПередачи.Сумма                  КАК СуммаСНДСПоДокументу
	|ИЗ
	|	Документ.ПередачаТоваровХранителю.Товары КАК ТоварыПередачи
	|ГДЕ
	|	ТоварыПередачи.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СерииПередачи.Номенклатура   КАК Номенклатура,
	|	СерииПередачи.Характеристика КАК Характеристика,
	|	СерииПередачи.Назначение     КАК Назначение,
	|	СерииПередачи.НазначениеОтправителя КАК НазначениеОтправителя,
	|	СерииПередачи.Серия          КАК Серия,
	|	СерииПередачи.Количество     КАК Количество,
	|	СерииПередачи.Количество     КАК КоличествоПоДокументу,
	|	СерииПередачи.Склад          КАК Склад,
	|	СерииПередачи.Ссылка         КАК Реализация,
	|	ИСТИНА                       КАК ЗаполненоПоРеализации
	|ИЗ
	|	Документ.ПередачаТоваровХранителю.Серии КАК СерииПередачи
	|ГДЕ
	|	СерииПередачи.Ссылка = &Основание";

КонецФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если Не ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ЭтотОбъект, Ложь);
		Если Не ЗначениеЗаполнено(Менеджер) Тогда
			Менеджер = Пользователи.ТекущийПользователь();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Менеджер);
		КонецЕсли;
	КонецЕсли;
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	КонецЕсли;
	Статус      = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
	
	ЗаполнитьНалогообложениеНДС();
	
	// Заполним ставку с учетом текущей даты документа. Пересчитываем связанные реквизиты табличной части.
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЭтотОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(КэшированныеЗначения.ОбработанныеСтроки, СтруктураДействий, Неопределено);
	
КонецПроцедуры

#Область УсловияПродаж

Процедура ИнициализироватьУсловияПродаж()
	
	Если РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении) Тогда
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействийПоТипуОснованияАкта(ТипОснованияАктаОРасхождении);
		ИспользоватьСоглашенияСКлиентами = Обработчик.ИспользоватьСоглашенияСКлиентами();
	Иначе
		ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	КонецЕсли;
	
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в документе
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию(СегментНоменклатуры = Неопределено) Экспорт
	
	Обработчик = Неопределено;
	Если РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении) Тогда
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействийПоТипуОснованияАкта(ТипОснованияАктаОРасхождении);
		ИспользоватьСоглашенияСКлиентами = Обработчик.ИспользоватьСоглашенияСКлиентами();
	Иначе
		ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партнер) ИЛИ Не ИспользоватьСоглашенияСКлиентами Тогда
		
		ОперацияОтбора = ?(Обработчик = Неопределено, Неопределено, Обработчик.ХозяйственнаяОперацияДоговора());
		СоглашенияСКлиентамиПрименимы = ?(Обработчик = Неопределено, Истина, Обработчик.СоглашенияСКлиентамиПрименимы());
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВыбранноеСоглашение",   Соглашение);
		ПараметрыОтбора.Вставить("ХозяйственныеОперации", ОперацияОтбора);
		ПараметрыОтбора.Вставить("ПустаяСсылкаДокумента", Документы.АктОРасхожденияхПослеОтгрузки.ПустаяСсылка());
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер, ПараметрыОтбора, СоглашенияСКлиентамиПрименимы);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Если НЕ ИспользоватьСоглашенияСКлиентами 
				Или (Соглашение <> УсловияПродажПоУмолчанию.Соглашение И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение)) Тогда
				
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию, СегментНоменклатуры);
				ЗаполнитьНалогообложениеНДС();
				
			Иначе
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
			
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	Если Не ЗначениеЗаполнено(НалогообложениеНДС)
		И ИспользоватьСоглашенияСКлиентами
		И Не (РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении)
			Или РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении)) Тогда
		
		НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Организация, , Договор, , Дата);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж в документе
//
// Параметры:
//	УсловияПродаж       - Структура - Структура для заполнения.
//	СегментНоменклатуры - СправочникСсылка.СегментыНоменклатуры
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж, СегментНоменклатуры = Неопределено) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Неопределено;
	Если РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении) Тогда
		Обработчик = Документы.ПередачаТоваровХранителю.ОбработчикДействийПоТипуОснованияАкта(ТипОснованияАктаОРасхождении);
	КонецЕсли;
	
	Валюта                = УсловияПродаж.Валюта;
	ЦенаВключаетНДС       = УсловияПродаж.ЦенаВключаетНДС;
	СегментНоменклатуры   = УсловияПродаж.СегментНоменклатуры;
	
	Если Обработчик = Неопределено Или Обработчик.СоглашенияСКлиентамиПрименимы() Тогда
		ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Организация Тогда
		Организация = УсловияПродаж.Организация;
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) И УсловияПродаж.Контрагент<>Контрагент Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.КонтактноеЛицо) 
			И НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		Если Обработчик = Неопределено Тогда
			Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
				ЭтотОбъект,
				?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет,
					Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
					ХозяйственнаяОперация));
		Иначе
			Договор = Обработчик.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, Ложь, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НалогообложениеНДС)
		И Не (РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении)
			Или РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(ТипОснованияАктаОРасхождении)) Тогда
		
		НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Организация, , Договор, , Дата);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в документе
//
Процедура ЗаполнитьУсловияПродажПоСоглашению(СегментНоменклатуры) Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина, Истина);
	ЗаполнитьУсловияПродаж(УсловияПродаж, СегментНоменклатуры);
	ЗаполнитьНалогообложениеНДС();
	
КонецПроцедуры

#КонецОбласти

#Область УсловияЗакупок

// Заполняет условия закупок по умолчанию в возврате товаров поставщику
//
Процедура ЗаполнитьУсловияЗакупокПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		Соглашение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено (Партнер) Тогда
		
		ОперацияОтбора = ?(ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОтгрузкаПринятыхСПравомПродажиТоваровСХранения,
							Неопределено,
							Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи);
		
		ПараметрыОтбора = Новый Структура("ХозяйственныеОперации", ОперацияОтбора);
		
		УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер, ПараметрыОтбора);
		
		Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
			
			Если Соглашение <> УсловияЗакупокПоУмолчанию.Соглашение
				И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение) Тогда
				
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
				ЗаполнитьУсловияЗакупок(УсловияЗакупокПоУмолчанию);
				ЗаполнитьНалогообложениеНДС();
				
			Иначе
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
			КонецЕсли;
				
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в возврате товаров поставщику
//
Процедура ЗаполнитьУсловияЗакупокПоСоглашению() Экспорт
	
	УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение);
	ЗаполнитьУсловияЗакупок(УсловияЗакупок);
	ЗаполнитьНалогообложениеНДС();
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
КонецПроцедуры

// Заполняет условия закупок в документе
//
// Параметры:
//	УсловияЗакупок - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияЗакупок(Знач УсловияЗакупок) Экспорт
	
	Если УсловияЗакупок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияЗакупок.Валюта;
	ЦенаВключаетНДС = УсловияЗакупок.ЦенаВключаетНДС;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация<>Организация Тогда
		Организация = УсловияЗакупок.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) И УсловияЗакупок.Контрагент <> Контрагент Тогда
		Контрагент = УсловияЗакупок.Контрагент;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	ХозяйственнаяОперация = ЗакупкиСервер.ПолучитьХозяйственнуюОперациюВозвратаПоПоступлению(УсловияЗакупок.ХозяйственнаяОперация);
		
	ХозяйственнаяОперацияДоговора = Неопределено;
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику") Тогда
		ХозяйственнаяОперацияДоговора = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
	ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту") Тогда
		ХозяйственнаяОперацияДоговора = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию");
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияОтгрузкаТоваровСХранения(ТипОснованияАктаОРасхождении) Тогда
		ХозяйственнаяОперацияДоговора = УсловияЗакупок.ХозяйственнаяОперация;
	КонецЕсли;
	
	ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
	ДопПараметры.ВалютаВзаиморасчетов = Валюта;
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперацияДоговора, ДопПараметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыАктаОРасхождениях[НовыйСтатус];
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.АктОРасхожденияхПослеОтгрузки);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

Функция ТипОснованияАктаОРасхожденииПоХозОперации(ХозОперация)
	
	Если ХозОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику 
		ИЛИ ХозОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту Тогда
		
		Возврат Перечисления.ТипыОснованияАктаОРасхождении.ВозвратПоставщику;
		
	ИначеЕсли ХозОперация = Перечисления.ХозяйственныеОперации.ОтгрузкаПринятыхСПравомПродажиТоваровСХранения
		ИЛИ ХозОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		Возврат Перечисления.ТипыОснованияАктаОРасхождении.ОтгрузкаТоваровСХранения;
	ИначеЕсли ХозОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
		Возврат Перечисления.ТипыОснованияАктаОРасхождении.ПередачаТоваровХранителю;
	ИначеЕсли ХозОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Возврат Перечисления.ТипыОснованияАктаОРасхождении.ПередачаНаКомиссию;
	Иначе
		Возврат Перечисления.ТипыОснованияАктаОРасхождении.РеализацияТоваровУслуг;
	КонецЕсли;
	
КонецФункции

#Область Прочее

Процедура ЗаполнитьНалогообложениеНДС()
	
	Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении)
		И Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		ПараметрыЗаполнения = Документы.АктОРасхожденияхПослеОтгрузки.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЭтотОбъект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
		
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(ТипОснованияАктаОРасхождении) Тогда
		
		ПараметрыЗаполнения = Документы.АктОРасхожденияхПослеОтгрузки.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ЭтотОбъект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(НалогообложениеНДС, ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти    

#Область КР_ДополнительныеПроцедурыИФункции

// << 28.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2595
Процедура КР_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОтборСтрокПереместитьНаСкладРазбора = Новый Структура("Действие", 
		Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьНаСкладРазбора);
	ОтборСтрокПереместитьСоСкладаРазбора = Новый Структура("Действие", 
		Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьСоСкладаРазбора);
		
	ЕстьСтрокиПеремещенияСоСкладомРазбора = Товары.НайтиСтроки(ОтборСтрокПереместитьНаСкладРазбора).Количество()
		Или Товары.НайтиСтроки(ОтборСтрокПереместитьСоСкладаРазбора).Количество();
		
	Если ЕстьСтрокиПеремещенияСоСкладомРазбора
		И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Тогда 
		
		ПроверяемыеРеквизиты.Добавить("КР_СкладРазбораРасхождений");
		
	КонецЕсли;		

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // >> 28.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2595

// << 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595
Процедура КР_ПриЗаписи(Отказ)
	
	Если Отказ 
		Или ДополнительныеСвойства.Свойство(
			КР_УТ11_ЦБ_Магазин_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен())
		Тогда 
		Возврат;
	КонецЕсли;
	
	КР_СформироватьТехническиеДокументы(Отказ);
	
КонецПроцедуры // >> 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595

// << 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595
Процедура КР_СформироватьТехническиеДокументы(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Выбираем докуметы, в том числе и не проведенные (по убыванию признака)
	// В запросе определяем какие действия нужно выполнить
	// Так же получаем товарный состав
	Запрос = Новый Запрос(КР_ТекстЗапросаДанныеЗаполненияТехническихДокументов());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);                               
	Запрос.УстановитьПараметр("Проведен", Проведен);                               
	Запрос.УстановитьПараметр("Статус", Статус);                               
	Запрос.УстановитьПараметр("СкладРазбораРасхождений", КР_СкладРазбораРасхождений);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	ИндексПоследнегоПакета = РезультатЗапроса.ВГраница(); 
	
	ВыборкаТовары = РезультатЗапроса[ИндексПоследнегоПакета - 1].Выбрать();  
	ВыборкаДействие = РезультатЗапроса[ИндексПоследнегоПакета].Выбрать(
		ОбходРезультатаЗапроса.ПоГруппировкам);  

	Пока ВыборкаДействие.Следующий() Цикл 
		
		ВыборкаДетальныеЗаписи = ВыборкаДействие.Выбрать();   
		
		Если ВыборкаДействие.Действие = Неопределено Тогда 
			
			// Документы которые не совпали по направлению перемещений 
			КР_ПометитьНаУдалениеДокументыВыборки(ВыборкаДетальныеЗаписи);
			
		Иначе	
			
			// Первый документ перезаполним
			КР_СформироватьТехническийДокумент(ВыборкаДетальныеЗаписи, ВыборкаТовары, Отказ);	
			
			// Остальные пометим на удаление
			КР_ПометитьНаУдалениеДокументыВыборки(ВыборкаДетальныеЗаписи);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // >> 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595

// << 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595
Процедура КР_СформироватьТехническийДокумент(ВыборкаСсылок, ВыборкаТовары, Отказ)
	
	// Позиционируемся на первую запись
	ВыборкаСсылок.Следующий();
	ДокументСсылка = ВыборкаСсылок.Ссылка;  
	ДокументНайден = ЗначениеЗаполнено(ДокументСсылка);

	ВариантыДействий = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки;
	
	// << 10.06.2024 Вдовенко С.А., КРОК, A2105505-2659
	//Если ВыборкаСсылок.Действие = ВариантыДействий.КР_ПереместитьНаСкладРазбора Тогда 
	//	ТипДокумента = "ПередачаТоваровХранителю";
	//Иначе
	//	ТипДокумента = "ПоступлениеТоваровОтХранителя";
	//КонецЕсли;
	Если ВыборкаСсылок.Действие = ВариантыДействий.КР_ПереместитьНаСкладРазбора Тогда 
		ТипДокумента = "ПоступлениеТоваровОтХранителя";
	Иначе
		ТипДокумента = "ПередачаТоваровХранителю";
	КонецЕсли;
	
	ИмяОжидаемогоТипа = "ДокументСсылка." + ТипДокумента;
	Если ДокументНайден
		И ТипЗнч(ДокументСсылка) <> Тип(ИмяОжидаемогоТипа) Тогда
		
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'По акту уже создан документ %1,
		| который необходимо удалить из базы перед перепроведением'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ДокументСсылка));
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	// >> 10.06.2024 Вдовенко С.А., КРОК, A2105505-2659
	
	Если ДокументНайден Тогда
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		КР_ОбщегоНазначениеСервер.ДокументОбъектОчистить(ДокументОбъект); 
		
		ДокументОбъект.ПометкаУдаления = Ложь;  
		
	Иначе
		ДокументОбъект = Документы[ТипДокумента].СоздатьДокумент(); 
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ЭтотОбъект, , "Номер");
	ДокументОбъект.Дата = Дата;       
	ДокументОбъект.ДокументОснование = Ссылка; 

	ДокументОбъект.Склад = ВыборкаСсылок.Склад;

	Если ТипДокумента = "ПередачаТоваровХранителю" Тогда 
		ДокументОбъект.ПередачаПоЗаказам = Ложь;       
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;  
		ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		ДокументОбъект.ВернутьМногооборотнуюТару = Ложь;
		ДокументОбъект.ДатаВозвратаМногооборотнойТары = Дата;
		ДокументОбъект.ВидыЗапасовУказаныВручную = Ложь;
		ДокументОбъект.КоэффициентПересчетаРегл = 1;
		ДокументОбъект.Исправление = Ложь;  
	Иначе 	
		ДокументОбъект.ПоРаспоряжениям = Ложь;       
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера;  
		ДокументОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
		ДокументОбъект.Исправление = Ложь;  
	КонецЕсли;	

	// Выберем товары по ссылке
	ОтборПоДействию = Новый Структура("Действие", ВыборкаСсылок.Действие);
	ВыборкаТовары.Сбросить();
	Пока ВыборкаТовары.НайтиСледующий(ОтборПоДействию) Цикл  
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
		
	КонецЦикла;	  
	
	Если ТипДокумента = "ПоступлениеТоваровОтХранителя" Тогда 
		
		// Копия КР_УТ10_УТ11_ЗагрузкаДанныхСервер.ЗаполнитьНомераГТД
		Если Не ЗаполнитьНомераГТД(ДокументОбъект.Товары, ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда 
		
			ТекстСообщения = НСтр("ru = 'При заполнении документа не удалось подобрать ГТД'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Возврат;
			
		КонецЕсли;

	КонецЕсли;	
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда 
		Отказ = Истина;	
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение); 
	
	Если ДокументНайден Тогда 
				
		ТекстОповещения = НСтр("ru = '%1 актуализирован'");  
		ТекстОповещения = СтрШаблон(ТекстОповещения, ДокументОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстОповещения, ДокументОбъект);
		
	КонецЕсли;     
		
КонецПроцедуры // >> 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595

// << 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595
Процедура КР_ПометитьНаУдалениеДокументыВыборки(ВыборкаСсылок)
	
	Пока ВыборкаСсылок.Следующий() Цикл 
		Если ВыборкаСсылок.ПометкаУдаления Тогда  
			Продолжить;
		КонецЕсли;    
		ДокументСсылка = ВыборкаСсылок.Ссылка;
		Объект = ДокументСсылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);    

		ТекстОповещения = НСтр("ru = '%1 помечен на удаление'");  
		ТекстОповещения = СтрШаблон(ТекстОповещения, ДокументСсылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстОповещения, ДокументСсылка);
		
	КонецЦикла;	
	
КонецПроцедуры // >> 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595

// << 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595
Функция ЗаполнитьНомераГТД(Таблица, Организация, ДатаЗаполнения)

	// Метод взят из КР_УТ10_УТ11_ЗагрузкаДанныхСервер
	ЕстьОшибкиЗаполненияНомераГТД = Ложь;     
	
	// Разница, удалить если не требуется
	//ТребуетсяЗаполнениеГТД = ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД");	
	//Если Не ТребуетсяЗаполнениеГТД Тогда 
	//	Возврат ЕстьОшибкиЗаполненияНомераГТД;	
	//КонецЕсли;  
	
	Запрос = Новый Запрос(ТекстЗапросаПолучитьНомераГТДДляЗаполненияВТаблице());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
		
		Если ВыборкаДетальныеЗаписи.ЕстьНомерГТД Тогда 
			Таблица[ВыборкаДетальныеЗаписи.ИндексСтроки].НомерГТД = ВыборкаДетальныеЗаписи.НомерГТД;	
		Иначе
			ЕстьОшибкиЗаполненияНомераГТД = Истина;		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Не ЕстьОшибкиЗаполненияНомераГТД;
	
КонецФункции // >> 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595

#Область КР_ТекстыЗапросов

// << 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595
Функция КР_ТекстЗапросаДанныеЗаполненияТехническихДокументов()
	
	Возврат
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	СУММА(ТаблицаТовары.Количество - ТаблицаТовары.КоличествоПоДокументу) КАК РазницаКоличества
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Проведен
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано)
	|	И ТаблицаТовары.Количество - ТаблицаТовары.КоличествоПоДокументу <> 0
	|	И ТаблицаТовары.Действие В (ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьСоСкладаРазбора), ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьНаСкладРазбора))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТовары.Количество - ТаблицаТовары.КоличествоПоДокументу) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.РазницаКоличества < 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьНаСкладРазбора)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьСоСкладаРазбора)
	|	КОНЕЦ КАК Действие,
	|	&СкладРазбораРасхождений КАК Склад,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.РазницаКоличества < 0
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК МодификаторЗнака,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.РазницаКоличества КАК РазницаКоличества
	|ПОМЕСТИТЬ ТоварыСоСкладами
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыСоСкладами.Действие КАК Действие,
	|	ТоварыСоСкладами.Склад КАК Склад
	|ПОМЕСТИТЬ ДействияКВыполнению
	|ИЗ
	|	ТоварыСоСкладами КАК ТоварыСоСкладами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьНаСкладРазбора) КАК Действие,
	|	Т.Ссылка КАК Ссылка,
	|	Т.Склад КАК Склад,
	|	Т.Проведен КАК Проведен,
	|	Т.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ СуществующиеДокументы
	|ИЗ
	|	Документ.ПередачаТоваровХранителю КАК Т
	|ГДЕ
	|	Т.ДокументОснование = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьСоСкладаРазбора),
	|	Т.Ссылка,
	|	Т.Склад,
	|	Т.Проведен,
	|	Т.ПометкаУдаления
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя КАК Т
	|ГДЕ
	|	Т.ДокументОснование = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Действие КАК Действие,
	|	Т.Склад КАК Склад,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	Т.МодификаторЗнака * Т.РазницаКоличества КАК Количество,
	|	Т.МодификаторЗнака * Т.РазницаКоличества КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыСоСкладами КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДействияКВыполнению.Действие, НЕОПРЕДЕЛЕНО) КАК Действие,
	|	ДействияКВыполнению.Склад КАК Склад,
	|	ЕСТЬNULL(Т.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
	|	ЕСТЬNULL(Т.ПометкаУдаления, ИСТИНА) КАК ПометкаУдаления
	|ИЗ
	|	СуществующиеДокументы КАК Т
	|		ПОЛНОЕ СОЕДИНЕНИЕ ДействияКВыполнению КАК ДействияКВыполнению
	|		ПО Т.Действие = ДействияКВыполнению.Действие
	|			И Т.Склад = ДействияКВыполнению.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(Т.Проведен, ЛОЖЬ) УБЫВ
	|ИТОГИ ПО
	|	Действие"
	;
	
КонецФункции // >> 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595

// << 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595
Функция ТекстЗапросаПолучитьНомераГТДДляЗаполненияВТаблице()

	Возврат 
	"ВЫБРАТЬ
	|	Т.НомерСтроки - 1 КАК ИндексСтроки,
	|	Т.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИндексСтроки КАК ИндексСтроки,
	|	Т.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ НоменклатураСГТД
	|ИЗ
	|	СписокНоменклатуры КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТНоменклатура
	|		ПО Т.Номенклатура = ТНоменклатура.Ссылка
	|			И (ТНоменклатура.ВестиУчетПоГТД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ДатаПоступления КАК ДатаПоступления,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ БлижайшиеДатыПоступленияТоваровОрганизаций
	|ИЗ
	|	РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК Т
	|ГДЕ
	|	Т.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) 
	|	И Т.ВидЗапасов.Организация = &Организация
	|	И Т.Номенклатура В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.Номенклатура
	|			ИЗ
	|				НоменклатураСГТД КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Т.ДатаПоступления) КАК ДатаПоступления,
	|	Т.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ МаксимальныеДатыПоступленияТоваровОрганизаций
	|ИЗ
	|	БлижайшиеДатыПоступленияТоваровОрганизаций КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(Т.НомерГТД) КАК НомерГТД
	|ПОМЕСТИТЬ СписокГТД
	|ИЗ
	|	БлижайшиеДатыПоступленияТоваровОрганизаций КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДатыПоступленияТоваровОрганизаций КАК М
	|		ПО Т.ДатаПоступления = М.ДатаПоступления
	|			И Т.Номенклатура = М.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСГТД.ИндексСтроки КАК ИндексСтроки,
	|	НЕ СписокГТД.НомерГТД ЕСТЬ NULL КАК ЕстьНомерГТД,
	|	СписокГТД.НомерГТД КАК НомерГТД
	|ИЗ
	|	НоменклатураСГТД КАК НоменклатураСГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокГТД КАК СписокГТД
	|		ПО НоменклатураСГТД.Номенклатура = СписокГТД.Номенклатура"
	;
	
КонецФункции // >> 15.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2595

#КонецОбласти

#КонецОбласти    

#КонецЕсли
