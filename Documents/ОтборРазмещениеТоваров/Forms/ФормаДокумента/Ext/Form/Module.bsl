#Область ОписаниеПеременных

&НаКлиенте
Перем ПропуститьВопросПередЗаписью; // Для отработки записи после вопроса

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Отбор);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Размещение);
		
		Элементы.ГруппаИнформация.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	Иначе	
		Если Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТоварыРазмещение;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТоварыОтбор;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВидОперации.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Ссылка)
										  Или ЗначениеЗаполнено(Объект.Распоряжение);
	// Выбирать из списка можно только "Размещение" или "Перемещение" и только в новых документах.
	Элементы.ВидОперации.РежимВыбораИзСписка = Не Элементы.ВидОперации.ТолькоПросмотр;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительности.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
	// Задача #3069
	злСобытияФормОценкаПроизводительностиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыРазмещение,ПараметрыЗаполненияРеквизитов);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыОтбор,ПараметрыЗаполненияРеквизитов);
	
	ПересчитатьВесОбъемВСтрокахТЧ();
	Элементы.ГруппаИнформация.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// << 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751  
	КР_УстановитьЗаголовокФормы();
	// >> 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751  

	// << 08.08.2024 Петухов А.В., Фактор, #4547
	КР_ЗаполнитьМестаРазмещения(Истина,Истина,Истина);
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	ЗаполненФактВОтборе = Объект.ТоварыОтбор.Количество() = 0
		Или Объект.ТоварыОтбор.Итог("КоличествоУпаковокОтобрано") <> 0;
	ЗаполненФактВРазмещении = Объект.ТоварыРазмещение.Количество() = 0
		Или Объект.ТоварыРазмещение.Итог("КоличествоУпаковокРазмещено") <> 0;
	
	Если ПропуститьВопросПередЗаписью = Истина
		Или Отказ
		Или Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками")
		Или ЗаполненФактВОтборе И ЗаполненФактВРазмещении
		Или ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		Или Не Объект.Проведен
		Или (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Перемещение")
			И (ЗаполненФактВОтборе Или ЗаполненФактВРазмещении)) Тогда
		ПропуститьВопросПередЗаписью = Ложь;  
		
		// << 09.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		Если Не Отказ
			И КР_ЗаданВопросОСозданииКороба(ПараметрыЗаписи) Тогда 
			Отказ = Истина;
		КонецЕсли;	
		// >> 09.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Не ЗаполненФактВОтборе И Не ЗаполненФактВРазмещении Тогда
		ТекстВопроса = НСтр("ru='Во всех строках табличной части ""Товары (отбор)"" не заполнено количество ""Отобрано"", табличной части ""Товары (размещение)"" - количество ""Размещено"". Все равно записать документ?'");
	ИначеЕсли Не ЗаполненФактВОтборе Тогда
		ТекстВопроса = НСтр("ru='Во всех строках табличной части ""Товары (отбор)"" не заполнено количество ""Отобрано"". Все равно записать документ?'");
	ИначеЕсли Не ЗаполненФактВРазмещении Тогда
		ТекстВопроса = НСтр("ru='Во всех строках табличной части ""Товары (размещение)"" не заполнено количество ""Размещено"". Все равно записать документ?'");
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Записать", НСтр("ru = 'Записать'"));
	Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект), ТекстВопроса, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Записать" Тогда
		ПропуститьВопросПередЗаписью = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ОтборРазмещениеТоваров", ПараметрыЗаписи, Объект.Ссылка);
	Элементы.ВидОперации.ТолькоПросмотр = Истина;

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТоварыОтбор Тогда
			НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.Отбор, ВыбранноеЗначение);
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТоварыРазмещение Тогда
			НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.Размещение, ВыбранноеЗначение);
		Иначе
			ТекстСообщения = НСтр("ru = 'Активируйте табличную часть'");
			ПоказатьПредупреждение(Неопределено, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Назначения.Форма.ФормаВыбора" Тогда
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТоварыОтбор Тогда
			Элементы.ТоварыОтбор.ТекущиеДанные.Назначение = ВыбранноеЗначение;
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТоварыРазмещение Тогда
			Элементы.ТоварыРазмещение.ТекущиеДанные.Назначение = ВыбранноеЗначение;
	КонецЕсли;

	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// << 11.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
	Если ПараметрыЗаписи.Свойство("КР_СоздатьКороб") Тогда 
		ТекущийОбъект.ДополнительныеСвойства.Вставить("КР_СоздатьКороб");   
		ТекущийОбъект.КР_Короб = Документы.УпаковочныйЛист.ПолучитьСсылку();
		ТекущийОбъект.КР_ИспользоватьКороб = Истина;
	КонецЕсли;
	// >> 11.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьПоВидуОперации();
	
	// << 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751  
	КР_УстановитьПомещениеПоУмолчанию();
	// >> 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	ПомещениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	СтатусПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВыполненияПриИзменении(Элемент)
	
	Если Объект.ДатаНачалаВыполнения > Объект.ДатаОкончанияВыполнения Тогда
		Объект.ДатаОкончанияВыполнения = Объект.ДатаНачалаВыполнения + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВыполненияПриИзменении(Элемент)
	
	Если Объект.ДатаНачалаВыполнения > Объект.ДатаОкончанияВыполнения Тогда
		Объект.ДатаНачалаВыполнения = Объект.ДатаОкончанияВыполнения - 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыотбор

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыОтбор.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокСуффикс","Отобрано");
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Отобрано";
	Иначе
		Суффикс = "";
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ТоварыОтбор.ТекущиеДанные;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Отобрано";
	Иначе
		Суффикс = "";
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Суффикс);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокВыполненоПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ТоварыОтбор.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Отобрано");
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Отобрано";
	Иначе
		Суффикс = "";
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	Перем ТекущаяСтрока;
	Перем СтруктураДействий;

	ТекущаяСтрока = Элементы.ТоварыОтбор.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Отобрано";
	Иначе
		Суффикс = "";
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
 	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Отобрано");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
 	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.Отбор));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	// << 08.08.2024 Петухов А.В., Фактор, #4547
	ТекущаяСтрока.КР_ЭтапЗаполнен = Ложь;
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтборСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("Отбор",Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтборСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ТоварыОтбор.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ТоварыОтбор.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.Отбор, ВыбранноеЗначение);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыразмещение

&НаКлиенте
Процедура ТоварыРазмещениеНоменклатураПриИзменении(Элемент)
	Перем ТекущаяСтрока;
	Перем СтруктураДействий;
	
	ТекущаяСтрока = Элементы.ТоварыРазмещение.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Размещено";
	Иначе
		Суффикс = "";
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
 	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Размещено");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	
 	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.Размещение));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ТоварыРазмещение"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	// << 08.08.2024 Петухов А.В., Фактор, #4547
	ТекущаяСтрока.КР_ЭтапЗаполнен = Ложь;
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмещениеУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыРазмещение.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокСуффикс","Размещено");
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Размещено";
	Иначе
		Суффикс = "";
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмещениеКоличествоУпаковокПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыРазмещение.ТекущиеДанные;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Размещено";
	Иначе
		Суффикс = "";
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Суффикс);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмещениеКоличествоУпаковокРазмещеноПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыРазмещение.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Размещено");
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Размещено";
	Иначе
		Суффикс = "";
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмещениеСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("Размещение",Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмещениеСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ТоварыРазмещение.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ТоварыРазмещение.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.Размещение, ВыбранноеЗначение);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


&НаКлиенте
Процедура ТоварыСкопироватьТоварыКОтбору(Команда)
	ОчиститьСообщения();
	
	Если Объект.ТоварыОтбор.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Укажите товары к отбору.'");
		
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если ДокументНеПроведен(Новый ОписаниеОповещения("ТоварыСкопироватьТоварыКОтборуПослеПроверкиПроведен", ЭтотОбъект)) Тогда
		ТоварыСкопироватьТоварыКОтборуПослеПроверкиПроведен(КодВозвратаДиалога.Да, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкопироватьТоварыКОтборуПослеПроверкиПроведен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтменилиПроведение() Тогда
		Если Объект.ТоварыРазмещение.Количество() = 0 Тогда
			СкопироватьТовары("ТоварыОтбор");
		Иначе
			ТекстВопроса = НСтр("ru='Перед заполнением табличная часть ""Товары (размещение)"" будет очищена. Продолжить?'");		
		    ПоказатьВопрос(Новый ОписаниеОповещения("ТоварыСкопироватьТоварыКОтборуЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкопироватьТоварыКОтборуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СкопироватьТовары("ТоварыОтбор");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодобратьЯчейкиРазмещения(Команда)
	
	ОчиститьСообщения();    
	
	Если Объект.ТоварыРазмещение.Количество() > 0 Тогда
		Если ДокументНеПроведен(Новый ОписаниеОповещения("ТоварыПодобратьЯчейкиРазмещенияПослеПроверкиПроведен", ЭтотОбъект)) Тогда
			ТоварыПодобратьЯчейкиРазмещенияПослеПроверкиПроведен(КодВозвратаДиалога.Да, Новый Структура);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='Укажите товары к размещению.'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодобратьЯчейкиРазмещенияПослеПроверкиПроведен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтменилиПроведение() Тогда
		ТекстВопроса = НСтр("ru='В ходе подбора данные о ячейках в табличной части ""Товары (размещение)"" будут перезаполнены. Продолжить?'"); 
		ПоказатьВопрос(Новый ОписаниеОповещения("ТоварыПодобратьЯчейкиРазмещенияЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодобратьЯчейкиРазмещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
		// Задача #3069
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.ЗамерВремени(
			"Документ.ОтборРазмещениеТоваров.ФормаДокумента.Команда.ТоварыПодобратьЯчейкиРазмещения");
		// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
		
		РазместитьТоварыСервер("ТоварыРазмещение");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодобратьЯчейкиОтбора(Команда)
	ОчиститьСообщения();
	
	// << 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЯчейкиОднозначноеРазмещение", 
		Команда.Имя = "КР_ТоварыПодобратьЯчейкиОтбораОднозначноеРазмещение");
	// >> 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
	
	Если Объект.ТоварыОтбор.Количество() > 0 Тогда
		
		Если ДокументНеПроведен(Новый ОписаниеОповещения("ТоварыПодобратьЯчейкиОтбораПослеПроверкиПроведен", ЭтотОбъект
				// << 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
				, ДополнительныеПараметры
				// >> 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
			)) Тогда
			ТоварыПодобратьЯчейкиОтбораПослеПроверкиПроведен(КодВозвратаДиалога.Да, 
				// << 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
				//Новый Структура
				ДополнительныеПараметры
				// >> 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
			);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='Укажите товары к отбору.'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодобратьЯчейкиОтбораПослеПроверкиПроведен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтменилиПроведение() Тогда
		ТекстВопроса = НСтр("ru='В ходе подбора данные о ячейках в табличной части ""Товары (размещение)"" будут перезаполнены. Продолжить?'"); 
		ПоказатьВопрос(Новый ОписаниеОповещения("ТоварыПодобратьЯчейкиОтбораЗавершение", ЭтотОбъект
			// << 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
			, ДополнительныеПараметры
			// >> 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
		), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодобратьЯчейкиОтбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// --> Евлахов Игорь Николаевич (Начало) 23.08.2023
		// Задача #3069
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.ЗамерВремени(
			"Документ.ОтборРазмещениеТоваров.ФормаДокумента.Команда.ТоварыПодобратьЯчейкиОтбора");
		// <-- Евлахов Игорь Николаевич (Конец) 23.08.2023
		
		ОтобратьТоварыСервер("ТоварыОтбор"
			// << 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
			, ДополнительныеПараметры
			// >> 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
		);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоРазмещено(Команда)
	
	ОчиститьСообщения();
	ТекстВопроса = НСтр("ru='Заполнить размещенное количество по количеству к размещению во всей табличной части ""Товары (размещение)""?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьКоличествоРазмещеноЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоРазмещеноЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;	
    КонецЕсли;
    ЗаполнитьКоличествоВыполненоКлиент("ТоварыРазмещение");

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоОтобрано(Команда)
	
	ОчиститьСообщения();
	ТекстВопроса = НСтр("ru='Заполнить отобранное количество по количеству к отбору во всей табличной части ""Товары (отбор)""?'");
	Ответ = Неопределено;
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьКоличествоОтобраноЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоОтобраноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	ЗаполнитьКоличествоВыполненоКлиент("ТоварыОтбор");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЯчейкуВоВсехСтрокахОтбор(Команда)
	ПараметрыФормы = Новый Структура("Склад,Помещение", Объект.Склад, Объект.Помещение);
	Ячейка = Неопределено;

	// << 18.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
	Если КР_ЭтоАдресныйСкладБезордернойОтгрузки(Объект.Склад) Тогда
		ПараметрыФормы.Помещение = ПредопределенноеЗначение("Справочник.СкладскиеПомещения.ПустаяСсылка");
	КонецЕсли;	
	// >> 18.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-751

	// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", Команда.Имя);
	// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417

	ОткрытьФорму("Документ.ОтборРазмещениеТоваров.Форма.ФормаУказанияЯчейки",ПараметрыФормы,ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ЗаполнитьЯчейкуВоВсехСтрокахОтборЗавершение", ЭтотОбъект
		// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
		, ДополнительныеПараметры
		// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
		), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЯчейкуВоВсехСтрокахОтборЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ячейка = Результат;  
	
	// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
	Если ДополнительныеПараметры.ИмяКоманды = "КР_ЗаполнитьЯчейкуВВыделенныхСтрокахОтбор" Тогда 
		ВыделенныеСтроки = Элементы.ТоварыОтбор.ВыделенныеСтроки;
	Иначе     
		ВыделенныеСтроки = Неопределено;
	КонецЕсли;	
	// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
    
    Если ЗначениеЗаполнено(Ячейка) Тогда
        ЗаполнитьЯчейкуВТЧ("ТоварыОтбор", Ячейка  
		// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
		, ВыделенныеСтроки
		// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
		);	
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЯчейкуВоВсехСтрокахРазмещение(Команда)
	ПараметрыФормы = Новый Структура("Склад,Помещение", Объект.Склад, Объект.Помещение);
	Ячейка = Неопределено;
	
	// << 23.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2414
	Если КР_ЭтоАдресныйСкладБезордернойОтгрузки(Объект.Склад) Тогда
		ПараметрыФормы.Помещение = ПредопределенноеЗначение("Справочник.СкладскиеПомещения.ПустаяСсылка");
	КонецЕсли;	
	// >> 23.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2414

	// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", Команда.Имя);
	// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
	
	ОткрытьФорму("Документ.ОтборРазмещениеТоваров.Форма.ФормаУказанияЯчейки",ПараметрыФормы,ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ЗаполнитьЯчейкуВоВсехСтрокахРазмещениеЗавершение", ЭтотОбъект
		// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
		, ДополнительныеПараметры
		// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
		), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЯчейкуВоВсехСтрокахРазмещениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ячейка = Результат;
	
	// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
	Если ДополнительныеПараметры.ИмяКоманды = "КР_ЗаполнитьЯчейкуВВыделенныхСтрокахРазмещение" Тогда 
		ВыделенныеСтроки = Элементы.ТоварыРазмещение.ВыделенныеСтроки;
	Иначе     
		ВыделенныеСтроки = Неопределено;
	КонецЕсли;	
	// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
    
    Если ЗначениеЗаполнено(Ячейка) Тогда
        ЗаполнитьЯчейкуВТЧ("ТоварыРазмещение", Ячейка
		// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
		, ВыделенныеСтроки
		// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
		);	
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиТоваровВЯчейках(Команда)
	
	Если ДокументНеПроведен(Новый ОписаниеОповещения("ЗаполнитьОстаткамиТоваровВЯчейкахПослеПроверкиПроведен", ЭтотОбъект)) Тогда
		ЗаполнитьОстаткамиТоваровВЯчейкахПослеПроверкиПроведен(КодВозвратаДиалога.Да, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиТоваровВЯчейкахПослеПроверкиПроведен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТоварыРазмещение.Количество() = 0 Тогда
		ЗаполнитьОстаткамиТоваровВЯчейкахОткрытьФормуПодбора(КодВозвратаДиалога.Да, Новый Структура);
	Иначе
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть ""Товары (размещение)"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьОстаткамиТоваровВЯчейкахОткрытьФормуПодбора", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиТоваровВЯчейкахОткрытьФормуПодбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура("Склад,Помещение", Объект.Склад, Объект.Помещение);
		АдресЯчеек = Неопределено;  
		// << 18.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
		Если КР_ЭтоАдресныйСкладБезордернойОтгрузки(Объект.Склад) Тогда
			ПараметрыФормы.Помещение = ПредопределенноеЗначение("Справочник.СкладскиеПомещения.ПустаяСсылка");
		КонецЕсли;	
		// >> 18.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
		ОткрытьФорму("Документ.ОтборРазмещениеТоваров.Форма.ФормаПодбораЯчеек",ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьОстаткамиТоваровВЯчейкахЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиТоваровВЯчейкахЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресЯчеек  = Результат;
    
    Если ЗначениеЗаполнено(АдресЯчеек) Тогда
        ЗаполнитьТЧТоварыОтборПоОстаткамТоваров(АдресЯчеек);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
	ДаннныеТСДДляРежимаОтладки = КР_РаботаСТСД.ПолучитьДаннныеТСДДляРежимаОтладки("Строка");
	Если ДаннныеТСДДляРежимаОтладки <> Неопределено Тогда
		// Подменяем типовую функцию по работе с ТСД "МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД"
		ОбработатьШтрихкоды(ДаннныеТСДДляРежимаОтладки);
		Возврат;
	КонецЕсли;
	// >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОтборУпаковка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыОтбор.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыОтбор.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРазмещениеУпаковка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыРазмещение.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыРазмещение.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ТоварыОтборХарактеристика",
																		     "Объект.ТоварыОтбор.ХарактеристикиИспользуются");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ТоварыРазмещениеХарактеристика",
																		     "Объект.ТоварыРазмещение.ХарактеристикиИспользуются");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары", 
																     "ТоварыОтборСерия", 
																     "Объект.ТоварыОтбор.СтатусУказанияСерий",
																	 "Объект.ТоварыОтбор.ТипНоменклатуры");

	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОтборСерия.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыОтбор.СтатусУказанияСерий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 3;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыОтбор.КоличествоУпаковокОтобрано");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары", 
																     "ТоварыРазмещениеСерия", 
																     "Объект.ТоварыРазмещение.СтатусУказанияСерий",
																	 "Объект.ТоварыРазмещение.ТипНоменклатуры");

	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРазмещениеСерия.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыРазмещение.СтатусУказанияСерий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 3;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыРазмещение.КоличествоУпаковокРазмещено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОтборУпаковка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыОтбор.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыОтбор.ТипИзмеряемойВеличины");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРазмещениеУпаковка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыРазмещение.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыРазмещение.ТипИзмеряемойВеличины");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРазмещениеВес.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыРазмещение.ВесУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРазмещениеОбъем.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыРазмещение.ОбъемУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРазмещениеЕдиницаИзмеренияВеса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыРазмещение.ВесУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРазмещениеЕдиницаИзмеренияОбъема.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыРазмещение.ОбъемУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОтборВес.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыОтбор.ВесУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОтборОбъем.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыОтбор.ОбъемУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОтборЕдиницаИзмеренияВеса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыОтбор.ВесУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОтборЕдиницаИзмеренияОбъема.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыОтбор.ОбъемУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ТоварыОтборНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ТоварыОтбор.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ТоварыРазмещениеНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ТоварыРазмещение.Упаковка");

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма, 
		"ТоварыРазмещениеНазначение",
		"Объект.ТоварыРазмещение.ТипНоменклатуры");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма, 
		"ТоварыОтборНазначение",
		"Объект.ТоварыОтбор.ТипНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтборРазмещениеТоваров);
	
	// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	КР_ПриЧтенииСозданииНаСервере();
	// >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751  
	
	УстановитьВидимостьПоВидуОперации();
	НастроитьПоСтатусу();

	СтруктураУстанавливаемыхПараметров = Новый Структура;
	СтруктураУстанавливаемыхПараметров.Вставить("Склад",Объект.Склад);
	
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураУстанавливаемыхПараметров);
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыОтбор, ПараметрыЗаполненияРеквизитов);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыРазмещение, ПараметрыЗаполненияРеквизитов);
	
	ПересчитатьВесОбъемВСтрокахТЧ();
	Элементы.ГруппаИнформация.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	
	Элементы.Помещение.Видимость = 
	    // << 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		// Видимость может быть изменена выше в УстановитьВидимостьПоВидуОперации "не типовой" логикой 
		Элементы.Помещение.Видимость И
		// >> 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		СкладыСервер.ИспользоватьСкладскиеПомещения(Объект.Склад,Объект.Дата);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПомещениеПриИзмененииСервер()
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение", Объект.Склад, Объект.Помещение));
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор Тогда
		Объект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Объект.Склад, Объект.Помещение);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда
		Объект.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Объект.Склад, Объект.Помещение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтборРазмещениеТоваров);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Отбор);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Размещение);
	
	// Дата начала заполняется при переводе в статус "В работе" (или любой последующий, если этот статус пропустили)
	// Дата окончания заполняется при переводе в статусы "Выполнено ...".
	Если ЗначениеЗаполнено(Объект.Статус)  
		// << 08.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
		И Не КР_ЭтоОтборАдресныйСкладБезордернойОтгрузки()
		И Не КР_ЭтоРазмещениеКакПриходныйОрдер()
		// >> 08.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
		И Объект.Статус <> Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаНачалаВыполнения) Тогда
			Объект.ДатаНачалаВыполнения = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если Объект.Статус <> Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе Тогда
			
			Объект.ДатаОкончанияВыполнения = ТекущаяДатаСеанса();
			
			Если Объект.ДатаНачалаВыполнения > Объект.ДатаОкончанияВыполнения Тогда
				Объект.ДатаНачалаВыполнения = Объект.ДатаОкончанияВыполнения - 1;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ДатаОкончанияВыполнения)
			И Объект.ДатаНачалаВыполнения > Объект.ДатаОкончанияВыполнения Тогда
			
			Объект.ДатаОкончанияВыполнения = Объект.ДатаНачалаВыполнения + 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьВесОбъемВСтрокахТЧ();
	
	НастроитьПоСтатусу();
	
	// << 03.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	КР_УстановитьВидимостьДоступностьЭлементов();
	// >> 03.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751     

	// << 08.08.2024 Петухов А.В., Фактор, #4547
	КР_ЗаполнитьМестаРазмещения(Истина,Истина,Истина);
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение", Объект.Склад, Объект.Помещение));
	
	ИспользоватьСкладскиеПомещения = СкладыСервер.ИспользоватьСкладскиеПомещения(Объект.Склад,Объект.Дата);
	Если Не ИспользоватьСкладскиеПомещения Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор Тогда
			Объект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Объект.Склад, Объект.Помещение);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда
			Объект.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Объект.Склад, Объект.Помещение);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтборРазмещениеТоваров);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Отбор);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Размещение);
	
	Элементы.Помещение.Видимость = ИспользоватьСкладскиеПомещения;

	// << 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751  
	КР_УстановитьПомещениеПоУмолчанию();    
	КР_УстановитьВидимостьДоступностьЭлементов();
	// >> 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

	// << 08.08.2024 Петухов А.В., Фактор, #4547
	КР_ЗаполнитьМестаРазмещения(Истина,Истина,Истина);
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатурыОтбор()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.ТоварыОтбор.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий("Отбор",,ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатурыРазмещение()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.ТоварыРазмещение.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий("Размещение",,ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий[ИмяТЧ],Текст, ТекущиеДанные) Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение",
														ЭтотОбъект,
														Новый Структура("ИмяТЧ,ПараметрыФормыУказанияСерий", ИмяТЧ,ПараметрыФормыУказанияСерий));

		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,
					ПараметрыФормыУказанияСерий,
					ЭтаФорма,
					,
					,
					,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
     
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ДополнительныеПараметры.ПараметрыФормыУказанияСерий,ДополнительныеПараметры.ИмяТЧ, КэшированныеЗначения);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ИмяТЧ, КэшированныеЗначения)
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	Действия.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	Действия.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	Действия.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	Действия.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	Действия.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	Действия.Вставить("ПересчитатьВесОбъем");
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий",
																				Объект.Склад, ПараметрыУказанияСерий[ИмяТЧ]));
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий[ИмяТЧ],ПараметрыФормыУказанияСерий,Действия,КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ], ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТоварыОтбор Тогда
		ИмяТЧ             = "Отбор";
		ИмяТабличнойЧасти = "ТоварыОтбор";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТоварыРазмещение Тогда
		ИмяТЧ             = "Размещение";
		ИмяТабличнойЧасти = "ТоварыРазмещение";
	Иначе
		Возврат;
	КонецЕсли;

	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Если ИмяТЧ = "Отбор" Тогда
			Суффикс = "Отобрано";
		Иначе
			Суффикс = "Размещено";
		КонецЕсли;
	Иначе
		Суффикс = "";
	КонецЕсли;
	
	// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
	КР_Отказ = Ложь;
	ДанныеЯчеек = КР_РаботаСТСДКлиент.ОбработатьШтрихкодыСЯчейками(ДанныеШтрихкодов, Объект.Склад, КР_Отказ);
	Если КР_Отказ Тогда
		Возврат;
	КонецЕсли;
	// >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Суффикс);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий[ИмяТЧ]));
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками, Суффикс);

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий[ИмяТЧ];
	СтруктураДействий.ДействияСНеизвестнымиШтрихкодами       = "НетДействий";
	СтруктураДействий.ИмяТЧ                                  = ИмяТабличнойЧасти;
	СтруктураДействий.ТолькоТовары                           = Истина;
		
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		Если НРег(ИмяТЧ) = НРег("Отбор") Тогда
			ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатурыОтбор", 0.1, Истина);
		ИначеЕсли НРег(ИмяТЧ) = НРег("Размещение") Тогда
			ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатурыРазмещение", 0.1, Истина);
		КонецЕсли;
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		ТаблицаФормыТовары = Элементы[ИмяТабличнойЧасти]; // ТаблицаФормы
		ТаблицаФормыТовары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;		
	КонецЕсли;
	
	// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
	// 18.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2402
	КР_РаботаСТСДКлиент.ОбработатьДанныеЯчеек(ДанныеЯчеек, Объект[ИмяТабличнойЧасти], КэшированныеЗначения);
	// >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураДействий,КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура РазместитьТоварыСервер(ИмяИсточника)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.РазместитьТовары(ИмяИсточника);
	
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыОтбор, ПараметрыЗаполненияРеквизитов);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыРазмещение, ПараметрыЗаполненияРеквизитов);
	
	ПересчитатьВесОбъемВСтрокахТЧ();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Отбор);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Размещение);
	
	// << 08.08.2024 Петухов А.В., Фактор, #4547
	КР_ЗаполнитьМестаРазмещения(Ложь,Истина,Истина);
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
КонецПроцедуры
                                                                 
&НаСервере
Процедура ОтобратьТоварыСервер(ИмяИсточника
		// << 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
		, ДополнительныеПараметры = Неопределено
		// >> 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
	)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ОтобратьТовары(ИмяИсточника
		// << 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
		, ДополнительныеПараметры
		// >> 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
	);
	
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыОтбор, ПараметрыЗаполненияРеквизитов);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыРазмещение, ПараметрыЗаполненияРеквизитов);
	
	ПересчитатьВесОбъемВСтрокахТЧ();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Отбор);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Размещение);
	
	// << 08.08.2024 Петухов А.В., Фактор, #4547
	КР_ЗаполнитьМестаРазмещения(Истина,Ложь,Истина);
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
КонецПроцедуры

&НаКлиенте
Функция ДокументНеПроведен(ОписаниеОповещения)
	
	Если Не Объект.Проведен 
		// << 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		Или КР_ЭтоРазмещениеКакПриходныйОрдер("КР_ПринятТовар,КР_ТоварРазмещен")
		// >> 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Заполнение возможно только в непроведенном документе, отменить проведение?'"); 
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ОтменилиПроведение()
	
	Если Не Объект.Проведен 
		// << 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		Или КР_ЭтоРазмещениеКакПриходныйОрдер("КР_ПринятТовар,КР_ТоварРазмещен")
		// >> 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
		Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЭтаФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось отменить проведение документа'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Процедура УстановитьВидимостьПоВидуОперации()
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор Тогда
		Элементы.ЗонаПриемки.Видимость 	= Ложь;
		Элементы.ЗонаОтгрузки.Видимость = Истина;
		Элементы.Распоряжение.Видимость = Истина;
		
		Элементы.Страницы.ТекущаяСтраница         = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаТоварыОтбор;
		Элементы.ГруппаТоварыОтбор.Видимость      = Истина;
		Элементы.ГруппаТоварыРазмещение.Видимость = Ложь;
		
		Элементы.ТоварыОтборГруппаТовары.Видимость = Ложь;
		
		СтатусРаспоряжения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Распоряжение, "Статус");
		
		Если СтатусРаспоряжения <> Перечисления.СтатусыРасходныхОрдеров.КОтбору
			И СтатусРаспоряжения <> Перечисления.СтатусыОрдеровНаПеремещение.КОтбору
			// << 08.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
			И СтатусРаспоряжения <> Перечисления.СтатусыВнутреннихЗаказов.КВыполнению 
			// >> 08.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751   
			Тогда
			Элементы.ТоварыОтборПодобратьЯчейки.Доступность = Ложь;
		Иначе
			Элементы.ТоварыОтборПодобратьЯчейки.Доступность = Истина;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда
		Элементы.ЗонаОтгрузки.Видимость = Ложь;
		Элементы.ЗонаПриемки.Видимость 	= Истина;
		Элементы.Распоряжение.Видимость = Ложь;
		
		Элементы.Страницы.ТекущаяСтраница         = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаТоварыРазмещение;
		Элементы.ГруппаТоварыОтбор.Видимость      = Ложь;
		Элементы.ГруппаТоварыРазмещение.Видимость = Истина;
		
		Элементы.ТоварыРазмещениеГруппаТовары.Видимость = Ложь;

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение Тогда
		Элементы.ЗонаОтгрузки.Видимость = Ложь;
		Элементы.ЗонаПриемки.Видимость 	= Ложь;
		Элементы.Распоряжение.Видимость = Ложь;
		
		Элементы.ГруппаТоварыОтбор.Видимость      = Истина;
		Элементы.ГруппаТоварыРазмещение.Видимость = Истина;
		
		Элементы.ТоварыОтборГруппаТовары.Видимость      = Истина;
		Элементы.ТоварыРазмещениеГруппаТовары.Видимость = Истина;
		
	КонецЕсли;                             

	// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	КР_УстановитьВидимостьДоступностьЭлементов()  
	// >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоВыполненоКлиент(ИмяТЧ)
	
	Если СтрНайти(ИмяТЧ,"Отбор") <> 0 Тогда
		ИмяКоличество 			= "КоличествоОтобрано";
		ИмяКоличествоУпаковок 	= "КоличествоУпаковокОтобрано";
	Иначе
		ИмяКоличество 			= "КоличествоРазмещено";
		ИмяКоличествоУпаковок 	= "КоличествоУпаковокРазмещено";
	КонецЕсли;
	
	Для каждого СтрТабл Из Объект[ИмяТЧ] Цикл
		
		СтрТабл[ИмяКоличество] 			= СтрТабл.Количество;
		СтрТабл[ИмяКоличествоУпаковок] 	= СтрТабл.КоличествоУпаковок;
		СтрТабл.Вес						= СтрТабл.КоличествоУпаковок * СтрТабл.ВесУпаковки;
		СтрТабл.Объем					= СтрТабл.КоличествоУпаковок * СтрТабл.ОбъемУпаковки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьТовары(ИмяИсточника)
	
	ОбъектТабличнаяЧасть = Объект[ИмяИсточника]; // ДокументТабличнаяЧасть.ОтборРазмещениеТоваров.ТоварыОтбор, ДокументТабличнаяЧасть.ОтборРазмещениеТоваров.ТоварыРазмещение
	ТаблицаТоваров = ОбъектТабличнаяЧасть.Выгрузить();
		
	ТаблицаТоваров.Свернуть("Номенклатура,Характеристика,Назначение,Упаковка,Серия,ОбъемУпаковки,
							|ВесУпаковки,СтатусУказанияСерий,ХарактеристикиИспользуются,ТипНоменклатуры,Артикул,
							|Вес,Объем,ТипИзмеряемойВеличины,ЕдиницаИзмеренияОбъема,ЕдиницаИзмеренияВеса",
							"Количество,КоличествоУпаковок");
	
	Если ИмяИсточника = "ТоварыРазмещение" Тогда
		Объект.ТоварыОтбор.Загрузить(ТаблицаТоваров);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Отбор);
		// << 08.08.2024 Петухов А.В., Фактор, #4547
		КР_ЗаполнитьМестаРазмещения(Истина, Ложь);
		// >> 08.08.2024 Петухов А.В., Фактор, #4547

	Иначе
		Объект.ТоварыРазмещение.Загрузить(ТаблицаТоваров);	
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Размещение);

		// << 08.08.2024 Петухов А.В., Фактор, #4547
		КР_ЗаполнитьМестаРазмещения(Ложь, Истина);
		// >> 08.08.2024 Петухов А.В., Фактор, #4547
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЯчейкуВТЧ(ИмяТЧ, Ячейка
	// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
	, ВыделенныеСтроки = Неопределено
	// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
	)             
	
	// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417  
	Если ВыделенныеСтроки = Неопределено Тогда 
		СтрокиКОбработке = Объект[ИмяТЧ];
	Иначе
		СтрокиКОбработке = Новый Массив;
		Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл 
			 СтрокиКОбработке.Добавить(Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла;	
	КонецЕсли;
	
	//Для Каждого СтрТабл Из Объект[ИмяТЧ] Цикл    
	Для Каждого СтрТабл Из СтрокиКОбработке Цикл    
		// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
		
		СтрТабл.Ячейка = Ячейка;		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧТоварыОтборПоОстаткамТоваров(АдресЯчеек)
	ТаблицаЯчеек = ПолучитьИзВременногоХранилища(АдресЯчеек);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаЯчеек.Ячейка
	|ПОМЕСТИТЬ ТаблицаЯчеек
	|ИЗ
	|	&ТаблицаЯчеек КАК ТаблицаЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика,
	|	ТоварыВЯчейкахОстатки.Серия,
	|	ТоварыВЯчейкахОстатки.Ячейка,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ТоварыВЯчейкахОстатки.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток
	|		ИНАЧЕ (ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) * &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка В
	|				(ВЫБРАТЬ
	|					ТаблицаЯчеек.Ячейка
	|				ИЗ
	|					ТаблицаЯчеек)) КАК ТоварыВЯчейкахОстатки
	|ГДЕ
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Ячейка.Код,
	|	ТоварыВЯчейкахОстатки.Номенклатура.Наименование,
	|	ТоварыВЯчейкахОстатки.Характеристика.Наименование,
	|	ТоварыВЯчейкахОстатки.Серия.Наименование,
	|	&ТекстЗапросаКоэффициентУпаковки УБЫВ,
	|	Назначение";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыВЯчейкахОстатки.Упаковка",
		"ТоварыВЯчейкахОстатки.Номенклатура"));
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаЯчеек", ТаблицаЯчеек);
	
	Объект.ТоварыОтбор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Отбор);
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыОтбор, ПараметрыЗаполненияРеквизитов);

	ПересчитатьВесОбъемВСтрокахТЧ();

	// << 08.08.2024 Петухов А.В., Фактор, #4547
	КР_ЗаполнитьМестаРазмещения(Истина, Ложь);
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Суффикс)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);
	
КонецФункции

&НаСервере
Процедура НастроитьПоСтатусу()
	Если Объект.Статус <> Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
		Элементы.ТоварыОтборКоличествоУпаковокОтобрано.Видимость       = Ложь;
		Элементы.ТоварыОтборКоличествоУпаковок.Заголовок               = НСтр("ru = 'Количество'");
		Элементы.ТоварыРазмещениеЗаполнитьКоличествоОтобрано.Видимость = Ложь;
		
		Элементы.ТоварыРазмещениеКоличествоУпаковокРазмещено.Видимость = Ложь;
		Элементы.ТоварыРазмещениеКоличествоУпаковок.Заголовок = НСтр("ru = 'Количество'");
		Элементы.ТоварыРазмещениеЗаполнитьКоличествоРазмещено.Видимость = Ложь;
	Иначе
		Элементы.ТоварыОтборКоличествоУпаковокОтобрано.Видимость       = Истина;
		Элементы.ТоварыОтборКоличествоУпаковок.Заголовок               = НСтр("ru = 'К отбору'");
		Элементы.ТоварыРазмещениеЗаполнитьКоличествоОтобрано.Видимость = Истина;
		
		Элементы.ТоварыРазмещениеКоличествоУпаковокРазмещено.Видимость = Истина;
		Элементы.ТоварыРазмещениеКоличествоУпаковок.Заголовок = НСтр("ru = 'К размещению'");
		Элементы.ТоварыРазмещениеЗаполнитьКоличествоРазмещено.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ТоварыОтборВесПриИзменении(Элемент)

	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Отобрано";
	Иначе
		Суффикс = "";
	КонецЕсли;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоВесу",Суффикс);
	
	ТекущаяСтрока = Элементы.ТоварыОтбор.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтборОбъемПриИзменении(Элемент)

	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Отобрано";
	Иначе
		Суффикс = "";
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоОбъему",Суффикс);
	
	ТекущаяСтрока = Элементы.ТоварыОтбор.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмещениеВесПриИзменении(Элемент)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Размещено";
	Иначе
		Суффикс = "";
	КонецЕсли;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоВесу",Суффикс);
	
	ТекущаяСтрока = Элементы.ТоварыРазмещение.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмещениеОбъемПриИзменении(Элемент)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
		Суффикс = "Размещено";
	Иначе
		Суффикс = "";
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоОбъему", Суффикс);
	
	ТекущаяСтрока = Элементы.ТоварыРазмещение.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаСервере
Процедура ПересчитатьВесОбъемВСтрокахТЧ()

	Если Объект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
		Суффикс = "Отобрано";
	Иначе
		Суффикс = "";
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);
	
	Для Каждого СтрокаТЧ Из Объект.ТоварыОтбор Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	Если Объект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
		Суффикс = "Размещено";
	Иначе
		Суффикс = "";
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);
	
	Для Каждого СтрокаТЧ Из Объект.ТоварыРазмещение Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область КР_ДополнительныеПроцедурыИФункции

#Область злОбработчикиКомандФормы

// --> Евлахов Игорь Николаевич (Начало) 05.02.2024
// Задача #3617
&НаКлиенте
Процедура Подключаемый_ПоискПоСпискуШтрихкодовВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкодаСписком(Оповещение);	
	
КонецПроцедуры
// <-- Евлахов Игорь Николаевич (Конец) 05.02.2024

#КонецОбласти

// << 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере
Процедура КР_ПриЧтенииСозданииНаСервере()
	
	#Область злДобавлениеКомандФормы
	
	// --> Евлахов Игорь Николаевич (Начало) 05.02.2024
	// Задача #3617
	ИмяКоманды 	= "злКомандаОтборПоискПоСпискуШтрихкодов";
	ЗаголовокПоискПоСпискуШтрихкодов = НСтр("ru = 'Найти товары по списку штрихкодов'");
	ДействиеПоискПоСпискуШтрихкодов = "Подключаемый_ПоискПоСпискуШтрихкодовВыполнить";
	
	КомандаОтборПоискПоСпискуШтрихкодов = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект, 
																						ИмяКоманды, 
																						ЗаголовокПоискПоСпискуШтрихкодов, 
																						ДействиеПоискПоСпискуШтрихкодов);
	
	КомандаОтборПоискПоСпискуШтрихкодов.Картинка = БиблиотекаКартинок.СоздатьШтрихкод;
	КомандаОтборПоискПоСпискуШтрихкодов.Отображение = ОтображениеКнопки.Картинка;
	КомандаОтборПоискПоСпискуШтрихкодов.ИзменяетСохраняемыеДанные = Истина;
	КомандаОтборПоискПоСпискуШтрихкодов.Подсказка = ЗаголовокПоискПоСпискуШтрихкодов;
	
	ИмяКоманды 	= "злКомандаРазмещениеПоискПоСпискуШтрихкодов";
	
	КомандаРазмещениеПоискПоСпискуШтрихкодов = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект, 
																							ИмяКоманды, 
																							ЗаголовокПоискПоСпискуШтрихкодов, 
																							ДействиеПоискПоСпискуШтрихкодов);
	
	КомандаРазмещениеПоискПоСпискуШтрихкодов.Картинка = БиблиотекаКартинок.СоздатьШтрихкод;
	КомандаРазмещениеПоискПоСпискуШтрихкодов.Отображение = ОтображениеКнопки.Картинка;
	КомандаРазмещениеПоискПоСпискуШтрихкодов.ИзменяетСохраняемыеДанные = Истина;
	КомандаРазмещениеПоискПоСпискуШтрихкодов.Подсказка = ЗаголовокПоискПоСпискуШтрихкодов;
	// <-- Евлахов Игорь Николаевич (Конец) 05.02.2024
	
	#КонецОбласти
	
	#Область КР_ДобавлениеРеквизитовФормы
	
	// --> Евлахов Игорь Николаевич (Начало) 05.02.2024
	// Задача #3617
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект, 
																КомандаОтборПоискПоСпискуШтрихкодов, 
																Элементы.ТоварыОтборКоманднаяПанель,
																Элементы.ТоварыЗагрузитьДанныеИзТСД, 
																"КнопкаФормы");
																
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект, 
																КомандаРазмещениеПоискПоСпискуШтрихкодов, 
																Элементы.ТоварыРазмещениеКоманднаяПанель,
																Элементы.ТоварыРазмещениеЗагрузитьТоварыИзТСДРазмещение, 
																"КнопкаФормы"); 
	// <-- Евлахов Игорь Николаевич (Конец) 05.02.2024
	
	// << 30.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-619
	
	Элементы.ТоварыОтборХарактеристика.УстановитьДействие(
		"ПриИзменении", "КР_ТоварыОтборХарактеристикаПриИзменении");
	Элементы.ТоварыРазмещениеХарактеристика.УстановитьДействие(
		"ПриИзменении", "КР_ТоварыРазмещениеХарактеристикаПриИзменении");  
	// >> 30.09.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-619
	
	// ГруппаИспользоватьКороб
	ГруппаИспользоватьКороб = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(ЭтотОбъект,
		"КР_ГруппаИспользоватьКороб",  , Элементы.ГруппаИнформацияКолонки);
	КР_МетодыМодификацииФорм.УстановитьСвойстваОбычнаяГруппаГоризонтальноБезОтображения(
		ГруппаИспользоватьКороб);
		
	// ИспользоватьКороб	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ИспользоватьКороб", ГруппаИспользоватьКороб);  
	ЭлементФормы.ВидФлажка = ВидФлажка.Тумблер;
	ЭлементФормы.УстановитьДействие("ПриИзменении", "КР_ИспользоватьКоробПриИзменении");
		
	// Короб	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_Короб", ГруппаИспользоватьКороб);  
	ЭлементФормы.Ширина = 14;            
	ЭлементФормы.УстановитьДействие("ПриИзменении", "КР_КоробПриИзменении");
		
	// КР_ПотоварнаяПриемкаБезВскрытияКороба	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ПотоварнаяПриемкаБезВскрытияКороба", ГруппаИспользоватьКороб);  
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;            
	ЭлементФормы.Заголовок = НСтр("ru = 'Без вскрытия'");
	ЭлементФормы.УстановитьДействие("ПриИзменении", "КР_ПотоварнаяПриемкаБезВскрытияКоробаПриИзменении");
	
	// Создаем соответствие на форме для сохранения исходного состояния
	//	свойств элементов при блокировке, для последующего их восстановления
	РеквизитФормы = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(ЭтотОбъект,
		"КР_ИсходноеСостояниеЗаблокированныхЭлементов", Новый ОписаниеТипов());
	ЭтотОбъект.КР_ИсходноеСостояниеЗаблокированныхЭлементов = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	Элементы.Статус.УстановитьДействие("НачалоВыбора", "КР_СтатусНачалоВыбора");
	
	// КР_ТоварыОтборРазбитьСтроку
	КомандаФормы = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект,
		"КР_ТоварыОтборРазбитьСтроку", НСтр("ru = 'Разбить строку'"));   
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	КомандаФормы.Картинка = БиблиотекаКартинок.РазбитьСтроку;       
	КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
    КомандаФормы.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F9, , Истина);
	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		КомандаФормы, , Элементы.ТоварыПоискПоШтрихкоду);
			
	// КР_ТоварыРазмещениеРазбитьСтроку
	КомандаФормы = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект,
		"КР_ТоварыРазмещениеРазбитьСтроку", НСтр("ru = 'Разбить строку'"));
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	КомандаФормы.Картинка = БиблиотекаКартинок.РазбитьСтроку;       
	КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
    КомандаФормы.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F9, , Истина);
	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		КомандаФормы, , Элементы.ТоварыРазмещениеПоискПоШтрихкоду);

    // << 10.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-487
	// КР_ИдентификаторСистемыИсточника
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ИдентификаторСистемыИсточника", Элементы.ГруппаИнформацияПраво); 
	ЭлементФормы.ТолькоПросмотр = Истина;
	ЭлементФормы.АвтомаксимальнаяШирина = Ложь;
	ЭлементФормы.МаксимальнаяШирина = 28;
	// >> 10.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-487
	
	// << 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417
	// КР_ЗаполнитьЯчейкуВВыделенныхСтрокахОтбор
	КомандаФормы = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект,
		"КР_ЗаполнитьЯчейкуВВыделенныхСтрокахОтбор", 
		НСтр("ru = 'Заполнить в выделенных строках'"), "ЗаполнитьЯчейкуВоВсехСтрокахОтбор");
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		КомандаФормы, , Элементы.ТоварыОтборПодобратьЯчейки);
	
	// КР_ЗаполнитьЯчейкуВВыделенныхСтрокахРазмещение
	КомандаФормы = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект,
		"КР_ЗаполнитьЯчейкуВВыделенныхСтрокахРазмещение", 
		НСтр("ru = 'Заполнить в выделенных строках'"), "ЗаполнитьЯчейкуВоВсехСтрокахРазмещение");
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		КомандаФормы, , Элементы.ТоварыРазмещениеПодобратьЯчейки);
	// >> 26.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2417

	// << 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540
	КомандаФормы = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект,
		"КР_ТоварыПодобратьЯчейкиОтбораОднозначноеРазмещение", 
		НСтр("ru = 'Подобрать по правилам, только однозначное размещение'"), "ТоварыПодобратьЯчейкиОтбора");
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		КомандаФормы, Элементы.ТоварыОтборЯчейки);
	// >> 29.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2540

	// << 08.08.2024 Петухов А.В., Фактор, #4547
	ВсеРеквизиты = ЭтаФорма.ПолучитьРеквизиты("Объект.ТоварыОтбор");
	ТребуетсяСоздатьРеквизиты = Истина;
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		Если Реквизит.Имя = "КР_Этап" Тогда
			ТребуетсяСоздатьРеквизиты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ТребуетсяСоздатьРеквизиты Тогда
		мсвРеквизиты = Новый Массив;
		мсвРеквизиты.Добавить(Новый РеквизитФормы("КР_Этап", Новый ОписаниеТипов("ПеречислениеСсылка.ЭтапыИзмененияАссортимента"), "Объект.ТоварыОтбор" , "Место размещения", Ложь));
		мсвРеквизиты.Добавить(Новый РеквизитФормы("КР_ЭтапЗаполнен", Новый ОписаниеТипов("Булево"), "Объект.ТоварыОтбор" , "Место размещения заполнено", Ложь));
		мсвРеквизиты.Добавить(Новый РеквизитФормы("КР_Этап", Новый ОписаниеТипов("ПеречислениеСсылка.ЭтапыИзмененияАссортимента"), "Объект.ТоварыРазмещение" , "Место размещения", Ложь));
		мсвРеквизиты.Добавить(Новый РеквизитФормы("КР_ЭтапЗаполнен", Новый ОписаниеТипов("Булево"), "Объект.ТоварыРазмещение" , "Место размещения заполнено", Ложь));
		ЭтаФорма.ИзменитьРеквизиты(мсвРеквизиты);
	КонецЕсли;
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект, "Объект.ТоварыОтбор.КР_Этап", Элементы.ТоварыОтбор); 
	ЭлементФормы.ТолькоПросмотр = Истина;
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект, "Объект.ТоварыРазмещение.КР_Этап", Элементы.ТоварыРазмещение); 
	ЭлементФормы.ТолькоПросмотр = Истина;
	Элементы.ТоварыОтбор.УстановитьДействие("ПриОкончанииРедактирования", "КР_ТоварыОтборПриОкончанииРедактирования");
	Элементы.ТоварыРазмещение.УстановитьДействие("ПриОкончанииРедактирования", "КР_ТоварыРазмещениеПриОкончанииРедактирования");
	КР_ЗаполнитьМестаРазмещения();
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
	
    #КонецОбласти
	
КонецПроцедуры // >> 01.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751	

// << 08.08.2024 Петухов А.В., Фактор, #4547
&НаКлиенте
Процедура КР_ТоварыОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		КР_ЗаполнитьМестаРазмещения(Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КР_ТоварыРазмещениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		КР_ЗаполнитьМестаРазмещения(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры
// >> 08.08.2024 Петухов А.В., Фактор, #4547

&НаКлиенте
Процедура КР_ТоварыОтборХарактеристикаПриИзменении(Элемент)
	
	// << 08.08.2024 Петухов А.В., Фактор, #4547
	ТекущаяСтрока = Элементы.ТоварыОтбор.ТекущиеДанные;
	ТекущаяСтрока.КР_ЭтапЗаполнен = Ложь;
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
	
КонецПроцедуры

&НаКлиенте
Процедура КР_ТоварыРазмещениеХарактеристикаПриИзменении(Элемент)

	// << 08.08.2024 Петухов А.В., Фактор, #4547
	ТекущаяСтрока = Элементы.ТоварыРазмещение.ТекущиеДанные;
	ТекущаяСтрока.КР_ЭтапЗаполнен = Ложь;
	// >> 08.08.2024 Петухов А.В., Фактор, #4547

КонецПроцедуры

// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере
Процедура КР_УстановитьСвязиПараметровВыбора()   
	
	СкладМагазин = (Объект.Склад.КР_ВидСклада = Перечисления.КР_ВидыСкладов.Магазин);
	
	// Меняем/восстанавливаем связи параметров выбора  
	ИмяРеквизита = "Ячейка";
	ОбъектМетаданные = Объект.Ссылка.Метаданные();
	// В метаданных не полный путь к данным. 
	// В нем нет "обращения к Объекту формы"
	Для Каждого ИмяТабличнойЧасти Из СтрРазделить("ТоварыОтбор,ТоварыРазмещение", ",") Цикл 
		
		ИмяЭлемента = СтрШаблон("%1%2", ИмяТабличнойЧасти, ИмяРеквизита);
		
		СвязиПараметровВыбора = ОбъектМетаданные.ТабличныеЧасти[ИмяТабличнойЧасти]
			.Реквизиты[ИмяРеквизита].СвязиПараметровВыбора;   
		СвязиПараметровВыбора = Новый Массив(СвязиПараметровВыбора);	
			
		Для Итератор = -СвязиПараметровВыбора.ВГраница() По 0 Цикл 
			СвязьПараметровВыбора = СвязиПараметровВыбора[-Итератор];  

			Если СкладМагазин 
				И СвязьПараметровВыбора.ПутьКДанным = "Помещение" Тогда 
				СвязиПараметровВыбора.Удалить(-Итератор);
				Продолжить;
			КонецЕсли;	   
			
			// Переопределяем связь, дополняя "Объект."-ом
			// Непосредственное изменение ПутьКДанным не дроступно
			СвязиПараметровВыбора[-Итератор] = Новый СвязьПараметраВыбора(
				СвязьПараметровВыбора.Имя, "Объект." + СвязьПараметровВыбора.ПутьКДанным, 
				СвязьПараметровВыбора.ИзменениеЗначения);
		КонецЦикла;
			
		Элементы[ИмяЭлемента].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора); 
		
	КонецЦикла;
	
КонецПроцедуры // >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере
Процедура КР_УстановитьВидимостьДоступностьЭлементов()  
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Склад = Объект.Склад;  
	ВидОперации = Объект.ВидОперации;
	ЭтоСкладМагазин = (Склад.КР_ВидСклада = Перечисления.КР_ВидыСкладов.Магазин);
	
	ЭтоОтбор = (ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор);
	ЭтоРазмещение = (ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение);
	ЭтоПеремещение = (ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение);
	
	АдресныйСкладБезордернойОтгрузки = Склад.КР_АдресныйСкладБезордернойОтгрузки;
	ИспользоватьРазмещениеКакПриходныйОрдер = Склад.КР_ИспользоватьРазмещениеКакПриходныйОрдер;	
	ИспользоватьСкладскиеПомещения = Склад.ИспользоватьСкладскиеПомещения;	
	ИспользоватьКороб = Объект.КР_ИспользоватьКороб;
	
	ПринятКороб = (Объект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ПринятКороб);
	ПринятТовар = (Объект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ПринятТовар);
	
	//
	КР_УстановитьЗаголовокФормы();

	// КР_ИспользоватьКороб
	Если ЭтоПеремещение Тогда 
		Элементы.КР_ИспользоватьКороб.Заголовок = НСтр("ru = 'Распечатать короб'");   
	Иначе 
		Элементы.КР_ИспользоватьКороб.Заголовок = НСтр("ru = 'Использовать короб'");    
	КонецЕсли;
	Элементы.КР_ИспользоватьКороб.Видимость = (АдресныйСкладБезордернойОтгрузки И (ЭтоОтбор Или ЭтоПеремещение))
		Или (ИспользоватьРазмещениеКакПриходныйОрдер И ЭтоРазмещение);
		
	Элементы.КР_ИспользоватьКороб.ТолькоПросмотр = ЭтоСкладМагазин И Не ЭтоПеремещение;
		
	//
	Элементы.ДатаНачалаВыполнения.Доступность = ЭтоПолноправныйПользователь;
	Элементы.ДатаОкончанияВыполнения.Доступность = ЭтоПолноправныйПользователь;
	
	//	
	Элементы.КР_Короб.Видимость = ИспользоватьКороб;
	Элементы.КР_ПотоварнаяПриемкаБезВскрытияКороба.Видимость = ЗначениеЗаполнено(Объект.КР_Короб)
		И ЭтоРазмещение И ПринятКороб И Не ЭтоСкладМагазин;
	
	//
	Если ЭтоСкладМагазин Тогда 

		Если ЭтоПеремещение Тогда 
			Элементы.Помещение.Видимость = Ложь; 
		КонецЕсли;	
	
	КонецЕсли;   
	
	//
	Если АдресныйСкладБезордернойОтгрузки Тогда 

		Элементы.ТоварыОтборГруппаВес.Видимость = Ложь;
		Элементы.ТоварыОтборГруппаОбъем.Видимость = Ложь; 
		
	КонецЕсли;   
	
	//
	Если ИспользоватьРазмещениеКакПриходныйОрдер Тогда 

		Элементы.ТоварыРазмещениеГруппаВес.Видимость = Ложь;
		Элементы.ТоварыРазмещениеГруппаОбъем.Видимость = Ложь; 
		
	КонецЕсли;   
	
	//
	Если ИспользоватьРазмещениеКакПриходныйОрдер
		Или АдресныйСкладБезордернойОтгрузки Тогда 

		Элементы.Исполнитель.Видимость = Ложь;    
		Элементы.Распоряжение.Видимость = Не ЭтоПеремещение
			Или (ЭтоПеремещение И ЗначениеЗаполнено(Объект.КР_Короб));   
		
	КонецЕсли;
	
	// 
	Если АдресныйСкладБезордернойОтгрузки  
		И (ЭтоОтбор Или ЭтоПеремещение) Тогда 
		Элементы.Статус.Видимость = Ложь; 	
    	Элементы.Помещение.Доступность = Ложь;
	КонецЕсли;
		
	//
	Если Не Склад.ИспользоватьАдресноеХранение
		И Не ИспользоватьСкладскиеПомещения 
			Или Не ЗначениеЗаполнено(
				Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСАдреснымХранением(Склад)) Тогда 
			
		Элементы.ТоварыОтборЯчейка.Видимость = Ложь;
		Элементы.ТоварыРазмещениеЯчейка.Видимость = Ложь;
		
	КонецЕсли;
	
	// 
	Если Склад.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.НеИспользовать
		Или Склад.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения
			И Объект.Помещение.НастройкаАдресногоХранения <> Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки 
		Тогда 	
			
		Элементы.ЗонаПриемки.Видимость = Ложь;
		
	КонецЕсли;
		
	//		
	Если ПринятКороб
		И ЭтоРазмещение 
		Тогда 

		// Блокируем табличную часть рекурсивно
		
		ИсходноеСостояниеЗаблокированныхЭлементов = Новый Соответствие(
			ЭтотОбъект.КР_ИсходноеСостояниеЗаблокированныхЭлементов);   
			
		КР_МетодыМодификацииФорм.ЗаблокироватьЭлемент(Элементы.ТоварыРазмещение, , 
			ИсходноеСостояниеЗаблокированныхЭлементов); 
			
		ЭтотОбъект.КР_ИсходноеСостояниеЗаблокированныхЭлементов = Новый ФиксированноеСоответствие(
			ИсходноеСостояниеЗаблокированныхЭлементов);	
		// 
		
	Иначе
				
		ИсходноеСостояниеЗаблокированныхЭлементов = Новый Соответствие(
			ЭтотОбъект.КР_ИсходноеСостояниеЗаблокированныхЭлементов);   
		
		КР_МетодыМодификацииФорм.РазблокироватьЭлементы(Элементы, ИсходноеСостояниеЗаблокированныхЭлементов); 
			
		ЭтотОбъект.КР_ИсходноеСостояниеЗаблокированныхЭлементов = Новый ФиксированноеСоответствие(
			ИсходноеСостояниеЗаблокированныхЭлементов);	
			
		// 	
	КонецЕсли;	

	// Автоотметка незаполненного

	Элементы.Помещение.АвтоОтметкаНезаполненного = Не (Не ИспользоватьСкладскиеПомещения Или ЭтоСкладМагазин И ЭтоПеремещение); 	
	
	Элементы.ТоварыОтборУпаковка.АвтоОтметкаНезаполненного = Ложь;
	Элементы.ТоварыРазмещениеУпаковка.АвтоОтметкаНезаполненного = Ложь; 
	
	Элементы.ТоварыРазмещениеЯчейка.АвтоОтметкаНезаполненного = Не ((ПринятКороб Или ПринятТовар) И ЭтоРазмещение);   
	Элементы.ТоварыОтборЯчейка.АвтоОтметкаНезаполненного = Не ((ПринятКороб Или ПринятТовар) И ЭтоРазмещение);   

	//
	КР_УстановитьСвязиПараметровВыбора();

	// 
	КР_ОграничитьФункциональностьДокументаПоПравам();

КонецПроцедуры // >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если КР_ЭтоРазмещениеКакПриходныйОрдер() Тогда 
		СтандартнаяОбработка = Ложь;
				
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.КР_ПринятКороб"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.КР_ПринятТовар"));
		
		Если КР_ДоступенСтатусТоварРазмещен() Тогда 
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.КР_ТоварРазмещен"));
		КонецЕсли;
		
	ИначеЕсли Объект.КР_ПотоварнаяПриемкаБезВскрытияКороба Тогда
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.Подготовлено"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВРаботе"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.КР_ПринятКороб"));
		
	КонецЕсли;
	
КонецПроцедуры // >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_ИспользоватьКоробПриИзменении(Элемент)
	
	Если Не Объект.КР_ИспользоватьКороб Тогда 
		Объект.КР_Короб = Неопределено;
	КонецЕсли;
	
	КР_КоробПриИзменении(Элементы.КР_Короб);
	
КонецПроцедуры // >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_КоробПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(Объект.КР_Короб) Тогда 
		Объект.КР_ПотоварнаяПриемкаБезВскрытияКороба = Ложь;
	КонецЕсли;
	
	КР_ЗаполнитьРаспоряжениеПоКоробу();


	ЭтоПеремещение = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Перемещение");
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Отбор")
		Или ЭтоПеремещение 
		Тогда
		
		КР_ЗаполнитьТоварыИзДанныхКороба("ТоварыОтбор", ЭтоПеремещение); 
		КР_ЗаполнитьОчиститьЯчейки("ТоварыОтбор", Не ЗначениеЗаполнено(Объект.КР_Короб));
		
	Иначе   
		
		КР_ПотоварнаяПриемкаБезВскрытияКоробаПриИзменении(Элементы.КР_ПотоварнаяПриемкаБезВскрытияКороба);

	КонецЕсли;	                    
	
	КР_УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры // >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_ПотоварнаяПриемкаБезВскрытияКоробаПриИзменении(Элемент)
	
	Если КР_ЭтоРазмещениеКакПриходныйОрдер() Тогда    
		
		Если Объект.КР_ПотоварнаяПриемкаБезВскрытияКороба Тогда 
			КР_ЗаполнитьТоварыИзДанныхКороба("ТоварыРазмещение"); 
		Иначе
			Объект.ТоварыРазмещение.Очистить();
		КонецЕсли;	                           
		
    КонецЕсли;
	
КонецПроцедуры // >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере
Процедура КР_ЗаполнитьТоварыИзДанныхКороба(ИмяТабличнойЧасти, ОчишатьПриПустомКоробе = Ложь)  
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	Если Не ЗначениеЗаполнено(Объект.КР_Короб) Тогда  
		Если ОчишатьПриПустомКоробе Тогда 
			ТабличнаяЧасть.Очистить();
		КонецЕсли;	
		Возврат;	
	КонецЕсли;

	ЭтоПеремещение = (Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение);
	
	ТабличнаяЧасть.Очистить();
	
	ОтборТолькоТовары = Новый Структура("ЭтоУпаковочныйЛист", Ложь);
	ДанныеТовары = Объект.КР_Короб.Товары.НайтиСтроки(ОтборТолькоТовары); 
	Для Каждого СтрокаДанных Из ДанныеТовары Цикл 
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);   
				
	КонецЦикла;	        
	
	КэшированныеЗначения = Неопределено;
	 	
	// Взято из ПриИзмененииНоменклатуры Отбор/Размещение  
	// Удалена проверка признаков по текущей строке
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки", Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки", Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса", Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема", Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	Суффикс = "";
	СтруктураДействий.Вставить("ПересчитатьВесОбъем", Суффикс);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
 	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ?(ИмяТабличнойЧасти = "ТоварыОтбор", "Отобрано", "Размещено"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");  
		
 	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, 
		?(ИмяТабличнойЧасти = "ТоварыОтбор", ПараметрыУказанияСерий.Отбор, ПараметрыУказанияСерий.Размещение)));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, ИмяТабличнойЧасти));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект[ИмяТабличнойЧасти], СтруктураДействий, КэшированныеЗначения);	
	
	// Типовой код взять из ПослеЗаписи...
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект[ИмяТабличнойЧасти], ПараметрыЗаполненияРеквизитов);
	
	ПересчитатьВесОбъемВСтрокахТЧ();

	// << 08.08.2024 Петухов А.В., Фактор, #4547
	Если ИмяТабличнойЧасти = "ТоварыОтбор" Тогда
		КР_ЗаполнитьМестаРазмещения(Истина, Ложь);
	Иначе
		КР_ЗаполнитьМестаРазмещения(Ложь, Истина);
	КонецЕсли;
	// >> 08.08.2024 Петухов А.В., Фактор, #4547
	
КонецПроцедуры // >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере
Процедура КР_ЗаполнитьОчиститьЯчейки(ИмяТабличнойЧасти, Очистить = Ложь)  
	
	ЭтоПеремещение = (Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение);
	Если Очистить Тогда 
		Ячейка = Неопределено;
	ИначеЕсли ЭтоПеремещение Тогда 	
		Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(Объект.Склад);
	Иначе	
		Возврат;	
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		СтрокаДанных.Ячейка = Ячейка;
	КонецЦикла;	        
		
КонецПроцедуры // >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Функция КР_ЗаданВопросОСозданииКороба(ПараметрыЗаписи)

	КР_ВидСклада = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Склад, "КР_ВидСклада");
	Если Не Объект.КР_ИспользоватьКороб
		Или ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Проведение    
		Или Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Отбор")
		Или ЗначениеЗаполнено(Объект.КР_Короб)
		Или КР_ВидСклада <> ПредопределенноеЗначение("Перечисление.КР_ВидыСкладов.Магазин")
		Или ПараметрыЗаписи.Свойство("КР_СоздатьКороб") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	// << 02.06.2023 Марченко С.Н., КРОК, JIRA№A2105505-1736
	//ОписаниеОповещения = Новый ОписаниеОповещения("КР_ЗаданВопросОСозданииКоробаЗавершение", ЭтотОбъект, ПараметрыЗаписи);
	//ТекстВопроса = НСтр("ru = 'Будет создан новый короб'");
	//ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	КР_ЗаданВопросОСозданииКоробаЗавершение(КодВозвратаДиалога.ОК, ПараметрыЗаписи);	
	// >> 02.06.2023 Марченко С.Н., КРОК, JIRA№A2105505-1736
	
	Возврат Истина;
	
КонецФункции // >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_ЗаданВопросОСозданииКоробаЗавершение(Результат, ПараметрыЗаписи) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда   
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаписи.Вставить("КР_СоздатьКороб");
	Записать(ПараметрыЗаписи);
	
	// Перечитываем объект
	Прочитать();          
	КР_УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры // >> 31.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.01.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_ТоварыОтборРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.ТоварыОтбор;
	ДанныеТаблицы = Объект.ТоварыОтбор;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ТоварыОтбор");
	Оповещение = Новый ОписаниеОповещения("КР_РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры // >> 31.01.2023 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.01.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_ТоварыРазмещениеРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.ТоварыРазмещение;
	ДанныеТаблицы = Объект.ТоварыРазмещение;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ТоварыРазмещение");
	Оповещение = Новый ОписаниеОповещения("КР_РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры // >> 31.01.2023 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 31.01.2023 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаКлиенте
Процедура КР_РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы[ДополнительныеПараметры.ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда

		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками") Тогда
			Если ДополнительныеПараметры.ИмяТабличнойЧасти = "ТоварыОтбор" Тогда 		
				Суффикс = "Отобрано";    
			Иначе	
				Суффикс = "Размещено";
			КонецЕсли;	
		Иначе
			Суффикс = "";
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Суффикс);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		// << 08.08.2024 Петухов А.В., Фактор, #4547
		Если ДополнительныеПараметры.ИмяТабличнойЧасти = "ТоварыОтбор" Тогда
			КР_ЗаполнитьМестаРазмещения(Истина, Ложь);
		Иначе
			КР_ЗаполнитьМестаРазмещения(Ложь, Истина);
		КонецЕсли;
		// >> 08.08.2024 Петухов А.В., Фактор, #4547
		
	КонецЕсли;
		
КонецПроцедуры // >> 31.01.2023 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751  
&НаСервере
Процедура КР_УстановитьПомещениеПоУмолчанию()

	Документы.ОтборРазмещениеТоваров.КР_УстановитьПомещениеПоУмолчанию(Объект);	

КонецПроцедуры // >> 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751  
&НаСервере
Процедура КР_УстановитьЗаголовокФормы()
	
	ВидОперации = Объект.ВидОперации;
	ЭтоОтбор = (ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор);
	ЭтоРазмещение = (ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение);
	ЭтоПеремещение = (ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение);
	
	Если Объект.Ссылка.Пустая() Тогда   
		АвтоЗаголовок = Ложь;
		Если ЭтоОтбор Тогда 
			Заголовок = НСтр("ru = 'Отбор товаров (создание)'");	
		ИначеЕсли ЭтоРазмещение Тогда 
			Заголовок = НСтр("ru = 'Размещение товаров (создание)'");	
		ИначеЕсли ЭтоПеремещение Тогда 
			Заголовок = НСтр("ru = 'Внутрискладское перемещение (создание)'");	
		КонецЕсли;  
	Иначе
		АвтоЗаголовок = Истина;
		Заголовок = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры // >> 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере      
Функция КР_ЭтоАдресныйСкладБезордернойОтгрузки(Склад) 

	Возврат Склад.КР_АдресныйСкладБезордернойОтгрузки;
		
КонецФункции // >> 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере      
Функция КР_ЭтоОтборАдресныйСкладБезордернойОтгрузки() 

	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор
		И Объект.Склад.КР_АдресныйСкладБезордернойОтгрузки;
		
КонецФункции // >> 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере      
Функция КР_ЭтоРазмещениеКакПриходныйОрдер(ИдентификаторыСтатусовДокумента = Неопределено) 
	
	Если ЗначениеЗаполнено(ИдентификаторыСтатусовДокумента) Тогда 
		
		СтатусСоответстует = Ложь;
		МассивИдентификаторовСтатусов = СтрРазделить(ИдентификаторыСтатусовДокумента, ",");
		Для Каждого ИдентификаторСтатусаДокумента Из МассивИдентификаторовСтатусов Цикл 
			Если Объект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров[ИдентификаторСтатусаДокумента] Тогда 
				СтатусСоответстует = Истина;
			КонецЕсли;	
		КонецЦикла;	  
		
		Если Не СтатусСоответстует Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение
		И Объект.Склад.КР_ИспользоватьРазмещениеКакПриходныйОрдер;
		
КонецФункции // >> 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751
&НаСервере      
Функция КР_ДоступенСтатусТоварРазмещен() 
	
	Если Не КР_ЭтоРазмещениеКакПриходныйОрдер() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Склад = Объект.Склад;
	Возврат Склад.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки
		Или Склад.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения
			И Объект.Помещение.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки;
		
КонецФункции // >> 05.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751  
&НаСервере
Процедура КР_ОграничитьФункциональностьДокументаПоПравам()

	ЕстьОграничениеПоДобавлениюДокумента = РольДоступна("КР_ОграниченноеДобавлениеОтборовРазмещенийТоваров")
		И Не Пользователи.РолиДоступны("ДобавлениеИзменениеОтборовРазмещенийТоваров");    
		
	Если Не ЕстьОграничениеПоДобавлениюДокумента
		Или Не Объект.Проведен
		Тогда 
		Возврат;
	КонецЕсли;	
	
	ВидОперации = Объект.ВидОперации;
	ЭтоОтбор = (ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор);
	ЭтоПеремещение = (ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение);
		
	Если ЭтоОтбор
		Или ЭтоПеремещение 
		Или Объект.Ссылка.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ТоварРазмещен
		Тогда 
		
		ТолькоПросмотр = Истина;		
				
		Возврат;
		
	КонецЕсли;	
	
	// ЭтоРазмещение
	Элементы.Дата.ТолькоПросмотр = Истина;	
	Элементы.КР_Короб.ТолькоПросмотр = Истина;	
	
КонецПроцедуры // >> 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751  
&НаСервере
Процедура КР_ЗаполнитьРаспоряжениеПоКоробу()

	ЭтоПеремещение = (Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение);
	Если Не ЭтоПеремещение Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КР_Короб) Тогда 
		Объект.Распоряжение = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.ДокументОтгрузки КАК ДокументОтгрузки
	|ИЗ
	|	РегистрНакопления.КР_КоробаКОтгрузке.Остатки(&Период, Короб = &Короб) КАК Т
	|ГДЕ
	|	Т.СобраноОстаток > 0");      
	
	Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Короб", Объект.КР_Короб);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Объект.Распоряжение = ВыборкаДетальныеЗаписи.ДокументОтгрузки;		
	КонецЕсли;	
	
КонецПроцедуры // >> 18.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-751

// << 08.08.2024 Петухов А.В., Фактор, #4547
&НаСервере
Процедура КР_ЗаполнитьМестаРазмещения(ЗаполнятьТоварыОтбор = Истина, ЗаполнятьТоварыРазмещение = Истина, ПерезаполнитьВсе = Ложь)
	тбзТовары = Новый ТаблицаЗначений;
	тбзТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тбзТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Если ЗаполнятьТоварыОтбор Тогда
		Если ПерезаполнитьВсе Тогда
			СтрокиТоварыОтбор = Объект.ТоварыОтбор;
		Иначе
			СтрокиТоварыОтбор = Объект.ТоварыОтбор.НайтиСтроки(Новый Структура("КР_ЭтапЗаполнен", Ложь));
		КонецЕсли;
		Для Каждого Строка Из СтрокиТоварыОтбор Цикл
			мсвСтроки = тбзТовары.НайтиСтроки(Новый Структура("Номенклатура,Характеристика", Строка.Номенклатура, Строка.Характеристика));
			Если мсвСтроки.Количество() = 0 Тогда
				НоваяСтрока = тбзТовары.Добавить();
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.Характеристика = Строка.Характеристика;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЗаполнятьТоварыРазмещение Тогда
		Если ПерезаполнитьВсе Тогда
			СтрокиТоварыРазмещение = Объект.ТоварыРазмещение;
		Иначе
			СтрокиТоварыРазмещение = Объект.ТоварыРазмещение.НайтиСтроки(Новый Структура("КР_ЭтапЗаполнен", Ложь));
		КонецЕсли;
		Для Каждого Строка Из СтрокиТоварыРазмещение Цикл
			мсвСтроки = тбзТовары.НайтиСтроки(Новый Структура("Номенклатура,Характеристика", Строка.Номенклатура, Строка.Характеристика));
			Если мсвСтроки.Количество() = 0 Тогда
				НоваяСтрока = тбзТовары.Добавить();
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.Характеристика = Строка.Характеристика;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если тбзТовары.Количество()>0 Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ втТовары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияИзмененияФорматовМагазиновСрезПоследних.ФорматМагазина КАК Формат
			|ПОМЕСТИТЬ втФорматы
			|ИЗ
			|	РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних(&ДатаЗапроса, Склад = &Склад) КАК ИсторияИзмененияФорматовМагазиновСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	втТовары.Номенклатура КАК Номенклатура,
			|	втТовары.Характеристика КАК Характеристика,
			|	втФорматы.Формат КАК ОбъектПланирования
			|ПОМЕСТИТЬ втОтбор
			|ИЗ
			|	втТовары КАК втТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ втФорматы КАК втФорматы
			|		ПО (ИСТИНА)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КР_РасширенныйАссортиментСрезПоследних.Номенклатура КАК Номенклатура,
			|	КР_РасширенныйАссортиментСрезПоследних.Характеристика КАК Характеристика,
			|	КР_РасширенныйАссортиментСрезПоследних.Этап КАК Этап
			|ИЗ
			|	РегистрСведений.КР_РасширенныйАссортимент.СрезПоследних(
			|			&ДатаЗапроса,
			|			(Номенклатура, Характеристика, ОбъектПланирования) В
			|				(ВЫБРАТЬ
			|					втОтбор.Номенклатура,
			|					втОтбор.Характеристика,
			|					втОтбор.ОбъектПланирования
			|				ИЗ
			|					втОтбор КАК втОтбор)) КАК КР_РасширенныйАссортиментСрезПоследних
			|ГДЕ
			|	КР_РасширенныйАссортиментСрезПоследних.Этап В(&Этапы)";
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Запрос.УстановитьПараметр("ДатаЗапроса", Объект.Дата);
		Иначе
			Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяДатаСеанса());
		КонецЕсли;
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
		Запрос.УстановитьПараметр("Товары", тбзТовары);
		мсвЭтапы = Новый Массив;
		мсвЭтапы.Добавить(Перечисления.ЭтапыИзмененияАссортимента.КР_ПереводНаСтрогуюКонсервацию);
		мсвЭтапы.Добавить(Перечисления.ЭтапыИзмененияАссортимента.КР_ПереводНаВременнуюКонсервацию);
		мсвЭтапы.Добавить(Перечисления.ЭтапыИзмененияАссортимента.КР_РазблокировкаСтрогойКонсервации);
		мсвЭтапы.Добавить(Перечисления.ЭтапыИзмененияАссортимента.КР_РазблокировкаВременнойКонсервации);
		Запрос.УстановитьПараметр("Этапы", мсвЭтапы);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		тбзЭтапы = РезультатЗапроса.Выгрузить();
		тбзЭтапы.Индексы.Добавить("Номенклатура,Характеристика");
		
		Если ЗаполнятьТоварыОтбор Тогда
			Для Каждого Строка Из СтрокиТоварыОтбор Цикл
				мсвСтроки = тбзЭтапы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика", Строка.Номенклатура, Строка.Характеристика));
				Если мсвСтроки.Количество() > 0 Тогда
					Строка.КР_Этап = мсвСтроки[0].Этап;
				Иначе
					Строка.КР_Этап = Перечисления.ЭтапыИзмененияАссортимента.ПустаяСсылка();
				КонецЕсли;
				Строка.КР_ЭтапЗаполнен = Истина;
			КонецЦикла;
		КонецЕсли;
		Если ЗаполнятьТоварыРазмещение Тогда
			Для Каждого Строка Из СтрокиТоварыРазмещение Цикл
				мсвСтроки = тбзЭтапы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика", Строка.Номенклатура, Строка.Характеристика));
				Если мсвСтроки.Количество() > 0 Тогда
					Строка.КР_Этап = мсвСтроки[0].Этап;
				Иначе
					Строка.КР_Этап = Перечисления.ЭтапыИзмененияАссортимента.ПустаяСсылка();
				КонецЕсли;
				Строка.КР_ЭтапЗаполнен = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// >> 08.08.2024 Петухов А.В., Фактор, #4547

#КонецОбласти
