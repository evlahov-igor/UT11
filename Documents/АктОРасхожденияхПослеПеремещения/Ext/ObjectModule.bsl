
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.АктОРасхожденияхПослеПеремещения);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий);
	
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	ПараметрыОкругления = НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяПоляКоличествоСуффикс = "КоличествоПоДокументу";
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	// << 01.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-702
	КР_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения);
	// >> 01.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-702	

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Статус = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ДокументОснование");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ОрганизацияПолучатель");
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Действие");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоУпаковокПоДокументу");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоПоДокументу");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ТекстовоеОписание");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Склад");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИменаПолейССуффиксом.Вставить("Количество", "КоличествоПоДокументу");
	ПараметрыПроверки.ИменаПолейССуффиксом.Вставить("КоличествоУпаковок", "КоличествоУпаковокПоДокументу");
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	Если ЗначениеЗаполнено(СкладОтправитель) И СкладОтправитель = СкладПолучатель Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Один склад не может быть как отправителем, так и получателем. Измените один из складов.'"),
				ЭтотОбъект,
				"СкладОтправитель",
				,
				Отказ);

	КонецЕсли;

	// Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
		
		ТекстОшибки = НСтр("ru='Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОрганизацияПолучатель",
			,
			Отказ);
		
		КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
	                                            НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.АктОРасхожденияхПослеПеремещения),
	                                            Отказ,
	                                            МассивНепроверяемыхРеквизитов);
	
	// Проверка того, что основания по заказу
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Заказ");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументыОснования.ДокументОснование
	|ПОМЕСТИТЬ ДокументыОснования
	|ИЗ
	|	&ДокументыОснования КАК ДокументыОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОснования.ДокументОснование
	|ИЗ
	|	ДокументыОснования КАК ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ДокументыОснования.ДокументОснование = ПеремещениеТоваров.Ссылка
	|ГДЕ
	|	ПеремещениеТоваров.ПеремещениеПоЗаказам";
	
	Запрос.УстановитьПараметр("ДокументыОснования", Товары.Выгрузить(,"ДокументОснование"));
	
	РезультатЗапроса = Запрос.Выполнить();
	ПроверкиПоЗаказуТребуются = Истина;
	Если РезультатЗапроса.Пустой() Тогда
		ПроверкиПоЗаказуТребуются = Ложь;
	Иначе
		МассивРеализацийПоЗаказу = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	КонецЕсли;
	
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		
		ТекущаяСтрока = Товары[ТекИндекс];
		
		Если ПроверкиПоЗаказуТребуются Тогда 
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Заказ) И ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование)
				И МассивРеализацийПоЗаказу.Найти(ТекущаяСтрока.ДокументОснование) <> Неопределено Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Заказ"" в строке %НомерСтроки% списка ""Товары""'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Заказ"),
				,
				Отказ);
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Код строки"" в строке %НомерСтроки% списка ""Товары""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Заказ"),
				,
				Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Статус <> Перечисления.СтатусыАктаОРасхождениях.НеСогласовано 
			И (ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокПоДокументу) <> 0 
			И Не ЗначениеЗаполнено(ТекущаяСтрока.Действие) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Как отражать расхождение"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Действие"),
				,
				Отказ);
			
		КонецЕсли;
			
		Если НЕ ТекущаяСтрока.ЗаполненоПоОснованию И НЕ ЗначениеЗаполнено(ТекущаяСтрока.КоличествоУпаковок) Тогда
		
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Количество факт"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "КоличествоУпаковок"),
			,
			Отказ);
		
		КонецЕсли;

	КонецЦикла;
	
	ОписаниеМетаданных = РасхожденияСервер.ОписаниеМетаданныхПроверкиВозможностиВнесенияИзлишкаВНакладную();
	ОписаниеМетаданных.ИмяПоляНакладнойЗаказ = "ЗаказНаПеремещение";
	ОписаниеМетаданных.ИмяПоляРегистраЗаказ  = "ЗаказНаПеремещение";
	ОписаниеМетаданных.ИмяПоляАктаЗаказ = "Заказ";
	ОписаниеМетаданных.ИмяПоляАктаНакладная = "ДокументОснование";
	
	РасхожденияСервер.ПроверкаВозможностиВнесенияИзлишкаВНакладную(ЭтотОбъект, "ЗаказыНаПеремещение", ОписаниеМетаданных, Отказ);
	
	// << 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702 
	КР_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	// >> 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда
			ЗаполнитьНаОсновании(ДанныеЗаполнения.МассивЗаказов);
		// << 19.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702
		// Передаем новое свойство/параметр в качестве свойства структуры
		// Задается в АктОРасхожденияхПослеПеремещения.ДобавитьКомандуСоздатьНаОсновании
		ИначеЕсли ДанныеЗаполнения.Свойство("КР_ЗагружатьКороба") Тогда
			ЗаполнитьНаОсновании(ДанныеЗаполнения.КР_ЗагружатьКороба, Истина);
		// >> 19.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702	
		Иначе
			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		ЗаполнитьНаОсновании(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	// << 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702 
	КР_ПриЗаписи(Отказ);
	// >> 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументПоОтбору(СтруктураОтбора)
	
	Если СтруктураОтбора.Свойство("Организация") Тогда
		Организация = СтруктураОтбора.Организация;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ОрганизацияПолучатель") Тогда
		ОрганизацияПолучатель = СтруктураОтбора.ОрганизацияПолучатель;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("СкладОтправитель") Тогда
		СкладОтправитель = СтруктураОтбора.СкладОтправитель;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("СкладПолучатель") Тогда
		СкладПолучатель = СтруктураОтбора.СкладПолучатель;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = СтруктураОтбора.ХозяйственнаяОперация;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОсновании(Основания,
	// << 19.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702
	КР_ЗаполнятьКороба = Ложь
	// >> 19.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702
	)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = Документы.АктОРасхожденияхПослеПеремещения.ТекстЗапросаПоОснованиюПеремещения(
	// << 19.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702
	КР_ЗаполнятьКороба
	// >> 19.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702
	);	
	
	Запрос.УстановитьПараметр("Основания", Основания);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();

	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыПеремещенийТоваров.Отгружено);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыПеремещенийТоваров.Принято);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыОснования.ДокументОснование,
		РеквизитыОснования.СтатусДокумента,
		РеквизитыОснования.ЕстьОшибкиПроведен,
		РеквизитыОснования.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
		
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОснования);
	
	Товары.Загрузить(РезультатЗапроса[1].Выгрузить());
	Серии.Загрузить(РезультатЗапроса[2].Выгрузить());     
	
	// << 19.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702
	Если КР_ЗаполнятьКороба Тогда   
		
		КР_СкладРазбораРасхождений = 
			Документы.АктОРасхожденияхПослеПеремещения.КР_ПолучитьСкладРазбораРасхождений(СкладОтправитель);		
		
		// A2105505-2595
		Если Не ЗначениеЗаполнено(КР_СкладРазбораРасхождений) 
			Или КР_СкладРазбораРасхождений.КР_ВидСклада <> Перечисления.КР_ВидыСкладов.СкладРазбораРасхожденийФулфилмента Тогда  

			КР_СкладРазбораРасхождений = 
				Документы.АктОРасхожденияхПослеПеремещения.КР_ПолучитьСкладРазбораРасхождений(СкладПолучатель);
			
		КонецЕсли;		
			
		Если ЗначениеЗаполнено(КР_СкладРазбораРасхождений) 
			И КР_СкладРазбораРасхождений.КР_ВидСклада <> Перечисления.КР_ВидыСкладов.СкладРазбораРасхожденийФулфилмента Тогда  
		//
			
			КР_Короба.Загрузить(РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить());   
			
		// A2105505-2595
		КонецЕсли; 
		//
		
	КонецЕсли;	

	// >> 19.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Автор            = Пользователи.ТекущийПользователь();
	Менеджер         = Пользователи.ТекущийПользователь();
	Подразделение    = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Менеджер);
	
	Организация      = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	СкладОтправитель = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(СкладОтправитель);
	
	Распоряжение = ДокументОснованиеПриЗаполнении(ДанныеЗаполнения);
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Распоряжение);
	
КонецПроцедуры

Функция ДокументОснованиеПриЗаполнении(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда
		
		Возврат ДанныеЗаполнения.МассивЗаказов[0];
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Возврат ДанныеЗаполнения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Устанавливает статус для объекта документа.
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов.
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыАктаОРасхождениях[НовыйСтатус];
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.АктОРасхожденияхПослеПеремещения);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область КР_ДополнительныеПроцедурыИФункции

// << 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702 
Процедура КР_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов)

	ОтборСтрокПереместитьНаСкладРазбора = Новый Структура("Действие", 
		Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьНаСкладРазбора);
	ОтборСтрокПереместитьСоСкладаРазбора = Новый Структура("Действие", 
		Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьСоСкладаРазбора);
		
	ЕстьСтрокиПеремещенияСоСкладомРазбора = Товары.НайтиСтроки(ОтборСтрокПереместитьНаСкладРазбора).Количество()
		Или Товары.НайтиСтроки(ОтборСтрокПереместитьСоСкладаРазбора).Количество();
		
	Если ЕстьСтрокиПеремещенияСоСкладомРазбора Тогда 
		
		// Проверим на количество различных документов-оснований
		// Должно быть только одно
		ДокументыОснованияМассив = Товары.ВыгрузитьКолонку("ДокументОснование");
		ДокументыОснованияМассив = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДокументыОснованияМассив);
		
		Если ДокументыОснованияМассив.Количество() > 1 Тогда 
			
			ТекстОшибки = НСтр("ru = 'Документ содержит варианты отработки расхождений ""Переместить со склада разбора"" " + 
				"и/или ""Переместить на склад разбора"". В таких документ документ-основание должен быть только один " +
				"документ ""Перемещение товаров"".'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры // >> 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702

// << 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702 
Процедура КР_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// << 16.05.2023 Федотов А.М., КРОК, Jira№A2105505-1657
	КР_ДополнительныеДействияВМагазине.ПроверитьЗаблокироватьЗаписьДокументаВМагазине(ЭтотОбъект, Отказ, "СкладПолучатель");
	// >> 16.05.2023 Федотов А.М., КРОК, Jira№A2105505-1657
	
	Если ЗначениеЗаполнено(КР_СкладРазбораРасхождений)
		// << 27.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2595
		И КР_СкладРазбораРасхождений.КР_ВидСклада <> Перечисления.КР_ВидыСкладов.СкладРазбораРасхожденийФулфилмента
		// >> 27.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2595
		Тогда 
		Статус = Перечисления.СтатусыАктаОРасхождениях.Отработано;
	КонецЕсли;	

	МассивСтрокБустыхОснованийТЧКороба = КР_Короба.НайтиСтроки(
		Новый Структура("ДокументОснование", Документы.ПеремещениеТоваров.ПустаяСсылка())); 
		
	Если ЗначениеЗаполнено(МассивСтрокБустыхОснованийТЧКороба) Тогда 
		
		ЛюбойДокументОснование = Неопределено;
		Для Каждого СтрокаДанных Из КР_Короба Цикл  
			ЛюбойДокументОснование = СтрокаДанных.ДокументОснование;
			Если ЗначениеЗаполнено(ЛюбойДокументОснование) Тогда 
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого СтрокаДанных Из МассивСтрокБустыхОснованийТЧКороба Цикл  
			СтрокаДанных.ДокументОснование = ЛюбойДокументОснование;
		КонецЦикла;   
		
	КонецЕсли;
	
КонецПроцедуры // >> 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702

// << 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702 
Процедура КР_ПриЗаписи(Отказ)
	
	Если Отказ 
		Или ДополнительныеСвойства.Свойство(
			КР_УТ11_ЦБ_Магазин_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен())
		Тогда 
		Возврат;
	КонецЕсли;
	
	КР_СформироватьТехническиеПеремещенияТоваров(Отказ);
	
КонецПроцедуры // >> 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702

// << 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702 
Процедура КР_СформироватьТехническиеПеремещенияТоваров(Отказ)
	
	// A2105505-2446
	УстановитьПривилегированныйРежим(Истина);
	//
	
	// Выбираем докуметы, в том числе и не проведенные (по убыванию признака)
	// В запросе определяем какие документы подходят по направлению перемещения
	// Так же получаем товарный состав
	Запрос = Новый Запрос(КР_ТекстЗапросаДанныеЗаполненияТехническихПеремещений());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);                               
	Запрос.УстановитьПараметр("Проведен", Проведен);                               
	Запрос.УстановитьПараметр("Статус", Статус);                               
	Запрос.УстановитьПараметр("СкладРазбораРасхождений", КР_СкладРазбораРасхождений);
	Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель); 
	Запрос.УстановитьПараметр("БазаЯвляетсяЦентральной", КР_ДополнительныеНастройкиПовтИсп.БазаЯвляетсяЦентральной()); 
	Запрос.УстановитьПараметр("СкладыТекущейБазыДанных", КР_ДополнительныеНастройкиПовтИсп.МассивЗначений("СкладыТекущейБазыДанных", Ложь)); 
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	ИндексПоследнегоПакета = РезультатЗапроса.ВГраница(); 
	
	ВыборкаТовары = РезультатЗапроса[ИндексПоследнегоПакета - 1].Выбрать();  
	ВыборкаДействие = РезультатЗапроса[ИндексПоследнегоПакета].Выбрать(
		ОбходРезультатаЗапроса.ПоГруппировкам);  

	Пока ВыборкаДействие.Следующий() Цикл 
		
		ВыборкаДетальныеЗаписи = ВыборкаДействие.Выбрать();   
		
		Если ВыборкаДействие.Действие = Неопределено Тогда 
			
			// Документы которые не совпали по направлению перемещений 
			КР_ПометитьНаУдалениеДокументыВыборки(ВыборкаДетальныеЗаписи);
			
		Иначе	
			
			// Первый документ перезаполним
			КР_СформироватьТехническоеПеремещение(ВыборкаДетальныеЗаписи, ВыборкаТовары, Отказ);	
			
			// Остальные пометим на удаление
			КР_ПометитьНаУдалениеДокументыВыборки(ВыборкаДетальныеЗаписи);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // >> 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702

// << 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702
Процедура КР_СформироватьТехническоеПеремещение(ВыборкаСсылок, ВыборкаТовары, Отказ)
	
	// Позиционируемся на первую запись
	ВыборкаСсылок.Следующий();
	ПеремещениеТоваров = ВыборкаСсылок.Ссылка;  
	ПеремещениеТоваровНайдено = ЗначениеЗаполнено(ПеремещениеТоваров);
	
	Если ПеремещениеТоваровНайдено Тогда  
		
		ДокументОбъект = ПеремещениеТоваров.ПолучитьОбъект();
		КР_ОбщегоНазначениеСервер.ДокументОбъектОчистить(ДокументОбъект); 
		
		ДокументОбъект.ПометкаУдаления = Ложь;  
		
	Иначе
		ДокументОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент(); 
	КонецЕсли;
	
	ДокументОбъект.Дата = Дата;       
	ДокументОбъект.ДокументОснование = Ссылка;
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.СкладОтправитель = ВыборкаСсылок.СкладОтправитель;
	ДокументОбъект.СкладПолучатель = ВыборкаСсылок.СкладПолучатель;

	// Выберем товары по ссылке
	ОтборПоДействию = Новый Структура("Действие", ВыборкаСсылок.Действие);
	ВыборкаТовары.Сбросить();
	Пока ВыборкаТовары.НайтиСледующий(ОтборПоДействию) Цикл  
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
		
	КонецЦикла;	

	// Дозаполним документ по умолчанию
	ДокументОбъект.Заполнить(Неопределено); 
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда 
		Отказ = Истина;	
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение); 
	
	Если ПеремещениеТоваровНайдено Тогда 
				
		ТекстОповещения = НСтр("ru = '%1 актуализирован'");  
		ТекстОповещения = СтрШаблон(ТекстОповещения, ПеремещениеТоваров);
		ОбщегоНазначения.СообщитьПользователю(ТекстОповещения, ПеремещениеТоваров);
		
	КонецЕсли;     
		
КонецПроцедуры // >> 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702

// << 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702
Процедура КР_ПометитьНаУдалениеДокументыВыборки(ВыборкаСсылок)
	
	Пока ВыборкаСсылок.Следующий() Цикл 
		Если ВыборкаСсылок.ПометкаУдаления Тогда  
			Продолжить;
		КонецЕсли;    
		ПеремещениеТоваров = ВыборкаСсылок.Ссылка;
		Объект = ПеремещениеТоваров.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);    

		ТекстОповещения = НСтр("ru = '%1 помечен на удаление'");  
		ТекстОповещения = СтрШаблон(ТекстОповещения, ПеремещениеТоваров);
		ОбщегоНазначения.СообщитьПользователю(ТекстОповещения, ПеремещениеТоваров);
		
	КонецЦикла;	
	
КонецПроцедуры // >> 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702

#Область КР_ТекстыЗапросов

// << 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702 
Функция КР_ТекстЗапросаДанныеЗаполненияТехническихПеремещений()  

	Возврат  	
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	СУММА(ТаблицаТовары.Количество - ТаблицаТовары.КоличествоПоДокументу) КАК РазницаКоличества
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Проведен
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано)
	|	И (&СкладПолучатель В (&СкладыТекущейБазыДанных)
	|			ИЛИ &БазаЯвляетсяЦентральной)
	|	И ТаблицаТовары.Количество - ТаблицаТовары.КоличествоПоДокументу <> 0
	|	И ТаблицаТовары.Действие В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьСоСкладаРазбора), 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьНаСкладРазбора)
	|	)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия  
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТовары.Количество - ТаблицаТовары.КоличествоПоДокументу) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.РазницаКоличества < 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьНаСкладРазбора)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.КР_ПереместитьСоСкладаРазбора)
	|	КОНЕЦ КАК Действие,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.РазницаКоличества > 0
	|			ТОГДА &СкладРазбораРасхождений
	|		ИНАЧЕ &СкладПолучатель
	|	КОНЕЦ КАК СкладОтправитель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.РазницаКоличества < 0 
	|			ТОГДА &СкладРазбораРасхождений
	|		ИНАЧЕ &СкладПолучатель
	|	КОНЕЦ КАК СкладПолучатель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.РазницаКоличества < 0
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК МодификаторЗнака,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.РазницаКоличества КАК РазницаКоличества
	|ПОМЕСТИТЬ ТоварыСоСкладами
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыСоСкладами.Действие КАК Действие,
	|	ТоварыСоСкладами.СкладОтправитель КАК СкладОтправитель,
	|	ТоварыСоСкладами.СкладПолучатель КАК СкладПолучатель
	|ПОМЕСТИТЬ НаправленияПеремещенияТоваров
	|ИЗ
	|	ТоварыСоСкладами КАК ТоварыСоСкладами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.СкладОтправитель КАК СкладОтправитель,
	|	Т.СкладПолучатель КАК СкладПолучатель,
	|	Т.Проведен КАК Проведен,
	|	Т.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ПеремещениеТоваров
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Т
	|ГДЕ
	|	Т.ДокументОснование = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Действие КАК Действие,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	Т.МодификаторЗнака * Т.РазницаКоличества КАК Количество,
	|	Т.МодификаторЗнака * Т.РазницаКоличества КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыСоСкладами КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НаправленияПеремещения.Действие, НЕОПРЕДЕЛЕНО) КАК Действие,
	|	НаправленияПеремещения.СкладОтправитель КАК СкладОтправитель,
	|	НаправленияПеремещения.СкладПолучатель КАК СкладПолучатель,
	|	ЕСТЬNULL(Т.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
	|	ЕСТЬNULL(Т.ПометкаУдаления, ИСТИНА) КАК ПометкаУдаления
	|ИЗ
	|	ПеремещениеТоваров КАК Т
	|		ПОЛНОЕ СОЕДИНЕНИЕ НаправленияПеремещенияТоваров КАК НаправленияПеремещения
	|		ПО Т.СкладОтправитель = НаправленияПеремещения.СкладОтправитель
	|			И Т.СкладПолучатель = НаправленияПеремещения.СкладПолучатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(Т.Проведен, ЛОЖЬ) УБЫВ
	|ИТОГИ ПО
	|	Действие";
	
КонецФункции // >> 20.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-702 

#КонецОбласти

#КонецОбласти

#КонецЕсли
