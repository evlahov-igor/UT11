#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

&НаКлиенте
Перем ВыполняетсяЗапись; //используется для передачи текущей строки в обработчик ожидания

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// --> Евлахов Игорь Николаевич (Начало) 26.09.2024
	// Задача #4584 
	// Перенес процедуру ниже по коду, т.к. есть договоренность создавать реквизиты программно
	// При выполненнии данного участка кода, ни реквизитов, ни элементов формы еще нет.
	// Из-за этого алгоритм падает с ошибкой
	// Начало было
	//УстановитьУсловноеОформление();
	// Конец было
	// <-- Евлахов Игорь Николаевич (Конец) 26.09.2024
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		// --> Евлахов Игорь Николаевич (Начало) 24.09.2024
		// Задача #4584
		// Начало было
		//Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Подготовлено;		// #4510.. Фомин Д.Ю. 02.08.2024.
		// Конец было
		// <-- Евлахов Игорь Николаевич (Конец) 24.09.2024
	КонецЕсли;
	
	// --> Евлахов Игорь Николаевич (Начало) 26.09.2024
	// Задача #4584 
	// Перенес процедуру ниже по коду, т.к. есть договоренность создавать реквизиты программно
	// При выполненнии данного участка кода, ни реквизитов, ни элементов формы еще нет.
	// Из-за этого алгоритм падает с ошибкой
	УстановитьУсловноеОформление();
	// <-- Евлахов Игорь Николаевич (Конец) 26.09.2024
	
	Элементы.ТоварыПоискПоШтрихкоду.Видимость = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПредыдущаяДата = Объект.Дата;

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
	// --> Евлахов Игорь Николаевич (Начало) 09.09.2024
	// Задача #4587
	злПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// <-- Евлахов Игорь Николаевич (Конец) 09.09.2024
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	// --> Евлахов Игорь Николаевич (Начало) 25.07.2024
	// Задача #4485
	// Начало было
	//// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	//// В связи с новым механизмом работы документа, "УчетныеДанныеЗаполнены" всегда = Истина (перезаполнение не требуется)
	//Объект.УчетныеДанныеЗаполнены = Истина;
	//// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	// Конец было
	// Задача #4485
	// <-- Евлахов Игорь Николаевич (Конец) 25.07.2024
	
	// --> Евлахов Игорь Николаевич (Начало) 26.08.2024
	// Задача #4520
	// Начало было
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
	//	И Не Объект.УчетныеДанныеЗаполнены 
	//	И Объект.Товары.Количество() > 0
	//	И Не Отказ
	//	И НЕ ВыполняетсяЗапись Тогда
	//	
	//	ТекстВопроса = НСтр("ru='При проведении будет перезаполнено учетное количество во всех строках табличной части. Продолжить?'");
	//	
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект), 
	//		ТекстВопроса,
	//		РежимДиалогаВопрос.ОКОтмена,
	//		,
	//		КодВозвратаДиалога.ОК);
	//	Отказ = Истина;
	//	
	//КонецЕсли;
	// Конец было
	// <-- Евлахов Игорь Николаевич (Конец) 26.08.2024
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняетсяЗапись = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	ВыполняетсяЗапись = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	ТекущийОбъект.ОтборПересчета = Новый ХранилищеЗначения(ОтборПересчета.Настройки, Новый СжатиеДанных(9));

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
		
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПризнакРасхождение();
	УстановитьСостояниеРедактированияПоСтатусу();
	
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

	злУстановитьВидимостьРасширеннаяРаботаСПересчетом();                // #4519.. Фомин Д.Ю. 02.08.2024.
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, РезультатВыбора);
		Если Не Элементы.Товары.ТекущиеДанные.ИзлишекПорча Тогда
			Объект.УчетныеДанныеЗаполнены = Ложь;
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Назначения.Форма.ФормаВыбора" Тогда	
		Элементы.Товары.ТекущиеДанные.Назначение = РезультатВыбора;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ПересчетТоваров", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// СтандартныеПодсистемы.Свойства
	
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
			И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
			
			СвойстваВыполнитьОтложеннуюИнициализацию();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПомещениеПриИзмененииСервер();
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	
	СкладПомещениеПриИзмененииСервер();
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ИспользоватьАдресноеХранение
		И Объект.Проведен Тогда
		// --> Евлахов Игорь Николаевич (Начало) 25.09.2024
		// Задача #4584
		// Начало было
		//Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.ВнесениеРезультатов") Тогда
		// Конец было
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.злКПроверке") Тогда		
		// <-- Евлахов Игорь Николаевич (Конец) 25.09.2024
			Если Объект.БлокироватьЯчейки Тогда
				
				ТекстСообщения = НСтр("ru = 'Снять блокировку ячеек?'");
				
				Ответ = Неопределено;

				
				ПоказатьВопрос(Новый ОписаниеОповещения("СтатусПриИзмененииЗавершение", ЭтотОбъект), ТекстСообщения, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
                Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтатусПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.БлокироватьЯчейки = Ложь;
        Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
        Возврат;
    КонецЕсли;
    
    СтатусПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЯчейкуИзлишкиПриИзменении(Элемент)
	
	Элементы.ЯчейкаКонсолидацииИзлишковТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуИзлишков;
	
	Если Не(Объект.ИспользоватьОтдельнуюЯчейкуИзлишков) Тогда
		Объект.ЯчейкаКонсолидацииИзлишковТоваров = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЯчейкуПорчиПриИзменении(Элемент)
	
	Элементы.ЯчейкаКонсолидацииИспорченныхТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуПорчи;
	
	Если Не(Объект.ИспользоватьОтдельнуюЯчейкуПорчи) Тогда
		Объект.ЯчейкаКонсолидацииИспорченныхТоваров = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРасхожденияПриИзменении(Элемент)
	
	Если ТолькоРасхождения Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Расхождение",Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыЯчейкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ИзлишекПорча Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элементы.Товары.ТекущиеДанные.Количество = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоФакт = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковок = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковокФакт = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковокОтклонение = 0;
		
		Если Не Копирование
			И Объект.Проведен Тогда
			Элементы.Товары.ТекущиеДанные.Ячейка = Объект.ЯчейкаКонсолидацииИзлишковТоваров;
		КонецЕсли;
		
		Если СостояниеРедактирования = "ОграниченноеРедактирование" Тогда
			Элементы.Товары.ТекущиеДанные.ИзлишекПорча = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Факт");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.КоличествоФакт 		 = 0;
		ТекущаяСтрока.КоличествоУпаковокФакт = 0;
		ТекущаяСтрока.Количество 			 = 0;
		ТекущаяСтрока.КоличествоУпаковок	 = 0;
		ТекущаяСтрока.КоличествоУпаковокОтклонение = 0;
	КонецЕсли;
	
	Если СостояниеРедактирования = "ОграниченноеРедактирование"
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		ТекущаяСтрока.ИзлишекПорча = Истина;
		
	КонецЕсли;
	
	Если Не ТекущаяСтрока.ИзлишекПорча Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ИзлишекПорча Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ИзлишекПорча Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Факт");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ТекущаяСтрока.ИзлишекПорча Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);			
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОчиститьСообщения();
	
	Если СостояниеРедактирования = "НеРедактируется" Тогда
		
		Отказ = Истина;
		
	ИначеЕсли СостояниеРедактирования = "ОграниченноеРедактирование" Тогда
		
		Отказ = Истина;
		
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		
		Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
			
			СтрТабл = Элементы.Товары.ДанныеСтроки(Идентификатор);
			
			Если СтрТабл.ИзлишекПорча Тогда
				Объект.Товары.Удалить(СтрТабл);
			Иначе
				ТекстСообщения = НСтр("ru = 'Строку %НомерСтроки% удалить нельзя, т.к. она была добавлена до начала пересчета.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%", СтрТабл.НомерСтроки);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрТабл.НомерСтроки, "НомерСтроки");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

	Если Не Элементы.Товары.ТекущиеДанные.ИзлишекПорча Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// << 08.08.2024 Петухов А.В., Фактор, #4523
	Если Не ОтменаРедактирования Тогда
		КоличествоУпаковокОтклонениеИтог = Объект.Товары.Итог("КоличествоУпаковокОтклонение");
	КонецЕсли;
	// >> 08.08.2024 Петухов А.В., Фактор, #4523
	Если Не ОтменаРедактирования
		И НоваяСтрока Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ТекущаяСтрока.ИзлишекПорча Тогда
			Объект.УчетныеДанныеЗаполнены = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не СкладПомещениеЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), НСтр("ru = 'Перед заполнением список товаров будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Товары.Очистить();
    Иначе
        Возврат;
    КонецЕсли;
    
    ЗаполнитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФрагмент()
    
    ЗаполнитьСервер();
    Объект.УчетныеДанныеЗаполнены = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоУчету(Команда)
	
	Если КоличествоФактЗаполнено() Тогда
		
		ТекстВопроса = НСтр("ru='В табличной части уже есть строки с заполненным фактическим количеством.
			|При заполнении эта информация будет утеряна. Продолжить?'");
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьФактПоУчетуЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
        Возврат;
		
	КонецЕсли;
	
	ЗаполнитьФактПоУчетуСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоУчетуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗаполнитьФактПоУчетуСервер();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачество(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Выберите строку табличной части'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Не(ТекущиеДанные.ИзлишекПорча) И ИспользоватьСтатусыПересчетовТоваров Тогда
		ТекстСообщения = НСтр("ru='Невозможно изменить качество в строке, добавленной до начала пересчета. Воспользуйтесь командой ""Разбить строку"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Товары["+Формат(ТекущиеДанные.НомерСтроки-1,"ЧГ=0")+"].НомерСтроки",,);
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущиеДанные.Характеристика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущиеДанные.Упаковка);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьКачествоЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	СкладыКлиент.ИзменитьКачество(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачествоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Объект.ИспользоватьОтдельнуюЯчейкуПорчи Тогда
		ДополнительныеПараметры.ТекущиеДанные.Ячейка = Объект.ЯчейкаКонсолидацииИспорченныхТоваров;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ТекущиеДанные.Назначение) Тогда
		ТекстВопроса = НСтр("ru = 'Очистить колонку ""Назначение"" для товара с измененным качеством?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьКачествоОчиститьНазначениеЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные", ДополнительныеПараметры.ТекущиеДанные));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачествоОчиститьНазначениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьНазначение = (Результат = КодВозвратаДиалога.Да);
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если ОчиститьНазначение Тогда
		ТекущиеДанные.Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "КоличествоУпаковокФакт";
	ПараметрыРазбиенияСтроки.Заголовок = НСтр("ru='Введите фактическое количество товара в новой строке'");
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Объект.ЯчейкаКонсолидацииИзлишковТоваров) Тогда
			НоваяСтрока.Ячейка = Объект.ЯчейкаКонсолидацииИзлишковТоваров
		КонецЕсли;
		НоваяСтрока.ИзлишекПорча       = Истина;
		НоваяСтрока.Количество         = 0;
		НоваяСтрока.КоличествоУпаковок = 0;
		НоваяСтрока.КоличествоУпаковокОтклонение = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);

		// << 08.08.2024 Петухов А.В., Фактор, #4523
		КоличествоУпаковокОтклонениеИтог = Объект.Товары.Итог("КоличествоУпаковокОтклонение");
		// >> 08.08.2024 Петухов А.В., Фактор, #4523
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)

	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОчиститьСообщения();
	
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоУпаковокФакт = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		
		Если ИспользоватьАдресноеХранение Тогда
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействий);
		Иначе
			ТекущаяСтрока.КоличествоФакт = РезультатВыполнения.Вес;
			
			СтруктураДействий.Вставить("ЗаполнитьФлагРасхождение");
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокОтклонение");
		КонецЕсли;
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		// << 08.08.2024 Петухов А.В., Фактор, #4523
		КоличествоУпаковокОтклонениеИтог = Объект.Товары.Итог("КоличествоУпаковокОтклонение");
		// >> 08.08.2024 Петухов А.В., Фактор, #4523
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
	ДаннныеТСДДляРежимаОтладки= КР_РаботаСТСД.ПолучитьДаннныеТСДДляРежимаОтладки("Строка");
	Если ДаннныеТСДДляРежимаОтладки <> Неопределено Тогда
		// Подменяем типовую функцию по работе с ТСД "МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД"
		ОбработатьШтрихкоды(ДаннныеТСДДляРежимаОтладки);
		Возврат;
	КонецЕсли;
	// >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПараметрыФормы = Новый Структура("ВариантЗаполнения, Пересчет", "ПоТоварамПересчета", Объект.Ссылка);
	ОткрытьФорму("Обработка.ВыгрузкаБазыТоваровВТСД.Форма", ПараметрыФормы);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
//Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипИзмеряемойВеличины");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНазначение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЯчейка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерия.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеРедактирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = '%1'");
	ОтборЭлемента.ПравоеЗначение = СтрШаблон(ОтборЭлемента.ПравоеЗначение, "ОграниченноеРедактирование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ИзлишекПорча");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FormBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//
    // --> Евлахов Игорь Николаевич (Начало) 25.09.2024
	// Задача #4584
	// Начало было
	//Элемент = УсловноеОформление.Элементы.Добавить();

	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокОтклонение.Имя);
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокФакт.Имя);

	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//СписокЗначений = Новый СписокЗначений;
	//СписокЗначений.Добавить(Перечисления.СтатусыПересчетовТоваров.ВРаботе);
	//СписокЗначений.Добавить(Перечисления.СтатусыПересчетовТоваров.Подготовлено);
	//ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	//Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для внесения результата>'"));
	//Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Конец было
	// Задача #4584
	// <-- Евлахов Игорь Николаевич (Конец) 25.09.2024
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНазначение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЯчейка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокФакт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокОтклонение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерия.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);
	
	// --> Евлахов Игорь Николаевич (Начало) 25.09.2024
	// Задача #4584
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["КР_ЗональныеПересчетыЗональныйПересчет"].Имя); 
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["КР_ЗональныеПересчетыЗональныйПересчетЗонаПересчета"].Имя);
	// <-- Евлахов Игорь Николаевич (Конец) 25.09.2024
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеРедактирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = '%1'");
	ОтборЭлемента.ПравоеЗначение = СтрШаблон(ОтборЭлемента.ПравоеЗначение, "НеРедактируется");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FormBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипИзмеряемойВеличины");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокФакт.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<пустая ячейка>'"));
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеРедактирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = '%1'");
	ОтборЭлемента.ПравоеЗначение = СтрШаблон(ОтборЭлемента.ПравоеЗначение, "РедактированиеБезСтатусов");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма);

	//

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины",
											Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	// << 29.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-723
	КР_ПриЧтенииСозданииНаСервере();
	// >> 29.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-723

	НастроитьПоСкладуПомещению();
	ИнициализироватьКомпоновкуДанных(Ложь);
	
	Элементы.ЯчейкаКонсолидацииИзлишковТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуИзлишков;
	Элементы.ЯчейкаКонсолидацииИспорченныхТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуПорчи;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПризнакРасхождение();
	УстановитьСостояниеРедактированияПоСтатусу();
	
	Элементы.ГруппаИнвентаризационныеОписи.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ПересчетТоваров);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПересчетТоваров));
	УстановитьВидимостьЭлементовСерий();
	
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	// Установка видимости/доступности должна быть в конце процедуры "ПриЧтенииСозданииНаСервере"
	КР_УстановитьВидимостьДоступностьЭлементов();
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	
	ИспользоватьАдресноеХранениеТекущее = ИспользоватьАдресноеХранение;
	
	НастроитьПоСкладуПомещению();
	
	Если ИспользоватьАдресноеХранение И Объект.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе Тогда
		Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Подготовлено;
	ИначеЕсли Не ИспользоватьАдресноеХранение И Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Подготовлено Тогда 
		Объект.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе;
	КонецЕсли;
	
	Если ИспользоватьАдресноеХранениеТекущее
		И Не ИспользоватьАдресноеХранение Тогда
		
		Для Каждого СтрТабл Из Объект.Товары Цикл
			
			СтрТабл.Упаковка               = Неопределено;
			СтрТабл.КоличествоУпаковок     = СтрТабл.Количество;
			СтрТабл.КоличествоУпаковокФакт = СтрТабл.КоличествоФакт;
			СтрТабл.КоличествоУпаковокОтклонение = СтрТабл.КоличествоФакт - СтрТабл.КоличествоУпаковок;
			
		КонецЦикла;
		
		// << 08.08.2024 Петухов А.В., Фактор, #4523
		КоличествоУпаковокОтклонениеИтог = Объект.Товары.Итог("КоличествоУпаковокОтклонение");
		// >> 08.08.2024 Петухов А.В., Фактор, #4523
		
	КонецЕсли;
	
	СтруктураЯчеек = Документы.ПересчетТоваров.ПолучитьЯчейкиИзлишковИБракаПоУмолчанию(Объект.Ссылка, Объект.Склад, Объект.Помещение);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЯчеек);
	Элементы.ЯчейкаКонсолидацииИзлишковТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуИзлишков;
	Элементы.ЯчейкаКонсолидацииИспорченныхТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуПорчи;
	
	ИнициализироватьКомпоновкуДанных(Истина);
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	КР_УстановитьВидимостьДоступностьЭлементовПоСкладу();
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	НастроитьПоСкладуПомещению();
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииСервер()
	
	Объект.ПечататьКоличествоПоУчету = Документы.ПересчетТоваров.ПолучитьЗначениеПризнакаПечататьКоличествоПоУчетуПоУмолчанию(Объект.Ссылка, Объект.Ответственный);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	СостояниеРедактирования = СостояниеРедактированияДокумента(Объект.Статус, Объект.Проведен, ИспользоватьСтатусыПересчетовТоваров);
	
	Если Не (СостояниеРедактирования = "ПолноеРедактирование" Или СостояниеРедактирования = "ОграниченноеРедактирование") Тогда
		Возврат;
	КонецЕсли;
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий, Текст, ТекущиеДанные) Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
	КР_Отказ = Ложь;
	ДанныеЯчеек = КР_РаботаСТСДКлиент.ОбработатьШтрихкодыСЯчейками(ДанныеШтрихкодов, Объект.Склад, КР_Отказ);
	Если КР_Отказ Тогда
		Возврат;
	КонецЕсли;
	// >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
	
	Если Не ШтрихкодированиеНоменклатурыКлиент.ШтрихкодыВалидны(ДанныеШтрихкодов) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменятьКоличество = Не (СостояниеРедактирования = "НеРедактируется"); 
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействийСДобавленнымиСтроками);
	
	Если СостояниеРедактирования = "ОграниченноеРедактирование" Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьФлагИзлишекПорча");
	КонецЕсли;
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействийСИзмененнымиСтроками);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИмяКолонкиКоличество                   = "КоличествоУпаковокФакт";
	СтруктураДействий.НеИспользоватьУпаковки                 = Не ИспользоватьАдресноеХранение;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
		
	// << 14.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1783
	КР_СтруктураПараметров = Новый Структура("ЭтоПересчетТоваров", Истина);
	// 18.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2402
	КР_РаботаСТСДКлиент.ОбработатьДанныеЯчеек(ДанныеЯчеек, Объект.Товары, КэшированныеЗначения, КР_СтруктураПараметров);
	// >> 14.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1783

	// << 08.08.2024 Петухов А.В., Фактор, #4523
	КоличествоУпаковокОтклонениеИтог = Объект.Товары.Итог("КоличествоУпаковокОтклонение");
	// >> 08.08.2024 Петухов А.В., Фактор, #4523
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПересчетТоваров));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	УстановитьВидимостьЭлементовСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
	Если Объект.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе Тогда
		Объект.Дата = ТекущаяДатаСеанса();
		Объект.БлокироватьЯчейки = Истина;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено
		ИЛИ Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Подготовлено Тогда
		Объект.БлокироватьЯчейки = Ложь;
	КонецЕсли;
	
	ПрошлыйСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Статус");
	
	Если ПрошлыйСтатус = Перечисления.СтатусыПересчетовТоваров.Подготовлено 
		И Объект.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе Тогда
		
		Объект.УчетныеДанныеЗаполнены = Ложь;
		
	КонецЕсли;
	
	УстановитьСостояниеРедактированияПоСтатусу();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСервер()
	
	// << 14.06.2024 Вдовенко С.А., КРОК, A2105505-2661
	// при изменениях в данной функции, необходимо аналогично доработать КР_ОстаткиТоваровПоДаннымУчета
	// >> 14.06.2024 Вдовенко С.А., КРОК, A2105505-2661
	
	УстановитьЗначениеПараметраНастроек(ОтборПересчета.Настройки, "ДатаОстатков", ?(ЗначениеЗаполнено(Объект.Дата),
		Новый Граница(Объект.Дата, ВидГраницы.Включая),
		Новый Граница(ТекущаяДатаСеанса(), ВидГраницы.Включая)));
	
	Если ИспользоватьАдресноеХранение Тогда
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоЯчейкам");
	Иначе	
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоСкладу");
	КонецЕсли;
	
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	КР_ЗаменитьСхемуКомпановкиДляРежимаПоВсемПомещениям(СхемаКомпоновкиДанных);
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыВЯчейках.Упаковка", Неопределено));
	СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос = ТекстЗапроса;

	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(ОтборПересчета);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ОтборПересчета.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Объект.Товары.Загрузить(ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных));
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	КР_УстановитьВиртуальнуюЯчейку();
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПризнакРасхождение();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактПоУчетуСервер()
	
	Для Каждого СтрТабл Из Объект.Товары Цикл
		
		СтрТабл.КоличествоФакт = СтрТабл.Количество;
		СтрТабл.КоличествоУпаковокФакт = СтрТабл.КоличествоУпаковок;
		СтрТабл.Расхождение = (СтрТабл.КоличествоФакт <> СтрТабл.Количество) Или (СтрТабл.КоличествоУпаковок <> СтрТабл.КоличествоУпаковокФакт);
		СтрТабл.КоличествоУпаковокОтклонение = СтрТабл.КоличествоУпаковокФакт - СтрТабл.КоличествоУпаковок;
		
		
	КонецЦикла;
	
	// << 08.08.2024 Петухов А.В., Фактор, #4523
	КоличествоУпаковокОтклонениеИтог = Объект.Товары.Итог("КоличествоУпаковокОтклонение");
	// >> 08.08.2024 Петухов А.В., Фактор, #4523
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоСкладуПомещению()

	// --> Евлахов Игорь Николаевич (Начало) 25.09.2024
	// Задача #4584
	// Начало было
	//ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата);
	// Конец было
	ИспользоватьАдресноеХранение = Ложь;
		
	Если ЗначениеЗаполнено(Объект.Помещение) Тогда
		ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.Дата);		
	Иначе
		ВидСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "КР_ВидСклада");
		РежимРаботыПоВсемПомещениям = Не ЗначениеЗаполнено(Объект.Помещение)
				И ВидСклада = Перечисления.КР_ВидыСкладов.Магазин;
				
		Если РежимРаботыПоВсемПомещениям Тогда
			ИспользоватьАдресноеХранение = Истина;		
		КонецЕсли;
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 25.09.2024
	
	ИспользоватьСтатусыПересчетовТоваров = СкладыСервер.ИспользоватьСтатусыПересчетовТоваров(Объект.Склад);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение",Объект.Склад,Объект.Помещение));
	
	ИспользоватьКачество = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	
	Элементы.ИспользоватьЯчейкуПорчи.Видимость              = ИспользоватьКачество И ИспользоватьАдресноеХранение;
	Элементы.ЯчейкаКонсолидацииИспорченныхТоваров.Видимость = ИспользоватьКачество И ИспользоватьАдресноеХранение;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПересчетТоваров));
	
	Элементы.Помещение.Видимость = СкладыСервер.ИспользоватьСкладскиеПомещения(Объект.Склад,Объект.Дата);
	
	Элементы.ТоварыЯчейка.Видимость                         = ИспользоватьАдресноеХранение;
	Элементы.ТоварыУпаковка.Видимость                       = ИспользоватьАдресноеХранение;
	Элементы.БлокироватьЯчейки.Видимость                    = ИспользоватьАдресноеХранение;
	Элементы.ИспользоватьЯчейкуИзлишки.Видимость            = ИспользоватьАдресноеХранение;
	Элементы.ЯчейкаКонсолидацииИзлишковТоваров.Видимость    = ИспользоватьАдресноеХранение;
	Элементы.ИспользоватьЯчейкуПорчи.Видимость              = ИспользоватьАдресноеХранение;
	Элементы.ЯчейкаКонсолидацииИспорченныхТоваров.Видимость = ИспользоватьАдресноеХранение;
	
	ОтображениеДекорацииЕстьТоварыКОформлениюСкладскихАктовИнвентаризационныеОписи();

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновкуДанных(ВсегдаИспользоватьНастройкиПоУмолчанию)
	
	Если ИспользоватьАдресноеХранение Тогда
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоЯчейкам");
	Иначе
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоСкладу");
	КонецЕсли;
	
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	КР_ЗаменитьСхемуКомпановкиДляРежимаПоВсемПомещениям(СхемаКомпоновкиДанных);
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	ОтборПересчета.Инициализировать(ИсточникНастроек);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекНастройки = ТекОбъект.ОтборПересчета.Получить();
	Если ТекНастройки = Неопределено
		Или ВсегдаИспользоватьНастройкиПоУмолчанию Тогда
		ОтборПересчета.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		ОтборПересчета.ЗагрузитьНастройки(ТекНастройки);
	КонецЕсли;
	
	ОтборПересчета.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	УстановитьЗначениеПараметраНастроек(ОтборПересчета.Настройки, "Склад" , Объект.Склад);
	УстановитьЗначениеПараметраНастроек(ОтборПересчета.Настройки, "Помещение", Объект.Помещение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметраНастроек(Настройки, ИмяПараметра, Значение)
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает состояние редактирования документа.
//
// Параметры:
//	СтатусДокумента - ПеречислениеСсылка.СтатусыПересчетовТоваров - статус документа,
//	ПризнакПроведенности - Булево - признак проведенности документа.
//
// Возвращаемое значение:
//	Строка
//
&НаКлиентеНаСервереБезКонтекста
Функция СостояниеРедактированияДокумента(СтатусДокумента, ПризнакПроведенности, ИспользоватьСтатусыПересчетовТоваров)
	
	Если Не ИспользоватьСтатусыПересчетовТоваров Тогда
		СостояниеРедактирования = "РедактированиеБезСтатусов";	
	ИначеЕсли ПризнакПроведенности Тогда
		Если СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Выполнено") Тогда
			СостояниеРедактирования = "НеРедактируется";
		ИначеЕсли СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.ВнесениеРезультатов") Тогда
			СостояниеРедактирования = "ОграниченноеРедактирование";
		ИначеЕсли СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.ВРаботе") Тогда
		// --> Евлахов Игорь Николаевич (Начало) 25.09.2024
		// Задача #4584
			// Начало было
			//СостояниеРедактирования = "НеРедактируется";
			// Конец было
			СостояниеРедактирования = "ПолноеРедактирование"; 
		ИначеЕсли СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.злКПроверке") Тогда
			СостояниеРедактирования = "НеРедактируется";
		// Задача #4584
		// <-- Евлахов Игорь Николаевич (Конец) 25.09.2024
		ИначеЕсли СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Подготовлено") Тогда
			СостояниеРедактирования = "ПолноеРедактирование";
		КонецЕсли;
	Иначе
		СостояниеРедактирования = "ПолноеРедактирование";
	КонецЕсли;
	
	Возврат СостояниеРедактирования;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеРедактированияПоСтатусу()
	
		СостояниеРедактирования = СостояниеРедактированияДокумента(Объект.Статус, Объект.Проведен, ИспользоватьСтатусыПересчетовТоваров);
	
	Элементы.Склад.ТолькоПросмотр = (Не СостояниеРедактирования = "ПолноеРедактирование" И Не СостояниеРедактирования = "РедактированиеБезСтатусов");
	Элементы.Помещение.ТолькоПросмотр = (Не СостояниеРедактирования = "ПолноеРедактирование" И Не СостояниеРедактирования = "РедактированиеБезСтатусов");
	Элементы.ТоварыЗаполнить.Доступность = (СостояниеРедактирования = "ПолноеРедактирование" Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	
	// --> Евлахов Игорь Николаевич (Начало) 24.07.2024
	// Задача #4485
	Элементы["КР_ЗаполнитьФактИзЗональныхПересчетов"].Доступность = (СостояниеРедактирования = "ПолноеРедактирование" Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	Элементы["КР_ЗаполнитьЗональныеПересчеты"].Доступность = (СостояниеРедактирования = "ПолноеРедактирование" Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	Элементы["злЗаполнитьКоличествоПоУчету"].Доступность = (СостояниеРедактирования = "ПолноеРедактирование" Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	// <-- Евлахов Игорь Николаевич (Конец) 24.07.2024

	// --> Евлахов Игорь Николаевич (Начало) 25.09.2024
	// Задача #4584
	// Начало было
	//Элементы.ТоварыЗаполнитьФактПоУчету.Доступность = (Объект.Статус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов 
	//	Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	// Конец было
	Элементы.ТоварыЗаполнитьФактПоУчету.Доступность = 
		(Объект.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе 
		ИЛИ СостояниеРедактирования = "РедактированиеБезСтатусов");
		
	Элементы.Склад.ТолькоПросмотр = 
		НЕ (СостояниеРедактирования = "ПолноеРедактирование" 
		ИЛИ СостояниеРедактирования = "РедактированиеБезСтатусов");
	Элементы.Помещение.ТолькоПросмотр = 
		НЕ (СостояниеРедактирования = "ПолноеРедактирование" 
		ИЛИ СостояниеРедактирования = "РедактированиеБезСтатусов");  
	Элементы.КР_ПриказНаИнвентаризациюТоваров.ТолькоПросмотр = 
		НЕ (СостояниеРедактирования = "ПолноеРедактирование" 
		ИЛИ СостояниеРедактирования = "РедактированиеБезСтатусов");
	Элементы.Ответственный.ТолькоПросмотр = 
		НЕ (СостояниеРедактирования = "ПолноеРедактирование" 
		ИЛИ СостояниеРедактирования = "РедактированиеБезСтатусов");
	// <-- Евлахов Игорь Николаевич (Конец) 25.09.2024
	
	Элементы.ИзменитьКачество.Доступность = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование" 
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	
	Элементы.ТоварыРазбитьСтроку.Доступность = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование" 
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	
	Элементы.ТоварыКонтекстноеМенюРазбитьСтроку.Доступность = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование" 
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	
	Элементы.ТоварыПоискПоШтрихкоду.Доступность = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование" 
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	
	Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование"
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	
	Элементы.ТоварыВыгрузитьДанныеВТСД.Доступность = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование"
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	
	Элементы.ТоварыПолучитьВес.Доступность = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование"
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
		
	// --> Евлахов Игорь Николаевич (Начало) 25.09.2024
	// Задача #4584
	// Начало было
	//Элементы.ТолькоРасхождения.Доступность = СостояниеРедактирования <> "ПолноеРедактирование";
	// Конец было 
	Элементы["КР_ЗональныеПересчеты"].ИзменятьСоставСтрок = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование"
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	
	Элементы["КР_ЗональныеПересчеты"].ИзменятьПорядокСтрок = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование"
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	// <-- Евлахов Игорь Николаевич (Конец) 25.09.2024
	
	Элементы.Товары.ИзменятьСоставСтрок = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование"
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	
	Элементы.Товары.ИзменятьПорядокСтрок = 
		(СостояниеРедактирования = "ПолноеРедактирование" 
		Или СостояниеРедактирования = "ОграниченноеРедактирование"
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
		
	// --> Евлахов Игорь Николаевич (Начало) 25.09.2024
	// Задача #4584
	// Начало было
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	//Элементы.КР_ЗагрузитьИзВнешнегоФайла.Доступность = 
	//	(Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Выполнено")
	//	ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.ВнесениеРезультатов"));
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	// Конец было
	Элементы.КР_ЗагрузитьИзВнешнегоФайла.Доступность = 
		(Объект.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе
		Или СостояниеРедактирования = "РедактированиеБезСтатусов");
	// <-- Евлахов Игорь Николаевич (Конец) 25.09.2024
	
	Если Не Объект.Проведен Тогда
		Элементы.БлокироватьЯчейки.Доступность = Ложь;
	КонецЕсли;
	
	ОтображениеДекорацииЕстьТоварыКОформлениюСкладскихАктовИнвентаризационныеОписи();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакРасхождение()
	
	Для Каждого СтрТабл Из Объект.Товары Цикл
		СтрТабл.Расхождение = СтрТабл.КоличествоФакт <> СтрТабл.Количество Или СтрТабл.КоличествоУпаковок <> СтрТабл.КоличествоУпаковокФакт;
		СтрТабл.КоличествоУпаковокОтклонение = СтрТабл.КоличествоУпаковокФакт - СтрТабл.КоличествоУпаковок;
	КонецЦикла;
	
	// << 08.08.2024 Петухов А.В., Фактор, #4523
	КоличествоУпаковокОтклонениеИтог = Объект.Товары.Итог("КоличествоУпаковокОтклонение");
	// >> 08.08.2024 Петухов А.В., Фактор, #4523
	
КонецПроцедуры

&НаСервере
Функция КоличествоФактЗаполнено()
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КоличествоФакт", 0));
	Возврат НайденныеСтроки.Количество() <> Объект.Товары.Количество();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Факт");
	СтруктураДействий.Вставить("ЗаполнитьФлагРасхождение");
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокОтклонение");
	
КонецПроцедуры

&НаКлиенте
Функция СкладПомещениеЗаполнены()

	Результат = Истина;
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Помещение)
			И Элементы.Помещение.Видимость Тогда
			
			// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
			ВидСклада = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Склад, "КР_ВидСклада");
			Если ВидСклада = ПредопределенноеЗначение("Перечисление.КР_ВидыСкладов.Магазин") Тогда
				// Для склада с типом "Магазин" возможен вариант работы без заполнения помещения
				Возврат Истина;
			КонецЕсли;
			// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
			Результат = Ложь;
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Помещение"".
				|Для выполнения действия необходимо указать помещение, в котором проводится пересчет'");
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Помещение","Объект");
			
		КонецЕсли;
		
	Иначе
		
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Склад"".
			|Для выполнения действия необходимо указать склад, на котором проводится пересчет'");
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Склад","Объект");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ТоварыКоличествоУпаковокОтклонениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокОтклонение(СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОтображениеДекорацииЕстьТоварыКОформлениюСкладскихАктовИнвентаризационныеОписи()

	Если ЗначениеЗаполнено(Объект.Склад)
		И Объект.Проведен
		И Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено Тогда
		
		ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = 
			СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(Объект.Склад, Объект.Дата); 
		
		МассивСтрок = Новый Массив;
		
		Если ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач 
			И ПравоДоступа("Использование", Метаданные.Обработки.ПомощникОформленияСкладскихАктов) Тогда 
			ТаблицаНоменклатуры = Обработки.ПомощникОформленияСкладскихАктов.ТоварыКОформлениюСкладскихАктов(Объект.Склад,,,Объект.Дата);
			Если ТаблицаНоменклатуры.Количество() > 0 Тогда
				МассивСтрок.Добавить(НСтр("ru='Не по всем расхождениям оформлены складские акты.'")+ " ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Оформить'") + Символы.ПС ,,,,"ПомощникОформленияСкладскихАктов"));
				МассивСтрок.Добавить("." + Символы.ПС);
			КонецЕсли;
		КонецЕсли;
		
		Если ПравоДоступа("Изменение", Метаданные.Документы.ИнвентаризационнаяОпись) Тогда 
			ПараметрыФормирования = УправлениеПечатьюУТВызовСервера.ПолучитьПараметрыФормирования(Объект.Ссылка);
			ОформленныеОписи.ЗагрузитьЗначения(ПараметрыФормирования.Описи);
			ВыборкаОрганизаций = ПараметрыФормирования.Организации;
			КоличествоОрганизаций = ВыборкаОрганизаций.Количество();
			Если КоличествоОрганизаций > 0 Тогда
				МассивСтрок.Добавить(НСтр("ru='Этот документ учитывается в'")+ " ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='инвентаризационных описях'"),,,,"СписокОписей"));
				Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда 		
					МассивСтрок.Добавить(" " + НСтр("ru='по'")+ " " + КоличествоОрганизаций + " ");
					МассивСтрок.Добавить(ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
						КоличествоОрганизаций, 
						НСтр("ru='организации'"), НСтр("ru='организациям'"), НСтр("ru='организациям'"),"м"));
				КонецЕсли;
				МассивСтрок.Добавить(".");
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПересчетТоваров", Объект.Ссылка);
			Запрос.УстановитьПараметр("Склад", Объект.Склад);
			Запрос.УстановитьПараметр("ДатаТекущегоПересчета", НачалоДня(Объект.Дата));
			Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(Объект.Дата));
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПересчетТоваровТовары.Номенклатура,
			|	ПересчетТоваровТовары.Характеристика,
			|	ПересчетТоваровТовары.Серия,
			|	ПересчетТоваровТовары.Назначение
			|ПОМЕСТИТЬ СписокТоваров
			|ИЗ
			|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
			|ГДЕ
			|	ПересчетТоваровТовары.Ссылка = &ПересчетТоваров
			|	И НЕ ПересчетТоваровТовары.Количество = ПересчетТоваровТовары.КоличествоФакт
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОприходованиеИзлишковТоваров.Ссылка.Дата КАК Дата,
			|	ОприходованиеИзлишковТоваров.Ссылка.Организация
			|ПОМЕСТИТЬ СкладскиеАкты
			|ИЗ
			|	Документ.ОприходованиеИзлишковТоваров.Товары КАК ОприходованиеИзлишковТоваров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокТоваров КАК СписокТоваров
			|		ПО (СписокТоваров.Номенклатура = ОприходованиеИзлишковТоваров.Номенклатура)
			|			И (СписокТоваров.Характеристика = ОприходованиеИзлишковТоваров.Характеристика)
			|			И ОприходованиеИзлишковТоваров.Серия = СписокТоваров.Серия
			|			И ОприходованиеИзлишковТоваров.Назначение = СписокТоваров.Назначение
			|ГДЕ
			|	ОприходованиеИзлишковТоваров.Ссылка.Проведен
			|	И ОприходованиеИзлишковТоваров.Ссылка.Склад = &Склад
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СписаниеНедостачТоваровТовары.Ссылка.Дата,
			|	СписаниеНедостачТоваровТовары.Ссылка.Организация
			|ИЗ
			|	Документ.СписаниеНедостачТоваров.Товары КАК СписаниеНедостачТоваровТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокТоваров КАК СписокТоваров
			|		ПО (СписокТоваров.Номенклатура = СписаниеНедостачТоваровТовары.Номенклатура)
			|			И (СписокТоваров.Характеристика = СписаниеНедостачТоваровТовары.Характеристика)
			|			И СписаниеНедостачТоваровТовары.Серия = СписокТоваров.Серия
			|			И СписаниеНедостачТоваровТовары.Назначение = СписокТоваров.Назначение
			|ГДЕ
			|	СписаниеНедостачТоваровТовары.Ссылка.Проведен
			|	И СписаниеНедостачТоваровТовары.Ссылка.Склад = &Склад
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПересортицаТоваровТовары.Ссылка.Дата,
			|	ПересортицаТоваровТовары.Ссылка.Организация
			|ИЗ
			|	Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокТоваров КАК СписокТоваров
			|		ПО (СписокТоваров.Номенклатура = ПересортицаТоваровТовары.Номенклатура)
			|			И (СписокТоваров.Характеристика = ПересортицаТоваровТовары.Характеристика)
			|			И ПересортицаТоваровТовары.Серия = СписокТоваров.Серия
			|			И ПересортицаТоваровТовары.Назначение = СписокТоваров.Назначение
			|ГДЕ
			|	ПересортицаТоваровТовары.Ссылка.Проведен
			|	И ПересортицаТоваровТовары.Ссылка.Склад = &Склад
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПорчаТоваровТовары.Ссылка.Дата,
			|	ПорчаТоваровТовары.Ссылка.Организация
			|ИЗ
			|	Документ.ПорчаТоваров.Товары КАК ПорчаТоваровТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокТоваров КАК СписокТоваров
			|		ПО (СписокТоваров.Номенклатура = ПорчаТоваровТовары.Номенклатура)
			|			И (СписокТоваров.Характеристика = ПорчаТоваровТовары.Характеристика)
			|			И ПорчаТоваровТовары.Серия = СписокТоваров.Серия
			|			И ПорчаТоваровТовары.Назначение = СписокТоваров.Назначение
			|ГДЕ
			|	ПорчаТоваровТовары.Ссылка.Проведен
			|	И ПорчаТоваровТовары.Ссылка.Склад = &Склад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	МАКСИМУМ(СкладскиеАкты.Дата) КАК Дата,
			|	СкладскиеАкты.Организация
			|ПОМЕСТИТЬ ОрганизацииИзАктов
			|ИЗ
			|	СкладскиеАкты КАК СкладскиеАкты
			|
			|СГРУППИРОВАТЬ ПО
			|	СкладскиеАкты.Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ОрганизацииИзАктов.Организация
			|ИЗ
			|	ОрганизацииИзАктов КАК ОрганизацииИзАктов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризационнаяОпись КАК ИнвентаризационнаяОпись
			|		ПО (ИнвентаризационнаяОпись.Проведен)
			|			И (ИнвентаризационнаяОпись.Склад = &Склад)
			|			И (ИнвентаризационнаяОпись.Организация = ОрганизацииИзАктов.Организация)
			|			И (ОрганизацииИзАктов.Дата МЕЖДУ ИнвентаризационнаяОпись.ДатаНачала И КОНЕЦПЕРИОДА(ИнвентаризационнаяОпись.ДатаОкончания, ДЕНЬ))
			|ГДЕ
			|	ИнвентаризационнаяОпись.Ссылка ЕСТЬ NULL ";
			УстановитьПривилегированныйРежим(Истина);
			ВыборкаОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
			УстановитьПривилегированныйРежим(Ложь);
			ОрганизацииПоКоторымОписиОтсутствуют.ЗагрузитьЗначения(ВыборкаОрганизаций);
			КоличествоОрганизацийБезОписей = ВыборкаОрганизаций.Количество();
			Если КоличествоОрганизацийБезОписей > 0 Тогда
				ТекстРазделителя = ?(МассивСтрок.Количество() > 0, " ", "");
				МассивСтрок.Добавить(ТекстРазделителя + НСтр("ru='Необходимо'") + " ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='сформировать'"),,,,"СформироватьОписи"));
				МассивСтрок.Добавить(Символы.НПП + НСтр("ru='описи по'") + Символы.НПП + КоличествоОрганизацийБезОписей + " " + 
				ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
					КоличествоОрганизацийБезОписей, 
					НСтр("ru='организации'"), НСтр("ru='организациям'"), НСтр("ru='организациям'"), "м") + ". ");
			КонецЕсли;
			
		КонецЕсли;
		
		ИнвентаризационныйПериодНеоформленныхСкладскихАктов.ДатаНачала = НачалоДня(Объект.Дата);
		ИнвентаризационныйПериодНеоформленныхСкладскихАктов.ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());		
		
		Если МассивСтрок.Количество() = 0 Тогда 
			Элементы.ГруппаОформитьСкладскиеАкты.ТекущаяСтраница = Элементы.ГруппаДекорацияНеВидна;
		Иначе
			Элементы.ГруппаОформитьСкладскиеАкты.ТекущаяСтраница = Элементы.ГруппаДекорацияВидна;
			Элементы.ДекорацииЕстьТоварыКОформлениюСкладскихАктовИнвентаризационныеОписи.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		КонецЕсли;
	Иначе
		Элементы.ГруппаОформитьСкладскиеАкты.ТекущаяСтраница = Элементы.ГруппаДекорацияНеВидна;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокОтклонение(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения", "Факт");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Факт");
	СтруктураДействий.Вставить("ЗаполнитьФлагРасхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацииЕстьТоварыКОформлениюСкладскихАктовИнвентаризационныеОписиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ДекорацииЕстьТоварыКОформлениюСкладскихАктовИнвентаризационныеОписиОбработкаНавигационнойСсылкиЗавершение", ЭтаФорма);
	Если НавигационнаяСсылка = "ПомощникОформленияСкладскихАктов" Тогда
		
		ПараметрыФормы = Новый Структура("Склад, ИнвентаризационныйПериод", Объект.Склад, ИнвентаризационныйПериодНеоформленныхСкладскихАктов);
		ОткрытьФорму("Обработка.ПомощникОформленияСкладскихАктов.Форма", ПараметрыФормы, ЭтаФорма, , , , Оповещение);
		
	ИначеЕсли НавигационнаяСсылка = "СписокОписей" Тогда
		
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("ДатаНачала",ИнвентаризационныйПериодНеоформленныхСкладскихАктов.ДатаНачала);
		ПараметрыФормирования.Вставить("ДатаОкончания",ИнвентаризационныйПериодНеоформленныхСкладскихАктов.ДатаОкончания);
		ПараметрыФормирования.Вставить("Склад", Объект.Склад);
		ПараметрыФормирования.Вставить("ОтметитьОрганизации",ОрганизацииПоКоторымОписиОтсутствуют.ВыгрузитьЗначения());
		ПараметрыФормирования.Вставить("Описи",ОформленныеОписи.ВыгрузитьЗначения());
		
		ОткрытьФорму("Документ.ИнвентаризационнаяОпись.Форма.ФормаПечати",
			ПараметрыФормирования, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ИначеЕсли НавигационнаяСсылка = "СформироватьОписи" Тогда
		
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("ДатаНачала",ИнвентаризационныйПериодНеоформленныхСкладскихАктов.ДатаНачала);
		ПараметрыФормирования.Вставить("ДатаОкончания",ИнвентаризационныйПериодНеоформленныхСкладскихАктов.ДатаОкончания);
		ПараметрыФормирования.Вставить("Склад", Объект.Склад);
		ПараметрыФормирования.Вставить("ОтметитьОрганизации",ОрганизацииПоКоторымОписиОтсутствуют.ВыгрузитьЗначения());
		
		ОткрытьФорму("Документ.ИнвентаризационнаяОпись.Форма.ФормаФормирование",
			ПараметрыФормирования, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацииЕстьТоварыКОформлениюСкладскихАктовИнвентаризационныеОписиОбработкаНавигационнойСсылкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОтображениеДекорацииЕстьТоварыКОформлениюСкладскихАктовИнвентаризационныеОписи();
КонецПроцедуры

// --> Евлахов Игорь Николаевич (Начало) 25.07.2024
// Задача #4485
&НаСервере
Процедура ЗаполнитьКоличествоПоУчетуСервер()
	
	ДатаОстатков = ?(ЗначениеЗаполнено(Объект.Дата),
		Новый Граница(Объект.Дата, ВидГраницы.Включая),
		Новый Граница(ТекущаяДатаСеанса(), ВидГраницы.Включая));		
		
	ИспользоватьТоварыВЯчейках = Ложь;
		
	Если ЗначениеЗаполнено(Объект.Помещение) Тогда
		ИспользоватьТоварыВЯчейках = ИспользоватьАдресноеХранение;		
	Иначе
		ВидСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "КР_ВидСклада");
		РежимРаботыПоВсемПомещениям = Не ЗначениеЗаполнено(Объект.Помещение)
				И ВидСклада = Перечисления.КР_ВидыСкладов.Магазин;
				
		Если РежимРаботыПоВсемПомещениям Тогда
			ИспользоватьТоварыВЯчейках = Истина;		
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьТоварыВЯчейках Тогда
		
		#Область ТекстЗапроса
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Товары.Номенклатура КАК Номенклатура,
		               |	Товары.Характеристика КАК Характеристика,
		               |	Товары.Упаковка КАК Упаковка,
		               |	Товары.Назначение КАК Назначение,
		               |	Товары.Ячейка КАК Ячейка,
		               |	Товары.Серия КАК Серия
		               |ПОМЕСТИТЬ ВТИсходныеДанные
		               |ИЗ
		               |	&Товары КАК Товары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		               |	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		               |	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
		               |	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
		               |	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		               |	ТоварыВЯчейкахОстатки.Серия КАК Серия,
		               |	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК КоличествоУпаковок,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 0) = 0
		               |			ТОГДА ТоварыВЯчейкахОстатки.ВНаличииОстаток
		               |		ИНАЧЕ ТоварыВЯчейкахОстатки.ВНаличииОстаток * &ТекстЗапросаКоэффициентУпаковки
		               |	КОНЕЦ КАК Количество
		               |ИЗ
		               |	РегистрНакопления.ТоварыВЯчейках.Остатки(
		               |			&ДатаОстатков,
		               |			Ячейка.Владелец = &Склад
		               |				И (Номенклатура, Характеристика, Упаковка, Назначение, Ячейка, Серия) В
		               |					(ВЫБРАТЬ
		               |						ВТИсходныеДанные.Номенклатура КАК Номенклатура,
		               |						ВТИсходныеДанные.Характеристика КАК Характеристика,
		               |						ВТИсходныеДанные.Упаковка КАК Упаковка,
		               |						ВТИсходныеДанные.Назначение КАК Назначение,
		               |						ВТИсходныеДанные.Ячейка КАК Ячейка,
		               |						ВТИсходныеДанные.Серия КАК Серия
		               |					ИЗ
		               |						ВТИсходныеДанные КАК ВТИсходныеДанные)) КАК ТоварыВЯчейкахОстатки";
		
		#КонецОбласти
		
		ИсточникУпаковки = "ТоварыВЯчейкахОстатки.Упаковка";
		МодульМенеджер = Справочники.УпаковкиЕдиницыИзмерения;
		ТекстЗапросаКоэффициентаУпаковки = МодульМенеджер.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, Неопределено);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки", ТекстЗапросаКоэффициентаУпаковки);
		
		КолонкиОтбора = "Номенклатура, Характеристика, Упаковка, Назначение, Ячейка, Серия";
		ИсходныеТовары = Объект.Товары.Выгрузить(,КолонкиОтбора);
		ИсходныеТовары.Свернуть(КолонкиОтбора);
	Иначе	
		#Область ТекстЗапроса
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Товары.Номенклатура КАК Номенклатура,
		               |	Товары.Характеристика КАК Характеристика,
		               |	Товары.Назначение КАК Назначение,
		               |	Товары.Серия КАК Серия
		               |ПОМЕСТИТЬ ВТИсходныеДанные
		               |ИЗ
		               |	&Товары КАК Товары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		               |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		               |	ТоварыНаСкладахОстатки.Назначение КАК Назначение,
		               |	ТоварыНаСкладахОстатки.Серия КАК Серия,
		               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Количество,
		               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК КоличествоУпаковок
		               |ИЗ
		               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
		               |			&ДатаОстатков,
		               |			Склад = &Склад
		               |				И Помещение = &Помещение
		               |				И (Номенклатура, Характеристика, Назначение, Серия) В
		               |					(ВЫБРАТЬ
		               |						ВТИсходныеДанные.Номенклатура КАК Номенклатура,
		               |						ВТИсходныеДанные.Характеристика КАК Характеристика,
		               |						ВТИсходныеДанные.Назначение КАК Назначение,
		               |						ВТИсходныеДанные.Серия КАК Серия
		               |					ИЗ
		               |						ВТИсходныеДанные КАК ВТИсходныеДанные)) КАК ТоварыНаСкладахОстатки";
		
		#КонецОбласти 
		
		КолонкиОтбора = "Номенклатура, Характеристика, Назначение, Серия";
		ИсходныеТовары = Объект.Товары.Выгрузить(,КолонкиОтбора);
		ИсходныеТовары.Свернуть(КолонкиОтбора);
	КонецЕсли;
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("Помещение", Объект.Помещение);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Товары", ИсходныеТовары);
	
	Результат 	= Запрос.Выполнить();
	Выборка 	= Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		ПараметрыОтбора = Новый Структура(КолонкиОтбора);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка); 
		
		СтрокиПоиска = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого СтрокаТаблицы Из СтрокиПоиска Цикл
			СтрокаТаблицы.КоличествоУпаковок = Выборка.КоличествоУпаковок;
			СтрокаТаблицы.Количество = Выборка.Количество;		
		КонецЦикла;
	КонецЦикла;

	ЗаполнитьПризнакРасхождение();
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти


#Область КР_ДополнительныеПроцедурыИФункции

#Область КР_ОбработчикиСобытийФормы

// << 29.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-723
&НаСервере
Процедура КР_ПриЧтенииСозданииНаСервере()

	// << 05.08.2024 Петухов А.В., Фактор, #4524
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Объект.КР_УпорядочиваниеТоваровВЯчейках Тогда
			Объект.Помещение = ПредопределенноеЗначение("Справочник.СкладскиеПомещения.ПустаяСсылка");
			Объект.КР_НеФормироватьДвижения = Истина;
		КонецЕсли;	
	КонецЕсли;	
	// >> 05.08.2024 Петухов А.В., Фактор, #4524
	
	// КР_НеФормироватьДвижения      
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_НеФормироватьДвижения", Элементы.ШапкаПраво);
	ЭлементФормы.ТолькоПросмотр = Истина; 
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	//КР_ГруппаСтатуса
	КР_ГруппаСтатуса = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(ЭтотОбъект,
		"КР_ГруппаСтатуса", , Элементы.Статус);
	КР_ГруппаСтатуса.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	КР_ГруппаСтатуса.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	КР_ГруппаСтатуса.ОтображатьЗаголовок = Ложь;
	
	Элементы.Переместить(Элементы.Статус, КР_ГруппаСтатуса);

	// КР_ПриказНаИнвентаризациюТоваров
	КР_ПриказНаИнвентаризациюТоваров = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		"Объект.КР_ПриказНаИнвентаризациюТоваров",
		Элементы.ШапкаЛево,
		Элементы.Склад);
	КР_ПриказНаИнвентаризациюТоваров.РедактированиеТекста	= Ложь;
	КР_ПриказНаИнвентаризациюТоваров.КнопкаОчистки			= Истина;
	
	// --> Евлахов Игорь Николаевич (Начало) 24.09.2024
	// Задача #4584
	КР_ПриказНаИнвентаризациюТоваров.УстановитьДействие("ПриИзменении", "Подключаемый_КР_ПриказНаИнвентаризациюТоваровПриИзменении");	
	// <-- Евлахов Игорь Николаевич (Конец) 24.09.2024
	
	// Команда формы "КР_ЗагрузитьИзВнешнегоФайла"
	КомандаФормыКР_ЗагрузитьИзВнешнегоФайла = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект, 
		"КР_ЗагрузитьИзВнешнегоФайла",
		НСтр("ru='Загрузить из внешнего файла'"),
		"КР_ЗагрузитьИзВнешнегоФайла");
		
	// Элемент формы, команда "КР_ЗагрузитьИзВнешнегоФайла"
	КР_ЗагрузитьИзВнешнегоФайла = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		КомандаФормыКР_ЗагрузитьИзВнешнегоФайла,
		Элементы.КоманднаяПанельТовары,
		Элементы.ГруппаТорговоеОборудование);
	КР_ЗагрузитьИзВнешнегоФайла.Картинка	= БиблиотекаКартинок.ЗагрузкаИзВнешнегоИсточника;
	КР_ЗагрузитьИзВнешнегоФайла.Отображение = ОтображениеКнопки.КартинкаИТекст;
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
	// << 12.04.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1449
	// КР_УпорядочиваниеТоваровВЯчейках
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_УпорядочиваниеТоваровВЯчейках", КР_ГруппаСтатуса);
	ЭлементФормы.ВидФлажка = ВидФлажка.Тумблер;
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементФормы.ФорматРедактирования = "БЛ=Инвентаризация; БИ='Упорядочивание товаров в ячейках'";
	ЭлементФормы.УстановитьДействие("ПриИзменении", "КР_УпорядочиваниеТоваровВЯчейкахПриИзменении");
	
	// КР_ЯчейкаКонсолидацииНедостачТоваров
	ГруппаФормы = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_ГруппаШапкаПриДобавленииСтрокНедостача", Элементы.ГруппаШапкаПриДобавленииСтрок);
	ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормы.ОтображатьЗаголовок = Ложь;
	ГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_ЯчейкаКонсолидацииНедостачТоваров", ГруппаФормы);
	ЭлементФормы.Заголовок = НСтр("ru = 'Ячейка недостач'");
	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьДекорациюФормы(
		ЭтотОбъект, "КР_ПротоколУпорядочиванияТоваровВЯчейкахНадпись", Элементы.ГруппаТовары);
	ЭлементФормы.Заголовок = НСтр("ru = 'Протокол упорядочивания товаров в ячейках'");
	ЭлементФормы.Гиперссылка = Истина;
	ЭлементФормы.УстановитьДействие("Нажатие", "КР_ПротоколУпорядочиванияТоваровВЯчейкахНажатие");
	
	КомандаФормы = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ЗаполнитьФактИзЗональныхПересчетов", НСтр("ru = 'Заполнить факт из зональных пересчетов'"));
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КомандаФормы, Элементы.КоманднаяПанельТовары);
	// << 14.06.2024 Вдовенко С.А., КРОК, A2105505-2661
	КомандаФормы.Подсказка = НСтр("ru = 'Заполнить факт из зональных пересчетов'");
	ЭлементФормы.Отображение = ОтображениеКнопки.Картинка;
	ЭлементФормы.Картинка = БиблиотекаКартинок.ЗаполнитьПоДаннымГосИС;
	// >> 14.06.2024 Вдовенко С.А., КРОК, A2105505-2661
	
	КомандаФормы = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_УпорядочитьВЯчейках", НСтр("ru = 'Убрать расхождения на уровне товара'"));
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КомандаФормы, Элементы.КоманднаяПанельТовары);
		
	// ТЧ КР_ЗональныеПересчеты
	СтраницаФормы = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(
		ЭтотОбъект, "КР_ГруппаЗональныеПересчеты", Элементы.СтраницыФормы);
	СтраницаФормы.Заголовок = НСтр("ru = 'Зональные пересчеты'");
	//A2105505-2647
	Если СтраницаФормы.ПутьКДаннымЗаголовка = "" Тогда
		СтраницаФормы.ПутьКДаннымЗаголовка = "Объект.КР_ЗональныеПересчеты.КоличествоСтрок";
	КонецЕсли;
	//A2105505-2647
	ТЧФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_ЗональныеПересчеты", СтраницаФормы);
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_ЗональныеПересчеты.НомерСтроки", ТЧФормы);
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_ЗональныеПересчеты.ЗональныйПересчет.ЗонаПересчета", ТЧФормы);
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, "Объект.КР_ЗональныеПересчеты.ЗональныйПересчет", ТЧФормы);
	// << 07.08.2024 Петухов А.В., Фактор, #4522
	ЭлементФормы.БыстрыйВыбор = Ложь;
	ЭлементФормы.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	// >> 07.08.2024 Петухов А.В., Фактор, #4522
	ЭлементФормы.УстановитьДействие("НачалоВыбора", "КР_ЗональныеПересчетыЗональныйПересчетНачалоВыбора");
	
	КомандаФормы = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(
		ЭтотОбъект, "КР_ЗаполнитьЗональныеПересчеты", НСтр("ru = 'Заполнить'"));
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(
		ЭтотОбъект, КомандаФормы, Элементы.КР_ЗональныеПересчеты.КоманднаяПанель);
	// >> 12.04.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1449
	
	// --> Евлахов Игорь Николаевич (Начало) 25.07.2024
	// Задача #4485
	ИмяКоманды = "злЗаполнитьКоличествоПоУчету";
	ЗаголовокКоманды = НСтр("ru = 'Заполнить количество по учету'");
	ДействиеКоманды = "Подключаемый_злЗаполнитьКоличествоПоУчету";
	
	КомандаФормы = КР_МетодыМодификацииФорм.ДобавитьКомандуФормы(ЭтотОбъект, ИмяКоманды, ЗаголовокКоманды, ДействиеКоманды);
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект, КомандаФормы, Элементы.КоманднаяПанельТовары);
	
	КомандаФормы.Подсказка = НСтр("ru = 'Заполнить количество упаковок товара в ячейке по данным учета, на дату пересчета товаров.'");
	ЭлементФормы.Отображение = ОтображениеКнопки.Картинка;
	ЭлементФормы.Картинка = БиблиотекаКартинок.ТоварыЗагрузить;
	// <-- Евлахов Игорь Николаевич (Конец) 25.07.2024

	// << 08.08.2024 Петухов А.В., Фактор, #4523
	ВсеРеквизиты = ЭтаФорма.ПолучитьРеквизиты();
	ТребуетсяСоздатьРеквизиты = Истина;
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		Если Реквизит.Имя = "КоличествоУпаковокОтклонениеИтог" Тогда
			ТребуетсяСоздатьРеквизиты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ТребуетсяСоздатьРеквизиты Тогда
		мсвРеквизиты = Новый Массив;
		мсвРеквизиты.Добавить(Новый РеквизитФормы("КоличествоУпаковокОтклонениеИтог", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3), , "Отклонение итого", Ложь));
		ЭтаФорма.ИзменитьРеквизиты(мсвРеквизиты);
	КонецЕсли;
	Элементы.Товары.Подвал = Истина;
	Элементы.ТоварыКоличествоУпаковок.ПутьКДаннымПодвала = "Объект.Товары.ИтогКоличествоУпаковок";
	Элементы.ТоварыКоличествоУпаковокФакт.ПутьКДаннымПодвала = "Объект.Товары.ИтогКоличествоУпаковокФакт";
	Элементы.ТоварыКоличествоУпаковокОтклонение.ПутьКДаннымПодвала = "КоличествоУпаковокОтклонениеИтог";
	Элементы.Товары.УстановитьДействие("ПослеУдаления", "КР_ТоварыПослеУдаления");
	// >> 08.08.2024 Петухов А.В., Фактор, #4523
	
	// --> Евлахов Игорь Николаевич (Начало) 24.09.2024
	// Задача #4584
	Элементы.Статус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.ВРаботе"));
	Элементы.Статус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.злКПроверке"));
	Элементы.Статус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Выполнено"));
	
	Элементы.Статус.РежимВыбораИзСписка = Истина;
	// <-- Евлахов Игорь Николаевич (Конец) 24.09.2024
	
КонецПроцедуры // >> 29.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-723

#КонецОбласти

#Область КР_ОбработчикиСобытийЭлементовФормы

// << 08.08.2024 Петухов А.В., Фактор, #4523
&НаКлиенте
Процедура КР_ТоварыПослеУдаления(Элемент)
	КоличествоУпаковокОтклонениеИтог = Объект.Товары.Итог("КоличествоУпаковокОтклонение");
КонецПроцедуры
// >> 08.08.2024 Петухов А.В., Фактор, #4523

// << 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449
&НаКлиенте
Процедура КР_УпорядочиваниеТоваровВЯчейкахПриИзменении(Элемент)
	
	Объект.КР_ПриказНаИнвентаризациюТоваров = ПредопределенноеЗначение("Документ.ИнвентаризационнаяОпись.ПустаяСсылка");
	Объект.КР_ЗональныеПересчеты.Очистить();
	Объект.КР_ЯчейкаКонсолидацииНедостачТоваров = ПредопределенноеЗначение("Справочник.СкладскиеЯчейки.ПустаяСсылка");
	
	КР_УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры // >> 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449

// << 26.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449
&НаКлиенте
Процедура КР_ЗональныеПересчетыЗональныйПересчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.КР_ЗональныеПересчеты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// << 07.08.2024 Петухов А.В., Фактор, #4522
	Если Не ЗначениеЗаполнено(Объект.КР_ПриказНаИнвентаризациюТоваров) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен ""Приказ на инвентаризацию товаров"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"Объект.КР_ПриказНаИнвентаризациюТоваров");
		Возврат;
	КонецЕсли;
	// >> 07.08.2024 Петухов А.В., Фактор, #4522
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		НастройкиКомпоновки, "ЗонаПересчета.Владелец", Объект.Склад);
	
	Если ЗначениеЗаполнено(Объект.КР_ПриказНаИнвентаризациюТоваров) Тогда
		РеквизитыПриказа = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(
			Объект.КР_ПриказНаИнвентаризациюТоваров, "ДатаНачала, ДатаОкончания");
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			НастройкиКомпоновки, "Дата", РеквизитыПриказа.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		// << 07.08.2024 Петухов А.В., Фактор, #4522
		//КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		//	НастройкиКомпоновки, "Дата", РеквизитыПриказа.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		сткДопПараметры =  Новый Структура("ВПользовательскиеНастройки, ЗаменятьСуществующий", Ложь, Ложь);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			НастройкиКомпоновки, "Дата", РеквизитыПриказа.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, Истина, сткДопПараметры);
		// >> 07.08.2024 Петухов А.В., Фактор, #4522
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Помещение) Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			НастройкиКомпоновки, "ЗонаПересчета.Помещение", Объект.Помещение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКомпоновки);
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗональныйПересчет) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗональныйПересчет);
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.КР_ЗональныйПересчетТоваров.ФормаВыбора",
		ПараметрыФормы,
		Элемент, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // >> 26.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449

// << 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449
&НаКлиенте
Процедура КР_ПротоколУпорядочиванияТоваровВЯчейкахНажатие(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияУТВызовСервера.ЭтоПолноправныйПользователь() Тогда
		ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
			Объект.КР_ПротоколУпорядочиванияТоваровВЯчейках, 
			ЭтотОбъект, 
			"Объект.КР_ПротоколУпорядочиванияТоваровВЯчейках",
			НСтр("ru = 'Протокол упорядочивания товаров в ячейках'"));
	Иначе
		ПоказатьЗначение(, Объект.КР_ПротоколУпорядочиванияТоваровВЯчейках);
	КонецЕсли;
	
КонецПроцедуры // >> 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449

// --> Евлахов Игорь Николаевич (Начало) 24.09.2024
// Задача #4584
&НаКлиенте
Процедура Подключаемый_КР_ПриказНаИнвентаризациюТоваровПриИзменении(Элемент)
		
	Если Не ЗначениеЗаполнено(Объект.КР_ПриказНаИнвентаризациюТоваров)
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Выполнено") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КР_ЗональныеПересчеты.Количество() = 0 Тогда
		КР_ЗаполнитьЗональныеПересчетыСервер();	
	Иначе
		МассивИсходныхДанных = Новый Массив();
		
		Для каждого СтрокаТаблицы Из Объект.КР_ЗональныеПересчеты Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЗональныйПересчет) Тогда
				МассивИсходныхДанных.Добавить(СтрокаТаблицы.ЗональныйПересчет);
			КонецЕсли;
		КонецЦикла;
		КР_ЗаполнитьЗональныеПересчетыСервер();
		
		МассивНовыхДанных = Новый Массив();
		Для каждого СтрокаТаблицы Из Объект.КР_ЗональныеПересчеты Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЗональныйПересчет) Тогда
				МассивНовыхДанных.Добавить(СтрокаТаблицы.ЗональныйПересчет);
			КонецЕсли;
		КонецЦикла;
		
		РазностьМассивов1 = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивИсходныхДанных, МассивНовыхДанных);
		РазностьМассивов2 = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивНовыхДанных, МассивИсходныхДанных);
		
		Если 	(РазностьМассивов1.Количество() > 0)
			ИЛИ (РазностьМассивов2.Количество() > 0) Тогда
			
			Если Объект.Товары.Количество() = 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Таблица ""Зональные пересчеты"" перезаполнена.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Таблица ""Зональные пересчеты"" перезаполнена. Требуется повторно заполнить таблицу ""Товаров"".'");
			КонецЕсли;
			
			ПоказатьПредупреждение(,ТекстСообщения);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область КР_ОбработчикиКомандФормы

&НаКлиенте
Процедура КР_ЗаполнитьФактИзЗональныхПересчетов(Команда)
	
	// --> Евлахов Игорь Николаевич (Начало) 27.08.2024
	// Задача #4520
	// Начало было
	//КР_ЗаполнитьФактИзЗональныхПересчетовСервер();
	// Конец было	
	Если Не СкладПомещениеЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Неопределено;
        
		Оповещение = Новый ОписаниеОповещения("злВопросЗаполнитьТоваромСНастройкамиПоУмолчаниюЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Перед заполнением список товаров будет очищен. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	злЗаполнитьОстаткомСкладаСДаннымиИзЗональногоПересчета();
	// Задача #4520
	// <-- Евлахов Игорь Николаевич (Конец) 27.08.2024	
	
КонецПроцедуры

&НаКлиенте
Процедура КР_ЗаполнитьЗональныеПересчеты(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.КР_ПриказНаИнвентаризациюТоваров)
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Выполнено") Тогда
		Возврат;
	КонецЕсли;
	
	КР_ЗаполнитьЗональныеПересчетыСервер();
	
КонецПроцедуры

// << 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449
&НаКлиенте
Процедура КР_УпорядочитьВЯчейках(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КР_УпорядочитьВЯчейкахОписаниеВопроса", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru = 'Табличная часть будет перезаполнена. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры // >> 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449
// << 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449
&НаКлиенте
Процедура КР_УпорядочитьВЯчейкахОписаниеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КР_УпорядочитьВЯчейкахСервер();
	
КонецПроцедуры // >> 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449

// --> Евлахов Игорь Николаевич (Начало) 25.07.2024
// Задача #4485
&НаКлиенте
Процедура Подключаемый_злЗаполнитьКоличествоПоУчету(Команда)
		
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьКоличествоПоУчету", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'Будет очищено текущее количество по учету и заполнено новым. Продолжить?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);

КонецПроцедуры	
// <-- Евлахов Игорь Николаевич (Конец) 25.07.2024

#КонецОбласти

#КонецОбласти

#Область злПроцедурыОписанияОповещения

// --> Евлахов Игорь Николаевич (Начало) 25.07.2024
// Задача #4485
&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьКоличествоПоУчету(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Количество = 0;	
		СтрокаТаблицы.КоличествоУпаковок = 0;
	КонецЦикла;
	
	ЗаполнитьКоличествоПоУчетуСервер();
	
КонецПроцедуры
// <-- Евлахов Игорь Николаевич (Конец) 25.07.2024

// --> Евлахов Игорь Николаевич (Начало) 27.08.2024
// Задача #4520
&НаКлиенте
Процедура злВопросЗаполнитьТоваромСНастройкамиПоУмолчаниюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Товары.Очистить();
    Иначе
        Возврат;
    КонецЕсли;
    
    злЗаполнитьОстаткомСкладаСДаннымиИзЗональногоПересчета();

КонецПроцедуры

#КонецОбласти

#Область злОбработчикиСобытийФормы

&НаСервере
Процедура злПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// --> Евлахов Игорь Николаевич (Начало) 09.09.2024
	// Задача #4587
	злИнициализироватьОсновныеНастройки();
	// <-- Евлахов Игорь Николаевич (Конец) 09.09.2024
	
КонецПроцедуры

#КонецОбласти

#Область КР_СлужебныеПроцедурыИФункции
 
#Область КР_СтандартныеПодсистемыРаботаСФайлами

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

#КонецОбласти

#Область КР_ЗагрузкаИзВнешнегоФайла

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
&НаКлиенте
Процедура КР_ЗагрузитьИзВнешнегоФайла(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='При загрузке данных табличная часть ""Товары"" будет предварительно очищена. Продолжить?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("КР_ЗагрузитьИзВнешнегоФайлаВопросЗавершение", ЭтотОбъект),
			ТекстВопроса,
			РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
			
		КР_ЗагрузитьИзВнешнегоФайлаВыполнение();
		
	КонецЕсли;
	
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
&НаКлиенте
Процедура КР_ЗагрузитьИзВнешнегоФайлаВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	КР_ЗагрузитьИзВнешнегоФайлаВыполнение();

КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
&НаКлиенте
Процедура КР_ЗагрузитьИзВнешнегоФайлаВыполнение()
	
	ПараметрыЗагрузки = РаботаСТабличнымиЧастямиКлиент.ПараметрыЗагрузкиНоменклатуры();
	ПараметрыЗагрузки.ЗагружатьКоличество = Ложь;
	ПараметрыЗагрузки.ПересчитыватьСуммы = Ложь;
	
	//ПараметрыЗагрузки.Вставить("КР_НеВыводитьПолеНоменклатура",					Истина);
	ПараметрыЗагрузки.Вставить("КР_НеВыводитьПолеНоменклатурыКод",				Истина);
	//ПараметрыЗагрузки.Вставить("КР_НеВыводитьПолеНоменклатурыАртикул",			Истина);
	//ПараметрыЗагрузки.Вставить("КР_НеВыводитьПолеХарактеристикиНоменклатуры", 	Истина);
	ПараметрыЗагрузки.Вставить("КР_ПереместитьКолонкуЯчейка", 	Истина);
	ПараметрыЗагрузки.Вставить("КР_СкладДокумента",								Объект.Склад);
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 3, ДопустимыйЗнак.Любой));
	
	ДополнительныеКолонки = Новый Массив;
	
	КР_ДобавитьДополнительнуюКолонку(ДополнительныеКолонки,
		"Ячейка",
		НСтр("ru = 'Ячейка'"),
		Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
		
	// << 24.07.2023 Фомичев А.Е., КРОК  JIRA№A2105505-2035
	//КР_ДобавитьДополнительнуюКолонку(ДополнительныеКолонки,
	//	"Серия",
	//	НСтр("ru = 'Серия'"),
	//	Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	//КР_ДобавитьДополнительнуюКолонку(ДополнительныеКолонки,
	//	"Назначение",
	//	НСтр("ru = 'Назначение'"),
	//	Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Если ОбщегоНазначенияУТКлиентПовтИсп.ЗначениеКонстанты("ИспользоватьСерииНоменклатуры") Тогда
	КР_ДобавитьДополнительнуюКолонку(ДополнительныеКолонки,
		"Серия",
		НСтр("ru = 'Серия'"),
		Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));	
	КонецЕсли;
	Если ОбщегоНазначенияУТКлиентПовтИсп.ЗначениеКонстанты("ИспользоватьНазначенияБезЗаказа") Тогда
	КР_ДобавитьДополнительнуюКолонку(ДополнительныеКолонки,
		"Назначение",
		НСтр("ru = 'Назначение'"),
		Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	КонецЕсли;  
	КР_ДобавитьДополнительнуюКолонку(ДополнительныеКолонки,
		"ЕдиницаИзмерения",
		НСтр("ru = 'Единица измерения'"),
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));	
	
	// >> 24.07.2023 Фомичев А.Е., КРОК  JIRA№A2105505-2035
	КР_ДобавитьДополнительнуюКолонку(ДополнительныеКолонки,
	// Специально задаем отличное от название колонки поле,
	// чтобы не пересечься с типовым (КоличествоУпаковок) в обработке "ЗагрузкаТоваровИзВнешнихФайлов"
		"КоличествоУпаковокПоУчету",
		НСтр("ru = 'По учету'"),
		ОписаниеТипаЧисло);
		
	КР_ДобавитьДополнительнуюКолонку(ДополнительныеКолонки,
		"КоличествоУпаковокФакт",
		НСтр("ru = 'По факту'"),
		ОписаниеТипаЧисло);

	ПараметрыЗагрузки.Вставить("КР_ДополнительныеКолонки", Новый ФиксированныйМассив(ДополнительныеКолонки));
	
	Оповещение = Новый ОписаниеОповещения("КР_ЗагрузитьИзВнешнегоФайлаЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПоказатьФормуЗагрузкиНоменклатуры(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
&НаКлиенте
Процедура КР_ДобавитьДополнительнуюКолонку(ДополнительныеКолонки, Имя, Заголовок, Тип)
	
	ОписаниеКолонки = Новый Структура();
	ОписаниеКолонки.Вставить("Имя", Имя);
	ОписаниеКолонки.Вставить("Заголовок", Заголовок);
	ОписаниеКолонки.Вставить("Тип", Тип);
		
	ДополнительныеКолонки.Добавить(ОписаниеКолонки);
	
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
&НаКлиенте
Процедура КР_ЗагрузитьИзВнешнегоФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресЗагруженныхДанных) Тогда
		
		КР_ПолучитьЗагруженныеТоварыИзХранилища(АдресЗагруженныхДанных);
		
		// После заполнения строк из обработки загрузки, заполним вспомогательные данные типовым методом
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			ИдентификаторСтроки = СтрокаТовары.ПолучитьИдентификатор();
			Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
			ТоварыНоменклатураПриИзменении(Элементы.ТоварыНоменклатура);
			ТоварыКоличествоУпаковокФактПриИзменении(Элементы.ТоварыКоличествоУпаковокФакт);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
&НаСервере
Процедура КР_ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Объект.Товары.Очистить();
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		СтрокаТЧТовары.КоличествоУпаковок			= СтрокаТоваров.КоличествоУпаковокПоУчету;
		СтрокаТЧТовары.КоличествоФакт				= СтрокаТЧТовары.КоличествоУпаковокФакт;
		СтрокаТЧТовары.Количество					= СтрокаТЧТовары.КоличествоУпаковок;
		
	КонецЦикла;
	
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

#КонецОбласти

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
&НаСервере
Процедура КР_УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ТоварыУпаковка.АвтоОтметкаНезаполненного = Ложь;
	КР_УстановитьВидимостьДоступностьЭлементовПоСкладу();
	КР_ОграничитьФункциональностьДокументаПоПравам();
	
	// << 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449
	УпорядочиваниеТоваровВЯчейках = Объект.КР_УпорядочиваниеТоваровВЯчейках;
	Элементы.КР_УпорядочитьВЯчейках.Видимость                          = УпорядочиваниеТоваровВЯчейках;
	Элементы.КР_ГруппаЗональныеПересчеты.Видимость                     = Не УпорядочиваниеТоваровВЯчейках;
	Элементы.КР_ЗаполнитьФактИзЗональныхПересчетов.Видимость           = Не УпорядочиваниеТоваровВЯчейках;
	Элементы.КР_ПротоколУпорядочиванияТоваровВЯчейкахНадпись.Видимость = УпорядочиваниеТоваровВЯчейках;
	Элементы.КР_ЯчейкаКонсолидацииНедостачТоваров.Видимость            = УпорядочиваниеТоваровВЯчейках;
	// >> 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449

	Элементы.Помещение.Видимость = УпорядочиваниеТоваровВЯчейках;		// #4524.. Фомин Д.Ю. 02.08.2024.
	злУстановитьВидимостьРасширеннаяРаботаСПересчетом();                // #4519.. Фомин Д.Ю. 02.08.2024.
	
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// #4519.. Фомин Д.Ю. 02.08.2024.
&НаСервере
Процедура злУстановитьВидимостьРасширеннаяРаботаСПересчетом()
	
	Если Не РольДоступна("ПолныеПрава") 
		И Не РольДоступна("злРасширеннаяРаботаСПересчетом") Тогда
	
		УпорядочиваниеТоваровВЯчейках = Объект.КР_УпорядочиваниеТоваровВЯчейках;
		Элементы.ОтборПересчетаНастройкиОтбор.Видимость = УпорядочиваниеТоваровВЯчейках;
		
		Для Каждого ТекЭлемент Из Элементы.КоманднаяПанельТовары.ПодчиненныеЭлементы Цикл
			Если ТекЭлемент.Имя <> "КР_ЗаполнитьФактИзЗональныхПересчетов" Тогда
				ТекЭлемент.Видимость = УпорядочиваниеТоваровВЯчейках;	
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры	
// ..#4519

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
&НаСервере
Процедура КР_УстановитьВидимостьДоступностьЭлементовПоСкладу()
	
	РеквизитыСтрокой									= "КР_ВидСклада, КР_АдресныйСкладБезордернойОтгрузки";
	РеквизитыСклада										= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, РеквизитыСтрокой);
	ТекущийСкладЯвляетсяМагазином 						= (РеквизитыСклада.КР_ВидСклада = Перечисления.КР_ВидыСкладов.Магазин);
	Элементы.КР_ПриказНаИнвентаризациюТоваров.Видимость = ТекущийСкладЯвляетсяМагазином И Не Объект.КР_УпорядочиваниеТоваровВЯчейках;
	Элементы.Исполнитель.Видимость						= Не ТекущийСкладЯвляетсяМагазином;
	Элементы.Помещение.АвтоОтметкаНезаполненного		= Не ТекущийСкладЯвляетсяМагазином;
	Элементы.ТоварыЯчейка.Видимость						= (РеквизитыСклада.КР_АдресныйСкладБезордернойОтгрузки = Истина);
	
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
&НаСервере
Процедура КР_ОграничитьФункциональностьДокументаПоПравам()
	
	ЕстьОграничениеПоИзменениюДокумента = РольДоступна("КР_ОграниченноеДобавлениеПересчетовТоваров") И
		Не Пользователи.РолиДоступны("ДобавлениеИзменениеПересчетовТоваров");
	
	Если Не ЕстьОграничениеПоИзменениюДокумента
		Или Не Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	СтатусСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Статус");
	Если СтатусСсылки = Перечисления.СтатусыПересчетовТоваров.Выполнено Тогда
		// В финальном статусе для пользователя с ограниченными правами изменения запрещены
		ТолькоПросмотр = Истина;
	КонецЕсли;

КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 14.06.2024 Вдовенко С.А., КРОК, A2105505-2661
//&НаСервере
//Процедура КР_ЗаполнитьФактИзЗональныхПересчетовСервер()
//	
//	Отказ = Ложь;
//	Документы.ПересчетТоваров.КР_ПроверитьДублиЗональныхПересчетовВСтрокахТЧ(Объект.КР_ЗональныеПересчеты.Выгрузить(), Отказ);
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗональныеПересчеты = ОбщегоНазначения.ВыгрузитьКолонку(Объект.КР_ЗональныеПересчеты, "ЗональныйПересчет");
//	
//	СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("КР_ОтборТоваровЗональныхПересчетов");
//	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
//	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
//	
//	ОтборЗональныхПересчетов = Новый КомпоновщикНастроекКомпоновкиДанных;
//	ОтборЗональныхПересчетов.Инициализировать(ИсточникНастроек);
//	ОтборЗональныхПересчетов.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
//	ОтборЗональныхПересчетов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
//	УстановитьЗначениеПараметраНастроек(ОтборЗональныхПересчетов.Настройки, "ЗональныеПересчеты", ЗональныеПересчеты);
//	
//	НастройкиОтбораЗональныхПересчетов = ОтборЗональныхПересчетов.ПолучитьНастройки();
//	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиОтбораЗональныхПересчетов, ОтборПересчета.ПолучитьНастройки());
//	ОтборЗональныхПересчетов.ЗагрузитьНастройки(НастройкиОтбораЗональныхПересчетов);
//	
//	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос;
//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
//		"&ТекстЗапросаКоэффициентУпаковки",
//		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
//		"ТаблицаТовары.Упаковка", Неопределено));
//	СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос = ТекстЗапроса;
//	
//	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(ОтборЗональныхПересчетов);
//	
//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
//	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
//		ОтборЗональныхПересчетов.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
//	
//	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
//	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
//	
//	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
//	ТаблицаТоварыЗональныхПересчетов = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
//	Запрос.УстановитьПараметр("ТаблицаТоварыЗональныхПересчетов", ТаблицаТоварыЗональныхПересчетов);
//	Запрос.УстановитьПараметр("ЗональныеПересчеты", ЗональныеПересчеты);
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ТаблицаТовары.Ячейка КАК Ячейка,
//	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
//	|	ТаблицаТовары.Характеристика КАК Характеристика,
//	|	ТаблицаТовары.Упаковка КАК Упаковка,
//	|	ТаблицаТовары.Количество КАК Количество,
//	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок
//	|ПОМЕСТИТЬ врт_ТаблицаТовары
//	|ИЗ
//	|	&ТаблицаТовары КАК ТаблицаТовары
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаТоварыЗональныхПересчетов.Ячейка КАК Ячейка,
//	|	ТаблицаТоварыЗональныхПересчетов.Номенклатура КАК Номенклатура,
//	|	ТаблицаТоварыЗональныхПересчетов.Характеристика КАК Характеристика,
//	|	ТаблицаТоварыЗональныхПересчетов.Упаковка КАК Упаковка,
//	|	ТаблицаТоварыЗональныхПересчетов.Количество КАК Количество,
//	|	ТаблицаТоварыЗональныхПересчетов.КоличествоУпаковок КАК КоличествоУпаковок
//	|ПОМЕСТИТЬ врт_ТаблицаТоварыЗональныхПересчетов
//	|ИЗ
//	|	&ТаблицаТоварыЗональныхПересчетов КАК ТаблицаТоварыЗональныхПересчетов
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
//	|	ТаблицаТовары.Характеристика КАК Характеристика,
//	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
//	|ИЗ
//	|	Документ.КР_ЗональныйПересчетТоваров.Товары КАК ТаблицаТовары
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
//	|		ПО ТаблицаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
//	|			И ТаблицаТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
//	|ГДЕ
//	|	ТаблицаТовары.Ссылка В(&ЗональныеПересчеты)
//	|	И НЕ (ТаблицаТовары.Номенклатура, ТаблицаТовары.Характеристика) В
//	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|					Т.Номенклатура КАК Номенклатура,
//	|					Т.Характеристика КАК Характеристика
//	|				ИЗ
//	|					врт_ТаблицаТоварыЗональныхПересчетов КАК Т)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ТаблицаТовары.Номенклатура,
//	|	ТаблицаТовары.Характеристика
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЕСТЬNULL(врт_ТаблицаТовары.Ячейка, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка))) КАК Ячейка,
//	|	ЕСТЬNULL(врт_ТаблицаТовары.Номенклатура, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК Номенклатура,
//	|	ЕСТЬNULL(врт_ТаблицаТовары.Характеристика, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК Характеристика,
//	|	ЕСТЬNULL(врт_ТаблицаТовары.Упаковка, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))) КАК Упаковка,
//	|	ЕСТЬNULL(врт_ТаблицаТовары.Количество, 0) КАК Количество,
//	|	ЕСТЬNULL(врт_ТаблицаТовары.КоличествоУпаковок, 0) КАК КоличествоУпаковок,
//	|	ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Количество, 0) КАК КоличествоФакт,
//	|	ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.КоличествоУпаковок, 0) КАК КоличествоУпаковокФакт
//	|ИЗ
//	|	врт_ТаблицаТовары КАК врт_ТаблицаТовары
//	|		ПОЛНОЕ СОЕДИНЕНИЕ врт_ТаблицаТоварыЗональныхПересчетов КАК врт_ТаблицаТоварыЗональныхПересчетов
//	|		ПО врт_ТаблицаТовары.Ячейка = врт_ТаблицаТоварыЗональныхПересчетов.Ячейка
//	|			И врт_ТаблицаТовары.Номенклатура = врт_ТаблицаТоварыЗональныхПересчетов.Номенклатура
//	|			И врт_ТаблицаТовары.Характеристика = врт_ТаблицаТоварыЗональныхПересчетов.Характеристика
//	|			И врт_ТаблицаТовары.Упаковка = врт_ТаблицаТоварыЗональныхПересчетов.Упаковка";
//	
//	ПакетРезультатов = Запрос.ВыполнитьПакет();
//	
//	Выборка = ПакетРезультатов[ПакетРезультатов.ВГраница() - 1].Выбрать();
//	Пока Выборка.Следующий() Цикл
//		ТекстСообщения = НСтр("ru = '[%1] %2 (%3) не перенесен в табличную часть ""Товары"", т.к. не соответствует отбору, установленному в документе'");
//		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Штрихкод, Выборка.Номенклатура, Выборка.Характеристика);
//		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
//	КонецЦикла;
//	
//	Объект.Товары.Загрузить(ПакетРезультатов[ПакетРезультатов.ВГраница()].Выгрузить());
//	
//	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
//	ЗаполнитьПризнакРасхождение();
//	
//	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
//	
//КонецПроцедуры
&НаСервере
Процедура КР_ЗаполнитьФактИзЗональныхПересчетовСервер()
	
	Отказ = Ложь;
	Документы.ПересчетТоваров.КР_ПроверитьДублиЗональныхПересчетовВСтрокахТЧ(Объект.КР_ЗональныеПересчеты.Выгрузить(), Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КР_ЗональныеПересчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// << 07.08.2024 Петухов А.В., Фактор, #4522
	Если ЗначениеЗаполнено(Объект.КР_ПриказНаИнвентаризациюТоваров) Тогда
		Документы.ПересчетТоваров.КР_ПроверитьДатыЗональныхПересчетовВСтрокахТЧ(Объект.КР_ПриказНаИнвентаризациюТоваров, Объект.КР_ЗональныеПересчеты, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнен ""Приказ на инвентаризацию товаров"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"Объект.КР_ПриказНаИнвентаризациюТоваров");
		Возврат;
	КонецЕсли;
	// >> 07.08.2024 Петухов А.В., Фактор, #4522
	
	ЗональныеПересчеты = ОбщегоНазначения.ВыгрузитьКолонку(Объект.КР_ЗональныеПересчеты, "ЗональныйПересчет");
	ТоварыЗональныхПересчетов = КР_ПолучитьТаблицуТоваровЗональныхПересчетов(ЗональныеПересчеты);
	НоменклатураЗональныхПересчетов = ТоварыЗональныхПересчетов.ВыгрузитьКолонку("Номенклатура");
	ОстаткиТоваровПоДаннымУчета = КР_ОстаткиТоваровПоДаннымУчета(НоменклатураЗональныхПересчетов);
	
	ТоварыДокумента = Объект.Товары.Выгрузить();
	ПакетРезультатов = КР_ОбъединитьТоварыДокументаИТоварыЗональныхПересчетов(ТоварыДокумента,
		ТоварыЗональныхПересчетов,
		ОстаткиТоваровПоДаннымУчета,
		ЗональныеПересчеты);
	
	Выборка = ПакетРезультатов[ПакетРезультатов.ВГраница() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = НСтр("ru = '[%1] %2 (%3) не перенесен в табличную часть ""Товары"", т.к. не соответствует отбору, установленному в документе'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Штрихкод, Выборка.Номенклатура, Выборка.Характеристика);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Объект.Товары.Загрузить(ПакетРезультатов[ПакетРезультатов.ВГраница()].Выгрузить());
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПризнакРасхождение();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция КР_ПолучитьТаблицуТоваровЗональныхПересчетов(ЗональныеПересчеты)
	
	СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("КР_ОтборТоваровЗональныхПересчетов");
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	ОтборЗональныхПересчетов = Новый КомпоновщикНастроекКомпоновкиДанных;
	ОтборЗональныхПересчетов.Инициализировать(ИсточникНастроек);
	ОтборЗональныхПересчетов.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	ОтборЗональныхПересчетов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	УстановитьЗначениеПараметраНастроек(ОтборЗональныхПересчетов.Настройки, "ЗональныеПересчеты", ЗональныеПересчеты);
	
	// --> Евлахов Игорь Николаевич (Начало) 26.08.2024
	// Задача #4520
	// Начало было
	//НастройкиОтбораЗональныхПересчетов = ОтборЗональныхПересчетов.ПолучитьНастройки();
	//
	//ОтборПолученияОстатков = ОтборПересчета.ПолучитьНастройки();
	//КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных,
	//	НастройкиОтбораЗональныхПересчетов,
	//	ОтборПолученияОстатков);
	//ОтборЗональныхПересчетов.ЗагрузитьНастройки(НастройкиОтбораЗональныхПересчетов); 
	// Конец было
	// <-- Евлахов Игорь Николаевич (Конец) 26.08.2024
	
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка", Неопределено));
	СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос = ТекстЗапроса;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(ОтборЗональныхПересчетов);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		ОтборЗональныхПересчетов.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецФункции

&НаСервере
Функция КР_ОбъединитьТоварыДокументаИТоварыЗональныхПересчетов(ТоварыДокумента,
		ТоварыЗональныхПересчетов, ОстаткиТоваровПоДаннымУчета, ЗональныеПересчеты)
		
	Если ОстаткиТоваровПоДаннымУчета.Колонки.Найти("Ячейка") = Неопределено Тогда
		ТипЯчейка = Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки");
		КолонкаЯчейка = ОстаткиТоваровПоДаннымУчета.Колонки.Добавить("Ячейка", ТипЯчейка);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", ТоварыДокумента);
	Запрос.УстановитьПараметр("ТаблицаТоварыЗональныхПересчетов", ТоварыЗональныхПересчетов);
	Запрос.УстановитьПараметр("ОстаткиТоваровПоДаннымУчета", ОстаткиТоваровПоДаннымУчета);
	Запрос.УстановитьПараметр("ЗональныеПересчеты", ЗональныеПересчеты);
	Запрос.Текст = 
	// --> Евлахов Игорь Николаевич (Начало) 24.07.2024
	// Задача #4485
	// Начало было
	//"ВЫБРАТЬ
	//|	ТаблицаТовары.Ячейка КАК Ячейка,
	//|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	//|	ТаблицаТовары.Характеристика КАК Характеристика,
	//|	ТаблицаТовары.Упаковка КАК Упаковка,
	//|	ТаблицаТовары.Количество КАК Количество,
	//|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок
	//|ПОМЕСТИТЬ врт_ТаблицаТовары
	//|ИЗ
	//|	&ТаблицаТовары КАК ТаблицаТовары
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ОстаткиТоваров.Ячейка КАК Ячейка,
	//|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	//|	ОстаткиТоваров.Характеристика КАК Характеристика,
	//|	ОстаткиТоваров.Количество КАК Количество,
	//|	ОстаткиТоваров.КоличествоУпаковок КАК КоличествоУпаковок
	//|ПОМЕСТИТЬ врт_ОстаткиТоваров
	//|ИЗ
	//|	&ОстаткиТоваровПоДаннымУчета КАК ОстаткиТоваров
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТаблицаТоварыЗональныхПересчетов.Ячейка КАК Ячейка,
	//|	ТаблицаТоварыЗональныхПересчетов.Номенклатура КАК Номенклатура,
	//|	ТаблицаТоварыЗональныхПересчетов.Характеристика КАК Характеристика,
	//|	ТаблицаТоварыЗональныхПересчетов.Упаковка КАК Упаковка,
	//|	ТаблицаТоварыЗональныхПересчетов.Количество КАК Количество,
	//|	ТаблицаТоварыЗональныхПересчетов.КоличествоУпаковок КАК КоличествоУпаковок
	//|ПОМЕСТИТЬ врт_ТоварыЗональныхПересчетов
	//|ИЗ
	//|	&ТаблицаТоварыЗональныхПересчетов КАК ТаблицаТоварыЗональныхПересчетов
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	врт_ТоварыЗональныхПересчетов.Ячейка КАК Ячейка,
	//|	врт_ТоварыЗональныхПересчетов.Номенклатура КАК Номенклатура,
	//|	врт_ТоварыЗональныхПересчетов.Характеристика КАК Характеристика,
	//|	врт_ТоварыЗональныхПересчетов.Упаковка КАК Упаковка,
	//|	врт_ТоварыЗональныхПересчетов.Количество КАК Количество,
	//|	врт_ТоварыЗональныхПересчетов.КоличествоУпаковок КАК КоличествоУпаковок,
	//|	ЕСТЬNULL(врт_ОстаткиТоваров.Количество, 0) КАК КоличествоПоУчету,
	//|	ЕСТЬNULL(врт_ОстаткиТоваров.КоличествоУпаковок, 0) КАК КоличествоУпаковокПоУчету
	//|ПОМЕСТИТЬ врт_ТаблицаТоварыЗональныхПересчетов
	//|ИЗ
	//|	врт_ТоварыЗональныхПересчетов КАК врт_ТоварыЗональныхПересчетов
	//|		ЛЕВОЕ СОЕДИНЕНИЕ врт_ОстаткиТоваров КАК врт_ОстаткиТоваров
	//|		ПО врт_ТоварыЗональныхПересчетов.Номенклатура = врт_ОстаткиТоваров.Номенклатура
	//|			И врт_ТоварыЗональныхПересчетов.Характеристика = врт_ОстаткиТоваров.Характеристика
	//|			И врт_ТоварыЗональныхПересчетов.Ячейка = врт_ОстаткиТоваров.Ячейка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура) КАК Номенклатура,
	//|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК Характеристика,
	//|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
	//|ИЗ
	//|	Документ.КР_ЗональныйПересчетТоваров.Товары КАК ТаблицаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	//|		ПО ТаблицаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	//|			И ТаблицаТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	//|ГДЕ
	//|	ТаблицаТовары.Ссылка В(&ЗональныеПересчеты)
	//|	И НЕ (ТаблицаТовары.Номенклатура, ТаблицаТовары.Характеристика) В
	//|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|					Т.Номенклатура КАК Номенклатура,
	//|					Т.Характеристика КАК Характеристика
	//|				ИЗ
	//|					врт_ТаблицаТоварыЗональныхПересчетов КАК Т)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ТаблицаТовары.Номенклатура,
	//|	ТаблицаТовары.Характеристика
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(врт_ТаблицаТовары.Ячейка, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка))) КАК Ячейка,
	//|	ЕСТЬNULL(врт_ТаблицаТовары.Номенклатура, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК Номенклатура,
	//|	ЕСТЬNULL(врт_ТаблицаТовары.Характеристика, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК Характеристика,
	//|	ЕСТЬNULL(врт_ТаблицаТовары.Упаковка, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))) КАК Упаковка,
	//|	ВЫБОР
	//|		КОГДА врт_ТаблицаТовары.Количество ЕСТЬ НЕ NULL 
	//|			ТОГДА врт_ТаблицаТовары.Количество
	//|		КОГДА врт_ТаблицаТоварыЗональныхПересчетов.КоличествоПоУчету ЕСТЬ НЕ NULL 
	//|			ТОГДА врт_ТаблицаТоварыЗональныхПересчетов.КоличествоПоУчету
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Количество,
	//|	ВЫБОР
	//|		КОГДА врт_ТаблицаТовары.КоличествоУпаковок ЕСТЬ НЕ NULL 
	//|			ТОГДА врт_ТаблицаТовары.КоличествоУпаковок
	//|		КОГДА врт_ТаблицаТоварыЗональныхПересчетов.КоличествоУпаковокПоУчету ЕСТЬ НЕ NULL 
	//|			ТОГДА врт_ТаблицаТоварыЗональныхПересчетов.КоличествоУпаковокПоУчету
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК КоличествоУпаковок,
	//|	ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Количество, 0) КАК КоличествоФакт,
	//|	ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.КоличествоУпаковок, 0) КАК КоличествоУпаковокФакт
	//|ИЗ
	//|	врт_ТаблицаТовары КАК врт_ТаблицаТовары
	//|		ПОЛНОЕ СОЕДИНЕНИЕ врт_ТаблицаТоварыЗональныхПересчетов КАК врт_ТаблицаТоварыЗональныхПересчетов
	//|		ПО врт_ТаблицаТовары.Ячейка = врт_ТаблицаТоварыЗональныхПересчетов.Ячейка
	//|			И врт_ТаблицаТовары.Номенклатура = врт_ТаблицаТоварыЗональныхПересчетов.Номенклатура
	//|			И врт_ТаблицаТовары.Характеристика = врт_ТаблицаТоварыЗональныхПересчетов.Характеристика
	//|			И врт_ТаблицаТовары.Упаковка = врт_ТаблицаТоварыЗональныхПересчетов.Упаковка";
	
	// Конец было
	
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ячейка КАК Ячейка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ врт_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТоваров.Ячейка КАК Ячейка,
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваров.Характеристика КАК Характеристика,
	|	ОстаткиТоваров.Количество КАК Количество,
	|	ОстаткиТоваров.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ врт_ОстаткиТоваров
	|ИЗ
	|	&ОстаткиТоваровПоДаннымУчета КАК ОстаткиТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоварыЗональныхПересчетов.Ячейка КАК Ячейка,
	|	ТаблицаТоварыЗональныхПересчетов.Номенклатура КАК Номенклатура,
	|	ТаблицаТоварыЗональныхПересчетов.Характеристика КАК Характеристика,
	|	ТаблицаТоварыЗональныхПересчетов.Упаковка КАК Упаковка,
	|	ТаблицаТоварыЗональныхПересчетов.Количество КАК Количество,
	|	ТаблицаТоварыЗональныхПересчетов.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ врт_ТоварыЗональныхПересчетов
	|ИЗ
	|	&ТаблицаТоварыЗональныхПересчетов КАК ТаблицаТоварыЗональныхПересчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ТоварыЗональныхПересчетов.Ячейка КАК Ячейка,
	|	врт_ТоварыЗональныхПересчетов.Номенклатура КАК Номенклатура,
	|	врт_ТоварыЗональныхПересчетов.Характеристика КАК Характеристика,
	|	врт_ТоварыЗональныхПересчетов.Упаковка КАК Упаковка,
	|	врт_ТоварыЗональныхПересчетов.Количество КАК Количество,
	|	врт_ТоварыЗональныхПересчетов.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЕСТЬNULL(врт_ОстаткиТоваров.Количество, 0) КАК КоличествоПоУчету,
	|	ЕСТЬNULL(врт_ОстаткиТоваров.КоличествоУпаковок, 0) КАК КоличествоУпаковокПоУчету
	|ПОМЕСТИТЬ врт_ТаблицаТоварыЗональныхПересчетов
	|ИЗ
	|	врт_ТоварыЗональныхПересчетов КАК врт_ТоварыЗональныхПересчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_ОстаткиТоваров КАК врт_ОстаткиТоваров
	|		ПО врт_ТоварыЗональныхПересчетов.Номенклатура = врт_ОстаткиТоваров.Номенклатура
	|			И врт_ТоварыЗональныхПересчетов.Характеристика = врт_ОстаткиТоваров.Характеристика
	|			И врт_ТоварыЗональныхПересчетов.Ячейка = врт_ОстаткиТоваров.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//В данном запросе наша задача, найти те товары, которые не попали в виртуальную таблицу
	// врт_ТаблицаТоварыЗональныхПересчетов. Использование внутреннего соединениния в данном варианте
	// не даст преимуществ, поэтому оставляю текущий вариант решения
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
	|ИЗ
	|	Документ.КР_ЗональныйПересчетТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТаблицаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ТаблицаТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&ЗональныеПересчеты)
	|	И НЕ (ТаблицаТовары.Номенклатура, ТаблицаТовары.Характеристика) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.Номенклатура КАК Номенклатура,
	|					Т.Характеристика КАК Характеристика
	|				ИЗ
	|					врт_ТаблицаТоварыЗональныхПересчетов КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(врт_ТаблицаТовары.Ячейка, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка))) КАК Ячейка,
	|	ЕСТЬNULL(врт_ТаблицаТовары.Номенклатура, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК Номенклатура,
	|	ЕСТЬNULL(врт_ТаблицаТовары.Характеристика, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК Характеристика,
	|	ЕСТЬNULL(врт_ТаблицаТовары.Упаковка, ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))) КАК Упаковка,
	|	ВЫБОР
	|		КОГДА врт_ТаблицаТовары.Количество ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.КоличествоПоУчету, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА врт_ТаблицаТовары.Количество = 0
	|					ТОГДА ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.КоличествоПоУчету, 0)
	|				ИНАЧЕ врт_ТаблицаТовары.Количество
	|			КОНЕЦ
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА врт_ТаблицаТовары.КоличествоУпаковок ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.КоличествоУпаковокПоУчету, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА врт_ТаблицаТовары.КоличествоУпаковок = 0
	|					ТОГДА ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.КоличествоУпаковокПоУчету, 0)
	|				ИНАЧЕ врт_ТаблицаТовары.КоличествоУпаковок
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.Количество, 0) КАК КоличествоФакт,
	|	ЕСТЬNULL(врт_ТаблицаТоварыЗональныхПересчетов.КоличествоУпаковок, 0) КАК КоличествоУпаковокФакт
	|ИЗ
	|	врт_ТаблицаТовары КАК врт_ТаблицаТовары
	|		ПОЛНОЕ СОЕДИНЕНИЕ врт_ТаблицаТоварыЗональныхПересчетов КАК врт_ТаблицаТоварыЗональныхПересчетов
	|		ПО врт_ТаблицаТовары.Ячейка = врт_ТаблицаТоварыЗональныхПересчетов.Ячейка
	|			И врт_ТаблицаТовары.Номенклатура = врт_ТаблицаТоварыЗональныхПересчетов.Номенклатура
	|			И врт_ТаблицаТовары.Характеристика = врт_ТаблицаТоварыЗональныхПересчетов.Характеристика
	|			И врт_ТаблицаТовары.Упаковка = врт_ТаблицаТоварыЗональныхПересчетов.Упаковка";
	// <-- Евлахов Игорь Николаевич (Конец) 24.07.2024
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// копия функции "Заполнить сервер" до момента заполнения табличной части товары
//    с добавлением возможности отбора по номенклатуре
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
&НаСервере
Функция КР_ОстаткиТоваровПоДаннымУчета(НоменклатураОтбор = Неопределено)
	
	УстановитьЗначениеПараметраНастроек(ОтборПересчета.Настройки, "ДатаОстатков", ?(ЗначениеЗаполнено(Объект.Дата),
		Новый Граница(Объект.Дата, ВидГраницы.Включая),
		Новый Граница(ТекущаяДатаСеанса(), ВидГраницы.Включая)));
	
	Если ИспользоватьАдресноеХранение Тогда
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоЯчейкам");
	Иначе	
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоСкладу");
	КонецЕсли;
	
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	КР_ЗаменитьСхемуКомпановкиДляРежимаПоВсемПомещениям(СхемаКомпоновкиДанных);
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыВЯчейках.Упаковка", Неопределено));
	СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос = ТекстЗапроса;

	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(ОтборПересчета);
	
	// << 14.06.2024 Вдовенко С.А., КРОК, A2105505-2661
	НастройкиОсновнойСхемы = ОтборПересчета.ПолучитьНастройки();
	Если НоменклатураОтбор <> Неопределено Тогда
		
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиОсновнойСхемы.Отбор, "Номенклатура");
		Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = НоменклатураОтбор;
		КонецЦикла;
		
	КонецЕсли;
	// >> 14.06.2024 Вдовенко С.А., КРОК, A2105505-2661
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		НастройкиОсновнойСхемы,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецФункции
// >> 14.06.2024 Вдовенко С.А., КРОК, A2105505-2661

&НаСервере
Процедура КР_ЗаполнитьЗональныеПересчетыСервер()
	
	РеквизитыПриказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КР_ПриказНаИнвентаризациюТоваров, "ДатаНачала, ДатаОкончания");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"   , 		РеквизитыПриказа.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 		РеквизитыПриказа.ДатаОкончания);
	Запрос.УстановитьПараметр("Склад", 				Объект.Склад);
	Запрос.УстановитьПараметр("ОтборПоПомещению", 	ЗначениеЗаполнено(Объект.Помещение));
	Запрос.УстановитьПараметр("Помещение", 			Объект.Помещение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
	|	КР_ЗональныйПересчетТоваров.Ссылка КАК ЗональныйПересчет
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.КР_ЗональныйПересчетТоваров КАК КР_ЗональныйПересчетТоваров
	|ГДЕ
	|	КР_ЗональныйПересчетТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И КР_ЗональныйПересчетТоваров.Проведен
	|	И КР_ЗональныйПересчетТоваров.ЗонаПересчета.Владелец = &Склад
	|	И ВЫБОР
	|			КОГДА &ОтборПоПомещению
	|				ТОГДА КР_ЗональныйПересчетТоваров.ЗонаПересчета.Помещение = &Помещение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.НомерСтроки КАК НомерСтроки,
	|	ВТ.ЗональныйПересчет КАК ЗональныйПересчет
	|ИЗ
	|	ВТ КАК ВТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	// Формирование временной таблицы в запросе нужно только для АВТОНОМЕРЗАПИСИ(),
	// чтобы не плодить Объект.ТЧ.Загрузить(), Объект.ТЧ.Выгрузить()
	ТаблицаЗональныеПересчеты = Запрос.Выполнить().Выгрузить();
	
	Документы.ПересчетТоваров.КР_ПроверитьДублиЗональныхПересчетовВСтрокахТЧ(ТаблицаЗональныеПересчеты, Ложь);
	
	Объект.КР_ЗональныеПересчеты.Загрузить(ТаблицаЗональныеПересчеты);
	
КонецПроцедуры

// << 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449
&НаСервере
Процедура КР_УпорядочитьВЯчейкахСервер()
	
	Объект.КР_ПротоколУпорядочиванияТоваровВЯчейках = "";
	
	ТаблицаТовары = Объект.Товары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("ЯчейкаКонсолидацииНедостачТоваров", Объект.КР_ЯчейкаКонсолидацииНедостачТоваров);
	Запрос.Текст = КР_ТекстЗапросаУпорядочитьВЯчейках();	
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не ПакетРезультатов[ПакетРезультатов.ВГраница()].Пустой() Тогда
		МассивПротокола = Новый Массив;
		ШаблонСообщения = НСтр("ru = '	* (%1) [%2] %3 / %4 %5 %6'");
		ВыборкаПротокол = ПакетРезультатов[ПакетРезультатов.ВГраница()].Выбрать();
		Пока ВыборкаПротокол.Следующий() Цикл
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
				ВыборкаПротокол.Артикул,
				ВыборкаПротокол.Штрихкод,
				ВыборкаПротокол.Номенклатура,
				ВыборкаПротокол.Характеристика,
				ВыборкаПротокол.Отклонение,
				ВыборкаПротокол.ЕдиницаИзмерения);
			МассивПротокола.Добавить(ТекстСообщения);
		КонецЦикла;
		
		Объект.КР_ПротоколУпорядочиванияТоваровВЯчейках =
			НСтр("ru = 'Устранены расхождения (- недостача / + излишек) по следующим товарам:'") +
			Символы.ПС + СтрСоединить(МассивПротокола, Символы.ПС);
	КонецЕсли;
	
	Объект.Товары.Загрузить(ПакетРезультатов[ПакетРезультатов.ВГраница() - 1].Выгрузить());
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Факт");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	КэшированныеЗначения = Неопределено;
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	КР_УстановитьВиртуальнуюЯчейку();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПризнакРасхождение();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры // >> 25.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1449

&НаСервереБезКонтекста
Функция КР_ТекстЗапросаУпорядочитьВЯчейках()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ячейка КАК Ячейка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
	|	ТаблицаТовары.КоличествоУпаковокФакт - ТаблицаТовары.КоличествоУпаковок КАК Отклонение
	|ПОМЕСТИТЬ врт_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ячейка <> &ЯчейкаКонсолидацииНедостачТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	врт_ТаблицаТовары.Характеристика КАК Характеристика,
	|	врт_ТаблицаТовары.Упаковка КАК Упаковка,
	|	СУММА(врт_ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(врт_ТаблицаТовары.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт,
	|	СУММА(врт_ТаблицаТовары.Отклонение) КАК Отклонение
	|ПОМЕСТИТЬ врт_ТолькоТовары
	|ИЗ
	|	врт_ТаблицаТовары КАК врт_ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_ТаблицаТовары.Номенклатура,
	|	врт_ТаблицаТовары.Упаковка,
	|	врт_ТаблицаТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(врт_ТаблицаТовары.Отклонение) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ЯчейкаКонсолидацииНедостачТоваров КАК Ячейка,
	|	врт_ТолькоТовары.Номенклатура КАК Номенклатура,
	|	врт_ТолькоТовары.Характеристика КАК Характеристика,
	|	врт_ТолькоТовары.Упаковка КАК Упаковка,
	|	СУММА(0) КАК КоличествоУпаковок,
	|	СУММА(-врт_ТолькоТовары.Отклонение) КАК КоличествоУпаковокФакт
	|ПОМЕСТИТЬ врт_Недостачи
	|ИЗ
	|	врт_ТолькоТовары КАК врт_ТолькоТовары
	|ГДЕ
	|	врт_ТолькоТовары.Отклонение < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_ТолькоТовары.Номенклатура,
	|	врт_ТолькоТовары.Характеристика,
	|	врт_ТолькоТовары.Упаковка
	|
	|ИМЕЮЩИЕ
	|	СУММА(-врт_ТолькоТовары.Отклонение) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ТолькоТовары.Номенклатура КАК Номенклатура,
	|	врт_ТолькоТовары.Характеристика КАК Характеристика,
	|	врт_ТолькоТовары.Упаковка КАК Упаковка,
	|	СУММА(0) КАК КоличествоУпаковок,
	|	СУММА(-врт_ТолькоТовары.Отклонение) КАК КоличествоУпаковокФакт
	|ПОМЕСТИТЬ врт_Излишки
	|ИЗ
	|	врт_ТолькоТовары КАК врт_ТолькоТовары
	|ГДЕ
	|	врт_ТолькоТовары.Отклонение > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_ТолькоТовары.Номенклатура,
	|	врт_ТолькоТовары.Характеристика,
	|	врт_ТолькоТовары.Упаковка
	|
	|ИМЕЮЩИЕ
	|	СУММА(-врт_ТолькоТовары.Отклонение) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ТаблицаТовары1.Ячейка КАК Ячейка,
	|	врт_ТаблицаТовары1.Номенклатура КАК Номенклатура,
	|	врт_ТаблицаТовары1.Характеристика КАК Характеристика,
	|	врт_ТаблицаТовары1.Упаковка КАК Упаковка,
	|	врт_ТаблицаТовары1.Отклонение КАК Отклонение,
	|	ЕСТЬNULL(СУММА(врт_ТаблицаТовары2.Отклонение), 0) + 1 КАК ПорядокРаспределенияС,
	|	ЕСТЬNULL(СУММА(врт_ТаблицаТовары2.Отклонение), 0) + врт_ТаблицаТовары1.Отклонение КАК ПорядокРаспределенияПо
	|ПОМЕСТИТЬ врт_РаспределениеВЯчейках
	|ИЗ
	|	врт_ТаблицаТовары КАК врт_ТаблицаТовары1
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_ТаблицаТовары КАК врт_ТаблицаТовары2
	|		ПО врт_ТаблицаТовары1.Ячейка > врт_ТаблицаТовары2.Ячейка
	|			И врт_ТаблицаТовары1.Номенклатура > врт_ТаблицаТовары2.Номенклатура
	|			И врт_ТаблицаТовары1.Характеристика > врт_ТаблицаТовары2.Характеристика
	|			И врт_ТаблицаТовары1.Упаковка > врт_ТаблицаТовары2.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_ТаблицаТовары1.Ячейка,
	|	врт_ТаблицаТовары1.Номенклатура,
	|	врт_ТаблицаТовары1.Характеристика,
	|	врт_ТаблицаТовары1.Упаковка,
	|	врт_ТаблицаТовары1.Отклонение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ТолькоТовары1.Номенклатура КАК Номенклатура,
	|	врт_ТолькоТовары1.Характеристика КАК Характеристика,
	|	врт_ТолькоТовары1.Упаковка КАК Упаковка,
	|	врт_ТолькоТовары1.Отклонение КАК Отклонение,
	|	ЕСТЬNULL(СУММА(врт_ТолькоТовары2.Отклонение), 0) + 1 КАК ПорядокРаспределенияС,
	|	ЕСТЬNULL(СУММА(врт_ТолькоТовары2.Отклонение), 0) + врт_ТолькоТовары1.Отклонение КАК ПорядокРаспределенияПо
	|ПОМЕСТИТЬ врт_РаспределениеИзлишков
	|ИЗ
	|	врт_ТолькоТовары КАК врт_ТолькоТовары1
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_ТолькоТовары КАК врт_ТолькоТовары2
	|		ПО врт_ТолькоТовары1.Номенклатура > врт_ТолькоТовары2.Номенклатура
	|			И врт_ТолькоТовары1.Характеристика > врт_ТолькоТовары2.Характеристика
	|			И врт_ТолькоТовары1.Упаковка > врт_ТолькоТовары2.Упаковка
	|			И (врт_ТолькоТовары2.Отклонение > 0)
	|ГДЕ
	|	врт_ТолькоТовары1.Отклонение > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_ТолькоТовары1.Номенклатура,
	|	врт_ТолькоТовары1.Характеристика,
	|	врт_ТолькоТовары1.Упаковка,
	|	врт_ТолькоТовары1.Отклонение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_РаспределениеВЯчейках.Ячейка КАК Ячейка,
	|	врт_РаспределениеВЯчейках.Номенклатура КАК Номенклатура,
	|	врт_РаспределениеВЯчейках.Характеристика КАК Характеристика,
	|	врт_РаспределениеВЯчейках.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА врт_РаспределениеИзлишков.ПорядокРаспределенияПо < врт_РаспределениеВЯчейках.ПорядокРаспределенияПо
	|			ТОГДА врт_РаспределениеИзлишков.ПорядокРаспределенияПо
	|		ИНАЧЕ врт_РаспределениеВЯчейках.ПорядокРаспределенияПо
	|	КОНЕЦ - ВЫБОР
	|		КОГДА врт_РаспределениеИзлишков.ПорядокРаспределенияС > врт_РаспределениеВЯчейках.ПорядокРаспределенияС
	|			ТОГДА врт_РаспределениеИзлишков.ПорядокРаспределенияС
	|		ИНАЧЕ врт_РаспределениеВЯчейках.ПорядокРаспределенияС
	|	КОНЕЦ + 1 КАК Отклонение
	|ПОМЕСТИТЬ врт_РаспределениеИтог
	|ИЗ
	|	врт_РаспределениеВЯчейках КАК врт_РаспределениеВЯчейках
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врт_РаспределениеИзлишков КАК врт_РаспределениеИзлишков
	|		ПО врт_РаспределениеВЯчейках.ПорядокРаспределенияС < врт_РаспределениеИзлишков.ПорядокРаспределенияПо
	|			И врт_РаспределениеВЯчейках.ПорядокРаспределенияПо > врт_РаспределениеИзлишков.ПорядокРаспределенияС
	|			И врт_РаспределениеВЯчейках.Номенклатура = врт_РаспределениеИзлишков.Номенклатура
	|			И врт_РаспределениеВЯчейках.Характеристика = врт_РаспределениеИзлишков.Характеристика
	|			И врт_РаспределениеВЯчейках.Упаковка = врт_РаспределениеИзлишков.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ячейка КАК Ячейка,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Упаковка КАК Упаковка,
	|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ВложенныйЗапрос.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт
	|ИЗ
	|	(ВЫБРАТЬ
	|		врт_ТаблицаТовары.Ячейка КАК Ячейка,
	|		врт_ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		врт_ТаблицаТовары.Характеристика КАК Характеристика,
	|		врт_ТаблицаТовары.Упаковка КАК Упаковка,
	|		врт_ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|		врт_ТаблицаТовары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт
	|	ИЗ
	|		врт_ТаблицаТовары КАК врт_ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		врт_Недостачи.Ячейка,
	|		врт_Недостачи.Номенклатура,
	|		врт_Недостачи.Характеристика,
	|		врт_Недостачи.Упаковка,
	|		врт_Недостачи.КоличествоУпаковок,
	|		врт_Недостачи.КоличествоУпаковокФакт
	|	ИЗ
	|		врт_Недостачи КАК врт_Недостачи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		врт_РаспределениеИтог.Ячейка,
	|		врт_РаспределениеИтог.Номенклатура,
	|		врт_РаспределениеИтог.Характеристика,
	|		врт_РаспределениеИтог.Упаковка,
	|		0,
	|		-врт_РаспределениеИтог.Отклонение
	|	ИЗ
	|		врт_РаспределениеИтог КАК врт_РаспределениеИтог) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ячейка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Упаковка
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВложенныйЗапрос.КоличествоУпаковок) <> 0
	|		ИЛИ СУММА(ВложенныйЗапрос.КоличествоУпаковокФакт) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка,
	|	Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	спр_Номенклатура.Артикул КАК Артикул,
	|	МАКСИМУМ(рс_ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод,
	|	спр_Номенклатура.Наименование КАК Номенклатура,
	|	ВЫРАЗИТЬ(врт_ТолькоТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Наименование КАК Характеристика,
	|	врт_ТолькоТовары.Отклонение КАК Отклонение,
	|	спр_Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения
	|ИЗ
	|	врт_ТолькоТовары КАК врт_ТолькоТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК рс_ШтрихкодыНоменклатуры
	|		ПО врт_ТолькоТовары.Номенклатура = рс_ШтрихкодыНоменклатуры.Номенклатура
	|			И врт_ТолькоТовары.Характеристика = рс_ШтрихкодыНоменклатуры.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спр_Номенклатура
	|		ПО врт_ТолькоТовары.Номенклатура = спр_Номенклатура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_ТолькоТовары.Отклонение,
	|	спр_Номенклатура.Наименование,
	|	спр_Номенклатура.Артикул,
	|	спр_Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ВЫРАЗИТЬ(врт_ТолькоТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции


// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
// --> Евлахов Игорь Николаевич 15.08.2024 (рефакторинг кода, директива компиляции)
// Задача #4610
&НаСервере
Процедура КР_ЗаменитьСхемуКомпановкиДляРежимаПоВсемПомещениям(СхемаКомпоновкиДанных)
	
	Если Не КР_РежимПоВсемПомещениям() Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("КР_ОтборПоСкладуИЯчейкамБезПомещений");
	
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
// --> Евлахов Игорь Николаевич 15.08.2024 (рефакторинг кода, директива компиляции)
// Задача #4610
&НаСервере
Функция КР_РежимПоВсемПомещениям()
	
	ВидСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "КР_ВидСклада");
	РежимРаботыПоВсемПомещениям = Не ЗначениеЗаполнено(Объект.Помещение)
		И ВидСклада = Перечисления.КР_ВидыСкладов.Магазин;
	Возврат РежимРаботыПоВсемПомещениям;
	
КонецФункции // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
// --> Евлахов Игорь Николаевич 15.08.2024 (рефакторинг кода, директива компиляции)
// Задача #4610
&НаСервере
Процедура КР_УстановитьВиртуальнуюЯчейку()
	
	Если Не ЗначениеЗаполнено(Объект.Помещение) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСтрокой	= "КР_ВидСклада, КР_АдресныйСкладБезордернойОтгрузки, НастройкаАдресногоХранения";
	РеквизитыСклада		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, РеквизитыСтрокой);
	
	Если РеквизитыСклада.КР_ВидСклада <> Перечисления.КР_ВидыСкладов.Магазин Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РеквизитыСклада.КР_АдресныйСкладБезордернойОтгрузки Тогда
		Возврат;
	КонецЕсли;
	
	// Установка виртуальных ячеек не используется в режиме хранения "Использовать для хранения остатков номенклатуры"
	НастройкиХранения = Перечисления.НастройкиАдресногоХранения;
	Если РеквизитыСклада.НастройкаАдресногоХранения = НастройкиХранения.ЯчейкиОстатки Тогда
		Возврат;
	ИначеЕсли РеквизитыСклада.НастройкаАдресногоХранения = НастройкиХранения.ОпределяетсяНастройкамиПомещения Тогда
		НастройкиХраненияПомещения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Помещение,
			"НастройкаАдресногоХранения");
		Если НастройкиХраненияПомещения = НастройкиХранения.ЯчейкиОстатки Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВиртуальнаяЯчейка = КР_ПолучитьВиртуальнуюЯчейку(Объект.Склад, Объект.Помещение);
	Если Не ЗначениеЗаполнено(ВиртуальнаяЯчейка) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.Ячейка = ВиртуальнаяЯчейка;
	КонецЦикла;
	
КонецПроцедуры // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
// --> Евлахов Игорь Николаевич 15.08.2024 (рефакторинг кода, директива компиляции)
// Задача #4610
&НаСервере
Функция КР_ПолучитьВиртуальнуюЯчейку(Склад, Помещение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СкладскиеЯчейки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|ГДЕ
		|	СкладскиеЯчейки.Владелец = &Склад
		|	И СкладскиеЯчейки.Помещение = &Помещение
		|	И НЕ СкладскиеЯчейки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	ВиртуальнаяЯчейка = ВыборкаДетальныеЗаписи.Ссылка;
	
	Возврат ВиртуальнаяЯчейка;
	
КонецФункции // >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860

#Область злПрочее

// --> Евлахов Игорь Николаевич (Начало) 27.08.2024
// Задача #4520
&НаСервере
Процедура злЗаполнитьОстаткомСкладаСДаннымиИзЗональногоПересчета()

	злЗаполнитьТоварыИспользуяНастройкиПоУмолчанию();		
	КР_ЗаполнитьФактИзЗональныхПересчетовСервер();
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
КонецПроцедуры

// --> Евлахов Игорь Николаевич (Начало) 27.08.2024
// Задача #4520
&НаСервере
Процедура злЗаполнитьТоварыИспользуяНастройкиПоУмолчанию()
	
	Если ИспользоватьАдресноеХранение Тогда
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоЯчейкам");
	Иначе	
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоСкладу");
	КонецЕсли;
			
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	КР_ЗаменитьСхемуКомпановкиДляРежимаПоВсемПомещениям(СхемаКомпоновкиДанных);
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "Склад" , Объект.Склад);
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "Помещение", Объект.Помещение);	
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "ДатаОстатков", ?(ЗначениеЗаполнено(Объект.Дата),
		Новый Граница(Объект.Дата, ВидГраницы.Включая),
		Новый Граница(ТекущаяДатаСеанса(), ВидГраницы.Включая)));		
		
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыВЯчейках.Упаковка", Неопределено));
	СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос = ТекстЗапроса;
    		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Объект.Товары.Загрузить(ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных));
	// << 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	КР_УстановитьВиртуальнуюЯчейку();
	// >> 03.02.2023 Федоров Д.Е., КРОК, JIRA№A2105505-860
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПризнакРасхождение();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура злИнициализироватьОсновныеНастройки()
	
	// --> Евлахов Игорь Николаевич (Начало) 09.09.2024
	// Задача #4587
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда			
			СкладПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение.КР_Склад");
			
			Если ЗначениеЗаполнено(СкладПользователя) Тогда
				Объект.Склад = СкладПользователя;
				Элементы.Склад.ТолькоПросмотр = Истина;
				ЭтаФорма.Модифицированность = Истина;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	// Задача #4587
	// <-- Евлахов Игорь Николаевич (Конец) 09.09.2024
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяЗапись = Ложь;

#КонецОбласти

