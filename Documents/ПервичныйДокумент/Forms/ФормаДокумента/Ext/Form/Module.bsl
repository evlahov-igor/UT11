#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьПослеЗаписи;

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Элементы.ТипДоговораПоставщика.Видимость = Ложь;
		ТипДоговораПоставщика = 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если УчетНДСУПКлиент.ЗаконченоРедактированиеСчетаФактурыПолученного(ВыбранноеЗначение, ИсточникВыбора) Тогда
		НастроитьПредставлениеСчетаФактуры();
	КонецЕсли;
	
	УчетНДСУПКлиент.ОбработкаИзмененияСостоянияОплатыНДСПоСчетуФактуре(
		ИсточникВыбора,
		ВыбранноеЗначение,
		Элементы.СостояниеОплатыПоСчетуФактуре);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ВидЦенностиВводОстатков = УчетНДСЛокализация.ВидЦенностиВводОстатков(Объект.Ссылка);
	НеТребуетсяОплатаНДСВБюджет = Не (ВидЦенностиВводОстатков = Перечисления.ВидыЦенностей.ТаможенныеПлатежи
		Или ВидЦенностиВводОстатков = Перечисления.ВидыЦенностей.ТаможенныйСоюз);
	
	УчетНДСУП.УстановитьЗаголовокСостоянияОплатыНДСПоСчетуФактуре(
		Объект.Ссылка,
		Элементы.СостояниеОплатыПоСчетуФактуре,
		НеТребуетсяОплатаНДСВБюджет);
		
	УстановитьВидимостьСостоянияОплатыПоСчетФактуре(НеТребуетсяОплатаНДСВБюджет);
	НастроитьПредставлениеСчетаФактуры();
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПервичныйДокумент", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	Если ЗакрытьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ЗакрытьПослеЗаписи = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПервичногоДокументаПриИзменении(Элемент)
	
	ТипПервичногоДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПервичногоДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	ПорядокРасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	 Объект.СуммаРегл = ЗаполнитьСуммыРеглСервер(Объект.Организация, Объект.СуммаДокумента, ВалютаРегламентированногоУчета, Объект.Валюта, Объект.Дата);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ВалютаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетовОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыРегистрации = ПараметрыРегистрацииСчетовФактурПолученных();
	УчетНДСУПКлиент.ОбработкаНавигационнойСсылкиСчетаФактурыПолученные(
		ЭтаФорма,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ПараметрыРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДоговораПоставщикаПриИзменении(Элемент)
	
	ПриИзмененииТиповДоговоровПоставщика();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура СостояниеОплатыПоСчетуФактуре(Команда)
	
	УчетНДСУПКлиент.ОткрытьФормуСостоянияОплатыНДСПоСчетуФактуре(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийКоманд

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ЗакрытьПослеЗаписи = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриИзмененииТиповДоговоровПоставщика()
	
	УстановитьТипДоговора();
	ДоговорПриИзмененииСервер();
	
	УстановитьПараметрыВыбораДоговора();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		Элемент.Поля, 
		Элементы.Договор.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		Элемент.Отбор, 
		"Объект.ПорядокРасчетов", 
		Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, 
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		Элемент.Поля, 
		Элементы.ДатаВходящегоДокумента.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		Элемент.Отбор, 
		"Объект.НомерВходящегоДокумента", 
		Неопределено, 
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		Элемент.Поля, 
		Элементы.НомерВходящегоДокумента.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		Элемент.Отбор, 
		"Объект.ДатаВходящегоДокумента", 
		Неопределено, 
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ЗакупкиСервер.ЗаполнитьСписокВыбораНаименованиеВходящегоДокумента(ЭтотОбъект, Объект.Контрагент);
	
	ВидЦенностиВводОстатков     = УчетНДСЛокализация.ВидЦенностиВводОстатков(Объект.Ссылка);
	НеТребуетсяОплатаНДСВБюджет = Не (ВидЦенностиВводОстатков = Перечисления.ВидыЦенностей.ТаможенныеПлатежи
		Или ВидЦенностиВводОстатков = Перечисления.ВидыЦенностей.ТаможенныйСоюз);
	
	
	УчетНДСУП.УстановитьЗаголовокСостоянияОплатыНДСПоСчетуФактуре(
		Объект.Ссылка,
		Элементы.СостояниеОплатыПоСчетуФактуре,
		НеТребуетсяОплатаНДСВБюджет);
		
	УстановитьВидимостьСостоянияОплатыПоСчетФактуре(НеТребуетсяОплатаНДСВБюджет);	
	УстановитьПараметрыВыбораПартнера();
	УстановитьПараметрыВыбораДоговора();
	УстановитьПараметрыВыбораГруппыФинансовогоУчета();
	УстановитьПараметрыВыбораНаправленияДеятельности();
	ЗаполнитьСписокВыбораПорядкаРасчетов();
	УстановитьЗаголовок();
	НастроитьПредставлениеСчетаФактуры();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПредставлениеСчетаФактуры()
	
	ПараметрыРегистрации = ПараметрыРегистрацииСчетовФактурПолученных();
	СчетаФактурыПолученныеНаОсновании = УчетНДСУП.СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрации);
	
	ТекстСчетФактура = СчетаФактурыПолученныеНаОсновании.Представление;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	РеквизитыДокумента = Документы.ПервичныйДокумент.МассивРеквизитовПоТипуПервичногоДокумента(Объект.ТипПервичногоДокумента);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		РеквизитыДокумента.МассивВсехРеквизитов,
		РеквизитыДокумента.МассивРеквизитовДляТипа);
		
	Если РеквизитыДокумента.МассивРеквизитовДляТипа.Найти("ГруппаФинансовогоУчета") <> Неопределено Тогда
		Элементы.ГруппаФинансовогоУчета.Видимость = Истина;
	КонецЕсли;
	Если РеквизитыДокумента.МассивРеквизитовДляТипа.Найти("НаправлениеДеятельности") <> Неопределено Тогда
		Элементы.НаправлениеДеятельности.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ПорядокРасчетов.Доступность = НЕ ЗначениеЗаполнено(Объект.Договор);
	 
	ВидимостьДоговора = Ложь;
	Если Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента 
		ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
		
		Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
			ВидимостьДоговора = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями");
		Иначе
			ВидимостьДоговора = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		КонецЕсли;
		
	ИначеЕсли Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаПоставщику 
		ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика Тогда
		
		Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
			ВидимостьДоговора = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями");
		Иначе
			ВидимостьДоговора = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
		КонецЕсли;
	Иначе
		ВидимостьДоговора= Ложь;
	КонецЕсли;
	Элементы.Договор.Видимость = ВидимостьДоговора;
	
	Если ВидимостьДоговора = Ложь
		ИЛИ Объект.ТипПервичногоДокумента <> Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика Тогда
		
		Элементы.ТипДоговораПоставщика.Видимость = Ложь;
		
	Иначе
		
		Элементы.ТипДоговораПоставщика.Видимость = Истина;
		
	КонецЕсли;
	
	Элементы.СуммаРегл.Доступность = (Объект.Валюта <> ВалютаРегламентированногоУчета);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСостоянияОплатыПоСчетФактуре(НеТребуетсяОплатаНДСВБюджет)
	Элементы.ОплатаПодтверждена.Видимость = Не НеТребуетсяОплатаНДСВБюджет;
КонецПроцедуры

&НаСервере
Процедура ТипПервичногоДокументаПриИзмененииСервер()
	
	Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
	
	УстановитьТипДоговора();
	
	УстановитьПараметрыВыбораПартнера();
	УстановитьПараметрыВыбораДоговора();
	УстановитьПараметрыВыбораГруппыФинансовогоУчета();
	УстановитьПараметрыВыбораНаправленияДеятельности();
	
	ЗаполнитьСписокВыбораПорядкаРасчетов(Ложь);
	
	УстановитьЗаголовок();
	НастроитьПредставлениеСчетаФактуры();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	КонецЕсли;
	
	УстановитьТипДоговора();
	НастроитьПредставлениеСчетаФактуры();
	
КонецПроцедуры

&НаСервере
Процедура ПорядокРасчетовПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		Объект.ГруппаФинансовогоУчета = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговора();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер()
	
	ЗаполнитьСуммыРегл();
	УстановитьТипДоговора();
	УстановитьПараметрыВыбораДоговора();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Организации") Тогда
			Объект.Контрагент = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	КонецЕсли;
	
	УстановитьТипДоговора();
	УстановитьПараметрыВыбораДоговора();
	ЗаполнитьСписокВыбораПорядкаРасчетов();
	
	НастроитьПредставлениеСчетаФактуры();
	УправлениеФормой()
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") 
		И Объект.Партнер <> Справочники.Партнеры.НашеПредприятие Тогда
		Объект.Партнер = Справочники.Партнеры.НашеПредприятие;
	КонецЕсли;
	
	УстановитьТипДоговора();
	УстановитьПараметрыВыбораДоговора();
	ЗакупкиСервер.ЗаполнитьСписокВыбораНаименованиеВходящегоДокумента(ЭтотОбъект, Объект.Контрагент);
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		
		НалогообложениеНДСДоговора = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		
		Если ТипЗнч(Объект.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			Или ТипЗнч(Объект.Договор) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			
			ПорядокРасчетовПоДоговоры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокРасчетов");
			НалогообложениеНДСДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "НалогообложениеНДС");
			
			Если Объект.ПорядокРасчетов <> ПорядокРасчетовПоДоговоры Тогда
				Объект.ПорядокРасчетов = ПорядокРасчетовПоДоговоры;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.НалогообложениеНДС = НалогообложениеНДСДоговора;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипДоговора()
	
	Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		
		Если ТипЗнч(Объект.Договор) <> Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			Объект.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ТипДоговораПоставщика = 0 Тогда
		
		Если ТипЗнч(Объект.Договор) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммыРегл()
	
	
	Объект.СуммаРегл = РаботаСКурсамиВалютУТ.ПересчитатьВВалюту(
							Объект.СуммаДокумента,
							ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация),
							Объект.Валюта,
							ВалютаРегламентированногоУчета,
							Объект.Дата);
							
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСуммыРеглСервер(Организация, СуммаДокумента, ВалютаРег, Валюта, Дата)
	
	СуммаРегл = РаботаСКурсамиВалютУТ.ПересчитатьВВалюту(
							СуммаДокумента,
							ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация),
							Валюта,
							ВалютаРег,
							Дата);
	
	Возврат СуммаРегл;
	
КонецФункции


&НаСервере
Процедура УстановитьЗаголовок()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = СтрШаблон(НСтр("ru = '%1 %2 от %3'"), Объект.ТипПервичногоДокумента, СокрЛП(Объект.Номер), Объект.Дата);
		ОбщегоНазначенияУТКлиентСервер.ОбработкаПолученияПредставленияВходящегоДокумента(
			Объект, Заголовок, Неопределено, "ПервичныйДокумент");
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = '%1 (создание)'"), Объект.ТипПервичногоДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПартнера()
	
	МассивПараметров = Новый Массив;
	Если Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента
		ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("УстанавливатьОтборПоТипуПартнераКакИЛИ", Истина));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.НашеПредприятие", Истина));
	КонецЕсли;
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДоговора()
	
	МассивПараметровВыбораДоговора = Новый Массив;
	МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.Валюта));
	
	Если ТипДоговораПоставщика = 0 Тогда
		МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", Объект.ПорядокРасчетов));
	КонецЕсли;
	
	Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		
		Если Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента
			Или Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
			МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.Организация",           Объект.Организация));
			МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ОрганизацияПолучатель", Объект.Контрагент));
		Иначе
			МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.Организация",           Объект.Контрагент));
			МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ОрганизацияПолучатель", Объект.Организация));
		КонецЕсли;
		
	Иначе
		
		МассивТиповДоговоров = Новый Массив;
		
		Если Объект.ТипПервичногоДокумента  = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента
			Или Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
			
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СДавальцем"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СХранителем"));
			
		Иначе
			
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Импорт"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ВвозИзЕАЭС"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПереработчиком"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоклажедателем"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПереработчиком2_5"));
			
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"));
			
			МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("ПоказыватьПередачуНаКомиссию", Истина));
		КонецЕсли;
		
		Если ТипДоговораПоставщика = 0 Тогда
			МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", Новый ФиксированныйМассив(МассивТиповДоговоров)));
		КонецЕсли;
		
		МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
		МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.Партнер",     Объект.Партнер));
		МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.Контрагент",  Объект.Контрагент));
		
	КонецЕсли;
	
	Элементы.Договор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораДоговора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораГруппыФинансовогоУчета()
	
	МассивПараметровВыбораГруппыФинансовогоУчета = Новый Массив;
	
	Если Объект.ТипПервичногоДокумента  = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента
		ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
		МассивПараметровВыбораГруппыФинансовогоУчета.Добавить(Новый ПараметрВыбора("Отбор.РасчетыСКлиентами", Истина));
	Иначе
		МассивПараметровВыбораГруппыФинансовогоУчета.Добавить(Новый ПараметрВыбора("Отбор.РасчетыСПоставщиками", Истина));
	КонецЕсли;
	
	Элементы.ГруппаФинансовогоУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораГруппыФинансовогоУчета);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНаправленияДеятельности()
	
	МассивПараметровВыбораНаправленияДеятельности = Новый Массив;
	МассивПараметровВыбораНаправленияДеятельности.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыНаправленияДеятельности.Используется));
	
	Если Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика Тогда
		МассивПараметровВыбораНаправленияДеятельности.Добавить(Новый ПараметрВыбора("Отбор.УчетРасчетовСПоставщиками", Истина));
	ИначеЕсли Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
		МассивПараметровВыбораНаправленияДеятельности.Добавить(Новый ПараметрВыбора("Отбор.УчетДоходов", Истина));
	КонецЕсли;
	
	Элементы.НаправлениеДеятельности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораНаправленияДеятельности);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПорядкаРасчетов(ПроверитьЗаполнение = Истина)
	
	СписокВыбора = Элементы.ПорядокРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным, НСтр("ru = 'По расчетным документам'"));
	СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным, НСтр("ru = 'Аванс по заказам, долг по накладным'"));
	СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным, НСтр("ru = 'Аванс по договорам, долг по накладным'"));
	
	Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями") Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, НСтр("ru = 'По договорам'"));
		КонецЕсли;
	Иначе
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, НСтр("ru = 'По договорам'"));
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам, НСтр("ru = 'По заказам'"));
	КонецЕсли;
	
	Если ПроверитьЗаполнение Тогда 
		Если СписокВыбора.НайтиПоЗначению(Объект.ПорядокРасчетов) = Неопределено Тогда
			Объект.ПорядокРасчетов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРегистрацииСчетовФактурПолученных()
	
	Возврат Документы.ПервичныйДокумент.ПараметрыРегистрацииСчетовФактурПолученных(Объект);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЗакрытьПослеЗаписи = Ложь;

#КонецОбласти
