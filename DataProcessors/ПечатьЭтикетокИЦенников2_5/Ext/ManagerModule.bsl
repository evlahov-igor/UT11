#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, Режим) Экспорт
	
	Если СтруктураНастроек.ИсходныеДанные <> Неопределено Тогда
		ИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать();
	Иначе
		ИсходныеДанные = Неопределено;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Таблица",                             Неопределено);
	СтруктураРезультата.Вставить("СоответствиеПолейСКДКолонкамТаблицы", Новый Соответствие);
	
	// Схема компоновки.
	Если Режим = "ОбъектыЭксплуатации" Тогда
	Иначе
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников2_5.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	КонецЕсли; 
	
	НаборДанныхВСКДЗапрос = ТипЗнч(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
	
	Если НаборДанныхВСКДЗапрос Тогда
	
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
		 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&ТекстЗапросаКоэффициентУпаковки1",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"УпаковкиНоменклатуры",
				"ИсходныеДанные.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&ТекстЗапросаКоэффициентУпаковки2",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ЕдиничныеУпаковкиВладельцы.Упаковка",
				"ЕдиничныеУпаковкиВладельцы.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&ТекстЗапросаКоэффициентУпаковки3",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ИсходныеДанные.Упаковка",
				"ИсходныеДанные.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&ТекстЗапросаКоэффициентУпаковки4",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ЕдиничныеУпаковкиНоменклатур.Упаковка",
				"ЕдиничныеУпаковкиНоменклатур.Номенклатура"));
		
		ПечатьЭтикетокИЦенниковЛокализация.ПриПодготовкеСтруктурыДанныхНабора(Режим, СхемаКомпоновкиДанных, ТекстЗапроса);
		
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ТекстЗапроса;

	КонецЕсли;
	
	// Возможно изменение схемы компоновки данных.
	ДанныеПолученияВыражений = РаботаСФормулами.ДанныеДляПолученияВыраженийФормулЧерезСКД(СхемаКомпоновкиДанных,
		СтруктураНастроек.ОбязательныеПоля, Истина);
	
	ПоляДляВыборки = Новый Массив;
	НомерПоля = 0;
	
	// Хранит назначенные имена вычисляемым полям. Для получения данных в СКД (содержатся наборы объекты).
	ИменаКолонокДляСКД = Новый Соответствие;
	// Хранит исходные выражения, указанные в макете печати. Для получения данных в запросе (содержатся наборы запросы).
	ИсходныеВыраженияДляЗапроса = Новый Соответствие;
	Для Каждого ПреобразованиеВыражения Из ДанныеПолученияВыражений.ПреобразованныеВыражения Цикл
		ИсходноеВыражение = ПреобразованиеВыражения.Ключ;
		РезультатПреобразования = ПреобразованиеВыражения.Значение;
		Если ЗначениеЗаполнено(РезультатПреобразования) Тогда
			Если СтрНайти(РезультатПреобразования, ".") > 0 Тогда
				НомерПоля = НомерПоля + 1;
				ИмяПоля = "ВычисляемоеПоле" + Формат(НомерПоля, "ЧН=0; ЧГ=0;");
			
				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных,
					ИмяПоля,
					РезультатПреобразования);
				ПоляДляВыборки.Добавить(ИмяПоля);
				
				Если НЕ НаборДанныхВСКДЗапрос Тогда
					ИменаКолонокДляСКД.Вставить(ИсходноеВыражение, ЗаменитьСпецСимволы(ИмяПоля));
				КонецЕсли;
			Иначе
				// Исходное поле компоновки.
				ПоляДляВыборки.Добавить(РезультатПреобразования);
				
				Если НЕ НаборДанныхВСКДЗапрос Тогда
					ИменаКолонокДляСКД.Вставить(ИсходноеВыражение, ЗаменитьСпецСимволы(РезультатПреобразования));
				КонецЕсли;
			КонецЕсли;
			Если НаборДанныхВСКДЗапрос Тогда
				ИсходныеВыраженияДляЗапроса.Вставить(РезультатПреобразования, ИсходноеВыражение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
	КонецЕсли;
	
	Для Каждого ИмяПоля Из ПоляДляВыборки Цикл
		ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЦикла;
	
	Если Режим = "Товары" Тогда
		// Заполнение параметров.
		Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
			Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр
				УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
			Иначе
				УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
			КонецЕсли;
		КонецЦикла;
		УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя",        ТекущаяДатаСеанса());
		УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
		
		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
	КонецЕсли;
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Если НаборДанныхВСКДЗапрос Тогда
		
		Для Каждого НаборДанных из МакетКомпоновкиДанных.НаборыДанных Цикл
			Для каждого Поле Из НаборДанных.Поля Цикл
				
				РезультатПреобразования = Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(Поле.ПутьКДанным);
				ИсходноеВыражение = ИсходныеВыраженияДляЗапроса.Получить(РезультатПреобразования);
				Если ИсходноеВыражение = Неопределено Тогда
					ИсходноеВыражение = РезультатПреобразования;
				КонецЕсли;
				СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Вставить(
					ИсходноеВыражение,
					ЗаменитьСпецСимволы(Поле.Имя));
					
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ПреобразованиеВыражения Из ДанныеПолученияВыражений.ПреобразованныеВыражения Цикл
			ИсходноеВыражение = ПреобразованиеВыражения.Ключ;
			ИмяКолонкиВРежимеСКД = ИменаКолонокДляСКД.Получить(ИсходноеВыражение);
			СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Вставить(
				Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ИсходноеВыражение),
				ИмяКолонкиВРежимеСКД);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборДанныхВСКДЗапрос Тогда
		
		Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
		
		// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
		Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
			Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Режим = "Товары" Тогда
		// Подмена запроса для расчета цен...
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			
			ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследних.Цена";
			ТекстЗамены = " ВЫРАЗИТЬ(
			|          ЦеныНоменклатурыСрезПоследних.Цена
			|          / 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) 
			|          * 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(31,2)) ";
			
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки1",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыСрезПоследних.Упаковка",
					"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки2",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ИсходныеДанныеПоследнийЗапрос.Упаковка",
					"ИсходныеДанныеПоследнийЗапрос.Номенклатура"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
			
			ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследнихДополнительно.Цена";
			ТекстЗамены = " ВЫРАЗИТЬ(
			|          ЦеныНоменклатурыСрезПоследнихДополнительно.Цена
			|          / 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) 
			|          * 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(31,2)) ";
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки1",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыСрезПоследнихДополнительно.Упаковка",
					"ЦеныНоменклатурыСрезПоследнихДополнительно.Номенклатура"));
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки2",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ИсходныеДанныеПоследнийЗапрос.Упаковка",
					"ИсходныеДанныеПоследнийЗапрос.Номенклатура"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
			
			ЗаменяемыйТекст = "ТоварыНаСкладахОстатки.ВНаличииОстаток";
			ТекстЗамены = " ВЫРАЗИТЬ(
			|          ТоварыНаСкладахОстатки.ВНаличииОстаток
			|          / 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК ЧИСЛО(31,2)) ";
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ИсходныеДанныеПоследнийЗапрос.Упаковка",
					"ИсходныеДанныеПоследнийЗапрос.Номенклатура"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
			
		КонецЕсли;
		
		// Подмена запроса при печати этикеток...
		Если ИсходныеДанные <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОЛИЧЕСТВО(ИсходныеДанные.КоличествоЦенников)",
			                                         "СУММА(ИсходныеДанные.КоличествоЦенниковДляПечати)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОЛИЧЕСТВО(ИсходныеДанные.КоличествоЭтикеток)",
			                                         "СУММА(ИсходныеДанные.КоличествоЭтикеток)");	
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """Цена""", "ИсходныеДанные.Цена");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ЦенаДополнительно""", "ИсходныеДанные.ЦенаДополнительно");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ДатаПоследнегоИзмененияЦены""", "ИсходныеДанные.ДатаПоследнегоИзмененияЦены");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ДатаПоследнегоИзмененияЦеныДополнительно""", "ИсходныеДанные.ДатаПоследнегоИзмененияЦеныДополнительно");
			
		Иначе
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Порядок,
			|		0 КАК Количество)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "СкладскиеЯчейки" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		Иначе
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Ячейка,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "СерииНоменклатуры" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		Иначе
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "Доставка" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
		
			ВнешниеНаборыДанных = Новый Структура;
			ВнешниеНаборыДанных.Вставить("ИсходныеДанныеНакладных", ИсходныеДанные);
			
			Результат = Новый ТаблицаЗначений;
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Результат);	
			Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			СтруктураРезультата.Таблица = Результат;
			
		КонецЕсли;
		
	ИначеЕсли Режим = "УпаковочныеЛисты" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		Иначе
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка) КАК Ссылка,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);
			
		КонецЕсли;
	
	//++ Локализация
	ИначеЕсли Режим = "ТМЦВЭксплуатации" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.ПартииТМЦВЭксплуатации.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|		ЗНАЧЕНИЕ(Справочник.ПартииТМЦВЭксплуатации.ПустаяСсылка) КАК Партия,
			|		"""" КАК ИнвентарныйНомер,
			|		0 КАК Порядок)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
	//-- Локализация
		
	КонецЕсли;
	
	ПечатьЭтикетокИЦенниковЛокализация.ПриПодготовкеСтруктурыДанныхДляПечати(СтруктураНастроек, Режим, Запрос, ИсходныеДанные);
	
	Если НаборДанныхВСКДЗапрос Тогда
		СтруктураРезультата.Таблица = Запрос.Выполнить().Выгрузить();
		// << 10.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
		ПараметрыЦен = КР_ПараметрыПереопределенияЦен(СтруктураНастроек, СтруктураРезультата);
		КР_ПереопределитьЦены(ПараметрыЦен);
		// >> 10.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ПечатьЭтикетокИЦенниковЛокализация.ПриПечати(КоллекцияПечатныхФорм, ПараметрыПечати, ОбъектыПечати);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЦенникТовары") 
		Или УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаТовары") Тогда
		
		СформироватьПечатныеФормыЭтикетокИЦенниковТоваров(ПараметрыПечати, ОбъектыПечати, КоллекцияПечатныхФорм);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаСкладскиеЯчейки") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭтикеткиСкладскойЯчейки(ПараметрыПечати, ОбъектыПечати);
		
		СинонимМакета = НСтр("ru = 'Этикетки складских ячеек'");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаСкладскиеЯчейки",
			СинонимМакета,
			ТабличныйДокумент);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаСерииНоменклатуры") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭтикеткиСерииНоменклатуры(ПараметрыПечати, ОбъектыПечати);
		
		СинонимМакета = НСтр("ru = 'Этикетки серий номенклатуры'");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаСерииНоменклатуры",
			СинонимМакета,
			ТабличныйДокумент);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаДоставки") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭтикеткиДоставки(ПараметрыПечати, ОбъектыПечати, КоллекцияПечатныхФорм);
		
		СинонимМакета = НСтр("ru = 'Этикетки доставки'");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаДоставки",
			СинонимМакета,
			ТабличныйДокумент);
			
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаУпаковочныеЛисты") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭтикеткиУпаковочныеЛисты(ПараметрыПечати, ОбъектыПечати);
		
		СинонимМакета = НСтр("ru = 'Этикетки упаковочных листов'");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаУпаковочныеЛисты",
			СинонимМакета,
			ТабличныйДокумент);
			
	КонецЕсли;
	
	
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПечатныеФормыЭтикетокИЦенниковТоваров(ДанныеПечати, ОбъектыПечати, КоллекцияПечатныхФормБСП)
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.Товары);
	
	НужноПечататьЭтикетки = Ложь;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФормБСП, "ЭтикеткаТовары") Тогда
		НужноПечататьЭтикетки = Истина;
		КоллекцияПечатныхФормБСП.Удалить(КоллекцияПечатныхФормБСП.Найти(ВРег("ЭтикеткаТовары"), "ИмяВРЕГ"));
	КонецЕсли;
	
	НужноПечататьЦенники = Ложь;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФормБСП, "ЦенникТовары") Тогда
		НужноПечататьЦенники = Истина;
		КоллекцияПечатныхФормБСП.Удалить(КоллекцияПечатныхФормБСП.Найти(ВРег("ЦенникТовары"), "ИмяВРЕГ"));
	КонецЕсли;
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	
	// << 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
	//СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаПечатьТовары";
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "КР_ПоляШаблонаПечатьТовары";
	// >> 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
	
	// Собираем используемые поля из шаблонов.
	СоответствиеШаблонов = Новый Соответствие;
	Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И СтрокаТЧ.КоличествоЭтикеток > 0 И НужноПечататьЭтикетки Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) И СтрокаТЧ.КоличествоЦенников > 0 И НужноПечататьЦенники Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЦенника);
		КонецЕсли;
	КонецЦикла;
	Если ДанныеПечати.Свойство("СтруктураМакетаШаблона") И ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СоответствиеШаблонов.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	КонецЕсли;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение ИЗ СоответствиеШаблонов Цикл
		
		ШаблонЭтикетокИЦенников = КлючИЗначение.Ключ;
		
		Если ЗначениеЗаполнено(ШаблонЭтикетокИЦенников) Тогда
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		Иначе
			СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
		КонецЕсли;
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(ШаблонЭтикетокИЦенников, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
			СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураНастроек.ПараметрыДанных.Вставить("Организация", ДанныеПечати.Организация);
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоОбмена",                 ДанныеПечати.ПравилоОбмена);
	СтруктураНастроек.ПараметрыДанных.Вставить("МаксимальныйКодВесовогоТовара", ДанныеПечати.МаксимальныйКодВесовогоТовара);
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоВыгрузкиВВесы",          ДанныеПечати.ПравилоВыгрузкиВВесы);
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены",       ДанныеПечати.ВидЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("Дата",          ДанныеПечати.Дата);
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦеныДополнительно", ДанныеПечати.ВидЦеныДополнительно);
	СтруктураНастроек.ПараметрыДанных.Вставить("ДатаДополнительно",    ДанныеПечати.ДатаДополнительно);
	// << 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
	Если ДанныеПечати.Свойство("Склад") Тогда
		СтруктураНастроек.ПараметрыДанных.Вставить("Склад", ДанныеПечати.Склад);
	КонецЕсли;
	// >> 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
	
	СтруктураНастроек.ИсходныеДанные = ИсходныеДанные;

#Область ПодготовкаСтруктурыДанныхШаблона
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "Товары");

#КонецОбласти

#Область ФормированиеТабличногоДокумента
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников2_5.ПолучитьМакет("Эталон");
	РисунокКвадрат = Эталон.Рисунки.Квадрат100Пикселей; // РисунокТабличногоДокумента
	КоличествоМиллиметровВПикселе = РисунокКвадрат.Высота / 100;
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиКоличество");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов Цикл
		
		Если ((ЗначениеЗаполнено(КлючИЗначение.Ключ)
				И КлючИЗначение.Ключ.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров)
				ИЛИ Не ЗначениеЗаполнено(КлючИЗначение.Ключ))
			И НужноПечататьЭтикетки Тогда
			
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Этикетка: "+КлючИЗначение.Ключ;
			ПечатнаяФорма.СинонимМакета        = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Этикетка: %1'"), КлючИЗначение.Ключ);
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЭтикетокДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЭтикеткиДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
			
		КонецЕсли;
		
		Если ((ЗначениеЗаполнено(КлючИЗначение.Ключ)
				И КлючИЗначение.Ключ.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров)
				ИЛИ Не ЗначениеЗаполнено(КлючИЗначение.Ключ))
			И НужноПечататьЦенники Тогда
			
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Ценник: " + КлючИЗначение.Ключ;
			ПечатнаяФорма.СинонимМакета        = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ценник: %1'"), КлючИЗначение.Ключ);
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЦенниковДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЦенникаДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// << 15.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
	ИмяКолонкиЦенник = "ШаблонЦенникаДляПечати";
	// >> 15.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		// #4100.. Фомин Д.Ю. 24.05.2024.
		Если ПечатнаяФорма.ИмяКолонкиШаблон = ИмяКолонкиЦенник Тогда
			
			ПечатьDataMatrix = (ДанныеПечати.Свойство("ПечатьDataMatrix") И ДанныеПечати.ПечатьDataMatrix);
			
			Если ПечатьDataMatrix Тогда
				
				СтруктураНастроекШаблонаDataMatrix = злПолучитьСтруктуруНастроекШаблонаDataMatrix();
				
				Если ЗначениеЗаполнено(СтруктураНастроекШаблонаDataMatrix) Тогда
					ОбластьDM = СтруктураНастроекШаблонаDataMatrix.МакетЭтикетки.ПолучитьОбласть(СтруктураНастроекШаблонаDataMatrix.ИмяОбластиПечати);
					КодыDataMatrix = злПолучитьКодыDataMatrix(СтруктураРезультата.Таблица);	
				КонецЕсли;	
					
			КонецЕсли;
			
		КонецЕсли;	
		// ..#4100			
		
		НомерКолонки = 0;
		НомерРяда = 0;
		
		// << 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
		//Если ПечатнаяФорма.ИмяКолонкиШаблон = ИмяКолонкиЦенник Тогда
			ДатыИзготовления = КР_ДатыИзготовления(СтруктураНастроек, СтруктураРезультата, ПечатнаяФорма);
		//КонецЕсли;
		// >> 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
		Для Каждого СтрокаТовары Из СтруктураРезультата.Таблица Цикл
			
			Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] > 0 И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон] = ПечатнаяФорма.Шаблон Тогда
				
				СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]);
				
				Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
					ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
				КонецЕсли;
				
				Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
				
				// Применение настроек табличного документа.
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма.ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
				
				ВыводитьЗнакВалютыДополнительно = Истина; //A2105505-2294
				
				Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
					Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
						НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
						Если НаименованиеКолонки <> Неопределено Тогда
							Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
						КонецЕсли;
						// << 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
						//Если ПечатнаяФорма.ИмяКолонкиШаблон = "ШаблонЦенникаДляПечати" И ПараметрШаблона.Ключ = "ДатаИзготовления" Тогда
						Если ПараметрШаблона.Ключ = "ДатаИзготовления" Тогда
							КР_ЗаполнитьДатуИзготовления(
								ДатыИзготовления,
								СтрокаТовары.Номенклатура,
								Область.Параметры[ПараметрШаблона.Значение]);
						КонецЕсли;
						// >> 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
						// << 17.10.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2294
						Если ПараметрШаблона.Ключ = "ЦенаДополнительно" Тогда 
							Если СтрокаТовары.ЦенаДополнительно <= СтрокаТовары.Цена				// #4456.. Фомин Д.Ю. 30.07.2024. 
								Или СтрокаТовары[НаименованиеКолонки] = 0 
								Тогда
							Область.Параметры[ПараметрШаблона.Значение] = "";
							ВыводитьЗнакВалютыДополнительно = Ложь;
                            КонецЕсли;
						КонецЕсли; 
						// >> 17.10.2023, Фомичев А.Е., КРОК, Jira№ A2105505-229
					КонецЕсли;
				КонецЦикла;
				
				// << 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
				Если ПечатнаяФорма.ИмяКолонкиШаблон = ИмяКолонкиЦенник Тогда
					КР_УдалитьРисункиИзЦенника(СтрокаТовары.Номенклатура, Область.Рисунки);
				КонецЕсли;
				// >> 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
				
				Для каждого Рисунок Из Область.Рисунки Цикл
					
					Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
						
						ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
						Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
							ЗначениеШтрихкодаДляКомпоненты = ЗначениеШтрихкода;
							ПечатьЭтикетокИЦенниковЛокализация.ПриОпределенииЗначенияШтрихкодаДляКомпоненты(
								ЗначениеШтрихкодаДляКомпоненты, СтруктураШаблона.ТипКода);
							
							Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
								УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
							Иначе
								УровеньЧеткости = 1;
							КонецЕсли;
							
							ПараметрыШтрихкода = Новый Структура;
							ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
							ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
							ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
							ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
							ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
							ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
							ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
							
							Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
								ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
							КонецЕсли;
							Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
								ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
							КонецЕсли;
							Если СтруктураШаблона.Свойство("УголПоворота") Тогда
								ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
							КонецЕсли;
							Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
								ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
							КонецЕсли;
							Если СтруктураШаблона.Свойство("Масштабировать") Тогда
								ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
							КонецЕсли;
							Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
								ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
							КонецЕсли;
							Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
								ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
							КонецЕсли;
							
							Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрНайти(Рисунок.Имя, "ЗнакВалюты") = 1 Тогда
						ЗначениеКодаВалюты = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраКодВалюты())];
						Попытка
							Рисунок.Картинка = Новый Картинка(Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет("ЗнакВалюты" + ЗначениеКодаВалюты), Истина);
						Исключение
							Рисунок.Картинка = Новый Картинка;
						КонецПопытки;
					КонецЕсли;
					// << 17.10.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2294
					//Убираем знак валюты при нулевой дополнительной цене
					Если Рисунок.Имя = "ВалютаЦенаДополнительно" Тогда  
						Если Не ВыводитьЗнакВалютыДополнительно Тогда
							Рисунок.Картинка = Новый Картинка;
						КонецЕсли;
					КонецЕсли;
					// >> 17.10.2023, Фомичев А.Е., КРОК, Jira№ A2105505-229
				КонецЦикла;
				
				Для Инд = 1 По СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] Цикл // Цикл по количеству экземпляров
					
					НомерКолонки = НомерКолонки + 1;
					
					Если НомерКолонки = 1 Тогда
						
						НомерРяда = НомерРяда + 1;
						
						ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
						
					Иначе
						
						ПечатнаяФорма.ТабличныйДокумент.Присоединить(Область);
						
					КонецЕсли;
					
					Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
						
						НомерРяда    = 0;
						НомерКолонки = 0;
						
						ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
					ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
						
						НомерКолонки = 0;
						
					КонецЕсли;
					
					// #4100.. Фомин Д.Ю. 24.05.2024.
					Если ПечатнаяФорма.ИмяКолонкиШаблон = ИмяКолонкиЦенник
						И ПечатьDataMatrix Тогда
						
						СтрокаКодDataMatrix = КодыDataMatrix.Найти(СтрокаТовары.Штрихкод, "Штрихкод");
						
						Если СтрокаКодDataMatrix <> Неопределено Тогда
							
							Если ЗначениеЗаполнено(СтрокаКодDataMatrix.image) Тогда
								
								// Выводим на печать
								ТабДокументDM = Новый ТабличныйДокумент;
								
								Для Каждого Рисунок Из ОбластьDM.Рисунки Цикл
									Рисунок.Картинка = Новый Картинка(Base64Значение(СтрокаКодDataMatrix.image));
									Рисунок.РазмерКартинки = РазмерКартинки.АвтоРазмер;
								КонецЦикла;
								
								ТабДокументDM.Вывести(ОбластьDM);
								//ТабДокументDM.ВывестиГоризонтальныйРазделительСтраниц();							
								
								ПечатнаяФорма.ТабличныйДокумент.Вывести(ТабДокументDM);
								
								// Удаляем из ТЗ
								КодыDataMatrix.Удалить(СтрокаКодDataMatrix);
								
							КонецЕсли;						
							
						КонецЕсли;
						
					КонецЕсли;
					// ..#4100
					
				КонецЦикла; // Цикл по количеству экземпляров
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по строкам таблицы товаров
		
	КонецЦикла;
	
#КонецОбласти
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
			НоваяСтрока = КоллекцияПечатныхФормБСП.Добавить();
			
			НоваяСтрока.ИмяМакета = ПечатнаяФорма.ИмяМакета;
			НоваяСтрока.ИмяВРЕГ   = ВРег(ПечатнаяФорма.ИмяМакета);
			НоваяСтрока.Экземпляров = 1;
			
			НоваяСтрока.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
			НоваяСтрока.СинонимМакета = ПечатнаяФорма.СинонимМакета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуЭтикеткиСкладскойЯчейки(ДанныеПечати, ОбъектыПечати)
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("Ячейка");
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаСкладскиеЯчейки";
	
	ШаблонЭтикетки        = ДанныеПечати.ШаблонЭтикетки;
	КоличествоЭкземпляров = ДанныеПечати.КоличествоЭкземпляров;
	
	СтруктураНастроек.ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.СкладскиеЯчейки);
	
	Если Не ДанныеПечати.Свойство("СтруктураМакетаШаблона") Или Не ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СтруктураШаблона = ШаблонЭтикетки.Шаблон.Получить();
	Иначе
		СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "СкладскиеЯчейки");
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников2_5.ПолучитьМакет("Эталон");
	РисунокКвадрат = Эталон.Рисунки.Квадрат100Пикселей; // РисунокТабличногоДокумента
	КоличествоМиллиметровВПикселе = РисунокКвадрат.Высота / 100;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	НомерКолонки = 0;
	НомерРяда = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
				
				ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ЗначениеШтрихкодаДляКомпоненты = ЗначениеШтрихкода;
					// << 28.07.2023, Фомичев А.Е., КРОК, Jira№A2105505-2044
					Если СтруктураШаблона.ТипКода = 0 Тогда
						ЗначениеШтрихкодаДляКомпоненты = СтрокаТаблицы.Ячейка.Код;
					КонецЕсли;
					// << 28.07.2023, Фомичев А.Е., КРОК, Jira№A2105505-2044
					ПечатьЭтикетокИЦенниковЛокализация.ПриОпределенииЗначенияШтрихкодаДляКомпоненты(ЗначениеШтрихкодаДляКомпоненты, СтруктураШаблона.ТипКода);
					
					Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
						УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
					Иначе
						УровеньЧеткости = 1;
					КонецЕсли;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
					ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
					ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
					
					Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
						ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
						ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("УголПоворота") Тогда
						ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
						ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("Масштабировать") Тогда
						ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
						ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
						ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
					КонецЕсли;
					
					Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 1 По КоличествоЭкземпляров Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЭтикеткиДоставки(ДанныеПечати, ОбъектыПечати, КоллекцияПечатныхФормБСП)
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("Распоряжение");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикетки");
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаДоставка";
	
	// Собираем используемые поля из шаблонов.
	ТаблицаДоставки = ПолучитьИзВременногоХранилища(ДанныеПечати.АдресВХранилище);
	СоответствиеШаблонов = Новый Соответствие;
	Для Каждого СтрокаТЧ Из ТаблицаДоставки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
	КонецЦикла;
	Если ДанныеПечати.Свойство("СтруктураМакетаШаблона") И ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СоответствиеШаблонов.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	КонецЕсли;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		
		ШаблонЭтикетокИЦенников = КлючИЗначение.Ключ;
		
		Если ЗначениеЗаполнено(ШаблонЭтикетокИЦенников) Тогда
			СтруктураШаблона = ШаблонЭтикетокИЦенников.Шаблон.Получить();
		Иначе
			СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
		КонецЕсли;
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
			СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);	
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураНастроек.ИсходныеДанные = ТаблицаДоставки;

#Область ПодготовкаСтруктурыДанныхШаблона
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "Доставка");
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов Цикл
	
		ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
		ПечатнаяФорма.ИмяМакета            = "Этикетка: "+КлючИЗначение.Ключ;
		ПечатнаяФорма.СинонимМакета        =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Этикетка: %1'"), КлючИЗначение.Ключ);
		ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЭтикетки";
		ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		
	КонецЦикла;
	
#КонецОбласти
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	КоличествоПоВертикали =0;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		НомерРяда    = 0;
		НомерКолонки = 0;
		КоличествоПоВертикали = КоличествоПоВертикали + 1/СтруктураШаблона.КоличествоПоВертикали; 
		Если КоличествоПоВертикали > 1  Тогда
			КоличествоПоВертикали =0;
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
		Для Каждого СтрокаТовары Из СтруктураРезультата.Таблица Цикл
			
			Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон] = ПечатнаяФорма.Шаблон Тогда
				
				СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]);
				
				Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати); // ТабличныйДокумент
				
				// Применение настроек табличного документа.
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
				
				Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
					Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
						НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
						Если НаименованиеКолонки <> Неопределено Тогда
							Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				НомерКолонки = НомерКолонки + 1;
				
				Если НомерКолонки = 1 Тогда
					
					НомерРяда = НомерРяда + 1;
					
					ТабличныйДокумент.Вывести(Область);
					
				Иначе
					
					ТабличныйДокумент.Присоединить(Область);
					
				КонецЕсли;
				
				Если НомерРяда = СтруктураШаблона.КоличествоПоВертикали И НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
					
					НомерРяда    = 0;
					НомерКолонки = 0;
					КоличествоПоВертикали =0;
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
				ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
					
					НомерКолонки = 0;
					КоличествоПоВертикали = КоличествоПоВертикали + 1/СтруктураШаблона.КоличествоПоВертикали;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по строкам таблицы товаров
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЭтикеткиСерииНоменклатуры(ДанныеПечати, ОбъектыПечати)
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("Серия");
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаСерииНоменклатуры";
	
	ШаблонЭтикетки        = ДанныеПечати.ШаблонЭтикетки;
	КоличествоЭкземпляров = ДанныеПечати.КоличествоЭкземпляров;
	
	СтруктураНастроек.ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.АдресВХранилище);
	
	Если Не ДанныеПечати.Свойство("СтруктураМакетаШаблона") Или НЕ ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СтруктураШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонЭтикетки, "Шаблон").Получить();
	Иначе
		СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "СерииНоменклатуры");
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников2_5.ПолучитьМакет("Эталон");
	РисунокКвадрат = Эталон.Рисунки.Квадрат100Пикселей; // РисунокТабличногоДокумента
	КоличествоМиллиметровВПикселе = РисунокКвадрат.Высота / 100;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	НомерКолонки = 0;
	НомерРяда = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
				
				ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ЗначениеШтрихкодаДляКомпоненты = ЗначениеШтрихкода;
					ПечатьЭтикетокИЦенниковЛокализация.ПриОпределенииЗначенияШтрихкодаДляКомпоненты(ЗначениеШтрихкодаДляКомпоненты, СтруктураШаблона.ТипКода);
					
					Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
						УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
					Иначе
						УровеньЧеткости = 1;
					КонецЕсли;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
					ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
					ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
					
					Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
						ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
						ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("УголПоворота") Тогда
						ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
						ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("Масштабировать") Тогда
						ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
						ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
						ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
					КонецЕсли;
					
					Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 1 По КоличествоЭкземпляров Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЭтикеткиУпаковочныеЛисты(ДанныеПечати, ОбъектыПечати)
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("УпаковочныйЛист");
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаУпаковочныеЛисты";
	// << 18.05.2023, Федоров Д.Е., КРОК, Jira№A2105505-1664
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "КР_ПоляШаблонаУпаковочныеЛисты";
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШтрихкодСсылки");
	// >> 18.05.2023, Федоров Д.Е., КРОК, Jira№A2105505-1664
	
	Если Не ДанныеПечати.Свойство("ШаблонЭтикетки") Тогда
		ШаблонЭтикетки = Константы.ШаблонЭтикеткиУпаковочногоЛиста.Получить();
		Если Не ЗначениеЗаполнено(ШаблонЭтикетки) Тогда
			ТекстИсключения = НСтр("ru = 'Печать этикетки не возможна, т.к. в настройках программы не выбран шаблон этикетки по умолчанию. Обратитесь к администратору.'");
			
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
	Иначе
	    ШаблонЭтикетки = ДанныеПечати.ШаблонЭтикетки;
	КонецЕсли;
	
	Если Не ДанныеПечати.Свойство("КоличествоЭкземпляров") Тогда
		КоличествоЭкземпляров = 1;
	Иначе
	    КоличествоЭкземпляров = ДанныеПечати.КоличествоЭкземпляров;
	КонецЕсли;
	
	СтруктураНастроек.ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.АдресВХранилище);
	
	Если Не ДанныеПечати.Свойство("СтруктураМакетаШаблона") Или НЕ ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СтруктураШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонЭтикетки, "Шаблон").Получить();
	Иначе
		СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "УпаковочныеЛисты");
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников2_5.ПолучитьМакет("Эталон");
	РисунокКвадрат = Эталон.Рисунки.Квадрат100Пикселей; // РисунокТабличногоДокумента
	КоличествоМиллиметровВПикселе = РисунокКвадрат.Высота / 100;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	НомерКолонки = 0;
	НомерРяда = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.Таблица Цикл
			
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
				
				ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
				// << 18.05.2023, Федоров Д.Е., КРОК, Jira№A2105505-1664
				Если СтрНайти(Рисунок.Имя, "ШтрихкодСсылки") = 1 Тогда
					ЗначениеШтрихкода = СтрокаТаблицы["ШтрихкодСсылки"];
				КонецЕсли;
				// >> 18.05.2023, Федоров Д.Е., КРОК, Jira№A2105505-1664
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ЗначениеШтрихкодаДляКомпоненты = ЗначениеШтрихкода;
					ПечатьЭтикетокИЦенниковЛокализация.ПриОпределенииЗначенияШтрихкодаДляКомпоненты(ЗначениеШтрихкодаДляКомпоненты, СтруктураШаблона.ТипКода);
					
					Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
						УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
					Иначе
						УровеньЧеткости = 1;
					КонецЕсли;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
					ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
					ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
					
					Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
						ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
						ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("УголПоворота") Тогда
						ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
						ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("Масштабировать") Тогда
						ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
						ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
						ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
					КонецЕсли;
					
					Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 1 По КоличествоЭкземпляров Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		
		ЗначениеПараметраКомпоновкиДанных.Значение = ЗначениеПараметра;
		ЗначениеПараметраКомпоновкиДанных.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраКомпоновкиДанных.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

// Функция возвращает пустую структуру настроек
// 
// Параметры: 
//  Нет
// 
// Возвращаемое значение: 
//  Структура - структура настроек.
Функция СтруктураНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные",                         Неопределено);
	СтруктураНастроек.Вставить("ОбязательныеПоля",                       Новый Массив);
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов", Новый Соответствие);
	СтруктураНастроек.Вставить("ПараметрыДанных"    ,                    Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек",                    Неопределено);
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных",         Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ДанныеДляПечатиЭтикетокДоставки(МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	МассивТекстовЗапроса = Новый Массив;
	ТекущийОбъект = МассивОбъектов[0];
	
	Если ТипЗнч(ТекущийОбъект) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
		
		ТекстЗапросаСозданияВТРаспоряженияПоЗаданию =
		"ВЫБРАТЬ
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК ЗаданиеНаПеревозку,
		|	ВЫБОР
		|		КОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ЗаданиеВыполняет = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик)
		|			ТОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Перевозчик
		|		ИНАЧЕ ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.ПеревозчикПартнер
		|	КОНЕЦ КАК Перевозчик,
		|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК Распоряжение,
		|	ЗаданиеНаПеревозкуРаспоряжения.Вес КАК Вес,
		|	ЗаданиеНаПеревозкуРаспоряжения.Объем КАК Объем,
		|	ВЫБОР
		|		КОГДА ЗаданиеНаПеревозкуРаспоряжения.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ЗаданиеНаПеревозкуРаспоряжения.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ДатаВремяРейсаПланС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОрдерныйСклад,
		|	ЗаданиеНаПеревозкуРаспоряжения.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ЗаданиеВыполняет = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик)
		|			И ЕСТЬNULL(ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Перевозчик.ШаблонЭтикетки, ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|			ТОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Перевозчик.ШаблонЭтикетки
		|		КОГДА ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель ССЫЛКА Справочник.Партнеры
		|			И ЕСТЬNULL(ВЫРАЗИТЬ(ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель КАК Справочник.Партнеры).ШаблонЭтикетки, ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель КАК Справочник.Партнеры).ШаблонЭтикетки
		|		ИНАЧЕ &ШаблонЭтикеткиДоставки
		|	КОНЕЦ КАК ШаблонЭтикетки,
		|	СУММА(ЕСТЬNULL(РасходныйОрдерНаТовары.ВсегоМест, 0)) КАК ВсегоМест
		|ПОМЕСТИТЬ РаспоряженияПоЗаданию
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = РасходныйОрдерНаТовары.ЗаданиеНаПеревозку
		|ГДЕ
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка В(&ПараметрКоманды)
		|	И НЕ ЗаданиеНаПеревозкуРаспоряжения.Распоряжение ССЫЛКА Документ.ПоручениеЭкспедитору
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаданиеНаПеревозкуРаспоряжения.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ЗаданиеНаПеревозкуРаспоряжения.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ДатаВремяРейсаПланС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ЗаданиеВыполняет = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик)
		|			И ЕСТЬNULL(ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Перевозчик.ШаблонЭтикетки, ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|			ТОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Перевозчик.ШаблонЭтикетки
		|		КОГДА ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель ССЫЛКА Справочник.Партнеры
		|			И ЕСТЬNULL(ВЫРАЗИТЬ(ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель КАК Справочник.Партнеры).ШаблонЭтикетки, ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель КАК Справочник.Партнеры).ШаблонЭтикетки
		|		ИНАЧЕ &ШаблонЭтикеткиДоставки
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ЗаданиеВыполняет = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик)
		|			ТОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Перевозчик
		|		ИНАЧЕ ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.ПеревозчикПартнер
		|	КОНЕЦ,
		|	ЗаданиеНаПеревозкуРаспоряжения.Склад,
		|	ЗаданиеНаПеревозкуРаспоряжения.Объем,
		|	ЗаданиеНаПеревозкуРаспоряжения.Вес";
		
		ТекстЗапросаПоРаспоряжению =
		"ВЫБРАТЬ
		|	РаспоряженияПоЗаданию.Распоряжение КАК Распоряжение,
		|	РаспоряженияПоЗаданию.Перевозчик КАК Перевозчик,
		|	РаспоряженияПоЗаданию.Вес КАК ВесНакладной,
		|	РаспоряженияПоЗаданию.Объем КАК ОбъемНакладной,
		|	РаспоряженияПоЗаданию.ШаблонЭтикетки КАК ШаблонЭтикетки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументРаспоряжениеТовары.НомерСтроки) КАК КоличествоПозиций
		|,&ТекстЗапросаИмяТЧ
		|ИЗ
		|	РаспоряженияПоЗаданию КАК РаспоряженияПоЗаданию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекстИмяТЧТовары КАК ДокументРаспоряжениеТовары
		|		ПО (&ТекстУсловияСоединенияШапкиИТЧ)
		|			И (&ТекстСоединенияСРаспоряжениемПоСкладу)
		|ГДЕ
		|	НЕ РаспоряженияПоЗаданию.ОрдерныйСклад
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	РаспоряженияПоЗаданию.Перевозчик,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	РаспоряженияПоЗаданию.ШаблонЭтикетки,
		|	РаспоряженияПоЗаданию.ВсегоМест";
		
		МассивТекстовПоРаспоряжениям = Новый Массив;
		
		ТипыРаспоряжений = Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип.Типы();
		ЭтоПервыйТип = Истина;
		
		Для Каждого ТипРаспоряжения из ТипыРаспоряжений Цикл
			
			МетаданныеРаспоряжения = Метаданные.НайтиПоТипу(ТипРаспоряжения);
						
			Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеРаспоряжения)
				Или МетаданныеРаспоряжения = Метаданные.Документы.ПоручениеЭкспедитору Тогда
				Продолжить;
			Иначе
				
				ТекстЗапроса = ДанныеДляПечатиЭтикетокДоставкиАдаптироватьКРаспоряжению(МетаданныеРаспоряжения, ТекстЗапросаПоРаспоряжению);
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияСоединенияШапкиИТЧ", "РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжениеТовары.Ссылка");
				Если ЭтоПервыйТип Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ТекстЗапросаИмяТЧ", "ПОМЕСТИТЬ ВТРаспоряженияИШаблоны");
					ЭтоПервыйТип = Ложь;
				Иначе
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ТекстЗапросаИмяТЧ", "");
				КонецЕсли;
				
				МассивТекстовПоРаспоряжениям.Добавить(ТекстЗапроса);
				
			КонецЕсли;
			
				
		КонецЦикла;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	РаспоряженияПоЗаданию.Распоряжение КАК Распоряжение,
			|	РаспоряженияПоЗаданию.Перевозчик КАК Перевозчик,
			|	РаспоряженияПоЗаданию.Вес КАК ВесНакладной,
			|	РаспоряженияПоЗаданию.Объем КАК ОбъемНакладной,
			|	РаспоряженияПоЗаданию.ШаблонЭтикетки КАК ШаблонЭтикетки,
			|	РаспоряженияПоЗаданию.ВсегоМест КАК КоличествоПозиций
			|ИЗ
			|	РаспоряженияПоЗаданию КАК РаспоряженияПоЗаданию
			|ГДЕ
			|	РаспоряженияПоЗаданию.ОрдерныйСклад
			|
			|СГРУППИРОВАТЬ ПО
			|	РаспоряженияПоЗаданию.Распоряжение,
			|	РаспоряженияПоЗаданию.Перевозчик,
			|	РаспоряженияПоЗаданию.Вес,
			|	РаспоряженияПоЗаданию.Объем,
			|	РаспоряженияПоЗаданию.ШаблонЭтикетки,
			|	РаспоряженияПоЗаданию.ВсегоМест";
			
			МассивТекстовПоРаспоряжениям.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		ТекстЗапросаВТРаспоряженияИШаблоны = СтрСоединить(МассивТекстовПоРаспоряжениям, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
		ТекстВыборкиЗаданияБезРаспоряжений =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|			ЛЕВОЕ СОЕДИНЕНИЕ РаспоряженияПоЗаданию КАК РаспоряженияПоЗаданию
		|			ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = РаспоряженияПоЗаданию.ЗаданиеНаПеревозку
		|	ГДЕ
		|		ЗаданиеНаПеревозкуРаспоряжения.Ссылка В(&ПараметрКоманды)
		|		И РаспоряженияПоЗаданию.ЗаданиеНаПеревозку ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаданияНаПеревозку.Ссылка
		|	ИЗ
		|		Документ.ЗаданиеНаПеревозку КАК ЗаданияНаПеревозку
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|			ПО ЗаданияНаПеревозку.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Ссылка
		|	ГДЕ
		|		ЗаданияНаПеревозку.Ссылка В(&ПараметрКоманды)
		|		И ЗаданиеНаПеревозкуРаспоряжения.Ссылка ЕСТЬ NULL) КАК ВложенныйЗапрос
		|ГДЕ
		|	НЕ ВложенныйЗапрос.Ссылка ЕСТЬ NULL";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапросаСозданияВТРаспоряженияПоЗаданию);
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТРаспоряженияИШаблоны);
		МассивТекстовЗапроса.Добавить(ТекстВыборкиЗаданияБезРаспоряжений);
		
	Иначе
		
		ТекстЗапросаПоРаспоряжению =
		"ВЫБРАТЬ
		|	ДокументРаспоряжение.Ссылка КАК Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер КАК Перевозчик,
		|	СУММА(ВЫБОР
		|			КОГДА ДокументРаспоряжениеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ИЛИ &ТекстЗапросаВесУпаковки = 0
		|				ТОГДА &ТекстЗапросаВесНоменклатуры * ДокументРаспоряжениеТовары.Количество
		|			ИНАЧЕ &ТекстЗапросаВесУпаковки * ДокументРаспоряжениеТовары.КоличествоУпаковок
		|		КОНЕЦ) КАК ВесНакладной,
		|	СУММА(ВЫБОР
		|			КОГДА ДокументРаспоряжениеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ИЛИ &ТекстЗапросаОбъемУпаковки = 0
		|				ТОГДА &ТекстЗапросаОбъемНоменклатуры * ДокументРаспоряжениеТовары.Количество
		|			ИНАЧЕ &ТекстЗапросаОбъемУпаковки * ДокументРаспоряжениеТовары.КоличествоУпаковок
		|		КОНЕЦ) КАК ОбъемНакладной,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументРаспоряжениеТовары.НомерСтроки) КАК КоличествоПозиций,
		|	ВЫБОР
		|		КОГДА (ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента))
		|				И ЕСТЬNULL(&ТекстЗапросаШаблонИзКарточкиПартнера, ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаШаблонИзКарточкиПартнера
		|		КОГДА ЕСТЬNULL(ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки, ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|			ТОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|		ИНАЧЕ &ШаблонЭтикеткиДоставки
		|	КОНЕЦ КАК ШаблонЭтикетки
		|,&ТекстЗапросаИмяТЧ
		|ИЗ
		|	ТекстИмяШапкаДокумента КАК ДокументРаспоряжение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекстИмяТЧТовары КАК ДокументРаспоряжениеТовары
		|		ПО &ТекстУсловияСоединенияШапкиИТЧ
		|ГДЕ
		|	ДокументРаспоряжение.Ссылка В(&ПараметрКоманды)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументРаспоряжение.Ссылка,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	ВЫБОР
		|		КОГДА (ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента))
		|				И ЕСТЬNULL(&ТекстЗапросаШаблонИзКарточкиПартнера, ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаШаблонИзКарточкиПартнера
		|		КОГДА ЕСТЬNULL(ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки, ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|			ТОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|		ИНАЧЕ &ШаблонЭтикеткиДоставки
		|	КОНЕЦ";
		
		СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);

		МассивТекстовПоРаспоряжениям = Новый Массив;
		ЭтоПервыйТип = Истина;
		
		Для Каждого КлючЗначение из СтруктураТипов Цикл
			
			МетаданныеРаспоряжения = Метаданные.НайтиПоПолномуИмени(КлючЗначение.Ключ);
			
			ТекстЗапроса = ДанныеДляПечатиЭтикетокДоставкиАдаптироватьКРаспоряжению(МетаданныеРаспоряжения, ТекстЗапросаПоРаспоряжению);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияСоединенияШапкиИТЧ", "(ДокументРаспоряжениеТовары.Ссылка = ДокументРаспоряжение.Ссылка)");
			
			Если ЭтоПервыйТип Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ТекстЗапросаИмяТЧ", "ПОМЕСТИТЬ ВТРаспоряженияИШаблоны");
				ЭтоПервыйТип = Ложь;
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ТекстЗапросаИмяТЧ", "");
			КонецЕсли;
			
			МассивТекстовПоРаспоряжениям.Добавить(ТекстЗапроса);
			
			
		КонецЦикла;
		
		ТекстЗапросаВТРаспоряженияИШаблоны = СтрСоединить(МассивТекстовПоРаспоряжениям, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТРаспоряженияИШаблоны);
		
	КонецЕсли;
	
	ТекстЗапросовВыборкиДанных =
	"ВЫБРАТЬ
	|	ВТРаспоряженияИШаблоны.Распоряжение КАК Распоряжение,
	|	ВТРаспоряженияИШаблоны.ВесНакладной КАК ВесНакладной,
	|	ВТРаспоряженияИШаблоны.ОбъемНакладной КАК ОбъемНакладной,
	|	ВТРаспоряженияИШаблоны.КоличествоПозиций КАК КоличествоПозиций,
	|	ВТРаспоряженияИШаблоны.ШаблонЭтикетки КАК ШаблонЭтикетки,
	|	&ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	&ЕдиницаИзмеренияОбъема КАК ЕдиницаИзмеренияОбъема
	|ИЗ
	|	ВТРаспоряженияИШаблоны КАК ВТРаспоряженияИШаблоны
	|ГДЕ
	|	ВТРаспоряженияИШаблоны.ШаблонЭтикетки <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРаспоряженияИШаблоны.Распоряжение КАК Ссылка,
	|	ВТРаспоряженияИШаблоны.Перевозчик КАК Перевозчик
	|ИЗ
	|	ВТРаспоряженияИШаблоны КАК ВТРаспоряженияИШаблоны
	|ГДЕ
	|	ВТРаспоряженияИШаблоны.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)";
		
	МассивТекстовЗапроса.Добавить(ТекстЗапросовВыборкиДанных);
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ШаблонЭтикеткиДоставки", Константы.ШаблонЭтикеткиДляДоставки.Получить());
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияВеса", Константы.ЕдиницаИзмеренияВеса.Получить());
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияОбъема", Константы.ЕдиницаИзмеренияОбъема.Получить());
	
	Запрос.УстановитьПараметр("ПараметрКоманды", МассивОбъектов);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаДоставки			= РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить();
	ТаблицаОшибок			= РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	
	Если ТипЗнч(ТекущийОбъект)	= Тип("ДокументСсылка.ЗаданиеНаПеревозку")  Тогда
		ЗаданияБезРаспоряжений	= РезультатЗапроса[РезультатЗапроса.ВГраница() - 2].Выгрузить();
		ДоставкаНаНашСклад		= ТекущийОбъект.Операция = ПредопределенноеЗначение("Перечисление.ВидыДоставки.НаСклад");
	Иначе
		ЗаданияБезРаспоряжений	= Неопределено;
		ДоставкаНаНашСклад		= Ложь;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивСсылокСОшибками",ТаблицаОшибок.ВыгрузитьКолонку("Ссылка"));
	СтруктураВозврата.Вставить("ДоставкаНаНашСклад",ДоставкаНаНашСклад);
	
	ТаблицаОшибок.Свернуть("Перевозчик");
	СтруктураВозврата.Вставить("МассивПеревозчиковБезШаблоновЭтикетки",ТаблицаОшибок.ВыгрузитьКолонку("Перевозчик"));
	
	ЕстьЭтикеткиДляПечати = ТаблицаДоставки.Количество() > 0;
	СтруктураВозврата.Вставить("ЕстьЭтикеткиДляПечати",ЕстьЭтикеткиДляПечати);
	
	Если ЕстьЭтикеткиДляПечати Тогда
		СтруктураВозврата.Вставить("АдресВХранилище",ПоместитьВоВременноеХранилище(ТаблицаДоставки));
	КонецЕсли;
	
	Если ЗаданияБезРаспоряжений <> Неопределено
		И ЗаданияБезРаспоряжений.Количество() > 0 Тогда
		
		СтруктураВозврата.Вставить("МассивЗаданийБезРаспоряжений", ЗаданияБезРаспоряжений.ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДанныеДляПечатиЭтикетокДоставкиАдаптироватьКРаспоряжению(МетаданныеРаспоряжения, ТекстЗапросаПоРаспоряжению)
	
	ИменаТЧТовары = Новый Соответствие;
	ИменаТЧТовары.Вставить(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента,"ЗаменяющиеТовары");
	
	Если МетаданныеРаспоряжения.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
		ИмяТЧТовары = "Товары";
	Иначе
		ИмяТЧТовары = ИменаТЧТовары.Получить(МетаданныеРаспоряжения);
		
		Если ИмяТЧТовары = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Для типа %ТипРаспоряжения% распоряжения на доставку не определен запрос выборки данных доставки.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ТипРаспоряжения%", МетаданныеРаспоряжения.ПолноеИмя());
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "ТекстИмяТЧТовары", МетаданныеРаспоряжения.ПолноеИмя() + "." + ИмяТЧТовары);
	
	Если МетаданныеРаспоряжения.ТабличныеЧасти[ИмяТЧТовары].Реквизиты.Найти("Склад") <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстСоединенияСРаспоряжениемПоСкладу",
		"РаспоряженияПоЗаданию.Склад = ДокументРаспоряжениеТовары.Склад");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстСоединенияСРаспоряжениемПоСкладу",
		"ИСТИНА");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекстИмяШапкаДокумента", МетаданныеРаспоряжения.ПолноеИмя());
	
	Если МетаданныеРаспоряжения.Реквизиты.Найти("Партнер") <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаШаблонИзКарточкиПартнера",
		"ДокументРаспоряжение.Партнер.ШаблонЭтикетки");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаШаблонИзКарточкиПартнера",
		"NULL");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаВесНоменклатуры", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ДокументРаспоряжениеТовары.Номенклатура.ЕдиницаИзмерения", "ДокументРаспоряжениеТовары.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаОбъемНоменклатуры", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ДокументРаспоряжениеТовары.Номенклатура.ЕдиницаИзмерения", "ДокументРаспоряжениеТовары.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаВесУпаковки", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ДокументРаспоряжениеТовары.Упаковка", "ДокументРаспоряжениеТовары.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаОбъемУпаковки", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ДокументРаспоряжениеТовары.Упаковка", "ДокументРаспоряжениеТовары.Номенклатура"));
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ДанныеДляПечатиЭтикетокУпаковочныеЛисты(ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// --> Евлахов Игорь Николаевич (Начало) 03.04.2024
	// Задача #3947
	// Начало было
	//Запрос = Новый Запрос;
	// Конец было
	// <-- Евлахов Игорь Николаевич (Конец) 05.04.2024
	
	Если ТипЗнч(ОбъектыПечати[0]) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		// --> Евлахов Игорь Николаевич (Начало) 03.04.2024
		// Задача #3947
		// Начало было
		//Запрос.Текст = 
		// Конец было
		ТекстЗапроса =
		// <-- Евлахов Игорь Николаевич (Конец) 05.04.2024
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист КАК Ссылка,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист.Код КАК Штрихкод
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка В(&ОбъектыПечати)";
	ИначеЕсли ТипЗнч(ОбъектыПечати[0]) = Тип("ДокументСсылка.УпаковочныйЛист") Тогда
		// --> Евлахов Игорь Николаевич (Начало) 03.04.2024
		// Задача #3947
		// Начало было
		//Запрос.Текст = 
		// Конец было
		ТекстЗапроса =
		// <-- Евлахов Игорь Николаевич (Конец) 05.04.2024
		"ВЫБРАТЬ
		|	УпаковочныйЛист.Ссылка,
		|	УпаковочныйЛист.Код КАК Штрихкод
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Ссылка В(&ОбъектыПечати)";		
	Иначе 
		Возврат Новый Структура ("ЕстьШаблонЭтикетки",Ложь);
	КонецЕсли; 
	
	// --> Евлахов Игорь Николаевич (Начало) 03.04.2024
	// Задача #3947
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ЗапросВыбораСхемыЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ОператорВыбратьСхемыЗапроса = ЗапросВыбораСхемыЗапроса.Операторы[0];
	
	ПоляСхемыЗапроса = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля;
	
	Если ТипЗнч(ОбъектыПечати[0]) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда		
		ВыражениеСхемыЗапроса = ПоляСхемыЗапроса.Найти("РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист.Код");
		
		ТекстВыражения = "ВЫБОР
				|		КОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист.злНомерОтбора = """"
				|			ТОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист.Код
				|		ИНАЧЕ РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист.злНомерОтбора
				|	КОНЕЦ";
	Иначе
		ВыражениеСхемыЗапроса = ПоляСхемыЗапроса.Найти("УпаковочныйЛист.Код");
		
		ТекстВыражения = "ВЫБОР
				|		КОГДА УпаковочныйЛист.злНомерОтбора = """"
				|			ТОГДА УпаковочныйЛист.Код
				|		ИНАЧЕ УпаковочныйЛист.злНомерОтбора
				|	КОНЕЦ";
	КонецЕсли;
	
	// Удалим поле, которое модифицируем
	ИндексУдаляемогоЭлемента = ПоляСхемыЗапроса.Индекс(ВыражениеСхемыЗапроса);	
	ПоляСхемыЗапроса.Удалить(ИндексУдаляемогоЭлемента);	
	
	ИндексКолонки = 1;
	// Добавим модифицированное поле
	ВыражениеСхемыЗапроса = ПоляСхемыЗапроса.Добавить(ТекстВыражения, ИндексКолонки);
	
	// Присвоим автоматически добавленной колонке псевдоним
	ЗапросВыбораСхемыЗапроса.Колонки[ИндексКолонки].Псевдоним = "Штрихкод";
	
	// Заменяем исходный текст запроса, новым модифицированным
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
    // <-- Евлахов Игорь Николаевич (Конец) 03.04.2024
		
	Запрос.УстановитьПараметр("ОбъектыПечати",ОбъектыПечати);
	ТаблицаУпаковочныхЛистов = Запрос.Выполнить().Выгрузить();
	ЕстьЭтикеткиДляПечати = ТаблицаУпаковочныхЛистов.Количество() > 0;
	ШаблонЭтикетки = Константы.ШаблонЭтикеткиУпаковочногоЛиста.Получить();
	ЕстьШаблонЭтикетки = ЗначениеЗаполнено(ШаблонЭтикетки);
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьШаблонЭтикетки",    ЕстьШаблонЭтикетки);
	СтруктураВозврата.Вставить("ШаблонЭтикетки",        ШаблонЭтикетки);
	СтруктураВозврата.Вставить("ЕстьЭтикеткиДляПечати", ЕстьЭтикеткиДляПечати);
	Если ЕстьЭтикеткиДляПечати Тогда
		СтруктураВозврата.Вставить("АдресВХранилище",   ПоместитьВоВременноеХранилище(ТаблицаУпаковочныхЛистов));
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЗаменитьСпецСимволы(Знач ВходящаяСтрока)
	
	Перем Результат;
	
	Результат = СтрЗаменить(ВходящаяСтрока, ".", "");
	Результат = СтрЗаменить(Результат, " ", "");
	Результат = СтрЗаменить(Результат, "[", "_");
	Результат = СтрЗаменить(Результат, "]", "_");
	Результат = СтрЗаменить(Результат, "(", "_");
	Результат = СтрЗаменить(Результат, ")", "_");
	Результат = СтрЗаменить(Результат, "*", "_");
	Результат = СтрЗаменить(Результат, "-", "_");
	Результат = СтрЗаменить(Результат, "+", "_");
	Результат = СтрЗаменить(Результат, "/", "_");
	Результат = СтрЗаменить(Результат, "@", "_");
	Результат = СтрЗаменить(Результат, "#", "_");
	Результат = СтрЗаменить(Результат, "$", "_");
	Результат = СтрЗаменить(Результат, "%", "_");
	Результат = СтрЗаменить(Результат, "^", "_");
	Результат = СтрЗаменить(Результат, "&", "_");
	Результат = СтрЗаменить(Результат, "*", "_");
	Результат = СтрЗаменить(Результат, ">", "_");
	Результат = СтрЗаменить(Результат, "<", "_");
	Результат = СтрЗаменить(Результат, "?", "_");
	Результат = СтрЗаменить(Результат, ",", "_");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область КР_ДополнительныеПроцедурыИФункции

// << 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
Функция КР_ДатыИзготовления(СтруктураНастроек, СтруктураРезультата, ПечатнаяФорма)
	
	Таблица = КР_ТоварыДляРасчетаДатыИзготовления(СтруктураНастроек, СтруктураРезультата, ПечатнаяФорма);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втТаблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.КР_ДатаЗаказа КАК ДатаЗаказа,
	|	ЕСТЬNULL(СправочникНоменклатура.КоллекцияНоменклатуры.Код, """") КАК КоллекцияКод,
	|	ЕСТЬNULL(СправочникНоменклатура.КоллекцияНоменклатуры.КР_Сезон.Код, 0) КАК СезонКод,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаИзготовления
	|ИЗ
	|	втТаблица КАК втТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО втТаблица.Номенклатура = СправочникНоменклатура.Ссылка";
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаРезультат Цикл
		
		Если ЗначениеЗаполнено(Строка.ДатаЗаказа) Тогда
			
			Строка.ДатаИзготовления = НачалоМесяца(ДобавитьМесяц(Строка.ДатаЗаказа, 1));
			
		Иначе
			
			Если СтрДлина(СокрЛП(Строка.КоллекцияКод)) = 3 Тогда
				Год = ?(Строка.СезонКод > 79, "202", "201") + Лев(Прав(СокрЛП(Строка.КоллекцияКод), 3), 1);
				КоллекцияМесяц = Прав(СокрЛП(Строка.КоллекцияКод), 2);
			ИначеЕсли СтрДлина(СокрЛП(Строка.КоллекцияКод)) = 4 Тогда
				Год = ?(Строка.СезонКод > 79, "202", "201") + Лев(Прав(СокрЛП(Строка.КоллекцияКод), 4), 1);
				КоллекцияМесяц = Прав(СокрЛП(Строка.КоллекцияКод), 2);
			Иначе
				Год 			= "0001";
				КоллекцияМесяц 	= "01";
			КонецЕсли;
			
			Строка.ДатаИзготовления = КР_ДатаИзготовления(Год, КоллекцияМесяц);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции // >> 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028

// << 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
Процедура КР_ЗаполнитьДатуИзготовления(ДатыИзготовления, Номенклатура, Значение)
	
	НайденнаяСтрока = ДатыИзготовления.Найти(Номенклатура, "Номенклатура");
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		Значение = Формат(НайденнаяСтрока.ДатаИзготовления, "ДЛФ=D");
	КонецЕсли;
	
КонецПроцедуры // >> 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028

// << 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
Функция КР_ТоварыДляРасчетаДатыИзготовления(СтруктураНастроек, СтруктураРезультата, ПечатнаяФорма)
	
	ТаблицаРезультат = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураРезультата.Таблица);
	ТаблицаРезультат.Очистить();
	
	Для Каждого СтрокаТовары Из СтруктураРезультата.Таблица Цикл
		
		Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] > 0 
			И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон] = ПечатнаяФорма.Шаблон Тогда
			
			СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(
				СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]);
			
			ЕстьПараметр = СтруктураШаблона.ПараметрыШаблона.Получить("ДатаИзготовления");
			Если Не ЕстьПараметр = Неопределено Тогда
				НоваяСтрока = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТаблицаРезультат;
	
КонецФункции // >> 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028

// << 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
Функция КР_ДатаИзготовления(Год, КоллекцияМесяц)
	
	Если КоллекцияМесяц = "11" Или КоллекцияМесяц = "12" Тогда
		ДатаПоступления = Строка(Строка(Год) + "01" + "01");
	ИначеЕсли КоллекцияМесяц = "13" Или КоллекцияМесяц = "14" Или КоллекцияМесяц = "15"
		Или КоллекцияМесяц = "16" Или КоллекцияМесяц = "17" Или КоллекцияМесяц = "18" Или КоллекцияМесяц = "19" Тогда
		ДатаПоступления = Строка(Строка(Год) + "02" + "01");
	ИначеЕсли КоллекцияМесяц = "21" Или КоллекцияМесяц = "22" Тогда
		ДатаПоступления = Строка(Строка(Год) + "03" + "01");
	ИначеЕсли КоллекцияМесяц = "23" Или КоллекцияМесяц = "24" Тогда
		ДатаПоступления = Строка(Строка(Год) + "04" + "01");
	ИначеЕсли КоллекцияМесяц = "25" Или КоллекцияМесяц = "26" Или КоллекцияМесяц = "27" Или КоллекцияМесяц = "28"
		Или КоллекцияМесяц = "29" Тогда
		ДатаПоступления = Строка(Строка(Год) + "05" + "01");
	ИначеЕсли КоллекцияМесяц = "31" Или КоллекцияМесяц = "32" Тогда
		ДатаПоступления = Строка(Строка(Год) + "07" + "01");
	ИначеЕсли КоллекцияМесяц = "33" Или КоллекцияМесяц = "34" Или КоллекцияМесяц = "35" Или КоллекцияМесяц = "36"
		Или КоллекцияМесяц = "37" Или КоллекцияМесяц = "38" Или КоллекцияМесяц = "39" Тогда
		ДатаПоступления = Строка(Строка(Год) + "08" + "01");
	ИначеЕсли КоллекцияМесяц = "41" Или КоллекцияМесяц = "42" Тогда
		ДатаПоступления = Строка(Строка(Год) + "09" + "01");
	ИначеЕсли КоллекцияМесяц = "43" Или КоллекцияМесяц = "44" Тогда
		ДатаПоступления = Строка(Строка(Год) + "10" + "01");
	ИначеЕсли КоллекцияМесяц = "45" Или КоллекцияМесяц = "46" Или КоллекцияМесяц = "47" Или КоллекцияМесяц = "48"
		Или КоллекцияМесяц = "49" Тогда
		ДатаПоступления = Строка(Строка(Год) + "11" + "01");
	Иначе
		ДатаПоступления = '00010501';
	КонецЕсли;
	
	ДатаИзготовления = ДобавитьМесяц(ДатаПоступления, -4);
	
	Возврат ДатаИзготовления;
	
КонецФункции // >> 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028

// << 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
Процедура КР_УдалитьРисункиИзЦенника(Номенклатура, Рисунки)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "КР_ПечатьEAC, КР_ПечатьРСТ");
	
	Индекс = Рисунки.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		
		Рисунок = Рисунки[Индекс];
		
		Если Не Реквизиты.КР_ПечатьEAC И Рисунок.Имя = "EAC" Тогда
			Рисунки.Удалить(Рисунок);
		КонецЕсли;
		
		Если Не Реквизиты.КР_ПечатьРСТ И Рисунок.Имя = "RST" Тогда
			Рисунки.Удалить(Рисунок);
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры // >> 09.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028

// << 10.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
//
// Параметры:
//  Параметры	 - Структура - Параметры определения цен
//
Процедура КР_ПереопределитьЦены(Параметры) Экспорт
	
	Таблица = Параметры.Таблица;
	
	Если Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Таблица.Колонки, "Цена")
		ИЛИ Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Таблица.Колонки, "Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	
	ВидЦеныДляЦеныНаЦеннике = КР_ДополнительныеНастройкиПовтИсп.Значение("ВидЦеныДляЦеныНаЦеннике");
	БлокирующаяЦена 		= КР_ДополнительныеНастройкиПовтИсп.Значение("БлокирующаяЦена");
	ВидыЦеныПервоначальный 	= КР_ДополнительныеНастройкиПовтИсп.Значение("ВидЦеныПервоначальныйРозничный");
	ЕстьЦенаДополнительно 	= ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Таблица.Колонки,
		"ЦенаДополнительно");
		
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	Если Не ЕстьЦенаДополнительно Тогда
		// Добавим доп. колонки в таблицу, для варианта работы с типовой СКД, в которых их нет
		ЕстьЦенаДополнительно = Истина;
		Таблица.Колонки.Добавить("ЦенаДополнительно",
			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип));
		Таблица.Колонки.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно",
			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КонецЕсли;
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
		
	Запрос = Новый Запрос;
	Запрос.Текст = КР_ТекстЗапросаЦены();
	Запрос.УстановитьПараметр("Таблица", 				Таблица);
	Запрос.УстановитьПараметр("Склад", 					Параметры.Склад);
	Запрос.УстановитьПараметр("Дата", 					Параметры.Дата);
	Запрос.УстановитьПараметр("ВидЦеныНаЦеннике", 		ВидЦеныДляЦеныНаЦеннике);
	Запрос.УстановитьПараметр("БлокирующаяЦена", 		БлокирующаяЦена);
	Запрос.УстановитьПараметр("ВидыЦеныПервоначальный", ВидыЦеныПервоначальный);
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	Запрос.УстановитьПараметр("ГруппаВидовНоменклатурыАксессуаров", Параметры.ГруппаВидовНоменклатурыАксессуаров);
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика", Выборка.Номенклатура, Выборка.Характеристика);
		Строки = Таблица.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из Строки  Цикл    
			
			// << 21.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2571
			Если Выборка.ПерезаполнятьОсновнуюЦену Тогда 
			// >> 21.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2571
				Строка.Цена = Выборка.Цена;    
			// << 21.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2571
			КонецЕсли; 
			// >> 21.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2571

			Если ЕстьЦенаДополнительно Тогда
				Строка.ЦенаДополнительно = Выборка.ЦенаДополнительно;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // >> 10.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028

// << 10.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
Функция КР_ТекстЗапросаЦены()
	
	Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТаблицаПред
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСправочник.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
	|ПОМЕСТИТЬ втТаблица
	|ИЗ
	|	втТаблицаПред КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО Таблица.Номенклатура = НоменклатураСправочник.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО Таблица.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.ВидЦены) КАК ВидЦены
	|ПОМЕСТИТЬ втВидЦеныСкидки
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			&Дата,
	|			Источник = &Склад
	|				И СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦены)
	|				И СкидкаНаценка.ВидЦены.ИспользоватьПриРозничнойПродаже
	|				И Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)) КАК ДействиеСкидокНаценокСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатуры25СрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО КАК Характеристика,
	|	МАКСИМУМ(ЦеныНоменклатуры25СрезПоследних.Цена) КАК Цена
	|ПОМЕСТИТЬ втЦеныОбщие
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
	|			&Дата,
	|			(Номенклатура, ХарактеристикаЦО) В
	|				(ВЫБРАТЬ
	|					втТаблица.Номенклатура КАК Номенклатура,
	|					втТаблица.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования КАК ХарактеристикаЦО
	|				ИЗ
	|					втТаблица КАК втТаблица)) КАК ЦеныНоменклатуры25СрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатуры25СрезПоследних.ВидЦены,
	|	ЦеныНоменклатуры25СрезПоследних.Номенклатура,
	|	ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсторияИзмененияФорматовМагазиновСрезПоследних.ФорматМагазина.РозничныйВидЦены КАК ВидЦены,
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	//|	ИсторияИзмененияФорматовМагазиновСрезПоследних.КР_ТоварнаяГруппа КАК КР_ТоварнаяГруппа
	|	ИсторияИзмененияФорматовМагазиновСрезПоследних.КР_ФорматМагазинаАксессуары.РозничныйВидЦены КАК ВидЦеныАксессуары
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	|ПОМЕСТИТЬ втВидЦеныФорматыОбщий
	|ИЗ
	|	РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних(&Дата, Склад = &Склад) КАК ИсторияИзмененияФорматовМагазиновСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблица.Номенклатура КАК Номенклатура,
	|	втТаблица.Характеристика КАК Характеристика,
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	//|	втВидЦеныФорматыОбщий.ВидЦены КАК ВидЦены
	|	ВЫБОР
	|		КОГДА втТаблица.Номенклатура.ВидНоменклатуры.Родитель = &ГруппаВидовНоменклатурыАксессуаров
	|			ТОГДА втВидЦеныФорматыОбщий.ВидЦеныАксессуары
	|		ИНАЧЕ втВидЦеныФорматыОбщий.ВидЦены
	|	КОНЕЦ КАК ВидЦены
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	|ПОМЕСТИТЬ втВидЦеныФорматыПоГруппе
	|ИЗ
	|	втТаблица КАК втТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВидЦеныФорматыОбщий КАК втВидЦеныФорматыОбщий
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	//|		ПО втТаблица.Номенклатура.ВидНоменклатуры.Родитель = втВидЦеныФорматыОбщий.КР_ТоварнаяГруппа
	|		ПО ИСТИНА
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	//|ВЫБРАТЬ
	//|	МАКСИМУМ(втВидЦеныФорматыОбщий.ВидЦены) КАК ВидЦены
	//|ПОМЕСТИТЬ втВидЦеныФорматыБезГруппы
	//|ИЗ
	//|	втВидЦеныФорматыОбщий КАК втВидЦеныФорматыОбщий
	//|ГДЕ
	//|	втВидЦеныФорматыОбщий.КР_ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	//|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблица.Номенклатура КАК Номенклатура,
	|	втТаблица.Характеристика КАК Характеристика,
	|	втВидЦеныСкидки.ВидЦены КАК ВидЦеныСкидка,
	|	втВидЦеныФорматыПоГруппе.ВидЦены КАК ВидЦеныФорматыПоГруппе
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	//,
	//|	втВидЦеныФорматыБезГруппы.ВидЦены КАК ВидЦеныФорматыОбщий
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	|ПОМЕСТИТЬ втТоварыВидыЦен
	|ИЗ
	|	втТаблица КАК втТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидЦеныСкидки КАК втВидЦеныСкидки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидЦеныФорматыПоГруппе КАК втВидЦеныФорматыПоГруппе
	|		ПО втТаблица.Номенклатура = втВидЦеныФорматыПоГруппе.Номенклатура
	|			И втТаблица.Характеристика = втВидЦеныФорматыПоГруппе.Характеристика
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	//|		ЛЕВОЕ СОЕДИНЕНИЕ втВидЦеныФорматыБезГруппы КАК втВидЦеныФорматыБезГруппы
	//|		ПО (ИСТИНА)
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыВидыЦен.Номенклатура КАК Номенклатура,
	|	втТоварыВидыЦен.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ втТоварыВидыЦен.ВидЦеныСкидка ЕСТЬ NULL
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	|				И ЕСТЬNULL(втЦеныСкидка.Цена, 0) > 0
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	|			ТОГДА ЕСТЬNULL(втЦеныСкидка.Цена, 0)
	|		КОГДА НЕ втТоварыВидыЦен.ВидЦеныФорматыПоГруппе ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(втЦеныФорматыПоГруппе.Цена, 0)
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	//|		КОГДА НЕ втТоварыВидыЦен.ВидЦеныФорматыОбщий ЕСТЬ NULL
	//|			ТОГДА ЕСТЬNULL(втЦеныФорматыОбщий.Цена, 0)
	|		ИНАЧЕ 0
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	|	КОНЕЦ КАК ЦенаОсновная
	|ПОМЕСТИТЬ втЦеныОсновные
	|ИЗ
	|	втТоварыВидыЦен КАК втТоварыВидыЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныОбщие КАК втЦеныСкидка
	|		ПО втТоварыВидыЦен.Номенклатура = втЦеныСкидка.Номенклатура
	|			И втТоварыВидыЦен.ВидЦеныСкидка = втЦеныСкидка.ВидЦены
	|			И втТоварыВидыЦен.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = втЦеныСкидка.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныОбщие КАК втЦеныФорматыПоГруппе
	|		ПО втТоварыВидыЦен.Номенклатура = втЦеныФорматыПоГруппе.Номенклатура
	|			И втТоварыВидыЦен.ВидЦеныФорматыПоГруппе = втЦеныФорматыПоГруппе.ВидЦены
	|			И втТоварыВидыЦен.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = втЦеныФорматыПоГруппе.Характеристика
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	//|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныОбщие КАК втЦеныФорматыОбщий
	//|		ПО втТоварыВидыЦен.Номенклатура = втЦеныФорматыОбщий.Номенклатура
	//|			И втТоварыВидыЦен.ВидЦеныФорматыОбщий = втЦеныФорматыОбщий.ВидЦены
	//|			И втТоварыВидыЦен.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = втЦеныФорматыОбщий.Характеристика
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦеныОбщие.Номенклатура КАК Номенклатура,
	|	втЦеныОбщие.Характеристика КАК Характеристика,
	|	втЦеныОбщие.Цена КАК Цена
	|ПОМЕСТИТЬ втЦеныНаЦеннике
	|ИЗ
	|	втЦеныОбщие КАК втЦеныОбщие
	|ГДЕ
	|	втЦеныОбщие.ВидЦены = &ВидЦеныНаЦеннике
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦеныОбщие.Номенклатура КАК Номенклатура,
	|	втЦеныОбщие.Характеристика КАК Характеристика,
	|	втЦеныОбщие.Цена КАК Цена
	|ПОМЕСТИТЬ втЦеныПервоначальные
	|ИЗ
	|	втЦеныОбщие КАК втЦеныОбщие
	|ГДЕ
	|	втЦеныОбщие.ВидЦены = &ВидыЦеныПервоначальный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦеныОсновные.Номенклатура КАК Номенклатура,
	|	втЦеныОсновные.Характеристика КАК Характеристика,
	|	втЦеныОсновные.ЦенаОсновная КАК Цена,
	// << 21.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2571
	|	&Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК ПерезаполнятьОсновнуюЦену,
	// >> 21.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2571
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втЦеныНаЦеннике.Цена, 0) > 0
	|				И ЕСТЬNULL(втЦеныНаЦеннике.Цена, 0) < &БлокирующаяЦена
	|				И ЕСТЬNULL(втЦеныНаЦеннике.Цена, 0) > ЕСТЬNULL(втЦеныОсновные.ЦенаОсновная, 0)
	|			ТОГДА втЦеныНаЦеннике.Цена
	|		КОГДА ЕСТЬNULL(втЦеныПервоначальные.Цена, 0) > 0
	|				И ЕСТЬNULL(втЦеныПервоначальные.Цена, 0) < &БлокирующаяЦена
	|				И ЕСТЬNULL(втЦеныПервоначальные.Цена, 0) > ЕСТЬNULL(втЦеныОсновные.ЦенаОсновная, 0)
	|			ТОГДА втЦеныПервоначальные.Цена
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаДополнительно
	|ИЗ
	|	втЦеныОсновные КАК втЦеныОсновные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныНаЦеннике КАК втЦеныНаЦеннике
	|		ПО втЦеныОсновные.Номенклатура = втЦеныНаЦеннике.Номенклатура
	|			И втЦеныОсновные.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = втЦеныНаЦеннике.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныПервоначальные КАК втЦеныПервоначальные
	|		ПО втЦеныОсновные.Номенклатура = втЦеныПервоначальные.Номенклатура
	|			И втЦеныОсновные.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = втЦеныПервоначальные.Характеристика";
	
	Возврат Текст;
	
КонецФункции // >> 10.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1028

// << 06.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1028
Функция КР_ПараметрыПереопределенияЦен(СтруктураНастроек, СтруктураРезультата)
	
	ПараметрыЦен 	= Новый Структура;
	Склад 			= Неопределено;
	Дата 			= Неопределено;
	Таблица 		= Неопределено;
	
	Если СтруктураНастроек.Свойство("Склад") Тогда
		Склад = СтруктураНастроек.Склад;
	ИначеЕсли СтруктураНастроек.Свойство("ПараметрыДанных") И СтруктураНастроек.ПараметрыДанных.Свойство("Склад") Тогда
		Склад = СтруктураНастроек.ПараметрыДанных.Склад;		
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ПараметрыДанных") И СтруктураНастроек.ПараметрыДанных.Свойство("Дата") Тогда
		Дата = СтруктураНастроек.ПараметрыДанных.Дата;
	КонецЕсли;
	
	Если СтруктураРезультата.Свойство("Таблица") Тогда
		Таблица = СтруктураРезультата.Таблица;
	КонецЕсли;
	
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	ГруппаВидовНоменклатурыАксессуаров = КР_ДополнительныеНастройкиПовтИсп.Значение("ГруппаВидовНоменклатурыАксессуаров");
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	
	ПараметрыЦен.Вставить("Склад", 		Склад);
	ПараметрыЦен.Вставить("Дата", 		Дата);
	ПараметрыЦен.Вставить("Таблица", 	Таблица);
	// << 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	ПараметрыЦен.Вставить("ГруппаВидовНоменклатурыАксессуаров", ГруппаВидовНоменклатурыАксессуаров);
	// >> 07.04.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1525
	
	Возврат ПараметрыЦен;
	
КонецФункции // >> 06.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1028

// #4100.. Фомин Д.Ю. 24.05.2024.
Функция злПолучитьСтруктуруНастроекШаблонаDataMatrix()
	
	Запрос = Новый Запрос;
	Запрос.Текст  = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	ШаблоныЭтикетокИЦенников.Шаблон КАК Шаблон
	                |ИЗ
	                |	Справочник.ШаблоныЭтикетокИЦенников КАК ШаблоныЭтикетокИЦенников
	                |ГДЕ
	                |	ШаблоныЭтикетокИЦенников.ПометкаУдаления = ЛОЖЬ
	                |	И ШаблоныЭтикетокИЦенников.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаКодМаркировкиИСМП)";
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Шаблон.Получить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

Функция злПолучитьКодыDataMatrix(тзТовары)

	КодыDataMatrix = Новый ТаблицаЗначений;
	КодыDataMatrix.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	КодыDataMatrix.Колонки.Добавить("image", Новый ОписаниеТипов("Строка"));

	Запрос = Новый Запрос;
	
	// #4333.. Фомин Д.Ю. 27.06.2024. В запрос добавлено ограничение по номеру сезона.
	// Запрашиваем DM только для номенклатуры с коллекцией < 431 (номер сезона < 89).
	// #4636.. Фомин Д.Ю. 22.08.2024. Если доп.сведение ПроверятьНаличиеDM = Истина, то запрашиваем DM.
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	тзТовары.Номенклатура КАК Номенклатура,
	//               |	тзТовары.Характеристика КАК Характеристика,
	//               |	ВЫРАЗИТЬ(тзТовары.Штрихкод КАК СТРОКА(200)) КАК Штрихкод,
	//               |	тзТовары.КоличествоЦенниковДляПечати КАК КоличествоЦенниковДляПечати
	//               |ПОМЕСТИТЬ втТовары
	//               |ИЗ
	//               |	&тзТовары КАК тзТовары
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	СпрНоменклатура.Ссылка КАК Номенклатура,
	//               |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	//               |	СпрНоменклатура.КоллекцияНоменклатуры КАК КоллекцияНоменклатуры,
	//               |	ХарактеристикиНоменклатуры.КР_КодТНВЭД КАК КодТНВЭД,
	//               |	ХарактеристикиНоменклатуры.КР_Штрихкод КАК Штрихкод,
	//               |	втТовары.КоличествоЦенниковДляПечати КАК КоличествоЦенниковДляПечати
	//               |ПОМЕСТИТЬ втТоварыПодробно
	//               |ИЗ
	//               |	втТовары КАК втТовары
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	//               |		ПО втТовары.Номенклатура = СпрНоменклатура.Ссылка
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	//               |		ПО втТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	Сезоны.Ссылка КАК Ссылка
	//               |ПОМЕСТИТЬ втСезоны
	//               |ИЗ
	//               |	Справочник.КР_Сезоны КАК Сезоны
	//               |ГДЕ
	//               |	Сезоны.Код < 89
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	Коллекции.Ссылка КАК Ссылка
	//               |ПОМЕСТИТЬ втКоллекции
	//               |ИЗ
	//               |	Справочник.КоллекцииНоменклатуры КАК Коллекции
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСезоны КАК втСезоны
	//               |		ПО Коллекции.КР_Сезон = втСезоны.Ссылка
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	втТоварыПодробно.Штрихкод КАК Штрихкод,
	//               |	СУММА(втТоварыПодробно.КоличествоЦенниковДляПечати) КАК КоличествоЦенниковДляПечати
	//               |ИЗ
	//               |	втТоварыПодробно КАК втТоварыПодробно
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоллекции КАК втКоллекции
	//               |		ПО втТоварыПодробно.КоллекцияНоменклатуры = втКоллекции.Ссылка
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	//               |		ПО втТоварыПодробно.КодТНВЭД = КлассификаторТНВЭД.Ссылка
	//               |ГДЕ
	//			   // #4344.. Фомин Д.Ю. 01.07.2024.
	//               //|	КлассификаторТНВЭД.злМаркировкаДляРозницы
	//			   |	КлассификаторТНВЭД.КР_Маркируется
	//			   // ..#4344				   
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	втТоварыПодробно.Штрихкод";
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	тзТовары.Номенклатура КАК Номенклатура,
	               |	тзТовары.Характеристика КАК Характеристика,
	               |	ВЫРАЗИТЬ(тзТовары.Штрихкод КАК СТРОКА(200)) КАК Штрихкод,
	               |	тзТовары.КоличествоЦенниковДляПечати КАК КоличествоЦенниковДляПечати
	               |ПОМЕСТИТЬ втТовары
	               |ИЗ
	               |	&тзТовары КАК тзТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СпрНоменклатура.Ссылка КАК Номенклатура,
	               |	СпрНоменклатура.КоллекцияНоменклатуры КАК КоллекцияНоменклатуры,
	               |	ХарактеристикиНоменклатуры.КР_КодТНВЭД КАК КодТНВЭД,
	               |	ХарактеристикиНоменклатуры.КР_Штрихкод КАК Штрихкод,
	               |	втТовары.КоличествоЦенниковДляПечати КАК КоличествоЦенниковДляПечати
	               |ПОМЕСТИТЬ втТоварыПодробно
	               |ИЗ
	               |	втТовары КАК втТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО втТовары.Номенклатура = СпрНоменклатура.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ПО втТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Сезоны.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ втСезоны
	               |ИЗ
	               |	Справочник.КР_Сезоны КАК Сезоны
	               |ГДЕ
	               |	Сезоны.Код < 89
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Коллекции.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ втКоллекции
	               |ИЗ
	               |	Справочник.КоллекцииНоменклатуры КАК Коллекции
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСезоны КАК втСезоны
	               |		ПО Коллекции.КР_Сезон = втСезоны.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТоварыПодробно.Штрихкод КАК Штрихкод,
	               |	втТоварыПодробно.КодТНВЭД КАК КодТНВЭД,
	               |	втТоварыПодробно.КоличествоЦенниковДляПечати КАК КоличествоЦенниковДляПечати
	               |ПОМЕСТИТЬ втНоменклатураДляПолученияDM
	               |ИЗ
	               |	втТоварыПодробно КАК втТоварыПодробно
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоллекции КАК втКоллекции
	               |		ПО втТоварыПодробно.КоллекцияНоменклатуры = втКоллекции.Ссылка
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	втТоварыПодробно.Штрихкод,
	               |	втТоварыПодробно.КодТНВЭД,
	               |	втТоварыПодробно.КоличествоЦенниковДляПечати
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |		ПО ДополнительныеСведения.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТоварыПодробно КАК втТоварыПодробно
	               |		ПО ДополнительныеСведения.Объект = втТоварыПодробно.Номенклатура
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.Наименование = ""Проверять наличие DM""
	               |	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
	               |	И ДополнительныеСведения.Значение = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втНоменклатураДляПолученияDM.Штрихкод КАК Штрихкод,
	               |	СУММА(втНоменклатураДляПолученияDM.КоличествоЦенниковДляПечати) КАК КоличествоЦенниковДляПечати
	               |ИЗ
	               |	втНоменклатураДляПолученияDM КАК втНоменклатураДляПолученияDM
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	               |		ПО втНоменклатураДляПолученияDM.КодТНВЭД = КлассификаторТНВЭД.Ссылка
	               |ГДЕ
	               |	КлассификаторТНВЭД.КР_Маркируется
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втНоменклатураДляПолученияDM.Штрихкод";
	// ..#4636
	
	Запрос.УстановитьПараметр("тзТовары", тзТовары);				   
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Количество() = 0 Тогда
		Возврат КодыDataMatrix;
	КонецЕсли;	
	
	СписокШтрихкодов = "";
	
	Пока Результат.Следующий() Цикл
		СписокШтрихкодов = СписокШтрихкодов + СокрЛП(Результат.Штрихкод) + "," + Формат(Результат.КоличествоЦенниковДляПечати, "ЧГ=0") + ";";
	КонецЦикла;
	
	Если КР_ДополнительныеНастройкиПовтИсп.БазаЯвляетсяЦентральной() Тогда
		ОсновноеПодразделение = Справочники.СтруктураПредприятия.НайтиПоКоду("GE001");	// Склад	
	Иначе
		
		МассивСкладов = КР_ДополнительныеНастройкиПовтИсп.МассивЗначений("СкладыТекущейБазыДанных");
		
		Если ЗначениеЗаполнено(МассивСкладов) 
			И МассивСкладов.Количество() > 0 Тогда 
			ОсновноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивСкладов[0], "Подразделение");		
		Иначе
			Возврат КодыDataMatrix;
		КонецЕсли;	
			
	КонецЕсли;
	
	ИдентификаторМагазина = ОсновноеПодразделение.УникальныйИдентификатор();
	СписокШтрихкодов = СписокШтрихкодов + "&store=" + ИдентификаторМагазина;
	СписокШтрихкодов = СтрЗаменить(СписокШтрихкодов, ";&", "&");
	
	РезультатЗапроса = Неопределено;
	
	Если КР_ИнтеграцияСВнешнимиСистемами.PLM_ПакетноеПолучениеКодовDataMatrix(РезультатЗапроса, СписокШтрихкодов) Тогда
	
		Для Каждого ТекРезультат Из РезультатЗапроса Цикл
			
			Если ТипЗнч(ТекРезультат) = Тип("Соответствие") Тогда	
				НоваяСтрока = КодыDataMatrix.Добавить();
				НоваяСтрока.Штрихкод = ТекРезультат.Получить("data_barcode");
				НоваяСтрока.image = ТекРезультат.Получить("image");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат КодыDataMatrix;	
	
КонецФункции
// ..#4100

#КонецОбласти

#КонецЕсли
