// 26.05.2023 Марченко С.Н., КРОК, JIRA№A2105505-991

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	МаксимальноеКоличествоПроцессов = 10;    
	
	ПараметрыЗапуска = ПараметрыСеанса.ПараметрыКлиентаНаСервере["ПараметрЗапуска"];
	// Получим путь к каталогу загрузки из параметров запуска 
	// Формат параметра: КР_РежимЗагрузкиДанных[:"ПутьККаталогу"]  
	ИмяПараметраРежимЗагрузкиДанных = "КР_РежимЗагрузкиДанных";
	ПозицияПараметраРежимЗагрузкиДанных = СтрНайти(ПараметрыЗапуска, ИмяПараметраРежимЗагрузкиДанных);
	Если ПозицияПараметраРежимЗагрузкиДанных Тогда 
		ПозицияНачалаЗначенияПараметра = ПозицияПараметраРежимЗагрузкиДанных + СтрДлина(ИмяПараметраРежимЗагрузкиДанных);
		Если Сред(ПараметрыЗапуска, ПозицияНачалаЗначенияПараметра, 1) = ":" Тогда  

			ОкончаниеЗначенияПараметра = СтрНайти(ПараметрыЗапуска, """", , ПозицияНачалаЗначенияПараметра, 2);
			
			// "ПутьККаталогу"
			ПутьККаталогу = Сред(ПараметрыЗапуска, ПозицияНачалаЗначенияПараметра + 2, ОкончаниеЗначенияПараметра - ПозицияНачалаЗначенияПараметра - 2);			
						
		КонецЕсли;	
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// Если путь к каталогу заполнен то запускаем циклично загрузку файлов
	//	пока не появится флаг завершения выгрузки файлов    
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда 
		РежимОбработки = "АвтоматическаяЗагрузкаДанных"; 
		
		ПрочитатьПеременныеBatФайла();
		
		//ПроверитьСоздатьАдминистратора(ПеременныеBatФайла.userName, ПеременныеBatФайла.userPwd);
		
		ЗапуститьАвтоматическуюОбработку();   
	Иначе 
		РежимОбработки = "Ручной"
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьАвтоматическуюОбработку()
	
	Если РежимОбработки = "АвтоматическаяЗагрузкаДанных" Тогда 
		
		// Запускаем загрузку данных 
		// Если файлы для загрузки есть то продолжаем
		Если ЗагрузитьИсходныеДанные() Тогда 
			Возврат;
		Иначе	
			//	Если есть флаг окончания выгрузки то переходим к следующему режиму   
			ПутьКФайлуendUnload = ПутьККаталогу + "\endUnload.flg";
			Файл = Новый Файл(ПутьКФайлуendUnload);  
			Если Файл.Существует() Тогда   
								
				РежимОбработки = "АвтоматическаяОбработкаДанных";   
				
			КонецЕсли;	
			
		КонецЕсли;					
		
	КонецЕсли;	    
	
	Если РежимОбработки = "АвтоматическаяОбработкаДанных" Тогда 
		
		// Запускаем обработку данных 
		Если ОбработатьЗаписи() Тогда 
			Возврат;
		Иначе	

			РежимОбработки = Неопределено;
			
			СтрокиЛога = ПолучитьОшибкиПоНеобработаннымДанным(); 
			Если ЗначениеЗаполнено(СтрокиЛога) Тогда         
				
				ПутьКаталогуГотовойИБ = ПеременныеBatФайла.dumpFolder;	 
				ПутьКФайлуЛога = ПутьКаталогуГотовойИБ + "\uploadError.log";
				ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлуЛога, КодировкаТекста.ANSI);   
				ЗаписьТекста.Записать(СтрСоединить(СтрокиЛога, Символы.ПС));
				ЗаписьТекста.Закрыть();
				
			КонецЕсли;	
			
			ВключитьОбменПоRabbitMQ();
			
			ЗавершитьРаботуСистемы(Ложь);
			
		КонецЕсли;					
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Функция ОбработатьЗаписи(Команда = Неопределено)

	Элементы.ГруппаПрогрессВыполнения.Заголовок = НСтр("ru = 'Обработка данных'");
	Элементы.ГруппаЗагрузкаДанных.Видимость = Ложь;
	Элементы.ГруппаОбработкаДанных.Видимость = Ложь;
	
	КоличествоЗапущенныхПроцессов_ОбработкаДанных = 0;
	АктивныеФоновыеЗаданияОбработкиДанных.Очистить();
	ШаблонЗаголовокПроцесса = НСтр("ru = 'Обработка ""%1""'"); 

	ТипыДанныхДляОбработкиДанных = ПолучитьТипыДанныхДляОбработки();
	СчетчикТиповДанных = 0; 
	Для Каждого ТипДанных Из ТипыДанныхДляОбработкиДанных Цикл 
		
		СчетчикТиповДанных = СчетчикТиповДанных + 1; 
		ИмяРеквизитаПрогрессВыполнения = СтрШаблон("ПВ_%1", XMLСтрока(СчетчикТиповДанных));
		ЗаголовокПроцесса = СтрШаблон(ШаблонЗаголовокПроцесса, ТипДанных);
		
		НоваяСтрока = АктивныеФоновыеЗаданияОбработкиДанных.Добавить();	
		НоваяСтрока.ИмяРеквизитаПрогрессВыполнения = ИмяРеквизитаПрогрессВыполнения;
		НоваяСтрока.ЗаголовокПроцесса = ЗаголовокПроцесса;
		НоваяСтрока.ТипДанных = ТипДанных;
						
	КонецЦикла;
	
	Если СчетчикТиповДанных Тогда
	
		ОбработатьОчередьФоновыхЗаданий_ОбработкаДанных();
		ПодключитьОбработчикОжидания("ВыполнитьУдалениеЗавершенныхПроцессов_ОбработкаДанных", 1, Истина);  
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции        

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьККаталогуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметрыВыбораФайла = Новый Структура;
	ДополнительныеПараметрыВыбораФайла.Вставить("ИмяРеквизитаПриемник", "ПутьККаталогу");
	Оповещение = Новый ОписаниеОповещения("ВыбораФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметрыВыбораФайла);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещение, ДиалогВыбораФайла);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВключитьОбменПоRabbitMQ()

	Константы.КР_ИспользуетсяИнтеграцияRabbitMQ.Установить(Истина);

КонецПроцедуры
			
&НаКлиенте
Процедура ВыбораФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;	
	
	ИндексПервогоЭлемента = 0;
	ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизитаПриемник] = Результат[ИндексПервогоЭлемента];
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПеременныеBatФайла()
	
	ИмяBatФайла = ПутьККаталогу + "/run.bat";
	Файл = Новый Файл(ИмяBatФайла);
	Если Не Файл.Существует() Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяBatФайла, КодировкаТекста.ANSI);
	
	ПеременныеФайла = Новый Структура;
	
	СтрокаФайла = ЧтениеТекста.ПрочитатьСтроку();
	Пока СтрокаФайла <> Неопределено Цикл 
		
		Если СтрНачинаетсяС(СтрокаФайла, "set ") Тогда 
			
			СтрокаФайла	= Сред(СтрокаФайла, 5);
			ЧастиСтроки = СтрРазделить(СтрокаФайла, "=");
			
			ИмяПеременной = ЧастиСтроки[0];  
			
			ЗначениеПеременной = ЧастиСтроки[1];                      
			
			Если СтрНачинаетсяС(ЗначениеПеременной, """") Тогда 
				ЗначениеПеременной = Сред(ЗначениеПеременной, 2, СтрДлина(ЗначениеПеременной) - 2);
			КонецЕсли;	
			
			ПеременныеФайла.Вставить(ИмяПеременной, ЗначениеПеременной);
			
		КонецЕсли;	
		
		СтрокаФайла = ЧтениеТекста.ПрочитатьСтроку(); 
		
	КонецЦикла;
	
	ПеременныеBatФайла = Новый ФиксированнаяСтруктура(ПеременныеФайла);
	
КонецПроцедуры

//&НаСервере
//Процедура ПроверитьСоздатьАдминистратора(ИмяПользователяАдминистратор, ПарольАдминистратора)
//	
//	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяАдминистратор); 
//	Если ПользовательИБ <> Неопределено Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
//	ПользовательИБ.Имя = ИмяПользователяАдминистратор;
//	ПользовательИБ.ПолноеИмя = ПользовательИБ.Имя;    
//	ПользовательИБ.Пароль = ПарольАдминистратора;    
//	ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
//	ПользовательИБ.Роли.Очистить();
//	ПользовательИБ.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
//	ПользовательИБ.Записать();
//		
//КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыделенныеЗаписи(Команда)
	
	ЭлементСписок = Элементы.Список;
	
	НаборХэшИдетрификаторовОбъекта = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ЭлементСписок.ВыделенныеСтроки Цикл  
		ДанныеСтроки = ЭлементСписок.ДанныеСтроки(ИдентификаторСтроки);
		НаборХэшИдетрификаторовОбъекта.Добавить(ДанныеСтроки.ХэшИдетрификаторОбъекта);	
	КонецЦикла;
	ОбработатьЗаписиНаСервере(НаборХэшИдетрификаторовОбъекта);  
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписиНаСервере(НаборХэшИдетрификаторовОбъекта)
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("НаборХэшИдетрификаторовОбъекта", НаборХэшИдетрификаторовОбъекта);
	ПараметрыМетода.Вставить("НаименованиеФоновогоЗадания", "");
	Обработки.КР_МенеджерЗагрузкиДанных.ОбработатьДанные(ПараметрыМетода);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьИсходныеДанные(Команда = Неопределено)
	
	Если Не СтрНачинаетсяС(ПутьККаталогу, "\\") Тогда 
		ШаблонЗаголовокПроцесса = НСтр("ru = 'Запущен процесс передачи файла ""%1"" на сервер'");    
	Иначе	
		ШаблонЗаголовокПроцесса = НСтр("ru = 'Запущен процесс обработки файла ""%1"" на сетевом ресурсе'");
	КонецЕсли;
	
	Элементы.ГруппаПрогрессВыполнения.Заголовок = НСтр("ru = 'Загрузка данных'");
	Элементы.ГруппаОбработкаДанных.Видимость = Ложь;
	Элементы.ГруппаЗагрузкаДанных.Видимость = Ложь;
	
	КоличествоЗапущенныхПроцессов_ЗагрузкаДанных = 0;
	АктивныеФоновыеЗаданияЗагрузки.Очистить();
	СчетчикФайлов = 0;   
	Файлы = НайтиФайлы(ПутьККаталогу, "*.zip", Истина);    
	Для Каждого Файл Из Файлы Цикл 
		
		СчетчикФайлов = СчетчикФайлов + 1; 
		ИмяРеквизитаПрогрессВыполнения = СтрШаблон("ПВ_%1", XMLСтрока(СчетчикФайлов));
		ЗаголовокПроцесса = СтрШаблон(ШаблонЗаголовокПроцесса, Файл.ПолноеИмя);
		
		НоваяСтрока = АктивныеФоновыеЗаданияЗагрузки.Добавить();	
		НоваяСтрока.ИмяРеквизитаПрогрессВыполнения = ИмяРеквизитаПрогрессВыполнения;
		НоваяСтрока.ЗаголовокПроцесса = ЗаголовокПроцесса;
		НоваяСтрока.ФайлПолноеИмя = Файл.ПолноеИмя;
				
	КонецЦикла;
	
	Если СчетчикФайлов Тогда
		
		ОбработатьОчередьФоновыхЗаданий_ЗагрузкаДанных();
		ПодключитьОбработчикОжидания("ВыполнитьУдалениеЗавершенныхПроцессов_ЗагрузкаДанных", 1, Истина);  
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

&НаКлиенте
Процедура ПомещениеФайлаНаСерверЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаДанных = АктивныеФоновыеЗаданияЗагрузки.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтрокиПроцесса);
	
	ИмяРеквизитаПрогрессВыполнения = СтрокаДанных.ИмяРеквизитаПрогрессВыполнения;
	Если Результат.ПомещениеФайлаОтменено Тогда
		КоличествоЗапущенныхПроцессов_ЗагрузкаДанных = КоличествоЗапущенныхПроцессов_ЗагрузкаДанных + 1;
		СтрокаДанных.Завершено = Истина;   
		УдалитьИзВременногоХранилища(СтрокаДанных.Адрес);		
		Возврат;
	КонецЕсли;	
	
	СтрокаДанных.НачатаЗагрузкаФайла = Ложь;
	
	СтрокаДанных.Адрес = Результат.Адрес;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипыДанныхДляОбработки(КоличествоПопытокОбработки = 10)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ТипДанных КАК ТипДанных
	|ИЗ
	|	РегистрСведений.КР_ДанныеОтложенногоЗаполнения КАК Т
	|ГДЕ
	|	Т.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.КР_СостоянияОбработкиОтложенногоВыполнения.КЗаписиВБазуДанных),
	|		ЗНАЧЕНИЕ(Перечисление.КР_СостоянияОбработкиОтложенногоВыполнения.КОбработке),
	|		ЗНАЧЕНИЕ(Перечисление.КР_СостоянияОбработкиОтложенногоВыполнения.ОшибкаОбработки)
	|	)
	|	И Т.КоличествоПопытокОбработки <= &КоличествоПопытокОбработки";                    
	
	Запрос = Новый Запрос(ТекстЗапроса);        
	Запрос.УстановитьПараметр("КоличествоПопытокОбработки", КоличествоПопытокОбработки);
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

&НаСервере
Функция ПолучитьВыборкуДанныхДляОбработки(КоличествоПопытокОбработки = 10)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.ХэшИдетрификаторОбъекта КАК ХэшИдетрификаторОбъекта,
	|	Т.ТипДанных КАК ТипДанных
	|ИЗ
	|	РегистрСведений.КР_ДанныеОтложенногоЗаполнения КАК Т
	|ГДЕ
	|	Т.Состояние <> ЗНАЧЕНИЕ(Перечисление.КР_СостоянияОбработкиОтложенногоВыполнения.КЗаписиВБазуДанных)
	|ИТОГИ ПО
	|	ТипДанных"; 
	
	Запрос = Новый Запрос(ТекстЗапроса);        
	Запрос.УстановитьПараметр("КоличествоПопытокОбработки", КоличествоПопытокОбработки);
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

&НаСервере
Функция ПолучитьОшибкиПоНеобработаннымДанным()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(Т.СообщенияПользователю КАК СТРОКА(1000)) КАК СообщенияПользователю,
	|	Т.ТипДанных КАК ТипДанных,
	|	Т.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.КР_ДанныеОтложенногоЗаполнения КАК Т
	|ГДЕ
	|	Т.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.КР_СостоянияОбработкиОтложенногоВыполнения.КЗаписиВБазуДанных), 
	|		ЗНАЧЕНИЕ(Перечисление.КР_СостоянияОбработкиОтложенногоВыполнения.ОшибкаОбработки)
	|	)");	

	СтрокиЛога = Новый Массив;
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат СтрокиЛога;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();  
	ТекстСообщения = НСтр("ru = 'Всего уникальных проблем загрузки %1'"); 
	ТекстСообщения = СтрШаблон(ТекстСообщения, ВыборкаДетальныеЗаписи.Количество());	
	СтрокиЛога.Добавить(ТекстСообщения);  

	ШаблонДетализацииПроблемы = НСтр("ru = '%1	%2	%3'");     
	ТекстСообщения = СтрШаблон(ШаблонДетализацииПроблемы, 
		"Тип данных", "Состояние записи", "Сообщения пользователю");
	СтрокиЛога.Добавить(ТекстСообщения);  
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		ТекстСообщения = СтрШаблон(ШаблонДетализацииПроблемы, 
			ВыборкаДетальныеЗаписи.ТипДанных, 
			ВыборкаДетальныеЗаписи.Состояние, 
			СтрЗаменить(ВыборкаДетальныеЗаписи.СообщенияПользователю, Символы.ПС, " ")
		);
		
		СтрокиЛога.Добавить(ТекстСообщения);  
		
	КонецЦикла;
	
	Возврат СтрокиЛога;
		
КонецФункции

#Область ФоновыеЗадания

&НаСервере
Функция ВыполнитьФоновоеЗадание_ЗагрузкаДанных(АдресХранилищаДанные, НаименованиеФоновогоЗадания)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;

	// Если адрес хранилища содержит путь к сетевой папке тогда читаем непосредственно с диска
	Если СтрНачинаетсяС(АдресХранилищаДанные, "\\") Тогда  
		Попытка
	    	ДвоичныеДанные = Новый ДвоичныеДанные(АдресХранилищаДанные);   
		Исключение   
			Возврат Неопределено;
		КонецПопытки;	
	Иначе 	
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилищаДанные); 
	КонецЕсли;	
	
	// Двоичные данные - это Zip архив
	// Распакуем его и зачитаем распакованные данные  
	КаталогВременныхФайлов = КаталогВременныхФайловОбработки();
	ЧтениеZip = Новый ЧтениеZipФайла(ДвоичныеДанные.ОткрытьПотокДляЧтения()); 
	ПервыйЭлемент = ЧтениеZip.Элементы[0];
	ПутьКФайлу = КаталогВременныхФайлов + ПервыйЭлемент.Имя;
	ЧтениеZip.Извлечь(ПервыйЭлемент, КаталогВременныхФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать); 
	ЧтениеZip.Закрыть();  
	ПараметрыМетода = Новый Структура;
	//ПараметрыМетода.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ПутьКФайлу));
	ПараметрыМетода.Вставить("ПутьКФайлу", ПутьКФайлу);
	ПараметрыМетода.Вставить("НаименованиеФоновогоЗадания", НаименованиеФоновогоЗадания); 
	ПараметрыМетода.Вставить("ПерезаписыватьЗапись", Не Найти(НаименованиеФоновогоЗадания, "Связанные ссылки"));
	//УдалитьФайлы(ПутьКФайлу);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.КР_МенеджерЗагрузкиДанных.ЗагрузитьИсходныеДанныеНаСервере",
		ПараметрыМетода, ПараметрыВыполнения);
    
КонецФункции

&НаСервере
Функция ВыполнитьФоновоеЗадание_ОбработкаДанных(ТипДанных, НаименованиеФоновогоЗадания)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;

	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ТипДанных", ТипДанных);
	ПараметрыМетода.Вставить("НаименованиеФоновогоЗадания", НаименованиеФоновогоЗадания);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.КР_МенеджерЗагрузкиДанных.ОбработатьДанные",
		ПараметрыМетода, ПараметрыВыполнения);
    
КонецФункции

&НаСервере
Процедура СформироватьОтображениеПрогрессаВыполнения(ИмяРеквизитаПрогрессВыполнения, ЗаголовокПроцесса)
			
	РеквизитФормы = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(ЭтотОбъект,
		ИмяРеквизитаПрогрессВыполнения, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0)));
		
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(ЭтотОбъект,
		РеквизитФормы, Элементы.ГруппаПрогрессВыполнения);   
		
	РасширеннаяПодсказка = Элементы[ИмяРеквизитаПрогрессВыполнения + "РасширеннаяПодсказка"];
	РасширеннаяПодсказка.Заголовок = ЗаголовокПроцесса;	
	РасширеннаяПодсказка.АвтомаксимальнаяШирина = Ложь;
	
	ЭлементФормы.Вид = ВидПоляФормы.ПолеИндикатора;	
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементФормы.МинимальноеЗначение = 0;
	ЭлементФормы.МаксимальноеЗначение = 100; 
	ЭлементФормы.ОтображатьПроценты = Истина;
	ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСверху;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУдалениеЗавершенныхПроцессов_ЗагрузкаДанных()  
	
	Если УдалитьОтображениеЗавершенныхПроцессов_ЗагрузкаДанных() Тогда 
		ПодключитьОбработчикОжидания("ВыполнитьУдалениеЗавершенныхПроцессов_ЗагрузкаДанных", 1, Истина); 
	Иначе
		Элементы.ГруппаОбработкаДанных.Видимость = Истина;
		Элементы.ГруппаЗагрузкаДанных.Видимость = Истина;   

		Если РежимОбработки <> "Ручной" Тогда 
			РежимОбработки = "АвтоматическаяЗагрузкаДанных";
			ЗапуститьАвтоматическуюОбработку();	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУдалениеЗавершенныхПроцессов_ОбработкаДанных()  
	
	Если УдалитьОтображениеЗавершенныхПроцессов_ОбработкаДанных() Тогда 
		ПодключитьОбработчикОжидания("ВыполнитьУдалениеЗавершенныхПроцессов_ОбработкаДанных", 1, Истина); 
	Иначе

		Если РежимОбработки <> "Ручной" Тогда 
			РежимОбработки = "АвтоматическаяОбработкаДанных";
			ЗапуститьАвтоматическуюОбработку();	
		КонецЕсли;   
		
		Элементы.ГруппаЗагрузкаДанных.Видимость = Истина;
		Элементы.ГруппаОбработкаДанных.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьОтображениеЗавершенныхПроцессов_ЗагрузкаДанных()

	ЕстьНезавершенные = Ложь;          
	МассивРеквизитовКУдалению = Новый Массив;
	Для Каждого СтрокаДанных Из АктивныеФоновыеЗаданияЗагрузки Цикл 
		
		Если Не СтрокаДанных.Завершено Тогда 
			ЕстьНезавершенные = Истина;          
			Продолжить;
		КонецЕсли;                 
		
		ИмяРеквизитаПрогрессВыполнения = СтрокаДанных.ИмяРеквизитаПрогрессВыполнения;
		ЭлементФормы = Элементы.Найти(ИмяРеквизитаПрогрессВыполнения);
		Если ЭлементФормы = Неопределено Тогда 
			Продолжить;
		КонецЕсли;		
	
		Элементы.Удалить(ЭлементФормы);    
		МассивРеквизитовКУдалению.Добавить(ИмяРеквизитаПрогрессВыполнения);	
				
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивРеквизитовКУдалению) Тогда 
		ИзменитьРеквизиты( , МассивРеквизитовКУдалению);
	КонецЕсли;
	
	Возврат ЕстьНезавершенные;
	
КонецФункции

&НаСервере
Функция УдалитьОтображениеЗавершенныхПроцессов_ОбработкаДанных()

	ЕстьНезавершенные = Ложь;          
	МассивРеквизитовКУдалению = Новый Массив;
	Для Каждого СтрокаДанных Из АктивныеФоновыеЗаданияОбработкиДанных Цикл 
		
		Если Не СтрокаДанных.Завершено Тогда 
			ЕстьНезавершенные = Истина;          
			Продолжить;
		КонецЕсли;                 
		
		ИмяРеквизитаПрогрессВыполнения = СтрокаДанных.ИмяРеквизитаПрогрессВыполнения;
		ЭлементФормы = Элементы.Найти(ИмяРеквизитаПрогрессВыполнения);
		Если ЭлементФормы = Неопределено Тогда 
			Продолжить;
		КонецЕсли;		
	
		Элементы.Удалить(ЭлементФормы);    
		МассивРеквизитовКУдалению.Добавить(ИмяРеквизитаПрогрессВыполнения);	
				
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивРеквизитовКУдалению) Тогда 
		ИзменитьРеквизиты( , МассивРеквизитовКУдалению);
	КонецЕсли;
	
	Возврат ЕстьНезавершенные;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОчередьФоновыхЗаданий_ЗагрузкаДанных()
	
	ЕстьНезавершенные = Ложь;          
	Для Каждого СтрокаДанных Из АктивныеФоновыеЗаданияЗагрузки Цикл 
		
		Если СтрокаДанных.Завершено Тогда 
			Продолжить;
		КонецЕсли;                 
		
		// запускаем процесс загрузки файла на сервер
		Если Не СтрокаДанных.НачатаЗагрузкаФайла Тогда 
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Адрес)	
				И КоличествоЗапущенныхПроцессов_ЗагрузкаДанных < МаксимальноеКоличествоПроцессов Тогда    
					
				КоличествоЗапущенныхПроцессов_ЗагрузкаДанных = КоличествоЗапущенныхПроцессов_ЗагрузкаДанных + 1;
				
				// Если файл находится "на сетевом ресурсе" то эмулируем его передачу на сервер
				Если СтрНачинаетсяС(СтрокаДанных.ФайлПолноеИмя, "\\") Тогда 
					//СтрокаДанных.НачатаЗагрузкаФайла = Ложь;
					СтрокаДанных.Адрес = СтрокаДанных.ФайлПолноеИмя;	
				Иначе
				
					СтрокаДанных.НачатаЗагрузкаФайла = Истина;
				    ДополнительныеПараметры = Новый Структура;
				    ДополнительныеПараметры.Вставить("ИдентификаторСтрокиПроцесса", СтрокаДанных.ПолучитьИдентификатор());
					ОписаниеОповещения = Новый ОписаниеОповещения("ПомещениеФайлаНаСерверЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					
					НачатьПомещениеФайлаНаСервер(ОписаниеОповещения, , , , СтрокаДанных.ФайлПолноеИмя, УникальныйИдентификатор);
					
				КонецЕсли;
						
				СформироватьОтображениеПрогрессаВыполнения(
					СтрокаДанных.ИмяРеквизитаПрогрессВыполнения, СтрокаДанных.ЗаголовокПроцесса);  
				
				ЕстьНезавершенные = Истина;          
				
				Прервать;
			КонецЕсли;

		КонецЕсли;
		
		ИдентификаторСтроки = СтрокаДанных.ПолучитьИдентификатор();
		ИмяРеквизитаПрогрессВыполнения = СтрокаДанных.ИмяРеквизитаПрогрессВыполнения;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ИдентификаторЗадания) 
			И ЗначениеЗаполнено(СтрокаДанных.Адрес) Тогда 
						
			ШаблонНаименованияФоновогоЗадания = НСтр("ru = 'Загрузка исходых данных с файла %1'");

			НаименованиеФоновогоЗадания = СтрШаблон(ШаблонНаименованияФоновогоЗадания, СтрокаДанных.ФайлПолноеИмя);
			СтруктураФоновогоЗадания = ВыполнитьФоновоеЗадание_ЗагрузкаДанных(СтрокаДанных.Адрес, НаименованиеФоновогоЗадания);  
			Если СтруктураФоновогоЗадания = Неопределено Тогда 
				
				// Аварийная ситуация с файлом
				СтрокаДанных.Завершено = Истина;
				Продолжить;
				
			КонецЕсли;	
			СтрокаДанных.ИдентификаторЗадания = СтруктураФоновогоЗадания.ИдентификаторЗадания;  

			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма); 
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ДополнительныеПараметры = Новый Структура;
            ДополнительныеПараметры.Вставить("ФайлПолноеИмя", СтрокаДанных.ФайлПолноеИмя);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания,
				Новый ОписаниеОповещения("ДлительнаяОперацияЗавершение", ЭтаФорма, ДополнительныеПараметры), ПараметрыОжидания);			
			
			ЕстьНезавершенные = Истина;          
			Продолжить;
			
		КонецЕсли;      
		
 		ИдентификаторЗадания = СтрокаДанных.ИдентификаторЗадания;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда 
			Продолжить;
		КонецЕсли;
		
		// 
		ПроцессВыгрузки = ПолучитьСостояниеПроцесса(ИдентификаторЗадания);     
		Если ПроцессВыгрузки.Состояние = "Активно" Тогда   
			
			ЕстьНезавершенные = Истина;          
			
			Прогресс = ПроцессВыгрузки.Прогресс;  
			Если Прогресс <> Неопределено Тогда   
				Элементы[ИмяРеквизитаПрогрессВыполнения + "РасширеннаяПодсказка"].Заголовок = Прогресс.Текст;
				ЭтотОбъект[ИмяРеквизитаПрогрессВыполнения] = Прогресс.Процент;     
			КонецЕсли;
						
		ИначеЕсли ПроцессВыгрузки.Состояние = "Завершено" Тогда     
			
			СтрокаДанных.Завершено = Истина;   
			Если ЭтоАдресВременногоХранилища(СтрокаДанных.Адрес) Тогда 
				УдалитьИзВременногоХранилища(СтрокаДанных.Адрес);   
			КонецЕсли;	
			КоличествоЗапущенныхПроцессов_ЗагрузкаДанных = КоличествоЗапущенныхПроцессов_ЗагрузкаДанных - 1;
		
		Иначе 
			
	        ИнформацияОбОшибке = ПроцессВыгрузки.ИнформацияОбОшибке; 
			Если ТипЗнч(ИнформацияОбОшибке) <> Тип("Строка") Тогда 
				
		        ТекстОшибки = НСтр("ru = 'Ошибка выполнения процесса
			       |Описание=""%1""
			       |ИмяМодуля=""%2""
			       |НомерСтроки=%3
			       |ИсходнаяСтрока=""%4""'");  
				
				ТекстОшибки = СтрШаблон(ТекстОшибки, 
					ИнформацияОбОшибке.Описание, ИнформацияОбОшибке.ИмяМодуля, 
					ИнформацияОбОшибке.НомерСтроки, ИнформацияОбОшибке.ИсходнаяСтрока); 
			Иначе
				ТекстОшибки = ИнформацияОбОшибке;		
			КонецЕсли;		                     
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	   
			
			СтрокаДанных.Завершено = Истина;
			Если ЭтоАдресВременногоХранилища(СтрокаДанных.Адрес) Тогда 
				УдалитьИзВременногоХранилища(СтрокаДанных.Адрес);   
			КонецЕсли;	
			КоличествоЗапущенныхПроцессов_ЗагрузкаДанных = КоличествоЗапущенныхПроцессов_ЗагрузкаДанных - 1;
		
		КонецЕсли;	
		
	КонецЦикла;
		
	Если ЕстьНезавершенные Тогда 
		ПодключитьОбработчикОжидания("ОбработатьОчередьФоновыхЗаданий_ЗагрузкаДанных", 1, Истина);  
	КонецЕсли;
			
КонецПроцедуры    

&НаКлиенте
Процедура ОбработатьОчередьФоновыхЗаданий_ОбработкаДанных()
	
	ЕстьНезавершенные = Ложь;          
	Для Каждого СтрокаДанных Из АктивныеФоновыеЗаданияОбработкиДанных Цикл 
		
		Если СтрокаДанных.Завершено Тогда 
			Продолжить;
		КонецЕсли;                 
		
		ИдентификаторСтроки = СтрокаДанных.ПолучитьИдентификатор();
		ИмяРеквизитаПрогрессВыполнения = СтрокаДанных.ИмяРеквизитаПрогрессВыполнения;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ИдентификаторЗадания)	
			И КоличествоЗапущенныхПроцессов_ОбработкаДанных < МаксимальноеКоличествоПроцессов Тогда    
		
			КоличествоЗапущенныхПроцессов_ОбработкаДанных = КоличествоЗапущенныхПроцессов_ОбработкаДанных + 1; 
			
			ШаблонНаименованияФоновогоЗадания = НСтр("ru = 'Обработка данных ""%1""'");

			НаименованиеФоновогоЗадания = СтрШаблон(ШаблонНаименованияФоновогоЗадания, СтрокаДанных.ТипДанных);
			СтруктураФоновогоЗадания = ВыполнитьФоновоеЗадание_ОбработкаДанных(СтрокаДанных.ТипДанных, НаименованиеФоновогоЗадания);  
			СтрокаДанных.ИдентификаторЗадания = СтруктураФоновогоЗадания.ИдентификаторЗадания;  
 			
			СформироватьОтображениеПрогрессаВыполнения(
				СтрокаДанных.ИмяРеквизитаПрогрессВыполнения, СтрокаДанных.ЗаголовокПроцесса);  
			
			ЕстьНезавершенные = Истина;          
			Прервать;
			
		КонецЕсли;      
		
 		ИдентификаторЗадания = СтрокаДанных.ИдентификаторЗадания;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда 
			Продолжить;
		КонецЕсли;
		
		// 
		ПроцессВыгрузки = ПолучитьСостояниеПроцесса(ИдентификаторЗадания);     
		Если ПроцессВыгрузки.Состояние = "Активно" Тогда   
			
			ЕстьНезавершенные = Истина;          
			
			Прогресс = ПроцессВыгрузки.Прогресс;  
			Если Прогресс <> Неопределено Тогда   
				Элементы[ИмяРеквизитаПрогрессВыполнения + "РасширеннаяПодсказка"].Заголовок = Прогресс.Текст;
				ЭтотОбъект[ИмяРеквизитаПрогрессВыполнения] = Прогресс.Процент;     
			КонецЕсли;
						
		ИначеЕсли ПроцессВыгрузки.Состояние = "Завершено" Тогда     
			
			СтрокаДанных.Завершено = Истина;   
			КоличествоЗапущенныхПроцессов_ОбработкаДанных = КоличествоЗапущенныхПроцессов_ОбработкаДанных - 1;
		
		Иначе 
			
	        ТекстОшибки = НСтр("ru = 'Ошибка выполнения процесса
		       |Описание=""%1""
		       |ИмяМодуля=""%2""
		       |НомерСтроки=%3
		       |ИсходнаяСтрока=""%4""'");  
			
	        ИнформацияОбОшибке = ПроцессВыгрузки.ИнформацияОбОшибке;
			ТекстОшибки = СтрШаблон(ТекстОшибки, 
				ИнформацияОбОшибке.Описание, ИнформацияОбОшибке.ИмяМодуля, 
				ИнформацияОбОшибке.НомерСтроки, ИнформацияОбОшибке.ИсходнаяСтрока);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	   
			
			СтрокаДанных.Завершено = Истина;
			КоличествоЗапущенныхПроцессов_ОбработкаДанных = КоличествоЗапущенныхПроцессов_ОбработкаДанных - 1;
		
		КонецЕсли;	
		
	КонецЦикла;
		
	Если ЕстьНезавершенные Тогда 
		ПодключитьОбработчикОжидания("ОбработатьОчередьФоновыхЗаданий_ОбработкаДанных", 1, Истина);  
	КонецЕсли;
			
КонецПроцедуры    

&НаКлиенте
Процедура ДлительнаяОперацияЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат.Статус = "Выполнено" Тогда 
		
		ФайлПолноеИмя = ДополнительныеПараметры.ФайлПолноеИмя;
		
		// Перенеименуем файл чтоб исключить повторную загрузку
		Попытка
			ПереместитьФайл(ФайлПолноеИмя, ФайлПолноеИмя + ".bak");    
		Исключение
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьСостояниеПроцесса(ИдентификаторЗадания)   
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);  
	
	СостояниеПроцессаВыгрузки = Новый Структура;         
	Если Задание = Неопределено Тогда // Заглушка на всякий случай
		СостояниеПроцессаВыгрузки.Вставить("Состояние", "Ошибка"); 
		ТекстСообщения = НСтр("ru = 'Не найдено фоновое задание по идентификатору %1'");    
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИдентификаторЗадания);
		СостояниеПроцессаВыгрузки.Вставить("ИнформацияОбОшибке", ТекстСообщения);    
		Возврат СостояниеПроцессаВыгрузки;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда 
		СостояниеПроцессаВыгрузки.Вставить("Состояние", "Активно");   
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда 
		СостояниеПроцессаВыгрузки.Вставить("Состояние", "Завершено"); 
	Иначе     
		СостояниеПроцессаВыгрузки.Вставить("Состояние", "Ошибка");   
		СостояниеПроцессаВыгрузки.Вставить("ИнформацияОбОшибке", Задание.ИнформацияОбОшибке);    
		Возврат СостояниеПроцессаВыгрузки;
	КонецЕсли;	
	СостояниеПроцессаВыгрузки.Вставить("Прогресс", ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания));
	
	Возврат СостояниеПроцессаВыгрузки;
	
КонецФункции

&НаСервере
Функция КаталогВременныхФайловОбработки()
	
	КаталогВременныхФайлов = "%1\tempFiles\";
	КаталогВременныхФайлов = СтрШаблон(КаталогВременныхФайлов, ПутьККаталогу);
	
	Возврат КаталогВременныхФайлов;
	
КонецФункции

#КонецОбласти