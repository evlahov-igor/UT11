// 26.05.2023 Марченко С.Н., КРОК, JIRA№A2105505-991

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьИсходныеДанныеНаСервере(ПараметрыМетода, АдресХранилищаРезультат = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	//ДвоичныеДанные = ПараметрыМетода.ДвоичныеДанные; 
	ПутьКФайлу = ПараметрыМетода.ПутьКФайлу; 
	НаименованиеФоновогоЗадания = ПараметрыМетода.НаименованиеФоновогоЗадания; 
	ПерезаписыватьЗапись = ПараметрыМетода.ПерезаписыватьЗапись;	
	
	МенеджерОтложенноеЗаполнение = РегистрыСведений.КР_ДанныеОтложенногоЗаполнения;
	
	МеткаНачалаБлока = "ID: ";
	ПозицияИдентификатораБлока = СтрДлина(МеткаНачалаБлока) + 1;
	ДлинаИдентификатораБлока = 32;
	ИдентификаторБлока = Неопределено;
	БлокДанных = Неопределено;   
	ТипДанных = Неопределено;      
	
	ОбработаноЗаписей = 0;
	
	//Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();     
	//ЧтениеТекста = Новый ЧтениеТекста(Поток, КодировкаТекста.UTF8);  
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);  
	
	СтрокаДанных = ЧтениеТекста.ПрочитатьСтроку();    
	
	// Обрабатываем заголовок
	
	// Получаем общее количество записей 
	ВсегоЗаписей = Число(Сред(СтрокаДанных, СтрНайти(СтрокаДанных, " ", НаправлениеПоиска.СКонца) + 1));
	
	// Читаем следующую строку
	СтрокаДанных = ЧтениеТекста.ПрочитатьСтроку();  
	Пока СтрокаДанных <> Неопределено Цикл    
		
		// Если определен идентификатор тогда читаем блок данных 
		Пока ИдентификаторБлока <> Неопределено Цикл 
			
			// Если строка совпадает с идентификатором то это конец блока
			// Отправляем данные на обработку	
			Если СтрокаДанных = ИдентификаторБлока Тогда 
				
				ПропуститьЗагрузку = Ложь;
				
				// Если данные по объекту уже загружались то игнорируем
				// Такое может быть когда объект был выгружен 
				//	в первый раз алгоритмом выгрузки
				//	а повторно "по ссылке"
				Если Не ПерезаписыватьЗапись Тогда 
					
					Запись = МенеджерОтложенноеЗаполнение.СоздатьМенеджерЗаписи();
					Запись.ХэшИдетрификаторОбъекта = ИдентификаторБлока;
					Запись.Прочитать();
					ПропуститьЗагрузку = Запись.Выбран();	
					
				КонецЕсли;							
				
				Если Не ПропуститьЗагрузку Тогда 
					БлокДанных = СтрСоединить(БлокДанных, Символы.ПС);				
					ЗагрузкаДанныхОбработатьБлокДанных(ТипДанных, ИдентификаторБлока, БлокДанных);		
				КонецЕсли;
				
				ОбработаноЗаписей = ОбработаноЗаписей + 1;
				Если ОбработаноЗаписей % 100 = 0  Тогда 
					СообщитьПрогресс(НаименованиеФоновогоЗадания, ОбработаноЗаписей, ВсегоЗаписей);
				КонецЕсли;
				
				ИдентификаторБлока = Неопределено;   
				
			// Иначе читаем в буфер	
			Иначе
				БлокДанных.Добавить(СтрокаДанных);
			КонецЕсли;	
			
			// Читаем следующую строку
			СтрокаДанных = ЧтениеТекста.ПрочитатьСтроку();  
			Продолжить;
		КонецЦикла;
		
		Если СтрНачинаетсяС(СтрокаДанных, МеткаНачалаБлока) Тогда 
			ИдентификаторБлока = Сред(СтрокаДанных, ПозицияИдентификатораБлока, ДлинаИдентификатораБлока);
			ТипДанных = Сред(СтрокаДанных, ПозицияИдентификатораБлока + ДлинаИдентификатораБлока + 1);
			БлокДанных = Новый Массив;
		КонецЕсли;	 
		
		// Читаем следующую строку
		СтрокаДанных = ЧтениеТекста.ПрочитатьСтроку();  

	КонецЦикла;
	ЧтениеТекста.Закрыть();

	УдалитьФайлы(ПутьКФайлу);
	
КонецПроцедуры

Процедура ОбработатьДанные(ПараметрыМетода, АдресХранилищаРезультат = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	МенеджерОтложенноеЗаполнение = РегистрыСведений.КР_ДанныеОтложенногоЗаполнения;
	
	НаименованиеФоновогоЗадания = ПараметрыМетода.НаименованиеФоновогоЗадания; 
	
	ВыборкаДанных = ПолучитьВыборку_ОбработкаДанных(ПараметрыМетода);

	ВсегоЗаписей = ВыборкаДанных.Количество();
	
	ОбработаноЗаписей = 0;
	Пока ВыборкаДанных.Следующий() Цикл 
				
		ТипДанных = ВыборкаДанных.ТипДанных;
		
		ОчиститьСообщенияПользователю();
		
		Данные = ВыборкаДанных.Данные;
		Если ВыборкаДанных.Состояние = Перечисления.КР_СостоянияОбработкиОтложенногоВыполнения.КЗаписиВБазуДанных
			Тогда 
			
			ИдентификаторБлока = ВыборкаДанных.ХэшИдетрификаторОбъекта;  
			ЗагрузкаДанныхОбработатьБлокДанных(ТипДанных, ИдентификаторБлока, Данные, Истина);
			
		Иначе

			СоставТипаДанных = СтрРазделить(ТипДанных, ".");   
			СоставТипаДанных0 = СоставТипаДанных[0];
			
			ТипДанныхСсылка = СтрЗаменить(ТипДанных, "Object.", "Ref.");
			Ссылка = XMLЗначение(Тип(ТипДанныхСсылка), ВыборкаДанных.GUID); 
			
			// Надо получить доп свойства из данных
			ИсходныеДанные = JSONВДанные(Данные);
			
			ДополнительныеСвойства = Неопределено;
			Если Не ИсходныеДанные.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) Тогда 
				ДополнительныеСвойства = Новый Структура;
			КонецЕсли;	 
			//
			
			Объект = Ссылка.ПолучитьОбъект();
			
			// Справочник
			Если СоставТипаДанных0 = "CatalogObject" Тогда 
				
				Если Не СправочникОбъектЗаписать(Объект, ДополнительныеСвойства) Тогда 
					УстановитьСостояниеОшибка(ВыборкаДанных);
				Иначе
					//УстановитьСостояниеОбработано(ВыборкаДанных);
					// Удаляем из регистра чтоб меньше база места занимала
					МенеджерОтложенноеЗаполнение.УдалитьЗапись(ВыборкаДанных.ХэшИдетрификаторОбъекта);						
				КонецЕсли;
				
			// Документ
			ИначеЕсли СоставТипаДанных0 = "DocumentObject" Тогда	
				
				Если Не ДокументОбъектЗаписать(Объект, ДополнительныеСвойства) Тогда 
					УстановитьСостояниеОшибка(ВыборкаДанных);
				Иначе
					//УстановитьСостояниеОбработано(ВыборкаДанных);
					// Удаляем из регистра чтоб меньше база места занимала
					МенеджерОтложенноеЗаполнение.УдалитьЗапись(ВыборкаДанных.ХэшИдетрификаторОбъекта);						
				КонецЕсли;            
				
			// ПланВидовХарактеристик
			ИначеЕсли СоставТипаДанных0 = "ChartOfCharacteristicTypesObject" Тогда 
				
				Если Не ПланВидовХарактеристикОбъектЗаписать(Объект, ДополнительныеСвойства) Тогда 
					УстановитьСостояниеОшибка(ВыборкаДанных);
				Иначе
					//УстановитьСостояниеОбработано(ВыборкаДанных);
					// Удаляем из регистра чтоб меньше база места занимала
					МенеджерОтложенноеЗаполнение.УдалитьЗапись(ВыборкаДанных.ХэшИдетрификаторОбъекта);						
				КонецЕсли;
				
			Иначе 
				// Ничего для сонара
			КонецЕсли;         

			ОбработаноЗаписей = ОбработаноЗаписей + 1;
						
			Если ОбработаноЗаписей % 100 = 0  Тогда 
				СообщитьПрогресс(НаименованиеФоновогоЗадания, ОбработаноЗаписей, ВсегоЗаписей);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузкаДанныхОбработатьБлокДанных(ТипДанных, ИдентификаторБлока, Данные, ЗаписьСуществует = Ложь)
		
	МенеджерОтложенноеЗаполнение = РегистрыСведений.КР_ДанныеОтложенногоЗаполнения;
		
	Объект = Неопределено; 
	ТребуетсяДополнительнаяОбработка = Неопределено;   
	Если Не ОбработатьТипДанныхДанных(ТипДанных, Данные, Объект, ТребуетсяДополнительнаяОбработка) Тогда 
		
		Если Не ЗаписьСуществует Тогда 
			// В случае ошибки обработки данных добавляем запись в РС чтоб потом дообработать  
			МенеджерОтложенноеЗаполнение.ДобавитьЗапись(
				ТипДанных, Данные, ИдентификаторБлока);
		Иначе                  
			// Для существующей записи устанавливаем состояние записи 
			//	так как метод увеличивает счетчик попыток обработки 
			// 	При автоматической обработке это важно так как не приводит к "вечной" автообработке
			МенеджерОтложенноеЗаполнение.УстановитьСостояниеЗаписи(
				ИдентификаторБлока, Перечисления.КР_СостоянияОбработкиОтложенногоВыполнения.КЗаписиВБазуДанных);
				
		КонецЕсли;		
			
	Иначе    
		
		Если ТребуетсяДополнительнаяОбработка Тогда 	

			МенеджерОтложенноеЗаполнение.ДобавитьЗапись(
				ТипДанных, Данные, ИдентификаторБлока, Объект.Ссылка, Истина);   
				
		Иначе
			Если ЗаписьСуществует Тогда 
				МенеджерОтложенноеЗаполнение.УдалитьЗапись(ИдентификаторБлока);	
			КонецЕсли;	
		КонецЕсли;	
				
	КонецЕсли;

КонецФункции
			
Функция ОбработатьТипДанныхДанных(ТипДанных, ДанныеJSON, Объект = Неопределено, ТребуетсяДополнительнаяОбработка) Экспорт
			
	// Удалим накопленные сеансовые сообщения
	ОчиститьСообщенияПользователю();
			
	Попытка
		
		Данные = JSONВДанные(ДанныеJSON); 
		
		// На переходное время на всякий случай считаем что в данных только объект
		ДанныеОбъект = Неопределено; 
		ДополнительныеСвойства = Неопределено;
		Если Не Данные.Свойство("Объект", ДанныеОбъект)
			Или Не Данные.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) Тогда 
			
			ДанныеОбъект = Данные;
			ДополнительныеСвойства = Новый Структура;
			
		КонецЕсли;
		
		// Вернем признак дополнительной обработки данных 
		//	если не был передан режим загрузки или он не равен Истина
		ТребуетсяДополнительнаяОбработка = Не ДополнительныеСвойства.Свойство("РежимЗагрузки")
			Или Не ДополнительныеСвойства.РежимЗагрузки; 
			
        // В любом случае на данном этапе пишем в режиме загрузки
		ДополнительныеСвойства.Вставить("РежимЗагрузки", Истина); 
		
		СоставТипаДанных = СтрРазделить(ТипДанных, ".");   
		СоставТипаДанных0 = СоставТипаДанных[0];
		
		// Константа
		Если СоставТипаДанных0 = "ConstantValueManager" Тогда 
			
			Если Не КонвертироватьВМенеджерЗначенияКонстанты(ТипДанных, ДанныеОбъект, Объект)
				Или Не КонстантаМенеджерЗначенияЗаписать(Объект, ДополнительныеСвойства) Тогда 
				Возврат Ложь;
			КонецЕсли;
				
		// Справочник
		ИначеЕсли СоставТипаДанных0 = "CatalogObject" Тогда 
			
			Если Не КонвертироватьВСсылочныйОбъект(ДанныеОбъект, Объект)
				Или Не СправочникОбъектЗаписать(Объект, ДополнительныеСвойства) Тогда 
				Возврат Ложь;
			КонецЕсли;
			
		// Документ
		ИначеЕсли СоставТипаДанных0 = "DocumentObject" Тогда	
			
			Если Не КонвертироватьВСсылочныйОбъект(ДанныеОбъект, Объект)
				Или Не ДокументОбъектЗаписать(Объект, ДополнительныеСвойства) Тогда 
				Возврат Ложь;
			КонецЕсли;            
			
		// ПланВидовХарактеристик
		ИначеЕсли СоставТипаДанных0 = "ChartOfCharacteristicTypesObject" Тогда 
			
			Если Не КонвертироватьВСсылочныйОбъект(ДанныеОбъект, Объект)
				Или Не ПланВидовХарактеристикОбъектЗаписать(Объект, ДополнительныеСвойства) Тогда 
				Возврат Ложь;
			КонецЕсли;
				
		// ПланОбмена
		ИначеЕсли СоставТипаДанных0 = "ExchangePlanObject" Тогда 
			
			Если Не КонвертироватьВСсылочныйОбъект(ДанныеОбъект, Объект)
				Или Не ПланОбменаОбъектЗаписать(Объект, ДополнительныеСвойства) Тогда 
				Возврат Ложь;
			КонецЕсли;
			
		// РегистрСведений
		ИначеЕсли СтрЗаканчиваетсяНа(СоставТипаДанных0, "RecordSet") Тогда	
			
			Если Не КонвертироватьВНаборЗаписейРегистра(ТипДанных, ДанныеОбъект, Объект)
				Или Не НаборЗаписейРегистраЗаписать(Объект, ДополнительныеСвойства) Тогда 
				Возврат Ложь;
			КонецЕсли; 
			
		Иначе 
			
			ТекстСообщения = НСтр("ru = 'Тип данных %1 не обрабатывается'");  
			ТекстСообщения = СтрШаблон(ТекстСообщения, ТипДанных);     
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);  
			Возврат Ложь;
		КонецЕсли;

		Возврат Истина;
					
	Исключение

		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка при конветрации данных %1: %2'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТипДанных, ОписаниеОшибки);     
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);   
	
		Возврат Ложь;
		
	КонецПопытки;
			
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

Функция ПолучитьВыборку_ОбработкаДанных(ПараметрыМетода, КоличествоПопытокОбработки = 10)
	Перем ТипДанных;                                   

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.ТипДанных КАК ТипДанных,
	|	Т.Данные КАК Данные,
	|	Т.ХэшИдетрификаторОбъекта КАК ХэшИдетрификаторОбъекта,
	|	Т.Состояние КАК Состояние,
	|	Т.GUID КАК GUID,
	|	""КР_ДанныеОтложенногоЗаполнения"" КАК Источник
	|ИЗ
	|	РегистрСведений.КР_ДанныеОтложенногоЗаполнения КАК Т";
	
	Если ПараметрыМетода.Свойство("ТипДанных", ТипДанных) Тогда 
	
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	Т.ТипДанных = &ТипДанных   
		|	И Т.Состояние В (
		|		ЗНАЧЕНИЕ(Перечисление.КР_СостоянияОбработкиОтложенногоВыполнения.КЗаписиВБазуДанных),
		|		ЗНАЧЕНИЕ(Перечисление.КР_СостоянияОбработкиОтложенногоВыполнения.КОбработке),
		|		ЗНАЧЕНИЕ(Перечисление.КР_СостоянияОбработкиОтложенногоВыполнения.ОшибкаОбработки)
		|	)
		|	И Т.КоличествоПопытокОбработки <= &КоличествоПопытокОбработки";                    
		
		Запрос = Новый Запрос(ТекстЗапроса);        
		Запрос.УстановитьПараметр("КоличествоПопытокОбработки", КоличествоПопытокОбработки);
		Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
		
		РезультатЗапроса = Запрос.Выполнить(); 

	Иначе

		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	Т.ХэшИдетрификаторОбъекта В(&НаборХэшИдетрификаторовОбъекта)";                    
		                                  
		Запрос = Новый Запрос(ТекстЗапроса);        
		Запрос.УстановитьПараметр("НаборХэшИдетрификаторовОбъекта", ПараметрыМетода.НаборХэшИдетрификаторовОбъекта);
		
		РезультатЗапроса = Запрос.Выполнить(); 
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

#Область МетодыКонвертации

Функция КонвертироватьВМенеджерЗначенияКонстанты(ТипДанных, Данные, Объект)
		
	// Получаем объект
	Объект = Новый (ТипДанных);

	// Конвертируем стандартно как реквизиты 	
	КонвертироватьВРеквизиты(Данные, Объект);
		
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьВСсылочныйОбъект(Данные, Объект)
	
	// Универсальный метод. Обрабатывает ссылочние объекты
		
	Ссылка = Неопределено;                       
	ДанныеСсылка = Данные.Ссылка;
	// Если загружается предопределенный элемент 
	//	то поиск нужно осуществлять по имени предопределенного 
	// При этом если в БД нет записи то создается новый элемент с Уникальным идентификатором источника 
	Если Не ЭтоПредопределенныйЭлемент(ДанныеСсылка, Ссылка)
		Или Не ЗначениеЗаполнено(Ссылка) Тогда 
		Ссылка = XMLЗначение(Тип(ДанныеСсылка.Тип), ДанныеСсылка.УникальныйИдентификатор);
	КонецЕсли;	
	ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Ссылка);  
	
	Если ЭтоНовый Тогда   
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
		Если СтрНайти(ДанныеСсылка.Тип, "DocumentRef.") Тогда 
			Объект = МенеджерОбъекта.СоздатьДокумент();   		
		ИначеЕсли СтрНайти(ДанныеСсылка.Тип, "ExchangePlanRef.") Тогда  
			Объект = МенеджерОбъекта.СоздатьУзел();   		
		ИначеЕсли Данные.Свойство("ЭтоГруппа")
			И Данные.ЭтоГруппа Тогда 
			Объект = МенеджерОбъекта.СоздатьГруппу();   		
		Иначе	                      
			Объект = МенеджерОбъекта.СоздатьЭлемент();   		
		КонецЕсли;
		
		Объект.УстановитьСсылкуНового(Ссылка);  
		
	Иначе
		Объект = Ссылка.ПолучитьОбъект();
	КонецЕсли;	

	// Если непосредственное удаление то на этом остановимся 
	Если Данные.Свойство("НепосредственноеУдаление") Тогда 
		Объект.ДополнительныеСвойства.Вставить("КР_RabbitMQНепосредственноеУдалениеОбъекта");
		Возврат Истина;
	КонецЕсли;
		
	// Далее идет универсальный механизм загрузки 
	// Удаляем свойства которые не могут быть изменены ("только чтение") 
	Данные.Удалить("Ссылка");
	Данные.Удалить("Предопределенный");
	Данные.Удалить("ЭтоГруппа");
	
	КонвертироватьВРеквизиты(Данные, Объект);
		
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьВНаборЗаписейРегистра(ТипДанных, Данные, Объект)
	
	// Получаем объект
	Объект = Новый (ТипДанных);
	
	// Не можем использовать общий метод КонвертироватьРеквизиты
	//	так как отбор надо "Установить"
	// Логика скопирована из КонвертироватьРеквизиты только в необходимом объеме
	// Дата синхронизации кода 13.10.2022	           
	
	ТипДата = Тип("Дата");	
	Для Каждого КлючЗначение Из Данные.Отбор Цикл 
		
		ОбъектОтбор = Объект.Отбор;
		ИмяСвойстваОбъекта = КлючЗначение.Ключ;
		ЗначениеСвойстваОбъекта = КлючЗначение.Значение;
		ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойстваОбъекта);
		
		ЗначениеОтбора = Неопределено;
		Если ТипЗначенияСвойства = Тип("Структура") Тогда
			КонвертироватьСтруктуру(ЗначениеСвойстваОбъекта, ЗначениеОтбора);	
		ИначеЕсли ТипЗнч(ОбъектОтбор[ИмяСвойстваОбъекта].Значение) = ТипДата Тогда 
			ЗначениеОтбора = XMLЗначение(ТипДата, ЗначениеСвойстваОбъекта);
		Иначе
			ЗначениеОтбора = ЗначениеСвойстваОбъекта;
		КонецЕсли;	      
		
		ОбъектОтбор[ИмяСвойстваОбъекта].Установить(ЗначениеОтбора);
		
	КонецЦикла;	
		
	// Собственно набор записей
	КонвертироватьМассивСтруктур(Данные.Записи, Объект);
		
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьВРеквизиты(Данные, Объект)

	ТипДата = Тип("Дата");	
	Для Каждого КлючЗначение Из Данные Цикл 
		
		ИмяСвойстваОбъекта = КлючЗначение.Ключ;
		ЗначениеСвойстваОбъекта = КлючЗначение.Значение;
		ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойстваОбъекта);
		
		// При добавлении типов данных 
		//	синхронизировать с КонвертироватьВНаборЗаписейРегистра
		//	в блоке обработки Объект.Отбор (только то что будет необходимо)
		// Дата синхронизации кода 13.10.2022	
		
		Если ТипЗначенияСвойства = Тип("Структура") Тогда 
			КонвертироватьСтруктуру(ЗначениеСвойстваОбъекта, Объект[ИмяСвойстваОбъекта]);	
		// Загрузка табличной части	
		ИначеЕсли ТипЗначенияСвойства = Тип("Массив") Тогда 
			КонвертироватьМассивСтруктур(ЗначениеСвойстваОбъекта, Объект[ИмяСвойстваОбъекта]);   
		ИначеЕсли ЗначениеЗаполнено(ЗначениеСвойстваОбъекта)
			И ТипЗнч(Объект[ИмяСвойстваОбъекта]) = ТипДата Тогда  
			Объект[ИмяСвойстваОбъекта] = XMLЗначение(ТипДата, ЗначениеСвойстваОбъекта);
		Иначе
			Объект[ИмяСвойстваОбъекта] = ЗначениеСвойстваОбъекта;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьСтруктуру(Данные, Значение)
	
	// ХранилищеЗначения
	Если Данные.Тип = "ValueStorage" Тогда 
		Возврат КонвертироватьХранилищеЗначения(Данные, Значение);
	// ОписаниеТипов	
	ИначеЕсли Данные.Тип = "TypeDescription" Тогда 
		Возврат КонвертироватьОписаниеТипов(Данные, Значение);
	// УникальныйИдентификатор
	ИначеЕсли Данные.Тип = "UUID" Тогда 
		Возврат КонвертироватьУникальныйИдентификатор(Данные, Значение);
	// Ссылка 
	Иначе 
		Возврат КонвертироватьСсылку(Данные, Значение);
	КонецЕсли;
			
КонецФункции

Функция КонвертироватьХранилищеЗначения(Данные, Значение)
	
	Если Данные.ЭтоДвоичныеДанные Тогда 
		ВосстановленноеЗначение = Base64Значение(Данные.Данные); 
	Иначе
		ВосстановленноеЗначение = ЗначениеИзСтрокиВнутр(Данные.Данные); 
	КонецЕсли;	
	
	Значение = Новый ХранилищеЗначения(ВосстановленноеЗначение);
	                                 
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьОписаниеТипов(Данные, Значение)
	
	ВосстановленноеЗначение = ЗначениеИзСтрокиВнутр(Данные.Данные);
	
	Значение = Новый ХранилищеЗначения(ВосстановленноеЗначение);
	                                 
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьУникальныйИдентификатор(Данные, Значение)

	СсылкаТип = Тип(Данные.Тип);	
	Значение = XMLЗначение(СсылкаТип, Данные.УникальныйИдентификатор);
	
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьСсылку(Данные, Значение)

	СсылкаТип = Тип(Данные.Тип);
	
	Ссылка = Неопределено;
	Если Не ЭтоПредопределенныйЭлемент(Данные, Ссылка)
		Или Не ЗначениеЗаполнено(Ссылка) Тогда 
		Ссылка = XMLЗначение(СсылкаТип, Данные.УникальныйИдентификатор);
	КонецЕсли;
	
	Значение = Ссылка;
	
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьМассивСтруктур(Данные, КоллекцияПриемник)
	
	КоллекцияПриемник.Очистить();
	Для Каждого СтрокаДанных Из Данные Цикл 
		
		// Удалим то что только "для чтения"
		СтрокаДанных.Удалить("НомерСтроки");
		
		СтрокаКоллекции = КоллекцияПриемник.Добавить();
		КонвертироватьВРеквизиты(СтрокаДанных, СтрокаКоллекции)		
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ЗаписьОбъектов

Функция КонстантаМенеджерЗначенияЗаписать(Объект, ДополнительныеСвойства) Экспорт 
	
	УстановитьДополнительныеСвойства(Объект, ДополнительныеСвойства);
	Объект.ОбменДанными.Загрузка = Объект.ДополнительныеСвойства.РежимЗагрузки;
	
	Попытка
		Объект.Записать();
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка записи константы %1: %2'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект, ОписаниеОшибки);     
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);  
		Возврат Ложь;
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции

Функция СправочникОбъектЗаписать(Объект, ДополнительныеСвойства) Экспорт 

	УстановитьДополнительныеСвойства(Объект, ДополнительныеСвойства);
	Объект.ОбменДанными.Загрузка = Объект.ДополнительныеСвойства.РежимЗагрузки;
	
	ОбъектТипЗначения = ТипЗнч(Объект);
	Если ОбъектТипЗначения = Тип("СправочникОбъект.Пользователи") Тогда 
		
		ОписаниеПользователяИБ = Неопределено;
		Если Объект.ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ", ОписаниеПользователяИБ) Тогда 
			Объект.ДополнительныеСвойства.Удалить("ОписаниеПользователяИБ");
		КонецЕсли;
		
		Если Объект.ОбменДанными.Загрузка 
			И ОписаниеПользователяИБ <> Неопределено Тогда 
			
			Объект.ИдентификаторПользователяИБ = ПроверитьСоздатьПользователяИБ(ОписаниеПользователяИБ);
											
		КонецЕсли;
		
	КонецЕсли;
	  
	Попытка   
		Объект.Записать();
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка записи элемента справочника %1: %2'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект, ОписаниеОшибки);     
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);  
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура СкопироватьДополнительныеСвойстваНаДвижения(Объект, ДополнительныеСвойства, РежимЗагрузка)
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл 
		Для Каждого КлючЗначение Из ДополнительныеСвойства Цикл 
			НаборЗаписей.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение); 
			НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузка;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

Функция ДокументОбъектЗаписать(Объект, ДополнительныеСвойства) Экспорт 

	УстановитьДополнительныеСвойства(Объект, ДополнительныеСвойства);
	Объект.ОбменДанными.Загрузка = Объект.ДополнительныеСвойства.РежимЗагрузки;
	
	// Для документа все свойства надо транслировать на Движения
	СкопироватьДополнительныеСвойстваНаДвижения(Объект, ДополнительныеСвойства, Объект.ОбменДанными.Загрузка);
	
	Если Объект.Проведен
		И Не Объект.ОбменДанными.Загрузка Тогда        		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;	
	
	Попытка
		Объект.Записать(РежимЗаписи);         
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка записи документа %1: %2'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект, ОписаниеОшибки);     
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);  
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПланВидовХарактеристикОбъектЗаписать(Объект, ДополнительныеСвойства) Экспорт 

	УстановитьДополнительныеСвойства(Объект, ДополнительныеСвойства);
	Объект.ОбменДанными.Загрузка = Объект.ДополнительныеСвойства.РежимЗагрузки;
	
	Попытка
		Объект.Записать();
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка записи плана вида характеристик %1: %2'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект, ОписаниеОшибки);     
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);  
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПланОбменаОбъектЗаписать(Объект, ДополнительныеСвойства) Экспорт 

	УстановитьДополнительныеСвойства(Объект, ДополнительныеСвойства);
	Объект.ОбменДанными.Загрузка = Объект.ДополнительныеСвойства.РежимЗагрузки;
	
	Попытка
		Объект.Записать();
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка записи плана обмена %1: %2'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект, ОписаниеОшибки);     
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);  
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция НаборЗаписейРегистраЗаписать(Объект, ДополнительныеСвойства) Экспорт 

	УстановитьДополнительныеСвойства(Объект, ДополнительныеСвойства);
	Объект.ОбменДанными.Загрузка = Объект.ДополнительныеСвойства.РежимЗагрузки;
	
	Попытка
		Объект.Записать();
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка записи набора записей %1: %2'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект, ОписаниеОшибки);     
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);  
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПрочиеМетоды     

Процедура УстановитьДополнительныеСвойства(Объект, ДополнительныеСвойства)  

	Если ДополнительныеСвойства = Неопределено Тогда 
		ДополнительныеСвойства = Новый Структура;
	КонецЕсли;

	// Обязательные   
	
	// Игнорируем проверку на дату запрета
	ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");   
	// Еще одно отдельное свойство с "обратной логикой" для нас              
	//	Такое состояние доп.свойства приводит к игнорированию
	//	проверки на "Изменяемые данные находятся в закрытом периоде" 
	//	(см. ПроведениеДокументов.ПроверитьДатуЗапретаПоТаблицеИзменений)
	ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Истина); 
	
	Если Не ДополнительныеСвойства.Свойство("РежимЗагрузки") Тогда 
		Объект.ДополнительныеСвойства.Вставить("РежимЗагрузки", Ложь);
	КонецЕсли;	
	
	// Кастомные
	Для Каждого КлючЗначение Из ДополнительныеСвойства Цикл 
		Объект.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение); 
	КонецЦикла;	
	
КонецПроцедуры

Функция ЭтоПредопределенныйЭлемент(ДанныеСсылка, Ссылка, СверятьGUID = Истина)
   	Перем ИмяПредопределенныхДанных;
	
	ДанныеСсылка.Свойство("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
	Если Не ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда 
        Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";

	СсылкаМетаданные = Метаданные.НайтиПоТипу(Тип(ДанныеСсылка.Тип));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", СсылкаМетаданные.ПолноеИмя());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
	
	УстановитьПривилегированныйРежим(Истина);  
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		
		Ссылка = ВыборкаДетальныеЗаписи.Ссылка;  
		// Если не совпали сссылки (база сгенерировала элемент)
		//	то удалим его 
		Если СверятьGUID 
			И ДанныеСсылка.УникальныйИдентификатор <> XMLСтрока(Ссылка) Тогда 
			
			СсылкаОбъект = Ссылка.ПолучитьОбъект(); 
			СсылкаОбъект.ИмяПредопределенныхДанных = Неопределено;
			СсылкаОбъект.ОбменДанными.Загрузка = Истина;
			СсылкаОбъект.Записать();     
			СсылкаОбъект.Удалить();     
			
			Ссылка = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;	
		
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения)

	СообщениеОбмена.МассивОшибок.Добавить(ТекстСообщения);
	СообщениеОбмена.ЕстьОшибки = Истина;
	
КонецПроцедуры

Процедура УстановитьСостояниеОбработано(ВыборкаДанных)
	РегистрыСведений[ВыборкаДанных.Источник].УстановитьСостояниеЗаписи(
		ВыборкаДанных.ХэшИдетрификаторОбъекта, Перечисления.КР_СостоянияОбработкиОтложенногоВыполнения.Обработано);
КонецПроцедуры

Процедура УстановитьСостояниеОшибка(ВыборкаДанных)
	РегистрыСведений[ВыборкаДанных.Источник].УстановитьСостояниеЗаписи(
		ВыборкаДанных.ХэшИдетрификаторОбъекта, Перечисления.КР_СостоянияОбработкиОтложенногоВыполнения.ОшибкаОбработки);
КонецПроцедуры

Процедура УстановитьСостояниеКритичнаяОшибка(ВыборкаДанных)
	РегистрыСведений[ВыборкаДанных.Источник].УстановитьСостояниеЗаписи(
		ВыборкаДанных.ХэшИдетрификаторОбъекта, Перечисления.КР_СостоянияОбработкиОтложенногоВыполнения.КритичнаяОшибка);
КонецПроцедуры

Функция ПроверитьСоздатьПользователяИБ(ОписаниеПользователяИБ);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ОписаниеПользователяИБ.Имя); 
	Если ПользовательИБ = Неопределено Тогда 
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПользовательИБ, ОписаниеПользователяИБ, , "Роли");
	
	ПользовательИБ.Роли.Очистить();
	Для Каждого ИмяРоли Из ОписаниеПользователяИБ.Роли Цикл 
		ПользовательИБ.Роли.Добавить(Метаданные.Роли[ИмяРоли]);
	КонецЦикла;        
	
	ПользовательИБ.Записать();

	Возврат ПользовательИБ.УникальныйИдентификатор;
		
КонецФункции

#КонецОбласти    

Функция ДанныеВJSON(Данные)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция JSONВДанные(JSON)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSON);
	
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СообщитьПрогресс(Пояснение, ТекущаяПозицияВПакетаДанных, ВсегоДанныхВПакете)
	
	Если ВсегоДанныхВПакете > 0 Тогда 
		Процент = Цел(ТекущаяПозицияВПакетаДанных / ВсегоДанныхВПакете * 100);  
	Иначе
		Процент = 100;
	КонецЕсли;	
	
	Заголовок = "%1
	|Обработано %2 из %3 записей";
	Заголовок = СтрШаблон(Заголовок, 
		Пояснение, ТекущаяПозицияВПакетаДанных, ВсегоДанныхВПакете);
		
	ДлительныеОперации.СообщитьПрогресс(Процент, Заголовок);

КонецПроцедуры         

Процедура ОчиститьСообщенияПользователю()
	
	ПолучитьСообщенияПользователю(Истина);
	
	//МассивСообщений = Новый Массив;
	//МассивСообщенийСеанса = ПолучитьСообщенияПользователю(Истина);
	//Для Итератор = -МассивСообщенийСеанса.ВГраница() По 0 Цикл   
	//	СообщениеПользователю = МассивСообщенийСеанса[-Итератор];
	//	Если СтрНачинаетсяС(СообщениеПользователю.Текст, "{") Тогда 
	//		МассивСообщений.Добавить(СообщениеПользователю);
	//	КонецЕсли;	                                       
	//КонецЦикла;
	//
	//Для Каждого СообщениеПользователю Из МассивСообщений Цикл 
	//	ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю.Текст);
	//КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#КонецЕсли
