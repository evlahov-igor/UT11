//////////////////////////////////////////////////////////////////////////////////
//// Модуль формы обработки "КР_ОприходованиеМежскладскихПеремещенийТоваровСТСД"
//// Создан: 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
//// Разработка по ФДР С31.013, Загрузка номенклатуры через ТСД

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	ДаннныеТСДДляРежимаОтладки = КР_РаботаСТСД.ПолучитьДаннныеТСДДляРежимаОтладки("Строка");
	Если ДаннныеТСДДляРежимаОтладки <> Неопределено Тогда
		ТестовыеДанныеТСД.УстановитьТекст(ДаннныеТСДДляРежимаОтладки);
	КонецЕсли;
		
	ИнициализироватьМагазин();
	
	ДоступныПолныеПрава = Пользователи.РолиДоступны("ПолныеПрава", , Ложь);
	Элементы.Отладка.Видимость = ДоступныПолныеПрава;  
	
	// << 25.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2594  
	ЭтоБазаМагазина = Не КР_ДополнительныеНастройкиПовтИсп.БазаЯвляетсяЦентральной();
	Элементы.ОсновноеДеревоВыполнитьЗапросКороба.Видимость = ЭтоБазаМагазина;
	// >> 25.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2594
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
	ПолучитьДанныеТСД(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкодыСоСканера(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастей

&НаКлиенте
Процедура ОсновноеДеревоПредставлениеПервоеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.ОсновноеДерево.ТекущиеДанные;
	Если Не ТекущиеДанные.ЭтоСтрокаНакладной ИЛИ ЗначениеЗаполнено(ТекущиеДанные.Накладная) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновноеДеревоНакладнаяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеДеревоНакладнаяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Проведен", 			Истина);
	Если ЗначениеЗаполнено(Магазин) Тогда
		ПараметрыОтбора.Вставить("СкладПолучатель", Магазин);
	КонецЕсли;
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ОкончаниеВыбораНакладная", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", 									Истина);
	ПараметрыФормы.Вставить("Отбор", 										ПараметрыОтбора);
	ПараметрыФормы.Вставить("КР_ИсключитьАктОРасхожденияхПослеПеремещения", Истина);
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , ОбработкаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеДеревоПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ОсновноеДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ШтрихкодКороба) Тогда
		ТекущийШтрихкодКоробаЯчейки = ТекущиеДанные.ШтрихкодКороба;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеДеревоПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные 					= Элемент.ТекущиеДанные;
	Отказ							= ТекущиеДанные.ЭтоОжидаемоеДействие;
	ПринятоТекущейСтрокиДоИзменения = ТекущиеДанные.Принято;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеДеревоПринятоПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.ОсновноеДерево.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева.ЭтоСтрокаКороб Тогда
		Если ТекущаяСтрокаДерева.Принято > 1 Тогда
			// Значение принятия короба может быть либо 0, либо 1.
			ТекущаяСтрокаДерева.Принято 		= 1;
		КонецЕсли;
	КонецЕсли;
	
	ДельтаПринято 								= ТекущаяСтрокаДерева.Принято - ПринятоТекущейСтрокиДоИзменения;
	Если ДельтаПринято = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Уровень характеристика
	ТекущаяСтрокаДерева.Отклонение 				= ТекущаяСтрокаДерева.Принято - ТекущаяСтрокаДерева.Отгружено;
	
	// Ручной ввод "Принято" доступен только на уровнях "ЭтоСтрокаХарактеристика" и "ЭтоСтрокаКороб"
	Если ТекущаяСтрокаДерева.ЭтоСтрокаХарактеристика Тогда
		
		// Уровень номенклатура
		РодительНоменклатура 					= ТекущаяСтрокаДерева.ПолучитьРодителя();
		БылоПринятоБольшеНуля					= РодительНоменклатура.Принято > 0;
		РодительНоменклатура.Принято 			= РодительНоменклатура.Принято + ДельтаПринято;
		РодительНоменклатура.Отклонение 		= РодительНоменклатура.Принято - РодительНоменклатура.Отгружено;

		Если БылоПринятоБольшеНуля И РодительНоменклатура.Принято <> 0 Тогда
			// Дальнейшие обход дерева не требуется, в случае если принято по номенклатуре стало больше нуля
			Возврат;
		КонецЕсли;
		
		// Уровень короб
		РодительУпаковочныйЛист					= РодительНоменклатура.ПолучитьРодителя();
		ПринятоПоКоробу							= РассчитатьПринятоПоКоробу(РодительУпаковочныйЛист);
		Если ПринятоПоКоробу = РодительУпаковочныйЛист.Принято Тогда
			Возврат;
		КонецЕсли;
		РодительУпаковочныйЛист.Принято 		= ПринятоПоКоробу;
		РодительУпаковочныйЛист.Отклонение 		= РодительУпаковочныйЛист.Принято - РодительУпаковочныйЛист.Отгружено;
		
		РодительНакладная						= РодительУпаковочныйЛист.ПолучитьРодителя();
		
	ИначеЕсли ТекущаяСтрокаДерева.ЭтоСтрокаКороб Тогда
		
		Если ТекущаяСтрокаДерева.Принято = 0 Тогда
			ОчиститьПринятоДляДочернихСтрок(ТекущаяСтрокаДерева);
		КонецЕсли;
		
		ТекущаяСтрокаДерева.Отклонение 			= ТекущаяСтрокаДерева.Принято - ТекущаяСтрокаДерева.Отгружено;
		
		РодительНакладная						= ТекущаяСтрокаДерева.ПолучитьРодителя();
		ПринятоПоКоробу 						= ТекущаяСтрокаДерева.Принято;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПринятоПоКоробу = 0 Тогда
		ИзменениеВерхнихУровней 				= -1;
	Иначе
		ИзменениеВерхнихУровней 				= 1;
	КонецЕсли;
	
	// Уровень накладной
	РодительНакладная.Принято 					= РодительНакладная.Принято + ИзменениеВерхнихУровней;
	РодительНакладная.Отклонение 				= РодительНакладная.Принято - РодительНакладная.Отгружено;
	
	// Уровень действия
	РодительДействие							= РодительНакладная.ПолучитьРодителя();
	РодительДействие.Принято 					= РодительДействие.Принято + ИзменениеВерхнихУровней;
	РодительДействие.Отклонение 				= РодительДействие.Принято - РодительДействие.Отгружено;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ПолучитьДанныеТСД(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Магазин) Тогда
		// Если это автоматический вызов процедуры при открытии, то ошибку не выводим
		Если Команда = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Сообщение = НСтр("ru='Не заполнен реквизит <Магазин>'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение, , "Магазин");
		Возврат;
	КонецЕсли;
	
	ТекстДанных = ТестовыеДанныеТСД.ПолучитьТекст();
	Если ЗначениеЗаполнено(ТекстДанных) Тогда
		Сообщение = НСтр("ru='Внимание! При загрузке данных использовались данные из настройки ""Тестовые данные ТСД""!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
		ОбработатьШтрихкоды(ТекстДанных);
	Иначе
		ЗагрузитьДанныеИзТСД();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	СоздатьДокументыНаСервере();
	
	Сообщение = НСтр("ru='Создание документов завершено.'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
	
	//A2105505-2050
	ПолучитьДанныеТСД(Команда);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОтборРазмещениеТоваров(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Магазин) Тогда
		ПараметрыОтбора.Вставить("Склад", Магазин);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", 				ПараметрыОтбора);
	ОткрытьФорму("Документ.ОтборРазмещениеТоваров.ФормаСписка", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	СвернутьДерево(ОсновноеДерево.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	РазвернутьДерево();

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПриемку(Команда)
	
	// --> Евлахов Игорь Николаевич (Начало) 02.04.2024
	// Задача #3937
	ВыделенныеСтроки = Элементы.ОсновноеДерево.ВыделенныеСтроки;
	
	МассивДокументов = Новый Массив();
	
	Для каждого Идентификатор Из ВыделенныеСтроки Цикл
		СтрокаДерева = ОсновноеДерево.НайтиПоИдентификатору(Идентификатор);
		
		Если ТипЗнч(СтрокаДерева.Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров")
			И ЗначениеЗаполнено(СтрокаДерева.Накладная) Тогда
			
			ИндексЭлемента = МассивДокументов.Найти(СтрокаДерева.Накладная);
			
			Если ИндексЭлемента = Неопределено Тогда
				МассивДокументов.Добавить(СтрокаДерева.Накладная);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() > 0 Тогда
		ТекстШаблона = НСтр("ru = 'Будет установлена ""Текущая дата"" в поле ""Потоварная приемка завершена""
								  |Количество выделенных документов: %1. Завершить приемку ?'");
		ТекстВопроса = СтрШаблон(ТекстШаблона, Формат(МассивДокументов.Количество(), "ЧДЦ=0; ЧГ=0"));
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗавершитьПриемку", ЭтотОбъект, МассивДокументов);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет выделенных строк с ""Перемещением товаров"".
									|
									|Действия: необходимо выделить строки с ""Перемещением товаров""'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 02.04.2024
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОписанияОповещения

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗавершитьПриемку(Результат, МассивДокументов) Экспорт
	
	// --> Евлахов Игорь Николаевич (Начало) 02.04.2024
	// Задача #3937
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	УстановитьДатуПотоварнойПриемкиНаСервере(МассивДокументов); 
	ЗагрузитьДанныеИзТСД();
    // <-- Евлахов Игорь Николаевич (Конец) 02.04.2024
	
КонецПроцедуры

#КонецОбласти
             
#Область СлужебныеПроцедурыИФункции

Функция ТестовыеДанныеВДанныеДляЗагрузки(ТекстДанных)
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД()
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	// << 05.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1739
	Если Результат.Результат Тогда
		ДанныеДляОбработки = Результат.ТаблицаТоваров;
	Иначе
		// Если получить данные из ТСД не удалось, все равно заполним обработку на основе данных БД
		ДанныеДляОбработки = "";
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
	ОбработатьШтрихкоды(ДанныеДляОбработки);
	// >> 05.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1739
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("Строка") Тогда
		СоздатьТаблицуДанныхТСДПоСтроке(Данные);
	ИначеЕсли ТипДанных = Тип("Массив") Тогда
		СоздатьТаблицуДанныхТСДПоМассиву(Данные);
	Иначе
		Шаблон = НСтр("ru='Ошибка чтения данных. Отсутствует алгоритм работы с данными типа %1'");
		Сообщение = СтрШаблон(Шаблон, ТипДанных);
		ДобавитьОшибкуВЛог(Неопределено, Сообщение, ТипДанных);
		Возврат;
	КонецЕсли;
	
	ПроверкаПройденаБезОшибок = ПроверкаНаНаличиеЯчеек();

	ПолучитьДанныеТСДНаСервере();
	
	РазвернутьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

// << 25.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2594
&НаКлиенте
Процедура ВыполнитьЗапросКороба(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросКоробаЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры // >> 25.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2594

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкодыСоСканера(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыСоСканера(Данные)
	
	Если Не ЗначениеЗаполнено(Магазин) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен реквизит <Магазин>'"), , "Магазин");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ОсновноеДерево.ТекущиеДанные;
	ЕстьСтрокиДерева = Булево(ОсновноеДерево.ПолучитьЭлементы().Количество());
	
	ТипШтрихкодаСтрокой = ПолучитьТипШтрихкода(Данные.Штрихкод);
	
	Если ТипШтрихкодаСтрокой = "Короб" Или ТипШтрихкодаСтрокой = "Ячейка" Тогда
		СтрокиКороба = ДанныеТСД.НайтиСтроки(Новый Структура("ШтрихкодКоробаЯчейки", Данные.Штрихкод));
		Если СтрокиКороба.Количество() Тогда
			ТекущийШтрихкодКоробаЯчейки = Данные.Штрихкод;
			УстановитьТекущуюСтрокуКороба(ОсновноеДерево);
			Возврат;
		Иначе
			ДобавитьСтрокуДанныхТСД(Данные.Штрихкод, ТипШтрихкодаСтрокой);
			ТекущийШтрихкодКоробаЯчейки = Данные.Штрихкод;
		КонецЕсли;
	ИначеЕсли ТипШтрихкодаСтрокой = "Номенклатура" Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка короба (ячейки)'"));
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ШтрихкодКороба) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В выбранной строке не указан короб (ячейка)'"));
			Возврат;
		Иначе
			нСтроки = ДанныеТСД.НайтиСтроки(Новый Структура("ШтрихкодКоробаЯчейки, ШтрихкодТовара", ТекущиеДанные.ШтрихкодКороба, Данные.Штрихкод));
			Если нСтроки.Количество() Тогда
				нСтроки[0].Количество = нСтроки[0].Количество + Данные.Количество;
			Иначе
				ТипШтрихкодаСтрокой = ОбработатьПорциюДанных(Данные.Штрихкод, Данные.Количество,
					ТекущиеДанные.ШтрихкодКороба, Истина, ТипШтрихкодаСтрокой);
			КонецЕсли;
			ТекущийШтрихкодКоробаЯчейки = ТекущиеДанные.ШтрихкодКороба;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось определить тип штрихкода'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПринимаемыеКоробаИТовар();
	
	МассивКоробов				= Новый Массив;
	МассивКоробовБезТовара		= Новый Массив;
	Для Каждого Строка Из ПринимаемыеКоробаИТовар Цикл
		Если МассивКоробов.Найти(Строка.Короб) = Неопределено Тогда
			МассивКоробов.Добавить(Строка.Короб);
		КонецЕсли;
		Если Строка.Принято = 0 И МассивКоробовБезТовара.Найти(Строка.Короб) = Неопределено Тогда
			МассивКоробовБезТовара.Добавить(Строка.Короб);
		КонецЕсли;
	КонецЦикла;
	
	// В результате трех следующих проверок будут сформированы сообщения о ошибках 
	// и заполнен единый список значений "КоробаСОшибками"
	ПроверкаПоискКоробовСЗавершеннойПриемкой(МассивКоробов);
	ПроверкаПоискКоробовСОтраженнойПотоварнойПриемкой(МассивКоробов);
	//ПроверкаПоискРанееПринятыхКоробовБезДанныхОТоваре(МассивКоробовБезТовара);
	
	СформироватьОжидаемыеПоступленияКоробов();
	
	РазвернутьДерево();
	
	Если ЗначениеЗаполнено(ТекущийШтрихкодКоробаЯчейки) Тогда
		УстановитьТекущуюСтрокуКороба(ОсновноеДерево);
	КонецЕсли;
	
КонецПроцедуры

// << 25.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2594
&НаКлиенте
Процедура ВыполнитьЗапросКоробаЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт

	ТипШтрихкодаСтрокой = ПолучитьТипШтрихкода(ДанныхШтрихкода.Штрихкод);
	
	Если ТипШтрихкодаСтрокой = "Короб" Тогда 
		
		ВыполнитьЗапросКоробаНаСервере(ДанныхШтрихкода.Штрихкод);  
		
	ИначеЕсли Не ЗначениеЗаполнено(ТипШтрихкодаСтрокой) Тогда 
		Возврат;
	Иначе
		ТекстСообщения = 
			НСтр("ru = 'Введенный штрихкод не является штрихкодом короба'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		Возврат;
	КонецЕсли;	       
	
КонецПроцедуры // >> 25.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2594

// << 25.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2594
&НаСервере
Процедура ВыполнитьЗапросКоробаНаСервере(Штрихкод)
	
	// Формируем запрос к ЦБ на получение упаковочного листа по штрихкоду
	ТипДанных = Тип("ДокументСсылка.УпаковочныйЛист");
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Штрихкод", Штрихкод);
	Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "КР_НомерМагазина");    
	Получатель = XMLСтрока(Получатель);
	
	Если КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.ВыполнитьЗапросДанныхКЦентральнойБазе(
		XMLТип(ТипДанных).ИмяТипа, ПараметрыЗапроса, Получатель) Тогда 
		
		ТекстСообщения = 
			НСтр("ru = 'Выполнен запрос на передачу упаковочного листа ""%1"" из центральной базы в базу магазина. "
				+ "Процесс передачи может занять до 30 минут. "
				+ "Пожалуйста, повторите попытку оприходования по этому коробу позже'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Штрихкод);
		
	Иначе    
				
		ТекстСообщения = 
			НСтр("ru = 'Ошибка выполнения запроа на передачу упаковочного листа ""%1"" из центральной базы'");
		
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	
КонецПроцедуры // >> 25.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2594

&НаКлиенте
Процедура УстановитьТекущуюСтрокуКороба(СтрокиДерева)
	
	ТекущийУровень = СтрокиДерева.ПолучитьЭлементы();
	Для Каждого СтрокаУровня Из ТекущийУровень Цикл
		Если СтрокаУровня.ШтрихкодКороба = ТекущийШтрихкодКоробаЯчейки Тогда
			Элементы.ОсновноеДерево.ТекущаяСтрока = СтрокаУровня.ПолучитьИдентификатор();
		Иначе
			УстановитьТекущуюСтрокуКороба(СтрокаУровня);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеТСДНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ОсновноеДерево");
	Дерево.Строки.Очистить();
	ЗначениеВРеквизитФормы(Дерево, "ОсновноеДерево");
	
	КоробаСОшибками.Очистить();
	НакладныеСЗавершеннойПриемкой.Очистить();
	СписокОшибокОбщий.Очистить();
	
	ЗаполнитьПринимаемыеКоробаИТовар();
	
	МассивКоробов				= Новый Массив;
	МассивКоробовБезТовара		= Новый Массив;
	Для Каждого Строка Из ПринимаемыеКоробаИТовар Цикл
		Если МассивКоробов.Найти(Строка.Короб) = Неопределено Тогда
			МассивКоробов.Добавить(Строка.Короб);
		КонецЕсли;
		Если Строка.Принято = 0 И МассивКоробовБезТовара.Найти(Строка.Короб) = Неопределено Тогда
			МассивКоробовБезТовара.Добавить(Строка.Короб);
		КонецЕсли;
	КонецЦикла;
	
	// В результате трех следующих проверок будут сформированы сообщения о ошибках 
	// и заполнен единый список значений "КоробаСОшибками"
	ПроверкаПоискКоробовСЗавершеннойПриемкой(МассивКоробов);
	ПроверкаПоискКоробовСОтраженнойПотоварнойПриемкой(МассивКоробов);
	ПроверкаПоискРанееПринятыхКоробовБезДанныхОТоваре(МассивКоробовБезТовара);
	
	СформироватьОжидаемыеПоступленияКоробов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьОшибкуВЛог(СписокОшибокОбщий, ТекстОшибки, Ссылка = Неопределено)
	
	Если СписокОшибокОбщий <> Неопределено Тогда
		СписокОшибокОбщий.Добавить(ТекстОшибки);
	КонецЕсли;
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка);
	#Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Ссылка);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМагазин()

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь.Подразделение) Тогда
		Магазин = ПолучитьМагазинПоПодразделению(ТекущийПользователь.Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Магазин) Тогда
		Элементы.Магазин.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМагазинПоПодразделению(Подразделение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Подразделение = &Подразделение
		|	И НЕ Склады.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СоздатьТаблицуДанныхТСДПоСтроке(ТекстДанных)
	
	ДанныеТСД.Очистить();
	
	ТекстДанных = СокрЛ(ТекстДанных);
	
	МассивСтрок								= СтрРазделить(ТекстДанных, Символы.ПС, Ложь);
	ТекущийШтрихкодКоробаЯчейки				= "";
	ТекущийТипШтрихкодаСтрокой				= "";
	ЕстьНоменклатура 	= Ложь;
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		МассивСтроковыхПараметров 			= СтрРазделить(Строка, ",");
		
		Если МассивСтроковыхПараметров.Количество() <> 2 Тогда
			Шаблон							= НСтр("ru='Не удалось разбить на данные строку: %1'");
			Сообщение						= СтрШаблон(Шаблон, Строка);
			ДобавитьОшибкуВЛог(СписокОшибокОбщий, Сообщение);
			Продолжить;
		КонецЕсли;
		
		ТипШтрихкодаСтрокой = ОбработатьПорциюДанных(МассивСтроковыхПараметров[0], МассивСтроковыхПараметров[1],
			ТекущийШтрихкодКоробаЯчейки, ЕстьНоменклатура, ТекущийТипШтрихкодаСтрокой);
		
	КонецЦикла;
	
	Если ТипШтрихкодаСтрокой <> "Номенклатура" И ТекущийШтрихкодКоробаЯчейки <> "" Тогда
		// Добавим данные в случае, если последняя строк не являлась номенклатурой
		ДобавитьСтрокуДанныхТСД(ТекущийШтрихкодКоробаЯчейки, ТекущийТипШтрихкодаСтрокой);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТаблицуДанныхТСДПоМассиву(Данные)
	
	ДанныеТСД.Очистить();
	
	ТекущийШтрихкодКоробаЯчейки				= "";
	ТекущийТипШтрихкодаСтрокой				= "";
	ЕстьНоменклатура 	= Ложь;
	
	Для Каждого Строка Из Данные Цикл
		
		ТипШтрихкодаСтрокой = ОбработатьПорциюДанных(Строка.Штрихкод, Строка.Количество,
			ТекущийШтрихкодКоробаЯчейки, ЕстьНоменклатура, ТекущийТипШтрихкодаСтрокой);
		
	КонецЦикла;
	
	Если ТипШтрихкодаСтрокой <> "Номенклатура" И ТекущийШтрихкодКоробаЯчейки <> "" Тогда
		// Добавим данные в случае, если последняя строк не являлась номенклатурой
		ДобавитьСтрокуДанныхТСД(ТекущийШтрихкодКоробаЯчейки, ТекущийТипШтрихкодаСтрокой);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьПорциюДанных(Штрихкод, Количество, ТекущийШтрихкодКоробаЯчейки, ЕстьНоменклатура, ТекущийТипШтрихкодаСтрокой)
	
	ТипШтрихкодаСтрокой					= ПолучитьТипШтрихкода(Штрихкод);
	Если Не ЗначениеЗаполнено(ТипШтрихкодаСтрокой) Тогда
		Возврат ТипШтрихкодаСтрокой;
	КонецЕсли;
	
	Если ТипШтрихкодаСтрокой <> "Номенклатура" И ТекущийШтрихкодКоробаЯчейки <> Штрихкод Тогда
		Если ТекущийШтрихкодКоробаЯчейки <> "" И Не ЕстьНоменклатура Тогда
			// Если для короба или ячейки нет номенклатуры, то добавим эти данные без номенклатуры
			ДобавитьСтрокуДанныхТСД(ТекущийШтрихкодКоробаЯчейки, ТекущийТипШтрихкодаСтрокой);
		КонецЕсли;
		ТекущийШтрихкодКоробаЯчейки 				= Штрихкод;
		ТекущийТипШтрихкодаСтрокой					= ТипШтрихкодаСтрокой;
		ЕстьНоменклатура 							= Ложь;
	КонецЕсли;
	
	Если ТипШтрихкодаСтрокой = "Номенклатура" Тогда
		СтрокаДанныеТСД = ДобавитьСтрокуДанныхТСД(ТекущийШтрихкодКоробаЯчейки, ТекущийТипШтрихкодаСтрокой);
		Если СтрокаДанныеТСД <> Неопределено Тогда
			СтрокаДанныеТСД.ШтрихкодТовара			= Штрихкод;
			СтрокаДанныеТСД.Количество 				= Количество;
			ЕстьНоменклатура 						= Истина;
		Иначе
			ОбработатьОшибкуТоварБезКороба(Штрихкод);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипШтрихкодаСтрокой;
	
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуДанныхТСД(ТекущийШтрихкодКоробаЯчейки, ТекущийТипШтрихкодаСтрокой)
	
	Если ТекущийТипШтрихкодаСтрокой = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаДанныеТСД = ДанныеТСД.Добавить();
	СтрокаДанныеТСД.ШтрихкодКоробаЯчейки	= ТекущийШтрихкодКоробаЯчейки;
	СтрокаДанныеТСД.ЭтоКороб				= (ТекущийТипШтрихкодаСтрокой = "Короб");
	
	Возврат СтрокаДанныеТСД;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТипШтрихкода(Штрихкод)
	
	ДлинаШтрихкода				= СтрДлина(Штрихкод);
	Если ДлинаШтрихкода = 32
		// << 05.05.2023 Федоров Д.Е., КРОК, JIRA№A2105505-955
		// Данные по коробу могут поступать в 78-ричном формате
		ИЛИ ДлинаШтрихкода = 21 ИЛИ ДлинаШтрихкода = 20
		// >> 12.09.2023 Фомичев А.Е., КРОК, JIRA№A2105505-955
		ИЛИ ДлинаШтрихкода = 36 
		// << 12.09.2023 Фомичев А.Е., КРОК, JIRA№A2105505-2249  
		//тип штрихкода сформированный в WMS
		ИЛИ ДлинаШтрихкода = 10 Тогда
		// >> 05.05.2023 Федоров Д.Е., КРОК, JIRA№A2105505-2249
		ТекущийТипШтрихКода 		= "Короб";
	ИначеЕсли ДлинаШтрихкода = 8 Тогда
		ТекущийТипШтрихКода 		= "Ячейка";
	ИначеЕсли ДлинаШтрихкода = 13 Тогда
		ТекущийТипШтрихКода 		= "Номенклатура";
	Иначе
		ТекущийТипШтрихКода			= "";
		Шаблон					= НСтр("ru='Не удалось определить тип штрикхода по строке: %1'");
		Сообщение				= СтрШаблон(Шаблон, Штрихкод);
		ДобавитьОшибкуВЛог(СписокОшибокОбщий, Сообщение);
	КонецЕсли;
	
	Возврат ТекущийТипШтрихКода;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОшибкуТоварБезКороба(Штрихкод)
	
	Шаблон = НСтр("ru='Для штрихкода товара [%1] не отсканирован штрихкод короба.
		|Рабочее место позволяет оприходовать товар только с использованием коробов'");
	Сообщение	= СтрШаблон(Шаблон, Штрихкод);
	ДобавитьОшибкуВЛог(СписокОшибокОбщий, Сообщение);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаНаНаличиеЯчеек()
	
	ПроверкаПройденаБезОшибок = Истина;
	МассивШтрихкодовЯчеек = Новый Массив;
	Для Каждого Строка Из ДанныеТСД Цикл
		Если Не Строка.ЭтоКороб Тогда
			Если МассивШтрихкодовЯчеек.Найти(Строка.ШтрихкодКоробаЯчейки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Шаблон		
			= НСтр("ru='[%1] не является штрихкодом товара или короба. Отсканируйте штрихкоды только коробов или коробов и товаров в них'");
			Сообщение	= СтрШаблон(Шаблон, Строка.ШтрихкодКоробаЯчейки);
			ДобавитьОшибкуВЛог(СписокОшибокОбщий, Сообщение);
			МассивШтрихкодовЯчеек.Добавить(Строка.ШтрихкодКоробаЯчейки);
			ПроверкаПройденаБезОшибок = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Удалим строки, которые не удалось идентифицировать, как короб или товар
	Для Каждого ШтрикходЯчейки Из МассивШтрихкодовЯчеек Цикл
		ПараметрыПоиска = Новый Структура();
		ПараметрыПоиска.Вставить("ШтрихкодКоробаЯчейки", ШтрикходЯчейки);
		МассивСтрокДляУдаления = ДанныеТСД.НайтиСтроки(ПараметрыПоиска);
		Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
			ДанныеТСД.Удалить(ДанныеТСД.Индекс(СтрокаДляУдаления));
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПроверкаПройденаБезОшибок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПринимаемыеКоробаИТовар()
	
	ПринимаемыеКоробаИТовар.Очистить();
	
	// Заполним данные для формирования соответсвий данных одним запросом
	МассивГУИДовЛистов = Новый Массив;
	МассивШтрихкодовНоменклатуры = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеТСД Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ШтрихкодКоробаЯчейки)
			И МассивГУИДовЛистов.Найти(СтрокаДанных.ШтрихкодКоробаЯчейки) = Неопределено Тогда
			МассивГУИДовЛистов.Добавить(СтрокаДанных.ШтрихкодКоробаЯчейки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.ШтрихкодТовара)
			И МассивШтрихкодовНоменклатуры.Найти(СтрокаДанных.ШтрихкодТовара) = Неопределено Тогда
			МассивШтрихкодовНоменклатуры.Добавить(СтрокаДанных.ШтрихкодТовара);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеГУИДовЛистов = КР_РаботаСТСД.ПолучитьСоответствиеГУИДовУпаковочнымЛистам(МассивГУИДовЛистов);
	СоответствиеШтрихкодовНоменклатуры = КР_РаботаСТСД.ПолучитьСоответствиеШтрихкодовНоменклатуры(МассивШтрихкодовНоменклатуры);
	
	Для Каждого СтрокаДанных Из ДанныеТСД Цикл
		Короб = СоответствиеГУИДовЛистов.Получить(СтрокаДанных.ШтрихкодКоробаЯчейки);
		Если Короб = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДанныхНоменклатуры = СоответствиеШтрихкодовНоменклатуры.Получить(СтрокаДанных.ШтрихкодТовара);
		Если СтруктураДанныхНоменклатуры = Неопределено Тогда
			Если СтрокаДанных.ШтрихкодТовара = "" Тогда
				НоваяСтрока 					= ПринимаемыеКоробаИТовар.Добавить();
				НоваяСтрока.Короб 				= Короб;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		НоваяСтрока 					= ПринимаемыеКоробаИТовар.Добавить();
		НоваяСтрока.Короб 				= Короб;
		НоваяСтрока.Принято		 		= СтрокаДанных.Количество;
		НоваяСтрока.Номенклатура		= СтруктураДанныхНоменклатуры.Номенклатура;
		НоваяСтрока.Характеристика		= СтруктураДанныхНоменклатуры.Характеристика;
	КонецЦикла;
	
	// << 03.06.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-1730
	ТЗПринимаемыеКоробаИТовар = ПринимаемыеКоробаИТовар.Выгрузить();
	ТЗПринимаемыеКоробаИТовар.Свернуть("Накладная, Короб, Номенклатура, Характеристика, ОжидаемоеДействие",
		"Отгружено, Принято");
	ПринимаемыеКоробаИТовар.Загрузить(ТЗПринимаемыеКоробаИТовар);
	// >> 03.06.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-1730
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПоискКоробовСЗавершеннойПриемкой(МассивКоробов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПроверкаПоискКоробовСЗавершеннойПриемкой();
	Запрос.УстановитьПараметр("МассивКоробов", МассивКоробов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Шаблон = НСтр("ru='Короб ""%1"" относится к накладной %2, приемка товаров по которой завершена %3. Создание документов невозможно'");
		Сообщение = СтрШаблон(Шаблон, Выборка.Короб, Выборка.Накладная, Выборка.ДатаПотоварнойПриемки);
		ОбщегоНазначения.СообщитьПользователю(Сообщение, Выборка.Накладная);
		
		Если НакладныеСЗавершеннойПриемкой.НайтиПоЗначению(Выборка.Накладная) = Неопределено Тогда
			НакладныеСЗавершеннойПриемкой.Добавить(Выборка.Накладная);
		КонецЕсли;
		Если КоробаСОшибками.НайтиПоЗначению(Выборка.Короб) = Неопределено Тогда
			КоробаСОшибками.Добавить(Выборка.Короб);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Функция ПроверкаПоискКоробовСОтраженнойПотоварнойПриемкой(МассивКоробов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТоварыКПоступлению.Регистратор КАК Документ.ОтборРазмещениеТоваров).КР_Короб КАК Короб,
	|	ТоварыКПоступлению.Регистратор КАК ОтборРазмещениеТоваров
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.Регистратор ССЫЛКА Документ.ОтборРазмещениеТоваров
	|	И ВЫРАЗИТЬ(ТоварыКПоступлению.Регистратор КАК Документ.ОтборРазмещениеТоваров).КР_Короб В (&МассивКоробов)
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТоварыКПоступлению.КОформлениюОрдеров <> 0
	|	И НЕ ТоварыКПоступлению.ДокументПоступления В (&НакладныеСЗавершеннойПриемкой)";
	
	Запрос.УстановитьПараметр("НакладныеСЗавершеннойПриемкой", НакладныеСЗавершеннойПриемкой);
	Запрос.УстановитьПараметр("МассивКоробов", МассивКоробов);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Шаблон = НСтр("ru='Приемка товаров в коробе %1 ранее уже отражена в системе документом %2.
			|Для изменения документа обратитесь к пользователю с расширенными правами (центральный офис)'");
		Сообщение = СтрШаблон(Шаблон, Выборка.Короб, Выборка.ОтборРазмещениеТоваров);
		ДобавитьОшибкуВЛог(СписокОшибокОбщий, Сообщение, Выборка.ОтборРазмещениеТоваров);
		
		Если КоробаСОшибками.НайтиПоЗначению(Выборка.Короб) = Неопределено Тогда
			КоробаСОшибками.Добавить(Выборка.Короб);
		КонецЕсли;

	КонецЦикла;
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Функция ПроверкаПоискРанееПринятыхКоробовБезДанныхОТоваре(МассивКоробовБезТовара)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(КР_КоробаКПоступлению.Регистратор КАК Документ.ОтборРазмещениеТоваров).КР_Короб КАК Короб,
	|	КР_КоробаКПоступлению.Регистратор КАК ОтборРазмещениеТоваров
	|ИЗ
	|	РегистрНакопления.КР_КоробаКПоступлению КАК КР_КоробаКПоступлению
	|ГДЕ
	|	КР_КоробаКПоступлению.Регистратор ССЫЛКА Документ.ОтборРазмещениеТоваров
	|	И КР_КоробаКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ВЫРАЗИТЬ(КР_КоробаКПоступлению.Регистратор КАК Документ.ОтборРазмещениеТоваров).КР_Короб В (&МассивКоробовБезТовара)
	|	И ВЫРАЗИТЬ(КР_КоробаКПоступлению.Регистратор КАК Документ.ОтборРазмещениеТоваров).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.КР_ПринятКороб)
	|	И НЕ КР_КоробаКПоступлению.ДокументПоступления В (&НакладныеСЗавершеннойПриемкой)";
	
	Запрос.УстановитьПараметр("НакладныеСЗавершеннойПриемкой", 	НакладныеСЗавершеннойПриемкой);
	Запрос.УстановитьПараметр("МассивКоробовБезТовара", 		МассивКоробовБезТовара);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Шаблон = НСтр("ru='Товар в коробе %1 не отсканирован. Приемка самого короба отражена ранее документом %2.
			|Отсканируйте товар в коробе'");
		Сообщение = СтрШаблон(Шаблон, Выборка.Короб, Выборка.ОтборРазмещениеТоваров);
		ДобавитьОшибкуВЛог(СписокОшибокОбщий, Сообщение, Выборка.ОтборРазмещениеТоваров);
		
		// << 05.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1739
		// Данная ошибка является информационной. Не будем добавлять короб в Список "КоробаСОшибками".
		//Если КоробаСОшибками.НайтиПоЗначению(Выборка.Короб) = Неопределено Тогда
		//	КоробаСОшибками.Добавить(Выборка.Короб);
		//КонецЕсли;
		// >> 05.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1739
		
	КонецЦикла;
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Процедура СформироватьОжидаемыеПоступленияКоробов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСформироватьОжидаемыеПоступленияКоробов();
	Запрос.УстановитьПараметр("НакладныеСЗавершеннойПриемкой", 	НакладныеСЗавершеннойПриемкой);
	Запрос.УстановитьПараметр("Склад", 							Магазин);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоСкладу", 		ЗначениеЗаполнено(Магазин));
	Запрос.УстановитьПараметр("ПринимаемыеКоробаИТовар", 		ПринимаемыеКоробаИТовар.Выгрузить());
	Запрос.УстановитьПараметр("КоробаСОшибками", 				КоробаСОшибками);

	РезультатЗапроса = Запрос.Выполнить();
	
	Дерево = РеквизитФормыВЗначение("ОсновноеДерево");
	Дерево.Строки.Очистить();
	
	ЗаполнитьСтрокиДерева(Дерево, РезультатЗапроса);
	
	ЗначениеВРеквизитФормы(Дерево, "ОсновноеДерево");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДерева(Дерево, РезультатЗапроса)
	
	ВыборкаДействие = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДействие.Следующий() Цикл
		
		СтрокаДействие 								= Дерево.Строки.Добавить();
		СтрокаДействие.ОжидаемоеДействие 			= ВыборкаДействие.ОжидаемоеДействие;
		СтрокаДействие.ЭтоОжидаемоеДействие 		= Истина;
		СтрокаДействие.ПредставлениеПервое			= ВыборкаДействие.ОжидаемоеДействие;
		
		ВыборкаНакладная = ВыборкаДействие.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНакладная.Следующий() Цикл
			
			ПустаяНакладная = Не ЗначениеЗаполнено(ВыборкаНакладная.Накладная);
			Если Не ПустаяНакладная Тогда
				// Разобьем ветку дерева по пустой накладной на разные,
				// чтобы была возможность выбора накладной для каждого из коробов
				СтрокаНакладная = ДобавитьСтрокуНакладной(Дерево, ВыборкаНакладная, СтрокаДействие);
			КонецЕсли;
			
			ВыборкаКороб = ВыборкаНакладная.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКороб.Следующий() Цикл
				
				ЗаполнитьНижниеСтрокиДерева(Дерево, ВыборкаКороб, ПустаяНакладная, СтрокаНакладная, СтрокаДействие);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНижниеСтрокиДерева(Дерево, ВыборкаКороб, ПустаяНакладная, СтрокаНакладная, СтрокаДействие)

	Если ПустаяНакладная Тогда
		СтрокаНакладная = ДобавитьСтрокуНакладной(Дерево, Неопределено, СтрокаДействие);
	КонецЕсли;
	
	СтрокаКороб 							= СтрокаНакладная.Строки.Добавить();
	СтрокаКороб.Короб 						= ВыборкаКороб.Короб;
	СтрокаКороб.ЭтоСтрокаКороб 				= Истина;
	// << 18.05.2023, Федоров Д.Е., КРОК, Jira№A2105505-1664
	СтрокаКороб.ШтрихкодКороба				= ВыборкаКороб.ШтрихкодКороба;
	// >> 18.05.2023, Федоров Д.Е., КРОК, Jira№A2105505-1664
	СтрокаКороб.ПредставлениеПервое			= СтрокаКороб.Короб;
	СтрокаКороб.ПредставлениеВторое			= СтрокаКороб.ШтрихкодКороба;
	
	ВыборкаНоменклатура = ВыборкаКороб.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНоменклатура = СтрокаКороб.Строки.Добавить();
		СтрокаНоменклатура.Номенклатура 			= ВыборкаНоменклатура.Номенклатура;
		СтрокаНоменклатура.ЭтоСтрокаНоменклатура 	= Истина;
		СтрокаНоменклатура.Артикул					= ВыборкаНоменклатура.Артикул;
		СтрокаНоменклатура.ПредставлениеПервое		= СтрокаНоменклатура.Номенклатура;
		СтрокаНоменклатура.ПредставлениеВторое		= СтрокаНоменклатура.Артикул;
		
		ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаДанные = СтрокаНоменклатура.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанные, ВыборкаДетальныеЗаписи, , "Накладная, Короб, Номенклатура");
			СтрокаДанные.ПредставлениеПервое		= СтрокаДанные.Характеристика;
			СтрокаДанные.ПредставлениеВторое		= СтрокаДанные.ШтрихкодНоменклатуры;
			СтрокаДанные.ЭтоСтрокаХарактеристика	= Истина;
			
			СтрокаНоменклатура.Принято		= СтрокаНоменклатура.Принято + СтрокаДанные.Принято;
			СтрокаНоменклатура.Отгружено	= СтрокаНоменклатура.Отгружено + СтрокаДанные.Отгружено;
			СтрокаНоменклатура.Отклонение	= СтрокаНоменклатура.Принято - СтрокаНоменклатура.Отгружено;
			
			Если СтрокаДанные.Принято > 0 Тогда
				СтрокаКороб.Принято = 1;
			КонецЕсли;
			Если СтрокаДанные.Отгружено > 0 Тогда
				СтрокаКороб.Отгружено = 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПринятоДляКороба(СтрокаКороб, СтрокаНакладная);
	СтрокаКороб.Отклонение = СтрокаКороб.Принято - СтрокаКороб.Отгружено;
	
	// Вычислим итоги уровня "Строка действие", как сумму уровня коробов
	СтрокаДействие.Отгружено 	= СтрокаДействие.Отгружено		+ СтрокаКороб.Отгружено;
	СтрокаДействие.Принято 		= СтрокаДействие.Принято		+ СтрокаКороб.Принято;
	СтрокаДействие.Отклонение 	= СтрокаДействие.Принято		- СтрокаДействие.Отгружено;
	
	СтрокаНакладная.Отгружено 	= СтрокаНакладная.Отгружено		+ СтрокаКороб.Отгружено;
	СтрокаНакладная.Принято 	= СтрокаНакладная.Принято		+ СтрокаКороб.Принято;
	СтрокаНакладная.Отклонение	= СтрокаНакладная.Принято		- СтрокаНакладная.Отгружено;

КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуНакладной(Дерево, ВыборкаНакладная, СтрокаДействие)
	
	СтрокаНакладная 					= СтрокаДействие.Строки.Добавить();
	СтрокаНакладная.ЭтоСтрокаНакладной 	= Истина;
	Если ВыборкаНакладная = Неопределено Тогда
		СтрокаНакладная.Накладная = Документы.ПеремещениеТоваров.ПустаяСсылка();
	Иначе
		СтрокаНакладная.Накладная 					= ВыборкаНакладная.Накладная;
		СтрокаНакладная.ПредставлениеПервое			= СтрокаНакладная.Накладная;
		ШаблонВторогоПредставления 					= "%1 / %2";
		СтрокаНакладная.ПредставлениеВторое			= СтрШаблон(ШаблонВторогоПредставления,
			ВыборкаНакладная.СкладОтправитель, ВыборкаНакладная.СкладПолучатель);
	КонецЕсли;
	
	Возврат СтрокаНакладная;
	
КонецФункции

&НаСервере
Функция ПолучитьШтрихкодГУИДКороба(УпаковочныйЛист)

	Если Не ЗначениеЗаполнено(УпаковочныйЛист) Тогда
		Возврат "";
	КонецЕсли;
	
	УникальныйИдентификатор36 = УпаковочныйЛист.УникальныйИдентификатор();
	УникальныйИдентификатор78 = КР_РаботаСТСД.ПреобразоватьGUID_78(УникальныйИдентификатор36);
	Возврат УникальныйИдентификатор78;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьДерево()
	
	ЭлементыДерева = ОсновноеДерево.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ОсновноеДерево.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(КоллекцияЭлементов)
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		
		ВложенныеЭлементыКоллекции = ЭлементКоллекции.ПолучитьЭлементы();
		Если ВложенныеЭлементыКоллекции.Количество() > 0 Тогда
			СвернутьДерево(ВложенныеЭлементыКоллекции);
		КонецЕсли;
		
		Элементы.ОсновноеДерево.Свернуть(ЭлементКоллекции.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПринятоДляКороба(СтрокаКороб, СтрокаНакладная)

	Если СтрокаКороб.Принято <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаНакладная.Родитель.ОжидаемоеДействие = 1 Тогда
		// Значит "Короб принят"
		СтрокаКороб.Принято = 1;
	Иначе
		// В случае, если короб был отсканирован, но без номенклатуры, установим принято = 1 на уровне короба
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Короб", 			СтрокаКороб.Короб);
		ПараметрыПоиска.Вставить("Номенклатура",	Справочники.Номенклатура.ПустаяСсылка());
		НайденныеСтроки = ПринимаемыеКоробаИТовар.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаКороб.Принято = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыбораНакладная(Значение, ДопПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные 						= Элементы.ОсновноеДерево.ТекущиеДанные;
	 
	ТекущиеДанные.Накладная 			= Значение;
	
	ТекущиеДанные.ЭтоНакладнаяСЗавершеннойПриемкой = ЭтоНакладнаяСЗавершеннойПриемкой(Значение, СписокОшибокОбщий);
	
	ТекущиеДанные.ПредставлениеПервое 	= ТекущиеДанные.Накладная;
	ШаблонВторогоПредставления 					= "%1 / %2";
	РеквизитыНакладной					= ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Накладная,
		"СкладОтправитель, СкладПолучатель");
	ТекущиеДанные.ПредставлениеВторое 	=  СтрШаблон(ШаблонВторогоПредставления,
			РеквизитыНакладной.СкладОтправитель, РеквизитыНакладной.СкладПолучатель);;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоНакладнаяСЗавершеннойПриемкой(Накладная, СписокОшибокОбщий)
	
	Если Не ЗначениеЗаполнено(Накладная) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КР_ПриемкаПеремещенийТоваров.Накладная КАК Накладная,
		|	КР_ПриемкаПеремещенийТоваров.ДатаПотоварнойПриемки КАК ДатаПотоварнойПриемки
		|ИЗ
		|	РегистрСведений.КР_ПриемкаПеремещенийТоваров КАК КР_ПриемкаПеремещенийТоваров
		|ГДЕ
		|	КР_ПриемкаПеремещенийТоваров.Накладная = &Накладная
		|	И КР_ПриемкаПеремещенийТоваров.ДатаПотоварнойПриемки <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("Накладная", Накладная);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Шаблон = НСтр("ru='Потоварная приемка по %1 завершена %2. Обратитесь к пользователю с расширенными правами (центральный офис)
			|или выберите другую накладную'");
		Сообщение = СтрШаблон(Шаблон, ВыборкаДетальныеЗаписи.Накладная, ВыборкаДетальныеЗаписи.ДатаПотоварнойПриемки);
		ДобавитьОшибкуВЛог(СписокОшибокОбщий, Сообщение, ВыборкаДетальныеЗаписи.Накладная);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СоздатьДокументыНаСервере()
	
	ДеревоОсновноеДерево = РеквизитФормыВЗначение("ОсновноеДерево");
	ОбходДереваДетально(ДеревоОсновноеДерево);

КонецПроцедуры

&НаСервере
Процедура ОбходДереваДетально(ДеревоОсновноеДерево)
	
	Для Каждого СтрокаДерева Из ДеревоОсновноеДерево.Строки Цикл
		
		Если СтрокаДерева.ЭтоОжидаемоеДействие Тогда
			ОбходДереваДетально(СтрокаДерева);
		КонецЕсли;
		
		Если СтрокаДерева.ЭтоСтрокаНакладной Тогда
			Если Не ЗначениеЗаполнено(СтрокаДерева.Накладная) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаДерева.ЭтоНакладнаяСЗавершеннойПриемкой Тогда
				ЭтоНакладнаяСЗавершеннойПриемкой = ЭтоНакладнаяСЗавершеннойПриемкой(СтрокаДерева.Накладная, СписокОшибокОбщий);
				Если ЭтоНакладнаяСЗавершеннойПриемкой Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ОбходДереваДетально(СтрокаДерева);
		КонецЕсли;
		
		Если СтрокаДерева.ЭтоСтрокаКороб Тогда
			
			Если СтрокаДерева.Принято <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Накладная", 	СтрокаДерева.Родитель.Накладная);
			СтруктураДанных.Вставить("Короб", 		СтрокаДерева.Короб);
			ОтборРазмещениеТоваров = ПолучитьОтборРазмещениеТоваров(СтруктураДанных);
			
			ОбработкаДокументовОтборРазмещениеТоваров(ОтборРазмещениеТоваров, СтрокаДерева, СтруктураДанных);

		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаДокументовОтборРазмещениеТоваров(ОтборРазмещениеТоваров, СтрокаДерева, СтруктураДанных)
	
	Если ЗначениеЗаполнено(ОтборРазмещениеТоваров) Тогда
		ОтборРазмещениеТоваровОбъект = ОтборРазмещениеТоваров.ПолучитьОбъект();
	Иначе
		ОтборРазмещениеТоваровОбъект = СоздатьОтборРазмещениеТоваров(СтрокаДерева, СтруктураДанных);
	КонецЕсли;
	
	ДозаполнитьДанныеОтборРазмещениеТоваров(ОтборРазмещениеТоваровОбъект, СтрокаДерева);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтборРазмещениеТоваров(Данные)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.КР_КоробаКПоступлению КАК Т
	|ГДЕ
	|	Т.Регистратор ССЫЛКА Документ.ОтборРазмещениеТоваров
	|	И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Т.Склад = &Магазин
	|	И ВЫРАЗИТЬ(Т.Регистратор КАК Документ.ОтборРазмещениеТоваров).КР_Короб = &КР_Короб
	|	И ВЫРАЗИТЬ(Т.Регистратор КАК Документ.ОтборРазмещениеТоваров).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.КР_ПринятКороб)
	|	И ВЫРАЗИТЬ(Т.Регистратор КАК Документ.ОтборРазмещениеТоваров).Проведен";
	
	Запрос.УстановитьПараметр("КР_Короб", 	Данные.Короб);
	Запрос.УстановитьПараметр("Магазин", 	Магазин);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.ОтборРазмещениеТоваров.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	Возврат ВыборкаДетальныеЗаписи.Регистратор;
	
КонецФункции

&НаСервере
Процедура ДозаполнитьДанныеОтборРазмещениеТоваров(Документ, СтрокаДерева)
	
	ЕстьПринятаяНоменклатура 				= Ложь;
	ЗаполнитьТабличнуюЧастьТоварыРазмещение(Документ, СтрокаДерева, ЕстьПринятаяНоменклатура);
	Если ЕстьПринятаяНоменклатура Тогда
		Документ.Статус 					= Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ПринятТовар;
	ИначеЕсли ЗначениеЗаполнено(Документ.Ссылка) Тогда
		// Если документ создан и по нему нет новой принятой номенклатуры, обработка не требуется
		Возврат;
	Иначе
		Документ.Статус 					= Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ПринятКороб;
	КонецЕсли;
	ПровестиЗаписатьДокумент(Документ);
	
КонецПроцедуры

&НаСервере
Функция СоздатьОтборРазмещениеТоваров(СтрокаДерева, Данные)
	
	СпрЯчейки = Справочники.СкладскиеЯчейки;
	
	Документ 								= Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	Документ.Дата 							= ТекущаяДатаСеанса();
	Документ.Распоряжение 					= Данные.Накладная;
	Документ.КР_ИспользоватьКороб			= Истина;
	Документ.КР_Короб						= Данные.Короб;
	Документ.ВидОперации					= Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
	Документ.Склад							= Магазин;
	Документ.Помещение						= Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(Магазин);
	Документ.ЗонаПриемки					= СпрЯчейки.КР_СкладскаяЯчейкаПриемкиПоУмолчанию(Магазин, Документ.Помещение);
	Документ.Комментарий					= НСтр("ru='Создано обработкой ""Оприходование межскладских перемещений товаров с ТСД""'");
	Документ.Ответственный					= Пользователи.ТекущийПользователь();
	
	Возврат Документ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьТоварыРазмещение(Документ, СтрокаДерева, ЕстьПринятаяНоменклатура)
	
	Документ.ТоварыРазмещение.Очистить();
	Если СтрокаДерева = Неопределено Тогда
		// Значит обрабатывается короб без номенклатуры
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДереваНоменклатура Из СтрокаДерева.Строки Цикл
		
		ТекущаяНоменклатура = СтрокаДереваНоменклатура.Номенклатура;
		Для Каждого СтрокаДереваХарактеристика Из СтрокаДереваНоменклатура.Строки Цикл
			
			Если СтрокаДереваХарактеристика.Принято = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 								= Документ.ТоварыРазмещение.Добавить();
			НоваяСтрока.Номенклатура 					= ТекущаяНоменклатура;
			НоваяСтрока.Характеристика					= СтрокаДереваХарактеристика.Характеристика;
			НоваяСтрока.КоличествоРазмещено 			= СтрокаДереваХарактеристика.Принято;
			НоваяСтрока.КоличествоУпаковокРазмещено 	= СтрокаДереваХарактеристика.Принято;
			НоваяСтрока.Количество 						= СтрокаДереваХарактеристика.Принято;
			НоваяСтрока.КоличествоУпаковок 				= СтрокаДереваХарактеристика.Принято;
			Если СтрокаДереваХарактеристика.Принято <> 0 Тогда
				ЕстьПринятаяНоменклатура = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ЕстьПринятаяНоменклатура Тогда
		// В случае, если принятой номенклатуры нет, табичная часть должна быть очищена
		Документ.ТоварыРазмещение.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПровестиЗаписатьДокумент(Документ)
	
	ПредставлениеДокумента = ?(Документ.Ссылка.Пустая(),
		"Отбор (размещение) товаров", Документ.Ссылка);
	
	ОшибкаПроведения = Ложь;
	ОшибкаЗаполнения = Не Документ.ПроверитьЗаполнение();
	Если ОшибкаЗаполнения Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка проверки заполнения документа ""%1"" по коробу ""%2""'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПредставлениеДокумента, Документ.КР_Короб);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ.Ссылка, , , ОшибкаПроведения);
		Возврат;
		
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Попытка
		Документ.Записать(РежимЗаписи);
		ДобавитьСтрокуСозданнныеДокументы(Документ);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка проведения документа ""%1"" по коробу ""%2""
		|По причине: %3'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПредставлениеДокумента, Документ.КР_Короб,
			ПодробноеПредставлениеОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ.Ссылка, , , ОшибкаПроведения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуСозданнныеДокументы(Документ)
	// << 14.08.2023 Фомичев А.Е., КРОК, JiraA2105505-2050
	НастройкаОтбора = Новый Структура("Документ");
	НастройкаОтбора.Вставить("Документ",Документ.Ссылка); 
	МассивДокументов = СозданныеДокументы.НайтиСтроки(НастройкаОтбора);
	Если МассивДокументов.Количество()>0 Тогда
		НайденныйДокумент = МассивДокументов[0];
		НайденныйДокумент.Статус = Документ.Статус;   
		// << 09.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2452 
		Строка = НайденныйДокумент;
		// >> 09.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2452
	Иначе	
		// >> 14.08.2023 Фомичев А.Е., КРОК, JiraA2105505-2050
		Строка 							= СозданныеДокументы.Добавить();
		Строка.Документ 				= Документ.Ссылка;
		Строка.Статус 					= Документ.Статус;
		Строка.Распоряжение 			= Документ.Распоряжение;
		Строка.Отправитель 				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Распоряжение, "СкладОтправитель");
		Строка.Короб 					= Документ.КР_Короб;      
		// A2105505-2452
		Строка.Штрихкод 				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.КР_Короб, "КР_Штрихкод");   
		
	КонецЕсли;//A2105505-2050   
	
	// << 09.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2452 
	ДанныеСверкиКоличества = РасчитатьИзлишекНедостачу(Документ.Ссылка, Документ.КР_Короб); 
	Строка.Излишек = ДанныеСверкиКоличества.Излишек;
	Строка.Недостача = ДанныеСверкиКоличества.Недостача;
	// >> 09.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2452
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьПринятоПоКоробу(СтрокаКороба)

	СтрокиНоменклатурыКороба = СтрокаКороба.ПолучитьЭлементы();
	Для Каждого Строка Из СтрокиНоменклатурыКороба Цикл
		Если Строка.Принято > 0 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьПринятоДляДочернихСтрок(ТекСтрока)

	СтрокиНоменклатурыКороба = ТекСтрока.ПолучитьЭлементы();
	Для Каждого Строка Из СтрокиНоменклатурыКороба Цикл
		Строка.Принято 			= 0;
		Строка.Отклонение 		= Строка.Принято - Строка.Отгружено;
		ОчиститьПринятоДляДочернихСтрок(Строка);
	КонецЦикла;
	
КонецПроцедуры

// << 09.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2452 
&НаСервере
Функция РасчитатьИзлишекНедостачу(ОтборРазмещениеТоваров, УпаковочныйЛист)
	
	Запрос = Новый Запрос(ТекстЗапросаРасчитатьИзлишекНедостачу());  
	Запрос.УстановитьПараметр("ОтборРазмещениеТоваров", ОтборРазмещениеТоваров);
	Запрос.УстановитьПараметр("УпаковочныйЛист", УпаковочныйЛист);
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ДанныеСверкиКоличества = Новый Структура;
	ДанныеСверкиКоличества.Вставить("Излишек", ВыборкаДетальныеЗаписи.Излишек);
	ДанныеСверкиКоличества.Вставить("Недостача", ВыборкаДетальныеЗаписи.Недостача);

	Возврат ДанныеСверкиКоличества;
	
КонецФункции // >> 09.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2452

#Область Прочее

// --> Евлахов Игорь Николаевич (Начало) 02.04.2024
// Задача #3937
&НаСервереБезКонтекста
Функция ПолучитьДатыПотоварнойПриемки(МассивДокументов)   
			
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПриемкаПеремещенийТоваров.Накладная КАК Документ,
	               |	ПриемкаПеремещенийТоваров.ДатаПотоварнойПриемки КАК ДатаПотоварнойПриемки
	               |ИЗ
	               |	РегистрСведений.КР_ПриемкаПеремещенийТоваров КАК ПриемкаПеремещенийТоваров
	               |ГДЕ
	               |	ПриемкаПеремещенийТоваров.Накладная В(&Документы)";
	
	#КонецОбласти
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Документы", МассивДокументов);
	
	Результат 	= Запрос.Выполнить();
	Выборка 	= Результат.Выбрать();
	
	Данные = Новый Соответствие();
	
	Пока Выборка.Следующий() Цикл
		Данные.Вставить(Выборка.Документ, Выборка.ДатаПотоварнойПриемки);
	КонецЦикла;
	
	Возврат(Данные);
	
КонецФункции 
// <-- Евлахов Игорь Николаевич (Конец) 02.04.2024

// --> Евлахов Игорь Николаевич (Начало) 02.04.2024
// Задача #3937
&НаСервереБезКонтекста
Процедура УстановитьДатуПотоварнойПриемкиНаСервере(МассивДокументов) 
	
	ДатыПотоварнойПриемки = ПолучитьДатыПотоварнойПриемки(МассивДокументов);
	
	Для каждого ДокументСсылка Из МассивДокументов Цикл		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки       = Блокировка.Добавить(Метаданные.РегистрыСведений.КР_ПриемкаПеремещенийТоваров.ПолноеИмя());
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Накладная", ДокументСсылка);
			
			Блокировка.Заблокировать();
			
		    МенеджерЗаписи = РегистрыСведений.КР_ПриемкаПеремещенийТоваров.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Активность = Истина;
			МенеджерЗаписи.Накладная = ДокументСсылка;    
			
			// Если дата повторной приемки установлена то не меняем ее,
			// но производим запись в РС тем самым илициализируем код обновления акта
			ДатаПриемки = ДатыПотоварнойПриемки.Получить(ДокументСсылка);
			
			Если ДатаПриемки <> Неопределено И ЗначениеЗаполнено(ДатаПриемки) Тогда
				МенеджерЗаписи.ДатаПотоварнойПриемки = ДатаПриемки;			
			Иначе
				МенеджерЗаписи.ДатаПотоварнойПриемки = ТекущаяДатаСеанса();
			КонецЕсли;		
			
			МенеджерЗаписи.Записать();	
			
			ЗафиксироватьТранзакцию();			
		Исключение
			ОтменитьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать запись регистра по ссылке: %1 по причине:'");
			ТекстСообщения  = СтрШаблон(ШаблонСообщения, ДокументСсылка) + Символы.ПС 
							+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		    
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;	
	КонецЦикла;

КонецПроцедуры
// <-- Евлахов Игорь Николаевич (Конец) 02.04.2024

#КонецОбласти

#Область ТекстыЗапросов

&НаСервереБезКонтекста
Функция ТекстЗапросаСформироватьОжидаемыеПоступленияКоробов()
	
	Возврат
	"ВЫБРАТЬ
	|	КР_КоробаКПоступлениюОстатки.ДокументПоступления КАК ДокументПоступления,
	|	КР_КоробаКПоступлениюОстатки.Короб КАК Короб,
	|	ВЫБОР
	|		КОГДА КР_КоробаКПоступлениюОстатки.КОформлениюОрдеровОстаток > 0
	|			ТОГДА 0
	|		КОГДА КР_КоробаКПоступлениюОстатки.ПринимаетсяОстаток > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОжидаемоеДействие
	|ПОМЕСТИТЬ ОжидаемыеПоступленияКоробов
	|ИЗ
	|	РегистрНакопления.КР_КоробаКПоступлению.Остатки(
	|			,
	|			НЕ ДокументПоступления В (&НакладныеСЗавершеннойПриемкой)
	|				И НЕ Короб В (&КоробаСОшибками)
	|				И (НЕ &ИспользоватьОтборПоСкладу
	|					ИЛИ Склад = &Склад)) КАК КР_КоробаКПоступлениюОстатки
	|ГДЕ
	|	НЕ(КР_КоробаКПоступлениюОстатки.КОформлениюОрдеровОстаток <= 0
	|				И КР_КоробаКПоступлениюОстатки.ПринимаетсяОстаток <= 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Короб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОжидаемыеПоступленияКоробов.ДокументПоступления КАК Документ.ПеремещениеТоваров) КАК ДокументПоступления,
	|	ОжидаемыеПоступленияКоробов.Короб КАК Короб,
	|	ЕСТЬNULL(УпаковочныйЛистТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(УпаковочныйЛистТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(УпаковочныйЛистТовары.Количество, 0) КАК Отгружено,
	|	0 КАК Принято,
	|	ОжидаемыеПоступленияКоробов.ОжидаемоеДействие КАК ОжидаемоеДействие
	|ПОМЕСТИТЬ ОжидаемыеПоступленияКоробовСТоварами
	|ИЗ
	|	ОжидаемыеПоступленияКоробов КАК ОжидаемыеПоступленияКоробов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|		ПО ОжидаемыеПоступленияКоробов.Короб = УпаковочныйЛистТовары.Ссылка
	|			И (УпаковочныйЛистТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПринимаемыеКоробаИТовар.Накладная КАК ДокументПоступления,
	|	ПринимаемыеКоробаИТовар.Короб КАК Короб,
	|	ПринимаемыеКоробаИТовар.Номенклатура КАК Номенклатура,
	|	ПринимаемыеКоробаИТовар.Характеристика КАК Характеристика,
	|	ПринимаемыеКоробаИТовар.Отгружено КАК Отгружено,
	|	ПринимаемыеКоробаИТовар.Принято КАК Принято,
	|	ПринимаемыеКоробаИТовар.ОжидаемоеДействие КАК ОжидаемоеДействие
	|ПОМЕСТИТЬ ПринимаемыеКоробаИТоварБезДокументаПоступления
	|ИЗ
	|	&ПринимаемыеКоробаИТовар КАК ПринимаемыеКоробаИТовар
	|ГДЕ
	|	НЕ ПринимаемыеКоробаИТовар.Короб В (&КоробаСОшибками)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(ОжидаемыеПоступленияКоробов.ДокументПоступления, ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка))) КАК ДокументПоступления,
	|	МАКСИМУМ(ЕСТЬNULL(ОжидаемыеПоступленияКоробов.ОжидаемоеДействие, 0)) КАК ОжидаемоеДействие,
	|	ПринимаемыеКоробаИТоварБДП.Короб КАК Короб,
	|	ПринимаемыеКоробаИТоварБДП.Номенклатура КАК Номенклатура,
	|	ПринимаемыеКоробаИТоварБДП.Характеристика КАК Характеристика,
	|	ПринимаемыеКоробаИТоварБДП.Отгружено КАК Отгружено,
	|	ПринимаемыеКоробаИТоварБДП.Принято КАК Принято
	|ПОМЕСТИТЬ ПринимаемыеКоробаИТовар
	|ИЗ
	|	ПринимаемыеКоробаИТоварБезДокументаПоступления КАК ПринимаемыеКоробаИТоварБДП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОжидаемыеПоступленияКоробов КАК ОжидаемыеПоступленияКоробов
	|		ПО ПринимаемыеКоробаИТоварБДП.Короб = ОжидаемыеПоступленияКоробов.Короб
	|
	|СГРУППИРОВАТЬ ПО
	|	ПринимаемыеКоробаИТоварБДП.Короб,
	|	ПринимаемыеКоробаИТоварБДП.Номенклатура,
	|	ПринимаемыеКоробаИТоварБДП.Характеристика,
	|	ПринимаемыеКоробаИТоварБДП.Отгружено,
	|	ПринимаемыеКоробаИТоварБДП.Принято
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОжидаемыеПоступленияКоробовСТоварами.ДокументПоступления КАК ДокументПоступления,
	|	ОжидаемыеПоступленияКоробовСТоварами.Короб КАК Короб,
	|	ОжидаемыеПоступленияКоробовСТоварами.Номенклатура КАК Номенклатура,
	|	ОжидаемыеПоступленияКоробовСТоварами.Характеристика КАК Характеристика,
	|	ОжидаемыеПоступленияКоробовСТоварами.Отгружено КАК Отгружено,
	|	ОжидаемыеПоступленияКоробовСТоварами.Принято КАК Принято,
	|	ОжидаемыеПоступленияКоробовСТоварами.ОжидаемоеДействие КАК ОжидаемоеДействие
	|ПОМЕСТИТЬ ОтгруженоИПринято
	|ИЗ
	|	ОжидаемыеПоступленияКоробовСТоварами КАК ОжидаемыеПоступленияКоробовСТоварами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПринимаемыеКоробаИТовар.ДокументПоступления,
	|	ПринимаемыеКоробаИТовар.Короб,
	|	ПринимаемыеКоробаИТовар.Номенклатура,
	|	ПринимаемыеКоробаИТовар.Характеристика,
	|	ПринимаемыеКоробаИТовар.Отгружено,
	|	ПринимаемыеКоробаИТовар.Принято,
	|	ПринимаемыеКоробаИТовар.ОжидаемоеДействие
	|ИЗ
	|	ПринимаемыеКоробаИТовар КАК ПринимаемыеКоробаИТовар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтгруженоИПринято.ДокументПоступления) КАК ДокументПоступления,
	|	ОтгруженоИПринято.Короб КАК Короб,
	|	ОтгруженоИПринято.Номенклатура КАК Номенклатура,
	|	ОтгруженоИПринято.Характеристика КАК Характеристика,
	|	СУММА(ОтгруженоИПринято.Отгружено) КАК Отгружено,
	|	СУММА(ОтгруженоИПринято.Принято) КАК Принято,
	|	МАКСИМУМ(ОтгруженоИПринято.ОжидаемоеДействие) КАК ОжидаемоеДействие
	|ПОМЕСТИТЬ ПервичныйИтог
	|ИЗ
	|	ОтгруженоИПринято КАК ОтгруженоИПринято
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтгруженоИПринято.Короб,
	|	ОтгруженоИПринято.Номенклатура,
	|	ОтгруженоИПринято.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервичныйИтог.ДокументПоступления КАК ДокументПоступления,
	|	ПервичныйИтог.Короб КАК Короб,
	|	ПервичныйИтог.Номенклатура КАК Номенклатура,
	|	ПервичныйИтог.Характеристика КАК Характеристика,
	|	ПервичныйИтог.Отгружено КАК Отгружено,
	|	ПервичныйИтог.Принято КАК Принято,
	|	ПервичныйИтог.ОжидаемоеДействие КАК ОжидаемоеДействие,
	|	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ ИтогПередВыводом
	|ИЗ
	|	ПервичныйИтог КАК ПервичныйИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ПервичныйИтог.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ПервичныйИтог.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервичныйИтог.ДокументПоступления,
	|	ПервичныйИтог.Короб,
	|	ПервичныйИтог.Номенклатура,
	|	ПервичныйИтог.Характеристика,
	|	ПервичныйИтог.Отгружено,
	|	ПервичныйИтог.Принято,
	|	ПервичныйИтог.ОжидаемоеДействие
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИтогПередВыводом.ДокументПоступления КАК Документ.ПеремещениеТоваров) КАК Накладная,
	|	ВЫРАЗИТЬ(ИтогПередВыводом.ДокументПоступления КАК Документ.ПеремещениеТоваров).СкладОтправитель КАК СкладОтправитель,
	|	ВЫРАЗИТЬ(ИтогПередВыводом.ДокументПоступления КАК Документ.ПеремещениеТоваров).СкладПолучатель КАК СкладПолучатель,
	|	ИтогПередВыводом.Короб КАК Короб,
	// << 18.05.2023, Федоров Д.Е., КРОК, Jira№A2105505-1664
	|	ИтогПередВыводом.Короб.КР_Штрихкод КАК ШтрихкодКороба,
	// >> 18.05.2023, Федоров Д.Е., КРОК, Jira№A2105505-1664
	|	ИтогПередВыводом.Номенклатура КАК Номенклатура,
	|	ИтогПередВыводом.Номенклатура.Артикул КАК Артикул,
	|	ИтогПередВыводом.Характеристика КАК Характеристика,
	|	ИтогПередВыводом.Отгружено КАК Отгружено,
	|	ИтогПередВыводом.Принято КАК Принято,
	|	ИтогПередВыводом.Штрихкод КАК ШтрихкодНоменклатуры,
	|	ИтогПередВыводом.Принято - ИтогПередВыводом.Отгружено КАК Отклонение,
	|	ИтогПередВыводом.ОжидаемоеДействие КАК ОжидаемоеДействие
	|ИЗ
	|	ИтогПередВыводом КАК ИтогПередВыводом
	|ИТОГИ ПО
	|	ОжидаемоеДействие,
	|	Накладная,
	|	Короб,
	|	Номенклатура";
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаПроверкаПоискКоробовСЗавершеннойПриемкой()
	
	Возврат
	"ВЫБРАТЬ
	|	КР_ПриемкаПеремещенийТоваров.Накладная КАК Накладная,
	|	КР_ПриемкаПеремещенийТоваров.ДатаПотоварнойПриемки КАК ДатаПотоварнойПриемки
	|ПОМЕСТИТЬ НакладныеСЗавершеннойПриемкой
	|ИЗ
	|	РегистрСведений.КР_ПриемкаПеремещенийТоваров КАК КР_ПриемкаПеремещенийТоваров
	|ГДЕ
	|	КР_ПриемкаПеремещенийТоваров.ДатаПотоварнойПриемки <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Накладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КР_КоробаКПоступлениюОбороты.Короб КАК Короб,
	|	ВЫРАЗИТЬ(КР_КоробаКПоступлениюОбороты.ДокументПоступления КАК Документ.ПеремещениеТоваров) КАК Накладная
	|ПОМЕСТИТЬ КоробаКПоступлению
	|ИЗ
	|	РегистрНакопления.КР_КоробаКПоступлению.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ДокументПоступления В
	|					(ВЫБРАТЬ
	|						НакладныеСЗавершеннойПриемкой.Накладная КАК Накладная
	|					ИЗ
	|						НакладныеСЗавершеннойПриемкой КАК НакладныеСЗавершеннойПриемкой)
	|				И Короб В (&МассивКоробов)) КАК КР_КоробаКПоступлениюОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Накладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НакладныеСЗавершеннойПриемкой.Накладная КАК Накладная,
	|	НакладныеСЗавершеннойПриемкой.ДатаПотоварнойПриемки КАК ДатаПотоварнойПриемки,
	|	КоробаКПоступлению.Короб КАК Короб
	|ИЗ
	|	НакладныеСЗавершеннойПриемкой КАК НакладныеСЗавершеннойПриемкой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоробаКПоступлению КАК КоробаКПоступлению
	|		ПО НакладныеСЗавершеннойПриемкой.Накладная = КоробаКПоступлению.Накладная";

КонецФункции

// << 09.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2452
&НаСервереБезКонтекста
Функция ТекстЗапросаРасчитатьИзлишекНедостачу()     
	
	Возврат
	"ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.КоличествоРазмещено КАК Количество
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК Т
	|ГДЕ
	|	Т.Ссылка = &ОтборРазмещениеТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	-Т.Количество
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка = &УпаковочныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА СУММА(Т.Количество) > 0
	|			ТОГДА СУММА(Т.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Излишек,
	|	ВЫБОР
	|		КОГДА СУММА(Т.Количество) < 0
	|			ТОГДА -СУММА(Т.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Недостача
	|ПОМЕСТИТЬ ПономенклатурвыйРасчет
	|ИЗ
	|	ИсходныеДанные КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	Т.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(Т.Количество) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Т.Излишек) КАК Излишек,
	|	СУММА(Т.Недостача) КАК Недостача
	|ИЗ
	|	ПономенклатурвыйРасчет КАК Т";
	
КонецФункции // >> 09.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2452

#КонецОбласти

#КонецОбласти
