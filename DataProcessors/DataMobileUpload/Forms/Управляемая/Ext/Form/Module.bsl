
&НаКлиенте
Перем КоличествоАтрибутов;
&НаКлиенте
Перем ИДТСД;
&НаКлиенте
Перем ПодбираемыйТипДанных;
&НаКлиенте
Перем ТекущийЭлементТипаДанных;
&НаКлиенте
Перем ПредыдущийТипДанных;
&НаКлиенте
Перем ТипОбъектаКонфигурации;
&НаКлиенте
Перем КаталогFTPДоступен;
&НаКлиенте
Перем РП;

&НаКлиенте
Функция DM_ПолучитьРазделительПути()
	
	РазделительПути = "\";  //Windows
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	
	Если ЭтоLinuxКлиент Тогда
		РазделительПути = "/"; // Linux
	КонецЕсли;	
	
	Возврат РазделительПути;
	
КонецФункции

&НаКлиенте
Процедура лКаталогОбменаПриИзменении(Элемент,ПриОткрытии=Ложь)
	
    СписокТСД.Очистить();

	Если ИспользоватьFTP тогда
		КаталогFTPПриИзменении(ПриОткрытии);
	Иначе
		
		Если лКаталогОбмена<>"" тогда
			лКаталогОбмена=СокрЛП(лКаталогОбмена)+?(пРАВ(СокрЛП(лКаталогОбмена),1)=РП,"",РП); 
		КонецЕсли;	
		СписокТСД.Очистить();
		
		ПараметрыВыгрузки = Новый Структура();
		ПараметрыВыгрузки.Вставить("КаталогОбмена",лКаталогОбмена + "DataMobile" +?(пРАВ(СокрЛП(лКаталогОбмена + "DataMobile"),1)=РП,"",РП));
		
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачалоПоискаКаталоговОбмена_Завершение", ЭтаФорма, ПараметрыВыгрузки), лКаталогОбмена+"DataMobile","*");

	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура НачалоПоискаКаталоговОбмена_Завершение(НайденныеФайлы, ДопПараметры) Экспорт
	
	Если НайденныеФайлы.Количество()> 0 Тогда
		
		ДопПараметры.Вставить("МассивФайлов",НайденныеФайлы);
		ДопПараметры.Вставить("КоличествоФайлов",НайденныеФайлы.Количество());
		ДопПараметры.Вставить("ТекущийФайл",1);
		ДопПараметры.Вставить("ПорядковыйНомерТСД",1);
		ДопПараметры.Вставить("ТекущееИмяФайла",НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Имя);
		ДопПараметры.Вставить("ТекущийПутьФайла",НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Путь);
		ФайлТСД = НайденныеФайлы[ДопПараметры.ТекущийФайл-1];

		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоПроверкиЭтоКаталогКаталоговОбмена_Завершение",ЭтаФорма,ДопПараметры);
		ФайлТСД.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПроверкиЭтоКаталогКаталоговОбмена_Завершение(ЭтоКаталог, ДопПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		Если ДопПараметры.ТекущийПутьФайла = ДопПараметры.КаталогОбмена Тогда
			Если НРег(ДопПараметры.ТекущееИмяФайла)="base" 
				или НРег(ДопПараметры.ТекущееИмяФайла)="prnmask" 
				или НРег(ДопПараметры.ТекущееИмяФайла)="sounds" 
				или НРег(ДопПараметры.ТекущееИмяФайла)="dmphotos" 
				или НРег(ДопПараметры.ТекущееИмяФайла)="dmimages"
				или НРег(ДопПараметры.ТекущееИмяФайла)="errors"
				или НРег(ДопПараметры.ТекущееИмяФайла)="in"
				или НРег(ДопПараметры.ТекущееИмяФайла)="out"
				или НРег(ДопПараметры.ТекущееИмяФайла)="log"
				или НРег(ДопПараметры.ТекущееИмяФайла)="appupdate"
				или НРег(ДопПараметры.ТекущееИмяФайла)="others" тогда
				
			Иначе
			
			СтрокаТСД=СписокТСД.Добавить();
			СтрокаТСД.ТСД=ДопПараметры.ТекущееИмяФайла;
			СтрокаТСД.Номерстроки=ДопПараметры.ПорядковыйНомерТСД;
			
			ДопПараметры.ПорядковыйНомерТСД = ДопПараметры.ПорядковыйНомерТСД + 1;	
				
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;

	//переход к следующему файлу
	Если ДопПараметры.ТекущийФайл<ДопПараметры.КоличествоФайлов Тогда
		ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
		ФайлТСД = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоПроверкиЭтоКаталогКаталоговОбмена_Завершение",ЭтаФорма,ДопПараметры);
		ФайлТСД.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
		
	Иначе
		Если СписокТСД.Количество()>0 Тогда
			
			ПрочитатьНастройкиТСД();
			
			Элементы.СписокТСД.ТекущаяСтрока=0;
			
			Если СписокТСД.Количество() > 0 Тогда
				Элементы.СписокТСД.ТекущаяСтрока=0;
				ИДТСД = СокрЛП(СписокТСД[0].ТСД) +РП;
			КонецЕсли;
							
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
	
	ДопПараметры.ТекущийФайл = ДопПараметры.ТекущийФайл+1;
	ДопПараметры.ТекущееИмяФайла = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1].Имя;						
	ДопПараметры.ТекущийПутьФайла = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1].Путь;

КонецПроцедуры

&НаКлиенте
Процедура лКаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Новый ОписаниеОповещения("лКаталогОбменаНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог, Элемент", Диалог, Элемент)));
КонецПроцедуры

&НаКлиенте
Процедура лКаталогОбменаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		лКаталогОбмена=Диалог.Каталог;
	КонецЕсли;	
	лКаталогОбмена=СокрЛП(лКаталогОбмена)+?(пРАВ(СокрЛП(лКаталогОбмена),1)=РП,"",РП);
	лКаталогОбменаПриИзменении(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура лКаталогНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Новый ОписаниеОповещения("лКаталогНастроекНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
КонецПроцедуры

&НаКлиенте
Процедура лКаталогНастроекНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		лКаталогНастроек=Диалог.Каталог+РП;
	КонецЕсли;
	
	ПрочитатьНастройкиШаблонов();
	ПрочитатьНастройкиПользователей();

КонецПроцедуры

&НаКлиенте
Процедура лКаталогНастроекОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПрочитатьНастройкиШаблонов();
	ПрочитатьНастройкиПользователей();
КонецПроцедуры

&НаКлиенте
Процедура лКаталогНастроекПриИзменении(Элемент)
	Если лКаталогОбмена<>"" тогда
		лКаталогНастроек=СокрЛП(лКаталогНастроек)+?(пРАВ(СокрЛП(лКаталогНастроек),1)=РП,"",РП);
	КонецЕсли;
	ПрочитатьНастройкиШаблонов();
	ПрочитатьНастройкиПользователей();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПользователей(Команда)	
	ПроверитьКаталоги("ВыгрузитьПользователей");	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПользователи()

 ДанныеТЗ = Новый ХранилищеЗначения(Пользователи.Выгрузить());
 Возврат XMLСтрока(ДанныеТЗ);

КонецФункции

&НаСервере
Функция ПолучитьДанныеШаблоны()

 ДанныеТЗ = Новый ХранилищеЗначения(ШаблоныДокументов.Выгрузить());
 Возврат XMLСтрока(ДанныеТЗ);

КонецФункции

&НаСервере
Функция ПолучитьДанныеАвтозагрузкиШаблонов()

 ДанныеТЗ = Новый ХранилищеЗначения(АвтозагрузкаРеквизитовОбщая.Выгрузить());
 Возврат XMLСтрока(ДанныеТЗ);

КонецФункции


&НаКлиенте
Процедура ДобавитьШаблон(Команда)

	КоличествоШаблонов =  ШаблоныДокументов.Количество();

	
	НовыйШаблон=ШаблоныДокументов.Добавить(); //заполнение нового шаблона типовыми значениями
	НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
	НовыйШаблон.ИспользоватьПодбор=Истина;
	НовыйШаблон.ВсеШтрихкодыТовара=Истина;
	
	Элементы.ШаблоныДокументов.ТекущаяСтрока = ШаблоныДокументов[КоличествоШаблонов].ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНовыйКодШаблона()
	
	НовыйКод = 0;
	
	Для каждого Шаблон из ШаблоныДокументов цикл
		Если Шаблон.Код>НовыйКод тогда
			НовыйКод = Шаблон.Код;	
		КонецЕсли;	
	КонецЦикла;	
	
	НовыйКод = НовыйКод+1;
	
	Возврат НовыйКод;
	
КонецФункции	

&НаКлиенте
Процедура СохранитьШаблон(Команда)
	СохранитьШаблоны();
	ОграничитьТипыДока();
КонецПроцедуры

// Процедура сохраняет актуальный список шаблонов
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура СохранитьШаблоны()
	ПроверитьКаталоги("СохранитьШаблоны");	
КонецПроцедуры

// Функция собирает данные шаблона в зависимости от сделанных настроек
//
// Параметры:
//  ШаблонДокумента - шаблон для обработки
//
// Возвращаемое значение:
//  СтрокаШаблона - строка с данными логики шаблона документа
//
&НаСервере
Функция СобратьШаблон(Код)
	Перем СтрокаШаблона;//логика шаблона
	Код=Число(Код);
	СтрокаШаблона="";
	СтрокаШаблона=СтрокаШаблона+Строка(ШаблоныДокументов[Код].Код)+";";//2.КодШаблона
	СтрокаШаблона=СтрокаШаблона+Строка(ШаблоныДокументов[Код].ТипДокумента)+";";//3.
	СтрокаШаблона=СтрокаШаблона+Строка(ШаблоныДокументов[Код].ВидДокумента)+";";//4.
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].РазрешеноСозданиеНаТСД,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//5.enableNew
	СтрокаШаблона=СтрокаШаблона+"0;";//6.ГенерацияУЛ (newPackOnWS - в оффлайн версии всегда 0)
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ШтрихкодыТолькоПоШаблонам,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//7.useBCTemplates
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПриемкаПоПодбору,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//8.useSelectLogAsInsertTask
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].РазрешитьВыгрузкуНеполногоДокумента,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//9.onUploadIncorrectDoc
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПриПриемкеЗапрашиватьТовар,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//10.useArt_Insert
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ВсеШтрихкодыТовара,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//11.useAllBarcode
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПриСканированииТовараПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//12.onArtScan_Select
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПриПревышенииЗаданияПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//13.onTaskQty_Select
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПриПревышенииЛимитаПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//14.onLimitQty_Select
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользованиеЯчеекПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//15.useCell_Select
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользованиеСерийниковПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//16.useSN_Select
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользованиеУпаковочныхЛистовПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//17.usePack_Select
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользоватьПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//18.use_Select
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].УчитыватьЯчеекВЗаданииПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//19.useCellOnTask_Select
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].УчитыватьСерийниковВЗаданииПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//20.useSNOnTask_Select
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].РучнойВводКоличестваПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//21.quantEnable_Select
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПодтверждатьЭнтеромПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//22.enterToCommit_Select
	СтрокаШаблона=СтрокаШаблона+"0;";//23.ОтправлятьСтрокиНаСерверПодбор (writeRecordToWS_Select - в оффлайн версии всегда 0)
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПриСканированииТовараПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//24.onArtScan_Insert
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПриПревышенииЗаданияПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//25.onTaskQty_Insert
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПриПревышенииЛимитаПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//26.onLimitQty_Insert
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользованиеЯчеекПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//27.useCell_Insert
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользованиеСерийниковПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//28.useSN_Insert
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользованиеУпаковочныхЛистовПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//29.usePack_Insert
	                 
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользоватьПриемку,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//30.use_Insert
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].УчитыватьЯчеекВЗаданииПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//31.useCellOnTask_Insert
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].УчитыватьСерийниковВЗаданииПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//32.useSNOnTask_Insert
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].РучнойВводКоличестваПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//33.quantEnable_Insert
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПодтверждатьЭнтеромПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//34.enterToCommit_Insert
	
	
	СтрокаШаблона=СтрокаШаблона+"0;";//35.ОтправлятьСтрокиНаСерверПриемка (writeRecordToWS_Insert - в оффлайн версии всегда 0)
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ЗапретитьРучноеИзменениеКлиента,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//36.disableManualChangeClient
	СтрокаШаблона=СтрокаШаблона+"0;";//37.disableReaderChangeClient
	СтрокаШаблона=СтрокаШаблона+"0;";//38.readerTrack1Use
	СтрокаШаблона=СтрокаШаблона+"0;";//39.readerTrack2Use	
	СтрокаШаблона=СтрокаШаблона+"0;";//40.readerTrack3Use
	
	СтрокаШаблона=СтрокаШаблона+"0;";//41. ОбновлятьТоварыСДокументом (loadArtsWithRows - в оффлайн версии всегда 0)
	СтрокаШаблона=СтрокаШаблона+"0;";//42. ПодгружатьСтрокиПриОткрытии (loadRowsOnOpen - в оффлайн версии всегда 0)
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПриСканированииНовогоТовара,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//43.onNewArt
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПечатьЭтикеткиПриПриемке,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//44.printLabel_Insert
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПечатьЭтикеткиПриПодборе,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//45.printLabel_Select
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ПоштучноеПеремещение,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//46.Pallet replace
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].УникальныеШтрихкодыНоменклатурыВДокументе,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//47.uniquebarcodedoc
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ВыгрузкаЯчеекПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//48.enterCell_select
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ВыгрузкаЯчеекПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";";//49.enterCell_insert
	
	СтрокаШаблона=СтрокаШаблона+Формат(0,"БЛ=0; БИ=1")+";";//50.UsePhotofixationSelect
	СтрокаШаблона=СтрокаШаблона+Формат(0,"БЛ=0; БИ=1")+";";//51.UsePhotofixation
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользоватьЕГАИС,"БЛ=0; БИ=1")+";";//52.UseEGAIS
	СтрокаШаблона=СтрокаШаблона+ШаблоныДокументов[Код].ИспользоватьМаркуЕГАИС+";";//53.DMUseDataMatrixBarcode
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользоватьДатуРозливаЕГАИС,"БЛ=0; БИ=1")+";";//54.DMUseDateBottling
	СтрокаШаблона=СтрокаШаблона+ШаблоныДокументов[Код].ЕГАИСРежимВВодаPDF417+";";//55.DMEnterPDF417Barcode
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].СопоставлениеЕГАИС,"БЛ=0; БИ=1")+";";//56.DMEgaisCompare
	
	СтрокаШаблона=СтрокаШаблона+"0"+";";//57.DMUseBlankA
	СтрокаШаблона=СтрокаШаблона+"0"+";";//58.DMUseBlankB
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ЕГАИСИспользоватьПроверкуМарок,"БЛ=0; БИ=1")+";";//59.DMUseCheckMark
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].УникальныеСерийныеНомераПодбор,"БЛ=0; БИ=1")+";"; //60.DMIsUniqueSNSelect
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].УникальныеСерийныеНомераПриемка,"БЛ=0; БИ=1")+";"; //61.DMIsUniqueSNInsert
	
	СтрокаШаблона=СтрокаШаблона+ШаблоныДокументов[Код].ВерсияЕГАИС+";";//62.DMEgaisVersion
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользоватьМаркировку,"БЛ=0; БИ=1")+";"; //63.DMUseMark - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ОповеститьОНовомДокументе,"БЛ=0; БИ=1")+";"; //64.DMAlertNewDoc - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ВводТовараБезСканирования,"БЛ=0; БИ=1")+";"; //65.DMNoScanArts - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ОбработкаЯчейкиЦеликомПодбор,"БЛ=0; БИ=1")+";"; //66.DMFullyCell_Select - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ОбработкаЯчейкиЦеликомПриемка,"БЛ=0; БИ=1")+";"; //67.DMFullyCell_Insert - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].СерНомНеПустойПодбор,"БЛ=0; БИ=1")+";"; //68.DMSNNotNull_Select - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].СерНомНеПустойПриемка,"БЛ=0; БИ=1")+";"; //69.DMSNNotNull_Insert - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ТипСерийногоНомераПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";"; //70.DMSNType_Select - 0, 1, 2, 3
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ТипСерийногоНомераПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";"; //71.DMSNType_Insert - 0, 1, 2, 3
	СтрокаШаблона=СтрокаШаблона+Строка(ШаблоныДокументов[Код].ПравилаВводаСерииПодбор)+";";//72.DMSNRules_Select - Строка
	СтрокаШаблона=СтрокаШаблона+Строка(ШаблоныДокументов[Код].ПравилаВводаСерииПриемка)+";";//73.DMSNRules_Insert - Строка
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].МаркировкаСканироватьEAN,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";"; //74.DMMark_NeedEanScan - 0, 1, 2, 3
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].МаркировкаEANсоответствуетGTIN,"БЛ=0; БИ=1")+";"; //75.DMMark_EanIsGtin - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].МаркировкаДополнительныйПоискПоКМ,"БЛ=0; БИ=1")+";"; //76.DMMark_AdditionalSearchByMC - булево

	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].МаркировкаЗапретитьПодборНемаркируемыхТоваров,"БЛ=0; БИ=1")+";"; //77.isOnlyMarkArt  - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].МаркировкаВводМаркируемогоТовараБезКМ,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";"; //78.artMarkEnterType  - 0, 1, 2, 3
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].РазрешитьПропускатьВводУпаковочногоЛиста,"БЛ=0; БИ=1")+";"; //79.canPackSkip  - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ИспользоватьСервисRateGoods,"БЛ=0; БИ=1")+";"; //80.useRateGoods   - булево

	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].МаркировкаПроверкаВладелькаКМ,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";"; //81.checkOwnerKm - 0, 1, 2, 3
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].МаркировкаПроверкаСтатусаКМ,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";"; //82.checkStatusKm - 0, 1, 2, 3
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].МаркировкаРазрешенныеСтатусыКМ,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";"; //83.allowedStatuses - Строка
	
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ВыгружатьВыполненныйНаТСДДокументАвтоматически,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";"; //84.isUnloadCompletedDoc - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ДополнительныеФормыСТоваром,"ЧН=0; ЧГ=0; БЛ=0; БИ=1")+";"; //85.DMFormsWithArt - булево
	СтрокаШаблона=СтрокаШаблона+Формат(ШаблоныДокументов[Код].ВводЯчейкиБезСканирования,"БЛ=0; БИ=1")+";"; //86.DMNoScanCells - булево

	
	Возврат СтрокаШаблона;
	
КонецФункции	

&НаКлиенте
Процедура УдалитьШаблон(Команда)
	ИндексТекущегоЭлементаКоллекции = ШаблоныДокументов.Индекс(Элементы.ШаблоныДокументов.ТекущиеДанные);
			              
	Попытка
		ШаблоныДокументов.Удалить(ИндексТекущегоЭлементаКоллекции);
		СохранитьШаблоны();
		ОграничитьТипыДока();
	Исключение
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не выбран шаблон для удаления!";
		Сообщение.Сообщить();
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Функция СобратьМассивШаблонов()
	МассивШаблонов = Новый Массив;	
	
	Для Каждого Стр Из ШаблоныДокументов Цикл
		МассивШаблонов.Добавить(Стр.ТипДокумента);	
	КонецЦикла;
	
	Возврат МассивШаблонов;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПолноеИмяОбъекта = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьШаблоныПоУмолчанию(Команда)
	
	Массив = СобратьМассивШаблонов();
	СтруктураПараметров = Новый Структура("МассивШаблонов", Массив);

	Форма = ПолучитьФорму(ПолноеИмяОбъекта + ".Форма.ФормаКонстуктораШаблонов", СтруктураПараметров, , , ,);	
	Форма.Открыть();
	
	СохранитьШаблоны();
	ОграничитьТипыДока();

КонецПроцедуры

&НаСервере
Процедура СоздатьНовыеШаблоны(Шаблоны)
	
	ИндексПоиска = Шаблоны.Найти("[М] Приемка");
	Если ИндексПоиска <> Неопределено Тогда
		
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Приемка")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Приемка"; // Наименование
			НовыйШаблон.ВидДокумента = "ПриобретениеТоваровУслуг";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;
			
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 2;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ПриобретениеТоваровУслуг.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("[М] Отгрузка");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Отгрузка")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Отгрузка"; // Наименование
			НовыйШаблон.ВидДокумента = "РеализацияТоваровУслуг";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;

			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ИндексПоиска = Шаблоны.Найти("[М] Чек ККМ");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Отгрузка")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Чек ККМ"; // Наименование
			НовыйШаблон.ВидДокумента = "ЧекККМ";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;

			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ЧекККМ.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;

	
	ИндексПоиска = Шаблоны.Найти("[М] Возврат в оборот");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Возврат в оборот")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Возврат в оборот"; // Наименование
			НовыйШаблон.ВидДокумента = "ВозвратТоваровОтКлиента";
			НовыйШаблон.ИспользоватьМаркировку = Истина;

			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ВозвратТоваровОтКлиента.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;

		ИндексПоиска = Шаблоны.Найти("[М] Вывод из оборота");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Вывод из оборота")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Вывод из оборота"; // Наименование
			НовыйШаблон.ВидДокумента = "РеализацияТоваровУслуг";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;

			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;


		
	ИндексПоиска = Шаблоны.Найти("[М] Упаковка");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Упаковка")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Упаковка"; // Наименование
			НовыйШаблон.ВидДокумента = "УпаковочныйЛист";
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;

			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.УпаковочныйЛист.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			НовыйШаблон.ИспользованиеУпаковочныхЛистовПодбор = 1; 
			
		КонецЕсли;
		
	КонецЕсли;
		
	ИндексПоиска = Шаблоны.Найти("[М] В оборот");
	Если ИндексПоиска <> Неопределено Тогда
		
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента", "[М] В оборот")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] В оборот";
			НовыйШаблон.ВидДокумента = "МаркировкаТоваровИСМП";
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;

			НовыйШаблон.ИспользоватьПодбор = Истина; 
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.МаркировкаТоваровИСМП.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			
		КонецЕсли;
				
	КонецЕсли;
	
		
		ИндексПоиска = Шаблоны.Найти("[Е] ТТН");
		Если ИндексПоиска <> Неопределено Тогда
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[Е] ТТН")).Количество() = 0  Тогда 
				НовыйШаблон=ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
				НовыйШаблон.ВсеШтрихкодыТовара=Истина;
				НовыйШаблон.ВидДокумента = "ТТНВходящаяЕГАИС";	
				НовыйШаблон.ТипДокумента = "[Е] ТТН";
				НовыйШаблон.РазрешеноСозданиеНаТСД = Ложь;	
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
				НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
				НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
				НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
				НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор=1;
				НовыйШаблон.ИспользоватьЕГАИС=Истина;
				НовыйШаблон.СопоставлениеЕГАИС=Истина;
				НовыйШаблон.ИспользоватьДатуРозливаЕГАИС=ЛОЖЬ;
				НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента=1;	
			КонецЕсли;
		КонецЕсли;
		ИндексПоиска = Шаблоны.Найти("Перемещение по складам");
		Если ИндексПоиска <> Неопределено Тогда
			
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Перемещение по складам")).Количество() = 0  Тогда 	
				НовыйШаблон=ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
				НовыйШаблон.ВсеШтрихкодыТовара=Истина;
				НовыйШаблон.ВидДокумента = "ПеремещениеТоваров";	
				НовыйШаблон.ТипДокумента = "Перемещение по складам";
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
				НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
				НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
				НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
				НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
				НовыйШаблон.ИспользованиеЯчеекПодбор = 2;
				НовыйШаблон.ЗаполнятьСкладПодбор=Истина;
				НовыйШаблон.ИспользоватьПриемку = Истина;
				НовыйШаблон.ИмяТабличнойЧастиПриемка = "Товары";
				НовыйШаблон.ПриемкаПоПодбору = Истина;
				НовыйШаблон.ПриПриемкеЗапрашиватьТовар = Ложь;
				НовыйШаблон.ПриСканированииТовараПриемка = 1;
				НовыйШаблон.ПриПревышенииЗаданияПриемка = 0;
				НовыйШаблон.ПриПревышенииЛимитаПриемка = 0;
				НовыйШаблон.РучнойВводКоличестваПриемка = Истина;
				НовыйШаблон.ПечатьЭтикеткиПриПриемке = 0;
				НовыйШаблон.ПодтверждатьЭнтеромПриемка = Истина;
				НовыйШаблон.ИспользованиеЯчеекПриемка = 2;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПриемка = 0;
				НовыйШаблон.ЗаполнятьСкладПриемка=Истина;
				НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
				НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			КонецЕсли;
		КонецЕсли;
		
		ИндексПоиска = Шаблоны.Найти("Перемещение по ячейкам");
		Если ИндексПоиска <> Неопределено Тогда
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Перемещение по ячейкам")).Количество() = 0  Тогда 
				НовыйШаблон=ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
				НовыйШаблон.ВсеШтрихкодыТовара=Истина;
				НовыйШаблон.ВидДокумента = "ОтборРазмещениеТоваров";	
				НовыйШаблон.ТипДокумента = "Перемещение по ячейкам";
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "ТоварыОтбор";
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
				НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
				НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
				НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
				НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
				НовыйШаблон.ИспользованиеЯчеекПодбор = 2;
				НовыйШаблон.ИспользоватьПриемку = Истина;
				НовыйШаблон.ИмяТабличнойЧастиПриемка = "ТоварыРазмещение";
				НовыйШаблон.ПриемкаПоПодбору = Истина;
				НовыйШаблон.ПриПриемкеЗапрашиватьТовар = Истина;
				НовыйШаблон.ПриСканированииТовараПриемка = 1;
				НовыйШаблон.ПриПревышенииЗаданияПриемка = 0;
				НовыйШаблон.ПриПревышенииЛимитаПриемка = 0;
				НовыйШаблон.РучнойВводКоличестваПриемка = Истина;
				НовыйШаблон.ПечатьЭтикеткиПриПриемке = 0;
				НовыйШаблон.ПодтверждатьЭнтеромПриемка = Истина;
				НовыйШаблон.ИспользованиеЯчеекПриемка = 2;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПриемка = 2;
				НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
				НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			КонецЕсли;
			
		КонецЕсли;
	
		ИндексПоиска = Шаблоны.Найти("Инвентаризация");
		Если ИндексПоиска <> Неопределено Тогда
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Инвентаризация")).Количество() = 0  Тогда 
				НовыйШаблон=ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
				НовыйШаблон.ВсеШтрихкодыТовара=Истина;
				НовыйШаблон.ВидДокумента = "ПересчетТоваров";	
				НовыйШаблон.ТипДокумента = "Инвентаризация";   // Наименование
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
				НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
				НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
				НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
				НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 1;
				НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
				НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			КонецЕсли;
			
		КонецЕсли;
	
	
	
		ИндексПоиска = Шаблоны.Найти("Заказ");
		Если ИндексПоиска <> Неопределено Тогда
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Заказ")).Количество() = 0  Тогда 
				НовыйШаблон=ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
				НовыйШаблон.ВсеШтрихкодыТовара=Истина;
				НовыйШаблон.ВидДокумента = "ЗаказКлиента";	
				НовыйШаблон.ТипДокумента = "Заказ";   // Наименование
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
				НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
				НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
				НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
				НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
				НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
				НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			КонецЕсли;
			
		КонецЕсли;
	
	
		ИндексПоиска = Шаблоны.Найти("Возврат");
		Если ИндексПоиска <> Неопределено Тогда
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Возврат")).Количество() = 0  Тогда 
				НовыйШаблон=ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
				НовыйШаблон.ВсеШтрихкодыТовара=Истина;
				НовыйШаблон.ВидДокумента = "ВозвратТоваровОтКлиента";	
				НовыйШаблон.ТипДокумента = "Возврат";
				НовыйШаблон.РазрешеноСозданиеНаТСД = Ложь;
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 2;
				НовыйШаблон.ПриПревышенииЛимитаПодбор = 1;
				НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
				НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
				НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 0;
				НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
				НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			КонецЕсли;
		КонецЕсли;
		
	ИндексПоиска = Шаблоны.Найти("Поступление");
	Если ИндексПоиска <> Неопределено Тогда
		
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Поступление")).Количество() = 0  Тогда 	
			НовыйШаблон=ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ВсеШтрихкодыТовара=Истина;	
			Попытка 
				НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ПриобретениеТоваровУслуг.ТабличныеЧасти.Товары.Имя;
				НовыйШаблон.ТипДокумента = "Поступление";
				НовыйШаблон.ВидДокумента = "ПриобретениеТоваровУслуг";
			Исключение
				НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ПоступлениеТоваровУслуг.ТабличныеЧасти.Товары.Имя;
				НовыйШаблон.ТипДокумента = "Поступление";
				НовыйШаблон.ВидДокумента = "ПоступлениеТоваровУслуг";
			КонецПопытки;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
			НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
			НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
			НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
		КонецЕсли;
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("Реализация");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Реализация")).Количество() = 0  Тогда 
			НовыйШаблон=ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ВсеШтрихкодыТовара=Истина;
			НовыйШаблон.ВидДокумента = "РеализацияТоваровУслуг";	
			НовыйШаблон.ТипДокумента = "Реализация";
			НовыйШаблон.РазрешеноСозданиеНаТСД = Ложь;
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 2;
			НовыйШаблон.ПриПревышенииЛимитаПодбор = 1;
			НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры


// Процедура - обработчик события "НачалоВыбора" поля ввода "ДокументВыгрузки"
//
// Параметры:
//  Элемент           	- <ПолеВвода>
//                    	- Поле ввода ("ДокументВыгрузки"), с которым связано данное событие.
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
&НаКлиенте
Процедура ДокументВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ШаблоныДокументов.Количество()=0 Тогда
		СтандартнаяОбработка=Ложь;
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не созданы шаблоны документов!";
		Сообщение.Сообщить();
		Возврат;
	Иначе
		СтандартнаяОбработка=Ложь;
		Если ШаблонДокументаВыгрузки <>"" тогда
			
			Стр=ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента",ШаблонДокументаВыгрузки));
			
			ПараметрыПодбора=Новый Структура;
			ПараметрыПодбора.Вставить("МножественныйВыбор", Ложь);
			Подбор=Получитьформу("Документ."+Стр[0].ВидДокумента+".ФормаВыбора",ПараметрыПодбора,ЭтаФорма);
			Подбор.ЗакрыватьПривыборе=Истина;
			Подбор.Открыть();
		Иначе	
			ВыборШаблона=Новый СписокЗначений;
			Для каждого Шаблон из ШаблоныДокументов цикл 
				ВыборШаблона.Добавить(Шаблон.Код,Шаблон.ТипДокумента);
			КонецЦикла;
			
			ОписаниеОповещения=Новый ОписаниеОповещения ("ВыборШаблонаЗавершение",ЭтаФорма);
			ВыборШаблона.ПоказатьВыборЭлемента(ОписаниеОповещения,"Выберите шаблон");
		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборШаблонаЗавершение (Результат, Параметры) Экспорт
	
	Если не Результат = Неопределено тогда 
		
		Стр=ШаблоныДокументов.НайтиСтроки(Новый Структура("Код,ТипДокумента",Результат.Значение,Результат.Представление));
		
		ШаблонДокументаВыгрузки=Стр[0].ТипДокумента;
		КодШаблонаДокументаВыгрузки=Стр[0].Код;
		ВидДокументаВыгрузки=Стр[0].ВидДокумента;
		ИмяТЧДокументаПодбор=Стр[0].ИмяТабличнойЧастиПодбор;
		ИмяТЧДокументаПриемка=Стр[0].ИмяТабличнойЧастиПриемка;
		
		ПараметрыПодбора=Новый Структура;
		ПараметрыПодбора.Вставить("МножественныйВыбор", Ложь);
		Подбор=Получитьформу("Документ."+Стр[0].ВидДокумента+".ФормаВыбора",ПараметрыПодбора,ЭтаФорма);
		Подбор.ЗакрыватьПривыборе=Истина;
		Подбор.Открыть();
		
	Иначе
		СтандартнаяОбработка=Ложь;
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не выбран шаблон!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СтандартнаяОбработка=Ложь;	
	ДокументВыгрузки = ВыбранноеЗначение;	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "ДокументВыгрузки"
//
// Параметры:
//  Элемент           	- <ПолеВвода>
//                    	- Поле ввода ("ДокументВыгрузки"), с которым связано данное событие.
//
//  ВыбранноеЗначение 	- <ДокументСсылка>
//                    	- Выбранное значение, которое будет установлено как значение поля ввода "ДокументВыгрузки"
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
&НаКлиенте
Процедура ДокументВыгрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Тип") Тогда
		докМ=неопределено;
		докМ=ОпределитьТипДока(ВыбранноеЗначение);	
		Если докМ=неопределено Тогда
			СтандартнаяОбработка=Ложь;
			ОчиститьСообщения();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Не найден тип документа!";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		ВыборШаблона=Новый СписокЗначений;
		Для каждого Шаблон из ШаблоныДокументов цикл 
			Если  Шаблон.ВидДокумента=докМ тогда
				  ВыборШаблона.Добавить(Шаблон.Код,Шаблон.ТипДокумента);
			КонецЕсли;
		КонецЦикла;
		Если ВыборШаблона.Количество()>1 тогда //несколько шаблонов на один вид документа
			Выбрать=ВыборШаблона.ВыбратьЭлемент("Выберите шаблон");
			Если Выбрать<>Неопределено тогда
				Стр=ШаблоныДокументов.НайтиСтроки(Новый Структура("Код,ТипДокумента",Выбрать.Значение,Выбрать.Представление))
				
			Иначе
				СтандартнаяОбработка=Ложь;
				ОчиститьСообщения();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст="Не выбран шаблон!";
				Сообщение.Сообщить();
				Возврат;
			 КонецЕсли;
		Иначе
			Стр=ШаблоныДокументов.НайтиСтроки(Новый Структура("ВидДокумента",ДокМ));
		КонецЕсли;
		Если Стр[0]=неопределено Тогда
			СтандартнаяОбработка=Ложь;
			ОчиститьСообщения();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Для данного типа документа нет шаблона!";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		ШаблонДокументаВыгрузки=Стр[0].ТипДокумента;
		КодШаблонаДокументаВыгрузки=Стр[0].Код;
		ВидДокументаВыгрузки=Стр[0].ВидДокумента;
		ИмяТЧДокументаПодбор=Стр[0].ИмяТабличнойЧастиПодбор;
		ИмяТЧДокументаПриемка=Стр[0].ИмяТабличнойЧастиПриемка;
	Иначе
		докМ=НайтиТипДока (ВыбранноеЗначение);
		Если ШаблоныДокументов.Количество()>1 тогда
		Стр=ШаблоныДокументов.НайтиСтроки(Новый Структура("Код,ВидДокумента,ТипДокумента",КодШаблонаДокументаВыгрузки,ДокМ,ШаблонДокументаВыгрузки));
		Если Стр[0]=неопределено Тогда
			Стр=ШаблоныДокументов.НайтиСтроки(Новый Структура("ВидДокумента",ДокМ));
		    Если Стр[0]=неопределено Тогда
				СтандартнаяОбработка=Ложь;
				ОчиститьСообщения();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст="Для данного типа документа нет шаблона!";
				Сообщение.Сообщить();
				возврат;
			КонецЕсли;
		КонецЕсли;
		ШаблонДокументаВыгрузки=Стр[0].ТипДокумента;
		КодШаблонаДокументаВыгрузки=Стр[0].Код;
		ВидДокументаВыгрузки=Стр[0].ВидДокумента;
		ИмяТЧДокументаПодбор=Стр[0].ИмяТабличнойЧастиПодбор;
		ИмяТЧДокументаПриемка=Стр[0].ИмяТабличнойЧастиПриемка;
		ИначеЕсли ШаблоныДокументов.Количество()=1 тогда
		ШаблонДокументаВыгрузки=ШаблоныДокументов[0].ТипДокумента;
		КодШаблонаДокументаВыгрузки=ШаблоныДокументов[0].Код;
		ВидДокументаВыгрузки=ШаблоныДокументов[0].ВидДокумента;
		ИмяТЧДокументаПодбор=ШаблоныДокументов[0].ИмяТабличнойЧастиПодбор;
		ИмяТЧДокументаПриемка=ШаблоныДокументов[0].ИмяТабличнойЧастиПриемка;
		КонецЕсли;

	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ОпределитьТипДока (ВыбранноеЗначение)
	Для каждого докМ из Метаданные.Документы Цикл
		Если докМ.Синоним=СокрЛП(ВыбранноеЗначение) или докМ.ПредставлениеОбъекта=СокрЛП(ВыбранноеЗначение) Тогда
			Возврат докМ.Имя;
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Неопределено;

	
КонецФункции

&НаСервере
Функция НайтиТипДока (ВыбранноеЗначение)
	Возврат ВыбранноеЗначение.Метаданные().Имя;
КонецФункции

// Процедура - обработчик события "Очистка" поля ввода "ДокументВыгрузки"
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода ("ДокументВыгрузки"), с которым связано данное событие.
//
&НаКлиенте
Процедура ДокументВыгрузкиОчистка(Элемент, СтандартнаяОбработка)
	ШаблонДокументаВыгрузки="";
	КодШаблонаДокументаВыгрузки="";
	ВидДокументаВыгрузки="";
	ИмяТЧДокументаПодбор="";
	ИмяТЧДокументаПриемка="";
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокумент(Команда)
	ПроверитьКаталоги("ВыгрузитьДокумент");
КонецПроцедуры
				
&НаСервере
Функция ПолучитьНомерДокумента(ДокументВыгрузки)
ЧистыйДокНомер=СтрЗаменить(ДокументВыгрузки.Номер,"\","");//убирает критичные символы в строке
ЧистыйДокНомер=СтрЗаменить(ЧистыйДокНомер,"/","");
Возврат ЧистыйДокНомер;
КонецФункции

&НаСервере
Функция СобратьДокумент(ДокументВыгрузки, ИспользоватьЕгаис, ВерсияЕГАИС)
	
	ЧистыйДокНомер=СтрЗаменить(ДокументВыгрузки.Номер,"\","");//убирает критичные символы в строке
	ЧистыйДокНомер=СтрЗаменить(ЧистыйДокНомер,"/","");

	ТекстФайлаДокумент="";
	Если ЗначениеЗаполнено(СобратьШагиКДокументу()) Тогда
		ТекстФайлаДокумент=ТекстФайлаДокумент+ "docsteps;"+СобратьШагиКДокументу()+";"+Символы.ПС;
	КонецЕсли;

	
	
	ТекстФайлаДокумент=ТекстФайлаДокумент+"+;";//0.добавить
	ТекстФайлаДокумент=ТекстФайлаДокумент+"dk8#"+ДокументВыгрузки.УникальныйИдентификатор()+";";//1. ИД
	ТекстФайлаДокумент=ТекстФайлаДокумент+Строка(ЧистыйДокНомер)+";";//2. номер
	ТекстФайлаДокумент=ТекстФайлаДокумент+фОРМАТ(ДокументВыгрузки.Дата,"ДФ='yyyy-MM-dd hh:mm:ss.000'")+";";//3. дата и время	
	ТекстФайлаДокумент=ТекстФайлаДокумент+Строка(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(ДокументВыгрузки))+";";//4. штрихкод
	ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(СокрЛП(ДокументВыгрузки.Комментарий))+";";//5. комментарий	
	
	
	/////////////////////////////КЛИЕНТ
	лКлиент = Справочники.Партнеры.ПустаяСсылка();
	

	Если Не ЗначениеЗаполнено(лКлиент) тогда
		попытка лКлиент=ДокументВыгрузки.Партнер;  Исключение КонецПопытки;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(лКлиент) тогда
		попытка лКлиент=ДокументВыгрузки.Отправитель;  Исключение КонецПопытки;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(лКлиент) тогда
		попытка лКлиент=ДокументВыгрузки.Получатель;  Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лКлиент) тогда
		попытка лКлиент=ДокументВыгрузки.Распоряжение.Партнер;  Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лКлиент) тогда
		попытка лКлиент=ДокументВыгрузки.Распоряжение.Отправитель;  Исключение КонецПопытки;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(лКлиент) тогда
		попытка лКлиент=ДокументВыгрузки.Распоряжение.Получатель;  Исключение КонецПопытки;
	КонецЕсли;

			
		
	/////////////////////////////СКЛАД
	лСклад = Справочники.Склады.ПустаяСсылка();

	Если Не ЗначениеЗаполнено(лСклад) тогда
		Попытка лСклад=ДокументВыгрузки.Склад;  Исключение КонецПопытки;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(лСклад) тогда
		Попытка лСклад=ДокументВыгрузки.СкладОтправитель;  Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лСклад) тогда
		Попытка лСклад=ДокументВыгрузки.Помещение.Владелец;  Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лСклад) тогда
		Попытка лСклад=ДокументВыгрузки.ТорговыйОбъект;  Исключение КонецПопытки;
	КонецЕсли;
	

	/////////////////////////////
	
	Попытка
		ТекстФайлаДокумент=ТекстФайлаДокумент+?(лКлиент.Пустая(),"",СокрЛП(лКлиент.УникальныйИдентификатор()))+";";//6. клиент
	Исключение
		ТекстФайлаДокумент=ТекстФайлаДокумент+";";//6. клиента нет
	КонецПОпытки;
	

	Попытка
		ТекстФайлаДокумент=ТекстФайлаДокумент+?(лСклад.Пустая(),"",СокрЛП(лСклад.УникальныйИдентификатор()))+";";//7. склад
	Исключение
		ТекстФайлаДокумент=ТекстФайлаДокумент+";";//7. склада нет
	КонецПОпытки;
	
	
	Попытка
		ТекстФайлаДокумент=ТекстФайлаДокумент+ДокументВыгрузки.Организация.ИНН+";"+Символы.ПС;//8. инн
	Исключение
		ТекстФайлаДокумент=ТекстФайлаДокумент+";"+Символы.ПС;//8. инн нет
	КонецПОпытки;

	//9. признак родительского документа - булево
	//10. id родительского документа для дочернего - строка
	//11. тип логики распределения по дочерним документам - (0 - с уведомлением, 1 - без уведомления)
	
	
	СтрокиШаблона=ШаблоныДокументов.НайтиСтроки(Новый Структура("Код,ВидДокумента,ТипДокумента",КодШаблонаДокументаВыгрузки,ВидДокументаВыгрузки,ШаблонДокументаВыгрузки));
	Если СтрокиШаблона.Количество()=0 тогда
		Возврат Неопределено;
	КонецЕсли;
	Код=Формат(ШаблоныДокументов.Индекс(СтрокиШаблона[0]),"ЧН=0; ЧГ=0; БЛ=0; БИ=1");
	ТекстФайлаДокумент=ТекстФайлаДокумент+СобратьШаблон(Код)+Символы.ПС;//шаблон
	
	Если СтрокиШаблона[0].ИспользоватьМаркировку И ПроверитьТребуетсяВыгрузкаМарок(ВидДокументаВыгрузки) Тогда
		
		Если СтрокиШаблона[0].МаркировкаЗапросВЦРПТ Тогда
			
			ЭтоТабак = Ложь;
			ТребуетсяОбновлениеКлючаСессии = Ложь;
			
			ВидМаркируемойПродукцииДокумента = ПолучитьВидПродукцииИСДокумента(ДокументВыгрузки);
			
			Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
			Модуь_ИнтерфейсИСМПКлиентСервер = ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
			Модуь_ИнтерфейсМОТПКлиентСервер = ОбщийМодуль("ИнтерфейсМОТПКлиентСервер");
			
			Если Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = Неопределено Тогда
				Сообщить("Конфигурация 1С не поддерживает работу с Маркировкой", 
				СтатусСообщения.ОченьВажное);		
				Возврат Неопределено;
			КонецЕсли;
			
			//Табак
			Если ВидМаркируемойПродукцииДокумента = Перечисления.ВидыПродукцииИС.Табак тогда		
				ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
				Модуь_ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(ДокументВыгрузки.Организация));
				ЭтоТабак = Истина;
			Иначе
				ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
				Модуь_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ДокументВыгрузки.Организация));	
			КонецЕсли; 
			
			Если ТребуетсяОбновлениеКлючаСессии Тогда
				
				Сообщить("Ошибка заполнения результатов проверки документа. Не получилось обновить ключ сессии. Проверьте настройки подключения к ИС.", 
				СтатусСообщения.ОченьВажное);
				
			Иначе
				
				ДокументВыгрузкиОбъект = ДокументВыгрузки.ПолучитьОбъект();
				
				Для каждого СтрШтрихкод Из ДокументВыгрузкиОбъект.ШтрихкодыУпаковок Цикл
					
					ЭтоУпаковка = Ложь;
					
					//если это упаковка и ее нету в базе, тогда обращаемся в исмп\мотп
					ЗначениеШтрихкода = СтрШтрихкод.ЗначениеШтрихкода;
					ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода);
					
					Если СтрДлина(ЗначениеШтрихкода) = 18 И Не ЭтоТабак Тогда   //обувная продукция с 18
						ЭтоУпаковка = Истина;
						
						Если ДанныеУпаковки = Неопределено Тогда
							ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода("(00)" + ЗначениеШтрихкода);
							ЗначениеШтрихкода = "(00)" + ЗначениеШтрихкода;
						КонецЕсли; 
						
					ИначеЕсли ((СтрДлина(ЗначениеШтрихкода) = 20 Или СтрДлина(ЗначениеШтрихкода) = 22) И Не ЭтоТабак И 
						(СтрНачинаетсяС(ЗначениеШтрихкода, "00") Или СтрНачинаетсяС(ЗначениеШтрихкода, "01") Или СтрНачинаетсяС(ЗначениеШтрихкода, "(00)") )) Тогда //обувная продукция с 20 и 22	
						ЭтоУпаковка = Истина;
					ИначеЕсли ЭтоТабак И СтрДлина(ЗначениеШтрихкода) > 29 Тогда  //табак
						ЭтоУпаковка = Истина;
					КонецЕсли; 
					
					Если (ДанныеУпаковки = Неопределено Или ДанныеУпаковки.Ссылка.ВложенныеШтрихкоды.Количество() = 0) И ЭтоУпаковка Тогда
						СсылкаНаШтрихкод = СформироватьЗапросКСервисуИСМПиСоздатьСправочникСсылкаМарка(ЗначениеШтрихкода, ЭтоТабак, ДокументВыгрузки, ВидМаркируемойПродукцииДокумента);
						
						Если СсылкаНаШтрихкод <> Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка() Тогда 
							СтрШтрихкод.ШтрихкодУпаковки = СсылкаНаШтрихкод;
						КонецЕсли;
						
					КонецЕсли;	
						
				КонецЦикла; 								
				
				ДокументВыгрузкиОбъект.Записать();
				
			КонецЕсли; 
		КонецЕсли;
		
		ДобавитьМаркированныйТоварВТекстДокумента(ТекстФайлаДокумент);	
		
	Иначе
		
		Если НЕ ИспользоватьЕгаис тогда
			
			Если СокрЛП(ИмяТЧДокументаПодбор)<>"" тогда
				
				Попытка
					ЕстьКоличествоУпаковок = Метаданные.Документы[ВидДокументаВыгрузки].ТабличныеЧасти[ИмяТЧДокументаПодбор].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено;
				Исключение
					ЕстьКоличествоУпаковок = Ложь;
				КонецПопытки;

				Для каждого стр из ДокументВыгрузки[ИмяТЧДокументаПодбор] Цикл
					
					Попытка
						Если ВидДокументаВыгрузки = "ЗаказКлиента" или ВидДокументаВыгрузки = "ЗаказПоставщику" Тогда
							Если стр.Отменено тогда
								Продолжить;
							КонецЕсли;
							
							Если стр.ВариантОбеспечения=Перечисления.ВариантыОбеспечения.НеТребуется тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					Исключение
					КонецПопытки;
					
					
					ТекстФайлаДокумент=ТекстФайлаДокумент+Стр.НомерСтроки+";S;";//префикс приемки
					Если стр.Характеристика.Пустая() Тогда
						ТекстФайлаДокумент=ТекстФайлаДокумент+"8U-"+СокрЛП(стр.Номенклатура.УникальныйИдентификатор())+"00000000-0000-0000-0000-000000000000"+";";
					Иначе
						ТекстФайлаДокумент=ТекстФайлаДокумент+"8U-"+СокрЛП(стр.Номенклатура.УникальныйИдентификатор())+СокрЛП(стр.Характеристика.УникальныйИдентификатор())+";";
					КонецЕсли;
					
					ТекстФайлаДокумент=ТекстФайлаДокумент+";"; // штрихкод
						
					
					Попытка
						Если СтрокиШаблона[0].УчитыватьЯчеекВЗаданииПодбор тогда
							//ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(стр.Ячейка))+";";//ячейка
							ТекстФайлаДокумент=ТекстФайлаДокумент+?(ВыгружатьВКодЯчейки=1,стр.Ячейка.Код, Строка(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(стр.Ячейка)))+";";//ячейка
						Иначе
							ТекстФайлаДокумент=ТекстФайлаДокумент+";";// нет ячеек
						КонецЕсли;
					Исключение
						ТекстФайлаДокумент=ТекстФайлаДокумент+";";// нет ячеек
					КонецПопытки;
					
					Попытка
						// серия
						Если СтрокиШаблона[0].ОпределениеСерии = 0 тогда
							ТекстФайлаДокумент=ТекстФайлаДокумент+СокрЛП(стр.Серия.Номер)+";"; 
						ИначеЕсли СтрокиШаблона[0].ОпределениеСерии = 1 тогда
							ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(стр.Серия.ГоденДо,"ДФ=dd.MM.yy")+";"; 
						ИначеЕсли СтрокиШаблона[0].ОпределениеСерии = 4 тогда
							
							СерияGS1 = "";
							Если ЗначениеЗаполнено(стр.Серия.ДатаПроизводства) тогда
								СерияGS1 = СерияGS1 + "[11]" + Формат(стр.Серия.ДатаПроизводства,"ДФ=yyMMdd");
							КонецЕсли;
							
							Если ЗначениеЗаполнено(стр.Серия.ГоденДо) тогда
								СерияGS1 = СерияGS1 + "[17]" + Формат(стр.Серия.ГоденДо,"ДФ=yyMMdd");
							КонецЕсли;
							
							Если ЗначениеЗаполнено(стр.Серия.Номер) тогда
								СерияGS1 = СерияGS1 + "[10]" + СокрЛП(стр.Серия.Номер);	
							КонецЕсли;		
							ТекстФайлаДокумент=ТекстФайлаДокумент+СокрЛП(СерияGS1)+";";
						Иначе
							ТекстФайлаДокумент=ТекстФайлаДокумент+СокрЛП(стр.Серия.Номер)+";";
						КонецЕсли;						
						
					Исключение
						ТекстФайлаДокумент=ТекстФайлаДокумент+";";// нет серий
					КонецПопытки;
					
					Попытка
						Если ЕстьКоличествоУпаковок и (НеИспользоватьПересчетУпаковок или СтрокиШаблона[0].НеИспользоватьПересчетУпаковок) тогда
							ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(стр.КоличествоУпаковок,"ЧРД=.; ЧН=0; ЧГ=0")+";";//задание
						Иначе
							ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(стр.Количество,"ЧРД=.; ЧН=0; ЧГ=0")+";";//задание
						КонецЕсли;
	
					Исключение
						ТекстФайлаДокумент=ТекстФайлаДокумент+"999;";// нет количества, но надо работать с документом, например установка цен номенклатуры
					КонецПопытки;
					
					ОстатокДокумент=ПолучитьОстатокДокумент(стр.Номенклатура,стр.Характеристика,ДокументВыгрузки);
					Если ОстатокДокумент=Неопределено Тогда
						ТекстФайлаДокумент=ТекстФайлаДокумент+"0;"+Символы.ПС;//лимит
					Иначе					
						ТекстФайлаДокумент=ТекстФайлаДокумент+ОстатокДокумент+";"+Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СокрЛП(ИмяТЧДокументаПриемка)<>"" тогда
				
				Попытка
					ЕстьКоличествоУпаковок = Метаданные.Документы[ВидДокументаВыгрузки].ТабличныеЧасти[ИмяТЧДокументаПриемка].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено;
				Исключение
					ЕстьКоличествоУпаковок = Ложь;
				КонецПопытки;

				Для каждого стр из ДокументВыгрузки[ИмяТЧДокументаПриемка] Цикл
					ТекстФайлаДокумент=ТекстФайлаДокумент+Стр.НомерСтроки+";I;";//префикс размещения
					Если стр.Характеристика.Пустая() Тогда
						ТекстФайлаДокумент=ТекстФайлаДокумент+"8U-"+СокрЛП(стр.Номенклатура.УникальныйИдентификатор())+"00000000-0000-0000-0000-000000000000"+";";
					Иначе
						ТекстФайлаДокумент=ТекстФайлаДокумент+"8U-"+СокрЛП(стр.Номенклатура.УникальныйИдентификатор())+СокрЛП(стр.Характеристика.УникальныйИдентификатор())+";";
					КонецЕсли;
					
					ТекстФайлаДокумент=ТекстФайлаДокумент+";";  //штрихкод

					
					Попытка
						Если СтрокиШаблона[0].УчитыватьЯчеекВЗаданииПриемка тогда
							//ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(стр.Ячейка))+";";//ячейка
							ТекстФайлаДокумент=ТекстФайлаДокумент+?(ВыгружатьВКодЯчейки=1,стр.Ячейка.Код, Строка(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(стр.Ячейка)))+";";//ячейка
						Иначе
							ТекстФайлаДокумент=ТекстФайлаДокумент+";";// нет ячеек
						КонецЕсли;	
					Исключение
						ТекстФайлаДокумент=ТекстФайлаДокумент+";";// нет ячеек
					КонецПопытки;
					
					Попытка 						
						// серия
						Если СтрокиШаблона[0].ОпределениеСерии = 0 тогда
							ТекстФайлаДокумент=ТекстФайлаДокумент+СокрЛП(стр.Серия.Номер)+";"; 
						ИначеЕсли СтрокиШаблона[0].ОпределениеСерии = 1 тогда
							ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(стр.Серия.ГоденДо,"ДФ=dd.MM.yy")+";"; 
						ИначеЕсли СтрокиШаблона[0].ОпределениеСерии = 4 тогда
							
							СерияGS1 = "";
							Если ЗначениеЗаполнено(стр.Серия.ДатаПроизводства) тогда
								СерияGS1 = СерияGS1 + "[11]" + Формат(стр.Серия.ДатаПроизводства,"ДФ=yyMMdd");
							КонецЕсли;
							
							Если ЗначениеЗаполнено(стр.Серия.ГоденДо) тогда
								СерияGS1 = СерияGS1 + "[17]" + Формат(стр.Серия.ГоденДо,"ДФ=yyMMdd");
							КонецЕсли;
							
							Если ЗначениеЗаполнено(стр.Серия.Номер) тогда
								СерияGS1 = СерияGS1 + "[10]" + СокрЛП(стр.Серия.Номер);	
							КонецЕсли;		
							ТекстФайлаДокумент=ТекстФайлаДокумент+СокрЛП(СерияGS1)+";";
						Иначе
							ТекстФайлаДокумент=ТекстФайлаДокумент+СокрЛП(стр.Серия.Номер)+";";
						КонецЕсли;	
					Исключение
						ТекстФайлаДокумент=ТекстФайлаДокумент+";";// нет серий
					КонецПопытки;
								
					
					Попытка
						
						Если ЕстьКоличествоУпаковок и (НеИспользоватьПересчетУпаковок или СтрокиШаблона[0].НеИспользоватьПересчетУпаковок) тогда
							ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(стр.КоличествоУпаковок,"ЧРД=.; ЧН=0; ЧГ=0")+";";//задание
						Иначе
							ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(стр.Количество,"ЧРД=.; ЧН=0; ЧГ=0")+";";//задание
						КонецЕсли;

					Исключение
						ТекстФайлаДокумент=ТекстФайлаДокумент+"999;";// нет количества, но надо работать с документом, например установка цен номенклатуры
					КонецПопытки;
					
					ТекстФайлаДокумент=ТекстФайлаДокумент+"0;"+Символы.ПС;//лимит (в размещении всегда 0)
					
				КонецЦикла;
			КонецЕсли;
		Иначе
			ЕстьТЧМарок = ДокументВыгрузки.метаданные().ТабличныеЧасти.Найти("АкцизныеМарки") <> Неопределено;
			ЕстьРеквизитИдентификаторСтроки = ДокументВыгрузки.метаданные().ТабличныеЧасти[ИмяТЧДокументаПодбор].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено;
			
			
			Если СокрЛП(ИмяТЧДокументаПодбор)<>"" тогда
				Для каждого стр из ДокументВыгрузки[ИмяТЧДокументаПодбор] Цикл
					КоличествоБезМарок = стр.Количество;
					
					//Марки формат 3.0
					Если ВерсияЕГАИС = 1 и ТипЗнч(ДокументВыгрузки) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
						
						ТЗМарок = ПолучитьМаркиВходящейТТН_ЕГАИС();
						СтруктураПоискаМарок = Новый Структура("АлкогольнаяПродукция,Номенклатура,Характеристика,Серия,Справка2",стр.АлкогольнаяПродукция,стр.Номенклатура,стр.Характеристика,стр.Серия,стр.Справка2);
						СтрокиПоискаМарок = ТЗМарок.НайтиСтроки(СтруктураПоискаМарок);
						
						Для Каждого СтрокаМарок из СтрокиПоискаМарок цикл		
							Если КоличествоБезМарок > 0 тогда
								
								ТекстФайлаДокумент=ТекстФайлаДокумент+Стр.НомерСтроки+";E;";//ЕГАИС
								ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(стр.АлкогольнаяПродукция.Наименование)+";";
								ТекстФайлаДокумент=ТекстФайлаДокумент+"8e-"+стр.АлкогольнаяПродукция.УникальныйИдентификатор()+";";
								ТекстФайлаДокумент=ТекстФайлаДокумент+СокрЛП(стр.АлкогольнаяПродукция.Код)+";";
								ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(стр.АлкогольнаяПродукция.Производитель.Наименование)+";";
								ТекстФайлаДокумент=ТекстФайлаДокумент+";";//Импортер не используется
								ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(стр.АлкогольнаяПродукция.Объем,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+";";
								ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(стр.АлкогольнаяПродукция.Крепость,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+";";
								ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(стр.АлкогольнаяПродукция.ВидПродукции.Наименование)+";";
								ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(1,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+";";
								ТекстФайлаДокумент=ТекстФайлаДокумент+СтрокаМарок.Марка+";";
								ТекстФайлаДокумент=ТекстФайлаДокумент+ТоварСопоставленОдинКОдному(стр.АлкогольнаяПродукция)+";";
								ТекстФайлаДокумент=ТекстФайлаДокумент+"6"+";";//количество единиц в коробе
								ТекстФайлаДокумент=ТекстФайлаДокумент+"1"+";"; //требуется ввод справки А по товару
								ТекстФайлаДокумент=ТекстФайлаДокумент+"1"+";"; //требуется ввод справки Б по товару
								ТекстФайлаДокумент=ТекстФайлаДокумент+"1"+";"; //требуется ввод даты розлива по товару
								
								ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(СтрокаМарок.Палета)+";"; //палета
								ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(СтрокаМарок.Короб)+";"; //короб
								
								
								ТекстФайлаДокумент=ТекстФайлаДокумент+Символы.ПС;
								
								КоличествоБезМарок = КоличествоБезМарок-1;
								
							Иначе
								Продолжить;
							КонецЕсли;  
						КонецЦикла;
					КонецЕсли;
					
					
					Если  КоличествоБезМарок > 0 тогда
						
						ТекстФайлаДокумент=ТекстФайлаДокумент+Стр.НомерСтроки+";E;";//ЕГАИС
						ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(стр.АлкогольнаяПродукция.Наименование)+";";
						
						СписокМарок = СформироватьСписокНепроверяемыхМарокЕГАИС();
						Если СписокМарок.НайтиПоЗначению(стр.АлкогольнаяПродукция.ВидПродукции)<>Неопределено  тогда
							лТекущаяНоменклатура = ПолучитьНоменклатуруПоЕГАИС(стр.АлкогольнаяПродукция);
							ТекстФайлаДокумент=ТекстФайлаДокумент+"8U-"+СокрЛП(лТекущаяНоменклатура.УникальныйИдентификатор())+СокрЛП(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка().УникальныйИдентификатор()); 
						Иначе	 
							ТекстФайлаДокумент=ТекстФайлаДокумент+"8e-"+стр.АлкогольнаяПродукция.УникальныйИдентификатор()+";";
						КонецЕсли;
						
						ТекстФайлаДокумент=ТекстФайлаДокумент+СокрЛП(стр.АлкогольнаяПродукция.Код)+";";							
						ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(стр.АлкогольнаяПродукция.Производитель.Наименование)+";";
						ТекстФайлаДокумент=ТекстФайлаДокумент+";";//Импортер не используется
						ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(стр.АлкогольнаяПродукция.Объем,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+";";
						ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(стр.АлкогольнаяПродукция.Крепость,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+";";
						ТекстФайлаДокумент=ТекстФайлаДокумент+ЧистаяСтрока(стр.АлкогольнаяПродукция.ВидПродукции.Наименование)+";";
						ТекстФайлаДокумент=ТекстФайлаДокумент+Формат(КоличествоБезМарок,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+";";
						ТекстФайлаДокумент=ТекстФайлаДокумент+";"; //марка
						ТекстФайлаДокумент=ТекстФайлаДокумент+ТоварСопоставленОдинКОдному(стр.АлкогольнаяПродукция)+";";
						ТекстФайлаДокумент=ТекстФайлаДокумент+"6"+";";//количество единиц в коробе
						ТекстФайлаДокумент=ТекстФайлаДокумент+"1"+";"; //требуется ввод справки А по товару
						ТекстФайлаДокумент=ТекстФайлаДокумент+"1"+";"; //требуется ввод справки Б по товару
						ТекстФайлаДокумент=ТекстФайлаДокумент+"1"+";"; //требуется ввод даты розлива по товару
						
						ТекстФайлаДокумент=ТекстФайлаДокумент+";"; //палета
						ТекстФайлаДокумент=ТекстФайлаДокумент+";"; //короб
						
						
						ТекстФайлаДокумент=ТекстФайлаДокумент+Символы.ПС;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстФайлаДокумент;
	
КонецФункции

&НаСервере
Функция СформироватьСписокНепроверяемыхМарокЕГАИС()
	
	СписокМарок = Новый СписокЗначений();                                                                     
	
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("261")); //261 Сидр
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("262")); //262 Пуаре
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("263")); //263 Медовуха                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("500")); //500 Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("510")); //510 Пиво с содержанием объемной доли этилового спирта свыше 8,6%                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("520")); //520 Напитки, изготавливаемые на основе пива     
	
	Возврат СписокМарок;
	
КонецФункции

&НаСервере
Функция ПолучитьНоменклатуруПоЕГАИС(НоменклатураЕГАИС)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &НоменклатураЕГАИС
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция";
	Запрос.УстановитьПараметр("НоменклатураЕГАИС",НоменклатураЕГАИС);
	ТаблицаСоответствий =  Запрос.Выполнить().Выгрузить();
	Если ТаблицаСоответствий.Количество() > 0 Тогда
		Возврат ТаблицаСоответствий[0].Номенклатура;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьМаркиВходящейТТН_ЕГАИС()
	
ТЗМарок = Новый ТаблицаЗначений;
ТЗМарок.Колонки.Добавить("АлкогольнаяПродукция");
ТЗМарок.Колонки.Добавить("Марка");
ТЗМарок.Колонки.Добавить("Короб");
ТЗМарок.Колонки.Добавить("Палета");
ТЗМарок.Колонки.Добавить("Номенклатура");
ТЗМарок.Колонки.Добавить("Характеристика");
ТЗМарок.Колонки.Добавить("Серия");
ТЗМарок.Колонки.Добавить("Справка2");
ТЗМарок.Колонки.Добавить("ТипУпаковки");


	
ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ДокументВыгрузки);

//ПЕРВЫЙ УРОВЕНЬ
ТекущаяПалета = "";
ТекущийКороб = "";
Для каждого СтрокаПоДаннымДокументаПервыйУровень Из ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки Цикл
	
	Попытка 
		ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
		ТекущийШтрихкодПервыйУровень = СтрокаПоДаннымДокументаПервыйУровень[ИмяКолонкиШтрихкода];
	Исключение
		ИмяКолонкиШтрихкода = "Штрихкод";
		ТекущийШтрихкодПервыйУровень = СтрокаПоДаннымДокументаПервыйУровень[ИмяКолонкиШтрихкода];
	КонецПопытки;
	Если СтрДлина(ТекущийШтрихкодПервыйУровень)=68 или СтрДлина(ТекущийШтрихкодПервыйУровень)=150 тогда
   		СтрокаМарки = ТЗМарок.Добавить();
    	ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаПервыйУровень);
    	СтрокаМарки.Марка = ТекущийШтрихкодПервыйУровень;
    	СтрокаМарки.Короб = ТекущийКороб;
		СтрокаМарки.Палета = ТекущаяПалета;
	Иначе
		//ВТОРОЙ УРОВЕНЬ       
		ТекущаяПалета = "";
		ТекущийКороб = ТекущийШтрихкодПервыйУровень;
		
		Для каждого СтрокаПоДаннымДокументаВторойУровень Из СтрокаПоДаннымДокументаПервыйУровень.Строки Цикл
			
			Попытка 
		        ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
		        ТекущийШтрихкодВторойУровень = СтрокаПоДаннымДокументаВторойУровень[ИмяКолонкиШтрихкода];
	        Исключение
		        ИмяКолонкиШтрихкода = "Штрихкод";
		        ТекущийШтрихкодВторойУровень = СтрокаПоДаннымДокументаВторойУровень[ИмяКолонкиШтрихкода];
	        КонецПопытки;

			Если СтрДлина(ТекущийШтрихкодВторойУровень)=68 или СтрДлина(ТекущийШтрихкодВторойУровень)=150 тогда
				СтрокаМарки = ТЗМарок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаВторойУровень);
				СтрокаМарки.Марка = ТекущийШтрихкодВторойУровень;
				СтрокаМарки.Короб = ТекущийКороб;
				СтрокаМарки.Палета = ТекущаяПалета;
			Иначе
				//ТРЕТИЙ УРОВЕНЬ
				ТекущаяПалета = ТекущийШтрихкодПервыйУровень;
				ТекущийКороб = ТекущийШтрихкодВторойУровень;	
				Для каждого СтрокаПоДаннымДокументаТретийУровень Из СтрокаПоДаннымДокументаВторойУровень.Строки Цикл
					
					Попытка 
		               ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
		               ТекущийШтрихкодТретийУровень = СтрокаПоДаннымДокументаТретийУровень[ИмяКолонкиШтрихкода];
	                Исключение
		                ИмяКолонкиШтрихкода = "Штрихкод";
		                ТекущийШтрихкодТретийУровень = СтрокаПоДаннымДокументаТретийУровень[ИмяКолонкиШтрихкода];
	                КонецПопытки;

					
					Если СтрДлина(ТекущийШтрихкодТретийУровень)=68 или СтрДлина(ТекущийШтрихкодТретийУровень)=150 тогда
						СтрокаМарки = ТЗМарок.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаТретийУровень);
						СтрокаМарки.Марка = ТекущийШтрихкодТретийУровень;
						СтрокаМарки.Короб = ТекущийКороб;
						СтрокаМарки.Палета = ТекущаяПалета;
					Иначе
						//ДАЛЕЕ ВЛОЖЕННОСТЬ НЕ УЧИТЫВАЕМ
						Продолжить;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
КонецЦикла;


Возврат ТЗМарок;

КонецФункции

// Функция возвращает результат проверки доступности каталогов обмена
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Булево> - Результат проверки.
//
&НаКлиенте
Функция ПроверитьКаталоги(ВидПостОбработки)
	
	Если (лКаталогОбмена = "") И (FTPАдрес = "") И (лКаталогНастроек = "") Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не указаны каталоги обмена и настроек!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если (лКаталогОбмена = "") И (FTPАдрес = "") Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не указан каталог обмена с ТСД!";
		Сообщение.Сообщить();
		Возврат Ложь;
	ИначеЕсли лКаталогНастроек = "" Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не указан каталог хранения настроек!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;

	
	Если ИспользоватьFTP тогда
		КаталогиДоступныFTP();
		Если НЕ КаталогFTPДоступен тогда     
			Возврат Ложь;
		КонецЕсли;
		
		ВыполнитьПостОбработку(ВидПостОбработки);
	Иначе
		
		МассивТСД = Новый Массив;
		
		Если Элементы.СписокТСД.ТекущиеДанные = Неопределено Тогда
			ТекущийТСД = Неопределено;
		Иначе
			ТекущийТСД = Элементы.СписокТСД.ТекущиеДанные.ТСД;
		КонецЕсли;	
		
		МассивТСД.Добавить(СокрЛП(ТекущийТСД));         
		
		ТекКаталог = лКаталогОбмена+МассивТСД[0];
		
		ИмяКаталогаIN=лКаталогОбмена+"DataMobile"+РП+ИДТСД+"in"+РП;
		ИмяКаталогаOUT=лКаталогОбмена+"DataMobile"+РП+ИДТСД+"out"+РП;
		ИмяКаталогаLOG=лКаталогОбмена+"DataMobile"+РП+ИДТСД+"log"+РП;			
		
		ПараметрыВыгрузки = Новый Структура();
		
		ПараметрыВыгрузки.Вставить("ВидПостОбработки",ВидПостОбработки);
		ПараметрыВыгрузки.Вставить("МассивТСД",МассивТСД);
		ПараметрыВыгрузки.Вставить("ВсегоТСД",МассивТСД.Количество());
		
		ПараметрыВыгрузки.Вставить("ТекущийКаталогПроверки","in");
		ПараметрыВыгрузки.Вставить("ТекущийКаталогСоздания","in");
		ПараметрыВыгрузки.Вставить("ТекущийТСД",1);
		ПараметрыВыгрузки.Вставить("ТекКаталог",ТекКаталог);
		
		
		ПараметрыВыгрузки.Вставить("ИмяКаталогаIN",ИмяКаталогаIN);
		ПараметрыВыгрузки.Вставить("ИмяКаталогаOUT",ИмяКаталогаOUT);
		ПараметрыВыгрузки.Вставить("ИмяКаталогаLOG",ИмяКаталогаLOG);
		
		ПараметрыВыгрузки.Вставить("КаталогНаДискеINСуществует",Ложь);
		ПараметрыВыгрузки.Вставить("КаталогНаДискеOUTСуществует",Ложь);
		ПараметрыВыгрузки.Вставить("КаталогНаДискеLOGСуществует",Ложь);
		
		ПараметрыВыгрузки.Вставить("ЗадаватьВопрос",Истина);
		ПараметрыВыгрузки.Вставить("ВсеКаталогиЕсть",Истина);
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение",ЭтаФорма,ПараметрыВыгрузки);
		КаталогНаДискеIN = Новый Файл(ИмяКаталогаIN);
		КаталогНаДискеIN.НачатьПроверкуСуществования(ОписаниеОповещения);
	КонецЕсли;		
	
	КаталогНаДискеНастройки=Новый Файл(лКаталогНастроек);
	КаталогНаДискеНастройки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталогаНастроек_Завершение",ЭтаФорма, Новый Структура("ИмяКаталогаНастроек",лКаталогНастроек)));
	
КонецФункции

&НаКлиенте
Процедура НачатьПроверкуСуществованияКаталогаНастроек_Завершение(Существует, Параметры) Экспорт
	Если НЕ Существует Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталогаНастроек",ЭтаФорма,Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаНастроек);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеКаталогаНастроек(Имя, ДопПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществованияКаталоговОбмена_Завершение(Существует, Параметры) Экспорт
	Если Параметры.ТекущийКаталогПроверки = "in" тогда
		    Если Существует Тогда
				Параметры.КаталогНаДискеINСуществует = Истина;
			КонецЕсли;
			
			Параметры.ТекущийКаталогПроверки = "out";
			КаталогНаДискеOUT = Новый Файл(Параметры.ИмяКаталогаOUT);
			

			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			КаталогНаДискеOUT.НачатьПроверкуСуществования(ОписаниеОповещения);
		ИначеЕсли Параметры.ТекущийКаталогПроверки = "out" тогда
			Если Существует Тогда
				Параметры.КаталогНаДискеOUTСуществует = Истина;
			КонецЕсли;
			
			Параметры.ТекущийКаталогПроверки = "log";
			КаталогНаДискеLOG = Новый Файл(Параметры.ИмяКаталогаLOG);

			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			КаталогНаДискеLOG.НачатьПроверкуСуществования(ОписаниеОповещения);
			
		ИначеЕсли Параметры.ТекущийКаталогПроверки = "log" тогда
			Если Существует Тогда
				Параметры.КаталогНаДискеLOGСуществует = Истина;
			КонецЕсли;
			
			Если НЕ Параметры.КаталогНаДискеINСуществует 
				или НЕ Параметры.КаталогНаДискеOUTСуществует 
				или НЕ  Параметры.КаталогНаДискеLOGСуществует Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСозданияКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
				Если Параметры.ЗадаватьВопрос тогда	
					ТекстВопроса = "Каталог обмена не содержит необходимых директорий для выгрузки\загрузки. Создать?";
					ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);			
				Иначе
					ВыполнитьОбработкуОповещения(ОписаниеОповещения,КодВозвратаДиалога.Да);
				КонецЕсли;
			Иначе
				
				Если Параметры.ТекущийТСД = Параметры.ВсегоТСД тогда
					Если Параметры.ВсеКаталогиЕсть тогда 
						ВыполнитьПостОбработку(Параметры.ВидПостОбработки);	
					КонецЕсли;
					
				Иначе
					//переход к следующему ТСД
					ПеревестиПараметрыНаСледующийТСД_КаталогиОбмена(Параметры);
					
					ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
					КаталогНаДискеIN = Новый Файл(Параметры.ИмяКаталогаIN);
					КаталогНаДискеIN.НачатьПроверкуСуществования(ОписаниеОповещения);
														
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСозданияКаталоговОбмена_Завершение(Результат,Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
				
		Если НЕ Параметры.КаталогНаДискеINСуществует тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаIN);
		ИначеЕсли НЕ Параметры.КаталогНаДискеOUTСуществует тогда
			Параметры.ТекущийКаталогСоздания = "out";
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаOUT);
		ИначеЕсли НЕ Параметры.КаталогНаДискеLOGСуществует тогда
			Параметры.ТекущийКаталогСоздания = "log";
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаLOG);
		КонецЕсли;	
		
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеКаталоговОбмена_Завершение(Каталог,Параметры) Экспорт

	Если Параметры.ТекущийКаталогСоздания = "in" тогда
		Параметры.ТекущийКаталогСоздания = "out";
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаOUT);
	ИначеЕсли Параметры.ТекущийКаталогСоздания = "out" тогда
		Параметры.ТекущийКаталогСоздания = "log";
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаLOG);
	ИначеЕсли Параметры.ТекущийКаталогСоздания = "log" тогда
		
		Если Параметры.ТекущийТСД = Параметры.ВсегоТСД тогда
			Если Параметры.ВсеКаталогиЕсть тогда 
				ВыполнитьПостОбработку(Параметры.ВидПостОбработки);	
			КонецЕсли;
		Иначе			
			//переход к следующему ТСД
			ПеревестиПараметрыНаСледующийТСД_КаталогиОбмена(Параметры);
					
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			КаталогНаДискеIN = Новый Файл(Параметры.ИмяКаталогаIN);
			КаталогНаДискеIN.НачатьПроверкуСуществования(ОписаниеОповещения);

		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ИспользоватьFTP = Ложь;
		Элементы.ИспользоватьFTP.Доступность = Ложь;
	#КонецЕсли
	
	РП = DM_ПолучитьРазделительПути();
	ВидимостьЭлементовНастройкиFTP();

	#Если ВебКлиент Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьКомпонентуЗавершение",ЭтаФорма);
			НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		Иначе
			ПрочитатьШаблоны();
		КонецЕсли;
		
	#Иначе
		Попытка
			ПрочитатьШаблоны();
		Исключение
		Конецпопытки;
	
		Попытка
			ПрочитатьНастройкиАвтозагрузки();
		Исключение
		Конецпопытки;
		
	#КонецЕсли
			
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьШаблоны()
	
	ПрочитатьНастройкиШаблонов();
	ПрочитатьНастройкиПользователей();
	ПрочитатьНастройкиДопШагов();
	ПрочитатьНастройкиСвязиШагов();
	
	Для каждого мд из СоздатьМассивРеквизитов() Цикл //добавление дополнительных атрибутов товара
		Стр=Реквизиты.Добавить();
		Стр.Реквизит=мд;
		Стр.Выгружать="-";
	КонецЦикла;
	
	КоличествоАтрибутов=0;
	Реквизиты.Сортировать("Реквизит");
	ДокументВыгрузки="";
	ШаблонДокументаВыгрузки="";
	КодШаблонаДокументаВыгрузки="";
	ОчиститьКлиентов=Истина;
	ОчиститьСклады=Истина;
	ОчиститьПользователей=Истина;
	ОчиститьТовары=Истина;
	ОчиститьШаблоны=Истина;
	ОчиститьЯчейки=Истина;
	ОчиститьДопШаги=Истина;
	ОчиститьЕИ = Истина;
	ОграничитьТипыДока();
	
	лКаталогОбменаПриИзменении(СписокТСД,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиШаблонов()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_Шаблонов", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_TempLates.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_Шаблонов(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблона", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_TempLates.tab", КодировкаТекста.UTF8);		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиПользователей()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_Пользователей", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_users.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_Пользователей(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблонаПользователей", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_users.tab", КодировкаТекста.UTF8);		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиДопШагов()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_ДопШагов", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_UserBooks.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_ДопШагов(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияДопШагов", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_UserBooks.tab", КодировкаТекста.UTF8);		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиСвязиШагов()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_СвязиШагов", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_StepLinks.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_СвязиШагов(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияСвязиШагов", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_StepLinks.tab", КодировкаТекста.UTF8);		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуЗавершение(ДополнительныеПараметры) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не удалось подключить расширение работы с файлами.
		|Использование обработки в веб режиме не возможно. Перезапустите обработку.'"));
	Иначе
		ПрочитатьШаблоны();
		лКаталогОбменаПриИзменении(СписокТСД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПользователи(Данные)

 ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
 Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
  Пользователи.Загрузить(ДанныеТЗ);
 КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьДанныеШаблоны(Данные)

 ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
 Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
  ШаблоныДокументов.Загрузить(ДанныеТЗ);
 КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПослеЧтенияШаблона(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеШаблоны(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияШаблонаПользователей(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеПользователи(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияДопШагов(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеДопШаги(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияСвязиШагов(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеСвязиШаговШаблонов(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если лКаталогОбмена<>"" тогда
		лКаталогОбмена=лКаталогОбмена+?(прав(лКаталогОбмена,1)=РП,"",РП);
	КонецЕсли;
	Если лКаталогНастроек<>"" тогда
		лКаталогНастроек=лКаталогНастроек+?(прав(лКаталогНастроек,1)=РП,"",РП);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьТипыДока()
	
	
		Элементы.ДокументВыгрузки.ОграничениеТипа=Новый ОписаниеТипов(Создатьмассив());
		
КонецПроцедуры	

&НаСервере
Функция Создатьмассив()
	МассивТипов=Новый Массив;
	Для каждого ДокМ из Метаданные.Документы Цикл
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ВидДокумента",ДокМ.Имя)).Количество()>0 тогда
				Массивтипов.Добавить(Тип("ДокументСсылка."+ДокМ.Имя));
			КонецЕсли;			
	КонецЦикла;
Возврат МассивТипов;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьМассивРеквизитов()
	МассивРеквизитов=Новый Массив;
	Для каждого мд из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
				МассивРеквизитов.Добавить(мд.Синоним);			
	КонецЦикла;
Возврат МассивРеквизитов;
КонецФункции

&НаКлиенте
Процедура РеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка =Ложь;
	Если Элемент.ТекущиеДанные.Выгружать="-" Тогда
		Элемент.ТекущиеДанные.Выгружать="+";
		КоличествоАтрибутов=КоличествоАтрибутов+1;
		Если КоличествоАтрибутов>2 Тогда
			Элемент.ТекущиеДанные.Выгружать="-";
			КоличествоАтрибутов=КоличествоАтрибутов-1;
			ОчиститьСообщения();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Можно выбрать не более двух реквизитов!";
			Сообщение.Сообщить();
		КонецЕсли;		
	Иначе
		Элемент.ТекущиеДанные.Выгружать="-";
		КоличествоАтрибутов=КоличествоАтрибутов-1;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура СписокТСДПриАктивизацииСтроки(Элемент)
	ТД=Элемент.ТекущиеДанные;
	Если ТД=Неопределено тогда
		ИДТСД="";
	Иначе	
		ИДТСД=ТД.ТСД+РП;
		СписокТСДНаименованиеПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПользователиТСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Если Элемент.ТекущийЭлемент.Имя="Пользователь" Тогда //изменение данных пользователя
		
		Значение=Элемент.ТекущиеДанные.Пользователь;
		СтароеЗначение=Значение;
		
		ДопПараметры = ПолучитьДопПараметрыДляВыбора(СтароеЗначение, Элемент.ТекущиеДанные);
		
		ЗапуститьОповещение_ДобавитьПользователя(СтароеЗначение, ДопПараметры);
	КонецЕсли; 
	
	Если Элемент.ТекущийЭлемент.Имя="Login" Тогда
		
		Значение=Элемент.ТекущиеДанные.LOGIN;
		СтароеЗначение=Значение;
		
		ДопПараметры = ПолучитьДопПараметрыДляВыбора(СтароеЗначение, Элемент.ТекущиеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводЛогина", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, Значение,"Введите LOGIN",50);
		
	КонецЕсли; 
	
	Если Элемент.ТекущийЭлемент.Имя="Пароль" Тогда
		
		Значение=Элемент.ТекущиеДанные.Пароль;
		СтароеЗначение=Значение;
		
		ДопПараметры = ПолучитьДопПараметрыДляВыбора(СтароеЗначение, Элемент.ТекущиеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПароля", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, Значение,"Введите ПАРОЛЬ", 10);
		
	КонецЕсли; 
	
	Если Элемент.ТекущийЭлемент.Имя="Админ" Тогда
		
		Значение=Элемент.ТекущиеДанные.Админ;
		СтароеЗначение=Значение;
		
		ДопПараметры = ПолучитьДопПараметрыДляВыбора(СтароеЗначение, Элемент.ТекущиеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПрав", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Права АДМИНИСТРАТОРА (д/н)", 1);
			
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя="РедактированиеТоваров" Тогда
		
		Значение=Элемент.ТекущиеДанные.РедактированиеТоваров;
		СтароеЗначение=Значение;
		
		ДопПараметры = ПолучитьДопПараметрыДляВыбора(СтароеЗначение, Элемент.ТекущиеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводРедактированиеТоваров", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Права редактирования товаров (д/н)", 1);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДопПараметрыДляВыбора(СтароеЗначение, ТекущиеДанные)
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ЭтоВыбор"			, );
	ДопПараметры.Вставить("СтароеЗначение"	, СтароеЗначение);
	ДопПараметры.Вставить("ТекущиеДанные"	, ТекущиеДанные);
	
	Возврат ДопПараметры;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПользователя(Команда)
	Значение="";
	
	ЗапуститьОповещение_ДобавитьПользователя(Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОповещение_ДобавитьПользователя(Значение, ДопПараметры = Неопределено)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводЗначения_ДобавитьПользователя", ЭтаФорма, ДопПараметры);
	ПоказатьВводЗначения(ОписаниеОповещения, Значение, "Выберите пользователя", Тип("СправочникСсылка.Пользователи"));	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьВводЗначения_ДобавитьПользователя(ВыбЗначение, ДопПараметры) Экспорт
	
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("ЭтоВыбор") Тогда
			Если ВыбЗначение = Неопределено Тогда
				ДопПараметры.ТекущиеДанные.Пользователь = ДопПараметры.СтароеЗначение;
			Иначе
				ДопПараметры.ТекущиеДанные.Пользователь = ВыбЗначение;
			КонецЕсли;	
			Возврат;	
		КонецЕсли; 	
	КонецЕсли; 
	
	Если ВыбЗначение = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Стр=Пользователи.Добавить();//заполнение данных пользователя	
	Стр.Пользователь=ВыбЗначение;
	
	ДопПараметр = Новый Структура;
	ДопПараметр.Вставить("Стр", Стр);
	
	Значение="";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводЛогина", ЭтаФорма, ДопПараметр);
	ПоказатьВводСтроки(ОписаниеОповещения, Значение,"Введите LOGIN",50);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСтроки_ВводЛогина(ВыбЗначение, ДопПараметры) Экспорт
	
	Если ДопПараметры.Свойство("ЭтоВыбор") Тогда
		
		Если ВыбЗначение="" Или ВыбЗначение = Неопределено Тогда
			ДопПараметры.ТекущиеДанные.Login = ДопПараметры.СтароеЗначение;
		Иначе
			ДопПараметры.ТекущиеДанные.Login = ВыбЗначение;
		КонецЕсли;
		
		Возврат;
	КонецЕсли; 
	
	Если СокрЛП(ВыбЗначение) = "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводЛогина", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ВыбЗначение, "Введите LOGIN",50);
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не введен LOGIN!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
		
	ДопПараметры.Стр.Login=ВыбЗначение;
	
	Значение="";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПароля", ЭтаФорма, ДопПараметры);
	ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Введите ПАРОЛЬ", 10);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСтроки_ВводПароля(ВыбЗначение, ДопПараметры) Экспорт
	
	Если ДопПараметры.Свойство("ЭтоВыбор") Тогда
		
		Если ВыбЗначение="" Или ВыбЗначение = Неопределено Тогда
			ДопПараметры.ТекущиеДанные.Пароль = ДопПараметры.СтароеЗначение;
		Иначе
			ДопПараметры.ТекущиеДанные.Пароль = ВыбЗначение;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ВыбЗначение) = "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПароля", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ВыбЗначение, "Введите ПАРОЛЬ", 10);
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не введен ПАРОЛЬ!";
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли; 
		
	ДопПараметры.Стр.Пароль=ВыбЗначение;
	
	Значение="";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПрав", ЭтаФорма, ДопПараметры);
	ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Права АДМИНИСТРАТОРА (д/н)", 1);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСтроки_ВводПрав(ВыбЗначение, ДопПараметры) Экспорт
	
	Если СокрЛП(ВыбЗначение) = "" ИЛИ ((ВыбЗначение<>"Д")и (ВыбЗначение<>"д")и (ВыбЗначение<>"Н")и (ВыбЗначение<>"н")) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПрав", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ВыбЗначение, "Права АДМИНИСТРАТОРА (д/н)", 1);
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не указаны права администратора!";
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли; 
	
	Если ДопПараметры.Свойство("ЭтоВыбор") Тогда
		
		Если ((ВыбЗначение<>"Д")и (ВыбЗначение<>"д")и (ВыбЗначение<>"Н")и (ВыбЗначение<>"н")) Тогда
			ДопПараметры.ТекущиеДанные.Админ=?((ДопПараметры.СтароеЗначение="Д")или (ДопПараметры.СтароеЗначение="д"),"да","нет");
		Иначе
			ДопПараметры.ТекущиеДанные.Админ=?((ВыбЗначение="Д")или (ВыбЗначение="д"),"да","нет");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Стр.Админ=?((ВыбЗначение="Д") или (ВыбЗначение="д"),"да","нет");
	
	Значение="";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводРедактированиеТоваров", ЭтаФорма, ДопПараметры);
	ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Права редактирования товаров (д/н)", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСтроки_ВводРедактированиеТоваров(ВыбЗначение, ДопПараметры) Экспорт
	
	Если СокрЛП(ВыбЗначение) = "" ИЛИ ((ВыбЗначение<>"Д")и (ВыбЗначение<>"д")и (ВыбЗначение<>"Н")и (ВыбЗначение<>"н")) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводРедактированиеТоваров", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ВыбЗначение, "Права редактирования товаров (д/н)", 1);
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не указаны права редактирования товаров!";
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли; 
	
	Если ДопПараметры.Свойство("ЭтоВыбор") Тогда
		
		Если ((ВыбЗначение<>"Д")и (ВыбЗначение<>"д")и (ВыбЗначение<>"Н")и (ВыбЗначение<>"н")) Тогда
			ДопПараметры.ТекущиеДанные.РедактированиеТоваров=?((ДопПараметры.СтароеЗначение="Д")или (ДопПараметры.СтароеЗначение="д"),"да","нет");
		Иначе
			ДопПараметры.ТекущиеДанные.РедактированиеТоваров=?((ВыбЗначение="Д")или (ВыбЗначение="д"),"да","нет");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Стр.РедактированиеТоваров=?((ВыбЗначение="Д") или (ВыбЗначение="д"),"да","нет");
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПользователя(Команда)
	ИндексТекущегоЭлементаКоллекции = Пользователи.Индекс(Элементы.Пользователи.ТекущиеДанные);
	Попытка
		Пользователи.Удалить(ИндексТекущегоЭлементаКоллекции);
	Исключение
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не выбран пользователь для удаления!";
		Сообщение.Сообщить();
	КонецПопытки;	

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТовары(Команда) Экспорт
	ПроверитьКаталоги("ВыгрузитьТовары");
КонецПроцедуры


// Процедура заполняет для выгрузки таблицы товаров и штрихкодов
//
// Параметры
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 1
//
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 2	
//
&НаСервере
Функция ЗаполнитьТаблицуТовары()
	
	ЗапросТоваров=Новый Запрос();
	ЗапросТоваров.УстановитьПараметр("Товар",ВыбраннаяГруппаТовара);
	ЗапросТоваров.УстановитьПараметр("ВсеТовары",Ложь);
	Если ВыбраннаяГруппаТовара.Пустая() тогда
		ЗапросТоваров.УстановитьПараметр("ВсеТовары",Истина);
	КонецЕсли;
	

		Если НЕ ЗначениеЗаполнено(СкладОстатков) Тогда		
			ЗапросТоваров.УстановитьПараметр("ВсеСклады", Истина);
			ЗапросТоваров.УстановитьПараметр("Склад", СкладОстатков);
		Иначе	
			ЗапросТоваров.УстановитьПараметр("ВсеСклады", Ложь);
			ЗапросТоваров.УстановитьПараметр("Склад", СкладОстатков);
		КонецЕсли;
	

	Если ТолькоТоварыСоШтрихкодами тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	Ячейки.Номенклатура КАК Номенклатура,
	             |	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
	             |ПОМЕСТИТЬ СписокЯчеек
	             |ИЗ
	             |	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Ячейки.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	             |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	             |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	             |ПОМЕСТИТЬ ОстаткиНоменклатуры
	             |ИЗ
	             |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	             |			,
	             |			(Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
	             |				И (Склад = &Склад ИЛИ &ВсеСклады)) КАК ТоварыНаСкладахОстатки
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Номенклатура,
	             |	Характеристика
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	             |ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			(Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
	             |				И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Номенклатура,
	             |	Характеристика
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	ШтрихкодыНоменклатуры.Номенклатура КАК Ссылка,
	             |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, &Пустая) КАК СсылкаХарактеристика,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления, ЛОЖЬ)
	             |				ИЛИ ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика.ПометкаУдаления, ЛОЖЬ)
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК Удалить,
	             |	ВЫБОР
	             |		КОГДА НЕ ШтрихкодыНоменклатуры.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА ШтрихкодыНоменклатуры.Характеристика ЕСТЬ NULL
	             |					ТОГДА ЛОЖЬ
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ
	             |	КОНЕЦ КАК ЭтоХарактеристика,
	             |	ШтрихкодыНоменклатуры.Номенклатура.Наименование + "" "" + ВЫБОР
	             |		КОГДА НЕ ШтрихкодыНоменклатуры.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА """"
	             |		ИНАЧЕ ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика.Наименование, """")
	             |	КОНЕЦ КАК Товар,
	             |	&Атрибут1 КАК Атрибут1,
	             |	&Атрибут2 КАК Атрибут2,
	             |	&Атрибут3 КАК Атрибут3,
	             |	&Атрибут4 КАК Атрибут4,
	             |	&Атрибут5 КАК Атрибут5,
	             |	&Атрибут6 КАК Атрибут6,
	             |	&Атрибут7 КАК Атрибут7,
	             |	&Атрибут8 КАК Атрибут8,
	             |	&Атрибут9 КАК Атрибут9,
	             |	&Атрибут0 КАК Атрибут10,
	             |	ЕСТЬNULL(ОстаткиНоменклатуры.ВНаличииОстаток, 0) КАК Остаток,
	             |	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
	             |	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии
	             |ИЗ
	             |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	             |		ПО ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
	             |		ПО (СписокЯчеек.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	             |		ПО ШтрихкодыНоменклатуры.Номенклатура = ОстаткиНоменклатуры.Номенклатура
	             |			И (ОстаткиНоменклатуры.Характеристика = ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, &Пустая))
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	             |		ПО ШтрихкодыНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	             |			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, &Пустая))
	             |ГДЕ
	             |	НЕ ШтрихкодыНоменклатуры.Номенклатура.ЭтоГруппа
	             |	И НЕ ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления
	             |	И ШтрихкодыНоменклатуры.Номенклатура.Наименование <> """"
	             |	И (ШтрихкодыНоменклатуры.Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
	             |	И 1 = 1
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ШтрихкодыНоменклатуры.Номенклатура,
	             |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, &Пустая),
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления, ЛОЖЬ)
	             |				ИЛИ ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика.ПометкаУдаления, ЛОЖЬ)
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ,
	             |	ШтрихкодыНоменклатуры.Номенклатура.Наименование + "" "" + ВЫБОР
	             |		КОГДА НЕ ШтрихкодыНоменклатуры.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА """"
	             |		ИНАЧЕ ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика.Наименование, """")
	             |	КОНЕЦ,
	             |	ВЫБОР
	             |		КОГДА НЕ ШтрихкодыНоменклатуры.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА ШтрихкодыНоменклатуры.Характеристика ЕСТЬ NULL
	             |					ТОГДА ЛОЖЬ
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ
	             |	КОНЕЦ,
	             |	ВидыНоменклатуры.ИспользоватьСерии,
	             |	ЕСТЬNULL(ОстаткиНоменклатуры.ВНаличииОстаток, 0),
				 |	ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ШтрихкодыНоменклатуры.Номенклатура";
	
	ЗапросТоваров.Текст=ТекстЗапроса;
	
	Если (Атрибут1<>"")И(Атрибут1<>"!!! Ячейки !!!")И(Атрибут1<>"!!! Остатки !!!")И(ЛЕВ(Атрибут1,3) <> "ДР_")  тогда
		Если (Атрибут1="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут1="НаименованиеПолное") ИЛИ (Атрибут1="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","ВЫРАЗИТЬ (ШтрихкодыНоменклатуры.Номенклатура."+Атрибут1+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","ШтрихкодыНоменклатуры.Номенклатура."+Атрибут1);
		КонецЕсли;
	ИначеЕсли Атрибут1="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","""""");
	КонецЕсли;	
	Если (Атрибут2<>"")И(Атрибут2<>"!!! Ячейки !!!")И(Атрибут2<>"!!! Остатки !!!")И(ЛЕВ(Атрибут2,3) <> "ДР_")   тогда
		Если (Атрибут2="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут2="НаименованиеПолное") ИЛИ (Атрибут2="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","ВЫРАЗИТЬ (ШтрихкодыНоменклатуры.Номенклатура."+Атрибут2+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","ШтрихкодыНоменклатуры.Номенклатура."+Атрибут2);
		КонецЕсли;
	ИначеЕсли Атрибут2="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","""""");
	КонецЕсли;	
	Если (Атрибут3<>"")И(Атрибут3<>"!!! Ячейки !!!")И(Атрибут3<>"!!! Остатки !!!")И(ЛЕВ(Атрибут3,3) <> "ДР_")   тогда
		Если (Атрибут3="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут3="НаименованиеПолное") ИЛИ (Атрибут3="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","ВЫРАЗИТЬ (ШтрихкодыНоменклатуры.Номенклатура."+Атрибут3+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","ШтрихкодыНоменклатуры.Номенклатура."+Атрибут3);
		КонецЕсли;
	ИначеЕсли Атрибут3="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","""""");
	КонецЕсли;	
	Если (Атрибут4<>"")И(Атрибут4<>"!!! Ячейки !!!")И(Атрибут4<>"!!! Остатки !!!")И(ЛЕВ(Атрибут4,3) <> "ДР_")   тогда
		Если (Атрибут4="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут4="НаименованиеПолное") ИЛИ (Атрибут4="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","ВЫРАЗИТЬ (ШтрихкодыНоменклатуры.Номенклатура."+Атрибут4+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","ШтрихкодыНоменклатуры.Номенклатура."+Атрибут4);
		КонецЕсли;
	ИначеЕсли Атрибут4="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","""""");
	КонецЕсли;	
	
	Если (Атрибут5<>"")И(Атрибут5<>"!!! Ячейки !!!")И(Атрибут5<>"!!! Остатки !!!")И(ЛЕВ(Атрибут5,3) <> "ДР_")   тогда
		Если (Атрибут5="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут5="НаименованиеПолное") ИЛИ (Атрибут5="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","ВЫРАЗИТЬ (ШтрихкодыНоменклатуры.Номенклатура."+Атрибут5+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","ШтрихкодыНоменклатуры.Номенклатура."+Атрибут5);
		КонецЕсли;
	ИначеЕсли Атрибут5="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","""""");
	КонецЕсли;	
	
	Если (Атрибут6<>"")И(Атрибут6<>"!!! Ячейки !!!")И(Атрибут6<>"!!! Остатки !!!")И(ЛЕВ(Атрибут6,3) <> "ДР_")   тогда
		Если (Атрибут6="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут6="НаименованиеПолное") ИЛИ (Атрибут6="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","ВЫРАЗИТЬ (ШтрихкодыНоменклатуры.Номенклатура."+Атрибут6+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","ШтрихкодыНоменклатуры.Номенклатура."+Атрибут6);
		КонецЕсли;
	ИначеЕсли Атрибут6="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","""""");
	КонецЕсли;	
	
	Если (Атрибут7<>"")И(Атрибут7<>"!!! Ячейки !!!")И(Атрибут7<>"!!! Остатки !!!")И(ЛЕВ(Атрибут7,3) <> "ДР_")   тогда
		Если (Атрибут7="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут7="НаименованиеПолное") ИЛИ (Атрибут7="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","ВЫРАЗИТЬ (ШтрихкодыНоменклатуры.Номенклатура."+Атрибут7+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","ШтрихкодыНоменклатуры.Номенклатура."+Атрибут7);
		КонецЕсли;
	ИначеЕсли Атрибут7="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","""""");
	КонецЕсли;	
	
	Если (Атрибут8<>"")И(Атрибут8<>"!!! Ячейки !!!")И(Атрибут8<>"!!! Остатки !!!")И(ЛЕВ(Атрибут8,3) <> "ДР_")   тогда
		Если (Атрибут8="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут8="НаименованиеПолное") ИЛИ (Атрибут8="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","ВЫРАЗИТЬ (ШтрихкодыНоменклатуры.Номенклатура."+Атрибут8+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","ШтрихкодыНоменклатуры.Номенклатура."+Атрибут8);
		КонецЕсли;
	ИначеЕсли Атрибут8="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","""""");
	КонецЕсли;	
	
	Если (Атрибут9<>"")И(Атрибут9<>"!!! Ячейки !!!")И(Атрибут9<>"!!! Остатки !!!")И(ЛЕВ(Атрибут9,3) <> "ДР_")   тогда
		Если (Атрибут9="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут9="НаименованиеПолное") ИЛИ (Атрибут9="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","ВЫРАЗИТЬ (ШтрихкодыНоменклатуры.Номенклатура."+Атрибут9+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","ШтрихкодыНоменклатуры.Номенклатура."+Атрибут9);
		КонецЕсли;
	ИначеЕсли Атрибут9="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","""""");
	КонецЕсли;	
	
	Если (Атрибут10<>"")И(Атрибут10<>"!!! Ячейки !!!")И(Атрибут10<>"!!! Остатки !!!")И(ЛЕВ(Атрибут10,3) <> "ДР_")   тогда
		Если (Атрибут10="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут10="НаименованиеПолное") ИЛИ (Атрибут10="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","ВЫРАЗИТЬ (ШтрихкодыНоменклатуры.Номенклатура."+Атрибут10+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","ШтрихкодыНоменклатуры.Номенклатура."+Атрибут10);
		КонецЕсли;
	ИначеЕсли Атрибут10="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","""""");
	КонецЕсли;	


	Иначе

	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				 //ВЫБОРКА ССЫЛОК ТОВАРОВ И ХАРАКТЕРИСТИК ПО РАЗНЫМ УСЛОВИЯМ ВЕДЕНИЯ ХАРАКТЕРИСТИК 
				 |	Номенклатура.Ссылка КАК Номенклатура,
				 |	Номенклатура.ВесИспользовать КАК Весовой,
				 |	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
				 |ПОМЕСТИТЬ СписокТоваровОбщий
				 |ИЗ
				 | 	Справочник.Номенклатура КАК Номенклатура
				 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				 |			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
				 |			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
				 |			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
				 |			И НЕ &ИгнорироватьХарактеристики
				 |ГДЕ
				 |	НЕ Номенклатура.ЭтоГруппа
				 |	И НЕ Номенклатура.ПометкаУдаления
				 |	И Номенклатура.Наименование <> """"
				 |	И (Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
				 |
				 |ОБЪЕДИНИТЬ
				 |	
				 |ВЫБРАТЬ РАЗЛИЧНЫЕ
				 |	Номенклатура.Ссылка КАК Номенклатура,
				 |	Номенклатура.ВесИспользовать,
				 |	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
				 |ИЗ
				 |	Справочник.Номенклатура КАК Номенклатура
				 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				 |			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры
				 |			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
				 |			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
				 |			И НЕ &ИгнорироватьХарактеристики
				 |ГДЕ
				 |	НЕ Номенклатура.ЭтоГруппа
				 |	И НЕ Номенклатура.ПометкаУдаления
				 |	И Номенклатура.Наименование <> """"
				 |	И (Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
				 |	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL   
				 |
				 |ОБЪЕДИНИТЬ
				 |
				 |ВЫБРАТЬ РАЗЛИЧНЫЕ
				 |	Номенклатура.Ссылка КАК Номенклатура,
				 |	Номенклатура.ВесИспользовать,
				 |	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
				 |ИЗ
				 |	Справочник.Номенклатура КАК Номенклатура
				 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				 |			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВладелецХарактеристик
				 |			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
				 |			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
				 |			И НЕ &ИгнорироватьХарактеристики
				 |ГДЕ
				 |	НЕ Номенклатура.ЭтоГруппа
				 |	И НЕ Номенклатура.ПометкаУдаления
				 |	И Номенклатура.Наименование <> """"
				 |	И (Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
				 |	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL	
				 |	
				 |;
				 |////////////////////////////////////////////////////////////////////////////////
				 |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	Ячейки.Номенклатура КАК Номенклатура,
	             |	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
	             |ПОМЕСТИТЬ СписокЯчеек
	             |ИЗ
	             |	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Ячейки.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	             |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	             |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	             |ПОМЕСТИТЬ ОстаткиНоменклатуры
	             |ИЗ
	             |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	             |			,
	             |			(Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
	             |					И (Склад = &Склад ИЛИ &ВсеСклады)) КАК ТоварыНаСкладахОстатки
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Номенклатура,
	             |	Характеристика
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	             |ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			(Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
	             |				И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Номенклатура,
	             |	Характеристика
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	СписокТоваровОбщий.Номенклатура КАК Ссылка,
	             |	СписокТоваровОбщий.Характеристика КАК СсылкаХарактеристика,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(СписокТоваровОбщий.Номенклатура.ПометкаУдаления, ЛОЖЬ)
	             |				ИЛИ ЕСТЬNULL(СписокТоваровОбщий.Характеристика.ПометкаУдаления, ЛОЖЬ)
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК Удалить,
	             |	ВЫБОР
	             |		КОГДА СписокТоваровОбщий.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ 
				 |			ИСТИНА
	             |	КОНЕЦ КАК ЭтоХарактеристика,
				 |	СписокТоваровОбщий.Номенклатура.Наименование + "" "" + ЕСТЬNULL(СписокТоваровОбщий.Характеристика.Наименование,"""") КАК Товар,
	             |	&Атрибут1 КАК Атрибут1,
	             |	&Атрибут2 КАК Атрибут2,
	             |	&Атрибут3 КАК Атрибут3,
	             |	&Атрибут4 КАК Атрибут4,
	             |	&Атрибут5 КАК Атрибут5,
	             |	&Атрибут6 КАК Атрибут6,
	             |	&Атрибут7 КАК Атрибут7,
	             |	&Атрибут8 КАК Атрибут8,
	             |	&Атрибут9 КАК Атрибут9,
	             |	&Атрибут0 КАК Атрибут10,
	             |	СУММА(ЕСТЬNULL(ОстаткиНоменклатуры.ВНаличииОстаток, 0)) КАК Остаток,
	             |	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
	             |	ЕСТЬNULL(СписокТоваровОбщий.Номенклатура.ВидНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии
	             |ИЗ
	             |	СписокТоваровОбщий КАК СписокТоваровОбщий
	             |		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
	             |			ПО (СписокЯчеек.Номенклатура = СписокТоваровОбщий.Номенклатура)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	             |			ПО (ОстаткиНоменклатуры.Номенклатура = СписокТоваровОбщий.Номенклатура)
	             |				И (ОстаткиНоменклатуры.Характеристика = СписокТоваровОбщий.Характеристика)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	             |			ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = СписокТоваровОбщий.Номенклатура)
	             |				И (ЦеныНоменклатурыСрезПоследних.Характеристика = СписокТоваровОбщий.Характеристика)
				 |ГДЕ
				 |	1 = 1
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СписокТоваровОбщий.Номенклатура,
	             |	СписокТоваровОбщий.Характеристика,
				 |	ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	СписокТоваровОбщий.Номенклатура";
	
	ЗапросТоваров.Текст=ТекстЗапроса;
	Если (Атрибут1<>"")И(Атрибут1<>"!!! Ячейки !!!")И(Атрибут1<>"!!! Остатки !!!")И(ЛЕВ(Атрибут1,3) <> "ДР_")   тогда
		Если (Атрибут1="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут1="НаименованиеПолное") ИЛИ (Атрибут1="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","ВЫРАЗИТЬ (СписокТоваровОбщий.Номенклатура."+Атрибут1+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","СписокТоваровОбщий.Номенклатура."+Атрибут1);
		КонецЕсли;
	ИначеЕсли Атрибут1="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","""""");
	КонецЕсли;	
	Если (Атрибут2<>"")И(Атрибут2<>"!!! Ячейки !!!")И(Атрибут2<>"!!! Остатки !!!")И(ЛЕВ(Атрибут2,3) <> "ДР_")   тогда
		Если (Атрибут2="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут2="НаименованиеПолное") ИЛИ (Атрибут2="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","ВЫРАЗИТЬ (СписокТоваровОбщий.Номенклатура."+Атрибут2+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","СписокТоваровОбщий.Номенклатура."+Атрибут2);
		КонецЕсли;
	ИначеЕсли Атрибут2="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","""""");
	КонецЕсли;	
	Если (Атрибут3<>"")И(Атрибут3<>"!!! Ячейки !!!")И(Атрибут3<>"!!! Остатки !!!")И(ЛЕВ(Атрибут3,3) <> "ДР_")   тогда
		Если (Атрибут3="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут3="НаименованиеПолное") ИЛИ (Атрибут3="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","ВЫРАЗИТЬ (СписокТоваровОбщий.Номенклатура."+Атрибут3+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","СписокТоваровОбщий.Номенклатура."+Атрибут3);
		КонецЕсли;
	ИначеЕсли Атрибут3="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","""""");
	КонецЕсли;	
	Если (Атрибут4<>"")И(Атрибут4<>"!!! Ячейки !!!")И(Атрибут4<>"!!! Остатки !!!")И(ЛЕВ(Атрибут4,3) <> "ДР_")   тогда
		Если (Атрибут4="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут4="НаименованиеПолное") ИЛИ (Атрибут4="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","ВЫРАЗИТЬ (СписокТоваровОбщий.Номенклатура."+Атрибут4+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","СписокТоваровОбщий.Номенклатура."+Атрибут4);
		КонецЕсли;
	ИначеЕсли Атрибут4="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","""""");
	КонецЕсли;	
	
	Если (Атрибут5<>"")И(Атрибут5<>"!!! Ячейки !!!")И(Атрибут5<>"!!! Остатки !!!")И(ЛЕВ(Атрибут5,3) <> "ДР_")   тогда
		Если (Атрибут5="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут5="НаименованиеПолное") ИЛИ (Атрибут5="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","ВЫРАЗИТЬ (СписокТоваровОбщий.Номенклатура."+Атрибут5+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","СписокТоваровОбщий.Номенклатура."+Атрибут5);
		КонецЕсли;
	ИначеЕсли Атрибут5="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","""""");
	КонецЕсли;	
	
	Если (Атрибут6<>"")И(Атрибут6<>"!!! Ячейки !!!")И(Атрибут6<>"!!! Остатки !!!")И(ЛЕВ(Атрибут6,3) <> "ДР_")   тогда
		Если (Атрибут6="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут6="НаименованиеПолное") ИЛИ (Атрибут6="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","ВЫРАЗИТЬ (СписокТоваровОбщий.Номенклатура."+Атрибут6+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","СписокТоваровОбщий.Номенклатура."+Атрибут6);
		КонецЕсли;
	ИначеЕсли Атрибут6="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","""""");
	КонецЕсли;	
	
	Если (Атрибут7<>"")И(Атрибут7<>"!!! Ячейки !!!")И(Атрибут7<>"!!! Остатки !!!")И(ЛЕВ(Атрибут7,3) <> "ДР_")   тогда
		Если (Атрибут7="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут7="НаименованиеПолное") ИЛИ (Атрибут7="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","ВЫРАЗИТЬ (СписокТоваровОбщий.Номенклатура."+Атрибут7+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","СписокТоваровОбщий.Номенклатура."+Атрибут7);
		КонецЕсли;
	ИначеЕсли Атрибут7="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","""""");
	КонецЕсли;	
	
	Если (Атрибут8<>"")И(Атрибут8<>"!!! Ячейки !!!")И(Атрибут8<>"!!! Остатки !!!")И(ЛЕВ(Атрибут8,3) <> "ДР_")   тогда
		Если (Атрибут8="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут8="НаименованиеПолное") ИЛИ (Атрибут8="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","ВЫРАЗИТЬ (СписокТоваровОбщий.Номенклатура."+Атрибут8+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","СписокТоваровОбщий.Номенклатура."+Атрибут8);
		КонецЕсли;
	ИначеЕсли Атрибут8="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","""""");
	КонецЕсли;	
	
	Если (Атрибут9<>"")И(Атрибут9<>"!!! Ячейки !!!")И(Атрибут9<>"!!! Остатки !!!")И(ЛЕВ(Атрибут9,3) <> "ДР_")   тогда
		Если (Атрибут9="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут9="НаименованиеПолное") ИЛИ (Атрибут9="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","ВЫРАЗИТЬ (СписокТоваровОбщий.Номенклатура."+Атрибут9+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","СписокТоваровОбщий.Номенклатура."+Атрибут9);
		КонецЕсли;
	ИначеЕсли Атрибут9="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","""""");
	КонецЕсли;	
	
	Если (Атрибут10<>"")И(Атрибут10<>"!!! Ячейки !!!")И(Атрибут10<>"!!! Остатки !!!")И(ЛЕВ(Атрибут10,3) <> "ДР_")   тогда
		Если (Атрибут10="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут10="НаименованиеПолное") ИЛИ (Атрибут10="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","ВЫРАЗИТЬ (СписокТоваровОбщий.Номенклатура."+Атрибут10+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","СписокТоваровОбщий.Номенклатура."+Атрибут10);
		КонецЕсли;
	ИначеЕсли Атрибут10="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","""""");
	КонецЕсли;	


	КонецЕсли;

	
	ЗапросТоваров.УстановитьПараметр("ИгнорироватьХарактеристики",ИгнорироватьХарактеристики);
	//ЗапросТоваров.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать);
	ЗапросТоваров.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	ЗапросТоваров.УстановитьПараметр("Пустая",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	
	Если ТолькоОстатки тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"1 = 1","ЕСТЬNULL(ОстаткиНоменклатуры.ВНаличииОстаток, 0) > 0");
	КонецЕсли;
	
	
	ЗапросТоваров.УстановитьПараметр("ТипЦен",ВыбранныйТипЦен);
	
	ДанныеТовары = ЗапросТоваров.Выполнить().Выгрузить();
    АдресДанныхТовары = ПоместитьВоВременноеХранилище(ДанныеТовары, УникальныйИдентификатор);
	Товары.Загрузить(ДанныеТовары);
	Возврат АдресДанныхТовары;
КонецФункции  

// Процедура заполняет для выгрузки таблицы товаров и штрихкодов
//
// Параметры
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 1
//
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 2	
//
&НаСервере
Функция ЗаполнитьТаблицуШтрихкоды()
	//Для каждого мд из Метаданные.Справочники.Номенклатура.Реквизиты Цикл //поиск имени по синониму
	//			Если мд.Синоним=Атрибут1 тогда
	//				Атрибут1=ЧистаяСтрока(мд.Имя);
	//			КонецЕсли;
	//			Если мд.Синоним=Атрибут2 тогда
	//				Атрибут2=ЧистаяСтрока(мд.Имя);
	//			КонецЕсли;
	//КонецЦикла;
	
	ЗапросШтрихкодов=Новый Запрос();
	ЗапросШтрихкодов.УстановитьПараметр("Товар",ВыбраннаяГруппаТовара);
	ЗапросШтрихкодов.УстановитьПараметр("ВсеТовары",Ложь);
	Если ВыбраннаяГруппаТовара.Пустая() тогда
		ЗапросШтрихкодов.УстановитьПараметр("ВсеТовары",Истина);
	КонецЕсли;	
	ТекстЗапроса="ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК ШтрихКод,
	|	Штрихкоды.Упаковка.Ссылка КАК Ссылка,				 
	|	ВЫБОР
	|		КОГДА 
	|					НЕ (Штрихкоды.Номенклатура.ИспользованиеХарактеристик<>&НеИспользовать) ИЛИ 
	|				&ИгнорироватьХарактеристики
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК ЭтоХарактеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         		ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1)
	|	КОНЕЦ  КАК КФ,
	|	Штрихкоды.Номенклатура КАК СсылкаПапЫ,
	|	Штрихкоды.Характеристика КАК СсылкаХарактеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Штрихкоды.Упаковка.Наименование 
	|	КОНЕЦ  КАК ЕИ,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА Ложь
	|		ИНАЧЕ Штрихкоды.Упаковка.ПометкаУдаления 
	|	КОНЕЦ  КАК Удалить
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	(Штрихкоды.Номенклатура В (&СписокТоваров)
	|			ИЛИ Штрихкоды.Характеристика В (&СписокТоваров))
	|
	|";
					 
	
	ЗапросШтрихКодов.Текст=ТекстЗапроса;
	ЗапросШтрихКодов.УстановитьПараметр("ИгнорироватьХарактеристики",ИгнорироватьХарактеристики);
	ЗапросШтрихКодов.УстановитьПараметр("СписокТоваров",Товары.Выгрузить(,"Ссылка"));
	ЗапросШтрихКодов.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	//ЗапросШтрихКодов.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать);
	
	ДанныеШтрихкоды      = ЗапросШтрихкодов.Выполнить().Выгрузить();
    АдресДанныхШтрихкоды = ПоместитьВоВременноеХранилище(ДанныеШтрихкоды, УникальныйИдентификатор);	
	ШтрихКоды.Загрузить(ДанныеШтрихкоды);
	Возврат АдресДанныхШтрихкоды;

КонецФункции  


&НаСервере
Функция ЗаполнитьТаблицуТоварыИзДокумента(ДокументВыгрузки)

	
	ЗапросТоваров=Новый Запрос();
	ТекстЗапроса="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ТоварыПодбор.Номенклатура КАК Номенклатура,
	             |	ТоварыПодбор.Характеристика КАК Характеристика
	             |ПОМЕСТИТЬ СписокТоваров
	             |ИЗ
	             |	Документ.РеализацияТоваровУслуг.Товары КАК ТоварыПодбор
	             |ГДЕ
	             |	ТоварыПодбор.Ссылка = &Ссылка
	             |	И &ЕстьПодбор
	             |
	             |ОБЪЕДИНИТЬ
	             |
	             |ВЫБРАТЬ
	             |	ТоварыПриемка.Номенклатура,
	             |	ТоварыПриемка.Характеристика
	             |ИЗ
	             |	Документ.РеализацияТоваровУслуг.Товары КАК ТоварыПриемка
	             |ГДЕ
	             |	ТоварыПриемка.Ссылка = &Ссылка
	             |	И &ЕстьПриемка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	             |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	             |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	             |ПОМЕСТИТЬ ОстаткиНаСкладе
	             |ИЗ
	             |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	             |			&ДТ,
	             |			Номенклатура В
	             |						(ВЫБРАТЬ
	             |							СписокТоваров.Номенклатура КАК Номенклатура
	             |						ИЗ
	             |							СписокТоваров КАК СписокТоваров)
	             |					И Склад = &ТекущийСклад
	             |				ИЛИ &ВсеСклады) КАК ТоварыНаСкладахОстатки
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Номенклатура,
	             |	Характеристика
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	             |ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			Номенклатура В
	             |					(ВЫБРАТЬ
	             |						СписокТоваров.Номенклатура КАК Номенклатура
	             |					ИЗ
	             |						СписокТоваров КАК СписокТоваров)
	             |				И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Номенклатура,
	             |	Характеристика
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	Ячейки.Номенклатура КАК Номенклатура,
	             |	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
	             |ПОМЕСТИТЬ СписокЯчеек
	             |ИЗ
	             |	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Ячейки.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	СписокТоваров.Номенклатура КАК Ссылка,
	             |	ЕСТЬNULL(СписокТоваров.Характеристика, &Пустая) КАК СсылкаХарактеристика,
	             |	ЛОЖЬ КАК Удалить,
	             |	ВЫБОР
	             |		КОГДА НЕ СписокТоваров.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА СписокТоваров.Характеристика ЕСТЬ NULL
	             |					ТОГДА ЛОЖЬ
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ
	             |	КОНЕЦ КАК ЭтоХарактеристика,
	             |	СписокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(СписокТоваров.Характеристика.Наименование, """") КАК Товар,
	             |	&Атрибут1 КАК Атрибут1,
	             |	&Атрибут2 КАК Атрибут2,
	             |	&Атрибут3 КАК Атрибут3,
	             |	&Атрибут4 КАК Атрибут4,
	             |	&Атрибут5 КАК Атрибут5,
	             |	&Атрибут6 КАК Атрибут6,
	             |	&Атрибут7 КАК Атрибут7,
	             |	&Атрибут8 КАК Атрибут8,
	             |	&Атрибут9 КАК Атрибут9,
	             |	&Атрибут0 КАК Атрибут10,
	             |	ЕСТЬNULL(ОстаткиНаСкладе.ВНаличииОстаток, 0) КАК Остаток,
	             |	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
	             |	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии
	             |ИЗ
	             |	СписокТоваров КАК СписокТоваров
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	             |		ПО СписокТоваров.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
	             |		ПО (СписокЯчеек.Номенклатура = СписокТоваров.Номенклатура)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаСкладе КАК ОстаткиНаСкладе
	             |		ПО СписокТоваров.Номенклатура = ОстаткиНаСкладе.Номенклатура
	             |			И СписокТоваров.Характеристика = ОстаткиНаСкладе.Характеристика
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	             |		ПО СписокТоваров.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	             |			И СписокТоваров.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СписокТоваров.Номенклатура,
	             |	ЕСТЬNULL(СписокТоваров.Характеристика, &Пустая),
	             |	СписокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(СписокТоваров.Характеристика.Наименование, """"),
	             |	ВЫБОР
	             |		КОГДА НЕ СписокТоваров.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА СписокТоваров.Характеристика ЕСТЬ NULL
	             |					ТОГДА ЛОЖЬ
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ
	             |	КОНЕЦ,
	             |	ВидыНоменклатуры.ИспользоватьСерии,
	             |	ЕСТЬNULL(ОстаткиНаСкладе.ВНаличииОстаток, 0),
				 |	ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Товар";
	ЗапросТоваров.Текст=ТекстЗапроса;
	
	Попытка
	ЗапросТоваров.УстановитьПараметр("ТекущийСклад",ДокументВыгрузки.Склад);
	ЗапросТоваров.УстановитьПараметр("ВсеСклады", Ложь);
	Исключение
	ЗапросТоваров.УстановитьПараметр("ТекущийСклад",Справочники.Склады.ПустаяСсылка());
	ЗапросТоваров.УстановитьПараметр("ВсеСклады", Истина);
	КонецПопытки;
	ЗапросТоваров.УстановитьПараметр("ДТ",ДокументВыгрузки.дата);

	ЗапросТоваров.УстановитьПараметр("ИгнорироватьХарактеристики",ИгнорироватьХарактеристики);
	ЗапросТоваров.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	ЗапросТоваров.УстановитьПараметр("Пустая",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	//ЗапросТоваров.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать);
	
	ЗапросТоваров.УстановитьПараметр("ЕстьПодбор",Ложь);
	ЗапросТоваров.УстановитьПараметр("ЕстьПриемка",Ложь);
	Если СокрЛП(ИмяТЧДокументаПодбор)<>"" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"РеализацияТоваровУслуг.Товары КАК ТоварыПодбор",ДокументВыгрузки.Метаданные().Имя+"."+ИмяТЧДокументаПодбор+" КАК ТоварыПодбор");
		ЗапросТоваров.УстановитьПараметр("ЕстьПодбор",Истина);
	КонецЕсли;	
	Если СокрЛП(ИмяТЧДокументаПриемка)<>"" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"РеализацияТоваровУслуг.Товары КАК ТоварыПриемка",ДокументВыгрузки.Метаданные().Имя+"."+ИмяТЧДокументаПриемка+" КАК ТоварыПриемка");
		ЗапросТоваров.УстановитьПараметр("ЕстьПриемка",Истина);
	КонецЕсли;	
	Если (Атрибут1<>"")И(Атрибут1<>"!!! Ячейки !!!")И(Атрибут1<>"!!! Остатки !!!")И(ЛЕВ(Атрибут1,3) <> "ДР_")   тогда
		Если (Атрибут1="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут1="НаименованиеПолное") ИЛИ (Атрибут1="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут1+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","СписокТоваров.Номенклатура."+Атрибут1);
		КонецЕсли;
	ИначеЕсли Атрибут1="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","""""");
	КонецЕсли;	
	Если (Атрибут2<>"")И(Атрибут2<>"!!! Ячейки !!!")И(Атрибут2<>"!!! Остатки !!!")И(ЛЕВ(Атрибут2,3) <> "ДР_")   тогда
		Если (Атрибут2="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут2="НаименованиеПолное") ИЛИ (Атрибут2="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут2+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","СписокТоваров.Номенклатура."+Атрибут2);
		КонецЕсли;
	ИначеЕсли Атрибут2="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","""""");
	КонецЕсли;	
	
	Если (Атрибут3<>"")И(Атрибут3<>"!!! Ячейки !!!")И(Атрибут3<>"!!! Остатки !!!")И(ЛЕВ(Атрибут3,3) <> "ДР_")   тогда
		Если (Атрибут3="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут3="НаименованиеПолное") ИЛИ (Атрибут3="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут3+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","СписокТоваров.Номенклатура."+Атрибут3);
		КонецЕсли;
	ИначеЕсли Атрибут3="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","""""");
	КонецЕсли;
	
	Если (Атрибут4<>"")И(Атрибут4<>"!!! Ячейки !!!")И(Атрибут4<>"!!! Остатки !!!")И(ЛЕВ(Атрибут4,3) <> "ДР_")   тогда
		Если (Атрибут4="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут4="НаименованиеПолное") ИЛИ (Атрибут4="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут4+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","СписокТоваров.Номенклатура."+Атрибут4);
		КонецЕсли;
	ИначеЕсли Атрибут4="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","""""");
	КонецЕсли;	

	Если (Атрибут5<>"")И(Атрибут5<>"!!! Ячейки !!!")И(Атрибут5<>"!!! Остатки !!!")И(ЛЕВ(Атрибут5,3) <> "ДР_")   тогда
		Если (Атрибут5="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут5="НаименованиеПолное") ИЛИ (Атрибут5="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут5+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","СписокТоваров.Номенклатура."+Атрибут5);
		КонецЕсли;
	ИначеЕсли Атрибут5="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","""""");
	КонецЕсли;	

	Если (Атрибут6<>"")И(Атрибут6<>"!!! Ячейки !!!")И(Атрибут6<>"!!! Остатки !!!")И(ЛЕВ(Атрибут6,3) <> "ДР_")   тогда
		Если (Атрибут6="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут6="НаименованиеПолное") ИЛИ (Атрибут6="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут6+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","СписокТоваров.Номенклатура."+Атрибут6);
		КонецЕсли;
	ИначеЕсли Атрибут6="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","""""");
	КонецЕсли;	
	
	Если (Атрибут7<>"")И(Атрибут7<>"!!! Ячейки !!!")И(Атрибут7<>"!!! Остатки !!!")И(ЛЕВ(Атрибут7,3) <> "ДР_")   тогда
		Если (Атрибут7="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут7="НаименованиеПолное") ИЛИ (Атрибут7="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут7+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","СписокТоваров.Номенклатура."+Атрибут7);
		КонецЕсли;
	ИначеЕсли Атрибут7="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","""""");
	КонецЕсли;	

	Если (Атрибут8<>"")И(Атрибут8<>"!!! Ячейки !!!")И(Атрибут8<>"!!! Остатки !!!")И(ЛЕВ(Атрибут8,3) <> "ДР_")   тогда
		Если (Атрибут8="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут8="НаименованиеПолное") ИЛИ (Атрибут8="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут8+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","СписокТоваров.Номенклатура."+Атрибут8);
		КонецЕсли;
	ИначеЕсли Атрибут8="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","""""");
	КонецЕсли;	

	Если (Атрибут9<>"")И(Атрибут9<>"!!! Ячейки !!!")И(Атрибут9<>"!!! Остатки !!!")И(ЛЕВ(Атрибут9,3) <> "ДР_")   тогда
		Если (Атрибут9="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут9="НаименованиеПолное") ИЛИ (Атрибут9="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут9+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","СписокТоваров.Номенклатура."+Атрибут9);
		КонецЕсли;
	ИначеЕсли Атрибут9="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","""""");
	КонецЕсли;	

	Если (Атрибут10<>"")И(Атрибут10<>"!!! Ячейки !!!")И(Атрибут10<>"!!! Остатки !!!")И(ЛЕВ(Атрибут10,3) <> "ДР_")   тогда
		Если (Атрибут10="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут10="НаименованиеПолное") ИЛИ (Атрибут10="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут10+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","СписокТоваров.Номенклатура."+Атрибут10);
		КонецЕсли;
	ИначеЕсли Атрибут10="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","""""");
	КонецЕсли;	
	
	ЗапросТоваров.УстановитьПараметр("ТипЦен",ВыбранныйТипЦен);
	ЗапросТоваров.УстановитьПараметр("Ссылка",ДокументВыгрузки);
	
	
	ДанныеТовары = ЗапросТоваров.Выполнить().Выгрузить();
    АдресДанныхТовары = ПоместитьВоВременноеХранилище(ДанныеТовары, УникальныйИдентификатор);
	Товары.Загрузить(ДанныеТовары);
	Возврат АдресДанныхТовары;
КонецФункции  

&НаСервере
Функция ЗаполнитьТаблицуТоварыИзДокументаЕГАИС(ДокументВыгрузки)
	ЗапросТоваров=Новый Запрос();
	ТекстЗапроса="ВЫБРАТЬ
	             |	СписокЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	             |ПОМЕСТИТЬ ТаблицаАлкоголя
	             |ИЗ
	             |	Документ.ТТНВходящаяЕГАИС.Товары КАК СписокЕГАИСТовары
	             |ГДЕ
	             |	НЕ СписокЕГАИСТовары.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяССылка)
	             |	И &ЕстьПодбор
	             |	И СписокЕГАИСТовары.Ссылка = &Ссылка
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СписокЕГАИСТовары.АлкогольнаяПродукция
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	СправочникНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	             |	СправочникНоменклатурыЕГАИС.Характеристика КАК Характеристика
	             |ПОМЕСТИТЬ СписокТоваров
	             |ИЗ
	             |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СправочникНоменклатурыЕГАИС
	             |		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаАлкоголя КАК ТаблицаАлкоголя
	             |		ПО СправочникНоменклатурыЕГАИС.АлкогольнаяПродукция = ТаблицаАлкоголя.АлкогольнаяПродукция
	             |ГДЕ
	             |	НЕ ТаблицаАлкоголя.АлкогольнаяПродукция ЕСТЬ NULL
	             |	И НЕ СправочникНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL
	             |	И НЕ СправочникНоменклатурыЕГАИС.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СправочникНоменклатурыЕГАИС.Номенклатура,
	             |	СправочникНоменклатурыЕГАИС.Характеристика
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	             |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	             |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	             |ПОМЕСТИТЬ ОстаткиНаСкладе
	             |ИЗ
	             |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	             |			,
	             |			Номенклатура В
	             |				(ВЫБРАТЬ
	             |					СписокТоваров.Номенклатура КАК Номенклатура
	             |				ИЗ
	             |					СписокТоваров КАК СписокТоваров)) КАК ТоварыНаСкладахОстатки
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Номенклатура,
	             |	Характеристика
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	             |ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			Номенклатура В
	             |					(ВЫБРАТЬ
	             |						СписокТоваров.Номенклатура КАК Номенклатура
	             |					ИЗ
	             |						СписокТоваров КАК СписокТоваров)
	             |				И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	Номенклатура,
	             |	Характеристика
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	Ячейки.Номенклатура КАК Номенклатура,
	             |	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
	             |ПОМЕСТИТЬ СписокЯчеек
	             |ИЗ
	             |	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Ячейки.Номенклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	             |	СписокТоваров.Номенклатура КАК Ссылка,
	             |	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, &Пустая) КАК СсылкаХарактеристика,
	             |	ЛОЖЬ КАК Удалить,
	             |	ВЫБОР
	             |		КОГДА НЕ СписокТоваров.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	             |					ТОГДА ЛОЖЬ
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ
	             |	КОНЕЦ КАК ЭтоХарактеристика,
	             |	СписокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, """") КАК Товар,
	             |	&Атрибут1 КАК Атрибут1,
	             |	&Атрибут2 КАК Атрибут2,
	             |	&Атрибут3 КАК Атрибут3,
	             |	&Атрибут4 КАК Атрибут4,
	             |	&Атрибут5 КАК Атрибут5,
	             |	&Атрибут6 КАК Атрибут6,
	             |	&Атрибут7 КАК Атрибут7,
	             |	&Атрибут8 КАК Атрибут8,
	             |	&Атрибут9 КАК Атрибут9,
	             |	&Атрибут0 КАК Атрибут10,
	             |	ЕСТЬNULL(ОстаткиНаСкладе.ВНаличииОстаток, 0) КАК Остаток,
	             |	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
	             |	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии
	             |ИЗ
	             |	СписокТоваров КАК СписокТоваров
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	             |		ПО (ВЫБОР
	             |				КОГДА СписокТоваров.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	             |					ТОГДА ХарактеристикиНоменклатуры.Владелец = СписокТоваров.Номенклатура
	             |				КОГДА СписокТоваров.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	             |					ТОГДА ХарактеристикиНоменклатуры.Владелец = СписокТоваров.Номенклатура.ВидНоменклатуры
	             |				ИНАЧЕ ЛОЖЬ
	             |			КОНЕЦ)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	             |		ПО СписокТоваров.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
	             |		ПО (СписокЯчеек.Номенклатура = СписокТоваров.Номенклатура)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	             |		ПО СписокТоваров.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	             |			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, &Пустая))
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаСкладе КАК ОстаткиНаСкладе
	             |		ПО СписокТоваров.Номенклатура = ОстаткиНаСкладе.Номенклатура
	             |			И СписокТоваров.Характеристика = ОстаткиНаСкладе.Характеристика
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	СписокТоваров.Номенклатура,
	             |	ХарактеристикиНоменклатуры.Ссылка,
	             |	СписокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, """"),
	             |	ВЫБОР
	             |		КОГДА НЕ СписокТоваров.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	             |					ТОГДА ЛОЖЬ
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ
	             |	КОНЕЦ,
	             |	ВидыНоменклатуры.ИспользоватьСерии,
	             |	ЕСТЬNULL(ОстаткиНаСкладе.ВНаличииОстаток, 0),
				 |	ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Товар";
	ЗапросТоваров.Текст=ТекстЗапроса;
	ЗапросТоваров.УстановитьПараметр("ИгнорироватьХарактеристики",ИгнорироватьХарактеристики);
	ЗапросТоваров.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	ЗапросТоваров.УстановитьПараметр("Пустая",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	//ЗапросТоваров.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать);
	
	ЗапросТоваров.УстановитьПараметр("ЕстьПодбор",Ложь);
	ЗапросТоваров.УстановитьПараметр("ЕстьПриемка",Ложь);
	Если СокрЛП(ИмяТЧДокументаПодбор)<>"" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"ТТНВходящаяЕГАИС.Товары КАК СписокЕГАИСТовары",ДокументВыгрузки.Метаданные().Имя+"."+ИмяТЧДокументаПодбор+" КАК СписокЕГАИСТовары");
		ЗапросТоваров.УстановитьПараметр("ЕстьПодбор",Истина);
	КонецЕсли;	
	Если СокрЛП(ИмяТЧДокументаПриемка)<>"" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"ТТНВходящаяЕГАИС.Товары КАК СписокЕГАИСТовары",ДокументВыгрузки.Метаданные().Имя+"."+ИмяТЧДокументаПриемка+" КАК СписокЕГАИСТовары");
		ЗапросТоваров.УстановитьПараметр("ЕстьПриемка",Истина);
	КонецЕсли;	
	
	Если (Атрибут1<>"")И(Атрибут1<>"!!! Ячейки !!!")И(Атрибут1<>"!!! Остатки !!!")И(ЛЕВ(Атрибут1,3) <> "ДР_")   тогда
		Если (Атрибут1="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут1="НаименованиеПолное") ИЛИ (Атрибут1="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут1+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","СписокТоваров.Номенклатура."+Атрибут1);
		КонецЕсли;
	ИначеЕсли Атрибут1="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","""""");
	КонецЕсли;	
	Если (Атрибут2<>"")И(Атрибут2<>"!!! Ячейки !!!")И(Атрибут2<>"!!! Остатки !!!")И(ЛЕВ(Атрибут2,3) <> "ДР_")   тогда
		Если (Атрибут2="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут2="НаименованиеПолное") ИЛИ (Атрибут2="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут2+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","СписокТоваров.Номенклатура."+Атрибут2);
		КонецЕсли;
	ИначеЕсли Атрибут2="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","""""");
	КонецЕсли;	
	
	Если (Атрибут3<>"")И(Атрибут3<>"!!! Ячейки !!!")И(Атрибут3<>"!!! Остатки !!!")И(ЛЕВ(Атрибут3,3) <> "ДР_")   тогда
		Если (Атрибут3="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут3="НаименованиеПолное") ИЛИ (Атрибут3="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут3+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","СписокТоваров.Номенклатура."+Атрибут3);
		КонецЕсли;
	ИначеЕсли Атрибут3="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","""""");
	КонецЕсли;
	
	Если (Атрибут4<>"")И(Атрибут4<>"!!! Ячейки !!!")И(Атрибут4<>"!!! Остатки !!!")И(ЛЕВ(Атрибут4,3) <> "ДР_")   тогда
		Если (Атрибут4="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут4="НаименованиеПолное") ИЛИ (Атрибут4="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут4+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","СписокТоваров.Номенклатура."+Атрибут4);
		КонецЕсли;
	ИначеЕсли Атрибут4="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","""""");
	КонецЕсли;	

	Если (Атрибут5<>"")И(Атрибут5<>"!!! Ячейки !!!")И(Атрибут5<>"!!! Остатки !!!")И(ЛЕВ(Атрибут5,3) <> "ДР_")   тогда
		Если (Атрибут5="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут5="НаименованиеПолное") ИЛИ (Атрибут5="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут5+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","СписокТоваров.Номенклатура."+Атрибут5);
		КонецЕсли;
	ИначеЕсли Атрибут5="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","""""");
	КонецЕсли;	

	Если (Атрибут6<>"")И(Атрибут6<>"!!! Ячейки !!!")И(Атрибут6<>"!!! Остатки !!!")И(ЛЕВ(Атрибут6,3) <> "ДР_")   тогда
		Если (Атрибут6="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут6="НаименованиеПолное") ИЛИ (Атрибут6="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут6+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","СписокТоваров.Номенклатура."+Атрибут6);
		КонецЕсли;
	ИначеЕсли Атрибут6="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","""""");
	КонецЕсли;	
	
	Если (Атрибут7<>"")И(Атрибут7<>"!!! Ячейки !!!")И(Атрибут7<>"!!! Остатки !!!")И(ЛЕВ(Атрибут7,3) <> "ДР_")   тогда
		Если (Атрибут7="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут7="НаименованиеПолное") ИЛИ (Атрибут7="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут7+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","СписокТоваров.Номенклатура."+Атрибут7);
		КонецЕсли;
	ИначеЕсли Атрибут7="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","""""");
	КонецЕсли;	

	Если (Атрибут8<>"")И(Атрибут8<>"!!! Ячейки !!!")И(Атрибут8<>"!!! Остатки !!!")И(ЛЕВ(Атрибут8,3) <> "ДР_")   тогда
		Если (Атрибут8="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут8="НаименованиеПолное") ИЛИ (Атрибут8="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут8+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","СписокТоваров.Номенклатура."+Атрибут8);
		КонецЕсли;
	ИначеЕсли Атрибут8="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","""""");
	КонецЕсли;	

	Если (Атрибут9<>"")И(Атрибут9<>"!!! Ячейки !!!")И(Атрибут9<>"!!! Остатки !!!")И(ЛЕВ(Атрибут9,3) <> "ДР_")  тогда
		Если (Атрибут9="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут9="НаименованиеПолное") ИЛИ (Атрибут9="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут9+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","СписокТоваров.Номенклатура."+Атрибут9);
		КонецЕсли;
	ИначеЕсли Атрибут9="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","""""");
	КонецЕсли;	

	Если (Атрибут10<>"")И(Атрибут10<>"!!! Ячейки !!!")И(Атрибут10<>"!!! Остатки !!!")И(ЛЕВ(Атрибут10,3) <> "ДР_")   тогда
		Если (Атрибут10="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут10="НаименованиеПолное") ИЛИ (Атрибут10="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","ВЫРАЗИТЬ (СписокТоваров.Номенклатура."+Атрибут10+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","СписокТоваров.Номенклатура."+Атрибут10);
		КонецЕсли;
	ИначеЕсли Атрибут10="!!! Ячейки !!!" тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");	
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","""""");
	КонецЕсли;	
	
	ЗапросТоваров.УстановитьПараметр("ТипЦен",ВыбранныйТипЦен);
	ЗапросТоваров.УстановитьПараметр("Ссылка",ДокументВыгрузки);
	
	
	ДанныеТовары = ЗапросТоваров.Выполнить().Выгрузить();
    АдресДанныхТовары = ПоместитьВоВременноеХранилище(ДанныеТовары, УникальныйИдентификатор);
	Товары.Загрузить(ДанныеТовары);
	Возврат АдресДанныхТовары;
КонецФункции  


// Процедура заполняет для выгрузки таблицы товаров и штрихкодов
//
// Параметры
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 1
//
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 2	
//
&НаСервере
Функция ЗаполнитьТаблицуШтрихкодыИзДокумента(ДокументВыгрузки)
	//Для каждого мд из Метаданные.Справочники.Номенклатура.Реквизиты Цикл //поиск имени по синониму
	//			Если мд.Синоним=Атрибут1 тогда
	//				Атрибут1=ЧистаяСтрока(мд.Имя);
	//			КонецЕсли;
	//			Если мд.Синоним=Атрибут2 тогда
	//				Атрибут2=ЧистаяСтрока(мд.Имя);
	//			КонецЕсли;
	//КонецЦикла;
	
	ЗапросШтрихкодов=Новый Запрос();
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Штрихкоды.Штрихкод КАК ШтрихКод,
	|	Штрихкоды.Упаковка.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ (Штрихкоды.Номенклатура.ИспользованиеХарактеристик<>&НеИспользовать)
	|						ИЛИ &ИгнорироватьХарактеристики
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК ЭтоХарактеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         	ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1)
	|	КОНЕЦ  КАК КФ,
	|	Штрихкоды.Номенклатура КАК СсылкаПапЫ,
	|	Штрихкоды.Характеристика КАК СсылкаХарактеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Штрихкоды.Упаковка.Наименование 
	|	КОНЕЦ  КАК ЕИ,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА Ложь
	|		ИНАЧЕ Штрихкоды.Упаковка.ПометкаУдаления 
	|	КОНЕЦ  КАК Удалить
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	(Штрихкоды.Номенклатура В (&СписокТоваров)
	|			ИЛИ Штрихкоды.Характеристика В (&СписокТоваров))
	|
	|";
					 
	
	ЗапросШтрихКодов.Текст=ТекстЗапроса;
	ЗапросШтрихКодов.УстановитьПараметр("ИгнорироватьХарактеристики",ИгнорироватьХарактеристики);
	ЗапросШтрихКодов.УстановитьПараметр("СписокТоваров",Товары.Выгрузить(,"Ссылка"));
	ЗапросШтрихКодов.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	//ЗапросШтрихКодов.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать);
	
	ДанныеШтрихкоды      = ЗапросШтрихкодов.Выполнить().Выгрузить();
    АдресДанныхШтрихкоды = ПоместитьВоВременноеХранилище(ДанныеШтрихкоды, УникальныйИдентификатор);	
	ШтрихКоды.Загрузить(ДанныеШтрихкоды);
	Возврат АдресДанныхШтрихкоды;
КонецФункции  

 
&НаСервереБезКонтекста
Функция ВыгрузитьПорциюТоваров(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,начало,конец,АдресДанных,АртикулВставитьВНазвание)	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла="";
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		        n=Счетчик+1;
				СтрокаТовара=""+n+";";
    			СтрокаТовара=СтрокаТовара+(?(Данные[Счетчик].Удалить,"-","+"))+";";
				
				СтрокаТовара=СтрокаТовара+"8U-"+СокрЛП(Данные[Счетчик].ссылка.УникальныйИдентификатор())+СокрЛП(Данные[Счетчик].ссылкаХарактеристика.УникальныйИдентификатор())+";";
				Если АртикулВставитьВНазвание тогда
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Ссылка.Артикул+" "+СокрЛП(Данные[Счетчик].Товар))+";";
    			Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Товар)+";";
    			КонецЕсли;	
    			СтрокаТовара=СтрокаТовара+Формат(Данные[Счетчик].Цена,"ЧРД=.; ЧН=0; ЧГ=0")+";";
			
								
				Если ЛЕВ(Атрибут1,3) = "ДР_" тогда
					СтрокаТовара=СтрокаТовара+ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].ссылка,Атрибут1))+";";
				Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут1)+";";
				КонецЕсли;
				
				Если ЛЕВ(Атрибут2,3) = "ДР_" тогда
					СтрокаТовара=СтрокаТовара+ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].ссылка,Атрибут2))+";";
				Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут2)+";";
				КонецЕсли;
				
				Если ЛЕВ(Атрибут3,3) = "ДР_" тогда
					СтрокаТовара=СтрокаТовара+ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].ссылка,Атрибут3))+";";
				Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут3)+";";
				КонецЕсли;
				
				Если ЛЕВ(Атрибут4,3) = "ДР_" тогда
					СтрокаТовара=СтрокаТовара+ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].ссылка,Атрибут4))+";";
				Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут4)+";";
				КонецЕсли;
				
				Если ЛЕВ(Атрибут5,3) = "ДР_" тогда
					СтрокаТовара=СтрокаТовара+ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].ссылка,Атрибут5))+";";
				Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут5)+";";
				КонецЕсли;
				
				Если ЛЕВ(Атрибут6,3) = "ДР_" тогда
					СтрокаТовара=СтрокаТовара+ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].ссылка,Атрибут6))+";";
				Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут6)+";";
				КонецЕсли;
				
				Если ЛЕВ(Атрибут7,3) = "ДР_" тогда
					СтрокаТовара=СтрокаТовара+ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].ссылка,Атрибут7))+";";
				Иначе	
					//ЕГАИС
					Если Атрибут7 = "ОбъемДАЛ" и Данные[Счетчик].Атрибут7<>NULL тогда
						СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут7*10)+";";	
					Иначе
						СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут7)+";";
					КонецЕсли;		
				КонецЕсли;
				
				Если ЛЕВ(Атрибут8,3) = "ДР_" тогда
					СтрокаТовара=СтрокаТовара+ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].ссылка,Атрибут8))+";";
				Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут8)+";";
				КонецЕсли;
				
				Если ЛЕВ(Атрибут9,3) = "ДР_" тогда
					СтрокаТовара=СтрокаТовара+ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].ссылка,Атрибут9))+";";
				Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут9)+";";
				КонецЕсли;
				
				Если ЛЕВ(Атрибут10,3) = "ДР_" тогда
					СтрокаТовара=СтрокаТовара+ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].ссылка,Атрибут10))+";";
				Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут10)+";";
				КонецЕсли;
								
				
    			СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Формат(Данные[Счетчик].Остаток,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0"))+";";    
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Формат(Данные[Счетчик].ИспользоватьСерии,"БЛ=0; БИ=1"))+";";
				
				СтрокаТовара = СтрокаТовара + "0;";
				СтрокаТовара = СтрокаТовара + "0;"; //SNType
				СтрокаТовара = СтрокаТовара + ";"; //SNRule
				СтрокаТовара = СтрокаТовара + Строка(ПолучитьТипМаркированнойПродукции(Данные[Счетчик].Ссылка)) + ";"; //MarkType
				
     			ТекстФайла=ТекстФайла+СтрокаТовара+Символы.ПС;	
    КонецЦикла;

    Возврат ТекстФайла; 		   
	 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДополнительныйРеквизитАтрибута(Номенклатура,НаименованиеСвойства)
	
Запрос = Новый Запрос();
Запрос.Текст = "ВЫБРАТЬ 

|ВЫБОР 
|	КОГДА 
|		ВЫРАЗИТЬ(ЕСТЬNULL(СправочникНоменклатураДополнительныеРеквизиты.Значение.Наименование,"""") КАК СТРОКА (100)) = """" 
|	ТОГДА 
|		СправочникНоменклатураДополнительныеРеквизиты.Значение 
|	ИНАЧЕ
|   	ВЫРАЗИТЬ(СправочникНоменклатураДополнительныеРеквизиты.Значение.Наименование КАК СТРОКА (100)) 
|КОНЕЦ КАК Значение
|ИЗ
|Справочник.Номенклатура.ДополнительныеРеквизиты КАК СправочникНоменклатураДополнительныеРеквизиты
|ГДЕ 
|СправочникНоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
|И СправочникНоменклатураДополнительныеРеквизиты.Свойство.Заголовок = &НаименованиеСвойства";

Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
Запрос.УстановитьПараметр("НаименованиеСвойства",СтрЗаменить(НаименованиеСвойства,"ДР_",""));

Выборка = Запрос.Выполнить().Выбрать();

Если Выборка.Следующий() тогда
	Возврат ЧистаяСтрока(Выборка.Значение);
Иначе
	Возврат "";
КонецЕсли;	

КонецФункции


&НаСервере
Функция ВыгрузитьПорциюШтрихкодов(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,начало,конец,АдресДанных)	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла="";
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n=Счетчик+1;			
		СтрокаШтрихкода=""+n+";";
		СтрокаШтрихкода=СтрокаШтрихкода+(?(Данные[Счетчик].Удалить,"-","+"))+";";
		Если Лев(Данные[Счетчик].ШтрихКод,2)="2_" тогда    //весовые
		СтрокаШтрихкода=СтрокаШтрихкода+ЧистаяСтрока(Сред(Данные[Счетчик].ШтрихКод,3,5))+";";	
		Иначе	
	 	СтрокаШтрихкода=СтрокаШтрихкода+ЧистаяСтрока(Данные[Счетчик].ШтрихКод)+";";
		КонецЕсли;
		СтрокаШтрихкода=СтрокаШтрихкода+ЧистаяСтрока(Данные[Счетчик].ЕИ)+";";
		
		Если НеИспользоватьПересчетУпаковок тогда
			СтрокаШтрихкода=СтрокаШтрихкода+"1"+";";
		Иначе	
			СтрокаШтрихкода=СтрокаШтрихкода+ЧистаяСтрока(Формат(Данные[Счетчик].кф,"ЧРД=.; ЧН=0; ЧГ=0"))+";";
		КонецЕсли;

		СтрокаШтрихкода=СтрокаШтрихкода+"8U-"+СокрЛП(Данные[Счетчик].СсылкаПапы.УникальныйИдентификатор())+СокрЛП(Данные[Счетчик].ссылкаХарактеристика.УникальныйИдентификатор())+";";
		СтрокаШтрихкода=СтрокаШтрихкода+"2"; //UseSn
		ТекстФайла=ТекстФайла+СтрокаШтрихкода+Символы.ПС;
    КонецЦикла;
	
	Возврат ТекстФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьУникальныйИдентификатор(Ссылка)
	GUID= Ссылка.УникальныйИдентификатор();
	Возврат GUID;
КонецФункции

&НаСервере
Функция ПолучитьШтрихкодДокумент(нм,хр,еи)

ЗапросШтрихкодов=Новый Запрос("ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК ШК
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Номенклатура = &НМ
	|	И Штрихкоды.Характеристика = &ХР
	|	И Штрихкоды.Упаковка = &ЕИ
	|	");
	
	ЗапросШтрихкодов.УстановитьПараметр("НМ",нм);
	ЗапросШтрихкодов.УстановитьПараметр("ХР",хр);
	ЗапросШтрихкодов.УстановитьПараметр("ЕИ",еи);
	
	РезультатШтрихкодов=ЗапросШтрихкодов.Выполнить();
	Если РезультатШтрихкодов.Пустой() Тогда 
		Возврат Неопределено;
	Иначе
		ВыборкаШтрихкодов=РезультатШтрихкодов.Выбрать();
		Пока ВыборкаШтрихкодов.Следующий() Цикл
			Возврат ВыборкаШтрихкодов.ШК;
			Прервать;
		КонецЦикла;
	КонецЕсли;	

	
КонецФункции

&НаСервере
Функция ПолучитьОстатокДокумент(нм,хр,дт)
	
	ЗапросОстатков=Новый Запрос("ВЫБРАТЬ
	|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК Остаток,
	|	ТоварыНаСкладахОстатки.Номенклатура
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ДТ,
	|			Номенклатура = &НМ
	|				И Характеристика = &ХР И (Склад =&ТекущийСклад ИЛИ &ВсеСклады)) КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура");
	
			Попытка
			ЗапросОстатков.УстановитьПараметр("ТекущийСклад",дт.Склад);
			ЗапросОстатков.УстановитьПараметр("ВсеСклады", Ложь);
			Исключение
			ЗапросОстатков.УстановитьПараметр("ТекущийСклад",Справочники.Склады.ПустаяСсылка());
			ЗапросОстатков.УстановитьПараметр("ВсеСклады", Истина);
			КонецПопытки;
			ЗапросОстатков.УстановитьПараметр("НМ",нм);
			ЗапросОстатков.УстановитьПараметр("ХР",хр);
			ЗапросОстатков.УстановитьПараметр("ДТ",дт.дата);
			РезультатОстатков=ЗапросОстатков.Выполнить();
			Если РезультатОстатков.Пустой() Тогда
				Возврат Неопределено;//лимит
			Иначе
				ВыборкаОстатков=РезультатОстатков.Выбрать();
				Если ВыборкаОстатков.Следующий() тогда
					Возврат Формат(ВыборкаОстатков.Остаток,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
				Иначе	
					Возврат Неопределено;//лимит
				КонецЕсли;
			КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьШаблоны(Команда)
	ПроверитьКаталоги("ВыгрузитьШаблоны");	
КонецПроцедуры


// Функция убирает или заменяет лишние и критичные символы в строках
//
// Параметры:
//  ГрязнаяСтрока - строка с лишними и критичными символами
//
// Возвращаемое значение:
//  ЧистаяСтрока - строка без лишних и критичных символов
//
&НаСервереБезКонтекста
Функция ЧистаяСтрока(Знач ГрязнаяСтрока)
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,"'","-");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,Символы.ВК," ");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,Символы.ПС,"-");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,";","");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,Символ(26),"");
	ЧистаяСтрока=СокрЛП(ГрязнаяСтрока);
	Возврат ЧистаяСтрока;
КонецФункции

Функция ОчиститьШтрихкод(Знач ГрязнаяСтрока)
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,"(","");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,")","");

	ЧистаяСтрока=СокрЛП(ГрязнаяСтрока);
	Возврат ЧистаяСтрока;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЯчейки(Команда)
	ПроверитьКаталоги("ВыгрузитьЯчейки");
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПорциюЯчеек(начало,конец,АдресДанных)
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла="";
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		Попытка 
			n=Счетчик+1;
			СтрокаЯчейки=""+n+";";
			СтрокаЯчейки=СтрокаЯчейки+?(Данные[Счетчик].ПометкаУдаления,"-","+")+";";

			//СтрокаЯчейки=СтрокаЯчейки+ЧистаяСтрока(Данные[Счетчик].Наименование)+";"; //наименование ячейки
			СтрокаЯчейки = СтрокаЯчейки + ?(ВыгружатьВНаименованиеЯчейки=0,ЧистаяСтрока(Данные[Счетчик].Ссылка.Наименование), Данные[Счетчик].Ссылка.Код)+";"; //наименование ячейки

			//СтрокаЯчейки=СтрокаЯчейки+Строка(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(Данные[Счетчик].Ссылка))+""; //штрихкод ячейки
			СтрокаЯчейки=СтрокаЯчейки+?(ВыгружатьВКодЯчейки=1,Данные[Счетчик].Ссылка.Код, Строка(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(Данные[Счетчик].Ссылка)))+""; //штрихкод ячейки
			
			ТекстФайла=ТекстФайла+СтрокаЯчейки+Символы.ПС;
		Исключение
			Продолжить;
		КонецПопытки;
    КонецЦикла;
	
	Возврат ТекстФайла;

КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуЯчейки()

    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
	|   Ячейки.Ссылка КАК Ссылка,
    |   Ячейки.Код КАК Наименование,
	|   Ячейки.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
    |   Справочник.СкладскиеЯчейки КАК Ячейки
	| 
	| 
	| ";

    Данные      = Запрос.Выполнить().Выгрузить();
    АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество=Данные.Количество();

	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес", АдресДанных);

    Возврат 	Запись;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуЯчейкиИзДокумента(ДокументВыгрузки)	
Попытка
    Запрос = Новый Запрос;
    Запрос.Текст =
   "ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   ТоварыПодбор.Ячейка.Ссылка КАК Ссылка,
	|	ТоварыПодбор.Ячейка.Код КАК Наименование,
	|	ТоварыПодбор.Ячейка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ТоварыПодбор
	|ГДЕ
	|	ТоварыПодбор.Ссылка = &Ссылка
	|	И &ЕстьПодбор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|   ТоварыПриемка.Ячейка.Ссылка КАК Ссылка,
	|	ТоварыПриемка.Ячейка.Код КАК Наименование,
	|	ТоварыПриемка.Ячейка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ТоварыПриемка
	|ГДЕ
	|	ТоварыПриемка.Ссылка = &Ссылка
	|	И &ЕстьПриемка
	|";
			
	Запрос.УстановитьПараметр("ЕстьПодбор",Ложь);
	Запрос.УстановитьПараметр("ЕстьПриемка",Ложь);
	Если СокрЛП(ИмяТЧДокументаПодбор)<>"" тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ОтборРазмещениеТоваров.ТоварыОтбор КАК ТоварыПодбор",ДокументВыгрузки.Метаданные().Имя+"."+ИмяТЧДокументаПодбор+" КАК ТоварыПодбор");
		Запрос.УстановитьПараметр("ЕстьПодбор",Истина);
	КонецЕсли;	
	Если СокрЛП(ИмяТЧДокументаПриемка)<>"" тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ОтборРазмещениеТоваров.ТоварыРазмещение КАК ТоварыПриемка",ДокументВыгрузки.Метаданные().Имя+"."+ИмяТЧДокументаПриемка+" КАК ТоварыПриемка");
		Запрос.УстановитьПараметр("ЕстьПриемка",Истина);
	КонецЕсли;	
	Запрос.УстановитьПараметр("Ссылка",ДокументВыгрузки);

    Данные      = Запрос.Выполнить().Выгрузить();
    АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество=Данные.Количество();
	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес", АдресДанных);
    Возврат Запись;
Исключение	
	Запись = Новый Структура;
	Запись.Вставить("Количество", 0);
	Запись.Вставить("Адрес", "");
    Возврат Запись;
КонецПопытки;
КонецФункции


&НаКлиенте
Процедура ВыгрузитьКлиентов(Команда)
	ПроверитьКаталоги("ВыгрузитьКлиентов");
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПорциюКлиентов(начало,конец,АдресДанных)
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла="";
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n=Счетчик+1;
		СтрокаКлиента=""+n+";";
		СтрокаКлиента=СтрокаКлиента+?(Данные[Счетчик].ПометкаУдаления,"-","+")+";";
		СтрокаКлиента=СтрокаКлиента+ЧистаяСтрока(Строка(Данные[Счетчик].Ссылка.УникальныйИдентификатор()))+";";//ID клиента 
		СтрокаКлиента=СтрокаКлиента+ЧистаяСтрока(Данные[Счетчик].Наименование)+";";//наименование клиента
		СтрокаКлиента=СтрокаКлиента+ЧистаяСтрока(Данные[Счетчик].Штрихкод)+"";//штрихкод клиента
		ТекстФайла=ТекстФайла+СтрокаКлиента+Символы.ПС;
	КонецЦикла;
	
	Возврат ТекстФайла;

КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуКлиенты()

    Запрос=Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.Наименование,
	|	Контрагенты.ПометкаУдаления,
	|	Контрагенты.Код КАК Штрихкод,
	|	Контрагенты.Ссылка,
	|	""                                        "" КАК ИД
	|ИЗ
	|	Справочник.Партнеры КАК Контрагенты
	|");

    Данные      = Запрос.Выполнить().Выгрузить();
    АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество=Данные.Количество();

	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес", АдресДанных);

    Возврат 	Запись;
	
КонецФункции

//Бойко 10102019  {
&НаКлиенте
Процедура ВыгрузитьСклады(Команда)
	ПроверитьКаталоги("ВыгрузитьСклады");
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПорциюСкладов(начало,конец,АдресДанных)
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла="";
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n=Счетчик+1;
		СтрокаСклада=""+n+";";
		СтрокаСклада=СтрокаСклада+?(Данные[Счетчик].ПометкаУдаления,"-","+")+";";
		СтрокаСклада=СтрокаСклада+ЧистаяСтрока(Строка(Данные[Счетчик].Ссылка.УникальныйИдентификатор()))+";";//ID склада 
		СтрокаСклада=СтрокаСклада+ЧистаяСтрока(Данные[Счетчик].Наименование)+";";//наименование склада
		ТекстФайла=ТекстФайла+СтрокаСклада+Символы.ПС;
	КонецЦикла;
	
	Возврат ТекстФайла;

КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуСклады()

    Запрос=Новый Запрос("ВЫБРАТЬ
                        |	""                                        "" КАК ИД,
                        |	Склады.Наименование КАК Наименование,
                        |	Склады.ПометкаУдаления КАК ПометкаУдаления,
                        |	Склады.Ссылка КАК Ссылка
                        |ИЗ
                        |	Справочник.Склады КАК Склады
                        |ГДЕ
                        |	Склады.ЭтоГруппа = ЛОЖЬ");

    Данные      = Запрос.Выполнить().Выгрузить();
    АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество=Данные.Количество();

	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес", АдресДанных);

    Возврат 	Запись;
	
КонецФункции
//Бойко 10102019  }

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "ШаблоныДокументов"
//
// Параметры:
//  Элемент - <ТабличноеПоле>
//          - Табличное поле ("ШаблоныДокументов"), с которым связано данное событие.
//
&НаКлиенте
Процедура ШаблоныДокументовПриАктивизацииСтроки(Элемент)
 	Если ШаблоныДокументов.Количество()>0 Тогда
		ТД=Элементы.ШаблоныДокументов.ТекущиеДанные; //вывод данных шаблона 
		Элементы.ВидДокумента.СписокВыбора.Очистить();
		Если ТД.ИспользоватьЕГАИС Тогда
			ВидыДоков=СобратьВидыДокументовЕГАИС();
		Иначе
			ВидыДоков=СобратьВидыДокументов();
		КонецЕсли;
		
		
		для каждого ВидДока из ВидыДоков Цикл
			Элементы.ВидДокумента.СписокВыбора.Добавить(ВидДока.Значение,ВидДока.Представление);
		КонецЦикла;
		
		Если ТД.ИспользоватьЕГАИС Тогда
			Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументовЕГАИС(ТД.ВидДокумента).ВыгрузитьЗначения());	
		Иначе	
			Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументов(ТД.ВидДокумента).ВыгрузитьЗначения());
			Элементы.ИмяТабличнойЧастиПриемка.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументов(ТД.ВидДокумента).ВыгрузитьЗначения());			
		КонецЕсли;
		
			
		ИспользоватьПодборПриИзменении(Элементы.ИспользоватьПодбор);
		ИспользоватьПриемкуПриИзменении(Элементы.ИспользоватьПриемку);
		ИспользованиеЯчеекПодборПриИзменении(Элементы.ИспользованиеЯчеекПодбор);
		ИспользованиеСерийниковПодборПриИзменении(Элементы.ИспользованиеСерийниковПодбор);
		ИспользованиеЯчеекПриемкаПриИзменении(Элементы.ИспользованиеЯчеекПриемка);
		ИспользованиеСерийниковПриемкаПриИзменении(Элементы.ИспользованиеСерийниковПриемка);
		ИспользоватьЕГАИСПриИзменении(Элементы.ИспользоватьЕГАИС);
		ИспользоватьМаркировкуПриИзменении(Элементы.ИспользоватьМаркировку);

		ОтборДопШаговПоСтрокеШаблона();
		
		// Загрузка значений автозагрузки
		//ПрочитатьНастройкиАвтозагрузки();
		Элементы.АвтозагрузкаРеквизитов.ПодчиненныеЭлементы.АвтозагрузкаРеквизитовРеквизит.СписокВыбора.ЗагрузитьЗначения(СобратьРеквизитыДокумента(ТД.ВидДокумента).ВыгрузитьЗначения());
		
		ОтборАвтозагрузки();
		
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ОтборАвтозагрузки()
	
	АвтозагрузкаРеквизитов.Очистить();
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Шаблон", Элементы.ШаблоныДокументов.ТекущиеДанные.ТипДокумента);
	
	СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураПоиска);
	 
	Для Каждого Стр из СтрокиПоиска Цикл
		НовСтр = АвтозагрузкаРеквизитов.Добавить();		
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);		
	КонецЦикла;
	//АвтозагрузкаРеквизитов
	//АвтозагрузкаРеквизитовОбщая
		
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПрочитатьНастройкиАвтозагрузки();
	
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_Автозагрузки", ЭтаФорма);
		ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_Autozagruzka.tab");
		ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);
		Элементы.АвтозагрузкаРеквизитов.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_Автозагрузки(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияАвтозагрузки", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_Autozagruzka.tab", КодировкаТекста.UTF8);		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияАвтозагрузки(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеАвтозагрузки(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьДанныеАвтозагрузки(Данные)
	
	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		АвтозагрузкаРеквизитовОбщая.Загрузить(ДанныеТЗ);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция СборРеквизитовДокумента(ВидДокумента)
	СобратьРеквизитыДокумента(ВидДокумента);	
КонецФУнкции	

&НаСервереБезКонтекста
Функция СобратьРеквизитыДокумента(ВидДокумента)
	СписокЗн = Новый СписокЗначений;
	
	МетаДок=Метаданные.Документы.Найти(ВидДокумента);
	Если МетаДок=Неопределено тогда
		Возврат СписокЗн;
	КонецЕсли;	
	Для Каждого МетаРеквизит из МетаДок.Реквизиты цикл
		СписокЗн.Добавить(МетаРеквизит.Имя);
	КонецЦикла;
	
	Возврат СписокЗн;
КонецФункции	


// Процедура выбирает и ограничивает доступные для создания шаблона документы
//
// Параметры:
//  Список - список доступных для создания шаблона документов
//
&НаСервереБезКонтекста
Функция СобратьВидыДокументов()
	СписокВыбора=Новый СписокЗначений;
	для каждого метаДок из Метаданные.Документы Цикл
		Если ДокументПодходит(метаДок) тогда
			СписокВыбора.Добавить(метаДок.Имя,метаДок.Синоним);
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокВыбора;
КонецФункции

&НаСервереБезКонтекста
Функция СобратьВидыДокументовЕГАИС()

	СписокВыбора=Новый СписокЗначений;
	для каждого метаДок из Метаданные.Документы Цикл
		Если ДокументПодходитЕГАИС(метаДок) тогда
			СписокВыбора.Добавить(метаДок.Имя,метаДок.Синоним);
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокВыбора;

КонецФункции




// Функция возвращает результат проверки документа на наличие табличной части "Товары"
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Булево> - Результат проверки.
//
&НаСервереБезКонтекста
Функция ДокументПодходит(МетаДок)
	Для Каждого метаТЧ из МетаДок.ТабличныеЧасти цикл
		Для Каждого метаРеквизитТЧ из МетаТЧ.Реквизиты цикл
			Если метаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	Возврат ложь;
КонецФункции	

&НаСервереБезКонтекста
Функция ДокументПодходитЕГАИС(МетаДок)
	Для Каждого метаТЧ из МетаДок.ТабличныеЧасти цикл
		Для Каждого метаРеквизитТЧ из МетаТЧ.Реквизиты цикл
			Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"))  Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	Возврат ложь;
КонецФункции	


// Процедура выбирает и ограничивает доступные для создания шаблона табличные части документа
//
// Параметры:
//  ВидДокумента	- вид доступного для создания шаблона документа
//
//  Список 			- список доступных для создания шаблона табличных частей документа
//
&НаСервереБезКонтекста
Функция СобратьТабЧастиДокументов(ВидДокумента)
	СписокВыбора=Новый СписокЗначений;
	МетаДок=Метаданные.Документы.Найти(ВидДокумента);
	Если МетаДок=Неопределено тогда
		
	Иначе	
	Для Каждого метаТЧ из МетаДок.ТабличныеЧасти цикл
		Для Каждого метаРеквизитТЧ из МетаТЧ.Реквизиты цикл
			Если метаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				СписокВыбора.Добавить(МетаТЧ.Имя);
				Продолжить;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	КонецЕсли;
	Возврат СписокВыбора;
КонецФункции	

&НаСервереБезКонтекста
Функция СобратьТабЧастиДокументовЕГАИС(ВидДокумента)
	СписокВыбора=Новый СписокЗначений;
	МетаДок=Метаданные.Документы.Найти(ВидДокумента);
	Если МетаДок=Неопределено тогда
			
	Иначе	
	Для Каждого метаТЧ из МетаДок.ТабличныеЧасти цикл
		Для Каждого метаРеквизитТЧ из МетаТЧ.Реквизиты цикл
			Если метаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС")) Тогда
				СписокВыбора.Добавить(МетаТЧ.Имя);
				Продолжить;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	КонецЕсли;
	Возврат СписокВыбора;			
КонецФункции	

// Процедура - обработчик события "ПриИзменении" поля выбора "ВидДокумента"
//
// Параметры:
//  Элемент - <ПолеВыбора>
//			- Поле выбора ("ВидДокумента"), с которым связано данное событие.
//
&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	ВидДокумента=Элементы.ШаблоныДокументов.ТекущиеДанные.ВидДокумента;
	
	Если Элементы.ШаблоныДокументов.ТекущиеДанные.ИспользоватьЕГАИС Тогда
	Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументовЕГАИС(ВидДокумента).ВыгрузитьЗначения());
	Иначе
	Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументов(ВидДокумента).ВыгрузитьЗначения());
	Элементы.ИмяТабличнойЧастиПриемка.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументов(ВидДокумента).ВыгрузитьЗначения());
	КонецЕсли;

	ИндексТекущегоЭлементаКоллекции = ШаблоныДокументов.Индекс(Элементы.ШаблоныДокументов.ТекущиеДанные);
	ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПодбор=Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.Получить(0);
	ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПриемка="";
	
	Если Элементы.ШаблоныДокументов.ТекущиеДанные.ИспользоватьЕГАИС Тогда
		ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПодбор = ?(ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИспользоватьПодбор,"Товары","");	
	Иначе
		Если ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИспользоватьПодбор тогда
			Если ВидДокумента = "ОтборРазмещениеТоваров" тогда
				ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПодбор = "ТоварыОтбор";
			ИначеЕсли ВидДокумента = "РасходныйОрдерНаТовары" тогда
				ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПодбор = "ОтгружаемыеТовары";
			Иначе	
				ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПодбор = "Товары";
			КонецЕсли;
		КонецЕсли;
		
		Если ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИспользоватьПриемку тогда
			Если ВидДокумента = "ОтборРазмещениеТоваров" тогда
				ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПриемка = "ТоварыРазмещение";
			Иначе	
				ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПриемка = "Товары";
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	СохранитьШаблоны();
	ОграничитьТипыДока();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ИспользоватьПодбор"
//
// Параметры:
//  Элемент - <Флажек>
//			- Флажек ("ИспользоватьПодбор"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользоватьПодборПриИзменении(Элемент)
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	ТД.ПриемкаПоПодбору=?(ТД.ИспользоватьПриемку И ТД.ИспользоватьПодбор,ТД.ПриемкаПоПодбору,Ложь);
	ТД.ПриПриемкеЗапрашиватьТовар=?(ТД.ИспользоватьПриемку И ТД.ИспользоватьПодбор И ТД.ПриемкаПоПодбору,ТД.ПриПриемкеЗапрашиватьТовар,Ложь);
	
	ТД.ПриСканированииТовараПодбор=?(ТД.ИспользоватьПодбор,ТД.ПриСканированииТовараПодбор,0);
	ТД.ПриПревышенииЗаданияПодбор=?(ТД.ИспользоватьПодбор,ТД.ПриПревышенииЗаданияПодбор,0);
	ТД.ПриПревышенииЛимитаПодбор=?(ТД.ИспользоватьПодбор,ТД.ПриПревышенииЛимитаПодбор,0);
	ТД.ИспользованиеЯчеекПодбор=?(ТД.ИспользоватьПодбор,ТД.ИспользованиеЯчеекПодбор,0);
	ИспользованиеЯчеекПодборПриИзменении(Элементы.ИспользованиеЯчеекПодбор);
	ТД.ИспользованиеСерийниковПодбор=?(ТД.ИспользоватьПодбор,ТД.ИспользованиеСерийниковПодбор,0);
	ИспользованиеСерийниковПодборПриИзменении(Элементы.ИспользованиеСерийниковПодбор);
	ТД.ИспользованиеУпаковочныхЛистовПодбор=?(ТД.ИспользоватьПодбор,ТД.ИспользованиеУпаковочныхЛистовПодбор,0);
	ТД.РучнойВводКоличестваПодбор=?(ТД.ИспользоватьПодбор,ТД.РучнойВводКоличестваПодбор,Ложь);
	ТД.ПодтверждатьЭнтеромПодбор=?(ТД.ИспользоватьПодбор,ТД.ПодтверждатьЭнтеромПодбор,Ложь);
	ТД.ПечатьЭтикеткиПриПодборе=?(ТД.ИспользоватьПодбор,ТД.ПечатьЭтикеткиПриПодборе,0);
	ТД.ПриемкаПоПодбору=?(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку,ТД.ПриемкаПоПодбору,Ложь);
	ТД.ПриПриемкеЗапрашиватьТовар=?(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку И ТД.ПриемкаПоПодбору,ТД.ПриПриемкеЗапрашиватьТовар,Ложь);
		
	Элементы.ИмяТабличнойЧастиПодбор.ТолькоПросмотр				=не ТД.ИспользоватьПодбор;
	Элементы.ПриСканированииТовараПодбор.ТолькоПросмотр			=не ТД.ИспользоватьПодбор;
	Элементы.ПриПревышенииЗаданияПодбор.ТолькоПросмотр				=не ТД.ИспользоватьПодбор;
	Элементы.ПриПревышенииЛимитаПодбор.ТолькоПросмотр				=не ТД.ИспользоватьПодбор;
	Элементы.ИспользованиеЯчеекПодбор.ТолькоПросмотр				=не ТД.ИспользоватьПодбор;
	Элементы.ИспользованиеСерийниковПодбор.ТолькоПросмотр			=не ТД.ИспользоватьПодбор;
	Элементы.УчитыватьСерийниковВЗаданииПодбор.Доступность			=ТД.ИспользоватьПодбор;
	Элементы.ИспользованиеУпаковочныхЛистовПодбор.ТолькоПросмотр	=не ТД.ИспользоватьПодбор;
	Элементы.РучнойВводКоличестваПодбор.Доступность				=ТД.ИспользоватьПодбор;
	Элементы.ПодтверждатьЭнтеромПодбор.Доступность					=ТД.ИспользоватьПодбор;
	Элементы.ПечатьЭтикеткиПриПодборе.ТолькоПросмотр				=не ТД.ИспользоватьПодбор;
	Элементы.ПриемкаПоПодбору.Доступность							=(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку);
	Элементы.ПриПриемкеЗапрашиватьТовар.Доступность				=(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку И ТД.ПриемкаПоПодбору);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора "ИспользованиеЯчеекПодбор"
//
// Параметры:
//  Элемент - <ПолеВыбора>
//			- Поле выбора ("ИспользованиеЯчеекПодбор"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользованиеЯчеекПодборПриИзменении(Элемент)
	
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;//установка предопределенных параметров и запрет редактирования
	ТД.УчитыватьЯчеекВЗаданииПодбор=ТД.УчитыватьЯчеекВЗаданииПодбор И ТД.ИспользоватьПодбор И ТД.ИспользованиеЯчеекПодбор<>0;
	Элементы.УчитыватьЯчеекВЗаданииПодбор.Доступность=(ТД.ИспользоватьПодбор И ТД.ИспользованиеЯчеекПодбор<>0);
	
	ТД.ЗаполнятьСкладПодбор=ТД.ЗаполнятьСкладПодбор И ТД.ИспользоватьПодбор И ТД.ИспользованиеЯчеекПодбор<>0;
	Элементы.ЗаполнятьСкладПодбор.Доступность=(ТД.ИспользоватьПодбор И ТД.ИспользованиеЯчеекПодбор<>0);
	
	
	ТД.ВыгрузкаЯчеекПодбор=?(ТД.ИспользованиеЯчеекПодбор=0,0,ТД.ВыгрузкаЯчеекПодбор);
	Элементы.ШаблоныДокументовВыгрузкаЯчеекПодбор.ТолькоПросмотр=не (ТД.ИспользоватьПодбор И ТД.ИспользованиеЯчеекПодбор<>0);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора "ИспользованиеСерийниковПодбор"
//
// Параметры:
//  Элемент - <ПолеВыбора>
//			- Поле выбора ("ИспользованиеСерийниковПодбор"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользованиеСерийниковПодборПриИзменении(Элемент)
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;//установка предопределенных параметров и запрет редактирования
	ТД.УчитыватьСерийниковВЗаданииПодбор=ТД.УчитыватьСерийниковВЗаданииПодбор И ТД.ИспользоватьПодбор и ТД.ИспользованиеСерийниковПодбор<>0;
	Элементы.УчитыватьСерийниковВЗаданииПодбор.Доступность=(ТД.ИспользоватьПодбор И ТД.ИспользованиеСерийниковПодбор<>0);
	Элементы.ШаблоныДокументовУникальныеСерийныеНомераПодбор.Доступность=(ТД.ИспользоватьПодбор И ТД.ИспользованиеСерийниковПодбор<>0);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ИспользоватьПриемку"
//
// Параметры:
//  Элемент - <Флажек>
//			- Флажек ("ИспользоватьПриемку"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользоватьПриемкуПриИзменении(Элемент)
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;//установка предопределенных параметров и запрет редактирования	
	ТД.ПриемкаПоПодбору=?(ТД.ИспользоватьПриемку И ТД.ИспользоватьПодбор,ТД.ПриемкаПоПодбору,Ложь);
	ТД.ПриПриемкеЗапрашиватьТовар=?(ТД.ИспользоватьПриемку И ТД.ИспользоватьПодбор И ТД.ПриемкаПоПодбору,ТД.ПриПриемкеЗапрашиватьТовар,Ложь);
	
	ТД.ПриСканированииТовараПриемка=?(ТД.ИспользоватьПриемку,ТД.ПриСканированииТовараПриемка,0);
	ТД.ПриПревышенииЗаданияПриемка=?(ТД.ИспользоватьПриемку,ТД.ПриПревышенииЗаданияПриемка,0);
	ТД.ПриПревышенииЛимитаПриемка=?(ТД.ИспользоватьПриемку,ТД.ПриПревышенииЛимитаПриемка,0);
	ТД.ИспользованиеЯчеекПриемка=?(ТД.ИспользоватьПриемку,ТД.ИспользованиеЯчеекПриемка,0);
	ИспользованиеЯчеекПриемкаПриИзменении(Элементы.ИспользованиеЯчеекПриемка);
	ТД.ИспользованиеСерийниковПриемка=?(ТД.ИспользоватьПриемку,ТД.ИспользованиеСерийниковПриемка,0);
	ИспользованиеСерийниковПриемкаПриИзменении(Элементы.ИспользованиеСерийниковПриемка);
	ТД.ИспользованиеУпаковочныхЛистовПриемка=?(ТД.ИспользоватьПриемку,ТД.ИспользованиеУпаковочныхЛистовПриемка,0);
	ТД.РучнойВводКоличестваПриемка=?(ТД.ИспользоватьПриемку,ТД.РучнойВводКоличестваПриемка,Ложь);
	ТД.ПодтверждатьЭнтеромПриемка=?(ТД.ИспользоватьПриемку,ТД.ПодтверждатьЭнтеромПриемка,Ложь);
	ТД.ПечатьЭтикеткиПриПриемке=?(ТД.ИспользоватьПриемку,ТД.ПечатьЭтикеткиПриПриемке,0);
	ТД.ПриемкаПоПодбору=?(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку,ТД.ПриемкаПоПодбору,Ложь);
	ТД.ПриПриемкеЗапрашиватьТовар=?(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку И ТД.ПриемкаПоПодбору,ТД.ПриПриемкеЗапрашиватьТовар,Ложь);
	ТД.ПоштучноеПеремещение=?(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку И ТД.ПриемкаПоПодбору,ТД.ПоштучноеПеремещение,Ложь);
	
	Элементы.ИмяТабличнойЧастиПриемка.ТолькоПросмотр				=не ТД.ИспользоватьПриемку;
	Элементы.ПриСканированииТовараПриемка.ТолькоПросмотр			=не ТД.ИспользоватьПриемку;
	Элементы.ПриПревышенииЗаданияПриемка.ТолькоПросмотр			=не ТД.ИспользоватьПриемку;
	Элементы.ПриПревышенииЛимитаПриемка.ТолькоПросмотр				=не ТД.ИспользоватьПриемку;
	Элементы.ИспользованиеЯчеекПриемка.ТолькоПросмотр				=не ТД.ИспользоватьПриемку;
	Элементы.ИспользованиеСерийниковПриемка.ТолькоПросмотр			=не ТД.ИспользоватьПриемку;
	Элементы.УчитыватьСерийниковВЗаданииПриемка.Доступность		=ТД.ИспользоватьПриемку;
	Элементы.ИспользованиеУпаковочныхЛистовПриемка.ТолькоПросмотр	=не ТД.ИспользоватьПриемку;
	Элементы.РучнойВводКоличестваПриемка.Доступность				=ТД.ИспользоватьПриемку;
	Элементы.ПодтверждатьЭнтеромПриемка.Доступность				=ТД.ИспользоватьПриемку;
	Элементы.ПечатьЭтикеткиПриПриемке.ТолькоПросмотр				=не ТД.ИспользоватьПриемку;
	Элементы.ПриемкаПоПодбору.Доступность							=(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку);
	Элементы.ПриПриемкеЗапрашиватьТовар.Доступность				=(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку И ТД.ПриемкаПоПодбору);
	Элементы.ПоштучноеПеремещение.Доступность				=(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку И ТД.ПриемкаПоПодбору);

		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора "ИспользованиеЯчеекПриемка"
//
// Параметры:
//  Элемент - <ПолеВыбора>
//			- Поле выбора ("ИспользованиеЯчеекПриемка"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользованиеЯчеекПриемкаПриИзменении(Элемент)
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;//установка предопределенных параметров и запрет редактирования
	ТД.УчитыватьЯчеекВЗаданииПриемка=ТД.УчитыватьЯчеекВЗаданииПриемка И ТД.ИспользоватьПриемку и ТД.ИспользованиеЯчеекПриемка<>0;
	Элементы.УчитыватьЯчеекВЗаданииПриемка.Доступность=(ТД.ИспользоватьПриемку И ТД.ИспользованиеЯчеекПриемка<>0);
	
	ТД.ЗаполнятьСкладПриемка=ТД.ЗаполнятьСкладПриемка И ТД.ИспользоватьПриемку и ТД.ИспользованиеЯчеекПриемка<>0;
	Элементы.ЗаполнятьСкладПриемка.Доступность=(ТД.ИспользоватьПриемку И ТД.ИспользованиеЯчеекПриемка<>0);

	ТД.ВыгрузкаЯчеекПриемка=?(ТД.ИспользованиеЯчеекПриемка=0,0,ТД.ВыгрузкаЯчеекПриемка);
	Элементы.ШаблоныДокументовВыгрузкаЯчеекПриемка.ТолькоПросмотр=не (ТД.ИспользоватьПриемку И ТД.ИспользованиеЯчеекПриемка<>0);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора "ИспользованиеСерийниковПриемка"
//
// Параметры:
//  Элемент - <ПолеВыбора>
//			- Поле выбора ("ИспользованиеСерийниковПриемка"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользованиеСерийниковПриемкаПриИзменении(Элемент)
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;//установка предопределенных параметров и запрет редактирования
	ТД.УчитыватьСерийниковВЗаданииПриемка=ТД.УчитыватьСерийниковВЗаданииПриемка И ТД.ИспользоватьПриемку и ТД.ИспользованиеСерийниковПриемка<>0;
	Элементы.УчитыватьСерийниковВЗаданииПриемка.Доступность=(ТД.ИспользоватьПриемку И ТД.ИспользованиеСерийниковПриемка<>0);
	Элементы.ШаблоныДокументовУникальныеСерийныеНомераПриемка.Доступность=(ТД.ИспользоватьПриемку И ТД.ИспользованиеСерийниковПриемка<>0);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЕГАИСПриИзменении(Элемент)
	
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные; 
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.ВерсияЕГАИС.Доступность = ТД.ИспользоватьЕГАИС;
	Элементы.СопоставлениеЕГАИС.Доступность = ТД.ИспользоватьЕГАИС;
	Элементы.ЕГАИСИспользоватьПроверкуМарок.Доступность = ТД.ИспользоватьЕГАИС;	
	Элементы.ИспользоватьДатуРозливаЕГАИС.Доступность = ТД.ИспользоватьЕГАИС;
	Элементы.ЕгаисИспользоватьМарку.Доступность = ТД.ИспользоватьЕГАИС;	
	Элементы.ЕГАИСРежимВводаPDF417.Доступность = ТД.ИспользоватьЕГАИС;
	Элементы.СопоставлениеЕГАИС.Доступность = ТД.ИспользоватьЕГАИС;
	Элементы.ЕГАИСПонижатьДетализациюПроверкиТТНДоБутылок.Доступность = ТД.ИспользоватьЕГАИС;
	Элементы.Размещение.Доступность = НЕ ТД.ИспользоватьЕГАИС;
	

КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьМаркировкуПриИзменении(Элемент)
	
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные; 
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.ШаблоныДокументовМаркировкаСканироватьEAN.Доступность = ТД.ИспользоватьМаркировку;
	Элементы.ШаблоныДокументовМаркировкаEANсоответствуетGTIN.Доступность = ТД.ИспользоватьМаркировку;
	Элементы.ШаблоныДокументовМаркировкаДополнительныйПоискПоКМ.Доступность = ТД.ИспользоватьМаркировку;	
	Элементы.ШаблоныДокументовМаркировкаСоздаватьСправочникКМЕслиНеНайден.Доступность = ТД.ИспользоватьМаркировку;	
	Элементы.ШаблоныДокументовМаркировкаЗапретитьПодборНемаркируемыхТоваров.Доступность = ТД.ИспользоватьМаркировку;
	Элементы.ШаблоныДокументовМаркировкаВводМаркируемогоТовараБезКМ.Доступность = ТД.ИспользоватьМаркировку;
	Элементы.ШаблоныДокументовМаркировкаПроверкаБезСертификатаИС.Доступность = ТД.ИспользоватьМаркировку;
	Элементы.ШаблоныДокументовМаркировкаЗапросВЦРПТ.Доступность = ТД.ИспользоватьМаркировку;
	
	Элементы.МаркировкаПроверкаКМ.Доступность = ТД.ИспользоватьМаркировку;
	Элементы.МаркировкаПроверкаВладелькаКМ.Доступность = ТД.ИспользоватьМаркировку;
	Элементы.МаркировкаПроверкаСтатусаКМ.Доступность = ТД.ИспользоватьМаркировку;
	Элементы.МаркировкаРазрешенныеСтатусыКМ.Доступность = ТД.ИспользоватьМаркировку;
	
	Если ТД.ИспользоватьМаркировку тогда
	Иначе
		ТД.МаркировкаПроверкаКМ = Ложь;		
	КонецЕсли;
	
	МаркировкаПроверкаКМПриИзменении(Элемент);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивЧисловыхПодстрокДМ(Знач Строка, Знач Разделитель = ",")
 
    Результат = Новый Массив;
	
    Позиция = Найти(Строка, Разделитель);
    Пока Позиция > 0 Цикл
        Подстрока = Лев(Строка, Позиция - 1);
        Если Не ПустаяСтрока(Подстрока) Тогда
            Попытка Результат.Добавить(Число(Подстрока)); Исключение КонецПопытки;
        КонецЕсли;
        Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
        Позиция = Найти(Строка, Разделитель);
    КонецЦикла;
 
    Если Не ПустаяСтрока(Строка) Тогда
        Попытка Результат.Добавить(Число(Строка)); Исключение КонецПопытки;
    КонецЕсли;
 
    Возврат Результат;
 
КонецФункции


&НаКлиенте
Процедура МаркировкаПроверкаКМПриИзменении(Элемент)

	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные; 
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Элементы.МаркировкаПроверкаВладелькаКМ.Видимость = ТД.МаркировкаПроверкаКМ;
	Элементы.МаркировкаПроверкаСтатусаКМ.Видимость = ТД.МаркировкаПроверкаКМ;
	Элементы.МаркировкаРазрешенныеСтатусыКМ.Видимость = ТД.МаркировкаПроверкаКМ;

	Если ТД.МаркировкаПроверкаКМ тогда
		ЗагрузитьСтатусыКМ(ТД.МаркировкаРазрешенныеСтатусыКМ);
	Иначе
		ТД.МаркировкаПроверкаВладелькаКМ = 0;
		ТД.МаркировкаПроверкаСтатусаКМ = 0;
		ТД.МаркировкаРазрешенныеСтатусыКМ = "[]";
	КонецЕсли;

	МаркировкаПроверкаСтатусаКМПриИзменении(Элемент)

		
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьСтатусыКМ(ТекущиеМаркировкаРазрешенныеСтатусыКМ) 
	
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Очистить();
	
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(0,"Эмитирован");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(1,"Нанесен");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(2,"Введен в оборот",Истина);
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(3,"Утилизирован");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(4,"Выведен из оборота");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(5,"Зарезервировано. Не используется");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(6,"Возвращён в оборот");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(7,"Дезагрегирован");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(8,"Ожидает отгрузки");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(9,"Используется для документов экспорта");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(10,"Выведен из оборота по договору рассрочки");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(11,"Выведен из оборота при перемаркировке");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(12,"Нанесён, не оплачен");
	
	ТекущиеМаркировкаРазрешенныеСтатусыКМ = СтрЗаменить(ТекущиеМаркировкаРазрешенныеСтатусыКМ,"[","");
	ТекущиеМаркировкаРазрешенныеСтатусыКМ = СтрЗаменить(ТекущиеМаркировкаРазрешенныеСтатусыКМ,"]","");
	Если ТекущиеМаркировкаРазрешенныеСтатусыКМ<>"" тогда 
		МассивСохраненныхСтатусовКМ = РазложитьСтрокуВМассивЧисловыхПодстрокДМ(ТекущиеМаркировкаРазрешенныеСтатусыКМ);
		Для каждого строка из Таблица_МаркировкаРазрешенныеСтатусыКМ цикл
			Если МассивСохраненныхСтатусовКМ.Найти(строка.Значение)<>Неопределено тогда
				строка.Пометка = Истина;
			Иначе
				строка.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПроверкаСтатусаКМПриИзменении(Элемент)

	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные; 
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.МаркировкаРазрешенныеСтатусыКМ.Видимость = НЕ (ТД.МаркировкаПроверкаСтатусаКМ = 0);
	ТД.МаркировкаРазрешенныеСтатусыКМ=?(ТД.МаркировкаПроверкаСтатусаКМ=0,"[]",ТД.МаркировкаРазрешенныеСтатусыКМ);	
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаРазрешенныеСтатусыКМПриИзменении(Элемент)
	
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные; 
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивСтатусов = ""; 
	Для каждого строка из Таблица_МаркировкаРазрешенныеСтатусыКМ цикл
		Если строка.Пометка тогда
			МассивСтатусов = МассивСтатусов + строка.Значение+",";
		КонецЕсли;	
	КонецЦикла;
	МассивСтатусов = ?(прав(МассивСтатусов,1)=",",Лев(МассивСтатусов,СтрДлина(МассивСтатусов)-1),МассивСтатусов);
	
	ТД.МаркировкаРазрешенныеСтатусыКМ = "["+МассивСтатусов+"]";
	
КонецПроцедуры



// Процедура - обработчик события "ПриИзменении" флажка "ПриемкаПоПодбору"
//
// Параметры:
//  Элемент - <Флажек>
//			- Флажек ("ПриемкаПоПодбору"), с которым связано данное событие.
//
&НаКлиенте
Процедура ПриемкаПоПодборуПриИзменении(Элемент)
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;//установка предопределенных параметров и запрет редактирования
	ТД.ПриПриемкеЗапрашиватьТовар=?(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку И ТД.ПриемкаПоПодбору,ТД.ПриПриемкеЗапрашиватьТовар,Ложь);
	Элементы.ПриПриемкеЗапрашиватьТовар.Доступность=(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку И ТД.ПриемкаПоПодбору);
	
	ТД.ПоштучноеПеремещение=?(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку И ТД.ПриемкаПоПодбору,ТД.ПоштучноеПеремещение,Ложь);
	Элементы.ПоштучноеПеремещение.Доступность=(ТД.ИспользоватьПодбор И ТД.ИспользоватьПриемку И ТД.ПриемкаПоПодбору);

	
КонецПроцедуры

&НаКлиенте
Процедура ПриПриемкеЗапрашиватьТоварПриИзменении(Элемент)
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;//установка предопределенных параметров и запрет редактирования
	ТД.ПоштучноеПеремещение=?(ТД.ПриПриемкеЗапрашиватьТовар,Ложь,ТД.ПоштучноеПеремещение);
КонецПроцедуры

&НаКлиенте
Процедура ПоштучноеПеремещениеПриИзменении(Элемент)
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;//установка предопределенных параметров и запрет редактирования
	ТД.ПриПриемкеЗапрашиватьТовар=?(ТД.ПоштучноеПеремещение,Ложь,ТД.ПриПриемкеЗапрашиватьТовар);
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводКоличестваПодборПриИзменении(Элемент)
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;//установка предопределенных параметров и запрет редактирования
	ТД.ПодтверждатьЭнтеромПодбор=?(ТД.РучнойВводКоличестваПодбор,Истина,Истина);

КонецПроцедуры

&НаКлиенте
Процедура РучнойВводКоличестваПриемкаПриИзменении(Элемент)
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;//установка предопределенных параметров и запрет редактирования
	ТД.ПодтверждатьЭнтеромПриемка=?(ТД.РучнойВводКоличестваПриемка,Истина,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБейджей(Команда)
	
	Таб=ПолучитьМакетНаСервере();
	
	Таб.Показать("Бейджи");


КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере()

ТекКолонка = 1;
	ТекСтрока  = 1;

	Таб                     = Новый ТабличныйДокумент;
	Таб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Пользователи"+СокрЛП(ИмяКомпьютера());
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Бейджи");
	ЭтикеткаОбласть         = Макет.ПолучитьОбласть(1,1,4,2);
	ОбластьПользователя     = ЭтикеткаОбласть.Области.Пользователь;
	ОбластьШтрихкод         = ЭтикеткаОбласть.Области.ОбластьШтрихкод;
	РисунокШтрихкод         = ЭтикеткаОбласть.Рисунки.Штрихкод;
//	ОбластьДоп             = ЭтикеткаОбласть.Области.Дополнительно;
	
	ВысотаЭтикетки=50;
	ШиринаЭтикетки=90;
	
	ОбластьПользователя.ВысотаСтроки = ВысотаЭтикетки * 2.65 * 0.3;
	ОбластьШтрихкод.ВысотаСтроки     = ВысотаЭтикетки * 2.65 * 0.5;
	РисунокШтрихкод.Расположить(ОбластьШтрихкод);
	//ОбластьДоп.ВысотаСтроки         = ВысотаЭтикетки * 2.65 * 0.2;
	
	ЭтикеткаОбласть.Область(2,2,2,2).ШиринаКолонки = ШиринаЭтикетки*0.53;
	
	ОбластьГраницаСправа      = Макет.ПолучитьОбласть(2,4,4,4);
	ОбластьНизГраницыСправа   = Макет.ПолучитьОбласть(5,4,5,4);
	ОбластьГраницаСнизу       = Макет.ПолучитьОбласть(6,2,6,2);
	ОбластьНачалоГраницыСнизу = Макет.ПолучитьОбласть(6,1,6,1);
	
	ОбластьГраницаСправа.Рисунки.ГраницаСправа.Высота = ВысотаЭтикетки*1.09;
	ОбластьГраницаСнизу.Рисунки.ГраницаСнизу.Ширина   = ШиринаЭтикетки*0.7;
	
	ОбластьГраницаСправа.Область(1,1,1,1).ВысотаСтроки = ВысотаЭтикетки*2.65;
	ОбластьГраницаСнизу.Область(1,1,1,1).ШиринаКолонки = ШиринаЭтикетки*0.53;
	
	ВсегоСтрок        = 5;
	КоличествоКолонок = 2;
	
	ВсегоКолонок = КоличествоКолонок;
	Если ВсегоКолонок > 1 Тогда
		ВсегоКолонок = ВсегоКолонок+ВсегоКолонок - 1; //добавляем разделители колонок.
	КонецЕсли;

	ВывелиХотяБыОдинШтрихКод = Ложь;
	Для Каждого СтрокаИзСписка Из Пользователи Цикл
				
		КоличествоМиллиметровВПикселе = 0.5;

		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(ЭтикеткаОбласть.Рисунки.Штрихкод.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",          Окр(ЭтикеткаОбласть.Рисунки.Штрихкод.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(СтрокаИзСписка.Login));
		ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    6);
		
		ЭтикеткаОбласть.Рисунки.Штрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
				
		
		
		ОбластьПользователя.Текст        = "" + СтрокаИзСписка.Пользователь;
		
			Если ТекКолонка>ВсегоКолонок Тогда //новая строка.
				Если ВсегоСтрок<>1 Тогда //выведем разделитель.
					Для Сч = 1 по ВсегоКолонок Цикл
						Если Сч = 1 Тогда
							Таб.Вывести(ОбластьНачалоГраницыСнизу);
						Иначе
							Таб.Присоединить(ОбластьНачалоГраницыСнизу);
						КонецЕсли;
						Таб.Присоединить(ОбластьГраницаСнизу);
						Таб.Присоединить(ОбластьНизГраницыСправа);
						Сч = Сч + 1;
					КонецЦикла;
					ТекСтрока = ТекСтрока + 1;
				КонецЕсли;
				Если ТекСтрока/ВсегоСтрок = Цел(ТекСтрока/ВсегоСтрок) Тогда
					Таб.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				ТекСтрока = ТекСтрока + 1;
				ТекКолонка=1;
			КонецЕсли;
			Если ТекКолонка<>1 Тогда //выведем разделитель.
				Таб.Присоединить(ОбластьГраницаСправа);
				ТекКолонка = ТекКолонка + 1;
				Таб.Присоединить(ЭтикеткаОбласть);
				ТекКолонка = ТекКолонка + 1;
			Иначе
				Таб.Вывести(ЭтикеткаОбласть);
				ТекКолонка = ТекКолонка + 1;
			КонецЕсли;

			ВывелиХотяБыОдинШтрихКод = Истина;
			КонецЦикла;

	Если ВывелиХотяБыОдинШтрихКод Тогда
					Таб.Защита              = Ложь;
			Таб.ТолькоПросмотр      = Истина;
			Таб.ОтображатьСетку     = Ложь;
			Таб.ОтображатьЗаголовки = Ложь;
			Возврат Таб;
			
	КонецЕсли;

КонецФункции


&НаСервере
Функция СобратьСписокИменАтрибута()
	СписокОтвета=Новый СписокЗначений();
	СписокОтвета.Добавить("!!! Ячейки !!!");
	СписокОтвета.Добавить("Код");
	//СписокОтвета.Добавить("!!! Остатки !!!");
	Для Каждого Реквизит из Метаданные.Справочники.Номенклатура.Реквизиты цикл
		СписокОтвета.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	//ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ
	Запрос = Новый Запрос();
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|ПланВидовХарактеристикДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	//|ПланВидовХарактеристикДополнительныеРеквизитыИСведения.Наименование КАК НаименованиеСвойства
	//|из
	//|ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ПланВидовХарактеристикДополнительныеРеквизитыИСведения
	//|ГДЕ
	//|НЕ ПланВидовХарактеристикДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	//|И ПланВидовХарактеристикДополнительныеРеквизитыИСведения.Доступен
	////|И (НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка) или НаборСвойств.Родитель.Наименование="Номенклатура")
	//|И (ПланВидовХарактеристикДополнительныеРеквизитыИСведения.НаборСвойств.Родитель.Наименование=""Номенклатура"")";
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
	| СправочникНоменклатураДополнительныеРеквизиты.Свойство КАК Свойство, 
	| СправочникНоменклатураДополнительныеРеквизиты.Свойство.Заголовок КАК НаименованиеСвойства
	|из
	| Справочник.Номенклатура.ДополнительныеРеквизиты КАК СправочникНоменклатураДополнительныеРеквизиты";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		СписокОтвета.Добавить("ДР_"+Выборка.НаименованиеСвойства);	
	КонецЦикла;		
	
	Возврат СписокОтвета;
КонецФункции


&НаКлиенте
Процедура АтрибутАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
    Список = Новый СписокЗначений();
    Список.ЗагрузитьЗначения(СобратьСписокИменАтрибута().ВыгрузитьЗначения());
    ДанныеВыбора=Список;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАтрибутыЕгаис(Команда)
	
	Атрибут5 = "Производитель";
	Атрибут6 = "ПроизводительИмпортерДляДекларацийАлко";
	Атрибут7 = "ОбъемДАЛ";
	Атрибут8 = "Крепость";
	Атрибут9 = "ВидАлкогольнойПродукции";	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТоварыЕГАИС(Команда)
	ПроверитьКаталоги("ВыгрузитьТоварыЕГАИС");
КонецПроцедуры

Функция ЗаполнитьТаблицуТоварыЕГАИС()
	
	ЗапросТоваров=Новый Запрос();
	
	ТекстЗапроса= "ВЫБРАТЬ
	              |	ЕГАИС_Номенклатура.Ссылка,
	              |	ЕГАИС_Номенклатура.Код,
	              |	ЕГАИС_Номенклатура.Наименование,
	              |	ЕГАИС_Номенклатура.НаименованиеПолное,
	              |	ЕГАИС_Номенклатура.Объем,
	              |	ЕГАИС_Номенклатура.Крепость,
	              |	ЕГАИС_Номенклатура.Производитель,
	              |	ЕГАИС_Номенклатура.Импортер,
	              |	ЕГАИС_Номенклатура.ВидПродукции,
	              |	ЕГАИС_Номенклатура.ПометкаУдаления КАК Удалить
	              |ИЗ
	              |	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК ЕГАИС_Номенклатура
	              |ГДЕ
	              |	(&ВсеПроизводители
	              |			ИЛИ ЕГАИС_Номенклатура.Производитель = &Производитель)
	              |	И (&ВсеИмпортеры
	              |			ИЛИ ЕГАИС_Номенклатура.Импортер = &Импортер)
	              |	И (&ВсеВиды
	              |			ИЛИ ЕГАИС_Номенклатура.ВидПродукции = &ВидПродукции)";

	ЗапросТоваров.Текст=ТекстЗапроса;
	ЗапросТоваров.УстановитьПараметр("ВсеИмпортеры",Не ЗначениеЗаполнено(Импортер));
	ЗапросТоваров.УстановитьПараметр("Импортер",Импортер);
	ЗапросТоваров.УстановитьПараметр("ВсеПроизводители",Не ЗначениеЗаполнено(Производитель));
	ЗапросТоваров.УстановитьПараметр("Производитель",Производитель);
	ЗапросТоваров.УстановитьПараметр("ВсеВиды",Не ЗначениеЗаполнено(ВидПродукции));
	ЗапросТоваров.УстановитьПараметр("ВидПродукции",ВидПродукции);		
	
	ДанныеТовары = ЗапросТоваров.Выполнить().Выгрузить();
    АдресДанныхТовары = ПоместитьВоВременноеХранилище(ДанныеТовары, УникальныйИдентификатор);
	НоменклатураЕГАИС.Загрузить(ДанныеТовары);
	Возврат АдресДанныхТовары;
	
КонецФункции  



&НаСервереБезКонтекста
Функция ВыгрузитьПорциюТоваровЕГАИС(ИДТСД,начало,конец,АдресДанных)	
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла="";
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		        n=Счетчик+1;
				СтрокаТовара=""+n+";";
    			//СтрокаТовара=СтрокаТовара+?(Данные[Счетчик].ЭтоХарактеристика,"8h-","8a-")+СокрЛП(Данные[Счетчик].ссылка.УникальныйИдентификатор())+";";
				СтрокаТовара=СтрокаТовара+формат(Данные[Счетчик].Удалить,"БЛ=+; БИ=-")+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Наименование)+";";
				СтрокаТовара=СтрокаТовара+"8e-"+Данные[Счетчик].Ссылка.УникальныйИдентификатор()+";";
				СтрокаТовара=СтрокаТовара+СокрЛП(Данные[Счетчик].Код)+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Производитель)+";";
				СтрокаТовара=СтрокаТовара+";"; //импортер
				СтрокаТовара=СтрокаТовара+Формат(Данные[Счетчик].Объем,"ЧРД=.; ЧН=0; ЧГ=0")+";";
				СтрокаТовара=СтрокаТовара+Формат(Данные[Счетчик].Крепость,"ЧРД=.; ЧН=0; ЧГ=0")+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].ВидПродукции)+";";
				СтрокаТовара=СтрокаТовара+ТоварСопоставленОдинКОдному(Данные[Счетчик].Ссылка)+";";
				СтрокаТовара=СтрокаТовара+"6"+";";//количество единиц в коробе
				СтрокаТовара=СтрокаТовара+"1"+";"; //требуется ввод справки А по товару
				СтрокаТовара=СтрокаТовара+"1"+";"; //требуется ввод справки Б по товару
				СтрокаТовара=СтрокаТовара+"1"+";"; //требуется ввод даты розлива по товару
				
     			ТекстФайла=ТекстФайла+СтрокаТовара+Символы.ПС;	
    КонецЦикла;


	
    Возврат ТекстФайла; 		   
	 
КонецФункции

&НаСервереБезКонтекста
Функция ТоварСопоставленОдинКОдному(НоменклатураЕГАИС)
	
	СопоставленОдинКОдному = "0";
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЕГАИС_СоответствиеНоменклатуры.Номенклатура как ссылка
	                |ИЗ
	                |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК ЕГАИС_СоответствиеНоменклатуры
	                |ГДЕ
	                |	ЕГАИС_СоответствиеНоменклатуры.АлкогольнаяПродукция = &ЕГАИСНоменклатура";
						
	Запрос.УстановитьПараметр("ЕГАИСНоменклатура", НоменклатураЕГАИС);
	Рез =Запрос.Выполнить().Выбрать();
	Если Рез.Количество() = 1 тогда
		СопоставленОдинКОдному = "1";	
	КонецЕсли;

	Возврат СопоставленОдинКОдному;
	
КонецФункции





//МАРКИ ЕГАИС
&НаСервере
Функция ЗаполнитьТаблицуМарки()

	Запрос = Новый Запрос ("ВЫБРАТЬ
	|	ЕГАИС_ДанныеМарки.АкцизнаяМарка.ЗначениеШтрихкода КАК Марка,
	|	ЕГАИС_ДанныеМарки.АлкогольнаяПродукция КАК НоменклатураЕГАИС,
	|	ЕстьNull(ЕГАИС_ДанныеМарки.АлкогольнаяПродукция.ПометкаУдаления, Ложь) КАК ПометкаУдаления,
	|	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода,"""") КАК Короб,
	|	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка.ЗначениеШтрихкода,"""") КАК Палета 
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК ЕГАИС_ДанныеМарки
	|   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
	|   ПО ДанныеУпаковкиУровень1.Штрихкод.ЗначениеШтрихкода = ЕГАИС_ДанныеМарки.АкцизнаяМарка.ЗначениеШтрихкода
	|   И (ДанныеУпаковкиУровень1.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|			ИЛИ ДанныеУпаковкиУровень1.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	|   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
	|   ПО ДанныеУпаковкиУровень2.Штрихкод.ЗначениеШтрихкода = ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода
	|   И (ДанныеУпаковкиУровень1.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|			ИЛИ ДанныеУпаковкиУровень1.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))");



    Данные      = Запрос.Выполнить().Выгрузить();
    АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество=Данные.Количество();

	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес", АдресДанных);

    Возврат 	Запись;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьМаркиЕГАИС(Команда)
	ПроверитьКаталоги("ВыгрузитьМаркиЕГАИС");
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПорциюМарокЕГАИС(начало,конец,АдресДанных)
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла="";
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n=Счетчик+1;
		СтрокаМарки=""+n+";";	
		СтрокаМарки=СтрокаМарки+?(Данные[Счетчик].ПометкаУдаления,"-","+")+";";
		СтрокаМарки=СтрокаМарки+ЧистаяСтрока(Строка(Данные[Счетчик].Марка))+";";//2 - марка ЕГАИС 
		СтрокаМарки=СтрокаМарки+"8e-"+ЧистаяСтрока(Данные[Счетчик].НоменклатураЕГАИС.УникальныйИдентификатор())+";";//3 - ID номенклатуры марки 
		СтрокаМарки=СтрокаМарки+";"; //4 - SN
		СтрокаМарки=СтрокаМарки+ЧистаяСтрока(Строка(Данные[Счетчик].Палета))+";";//5 - палета 
		СтрокаМарки=СтрокаМарки+ЧистаяСтрока(Строка(Данные[Счетчик].Короб))+";";//6 - короб 

		ТекстФайла=ТекстФайла+СтрокаМарки+Символы.ПС;

	КонецЦикла;
	
	Возврат ТекстФайла;

КонецФункции

#Область ВспомогательныеФункции

&НаСервере
Функция ПолучитьШКиНоменклатуруПоАлкогольнойПродукции(лАлкогольнаяПродукция)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Штрихкоды.Штрихкод КАК Штрихкод,
	                      |	Штрихкоды.Номенклатура КАК Товар,
	                      |	Штрихкоды.Характеристика КАК Характеристика
	                      |ИЗ
	                      |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	                      |		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура = Штрихкоды.Номенклатура
	                      |ГДЕ
	                      |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &АлкогольнаяПродукция");
	Запрос.УстановитьПараметр("АлкогольнаяПродукция", лАлкогольнаяПродукция);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

#КонецОбласти


#Область РаботаFTP

&НаКлиенте
Процедура ПроверитьСвязьНажатие(Элемент)
	
	Если КаталогиДоступныFTP() тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Соединение с FTP-сервером установлено";
		Сообщение.Сообщить();
		
		СписокТСД.Очистить();
		КаталогFTPПриИзменении();	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогFTPПриИзменении(ПриОткрытии=Ложь)
	Если КаталогиДоступныFTP(ПриОткрытии) тогда
			
		FTP = ПодключитьсяКFTPСерверу();		
		FTP.УстановитьТекущийКаталог("/");
		СписокТСД.Очистить();
		
		ФайлыТСД = FTP.НайтиФайлы(
					"/DataMobile/", // ищём в корневом каталоге
       			 	"*" // любые файлы (здесь можно задать маску)
					);
					
	    Для Каждого файлТСД из ФайлыТСД цикл
			Если файлТСД.ЭтоКаталог()  Тогда
				Если НРег(ФайлТСД.Имя)="base" тогда
					продолжить;
				КонецЕсли;
				Если НРег(ФайлТСД.Имя)="prnmask" тогда
					продолжить;
				КонецЕсли;
				Если НРег(ФайлТСД.Имя)="sounds" тогда
					продолжить;
				КонецЕсли;
				Если НРег(ФайлТСД.Имя)="dmphotos" тогда
					продолжить;
				КонецЕсли;
				Если НРег(ФайлТСД.Имя)="dmimages" тогда
					продолжить;
				КонецЕсли;
				Если НРег(ФайлТСД.Имя)="errors" тогда
					продолжить;
				КонецЕсли;	
				Если НРег(файлТСД.Имя)="in" тогда
					продолжить;
				КонецЕсли;	
				Если НРег(файлТСД.Имя)="out" тогда
					продолжить;
				КонецЕсли;	
				Если НРег(файлТСД.Имя)="log" тогда
					продолжить;
				КонецЕсли;	
				Если НРег(файлТСД.Имя) = "appupdate" тогда
					продолжить;
				КонецЕсли;
				Если НРег(файлТСД.Имя) = "others" тогда
					продолжить;
				КонецЕсли;	
				СписокТСД.Добавить().ТСД=ФайлТСД.Имя;
			КонецЕсли;
		КонецЦикла;
		
		Если СписокТСД.Количество()>0 Тогда
			
			ПрочитатьНастройкиТСД();
			
			Попытка
			Структура = Новый Структура;
			ТекПозиция=СписокТСД.НайтиСтроки(Новый Структура("ТСД", СтрЗаменить(ИДТСД, РП, "")));

				Элементы.СписокТСД.ТекущаяСтрока=ТекПозиция;
				ИДТСД=ТекПозиция[0].ТСД+РП;
			Исключение	
				Элементы.СписокТСД.ТекущаяСтрока=СписокТСД[0];
				ИДТСД=СписокТСД[0].ТСД+РП;
			КонецПопытки
		КонецЕсли;
		Элементы.СписокТСД.Обновить();	
		//ЭлементыФормы.СписокТСД.ОбновитьСтроки();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьсяКFTPСерверу(ПриОткрытии=Ложь)
	
	Если ПриОткрытии тогда
		FTPТаймАут=5;	
	Иначе
		FTPТаймАут=30;
	КонецЕсли;
	
	#Если ВебКлиент тогда
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="FTPСоединение не доступно в облаке.";
		Сообщение.Сообщить();
		Соединение = Неопределено;
		
	#Иначе
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
		//	Соединение = Новый FTPСоединение(FTPАдрес, FTPПорт,  FTPЛогин, FTPПароль, Неопределено, Истина,60,ЗащищенноеСоединение,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
		Соединение = Новый FTPСоединение(
		FTPАдрес, // адрес ftp сервера
		FTPПорт, // порт сервера
		FTPЛогин, // имя пользователя
		FTPПароль, // пароль пользователя
		Неопределено, // прокси не используется
		Истина, // пассивный режим работы
		FTPТаймАут, // таймаут (0 - без ограничений)
		Неопределено // незащищенное соединение
		);
		
		// Для случаев, когда у ftp сервера нет возможности
		// обращаться к нам (мы находимся за межсетевым экраном)
		// следует использовать пассивный режим работы.				
		Возврат Соединение;
	#КонецЕсли
	
	Возврат Соединение;

КонецФункции	

&НаКлиенте
Функция КаталогиДоступныFTP(ПриОткрытии=Ложь)

	Если FTPАдрес="" или FTPПорт=0 тогда
		Возврат Ложь;
	КонецЕсли; 
	
	
	ИмяКаталогаIN="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"in/";
	ИмяКаталогаOUT="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"out/";
	ИмяКаталогаLOG="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"log/";
		
	Попытка		
		FTP = ПодключитьсяКFTPСерверу(ПриОткрытии);		
		
		Если FTP = Неопределено Тогда
			КаталогFTPДоступен = Ложь;
			Возврат КаталогFTPДоступен;		
		КонецЕсли; 
		
		Если НЕ НайтиСоздатьFTPКаталог(FTP, ИмяКаталогаIN, Ложь) 
			или НЕ НайтиСоздатьFTPКаталог(FTP, ИмяКаталогаOUT, Ложь) 
			или НЕ НайтиСоздатьFTPКаталог(FTP, ИмяКаталогаLOG, Ложь) Тогда
			
			ДопПараметры = Новый Структура();
			ДопПараметры.Вставить("FTP", 					FTP);
			ДопПараметры.Вставить("КаталогFTPДоступен", 	КаталогFTPДоступен);
			ДопПараметры.Вставить("ИмяКаталогаIN", 			ИмяКаталогаIN);
			ДопПараметры.Вставить("ИмяКаталогаOUT", 		ИмяКаталогаOUT);
			ДопПараметры.Вставить("ИмяКаталогаLOG", 		ИмяКаталогаLOG);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСозданияКаталоговОбменаНаFTP_Завершение",ЭтаФорма,ДопПараметры);	
			ТекстВопроса = "Папки обмена на FTP не существуют или не содержат необходимых подпапок. Создать?";
			ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);					
		Иначе
			
			КаталогFTPДоступен = Истина;
			
			Возврат КаталогFTPДоступен;
		КонецЕсли;	
	Исключение	
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не удалось соединиться с FTP сервером, проверьте настройки!";
		Сообщение.Сообщить();
		КаталогFTPДоступен = Ложь;
		Возврат КаталогFTPДоступен;
	КонецПопытки;			
	
	Возврат КаталогFTPДоступен;
	
КонецФункции

&НаКлиенте
Процедура ВопросСозданияКаталоговОбменаНаFTP_Завершение(Результат, ДопПараметры) Экспорт

	КаталогFTPДоступен = ДопПараметры.КаталогFTPДоступен;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НайтиСоздатьFTPКаталог(ДопПараметры.FTP, ДопПараметры.ИмяКаталогаIN, Истина) 
			и НайтиСоздатьFTPКаталог(ДопПараметры.FTP, ДопПараметры.ИмяКаталогаOUT, Истина) 
			и НайтиСоздатьFTPКаталог(ДопПараметры.FTP, ДопПараметры.ИмяКаталогаLOG, Истина) тогда	  			
			
			ОчиститьСообщения();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Папки обмена на FTP успешно созданы!";
			Сообщение.Сообщить();
			КаталогFTPДоступен = Истина;
		Иначе
			ОчиститьСообщения();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Не удалось создать необходимые папки обмена на FTP, попробуйте создать их вручную!";
			Сообщение.Сообщить();
			КаталогFTPДоступен = Ложь;		
		КонецЕсли;
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Папки обмена на FTP не существуют или не содержат необходимых подпапок, обмен не возможен!";
		Сообщение.Сообщить();
		КаталогFTPДоступен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСоздатьFTPКаталог(FTP, Путь, Создавать = Ложь) Экспорт
	
	Попытка
		
		FTP.УстановитьТекущийКаталог("/");
		FTP.УстановитьТекущийКаталог(Путь);
		FTP.УстановитьТекущийКаталог("/");
		Возврат Истина;
	Исключение
		
		Если Создавать Тогда		
			Попытка			
				FTP.УстановитьТекущийКаталог("/");
				FTP.СоздатьКаталог(Путь);
				Возврат Истина;
			Исключение	
				Возврат Ложь;
			КонецПопытки;
		Иначе
			
			Возврат Ложь;
		КонецЕсли;		
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ИспользоватьFTPПриИзменении(Элемент)
	
	ВидимостьЭлементовНастройкиFTP();	
	лКаталогОбменаПриИзменении(СписокТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовНастройкиFTP()
	
	Элементы.FTPАдрес.Видимость = ИспользоватьFTP;
	Элементы.FTPПорт.Видимость = ИспользоватьFTP;
	Элементы.FTPЛогин.Видимость = ИспользоватьFTP;
	Элементы.FTPПароль.Видимость = ИспользоватьFTP;
	Элементы.ПроверитьСвязь.Видимость = ИспользоватьFTP;
	
	Элементы.СформироватьQRКод.Видимость 	= ИспользоватьFTP;
	Элементы.ШтрихкодQR.Видимость 			= ИспользоватьFTP;
	Элементы.Декорация3.Видимость 			= ИспользоватьFTP;
	
	Элементы.лКаталогОбмена.Видимость  = НЕ ИспользоватьFTP;
	
КонецПроцедуры
 
&НаКлиенте
Функция FTPПолучитьИмяВременногоФайлаНаКлиенте() 
	
	ВременныйФайл = "";
	
	#Если НЕ ВебКлиент Тогда
		ВременныйФайл = ПолучитьИмяВременногоФайла("tmp");
	#КонецЕсли

	Возврат ВременныйФайл;
	
КонецФункции


&НаКлиенте
Функция ОтправитьФайлНаFTP(ТекстовыйДокумент, ВременноеИмяФайла)
	
	Успех = Истина;
	ИмяФайла = Лев(ВременноеИмяФайла, СтрДлина(ВременноеИмяФайла)-4);  //При копировании файл не доступен, переименовываем после окончания копирования
				
	Попытка
		FTP = ПодключитьсяКFTPСерверу();
			
		FTP.УстановитьТекущийКаталог("/");
		
		ИмяКаталогаIN="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"in/";
		FTP.УстановитьТекущийКаталог(ИмяКаталогаIN);
		
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();//файл для временного хранения записи
		ТекстовыйДокумент.Записать(ВременныйФайл,КодировкаТекста.UTF8);
		
		Если FTP.НайтиФайлы(ВременноеИмяФайла).Количество() > 0 Тогда //файл уже есть на FTP, надо удалить
			FTP.Удалить(ВременноеИмяФайла);
		КонецЕсли;
		
		FTP.Записать(ВременныйФайл, ВременноеИмяФайла);
		УдалитьФайлы(ВременныйФайл);
		
		Если FTP.НайтиФайлы(ИмяФайла).Количество() > 0 Тогда //файл уже есть на FTP, надо удалить
			FTP.Удалить(ИмяФайла);
		КонецЕсли;
		
		//переименование файла для загрузки *.dmtemp в *.dm
		FTP.Переместить(ВременноеИмяФайла, ИмяФайла);
		
		FTP.УстановитьТекущийКаталог("/");
	Исключение
		Сообщить("Ошибка доступа к FTP "+ОписаниеОшибки());
		Успех = Ложь;
	КонецПопытки;
	
	Возврат Успех;
КонецФункции

&НаКлиенте
Процедура FTPАдресПриИзменении(Элемент)
	ИДТСД="";
КонецПроцедуры

#КонецОбласти

#Область Маркировка

&НаСервере
Функция ПроверитьТребуетсяВыгрузкаМарок(ВидДокумента)

	Если ВидДокумента = "ПриобретениеТоваровУслуг" или ВидДокумента = "ПриемкаТоваровИСМП" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДобавитьМаркированныйТоварВТекстДокумента(ТекстФайлаДокумент)
 
	ВыборкаТоваров = ПолучитьВыборкуМаркированныхТоваровПоДокументу(ДокументВыгрузки, ВидДокументаВыгрузки, ИмяТЧДокументаПодбор);
	
	Если ТипЗнч(ДокументВыгрузки) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") тогда	
		Модуь_ШтрихкодированиеИСМПСлужебный = ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		ДанныеНоменклатурыПоДаннымУПД = Модуь_ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыПоДаннымУПД(ДокументВыгрузки);
		
		ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора = ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора(ДокументВыгрузки);

	КонецЕсли;

	ТЗКМРаспределить = Новый ТаблицаЗначений;
	ТЗКМРаспределить.Колонки.Добавить("Номенклатура");
	ТЗКМРаспределить.Колонки.Добавить("Характеристика");
	ТЗКМРаспределить.Колонки.Добавить("Количество");

	лНомерСтроки = 1;
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		
		ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(лНомерСтроки, "ЧГ=0") + ";S;";//префикс приемки

		Если ЗначениеЗаполнено(ВыборкаТоваров.Номенклатура) тогда
			Если ЗначениеЗаполнено(ВыборкаТоваров.Характеристика) тогда
				ТекстФайлаДокумент = ТекстФайлаДокумент + "8U-" + СокрЛП(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор()) + СокрЛП(ВыборкаТоваров.Характеристика.УникальныйИдентификатор()) + ";";
			Иначе
				ТекстФайлаДокумент = ТекстФайлаДокумент+ "8U-" + СокрЛП(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000" + ";";
			КонецЕсли;
		Иначе
			//Попробовать найти номенклатуру из сопоставления документа ЭДО
			Если ТипЗнч(ДокументВыгрузки) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") тогда
				СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(ВыборкаТоваров.Марка);
				
				Если СведенияПоEAN = Неопределено Тогда
					СведенияПоEAN = ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора.Получить(ВыборкаТоваров.Марка);
	            КонецЕсли;

				Если СведенияПоEAN <> Неопределено Тогда
					
					Если ЗначениеЗаполнено(СведенияПоEAN.Номенклатура) тогда
						
						Если ЗначениеЗаполнено(СведенияПоEAN.Характеристика) тогда
							ТекстФайлаДокумент = ТекстФайлаДокумент + "8U-" + СокрЛП(СведенияПоEAN.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СведенияПоEAN.Характеристика.УникальныйИдентификатор()) + ";";
						Иначе
							ТекстФайлаДокумент = ТекстФайлаДокумент+ "8U-" + СокрЛП(СведенияПоEAN.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000" + ";";
						КонецЕсли;
						
						СтрокаРаспределения = ТЗКМРаспределить.Добавить();
						СтрокаРаспределения.Номенклатура = СведенияПоEAN.Номенклатура;
						СтрокаРаспределения.Характеристика = СведенияПоEAN.Характеристика;
						СтрокаРаспределения.Количество = 1;

						
					Иначе			
						ТекстФайлаДокумент = ТекстФайлаДокумент + "00000000-0000-0000-0000-000000000000" + ";";		
					КонецЕсли;	
				Иначе			
					ТекстФайлаДокумент = ТекстФайлаДокумент + "00000000-0000-0000-0000-000000000000" + ";";		
				КонецЕсли;	
			Иначе
				ТекстФайлаДокумент = ТекстФайлаДокумент + "00000000-0000-0000-0000-000000000000" + ";";				
			КонецЕсли;	
		КонецЕсли;

		
		ТекущееКоличество = ВыборкаТоваров.Количество;
		Если ТЗКМРаспределить.Количество()>0 и ВыборкаТоваров.Марка="" тогда			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", ВыборкаТоваров.Номенклатура);
			Отбор.Вставить("Характеристика", ВыборкаТоваров.Характеристика);

			ТЗКМРаспределить.Свернуть("Номенклатура,Характеристика","Количество");
    		Строки = ТЗКМРаспределить.НайтиСтроки(Отбор);
			Для Каждого Стр Из Строки Цикл
				Если ТекущееКоличество>0 тогда
					ТекущееКоличество = ТекущееКоличество - Стр.Количество;	
        			ТЗКМРаспределить.Удалить(Стр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
		
		
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //Штрихкод товара
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";";// Ячейка
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";";// Серия
		ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(ТекущееКоличество, "ЧГ=0") + ";";//задание
		ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(ВыборкаТоваров.Лимит, "ЧГ=0") + ";";//лимит
		
		ТипПродукции = ПолучитьТипМаркированнойПродукции(ВыборкаТоваров.Номенклатура); 
		ТекстФайлаДокумент = ТекстФайлаДокумент + УбратьСкобкиТеговМарка(ВыборкаТоваров.Марка,ТипПродукции)  + ";"; //Марка
		ТекстФайлаДокумент = ТекстФайлаДокумент + УбратьСкобкиТеговУпаковка(ВыборкаТоваров.Палета) + ";"; //Палета		
		ТекстФайлаДокумент = ТекстФайлаДокумент + УбратьСкобкиТеговУпаковка(ВыборкаТоваров.Короб) + ";" + Символы.ПС; //Короб
		
		лНомерСтроки = лНомерСтроки + 1;
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора(ДокументПриемки)
	
	
	СоответствиеКодаМаркировкиНоменклатуре = Новый Соответствие;

	Выборка = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.Выбрать(Новый Структура("Документ", ДокументПриемки));
	
	Если Выборка.Следующий() Тогда
		
		ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора = Выборка.ДанныеПроверкиИПодбора.Получить();		
		ДеревоМаркированнойПродукции = ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора.ДеревоМаркированнойПродукции;
		
			
			Для Каждого СтрокаДерева из ДеревоМаркированнойПродукции.Строки Цикл
				
				ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(СтрокаДерева,СоответствиеКодаМаркировкиНоменклатуре);
				
			КонецЦикла;	
		
		
	КонецЕсли;
	
	Возврат СоответствиеКодаМаркировкиНоменклатуре;
	
	
КонецФункции

&НаСервере
Процедура ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(СтрокаДерева,СоответствиеКодаМаркировкиНоменклатуре)
	
	
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) и ЗначениеЗаполнено(СтрокаДерева.Штрихкод) тогда
		
		ТипПродукции = ПолучитьТипМаркированнойПродукции(СтрокаДерева.Номенклатура); 
		ЗначениеШтрихкода = УбратьСкобкиТеговМарка(СтрокаДерева.Штрихкод,ТипПродукции);
		
		НайденноеСоответствие = СоответствиеКодаМаркировкиНоменклатуре.Получить(ЗначениеШтрихкода);
		
		Если НайденноеСоответствие = Неопределено Тогда
			ДанныеНоменклатуры = Новый Структура;
			ДанныеНоменклатуры.Вставить("Номенклатура",              СтрокаДерева.Номенклатура);
			ДанныеНоменклатуры.Вставить("Характеристика",            СтрокаДерева.Характеристика);
			
			СоответствиеКодаМаркировкиНоменклатуре.Вставить(ЗначениеШтрихкода, ДанныеНоменклатуры);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() <> 0 Тогда
		
		Для Каждого ВложеннаяСтрокаДерева из СтрокаДерева.Строки Цикл
			
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(ВложеннаяСтрокаДерева,СоответствиеКодаМаркировкиНоменклатуре);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыборкуМаркированныхТоваровПоДокументу(лИсходныйДокумент, лВидДокумента, лИмяТабличнойЧастиПодбор)

	Запрос=Новый Запрос;
				   //ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО ТОВАРАМ И ОСТАТКАМ
	Запрос.Текст = "ВЫБРАТЬ
					|	ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
					|	ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
					|	&УсловиеСерия КАК Серия,
					|	&УсловиеЦена КАК Цена,
					|	СУММА(ВЫБОР
					|			КОГДА ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0) = 0
					|				ТОГДА ТаблицаТоваровВДокументе.КоличествоУпаковок
					|			ИНАЧЕ ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0)
					|		КОНЕЦ) КАК Количество,
					|	МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки
					|ПОМЕСТИТЬ ЗапросСЛимитами
					|ИЗ
					|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТоваровВДокументе
					|ГДЕ
					|	ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаТоваровВДокументе.Номенклатура,
					|	ТаблицаТоваровВДокументе.Характеристика,
					|	&УсловиеСерия,
					|	&УсловиеЦена
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
					|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
					|	СвободныеОстаткиОстатки.ВНаличииОстаток КАК ВНаличииОстаток
					|ПОМЕСТИТЬ СвободныеОстаткиОстатки
					|ИЗ
					|	РегистрНакопления.ТоварыНаСкладах.Остатки(
					|			,
					|			Номенклатура В
					|						(ВЫБРАТЬ
					|							ЗапросСЛимитами.Номенклатура КАК Номенклатура
					|						ИЗ
					|							ЗапросСЛимитами КАК ЗапросСЛимитами)
					|					И &ВсеСклады
					|				ИЛИ Склад В (&Склады)
					|				ИЛИ Помещение В (&Склады)) КАК СвободныеОстаткиОстатки
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ЗапросСЛимитами.Номенклатура КАК Номенклатура,
					|	ЗапросСЛимитами.Характеристика КАК Характеристика,
					|	ЗапросСЛимитами.Серия КАК Серия,
					|	МАКСИМУМ(ЗапросСЛимитами.Цена) КАК Цена,
					|	СУММА(ЗапросСЛимитами.Количество) КАК Количество,
					|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК Лимит,
					|	МИНИМУМ(ЗапросСЛимитами.НомерСтроки) КАК НомерСтроки
					|ПОМЕСТИТЬ ТоварыЗадания
					|ИЗ
					|	ЗапросСЛимитами КАК ЗапросСЛимитами
					|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеОстаткиОстатки КАК СвободныеОстаткиОстатки
					|		ПО ЗапросСЛимитами.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
					|			И ЗапросСЛимитами.Характеристика = СвободныеОстаткиОстатки.Характеристика
					|
					|СГРУППИРОВАТЬ ПО
					|	ЗапросСЛимитами.Номенклатура,
					|	ЗапросСЛимитами.Характеристика,
					|	ЗапросСЛимитами.Серия
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Номенклатура,
					|	Характеристика,
					|	Серия
	               |;
	               |
				   
				   //ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО СПРАВОЧНИКУ ШТРИХКОДЫ УПАКОВОК, ЕСЛИ ОНИ ЗАГРУЖЕНЫ
				   //ТОЛЬКО ПО ГРУППОВЫМ УПАКОВКАМ, БЛОКИ СИГАРЕТ НЕ УЧИТЫВАЕМ, ПЛЮС ПРЕДПОЛОГАЕМ ЧТО МОГУТ БЫТЬ КОРОБА И ПАЛЕТЫ
				   
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				   |	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
				   |	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ЗначениеШтрихкода
				   |ПОМЕСТИТЬ ШтрихкодыУпаковокТоваровКоробаПалеты
				   |ИЗ
				   |	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
				   |ГДЕ
				   |	ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &ИсходныйДокумент
				   |	И НЕ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
				   |	И (ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
				   |		ИЛИ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка))
				   |			И ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
				   |;
				   |
				   
				   //ВЫБЕРЕМ ИЗ ГРУППОВЫХ УПАКОВОК НИЖЕСТОЯЩИЕ, ЕСЛИ ИСПОЛЬЗУЮТСЯ ЕЩЕ И ПАЛЕТЫ
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК ШтрихкодУпаковки,
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода
				   |ПОМЕСТИТЬ ШтрихкодыУпаковокТоваровКороба
				   |ИЗ
				   |	ШтрихкодыУпаковокТоваровКоробаПалеты КАК ШтрихкодыУпаковокТоваровКоробаПалеты
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды
				   |		ПО СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковокТоваровКоробаПалеты.ШтрихкодУпаковки
				   |ГДЕ
				   |	НЕ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
				   |	И (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
				   |		ИЛИ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка))
				   |			И СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
				   |;

				   
				   //ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО СПРАВОЧНИКУ ШТРИХКОДЫ УПАКОВОК, ЕСЛИ ОНИ ЗАГРУЖЕНЫ
				   //ТОЛЬКО ПО ТОВАРАМ, БЕЗ ГРУППОВЫХ УПАКОВОК (БЛОКИ СИГАРЕТ, ТОЖЕ ТОВАРЫ)
				   //ОБЪЕДИНИМ СО СПРАВОЧНИКОМ ШТРИХКОДОВ ИЗ ГРУППОВЫХ УПАКОВОК

	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	               |	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	               |ПОМЕСТИТЬ ШтрихкодыУпаковокТоваров  
	               |ИЗ
	               |	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
	               |ГДЕ
	               |	ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &ИсходныйДокумент
	               |	И НЕ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	               |	И (ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	               |			ИЛИ (ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	               |				И ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
				   
				   //КОРОБА
				   |ОБЪЕДИНИТЬ  
				   |
				   |ВЫБРАТЬ
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК ШтрихкодУпаковки,
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода
				   |ИЗ
				   |	ШтрихкодыУпаковокТоваровКоробаПалеты КАК ШтрихкодыУпаковокТоваровКоробаПалеты
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды
				   |		ПО СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковокТоваровКоробаПалеты.ШтрихкодУпаковки
				   |ГДЕ
				   |	НЕ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
				   |		И (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
				   |			ИЛИ (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
				   |				И СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))

				   //ПАЛЕТЫ
				   |ОБЪЕДИНИТЬ  
				   |
				   |ВЫБРАТЬ
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК ШтрихкодУпаковки,
				   |	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода
				   |ИЗ
				   |	ШтрихкодыУпаковокТоваровКороба КАК ШтрихкодыУпаковокТоваровКороба
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды
				   |		ПО СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковокТоваровКороба.ШтрихкодУпаковки
				   |ГДЕ
				   |	НЕ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
				   |		И (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
				   |			ИЛИ (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
				   |				И СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	               |;
	               |
				   		   
				   
				   //ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО ЗНАЧЕНИЯМ ШТРИХКОДОВ, ГДЕ НЕ ЗАПОЛНЕН СПРАВОЧНИК ШТРИХКОДЫ УПАКОВОК 
				   //ТОЛЬКО ПО ТОВАРАМ, БЕЗ ГРУППОВЫХ УПАКОВОК (БЛОКИ СИГАРЕТ, ТОЖЕ ТОВАРЫ)
				   //ПОПРОБУЕМ ОПРЕДЕЛИТЬ GTIN
				   
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 3, 1) <> ""0""
	               |			ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 3, 14)
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 4, 1) <> ""0""
	               |					ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 4, 13)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 5, 1) <> ""0""
	               |							ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 5, 12)
	               |						ИНАЧЕ ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 9, 8)
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК GTIN
	               |ПОМЕСТИТЬ ЗначенияШтрихкодовТоваров
	               |ИЗ
	               |	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
	               |ГДЕ
	               |	ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &ИсходныйДокумент
	               |	И ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	               |	И ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 1, 2) = ""01""
	               |;
	               |
				   
				   //СФОРМИРУЕМ СОПОСТАВЛЕНИЕ ДАННЫХ С НОМЕНКЛАТУРОЙ
				   //ПО ШТРИХКОДАМ УПАКОВОК ДАННЫЕ БЕРЕМ ИЗ СПРАВОЧНИКА
				   //ПО ЗНАЧЕНИЯМ ШТРИХКОДОВ ДАННЫЕ БЕРЕМ ИЗ РЕГИСТРА
				   //ПЛЮС МОГУТ ОСТАТЬСЯ НЕСОПОСТАВЛЕННЫЕ СТРОКИ (НАПРИМЕР УПРОЩЕНКА)
				   
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Номенклатура КАК Номенклатура,
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Характеристика КАК Характеристика,
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Серия КАК Серия,
				   |	ВЫБОР
				   |		КОГДА ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Количество = 0 
				   |		ТОГДА
				   |			ВЫБОР
				   |				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Упаковка.Числитель,0) = 0
				   |				ТОГДА 1
				   |				ИНАЧЕ ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Упаковка.Числитель
				   |			КОНЕЦ
				   |		ИНАЧЕ ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Количество 
				   |	КОНЕЦ КАК Коэффициент,
	               |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Марка,
	               |	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода, """")) КАК Короб,
				   |	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды2.Ссылка.ЗначениеШтрихкода, """")) КАК Палета
	               |ПОМЕСТИТЬ МаркиЗадания
	               |ИЗ
	               |	ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	               |		ПО ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды2
	               |		ПО ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода, """") = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды2.Штрихкод
				   |СГРУППИРОВАТЬ ПО
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Номенклатура,
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Характеристика,
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Серия,
				   |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Упаковка,
	               |	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Количество, 
	               |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода	
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))),
	               |	МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))),
	               |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
				   |	ВЫБОР 
				   |		КОГДА МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Упаковка.Числитель,1))=0 
				   |		ТОГДА 1
			   	   |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Упаковка.Числитель,1)) 
				   |	КОНЕЦ,
	               |	ЗначенияШтрихкодовТоваров.ЗначениеШтрихкода,
	               |	"""",
				   |	""""
	               |ИЗ
	               |	ЗначенияШтрихкодовТоваров КАК ЗначенияШтрихкодовТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК РегистрСведенийШтрихкодыНоменклатуры
	               |		ПО ЗначенияШтрихкодовТоваров.GTIN = РегистрСведенийШтрихкодыНоменклатуры.Штрихкод
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗначенияШтрихкодовТоваров.ЗначениеШтрихкода
	               |;
	               |
				   
				   //ПОДСЧИТАЕМ КОЛИЧЕСТВО МАРОК КОТОРЫЕ ОПРЕДЕЛЕНЫ (ВОЗМОЖНО ОНИ В ДОКУМЕНТЕ Т0ЛЬКО ЧАСТИЧНО УКАЗАНЫ)
				   
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МаркиЗадания.Номенклатура КАК Номенклатура,
	               |	МаркиЗадания.Характеристика КАК Характеристика,
	               |	МаркиЗадания.Серия КАК Серия,
	               |	СУММА(МаркиЗадания.Коэффициент) КАК Количество
	               |ПОМЕСТИТЬ КоличествоМарокЗадания
	               |ИЗ
	               |	МаркиЗадания КАК МаркиЗадания
	               |ГДЕ
	               |	НЕ МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МаркиЗадания.Номенклатура,
	               |	МаркиЗадания.Характеристика,
	               |	МаркиЗадания.Серия
	               |;
	               |
				   
				   //РАСПРЕДЕЛИМ МАРКИ ПО ЗАДАНИЮ
				   //ТО ЧТО НЕ РАСПРЕДЕЛИЛОСЬ ДОБАВИМ ОТДЕЛЬНО
				   //ПРИ ЭТОМ МОГУТ БЫТЬ КАК ЛИШНИЕ МАРКИ, ТАК И ЛИШНИЕ ТОВАРЫ

	               |////////////////////////////////////////////////////////////////////////////////
				   //1) СОПОСТАВЛЕНО ПОЛНОСТЬЮ
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МаркиЗадания.Номенклатура КАК Номенклатура,
	               |	МаркиЗадания.Характеристика КАК Характеристика,
	               |	МаркиЗадания.Серия КАК Серия,
	               |	МаркиЗадания.Коэффициент КАК Количество,
	               |	МаркиЗадания.Марка КАК Марка,
	               |	МаркиЗадания.Короб КАК Короб,
				   |	МаркиЗадания.Палета КАК Палета,
	               |	ТоварыЗадания.Цена КАК Цена,
	               |	ТоварыЗадания.Лимит КАК Лимит,
	               |	ТоварыЗадания.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ИтоговыеДанные
	               |ИЗ
	               |	МаркиЗадания КАК МаркиЗадания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗадания КАК ТоварыЗадания
	               |		ПО МаркиЗадания.Номенклатура = ТоварыЗадания.Номенклатура
	               |			И МаркиЗадания.Характеристика = ТоварыЗадания.Характеристика
				   |				И  МаркиЗадания.Серия = ТоварыЗадания.Серия
	               |ГДЕ
	               |	НЕ ТоварыЗадания.Номенклатура ЕСТЬ NULL
	               |	И НЕ МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |
				   |ОБЪЕДИНИТЬ
	               |
				   //2) МАРКИ С НЕОПРЕДЕЛЕННОЙ НОМЕНКЛАТУРОЙ (НЕУНИКАЛЬНЫЕ ШТРИХКОДЫ)
				   |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	               |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	               |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	               |	МаркиЗадания.Коэффициент КАК Количество,
	               |	МаркиЗадания.Марка КАК Марка,
	               |	МаркиЗадания.Короб КАК Короб,
				   |	МаркиЗадания.Палета КАК Палета,
	               |	0 КАК Цена,
	               |	0 КАК Лимит,
	               |	77777 КАК НомерСтроки
	               |ИЗ
	               |	МаркиЗадания КАК МаркиЗадания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗадания КАК ТоварыЗадания
	               |		ПО МаркиЗадания.Номенклатура = ТоварыЗадания.Номенклатура
	               |			И МаркиЗадания.Характеристика = ТоварыЗадания.Характеристика
				   |				И  МаркиЗадания.Серия = ТоварыЗадания.Серия
	               |ГДЕ
	               |	ТоварыЗадания.Номенклатура ЕСТЬ NULL
	               |	И НЕ МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
				   |
	               |ОБЪЕДИНИТЬ
	               |
				   //3) МАРКИ С НЕОПРЕДЕЛЕННОЙ НОМЕНКЛАТУРОЙ (УПРОЩЕНКА)
	               |ВЫБРАТЬ
	               |	МаркиЗадания.Номенклатура,
	               |	МаркиЗадания.Характеристика,
	               |	МаркиЗадания.Серия,
	               |	МаркиЗадания.Коэффициент,
	               |	МаркиЗадания.Марка,
	               |	МаркиЗадания.Короб,
				   |	МаркиЗадания.Палета,
	               |	0,
	               |	0,
	               |	99999
	               |ИЗ
	               |	МаркиЗадания КАК МаркиЗадания
	               |ГДЕ
	               |	МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ
	               |				      
				   //4) СТРОКИ ЗАДАНИЯ БЕЗ МАРОК (ВРЕМЕННО ВОЗМОЖНО ЧАСТИЧНОЕ УКАЗАНИЕ МАРОК)
	               |ВЫБРАТЬ
	               |	ТоварыЗадания.Номенклатура,
	               |	ТоварыЗадания.Характеристика,
	               |	ТоварыЗадания.Серия,
	               |	ТоварыЗадания.Количество - ЕСТЬNULL(КоличествоМарокЗадания.Количество, 0),
	               |	"""",
	               |	"""",
				   |	"""",
	               |	ТоварыЗадания.Цена,
	               |	ТоварыЗадания.Лимит,
	               |	ТоварыЗадания.НомерСтроки
	               |ИЗ
	               |	ТоварыЗадания КАК ТоварыЗадания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоМарокЗадания КАК КоличествоМарокЗадания
	               |		ПО ТоварыЗадания.Номенклатура = КоличествоМарокЗадания.Номенклатура
	               |			И ТоварыЗадания.Характеристика = КоличествоМарокЗадания.Характеристика
				   |				И  ТоварыЗадания.Серия = КоличествоМарокЗадания.Серия
	               |ГДЕ
	               |	ТоварыЗадания.Количество - ЕСТЬNULL(КоличествоМарокЗадания.Количество, 0) > 0
	               |;
	               |
				   
				   //ИТОГ
				   
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИтоговыеДанные.Номенклатура КАК Номенклатура,
	               |	ИтоговыеДанные.Характеристика КАК Характеристика,
	               |	ИтоговыеДанные.Серия КАК Серия,
	               |	ИтоговыеДанные.Количество КАК Количество,
	               |	ИтоговыеДанные.Марка КАК Марка,
	               |	ИтоговыеДанные.Короб КАК Короб,
				   |	ИтоговыеДанные.Палета КАК Палета,
	               |	ИтоговыеДанные.Цена КАК Цена,
	               |	ИтоговыеДанные.Лимит КАК Лимит,
	               |	ИтоговыеДанные.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	ИтоговыеДанные КАК ИтоговыеДанные
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИтоговыеДанные.НомерСтроки УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТоварыЗадания
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ШтрихкодыУпаковокТоваровКоробаПалеты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ШтрихкодыУпаковокТоваровКороба
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ШтрихкодыУпаковокТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ЗначенияШтрихкодовТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ МаркиЗадания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КоличествоМарокЗадания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ИтоговыеДанные";
	
				   
				   
		
	
		Запрос.УстановитьПараметр("ИсходныйДокумент", лИсходныйДокумент);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".ПриобретениеТоваровУслуг.","."+лВидДокумента+".");
		Запрос.Текст=СтрЗаменить(Запрос.Текст,".Товары КАК ","."+лИмяТабличнойЧастиПодбор+" КАК ");
		
		//Если у документа есть склад берем остатки по складу документа иначе все склады
		СписокСкладов=Новый Массив;
		Попытка 
			ТекущийСклад = лИсходныйДокумент.Склад;
		    СписокСкладов.Добавить(ТекущийСклад);
		Исключение
		КонецПопытки;
		Запрос.УстановитьПараметр("Склады",СписокСкладов);
		Запрос.УстановитьПараметр("ВсеСклады",СписокСкладов.Количество()=0);
		
		
		Попытка
			ЕстьЦены = Метаданные.Документы[лВидДокумента].ТабличныеЧасти[лИмяТабличнойЧастиПодбор].Реквизиты.Найти("Цена")<>Неопределено;
		Исключение
			ЕстьЦены = Ложь;
		КонецПопытки;

		
		Если ЕстьЦены тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","ТаблицаТоваровВДокументе.Цена");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеЦена","0");
		КонецЕсли;
		
		
		Попытка
			ЕстьСерии = Метаданные.Документы[лВидДокумента].ТабличныеЧасти[лИмяТабличнойЧастиПодбор].Реквизиты.Найти("Серия")<>Неопределено;
		Исключение
			ЕстьСерии = Ложь;
		КонецПопытки;
		
		Если ЕстьСерии тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","ТаблицаТоваровВДокументе.Серия");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСерия","Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		КонецЕсли;

		
		Попытка
			ЕстьКоличествоУпаковок = Метаданные.Документы[лВидДокумента].ТабличныеЧасти[лИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено;
		Исключение
			ЕстьКоличествоУпаковок = Ложь;
		КонецПопытки;

		Если ЕстьКоличествоУпаковок тогда
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ТаблицаТоваровВДокументе.КоличествоУпаковок","ТаблицаТоваровВДокументе.Количество");
		КонецЕсли;
			
	Возврат Запрос.Выполнить().Выбрать();	

КонецФункции

&НаСервереБезКонтекста
Функция ОбщийМодуль(Имя)
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено тогда		
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипМаркированнойПродукции(лНоменклатура)
	
	ТипПродукции = 0;
	
	Попытка
		ПродукцияИСМП = Новый Массив;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС); Исключение КонецПопытки;

		Если лНоменклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция 
			или лНоменклатура.ВидНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция тогда
			ТипПродукции = 1;  // Табак
		ИначеЕсли ПродукцияИСМП.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			или ПродукцияИСМП.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено  тогда
		    ТипПродукции = 2; // Обувь и прочее
		КонецЕсли;		
	Исключение
	КонецПопытки;
	
	Если ТипПродукции = 0 тогда
		Попытка	
			Если лНоменклатура.ТабачнаяПродукция Тогда
				ТипПродукции = 1;
			ИначеЕсли лНоменклатура.ОбувнаяПродукция Тогда
				ТипПродукции = 2;
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		Попытка	
			Если лНоменклатура.ВидНоменклатуры.ТабачнаяПродукция Тогда
				ТипПродукции = 1;
			ИначеЕсли лНоменклатура.ВидНоменклатуры.ОбувнаяПродукция Тогда
				ТипПродукции = 2;
			КонецЕсли;	
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
		
	
	Возврат ТипПродукции;

КонецФункции

#КонецОбласти

#Область РаботаСДополнительнымиШагами 

&НаСервере
Функция СобратьДополнительныеШаги(Код)
	Перем СтрокаДопшагов;
	Код=Число(Код);
	СтрокаДопшагов="";
	СтрокаДопшагов=СтрокаДопшагов+Строка(ДополнительныеШаги[Код].Название)+";";
	
	Если ДополнительныеШаги[Код].ТипДанных = "Текст" Тогда
		ТекущийТип = 1;
	ИначеЕсли  ДополнительныеШаги[Код].ТипДанных = "Число" Тогда
		ТекущийТип = 2;
	ИначеЕсли  ДополнительныеШаги[Код].ТипДанных = "Дата" Тогда
		ТекущийТип = 3;
	Иначе
		ТекущийТип = Строка(ДополнительныеШаги[Код].ТипДанных);
	КонецЕсли;
	
	СтрокаДопшагов=СтрокаДопшагов+ТекущийТип+";";
	СтрокаДопшагов=СтрокаДопшагов+ДополнительныеШаги[Код].ИД+";";
	СтрокаДопшагов=СтрокаДопшагов+ДополнительныеШаги[Код].ИДСправочника+";";
	Возврат СтрокаДопшагов;
КонецФункции

&НаКлиенте
Процедура СохранитьДополнительныеШаги()
	
	ФайлТЗ = Новый ТекстовыйДокумент;
 	ФайлТЗ.УстановитьТекст(ПолучитьДанныеДопШаги());
 	ФайлТЗ.Записать(лКаталогНастроек+"v83_UserBooks.tab");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСвязиШаговШаблонов()

	ФайлТЗ = Новый ТекстовыйДокумент;
 	ФайлТЗ.УстановитьТекст(ПолучитьДанныеСвязиШаговШаблонов());
 	ФайлТЗ.Записать(лКаталогНастроек+"v83_StepLinks.tab");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДопШаги()

 ДанныеТЗ = Новый ХранилищеЗначения(ДополнительныеШаги.Выгрузить());
 Возврат XMLСтрока(ДанныеТЗ);

КонецФункции

&НаСервере
Функция ПолучитьДанныеСвязиШаговШаблонов()

 ДанныеТЗ = Новый ХранилищеЗначения(СвязиШаговШаблонов.Выгрузить());
 Возврат XMLСтрока(ДанныеТЗ);

КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеДопШаги(Данные)
	
 ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
 Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
  ДополнительныеШаги.Загрузить(ДанныеТЗ);
 КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьДанныеСвязиШаговШаблонов(Данные)
	
 ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
 Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
  СвязиШаговШаблонов.Загрузить(ДанныеТЗ);
 КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ОтборДопШаговПоСтрокеШаблона()
	
	ТД=Элементы.ШаблоныДокументов.ТекущиеДанные;
	СформироватьШагиНаФормуПоШаблону(ТД.Код);
	Элементы.ШагиНаФорме.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьШагиНаФормуПоШаблону(ИдШаблона)
	
	ШагиНаФорме.Очистить();
	СвязиШаговШаблонов.Сортировать("Порядок Возр");
	ПараметрыОтбора = Новый Структура; 
	ПараметрыОтбора.Вставить("ИдентификаторШаблона", ИдШаблона);
	Строки = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого стр из Строки Цикл
		Для каждого стрШаг из ДополнительныеШаги Цикл
			Если стрШаг.ИД = стр.ИдентификаторШага тогда
				стрФормы = ШагиНаФорме.Добавить();
				ЗаполнитьЗначенияСвойств(стрФормы, стрШаг);
				
				Если стрШаг.ПроверкаЗаполнения = 1 тогда
					стрФормы.ОбязательноеЗаполнение = Истина;
				КонецЕсли;
				
				Если стрШаг.РеквизитШапки = 1 тогда
					стрФормы.Использование = "Шапка";
				ИначеЕсли стрШаг.РеквизитШапки = 2 тогда
					стрФормы.Использование = "Строка размещение";
				Иначе
					стрФормы.Использование = "Строка подбор";
				КонецЕсли;
				
				стрФормы.ЗаполняемыйРеквизит = стрШаг.ЗаполняемыйРеквизит;

			
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ШагиНаФормеТипДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СЗ = ШагиНаФормеТипДанныхНачалоВыбораНаСервере();
	ДанныеВыбора = СЗ;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШагиНаФормеТипДанныхНачалоВыбораНаСервере()
	
	СЗ = Новый СписокЗначений;
	СЗ.Добавить("Число", "Число");
	СЗ.Добавить("Текст", "Текст");
	СЗ.Добавить("Дата", "Дата");
	СЗ.Добавить("Справочники", "Справочники");
	СЗ.Добавить("Перечисления", "Перечисления");
	Возврат СЗ;
	
КонецФункции


&НаКлиенте
Процедура ШагиНаФормеТипДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредыдущийТипДанных = Элементы.ШагиНаФорме.ТекущиеДанные.ТипДанных;
	ТекущийЭлементТипаДанных = Элемент;
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = "Справочники" ИЛИ ВыбранноеЗначение = "Перечисления" Тогда
		ТипОбъектаКонфигурации = ВыбранноеЗначение + ".";
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопроса", ЭтотОбъект);
		ПоказатьВыборИзСписка(Оп,ПолучитьНазванияОбъектов(ВыбранноеЗначение),Элемент); 
	Иначе
		ЗаполнитьТаблицыПоВыбранномуТипу(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицыПоВыбранномуТипу(ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипДанных", ВыбранноеЗначение);
	Строки = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбора);
	Если Строки.Количество() > 0 Тогда 	// уже есть тип данных в таблице
		СписокНазваний = Новый СписокЗначений;
		Для каждого строчка из Строки Цикл
			СписокНазваний.Добавить(строчка.Название, строчка.Название);
		КонецЦикла;
		СписокНазваний.Добавить("+ Создать", "+ Создать");
		ПодбираемыйТипДанных = ВыбранноеЗначение;
		Оп = Новый ОписаниеОповещения("ДобавитьВыбранныйШагВТЧ", ЭтотОбъект);
		ПоказатьВыборИзСписка(Оп,СписокНазваний,Элементы.ШагиНаФорме.ТекущийЭлемент);
		
		//Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопроса", ЭтотОбъект);
		//ПоказатьВыборИзСписка(Оп,ПолучитьНазванияОбъектов(),Элементы.ШагиНаФорме.ТекущийЭлемент);
	Иначе 
		
		СоздатьНовыйШаг(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ШагиНаФормеИспользованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СЗ = ШагиНаФормеИспользованиеНачалоВыбораНаСервере();
	ДанныеВыбора = СЗ;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ШагиНаФормеИспользованиеНачалоВыбораНаСервере()
	
	СЗ = Новый СписокЗначений;
	СЗ.Добавить("Строка подбор", "Строка подбор");
	СЗ.Добавить("Строка размещение", "Строка размещение");
	СЗ.Добавить("Шапка", "Шапка");
	Возврат СЗ;
	
КонецФункции

&НаКлиенте
Процедура ШагиНаФормеИспользованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ШагиНаФормеЗаполняемыйРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийВидДокумента = Элементы.ШаблоныДокументов.ТекущиеДанные.ВидДокумента;
	ИмяТЧ_Подбор = Элементы.ШаблоныДокументов.ТекущиеДанные.ИмяТабличнойЧастиПодбор;
	ИмяТЧ_Размещение = Элементы.ШаблоныДокументов.ТекущиеДанные.ИмяТабличнойЧастиПриемка;
	ИспользованиеФормы = Элементы.ШагиНаФорме.ТекущиеДанные.Использование;
	ТипДанных = Элементы.ШагиНаФорме.ТекущиеДанные.ТипДанных;
		
	СЗ = ШагиНаФормеЗаполняемыйРеквизитНачалоВыбораНаСервере(ТекущийВидДокумента,ИмяТЧ_Подбор,ИмяТЧ_Размещение,ИспользованиеФормы,ТипДанных);
	ДанныеВыбора = СЗ;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ШагиНаФормеЗаполняемыйРеквизитНачалоВыбораНаСервере(ТекущийВидДокумента,ИмяТЧ_Подбор,ИмяТЧ_Размещение,ИспользованиеФормы,ТипДанных)
	
	СЗ = Новый СписокЗначений;
	
	ИскомыеРеквизиты = Новый Массив();
	Если ИспользованиеФормы = "Шапка" Тогда
		Попытка ИскомыеРеквизиты = Метаданные.Документы[ТекущийВидДокумента].Реквизиты; Исключение КонецПопытки;
	ИначеЕсли ИспользованиеФормы = "Строка подбор" Тогда
		Попытка ИскомыеРеквизиты = Метаданные.Документы[ТекущийВидДокумента].ТабличныеЧасти[ИмяТЧ_Подбор].Реквизиты; Исключение КонецПопытки;
	ИначеЕсли ИспользованиеФормы = "Строка размещение" Тогда
		Попытка ИскомыеРеквизиты = Метаданные.Документы[ТекущийВидДокумента].ТабличныеЧасти[ИмяТЧ_Размещение].Реквизиты; Исключение КонецПопытки;
	КонецЕсли;
	
	лТипДанных = ТипДанных;
	лТипДанных = СтрЗаменить(лТипДанных,"Справочники.","");
	лТипДанных = СтрЗаменить(лТипДанных,"Перечисления.","");

	
	Для каждого реквизитПоиска из ИскомыеРеквизиты Цикл
		Если лТипДанных = "Текст" Тогда
			Если реквизитПоиска.Тип.СодержитТип(Тип("Строка")) Тогда
				СЗ.Добавить(реквизитПоиска.Имя, реквизитПоиска.Синоним);
			КонецЕсли;
		ИначеЕсли лТипДанных = "Число" Тогда
			Если реквизитПоиска.Тип.СодержитТип(Тип("Строка")) или реквизитПоиска.Тип.СодержитТип(Тип("Число")) Тогда
				СЗ.Добавить(реквизитПоиска.Имя, реквизитПоиска.Синоним);
			КонецЕсли;
		ИначеЕсли лТипДанных = "Дата" Тогда
			Если реквизитПоиска.Тип.СодержитТип(Тип("Строка")) или реквизитПоиска.Тип.СодержитТип(Тип("Дата")) Тогда
				СЗ.Добавить(реквизитПоиска.Имя, реквизитПоиска.Синоним);
			КонецЕсли;
		Иначе
			Если НЕ Метаданные.Справочники.Найти(лТипДанных) = Неопределено Тогда
				ТипЭлемента = "СправочникСсылка." + лТипДанных;
			Иначе
				ТипЭлемента = "ПеречислениеСсылка." + лТипДанных;
			КонецЕсли;
			Если реквизитПоиска.Тип.СодержитТип(Тип("Строка")) или реквизитПоиска.Тип.СодержитТип(Тип(ТипЭлемента)) Тогда
				СЗ.Добавить(реквизитПоиска.Имя, реквизитПоиска.Синоним);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СЗ;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьНазванияОбъектов(ТипОбъекта = "Справочники")
	СЗ = Новый СписокЗначений;
	Для каждого стр из Метаданные[ТипОбъекта] Цикл
		СЗ.Добавить(стр.Имя, стр.Имя);
	КонецЦикла;
	Возврат СЗ;
КонецФункции

&НаКлиенте
Функция ВыполнитьПослеЗакрытияВопроса(ВыбранныйЭлемент, ПараметрыОповещения) Экспорт
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		ЗаполнитьТаблицыПоВыбранномуТипу(ТипОбъектаКонфигурации + ВыбранныйЭлемент.Значение);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ДобавитьВыбранныйШагВТЧ(ВыбранныйЭлемент, ПараметрыОповещения) Экспорт
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		НазваниеШага = ВыбранныйЭлемент.Значение;
		Если ВыбранныйЭлемент.Значение = "+ Создать" Тогда
			ИДШага = Новый УникальныйИдентификатор;
			НазваниеШага = Сред(ПодбираемыйТипДанных,(СтрНайти(ПодбираемыйТипДанных, ".")+1));
		КонецЕсли;
		
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТипДанных", ПодбираемыйТипДанных);
		ПараметрыОтбора.Вставить("Название", ВыбранныйЭлемент.Значение);
		Строки = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбора);
		
		Если Строки.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Элементы.ШагиНаФорме.ТекущиеДанные.ТипДанных) Тогда 
				УдалитьШагиИзТаблиц(Элементы.ШагиНаФорме.ТекущиеДанные.ИД, Элементы.ШаблоныДокументов.ТекущиеДанные.Код)
			КонецЕсли;
			
			ИДШага = Строки[0].ИД;
			НазваниеШага = Строки[0].Название;
		КонецЕсли;
		
		//формируем новый ИД, если элемент с таким типом данных уже есть в этом шаблоне
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИД", ИДШага);
		СтрокиВШаблоне = ШагиНаФорме.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиВШаблоне.Количество() > 0 Тогда
			ИДШага = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		//формируем новое название, чтобы не было дублей
		Коэффициент = 0;
		Пока Истина Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Название", НазваниеШага + ?(Коэффициент = 0, "", Коэффициент));
			ВыборкаИмени = ШагиНаФорме.НайтиСтроки(ПараметрыОтбора);
			Если ВыборкаИмени.Количество() = 0 Тогда
				НазваниеШага = НазваниеШага + ?(Коэффициент = 0, "", Коэффициент);
				Прервать;
			КонецЕсли;
			Коэффициент = Коэффициент + 1;
		КонецЦикла;
		
		//заполняем связанные таблицы
		Элементы.ШагиНаФорме.ТекущиеДанные.ТипДанных = ПодбираемыйТипДанных;
		Элементы.ШагиНаФорме.ТекущиеДанные.Название = НазваниеШага;
		Элементы.ШагиНаФорме.ТекущиеДанные.ИД = ИДШага;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИД", ИДШага);
		СтрокиВШагах = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиВШагах.Количество() = 0 Тогда
			ДобавитьШагФормыВТаблицу(ПодбираемыйТипДанных);
		КонецЕсли;				
		ДобавитьШагВТаблицуСвязей(ИДШага, Элементы.ШаблоныДокументов.ТекущиеДанные.Код);
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйШаг(ВыбранноеЗначение)
	Если НЕ ПредыдущийТипДанных = ВыбранноеЗначение Тогда
		Если ЗначениеЗаполнено(Элементы.ШагиНаФорме.ТекущиеДанные.ТипДанных) Тогда 
			УдалитьШагиИзТаблиц(Элементы.ШагиНаФорме.ТекущиеДанные.ИД, Элементы.ШаблоныДокументов.ТекущиеДанные.Код)
		КонецЕсли;
		Элементы.ШагиНаФорме.ТекущиеДанные.ИД = Новый УникальныйИдентификатор;
		Элементы.ШагиНаФорме.ТекущиеДанные.Название = Сред(ВыбранноеЗначение,(СтрНайти(ВыбранноеЗначение, ".")+1));
		ДобавитьШагФормыВТаблицу(ВыбранноеЗначение);
		ДобавитьШагВТаблицуСвязей(Элементы.ШагиНаФорме.ТекущиеДанные.ИД, Элементы.ШаблоныДокументов.ТекущиеДанные.Код);
	КонецЕсли;
	ОтборДопШаговПоСтрокеШаблона();     
	Элементы.ШагиНаФорме.ЗакончитьРедактированиеСтроки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагВТаблицуСвязей(ИдШага, ИдШаблона)
	
	стр = СвязиШаговШаблонов.Добавить();
	стр.ИдентификаторШага = ИдШага;
	стр.ИдентификаторШаблона = ИдШаблона;
	стр.Порядок = ШагиНаФорме.Индекс(Элементы.ШагиНаФорме.ТекущиеДанные) + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагФормыВТаблицу(ВыбранноеЗначение)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипДанных", ВыбранноеЗначение);
	Строки = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбора);
	
	Если Строки.Количество() > 0 Тогда
		ИДСправочника = Строки[0].ИДСправочника;
	Иначе
		ИДСправочника = Новый УникальныйИдентификатор;
	КонецЕсли;

	
	
	стр = ДополнительныеШаги.Добавить();
	ЗаполнитьЗначенияСвойств(стр, Элементы.ШагиНаФорме.ТекущиеДанные);
	стр.ТипДанных = ВыбранноеЗначение;
	стр.ИДСправочника = ИДСправочника;	
	
КонецПроцедуры

&НаКлиенте
Процедура ШагиНаФормеПередУдалением(Элемент, Отказ)
	
	УдалитьШагиИзТаблиц(Элементы.ШагиНаФорме.ТекущиеДанные.ИД, Элементы.ШаблоныДокументов.ТекущиеДанные.Код)
	
КонецПроцедуры

&НаСервере
Процедура УдалитьШагиИзТаблиц(ИдентификаторШага, ИдентификаторШаблона)
	
	ПараметрыОтбораСвязи = Новый Структура;
	ПараметрыОтбораСвязи.Вставить("ИдентификаторШага", ИдентификаторШага); 
	СтрокиСвязей = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбораСвязи);
	
	Если  СтрокиСвязей.Количество() = 1 Тогда
		ПараметрыОтбораСвязи = Новый Структура;
		ПараметрыОтбораСвязи.Вставить("ИД", ИдентификаторШага);
		СтрокиШагов = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбораСвязи);
		Если СтрокиШагов.Количество() >  0 Тогда
			ДополнительныеШаги.Удалить(СтрокиШагов[0]);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыТекущейСвязи = Новый Структура;
	ПараметрыТекущейСвязи.Вставить("ИдентификаторШага", ИдентификаторШага);
	ПараметрыТекущейСвязи.Вставить("ИдентификаторШаблона", ИдентификаторШаблона);
	ТекущаяВзаимосвязь = СвязиШаговШаблонов.НайтиСтроки(ПараметрыТекущейСвязи);
	
	Если ТекущаяВзаимосвязь.Количество() >  0 Тогда
		СвязиШаговШаблонов.Удалить(ТекущаяВзаимосвязь[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереписатьПорядокШагов(ИдентификаторШаблона)
	
	Для каждого стр ИЗ ШагиНаФорме Цикл
		ПараметрыОтбораСвязи = Новый Структура;
		ПараметрыОтбораСвязи.Вставить("ИдентификаторШага", стр.ИД); 
		ПараметрыОтбораСвязи.Вставить("ИдентификаторШаблона", ИдентификаторШаблона);
		СтрокиСвязей = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбораСвязи);
		Если  СтрокиСвязей.Количество() > 0 Тогда
			СтрокиСвязей[0].Порядок = ШагиНаФорме.Индекс(стр) + 1;			
		КонецЕсли;
		
		ПараметрыОтбораСвязи = Новый Структура;
		ПараметрыОтбораСвязи.Вставить("ИД", стр.ИД);
		СтрокиШагов = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбораСвязи);
	
		Если СтрокиШагов.Количество() >  0 Тогда
			СтрокиШагов[0].Название = стр.Название;
			СтрокиШагов[0].ПроверкаЗаполнения  = ?(стр.ОбязательноеЗаполнение=Истина,1,0);
			
			Если стр.Использование = "Шапка" тогда
				СтрокиШагов[0].РеквизитШапки = 1;
			ИначеЕсли стр.Использование = "Строка размещение" тогда 
				СтрокиШагов[0].РеквизитШапки = 2;
			Иначе	
				СтрокиШагов[0].РеквизитШапки = 0;
			КонецЕсли;
			
			СтрокиШагов[0].ЗаполняемыйРеквизит = стр.ЗаполняемыйРеквизит;
		КонецЕсли;

		
	КонецЦикла;
	
	СвязиШаговШаблонов.Сортировать("Порядок Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ШагиНаФормеПослеУдаления(Элемент)
	
	ПереписатьПорядокШагов(Элементы.ШаблоныДокументов.ТекущиеДанные.Код);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагиНаФормеОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПереписатьПорядокШагов(Элементы.ШаблоныДокументов.ТекущиеДанные.Код);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагиНаФормеПриИзменении(Элемент)
	
	ПереписатьПорядокШагов(Элементы.ШаблоныДокументов.ТекущиеДанные.Код);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагиНаФормеНазваниеПриИзменении(Элемент)
	
	ПараметрыОтбораСвязи = Новый Структура;
	ПараметрыОтбораСвязи.Вставить("ИД", Элементы.ШагиНаФорме.ТекущиеДанные.ИД);
	СтрокиШагов = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбораСвязи);
	
	Если СтрокиШагов.Количество() >  0 Тогда
		СтрокиШагов[0].Название = Элементы.ШагиНаФорме.ТекущиеДанные.Название;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СобратьШагиКДокументу()
	
	Если ЗначениеЗаполнено(КодШаблонаДокументаВыгрузки) Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторШаблона", КодШаблонаДокументаВыгрузки);
		Шаги = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбора);
		
		Если Шаги.Количество() > 0 Тогда
			ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
			ЗаписьШагов = Новый ЗаписьJSON();
			ЗаписьШагов.ПроверятьСтруктуру = Ложь;
			ЗаписьШагов.УстановитьСтроку(ПараметрыЗаписи);
			ЗаписьШагов.ЗаписатьНачалоМассива();
			
			Для каждого стр из Шаги Цикл
				ЗаписьШагов.ЗаписатьНачалоОбъекта();
				
				ЗаписьШагов.ЗаписатьИмяСвойства("stepId");
				ЗаписьШагов.ЗаписатьЗначение(стр.ИдентификаторШага);
				ЗаписьШагов.ЗаписатьИмяСвойства("sortNumber");
				ЗаписьШагов.ЗаписатьЗначение(стр.Порядок);
				
				
				ТекущийПроверкаЗаполнения = Ложь;
				ТекущийРеквизитШапки = 0;
				
				ПараметрыОтбораСвязи = Новый Структура;
				ПараметрыОтбораСвязи.Вставить("ИД", стр.ИдентификаторШага);
				СтрокиШагов = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбораСвязи);
				
				Если СтрокиШагов.Количество() >  0 Тогда		
					ТекущийПроверкаЗаполнения = СтрокиШагов[0].ПроверкаЗаполнения;
					ТекущийРеквизитШапки = СтрокиШагов[0].РеквизитШапки;
				КонецЕсли;

				ЗаписьШагов.ЗаписатьИмяСвойства("isRequired");
				ЗаписьШагов.ЗаписатьЗначение(ТекущийПроверкаЗаполнения);
				ЗаписьШагов.ЗаписатьИмяСвойства("stepType");
				ЗаписьШагов.ЗаписатьЗначение(ТекущийРеквизитШапки);

				ЗаписьШагов.ЗаписатьКонецОбъекта();	
			КонецЦикла;
			
			ЗаписьШагов.ЗаписатьКонецМассива();
			//ЗаписатьJSON(ЗаписьШагов, Строка);
			СтрJSON = ЗаписьШагов.Закрыть();
			Возврат СтрJSON;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";	
КонецФункции

&НаСервере
Функция ВернутьТаблицуСУникальнымиИД(ИДШаблона = 0)
	ТаблицаДляПереносаШагов.Очистить();
	
	Если ИДШаблона > 0 Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторШаблона", ИДШаблона);
		СтрокиШаблона = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбора);
		ТаблицаПоиска = ДополнительныеШаги.Выгрузить();
		ТаблицаПоиска.Очистить();
		Для каждого стрШаблона из СтрокиШаблона Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИД", стрШаблона.ИдентификаторШага);
			СтрокиПоиска = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиПоиска.Количество() > 0 Тогда
				стр = ТаблицаПоиска.Добавить();
				ЗаполнитьЗначенияСвойств(стр, СтрокиПоиска[0]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаПоиска = ДополнительныеШаги;
	КонецЕсли;
	
	
	Для каждого строкаШагов из ТаблицаПоиска Цикл
		Если ЗначениеЗаполнено(строкаШагов.ИДСправочника) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИДСправочника", строкаШагов.ИДСправочника);
			Строки = ТаблицаДляПереносаШагов.НайтиСтроки(ПараметрыОтбора);
			Если Строки.Количество()= 0 Тогда
				новаяСтрокаШагов = ТаблицаДляПереносаШагов.Добавить();
				ЗаполнитьЗначенияСвойств(новаяСтрокаШагов, строкаШагов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции


&НаКлиенте
Процедура ВыгрузитьДопШаги(Команда)
	ПроверитьКаталоги("ВыгрузитьДопШаги"); 	
КонецПроцедуры

&НаСервере
Функция ВернутьЭлементыСправочника(тхт, ТипДанных, ИД, ШагПользПроц)
	код = 1;
	Если Лев(ТипДанных,(СтрНайти(ТипДанных, ".")-1)) = "Справочники" Тогда
		НазваниеСпр = Сред(ТипДанных,(СтрНайти(ТипДанных, ".")+1));
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Спр.Ссылка КАК Ссылка,
		|	Спр.Наименование КАК Наименование
		|ИЗ
		|	Справочник."+НазваниеСпр+" КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИндикаторДопшаги=ИндикаторДопшаги+ШагПользПроц;
		СтрокаДопшагов="";
		СтрокаДопшагов=СтрокаДопшагов+Код+";";
		СтрокаДопшагов=СтрокаДопшагов+"+;";
		СтрокаДопшагов=СтрокаДопшагов+ИД+";";
		СтрокаДопшагов=СтрокаДопшагов+Выборка.Ссылка.УникальныйИдентификатор()+";";
		СтрокаДопшагов=СтрокаДопшагов+Выборка.Наименование+";";
		тхт.ДобавитьСтроку(СтрокаДопшагов);
		код = код + 1;
		КонецЦикла;
	ИначеЕсли Лев(ТипДанных,(СтрНайти(ТипДанных, ".")-1)) = "Перечисления" Тогда
		НазваниеПеречисл = Сред(ТипДанных,(СтрНайти(ТипДанных, ".")+1));
		Для каждого ЭлементПеречисления из Перечисления[НазваниеПеречисл] Цикл
			ИндикаторДопшаги=ИндикаторДопшаги+ШагПользПроц;
		СтрокаДопшагов="";
		СтрокаДопшагов=СтрокаДопшагов+Код+";";
		СтрокаДопшагов=СтрокаДопшагов+"+;";
		СтрокаДопшагов=СтрокаДопшагов+ИД+";";
		СтрокаДопшагов=СтрокаДопшагов+Строка("" + НазваниеПеречисл +ЭлементПеречисления)+";";
		СтрокаДопшагов=СтрокаДопшагов+Строка(ЭлементПеречисления)+";";
		тхт.ДобавитьСтроку(СтрокаДопшагов);
		код = код + 1;
		КонецЦикла;
	КонецЕсли;	  
КонецФункции

&НаСервере
Функция ВернутьКоличествоЭлементовСпр(ТипДанных)
	
	Если Лев(ТипДанных,(СтрНайти(ТипДанных, ".")-1)) = "Справочники" Тогда
		НазваниеСпр = Сред(ТипДанных,(СтрНайти(ТипДанных, ".")+1));	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Спр.Ссылка) КАК Количество
		|ИЗ
		|	Справочник."+НазваниеСпр+" КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Количество;
		КонецЕсли;
	ИначеЕсли Лев(ТипДанных,(СтрНайти(ТипДанных, ".")-1)) = "Перечисления" Тогда
		НазваниеПеречисл = Сред(ТипДанных,(СтрНайти(ТипДанных, ".")+1));
		Возврат Перечисления[НазваниеПеречисл].Количество();
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции


#КонецОбласти

&НаСервере
Функция ВыгрузитьКМНаСервере()
	МассивТоваров = ТаблицаТоваровКМ.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	// Выборка КМ	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПулКодовМаркировкиСУЗ.Номенклатура КАК Номенклатура,
				|	ПулКодовМаркировкиСУЗ.Характеристика КАК Характеристика,
				|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
				|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки
				|ИЗ
				|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
				|ГДЕ
				|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|	И ПулКодовМаркировкиСУЗ.Номенклатура В(&МассивТоваров)";
	
	Запрос.УстановитьПараметр("МаркированныйТовар", Перечисления.ТипыУпаковок.МаркированныйТовар);
	Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки = 1;
	ТекстФайлаКМ = "" + ?(ОчиститьКМПечати, "-", "+") + Символы.ПС; // РежимЗагрузкиФайла;
	
	Для каждого СтрокаТЧ Из ТаблицаТоваровКМ Цикл
		КоличествоНоменклатуры = СтрокаТЧ.Количество;	
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		МассивСтрок = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ЭлементМассива Из МассивСтрок Цикл	
			Если КоличествоНоменклатуры = 0 Тогда 
				Прервать;
			КонецЕсли;
			ИзвлеченныйКодМаркировки = Base64ВШтрихкод(ЭлементМассива.ПолныйКодМаркировки);
			КодМаркировкиДляПечати = СтрЗаменить(ИзвлеченныйКодМаркировки, Символ(29), "");
			ТекстФайлаКМ = ТекстФайлаКМ + Строка(НомерСтроки) + ";" + "+;"; // НомерСтроки; Операция;
			ТекстФайлаКМ = ТекстФайлаКМ + "8U-" + ЭлементМассива.Номенклатура.УникальныйИдентификатор() + ЭлементМассива.Характеристика.УникальныйИдентификатор() + ";"; // ИдентификаторТовара;		
			ТекстФайлаКМ = ТекстФайлаКМ + КодМаркировкиДляПечати + ";" + Символы.ПС; // КМ;
			УстановитьДатуПечатиДляКМ(ЭлементМассива.КодМаркировки);
			НомерСтроки = Число(НомерСтроки) + 1;
			КоличествоНоменклатуры = КоличествоНоменклатуры - 1;
		КонецЦикла;
		
	КонецЦикла;
	// Формат выгрузки:
	// <КоличествоСтрокВФайле>
	// <РежимЗагрузкиФайла>
	// <НомерСтроки>;<Операция>;<ИдентификаторТовара>;<КМ>
	Возврат ТекстФайлаКМ; 
КонецФункции

Процедура УстановитьДатуПечатиДляКМ(СвободныйКодМаркировки) Экспорт
		
	НаборЗаписей = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.КодМаркировки.Значение = СвободныйКодМаркировки;
	НаборЗаписей.Отбор.КодМаркировки.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись из НаборЗаписей Цикл
		
		Запись.ДатаПечатиУниверсальная = ТекущаяДата();
	
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры


Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции


&НаСервере
Процедура ПроставитьДатуПечатиКМ(КМ)
	
	Об = КМ.ПолучитьОбъект();
	Об.ДатаУпаковки = ТекущаяДата();
	Об.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКМ(Команда)
	ПроверитьКаталоги("ВыгрузитьКМ");
КонецПроцедуры

&НаСервере
Функция ПроверитьВводДанныхТабличнойЧасти(ТабличнаяЧасть)
	Ответ = Истина;
	ТЧ = ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Количество");
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Количество", 0);
	ТабЗнач = МассивВТаблицуЗначений(ТЧ); 
	СтрокиПоиска = ТабЗнач.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПоиска.Количество() > 0 Тогда
		Ответ = Ложь;
	Иначе
		Ответ = Истина;		
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция МассивВТаблицуЗначений(Массив)
	ТЗ = новый ТаблицаЗначений;
	Тз.Колонки.Добавить("Количество");
	Для Каждого ЭлементМассива из Массив Цикл
		стр = тз.добавить();
		стр.Количество = ЭлементМассива;
	КонецЦикла; 
	Возврат ТЗ;
КонецФункции	
&НаСервере
Процедура ВставитьКоличествоПечатиВТЧ()
	
	Для Каждого стр Из ТаблицаТоваровКМ Цикл
		Стр.КоличествоНаПечати = Стр.Количество;
		Стр.Количество = 0;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура СформироватьФайлКМ(ТекстФайла)
	
	тхт_км = Новый ТекстовыйДокумент;
	тхт_км.УстановитьТекст(ТекстФайла);
	тхт_км.ВставитьСтроку(0,""+Формат(тхт_км.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт_км, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_PrintMarks.dm"+"temp");	
	Иначе	
		тхт_км.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_PrintMarks.dm",КодировкаТекста.UTF8);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьУпаковкиКМ(Команда)
	ПроверитьКаталоги("ВыгрузитьУпаковкиКМ");	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПорциюМарок(Начало, Конец, АдресДанных)
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла="";
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n = Счетчик + 1;
		СтрокаМарки = "" + n + ";";	
		
		Попытка 
			СтрокаМарки = СтрокаМарки + ?(Данные[Счетчик].ПометкаУдаления,"-","+") + ";";
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТипПродукции = ПолучитьТипМаркированнойПродукции(Данные[Счетчик].Номенклатура); 
		ЧистаяМарка = УбратьСкобкиТеговМарка(Строка(Данные[Счетчик].Марка),ТипПродукции);		
		СтрокаМарки = СтрокаМарки + ЧистаяМарка + ";";//2 - марка
		
		СтрокаМарки = СтрокаМарки + "8U-" + ЧистаяСтрока(Данные[Счетчик].Номенклатура.УникальныйИдентификатор()) + ЧистаяСтрока(Данные[Счетчик].Характеристика.УникальныйИдентификатор()) + ";";//3 - ID номенклатуры марки 	
		СтрокаМарки = СтрокаМарки + ";"; //4 - SN

		СтрокаМарки = СтрокаМарки + УбратьСкобкиТеговУпаковка(Строка(Данные[Счетчик].Палета)) + ";";//5 - палета 
		СтрокаМарки = СтрокаМарки + УбратьСкобкиТеговУпаковка(Строка(Данные[Счетчик].Короб)) + ";";//6 - короб 

		СтрокаМарки = СтрокаМарки + Строка(Данные[Счетчик].Коэффициент) + ";";//7 - коэффициент 
		
		ТекстФайла = ТекстФайла + СтрокаМарки + Символы.ПС;

	КонецЦикла;
	                                                       
	Возврат ТекстФайла;

КонецФункции

&НаСервереБезКонтекста
Функция УбратьСкобкиТеговМарка(Строка,ТипПродукции)
	
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	//Обувь:
	//01+GTIN+21+SN = 31
	//Лекарства:
	//01+GTIN+21+SN = 31
	//Фотоаппараты:
	//01+GTIN+21+SN = 38	
	//Молочка:
	//01+GTIN+21+SN = 24

	Если Лев(Строка,1) = "(" Тогда 
		
		НоваяСтрока = Лев(Строка, 22);
		НоваяСтрока = СтрЗаменить(НоваяСтрока, "(", "");
		НоваяСтрока = СтрЗаменить(НоваяСтрока, ")", "");
		
		Если ТипПродукции = 1 Тогда //Блоки сигарет
			НоваяСтрока2 = Сред(Строка, 23,7);
		ИначеЕсли ТипПродукции = 4 Тогда //Фотоаппараты
			НоваяСтрока2 = Сред(Строка, 23,20);
		ИначеЕсли ТипПродукции = 5 Тогда //Молочка
			НоваяСтрока2 = Сред(Строка, 23,6);	
		Иначе
			НоваяСтрока2 = Сред(Строка, 23,13);
		КонецЕсли;
		
		НоваяСтрока2 = СтрЗаменить(НоваяСтрока2, ";", "[59]");
		Итог = НоваяСтрока + НоваяСтрока2;		
	Иначе   
		
		Если ТипПродукции = 1 Тогда //Пачки сигарет
			НоваяСтрока = Сред(Строка,1,21);
		Иначе
			НоваяСтрока = Строка;
		КонецЕсли;
		
		НоваяСтрока = СтрЗаменить(НоваяСтрока, ";", "[59]");
		Итог = НоваяСтрока;		
	КонецЕсли;
	
	Возврат Итог;
	
КонецФункции

&НаСервереБезКонтекста
Функция УбратьСкобкиТеговУпаковка(Строка)
	
	//Если Лев(Строка,4) = "(00)" тогда
	//	итог = "00" + Сред(Строка,5);
	//ИначеЕсли Лев(Строка,4) = "(01)" тогда
	//	НоваяСтрока = Лев(Строка, 22);
	//	НоваяСтрока = СтрЗаменить(НоваяСтрока, "(", "");
	//	НоваяСтрока = СтрЗаменить(НоваяСтрока, ")", "");
	//	
	//	Если СтрДлина(Строка) = 51 тогда //короб 45 без скобок
	//		НоваяСтрока2 = Сред(Строка, 23,12);
	//	ИначеЕсли СтрДлина(Строка) = 61 тогда // короб 55 без скобок
	//		НоваяСтрока2 = Сред(Строка, 23,16);
	//	Иначе	
	//		НоваяСтрока2 = Сред(Строка, 23);
	//	КонецЕсли;
	//	
	//	НоваяСтрока2 = СтрЗаменить(НоваяСтрока2, ";", "[59]");	
	//	итог = НоваяСтрока + НоваяСтрока2;	
	//Иначе
	//	итог = Строка;
	//КонецЕсли;		

	НоваяСтрока = СтрЗаменить(Строка, ";", "[59]");
	НоваяСтрока = СтрЗаменить(НоваяСтрока, "(", "");
	НоваяСтрока = СтрЗаменить(НоваяСтрока, ")", "");
	итог = НоваяСтрока;
	
	
	Возврат итог;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуМаркировки()

	Запрос = Новый Запрос ("ВЫБРАТЬ
	                       |	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	                       |	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
						   |	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
						   |	ВЫБОР
						   |		КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 
						   |		ТОГДА
						   |			ВЫБОР
						   |				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Числитель,0) = 0
						   |				ТОГДА 1
						   |				ИНАЧЕ ШтрихкодыУпаковокТоваров.Упаковка.Числитель
						   |			КОНЕЦ
						   |		ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество 
						   |	КОНЕЦ КАК Коэффициент,
						   |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
						   |	ШтрихкодыУпаковокТоваров.Номенклатура.ПометкаУдаления КАК ПометкаУдаления
						   |ПОМЕСТИТЬ КодыМаркировки
	                       |ИЗ
	                       |	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
						   |ГДЕ
						   |	ШтрихкодыУпаковокТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
						   |	И ((ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
						   |		И ШтрихкодыУпаковокТоваров.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.DataMatrix))
						   |			ИЛИ (ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
						   |				И ШтрихкодыУпаковокТоваров.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	                       |;
						   |
						   |ВЫБРАТЬ
	                       |	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	                       |	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
						   |	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
						   |	ВЫБОР
						   |		КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 
						   |		ТОГДА
						   |			ВЫБОР
						   |				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Числитель,0) = 0
						   |				ТОГДА 1
						   |				ИНАЧЕ ШтрихкодыУпаковокТоваров.Упаковка.Числитель
						   |			КОНЕЦ
						   |		ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество 
						   |	КОНЕЦ КАК Коэффициент,
						   |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
						   |	ШтрихкодыУпаковокТоваров.Номенклатура.ПометкаУдаления КАК ПометкаУдаления
						   |ПОМЕСТИТЬ ПачкиСигарет
	                       |ИЗ
	                       |	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
						   |ГДЕ
						   |	ШтрихкодыУпаковокТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
						   |	И ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
						   |	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.DataMatrix)
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	КодыМаркировки.Номенклатура КАК Номенклатура,
						   |	КодыМаркировки.Характеристика КАК Характеристика,
						   |	КодыМаркировки.Коэффициент КАК Коэффициент,
	                       |	КодыМаркировки.ПометкаУдаления КАК ПометкаУдаления,
	                       |	КодыМаркировки.ЗначениеШтрихкода КАК Марка,
	                       |	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода, """") КАК Короб,
	                       |	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка.ЗначениеШтрихкода, """") КАК Палета
	                       |ИЗ
	                       |	КодыМаркировки КАК КодыМаркировки
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
	                       |		ПО (ДанныеУпаковкиУровень1.Штрихкод = КодыМаркировки.Ссылка)
	                       |			И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	                       |				ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
	                       |		ПО (ДанныеУпаковкиУровень2.Штрихкод = ДанныеУпаковкиУровень1.Ссылка)
	                       |			И (ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
						   |				ИЛИ ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
						   |
						   //пачки сигарет, которые не вошли в блоки
						   |ОБЪЕДИНИТЬ
						   |
						   |ВЫБРАТЬ
	                       |	ПачкиСигарет.Номенклатура КАК Номенклатура,
						   |	ПачкиСигарет.Характеристика КАК Характеристика,
						   |	ПачкиСигарет.Коэффициент КАК Коэффициент,
	                       |	ПачкиСигарет.ПометкаУдаления КАК ПометкаУдаления,
	                       |	ПачкиСигарет.ЗначениеШтрихкода КАК Марка,
	                       |	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода, """") КАК Короб,
	                       |	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка.ЗначениеШтрихкода, """") КАК Палета
	                       |ИЗ
	                       |	ПачкиСигарет КАК ПачкиСигарет
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
	                       |		ПО (ДанныеУпаковкиУровень1.Штрихкод = ПачкиСигарет.Ссылка)
	                       |			И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	                       |				ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
	                       |		ПО (ДанныеУпаковкиУровень2.Штрихкод = ДанныеУпаковкиУровень1.Ссылка)
	                       |			И (ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
						   |				ИЛИ ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
						   |ГДЕ
						   |	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ТипШтрихкода,"""") <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
						   |;
						   |////////////////////////////////////////////////////////////////////////////////
						   |УНИЧТОЖИТЬ КодыМаркировки
						   |;
						   |////////////////////////////////////////////////////////////////////////////////
						   |УНИЧТОЖИТЬ ПачкиСигарет");


    Данные      = Запрос.Выполнить().Выгрузить();
    АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество=Данные.Количество();

	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес", АдресДанных);

    Возврат Запись;
	
КонецФункции


&НаКлиенте
Процедура ТаблицаТоваровКМКоличествоПриИзменении(Элемент)
	
	// ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Количество
	// ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Номенклатура
	РезультатПроверки = ПроверитьКоличествоДоступныхМарок(ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Номенклатура, ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Количество);
	
	Если РезультатПроверки = Ложь Тогда
		Сообщить("По данной номенклатуре нет указанного количества марок для печати! ");
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Количество = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКоличествоДоступныхМарок(Номенклатура, Количество)
	Ответ = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ПулКодовМаркировкиСУЗ.Номенклатура = &номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Ответ = Ложь;
	КонецЕсли;
	
	Если РезультатЗапроса.Количество() < Количество Тогда
		Ответ = Ложь;	
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

&НаКлиенте
Процедура ТаблицаТоваровКМНоменклатураПриИзменении(Элемент)
	ДоступноеКоличество = ЗаполнитьДоступноеКоличествоПечатиКМДляНоменклатуры(ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Номенклатура);
	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Количество = ДоступноеКоличество;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДоступноеКоличествоПечатиКМДляНоменклатуры(Номенклатура)
	ДоступноеКоличество = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПулКодовМаркировкиСУЗ.Номенклатура КАК Номенклатура
				|ИЗ
				|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
				|ГДЕ
				|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|	И ПулКодовМаркировкиСУЗ.Номенклатура = &номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДоступноеКоличество = РезультатЗапроса.Количество();
	
	Возврат ДоступноеКоличество;	
КонецФункции

&НаКлиенте
Процедура ОчиститьСписокМарок(Команда)
	ТаблицаТоваровКМ.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЕИ(Команда)
	ПроверитьКаталоги("ВыгрузитьЕИ");	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуЕИ()
	
    Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
                          |	УпаковкиЕдиницыИзмеренияИзменения.Ссылка КАК Ссылка,
                          |	ВЫРАЗИТЬ(УпаковкиЕдиницыИзмеренияИзменения.Наименование КАК СТРОКА(10)) КАК Наименование,
                          |	ВЫБОР
                          |		КОГДА (ВЫРАЗИТЬ(УпаковкиЕдиницыИзмеренияИзменения.Наименование КАК СТРОКА(2))) = ""шт""
                          |			ТОГДА 1
                          |		КОГДА (ВЫРАЗИТЬ(УпаковкиЕдиницыИзмеренияИзменения.Наименование КАК СТРОКА(2))) = ""кг""
                          |			ТОГДА 2
                          |		ИНАЧЕ 3
                          |	КОНЕЦ КАК Приоритет,
                          |	УпаковкиЕдиницыИзмеренияИзменения.ПометкаУдаления КАК ПометкаУдаления
                          |ПОМЕСТИТЬ тЕдиницы
                          |ИЗ
                          |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмеренияИзменения
                          |ГДЕ
                          |	УпаковкиЕдиницыИзмеренияИзменения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	тЕдиницы.Ссылка КАК Ссылка,
                          |	тЕдиницы.Наименование КАК Наименование,
                          |	тЕдиницы.Приоритет КАК Приоритет,
                          |	тЕдиницы.ПометкаУдаления КАК ПометкаУдаления
                          |ИЗ
                          |	тЕдиницы КАК тЕдиницы
                          |
                          |СГРУППИРОВАТЬ ПО
                          |	тЕдиницы.Ссылка,
                          |	тЕдиницы.Наименование,
                          |	тЕдиницы.Приоритет,
                          |	тЕдиницы.ПометкаУдаления
                          |
                          |УПОРЯДОЧИТЬ ПО
                          |	тЕдиницы.Приоритет");

    Данные      = Запрос.Выполнить().Выгрузить();
    АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество  = Данные.Количество();

	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес", АдресДанных);

    Возврат Запись;	
	
КонецФункции


&НаСервере
Функция ВыгрузитьПорциюЕИ(начало,конец,АдресДанных)
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла = "";
	n = 0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n = Счетчик + 1;
		СтрокаЕИ = "" + n + ";";
		СтрокаЕИ = СтрокаЕИ + ?(Данные[Счетчик].ПометкаУдаления, "-", "+") + ";";
		СтрокаЕИ = СтрокаЕИ + ЧистаяСтрока(Строка(Данные[Счетчик].Ссылка.УникальныйИдентификатор())) + ";";//ID ЕИ 
		СтрокаЕИ = СтрокаЕИ + ЧистаяСтрока(Данные[Счетчик].Наименование) + ";";//Наименование ЕИ
		ТекстФайла = ТекстФайла + СтрокаЕИ + Символы.ПС;
	КонецЦикла;
	
	Возврат ТекстФайла;

КонецФункции

&НаКлиенте
Процедура ВыполнитьПостОбработку(ВидПостОбработки)
	
	Если ВидПостОбработки = "ВыгрузитьЯчейки" Тогда
		
		ВыгрузитьЯчейкиЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьШаблоны" Тогда
		
		ВыгрузитьШаблоныЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьТовары" Тогда
		
		ВыгрузитьТоварыЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьДокумент" Тогда
		
		ВыгрузитьДокументЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьПользователей" Тогда
		
		ВыгрузитьПользователейЕслиКаталогиДоступны();	
		
	ИначеЕсли ВидПостОбработки = "СохранитьШаблоны" Тогда
		
		СохранитьШаблоныЕслиКаталогиДоступны();	
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьЕИ" Тогда
		
		ВыгрузитьЕИЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьКлиентов" Тогда
		
		ВыгрузитьКлиентовЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьСклады" Тогда
		
		ВыгрузитьСкладыЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьКМ" Тогда
		
		ВыгрузитьКМЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьУпаковкиКМ" Тогда
		
		ВыгрузитьУпаковкиКМЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьТоварыЕГАИС" Тогда
		
		ВыгрузитьТоварыЕГАИСЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьМаркиЕГАИС" Тогда
		
		ВыгрузитьМаркиЕГАИСЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьДопШаги" Тогда
		
		ВыгрузитьДопШагиЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьТСД" Тогда
		
		ВыгрузитьТСДЕслиКаталогиДоступны();
		
	КонецЕсли;
		                                          
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПользователейЕслиКаталогиДоступны()
	
	ИндикаторПользователи=0;
	Если не Пользователи.Количество()=0 тогда
		ВсегоПользПроц=Пользователи.Количество();//-100%
		ШагПользПроц=100/Пользователи.Количество();
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет пользователей для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	тхт=Новый ТекстовыйДокумент; //выгрузка пользователей в файл обмена
	тхт.ДобавитьСтроку(?(ОчиститьПользователей,"-","+"));
	n=0;
	Для каждого стр из Пользователи Цикл
		n=n+1;
		ИндикаторПользователи=ИндикаторПользователи+ШагПользПроц;
		СтрокаПользователя=Формат(n,"ЧГ=0")+";";
		СтрокаПользователя=СтрокаПользователя+"+;";   
		СтрокаПользователя=СтрокаПользователя+ЧистаяСтрока(стр.Пользователь)+";";
		СтрокаПользователя=СтрокаПользователя+ЧистаяСтрока(стр.Login)+";";
		СтрокаПользователя=СтрокаПользователя+ЧистаяСтрока(стр.Пароль)+";";
		СтрокаПользователя=СтрокаПользователя+?(СокрЛП(стр.Админ)="да",1,0)+";";
		СтрокаПользователя=СтрокаПользователя+?(СокрЛП(стр.РедактированиеТоваров)="да",1,0)+"";
		тхт.ДобавитьСтроку(СтрокаПользователя);  
	КонецЦикла;
	тхт.ВставитьСтроку(0,""+Формат(тхт.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Users.dm"+"temp");	
	Иначе
		тхт.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Users_.dm",КодировкаТекста.UTF8);
	КонецЕсли;	
	
	ИндикаторПользователи=100;

	
 ФайлТЗ = Новый ТекстовыйДокумент;
 ФайлТЗ.УстановитьТекст(ПолучитьДанныеПользователи());
 ФайлТЗ.Записать(лКаталогНастроек+"v83_users.tab");	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблоныЕслиКаталогиДоступны()
	
	ФайлТЗ = Новый ТекстовыйДокумент;
	ФайлТЗ.УстановитьТекст(ПолучитьДанныеШаблоны());
	ФайлТЗ.Записать(лКаталогНастроек + "v83_TempLates.tab");
	
	// Сохранение файла автозагрузки
	ФайлАЗ = Новый ТекстовыйДокумент;
	ФайлАЗ.УстановитьТекст(ПолучитьДанныеАвтозагрузкиШаблонов());
	ФайлАЗ.Записать(лКаталогНастроек + "v83_Autozagruzka.tab");

	
	СохранитьДополнительныеШаги();
	СохранитьСвязиШаговШаблонов();
	
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьДокументЕслиКаталогиДоступны()
	Если ДокументВыгрузки=Неопределено тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не выбран документ для выгрузки!";
		Сообщение.Сообщить();
		возврат;
	КонецЕсли;	
	Если ДокументВыгрузки.Пустая() тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не выбран документ для выгрузки!";
		Сообщение.Сообщить();
		возврат;
	КонецЕсли;	
	
			
	СтрокиШаблона=ШаблоныДокументов.НайтиСтроки(Новый Структура("Код,ВидДокумента,ТипДокумента",КодШаблонаДокументаВыгрузки,ВидДокументаВыгрузки,ШаблонДокументаВыгрузки));
	Если СтрокиШаблона.Количество()=0 тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не найден шаблон с кодом "+КодШаблонаДокументаВыгрузки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕслИ;	

	ИспользоватьЕГАИС = ЛОЖЬ;
	ВерсияЕГАИС = 0;
	Для Каждого СтрокаШаблона ИЗ СтрокиШаблона Цикл		
		Если СтрокаШаблона.ИспользоватьЕГАИС Тогда
			ИспользоватьЕГАИС = Истина;
		КонецЕсли;
		ВерсияЕГАИС= СтрокаШаблона.ВерсияЕГАИС;
	КонецЦикла;

	
	Если ВыгружатьТоварыСДокументом тогда
		Если Не ИспользоватьЕГАИС Тогда
			АдресДанныхТовары=ЗаполнитьТаблицуТоварыИзДокумента(ДокументВыгрузки);	
		Иначе
			АдресДанныхТовары=ЗаполнитьТаблицуТоварыИзДокументаЕГАИС(ДокументВыгрузки);
		КонецЕсли;

		Если Товары.Количество()=0 тогда
			ОчиститьСообщения();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Нет номенклатуры для выгрузки!";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;	 
		
		тхт_тв = Новый ТекстовыйДокумент;
		//ТекстФайлаТовары = ""+?(ОчиститьТовары,"-","+")+Символы.ПС;
		ТекстФайлаТовары = "+"+Символы.ПС;
		ТекстФайлаТовары=ТекстФайлаТовары+""+Атрибут1+";"+Атрибут2+";"+Атрибут3+";"+Атрибут4+";"+Атрибут5+";"+Атрибут6+";"+Атрибут7+";"+Атрибут8+";"+Атрибут9+";"+Атрибут10+";"+Символы.ПС;
		ТекстФайлаТовары=ТекстФайлаТовары+ВыгрузитьПорциюТоваров(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,1,Товары.Количество(),АдресДанныхТовары,АртикулВставитьВНазвание);
		
		тхт_тв.УстановитьТекст(ТекстФайлаТовары);
		тхт_тв.ВставитьСтроку(0,""+Формат(тхт_тв.КоличествоСтрок(),"ЧГ=0"));

		Если ИспользоватьFTP тогда
			ОтправитьФайлНаFTP(тхт_тв, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Arts.dm"+"temp");	
		Иначе			
			тхт_тв.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Arts.dm",КодировкаТекста.UTF8);
		КонецЕсли;


		тхт_шк = Новый ТекстовыйДокумент;

		ТекстФайлаШтрихкоды = "+"+Символы.ПС;
		АдресДанныхШтрихкоды=ЗаполнитьТаблицуШтрихкодыИзДокумента(ДокументВыгрузки);
		ТекстФайлаШтрихкоды=ТекстФайлаШтрихкоды+ВыгрузитьПорциюШтрихкодов(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,1,Штрихкоды.Количество(),АдресДанныхШтрихкоды);
		тхт_шк.УстановитьТекст(ТекстФайлаШтрихкоды);
		тхт_шк.ВставитьСтроку(0,""+Формат(тхт_шк.КоличествоСтрок(),"ЧГ=0"));

		Если ИспользоватьFTP тогда
			ОтправитьФайлНаFTP(тхт_шк, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_BarCodes.dm"+"temp");	
		Иначе	
			тхт_шк.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_BarCodes.dm",КодировкаТекста.UTF8);
		КонецЕсли;	

	КонецЕсли;
	
	Если ВыгружатьЯчейки тогда
		
		Запись= ЗаполнитьТаблицуЯчейкиИЗДокумента(ДокументВыгрузки);
		КоличествоЯчейки      = Запись.Количество;
		АдресДанныхЯчейки = Запись.Адрес;
		
		Если КоличествоЯчейки=0 тогда
			ОчиститьСообщения();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Нет ячеек для выгрузки!";
			Сообщение.Сообщить();
		Иначе
		тхт_яч = Новый ТекстовыйДокумент;
		//ТекстФайлаЯчейки = ""+?(ОчиститьЯчейки,"-","+")+Символы.ПС;
		ТекстФайлаЯчейки = "+"+Символы.ПС;
		ТекстФайлаЯчейки=ТекстФайлаЯчейки+ВыгрузитьПорциюЯчеек(1, КоличествоЯчейки, АдресДанныхЯчейки); 
	    тхт_яч.УстановитьТекст(ТекстФайлаЯчейки);
		тхт_яч.ВставитьСтроку(0,""+Формат(тхт_яч.КоличествоСтрок(),"ЧГ=0"));
		
		Если ИспользоватьFTP тогда
			ОтправитьФайлНаFTP(тхт_яч, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Cells.dm"+"temp");	
		Иначе	
	    	тхт_яч.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Cells.dm",КодировкаТекста.UTF8);
		КонецЕсли;	

	
		КонецЕсли;	    
		
	КонецЕсли;
	
	Если ВыгружатьДопШагиСДокументом Тогда
		тхт=Новый ТекстовыйДокумент();
		тхт.ДобавитьСтроку(""+?(ОчиститьДопШаги,"-","+"));
		Для каждого стр из ДополнительныеШаги Цикл
			Код=Формат(ДополнительныеШаги.Индекс(стр),"ЧН=0; ЧГ=0; БЛ=0; БИ=1");
			СтрокаДопшагов="";
			СтрокаДопшагов=СтрокаДопшагов+Код+";";
			СтрокаДопшагов=СтрокаДопшагов+"+;";
			СтрокаДопшагов=СтрокаДопшагов+СобратьДополнительныеШаги(Код);
			тхт.ДобавитьСтроку(СтрокаДопшагов);  
		КонецЦикла; 
		тхт.ВставитьСтроку(0,""+Формат(тхт.КоличествоСтрок(),"ЧГ=0"));
		
		Если ИспользоватьFTP тогда
			ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_userbooks.dm"+"temp");
		Иначе
			тхт.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_userbooks.dm",КодировкаТекста.UTF8);
		КонецЕсли;
		
		ВернутьТаблицуСУникальнымиИД(КодШаблонаДокументаВыгрузки);
		тхт_шага = Новый ТекстовыйДокумент;
		Для каждого стр из ТаблицаДляПереносаШагов Цикл
			Если НЕ (стр.ТипДанных = "Дата" ИЛИ стр.ТипДанных = "Текст" ИЛИ стр.ТипДанных = "Число") Тогда
				тхт_шага=Новый ТекстовыйДокумент(); //выгрузка шаблонов в файл обмена
				тхт_шага.ДобавитьСтроку(""+?(ОчиститьДопШаги,"-","+"));
				СтрокаДопшагов="";
				СтрокаДопшагов=СтрокаДопшагов+стр.ТипДанных+";";
				СтрокаДопшагов=СтрокаДопшагов+стр.ИДСправочника+";";
				тхт_шага.ДобавитьСтроку(СтрокаДопшагов);
				ВернутьЭлементыСправочника(тхт_шага, стр.ТипДанных, стр.ИДСправочника, 0); 
				тхт_шага.ВставитьСтроку(0,""+Формат(тхт_шага.КоличествоСтрок(),"ЧГ=0"));
				Если ИспользоватьFTP тогда
					ОтправитьФайлНаFTP(тхт_шага, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_bookelements"+"_"+стр.ИД+".dm"+"temp");
				Иначе
					тхт_шага.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_bookelements"+"_"+стр.ИД+".dm",КодировкаТекста.UTF8);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
			
	тхт_док=Новый ТекстовыйДокумент; //выгрузка документа в файл обмена
	ТекстФайлаДокумент=СобратьДокумент(ДокументВыгрузки,ИспользоватьЕГАИС,ВерсияЕГАИС);
	Если ТекстФайлаДокумент= Неопределено тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не найден шаблон с кодом "+КодШаблонаДокументаВыгрузки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	тхт_док.УстановитьТекст(ТекстФайлаДокумент);
	тхт_док.ВставитьСтроку(0,""+Формат(тхт_док.КоличествоСтрок(),"ЧГ=0"));
	ЧистыйДокНомер=ПолучитьНомерДокумента(ДокументВыгрузки);
	




	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт_док, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Doc.dm"+"temp");
	Иначе	
		тхт_док.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Doc_"+ЧистыйДокНомер+".dm",КодировкаТекста.UTF8);

	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст="Выгружен документ: "+ДокументВыгрузки;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТоварыЕслиКаталогиДоступны()
	АдресДанныхТовары=ЗаполнитьТаблицуТовары();	
	АдресДанныхШтрихкоды=ЗаполнитьТаблицуШтрихкоды();	
	
	Если Товары.Количество()=0 тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет номенклатуры для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	   
	
	КоличествоЭлементов=Товары.Количество()+Штрихкоды.Количество();
	ИндикаторТовары=0;
   	тхт_тв = Новый ТекстовыйДокумент;
	ТекстФайлаТовары = ""+?(ОчиститьТовары,"-","+")+Символы.ПС;
	ТекстФайлаТовары=ТекстФайлаТовары+""+Атрибут1+";"+Атрибут2+";"+Атрибут3+";"+Атрибут4+";"+Атрибут5+";"+Атрибут6+";"+Атрибут7+";"+Атрибут8+";"+Атрибут9+";"+Атрибут10+";"+Символы.ПС;
	   
  	КоличествоТовары = Товары.Количество();
	Если КоличествоТовары<100 тогда
		РазмерШагаТовары=5
	ИначеЕсли КоличествоТовары<1000 тогда
		РазмерШагаТовары=10
	ИначеЕсли КоличествоТовары<10000 тогда
		РазмерШагаТовары=100
	ИначеЕсли КоличествоТовары<100000 тогда
		РазмерШагаТовары=1000
	Иначе 
		РазмерШагаТовары=10000
	КонецЕсли;
	
    КоличествоШаговТовары = Цел(КоличествоТовары / РазмерШагаТовары);
    КоличествоЦелТовары   = КоличествоШаговТовары * РазмерШагаТовары;

    Если КоличествоЦелТовары < КоличествоТовары Тогда
        МаксимальноеЗначениеИндикатораТовары = КоличествоШаговТовары + 1;
    Иначе
        МаксимальноеЗначениеИндикатораТовары = КоличествоШаговТовары;
    КонецЕсли;

	
	тхт_шк = Новый ТекстовыйДокумент;
	ТекстФайлаШтрихкоды = ""+?(ОчиститьТовары,"-","+")+Символы.ПС;
	   
  	КоличествоШтрихкоды = Штрихкоды.Количество();
	Если КоличествоШтрихкоды<100 тогда
		РазмерШагаШтрихкоды=5
	ИначеЕсли КоличествоШтрихкоды<1000 тогда
		РазмерШагаШтрихкоды=10
	ИначеЕсли КоличествоШтрихкоды<10000 тогда
		РазмерШагаШтрихкоды=100
	ИначеЕсли КоличествоШтрихкоды<100000 тогда
		РазмерШагаШтрихкоды=1000
	Иначе 
		РазмерШагаШтрихкоды=10000
	КонецЕсли;
	
    КоличествоШаговШтрихкоды = Цел(КоличествоШтрихкоды / РазмерШагаШтрихкоды);
    КоличествоЦелШтрихкоды   = КоличествоШаговШтрихкоды * РазмерШагаШтрихкоды;

    Если КоличествоЦелШтрихкоды < КоличествоШтрихкоды Тогда
        МаксимальноеЗначениеИндикатораШтрихкоды = КоличествоШаговШтрихкоды + 1;
    Иначе
        МаксимальноеЗначениеИндикатораШтрихкоды = КоличествоШаговШтрихкоды;
    КонецЕсли;
	
	
	Элементы.ИндикаторТовары.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораТовары+МаксимальноеЗначениеИндикатораШтрихкоды;
	
	
	
    Для Счетчик = 1 По КоличествоШаговТовары Цикл

        ТекстФайлаТовары=ТекстФайлаТовары+ВыгрузитьПорциюТоваров(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,РазмерШагаТовары * (Счетчик - 1) + 1, РазмерШагаТовары * Счетчик, АдресДанныхТовары,АртикулВставитьВНазвание);

		ИндикаторТовары = Счетчик;
        ОбработкаПрерыванияПользователя();
        ОбновитьОтображениеДанных();
		
    КонецЦикла;
    Если КоличествоЦелТовары < КоличествоТовары Тогда

        ТекстФайлаТовары=ТекстФайлаТовары+ВыгрузитьПорциюТоваров(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,КоличествоШаговТовары * РазмерШагаТовары + 1, КоличествоТовары, АдресДанныхТовары,АртикулВставитьВНазвание);

		ИндикаторТовары = ИндикаторТовары + 1;

    КонецЕсли;
    тхт_тв.УстановитьТекст(ТекстФайлаТовары);
	тхт_тв.ВставитьСтроку(0,""+Формат(тхт_тв.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт_тв, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Arts.dm"+"temp");	
	Иначе	
		тхт_тв.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Arts.dm",КодировкаТекста.UTF8);
	КонецЕсли; 
 	
    Для Счетчик = 1 По КоличествоШаговШтрихкоды Цикл

        ТекстФайлаШтрихкоды=ТекстФайлаШтрихкоды+ВыгрузитьПорциюШтрихкодов(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,РазмерШагаШтрихкоды * (Счетчик - 1) + 1, РазмерШагаШтрихкоды * Счетчик, АдресДанныхШтрихкоды);
		ИндикаторТовары = ИндикаторТовары+1;
        ОбработкаПрерыванияПользователя();
        ОбновитьОтображениеДанных();
    КонецЦикла;

    Если КоличествоЦелШтрихкоды < КоличествоШтрихкоды Тогда

        ТекстФайлаШтрихкоды=ТекстФайлаШтрихкоды+ВыгрузитьПорциюШтрихкодов(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,КоличествоШаговШтрихкоды * РазмерШагаШтрихкоды + 1, КоличествоШтрихкоды, АдресДанныхШтрихкоды);
		ИндикаторТовары = ИндикаторТовары + 1;

    КонецЕсли;
    тхт_шк.УстановитьТекст(ТекстФайлаШтрихкоды);
	тхт_шк.ВставитьСтроку(0,""+Формат(тхт_шк.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт_шк, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_BarCodes.dm"+"temp");	
	Иначе	
		тхт_шк.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_BarCodes.dm",КодировкаТекста.UTF8);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШаблоныЕслиКаталогиДоступны()
	ИндикаторШаблоны=0;
	Если не ШаблоныДокументов.Количество()=0 тогда
		ВсегоШаблоныПроц=ШаблоныДокументов.Количество();//-100%
		ШагПользПроц=100/ШаблоныДокументов.Количество();
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет шаблонов для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	тхт=Новый ТекстовыйДокумент(); //выгрузка шаблонов в файл обмена
	тхт.ДобавитьСтроку(""+?(ОчиститьШаблоны,"-","+"));
	Для каждого стр из ШаблоныДокументов Цикл
		ИндикаторШаблоны=ИндикаторШаблоны+ШагПользПроц;
		Код=Формат(ШаблоныДокументов.Индекс(стр),"ЧН=0; ЧГ=0; БЛ=0; БИ=1");
		СтрокаШаблона="";
		СтрокаШаблона=СтрокаШаблона+Код+";";//0
		СтрокаШаблона=СтрокаШаблона+"+;";//1. всегда добавление
		СтрокаШаблона=СтрокаШаблона+СобратьШаблон(Код);//логика шаблона
		тхт.ДобавитьСтроку(СтрокаШаблона);  
	КонецЦикла; 
	тхт.ВставитьСтроку(0,""+Формат(тхт.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_TempLates.dm"+"temp");
	Иначе		
		тхт.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_TempLates.dm",КодировкаТекста.UTF8);
	КонецЕсли;
	
	ФайлТЗ = Новый ТекстовыйДокумент;
 	ФайлТЗ.УстановитьТекст(ПолучитьДанныеШаблоны());
 	ФайлТЗ.Записать(лКаталогНастроек+"v83_TempLates.tab");
	ИндикаторШаблоны=100;
	ОграничитьТипыДока();	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЯчейкиЕслиКаталогиДоступны()
	Запись= ЗаполнитьТаблицуЯчейки();
	КоличествоЯчейки      = Запись.Количество;
	АдресДанныхЯчейки = Запись.Адрес;

	
	
	Если КоличествоЯчейки=0 тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет ячеек для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	   
	
	ИндикаторЯчейки=0;
   
	
	тхт_яч = Новый ТекстовыйДокумент;
	ТекстФайлаЯчейки = ""+?(ОчиститьЯчейки,"-","+")+Символы.ПС;
	   
  	Если КоличествоЯчейки<100 тогда
		РазмерШагаЯчейки=5
	ИначеЕсли КоличествоЯчейки<1000 тогда
		РазмерШагаЯчейки=10
	ИначеЕсли КоличествоЯчейки<10000 тогда
		РазмерШагаЯчейки=100
	ИначеЕсли КоличествоЯчейки<100000 тогда
		РазмерШагаЯчейки=1000
	Иначе 
		РазмерШагаЯчейки=10000
	КонецЕсли;
	
    КоличествоШаговЯчейки = Цел(КоличествоЯчейки / РазмерШагаЯчейки);
    КоличествоЦелЯчейки   = КоличествоШаговЯчейки * РазмерШагаЯчейки;

    Если КоличествоЦелЯчейки < КоличествоЯчейки Тогда
        МаксимальноеЗначениеИндикатораЯчейки = КоличествоШаговЯчейки + 1;
    Иначе
        МаксимальноеЗначениеИндикатораЯчейки = КоличествоШаговЯчейки;
    КонецЕсли;
	
	
	Элементы.ИндикаторЯчейки.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораЯчейки;
	
		
    Для Счетчик = 1 По КоличествоШаговЯчейки Цикл

        ТекстФайлаЯчейки=ТекстФайлаЯчейки+ВыгрузитьПорциюЯчеек(РазмерШагаЯчейки * (Счетчик - 1) + 1, РазмерШагаЯчейки * Счетчик, АдресДанныхЯчейки);
		ИндикаторЯчейки = ИндикаторЯчейки+1;
        ОбработкаПрерыванияПользователя();
        ОбновитьОтображениеДанных();
    КонецЦикла;

    Если КоличествоЦелЯчейки < КоличествоЯчейки Тогда

        ТекстФайлаЯчейки=ТекстФайлаЯчейки+ВыгрузитьПорциюЯчеек(КоличествоШаговЯчейки * РазмерШагаЯчейки + 1, КоличествоЯчейки, АдресДанныхЯчейки);
		ИндикаторЯчейки = ИндикаторЯчейки + 1;

    КонецЕсли;

 
 
    тхт_яч.УстановитьТекст(ТекстФайлаЯчейки);
	тхт_яч.ВставитьСтроку(0,""+Формат(тхт_яч.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт_яч, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Cells.dm"+"temp");	
	Иначе	
		тхт_яч.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Cells.dm",КодировкаТекста.UTF8);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЕИЕслиКаталогиДоступны()
	Запись		  = ЗаполнитьТаблицуЕИ();
	КоличествоЕИ  = Запись.Количество;
	АдресДанныхЕИ = Запись.Адрес;
	
	Если КоличествоЕИ = 0 тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нет ЕИ для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ИндикаторЕИ = 0;
   
	
	тхт_еи = Новый ТекстовыйДокумент;
	ТекстФайлаЕИ = "" + ?(ОчиститьЕИ, "-", "+")+Символы.ПС;
	   
  	Если КоличествоЕИ < 100 тогда
		РазмерШагаЕИ = 5
	ИначеЕсли КоличествоЕИ < 1000 тогда
		РазмерШагаЕИ = 10
	ИначеЕсли КоличествоЕИ < 10000 тогда
		РазмерШагаЕИ = 100
	ИначеЕсли КоличествоЕИ < 100000 тогда
		РазмерШагаЕИ = 1000
	Иначе 
		РазмерШагаЕИ = 10000
	КонецЕсли;
	
    КоличествоШаговЕИ = Цел(КоличествоЕИ / РазмерШагаЕИ);
    КоличествоЦелЕИ   = КоличествоШаговЕИ * РазмерШагаЕИ;

    Если КоличествоЦелЕИ < КоличествоЕИ Тогда
        МаксимальноеЗначениеИндикатораЕИ = КоличествоШаговЕИ + 1;
    Иначе
        МаксимальноеЗначениеИндикатораЕИ = КоличествоШаговЕИ;
    КонецЕсли;
	
	
	Элементы.ИндикаторЕИ.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораЕИ;
	
		
    Для Счетчик = 1 По КоличествоШаговЕИ Цикл

        ТекстФайлаЕИ = ТекстФайлаЕИ + ВыгрузитьПорциюЕИ(РазмерШагаЕИ * (Счетчик - 1) + 1, РазмерШагаЕИ * Счетчик, АдресДанныхЕИ);
		ИндикаторЕИ = ИндикаторЕИ + 1;
        ОбработкаПрерыванияПользователя();
        ОбновитьОтображениеДанных();
    КонецЦикла;

    Если КоличествоЦелЕИ < КоличествоЕИ Тогда

        ТекстФайлаЕИ = ТекстФайлаЕИ + ВыгрузитьПорциюЕИ(КоличествоШаговЕИ * РазмерШагаЕИ + 1, КоличествоЕИ, АдресДанныхЕИ);
		ИндикаторЕИ = ИндикаторЕИ + 1;

    КонецЕсли;

	тхт_еи.УстановитьТекст(ТекстФайлаЕИ);
	тхт_еи.ВставитьСтроку(0,""+Формат(тхт_еи.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт_еи, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"v_83_Units_.dm"+"temp");
	Иначе		
		тхт_еи.Записать(лКаталогОбмена+"\DataMobile\"+ИДТСД+"in\"+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"v_83_Units_.dm",КодировкаТекста.UTF8);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКлиентовЕслиКаталогиДоступны()
	Запись= ЗаполнитьТаблицуКлиенты();
	КоличествоКлиенты      = Запись.Количество;
	АдресДанныхКлиенты = Запись.Адрес;

	
	
	Если КоличествоКлиенты=0 тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет контрагентов для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	   
	
	ИндикаторКлиенты=0;
   
	
	тхт_кл = Новый ТекстовыйДокумент;
	ТекстФайлаКлиенты = ""+?(ОчиститьКлиентов,"-","+")+Символы.ПС;
	   
  	Если КоличествоКлиенты<100 тогда
		РазмерШагаКлиенты=5
	ИначеЕсли КоличествоКлиенты<1000 тогда
		РазмерШагаКлиенты=10
	ИначеЕсли КоличествоКлиенты<10000 тогда
		РазмерШагаКлиенты=100
	ИначеЕсли КоличествоКлиенты<100000 тогда
		РазмерШагаКлиенты=1000
	Иначе 
		РазмерШагаКлиенты=10000
	КонецЕсли;
	
    КоличествоШаговКлиенты = Цел(КоличествоКлиенты / РазмерШагаКлиенты);
    КоличествоЦелКлиенты   = КоличествоШаговКлиенты * РазмерШагаКлиенты;

    Если КоличествоЦелКлиенты < КоличествоКлиенты Тогда
        МаксимальноеЗначениеИндикатораКлиенты = КоличествоШаговКлиенты + 1;
    Иначе
        МаксимальноеЗначениеИндикатораКлиенты = КоличествоШаговКлиенты;
    КонецЕсли;
	
	
	Элементы.ИндикаторКлиенты.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораКлиенты;
	
		
    Для Счетчик = 1 По КоличествоШаговКлиенты Цикл

        ТекстФайлаКлиенты=ТекстФайлаКлиенты+ВыгрузитьПорциюКлиентов(РазмерШагаКлиенты * (Счетчик - 1) + 1, РазмерШагаКлиенты * Счетчик, АдресДанныхКлиенты);
		ИндикаторКлиенты = ИндикаторКлиенты+1;
        ОбработкаПрерыванияПользователя();
        ОбновитьОтображениеДанных();
    КонецЦикла;

    Если КоличествоЦелКлиенты < КоличествоКлиенты Тогда

        ТекстФайлаКлиенты=ТекстФайлаКлиенты+ВыгрузитьПорциюКлиентов(КоличествоШаговКлиенты * РазмерШагаКлиенты + 1, КоличествоКлиенты, АдресДанныхКлиенты);
		ИндикаторКлиенты = ИндикаторКлиенты + 1;

    КонецЕсли;

 
 
	тхт_кл.УстановитьТекст(ТекстФайлаКлиенты);
	тхт_кл.ВставитьСтроку(0,""+Формат(тхт_кл.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт_кл, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Clients.dm"+"temp");
	Иначе		
		тхт_кл.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"v_83_Clients_.dm",КодировкаТекста.UTF8);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКМЕслиКаталогиДоступны()
	ТаблицаТоваровДляПроверки = ТаблицаТоваровКМ;
	Ответ = ПроверитьВводДанныхТабличнойЧасти(ТаблицаТоваровДляПроверки);
		
	Если ТаблицаТоваровКМ.Количество() = 0 Тогда
		Сообщить("Укажите номенклатуру для выгрузки! ");		
	Иначе
		Если Ответ = Ложь Тогда
			Сообщить("Указано количество 0. Проверьте данные ввода. ");			
		Иначе
			Если ИспользоватьFTP Тогда
				Подключение = ПодключитьсяКFTPСерверу();
				Если Подключение <> Неопределено Тогда
					СтрокиВыгрузки = ВыгрузитьКМНаСервере();
					ВставитьКоличествоПечатиВТЧ();
					СформироватьФайлКМ(СтрокиВыгрузки);
					
					Сообщить("Выгрузка завершена. ");
				Иначе
					Сообщить("Проверьте подключение к FTP. ");
				КонецЕсли;
			Иначе
				СтрокиВыгрузки = ВыгрузитьКМНаСервере();
				ВставитьКоличествоПечатиВТЧ();
				СформироватьФайлКМ(СтрокиВыгрузки);
				Сообщить("Выгрузка завершена. ");	
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьУпаковкиКМЕслиКаталогиДоступны()
	Запись= ЗаполнитьТаблицуМаркировки();
	КоличествоМарки  = Запись.Количество;
	АдресДанныхМарки = Запись.Адрес;
	
	Если КоличествоМарки=0 тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет марок для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	   
	
	ИндикаторТоварыМаркировка = 0;
	
   	тхт = Новый ТекстовыйДокумент;
	ТекстФайлаМарки = "" + ?(ОчиститьУпаковкиКМ, "-", "+") + Символы.ПС;
	   
	Если КоличествоМарки < 100 тогда
		РазмерШагаМарки = 5
	ИначеЕсли КоличествоМарки < 1000 тогда
		РазмерШагаМарки = 10
	ИначеЕсли КоличествоМарки < 10000 тогда
		РазмерШагаМарки = 100
	ИначеЕсли КоличествоМарки < 100000 тогда
		РазмерШагаМарки = 1000
	Иначе 
		РазмерШагаМарки = 10000
	КонецЕсли;
	
    КоличествоШаговМарки = Цел(КоличествоМарки / РазмерШагаМарки);
    КоличествоЦелМарки   = КоличествоШаговМарки * РазмерШагаМарки;

    Если КоличествоЦелМарки < КоличествоМарки Тогда
        МаксимальноеЗначениеИндикатораМарки = КоличествоШаговМарки + 1;
    Иначе
        МаксимальноеЗначениеИндикатораМарки = КоличествоШаговМарки;
    КонецЕсли;

	
	Элементы.ИндикаторТоварыМаркировка.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораМарки;
	
    Для Счетчик = 1 По КоличествоШаговМарки Цикл

        ТекстФайлаМарки = ТекстФайлаМарки + ВыгрузитьПорциюМарок(РазмерШагаМарки * (Счетчик - 1) + 1, РазмерШагаМарки * Счетчик, АдресДанныхМарки);

		ИндикаторТоварыМаркировка = Счетчик;
        ОбработкаПрерыванияПользователя();
        ОбновитьОтображениеДанных();
		
	КонецЦикла;
	
    Если КоличествоЦелМарки < КоличествоМарки Тогда

        ТекстФайлаМарки=ТекстФайлаМарки + ВыгрузитьПорциюМарок(КоличествоШаговМарки * РазмерШагаМарки + 1, КоличествоМарки, АдресДанныхМарки);

		ИндикаторТоварыМаркировка = ИндикаторТоварыМаркировка + 1;
	КонецЕсли;
	
	ИндикаторТоварыМаркировка = МаксимальноеЗначениеИндикатораМарки;
	
    тхт.УстановитьТекст(ТекстФайлаМарки);
	
	тхт.ВставитьСтроку(0,""+Формат(тхт.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Marks.dm"+"temp");	
	Иначе	
		тхт.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Marks.dm",КодировкаТекста.UTF8);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТоварыЕГАИСЕслиКаталогиДоступны()
		
	АдресДанныхТовары=ЗаполнитьТаблицуТоварыЕгаис();		
	Если НоменклатураЕГАИС.Количество()=0 тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет номенклатуры ЕГАИС для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	   
	
	КоличествоЭлементов=НоменклатураЕГАИС.Количество();
	ИндикаторТоварыЕгаис=0;
	   тхт_тв = Новый ТекстовыйДокумент;
	ТекстФайлаТовары = ""+?(ОчиститьТоварыЕгаис,"-","+")+Символы.ПС;
	   
	  КоличествоТовары = НоменклатураЕГАИС.Количество();
	Если КоличествоТовары<100 тогда
		РазмерШагаТовары=5
	ИначеЕсли КоличествоТовары<1000 тогда
		РазмерШагаТовары=10
	ИначеЕсли КоличествоТовары<10000 тогда
		РазмерШагаТовары=100
	ИначеЕсли КоличествоТовары<100000 тогда
		РазмерШагаТовары=1000
	Иначе 
		РазмерШагаТовары=10000
	КонецЕсли;
	
	КоличествоШаговТовары = Цел(КоличествоТовары / РазмерШагаТовары);
	КоличествоЦелТовары   = КоличествоШаговТовары * РазмерШагаТовары;

	Если КоличествоЦелТовары < КоличествоТовары Тогда
	    МаксимальноеЗначениеИндикатораТовары = КоличествоШаговТовары + 1;
	Иначе
	    МаксимальноеЗначениеИндикатораТовары = КоличествоШаговТовары;
	КонецЕсли;

	
	тхт_шк = Новый ТекстовыйДокумент;
	
	Элементы.ИндикаторТоварыЕгаис.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораТовары;
	
	Для Счетчик = 1 По КоличествоШаговТовары Цикл

	    ТекстФайлаТовары=ТекстФайлаТовары+ВыгрузитьПорциюТоваровЕГАИС(ИДТСД,РазмерШагаТовары * (Счетчик - 1) + 1, РазмерШагаТовары * Счетчик, АдресДанныхТовары);

		ИндикаторТоварыЕгаис = Счетчик;
	    ОбработкаПрерыванияПользователя();
	    ОбновитьОтображениеДанных();
		
	КонецЦикла;
	Если КоличествоЦелТовары < КоличествоТовары Тогда

	    ТекстФайлаТовары=ТекстФайлаТовары+ВыгрузитьПорциюТоваровЕГАИС(ИДТСД,КоличествоШаговТовары * РазмерШагаТовары + 1, КоличествоТовары, АдресДанныхТовары);

		ИндикаторТоварыЕгаис = ИндикаторТоварыЕгаис + 1;

	КонецЕсли;
	
	ИндикаторТоварыЕгаис = МаксимальноеЗначениеИндикатораТовары;
	
	тхт_тв.УстановитьТекст(ТекстФайлаТовары);
	тхт_тв.ВставитьСтроку(0,""+Формат(тхт_тв.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт_тв, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_ArtsEGAIS.dm"+"temp");	
	Иначе	
		тхт_тв.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_ArtsEGAIS.dm",КодировкаТекста.UTF8);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьМаркиЕГАИСЕслиКаталогиДоступны()
		
	Запись= ЗаполнитьТаблицуМарки();
	КоличествоМарки  = Запись.Количество;
	АдресДанныхМарки = Запись.Адрес;
	
	Если КоличествоМарки=0 тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет марок ЕГАИС для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	   
	
	ИндикаторМаркиЕгаис=0;
	
	   тхт = Новый ТекстовыйДокумент;
	ТекстФайлаМарки = ""+?(ОчиститьМаркиЕГАИС,"-","+")+Символы.ПС;
	   
	Если КоличествоМарки<100 тогда
		РазмерШагаМарки=5
	ИначеЕсли КоличествоМарки<1000 тогда
		РазмерШагаМарки=10
	ИначеЕсли КоличествоМарки<10000 тогда
		РазмерШагаМарки=100
	ИначеЕсли КоличествоМарки<100000 тогда
		РазмерШагаМарки=1000
	Иначе 
		РазмерШагаМарки=10000
	КонецЕсли;
	
	КоличествоШаговМарки = Цел(КоличествоМарки / РазмерШагаМарки);
	КоличествоЦелМарки   = КоличествоШаговМарки * РазмерШагаМарки;

	Если КоличествоЦелМарки < КоличествоМарки Тогда
	    МаксимальноеЗначениеИндикатораМарки = КоличествоШаговМарки + 1;
	Иначе
	    МаксимальноеЗначениеИндикатораМарки = КоличествоШаговМарки;
	КонецЕсли;

	
	Элементы.ИндикаторМаркиЕгаис.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораМарки;
	
	Для Счетчик = 1 По КоличествоШаговМарки Цикл

	    ТекстФайлаМарки=ТекстФайлаМарки+ВыгрузитьПорциюМарокЕГАИС(РазмерШагаМарки * (Счетчик - 1) + 1, РазмерШагаМарки * Счетчик, АдресДанныхМарки);

		ИндикаторМаркиЕгаис = Счетчик;
	    ОбработкаПрерыванияПользователя();
	    ОбновитьОтображениеДанных();
		
	КонецЦикла;
	Если КоличествоЦелМарки < КоличествоМарки Тогда

	    ТекстФайлаМарки=ТекстФайлаМарки+ВыгрузитьПорциюМарокЕГАИС(КоличествоШаговМарки * РазмерШагаМарки + 1, КоличествоМарки, АдресДанныхМарки);

		ИндикаторМаркиЕгаис = ИндикаторМаркиЕгаис + 1;
	КонецЕсли;
	
	ИндикаторМаркиЕгаис = МаксимальноеЗначениеИндикатораМарки;
	
	тхт.УстановитьТекст(ТекстФайлаМарки);
	
	тхт.ВставитьСтроку(0,""+Формат(тхт.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_MarksEGAIS.dm"+"temp");	
	Иначе	
		тхт.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_MarksEGAIS.dm",КодировкаТекста.UTF8);
	КонецЕсли;
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_MarksEGAIS.dm"+"temp");	
	Иначе	
		тхт.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_MarksEGAIS.dm",КодировкаТекста.UTF8);
	КонецЕсли;	
	//EgaisMarks
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСкладыЕслиКаталогиДоступны()
		
	Запись= ЗаполнитьТаблицуСклады();
	КоличествоСклады      = Запись.Количество;
	АдресДанныхСклады = Запись.Адрес;

	
	
	Если КоличествоСклады=0 тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет складов для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	   
	
	ИндикаторСклады=0;
   
	
	тхт_кл = Новый ТекстовыйДокумент;
	ТекстФайлаСклады = ""+?(ОчиститьСклады,"-","+")+Символы.ПС;
	   
  	Если КоличествоСклады<100 тогда
		РазмерШагаСклады=5
	ИначеЕсли КоличествоСклады<1000 тогда
		РазмерШагаСклады=10
	ИначеЕсли КоличествоСклады<10000 тогда
		РазмерШагаСклады=100
	ИначеЕсли КоличествоСклады<100000 тогда
		РазмерШагаСклады=1000
	Иначе 
		РазмерШагаСклады=10000
	КонецЕсли;
	
    КоличествоШаговСклады = Цел(КоличествоСклады / РазмерШагаСклады);
    КоличествоЦелСклады   = КоличествоШаговСклады * РазмерШагаСклады;

    Если КоличествоЦелСклады < КоличествоСклады Тогда
        МаксимальноеЗначениеИндикатораСклады = КоличествоШаговСклады + 1;
    Иначе
        МаксимальноеЗначениеИндикатораСклады = КоличествоШаговСклады;
    КонецЕсли;
	
	
	Элементы.ИндикаторСклады.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораСклады;
	
		
    Для Счетчик = 1 По КоличествоШаговСклады Цикл

        ТекстФайлаСклады=ТекстФайлаСклады+ВыгрузитьПорциюСкладов(РазмерШагаСклады * (Счетчик - 1) + 1, РазмерШагаСклады * Счетчик, АдресДанныхСклады);
		ИндикаторСклады = ИндикаторСклады+1;
        ОбработкаПрерыванияПользователя();
        ОбновитьОтображениеДанных();
    КонецЦикла;

    Если КоличествоЦелСклады < КоличествоСклады Тогда

        ТекстФайлаСклады=ТекстФайлаСклады+ВыгрузитьПорциюСкладов(КоличествоШаговСклады * РазмерШагаСклады + 1, КоличествоСклады, АдресДанныхСклады);
		ИндикаторСклады = ИндикаторСклады + 1;

    КонецЕсли;

 
 
    тхт_кл.УстановитьТекст(ТекстФайлаСклады);
	тхт_кл.ВставитьСтроку(0,""+Формат(тхт_кл.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт_кл, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Warehouses.dm"+"temp");
	Иначе
		тхт_кл.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"v_83_Warehouses_.dm",КодировкаТекста.UTF8);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДопШагиЕслиКаталогиДоступны()	
	ИндикаторДопшаги=0;
	Если не ДополнительныеШаги.Количество()=0 тогда
		ВсегоДопшагиПроц=ДополнительныеШаги.Количество() + СвязиШаговШаблонов.Количество();//-100%
		Для каждого стр из ДополнительныеШаги Цикл
			Если НЕ (стр.ТипДанных = "Дата" ИЛИ стр.ТипДанных = "Текст" ИЛИ стр.ТипДанных = "Число") Тогда
				ВсегоДопшагиПроц = ВсегоДопшагиПроц + ВернутьКоличествоЭлементовСпр(стр.ТипДанных);
			КонецЕсли;
		КонецЦикла;
		ШагПользПроц=100/ВсегоДопшагиПроц;
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет дополнительных шагов для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	тхт=Новый ТекстовыйДокумент();
	тхт.ДобавитьСтроку(""+?(ОчиститьДопШаги,"-","+"));
	Для каждого стр из ДополнительныеШаги Цикл
		ИндикаторДопшаги=ИндикаторДопшаги+ШагПользПроц;
		Код=Формат(ДополнительныеШаги.Индекс(стр),"ЧН=0; ЧГ=0; БЛ=0; БИ=1");
		СтрокаДопшагов="";
		СтрокаДопшагов=СтрокаДопшагов+Код+";";
		СтрокаДопшагов=СтрокаДопшагов+"+;";
		СтрокаДопшагов=СтрокаДопшагов+СобратьДополнительныеШаги(Код);
		тхт.ДобавитьСтроку(СтрокаДопшагов);  
	КонецЦикла; 
	тхт.ВставитьСтроку(0,""+Формат(тхт.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_userbooks.dm"+"temp");
	Иначе
		тхт.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_userbooks.dm",КодировкаТекста.UTF8);
	КонецЕсли;
	
	тхт=Новый ТекстовыйДокумент();
	тхт.ДобавитьСтроку(""+?(ОчиститьДопШаги,"-","+"));
	Для каждого стр из СвязиШаговШаблонов Цикл
		ИндикаторДопшаги=ИндикаторДопшаги+ШагПользПроц;
		Код=Формат(СвязиШаговШаблонов.Индекс(стр),"ЧН=0; ЧГ=0; БЛ=0; БИ=1");
		СтрокаСвязей="";
		СтрокаСвязей=СтрокаСвязей+Код+";";
		СтрокаСвязей=СтрокаСвязей+"+;";
		СтрокаСвязей=СтрокаСвязей + стр.ИдентификаторШага+";";
		СтрокаСвязей=СтрокаСвязей + стр.ИдентификаторШаблона+";";
		СтрокаСвязей=СтрокаСвязей + стр.Порядок+";";
		
		ТекущийПроверкаЗаполнения = 0;
		ТекущийРеквизитШапки = 0;
		
		ПараметрыОтбораСвязи = Новый Структура;
		ПараметрыОтбораСвязи.Вставить("ИД", стр.ИдентификаторШага);
		СтрокиШагов = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбораСвязи);	
		Если СтрокиШагов.Количество() >  0 Тогда
			ТекущийПроверкаЗаполнения = ?(СтрокиШагов[0].ПроверкаЗаполнения=Истина,1,0);
			ТекущийРеквизитШапки = СтрокиШагов[0].РеквизитШапки;
		КонецЕсли;
		СтрокаСвязей=СтрокаСвязей + ТекущийПроверкаЗаполнения+";";	
		СтрокаСвязей=СтрокаСвязей + ТекущийРеквизитШапки+";";

		тхт.ДобавитьСтроку(СтрокаСвязей);  
	КонецЦикла; 
	тхт.ВставитьСтроку(0,""+Формат(тхт.КоличествоСтрок(),"ЧГ=0"));
	
	Если ИспользоватьFTP тогда
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_steplinks.dm"+"temp");
	Иначе
		тхт.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_steplinks.dm",КодировкаТекста.UTF8);
	КонецЕсли;
	
	
	//Дополнительные шаги
	ВернутьТаблицуСУникальнымиИД();
	Для каждого стр из ТаблицаДляПереносаШагов Цикл
		Если НЕ (стр.ТипДанных = "Дата" ИЛИ стр.ТипДанных = "Текст" ИЛИ стр.ТипДанных = "Число") Тогда
			тхт=Новый ТекстовыйДокумент(); //выгрузка шаблонов в файл обмена
			тхт.ДобавитьСтроку(""+?(ОчиститьДопШаги,"-","+"));
			СтрокаДопшагов="";
			СтрокаДопшагов=СтрокаДопшагов+стр.ТипДанных+";";
			СтрокаДопшагов=СтрокаДопшагов+стр.ИДСправочника+";";
			тхт.ДобавитьСтроку(СтрокаДопшагов);
			ВернутьЭлементыСправочника(тхт, стр.ТипДанных, стр.ИДСправочника, ШагПользПроц); 
			тхт.ВставитьСтроку(0,""+Формат(тхт.КоличествоСтрок(),"ЧГ=0"));
			Если ИспользоватьFTP тогда
				ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss")+"_v83_bookelements"+"_"+стр.ИД+".dm"+"temp");
			Иначе
				тхт.Записать(лКаталогОбмена+РП+"DataMobile"+РП+ИДТСД+"in"+РП+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_bookelements"+"_"+стр.ИД+".dm",КодировкаТекста.UTF8);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ФайлТЗ = Новый ТекстовыйДокумент;
 	ФайлТЗ.УстановитьТекст(ПолучитьДанныеДопШаги());
 	ФайлТЗ.Записать(лКаталогНастроек+"v83_UserBooks.tab");
	ИндикаторДопшаги=100;		
КонецПроцедуры
 
&НаКлиенте
Процедура ПеревестиПараметрыНаСледующийТСД_КаталогиОбмена(Параметры);

	Параметры.ТекущийТСД=Параметры.ТекущийТСД+1;	
	ТекКаталог = лКаталогОбмена+Параметры.МассивТСД[Параметры.ТекущийТСД-1];
	
	ИмяКаталогаIN=ТекКаталог+"\in\";
	ИмяКаталогаOUT=ТекКаталог+"\out\";
	ИмяКаталогаLOG=ТекКаталог+"\log\";			
							
	Параметры.ТекущийКаталогПроверки="in";
	Параметры.ТекущийКаталогСоздания="in";

	Параметры.ТекКаталог=ТекКаталог;

	Параметры.ИмяКаталогаIN=ИмяКаталогаIN;
	Параметры.ИмяКаталогаOUT=ИмяКаталогаOUT;
	Параметры.ИмяКаталогаLOG=ИмяКаталогаLOG;
				
	Параметры.КаталогНаДискеINСуществует=Ложь;
	Параметры.КаталогНаДискеOUTСуществует=Ложь;
	Параметры.КаталогНаДискеLOGСуществует=Ложь;
							
КонецПроцедуры

Функция СформироватьЗапросКСервисуИСМПиСоздатьСправочникСсылкаМарка(ЗначениеШтрихкода, ЭтоТабак = Ложь, СсылкаНаДок = Неопределено, ВидМаркируемойПродукцииДокумента)
	
	Модуь_ШтрихкодированиеИС = ОбщийМодуль("ШтрихкодированиеИС");
	Модуь_ШтрихкодированиеИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");
	Модуь_ШтрихкодированиеИСКлиентСерверПереопределяемый = ОбщийМодуль("ШтрихкодированиеИСКлиентСерверПереопределяемый");
	
	Если СсылкаНаДок <> Неопределено Тогда
		Если ТипЗнч(СсылкаНаДок) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") тогда	
			Модуь_ШтрихкодированиеИСМПСлужебный = ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			ДанныеНоменклатурыПоДаннымУПД = Модуь_ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыПоДаннымУПД(СсылкаНаДок);
		КонецЕсли;	
	КонецЕсли;
	
	Контекст 			= Новый Структура("Объект,Ссылка", "", ""); //Контекст = ЭтотОбъект;
	ФормаВыбора 		= Неопределено;
	ВидПродукцииИС 		= ?(ЭтоТабак, Перечисления.ВидыПродукцииИС.Табак, ?(ВидМаркируемойПродукцииДокумента <> Неопределено, ВидМаркируемойПродукцииДокумента, Перечисления.ВидыПродукцииИС.Обувь));
	СсылкаНаШтрихкод	= Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	
	ПараметрыСканирования = Модуь_ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования();
	ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукцииИС, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукцииИС, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукцииИС);
	Модуь_ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукцииИС);
	
	Если ЭтоТабак Тогда
		ПолучитьПараметрыСканированияМОТП(СсылкаНаДок, ВидПродукцииИС, ПараметрыСканирования, Истина);
	Иначе
		ПолучитьПараметрыСканированияИСПМ(СсылкаНаДок, ВидПродукцииИС, ПараметрыСканирования, Истина);                                                                           
	КонецЕсли;
	
	Структура = Новый Структура();
	Структура.Вставить("Штрихкод"		, ЗначениеШтрихкода);
	Структура.Вставить("Количество"		, "");
	Структура.Вставить("ФорматBase64"	, Ложь);
	
	ДанныеШтрихкодаСписок = Новый Массив;
	ДанныеШтрихкодаСписок.Добавить(Структура); 
	
	ДанныеПоШтрихкодам    = Модуь_ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	ДанныеПоШтрихкодам.ВидыПродукции.Добавить(ВидПродукцииИС);
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукцииИС);
	
	Модуь_ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеКодовМаркировки, ДанныеШтрихкодаСписок, ПараметрыСканирования, Неопределено);

	ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода);
	
	Если ДанныеУпаковки = Неопределено Тогда
		Модуь_ШтрихкодированиеИС.ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам,ПараметрыСканирования,Неопределено);
	ИначеЕсли ДанныеУпаковки.Ссылка.ВложенныеШтрихкоды.Количество() = 0 Тогда //создание вложенности
		ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам,ПараметрыСканирования,Неопределено,Модуь_ШтрихкодированиеИС);	
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды") И ДанныеПоШтрихкодам.ВложенныеШтрихкоды.Свойство("ДеревоУпаковок") Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
				
		//НачатьТранзакцию();
		
		Попытка
			
			СтрокаДерева = ДеревоУпаковок.Строки[0];
			
			СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаДерева, СсылкаНаШтрихкод, , ДанныеНоменклатурыПоДаннымУПД, ЭтоТабак);
			
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				Возврат СсылкаНаШтрихкод;	
			КонецЕсли; 
			
			Для каждого СтрокаВложенности Из СтрокаДерева.Строки Цикл
				СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаВложенности, СсылкаНаШтрихкод, , ДанныеНоменклатурыПоДаннымУПД, ЭтоТабак);
				
				Если СтрокаВложенности.Строки.Количество() = 0 Тогда
					Продолжить;	
				КонецЕсли;
				
				Для каждого СтрокаВложенностиВторогоУровня Из СтрокаВложенности.Строки Цикл
					СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаВложенностиВторогоУровня, СсылкаНаШтрихкод, , ДанныеНоменклатурыПоДаннымУПД, ЭтоТабак);	
				КонецЦикла; 
				
			КонецЦикла;		
			
			//ЗафиксироватьТранзакцию();
			
		Исключение
			
			//ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'Создание элементов справочника штрихкоды упаковок.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
			
	КонецЕсли; 
	
	Возврат СсылкаНаШтрихкод;
	
КонецФункции

// Включает поддержку алкогольной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
Процедура ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		МодульШтрихкодированиеЕГАИСКлиентСервер.ЗаполнитьПараметрыСканирования(
			ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
Процедура ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак")
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку обувной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
Процедура ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Модуь_ИнтеграцияИСПовтИсп = ОбщийМодуль("ИнтеграцияИСПовтИсп");

		Если Модуь_ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции)
			Или Не ЗначениеЗаполнено(ВидПродукции) Тогда
			
			МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
			
			Попытка
				МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ФормаВыбора, ВидПродукции, ПараметрыСканирования);	
			Исключение
			    МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ВидПродукции, ПараметрыСканирования);
			КонецПопытки; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаДерева, СсылкаНаШтрихкод, KM_RawMrc = "", ДанныеНоменклатурыПоДаннымУПД = Неопределено, ЭтоТабак)
	
	Марка = СтрокаДерева.Штрихкод;
	
	ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(Марка);
			
	Если ДанныеУпаковки = Неопределено Тогда
		НовЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
		
		Попытка
			ЗаполнитьЗначенияСвойств(НовЭлемент, СтрокаДерева,,"Родитель,Владелец,ХешСумма");
		Исключение
			ЗаполнитьЗначенияСвойств(НовЭлемент, СтрокаДерева,,"Родитель,ХешСумма");
		КонецПопытки;
		
		Если СтрДлина(Марка) = 29 и СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix тогда	
			Марка = Марка + ?(СокрЛП(KM_RawMrc) = "", "", "(8005)"+ KM_RawMrc);	
		КонецЕсли;
		
		НовЭлемент.ЗначениеШтрихкода = Марка;
		
		Если Не ЭтоТабак И (СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Или СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC) И НовЭлемент.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			
			МаркаБезНулей = СтрЗаменить(Марка, "(00)", "");
			
			Если ДанныеНоменклатурыПоДаннымУПД <> Неопределено Тогда
				
				СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(МаркаБезНулей);
				
				Если СведенияПоEAN <> Неопределено Тогда			
					Если ЗначениеЗаполнено(СведенияПоEAN.Номенклатура) тогда					
						НовЭлемент.Номенклатура = СведенияПоEAN.Номенклатура;
						НовЭлемент.Характеристика = СведенияПоEAN.Характеристика;
					Иначе
						ЗаполнитьНоменклатуру(СтрокаДерева, НовЭлемент);				
					КонецЕсли;
				Иначе
					ЗаполнитьНоменклатуру(СтрокаДерева, НовЭлемент);
				КонецЕсли;
				
			КонецЕсли; 
					
		КонецЕсли;
		
		Если НовЭлемент.Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() Или НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
			
			ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НовЭлемент.ЗначениеШтрихкода);
	
			Если ДанныеУпаковки <> Неопределено Тогда //данный штрихкод есть базе
				Возврат;
			КонецЕсли;
			
			НовЭлемент.Записать();
		Иначе
			Сообщить("Не заполнена номенклатура для: " + Марка);
		КонецЕсли;	
		
	Иначе
		
		НовЭлемент = ДанныеУпаковки.Ссылка;
		
	КонецЕсли; 
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		ЗначениеШтрихкодаРодителя 					= СтрокаДерева.Родитель.Штрихкод;
		ЗначениеШтрихкодаРодителяНормализованный 	= СтрокаДерева.Родитель.НормализованныйШтрихкод;
		
		ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителя);
		
		Если ДанныеУпаковки = Неопределено Тогда
			ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителяНормализованный);		
		КонецЕсли;
			
		Если ДанныеУпаковки <> Неопределено Тогда //данный штрихкод есть базе
			НайденныйОбъект = ДанныеУпаковки.Ссылка.ПолучитьОбъект();
			НовСтрокаВложенности = НайденныйОбъект.ВложенныеШтрихкоды.Добавить();
			НовСтрокаВложенности.Штрихкод = НовЭлемент.Ссылка;
			НайденныйОбъект.Записать();
		КонецЕсли;	
	КонецЕсли; 
	
	Если СсылкаНаШтрихкод.Пустая() Тогда
		СсылкаНаШтрихкод = НовЭлемент.Ссылка;		
	КонецЕсли; 
		
КонецПроцедуры

Функция ПолучитьВидПродукцииИСДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументСсылка
	|	И  СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
	|   И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция) 
	|   И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриобретениеТоваровУслуг", Документ.Метаданные().Имя); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		ТекущаяОсобенностьУчета = Выборка.ОсобенностьУчета;
		Модуь_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
		ТекущийВидПродукцииИС = Модуь_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ТекущаяОсобенностьУчета);

		Возврат ТекущийВидПродукцииИС;

	Иначе
		Возврат Перечисления.ВидыПродукцииИС.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции

Процедура ЗаполнитьНоменклатуру(СтрокаДерева, НовЭлемент)
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		ЗначениеШтрихкодаРодителя 					= СтрокаДерева.Родитель.Штрихкод;
		ЗначениеШтрихкодаРодителяНормализованный 	= СтрокаДерева.Родитель.НормализованныйШтрихкод;
		
		ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителя);
		
		Если ДанныеУпаковки = Неопределено Тогда
			ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителяНормализованный);		
		КонецЕсли;
			
		Если ДанныеУпаковки <> Неопределено Тогда //данный штрихкод есть базе
			НовЭлемент.Номенклатура = ДанныеУпаковки.Номенклатура;
			НовЭлемент.Характеристика = ДанныеУпаковки.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПараметрыСканированияМОТП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента, ПараметрыСканирования, ИзСервиса = Ложь)

	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции", Новый Массив);
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
			
	Попытка	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукцииДокумента); Исключение КонецПопытки;

	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки"                      , Ложь);
	ПараметрыСканирования.Вставить("КэшМаркируемойПродукции"                        , Неопределено);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции"             , Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции" , Истина);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД"                            , Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева"  , Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИС"         , Истина);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок"         , Ложь);
	ПараметрыСканирования.Вставить("ДоступнаПечатьЭтикеток"                         , Ложь);
	ПараметрыСканирования.Вставить("Детализация"                         			, Неопределено);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения"                   , Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот"					, Ложь);
	ПараметрыСканирования.Вставить("СтатусКодаМаркировкиПоУмолчанию"				, Неопределено);
	ПараметрыСканирования.Вставить("СсылкаНаОбъект"									, Неопределено);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой"	, Ложь);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру"						, Ложь);
	ПараметрыСканирования.Вставить("Организация"									, Неопределено);
	
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулМОТП"				, Ложь);

	Попытка ПараметрыСканирования.Организация = ПроверяемыйДокумент.Организация; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий"							, Неопределено);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП"					, Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС"							, Ложь);	
	
	КонтролироватьСтатусы = Ложь;
	
	Если КонтролироватьСтатусы Тогда
		ВариантПолученияМРЦ = "ВычислениеИЗапрос";
	Иначе
		ВариантПолученияМРЦ = "Вычисление";
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения",             Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыМОТП",                   ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокМОТП", ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП", ИзСервиса);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыМОТП",                    Новый Массив);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокМОТП",            Новый Массив);
	ПараметрыСканирования.Вставить("Детализация",                              Неопределено);
	ПараметрыСканирования.Вставить("ВариантПолученияМРЦ",                      ВариантПолученияМРЦ);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокМОТП",              Ложь);

	ПараметрыСканирования.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок"	, "ШтрихкодыУпаковок");
	ПараметрыСканирования.Вставить("ИмяКолонкиШтрихкодУпаковки"			, "ШтрихкодУпаковки");

	ПараметрыСканирования.Вставить("ОтборПоВидуПродукции"			, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПула"	, Ложь);
	
	ПараметрыСканирования.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры"	, Ложь);

КонецПроцедуры // ()

Процедура ПолучитьПараметрыСканированияИСПМ(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента, ПараметрыСканирования, ИзСервиса = Ложь)

	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции", Новый Массив);
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
			
	Попытка	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукцииДокумента); Исключение КонецПопытки;

	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки"                      , Ложь);
	ПараметрыСканирования.Вставить("КэшМаркируемойПродукции"                        , Неопределено);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции"             , Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции" , Истина);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД"                            , Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева"  , Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИС"         , Истина);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок"         , Ложь);
	ПараметрыСканирования.Вставить("ДоступнаПечатьЭтикеток"                         , Ложь);
	ПараметрыСканирования.Вставить("Детализация"                         			, Неопределено);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения"                   , Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП"		, ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот"					, Ложь);
	ПараметрыСканирования.Вставить("СтатусКодаМаркировкиПоУмолчанию"				, Неопределено);
	ПараметрыСканирования.Вставить("СсылкаНаОбъект"									, Неопределено);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой"	, Ложь);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру"						, Ложь);
	ПараметрыСканирования.Вставить("Организация"									, Неопределено);
	
	Попытка ПараметрыСканирования.Организация = ПроверяемыйДокумент.Организация; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий"							, Неопределено);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП"					, Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС"							, Ложь);
	ПараметрыСканирования.Вставить("Владелец"							, Неопределено);
	
	ПараметрыСканирования.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок"	, "ШтрихкодыУпаковок");
	ПараметрыСканирования.Вставить("ИмяКолонкиШтрихкодУпаковки"			, "ШтрихкодУпаковки");

	ПараметрыСканирования.Вставить("ОтборПоВидуПродукции"			, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПула"	, Ложь);
	
	ПараметрыСканирования.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры"	, Новый Массив());

КонецПроцедуры // ()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Закрытие конструктора" Тогда
		
		МассивШаблонов = Параметр; //тут можно еще на всяк случай проверить на тип значения
		СоздатьНовыеШаблоны(МассивШаблонов);
		СохранитьШаблоны();
		ОграничитьТипыДока();
		
	КонецЕсли;
	
КонецПРоцедуры

#Область НаименованияКТСД

&НаКлиенте
Процедура ПрочитатьНастройкиТСД()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_ТСД", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_terminals.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_ТСД(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблонаТСД", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_terminals.tab", КодировкаТекста.UTF8);		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияШаблонаТСД(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеТСД(ДопПараметр.ФайлТЗ.ПолучитьТекст());
	СписокТСДНаименованиеПриИзменении("");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеТСД(Данные)

	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		Для каждого СтрокаТЗ Из ДанныеТЗ Цикл
			ПараметрыОтбора = Новый Структура("ТСД", СтрокаТЗ.ТСД);
			
			НайденнаяСтрока = СписокТСД.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденнаяСтрока.Количество() > 0 Тогда
				НайденнаяСтрока[0].Наименование = СтрокаТЗ.Наименование;		
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТСД(Команда)
	ПроверитьКаталоги("ВыгрузитьТСД");
КонецПроцедуры

Процедура СкрытьОткрытьВидимостьТекущийТСДТекущийТСДНаименование(СкрытьТекущийТСД)
	Элементы.ТекущийТСД.Видимость 				= СкрытьТекущийТСД;
	Элементы.ТекущийТСДНаименование.Видимость 	= Не СкрытьТекущийТСД;		
КонецПроцедуры

&НаКлиенте
Процедура СписокТСДНаименованиеПриИзменении(Элемент)
	
	ТД = Элементы.СписокТСД.ТекущиеДанные;
	
	Если ТД <> Неопределено Тогда
		СкрытьОткрытьВидимостьТекущийТСДТекущийТСДНаименование(ПустаяСтрока(ТД.Наименование));	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТСДПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТСДЕслиКаталогиДоступны()
	
	ИндикаторТерминалы=0;
	Если не СписокТСД.Количество()=0 тогда
		ВсегоТСДПроц=СписокТСД.Количество();//-100%
		ШагТСДПроц=100/СписокТСД.Количество();
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет терминалов для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	тхт=Новый ТекстовыйДокумент; //выгрузка терминалов в файл обмена
	тхт.ДобавитьСтроку("+");
	n=0;
	Для каждого стр из СписокТСД Цикл
		n=n+1;
		ИндикаторТерминалы=ИндикаторТерминалы+ШагТСДПроц;
		СтрокаТСД=Формат(n,"ЧГ=0")+";";
		СтрокаТСД=СтрокаТСД+"+;";   
		СтрокаТСД=СтрокаТСД+ЧистаяСтрока(стр.ТСД)+";";
		СтрокаТСД=СтрокаТСД+ЧистаяСтрока(стр.Наименование)+";";
		тхт.ДобавитьСтроку(СтрокаТСД);  
	КонецЦикла;
	тхт.ВставитьСтроку(0,""+Формат(тхт.КоличествоСтрок(),"ЧГ=0"));
		
	ИндикаторТерминалы=100;
	
 ФайлТЗ = Новый ТекстовыйДокумент;
 ФайлТЗ.УстановитьТекст(ПолучитьДанныеТСД());
 ФайлТЗ.Записать(лКаталогНастроек+"v83_terminals.tab");	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеТСД()

 ДанныеТЗ = Новый ХранилищеЗначения(СписокТСД.Выгрузить());
 Возврат XMLСтрока(ДанныеТЗ);

КонецФункции

&НаКлиенте
Процедура Группа14ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "Автозагрузка" Тогда                                                                    
		Попытка
		//	СборРеквизитовДокумента(Элементы.ШаблоныДокументов.ТекущиеДанные.ВидДокумента);				
		Исключение
		КонецПопытки;
		//Элементы.ШаблоныДокументов.ТекущиеДанные	
	КонецЕсли;	
	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура АвтозагрузкаРеквизитовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Попытка
		Если Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные <> Неопределено Тогда
			Элемент.ТекущиеДанные.Шаблон = Элементы.ШаблоныДокументов.ТекущиеДанные.ТипДокумента;
			Элемент.ТекущиеДанные.ТипЗнач = ПолучитьТип(Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.ЗначениеРеквизита);
			Если Элемент.ТекущиеДанные.ТипЗнач = "Строка" ИЛИ Элемент.ТекущиеДанные.ТипЗнач = "Число" Или Элемент.ТекущиеДанные.ТипЗнач = "Дата" ИЛИ Элемент.ТекущиеДанные.ТипЗнач = "Булево" Тогда
				Элемент.ТекущиеДанные.ИмяТаблицы = "";	
			Иначе
				Элемент.ТекущиеДанные.ИмяТаблицы = ПолучитьИмяТаблицы(Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.ЗначениеРеквизита);
			КонецЕсли;	
			
			Попытка
				Элемент.ТекущиеДанные.ГУИД = Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.ЗначениеРеквизита.УникальныйИдентификатор();
			Исключение
				Элемент.ТекущиеДанные.ГУИД = "";			
			КонецПопытки;	
			
		КонецЕсли;	
	Исключение 
	КонецПопытки;
	
	Попытка
		Если НоваяСтрока Тогда 
			Если Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные <> Неопределено Тогда
				Ст = АвтозагрузкаРеквизитовОбщая.Добавить();	
				ЗаполнитьЗначенияСвойств(Ст, Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные);
			КонецЕсли;
		Иначе
			СтруктураУдаления = Новый Структура;
			СтруктураУдаления.Вставить("Шаблон",   Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.Шаблон);
			
			СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураУдаления);
			
			Для Каждого Стр из СтрокиПоиска Цикл
				АвтозагрузкаРеквизитовОбщая.Удалить(Стр);	
			КонецЦикла;
			
			Для Каждого Элм Из АвтозагрузкаРеквизитов Цикл
				НовСтр = АвтозагрузкаРеквизитовОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Элм);	
			КонецЦикла;
		КонецЕсли;
	Исключение 
	КонецПопытки;
	СохранитьШаблоныЕслиКаталогиДоступны();
КонецПроцедуры

&НаСервере
Функция ПолучитьТзАвтозгрузки()
	Возврат АвтозагрузкаРеквизитов.Выгрузить()
КонецФункции


&НаСервере
Функция ПолучитьИмяТаблицы(Значение)
	ИмяТаблицы = "";
	ИмяТаблицы = Значение.Метаданные().Имя;
	Возврат ИмяТаблицы;
КонецФункции


&НаСервере
Функция ПолучитьТип(Значение)
	Тип = "";
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Тип = "Справочники";	
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка")	Тогда
		Тип = "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда	
		Тип = "Число"; 
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда	
		Тип = "Дата"; 	
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Тип = "Перечисления";
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Тип = "Булево";		
	КонецЕсли;
	
	Возврат Тип;
КонецФункции

&НаКлиенте
Процедура АвтозагрузкаРеквизитовПередУдалением(Элемент, Отказ)
	
	СтруктураУдаления = Новый Структура;
	СтруктураУдаления.Вставить("Шаблон",   Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.Шаблон);
	СтруктураУдаления.Вставить("Реквизит", Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.Реквизит);
	СтруктураУдаления.Вставить("ЗначениеРеквизита", Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.ЗначениеРеквизита);
	
	СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураУдаления);
	 
	Для Каждого Стр из СтрокиПоиска Цикл
		АвтозагрузкаРеквизитовОбщая.Удалить(Стр);	
	КонецЦикла;
	СохранитьШаблоныЕслиКаталогиДоступны();
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеКМпоУпаковкеКотораяИмеетсяВБазе

Процедура ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма = Неопределено, Модуь_ШтрихкодированиеИС)
	
	//Если ДанныеПоШтрихкодам.ТребуетсяСопоставление Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, Неопределено, ПараметрыСканирования);
	//ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если Не Модуь_ШтрихкодированиеИС.ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	Модуь_ШтрихкодированиеИС.ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуь_ШтрихкодированиеИС);
	ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуь_ШтрихкодированиеИС);
	Модуь_ШтрихкодированиеИС.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Или ДанныеПоШтрихкодам.ТребуетсяСопоставление Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модуь_ШтрихкодированиеИС.ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляСохраненияКодовМаркировки = Новый Соответствие;
	
	ОтметитьНовыеШтрихкодыУпаковок(ДанныеПоШтрихкодам, СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	
	ОбновитьШтрихкодыУпаковок(СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования, Модуь_ШтрихкодированиеИС);
	ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма, Модуь_ШтрихкодированиеИС);
	
	ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

// Формирует данные по маркируемой продукции, информации о которой нет в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуь_ШтрихкодированиеИС)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И Модуь_ШтрихкодированиеИС.ПрисутствуетАлкогольнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если Модуь_ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		КонецЕсли;
		
		Если Модуь_ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеПоШтрихкодам.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет структуру "Данные по штрихкодам" информацией по неизвестным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуь_ШтрихкодированиеИС)
	
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");

	ЕстьНеизвестныеШтрихкодыУпаковок = Ложь;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки)
			И Не СтрокаДанных.Идентифицирован Тогда
			ЕстьНеизвестныеШтрихкодыУпаковок = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНеизвестныеШтрихкодыУпаковок Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если Модуь_ШтрихкодированиеИС.ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		Модуь_ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьНовыеШтрихкодыУпаковок(ДанныеПоШтрихкодам, ЭлементыДляИзменения)
	
	Для Каждого КодМаркировки Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если Не ЗначениеЗаполнено(КодМаркировки.ШтрихкодУпаковки) Тогда
			Изменения = Новый Массив;
			Изменения.Добавить("Номенклатура");
			Изменения.Добавить("Характеристика");
			Изменения.Добавить("Серия");
			Изменения.Добавить("Количество");
			Изменения.Добавить("Штрихкод");
			Изменения.Добавить("ТипШтрихкода");
			Изменения.Добавить("ТипУпаковки");
			ОтметитьКОбновлению(ЭлементыДляИзменения, КодМаркировки, Изменения);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

// Заполняет выбранные номенклатуру, характеристику, серию в случае потокового сканирования (GTIN-уточнение-автовыбор КМ)
//   или при сканировании остаточного КМ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеУточнения") Тогда
		ДанныеУточнения = ПараметрыСканирования.ДополнительныеПараметры.ДанныеУточнения;
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если СтрокаДанных.ТребуетсяСопоставление 
				И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			
			ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеУточнения);
			
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Приводит данные по штрихкодам в соответствие данным ранее указанными пользователем.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Модуь_ШтрихкодированиеИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");

	Если ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Модуь_ШтрихкодированиеИСКлиентСервер.ТребуетсяСброситьСохраненныйВыбор(ДанныеСохраненногоВыбора, СтрокаДанных) Тогда
			Возврат;
		КонецЕсли;
	
		ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеСохраненногоВыбора);
		Если СтрокаДанных.МаркируемаяПродукция Тогда
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьШтрихкодыУпаковок(ЭлементыДляИзменения, ПараметрыСканирования, Модуь_ШтрихкодированиеИС)
	
	Для Каждого КлючИЗначение Из ЭлементыДляИзменения Цикл
		Модуь_ШтрихкодированиеИС.ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(
			КлючИЗначение.Ключ, КлючИЗначение.Значение, ПараметрыСканирования);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные штрихкода по документу основанию.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Форма - ФормаКлиентскогоПриложения, Неопределено - форма-источник вызова
Процедура ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма, Модуь_ШтрихкодированиеИС)
	
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Модуь_ИнтеграцияИС = ОбщийМодуль("ИнтеграцияИС");

	Модуь_ШтрихкодированиеИС.СформироватьДанныеДокументаОснования(ПараметрыСканирования);
	ДанныеДокументаОснования = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	КонецЕсли;
	
	ДанныеДокумента = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
	ИначеЕсли Форма <> Неопределено Тогда
		ДанныеДокумента = ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования);
	КонецЕсли;
	
	ОбновленныеКодыМаркировки = Новый Массив;
	ОбновленаСпецификаИСМП = Ложь;
	
	ОбновлятьСерии = Модуь_ИнтеграцияИС.СерииИспользуются();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		СтрокаОбновлена = Ложь;
		
		Если Модуь_ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП().Найти(СтрокаДанных.ВидПродукции)<>Неопределено Тогда
			Если МодульСпецификиИСМП().ЗаполнитьПоДокументуИОснованию(СтрокаДанных, ПараметрыСканирования, ДанныеДокумента) Тогда
				СтрокаОбновлена = Истина;
				ОбновленаСпецификаИСМП = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновлятьСерии И Не СтрокаОбновлена Тогда
			Если ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаДанных, ДанныеДокументаОснования, ДанныеДокумента) Тогда
				СтрокаОбновлена = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОбновлена
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И ЗначениеЗаполнено(СтрокаДанных.Серия) Тогда
			
			НовыеРеквизиты = Новый Структура("Серия", СтрокаДанных.Серия);
			Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
				СтрокаДанных.ШтрихкодУпаковки, НовыеРеквизиты);
		КонецЕсли;
		
		Если СтрокаОбновлена Тогда
			ОбновленныеКодыМаркировки.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	//Обновление данных дерева
	Если ОбновленаСпецификаИСМП Тогда
		МодульСпецификиИСМП().ОбновитьДеревоУпаковок(ДанныеПоШтрихкодам, ОбновленныеКодыМаркировки);
	КонецЕсли;
	
КонецПроцедуры

// Помещает дерево упаковок во временное хранилище. Адрес дерева упаковок помещает в каждые данные обработанных штрихкодов.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, Идентификатор);
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.АдресДереваУпаковок = АдресДереваУпаковок;
		
	КонецЦикла;
	
КонецПроцедуры

//Определяет по контексту возможность работы с табаком.
//
//Параметры:
//   Контекст - Структура, ПеречислениеСсылка.ВидыПродукцииИС -
//     контекст (параметры сканирования или вид продукции), по которому будет определяться возможность работы с табачной продукцией.
//Возвращаемое значение:
//   Булево - Истина, если для контекста разрешена работа с табачной продукцией.
//
Функция ДопустимаТабачнаяПродукция(Контекст)
	
	Модуь_ШтрихкодированиеИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");

	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Табак;
	КонецЕсли;
	
	Возврат Модуь_ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Табак);
	
КонецФункции

Процедура ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства)
	Изменения = ЭлементыДляИзменения.Получить(СтрокаДанных);
	Если Изменения = Неопределено Тогда
		Изменения = Новый Массив;
	КонецЕсли;
	Для Каждого ИмяРеквизита Из ИзмененныеСвойства Цикл
		Изменения.Добавить(ИмяРеквизита);
	КонецЦикла;
	ЭлементыДляИзменения.Вставить(СтрокаДанных, Изменения);
КонецПроцедуры

Функция МодульСпецификиИСМП()
	Возврат ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
КонецФункции

Функция ЗаполнитьСохраненнымВыборомДанныеШтрихкода(ДанныеШтрихкода, СохраненныйВыбор)
	
	ИзмененныеСвойства = Новый Массив;
	
	Для Каждого КлючЗначение Из СохраненныйВыбор Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, КлючЗначение.Ключ)
			И ЗначениеЗаполнено(КлючЗначение.Значение)
			И Не ЗначениеЗаполнено(ДанныеШтрихкода[КлючЗначение.Ключ]) Тогда
			
			ДанныеШтрихкода[КлючЗначение.Ключ] = КлючЗначение.Значение;
			ИзмененныеСвойства.Добавить(КлючЗначение.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзмененныеСвойства;
	
КонецФункции

// Получает данные документа из формы в которой происходит сканирование. 
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма данные таблицы "Товары" требуется получить.
//   ПараметрыСканирования - Структура, Неопределено - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//
// Возвращаемое значение:
//   Неопределено, ТаблицаЗначений, ДанныеФормыКоллекция - см. ИнициализицияТаблицыДанныхДокумента.
//
Функция ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования, ПоместитьВоВременноеХранилище = Ложь)
	
	Модуь_ШтрихкодированиеИСПереопределяемый = ОбщийМодуль("ШтрихкодированиеИСПереопределяемый");
	
	СтандартнаяОбработка = Истина;
	ДанныеДокумента = Неопределено;
	Модуь_ШтрихкодированиеИСПереопределяемый.ПриФормированииДанныхТабличнойЧастиТовары(
		Форма, ДанныеДокумента, ?(ПоместитьВоВременноеХранилище, ПараметрыСканирования, Неопределено), СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Обработка") Тогда //формы проверки и подбора
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПодобраннаяМаркируемаяПродукция") Тогда
				Возврат Форма.ПодобраннаяМаркируемаяПродукция;
			КонецЕсли;
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Товары")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Номенклатура")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Характеристика")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Серия") Тогда
					Возврат Форма.Объект.Товары;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ДанныеДокумента;
	
КонецФункции

Функция ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаСКодомМаркировки, ДанныеДокументаОснования, ДанныеДокумента)
	
	Если Не ЗначениеЗаполнено(СтрокаСКодомМаркировки.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(СтрокаСКодомМаркировки.Серия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",
		СтрокаСКодомМаркировки.Номенклатура, СтрокаСКодомМаркировки.Характеристика);
	
	НайденныеСтроки = Новый Массив;
	Если ДанныеДокументаОснования <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	Если НайденныеСтроки.Количество() <> 1 И ДанныеДокумента <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокумента.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	//Заполнение единственным вариантом из документа-основания или из документа
	Если НайденныеСтроки.Количество() = 1 Тогда
		СтрокаСКодомМаркировки.Серия = НайденныеСтроки[0].Серия;
		Возврат Истина;
	КонецЕсли;
	
	//Заполнение серией для которой проверка не завершена
	Если ДанныеДокумента <> Неопределено И НайденныеСтроки.Количество() Тогда
		ПроверятьИзКолонкиСтатусПроверки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "СтатусПроверкиГосИС");
		ПроверятьИзКолонкиКоличествоПодобрано = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "КоличествоПодобрано");
		Если Не(ПроверятьИзКолонкиСтатусПроверки Или ПроверятьИзКолонкиКоличествоПодобрано) Тогда
			Возврат Ложь;
		КонецЕсли;
		НайденоСерий = 0;
		Серия = Неопределено;
		Для Каждого ВариантВыбора Из НайденныеСтроки Цикл
			Если ПроверятьИзКолонкиСтатусПроверки И ВариантВыбора.СтатусПроверкиГосИС <> 1 Тогда
				Продолжить;
			ИначеЕсли ПроверятьИзКолонкиКоличествоПодобрано И ВариантВыбора.Количество <= ВариантВыбора.КоличествоПодобрано Тогда
				Продолжить;
			КонецЕсли;
			Если НайденоСерий = 0 Тогда
				НайденоСерий = 1;
				Серия = ВариантВыбора.Серия;
			Иначе
				НайденоСерий = НайденоСерий + ?(Серия = ВариантВыбора.Серия, 0, 1);
			КонецЕсли;
		КонецЦикла;
		Если НайденоСерий = 1 Тогда
			СтрокаСКодомМаркировки.Серия = Серия;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции



#КонецОбласти

//Формирование qr кода
&НаКлиенте
Процедура СформироватьQRкод(Команда)
	
	Порт        		= Формат(FTPПорт, "ЧГ=0");
	ОчищатьСправочники 	= 1;
	
	//OfflineSettings;1;1;192.168.1.71;21;tsduser;123;1 - первые 2 параметра: это разрешить повторную выгрузкку документа и включать в путь серийный номер
	
	QRТекст 	= "OfflineSettings;" + "1;1;" + FTPАдрес + ";" + Порт + ";" + FTPЛогин + ";" + FTPПароль + ";" + ОчищатьСправочники;	
	
	ВывестиQRКод(QRТекст);
	
КонецПроцедуры

Функция ВывестиQRКод(ДанныеПечати)
	
	QRСтрока = ДанныеПечати;
	
	Если Не ПустаяСтрока(QRСтрока) Тогда
		
		Модуль_ГенерацияШтрихкодаВызовСервера = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ГенерацияШтрихкодаВызовСервера");
		ДанныеQRКода = Модуль_ГенерацияШтрихкодаВызовСервера.ДанныеQRКода(QRСтрока, 0, 190);
		
		Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			
			 КартинкаQRКода = Новый Картинка(ДанныеQRКода);
			 Адрес = ПоместитьВоВременноеХранилище(КартинкаQRКода);
			 ШтрихкодQR = Адрес;
	
		Иначе
			Шаблон = Нстр("ru = 'Не удалось сформировать QR-код для документа %1.
				|Технические подробности см. в журнале регистрации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КартинкаQRКода;
	
КонецФункции

&НаСервере
Функция УзнатьIP()
	strComputer = ".";
	objWMIService = ПолучитьCOMОбъект("winmgmts:\\" + strComputer + "\root\CIMV2");
	colItems = objWMIService.ExecQuery("Select * from Win32_NetworkAdapterConfiguration Where IPEnabled=TRUE",,48);
	Для Каждого objItem Из colItems Цикл
		Для Каждого Стр Из objItem.IPAddress Цикл
			Возврат(Стр);
		КонецЦикла;
	КонецЦикла;	
КонецФункции

&НаКлиенте
Процедура ГруппаЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "ГруппаНастройки" Тогда
		ЗаполнитьЗначенияПоУмолчаниюПоНастройкеОбмена();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчаниюПоНастройкеОбмена()
	 
	СтруктураЗначенийПоУмолчанию = Новый Структура;
	СтруктураЗначенийПоУмолчанию.Вставить("FTPАдрес"		, "");
	СтруктураЗначенийПоУмолчанию.Вставить("FTPПорт"			, 21);
	СтруктураЗначенийПоУмолчанию.Вставить("FTPЛогин"		, "tsduser");
	СтруктураЗначенийПоУмолчанию.Вставить("FTPПароль"		, "123");
	
	Для каждого СтрокаНастройки Из СтруктураЗначенийПоУмолчанию Цикл
		
		ИмяРеквизита 	= СтрокаНастройки.Ключ;
		
		Если Не ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизита]) Тогда
			Если ИмяРеквизита = "FTPАдрес" Тогда
				Попытка ЭтаФорма[ИмяРеквизита] = УзнатьIP() Исключение ЭтаФорма[ИмяРеквизита] = "" КонецПопытки; 	
			Иначе 	
				ЭтаФорма[ИмяРеквизита] = СтрокаНастройки.Значение;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры


КаталогFTPДоступен = Ложь;
