///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ  
&НаКлиенте
Перем ИДТСД; //Идентификационный номер терминала сбора данных

&НаКлиенте
Перем РП;

&НаКлиенте
Перем КаталогFTPДоступен;

&НаКлиенте
Функция DM_ПолучитьРазделительПути()
	
	РазделительПути = "\";  //Windows
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	
	Если ЭтоLinuxКлиент Тогда
		РазделительПути = "/"; // Linux
	КонецЕсли;	
	
	Возврат РазделительПути;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ИспользоватьFTP = Ложь;
		Элементы.ИспользоватьFTP.Доступность = Ложь;
	#КонецЕсли
	
	РП = DM_ПолучитьРазделительПути();
	Если ИспользоватьFTP = Ложь Тогда
		Элементы.FTPПароль.Видимость = Ложь;
		Элементы.FTPАдрес.Видимость = Ложь;
		Элементы.FTPЛогин.Видимость = Ложь;
		Элементы.FTPПорт.Видимость = Ложь;
		Элементы.ПроверитьСвязь.Видимость = Ложь;
	ИначеЕсли ИспользоватьFTP = Истина Тогда
		Элементы.лКаталогОбмена.Видимость = Ложь;
	КонецЕсли;

	#Если ВебКлиент Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьКомпонентуЗавершение",ЭтаФорма);
			НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		Иначе
			ПрочитатьШаблоны();
		КонецЕсли;
				
	#Иначе

		Попытка
			ПрочитатьШаблоны();
		Исключение
		КонецПопытки;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиАвтозагрузки();
	Попытка
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_Автозагрузки", ЭтаФорма);
		ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_Autozagruzka.tab");
		ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	Исключение 
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_Автозагрузки(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияАвтозагрузки", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_Autozagruzka.tab", КодировкаТекста.UTF8);		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияАвтозагрузки(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеАвтозагрузки(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьДанныеАвтозагрузки(Данные)
	
	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		АвтозагрузкаРеквизитовОбщая.Загрузить(ДанныеТЗ);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПрочитатьШаблоны()
	
	ПрочитатьНастройкиШаблонов();
	ПрочитатьНастройкиДопШагов();						    
	ПрочитатьНастройкиАвтозагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиШаблонов()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_Шаблонов", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_TempLates.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_Шаблонов(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблона", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_TempLates.tab", КодировкаТекста.UTF8);		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияШаблона(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеШаблоны(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	лКаталогОбменаПриИзменении(СписокТСД,Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьНастройкиДопШагов()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_ДопШагов", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_UserBooks.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_ДопШагов(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияДопШагов", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_UserBooks.tab", КодировкаТекста.UTF8);		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияДопШагов(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеДополнительныхФорм(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуЗавершение(ДополнительныеПараметры) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не удалось подключить расширение работы с файлами.
		|Использование обработки в веб режиме не возможно. Перезапустите обработку.'"));
	Иначе
		ПрочитатьШаблоны();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельНовыеТоварыВыделитьВсе(Кнопка)
	Для Каждого лСтрТаб из НовыеТоварыШтрихкоды цикл
		лСтрТаб.Обрабатывать=Истина;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельНовыеТоварыСнятьВыделитьВсе(Кнопка)
	Для Каждого лСтрТаб из НовыеТоварыШтрихкоды цикл
		лСтрТаб.Обрабатывать=Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если лКаталогОбмена<>"" тогда
		лКаталогОбмена=лКаталогОбмена+?(прав(лКаталогОбмена,1)=РП,"",РП);
	КонецЕсли;
	Если лКаталогНастроек<>"" тогда
		лКаталогНастроек=лКаталогНастроек+?(прав(лКаталогНастроек,1)=РП,"",РП);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПослеВосстановленияЗначений" формы
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура ПослеВосстановленияЗначений()
	лКаталогОбменаПриИзменении(Элементы.лКаталогОбмена);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура лКаталогОбменаПриИзменении(Элемент,ПриОткрытии=Ложь)
	
    СписокТСД.Очистить();	
	
	Если ИспользоватьFTP тогда
		КаталогFTPПриИзменении(ПриОткрытии);
		Если КаталогFTPДоступен тогда
			ЗаполнитьСписокФайлов();
		КонецЕсли;	
	Иначе
		Если лКаталогОбмена<>"" тогда
			лКаталогОбмена=СокрЛП(лКаталогОбмена)+?(пРАВ(СокрЛП(лКаталогОбмена),1)=РП,"",РП); 
		КонецЕсли;
		СписокТСД.Очистить();
		
		ПараметрыВыгрузки = Новый Структура();
		ПараметрыВыгрузки.Вставить("КаталогОбмена",лКаталогОбмена + "DataMobile" +?(пРАВ(СокрЛП(лКаталогОбмена + "DataMobile"),1)=РП,"",РП));
		
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачалоПоискаКаталоговОбмена_Завершение", ЭтаФорма, ПараметрыВыгрузки), лКаталогОбмена+"DataMobile","*");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачалоПоискаКаталоговОбмена_Завершение(НайденныеФайлы, ДопПараметры) Экспорт
	
	Если НайденныеФайлы.Количество()> 0 Тогда
		
		ДопПараметры.Вставить("МассивФайлов",НайденныеФайлы);
		ДопПараметры.Вставить("КоличествоФайлов",НайденныеФайлы.Количество());
		ДопПараметры.Вставить("ТекущийФайл",1);
		ДопПараметры.Вставить("ПорядковыйНомерТСД",1);
		ДопПараметры.Вставить("ТекущееИмяФайла",НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Имя);
		ДопПараметры.Вставить("ТекущийПутьФайла",НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Путь);
		ФайлТСД = НайденныеФайлы[ДопПараметры.ТекущийФайл-1];

		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоПроверкиЭтоКаталогКаталоговОбмена_Завершение",ЭтаФорма,ДопПараметры);
		ФайлТСД.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПроверкиЭтоКаталогКаталоговОбмена_Завершение(ЭтоКаталог,ДопПараметры) Экспорт

	Если ЭтоКаталог Тогда
		Если ДопПараметры.ТекущийПутьФайла = ДопПараметры.КаталогОбмена Тогда
			Если НРег(ДопПараметры.ТекущееИмяФайла)="base" 
				или НРег(ДопПараметры.ТекущееИмяФайла)="prnmask" 
				или НРег(ДопПараметры.ТекущееИмяФайла)="sounds" 
				или НРег(ДопПараметры.ТекущееИмяФайла)="dmphotos" 
				или НРег(ДопПараметры.ТекущееИмяФайла)="dmimages"
				или НРег(ДопПараметры.ТекущееИмяФайла)="errors"
				или НРег(ДопПараметры.ТекущееИмяФайла)="in"
				или НРег(ДопПараметры.ТекущееИмяФайла)="out"
				или НРег(ДопПараметры.ТекущееИмяФайла)="log"
				или НРег(ДопПараметры.ТекущееИмяФайла)="appupdate"
				или НРег(ДопПараметры.ТекущееИмяФайла)="others" тогда
				
			Иначе
				
				СтрокаТСД=СписокТСД.Добавить();
				СтрокаТСД.ТСД=ДопПараметры.ТекущееИмяФайла;
				СтрокаТСД.Номерстроки=ДопПараметры.ПорядковыйНомерТСД;
				
				ДопПараметры.ПорядковыйНомерТСД = ДопПараметры.ПорядковыйНомерТСД + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//переход к следующему файлу
	Если ДопПараметры.ТекущийФайл<ДопПараметры.КоличествоФайлов Тогда
		ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
		ФайлТСД = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоПроверкиЭтоКаталогКаталоговОбмена_Завершение",ЭтаФорма,ДопПараметры);
		ФайлТСД.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
		
	Иначе
		Если СписокТСД.Количество()>0 Тогда
			
			ПрочитатьНастройкиТСД();
			
			Элементы.СписокТСД.ТекущаяСтрока=0;
			
			Если СписокТСД.Количество() > 0 Тогда
				Элементы.СписокТСД.ТекущаяСтрока=0;
				ИДТСД = СокрЛП(СписокТСД[0].ТСД) +РП;
			КонецЕсли;
							
		КонецЕсли;
		
		Если СписокТСД.Количество() = 0 Тогда
			ЗаполнитьСписокФайлов();	
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
	
	ДопПараметры.ТекущийФайл = ДопПараметры.ТекущийФайл+1;
	ДопПараметры.ТекущееИмяФайла = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1].Имя;						
	ДопПараметры.ТекущийПутьФайла = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1].Путь;

КонецПроцедуры

&НаКлиенте
Процедура лКаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Новый ОписаниеОповещения("лКаталогОбменаНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог, Элемент", Диалог, Элемент)));
КонецПроцедуры

&НаКлиенте
Процедура лКаталогОбменаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		лКаталогОбмена=Диалог.Каталог;
	КонецЕсли;	
	лКаталогОбмена=СокрЛП(лКаталогОбмена)+?(пРАВ(СокрЛП(лКаталогОбмена),1)=РП,"",РП);
	лКаталогОбменаПриИзменении(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура лКаталогНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Новый ОписаниеОповещения("лКаталогНастроекНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
КонецПроцедуры

&НаКлиенте
Процедура лКаталогНастроекНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
		
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		лКаталогНастроек=Диалог.Каталог+РП;
	КонецЕсли;
	ПрочитатьШаблоны();

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельНовыеТоварыУдалить(Кнопка)
	
	//Если вопрос("Отмеченные товары/штрихкоды будут удалены. Продолжить? ", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
		УдалитьНовыеТоварыШтрихкоды()		
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНовыеТоварыШтрихкоды()
	Для каждого СтрокаТаблицы ИЗ НовыеТоварыШтрихкоды Цикл
		
		Если СтрокаТаблицы.Обрабатывать Тогда
			
			Если ИспользоватьFTP тогда			
				FTP = ПодключитьсяКFTPСерверу();		
				FTP.УстановитьТекущийКаталог("/");
				
				Если FTP.НайтиФайлы(СтрокаТаблицы.ИмяФайлаТовара).Количество() > 0 Тогда
					тхт=Новый ТекстовыйДокумент();
					ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
					FTP.Получить(СтрокаТаблицы.ИмяФайлаТовара, ВременныйФайл);
					тхт.Прочитать(ВременныйФайл);	
					УдалитьФайлы(ВременныйФайл);
					Для Н = 1 По тхт.КоличествоСтрок() Цикл 
						ТекущаяСтрока = тхт.ПолучитьСтроку(Н);
						СтрокаПоиска =  Найти(ТекущаяСтрока, СтрокаТаблицы.НовоеНаименование);
						Если СтрокаПоиска > 0 Тогда
							тхт.УдалитьСтроку(Н);
						КонецЕсли;	
					КонецЦикла;
					
					Если тхт.КоличествоСтрок() = 0 Тогда
						FTP.Удалить(СтрокаТаблицы.ИмяФайлаТовара);
					Иначе
						ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
						тхт.Записать(ВременныйФайл);		
						FTP.Записать(ВременныйФайл, СтрокаТаблицы.ИмяФайлаТовара);
						УдалитьФайлы(ВременныйФайл);
					КонецЕсли;
				КонецЕсли;
				
				Если FTP.НайтиФайлы(СтрокаТаблицы.ИмяФайлаШтрихкода).Количество() > 0 Тогда
					тхт=Новый ТекстовыйДокумент();
					ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
					FTP.Получить(СтрокаТаблицы.ИмяФайлаШтрихкода, ВременныйФайл);
					тхт.Прочитать(ВременныйФайл);	
					УдалитьФайлы(ВременныйФайл);
					Для Н = 1 По тхт.КоличествоСтрок() Цикл 
						ТекущаяСтрока = тхт.ПолучитьСтроку(Н);
						СтрокаПоиска =  Найти(ТекущаяСтрока, СтрокаТаблицы.Штрихкод);
						Если СтрокаПоиска > 0 Тогда
							тхт.УдалитьСтроку(Н);
						КонецЕсли;	
					КонецЦикла;
					
					Если тхт.КоличествоСтрок() = 0 Тогда
						FTP.Удалить(СтрокаТаблицы.ИмяФайлаШтрихкода);
					Иначе
						ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
						тхт.Записать(ВременныйФайл);		
						FTP.Записать(ВременныйФайл, СтрокаТаблицы.ИмяФайлаШтрихкода);
						УдалитьФайлы(ВременныйФайл);
					КонецЕсли;
				КонецЕсли;	
			Конецесли;	
		КонецЕсли;	
	КонецЦикла;
	
	Если Не ИспользоватьFTP Тогда
		П = Новый Структура();
		П.Вставить("Обрабатывать", Истина);
		МассивСтрок = НовыеТоварыШтрихкоды.НайтиСтроки(П);
		ПривязатьУдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(МассивСтрок, Новый Структура());
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокТоваровШтрихкодов(ИДТСД);
	
Конецпроцедуры

&НаКлиенте
Процедура ПривязатьУдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(НайденныеФайлы, ДопПараметры)
	
	Если НайденныеФайлы.Количество()> 0 Тогда
		
		тхт=Новый ТекстовыйДокумент();
		тхтТовар=Новый ТекстовыйДокумент();
		ДопПараметры.Вставить("тхт",тхт);
		ДопПараметры.Вставить("тхтТовар",тхтТовар);
		ДопПараметры.Вставить("МассивФайлов"		,НайденныеФайлы);
		ДопПараметры.Вставить("КоличествоФайлов"	,НайденныеФайлы.Количество());
		ДопПараметры.Вставить("ТекущийФайл"			,1);
		Файл = НайденныеФайлы[ДопПараметры.ТекущийФайл-1];
		ДопПараметры.Вставить("ИмяФайлаШтрихкода"	, Файл.ИмяФайлаШтрихкода);
		ДопПараметры.Вставить("Штрихкод"			, Файл.Штрихкод);
		ДопПараметры.Вставить("ИмяФайлаТовара"		, Файл.ИмяФайлаТовара);
		ДопПараметры.Вставить("НовоеНаименование"	, Файл.НовоеНаименование);
		
		ЗапуститьОповещенияЧтенияФайлов(Файл, ДопПараметры);
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОповещенияЧтенияФайлов(Файл, ДопПараметры)
	
	Если Файл.ИмяФайлаШтрихкода <> "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры);
		ДопПараметры.тхт.НачатьЧтение(ОписаниеОповещения, Файл.ИмяФайлаШтрихкода);		
	Иначе 
		Если Файл.ИмяФайлаТовара <> "" Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры);
			ДопПараметры.тхтТовар.НачатьЧтение(ОписаниеОповещения, Файл.ИмяФайлаТовара); 		
		КонецЕсли; 		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтениеФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(ДопПараметры) Экспорт
	 	
	тхт = ДопПараметры.тхт;	
	
	Если ДопПараметры.ИмяФайлаШтрихкода <> "" Тогда
		
		Для Н = 1 По Тхт.КоличествоСтрок() Цикл 
			ТекущаяСтрока = Тхт.ПолучитьСтроку(Н);
			СтрокаПоиска =  Найти(ТекущаяСтрока, ДопПараметры.Штрихкод);
			Если СтрокаПоиска > 0 Тогда
				Тхт.УдалитьСтроку(Н);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ТекФайл = Тхт.ПолучитьТекст();
	
	Если ПустаяСтрока(СокрЛП(ТекФайл)) Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("НачатьУдалениеФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры), ДопПараметры.ИмяФайлаШтрихкода);
	Иначе
		ДопПараметры.Вставить("тхт", тхт);
	
		ОписаниеОповещения = Новый ОписаниеОповещения ("НачатьЗаписьФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры);
		ТХт.НачатьЗапись(ОписаниеОповещения, ДопПараметры.ИмяФайлаШтрихкода);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(Результат, ДопПараметры) Экспорт
	
	Если Результат Тогда	
		ПереходКСледующемуФайлу(ДопПараметры);		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКСледующемуФайлу(ДопПараметры)

	Если (ДопПараметры.ИмяФайлаТовара <> "" И ДопПараметры.ИмяФайлаШтрихкода <> "") Тогда
		Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		Файл.ИмяФайлаШтрихкода = "";
		ДопПараметры.ИмяФайлаШтрихкода = "";
		ЗапуститьОповещенияЧтенияФайлов(Файл, ДопПараметры);
		Возврат;
	КонецЕсли; 
	
	Если ДопПараметры.ТекущийФайл < ДопПараметры.КоличествоФайлов Тогда
		тхт=Новый ТекстовыйДокумент();
		тхтТовар=Новый ТекстовыйДокумент();
		ДопПараметры.Вставить("тхт",тхт);
		ДопПараметры.Вставить("тхтТовар",тхтТовар);
		ДопПараметры.ТекущийФайл = ДопПараметры.ТекущийФайл+1;						
		ДопПараметры.ИмяФайлаШтрихкода 	= ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1].ИмяФайлаШтрихкода;
		ДопПараметры.ИмяФайлаТовара 	= ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1].ИмяФайлаТовара;
		Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		ДопПараметры.Вставить("ИмяФайлаШтрихкода"	, Файл.ИмяФайлаШтрихкода);
		ДопПараметры.Вставить("Штрихкод"			, Файл.Штрихкод);
		ДопПараметры.Вставить("ИмяФайлаТовара"		, Файл.ИмяФайлаТовара);
		ДопПараметры.Вставить("НовоеНаименование"	, Файл.НовоеНаименование);
		
		ЗапуститьОповещенияЧтенияФайлов(Файл, ДопПараметры);
	Иначе
		
		Если(ДопПараметры.ИмяФайлаТовара = "" Или ДопПараметры.ИмяФайлаШтрихкода = "") Тогда
			ЗаполнитьСписокТоваровШтрихкодов(ИДТСД);		
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтениеФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(ДопПараметры) Экспорт
	 	
	тхтТовар = ДопПараметры.тхтТовар;	
	
	Если ДопПараметры.ИмяФайлаТовара <> "" Тогда
		
		Для Н = 1 По тхтТовар.КоличествоСтрок() Цикл 
			ТекущаяСтрока = тхтТовар.ПолучитьСтроку(Н);
			СтрокаПоиска =  Найти(ТекущаяСтрока, ДопПараметры.НовоеНаименование);
			Если СтрокаПоиска > 0 Тогда
				тхтТовар.УдалитьСтроку(Н);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ТекФайл = тхтТовар.ПолучитьТекст();
	
	Если ПустаяСтрока(СокрЛП(ТекФайл)) Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("НачатьУдалениеФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры), ДопПараметры.ИмяФайлаТовара);
	Иначе
		ДопПараметры.Вставить("тхтТовар", тхтТовар);
	
		ОписаниеОповещения = Новый ОписаниеОповещения ("НачатьЗаписьФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры);
		тхтТовар.НачатьЗапись(ОписаниеОповещения, ДопПараметры.ИмяФайлаТовара);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(Результат, ДопПараметры) Экспорт
	
	Если Результат Тогда
		ПереходКСледующемуФайлу(ДопПараметры);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУдалениеФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(ДопПараметры) Экспорт
	
	ПереходКСледующемуФайлу(ДопПараметры);		
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУдалениеФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(ДопПараметры) Экспорт
	
	ПереходКСледующемуФайлу(ДопПараметры);		
	
КонецПроцедуры

&НаКлиенте
Процедура лКаталогНастроекПриИзменении(Элемент)
	Если лКаталогОбмена<>"" тогда
		лКаталогНастроек=СокрЛП(лКаталогНастроек)+?(пРАВ(СокрЛП(лКаталогНастроек),1)=РП,"",РП);
	КонецЕсли;
	ПрочитатьШаблоны();
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода "лКаталогНастроек"
//
// Параметры:
//  Элемент - <ПолеВвода>
//			- Поле ввода ("лКаталогНастроек"), с которым связано данное событие.
//
&НаКлиенте
Процедура лКаталогНастроекОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПрочитатьШаблоны();
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "СписокТСД"
//
// Параметры:
//  Элемент - <ТабличноеПоле>
//          - Табличное поле ("СписокТСД"), с которым связано данное событие.
//
&НаКлиенте
Процедура СписокТСДПриАктивизацииСтроки(Элемент)
	
	ТД=Элемент.ТекущиеДанные;
	Если ТД<>Неопределено тогда
		ИДТСД=ТД.ТСД+РП;
	КонецЕсли;
	
	Если ИспользоватьFTP тогда
		Если КаталогFTPДоступен тогда
			ЗаполнитьСписокФайлов();
		КонецЕсли;	
	Иначе
		ЗаполнитьСписокФайлов();
	КонецЕсли;

КонецПроцедуры


// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "СписокФайлов"
//
// Параметры:
//  Элемент          – <ТабличноеПоле>
//                   - Табличное поле ("СписокФайлов"), с которым связано данное событие.
//
//  ОформлениеСтроки – <ОформлениеСтроки> 
//                   – содержит оформление строки (шрифт, цвет) 
//                     и коллекцию оформлений ячеек
//
//  ДанныеСтроки     - <СтрокаТаблицыЗначений>
//                   - данные выводимой строки. Параметр соответствует свойству 
//                     "ТекущиеДанные" для выводимой строки
//
&НаКлиенте
Процедура СписокФайловПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	лЗначение=Элемент.Колонки.ТабличнуюЧастьПриЗагрузке.ЭлементУправления.СписокВыбора[ДанныеСтроки.ТабличнуюЧастьПриЗагрузке];
	ОформлениеСтроки.Ячейки.ТабличнуюЧастьПриЗагрузке.Текст=лЗначение.Представление;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СписокФайловДокумент"
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода ("СписокФайловДокумент"), с которым связано данное событие.
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
&НаКлиенте
Процедура СписокФайловДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ТекущиеДанные=Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекущиеДанные.Документ=Неопределено Тогда
		СтандартнаяОбработка=Истина;
		Возврат;
	КонецЕсли;
	
	//Ссылка на конкретный документ 1С
	Если ТипЗнч(ТекущиеДанные.Документ)<>Тип("строка") Тогда     
		Имя=ОпределитьТипДока(ТекущиеДанные.Документ);
		Если НЕ Имя=Неопределено тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("СписокФайловДокументНачалоВыбораЗавершение", ЭтаФорма);		
			ОткрытьФорму("Документ."+Имя+".ФормаВыбора",, ЭтаФорма,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			СтандартнаяОбработка=Истина;
			Возврат;
		КонецЕсли;	

	//Шаблон документа 1С
	Иначе	
		
		Если СокрЛП(ТекущиеДанные.Документ)="" Тогда
			СтандартнаяОбработка=Истина;
			Возврат;
		КонецЕсли;	
		
		Имя=ОпределитьТипДока(ТекущиеДанные.Документ);
		Если Имя=Неопределено Тогда
			СтандартнаяОбработка=Истина;
			Возврат;
		КонецЕсли;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокФайловДокументНачалоВыбораЗавершение", ЭтаФорма);		
		ОткрытьФорму("Документ."+Имя+".ФормаВыбора",, ЭтаФорма,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловДокументНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат<>Неопределено Тогда
		ТекущиеДанные=Элементы.СписокФайлов.ТекущиеДанные;
		Если ТекущиеДанные<>Неопределено Тогда
			ТекущиеДанные.Документ = Результат;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТипДока (ВыбранноеЗначение)
	
	//Ссылка на конкретный документ 1С
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("строка") тогда
		Попытка
			Возврат ВыбранноеЗначение.Метаданные().Имя;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	//Шаблон документа 1С	
	Иначе	
		ТипДокумента = Метаданные.Документы.Найти(ВыбранноеЗначение);
		Если ТипДокумента<>Неопределено Тогда
			Возврат ТипДокумента.Имя;
		Иначе	
			Возврат Неопределено;			
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет таблицу списка файлов
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура ЗаполнитьСписокФайлов()
	СписокФайлов.Очистить();

	Если ИспользоватьFTP тогда
		FTP = ПодключитьсяКFTPСерверу();		
		FTP.УстановитьТекущийКаталог("/");
		ИмяКаталогаOUT="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"out/";
		Массив = FTP.НайтиФайлы(
		ИмяКаталогаOUT, // ищём в корневом каталоге
		"*.dmU" // любые файлы (здесь можно задать маску)
		);
		ОбходМассиваФайловFTP(Массив, FTP);
	Иначе	
		
		Если лКаталогОбмена<>"" тогда
			лКаталогОбмена=лКаталогОбмена+?(прав(лКаталогОбмена,1)=РП,"",РП);
		КонецЕсли;	
		
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачатьПоискФайлов_ЗаполнитьСписокФайлов", ЭтаФорма, Новый Структура()), лКаталогОбмена+"DataMobile"+РП+ИДТСД+"out"+РП,"*.dmU"); //получение файлов из ТСД (расширение dmU)
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбходМассиваФайловFTP(Массив, FTP)
	
	Для каждого фл из Массив Цикл
		Если Найти(фл.ПолноеИмя,"arts_")<>0 или Найти(фл.ПолноеИмя,"barcodes_")<>0 тогда //загрузка изменений в справочниках
			продолжить;
		КонецЕсли;		

		тхт=Новый ТекстовыйДокумент();
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
		FTP.Получить(фл.ПолноеИмя, ВременныйФайл);
		тхт.Прочитать(ВременныйФайл);	
		УдалитьФайлы(ВременныйФайл);

		Док=НайтиДокумент(тхт);//поиск документа источника
		Если Док=Неопределено Тогда
			продолжить;
		КонецЕсли;	
		
		Стр=СписокФайлов.Добавить();
		Стр.Файл=фл.ПолноеИмя;
		Попытка
			Стр.Документ=Док.Документ.Ссылка;
		Исключение
			Если Док.Документ= "ТоварноТранспортнаяНакладнаяЕГАИС" тогда
				Стр.Документ="ТТНВходящаяЕГАИС";
			Иначе
				Стр.Документ=Док.Документ;
			КонецЕсли;
		КонецПопытки;
		
		Стр.ТЧПодбор=Док.ИмяТабличнойЧастиПодбор;
		Стр.ТЧПриемка=Док.ИмяТабличнойЧастиПриемка;
		Стр.Шаблон=Док.ШаблонИмя;

		
		СтрокаДока=Тхт.ПолучитьСтроку(1);	
		СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
		Если СокрЛП(СтрПолучитьСтроку(СтрокаДока,1)) = "doc_forms" Тогда
			СтрокаДока = Тхт.ПолучитьСтроку(2);
			СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
		КонецЕсли;

		ТипДокумента=СокрЛП(СтрПолучитьСтроку(СтрокаДока,5));	
		Тип=ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента",ТипДокумента));
		
		Если Тип[0].ИспользоватьПодбор тогда	
			Стр.ТабличнуюЧастьПриЗагрузкеПодбор=Тип[0].ТабличнуюЧастьПриЗагрузкеПодбор;
			Если Тип[0].ТабличнуюЧастьПриЗагрузкеПодбор = 0 Тогда
				Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Не изменять";
			ИначеЕсли Тип[0].ТабличнуюЧастьПриЗагрузкеПодбор = 1 Тогда
				Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Дополнять";
			ИначеЕсли Тип[0].ТабличнуюЧастьПриЗагрузкеПодбор = 2 Тогда
				Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Заменять";
			ИначеЕсли Тип[0].ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда
				Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Изменять";
			КонецЕсли;
		Иначе
			Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыбор.Доступность=Ложь; 
		КонецЕсли;
		
		Если Тип[0].ИспользоватьПриемку тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПриемка=Тип[0].ТабличнуюЧастьПриЗагрузкеПриемка;
			Если Тип[0].ТабличнуюЧастьПриЗагрузкеПриемка=0 тогда
				Стр.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор="Не изменять";
			ИначеЕсли Тип[0].ТабличнуюЧастьПриЗагрузкеПриемка=1 тогда
				Стр.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор="Дополнять";
			ИначеЕсли Тип[0].ТабличнуюЧастьПриЗагрузкеПриемка=2 тогда
				Стр.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор="Заменять";
			КонецЕсли;
		Иначе
			Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыбор.Доступность=Ложь;
		КонецЕсли;

		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискФайлов_ЗаполнитьСписокФайлов(НайденныеФайлы, ДопПараметры) Экспорт
	
	Если НайденныеФайлы.Количество()> 0 Тогда
		
		ДопПараметры.Вставить("МассивФайлов",НайденныеФайлы);
		ДопПараметры.Вставить("КоличествоФайлов",НайденныеФайлы.Количество());
		ДопПараметры.Вставить("ТекущийФайл",1);
		ДопПараметры.Вставить("ТекущееИмяФайла",НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Имя);
		ДопПараметры.Вставить("ТекущийПутьФайла",НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Путь);
		Файл = НайденныеФайлы[ДопПараметры.ТекущийФайл-1];

		ПрочестьФайл(Файл, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочестьФайл(Файл, ДопПараметры)

	Если Найти(Файл.ПолноеИмя,"arts_")<>0 или Найти(Файл.ПолноеИмя,"barcodes_")<>0 тогда //загрузка изменений в справочниках
		Если ДопПараметры.ТекущийФайл<ДопПараметры.КоличествоФайлов Тогда
			ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
			Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
			ПрочестьФайл(Файл, ДопПараметры);
		КонецЕсли;
		Возврат;
	КонецЕсли; 

	тхт=Новый ТекстовыйДокумент();
	ДопПараметры.Вставить("тхт", 	тхт);
	ДопПараметры.Вставить("Файл", 	Файл);
	
	ОписаниеОповешения = Новый ОписаниеОповещения("НачатьЧтение_ПрочестьФайл", ЭтаФорма, ДопПараметры);
	тхт.НачатьЧтение(ОписаниеОповешения, Файл.ПолноеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтение_ПрочестьФайл(ДопПараметры) Экспорт
	
	ТекущийФайл = ДопПараметры.тхт.ПолучитьТекст();	
	Тхт 		= ДопПараметры.тхт;
	СтрокаДока=Тхт.ПолучитьСтроку(1);//<ВнутреннийИдентификаторДокумента>;<НомерДокумента>;<КомментарийДокумента>;<ИдентификаторДокумента>;<ТипДокумента>;<Контрагент>;
	СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
	ИдентификаторДокумента=СтрПолучитьСтроку(СтрокаДока,4);
	УИ=СокрЛП(стрЗаменить(ИдентификаторДокумента,"dk8#",""));                    
	ТипДокумента=СокрЛП(СтрПолучитьСтроку(СтрокаДока,5));
	
	ДокументБД=НайтиДокумент(Тхт);//поиск документа источника
	
	Если ДокументБД=Неопределено И ДопПараметры.ТекущийФайл = ДопПараметры.ТекущийФайл Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДокументБД=Неопределено Тогда
		ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
		Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		ПрочестьФайл(Файл, ДопПараметры);
	КонецЕсли;	
	
	Стр=СписокФайлов.Добавить();
	Стр.Файл=ДопПараметры.Файл.ПолноеИмя;
	
	Попытка
		Стр.Документ=ДокументБД.Документ.Ссылка;
	Исключение
		Если ДокументБД.Документ= "ТоварноТранспортнаяНакладнаяЕГАИС" тогда
			Стр.Документ="ТТНВходящаяЕГАИС";
		Иначе
			Стр.Документ=ДокументБД.Документ;
		КонецЕсли;
	КонецПопытки;
	
	Стр.ТЧПодбор=ДокументБД.ИмяТабличнойЧастиПодбор;
	Стр.ТЧПриемка=ДокументБД.ИмяТабличнойЧастиПриемка;
	Стр.Шаблон=ДокументБД.ШаблонИмя;
	
	тхт=Новый ТекстовыйДокумент();
	ДопПараметры.Вставить("тхт", тхт);
	ДопПараметры.Вставить("Стр", Стр);
	
	ОписаниеОповешения = Новый ОписаниеОповещения("НачатьЧтение_ПрочестьФайлСтр", ЭтаФорма, ДопПараметры);
	тхт.НачатьЧтение(ОписаниеОповешения, Стр.Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтение_ПрочестьФайлСтр(ДопПараметры) Экспорт
	
	ТекущийФайл = ДопПараметры.тхт.ПолучитьТекст();	
	Тхт 		= ДопПараметры.тхт;	
	Стр			= ДопПараметры.Стр;
	
	СтрокаДока=Тхт.ПолучитьСтроку(1);
	СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
	Если СокрЛП(СтрПолучитьСтроку(СтрокаДока,1)) = "doc_forms" Тогда
		СтрокаДока = Тхт.ПолучитьСтроку(2);
		СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
	КонецЕсли;
	
	ТипДокумента=СокрЛП(СтрПолучитьСтроку(СтрокаДока,5));	
	Тип=ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента",ТипДокумента));
	
	Если Тип[0].ИспользоватьПодбор тогда
		
		Стр.ТабличнуюЧастьПриЗагрузкеПодбор=Тип[0].ТабличнуюЧастьПриЗагрузкеПодбор;
		Если Тип[0].ТабличнуюЧастьПриЗагрузкеПодбор=0 тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор="Не изменять";
		ИначеЕсли Тип[0].ТабличнуюЧастьПриЗагрузкеПодбор=1 тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор="Дополнять";
		ИначеЕсли Тип[0].ТабличнуюЧастьПриЗагрузкеПодбор=2 тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор="Заменять";
		ИначеЕсли Тип[0].ТабличнуюЧастьПриЗагрузкеПодбор=3 Тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Изменять";	
		КонецЕсли;
	Иначе
		Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыбор.Доступность=Ложь; 
	КонецЕсли;
	
	Если Тип[0].ИспользоватьПриемку тогда
		Стр.ТабличнуюЧастьПриЗагрузкеПриемка=Тип[0].ТабличнуюЧастьПриЗагрузкеПриемка;
		Если Тип[0].ТабличнуюЧастьПриЗагрузкеПриемка=0 тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор="Не изменять";
		ИначеЕсли Тип[0].ТабличнуюЧастьПриЗагрузкеПриемка=1 тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор="Дополнять";
		ИначеЕсли Тип[0].ТабличнуюЧастьПриЗагрузкеПриемка=2 тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор="Заменять";
		КонецЕсли;
	Иначе
		Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыбор.Доступность=Ложь;
	КонецЕсли;
	
	Если ДопПараметры.ТекущийФайл<ДопПараметры.КоличествоФайлов Тогда
		ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
		Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		ПрочестьФайл(Файл, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры
 
// Функция разбирает данные о документе из файла и осуществляет его поиск в БД
//
// Параметры:
//  ИмяФайла - имя текущего файла с данными из ТСД
//
// Возвращаемое значение:
//  лОтвет - структура данных документа из файла для заполнения таблицы списка файлов
//
&НаСервере
Функция НайтиДокумент(тхт)
	СтрокаДока=Тхт.ПолучитьСтроку(1);//<ВнутреннийИдентификаторДокумента>;<НомерДокумента>;<КомментарийДокумента>;<ИдентификаторДокумента>;<ТипДокумента>;<Контрагент>;<Идентификатор ТСД>;<Склад>
	СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
	Если СокрЛП(СтрПолучитьСтроку(СтрокаДока,1)) = "doc_forms" Тогда
		СтрокаДока = Тхт.ПолучитьСтроку(2);
		СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
	КонецЕсли;

	ИдентификаторДокумента=СтрПолучитьСтроку(СтрокаДока,4);
	УИ=СокрЛП(стрЗаменить(ИдентификаторДокумента,"dk8#",""));
	ТипДокумента=СокрЛП(СтрПолучитьСтроку(СтрокаДока,5));
	
	Если ШаблоныДокументов=Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не найдены шаблоны. 
		|Для их создания воспользуйтесь обработкой выгрузки!";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	Cтр=ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента",ТипДокумента));

	Если Cтр.Количество()=0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Для файла обмена не найден шаблон, тип: ("+ТипДокумента+"). 
		|Для его создания воспользуйтесь обработкой выгрузки!";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	Док=Cтр[0].ВидДокумента;
	Попытка
		Док=Документы[Cтр[0].ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(УИ));	
		Если Док.ПолучитьОбъект()=Неопределено тогда
			Док=Cтр[0].ВидДокумента;
		КонецЕслИ;	
	Исключение	
	КонецПопытки;	
	лОтвет=Новый Структура();
	лОтвет.Вставить("ИмяТабличнойЧастиПодбор",Cтр[0].ИмяТабличнойЧастиПодбор);
	лОтвет.Вставить("ИмяТабличнойЧастиПриемка",Cтр[0].ИмяТабличнойЧастиПриемка);
	лОтвет.Вставить("ШаблонИмя",Cтр[0].ТипДокумента);
	лОтвет.Вставить("ТабличнуюЧастьПриЗагрузкеПодбор",Cтр[0].ТабличнуюЧастьПриЗагрузкеПодбор);
	лОтвет.Вставить("ТабличнуюЧастьПриЗагрузкеПриемка",Cтр[0].ТабличнуюЧастьПриЗагрузкеПриемка);
	лОтвет.Вставить("Документ",Док);
	Возврат лОтвет;
КонецФункции	

// Функция осуществляет поиск номенклатуры в БД
//
// Параметры:
//  ИдентификаторТовара - код номенклатуры
//
//  ШтрихкодТовара 		- штрихкод номенклатуры
//
//	НаименованиеТовара 	- наименование номенклатуры
//
// Возвращаемое значение:
//  ДанныеНМ - список значений полученной номенклатуры
//
&НаСервере
Функция ПолучитьНоменклатуру(ИдентификаторТовара,ШтрихкодТовара,НаименованиеТовара)
	ДанныеНМ=Новый СписокЗначений;
	Префикс=Лев(ИдентификаторТовара,3);
	ИдентификаторНоменклатуры=СокрЛП(Сред(ИдентификаторТовара,4,36));
	ИдентификаторХарактеристики=СокрЛП(Сред(ИдентификаторТовара,40,36));
	Попытка  // получение номенклатуры по идентификатору
		ГУИДНМ=Новый УникальныйИдентификатор(ИдентификаторНоменклатуры);
		НМ=Справочники.Номенклатура.ПолучитьСсылку(ГУИДНМ);
		Если ИдентификаторХарактеристики<>"00000000-0000-0000-0000-000000000000" тогда
			ГУИДХР=Новый УникальныйИдентификатор(ИдентификаторХарактеристики);
			ХР=(Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ГУИДХР));
		Иначе			
			ХР=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
				
	Исключение // не получение номенклатуры по идентификатору
		ЗапросШтрихкодов=Новый Запрос("ВЫБРАТЬ
		|	Штрихкоды.Номенклатура КАК НМ,
		|	Штрихкоды.Характеристика КАК ХР
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &ШК");
		ЗапросШтрихкодов.УстановитьПараметр("ШК",ШтрихкодТовара);
		ТаблицаНоменклатуры=ЗапросШтрихкодов.Выполнить().Выгрузить();
		Если ТаблицаНоменклатуры.Количество()<>0 Тогда // получение номенклатуры по штрихкоду
			НМ=ТаблицаНоменклатуры[0].НМ;
			ХР=ТаблицаНоменклатуры[0].ХР;
		Иначе   
			Если НаименованиеТовара = "" тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст="Обнаружена номенклатура с пустым наименованием (шк - "+ШтрихкодТовара+")";
				Сообщение.Сообщить();

				ДанныеНМ=Новый СписокЗначений();
				ДанныеНМ.Добавить(Справочники.Номенклатура.ПустаяСсылка());
				ДанныеНМ.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
				ДанныеНМ.Добавить(1);//коэффициент по умолчанию
				ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст="Обнаружена новая номенклатура - "+НаименованиеТовара+" (шк - "+ШтрихкодТовара+")";
				Сообщение.Сообщить();

				ДанныеНМ=СоздатьНоменклатуру(ШтрихкодТовара,НаименованиеТовара);
				Если ДанныеНМ="" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст="Ошибка создания новой номенклатуры!!!";
					Сообщение.Сообщить();
					Возврат "";
				КонецЕсли;
			КонецЕсли;	
			Возврат ДанныеНМ; //новая номенклатура

		КонецЕсли;
	КонецПопытки;
	Если НМ.ПолучитьОбъект()= неопределено тогда // не получение номенклатуры по идентификатору
		ЗапросШтрихкодов=Новый Запрос("ВЫБРАТЬ
		|	Штрихкоды.Номенклатура КАК НМ,
		|	Штрихкоды.Характеристика КАК ХР
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &ШК");
		ЗапросШтрихкодов.УстановитьПараметр("ШК",ШтрихкодТовара);
		ТаблицаНоменклатуры=ЗапросШтрихкодов.Выполнить().Выгрузить();
		Если ТаблицаНоменклатуры.Количество()<>0 Тогда // получение номенклатуры по штрихкоду
			НМ=ТаблицаНоменклатуры[0].НМ;
			ХР=ТаблицаНоменклатуры[0].ХР;
		Иначе   

			Если НаименованиеТовара = "" тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст="Обнаружена номенклатура с пустым наименованием (шк - "+ШтрихкодТовара+")";
				Сообщение.Сообщить();

				ДанныеНМ=Новый СписокЗначений();
				ДанныеНМ.Добавить(Справочники.Номенклатура.ПустаяСсылка());
				ДанныеНМ.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
				ДанныеНМ.Добавить(1);//коэффициент по умолчанию
				ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст="Обнаружена новая номенклатура - "+НаименованиеТовара+" (шк - "+ШтрихкодТовара+")";
				Сообщение.Сообщить();

				ДанныеНМ=СоздатьНоменклатуру(ШтрихкодТовара,НаименованиеТовара);
				Если ДанныеНМ="" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст="Ошибка создания новой номенклатуры!!!";
					Сообщение.Сообщить();
					Возврат "";
				КонецЕсли;
			КонецЕсли;
			
			Возврат ДанныеНМ; //новая номенклатура

		КонецЕсли;
	КонецЕсли;

	ДанныеНМ.Добавить(НМ);
	ДанныеНМ.Добавить(ХР);	
	ЗапросЕдиниц=Новый Запрос("ВЫБРАТЬ
	|	Штрихкоды.Упаковка КАК ЕИ,	
	|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         		ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1)
	|	КАК КФ	
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Код");
	Попытка 
		ЗапросЕдиниц.УстановитьПараметр("Код",ШтрихкодТовара);
	Исключение
		ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		ДанныеНМ.Добавить(1);
		ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		Возврат ДанныеНМ;
	КонецПопытки;
	ТаблицаЕдиниц=ЗапросЕдиниц.Выполнить().Выгрузить();
	Если ТаблицаЕдиниц.Количество()=0 или ШтрихкодТовара="" Тогда	
		ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());//единица по умолчанию 
		ДанныеНМ.Добавить(1); //коэффициент по умолчанию
		ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		
		Если ШтрихкодТовара <>"" И СтрДлина(ШтрихкодТовара) <> 5 И Лев(ШтрихкодТовара,1) <> "2" тогда
			Регистр=РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			Регистр.Штрихкод=ШтрихкодТовара;
			Регистр.Номенклатура = НМ.Ссылка;
			Регистр.Упаковка=Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Регистр.Характеристика=ХР.Ссылка;
			Регистр.Записать();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Создан штрих-код: "+ШтрихкодТовара + "  , номенклатура -" +НаименованиеТовара;
			Сообщение.Сообщить();
		КонецЕсли;
	
		Возврат ДанныеНМ;
	КонецЕсли;
	Для каждого стр из ТаблицаЕдиниц Цикл
		Если стр.ЕИ=Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() тогда
		ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());//единица по умолчанию 
		ДанныеНМ.Добавить(1);//коэффициент по умолчанию
		ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	    Иначе
		ДанныеНМ.Добавить(стр.ЕИ);
		ДанныеНМ.Добавить(стр.КФ);
		ДанныеНМ.Добавить(стр.ЕИ);

		КонецЕсли;
		прервать; //штрихкод должен уникально определять единицу
	КонецЦикла;
	Возврат ДанныеНМ; //найденная номенклатура 
КонецФункции

&НаСервере
Функция ПолучитьНоменклатуруЕГАИС(ШтрихкодТовара,НаименованиеТовара,НоменклатураЕГАИС);
	ДанныеНМ=Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ЕГАИС_СоответствиеНоменклатуры.Номенклатура как ссылка
	                |ИЗ
	                |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК ЕГАИС_СоответствиеНоменклатуры
	                |ГДЕ
	                |	ЕГАИС_СоответствиеНоменклатуры.АлкогольнаяПродукция = &ЕГАИСНоменклатура";
	Запрос.УстановитьПараметр("ЕГАИСНоменклатура", НоменклатураЕГАИС);
	Рез =Запрос.Выполнить().Выбрать();
	
	Если Рез.Количество() = 1 тогда
		Пока Рез.Следующий() цикл
			НМ = Рез.Ссылка;
		Прервать;
		КонецЦикла;
	
		ДанныеНМ.Добавить(НМ);
		ДанныеНМ.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		ДанныеНМ.Добавить(НМ.ЕдиницаИзмерения);
		ДанныеНМ.Добавить(1);

	Иначе

	ИдентификаторТовара=СокрЛП(СтрЗаменить(ИдентификаторТовара,"<artID> = <",""));
	ШтрихкодТовара=СокрЛП(СтрЗаменить(ШтрихкодТовара,"<artBC> = <",""));
	НаименованиеТовара=СокрЛП(СтрЗаменить(НаименованиеТовара,"<name> = <",""));
	Префикс=Лев(ИдентификаторТовара,3);
	ИдентификаторТовара=СокрЛП(Сред(ИдентификаторТовара,4));
		ЗапросШтрихкодов=Новый Запрос("ВЫБРАТЬ
		|	Штрихкоды.Номенклатура КАК НМ,
		|	Штрихкоды.Характеристика КАК ХР
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &ШК");
		ЗапросШтрихкодов.УстановитьПараметр("ШК",ШтрихкодТовара);
		ТаблицаНоменклатуры=ЗапросШтрихкодов.Выполнить().Выгрузить();
		Если ТаблицаНоменклатуры.Количество()<>0 Тогда // получение номенклатуры по штрихкоду
			НМ=ТаблицаНоменклатуры[0].НМ;
			ХР=ТаблицаНоменклатуры[0].ХР;
		Иначе   // получение номенклатуры по наименованию
			
			ДанныеНМ.Добавить(Справочники.Номенклатура.ПустаяСсылка());
			ДанныеНМ.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			ДанныеНМ.Добавить(1);
			Возврат ДанныеНМ;

			//НМ=Справочники.Номенклатура.НайтиПоНаименованию(НаименованиеТовара);
			//Если НЕ НМ.Пустая() Тогда
			//	ХР=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			//Иначе
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст="Обнаружена новая номенклатура - "+НаименованиеТовара+" (шк - "+ШтрихкодТовара+")";
			//Сообщение.Сообщить();
			//ДанныеНМ=СоздатьНоменклатуру(ШтрихкодТовара,НаименованиеТовара);
			//Если ДанныеНМ="" Тогда
			//	Сообщение = Новый СообщениеПользователю;
			//	Сообщение.Текст="Ошибка создания новой номенклатуры!!!";
			//	Сообщение.Сообщить();
			//	Возврат "";
			//КонецЕсли;	
			//Возврат ДанныеНМ; //новая номенклатура
			//КонецЕсли;
		КонецЕсли;
	
	//Если НМ.ПолучитьОбъект()= неопределено тогда // не получение номенклатуры по идентификатору
	//	ЗапросШтрихкодов=Новый Запрос("ВЫБРАТЬ
	//	|	Штрихкоды.Номенклатура КАК НМ,
	//	|	Штрихкоды.Характеристика КАК ХР
	//	|ИЗ
	//	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	//	|ГДЕ
	//	|	Штрихкоды.Штрихкод = &ШК");
	//	ЗапросШтрихкодов.УстановитьПараметр("ШК",ШтрихкодТовара);
	//	ТаблицаНоменклатуры=ЗапросШтрихкодов.Выполнить().Выгрузить();
	//	Если ТаблицаНоменклатуры.Количество()<>0 Тогда // получение номенклатуры по штрихкоду
	//		НМ=ТаблицаНоменклатуры[0].НМ;
	//		ХР=ТаблицаНоменклатуры[0].ХР;
	//	Иначе   // получение номенклатуры по наименованию
	//		НМ=Справочники.Номенклатура.НайтиПоНаименованию(НаименованиеТовара);
	//		Если НЕ НМ.Пустая() Тогда
	//			ХР=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	//		Иначе
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст="Обнаружена новая номенклатура - "+НаименованиеТовара+" (шк - "+ШтрихкодТовара+")";
	//		Сообщение.Сообщить();
	//		ДанныеНМ=СоздатьНоменклатуру(ШтрихкодТовара,НаименованиеТовара);
	//		Если ДанныеНМ="" Тогда
	//			Сообщение = Новый СообщениеПользователю;
	//			Сообщение.Текст="Ошибка создания новой номенклатуры!!!";
	//			Сообщение.Сообщить();
	//			Возврат "";
	//		КонецЕсли;	
	//		Возврат ДанныеНМ; //новая номенклатура
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

	ДанныеНМ.Добавить(НМ);
	ДанныеНМ.Добавить(ХР);	
	ЗапросЕдиниц=Новый Запрос("ВЫБРАТЬ
	|	Штрихкоды.Упаковка КАК ЕИ,
	|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         		ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1)
	|	КАК КФ
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Код");
	Попытка 
		ЗапросЕдиниц.УстановитьПараметр("Код",ШтрихкодТовара);
	Исключение
		ДанныеНМ.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		ДанныеНМ.Добавить(1);
		Возврат ДанныеНМ;
	КонецПопытки;
	ТаблицаЕдиниц=ЗапросЕдиниц.Выполнить().Выгрузить();
	Если ТаблицаЕдиниц.Количество()=0 Тогда	
		ДанныеНМ.Добавить(НМ.ЕдиницаИзмерения);//единица по умолчанию 
		ДанныеНМ.Добавить(1); //коэффициент по умолчанию
		ВесовойПрефикс  = "2";
		Если Лев(ШтрихкодТовара,1) = ВесовойПрефикс тогда
			//весовые штрихкоды не регистрируем
		ИначеЕсли ШтрихкодТовара="" или СтрДлина(ШтрихкодТовара) = 5 или Лев(ШтрихкодТовара,1) = "2"  тогда 	
		Иначе //регистрируем штрихкод	
			Регистр=РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			Регистр.Штрихкод=ШтрихкодТовара;
			Регистр.Номенклатура = НМ.Ссылка;
			Регистр.Упаковка=НМ.ЕдиницаИзмерения;
			Регистр.Характеристика=ХР.Ссылка;
			Регистр.Записать();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Создан штрих-код: "+ШтрихкодТовара + "  , номенклатура -" +НаименованиеТовара;
			Сообщение.Сообщить();
		КонецЕсли;
			Возврат ДанныеНМ;
	КонецЕсли;
	Для каждого стр из ТаблицаЕдиниц Цикл
		ДанныеНМ.Добавить(стр.ЕИ);
		ДанныеНМ.Добавить(стр.КФ);
		прервать; //штрихкод должен уникально определять единицу
	КонецЦикла;
	
	КонецЕсли;

	Возврат ДанныеНМ; //найденная номенклатура 
	
КонецФункции



// Функция создает новую номенклатуру в БД
//
// Параметры:
//  ШтрихкодТовара 		- штрихкод номенклатуры
//
//	НаименованиеТовара 	- наименование номенклатуры
//
// Возвращаемое значение:
//  СписокЗначений - список значений созданной номенклатуры
//
&НаСервере
Функция СоздатьНоменклатуру(ШтрихкодТовара,НаименованиеТовара, ИДТовара="")
	НаименованиеТовара = ЛЕВ(НаименованиеТовара, Метаданные.Справочники.Номенклатура.ДлинаНаименования);
	Попытка
		НМ=Справочники.Номенклатура.СоздатьЭлемент();
		
		Если ВидНоменклатуры.Пустая() Тогда
			ВидНМ=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Штучный товар");
			Если ВидНМ.Пустая() Тогда
				Выборка = Справочники.ВидыНоменклатуры.Выбрать();
				Если Выборка.Следующий() тогда
					ВидНМ = Выборка.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			Если ВидНМ.Пустая() тогда
				Сообщить("В базе данных не заполнен справочник Виды номенклатуры");
				Возврат "";
			КонецЕсли;
		Иначе
			ВидНМ = ВидНоменклатуры;
		КонецЕсли;

		НМ.ВидНоменклатуры = ВидНМ;  
		НМ.Наименование=НаименованиеТовара;
			
		НМ.НаименованиеПолное=НаименованиеТовара;
		НМ.Качество=Перечисления.ГрадацииКачества.Новый;
		ЕИ=Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");	
			
		НМ.ЕдиницаИзмерения=ЕИ;
		НМ.ЕдиницаДляОтчетов = НМ.ЕдиницаИзмерения;

		НМ.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Товар;
		НМ.ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	    НМ.ИспользованиеХарактеристик=Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
		
		ГруппаДоступа=Справочники.ГруппыДоступаНоменклатуры.НайтиПоНаименованию("Прочее");
			Если ГруппаДоступа.Пустая() Тогда
				ГруппаДоступа=Справочники.ГруппыДоступаНоменклатуры.СоздатьЭлемент();
				ГруппаДоступа.Наименование="Прочее";
				ГруппаДоступа.Записать();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст="Создана группа доступа: "+ЕИ.Ссылка;
				Сообщение.Сообщить();
			КонецЕсли;
		НМ.ГруппаДоступа=ГруппаДоступа;
		НМ.СтавкаНДС=Перечисления.СтавкиНДС.НДС20;		
		НМ.Записать();	
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Создана номенклатура: "+НаименованиеТовара;
		Сообщение.Сообщить();

		Если ШтрихкодТовара <>"" И СтрДлина(ШтрихкодТовара) <> 5  И Лев(ШтрихкодТовара,1) <> "2" тогда
			Регистр=РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			Регистр.Штрихкод=ШтрихкодТовара;
			Регистр.Номенклатура = НМ.Ссылка;
			Регистр.Упаковка=Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Регистр.Записать();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Создан штрих-код: "+ШтрихкодТовара + "  , номенклатура -" +НаименованиеТовара;
			Сообщение.Сообщить();
		КонецЕсли;

		СписокЗначений=Новый СписокЗначений();
		СписокЗначений.Добавить(НМ.Ссылка);
		СписокЗначений.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СписокЗначений.Добавить(НМ.ЕдиницаИзмерения);
		СписокЗначений.Добавить(1);//коэффициент по умолчанию
		СписокЗначений.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());

		Возврат СписокЗначений;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Ошибка создания номенклатуры "+НаименованиеТовара+":"+ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат "";
	КонецПопытки;
КонецФункции	
 
// Функция возвращает результат проверки доступности каталогов обмена
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Булево> - Результат проверки.
//
&НаКлиенте
Функция КаталогиДоступны(ВидПостОбработки)
	Если (лКаталогОбмена = "") И (FTPАдрес = "") И (лКаталогНастроек = "") Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не указаны каталоги обмена и настроек!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если (лКаталогОбмена = "") И (FTPАдрес = "") Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не указан каталог обмена с ТСД!";
		Сообщение.Сообщить();
		Возврат Ложь;
	ИначеЕсли лКаталогНастроек = "" Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не указан каталог хранения настроек!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если ИспользоватьFTP тогда
		КаталогиДоступныFTP();
		Если НЕ КаталогFTPДоступен тогда     
			Возврат Ложь;
		КонецЕсли;
		
		ВыполнитьПостОбработку(ВидПостОбработки);
	Иначе
		
		МассивТСД = Новый Массив;
		
		Если Элементы.СписокТСД.ТекущиеДанные = Неопределено Тогда
			ТекущийТСД = Неопределено;
		Иначе
			ТекущийТСД = Элементы.СписокТСД.ТекущиеДанные.ТСД;
		КонецЕсли;	
		
		МассивТСД.Добавить(СокрЛП(ТекущийТСД));         
		
		ТекКаталог = лКаталогОбмена+МассивТСД[0];		
		ИмяКаталогаIN=лКаталогОбмена+"DataMobile"+РП+ИДТСД+"in"+РП;
		ИмяКаталогаOUT=лКаталогОбмена+"DataMobile"+РП+ИДТСД+"out"+РП;
		ИмяКаталогаLOG=лКаталогОбмена+"DataMobile"+РП+ИДТСД+"log"+РП;			
		
		ПараметрыВыгрузки = Новый Структура();
		
		ПараметрыВыгрузки.Вставить("ВидПостОбработки",ВидПостОбработки);
		ПараметрыВыгрузки.Вставить("МассивТСД",МассивТСД);
		ПараметрыВыгрузки.Вставить("ВсегоТСД",МассивТСД.Количество());
		
		ПараметрыВыгрузки.Вставить("ТекущийКаталогПроверки","in");
		ПараметрыВыгрузки.Вставить("ТекущийКаталогСоздания","in");
		ПараметрыВыгрузки.Вставить("ТекущийТСД",1);
		ПараметрыВыгрузки.Вставить("ТекКаталог",ТекКаталог);
		
		
		ПараметрыВыгрузки.Вставить("ИмяКаталогаIN",ИмяКаталогаIN);
		ПараметрыВыгрузки.Вставить("ИмяКаталогаOUT",ИмяКаталогаOUT);
		ПараметрыВыгрузки.Вставить("ИмяКаталогаLOG",ИмяКаталогаLOG);
		
		ПараметрыВыгрузки.Вставить("КаталогНаДискеINСуществует",Ложь);
		ПараметрыВыгрузки.Вставить("КаталогНаДискеOUTСуществует",Ложь);
		ПараметрыВыгрузки.Вставить("КаталогНаДискеLOGСуществует",Ложь);
		
		ПараметрыВыгрузки.Вставить("ЗадаватьВопрос",Истина);
		ПараметрыВыгрузки.Вставить("ВсеКаталогиЕсть",Истина);
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение",ЭтаФорма,ПараметрыВыгрузки);
		КаталогНаДискеIN = Новый Файл(ИмяКаталогаIN);
		КаталогНаДискеIN.НачатьПроверкуСуществования(ОписаниеОповещения);
	КонецЕсли;		
		
	КаталогНаДискеНастройки=Новый Файл(лКаталогНастроек);
	КаталогНаДискеНастройки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталогаНастроек_Завершение",ЭтаФорма, Новый Структура("ИмяКаталогаНастроек",лКаталогНастроек)));
	
КонецФункции

&НаКлиенте
Процедура НачатьПроверкуСуществованияКаталогаНастроек_Завершение(Существует, Параметры) Экспорт
	Если НЕ Существует Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталогаНастроек",ЭтаФорма,Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаНастроек);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеКаталогаНастроек(Имя, ДопПараметры) Экспорт
	
КонецПроцедуры
 
&НаКлиенте
Процедура НачатьПроверкуСуществованияКаталоговОбмена_Завершение(Существует, Параметры) Экспорт
	Если Параметры.ТекущийКаталогПроверки = "in" тогда
		    Если Существует Тогда
				Параметры.КаталогНаДискеINСуществует = Истина;
			КонецЕсли;
			
			Параметры.ТекущийКаталогПроверки = "out";
			КаталогНаДискеOUT = Новый Файл(Параметры.ИмяКаталогаOUT);
			

			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			КаталогНаДискеOUT.НачатьПроверкуСуществования(ОписаниеОповещения);
		ИначеЕсли Параметры.ТекущийКаталогПроверки = "out" тогда
			Если Существует Тогда
				Параметры.КаталогНаДискеOUTСуществует = Истина;
			КонецЕсли;
			
			Параметры.ТекущийКаталогПроверки = "log";
			КаталогНаДискеLOG = Новый Файл(Параметры.ИмяКаталогаLOG);

			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			КаталогНаДискеLOG.НачатьПроверкуСуществования(ОписаниеОповещения);
			
		ИначеЕсли Параметры.ТекущийКаталогПроверки = "log" тогда
			Если Существует Тогда
				Параметры.КаталогНаДискеLOGСуществует = Истина;
			КонецЕсли;
			
			Если НЕ Параметры.КаталогНаДискеINСуществует 
				или НЕ Параметры.КаталогНаДискеOUTСуществует 
				или НЕ  Параметры.КаталогНаДискеLOGСуществует Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСозданияКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
				Если Параметры.ЗадаватьВопрос тогда	
					ТекстВопроса = "Каталог обмена не содержит необходимых директорий для выгрузки\загрузки. Создать?";
					ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);			
				Иначе
					ВыполнитьОбработкуОповещения(ОписаниеОповещения,КодВозвратаДиалога.Да);
				КонецЕсли;
			Иначе
				
				Если Параметры.ТекущийТСД = Параметры.ВсегоТСД тогда
					Если Параметры.ВсеКаталогиЕсть тогда 
						ВыполнитьПостОбработку(Параметры.ВидПостОбработки);	
					КонецЕсли;
					
				Иначе
					//переход к следующему ТСД
					ПеревестиПараметрыНаСледующийТСД_КаталогиОбмена(Параметры);
					
					ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
					КаталогНаДискеIN = Новый Файл(Параметры.ИмяКаталогаIN);
					КаталогНаДискеIN.НачатьПроверкуСуществования(ОписаниеОповещения);
														
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСозданияКаталоговОбмена_Завершение(Результат,Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
				
		Если НЕ Параметры.КаталогНаДискеINСуществует тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаIN);
		ИначеЕсли НЕ Параметры.КаталогНаДискеOUTСуществует тогда
			Параметры.ТекущийКаталогСоздания = "out";
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаOUT);
		ИначеЕсли НЕ Параметры.КаталогНаДискеLOGСуществует тогда
			Параметры.ТекущийКаталогСоздания = "log";
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаLOG);
		КонецЕсли;	
		
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеКаталоговОбмена_Завершение(Каталог,Параметры) Экспорт

	Если Параметры.ТекущийКаталогСоздания = "in" тогда
		Параметры.ТекущийКаталогСоздания = "out";
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаOUT);
	ИначеЕсли Параметры.ТекущийКаталогСоздания = "out" тогда
		Параметры.ТекущийКаталогСоздания = "log";
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаLOG);
	ИначеЕсли Параметры.ТекущийКаталогСоздания = "log" тогда
		
		Если Параметры.ТекущийТСД = Параметры.ВсегоТСД тогда
			Если Параметры.ВсеКаталогиЕсть тогда 
				ВыполнитьПостОбработку(Параметры.ВидПостОбработки);	
			КонецЕсли;
		Иначе			
			//переход к следующему ТСД
			ПеревестиПараметрыНаСледующийТСД_КаталогиОбмена(Параметры);
					
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение",ЭтаФорма,Параметры);
			КаталогНаДискеIN = Новый Файл(Параметры.ИмяКаталогаIN);
			КаталогНаДискеIN.НачатьПроверкуСуществования(ОписаниеОповещения);

		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеШаблоны(Данные)

 ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
 Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
 	ШаблоныДокументов.Загрузить(ДанныеТЗ);
 КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьДанныеДополнительныхФорм(Данные)

 ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
 Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
 	ДополнительныеФормы.Загрузить(ДанныеТЗ);
 КонецЕсли;

КонецПроцедуры 


&НаКлиенте
Процедура Обновить(Команда)
	КаталогиДоступны("Обновить");
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция НомерПоследнегоЧека()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ЧекККМ.НомерЧекаККМ) КАК НомерЧекаККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерЧекаККМ;
	Иначе
		Возврат 0;
	КонецЕсли; 
КонецФункции // НомерПоследнегоЧека()
&НаСервереБезКонтекста
Функция ЗаполнитьПересчетТоваров(Док,ТекШаблон,тхт)
	
	ПоЯчейкам = ТекШаблон.ИспользованиеЯчеекПодбор>0;
	ТолькоСобранные = ТекШаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор;
	
	ЗаполнитьКоличествоПоУчету(Док,ПоЯчейкам);
	
	Возврат Истина;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаполнитьКоличествоПоУчету(Док,ПоЯчейкам)
	
	Запрос = Новый Запрос;
	
	Если СкладыСервер.ИспользоватьАдресноеХранение(Док.Склад, Док.Помещение, Док.Дата) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК Ячейка,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0) КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 0) = 0
		|			ТОГДА ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0) * &ТекстЗапросаКоэффициентУпаковки
		|	КОНЕЦ КАК Количество,
		|	0 КАК КоличествоФакт,
		|	0 КАК КоличествоУпаковокФакт
		|ПОМЕСТИТЬ ВТ_ТаблицаТоваровСОстатками
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(
		|			&ДатаОстатков,
		|			Ячейка.Владелец = &Склад
		|				И Ячейка.Помещение = &Помещение) КАК ТоварыВЯчейкахОстатки
		|ГДЕ
		|	НЕ(ТоварыВЯчейкахОстатки.Номенклатура ЕСТЬ NULL
		|				И ТоварыВЯчейкахОстатки.Характеристика ЕСТЬ NULL
		|				И ТоварыВЯчейкахОстатки.Назначение ЕСТЬ NULL
		|				И ТоварыВЯчейкахОстатки.Упаковка ЕСТЬ NULL
		|				И ТоварыВЯчейкахОстатки.Серия ЕСТЬ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаТоваровСОстатками.Ячейка КАК Ячейка,
		|	ВТ_ТаблицаТоваровСОстатками.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаТоваровСОстатками.Характеристика КАК Характеристика,
		|	ВТ_ТаблицаТоваровСОстатками.Назначение КАК Назначение,
		|	ВТ_ТаблицаТоваровСОстатками.Упаковка КАК Упаковка,
		|	ВТ_ТаблицаТоваровСОстатками.Серия КАК Серия,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.Количество) КАК Количество,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоФакт) КАК КоличествоФакт,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт
		|ПОМЕСТИТЬ ТаблицаТоваровСОстатками
		|ИЗ
		|	ВТ_ТаблицаТоваровСОстатками КАК ВТ_ТаблицаТоваровСОстатками
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаТоваровСОстатками.Ячейка,
		|	ВТ_ТаблицаТоваровСОстатками.Назначение,
		|	ВТ_ТаблицаТоваровСОстатками.Номенклатура,
		|	ВТ_ТаблицаТоваровСОстатками.Серия,
		|	ВТ_ТаблицаТоваровСОстатками.Упаковка,
		|	ВТ_ТаблицаТоваровСОстатками.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваровСОстатками.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваровСОстатками.Характеристика КАК Характеристика,
		|	ТаблицаТоваровСОстатками.Назначение КАК Назначение,
		|	ТаблицаТоваровСОстатками.Упаковка КАК Упаковка,
		|	ТаблицаТоваровСОстатками.Ячейка КАК Ячейка,
		|	ТаблицаТоваровСОстатками.Серия КАК Серия,
		|	ТаблицаТоваровСОстатками.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТоваровСОстатками.Количество КАК Количество,
		|	ТаблицаТоваровСОстатками.КоличествоФакт КАК КоличествоФакт,
		|	ТаблицаТоваровСОстатками.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
		|	ЛОЖЬ КАК ИзлишекПорча
		|ИЗ
		|	ТаблицаТоваровСОстатками КАК ТаблицаТоваровСОстатками
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(ТаблицаТоваровСОстатками.Ячейка КАК Справочник.СкладскиеЯчейки).РабочийУчасток,
		|	ВЫРАЗИТЬ(ТаблицаТоваровСОстатками.Ячейка КАК Справочник.СкладскиеЯчейки).ПорядокОбхода,
		|	ВЫРАЗИТЬ(ТаблицаТоваровСОстатками.Ячейка КАК Справочник.СкладскиеЯчейки).Код,
		|	ТаблицаТоваровСОстатками.Серия.Номер,
		|	ТаблицаТоваровСОстатками.Серия.ГоденДо";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ТоварыВЯчейкахОстатки.Упаковка",
				"ТоварыВЯчейкахОстатки.Номенклатура"));
		Запрос.УстановитьПараметр("Склад", Док.Склад);
		Запрос.УстановитьПараметр("Помещение", Док.Помещение);
		Запрос.УстановитьПараметр("ДатаОстатков", Док.Дата);
		Запрос.УстановитьПараметр("МаксимальноВозможноеКоличествоСтрокВТЧ", 100000);
			
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.Назначение КАК Назначение,
		|	ТоварыНаСкладахОстатки.Серия КАК Серия,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК КоличествоУпаковок,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Количество,
		|	0 КАК КоличествоФакт,
		|	0 КАК КоличествоУпаковокФакт
		|ПОМЕСТИТЬ ВТ_ТаблицаТоваровСОстатками
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&ДатаОстатков,
		|			Склад = &Склад
		|				И Помещение = &Помещение) КАК ТоварыНаСкладахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаТоваровСОстатками.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаТоваровСОстатками.Характеристика КАК Характеристика,
		|	ВТ_ТаблицаТоваровСОстатками.Назначение КАК Назначение,
		|	ВТ_ТаблицаТоваровСОстатками.Серия КАК Серия,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.Количество) КАК Количество,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоФакт) КАК КоличествоФакт,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт
		|ПОМЕСТИТЬ ТаблицаТоваровСОстатками
		|ИЗ
		|	ВТ_ТаблицаТоваровСОстатками КАК ВТ_ТаблицаТоваровСОстатками
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаТоваровСОстатками.Серия,
		|	ВТ_ТаблицаТоваровСОстатками.Назначение,
		|	ВТ_ТаблицаТоваровСОстатками.Характеристика,
		|	ВТ_ТаблицаТоваровСОстатками.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваровСОстатками.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваровСОстатками.Характеристика КАК Характеристика,
		|	ТаблицаТоваровСОстатками.Назначение КАК Назначение,
		|	ТаблицаТоваровСОстатками.Серия КАК Серия,
		|	ТаблицаТоваровСОстатками.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТоваровСОстатками.Количество КАК Количество,
		|	ТаблицаТоваровСОстатками.КоличествоФакт КАК КоличествоФакт,
		|	ТаблицаТоваровСОстатками.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
		|	ЛОЖЬ КАК ИзлишекПорча
		|ИЗ
		|	ТаблицаТоваровСОстатками КАК ТаблицаТоваровСОстатками
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТоваровСОстатками.Серия.Номер,
		|	ТаблицаТоваровСОстатками.Серия.ГоденДо";
		

		Запрос.УстановитьПараметр("Склад", Док.Склад);
		Запрос.УстановитьПараметр("Помещение", Док.Помещение);
		Запрос.УстановитьПараметр("ДатаОстатков", Док.Дата);
	КонецЕсли;	
	
	Док.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры



/////////////////////////////////////////////////////////////////////////////
//Из общего модуля ОбработкаТабличнойЧстиКлиент
&НаСервереБезКонтекста
Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий)
	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;

	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("УсловиеЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		 ИЛИ СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа") Тогда
		СтруктураПолейТЧ.Вставить("СуммаСНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСверхЗаказа", 0);
		СтруктураПолейТЧ.Вставить("КодСтроки", 1);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовОбязательна", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовОбязательна");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда

		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию") Тогда
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагиНедоборНеотгружаемыеИзлишкиНедостачи") Тогда
		СтруктураПолейТЧ.Вставить("ЕстьНедобор");
		СтруктураПолейТЧ.Вставить("ЕстьНеотгружаемые");
		СтруктураПолейТЧ.Вставить("ЕстьИзлишки");
		СтруктураПолейТЧ.Вставить("ЕстьНедостачи");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
	 ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Помещение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Продавец");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
		
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для Каждого ИмяПоляСтатус из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство("Серия" + Суффикс) Тогда
					СтруктураПолейТЧ.Вставить("Серия" + Суффикс);
					СтруктураПолейТЧ.Вставить("Номенклатура" + Суффикс);
					СтруктураПолейТЧ.Вставить("Характеристика" + Суффикс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрМас из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		СтруктураПолейТЧ.Вставить("Количество");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПередачуВЭксплуатацию") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ФизическоеЛицо");
		СтруктураПолейТЧ.Вставить("ПередачаВЭксплуатацию");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПриемка") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КодТНВЭД");
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ,ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции
/////////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект)
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"НалогообложениеНДС") Тогда
		СтруктураЗаполненияЦены.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаСервере
Функция ВернутьЗначениеПеречисленияПоСинониму(ЗначениеСинонимаТекст, МойВидПеречисления)
    ЭлементПеречисления = Неопределено;
    Для каждого ТекЭлемент Из Метаданные.Перечисления[МойВидПеречисления].ЗначенияПеречисления Цикл
        Если ТекЭлемент.Синоним = ЗначениеСинонимаТекст Тогда
            ЭлементПеречисления = Перечисления[МойВидПеречисления][ТекЭлемент.Имя];
            Прервать;
        КонецЕсли;
    КонецЦикла; 
    
      Возврат ЭлементПеречисления; // возвращаем значение перечисления или Неопределено
КонецФункции 

&НаСервере
Функция ВнестиДокументВБазу(Код,тхт,СтрокаОшибок) 
	Об=СписокФайлов[Код];
	ТекШаблон=ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента",Об.Шаблон))[0];
	ПерезаписьСклада = Истина;
	ПараметрыДокумента=СобратьПараметры();
	ПараметрыДокумента.Вставить("Пользователь",ПараметрыСеанса.ТекущийПользователь);	
	
	//НачатьТранзакцию();
	
		ПараметрыДокумента.Вставить("ИмяТЧПодбор",Об.ТЧПодбор);
		ПараметрыДокумента.Вставить("ИмяТЧПриемка",Об.ТЧПриемка);		
		
		ЭтоНовыйДокумент = Ложь;
		Попытка
			Док=Об.Документ.ПолучитьОбъект();
			ПараметрыДокумента.Вставить("Док",Док);
		Исключение
			Док=Документы[Об.Документ].СоздатьДокумент();
			ЭтоНовыйДокумент = Истина;
			ПараметрыДокумента.Вставить("Док",Док);
			Попытка
				ЗаполнитьСклады(Об,тхт,Док);
			Исключение
			КонецПопытки;
			ЗаполнитьШапку(ПараметрыДокумента,тхт);
		КонецПопытки;

		
		Если ТекШаблон.ИспользоватьМаркировку Тогда
			Если ДатаМобайл_Маркировка_ТребуетсяСпецОбработка(ТекШаблон) Тогда 		
				СсылкаДокументМаркировки = ПолучитьДокументМаркировки(Док, тхт, ТекШаблон,ЭтоНовыйДокумент);
				//ЗафиксироватьТранзакцию();
				Возврат СсылкаДокументМаркировки;		
			Иначе
				//создадим только КМ
				ЗагрузитьКодыМаркировки(Док, тхт, ТекШаблон,ЭтоНовыйДокумент);
			КонецЕсли;	
		КонецЕсли;
		
		ИсходныеДанныеПодбор = Неопределено;
		ОчисткаНулевыхСтрок = Ложь;
		
		Попытка
			Если Об.ТЧПодбор<>"" тогда
				Если Об.ТабличнуюЧастьПриЗагрузкеПодбор=2 тогда
					ИсходныеДанныеПодбор=Док[ПараметрыДокумента.ИмяТЧПодбор].Выгрузить();
					Если НЕ Док.Метаданные().Имя = "ТТНВходящаяЕГАИС" тогда					
						ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПодбор]);
						Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки;
				    КонецЕсли;
				
					Если Док.Метаданные().Имя="ПересчетТоваров" Тогда                   
						ЗаполнитьПересчетТоваров(Док,ТекШаблон,тхт);
					КонецЕсли;	
				ИначеЕсли Об.ТабличнуюЧастьПриЗагрузкеПодбор=1 тогда
					Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
						Если Док[ПараметрыДокумента.ИмяТЧПодбор].Количество()=0 тогда
							ОчисткаНулевыхСтрок = Истина;
							ЗаполнитьПересчетТоваров(Док,ТекШаблон,тхт);
						КонецЕсли;	
					КонецЕсли;	
				ИначеЕсли Об.ТабличнуюЧастьПриЗагрузкеПодбор=3 тогда
	                Для каждого стр из Док[ПараметрыДокумента.ИмяТЧПодбор] цикл
						Попытка стр.Количество = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоУпаковокОтобрано = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоОтобрано = 0; Исключение КонецПопытки;
						Попытка стр.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка(); Исключение КонецПопытки;
					КонецЦикла;
					Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки; 
				КонецЕсли;	
			КонецЕсли;	
			
			Если Об.ТЧПриемка<>"" тогда
				Если Об.ТабличнуюЧастьПриЗагрузкеПриемка=2 тогда
					ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПриемка]);
					Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки;
				ИначеЕсли Об.ТабличнуюЧастьПриЗагрузкеПриемка=1 тогда
				КонецЕсли;	
			КонецЕсли;	
		Исключение
			СтрокаОшибок="Ошибка начального заполнения документа:"+ОписаниеОшибки();
			Возврат Неопределено;
		КонецПопытки;
		
	Если НЕ ТекШаблон.ИспользоватьЕГАИС тогда	
		
		СтрокаДока=Тхт.ПолучитьСтроку(1);//<ВнутреннийИдентификаторДокумента>;<НомерДокумента>;<КомментарийДокумента>;<ИдентификаторДокумента>;<ТипДокумента>;<Контрагент>;
		СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
		н=2;
		Если СокрЛП(СтрПолучитьСтроку(СтрокаДока,1)) = "doc_forms" Тогда
			ДополнительныеФормыШапки = СтрокаДока;
			н=3;
			СтрокаДока = Тхт.ПолучитьСтроку(2);
			СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
		КонецЕсли;
		НомерДокумента=СтрПолучитьСтроку(СтрокаДока,2);
		КомментарийДокумента=СтрПолучитьСтроку(СтрокаДока,3);
		ИдентификаторПартнера=СтрПолучитьСтроку(СтрокаДока,6);
		ИдентификаторСклада=СтрПолучитьСтроку(СтрокаДока,8);

		Если тхт.КоличествоСтрок()>1 тогда
			СтрокаДляДаты=Тхт.ПолучитьСтроку(2);
			СтрокаДляДаты=СтрЗаменить(СтрокаДляДаты,";",Символы.ПС);
			ДатаСтроки=СтрПолучитьСтроку(СтрокаДляДаты,10);
			Док.Комментарий=Док.Комментарий+" Выполнено в DataMobile " + ДатаСтроки + " ("+КомментарийДокумента+")";
		Иначе
			Док.Комментарий=Док.Комментарий+" Выполнено в DataMobile " + ТекущаяДата() + " ("+КомментарийДокумента+")";
		КонецЕсли;		
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Шаблон", ТекШаблон.типдокумента);
		
		СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураПоиска);			  
		
		Для Каждого НовЗнач Из СтрокиПоиска Цикл
			Если НовЗнач.ТипЗнач = "Справочники" Тогда
				Элм = Справочники[НовЗнач.ИмяТаблицы].ПолучитьСсылку(Новый УникальныйИдентификатор(НовЗнач.ГУИД)); 
				Док[НовЗнач.Реквизит] = Элм; 	
			ИначеЕсли НовЗнач.ТипЗнач = "Строка" ИЛИ НовЗнач.ТипЗнач = "Число" ИЛИ НовЗнач.ТипЗнач = "Дата" Тогда
				Док[НовЗнач.Реквизит] = НовЗнач.ЗначениеРеквизита;
			ИначеЕсли НовЗнач.ТипЗнач = "Булево" Тогда
				Если НовЗнач.ЗначениеРеквизита = "Да" Тогда
					Док[НовЗнач.Реквизит] = Истина;
				ИначеЕсли НовЗнач.ЗначениеРеквизита = "Нет" Тогда
					Док[НовЗнач.Реквизит] = Ложь;
				КонецЕсли;
			ИначеЕсли НовЗнач.ТипЗнач = "Перечисления" Тогда	           
				
				ЗначенияПеречисления = ВернутьЗначениеПеречисленияПоСинониму(НовЗнач.ЗначениеРеквизита, НовЗнач.ИмяТаблицы);				
				Док[НовЗнач.Реквизит] = ЗначенияПеречисления;				
			КонецЕсли;
			Попытка
				Если НовЗнач.Реквизит = "Склад" Тогда
					ПерезаписьСклада = Ложь;
				КонецЕсли;
			Исключение 
				ПерезаписьСклада = Истина;
			КонецПопытки;
		КонецЦикла;
		
		Док.Записать();
		
		Попытка
			ЗагруженныйПартнер = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПартнера));		
			Если НЕ ЗагруженныйПартнер = Док.Партнер Тогда
				Док.Партнер = ЗагруженныйПартнер; 
				
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Док.Партнер, Док.Контрагент);
				Если Док.Метаданные().Имя="РеализацияТоваровУслуг" Или Док.Метаданные().Имя="ЗаказКлиента" Тогда
					Док.ЗаполнитьУсловияПродажПоУмолчанию();
				ИначеЕсли Док.Метаданные().Имя= "ПриобретениеТоваровУслуг" Или Док.Метаданные().Имя= "ЗаказПоставщику" Тогда
					Док.ЗаполнитьУсловияЗакупокПоУмолчанию();
					Док.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, Док.Договор);
				ИначеЕсли Док.Метаданные().Имя= "ВозвратТоваровОтКлиента" Тогда
					Док.ЗаполнитьУсловияПродажПоУмолчанию();
				КонецЕсли;
			КонецЕсли;		
		Исключение
		КонецПопытки;
		
		Если ПерезаписьСклада Тогда
			попытка
				ЗагруженныйСклад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСклада));
				Если НЕ ЗагруженныйСклад = Док.Склад Тогда
					Док.Склад = ЗагруженныйСклад; 	
				КонецЕсли;	
			Исключение	
			КонецПопытки;
		КонецЕсли;
	Если Док.Метаданные().Имя= "ЧекККМ" Тогда 
		СтруктураСостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Док.КассаККМ);
		Если Док.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена Тогда
			Док.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
			Попытка Док.НомерЧекаККМ = НомерПоследнегоЧека() + 1; Исключение КонецПопытки;
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя= "РасходныйОрдерНаТовары" Тогда
		Если ЭтоНовыйДокумент тогда
			Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;
		Иначе
			Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;			
		КонецЕсли;		
	КонецЕсли;	
		
		
		Пока н<=тхт.КоличествоСтрок() Цикл
			СтрокаТаб=Тхт.ПолучитьСтроку(н);//<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;
			СтрокаТаб=СтрЗаменить(СтрокаТаб,";",Символы.ПС);
			СтрокаПодорИлиРазмещение = СтрПолучитьСтроку(СтрокаТаб,1);
			
			Если СтрокаПодорИлиРазмещение = "S" Тогда
				ЭтоПодбор = Истина;
			Иначе	
				ЭтоПодбор = Ложь; 		
			КонецЕсли;
			
			
			ИдентификаторТовара=СтрПолучитьСтроку(СтрокаТаб,2);
			ШтрихкодТовара=СтрПолучитьСтроку(СтрокаТаб,3);
			
			НаименованиеТовара=СтрПолучитьСтроку(СтрокаТаб,9);
			Номенклатура=ПолучитьНоменклатуру(ИдентификаторТовара,ШтрихкодТовара,НаименованиеТовара);
			Если Номенклатура="" Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст="Ошибка загрузки номенклатуры!";
				Сообщение.Сообщить();
				Возврат Неопределено;
			КонецЕсли;	
			
			ТекТовар=Номенклатура.Получить(0).Значение;
			ТекХР=Номенклатура.Получить(1).Значение;
			ТекЕИ=Номенклатура.Получить(2).Значение;
			ТекКф=Номенклатура.Получить(3).Значение;
			ТекУпак=Номенклатура.Получить(4).Значение;
									
			
			СтрокаСерии=СтрПолучитьСтроку(СтрокаТаб,4);
			ТекущаяСерияСсылка = ПолучитьСерию(СтрокаСерии,ТекТовар,ТекШаблон.СерияПоДате,ТекШаблон.СоздаватьСерииЕслиНеНайдены);

			Ячейка=СтрПолучитьСтроку(СтрокаТаб,5);
			ТекЯчейка  = ПолучитьЯчейкуПоКодуИлиШтрихкоду(Ячейка);
			
			Если НЕ ТекЯчейка.Пустая() тогда
				Если ТекШаблон.ЗаполнятьСкладПодбор тогда
					Попытка Док.Склад = ТекЯчейка.Владелец Исключение КонецПопытки;
					Попытка Док.СкладОтправитель = ТекЯчейка.Владелец Исключение КонецПопытки;	
					Попытка Док.Помещение = ТекЯчейка.Помещение Исключение КонецПопытки;
					Попытка Док.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Док.Склад, Док.Помещение); Исключение КонецПопытки;
				КонецЕсли;
				
				Если ТекШаблон.ЗаполнятьСкладПриемка тогда
					Попытка Док.Склад = ТекЯчейка.Владелец Исключение КонецПопытки;
					Попытка Док.СкладПолучатель = ТекЯчейка.Владелец Исключение КонецПопытки;	
					Попытка Док.Помещение = ТекЯчейка.Помещение Исключение КонецПопытки;
					Попытка Док.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Док.Склад, Док.Помещение);Исключение КонецПопытки;
				КонецЕсли;	
			КонецЕсли;


			Попытка 
				КоэффициентУпаковки = ТекУпак.Числитель/ТекУпак.Знаменатель;
				КоэффициентУпаковки = ?(КоэффициентУпаковки=0,1,КоэффициентУпаковки);
			Исключение
				КоэффициентУпаковки = ?(ТекУпак.Числитель=0,1,ТекУпак.Числитель);
			Конецпопытки;
			
			Если ТекШаблон.НеИспользоватьПересчетУпаковок тогда
				КоэффициентУпаковки = 1;
			КонецЕсли;	

			Если Не ЗначениеЗаполнено(ТекЕИ) тогда
				ТекЕИ=ТекТовар.ЕдиницаИзмерения;
			КонецЕсли;	


			Количество=СтрПолучитьСтроку(СтрокаТаб,6);		
			Количество=СтрЗаменить(Количество,",",".");
			
			Попытка ТекКол=Число(Количество) Исключение ТекКол=0; КонецПопытки;
			Попытка ТекКол=ТекКол/КоэффициентУпаковки; Исключение КонецПопытки;

			Автор=СтрПолучитьСтроку(СтрокаТаб,8);
			УстановитьАвтора(Док,Автор);
			
			НоваяЦена=СтрПолучитьСтроку(СтрокаТаб,17);
			Попытка
				НоваяЦена = Число(НоваяЦена);
			Исключение
				НоваяЦена = 0;
			КонецПопытки;	
			
			н=н+1;
						
			Если ЭтоПодбор тогда
				Если Об.ТабличнуюЧастьПриЗагрузкеПодбор=0 тогда
					продолжить;
				КонецЕсли;


				лСтруктураПоиска=Новый Структура("Номенклатура,Характеристика",ТекТовар,ТекХР);

					лЕстьЯчейка=((ТекШаблон.ИспользованиеЯчеекПодбор>0) и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Ячейка")<>Неопределено));
					лЕстьУпаковка=(Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка")<>Неопределено);
					лЕстьКоличествоУпаковок=(Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоУпаковок")<>Неопределено);
					лЕстьСерия=(ТекШаблон.ИспользованиеСерийниковПодбор>0 и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Серия")<>Неопределено) и НЕ ТекШаблон.СерииВОтдельнойТЧ);
					Если лЕстьУпаковка тогда
						Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
							Если Док.Склад.ИспользоватьАдресноеХранение или Док.Помещение.ИспользоватьАдресноеХранение  тогда
								лСтруктураПоиска.Вставить("Упаковка",ТекУпак);
							КонецЕсли;	
						Иначе	
							лСтруктураПоиска.Вставить("Упаковка",ТекУпак);
						КонецЕсли;	
					КонецЕсли;	
					
					Если лЕстьСерия тогда
						лСтруктураПоиска.Вставить("Серия",ТекущаяСерияСсылка);
					КонецЕсли;

					Если лЕстьЯчейка тогда
						лСтруктураПоиска.Вставить("Ячейка",ТекЯчейка);
					КонецЕсли;
	
					СтрокиПоиска=Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
					Если СтрокиПоиска.Количество()=0 тогда
						СтрокаТабличнойЧасти=Док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
						СтрокаТабличнойЧасти.Номенклатура=ТекТовар;
						СтрокаТабличнойЧасти.Характеристика=ТекХР;
						Если лЕстьУпаковка тогда
							Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
								Если Док.Склад.ИспользоватьАдресноеХранение  или Док.Помещение.ИспользоватьАдресноеХранение тогда
									СтрокаТабличнойЧасти.Упаковка=ТекУпак;
								КонецЕсли;	
							Иначе
								СтрокаТабличнойЧасти.Упаковка=ТекУпак;
							КонецЕсли;
						КонецЕсли;
						Если лЕстьСерия тогда
							СтрокаТабличнойЧасти.Серия=ТекущаяСерияСсылка;
						КонецЕсли;
						Если лЕстьЯчейка тогда
							СтрокаТабличнойЧасти.Ячейка=ТекЯчейка;
						КонецЕсли;
								
						ОбработатьНовуюСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧасти,ИсходныеДанныеПодбор);
					Иначе	
						СтрокаТабличнойЧасти=СтрокиПоиска[0];
					КонецЕсли;
					
					//Новые цены
					Попытка
						Если Док.Метаданные().Имя="УстановкаЦенНоменклатуры" Тогда
							Если Док.ВидыЦен.Количество()>0 тогда
								СтрокаТабличнойЧасти.ВидЦены = Док.ВидыЦен[0].ВидЦены;	
							Иначе	
								СтрокаТабличнойЧасти.ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию();
							КонецЕсли;
							СтрокаТабличнойЧасти.Цена = НоваяЦена;
							СтрокаТабличнойЧасти.ЦенаИзмененаВручную = Истина;
						ИначеЕсли НоваяЦена <> 0 Тогда
							Попытка СтрокаТабличнойЧасти.Цена = НоваяЦена; Исключение КонецПопытки; 	 
						КонецЕсли;
					Исключение
					Конецпопытки;
					

				Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
					Если Док.Склад.ИспользоватьАдресноеХранение  или Док.Помещение.ИспользоватьАдресноеХранение  тогда		
						СтрокаТабличнойЧасти.КоличествоУпаковокФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт+ТекКол;
						СтрокаТабличнойЧасти.КоличествоФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт*КоэффициентУпаковки;
					Иначе
						СтрокаТабличнойЧасти.КоличествоУпаковокФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт+ТекКол*КоэффициентУпаковки;
						СтрокаТабличнойЧасти.КоличествоФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт;
					КонецЕсли;	
				ИначеЕсли Док.Метаданные().Имя="УстановкаЦенНоменклатуры" Тогда
					//нет количества в данном документе
				ИначеЕсли лЕстьКоличествоУпаковок тогда
					СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+ТекКол;
					СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
				Иначе	
	                СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество+ТекКол*КоэффициентУпаковки;
				КонецЕсли;	
				
				Если НЕ СтрПолучитьСтроку(СтрокаТаб,19) = Неопределено И ЗначениеЗаполнено(СтрПолучитьСтроку(СтрокаТаб,19)) Тогда
					ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(СтрокаТабличнойЧасти, СтрПолучитьСтроку(СтрокаТаб,19), ТекШаблон);
				КонецЕсли;

				ОбработатьСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧасти, ТекШаблон);
				
				
					//Серии в отдельной ТЧ
					Если Док.метаданные().ТабличныеЧасти.Найти("Серии")<>Неопределено и НЕ ТекущаяСерияСсылка.Пустая() и ТекШаблон.СерииВОтдельнойТЧ тогда
						
						Если Док.Метаданные().Имя="РеализацияТоваровУслуг" Тогда
							Попытка
								Если Док.Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено Тогда
									Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;	
								КонецЕсли;
							Исключение
							КонецПопытки;
						КонецЕсли;
						
						//Если Док.Метаданные().Имя="ПоступлениеТоваровУслуг" или Док.Метаданные().Имя="ПриобретениеТоваровУслуг" или (СтрокаТабличнойЧасти.СтатусУказанияСерий<>13 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>14 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>9 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>10  и СтрокаТабличнойЧасти.СтатусУказанияСерий<>0) тогда
							лСтруктураПоискаСерий=Новый Структура("Номенклатура,Характеристика,Серия",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика,ТекущаяСерияСсылка);
							СтрокиПоискаСерий=Док["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
							Если СтрокиПоискаСерий.Количество()=0 тогда
								СтрокаТабличнойЧастиСерии=Док["Серии"].Добавить();
								СтрокаТабличнойЧастиСерии.Номенклатура=СтрокаТабличнойЧасти.Номенклатура;
								СтрокаТабличнойЧастиСерии.Характеристика=СтрокаТабличнойЧасти.Характеристика;
								СтрокаТабличнойЧастиСерии.Серия=ТекущаяСерияСсылка;
								Попытка СтрокаТабличнойЧастиСерии.Склад=СтрокаТабличнойЧасти.Склад; Исключение КонецПопытки;
								Попытка СтрокаТабличнойЧастиСерии.Назначение=СтрокаТабличнойЧасти.Назначение; Исключение КонецПопытки;
							Иначе	
								СтрокаТабличнойЧастиСерии=СтрокиПоискаСерий[0];
							КонецЕсли;
							
							СтрокаТабличнойЧастиСерии.Количество=СтрокаТабличнойЧастиСерии.Количество+ТекКол*КоэффициентУпаковки;
						//КонецЕсли;
					КонецЕсли;	
					//Серии в отдельной ТЧ

			КонецЕсли;
				
			Если НЕ ЭтоПодбор тогда
				
				Если Об.ТабличнуюЧастьПриЗагрузкеПриемка=0 тогда
					продолжить;
				КонецЕсли;

				лСтруктураПоиска=Новый Структура("Номенклатура,Характеристика",ТекТовар,ТекХР);

					лЕстьЯчейка=((ТекШаблон.ИспользованиеЯчеекПриемка>0) и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Ячейка")<>Неопределено));
					лЕстьУпаковка=(Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Упаковка")<>Неопределено);
					Если лЕстьУпаковка тогда
						лСтруктураПоиска.Вставить("Упаковка",ТекУпак);
					КонецЕсли;	
					Если лЕстьЯчейка тогда
						лСтруктураПоиска.Вставить("Ячейка",ТекЯчейка);
					КонецЕсли;
					СтрокиПоиска=Док[ПараметрыДокумента.ИмяТЧПриемка].НайтиСтроки(лСтруктураПоиска);
					Если СтрокиПоиска.Количество()=0 тогда
						СтрокаТабличнойЧасти=Док[ПараметрыДокумента.ИмяТЧПриемка].Добавить();
						СтрокаТабличнойЧасти.Номенклатура=ТекТовар;
						СтрокаТабличнойЧасти.Характеристика=ТекХР;
						Если лЕстьУпаковка тогда
							СтрокаТабличнойЧасти.Упаковка=ТекУпак;
						КонецЕсли;	
						Если лЕстьЯчейка тогда
							СтрокаТабличнойЧасти.Ячейка=ТекЯчейка;
						КонецЕсли;	
						ОбработатьНовуюСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПриемка,СтрокаТабличнойЧасти);
					Иначе	
						СтрокаТабличнойЧасти=СтрокиПоиска[0];
					КонецЕсли;	
						
					СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+ТекКол;
					СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
					
					Если НЕ СтрПолучитьСтроку(СтрокаТаб,19) = Неопределено И ЗначениеЗаполнено(СтрПолучитьСтроку(СтрокаТаб,19)) Тогда
					 	ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(СтрокаТабличнойЧасти, СтрПолучитьСтроку(СтрокаТаб,19), ТекШаблон);
					КонецЕсли;
				ОбработатьСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПриемка,СтрокаТабличнойЧасти, ТекШаблон);
			КонецЕсли;
	

		КонецЦикла;	
		
		

		УдалитьСтрокиСНулевымКоличеством(Док,ТекШаблон,Об,ОчисткаНулевыхСтрок);			

	Иначе  //ЕГАИС
		
			лТабФактПиво = СоздатьТабФактПиво();
			
			ЕстьРасхождения = Ложь;

		    СобратьПараметрыЕГАИС(Док,ПараметрыДокумента);
			
			Если ПараметрыДокумента.ЕстьТЧМарок и Об.ТабличнуюЧастьПриЗагрузкеПодбор=2 тогда
				Док.АкцизныеМарки.Очистить();
			КонецЕсли;
			
			Если ПараметрыДокумента.ЭтоВходящееНаправление тогда
				ТЗМарок = ПолучитьМаркиВходящейТТН_ЕГАИС(Док.Ссылка);
			КонецЕсли;

			Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт и Об.ТабличнуюЧастьПриЗагрузкеПодбор=2 Тогда
				Для Каждого СтрокаИсходного ИЗ Док[ПараметрыДокумента.ИмяТЧПодбор] Цикл	
					СтрокаИсходного.КоличествоФакт = 0;
				КонецЦикла;
			КонецЕсли;	
			

				
			Док.Комментарий=" Выполнено в DataMobile  "+ТекущаяДата();
			
			Если ПараметрыДокумента.ЕстьРеквизитВерсияСхемыТТН И ЭтоНовыйДокумент Тогда
				Если ТекШаблон.ВерсияЕГАИС = 1 Тогда 
					Док.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;	
				Иначе
					Док.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2;	
				КонецЕсли;	
			КонецЕсли;


			
		СтрокаДока=Тхт.ПолучитьСтроку(1);
		СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
		н=2;
		Если СокрЛП(СтрПолучитьСтроку(СтрокаДока,1)) = "doc_forms" Тогда
			ДополнительныеФормыШапки = СтрокаДока;
			н=3;
		КонецЕсли;                                                
		Пока н<=тхт.КоличествоСтрок() Цикл
			СтрокаТаб=Тхт.ПолучитьСтроку(н);//<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;<ДатаРозливаЕГАИС>;<PDFЕГАИС>;<Марка>;
			СтрокаТаб=СтрЗаменить(СтрокаТаб,";",Символы.ПС);
			ИдентификаторТовара=СтрПолучитьСтроку(СтрокаТаб,2);
			Префикс=Лев(ИдентификаторТовара,3);
			ШтрихкодТовара=СтрПолучитьСтроку(СтрокаТаб,3);
			НаименованиеТовара=СтрПолучитьСтроку(СтрокаТаб,9);
			КодЕГАИСПолный = СокрЛП(СтрПолучитьСтроку(СтрокаТаб,11));
			
			НоменклатураЕГАИС = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
			КодНоменклатурыЕГАИС = "";
			ТекТовар = Справочники.Номенклатура.ПустаяСсылка();
				
			Если Префикс="8e-" Тогда 
				ИдентификаторТовара=СокрЛП(Сред(ИдентификаторТовара,4));
				Попытка  // получение номенклатуры ЕГАИС по идентификатору
					ГУИД=Новый УникальныйИдентификатор(ИдентификаторТовара);
					НоменклатураЕГАИС=Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПолучитьСсылку(ГУИД);
					КодНоменклатурыЕГАИС = НоменклатураЕГАИС.Код;
				Исключение
				КонецПопытки;
				
			ИначеЕсли Префикс = "8U-" Тогда //Если пришло пиво
				
				ИдентификаторТовара=СокрЛП(Сред(ИдентификаторТовара,4, 36));
				Попытка
					ГУИД = Новый УникальныйИдентификатор(ИдентификаторТовара);
					лНоменклатура = Справочники.Номенклатура.ПолучитьСсылку(ГУИД);
					НоменклатураЕГАИС = ПолучитьНоменклатуруЕГАИСпоНоменклатуре(лНоменклатура);
					
					Если НЕ НоменклатураЕГАИС = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
						СтрокаТабФактПиво = лТабФактПиво.Добавить();
						СтрокаТабФактПиво.Товар = НоменклатураЕГАИС;
						СтрокаТабФактПиво.ФактКол = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,6),",",".");
					КонецЕсли;
					
					КодНоменклатурыЕГАИС = НоменклатураЕГАИС.Код;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			Если НоменклатураЕГАИС = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() тогда
				Если стрДлина(КодЕГАИСПолный) = 68 тогда
					КодНоменклатурыЕГАИС = КодНоменклатурыЕГАИСПоPDF417(КодЕГАИСПолный);
					НоменклатураЕГАИС = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду(КодНоменклатурыЕГАИС);
				КонецЕсли;
			КонецЕсли;

			
			Номенклатура=ПолучитьНоменклатуруЕГАИС(ШтрихкодТовара,НаименованиеТовара,НоменклатураЕГАИС);
		
			ТекТовар=Номенклатура.Получить(0).Значение;
			ТекХР=Номенклатура.Получить(1).Значение;
			ТекЕИ=Номенклатура.Получить(2).Значение;
			ТекКф=Номенклатура.Получить(3).Значение;
			
			ДатаРозливаСтрока = СтрПолучитьСтроку(СтрокаТаб,13);
			Попытка
				ГодРозлива = "20"+Сред(ДатаРозливаСтрока,5,2);
				ДеньРозлива = ЛЕВ(ДатаРозливаСтрока,2);
				МесяцРозлива = СтрЗаменить(МесяцРозлива,"/","");
				МесяцРозлива = Сред(ДатаРозливаСтрока,3,2);
				ДатаРозливаГотовая = Дата(ГодРозлива, МесяцРозлива, ДеньРозлива);
			Исключение
				ДатаРозливаГотовая = Дата(1, 1, 1);
			КонецПопытки;	
			
			Если ТекШаблон.СопоставлениеЕГАИС Тогда
				Если ПараметрыДокумента.КодыНепроверяемыхМарок.НайтиПоЗНачению(ТекТовар.ВидАлкогольнойПродукции) = Неопределено Тогда	
					Если НоменклатураЕГАИС = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
						
					ИначеЕсли ТекТовар = Справочники.Номенклатура.ПустаяСсылка() Тогда
						
					Иначе
					
					ЗапросСопоставления = Новый Запрос;
					ЗапросСопоставления.УстановитьПараметр("НоменклатураЕГАИС" , НоменклатураЕГАИС);
					ЗапросСопоставления.УстановитьПараметр("Номенклатура", ТекТовар);
					ЗапросСопоставления.УстановитьПараметр("ЕдиницаИзмерения", ТекЕИ);
					ЗапросСопоставления.УстановитьПараметр("Характеристика", ТекХР);
					ЗапросСопоставления.Текст = "ВЫБРАТЬ
					                            |	ИСТИНА КАК Сопоставлен
					                            |ИЗ
					                            |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК ЕГАИС_СоответствиеНоменклатуры
					                            |ГДЕ
					                            |	ЕГАИС_СоответствиеНоменклатуры.АлкогольнаяПродукция = &НоменклатураЕГАИС
					                            |	И ЕГАИС_СоответствиеНоменклатуры.Номенклатура = &Номенклатура
					                            |	И ЕГАИС_СоответствиеНоменклатуры.Характеристика = &Характеристика";
												
												Если ЗапросСопоставления.Выполнить().Пустой() Тогда													
													МенеджерЗаписиЕГАИС = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
													МенеджерЗаписиЕГАИС.АлкогольнаяПродукция = НоменклатураЕГАИС;
													МенеджерЗаписиЕГАИС.Номенклатура = ТекТовар;
													МенеджерЗаписиЕГАИС.Характеристика = ТекХР;
													МенеджерЗаписиЕГАИС.Записать();	
												КонецЕсли;

					КонецЕсли;
				КонецЕсли;							
			КонецЕсли;
			
			Количество=СтрПолучитьСтроку(СтрокаТаб,6);
			Количество=СтрЗаменить(Количество,",",".");
			ТекКол=Число(Количество);
			Автор=СтрПолучитьСтроку(СтрокаТаб,8);
			УстановитьАвтора(Док,Автор);
			Марка =  СокрЛП(СтрПолучитьСтроку(СтрокаТаб,12));
			н=н+1;

			
			Если Об.ТабличнуюЧастьПриЗагрузкеПодбор=0 тогда
				продолжить;
			КонецЕсли;

				СтрТЧ=Новый Структура();
				СтрТЧ.Вставить("Номенклатура",ТекТовар);
				СтрТЧ.Вставить("ЕдиницаИзмерения",ТекЕИ);
				СтрТЧ.Вставить("ЕгаисДатаРозлива",ДатаРозливаГотовая);
				СтрТЧ.Вставить("КодНоменклатурыЕГАИС",КодНоменклатурыЕГАИС);
				СтрТЧ.Вставить("ЕгаисПолныйКод",КодЕГАИСПолный);
				СтрТЧ.Вставить("НоменклатураЕГАИС",НоменклатураЕГАИС);
				СтрТЧ.Вставить("Характеристика",ТекХР);
				СтрТЧ.Вставить("ШтрихкодТовара",ШтрихкодТовара);
				СтрТЧ.Вставить("Марка",Марка);
			    СтрТЧ.Вставить("Пользователь",Автор);
			    СтрТЧ.Вставить("Количество",ТекКол);
				
			Если СокрЛП(Об.тчПодбор)<>"" тогда
					
					Если ТекКол = 0 тогда
						Продолжить;
					КонецЕсли;	
					
					//Поиск строк сначала по маркам затем по ЕГАИС номенклатуре и реквизитам
					ПоискПоМарке = Ложь;
					ТекущаяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",СтрТЧ.ЕгаисПолныйКод);
					Если ТекущаяАкцизнаяМарка.Пустая() и СтрТЧ.ЕгаисПолныйКод <>"" тогда
						   НоваяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
						   НоваяАкцизнаяМарка.ЗначениеШтрихкода = СтрТЧ.ЕгаисПолныйКод;
						   Если стрДлина(СтрТЧ.ЕгаисПолныйКод)=68 тогда
							   НоваяАкцизнаяМарка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
						   Иначе
							   НоваяАкцизнаяМарка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
						   КонецЕсли; 
						   НоваяАкцизнаяМарка.Номенклатура = СтрТЧ.Номенклатура;
						   НоваяАкцизнаяМарка.ДатаУпаковки = ТекущаяДата();
						   НоваяАкцизнаяМарка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
						   Попытка НоваяАкцизнаяМарка.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(СтрТЧ.Пользователь,Ложь); Исключение КонецПопытки;
						   НоваяАкцизнаяМарка.Количество = 1;
						   НоваяАкцизнаяМарка.Записать();
						   ТекущаяАкцизнаяМарка = НоваяАкцизнаяМарка.Ссылка;
					КонецЕсли;

					Если НЕ ТекущаяАкцизнаяМарка.Пустая() тогда						
						Если ПараметрыДокумента.ЭтоВходящееНаправление тогда
							СтруктураПоискаМарокТТН = Новый Структура("Марка",СтрТЧ.ЕгаисПолныйКод);
							СтрокиПоискаМарокТТН = ТЗМарок.НайтиСтроки(СтруктураПоискаМарокТТН);	
							Если СтрокиПоискаМарокТТН.Количество()>0 Тогда
								ТекущаяСправка2 = СтрокиПоискаМарокТТН[0].Справка2;
								ПоискПоМарке = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;


				Если Док.Метаданные().Имя<>"ВскрытиеТарыЕГАИС" и Док.Метаданные().Имя<>"УдалитьВскрытиеТарыЕГАИС" и Док.Метаданные().Имя <> "ВозвратТоваровОтПокупателя" Тогда
					Если ПоискПоМарке Тогда
						СтрокиПоиска=Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция, Справка2",НоменклатураЕГАИС,ТекущаяСправка2));	
					ИначеЕсли ПараметрыДокумента.ЕстьРеквизитДатаРозлива И ЗначениеЗаполнено(СтрТч.ЕгаисДатаРозлива) Тогда
						СтрокиПоиска=Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция, ДатаРозлива",НоменклатураЕГАИС, СтрТч.ЕгаисДатаРозлива));
					Иначе
						СтрокиПоиска=Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция",НоменклатураЕГАИС));
					КонецЕсли;
				Иначе	
				    СтрокиПоиска=Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура",СтрТЧ.Номенклатура));					
				КонецЕсли;
				//Для пива
				Если НоменклатураЕГАИС = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() тогда
					СтрокиПоиска=Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура",СтрТЧ.Номенклатура));					
				КонецЕсли;

					
				Если СтрокиПоиска.Количество()=0 тогда
					Если Док.Метаданные().Имя="ТТНВходящаяЕГАИС" Тогда
						ЕстьРасхождения = ИСТИНА;
						Продолжить;
					КонецЕсли;

					СтрокаТабличнойЧасти=Док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();					
					
					Если ПараметрыДокумента.ЕстьРеквизитАлкогольнаяПродукция Тогда
						СтрокаТабличнойЧасти.АлкогольнаяПродукция=НоменклатураЕГАИС;
					КонецЕсли;

					Если ПараметрыДокумента.ЕстьРеквизитНоменклатура Тогда
						СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					КонецЕсли;	

					
					ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,Док,ПараметрыДокумента,ТекШаблон,СтрТЧ,СтрТЧ.Количество);
				
				ИначеЕсли СтрокиПоиска.Количество()=1 тогда
					СтрокаТабличнойЧасти=СтрокиПоиска[0];
					
					ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,Док,ПараметрыДокумента,ТекШаблон,СтрТЧ,СтрТЧ.Количество);
				Иначе // несколько строк, надо распределить
					
					Если Док.Метаданные().Имя="ТТНВходящаяЕГАИС" или Док.Метаданные().Имя="ТТНИсходящаяЕГАИС" Тогда											

						n=0;
						КоличествоДляВнесения = СтрТЧ.Количество;    
						Для каждого СтрокаТабличнойЧасти из  СтрокиПоиска цикл
							n=n+1;
					//		//исключить строки с указанными марками
					//			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
					//				СтрокаТабличнойЧасти.ИдентификаторСтроки = СокрЛП(Новый УникальныйИдентификатор());
					//			КонецЕсли;
					//			ТекущийИдентификаторСтроки = СтрокаТабличнойЧасти.ИдентификаторСтроки;
					//			МассивАкцизныхМарок = Док.ДанныеМарок.НайтиСтроки(Новый Структура("ИдентификаторСтроки,ДобавленаВручную,Считана", ТекущийИдентификаторСтроки,Ложь,Ложь));
					//			КоличествоМарок = МассивАкцизныхМарок.Количество();
					//			Если СтрокаТабличнойЧасти.Количество=КоличествоМарок и СтрокиПоиска.Количество()<>n тогда
					//				Продолжить;
					//			КонецЕсли;	
					//		//исключить строки с указанными марками
						
							КоличествоВСтрокеЗадание = СтрокаТабличнойЧасти.Количество; 
							КоличествоВСтрокеФакт = СтрокаТабличнойЧасти.КоличествоФакт; 
							ОсталосьВнести =  КоличествоВСтрокеЗадание  - КоличествоВСтрокеФакт;
							Если ОсталосьВнести>= КоличествоДляВнесения тогда
								ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,Док,ПараметрыДокумента,ТекШаблон,СтрТЧ,КоличествоДляВнесения);
								Прервать;
							Иначе
								Если СтрокиПоиска.Количество()=n тогда
									ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,Док,ПараметрыДокумента,ТекШаблон,СтрТЧ,КоличествоДляВнесения);
									Прервать;
								Иначе
									Если ОсталосьВнести = 0 тогда
										Продолжить;
									КонецЕсли;
									ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,Док,ПараметрыДокумента,ТекШаблон,СтрТЧ,ОсталосьВнести); 
									КоличествоДляВнесения=КоличествоДляВнесения-ОсталосьВнести;  
									Если КоличествоДляВнесения = 0 тогда
										Прервать;
									Иначе
										Продолжить;
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла
					//	
					Иначе //пока нет партий
						СтрокаТабличнойЧасти=СтрокиПоиска[0];

						ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,Док,ПараметрыДокумента,ТекШаблон,СтрТЧ,СтрТЧ.Количество);
					КонецЕсли;

				КонецЕсли;		
					
					
			КонецЕсли;
							
			
		КонецЦикла;
		
	КонецЕсли;
		

	Если  ТекШаблон.ИспользоватьЕГАИС тогда
		
		Если ЕстьРасхождения Тогда
			Сообщить("Считаны позиции которых нет во входящей ТТН, они не загружены. Расхождения смотрите в файле данных", СтатусСообщения.Важное);
		КонецЕсли;
		
	 	Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт и Об.ТабличнуюЧастьПриЗагрузкеПодбор<>0 Тогда
			Для Каждого СтрокаИсходного ИЗ Док[ПараметрыДокумента.ИмяТЧПодбор] Цикл
				Если СтрокаИсходного.КоличествоФакт <> СтрокаИсходного.Количество тогда
					Док.ЕстьРасхождения = Истина;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		
		Если Док.Метаданные().Имя="ТТНВходящаяЕГАИС"  тогда	
			Попытка 
				Док.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Выполняется;
			Исключение	
				Док.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;	
			КонецПопытки;	
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения = Ложь;
			ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС;
			ПараметрыОбновленияСтатуса.ДокументОбъект    = Док;		
			Документы.ТТНВходящаяЕГАИС.ОбновитьСтатусПослеПолученияДанных(Док.Ссылка, Перечисления.ВидыДокументовЕГАИС.ТТН, ПараметрыОбновленияСтатуса);
			
			Попытка Документы.ТТНВходящаяЕГАИС.ПриИзмененииСтатусаДокумента(Док.Ссылка, Неопределено, Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС, ПараметрыОбновленияСтатуса); Исключение КонецПопытки;

		ИначеЕсли Док.Метаданные().Имя="ТТНИсходящаяЕГАИС" тогда
			Попытка 
				Док.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Выполняется;
			Исключение	
				Док.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;	
			КонецПопытки;	
		КонецЕсли;
		
	КонецЕсли;	
	Если ТекШаблон.ИспользованиеСерийниковПодбор > 0 или ТекШаблон.ИспользованиеСерийниковПриемка > 0 Тогда	
		Попытка УстановитьСерииВдокументе(Док); Исключение КонецПопытки;
	КонецЕсли;
	Если НЕ ДополнительныеФормыШапки = Неопределено И ЗначениеЗаполнено(ДополнительныеФормыШапки) Тогда
		Попытка ИзменитьРеквизитыШапкиИзДополнительныхФорм(Док, ДополнительныеФормыШапки, ТекШаблон); Исключение КонецПопытки;
	КонецЕсли;
	Док.Записать(РежимЗаписиДокумента.Запись);
	//ЗафиксироватьТранзакцию();
	
	Если ПроводитьДокументы тогда
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение 
		КонецПопытки;
	КонецЕсли;	

	ЭтотОбъект.ТабФактПиво.Очистить();
	Если лТабФактПиво <> Неопределено Тогда
		ЭтотОбъект.ТабФактПиво.Загрузить(лТабФактПиво);
	КонецЕсли;
	
	Возврат Док.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьДатуИзСтрокиПоФормату(ДатаСтрокой, Шаблон)
	Если ЗначениеЗаполнено(Шаблон.ПравилаВводаСерииПриемка) Тогда
		ТекущаяМаска = ВРег(Шаблон.ПравилаВводаСерииПриемка);
	ИначеЕсли ЗначениеЗаполнено(Шаблон.ПравилаВводаСерииПодбор) Тогда
		ТекущаяМаска = ВРег(Шаблон.ПравилаВводаСерииПодбор);
	Иначе
		ТекущаяМаска = "DD.MM.YYYY";
	КонецЕсли;
	ПараметрДня = ПолучитьМестоИколичествоСимволовПараметраДаты("D", ТекущаяМаска);
	ПараметрМесяца = ПолучитьМестоИколичествоСимволовПараметраДаты("M", ТекущаяМаска);
	ПараметрГода = ПолучитьМестоИколичествоСимволовПараметраДаты("Y", ТекущаяМаска);
	День = Сред(ДатаСтрокой,ПараметрДня.Начало, ПараметрДня.Количество); 
	Месяц = Сред(ДатаСтрокой,ПараметрМесяца.Начало, ПараметрМесяца.Количество); 
	Год = ?(ПараметрГода.Количество = 2, "20", "") + Сред(ДатаСтрокой,ПараметрГода.Начало, ПараметрГода.Количество); 
	Попытка
		ФорматированнаяДата = Дата(Число(Год), Число(Месяц), Число(День));
		Возврат ФорматированнаяДата;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция ПолучитьМестоИколичествоСимволовПараметраДаты(Символ, Маска)
	
	МаскаИзменение = Маска;
	КоличествоСимволов = 0;
	ПараметрВремени = Новый Структура;
	ПараметрВремени.Вставить("Начало", 0);
	ПараметрВремени.Вставить("Количество",КоличествоСимволов);
	
	Пока НЕ СтрНайти(МаскаИзменение,Символ) = 0 Цикл
		КоличествоСимволов = КоличествоСимволов + 1;
		Если КоличествоСимволов = 1 Тогда
			ПараметрВремени.Вставить("Начало", СтрНайти(МаскаИзменение,Символ));
		КонецЕсли;
		ПараметрВремени.Вставить("Количество",КоличествоСимволов);
		МаскаИзменение = Сред(МаскаИзменение, СтрНайти(МаскаИзменение,Символ)+1);
	КонецЦикла;
	
	Возврат ПараметрВремени;
		
КонецФункции

&НаСервере
Процедура ИзменитьРеквизитыШапкиИзДополнительныхФорм(Док, ФормыJson, ТекШаблон)
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СокрЛП(СтрПолучитьСтроку(ФормыJson,2)));	
	Структура = ПрочитатьJSON(ЧтениеJSON);	
	ЧтениеJSON.Закрыть();
	Для каждого форма из Структура Цикл
		Парам = Новый Структура;
		Парам.Вставить("РеквизитШапки", 1);
		Парам.Вставить("ИД", форма.stepId);
		НайденныеФормы = ДополнительныеФормы.НайтиСтроки(Парам);
		Если НайденныеФормы.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(НайденныеФормы[0].ЗаполняемыйРеквизит) Тогда
				ЗначениеПодстановки = форма.stepValue;
				Если НЕ (НайденныеФормы[0].ТипДанных = "Текст" ИЛИ НайденныеФормы[0].ТипДанных = "Число" ИЛИ НайденныеФормы[0].ТипДанных = "Дата") Тогда
					Попытка
						Если НЕ Метаданные.Справочники.Найти(НайденныеФормы[0].ТипДанных) = Неопределено Тогда
							ЗначениеПодстановки = Справочники[НайденныеФормы[0].ТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПодстановки));
						ИначеЕсли НЕ Метаданные.Перечисления.Найти(НайденныеФормы[0].ТипДанных) = Неопределено Тогда
							ИндексПеречисления = Число(Сред(ЗначениеПодстановки,СтрНайти(ЗначениеПодстановки, ".")+1));
							ЗначениеПодстановки = Перечисления[НайденныеФормы[0].ТипДанных][ИндексПеречисления]
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				Если НайденныеФормы[0].ТипДанных = "Дата" Тогда
					ФорматированнаяДата = ПолучитьДатуИзСтрокиПоФормату(ЗначениеПодстановки, ТекШаблон);
					Если НЕ ФорматированнаяДата = Неопределено Тогда
						ЗначениеПодстановки = ФорматированнаяДата;
					Иначе
						Если НЕ ТипЗнч(НайденныеФормы[0].ЗаполняемыйРеквизит) = Тип("Строка") Тогда
							Продолжить;
						КонецЕсли;						  
					КонецЕсли;
				КонецЕсли;
				Если НайденныеФормы[0].ТипДанных = "Число" Тогда
						ЗначениеПодстановки = Число(ЗначениеПодстановки);
				КонецЕсли;

				
				Попытка
					Док[НайденныеФормы[0].ЗаполняемыйРеквизит] = ЗначениеПодстановки;
				Исключение
					Сообщить("Не удалось записать значение реквизита """ + НайденныеФормы[0].ЗаполняемыйРеквизит + """");
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(СтрокаТЧ, ФормыJson, ТекШаблон)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СокрЛП(ФормыJson));	
	Структура = ПрочитатьJSON(ЧтениеJSON);	
	ЧтениеJSON.Закрыть();

	Для каждого форма из Структура Цикл
		Парам = Новый Структура;
		Парам.Вставить("РеквизитШапки", 0);
		Парам.Вставить("ИД", форма.stepId);
		НайденныеФормы = ДополнительныеФормы.НайтиСтроки(Парам);
		Если НайденныеФормы.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(НайденныеФормы[0].ЗаполняемыйРеквизит) Тогда
				ЗначениеПодстановки = форма.stepValue;
				Если НЕ (НайденныеФормы[0].ТипДанных = "Текст" ИЛИ НайденныеФормы[0].ТипДанных = "Число" ИЛИ НайденныеФормы[0].ТипДанных = "Дата") Тогда
					Попытка
						Если НЕ Метаданные.Справочники.Найти(НайденныеФормы[0].ТипДанных) = Неопределено Тогда
							ЗначениеПодстановки = Справочники[НайденныеФормы[0].ТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПодстановки));
						ИначеЕсли НЕ Метаданные.Перечисления.Найти(НайденныеФормы[0].ТипДанных) = Неопределено Тогда
							ИндексПеречисления = Число(Сред(ЗначениеПодстановки,СтрНайти(ЗначениеПодстановки, ".")+1));
							ЗначениеПодстановки = Перечисления[НайденныеФормы[0].ТипДанных][ИндексПеречисления]
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				Если НайденныеФормы[0].ТипДанных = "Дата" Тогда
					ФорматированнаяДата = ПолучитьДатуИзСтрокиПоФормату(ЗначениеПодстановки, ТекШаблон);
					Если НЕ ФорматированнаяДата = Неопределено Тогда
						ЗначениеПодстановки = ФорматированнаяДата;
					Иначе
						Если НЕ ТипЗнч(НайденныеФормы[0].ЗаполняемыйРеквизит) = Тип("Строка") Тогда
							Продолжить;
						КонецЕсли;						  
					КонецЕсли;
				КонецЕсли;
				Если НайденныеФормы[0].ТипДанных = "Число" Тогда
						ЗначениеПодстановки = Число(ЗначениеПодстановки);
				КонецЕсли;

				
				Попытка
					СтрокаТЧ[НайденныеФормы[0].ЗаполняемыйРеквизит] = ЗначениеПодстановки;
				Исключение
					Сообщить("Не удалось записать значение реквизита табличной части """ + НайденныеФормы[0].ЗаполняемыйРеквизит + """");
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	//|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма КАК ДополнительнаяФорма
	//|ИЗ
	//|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
	//|ГДЕ
	//|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон = &Шаблон
	//|	И НЕ ЕСТЬNULL(ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит, """") = """"
	//|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки = 0";
	//
	//Запрос.УстановитьПараметр("Шаблон", Шаблон);
	//
	//ЗаполняемыеКолонки = Запрос.Выполнить().Выгрузить();
	//
	//Для каждого Строка из Док[ИмяТЧ] Цикл
	//	Для каждого Колонка из ЗаполняемыеКолонки Цикл
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//		"ВЫБРАТЬ ПЕРВЫЕ 1
	//		|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение КАК Значение,
	//		|	ДатаМобайл_ЗначенияДополнительныхФорм.Номенклатура КАК Номенклатура,
	//		|	МАКСИМУМ(ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки) КАК ИдентификаторСтроки,
	//		|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма.ТипДанных КАК ТипДанных
	//		|ИЗ
	//		|	РегистрСведений.ДатаМобайл_ЗначенияДополнительныхФорм КАК ДатаМобайл_ЗначенияДополнительныхФорм
	//		|ГДЕ
	//		|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма = &ДополнительнаяФорма
	//		|	И ДатаМобайл_ЗначенияДополнительныхФорм.Документ = &СсылкаНаДокТСД
	//		|	И ДатаМобайл_ЗначенияДополнительныхФорм.Номенклатура = &Номенклатура
	//		|	И ДатаМобайл_ЗначенияДополнительныхФорм.Характеристика = &Характеристика
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение,
	//		|	ДатаМобайл_ЗначенияДополнительныхФорм.Номенклатура,
	//		|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма.ТипДанных
	//		|
	//		|УПОРЯДОЧИТЬ ПО
	//		|	ИдентификаторСтроки УБЫВ";
	//		
	//		Запрос.УстановитьПараметр("СсылкаНаДокТСД", СсылкаНаДокТСД);
	//		Запрос.УстановитьПараметр("ДополнительнаяФорма", Колонка.ДополнительнаяФорма); 
	//		Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
	//		Запрос.УстановитьПараметр("Характеристика", Строка.Характеристика);
	//		
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		Если Выборка.Следующий() Тогда
	//			ЗначениеПодстановки = Выборка.Значение;
	//			Если НЕ (Выборка.ТипДанных = "Текст" ИЛИ Выборка.ТипДанных = "Число" ИЛИ Выборка.ТипДанных = "Дата") Тогда
	//				Попытка
	//					Если НЕ Метаданные.Справочники.Найти(Выборка.ТипДанных) = Неопределено Тогда
	//						ЗначениеПодстановки = Справочники[Выборка.ТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Значение));
	//					ИначеЕсли НЕ Метаданные.Перечисления.Найти(Выборка.ТипДанных) = Неопределено Тогда
	//						ИндексПеречисления = Число(Сред(Выборка.Значение,СтрНайти(Выборка.Значение, ".")+1));
	//						ЗначениеПодстановки = Перечисления[Выборка.ТипДанных][ИндексПеречисления]
	//					КонецЕсли;
	//				Исключение
	//				КонецПопытки;
	//			КонецЕсли;
	//			Если Выборка.ТипДанных = "Дата" Тогда
	//				ФорматированнаяДата = ДатаМобайл_ОбщийМодуль.ПолучитьДатуИзСтрокиПоФормату(Выборка.Значение, Шаблон);
	//				Если НЕ ФорматированнаяДата = Неопределено Тогда
	//					ЗначениеПодстановки = ФорматированнаяДата;
	//				Иначе
	//					Если НЕ ТипЗнч(Строка[Колонка.ЗаполняемыйРеквизит]) = Тип("Строка") Тогда
	//						Продолжить;
	//					КонецЕсли;						  
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//			Попытка
	//				Строка[Колонка.ЗаполняемыйРеквизит] = ЗначениеПодстановки;
	//			Исключение
	//				Сообщить("Не удалось записать значение колонки """ + Колонка.ЗаполняемыйРеквизит + """ для " + Строка.Номенклатура);
	//			КонецПопытки;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	ОбработатьСтрокуТЧ(Док, ИмяТЧ, Строка, Шаблон);
	//КонецЦикла;
	//
	//Док.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиСНулевымКоличеством(Док,ТекШаблон,Об,ОчисткаНулевыхСтрок)
	
	Если Док.Метаданные().Имя = "ПересчетТоваров" 
		И (ТекШаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор или ТекШаблон.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор) 
		И (Об.ТабличнуюЧастьПриЗагрузкеПодбор = 2 или ОчисткаНулевыхСтрок) Тогда	
		
		ИсходнаяТЗ = Док.Товары.Выгрузить();
				
		ЭтоАдресныйПересчет =  СкладыСервер.ИспользоватьАдресноеХранение(Док.Склад, Док.Помещение, Док.Дата); // проверка на заполнение ячеек		
		
		МассивТоваров = Новый Массив();
		МассивЯчеек = Новый Массив();
		
		Для Каждого Строка из  ИсходнаяТЗ Цикл
			Если Строка.КоличествоФакт > 0 Тогда
				Если МассивТоваров.Найти(Строка.Номенклатура) = Неопределено и НЕ Строка.Номенклатура.Пустая() тогда
					МассивТоваров.Добавить(Строка.Номенклатура);
				КонецЕсли;							
				
				Если МассивЯчеек.Найти(Строка.Ячейка) = Неопределено и НЕ Строка.Ячейка.Пустая() тогда
					МассивЯчеек.Добавить(Строка.Ячейка);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		ПромежуточнаяТЗ = Док.Товары.ВыгрузитьКолонки();
		
		Для Каждого Строка из ИсходнаяТЗ Цикл
			//заполнять отсканированными товарами и всеми ячейками
			Если (ТекШаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор и НЕ ТекШаблон.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор) или НЕ ЭтоАдресныйПересчет тогда 
				Если Строка.КоличествоФакт > 0 или МассивТоваров.Найти(Строка.Номенклатура) <> Неопределено Тогда
					НоваяСтрока = ПромежуточнаяТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЕсли;
			//заполнять отсканированными товарами в отсканированных ячейках
			ИначеЕсли ТекШаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор и ТекШаблон.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор тогда 
				Если Строка.КоличествоФакт > 0 или (МассивТоваров.Найти(Строка.Номенклатура) <> Неопределено и МассивЯчеек.Найти(Строка.Ячейка) <> Неопределено) Тогда
					НоваяСтрока = ПромежуточнаяТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЕсли;				 
			//заполнять всеми товарами в отсканированных ячейках
			ИначеЕсли НЕ ТекШаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор и ТекШаблон.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор тогда
				Если Строка.КоличествоФакт > 0 или МассивЯчеек.Найти(Строка.Ячейка) <> Неопределено Тогда
					НоваяСтрока = ПромежуточнаяТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Док.Товары.Загрузить(ПромежуточнаяТЗ);		
		
	КонецЕсли;
	
	Попытка
		Если Об.ТабличнуюЧастьПриЗагрузкеПодбор=3 и Док.Метаданные().Имя<>"ПересчетТоваров" тогда	
			СтруктураДляПоиска = Новый Структура("Количество", 0); 
			ТабличнаяЧастьДок = Док[Об.ТЧПодбор]; 
			МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
			Для каждого Строка Из МассивПустыхСтрок Цикл 
				ТабличнаяЧастьДок.Удалить(Строка); 
			КонецЦикла; 	
		КонецЕсли;
	Исключение
	КонецПопытки;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОбновленияСтатуса()
	
	ПараметрыОбновленияСтатуса = Новый Структура;
	ПараметрыОбновленияСтатуса.Вставить("ОбновлятьДвижения", Истина);
	ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции");
	ПараметрыОбновленияСтатуса.Вставить("ТекущееСостояние");
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки");
	ПараметрыОбновленияСтатуса.Вставить("ДокументОбъект");
	ПараметрыОбновленияСтатуса.Вставить("ИдентификаторЗапроса");
	ПараметрыОбновленияСтатуса.Вставить("ФорматОбмена");
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////
&НаСервереБезКонтекста
Функция СобратьПараметры()
	СтруктураПараметров=Новый Структура();
	Возврат СтруктураПараметров;
КонецФункции		

&НаСервереБезКонтекста
Процедура ЗаполнитьШапку(ПараметрыДокумента,тхт)
	Док=ПараметрыДокумента.Док;
	Док.Дата=ТекущаяДата();
	
	Попытка Док.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Док.Организация); Исключение; КонецПопытки;	
	Попытка Док.Заполнить(Неопределено); Исключение; КонецПопытки;

	Если Док.Метаданные().Имя="ПеремещениеТоваров" тогда	
		Попытка Док.ДатаРаспоряжения = ТекущаяДата(); Исключение; КонецПопытки;	
		Попытка Док.Статус = Док.Метаданные().Реквизиты.Статус.ЗначениеЗаполнения; Исключение; КонецПопытки;	
		Попытка ТекущийВидДеятельностиОрганизации = Справочники.Организации.ЗакупкаПодДеятельность(Док.ОрганизацияПолучатель, Док.СкладПолучатель, Док.Дата); Исключение; КонецПопытки;
		Попытка ЗакупкиСервер.ПроверитьКорректностьДеятельностиНДС(Док.ПеремещениеПодДеятельность, Док.Дата, ТекущийВидДеятельностиОрганизации);  Исключение; КонецПопытки;
		Попытка
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров") Тогда
				Док.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
			КонецЕсли;
		Исключение; КонецПопытки;
		Попытка Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров; Исключение; КонецПопытки;
		Попытка Док.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным; Исключение; КонецПопытки;
	ИначеЕсли Док.Метаданные().Имя="РеализацияТоваровУслуг" тогда
		Попытка	Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту; Исключение; КонецПопытки;
	ИначеЕсли Док.Метаданные().Имя="ПересчетТоваров" тогда	
		Попытка Док.Статус = Док.Метаданные().Реквизиты.Статус.ЗначениеЗаполнения; Исключение; КонецПопытки;
		Попытка Док.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено; Исключение; КонецПопытки;
	ИначеЕсли Док.Метаданные().Имя="ОтборРазмещениеТоваров" тогда	
		Если ПараметрыДокумента.ИмяТЧПодбор = "ТоварыОтбор" и ПараметрыДокумента.ИмяТЧПриемка =  "" тогда
			Попытка Док.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор; Исключение; КонецПопытки;
		ИначеЕсли ПараметрыДокумента.ИмяТЧПодбор = "" и ПараметрыДокумента.ИмяТЧПриемка =  "ТоварыРазмещение" тогда	
			Попытка Док.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение; Исключение; КонецПопытки;
		ИначеЕсли ПараметрыДокумента.ИмяТЧПодбор = "ТоварыОтбор" и ПараметрыДокумента.ИмяТЧПриемка =  "ТоварыРазмещение" тогда
			Попытка Док.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение; Исключение; КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	    СтрокаДока=тхт.ПолучитьСтроку(1);//<ВнутреннийИдентификаторДокумента>;<НомерДокумента>;<КомментарийДокумента>;<ИдентификаторДокумента>;<ТипДокумента>;<Контрагент>;
		СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
		Если СокрЛП(СтрПолучитьСтроку(СтрокаДока,1)) = "doc_forms" Тогда
			СтрокаДока = Тхт.ПолучитьСтроку(2);
			СтрокаДока=СтрЗаменить(СтрокаДока,";",Символы.ПС);
		КонецЕсли;

		НомерДокумента=СтрПолучитьСтроку(СтрокаДока,2);
		КомментарийДокумента=СтрПолучитьСтроку(СтрокаДока,3);
		КонтрагентДокумента=СтрПолучитьСтроку(СтрокаДока,6);
		ИдентификаторСклада=СтрПолучитьСтроку(СтрокаДока,8);

		попытка
			ЗагруженныйСклад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСклада));
			Если НЕ ЗагруженныйСклад = Док.Склад Тогда
				Док.Склад = ЗагруженныйСклад; 	
			КонецЕсли;	
		Исключение	
		КонецПопытки;

КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ЗаполнитьСклады(Об,тхт,Док)
	Если Об.ТЧПодбор<>"" и Об.ТЧПриемка<>"" тогда //перемещение
		н=2;
		Пока н<=тхт.КоличествоСтрок() Цикл
			СтрокаТаб=Тхт.ПолучитьСтроку(н);//<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;
			н=н+1;
			СтрокаТаб=СтрЗаменить(СтрокаТаб,";",Символы.ПС);
			СтрокаПодорИлиРазмещение = СтрПолучитьСтроку(СтрокаТаб,1);
			Если СтрокаПодорИлиРазмещение = "S" Тогда
				ТекЯчейка=СтрПолучитьСтроку(СтрокаТаб,5);
				Док.СкладОтправитель=Справочники.СкладскиеЯчейки.НайтиПоКоду(ТекЯчейка).Владелец;
	            Прервать;
			КонецЕсли;
		КонецЦикла;
		
		н=2;
		Пока н<=тхт.КоличествоСтрок() Цикл
			СтрокаТаб=Тхт.ПолучитьСтроку(н);//<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;
			н=н+1;
			СтрокаТаб=СтрЗаменить(СтрокаТаб,";",Символы.ПС);
			СтрокаПодорИлиРазмещение = СтрПолучитьСтроку(СтрокаТаб,1);
			Если СтрокаПодорИлиРазмещение = "I" Тогда
				ТекЯчейка=СтрПолучитьСтроку(СтрокаТаб,5);
				Док.СкладПолучатель=Справочники.СкладскиеЯчейки.НайтиПоКоду(ТекЯчейка).Владелец;
	            Прервать;
			КонецЕсли;
		КонецЦикла;


	Иначе
		н=2;
		Пока н<=тхт.КоличествоСтрок() Цикл
			СтрокаТаб=Тхт.ПолучитьСтроку(н);//<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;
			н=н+1;
			СтрокаТаб=СтрЗаменить(СтрокаТаб,";",Символы.ПС);
				ТекЯчейка=СтрПолучитьСтроку(СтрокаТаб,5);
				Док.Склад=Справочники.СкладскиеЯчейки.НайтиПоКоду(ТекЯчейка).Владелец;
	            Прервать;
			
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,ДокументЕГАИС,ПараметрыДокумента,ТекШаблон,СтрТЧ,Количество)

				Если ПараметрыДокумента.ЕстьРеквизитНоменклатура Тогда
					Если НЕ (ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)) Тогда
						СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					КонецЕсли;	
				КонецЕсли;
				
				Если ПараметрыДокумента.ЕстьРеквизитИдентификаторСтроки Тогда
					Если НЕ (ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки)) Тогда
						СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор();
					КонецЕсли;	
				КонецЕсли;
				
				Если ПараметрыДокумента.ЕстьРеквизитКлючСвязи Тогда
					Если СтрокаТабличнойЧасти.КлючСвязи = 0 Тогда
						ЗначениеМаксимальногоЭлемента = 0; // Значение, заведомо меньшее любого элемента в массиве.
							СписокКлючей = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].ВыгрузитьКолонку("КлючСвязи");
							Для Индекс = 0 По СписокКлючей.Количество() - 1 Цикл
								Если СписокКлючей[Индекс] > ЗначениеМаксимальногоЭлемента Тогда
									ЗначениеМаксимальногоЭлемента = СписокКлючей[Индекс];
								КонецЕсли;
								КонецЦикла;
							СтрокаТабличнойЧасти.КлючСвязи = ЗначениеМаксимальногоЭлемента + 1;
					КонецЕсли;	
				КонецЕсли;

				Если ПараметрыДокумента.ЕстьРеквизитНеобходимостьВводаАкцизнойМарки и СтрТЧ.ЕгаисПолныйКод <>"" Тогда
					СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = Истина;	
				КонецЕсли;

				
				Если ПараметрыДокумента.ЕстьРеквизитУпаковка И ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения) Тогда
					Если НЕ(ЗНачениеЗаполнено(СтрокаТабличнойЧасти.Упаковка)) и ТипЗнч(СтрТЧ.ЕдиницаИзмерения)=Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
						СтрокаТабличнойЧасти.Упаковка=СтрТЧ.ЕдиницаИзмерения;
					КонецЕсли;
				КонецЕсли;
				
				Если ПараметрыДокумента.ЕстьРеквизитДатаРозлива И ТекШаблон.ИспользоватьДатуРозливаЕГАИС Тогда
					Если НЕ(ЗНачениеЗаполнено(СтрокаТабличнойЧасти.ДатаРозлива)) Тогда
						СтрокаТабличнойЧасти.ДатаРозлива=СтрТЧ.ЕгаисДатаРозлива;
					КонецЕсли;	
				КонецЕсли;
								
				

					ТекущаяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",СтрТЧ.ЕгаисПолныйКод);

				//МАРКИ
				Если ПараметрыДокумента.ЕстьТЧМарок И (ПараметрыДокумента.ЕстьРеквизитИдентификаторСтроки или ПараметрыДокумента.ЕстьРеквизитКлючСвязи) Тогда
					
					ЕстьРеквизитИдентификаторСтрокиМарок = ДокументЕгаис.метаданные().ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено; 
					ЕстьРеквизитКлючСвязиМарок = ДокументЕгаис.метаданные().ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("КлючСвязи") <> Неопределено; 
					ЕстьРеквизитКоличествоМарок = ДокументЕгаис.метаданные().ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("Количество") <> Неопределено; 
					ЕстьРеквизитСправка2Марок = ДокументЕгаис.метаданные().ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("Справка2") <> Неопределено; 

						Если  НЕ ТекущаяАкцизнаяМарка.Пустая()  Тогда  //и НЕ ПараметрыДокумента.ЭтоВходящееНаправление
							СтрокиПоискаМарок=ДокументЕГАИС.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка",ТекущаяАкцизнаяМарка));
							Если СтрокиПоискаМарок.Количество()=0 тогда
								СтрокаМарки = ДокументЕГАИС.АкцизныеМарки.Добавить();
								СтрокаМарки.АкцизнаяМарка = ТекущаяАкцизнаяМарка;
								
								Если ЕстьРеквизитИдентификаторСтрокиМарок тогда
									СтрокаМарки.ИдентификаторСтроки = СтрокаТабличнойЧасти.ИдентификаторСтроки;
								КонецЕсли;
								
								Если ЕстьРеквизитКлючСвязиМарок тогда
									СтрокаМарки.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи; 
								КонецЕсли;
								
								Если ЕстьРеквизитСправка2Марок тогда
									СтрокаМарки.Справка2 = СтрокаТабличнойЧасти.Справка2;
								КонецЕсли;


								Если ЕстьРеквизитКоличествоМарок тогда
									СтрокаМарки.Количество = 1; 
								КонецЕсли;

							Иначе
								СтрокаМарки=СтрокиПоискаМарок[0];
							КонецЕсли;

						КонецЕсли;
				КонецЕсли;
				//МАРКИ
				
				
				Если ПараметрыДокумента.ЕстьРеквизитКоличествоУпаковок и НЕ ДокументЕГАИС.Метаданные().Имя="ТТНВходящаяЕГАИС"   Тогда		
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок+Количество;	
				КонецЕсли;
				
				Попытка
					лКоэффициент = ?(СтрТЧ.ЕдиницаИзмерения.Коэффициент=0,1,СтрТЧ.ЕдиницаИзмерения.Коэффициент);
				Исключение
					лКоэффициент = 1;
				КонецПопытки;
						
				Если ПараметрыДокумента.ЕстьРеквизитКоличество и НЕ ДокументЕГАИС.Метаданные().Имя="ТТНВходящаяЕГАИС"   Тогда		
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество+Количество*лКоэффициент;	
				КонецЕсли;

				
				Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт Тогда
					СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоФакт+Количество*лКоэффициент;
				КонецЕсли;

																						
КонецПроцедуры

&НаСервере
Функция ПолучитьМаркиВходящейТТН_ЕГАИС(ДокументВыгрузки)
	
ТЗМарок = Новый ТаблицаЗначений;
ТЗМарок.Колонки.Добавить("АлкогольнаяПродукция");
ТЗМарок.Колонки.Добавить("Марка");
ТЗМарок.Колонки.Добавить("Короб");
ТЗМарок.Колонки.Добавить("Палета");
ТЗМарок.Колонки.Добавить("Номенклатура");
ТЗМарок.Колонки.Добавить("Характеристика");
ТЗМарок.Колонки.Добавить("Серия");
ТЗМарок.Колонки.Добавить("Справка2");
ТЗМарок.Колонки.Добавить("ТипУпаковки");


	
ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ДокументВыгрузки);

//ПЕРВЫЙ УРОВЕНЬ
ТекущаяПалета = "";
ТекущийКороб = "";
Для каждого СтрокаПоДаннымДокументаПервыйУровень Из ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки Цикл
	
	Попытка 
		ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
		ТекущийШтрихкодПервыйУровень = СтрокаПоДаннымДокументаПервыйУровень[ИмяКолонкиШтрихкода];
	Исключение
		ИмяКолонкиШтрихкода = "Штрихкод";
		ТекущийШтрихкодПервыйУровень = СтрокаПоДаннымДокументаПервыйУровень[ИмяКолонкиШтрихкода];
	КонецПопытки;
	Если СтрДлина(ТекущийШтрихкодПервыйУровень)=68 или СтрДлина(ТекущийШтрихкодПервыйУровень)=150 тогда
   		СтрокаМарки = ТЗМарок.Добавить();
    	ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаПервыйУровень);
    	СтрокаМарки.Марка = ТекущийШтрихкодПервыйУровень;
    	СтрокаМарки.Короб = ТекущийКороб;
		СтрокаМарки.Палета = ТекущаяПалета;
	Иначе
		//ВТОРОЙ УРОВЕНЬ       
		ТекущаяПалета = "";
		ТекущийКороб = ТекущийШтрихкодПервыйУровень;
		
		Для каждого СтрокаПоДаннымДокументаВторойУровень Из СтрокаПоДаннымДокументаПервыйУровень.Строки Цикл
			
			Попытка 
		        ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
		        ТекущийШтрихкодВторойУровень = СтрокаПоДаннымДокументаВторойУровень[ИмяКолонкиШтрихкода];
	        Исключение
		        ИмяКолонкиШтрихкода = "Штрихкод";
		        ТекущийШтрихкодВторойУровень = СтрокаПоДаннымДокументаВторойУровень[ИмяКолонкиШтрихкода];
	        КонецПопытки;

			Если СтрДлина(ТекущийШтрихкодВторойУровень)=68 или СтрДлина(ТекущийШтрихкодВторойУровень)=150 тогда
				СтрокаМарки = ТЗМарок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаВторойУровень);
				СтрокаМарки.Марка = ТекущийШтрихкодВторойУровень;
				СтрокаМарки.Короб = ТекущийКороб;
				СтрокаМарки.Палета = ТекущаяПалета;
			Иначе
				//ТРЕТИЙ УРОВЕНЬ
				ТекущаяПалета = ТекущийШтрихкодПервыйУровень;
				ТекущийКороб = ТекущийШтрихкодВторойУровень;	
				Для каждого СтрокаПоДаннымДокументаТретийУровень Из СтрокаПоДаннымДокументаВторойУровень.Строки Цикл
					
					Попытка 
		               ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
		               ТекущийШтрихкодТретийУровень = СтрокаПоДаннымДокументаТретийУровень[ИмяКолонкиШтрихкода];
	                Исключение
		                ИмяКолонкиШтрихкода = "Штрихкод";
		                ТекущийШтрихкодТретийУровень = СтрокаПоДаннымДокументаТретийУровень[ИмяКолонкиШтрихкода];
	                КонецПопытки;

					
					Если СтрДлина(ТекущийШтрихкодТретийУровень)=68 или СтрДлина(ТекущийШтрихкодТретийУровень)=150 тогда
						СтрокаМарки = ТЗМарок.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаТретийУровень);
						СтрокаМарки.Марка = ТекущийШтрихкодТретийУровень;
						СтрокаМарки.Короб = ТекущийКороб;
						СтрокаМарки.Палета = ТекущаяПалета;
					Иначе
						//ДАЛЕЕ ВЛОЖЕННОСТЬ НЕ УЧИТЫВАЕМ
						Продолжить;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
КонецЦикла;


Возврат ТЗМарок;

КонецФункции

&НаСервере
Функция СобратьПараметрыЕГАИС(ДокументЕГАИС, ПараметрыДокумента)
		
		ПараметрыДокумента.Вставить("КодыНепроверяемыхМарок",СформироватьСписокНепроверяемыхМарокЕГАИС());
		ПараметрыДокумента.Вставить("ЕстьРеквизитИдентификаторСтроки",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитКлючСвязи",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КлючСвязи") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитНеобходимостьВводаАкцизнойМарки",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("НеобходимостьВводаАкцизнойМарки") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитВерсияСхемыТТН",ДокументЕгаис.метаданные().Реквизиты.Найти("ФорматОбмена") <> Неопределено);
		
		ЭтоВходящееНаправление = Ложь;
		Если ДокументЕГАИС.Метаданные().Имя="ТТНВходящаяЕГАИС" тогда
				ЭтоВходящееНаправление = Истина;
		КонецЕсли;
		ПараметрыДокумента.Вставить("ЭтоВходящееНаправление",ЭтоВходящееНаправление);	

		ПараметрыДокумента.Вставить("ЕстьТЧМарок",ДокументЕгаис.метаданные().ТабличныеЧасти.Найти("АкцизныеМарки") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитДатаРозлива",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ДатаРозлива") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитУпаковка",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка") <> Неопределено);
		
		ПараметрыДокумента.Вставить("ЕстьРеквизитАлкогольнаяПродукция",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("АлкогольнаяПродукция") <> Неопределено);
		
		ПараметрыДокумента.Вставить("ЕстьРеквизитНоменклатура",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Номенклатура") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитХарактеристика",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Характеристика") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитКоличествоУпаковок",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитКоличество",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Количество") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитКоличествоФакт",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоФакт") <> Неопределено);
		
		ПараметрыДокумента.Вставить("ЕстьРеквизитЕГАИС",ДокументЕгаис.метаданные().Реквизиты.Найти("ЕГАИС") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитМарка",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Марка") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитЕГАИС_Номенклатура",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ЕГАИС_Номенклатура") <> Неопределено);			

КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСписокНепроверяемыхМарокЕГАИС()
	
	СписокМарок = Новый СписокЗначений();
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("261")); //261 Сидр
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("262")); //262 Пуаре
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("263")); //263 Медовуха                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("500")); //500 Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("510")); //510 Пиво с содержанием объемной доли этилового спирта свыше 8,6%                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("520")); //520 Напитки, изготавливаемые на основе пива                                                                               
	
	Возврат СписокМарок;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьТабличнуюЧасть(ТабличнаяЧасть) 
	ТабличнаяЧасть.очистить();
КонецПроцедуры	
&НаСервереБезКонтекста
Процедура ОбработатьНовуюСтрокуТЧ(Док,ИмяТЧ,СтрокаТабличнойЧасти, ИсходныеДанные=Неопределено) 
	Если Док.Метаданные().Имя="РеализацияТоваровУслуг" тогда
		Если ИмяТЧ="Товары" тогда
			СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Док.Склад);
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Док, СкладГруппа));
			Если ЗначениеЗаполнено(Док.Соглашение) Тогда
				СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Док));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док));
			КонецЕсли;
			//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="ВводОстатков" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ПоступлениеТоваровУслуг" ИЛИ Док.Метаданные().Имя="ПриобретениеТоваровУслуг" тогда
		Если ИмяТЧ="Товары" тогда
			СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Док.Склад);
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Док, СкладГруппа));
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Док.Партнер);
			СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПоставщика",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Док,
			Истина
			)
			);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Док));
			//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));

			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
			Если ИсходныеДанные <> Неопределено тогда
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = ИсходныеДанные.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() >0 тогда
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокиПоиска[0],,"Упаковка,Серия,Количество,КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ОтборРазмещениеТоваров" тогда
		Если ИмяТЧ="ТоварыОтбор" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	 		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Отобрано");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		ИначеЕсли ИмяТЧ="ТоварыРазмещение" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	 		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Размещено");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ЧекККМ" тогда
		ТекущаяСтрока = СтрокаТабличнойЧасти;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Док));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Пользователи.ТекущийПользователь()));
		//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));

		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док));
		ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
	ИначеЕсли Док.Метаданные().Имя="ЗаказКлиента" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
			
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			Если ЗначениеЗаполнено(Док.Соглашение) Тогда
				СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Док));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док));
			КонецЕсли;
			//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));

			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
			//СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Док, Ложь));
			СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Истина));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
			Если ИсходныеДанные <> Неопределено тогда
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = ИсходныеДанные.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() >0 тогда
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокиПоиска[0],,"Упаковка,Серия,Количество,КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="ПеремещениеТоваров" тогда
		Если ИмяТЧ="Товары" тогда
			попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказНаПеремещение.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() >0 тогда
					 СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			исключение
			конецпопытки;
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="ВнутреннееПотреблениеТоваров" тогда
		Если ИмяТЧ="Товары" тогда
			попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказНаВнутреннееПотребление.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() >0 тогда
					 СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			исключение
			конецпопытки;
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="РасходныйОрдерНаТовары" тогда
		Если ИмяТЧ="ОтгружаемыеТовары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ОрдерНаПеремещениеТоваров" тогда
		Если ИмяТЧ="ОтгружаемыеТовары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="МаркировкаТоваровИСМП" или  Док.Метаданные().Имя="ВыводИзОборотаИСМП" тогда
		Если ИмяТЧ="Товары" тогда
						
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
				ТекущаяСтрока.Характеристика);
				
				СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
			КонецЕсли;
						
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Артикул") Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СтавкаНДС") Тогда
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   Новый Структура("НалогообложениеНДС, Дата", 
				ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС")));
			КонецЕсли;
			
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
				СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
			КонецЕсли;
			
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);		
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	
&НаСервереБезКонтекста
Процедура ОбработатьСтрокуТЧ(Док,ИмяТЧ,СтрокаТабличнойЧасти, ТекШаблон) 
	Если Док.Метаданные().Имя="РеализацияТоваровУслуг" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="ВводОстатков" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
						
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;		
	ИначеЕсли Док.Метаданные().Имя="ПоступлениеТоваровУслуг" ИЛИ Док.Метаданные().Имя="ПриобретениеТоваровУслуг" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);

		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="ПриобретениеТоваровУслуг" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
			ТекущаяСтрока.Склад =  Док.Склад;

		КонецЕсли;		
	ИначеЕсли Док.Метаданные().Имя="ОтборРазмещениеТоваров" тогда
		Если ИмяТЧ="ТоварыОтбор" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
	 		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Отобрано");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		ИначеЕсли ИмяТЧ="ТоварыРазмещение" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
	 		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Размещено");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ЧекККМ" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Док));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Пользователи.ТекущийПользователь()));
			//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));

			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док));
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ЗаказКлиента" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
			
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
						
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="РасходныйОрдерНаТовары" тогда
		Если ИмяТЧ="ОтгружаемыеТовары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			Если Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен тогда
				ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			Иначе
				ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="ОрдерНаПеремещениеТоваров" тогда
		Если ИмяТЧ="ОтгружаемыеТовары" и (Док.Статус = Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке или Док.Статус = Перечисления.СтатусыОрдеровНаПеремещение.Принят) тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="МаркировкаТоваровИСМП" или  Док.Метаданные().Имя="ВыводИзОборотаИСМП" тогда
		Если ИмяТЧ="Товары" тогда
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);		
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
		КонецЕсли;	
	КонецЕсли;
	
	Если ТекШаблон.ИспользованиеСерийниковПодбор > 0 или ТекШаблон.ИспользованиеСерийниковПриемка > 0 Тогда
		Попытка УстановитьСерииВдокументе(Док); Исключение КонецПопытки;
	КонецЕсли;	
КонецПроцедуры	
&НаСервереБезКонтекста
Функция УстановитьАвтора(Док,Авт) 
	Попытка
		Док.Ответственный=Справочники.Пользователи.НайтиПоНаименованию(авт,Ложь);
	Исключение
	КонецПопытки;	
КонецФункции		
&НаСервереБезКонтекста
Функция УстановитьЕдиницу(СтрокаТЧ) 
	зпр=Новый Запрос("ВЫБРАТЬ
	                 |	Штрихкоды.Упаковка КАК ЕИ,
	                 |	Штрихкоды.Номенклатура,
	                 |	Штрихкоды.Характеристика
	                 |ИЗ
	                 |	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	                 |ГДЕ
	                 |	Штрихкоды.Штрихкод = &код
	                 |	И (&ВсяНоменклатура
	                 |			ИЛИ Штрихкоды.Номенклатура = &Номенклатура)
	                 |	И (&ВсеХарактеристики
	                 |			ИЛИ Штрихкоды.Характеристика = &Характеристика)");
	
	зпр.УстановитьПараметр("Код",СтрокаТЧ.Штрихкод);
	зпр.УстановитьПараметр("Номенклатура",СтрокаТЧ.Номенклатура);
	зпр.УстановитьПараметр("Характеристика",СтрокаТЧ.ХарактеристикаНоменклатуры);
	зпр.УстановитьПараметр("ВсяНоменклатура",СтрокаТЧ.Номенклатура.Пустая());
	зпр.УстановитьПараметр("ВсеХарактеристики",СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая());
	рез=зпр.Выполнить().Выгрузить();
	Если Рез.Количество()>0 тогда
		СтрокаТЧ.ЕдиницаИзмерения=Рез[0].ЕИ;
		Если СтрокаТЧ.Номенклатура.Пустая() тогда
			СтрокаТЧ.Номенклатура=Рез[0].Номенклатура;
		КонецЕсли;	
		Если СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая() тогда
			СтрокаТЧ.ХарактеристикаНоменклатуры=Рез[0].Характеристика;
		КонецЕсли;	
	КонецЕсли;	
КонецФункции	
&НаСервереБезКонтекста
Функция УстановитьСерииВдокументе(Док);
	Если Док.Метаданные().Имя="РасходныйОрдерНаТовары" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РасходныйОрдерНаТовары));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям); 	
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ОтгружаемыеТовары); 			
	ИначеЕсли Док.Метаданные().Имя="ПриходныйОрдерНаТовары" тогда			
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПриходныйОрдерНаТовары));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли Док.Метаданные().Имя="ОтборРазмещениеТоваров" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ОтборРазмещениеТоваров));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Отбор); 	
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Размещение);
	ИначеЕсли Док.Метаданные().Имя="УпаковочныйЛист" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.УпаковочныйЛист));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли Док.Метаданные().Имя="ПрочееОприходованиеТоваров" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПрочееОприходованиеТоваров));
		Попытка
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	 
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Серии);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ВидыЗапасов);
		Исключение
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
		КонецПопытки;
	ИначеЕсли Док.Метаданные().Имя="РеализацияТоваровУслуг" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РеализацияТоваровУслуг));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли Док.Метаданные().Имя="ПоступлениеТоваровУслуг" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПоступлениеТоваровУслуг));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли Док.Метаданные().Имя="ПриобретениеТоваровУслуг" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПриобретениеТоваровУслуг));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли Док.Метаданные().Имя="ПеремещениеТоваров" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПеремещениеТоваров));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 
	ИначеЕсли Док.Метаданные().Имя="ВнутреннееПотреблениеТоваров" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВнутреннееПотреблениеТоваров));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли Док.Метаданные().Имя="ПересчетТоваров" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПересчетТоваров));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли Док.Метаданные().Имя="ДвижениеПродукцииИМатериалов" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ДвижениеПродукцииИМатериалов));
		Попытка
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	 
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Серии);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ВидыЗапасов);
		Исключение
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
		КонецПопытки;		
	КонецЕсли;

	
КонецФункции	

////////////////////////////////////////////////////////////////////

&НаСервереБезКонтекста
Функция ЧистаяСтрока(Знач ГрязнаяСтрока)
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,"'","-");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,Символы.ВК," ");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,Символы.ПС,"-");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,";","");
	ЧистаяСтрока=СокрЛП(ГрязнаяСтрока);
	Возврат ЧистаяСтрока;
КонецФункции

&НаКлиенте
Процедура Загрузить(Команда)
	
	//ПрочитатьНастройкиАвтозагрузки();
	лТекущаяСтрока=Элементы.СписокФайлов.ТекущиеДанные;
	Если лТекущаяСтрока = неопределено тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не выбран файл-документ для загрузки!";
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если Элементы.СписокФайлов.ВыделенныеСтроки.Количество() > 0 Тогда
	
		Код=СписокФайлов.Индекс(лТекущаяСтрока);
		тхт=Новый ТекстовыйДокумент();
		
		Если ИспользоватьFTP тогда
			FTP = ПодключитьсяКFTPСерверу();		
			FTP.УстановитьТекущийКаталог("/");
			ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
			FTP.Получить(лТекущаяСтрока.Файл, ВременныйФайл);
			тхт.НачатьЧтение(Новый ОписаниеОповещения("ЗагрузитьЗавершение3", ЭтаФорма, Новый Структура("FTP, ВременныйФайл, Код, лТекущаяСтрока, тхт", FTP, ВременныйФайл, Код, лТекущаяСтрока, тхт)), ВременныйФайл);
            Возврат;
		Иначе	
			тхт.НачатьЧтение(Новый ОписаниеОповещения("ЗагрузитьЗавершение1", ЭтаФорма, Новый Структура("FTP, Код, лТекущаяСтрока, тхт", FTP, Код, лТекущаяСтрока, тхт)), лТекущаяСтрока.Файл);
            Возврат;
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не выбран файл-документ для загрузки!";
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение3(ДополнительныеПараметры) Экспорт
	
	FTP = ДополнительныеПараметры.FTP;
	ВременныйФайл = ДополнительныеПараметры.ВременныйФайл;
	Код = ДополнительныеПараметры.Код;
	лТекущаяСтрока = ДополнительныеПараметры.лТекущаяСтрока;
	тхт = ДополнительныеПараметры.тхт;
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("ЗагрузитьЗавершение2", ЭтаФорма, Новый Структура("FTP, Код, лТекущаяСтрока, тхт", FTP, Код, лТекущаяСтрока, тхт)), ВременныйФайл);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение2(ДополнительныеПараметры) Экспорт
	
	FTP = ДополнительныеПараметры.FTP;
	Код = ДополнительныеПараметры.Код;
	лТекущаяСтрока = ДополнительныеПараметры.лТекущаяСтрока;
	тхт = ДополнительныеПараметры.тхт;
	
	ЗагрузитьФрагмент2(FTP, Код, лТекущаяСтрока, тхт);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФрагмент2(Знач FTP, Знач Код, Знач лТекущаяСтрока, Знач тхт)
	
	ЗагрузитьФрагмент1(FTP, Код, лТекущаяСтрока, тхт);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение1(ДополнительныеПараметры) Экспорт
	
	FTP = ДополнительныеПараметры.FTP;
	Код = ДополнительныеПараметры.Код;
	лТекущаяСтрока = ДополнительныеПараметры.лТекущаяСтрока;
	тхт = ДополнительныеПараметры.тхт;
	
	ЗагрузитьФрагмент1(FTP, Код, лТекущаяСтрока, тхт);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФрагмент1(Знач FTP, Знач Код, Знач лТекущаяСтрока, Знач тхт)
	
	Перем Вид, ДокументБД, СтрокаОшибок, фр;
	
	СтрокаОшибок = "";
	ДокументБД = ВнестиДокументВБазу(Код,тхт,СтрокаОшибок);
	
	Если ДокументБД = Неопределено тогда
		Сообщить("Не удалось загрузить документ "+Символы.ПС+СтрокаОшибок);
		Возврат;
	КонецЕсли;	
	
	Попытка 
		Шаблон = ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента",лТекущаяСтрока.Шаблон))[0];
	Исключение
		Сообщить("Не найден шаблон: "+лТекущаяСтрока.Шаблон);
		Возврат;
	КонецПопытки;
	
	Вид = Шаблон.ВидДокумента;
	ПонижатьДетализацию = Шаблон.ЕГАИСПонижатьДетализациюПроверкиТТНДоБутылок;
	Если Вид = "ТТНВходящаяЕГАИС" Тогда	
		Если ИнициализироватьДанныеПроверкиДокументаБД(ДокументБД, ПонижатьДетализацию) тогда			
			ВнестиДанныеПроверкиВДокумент(ДокументБД);
		Иначе
			Сообщить("Не удалось инициализировать данные для формы проверки и подбора по документу "+ДокументБД);
		КонецЕсли;	
	КонецЕсли;
	
	Если ДокументБД <> "" Тогда
		фр=ПолучитьФорму("Документ."+Вид+".ФормаОбъекта",Новый Структура("Ключ",ДокументБД),ЭтаФорма);
		фр.Открыть();
	КонецЕсли;
	
	Если ИспользоватьFTP тогда
		FTP.Удалить(лТекущаяСтрока.Файл);
	Иначе			
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("ЗагрузитьЗавершение", ЭтаФорма), лТекущаяСтрока.Файл);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение(ДополнительныеПараметры) Экспорт
	
	//удаление файла-документа после загрузки в БД;
	
	ЗагрузитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФрагмент()
	
	ЗаполнитьСписокФайлов();

КонецПроцедуры

&НаКлиенте
Процедура СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Не изменять");
	Список.Добавить("Дополнять");
	Список.Добавить("Заменять");
	Список.Добавить("Изменять");
	
	Код = СписокФайлов.Индекс(Элементы.СписокФайлов.ТекущиеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВыборИзСписка_СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыборНачалоВыбора", ЭтаФорма, Новый Структура("Код", Код));
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзСписка_СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыборНачалоВыбора(ВыбЭлемент, ДопПараметры) Экспорт
	
	Код = ДопПараметры.Код;
	СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = ВыбЭлемент;
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Не изменять"  тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодбор = 0;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Дополнять"  тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодбор = 1;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Заменять"  тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодбор = 2;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Изменять"  тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодбор = 3;
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Список = Новый СписокЗначений;
	Список.Добавить("Не изменять");
	Список.Добавить("Дополнять");
	Список.Добавить("Заменять");
	
	Код = СписокФайлов.Индекс(Элементы.СписокФайлов.ТекущиеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВыборИзСписка_СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыборНачалоВыбора", ЭтаФорма, Новый Структура("Код", Код));
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзСписка_СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыборНачалоВыбора(ВыбЭлемент, ДопПараметры) Экспорт
	
	Код = ДопПараметры.Код;
	СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = ВыбЭлемент;
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Не изменять"  тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемка=0;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Дополнять"  тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемка=1;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Заменять"  тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемка=2;
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры

// НОВЫЕ ТОВАРЫ


&НаКлиенте
Процедура ОбновитьновыеТовары(Команда)
	
	ЗаполнитьСписокТоваровШтрихкодов(ИДТСД);
	
КонецПроцедуры

&НаКлиенте
функция ПолучитьМассивТоваровFTP(ИДТСД)
	FTP = ПодключитьсяКFTPСерверу();		
	FTP.УстановитьТекущийКаталог("/");
	ИмяКаталогаOUT="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"out/";
	МассивТоваров = FTP.НайтиФайлы(
	ИмяКаталогаOUT, // ищём в корневом каталоге
	"arts_*.dmU" // любые файлы (здесь можно задать маску)
	);	
	Возврат МассивТоваров;
КонецФункции

&НаКлиенте
функция ПолучитьМассивШтрихкодовFTP(ИДТСД)
	FTP = ПодключитьсяКFTPСерверу();		
	FTP.УстановитьТекущийКаталог("/");
	ИмяКаталогаOUT="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"out/";
	МассивШК = FTP.НайтиФайлы(
	ИмяКаталогаOUT, // ищём в корневом каталоге
	"barcodes_*.dmU" // любые файлы (здесь можно задать маску)
	);		
	Возврат МассивШК;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокТоваровШтрихкодов(ИДТСД) 
	
	НовыеТоварыШтрихкоды.Очистить();
	Попытка
		Если ИДТСД = "" или ИДТСД = Неопределено Тогда
			ИДТСД = СписокТСД[0].тсд+РП;
		КонецЕсли;
	исключение
	КонецПопытки;

	Если ИспользоватьFTP тогда
		Если FTPАдрес<>"" тогда
			МассивТоваров = ПолучитьМассивТоваровFTP(ИДТСД);
			МассивШК = ПолучитьМассивШтрихкодовFTP(ИДТСД);
			ЗаполнитьСписокТоваровШтрихкодовФрагмент(МассивТоваров, МассивШК);
		КонецЕсли;
	Иначе
		Если лКаталогОбмена<>"" тогда
			лКаталогОбмена=лКаталогОбмена+?(прав(лКаталогОбмена,1)=РП,"",РП);
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИДТСД"					, ИДТСД);
		ДопПараметры.Вставить("лКаталогОбменаТоваров"	, лКаталогОбмена+"DataMobile" + РП +ИДТСД+"out" + РП);
		ДопПараметры.Вставить("лКаталогОбменаШК"		, лКаталогОбмена+"DataMobile" + РП+ИДТСД+"out" + РП);
		ДопПараметры.Вставить("МаскаТоваров"			, "arts_*.dmU");
		ДопПараметры.Вставить("МаскаШК"					, "barcodes_*.dmU");
		
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачалоПоискФайловТоваров_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры), ДопПараметры.лКаталогОбменаТоваров, ДопПараметры.МаскаТоваров);			
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура НачалоПоискФайловТоваров_ЗаполнитьСписокТоваровШтрихкодов(НайденныеФайлы, ДопПараметры) Экспорт
	
	Если НайденныеФайлы.Количество()> 0 Тогда
		
		ПолучитьДопПараметры(НайденныеФайлы, ДопПараметры);
		ФайлТовара = НайденныеФайлы[ДопПараметры.ТекущийФайл-1];

		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловТоваров_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры);
		ДопПараметры.тхт.НачатьЧтение(ОписаниеОповещения, ФайлТовара.ПолноеИмя);
	Иначе
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачалоПоискФайловШК_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры), ДопПараметры.лКаталогОбменаШК, ДопПараметры.МаскаШК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПоискФайловШК_ЗаполнитьСписокТоваровШтрихкодов(НайденныеФайлы, ДопПараметры) Экспорт
	
	Если НайденныеФайлы.Количество()> 0 Тогда
		
		ПолучитьДопПараметры(НайденныеФайлы, ДопПараметры);
		ФайлШК = НайденныеФайлы[ДопПараметры.ТекущийФайл-1];

		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловШК_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры);
		ДопПараметры.тхт.НачатьЧтение(ОписаниеОповещения, ФайлШК.ПолноеИмя);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДопПараметры(НайденныеФайлы, ДопПараметры)
	
	тхт=Новый ТекстовыйДокумент();
	ДопПараметры.Вставить("тхт",тхт);
	ДопПараметры.Вставить("МассивФайлов",НайденныеФайлы);
	ДопПараметры.Вставить("КоличествоФайлов",НайденныеФайлы.Количество());
	ДопПараметры.Вставить("ТекущийФайл",1);
	ДопПараметры.Вставить("ПорядковыйНомерТСД",1);
	ДопПараметры.Вставить("ТекущееИмяФайла",НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Имя);
	ДопПараметры.Вставить("ТекущийПутьФайла",НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Путь);	
	
КонецПроцедуры
 
&НаКлиенте
Процедура НачатьЧтениеФайловШК_ЗаполнитьСписокТоваровШтрихкодов(ДопПараметры) Экспорт
	
	тхт = ДопПараметры.тхт;
	ТекущийФайл = тхт.ПолучитьТекст();	

	Для Н = 1 По тхт.КоличествоСтрок() Цикл
		ПолныйПутьКФайлу = ДопПараметры.ТекущийПутьФайла + ДопПараметры.ТекущееИмяФайла;
		ТекущаяСтрока = тхт.ПолучитьСтроку(Н);
		ЗаполнитьТЧШтрихкодамиСервер(ТекущаяСтрока, ПолныйПутьКФайлу); 	
	КонецЦикла;
	
	Если ДопПараметры.ТекущийФайл < ДопПараметры.КоличествоФайлов Тогда
		тхт=Новый ТекстовыйДокумент();
		ДопПараметры.Вставить("тхт",тхт);
		ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
		ФайлШК = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловШК_ЗаполнитьСписокТоваровШтрихкодов",ЭтаФорма,ДопПараметры);
		тхт.НачатьЧтение(ОписаниеОповещения, ФайлШК.ПолноеИмя);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтениеФайловТоваров_ЗаполнитьСписокТоваровШтрихкодов(ДопПараметры) Экспорт
	
	тхт = ДопПараметры.тхт;
	ТекущийФайл = тхт.ПолучитьТекст();	

	Для Н = 1 По тхт.КоличествоСтрок() Цикл
		ПолныйПутьКФайлу = ДопПараметры.ТекущийПутьФайла + ДопПараметры.ТекущееИмяФайла;
		ТекущаяСтрока = тхт.ПолучитьСтроку(Н);
		Если ТекущаяСтрока = "" Тогда 
			Продолжить;
		КонецЕсли;
		ЗаполнитьТЧТоварамиСервер(ТекущаяСтрока, ПолныйПутьКФайлу); 	
	КонецЦикла;
	
	Если ДопПараметры.ТекущийФайл < ДопПараметры.КоличествоФайлов Тогда
		тхт=Новый ТекстовыйДокумент();
		ДопПараметры.Вставить("тхт",тхт);
		ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
		Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловТоваров_ЗаполнитьСписокТоваровШтрихкодов",ЭтаФорма,ДопПараметры);
		тхт.НачатьЧтение(ОписаниеОповещения, Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ДопПараметры.ТекущийФайл = ДопПараметры.КоличествоФайлов Тогда
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачалоПоискФайловШК_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры), ДопПараметры.лКаталогОбменаШК, ДопПараметры.МаскаШК);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокТоваровШтрихкодовФрагмент(Знач МассивТоваров, Знач МассивШК)
	
	Перем ФайлТовара, ФайлШК;
	
	Для каждого ФайлТовара из МассивТоваров Цикл                           
		ЗаполнитьТЧТоварами(ФайлТовара.ПолноеИмя);
	КонецЦикла;	
	
	Для Каждого ФайлШК ИЗ МассивШК Цикл
		ЗаполнитьТЧШтрихкодами(ФайлШК.полноеИмя);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧТоварами(Файл)
	
	тхт = Новый ТекстовыйДокумент();
	
	Если ИспользоватьFTP тогда
		FTP = ПодключитьсяКFTPСерверу();		
		FTP.УстановитьТекущийКаталог("/");
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
		FTP.Получить(Файл, ВременныйФайл);
		тхт.Прочитать(ВременныйФайл);	
		УдалитьФайлы(ВременныйФайл);
	Иначе
		тхт.Прочитать(Файл);
	КонецЕсли;	
	
	Для Н = 1 По Тхт.КоличествоСтрок() Цикл 
		ТекущаяСтрока = Тхт.ПолучитьСтроку(Н);
		Если ТекущаяСтрока = "" Тогда 
			Продолжить;
		КонецЕсли;
		ЗаполнитьТЧТоварамиСервер(ТекущаяСтрока, Файл);

		Если Тхт.КоличествоСтрок() = 0 Тогда			
			Если ИспользоватьFTP тогда
				FTP.Удалить(Файл);
			Иначе			
				УдалитьФайлы(Файл);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТЧТоварамиСервер(ТекущаяСтрока, Файл)
	

		
	ГУИД = ЛЕВ(Текущаястрока, Найти(текущаяСтрока,";")-1);
	СтрокаБезГУИД = Сред(ТекущаяСтрока,СтрДлина(ГУИД)+2);
	НовоеНаименование =(ЛЕВ(СтрокаБезГУИД, Найти(СтрокаБезГУИД,";")-1));
	
	
	ИдентификаторНоменклатуры=СокрЛП(Сред(ГУИД,4,36));
	ИдентификаторХарактеристики=СокрЛП(Сред(ГУИД,40,36));
	Попытка  // получение номенклатуры по идентификатору	
		Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторНоменклатуры));
		СтароеНаименование = ?(Товар.Наименование="","<Новый товар>",Товар.Наименование);
		Если ИдентификаторХарактеристики<>"00000000-0000-0000-0000-000000000000" и ИдентификаторХарактеристики<>"" тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторХарактеристики));
		Иначе			
			Характеристика=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	Исключение
		Товар = Справочники.Номенклатура.ПустаяСсылка();
		Характеристика=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		СтароеНаименование = "<Новый товар>";	
	КонецПопытки;

	
	СтруктураСтроки = Новый Структура("Номенклатура, Характеристика, СтароеНаименование, НовоеНаименование, ИдентификаторТовара, ИмяФайлаТовара", Товар, Характеристика, СтароеНаименование,НовоеНаименование, ГУИД, Файл);
	СтрокаТЧ = НовыеТоварыШтрихкоды.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТч, СтруктураСтроки);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧШтрихкодами(Файл)
	
	тхт=Новый ТекстовыйДокумент();
	Если ИспользоватьFTP тогда
		FTP = ПодключитьсяКFTPСерверу();		
		FTP.УстановитьТекущийКаталог("/");
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
		FTP.Получить(Файл, ВременныйФайл);
		тхт.Прочитать(ВременныйФайл);	
		УдалитьФайлы(ВременныйФайл);
	Иначе
		тхт.Прочитать(Файл);
	КонецЕсли;

	Для Н = 1 По Тхт.КоличествоСтрок() Цикл 
		ТекущаяСтрока = Тхт.ПолучитьСтроку(Н);
		ЗаполнитьТЧШтрихкодамиСервер(ТекущаяСтрока, Файл); 	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТЧШтрихкодамиСервер(ТекущаяСтрока, Файл)
	
		ШК = ЛЕВ(Текущаястрока, Найти(текущаяСтрока,";")-1);
		СтрокаБезШК = Сред(ТекущаяСтрока,СтрДлина(ШК)+2);
		Коэффициент =(ЛЕВ(СтрокаБезШК, Найти(СтрокаБезШК,";")-1));
		КоэффициентЧисло = Число(Коэффициент);
		СтрокаБезКоэффициента = Сред(СтрокаБезШК,СтрДлина(Коэффициент)+2);
		ЕдиницаИзмерения = (ЛЕВ(СтрокаБезКоэффициента, Найти(СтрокаБезКоэффициента,";")-1));
		СтрокаБезЕдиницыИзмерения = Сред(СтрокаБезКоэффициента,СтрДлина(ЕдиницаИзмерения)+2);
		
		ГУИД = (ЛЕВ(СтрокаБезЕдиницыИзмерения, Найти(СтрокаБезЕдиницыИзмерения,";")-1));
		
		ИдентификаторНоменклатуры=СокрЛП(Сред(ГУИД,4,36));
		ИдентификаторХарактеристики=СокрЛП(Сред(ГУИД,40,36));
		Попытка  // получение номенклатуры по идентификатору	
			Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторНоменклатуры));
			Если ИдентификаторХарактеристики<>"00000000-0000-0000-0000-000000000000" и ИдентификаторХарактеристики<>"" тогда
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторХарактеристики));
			Иначе			
				Характеристика=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		Исключение
			Товар = Справочники.Номенклатура.ПустаяСсылка();
			Характеристика=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецПопытки;

		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Товар);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		Запрос.УстановитьПараметр("ШК", ШК);
		Запрос.УстановитьПараметр("Коэффициент", КоэффициентЧисло);
		Запрос.УстановитьПараметр("ЕдиницаИзмеренияНаименование" , ЕдиницаИзмерения);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИСТИНА КАК ЕстьВБД
		|ПОМЕСТИТЬ тШтрихкоды
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &ШК
		|	И Штрихкоды.Номенклатура = &Владелец
		|	И Штрихкоды.Характеристика = &Характеристика
		|	И ((Штрихкоды.Упаковка.ЕдиницаИзмерения.Наименование = &ЕдиницаИзмеренияНаименование И Штрихкоды.Упаковка.Числитель = &Коэффициент))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тШтрихкоды.ЕстьВБД
		|ИЗ
		|	тШтрихкоды КАК тШтрихкоды";
		
		Если КоэффициентЧисло = 1 тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"(Штрихкоды.Упаковка.ЕдиницаИзмерения.Наименование = &ЕдиницаИзмеренияНаименование И Штрихкоды.Упаковка.Числитель = &Коэффициент)", "(Штрихкоды.Упаковка.ЕдиницаИзмерения.Наименование = &ЕдиницаИзмеренияНаименование И Штрихкоды.Упаковка.Числитель = &Коэффициент) ИЛИ Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
		КонецЕсли;	
		
		Если Запрос.Выполнить().Пустой() Тогда

			СтруктураПоискаПоТовару = Новый структура("ИдентификаторТовара", ГУИД);
			СтрокиПоиска = НовыеТоварыШтрихкоды.НайтиСтроки(СтруктураПоискаПоТовару);
			
			СтруктураШК = Новый структура("Коэффициент, Штрихкод, НаименованиеУпаковки, ИмяФайлаШтрихкода", КоэффициентЧисло, ШК, ЕдиницаИзмерения, Файл);
			Если СтрокиПоиска.Количество() > 0 Тогда
				
				Если СтрокиПоиска[0].Штрихкод = "" Тогда
					ЗаполнитьЗначенияСвойств(СтрокиПоиска[0], СтруктураШК);
				Иначе          
					СтрокаТаблицыНовая = НовыеТоварыШтрихкоды.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыНовая, СтрокиПоиска[0]);
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыНовая, СтруктураШК);
				КонецЕсли;
				
			Иначе
				СтрокаТаблицыНовая = НовыеТоварыШтрихкоды.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыНовая, СтруктураШК);
				СтрокаТаблицыНовая.Номенклатура = Товар;
				СтрокаТаблицыНовая.Характеристика = Характеристика;
			КонецЕсли; 
			
		КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаменитьГУИДШК(ИДТСД, ГУИДСтарый, ГУИДНовый)
	Если ИспользоватьFTP тогда
		FTP = ПодключитьсяКFTPСерверу();		
		FTP.УстановитьТекущийКаталог("/");
		ИмяКаталогаOUT="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"out/";
		
		МассивШК = FTP.НайтиФайлы(
		ИмяКаталогаOUT, // ищём в корневом каталоге
		"barcodes_*.dmU" // любые файлы (здесь можно задать маску)
		);
		
		Для Каждого ФайлШК ИЗ МассивШК Цикл
			тхт=Новый ТекстовыйДокумент();
			ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
			FTP.Получить(ФайлШК.ПолноеИмя, ВременныйФайл);
			тхт.Прочитать(ВременныйФайл);	
			УдалитьФайлы(ВременныйФайл);
			
			Для Н = 1 По Тхт.КоличествоСтрок() Цикл 
				ТекущаяСтрока = тхт.ПолучитьСтроку(Н);
				СтрокаЗамены = стрЗаменить(текущаяСтрока, ГУИДСтарый,ГУИДНовый); 
				тхт.ЗаменитьСтроку(Н, СтрокаЗАмены);
				
				ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
				тхт.Записать(ВременныйФайл);		
				FTP.Записать(ВременныйФайл, ФайлШК.ПолноеИмя);
				УдалитьФайлы(ВременныйФайл);	
			КонецЦикла;	
		КонецЦикла;	
		
	Иначе
		МассивШК=НайтиФайлы(лКаталогОбмена+"DataMobile" + РП + ИДТСД + "out" + РП,"barcodes_*.dmU");
		Для Каждого ФайлШК ИЗ МассивШК Цикл	
			тхт=Новый ТекстовыйДокумент();
			тхт.Прочитать(ФайлШК.ПолноеИмя);
			Для Н = 1 По Тхт.КоличествоСтрок() Цикл 
				ТекущаяСтрока = Тхт.ПолучитьСтроку(Н);
				СтрокаЗамены = стрЗаменить(текущаяСтрока, ГУИДСтарый,ГУИДНовый); 
				ТХТ.ЗаменитьСтроку(Н, СтрокаЗАмены);
				ТХТ.Записать(ФайлШК.ПолноеИмя);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьШтрихкоды(Команда)
	
	Для Каждого СтрокаТаблицы ИЗ НовыеТоварыШтрихкоды Цикл
		
		Если строкаТаблицы.Обрабатывать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)) Тогда
			//СоздатьТовар = Вопрос("Товар "+СтрокаТаблицы.НовоеНаименование+ " не создан. Создать?",РежимДиалогаВопрос.ДаНет);
			//Если СоздатьТовар = КодВозвратаДиалога.Да Тогда
			СП = СоздатьНоменклатуру(СтрокаТаблицы.Штрихкод,СтрокаТаблицы.НовоеНаименование);
			СтрокаТаблицы.Номенклатура = СП[0].Значение;
			Попытка ЗаменитьГУИДШК(ИДТСД, СтрокаТаблицы.ИдентификаторТовара, СтрокаТаблицы.Номенклатура.уникальныйИдентификатор()); Исключение КонецПопытки;
			//Иначе
			//	Продолжить;
			//КонецЕсли;
		Иначе
			ПривязатьШтрихкодыНаКлиенте(ИДТСД,СтрокаТаблицы);
		КонецЕсли;	
		
		
		Если ИспользоватьFTP тогда
			
			FTP = ПодключитьсяКFTPСерверу();		
			FTP.УстановитьТекущийКаталог("/");
			
			Если FTP.НайтиФайлы(СтрокаТаблицы.ИмяФайлаШтрихкода).Количество() > 0 Тогда
				тхт=Новый ТекстовыйДокумент();
				ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
				FTP.Получить(СтрокаТаблицы.ИмяФайлаШтрихкода, ВременныйФайл);
				тхт.Прочитать(ВременныйФайл);	
				УдалитьФайлы(ВременныйФайл);
				
				Для Н = 1 По тхт.КоличествоСтрок() Цикл 
					ТекущаяСтрока = тхт.ПолучитьСтроку(Н);
					СтрокаПоиска =  Найти(ТекущаяСтрока, СтрокаТаблицы.Штрихкод);
					Если СтрокаПоиска > 0 Тогда
						тхт.УдалитьСтроку(Н);
					КонецЕсли;	
				КонецЦикла;
				
				Если тхт.КоличествоСтрок() = 0 Тогда
					FTP.Удалить(СтрокаТаблицы.ИмяФайлаШтрихкода);
				Иначе
					ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
					тхт.Записать(ВременныйФайл);		
					FTP.Записать(ВременныйФайл, СтрокаТаблицы.ИмяФайлаШтрихкода);
					УдалитьФайлы(ВременныйФайл);
				КонецЕсли;			
			КонецЕсли;
			
			Попытка		
				тхтТовара=Новый ТекстовыйДокумент();
				ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
				FTP.Получить(СтрокаТаблицы.ИмяФайлаТовара, ВременныйФайл);
				тхтТовара.Прочитать(ВременныйФайл);	
				УдалитьФайлы(ВременныйФайл);
				
				Для Н = 1 По тхтТовара.КоличествоСтрок() Цикл 
					ТекущаяСтрока = тхтТовара.ПолучитьСтроку(Н);
					СтрокаПоиска =  Найти(ТекущаяСтрока, СтрокаТаблицы.ИдентификаторТовара);
					Если СтрокаПоиска > 0 Тогда
						тхтТовара.УдалитьСтроку(Н);
					КонецЕсли;	
				КонецЦикла;
				
				Если тхтТовара.КоличествоСтрок() = 0 Тогда
					FTP.Удалить(СтрокаТаблицы.ИмяФайлаТовара);
				Иначе
					ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
					тхтТовара.Записать(ВременныйФайл);		
					FTP.Записать(ВременныйФайл, СтрокаТаблицы.ИмяФайлаТовара);
					УдалитьФайлы(ВременныйФайл);
				КонецЕсли;
			Исключение
			КонецПопытки;
	
		КонецЕсли;
			
	КонецЦикла;
				
	Если НЕ ИспользоватьFTP Тогда
		П = Новый Структура();
		П.Вставить("Обрабатывать", Истина);
		МассивСтрок = НовыеТоварыШтрихкоды.НайтиСтроки(П);
		ПривязатьУдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(МассивСтрок, Новый Структура);
		Возврат;
	КонецЕсли;	
		
	ЗаполнитьСписокТоваровШтрихкодов(ИДТСД);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПривязатьШтрихкодыНаКлиенте(ИДТСД,СтрокаТаблицы)
	

		Если ЗначениеЗаполнено(СтрокаТаблицы.Штрихкод) Тогда
			
			Если СтрДлина(СтрокаТаблицы.Штрихкод) <> 5 Тогда

				ПривязатьШтрихкодыНаСервере(СтрокаТаблицы.Номенклатура,СтрокаТаблицы.Характеристика,СтрокаТаблицы.Штрихкод,СтрокаТаблицы.НаименованиеУпаковки,СтрокаТаблицы.Коэффициент);
				
			КонецЕсли;

		КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьШтрихкодыНаСервере(Номенклатура,Характеристика,Штрихкод,НаименованиеУпаковки,Коэффициент)
	
			МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Штрихкод = Штрихкод; 
			МенеджерЗаписи.Номенклатура = Номенклатура;
	        МенеджерЗаписи.Характеристика = Характеристика;
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	УпаковкиНоменклатуры.Ссылка
			|ПОМЕСТИТЬ тУпаковки
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
			|ГДЕ
			|	УпаковкиНоменклатуры.Числитель = &КФ
			|	И УпаковкиНоменклатуры.ЕдиницаИзмерения.Наименование = &ИмяЕдиницы
			|	И УпаковкиНоменклатуры.Владелец = &Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	тУпаковки.Ссылка
			|ИЗ
			|	тУпаковки КАК тУпаковки");
			Запрос.УстановитьПараметр("ИмяЕдиницы", НаименованиеУпаковки);
			Запрос.УстановитьПараметр("КФ", Коэффициент);
			Запрос.УстановитьПараметр("Владелец", Номенклатура);
			
			Если НЕ (Запрос.Выполнить().Пустой()) Тогда
				
				МенеджерЗаписи.Упаковка = Запрос.Выполнить().Выгрузить()[0];	
				
			КонецЕсли;
			
			МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры



//////////////////////

&НаСервереБезКонтекста
Функция ПолучитьЯчейкуПоКодуИлиШтрихкоду(Штрихкод)
	
	ТекущаяЯчейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	
	Попытка ТекущаяЯчейка = ПолучитьЯчейкуПоШтрихкоду(Штрихкод); Исключение КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяЯчейка.Наименование) и НЕ ЗначениеЗаполнено(ТекущаяЯчейка.Код) тогда
		ТекущаяЯчейка = Справочники.СкладскиеЯчейки.НайтиПоКоду(Штрихкод);	
	КонецЕсли;
		
	Возврат ТекущаяЯчейка;
	
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьЯчейкуПоШтрихкоду(Штрихкод10)
	
	Попытка
		Штрихкод16 = ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Штрихкод10);
		
		Если СтрДлина(Штрихкод16) < 32 Тогда
			
			Пока СтрДлина(Штрихкод16) < 32 Цикл
				Штрихкод16 = Строка("0")+Штрихкод16;
			КонецЦикла;
			
		КонецЕсли;
		
		ГУИД = Сред(Штрихкод16, 1,  8)
		+ "-" + Сред(Штрихкод16, 9,  4)
		+ "-" + Сред(Штрихкод16, 13, 4)
		+ "-" + Сред(Штрихкод16, 17, 4)
		+ "-" + Сред(Штрихкод16, 21, 12);
	Исключение
		
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
		
	Конецпопытки;
	
	Попытка
		
		СсылкаСкладскиеЯчейки = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));	
		
		Если СсылкаСкладскиеЯчейки.Код = "" Тогда
			Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
		Иначе
			Возврат СсылкаСкладскиеЯчейки;
		КонецЕсли;
			
	Исключение
		
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
		
	КонецпопыткИ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Знач ДесятичноеЧисло)
	
	Результат = "";    
	Если ДесятичноеЧисло <> "" Тогда
		Пока Число(ДесятичноеЧисло) > 0 цикл
			ОстатокОтДеления = ДесятичноеЧисло % 16;
			ДесятичноеЧисло  = (ДесятичноеЧисло - ОстатокОтДеления) / 16;
			Результат        = Сред("0123456789abcdef", ОстатокОтДеления + 1, 1) + Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
&НаСервереБезКонтекста
Процедура РазобратьТэгиGS1(СтрокаСерии,ДатаПроизводства11,ДатаОкончанияСрокаГодности17,НомерСерии)

	СтрокиGS1 = СтрЗаменить(СтрокаСерии,"[",Символы.ПС);
	
	Для i=1 по 4 цикл		
		ТекущийТэг = СтрПолучитьСтроку(СтрокиGS1, i);
		Если ТекущийТэг="" тогда
			Продолжить;
		КонецЕсли;	

		// РАЗБОР GS1 ТЭГОВ 
		Если СтрНайти(ТекущийТэг, "11]") > 0 Тогда // Тэг 11 (Дата производства)		
			Тэг11 = Сред(ТекущийТэг,4);  	
			Год11 =  "20" + Лев(Тэг11,2);
			День11 = Прав(Тэг11,2);
			Месяц11 = Прав(Лев(Тэг11,4),2);
			ДатаПроизв = Год11+Месяц11+День11;
			ДатаПроизводства11 = Дата(ДатаПроизв);
		ИначеЕсли СтрНайти(ТекущийТэг, "17]") > 0 Тогда // Тэг 17 (Дата окончания срока годности) 			
			Тэг17 = Сред(ТекущийТэг,4);  	
			Год17 =  "20" + Лев(Тэг17,2);
			День17 = Прав(Тэг17,2);
			Месяц17 = Прав(Лев(Тэг17,4),2);
			ДатаОСГ = Год17+Месяц17+День17;
			ДатаОкончанияСрокаГодности17 = Дата(ДатаОСГ);
		ИначеЕсли СтрНайти(ТекущийТэг,"21]") > 0 Тогда // Тэг 21 (серийный номер)
			СерийныйНомер21 = Сред(ТекущийТэг,4);
			НомерСерии = СерийныйНомер21
		ИначеЕсли СтрНайти(ТекущийТэг,"10]") > 0 Тогда // Тэг 10 (партия)
			Партия10 = Сред(ТекущийТэг,4);
			НомерСерии = Партия10;
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры	
	
&НаСервереБезКонтекста
Функция ПолучитьСерию(СтрокаСерии,ТекТовар,СерияПоДате,СоздаватьСерии)
	
	
	ТекущаяСерияСсылка = Справочники.СерииНоменклатуры.ПустаяСсылка();

	Если СтрокаСерии <> ""  Тогда 	
		
			ЭтоШтрихкодGS1 = Ложь;
			Если Найти(СтрокаСерии,"[")>0 тогда //серии GS1-128 //[10]12345678[11]040818
				ЭтоШтрихкодGS1 = Истина;
											
				ДатаПроизводства11 = Дата(1,1,1);
				ДатаОкончанияСрокаГодности17 = Дата(1,1,1);
				НомерСерии = "";
				
				РазобратьТэгиGS1(СтрокаСерии,ДатаПроизводства11,ДатаОкончанияСрокаГодности17,НомерСерии);
				
				
			Иначе
				Если СерияПоДате Тогда //04.08.18 			
					ДатаСерияГод = Строка(Строка("20")+Строка(Сред(СтрокаСерии,7,2)));
					ДатаСерияМесяц = Сред(СтрокаСерии,4,2);
					ДатаСерияДень = Лев(СтрокаСерии,2);
					ДатаСерии = Дата(Число(ДатаСерияГод), Число(ДатаСерияМесяц), Число(ДатаСерияДень));
					НомерСерии = "";
				Иначе
					НомерСерии = СтрокаСерии;
					ДатаСерии = Дата(1,1,1);
				КонецЕсли; 		
			КонецЕсли;

		
		
		ЗапросСерий = Новый Запрос;
		ЗапросСерий.Текст =  "ВЫБРАТЬ
		                     |	СерииНоменклатуры.Ссылка КАК Серия
		                     |ИЗ
		                     |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		                     |ГДЕ
							 |	(СерииНоменклатуры.Номер = &Номер И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства И СерииНоменклатуры.ГоденДо = &ГоденДо)
		                     |	И СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатурыПоиск";
		
		
			Если ЭтоШтрихкодGS1 Тогда
				ЗапросСерий.УстановитьПараметр("ГоденДо",ДатаОкончанияСрокаГодности17);
				ЗапросСерий.УстановитьПараметр("Номер",НомерСерии);
				ЗапросСерий.УстановитьПараметр("ДатаПроизводства",ДатаПроизводства11);
			Иначе				
				Если СерияПоДате тогда 
					ЗапросСерий.Текст = СтрЗаменить(ЗапросСерий.Текст,"СерииНоменклатуры.Номер = &Номер И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства И СерииНоменклатуры.ГоденДо = &ГоденДо","СерииНоменклатуры.ГоденДо = &ГоденДо");
					ЗапросСерий.УстановитьПараметр("ГоденДо",ДатаСерии);
				Иначе
					ЗапросСерий.Текст = СтрЗаменить(ЗапросСерий.Текст,"СерииНоменклатуры.Номер = &Номер И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства И СерииНоменклатуры.ГоденДо = &ГоденДо", "СерииНоменклатуры.Номер = &Номер");	                                        	
					ЗапросСерий.УстановитьПараметр("Номер",НомерСерии);
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ТекТовар.ВладелецСерий.Пустая() тогда
				ВидНоменклатурыПоиск = ТекТовар.ВладелецСерий;
			Иначе
				ВидНоменклатурыПоиск = ТекТовар.ВидНоменклатуры;
			КонецЕсли;

			ЗапросСерий.УстановитьПараметр("ВидНоменклатурыПоиск",ВидНоменклатурыПоиск);
			
		РезультатСерий = ЗапросСерий.Выполнить();
		Если НЕ РезультатСерий.Пустой() тогда
			ВыборкаСерий = РезультатСерий.Выбрать();
			Пока ВыборкаСерий.Следующий() цикл
				ТекущаяСерияСсылка = ВыборкаСерий.Серия;
				Прервать;
			КонецЦикла;  
		Иначе
			Если СоздаватьСерии тогда	
				НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НоваяСерия.ВидНоменклатуры = ВидНоменклатурыПоиск;
							
					Если ЭтоШтрихкодGS1 Тогда
						НоваяСерия.Номер = НомерСерии;
						НоваяСерия.ДатаПроизводства = ДатаПроизводства11;
						НоваяСерия.ГоденДо = ДатаОкончанияСрокаГодности17; 
					Иначе	
						Если СерияПоДате Тогда
							НоваяСерия.ГоденДо = ДатаСерии;
						Иначе
							НоваяСерия.Номер = НомерСерии;
						КонецЕсли;
					КонецЕсли;
				НоваяСерия.Записать();
				ТекущаяСерияСсылка = НоваяСерия.Ссылка;
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;
			
	Возврат ТекущаяСерияСсылка;		
	
КонецФункции

&НаСервере
Функция КодНоменклатурыЕГАИСПоPDF417(ЗначениеШК) 
	
	Сч = 0;
	Значение=СокрЛП(ЗначениеШК);
	
	Если СтрДлина(Значение) <> 68 Тогда 
		Сообщить("Код марки некорректной длины");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Сред(Значение, 4, 5) = "00000" Тогда
		Значение = Сред(Значение, 9, 11);
		Сч = 11;
	Иначе
		Значение = Сред(Значение, 8, 12);
		Сч = 12;
	КонецЕсли;

	Результат = 0;

	Для Поз = 1 По Сч Цикл

		Множитель = 1;
		
		Для СчМ = 1 По Сч - Поз Цикл   
			Множитель = Множитель * 36;
		КонецЦикла;

		Результат = Результат + (Найти("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Сред(Значение, Поз, 1)) - 1) * Множитель;

	КонецЦикла;

	Возврат Формат(Результат, "ЧЦ=19; ЧВН=; ЧГ=0");
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////
//ДАННЫЕ ПРОВЕРКИ ЕГАИС

&НаСервереБезКонтекста
Функция ИнициализироватьДанныеПроверкиДокументаБД(ДокументБДСсылка,ПонижатьДетализацию)
	
	ТекстОшибки = "";

	Если РезультатыПроверкиУспешноСохранены(ДокументБДСсылка,ПонижатьДетализацию,ТекстОшибки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	Возврат Ложь;	
	
КонецФункции
&НаСервереБезКонтекста
Функция РезультатыПроверкиУспешноСохранены(ДокументБДСсылка,ПонижатьДетализацию,ТекстОшибки)
	
	Попытка	
		ДокументОснованиеОбъект = ДокументБДСсылка.ПолучитьОбъект();
		ДокументОснованиеОбъект.Заблокировать();	
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;	
	КонецПопытки;
	
	Попытка
		ДанныеРезультатовПроверки = НачальныеДанныеДляРезультатовПроверки(ДокументОснованиеОбъект,ПонижатьДетализацию);
		ДокументОснованиеОбъект["ДанныеПроверкиИПодбора"] = Новый ХранилищеЗначения(ДанныеРезультатовПроверки);
		//ДокументОснованиеОбъект["СтатусПроверкиИПодбора"] = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;
		//ДокументОснованиеОбъект["СтатусПроверкиИПодбора"] = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;	
		РежимЗаписи = ?(ДокументОснованиеОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);	
		ДокументОснованиеОбъект.Записать(РежимЗаписи);
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;	
	КонецПопытки;

	Возврат Истина;
	
КонецФункции
&НаСервереБезКонтекста
Функция НачальныеДанныеДляРезультатовПроверки(ДокументОснованиеОбъект,ПонижатьДетализацию)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",             ДеревоМаркированнойПродукции());
	ДанныеДокумента.Вставить("ТаблицаНеМаркируемойПродукции",            ТаблицаНеМаркируемойПродукции());
	ДанныеДокумента.Вставить("ПулНеизвестныхАкцизныхМарок",              ПулНеизвестныхАкцизныхМарок());
	ДанныеДокумента.Вставить("АлкогольнаяПродукцияКОпределениюСправок2", АлкогольнаяПродукцияКОпределениюСправок2());
	ДанныеДокумента.Вставить("Справки2СопоставленнаяНоменклатура",       Справки2СопоставленнаяНоменклатура());
	ДанныеДокумента.Вставить("ТаблицаШтрихкодовНеМаркируемойПродукции",  ТаблицаШтрихкодовНеМаркируемойПродукции());

	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",             Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная);
	ДанныеДокумента.Вставить("УпаковкиДокумента",                        Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДобавленныеУпаковки",                      Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",             Новый СписокЗначений());

	ДанныеДокумента.Вставить("РежимПроверки",                            Перечисления.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены);
	ДанныеДокумента.Вставить("СледующийСтикерОтложено",                  1);
	ДанныеДокумента.Вставить("СохраненВыборПоМаркируемойПродукции",      Ложь);
	ДанныеДокумента.Вставить("ДанныеВыбораПоМаркируемойПродукции",       Неопределено);
	ДанныеДокумента.Вставить("ШтрихкодТекущейПроверяемойУпаковки",       "");	
	ДанныеДокумента.Вставить("ДанныеРанееСгенерированныхШтрихкодов", 	   Неопределено);
	
	
	//нужны для первоначального получения данных
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",                  Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось);
	ДанныеДокумента.Вставить("РедактированиеФормыНедоступно",            Истина);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",         Ложь);		
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная);
	ДанныеДокумента.Вставить("СтрокаБутылкиБезКоробки", Неопределено);
	//ДанныеДокумента.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Ложь);	
	
	
	
	Модуь_ИнтеграцияЕГАИСПереопределяемый = ОбщийМодуль("ИнтеграцияЕГАИСПереопределяемый");

	
		Модуь_ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьТаблицуШтрихкодовНеМаркируемойПродукцииТТН_ЕГАИС(
			ДокументОснованиеОбъект.Ссылка, ДанныеДокумента.ТаблицаШтрихкодовНеМаркируемойПродукции);
		
		Модуь_ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьТаблицуСопоставленныхСправок2ТТН_ЕГАИС(
			ДокументОснованиеОбъект.Ссылка, ДанныеДокумента.Справки2СопоставленнаяНоменклатура);
		
		ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ДокументОснованиеОбъект.Ссылка);
		
		ЗагрузитьДеревоМаркированнойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента);
		ЗаполнитьТаблицуПартионнойПродукции(ДанныеПроверяемогоДокумента.ТоварыБезАкцизныхМарок, ДанныеДокумента);
		ЗаполнитьПулНеизвестныхАкцизныхМарок(ДанныеДокумента);	
		
		Если ПонижатьДетализацию тогда
			ПонизитьУровеньДетализацииДоБутылки(ДанныеДокумента.ДеревоМаркированнойПродукции);
				ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки;
				ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки;
		КонецЕсли;
			
	ДанныеРезультатовСканированияАлкогольнойПродукции = Новый Структура;
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДеревоМаркированнойПродукции",             ДанныеДокумента.ДеревоМаркированнойПродукции);  //Тип("ДеревоЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ТаблицаНеМаркируемойПродукции",            ДанныеДокумента.ТаблицаНеМаркируемойПродукции); //Тип("ТаблицаЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ПулНеизвестныхАкцизныхМарок",              ДанныеДокумента.ПулНеизвестныхАкцизныхМарок); //Тип("ТаблицаЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("АлкогольнаяПродукцияКОпределениюСправок2", ДанныеДокумента.АлкогольнаяПродукцияКОпределениюСправок2); //Тип("ДеревоЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("УпаковкиДокумента",                        ДанныеДокумента.УпаковкиДокумента);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДетализацияСтруктурыХранения",             ДанныеДокумента.ДетализацияСтруктурыХранения);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("РежимПроверки",                            ДанныеДокумента.РежимПроверки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДобавленныеУпаковки",                      ДанныеДокумента.ДобавленныеУпаковки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",             ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("СледующийСтикерОтложено",                  ДанныеДокумента.СледующийСтикерОтложено);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("СохраненВыборПоМаркируемойПродукции",      ДанныеДокумента.СохраненВыборПоМаркируемойПродукции);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДанныеВыбораПоМаркируемойПродукции",       ДанныеДокумента.ДанныеВыбораПоМаркируемойПродукции);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ШтрихкодТекущейПроверяемойУпаковки",       ДанныеДокумента.ШтрихкодТекущейПроверяемойУпаковки);	
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДанныеРанееСгенерированныхШтрихкодов", 	   ДанныеДокумента.ДанныеРанееСгенерированныхШтрихкодов);
	
	Возврат ДанныеРезультатовСканированияАлкогольнойПродукции;
	
КонецФункции
&НаСервереБезКонтекста
Функция ДеревоМаркированнойПродукции()
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки", Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаАлкогольнойПродукции, ПеречислениеСсылка.ТипыУпаковок"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиШтрихкод",              Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",             Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("АлкогольнаяПродукция",                Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Справка2",                            Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки",     Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхБутылок",        Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",          Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",  Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяАлкогольнаяПродукция", Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСправки2",             Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсеСправки2Указаны",                  Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ДлинаАкцизнойМарки",                  Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеДлиныМарок",           Новый ОписаниеТипов("Булево"));	
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции
&НаСервереБезКонтекста
Функция ТаблицаНеМаркируемойПродукции()

	ТаблицаНеМаркируемойПродукции = Новый ТаблицаЗначений();
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("АлкогольнаяПродукция",  Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("Справка2",              Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("КоличествоПоДокументу", Новый ОписаниеТипов("Число"));
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("КоличествоФактическое", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаНеМаркируемойПродукции;
	
КонецФункции
&НаСервереБезКонтекста
Функция ПулНеизвестныхАкцизныхМарок()

	ПулНеизвестныхАкцизныхМарок = Новый ТаблицаЗначений();
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("Справка2",             Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("Поштучная",            Новый ОписаниеТипов("Булево"));
	
	Возврат ПулНеизвестныхАкцизныхМарок;
	
КонецФункции
&НаСервереБезКонтекста
Функция АлкогольнаяПродукцияКОпределениюСправок2()
	
	АлкогольнаяПродукцияКОпределениюСправок2 = Новый ДеревоЗначений();
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Номенклатура",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Характеристика",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Серия",                  Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("АлкогольнаяПродукция",   Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Справка2",               Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Количество",             Новый ОписаниеТипов("Число"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("КоличествоРаспределено", Новый ОписаниеТипов("Число"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Маркируемая",            Новый ОписаниеТипов("Булево"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("ИндексАкцизнойМарки",    Новый ОписаниеТипов("Число"));
	
	Возврат АлкогольнаяПродукцияКОпределениюСправок2;
	
КонецФункции
&НаСервереБезКонтекста
Функция Справки2СопоставленнаяНоменклатура()

	Справки2СопоставленнаяНоменклатура = Новый ТаблицаЗначений();
	Справки2СопоставленнаяНоменклатура.Колонки.Добавить("Справка2",       Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	Справки2СопоставленнаяНоменклатура.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Справки2СопоставленнаяНоменклатура.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	Возврат Справки2СопоставленнаяНоменклатура;
	
КонецФункции
&НаСервереБезКонтекста
Функция ТаблицаШтрихкодовНеМаркируемойПродукции()

	ТаблицаШтрихкодовНеМаркируемойПродукции = Новый ТаблицаЗначений();
	ТаблицаШтрихкодовНеМаркируемойПродукции.Колонки.Добавить("Штрихкод",             Новый ОписаниеТипов("Строка"));	
	ТаблицаШтрихкодовНеМаркируемойПродукции.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ТаблицаШтрихкодовНеМаркируемойПродукции.Колонки.Добавить("Коэффициент",          Новый ОписаниеТипов("Число"));	
	
	Возврат ТаблицаШтрихкодовНеМаркируемойПродукции;
	
КонецФункции
&НаСервереБезКонтекста
Процедура ЗагрузитьДеревоМаркированнойПродукции(ДеревоПоДаннымДокумента, ДанныеДокумента)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева(ДеревоПоДаннымДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоПоДаннымДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная
			ИЛИ ДетализацияСтруктурыХраненияДанныхДокумента = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.КоробаСБутылками Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаПоДаннымДокумента Из ДеревоПоДаннымДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаПоДаннымДокумента, КоллекцияСтрокПриемника, ДанныеДокумента);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаБутылкиБезКоробки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки Тогда
		ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуПартионнойПродукции(ДанныеПартионнойПродукции, ДанныеДокумента)
	
	Для Каждого СтрокаТаблицы Из ДанныеПартионнойПродукции Цикл
		
		НоваяСтрока = ДанныеДокумента.ТаблицаНеМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.КоличествоПоДокументу = СтрокаТаблицы.Количество;
		
	КонецЦикла;
	
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ЗаполнитьПулНеизвестныхАкцизныхМарок(ДанныеДокумента)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2 КАК Справка2,
	|	ДанныеПартионнойПродукции.КоличествоПоДокументу КАК Количество,
	|	ДанныеПартионнойПродукции.КоличествоФактическое КАК КоличествоФактическое
	|ПОМЕСТИТЬ ДанныеПартионнойПродукции
	|ИЗ
	|	&ДанныеПартионнойПродукции КАК ДанныеПартионнойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция               КАК АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2                           КАК Справка2,
	|	ЕСТЬNULL(ДанныеПартионнойПродукции.Справка2.Поштучная, ЛОЖЬ) КАК Поштучная,
	|	СУММА(ДанныеПартионнойПродукции.Количество)                  КАК Количество
	|ИЗ
	|	ДанныеПартионнойПродукции КАК ДанныеПартионнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ДанныеПартионнойПродукции.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	ВидыАлкогольнойПродукции.Маркируемый
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2,
	|	ЕСТЬNULL(ДанныеПартионнойПродукции.Справка2.Поштучная, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("ДанныеПартионнойПродукции", ДанныеДокумента.ТаблицаНеМаркируемойПродукции);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.ПулНеизвестныхАкцизныхМарок.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок) Экспорт

	ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");

		
		Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.КоробаСБутылками;
			
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
				
				Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
					
					ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции
&НаСервереБезКонтекста
Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента)
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБутылкиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента);
		
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки Тогда
		
		СтрокаБутылкиБезУпаковки = ДанныеДокумента.СтрокаБутылкиБезКоробки;
		
		Если СтрокаБутылкиБезУпаковки = Неопределено Тогда
			СтрокаБутылкиБезУпаковки = ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБутылкиБезУпаковки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		НоваяСтрока.ДлинаАкцизнойМарки = СтрДлина(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииЕГАИСКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииЕГАИСКлиентСервер");
	Модуь_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	Модуь_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;

	КоллекцияСтрокДобавленнойСтроки = НоваяСтрока.Строки;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокДобавленнойСтроки, ДанныеДокумента);
		
	КонецЦикла;

КонецПроцедуры
&НаСервереБезКонтекста
Функция ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	Модуь_ПроверкаИПодборПродукцииЕГАИСКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииЕГАИСКлиентСервер");
	Модуь_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ЗаполнитьСтрокуБутылкиБезКоробки(НоваяСтрока);
	
	ДанныеДокумента.СтрокаБутылкиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;

КонецФункции
&НаСервереБезКонтекста
Процедура ВнестиДанныеПроверкиВДокумент(ДокументБД)
	
	ДокументБДОбъект = ДокументБД.ПолучитьОбъект();
	ДанныеПроверки = ДокументБДОбъект.ДанныеПроверкиИПодбора.Получить();
	
	МассивАкцизныхМарок = ДокументБДОбъект.АкцизныеМарки.ВыгрузитьКолонку("АкцизнаяМарка");
	МассивКодовЕГАИС = Новый Массив;	
	Для Каждого ЭлементМассива из МассивАкцизныхМарок Цикл
		МассивКодовЕГАИС.Добавить(ЭлементМассива.ЗначениеШтрихкода);
	КонецЦикла;
	
	СтрокиДанныхПроверки = ДанныеПроверки.ДеревоМаркированнойПродукции.Строки;
	
	Для Каждого ГруппировкаСтрок из СтрокиДанныхПроверки Цикл	
	
		Попытка 
			ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
			ГруппировкаСтрокШтрихкод = ГруппировкаСтрок.ЗначениеШтрихкода;
		Исключение
			ИмяКолонкиШтрихкода = "Штрихкод";
			ГруппировкаСтрокШтрихкод = ГруппировкаСтрок.Штрихкод;
		КонецПопытки;
			
		Попытка 
			СтатусВНаличии = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии;
			СтатусОтсутствует = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует;
		Исключение
			СтатусВНаличии = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			СтатусОтсутствует = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
		КонецПопытки;
	
		
		//ПРОВЕРКА ПО УПАКОВКАМ (марки,короб,палета, далее не учитываем)
		
		//ПЕРВЫЙ УРОВЕНЬ
		Если ГруппировкаСтрок.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка 
			или  ГруппировкаСтрок.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка тогда
			
			ВсеСтрокиУпаковкаПервыйУровеньЕсть = Истина;
			Для Каждого СтрокаУпаковкаПервыйУровень из ГруппировкаСтрок.Строки Цикл
				
				//ВТОРОЙ УРОВЕНЬ
				Если СтрокаУпаковкаПервыйУровень.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка 
					или  СтрокаУпаковкаПервыйУровень.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка тогда
					
					ВсеСтрокиУпаковкаВторойУровеньЕсть = Истина;	
					Для Каждого СтрокаУпаковкаВторойУровень из СтрокаУпаковкаПервыйУровень.Строки Цикл
						СтрокаШтрихкодУпаковкаВторойУровень = СтрокаУпаковкаВторойУровень[ИмяКолонкиШтрихкода];
						Если МассивКодовЕГАИС.Найти(СтрокаШтрихкодУпаковкаВторойУровень) <> Неопределено Тогда
							СтрокаУпаковкаВторойУровень.СтатусПроверки = СтатусВНаличии;
						Иначе
							СтрокаУпаковкаВторойУровень.СтатусПроверки = СтатусОтсутствует;
							ВсеСтрокиУпаковкаПервыйУровеньЕсть = Ложь;
							ВсеСтрокиУпаковкаВторойУровеньЕсть = Ложь;
						КонецЕсли;
					КонецЦикла;
					
					Если ВсеСтрокиУпаковкаВторойУровеньЕсть Тогда
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусВНаличии;
					Иначе
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусОтсутствует;
					КонецЕсли;

				Иначе
					СтрокаШтрихкодУпаковкаПервыйУровень = СтрокаУпаковкаПервыйУровень[ИмяКолонкиШтрихкода];
					Если МассивКодовЕГАИС.Найти(СтрокаШтрихкодУпаковкаПервыйУровень) <> Неопределено Тогда
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусВНаличии;
					Иначе
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусОтсутствует;
						ВсеСтрокиУпаковкаПервыйУровеньЕсть = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
						
			Если ВсеСтрокиУпаковкаПервыйУровеньЕсть Тогда
				ГруппировкаСтрок.СтатусПроверки = СтатусВНаличии;
			Иначе
				ГруппировкаСтрок.СтатусПроверки = СтатусОтсутствует;
			КонецЕсли;
									
		ИначеЕсли ГруппировкаСтрок.Представление = "Бутылки без упаковки" Тогда
	
			Для Каждого СтрокаМарка из ГруппировкаСтрок.Строки Цикл
				
				СтрокаМаркиШтрихкод = СтрокаМарка[ИмяКолонкиШтрихкода];
				Если МассивКодовЕГАИС.Найти(СтрокаМаркиШтрихкод) <> Неопределено Тогда
					СтрокаМарка.СтатусПроверки = СтатусВНаличии;	
				Иначе
					СтрокаМарка.СтатусПроверки = СтатусОтсутствует;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если МассивКодовЕГАИС.Найти(ГруппировкаСтрокШтрихкод) <> Неопределено Тогда
				ГруппировкаСтрок.СтатусПроверки = СтатусВНаличии;
			Иначе
				ГруппировкаСтрок.СтатусПроверки = СтатусОтсутствует;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
		
	
	Если ДанныеПроверки.ТаблицаНеМаркируемойПродукции.Количество() > 0 Тогда
		
		ТоварыФакт = ДокументБДОбъект.Товары.Выгрузить();
		ТоварыФакт.Свернуть("АлкогольнаяПродукция, Справка2", "КоличествоФакт");
		
		Для Каждого СтрокаНеМаркПродукции из ДанныеПроверки.ТаблицаНеМаркируемойПродукции Цикл
			
			РезультатПоиска = ТоварыФакт.НайтиСтроки(Новый Структура("АлкогольнаяПродукция, Справка2", 
				СтрокаНеМаркПродукции.АлкогольнаяПродукция, СтрокаНеМаркПродукции.Справка2));
			
			Если РезультатПоиска.Количество() > 0 Тогда
				СтрокаНеМаркПродукции.КоличествоФактическое = РезультатПоиска[0].КоличествоФакт;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ХранилищеДанныхПроверки = Новый ХранилищеЗначения(ДанныеПроверки);
	ДокументБДОбъект.ДанныеПроверкиИПодбора = ХранилищеДанныхПроверки;
	
	Попытка
		ДокументБДОбъект.Записать();
	Исключение
		Сообщить("Ошибка записи документа после внесения данных о проверке!");
	КонецПопытки;

	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ОбщийМодуль(Имя)
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено тогда		
		Модуль = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции
&НаСервереБезКонтекста
Процедура ПонизитьУровеньДетализацииДоБутылки(ДеревоМаркированнойПродукции)

	СтрокиВерхнегоУровня = ДеревоМаркированнойПродукции.Строки;
	
	МассивСтрокКОбработке = Новый Массив;
	Для Каждого СтрокаДерева Из СтрокиВерхнегоУровня Цикл
		МассивСтрокКОбработке.Добавить(СтрокаДерева);
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из МассивСтрокКОбработке Цикл
		
		Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			ПонизитьУровеньДетализацииУпаковкиДоБутылки(ДеревоМаркированнойПродукции,СтрокаДерева);
			СтрокиВерхнегоУровня.Удалить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры
&НаСервереБезКонтекста
Процедура ПонизитьУровеньДетализацииУпаковкиДоБутылки(ДеревоМаркированнойПродукции,СтрокаДерева)
	
	ПодчиненныеСтроки = СтрокаДерева.Строки;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			ПонизитьУровеньДетализацииУпаковкиДоБутылки(ДеревоМаркированнойПродукции,ПодчиненнаяСтрока);
			
		Иначе
			
			НоваяСтрока = ДеревоМаркированнойПродукции.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодчиненныеСтроки.Очистить();

КонецПроцедуры
&НаСервереБезКонтекста
Функция ЭтоУпаковка(ТипУпаковки)
	
	Возврат ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
		Или ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	
КонецФункции


#Область ВспомогатльныеФункцииПиво

&НаСервере
Функция ПолучитьНоменклатуруЕГАИСпоНоменклатуре(лНоменклатура)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", лНоменклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.АлкогольнаяПродукция;
	Иначе
		Возврат Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭтоПиво(ВидыАлкогольнойПродукции)
	
	СписокМарок = Новый СписокЗначений();
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("261")); //261 Сидр
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("262")); //262 Пуаре
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("263")); //263 Медовуха                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("500")); //500 Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("510")); //510 Пиво с содержанием объемной доли этилового спирта свыше 8,6%                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("520")); //520 Напитки, изготавливаемые на основе пива
	
	Если СписокМарок.НайтиПоЗначению(ВидыАлкогольнойПродукции) <> Неопределено Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ()

&НаСервере
Функция СоздатьТабФактПиво()
	
	лТабФактПиво = Новый ТаблицаЗначений;
	лТабФактПиво.Колонки.Добавить("Товар");
	лТабФактПиво.Колонки.Добавить("ФактКол");
	
	Возврат лТабФактПиво;
	
КонецФункции // ()

#КонецОбласти


#Область РаботаFTP

&НаКлиенте
Процедура ПроверитьСвязьНажатие(Элемент)
	
	КаталогиДоступныFTP();
	
	Если КаталогFTPДоступен тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Соединение с FTP-сервером установлено";
		Сообщение.Сообщить();
		
		СписокТСД.Очистить();
		КаталогFTPПриИзменении();	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогFTPПриИзменении(ПриОткрытии=Ложь)
	
	КаталогиДоступныFTP(ПриОткрытии);
	
	Если КаталогFTPДоступен тогда
			
		FTP = ПодключитьсяКFTPСерверу();		
		FTP.УстановитьТекущийКаталог("/");
		СписокТСД.Очистить();
		
		ФайлыТСД = FTP.НайтиФайлы(
					"/DataMobile/", // ищём в корневом каталоге
       			 	"*" // любые файлы (здесь можно задать маску)
					);
					
		n=0;			
	    Для Каждого файлТСД из ФайлыТСД цикл
			Если файлТСД.ЭтоКаталог()  Тогда
				Если НРег(ФайлТСД.Имя)="base" тогда
					продолжить;
				КонецЕсли;
				Если НРег(ФайлТСД.Имя)="prnmask" тогда
					продолжить;
				КонецЕсли;
				Если НРег(ФайлТСД.Имя)="sounds" тогда
					продолжить;
				КонецЕсли;
				Если НРег(ФайлТСД.Имя)="dmphotos" тогда
					продолжить;
				КонецЕсли;
				Если НРег(ФайлТСД.Имя)="dmimages" тогда
					продолжить;
				КонецЕсли;
				Если НРег(ФайлТСД.Имя)="errors" тогда
					продолжить;
				КонецЕсли;	
				Если НРег(файлТСД.Имя)="in" тогда
					продолжить;
				КонецЕсли;	
				Если НРег(файлТСД.Имя)="out" тогда
					продолжить;
				КонецЕсли;	
				Если НРег(файлТСД.Имя)="log" тогда
					продолжить;
				КонецЕсли;	
				Если НРег(файлТСД.Имя) = "appupdate" тогда
					продолжить;
				КонецЕсли;
				Если НРег(файлТСД.Имя) = "others" тогда
					продолжить;
				КонецЕсли;
				n=n+1;	
				стр=СписокТСД.Добавить();
				стр.ТСД=ФайлТСД.Имя;
				стр.Номерстроки=n;
			КонецЕсли;
		КонецЦикла;
		
		Если СписокТСД.Количество()>0 Тогда
			
			ПрочитатьНастройкиТСД();
			
			Элементы.СписокТСД.ТекущаяСтрока=0;
			ИДТСД=СписокТСД[0].ТСД+РП;	
			
		КонецЕсли;
			
		Элементы.СписокТСД.Обновить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьсяКFTPСерверу(ПриОткрытии=Ложь)
	
	Если ПриОткрытии тогда
		FTPТаймАут=5;	
	Иначе
		FTPТаймАут=30;
	КонецЕсли;
	
	#Если ВебКлиент тогда
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="FTPСоединение не доступно в облаке.";
		Сообщение.Сообщить();
		Соединение = Неопределено;
		
	#Иначе
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
		//	Соединение = Новый FTPСоединение(FTPАдрес, FTPПорт,  FTPЛогин, FTPПароль, Неопределено, Истина,60,ЗащищенноеСоединение,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
		Соединение = Новый FTPСоединение(
		FTPАдрес, // адрес ftp сервера
		FTPПорт, // порт сервера
		FTPЛогин, // имя пользователя
		FTPПароль, // пароль пользователя
		Неопределено, // прокси не используется
		Истина, // пассивный режим работы
		FTPТаймАут, // таймаут (0 - без ограничений)
		Неопределено // незащищенное соединение
		);
		
		// Для случаев, когда у ftp сервера нет возможности
		// обращаться к нам (мы находимся за межсетевым экраном)
		// следует использовать пассивный режим работы.				
		Возврат Соединение;
	#КонецЕсли
	
	Возврат Соединение;

КонецФункции	


&НаКлиенте
Функция КаталогиДоступныFTP(ПриОткрытии=Ложь)

	Если FTPАдрес="" или FTPПорт=0 тогда
		КаталогFTPДоступен = Ложь;
		Возврат КаталогFTPДоступен;
	КонецЕсли; 
	
	ИмяКаталогаIN="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"in/";
	ИмяКаталогаOUT="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"out/";
	ИмяКаталогаLOG="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"log/";

	
	Попытка		
		FTP = ПодключитьсяКFTPСерверу(ПриОткрытии);		
		
		Если FTP = Неопределено Тогда
			КаталогFTPДоступен = Ложь;
			Возврат КаталогFTPДоступен;		
		КонецЕсли;
		
		Если НЕ НайтиСоздатьFTPКаталог(FTP, ИмяКаталогаIN, Ложь) 
			или НЕ НайтиСоздатьFTPКаталог(FTP, ИмяКаталогаOUT, Ложь) 
			или НЕ НайтиСоздатьFTPКаталог(FTP, ИмяКаталогаLOG, Ложь) Тогда
			
			ДопПараметры = Новый Структура();
			ДопПараметры.Вставить("FTP", 					FTP);
			ДопПараметры.Вставить("КаталогFTPДоступен", 	КаталогFTPДоступен);
			ДопПараметры.Вставить("ИмяКаталогаIN", 			ИмяКаталогаIN);
			ДопПараметры.Вставить("ИмяКаталогаOUT", 		ИмяКаталогаOUT);
			ДопПараметры.Вставить("ИмяКаталогаLOG", 		ИмяКаталогаLOG);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСозданияКаталоговОбменаНаFTP_Завершение",ЭтаФорма,ДопПараметры);	
			ТекстВопроса = "Папки обмена на FTP не существуют или не содержат необходимых подпапок. Создать?";
			ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);					
		Иначе
			
			КаталогFTPДоступен = Истина;
			
			Возврат КаталогFTPДоступен;
		КонецЕсли;	
	Исключение	
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не удалось соединиться с FTP сервером, проверьте настройки!";
		Сообщение.Сообщить();
		
		КаталогFTPДоступен = Ложь;
		
		Возврат КаталогFTPДоступен;
	КонецПопытки;			

КонецФункции

&НаКлиенте
Процедура ВопросСозданияКаталоговОбменаНаFTP_Завершение(Результат, ДопПараметры) Экспорт

	КаталогFTPДоступен = ДопПараметры.КаталогFTPДоступен;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НайтиСоздатьFTPКаталог(ДопПараметры.FTP, ДопПараметры.ИмяКаталогаIN, Истина) 
			и НайтиСоздатьFTPКаталог(ДопПараметры.FTP, ДопПараметры.ИмяКаталогаOUT, Истина) 
			и НайтиСоздатьFTPКаталог(ДопПараметры.FTP, ДопПараметры.ИмяКаталогаLOG, Истина) тогда	  			
			
			ОчиститьСообщения();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Папки обмена на FTP успешно созданы!";
			Сообщение.Сообщить();
			КаталогFTPДоступен = Истина;
		Иначе
			ОчиститьСообщения();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст="Не удалось создать необходимые папки обмена на FTP, попробуйте создать их вручную!";
			Сообщение.Сообщить();
			КаталогFTPДоступен = Ложь;		
		КонецЕсли;
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Папки обмена на FTP не существуют или не содержат необходимых подпапок, обмен не возможен!";
		Сообщение.Сообщить();
		КаталогFTPДоступен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСоздатьFTPКаталог(FTP, Путь, Создавать = Ложь) Экспорт
	
	Попытка
		
		FTP.УстановитьТекущийКаталог("/");
		FTP.УстановитьТекущийКаталог(Путь);
		FTP.УстановитьТекущийКаталог("/");
		Возврат Истина;
	Исключение
		
		Если Создавать Тогда		
			Попытка			
				FTP.УстановитьТекущийКаталог("/");
				FTP.СоздатьКаталог(Путь);
				Возврат Истина;
			Исключение	
				Возврат Ложь;
			КонецПопытки;
		Иначе
			
			Возврат Ложь;
		КонецЕсли;		
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ИспользоватьFTPПриИзменении(Элемент)
	
Элементы.FTPПароль.Видимость = ИспользоватьFTP;
Элементы.FTPАдрес.Видимость = ИспользоватьFTP;
Элементы.FTPЛогин.Видимость = ИспользоватьFTP;
Элементы.FTPПорт.Видимость = ИспользоватьFTP;
Элементы.ПроверитьСвязь.Видимость =  ИспользоватьFTP;



Элементы.лКаталогОбмена.Видимость  = НЕ ИспользоватьFTP;

лКаталогОбменаПриИзменении(СписокТСД);

	
КонецПроцедуры

&НаКлиенте
Функция ОтправитьФайлНаFTP(ТекстовыйДокумент, ВременноеИмяФайла)
	
	Успех = Истина;
	ИмяФайла = Лев(ВременноеИмяФайла, СтрДлина(ВременноеИмяФайла)-4);  //При копировании файл не доступен, переименовываем после окончания копирования
				
	Попытка
		FTP = ПодключитьсяКFTPСерверу();
			
		FTP.УстановитьТекущийКаталог("/");
		
		ИмяКаталогаIN="DataMobile/"+СтрЗаменить(ИДТСД,РП,"/")+"in/";
		FTP.УстановитьТекущийКаталог(ИмяКаталогаIN);
		
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();//файл для временного хранения записи
		ТекстовыйДокумент.Записать(ВременныйФайл,КодировкаТекста.UTF8);
		
		Если FTP.НайтиФайлы(ВременноеИмяФайла).Количество() > 0 Тогда //файл уже есть на FTP, надо удалить
			FTP.Удалить(ВременноеИмяФайла);
		КонецЕсли;
		
		FTP.Записать(ВременныйФайл, ВременноеИмяФайла);
		УдалитьФайлы(ВременныйФайл);
		
		Если FTP.НайтиФайлы(ИмяФайла).Количество() > 0 Тогда //файл уже есть на FTP, надо удалить
			FTP.Удалить(ИмяФайла);
		КонецЕсли;
		
		//переименование файла для загрузки *.dmtemp в *.dm
		FTP.Переместить(ВременноеИмяФайла, ИмяФайла);
		
		FTP.УстановитьТекущийКаталог("/");
	Исключение
		Успех = Ложь;
	КонецПопытки;
	
	Возврат Успех;
КонецФункции

&НаКлиенте
Процедура FTPАдресПриИзменении(Элемент)
	ИДТСД="";
КонецПроцедуры

&НаКлиенте
Функция FTPПолучитьИмяВременногоФайлаНаКлиенте() 
	
	ВременныйФайл = "";
	
	#Если НЕ ВебКлиент Тогда
		ВременныйФайл = ПолучитьИмяВременногоФайла("tmp");
	#КонецЕсли

	Возврат ВременныйФайл;
	
КонецФункции

#КонецОбласти

#Область Маркировка

&НаСервереБезКонтекста
Функция ДатаМобайл_Маркировка_ТребуетсяСпецОбработка(Шаблон) Экспорт

	Список = Новый СписокЗначений;
	Список.Добавить("ПриобретениеТоваровУслуг");
	Список.Добавить("РеализацияТоваровУслуг");
	Список.Добавить("МаркировкаТоваровИСМП");
	Список.Добавить("УпаковочныйЛист");
	Список.Добавить("ОтгрузкаТоваровИСМП");
	Список.Добавить("ПриемкаТоваровИСМП");
	Список.Добавить("ВозвратТоваровПоставщику");
	Список.Добавить("ВыводИзОборотаИСМП");
	Список.Добавить("ВозвратТоваровОтКлиента");
	Список.Добавить("ЧекККМ");
	
	Возврат (Список.НайтиПоЗначению(Шаблон.ВидДокумента) <> Неопределено);

КонецФункции // ()

&НаСервере
Функция ПолучитьДокументМаркировки(ИсходныйДокумент, ТекстДокументаТСД, Шаблон,ЭтоНовыйДокумент)

	МаркиУказаныПоставщиком = Ложь;
	Если Шаблон.ВидДокумента = "ВозвратТоваровОтКлиента" Тогда
		Если ИсходныйДокумент.ШтрихкодыУпаковок.Количество()>0 Тогда
			МаркиУказаныПоставщиком = Истина;
		КонецЕсли;	
	КонецЕсли;

	
	Если Шаблон.ВидДокумента = "ЧекККМ" Тогда
		
		Возврат ОбработатьВидДокументаЧекККМ(ИсходныйДокумент, ТекстДокументаТСД, Шаблон,ЭтоНовыйДокумент);

	ИначеЕсли (Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" И Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор=0) 
		или (Шаблон.ВидДокумента = "ПриемкаТоваровИСМП" И Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор=0)
			или (Шаблон.ВидДокумента = "ВозвратТоваровОтКлиента" И (МаркиУказаныПоставщиком ИЛИ Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор=0)) 
				Тогда
		
		Возврат ОбработатьВидДокументаПриобретениеТоваровУслуг(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);
		
	ИначеЕсли (Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" И Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0) 
		или (Шаблон.ВидДокумента = "ПриемкаТоваровИСМП" И Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0) Тогда
		
		Возврат ОбработатьВидДокументаПриемкаТоваровИСМП(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);
	
	ИначеЕсли Шаблон.ВидДокумента = "РеализацияТоваровУслуг" 
		или Шаблон.ВидДокумента = "ОтгрузкаТоваровИСМП" 
			или Шаблон.ВидДокумента = "ВозвратТоваровПоставщику"
				или (Шаблон.ВидДокумента = "ВозвратТоваровОтКлиента" И (НЕ МаркиУказаныПоставщиком ИЛИ  Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0)) 
					или Шаблон.ВидДокумента = "ВыводИзОборотаИСМП" 
						Тогда
		
		Возврат ОбработатьВидДокументаРеализацияТоваровУслуг(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);
		
	ИначеЕсли Шаблон.ВидДокумента = "МаркировкаТоваровИСМП" Тогда
		
		Возврат ОбработатьВидДокументаМаркировкаТоваровИСМП(ИсходныйДокумент, ТекстДокументаТСД, Шаблон,ЭтоНовыйДокумент);
	
	ИначеЕсли Шаблон.ВидДокумента = "УпаковочныйЛист" Тогда
		
		ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);
		Возврат "";
		
	КонецЕсли;

КонецФункции // ()

&НаСервере
Функция ЗагрузитьКодыМаркировки(ИсходныйДокумент, ТекстДокументаТСД, Шаблон,ЭтоНовыйДокумент)

	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);

КонецФункции // ()

&НаСервере
Функция ОбработатьВидДокументаПриобретениеТоваровУслуг(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	
	
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
	
	ИсходныйДокумент.Записать();
	
	ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
	
	Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
		
		РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент,Шаблон, ВидМаркируемойПродукции);
		
		Если РезультатПроверки <> Неопределено Тогда
			ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
			ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции, РезультатПроверки.ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок,,Истина);
			СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции);			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИсходныйДокумент.Ссылка;	

КонецФункции // ()

&НаСервере
Функция ОбработатьВидДокументаПриемкаТоваровИСМП(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	
	Если ИсходныйДокумент.ЭтоНовый() Тогда
		ЗаполнитьШапкуДокумента(ТекстДокументаТСД, ИсходныйДокумент, Шаблон);	
	КонецЕсли;

	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		ОбработатьИзменениеТЧПодбор(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор);
	КонецЕсли;

	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	
	ИсходныйДокумент.Записать();
	
	Если Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг"  тогда
		
		СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
		СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
		
		ИсходныйДокумент.Записать();
		
		ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
	
		Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
			
			РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент,Шаблон, ВидМаркируемойПродукции);
			
			Если РезультатПроверки <> Неопределено Тогда
				ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
				ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции,РезультатПроверки.ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок,,Истина);
				СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции);			
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Шаблон.ВидДокумента = "ПриемкаТоваровИСМП" тогда
		
		СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
		СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
		ИсходныйДокумент.Записать();
		
		ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
		
		Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
			
			РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент,Шаблон, ВидМаркируемойПродукции);
			
			Если РезультатПроверки <> Неопределено Тогда
				ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
				ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции,РезультатПроверки.ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок,,Истина);		
				СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции);	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
				
	Возврат ИсходныйДокумент.Ссылка;	

КонецФункции // ()

&НаСервере
Функция ОбработатьВидДокументаРеализацияТоваровУслуг(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	
	Если ЭтоНовыйДокумент Тогда
		ЗаполнитьШапкуДокумента(ТекстДокументаТСД, ИсходныйДокумент, Шаблон);	
	КонецЕсли;
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		ОбработатьИзменениеТЧПодбор(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор);
	КонецЕсли;
	
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
	//ВнестиИзмененияВКоличествоТоваров(ИсходныйДокумент, СтруктураСобранныхМарокИУпаковок);
	ИсходныйДокумент.Записать();
	
	ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
	
	Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
		
		РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент,Шаблон, ВидМаркируемойПродукции);
		
		Если РезультатПроверки <> Неопределено Тогда
			ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
			ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции,РезультатПроверки.ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок);		
			СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции);		
		КонецЕсли;
		
	КонецЦикла;

	Возврат ИсходныйДокумент.Ссылка;	

КонецФункции // ()

&НаСервере
Функция ОбработатьВидДокументаЧекККМ(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	
	Если ЭтоНовыйДокумент Тогда
		ЗаполнитьШапкуДокумента(ТекстДокументаТСД, ИсходныйДокумент, Шаблон);	
	КонецЕсли;

	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		ОбработатьИзменениеТЧПодбор(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор);
	КонецЕсли;

	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;	
	
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);

	    СоздатьСтрокиАкцизныхМарокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
		СоздатьСтрокиАкцизныхМарокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);

		
	ИсходныйДокумент.Записать();
		
	//РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент,Шаблон);
	//
	//Если РезультатПроверки <> Неопределено Тогда 
	//  ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
	//	ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции,РезультатПроверки.ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок);
	//	СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки);
	//КонецЕсли;
	
	Возврат ИсходныйДокумент.Ссылка;	
	
КонецФункции // ()

&НаСервере
Процедура ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	Если НЕ ЗначениеЗаполнено(ПрефиксКомпанииGS1) Тогда
		
		ВызватьИсключение "Ошибка: Не заполнен Префикс компании GS1";
		
	КонецЕсли;
		
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена, Истина);
	
	ТабУпаковок = ТабДокТСД.Скопировать();
	ТабУпаковок.Свернуть("УпаковочныйЛист");
	
	Для Каждого СтрУпаковка из ТабУпаковок Цикл
		
		ТабМарок = ТабДокТСД.НайтиСтроки(Новый Структура("УпаковочныйЛист", СтрУпаковка.УпаковочныйЛист));
		
		УпаковкаОбъект = НайтиИлиСоздатьУпаковкаОбъект(СтрУпаковка.УпаковочныйЛист, ПолучитьСледующийНомерSSCC(0, ПрефиксКомпанииGS1));
		
		ЭтоПерваяИтерация = Истина;
		
		Для Каждого СтрМарка из ТабМарок Цикл
			
			Если ЭтоПерваяИтерация И НужноЗаполнитьУпаковкаОбъект(УпаковкаОбъект) Тогда
				ЗаполнитьУпаковкаОбъект(УпаковкаОбъект, СтрМарка);
				ЭтоПерваяИтерация = Ложь;
			КонецЕсли;
						
			СсылкаМарка = ПолучитьСсылкаМарка(СтрМарка.Марка,СтрМарка.Номенклатура,СтрМарка.ХарактеристикаНоменклатуры,СтрМарка.KM_RawMrc,СтрМарка.KM_TNVED,СтрМарка.ЦРПТМарка_Длина);
			
			ПроверитьМаркаНаходитсяВДругомКоробе(СсылкаМарка,УпаковкаОбъект.Ссылка);
			
			Если СсылкаМарка <> Неопределено Тогда
			    РезультатПоиска = УпаковкаОбъект.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", СсылкаМарка));
				Если РезультатПоиска.Количество() = 0 тогда
					НовыйВложенныйШтрихкод = УпаковкаОбъект.ВложенныеШтрихкоды.Добавить();
					НовыйВложенныйШтрихкод.Штрихкод = СсылкаМарка;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		УпаковкаОбъект.Записать();
		
	КонецЦикла;
				
КонецПроцедуры

&НаСервере
Функция ОбработатьВидДокументаМаркировкаТоваровИСМП(ИсходныйДокумент, ТекстДокументаТСД, Шаблон,ЭтоНовыйДокумент)
	
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;

	Если ЭтоНовыйДокумент Тогда		
		ИсходныйДокумент.Дата = ТекущаяДата();
		
		Если ЗначениеЗаполнено(ОперацияИСМП) Тогда
			ИсходныйДокумент.Операция = ОперацияИСМП;
		Иначе
			ИсходныйДокумент.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ИсходныйДокумент.Организация = Организация;
		Иначе 
			ВыборкаНастройкиОбменаСУЗ =	РегистрыСведений.НастройкиОбменаСУЗ.Выбрать();
			Если ВыборкаНастройкиОбменаСУЗ.Следующий() Тогда
				ИсходныйДокумент.Организация = ВыборкаНастройкиОбменаСУЗ.Организация;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Шаблон.ИспользованиеУпаковочныхЛистовПодбор>0 тогда
		ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);	
	КонецЕсли;	
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД,Шаблон.ИспользованиеУпаковочныхЛистовПодбор>0);
			
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда		
		ОбработатьИзменениеТЧПодбор(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор);		
	КонецЕсли;
	
	
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
	
	ИсходныйДокумент.Записать();
	
	Если ЭтоНовыйДокумент Тогда
		ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
		ИсходныйДокумент.ВидПродукции = ВидМаркируемойПродукцииДокументаМассив[0];
		ИсходныйДокумент.Записать();
	КонецЕсли;

	ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
	
	Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
		
		РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент,Шаблон, ВидМаркируемойПродукции);
		
		Если РезультатПроверки <> Неопределено Тогда
			ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
			ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции,РезультатПроверки.ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок);	
			СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИсходныйДокумент.Ссылка;

КонецФункции

&НаСервере
Процедура ОбработатьМаркируемыеТовары(ПодобраннаяМаркируемаяПродукция)
	
	Для каждого строка из ПодобраннаяМаркируемаяПродукция цикл
		Если ЗначениеЗаполнено(строка.Характеристика) тогда
			строка.ХарактеристикиИспользуются = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуДокумента(ТекстДокументаТСД, Док, Шаблон)
	
	СтрокаДока = ТекстДокументаТСД.ПолучитьСтроку(1);
	СтрокаДока = СтрЗаменить(СтрокаДока, ";", Символы.ПС);
	ИдентификаторПартнера = СтрПолучитьСтроку(СтрокаДока, 6);
	ИдентификаторСклада = СтрПолучитьСтроку(СтрокаДока, 8);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Док.Организация = Организация;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторПартнера) Тогда
		Клиент = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПартнера));
	Иначе
		Клиент = Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСклада) Тогда
		Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСклада));
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
 	
	Док.Дата = ТекущаяДата();
		
	Попытка
		Если ЗначениеЗаполнено(Клиент) Тогда
			Док.Партнер = Клиент;
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Док.Партнер, Док.Контрагент);
			Если ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Или ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				
				Док.ЗаполнитьУсловияПродажПоУмолчанию();
				Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате;
				Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				
			ИначеЕсли ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Или ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Док.ЗаполнитьУсловияЗакупокПоУмолчанию();
				Док.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, Док.Договор);
			ИначеЕсли ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
				Док.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	СкладЗаписан = Ложь;
	Если ЗначениеЗаполнено(Склад) Тогда
		Если НЕ СкладЗаписан Тогда
			Попытка
				Док.Склад = Склад;
				СкладЗаписан = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если НЕ СкладЗаписан Тогда
			Попытка
				Док.СкладОтправитель = Склад;
				СкладЗаписан = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если НЕ СкладЗаписан Тогда
			Попытка
				Док.ТорговыйОбъект= Склад;
				СкладЗаписан = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеТЧПодбор(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор)
	
	ТЗСобранныеДанныеПодбор = ТабДокТСД.Скопировать();
	ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, KM_GTIN", "Количество");
	
	Для Каждого СтрТЧ из ТЗСобранныеДанныеПодбор Цикл
		
		Если СтрТЧ.Количество = 0 тогда
			Продолжить;
		КонецЕсли;
		
		лЕстьУпаковка=(ИсходныйДокумент.метаданные().ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("Упаковка")<>Неопределено);
		лЕстьGTIN=(ИсходныйДокумент.метаданные().ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("GTIN")<>Неопределено);

		лЕстьИдентификаторСтроки=(ИсходныйДокумент.метаданные().ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("ИдентификаторСтроки")<>Неопределено);
		

		лСтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
		Если лЕстьУпаковка тогда
			Если ИсходныйДокумент.Метаданные().Имя="ПересчетТоваров" Тогда
				Если ИсходныйДокумент.Склад.ИспользоватьАдресноеХранение или ИсходныйДокумент.Помещение.ИспользоватьАдресноеХранение тогда
					лСтруктураПоиска.Вставить("Упаковка",СтрТЧ.ЕдиницаИзмерения);
				КонецЕсли;	
			Иначе
				лСтруктураПоиска.Вставить("Упаковка",СтрТЧ.ЕдиницаИзмерения);
			КонецЕсли;	
		КонецЕсли;
		Если лЕстьGTIN тогда
			лСтруктураПоиска.Вставить("GTIN",СтрТЧ.KM_GTIN);
		КонецЕсли;

		
		СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);

		
		Если СтрокиПоиска.Количество() <> 0 Тогда
			
			СтрокаТабличнойЧасти = СтрокиПоиска[0];
			
		Иначе
			
			СтрокаТабличнойЧасти = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрТЧ);
			СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
			
			Если лЕстьУпаковка тогда
				Если ИсходныйДокумент.Метаданные().Имя="ПересчетТоваров" Тогда
					Если ИсходныйДокумент.Склад.ИспользоватьАдресноеХранение или ИсходныйДокумент.Помещение.ИспользоватьАдресноеХранение тогда
						СтрокаТабличнойЧасти.Упаковка=СтрТЧ.ЕдиницаИзмерения;
					КонецЕсли;	
				Иначе
					СтрокаТабличнойЧасти.Упаковка=СтрТЧ.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
			Если лЕстьGTIN тогда
				СтрокаТабличнойЧасти.GTIN=СтрТЧ.KM_GTIN;
			КонецЕсли;	
			
			Если лЕстьИдентификаторСтроки Тогда
				СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор();
			КонецЕсли;
			
			ОбработатьНовуюСтрокуТЧ(ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти);

		КонецЕсли;
		
		Попытка 
			КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель/СтрТЧ.ЕдиницаИзмерения.Знаменатель;
			КоэффициентУпаковки = ?(КоэффициентУпаковки=0,1,КоэффициентУпаковки);
		Исключение
			КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель=0,1,СтрТЧ.ЕдиницаИзмерения.Числитель);
		Конецпопытки;
		

			Попытка
				СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество;  
				СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
			Исключение
				СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество+СтрТЧ.Количество;
			КонецПопытки;		
		

		
		МетаданныеРеквизитыТЧ = ИсходныйДокумент.Метаданные().ТабличныеЧасти[ИмяТЧПодбор].Реквизиты;
		
		Если МетаданныеРеквизитыТЧ.Найти("Сумма") <> Неопределено
			И МетаданныеРеквизитыТЧ.Найти("СуммаНДС") <> Неопределено
			И МетаданныеРеквизитыТЧ.Найти("СуммаСНДС") <> Неопределено Тогда
			
			Попытка ПерезаполнитьСтрокуТабТоварыПослеИзмененияКоличества(СтрокаТабличнойЧасти, ИсходныйДокумент); Исключение КонецПопытки;
			
		КонецЕсли;

		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор)
	
	Если ТЧПриЗагрузкеПодбор = 0 Тогда
		
		Если  ИсходныйДокумент.Метаданные().Имя<>"ПриобретениеТоваровУслуг" и ИсходныйДокумент.Метаданные().Имя<>"ПриемкаТоваровИСМП" Тогда
			Попытка ИсходныйДокумент.ШтрихкодыУпаковок.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.АкцизныеМарки.Очистить(); Исключение КонецПопытки;
		КонецЕсли;

	ИначеЕсли ТЧПриЗагрузкеПодбор = 2 Тогда
		
		Если  ИсходныйДокумент.Метаданные().Имя<>"ПриобретениеТоваровУслуг" и ИсходныйДокумент.Метаданные().Имя<>"ПриемкаТоваровИСМП" Тогда
			Попытка ИсходныйДокумент.ШтрихкодыУпаковок.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.АкцизныеМарки.Очистить(); Исключение КонецПопытки;
		КонецЕсли;
		
		ИсходныйДокумент[ИмяТЧПодбор].Очистить();
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 3 Тогда
		
		Если  ИсходныйДокумент.Метаданные().Имя<>"ПриобретениеТоваровУслуг" и ИсходныйДокумент.Метаданные().Имя<>"ПриемкаТоваровИСМП" Тогда
			Попытка ИсходныйДокумент.ШтрихкодыУпаковок.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.АкцизныеМарки.Очистить(); Исключение КонецПопытки;
		КонецЕсли;

		Для Каждого Стр из ИсходныйДокумент[ИмяТЧПодбор] Цикл
			
			Попытка Стр.Количество = 0; Исключение КонецПопытки;
			Попытка Стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД, ЭтоУпаковка=Ложь)

	ТабДокТСД = Новый ТаблицаЗначений;
	ТабДокТСД.Колонки.Добавить("Номенклатура");
	ТабДокТСД.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабДокТСД.Колонки.Добавить("ЕдиницаИзмерения");
	ТабДокТСД.Колонки.Добавить("СерияСсылка");
	ТабДокТСД.Колонки.Добавить("Количество");
	ТабДокТСД.Колонки.Добавить("Марка");
	ТабДокТСД.Колонки.Добавить("KM_GTIN");	
	ТабДокТСД.Колонки.Добавить("ЦРПТМарка_Длина");
	ТабДокТСД.Колонки.Добавить("Короб");
	ТабДокТСД.Колонки.Добавить("УпаковочныйЛист");
	
	ТабДокТСД.Колонки.Добавить("KM_rawMrc");
	ТабДокТСД.Колонки.Добавить("gs1");
	ТабДокТСД.Колонки.Добавить("KM_TNVED");

	лНомерСтроки = 2;
	
	Пока лНомерСтроки <= ТекстДокументаТСД.КоличествоСтрок() Цикл
		
		СтрокаДокумента = ТекстДокументаТСД.ПолучитьСтроку(лНомерСтроки);
		СтрокаДокумента = СтрЗаменить(СтрокаДокумента, ";", Символы.ПС);
		ЦРПТМарка = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 11), "[59]", ";");
		УпаковочныйЛист = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 7), "[59]", ";");
		УпаковочныйЛист = СтрЗаменить(УпаковочныйЛист, "/////", "");
		Короб = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 18), "[59]", ";");
		
		Если ЭтоУпаковка тогда
			Если Короб = "" и УпаковочныйЛист<>"" тогда
				Короб = УпаковочныйЛист;
				УпаковочныйЛист="";
			КонецЕсли;	
		КонецЕсли;
	
		KM_rawBarcode = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 20), "[59]", ";");
		KM_GTIN = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 21), "[59]", ";");
		KM_SN = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 22), "[59]", ";");
		KM_rawMrc = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 23), "[59]", ";");
		KM_decodedMrc = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 24), "[59]", ";");
		gs1 = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 25), "[59]", ";");
		KM_TNVED = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 26), "[59]", ";");
		
		
		ИдентификаторТовара = СтрПолучитьСтроку(СтрокаДокумента, 2);
		ШтрихкодТовара = УдалитьЛидирующиеНули(СтрПолучитьСтроку(СтрокаДокумента, 3));		
		НаименованиеТовара = СтрПолучитьСтроку(СтрокаДокумента, 9);
		ДанныеНоменклатуры = ПолучитьНоменклатуру(ИдентификаторТовара, ШтрихкодТовара, НаименованиеТовара);
		
		Номенклатура = ДанныеНоменклатуры.Получить(0).Значение;
		Характеристика = ДанныеНоменклатуры.Получить(1).Значение;
		ЕдиницаИзмерения = ДанныеНоменклатуры.Получить(2).Значение;
		
		НовСтрока = ТабДокТСД.Добавить();
		НовСтрока.Номенклатура = Номенклатура;
		НовСтрока.ХарактеристикаНоменклатуры = Характеристика;
		НовСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		НовСтрока.СерияСсылка = Справочники.СерииНоменклатуры.ПустаяСсылка();
		
			ТекущееКоличество=СтрПолучитьСтроку(СтрокаДокумента,6);		
			ТекущееКоличество=СтрЗаменить(ТекущееКоличество,",",".");
			Попытка ТекущееКоличество = Число(ТекущееКоличество); Исключение ТекущееКоличество= 1; КонецПопытки; 
		НовСтрока.Количество = ТекущееКоличество;
		
		
		
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	//Обувь:
	//01+GTIN+21+SN = 31
	//Лекарства:
	//01+GTIN+21+SN = 31
	//Фотоаппараты:
	//01+GTIN+21+SN = 38	
	//Молочка:
	//01+GTIN+21+SN = 24

	
			ЦРПТМарка_Длина = СтрДлина(ЦРПТМарка);
			Если ЦРПТМарка_Длина = 21 тогда
				ИзвлеченнаяМарка = ЦРПТМарка;
				KM_GTIN = Сред(ЦРПТМарка, 1, 14);
			ИначеЕсли ЦРПТМарка_Длина = 25 тогда
				ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 7);
				KM_GTIN = Сред(ЦРПТМарка, 3, 14);
			ИначеЕсли ЦРПТМарка_Длина = 24 тогда
				ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 6);
				KM_GTIN = Сред(ЦРПТМарка, 3, 14);
			ИначеЕсли ЦРПТМарка_Длина = 38 тогда
				ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 20);
				KM_GTIN = Сред(ЦРПТМарка, 3, 14);	
			ИначеЕсли ЦРПТМарка_Длина = 31 тогда
				ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 13);
				KM_GTIN = Сред(ЦРПТМарка, 3, 14);
			ИначеЕсли ЦРПТМарка_Длина = 0 тогда
				ИзвлеченнаяМарка = ЦРПТМарка;
				KM_GTIN="";
			ИначеЕсли ЦРПТМарка_Длина = 44 или ЦРПТМарка_Длина = 45 или ЦРПТМарка_Длина = 46 тогда
				ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 12);
				KM_GTIN="";
			ИначеЕсли ЦРПТМарка_Длина = 54 или ЦРПТМарка_Длина = 55 или ЦРПТМарка_Длина = 56 тогда
				ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 16);
				KM_GTIN="";
			Иначе
				ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 13);
				KM_GTIN="";
			КонецЕсли;

			KM_GTIN = УдалитьЛидирующиеНули(KM_GTIN);
		
			Если Лев(KM_GTIN,2) = "29" тогда
				KM_GTIN = НайтиGTINТовара(Номенклатура,Характеристика); 
			КонецЕсли;	
	
		НовСтрока.KM_GTIN = KM_GTIN;
		НовСтрока.Марка = ИзвлеченнаяМарка;
		НовСтрока.ЦРПТМарка_Длина = ЦРПТМарка_Длина;
		
			Если Короб = "" тогда
				ИзвлеченныйКороб = "";
			ИначеЕсли Лев(Короб,2) = "00" и СтрДлина(Короб) = 20 тогда
				ИзвлеченныйКороб = "(00)" + Сред(Короб, 3, 18);
			Иначе
				ИзвлеченныйКороб = Короб;
			КонецЕсли;	
		НовСтрока.Короб = ИзвлеченныйКороб;
		
		
			Если УпаковочныйЛист = "" тогда
				ИзвлеченныйУпаковочныйЛист = "";
			ИначеЕсли Лев(УпаковочныйЛист,2) = "00" и СтрДлина(УпаковочныйЛист) = 20 тогда
				ИзвлеченныйУпаковочныйЛист = "(00)" + Сред(УпаковочныйЛист, 3, 18);
			Иначе
				ИзвлеченныйУпаковочныйЛист = УпаковочныйЛист;
			КонецЕсли;	
		НовСтрока.УпаковочныйЛист = ИзвлеченныйУпаковочныйЛист;

		НовСтрока.KM_rawMrc = KM_rawMrc;
		НовСтрока.gs1 = gs1;
		НовСтрока.KM_TNVED = KM_TNVED;
		
		лНомерСтроки = лНомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ТабДокТСД;

КонецФункции // ()

&НаСервереБезКонтекста
Функция УдалитьЛидирующиеНули(Строка)
	
	СтрокаБезНулей = Строка;
	Пока Лев(СтрокаБезНулей,1) = "0" цикл
		СтрокаБезНулей = Прав(СтрокаБезНулей,СтрДлина(СтрокаБезНулей)-1);	
	КонецЦикла;	
	
	Возврат СтрокаБезНулей; 
КонецФункции

&НаСервереБезКонтекста
Функция НайтиGTINТовара(лТовар,лХарактеристикаНоменклатуры)

	GTINТовара = "";
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	ШтрихкодыНоменклатуры.Штрихкод
	                    |ИЗ
	                    |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	                    |ГДЕ
	                    |	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	                 	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика");
	
	Запрос.УстановитьПараметр("Номенклатура",лТовар);
	Запрос.УстановитьПараметр("Характеристика",лХарактеристикаНоменклатуры);

	Рез=Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() тогда
		Если ЗначениеЗаполнено(Рез.Штрихкод) тогда
			GTINТовара = Рез.Штрихкод;
		КонецЕсли;	
	КонецЕсли;	
								
		
	Возврат GTINТовара;
	
	
КонецФункции	

&НаСервере
Функция ПолучитьСсылкаМарка(СтрокаШтрихкодаМарки,Номенклатура=Неопределено, Характеристика=Неопределено, KM_RawMrc="", KM_TNVED="", ЦРПТМарка_Длина=0)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	                      |ГДЕ
	                      |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкода");
	Запрос.УстановитьПараметр("ЗначениеШтрихкода", СтрокаШтрихкодаМарки+"%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекущийКМ = Выборка.Ссылка;
		Если ЦРПТМарка_Длина = 21 и ТекущийКМ.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix и СтрДлина(ТекущийКМ.ЗначениеШтрихкода)=21 тогда 
			ДополнитьИнформациюТабачнойПродукцииМРЦ(ТекущийКМ,KM_RawMrc);
		КонецЕсли;	
		Возврат ТекущийКМ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ()

&НаСервере
Процедура ДополнитьИнформациюТабачнойПродукцииМРЦ(ТекущийКМ,KM_RawMrc)
	
	ТекущийКМОбъект = ТекущийКМ.ПолучитьОбъект();
	Если KM_RawMrc = "" тогда
		ТекущийКМОбъект.ЗначениеШтрихкода = ТекущийКМОбъект.ЗначениеШтрихкода + "AAAA";
	Иначе		
		ТекущийКМОбъект.ЗначениеШтрихкода = ТекущийКМОбъект.ЗначениеШтрихкода + KM_RawMrc;
	КонецЕсли;	
	ТекущийКМОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюНоменклатура(ТекущийКМ,Параметры,ЦРПТМарка_Длина,КодМаркировки)
	
	ТекущийКМОбъект = ТекущийКМ.ПолучитьОбъект();
	
	Если ЦРПТМарка_Длина = 21 тогда
		GTIN_KM = Сред(КодМаркировки,1,14);
	ИначеЕсли ЦРПТМарка_Длина = 25 тогда	
		GTIN_KM = Сред(КодМаркировки,5,14);
	ИначеЕсли ЦРПТМарка_Длина = 31 тогда	
		GTIN_KM = Сред(КодМаркировки,5,14);
	КонецЕсли;

	GTIN_KM = УдалитьЛидирующиеНули(GTIN_KM);
	Попытка ТекущаяУпаковка = НайтиУпаковкуПоGTIN(GTIN_KM,Параметры); Исключение ТекущаяУпаковка = Параметры.Номенклатура.ЕдиницаИзмерения; КонецПопытки;
		
	ТекущийКМОбъект.Номенклатура = Параметры.Номенклатура;
	ТекущийКМОбъект.Характеристика = Параметры.Характеристика;	
	ТекущийКМОбъект.Упаковка = ТекущаяУпаковка;

	ТекущийКМОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Функция СоздатьСправочникШтрихкодУпаковки(КодМаркировки, Параметры, KM_RawMrc, KM_TNVED, ЦРПТМарка_Длина)
 
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	//Обувь:
	//01+GTIN+21+SN = 31
	//Лекарства:
	//01+GTIN+21+SN = 31
	//Фотоаппараты:
	//01+GTIN+21+SN = 38	
	//Молочка:
	//01+GTIN+21+SN = 24

			
	НовЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	
	Если ЦРПТМарка_Длина = 21 тогда
		НовЭлемент.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	Иначе	
		НовЭлемент.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	КонецЕсли;
	

	Если ЦРПТМарка_Длина = 21 тогда
		Если KM_RawMrc = "" тогда
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки+"AAAA";		
		Иначе
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки+KM_RawMrc;	
		КонецЕсли;
	ИначеЕсли ЦРПТМарка_Длина = 25 тогда
		Если KM_RawMrc = "" тогда
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки;		
		Иначе
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки+"(8005)"+ KM_RawMrc;	
		КонецЕсли;	
	ИначеЕсли ЦРПТМарка_Длина = 31 тогда 
		Если KM_TNVED = "" тогда
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки;		
		Иначе
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки+"(240)"+ KM_TNVED;	
		КонецЕсли;
	ИначеЕсли ЦРПТМарка_Длина = 24 тогда 
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;
	ИначеЕсли ЦРПТМарка_Длина = 38 тогда 
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;		
	Иначе 
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;
	КонецЕсли;
	
	
	Если ЦРПТМарка_Длина = 25 тогда
		НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	Иначе	
		НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	КонецЕсли;
	
	Если ЦРПТМарка_Длина = 21 тогда
		GTIN_KM = Сред(КодМаркировки,1,14);
	ИначеЕсли ЦРПТМарка_Длина = 25 тогда	
		GTIN_KM = Сред(КодМаркировки,5,14);
	ИначеЕсли ЦРПТМарка_Длина = 31 тогда	
		GTIN_KM = Сред(КодМаркировки,5,14);
	КонецЕсли;

	GTIN_KM = УдалитьЛидирующиеНули(GTIN_KM);
	Попытка ТекущаяУпаковка = НайтиУпаковкуПоGTIN(GTIN_KM,Параметры); Исключение ТекущаяУпаковка = Параметры.Номенклатура.ЕдиницаИзмерения; КонецПопытки;
		
	НовЭлемент.Номенклатура = Параметры.Номенклатура;
	НовЭлемент.Характеристика = Параметры.Характеристика;	
	НовЭлемент.Упаковка = ТекущаяУпаковка;
	
	ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НовЭлемент.ЗначениеШтрихкода);
	
	Если ДанныеУпаковки <> Неопределено Тогда
		Возврат ДанныеУпаковки.Ссылка;
	КонецЕсли;
	
	НовЭлемент.Записать();
	
	Возврат НовЭлемент.Ссылка;
	
КонецФункции

&НаСервере
Функция НайтиУпаковкуПоGTIN(GTIN_KM,Параметры)
	
	лУпак = Параметры.Номенклатура.ЕдиницаИзмерения;
	
	лТовар = Параметры.Номенклатура;
	лХарактеристикаНоменклатуры = Параметры.Характеристика;


	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	ШтрихкодыНоменклатуры.Упаковка
	                    |ИЗ
	                    |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	                    |ГДЕ
	                    |	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
						|	И ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	                 	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика");
	
	Запрос.УстановитьПараметр("Штрихкод",GTIN_KM);
	Запрос.УстановитьПараметр("Номенклатура",лТовар);
	Запрос.УстановитьПараметр("Характеристика",лХарактеристикаНоменклатуры);

	Рез=Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() тогда
		Если ЗначениеЗаполнено(Рез.Упаковка) тогда
			лУпак = Рез.Упаковка;
		КонецЕсли;	
	КонецЕсли;	
								
		
	Возврат лУпак;
	
	
КонецФункции	

&НаСервере
Процедура ПроверитьМаркаНаходитсяВДругомКоробе(СсылкаМарка,СсылкаУпаковка)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	                      |ГДЕ
	                      |	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = &Штрихкод
						  |	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка<>&Упаковка");
	
	Запрос.УстановитьПараметр("Штрихкод", СсылкаМарка);
	Запрос.УстановитьПараметр("Упаковка", СсылкаУпаковка);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектКороб = Выборка.Ссылка.ПолучитьОбъект();
		РезультатПоиска = ОбъектКороб.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", СсылкаМарка));
		
		Для Каждого Строка из РезультатПоиска Цикл
			ОбъектКороб.ВложенныеШтрихкоды.Удалить(Строка);
		КонецЦикла;
		
		ОбъектКороб.Записать();
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция СоздатьУпаковкаОбъект(КоробЗначениеШтрихкода)

	ОбъектКороб = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	
	ОбъектКороб.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ОбъектКороб.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC;
	ОбъектКороб.ЗначениеШтрихкода = КоробЗначениеШтрихкода;
	
	ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ОбъектКороб.ЗначениеШтрихкода);
	
	Если ДанныеУпаковки <> Неопределено Тогда
		Возврат ДанныеУпаковки.Ссылка;
	КонецЕсли;
	
	ОбъектКороб.Записать();
	
	Возврат ОбъектКороб;

КонецФункции // ()

&НаСервере
Функция НайтиИлиСоздатьУпаковкаОбъект(СтрокаДляПоискаУпаковки, СледующийНомерSSCC)
	
	СсылкаУпаковки = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", СтрокаДляПоискаУпаковки);
	
	Если СсылкаУпаковки.Пустая() Тогда
		
		Если СтрДлина(СтрокаДляПоискаУпаковки) = 22 и Лев(СтрокаДляПоискаУпаковки,4) = "(00)" тогда
			
			УпаковкаОбъект = СоздатьУпаковкаОбъект(СтрокаДляПоискаУпаковки);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Создана упаковка " + УпаковкаОбъект + " (нажмите для просмотра)";
			Сообщение.КлючДанных = УпаковкаОбъект.Ссылка;
			Сообщение.Сообщить();

		Иначе	
			УпаковкаОбъект = СоздатьУпаковкаОбъект(СледующийНомерSSCC);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Создана упаковка " + УпаковкаОбъект + " (нажмите для просмотра)";
			Сообщение.КлючДанных = УпаковкаОбъект.Ссылка;
			Сообщение.Сообщить();
		КонецЕсли;
		
	Иначе
		УпаковкаОбъект = СсылкаУпаковки.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат УпаковкаОбъект;

КонецФункции // ()

&НаСервере
Функция НужноЗаполнитьУпаковкаОбъект(УпаковкаОбъект)

	Если УпаковкаОбъект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ()

&НаСервере
Функция ЗаполнитьУпаковкаОбъект(УпаковкаОбъект, ТекущийЭлементВыборки)
	
	УпаковкаОбъект.Номенклатура = ТекущийЭлементВыборки.Номенклатура;
	УпаковкаОбъект.Характеристика = ТекущийЭлементВыборки.ХарактеристикаНоменклатуры;
	УпаковкаОбъект.Серия = ТекущийЭлементВыборки.СерияСсылка;
	УпаковкаОбъект.Упаковка = ТекущийЭлементВыборки.Номенклатура.ЕдиницаИзмерения;
	
	УпаковкаОбъект.Записать();
	
КонецФункции // ()

&НаСервере
Функция ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена, ЭтоУпаковка=Ложь)
	
	МассивМарок = Новый Массив;
	ТЗСобранныеДанныеМарки = ТабДокТСД.Скопировать();
	ТЗСобранныеДанныеМарки.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Марка, ЦРПТМарка_Длина, Короб,УпаковочныйЛист, KM_RawMrc, KM_TNVED", "Количество");

	Для Каждого СтрокаДока из ТЗСобранныеДанныеМарки Цикл
		Если СтрокаДока.Количество = 0 тогда
			Продолжить;
		КонецЕсли;
		
		Если (НЕ ЗначениеЗаполнено(СтрокаДока.Короб)и НЕ ЗначениеЗаполнено(СтрокаДока.УпаковочныйЛист) и ЗначениеЗаполнено(СтрокаДока.Марка))
			или (ЭтоУпаковка и ЗначениеЗаполнено(СтрокаДока.Марка)) Тогда
			
			МассивМарок.Добавить(ПолучитьСправочникСсылкаШтрихкодыУпаковок(СтрокаДока.Марка,СтрокаДока.ЦРПТМарка_Длина,СтрокаДока.KM_RawMrc,СтрокаДока.KM_TNVED,СоздаватьЕслиНеНайдена, 
			Новый Структура("Номенклатура, Характеристика", СтрокаДока.Номенклатура, СтрокаДока.ХарактеристикаНоменклатуры)));
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивКоробов = Новый Массив;
	ТЗУпаковочныхЛистов = ТабДокТСД.Скопировать();
	ТЗУпаковочныхЛистов.Свернуть("Короб,УпаковочныйЛист", "Количество");

	Для Каждого СтрТЗ из ТЗУпаковочныхЛистов Цикл
		Если СтрокаДока.Количество = 0 тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрТЗ.УпаковочныйЛист) Тогда
			МассивКоробов.Добавить(ПолучитьСправочникСсылкаШтрихкодыУпаковок(СтрТЗ.УпаковочныйЛист, 0,"","", Ложь));
		ИначеЕсли ЗначениеЗаполнено(СтрТЗ.Короб) Тогда
			МассивКоробов.Добавить(ПолучитьСправочникСсылкаШтрихкодыУпаковок(СтрТЗ.Короб, 0,"","", Ложь));
		КонецЕсли;
		
	КонецЦикла;

	
	Возврат Новый Структура("Марки, Короба", МассивМарок, МассивКоробов);

КонецФункции // ()

&НаСервере
Функция ПолучитьСтруктуруНоменклатураХарактеристика(СтрокаТаб)
	
	ИдентификаторТовара = СтрПолучитьСтроку(СтрокаТаб, 2);
	ШтрихкодТовара = СтрПолучитьСтроку(СтрокаТаб, 3);
	НаименованиеТовара = СтрПолучитьСтроку(СтрокаТаб, 9);
	Номенклатура = ПолучитьНоменклатуру(ИдентификаторТовара, ШтрихкодТовара, НаименованиеТовара);
	
	Если Номенклатура = "" Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Номенклатура, Характеристика", 
			Номенклатура.Получить(0).Значение,
			Номенклатура.Получить(1).Значение)
	КонецЕсли;	
		
КонецФункции // ()

&НаСервере
Процедура СоздатьСтрокиШтрихкодовУпаковокПоМассиву(лМассив, ИсходныйДокумент)

	
	Для Каждого лЭлемент из лМассив Цикл
		
		Если лЭлемент = Неопределено тогда
			Продолжить;
		КонецЕсли;	
			
		лСтруктураПоиска = Новый Структура("ШтрихкодУпаковки", лЭлемент);	
		СтрокиПоиска = ИсходныйДокумент.ШтрихкодыУпаковок.НайтиСтроки(лСтруктураПоиска);
		Если СтрокиПоиска.Количество() <> 0 тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсходныйДокумент.Метаданные().Имя="ПриобретениеТоваровУслуг" или ИсходныйДокумент.Метаданные().Имя="ПриемкаТоваровИСМП" тогда
			Попытка
				лСтруктураПоиска = Новый Структура("ЗначениеШтрихкода", УбратьСкобкиТеговМарка(лЭлемент.ЗначениеШтрихкода,ПолучитьТипМаркированнойПродукции(лЭлемент.Номенклатура)));	
				СтрокиПоиска = ИсходныйДокумент.ШтрихкодыУпаковок.НайтиСтроки(лСтруктураПоиска);
				Если СтрокиПоиска.Количество() <> 0 тогда
					Для каждого НайденнаяСтрока из СтрокиПоиска цикл
						НайденнаяСтрока.ШтрихкодУпаковки =  лЭлемент;
					КонецЦикла;
					Продолжить;
				КонецЕсли;
			Исключение 
				Продолжить;
			КонецПопытки;
		КонецЕсли;

		стрИсходныйДокумент = ИсходныйДокумент.ШтрихкодыУпаковок.Добавить();
		стрИсходныйДокумент.ШтрихкодУпаковки = лЭлемент;		
		Попытка стрИсходныйДокумент.ЗначениеШтрихкода = УбратьСкобкиТеговМарка(лЭлемент.ЗначениеШтрихкода,ПолучитьТипМаркированнойПродукции(лЭлемент.Номенклатура)) Исключение КонецПопытки;
		
	КонецЦикла;


КонецПроцедуры

&НаСервере
Процедура СоздатьСтрокиАкцизныхМарокПоМассиву(лМассив, ИсходныйДокумент)
	
	Для Каждого лЭлемент из лМассив Цикл
		
		Если лЭлемент = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		лСтруктураПоиска = Новый Структура("ШтрихкодУпаковки", лЭлемент);	
		СтрокиПоиска = ИсходныйДокумент.АкцизныеМарки.НайтиСтроки(лСтруктураПоиска);
		Если СтрокиПоиска.Количество() <> 0 тогда
			Продолжить;
		КонецЕсли;
		
		лСтруктураПоиска = Новый Структура("АкцизнаяМарка", лЭлемент);	
		СтрокиПоиска = ИсходныйДокумент.АкцизныеМарки.НайтиСтроки(лСтруктураПоиска);
		Если СтрокиПоиска.Количество() <> 0 тогда
			Продолжить;
		КонецЕсли;

		
		лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика", лЭлемент.Номенклатура,лЭлемент.Характеристика);	
		СтрокиПоиска = ИсходныйДокумент.Товары.НайтиСтроки(лСтруктураПоиска);
		Если СтрокиПоиска.Количество() > 0 тогда
			
			НоваяСтрокаТЧ = ИсходныйДокумент.АкцизныеМарки.Добавить();
			НоваяСтрокаТЧ.ШтрихкодУпаковки = лЭлемент;
			НоваяСтрокаТЧ.АкцизнаяМарка = лЭлемент;
			НоваяСтрокаТЧ.ИдентификаторСтроки =	СтрокиПоиска[0].ИдентификаторСтроки;	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипМаркированнойПродукции(лНоменклатура)
	
	ТипПродукции = 0;
	
	Попытка
		ПродукцияИСМП = Новый Массив;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС); Исключение КонецПопытки;

		Если лНоменклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция 
			или лНоменклатура.ВидНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция тогда
			ТипПродукции = 1;  // Табак
		ИначеЕсли ПродукцияИСМП.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			или ПродукцияИСМП.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено  тогда
		    ТипПродукции = 2; // Обувь и прочее
		КонецЕсли;		
	Исключение
	КонецПопытки;
	
	Если ТипПродукции = 0 тогда
		Попытка	
			Если лНоменклатура.ТабачнаяПродукция Тогда
				ТипПродукции = 1;
			ИначеЕсли лНоменклатура.ОбувнаяПродукция Тогда
				ТипПродукции = 2;
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		Попытка	
			Если лНоменклатура.ВидНоменклатуры.ТабачнаяПродукция Тогда
				ТипПродукции = 1;
			ИначеЕсли лНоменклатура.ВидНоменклатуры.ОбувнаяПродукция Тогда
				ТипПродукции = 2;
			КонецЕсли;	
		Исключение
		КонецПопытки;
	КонецЕсли;		
		
	
	Возврат ТипПродукции;

КонецФункции

&НаСервере
Функция УбратьСкобкиТеговМарка(Строка,ТипПродукции)
	
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	//Обувь:
	//01+GTIN+21+SN = 31
	//Лекарства:
	//01+GTIN+21+SN = 31
	//Фотоаппараты:
	//01+GTIN+21+SN = 38	
	//Молочка:
	//01+GTIN+21+SN = 24

	Если Лев(Строка,1) = "(" Тогда 
		
		НоваяСтрока = Лев(Строка, 22);
		НоваяСтрока = СтрЗаменить(НоваяСтрока, "(", "");
		НоваяСтрока = СтрЗаменить(НоваяСтрока, ")", "");
		
		Если ТипПродукции = 1 Тогда //Блоки сигарет
			НоваяСтрока2 = Сред(Строка, 23,7);
		ИначеЕсли ТипПродукции = 4 Тогда //Фотоаппараты
			НоваяСтрока2 = Сред(Строка, 23,20);
		ИначеЕсли ТипПродукции = 5 Тогда //Молочка
			НоваяСтрока2 = Сред(Строка, 23,6);	
		Иначе
			НоваяСтрока2 = Сред(Строка, 23,13);
		КонецЕсли;
			
		Итог = НоваяСтрока + НоваяСтрока2;		
	Иначе   
		
		Если ТипПродукции = 1 Тогда //Пачки сигарет
			НоваяСтрока = Сред(Строка,1,21);
		Иначе
			НоваяСтрока = Строка;
		КонецЕсли;
		
		Итог = НоваяСтрока;		
	КонецЕсли;
	
	Возврат Итог;
	
КонецФункции

&НаСервере
Функция УбратьСкобкиТеговУпаковка(Строка)
	
	НоваяСтрока = СтрЗаменить(Строка, "(", "");
	НоваяСтрока = СтрЗаменить(НоваяСтрока, ")", "");
	итог = НоваяСтрока;	
	
	Возврат итог;
	
КонецФункции

&НаСервере
Процедура ВнестиИзмененияВКоличествоТоваров(ИсходныйДокумент, СтруктураСобранныхМарокИУпаковок)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	                      |	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	                      |	ШтрихкодыУпаковокТоваров.Серия КАК Серия,
	                      |	СУММА(1) КАК Количество
	                      |ИЗ
	                      |	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	                      |ГДЕ
	                      |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В(&МассивМарок)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ШтрихкодыУпаковокТоваров.Упаковка,
	                      |	ШтрихкодыУпаковокТоваров.Серия,
	                      |	ШтрихкодыУпаковокТоваров.Номенклатура,
	                      |	ШтрихкодыУпаковокТоваров.Характеристика");
	Запрос.УстановитьПараметр("МассивМарок", СтруктураСобранныхМарокИУпаковок.Марки);
	
	ТабРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТабТовары из ИсходныйДокумент.Товары Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТабТовары);
		РезультатПоиска = ТабРезультатЗапроса.НайтиСтроки(СтруктураПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			
			СтрокаТабТовары.КоличествоУпаковок = РезультатПоиска[0].Количество;			
			СтрокаТабТовары.Количество = РезультатПоиска[0].Количество;
			
			Попытка ПерезаполнитьСтрокуТабТоварыПослеИзмененияКоличества(СтрокаТабТовары, ИсходныйДокумент); Исключение КонецПопытки;
						
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСтрокуТабТоварыПослеИзмененияКоличества(ТекущаяСтрока, ИсходныйДокумент)
	
	СтруктураДействий = Новый Структура;
	
	Попытка
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ИсходныйДокумент);
	Исключение
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ИсходныйДокумент);
	КонецПопытки;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	
	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
	
	Попытка
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
	Исключение
	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСправочникСсылкаШтрихкодыУпаковок(КодИдентификацииИзвлеченный, ЦРПТМарка_Длина, KM_RawMrc, KM_TNVED, СоздаватьЕслиНеНайдена=Ложь, Параметры = Неопределено)
	
	
							
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""";
					
	ЗначениеШтрихкода=КодИдентификацииИзвлеченный;

	//Символы _ и % присутствуют в алфавите маркировки, поэтому требуется экранирование через спецсимвол, символ $ не присутствует в алфавите маркировки
	ЗначениеШтрихкодаДляЗапроса = ""+ЗначениеШтрихкода;
	ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"_","$_");
	ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса,"%","$%");
	ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкодаДляЗапроса + "%";
	
	Запрос.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", ЗначениеШтрихкодаДляЗапроса);

	КодМаркировкиНеНайден = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийКМ = Выборка.Ссылка;
		
		// Запрос подобно не учитывает регистр, поэтому в выборке может оказаться несколько результатов или неоказаться нужного, надо проверить что нужный КМ выбран.
		Если СтрНайти(ТекущийКМ.ЗначениеШтрихкода,ЗначениеШтрихкода)=0 тогда
			Продолжить;
		Иначе
			КодМаркировкиНеНайден = Ложь;	
		КонецЕсли;	
		
		
		Если ЦРПТМарка_Длина = 21 и ТекущийКМ.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix  и СтрДлина(ТекущийКМ.ЗначениеШтрихкода)=21 тогда 
			ДополнитьИнформациюТабачнойПродукцииМРЦ(ТекущийКМ,KM_RawMrc);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущийКМ.Номенклатура) И Параметры <> Неопределено тогда
			ДополнитьИнформациюНоменклатура(ТекущийКМ,Параметры,ЦРПТМарка_Длина,КодИдентификацииИзвлеченный);
		КонецЕсли;

			
		Возврат ТекущийКМ;
	КонецЦикла;
		
		
	Если КодМаркировкиНеНайден тогда

		Если СоздаватьЕслиНеНайдена И Параметры <> Неопределено Тогда	
			Возврат СоздатьСправочникШтрихкодУпаковки(КодИдентификацииИзвлеченный, Параметры, KM_RawMrc, KM_TNVED, ЦРПТМарка_Длина);
		Иначе		
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // ()

&НаСервере
Процедура ВнестиДанныеОСобранныхМарках(ДеревоМаркированнойПродукции, ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок, ВерхнийУровеньВНаличии = Ложь, ЭтоПриемка = Ложь)
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");

	Для Каждого Строка из ДеревоМаркированнойПродукции.Строки Цикл
		
		Если ВерхнийУровеньВНаличии тогда
			
			Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;

			Если Строка.Строки.Количество() = 0 и ЭтоПриемка тогда
				СтруктураПоиска = Новый Структура("GTIN, Номенклатура, Характеристика, Серия", Строка.GTIN, Строка.Номенклатура, Строка.Характеристика, Строка.Серия);
				НайденныеСтроки = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					НайденнаяСтрока.КоличествоПодобрано = НайденнаяСтрока.КоличествоПодобрано + 1;
					Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СтруктураСобранныхМарокИУпаковок.Короба.Найти(Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",Строка.Представление))<>Неопределено Тогда			
			
			Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;

		ИначеЕсли СтруктураСобранныхМарокИУпаковок.Марки.Найти(Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",Строка.Представление))<>Неопределено Тогда
	
			Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			
			Если Строка.Строки.Количество() = 0 и ЭтоПриемка тогда
				СтруктураПоиска = Новый Структура("GTIN, Номенклатура, Характеристика, Серия", Строка.GTIN, Строка.Номенклатура, Строка.Характеристика, Строка.Серия);
				НайденныеСтроки = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					НайденнаяСтрока.КоличествоПодобрано = НайденнаяСтрока.КоличествоПодобрано + 1;
					Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
		Если Строка.Строки.Количество() <> 0 Тогда
			
			Если Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии Тогда
				ВнестиДанныеОСобранныхМарках(Строка,ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок, Истина, ЭтоПриемка);
			Иначе
				ВнестиДанныеОСобранныхМарках(Строка,ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок, Ложь, ЭтоПриемка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


&НаСервере
Функция ПроверкаЕстьВМассивеСсылок(МассивСсылок, ПроверяемаяСтрока)

	Для Каждого ЭлементМассива из МассивСсылок Цикл
		
		Попытка
			Если ЭлементМассива.ЗначениеШтрихкода = ПроверяемаяСтрока Тогда
				Возврат Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции // ()

#Область ЗаполнениеРезультатаПроверки

Функция ПолучитьВидПродукцииИСДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументСсылка
	|	И  СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
	|   И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция) 
	|   И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриобретениеТоваровУслуг", Документ.Метаданные().Имя); 
	
	ТЗОсобенностьУчета = Запрос.Выполнить().Выгрузить();
	
	МассивОсобенностьУчета = Новый Массив;
	
	Если ТЗОсобенностьУчета.Количество() <> 0 тогда
		
		Для каждого СтрокаТЗ Из ТЗОсобенностьУчета Цикл
			ТекущаяОсобенностьУчета = СтрокаТЗ.ОсобенностьУчета;
			Модуь_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
			ТекущийВидПродукцииИС = Модуь_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ТекущаяОсобенностьУчета);
			
			МассивОсобенностьУчета.Добавить(ТекущийВидПродукцииИС);	
		КонецЦикла; 

	Иначе
		МассивОсобенностьУчета.Добавить(Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	КонецЕсли;
	
	Возврат МассивОсобенностьУчета;
		
КонецФункции

Функция ПолучитьРезультатПроверкиДокумента(ПроверяемыйДокумент,Шаблон, ВидМаркируемойПродукцииДокумента)
	
	// Проверим ранее сохраненные данные, только для поступлений
	Выборка = ВыборкаПоДаннымСтатусыПроверкиИПодбораДокументовИСМП(ПроверяемыйДокумент.Ссылка, ВидМаркируемойПродукцииДокумента);
	
	Если (Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" Или Шаблон.ВидДокумента = "ПриемкаТоваровИСМП") И Выборка.Следующий() Тогда
	
		Возврат Выборка.ДанныеПроверкиИПодбора.Получить();
		
	Иначе
		Если Шаблон.МаркировкаПроверкаБезСертификатаИС тогда
			Возврат ИнициализироватьДанныеПроверки(ПроверяемыйДокумент.Ссылка, ВидМаркируемойПродукцииДокумента,Шаблон);
		КонецЕсли;		
		
		Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
		Модуь_ИнтерфейсИСМПКлиентСервер = ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
		Модуь_ИнтерфейсМОТПКлиентСервер = ОбщийМодуль("ИнтерфейсМОТПКлиентСервер");

		Если Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = Неопределено Тогда
			Сообщить("Конфигурация 1С не поддерживает работу с Маркировкой", 
				СтатусСообщения.ОченьВажное);		
			Возврат Неопределено;
		КонецЕсли;
			
				//Табак
		Если ВидМаркируемойПродукцииДокумента = Перечисления.ВидыПродукцииИС.Табак тогда		
			ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
			Модуь_ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(ПроверяемыйДокумент.Организация));
		Иначе
			ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
			Модуь_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ПроверяемыйДокумент.Организация));	
		КонецЕсли;
		
		Если ТребуетсяОбновлениеКлючаСессии Тогда
				
			Сообщить("Ошибка заполнения результатов проверки документа. Не получилось обновить ключ сессии. Проверьте настройки подключения к ИС", 
				СтатусСообщения.ОченьВажное);
				
			Возврат Неопределено;
			
		Иначе
			
			
			
			ИдентификаторОперации = Новый УникальныйИдентификатор();
			
			ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
			ПараметрыВыполнения.ЗапуститьВФоне = Истина;
			
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
				ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
			КонецЕсли;

			ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторОперации);
			
						
			//Табак
			Если ВидМаркируемойПродукцииДокумента = Перечисления.ВидыПродукцииИС.Табак тогда
				ПараметрыОперации = ПолучитьПараметрыМОТП(ПроверяемыйДокумент.Ссылка,ВидМаркируемойПродукцииДокумента,Шаблон);
				ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое заполнение данных проверки и подбора табачной продукции'");
				
				ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
				"Обработки.ПроверкаИПодборТабачнойПродукцииМОТП.ЗагрузитьДанныеДокументаДлительнаяОперация",
				ПараметрыОперации, ПараметрыВыполнения);		
			Иначе
				ПараметрыОперации = ПолучитьПараметрыИСМП(ПроверяемыйДокумент.Ссылка,ВидМаркируемойПродукцииДокумента,Шаблон);
				ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое заполнение данных проверки и подбора маркируемой продукции'");

				ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
				"Обработки.ПроверкаИПодборПродукцииИСМП.ЗагрузитьДанныеДокументаДлительнаяОперация",
				ПараметрыОперации, ПараметрыВыполнения);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДлительнаяОперация.ИдентификаторЗадания) тогда
				Если НЕ ЗначениеЗаполнено(ДлительнаяОперация.АдресРезультата) тогда
					Сообщить("Ошибка заполнения результатов проверки документа. Не получилось открыть форму проверки документа.", 
						СтатусСообщения.ОченьВажное);

					Возврат Неопределено;
				КонецЕсли;	
			Иначе		
				ОжидатьЗавершенияДлительнойОперации(ДлительнаяОперация.ИдентификаторЗадания);
			КонецЕсли;
			
			Возврат ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
			
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // ()

Процедура ОжидатьЗавершенияДлительнойОперации(ИдентификаторЗадания)

	Пока Истина Цикл
					
		Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Прервать;
		КонецЕсли;
					
	КонецЦикла;	

КонецПроцедуры

Процедура СохранитьРезультатПроверкиДокумента(ПроверяемыйДокумент, РезультатПроверки, ВидПродукцииИСДокумента)
	
	Попытка РезультатПроверки.СтрокаПродукцияБезУпаковки = Неопределено; Исключение КонецПопытки;
	Попытка РезультатПроверки.СтрокаПачкиБезБлока = Неопределено; Исключение КонецПопытки;
	Попытка РезультатПроверки.СтрокаБлокиБезКоробки = Неопределено; Исключение КонецПопытки;
	
	Если ЗначениеЗаполнено(ВидПродукцииИСДокумента) тогда
		РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.СохранитьПромежуточныеРезультатыПроверкиДокумента(
			ПроверяемыйДокумент.Ссылка,
			ВидПродукцииИСДокумента,
			Новый ХранилищеЗначения(РезультатПроверки));	
		
		УстановитьСтатусПроверкиВыполнена(ПроверяемыйДокумент);		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура УстановитьСтатусПроверкиВыполнена(ПроверяемыйДокумент)

	УстановитьПривилегированныйРежим(Истина);

	Выборка = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.Выбрать(Новый Структура("Документ", ПроверяемыйДокумент.Ссылка));
	Выборка.Следующий();
	
	МенеджерЗаписи = Выборка.ПолучитьМенеджерЗаписи();
	МенеджерЗаписи.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;
	МенеджерЗаписи.Записать();

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ВыборкаПоДаннымСтатусыПроверкиИПодбораДокументовИСМП(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыПроверкиИПодбораДокументовИСМП.ДанныеПроверкиИПодбора КАК ДанныеПроверкиИПодбора
	|ИЗ
	|	РегистрСведений.СтатусыПроверкиИПодбораДокументовИСМП КАК СтатусыПроверкиИПодбораДокументовИСМП
	|ГДЕ
	|	СтатусыПроверкиИПодбораДокументовИСМП.Документ = &Документ
	|	И СтатусыПроверкиИПодбораДокументовИСМП.ВидМаркируемойПродукции = &ВидМаркируемойПродукции";
	
	Запрос.УстановитьПараметр("ВидМаркируемойПродукции"	, ВидМаркируемойПродукцииДокумента);
	Запрос.УстановитьПараметр("Документ"				, ПроверяемыйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции	

#КонецОбласти

#Область НовыйВариант

Функция ИнициализироватьДанныеПроверки(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента,Шаблон)
	
	ТекстОшибки = "";
	
	РезультатПроверкиДокумента = Неопределено;
	Если РезультатыПроверкиУспешноСохранены_ИС(ПроверяемыйДокумент,РезультатПроверкиДокумента,ТекстОшибки, ВидМаркируемойПродукцииДокумента,Шаблон) Тогда
		Возврат РезультатПроверкиДокумента;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	Возврат Неопределено;	
	
КонецФункции

Функция РезультатыПроверкиУспешноСохранены_ИС(ПроверяемыйДокумент,ДанныеРезультатовПроверки,ТекстОшибки, ВидМаркируемойПродукцииДокумента,Шаблон)
	
	Попытка	
		Если ВидМаркируемойПродукцииДокумента = Перечисления.ВидыПродукцииИС.Табак тогда
			ПараметрыДанных = ПолучитьПараметрыМОТП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента,Шаблон);
			ДанныеРезультатовПроверки = НачальныеДанныеДляРезультатовПроверкиМОТП(ПараметрыДанных);
		Иначе 
			ПараметрыДанных = ПолучитьПараметрыИСМП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента,Шаблон);
			ДанныеРезультатовПроверки = НачальныеДанныеДляРезультатовПроверкиИСМП(ПараметрыДанных);
		КонецЕсли;
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

//ИСМП

Функция ПолучитьПараметрыИСМП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента,Шаблон)
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("ПроверкаНеПоДокументу",            	Ложь);                   
	ПараметрыОперации.Вставить("ПроверяемыйДокумент",              	ПроверяемыйДокумент);
	ПараметрыОперации.Вставить("НачальныйСтатусПроверки",          	Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
	ПараметрыОперации.Вставить("ДетализацияСтруктурыХранения",     	Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная);
	ПараметрыОперации.Вставить("РежимПроверки",     				Перечисления.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены);
	ПараметрыОперации.Вставить("РедактированиеФормыНедоступно",    	Ложь);
	
	Если ПроверяемыйДокумент.Метаданные().Имя="ПриобретениеТоваровУслуг" или ПроверяемыйДокумент.Метаданные().Имя="ПриемкаТоваровИСМП" тогда
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок", 	Ложь);
	Иначе	
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок", 	Истина);
	КонецЕсли;
	
	ПараметрыОперации.Вставить("ПараметрыСканирования",            	ПолучитьПараметрыСканированияИСПМ(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента,Шаблон));
	ПараметрыОперации.Вставить("ПараметрыПроверкиКодовМаркировки", 	ПолучитьПараметрыПроверкиКодовМаркировкиИСМП(ПроверяемыйДокумент,Шаблон));
	ПараметрыОперации.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Ложь);
	ПараметрыОперации.Вставить("ПроверкаЭлектронногоДокумента", 	Ложь);
	ПараметрыОперации.Вставить("ВидМаркируемойПродукции", 			ВидМаркируемойПродукцииДокумента);
	
	Попытка ПараметрыОперации.Вставить("ДанныеКлючаСессииИСМП", ПараметрыСеанса.ДанныеКлючаСессииИСМП); Исключение КонецПопытки;
	
	Возврат ПараметрыОперации;

КонецФункции


Функция ПолучитьПараметрыСканированияИСПМ(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента,Шаблон)

	ПараметрыСканирования = Новый Структура();
	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции", Новый Массив);
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
			
	Попытка	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукцииДокумента); Исключение КонецПопытки;

	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки"                      , Ложь);
	ПараметрыСканирования.Вставить("КэшМаркируемойПродукции"                        , Неопределено);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции"             , Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции" , Истина);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД"                            , Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева"  , Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИС"         , Истина);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок"         , Ложь);
	ПараметрыСканирования.Вставить("ДоступнаПечатьЭтикеток"                         , Ложь);
	ПараметрыСканирования.Вставить("Детализация"                         			, Неопределено);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения"                   , Неопределено);
	
	Если Шаблон.МаркировкаПроверкаБезСертификатаИС тогда
		ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, Ложь);
	Иначе
		ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, Истина);
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот"					, Ложь);
	ПараметрыСканирования.Вставить("СтатусКодаМаркировкиПоУмолчанию"				, Неопределено);
	ПараметрыСканирования.Вставить("СсылкаНаОбъект"									, Неопределено);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой"	, Ложь);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру"						, Ложь);
	ПараметрыСканирования.Вставить("Организация"									, Неопределено);
	
	Попытка ПараметрыСканирования.Организация = ПроверяемыйДокумент.Организация; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий"							, Неопределено);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП"					, Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС"							, Ложь);
	ПараметрыСканирования.Вставить("Владелец"							, Неопределено);
	
	ПараметрыСканирования.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок"	, "ШтрихкодыУпаковок");
	ПараметрыСканирования.Вставить("ИмяКолонкиШтрихкодУпаковки"			, "ШтрихкодУпаковки");

	ПараметрыСканирования.Вставить("ОтборПоВидуПродукции"			, Истина);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПула"	, Ложь);
	
	ПараметрыСканирования.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры"	, Новый Массив());

	ПараметрыСканирования.Вставить("ЗаполнятьСрокГодности"								, Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьОкончаниеСрокаГодности"				, Ложь);

	ПараметрыСканирования.Вставить("ТолькоМаркируемаяПродукция"				, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП"				, Ложь);
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП"				, Ложь);

	ПараметрыСканирования.Вставить("ЗаписыватьЛогЗапросовИСМП"				, Ложь);

	Возврат ПараметрыСканирования;

КонецФункции // ()

Функция ПолучитьПараметрыПроверкиКодовМаркировкиИСМП(ПроверяемыйДокумент,Шаблон)

	ПараметрыПроверкиКодовМаркировки = Новый Структура();
		
	Если Шаблон.МаркировкаПроверкаБезСертификатаИС тогда
		ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки", Ложь);
		ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеИСМП", Истина);
	Иначе
		ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки", Истина);
		ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеИСМП", Ложь);
	КонецЕсли;	
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	Модуь_ИнтеграцияИСВызовСервера = ОбщийМодуль("ИнтеграцияИСВызовСервера");

	
	Попытка
		Если Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" тогда
			ИННВладельца = Модуь_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Контрагент).ИНН;
			Владелец     = ПроверяемыйДокумент.Контрагент;
		Иначе
			ИННВладельца = Модуь_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Организация).ИНН;
			Владелец     = ПроверяемыйДокумент.Организация;			
		КонецЕсли;
		ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца", Истина);
	Исключение
		ИННВладельца = "";
		Владелец     = Неопределено;
		ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца", Ложь);
	КонецПопытки;	
	
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ИННВладельца", ИННВладельца);
	ПараметрыПроверкиКодовМаркировки.Вставить("Владелец", Владелец);
	ПараметрыПроверкиКодовМаркировки.Вставить("ОбратноеСканирование", Ложь);

	ДопустимыеСтатусыКодовМаркировки = Новый Массив;
	 
		ДопустимыеСтатусыКодовМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыКодовМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыКодовМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
	ДопустимыеСтатусыУпаковок = Новый Массив;

		ДопустимыеСтатусыУпаковок.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковок.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыУпаковок.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));

	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки", ДопустимыеСтатусыКодовМаркировки);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок", ДопустимыеСтатусыКодовМаркировки);

	Возврат ПараметрыПроверкиКодовМаркировки;

КонецФункции // ()

Функция НачальныеДанныеДляРезультатовПроверкиИСМП(ПараметрыДанных)
			
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          ДеревоМаркированнойПродукции_ИСМП());
	ДанныеДокумента.Вставить("ПодобраннаяМаркируемаяПродукция",       ПодобраннаяМаркируемаяПродукция_ИСМП());
	ДанныеДокумента.Вставить("ПараметрыПроверкиКодовМаркировки",      ПараметрыДанных.ПараметрыПроверкиКодовМаркировки);
	ДанныеДокумента.Вставить("КоличествоНедопустимыхКодовМаркировки", 0);
	ДанныеДокумента.Вставить("УпаковкиДокумента",                     Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("РежимПроверки",                         ПараметрыДанных.РежимПроверки);
	ДанныеДокумента.Вставить("ДобавленныеУпаковки",                   Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",          Новый СписокЗначений());
	ДанныеДокумента.Вставить("СледующийСтикерОтложено",               1);
	ДанныеДокумента.Вставить("СодержимоеУпаковокНедоступно",          Ложь);
	ДанныеДокумента.Вставить("СохраненВыборПоМаркируемойПродукции",   Ложь);
	ДанныеДокумента.Вставить("ДанныеВыбораПоМаркируемойПродукции",    Неопределено);
	ДанныеДокумента.Вставить("ШтрихкодТекущейПроверяемойУпаковки",    "");
	ДанныеДокумента.Вставить("ШтрихкодыУпаковок",                     Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДанныеРанееСгенерированныхШтрихкодов",  Неопределено);
	
	ДанныеДокумента.Вставить("КоличествоПоДокументуСУчетомВидаПродукции", 	Неопределено);
	ДанныеДокумента.Вставить("Контейнер",                             		Неопределено);	

	//нужны для первоначального получения данных	
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               					ПараметрыДанных.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",      					ПараметрыДанных.РежимПодбораСуществующихУпаковок);
	ДанныеДокумента.Вставить("ПроверкаЭлектронногоДокумента",         					ПараметрыДанных.ПроверкаЭлектронногоДокумента);
	ДанныеДокумента.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", 	ПараметрыДанных.КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", 				ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("СтрокаПродукцияБезУпаковки",   							Неопределено);
	ДанныеДокумента.Вставить("Организация",                	 							ПараметрыДанных.ПараметрыСканирования.Организация);
	ДанныеДокумента.Вставить("ПроверяемыйДокумент",          							ПараметрыДанных.ПроверяемыйДокумент);
	
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");

	ТаблицаМаркируемойПродукции = Модуь_ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента(
		ПараметрыДанных.ПроверяемыйДокумент, ПараметрыДанных.ВидМаркируемойПродукции);	
	ЗаполнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(ТаблицаМаркируемойПродукции, ДанныеДокумента);
		
	ПараметрыСканирования = ПараметрыДанных.ПараметрыСканирования;
	ПараметрыСканирования.СсылкаНаОбъект = ПараметрыДанных.ПроверяемыйДокумент;
	
	Модуь_ШтрихкодированиеИСМПСлужебный = ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");

	РезультатПолученияДанных = Модуь_ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(
		ПараметрыДанных.ПроверяемыйДокумент, ПараметрыСканирования.Детализация, ПараметрыСканирования);
	
	Если РезультатПолученияДанных.ЕстьОшибки Тогда
		ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
	КонецЕсли;
	
	ДанныеПроверяемогоДокумента = РезультатПолученияДанных.ВложенныеШтрихкоды;	
	ЗаполнитьТаблицуКоличествоПоДокументуСУчетомВидаПродукции_ИСМП(ДанныеДокумента, ПараметрыДанных.ВидМаркируемойПродукции);
	ДополнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(
		ДанныеПроверяемогоДокумента.МаркированныеТовары, ДанныеДокумента, ПараметрыДанных.ВидМаркируемойПродукции,ПараметрыДанных.ПараметрыСканирования);	
	ЗаполнитьДеревоМаркированнойПродукции_ИСМП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента);	
	ЗаполнитьСписокШтрихкодыУпаковок_ИСМП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента.ШтрихкодыУпаковок);

	
	///НУЖНЫЙ РЕЗУЛЬТАТ			
	РезультатыСканированияМаркируемойПродукции = Новый Структура;
	РезультатыСканированияМаркируемойПродукции.Вставить("ДеревоМаркированнойПродукции",          ДанныеДокумента.ДеревоМаркированнойПродукции); //Тип("ДеревоЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПодобраннаяМаркируемаяПродукция",       ДанныеДокумента.ПодобраннаяМаркируемаяПродукция); //Тип("ТаблицаЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПараметрыПроверкиКодовМаркировки",      ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("КоличествоНедопустимыхКодовМаркировки", ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("УпаковкиДокумента",                     ДанныеДокумента.УпаковкиДокумента);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДетализацияСтруктурыХранения",          ДанныеДокумента.ДетализацияСтруктурыХранения);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДобавленныеУпаковки",                   ДанныеДокумента.ДобавленныеУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",          ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ШтрихкодыУпаковок",                     ДанныеДокумента.ШтрихкодыУпаковок);

	Возврат РезультатыСканированияМаркируемойПродукции;

	
КонецФункции

Функция ДеревоМаркированнойПродукции_ИСМП()
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП, ПеречислениеСсылка.ТипыУпаковок"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",           Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",             Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимогоДоСопоставления", Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",       Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненнойПродукции",      Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",          Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",  Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                        Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННАгента",                           Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                 Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки", Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",           Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СодержимоеНедоступно",                Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС",     Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ГоденДо",                             Новый ОписаниеТипов("Дата"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Скоропортящаяся",                     Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипШтрихкода",                        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХэшСуммаНормализации",                Новый ОписаниеТипов("Строка"));
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

Функция ПодобраннаяМаркируемаяПродукция_ИСМП()
	
	ПодобраннаяМаркируемаяПродукция = Новый ТаблицаЗначений();
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Номенклатура",                    Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Характеристика",                  Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Серия",                           Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Количество",                      Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобрано",             Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИндексКодаМаркировки",            Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("GTIN",                            Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеНоменклатуры",       Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("СтатусУказанияСерий",             Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ХарактеристикиИспользуются",      Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТипНоменклатуры",                 Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НомерСтроки",                     Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоИС",                    Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставлена",        Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ГоденДо",                         Новый ОписаниеТипов("Дата"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Скоропортящаяся",                 Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КодыGTIN",                        Новый ОписаниеТипов("СписокЗначений"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеGTIN",               Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставленаПоУПД",   Новый ОписаниеТипов("Булево"));
	
	Возврат ПодобраннаяМаркируемаяПродукция;
	
КонецФункции

Процедура ЗаполнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(ТаблицаМаркируемойПродукции, ДанныеДокумента)
	
	Для Каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
		СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника);
		СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
		
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");

		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуКоличествоПоДокументуСУчетомВидаПродукции_ИСМП(ДанныеДокумента, ВидПродукции)
	
	ПодобраннаяМаркируемаяПродукция = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция;
	
	Если ПодобраннаяМаркируемаяПродукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСвойстваВидаПродукции = Новый Массив;
	
	ИменаКолонокТаблицы = Новый Массив;
	ИменаКолонокТаблицы.Добавить("GTIN");
	ИменаКолонокТаблицы.Добавить("Номенклатура");
	ИменаКолонокТаблицы.Добавить("Характеристика");
	ИменаКолонокТаблицы.Добавить("Серия");
	ИменаКолонокТаблицы.Добавить("Количество");
	ИменаКолонокТаблицы.Добавить("ИдентификаторПроисхожденияВЕТИС");
	ИменаКолонокТаблицы.Добавить("ГоденДо");
	ИменаКолонокТаблицы.Добавить("Скоропортящаяся");
	
	КоличествоПоДокументуСУчетомВидаПродукции =
		ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки(СтрСоединить(ИменаКолонокТаблицы, ","));
	
	Для Каждого СтрокаПодобраннойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если СтрокаПодобраннойПродукции.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.GTIN) Тогда
			
			// Только остаточные GTIN
			Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПроверяемыеСвойстваВидаПродукции.Количество() = 0 Тогда
				Продолжить; // Сохраняем только специвические колонки
			КонецЕсли;
			
			Для Каждого ИмяСвойства Из ПроверяемыеСвойстваВидаПродукции Цикл
				Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции[ИмяСвойства]) Тогда
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			КоличествоПоДокументуСУчетомВидаПродукции.Добавить(), СтрокаПодобраннойПродукции);
		
	КонецЦикла;
	
	Если КоличествоПоДокументуСУчетомВидаПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента.Вставить("КоличествоПоДокументуСУчетомВидаПродукции", КоличествоПоДокументуСУчетомВидаПродукции);
	
КонецПроцедуры

Процедура ДополнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования)
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	
	Попытка 
		Модуь_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукции(
		ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции);
	Исключение
		
		Попытка
			Модуь_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукции(
			ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);	
		Исключение	
			Модуь_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукцииИСМП(
			ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);			
		КонецПопытки;
		
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьДеревоМаркированнойПродукции_ИСМП(ДеревоУпаковокДокумента, ДанныеДокумента)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева_ИСМП(ДеревоУпаковокДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоУпаковокДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаПродукцияБезУпаковки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
		ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Функция ДетализацияСтруктурыХраненияДерева_ИСМП(ДеревоУпаковок)

	ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки;
	Модуь_ИнтеграцияИСКлиентСервер= ОбщийМодуль("ИнтеграцияИСКлиентСервер");

	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.КоробаПотребительскиеУпаковки;
			
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
				Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
					ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента)
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаПродукции Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаПродукции, КоллекцияСтрокПриемника, ДанныеДокумента);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
	
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
		
		СтрокаПродукцияБезУпаковки = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
		
		Если СтрокаПродукцияБезУпаковки = Неопределено Тогда
			СтрокаПродукцияБезУпаковки = ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПродукцияБезУпаковки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");

	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	
	Если НоваяСтрока.НедопустимыйКодМаркировки Тогда
		ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки = ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки + 1;
	КонецЕсли;
	
	Если НоваяСтрока.СодержимоеНедоступно Тогда
		ДанныеДокумента.СодержимоеУпаковокНедоступно = Истина;
	КонецЕсли;
	
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;

	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента);
	КонецЦикла;

КонецПроцедуры

Функция ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока);
	
	ДанныеДокумента.СтрокаПродукцияБезУпаковки = НоваяСтрока;
	
	Возврат НоваяСтрока;

КонецФункции

Процедура ЗаполнитьСписокШтрихкодыУпаковок_ИСМП(СтрокаИсточника, ШтрихкодыУпаковок)
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		Если ЗначениеЗаполнено(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки)
			И ШтрихкодыУпаковок.НайтиПоЗначению(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки) = Неопределено Тогда
			ШтрихкодыУпаковок.Добавить(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки, ПодчиненнаяСтрокаИсточника.Штрихкод);
		КонецЕсли;
		Если СтрокаИсточника.Строки.Количество() > 0 Тогда
			ЗаполнитьСписокШтрихкодыУпаковок_ИСМП(ПодчиненнаяСтрокаИсточника, ШтрихкодыУпаковок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//МОТП

Функция ПолучитьПараметрыМОТП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента,Шаблон)
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("ПроверкаНеПоДокументу",            Ложь);                   
	ПараметрыОперации.Вставить("ПроверяемыйДокумент",              ПроверяемыйДокумент);
	ПараметрыОперации.Вставить("НачальныйСтатусПроверки",          Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
	ПараметрыОперации.Вставить("ДетализацияСтруктурыХранения",     Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.ПустаяСсылка());
	ПараметрыОперации.Вставить("РедактированиеФормыНедоступно",    Ложь);
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") тогда
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок", 	Ложь);
	Иначе	
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок", 	Истина);
	КонецЕсли;

	ПараметрыОперации.Вставить("ПараметрыСканирования",            ПолучитьПараметрыСканированияМОТП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента));
	ПараметрыОперации.Вставить("ПараметрыПроверкиКодовМаркировки", ПолучитьПараметрыПроверкиКодовМаркировкиМОТП(ПроверяемыйДокумент,Шаблон));
	ПараметрыОперации.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Ложь);
	ПараметрыОперации.Вставить("ПроверкаЭлектронногоДокумента", Ложь);
	ПараметрыОперации.Вставить("ВидМаркируемойПродукции"		, ВидМаркируемойПродукцииДокумента);
	ПараметрыОперации.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП", Истина);
	ПараметрыОперации.Вставить("ЭтоВосстановлениеДетализации", Ложь);

	Попытка ПараметрыОперации.Вставить("ДанныеКлючаСессииМОТП", ПараметрыСеанса.ДанныеКлючаСессииМОТП); Исключение КонецПопытки;
	
	Возврат ПараметрыОперации;

КонецФункции

Функция ПолучитьПараметрыСканированияМОТП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента, ПараметрыСканирования = Неопределено, ИзСервиса = Ложь)

	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = Новый Структура();	
	КонецЕсли; 
	
	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции", Новый Массив);
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
			
	Попытка	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукцииДокумента); Исключение КонецПопытки;

	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки"                      , Ложь);
	ПараметрыСканирования.Вставить("КэшМаркируемойПродукции"                        , Неопределено);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции"             , Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции" , Истина);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД"                            , Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева"  , Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИС"         , Истина);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок"         , Ложь);
	ПараметрыСканирования.Вставить("ДоступнаПечатьЭтикеток"                         , Ложь);
	ПараметрыСканирования.Вставить("Детализация"                         			, Неопределено);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения"                   , Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот"					, Ложь);
	ПараметрыСканирования.Вставить("СтатусКодаМаркировкиПоУмолчанию"				, Неопределено);
	ПараметрыСканирования.Вставить("СсылкаНаОбъект"									, Неопределено);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой"	, Ложь);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру"						, Ложь);
	ПараметрыСканирования.Вставить("Организация"									, Неопределено);
	
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулМОТП"				, Ложь);

	Попытка ПараметрыСканирования.Организация = ПроверяемыйДокумент.Организация; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий"							, Неопределено);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП"					, Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС"							, Ложь);	
	
	КонтролироватьСтатусы = Ложь;
	
	Если КонтролироватьСтатусы Тогда
		ВариантПолученияМРЦ = "ВычислениеИЗапрос";
	Иначе
		ВариантПолученияМРЦ = "Вычисление";
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения",             Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыМОТП",                   ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокМОТП", ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП", ИзСервиса);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыМОТП",                    Новый Массив);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокМОТП",            Новый Массив);
	ПараметрыСканирования.Вставить("Детализация",                              Неопределено);
	ПараметрыСканирования.Вставить("ВариантПолученияМРЦ",                      ВариантПолученияМРЦ);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокМОТП",              Ложь);

	ПараметрыСканирования.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок"	, "ШтрихкодыУпаковок");
	ПараметрыСканирования.Вставить("ИмяКолонкиШтрихкодУпаковки"			, "ШтрихкодУпаковки");
	ПараметрыСканирования.Вставить("ОтборПоВидуПродукции"			, Истина);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПула"	, Ложь);	
	ПараметрыСканирования.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры"	, Новый Массив());

	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"	, Ложь);
	ПараметрыСканирования.Вставить("ОперацияКонтроляАкцизныхМарок"	, Ложь);
	ПараметрыСканирования.Вставить("ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП"	, Ложь);
	ПараметрыСканирования.Вставить("ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП"	, Дата(1,1,1));
	ПараметрыСканирования.Вставить("ДопустимыйСпособВводаВОборот"	, Неопределено);
	ПараметрыСканирования.Вставить("ДопустимыйСпособВводаВОборот"	, Неопределено);
	ПараметрыСканирования.Вставить("ДопустимыПроверкиСеройЗоныМОТП"	, Ложь);
	ПараметрыСканирования.Вставить("КонтроллироватьРасхождениеСоставаУпаковокМеждуИБиМОТП"	, Ложь);
	ПараметрыСканирования.Вставить("ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП"	, Ложь);
	ПараметрыСканирования.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП"	, Истина);
	
	ПараметрыСканирования.Вставить("ЗаполнятьСрокГодности"								, Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьОкончаниеСрокаГодности"				, Ложь);

	ПараметрыСканирования.Вставить("ТолькоМаркируемаяПродукция"				, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП"				, Ложь);
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП"				, Ложь); 
	   
	ПараметрыСканирования.Вставить("ЗаписыватьЛогЗапросовИСМП"				, Ложь);
	
	Возврат ПараметрыСканирования;

КонецФункции // ()

Функция ПолучитьПараметрыПроверкиКодовМаркировкиМОТП(ПроверяемыйДокумент,Шаблон)
	
	ПараметрыПроверкиКодовМаркировки = Новый Структура();
	ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеМОТП", Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки", Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки", Неопределено);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок", Неопределено);
	
	РежимПодбораСуществующихУпаковок = Истина;
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	Модуь_ИнтеграцияИСВызовСервера = ОбщийМодуль("ИнтеграцияИСВызовСервера");

	Попытка
		Если РежимПодбораСуществующихУпаковок
			Или Модуь_ПроверкаИПодборПродукцииИСМП.КонтрагентНеРезидент(ПроверяемыйДокумент.Контрагент) Тогда
			ИННВладельца = Модуь_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Организация).ИНН;
			Владелец     = ПроверяемыйДокумент.Организация;
		Иначе
			ИННВладельца = Модуь_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Контрагент).ИНН;
			Владелец     = ПроверяемыйДокумент.Контрагент;
		КонецЕсли;
	Исключение
		ИННВладельца = "";
		Владелец     = Неопределено;
	КонецПопытки;	
	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца", Истина);
	ПараметрыПроверкиКодовМаркировки.Вставить("ИННВладельца", ИННВладельца);
	ПараметрыПроверкиКодовМаркировки.Вставить("Владелец", Владелец);

	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки", Новый Массив);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок", Новый Массив);

	Возврат ПараметрыПроверкиКодовМаркировки;

КонецФункции


Функция НачальныеДанныеДляРезультатовПроверкиМОТП(ПараметрыДанных)

	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          ДеревоМаркированнойПродукции_МОТП());
	ДанныеДокумента.Вставить("ПодобраннаяМаркируемаяПродукция",       ПодобраннаяМаркируемаяПродукция_МОТП());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",          Новый СписокЗначений());
	ДанныеДокумента.Вставить("УпаковкиДокумента",                     Новый СписокЗначений());
	ДанныеДокумента.Вставить("ШтрихкодыУпаковок",                     Новый СписокЗначений());
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               ПараметрыДанных.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",      ПараметрыДанных.РежимПодбораСуществующихУпаковок);
	ДанныеДокумента.Вставить("ПроверкаЭлектронногоДокумента",         ПараметрыДанных.ПроверкаЭлектронногоДокумента);
	ДанныеДокумента.Вставить("ПараметрыПроверкиКодовМаркировки",      ПараметрыДанных.ПараметрыПроверкиКодовМаркировки);
	ДанныеДокумента.Вставить("КоличествоНедопустимыхКодовМаркировки", 0);
	ДанныеДокумента.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", ПараметрыДанных.КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("СодержимоеУпаковокНедоступно", Ложь);
	ДанныеДокумента.Вставить("СтрокаПачкиБезБлока",          Неопределено);
	ДанныеДокумента.Вставить("СтрокаБлокиБезКоробки",        Неопределено);
	ДанныеДокумента.Вставить("Организация",                  ПараметрыДанных.ПараметрыСканирования.Организация);
	
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	
		ТаблицаМаркируемойПродукции = Модуь_ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента(
		ПараметрыДанных.ПроверяемыйДокумент, ПараметрыДанных.ВидМаркируемойПродукции);	
		ЗаполнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ТаблицаМаркируемойПродукции, ДанныеДокумента);
		
		ПараметрыСканирования = ПараметрыДанных.ПараметрыСканирования;
		
		Модуь_ШтрихкодированиеМОТП = ОбщийМодуль("ШтрихкодированиеМОТП");

		РезультатПолученияДанных = Модуь_ШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
				ПараметрыДанных.ПроверяемыйДокумент, ПараметрыСканирования.Детализация, ПараметрыСканирования);
		
		Если РезультатПолученияДанных.ЕстьОшибки Тогда
			ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
		КонецЕсли;
		
		ДанныеПроверяемогоДокумента = РезультатПолученияДанных.ВложенныеШтрихкоды;
		
		ДополнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ДанныеПроверяемогоДокумента, ДанныеДокумента,ПараметрыДанных.ВидМаркируемойПродукции,ПараметрыДанных.ПараметрыСканирования);
		ЗаполнитьДеревоМаркированнойПродукции_МОТП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента);
		
		ЗаполнитьСписокШтрихкодыУпаковок_МОТП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента.ШтрихкодыУпаковок);
		
		
		
	///НУЖНЫЙ РЕЗУЛЬТАТ			
	РезультатыСканированияМаркируемойПродукции = Новый Структура;
	РезультатыСканированияМаркируемойПродукции.Вставить("ДеревоМаркированнойПродукции",          ДанныеДокумента.ДеревоМаркированнойПродукции); //Тип("ДеревоЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПодобраннаяМаркируемаяПродукция",       ДанныеДокумента.ПодобраннаяМаркируемаяПродукция); //Тип("ТаблицаЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПараметрыПроверкиКодовМаркировки",      ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("КоличествоНедопустимыхКодовМаркировки", ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("УпаковкиДокумента",                     ДанныеДокумента.УпаковкиДокумента);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДетализацияСтруктурыХранения",          ДанныеДокумента.ДетализацияСтруктурыХранения);
	//РезультатыСканированияМаркируемойПродукции.Вставить("ДобавленныеУпаковки",                   ДанныеДокумента.ДобавленныеУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",          ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ШтрихкодыУпаковок",                     ДанныеДокумента.ШтрихкодыУпаковок);
	
	Возврат РезультатыСканированияМаркируемойПродукции;
	

КонецФункции

Функция ДеревоМаркированнойПродукции_МОТП()
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      		Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    		Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки", 								Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП, ПеречислениеСсылка.ТипыУпаковок"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            		Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",           		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",             		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       		Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",       		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхПачек",          		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                		Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",          		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",  		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            		Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        		Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      		Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               		Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 		Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                        		Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННАгента",                           		Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("МРЦ",                                 		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                		Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхБлоков",         		Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                		Метаданные.ОпределяемыеТипы.GTIN.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                 		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки", 		Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",           		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеПересчитыватьКоличествоПачек",      		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("СодержимоеНедоступно",                		Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидУпаковки",                         		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипШтрихкода",                        		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимогоДоСопоставления",    Новый ОписаниеТипов("Строка"));

	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

Функция ПодобраннаяМаркируемаяПродукция_МОТП()
	
	ПодобраннаяМаркируемаяПродукция = Новый ТаблицаЗначений();
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Номенклатура",               Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Характеристика",             Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Серия",                      Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Количество",                 Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобрано",        Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИндексКодаМаркировки",       Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("МРЦ",                        Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("GTIN",                       Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеНоменклатуры",  Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("СтатусУказанияСерий",        Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТипНоменклатуры",            Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НомерСтроки",                Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоИС",               Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставлена",   Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КодыGTIN",                   Новый ОписаниеТипов("СписокЗначений"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеGTIN",          Новый ОписаниеТипов("Строка"));
	
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставленаПоУПД", Новый ОписаниеТипов("Булево"));
	
	Возврат ПодобраннаяМаркируемаяПродукция;
	
КонецФункции

Процедура ЗаполнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ТаблицаМаркируемойПродукции, ДанныеДокумента)
	
	Для Каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
		СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника);
		
		Попытка
			Если ЗначениеЗаполнено(СтрокаИсточника.Характеристика) тогда
				СтрокаПодобраннойПродукции.ХарактеристикиИспользуются = Истина;	
			КонецЕсли;
		Исключение
		КонецПопытки;

		СтрокаПодобраннойПродукции.НоменклатураСопоставлена = Истина;
		
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");

		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ДанныеПроверяемогоДокумента, ДанныеДокумента, ВидПродукции, ПараметрыСканирования)
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	
	ТаблицаМаркируемойПродукции = ДанныеПроверяемогоДокумента.МаркированныеТовары.СкопироватьКолонки();
	
	ДополнитьТаблицуМаркируемойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ТаблицаМаркируемойПродукции);
	
	Модуь_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукцииМОТП(
		ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);
	
КонецПроцедуры

Процедура ДополнитьТаблицуМаркируемойПродукции(ДеревоУпаковок, ТаблицаМаркируемойПродукции)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ДобавитьСтроку = Ложь;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			ДобавитьСтроку = Истина;
			
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				ДобавитьСтроку = Истина;
			Иначе
				ДополнитьТаблицуМаркируемойПродукции(СтрокаДерева, ТаблицаМаркируемойПродукции);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			
			СтрокаТЧ = ТаблицаМаркируемойПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДерева);
			СтрокаТЧ.СтрокаДерева = СтрокаДерева;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ЗаполнитьДеревоМаркированнойПродукции_МОТП(ДеревоУпаковокДокумента, ДанныеДокумента)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева_МОТП(ДеревоУпаковокДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоУпаковокДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
			И ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для Каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаПачкиБезБлока = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
		ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента);
	КонецЕсли;
	
	Если ДанныеДокумента.СтрокаБлокиБезКоробки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
		ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Функция ДетализацияСтруктурыХраненияДерева_МОТП(ДеревоУпаковок)
	
	УпаковкиДерева = Новый Структура();
	УпаковкиДерева.Вставить("ЕстьПачки",           Ложь);
	УпаковкиДерева.Вставить("ЕстьБлоки",           Ложь);
	УпаковкиДерева.Вставить("ЕстьКоробки",         Ложь);
	УпаковкиДерева.Вставить("ЕстьПачкиБезБлока",   Ложь);
	УпаковкиДерева.Вставить("ЕстьБлокиБезКоробки", Ложь);
	
	РазрешеныПачкиВКоробках = Ложь;
	
	Если ДеревоУпаковок.Строки.Количество() > 0 Тогда
		ОпределитьНаличиеУпаковокВСтрокахДерева_МОТП(ДеревоУпаковок.Строки, УпаковкиДерева, РазрешеныПачкиВКоробках);
	КонецЕсли;
	
	Если УпаковкиДерева.ЕстьКоробки Тогда
		Если УпаковкиДерева.ЕстьБлоки И УпаковкиДерева.ЕстьПачки Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
		ИначеЕсли УпаковкиДерева.ЕстьБлоки Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками;
		Иначе
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная;
		КонецЕсли;
	ИначеЕсли УпаковкиДерева.ЕстьБлоки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками;
	ИначеЕсли УпаковкиДерева.ЕстьПачки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки;
	ИначеЕсли УпаковкиДерева.ЕстьБлокиБезКоробки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками;
	ИначеЕсли УпаковкиДерева.ЕстьПачкиБезБлока Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками;
	Иначе
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки;
	КонецЕсли;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента)
	
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПачкиБезБлока;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаИсточникаПачка Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
	
	ИначеЕсли СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБлокиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента);
			КонецЕсли;
			
		Иначе

			Для Каждого СтрокаИсточникаБлок Из СтрокаИсточника.Строки Цикл
				Если ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
					ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточникаБлок, КоллекцияСтрокПриемника, ДанныеДокумента);
				Иначе
					Для Каждого СтрокаИсточникаПачка Из СтрокаИсточникаБлок.Строки Цикл
						ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Возврат;

		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
			
		СтрокаПачкиБезБлока = ДанныеДокумента.СтрокаПачкиБезБлока;
		
		Если СтрокаПачкиБезБлока = Неопределено Тогда
			СтрокаПачкиБезБлока = ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПачкиБезБлока.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника)
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
			
		СтрокаБлокиБезКоробки = ДанныеДокумента.СтрокаБлокиБезКоробки;
		
		Если СтрокаБлокиБезКоробки = Неопределено Тогда
			СтрокаБлокиБезКоробки = ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБлокиБезКоробки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	ИначеЕсли СтрокаИсточника.Родитель <> Неопределено
		И Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника.Родитель)
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками Тогда
		
		Возврат;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
	КонецЕсли;
		
	Если Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(НоваяСтрока)
		И (ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками
		ИЛИ ДанныеДокумента.СодержимоеУпаковокНедоступно) Тогда
		НоваяСтрока.КоличествоПодчиненныхПачек     = СтрокаИсточника.КоличествоПачек;
		НоваяСтрока.НеПересчитыватьКоличествоПачек = Истина;
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	
	Если НоваяСтрока.НедопустимыйКодМаркировки Тогда
		ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки = ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки + 1;
	КонецЕсли;
	
	Если НоваяСтрока.СодержимоеНедоступно Тогда
		ДанныеДокумента.СодержимоеУпаковокНедоступно = Истина;
	КонецЕсли;
	
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;

	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента);
	КонецЦикла;

КонецПроцедуры

Функция ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуПачкиБезБлока(НоваяСтрока);
	
	ДанныеДокумента.СтрокаПачкиБезБлока = НоваяСтрока;
	
	Возврат НоваяСтрока;

КонецФункции

Функция ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента)
	
	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	ИначеЕсли СтрокиДерева[0].ТипУпаковки <> Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	Иначе
		НоваяСтрока = СтрокиДерева.Вставить(1);
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");

	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока);
	
	ДанныеДокумента.СтрокаБлокиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;

КонецФункции

Процедура ОпределитьНаличиеУпаковокВСтрокахДерева_МОТП(СтрокиДерева, УпаковкиДерева, РазрешеныПачкиВКоробках)
	
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если УпаковкиДерева.ЕстьПачки И НЕ РазрешеныПачкиВКоробках Тогда
			Прервать;
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока Тогда
				УпаковкиДерева.ЕстьПачкиБезБлока = Истина;
			Иначе
				УпаковкиДерева.ЕстьПачки = Истина;
				Если НЕ РазрешеныПачкиВКоробках Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаДерева) Тогда
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки Тогда
				УпаковкиДерева.ЕстьБлокиБезКоробки = Истина;
			Иначе
				УпаковкиДерева.ЕстьБлоки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ УпаковкиДерева.ЕстьКоробки Тогда			
			УпаковкиДерева.ЕстьКоробки = Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки);
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОпределитьНаличиеУпаковокВСтрокахДерева_МОТП(СтрокаДерева.Строки, УпаковкиДерева, РазрешеныПачкиВКоробках);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокШтрихкодыУпаковок_МОТП(СтрокаИсточника, ШтрихкодыУпаковок)
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		Если ЗначениеЗаполнено(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки)
			И ШтрихкодыУпаковок.НайтиПоЗначению(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки) = Неопределено Тогда
			ШтрихкодыУпаковок.Добавить(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки, ПодчиненнаяСтрокаИсточника.Штрихкод);
		КонецЕсли;
		Если СтрокаИсточника.Строки.Количество() > 0 Тогда
			ЗаполнитьСписокШтрихкодыУпаковок_МОТП(ПодчиненнаяСтрокаИсточника, ШтрихкодыУпаковок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСКодамиSSCC

Функция ПолучитьСледующийНомерSSCC(ЦифраРасширения, ПрефиксКомпанииGS1)
	
	СерийныйНомерSSCC = ПолучитьПосленийНомерSSCC(ЦифраРасширения, ПрефиксКомпанииGS1) + 1;	
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("ЦифраРасширения",    ЦифраРасширения);
	ПараметрыШтрихкода.Вставить("ПрефиксКомпанииGS1", ПрефиксКомпанииGS1);
	ПараметрыШтрихкода.Вставить("СерийныйНомерSSCC",  СерийныйНомерSSCC);
	
	Возврат ШтрихкодSSCC(ПараметрыШтрихкода);	
	
КонецФункции // ()

Функция ПолучитьПосленийНомерSSCC(ЦифраРасширения, ПрефиксКомпанииGS1)
	
	ЧастьШтрихкодаБезСкобок  = "00" + ЦифраРасширения + ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9);
	ЧастьШтрихкодаСоСкобками = "(00)" + ЦифраРасширения + ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкодаСоСкобками + "%");
	Запрос.УстановитьПараметр("ТипШтрихкода", Перечисления.ТипыШтрихкодов.SSCC);
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ВыражениеСерийныйНомерSSCC КАК СерийныйНомерSSCC
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЧастьШтрихкода
	|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
	|
	|УПОРЯДОЧИТЬ ПО
	|	СерийныйНомерSSCC УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеСерийныйНомерSSCC", "ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 15, 7)");
	
	Результат = Запрос.Выполнить();
	ПоследнийНомерВБД = 0;
	
	Если Результат.Пустой() Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеСерийныйНомерSSCC", "ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 13, 7)");
		Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкодаБезСкобок + "%");
		Результат = Запрос.Выполнить();
	КонецЕсли;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.СерийныйНомерSSCC);
	Иначе
		Возврат 0;
	КонецЕсли;
			
КонецФункции // ()

Функция ПриведенноеКДлинеЗначение(Знач ИсходнаяСтрока, Длина)
	Если ТипЗнч(ИсходнаяСтрока) = Тип("Число") Тогда
		Строка = Формат(ИсходнаяСтрока, "ЧН=0; ЧГ=0");
	Иначе
		Строка = СокрЛП(ИсходнаяСтрока);
	КонецЕсли;
	ТекущаяДлина = СтрДлина(Строка);
	Пока ТекущаяДлина < Длина Цикл
		Строка = "0" + Строка;
		ТекущаяДлина = ТекущаяДлина + 1;
	КонецЦикла;
	
	Возврат Строка;
КонецФункции

Функция ШтрихкодSSCC(ПараметрыШтрихкода, УстанавливатьСкобки = Истина)
	
	ЦифраРасширения    = ПараметрыШтрихкода.ЦифраРасширения;
	ПрефиксКомпанииGS1 = ПараметрыШтрихкода.ПрефиксКомпанииGS1;
	СерийныйНомерSSCC  = ПараметрыШтрихкода.СерийныйНомерSSCC;
	
	Если ЗначениеЗаполнено(ПрефиксКомпанииGS1)
	   И ЗначениеЗаполнено(СерийныйНомерSSCC) Тогда
		
		Штрихкод = Формат(ЦифраРасширения, "ЧН=0; ЧГ=0")
			+ ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9)
			+ ПриведенноеКДлинеЗначение(СерийныйНомерSSCC, 7);
		
		КонтрольноеЧисло = КонтрольноеЧислоSSCC(Штрихкод);
		
		Если УстанавливатьСкобки Тогда
			Штрихкод = "(00)" + Штрихкод + КонтрольноеЧисло;
		Иначе
			Штрихкод = "00" + Штрихкод + КонтрольноеЧисло;
		КонецЕсли;
	Иначе
		
		Штрихкод = "";
		
	КонецЕсли;
	
	Возврат Штрихкод;
КонецФункции

Функция КонтрольноеЧислоSSCC(Штрихкод)
	КонтрольноеЧисло = 0;
	
	Цифры = Новый Массив;
	Позиций  = СтрДлина(Штрихкод);
	Для НомерПозиции = 1 По Позиций Цикл
		Цифры.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(Штрихкод, НомерПозиции, 1)));
	КонецЦикла;
	
	СуммаЧетных = 0;
	СуммаНечетных = 0;
	Для НомерПозиции = 0 По Позиций-1 Цикл
		Если НомерПозиции%2=0 Тогда
			СуммаЧетных=СуммаЧетных+Цифры[НомерПозиции];
		Иначе
			СуммаНечетных=СуммаНечетных+Цифры[НомерПозиции];
		КонецЕсли;
	КонецЦикла;
	
	СверяемоеЧисло = СуммаЧетных * 3 + СуммаНечетных;
	КонтрольноеЧисло = 10 - СверяемоеЧисло%10;
	Если КонтрольноеЧисло = 10 Тогда
		КонтрольноеЧисло = 0;
	КонецЕсли;
	
	Возврат КонтрольноеЧисло;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура НастроитьСертификаты(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаСертификатовДляАвтоматическогоОбменаИС");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПостОбработку(ВидПостОбработки)
	
	Если ВидПостОбработки = "Обновить" Тогда
		
		ОбновитьЕслиКаталогиДоступны();
			
	КонецЕсли;
		                                          
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЕслиКаталогиДоступны()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_ОбновитьЕслиКаталогиДоступны", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_TempLates.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);
				
КонецПроцедуры	

&НаКлиенте
Процедура НачатьПроверкуСуществования_ОбновитьЕслиКаталогиДоступны(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблона_ОбновитьЕслиКаталогиДоступны", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_TempLates.tab");
		Исключение		
		КонецПопытки;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не найдены шаблоны. 
		|Для их создания воспользуйтесь обработкой выгрузки!";
		Сообщение.Сообщить();
	КонецЕсли;  
	
	лКаталогОбменаПриИзменении(Элементы.лКаталогОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияШаблона_ОбновитьЕслиКаталогиДоступны(ДопПараметр) Экспорт
	ЗагрузитьДанныеШаблоны(ДопПараметр.ФайлТЗ.ПолучитьТекст())	
КонецПроцедуры
 

&НаКлиенте
Процедура ПеревестиПараметрыНаСледующийТСД_КаталогиОбмена(Параметры);

	Параметры.ТекущийТСД=Параметры.ТекущийТСД+1;	
	ТекКаталог = лКаталогОбмена+Параметры.МассивТСД[Параметры.ТекущийТСД-1];
	
	ИмяКаталогаIN=ТекКаталог+"\in\";
	ИмяКаталогаOUT=ТекКаталог+"\out\";
	ИмяКаталогаLOG=ТекКаталог+"\log\";			
							
	Параметры.ТекущийКаталогПроверки="in";
	Параметры.ТекущийКаталогСоздания="in";

	Параметры.ТекКаталог=ТекКаталог;

	Параметры.ИмяКаталогаIN=ИмяКаталогаIN;
	Параметры.ИмяКаталогаOUT=ИмяКаталогаOUT;
	Параметры.ИмяКаталогаLOG=ИмяКаталогаLOG;
				
	Параметры.КаталогНаДискеINСуществует=Ложь;
	Параметры.КаталогНаДискеOUTСуществует=Ложь;
	Параметры.КаталогНаДискеLOGСуществует=Ложь;
							
КонецПроцедуры

#Область НаименованияКТСД

&НаКлиенте
Процедура ПрочитатьНастройкиТСД()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_ТСД", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_terminals.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_ТСД(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблонаТСД", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_terminals.tab", КодировкаТекста.UTF8);		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияШаблонаТСД(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеТСД(ДопПараметр.ФайлТЗ.ПолучитьТекст());
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеТСД(Данные)

	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		Для каждого СтрокаТЗ Из ДанныеТЗ Цикл
			ПараметрыОтбора = Новый Структура("ТСД", СтрокаТЗ.ТСД);
			
			НайденнаяСтрока = СписокТСД.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденнаяСтрока.Количество() > 0 Тогда
				НайденнаяСтрока[0].Наименование = СтрокаТЗ.Наименование;		
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокТСДПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

КаталогFTPДоступен = Ложь;