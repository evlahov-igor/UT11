//ОБЩИЕ

Функция ВнестиДокументВБазу(Об, СтрокаОшибок) Экспорт
	
	//ОБЩИЕ ПАРАМЕТРЫ 
	
	Шаблон = Об.Шаблон;
	
	// Zolla ++
	Если Шаблон.ДМ_ОтгрузкаИзМагазина Тогда
		Об.ДатаЗавершения = ТекущаяДата();
		
		//ЗАПИСЬ ДОКУМЕНТА ТСД И ВОЗВРАТ ССЫЛКИ НА ОБРАБОТАННЫЙ ДОКУМЕНТ		
		Об.Записать();
		
		//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
		ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(Об, Истина);
				
		Возврат "";
	// Zolla ++
	
	Иначе // наш типовой механизм
		
		Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
		ПараметрыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, ПолучитьСтруктуруРеквизитовШаблона());
		
		ВидДокумента 								= ПараметрыШаблона.ВидДокумента;
		ВидДокументаНового 							= ПараметрыШаблона.ВидДокументаНового;
		ИзменятьТипОбеспечения 						= ПараметрыШаблона.ИзменятьТипОбеспечения;
		ИспользоватьМаркировку 						= ПараметрыШаблона.ИспользоватьМаркировку;
		СоздаватьДокументИСМП   					= ПараметрыШаблона.СоздаватьДокументИСМП;
		МаркировкаПроверкаБезСертификатаИС 			= ПараметрыШаблона.МаркировкаПроверкаБезСертификатаИС;
		ИспользованиеУпаковочныхЛистовПодбор 		= ПараметрыШаблона.ИспользованиеУпаковочныхЛистовПодбор;
		
		ПроводитьРоботом							= ПараметрыШаблона.ПроводитьРоботом;
		ТабличнуюЧастьПриЗагрузкеПодбор         	= ПараметрыШаблона.ТабличнуюЧастьПриЗагрузкеПодбор;
		ГрупповойДокумент                       	= ПараметрыШаблона.РаспределениеТоваров = 2;
		ГрупповаяРабота                         	= ПараметрыШаблона.ГрупповаяРабота;
		БыстроеСканирование                     	= ПараметрыШаблона.БыстроеСканирование;
		ПользовательДляАвтозаполнения     			= ПараметрыШаблона.ПользовательДляАвтозаполнения;
		
		ИмяТабличнойЧастиПодбор                 	= ПараметрыШаблона.ИмяТабличнойЧастиПодбор;
		ИмяТабличнойЧастиПриемка                	= ПараметрыШаблона.ИмяТабличнойЧастиПриемка;
		ИспользоватьПодбор                			= ПараметрыШаблона.ИспользоватьПодбор;
		ИспользоватьПриемку                         = ПараметрыШаблона.ИспользоватьПриемку;
		
		СоздаватьДокументыУпаковочныхЛистов     	= ИспользованиеУпаковочныхЛистовПодбор <> 0;
		МаркировкаСоздаватьСправочникКМЕслиНеНайден = ПараметрыШаблона.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
		МаркировкаПривязыватьGTINКакШтрихкод     	= ПараметрыШаблона.МаркировкаПривязыватьGTINКакШтрихкод;
		МаркировкаЗавершатьПодборКМВДокументе     	= ПараметрыШаблона.МаркировкаЗавершатьПодборКМВДокументе;
		
		МножествоДокументовКакЗадание           	= ПараметрыШаблона.РаспределениеТоваров = 1;
		Егаис                                   	= ПараметрыШаблона.Егаис;
		БыстраяПриемка                          	= ПараметрыШаблона.БыстраяПриемка;
		БыстраяОтгрузка                         	= ПараметрыШаблона.БыстраяОтгрузка;
		ПроверкаОтборРазмещение                 	= ПараметрыШаблона.ПроверкаОтборРазмещение;
		
		ТабличнуюЧастьПриЗагрузкеПриемка        	= ПараметрыШаблона.ТабличнуюЧастьПриЗагрузкеПриемка;
		ИмяТабличнойЧастиНовойПодбор                = ПараметрыШаблона.ИмяТабличнойЧастиНовойПодбор;
		ИмяТабличнойЧастиНовойПриемка               = ПараметрыШаблона.ИмяТабличнойЧастиНовойПриемка;
		ЗагружатьКомментарий                        = ПараметрыШаблона.ЗагружатьКомментарий;
		БыстроеПеремещение                          = ПараметрыШаблона.БыстроеПеремещение;
		
		АвтоматическийКомментарийИспользовать       = ПараметрыШаблона.АвтоматическийКомментарийИспользовать;
		АвтоматическийКомментарий                   = ПараметрыШаблона.АвтоматическийКомментарий;
		ИспользованиеЯчеекПодбор                    = ПараметрыШаблона.ИспользованиеЯчеекПодбор;
		ИспользованиеСерийниковПодбор               = ПараметрыШаблона.ИспользованиеСерийниковПодбор;
		СерииВОтдельнойТЧ                           = ПараметрыШаблона.СерииВОтдельнойТЧ;
		ИспользоватьТиповыеУпаковочныеЛисты         = ПараметрыШаблона.ИспользоватьТиповыеУпаковочныеЛисты;
		БазовыеЕдиницыПриЗагрузке                   = ПараметрыШаблона.БазовыеЕдиницыПриЗагрузке;
		ИспользованиеЯчеекПриемка                   = ПараметрыШаблона.ИспользованиеЯчеекПриемка;
		ИспользованиеСерийниковПриемка              = ПараметрыШаблона.ИспользованиеСерийниковПриемка;
		
		ОткрыватьДокументыПослеЗагрузкиБезЗаписи 	= ПараметрыШаблона.ОткрыватьДокументыПослеЗагрузкиБезЗаписи;
		ОбрабатыватьРоботом 						= ПараметрыШаблона.ОбрабатыватьРоботом;
		ИспользоватьГрупповойДокумент				= ПараметрыШаблона.ИспользоватьГрупповойДокумент;
		ИспользоватьДопФормы                        = ПараметрыШаблона.ИспользоватьДопФормы;
		
		ПараметрыДокументаТСД = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Об.Ссылка, "ИсходныйДокумент, Организация"); 
		ИсходныйДокумент 	= ПараметрыДокументаТСД.ИсходныйДокумент;
		Организация 		= ПараметрыДокументаТСД.Организация; 
		
		НовыйДокументВВидеТабличнойЧасти = Справочники.ДатаМобайл_ШаблоныДокументов.НовыйДокументКакТабличнаяЧасть(Шаблон);
		
		ЕстьОшибки 				= Ложь;
		ЭтоНовыйДокумент 		= Ложь;
		ЭтоКонфигурацияБеларуси = Ложь;
		
		Если СтрНайти(Метаданные.Имя, "Беларус") > 0 Тогда
			ЭтоКонфигурацияБеларуси = Истина;	
		КонецЕсли;
		
		ПараметрыДокумента = СобратьПараметры();
		ПараметрыДокумента.Вставить("Об", Об);
		ПараметрыДокумента.Вставить("Организация", Организация);
		Если Не ЗначениеЗаполнено(ПользовательДляАвтозаполнения) Тогда
			ПараметрыДокумента.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Иначе	
			ПараметрыДокумента.Вставить("Пользователь", ПользовательДляАвтозаполнения);
		КонецЕсли;	
		ПараметрыДокумента.Вставить("ЭтоКонфигурацияБеларуси", ЭтоКонфигурацияБеларуси);
		
		Если ВидДокумента = "ЗаданиеНаПеревозку" Тогда	
			ВидДокумента = "ЗаказКлиента";
			ИмяТабличнойЧастиПодбор = "Товары";
			ИмяТабличнойЧастиПриемка = "Товары";	
		КонецЕсли;
		
		//РАБОТА С ГРУППОВЫМИ И ДОЧЕРНИМИ ДОКУМЕНТАМИ (РАСПРЕДЕЛЕНИЕ НА ТСД)
		Если ГрупповойДокумент И Не ЗначениеЗаполнено(Об.РодительскийДокумент) Тогда
			
			МассивДокументов = Новый Массив; 
			ВсеДокументыЗавершены = Истина;
			ГрПланРавноФакт = Истина;
			Для каждого СтрокаДочернийДокумент Из Об.СписокДокументов Цикл
				Если ЗначениеЗаполнено(СтрокаДочернийДокумент.ДокументТСД) Тогда
					Если СтрокаДочернийДокумент.ДокументТСД.ДатаПриемкиОператором <> Дата(1,1,1) Тогда
						Если СтрокаДочернийДокумент.ДокументТСД.ДатаЗавершения = Дата(1,1,1) Тогда
							ДочернийДокументОбъект = СтрокаДочернийДокумент.ДокументТСД.ПолучитьОбъект();
							СтатусЗагрузкиДочернегоДокумента = ВнестиДокументВБазу(ДочернийДокументОбъект,СтрокаОшибок);
							Если СтатусЗагрузкиДочернегоДокумента <> Неопределено И СтатусЗагрузкиДочернегоДокумента <> "" Тогда
								МассивДокументов.Добавить(СтатусЗагрузкиДочернегоДокумента);
							КонецЕсли;	
						КонецЕсли;
					Иначе
						ВсеДокументыЗаблокированы = Ложь;
					КонецЕсли;
					
					Если Не ПланРавноФакт(СтрокаДочернийДокумент.ДокументТСД, СтрокаДочернийДокумент.ИсходныйДокумент) Тогда
						ГрПланРавноФакт = Ложь;	
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			Если ВсеДокументыЗавершены Тогда
				Об.ПланРавноФакт = ГрПланРавноФакт;
				Об.ДатаЗавершения = ТекущаяДата();
				Об.Записать();
			КонецЕсли;	
			Возврат МассивДокументов;
		КонецЕсли;	
		
		//ГРУППОВОЙ ДОКУМЕНТ (ПЕРЕНОС ДАННЫХ ИЗ РЕГИСТРА В СПРАВОЧНИК ДОКУМЕНТЫ ТСД)
		Если ГрупповаяРабота Или БыстроеСканирование Тогда
			Если Не ПеренестиДанныеПоДокументуВСправочник(Об, СтрокаОшибок) Тогда
				Возврат Неопределено; 
			КонецЕсли;	
		КонецЕсли;
		
		//ПОДСЧЕТ ПЛАН ФАКТ И ВРЕМЕНИ
		Попытка 
			Об.ВремяСборки = (Об.ДатаЗавершенияСбора - Об.ДатаНачалаСбора) / 60; //в минутах
			Об.ПланРавноФакт = ПланРавноФакт(Об, Об.ИсходныйДокумент, МножествоДокументовКакЗадание);  //истина/ложь
			
			Если МножествоДокументовКакЗадание И Об.ПланРавноФакт = Ложь Тогда
				Возврат Неопределено;			
			КонецЕсли;
			
			Об.Записать();
		Исключение 
		КонецПопытки;
		
		//ЗАПОЛНЕНИЕ ПОЛЬЗОВАТЕЛЕЙ ТСД
		Попытка ПеренестиДополнительныеДанныеПоДокументуВСправочник(Об, СтрокаОшибок); Исключение КонецПопытки;	
		
		//РАБОТА С ГРУППОВЫМИ И ДОЧЕРНИМИ ДОКУМЕНТАМИ (РАСПРЕДЕЛЕНИЕ В 1С)
		Если МножествоДокументовКакЗадание Тогда
			МассивДокументв = Об.Задания.ВыгрузитьКолонку("Задание");
			Если МассивДокументв.Количество() > 0 Тогда
				Возврат ВнестиВбазуНесколькоДокументов(МассивДокументв, Об, ПараметрыШаблона);
			КонецЕсли;
		КонецЕсли;	
		
		//ПРЕДВАРИТЕЛЬНАЯ ОБРАБОТКА ПО ВИДАМ ДОКУМЕНТОВ (НАПРИМЕР ЕСЛИ ДАЛЬНЕЙШАЯ ЗАГРУЗКА Не ТРЕБУЕТСЯ)
		ДанныеДляВозврата = "";
		ВыполнитьПредварительнуюОбработкуДокументаТСД(ПараметрыДокумента, ЕстьОшибки, СтрокаОшибок, ДанныеДляВозврата);
		Если ЕстьОшибки Тогда
			Возврат ДанныеДляВозврата;	
		КонецЕсли;	
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//ЗАПОЛНЕНИЕ ДОКУМЕНТОВ ПО ТИПАМ (МАРКРОВКА-отдельный модуль,ЕГАИС-отдельные функции в текущем модуле,ОБЫЧНЫЕ-в текущей функции)
		
		//1.МАРКИРОВКА
		Если ИспользоватьМаркировку Тогда
			
			//МДЛП
			Если ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() И ДатаМобайл_МДЛП.ТребуетсяСпецОбработка(Об) Тогда
				Если СокрЛП(ВидДокументаНового) = "" Тогда
					ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
				Иначе
					ПолучитьСоздатьНовыйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
				КонецЕсли;
				
				Возврат ДатаМобайл_МДЛП.ПолучитьДокументМаркировки(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент, СтрокаОшибок);
			КонецЕсли;
			
			Если Не МаркировкаПроверкаБезСертификатаИС И ТребуетсяОбновлениеКлючаСессииПоДокументу(ИсходныйДокумент, Шаблон, Организация, СтрокаОшибок) Тогда
				Возврат Неопределено;	
			КонецЕсли; 
			
			Если ДатаМобайл_Маркировка.ТребуетсяСпецОбработка(Об) Тогда
				
				Если СокрЛП(ВидДокументаНового) = "" Тогда
					
					ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент); 
					
					СсылкаНаДокумент = ДатаМобайл_Маркировка.ПолучитьДокументМаркировки(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент, СтрокаОшибок);
					
				Иначе
					
					Если СокрЛП(ВидДокумента) = "ПриобретениеТоваровУслуг" И СокрЛП(ВидДокументаНового) = "ПриходныйОрдерНаТовары" Тогда  //Приходный ордер по приобретению, в приобретении только коды маркировки
						
						ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
						ДатаМобайл_Маркировка.ПолучитьДокументМаркировки(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент, СтрокаОшибок);
						
					ИначеЕсли ВидДокумента = "ПриобретениеТоваровУслуг" И ВидДокументаНового = "АктОРасхожденияхПослеПриемки" Тогда
						
						ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
						
					Иначе					
						
						Если ВидДокумента = "РеализацияТоваровУслуг" И ВидДокументаНового = "ВыводИзОборотаИСМП" Тогда
							Возврат СоздатьДокументыРеализацияТоваровУслугВыводИзОборотаИСМП(ИсходныйДокумент, Об, СтрокаОшибок);
						КонецЕсли; 
						
						ПолучитьСоздатьНовыйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
						
						СсылкаНаДокумент = ДатаМобайл_Маркировка.ПолучитьДокументМаркировки(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент, СтрокаОшибок);
						
						//Обработка реализации, созданной на основании заказа, с параметрами маркировки и СоздаватьДокументИСМП((
						Если ВидДокументаНового = "РеализацияТоваровУслуг" И ВидДокумента = "ЗаказКлиента" И СоздаватьДокументИСМП И ИспользоватьМаркировку Тогда
							ОбработкаРеализацииСозданнойНаОснованииЗаказа(Об, ПараметрыДокумента.Док, СтрокаОшибок);
						КонецЕсли;
						//Обработка реализации, созданной на основании заказа, с параметрами маркировки и СоздаватьДокументИСМП))
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				//РАБОТА С УПАКОВОЧНЫМИ ЛИСТАМИ
				Если СоздаватьДокументыУпаковочныхЛистов Тогда 
					
					Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
						
						Попытка ДатаМобайл_Маркировка.ЗаполнитьУпаковочныеЛисты_Маркировка(Об); Исключение КонецПопытки;
						обРасходныйОрдер = СсылкаНаДокумент.ПолучитьОбъект();
						ПерезаполнениеТабЧастиРООтгружаемыеТоварыУпакЛистами(обРасходныйОрдер, Об, Шаблон); 
						//обРасходныйОрдер.РежимПросмотраПоТоварам = 1;
						Попытка обРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение); Исключение  обРасходныйОрдер.Записать(РежимЗаписиДокумента.Запись); КонецПопытки;
						
					КонецЕсли;	
					
				КонецЕсли;	
				
				Возврат СсылкаНаДокумент;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		//2.ЕГАИС
		Если Егаис Тогда	
			Если СокрЛП(ВидДокументаНового) = "" Тогда
				ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
			Иначе
				ПолучитьСоздатьНовыйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
			КонецЕсли;	
			
			Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
				Возврат АСТ_ПолучитьДокументЕГАИС(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент);
			ИначеЕсли ДатаМобайл_ОбщийМодуль.ЕстьКТ2000() Тогда
				Возврат КТ2000_ПолучитьДокументЕГАИС(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент);
			Иначе
				Возврат ПолучитьДокументЕГАИС(ПараметрыДокумента.Док, Об, ЭтоНовыйДокумент);
			КонецЕсли;	
		КонецЕсли;	
		
		//3.ОБЫЧНЫЕ ДОКУМЕНТЫ
		ЭтоБыстроеПеремещение = Ложь;	
		ОпределитьЭтоБыстроеПеремещение(Шаблон, ЭтоБыстроеПеремещение);
		ИсходныеДанныеПодбор = Неопределено;
		ИсходныеДанныеПриемка = Неопределено; 
		НазначениеЗаполненоВТЧПодбор = Ложь;
		НазначениеЗаполненоВТЧПриемка = Ложь;
		СтатусОтбораРазмещенияТоваровПослеЗагрузки = Неопределено;
		ОшибокЗаполненияНеОбнаружено = Истина;
		
		Если ЗначениеЗаполнено(Об.НовыйДокумент) И ТипЗнч(Об.НовыйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ТЧ_ТоварыПоРаспоряжениям_ИсходныеДанные = Об.НовыйДокумент.ТоварыПоРаспоряжениям.Выгрузить();	
		ИначеЕсли Не ЗначениеЗаполнено(Об.НовыйДокумент) И ТипЗнч(Об.ИсходныйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ТЧ_ТоварыПоРаспоряжениям_ИсходныеДанные = Об.ИсходныйДокумент.ТоварыПоРаспоряжениям.Выгрузить();	
		КонецЕсли;	
		
		//РАБОТА С ИСХОДНЫМ ДОКУМЕНТОМ (СОЗДАНИЕ,ЗАПОЛНЕНИЕ ШАПКИ,ПРЕДВАРИТЕЛЬНОЕ ДЕЙСТВИЕ С ТЧ)
		Если СокрЛП(ВидДокументаНового) = "" Или БыстраяПриемка Или БыстраяОтгрузка Тогда
			
			ЭтоОтборРазмещениеТоваров = Ложь; 
			Попытка
				Док = Об.ИсходныйДокумент.ПолучитьОбъект();
				Если Док.Метаданные().Имя = "ОтборРазмещениеТоваров" И ПроверкаОтборРазмещение Тогда
					СтатусПослеЗагрузки = ПолучитьСтатусОтбораРазмещенияТоваровПослеЗагрузки(Об, Док);
					ЭтоОтборРазмещениеТоваров = Истина;
				КонецЕсли;
			Исключение
				СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
			КонецПопытки;
			
			ПараметрыДокумента.Вставить("ИмяТЧПодбор", ИмяТабличнойЧастиПодбор);
			ПараметрыДокумента.Вставить("ИмяТЧПриемка", ИмяТабличнойЧастиПриемка);
			ПараметрыДокумента.Вставить("ИсходныйДокумент", Об.ИсходныйДокумент);
			
			ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
			Док = ПараметрыДокумента.Док;
			МетаданныеДока = Док.Метаданные();
			ИмяДока = МетаданныеДока.Имя;
			
			Если ИмяДока = "РасходныйОрдерНаТовары" И ИмяТабличнойЧастиПодбор = "ТоварыПоРаспоряжениям" Тогда
				ПараметрыДокумента.Вставить("ИмяТЧПодбор","ОтгружаемыеТовары");
			КонецЕсли;
			
			Попытка
				Если ИспользоватьПодбор Тогда
					
					Попытка
						НазначениеЗаполненоВТЧПодбор = ПолучитьНазначениеЗаполненоВТЧ(Док[ПараметрыДокумента.ИмяТЧПодбор]);
					Исключение
						НазначениеЗаполненоВТЧПодбор = Ложь;
					КонецПопытки;
					
					Если НазначениеЗаполненоВТЧПодбор Тогда
						ИсходныеДанныеПодбор = Док[ПараметрыДокумента.ИмяТЧПодбор].Выгрузить();	
					КонецЕсли;
					
					Если ТабличнуюЧастьПриЗагрузкеПодбор = 1 Тогда   //дополнять
					ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор = 2 И (Не ПроверкаОтборРазмещение Или Не ЭтоОтборРазмещениеТоваров Или СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок) Тогда //заменять	
						ИсходныеДанныеПодбор = Док[ПараметрыДокумента.ИмяТЧПодбор].Выгрузить();
						ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПодбор]);
						Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки; 
					ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда  // изменять
						Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки; 
						Для каждого стр Из Док[ПараметрыДокумента.ИмяТЧПодбор] Цикл
							Если ИмяДока = "ПересчетТоваров" Тогда
								Попытка стр.КоличествоФакт = 0; Исключение КонецПопытки;
								Попытка стр.КоличествоУпаковокФакт = 0; Исключение КонецПопытки;
							Иначе
								Если ИмяДока = "ОтборРазмещениеТоваров" Тогда
									Попытка стр.КоличествоУпаковокОтобрано = 0; Исключение КонецПопытки;
									Попытка стр.КоличествоОтобрано = 0; Исключение КонецПопытки;
								КонецЕсли;	
								Если Не ПроверкаОтборРазмещение Или СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок Тогда
									Попытка стр.Количество = 0; Исключение КонецПопытки;
									Попытка стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
									Попытка стр.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка(); Исключение КонецПопытки;
								КонецЕсли;
							КонецЕсли;
							Попытка стр.КоличествоШт = 0; Исключение КонецПопытки;
						КонецЦикла;
					ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор = 4 Тогда  //долько серии
						Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки; 
					КонецЕсли;	
				КонецЕсли;	
				
				Если ИспользоватьПриемку Тогда				
					Попытка
						НазначениеЗаполненоВТЧПриемка = ПолучитьНазначениеЗаполненоВТЧ(Док[ПараметрыДокумента.ИмяТЧПриемка]);
					Исключение
						НазначениеЗаполненоВТЧПриемка = Ложь;
					КонецПопытки;
					
					Если НазначениеЗаполненоВТЧПриемка Тогда
						ИсходныеДанныеПриемка = Док[ПараметрыДокумента.ИмяТЧПриемка].Выгрузить();	
					КонецЕсли;
					
					Если ТабличнуюЧастьПриЗагрузкеПриемка = 1 Тогда  //дополнять
					ИначеЕсли ТабличнуюЧастьПриЗагрузкеПриемка = 2 И (Не ПроверкаОтборРазмещение Или СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок) И Не ИмяДока = "СборкаТоваров" Тогда //заменять
						ИсходныеДанныеПриемка = Док[ПараметрыДокумента.ИмяТЧПриемка].Выгрузить();
						ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПриемка]);
					ИначеЕсли ТабличнуюЧастьПриЗагрузкеПриемка = 3 Тогда // изменять	
						Для каждого стр Из Док[ПараметрыДокумента.ИмяТЧПриемка] Цикл
							Если ИмяДока = "ОтборРазмещениеТоваров" Тогда
								Попытка стр.КоличествоУпаковокРазмещено = 0; Исключение КонецПопытки;
								Попытка стр.КоличествоРазмещено = 0; Исключение КонецПопытки;
							КонецЕсли;	
							
							Если Не ПроверкаОтборРазмещение Или СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок Тогда
								Попытка стр.Количество = 0; Исключение КонецПопытки;
								Попытка стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
								Попытка стр.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка(); Исключение КонецПопытки;
							КонецЕсли;	
							Попытка стр.КоличествоШт = 0; Исключение КонецПопытки;
						КонецЦикла;
					КонецЕсли;	
				КонецЕсли;	
			Исключение
				СтрокаОшибок = "Ошибка начального заполнения документа: " + ОписаниеОшибки();
				Возврат Неопределено;
			КонецПопытки;
			
			//РАБОТА С НОВЫМ ДОКУМЕНТОМ (СОЗДАНИЕ,ЗАПОЛНЕНИЕ ШАПКИ,ПРЕДВАРИТЕЛЬНОЕ ДЕЙСТВИЕ С ТЧ)	
		Иначе
			
			ЭтоОтборРазмещениеТоваров = Ложь; 
			Попытка
				Док = Об.НовыйДокумент.ПолучитьОбъект();
				Если Док.Метаданные().Имя = "ОтборРазмещениеТоваров" И ПроверкаОтборРазмещение Тогда
					СтатусПослеЗагрузки = ПолучитьСтатусОтбораРазмещенияТоваровПослеЗагрузки(Об, Док);
					ЭтоОтборРазмещениеТоваров = Истина;
				КонецЕсли;
			Исключение
				СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
			КонецПопытки;
			
			Попытка
				Если СокрЛП(ВидДокумента) = "ОтборРазмещениеТоваров" И ПроверкаОтборРазмещение Тогда
					ДокИсходный = Об.ИсходныйДокумент.ПолучитьОбъект();
					СтатусОтбораРазмещенияТоваровПослеЗагрузки = ПолучитьСтатусОтбораРазмещенияТоваровПослеЗагрузки(Об, ДокИсходный);
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			ПараметрыДокумента.Вставить("ИмяТЧПодбор", ИмяТабличнойЧастиНовойПодбор);
			ПараметрыДокумента.Вставить("ИмяТЧПриемка", ИмяТабличнойЧастиНовойПриемка);
			ПараметрыДокумента.Вставить("ИсходныйДокумент", Об.ИсходныйДокумент);
			
			ПолучитьСоздатьНовыйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент);
			Док = ПараметрыДокумента.Док;
			МетаданныеДока = Док.Метаданные();
			ИмяДока = МетаданныеДока.Имя;  
			
			//проверка на факт заполнения ТЧ в процедуре "ПолучитьСоздатьНовыйДокументОбъект":
			Шаблон_ИспользоватьПодбор = Шаблон.ИспользоватьПодбор;
			Шаблон_ИспользоватьПриемку = Шаблон.ИспользоватьПриемку;
			
			Если Шаблон_ИспользоватьПодбор Тогда
				ТЧ_Подбора_Заполнена = Док[ИмяТабличнойЧастиНовойПодбор].Количество();
			КонецЕсли;
			
			Если Шаблон_ИспользоватьПриемку Тогда
				ТЧ_Приемка_Заполнена = Док[ИмяТабличнойЧастиНовойПриемка].Количество();
			КонецЕсли;
			
			Если (Шаблон_ИспользоватьПодбор И Не ТЧ_Подбора_Заполнена)
				Или (Шаблон_ИспользоватьПриемку И Не ТЧ_Приемка_Заполнена) Тогда
				
				Попытка		
					ВыполнитьПроверкуПоТипуДокумента(ПараметрыДокумента);
					ЗаполнитьНаОсновании(ПараметрыДокумента);	
				Исключение
					Если ИмяДока <> "ПриходныйОрдерНаТовары" И ИмяДока <> "РасходныйОрдерНаТовары" Тогда
						Попытка Док.Заполнить(Об.ИсходныйДокумент); Исключение КонецПопытки;
					КонецЕсли;	
				КонецПопытки; 
				
			КонецЕсли;	
			
			Если ЭтоНовыйДокумент Тогда
				Док.Дата = ТекущаяДата();
			КонецЕсли;
			
			Если ИспользоватьПодбор Тогда			
				Попытка
					НазначениеЗаполненоВТЧПодбор = ПолучитьНазначениеЗаполненоВТЧ(Об.ИсходныйДокумент[ИмяТабличнойЧастиПодбор]);
				Исключение
					НазначениеЗаполненоВТЧПодбор = Ложь;
				КонецПопытки;
				
				Если НазначениеЗаполненоВТЧПодбор Тогда
					ИсходныеДанныеПодбор = Об.ИсходныйДокумент[ИмяТабличнойЧастиПодбор].Выгрузить();	
				КонецЕсли;
				
				Если ТабличнуюЧастьПриЗагрузкеПодбор = 2 Тогда
					ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПодбор]);	
				ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор = 1 Тогда
				ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда	
					Для каждого стр Из Док[ПараметрыДокумента.ИмяТЧПодбор] Цикл
						Попытка стр.Количество = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоУпаковокОтобрано = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоОтобрано = 0; Исключение КонецПопытки;
						Попытка стр.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка(); Исключение КонецПопытки;
						Попытка стр.КоличествоШт = 0; Исключение КонецПопытки;
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			Если ИспользоватьПриемку Тогда			
				Попытка
					НазначениеЗаполненоВТЧПриемка = ПолучитьНазначениеЗаполненоВТЧ(Об.ИсходныйДокумент[ИмяТабличнойЧастиПриемка]);
				Исключение
					НазначениеЗаполненоВТЧПриемка = Ложь;
				КонецПопытки;
				
				Если НазначениеЗаполненоВТЧПриемка Тогда
					ИсходныеДанныеПриемка = Об.ИсходныйДокумент[ИмяТабличнойЧастиПриемка].Выгрузить();	
				КонецЕсли;
				
				Если ТабличнуюЧастьПриЗагрузкеПриемка = 2 Тогда
					ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПриемка]);	
				ИначеЕсли ТабличнуюЧастьПриЗагрузкеПриемка = 1 Тогда
				ИначеЕсли ТабличнуюЧастьПриЗагрузкеПриемка = 3 Тогда	
					Для каждого стр Из Док[ПараметрыДокумента.ИмяТЧПриемка] Цикл
						Попытка стр.Количество = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоУпаковокОтобрано = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоОтобрано = 0; Исключение КонецПопытки;
						Попытка стр.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка(); Исключение КонецПопытки;
						Попытка стр.КоличествоШт = 0; Исключение КонецПопытки;
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		ПараметрыДокумента.Вставить("СтатусОтбораРазмещенияТоваровПослеЗагрузки", СтатусОтбораРазмещенияТоваровПослеЗагрузки);
		
		ЗаполнитьШапку(ПараметрыДокумента, ЭтоНовыйДокумент);
		
		//РАБОТА С УПАКОВОЧНЫМИ ЛИСТАМИ СОЗДАННЫМИ ПРИ ОБРАБОТКЕ ДРУГИХ ДОКУМЕНТОВ
		Если СоздаватьДокументыУпаковочныхЛистов Тогда
			Попытка ЗаполнитьУпаковочныеЛисты(Об); Исключение КонецПопытки;	
		КонецЕсли;	
		
		//РАБОТА С КОММЕНТАРИЕМ ДОКУМЕНТА
		Попытка
			КомментДока = Об.Комментарий;
			КомментДока = СокрЛП(СтрЗаменить(КомментДока, СокрЛП(Док.Комментарий), ""));
			
			КомментарийБезСимволаПереносаСтроки = СтрЗаменить(СокрЛП(Док.Комментарий), Символы.ПС, "-");
			ДлинаКомментария = СтрДлина(СокрЛП(КомментарийБезСимволаПереносаСтроки));
			
			КомментарииРавны = Ложь;
			
			Если КомментарийБезСимволаПереносаСтроки = КомментДока Тогда
				КомментарииРавны = Истина;	
			КонецЕсли; 
			
			СпередиВвели = Лев(КомментДока, ДлинаКомментария);
			СзадиВвели	 = Прав(КомментДока, ДлинаКомментария);
			
			Если Не АвтоматическийКомментарийИспользовать Тогда
				КомментДМ = "";
			Иначе
				КомментДМ = "" + СокрЛП(АвтоматическийКомментарий) + " (" + ТекущаяДата() + "). " + Символы.ПС;
			КонецЕсли; 
			
			Если ЗагружатьКомментарий = 1 Тогда // До комментария документа 
				Если КомментарийБезСимволаПереносаСтроки = СпередиВвели Тогда
					КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СпередиВвели, ""));
					Док.Комментарий = КомментДМ + КомментарийОператора + Символы.ПС + Док.Комментарий;
				ИначеЕсли КомментарийБезСимволаПереносаСтроки = СзадиВвели Тогда
					КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СзадиВвели, ""));
					Док.Комментарий = КомментДМ + КомментарийОператора + Символы.ПС + Док.Комментарий;	
				Иначе	
					Док.Комментарий = КомментДМ + Символы.ПС + ?(КомментарииРавны, "", КомментДока) + Символы.ПС + Док.Комментарий;
				КонецЕсли;			
			ИначеЕсли ЗагружатьКомментарий = 2 Тогда // После комментария документа
				Если КомментарийБезСимволаПереносаСтроки = СпередиВвели Тогда
					КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СпередиВвели, ""));
					Док.Комментарий = Док.Комментарий + КомментДМ + КомментарийОператора;
				ИначеЕсли КомментарийБезСимволаПереносаСтроки = СзадиВвели Тогда
					КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СзадиВвели, ""));
					Док.Комментарий = Док.Комментарий + КомментДМ + КомментарийОператора;	
				Иначе	
					Док.Комментарий = ?(КомментарииРавны, "", Док.Комментарий) + Символы.ПС + КомментДока  + Символы.ПС + КомментДМ;
				КонецЕсли;	
			КонецЕсли;
			
			//Автокомментарий
			Если АвтоматическийКомментарийИспользовать Тогда
				АвтоКомментарий = АвтоматическийКомментарий;
				Если Не ЗначениеЗаполнено(Док.Комментарий) И ЗначениеЗаполнено(АвтоКомментарий) Тогда
					Док.Комментарий = СокрЛП(АвтоКомментарий);	
				КонецЕсли;	
			КонецЕсли;			
		Исключение
		КонецПопытки;	
		
		//ОТБОР РАЗМЕЩЕНИЕ ДЛЯ ПРОВЕРКИ СТАТУСА
		Если ИмяДока = "ОтборРазмещениеТоваров" И СтатусПослеЗагрузки <> Неопределено Тогда
			Док.Статус = СтатусПослеЗагрузки;
		КонецЕсли;
		
		//ПЕРЕСЧЕТ ДЛЯ ЗАПОЛНЕНИЯ ДАННЫХ ПО УЧЕТУ
		Если ИмяДока = "ПересчетТоваров" Тогда
			
			ПараметрыДокумента.Вставить("ТабличнуюЧастьПриЗагрузкеПодбор", ТабличнуюЧастьПриЗагрузкеПодбор);
			УчетныеДанные = ЗаполнитьПересчетТоваров(ПараметрыДокумента, Док, Шаблон, Об.СобранныеДанныеПодбор.ВыгрузитьКолонку("Номенклатура"), Об.СобранныеДанныеПодбор.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"), Об.СобранныеДанныеПодбор.ВыгрузитьКолонку("ЯчейкаСсылка"));
			ПараметрыДокумента.Вставить("УчетныеДанные", УчетныеДанные);
			
		КонецЕсли;	
		
		//НОВЫЕ РЕКВИЗИТЫ АВТОЗАГРУЗКИ
		Попытка ЗаполнитьРеквизитыАвтозагрузки(Об, Шаблон, Док); Исключение КонецПопытки;
		
		//УСТАНОВКА РЕКВИЗИТОВ ШАПКИ ИЗ ДОПОЛНИТЕЛЬНЫХ ФОРМ
		Попытка ИзменитьРеквизитыШапкиИзДополнительныхФорм(Док, Шаблон, Об); Исключение КонецПопытки;
		
		//РАБОТА С ТАБЛИЧНОЙ ЧАСТЬЮ ПОДБОР
		Если ИспользоватьПодбор Тогда
			
			Если ВидДокумента = "ЗаказКлиента" И ВидДокументаНового = "РеализацияТоваровУслуг" Тогда
				Док.Менеджер = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныйДокумент, "Менеджер");
			КонецЕсли;
			
			Если ВидДокумента = "ПроизводствоБезЗаказа" И ВидДокументаНового = "ПриходныйОрдерНаТовары" Тогда
				Док.Ответственный = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныйДокумент, "Ответственный");
			КонецЕсли;
			
			ТаблицаДопФорм = Новый ТаблицаЗначений;
			ЕстьДополнительныеФормыДляПоискаСтрок = ЕстьДополнительныеФормыДляПоискаСтрок(Шаблон, 0, ТаблицаДопФорм) И ИспользоватьДопФормы;
			
			Если ЕстьДополнительныеФормыДляПоискаСтрок Тогда
				ТабТСД = ПолучитьТабТСДСУчетомДополнительныхФорм(Об.Ссылка, 0, ТаблицаДопФорм);
				НазначениеЗаполненоВТЧПодбор = Ложь;
			ИначеЕсли БазовыеЕдиницыПриЗагрузке И Не ИмяДока = "ДатаМобайл_УпаковочныйЛист" Тогда
				ТабТСД = ПолучитьТабТСДПриБазовыеЕдиницыПриЗагрузке(Об.Ссылка);	
			Иначе	
				ТабТСД = Об.СобранныеДанныеПодбор.Выгрузить();
				ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист,УпаковочныйЛистАтрибуты,НоваяЦена,ПризнакПовторнойВыгрузки","Количество,КоличествоМест");
				
				Если НазначениеЗаполненоВТЧПодбор Тогда
					ТабТСД = ДополнитьНазначениемТабТСД(ТабТСД, ИсходныеДанныеПодбор);
				КонецЕсли;
			КонецЕсли;
			
			Для каждого СтрТЧ Из Об.СобранныеДанныеПодбор Цикл
				Если СтрТЧ.Количество > 0 Тогда
					Попытка УстановитьАвтора(Док, СтрТЧ.Пользователь, ЭтоНовыйДокумент, Шаблон); Исключение КонецПопытки;
					Попытка УстановитьСкладПоЯчейке(Док, СтрТЧ.ЯчейкаСсылка); Исключение КонецПопытки;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
			Если ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
				
				Если ЭтоОтборРазмещениеТоваров И ПроверкаОтборРазмещение Тогда
					Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
						
						Для каждого СтрокаОчисткиПодбор Из Док[ПараметрыДокумента.ИмяТЧПодбор] Цикл
							СтрокаОчисткиПодбор.КоличествоУпаковокОтобрано = 0;
							СтрокаОчисткиПодбор.КоличествоОтобрано = 0;
						КонецЦикла;
					КонецЕсли;	
				КонецЕсли;	
				
				Для каждого СтрТЧ Из ТабТСД Цикл
					
					Если СтрТЧ.ПризнакПовторнойВыгрузки и СокрЛП(ВидДокументаНового)<> "" тогда
						Продолжить;
					КонецЕсли;	
					
					Если СтрТЧ.Количество = 0 И Не ИмяДока = "ПересчетТоваров" Тогда
						Продолжить;
					КонецЕсли;	
					
					Если СтрТЧ.Номенклатура.Пустая() Тогда
						СтрокаОшибок = "Не выбрана номенклатура!!!";
						Возврат Неопределено;
					КонецЕсли;
					
					Попытка 
						КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель / СтрТЧ.ЕдиницаИзмерения.Знаменатель;
						КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
					Исключение
						КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
					Конецпопытки;				
					
					лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
					
					лЕстьЯчейка = (ИспользованиеЯчеекПодбор > 0 И (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Ячейка") <> Неопределено));
					лЕстьСерия = (ИспользованиеСерийниковПодбор > 0 И (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Серия") <> Неопределено) И Не СерииВОтдельнойТЧ);
					лЕстьУпаковка = (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка") <> Неопределено);
					лЕстьНазначение = МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Назначение") <> Неопределено;
					лЕстьУпаковочныйЛистРодитель = (ИспользоватьТиповыеУпаковочныеЛисты И (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("УпаковочныйЛистРодитель") <> Неопределено));
					лЕстьКоличество = МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Количество") <> Неопределено;
					
					Если лЕстьЯчейка Тогда
						лСтруктураПоиска.Вставить("Ячейка", СтрТЧ.ЯчейкаСсылка);
					КонецЕсли;
					
					Если лЕстьСерия Тогда
						лСтруктураПоиска.Вставить("Серия", СтрТЧ.СерияСсылка);
					КонецЕсли;
					
					Если лЕстьУпаковка Тогда 
						ТекущаяУпаковка = СтрТЧ.ЕдиницаИзмерения;
						Если ИмяДока = "ПересчетТоваров" Тогда
							Если Док.Склад.ИспользоватьАдресноеХранение Или Док.Помещение.ИспользоватьАдресноеХранение Тогда
								лСтруктураПоиска.Вставить("Упаковка", ТекущаяУпаковка);
							КонецЕсли;	
						Иначе												
							//Проверка на заполненность упаковок
							Если СтрТЧ.Номенклатура.ИспользоватьУпаковки И Не СтрТЧ.Номенклатура.ВесИспользовать И Не ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения) Тогда	
								ТекущаяУпаковка = ПолучитьБазовуюУпаковкуНоменклатуры(СтрТЧ.Номенклатура);	
								Если Не ЗначениеЗаполнено(ТекущаяУпаковка) И ИмяДока = "ОтборРазмещениеТоваров" тогда
									СтрокаОшибок = "Не выбрана упаковка, для документа обязательно указание упаковок!!!";
									Возврат Неопределено; 
								КонецЕсли;	
							КонецЕсли;
							лСтруктураПоиска.Вставить("Упаковка", ТекущаяУпаковка);
						КонецЕсли;					
					КонецЕсли;	
					
					Если лЕстьУпаковочныйЛистРодитель Тогда
						НомерУпакЛиста = СтрЗаменить(СтрТЧ.УпаковочныйЛист, "/////", "");
						КоличествоМестВУпакЛисте = ПолучитьКоличествоМестВУпакЛисте(СтрТЧ.УпаковочныйЛистАтрибуты);
						
						Если ЗначениеЗаполнено(НомерУпакЛиста) Тогда
							
							Если Лев(НомерУпакЛиста, 3) = "UPL" Тогда 	
								
								НомерУпакЛиста = Прав(НомерУпакЛиста, СтрДлина(НомерУпакЛиста) - 3);
								ДокументУпакЛиста = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоНомеру(НомерУпакЛиста);
								
							Иначе
								ДокументУпакЛиста = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоРеквизиту("Код", НомерУпакЛиста);
							КонецЕсли;
							
							ДокументТиповогоУпакЛиста = ДокументУпакЛиста.ТиповойУпаковочныйЛист;
							
							Если Не ЗначениеЗаполнено(ДокументТиповогоУпакЛиста) Тогда
								ДокументТиповогоУпакЛиста = Документы.УпаковочныйЛист.НайтиПоРеквизиту("Код", НомерУпакЛиста);	
							КонецЕсли;	
							
						Иначе
							ДокументТиповогоУпакЛиста = Документы.УпаковочныйЛист.ПустаяСсылка();
						КонецЕсли;
						
						лСтруктураПоиска.Вставить("УпаковочныйЛистРодитель", ДокументТиповогоУпакЛиста);
					КонецЕсли;
					
					Если НазначениеЗаполненоВТЧПодбор Тогда
						Попытка лСтруктураПоиска.Вставить("Назначение", СтрТЧ.Назначение); Исключение КонецПопытки;
					КонецЕсли;
					
					Если ЕстьДополнительныеФормыДляПоискаСтрок Тогда
						ОбработатьСтруктуруПоискаСУчетомДополнительныхФорм(лСтруктураПоиска, ТаблицаДопФорм, СтрТЧ, ПараметрыШаблона, МетаданныеДока);				
					КонецЕсли;
					
					СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
					
					Если СтрокиПоиска.Количество() = 0 И БазовыеЕдиницыПриЗагрузке Тогда
						Если лСтруктураПоиска.Свойство("Упаковка") Тогда
							лСтруктураПоиска.Удалить("Упаковка");
							СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
						КонецЕсли;	
					КонецЕсли;
					
					Если СтрокиПоиска.Количество() = 0 Тогда
						Если ТабличнуюЧастьПриЗагрузкеПодбор = 4 Тогда
							Продолжить;
						КонецЕсли;
						
						Если ВидДокументаНового = "РасходныйОрдерНаТовары" Тогда
							СтрокаТабличнойЧасти = Док.ОтгружаемыеТовары.Добавить();
						Иначе
							СтрокаТабличнойЧасти = Док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
						КонецЕсли;					 
						
						СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
						СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
						
						Если лЕстьЯчейка Тогда
							СтрокаТабличнойЧасти.Ячейка = СтрТЧ.ЯчейкаСсылка;
						КонецЕсли;
						Если лЕстьСерия Тогда
							СтрокаТабличнойЧасти.Серия = СтрТЧ.СерияСсылка;			
						КонецЕсли;
						
						Если лЕстьУпаковка Тогда
							Если ИмяДока = "ПересчетТоваров" Тогда
								Если Док.Склад.ИспользоватьАдресноеХранение Или Док.Помещение.ИспользоватьАдресноеХранение Тогда
									СтрокаТабличнойЧасти.Упаковка = ТекущаяУпаковка;
								КонецЕсли;	
							Иначе
								СтрокаТабличнойЧасти.Упаковка = ТекущаяУпаковка;
							КонецЕсли;	
						КонецЕсли;
						
						Если ИмяДока = "ДатаМобайл_УпаковочныйЛист" Тогда
							СтрокаТабличнойЧасти.Штрихкод = СтрТЧ.ШтрихКод;	
						КонецЕсли;
						
						Если НазначениеЗаполненоВТЧПодбор Тогда
							Попытка СтрокаТабличнойЧасти.Назначение = СтрТЧ.Назначение; Исключение КонецПопытки;
						КонецЕсли;
						
						Если ЕстьДополнительныеФормыДляПоискаСтрок Тогда
							ОбработатьСтрокуСУчетомДополнительныхФорм(СтрокаТабличнойЧасти, ТаблицаДопФорм, СтрТЧ, ПараметрыШаблона, МетаданныеДока)
						КонецЕсли;
						
						Если лЕстьУпаковочныйЛистРодитель И ЗначениеЗаполнено(ДокументТиповогоУпакЛиста) Тогда
							СтрокаТабличнойЧасти.УпаковочныйЛистРодитель = ДокументТиповогоУпакЛиста;
							
							лСтруктураПоискаУпакЛистов = Новый Структура("УпаковочныйЛист", ДокументТиповогоУпакЛиста);
							СтрокиПоискаУпаковочныхЛистов = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоискаУпакЛистов);
							Если СтрокиПоискаУпаковочныхЛистов.Количество() = 0 И ЗначениеЗаполнено(ДокументТиповогоУпакЛиста) Тогда
								СтрокаТабличнойЧастиУпакЛиста = Док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
								СтрокаТабличнойЧастиУпакЛиста.УпаковочныйЛист = ДокументТиповогоУпакЛиста;
								СтрокаТабличнойЧастиУпакЛиста.ЭтоУпаковочныйЛист = Истина;
								
								Если КоличествоМестВУпакЛисте > 0 Тогда
									СтрокаТабличнойЧастиУпакЛиста.Количество = КоличествоМестВУпакЛисте;
									СтрокаТабличнойЧастиУпакЛиста.КоличествоУпаковок = КоличествоМестВУпакЛисте;	
								Иначе
									СтрокаТабличнойЧастиУпакЛиста.Количество =  1;
									СтрокаТабличнойЧастиУпакЛиста.КоличествоУпаковок = 1;
								КонецЕсли;
								
								ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента, Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧастиУпакЛиста, ИсходныеДанныеПодбор);
								ОбработатьСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧастиУпакЛиста, Шаблон, ПараметрыДокумента);
							КонецЕсли;	
						КонецЕсли;
						
						ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента, Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, ИсходныеДанныеПодбор);
						
						// перенос цены
						Если лЕстьСерия Тогда
							лСтруктураПоиска.Удалить("Серия");
							СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
							
							Если СтрокиПоиска.Количество() <> 0 Тогда
								Попытка СтрокаТабличнойЧасти.Цена = СтрокиПоиска[0].Цена; Исключение КонецПопытки;		
							КонецЕсли; 
						КонецЕсли;
						
					Иначе	
						СтрокаТабличнойЧасти = СтрокиПоиска[0];					
					КонецЕсли;
					
					//Новые цены
					Попытка
						НоваяЦена = СтрТЧ.НоваяЦена;
						Если ИмяДока = "УстановкаЦенНоменклатуры" Тогда
							Если Док.ВидыЦен.Количество() > 0 Тогда
								СтрокаТабличнойЧасти.ВидЦены = Док.ВидыЦен[0].ВидЦены;	
							Иначе	
								СтрокаТабличнойЧасти.ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию();
							КонецЕсли;
							СтрокаТабличнойЧасти.Цена = НоваяЦена;
							СтрокаТабличнойЧасти.ЦенаИзмененаВручную = Истина;
						ИначеЕсли НоваяЦена <> 0 Тогда
							Попытка СтрокаТабличнойЧасти.Цена = НоваяЦена; Исключение КонецПопытки; 	 
						КонецЕсли;
					Исключение
					Конецпопытки;
					
					Если лЕстьНазначение Тогда
						Попытка ЗаполнитьНазначениеВСтрокеТЧ(ПараметрыДокумента, лСтруктураПоиска, СтрокаТабличнойЧасти); Исключение КонецПопытки;
						
						Попытка
							Если КоэффициентУпаковки <> СтрокаТабличнойЧасти.Упаковка.Числитель / СтрокаТабличнойЧасти.Упаковка.Знаменатель Тогда
								КоэффициентУпаковкиПоСтрокеТЧ = СтрокаТабличнойЧасти.Упаковка.Числитель / СтрокаТабличнойЧасти.Упаковка.Знаменатель;
								КоэффициентУпаковкиПоСтрокеТЧ = ?(КоэффициентУпаковкиПоСтрокеТЧ = 0, 1, КоэффициентУпаковкиПоСтрокеТЧ);
								КоэффициентУпаковки = КоэффициентУпаковкиПоСтрокеТЧ;
							КонецЕсли;	
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					Если ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда	
						Если ИмяДока = "ПересчетТоваров" Тогда
							СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрТЧ.Количество;
							СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт * КоэффициентУпаковки;
						Иначе	
							СтрокаТабличнойЧасти.КоличествоУпаковок = СтрТЧ.Количество;
							СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ТабличнуюЧастьПриЗагрузкеПодбор = 4 И Не ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда
						
						Если ИмяДока = "ПересчетТоваров" Тогда
							Если Док.Склад.ИспользоватьАдресноеХранение Или Док.Помещение.ИспользоватьАдресноеХранение И Не БазовыеЕдиницыПриЗагрузке Тогда
								СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт + СтрТЧ.Количество;
								СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт * КоэффициентУпаковки;
							Иначе
								СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт + СтрТЧ.Количество * КоэффициентУпаковки;
								СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт;
							КонецЕсли;
						ИначеЕсли ЭтоОтборРазмещениеТоваров И ПроверкаОтборРазмещение Тогда
							Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
								Если БазовыеЕдиницыПриЗагрузке Тогда
									СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано = СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано + СтрТЧ.Количество * КоэффициентУпаковки;
									СтрокаТабличнойЧасти.КоличествоОтобрано = СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано;
								Иначе
									СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано = СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано + СтрТЧ.Количество;
									СтрокаТабличнойЧасти.КоличествоОтобрано = СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано * КоэффициентУпаковки;	
								КонецЕсли; 
							Иначе
								Если БазовыеЕдиницыПриЗагрузке Тогда
									СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество * КоэффициентУпаковки;  
									СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
									СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано = СтрокаТабличнойЧасти.КоличествоУпаковок;
									СтрокаТабличнойЧасти.КоличествоОтобрано = СтрокаТабличнойЧасти.КоличествоУпаковок;
								Иначе	
									СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;
									СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
									СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано = СтрокаТабличнойЧасти.КоличествоУпаковок;
									СтрокаТабличнойЧасти.КоличествоОтобрано = СтрокаТабличнойЧасти.Количество;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Если Не БазовыеЕдиницыПриЗагрузке Тогда
								Попытка
									СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;  
									СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
								Исключение
									Если лЕстьКоличество Тогда
										СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество;
									КонецЕсли;	
								КонецПопытки;
							Иначе
								Попытка
									СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество * КоэффициентУпаковки;  
									СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
								Исключение
									Если лЕстьКоличество Тогда
										СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
									КонецЕсли;	
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
						
						Попытка СтрокаТабличнойЧасти.КоличествоШт = СтрокаТабличнойЧасти.КоличествоШт + СтрТЧ.КоличествоМест; Исключение КонецПопытки;
						
					КонецЕсли;
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
						
						Если Не ТабличнуюЧастьПриЗагрузкеПодбор = 4 Тогда
							ОбработатьСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, Шаблон, ПараметрыДокумента);
						КонецЕсли;        
						
						Если ИмяДока = "ЗаказКлиента" И Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда
							Попытка СтрокаТабличнойЧасти.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить; Исключение КонецПопытки;
						КонецЕсли;
						
						//Серии в отдельной ТЧ
						Если МетаданныеДока.ТабличныеЧасти.Найти("Серии") <> Неопределено И Не СтрТЧ.СерияСсылка.Пустая() Тогда
							лСтруктураПоискаСерий = Новый Структура("Номенклатура,Характеристика,Серия", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрТЧ.СерияСсылка);
							СтрокиПоискаСерий = Док["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
							Если СтрокиПоискаСерий.Количество() = 0 Тогда
								СтрокаТабличнойЧастиСерии = Док["Серии"].Добавить();
								СтрокаТабличнойЧастиСерии.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
								СтрокаТабличнойЧастиСерии.Характеристика = СтрокаТабличнойЧасти.Характеристика;
								СтрокаТабличнойЧастиСерии.Серия = СтрТЧ.СерияСсылка;
								Попытка СтрокаТабличнойЧастиСерии.Склад = СтрокаТабличнойЧасти.Склад; Исключение КонецПопытки;
								Попытка СтрокаТабличнойЧастиСерии.Назначение = СтрокаТабличнойЧасти.Назначение; Исключение КонецПопытки;
							Иначе	
								СтрокаТабличнойЧастиСерии = СтрокиПоискаСерий[0];
							КонецЕсли;
							
							СтрокаТабличнойЧастиСерии.Количество = СтрокаТабличнойЧастиСерии.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
						КонецЕсли;	
						//Серии в отдельной ТЧ
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
				ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(Док, ПараметрыДокумента.ИмяТЧПодбор, "", Шаблон, Об.Ссылка, ПараметрыДокумента);	
			КонецЕсли; 
			
		КонецЕсли;
		
		//РАБОТА С ТАБЛИЧНОЙ ЧАСТЬЮ РАЗМЕЩЕНИЕ
		Если ИспользоватьПриемку Тогда
			
			ТаблицаДопФорм = Новый ТаблицаЗначений;
			ЕстьДополнительныеФормыДляПоискаСтрок = ЕстьДополнительныеФормыДляПоискаСтрок(Шаблон, 1, ТаблицаДопФорм) И ИспользоватьДопФормы;
			
			Если ЕстьДополнительныеФормыДляПоискаСтрок Тогда
				ТабТСД = ПолучитьТабТСДСУчетомДополнительныхФорм(Об.Ссылка, 1, ТаблицаДопФорм);
				НазначениеЗаполненоВТЧПриемка = Ложь;
			Иначе		
				ТабТСД = Об.СобранныеДанныеПриемка.Выгрузить();
				ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист,УпаковочныйЛистАтрибуты,НоваяЦена,ПризнакПовторнойВыгрузки","Количество,КоличествоМест");
				
				Если НазначениеЗаполненоВТЧПриемка Тогда
					ТабТСД = ДополнитьНазначениемТабТСД(ТабТСД, ИсходныеДанныеПриемка);
				КонецЕсли;
			КонецЕсли;
			
			Для каждого СтрТЧ Из Об.СобранныеДанныеПриемка Цикл
				Если СтрТЧ.Количество > 0 Тогда
					Попытка УстановитьАвтора(Док, СтрТЧ.Пользователь, ЭтоНовыйДокумент, Шаблон); Исключение КонецПопытки;
					Попытка УстановитьСкладПоЯчейке(Док, СтрТЧ.ЯчейкаСсылка); Исключение КонецПопытки;
					Прервать;
				КонецЕсли;
			КонецЦИкла;	
			
			Если ТабличнуюЧастьПриЗагрузкеПриемка <> 0 Тогда
				
				Если ЭтоОтборРазмещениеТоваров И ПроверкаОтборРазмещение Тогда
					Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
						
						Для каждого СтрокаОчисткиРазмещение Из Док[ПараметрыДокумента.ИмяТЧПриемка] Цикл
							СтрокаОчисткиРазмещение.КоличествоУпаковокРазмещено = 0;
							СтрокаОчисткиРазмещение.КоличествоРазмещено = 0;
						КонецЦикла;
					КонецЕсли;	
				КонецЕсли;	
				
				Для каждого СтрТЧ Из ТабТСД Цикл
					
					Если СтрТЧ.ПризнакПовторнойВыгрузки и СокрЛП(ВидДокументаНового)<> "" тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрТЧ.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					Если СтрТЧ.Номенклатура.Пустая() Тогда
						СтрокаОшибок = "Не выбрана номенклатура!!!";
						Возврат Неопределено;
					КонецЕсли;	
					
					лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
					
					Если ИмяДока = "ОтборРазмещениеТоваров" И Не ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения) И ВидДокументаНового = "ОтборРазмещениеТоваров" Тогда
						ПоискСтрокПоИсх = ИсходныйДокумент.Товары.НайтиСтроки(лСтруктураПоиска);
						
						Если ПоискСтрокПоИсх.Количество() > 0 Тогда
							СтрТЧ.ЕдиницаИзмерения = ПоискСтрокПоИсх[0].Упаковка;	
						КонецЕсли; 					
					КонецЕсли; 
					
					Попытка 
						КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель / СтрТЧ.ЕдиницаИзмерения.Знаменатель;
						КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
					Исключение
						КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
					Конецпопытки;				
					
					лЕстьЯчейка = (ИспользованиеЯчеекПриемка > 0 И (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Ячейка") <> Неопределено));
					лЕстьСерия = (ИспользованиеСерийниковПриемка > 0 И (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Серия") <> Неопределено) И Не СерииВОтдельнойТЧ);
					лЕстьУпаковка = (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Упаковка") <> Неопределено);
					лЕстьНазначение = МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Назначение") <> Неопределено;
					лЕстьКоличество = МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Количество") <> Неопределено;
					
					Если лЕстьЯчейка Тогда
						лСтруктураПоиска.Вставить("Ячейка", СтрТЧ.ЯчейкаСсылка);
					КонецЕсли;
					
					Если лЕстьСерия Тогда
						лСтруктураПоиска.Вставить("Серия", СтрТЧ.СерияСсылка);
					КонецЕсли;
					
					Если лЕстьУпаковка Тогда 
						ТекущаяУпаковка = СтрТЧ.ЕдиницаИзмерения;
						
						//Проверка на заполненность упаковок
						Если СтрТЧ.Номенклатура.ИспользоватьУпаковки И Не СтрТЧ.Номенклатура.ВесИспользовать И Не ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения) Тогда	
							ТекущаяУпаковка = ПолучитьБазовуюУпаковкуНоменклатуры(СтрТЧ.Номенклатура);	
							Если Не ЗначениеЗаполнено(ТекущаяУпаковка) И ИмяДока = "ОтборРазмещениеТоваров" тогда
								СтрокаОшибок = "Не выбрана упаковка, для документа обязательно указание упаковок!!!";
								Возврат Неопределено; 
							КонецЕсли;	
						КонецЕсли;
						лСтруктураПоиска.Вставить("Упаковка", ТекущаяУпаковка);				
					КонецЕсли;	
					
					Если НазначениеЗаполненоВТЧПриемка Тогда
						Попытка лСтруктураПоиска.Вставить("Назначение", СтрТЧ.Назначение); Исключение КонецПопытки;
					КонецЕсли;
					
					Если ЕстьДополнительныеФормыДляПоискаСтрок Тогда
						ОбработатьСтруктуруПоискаСУчетомДополнительныхФорм(лСтруктураПоиска, ТаблицаДопФорм, СтрТЧ, ПараметрыШаблона, МетаданныеДока);				
					КонецЕсли;
					
					Если ИмяДока = "СборкаТоваров" Или ИмяДока = "ЗаказНаСборку" Тогда
						Док.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
						Док.Номенклатура = СтрТЧ.Номенклатура;
						Док.Упаковка = СтрТЧ.ЕдиницаИзмерения;
						Док.КоличествоУпаковок = СтрТЧ.Количество;
						
						Попытка
							Если Не Об.Организация.Пустая() Тогда
								Док.Организация = Об.Организация;
							КонецЕсли;
						Исключение 
						КонецПопытки;
						
						Действия = Новый Структура;
						Действия.Вставить("ПроверитьХарактеристикуПоВладельцу", Док.Характеристика);
						Действия.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", Док.Упаковка);
						Действия.Вставить("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу", Док.ВариантКомплектации);
						Действия.Вставить("ПересчитатьКоличествоЕдиниц");
						Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
						
						Шапка = Новый Структура("Номенклатура, Характеристика, Назначение, ВариантКомплектации, Упаковка,
						|Количество, КоличествоУпаковок, ХарактеристикиИспользуются, ТипНоменклатуры");
						ЗаполнитьЗначенияСвойств(Шапка, Док);
						КэшЗначений = Неопределено;
						Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
						Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Шапка, Действия, КэшЗначений);
						ЗаполнитьЗначенияСвойств(Док, Шапка);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Док, СтруктураДействий, Неопределено);
						
						Если Не ТабличнуюЧастьПриЗагрузкеПодбор = 4 Тогда
							ОбработатьСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, Шаблон, ПараметрыДокумента);
						КонецЕсли;
						
						//Серии в отдельной ТЧ
						Если МетаданныеДока.ТабличныеЧасти.Найти("Серии") <> Неопределено И Не СтрТЧ.СерияСсылка.Пустая() Тогда
							Если ИмяДока = "СборкаТоваров" Или ИмяДока = "ЗаказНаСборку" Или ИмяДока = "ПоступлениеТоваровУслуг" Или ИмяДока = "ПриобретениеТоваровУслуг" Или (СтрокаТабличнойЧасти.СтатусУказанияСерий <> 13 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 14 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 9 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 10 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 0) Тогда
								лСтруктураПоискаСерий = Новый Структура("Номенклатура,Характеристика,Серия",СтрТЧ.Номенклатура,СтрТЧ.ХарактеристикаНоменклатуры,СтрТЧ.СерияСсылка);
								СтрокиПоискаСерий = Док["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
								Если СтрокиПоискаСерий.Количество() = 0 Тогда
									СтрокаТабличнойЧастиСерии = Док["Серии"].Добавить();
									СтрокаТабличнойЧастиСерии.Номенклатура = СтрТЧ.Номенклатура;
									СтрокаТабличнойЧастиСерии.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
									СтрокаТабличнойЧастиСерии.Серия = СтрТЧ.СерияСсылка;
									Попытка СтрокаТабличнойЧастиСерии.Склад = СтрокаТабличнойЧасти.Склад; Исключение КонецПопытки;
									Попытка СтрокаТабличнойЧастиСерии.Назначение = СтрокаТабличнойЧасти.Назначение; Исключение КонецПопытки;
								Иначе	
									СтрокаТабличнойЧастиСерии = СтрокиПоискаСерий[0];
								КонецЕсли;
								
								СтрокаТабличнойЧастиСерии.Количество = СтрокаТабличнойЧастиСерии.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
							КонецЕсли;
						КонецЕсли;	
						Если ИспользованиеСерийниковПодбор <> 0 Или ИспользованиеСерийниковПриемка <> 0 Тогда
							УстановитьСерииВдокументе(Док);
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
					
					СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПриемка].НайтиСтроки(лСтруктураПоиска);
					Если СтрокиПоиска.Количество() = 0 Тогда
						СтрокаТабличнойЧасти = Док[ПараметрыДокумента.ИмяТЧПриемка].Добавить();
						СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
						СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
						
						Если лЕстьЯчейка Тогда
							СтрокаТабличнойЧасти.Ячейка = СтрТЧ.ЯчейкаСсылка;
						КонецЕсли;
						
						Если лЕстьСерия Тогда
							СтрокаТабличнойЧасти.Серия = СтрТЧ.СерияСсылка;
						КонецЕсли;
						
						Если лЕстьУпаковка Тогда
							СтрокаТабличнойЧасти.Упаковка = ТекущаяУпаковка;	
						КонецЕсли;
						
						Если ИмяДока = "ДатаМобайл_УпаковочныйЛист" Тогда
							СтрокаТабличнойЧасти.Штрихкод = СтрТЧ.ШтрихКод;	
						КонецЕсли;
						
						Если НазначениеЗаполненоВТЧПриемка Тогда
							Попытка СтрокаТабличнойЧасти.Назначение = СтрТЧ.Назначение; Исключение КонецПопытки;
						КонецЕсли;
						
						Если ЕстьДополнительныеФормыДляПоискаСтрок Тогда
							ОбработатьСтрокуСУчетомДополнительныхФорм(СтрокаТабличнойЧасти, ТаблицаДопФорм, СтрТЧ, ПараметрыШаблона, МетаданныеДока)
						КонецЕсли;
						
						ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента, Док, ПараметрыДокумента.ИмяТЧПриемка, СтрокаТабличнойЧасти);
					Иначе	
						СтрокаТабличнойЧасти = СтрокиПоиска[0];
					КонецЕсли;
					
					Если лЕстьНазначение Тогда
						Попытка ЗаполнитьНазначениеВСтрокеТЧ(ПараметрыДокумента, лСтруктураПоиска, СтрокаТабличнойЧасти); Исключение КонецПопытки;
					КонецЕсли;	
					
					Если ИмяДока = "ПересчетТоваров" Тогда
						СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт + СтрТЧ.Количество;
						СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт * КоэффициентУпаковки;
					ИначеЕсли ЭтоОтборРазмещениеТоваров И ПроверкаОтборРазмещение Тогда
						Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
							СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено = СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено + СтрТЧ.Количество;
							СтрокаТабличнойЧасти.КоличествоРазмещено = СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено * КоэффициентУпаковки;
						Иначе
							СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;
							СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
							СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено = СтрокаТабличнойЧасти.КоличествоУпаковок;
							СтрокаТабличнойЧасти.КоличествоРазмещено = СтрокаТабличнойЧасти.Количество;	
						КонецЕсли;
					Иначе 											
						Если Не БазовыеЕдиницыПриЗагрузке Тогда
							Попытка
								СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;  
								СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
							Исключение
								Если лЕстьКоличество Тогда
									СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество;
								КонецЕсли;	
							КонецПопытки;
						Иначе
							Попытка
								СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество * КоэффициентУпаковки;  
								СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
							Исключение
								Если лЕстьКоличество Тогда
									СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
								КонецЕсли;	
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
					Попытка СтрокаТабличнойЧасти.КоличествоШт = СтрокаТабличнойЧасти.КоличествоШт + СтрТЧ.КоличествоМест; Исключение КонецПопытки;
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
						ОбработатьСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПриемка, СтрокаТабличнойЧасти, Шаблон, ПараметрыДокумента);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(Док, "", ПараметрыДокумента.ИмяТЧПриемка, Шаблон, Об.Ссылка, ПараметрыДокумента);
		КонецЕсли;	
		
		//НОВЫЕ РЕКВИЗИТЫ АВТОЗАГРУЗКИ
		Попытка ЗаполнитьРеквизитыАвтозагрузки(Об, Шаблон, Док); Исключение КонецПопытки;
		
		//УСТАНОВКА СТАТУСОВ УКАЗАНИЯ СЕРИЙ В ДОКУМЕНТЕ
		Если ИспользованиеСерийниковПодбор <> 0 Или ИспользованиеСерийниковПриемка <> 0 Тогда
			Попытка УстановитьСерииВдокументе(Док); Исключение КонецПопытки; 
		КонецЕсли;
		
		//УСТАНОВКА РЕКВИЗИТОВ ШАПКИ ИЗ ДОПОЛНИТЕЛЬНЫХ ФОРМ
		Попытка ИзменитьРеквизитыШапкиИзДополнительныхФорм(Док, Шаблон, Об); Исключение КонецПопытки;	
		
		//ДОПОЛНИТЕЛЬНАЯ ОБРАБОТКА ПО ВИДАМ ДОКУМЕНТОВ
		Попытка ВыполнитьДополнительнуюОбработкуДокумента(Док, ПараметрыДокумента, ЕстьОшибки, СтрокаОшибок); Исключение КонецПопытки;
		Если ЕстьОшибки Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		//КОРРЕКТИРОВКА РЕАЛИЗАЦИИ
		Если ИмяДока = "КорректировкаРеализации" Тогда
			Если Не Об.ПланРавноФакт Тогда
				Док = ЗаполнитьКорректировкуРеализации(Об, Док);
				Об.НовыйДокумент = Док;
			Иначе
				СтрокаОшибок = "создание корректировки не требуется!";
				ЗаполнитьКомментарийИсходногоДокументаЕслиНебылоРасхождений(Об);
				Возврат Неопределено;
			КонецЕсли;	
			//АКТ РАСХОЖДЕНИЙ ПРИ ПРИЕМКЕ	
		ИначеЕсли ИмяДока = "АктОРасхожденияхПослеПриемки" Тогда
			Если Не Об.ПланРавноФакт Тогда
				Док = ЗаполнитьАктОРасхожденияхПослеПриемки(Об, Док);
				Об.НовыйДокумент = Док;
			Иначе
				СтрокаОшибок = "создание акта о расхождении не требуется!";
				ЗаполнитьКомментарийИсходногоДокументаЕслиНебылоРасхождений(Об);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидДокумента = "РеализацияТоваровУслуг" И ВидДокументаНового = "АктОРасхожденияхПослеОтгрузки" Или
			ВидДокумента = "ПриобретениеТоваровУслуг" И ВидДокументаНового = "КорректировкаПриобретения" Тогда
			Если Об.ПланРавноФакт Тогда
				ЗаполнитьКомментарийИсходногоДокументаЕслиНебылоРасхождений(Об);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Ссылка", Неопределено);
		СтруктураВозврата.Вставить("СерилизованноеЗначениеОбъекта", Неопределено);
		
		//ПРОВЕДЕНИЕ ОБРАБОТАННЫХ ДОКУМЕНТОВ
		Если ИмяДока = "КорректировкаРеализации" Тогда
			Если Док.Товары.Количество() Тогда
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Если ПроводитьРоботом Тогда
				ПроведениеИсходногоДокумента(ВидДокументаНового, ИсходныйДокумент);
				
				Попытка 
					ВыполнитьДополнительноеПроведениеДокумента(Об, Док, ПараметрыДокумента); 
				Исключение 
					Если Не ЗначениеЗаполнено(Док.Ссылка) Тогда
						Док.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;		
				КонецПопытки;
			КонецЕсли; 		
		ИначеЕсли ИмяДока = "АктОРасхожденияхПослеПриемки" Тогда
			Если Док.Товары.Количество() Тогда
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Если ПроводитьРоботом Тогда
				ПроведениеИсходногоДокумента(ВидДокументаНового, ИсходныйДокумент);
				
				Попытка 
					ВыполнитьДополнительноеПроведениеДокумента(Об, Док, ПараметрыДокумента); 
				Исключение 
					Если Не ЗначениеЗаполнено(Док.Ссылка) Тогда
						Док.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;		
				КонецПопытки;
			КонецЕсли;
		Иначе
			Если ПроводитьРоботом Тогда
				
				ПроведениеИсходногоДокумента(ВидДокументаНового, ИсходныйДокумент);	
				
				//ПРОВЕДЕНИЕ ТЕКУЩЕГО
				Попытка 
					ВыполнитьДополнительноеПроведениеДокумента(Об, Док, ПараметрыДокумента); 
				Исключение 
					Если ИмяДока = "ОтборРазмещениеТоваров" И СтатусПослеЗагрузки <> Неопределено Тогда
						Док.Статус = СтатусПослеЗагрузки;
					КонецЕсли;
					
					Если ИмяДока = "ОтборРазмещениеТоваров" Тогда
						ОшибокЗаполненияНеОбнаружено = Док.ПроверитьЗаполнение();
					КонецЕсли;	
					
					Если ОшибокЗаполненияНеОбнаружено Тогда
						ИзменитьДопСвойствоВДвиженияТоварыВЯчейках(Док);			
						Попытка 
							Док.Записать(РежимЗаписиДокумента.Проведение); 
						Исключение 
							Попытка 
								Док.Записать(РежимЗаписиДокумента.Запись); 
							Исключение 
							КонецПопытки;
						КонецПопытки;
					Иначе
						Если Не ЗначениеЗаполнено(Док.Ссылка) Тогда
							Док.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;	
					КонецЕсли;	
				КонецПопытки;
			Иначе
				Если ОткрыватьДокументыПослеЗагрузкиБезЗаписи И Не(ОбрабатыватьРоботом Или ПроводитьРоботом Или ИспользоватьМаркировку Или ИспользоватьГрупповойДокумент) Тогда
					
					Попытка
						ЗаписьXML = Новый ЗаписьXML;
						ЗаписьXML.УстановитьСтроку();
						ЗаписатьXML(ЗаписьXML, Док);
						СерилизованноеЗначениеОбъекта = ЗаписьXML.Закрыть();
						
						СтруктураВозврата.СерилизованноеЗначениеОбъекта = СерилизованноеЗначениеОбъекта;
						СтруктураВозврата.Ссылка = Док.Ссылка;
					Исключение
						Возврат Неопределено;
					КонецПопытки;
					
				Иначе	
					Док.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;		
			КонецЕсли;	
		КонецЕсли;	
		
		Если ИмяДока = "СписаниеНедостачТоваров" И Док.Проведен И СоздаватьДокументИСМП И ИспользоватьМаркировку Тогда
			СоздатьДокументВыводИзОборотаИСМП(Док, Об, СтрокаОшибок, Ложь);		
		КонецЕсли; 
		
		УдалосьПровестиПеремещение 				= Ложь;
		УдалосьПровестиРасходныйПриходныйОрдер  = Ложь;	
		Если ОшибокЗаполненияНеОбнаружено Тогда
			Попытка ВыполнитьДополнительнуюОбработкуИсходногоДокумента(Док, ПараметрыДокумента, УдалосьПровестиПеремещение); Исключение КонецПопытки;	
			Если ЭтоБыстроеПеремещение Тогда
				ПроцедураПоБыстромуПеремещению(Об, Док.Ссылка, Об.СобранныеДанныеПодбор.Выгрузить(), Об.СобранныеДанныеПриемка.Выгрузить(), БыстроеПеремещение, УдалосьПровестиПеремещение, УдалосьПровестиРасходныйПриходныйОрдер);		
			КонецЕсли;	
			
			Об.ДатаЗавершения = ТекущаяДата();
		КонецЕсли;
		
		//УСТАНОВКА ССЫЛКИ НА ОБРАБОТАННЫЙ ДОКУМЕНТ В СПРАВОЧНИКЕ ДОКУМЕНТЫ ТСД
		Если СокрЛП(ВидДокументаНового) = "" Или БыстраяПриемка Или БыстраяОтгрузка Тогда // старая схема
			Об.ИсходныйДокумент = Док.Ссылка;
		Иначе
			Если НовыйДокументВВидеТабличнойЧасти Тогда
				Об.НовыеДокументы.Очистить();
				
				СтрНовогоДокумента = Об.НовыеДокументы.Добавить();
				СтрНовогоДокумента.НовыйДокумент = Док.Ссылка;
			Иначе
				Об.НовыйДокумент = Док.Ссылка;
			КонецЕсли;
		КонецЕсли;	
		
		//ЗАПИСЬ ДОКУМЕНТА ТСД И ВОЗВРАТ ССЫЛКИ НА ОБРАБОТАННЫЙ ДОКУМЕНТ		
		Об.Записать();
		
		//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
		ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(Об, Истина);
		
		Если ОткрыватьДокументыПослеЗагрузкиБезЗаписи И Не(ОбрабатыватьРоботом Или ПроводитьРоботом Или ИспользоватьМаркировку Или ИспользоватьГрупповойДокумент) Тогда
			Возврат СтруктураВозврата;
		Иначе
			Возврат Док.Ссылка;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

Функция ПеренестиДанныеПоДокументуВСправочник(Об, СтрокаОшибок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДок", Об.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_СтрокиГрупповыхДокументов
	|ГДЕ
	|	ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД = &ССылкаНаДок
	|	И НЕ ДатаМобайл_СтрокиГрупповыхДокументов.ДляОбмена";
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Если Рез.ИмяТаблицы = "Select" Тогда
			НоваяСтрока = Об.СобранныеДанныеПодбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Рез);			
		Иначе
			НоваяСтрока = Об.СобранныеДанныеПриемка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Рез);	
		КонецЕсли;	
	КонецЦикла;
	
	Попытка
		Об.Записать();
	Исключение
		СтрокаОшибок = "Ошибка записи групповых данных: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	ДатаМобайл_ОбщийМодуль.ОчиститьЗаписиГрупповогоДокумента(Об.Ссылка);
	Возврат Истина;
	
КонецФункции
Функция ПеренестиДополнительныеДанныеПоДокументуВСправочник(Об, СтрокаОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &доктсд
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Пользователь
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка 
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ссылка = &доктсд";
	
	Запрос.УстановитьПараметр("доктсд", Об.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяПользователяСтрока", ВыборкаДетальныеЗаписи.Пользователь); 	
		МассивПоиска = Об.СписокПользователей.НайтиСтроки(СтруктураПоиска); 	
		Если МассивПоиска.Количество() = 0 Тогда
			НовСтр = Об.СписокПользователей.Добавить();	
			НовСтр.ИмяПользователяСтрока = ВыборкаДетальныеЗаписи.Пользователь; 
			НовСтр.ИмяПользователяСсылка = Справочники.Пользователи.НайтиПоНаименованию(ВыборкаДетальныеЗаписи.Пользователь);
		КонецЕсли;		
	КонецЦикла;
	
	Об.Записать();
	
КонецФункции
Функция ВнестиВбазуНесколькоДокументов(МассивДокументов, Об, ПараметрыШаблона)
	
	ПользовательДляАвтозаполнения 		= ПараметрыШаблона.ПользовательДляАвтозаполнения;
	ИмяТабличнойЧастиПодбор       		= ПараметрыШаблона.ИмяТабличнойЧастиПодбор;
	ИмяТабличнойЧастиПриемка      		= ПараметрыШаблона.ИмяТабличнойЧастиПриемка;
	ИспользоватьПодбор            		= ПараметрыШаблона.ИспользоватьПодбор;
	ТабличнуюЧастьПриЗагрузкеПодбор 	= ПараметрыШаблона.ТабличнуюЧастьПриЗагрузкеПодбор;
	СоздаватьДокументыУпаковочныхЛистов = ПараметрыШаблона.ИспользованиеУпаковочныхЛистовПодбор <> 0;
	ИспользоватьМаркировку              = ПараметрыШаблона.ИспользоватьМаркировку;
	ВидДокументаНового                  = ПараметрыШаблона.ВидДокументаНового;
	ПроводитьРоботом                    = ПараметрыШаблона.ПроводитьРоботом;
	
	ПараметрыДокумента = СобратьПараметры();	
	Если ПользовательДляАвтозаполнения.Пустая() Тогда
		ПараметрыДокумента.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Иначе	
		ПараметрыДокумента.Вставить("Пользователь", ПользовательДляАвтозаполнения);
	КонецЕсли;	
	ПараметрыДокумента.Вставить("ИмяТЧПодбор", ИмяТабличнойЧастиПодбор);
	ПараметрыДокумента.Вставить("ИмяТЧПриемка", ИмяТабличнойЧастиПриемка);
	ПараметрыДокумента.Вставить("Об", Об);
	
	Шаблон = Об.Шаблон;
	ШкДока = Об.Номер;
	КомментДока = Об.Комментарий;
	
	ЕстьОшибки = Ложь;
	СтрокаОшибок = "";
	
	Если СоздаватьДокументыУпаковочныхЛистов Тогда
		Попытка ЗаполнитьУпаковочныеЛисты(Об, МассивДокументов); Исключение КонецПопытки;	
	КонецЕсли;
		
	//МАРКИРОВКА
	Если ИспользоватьМаркировку Тогда
		ДатаМобайл_Маркировка.ВнестиВбазуНесколькоДокументов(МассивДокументов, Об, ПараметрыШаблона);
		Об.ВремяСборки = (Об.ДатаЗавершенияСбора - Об.ДатаНачалаСбора) / 60;		
		Об.ДатаЗавершения = ТекущаяДата();		
		Об.Записать();
		Возврат МассивДокументов;
	КонецЕсли; 
				
	//ОБЫЧНЫЕ ДОКУМЕНТЫ
	Для каждого ТекущийИсходныйДокумент Из МассивДокументов Цикл
		
		Док = ТекущийИсходныйДокумент.ПолучитьОбъект();
		
		//НОВЫЕ РЕКВИЗИТЫ АВТОЗАГРУЗКИ
		Попытка ЗаполнитьРеквизитыАвтозагрузки(Об, Шаблон, Док); Исключение КонецПопытки;
				
		//УСТАНОВКА СТАТУСОВ УКАЗАНИЯ СЕРИЙ В ДОКУМЕНТЕ
		
		//УСТАНОВКА РЕКВИЗИТОВ ШАПКИ ИЗ ДОПОЛНИТЕЛЬНЫХ ФОРМ
		Попытка ИзменитьРеквизитыШапкиИзДополнительныхФорм(Док, Шаблон, Об); Исключение КонецПопытки;	
				
		//ДОПОЛНИТЕЛЬНАЯ ОБРАБОТКА ПО ВИДАМ ДОКУМЕНТОВ
		Попытка ВыполнитьДополнительнуюОбработкуДокумента(Док, ПараметрыДокумента, ЕстьОшибки, СтрокаОшибок); Исключение КонецПопытки;
				
		Если ПроводитьРоботом Тогда
			//ПРОВЕДЕНИЕ ТЕКУЩЕГО
			Попытка 
				ВыполнитьДополнительноеПроведениеДокумента(Об, Док, ПараметрыДокумента); 
			Исключение 
				Попытка 
					Док.Записать(РежимЗаписиДокумента.Проведение); 
				Исключение 
					Попытка 
						Док.Записать(РежимЗаписиДокумента.Запись); 
					Исключение 
					КонецПопытки;
				КонецПопытки;
			КонецПопытки;
		Иначе
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
		
		Попытка ВыполнитьДополнительнуюОбработкуИсходногоДокумента(Док, ПараметрыДокумента); Исключение КонецПопытки;
		
	КонецЦикла;
			
	Об.ВремяСборки = (Об.ДатаЗавершенияСбора - Об.ДатаНачалаСбора) / 60;	
	Об.ДатаЗавершения = ТекущаяДата();
	Об.Записать();
	
	Возврат МассивДокументов;
	
КонецФункции 
Функция ПланРавноФакт(Док, ИсходныйДокумент, МножествоДокументовКакЗадание = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		Возврат ПроверкаПланРавноФакт(Док);	
	ИначеЕсли МножествоДокументовКакЗадание Тогда
		Возврат ПроверкаПланРавноФакт(Док);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ПроверкаПланРавноФакт(Док);
	
	ДокТЧ = ПолучитьТЧДокумента(Док);
	
	Если ДокТЧ.Количество() > 0 Тогда
		Для каждого Стр Из ДокТЧ Цикл
			Если Стр.План <> Стр.Факт Тогда
				Возврат Ложь;
			КонецЕсли;			
		КонецЦикла;				
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция ПолучитьТЧДокумента(Док) Экспорт	
	
	Шаблон = Док.Шаблон;
	
	СтруктураПараметров = ПолучитьСтруктуруРеквизитовШаблона();
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ПараметрыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, СтруктураПараметров);
	
	ВидДокумента 									= ПараметрыШаблона.ВидДокумента;
	ВидДокументаНового 								= ПараметрыШаблона.ВидДокументаНового;
	ИмяТабличнойЧастиПодбор  						= ПараметрыШаблона.ИмяТабличнойЧастиПодбор;
	ИмяТабличнойЧастиПриемка 						= ПараметрыШаблона.ИмяТабличнойЧастиПриемка;
	ИспользоватьПодбор       						= ПараметрыШаблона.ИспользоватьПодбор;
	ИспользоватьПриемку      						= ПараметрыШаблона.ИспользоватьПриемку;	
	ИспользоватьМаркировку   						= ПараметрыШаблона.ИспользоватьМаркировку;
	МаркировкаЗапретитьПодборНемаркируемыхТоваров 	= ПараметрыШаблона.МаркировкаЗапретитьПодборНемаркируемыхТоваров;
	ГрупповаяРабота                      			= ПараметрыШаблона.ГрупповаяРабота;
	БыстроеСканирование                      		= ПараметрыШаблона.БыстроеСканирование;
	РаспределениеТоваров 							= ПараметрыШаблона.РаспределениеТоваров;
	
	Запрос = Новый Запрос; 
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИтоговаяТаблица.ТипСтроки КАК ТипСтроки,
	|	ИтоговаяТаблица.Название КАК Название,
	|   2=2 КАК ЕдиницаИзмерения,
	|	СУММА(ИтоговаяТаблица.План) КАК План,
	|	СУММА(ИтоговаяТаблица.Факт) КАК Факт,
	|	СУММА(ИтоговаяТаблица.Расхождения) КАК Расхождения
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|		ЕСТЬNULL(ВложенныйЗапрос.ХарактеристикаНоменклатуры, """") КАК ХарактеристикаНоменклатуры,
	|		ВложенныйЗапрос.ТипСтроки КАК ТипСтроки,
	|		ВложенныйЗапрос.Название КАК Название,
	|   	3=3 КАК ЕдиницаИзмерения,
	|		СУММА(ВложенныйЗапрос.План) КАК План,
	|		СУММА(ВложенныйЗапрос.Факт) КАК Факт,
	|		СУММА(-ВложенныйЗапрос.План + ВложенныйЗапрос.Факт) КАК Расхождения
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
	|			ЕСТЬNULL(СобранныеДанныеПодбор.ХарактеристикаНоменклатуры, """") КАК ХарактеристикаНоменклатуры,
	|			0 КАК План,
	|			СобранныеДанныеПодбор.Количество * ЕСТЬNULL(ВЫБОР
	|					КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель, 1)
	|				КОНЕЦ / ВЫБОР
	|					КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель, 1)
	|				КОНЕЦ, 1) КАК Факт,
	|			""Подбор"" КАК ТипСтроки,
	|			"""" КАК Название,
	|			СобранныеДанныеПодбор.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		ИЗ
	|			Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
	|		ГДЕ
	|			СобранныеДанныеПодбор.Ссылка = &Ссылка";
	
	Если (ГрупповаяРабота Или БыстроеСканирование) И Док.ДатаЗавершения = Дата(1,1,1) Тогда
		Запрос.Текст = Запрос.Текст +  
		"
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
		|			ЕСТЬNULL(СобранныеДанныеПодбор.ХарактеристикаНоменклатуры, """") КАК ХарактеристикаНоменклатуры,
		|			0 КАК План,
		|			СобранныеДанныеПодбор.Количество * ЕСТЬNULL(ВЫБОР
		|					КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель, 1) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель, 1)
		|				КОНЕЦ / ВЫБОР
		|					КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель, 1) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель, 1)
		|				КОНЕЦ, 1) КАК Факт,
		|			""Подбор"" КАК ТипСтроки,
		|			"""" КАК Название,
		|			СобранныеДанныеПодбор.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|		ИЗ
		|			РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК СобранныеДанныеПодбор
		|		ГДЕ
		|			СобранныеДанныеПодбор.ДокументТСД = &Ссылка И НЕ СобранныеДанныеПодбор.ДляОбмена И СобранныеДанныеПодбор.ИмяТаблицы = ""Select""";	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +  
	"
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СобранныеДанныеПриемка.Номенклатура,
	|			ЕСТЬNULL(СобранныеДанныеПриемка.ХарактеристикаНоменклатуры, """"),
	|			0,
	|			СобранныеДанныеПриемка.Количество * ЕСТЬNULL(ВЫБОР
	|					КОГДА ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Числитель, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Числитель, 1)
	|				КОНЕЦ / ВЫБОР
	|					КОГДА ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Знаменатель, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Знаменатель, 1)
	|				КОНЕЦ, 1),
	|			""Размещение"",
	|			"""",
	|			СобранныеДанныеПриемка.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		ИЗ
	|			Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК СобранныеДанныеПриемка
	|		ГДЕ
	|			СобранныеДанныеПриемка.Ссылка = &Ссылка";

	Если (ГрупповаяРабота Или БыстроеСканирование) И Док.ДатаЗавершения = Дата(1,1,1) Тогда
		Запрос.Текст = Запрос.Текст +  
		"
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
		|			ЕСТЬNULL(СобранныеДанныеПодбор.ХарактеристикаНоменклатуры, """") КАК ХарактеристикаНоменклатуры,
		|			0 КАК План,
		|			СобранныеДанныеПодбор.Количество * ЕСТЬNULL(ВЫБОР
		|					КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель, 1) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель, 1)
		|				КОНЕЦ / ВЫБОР
		|					КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель, 1) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель, 1)
		|				КОНЕЦ, 1) КАК Факт,
		|			""Подбор"" КАК ТипСтроки,
		|			"""" КАК Название,
		|			СобранныеДанныеПодбор.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|		ИЗ
		|			РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК СобранныеДанныеПодбор
		|		ГДЕ
		|			СобранныеДанныеПодбор.ДокументТСД = &Ссылка И НЕ СобранныеДанныеПодбор.ДляОбмена И СобранныеДанныеПодбор.ИмяТаблицы = ""Select""";	
	КонецЕсли;
	
	Если ИспользоватьПодбор Тогда
		Запрос.Текст = Запрос.Текст +  
		"
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТаблицаДокумента1СПодбор.Номенклатура,
		|			ЕСТЬNULL(ТаблицаДокумента1СПодбор.Характеристика, """"),
		|			ТаблицаДокумента1СПодбор.Количество,
		|			0,
		|			""Подбор"",
		|			"""",
		|			&УсловиеУпаковкаПодбор
		|		ИЗ
		|			Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента1СПодбор
		|		ГДЕ
		|			&УсловиеУпакЛисты
		|			И ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент";
	КонецЕсли;
	
	Если ИспользоватьПриемку Тогда
		Запрос.Текст = Запрос.Текст +  
		"	
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТаблицаДокумента1СРазмещение.Номенклатура,
		|			ЕСТЬNULL(ТаблицаДокумента1СРазмещение.Характеристика, """"),
		|			ТаблицаДокумента1СРазмещение.Количество,
		|			0,
		|			""Размещение"",
		|			"""",
		|			&УсловиеУпаковкаРазмещение
		|		ИЗ
		|			Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента1СРазмещение
		|		ГДЕ
		|			ТаблицаДокумента1СРазмещение.Ссылка = &ИсходныйДокумент";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ") КАК ВложенныйЗапрос";
	Запрос.Текст = Запрос.Текст + 
	"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ТипСтроки,
	|		ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|		ВложенныйЗапрос.Номенклатура,
	|		ВложенныйЗапрос.Название,
	|   	3=3) КАК ИтоговаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.ТипСтроки,
	|	ИтоговаяТаблица.ХарактеристикаНоменклатуры,
	|	ИтоговаяТаблица.Номенклатура,
	|	ИтоговаяТаблица.Название,
	|   2=2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВременнаяТаблица.План КАК План,
	|	ВременнаяТаблица.Факт КАК Факт,
	|	ВременнаяТаблица.Расхождения КАК Расхождения,
	|	ВременнаяТаблица.ТипСтроки КАК ТипСтроки,
	|	ВременнаяТаблица.Название КАК Название,
	|   4=4 КАК ЕдиницаИзмерения
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|ГДЕ
	|	1=1
	|";
	
	Запрос.УстановитьПараметр("ИсходныйДокумент", Док.ИсходныйДокумент);
	Запрос.УстановитьПараметр("Ссылка"			, Док.Ссылка);
		
	Если ВидДокумента = "ЗаданиеНаПеревозку" Тогда	
		ВидДокумента = "ЗаказКлиента";
		ИмяТабличнойЧастиПодбор = "Товары";
		ИмяТабличнойЧастиПриемка = "Товары";	
	КонецЕсли;
	
	// в документе АктОРасхожденияхПослеПриемки учитываются расхождения по упаковкам
	Если ВидДокумента = "ПриобретениеТоваровУслуг" И ВидДокументаНового = "АктОРасхожденияхПослеПриемки" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "2=2" , "ИтоговаяТаблица.ЕдиницаИзмерения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "3=3", "ВложенныйЗапрос.ЕдиницаИзмерения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "4=4", "ВременнаяТаблица.ЕдиницаИзмерения");		
	КонецЕсли;
	
	Если ИспользоватьПодбор Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента1СПодбор", "Документ." + ВидДокумента + "." + ИмяТабличнойЧастиПодбор + " КАК ТаблицаДокумента1СПодбор");
	КонецЕсли;		
	
	Если ИспользоватьПриемку Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента1СРазмещение", "Документ." + ВидДокумента + "." + ИмяТабличнойЧастиПриемка + " КАК ТаблицаДокумента1СРазмещение");
	КонецЕсли;  
	
	
	МетаданныеДокумента = Метаданные.Документы[ВидДокумента];
	
		Попытка
			ЕстьУпаковкаПодбор = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Упаковка") <> Неопределено;
		Исключение
			ЕстьУпаковкаПодбор = Ложь;
		КонецПопытки;		
		
		Если ЕстьУпаковкаПодбор Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУпаковкаПодбор", "ТаблицаДокумента1СПодбор.Упаковка");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУпаковкаПодбор", "Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
		КонецЕсли;

		Попытка
			ЕстьУпаковкаРазмещение = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧастиПриемка].Реквизиты.Найти("Упаковка") <> Неопределено;
		Исключение
			ЕстьУпаковкаРазмещение = Ложь;
		КонецПопытки;		
		
		Если ЕстьУпаковкаРазмещение Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУпаковкаРазмещение", "ТаблицаДокумента1СРазмещение.Упаковка");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУпаковкаРазмещение", "Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
		КонецЕсли;
	
	Если ВидДокумента = "УстановкаЦенНоменклатуры" Или ВидДокумента = "ПрименениеЦенНоменклатуры" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", 999);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", 999);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента1СПодбор.Количество", 999);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента1СПриемка.Количество", 999);
	КонецЕсли;
	
	// учитывает в РО наличие упак листов
	Если ТипЗнч(Док.ИсходныйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") И ИмяТабличнойЧастиПодбор = "ОтгружаемыеТовары" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУпакЛисты", "НЕ ТаблицаДокумента1СПодбор.ЭтоУпаковочныйЛист");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУпакЛисты", "ИСТИНА");
	КонецЕсли;
	
	Если ИспользоватьМаркировку И МаркировкаЗапретитьПодборНемаркируемыхТоваров Тогда
		ТекстОграниченияНемаркируемых = "(
		|	ВременнаяТаблица.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
		|   И ВременнаяТаблица.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
		|   И ВременнаяТаблица.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
		|   И ВременнаяТаблица.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
		|   И ВременнаяТаблица.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
		|   И ВременнаяТаблица.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
		|   И ВременнаяТаблица.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
		|   И ВременнаяТаблица.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
		|   И ВременнаяТаблица.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
		|   ИЛИ
		|   (ВременнаяТаблица.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
		|   И ВременнаяТаблица.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
		|   И ВременнаяТаблица.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
		|   И ВременнаяТаблица.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
		|   И ВременнаяТаблица.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
		|   И ВременнаяТаблица.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
		|   И ВременнаяТаблица.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
		|   И ВременнаяТаблица.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
		|   И ВременнаяТаблица.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
		|"; 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", ТекстОграниченияНемаркируемых);
	КонецЕсли; 
	
	Если ТипЗнч(Док.ИсходныйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") И ИмяТабличнойЧастиПодбор = "Расхождения" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента1СПодбор.Количество", "ТаблицаДокумента1СПодбор.Количество * ВЫБОР КОГДА ТаблицаДокумента1СПодбор.Количество < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ");
	КонецЕсли;
	
	Если ТипЗнч(Док.ИсходныйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") И ИмяТабличнойЧастиПриемка = "Расхождения" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента1СРазмещение.Количество", "ТаблицаДокумента1СРазмещение.Количество * ВЫБОР КОГДА ТаблицаДокумента1СРазмещение.Количество < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ");
	КонецЕсли;
	
	Если РаспределениеТоваров = 1 Тогда
		МассивДокументов = Док.Задания.ВыгрузитьКолонку("Задание");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент", "И ТаблицаДокумента1СПодбор.Ссылка В (&ИсходныйДокумент)");
		Запрос.УстановитьПараметр("ИсходныйДокумент", МассивДокументов);
	КонецЕсли;
	
	Если ВидДокумента = "ОстаткиЕГАИС" И (ИмяТабличнойЧастиПодбор = "ОстаткиПоДаннымЕГАИС" Или ИмяТабличнойЧастиПриемка = "ОстаткиПоДаннымЕГАИС") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента1СПодбор.Номенклатура", "ТаблицаДокумента1СПодбор.АлкогольнаяПродукция");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента1СРазмещение.Номенклатура", "ТаблицаДокумента1СРазмещение.АлкогольнаяПродукция");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(ТаблицаДокумента1СПодбор.Характеристика, """")", """""");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(ТаблицаДокумента1СРазмещение.Характеристика, """")", """""");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции
Функция СобратьПараметры()
	СтруктураПараметров = Новый Структура();
	Возврат СтруктураПараметров;
КонецФункции		
Функция ПолучитьСтатусОтбораРазмещенияТоваровПослеЗагрузки(ДокументТСД, ДокументБД) Экспорт
	
	ЕстьРасхождения = Ложь;
	
	Если ДокументБД.ТоварыОтбор.Количество() > 0 Тогда  // есть задание на отбор
		ТЗДокументБД = ДокументБД.ТоварыОтбор.Выгрузить();
		ТЗДокументБД.Свернуть("Ячейка,Номенклатура,Характеристика","КоличествоУпаковок");
		
		ТЗДанныеТСД = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЗДанныеТСД.Свернуть("ЯчейкаСсылка,Номенклатура,ХарактеристикаНоменклатуры","Количество");
		
		Если ТЗДокументБД.Количество() <> ТЗДанныеТСД.Количество() Тогда
			ЕстьРасхождения = Истина;	
		Иначе 
			Для каждого СтрокаДанныеТСД Из ТЗДанныеТСД Цикл
				СтрокиПоиска = ТЗДокументБД.НайтиСтроки(Новый Структура("Ячейка,Номенклатура,Характеристика", СтрокаДанныеТСД.ЯчейкаСсылка, СтрокаДанныеТСД.Номенклатура, СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
				Если СтрокиПоиска.Количество() = 0 Тогда
					ЕстьРасхождения = Истина;	
				Иначе 
					ОбщееБазовоеКоличествоВДокументе = 0;
					ОбщееБазовоеКоличествоВПодборе = 0;
					
					СтрокиПоискаКоличествоВДокументе = ДокументБД.ТоварыОтбор.НайтиСтроки(Новый Структура("Ячейка,Номенклатура,Характеристика", СтрокаДанныеТСД.ЯчейкаСсылка, СтрокаДанныеТСД.Номенклатура, СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
					Для каждого СтрокаКоличествоВДокументе Из СтрокиПоискаКоличествоВДокументе Цикл
						ОбщееБазовоеКоличествоВДокументе = ОбщееБазовоеКоличествоВДокументе + СтрокаКоличествоВДокументе.КоличествоУпаковок * ?(СтрокаКоличествоВДокументе.Упаковка.Числитель = 0, 1, СтрокаКоличествоВДокументе.Упаковка.Числитель);		
					КонецЦикла;	
					
					СтрокиПоискаКоличествоВПодборе = ДокументТСД.СобранныеДанныеПодбор.НайтиСтроки(Новый Структура("ЯчейкаСсылка,Номенклатура,ХарактеристикаНоменклатуры", СтрокаДанныеТСД.ЯчейкаСсылка, СтрокаДанныеТСД.Номенклатура, СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
					Для каждого СтрокаКоличествоВПодборе Из СтрокиПоискаКоличествоВПодборе Цикл
						ОбщееБазовоеКоличествоВПодборе = ОбщееБазовоеКоличествоВПодборе + СтрокаКоличествоВПодборе.Количество * ?(СтрокаКоличествоВПодборе.ЕдиницаИзмерения.Числитель = 0, 1, СтрокаКоличествоВПодборе.ЕдиницаИзмерения.Числитель);		
					КонецЦикла;						
					
					Если ОбщееБазовоеКоличествоВДокументе <> ОбщееБазовоеКоличествоВПодборе Тогда
						ЕстьРасхождения = Истина;
					Иначе 
						//нет расхождений
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументБД.ТоварыРазмещение.Количество() > 0 Тогда  // есть задание на размещение
		ТЗДокументБД = ДокументБД.ТоварыРазмещение.Выгрузить();
		ТЗДокументБД.Свернуть("Ячейка,Номенклатура,Характеристика","КоличествоУпаковок");
		
		ТЗДанныеТСД = ДокументТСД.СобранныеДанныеПриемка.Выгрузить();
		ТЗДанныеТСД.Свернуть("ЯчейкаСсылка,Номенклатура,ХарактеристикаНоменклатуры","Количество");
		
		Если ТЗДокументБД.Количество() <> ТЗДанныеТСД.Количество() Тогда
			ЕстьРасхождения = Истина;	
		Иначе 
			Для каждого СтрокаДанныеТСД Из ТЗДанныеТСД Цикл
				СтрокиПоиска = ТЗДокументБД.НайтиСтроки(Новый Структура("Ячейка,Номенклатура,Характеристика", СтрокаДанныеТСД.ЯчейкаСсылка, СтрокаДанныеТСД.Номенклатура, СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
				Если СтрокиПоиска.Количество() = 0 Тогда
					ЕстьРасхождения = Истина;	
				Иначе 
					
					ОбщееБазовоеКоличествоВДокументе = 0;
					ОбщееБазовоеКоличествоВПодборе = 0;
					
					СтрокиПоискаКоличествоВДокументе = ДокументБД.ТоварыРазмещение.НайтиСтроки(Новый Структура("Ячейка,Номенклатура,Характеристика", СтрокаДанныеТСД.ЯчейкаСсылка, СтрокаДанныеТСД.Номенклатура, СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
					Для каждого СтрокаКоличествоВДокументе Из СтрокиПоискаКоличествоВДокументе Цикл
						ОбщееБазовоеКоличествоВДокументе = ОбщееБазовоеКоличествоВДокументе + СтрокаКоличествоВДокументе.КоличествоУпаковок * ?(СтрокаКоличествоВДокументе.Упаковка.Числитель = 0, 1, СтрокаКоличествоВДокументе.Упаковка.Числитель);		
					КонецЦикла;	
					
					СтрокиПоискаКоличествоВПодборе = ДокументТСД.СобранныеДанныеПриемка.НайтиСтроки(Новый Структура("ЯчейкаСсылка,Номенклатура,ХарактеристикаНоменклатуры", СтрокаДанныеТСД.ЯчейкаСсылка, СтрокаДанныеТСД.Номенклатура, СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
					Для каждого СтрокаКоличествоВПодборе Из СтрокиПоискаКоличествоВПодборе Цикл
						ОбщееБазовоеКоличествоВПодборе = ОбщееБазовоеКоличествоВПодборе + СтрокаКоличествоВПодборе.Количество * ?(СтрокаКоличествоВПодборе.ЕдиницаИзмерения.Числитель = 0, 1, СтрокаКоличествоВПодборе.ЕдиницаИзмерения.Числитель);		
					КонецЦикла;	
										
					Если ОбщееБазовоеКоличествоВДокументе<>ОбщееБазовоеКоличествоВПодборе Тогда
						ЕстьРасхождения = Истина;
					Иначе 
						//нет расхождений
					КонецЕсли;										
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
	
	Если ЕстьРасхождения Тогда
		Возврат Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
	Иначе
		Возврат Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
	КонецЕсли;
	
КонецФункции
Функция ЗаполнитьУпаковочныеЛисты(Об, МассивДокументов = Неопределено, Док = "")
	
	Шаблон = Об.Шаблон;
	ДобавитьНовыеДокументыВМассив = Ложь;
	ТЧНеИзменять = Ложь;
	
	//Запишем и проведем все упак листы по документу
	ТЗОбщая = Об.СобранныеДанныеПодбор.Выгрузить();
	ТЗОбщая.Свернуть("УпаковочныйЛист,Пользователь");
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");	
	ПараметрыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "ВидДокумента, ИспользоватьТиповыеУпаковочныеЛисты, ТабличнаяЧастьПриЗагрузкеУЛ, ИспользованиеУпаковочныхЛистовПодбор, РаспределениеТоваров");
	ВидДокумента 						= ПараметрыШаблона.ВидДокумента;
	ИспользоватьТиповыеУпаковочныеЛисты = ПараметрыШаблона.ИспользоватьТиповыеУпаковочныеЛисты;
	ТабличнуюЧастьПриЗагрузкеПодбор     = ПараметрыШаблона.ТабличнаяЧастьПриЗагрузкеУЛ;
	СоздаватьДокументыУпаковочныхЛистов = ПараметрыШаблона.ИспользованиеУпаковочныхЛистовПодбор <> 0;
	МножествоДокументовКакЗадание		= ПараметрыШаблона.РаспределениеТоваров = 1;
	
	Если МножествоДокументовКакЗадание <> Истина Тогда 		
		Если ИспользоватьТиповыеУпаковочныеЛисты И МассивДокументов <> Неопределено Тогда
			ДобавитьНовыеДокументыВМассив = Истина;
			МассивДокументов.Очистить();		
		КонецЕсли;
	КонецЕсли;
	
	Если ТабличнуюЧастьПриЗагрузкеПодбор = 1 Тогда
		ТЧНеИзменять = Истина;	
	КонецЕсли; 
	
	ДанныеПодбораВРазныеДокументы = Истина;
	
	Для каждого СтрокаОбщей Из ТЗОбщая Цикл
		Если СтрокаОбщей.УпаковочныйЛист <> "" Или ВидДокумента = "ДатаМобайл_УпаковочныйЛист" Тогда						
			//ШАПКА УПАКОВОЧНОГО ЛИСТА
			
			НомерУпакЛиста = СтрЗаменить(СтрокаОбщей.УпаковочныйЛист, "/////", "");
			Если Лев(СтрокаОбщей.УпаковочныйЛист, 3) = "UPL" Тогда 
				НомерУпакЛиста = Прав(НомерУпакЛиста, СтрДлина(НомерУпакЛиста) - 3);
			КонецЕсли;	
			
			ДокументУпакЛиста = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоНомеру(НомерУпакЛиста);	
			
			Если ДокументУпакЛиста.Пустая() Тогда
				
				Если ДанныеПодбораВРазныеДокументы Тогда
					ДокументУпаковочногоЛиста = Документы.ДатаМобайл_УпаковочныйЛист.СоздатьДокумент();
					ДокументУпаковочногоЛиста.Дата = ТекущаяДата();
					
					Если ЗначениеЗаполнено(Об.ИсходныйДокумент) Тогда
						ДокументУпаковочногоЛиста.Основание = Об.ИсходныйДокумент;
					Иначе
						ДокументУпаковочногоЛиста.Основание = Об.Ссылка;
					КонецЕсли;
					
					ДокументУпаковочногоЛиста.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(СтрокаОбщей.Пользователь, Ложь);
					ДокументУпаковочногоЛиста.ТСД = Об.ТСД;
					ДокументУпаковочногоЛиста.Код = НомерУпакЛиста;
					ДокументУпаковочногоЛиста.Записать();
					
					ДокументУпакЛиста = ДокументУпаковочногоЛиста.Ссылка;
					
					Если ВидДокумента = "ДатаМобайл_УпаковочныйЛист" И Не СоздаватьДокументыУпаковочныхЛистов Тогда
						ДанныеПодбораВРазныеДокументы = Ложь;						
					КонецЕсли; 					
				Иначе
					ДокументУпакЛиста = Док;
				КонецЕсли; 
				
				Если ИспользоватьТиповыеУпаковочныеЛисты Тогда
					ДокументУпаковочногоЛистаТиповой = Документы.УпаковочныйЛист.СоздатьДокумент();	
					ДокументУпаковочногоЛистаТиповой.Дата = ТекущаяДата();
					ДокументУпаковочногоЛистаТиповой.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
					ДокументУпаковочногоЛистаТиповой.Код = НомерУпакЛиста;
					Попытка ДокументУпаковочногоЛиста.Упаковал = ДокументУпаковочногоЛиста.Ответственный; Исключение КонецПопытки;
					Попытка ДокументУпаковочногоЛистаТиповой.СкладУпаковки = Об.Склад; Исключение КонецПопытки;
					
					Если ЗначениеЗаполнено(Об.ИсходныйДокумент) Тогда	
						Если Об.Шаблон.ВидДокумента = "РасходныйОрдерНаТовары" И ЗначениеЗаполнено(Об.ИсходныйДокумент) Тогда 
							Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
							Модуль_ПрефиксацияОбъектовКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
							РеквизитыОрдера = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Об.ИсходныйДокумент, "Получатель, Номер");
							Основание = НСтр("ru = '%Получатель% / Ордер %Номер%'");
							Основание = СтрЗаменить(Основание, "%Получатель%", РеквизитыОрдера.Получатель);
							Основание = СтрЗаменить(Основание, "%Номер%", Модуль_ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОрдера.Номер));	
							ДокументУпаковочногоЛистаТиповой.Основание =  Основание;
						Иначе
							ДокументУпаковочногоЛистаТиповой.Основание =  Об.ИсходныйДокумент;
						КонецЕсли;
					КонецЕсли;	
					
					ДокументУпаковочногоЛистаТиповой.Записать();	
					
					Попытка
						ДокументУпаковочногоЛиста.ТиповойУпаковочныйЛист = ДокументУпаковочногоЛистаТиповой.Ссылка;
						ДокументУпаковочногоЛиста.Записать();
					Исключение 
					КонецПопытки;					
				КонецЕсли;	
				
			КонецЕсли;
						
			ДокументУпакЛистаОбъект = ДокументУпакЛиста.ПолучитьОбъект();
			Док = ДокументУпакЛистаОбъект.Ссылка;
			КопияТЧ = ДокументУпакЛистаОбъект.Товары;	
			Если ТабличнуюЧастьПриЗагрузкеПодбор = 2 Тогда
				ДокументУпакЛистаОбъект.Товары.Очистить();
			ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда
				Для каждого СтрокаТЧКопии Из КопияТЧ Цикл
					СтрокаТЧКопии.Количество 			= 0;
					СтрокаТЧКопии.КоличествоУпаковок    = 0;
				КонецЦикла; 
			КонецЕсли; 
						
			//СТРОКИ УПАКОВОЧНОГО ЛИСТА
			
			ТЗ = Об.СобранныеДанныеПодбор.Выгрузить();
			ТЗ.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,УпаковочныйЛист,ШтрихКод,Пользователь, УпаковочныйЛистАтрибуты","Количество");
			СтруктураПоискаУпЛист = Новый Структура("УпаковочныйЛист", СтрокаОбщей.УпаковочныйЛист);			
			ДанныеУпакЛиста = ТЗ.НайтиСтроки(СтруктураПоискаУпЛист);
			
			Если ДанныеУпакЛиста.Количество() <> 0 Тогда
				Если МножествоДокументовКакЗадание Тогда
					ДокументУпакЛистаОбъект.Основание = Об.Ссылка;
				Иначе
					ДокументУпакЛистаОбъект.Основание = Об.ИсходныйДокумент;
				КонецЕсли;  
				
				ВесУпаковки = 0;
				ДлинаУпаковки = 0;
				ВысотаУпаковки = 0; 
				ШиринаУпаковки = 0;
				
				Для каждого СтрокаТЧ Из ДанныеУпакЛиста Цикл
					Если СтрокаТЧ.Количество = 0 Или ТЧНеИзменять Тогда
						Продолжить;
					КонецЕсли;
					
					лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия,Упаковка,Штрихкод", СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры, СтрокаТЧ.СерияСсылка, СтрокаТЧ.ЕдиницаИзмерения, СтрокаТЧ.ШтрихКод);
					СтрокиПоиска = КопияТЧ.НайтиСтроки(лСтруктураПоиска);
					Если СтрокиПоиска.Количество() = 0 Тогда					
						СтрокаТабличнойЧасти = ДокументУпакЛистаОбъект.Товары.Добавить();
						СтрокаТабличнойЧасти.Штрихкод = СтрокаТЧ.ШтрихКод;
						СтрокаТабличнойЧасти.Номенклатура = СтрокаТЧ.Номенклатура;
						СтрокаТабличнойЧасти.Характеристика = СтрокаТЧ.ХарактеристикаНоменклатуры;
						
						СтрокаТабличнойЧасти.Упаковка = СтрокаТЧ.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.Серия = СтрокаТЧ.СерияСсылка;
						СтрокаТабличнойЧасти.Коэффициент = ВернутьКоэффициент(СтрокаТЧ.Номенклатура, СтрокаТЧ.ЕдиницаИзмерения);
					Иначе	
						СтрокаТабличнойЧасти = СтрокиПоиска[0];
					КонецЕсли;	
					
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрокаТЧ.Количество;
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Коэффициент;
					
					//данные веса и объема:      
					СтруктураДанных = Обработки.ДатаМобайл_АРМДиспетчера.ПолучитьДанныеВесОбъемЕдИзм(СтрокаТабличнойЧасти.Номенклатура);
					СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.Количество * СтруктураДанных.Вес;
					СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.Количество * СтруктураДанных.Объем;   					
					
					Если ЗначениеЗаполнено(СтрокаТЧ.УпаковочныйЛистАтрибуты) Тогда
						СтруктураДанныхГабаритов = ПолучитьДанныеГабаритов(СтрокаТЧ.УпаковочныйЛистАтрибуты);
					КонецЕсли;  
					
					Если ШиринаУпаковки = 0 Тогда 
						ШиринаУпаковки = СтруктураДанныхГабаритов.Ширина;
					КонецЕсли;
					
					Если ВысотаУпаковки = 0 Тогда
						ВысотаУпаковки = СтруктураДанныхГабаритов.Высота;
					КонецЕсли; 
					
					Если ДлинаУпаковки = 0 Тогда 				
						ДлинаУпаковки = СтруктураДанныхГабаритов.Длина;
					КонецЕсли; 
					
					Если ВесУпаковки = 0 Тогда 				
						ВесУпаковки = СтруктураДанныхГабаритов.ВесУпаковки;
					КонецЕсли; 					
				КонецЦикла;       
				
				ДокументУпакЛистаОбъект.ВесУпаковки = ВесУпаковки;
				ДокументУпакЛистаОбъект.ШиринаУпаковки = ШиринаУпаковки;
				ДокументУпакЛистаОбъект.ВысотаУпаковки = ВысотаУпаковки; 
				ДокументУпакЛистаОбъект.ГлубинаУпаковки = ДлинаУпаковки;
				
				ДокументУпакЛистаОбъект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(СтрокаТЧ.Пользователь, Ложь);
				ДокументУпакЛистаОбъект.Записать();
				Попытка ДокументУпакЛистаОбъект.Записать(РежимЗаписиДокумента.Проведение); Исключение КонецПопытки;
								
				//ТИПОВЫЕ УПАК ЛИСТЫ
								
				Если ИспользоватьТиповыеУпаковочныеЛисты Тогда
					ДокументУпаковочногоЛистаТиповой = ДокументУпакЛистаОбъект.ТиповойУпаковочныйЛист.ПолучитьОбъект();
					
					//Всегда перезаполняем типовой упак лист актуальными данными из упак лиcта DataMobile
					ДокументУпаковочногоЛистаТиповой.Товары.Очистить();
					Для каждого СтрТЧ Из ДокументУпакЛистаОбъект.Товары Цикл
						СтрокаТабличнойЧастиТиповойЛист = ДокументУпаковочногоЛистаТиповой.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиТиповойЛист, СтрТЧ); 
					КонецЦикла;
					ДокументУпаковочногоЛистаТиповой.Упаковал = ДокументУпакЛистаОбъект.Ответственный;
										
					//при внесении в базу 1С результатов подбора и создании типовых упаковочных листов 1С 
					//необходимо заполнять вкладку «Комментарий» документа «Упаковочный лист» номерами всех участвующих в задании исходных документов, 
					//а также, если в качестве исходного документа используется «Расходный ордер на товары», данными поля «Получатель».
					Если МножествоДокументовКакЗадание Тогда	
						Для каждого ТекущийИсходныйДокумент Из МассивДокументов Цикл
							ТекущийКомментарий = "";
							Попытка
								Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения"); 
								Если ТипЗнч(ТекущийИсходныйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда	
									Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
									Модуль_ПрефиксацияОбъектовКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
									РеквизитыОрдера = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийИсходныйДокумент, "Получатель, Номер");
									ТекущийКомментарий = НСтр("ru = '%Получатель% / Ордер %Номер%'");
									ТекущийКомментарий = СтрЗаменить(ТекущийКомментарий, "%Получатель%", РеквизитыОрдера.Получатель);
									ТекущийКомментарий = СтрЗаменить(ТекущийКомментарий, "%Номер%", Модуль_ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОрдера.Номер));	
								Иначе
									ТекущийКомментарий = "" + ТекущийИсходныйДокумент;
								КонецЕсли;			
							Исключение
							КонецПопытки;
							ДокументУпаковочногоЛистаТиповой.Комментарий = ДокументУпаковочногоЛистаТиповой.Комментарий + Символы.ПС + ТекущийКомментарий;
						КонецЦикла;
					КонецЕсли;	
					
					ДокументУпаковочногоЛистаТиповой.Записать();
					УстановитьСерииВдокументе(ДокументУпаковочногоЛистаТиповой);
					ДокументУпаковочногоЛистаТиповой.Записать();
					Попытка ДокументУпаковочногоЛистаТиповой.Записать(РежимЗаписиДокумента.Проведение); Исключение КонецПопытки;
					
					Если ДобавитьНовыеДокументыВМассив Тогда
						МассивДокументов.Добавить(ДокументУпаковочногоЛистаТиповой.Ссылка);		
					КонецЕсли;					
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если ТЗОбщая.Количество() > 1 И ВидДокумента = "ДатаМобайл_УпаковочныйЛист" И ДанныеПодбораВРазныеДокументы Тогда
		Док = "";		
	КонецЕсли; 
	
КонецФункции  
Функция ПолучитьДанныеГабаритов(УпаковочныйЛистАтрибуты) Экспорт
	
	Модуль_СтроковыеФункцииКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СтроковыеФункцииКлиентСервер");
	
	СтруктураДанных = Новый Структура;
	МассивДанных = Модуль_СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УпаковочныйЛистАтрибуты, "/");
	СтруктураДанных = Новый Структура;
	Если МассивДанных[1] = "" Тогда
		СтруктураДанных.Вставить("Длина", 0);
	Иначе	
		СтруктураДанных.Вставить("Длина", Число(МассивДанных[1]));
	КонецЕсли;	
	Если МассивДанных[2] = "" Тогда
		СтруктураДанных.Вставить("Ширина", 0);
	Иначе	
		СтруктураДанных.Вставить("Ширина", Число(МассивДанных[2]));
	КонецЕсли;	
	Если МассивДанных[3] = "" Тогда
		СтруктураДанных.Вставить("Высота", 0);
	Иначе	
		СтруктураДанных.Вставить("Высота", Число(МассивДанных[3]));
	КонецЕсли;
	Если МассивДанных[4] = "" Тогда
		СтруктураДанных.Вставить("ВесУпаковки", 0);
	Иначе	
		СтруктураДанных.Вставить("ВесУпаковки", Число(МассивДанных[4]));
	КонецЕсли;	
	
	Возврат СтруктураДанных;
	
КонецФункции 
Функция ПолучитьДанныеВесОбъемЕдИзм(НоменклатураСсылка) Экспорт
	
	Если НоменклатураСсылка.ВесИспользовать Тогда
		Если НоменклатураСсылка.ВесЗнаменатель = 0 Тогда
			Вес = 0;
		Иначе
			Вес = НоменклатураСсылка.ВесЧислитель / НоменклатураСсылка.ВесЗнаменатель;	
		КонецЕсли;	
	Иначе     
		Вес = 0;
	КонецЕсли;
	
	Если НоменклатураСсылка.ОбъемИспользовать Тогда
		Если НоменклатураСсылка.ОбъемЗнаменатель = 0 Тогда
			Объем = 0;
		Иначе
			Объем = НоменклатураСсылка.ОбъемЧислитель / НоменклатураСсылка.ОбъемЗнаменатель;	
		КонецЕсли;		
	Иначе     
		Объем = 0;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Вес", Вес);
	СтруктураОтвета.Вставить("Объем", Объем);
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ЗаполнитьПересчетТоваров(ПараметрыДокумента, Док, Шаблон, СписокТоваров, СписокХарактеристик, СписокЯчеек)
	
	ТолькоСобранныеТовары = Шаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор;
	ТолькоСобранныеЯчейки = Шаблон.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор;
	
	ПоЯчейкам = Шаблон.ИспользованиеЯчеекПодбор > 0;
	
	Если ПоЯчейкам Тогда
		
		ПараметрыДокумента.Вставить("ПоЯчейкам", Истина);
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыВЯчейках.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейках.Характеристика КАК Характеристика,
		|	ТоварыВЯчейках.Упаковка КАК Упаковка,
		|	ТоварыВЯчейках.Ячейка КАК Ячейка,
		|	ЕСТЬNULL(ТоварыВЯчейках.ВНаличииОстаток,0) КАК КоличествоУпаковок,
		|	ЕСТЬNULL(ТоварыВЯчейках.ВНаличииОстаток,0) * 
		|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(ТоварыВЯчейках.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(ТоварыВЯчейках.Упаковка.Числитель,1) КОНЕЦ/ 
		|	         ВЫБОР КОГДА ЕСТЬNULL(ТоварыВЯчейках.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(ТоварыВЯчейках.Упаковка.Знаменатель,1) КОНЕЦ, 1) КАК Количество,
		|	ТоварыВЯчейках.Серия,
		|	ВЫБОР
		|		КОГДА НЕ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
		|				И СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|			ТОГДА 4
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтатусУказанияСерий
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(&ДатаОстатков,
		|				((Номенклатура В(&СписокТоваров) И Характеристика В(&СписокХарактеристик)) ИЛИ &ВсеТовары)
		|				И (Ячейка В(&СписокЯчеек) ИЛИ &ВсеЯчейки)
		|				И (Ячейка.Владелец = &Склад ИЛИ &ВсеСклады)
		|				И (Ячейка.Помещение = &Помещение ИЛИ &ВсеПомещения)) КАК ТоварыВЯчейках
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК СкладыПолитикиУчетаСерий
		|		ПО ТоварыВЯчейках.Номенклатура.ВидНоменклатуры = СкладыПолитикиУчетаСерий.Ссылка
		|		И (ТоварыВЯчейках.Ячейка.Владелец = СкладыПолитикиУчетаСерий.Склад)
		|ГДЕ
		|   ЕСТЬNULL(ТоварыВЯчейках.ВНаличииОстаток,0)  <> 0");
		
		Запрос.УстановитьПараметр("ВсеЯчейки", Не ТолькоСобранныеЯчейки);		
		Запрос.УстановитьПараметр("СписокЯчеек", СписокЯчеек);
		Запрос.УстановитьПараметр("ВсеСклады", Не ЗначениеЗаполнено(Док.Склад));
		Запрос.УстановитьПараметр("ВсеПомещения", Не ЗначениеЗаполнено(Док.Помещение)); 		
		
	Иначе
		
		ПараметрыДокумента.Вставить("ПоЯчейкам", Ложь);
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) КАК Количество,
		|	ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) КАК КоличествоУпаковок,
		|	ЕСТЬNULL(ТоварыНаСкладах.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.СтатусУказанияСерий
		|ИЗ
		|	(ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Номенклатура,
		|		ЕСТЬNULL(СпрХарактеристики.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|		ВЫБОР
		|			КОГДА НЕ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
		|					И СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|				ТОГДА 4
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СтатусУказанияСерий
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|			ПО (СпрХарактеристики.Владелец = ВЫБОР
		|					КОГДА СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|						ТОГДА СпрНоменклатура.ВидНоменклатуры
		|					КОГДА СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|						ТОГДА СпрНоменклатура.Ссылка
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК СкладыПолитикиУчетаСерий
		|			ПО СпрНоменклатура.ВидНоменклатуры = СкладыПолитикиУчетаСерий.Ссылка
		|				И (СкладыПолитикиУчетаСерий.Склад = &Склад)
		|	ГДЕ
		|		НЕ СпрНоменклатура.ПометкаУдаления
		|		И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		И НЕ СпрНоменклатура.ЭтоГруппа
		|		И НЕ ЕСТЬNULL(СпрХарактеристики.ПометкаУдаления, ЛОЖЬ)) КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				&ДатаОстатков,
		|				Склад = &Склад
		|					И Помещение = &Помещение) КАК ТоварыНаСкладах
		|		ПО Товары.Номенклатура = ТоварыНаСкладах.Номенклатура
		|			И Товары.Характеристика = ТоварыНаСкладах.Характеристика
		|ГДЕ
		|   ((Товары.Номенклатура В(&СписокТоваров) И Товары.Характеристика В(&СписокХарактеристик)) ИЛИ &ВсеТовары)
		|	И ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) <> 0");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВсеТовары", Не ТолькоСобранныеТовары);		
	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
	Запрос.УстановитьПараметр("СписокХарактеристик", СписокХарактеристик);
	
	Запрос.УстановитьПараметр("ДатаОстатков", ТекущаяДата());
	Запрос.УстановитьПараметр("Склад", Док.Склад);
	Запрос.УстановитьПараметр("Помещение", Док.Помещение); 
	
	УчетныеДанные = Запрос.Выполнить().Выгрузить();
	
	Если ПараметрыДокумента.ТабличнуюЧастьПриЗагрузкеПодбор = 1 Или ПараметрыДокумента.ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда
		Если Док[ПараметрыДокумента.ИмяТЧПодбор].Количество() = 0 Тогда
			Док.Товары.Загрузить(УчетныеДанные);	
		КонецЕсли;	
	Иначе
		Док.Товары.Загрузить(УчетныеДанные);
	КонецЕсли;
	
	Возврат УчетныеДанные;
	
КонецФункции	

Процедура ВыполнитьПроверкуПоТипуДокумента(ПараметрыДокумента)
	
	Если ТипЗнч(ПараметрыДокумента.ИсходныйДокумент) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
		И ТипЗнч(ПараметрыДокумента.Док) = Тип("ДокументОбъект.ОтборРазмещениеТоваров") Тогда
		
		ОбъектИсходныйДокумент = ПараметрыДокумента.ИсходныйДокумент.ПолучитьОбъект();
		ОбъектИсходныйДокумент.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
		ОбъектИсходныйДокумент.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры
Функция ПолучитьНазначениеЗаполненоВТЧ(ДокТЧ)
	
	Для каждого Строка Из ДокТЧ Цикл
		
		Если Строка.Назначение <> Справочники.Назначения.ПустаяСсылка() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ()
Функция ДополнитьНазначениемТабТСД(ТабТСД, ИсходныеДанныеПодбор)
	
	НоваяТабТСД = ТабТСД.СкопироватьКолонки();
	НоваяТабТСД.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	
	НоваяИсходныеДанныеПодбор = ИсходныеДанныеПодбор.СкопироватьКолонки();
	
	// 1. Получим первоначальную таблицу с назначениями 
	ТЗТаблицаПриход = ИсходныеДанныеПодбор;
	
	// 2. Получим новую таблицу подбора
	ТЗТаблицаРасход = ТабТСД;
	
	// 3. Распределим таблицу назначений по новой таблице по упаковкам
	Для каждого СтрПриход Из ТЗТаблицаПриход Цикл
		КоэффициентУпаковкиСписать = ?(СтрПриход.Упаковка.Числитель = 0, 1, СтрПриход.Упаковка.Числитель);
		НужноСписать = СтрПриход.КоличествоУпаковок;
		
		Если НужноСписать < 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		//поиск с учетом упаковок
		МассивОстаток = ТЗТаблицаРасход.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения", СтрПриход.Номенклатура, СтрПриход.Характеристика, СтрПриход.Упаковка));
		Для каждого СтрОстаток Из МассивОстаток Цикл
			МожноСписать = СтрОстаток.Количество;
			
			Если МожноСписать < 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НС = НоваяТабТСД.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрОстаток,, "Количество");
			НС.Назначение = СтрПриход.Назначение;
			КоличествоСписать = Мин(НужноСписать, МожноСписать);
			НС.Количество = КоличествоСписать;
			НужноСписать = НужноСписать - КоличествоСписать;
			СтрОстаток.Количество = СтрОстаток.Количество - НС.Количество;
			Если СтрОстаток.Количество = 0 Тогда
				ТЗТаблицаРасход.Удалить(СтрОстаток);	        	        	        	        
			КонецЕсли;
			Если НужноСписать = 0 Тогда         	        	        
				Прервать;	        	        	        	        
			КонецЕсли;	
		КонецЦикла;
		
		Если НужноСписать > 0 Тогда		
			НС = НоваяИсходныеДанныеПодбор.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрПриход,, "КоличествоУпаковок,Количество");
			НС.КоличествоУпаковок = НужноСписать;
			НС.Количество = НужноСписать * КоэффициентУпаковкиСписать;
		КонецЕсли;	
	КонецЦикла;
	
	// 4. Распределим таблицу назначений по новой таблице без упаковок
	Для каждого СтрПриход Из НоваяИсходныеДанныеПодбор Цикл	
		КоэффициентУпаковкиСписать = ?(СтрПриход.Упаковка.Числитель = 0, 1, СтрПриход.Упаковка.Числитель);
		НужноСписатьБазовые = СтрПриход.КоличествоУпаковок * КоэффициентУпаковкиСписать;
		
		Если НужноСписатьБазовые < 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		//поиск без учета упаковок
		МассивОстаток = ТЗТаблицаРасход.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры", СтрПриход.Номенклатура, СтрПриход.Характеристика));
		Для каждого СтрОстаток Из МассивОстаток Цикл
			КоэффициентУпаковкиОстаток = ?(СтрОстаток.ЕдиницаИзмерения.Числитель = 0, 1, СтрОстаток.ЕдиницаИзмерения.Числитель);
			МожноСписатьБазовые = СтрОстаток.Количество * КоэффициентУпаковкиОстаток;
			
			Если МожноСписатьБазовые < 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НС = НоваяТабТСД.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрОстаток,, "Количество");
			НС.Назначение = СтрПриход.Назначение;					
			КоличествоСписатьБазовые = Мин(НужноСписатьБазовые, МожноСписатьБазовые);
			НС.Количество = КоличествоСписатьБазовые / КоэффициентУпаковкиОстаток;	
			НужноСписатьБазовые = НужноСписатьБазовые - КоличествоСписатьБазовые;
			СтрОстаток.Количество = СтрОстаток.Количество - НС.Количество;
			Если СтрОстаток.Количество = 0 Тогда
				ТЗТаблицаРасход.Удалить(СтрОстаток);	        	        	        	        
			КонецЕсли;
			Если НужноСписатьБазовые = 0 Тогда         	        	        
				Прервать;	        	        	        	        
			КонецЕсли;	
		КонецЦикла;		
	КонецЦикла;
	
	// 5. Добавим оставшиеся строки подбора
	Для каждого СтрокаОстаток Из ТЗТаблицаРасход Цикл
		Если СтрокаОстаток.Количество > 0 Тогда
			НС = НоваяТабТСД.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаОстаток);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат	НоваяТабТСД;
	
КонецФункции // ()
Функция ПолучитьКоличествоМестВУпакЛисте(УпаковочныйЛистАтрибуты)
	
	Разделитель = "/";
	Строки = СтрЗаменить(УпаковочныйЛистАтрибуты, Разделитель, Символы.ПС);
	
	Если СтрПолучитьСтроку(Строки, 6) = "" Тогда
		Возврат 0;
	Иначе
		Возврат Число(СтрПолучитьСтроку(Строки, 6));
	КонецЕсли;
	
КонецФункции // ()
Функция ПолучитьСтруктуруРеквизитовШаблона() Экспорт
	
	ЗапрашиваемыеРеквизиты = Новый Структура;
	ЗапрашиваемыеРеквизиты.Вставить("ВидДокумента");
	ЗапрашиваемыеРеквизиты.Вставить("ВидДокументаНового");
	ЗапрашиваемыеРеквизиты.Вставить("ИзменятьТипОбеспечения");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользоватьМаркировку");
	ЗапрашиваемыеРеквизиты.Вставить("СоздаватьДокументИСМП");
	ЗапрашиваемыеРеквизиты.Вставить("МаркировкаПроверкаБезСертификатаИС");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользованиеУпаковочныхЛистовПодбор");
	ЗапрашиваемыеРеквизиты.Вставить("ПроводитьРоботом");
	ЗапрашиваемыеРеквизиты.Вставить("ТабличнуюЧастьПриЗагрузкеПодбор");
	ЗапрашиваемыеРеквизиты.Вставить("ГрупповаяРабота");
	ЗапрашиваемыеРеквизиты.Вставить("БыстроеСканирование");
	ЗапрашиваемыеРеквизиты.Вставить("ПользовательДляАвтозаполнения");
	ЗапрашиваемыеРеквизиты.Вставить("ИмяТабличнойЧастиПодбор");
	ЗапрашиваемыеРеквизиты.Вставить("ИмяТабличнойЧастиПриемка");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользоватьПодбор");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользоватьПриемку");
	ЗапрашиваемыеРеквизиты.Вставить("МаркировкаСоздаватьСправочникКМЕслиНеНайден");
	ЗапрашиваемыеРеквизиты.Вставить("МаркировкаПривязыватьGTINКакШтрихкод");
	ЗапрашиваемыеРеквизиты.Вставить("МаркировкаЗавершатьПодборКМВДокументе");
	ЗапрашиваемыеРеквизиты.Вставить("РаспределениеТоваров");
	ЗапрашиваемыеРеквизиты.Вставить("Егаис");
	ЗапрашиваемыеРеквизиты.Вставить("БыстраяПриемка");
	ЗапрашиваемыеРеквизиты.Вставить("БыстраяОтгрузка");
	ЗапрашиваемыеРеквизиты.Вставить("ПроверкаОтборРазмещение");
	ЗапрашиваемыеРеквизиты.Вставить("ТабличнуюЧастьПриЗагрузкеПриемка");
	ЗапрашиваемыеРеквизиты.Вставить("ИмяТабличнойЧастиНовойПодбор");
	ЗапрашиваемыеРеквизиты.Вставить("ИмяТабличнойЧастиНовойПриемка");
	ЗапрашиваемыеРеквизиты.Вставить("ЗагружатьКомментарий");
	ЗапрашиваемыеРеквизиты.Вставить("БыстроеПеремещение");
	ЗапрашиваемыеРеквизиты.Вставить("АвтоматическийКомментарийИспользовать");
	ЗапрашиваемыеРеквизиты.Вставить("АвтоматическийКомментарий");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользованиеЯчеекПодбор");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользованиеСерийниковПодбор");
	ЗапрашиваемыеРеквизиты.Вставить("СерииВОтдельнойТЧ");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользоватьТиповыеУпаковочныеЛисты");
	ЗапрашиваемыеРеквизиты.Вставить("БазовыеЕдиницыПриЗагрузке");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользованиеЯчеекПриемка");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользованиеСерийниковПриемка");	
	ЗапрашиваемыеРеквизиты.Вставить("ОткрыватьДокументыПослеЗагрузкиБезЗаписи");
	ЗапрашиваемыеРеквизиты.Вставить("ОбрабатыватьРоботом");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользоватьГрупповойДокумент");
	ЗапрашиваемыеРеквизиты.Вставить("ИспользоватьДопФормы");
	ЗапрашиваемыеРеквизиты.Вставить("МаркировкаЗапретитьПодборНемаркируемыхТоваров");
	ЗапрашиваемыеРеквизиты.Вставить("МаркировкаПерезаписатьХешУпаковок");
	ЗапрашиваемыеРеквизиты.Вставить("МаркировкаЗаписыватьПолныйКМ");
	
	Возврат ЗапрашиваемыеРеквизиты;						
	
КонецФункции

//ШАПКА ДОКУМЕНТА

Процедура ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент)
	
	Попытка
		Док = Об.ИсходныйДокумент.ПолучитьОбъект();
	Исключение
		Док = Документы[Шаблон.ВидДокумента].СоздатьДокумент();
		Попытка Док.Заполнить(Неопределено); Исключение КонецПопытки;
		Док.Дата = ТекущаяДата();
		ЭтоНовыйДокумент = Истина;
		
		ПараметрыДокумента.Вставить("Док", Док);
		ПараметрыДокумента.Вставить("ИсходныйДокумент", Об.ИсходныйДокумент);
		ЗаполнитьШапку(ПараметрыДокумента, ЭтоНовыйДокумент);
	КонецПопытки;	
	
	ПараметрыДокумента.Вставить("Док", Док);
	
КонецПроцедуры

Процедура ПолучитьСоздатьНовыйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент)
	
	ВидДокумента = Шаблон.ВидДокумента;
	ВидДокументаНового = Шаблон.ВидДокументаНового;
	
	НовыйДокументВВидеТабличнойЧасти = Справочники.ДатаМобайл_ШаблоныДокументов.НовыйДокументКакТабличнаяЧасть(Шаблон);
	
	Попытка
		Если НовыйДокументВВидеТабличнойЧасти Тогда
			Док = Об.НовыеДокументы[0].НовыйДокумент.ПолучитьОбъект();
		Иначе
			Док = Об.НовыйДокумент.ПолучитьОбъект();
		КонецЕсли;
	Исключение
		Док = Документы[Шаблон.ВидДокументаНового].СоздатьДокумент();
		Попытка Док.Заполнить(Об.ИсходныйДокумент); Исключение КонецПопытки;
		
		// В документе поступления товаров на склад, хозяйственная операция имеет другое название, его надо переполучить
		Попытка
			Если Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" И Шаблон.ВидДокументаНового = "ПоступлениеТоваровНаСклад" Тогда
				Модуль_ЗакупкиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ЗакупкиСервер");
				ПарыОперацийРаздельнойЗакупки = Модуль_ЗакупкиСервер.ПарыОперацийРаздельнойЗакупки(Истина);
				ХозяйственнаяОперацияПриемкиФактическоеПоступление = ПарыОперацийРаздельнойЗакупки.Получить(Об.ИсходныйДокумент.ХозяйственнаяОперация);
				ХозяйственнаяОперацияПриемкиФактическоеПоступление = ?(Не ЗначениеЗаполнено(ХозяйственнаяОперацияПриемкиФактическоеПоступление),
				Об.ИсходныйДокумент.ХозяйственнаяОперация,
				ХозяйственнаяОперацияПриемкиФактическоеПоступление);
				
				Док.ХозяйственнаяОперация = ХозяйственнаяОперацияПриемкиФактическоеПоступление;
			КонецЕсли;
		Исключение 
		КонецПопытки;
		
		Попытка
			Если Шаблон.ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента" И Шаблон.ВидДокументаНового = "ПриходныйОрдерНаТовары" Тогда
				Модуль_СкладыКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СкладыКлиентСервер");
				Док.Распоряжение 			= Об.ИсходныйДокумент;
				Док.Отправитель  			= Об.ИсходныйДокумент.Партнер;
				Док.ХозяйственнаяОперация 	= Об.ИсходныйДокумент.ХозяйственнаяОперация;
				
				Док.СкладскаяОперация = Модуль_СкладыКлиентСервер.СкладскаяОперацияПриемкиПоХозяйственнойОперации(Док.ХозяйственнаяОперация);
			КонецЕсли;
		Исключение 
		КонецПопытки;
		
		Попытка
			Если ВидДокумента = "ЗаказКлиента" И ВидДокументаНового = "РасходныйОрдерНаТовары" Тогда
				Модуль_СкладыСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СкладыСервер");
				СтруктураПараметровСозданияРасходныхОрдеров = Модуль_СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
				СтруктураПараметровСозданияРасходныхОрдеров.Склад = Об.ИсходныйДокумент.Склад;
				СтруктураПараметровСозданияРасходныхОрдеров.Помещение = Неопределено;	
				СтруктураПараметровСозданияРасходныхОрдеров.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ПустаяСсылка();
				СтруктураПараметровСозданияРасходныхОрдеров.ЗаданиеНаПеревозку = Неопределено;
				СтруктураПараметровСозданияРасходныхОрдеров.Получатель = Об.ИсходныйДокумент.Партнер;
				СтруктураПараметровСозданияРасходныхОрдеров.РаспоряженияНаОтгрузку.Добавить(Об.ИсходныйДокумент);
				СтруктураПоРасходнику = Модуль_СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров);
				Док = СтруктураПоРасходнику.ОформленныеОрдера[0].РасходныйОрдер.ПолучитьОбъект();
			КонецЕсли;
		Исключение 
		КонецПопытки;
		
		Попытка
			Если Док.Договор.Пустая() Тогда
				Док.Договор = Об.ИсходныйДокумент.Договор;
			КонецЕсли;
		Исключение 
		КонецПопытки;
		
		Док.Дата = ТекущаяДата();
		ЭтоНовыйДокумент = Истина;	
	КонецПопытки;
	
	ПараметрыДокумента.Вставить("Док", Док);
	
КонецПроцедуры

Процедура ЗаполнитьШапку(ПараметрыДокумента, ЭтоНовыйДокумент) 
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");	
	
	Шаблон 				= ПараметрыДокумента.Об.Шаблон;
	Док					= ПараметрыДокумента.Док;
	ИмяТЧ 				= Шаблон.ИмяТабличнойЧастиПодбор;
	ИсходныйДокумент 	= ПараметрыДокумента.ИсходныйДокумент;
	
	ЗапретитьРучноеИзменениеКлиента = Шаблон.ЗапретитьРучноеИзменениеКлиента;
	
	Если Док.Дата = '00010101' Тогда
		Док.Дата = ТекущаяДата();	
	КонецЕсли;
	
	Клиент          = ПараметрыДокумента.Об.Клиент;
	ТСД             = ПараметрыДокумента.Об.ТСД; 
	Склад           = ПараметрыДокумента.Об.Склад;
	СкладПолучатель = ПараметрыДокумента.Об.СкладПолучатель;
	Организация     = ПараметрыДокумента.Об.Организация;
	
	МетаданныеДок       = Док.Метаданные();
	ДМ_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	
	Если ДМ_ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДок) Тогда
		Если Не ЗначениеЗаполнено(Док.Организация) И ЗначениеЗаполнено(Организация) Тогда
			Док.Организация = Организация;
		КонецЕсли;
	КонецЕсли; 
	
	// для документа Перемещение товаров
	Если ДМ_ОбщегоНазначения.ЕстьРеквизитОбъекта("ОрганизацияПолучатель", МетаданныеДок) Тогда
		Если Не ЗначениеЗаполнено(Док.ОрганизацияПолучатель) И ЗначениеЗаполнено(Организация) Тогда
			Док.ОрганизацияПолучатель = Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если Шаблон.ВидДокументаНового = "РеализацияТоваровУслуг" И Шаблон.ВидДокумента = "ЗаказКлиента" Тогда
		Док.АдресДоставки = ПараметрыДокумента.Об.ИсходныйДокумент.АдресДоставки;
	КонецЕсли;
	
	Если Шаблон.ВидДокументаНового = "ПриходныйОрдерНаТовары" И Шаблон.ВидДокумента = "ПроизводствоБезЗаказа" Тогда
		
		Док.Распоряжение = ИсходныйДокумент;
		СтруктураПоИсходномуДокументу = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент, "Подразделение, Номер, Дата");
		
		Док.Отправитель 			= СтруктураПоИсходномуДокументу.Подразделение;
		Модуль_ПрефиксацияОбъектовКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
		Док.НомерВходящегоДокумента = Модуль_ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтруктураПоИсходномуДокументу.Номер);
		Док.ДатаВходящегоДокумента  = СтруктураПоИсходномуДокументу.Дата;
		
		Если ИсходныйДокумент[ИмяТЧ].Количество() Тогда
			Склад = ИсходныйДокумент[ИмяТЧ][0].Получатель;		
		КонецЕсли; 
		
		Попытка Док.Склад = Склад; Исключение КонецПопытки;
		
		ДанныеЗаполнения = ПолучитьДанныеЗаполненияПоДокументуПроизводствоБезЗаказа(Док);
		
		Если ДанныеЗаполнения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Док, ДанныеЗаполнения);
			Модуль_СкладыКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СкладыКлиентСервер");
			Док.СкладскаяОперация = Модуль_СкладыКлиентСервер.СкладскаяОперацияПриемкиПоХозяйственнойОперации(Док.ХозяйственнаяОперация);
		КонецЕсли; 
		
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(Клиент) И Не ЗапретитьРучноеИзменениеКлиента Тогда 
			Если Клиент <> Док.Партнер Тогда
				Док.Партнер = Клиент;
				Модуль_ПартнерыИКонтрагенты = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПартнерыИКонтрагенты");
				
				Модуль_ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Док.Партнер, Док.Контрагент, Истина);
				Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Или ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					Док.ЗаполнитьУсловияПродажПоУмолчанию();
				ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Или ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					Док.ЗаполнитьУсловияЗакупокПоУмолчанию();
					Модуль_ЗакупкиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ЗакупкиСервер");
					Док.ВариантПриемкиТоваров = Модуль_ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, Док.Договор);
				ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
					Док.ЗаполнитьУсловияПродажПоУмолчанию();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;  
	
	Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Или (ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ДатаМобайл_ОбщийМодуль.ЭтоКонфигурацияДляУзбекистана()) Тогда
		Если Не ЗначениеЗаполнено(Док.ХозяйственнаяОперация) Тогда
			Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		КонецЕсли;
	КонецЕсли;	
	
	СкладЗаписан = Ложь;
	Если ЗначениеЗаполнено(Склад) Тогда
		
		Если Не СкладЗаписан Тогда
			Попытка
				Если Шаблон.ВидДокументаНового = "ПриходныйОрдерНаТовары" И (Шаблон.ВидДокумента = "ПеремещениеТоваров" Или Шаблон.ВидДокумента = "ЗаказНаПеремещение") Тогда
					Если ЗначениеЗаполнено(СкладПолучатель) Тогда
						Док.Склад = СкладПолучатель;
					КонецЕсли;	
					СкладЗаписан = Истина;	
				КонецЕсли;
			Исключение
			КонецПопытки;			
		КонецЕсли;
		
		Если Не СкладЗаписан Тогда
			Попытка
				Если Не ЗначениеЗаполнено(Док.Склад) Или Док.Склад <> Склад Тогда
					Док.Склад = Склад;
					СкладЗаписан = Истина;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если Не СкладЗаписан Тогда
			Попытка
				Если Не ЗначениеЗаполнено(Док.СкладОтправитель) Или Док.СкладОтправитель <> Склад Тогда
					Док.СкладОтправитель = Склад;
					СкладЗаписан = Истина;
				КонецЕсли;	
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если Не СкладЗаписан Тогда
			Попытка
				Если Не ЗначениеЗаполнено(Док.ТорговыйОбъект) Или Док.ТорговыйОбъект <> Склад Тогда
					Док.ТорговыйОбъект = Склад;
					СкладЗаписан = Истина;
				КонецЕсли;	
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладПолучатель) Тогда
		Попытка
			Если Не ЗначениеЗаполнено(Док.СкладПолучатель) Или Док.СкладПолучатель <> СкладПолучатель Тогда
				Док.СкладПолучатель = СкладПолучатель;
			КонецЕсли;	
		Исключение
		КонецПопытки;			
	КонецЕсли;
			
	Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда 
		Модуль_РозничныеПродажи = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("РозничныеПродажи");
		
		СтруктураСостояниеКассовойСмены = Модуль_РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Док.КассаККМ);
		Если Док.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена Тогда
			Док.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
			Попытка
				Док.НомерЧекаККМ = НомерПоследнегоЧека() + 1;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ДатаМобайл_УпаковочныйЛист") Тогда
		Док.ТСД = ТСД;
	КонецЕсли;
	
	Попытка
		Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Или
			ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов") Тогда
			Если ЗначениеЗаполнено(Клиент) Тогда
				Если ТипЗнч(Клиент) = Тип("СправочникСсылка.Склады") Тогда
					Попытка Док.СкладПолучатель = Клиент; Исключение КонецПопытки;
					Попытка Док.Получатель = Клиент; Исключение КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СкладПолучатель) Тогда
				Если ТипЗнч(Клиент) = Тип("СправочникСсылка.Склады") Тогда
					Попытка Док.СкладПолучатель = СкладПолучатель; Исключение КонецПопытки;
					Попытка Док.Получатель = СкладПолучатель; Исключение КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если ЗначениеЗаполнено(Клиент) И СокрЛП(Шаблон.ВидДокументаНового) = "" Тогда
			Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
				Если Клиент <> Док.Отправитель Тогда
					Док.Отправитель = Клиент;
					Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
					Док.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
					Док.Распоряжение = ПолучитьРаспоряжениеПриходногоОрдера(Док);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если Шаблон.ВидДокумента = "СписаниеНедостачТоваров" Тогда
			
			Если ЗначениеЗаполнено(Док.Склад) Тогда
				
				Док.ИсточникИнформацииОЦенахДляПечати = Справочники.Склады.ИсточникИнформацииОЦенахДляПечати(Док.Склад);
				
				Если Док.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен Тогда
					Док.ВидЦены = Справочники.Склады.УчетныйВидЦены(Док.Склад);
				ИначеЕсли Док.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости Тогда
					Док.ВидЦены = Неопределено;
				КонецЕсли;
				
			КонецЕсли; 	
			
			СтруктураРеквизитов = Новый Структура;
			
			Для каждого Реквизит Из МетаданныеДок.Реквизиты Цикл
				СтруктураРеквизитов.Вставить(Реквизит.Имя, Док[Реквизит.Имя]);	
			КонецЦикла; 
			
			Если ЗначениеЗаполнено(Док.СтатьяРасходов) Тогда
				
				Модуль_ДоходыИРасходыСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ДоходыИРасходыСервер");
				
				Если ТипЗнч(Док.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
					
					Модуль_ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(
					СтруктураРеквизитов,
					Док.СтатьяРасходов,
					Док.АналитикаАктивовПассивов);
					
					Док.АналитикаРасходов = Неопределено;
					АналитикаРасходовОбязательна = Ложь;
					АналитикаРасходовЗаказРеализация = Ложь;
					
				Иначе
					
					Модуль_ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(
					СтруктураРеквизитов,
					Док.СтатьяРасходов,
					Док.АналитикаРасходов);
					
					АналитикаРасходовОбязательна = 
					ЗначениеЗаполнено(Док.СтатьяРасходов)
					И Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док.СтатьяРасходов, "КонтролироватьЗаполнениеАналитики");
					
					АналитикаРасходовЗаказРеализация = 
					ЗначениеЗаполнено(Док.СтатьяРасходов)
					И Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док.СтатьяРасходов, "АналитикаРасходовЗаказРеализация");
					
					Док.АналитикаАктивовПассивов = Неопределено;
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;		
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

Процедура ЗаполнитьНаОсновании(ПараметрыДокумента)
	
	Док = ПараметрыДокумента.Док;
	ИсходныйДокумент = ПараметрыДокумента.ИсходныйДокумент;
	Склад = ПараметрыДокумента.Об.Склад;
	Контрагент = ПараметрыДокумента.Об.Клиент;
	Организация = ПараметрыДокумента.Организация;
	Помещение = ПараметрыДокумента.Об.Помещение;
	МетаданныеДока = Док.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	ИсходныйДокументИмя = ИсходныйДокумент.Метаданные().Имя;
	
	Если ИмяДока = "ПриходныйОрдерНаТовары" Тогда 
		
		Если (ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказПоставщику") Или ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")) Тогда
			
			ДокументПриходныйОрдер = Док;
			ДокументПриходныйОрдер.Дата = ТекущаяДата();
			ДокументПриходныйОрдер.Склад = Склад;
			ДокументПриходныйОрдер.Отправитель = Контрагент;		
			ДокументПриходныйОрдер.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(ДокументПриходныйОрдер.Склад, ДокументПриходныйОрдер.Помещение, ДокументПриходныйОрдер.ЗонаПриемки);
			ДокументПриходныйОрдер.Распоряжение = ИсходныйДокумент;
			ДокументПриходныйОрдер.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
			
			Попытка ДокументПриходныйОрдер.ХозяйственнаяОперация = ИсходныйДокумент.ХозяйственнаяОперация; Исключение КонецПопытки;
			
			Попытка
				Если ДокументПриходныйОрдер.ХозяйственнаяОперация.Пустая() Тогда
					ДокументПриходныйОрдер.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если ДокументПриходныйОрдер.СкладскаяОперация.Пустая() Тогда
					ДокументПриходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			ДокументПриходныйОрдер.НомерВходящегоДокумента = ИсходныйДокумент.Номер;
			ДокументПриходныйОрдер.ДатаВходящегоДокумента = ИсходныйДокумент.Дата;
			
		ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			ДокументПриходныйОрдер = Док;
			ДокументПриходныйОрдер.Дата = ТекущаяДата();
			ДокументПриходныйОрдер.Распоряжение = ИсходныйДокумент;
			ДокументПриходныйОрдер.Отправитель = Контрагент;
			ДокументПриходныйОрдер.НомерВходящегоДокумента = ИсходныйДокумент.Номер;
			ДокументПриходныйОрдер.ДатаВходящегоДокумента = ИсходныйДокумент.Дата;
			
		ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.СборкаТоваров") Или ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
			ДокументПриходныйОрдер = Док;
			ДокументПриходныйОрдер.Дата = ТекущаяДата();
			ДокументПриходныйОрдер.Распоряжение = ИсходныйДокумент;
			ДокументПриходныйОрдер.Отправитель = Склад;
			ДокументПриходныйОрдер.НомерВходящегоДокумента = ИсходныйДокумент.Номер;
			ДокументПриходныйОрдер.ДатаВходящегоДокумента = ИсходныйДокумент.Дата;
			
		ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Или ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			
			ДокументПриходныйОрдер = Док;
			ДокументПриходныйОрдер.Дата = ТекущаяДата();
			
			Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда	
				ДокументПриходныйОрдер.Распоряжение = ИсходныйДокумент;
			Иначе	
				ДокументПриходныйОрдер.Распоряжение = ИсходныйДокумент;
			КонецЕсли;
			
			ДокументПриходныйОрдер.Отправитель = ИсходныйДокумент.СкладОтправитель;
			ДокументПриходныйОрдер.Склад = ИсходныйДокумент.СкладПолучатель;
			ДокументПриходныйОрдер.НомерВходящегоДокумента = ИсходныйДокумент.Номер;
			ДокументПриходныйОрдер.ДатаВходящегоДокумента = ИсходныйДокумент.Дата;			
		КонецЕсли;
				
		//ERP 
		Попытка
			Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов") Тогда
				
				ДокументПриходныйОрдер = Док;
				ДокументПриходныйОрдер.Дата = ТекущаяДата();
				
				ДокументПриходныйОрдер.Распоряжение = ИсходныйДокумент;
				ДокументПриходныйОрдер.Отправитель = ИсходныйДокумент.Отправитель;
				
				ДокументПриходныйОрдер.НомерВходящегоДокумента = ИсходныйДокумент.Номер;
				ДокументПриходныйОрдер.ДатаВходящегоДокумента = ИсходныйДокумент.Дата;
				
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ПриемкаТоваровНаХранение") Тогда
				
				ДокументПриходныйОрдер = Док; 
				ДокументПриходныйОрдер.Дата = ТекущаяДата();
				
				ДокументПриходныйОрдер.Склад = Склад;
				
				ДокументПриходныйОрдер.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(ДокументПриходныйОрдер.Склад, ДокументПриходныйОрдер.Помещение, ДокументПриходныйОрдер.ЗонаПриемки);
				ДокументПриходныйОрдер.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
				
				ДокументПриходныйОрдер.Распоряжение = ИсходныйДокумент;
				ДокументПриходныйОрдер.Отправитель = Контрагент;				
				
				Попытка ДокументПриходныйОрдер.ХозяйственнаяОперация = ИсходныйДокумент.ХозяйственнаяОперация; Исключение КонецПопытки;
								
				Попытка
					Если Не ЗначениеЗаполнено(ДокументПриходныйОрдер.ХозяйственнаяОперация) Тогда
						ДокументПриходныйОрдер.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				Попытка
					Если Не ЗначениеЗаполнено(ДокументПриходныйОрдер.СкладскаяОперация) Тогда
						ДокументПриходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				ДокументПриходныйОрдер.НомерВходящегоДокумента = ИсходныйДокумент.Номер;
				ДокументПриходныйОрдер.ДатаВходящегоДокумента = ИсходныйДокумент.Дата;				
				
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяДока = "РасходныйОрдерНаТовары" Тогда 
		Если (ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказКлиента") 
			Или ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			Или ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказНаПеремещение")
			Или ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров")
			Или ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") 
			Или ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление")
			Или ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказНаРемонт")) Тогда
					
			ДокументРасходныйОрдер = Док;
			ДокументРасходныйОрдер.Дата = ТекущаяДата();
			ДокументРасходныйОрдер.ДатаОтгрузки = ТекущаяДата();
			ДокументРасходныйОрдер.Склад = Склад;
			ДокументРасходныйОрдер.Помещение = Помещение;			
			
			Если ИсходныйДокументИмя = "ПеремещениеТоваров" Тогда
				ДокументРасходныйОрдер.Получатель = ИсходныйДокумент.СкладПолучатель;
				ДокументРасходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;  
			ИначеЕсли ИсходныйДокументИмя = "ЗаказНаВнутреннееПотребление" Тогда
				ДокументРасходныйОрдер.Получатель = ИсходныйДокумент.Склад;
				ПараметрыДокумента.Об.СкладПолучатель = ДокументРасходныйОрдер.Получатель;
				Если ДокументРасходныйОрдер.СкладскаяОперация.Пустая() Тогда
					ДокументРасходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
				КонецЕсли;     
			ИначеЕсли ИсходныйДокументИмя = "ВозвратТоваровПоставщику" Тогда	
				ДокументРасходныйОрдер.Получатель = ИсходныйДокумент.Партнер;
				ПараметрыДокумента.Об.СкладПолучатель = ДокументРасходныйОрдер.Получатель;
				Если ДокументРасходныйОрдер.СкладскаяОперация.Пустая() Тогда
					ДокументРасходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
				КонецЕсли;
			ИначеЕсли ИсходныйДокументИмя = "ЗаказНаРемонт" Тогда
				ДокументРасходныйОрдер.Получатель = ИсходныйДокумент.ОбъектЭксплуатации;
				ДокументРасходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды;				
			Иначе	
				Если ДокументРасходныйОрдер.СкладскаяОперация.Пустая() Тогда
					ДокументРасходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
				КонецЕсли;				
				ДокументРасходныйОрдер.Получатель = Контрагент;
			КонецЕсли;
			ДокументРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;		
			ДокументРасходныйОрдер.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");	
			ДокументРасходныйОрдер.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(ДокументРасходныйОрдер.Склад, ДокументРасходныйОрдер.Помещение, ДокументРасходныйОрдер.ЗонаОтгрузки);
			
			ДокументРасходныйОрдер.ТоварыПоРаспоряжениям.Очистить();
			
			Для каждого СтрокаРаспоряжения Из ИсходныйДокумент.Товары Цикл
				
				НоваяСтрокаРаспоряженийРасходного = ДокументРасходныйОрдер.ТоварыПоРаспоряжениям.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспоряженийРасходного, СтрокаРаспоряжения);
				Если ИсходныйДокументИмя = "ЗаказКлиента" Тогда  
					ПорядокОформленияНакладныхРасходныхОрдеров = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить();
					Если ПорядокОформленияНакладныхРасходныхОрдеров = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера Тогда				
						НоваяСтрокаРаспоряженийРасходного.Распоряжение = ИсходныйДокумент;		
					КонецЕсли;	
				КонецЕсли;	
				
				Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					Если ЗначениеЗаполнено(ИсходныйДокумент.ЗаказКлиента) Тогда 					
						НоваяСтрокаРаспоряженийРасходного.Распоряжение = ИсходныйДокумент.ЗаказКлиента;			
					Иначе	
						НоваяСтрокаРаспоряженийРасходного.Распоряжение = ИсходныйДокумент;
					КонецЕсли;
				ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					Если ЗначениеЗаполнено(ИсходныйДокумент.ЗаказНаПеремещение) Тогда 
						НоваяСтрокаРаспоряженийРасходного.Распоряжение = ИсходныйДокумент.ЗаказНаПеремещение;			
					Иначе	
						НоваяСтрокаРаспоряженийРасходного.Распоряжение = ИсходныйДокумент;
					КонецЕсли;	
				Иначе
					НоваяСтрокаРаспоряженийРасходного.Распоряжение = ИсходныйДокумент;
				КонецЕсли;
			КонецЦикла;								
		КонецЕсли;
		
		//ERP
		Попытка
			Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения") Тогда
				
				ДокументРасходныйОрдер = Док;
				ДокументРасходныйОрдер.Дата = ТекущаяДата();
				ДокументРасходныйОрдер.ДатаОтгрузки = ТекущаяДата();
				ДокументРасходныйОрдер.Склад = Склад;
				ДокументРасходныйОрдер.Получатель = Контрагент;
				ДокументРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;		
				ДокументРасходныйОрдер.Приоритет = Справочники.Приоритеты.ПолучитьНизшийПриоритет();	
				ДокументРасходныйОрдер.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(ДокументРасходныйОрдер.Склад, ДокументРасходныйОрдер.Помещение, ДокументРасходныйОрдер.ЗонаОтгрузки);
				
				Попытка
					Если ДокументРасходныйОрдер.СкладскаяОперация.Пустая() Тогда
						ДокументРасходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				ДокументРасходныйОрдер.ТоварыПоРаспоряжениям.Очистить();
				Для каждого СтрокаРаспоряжения Из ИсходныйДокумент.Товары Цикл
					НоваяСтрокаРаспоряженийРасходного = ДокументРасходныйОрдер.ТоварыПоРаспоряжениям.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспоряженийРасходного,СтрокаРаспоряжения);
					НоваяСтрокаРаспоряженийРасходного.Распоряжение = ИсходныйДокумент;
				КонецЦикла;		
								
			КонецЕсли;
		Исключение
		КонецПопытки;
				
	ИначеЕсли ИмяДока = "ПеремещениеТоваров" Тогда
		
		ДанныеЗаполнения = Новый Структура;
		
		Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			ДанныеЗаполнения.Вставить("СкладПолучатель", 			ИсходныйДокумент.СкладПолучатель);
			ДанныеЗаполнения.Вставить("СкладОтправитель",           ИсходныйДокумент.СкладОтправитель);
			
			РеквизитыШапки = Новый Структура("ХозяйственнаяОперация, РазличныхОпераций,
			|Организация, РазличныхОрганизаций,
			|ОрганизацияПолучатель, РазличныхОрганизацийПолучателей,
			|СкладОтправитель, РазличныхСкладовОтправителей,
			|СкладПолучатель, РазличныхСкладовПолучателей,
			|ЕстьНесовместимыеСпособыДоставки,
			|Подразделение,
			|ВидЦены,
			|Статус,
			|АдресДоставки,
			|АдресДоставкиЗначенияПолей,
			|СпособДоставки,
			|ПеревозчикПартнер,
			|ДополнительнаяИнформацияПоДоставке");
			ДанныеЗаполнения.Вставить("РеквизитыШапки",           	РеквизитыШапки);
						
			МассивЗаказов = Новый Массив;
			МассивЗаказов.Добавить(ИсходныйДокумент);
			ДанныеЗаполнения.Вставить("МассивЗаказов", 				МассивЗаказов);			
		КонецЕсли;
		
		Док.Заполнить(ДанныеЗаполнения);			
		
	ИначеЕсли ИмяДока = "ДвижениеПродукцииИМатериалов" И ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство") Тогда
				
		ДанныеЗаполнения = Новый Структура;
		
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ИсходныйДокумент);  
		ДанныеЗаполнения.Вставить("МассивЗаказов", МассивЗаказов);	
		
		РеквизитыШапки = Документы.ДвижениеПродукцииИМатериалов.ДанныеЗаполненияНакладной(МассивЗаказов);
		ДанныеЗаполнения.Вставить("РеквизитыШапки",           	РеквизитыШапки);		
		
		Док.Заполнить(ДанныеЗаполнения);	
		
	ИначеЕсли ИмяДока = "ПередачаМатериаловВПроизводство" И ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство") Тогда
		
		ДанныеЗаполнения = Новый Структура;
		
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ИсходныйДокумент);  
		ДанныеЗаполнения.Вставить("МассивЗаказов",  МассивЗаказов);			
		ДанныеЗаполнения.Вставить("Склад", 			ИсходныйДокумент.Склад);
		ДанныеЗаполнения.Вставить("Подразделение",  ИсходныйДокумент.Подразделение);
		ДанныеЗаполнения.Вставить("Организация",    ИсходныйДокумент.Организация);
		
		РеквизитыШапки = Новый Структура("Склад, Подразделение,
		|Организация");
		ДанныеЗаполнения.Вставить("РеквизитыШапки",           	РеквизитыШапки);
		
		Док.Заполнить(ДанныеЗаполнения);
		
	ИначеЕсли ИмяДока = "ВыпускПродукции" И ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		
		Док.Заполнить(ИсходныйДокумент);
		
		Если Не ЗначениеЗаполнено(Док.Организация) Тогда
			Док.Организация = Организация;	
		КонецЕсли;	
		
		Док.Подразделение = ПолучитьПодразделение(); 
		
	Иначе
		
		Док.Заполнить(ИсходныйДокумент);
		
		Если ИмяДока = "ОтборРазмещениеТоваров" И ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда 	
			ДокументОтборРазмещениеТоваров = Док; 
			ДокументОтборРазмещениеТоваров.Дата = ТекущаяДата();	
			ДокументОтборРазмещениеТоваров.ЗонаПриемки = ИсходныйДокумент.ЗонаПриемки;
			Если Не ЗначениеЗаполнено(ДокументОтборРазмещениеТоваров.ЗонаПриемки) Тогда
				ДокументОтборРазмещениеТоваров.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(ИсходныйДокумент.Склад, ИсходныйДокумент.Помещение, ИсходныйДокумент.ЗонаПриемки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыАвтозагрузки(Об, Шаблон, Док)
	
	ДокументИмя = Док.Метаданные().Имя;
			
	Модуль_СкладыСервер       = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СкладыСервер");
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	
	Если СокрЛП(Шаблон.ВидДокументаНового) = "" Или Шаблон.БыстраяПриемка Или Шаблон.БыстраяОтгрузка Тогда //старая схема
		Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитов Цикл
			Попытка
				Док[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита;
				
				Если НовЗнач.ИмяРеквизита = "Соглашение" И ДокументИмя = "РеализацияТоваровУслуг" Тогда
					Док.ЗаполнитьУсловияПродажПоСоглашению();
					
				ИначеЕсли ДокументИмя = "РасходныйОрдерНаТовары" И НовЗнач.ИмяРеквизита = "Статус" Тогда
					// обработка при изменении статуса 
					Документы.РасходныйОрдерНаТовары.ЗаполнитьДействиеВСтроках(Док);
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РасходныйОрдерНаТовары));
					Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ОтгружаемыеТовары); 
					
					Если НовЗнач.ЗначениеРеквизита = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
						Док.ДатаОтгрузки = ТекущаяДатаСеанса();	
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;			
	Иначе	
		Попытка      
			Если Шаблон.НовыеЗначенияРеквизитов.Количество() > 0 И ЗначениеЗаполнено(Об.ИсходныйДокумент)Тогда 
				ИсходныйДок = Об.ИсходныйДокумент.ПолучитьОбъект();
				ИсхДокументИмя = ИсходныйДок.Метаданные().Имя;	
				Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитов Цикл
					ИсходныйДок[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита;
					
					Если НовЗнач.ИмяРеквизита = "Соглашение" И ИсхДокументИмя = "РеализацияТоваровУслуг" Тогда
						ИсходныйДок.ЗаполнитьУсловияПродажПоСоглашению();		
					КонецЕсли;
				КонецЦикла;	
				
				ИсходныйДок.Записать();
			КонецЕсли; 		
		Исключение
		КонецПопытки;	
		
		Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитовНового Цикл
			Попытка
				Док[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита;
				
				Если НовЗнач.ИмяРеквизита = "Помещение" И ДокументИмя = "ПриходныйОрдерНаТовары" Тогда
					АдресноеХранение = Модуль_СкладыСервер.ИспользоватьАдресноеХранение(Док.Склад, Док.Помещение, Док.Дата);
					
					Если АдресноеХранение Тогда
						Док.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Док.Склад, Док.Помещение, Док.ЗонаПриемки);
					КонецЕсли;	
				ИначеЕсли НовЗнач.ИмяРеквизита = "Соглашение" И ДокументИмя = "РеализацияТоваровУслуг" Тогда
					Док.ЗаполнитьУсловияПродажПоСоглашению();
					
				ИначеЕсли ДокументИмя = "РасходныйОрдерНаТовары" И НовЗнач.ИмяРеквизита = "Статус" Тогда
					// обработка при изменении статуса 
					Документы.РасходныйОрдерНаТовары.ЗаполнитьДействиеВСтроках(Док);
					ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РасходныйОрдерНаТовары));
					Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ОтгружаемыеТовары);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьДоговор(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	Договор.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Договор
	|ГДЕ
	|	Договор.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() <> 0 Тогда
		Рез = РезультатЗапроса[0].Ссылка;
	Иначе 
		Рез = Неопределено;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции
Функция ПолучитьПодразделение()
	
	Подразделение = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.ПроизводственноеПодразделение
	|	И НЕ СтруктураПредприятия.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Подразделение = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции	
Функция ПолучитьСоглашение(Партнер, ДокументЗаказКлиента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	Договор.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК Договор
	|ГДЕ
	|	Договор.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() <> 0 Тогда
		Рез = РезультатЗапроса[0].Ссылка; 
	Иначе 
		Модуль_ПродажиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПродажиСервер");
		Рез = Модуль_ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
		Партнер,
		Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение, ПустаяСсылкаДокумента", 
		Истина, 
		ДокументЗаказКлиента.Соглашение,
		Документы.ЗаказКлиента.ПустаяСсылка())).Соглашение;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции
Функция НайтиЗаказПоставщику(лТовар, лПартнер, лСклад)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТоварыКПоступлениюОстатки.ДокументПоступления КАК ДокументПоступления
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки КАК ТоварыКПоступлениюОстатки
	|ГДЕ
	|	ТоварыКПоступлениюОстатки.Номенклатура = &Номенклатура
	|	И ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток > 0
	|	И ТоварыКПоступлениюОстатки.Отправитель = &ОтправительПартнер
	|	И ТоварыКПоступлениюОстатки.Склад = &Склад
	|	И ТоварыКПоступлениюОстатки.ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику");
	Запрос.УстановитьПараметр("Номенклатура", лТовар);
	Запрос.УстановитьПараметр("ОтправительПартнер", лПартнер);
	
	Если лСклад.Пустая() Тогда
		Запрос.Текст = СтрЗаменить(запрос.Текст, "И ТоварыКПоступлениюОстатки.Склад = &Склад", "");
	Иначе
		Запрос.УстановитьПараметр("Склад",лСклад);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ДокументПоступления;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
Функция ПолучитьДанныеЗаполненияПоДокументуПроизводствоБезЗаказа(Док)
	
	ДанныеЗаполнения = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(РеестрДокументов.НомерПервичногоДокумента, """") КАК НомерПервичногоДокумента,
	|	ЕСТЬNULL(РеестрДокументов.ДатаПервичногоДокумента, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервичногоДокумента
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ТоварыКПоступлению.ДокументПоступления = РеестрДокументов.Ссылка
	|			И (НЕ РеестрДокументов.ДополнительнаяЗапись)
	|ГДЕ
	|	ТоварыКПоступлению.Склад = &Склад
	|	И ТоварыКПоступлению.Отправитель = &Отправитель
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И (ВЫРАЗИТЬ(ТоварыКПоступлению.Регистратор КАК Документ.ПроизводствоБезЗаказа)) = &Регистратор";
	
	Запрос.УстановитьПараметр("Отправитель"	, Док.Отправитель);
	Запрос.УстановитьПараметр("Регистратор"	, Док.Распоряжение);
	Запрос.УстановитьПараметр("Склад"		, Док.Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДанныеЗаполнения = Выборка;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения; 
	
КонецФункции
Функция ПолучитьРаспоряжениеПриходногоОрдера(Док)
	
	Запрос = Новый Запрос();	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТоварыКПоступлению.Отправитель КАК Отправитель,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКПоступлению.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Номер
	|		КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКПоступлению.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).Номер
	|		ИНАЧЕ ЕСТЬNULL(РеестрДокументов.НомерДокументаИБ, """")
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКПоступлению.ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Дата
	|		КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКПоступлению.ДокументПоступления КАК Справочник.ДоговорыКонтрагентов).Дата
	|		ИНАЧЕ ЕСТЬNULL(РеестрДокументов.ДатаДокументаИБ, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК Дата,
	|	ЕСТЬNULL(РеестрДокументов.НомерПервичногоДокумента, """") КАК НомерПервичногоДокумента,
	|	ЕСТЬNULL(РеестрДокументов.ДатаПервичногоДокумента, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервичногоДокумента,
	|	ТИПЗНАЧЕНИЯ(ТоварыКПоступлению.ДокументПоступления) КАК ТипРаспоряжения
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО (ТоварыКПоступлению.ДокументПоступления = РеестрДокументов.Ссылка
	|				И НЕ РеестрДокументов.ДополнительнаяЗапись)
	|ГДЕ
	|	ТоварыКПоступлению.Склад = &Склад
	|	И (ТоварыКПоступлению.Отправитель = &Отправитель
	|			ИЛИ &ПоВсемОтправителям)
	|	И (ТоварыКПоступлению.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|			ИЛИ &ПоВсемХозяйственнымОперациям)
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыКПоступлению.КОформлениюОрдеров <> 0";
	
	Запрос.УстановитьПараметр("Отправитель", Док.Отправитель);
	Запрос.УстановитьПараметр("Склад", Док.Склад);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Док.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ПоВсемОтправителям", Ложь);
	Запрос.УстановитьПараметр("ПоВсемХозяйственнымОперациям", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументПоступления;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	
Функция ПолучитьКонтрагента(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() <> 0 Тогда
		Рез = РезультатЗапроса[0].Ссылка;
	Иначе 
		Рез = Неопределено;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции
Функция ПолучитьНалогообложениеНДСПоУмолчанию(Организация, Контрагент, Соглашение, Дата = Неопределено, ЭтоПродажа = Истина, ПоставщикНеплательщик = Неопределено)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ПоставщикНеплательщик = Неопределено Тогда
		Неплательщик = ПоставщикНеплательщикНДС(Организация, Контрагент, Дата, ЭтоПродажа);
	Иначе
		Неплательщик = ПоставщикНеплательщик;
	КонецЕсли;
	
	Если Неплательщик Тогда
		Налогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		Если ЗначениеЗаполнено(Соглашение) Тогда
			Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
			Налогообложение = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "НалогообложениеНДС");
			Если Не ЗначениеЗаполнено(Налогообложение) Тогда
				Налогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;	
			КонецЕсли; 
		Иначе
			Налогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;	
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Налогообложение;
	
КонецФункции // ПолучитьНалогообложениеНДСПоУмолчанию()
Функция ПоставщикНеплательщикНДС(Организация, Контрагент, Дата = Неопределено, ЭтоПродажа = Истина)	
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ЭтоПродажа Тогда
		Если (Не ЗначениеЗаполнено(Организация)) Или ОрганизацияКонтрагентПлательщикНДС(Организация, Дата) Тогда
			Неплательщик = Ложь;
		Иначе
			Неплательщик = Истина;
		КонецЕсли;
	Иначе
		Если (Не ЗначениеЗаполнено(Контрагент)) Или ОрганизацияКонтрагентПлательщикНДС(Контрагент, Дата) Тогда
			Неплательщик = Ложь;
		Иначе
			Неплательщик = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Неплательщик;
	
КонецФункции // ПоставщикНеплательщикНДС()
Функция ОрганизацияКонтрагентПлательщикНДС(ОрганизацияКонтрагент, Дата = Неопределено)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
		Плательщик = ОрганизацияПлательщикНДС(ОрганизацияКонтрагент, Дата);
	ИначеЕсли ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Плательщик = КонтрагентПлательщикНДС(ОрганизацияКонтрагент);
	Иначе
		Плательщик = Ложь;
	КонецЕсли;
	
	Возврат Плательщик;
	
КонецФункции // ОрганизацияКонтрагентПлательщикНДС()
Функция ОрганизацияПлательщикНДС(Организация, Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат Справочники.Организации.ПлательщикНДС(Организация, Дата);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ОрганизацияПлательщикНДС()
Функция КонтрагентПлательщикНДС(Контрагент) Экспорт
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
		Возврат Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ПлательщикНДС");
	Иначе
		Возврат Истина;
	КонецЕсли; 
КонецФункции // КонтрагентПлательщикНДС()
Функция НомерПоследнегоЧека()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ЧекККМ.НомерЧекаККМ) КАК НомерЧекаККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерЧекаККМ;
	Иначе
		Возврат 0;
	КонецЕсли; 
КонецФункции // НомерПоследнегоЧека()
Функция ТребуетсяОбновлениеКлючаСессииПоДокументу(ИсходныйДокумент, Шаблон, Организация, СтрокаОшибок)
	
	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	ВидМаркируемойПродукцииДокументаМассив = ДатаМобайл_Маркировка.ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент, Шаблон.ИмяТабличнойЧастиПодбор);
	ВидМаркируемойПродукции = ВидМаркируемойПродукцииДокументаМассив[0];
	
	//Табак
	ЭтоТабак = ДатаМобайл_Маркировка.ЭтоТабакПоВидыПродукцииИС(ВидМаркируемойПродукции);
	
	Модуль_ИнтерфейсАвторизацииИСМПВызовСервера = ДатаМобайл_Маркировка.ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
	Модуль_ИнтерфейсИСМПКлиентСервер 			= ДатаМобайл_Маркировка.ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
	Модуль_ИнтерфейсМОТПКлиентСервер 			= ДатаМобайл_Маркировка.ОбщийМодуль("ИнтерфейсМОТПКлиентСервер");
	Модуль_ДлительныеОперации 					= ДатаМобайл_Маркировка.ОбщийМодуль("ДлительныеОперации");
	Модуль_ОбщегоНазначения 					= ДатаМобайл_Маркировка.ОбщийМодуль("ОбщегоНазначения");
	
	Если Модуль_ИнтерфейсАвторизацииИСМПВызовСервера = Неопределено Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Конфигурация 1С не поддерживает работу с Маркировкой";		
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоТабак Тогда		
		ТребуетсяОбновлениеКлючаСессии = Модуль_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
		Модуль_ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	Иначе
		ТребуетсяОбновлениеКлючаСессии = Модуль_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
		Модуль_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));	
	КонецЕсли;
	
	Если ТребуетсяОбновлениеКлючаСессии Тогда			
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка заполнения результатов проверки документа. Не получилось обновить ключ сессии. Проверьте настройки подключения к ИС";
		Возврат Истина;
	КонецЕсли;	
	
	Возврат ТребуетсяОбновлениеКлючаСессии;
	
КонецФункции

//ДОПОЛНИТЕЛЬНЫЕ ОБРАБОТКИ И ПРОВЕДЕНИЯ
Процедура ВыполнитьПредварительнуюОбработкуДокументаТСД(ПараметрыДокумента, ЕстьОшибки, СтрокаОшибок = "", ДанныеДляВозврата = "")
	
	Об = ПараметрыДокумента.Об;
	Шаблон = Об.Шаблон;
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ПараметрыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "ВидДокумента, ВидДокументаНового, ИспользованиеУпаковочныхЛистовПодбор, ИспользоватьМаркировку, ИзменятьТипОбеспечения,ОткрыватьДокументыПослеЗагрузкиБезЗаписи,ЕГАИС");
	
	ВидДокумента 								= ПараметрыШаблона.ВидДокумента;
	ВидДокументаНового 							= ПараметрыШаблона.ВидДокументаНового;
	ИспользованиеУпаковочныхЛистовПодбор 		= ПараметрыШаблона.ИспользованиеУпаковочныхЛистовПодбор;
	ИспользоватьМаркировку 						= ПараметрыШаблона.ИспользоватьМаркировку;
	ЕГАИС 										= ПараметрыШаблона.ЕГАИС;
	ИзменятьТипОбеспечения    					= ПараметрыШаблона.ИзменятьТипОбеспечения;
	ОткрыватьДокументыПослеЗагрузкиБезЗаписи 	= ПараметрыШаблона.ОткрыватьДокументыПослеЗагрузкиБезЗаписи;
	
	ПараметрыДокументаТСД = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Об.Ссылка, "ИсходныйДокумент, Организация"); 
	ИсходныйДокумент 	= ПараметрыДокументаТСД.ИсходныйДокумент;
	Организация 		= ПараметрыДокументаТСД.Организация;
	
	Если ВидДокумента = "ДатаМобайл_УпаковочныйЛист" И ИспользованиеУпаковочныхЛистовПодбор > 0 И Не ИспользоватьМаркировку И Не ЕГАИС Тогда
		
		ЕстьОшибки = Истина;		
		ДанныеДляВозврата = "";
		
		Попытка
			ЗаполнитьУпаковочныеЛисты(Об,, ДанныеДляВозврата);
			Об.ДатаЗавершения	= ТекущаяДата();
			Об.ИсходныйДокумент	= ДанныеДляВозврата;
			Об.Записать();
		Исключение
		КонецПопытки; 
		
	ИначеЕсли ВидДокумента = "ЗаказКлиента" И ВидДокументаНового = "РеализацияТоваровУслуг" И ИзменятьТипОбеспечения Тогда
		
		ЗаказКлиента = ИсходныйДокумент.ПолучитьОбъект();	
		Если Не ЗаказКлиента.Проведен Тогда	
			СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Заказ клиента " + ЗаказКлиента.Номер + " не проведен.";
			ЕстьОшибки = Истина;
			ДанныеДляВозврата = Неопределено;
		КонецЕсли;	
		
		Для каждого СтрокаТЧ Из ЗаказКлиента.Товары Цикл
			СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;	
		КонецЦикла;
		
		Если Не ОткрыватьДокументыПослеЗагрузкиБезЗаписи Тогда
			Попытка 
				ЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение); 
			Исключение 
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ВыполнитьДополнительнуюОбработкуДокумента(Док, ПараметрыДокумента, ЕстьОшибки, СтрокаОшибок = "")
	
	Об = ПараметрыДокумента.Об;
	Шаблон = Об.Шаблон; 
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ПараметрыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "ВидДокумента, ВидДокументаНового, ИмяТабличнойЧастиПодбор, ИмяТабличнойЧастиНовойПодбор, ТабличнуюЧастьПриЗагрузкеПодбор, ТабличнуюЧастьПриЗагрузкеПриемка, БыстраяПриемка, БыстраяОтгрузка, ПерезаполнятьТЧТоварыПоРаспоряжениям, РаспределениеТоваров");
	
	ВидДокумента 							= ПараметрыШаблона.ВидДокумента;
	ВидДокументаНового 						= ПараметрыШаблона.ВидДокументаНового;
	ИмяТабличнойЧастиПодбор 				= ПараметрыШаблона.ИмяТабличнойЧастиПодбор;
	ИмяТабличнойЧастиНовойПодбор 			= ПараметрыШаблона.ИмяТабличнойЧастиНовойПодбор;
	ТабличнуюЧастьПриЗагрузкеПодбор    		= ПараметрыШаблона.ТабличнуюЧастьПриЗагрузкеПодбор;
	ТабличнуюЧастьПриЗагрузкеПриемка        = ПараметрыШаблона.ТабличнуюЧастьПриЗагрузкеПриемка;
	БыстраяПриемка                          = ПараметрыШаблона.БыстраяПриемка;
	БыстраяОтгрузка                         = ПараметрыШаблона.БыстраяОтгрузка;
	ПерезаполнятьТЧТоварыПоРаспоряжениям    = ПараметрыШаблона.ПерезаполнятьТЧТоварыПоРаспоряжениям;
	МножествоДокументовКакЗадание           = ПараметрыШаблона.РаспределениеТоваров = 1;
	
	// Zolla ++
	ПараметрыШаблонаДоп = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "ИспользоватьПодбор,
	|ИспользоватьПриемку, ПроводитьРоботом, ДМ_ТипПроцесса");

	ИспользоватьПодбор                      = ПараметрыШаблонаДоп.ИспользоватьПодбор;
	ИспользоватьПриемку                     = ПараметрыШаблонаДоп.ИспользоватьПриемку;
	ПроводитьРоботом						= ПараметрыШаблонаДоп.ПроводитьРоботом;
	ТипПроцесса                             = ПараметрыШаблонаДоп.ДМ_ТипПроцесса;
	
	Модуль_Пользователи     = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("Пользователи");
	// Zolla --
	
	МетаданныеДока = Док.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	
	// ЗОНА ПРИЕМКИ/ОТГРУЗКИ
	Если ИмяДока = "ОтборРазмещениеТоваров" Тогда
		Если Док.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор И Не ЗначениеЗаполнено(Док.ЗонаОтгрузки) Тогда
			Док.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Док.Склад, Док.Помещение, Док.ЗонаОтгрузки);
		КонецЕсли;
		
		Если Док.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение И Не ЗначениеЗаполнено(Док.ЗонаПриемки) Тогда
			Док.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Док.Склад, Док.Помещение, Док.ЗонаПриемки);
		КонецЕсли;
	КонецЕсли;
	
	Попытка	
		Если ИмяДока = "РасходныйОрдерНаТовары" Тогда
			
			Попытка
				Если Не ЗначениеЗаполнено(Док.Получатель) Тогда
					Док.Получатель = Об.СкладПолучатель;           
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			//ПЕРЕЗАПОЛНИТЬ ТЧ ТОВАРЫ ПО РАСПОРЯЖЕНИЯМ РАСХОДНОГО ОРДЕРА
			Если (ТабличнуюЧастьПриЗагрузкеПодбор = 3 Или ТабличнуюЧастьПриЗагрузкеПодбор = 2) И ПерезаполнятьТЧТоварыПоРаспоряжениям Тогда
				ПерезаполнениеТабЧастиРОТоварыПораспоряжениям(Док, Об);	 
			КонецЕсли; 
			
			//при корректном выполнении задания по данному шаблону (совпадение плана с фактом по всем исходным документам) 
			//необходимо изменять статус в каждом исходном документе на «Проверен».
			Если Об.ПланРавноФакт И МножествоДокументовКакЗадание Тогда	
				Если Док.Статус = Перечисления.СтатусыРасходныхОрдеров.ВПроцессеПроверки Тогда
					Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен;
					
					Для каждого СтрокаТабличнойЧасти Из Док["ОтгружаемыеТовары"] Цикл
						ТекущаяСтрока = СтрокаТабличнойЧасти;
						ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
					КонецЦикла;					
				КонецЕсли;		
			КонецЕсли;
			
			Попытка Док.ОтгружаемыеТовары.Сортировать("УпаковочныйЛистРодитель"); Исключение КонецПопытки;
			
		КонецЕсли;
	Исключение 
	КонецПопытки;
		
	Попытка
		//УДАЛЕНИЕ НУЛЕВЫХ КОЛИЧЕСТВ ПРИ ТЧ ИЗМЕНЯТЬ
		Если ТабличнуюЧастьПриЗагрузкеПодбор = 3 И ИмяДока <> "ПересчетТоваров" 
			И ИмяДока <> "АктОРасхожденияхПослеПриемки"
			И ИмяДока <> "АктОРасхожденияхПослеПеремещения"
			И ИмяДока <> "КорректировкаРеализации" Тогда
			
			Если ИмяДока = "ОтборРазмещениеТоваров" И Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
			Иначе	
				СтруктураДляПоиска = Новый Структура("Количество", 0); 
				ТабличнаяЧастьДок = Док[ПараметрыДокумента.ИмяТЧПодбор]; 
				МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
				Для каждого Строка Из МассивПустыхСтрок Цикл 
					ТабличнаяЧастьДок.Удалить(Строка); 
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		
		Если ТабличнуюЧастьПриЗагрузкеПриемка = 3 И ИмяДока <> "ПересчетТоваров" 
			И ИмяДока <> "АктОРасхожденияхПослеПриемки"
			И ИмяДока <> "АктОРасхожденияхПослеПеремещения"
			И ИмяДока <> "КорректировкаРеализации" Тогда
			
			Если ИмяДока = "ОтборРазмещениеТоваров" И Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
			Иначе			
				СтруктураДляПоиска = Новый Структура("Количество", 0); 
				ТабличнаяЧастьДок = Док[ПараметрыДокумента.ИмяТЧПриемка]; 
				МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
				Для каждого Строка Из МассивПустыхСтрок Цикл 
					ТабличнаяЧастьДок.Удалить(Строка); 
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		
		//СМЕНА ДЕЙСТВИЯ В СТРОКАХ ТЧ ОТГРУЖАЕМЫЕ ТОВАРЫ РАСХОДНОГО ОРДЕРА
		Если ИмяДока = "РасходныйОрдерНаТовары" Тогда
			Если ПараметрыДокумента.ИмяТЧПодбор = "ОтгружаемыеТовары" И 
				(Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Или Док.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке) Тогда
				Для каждого СтрокаТабличнойЧасти Из Док[ПараметрыДокумента.ИмяТЧПодбор] Цикл
					ТекущаяСтрока = СтрокаТабличнойЧасти;
					ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;
		
		//СМЕНА ДЕЙСТВИЯ В СТРОКАХ ТЧ ОТГРУЖАЕМЫЕ ТОВАРЫ ОРДЕРА НА ПЕРЕМЕЩЕНИЕ
		Если ИмяДока = "ОрдерНаПеремещениеТоваров" Тогда			
			Если ПараметрыДокумента.ИмяТЧПодбор = "ОтгружаемыеТовары" И 
				(Док.Статус = Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке Или Док.Статус = Перечисления.СтатусыОрдеровНаПеремещение.Принят) Тогда
				Для каждого СтрокаТабличнойЧасти Из Док[ПараметрыДокумента.ИмяТЧПодбор] Цикл
					ТекущаяСтрока = СтрокаТабличнойЧасти;
					ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;		
		
		Если ВидДокумента = "ЗаказНаВнутреннееПотребление" 
			И (ВидДокументаНового = "ВнутреннееПотреблениеТоваров" Или ВидДокументаНового = "ВнутреннееПотребление") Тогда	
			ЗаполнитьВнутреннееПотреблениеПоЗаказу(Док, ПараметрыДокумента);	
		КонецЕсли;						
	Исключение 
	КонецПопытки;
			
	Попытка			
		Если БыстраяПриемка Тогда
			Если ТипЗнч(ПараметрыДокумента.Об.Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
				БыстраяПриемкаПоОтборуРазмещению(Док, ПараметрыДокумента);  
				Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок; 
			Иначе
				ЕстьОшибки = Истина;
				СтрокаОшибок = "Ошибка заполнения строки клиент: укажите данные из справочника ""Партнеры""!";
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		
		Если БыстраяОтгрузка Тогда
			БыстраяОтгрузкаПоОтборуРазмещению(Док, ПараметрыДокумента);  
			Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		КонецЕсли;
	Исключение
		ЕстьОшибки = Истина;
		СтрокаОшибок = "Ошибка создания/заполнения документов: " + ОписаниеОшибки();
	КонецПопытки;
	
	// Сборка товаров, заполнение кодов строки по заказу на сборку
	Если ИмяДока = "СборкаТоваров" Или ИмяДока = "ЗаказНаСборку" Тогда
		Если ЗначениеЗаполнено(Док.ЗаказНаСборку) Тогда
			ТоварыВЗаказе = Док.ЗаказНаСборку.Товары.Выгрузить(Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить));
			ТоварыВДок    = Док.Товары.Выгрузить();
			Док.Товары.Очистить();
			
			Для каждого стр Из ТоварыВДок Цикл
				ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика,Назначение,СтатусУказанияСерий,Серия");
				ЗаполнитьЗначенияСвойств(ПараметрыПоиска, стр);
				
				КолРаспределить = стр.Количество;
				КолРаспределитьУп = стр.КоличествоУпаковок;
				
				НайдСтроки = ТоварыВЗаказе.НайтиСтроки(ПараметрыПоиска);
				
				новСтрока = Док.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(новСтрока, стр);
				
				Для каждого найдСтрока Из НайдСтроки Цикл
					Если найдСтрока.Отменено Тогда Продолжить; КонецЕсли;
					Если КолРаспределить <= 0 Тогда Продолжить; КонецЕсли;
					
					Если КолРаспределить <= найдСтрока.Количество Тогда
						новСтрока.КодСтроки = найдСтрока.КодСтроки;
						Прервать;
					Иначе
						новСтрока.КодСтроки = найдСтрока.КодСтроки;
						новСтрока.Количество = найдСтрока.Количество;
						новСтрока.КоличествоУпаковок = найдСтрока.КоличествоУпаковок;
						
						КолРаспределить = КолРаспределить - найдСтрока.Количество;
						КолРаспределитьУп = КолРаспределитьУп - найдСтрока.КоличествоУпаковок;
						
						новСтрока = Док.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(новСтрока, стр);
						новСтрока.КодСтроки = 0;
						новСтрока.Количество = КолРаспределить;
						новСтрока.КоличествоУпаковок = КолРаспределитьУп;
						новСтрока.ИдентификаторСтроки = СокрЛП(Новый УникальныйИдентификатор());
					КонецЕсли;
				КонецЦикла;				
			КонецЦикла;
		КонецЕсли;
		
		Док.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
		
	КонецЕсли;
	
	Если ИмяДока = "ПересчетТоваров" Тогда
		
		УчетныеДанные = ПараметрыДокумента.УчетныеДанные;
		
		Запрос = Новый Запрос;
		
		Если ПараметрыДокумента.ПоЯчейкам Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ                      
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Количество КАК Количество,
			|	Товары.КоличествоФакт КАК КоличествоФакт,
			|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	Товары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Упаковка КАК Упаковка,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Назначение КАК Назначение,
			|	Товары.Ячейка КАК Ячейка,
			|	Товары.ИзлишекПорча КАК ИзлишекПорча,
			|	Товары.Серия КАК Серия,
			|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УчетныеДанные.Номенклатура КАК Номенклатура,
			|	УчетныеДанные.Характеристика КАК Характеристика,
			|	УчетныеДанные.Упаковка КАК Упаковка,
			|	УчетныеДанные.Ячейка КАК Ячейка,
			|	УчетныеДанные.КоличествоУпаковок КАК КоличествоУпаковок,
			|	УчетныеДанные.Количество КАК Количество,
			|	УчетныеДанные.Серия КАК Серия,
			|	УчетныеДанные.СтатусУказанияСерий КАК СтатусУказанияСерий
			|ПОМЕСТИТЬ УчетныеДанные
			|ИЗ
			|	&УчетныеДанные КАК УчетныеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ  
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Количество КАК Количество,
			|	Товары.КоличествоФакт КАК КоличествоФакт,
			|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	Товары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Упаковка КАК Упаковка,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Назначение КАК Назначение,
			|	Товары.Ячейка КАК Ячейка,
			|	Товары.ИзлишекПорча КАК ИзлишекПорча,
			|	Товары.Серия КАК Серия,
			|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	УчетныеДанные.КоличествоУпаковок КАК КоличествоУпаковок1,
			|	УчетныеДанные.Количество КАК Количество1
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ УчетныеДанные КАК УчетныеДанные
			|		ПО Товары.Номенклатура = УчетныеДанные.Номенклатура
			|			И Товары.Характеристика = УчетныеДанные.Характеристика
			|			И Товары.Упаковка = УчетныеДанные.Упаковка
			|			И Товары.Ячейка = УчетныеДанные.Ячейка
			|			И Товары.Серия = УчетныеДанные.Серия"; 
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ      
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Количество КАК Количество,
			|	Товары.КоличествоФакт КАК КоличествоФакт,
			|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	Товары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Упаковка КАК Упаковка,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Назначение КАК Назначение,
			|	Товары.Ячейка КАК Ячейка,
			|	Товары.ИзлишекПорча КАК ИзлишекПорча,
			|	Товары.Серия КАК Серия,
			|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УчетныеДанные.Номенклатура КАК Номенклатура,
			|	УчетныеДанные.Характеристика КАК Характеристика,
			|	УчетныеДанные.Упаковка КАК Упаковка,
			|	УчетныеДанные.Ячейка КАК Ячейка,
			|	УчетныеДанные.КоличествоУпаковок КАК КоличествоУпаковок,
			|	УчетныеДанные.Количество КАК Количество,
			|	УчетныеДанные.Серия КАК Серия,
			|	УчетныеДанные.СтатусУказанияСерий КАК СтатусУказанияСерий
			|ПОМЕСТИТЬ УчетныеДанные
			|ИЗ
			|	&УчетныеДанные КАК УчетныеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ          
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Количество КАК Количество,
			|	Товары.КоличествоФакт КАК КоличествоФакт,
			|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	Товары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Упаковка КАК Упаковка,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Назначение КАК Назначение,
			|	Товары.Ячейка КАК Ячейка,
			|	Товары.ИзлишекПорча КАК ИзлишекПорча,
			|	Товары.Серия КАК Серия,
			|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	УчетныеДанные.КоличествоУпаковок КАК КоличествоУпаковок1,
			|	УчетныеДанные.Количество КАК Количество1
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ УчетныеДанные КАК УчетныеДанные
			|		ПО Товары.Номенклатура = УчетныеДанные.Номенклатура
			|			И Товары.Характеристика = УчетныеДанные.Характеристика
			|			И Товары.Упаковка = УчетныеДанные.Упаковка
			|			И Товары.Серия = УчетныеДанные.Серия";

		КонецЕсли;
		
		Запрос.УстановитьПараметр("УчетныеДанные", ПараметрыДокумента.УчетныеДанные);
		Запрос.УстановитьПараметр("Товары", Док.Товары.Выгрузить()); 
		
		Док.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	// Zolla ++
	// разбить документ на несколько документов по коробам
	Если ВидДокумента = "ОтборРазмещениеТоваров" И Не ИспользоватьПодбор И ИспользоватьПриемку Тогда
		// РАБОТА ПО ЗАДАНИЮ (ЭТАП 2)
		Если ТипПроцесса = 2 Тогда
			Если Не ЗначениеЗаполнено(Док.ЗонаПриемки) Тогда
				Док.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Док.Склад, Док.Помещение);
			КонецЕсли;
			
		ИначеЕсли ТипПроцесса = 1 Тогда // СОЗДАНИЕ НОВЫХ ДОКУМЕНТОВ (ЭТАП 1)
			// удаляем старые документы
			Для каждого СтрИсхДок Из Об.ДМ_ИсходныеДокументы Цикл
				ИсхДок = СтрИсхДок.ИсходныйДокумент.ПолучитьОбъект();
				ИсхДок.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
			
			Об.ДМ_ИсходныеДокументы.Очистить();
			Об.ИсходныйДокумент = Неопределено;
			
			ТабТСД = Об.СобранныеДанныеПриемка.Выгрузить();
			ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,  
			|ШтрихКод,УпаковочныйЛист,Короб","Количество,КоличествоМест"); // ЯчейкаСсылка
			
			ТабКоробов = ТабТСД.Скопировать(, "Короб"); 
			ТабКоробов.Свернуть("Короб");
			МассивКоробов = ТабКоробов.ВыгрузитьКолонку("Короб"); 
			
			// делим товары на документы по коробам
			Для каждого ЭлКороб Из МассивКоробов Цикл
				// найдем документ упак лист по номеру короба
				ДокУЛ = ДМ_ПолучитьУпакЛистПоШтрихкоду(СокрЛП(ЭлКороб));			
				
				СтрокиТСД = ТабТСД.НайтиСтроки(Новый Структура("Короб", ЭлКороб));
				
				ДокН = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ДокН, Док);
				ДокН.КР_Короб = ДокУЛ;
				ДокН.КР_ИспользоватьКороб = Истина;
				ДокН.УстановитьНовыйНомер();
				ДокН.Дата = ТекущаяДата();
				ДокН.Ответственный = Модуль_Пользователи.ТекущийПользователь(); 
				
				Если Не ЗначениеЗаполнено(ДокН.ЗонаПриемки) Тогда
					ДокН.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(ДокН.Склад, ДокН.Помещение);
				КонецЕсли;
				
				// заполнение ТЧ размещение
				Для каждого стрТСД Из СтрокиТСД Цикл
					КоэффЕд = 1;
					
					Если ЗначениеЗаполнено(стрТСД.ЕдиницаИзмерения) Тогда 
						КоэффЕд = стрТСД.ЕдиницаИзмерения.Числитель / ?(стрТСД.ЕдиницаИзмерения.Знаменатель = 0, 1, стрТСД.ЕдиницаИзмерения.Знаменатель);
					КонецЕсли;
					
					нСтрТЧ = ДокН.ТоварыРазмещение.Добавить();
					нСтрТЧ.Номенклатура        = стрТСД.Номенклатура;
					нСтрТЧ.Характеристика      = стрТСД.ХарактеристикаНоменклатуры;
					нСтрТЧ.Серия               = стрТСД.СерияСсылка;
					нСтрТЧ.Упаковка            = стрТСД.ЕдиницаИзмерения;
					нСтрТЧ.КоличествоУпаковок  = стрТСД.Номенклатура;
					нСтрТЧ.Количество          = стрТСД.Количество * КоэффЕд;
					нСтрТЧ.КоличествоРазмещено = нСтрТЧ.Количество;
					нСтрТЧ.СтатусУказанияСерий = 0;
				КонецЦикла;
				
				// запись документа
				Если Не ДокН.ТоварыРазмещение.Количество() = 0 Тогда
					Попытка					
						Если ПроводитьРоботом Тогда
							Попытка
								ДокН.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный); 
							Исключение
								ДокН.Записать(РежимЗаписиДокумента.Запись);
							КонецПопытки;
						Иначе
							ДокН.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
					Исключение
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + ?(СтрокаОшибок = "", "", Символы.ПС) + ОписаниеОшибки();
						
						Продолжить;
					КонецПопытки;
					
					нСтрИсх = Об.ДМ_ИсходныеДокументы.Добавить();
					нСтрИсх.ИсходныйДокумент = ДокН.Ссылка;
				КонецЕсли;
			КонецЦикла;
			
			// фиксируем основной исх документ
			Если Об.ДМ_ИсходныеДокументы.Количество() > 0 Тогда
				Об.ИсходныйДокумент =  Об.ДМ_ИсходныеДокументы[0].ИсходныйДокумент;
				Док = Об.ИсходныйДокумент.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Zolla --
	
КонецПроцедуры
Процедура ВыполнитьДополнительноеПроведениеДокумента(Об, Док, ПараметрыДокумента)
	
	МетаданныеДока = Док.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	
	Шаблон = Об.Шаблон;
	Если СокрЛП(Шаблон.ВидДокументаНового) = "" Или Шаблон.БыстраяПриемка Или Шаблон.БыстраяОтгрузка Тогда
		Если ИмяДока = "ПересчетТоваров" Тогда
			НужныйСтатус = Док.Статус;
			Если НужныйСтатус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов Или НужныйСтатус = Перечисления.СтатусыПересчетовТоваров.Выполнено Тогда
				Док.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				
				Док.Статус = НужныйСтатус;
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		ИначеЕсли ИмяДока = "ОтборРазмещениеТоваров" Тогда
			НужныйСтатус = Док.Статус;
			Если НужныйСтатус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок Тогда
				Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;				
				Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			ОшибокЗаполненияНеОбнаружено = Док.ПроверитьЗаполнение();
			Если НужныйСтатус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок И Док.Статус <> НужныйСтатус И ОшибокЗаполненияНеОбнаружено Тогда
				Док.Статус = НужныйСтатус;
				
				ИзменитьДопСвойствоВДвиженияТоварыВЯчейках(Док);
				
				Док.Записать(РежимЗаписиДокумента.Проведение);
			ИначеЕсли ОшибокЗаполненияНеОбнаружено Тогда			
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Иначе  // обнаружены ошибки заполнения
				Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
					Док.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ИмяДока = "ОрдерНаПеремещениеТоваров" Тогда
			НужныйСтатус = Док.Статус;
			Если НужныйСтатус = Перечисления.СтатусыОрдеровНаПеремещение.КПроверке 
				Или НужныйСтатус = Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке
				Или НужныйСтатус = Перечисления.СтатусыОрдеровНаПеремещение.Принят Тогда
				
				Док.Статус = Перечисления.СтатусыПересчетовТоваров.КОтбору;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				
				Док.Статус = НужныйСтатус;
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		Иначе
			Док.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Иначе
		Если ИмяДока = "ПриходныйОрдерНаТовары" Тогда
			НужныйСтатус = Док.Статус;
			Если НужныйСтатус = Перечисления.СтатусыПриходныхОрдеров.Принят Тогда
				Док.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				
				Док.Статус = НужныйСтатус;
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
		ИначеЕсли ИмяДока = "РасходныйОрдерНаТовары" Тогда
			НужныйСтатус = Док.Статус;
			Если НужныйСтатус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Или НужныйСтатус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
				// 1. отобрать
				Док.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;  
				Для каждого стр Из Док.ОтгружаемыеТовары Цикл
					стр.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать; 		
				КонецЦикла;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				
				// 2. отгрузить
				Док = Док.Ссылка.ПолучитьОбъект();
				
				Док.Статус = НужныйСтатус;
				Для каждого стр Из Док.ОтгружаемыеТовары Цикл
					стр.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить; 		
				КонецЦикла;
				Док.Записать(РежимЗаписиДокумента.Проведение);	
			Иначе
				Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		ИначеЕсли ИмяДока = "ОтборРазмещениеТоваров" Тогда
			НужныйСтатус = Док.Статус;
			Если НужныйСтатус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок Тогда
				Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
				Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			ОшибокЗаполненияНеОбнаружено = Док.ПроверитьЗаполнение();
			Если НужныйСтатус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок И Док.Статус <> НужныйСтатус И ОшибокЗаполненияНеОбнаружено Тогда
				Док.Статус = НужныйСтатус;
				Док.Записать(РежимЗаписиДокумента.Проведение);
			ИначеЕсли ОшибокЗаполненияНеОбнаружено Тогда
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Иначе  // обнаружены ошибки заполнения
			КонецЕсли;	
		Иначе
			Док.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры
Процедура ВыполнитьДополнительнуюОбработкуИсходногоДокумента(Док, ПараметрыДокумента, УдалосьПровестиПеремещение = Ложь)
	
	МетаданныеДока = Док.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	
	Об = ПараметрыДокумента.Об;
	Шаблон = Об.Шаблон; 
	
	Если ИмяДока = "ОтборРазмещениеТоваров" Тогда
		Если Не ЗначениеЗаполнено(Док.Распоряжение) Тогда Возврат; КонецЕсли;
		Если Не ТипЗнч(Док.Распоряжение) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда Возврат; КонецЕсли;
		Если Не Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок 
			И Не Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда			
			Сообщить("Внимание. Документ в статусе ''" + Док.Статус + "''!");
			Возврат; 
		КонецЕсли;
		
		ИзменитьДопСвойствоВДвиженияТоварыВЯчейках(Док);
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение			
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки; 
				
		Если ТипЗнч(Док.Распоряжение) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			
			обРасходныйОрдер = Док.Распоряжение.ПолучитьОбъект();		
			
			Попытка
				Если Шаблон.ПерезаполнятьРасходныйОрдерПоОтбору Тогда
					обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
					
					// перезаполнение РО по отбору
					ПерезаполнениеТабЧастейРасхОрдераПоОтбору(обРасходныйОрдер, Док, Об, "ОтгружаемыеТовары");
					// перезаполнение тч ТоварыПоРаспоряжениям
					Если Шаблон.ПерезаполнятьТЧТоварыПоРаспоряжениям Тогда
						ПерезаполнениеТабЧастейРасхОрдераПоОтбору(обРасходныйОрдер, Док, Об, "ТоварыПоРаспоряжениям");
					КонецЕсли;
					
					// расширение работы с упаковочными листами (КСК)
					Если Шаблон.ИспользованиеУпаковочныхЛистовПодбор <> 0 И Шаблон.ИспользоватьТиповыеУпаковочныеЛисты Тогда
						ПерезаполнениеТабЧастиРООтгружаемыеТоварыУпакЛистами(обРасходныйОрдер, Об, Шаблон);	
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			// статус
			Если ЗначениеЗаполнено(Шаблон.СтатусРасходногоОрдераПослеЗагрузкиОтбора) Тогда
				ВсеОтборыЗавершены = ПроверкаВсехОтборов(Док.Распоряжение, Док.Ссылка);
				
				Если ВсеОтборыЗавершены И (Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок Или Шаблон.СтатусРасходногоОрдераПослеЗагрузкиОтбораСОшибками) Тогда
					обРасходныйОрдер.Статус = Шаблон.СтатусРасходногоОрдераПослеЗагрузкиОтбора;
				КонецЕсли;
			Иначе	
				обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			КонецЕсли;
			
			Если (обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Или обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке) Тогда	
				Для каждого стр Из обРасходныйОрдер.ОтгружаемыеТовары Цикл
					стр.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;	
				КонецЦикла;	
			КонецЕсли;
			
			обРасходныйОрдер.ДатаОтгрузки = ТекущаяДата();
			
			// запись РО
			Попытка
				обРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
						
		КонецЕсли;
		
	ИначеЕсли Шаблон.ВидДокумента = "РасходныйОрдерНаТовары" И Шаблон.ВидДокументаНового = "ПеремещениеТоваров" Тогда
		Если (Шаблон.ИспользоватьТиповыеУпаковочныеЛисты И Шаблон.ПодборУпаковочнымиЛистами) Тогда
			ПерезаполнениеТабЧастейРОсВыделениемНеподобранныхВНовыйРО(Док, Об, Шаблон);
		КонецЕсли;		
		
	ИначеЕсли ИмяДока = "ПеремещениеТоваров" И Шаблон.БыстроеПеремещение Тогда
		Если Не Док.ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			УдалосьПровестиПеремещение = Истина;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	ИначеЕсли (Шаблон.ВидДокумента = "РасходныйОрдерНаТовары" Или Шаблон.ВидДокументаНового = "РасходныйОрдерНаТовары") 
		И Шаблон.ПерезаполнятьТЧТоварыПоРаспоряжениям Тогда
		
		обРасходныйОрдер = Неопределено;
		Если ТипЗнч(Док) = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
			обРасходныйОрдер  = Док;
		КонецЕсли;
		
		Если Не обРасходныйОрдер = Неопределено Тогда
			ПерезаполнениеТабЧастейРасхОрдераПоОтбору(обРасходныйОрдер, Док, Об, "ТоварыПоРаспоряжениям");
		КонецЕсли;
		
	ИначеЕсли Шаблон.ВидДокумента = "ОтборРазмещениеТоваров" И ИмяДока <> "ОтборРазмещениеТоваров" И Шаблон.ПроверкаОтборРазмещение Тогда
		
		СтатусОтбораРазмещенияТоваровПослеЗагрузки = ПараметрыДокумента.СтатусОтбораРазмещенияТоваровПослеЗагрузки;
		ИсходныйДок = Об.ИсходныйДокумент.ПолучитьОбъект();
		ИсходныйДок.Статус = СтатусОтбораРазмещенияТоваровПослеЗагрузки;
		Если СтатусОтбораРазмещенияТоваровПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда
			ПерезаполнитьПодчиненныйДокументОтборРазмещениеПриПроверке(ИсходныйДок, Об);
		КонецЕсли;	
		ИсходныйДок.Записать();	
	КонецЕсли;
	
КонецПроцедуры
Процедура ПроведениеИсходногоДокумента(ВидДокументаНового, ИсходныйДокумент)
	
	//ПРОВЕДЕНИЕ ИСХОДНОГО
	Попытка
		Если СокрЛП(ВидДокументаНового) <> "" Тогда
			ИсходныйДок = ИсходныйДокумент.ПолучитьОбъект();
			ИсходныйДок.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Zolla ++
Функция ДМ_ПолучитьУпакЛистПоШтрихкоду(ШК)
	
	Результат = Документы.УпаковочныйЛист.ПустаяСсылка();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УпаковочныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.КР_Штрихкод = &Штрихкод"); 
	
	Запрос.УстановитьПараметр("Штрихкод", ШК);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Zolla --

//ТАБЛИЧНАЯ ЧАСТЬ
Процедура ОчиститьТабличнуюЧасть(ТабличнаяЧасть) Экспорт
	ТабличнаяЧасть.Очистить();
КонецПроцедуры	
Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий, ПараметрыДокумента = Неопределено) Экспорт
	Перем СтруктураПараметровДействия;
	
	ЭтоКонфигурацияБеларуси = Ложь;
	Если ПараметрыДокумента <> Неопределено Тогда
		Попытка	ЭтоКонфигурацияБеларуси = ПараметрыДокумента.ЭтоКонфигурацияБеларуси Исключение КонецПопытки;
	КонецЕсли;
	
	СтруктураПолейТЧ = Новый Структура;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("Номенклатура");
		
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс", Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс", Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество" + Суффикс    , 0);
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");		
		
	КонецЕсли;
		
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("УсловиеЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		Или СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму), "КоличествоУпаковок", СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		
		Если ЭтоКонфигурацияБеларуси Тогда
			СтруктураПолейТЧ.Вставить("ЦенаСоСкидкой", 0);	
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа") Тогда
		СтруктураПолейТЧ.Вставить("СуммаСНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСверхЗаказа", 0);
		СтруктураПолейТЧ.Вставить("КодСтроки", 1);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовОбязательна", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовОбязательна");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		Или СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда
		
		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда
		
		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда
		
		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ + ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию") Тогда
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагиНедоборНеотгружаемыеИзлишкиНедостачи") Тогда
		СтруктураПолейТЧ.Вставить("ЕстьНедобор");
		СтруктураПолейТЧ.Вставить("ЕстьНеотгружаемые");
		СтруктураПолейТЧ.Вставить("ЕстьИзлишки");
		СтруктураПолейТЧ.Вставить("ЕстьНедостачи");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Помещение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Продавец");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
			
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для каждого ИмяПоляСтатус Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				Модуль_НоменклатураКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураКлиентСервер");
				Суффикс = Модуль_НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство("Серия" + Суффикс) Тогда
					СтруктураПолейТЧ.Вставить("Серия" + Суффикс);
					СтруктураПолейТЧ.Вставить("Номенклатура" + Суффикс);
					СтруктураПолейТЧ.Вставить("Характеристика" + Суффикс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		СтруктураПолейТЧ.Вставить("Количество");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПередачуВЭксплуатацию") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ФизическоеЛицо");
		СтруктураПолейТЧ.Вставить("ПередачаВЭксплуатацию");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПриемка") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
	КонецЕсли;	
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КодТНВЭД");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСпособОпределенияСебестоимости") Тогда
		СтруктураПолейТЧ.Вставить("СпособОпределенияСебестоимости");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ,ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции
Процедура ОбработатьСтрокуТЧ(Док, ИмяТЧ, СтрокаТабличнойЧасти, Шаблон, ПараметрыДокумента = Неопределено) Экспорт
	
	ИмяДока = Док.Метаданные().Имя;	
	ЭтоКАДляКазахстана = ДатаМобайл_ОбщийМодуль.ПроверкаИмениКонфигурации("КомплекснаяАвтоматизацияДляКазахстана");
	
	Модуль_ОбработкаТабличнойЧастиКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиКлиентСервер");
	Модуль_ОбщегоНазначенияКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	Модуль_Пользователи = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("Пользователи");
	Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
	
	Если ИмяДока = "РеализацияТоваровУслуг" Или ИмяДока = "ВозвратТоваровОтКлиента" Или ИмяДока = "ОтгрузкаТоваровСХранения" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли ИмяДока = "ПриобретениеТоваровУслуг" Или ИмяДока = "ЗаказПоставщику" Или ИмяДока = "АктОРасхожденияхПослеПриемки" Или ИмяДока = "ПриемкаТоваровНаХранение" Или ИмяДока = "ПоступлениеТоваровУслуг" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			СтруктураДействий.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли ИмяДока = "ОтборРазмещениеТоваров" Тогда
		Если ИмяТЧ = "ТоварыОтбор" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Отобрано");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
		ИначеЕсли ИмяТЧ = "ТоварыРазмещение" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Размещено");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли ИмяДока = "ЧекККМ" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЧекККМ));
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Док));
			
			СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад, Номенклатура, Характеристика", Док.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Модуль_Пользователи.ТекущийПользователь()));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
			
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);		
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Док.Склад, ПараметрыУказанияСерий));
			
			Если Не ЭтоКАДляКазахстана Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));
			КонецЕсли;
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);		
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);		
		КонецЕсли;	
		
	ИначеЕсли ИмяДока = "ЧекЕГАИС" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			УстановитьЦенуТовара(ТекущаяСтрока);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Модуль_Пользователи.ТекущийПользователь()));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			КэшированныеЗначения = Модуль_ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрокаСтруктура, СтруктураДействий, КэшированныеЗначения);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
		КонецЕсли;
	ИначеЕсли ИмяДока = "ЗаказКлиента" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий, ПараметрыДокумента);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.ДатаОтгрузки) Тогда
				ТекущаяСтрока.ДатаОтгрузки = Док.Дата;
			КонецЕсли;
			
			Если Не (ИмяДока = "ЗаказКлиента" И Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 5) Тогда
				Попытка ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить; Исключение КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ИмяДока = "РасходныйОрдерНаТовары" Тогда
		Если Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Или Док.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
			Попытка
				ТекущаяСтрока = СтрокаТабличнойЧасти;
				ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			Исключение
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ИмяДока = "ОрдерНаПеремещениеТоваров" Тогда
		Если ИмяТЧ = "ОтгружаемыеТовары" И (Док.Статус = Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке Или Док.Статус = Перечисления.СтатусыОрдеровНаПеремещение.Принят) Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		КонецЕсли;
	ИначеЕсли ИмяДока = "МаркировкаТоваровИСМП" Или ИмяДока = "ВыводИзОборотаИСМП" Или ИмяДока = "ВводОстатков" Тогда
		Если ИмяТЧ = "Товары" Тогда
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;
			
			Если ИмяДока = "МаркировкаТоваровИСМП" Тогда
				Попытка ПриЗаполненииСертификатовНоменклатуры(ТекущаяСтрока); Исключение КонецПопытки;			
			КонецЕсли; 
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);		
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
		КонецЕсли;
	ИначеЕсли ИмяДока = "ВозвратТоваровМеждуОрганизациями" Тогда
		
		Если ИмяТЧ = "Товары" Тогда
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВозвратТоваровМеждуОрганизациями));
			
			ДействияЦены = ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док);
			ДействияПересчетНДС = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Док);
			Действия = Новый Структура;
			
			ДействияПриЗаполненииСтавкиНДС = Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата);
			
			Действия.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);		
			Действия.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			Действия.Вставить("ПересчитатьКоличествоЕдиниц");
			Действия.Вставить("ЗаполнитьЦенуПродажи", ДействияЦены);
			Действия.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			Действия.Вставить("ПересчитатьСумму");
			Действия.Вставить("ПересчитатьСуммуНДС", ДействияПересчетНДС);
			Действия.Вставить("ПересчитатьСуммуСНДС", ДействияПересчетНДС);
			Действия.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Док.Склад, ПараметрыУказанияСерий));
			Действия.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, Действия);
			Попытка ТекущаяСтрокаСтруктура.ВидЦены = Док.ВидЦены; Исключение КонецПопытки;
			Попытка 
				Модуль_ОбработкаТабличнойЧастиВызовСервера = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиВызовСервера");
				Модуль_ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, Действия, Неопределено); 
			Исключение 
			КонецПопытки;
					
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ЭтапПроизводства2_2" Тогда
		
		Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			Модуль_ОбеспечениеПроизводства = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбеспечениеПроизводства"); 
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить(
			"ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
			Модуль_ОбеспечениеПроизводства.ПараметрыДействияЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(
			Док, Док.ВыходныеИзделия)); 
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			ТекущаяСтрокаСтруктура.Вставить("Производится", ТекущаяСтрока.Производится); 
			ТекущаяСтрокаСтруктура.Вставить("НазначениеОбеспечения", ТекущаяСтрока.НазначениеОбеспечения);
			ТекущаяСтрокаСтруктура.Вставить("Обособленно", ТекущаяСтрока.Обособленно);
			ТекущаяСтрокаСтруктура.Вставить("Назначение", ТекущаяСтрока.Назначение);
			
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);

		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры	
Процедура ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента, Док, ИмяТЧ, СтрокаТабличнойЧасти, ИсходныеДанные = Неопределено) Экспорт
	
	Шаблон = ПараметрыДокумента.Об.Шаблон; 
	ИмяДока = Док.Метаданные().Имя;	
	ЭтоКАДляКазахстана = ДатаМобайл_ОбщийМодуль.ПроверкаИмениКонфигурации("КомплекснаяАвтоматизацияДляКазахстана");
	
	Модуль_ОбработкаТабличнойЧастиКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиКлиентСервер");
	Модуль_ОбщегоНазначенияКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	Модуль_Пользователи = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("Пользователи");
	Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	Модуль_ПроизводствоКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПроизводствоКлиентСервер");
	Модуль_ЗаполнениеОбъектовПоСтатистикеИСМП = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ЗаполнениеОбъектовПоСтатистикеИСМП");
	
	Если ИмяДока = "РеализацияТоваровУслуг" Или ИмяДока = "ОтгрузкаТоваровСХранения" Тогда
		Если ИмяТЧ = "Товары" Тогда
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РеализацияТоваровУслуг));
			
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
						
			СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Док.Склад);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Док, СкладГруппа));
			
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Док.Партнер);
			СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПоставщика",
			Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Док,
			Истина
			)
			);
			
			Если ИмяДока = "ОтгрузкаТоваровСХранения" Тогда 
			ИначеЕсли ЗначениеЗаполнено(Док.Соглашение) Тогда
				СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Док));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док));
			КонецЕсли;
			
			Если Не ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
				Исключение
					НалогообложениеНДС = ПолучитьНалогообложениеНДСПоУмолчанию(Док.Организация, Док.Контрагент, Док.Соглашение, Док.Дата, Истина, Неопределено);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
				КонецПопытки;
			ИначеЕсли ИмяДока = "ОтгрузкаТоваровСХранения" Тогда
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСПоНоменклатуре");	
			Иначе
				Если ДатаМобайл_ОбщийМодуль.Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
				КонецЕсли;	
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));	
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			
			Попытка Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено); Исключение КонецПопытки;
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
			Если Шаблон.ВидДокументаНового = "РеализацияТоваровУслуг" И Шаблон.ВидДокумента = "ЗаказКлиента" Тогда
				Если Не ПараметрыДокумента.Об.ИсходныйДокумент.Пустая() Тогда
					СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
					СтрокиПоиска = ПараметрыДокумента.Об.ИсходныйДокумент.Товары.НайтиСтроки(СтруктураПоиска);
					Если СтрокиПоиска.Количество() > 0 Тогда
						
						// вид цен
						Попытка
							СтрокаТабличнойЧасти.ВидЦены = СтрокиПоиска[0].ВидЦены;
						Исключение КонецПопытки;
						
						//пересчитать по коэффициенту
						Попытка 
							КоэффициентУпаковкиЗаказ = СтрокиПоиска[0].Упаковка.Числитель / СтрокиПоиска[0].Упаковка.Знаменатель;
							КоэффициентУпаковкиЗаказ = ?(КоэффициентУпаковкиЗаказ = 0, 1, КоэффициентУпаковкиЗаказ);
						Исключение
							КоэффициентУпаковкиЗаказ = ?(СтрокиПоиска[0].Упаковка.Числитель = 0, 1, СтрокиПоиска[0].Упаковка.Числитель);
						КонецПопытки;
						
						Попытка 
							КоэффициентУпаковкиРеализация = СтрокаТабличнойЧасти.Упаковка.Числитель / СтрокаТабличнойЧасти.Упаковка.Знаменатель;
							КоэффициентУпаковкиРеализация = ?(КоэффициентУпаковкиРеализация = 0, 1, КоэффициентУпаковкиРеализация);
						Исключение
							КоэффициентУпаковкиРеализация = ?(СтрокаТабличнойЧасти.Упаковка.Числитель = 0, 1, СтрокаТабличнойЧасти.Упаковка.Числитель);
						Конецпопытки;
						
						Попытка
							СтрокаТабличнойЧасти.Цена = СтрокиПоиска[0].Цена / КоэффициентУпаковкиЗаказ * КоэффициентУпаковкиРеализация;
						Исключение
							СтрокаТабличнойЧасти.Цена = СтрокиПоиска[0].Цена;
						КонецПопытки;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 		
			
			Попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказКлиента.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() > 0 Тогда
					СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			Исключение КонецПопытки;			
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ВозвратТоваровОтКлиента" Тогда
		
		Если Шаблон.ВидДокументаНового = "ВозвратТоваровОтКлиента" И Шаблон.ВидДокумента = "РеализацияТоваровУслуг" Тогда
			
			Если Не ПараметрыДокумента.Об.ИсходныйДокумент.Пустая() Тогда
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = ПараметрыДокумента.Об.ИсходныйДокумент.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоиска[0]);
					СтрокаТабличнойЧасти.Количество = 0;
					СтрокаТабличнойЧасти.КоличествоУпаковок = 0;
					СтрокаТабличнойЧасти.ДокументРеализации = ПараметрыДокумента.Об.ИсходныйДокумент;
					СтрокаТабличнойЧасти.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;
				КонецЕсли;
			КонецЕсли; 
			
		Иначе
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			
			СтруктураДействий = Новый Структура;		
			СтруктураДействий.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);		
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
						
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Док));
						
			Если Не ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
				Исключение
					НалогообложениеНДС = ПолучитьНалогообложениеНДСПоУмолчанию(Док.Организация, Док.Контрагент, Док.Соглашение, Док.Дата, Истина, Неопределено);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
				КонецПопытки;
			Иначе
				Если ДатаМобайл_ОбщийМодуль.Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
				КонецЕсли;	
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
						
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			
			Попытка
				ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
				
				Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Док.Соглашение) Тогда
					СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Док));
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
			СтруктураДействий.Вставить("ЗаполнитьСпособОпределенияСебестоимости", Перечисления.СпособыОпределенияСебестоимости.ИзТекущегоДокумента);
			
			СтруктураПараметровСебестоимости = Новый Структура;
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
			
			СтруктураПараметровСебестоимости.Вставить("НалогообложениеНДС", Док.НалогообложениеНДС);
			СтруктураПараметровСебестоимости.Вставить("ВалютаУправленческогоУчета", ВалютаУправленческогоУчета);
			СтруктураПараметровСебестоимости.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
			СтруктураПараметровСебестоимости.Вставить("ИспользоватьРеглУчет", ИспользоватьРеглУчет);
			
			СтруктураДействий.Вставить("ЗаполнитьСпособОпределенияСебестоимостиСтрокой", СтруктураПараметровСебестоимости);
									
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			Попытка Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено); Исключение КонецПопытки;
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);			
			
		КонецЕсли;		
				
	ИначеЕсли ИмяДока = "ПриобретениеТоваровУслуг" Или ИмяДока = "ПоступлениеТоваровУслуг" Или ИмяДока = "АктОРасхожденияхПослеПриемки" Или ИмяДока = "ПриемкаТоваровНаХранение" Тогда
		Если ИмяТЧ = "Товары" Тогда
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			
			Если ЗначениеЗаполнено(Док.Соглашение) И Не ЗначениеЗаполнено(ТекущаяСтрока.ВидЦеныПоставщика) Тогда
				ТекущаяСтрока.ВидЦеныПоставщика = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док.Соглашение, "ВидЦеныПоставщика");
			КонецЕсли;
			
			СтруктураДействий = Новый Структура;		
			СтруктураДействий.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);		
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			
			Если ИмяДока <> "АктОРасхожденияхПослеПриемки" Тогда
				СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Док.Склад);
				СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Док, СкладГруппа));
			КонецЕсли;
			
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Док.Партнер);
			СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПоставщика",
			Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Док,
			Истина
			)
			);
			
			СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Док));	 
			
			Если Не ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
				Исключение
					НалогообложениеНДС = ПолучитьНалогообложениеНДСПоУмолчанию(Док.Организация, Док.Контрагент, Док.Соглашение, Док.Дата, Истина, Неопределено);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
				КонецПопытки;
			ИначеЕсли ИмяДока = "ПриемкаТоваровНаХранение" Тогда
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСПоНоменклатуре");
			Иначе
				Если ДатаМобайл_ОбщийМодуль.Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
				КонецЕсли;	
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
			
			Если ИмяДока = "ПриобретениеТоваровУслуг" Тогда
				Если ТекущаяСтрока.ПроцентРучнойСкидки <> 0 Тогда
					СтруктураДействий.Удалить("ПересчитатьСуммуСУчетомРучнойСкидки");		
				КонецЕсли;
				
				Если ТекущаяСтрока.Цена <> 0 Тогда
					СтруктураДействий.Удалить("ЗаполнитьЦенуЗакупки");	
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			Попытка Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено); Исключение КонецПопытки;
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
						
			Если ИсходныеДанные <> Неопределено Тогда
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = ИсходныеДанные.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() > 0 Тогда
					Попытка
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоиска[0],, "Упаковка,Серия,Количество,КоличествоУпаковок");
					Исключение
						Попытка ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоиска[0],, "Упаковка,Количество,КоличествоУпаковок"); Исключение КонецПопытки;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Если (Шаблон.ВидДокументаНового = "ПриобретениеТоваровУслуг" Или Шаблон.ВидДокументаНового = "ПоступлениеТоваровУслуг") И Шаблон.ВидДокумента = "ЗаказПоставщику" Тогда
				Если Не ПараметрыДокумента.Об.ИсходныйДокумент.Пустая() Тогда
					СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
					СтрокиПоиска = ПараметрыДокумента.Об.ИсходныйДокумент.Товары.НайтиСтроки(СтруктураПоиска);
					Если СтрокиПоиска.Количество() > 0 Тогда
						СтрокаТабличнойЧасти.Цена = СтрокиПоиска[0].цена;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказПоставщику.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() > 0 Тогда
					СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;	
				
	ИначеЕсли ИмяДока = "ОтборРазмещениеТоваров" Тогда
		Если ИмяТЧ = "ТоварыОтбор" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Отобрано");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
					
		ИначеЕсли ИмяТЧ = "ТоварыРазмещение" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Размещено");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);	
			
		КонецЕсли;	
						
	ИначеЕсли ИмяДока = "ЧекККМ" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Док));
			
			Если Не ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
			Иначе
				Если ДатаМобайл_ОбщийМодуль.Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
				КонецЕсли;	
			КонецЕсли;
			
			СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад, Номенклатура, Характеристика", Док.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Модуль_Пользователи.ТекущийПользователь()));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
			
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);		
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			
			Если Не ЭтоКАДляКазахстана Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));
			КонецЕсли;
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);		
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
		КонецЕсли;		
		
	ИначеЕсли ИмяДока = "ЗаказКлиента" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
			
			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;			
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			
			Если ЗначениеЗаполнено(Док.Соглашение) Тогда
				СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Док));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док));
			КонецЕсли;
			
			Если Не ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
				Исключение
					НалогообложениеНДС = ПолучитьНалогообложениеНДСПоУмолчанию(Док.Организация, Док.Контрагент, Док.Соглашение, Док.Дата, Истина, Неопределено);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
				КонецПопытки;	
			Иначе
				Если ДатаМобайл_ОбщийМодуль.Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
				КонецЕсли;	
			КонецЕсли;
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
			Попытка
				СтруктураДействий.Вставить("ЗаполнитьСодержание", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Новый Структура("ХозяйственнаяОперация", Док.ХозяйственнаяОперация), Ложь));
			Исключение
				СтруктураДействий.Вставить("ЗаполнитьСодержание", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Док, Ложь));
			КонецПопытки;	
			СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий, ПараметрыДокумента);			
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
			ТекущаяСтрока.Склад = Док.Склад;
						
		КонецЕсли;	
	ИначеЕсли ИмяДока = "ПеремещениеТоваров" Тогда
		Если ИмяТЧ = "Товары" Тогда
			Попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказНаПеремещение.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() > 0 Тогда
					СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ДвижениеПродукцииИМатериалов" Тогда
		Если ИмяТЧ = "Товары" Тогда
			Попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.Распоряжение.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() > 0 Тогда
					СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ВнутреннееПотреблениеТоваров" Или ИмяДока = "ВнутреннееПотребление" Тогда
		Если ИмяТЧ = "Товары" Тогда
			Попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказНаВнутреннееПотребление.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() > 0 Тогда
					СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ИмяДока = "РасходныйОрдерНаТовары" Тогда
		Попытка
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		Исключение
		КонецПопытки;		
	ИначеЕсли ИмяДока = "ОрдерНаПеремещениеТоваров" Тогда
		Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		КонецЕсли;	
	ИначеЕсли ИмяДока = "МаркировкаТоваровИСМП" Или  ИмяДока = "ВыводИзОборотаИСМП" Или ИмяДока = "ВводОстатков" Тогда
		Если ИмяТЧ = "Товары" Тогда
			
			Если ИмяДока = "ВыводИзОборотаИСМП" И (Шаблон.ВидДокументаНового = "ВыводИзОборотаИСМП" Или ТипЗнч(ПараметрыДокумента.Об.ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказКлиента")) Тогда
				Если ЗначениеЗаполнено(Док.ДокументОснование) Тогда
					СтрокаТабличнойЧасти.Цена = ПолучитьЦенуТовараИзДокументаОснования(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, Док.ДокументОснование);
				КонецЕсли;	
			КонецЕсли;	
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
				ТекущаяСтрока.Характеристика);
				
				СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
			КонецЕсли;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Артикул") Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			КонецЕсли;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
			КонецЕсли;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СтавкаНДС") Тогда
				Если ДатаМобайл_ОбщийМодуль.Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"), Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"), Док.Дата));
				КонецЕсли;	
			КонецЕсли;
			
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;
			
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
				СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
			КонецЕсли;			
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);		
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
		КонецЕсли;
	ИначеЕсли ИмяДока = "ВыпускПродукции" Тогда
		
		ТекущаяСтрока = СтрокаТабличнойЧасти;
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВыпускПродукции));
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Док, Ложь));
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
		Если Док.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение Тогда
			ПараметрыПроверкиСерий.Склад = ТекущаяСтрока.Подразделение;
		Иначе
			ПараметрыПроверкиСерий.Склад = ТекущаяСтрока.Склад;
		КонецЕсли;
		
		ТекущаяСтрока.ТипСтоимости = ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается");
		
		ПараметрыПроверкиСерий.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
		СтруктураЗаполненияЦены = ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док);
		СтруктураЗаполненияЦены.Вставить("ВидЦены", Док.ВидЦены);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
		ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);		
		Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
		
	ИначеЕсли ИмяДока = "ВозвратТоваровМеждуОрганизациями" Тогда	
		
		Если ИмяТЧ = "Товары" Тогда
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВозвратТоваровМеждуОрганизациями));
			
			ДействияЦены = ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док);
			ДействияПересчетНДС = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Док);
			Действия = Новый Структура;
			
			ДействияПриЗаполненииСтавкиНДС = Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата);
			
			Действия.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);		
			Действия.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			Действия.Вставить("ЗаполнитьСтавкуНДС", ДействияПриЗаполненииСтавкиНДС);
			Действия.Вставить("ПересчитатьКоличествоЕдиниц");
			Действия.Вставить("ЗаполнитьЦенуПродажи", ДействияЦены);
			Действия.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			Действия.Вставить("ПересчитатьСумму");
			Действия.Вставить("ПересчитатьСуммуНДС", ДействияПересчетНДС);
			Действия.Вставить("ПересчитатьСуммуСНДС", ДействияПересчетНДС);
			Действия.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Док.Склад, ПараметрыУказанияСерий));
			Действия.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, Действия);
			Попытка ТекущаяСтрокаСтруктура.ВидЦены = Док.ВидЦены; Исключение КонецПопытки;
			Попытка 
				Модуль_ОбработкаТабличнойЧастиВызовСервера = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиВызовСервера");
				Модуль_ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, Действия, Неопределено); 
			Исключение 
			КонецПопытки;
						
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ПроизводствоБезЗаказа" Тогда
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура; 
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);		
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));		
			СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));		
			
			ПараметрыРаспределенияЗатратСтруктура = Документы[ИмяДока].ПараметрыРаспределенияЗатрат(Док);
			ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
						
			Модуль_УправлениеДаннымиОбИзделиях = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("УправлениеДаннымиОбИзделиях");
			Модуль_УправлениеДаннымиОбИзделияхКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("УправлениеДаннымиОбИзделияхКлиентСервер");
			
			ПараметрыВыбораСпецификаций = Модуль_УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Док, Документы[ИмяДока]);
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			ТекущаяСтрокаСтруктура.Вставить("НаправлениеДеятельности", Док.НаправлениеДеятельности);
			ТекущаяСтрокаСтруктура.Вставить("Спецификация", ТекущаяСтрока.Спецификация);
			ТекущаяСтрокаСтруктура.Вставить("НаправлениеВыпуска", ТекущаяСтрока.НаправлениеВыпуска);
			
			Попытка
				СтруктураЗаполненияСпецификации = Модуль_УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(Док, ТекущаяСтрокаСтруктура, ПараметрыВыбораСпецификаций);
			Исключение
				Попытка СтруктураЗаполненияСпецификации = Модуль_УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(Док.Дата, Док.Подразделение, ПараметрыВыбораСпецификаций); Исключение КонецПопытки;
			КонецПопытки;
			
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
			
			СтруктураДействий.Вставить("ЗаполнитьНаправлениеВыпуска", Новый Структура);
			СтруктураДействий.ЗаполнитьНаправлениеВыпуска.Вставить("ИспользоватьСписаниеНаРасходы");			
						
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
		КонецЕсли;
	ИначеЕсли ИмяДока = "ПоступлениеОтПереработчика" Тогда
		Если ИмяТЧ = "Товары" Тогда
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПоступлениеОтПереработчика));
			
			СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Док.Склад);
			
			ПараметрыУказанияСклада = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(
			Док,
			СкладГруппа);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить(
			"ПересчитатьКоличествоЕдиниц", Модуль_ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад",               ПараметрыУказанияСклада);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",       Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",               Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",        Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий.Товары));
			СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая"); 
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			ТекущаяСтрокаСтруктура.Вставить("ЦеховаяКладовая", Ложь);
			
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ЗаказМатериаловВПроизводство" Тогда
		Если ИмяТЧ = "Товары" Тогда		
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ЗаказНаЭмиссиюКодовМаркировкиСУЗ" Тогда
		Если ИмяТЧ = "Товары" Тогда
			СтрокиДляОбработки = Новый Массив;
			СтрокиДляОбработки.Добавить(СтрокаТабличнойЧасти);
			Попытка Модуль_ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамЗаказаНаЭмиссиюКодовМаркировкиСУЗ(Док, СтрокиДляОбработки); Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект, ВидЦеныВШапке = Ложь)
	
	СтруктураЗаполненияЦены = Новый Структура;            
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
			СтруктураЗаполненияЦены.Вставить("Дата", Объект.ЗаказКлиента.Дата);
		Иначе
			СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
		КонецЕсли;
	Иначе
		СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
	КонецЕсли;
	
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	
	Если ВидЦеныВШапке Тогда
		СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции
Функция ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект)
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",    Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",  Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции
Функция УстановитьСерииВдокументе(Док) Экспорт
	
	МетаданныеДока = Док.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	Если ИмяДока = "РасходныйОрдерНаТовары" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РасходныйОрдерНаТовары));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям); 	
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ОтгружаемыеТовары); 			
	ИначеЕсли ИмяДока = "СборкаТоваров" Тогда			
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.СборкаТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док,ПараметрыУказанияСерий.ТЧ);
	ИначеЕсли ИмяДока = "ЗаказНаСборку" Тогда			
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказНаСборку));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док,ПараметрыУказанияСерий.ТЧ);	
	ИначеЕсли ИмяДока = "ПриходныйОрдерНаТовары" Тогда			
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПриходныйОрдерНаТовары));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ОтборРазмещениеТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ОтборРазмещениеТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Отбор); 	
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Размещение);
	ИначеЕсли ИмяДока = "УпаковочныйЛист" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.УпаковочныйЛист));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли ИмяДока = "ПрочееОприходованиеТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПрочееОприходованиеТоваров));
		Попытка
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	 
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Серии);
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ВидыЗапасов);
		Исключение
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
		КонецПопытки;
	ИначеЕсли ИмяДока = "РеализацияТоваровУслуг" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РеализацияТоваровУслуг));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли ИмяДока = "ПоступлениеТоваровУслуг" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПоступлениеТоваровУслуг));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ПриобретениеТоваровУслуг" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПриобретениеТоваровУслуг));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли ИмяДока = "ПеремещениеТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПеремещениеТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 
	ИначеЕсли ИмяДока = "ВнутреннееПотреблениеТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВнутреннееПотреблениеТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 
	ИначеЕсли ИмяДока = "ВнутреннееПотребление" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВнутреннееПотребление));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 		
	ИначеЕсли ИмяДока = "ПересчетТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПересчетТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли ИмяДока = "ДвижениеПродукцииИМатериалов" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ДвижениеПродукцииИМатериалов));
		Попытка
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	 
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Серии);
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ВидыЗапасов);
		Исключение
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
		КонецПопытки;
	ИначеЕсли ИмяДока = "ПриемкаТоваровНаХранение" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПриемкаТоваровНаХранение));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли ИмяДока = "ОтгрузкаТоваровСХранения" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ОтгрузкаТоваровСХранения));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 
	ИначеЕсли ИмяДока = "ТТНИсходящаяЕГАИС" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ТТНИсходящаяЕГАИС));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли ИмяДока = "ЧекККМ" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЧекККМ));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ПроизводствоБезЗаказа" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПроизводствоБезЗаказа));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ВыходныеИзделия); 	
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ПобочныеИзделия);
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.МатериалыИРаботы);
	ИначеЕсли ИмяДока = "ЗаказКлиента" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли ИмяДока = "ОрдерНаПеремещениеТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ОрдерНаПеремещениеТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ОрдерНаОтражениеИзлишковТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ОрдерНаОтражениеИзлишковТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ПоступлениеТоваровНаСклад" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПоступлениеТоваровНаСклад));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);		
	ИначеЕсли ИмяДока = "ВводОстатков" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВводОстатков));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ЗаказМатериаловВПроизводство" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказМатериаловВПроизводство));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли ИмяДока = "ЗаказМатериаловВПроизводство" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказМатериаловВПроизводство));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли ИмяДока = "ВозвратТоваровПоставщику" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВозвратТоваровПоставщику));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);			
	КонецЕсли; 
		
КонецФункции	
Функция УстановитьЦенуТовара(СтрокаТЧ)
	
	зпр = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,ВидЦены = &ВидЦены И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних");
	
	зпр.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.НайтиПоРеквизиту("ИспользоватьПриПродаже", Истина));	
	зпр.УстановитьПараметр("Номенклатура", СтрокаТЧ.Номенклатура);
	
	рез = зпр.Выполнить().Выгрузить();
	Если Рез.Количество() > 0 Тогда
		СтрокаТЧ.Цена = Рез[0].Цена;	
	КонецЕсли;
	
КонецФункции	
Процедура УстановитьАвтора(Док, Авт, ЭтоНовыйДокумент, Шаблон) Экспорт
	
	Если Шаблон.НеИзменятьОтветственногоМенеджера Тогда
		Возврат;	
	КонецЕсли;
	
	РеквизитыДока = Док.Метаданные().Реквизиты;
	
	Попытка 
		ЕстьРеквизитИсполнитель = РеквизитыДока.Найти("Исполнитель") <> Неопределено;
	Исключение
		ЕстьРеквизитИсполнитель = Ложь;
	КонецПопытки;
	
	Если ЕстьРеквизитИсполнитель Тогда
		Док.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию(авт, Ложь);
	КонецЕсли;
	
	Попытка 
		ЕстьРеквизитКонтролер = РеквизитыДока.Найти("Контролер") <> Неопределено;
	Исключение
		ЕстьРеквизитКонтролер = Ложь;
	КонецПопытки;
	
	Если ЕстьРеквизитКонтролер Тогда
		Док.Контролер = Справочники.Пользователи.НайтиПоНаименованию(авт, Ложь);
	КонецЕсли;
	
	Если ЭтоНовыйДокумент Или (Не ЕстьРеквизитИсполнитель И Не ЕстьРеквизитКонтролер) Тогда
		Попытка
			Док.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(авт, Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ЭтоНовыйДокумент Тогда
		Попытка
			Док.Кассир = Справочники.Пользователи.НайтиПоНаименованию(авт, Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ЭтоНовыйДокумент Тогда
		Попытка
			Док.Менеджер = Справочники.Пользователи.НайтиПоНаименованию(авт, Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
Функция УстановитьСкладПоЯчейке(Док, ЯчейкаСсылка) Экспорт
	
	Попытка
		Если Не ЗначениеЗаполнено(Док.Склад) И ЗначениеЗаполнено(ЯчейкаСсылка) Тогда				
			Док.Склад = ЯчейкаСсылка.Владелец;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Док.Помещение) И ЗначениеЗаполнено(ЯчейкаСсылка) Тогда
			Док.Помещение = ЯчейкаСсылка.Помещение;
		КонецЕсли;		
	Исключение
	КонецПопытки;
	
КонецФункции
Функция УстановитьЕдиницу(СтрокаТЧ, Док = Неопределено) Экспорт
	
	зпр = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Штрихкоды.Упаковка КАК ЕИ,
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика
	|ПОМЕСТИТЬ тШтрихкоды
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод В (&МассивШК)
	|	И (&ВсяНоменклатура
	|			ИЛИ Штрихкоды.Номенклатура = &Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тШтрихкоды.ЕИ,
	|	тШтрихкоды.Номенклатура,
	|	тШтрихкоды.Характеристика
	|ИЗ
	|	тШтрихкоды КАК тШтрихкоды");
	
	Barcode = СтрокаТЧ.Штрихкод;
	МассивШК = Новый Массив;
	МассивШК.Добавить(Barcode);		
	Если СтрДлина(Barcode) = 20 И Лев(Barcode,2) = "00" Тогда					 
		Barcode2 = "(00)" + Сред(Barcode, 3, 18);
		МассивШК.Добавить(Barcode2);
	ИначеЕсли СтрДлина(Barcode) = 22 И Лев(Barcode,2) = "(00)" Тогда					 
		Barcode2 = "00" + Сред(Barcode, 5, 18);	
		МассивШК.Добавить(Barcode2);
	КонецЕсли;
	
	зпр.УстановитьПараметр("МассивШК", МассивШК);
	зпр.УстановитьПараметр("Номенклатура", СтрокаТЧ.Номенклатура);
	зпр.УстановитьПараметр("ВсяНоменклатура", СтрокаТЧ.Номенклатура.Пустая());
	рез = зпр.Выполнить().Выгрузить();
	Если Рез.Количество() > 0 Тогда
		СтрокаТЧ.ЕдиницаИзмерения = Рез[0].ЕИ;
		Если СтрокаТЧ.Номенклатура.Пустая() Тогда
			СтрокаТЧ.Номенклатура = Рез[0].Номенклатура;
		КонецЕсли;	
		Если СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая() Тогда
			СтрокаТЧ.ХарактеристикаНоменклатуры = Рез[0].Характеристика;
		КонецЕсли;	
	КонецЕсли;
		
	//УПАКОВКИ ДЛЯ АДРЕСНЫХ СКЛАДОВ И ВВОДА ТМЦ ВРУЧНУЮ
	Если СтрокаТЧ.ЕдиницаИзмерения.Пустая() И СтрокаТЧ.Штрихкод = "" И (Не СтрокаТЧ.Номенклатура.Пустая()) И (Не Док = Неопределено) Тогда
		АдресныйСклад = Ложь;
		Попытка
			Если Док.Склад.ИспользоватьАдресноеХранение Или Док.Помещение.ИспользоватьАдресноеХранение Тогда
				АдресныйСклад = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если АдресныйСклад Тогда
			зпр = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	Штрихкоды.Упаковка КАК ЕИ,
			|	Штрихкоды.Номенклатура,
			|	Штрихкоды.Характеристика,
			|	Минимум(ЕстьNull(Штрихкоды.Упаковка.Числитель,1)) КАК КФ
			|ПОМЕСТИТЬ тШтрихкоды
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
			|ГДЕ
			|	(Штрихкоды.Номенклатура = &Номенклатура)
			|	И (Штрихкоды.Характеристика = &Характеристика)
			|СГРУППИРОВАТЬ ПО
			|	Штрихкоды.Упаковка,
			|	Штрихкоды.Номенклатура,
			|	Штрихкоды.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	тШтрихкоды.ЕИ,
			|	тШтрихкоды.КФ,
			|	тШтрихкоды.Номенклатура,
			|	тШтрихкоды.Характеристика
			|ИЗ
			|	тШтрихкоды КАК тШтрихкоды");
					
			зпр.УстановитьПараметр("Номенклатура", СтрокаТЧ.Номенклатура);
			зпр.УстановитьПараметр("Характеристика", СтрокаТЧ.ХарактеристикаНоменклатуры);
			рез = зпр.Выполнить().Выгрузить();
			Если Рез.Количество() > 0 Тогда
				СтрокаТЧ.ЕдиницаИзмерения = Рез[0].ЕИ;
				Попытка
					СтрокаТЧ.Количество = СтрокаТЧ.Количество / ?(Рез[0].КФ = 0, 1, Рез[0].КФ);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции	
Функция ВернутьКоэффициент(Номенклатура, ЕдиницаИзмерения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товар", Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаИЗмерения", ЕдиницаИзмерения);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УпаковкиНоменклатуры.Знаменатель=0 ИЛИ УпаковкиНоменклатуры.Числитель=0 ТОГДА 1
	|		ИНАЧЕ
	|				ЕСТЬNULL(УпаковкиНоменклатуры.Числитель/УпаковкиНоменклатуры.Знаменатель,1)
	|		КОНЕЦ КАК Коэффициент	 
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	И УпаковкиНоменклатуры.Владелец = &Товар";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Коэффициент;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФУнкции
Функция ПолучитьЦенуТовараИзДокументаОснования(Номенклатура, Характеристика, ДокументОснование);
	
	ТекущаяЦена = 0;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		зпр = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументТовары.Цена КАК Цена
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка = &ДокументОснование
		|	И ДокументТовары.Номенклатура = &Номенклатура
		|	И ДокументТовары.Характеристика = &Характеристика");
		
		зпр.УстановитьПараметр("ДокументОснование", ДокументОснование);
		зпр.УстановитьПараметр("Номенклатура", Номенклатура);	
		зпр.УстановитьПараметр("Характеристика", Характеристика);
		
		рез = зпр.Выполнить().Выгрузить();
		Если Рез.Количество() > 0 Тогда
			ТекущаяЦена = Рез[0].Цена;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущаяЦена;
	
КонецФункции	
Процедура ЗаполнитьНазначениеВСтрокеТЧ(ПараметрыДокумента, лСтруктураПоиска, СтрокаТабличнойЧасти)	
	Если лСтруктураПоиска.Свойство("Ячейка") Тогда
		лСтруктураПоиска.Удалить("Ячейка");		
	КонецЕсли; 
	
	СтрокиПоискаВИсх = ПараметрыДокумента.ИсходныйДокумент.Товары.НайтиСтроки(лСтруктураПоиска);
	Если СтрокиПоискаВИсх.Количество() = 0 Тогда
		лСтруктураПоиска.Удалить("Упаковка");
		СтрокиПоискаВИсх = ПараметрыДокумента.ИсходныйДокумент.Товары.НайтиСтроки(лСтруктураПоиска);
	КонецЕсли;	
	
	Если СтрокиПоискаВИсх.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.Назначение = СтрокиПоискаВИсх[0].Назначение;
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Упаковка) Тогда
			СтрокаТабличнойЧасти.Упаковка = СтрокиПоискаВИсх[0].Упаковка;	
		КонецЕсли; 
	КонецЕсли;	
КонецПроцедуры	
Функция ИспользуетсяСправочноеУказаниеСерий(Склад, ВидНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.Ссылка.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий)
	|			ТОГДА ИСТИНА
	|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СправочноеУказаниеСерий,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|ГДЕ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка = &ВидНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.Ссылка.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий)
	|			ТОГДА ИСТИНА
	|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|ГДЕ
	|	ВременнаяТаблица.СправочноеУказаниеСерий";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;	
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
Функция ПолучитьБазовуюУпаковкуНоменклатуры(Номенклатура)
	
	Если Номенклатура.ИспользоватьУпаковки Тогда
		
		ЗапросУпаковок = Новый Запрос;
		ЗапросУпаковок.УстановитьПараметр("Номенклатура", Номенклатура);
		ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокНоменклатура", Номенклатура.НаборУпаковок);
		ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокВидНоменклатуры", Номенклатура.ВидНоменклатуры.НаборУпаковок);
		ЗапросУпаковок.УстановитьПараметр("Коэффициент", 1);	
		ЗапросУпаковок.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	УпаковкиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Владелец = &Номенклатура
		|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокНоменклатура
		|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокВидНоменклатуры
		|	И УпаковкиНоменклатуры.Числитель = &Коэффициент";
		
		ВыборкаУпаковок = ЗапросУпаковок.Выполнить().Выбрать();                            
		лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
		Если ВыборкаУпаковок.Следующий() Тогда
			лУпак = ВыборкаУпаковок.ССылка;
		Иначе
			лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();	
		КонецЕсли;		
		
	Иначе
		лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;	
	
	Возврат лУпак;
	
КонецФункции
Процедура ПриЗаполненииСертификатовНоменклатуры(ТекущаяСтрока)
	
	Модуль_ИнтеграцияИСПереопределяемый = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтеграцияИСПереопределяемый");
	
	СертификатыНоменклатуры = Новый Соответствие;
	
	МассивТоваров = Новый Массив;
	МассивТоваров.Добавить(ТекущаяСтрока.Номенклатура);
	
	Модуль_ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(МассивТоваров, СертификатыНоменклатуры);
	
	Если СертификатыНоменклатуры.Количество() > 0 Тогда		
		СтрокаСертифкации = СертификатыНоменклатуры.Получить(ТекущаяСтрока.Номенклатура)[0];
		
		ТекущаяСтрока.ВидДокументаСертификации   = СтрокаСертифкации.ВидСертификации;
		ТекущаяСтрока.НомерДокументаСертификации = СтрокаСертифкации.НомерСертификации;
		ТекущаяСтрока.ДатаДокументаСертификации  = СтрокаСертифкации.ДатаСертификации;
		Попытка ТекущаяСтрока.НомерСкважины = СтрокаСертифкации.НомерСкважины; Исключение КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры

//ЕГАИС
Функция ПолучитьДокументЕГАИС(ДокументЕГАИС, Задание, ЭтоНовыйДокумент)
	
	ЕстьРасхождения = Ложь;
	
	Если Задание.Шаблон.ВидДокумента = "ДатаМобайл_УпаковочныйЛист" И Задание.Шаблон.ИспользованиеУпаковочныхЛистовПодбор <> 0 Тогда
		//Используется только для работы на ТСД в 1С это признак что надо сформировать упаковки
		СтрокаОшибок = "";
		ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист_ЕГАИС(ДокументЕГАИС, Задание, ЭтоНовыйДокумент,СтрокаОшибок);
		Возврат "";
	КонецЕсли;
	
	Если ДокументЕГАИС = Неопределено Тогда
		ДокументЕГАИС = Документы[Задание.Шаблон.ВидДокумента].СоздатьДокумент();
		ЭтоНовыйДокумент = Истина;
	КонецЕсли;
	
	МетаданныеДока = ДокументЕГАИС.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	
	ПараметрыДокумента = СобратьПараметрыЕГАИС(ДокументЕГАИС, Задание);
	
	Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2 И Не ПараметрыДокумента.ЭтоВходящееНаправление Тогда
		ОчиститьТабличнуюЧасть(ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор]);
	КонецЕсли;
	
	Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2 И ПараметрыДокумента.ЕстьТЧМарок Тогда
		ОчиститьТабличнуюЧасть(ДокументЕГАИС["АкцизныеМарки"]);
	КонецЕсли;
	
	Если ПараметрыДокумента.ЭтоВходящееНаправление Тогда
		ТЗМарок = ДатаМобайл_ОбщийМодуль.ПолучитьМаркиВходящейТТН_ЕГАИС(ДокументЕГАИС.Ссылка);
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт И Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
		Для каждого СтрокаИсходного Из ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор] Цикл
			Попытка СтрокаИсходного.КоличествоФакт = 0; Исключение КонецПопытки;
		КонецЦикла;		
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитКоличество И Не ПараметрыДокумента.ЭтоВходящееНаправление И Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда
		Для каждого СтрокаИсходного Из ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор] Цикл
			Попытка СтрокаИсходного.Количество = 0; Исключение КонецПопытки;
			Попытка СтрокаИсходного.КоличествоУпаковок = 0; Исключение КонецПопытки;
		КонецЦикла;		
	КонецЕсли;
			
	Попытка
		КомментДока = Задание.Комментарий;
		
		Если Не Задание.Шаблон.АвтоматическийКомментарийИспользовать Тогда
			КомментДМ = "";
		Иначе
			КомментДМ = "" + СокрЛП(Задание.Шаблон.АвтоматическийКомментарий) + " (" + ТекущаяДата() + "). " + Символы.ПС;
		КонецЕсли; 
				
		Если Задание.Шаблон.ЗагружатьКомментарий = 1 Тогда  // До комментария документа 
			КомментДока = КомментДМ + ДокументЕГАИС.Комментарий;
			ДокументЕГАИС.Комментарий = КомментДока;
		ИначеЕсли Задание.Шаблон.ЗагружатьКомментарий = 2 Тогда // После комментария документа
			КомментДока = ДокументЕГАИС.Комментарий + КомментДМ;
			ДокументЕГАИС.Комментарий = КомментДока;
		КонецЕсли;
		
		//автокомментарий:
		Если Задание.Шаблон.АвтоматическийКомментарийИспользовать Тогда
			АвтоКомментарий = Задание.Шаблон.АвтоматическийКомментарий;
			Если Не ЗначениеЗаполнено(ДокументЕГАИС.Комментарий) И ЗначениеЗаполнено(АвтоКомментарий) Тогда
				ДокументЕГАИС.Комментарий = СокрЛП(АвтоКомментарий);	
			КонецЕсли;	
		КонецЕсли;        				
	Исключение
	КонецПопытки;
		
	РеквизитМагазин = Неопределено;
	ВидЦены = Неопределено;
	Если Не ПараметрыДокумента.ЕстьРеквизитМагазин Тогда
		Если ПараметрыДокумента.ЕстьРеквизитСклад Тогда
			РеквизитМагазин = ДокументЕгаис.Склад.Магазин;
		КонецЕсли;
	Иначе
		РеквизитМагазин = ДокументЕгаис.Магазин;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РеквизитМагазин) Тогда
		Если ЗначениеЗаполнено(РеквизитМагазин.ПравилоЦенообразования) Тогда
			Если ЗначениеЗаполнено(РеквизитМагазин.ПравилоЦенообразования.ВидЦен) Тогда
				ВидЦены = РеквизитМагазин.ПравилоЦенообразования.ВидЦен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Задание.Шаблон.ИспользоватьПодбор Тогда
		
		Для каждого СтрТЧ Из Задание.СобранныеДанныеПодбор Цикл
			УстановитьАвтораЕгаис(ДокументЕГАИС, СтрТЧ.Пользователь, Задание.Шаблон);
			Прервать;
		КонецЦИкла;			
		
		ТабТСДЗагрузка = Задание.СобранныеДанныеПодбор.Выгрузить();
		ТабТСДЗагрузка.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ШтрихКод,НоменклатураЕГАИС,PDF,ЕдиницаИзмерения,ЕгаисДатаРозлива,ЕгаисМарка,ЕгаисПолныйКод,Пользователь,УпаковочныйЛист","Количество");
		
		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			Для каждого СтрТЧ Из ТабТСДЗагрузка Цикл
				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;	
				//Поиск строк сначала по маркам затем по ЕГАИС номенклатуре и реквизитам
				ПоискПоМарке = Ложь;
				ТекущаяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", СтрТЧ.ЕгаисПолныйКод);
				Если Не ЗначениеЗаполнено(ТекущаяАкцизнаяМарка) И ЗначениеЗаполнено(СтрТЧ.ЕгаисПолныйКод) Тогда
					НоваяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
					НоваяАкцизнаяМарка.ЗначениеШтрихкода = СтрТЧ.ЕгаисПолныйКод;
					НоваяАкцизнаяМарка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
					НоваяАкцизнаяМарка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
					НоваяАкцизнаяМарка.Номенклатура = СтрТЧ.Номенклатура;
					НоваяАкцизнаяМарка.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
					НоваяАкцизнаяМарка.ДатаУпаковки = ТекущаяДата();
					Попытка НоваяАкцизнаяМарка.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(СтрТЧ.Пользователь, Ложь); Исключение КонецПопытки;
					НоваяАкцизнаяМарка.Количество = 1;
					НоваяАкцизнаяМарка.Записать();
					ТекущаяАкцизнаяМарка = НоваяАкцизнаяМарка.Ссылка;
				КонецЕсли;
				
				ТекущаяСправка2 = Справочники.Справки2ЕГАИС.ПустаяСсылка();
				Если ЗначениеЗаполнено(ТекущаяАкцизнаяМарка) Тогда
					Если ПараметрыДокумента.ЭтоВходящееНаправление Тогда
						СтруктураПоискаМарокТТН = Новый Структура("Марка", СтрТЧ.ЕгаисПолныйКод);
						СтрокиПоискаМарокТТН = ТЗМарок.НайтиСтроки(СтруктураПоискаМарокТТН);	
						Если СтрокиПоискаМарокТТН.Количество() > 0 Тогда
							ТекущаяСправка2 = СтрокиПоискаМарокТТН[0].Справка2;
							ПоискПоМарке = Истина;
						КонецЕсли;
					Иначе
						Попытка СтруктураПараметрыМарки = ПолучитьПараметрыМаркиПоМарке(ТекущаяАкцизнаяМарка, ПараметрыДокумента, ДокументЕГАИС); Исключение КонецПопытки;
						Если СтруктураПараметрыМарки <> Неопределено Тогда  
							ТекущаяСправка2 = СтруктураПараметрыМарки.Справка2;
						КонецЕсли;			
					КонецЕсли;
				КонецЕсли;
				
				НоменклатураЕГАИС = СтрТЧ.НоменклатураЕГАИС;
				
				Если Задание.Шаблон.ВидДокумента = "ДатаМобайл_УпаковочныйЛист" Тогда
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("ЕГАИС_Номенклатура", НоменклатураЕГАИС));
				ИначеЕсли ПоискПоМарке Тогда //ВходящаяТТН
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция, Справка2", НоменклатураЕГАИС, ТекущаяСправка2));
				ИначеЕсли ПараметрыДокумента.ЕстьРеквизитСправка2 И ЗначениеЗаполнено(ТекущаяСправка2) Тогда //исходящая ТТН
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция, Справка2", НоменклатураЕГАИС, ТекущаяСправка2));
				ИначеЕсли ПараметрыДокумента.ЕстьРеквизитДатаРозлива И ЗначениеЗаполнено(СтрТч.ЕгаисДатаРозлива) Тогда
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция, ДатаРозлива", НоменклатураЕГАИС, СтрТч.ЕгаисДатаРозлива));
				Иначе
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция", НоменклатураЕГАИС));
				КонецЕсли;
				
				//Для пива
				Если Не ЗначениеЗаполнено(НоменклатураЕГАИС) Тогда
					СтруктураПоиска = Новый Структура();
					СтруктураПоиска.Вставить("Номенклатура", СтрТЧ.Номенклатура);
					СтруктураПоиска.Вставить("Характеристика", СтрТЧ.ХарактеристикаНоменклатуры);
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(СтруктураПоиска);					
				КонецЕсли;
				
				//Попытка поиска данных в строках при выдаче задания без конкретных справок (подбор любых справок), например в Исходящей ТТН
				СтрокаТабличнойЧастиДляЗаполнения = Неопределено;
				Если СтрокиПоиска.Количество() = 0 И Не ПоискПоМарке И Не Задание.Шаблон.ВидДокумента = "ДатаМобайл_УпаковочныйЛист" И ЗначениеЗаполнено(НоменклатураЕГАИС) И ПараметрыДокумента.ЕстьРеквизитСправка2 Тогда
					СтрокиПоискаДляЗаполнения = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция,Справка2", НоменклатураЕГАИС, Справочники.Справки2ЕГАИС.ПустаяСсылка()));
					Если СтрокиПоискаДляЗаполнения.Количество() = 0 Тогда
					Иначе	
						СтрокаТабличнойЧастиДляЗаполнения = СтрокиПоискаДляЗаполнения[0];	
					КонецЕсли;	
				КонецЕсли;
								
				Если СтрокиПоиска.Количество() = 0 Тогда
					Если ИмяДока = "ТТНВходящаяЕГАИС" Тогда
						ЕстьРасхождения = Истина;
						Продолжить;
					КонецЕсли;
					
					СтрокаТабличнойЧасти = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Добавить();					
					
					Если ПараметрыДокумента.ЕстьРеквизитАлкогольнаяПродукция Тогда
						СтрокаТабличнойЧасти.АлкогольнаяПродукция = НоменклатураЕГАИС;
					КонецЕсли;
					
					Если ПараметрыДокумента.ЕстьРеквизитНоменклатура Тогда
						СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					КонецЕсли;
					
					Если ПараметрыДокумента.ЕстьРеквизитХарактеристика Тогда
						СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
					КонецЕсли;
					
					Если ПараметрыДокумента.ЕстьРеквизитСерия Тогда
						СтрокаТабличнойЧасти.Серия = СтрТЧ.СерияСсылка; 
					КонецЕсли;
					
					Если ПараметрыДокумента.ЕстьРеквизитЕГАИС_Номенклатура Тогда
						СтрокаТабличнойЧасти.ЕГАИС_Номенклатура = НоменклатураЕГАИС;
					КонецЕсли;
					
					Если ПараметрыДокумента.ЕстьРеквизитСправка2 Тогда
						СтрокаТабличнойЧасти.Справка2 = ТекущаяСправка2;
					КонецЕсли;
										
					Если ЗначениеЗаполнено(ВидЦены) И ПараметрыДокумента.ЕстьРеквизитЦена Тогда
						Попытка
							Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
							
							Если ЗначениеЗаполнено(СтрокаТабличнойЧасти["Номенклатура"]) Тогда
								Модуль_ЗапасыСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ЗапасыСервер");
								ЦенаЗаУпаковку = Модуль_ЗапасыСервер.ПолучитьЦенуПоВидуЦен(ВидЦены,
								?(ЗначениеЗаполнено(ДокументЕГАИС.Дата), ДокументЕГАИС.Дата, ТекущаяДата()),
								СтрокаТабличнойЧасти["Номенклатура"],
								СтрокаТабличнойЧасти["Характеристика"],
								СтрокаТабличнойЧасти["Упаковка"]);
								Если ЦенаЗаУпаковку <> 0 Тогда
									СтрокаТабличнойЧасти["Цена"] = ЦенаЗаУпаковку;  
									СтруктураДействий = Новый Структура;
									Если МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("СтавкаНДС") <> Неопределено Тогда
										СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Ложь, ДокументЕГАИС.Дата));
										
										Попытка СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ДокументЕГАИС["ЦенаВключаетНДС"]); Исключение Конецпопытки;
										Попытка СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Модуль_ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументЕГАИС)); Исключение Конецпопытки;
									КонецЕсли;	
									СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
									СтруктураДействий.Вставить("ПересчитатьСумму");
									Попытка Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧСервер(СтрокаТабличнойЧасти, СтруктураДействий,Неопределено); Исключение Конецпопытки;									
								КонецЕсли;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЕсли;					
					
					Если СтрокаТабличнойЧастиДляЗаполнения <> Неопределено Тогда
						
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиДляЗаполнения,, "Справка2,ИдентификаторСтроки,ИдентификаторУпаковки,Количество,КоличествоУпаковок,КоличествоФакт,Сумма");
						
					КонецЕсли;
					
					ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество, ЭтоНовыйДокумент);
					
				ИначеЕсли СтрокиПоиска.Количество() = 1 Тогда
					СтрокаТабличнойЧасти = СтрокиПоиска[0];
					
					ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество, ЭтоНовыйДокумент);
				Иначе // несколько строк, надо распределить
					
					Если ИмяДока = "ТТНВходящаяЕГАИС" Тогда											
						
						Сч = 0;
						КоличествоДляВнесения = СтрТЧ.Количество;    
						Для каждого СтрокаТабличнойЧасти Из СтрокиПоиска Цикл
							Сч = Сч + 1;
							
							КоличествоВСтрокеЗадание = СтрокаТабличнойЧасти.Количество; 
							КоличествоВСтрокеФакт = СтрокаТабличнойЧасти.КоличествоФакт; 
							ОсталосьВнести = КоличествоВСтрокеЗадание - КоличествоВСтрокеФакт;
							Если ОсталосьВнести >= КоличествоДляВнесения Тогда
								ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, КоличествоДляВнесения, ЭтоНовыйДокумент);
								Прервать;
							Иначе
								Если СтрокиПоиска.Количество() = Сч Тогда
									ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, КоличествоДляВнесения, ЭтоНовыйДокумент);
									Прервать;
								Иначе
									Если ОсталосьВнести = 0 Тогда
										Продолжить;
									КонецЕсли;
									ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, ОсталосьВнести, ЭтоНовыйДокумент); 
									КоличествоДляВнесения = КоличествоДляВнесения - ОсталосьВнести;  
									Если КоличествоДляВнесения = 0 Тогда
										Прервать;
									Иначе
										Продолжить;
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла
							
					Иначе //пока нет партий
						СтрокаТабличнойЧасти = СтрокиПоиска[0];
						
						ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество, ЭтоНовыйДокумент);
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла; //каждого СтрТЧ Из ТабТСДЗагрузка
			
		КонецЕсли;//Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0
		
	КонецЕсли;//Задание.Шаблон.ИспользоватьПодбор
			
	Если ЕстьРасхождения Тогда
		Сообщить("Загружены не все данные в документ. Расхождения смотрите на вкладке ""Анализ"" ", СтатусСообщения.Важное);
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт И ПараметрыДокумента.ЕстьРеквизитКоличество И Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда		
		Если Не ПараметрыДокумента.ЭтоВходящееНаправление И (Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3 Или Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2 Или ЭтоНовыйДокумент) Тогда		
			//изменяем документ по фактическому подбору
			
			//проверка на нулевое количество	
			СтруктураДляПоиска = Новый Структура("КоличествоФакт", 0);
			
			ТабличнаяЧастьДок = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор]; 
			
			//Получаем список строк соответсвтвующих отбору, и перебором удаляем. 			
			МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
			
			Для каждого Строка Из МассивПустыхСтрок Цикл				
				ТабличнаяЧастьДок.Удалить(Строка);		
			КонецЦикла;			
		Иначе	
			Для каждого СтрокаИсходного Из ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор] Цикл
				Если СтрокаИсходного.КоличествоФакт <> СтрокаИсходного.Количество Тогда
					Попытка ДокументЕГАИС.ЕстьРасхождения = Истина; Исключение КонецПопытки;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяДока = "ТТНВходящаяЕГАИС" Тогда			
		Попытка 
			ДокументЕГАИС.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Выполняется;
		Исключение	
			ДокументЕГАИС.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;	
		КонецПопытки;	
		ПараметрыОбновленияСтатуса = ИнтеграцияЕГАИС_ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения = Ложь;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС;
		ПараметрыОбновленияСтатуса.ДокументОбъект    = ДокументЕГАИС;		
		Документы.ТТНВходящаяЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументЕГАИС.Ссылка, Перечисления.ВидыДокументовЕГАИС.ТТН, ПараметрыОбновленияСтатуса);	
		Попытка Документы.ТТНВходящаяЕГАИС.ПриИзмененииСтатусаДокумента(ДокументЕГАИС.Ссылка, Неопределено, Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС, ПараметрыОбновленияСтатуса); Исключение КонецПопытки;
		
	Иначе
		//"ТТНИсходящаяЕГАИС" и другие 
		Попытка 
			ДокументЕГАИС.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Выполняется;
		Исключение	
			Попытка
				ДокументЕГАИС.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;
			Исключение
			КонецПопытки;	
		КонецПопытки;			
	КонецЕсли;
		
	Попытка 
		ДокументЕГАИС.Записать(РежимЗаписиДокумента.Запись);
		Задание.ДатаЗавершения = ТекущаяДата();
		Если СокрЛП(Задание.Шаблон.ВидДокументаНового) = "" Тогда//старая схема
			Задание.ИсходныйДокумент = ДокументЕГАИС.Ссылка;
		Иначе	
			Задание.НовыйДокумент = ДокументЕГАИС.Ссылка;
		КонецЕсли;	
		Задание.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Задание.ОбменДанными.Получатели.Заполнить();
		
		Задание.Записать();
		
		//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
		ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(Задание, Истина);		
	Исключение		
	КонецПопытки;
	
	Возврат ДокументЕГАИС.ССылка;
	
КонецФункции
Функция ПолучитьПараметрыМаркиПоМарке(Марка, ПараметрыДокумента, ДокументЕГАИС)
	
	ТекущаяОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка();
	
	Если ПараметрыДокумента.ЕстьРеквизитПоставщик Тогда
		ТекущаяОрганизацияЕГАИС = ДокументЕГАИС.Поставщик;
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитОрганизацияЕГАИС Тогда
		ТекущаяОрганизацияЕГАИС = ДокументЕГАИС.ОрганизацияЕГАИС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕГАИС_РегистрМарок.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ЕГАИС_РегистрМарок.Статус КАК Статус,
	|	ЕГАИС_РегистрМарок.Справка2 КАК Справка2
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК ЕГАИС_РегистрМарок
	|ГДЕ
	|	ЕГАИС_РегистрМарок.АкцизнаяМарка = &Марка
	|	И ЕГАИС_РегистрМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС";
		
	Запрос.УстановитьПараметр("Марка", Марка);
	Если ТекущаяОрганизацияЕГАИС.Пустая() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЕГАИС_РегистрМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС", "");	
	Иначе	
		Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ТекущаяОрганизацияЕГАИС);
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("АлкогольнаяПродукция, Статус, Справка2", Выборка.АлкогольнаяПродукция, Выборка.Статус, Выборка.Справка2);
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции
Функция ИнтеграцияЕГАИС_ПараметрыОбновленияСтатуса()
	
	ПараметрыОбновленияСтатуса = Новый Структура;
	ПараметрыОбновленияСтатуса.Вставить("ОбновлятьДвижения", Истина);
	ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции");
	ПараметрыОбновленияСтатуса.Вставить("ТекущееСостояние");
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки");
	ПараметрыОбновленияСтатуса.Вставить("ДокументОбъект");
	ПараметрыОбновленияСтатуса.Вставить("ИдентификаторЗапроса");
	ПараметрыОбновленияСтатуса.Вставить("ФорматОбмена");
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции
Процедура ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, Количество, ЭтоНовыйДокумент)
		
	Если ПараметрыДокумента.ЕстьРеквизитНоменклатура Тогда
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)) Тогда
			СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитИдентификаторСтроки Тогда
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки)) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитКлючСвязи Тогда
		Если СтрокаТабличнойЧасти.КлючСвязи = 0 Тогда
			ЗначениеМаксимальногоЭлемента = 0; // Значение, заведомо меньшее любого элемента в массиве.
			СписокКлючей = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].ВыгрузитьКолонку("КлючСвязи");
			Для Индекс = 0 По СписокКлючей.Количество() - 1 Цикл
				Если СписокКлючей[Индекс] > ЗначениеМаксимальногоЭлемента Тогда
					ЗначениеМаксимальногоЭлемента = СписокКлючей[Индекс];
				КонецЕсли;
			КонецЦикла;
			СтрокаТабличнойЧасти.КлючСвязи = ЗначениеМаксимальногоЭлемента + 1;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитНеобходимостьВводаАкцизнойМарки И СтрТЧ.ЕгаисПолныйКод <> "" Тогда
		СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = Истина;	
	КонецЕсли;
		
	Если ПараметрыДокумента.ЕстьРеквизитУпаковка И ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения) Тогда
		Если Не(ЗНачениеЗаполнено(СтрокаТабличнойЧасти.Упаковка)) И ТипЗнч(СтрТЧ.ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
			СтрокаТабличнойЧасти.Упаковка = СтрТЧ.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
			
	Если ПараметрыДокумента.ЕстьРеквизитЕГАИС И ПараметрыДокумента.ЕстьРеквизитЕГАИС_Номенклатура И ПараметрыДокумента.ЕстьРеквизитМарка Тогда // Упаклист
		ДокументЕГАИС.ЕГАИС = Истина;
		СтрокаТабличнойЧасти.Марка = СтрТЧ.ЕгаисПолныйКод;
		СтрокаТабличнойЧасти.ЕГАИС_Номенклатура = СтрТЧ.НоменклатураЕГАИС;	
		СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрТЧ.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.Штрихкод = СтрТЧ.Штрихкод;
	КонецЕсли;	
	
	ТекущаяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", СтрТЧ.ЕгаисПолныйКод);
	
	//Добавим заполнение упаковок
	ТекущаяУпаковка = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	Если Не ПараметрыДокумента.ЭтоВходящееНаправление И Не Задание.Шаблон.ЕГАИСПонижатьДетализациюПроверкиТТНДоБутылок Тогда
		ТекущаяУпаковка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", СтрТЧ.УпаковочныйЛист); 
	КонецЕсли;
	
	//МАРКИ
	Если ПараметрыДокумента.ЕстьТЧМарок И (ПараметрыДокумента.ЕстьРеквизитИдентификаторСтроки Или ПараметрыДокумента.ЕстьРеквизитКлючСвязи) Тогда
		ТЧАкцизныеМарки = ДокументЕГАИС.Метаданные().ТабличныеЧасти["АкцизныеМарки"];

		ЕстьРеквизитИдентификаторСтрокиМарок = ТЧАкцизныеМарки.Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено; 
		ЕстьРеквизитКлючСвязиМарок = ТЧАкцизныеМарки.Реквизиты.Найти("КлючСвязи") <> Неопределено; 
		ЕстьРеквизитКоличествоМарок = ТЧАкцизныеМарки.Реквизиты.Найти("Количество") <> Неопределено; 
		ЕстьРеквизитСправка2 = ТЧАкцизныеМарки.Реквизиты.Найти("Справка2") <> Неопределено; 
		
		Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда 
			
			СтрокиПоискаМарок = ДокументЕГАИС.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", ТекущаяУпаковка));
			Если СтрокиПоискаМарок.Количество() = 0 Тогда
				СтрокаМарки = ДокументЕГАИС.АкцизныеМарки.Добавить();
				СтрокаМарки.АкцизнаяМарка = ТекущаяУпаковка;
				
				Если ЕстьРеквизитИдентификаторСтрокиМарок Тогда
					СтрокаМарки.ИдентификаторСтроки = СтрокаТабличнойЧасти.ИдентификаторСтроки;
				КонецЕсли;
				
				Если ЕстьРеквизитКлючСвязиМарок Тогда
					СтрокаМарки.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи; 
				КонецЕсли;
				
				Если ЕстьРеквизитКоличествоМарок Тогда
					СтрокаМарки.Количество = Количество; 
				КонецЕсли;
				
				Если ЕстьРеквизитСправка2 Тогда
					СтрокаМарки.Справка2 = СтрокаТабличнойЧасти.Справка2; 
				КонецЕсли;								
			Иначе
				СтрокаМарки = СтрокиПоискаМарок[0];
				Если ЕстьРеквизитКоличествоМарок Тогда
					СтрокаМарки.Количество = СтрокаМарки.Количество + Количество; 
				КонецЕсли;				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяАкцизнаяМарка) Тогда
				ЗаполнитьТЧАкцизныеМарки(ДокументЕГАИС, ТекущаяАкцизнаяМарка, СтрокаТабличнойЧасти, ЕстьРеквизитИдентификаторСтрокиМарок, ЕстьРеквизитКлючСвязиМарок, ЕстьРеквизитКоличествоМарок, ЕстьРеквизитСправка2);	
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ТекущаяАкцизнаяМарка) Тогда 
			ЗаполнитьТЧАкцизныеМарки(ДокументЕГАИС, ТекущаяАкцизнаяМарка, СтрокаТабличнойЧасти, ЕстьРеквизитИдентификаторСтрокиМарок, ЕстьРеквизитКлючСвязиМарок, ЕстьРеквизитКоличествоМарок, ЕстьРеквизитСправка2);		
		КонецЕсли;
	КонецЕсли;	
	//МАРКИ
	
	Попытка
		лКоэффициент = ?(СтрТЧ.ЕдиницаИзмерения.Коэффициент = 0, 1, СтрТЧ.ЕдиницаИзмерения.Коэффициент);
	Исключение
		лКоэффициент = 1;
	КонецПопытки;
	
	Попытка
		СтрокаМарки.Количество = Количество * лКоэффициент;
	Исключение
	КонецПопытки;
		
	Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт Тогда
		СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоФакт + Количество * лКоэффициент;
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитКоличество И Не ПараметрыДокумента.ЭтоВходящееНаправление И (Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3 Или Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2 Или ЭтоНовыйДокумент) Тогда		
		//Изменяем документ по фактическому подбору
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество+Количество*лКоэффициент;
		Если ПараметрыДокумента.ЕстьРеквизитКоличествоУпаковок Тогда		
			СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок+Количество;	
		КонецЕсли; 
		
		Если ПараметрыДокумента.ЕстьРеквизитСумма Тогда
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьСтрокуТЧ(ДокументЕГАИС, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, Задание.Шаблон);					
	Попытка УстановитьСерииВдокументе(ДокументЕГАИС); Исключение КонецПопытки;
	
КонецПроцедуры
Функция СобратьПараметрыЕГАИС(ДокументЕГАИС, Задание)
	
	МетаданныеДока = ДокументЕГАИС.Метаданные();
	
	ПараметрыДокумента = Новый Структура();
	
	ПараметрыДокумента.Вставить("ИмяТЧПодбор", Задание.Шаблон.ИмяТабличнойЧастиПодбор);	
	ПараметрыДокумента.Вставить("КодыНепроверяемыхМарок", СформироватьСписокНепроверяемыхМарокЕГАИС());
	ПараметрыДокумента.Вставить("ЕстьРеквизитИдентификаторСтроки", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитКлючСвязи", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КлючСвязи") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитНеобходимостьВводаАкцизнойМарки", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("НеобходимостьВводаАкцизнойМарки") <> Неопределено);
	
	ЭтоВходящееНаправление = Ложь;
	Если Задание.Шаблон.ВидДокумента = "ТТНВходящаяЕГАИС" Тогда
		ЭтоВходящееНаправление = Истина;
	КонецЕсли;
	ПараметрыДокумента.Вставить("ЭтоВходящееНаправление", ЭтоВходящееНаправление);
	
	ПараметрыДокумента.Вставить("ЕстьТЧМарок", МетаданныеДока.ТабличныеЧасти.Найти("АкцизныеМарки") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитДатаРозлива", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ДатаРозлива") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитУпаковка", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка") <> Неопределено);
	
	ПараметрыДокумента.Вставить("ЕстьРеквизитАлкогольнаяПродукция", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("АлкогольнаяПродукция") <> Неопределено);
	
	ПараметрыДокумента.Вставить("ЕстьРеквизитНоменклатура", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Номенклатура") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитХарактеристика", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Характеристика") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитКоличествоУпаковок", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитКоличество", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Количество") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитКоличествоФакт", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоФакт") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитСправка2", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Справка2") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитПоставщик", МетаданныеДока.Реквизиты.Найти("Поставщик") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитОрганизацияЕГАИС", МетаданныеДока.Реквизиты.Найти("ОрганизацияЕГАИС") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитСерия", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Серия") <> Неопределено);
		
	ПараметрыДокумента.Вставить("ЕстьРеквизитЕГАИС", МетаданныеДока.Реквизиты.Найти("ЕГАИС") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитМарка", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Марка") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитЕГАИС_Номенклатура", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ЕГАИС_Номенклатура") <> Неопределено);		
	
	ПараметрыДокумента.Вставить("ЕстьРеквизитМагазин", МетаданныеДока.Реквизиты.Найти("Магазин") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитСклад", МетаданныеДока.Реквизиты.Найти("Склад") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитЦена", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Цена") <> Неопределено);		
	ПараметрыДокумента.Вставить("ЕстьРеквизитСумма", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Сумма") <> Неопределено);	
	
	Возврат ПараметрыДокумента;
	
КонецФункции
Функция СформироватьСписокНепроверяемыхМарокЕГАИС()
	
	СписокМарок = Новый СписокЗначений();
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("261")); //261 Сидр
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("262")); //262 Пуаре
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("263")); //263 Медовуха                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("500")); //500 Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("510")); //510 Пиво с содержанием объемной доли этилового спирта свыше 8,6%                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("520")); //520 Напитки, изготавливаемые на основе пива                                                                               
	
	Возврат СписокМарок;
	
КонецФункции
Процедура УстановитьАвтораЕгаис(Док, Авт, Шаблон)
	
	Если Шаблон.НеИзменятьОтветственногоМенеджера Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		Док.Автор = Справочники.Пользователи.НайтиПоНаименованию(авт, Ложь);
	Исключение
	КонецПопытки;
	
КонецПроцедуры		
Процедура ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист_ЕГАИС(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок, ИзМаркировки = Ложь)
	
	Шаблон = ДокументТСД.Шаблон;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерияСсылка КАК Серия,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕгаисПолныйКод КАК ЕгаисПолныйКод,
	|	СУММА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество) КАК Количество,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Короб КАК Короб
	|ПОМЕСТИТЬ ДанныеПодбор
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерияСсылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕгаисПолныйКод,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Короб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПодбор.УпаковочныйЛист КАК Упаковка,
	|	ДанныеПодбор.Номенклатура КАК Номенклатура,
	|	ДанныеПодбор.Характеристика КАК Характеристика,
	|	ДанныеПодбор.Серия КАК Серия,
	|	ДанныеПодбор.ЕгаисПолныйКод КАК ЕгаисПолныйКод,
	|	ДанныеПодбор.Короб КАК Короб
	|ИЗ
	|	ДанныеПодбор КАК ДанныеПодбор
	|ГДЕ
	|	ДанныеПодбор.Количество > 0
	|ИТОГИ ПО
	|	Упаковка,
	|	Короб";
			
	Запрос.УстановитьПараметр("Ссылка", ДокументТСД.Ссылка);	
	ВыборкаУпаковка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаУпаковка.Следующий() Цикл 
		
		Если ЗначениеЗаполнено(ВыборкаУпаковка.Упаковка) Тогда
			
			УпакСсылка = ДатаМобайл_Маркировка.ПолучитьСправочникСсылкаУпаковка(ВыборкаУпаковка.Упаковка, Истина, Неопределено);
			
			Если ЗначениеЗаполнено(УпакСсылка) Тогда
				
				УпакОбъект = УпакСсылка.ПолучитьОбъект();
				
				ВыборкаКороба = ВыборкаУпаковка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаКороба.Следующий() Цикл			
					
					Если ЗначениеЗаполнено(ВыборкаКороба.Короб) Тогда
						
						КоробСсылка = ДатаМобайл_Маркировка.ПолучитьСправочникСсылкаУпаковка(ВыборкаКороба.Короб, Истина, Неопределено);										
						КоробОбъект = КоробСсылка.ПолучитьОбъект();
												
						ПроверитьМаркаНаходитсяВДругомКоробе(КоробСсылка, УпакОбъект.Ссылка);
						
						РезультатПоиска = УпакОбъект.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", КоробСсылка));
						Если РезультатПоиска.Количество() = 0 Тогда
							НовыйВложенныйШтрихкод = УпакОбъект.ВложенныеШтрихкоды.Добавить();
							НовыйВложенныйШтрихкод.Штрихкод = КоробСсылка;
						КонецЕсли;
						
						КоробОбъект.Записать();			
						ОпределитьУпаковкуМоноМульти(КоробОбъект);
						
					Иначе
						
						ВыборкаМарки = ВыборкаКороба.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаМарки.Следующий() Цикл
							
							СсылкаМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", ВыборкаМарки.ЕгаисПолныйКод);
							
							Если ЗначениеЗаполнено(СсылкаМарка) Тогда
								
								ПроверитьМаркаНаходитсяВДругомКоробе(СсылкаМарка, УпакОбъект.Ссылка);
								
								РезультатПоиска = УпакОбъект.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", СсылкаМарка));
								Если РезультатПоиска.Количество() = 0 Тогда
									НовыйВложенныйШтрихкод = УпакОбъект.ВложенныеШтрихкоды.Добавить();
									НовыйВложенныйШтрихкод.Штрихкод = СсылкаМарка;
								КонецЕсли;							
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;			
					
				КонецЦикла;
				
				УпакОбъект.Записать();	
				ОпределитьУпаковкуМоноМульти(УпакОбъект);
			КонецЕсли;
		Иначе
			//загрузим только КМ в справочник
			
			ВыборкаКороба = ВыборкаУпаковка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКороба.Следующий() Цикл			
				
				ВыборкаМарки = ВыборкаКороба.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаМарки.Следующий() Цикл
					
					СсылкаМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", ВыборкаМарки.ЕгаисПолныйКод);
					
				КонецЦикла;
				
			КонецЦикла;
						
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументТСД.ДатаЗавершения = ТекущаяДата();
	ДокументТСД.Записать();
	
КонецПроцедуры
Процедура ОпределитьУпаковкуМоноМульти(УпаковкаОбъект)
	
	СсылкаУпаковка = УпаковкаОбъект.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Серия КАК Серия
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = &СсылкаУпаковка";
		
	Запрос.УстановитьПараметр("СсылкаУпаковка", СсылкаУпаковка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 1 Тогда
		
		УпаковкаОбъект.Номенклатура = Результат[0].Номенклатура;
		УпаковкаОбъект.Характеристика = Результат[0].Характеристика;
		УпаковкаОбъект.Серия = Результат[0].Серия;
		
		УпаковкаОбъект.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				
		УпаковкаОбъект.Записать();
	Иначе
		
		УпаковкаОбъект.Номенклатура = Неопределено;
		УпаковкаОбъект.Характеристика = Неопределено;
		УпаковкаОбъект.Серия = Неопределено;
		
		Если Результат.Количество() > 1 Тогда
			УпаковкаОбъект.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		Иначе
			УпаковкаОбъект.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		КонецЕсли;
			
		УпаковкаОбъект.Записать();
		
	КонецЕсли;
			
КонецПроцедуры
Процедура ПроверитьМаркаНаходитсяВДругомКоробе(СсылкаМарка, СсылкаУпаковка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = &Штрихкод
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка<>&Упаковка");
	
	Запрос.УстановитьПараметр("Штрихкод", СсылкаМарка);
	Запрос.УстановитьПараметр("Упаковка", СсылкаУпаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектКороб = Выборка.Ссылка.ПолучитьОбъект();
		РезультатПоиска = ОбъектКороб.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", СсылкаМарка));
		
		Для каждого Строка Из РезультатПоиска Цикл
			ОбъектКороб.ВложенныеШтрихкоды.Удалить(Строка);
		КонецЦикла;
		
		ОбъектКороб.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

//ЕГАИС АСТ
Функция АСТ_ПолучитьДокументЕГАИС(ДокументЕГАИС, Задание, ЭтоНовыйДокумент)
	
	ЕстьРасхождения = Ложь;
	
	Если ДокументЕГАИС = Неопределено Тогда
		ДокументЕГАИС = Документы[Задание.Шаблон.ВидДокумента].СоздатьДокумент();
		ЭтоНовыйДокумент = Истина;
	КонецЕсли;	
	
	МетаданныеДока = ДокументЕГАИС.Метаданные();
	ИмяДока = МетаданныеДока.Имя;	
	
	Если ЭтоНовыйДокумент Тогда
		ДокументЕГАИС.Дата = ТекущаяДата();
	КонецЕсли;
		
	ПараметрыДокумента = АСТ_СобратьПараметрыЕГАИС(ДокументЕГАИС, Задание);
	ИсходныеДанные = Неопределено;	
	Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2 И Не ПараметрыДокумента.ЭтоВходящееНаправление Тогда
		ИсходныеДанные = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Выгрузить();	
		ОчиститьТабличнуюЧасть(ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор]);
	КонецЕсли;
	
	Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3  И Не ПараметрыДокумента.ЭтоВходящееНаправление Тогда
		Для каждого СтрокаДока Из ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор] Цикл
			Попытка СтрокаДока.Количество = 0; Исключение КонецПопытки;
			Попытка СтрокаДока.КоличествоМарок = 0; Исключение КонецПопытки;
		КонецЦикла;	
	КонецЕсли;
		
	Если ПараметрыДокумента.ЭтоВходящееНаправление Тогда
		Если ПараметрыДокумента.ЕстьТЧМарок Тогда
			ТабличнаяЧастьМарок = ДокументЕГАИС.Марки; 				
			Для каждого ИсходнаяСтрока Из ТабличнаяЧастьМарок Цикл
				Попытка
					Если ИсходнаяСтрока.Считана Тогда
						ИсходнаяСтрока.Считана = Ложь; 
					КонецЕсли;
				Исключение 
				КонецПопытки;
				
				Попытка
					Если ИсходнаяСтрока.СчитанаИзУпаковки1 Тогда
						ИсходнаяСтрока.СчитанаИзУпаковки1 = Ложь;
					КонецЕсли;
				Исключение 
				КонецПопытки;	
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если ПараметрыДокумента.ЕстьТЧМарок И Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2 Тогда
			ДокументЕГАИС.Марки.Очистить();
		КонецЕсли;
	КонецЕсли;	
	
	Если ПараметрыДокумента.ЕстьТЧМарокФакт Тогда 
		ДокументЕГАИС.МаркиФакт.Очистить();
	КонецЕсли;
	
	КомментарийШаблона = ?(Задание.Шаблон.АвтоматическийКомментарийИспользовать, СокрЛП(Задание.Шаблон.АвтоматическийКомментарий) + " " + ТекущаяДата(), "");
	КомментДока = Задание.Комментарий;
	ДокументЕГАИС.Комментарий = ДокументЕГАИС.Комментарий + КомментарийШаблона + ?(КомментДока = "", "", " (" + КомментДока + ")");
	
	Для каждого НовЗнач Из Задание.Шаблон.НовыеЗначенияРеквизитов Цикл
		ДокументЕГАИС[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита;
	КонецЦикла;	
		
	//Типы документов	
	//1.астТоварноТранспортныеНакладныеИзЕГАИС - входящая (проверить помарочно, внести данные о марках)
	//Надо заполнить в ТТН ЕГАИС табличную часть "МаркиФакт" и поле Считана, СчитанаИзУпаковки  в табличной части "Марки". Дальше уже оператор сам определит что делать с ТТН. 
	//2. астТоварноТранспортныеНакладныеИзЕГАИС - исходящая или астСписаниеТоваровЕГАИС (проверить, внести марки)
	//3. астАктФиксацииШтрихкодовНаБалансеОрганизации - астАктФиксацииШтрихкодовНаБалансеОрганизации (внести марки)
	
	ТабТСДЗагрузка = Задание.СобранныеДанныеПодбор.Выгрузить();
	ТабТСДЗагрузка.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ШтрихКод,НоменклатураЕГАИС,PDF,ЕдиницаИзмерения,ЕгаисДатаРозлива,ЕгаисМарка,ЕгаисПолныйКод,УпаковочныйЛист,Короб","Количество");
	
	ТаблицаЗамен = Новый ТаблицаЗначений;
	ТаблицаЗамен.Колонки.Добавить("НоменклатураЕГАИС");
	ТаблицаЗамен.Колонки.Добавить("СправкаА");
	ТаблицаЗамен.Колонки.Добавить("СправкаБ");
	
	//1.астТоварноТранспортныеНакладныеИзЕГАИС
	Если ИмяДока = "астТоварноТранспортныеНакладныеИзЕГАИС" И ПараметрыДокумента.ЭтоВходящееНаправление Тогда
		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			Для каждого СтрТЧ Из ТабТСДЗагрузка Цикл
				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				//онлайн проверка
				Если СтрТЧ.УпаковочныйЛист <> "" И СтрТЧ.ЕгаисПолныйКод = "" Тогда 
					
					ТаблицаМарок = ДатаМобайл_ОбщийМодуль.ПолучитьТаблицуУпакованныхМарокАСТ(СтрТЧ.УпаковочныйЛист);
					
					Для каждого СтрокаМарок Из ТаблицаМарок Цикл
						ТекущаяАкцизнаяМарка = Справочники.астМаркиЕГАИС.НайтиПоНаименованию(СтрокаМарок.Марка);
						
						//Заполняем чтение марок
						СтрокиПоискаМарок = ДокументЕГАИС.Марки.НайтиСтроки(Новый Структура("Марка", ТекущаяАкцизнаяМарка));
						Если СтрокиПоискаМарок.Количество() = 0 Тогда 		
						Иначе  //есть строка				
							СтрокаТабличнойЧастиМарки = СтрокиПоискаМарок[0];
							Попытка СтрокаТабличнойЧастиМарки.Считана = Истина; Исключение КонецПопытки;
							Попытка СтрокаТабличнойЧастиМарки.СчитанаИзУпаковки1 = Истина; Исключение КонецПопытки;
														
							//Заполняем ТЧ марок факт
							СтрокиПоискаМарокФакт = ДокументЕГАИС.МаркиФакт.НайтиСтроки(Новый Структура("Марка", ТекущаяАкцизнаяМарка));
							Если СтрокиПоискаМарокФакт.Количество() = 0 Тогда 
								СтрокаТабличнойЧастиМаркиФакт = ДокументЕГАИС.МаркиФакт.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиМаркиФакт, СтрокаТабличнойЧастиМарки);
							Иначе  				
							КонецЕсли;			
						КонецЕсли;						
					КонецЦикла;
				Иначе
					
					ТекущаяАкцизнаяМарка = Справочники.астМаркиЕГАИС.НайтиПоНаименованию(СтрТЧ.ЕгаисПолныйКод);
					
					//Заполняем чтение марок
					СтрокиПоискаМарок = ДокументЕГАИС.Марки.НайтиСтроки(Новый Структура("Марка", ТекущаяАкцизнаяМарка));
					Если СтрокиПоискаМарок.Количество() = 0 Тогда 		
					Иначе  //есть строка				
						СтрокаТабличнойЧастиМарки = СтрокиПоискаМарок[0];
						Попытка СтрокаТабличнойЧастиМарки.Считана = Истина; Исключение КонецПопытки;
						Попытка СтрокаТабличнойЧастиМарки.СчитанаИзУпаковки1 = Истина; Исключение КонецПопытки;
						
						
						//Заполняем ТЧ марок факт
						СтрокиПоискаМарокФакт = ДокументЕГАИС.МаркиФакт.НайтиСтроки(Новый Структура("Марка", ТекущаяАкцизнаяМарка));
						Если СтрокиПоискаМарокФакт.Количество() = 0 Тогда 
							СтрокаТабличнойЧастиМаркиФакт = ДокументЕГАИС.МаркиФакт.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиМаркиФакт, СтрокаТабличнойЧастиМарки);
						Иначе  				
						КонецЕсли;			
					КонецЕсли;
					
				КонецЕсли;	
			КонецЦикла; //каждого СтрТЧ Из ТабТСДЗагрузка	
		КонецЕсли;//Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0
		
	ИначеЕсли (ИмяДока = "астТоварноТранспортныеНакладныеИзЕГАИС" И Не ПараметрыДокумента.ЭтоВходящееНаправление)
		Или ИмяДока = "астСписаниеТоваровЕГАИС" Тогда
		
		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			
			Для каждого СтрТЧ Из ТабТСДЗагрузка Цикл
				
				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				//онлайн проверка
				Если СтрТЧ.УпаковочныйЛист <> "" И СтрТЧ.ЕгаисПолныйКод = "" Тогда 
					
					ТаблицаМарок = ДатаМобайл_ОбщийМодуль.ПолучитьТаблицуУпакованныхМарокАСТ(СтрТЧ.УпаковочныйЛист);
					
					Для каждого СтрокаМарок Из ТаблицаМарок Цикл
						
						ТекущаяАкцизнаяМарка = Справочники.астМаркиЕГАИС.НайтиПоНаименованию(СтрокаМарок.Марка);
												
						ДанныеНоменклатурыПоМарке = ДатаМобайл_ОбщийМодуль.ПолучитьСправкиПоМарке(ДокументЕГАИС.ТранспортныйМодуль, ТекущаяАкцизнаяМарка);
						ТекущаяСправкаА = ДанныеНоменклатурыПоМарке.СправкаА;
						ТекущаяСправкаБ = ДанныеНоменклатурыПоМарке.СправкаБ;
						
						СтрокиПоиска=ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("НоменклатураЕГАИС,СправкаА,СправкаБ", СтрТЧ.НоменклатураЕГАИС, ТекущаяСправкаА, ТекущаяСправкаБ));
						
						Если СтрокиПоиска.Количество() = 0 Тогда  //нет строк добавляем		
							СтрокаТабличнойЧасти = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
							СтрокаТабличнойЧасти.НоменклатураЕГАИС = СтрТЧ.НоменклатураЕГАИС;
							СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
							
							Попытка
								Если ИсходныеДанные <> Неопределено Тогда  //заполнение данных по изначальным в документе (цены, номер партии итд)
									//поиск с учетом справок
									СтруктураПоискаИсходныеДанные = Новый Структура("НоменклатураЕГАИС,СправкаА,СправкаБ", СтрокаТабличнойЧасти.НоменклатураЕГАИС, ТекущаяСправкаА, ТекущаяСправкаБ);
									СтрокиПоискаИсходныеДанные = ИсходныеДанные.НайтиСтроки(СтруктураПоискаИсходныеДанные);
									Если СтрокиПоискаИсходныеДанные.Количество() > 0 Тогда
										ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоискаИсходныеДанные[0],, "Количество,КоличествоДал,КоличествоМарок,Сумма");
									Иначе
										//поиск без учета справок если подобраны были другие справки
										СтруктураПоискаИсходныеДанные = Новый Структура("НоменклатураЕГАИС", СтрокаТабличнойЧасти.НоменклатураЕГАИС);
										СтрокиПоискаИсходныеДанные = ИсходныеДанные.НайтиСтроки(СтруктураПоискаИсходныеДанные);
										Если СтрокиПоискаИсходныеДанные.Количество() > 0 Тогда
											ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоискаИсходныеДанные[0],, "СправкаА,СправкаБ,Количество,КоличествоДал,КоличествоМарок,Сумма");
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							Исключение
							КонецПопытки;
							
							СтрокаТабличнойЧасти.СправкаА = ТекущаяСправкаА;
							СтрокаТабличнойЧасти.СправкаБ = ТекущаяСправкаБ;
							
							АСТ_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, 1, ТекущаяАкцизнаяМарка);
						Иначе  //есть строка				
							СтрокаТабличнойЧасти = СтрокиПоиска[0];
							
							Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 4 Тогда
								ПоискЗамен = ТаблицаЗамен.НайтиСтроки(Новый Структура("НоменклатураЕГАИС,СправкаА,СправкаБ", СтрокаТабличнойЧасти.НоменклатураЕГАИС, ТекущаяСправкаА, ТекущаяСправкаБ));
								Если ПоискЗамен.Количество() = 0 Тогда									
									Если ПараметрыДокумента.ЕстьРеквизитТЧ_КоличествоМарок Тогда
										СтрокаТабличнойЧасти.КоличествоМарок = 0;							  				
									КонецЕсли;
									
									Если ПараметрыДокумента.ЕстьРеквизитТЧ_Количество Тогда
										СтрокаТабличнойЧасти.Количество = 0;							  				
									КонецЕсли;
									
									СтрЗамен = ТаблицаЗамен.Добавить();
									СтрЗамен.НоменклатураЕГАИС = СтрокаТабличнойЧасти.НоменклатураЕГАИС;
									СтрЗамен.СправкаА = ТекущаяСправкаА;
									СтрЗамен.СправкаБ = ТекущаяСправкаБ;
								КонецЕсли;	
							КонецЕсли;
							
							АСТ_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, 1, ТекущаяАкцизнаяМарка);
						КонецЕсли;	
												
					КонецЦикла;
					
				Иначе
					
					ТекущаяАкцизнаяМарка = Справочники.астМаркиЕГАИС.НайтиПоНаименованию(СтрТЧ.ЕгаисПолныйКод);
									
					ДанныеНоменклатурыПоМарке = ДатаМобайл_ОбщийМодуль.ПолучитьСправкиПоМарке(ДокументЕГАИС.ТранспортныйМодуль, ТекущаяАкцизнаяМарка);
					ТекущаяСправкаА = ДанныеНоменклатурыПоМарке.СправкаА;
					ТекущаяСправкаБ = ДанныеНоменклатурыПоМарке.СправкаБ;
					
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("НоменклатураЕГАИС,СправкаА,СправкаБ", СтрТЧ.НоменклатураЕГАИС, ТекущаяСправкаА, ТекущаяСправкаБ));
					
					Если СтрокиПоиска.Количество() = 0 Тогда  //нет строк добавляем		
						СтрокаТабличнойЧасти = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
						СтрокаТабличнойЧасти.НоменклатураЕГАИС = СтрТЧ.НоменклатураЕГАИС;
						СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
						
						Попытка
							Если ИсходныеДанные <> Неопределено Тогда  //заполнение данных по изначальным в документе (цены, номер партии итд)
								//поиск с учетом справок
								СтруктураПоискаИсходныеДанные = Новый Структура("НоменклатураЕГАИС,СправкаА,СправкаБ", СтрокаТабличнойЧасти.НоменклатураЕГАИС, ТекущаяСправкаА, ТекущаяСправкаБ);
								СтрокиПоискаИсходныеДанные = ИсходныеДанные.НайтиСтроки(СтруктураПоискаИсходныеДанные);
								Если СтрокиПоискаИсходныеДанные.Количество() > 0 Тогда
									ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоискаИсходныеДанные[0],, "Количество,КоличествоДал,КоличествоМарок,Сумма");
								Иначе
									//поиск без учета справок если подобраны были другие справки
									СтруктураПоискаИсходныеДанные = Новый Структура("НоменклатураЕГАИС", СтрокаТабличнойЧасти.НоменклатураЕГАИС);
									СтрокиПоискаИсходныеДанные = ИсходныеДанные.НайтиСтроки(СтруктураПоискаИсходныеДанные);
									Если СтрокиПоискаИсходныеДанные.Количество() > 0 Тогда
										ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоискаИсходныеДанные[0],, "СправкаА,СправкаБ,Количество,КоличествоДал,КоличествоМарок,Сумма");
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						Исключение
						КонецПопытки;
						
						СтрокаТабличнойЧасти.СправкаА = ТекущаяСправкаА;
						СтрокаТабличнойЧасти.СправкаБ = ТекущаяСправкаБ;
						
						АСТ_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество, ТекущаяАкцизнаяМарка);
					Иначе  //есть строка				
						СтрокаТабличнойЧасти = СтрокиПоиска[0];
						
						Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 4 Тогда
							ПоискЗамен = ТаблицаЗамен.НайтиСтроки(Новый Структура("НоменклатураЕГАИС,СправкаА,СправкаБ", СтрокаТабличнойЧасти.НоменклатураЕГАИС, ТекущаяСправкаА, ТекущаяСправкаБ));
							Если ПоискЗамен.Количество() = 0 Тогда								
								Если ПараметрыДокумента.ЕстьРеквизитТЧ_КоличествоМарок Тогда
									СтрокаТабличнойЧасти.КоличествоМарок = 0;							  				
								КонецЕсли;
								
								Если ПараметрыДокумента.ЕстьРеквизитТЧ_Количество Тогда
									СтрокаТабличнойЧасти.Количество = 0;							  				
								КонецЕсли;
								
								СтрЗамен = ТаблицаЗамен.Добавить();
								СтрЗамен.НоменклатураЕГАИС = СтрокаТабличнойЧасти.НоменклатураЕГАИС;
								СтрЗамен.СправкаА = ТекущаяСправкаА;
								СтрЗамен.СправкаБ = ТекущаяСправкаБ;
							КонецЕсли;	
						КонецЕсли;
						
						АСТ_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество, ТекущаяАкцизнаяМарка);
					КонецЕсли;	
															
				КонецЕсли;
			КонецЦикла; //каждого СтрТЧ Из ТабТСДЗагрузка
									
		КонецЕсли;//Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0
		
	ИначеЕсли ИмяДока = "астАктФиксацииШтрихкодовНаБалансеОрганизации" Тогда
		
		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			
			Для каждого СтрТЧ Из ТабТСДЗагрузка Цикл
				
				Если СтрТЧ.Количество = 0 Или СтрТЧ.ЕгаисПолныйКод = "" Тогда
					Продолжить;
				КонецЕсли;	
				
				ТекущаяАкцизнаяМарка = Справочники.астМаркиЕГАИС.НайтиПоНаименованию(СтрТЧ.ЕгаисПолныйКод);			
				Если ТекущаяАкцизнаяМарка.Пустая() Тогда
					ТекущаяСправкаА = Справочники.астСправкиАиБ_ЕГАИС.ПустаяСсылка();
					ТекущаяСправкаБ = Справочники.астСправкиАиБ_ЕГАИС.ПустаяСсылка();					
				Иначе
					ДанныеНоменклатурыПоМарке = ДатаМобайл_ОбщийМодуль.ПолучитьСправкиПоМарке(ДокументЕГАИС.ТранспортныйМодуль, ТекущаяАкцизнаяМарка);
					ТекущаяСправкаА = ДанныеНоменклатурыПоМарке.СправкаА;
					ТекущаяСправкаБ = ДанныеНоменклатурыПоМарке.СправкаБ;
				КонецЕсли;
								
				Если Не (ТекущаяСправкаА.Пустая() И ТекущаяСправкаБ.Пустая()) Тогда
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("НоменклатураЕГАИС,СправкаА,СправкаБ", СтрТЧ.НоменклатураЕГАИС, ТекущаяСправкаА, ТекущаяСправкаБ));
				Иначе
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("НоменклатураЕГАИС", СтрТЧ.НоменклатураЕГАИС));
				КонецЕсли;
				
				Если СтрокиПоиска.Количество() = 0 Тогда  //нет строк добавляем		
					СтрокаТабличнойЧасти = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
					СтрокаТабличнойЧасти.НоменклатураЕГАИС = СтрТЧ.НоменклатураЕГАИС;
					СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					
					СтрокаТабличнойЧасти.СправкаА = ТекущаяСправкаА;
					СтрокаТабличнойЧасти.СправкаБ = ТекущаяСправкаБ;
					
					АСТ_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество, ТекущаяАкцизнаяМарка);
				Иначе  //есть строка				
					СтрокаТабличнойЧасти = СтрокиПоиска[0];
					
					АСТ_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти ,ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество, ТекущаяАкцизнаяМарка);
				КонецЕсли;	
				
			КонецЦикла; //каждого СтрТЧ Из ТабТСДЗагрузка
									
		КонецЕсли;//Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0
		
	КонецЕсли;//Вид документа
			
	ДокументЕГАИС.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		Если Задание.Шаблон.ПроводитьРоботом Тогда
			ДокументЕГАИС.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
	КонецПопытки;
			
	Задание.ДатаЗавершения = ТекущаяДата();
	Если СокрЛП(Задание.Шаблон.ВидДокументаНового) = "" Тогда//старая схема
		Задание.ИсходныйДокумент = ДокументЕГАИС.Ссылка;
	Иначе	
		Задание.НовыйДокумент = ДокументЕГАИС.Ссылка;
	КонецЕсли;	
	
	Задание.Записать(); 
	
	//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
	ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(Задание, Истина);
	
	Возврат ДокументЕГАИС.Ссылка;
	
КонецФункции
Функция АСТ_СформироватьСписокНепроверяемыхМарокЕГАИС()
	
	СписокМарок = Новый СписокЗначений();
	Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
		ИмяСправочникаВидыАП = "астВидыАлкогольнойПродукцииЕГАИС";	
	Иначе
		ИмяСправочникаВидыАП = "алкВидыАлкогольнойПродукцииЕГАИС";
	КонецЕсли;	
	СписокМарок.Добавить(Справочники[ИмяСправочникаВидыАП].НайтиПоКоду("261")); //261 Сидр
	СписокМарок.Добавить(Справочники[ИмяСправочникаВидыАП].НайтиПоКоду("262")); //262 Пуаре
	СписокМарок.Добавить(Справочники[ИмяСправочникаВидыАП].НайтиПоКоду("263")); //263 Медовуха                                                                               
	СписокМарок.Добавить(Справочники[ИмяСправочникаВидыАП].НайтиПоКоду("500")); //500 Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно                                                                               
	СписокМарок.Добавить(Справочники[ИмяСправочникаВидыАП].НайтиПоКоду("510")); //510 Пиво с содержанием объемной доли этилового спирта свыше 8,6%                                                                               
	СписокМарок.Добавить(Справочники[ИмяСправочникаВидыАП].НайтиПоКоду("520")); //520 Напитки, изготавливаемые на основе пива 
	
	Возврат СписокМарок;
	
КонецФункции
Функция АСТ_СобратьПараметрыЕГАИС(ДокументЕГАИС, Задание)
	
	МетаданныеДока = ДокументЕГАИС.Метаданные();
	
	ПараметрыДокумента = Новый Структура();
	
	ПараметрыДокумента.Вставить("Док", ДокументЕГАИС);
	ПараметрыДокумента.Вставить("ИмяТЧПодбор", Задание.Шаблон.ИмяТабличнойЧастиПодбор);
	
	ПараметрыДокумента.Вставить("КодыНепроверяемыхМарок", АСТ_СформироватьСписокНепроверяемыхМарокЕГАИС());
	ПараметрыДокумента.Вставить("ЕстьРеквизит_ТипДокумента", МетаданныеДока.Реквизиты.Найти("ТипДокумента") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизит_ФорматТТН", МетаданныеДока.Реквизиты.Найти("ВерсияФорматаОбмена") <> Неопределено);
	
	ЭтоВходящееНаправление = Ложь;
	Если ПараметрыДокумента.ЕстьРеквизит_ТипДокумента Тогда
		Если ДокументЕГАИС.ТипДокумента = Перечисления.астТипыАктовТоварноТранспортныхНакладныхЕГАИС.Входящий Тогда
			ЭтоВходящееНаправление = Истина;
		КонецЕсли;
	КонецЕсли;
	ПараметрыДокумента.Вставить("ЭтоВходящееНаправление", ЭтоВходящееНаправление);
	
	ПараметрыДокумента.Вставить("ЕстьТЧМарок", МетаданныеДока.ТабличныеЧасти.Найти("Марки") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьТЧМарокФакт", МетаданныеДока.ТабличныеЧасти.Найти("МаркиФакт") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьТЧТоварыЕГАИСВыгруженные", МетаданныеДока.ТабличныеЧасти.Найти("ТоварыЕГАИСВыгруженные") <> Неопределено);
			
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_ЕГАИС_Номенклатура", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("НоменклатураЕГАИС") <> Неопределено);		
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_ИдСправкиБ", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ИдСправкиБ") <> Неопределено);
	
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_Количество", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Количество") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_КоличествоДал", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоДал") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_Сумма", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Сумма") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_КоличествоМарок", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоМарок") <> Неопределено);
			
	Возврат ПараметрыДокумента;
	
КонецФункции
Процедура АСТ_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, Количество, ТекущаяАкцизнаяМарка)
	
	МетаданныеДока = ДокументЕГАИС.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	
	//СоздатьМарки
	Если ТекущаяАкцизнаяМарка.Пустая() И ИмяДока = "астАктФиксацииШтрихкодовНаБалансеОрганизации" Тогда
		ТекущаяАкцизнаяМарка = АСТ_СоздатьМарку(СтрокаТабличнойЧасти.НоменклатураЕГАИС, СтрТЧ.ЕгаисПолныйКод,, СтрТЧ.ЕгаисМарка, СтрокаТабличнойЧасти.СправкаА, СтрокаТабличнойЧасти.СправкаБ);					
	КонецЕсли;	
	
	//МАРКИ
	Если ПараметрыДокумента.ЕстьТЧМарокФакт Тогда //исходящаяТТН
		
		ЕстьРеквизитСправкаА = МетаданныеДока.ТабличныеЧасти["МаркиФакт"].Реквизиты.Найти("СправкаА") <> Неопределено; 
		ЕстьРеквизитСправкаБ = МетаданныеДока.ТабличныеЧасти["МаркиФакт"].Реквизиты.Найти("СправкаБ") <> Неопределено; 
		ЕстьРеквизитСчитана = МетаданныеДока.ТабличныеЧасти["МаркиФакт"].Реквизиты.Найти("Считана") <> Неопределено; 
		ЕстьРеквизитСчитанаИзУпаковки1 = МетаданныеДока.ТабличныеЧасти["МаркиФакт"].Реквизиты.Найти("СчитанаИзУпаковки1") <> Неопределено;
		ЕстьРеквизитШКМарки = МетаданныеДока.ТабличныеЧасти["МаркиФакт"].Реквизиты.Найти("ШКМарки") <> Неопределено; 
		
		Если Не ТекущаяАкцизнаяМарка.Пустая() Тогда
			
			СтрокиПоискаМарок = ДокументЕГАИС.МаркиФакт.НайтиСтроки(Новый Структура("Марка", ТекущаяАкцизнаяМарка));
			
			Если СтрокиПоискаМарок.Количество() = 0 Тогда
				СтрокаМарки = ДокументЕГАИС.МаркиФакт.Добавить();
				СтрокаМарки.Марка = ТекущаяАкцизнаяМарка;
				
				Если ЕстьРеквизитСправкаА Тогда
					Попытка СтрокаМарки.СправкаА = СтрокаТабличнойЧасти.СправкаА; Исключение КонецПопытки;
				КонецЕсли;
				
				Если ЕстьРеквизитСправкаБ Тогда
					Попытка СтрокаМарки.СправкаБ = СтрокаТабличнойЧасти.СправкаБ; Исключение КонецПопытки;
				КонецЕсли;
				
				Если ЕстьРеквизитШКМарки Тогда
					СтрокаМарки.ШКМарки = СтрТЧ.ЕгаисПолныйКод;
				КонецЕсли;
				
				Если ПараметрыДокумента.ЕстьРеквизитТЧ_КоличествоМарок Тогда
					СтрокаТабличнойЧасти.КоличествоМарок = СтрокаТабличнойЧасти.КоличествоМарок + 1;							  				
				КонецЕсли;
				
			Иначе
				СтрокаМарки = СтрокиПоискаМарок[0];
			КонецЕсли;
					
			Если ЕстьРеквизитСчитана Тогда
				СтрокаМарки.Считана = Истина;
			КонецЕсли;
			
			Если ЕстьРеквизитСчитанаИзУпаковки1 Тогда
				Если СтрТЧ.УпаковочныйЛист <> "" Тогда
					СтрокаМарки.СчитанаИзУпаковки1 = Истина;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыДокумента.ЕстьТЧМарок Тогда //списание
		
		ЕстьРеквизитСправкаА = МетаданныеДока.ТабличныеЧасти["Марки"].Реквизиты.Найти("СправкаА") <> Неопределено; 
		ЕстьРеквизитСправкаБ = МетаданныеДока.ТабличныеЧасти["Марки"].Реквизиты.Найти("СправкаБ") <> Неопределено; 
		ЕстьРеквизитКлючСтроки = МетаданныеДока.ТабличныеЧасти["Марки"].Реквизиты.Найти("КлючСтроки") <> Неопределено; 
		
		Если Не ТекущаяАкцизнаяМарка.Пустая() Тогда
			
			СтрокиПоискаМарок = ДокументЕГАИС.Марки.НайтиСтроки(Новый Структура("Марка", ТекущаяАкцизнаяМарка));
			
			Если СтрокиПоискаМарок.Количество() = 0 Тогда
				СтрокаМарки = ДокументЕГАИС.Марки.Добавить();
				СтрокаМарки.Марка = ТекущаяАкцизнаяМарка;
				
				Если ЕстьРеквизитСправкаА Тогда
					Попытка СтрокаМарки.СправкаА = СтрокаТабличнойЧасти.СправкаА; Исключение КонецПопытки;
				КонецЕсли;
				
				Если ЕстьРеквизитСправкаБ Тогда
					Попытка СтрокаМарки.СправкаБ = СтрокаТабличнойЧасти.СправкаБ; Исключение КонецПопытки;
				КонецЕсли;
				
				Если ЕстьРеквизитКлючСтроки Тогда
					Попытка СтрокаМарки.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки; Исключение КонецПопытки;
				КонецЕсли;
				
				Если ПараметрыДокумента.ЕстьРеквизитТЧ_КоличествоМарок Тогда
					СтрокаТабличнойЧасти.КоличествоМарок = СтрокаТабличнойЧасти.КоличествоМарок + 1;							  				
				КонецЕсли;				
			Иначе
				СтрокаМарки = СтрокиПоискаМарок[0];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//МАРКИ
		
	Если ПараметрыДокумента.ЕстьРеквизитТЧ_Количество Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;							  				
	КонецЕсли;
		
	Если ПараметрыДокумента.ЕстьРеквизитТЧ_КоличествоДал Тогда
		КоличествоДал = СтрокаТабличнойЧасти.Количество * АСТ_ПолучитьКоэфПересчетаВДекалитры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.НоменклатураЕГАИС); 
		Если КоличествоДал > 0 Тогда
			СтрокаТабличнойЧасти.КоличествоДал = КоличествоДал;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитТЧ_Сумма Тогда
		Если СтрокаТабличнойЧасти.НоменклатураЕГАИС.НефасованнаяПродукция Тогда
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоДал;
		Иначе
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		КонецЕсли;	
	КонецЕсли;		
	
КонецПроцедуры
Функция АСТ_СоздатьМарку(Знач мНоменклатураЕГАИС, Знач КодМарки, Знач Упаковка = Неопределено, КодДатаМатрикс = "", СправкаА, СправкаБ) Экспорт
	
	Спр = Справочники.астМаркиЕГАИС.НайтиПоНаименованию(КодМарки, Истина);
	Если Спр.Пустая() Тогда
		Спр = Справочники.астМаркиЕГАИС.СоздатьЭлемент();
		Спр.ГрупповаяТара = Упаковка;
		Спр.Наименование = КодМарки;
		Спр.КодДатаМатрикс = КодДатаМатрикс;
		Спр.НоменклатураЕГАИС = мНоменклатураЕГАИС;
		Попытка
			Спр.Записать();
		Исключение
			Сообщить("Ошибка записи марки " + КодМарки + ": " + ОписаниеОшибки());
		КонецПопытки;	
	КонецЕсли;
	
	Возврат Спр.Ссылка;
	
КонецФункции
Функция АСТ_ПолучитьКоэфПересчетаВДекалитры(мНоменклатура, мНоменклатураЕГАИС) Экспорт
	
	КоэфДал = 0;
	
	Если ЗначениеЗаполнено(мНоменклатураЕГАИС.Объем) Тогда
		КоэфДал = мНоменклатураЕГАИС.Объем / 10;
	КонецЕсли;	
	
	Если мНоменклатураЕГАИС.НефасованнаяПродукция Тогда
		КоэфДал = 0.1;
	КонецЕсли;
	
	Если КоэфДал = 0 И ЗначениеЗаполнено(мНоменклатура) Тогда
		Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти("ОбъемДал") <> Неопределено Тогда
			КоэфДал = мНоменклатура.ОбъемДал;	
		ИначеЕсли Метаданные.РегистрыСведений.Найти("СведенияОбАлкогольнойПродукции") <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал
			|ИЗ
			|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
			|ГДЕ
			|	СведенияОбАлкогольнойПродукции.Номенклатура = &Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", мНоменклатура);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				КоэфДал = Выборка.КоэффПересчетаДал;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат КоэфДал;
	
КонецФункции

//ЕГАИС КТ2000
Процедура КТ2000_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, Количество)
	
	МетаданныеДока = ДокументЕГАИС.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	
	Если ПараметрыДокумента.ЕстьРеквизитТЧ_КлючСвязи Тогда
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСвязи)) Тогда
			СтрокаТабличнойЧасти.КлючСвязи = ПолучитьНовыйКлючСвязи(ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор]);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитТЧ_КлючСтроки Тогда
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСтроки)) Тогда
			СтрокаТабличнойЧасти.КлючСтроки = ПолучитьНовыйКлючСтроки(ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор]);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитТЧ_ИдентификаторСтроки Тогда
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки)) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Формат(ПолучитьНовыйИдентификатор(ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор]), "ЧГ=");
			СтрокаТабличнойЧасти.ИдентификаторСтрокиЧислом = Число(Формат(СтрокаТабличнойЧасти.ИдентификаторСтроки, "ЧГ="));
		КонецЕсли;
	КонецЕсли; 
	
	лТекущаяУпаковкаЭтоКороб = Истина;
	Если ИмяДока = "ДатаМобайл_УпаковочныйЛист" Тогда //поочередно загружаем короба и палеты с разными шаблонами, они генерируются в тэг упаковочный лист
		
		Если СтрТЧ.УпаковочныйЛист <> "" И СтрТЧ.ЕгаисПолныйКод <> "" Тогда
			лТекущаяУпаковкаЭтоКороб = КТ2000_ПроверитьУпаковочныйлистЭтоКороб(СтрТЧ.УпаковочныйЛист); //может быть палета или короб
		КонецЕсли;
		Если Не лТекущаяУпаковкаЭтоКороб Тогда //надо найти короб марки, т.к. считана палета
			лТекущийКороб = КТ2000_НайтиТекущийКоробМарки(СтрТЧ.ЕгаисПолныйКод);
			лТекущаяПалета = СтрТЧ.УпаковочныйЛист;
		Иначе
			лТекущийКороб = СтрТЧ.УпаковочныйЛист;
			лТекущаяПалета = "";
		КонецЕсли;	
		
	Иначе	//можем помимо генерации еще считывать палеты
		Если СтрТЧ.Короб = "" Тогда
			лТекущаяУпаковка = СтрТЧ.УпаковочныйЛист;
		Иначе
			лТекущаяУпаковка = СтрТЧ.Короб;
		КонецЕсли;
		
		лТекущаяУпаковкаЭтоКороб = Истина; 
		Если лТекущаяУпаковка <> "" И СтрТЧ.ЕгаисПолныйКод <> "" Тогда
			лТекущаяУпаковкаЭтоКороб = КТ2000_ПроверитьУпаковочныйлистЭтоКороб(лТекущаяУпаковка); //может быть палета или короб
		КонецЕсли;
		
		Если Не лТекущаяУпаковкаЭтоКороб Тогда //надо найти короб марки, т.к. считана палета
			лТекущийКороб = КТ2000_НайтиТекущийКоробМарки(СтрТЧ.ЕгаисПолныйКод);
			лТекущаяПалета = лТекущаяУпаковка;
		Иначе
			лТекущийКороб = лТекущаяУпаковка;
			лТекущаяПалета = "";
		КонецЕсли;
	КонецЕсли;
	
	//МАРКИ
	Если ПараметрыДокумента.ЕстьТЧМарок И ПараметрыДокумента.ЕстьРеквизитТЧ_КлючСвязи Тогда		
		ЕстьРеквизитТЧ_КлючСвязи_Марки = МетаданныеДока.ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("КлючСвязи") <> Неопределено;
		ЕстьРеквизитТЧ_КлючСтроки_Марки = МетаданныеДока.ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("КлючСтроки") <> Неопределено;
		ЕстьРеквизитТЧ_НомерКоробки_Марки = МетаданныеДока.ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("НомерКоробки") <> Неопределено;
		ЕстьРеквизитТЧ_ШтрихкодМарки_Марки = МетаданныеДока.ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("ШтрихкодМарки") <> Неопределено; 
		
		Если СтрТЧ.ЕгаисПолныйКод <> "" Тогда
			Если ЕстьРеквизитТЧ_ШтрихкодМарки_Марки Тогда //ЧекККМ
				СтрокиПоискаМарок = ДокументЕГАИС.АкцизныеМарки.НайтиСтроки(Новый Структура("ШтрихкодМарки", СтрТЧ.ЕгаисПолныйКод));
				Если СтрокиПоискаМарок.Количество() = 0 Тогда
					СтрокаМарки = ДокументЕГАИС.АкцизныеМарки.Добавить();
					СтрокаМарки.ШтрихкодМарки = СтрТЧ.ЕгаисПолныйКод;
					Если ЕстьРеквизитТЧ_КлючСвязи_Марки Тогда
						СтрокаМарки.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
					КонецЕсли;
					Если ЕстьРеквизитТЧ_КлючСтроки_Марки Тогда
						СтрокаМарки.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки;
					КонецЕсли;	
				Иначе
					СтрокаМарки = СтрокиПоискаМарок[0];
				КонецЕсли;
				
			Иначе
				СтрокиПоискаМарок = ДокументЕГАИС.АкцизныеМарки.НайтиСтроки(Новый Структура("КодАкцизнойМарки", СтрТЧ.ЕгаисПолныйКод));
				Если СтрокиПоискаМарок.Количество() = 0 Тогда
					СтрокаМарки = ДокументЕГАИС.АкцизныеМарки.Добавить();
					СтрокаМарки.КодАкцизнойМарки = СтрТЧ.ЕгаисПолныйКод;
					Если ЕстьРеквизитТЧ_КлючСвязи_Марки Тогда
						СтрокаМарки.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
					КонецЕсли;
					Если ЕстьРеквизитТЧ_НомерКоробки_Марки И лТекущийКороб <> "" Тогда
						СтрокаМарки.НомерКоробки = лТекущийКороб;
					КонецЕсли;				
				Иначе
					СтрокаМарки = СтрокиПоискаМарок[0];
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	//МАРКИ
	
	//МАРКИ СТАРЫЕ
	Если ПараметрыДокумента.ЕстьТЧКодыМарок И СтрТЧ.ЕгаисПолныйКод <> "" И Не ПараметрыДокумента.ЭтоВходящееНаправление Тогда		
		ЕстьРеквизитТЧ_КлючСвязи_Марки = МетаданныеДока.ТабличныеЧасти["КодыМарок"].Реквизиты.Найти("КлючСвязи") <> Неопределено;
		СтрокиПоискаМарок = ДокументЕГАИС.КодыМарок.НайтиСтроки(Новый Структура("Код", СтрТЧ.ЕгаисПолныйКод));
		Если СтрокиПоискаМарок.Количество() = 0 Тогда
			СтрокаМарки = ДокументЕГАИС.КодыМарок.Добавить();
			СтрокаМарки.Код = СтрТЧ.ЕгаисПолныйКод;
			Если ЕстьРеквизитТЧ_КлючСвязи_Марки Тогда
				СтрокаМарки.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;		
	//МАРКИ
	
	//УПАКОВКИ
	Если ПараметрыДокумента.ЕстьТЧУпаковок И лТекущийКороб <> "" И Не (ИмяДока = "алкТоварноТранспортнаяНакладнаяЕГАИС" И ПараметрыДокумента.ЭтоВходящееНаправление) Тогда	
		СтрокиПоискаУпаковок = ДокументЕГАИС.Упаковки.НайтиСтроки(Новый Структура("Упаковка,ИерархияУпаковки", лТекущийКороб, лТекущаяПалета));
		Если СтрокиПоискаУпаковок.Количество() = 0 Тогда
			СтрокаУпаковки = ДокументЕГАИС.Упаковки.Добавить();
			СтрокаУпаковки.Упаковка = лТекущийКороб;
			СтрокаУпаковки.ИерархияУпаковки = лТекущаяПалета;
		КонецЕсли;
	КонецЕсли;	
	//УПАКОВКИ
	
	Если ИмяДока = "ДатаМобайл_УпаковочныйЛист" Тогда 
		СтрокаТабличнойЧасти.Марка = СтрТЧ.ЕгаисПолныйКод;
		СтрокаТабличнойЧасти.DataMatrix = СтрТЧ.ЕгаисМарка;
		СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
		СтрокаТабличнойЧасти.Штрихкод = СтрТЧ.Штрихкод;
		
		Если ДокументЕГАИС.Тип = 1 Тогда
			СтрокаТабличнойЧасти.Короб = СтрТЧ.УпаковочныйЛист;
		Иначе
			СтрокаТабличнойЧасти.Короб = СтрТЧ.Короб;
			СтрокаТабличнойЧасти.Палета = СтрТЧ.УпаковочныйЛист;
		КонецЕсли;
		//СЕРИЯ	
		СтрокаТабличнойЧасти.Серия = ДатаМобайл_ОбщийМодуль.ПолучитьСериюПоМарке(СтрокаТабличнойЧасти.ЕГАИС_Номенклатура, СтрокаТабличнойЧасти.DataMatrix)	
	КонецЕсли;     
	
	Если ПараметрыДокумента.ЕстьРеквизитТЧ_Количество Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество+Количество;
		Попытка СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена; Исключение КонецПопытки;
	КонецЕсли; 		
	
КонецПроцедуры
Функция КТ2000_ПолучитьДокументЕГАИС(ДокументЕГАИС, Задание, ЭтоНовыйДокумент)
	
	ЕстьРасхождения = Ложь;
	
	Если ДокументЕГАИС = Неопределено Тогда
		ДокументЕГАИС = Документы[Задание.Шаблон.ВидДокумента].СоздатьДокумент();
		ЭтоНовыйДокумент = Истина;
	КонецЕсли;
	
	МетаданныеДока = ДокументЕГАИС.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	
	Попытка 
		ДокументЕгаис.ВидДокумента = ?(ЗначениеЗаполнено(ДокументЕгаис.ВидДокумента), ДокументЕгаис.ВидДокумента, Перечисления.алкВидыДокументовЕГАИС.Исходящий);
	Исключение Конецпопытки;
	
	ПараметрыДокумента = КТ2000_СобратьПараметрыЕГАИС(ДокументЕГАИС, Задание);
	
	ИсходныеДанные = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Выгрузить();
	
	Если ПараметрыДокумента.ЕстьРеквизит_ВидДокумента И ПараметрыДокумента.ЭтоВходящееНаправление Тогда
	Иначе 
		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2 Тогда
			ОчиститьТабличнуюЧасть(ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор]);
		ИначеЕсли Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда
			
			СписокМарок = ДатаМобайл_ОбщийМодуль.СформироватьСписокНепроверяемыхМарокЕГАИС();
			Для каждого стр Из ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор] Цикл
				Попытка					
					Если СписокМарок.НайтиПоЗначению(стр.АлкогольнаяПродукция.ВидПродукции) <> Неопределено И Не стр.АлкогольнаяПродукция.ВидПродукции.Пустая() Тогда
						//пиво
						Если Задание.Шаблон.ЕГАИСПодбиратьНемаркируемуюПродукцию Тогда
							Попытка стр.Количество = 0; Исключение КонецПопытки;
							Попытка стр.Сумма = 0; Исключение КонецПопытки;	
						КонецЕсли;	
					Иначе
						Попытка стр.Количество = 0; Исключение КонецПопытки;
						Попытка стр.Сумма = 0; Исключение КонецПопытки;
					КонецЕсли;
				Исключение 
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизит_ВидДокумента И ПараметрыДокумента.ЭтоВходящееНаправление Тогда
	Иначе
		Если ПараметрыДокумента.ЕстьТЧМарок И Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			ДокументЕГАИС.АкцизныеМарки.Очистить();
		КонецЕсли;
		Если ПараметрыДокумента.ЕстьТЧУпаковок И Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			ДокументЕГАИС.Упаковки.Очистить();
		КонецЕсли;	
	КонецЕсли;	
	
	КомментарийШаблона = ?(Задание.Шаблон.АвтоматическийКомментарийИспользовать, СокрЛП(Задание.Шаблон.АвтоматическийКомментарий) + " " + ТекущаяДата(), "");
	ДокументЕГАИС.Комментарий = КомментарийШаблона;
	
	Если ПараметрыДокумента.ЕстьРеквизит_ФорматТТН И ЭтоНовыйДокумент Тогда
		ДокументЕГАИС.ФорматТТН = Перечисления.ФорматыОбменаЕГАИС.V4;	
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизит_ФорматАкта И ЭтоНовыйДокумент Тогда
		Попытка ДокументЕГАИС.ФорматАкта = Перечисления.ФорматыОбменаЕГАИС.V4; Исключение КонецПопытки;		
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизит_СтатусДокумента И ЭтоНовыйДокумент Тогда	
		ДокументЕГАИС.СтатусДокумента = Перечисления.алкСтатусыДокументовЕГАИС.Создан;
	КонецЕсли;
	
	Для каждого НовЗнач Из Задание.Шаблон.НовыеЗначенияРеквизитов Цикл
		ДокументЕГАИС[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита;
	КонецЦикла;	
	
	//Пока три вида документов	
	//1.алкАктФиксацииШтрихкодовНаБалансеОрганизацииЕГАИС - инвентаризация (создать)
	//2.алкТоварноТранспортнаяНакладнаяЕГАИС - входящая (проверить помарочно, создать акт расхождений)
	//3.алкТоварноТранспортнаяНакладнаяЕГАИС - исходящая (проверить по партиям, внести марки)
	//4.ДатаМобайл_УпаковочныйЛист - работа с упаковками (создать)
	//5.ЧекККМ - продажа (создать)
	//6.алкАктОСписанииТовара - списание(создать)
	
	ТабТСДЗагрузка = Задание.СобранныеДанныеПодбор.Выгрузить();
	ТабТСДЗагрузка.Свернуть("Номенклатура,НоменклатураЕГАИС,ХарактеристикаНоменклатуры,ШтрихКод,PDF,ЕдиницаИзмерения,ЕгаисДатаРозлива,ЕгаисМарка,ЕгаисПолныйКод,УпаковочныйЛист,Короб","Количество");
	
	//1.алкАктФиксацииШтрихкодовНаБалансеОрганизацииЕГАИС
	Если ИмяДока = "алкАктФиксацииШтрихкодовНаБалансеОрганизацииЕГАИС" Тогда
		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			
			Для каждого СтрТЧ Из ТабТСДЗагрузка Цикл
				
				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция", СтрТЧ.НоменклатураЕГАИС));
				
				Если СтрокиПоиска.Количество() = 0 Тогда  //нет строк добавляем		
					СтрокаТабличнойЧасти = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
					СтрокаТабличнойЧасти.АлкогольнаяПродукция = СтрТЧ.НоменклатураЕГАИС;
					КТ2000_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,ДокументЕГАИС,ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество);
				Иначе  //есть строка				
					СтрокаТабличнойЧасти = СтрокиПоиска[0];
					КТ2000_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,ДокументЕГАИС,ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество);
				КонецЕсли;	
				
			КонецЦикла; //каждого СтрТЧ Из ТабТСДЗагрузка
			
		КонецЕсли;//Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0
		
		//2.алкТоварноТранспортнаяНакладнаяЕГАИС - входящая 
	ИначеЕсли ИмяДока = "алкТоварноТранспортнаяНакладнаяЕГАИС" И ПараметрыДокумента.ЭтоВходящееНаправление Тогда
		//предполагаем что из ТСД может быть только недостача, нарушений быть не может их проверяет ТСД
		
		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			
			//1.Получаем расхождения
			ЗапросРасхождений = Новый Запрос("ВЫБРАТЬ
			|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
			|	СУММА(ВложенныйЗапрос.План) КАК План,
			|	СУММА(ВложенныйЗапрос.Факт) КАК Факт,
			|	СУММА(-ВложенныйЗапрос.План + ВложенныйЗапрос.Факт) КАК Расхождения
			|ПОМЕСТИТЬ ВременнаяТаблица
			|ИЗ
			|	(ВЫБРАТЬ
			|		СобранныеДанныеПодбор.НоменклатураЕГАИС КАК Номенклатура,
			|		0 КАК План,
			|		СобранныеДанныеПодбор.Количество КАК Факт
			|	ИЗ
			|		Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
			|	ГДЕ
			|		СобранныеДанныеПодбор.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаДокумента1СПодбор.АлкогольнаяПродукция,
			|		ТаблицаДокумента1СПодбор.Количество,
			|		0
			|	ИЗ
			|		Документ.алкТоварноТранспортнаяНакладнаяЕГАИС.Товары КАК ТаблицаДокумента1СПодбор
			|	ГДЕ
			|		ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблица.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблица.План,
			|	ВременнаяТаблица.Факт,
			|	ВременнаяТаблица.Расхождения
			|ИЗ
			|	ВременнаяТаблица КАК ВременнаяТаблица
			|ГДЕ
			|	ВременнаяТаблица.План - ВременнаяТаблица.Факт <> 0
			|	И (ВременнаяТаблица.План > 0
			|			ИЛИ ВременнаяТаблица.Факт > 0)");
			
			ЗапросРасхождений.УстановитьПараметр("Ссылка", Задание.Ссылка);
			ЗапросРасхождений.УстановитьПараметр("ИсходныйДокумент", Задание.ИсходныйДокумент);					
			ТаблицаРасхождения = ЗапросРасхождений.Выполнить().Выгрузить();
			ТаблицаРасхождения.Свернуть("Номенклатура");
			
			Если ТаблицаРасхождения.Количество() > 0 Тогда
				
				ЕстьРасхождения = Истина;
				
				//2.Получаем таблицу документа по расхождениям
				ЗапросСтрокДокументаСРасхождением = Новый Запрос("ВЫБРАТЬ 
				|  ТаблицаДокумента1СПодбор.АлкогольнаяПродукция,
				|  ТаблицаДокумента1СПодбор.ИдентификаторСтроки,
				|  ТаблицаДокумента1СПодбор.Количество,
				|  0 КАК КоличествоФакт,
				|  ТаблицаДокумента1СПодбор.СправкаА,
				|  ТаблицаДокумента1СПодбор.СправкаБ,
				|  ТаблицаДокумента1СПодбор.Крепость,
				|  ТаблицаДокумента1СПодбор.КрепостьМин,
				|  ТаблицаДокумента1СПодбор.КрепостьМакс,
				|  ТаблицаДокумента1СПодбор.КлючСвязи
				|	ИЗ
				|		Документ.алкТоварноТранспортнаяНакладнаяЕГАИС.Товары КАК ТаблицаДокумента1СПодбор
				|	ГДЕ
				|		ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент
				|		И ТаблицаДокумента1СПодбор.АлкогольнаяПродукция В (&СписокРасхождений)
				|		И ТаблицаДокумента1СПодбор.Количество>0");
				
				ЗапросСтрокДокументаСРасхождением.УстановитьПараметр("ИсходныйДокумент", Задание.ИсходныйДокумент);
				ЗапросСтрокДокументаСРасхождением.УстановитьПараметр("СписокРасхождений", ТаблицаРасхождения);
				ТаблицаРасхожденияДокумент = ЗапросСтрокДокументаСРасхождением.Выполнить().Выгрузить();
				
				//3.Получаем таблицу выполнено по расхождениям
				ЗапросСтрокВыполненоСРасхождением = Новый Запрос("ВЫБРАТЬ 
				|  СобранныеДанныеПодбор.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
				|  СобранныеДанныеПодбор.ЕгаисПолныйКод КАК ЕгаисПолныйКод,
				|  Сумма(СобранныеДанныеПодбор.Количество) КАК Количество
				|  ПОМЕСТИТЬ лВремВыполнено
				|ИЗ
				|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
				|ГДЕ
				|	СобранныеДанныеПодбор.Ссылка = &Ссылка
				|	И СобранныеДанныеПодбор.НоменклатураЕГАИС В (&СписокРасхождений)
				|СГРУППИРОВАТЬ ПО
				|  СобранныеДанныеПодбор.НоменклатураЕГАИС,
				|  СобранныеДанныеПодбор.ЕгаисПолныйКод
				|;
				|ВЫБРАТЬ  
				|  лВремВыполнено.НоменклатураЕГАИС,
				|  лВремВыполнено.ЕгаисПолныйКод,
				|  лВремВыполнено.Количество
				|ИЗ
				|  лВремВыполнено КАК лВремВыполнено
				|ГДЕ
				|	лВремВыполнено.Количество > 0");
				
				ЗапросСтрокВыполненоСРасхождением.УстановитьПараметр("Ссылка", Задание.Ссылка);
				ЗапросСтрокВыполненоСРасхождением.УстановитьПараметр("СписокРасхождений", ТаблицаРасхождения);
				ТаблицаРасхожденияВыполнено = ЗапросСтрокВыполненоСРасхождением.Выполнить().Выгрузить();
				
				//4.Перебираем собранные строки сначала по маркам, если марка есть в документе, то удаляем из собранных, количество факт увеличиваем
				Для n = 0 По ТаблицаРасхожденияВыполнено.Количество() - 1 Цикл
					//Для каждого Строка Из ТаблицаРасхожденияВыполнено Цикл
					Если n > ТаблицаРасхожденияВыполнено.Количество() - 1 Тогда
						Продолжить;
					КонецЕсли;
					СтрокиПоискаМарок = ДокументЕГАИС.АкцизныеМарки.НайтиСтроки(Новый Структура("КодАкцизнойМарки", ТаблицаРасхожденияВыполнено[n].ЕгаисПолныйКод));
					Если СтрокиПоискаМарок.Количество() > 0 Тогда	
						лКлючСвязи = СтрокиПоискаМарок[0].КлючСвязи;
						СтрокиПоискаВдокументе = ТаблицаРасхожденияДокумент.НайтиСтроки(Новый Структура("КлючСвязи", лКлючСвязи));
						Если СтрокиПоискаВдокументе.Количество() > 0 Тогда	
							лСтрока = СтрокиПоискаВдокументе[0];
							лСтрока.КоличествоФакт = лСтрока.КоличествоФакт + 1;
						КонецЕсли;
						ТаблицаРасхожденияВыполнено.Удалить(ТаблицаРасхожденияВыполнено[n]);
						n = n - 1;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЦикла;	
				
				//5.Перебираем собранные строки партионно, распределяем факт по плану, только партионных марок
				Для каждого Строка Из ТаблицаРасхожденияВыполнено Цикл
					НужноСписать = Строка.Количество;
					МассивОстаток = ТаблицаРасхожденияДокумент.НайтиСтроки(Новый Структура("АлкогольнаяПродукция", Строка.НоменклатураЕГАИС));
					Для каждого СтрОстаток Из МассивОстаток Цикл
						//исключить строки с указанными марками	
						//исключить строки с указанными марками
						
						ДоступноКСписанию =  (СтрОстаток.Количество - СтрОстаток.КоличествоФакт);
						КоличествоСписываем = Мин(НужноСписать, ДоступноКСписанию);
						НужноСписать = НужноСписать - КоличествоСписываем;
						СтрОстаток.КоличествоФакт = СтрОстаток.КоличествоФакт + КоличествоСписываем;
						Если СтрОстаток.Количество = СтрОстаток.КоличествоФакт Тогда
							ТаблицаРасхожденияДокумент.Удалить(СтрОстаток);	        	        	        	        
						КонецЕсли;
						Если НужноСписать = 0 Тогда         	        	        
							Прервать;	        	        	        	        
						КонецЕсли;	        	        	        
					КонецЦикла;
				КонецЦикла;	
				
				//6.Получается итоговая таблица результата расхождений, где план факт не совпадает, вводим Акт расхождений
				
			КонецЕсли;
						
			Если ЕстьРасхождения Тогда
				ВидАктаТТН = ПредопределенноеЗначение("Перечисление.алкВидыАктовКТоварноТранспортнойНакладнойЕГАИС.АктРасхождения");
				КТ2000_ВвестиАктКТТНЕГАИСНаОснованииДокументаЕГАИС(ДокументЕГАИС.Ссылка, ВидАктаТТН, ТаблицаРасхожденияДокумент, ТабТСДЗагрузка);
			Иначе
				ВидАктаТТН = ПредопределенноеЗначение("Перечисление.алкВидыАктовКТоварноТранспортнойНакладнойЕГАИС.АктПодтверждения");
				КТ2000_ВвестиАктКТТНЕГАИСНаОснованииДокументаЕГАИС(ДокументЕГАИС.Ссылка, ВидАктаТТН, Неопределено, Неопределено);
			КонецЕсли;	
			
		КонецЕсли;//Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0
		
		//3.алкТоварноТранспортнаяНакладнаяЕГАИС - исходящая
	ИначеЕсли (ИмяДока = "алкТоварноТранспортнаяНакладнаяЕГАИС" Или ИмяДока = "алкАктОСписанииТовара") И Не ПараметрыДокумента.ЭтоВходящееНаправление Тогда
		
		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			
			Для каждого СтрТЧ Из ТабТСДЗагрузка Цикл
				
				Если СтрТЧ.Количество = 0 Тогда  
					Продолжить;
				КонецЕсли;	
				
				Если СтрТЧ.ЕгаисПолныйКод <> "" Тогда
					ДанныеНоменклатурыПоМарке = КТ2000_ПолучитьНоменклатуруАкцизнойМарки(СтрТЧ.ЕгаисПолныйКод);
					Если ДанныеНоменклатурыПоМарке.Количество() > 0 Тогда
						ТекущаяСправкаА = ДанныеНоменклатурыПоМарке[0].СправкаА;
						ТекущаяСправкаБ = ДанныеНоменклатурыПоМарке[0].СправкаБ;
					Иначе
						ТекущаяСправкаА = Справочники.алкКлассификаторСправокАиБ.ПустаяСсылка();
						ТекущаяСправкаБ = Справочники.алкКлассификаторСправокАиБ.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;	
				
				Если СтрТЧ.ЕгаисПолныйКод <> "" Тогда
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция,СправкаА,СправкаБ", СтрТЧ.НоменклатураЕГАИС, ТекущаяСправкаА, ТекущаяСправкаБ));
				Иначе
					//пиво
					СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция", СтрТЧ.НоменклатураЕГАИС));
				КонецЕсли;
				
				Если СтрокиПоиска.Количество() = 0 Тогда  //нет строк добавляем		
					СтрокаТабличнойЧасти = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
					СтрокаТабличнойЧасти.АлкогольнаяПродукция = СтрТЧ.НоменклатураЕГАИС;
					
					Попытка
						Если ИсходныеДанные <> Неопределено Тогда  //заполнение данных по изначальным в документе (цены, номер партии итд)
							//поиск с учетом справок
							СтруктураПоискаИсходныеДанные = Новый Структура("АлкогольнаяПродукция,СправкаА,СправкаБ", СтрокаТабличнойЧасти.АлкогольнаяПродукция, ТекущаяСправкаА, ТекущаяСправкаБ);
							СтрокиПоискаИсходныеДанные = ИсходныеДанные.НайтиСтроки(СтруктураПоискаИсходныеДанные);
							Если СтрокиПоискаИсходныеДанные.Количество() > 0 Тогда
								ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоискаИсходныеДанные[0],, "Количество,Сумма,КлючСвязи,ИдентификаторСтроки,ИдентификаторСтрокиЧислом");
							Иначе
								//поиск без учета справок если подобраны были другие справки
								СтруктураПоискаИсходныеДанные = Новый Структура("АлкогольнаяПродукция", СтрокаТабличнойЧасти.АлкогольнаяПродукция);
								СтрокиПоискаИсходныеДанные = ИсходныеДанные.НайтиСтроки(СтруктураПоискаИсходныеДанные);
								Если СтрокиПоискаИсходныеДанные.Количество() > 0 Тогда
									ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоискаИсходныеДанные[0],, "СправкаА,СправкаБ,Количество,Сумма,КлючСвязи,ИдентификаторСтроки,ИдентификаторСтрокиЧислом");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Исключение
					КонецПопытки;	
					
					Если СтрТЧ.ЕгаисПолныйКод <> "" Тогда
						Если ПараметрыДокумента.ЕстьРеквизитТЧ_СправкаА Тогда
							СтрокаТабличнойЧасти.СправкаА = ТекущаяСправкаА;
						КонецЕсли;
						Если ПараметрыДокумента.ЕстьРеквизитТЧ_СправкаБ Тогда
							СтрокаТабличнойЧасти.СправкаБ = ТекущаяСправкаБ;
						КонецЕсли; 
					КонецЕсли; 		
					
					КТ2000_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество);
				Иначе  //есть строка				
					СтрокаТабличнойЧасти = СтрокиПоиска[0];
					КТ2000_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество);
				КонецЕсли;	
				
			КонецЦикла; //каждого СтрТЧ Из ТабТСДЗагрузка
			
		КонецЕсли;//Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0
		
		//4.ДатаМобайл_УпаковочныйЛист - работа с упаковками (создать)	
	ИначеЕсли ИмяДока = "ДатаМобайл_УпаковочныйЛист" Тогда
		
		ДокументЕГАИС.Тип = Задание.Шаблон.ИспользованиеУпаковочныхЛистовПодбор;
		ДокументЕГАИС.ТСД = Задание.ТСД;
		ДокументЕГАИС.ЕГАИС = Истина;
		
		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			
			Для каждого СтрТЧ Из ТабТСДЗагрузка Цикл
				
				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;	
							
				СтрокаТабличнойЧасти = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
				СтрокаТабличнойЧасти.ЕГАИС_Номенклатура = СтрТЧ.НоменклатураЕГАИС;
				КТ2000_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество);
				
			КонецЦикла; //каждого СтрТЧ Из ТабТСДЗагрузка
			
		КонецЕсли;//Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0	
		
	ИначеЕсли ИмяДока = "ЧекККМ" Тогда
		
		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			
			Для каждого СтрТЧ Из ТабТСДЗагрузка Цикл		
				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				СтрокиПоиска = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры));
				
				
				Если СтрокиПоиска.Количество() = 0 Тогда
					СтрокаТабличнойЧасти = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
					СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрТЧ.ХарактеристикаНоменклатуры;
					СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрТЧ.ЕдиницаИзмерения;
					СтрокаТабличнойЧасти.Коэффициент = СтрТЧ.ЕдиницаИзмерения.Коэффициент;
					
					ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента, ДокументЕГАИС, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти);
				Иначе	
					СтрокаТабличнойЧасти = СтрокиПоиска[0];
				КонецЕсли;	
				
				КТ2000_ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, Задание, СтрТЧ, СтрТЧ.Количество);
				ОбработатьСтрокуТЧ(ПараметрыДокумента, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, Задание.Шаблон);
							
			КонецЦикла; //каждого СтрТЧ Из ТабТСДЗагрузка
			
		КонецЕсли;//Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0
		
	КонецЕсли;//Вид документа 
	
	ДокументЕГАИС.Записать(РежимЗаписиДокумента.Запись);
	Задание.ДатаЗавершения = ТекущаяДата();
	Если СокрЛП(Задание.Шаблон.ВидДокументаНового) = "" Тогда//старая схема
		Задание.ИсходныйДокумент = ДокументЕГАИС.Ссылка;
	Иначе	
		Задание.НовыйДокумент = ДокументЕГАИС.Ссылка;
	КонецЕсли;	
	Задание.Записать();	
	
	//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
	ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(Задание, Истина);
	
	Возврат ДокументЕГАИС.Ссылка;
	
КонецФункции
Функция КТ2000_СобратьПараметрыЕГАИС(ДокументЕГАИС, Задание)
	
	МетаданныеДока = ДокументЕГАИС.Метаданные();
	
	ПараметрыДокумента = Новый Структура();
	
	ПараметрыДокумента.Вставить("Док", ДокументЕГАИС);
	ПараметрыДокумента.Вставить("ИмяТЧПодбор", Задание.Шаблон.ИмяТабличнойЧастиПодбор);
	
	ПараметрыДокумента.Вставить("КодыНепроверяемыхМарок", ДатаМобайл_ОбщийМодуль.СформироватьСписокНепроверяемыхМарокЕГАИС());
	ПараметрыДокумента.Вставить("ЕстьРеквизит_ВидДокумента", МетаданныеДока.Реквизиты.Найти("ВидДокумента") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизит_ФорматТТН", МетаданныеДока.Реквизиты.Найти("ФорматТТН") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизит_ФорматАкта", МетаданныеДока.Реквизиты.Найти("ФорматАкта") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизит_СтатусДокумента", МетаданныеДока.Реквизиты.Найти("СтатусДокумента") <> Неопределено);
	
	ЭтоВходящееНаправление = Ложь;
	Если ПараметрыДокумента.ЕстьРеквизит_ВидДокумента Тогда
		Если ДокументЕГАИС.ВидДокумента = Перечисления.алкВидыДокументовЕГАИС.Входящий Тогда
			ЭтоВходящееНаправление = Истина;
		КонецЕсли;
	КонецЕсли;
	ПараметрыДокумента.Вставить("ЭтоВходящееНаправление", ЭтоВходящееНаправление);
	
	ПараметрыДокумента.Вставить("ЕстьТЧМарок", МетаданныеДока.ТабличныеЧасти.Найти("АкцизныеМарки") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьТЧУпаковок", МетаданныеДока.ТабличныеЧасти.Найти("Упаковки") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьТЧКодыМарок", МетаданныеДока.ТабличныеЧасти.Найти("КодыМарок") <> Неопределено);
	
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_Марка", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Марка") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_ЕГАИС_Номенклатура", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ЕГАИС_Номенклатура") <> Неопределено);		
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_КлючСвязи", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КлючСвязи") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_КлючСтроки", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КлючСтроки") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_ИдентификаторСтроки", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено);
	
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_Количество", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Количество") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_СправкаА", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("СправкаА") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитТЧ_СправкаБ", МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("СправкаБ") <> Неопределено);
	
	Возврат ПараметрыДокумента;
	
КонецФункции
Функция КТ2000_ВвестиАктКТТНЕГАИСНаОснованииДокументаЕГАИС(ДокументОснованиеЕГАИС, ВидАктаТТН, ТаблицаРасхожденияДокумент, ТабТСДЗагрузка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	алкАктКТоварноТранспортнойНакладнойЕГАИС.Ссылка,
	|	алкАктКТоварноТранспортнойНакладнойЕГАИС.СтатусДокумента
	|ИЗ
	|	Документ.алкАктКТоварноТранспортнойНакладнойЕГАИС КАК алкАктКТоварноТранспортнойНакладнойЕГАИС
	|ГДЕ
	|	алкАктКТоварноТранспортнойНакладнойЕГАИС.ТоварноТранспортнаяНакладнаяЕГАИС = &СсылкаНаДокумент";
	
	Запрос.УстановитьПараметр("СсылкаНаДокумент", ДокументОснованиеЕГАИС);
	ВыборкаДокументов=Запрос.Выполнить().Выбрать();
	
	СтатусДокумента = Неопределено;
	АктКТТНЕГАИС = Неопределено;
	
	Если ВыборкаДокументов.Следующий() Тогда
		СтатусДокумента = ВыборкаДокументов.СтатусДокумента;
		АктКТТНЕГАИС = ВыборкаДокументов.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусДокумента) И СтатусДокумента <> Перечисления.алкСтатусыДокументовЕГАИС.ПроведениеОтменено Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Результат", Ложь);
		СтруктураВозврата.Вставить("КодОшибки", 3);
		СтруктураВозврата.Вставить("ОписаниеОшибки", "На основании документа ЕГАИС уже введен акт " + Строка(АктКТТНЕГАИС) + ", отраженный в ЕГАИС.");
		СтруктураВозврата.Вставить("АктКТТН", АктКТТНЕГАИС);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Модуль_алкИнтеграцияЕГАИС = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("алкИнтеграцияЕГАИС");
	
	// На основании исходящей ТТН можно ввести только акт отказа.
	Если (ВидАктаТТН = ПредопределенноеЗначение("Перечисление.алкВидыАктовКТоварноТранспортнойНакладнойЕГАИС.АктПодтверждения")
		Или ВидАктаТТН = ПредопределенноеЗначение("Перечисление.алкВидыАктовКТоварноТранспортнойНакладнойЕГАИС.АктРасхождения"))
		И ТипЗнч(ДокументОснованиеЕГАИС) = Тип("ДокументСсылка.алкТоварноТранспортнаяНакладнаяЕГАИС") Тогда
		ВидДокументаОснования = Модуль_алкИнтеграцияЕГАИС.ЗначениеРеквизитаОбъекта(ДокументОснованиеЕГАИС, "ВидДокумента");
		Если ВидДокументаОснования = ПредопределенноеЗначение("Перечисление.алкВидыДокументовЕГАИС.Исходящий") Тогда
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("Результат", Ложь);
			СтруктураВозврата.Вставить("КодОшибки", 4);
			СтруктураВозврата.Вставить("ОписаниеОшибки", "На основании исходящей ТТН возможно ввести только акт об отказе.");
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АктКТТНЕГАИС) И СтатусДокумента <> Перечисления.алкСтатусыДокументовЕГАИС.ПроведениеОтменено Тогда
		АктКТТНЕГАИСОбъект = АктКТТНЕГАИС.ПолучитьОбъект();
	Иначе
		АктКТТНЕГАИСОбъект = Документы.алкАктКТоварноТранспортнойНакладнойЕГАИС.СоздатьДокумент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(АктКТТНЕГАИСОбъект, ДокументОснованиеЕГАИС,, "Дата,Номер");
	
	АктКТТНЕГАИСОбъект.СтатусДокумента = Перечисления.алкСтатусыДокументовЕГАИС.Создан;
	АктКТТНЕГАИСОбъект.ВидДокумента = Перечисления.алкВидыДокументовЕГАИС.Исходящий;
	Если ЗначениеЗаполнено(ДокументОснованиеЕГАИС.ФорматТТН) Тогда
		АктКТТНЕГАИСОбъект.ФорматАкта = ДокументОснованиеЕГАИС.ФорматТТН;
	Иначе
		АктКТТНЕГАИСОбъект.ФорматАкта = Перечисления.ФорматыОбменаЕГАИС.V2;
	КонецЕсли;
	АктКТТНЕГАИСОбъект.Товары.Очистить();
	
	АктКТТНЕГАИСОбъект.Дата = ТекущаяДатаСеанса();
		
	Если ВидАктаТТН = Перечисления.алкВидыАктовКТоварноТранспортнойНакладнойЕГАИС.АктРасхождения Тогда
		
		//Добавить заполнение акта всеми позициями
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.АлкогольнаяПродукция,
		|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.ИдентификаторСтроки,
		|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.Количество КАК Количество,
		|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.Количество КАК КоличествоФакт,
		|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.СправкаА,
		|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.СправкаБ
		|ИЗ
		|	Документ.алкТоварноТранспортнаяНакладнаяЕГАИС.Товары КАК алкТоварноТранспортнаяНакладнаяЕГАИСТовары
		|ГДЕ
		|	алкТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка = &ТТНЕГАИС";
		Запрос.УстановитьПараметр("ТТНЕГАИС", ДокументОснованиеЕГАИС);
		Выборка = Запрос.Выполнить().Выбрать();
		инд = 1;
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = АктКТТНЕГАИСОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.КлючСвязи = инд;
			инд = инд + 1;
		КонецЦикла;
		
		//добавить расхождения
		Для каждого СтрокаРасхождений Из ТаблицаРасхожденияДокумент Цикл
			Если СтрокаРасхождений.Количество = СтрокаРасхождений.КоличествоФакт Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиПоискаВАкте = АктКТТНЕГАИСОбъект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаРасхождений.ИдентификаторСтроки));		
			Если СтрокиПоискаВАкте.Количество() > 0 Тогда
				
				ТекущаяСтрока = СтрокиПоискаВАкте[0];
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаРасхождений,, "КлючСвязи");
				
				//найти марки		
				СтрокиПоискаМарокДокумента = ДокументОснованиеЕГАИС.АкцизныеМарки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаРасхождений.КлючСвязи));
				Если СтрокиПоискаМарокДокумента.Количество() > 0 Тогда
					Для каждого строкаМаркиДокумента Из СтрокиПоискаМарокДокумента Цикл
						СтрокиПоискаМарокФакт = ТабТСДЗагрузка.НайтиСтроки(Новый Структура("ЕгаисПолныйКод", строкаМаркиДокумента.КодАкцизнойМарки));
						Если СтрокиПоискаМарокФакт.Количество() = 0 Тогда
							НоваяСтрокаМарок = АктКТТНЕГАИСОбъект.АкцизныеМарки.Добавить();
							НоваяСтрокаМарок.КодАкцизнойМарки = строкаМаркиДокумента.КодАкцизнойМарки;
							НоваяСтрокаМарок.КлючСвязи = ТекущаяСтрока.КлючСвязи;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	АктКТТНЕГАИСОбъект.ВидАкта = ВидАктаТТН;
	АктКТТНЕГАИСОбъект.ТоварноТранспортнаяНакладнаяЕГАИС = ДокументОснованиеЕГАИС;
	
	Модуль_алкИнтеграцияЕГАИСКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("алкИнтеграцияЕГАИСКлиентСервер");
	
	Попытка
		АктКТТНЕГАИСОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
		Сообщить("Не удалось провести документ""" + Строка(АктКТТНЕГАИСОбъект) + """ по причине:" + Модуль_алкИнтеграцияЕГАИСКлиентСервер.ПолучитьСтэкОшибок(ОписаниеОшибки(), ИнформацияОбОшибке()));
		АктКТТНЕГАИСОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	АктКТТНЕГАИС = АктКТТНЕГАИСОбъект.Ссылка;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	алкСоответствияДокументовЕГАИСИУчетныхДокументов.УчетныйДокумент
	|ИЗ
	|	РегистрСведений.алкСоответствияДокументовЕГАИСИУчетныхДокументов КАК алкСоответствияДокументовЕГАИСИУчетныхДокументов
	|ГДЕ
	|	алкСоответствияДокументовЕГАИСИУчетныхДокументов.ДокументЕГАИС = &ДокументЕГАИС";
	Запрос.УстановитьПараметр("ДокументЕГАИС", ДокументОснованиеЕГАИС);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.алкСоответствияДокументовЕГАИСИУчетныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДокументЕГАИС = АктКТТНЕГАИС;
		МенеджерЗаписи.УчетныйДокумент = Выборка.УчетныйДокумент;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;		
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Результат", Истина);
	СтруктураВозврата.Вставить("КодОшибки", 0);
	СтруктураВозврата.Вставить("ОписаниеОшибки", "");
	СтруктураВозврата.Вставить("ДокументЕГАИС", АктКТТНЕГАИС);
	
	Возврат СтруктураВозврата;
	
КонецФункции
Функция КТ2000_ПолучитьНоменклатуруАкцизнойМарки(ИдентификаторМарки = "", Период = Неопределено) 
	
	МассивМарок = Новый Массив;
	Если ТипЗнч(ИдентификаторМарки) = Тип("Строка") Тогда
		МассивМарок.Добавить(ИдентификаторМарки);
	Иначе
		МассивМарок = ИдентификаторМарки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивМарок", МассивМарок);
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), Период, Неопределено));
	Запрос.Текст = "ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарокСрезПоследних.Период,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Регистратор,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Марка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка,
	|	алкХранилищеАкцизныхМарокСрезПоследних.СправкаБ,
	|	алкХранилищеАкцизныхМарокСрезПоследних.АлкогольнаяПродукция,
	|	алкХранилищеАкцизныхМарокСрезПоследних.Организация,
	|	алкХранилищеАкцизныхМарокСрезПоследних.ПунктРазгрузки,
	|	алкХранилищеАкцизныхМарокСрезПоследних.ОтметкаВыбытия
	|ПОМЕСТИТЬ ТаблицаМарок
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних(
	|			&Период,
	|			Марка В (&МассивМарок)
	|				И ОтметкаВыбытия = ЛОЖЬ) КАК алкХранилищеАкцизныхМарокСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМарок.АлкогольнаяПродукция,
	|	ТаблицаМарок.СправкаБ,
	| 	ЕстьNULL(алкСоответствияСправокАиБЕГАИСИСерий.СерияНоменклатуры,ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК СерияНоменклатуры,
	| 	ЕстьNULL(алкСоответствияСправокАиБЕГАИСИСерий.СправкаА,ЗНАЧЕНИЕ(Справочник.алкКлассификаторСправокАиБ.ПустаяСсылка)) КАК СправкаА,
	|	ТаблицаМарок.Марка
	|ПОМЕСТИТЬ ВТ_СправкиАИБ
	|ИЗ
	|	ТаблицаМарок КАК ТаблицаМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.алкСоответствияСправокАиБЕГАИСИСерий КАК алкСоответствияСправокАиБЕГАИСИСерий
	|		ПО ТаблицаМарок.СправкаБ = алкСоответствияСправокАиБЕГАИСИСерий.СправкаБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМарок.Период,
	|	ТаблицаМарок.Регистратор,
	|	ТаблицаМарок.Марка КАК Марка,
	|	ТаблицаМарок.Упаковка,
	|	ТаблицаМарок.СправкаБ КАК СправкаБ,
	|	ТаблицаМарок.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаМарок.Организация,
	|	ТаблицаМарок.ПунктРазгрузки,
	|	ТаблицаМарок.ОтметкаВыбытия,
	|	ЕСТЬNULL(ВТ_СправкиАИБ.СправкаА, ЗНАЧЕНИЕ(Справочник.алкКлассификаторСправокАиБ.ПустаяСсылка)) КАК СправкаА,
	|	ЕСТЬNULL(ВТ_СправкиАИБ.СерияНоменклатуры, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК СерияНоменклатуры,
	|	ЕСТЬNULL(ВТ_СправкиАИБ.СерияНоменклатуры.алкВладелец, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
	|ИЗ
	|	ТаблицаМарок КАК ТаблицаМарок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СправкиАИБ КАК ВТ_СправкиАИБ
	|		ПО ТаблицаМарок.Марка = ВТ_СправкиАИБ.Марка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Марка,
	|	АлкогольнаяПродукция,
	|	Номенклатура,
	|	СправкаА,
	|	СправкаБ";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции
Функция КТ2000_ПроверитьУпаковочныйлистЭтоКороб(УпаковочныйЛист, Период = Неопределено)
	
	Если ПустаяСтрока(УпаковочныйЛист) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Упаковка", УпаковочныйЛист);
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), Период, Неопределено));
	Запрос.Текст = "ВЫБРАТЬ
	|	алкХранилищеУпаковокСрезПоследних.Упаковка,
	|	алкХранилищеУпаковокСрезПоследних.ИерархияУпаковки
	|ИЗ
	|	РегистрСведений.алкХранилищеУпаковок.СрезПоследних(&Период, ИерархияУпаковки = &Упаковка) КАК алкХранилищеУпаковокСрезПоследних";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Функция КТ2000_НайтиТекущийКоробМарки(Марка, Период = Неопределено)
	
	Если ПустаяСтрока(Марка) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Марка", Марка);
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), Период, Неопределено));
	Запрос.Текст = "ВЫБРАТЬ
	|	алкХранилищеАкцизныхМарокСрезПоследних.Упаковка
	|ИЗ
	|	РегистрСведений.алкХранилищеАкцизныхМарок.СрезПоследних(&Период, Марка = &Марка) КАК алкХранилищеАкцизныхМарокСрезПоследних";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Упаковка;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции
Функция ПолучитьНовыйКлючСвязи(ТЧ)
	СвободныйКлюч = 0;
	Для каждого СтрокаТаблицы Из ТЧ Цикл
		СвободныйКлюч = Макс(СтрокаТаблицы.КлючСвязи, СвободныйКлюч);
	КонецЦикла;
	СвободныйКлюч = СвободныйКлюч + 1;
	
	Возврат СвободныйКлюч;
КонецФункции
Функция ПолучитьНовыйКлючСтроки(ТЧ)
	СвободныйКлюч = 0;
	Для каждого СтрокаТаблицы Из ТЧ Цикл
		СвободныйКлюч = Макс(СтрокаТаблицы.КлючСтроки, СвободныйКлюч);
	КонецЦикла;
	СвободныйКлюч=СвободныйКлюч + 1;
	
	Возврат СвободныйКлюч;
КонецФункции
Функция ПолучитьНовыйИдентификатор(ТЧ)	
	СвободныйНомер = 0;
	Для каждого СтрокаТаблицы Из ТЧ Цикл
		Попытка
			ИдентификаторСтрокиЧислом = Число(СтрокаТаблицы.ИдентификаторСтроки);
			СвободныйНомер = Макс(СвободныйНомер, ИдентификаторСтрокиЧислом);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	СвободныйНомер = СвободныйНомер + 1;
	
	Возврат СвободныйНомер;
КонецФункции

//ДОПОЛНИТЕЛЬНЫЕ ФОРМЫ
Процедура ИзменитьРеквизитыШапкиИзДополнительныхФорм(Док, Шаблон, Об)
	
	СсылкаНаДокТСД = Об.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма КАК ДополнительнаяФорма
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
	|ГДЕ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон = &Шаблон
	|	И НЕ ЕСТЬNULL(ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит, """") = """"
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки = 1
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.РежимВвода = 1";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	МетаданныеСправочники 				= Метаданные.Справочники;
	МетаданныеПланыВидовХарактеристик 	= Метаданные.ПланыВидовХарактеристик;
	МетаданныеПеречисления 				= Метаданные.Перечисления;
	
	ЗаполняемыеРеквизиты = Запрос.Выполнить().Выгрузить();
	Для каждого реквизитПоиска Из ЗаполняемыеРеквизиты Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение КАК Значение,
		|	МАКСИМУМ(ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки) КАК ИдентификаторСтроки,
		|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма.ТипДанных КАК ТипДанных
		|ИЗ
		|	РегистрСведений.ДатаМобайл_ЗначенияДополнительныхФорм КАК ДатаМобайл_ЗначенияДополнительныхФорм
		|ГДЕ
		|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма = &ДополнительнаяФорма
		|	И ДатаМобайл_ЗначенияДополнительныхФорм.Документ = &СсылкаНаДокТСД
		|	И ДатаМобайл_ЗначенияДополнительныхФорм.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)		
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение,
		|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма.ТипДанных
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки УБЫВ";
		
		Запрос.УстановитьПараметр("СсылкаНаДокТСД", СсылкаНаДокТСД);
		Запрос.УстановитьПараметр("ДополнительнаяФорма", реквизитПоиска.ДополнительнаяФорма); 
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗначениеПодстановки = Выборка.Значение;
			Если Не (Выборка.ТипДанных = "Текст" Или Выборка.ТипДанных = "Число" Или Выборка.ТипДанных = "Дата" Или Выборка.ТипДанных = "Булево") Тогда
				Попытка
					Если Не МетаданныеСправочники.Найти(Выборка.ТипДанных) = Неопределено Тогда
						ЗначениеПодстановки = Справочники[Выборка.ТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Значение));
					ИначеЕсли Не МетаданныеПланыВидовХарактеристик.Найти(Выборка.ТипДанных) = Неопределено Тогда
						ЗначениеПодстановки = ПланыВидовХарактеристик[Выборка.ТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Значение));	
					ИначеЕсли Не МетаданныеПеречисления.Найти(Выборка.ТипДанных) = Неопределено Тогда
						ЗначениеПодстановки = Перечисления[Выборка.ТипДанных][СокрЛП(Выборка.Значение)];
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если Выборка.ТипДанных = "Дата" Тогда
				ФорматированнаяДата = ДатаМобайл_ОбщийМодуль.ПолучитьДатуИзСтрокиПоФормату(Выборка.Значение, Шаблон);
				Если Не ФорматированнаяДата = Неопределено Тогда
					ЗначениеПодстановки = ФорматированнаяДата;
				Иначе
					Если Не ТипЗнч(реквизитПоиска.ЗаполняемыйРеквизит) = Тип("Строка") Тогда
						Продолжить;
					КонецЕсли;						  
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				Док[реквизитПоиска.ЗаполняемыйРеквизит] = ЗначениеПодстановки;
			Исключение
			КонецПопытки;			
		КонецЕсли;		
	КонецЦикла;	
		
КонецПроцедуры
Процедура ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(Док, ИмяТЧПодбор, ИмяТЧПриемка, Шаблон, СсылкаНаДокТСД, ПараметрыДокумента = Неопределено)
	
	
	МетаданныеСправочники 				= Метаданные.Справочники;
	МетаданныеПланыВидовХарактеристик 	= Метаданные.ПланыВидовХарактеристик;
	МетаданныеПеречисления 				= Метаданные.Перечисления;
	
	ВидДокумента = Док.Метаданные().Имя;
	
	Если ИмяТЧПриемка = "" Тогда
		ИмяТЧ = ИмяТЧПодбор;
		ТекушийПодборРазмещение = 0;
	Иначе	
		ИмяТЧ = ИмяТЧПриемка;
		ТекушийПодборРазмещение = 1;
	КонецЕсли;	
	
	РеквизитыТЧ = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТЧ].Реквизиты;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма КАК ДополнительнаяФорма,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ПодборРазмещение КАК ПодборРазмещение
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
	|ГДЕ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон = &Шаблон
	|	И НЕ ЕСТЬNULL(ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит, """") = """"
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки = 0
	|	И НЕ ДатаМобайл_СвязиДополнительныхФормИШаблонов.ИспользоватьВПоискеСтрок";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	ЗаполняемыеКолонки = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из Док[ИмяТЧ] Цикл
		
		Для каждого Колонка Из ЗаполняемыеКолонки Цикл
			
			Если Не Колонка.ПодборРазмещение = ТекушийПодборРазмещение Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ЕстьСерии = РеквизитыТЧ.Найти("Серия") <> Неопределено;
			Исключение
				ЕстьСерии = Ложь;
			КонецПопытки;
						
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение КАК Значение,
			|	ДатаМобайл_ЗначенияДополнительныхФорм.Номенклатура КАК Номенклатура,
			|	МАКСИМУМ(ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки) КАК ИдентификаторСтроки,
			|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма.ТипДанных КАК ТипДанных
			|ИЗ
			|	РегистрСведений.ДатаМобайл_ЗначенияДополнительныхФорм КАК ДатаМобайл_ЗначенияДополнительныхФорм
			|ГДЕ
			|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма = &ДополнительнаяФорма
			|	И ДатаМобайл_ЗначенияДополнительныхФорм.Документ = &СсылкаНаДокТСД
			|	И ДатаМобайл_ЗначенияДополнительныхФорм.Номенклатура = &Номенклатура
			|	И ДатаМобайл_ЗначенияДополнительныхФорм.Характеристика = &Характеристика
			|	И ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки = &ИдентификаторСтроки
			|
			|СГРУППИРОВАТЬ ПО
			|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение,
			|	ДатаМобайл_ЗначенияДополнительныхФорм.Номенклатура,
			|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма.ТипДанных
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИдентификаторСтроки УБЫВ";
			
			Запрос.УстановитьПараметр("СсылкаНаДокТСД", СсылкаНаДокТСД);
			Запрос.УстановитьПараметр("ДополнительнаяФорма", Колонка.ДополнительнаяФорма); 
			Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
			Запрос.УстановитьПараметр("Характеристика", Строка.Характеристика);
			
			//Попробуем найти идентификатор строки для серии
			Если ЕстьСерии Тогда
				Если ЗначениеЗаполнено(Строка.Серия) Тогда
					ТекущийИдентификаторСтроки = НайтиИдентификаторСтрокиДляДополнительныхФорм(СсылкаНаДокТСД, Строка.Номенклатура, Строка.Характеристика, Строка.Серия, ТекушийПодборРазмещение);
					Если ТекущийИдентификаторСтроки = "" Тогда
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки = &ИдентификаторСтроки", "");
					Иначе
						Запрос.УстановитьПараметр("ИдентификаторСтроки", ТекущийИдентификаторСтроки);
					КонецЕсли;
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки = &ИдентификаторСтроки", "");
				КонецЕсли;
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки = &ИдентификаторСтроки", "");	
			КонецЕсли;	
						
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗначениеПодстановки = Выборка.Значение;
				Если Не (Выборка.ТипДанных = "Текст" Или Выборка.ТипДанных = "Число" Или Выборка.ТипДанных = "Дата" Или Выборка.ТипДанных = "Булево") Тогда
					Попытка
						Если Не МетаданныеСправочники.Найти(Выборка.ТипДанных) = Неопределено Тогда
							ЗначениеПодстановки = Справочники[Выборка.ТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Значение));
						ИначеЕсли Не МетаданныеПланыВидовХарактеристик.Найти(Выборка.ТипДанных) = Неопределено Тогда
							ЗначениеПодстановки = ПланыВидовХарактеристик[Выборка.ТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Значение));	
						ИначеЕсли Не МетаданныеПеречисления.Найти(Выборка.ТипДанных) = Неопределено Тогда
							ЗначениеПодстановки = Перечисления[Выборка.ТипДанных][СокрЛП(Выборка.Значение)];
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				Если Выборка.ТипДанных = "Дата" Тогда
					ФорматированнаяДата = ДатаМобайл_ОбщийМодуль.ПолучитьДатуИзСтрокиПоФормату(Выборка.Значение, Шаблон);
					Если Не ФорматированнаяДата = Неопределено Тогда
						ЗначениеПодстановки = ФорматированнаяДата;
					Иначе
						Если Не ТипЗнч(Строка[Колонка.ЗаполняемыйРеквизит]) = Тип("Строка") Тогда
							Продолжить;
						КонецЕсли;						  
					КонецЕсли;
				КонецЕсли;
				
				Попытка
					Строка[Колонка.ЗаполняемыйРеквизит] = ЗначениеПодстановки;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		ОбработатьСтрокуТЧ(Док, ИмяТЧ, Строка, Шаблон, ПараметрыДокумента);
	КонецЦикла;
		
КонецПроцедуры
Функция НайтиИдентификаторСтрокиДляДополнительныхФорм(СсылкаНаДокТСД, Номенклатура, Характеристика, Серия, ТекушийПодборРазмещение)
	
	ТекущийИдентификаторСтроки = "";
	
	//ТекушийПодборРазмещение  (0 - Подбор, 1 - Размещение)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ИдентификаторСтроки,
	|	Сумма(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество) КАК Количество
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура = &Номенклатура
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры = &Характеристика
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерияСсылка = &Серия
	|	И &ЭтоПодбор
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ИдентификаторСтроки				   
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеРазмещение.ИдентификаторСтроки,
	|	Сумма(ДатаМобайл_ДокументыТСДСобранныеДанныеРазмещение.Количество)
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК ДатаМобайл_ДокументыТСДСобранныеДанныеРазмещение
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеРазмещение.Номенклатура = &Номенклатура
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеРазмещение.ХарактеристикаНоменклатуры = &Характеристика
	|	И ДатаМобайл_ДокументыТСДСобранныеДанныеРазмещение.СерияСсылка = &Серия
	|	И &ЭтоРазмещение
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеРазмещение.ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Серия", Серия);
	Если ТекушийПодборРазмещение = 0 Тогда
		Запрос.УстановитьПараметр("ЭтоПодбор", Истина);
		Запрос.УстановитьПараметр("ЭтоРазмещение", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ЭтоПодбор", Ложь);
		Запрос.УстановитьПараметр("ЭтоРазмещение", Истина);		
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();			   
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтроки;
	КонецЦикла;
	
	Возврат ТекущийИдентификаторСтроки;
	
КонецФункции	
Функция ЕстьДополнительныеФормыДляПоискаСтрок(Шаблон, ПодборРазмещение, ТаблицаДопФорм)
	
	//Определить что есть доп формы к строкам и их использование в поиске
	//Вернуть список этих доп форм
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма КАК ДополнительнаяФорма
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
	|ГДЕ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон = &Шаблон
	|	И НЕ ЕСТЬNULL(ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит, """") = """"
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки = 0
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.ПодборРазмещение = &ПодборРазмещение
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.ИспользоватьВПоискеСтрок";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	Запрос.УстановитьПараметр("ПодборРазмещение", ПодборРазмещение);
	
	ТаблицаДопФорм = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДопФорм.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
		
КонецФункции
Функция ПолучитьТабТСДСУчетомДополнительныхФорм(СсылкаНаДок, ПодборРазмещение, ТаблицаДопФорм)
	
	//Свернуть данные до идентификаторов, добавить к данным значения доп форм по идентификаторам
	
	МетаданныеСправочники 				= Метаданные.Справочники;
	МетаданныеПланыВидовХарактеристик 	= Метаданные.ПланыВидовХарактеристик;
	МетаданныеПеречисления 				= Метаданные.Перечисления;
	
	ТабТСД = Неопределено;
	
	Если ПодборРазмещение = 0 Тогда
		ТабТСД = СсылкаНаДок.СобранныеДанныеПодбор.Выгрузить();
	Иначе	
		ТабТСД = СсылкаНаДок.СобранныеДанныеПриемка.Выгрузить();
	КонецЕсли;	
	
	ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист,УпаковочныйЛистАтрибуты,ИдентификаторСтроки,ПризнакПовторнойВыгрузки","Количество");
	
	Для каждого СтрокаДопФорм Из ТаблицаДопФорм Цикл		
		лИмяКолонки = СтрокаДопФорм.ЗаполняемыйРеквизит;
		
		Если СтрокаДопФорм.ДополнительнаяФорма.ТипДанных = "Текст" Тогда			
			лТипКолонки = Новый ОписаниеТипов("Строка");	
		ИначеЕсли СтрокаДопФорм.ДополнительнаяФорма.ТипДанных = "Число" Тогда			
			лТипКолонки = Новый ОписаниеТипов("Число");			
		ИначеЕсли СтрокаДопФорм.ДополнительнаяФорма.ТипДанных = "Дата" Тогда			
			лТипКолонки = Новый ОписаниеТипов("Дата");
		ИначеЕсли СтрокаДопФорм.ДополнительнаяФорма.ТипДанных = "Булево" Тогда			
			лТипКолонки = Новый ОписаниеТипов("Булево");
		Иначе	
			Попытка
				Если Не МетаданныеСправочники.Найти(СтрокаДопФорм.ДополнительнаяФорма.ТипДанных) = Неопределено Тогда
					лТипКолонки = Новый ОписаниеТипов("СправочникСсылка." + СтрокаДопФорм.ДополнительнаяФорма.ТипДанных);	
				ИначеЕсли Не МетаданныеПланыВидовХарактеристик.Найти(СтрокаДопФорм.ДополнительнаяФорма.ТипДанных) = Неопределено Тогда
					лТипКолонки = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + СтрокаДопФорм.ДополнительнаяФорма.ТипДанных);	
				ИначеЕсли Не МетаданныеПеречисления.Найти(СтрокаДопФорм.ДополнительнаяФорма.ТипДанных) = Неопределено Тогда
					лТипКолонки = Новый ОписаниеТипов("ПеречислениеСсылка." + СтрокаДопФорм.ДополнительнаяФорма.ТипДанных);
				Иначе
					лТипКолонки = Новый ОписаниеТипов("Строка");	
				КонецЕсли;
			Исключение
				лТипКолонки = Новый ОписаниеТипов("Строка");	
			КонецПопытки;
		КонецЕсли;					
		ТабТСД.Колонки.Добавить(лИмяКолонки,лТипКолонки);
	КонецЦикла;		
	
	Для каждого СтрокаТабТСД Из ТабТСД Цикл				
		ЗаполнитьСтрокуТабТСДЗначениямиДополнительныхФорм(СсылкаНаДок, СтрокаТабТСД, ПодборРазмещение);		
	КонецЦикла;
	
	Возврат ТабТСД;
	
КонецФункции	
Процедура ЗаполнитьСтрокуТабТСДЗначениямиДополнительныхФорм(СсылкаНаДокТСД, СтрокаТабТСД, ПодборРазмещение)

	МетаданныеСправочники 				= Метаданные.Справочники;
	МетаданныеПланыВидовХарактеристик 	= Метаданные.ПланыВидовХарактеристик;
	МетаданныеПеречисления 				= Метаданные.Перечисления;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ	
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение КАК Значение,
	|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма.ТипДанных КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ЗначенияДополнительныхФорм КАК ДатаМобайл_ЗначенияДополнительныхФорм
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
	|	ПО ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма = ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма
	|ГДЕ
	|	ДатаМобайл_ЗначенияДополнительныхФорм.Документ = &СсылкаНаДокТСД
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки = 0
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.ИспользоватьВПоискеСтрок
	|	И НЕ ЕСТЬNULL(ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит, """") = """"
	|	И ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки = &ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("СсылкаНаДокТСД", СсылкаНаДокТСД);
	Запрос.УстановитьПараметр("ИдентификаторСтроки", СтрокаТабТСД.ИдентификаторСтроки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначениеПодстановки = Выборка.Значение;
		Если Не (Выборка.ТипДанных = "Текст" Или Выборка.ТипДанных = "Число" Или Выборка.ТипДанных = "Дата" Или Выборка.ТипДанных = "Булево") Тогда
			Попытка
				Если Не МетаданныеСправочники.Найти(Выборка.ТипДанных) = Неопределено Тогда
					ЗначениеПодстановки = Справочники[Выборка.ТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Значение));
				ИначеЕсли Не МетаданныеПланыВидовХарактеристик.Найти(Выборка.ТипДанных) = Неопределено Тогда
					ЗначениеПодстановки = ПланыВидовХарактеристик[Выборка.ТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Значение));	
				ИначеЕсли Не МетаданныеПеречисления.Найти(Выборка.ТипДанных) = Неопределено Тогда
					ЗначениеПодстановки = Перечисления[Выборка.ТипДанных][СокрЛП(Выборка.Значение)];
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если Выборка.ТипДанных = "Дата" Тогда
			ФорматированнаяДата = ДатаМобайл_ОбщийМодуль.ПолучитьДатуИзСтрокиПоФормату(Выборка.Значение, СсылкаНаДокТСД.Шаблон);
			Если Не ФорматированнаяДата = Неопределено Тогда
				ЗначениеПодстановки = ФорматированнаяДата;
			Иначе
				Если Не ТипЗнч(СтрокаТабТСД[Выборка.ЗаполняемыйРеквизит]) = Тип("Строка") Тогда
				КонецЕсли;						  
			КонецЕсли;
		КонецЕсли;		
		
		Попытка
			СтрокаТабТСД[Выборка.ЗаполняемыйРеквизит] = ЗначениеПодстановки;
		Исключение
		КонецПопытки;		
	КонецЦикла;	
	
КонецПроцедуры
Процедура ОбработатьСтруктуруПоискаСУчетомДополнительныхФорм(СтруктураПоиска, ТаблицаДопФорм, СтрТЧ, ПараметрыШаблона, МетаданныеДока)
	
	ИспользуетсяНовыйДокумент = Ложь;
	Если СокрЛП(ПараметрыШаблона.ВидДокументаНового) <> "" Тогда
		ИспользуетсяНовыйДокумент = Истина;
	КонецЕсли;	
	
	//Выполнить поиск строк с учетом доп форм
	
	Для каждого СтрокаДопФорм Из ТаблицаДопФорм Цикл 
		Если ИспользуетсяНовыйДокумент И МетаданныеДока.ТабличныеЧасти[ПараметрыШаблона.ИмяТабличнойЧастиНовойПодбор].Реквизиты.Найти(СтрокаДопФорм.ЗаполняемыйРеквизит) = Неопределено Тогда
			Продолжить;		
		Иначе
			СтруктураПоиска.Вставить(СтрокаДопФорм.ЗаполняемыйРеквизит,СтрТЧ[СтрокаДопФорм.ЗаполняемыйРеквизит]);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры
Процедура ОбработатьСтрокуСУчетомДополнительныхФорм(СтрокаТабличнойЧасти, ТаблицаДопФорм, СтрТЧ, ПараметрыШаблона, МетаданныеДока)

	ИспользуетсяНовыйДокумент = Ложь;
	Если СокрЛП(ПараметрыШаблона.ВидДокументаНового) <> "" Тогда
		ИспользуетсяНовыйДокумент = Истина;
	КонецЕсли;
	
	//Выполнить загрузку данных с учетом доп форм
	
	Для каждого СтрокаДопФорм Из ТаблицаДопФорм Цикл
		Если ИспользуетсяНовыйДокумент И МетаданныеДока.ТабличныеЧасти[ПараметрыШаблона.ИмяТабличнойЧастиНовойПодбор].Реквизиты.Найти(СтрокаДопФорм.ЗаполняемыйРеквизит) = Неопределено Тогда
			Продолжить;		
		Иначе
			СтрокаТабличнойЧасти[СтрокаДопФорм.ЗаполняемыйРеквизит] = СтрТЧ[СтрокаДопФорм.ЗаполняемыйРеквизит];
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры

//БЫСТРАЯ ПРИЕМКА И БЫСТРАЯ ОТГРУЗКА
Процедура БыстраяПриемкаПоОтборуРазмещению(Док, ПараметрыДокумента)
	
	Об = ПараметрыДокумента.Об;
	Шаблон = Об.Шаблон;
	
	ДокументПриходныйОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	ДокументПриходныйОрдер.Дата = ТекущаяДата();
	ДокументПриходныйОрдер.Склад = Док.Склад;
	ДокументПриходныйОрдер.Помещение = Док.Помещение;
	Попытка ДокументПриходныйОрдер.ЗакрыватьГрафикПоступления = Ложь Исключение КонецПопытки;
	Контрагент = Об.Клиент;	
	ДокументПриходныйОрдер.Отправитель = Контрагент;
	ДокументПриходныйОрдер.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	
	Если Док.ЗонаПриемки.Пустая() Тогда
		ДокументПриходныйОрдер.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(ДокументПриходныйОрдер.Склад, ДокументПриходныйОрдер.Помещение, ДокументПриходныйОрдер.ЗонаПриемки);
		Док.ЗонаПриемки = ДокументПриходныйОрдер.ЗонаПриемки;
	Иначе
		ДокументПриходныйОрдер.ЗонаПриемки = Док.ЗонаПриемки;
	КонецЕсли;	
		
	Если Шаблон.ВидДокументаНового = "ПриходныйОрдерНаТовары" Тогда
		
		Попытка
			ДокументПриходныйОрдер.Распоряжение = ПолучитьДоговор(Контрагент);
		Исключение	
			Сообщить("Не удалось получить договор контрагента");
		КонецПопытки;
		
	Иначе
		
		Попытка
			СсылкаЗаказПоставщику = НайтиЗаказПоставщику(Об.СобранныеДанныеПриемка[0].Номенклатура, Контрагент, ДокументПриходныйОрдер.Склад);
		Исключение
			СсылкаЗаказПоставщику = Неопределено
		КонецПопытки;	
		
		Если СсылкаЗаказПоставщику <> Неопределено Тогда		
			ДокументПриходныйОрдер.Распоряжение = СсылкаЗаказПоставщику;		
		Иначе
						
			ДокументПриобретения = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
			ДокументПриобретения.Дата = ТекущаяДата();
			Попытка ДокументПриобретения.ДатаОтгрузки = ТекущаяДата(); Исключение КонецПопытки;
			ДокументПриобретения.Склад = Док.Склад;
			ДокументПриобретения.Партнер = Об.Клиент;	
			ДокументПриобретения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;	
			ДокументПриобретения.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный);	
			ДокументПриобретения.Валюта = Справочники.Валюты.НайтиПоКоду("643");
			ДокументПриобретения.Подразделение = Док.Склад.Подразделение;	
			Попытка ДокументПриобретения.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях; Исключение КонецПопытки;
			ДокументПриобретения.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
			
			Попытка
				ДокументПриобретения.Контрагент = ПолучитьКонтрагента(Об.Клиент);
			Исключение	
			КонецПопытки;
			
			Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитовНового Цикл
				Попытка ДокументПриобретения[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита; Исключение КонецПопытки;
			КонецЦикла;	
			
			ИзменитьРеквизитыШапкиИзДополнительныхФорм(ДокументПриобретения, Об.Шаблон, Об);
			
			ОбработатьТабличнуюЧастьБыстраяПриемкаПоОтборуРазмещению(ПараметрыДокумента, ДокументПриобретения);
			
			Для каждого Строка Из ДокументПриобретения.Товары Цикл
				
				Если Строка.Цена = 0 Тогда
					Строка.Цена = 1;
					Строка.Сумма = Строка.Цена * Строка.Количество;
				КонецЕсли;
				
			КонецЦикла;	
			
			ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(ДокументПриобретения, "Товары", "", Об.Шаблон, Об.Ссылка);
			
			Попытка
				ДокументПриобретения.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Исключение
				ДокументПриобретения.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный);
			КонецПопытки;
			
			ДокументПриходныйОрдер.Распоряжение = ДокументПриобретения.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Попытка ДокументПриходныйОрдер.ЗакрыватьГрафикПоступления = Истина Исключение КонецПопытки;
	
	Попытка
		Если ДокументПриходныйОрдер.ХозяйственнаяОперация.Пустая() Тогда
			ДокументПриходныйОрдер.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если ДокументПриходныйОрдер.СкладскаяОперация.Пустая() Тогда
			ДокументПриходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитовНового Цикл
		Попытка ДокументПриходныйОрдер[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита; Исключение КонецПопытки;
	КонецЦикла;	
	
	ИзменитьРеквизитыШапкиИзДополнительныхФорм(ДокументПриходныйОрдер, Об.Шаблон, Об);
	
	ОбработатьТабличнуюЧастьБыстраяПриемкаПоОтборуРазмещению(ПараметрыДокумента, ДокументПриходныйОрдер);	
	
	ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(ДокументПриходныйОрдер, "Товары", "", Об.Шаблон, Об.Ссылка);
	
	//УСТАНОВКА СТАТУСОВ УКАЗАНИЯ СЕРИЙ В ДОКУМЕНТЕ
	Если Шаблон.ИспользованиеСерийниковПодбор <> 0 Или Шаблон.ИспользованиеСерийниковПриемка <> 0 Тогда
		Попытка УстановитьСерииВдокументе(ДокументПриходныйОрдер); Исключение КонецПопытки; 
	КонецЕсли;
	
	Попытка
		ДокументПриходныйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		ДокументПриходныйОрдер.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный);
	КонецПопытки;
	
	Док.Распоряжение = ДокументПриходныйОрдер.Ссылка;
	Док.Дата = ТекущаяДата();
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение		
		Док.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки
	
КонецПроцедуры
Функция ОбработатьТабличнуюЧастьБыстраяПриемкаПоОтборуРазмещению(ПараметрыДокумента, Док)
	
	Об = ПараметрыДокумента.Об;	
	Шаблон = Об.Шаблон;
	
	МетаданныеДока = Док.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
    ТабличныеЧастиДока = МетаданныеДока.ТабличныеЧасти;
	
	ИсходныеДанныеПодбор = Неопределено;
	Если ИмяДока = "ПриобретениеТоваровУслуг" Тогда
		ПараметрыДокумента.Вставить("ИмяТЧПодбор", "Товары");
		ПараметрыДокумента.Вставить("ИмяТЧПриемка", "Товары");
	ИначеЕсли ИмяДока = "ПриходныйОрдерНаТовары" Тогда
		ПараметрыДокумента.Вставить("ИмяТЧПодбор", "Товары");
		ПараметрыДокумента.Вставить("ИмяТЧПриемка", "Товары");
	Иначе
		ПараметрыДокумента.Вставить("ИмяТЧПодбор", Шаблон.ИмяТабличнойЧастиПодбор);
		ПараметрыДокумента.Вставить("ИмяТЧПриемка", Шаблон.ИмяТабличнойЧастиПриемка);			
	КонецЕсли;	
	
	лЕстьЯчейка = (Шаблон.ИспользованиеЯчеекПриемка > 0 И (ТабличныеЧастиДока.Товары.Реквизиты.Найти("Ячейка") <> Неопределено));
	лЕстьСерия = (Шаблон.ИспользованиеСерийниковПриемка > 0 И (ТабличныеЧастиДока.Товары.Реквизиты.Найти("Серия") <> Неопределено)); 
	лЕстьУпаковка = (ТабличныеЧастиДока.Товары.Реквизиты.Найти("Упаковка") <> Неопределено);
	лЕстьУпаковочныйЛистРодитель = (Шаблон.ИспользоватьТиповыеУпаковочныеЛисты И (ТабличныеЧастиДока.Товары.Реквизиты.Найти("УпаковочныйЛистРодитель") <> Неопределено));
	
	Если Шаблон.ИспользоватьПриемку Тогда
		Для каждого СтрТЧ Из Об.СобранныеДанныеПриемка Цикл
			УстановитьАвтора(Док, СтрТЧ.Пользователь, Истина, Шаблон);
			Прервать;
		КонецЦИкла;	
			
		ЭтоОтборРазмещениеТоваров = Ложь; 
		ТабТСД = Об.СобранныеДанныеПриемка.Выгрузить();
		ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист","Количество");
		
		Если Шаблон.ТабличнуюЧастьПриЗагрузкеПриемка <> 0 Тогда									
			Для каждого СтрТЧ Из ТабТСД Цикл
				Если СтрТЧ.Номенклатура.Пустая() Тогда
					СтрокаОшибок = "Не выбрана номенклатура!!!";
					Возврат Неопределено;
				КонецЕсли;
				
				Если СтрТЧ.Количество = 0 И Не ИмяДока = "ПересчетТоваров" Тогда
					Продолжить;
				КонецЕсли;	
								
				лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
								
				Если лЕстьЯчейка Тогда
					лСтруктураПоиска.Вставить("Ячейка", СтрТЧ.ЯчейкаСсылка);
				КонецЕсли;
				Если лЕстьСерия Тогда
					лСтруктураПоиска.Вставить("Серия", СтрТЧ.СерияСсылка);
				КонецЕсли;
				Если лЕстьУпаковка И Не Шаблон.БазовыеЕдиницыПриЗагрузке Тогда
					Если ИмяДока = "ПересчетТоваров" Тогда
						Если Док.Склад.ИспользоватьАдресноеХранение Тогда
							лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.ЕдиницаИзмерения);
						КонецЕсли;	
					Иначе
						лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.ЕдиницаИзмерения);
					КонецЕсли;	
				КонецЕсли;	
				
				Если лЕстьУпаковочныйЛистРодитель Тогда
					НомерУпакЛиста = СтрЗаменить(СтрТЧ.УпаковочныйЛист, "/////", "");
					Если ЗначениеЗаполнено(НомерУпакЛиста) Тогда
						Если Лев(НомерУпакЛиста, 3) = "UPL" Тогда 	
							НомерУпакЛиста = Прав(НомерУпакЛиста, СтрДлина(НомерУпакЛиста) - 3);
							ДокументУпакЛиста = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоНомеру(НомерУпакЛиста);
						Иначе
							ДокументУпакЛиста = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоРеквизиту("Код", НомерУпакЛиста);
						КонецЕсли;
						ДокументТиповогоУпакЛиста = ДокументУпакЛиста.ТиповойУпаковочныйЛист;
					Иначе
						ДокументТиповогоУпакЛиста = Документы.УпаковочныйЛист.ПустаяСсылка();
					КонецЕсли;
					
					лСтруктураПоиска.Вставить("УпаковочныйЛистРодитель", ДокументТиповогоУпакЛиста);
				КонецЕсли;
				
				СтрокиПоиска = Док.Товары.НайтиСтроки(лСтруктураПоиска);
				Если СтрокиПоиска.Количество() = 0 Тогда
					СтрокаТабличнойЧасти = Док.Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
					
					Если лЕстьЯчейка Тогда
						СтрокаТабличнойЧасти.Ячейка = СтрТЧ.ЯчейкаСсылка;
					КонецЕсли;
					Если лЕстьСерия Тогда
						СтрокаТабличнойЧасти.Серия = СтрТЧ.СерияСсылка;
					КонецЕсли;
					Если лЕстьУпаковка И Не Шаблон.БазовыеЕдиницыПриЗагрузке Тогда
						Если ИмяДока = "ПересчетТоваров" Тогда
							Если Док.Склад.ИспользоватьАдресноеХранение Или Док.Помещение.ИспользоватьАдресноеХранение Тогда
								СтрокаТабличнойЧасти.Упаковка = СтрТЧ.ЕдиницаИзмерения;
							КонецЕсли;	
						Иначе
							СтрокаТабличнойЧасти.Упаковка = СтрТЧ.ЕдиницаИзмерения;
						КонецЕсли;
					КонецЕсли;
					Если ИмяДока = "ДатаМобайл_УпаковочныйЛист" Тогда
						СтрокаТабличнойЧасти.Штрихкод = СтрТЧ.ШтрихКод;	
					КонецЕсли;
					
					Если лЕстьУпаковочныйЛистРодитель И ЗначениеЗаполнено(ДокументТиповогоУпакЛиста) Тогда
						СтрокаТабличнойЧасти.УпаковочныйЛистРодитель = ДокументТиповогоУпакЛиста;
						
						лСтруктураПоискаУпакЛистов = Новый Структура("УпаковочныйЛист",ДокументТиповогоУпакЛиста);
						СтрокиПоискаУпаковочныхЛистов = Док.Товары.НайтиСтроки(лСтруктураПоискаУпакЛистов);
						Если СтрокиПоискаУпаковочныхЛистов.Количество() = 0 И ЗначениеЗаполнено(ДокументТиповогоУпакЛиста) Тогда
							СтрокаТабличнойЧастиУпакЛиста = Док.Товары.Добавить();
							СтрокаТабличнойЧастиУпакЛиста.УпаковочныйЛист = ДокументТиповогоУпакЛиста;
							СтрокаТабличнойЧастиУпакЛиста.ЭтоУпаковочныйЛист = Истина;
							СтрокаТабличнойЧастиУпакЛиста.Количество = 1;
							СтрокаТабличнойЧастиУпакЛиста.КоличествоУпаковок = 1;
							ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента, Док, ПараметрыДокумента.ИмяТЧПриемка, СтрокаТабличнойЧастиУпакЛиста);
							
							ОбработатьСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПриемка, СтрокаТабличнойЧастиУпакЛиста, Шаблон);
						КонецЕсли;	
					КонецЕсли;
					
					ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента, Док, ПараметрыДокумента.ИмяТЧПриемка, СтрокаТабличнойЧасти);					
				Иначе	
					СтрокаТабличнойЧасти = СтрокиПоиска[0];
				КонецЕсли;
				
				Попытка 
					КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель / СтрТЧ.ЕдиницаИзмерения.Знаменатель;
					КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
				Исключение
					КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
				Конецпопытки;
				
				Если ИмяДока = "ПересчетТоваров" Тогда
					Если Док.Склад.ИспользоватьАдресноеХранение Или Док.Помещение.ИспользоватьАдресноеХранение И Не Шаблон.БазовыеЕдиницыПриЗагрузке Тогда
						СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт + СтрТЧ.Количество;
						СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт * КоэффициентУпаковки;
					Иначе
						СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт + СтрТЧ.Количество * КоэффициентУпаковки;
						СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт;
					КонецЕсли;
				ИначеЕсли ЭтоОтборРазмещениеТоваров И Шаблон.ПроверкаОтборРазмещение Тогда
					Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками Тогда								
						СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано + СтрТЧ.Количество;
						СтрокаТабличнойЧасти.КоличествоОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано * КоэффициентУпаковки;
					Иначе
						СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
						СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано = СтрокаТабличнойЧасти.КоличествоУпаковок;
						СтрокаТабличнойЧасти.КоличествоОтобрано = СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				Иначе
					Если Не Шаблон.БазовыеЕдиницыПриЗагрузке Тогда
						Попытка
							СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;  
							СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
						Исключение
							СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество;
						КонецПопытки;
					Иначе
						Попытка
							СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество * КоэффициентУпаковки;  
							СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
						Исключение
							СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТабличнойЧасти <> Неопределено Тогда
					ОбработатьСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПриемка, СтрокаТабличнойЧасти, Шаблон);
					
					//Серии в отдельной ТЧ
					Если ТабличныеЧастиДока.Найти("Серии") <> Неопределено И Не СтрТЧ.СерияСсылка.Пустая() И Шаблон.СерииВОтдельнойТЧ Тогда
						лСтруктураПоискаСерий = Новый Структура("Номенклатура,Характеристика,Серия", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрТЧ.СерияСсылка);
						СтрокиПоискаСерий = Док["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
						Если СтрокиПоискаСерий.Количество() = 0 Тогда
							СтрокаТабличнойЧастиСерии = Док["Серии"].Добавить();
							СтрокаТабличнойЧастиСерии.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
							СтрокаТабличнойЧастиСерии.Характеристика = СтрокаТабличнойЧасти.Характеристика;
							СтрокаТабличнойЧастиСерии.Серия = СтрТЧ.СерияСсылка;
							Попытка СтрокаТабличнойЧастиСерии.Склад = СтрокаТабличнойЧасти.Склад; Исключение КонецПопытки;
							Попытка СтрокаТабличнойЧастиСерии.Назначение = СтрокаТабличнойЧасти.Назначение; Исключение КонецПопытки;
						Иначе	
							СтрокаТабличнойЧастиСерии = СтрокиПоискаСерий[0];
						КонецЕсли;
						
						СтрокаТабличнойЧастиСерии.Количество = СтрокаТабличнойЧастиСерии.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
					КонецЕсли;	
					//Серии в отдельной ТЧ					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции
Процедура БыстраяОтгрузкаПоОтборуРазмещению(Док, ПараметрыДокумента)	
	
	Об = ПараметрыДокумента.Об;
	Шаблон = Об.Шаблон;			
	
	Если Шаблон.ВидДокументаНового = "ЗаказНаВнутреннееПотребление" Тогда
		
		ДокументЗаказКлиента = Документы.ЗаказНаВнутреннееПотребление.СоздатьДокумент();
		ДокументЗаказКлиента.Дата = ТекущаяДата();
		ДокументЗаказКлиента.Склад = Док.Склад;
		ДокументЗаказКлиента.Статус = Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению;
		ДокументЗаказКлиента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;	
		ДокументЗаказКлиента.Записать(РежимЗаписиДокумента.Запись);
		ДокументЗаказКлиента.Подразделение = Док.Склад.Подразделение;
		
		Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитовНового Цикл
			ДокументЗаказКлиента[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита;
		КонецЦикла;	
		
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ДокументЗаказКлиента, Об.Шаблон, Об);
		
		ПараметрыДокумента.Вставить("ИмяТЧПодбор", "Товары");
		ОбработатьТабличнуюЧастьБыстраяОтгрузкаПоОтборуРазмещению(ПараметрыДокумента, ДокументЗаказКлиента);
		
		Для каждого Строка Из ДокументЗаказКлиента.Товары Цикл
			
			Если Строка.ДатаОтгрузки = Дата(1,1,1) Тогда
				Строка.ДатаОтгрузки = ТекущаяДата();
			КонецЕсли;	
			
			Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			Строка.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ТоварыНаОптовыхСкладах;
			Строка.АналитикаРасходов = Неопределено;
			
		КонецЦикла;	
		
		ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(ДокументЗаказКлиента, "Товары", "", Об.Шаблон, Об.Ссылка);
		
		Попытка
			ДокументЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументЗаказКлиента.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;	
		
		///////////////////////////////////
		СсылкаЗаказа = ДокументЗаказКлиента.Ссылка;
		
		ПроведенаРеализация = Ложь;
		
		Попытка
			ДокументРеализации = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
		Исключение
			ДокументРеализации = Документы.ВнутреннееПотребление.СоздатьДокумент();
		КонецПопытки;	
		ДокументРеализации.Дата = ТекущаяДата();
		ДокументРеализации.Заполнить(СсылкаЗаказа); 	
		ДокументРеализации.Организация = СсылкаЗаказа.Организация;
		ДокументРеализации.Склад = СсылкаЗаказа.Склад;
		ДокументРеализации.ПотреблениеПоЗаказам = Истина;
		ДокументРеализации.ЗаказНаВнутреннееПотребление = СсылкаЗаказа;
		ДокументРеализации.Подразделение = СсылкаЗаказа.Подразделение;
		
		ДокументРеализации.Товары.Очистить();
		
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ДокументРеализации, Об.Шаблон, Об);
		
		ПараметрыДокумента.Вставить("ИмяТЧПодбор", "Товары");
		ОбработатьТабличнуюЧастьБыстраяОтгрузкаПоОтборуРазмещению(ПараметрыДокумента, ДокументРеализации);
		
		Для каждого Товар Из ДокументРеализации.Товары Цикл
			
			Товар.ЗаказНаВнутреннееПотребление = СсылкаЗаказа;
			
			РезультатыПоиска = СсылкаЗаказа.Товары.НайтиСтроки(
			Новый Структура("Номенклатура, Характеристика, Серия", Товар.Номенклатура, Товар.Характеристика, Товар.Серия));
			
			Если РезультатыПоиска.Количество() > 0 Тогда	
				Товар.АналитикаРасходов = РезультатыПоиска[0].АналитикаРасходов;
				Товар.СтатьяРасходов = РезультатыПоиска[0].СтатьяРасходов;
				Товар.КодСтроки = РезультатыПоиска[0].КодСтроки;
			КонецЕсли;
			
		КонецЦикла;	
		
		ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(ДокументРеализации, "Товары", "", Об.Шаблон, Об.Ссылка);
		
		ДокументРеализации.Записать(РежимЗаписиДокумента.Запись);	
				
		ДокументЗаказКлиента =  СсылкаЗаказа.ПолучитьОбъект();
		ДокументЗаказКлиента.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
		Попытка
			ДокументЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументЗаказКлиента.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;		
		
		Попытка
			ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);
			ПроведенаРеализация = Истина;
		Исключение
			ДокументРеализации.Записать(РежимЗаписиДокумента.Запись);	
		КонецПопытки;
		
		///////////////////////////////////
		
		ДокументРасходныйОрдер = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		ДокументРасходныйОрдер.Дата = ТекущаяДата();
		ДокументРасходныйОрдер.ДатаОтгрузки = ТекущаяДата();
		ДокументРасходныйОрдер.Склад = Док.Склад;
		ДокументРасходныйОрдер.Помещение = Док.Помещение;
		Контрагент = Об.Клиент;	
		ДокументРасходныйОрдер.Получатель = СсылкаЗаказа.Подразделение;
		ДокументРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;		
		ДокументРасходныйОрдер.Приоритет = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
				
		Если Док.ЗонаОтгрузки.Пустая() Тогда
			ДокументРасходныйОрдер.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(ДокументРасходныйОрдер.Склад, ДокументРасходныйОрдер.Помещение, ДокументРасходныйОрдер.ЗонаОтгрузки);
			Док.ЗонаОтгрузки = ДокументРасходныйОрдер.ЗонаОтгрузки;
		Иначе
			ДокументРасходныйОрдер.ЗонаОтгрузки = Док.ЗонаОтгрузки;
		КонецЕсли;	
		
		ДокументРасходныйОрдер.Записать(РежимЗаписиДокумента.Запись);
				
		Попытка
			Если ДокументРасходныйОрдер.СкладскаяОперация.Пустая() Тогда
				ДокументРасходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ДокументРасходныйОрдер, Об.Шаблон, Об);
		
		ПараметрыДокумента.Вставить("ИмяТЧПодбор", "ОтгружаемыеТовары");
		ОбработатьТабличнуюЧастьБыстраяОтгрузкаПоОтборуРазмещению(ПараметрыДокумента, ДокументРасходныйОрдер);	
		Для каждого строка Из ДокументРасходныйОрдер.ТоварыПоРаспоряжениям Цикл
			строка.Распоряжение = СсылкаЗаказа;
		КонецЦикла;
		
		ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(ДокументРасходныйОрдер, "ОтгружаемыеТовары", "", Об.Шаблон, Об.Ссылка);
		
		//УСТАНОВКА СТАТУСОВ УКАЗАНИЯ СЕРИЙ В ДОКУМЕНТЕ
		Если Шаблон.ИспользованиеСерийниковПодбор <> 0 Или Шаблон.ИспользованиеСерийниковПриемка <> 0 Тогда
			Попытка УстановитьСерииВдокументе(ДокументРасходныйОрдер); Исключение КонецПопытки; 
		КонецЕсли;
		
		ПроведенВотборе = Ложь;
		Попытка
			ДокументРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			ПроведенВотборе = Истина;
		Исключение
			ДокументРасходныйОрдер.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный);
		КонецПопытки;
		
		Док.Распоряжение = ДокументРасходныйОрдер.Ссылка;
		
		Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение		
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение		
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Попытка
			ДокументРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
		КонецПопытки;
				
		Если ПроведенВотборе Тогда				
			Для каждого строка Из ДокументРасходныйОрдер.ОтгружаемыеТовары Цикл
				строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			КонецЦикла;		  
			
			ДокументРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;	
			Попытка
				ДокументРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Исключение
			КонецПопытки;
		КонецЕсли;		
		
	Иначе
		
		ДокументЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
		ДокументЗаказКлиента.Дата = ТекущаяДата();
		ДокументЗаказКлиента.ДатаОтгрузки = ТекущаяДата();
		ДокументЗаказКлиента.Склад = Док.Склад;
		ДокументЗаказКлиента.Партнер = Об.Клиент;	
		ДокументЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		ДокументЗаказКлиента.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
		ДокументЗаказКлиента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;		
		ДокументЗаказКлиента.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		ДокументЗаказКлиента.Валюта = Справочники.Валюты.НайтиПоКоду("643");
		Попытка ДокументЗаказКлиента.СкидкиРассчитаны = Истина; Исключение КонецПопытки;
		ДокументЗаказКлиента.Подразделение = Док.Склад.Подразделение;
		
		// для совместимости, в новых релизах нет такого реквизита
		Попытка ДокументЗаказКлиента.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях; Исключение КонецПопытки;
		Попытка
			ДокументЗаказКлиента.Контрагент = ПолучитьКонтрагента(Об.Клиент);
		Исключение	
		КонецПопытки;
		
		Попытка
			ДокументЗаказКлиента.Соглашение = ПолучитьСоглашение(Об.Клиент, ДокументЗаказКлиента);
			Если ЗначениеЗаполнено(ДокументЗаказКлиента.Соглашение) Тогда
				ДокументЗаказКлиента.ЗаполнитьУсловияПродажПоСоглашению();
			КонецЕсли;	
		Исключение	
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ДокументЗаказКлиента.ХозяйственнаяОперация) Тогда
			ДокументЗаказКлиента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		КонецЕсли;	
		
		Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитовНового Цикл
			ДокументЗаказКлиента[НовЗнач.ИмяРеквизита]=НовЗнач.ЗначениеРеквизита;
		КонецЦикла;	
		
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ДокументЗаказКлиента, Об.Шаблон, Об);
		
		ДокументЗаказКлиента.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный);
		
		ПараметрыДокумента.Вставить("ИмяТЧПодбор", "Товары");
		ОбработатьТабличнуюЧастьБыстраяОтгрузкаПоОтборуРазмещению(ПараметрыДокумента, ДокументЗаказКлиента);
		
		Для каждого Строка Из ДокументЗаказКлиента.Товары Цикл
			
			Если Строка.Цена = 0 Тогда
				Строка.Цена = 1;
				Строка.Сумма = Строка.Цена * Строка.Количество;
			КонецЕсли;
			
			Если Строка.ДатаОтгрузки = Дата(1,1,1) Тогда
				Строка.ДатаОтгрузки = ТекущаяДата();
			КонецЕсли;	
				
			Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			Строка.Склад = ДокументЗаказКлиента.Склад;
		КонецЦикла;	
		
		ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(ДокументЗаказКлиента, "Товары", "", Об.Шаблон, Об.Ссылка);
		
		Попытка
			ДокументЗаказКлиента.ЗаполнитьЭтапыГрафикаОплаты();  // старый вариант
		Исключение
			ДМ_ВзаиморасчетыСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ВзаиморасчетыСервер");
			ДМ_ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокументЗаказКлиента);  // новый вариант
		КонецПопытки;
		
		Попытка
			ДокументЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			ДокументЗаказКлиента.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный);
		КонецПопытки;
				
		///////////////////////////////////
		СсылкаЗаказа = ДокументЗаказКлиента.Ссылка;
		ПроведенаРеализация = Ложь;
		ДокументРеализации = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ДокументРеализации.Дата = ТекущаяДата();
		ДокументРеализации.Заполнить(СсылкаЗаказа); 		
		ДокументРеализации.СкидкиРассчитаны = Истина;
		ДокументРеализации.РеализацияПоЗаказам = Истина;
		
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ДокументРеализации, Об.Шаблон, Об);
		
		ДокументРеализации.Товары.Очистить();
		ПараметрыДокумента.Вставить("ИмяТЧПодбор", "Товары");
		ОбработатьТабличнуюЧастьБыстраяОтгрузкаПоОтборуРазмещению(ПараметрыДокумента, ДокументРеализации);
		
		Для каждого Строка Из ДокументРеализации.Товары Цикл
			
			Если Строка.Цена = 0 Тогда
				Строка.Цена = 1;
				Строка.Сумма = Строка.Цена * Строка.Количество;
			КонецЕсли;
			
			Строка.Склад = ДокументРеализации.Склад;
		КонецЦикла;	
		
		ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(ДокументРеализации, "Товары", "", Об.Шаблон, Об.Ссылка);
		
		Попытка
			ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);
			ПроведенаРеализация = Истина;
		Исключение
			ДокументРеализации.Записать(РежимЗаписиДокумента.Запись);	
		КонецПопытки;		
		
		ДокументЗаказКлиента = СсылкаЗаказа.ПолучитьОбъект();
		ДокументЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
		Попытка
			ДокументЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			ДокументЗаказКлиента.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный);
		КонецПопытки;
				
		Попытка
			ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);
			ПроведенаРеализация = Истина;
		Исключение
			ДокументРеализации.Записать(РежимЗаписиДокумента.Запись);	
		КонецПопытки;		
		
		///////////////////////////////////
		
		ДокументРасходныйОрдер = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		ДокументРасходныйОрдер.Дата = ТекущаяДата();
		ДокументРасходныйОрдер.ДатаОтгрузки = ТекущаяДата();
		ДокументРасходныйОрдер.Склад = Док.Склад;
		ДокументРасходныйОрдер.Помещение = Док.Помещение;
		Контрагент = Об.Клиент;	
		ДокументРасходныйОрдер.Получатель = Контрагент;
		ДокументРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;		
		ДокументРасходныйОрдер.Приоритет = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
				
		Если Док.ЗонаОтгрузки.Пустая() Тогда
			ДокументРасходныйОрдер.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(ДокументРасходныйОрдер.Склад, ДокументРасходныйОрдер.Помещение, ДокументРасходныйОрдер.ЗонаОтгрузки);
			Док.ЗонаОтгрузки = ДокументРасходныйОрдер.ЗонаОтгрузки;
		Иначе
			ДокументРасходныйОрдер.ЗонаОтгрузки = Док.ЗонаОтгрузки;
		КонецЕсли;	
		
		Попытка
			Если Не ЗначениеЗаполнено(ДокументРасходныйОрдер.СкладскаяОперация) Тогда
				ДокументРасходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ДокументРасходныйОрдер, Об.Шаблон, Об);
		
		ДокументРасходныйОрдер.Записать(РежимЗаписиДокумента.Запись);		
				
		ПараметрыДокумента.Вставить("ИмяТЧПодбор", "ОтгружаемыеТовары");
		ОбработатьТабличнуюЧастьБыстраяОтгрузкаПоОтборуРазмещению(ПараметрыДокумента, ДокументРасходныйОрдер);	
		Для каждого строка Из ДокументРасходныйОрдер.ТоварыПоРаспоряжениям Цикл
			строка.Распоряжение = СсылкаЗаказа;
		КонецЦикла;
		
		ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(ДокументРасходныйОрдер, "ОтгружаемыеТовары", "", Об.Шаблон, Об.Ссылка);
		
		ПроведенВотборе = Ложь;
		Попытка
			ДокументРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			ПроведенВотборе = Истина;
		Исключение
			ДокументРасходныйОрдер.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный);
		КонецПопытки;
		
		Док.Распоряжение = ДокументРасходныйОрдер.Ссылка;
		
		Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение		
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение		
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Попытка
			ДокументРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
		КонецПопытки;		
		
		Если ПроведенВотборе Тогда				
			Для каждого строка Из  ДокументРасходныйОрдер.ОтгружаемыеТовары Цикл
				строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			КонецЦикла;		  
			
			ДокументРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;	
			Попытка
				ДокументРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
						
КонецПроцедуры
Функция ОбработатьТабличнуюЧастьБыстраяОтгрузкаПоОтборуРазмещению(ПараметрыДокумента, Док) 
	
	Об = ПараметрыДокумента.Об;
	Шаблон = Об.Шаблон;
	
	МетаданныеДока = Док.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	
	Для каждого СтрТЧ Из Об.СобранныеДанныеПодбор Цикл
		УстановитьАвтора(Док, СтрТЧ.Пользователь, Истина, Шаблон);
		Прервать;
	КонецЦИкла;	
	
	ИсходныеДанныеПодбор = Неопределено;
		
	ТабТСД = Об.СобранныеДанныеПодбор.Выгрузить();
	ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист","Количество");
	
	Если Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
		
		лЕстьСерия = (Шаблон.ИспользованиеСерийниковПодбор > 0 И (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Серия") <> Неопределено));
		лЕстьУпаковка = (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка") <> Неопределено);
		
		Для каждого СтрТЧ Из ТабТСД Цикл
			
			Если СтрТЧ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;	
					
			лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
					
			Если лЕстьСерия Тогда
				лСтруктураПоиска.Вставить("Серия", СтрТЧ.СерияСсылка);
			КонецЕсли;
			Если лЕстьУпаковка Тогда
				лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.ЕдиницаИзмерения);
			КонецЕсли;				
			
			СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
			Если СтрокиПоиска.Количество() = 0 Тогда
				СтрокаТабличнойЧасти = Док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
				СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
				СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
				
				Если лЕстьСерия Тогда
					СтрокаТабличнойЧасти.Серия = СтрТЧ.СерияСсылка;
				КонецЕсли;
				Если лЕстьУпаковка Тогда
					СтрокаТабличнойЧасти.Упаковка = СтрТЧ.ЕдиницаИзмерения;
				КонецЕсли;
				
				ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента, Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, ИсходныеДанныеПодбор);
				
			Иначе	
				СтрокаТабличнойЧасти = СтрокиПоиска[0];
			КонецЕсли;
			
			Попытка 
				КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель / СтрТЧ.ЕдиницаИзмерения.Знаменатель;
				КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
			Исключение
				КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
			Конецпопытки;
						
			Попытка
				СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;  
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
			Исключение
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
			КонецПопытки;
			
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				ОбработатьСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, Шаблон);
				
				//Серии в отдельной ТЧ
				Если МетаданныеДока.ТабличныеЧасти.Найти("Серии") <> Неопределено И Не СтрТЧ.СерияСсылка.Пустая() Тогда
					Если ИмяДока = "ПоступлениеТоваровУслуг" Или ИмяДока = "ПриобретениеТоваровУслуг" Или (СтрокаТабличнойЧасти.СтатусУказанияСерий <> 13 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 14 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 9 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 10 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 0) Тогда
						лСтруктураПоискаСерий = Новый Структура("Номенклатура,Характеристика,Серия", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрТЧ.СерияСсылка);
						СтрокиПоискаСерий = Док["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
						Если СтрокиПоискаСерий.Количество() = 0 Тогда
							СтрокаТабличнойЧастиСерии = Док["Серии"].Добавить();
							СтрокаТабличнойЧастиСерии.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
							СтрокаТабличнойЧастиСерии.Характеристика = СтрокаТабличнойЧасти.Характеристика;
							СтрокаТабличнойЧастиСерии.Серия = СтрТЧ.СерияСсылка;
							Попытка СтрокаТабличнойЧастиСерии.Склад = СтрокаТабличнойЧасти.Склад; Исключение КонецПопытки;
							Попытка СтрокаТабличнойЧастиСерии.Назначение = СтрокаТабличнойЧасти.Назначение; Исключение КонецПопытки;
						Иначе	
							СтрокаТабличнойЧастиСерии = СтрокиПоискаСерий[0];
						КонецЕсли;
						
						СтрокаТабличнойЧастиСерии.Количество = СтрокаТабличнойЧастиСерии.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
					КонецЕсли;
				КонецЕсли;	
				//Серии в отдельной ТЧ				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если ИмяДока = "РасходныйОрдерНаТовары" Тогда
		ПараметрыДокумента.Вставить("ИмяТЧПодбор", "ТоварыПоРаспоряжениям");
		ТабТСД = Об.СобранныеДанныеПодбор.Выгрузить();
		ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист","Количество");
		
		Если Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			
			лЕстьСерия = (Шаблон.ИспользованиеСерийниковПодбор > 0 И (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Серия") <> Неопределено));
			лЕстьУпаковка = (МетаданныеДока.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка") <> Неопределено);
			
			Для каждого СтрТЧ Из ТабТСД Цикл
				
				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;				
				
				лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
											
				Если лЕстьСерия Тогда
					лСтруктураПоиска.Вставить("Серия", СтрТЧ.СерияСсылка);
				КонецЕсли;
				Если лЕстьУпаковка Тогда
					лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.ЕдиницаИзмерения);
				КонецЕсли;					
				
				СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
				Если СтрокиПоиска.Количество() = 0 Тогда
					СтрокаТабличнойЧасти = Док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
					СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
					
					Если лЕстьСерия Тогда
						СтрокаТабличнойЧасти.Серия = СтрТЧ.СерияСсылка;
					КонецЕсли;
					Если лЕстьУпаковка Тогда
						СтрокаТабличнойЧасти.Упаковка = СтрТЧ.ЕдиницаИзмерения;
					КонецЕсли;
					
					ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента, Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, ИсходныеДанныеПодбор);
					
				Иначе	
					СтрокаТабличнойЧасти = СтрокиПоиска[0];
				КонецЕсли;
				
				Попытка 
					КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель / СтрТЧ.ЕдиницаИзмерения.Знаменатель;
					КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
				Исключение
					КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
				Конецпопытки;				
				
				Попытка
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;  
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
				Исключение
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
				КонецПопытки;
				
				Если СтрокаТабличнойЧасти <> Неопределено Тогда
					ОбработатьСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, Шаблон);
					
					//Серии в отдельной ТЧ
					Если МетаданныеДока.ТабличныеЧасти.Найти("Серии") <> Неопределено И Не СтрТЧ.СерияСсылка.Пустая() Тогда
						Если ИмяДока = "ПоступлениеТоваровУслуг" Или ИмяДока = "ПриобретениеТоваровУслуг" Или (СтрокаТабличнойЧасти.СтатусУказанияСерий <> 13 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 14 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 9 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 10 И СтрокаТабличнойЧасти.СтатусУказанияСерий <> 0) Тогда
							лСтруктураПоискаСерий = Новый Структура("Номенклатура,Характеристика,Серия", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрТЧ.СерияСсылка);
							СтрокиПоискаСерий = Док["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
							Если СтрокиПоискаСерий.Количество() = 0 Тогда
								СтрокаТабличнойЧастиСерии = Док["Серии"].Добавить();
								СтрокаТабличнойЧастиСерии.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
								СтрокаТабличнойЧастиСерии.Характеристика = СтрокаТабличнойЧасти.Характеристика;
								СтрокаТабличнойЧастиСерии.Серия = СтрТЧ.СерияСсылка;
								Попытка СтрокаТабличнойЧастиСерии.Склад = СтрокаТабличнойЧасти.Склад; Исключение КонецПопытки;
								Попытка СтрокаТабличнойЧастиСерии.Назначение = СтрокаТабличнойЧасти.Назначение; Исключение КонецПопытки;
							Иначе	
								СтрокаТабличнойЧастиСерии = СтрокиПоискаСерий[0];
							КонецЕсли;
							
							СтрокаТабличнойЧастиСерии.Количество = СтрокаТабличнойЧастиСерии.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
						КонецЕсли;
					КонецЕсли;	
					//Серии в отдельной ТЧ					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//БЫСТРОЕ ПЕРЕМЕЩЕНИЕ
Процедура ОпределитьЭтоБыстроеПеремещение(Шаблон, ЭтоБыстроеПеремещение)
	БыстроеПеремещение = Шаблон.БыстроеПеремещение;
	Если БыстроеПеремещение <> 0 И Шаблон.ВидДокумента = "ПеремещениеТоваров" Тогда
		ЭтоБыстроеПеремещение = Истина;
		НачатьТранзакцию();
	КонецЕсли;		
КонецПроцедуры
Процедура ПроцедураПоБыстромуПеремещению(Об, ДокСсылка, ТабТСД_Подбор, ТабТСД_Размещение, БыстроеПеремещение, УдалосьПровестиПеремещение, УдалосьПровестиРасходныйПриходныйОрдер)
	
	ЭтоПеремещениеНаОрдерныйСклад = ?(БыстроеПеремещение = 2, Истина, Ложь);
	
	Если УдалосьПровестиПеремещение Тогда		
		ТабТСД_Подбор.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист","Количество");
		ТабТСД_Размещение.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист","Количество");
		
		СозданиеДокументовПоБыстромуПеремещению(Об, ДокСсылка, ЭтоПеремещениеНаОрдерныйСклад, УдалосьПровестиРасходныйПриходныйОрдер, ТабТСД_Подбор, ТабТСД_Размещение);	
	КонецЕсли; 
	
	Если УдалосьПровестиПеремещение И УдалосьПровестиРасходныйПриходныйОрдер Тогда
		ЗафиксироватьТранзакцию();			
	ИначеЕсли Не УдалосьПровестиПеремещение Тогда 			
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = "Документ перемещение не удалось провести!";
		
		ВызватьИсключение ОписаниеОшибки;		
	ИначеЕсли Не УдалосьПровестиРасходныйПриходныйОрдер Тогда	
		ОтменитьТранзакцию();
		
		ПриходныйРасходныйОрдер = ?(ЭтоПеремещениеНаОрдерныйСклад, "Приходный ордер на товары", "Расходный ордер на товары");
		
		ОписаниеОшибки = "Документ " + ПриходныйРасходныйОрдер + " не удалось провести!";
		
		ВызватьИсключение ОписаниеОшибки;			
	КонецЕсли;
	
КонецПроцедуры
Процедура СозданиеДокументовПоБыстромуПеремещению(Об, ДокСсылка, ЭтоПеремещениеНаОрдерныйСклад, УдалосьПровестиРасходныйПриходныйОрдер, ТабТСД_Подбор, ТабТСД_Приемка)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	Модуль_СкладыСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СкладыСервер");	
	Модуль_Пользователи = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("Пользователи");
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения"); 
	
	СкладПолучатель 				= Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "СкладПолучатель");
	СкладОтправитель 				= Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "СкладОтправитель");
	
	Если ЭтоПеремещениеНаОрдерныйСклад Тогда	
		НастройкаАдресногоХранения 		= Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель, "НастройкаАдресногоХранения");
		ТабТСДСЯчейками = ТабТСД_Приемка.Скопировать();	
	Иначе
		НастройкаАдресногоХранения 		= Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОтправитель, "НастройкаАдресногоХранения");
		ТабТСДСЯчейками = ТабТСД_Подбор.Скопировать();
	КонецЕсли;
	
	ТабТСДСЯчейками.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка", "Количество");
	
	ИспользуютсяПомещения			= ?(НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения, Истина, Ложь);
	
	Если ИспользуютсяПомещения Тогда
		Помещение = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Об.Ссылка, "Помещение");
		
		Если Не ЗначениеЗаполнено(Помещение) Тогда
			Если Об.Шаблон.НовыеЗначенияРеквизитов.Количество() Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ИмяРеквизита", "Помещение");
				МассивСтрок = Об.Шаблон.НовыеЗначенияРеквизитов.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() Тогда
					Помещение = МассивСтрок[0].ЗначениеРеквизита;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		
		Если Не Помещение.Пустая() Тогда
			НастройкаАдресногоХраненияПомещение = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Помещение, "НастройкаАдресногоХранения");
		КонецЕсли; 
	КонецЕсли;  	
	
	ДокОбъект = ДокСсылка.ПолучитьОбъект();
	
	ДокОбъект.Товары.Свернуть("Номенклатура,Характеристика,Серия,Упаковка, СтатусУказанияСерий, СтатусУказанияСерийОтправитель", "КоличествоУпаковок,Количество");
	
	ДокОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	ДокОбъект.Ответственный = Модуль_Пользователи.ТекущийПользователь();
		
	ТабТСД_Подбор.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения", "Количество"); 
	
	Если Не ЗначениеЗаполнено(Помещение) Тогда
		
		МассивЯчеек = ТабТСДСЯчейками.ВыгрузитьКолонку("ЯчейкаСсылка");
		
		Для каждого СтрокаМассива Из МассивЯчеек Цикл
			
			Если ЗначениеЗаполнено(СтрокаМассива.Помещение) Тогда
				Помещение = СтрокаМассива.Помещение;
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	//УСЛОВИЯ НЕОБХОДИМОСТИ СОЗДАНИЯ ОТБОРА / РАЗМЕЩЕНИЯ
	
	//1.
	Если НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения Тогда
		Если Помещение.ИспользоватьАдресноеХранение Тогда
			СоздаватьОтборРазмещениеТоваров = Истина;
		Иначе
			СоздаватьОтборРазмещениеТоваров = Ложь;
		КонецЕсли;	
		//2. Если нет помещения и настройка АХ "использовать для хранения остатков номенклатуры", тогда требуется создавать отборы/размещения:
	ИначеЕсли Помещение = Неопределено И НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки Тогда
		СоздаватьОтборРазмещениеТоваров = Истина;
		//3. В остальных случаях:	
	Иначе
		СоздаватьОтборРазмещениеТоваров = Ложь;
	КонецЕсли;		
	
	Если ИспользуютсяПомещения И Не СоздаватьОтборРазмещениеТоваров И Не ЗначениеЗаполнено(Помещение) Тогда
		Сообщить("Не удалось внести в базу! Не заполнено помещение в шаблоне, на вкладке ""Автозагрузка""!");
		Возврат;		
	КонецЕсли;	
	
	Если Не ЭтоПеремещениеНаОрдерныйСклад Тогда
		
		ПараметрыПоискаРасходногоОрдера = СформироватьПараметрыПоискаРасходногоОрдера(ДокСсылка);
		СтруктураОформленныеОрдераОшибки = Модуль_СкладыСервер.ПереоформитьРасходныеОрдера(ПараметрыПоискаРасходногоОрдера);
		
		Если СтруктураОформленныеОрдераОшибки.ОформленныеОрдера.Количество() > 0 Тогда
			РасходныйОрдерСсылка = СтруктураОформленныеОрдераОшибки.ОформленныеОрдера[0].РасходныйОрдер;
		Иначе
			Возврат;
		КонецЕсли; 
		
		РасходныйОрдерОбъект = РасходныйОрдерСсылка.ПолучитьОбъект();  
		
		Если ЗначениеЗаполнено(Помещение) Тогда
			РасходныйОрдерОбъект.Помещение = Помещение;
		КонецЕсли;
		
		РасходныйОрдерОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
		
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(РасходныйОрдерОбъект, Об.Шаблон, Об);
		
		ЗаполнитьСтрокиДляОрдеров(РасходныйОрдерОбъект, "ОтгружаемыеТовары", ТабТСД_Подбор);
		
		ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(РасходныйОрдерОбъект, "ОтгружаемыеТовары", "", Об.Шаблон, Об.Ссылка);
		
		РасходныйОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		
		Если СоздаватьОтборРазмещениеТоваров Тогда
			СоздатьОтборРазмещениеТоваров(Об, РасходныйОрдерСсылка, "ТоварыОтбор", ТабТСДСЯчейками);	
		КонецЕсли; 
		
		РасходныйОрдерОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		
		Для каждого СтрокаТЧ Из РасходныйОрдерОбъект.ОтгружаемыеТовары Цикл
			СтрокаТЧ.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;	
		КонецЦикла;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НаборТоварыНаСкладах = РасходныйОрдерОбъект.Движения.Найти("ТоварыНаСкладах");
		
		Если НаборТоварыНаСкладах <> Неопределено И НаборТоварыНаСкладах.ДополнительныеСвойства.Свойство("РассчитыватьИзменения") Тогда
			НаборТоварыНаСкладах.ДополнительныеСвойства.РассчитыватьИзменения = Ложь;	 	
		КонецЕсли;
		
		РасходныйОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		
		УдалосьПровестиРасходныйПриходныйОрдер = Истина;	
		
	Иначе                    
		
		ПараметрыПриходногоОрдера = СформироватьПараметрыПриходногоОрдера(ДокСсылка, Помещение);
		
		ПриходныйОрдерНаТовары = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ПриходныйОрдерНаТовары, ПараметрыПриходногоОрдера);
		
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ПриходныйОрдерНаТовары, Об.Шаблон, Об);
		
		ПриходныйОрдерНаТовары.Товары.Загрузить(ДокСсылка.Товары.Выгрузить());	
		ЗаполнитьСтрокиДляОрдеров(ПриходныйОрдерНаТовары, "Товары", ТабТСД_Приемка);
		
		ПриходныйОрдерНаТовары.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
		ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(ПриходныйОрдерНаТовары, "Товары", "", Об.Шаблон, Об.Ссылка);
		
		ПриходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		
		ПриходныйОрдерНаТовары.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
		ПриходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		
		Если СоздаватьОтборРазмещениеТоваров Тогда
			СоздатьОтборРазмещениеТоваров(Об, ПриходныйОрдерНаТовары.Ссылка, "ТоварыРазмещение", ТабТСДСЯчейками);	
		КонецЕсли; 
		
		УдалосьПровестиРасходныйПриходныйОрдер = Истина;
		
	КонецЕсли; 
	
	ИзменитьРеквизитыШапкиИзДополнительныхФорм(ДокОбъект, Об.Шаблон, Об);
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция СформироватьПараметрыПоискаРасходногоОрдера(ДокПеремещение)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ЗначенияДокументаПеремещения = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокПеремещение, "СкладОтправитель,СкладПолучатель,Ответственный");
	ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(ЗначенияДокументаПеремещения.СкладОтправитель, Справочники.СкладскиеПомещения.ПустаяСсылка());
	
	Если ЗонаОтгрузки.Пустая() Тогда	
		ЗонаОтгрузки = ПолучитьЗонуОтгрузкиПриемки(ЗначенияДокументаПеремещения.СкладОтправитель, Истина);		
	КонецЕсли; 
	
	МассивСПеремещением = Новый Массив;
	МассивСПеремещением.Добавить(ДокПеремещение);
	
	ПараметрыПоискаРасходногоОрдера = Новый Структура;	
	ПараметрыПоискаРасходногоОрдера.Вставить("ДатаОтгрузки"					, ТекущаяДата());
	ПараметрыПоискаРасходногоОрдера.Вставить("ЗаданиеНаПеревозку"			, Неопределено);
	ПараметрыПоискаРасходногоОрдера.Вставить("ЗонаОтгрузки"					, ЗонаОтгрузки);
	ПараметрыПоискаРасходногоОрдера.Вставить("ОтгрузкаПоЗаданиюНаПеревозку"	, Ложь);
	ПараметрыПоискаРасходногоОрдера.Вставить("Получатель"					, ЗначенияДокументаПеремещения.СкладПолучатель);
	ПараметрыПоискаРасходногоОрдера.Вставить("Помещение"					, Неопределено);
	ПараметрыПоискаРасходногоОрдера.Вставить("РаспоряжениеГруппировка"		, Неопределено);
	ПараметрыПоискаРасходногоОрдера.Вставить("РаспоряженияНаОтгрузку"		, МассивСПеремещением);
	ПараметрыПоискаРасходногоОрдера.Вставить("Склад"						, ЗначенияДокументаПеремещения.СкладОтправитель);
	ПараметрыПоискаРасходногоОрдера.Вставить("СкладскаяОперация"			, Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению);
	ПараметрыПоискаРасходногоОрдера.Вставить("ТекущаяДата"					, ТекущаяДата());
	ПараметрыПоискаРасходногоОрдера.Вставить("ФоновоеЗадание"               , Ложь);
	ПараметрыПоискаРасходногоОрдера.Вставить("Ответственный"				, ЗначенияДокументаПеремещения.Ответственный);
	
	Возврат ПараметрыПоискаРасходногоОрдера;
	
КонецФункции
Функция СформироватьПараметрыПриходногоОрдера(ДокПеремещение, Помещение)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	ЗначенияДокументаПеремещения = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокПеремещение, "СкладОтправитель,СкладПолучатель,Номер,Дата,Ответственный");
	ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(ЗначенияДокументаПеремещения.СкладОтправитель, Помещение);
	
	Если ЗонаПриемки.Пустая() Тогда 
		ЗонаПриемки = ПолучитьЗонуОтгрузкиПриемки(ЗначенияДокументаПеремещения.СкладПолучатель);	
	КонецЕсли; 
	
	ПараметрыПриходногоОрдера = Новый Структура;	
	ПараметрыПриходногоОрдера.Вставить("ДатаВходящегоДокумента"		, ЗначенияДокументаПеремещения.Дата);
	ПараметрыПриходногоОрдера.Вставить("Дата"						, ТекущаяДата());
	ПараметрыПриходногоОрдера.Вставить("ДатаПоступления"			, Дата(1,1,1));
	ПараметрыПриходногоОрдера.Вставить("ЗонаПриемки"				, ЗонаПриемки);
	ПараметрыПриходногоОрдера.Вставить("ЗакрыватьГрафикПоступления"	, Ложь);
	ПараметрыПриходногоОрдера.Вставить("Склад"						, ЗначенияДокументаПеремещения.СкладПолучатель);
	ПараметрыПриходногоОрдера.Вставить("Помещение"					, Помещение);
	ПараметрыПриходногоОрдера.Вставить("НомерВходящегоДокумента"	, ЗначенияДокументаПеремещения.Номер);
	ПараметрыПриходногоОрдера.Вставить("Распоряжение"				, ДокПеремещение);
	ПараметрыПриходногоОрдера.Вставить("Отправитель"				, ЗначенияДокументаПеремещения.СкладОтправитель);
	ПараметрыПриходногоОрдера.Вставить("ХозяйственнаяОперация"		, Перечисления.ХозяйственныеОперации.ПеремещениеТоваров);
	ПараметрыПриходногоОрдера.Вставить("Статус"						, Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	ПараметрыПриходногоОрдера.Вставить("СкладскаяОперация"			, Перечисления.СкладскиеОперации.ПриемкаПоПеремещению);
	ПараметрыПриходногоОрдера.Вставить("Ответственный"				, ЗначенияДокументаПеремещения.Ответственный);
	
	Возврат ПараметрыПриходногоОрдера;
	
КонецФункции
Процедура ЗаполнитьСтрокиДляОтборРазмещениеТоваров(ОтборРазмещениеТоваров, НаименованиеТЧ, ТабТСД)
	
	ОтборРазмещениеТоваров[НаименованиеТЧ].Очистить();
	
	Для каждого СтрокаТСД Из ТабТСД Цикл
		НовСтрока = ОтборРазмещениеТоваров[НаименованиеТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТСД);
		
		Если НаименованиеТЧ = "ТоварыРазмещение" Тогда
			НовСтрока.КоличествоРазмещено           = НовСтрока.Количество;
			НовСтрока.КоличествоУпаковокРазмещено	= НовСтрока.Количество;
		Иначе
			НовСтрока.КоличествоОтобрано            = НовСтрока.Количество;
			НовСтрока.КоличествоУпаковокОтобрано	= НовСтрока.Количество;
		КонецЕсли; 
		
		НовСтрока.КоличествоУпаковок            = НовСтрока.Количество;
		НовСтрока.Упаковка                      = СтрокаТСД.ЕдиницаИзмерения;
		НовСтрока.Характеристика                = СтрокаТСД.ХарактеристикаНоменклатуры;
		НовСтрока.Ячейка                        = СтрокаТСД.ЯчейкаСсылка;
		НовСтрока.Серия                         = СтрокаТСД.СерияСсылка;
	КонецЦикла; 	 
	
	УстановитьСерииВдокументе(ОтборРазмещениеТоваров);   
	
КонецПроцедуры
Процедура ЗаполнитьСтрокиДляОрдеров(ДокОрдер, НаименованиеТЧ, ТабТСД)
	
	ДокОрдер[НаименованиеТЧ].Очистить();
	
	Для каждого СтрокаТСД Из ТабТСД Цикл
		НовСтрока = ДокОрдер[НаименованиеТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТСД);
		
		Если НаименованиеТЧ = "ОтгружаемыеТовары" Тогда
			НовСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;		
		КонецЕсли; 
		
		НовСтрока.КоличествоУпаковок			= НовСтрока.Количество;		
		НовСтрока.Упаковка                      = СтрокаТСД.ЕдиницаИзмерения;
		НовСтрока.Характеристика                = СтрокаТСД.ХарактеристикаНоменклатуры;
		НовСтрока.Серия                         = СтрокаТСД.СерияСсылка;
	КонецЦикла; 	 
	
	УстановитьСерииВдокументе(ДокОрдер);
	
КонецПроцедуры
Функция ПолучитьЗонуОтгрузкиПриемки(СкладОтправитель, ЭтоОтгрузка = Ложь)
	
	ЗонаОтгрузкиПриемки = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СкладскиеЯчейки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	НЕ СкладскиеЯчейки.ПометкаУдаления
	|	И СкладскиеЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Отгрузка)
	|	И СкладскиеЯчейки.Владелец = &Склад";
	
	Запрос.УстановитьПараметр("Склад", СкладОтправитель);
	
	Если Не ЭтоОтгрузка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТипыСкладскихЯчеек.Отгрузка", "ТипыСкладскихЯчеек.Приемка");		
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗонаОтгрузкиПриемки = Выборка.Ссылка;		
	КонецЕсли;
	
	Возврат ЗонаОтгрузкиПриемки;
	
КонецФункции
Процедура СоздатьОтборРазмещениеТоваров(Об,ДокОрдер, НаименованиеТЧ, ТабТСД)
	
	ОтборРазмещениеТоваров = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ОтборРазмещениеТоваров.Дата = ТекущаяДата();
	ОтборРазмещениеТоваров.Заполнить(ДокОрдер);
	
	ИзменитьРеквизитыШапкиИзДополнительныхФорм(ОтборРазмещениеТоваров, Об.Шаблон, Об);
	
	ЗаполнитьСтрокиДляОтборРазмещениеТоваров(ОтборРазмещениеТоваров, НаименованиеТЧ, ТабТСД);
	
	ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(ОтборРазмещениеТоваров, НаименованиеТЧ, "", Об.Шаблон, Об.Ссылка);
	
	ОтборРазмещениеТоваров.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ОтборРазмещениеТоваров.Распоряжение = ДокОрдер;
	ОтборРазмещениеТоваров.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
	ИзменитьДопСвойствоВДвиженияТоварыВЯчейках(ОтборРазмещениеТоваров);
	
	ОтборРазмещениеТоваров.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
	
	ОтборРазмещениеТоваров.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
КонецПроцедуры

//ЗАПОЛНЕНИЕ ДОКУМЕНТОВ ПО ПРЕДОПРЕДЕЛЕННЫМ ЛОГИКАМ ПО
Процедура ОбработкаРеализацииСозданнойНаОснованииЗаказа(Об, Док, СтрокаОшибок)
		
	ЕстьОшибки = Ложь;
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	СтруктураПоДокументу 	= Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Об.Ссылка, "ИсходныйДокумент, ТСД");
	ЗаказКлиента 			= СтруктураПоДокументу.ИсходныйДокумент;
	ЗаказКлиентаОбъект 		= ЗаказКлиента.ПолучитьОбъект();	
	Пользователь 			= Справочники.Пользователи.ПустаяСсылка();
	
	Для каждого СтрТЧ Из Об.СобранныеДанныеПодбор Цикл
		Пользователь = Справочники.Пользователи.НайтиПоНаименованию(СтрТЧ.Пользователь, Ложь);
		Прервать;
	КонецЦИкла;
	
	Для каждого СтрокаТЧ Из ЗаказКлиентаОбъект.Товары Цикл
		СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;	
	КонецЦикла;	
	
	ТЗСвойствДопРеквизитов = ПолучитьДопРеквизиты();	
	
	Для каждого СтрокаСвойств Из ТЗСвойствДопРеквизитов Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Свойство", СтрокаСвойств.Ссылка);
		
		Массив = ЗаказКлиентаОбъект.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
		
		Значение = Неопределено;
		
		Если ВРег(СтрокаСвойств.ИдентификаторДляФормул) = ВРег("ДатаПроверки") Тогда
			Значение = ТекущаяДата();	
		ИначеЕсли ВРег(СтрокаСвойств.ИдентификаторДляФормул) = ВРег("ПроверилНаТСД") Тогда
			Значение = Пользователь;
		КонецЕсли;
		
		Если Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Массив.Количество() = 0 Тогда
			НовоеСвойство = ЗаказКлиентаОбъект.ДополнительныеРеквизиты.Добавить();
			НовоеСвойство.Свойство = СтрокаСвойств.Ссылка;
			НовоеСвойство.Значение = Значение;
		Иначе
			Массив[0].Значение = Значение;
		КонецЕсли;
		
	КонецЦикла;	
	
	Попытка
		ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
		СтрокаОшибок 	= ОписаниеОшибки();
		ЕстьОшибки 		= Истина;
	КонецПопытки;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		Док.СкидкиРассчитаны = Истина;
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
		СтрокаОшибок 	= ОписаниеОшибки();
		ЕстьОшибки 		= Истина;
	КонецПопытки;
	
	Если Док.ШтрихкодыУпаковок.Количество() = 0 Тогда
		Попытка
			Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
		КонецПопытки;
		
		Возврат;
	КонецЕсли;	
	
	Если Не ЕстьОшибки Тогда
		
		СоздатьДокументВыводИзОборотаИСМП(Док, Об, СтрокаОшибок);
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
		КонецПопытки;
		
	КонецЕсли; 
	
КонецПроцедуры
Процедура СоздатьДокументВыводИзОборотаИСМП(Док, Об, СтрокаОшибок, ЭтоРеализация = Истина, ДокВывода = Неопределено, ВидМаркируемойПродукции = Неопределено)
	
	НеЗаполнятьНовыйДокумент = ДокВывода = Неопределено; 
	
	ДокВывода = Документы.ВыводИзОборотаИСМП.СоздатьДокумент();
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	РеквизитыДокумента = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Док.Ссылка, "Ссылка, Номер, Дата");
	
	ДокВывода.Дата = ТекущаяДата();
	ТабШКПоВидуПродукции = Новый ТаблицаЗначений;
	
	Если ЭтоРеализация Тогда 
		Если ВидМаркируемойПродукции = Неопределено Тогда
			ДокВывода.ШтрихкодыУпаковок.Загрузить(Док.ШтрихкодыУпаковок.Выгрузить()); 
			
		Иначе
			ДокВывода.ВидПродукции = ВидМаркируемойПродукции;
			ТабШКПоВидуПродукции = ДатаМобайл_Маркировка.ПолучитьТаблицуШКПоВидуПродукции(Док.ШтрихкодыУпаковок.Выгрузить(), ВидМаркируемойПродукции);
			ДокВывода.ШтрихкодыУпаковок.Загрузить(ТабШКПоВидуПродукции);
		КонецЕсли;
		
		ДокВывода.ДополнительныеСвойства.Вставить("НеЗаполнятьТабличнуюЧасть", Истина);
		ДокВывода.Записать();
	КонецЕсли;
	
	ДокВывода.Заполнить(РеквизитыДокумента.Ссылка);
	
	ДокВывода.Операция		    				= Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа;
	ДокВывода.ВидПервичногоДокумента 			= Перечисления.ВидыПервичныхДокументовИСМП.Прочее;
	ДокВывода.НомерПервичногоДокумента  		= РеквизитыДокумента.Номер;
	ДокВывода.ДатаПервичногоДокумента   		= РеквизитыДокумента.Дата;
	ДокВывода.НаименованиеПервичногоДокумента   = ?(ЭтоРеализация, "Реализация товаров", "Списание недостач товаров");
	
	Если ЭтоРеализация Тогда 
		ДокВывода.Организация = Док.Организация;
		ДокВывода.Контрагент = Док.Контрагент;
		ДокВывода.ДокументОснование = Док.Ссылка;	
	КонецЕсли;
	
	ДатаМобайл_Маркировка.ОбработатьВидДокументаРеализацияТоваровУслуг(ДокВывода, Об, Ложь, СтрокаОшибок, НеЗаполнятьНовыйДокумент, ВидМаркируемойПродукции);

	// удалить штрихкоды упаковок, не соответствующие виду продукции
	Если Не ВидМаркируемойПродукции = Неопределено И ТабШКПоВидуПродукции.Количество() > 0 Тогда
		МассивНаУдалениеШК = Новый Массив;
		
		Для каждого СтрокаШК Из ДокВывода.ШтрихкодыУпаковок Цикл
			НайдСтроки = ТабШКПоВидуПродукции.НайтиСтроки(Новый Структура("ШтрихкодУпаковки", СтрокаШК.ШтрихкодУпаковки));
			
			Если НайдСтроки.Количество() = 0 Тогда
				МассивНаУдалениеШК.Добавить(СтрокаШК);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого УдСтрока Из МассивНаУдалениеШК Цикл
			ДокВывода.ШтрихкодыУпаковок.Удалить(УдСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		ДокВывода.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокВывода.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьДопРеквизиты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|	ДополнительныеРеквизитыИСведения.ИдентификаторДляФормул КАК ИдентификаторДляФормул
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	(ДополнительныеРеквизитыИСведения.Имя ПОДОБНО ""%"" + &ИмяРеквизита1 + ""%""
	|			ИЛИ ДополнительныеРеквизитыИСведения.Имя ПОДОБНО ""%"" + &ИмяРеквизита2 + ""%"")
	|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИмяРеквизита1", "ДатаПроверки");
	Запрос.УстановитьПараметр("ИмяРеквизита2", "ПроверилНаТСД");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	
Функция СоздатьДокументыРеализацияТоваровУслугВыводИзОборотаИСМП(ИсходныйДокумент, Об, СтрокаОшибок)
	
	Попытка
		ИсходныйДокументОбъект = ИсходныйДокумент.ПолучитьОбъект();
		ИсходныйДокументОбъект.СкидкиРассчитаны = Истина;
		ИсходныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
		СтрокаОшибок = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки; 
	
	ДатаМобайл_Маркировка.ОбработатьВидДокументаРеализацияТоваровУслуг(ИсходныйДокументОбъект, Об, Ложь, СтрокаОшибок, Истина);

	МассивВыводИзОборотаИСМП = Новый Массив;
	
	Для каждого СтрокаТЧ Из Об.НовыеДокументы Цикл
		Попытка
			ДокОб = СтрокаТЧ.НовыйДокумент.ПолучитьОбъект();
			ДокОб.УстановитьПометкуУдаления(Истина);
		Исключение КонецПопытки;	
	КонецЦикла;	
		
	Об.НовыеДокументы.Очистить();
	
	// Для каждого вида маркируемой продукции формируем отдельный документ ВыводИзОборотаИСМП
	Шаблон = Об.Шаблон;
	
	Если Шаблон.ВидДокументаНового = "" Тогда
		Если Шаблон.ИспользоватьПодбор Тогда
			ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
		КонецЕсли;
		Если Шаблон.ИспользоватьПриемку Тогда
			ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПриемка;
		КонецЕсли;
	Иначе
		Если Шаблон.ИспользоватьПодбор Тогда
			ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиНовойПодбор;
		КонецЕсли;
		Если Шаблон.ИспользоватьПриемку Тогда
			ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиНовойПриемка;
		КонецЕсли;
	КонецЕсли;    
	
	ВидМаркируемойПродукцииДокументаМассив = ДатаМобайл_Маркировка.ПолучитьВидПродукцииИСДокумента(ИсходныйДокументОбъект, ИмяТЧПодбор);
	
	Если ИсходныйДокументОбъект.Проведен Тогда
		Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
			Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.ПустаяСсылка() Тогда
				Продолжить;	
			КонецЕсли;
			ВыводИзОборотаИСМП = Документы.ВыводИзОборотаИСМП.ПустаяСсылка();
			СоздатьДокументВыводИзОборотаИСМП(ИсходныйДокументОбъект, Об, СтрокаОшибок, Истина, ВыводИзОборотаИСМП, ВидМаркируемойПродукции);
			
			МассивВыводИзОборотаИСМП.Добавить(ВыводИзОборотаИСМП.Ссылка);
		КонецЦикла;
	КонецЕсли; 
	
	Возврат МассивВыводИзОборотаИСМП;
	
КонецФункции
Процедура ПерезаполнитьПодчиненныйДокументОтборРазмещениеПриПроверке(Док, Об)
	
	Шаблон = Об.Шаблон;    
	
	Для каждого СтрокаОчисткиПодбор Из Док["ТоварыОтбор"] Цикл
		СтрокаОчисткиПодбор.КоличествоУпаковокОтобрано = 0;
		СтрокаОчисткиПодбор.КоличествоОтобрано = 0;
	КонецЦикла;
	
	СтруктураДляПоиска = Новый Структура("Количество", 0); 
	ТабличнаяЧастьДок = Док["ТоварыОтбор"]; 
	МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
	Для каждого Строка Из МассивПустыхСтрок Цикл 
		ТабличнаяЧастьДок.Удалить(Строка); 
	КонецЦикла;
	
	Для каждого СтрокаОчисткиРазмещение Из Док["ТоварыРазмещение"] Цикл
		СтрокаОчисткиРазмещение.КоличествоУпаковокРазмещено = 0;
		СтрокаОчисткиРазмещение.КоличествоРазмещено = 0;	
	КонецЦикла;
	
	СтруктураДляПоиска = Новый Структура("Количество", 0); 
	ТабличнаяЧастьДок = Док["ТоварыРазмещение"]; 
	МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
	Для каждого Строка Из МассивПустыхСтрок Цикл 
		ТабличнаяЧастьДок.Удалить(Строка); 
	КонецЦикла;	
	
	Если Шаблон.ИспользоватьПодбор Тогда
		
		ТабТСД = Об.СобранныеДанныеПодбор.Выгрузить();
		ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист","Количество");
		
		Если Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			
			Для каждого СтрТЧ Из ТабТСД Цикл
				
				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				Если СтрТЧ.Номенклатура.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка 
					КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель / СтрТЧ.ЕдиницаИзмерения.Знаменатель;
					КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
				Исключение
					КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
				Конецпопытки;			
				
				лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
				
				лЕстьЯчейка = Истина;
				лЕстьСерия = Истина;
				лЕстьУпаковка = Истина;
				
				Если лЕстьЯчейка Тогда
					лСтруктураПоиска.Вставить("Ячейка", СтрТЧ.ЯчейкаСсылка);
				КонецЕсли;
				Если лЕстьСерия Тогда
					лСтруктураПоиска.Вставить("Серия", СтрТЧ.СерияСсылка);
				КонецЕсли;
				Если лЕстьУпаковка Тогда
					лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.ЕдиницаИзмерения);
				КонецЕсли;	
								
				СтрокиПоиска = Док["ТоварыОтбор"].НайтиСтроки(лСтруктураПоиска);
												
				Если СтрокиПоиска.Количество() = 0 Тогда
					
					СтрокаТабличнойЧасти = Док["ТоварыОтбор"].Добавить();
					СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
					
					Если лЕстьЯчейка Тогда
						СтрокаТабличнойЧасти.Ячейка = СтрТЧ.ЯчейкаСсылка;
					КонецЕсли;
					
					Если лЕстьСерия Тогда
						СтрокаТабличнойЧасти.Серия = СтрТЧ.СерияСсылка;
					КонецЕсли;
					Если лЕстьУпаковка Тогда
						СтрокаТабличнойЧасти.Упаковка = СтрТЧ.ЕдиницаИзмерения;
					КонецЕсли;					
					
				Иначе	
					СтрокаТабличнойЧасти = СтрокиПоиска[0];						
				КонецЕсли;				
				
				СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано = СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано + СтрТЧ.Количество;
				СтрокаТабличнойЧасти.КоличествоОтобрано = СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано * КоэффициентУпаковки;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
			
	Если Шаблон.ИспользоватьПриемку Тогда
		
		ТабТСД = Об.СобранныеДанныеПриемка.Выгрузить();
		ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ЯчейкаСсылка,СерияСсылка,ШтрихКод","Количество");
		
		Если Шаблон.ТабличнуюЧастьПриЗагрузкеПриемка <> 0 Тогда
						
			Для каждого СтрТЧ Из ТабТСД Цикл
								
				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				Если СтрТЧ.Номенклатура.Пустая() Тогда
					Продолжить;
				КонецЕсли;	
				
				Попытка 
					КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель / СтрТЧ.ЕдиницаИзмерения.Знаменатель;
					КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
				Исключение
					КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
				Конецпопытки;
								
				лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
				
				лЕстьЯчейка = Истина;
				лЕстьСерия = Истина;
				лЕстьУпаковка = Истина;
				
				Если лЕстьЯчейка Тогда
					лСтруктураПоиска.Вставить("Ячейка", СтрТЧ.ЯчейкаСсылка);
				КонецЕсли;
				Если лЕстьСерия Тогда
					лСтруктураПоиска.Вставить("Серия", СтрТЧ.СерияСсылка);
				КонецЕсли;
				Если лЕстьУпаковка Тогда
					лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.ЕдиницаИзмерения);
				КонецЕсли;	
				
				СтрокиПоиска = Док["ТоварыРазмещение"].НайтиСтроки(лСтруктураПоиска);
				Если СтрокиПоиска.Количество() = 0 Тогда
					СтрокаТабличнойЧасти = Док["ТоварыРазмещение"].Добавить();
					СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
					Если лЕстьЯчейка Тогда
						СтрокаТабличнойЧасти.Ячейка = СтрТЧ.ЯчейкаСсылка;
					КонецЕсли;
					Если лЕстьСерия Тогда
						СтрокаТабличнойЧасти.Серия = СтрТЧ.СерияСсылка;
					КонецЕсли;
					Если лЕстьУпаковка Тогда
						СтрокаТабличнойЧасти.Упаковка = СтрТЧ.ЕдиницаИзмерения;
					КонецЕсли;				
				Иначе	
					СтрокаТабличнойЧасти = СтрокиПоиска[0];
				КонецЕсли;				
				
				СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено = СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено + СтрТЧ.Количество;
				СтрокаТабличнойЧасти.КоличествоРазмещено = СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено * КоэффициентУпаковки;
							
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
					
КонецПроцедуры
Процедура ЗаполнитьВнутреннееПотреблениеПоЗаказу(Док, ПараметрыДокумента)
	
	Док.Организация = ПараметрыДокумента.ИсходныйДокумент.Организация;
	Док.Склад = ПараметрыДокумента.ИсходныйДокумент.Склад;
	Док.ПотреблениеПоЗаказам = Истина;
	Док.ЗаказНаВнутреннееПотребление = ПараметрыДокумента.ИсходныйДокумент;
	
	Для каждого Товар Из Док.Товары Цикл
		
		Товар.ЗаказНаВнутреннееПотребление = ПараметрыДокумента.ИсходныйДокумент;
		
		РезультатыПоиска = ПараметрыДокумента.ИсходныйДокумент.Товары.НайтиСтроки(
		Новый Структура("Номенклатура, Характеристика, Серия", Товар.Номенклатура, Товар.Характеристика, Товар.Серия));
		
		Если РезультатыПоиска.Количество() > 0 Тогда	
			Товар.АналитикаРасходов = РезультатыПоиска[0].АналитикаРасходов;
			Товар.СтатьяРасходов = РезультатыПоиска[0].СтатьяРасходов;
			Товар.КодСтроки = РезультатыПоиска[0].КодСтроки;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ЗаполнитьАктОРасхожденияхПослеПриемки(Об, ДокументРасхождения)
	
	Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
	
	// 1. Заполняем документ на основании ПТиУ:
	ДокументРасхождения.Товары.Очистить();
	ДокументРасхождения.Заполнить(Об.ИсходныйДокумент);

	Если Об.СобранныеДанныеПодбор.Количество() <> 0 Тогда
		// 2. Берем данные, которые отсканировали на ТСД:
		ДанныеСТСД = Об.СобранныеДанныеПодбор.Выгрузить();
		
		// заполним коэфф-ты ед, если таких нет
		Для каждого СтрокаТоваров Из ДанныеСТСД Цикл
			Если Не ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмерения) Тогда	
				СтрокаТоваров.КоэффициентЕдиницы = 1;
			Иначе
				СтрокаТоваров.КоэффициентЕдиницы = Окр(СтрокаТоваров.ЕдиницаИзмерения.Числитель / ?(СтрокаТоваров.ЕдиницаИзмерения.Знаменатель = 0, 1, СтрокаТоваров.ЕдиницаИзмерения.Знаменатель), 2, 1);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСТСД.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияСсылка, 
		|ЕдиницаИзмерения, КоэффициентЕдиницы", "Количество");
		
		// 3. Указываем настройки для пересчета СуммыНДС, СуммыСНДС, КоличествоЕдиниц:
		СтруктураПоиска = Новый Структура;
		СтруктураДействий = Новый Структура;
		Модуль_ОбработкаТабличнойЧастиКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиКлиентСервер");
		
		Попытка
			СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументРасхождения);
		Исключение
			СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ДокументРасхождения);
		КонецПопытки; 
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		// 4. Обходим данные с ТСД и меняем количество в строках ТЧ "Товары":
		Для каждого СтрокаТоваров Из ДанныеСТСД Цикл
			Если СтрокаТоваров.Количество = 0 Тогда	Продолжить; КонецЕсли;
			
			СтруктураПоиска.Вставить("Номенклатура"  , СтрокаТоваров.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТоваров.ХарактеристикаНоменклатуры);
			СтруктураПоиска.Вставить("Серия"         , СтрокаТоваров.СерияСсылка);
			СтруктураПоиска.Вставить("Упаковка"      , СтрокаТоваров.ЕдиницаИзмерения);
			
			МассивСтрокТоваров = ДокументРасхождения.Товары.НайтиСтроки(СтруктураПоиска);
			КоличествоСтрокМассива = МассивСтрокТоваров.Количество();
			КоличествоУпаковокОтсканировано = СтрокаТоваров.Количество;
			
			// превышение задания
			Если КоличествоСтрокМассива = 0 Тогда 
				СтрокаТоваровДокумента = ДокументРасхождения.Товары.Добавить(); 
				
				СтрокаТоваровДокумента.Номенклатура       = СтрокаТоваров.Номенклатура;
				СтрокаТоваровДокумента.Характеристика     = СтрокаТоваров.ХарактеристикаНоменклатуры;
				СтрокаТоваровДокумента.Серия              = СтрокаТоваров.СерияСсылка;
				СтрокаТоваровДокумента.Упаковка           = СтрокаТоваров.ЕдиницаИзмерения;
				СтрокаТоваровДокумента.Количество     	  = КоличествоУпаковокОтсканировано * СтрокаТоваров.КоэффициентЕдиницы;
				СтрокаТоваровДокумента.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
				СтрокаТоваровДокумента.ДокументОснование  = Об.ИсходныйДокумент;
				СтрокаТоваровДокумента.Склад 			  = Об.Склад;
				
				СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Об.ИсходныйДокумент));
				
				ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(СтрокаТоваровДокумента, СтруктураДействий);
				Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
				ЗаполнитьЗначенияСвойств(СтрокаТоваровДокумента, ТекущаяСтрокаСтруктура);
				
				КоличествоУпаковокОтсканировано = 0;
				
			Иначе
				Для каждого СтрокаТоваровДокумента Из МассивСтрокТоваров Цикл	
					Если КоличествоУпаковокОтсканировано = 0 Тогда
						ДокументРасхождения.Товары.Удалить(СтрокаТоваровДокумента);
						Продолжить;
					КонецЕсли;
					
					КоличествоУпаковокМожноСкорректировать = Мин(СтрокаТоваровДокумента.КоличествоУпаковок, КоличествоУпаковокОтсканировано);					
					СтрокаТоваровДокумента.КоличествоУпаковок = КоличествоУпаковокМожноСкорректировать;
					СтрокаТоваровДокумента.Сумма = СтрокаТоваровДокумента.КоличествоУпаковок * СтрокаТоваровДокумента.Цена;
					КоличествоУпаковокОтсканировано = КоличествоУпаковокОтсканировано - КоличествоУпаковокМожноСкорректировать;                     					
					
					Если СтрокаТоваровДокумента.КоличествоУпаковок = 0 Тогда
						ДокументРасхождения.Товары.Удалить(СтрокаТоваровДокумента);		
					Иначе	
						ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(СтрокаТоваровДокумента, СтруктураДействий);
						Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
						ЗаполнитьЗначенияСвойств(СтрокаТоваровДокумента, ТекущаяСтрокаСтруктура);					
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Если на ТСД отсканировано большее количество, тогда к последней строке добавляем количество.
			Если Не КоличествоУпаковокОтсканировано = 0 Тогда
				СтрокаТоваровДокумента.КоличествоУпаковок = СтрокаТоваровДокумента.КоличествоУпаковок + КоличествоУпаковокОтсканировано;
				ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(СтрокаТоваровДокумента, СтруктураДействий);
				Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
				ЗаполнитьЗначенияСвойств(СтрокаТоваровДокумента, ТекущаяСтрокаСтруктура);				
			КонецЕсли; 		
		КонецЦикла;
		
		// 5. Удаляем кол-во в строках ТЧ "Товары", которые не отсканировали на ТСД:
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВТ.Номенклатура КАК Номенклатура,
		|	ВТ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ.СерияСсылка КАК Серия,
		|	ВТ.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ДанныеТДС
		|ИЗ
		|	&ВТ КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ2.Номенклатура КАК Номенклатура,
		|	ВТ2.Характеристика КАК ХарактеристикаНоменклатуры,
		|	ВТ2.Серия КАК Серия,
		|	ВТ2.Упаковка КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	&ВТ2 КАК ВТ2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТДС.Номенклатура КАК Номенклатура,
		|	ДанныеТДС.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДанныеТДС.Серия КАК Серия,
		|	ДанныеТДС.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ДанныеТСДСгруппированные
		|ИЗ
		|	ДанныеТДС КАК ДанныеТДС
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеТДС.Номенклатура,
		|	ДанныеТДС.ХарактеристикаНоменклатуры,
		|	ДанныеТДС.Серия,
		|	ДанныеТДС.ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.Номенклатура КАК Номенклатура,
		|	ДанныеДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДанныеДокумента.Серия КАК Серия,
		|	ДанныеДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ДанныеДокументаСгруппированные
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокумента.Номенклатура,
		|	ДанныеДокумента.ХарактеристикаНоменклатуры,
		|	ДанныеДокумента.Серия,
		|	ДанныеДокумента.ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокументаСгруппированные.Номенклатура КАК Номенклатура,
		|	ДанныеДокументаСгруппированные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДанныеДокументаСгруппированные.Серия КАК Серия,
		|	ДанныеДокументаСгруппированные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ДанныеТСДСгруппированные.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НеобходимоУдалить
		|ПОМЕСТИТЬ Итоговая
		|ИЗ
		|	ДанныеДокументаСгруппированные КАК ДанныеДокументаСгруппированные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТСДСгруппированные КАК ДанныеТСДСгруппированные
		|		ПО ДанныеДокументаСгруппированные.Номенклатура = ДанныеТСДСгруппированные.Номенклатура
		|			И ДанныеДокументаСгруппированные.ХарактеристикаНоменклатуры = ДанныеТСДСгруппированные.ХарактеристикаНоменклатуры
		|			И ДанныеДокументаСгруппированные.Серия = ДанныеТСДСгруппированные.Серия
		|			И ДанныеДокументаСгруппированные.ЕдиницаИзмерения = ДанныеТСДСгруппированные.ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Итоговая.Номенклатура КАК Номенклатура,
		|	Итоговая.ХарактеристикаНоменклатуры КАК Характеристика,
		|	Итоговая.Серия КАК Серия, 
		|	Итоговая.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Итоговая.НеобходимоУдалить КАК НеобходимоУдалить
		|ИЗ
		|	Итоговая КАК Итоговая
		|ГДЕ
		|	Итоговая.НеобходимоУдалить = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
		Запрос.УстановитьПараметр("ВТ" , ДанныеСТСД);
		Запрос.УстановитьПараметр("ВТ2", ДокументРасхождения.Товары.Выгрузить());
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтруктураПоиска.Вставить("Номенклатура"  , Выборка.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
				СтруктураПоиска.Вставить("Серия"         , Выборка.Серия);
				СтруктураПоиска.Вставить("Упаковка"      , Выборка.ЕдиницаИзмерения);
				МассивСтрокТаблицыТоваров = ДокументРасхождения.Товары.НайтиСтроки(СтруктураПоиска);
				
				Для каждого СтрокаМассива Из МассивСтрокТаблицыТоваров Цикл 
					// БЫЛО:
					//ДокументРасхождения.Товары.Удалить(СтрокаМассива);
					
					// СТАЛО:
					СтрокаМассива.Количество         = 0;
					СтрокаМассива.КоличествоУпаковок = 0;
					СтрокаМассива.Сумма     = 0;
					СтрокаМассива.СуммаНДС  = 0;
					СтрокаМассива.СуммаСНДС = 0;
				КонецЦикла;	
			КонецЦикла;	
		КонецЕсли; 
		
	Иначе
    	ТоварыДокументаРасхождения = ДокументРасхождения.Товары;
		
		Для каждого СтрокаТовара Из ТоварыДокументаРасхождения Цикл
			СтрокаТовара.КоличествоУпаковок = 0;		
		КонецЦикла;
	КонецЕсли;

	//6. Произведем заполнение расхождений и высчитаем сумму документа.
	Модуль_ОбщегоНазначенияУТ = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначенияУТ");
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	
	Попытка
		Модуль_ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ДокументРасхождения);
	Исключение
		Модуль_НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ДокументРасхождения);
	КонецПопытки;
	
	Попытка
		Если ДокументРасхождения.Товары.Количество() = 0 Тогда
			Возврат Документы.АктОРасхожденияхПослеПриемки.ПустаяСсылка();
		Иначе	
			Возврат ДокументРасхождения;
		КонецЕсли;	
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Документы.АктОРасхожденияхПослеПриемки.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции
Функция ЗаполнитьКорректировкуРеализации(Об, ДокументКорректировки)
	
	Если Об.СобранныеДанныеПодбор.Количество() = 0 Тогда
		Возврат Документы.КорректировкаРеализации.ПустаяСсылка();
	КонецЕсли;	
	
	Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
	
	//1. Заполняем документ на основании реализации:
	ДокументКорректировки.Заполнить(Об.ИсходныйДокумент);
	
	//2. Берем данные, которые отсканировали на ТСД:
	ДанныеСТСД = Об.СобранныеДанныеПодбор.Выгрузить();
	ДанныеСТСД.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияСсылка, 
	|КоэффициентЕдиницы", "Количество");
	
	//3. Указываем настройки для пересчета СуммыНДС, СуммыСНДС, КоличествоЕдиниц:
	
	СтруктураПоиска = Новый Структура;
	СтруктураДействий = Новый Структура;
	Модуль_ОбработкаТабличнойЧастиКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиКлиентСервер");
	Попытка
		СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументКорректировки);
	Исключение
		СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ДокументКорректировки);
	КонецПопытки; 	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);	
	
	//4. Обходим данные с ТСД и меняем количество в строках ТЧ "Товары":
	Для каждого СтрокаТоваров Из ДанныеСТСД Цикл
		
		Если Не СтрокаТоваров.Количество = 0 Тогда		
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТоваров.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТоваров.ХарактеристикаНоменклатуры);
			СтруктураПоиска.Вставить("Серия", СтрокаТоваров.СерияСсылка);
			
			МассивСтрокТоваров = ДокументКорректировки.Товары.НайтиСтроки(СтруктураПоиска);
			КоличествоСтрокМассива = МассивСтрокТоваров.Количество();
			КоличествоУпаковокОтсканировано = СтрокаТоваров.Количество;
			
			Если Не КоличествоСтрокМассива = 0 Тогда			
				Для каждого СтрокаТоваровДокумента Из МассивСтрокТоваров Цикл	
					Если КоличествоУпаковокОтсканировано = 0 Тогда
						ДокументКорректировки.Товары.Удалить(СтрокаТоваровДокумента);
						Продолжить;
					КонецЕсли;
					КоличествоУпаковокМожноСкорректировать = Мин(СтрокаТоваровДокумента.КоличествоУпаковок, КоличествоУпаковокОтсканировано);					
					СтрокаТоваровДокумента.КоличествоУпаковок = КоличествоУпаковокМожноСкорректировать;
					СтрокаТоваровДокумента.Сумма = СтрокаТоваровДокумента.КоличествоУпаковок * СтрокаТоваровДокумента.Цена;
					КоличествоУпаковокОтсканировано = КоличествоУпаковокОтсканировано - КоличествоУпаковокМожноСкорректировать;                     					
					Если СтрокаТоваровДокумента.КоличествоУпаковок = 0 Тогда
						ДокументКорректировки.Товары.Удалить(СтрокаТоваровДокумента);		
					Иначе	
						ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(СтрокаТоваровДокумента, СтруктураДействий);
						Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
						ЗаполнитьЗначенияСвойств(СтрокаТоваровДокумента, ТекущаяСтрокаСтруктура);					
					КонецЕсли;
					
				КонецЦикла;
				//если на ТСД отсканировано большее количество, тогда к последней строке добавляем количество.
				Если Не КоличествоУпаковокОтсканировано = 0 Тогда
					СтрокаТоваровДокумента.КоличествоУпаковок = СтрокаТоваровДокумента.КоличествоУпаковок + КоличествоУпаковокОтсканировано;
					ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(СтрокаТоваровДокумента, СтруктураДействий);
					Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
					ЗаполнитьЗначенияСвойств(СтрокаТоваровДокумента, ТекущаяСтрокаСтруктура);				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	//5. Удаляем строки в ТЧ "Товары", которые не отсканировали на ТСД:
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ.СерияСсылка КАК Серия
	|ПОМЕСТИТЬ ДанныеТДС
	|ИЗ
	|	&ВТ КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ2.Номенклатура КАК Номенклатура,
	|	ВТ2.Характеристика КАК ХарактеристикаНоменклатуры,
	|	ВТ2.Серия КАК Серия
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ВТ2 КАК ВТ2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТДС.Номенклатура КАК Номенклатура,
	|	ДанныеТДС.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДанныеТДС.Серия КАК Серия
	|ПОМЕСТИТЬ ДанныеТСДСгруппированные
	|ИЗ
	|	ДанныеТДС КАК ДанныеТДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТДС.Номенклатура,
	|	ДанныеТДС.ХарактеристикаНоменклатуры,
	|	ДанныеТДС.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДанныеДокумента.Серия КАК Серия
	|ПОМЕСТИТЬ ДанныеДокументаСгруппированные
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.ХарактеристикаНоменклатуры,
	|	ДанныеДокумента.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументаСгруппированные.Номенклатура КАК Номенклатура,
	|	ДанныеДокументаСгруппированные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДанныеДокументаСгруппированные.Серия КАК Серия,
	|	ЕСТЬNULL(ДанныеТСДСгруппированные.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НеобходимоУдалить
	|ПОМЕСТИТЬ Итоговая
	|ИЗ
	|	ДанныеДокументаСгруппированные КАК ДанныеДокументаСгруппированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТСДСгруппированные КАК ДанныеТСДСгруппированные
	|		ПО ДанныеДокументаСгруппированные.Номенклатура = ДанныеТСДСгруппированные.Номенклатура
	|			И ДанныеДокументаСгруппированные.ХарактеристикаНоменклатуры = ДанныеТСДСгруппированные.ХарактеристикаНоменклатуры
	|			И ДанныеДокументаСгруппированные.Серия = ДанныеТСДСгруппированные.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итоговая.Номенклатура КАК Номенклатура,
	|	Итоговая.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Итоговая.Серия КАК Серия,
	|	Итоговая.НеобходимоУдалить КАК НеобходимоУдалить
	|ИЗ
	|	Итоговая КАК Итоговая
	|ГДЕ
	|	Итоговая.НеобходимоУдалить = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ВТ", ДанныеСТСД);
	Запрос.УстановитьПараметр("ВТ2", ДокументКорректировки.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
			СтруктураПоиска.Вставить("Серия", Выборка.Серия);
			МассивСтрокТаблицыТоваров = ДокументКорректировки.Товары.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаМассива Из МассивСтрокТаблицыТоваров Цикл
				ДокументКорректировки.Товары.Удалить(СтрокаМассива);	
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
	
	//6. Произведем заполнение расхождений и высчитаем сумму документа.
	Модуль_ОбщегоНазначенияУТ = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначенияУТ");
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	
	Попытка
		Модуль_ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ДокументКорректировки); 
	Исключение 
		Модуль_НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ДокументКорректировки, РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	Попытка
		Документы.КорректировкаРеализации.ЗаполнитьРасхождения(ДокументКорректировки);
	Исключение
		ДокументКорректировки.ЗаполнитьРасхождения();
	КонецПопытки;
	
	ДокументКорректировки.СуммаДокумента = ДокументКорректировки.Товары.Итог("СуммаСНДС");
	
	Для каждого СтрокаРасхождений Из ДокументКорректировки.Расхождения Цикл
		
		Если СтрокаРасхождений.Количество < 0 Тогда
			СтрокаРасхождений.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУвеличитьСкладскиеОстатки;
		Иначе
			СтрокаРасхождений.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУменьшитьСкладскиеОстатки;
		КонецЕсли;  	
		
	КонецЦикла;
	
	Попытка
		Если ДокументКорректировки.Товары.Количество() = 0 Тогда
			Возврат Документы.КорректировкаРеализации.ПустаяСсылка();
		Иначе	
			Возврат ДокументКорректировки;
		КонецЕсли;	
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Документы.КорректировкаРеализации.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

Процедура ПерезаполнениеТабЧастейРасхОрдераПоОтбору(обРасходныйОрдер, обОтбор, Об, ТабЧасть = "ОтгружаемыеТовары")
	
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	
	Если ТабЧасть = "ОтгружаемыеТовары" Тогда
		Склад = обРасходныйОрдер.Склад;		
		обРасходныйОрдер.ОтгружаемыеТовары.Очистить();
		
		Для каждого СтрокаОтбора Из обОтбор.ТоварыОтбор Цикл
			НоваяСтрокаОрдера = обРасходныйОрдер.ОтгружаемыеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОрдера, СтрокаОтбора);
			НоваяСтрокаОрдера.ЭтоУпаковочныйЛист = Ложь;
			НоваяСтрокаОрдера.Количество = СтрокаОтбора.КоличествоОтобрано;
			НоваяСтрокаОрдера.КоличествоУпаковок = СтрокаОтбора.КоличествоУпаковокОтобрано;
			
			Если (обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Или обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке) Тогда
				НоваяСтрокаОрдера.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			Иначе
				НоваяСтрокаОрдера.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
			КонецЕсли;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(обРасходныйОрдер, Документы.РасходныйОрдерНаТовары));
			
			Действия = Новый Структура;
			Действия.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", Склад, ПараметрыУказанияСерий.ОтгружаемыеТовары));			
			
			Если Не ЗначениеЗаполнено(СтрокаОтбора.Серия) Тогда
				ВидНоменклатуры = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОтбора.Номенклатура, "ВидНоменклатуры");
				
				Если ИспользуетсяСправочноеУказаниеСерий(Склад, ВидНоменклатуры) Тогда															
					ПоискСтрок = Об.СобранныеДанныеПодбор.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЯчейкаСсылка", СтрокаОтбора.Номенклатура, СтрокаОтбора.Характеристика, СтрокаОтбора.Ячейка));
					
					Если ПоискСтрок.Количество() > 0 Тогда
						НоваяСтрокаОрдера.Серия = ПоискСтрок[0].СерияСсылка;	
					КонецЕсли; 							
				КонецЕсли;
			Иначе
				НоваяСтрокаОрдера.Серия = СтрокаОтбора.Серия;	
			КонецЕсли;
			
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаОрдера, Действия, Неопределено);		  
		КонецЦикла;
		
	Иначе
		ТЗПоРаспоряжениям = обРасходныйОрдер.ТоварыПоРаспоряжениям.Выгрузить();
		Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(обРасходныйОрдер, Истина);
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(обРасходныйОрдер, Документы.РасходныйОрдерНаТовары));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(обРасходныйОрдер, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнениеТабЧастиРООтгружаемыеТоварыУпакЛистами(обРасходныйОрдер, Об, Шаблон) Экспорт
	
	ТЗОтгружаемые = обРасходныйОрдер.ОтгружаемыеТовары.Выгрузить();
	ТЗОтгружаемые.Сортировать("Номенклатура,Характеристика,Серия,Количество");
	
	обРасходныйОрдер.ОтгружаемыеТовары.Очистить();	
	
	// определим типовые упак. листы
	ТЧПодбор = Об.СобранныеДанныеПодбор.Выгрузить();
	ТЧПодбор.Колонки.Добавить("УпаковочныйЛистРодитель", Новый ОписаниеТипов("ДокументСсылка.УпаковочныйЛист"));
	Для каждого СтрокаПодбора Из ТЧПодбор Цикл
		НомерУпакЛиста = СокрЛП(СтрокаПодбора.УпаковочныйЛист);
		Если СтрНачинаетсяС(НомерУпакЛиста, "UPL") Тогда 
			НомерУпакЛиста = Прав(НомерУпакЛиста, СтрДлина(НомерУпакЛиста) - 3);  
		КонецЕсли;	
		ДокУпакЛиста   = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоНомеру(НомерУпакЛиста);
		
		Если Не ЗначениеЗаполнено(ДокУпакЛиста) Тогда Продолжить; КонецЕсли;
		СтрокаПодбора.УпаковочныйЛистРодитель = ДокУпакЛиста.ТиповойУпаковочныйЛист;
	КонецЦикла;
	
	СтрокаСверткиПодбора = "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,СерияСсылка,УпаковочныйЛистРодитель";
	ТЧПодбор.Свернуть(СтрокаСверткиПодбора, "Количество");
	ТЧПодбор.Сортировать("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,Количество");
	
	
	// запись упак листов - уникальные записи
	МассивУпакЛистов = обРасходныйОрдер.ОтгружаемыеТовары.Выгрузить(, "УпаковочныйЛистРодитель");
	МассивУпакЛистов.Свернуть("УпаковочныйЛистРодитель");
	
	МассивПеренесенныхВДокументУпакЛистов = Новый Массив;

	// ОтгружаемыеТовары
	Для каждого СтрокаОтгружаемые Из ТЗОтгружаемые Цикл		
		// если потребуется дробить строку
		КоэффПереводаЕдиниц = Окр(СтрокаОтгружаемые.Количество / ?(СтрокаОтгружаемые.КоличествоУпаковок = 0, 1, СтрокаОтгружаемые.КоличествоУпаковок), 5, 1);
		
		ПараметрыПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,СерияСсылка",
		СтрокаОтгружаемые.Номенклатура, СтрокаОтгружаемые.Характеристика, СтрокаОтгружаемые.Упаковка, СтрокаОтгружаемые.Серия);
		
		НайдСтроки = ТЧПодбор.НайтиСтроки(ПараметрыПоиска);
		
		НужноеКолвоУп = СтрокаОтгружаемые.КоличествоУпаковок;
		НужноеКолво   = СтрокаОтгружаемые.Количество;
		Для каждого СтрПоиска Из НайдСтроки Цикл
			Если НужноеКолвоУп <= 0 Тогда Прервать; КонецЕсли;
			Если СтрПоиска.Количество <= 0 Тогда Продолжить; КонецЕсли;
			
			//добавляем строку с упак. листом:
			
			Если ЗначениеЗаполнено(СтрПоиска.УпаковочныйЛистРодитель) Тогда
				
				Если МассивПеренесенныхВДокументУпакЛистов.Найти(СтрПоиска.УпаковочныйЛистРодитель) = Неопределено Тогда
					
					МассивПеренесенныхВДокументУпакЛистов.Добавить(СтрПоиска.УпаковочныйЛистРодитель);
					
					НоваяСтрокаУп = обРасходныйОрдер.ОтгружаемыеТовары.Добавить();
					НоваяСтрокаУп.УпаковочныйЛист    = СтрПоиска.УпаковочныйЛистРодитель;
					НоваяСтрокаУп.ЭтоУпаковочныйЛист = Истина;
					Если (обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Или обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке) Тогда
						НоваяСтрокаУп.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
					Иначе
						НоваяСтрокаУп.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
					КонецЕсли;	
					НоваяСтрокаУп.Количество         = 1;
					НоваяСтрокаУп.КоличествоУпаковок = 1;
	
				КонецЕсли;	
				
			КонецЕсли;	
			
			//фильтр по маркир. товарам:
					
			Если Не ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаОтгружаемые.Номенклатура) = 0 Тогда
	           	Продолжить;
            КонецЕсли;

			НоваяСтрокаОрдера = обРасходныйОрдер.ОтгружаемыеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОрдера, СтрокаОтгружаемые);
			НоваяСтрокаОрдера.ЭтоУпаковочныйЛист      = Ложь;					
			НоваяСтрокаОрдера.УпаковочныйЛистРодитель = СтрПоиска.УпаковочныйЛистРодитель;
			
			Если НужноеКолвоУп <= СтрПоиска.Количество Тогда
				НоваяСтрокаОрдера.Количество         = НужноеКолво;
				НоваяСтрокаОрдера.КоличествоУпаковок = НужноеКолвоУп;
				
				СтрПоиска.Количество = СтрПоиска.Количество - НужноеКолвоУп;
				
			ИначеЕсли НужноеКолвоУп > СтрПоиска.Количество Тогда
				НоваяСтрокаОрдера.Количество         = СтрПоиска.Количество * КоэффПереводаЕдиниц;
				НоваяСтрокаОрдера.КоличествоУпаковок = СтрПоиска.Количество;
				
				СтрПоиска.Количество = 0;				
			КонецЕсли;
			
			НужноеКолвоУп = НужноеКолвоУп - НоваяСтрокаОрдера.КоличествоУпаковок;
			НужноеКолво   = НужноеКолво - НоваяСтрокаОрдера.Количество;
		КонецЦикла;		
	КонецЦикла;	
		
КонецПроцедуры 

Процедура ПерезаполнениеТабЧастейРОсВыделениемНеподобранныхВНовыйРО(Док, Об, Шаблон)
	// доработка для КСК
	
	обРасходныйОрдер      = Об.ИсходныйДокумент.ПолучитьОбъект();
	обПеремещение         = Док;
	Склад                 = обРасходныйОрдер.Склад;
	ДействиеОтгрузить     = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	ДействиеОтобрать      = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать ;
	ДействиеНЕОтгрузить   = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;
	
	УпакЛистыВПеремещении = (Не обПеремещение.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("УпаковочныйЛист") = Неопределено);
	
	ТЗПоРаспоряжениям = обРасходныйОрдер.ТоварыПоРаспоряжениям.Выгрузить();
	ТЗЗаказыНаПеремещение = обРасходныйОрдер.ТоварыПоРаспоряжениям.Выгрузить();
	ТЗЗаказыНаПеремещение.Свернуть("Номенклатура,Характеристика,Назначение,Серия,Распоряжение", "Количество");
	
	ТЗОтгружаемые = обРасходныйОрдер.ОтгружаемыеТовары.Выгрузить(Новый Структура("ЭтоУпаковочныйЛист", Ложь));
	
	// перезаполнение тч ТоварыПоРаспоряжениям
	ПерезаполнениеТабЧастиРОТоварыПоРаспоряжениям(обРасходныйОрдер, Об);
	ТЗПоРаспоряжениямНов = обРасходныйОрдер.ТоварыПоРаспоряжениям.Выгрузить();
	
	обРасходныйОрдер.ОтгружаемыеТовары.Очистить();
	обПеремещение.Товары.Очистить();
	
	МассивУпакЛистов = Новый Массив();
	
	СтрокаСверткиПодбора = "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения";
	Если Шаблон.ПодборУпаковочнымиЛистами Тогда
		СтрокаСверткиПодбора = "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,УпаковочныйЛист";	
	КонецЕсли;
	
	ТЧПодбор = Об.СобранныеДанныеПодбор.Выгрузить();
	ТЧПодбор.Свернуть(СтрокаСверткиПодбора, "Количество");
	
	Для каждого СтрокаПодбора Из ТЧПодбор Цикл
		// заполнение упаковочных листов
		УпаковочныйЛистРодитель = Неопределено;
		
		Если Шаблон.ПодборУпаковочнымиЛистами Тогда
			НомерУпакЛиста = СокрЛП(СтрокаПодбора.УпаковочныйЛист);
			Если СтрДлина(НомерУпакЛиста) > 9 Тогда
				НомерУпакЛиста = Прав(НомерУпакЛиста, 9);
			КонецЕсли; 
			
			Если Шаблон.ИспользоватьТиповыеУпаковочныеЛисты Тогда
				УпаковочныйЛистРодитель   = Документы.УпаковочныйЛист.НайтиПоРеквизиту("Код", НомерУпакЛиста);
			Иначе
				ДокУпакЛиста   = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоНомеру(НомерУпакЛиста);
				Если ЗначениеЗаполнено(ДокУпакЛиста) Тогда
					УпаковочныйЛистРодитель = ДокУпакЛиста.ТиповойУпаковочныйЛист;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(УпаковочныйЛистРодитель) И МассивУпакЛистов.Найти(УпаковочныйЛистРодитель) = Неопределено Тогда
				МассивУпакЛистов.Добавить(УпаковочныйЛистРодитель);
			КонецЕсли;
		КонецЕсли;	
		
		// РАСХОДНЫЙ ОРДЕР НА ТОВАРЫ
		ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаПодбора.Номенклатура, СтрокаПодбора.ХарактеристикаНоменклатуры);
		Если Шаблон.ПодборУпаковочнымиЛистами Тогда
			ПараметрыПоиска.Вставить("УпаковочныйЛистРодитель", УпаковочныйЛистРодитель);
		КонецЕсли;
		НайденыеСтроки = ТЗОтгружаемые.НайтиСтроки(ПараметрыПоиска);
		
		// перевод в базовые ед измерения
		Ед = СтрокаПодбора.ЕдиницаИзмерения;
		Если Не ЗначениеЗаполнено(Ед) Тогда
			КоличествоВБазовыхЕд = СтрокаПодбора.Количество;
		Иначе
			ЕдБазовая = СтрокаПодбора.Номенклатура.ЕдиницаИзмерения;
			Если Ед = ЕдБазовая Тогда
				КоличествоВБазовыхЕд = СтрокаПодбора.Количество;
			Иначе
				КоличествоВБазовыхЕд = Окр(СтрокаПодбора.Количество * ?(Ед.Знаменатель = 0, 1, Ед.Числитель / Ед.Знаменатель), 3, 1);
			КонецЕсли;
		КонецЕсли;
		КоличествоПодобраноУп = СтрокаПодбора.Количество;
		КтОбратногоПеревода = КоличествоПодобраноУп / КоличествоВБазовыхЕд;
		
		УпаковкаПодбора = ?(ЗначениеЗаполнено(СтрокаПодбора.ЕдиницаИзмерения), СтрокаПодбора.ЕдиницаИзмерения, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		
		// ПЕРЕМЕЩЕНИЕ ТОВАРОВ --------------------------((
		ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика", 
		СтрокаПодбора.Номенклатура,	СтрокаПодбора.ХарактеристикаНоменклатуры);
		
		найдСтроки = ТЗЗаказыНаПеремещение.НайтиСтроки(ПараметрыОтбора);
		КолвоПереместить = КоличествоВБазовыхЕд;
		Для каждого стрПоиск Из найдСтроки Цикл
			Если КолвоПереместить <= 0 Тогда Прервать; КонецЕсли;
			Если стрПоиск.Количество = 0 Тогда Продолжить; КонецЕсли;
			
			ЗаказНаПеремещение = стрПоиск.Распоряжение;
			
			НоваяСтрокаПер = обПеремещение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПер, СтрокаПодбора);
			НоваяСтрокаПер.Характеристика     = СтрокаПодбора.ХарактеристикаНоменклатуры;
			НоваяСтрокаПер.Упаковка           = УпаковкаПодбора;
			НоваяСтрокаПер.ЗаказНаПеремещение = ЗаказНаПеремещение;
			НоваяСтрокаПер.Назначение         = стрПоиск.Назначение;
			
			Если УпакЛистыВПеремещении Тогда
				Попытка
					НоваяСтрокаПер.ЭтоУпаковочныйЛист      = Ложь;
					НоваяСтрокаПер.УпаковочныйЛистРодитель = УпаковочныйЛистРодитель;
				Исключение КонецПопытки;
			КонецЕсли;
			
			Если КолвоПереместить <= стрПоиск.Количество Тогда
				НоваяСтрокаПер.КоличествоУпаковок = КтОбратногоПеревода * КолвоПереместить;
				НоваяСтрокаПер.Количество         = КолвоПереместить;
				
			ИначеЕсли КолвоПереместить > стрПоиск.Количество Тогда
				НоваяСтрокаПер.КоличествоУпаковок = КтОбратногоПеревода * стрПоиск.Количество;
				НоваяСтрокаПер.Количество         = стрПоиск.Количество;
			КонецЕсли;
			
			стрПоиск.Количество = стрПоиск.Количество - НоваяСтрокаПер.Количество;
			КолвоПереместить = КолвоПереместить - НоваяСтрокаПер.Количество;
			
			Если ТипЗнч(ЗаказНаПеремещение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,Серия,Назначение,Отменено",
				НоваяСтрокаПер.Номенклатура,НоваяСтрокаПер.Характеристика,НоваяСтрокаПер.Серия,НоваяСтрокаПер.Назначение,Ложь);
				найдСтрЗак = ЗаказНаПеремещение.Товары.НайтиСтроки(ПараметрыОтбора);
				Если найдСтрЗак.Количество() Тогда
					НоваяСтрокаПер.КодСтроки = найдСтрЗак[0].КодСтроки;
				КонецЕсли;
				
				// флаг ПеремещениеПоЗаказам
				Если Не обПеремещение.ПеремещениеПоЗаказам Тогда
					обПеремещение.ПеремещениеПоЗаказам = Истина; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// ПЕРЕМЕЩЕНИЕ ТОВАРОВ ----------------------------))
		
		// РО - тч ОтгружаемыеТовары
		НоваяСтрокаОрдера = обРасходныйОрдер.ОтгружаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОрдера, СтрокаПодбора);
		НоваяСтрокаОрдера.Характеристика          = СтрокаПодбора.ХарактеристикаНоменклатуры;
		НоваяСтрокаОрдера.Упаковка                = УпаковкаПодбора;
		НоваяСтрокаОрдера.Количество              = КоличествоВБазовыхЕд;
		НоваяСтрокаОрдера.КоличествоУпаковок      = КоличествоПодобраноУп;
		НоваяСтрокаОрдера.ЭтоУпаковочныйЛист      = Ложь;					
		НоваяСтрокаОрдера.Действие                = ДействиеОтгрузить;
		Если (обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Или обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке) Тогда
			НоваяСтрокаОрдера.Действие = ДействиеОтгрузить;
		Иначе
			НоваяСтрокаОрдера.Действие = ДействиеОтобрать;
		КонецЕсли;	
		НоваяСтрокаОрдера.УпаковочныйЛистРодитель = УпаковочныйЛистРодитель;
		
		// заполнение тч
		МассивУдСтрок = Новый Массив;
		Для каждого стр Из НайденыеСтроки Цикл
			Если КоличествоВБазовыхЕд <= 0 Тогда Прервать; КонецЕсли;
			
			Если КоличествоВБазовыхЕд >= стр.Количество Тогда					
				МассивУдСтрок.Добавить(стр);
				КоличествоВБазовыхЕд = КоличествоВБазовыхЕд - стр.Количество;
			Иначе // подобрано меньше
				КтУпаковки = стр.КоличествоУпаковок / стр.Количество;					
				стр.КоличествоУпаковок = стр.КоличествоУпаковок - Окр(КтУпаковки * КоличествоВБазовыхЕд, 3, 1); 
				стр.Количество         = стр.Количество - КоличествоВБазовыхЕд;
			КонецЕсли;
		КонецЦикла;
		
		// удалим из ТЗОтгружаемые подобраные строки
		Для каждого стрУд Из МассивУдСтрок Цикл
			ТЗОтгружаемые.Удалить(стрУд);
		КонецЦикла;	
	КонецЦикла;
	
	// заполнение заказа на перемещение, если он один
	ЗаказыНаПеремещенияВТабЧасти = обПеремещение.Товары.Выгрузить(,"ЗаказНаПеремещение");
	ЗаказыНаПеремещенияВТабЧасти.Свернуть("ЗаказНаПеремещение");
	
	Если ЗаказыНаПеремещенияВТабЧасти.Количество() = 1 Тогда
		обПеремещение.ЗаказНаПеремещение = ЗаказыНаПеремещенияВТабЧасти[0].ЗаказНаПеремещение;
	КонецЕсли;
	
	// удалим из ТЗПоРаспоряжениям то, что в этом РО для переноса остатка в новый РО		
	ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,Назначение,Серия,СтатусУказанияСерий,Распоряжение");			
	Для каждого стр Из ТЗПоРаспоряжениямНов Цикл
		МассивУдСтрокТЧРаспряжения = Новый Массив;
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, стр);
		
		НайдСтроки = ТЗПоРаспоряжениям.НайтиСтроки(Параметрыотбора);
		НужноеКолво = стр.Количество;
		Для каждого нстр Из НайдСтроки Цикл
			Если НужноеКолво <= 0 Тогда Прервать; КонецЕсли;
			
			Если НужноеКолво >= нстр.Количество Тогда
				НужноеКолво = НужноеКолво - нстр.Количество;
				МассивУдСтрокТЧРаспряжения.Добавить(нстр);
			Иначе					
				нстр.Количество = нстр.Количество - НужноеКолво;
				НужноеКолво = НужноеКолво - НужноеКолво;
			КонецЕсли;	
		КонецЦикла;
		
		// удаление
		Для каждого удСтр Из МассивУдСтрокТЧРаспряжения Цикл 
			ТЗПоРаспоряжениям.Удалить(удСтр);
		КонецЦикла;
	КонецЦикла;
	
	// перенос остатка к подбору в новый РО
	обРасходныйОрдерНов = ПеренестиОстаткиПодбораВНовыйРО(обРасходныйОрдер, ТЗПоРаспоряжениям, ТЗОтгружаемые);
	обКорректировкаРО   = СоздатьКорректировкуПоОрдеру(обРасходныйОрдер, обРасходныйОрдерНов, ТЗОтгружаемые);
	
	// запись упак листов - уникальные записи
	Для каждого УпакЛист Из МассивУпакЛистов Цикл
		Если Шаблон.ПодборУпаковочнымиЛистами Тогда
			НоваяСтрокаУпР = обРасходныйОрдер.ОтгружаемыеТовары.Добавить();
			НоваяСтрокаУпР.УпаковочныйЛист    = УпакЛист;
			НоваяСтрокаУпР.ЭтоУпаковочныйЛист = Истина;
			Если (обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Или обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке) Тогда
				НоваяСтрокаУпР.Действие = ДействиеОтгрузить;
			Иначе
				НоваяСтрокаУпР.Действие = ДействиеОтобрать;
			КонецЕсли;
			НоваяСтрокаУпР.Количество         = 1;
			НоваяСтрокаУпР.КоличествоУпаковок = 1;
		КонецЕсли;
		
		// ТЧ документа перемещения товаров должна быть доработана
		Если УпакЛистыВПеремещении Тогда
			Попытка
				НоваяСтрокаУпП = обПеремещение.Товары.Добавить();
				НоваяСтрокаУпП.УпаковочныйЛист    = УпакЛист;
				НоваяСтрокаУпП.ЭтоУпаковочныйЛист = Истина;
				НоваяСтрокаУпП.Количество         = 1;
				НоваяСтрокаУпП.КоличествоУпаковок = 1;
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// организация
	Если Не ЗначениеЗаполнено(обПеремещение.Организация) Тогда
		Попытка
			обПеремещение.Организация = ТЗПоРаспоряжениямНов[0].Распоряжение.Организация;
		Исключение КонецПопытки;
	КонецЕсли;
	
	// статус
	Если ЗначениеЗаполнено(Шаблон.СтатусРасходногоОрдераПослеЗагрузкиОтбора) Тогда
		обРасходныйОрдер.Статус = Шаблон.СтатусРасходногоОрдераПослеЗагрузкиОтбора;
	Иначе	
		обРасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	КонецЕсли;		
	
	// план-факт
	Если ТЗОтгружаемые.Количество() = 0 Тогда // если нет расхождений
		Попытка 
			Об.ПланРавноФакт = ПланРавноФакт(Об, обРасходныйОрдер.Ссылка);
		Исключение КонецПопытки;
	КонецЕсли;
	
	НетОшибок = Истина;
	НачатьТранзакцию();		
	
	// 1.
	Попытка
		Если Не обКорректировкаРО = Неопределено Тогда
			обРасходныйОрдер.ДополнительныеСвойства.Вставить("ОтключитьКонтрольПриПроведении");
		КонецЕсли;
		обРасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);			
	Исключение
		Сообщить(ОписаниеОшибки());
		НетОшибок = Ложь;
	КонецПопытки; 		
	
	// 2.
	Если Не обРасходныйОрдерНов = Неопределено Тогда
		Попытка
			обРасходныйОрдерНов.ДополнительныеСвойства.Вставить("ОтключитьКонтрольПриПроведении");
			обРасходныйОрдерНов.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Сообщить(ОписаниеОшибки());
			НетОшибок = Ложь;
		КонецПопытки;
	КонецЕсли;  
	
	// 3.
	Если Не обКорректировкаРО = Неопределено Тогда
		Попытка
			обКорректировкаРО.ОрдерПолучатель = обРасходныйОрдерНов.Ссылка;
			обКорректировкаРО.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный); 
		Исключение
			Сообщить(ОписаниеОшибки());
			НетОшибок = Ложь;
		КонецПопытки;
	КонецЕсли;		
	
	Если НетОшибок Тогда
		ЗафиксироватьТранзакцию();			
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	// 4.
	Попытка
		обПеремещение.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
		Сообщить(ОписаниеОшибки());
		обПеремещение.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
КонецПроцедуры
Процедура ПерезаполнениеТабЧастиРОТоварыПоРаспоряжениям(обРасходныйОрдер, Об)
	ТЗПоРаспоряжениям = обРасходныйОрдер.ТоварыПоРаспоряжениям.Выгрузить();
	обРасходныйОрдер.ТоварыПоРаспоряжениям.Очистить();
	
	ТЧПодбор = Об.СобранныеДанныеПодбор.Выгрузить();
	ТЧПодбор.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения", "Количество");
	
	Для каждого СтрокаПодбора Из ТЧПодбор Цикл
		Если СтрокаПодбора.Количество = 0 Тогда Продолжить; КонецЕсли;
		
		// перевод в базовые ед измерения
		Ед = СтрокаПодбора.ЕдиницаИзмерения;
		Если Не ЗначениеЗаполнено(Ед) Тогда
			КоличествоВБазовыхЕд = СтрокаПодбора.Количество;
		Иначе
			ЕдБазовая = СтрокаПодбора.Номенклатура.ЕдиницаИзмерения;
			Если Ед = ЕдБазовая Тогда
				КоличествоВБазовыхЕд = СтрокаПодбора.Количество;
			Иначе
				КоличествоВБазовыхЕд = Окр(СтрокаПодбора.Количество * ?(Ед.Знаменатель = 0, 1, Ед.Числитель / Ед.Знаменатель), 3, 1);
			КонецЕсли;
		КонецЕсли;
		
		// заполнение тч
		Параметрыотбора = Новый Структура("Номенклатура,Характеристика");
		Параметрыотбора.Номенклатура   = СтрокаПодбора.Номенклатура;
		Параметрыотбора.Характеристика = СтрокаПодбора.ХарактеристикаНоменклатуры; 
		
		найдСтроки = ТЗПоРаспоряжениям.НайтиСтроки(ПараметрыОтбора);
		Если найдСтроки.Количество() = 0 Тогда
			НоваяСтрокаРО = обРасходныйОрдер.ТоварыПоРаспоряжениям.Добавить();
			НоваяСтрокаРО.Номенклатура   = СтрокаПодбора.Номенклатура;
			НоваяСтрокаРО.Характеристика = СтрокаПодбора.ХарактеристикаНоменклатуры;
			НоваяСтрокаРО.Количество     = КоличествоВБазовыхЕд;
		Иначе 
			Для каждого стрРаспоряжения Из найдСтроки Цикл
				Если КоличествоВБазовыхЕд <= 0 Тогда Прервать; КонецЕсли;
				
				НоваяСтрокаРО = обРасходныйОрдер.ТоварыПоРаспоряжениям.Добавить();
				НоваяСтрокаРО.Номенклатура   = СтрокаПодбора.Номенклатура;
				НоваяСтрокаРО.Характеристика = СтрокаПодбора.ХарактеристикаНоменклатуры;
				НоваяСтрокаРО.Количество     = ?(стрРаспоряжения.Количество < КоличествоВБазовыхЕд, стрРаспоряжения.Количество, КоличествоВБазовыхЕд);
				НоваяСтрокаРО.Распоряжение   = стрРаспоряжения.Распоряжение;
				НоваяСтрокаРО.Назначение     = стрРаспоряжения.Назначение; 
				
				КоличествоВБазовыхЕд = КоличествоВБазовыхЕд - стрРаспоряжения.Количество;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция ПеренестиОстаткиПодбораВНовыйРО(обРО, ТЗПоРаспоряжениям, ТЗОтгружаемые)
	Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	
	обДок = обРО.Скопировать();
	обДок.Дата = ТекущаяДата();
	обДок.УстановитьНовыйНомер(); 
	обДок.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен;
	обДок.ТоварыПоРаспоряжениям.Очистить();
	обДок.ОтгружаемыеТовары.Очистить();
	
	МассивУпакЛистов = Новый Массив;
	
	// ОтгружаемыеТовары
	Для каждого стр Из ТЗОтгружаемые Цикл
		нстр = обДок.ОтгружаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(нстр, стр);
		нстр.Действие = Действие;
		
		// ТоварыПоРаспоряжениям
		ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,Назначение,Серия,СтатусУказанияСерий");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, стр);
		
		Если ЗначениеЗаполнено(стр.УпаковочныйЛистРодитель) И МассивУпакЛистов.Найти(стр.УпаковочныйЛистРодитель) = Неопределено Тогда
			МассивУпакЛистов.Добавить(стр.УпаковочныйЛистРодитель);
		КонецЕсли;
		
		НужноеКолво = стр.Количество;
		
		НайдСтроки = ТЗПоРаспоряжениям.НайтиСтроки(ПараметрыОтбора);
		Для каждого истр Из НайдСтроки Цикл
			Если НужноеКолво <= 0 Тогда Прервать; КонецЕсли;
			
			пстр = обДок.ТоварыПоРаспоряжениям.Добавить();
			ЗаполнитьЗначенияСвойств(пстр, истр);
			
			Если НужноеКолво >= истр.Количество Тогда
				НужноеКолво = НужноеКолво - истр.Количество;
			Иначе
				пстр.Количество = НужноеКолво;
				НужноеКолво = НужноеКолво - НужноеКолво;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// упак листы
	Для каждого УпакЛист Из МассивУпакЛистов Цикл
		НоваяСтрокаУпР = обДок.ОтгружаемыеТовары.Добавить();
		НоваяСтрокаУпР.УпаковочныйЛист    = УпакЛист;
		НоваяСтрокаУпР.ЭтоУпаковочныйЛист = Истина;
		НоваяСтрокаУпР.Действие           = Действие;
		НоваяСтрокаУпР.Количество         = 1;
		НоваяСтрокаУпР.КоличествоУпаковок = 1;
	КонецЦикла;
	
	// проверка
	Если обДок.ТоварыПоРаспоряжениям.Количество() = 0 И обДок.ОтгружаемыеТовары.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат обДок;
КонецФункции
Функция СоздатьКорректировкуПоОрдеру(СтарыйРО, НовыйРО, ТЗОтгружаемые)
	Если НовыйРО = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КорректировкаОбъект = Документы.КорректировкаПоОрдеруНаТовары.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(КорректировкаОбъект, СтарыйРО, "Склад,Помещение");
	КорректировкаОбъект.Дата = ТекущаяДатаСеанса();
	КорректировкаОбъект.Ордер = СтарыйРО.Ссылка;
	
	// тч Товары
	Для каждого стр Из ТЗОтгружаемые Цикл
		нстр = КорректировкаОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(нстр, стр);
		нстр.ВидОперации = Перечисления.ВидыОперацийКорректировокОстатковТоваров.ПеренестиВДругойОрдер;
	КонецЦикла;
	
	Возврат КорректировкаОбъект;
КонецФункции
Процедура ИзменитьДопСвойствоВДвиженияТоварыВЯчейках(Док)
	НаборТоварыВЯчейках = Док.Движения.Найти("ТоварыВЯчейках");
	
	Если НаборТоварыВЯчейках <> Неопределено И НаборТоварыВЯчейках.ДополнительныеСвойства.Свойство("РассчитыватьИзменения") Тогда
		НаборТоварыВЯчейках.ДополнительныеСвойства.РассчитыватьИзменения = Ложь;	 	
	КонецЕсли;		
КонецПроцедуры
Функция ПроверкаВсехОтборов(ДокРО, ДокОтбор = Неопределено)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ОтборРазмещениеТоваров.Ссылка), 0) КАК КолВсе,
	|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА ОтборРазмещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок) 
	|		ТОГДА 1 
	|		ИНАЧЕ 0 
	|	КОНЕЦ), 0) КАК КолВыполнены
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
	|ГДЕ
	|	ОтборРазмещениеТоваров.Распоряжение = &Распоряжение
	|	И НЕ ОтборРазмещениеТоваров.ПометкаУдаления
	|	И (НЕ ОтборРазмещениеТоваров.Ссылка = &Отбор ИЛИ &ВсеОтборы)");
	
	Запрос.УстановитьПараметр("Распоряжение", ДокРО);
	Запрос.УстановитьПараметр("Отбор"       , ДокОтбор);
	Запрос.УстановитьПараметр("ВсеОтборы"   , Не ЗначениеЗаполнено(ДокОтбор));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Если Выборка.КолВсе - Выборка.КолВыполнены = 0 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
Процедура ЗаполнитьКомментарийИсходногоДокументаЕслиНебылоРасхождений(Об)
	
	Об.ДатаЗавершения = ТекущаяДата();
	ИсходныйДокументОбъект = Об.ИсходныйДокумент.ПолучитьОбъект();
	ИсходныйДокументОбъект.Комментарий = СтрЗаменить(ИсходныйДокументОбъект.Комментарий, "По документу не было расхождений", "") + "По документу не было расхождений";
	ИсходныйДокументОбъект.Записать();
	Об.Записать();
	
КонецПроцедуры

//НЕИСПОЛЬЗУЕМЫЕ
Функция ПерезаполнитьТЧ_Распоряжения(Док, Об, ТабличнуюЧастьПриЗагрузке, ТЧ_ТоварыПоРаспоряжениям_ИсходныеДанные)
	
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	
	Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(Док, Ложь);
	ПерезаполнитьТЧ_Распоряжения_ЗаполнитьСлужебныеРеквизиты("ТоварыПоРаспоряжениям", Ложь, Док, Об, ТабличнуюЧастьПриЗагрузке, ТЧ_ТоварыПоРаспоряжениям_ИсходныеДанные);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РасходныйОрдерНаТовары));
	Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ОтгружаемыеТовары);
	Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям);
	
КонецФункции
Процедура ПерезаполнитьТЧ_Распоряжения_ЗаполнитьСлужебныеРеквизиты(ИмяТЧ, Перенумеровать = Истина, Док, Об, ТабличнуюЧастьПриЗагрузке, ТЧ_ТоварыПоРаспоряжениям_ИсходныеДанные)
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры",
	Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ЗаполнитьПризнакАртикул",
	Новый Структура("Номенклатура", "Артикул"));
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		Действия.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
		Действия.Вставить("ЗаполнитьВесУпаковки", Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
		Действия.Вставить("ЗаполнитьОбъемУпаковки", Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
		Действия.Вставить("ЗаполнитьЕдиницуИзмеренияВеса", Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
		Действия.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема", Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
		
	Иначе
		ТЧ_Распоряжения = Док.ТоварыПоРаспоряжениям.Выгрузить();
		ТЧ_Распоряжения.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
		ТЧ_Распоряжения.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
		ТЧ_Распоряжения.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
		ТЧ_Распоряжения.Колонки.Добавить("ИсходныйНомерСтроки", Новый ОписаниеТипов("Число"));
		Для каждого Строка Из ТЧ_Распоряжения Цикл
			Строка.ХарактеристикиИспользуются = Строка.Номенклатура.ИспользованиеХарактеристик;
			Строка.ТипНоменклатуры = Строка.Номенклатура.ТипНоменклатуры;
			Строка.Артикул = Строка.Номенклатура.Артикул;
			Строка.ИсходныйНомерСтроки = Строка.НомерСтроки;
			//заменять или дополнять:
			Если ТабличнуюЧастьПриЗагрузке = 2 Или ТабличнуюЧастьПриЗагрузке = 1 Или ТабличнуюЧастьПриЗагрузке = 3 Тогда
				Если ЗначениеЗаполнено(Об.ИсходныйДокумент) Тогда
					Если ТипЗнч(Об.ИсходныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						Если ЗначениеЗаполнено(Об.ИсходныйДокумент.ЗаказКлиента) Тогда 
							Строка.Распоряжение = Об.ИсходныйДокумент.ЗаказКлиента;			
						Иначе	
							Строка.Распоряжение = Об.ИсходныйДокумент;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Об.ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
						Строка.Распоряжение = Об.ИсходныйДокумент;
					ИначеЕсли ТипЗнч(Об.ИсходныйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
						Если ТЧ_ТоварыПоРаспоряжениям_ИсходныеДанные.Количество() Тогда
							Строка.Распоряжение = ТЧ_ТоварыПоРаспоряжениям_ИсходныеДанные[0].Распоряжение;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
		Модуль_НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(ТЧ_Распоряжения, Действия);
		Док.ТоварыПоРаспоряжениям.Загрузить(ТЧ_Распоряжения);
	КонецЕсли;
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьВесОбъем");
		
		Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
		Для каждого СтрокаТЧ Из Док.ОтгружаемыеТовары Цикл
			Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьТабТСДПриБазовыеЕдиницыПриЗагрузке(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерияСсылка КАК СерияСсылка,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.) КАК ЕдиницаИзмерения,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЯчейкаСсылка КАК ЯчейкаСсылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ШтрихКод КАК ШтрихКод,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛистАтрибуты КАК УпаковочныйЛистАтрибуты,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.НоваяЦена КАК НоваяЦена,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ПризнакПовторнойВыгрузки,
	|	СУММА(ЕСТЬNULL(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество * (ВЫБОР
	|				КОГДА ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель = 0
	|						ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель
	|			КОНЕЦ / ВЫБОР
	|				КОГДА ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель = 0
	|						ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель ЕСТЬ NULL
	|					ТОГДА 1
	|				ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель
	|			КОНЕЦ), 0)) КАК Количество,
	|	СУММА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.КоличествоМест) КАК КоличествоМест
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерияСсылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЯчейкаСсылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ШтрихКод,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛистАтрибуты,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.НоваяЦена,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ПризнакПовторнойВыгрузки";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Процедура ЗаполнитьТЧАкцизныеМарки(ДокументЕГАИС, ТекущаяАкцизнаяМарка, СтрокаТабличнойЧасти, ЕстьРеквизитИдентификаторСтрокиМарок, ЕстьРеквизитКлючСвязиМарок, ЕстьРеквизитКоличествоМарок, ЕстьРеквизитСправка2) 
	
	СтрокиПоискаМарок = ДокументЕГАИС.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", ТекущаяАкцизнаяМарка));
	Если СтрокиПоискаМарок.Количество() = 0 Тогда
		СтрокаМарки = ДокументЕГАИС.АкцизныеМарки.Добавить();
		СтрокаМарки.АкцизнаяМарка = ТекущаяАкцизнаяМарка;
		
		Если ЕстьРеквизитИдентификаторСтрокиМарок Тогда
			СтрокаМарки.ИдентификаторСтроки = СтрокаТабличнойЧасти.ИдентификаторСтроки;
		КонецЕсли;
		
		Если ЕстьРеквизитКлючСвязиМарок Тогда
			СтрокаМарки.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи; 
		КонецЕсли;
		
		Если ЕстьРеквизитКоличествоМарок Тогда
			СтрокаМарки.Количество = 1; 
		КонецЕсли;
		
		Если ЕстьРеквизитСправка2 Тогда
			СтрокаМарки.Справка2 = СтрокаТабличнойЧасти.Справка2; 
		КонецЕсли;		
	Иначе
		СтрокаМарки = СтрокиПоискаМарок[0];
	КонецЕсли;
	
КонецПроцедуры

