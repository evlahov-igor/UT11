&НаКлиенте
Перем ФРМ;

//переменные для импорта экспорта в файл xml шаблонов и списка ТСД
&НаСервере
Перем МетаданныеОписание Экспорт;
Перем СсылочныеТипы Экспорт;
Перем СоответствиеОбъектовМетаданныхИСсылочныхТипов;
Перем ОбработанныхКонстант Экспорт;
Перем ОбработанныхНаборовЗаписей Экспорт;
Перем мСоответствиеКолонокДвижений;
Перем ДеревоМетаданныхЗначение Экспорт;
Перем ВкладкаВызова Экспорт;
Перем СоставПолнойВыгрузки Экспорт;
Перем СоставВспомогательнойВыгрузки;
Перем ИспользующиеИтоги; 
Перем мТипРезультатЗапроса; 
Перем мТипДанныхУдаления;   
Перем мВыгруженныеОбъекты;
Перем мКоличествоСохраненныхПоследнихВыгрузок;
Перем мНаличиеВыгрузкиПодчиненныхОбъектов;
Перем ТаблицаПредопределенных;
Перем СоответствиеЗаменыСсылок;
Перем Сериализатор;

//ФОРМА
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТипАналитика = 1;
	ДатаДо = ТекущаяДата();
	ДатаС = НачалоГода(ТекущаяДата()); 
	
	УстановитьВидимостьНастройкиКаталогаЛогов();
	
	ИндикацияКнопкиОбновления();
	ЗапроситьКлючСесииПриИзменении("");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭлементОтбора = СписокТСД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Код");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение = "";
	
	// значения из константы "Настройка"
	СтруктураНастройки = ДатаМобайл_ОбщийМодуль.НастройкиПолучить();
	ИспользоватьЛогирование     = СтруктураНастройки.ИспользоватьЛогирование;
	КаталогХраненияЛогов        = СтруктураНастройки.КаталогХраненияЛогов;
	ЛогированиеОчищатьЧерезДней = СтруктураНастройки.ЛогированиеОчищатьЧерезДней;
	ЛогированиеСохранятьЗаписей = СтруктураНастройки.ЛогированиеСохранятьЗаписей;
	УстановитьВидимостьНастройкиКаталогаЛогов();	
	
	Если ДатаМобайл_ОбщийМодуль.СтарыйРежимСовместимости() Тогда
		ЭтаФорма.Элементы.ПоказыватьТолькоРасхождения.Видимость = Ложь;
	КонецЕсли;	
	
	//Сортировка по полям составного типа может приводить к потере производительности
	СписокПолейОграниченийПолей = Новый Массив;
	СписокПолейОграниченийПолей.Добавить("ИсходныйДокумент");
	СписокПолейОграниченийПолей.Добавить("НовыйДокумент");
	СписокПолейОграниченийПолей.Добавить("Клиент");
	
	СписокДокументов.УстановитьОграниченияИспользованияВПорядке(СписокПолейОграниченийПолей);
	
	Если Не (РольДоступна("ПолныеПрава") Или РольДоступна("ДатаМобайл_Администратор")) Тогда
		ЭтаФорма.Элементы.СписокТСД.ТолькоПросмотр = Истина;
		ЭтаФорма.Элементы.грШаблоны.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//ДОКУМЕНТЫ
&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокДокументов.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ЭтоПустойПоиск = Истина;
		ЕстьСтрокиВСписке = Ложь;
		
	Иначе
		ЕстьСтрокиВСписке = Истина;	
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда  
		
		Попытка            
			
			Попытка ТабДокумента.Параметры.УстановитьЗначениеПараметра("Ссылка", Неопределено); Исключение КонецПопытки;
			Попытка ТабДокумента.Параметры.УстановитьЗначениеПараметра("ДокументыТСД", Неопределено); Исключение КонецПопытки;
			
			Элементы.ТабДокумента.Обновить(); 
			
		Исключение 
		КонецПопытки;
		
		Попытка       			
			
			Попытка ТабАнализа.Параметры.УстановитьЗначениеПараметра("ДатаКонтроля", ТекущаяДата()); Исключение КонецПопытки;
			Попытка ТабАнализа.Параметры.УстановитьЗначениеПараметра("ТолькоРасхождения", Ложь); Исключение КонецПопытки;
			Попытка ТабАнализа.Параметры.УстановитьЗначениеПараметра("ИсходныеДокументы", Неопределено); Исключение КонецПопытки;
			Попытка ТабАнализа.Параметры.УстановитьЗначениеПараметра("ДокументыТСД", Неопределено); Исключение КонецПопытки;
			Попытка ТабАнализа.Параметры.УстановитьЗначениеПараметра("Документы", Неопределено); Исключение КонецПопытки;
			Попытка ТабАнализа.Параметры.УстановитьЗначениеПараметра("ИсходныйДокумент", Неопределено); Исключение КонецПопытки;
			
			Элементы.ТабАнализа.Обновить(); 
			
		Исключение 
		КонецПопытки; 
		
		Возврат;
		
	КонецЕсли;
	
	Попытка 
		
		Если ЭтоПустойПоиск И ЕстьСтрокиВСписке Тогда
			ЭтоПустойПоиск = Ложь;
		Иначе	
			ЗаменитьЗапрос(ТекущиеДанные.Ссылка, ПоказыватьТолькоРасхождения);
		КонецЕсли;	
		
	Исключение
		Сообщить("Ошибка отображения данных: " + ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		
		Если ТекущиеДанные.ДатаЗавершенияСбора = Дата(1,1,1) Тогда
			Элементы.ГруппаВидаДанных.ТекущаяСтраница = Элементы.грДанные;
		Иначе	
			Элементы.ГруппаВидаДанных.ТекущаяСтраница = Элементы.грАнализ;
		КонецЕсли;	
		
	Исключение 
	КонецПопытки; 
 
	
КонецПроцедуры

&НаСервере                                                             	
Процедура ЗаменитьЗапрос(Элемент, ПоказыватьТолькоРасхождения)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	
	РеквизитыДокументаТСД 	= Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент, "Шаблон, ДатаСоздания, ИсходныйДокумент");
	
	СписокДокументовТСД	= Элемент.СписокДокументов;
	ДатаСоздания		= РеквизитыДокументаТСД.ДатаСоздания;
	Задания				= Элемент.Задания;
	ИсходныйДокумент	= РеквизитыДокументаТСД.ИсходныйДокумент;
	Шаблон				= РеквизитыДокументаТСД.Шаблон;
	
	Попытка
		Если Шаблон.ПолучитьОбъект() = Неопределено Тогда
			Возврат;	
		КонецЕсли; 
	Исключение
		Возврат;	
	КонецПопытки;
	
	РеквизитыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокументаТСД.Шаблон,"ВидДокумента,ИмяТабличнойЧастиПодбор,ИмяТабличнойЧастиПриемка,
	|РаспределениеТоваров,ИспользоватьПодбор,ИспользоватьПриемку,ЕГАИС,ИспользоватьМаркировку,МаркировкаЗапретитьПодборНемаркируемыхТоваров,НеВыгружатьУслуги");
	
	ВидДокумента 									= РеквизитыШаблона.ВидДокумента;
	ИмяТабличнойЧастиПодбор 						= РеквизитыШаблона.ИмяТабличнойЧастиПодбор;
	ИмяТабличнойЧастиПриемка 						= РеквизитыШаблона.ИмяТабличнойЧастиПриемка;
	МножествоДокументовКакЗадание 					= РеквизитыШаблона.РаспределениеТоваров = 1;
	ИспользоватьПодбор								= РеквизитыШаблона.ИспользоватьПодбор;
	ИспользоватьПриемку								= РеквизитыШаблона.ИспользоватьПриемку;
	ГрупповойДокумент								= РеквизитыШаблона.РаспределениеТоваров = 2;
	ЕГАИС											= РеквизитыШаблона.ЕГАИС;
	ИспользоватьМаркировку							= РеквизитыШаблона.ИспользоватьМаркировку;
	МаркировкаЗапретитьПодборНемаркируемыхТоваров	= РеквизитыШаблона.МаркировкаЗапретитьПодборНемаркируемыхТоваров;
	НеВыгружатьУслуги 								= РеквизитыШаблона.НеВыгружатьУслуги;
	
	
	ТабДокумента.ТекстЗапроса = "ВЫБРАТЬ
	|	""Подбор    "" КАК Операция,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ШтрихКод,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура.Артикул КАК Артикул,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерийныйНомер,	
	|	ВЫБОР
	|		КОГДА ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЯчейкаСсылка = ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.)
	|			ТОГДА ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ячейка
	|		ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЯчейкаСсылка
	|	КОНЕЦ КАК Ячейка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Пользователь,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.НомерСтроки,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.КодТовара,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.НазваниеТовара
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Размещение"",
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ссылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ШтрихКод,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Номенклатура.Артикул,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Количество,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ЕдиницаИзмерения,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.СерийныйНомер,	
	|	ВЫБОР
	|		КОГДА ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ЯчейкаСсылка = ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.)
	|			ТОГДА ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ячейка
	|		ИНАЧЕ ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ЯчейкаСсылка
	|	КОНЕЦ КАК Ячейка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Пользователь,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.НомерСтроки,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.КодТовара,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.НазваниеТовара
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ссылка = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДатаМобайл_РегистрСведений.ИмяТаблицы = ""Select"" ТОГДА ""Подбор"" ИНАЧЕ ""Размещение"" КОНЕЦ КАК Операция,
	|	ДатаМобайл_РегистрСведений.ДокументТСД,
	|	ДатаМобайл_РегистрСведений.ШтрихКод,
	|	ДатаМобайл_РегистрСведений.Номенклатура.Артикул,
	|	ДатаМобайл_РегистрСведений.Номенклатура,
	|	ДатаМобайл_РегистрСведений.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_РегистрСведений.Количество,
	|	ДатаМобайл_РегистрСведений.ЕдиницаИзмерения,
	|	ДатаМобайл_РегистрСведений.СерийныйНомер,	
	|	ВЫБОР
	|		КОГДА ДатаМобайл_РегистрСведений.ЯчейкаСсылка = ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.)
	|			ТОГДА ДатаМобайл_РегистрСведений.Ячейка
	|		ИНАЧЕ ДатаМобайл_РегистрСведений.ЯчейкаСсылка
	|	КОНЕЦ КАК Ячейка,
	|	ДатаМобайл_РегистрСведений.УпаковочныйЛист,
	|	ДатаМобайл_РегистрСведений.Пользователь,
	|	ДатаМобайл_РегистрСведений.ИдентификаторСтроки,
	|	ДатаМобайл_РегистрСведений.КодТовара,
	|	ДатаМобайл_РегистрСведений.НазваниеТовара
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_РегистрСведений
	|ГДЕ
	|	ДатаМобайл_РегистрСведений.ДокументТСД = &Ссылка
	|	И НЕ ДатаМобайл_РегистрСведений.ДляОбмена";
	
	Если ГрупповойДокумент Тогда
		ТабДокумента.ТекстЗапроса = СтрЗаменить(ТабДокумента.ТекстЗапроса, "ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка", "ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка В(&ДокументыТСД)");
		ТабДокумента.ТекстЗапроса = СтрЗаменить(ТабДокумента.ТекстЗапроса, "ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ссылка = &Ссылка", "ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ссылка В(&ДокументыТСД)");
		ТабДокумента.ТекстЗапроса = СтрЗаменить(ТабДокумента.ТекстЗапроса, "ДатаМобайл_РегистрСведений.ДокументТСД = &Ссылка", "ДатаМобайл_РегистрСведений.ДокументТСД В(&ДокументыТСД)");
		
		ТабДокумента.Параметры.УстановитьЗначениеПараметра("ДокументыТСД", СписокДокументовТСД.ВыгрузитьКолонку("ДокументТСД"));
	Иначе	
		ТабДокумента.Параметры.УстановитьЗначениеПараметра("Ссылка", Элемент);
	КонецЕсли;	
	
	Если ЕГАИС Тогда
		ТабАнализа.ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Артикул КАК Артикул,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ВложенныйЗапрос.План) КАК План,
		|	СУММА(ВложенныйЗапрос.Факт) КАК Факт,
		|	СУММА(-ВложенныйЗапрос.План + ВложенныйЗапрос.Факт) КАК Расхождения,
		|	ВложенныйЗапрос.ТипСтроки
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		//СПРАВОЧНИК ДОКУМЕНТ ТСД
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА СобранныеДанныеПодбор.НоменклатураЕГАИС ЕСТЬ NULL
		|					ИЛИ СобранныеДанныеПодбор.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура
		|			ИНАЧЕ СобранныеДанныеПодбор.НоменклатураЕГАИС
		|		КОНЕЦ КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА СобранныеДанныеПодбор.НоменклатураЕГАИС ЕСТЬ NULL
		|					ИЛИ СобранныеДанныеПодбор.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура.Артикул
		|			ИНАЧЕ СобранныеДанныеПодбор.НоменклатураЕГАИС.Код
		|		КОНЕЦ КАК Артикул,
		|		Товары.Характеристика КАК ХарактеристикаНоменклатуры,
		|		0 КАК План,
		|		СобранныеДанныеПодбор.Количество КАК Факт,
		|		""Подбор"" КАК ТипСтроки,
		|		""""
		|	ИЗ
		|		Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|				МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура,
		|				МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Характеристика) КАК Характеристика
		|			ИЗ
		|				РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК Товары
		|			ПО (Товары.АлкогольнаяПродукция = СобранныеДанныеПодбор.НоменклатураЕГАИС)
		|	ГДЕ
		|		СобранныеДанныеПодбор.Ссылка = &Ссылка
		|		И &УсловиеЕстьПодбор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА СобранныеДанныеПриемка.НоменклатураЕГАИС ЕСТЬ NULL
		|					ИЛИ СобранныеДанныеПриемка.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура
		|			ИНАЧЕ СобранныеДанныеПриемка.НоменклатураЕГАИС
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА СобранныеДанныеПриемка.НоменклатураЕГАИС ЕСТЬ NULL
		|					ИЛИ СобранныеДанныеПриемка.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура.Артикул
		|			ИНАЧЕ СобранныеДанныеПриемка.НоменклатураЕГАИС.Код
		|		КОНЕЦ,
		|		Товары.Характеристика,
		|		0,
		|		СобранныеДанныеПриемка.Количество,
		|		""Размещение"",
		|		""""
		|	ИЗ
		|		Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК СобранныеДанныеПриемка
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|				МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура,
		|				МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Характеристика) КАК Характеристика
		|			ИЗ
		|				РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК Товары
		|			ПО (Товары.АлкогольнаяПродукция = СобранныеДанныеПриемка.НоменклатураЕГАИС)
		|	ГДЕ
		|		СобранныеДанныеПриемка.Ссылка = &Ссылка
		|		И &УсловиеЕстьПриемка
		
		//РЕГИСТР ГРУППОВЫЕ СТРОКИ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА СобранныеДанныеПодбор.НоменклатураЕГАИС ЕСТЬ NULL
		|					ИЛИ СобранныеДанныеПодбор.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура
		|			ИНАЧЕ СобранныеДанныеПодбор.НоменклатураЕГАИС
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА СобранныеДанныеПодбор.НоменклатураЕГАИС ЕСТЬ NULL
		|					ИЛИ СобранныеДанныеПодбор.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура.Артикул
		|			ИНАЧЕ СобранныеДанныеПодбор.НоменклатураЕГАИС.Код
		|		КОНЕЦ,
		|		Товары.Характеристика,
		|		0,
		|		СобранныеДанныеПодбор.Количество,
		|		""Подбор"",
		|		""""
		|	ИЗ
		|		РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК СобранныеДанныеПодбор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|				МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура,
		|				МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Характеристика) КАК Характеристика
		|			ИЗ
		|				РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК Товары
		|			ПО (Товары.АлкогольнаяПродукция = СобранныеДанныеПодбор.НоменклатураЕГАИС)
		|		ГДЕ
		|			СобранныеДанныеПодбор.ДокументТСД = &Ссылка И НЕ СобранныеДанныеПодбор.ДляОбмена И СобранныеДанныеПодбор.ИмяТаблицы = ""Select""
		|			И &УсловиеЕстьПодбор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА СобранныеДанныеПриемка.НоменклатураЕГАИС ЕСТЬ NULL
		|					ИЛИ СобранныеДанныеПриемка.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура
		|			ИНАЧЕ СобранныеДанныеПриемка.НоменклатураЕГАИС
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА СобранныеДанныеПриемка.НоменклатураЕГАИС ЕСТЬ NULL
		|					ИЛИ СобранныеДанныеПриемка.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура.Артикул
		|			ИНАЧЕ СобранныеДанныеПриемка.НоменклатураЕГАИС.Код
		|		КОНЕЦ,
		|		Товары.Характеристика,
		|		0,
		|		СобранныеДанныеПриемка.Количество,
		|		""Размещение"",
		|		""""
		|	ИЗ
		|		РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК СобранныеДанныеПриемка
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|				МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура,
		|				МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Характеристика) КАК Характеристика
		|			ИЗ
		|				РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК Товары
		|			ПО (Товары.АлкогольнаяПродукция = СобранныеДанныеПриемка.НоменклатураЕГАИС)
		|		ГДЕ
		|			СобранныеДанныеПриемка.ДокументТСД = &Ссылка И НЕ СобранныеДанныеПриемка.ДляОбмена И  СобранныеДанныеПриемка.ИмяТаблицы = ""Insert""
		|			И &УсловиеЕстьПриемка
		
		//ДОКУМЕНТ ЗАДАНИЕ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента1СПодбор.АлкогольнаяПродукция ЕСТЬ NULL
		|					ИЛИ ТаблицаДокумента1СПодбор.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА ТаблицаДокумента1СПодбор.Номенклатура
		|			ИНАЧЕ ТаблицаДокумента1СПодбор.АлкогольнаяПродукция
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента1СПодбор.АлкогольнаяПродукция ЕСТЬ NULL
		|					ИЛИ ТаблицаДокумента1СПодбор.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА ТаблицаДокумента1СПодбор.Номенклатура.Артикул
		|			ИНАЧЕ ТаблицаДокумента1СПодбор.АлкогольнаяПродукция.Код
		|		КОНЕЦ,
		|		ТаблицаДокумента1СПодбор.Характеристика,
		|		ТаблицаДокумента1СПодбор.КоличествоУпаковок,
		|		0,
		|		""Подбор"",
		|		""""
		|	ИЗ
		|		Документ.АктПостановкиНаБалансЕГАИС.Товары КАК ТаблицаДокумента1СПодбор 
		|			
		|	ГДЕ
		|		&УсловиеЕстьПодбор
		|		И ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента1СПриемка.АлкогольнаяПродукция ЕСТЬ NULL
		|					ИЛИ ТаблицаДокумента1СПриемка.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА ТаблицаДокумента1СПриемка.Номенклатура
		|			ИНАЧЕ ТаблицаДокумента1СПриемка.АлкогольнаяПродукция
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента1СПриемка.АлкогольнаяПродукция ЕСТЬ NULL
		|					ИЛИ ТаблицаДокумента1СПриемка.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА ТаблицаДокумента1СПриемка.Номенклатура.Артикул
		|			ИНАЧЕ ТаблицаДокумента1СПриемка.АлкогольнаяПродукция.Код
		|		КОНЕЦ,
		|		ТаблицаДокумента1СПриемка.Характеристика,
		|		ТаблицаДокумента1СПриемка.КоличествоУпаковок,
		|		0,
		|		""Размещение"",
		|		""""
		|	ИЗ
		|		Документ.АктПостановкиНаБалансЕГАИС.Товары КАК ТаблицаДокумента1СПриемка
		|	ГДЕ
		|		&УсловиеЕстьПриемка
		|		И ТаблицаДокумента1СПриемка.Ссылка = &ИсходныйДокумент) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ТипСтроки,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Артикул";
		
		Если ДатаМобайл_ОбщийМодуль.ЕстьАСТ() Тогда
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "КлассификаторАлкогольнойПродукцииЕГАИС", "астНоменклатураЕГАИС");
			ДатаМобайл_ОбщийМодуль.астЗаменитьРегистрНоменклатурыЕГАИС(ТабАнализа.ТекстЗапроса);
		КонецЕсли;					
	Иначе
		
		ТабАнализа.ТекстЗапроса = "";
		
		Если Не ДатаМобайл_ОбщийМодуль.СтарыйРежимСовместимости() Тогда	
			ТабАнализа.ТекстЗапроса = ТабАнализа.ТекстЗапроса +
			"ВЫБРАТЬ
			|	ЗаказыНаПеремещениеОстатки.Номенклатура КАК Номенклатура,
			|	ЗаказыНаПеремещениеОстатки.Характеристика КАК Характеристика,
			|	СУММА(ЗаказыНаПеремещениеОстатки.ЗаказаноОстаток) КАК ОстатокНаПеремещение
			|ПОМЕСТИТЬ ОстаткиЗаказовНаПеремещение
			|ИЗ
			|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(&ДатаКонтроля, ЗаказНаПеремещение = &ИсходныйДокумент) КАК ЗаказыНаПеремещениеОстатки
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыНаПеремещениеОстатки.Номенклатура,
			|	ЗаказыНаПеремещениеОстатки.Характеристика
			|;
			|////////////////////////////////////////////////////////////////////////////////";
		КонецЕсли;
				
		ТабАнализа.ТекстЗапроса = ТабАнализа.ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИтоговаяТаблица.ТипСтроки,
		|	ИтоговаяТаблица.Артикул КАК Артикул,
		|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
		|	ИтоговаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ИтоговаяТаблица.План) КАК План,
		|	СУММА(ИтоговаяТаблица.Факт) КАК Факт,
		|	СУММА(ИтоговаяТаблица.Расхождения) КАК Расхождения
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		//СПРАВОЧНИК ДОКУМЕНТ ТСД
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|		ЕСТЬNULL(ВложенныйЗапрос.ХарактеристикаНоменклатуры, """") КАК ХарактеристикаНоменклатуры,
		|		ВложенныйЗапрос.Артикул КАК Артикул,
		|		СУММА(ВложенныйЗапрос.План) КАК План,
		|		СУММА(ВложенныйЗапрос.Факт) КАК Факт,
		|		СУММА(-ВложенныйЗапрос.План + ВложенныйЗапрос.Факт) КАК Расхождения,
		|		ВложенныйЗапрос.ТипСтроки КАК ТипСтроки
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
		|			ЕСТЬNULL(СобранныеДанныеПодбор.ХарактеристикаНоменклатуры, """") КАК ХарактеристикаНоменклатуры,
		|			СобранныеДанныеПодбор.Номенклатура.Артикул КАК Артикул,
		|			0 КАК План,
		|			СобранныеДанныеПодбор.Количество * ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель,1) КОНЕЦ/ 
		|	         		   									ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель,1) КОНЕЦ, 1) КАК Факт,
		|			""Подбор"" КАК ТипСтроки
		|		ИЗ
		|			Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
		|		ГДЕ
		|			СобранныеДанныеПодбор.Ссылка = &Ссылка
		|			И &УсловиеЕстьПодбор
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СобранныеДанныеПриемка.Номенклатура,
		|			ЕСТЬNULL(СобранныеДанныеПриемка.ХарактеристикаНоменклатуры, """"),
		|			СобранныеДанныеПриемка.Номенклатура.Артикул,
		|			0,
		|			СобранныеДанныеПриемка.Количество * ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Числитель,1) КОНЕЦ/ 
		|	         		   									ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Знаменатель,1) КОНЕЦ, 1),
		|			""Размещение""
		|		ИЗ
		|			Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК СобранныеДанныеПриемка
		|		ГДЕ
		|			СобранныеДанныеПриемка.Ссылка = &Ссылка
		|			И &УсловиеЕстьПриемка
		|
		//РЕГИСТР ГРУППОВЫЕ СТРОК
		|		ОБЪЕДИНИТЬ ВСЕ
		|
		|		ВЫБРАТЬ
		|			СобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
		|			ЕСТЬNULL(СобранныеДанныеПодбор.ХарактеристикаНоменклатуры, """") КАК ХарактеристикаНоменклатуры,
		|			СобранныеДанныеПодбор.Номенклатура.Артикул КАК Артикул,
		|			0 КАК План,
		|			СобранныеДанныеПодбор.Количество * ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель,1) КОНЕЦ/ 
		|	         		   									ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель,1) КОНЕЦ, 1) КАК Факт,
		|			""Подбор"" КАК ТипСтроки
		|		ИЗ
		|			РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК СобранныеДанныеПодбор
		|		ГДЕ
		|			СобранныеДанныеПодбор.ДокументТСД = &Ссылка И НЕ СобранныеДанныеПодбор.ДляОбмена И  СобранныеДанныеПодбор.ИмяТаблицы = ""Select""
		|			И &УсловиеЕстьПодбор
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СобранныеДанныеПриемка.Номенклатура,
		|			ЕСТЬNULL(СобранныеДанныеПриемка.ХарактеристикаНоменклатуры, """"),
		|			СобранныеДанныеПриемка.Номенклатура.Артикул,
		|			0,
		|			СобранныеДанныеПриемка.Количество * ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Числитель,1) КОНЕЦ/ 
		|	         		   									ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Знаменатель,1) КОНЕЦ, 1),
		|			""Размещение""
		|		ИЗ
		|			РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК СобранныеДанныеПриемка
		|		ГДЕ
		|			СобранныеДанныеПриемка.ДокументТСД = &Ссылка И НЕ СобранныеДанныеПриемка.ДляОбмена И  СобранныеДанныеПриемка.ИмяТаблицы = ""Insert""
		|			И &УсловиеЕстьПриемка
		|		
		//ДОКУМЕНТ ЗАДАНИЕ
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТаблицаДокумента1СПодбор.Номенклатура,
		|			ЕСТЬNULL(ТаблицаДокумента1СПодбор.Характеристика, """"),
		|			ТаблицаДокумента1СПодбор.Номенклатура.Артикул,
		|			ВЫБОР КОГДА ЕстьNULL(ТаблицаДокумента1СПодбор.Количество,0) = 0 
		|				ТОГДА ТаблицаДокумента1СПодбор.КоличествоУпаковок	
		|				ИНАЧЕ ЕстьNULL(ТаблицаДокумента1СПодбор.Количество,0) 
		|			КОНЕЦ КАК Количество,
		|			0,
		|			""Подбор""
		|		ИЗ
		|			Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаДокумента1СПодбор
		|		ГДЕ
		|			&УсловиеЕстьПодбор
		|			И ТаблицаДокумента1СПодбор.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			И ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТаблицаДокумента1СПриемка.Номенклатура,
		|			ТаблицаДокумента1СПриемка.Характеристика,
		|			ТаблицаДокумента1СПриемка.Номенклатура.Артикул,
		|			ВЫБОР КОГДА ЕстьNULL(ТаблицаДокумента1СПриемка.Количество,0) = 0 
		|				ТОГДА ТаблицаДокумента1СПриемка.КоличествоУпаковок	
		|				ИНАЧЕ ЕстьNULL(ТаблицаДокумента1СПриемка.Количество,0) 
		|			КОНЕЦ КАК Количество,
		|			0,
		|			""Размещение""
		|		ИЗ
		|			Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаДокумента1СПриемка
		|		ГДЕ
		|			&УсловиеЕстьПриемка
		|			И ТаблицаДокумента1СПриемка.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			И ТаблицаДокумента1СПриемка.Ссылка = &ИсходныйДокумент) КАК ВложенныйЗапрос
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВложенныйЗапрос.ТипСтроки,
		|		ВложенныйЗапрос.Номенклатура,
		|		ВложенныйЗапрос.Артикул,
		|		ВложенныйЗапрос.ХарактеристикаНоменклатуры) КАК ИтоговаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговаяТаблица.ТипСтроки,
		|	ИтоговаяТаблица.ХарактеристикаНоменклатуры,
		|	ИтоговаяТаблица.Номенклатура,
		|	ИтоговаяТаблица.Артикул";
		
	КонецЕсли;
	
	// Zolla ++
	Если ВидДокумента = "ОтборРазмещениеТоваров" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПодбор.Ссылка В(&ДокументыИсх)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПриемка.Ссылка В(&ДокументыИсх)");
		
		ИсхДокументыСписок = Элемент.ДМ_ИсходныеДокументы.ВыгрузитьКолонку("ИсходныйДокумент");
		ТабАнализа.Параметры.УстановитьЗначениеПараметра("ДокументыИсх", ИсхДокументыСписок);
	КонецЕсли;
	// Zolla --
	
	Если МножествоДокументовКакЗадание Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПодбор.Ссылка В(&Документы)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПриемка.Ссылка В(&Документы)");
	КонецЕсли;
	
	Если ВидДокумента = "УведомлениеОПриемкеМДЛП" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаДокумента1СПриемка", "Документ." + ВидДокумента + "." + "СоставТранспортныхУпаковок " + " КАК ТаблицаДокумента1СПриемка");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, """Размещение""", """Подбор""");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "&УсловиеЕстьПриемка", "Истина");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", "ТаблицаДокумента1СПриемка.Количество");	
	КонецЕсли;
	
	Если ВидДокумента = "алкТоварноТранспортнаяНакладнаяЕГАИС" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)", "ЗНАЧЕНИЕ(Справочник.алкКлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТОГДА ТаблицаДокумента1СПодбор.Номенклатура.Артикул", "ТОГДА ТаблицаДокумента1СПодбор.АлкогольнаяПродукция.Код");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТОГДА ТаблицаДокумента1СПодбор.Номенклатура", "ТОГДА ТаблицаДокумента1СПодбор.АлкогольнаяПродукция");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Характеристика", "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТОГДА ТаблицаДокумента1СПриемка.Номенклатура.Артикул", "ТОГДА ТаблицаДокумента1СПриемка.АлкогольнаяПродукция.Код");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТОГДА ТаблицаДокумента1СПриемка.Номенклатура", "ТОГДА ТаблицаДокумента1СПриемка.АлкогольнаяПродукция");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Характеристика", "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
	КонецЕсли;	
	
	Если ВидДокумента = "ЗаданиеНаПеревозку" Тогда	
		ВидДокумента = "ЗаказКлиента";
		ИмяТабличнойЧастиПодбор = "Товары";
		ИмяТабличнойЧастиПриемка = "Товары";	
	КонецЕсли;
	
	Если ИспользоватьПодбор Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаДокумента1СПодбор", "Документ." + ВидДокумента + "." + ИмяТабличнойЧастиПодбор + " КАК ТаблицаДокумента1СПодбор");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.АктПостановкиНаБалансЕГАИС.Товары КАК ТаблицаДокумента1СПодбор", "Документ." + ВидДокумента + "." + ИмяТабличнойЧастиПодбор + " КАК ТаблицаДокумента1СПодбор");
	КонецЕсли;	
	
	Если ИспользоватьПриемку Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаДокумента1СПриемка", "Документ." + ВидДокумента + "." + ИмяТабличнойЧастиПриемка + " КАК ТаблицаДокумента1СПриемка");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.АктПостановкиНаБалансЕГАИС.Товары КАК ТаблицаДокумента1СПриемка", "Документ." + ВидДокумента + "." + ИмяТабличнойЧастиПриемка + " КАК ТаблицаДокумента1СПриемка");
	КонецЕсли;	
	
	Если ВидДокумента = "ОстаткиЕГАИС" Или ВидДокумента = "ТТНВходящаяЕГАИС" Или ВидДокумента = "ТТНИсходящаяЕГАИС" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", "ТаблицаДокумента1СПодбор.Количество");	
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", "ТаблицаДокумента1СПриемка.Количество");
	ИначеЕсли ВидДокумента = "ОприходованиеИзлишковТоваров" Или ВидДокумента = "СписаниеНедостачТоваров" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", "ТаблицаДокумента1СПодбор.Количество");	
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", "ТаблицаДокумента1СПриемка.Количество");
	ИначеЕсли ВидДокумента = "УстановкаЦенНоменклатуры" Или ВидДокумента = "ПрименениеЦенНоменклатуры" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", 999);
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", 999);
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Количество", 999);
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Количество", 999);
	ИначеЕсли ВидДокумента = "ВозвратВОборотИСМП" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", 0);
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", 0);
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Количество", 0);
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Количество", 0); 	
		// аст
	ИначеЕсли ВидДокумента = "астТоварноТранспортныеНакладныеИзЕГАИС" Или ВидДокумента = "астСписаниеТоваровЕГАИС" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", "ТаблицаДокумента1СПодбор.Количество");	
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.АлкогольнаяПродукция", "ТаблицаДокумента1СПодбор.НоменклатураЕГАИС");	
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Характеристика", "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
	ИначеЕсли ВидДокумента = "астАктФиксацииШтрихкодовНаБалансеОрганизации" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", "ТаблицаДокумента1СПодбор.КоличествоМарок");	
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.АлкогольнаяПродукция", "ТаблицаДокумента1СПодбор.НоменклатураЕГАИС");	
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Характеристика", "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");		
	ИначеЕсли ВидДокумента = "РасходныйОрдерНаТовары" И ИмяТабличнойЧастиПодбор = "ОтгружаемыеТовары" Тогда
		//ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ОтгружаемыеТовары", "ТоварыПоРаспоряжениям");
		//ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", "ТаблицаДокумента1СПодбор.Количество");
	ИначеЕсли ВидДокумента = "ЗаказПоставщику" Тогда
		
		Попытка
			ЕстьОтменено = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено") <> Неопределено;
		Исключение
			ЕстьОтменено = Ложь;
		КонецПопытки;
		
		Если ЕстьОтменено Тогда
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент И НЕ ТаблицаДокумента1СПодбор.Отменено");
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ЗаказКлиента" Тогда
		
		Попытка
			ЕстьОтменено = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Отменено") <> Неопределено И Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("ВариантОбеспечения") <> Неопределено;
		Исключение
			ЕстьОтменено = Ложь;
		КонецПопытки;
		
		Если ЕстьОтменено Тогда
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент И НЕ ТаблицаДокумента1СПодбор.Отменено");		
		КонецЕсли;	
		
	ИначеЕсли ВидДокумента = "ЗаказНаПеремещение" И Не ДатаМобайл_ОбщийМодуль.СтарыйРежимСовместимости() Тогда	
		
		Если ИспользоватьПодбор Тогда
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.ЗаказНаПеремещение.Товары КАК ТаблицаДокумента1СПодбор", "ОстаткиЗаказовНаПеремещение КАК ТаблицаДокумента1СПодбор");
			
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			И ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПодбор.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
			
			
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ВЫБОР КОГДА ЕстьNULL(ТаблицаДокумента1СПодбор.Количество,0) = 0 
			|				ТОГДА ТаблицаДокумента1СПодбор.КоличествоУпаковок	
			|				ИНАЧЕ ЕстьNULL(ТаблицаДокумента1СПодбор.Количество,0) 
			|			КОНЕЦ КАК Количество", "ТаблицаДокумента1СПодбор.ОстатокНаПеремещение");
			
			ТабАнализа.Параметры.УстановитьЗначениеПараметра("ДатаКонтроля", ДатаСоздания);
		КонецЕсли;
		
		Если ИспользоватьПриемку Тогда
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.ЗаказНаПеремещение.Товары КАК ТаблицаДокумента1СПриемка", "ОстаткиЗаказовНаПеремещение КАК ТаблицаДокумента1СПриемка");
			
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			И ТаблицаДокумента1СПриемка.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПриемка.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
			
			
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ВЫБОР КОГДА ЕстьNULL(ТаблицаДокумента1СПриемка.Количество,0) = 0 
			|				ТОГДА ТаблицаДокумента1СПриемка.КоличествоУпаковок	
			|				ИНАЧЕ ЕстьNULL(ТаблицаДокумента1СПриемка.Количество,0) 
			|			КОНЕЦ КАК Количество", "ТаблицаДокумента1СПриемка.ОстатокНаПеремещение");
			
			ТабАнализа.Параметры.УстановитьЗначениеПараметра("ДатаКонтроля", ДатаСоздания);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "СборкаТоваров" Тогда
		
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.СборкаТоваров.Товары КАК ТаблицаДокумента1СПриемка", "Документ.СборкаТоваров КАК ТаблицаДокумента1СПриемка");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.СборкаТоваров.Товары КАК ТаблицаДокумента1СПриемка", "Документ.СборкаТоваров КАК ТаблицаДокумента1СПриемка");
		
	ИначеЕсли ВидДокумента = "ЗаказНаСборку" Тогда
		
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.ЗаказНаСборку.Товары КАК ТаблицаДокумента1СПриемка", "Документ.ЗаказНаСборку КАК ТаблицаДокумента1СПриемка");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "Документ.ЗаказНаСборку.Товары КАК ТаблицаДокумента1СПриемка", "Документ.ЗаказНаСборку КАК ТаблицаДокумента1СПриемка");
		
	ИначеЕсли ВидДокумента = "ДатаМобайл_УпаковочныйЛист" Тогда
		Если ИспользоватьПодбор Тогда
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.АлкогольнаяПродукция", "ТаблицаДокумента1СПодбор.ЕГАИС_Номенклатура");
		КонецЕсли;	
		Если ИспользоватьПриемку Тогда
			ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.АлкогольнаяПродукция", "ТаблицаДокумента1СПриемка.ЕГАИС_Номенклатура");
		КонецЕсли;	
	КонецЕсли;
		
	Если ВидДокумента = "ОстаткиЕГАИС" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Номенклатура.Артикул", """""");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Номенклатура.Артикул", """""");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Номенклатура", """""");	
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Номенклатура", """""");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Характеристика", """""");	
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Характеристика", """""");	
	КонецЕсли;
	
	Если ВидДокумента = "СборкаТоваров" Или ВидДокумента = "ЗаказНаСборку" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", "ТаблицаДокумента1СПриемка.Количество");	
	КонецЕсли;
	
	Попытка
		ЕстьКоличествоУпаковокПодбор = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено;
	Исключение
		ЕстьКоличествоУпаковокПодбор = Ложь;
	КонецПопытки;
	
	Если ЕстьКоличествоУпаковокПодбор Тогда
	Иначе
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", "ТаблицаДокумента1СПодбор.Количество");
	КонецЕсли;
	
	Попытка
		ЕстьКоличествоУпаковокПриемка = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПриемка].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено;
	Исключение
		ЕстьКоличествоУпаковокПриемка = Ложь;
	КонецПопытки;
	
	Если ЕстьКоличествоУпаковокПриемка Тогда
	Иначе
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", "ТаблицаДокумента1СПриемка.Количество");
	КонецЕсли;
	
	Попытка
		ЕстьКоличествоПодбор = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПодбор].Реквизиты.Найти("Количество") <> Неопределено;
	Исключение
		ЕстьКоличествоПодбор = Ложь;
	КонецПопытки;
	
	Если Не ЕстьКоличествоПодбор Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Количество",0);
	КонецЕсли;
	
	Попытка
		ЕстьКоличествоПриемка = Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧастиПриемка].Реквизиты.Найти("Количество") <> Неопределено;
	Исключение
		ЕстьКоличествоПриемка = Ложь;
	КонецПопытки;
	
	Если Не ЕстьКоличествоПриемка Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Количество", 0);
	КонецЕсли;
			
	Если НеВыгружатьУслуги Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент 
		| И ТаблицаДокумента1СПодбор.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПриемка.Ссылка = &ИсходныйДокумент 
		| И ТаблицаДокумента1СПриемка.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)");			
	КонецЕсли;
	
	Если ИспользоватьМаркировку И МаркировкаЗапретитьПодборНемаркируемыхТоваров Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент
		|   	И
		|   	(
		|   	(ТаблицаДокумента1СПодбор.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
		|   	ИЛИ
		|   	(ТаблицаДокумента1СПодбор.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
		|   	И ТаблицаДокумента1СПодбор.Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
		|   	)");		
	КонецЕсли;		
		
	Если ДатаМобайл_ОбщийМодуль.СтарыйРежимСовместимости() Тогда	
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ПОМЕСТИТЬ ВременнаяТаблица", "");
	Иначе
		ТабАнализа.ТекстЗапроса = ТабАнализа.ТекстЗапроса + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.Номенклатура,
		|	ВременнаяТаблица.ХарактеристикаНоменклатуры,
		|	ВременнаяТаблица.Артикул,
		|	ВременнаяТаблица.План,
		|	ВременнаяТаблица.Факт,
		|	ВременнаяТаблица.Расхождения,
		|	ВременнаяТаблица.ТипСтроки
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица 
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ТолькоРасхождения
		|		ТОГДА -ВременнаяТаблица.План + ВременнаяТаблица.Факт <> 0
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И (ВременнаяТаблица.План > 0 ИЛИ ВременнаяТаблица.Факт > 0)";
		ТабАнализа.Параметры.УстановитьЗначениеПараметра("ТолькоРасхождения", ПоказыватьТолькоРасхождения);
	КонецЕсли;
	
	ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "&УсловиеЕстьПриемка", ?(ИспользоватьПриемку, "Истина", "Ложь"));
	ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "&УсловиеЕстьПодбор", ?(ИспользоватьПодбор, "Истина", "Ложь"));
		
	Если ГрупповойДокумент Тогда		
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПодбор.Ссылка В(&ИсходныеДокументы)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Ссылка = &ИсходныйДокумент", "ТаблицаДокумента1СПриемка.Ссылка В(&ИсходныеДокументы)");
		
		ТабАнализа.Параметры.УстановитьЗначениеПараметра("ИсходныеДокументы", СписокДокументовТСД.ВыгрузитьКолонку("ИсходныйДокумент"));
		
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "СобранныеДанныеПодбор.ДокументТСД = &Ссылка", "СобранныеДанныеПодбор.ДокументТСД В(&ДокументыТСД)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "СобранныеДанныеПриемка.ДокументТСД = &Ссылка", "СобранныеДанныеПриемка.ДокументТСД В(&ДокументыТСД)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "СобранныеДанныеПодбор.Ссылка = &Ссылка", "СобранныеДанныеПодбор.Ссылка В(&ДокументыТСД)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "СобранныеДанныеПриемка.Ссылка = &Ссылка", "СобранныеДанныеПриемка.Ссылка В(&ДокументыТСД)");
		
		ТабАнализа.Параметры.УстановитьЗначениеПараметра("ДокументыТСД", СписокДокументовТСД.ВыгрузитьКолонку("ДокументТСД"));
	Иначе	
		ТабАнализа.Параметры.УстановитьЗначениеПараметра("Ссылка", Элемент);
		Если МножествоДокументовКакЗадание Тогда
			ТабАнализа.Параметры.УстановитьЗначениеПараметра("Документы", Задания.ВыгрузитьКолонку("Задание"));
		Иначе
			ТабАнализа.Параметры.УстановитьЗначениеПараметра("ИсходныйДокумент", ИсходныйДокумент);
		КонецЕсли;		
	КонецЕсли;
	
	Если ВидДокумента = "КорректировкаРеализации" И ИмяТабличнойЧастиПодбор = "Расхождения" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ЕстьNULL(ТаблицаДокумента1СПодбор.Количество,0)", "ЕстьNULL(ТаблицаДокумента1СПодбор.Количество * ВЫБОР КОГДА ТаблицаДокумента1СПодбор.Количество < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ,0)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", "ТаблицаДокумента1СПодбор.КоличествоУпаковок * ВЫБОР КОГДА ТаблицаДокумента1СПодбор.КоличествоУпаковок < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ")
	КонецЕсли;
	
	Если ВидДокумента = "КорректировкаРеализации" И ИмяТабличнойЧастиПриемка = "Расхождения" Тогда
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ЕстьNULL(ТаблицаДокумента1СПриемка.Количество,0)", "ЕстьNULL(ТаблицаДокумента1СПриемка.Количество * ВЫБОР КОГДА ТаблицаДокумента1СПриемка.Количество < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ,0)");
		ТабАнализа.ТекстЗапроса = СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", "ТаблицаДокумента1СПриемка.КоличествоУпаковок * ВЫБОР КОГДА ТаблицаДокумента1СПриемка.КоличествоУпаковок < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ")
	КонецЕсли; 
	
КонецПроцедуры         	

&НаСервереБезКонтекста
Функция ЗаблокироватьДокументПоСтроке(Элемент, СтрокаОшибок)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	РеквизитыДокументаТСД 	= Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент, "Шаблон,ДатаЗавершенияСбора,ДатаЗавершения,РодительскийДокумент");
	
	Шаблон					= РеквизитыДокументаТСД.Шаблон;
	ДатаЗавершенияСбора		= РеквизитыДокументаТСД.ДатаЗавершенияСбора;
	ДатаЗавершения			= РеквизитыДокументаТСД.ДатаЗавершения;
	РодительскийДокумент	= РеквизитыДокументаТСД.РодительскийДокумент;
	
	Если Шаблон = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	РеквизитыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "РаспределениеТоваров");
	
	ГрупповойДокумент = РеквизитыШаблона.РаспределениеТоваров = 2;	
	
	Если ДатаЗавершения <> Дата(1,1,1) Тогда
		СтрокаОшибок = "Документ уже закрыт!!";
		Возврат Ложь;
	КонецЕсли;	
	
	Если ГрупповойДокумент И Не ЗначениеЗаполнено(РодительскийДокумент) Тогда			
		ВсеДокументыЗаблокированы = Истина;
		Для каждого СтрокаДочернийДокумент Из Элемент.СписокДокументов Цикл
			Если ЗначениеЗаполнено(СтрокаДочернийДокумент.ДокументТСД) Тогда
				Если СтрокаДочернийДокумент.ДокументТСД.ДатаЗавершенияСбора <> Дата(1,1,1) Тогда
					ДочернийДокументОбъект = СтрокаДочернийДокумент.ДокументТСД.ПолучитьОбъект();
					ДочернийДокументОбъект.ДатаПриемкиОператором = ТекущаяДата();
					ДочернийДокументОбъект.Записать();
				Иначе
					ВсеДокументыЗаблокированы = Ложь;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Если ВсеДокументыЗаблокированы Тогда
			Об = Элемент.ПолучитьОбъект();
			Об.ДатаПриемкиОператором = ТекущаяДата();
			Об.Записать();
		КонецЕсли;		
		Возврат Истина;
	КонецЕсли;		
	
	Если ДатаЗавершенияСбора = Дата(1,1,1) Тогда
		СтрокаОшибок = "Документ не завершен на ТСД!!";
		Возврат Ложь;
	КонецЕсли;	
	
	Об = Элемент.ПолучитьОбъект();
	Об.ДатаПриемкиОператором = ТекущаяДата();
	Об.ОбменДанными.Получатели.АвтоЗаполнение = Истина;
	
	Для каждого СтрТЧ Из Об.СобранныеДанныеПодбор Цикл
		Обработки.ДатаМобайл_АРМДиспетчера.УстановитьЕдиницу(СтрТЧ);
	КонецЦикла;	
	Для каждого СтрТЧ Из Об.СобранныеДанныеПриемка Цикл
		Обработки.ДатаМобайл_АРМДиспетчера.УстановитьЕдиницу(СтрТЧ);
	КонецЦикла;		
	
	Об.Записать();
	
	Возврат Истина;
	
КонецФункции	

&НаСервереБезКонтекста
Функция РазблокироватьДокументПоСтроке(Элемент, СтрокаОшибок)
		
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	РеквизитыДокументаТСД 	= Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент, "Шаблон,ДатаЗавершенияСбора,ДатаЗавершения,РодительскийДокумент");
	
	Шаблон					= РеквизитыДокументаТСД.Шаблон;
	ДатаЗавершенияСбора		= РеквизитыДокументаТСД.ДатаЗавершенияСбора;
	ДатаЗавершения			= РеквизитыДокументаТСД.ДатаЗавершения;
	РодительскийДокумент	= РеквизитыДокументаТСД.РодительскийДокумент;
	
	Если Шаблон = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	РеквизитыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "РаспределениеТоваров,ГрупповаяРабота");
	
	ГрупповойДокумент = РеквизитыШаблона.РаспределениеТоваров = 2;
	ГрупповаяРабота = РеквизитыШаблона.ГрупповаяРабота;
		
	Если ДатаЗавершения <> Дата(1,1,1) Тогда
		СтрокаОшибок = "Документ уже закрыт!!";
		Возврат Ложь;
	КонецЕсли;		
	
	Если ГрупповойДокумент И Не ЗначениеЗаполнено(РодительскийДокумент) Тогда		
		Для каждого СтрокаДочернийДокумент Из Элемент.СписокДокументов Цикл
			Если ЗначениеЗаполнено(СтрокаДочернийДокумент.ДокументТСД) Тогда
				Если СтрокаДочернийДокумент.ДокументТСД.ДатаЗавершения = Дата(1,1,1) Тогда
					ДочернийДокументОбъект = СтрокаДочернийДокумент.ДокументТСД.ПолучитьОбъект();
					ДочернийДокументОбъект.ДатаПриемкиОператором = "";
					ДочернийДокументОбъект.ДатаЗавершенияСбора = "";
					ДочернийДокументОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Истина;					
					ДочернийДокументОбъект.Записать();
				Иначе
					ВсеДокументыРазблокированы = Ложь;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;	
	
	Об = Элемент.ПолучитьОбъект();
	Об.ДатаПриемкиОператором = "";
	Об.ДатаЗавершенияСбора = "";
	Об.ОбменДанными.Получатели.АвтоЗаполнение = Истина;
	Об.Записать();
	
	Если ГрупповаяРабота Тогда
		ДатаМобайл_ОбщийМодуль.ОбновитьЗаписьТСДГрупповогоДокумента("", Об.Ссылка, Дата(1,1,1));
	КонецЕсли;	
		
	Возврат Истина;
	
КонецФункции	

&НаСервереБезКонтекста
Функция СоздатьДокументПоСтроке(Элемент, СтрокаОшибок)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	РеквизитыДокументаТСД 	= Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент, "Шаблон,ДатаЗавершенияСбора,ДатаПриемкиОператором,ДатаЗавершения,РодительскийДокумент");
	
	Шаблон					= РеквизитыДокументаТСД.Шаблон;
	ДатаЗавершенияСбора		= РеквизитыДокументаТСД.ДатаЗавершенияСбора;
	ДатаПриемкиОператором   = РеквизитыДокументаТСД.ДатаПриемкиОператором;
	ДатаЗавершения			= РеквизитыДокументаТСД.ДатаЗавершения;
	РодительскийДокумент	= РеквизитыДокументаТСД.РодительскийДокумент;
	
	Если Шаблон = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	РеквизитыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,"РаспределениеТоваров");
	
	ГрупповойДокумент = РеквизитыШаблона.РаспределениеТоваров = 2;
		
	Если ДатаПриемкиОператором = Дата(1,1,1) И Не ГрупповойДокумент Тогда
		СтрокаОшибок = "Документ надо сначала заблокировать!!";
		Возврат Неопределено;
	КонецЕсли;	
	Если ДатаЗавершения <> Дата(1,1,1) Тогда
		СтрокаОшибок = "Документ уже закрыт!!";
		Возврат Неопределено;
	КонецЕсли;	
		
	Об = Элемент.ПолучитьОбъект();
	//// типовой функционал
	//Возврат Обработки.ДатаМобайл_АРМДиспетчера.ВнестиДокументВБазу(Об, СтрокаОшибок);
	
	// Zolla ++
	Док = Обработки.ДатаМобайл_АРМДиспетчера.ВнестиДокументВБазу(Об, СтрокаОшибок);
	
	Если Об.ДМ_ИсходныеДокументы.Количество() > 1 Тогда
		МассивДок = Новый Массив;
		
		Для каждого СтрокаИсхДок Из Об.ДМ_ИсходныеДокументы Цикл
			МассивДок.Добавить(СтрокаИсхДок.ИсходныйДокумент);
		КонецЦикла;
		
		Док = МассивДок;
	КонецЕсли;
		
	Возврат Док;
	// Zolla --
		
КонецФункции

&НаКлиенте
Процедура ПанельДокументовДобавитьНесколько(Команда)
	ФормаВыбора = ПолучитьФорму("Обработка.ДатаМобайл_АРМДиспетчера.Форма.Форма1"); 
	ФормаВыбора.Открыть()			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъекта(Элемент)
	
	Если СокрЛП(Элемент.Шаблон.ВидДокументаНового) = "" Или Элемент.Шаблон.БыстраяПриемка 
		Или Элемент.Шаблон.БыстраяОтгрузка Тогда//старая схема
		
		ВидДокумента = Элемент.Шаблон.ВидДокумента;
		Если ВидДокумента = "ЗаданиеНаПеревозку" Тогда	
			ВидДокумента = "ЗаказКлиента";	
		КонецЕсли;
		
		Возврат ВидДокумента;
		
	Иначе//новая схема	
		Возврат Элемент.Шаблон.ВидДокументаНового;
	КонецЕсли;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ПроверкаПланФакт(докСсылка)
	
	Если Не ЗначениеЗаполнено(докСсылка.ИсходныйДокумент) Тогда Возврат; КонецЕсли;
	ПланФакт = Обработки.ДатаМобайл_АРМДиспетчера.ПланРавноФакт(докСсылка, докСсылка.ИсходныйДокумент); 
	
	Если Не ПланФакт = докСсылка.ПланРавноФакт Тогда
		докОб = докСсылка.ПолучитьОбъект();
		докОб.ПланРавноФакт = ПланФакт;
		
		Попытка
			докОб.Записать();
		Исключение КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьДокумент(Команда)
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаОшибок = "";
	Если Не ЗаблокироватьДокументПоСтроке(ТекущиеДанные.Ссылка, СтрокаОшибок) Тогда
		Сообщить("Не удалось заблокировать документ, по причине: " + СтрокаОшибок);
		Возврат;
	КонецЕсли;	
	ПроверкаПланФакт(ТекущиеДанные.Ссылка);
	ОповеститьобИзменении(ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьДокумент(Команда)
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаОшибок = "";
	Если Не РазблокироватьДокументПоСтроке(ТекущиеДанные.Ссылка, СтрокаОшибок) Тогда
		Сообщить("Не удалось разблокировать документ, по причине: " + СтрокаОшибок);
		Возврат;
	КонецЕсли;	
	ОповеститьобИзменении(ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ВнестиВБазу(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаОшибок = "";
	Док = СоздатьДокументПоСтроке(ТекущиеДанные.Ссылка, СтрокаОшибок);	
	
	Если ТипЗнч(Док) = Тип("Массив") Тогда	
		Для Н = 0 По Док.Количество() - 1 Цикл
			фр = ПолучитьФорму("Документ." + ИмяОбъекта(ТекущиеДанные.Ссылка) + ".ФормаОбъекта", Новый Структура("Ключ", Док[Н]), ЭтаФорма);
			фр.Открыть();	
		КонецЦикла;
	Иначе		
		Если Док = Неопределено Тогда
			Сообщить("Не удалось загрузить документ, по причине: " + СтрокаОшибок);
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Док) = Тип("Структура") Тогда		
			
			ОповеститьобИзменении(ТекущиеДанные.Ссылка);
			
			Форма = ОткрытьФорму("Документ." + ИмяОбъекта(ТекущиеДанные.Ссылка) + ".ФормаОбъекта", Новый Структура("Ключ", Док.Ссылка), ЭтаФорма);
			Форма.Модифицированность = Истина;
			ОбъектОткрытойФормы = Форма.Объект;
			ЗагрузитьСерилизованныеДанные(Док.СерилизованноеЗначениеОбъекта, ОбъектОткрытойФормы);
			КопироватьДанныеФормы(ОбъектОткрытойФормы, Форма.Объект);
			
		ИначеЕсли Док <> "" Тогда				
			Если ДатаМобайл_ОбщийМодуль.ЕстьЕГАИС() Тогда
				Если ТипЗнч(Док) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") 
					Или ТипЗнч(Док) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС")
					Или ТипЗнч(Док) = Тип("ДокументСсылка.АктСписанияЕГАИС")
					Или ТипЗнч(Док) = Тип("ДокументСсылка.ЧекЕГАИС")
					Или ТипЗнч(Док) = Тип("ДокументСсылка.ЧекЕГАИСВозврат")
					Или ТипЗнч(Док) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
					ПонижатьДетализацию = ПолучитьНастройкуПонижатьДетализацию(ТекущиеДанные.Ссылка);
					Если ИнициализироватьДанныеПроверкиДокументаБД(Док, ПонижатьДетализацию) Тогда			
						ВнестиДанныеПроверкиВДокумент(Док);
					Иначе
						Сообщить("Не удалось инициализировать данные для формы проверки и подбора по документу " + Док);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			
			ОповеститьобИзменении(ТекущиеДанные.Ссылка);
			фр = ПолучитьФорму("Документ." + ИмяОбъекта(ТекущиеДанные.Ссылка) + ".ФормаОбъекта",Новый Структура("Ключ", Док), ЭтаФорма);
			фр.Открыть();
		КонецЕсли;
		
		Попытка
			Если ТипЗнч(Док) = Тип("ДокументСсылка.СборкаТоваров") Тогда
				СоздатьОрдераНаОснованииСборкиТоваров(Док, ТекущиеДанные.Ссылка);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Если ТипЗнч(Док) = Тип("ДокументСсылка.УведомлениеОПриемкеМДЛП") И 
				ПолучитьСхемаАкцептования(Док) = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок") Тогда
				УстановитьСтатусПровереноУТоваров(Док, ТекущиеДанные.Ссылка);	
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ДатаМобайл_ОбщийМодуль.ОчиститьЗаписиТСДГрупповогоДокумента(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьСерилизованныеДанные(СерилизованноеЗначениеОбъекта, ОбъектОткрытойФормы)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СерилизованноеЗначениеОбъекта);
	ЗначениеВДанныеФормы(ПрочитатьXML(ЧтениеXML), ОбъектОткрытойФормы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьАвтоотметкуНезаполненного(Статус, ТаблицаФормы)
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.КПоступлению") 
		Или Статус = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.ВРаботе") Тогда
		
		ТаблицаФормы.АвтоОтметкаНезаполненного = Ложь;
		ТаблицаФормы.ОтметкаНезаполненного = Ложь;
		
	Иначе
		ТаблицаФормы.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаОрдернойСистемыСклад(ИсходныйДок, ТипПроверки = "Поступление")
	
	Склад = ИсходныйДок.Склад;
	Модуль_СкладыСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СкладыСервер");	
	Если ТипПроверки = "Поступление" Тогда
		Возврат Модуль_СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Склад);
	Иначе
		Возврат Модуль_СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Склад);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СоздатьОрдераНаОснованииСборкиТоваров(СборкаТоваров, ИсхДанные) 
	
	//СборкаТоваров - Документ основания
	//ИсхДанные - Отсканированные данные с ТСД
	
	Модуль_ОбработкаТабличнойЧастиКлиент 		= ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаТабличнойЧастиКлиент");
	
	//Оприходуем комплект
	Если ПроверкаОрдернойСистемыСклад(СборкаТоваров, "Поступление") Тогда
		ПрихОрдерДок = СоздатьПрихОрдерСервер(СборкаТоваров, ИсхДанные);
		
		Если ПрихОрдерДок <> Неопределено Тогда
			ПрихОрдерДок = ЗаполнитьПрихОрдерСервер(СборкаТоваров, ИсхДанные, ПрихОрдерДок);
			
			ФормаПрихОрдера = ПолучитьФорму("Документ.ПриходныйОрдерНаТовары.ФормаОбъекта", Новый Структура("Ключ", ПрихОрдерДок));
			ФормаПрихОрдера.Открыть();
			ФормаОбъект = ФормаПрихОрдера.Объект;
			ОбновитьАвтоотметкуНезаполненного(ФормаОбъект.Статус, ФормаПрихОрдера.Элементы.Товары);
			СтатусПриИзмененииСервер(ФормаОбъект);
			
			КолвоИдент = ФормаПрихОрдера.Объект.Товары.Количество();
			ТекИдент = 0;
			ПараметрыУказанияСерий = ФормаПрихОрдера.ПараметрыУказанияСерий;		

			
			Для каждого стр Из ФормаПрихОрдера.Объект.Товары Цикл			
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ЗаполнитьВесУпаковки", Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
				СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки", Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
				СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса", Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
				СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема", Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
				СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
				СтруктураДействий.Вставить("ПересчитатьВесОбъем");
				
				КэшированныеЗначения = Неопределено;
				Модуль_ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(стр, СтруктураДействий, КэшированныеЗначения);
				
				Действия = Новый Структура;
				Действия.Вставить("ПроверитьХарактеристикуПоВладельцу", стр.Характеристика);
				Действия.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", стр.Упаковка);
				Действия.Вставить("ПересчитатьКоличествоЕдиниц");
				Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
				
				Шапка = Новый Структура("Номенклатура, Характеристика, Назначение, ВариантКомплектации, Упаковка,
				|Количество, КоличествоУпаковок, ХарактеристикиИспользуются, ТипНоменклатуры");
				ЗаполнитьЗначенияСвойств(Шапка, стр);
				Модуль_ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Шапка, Действия, КэшированныеЗначения);
				ФормаДанных = ФормаПрихОрдера.Объект;
				ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекИдент, "Товары", ПараметрыУказанияСерий, ФормаДанных);
				ОткрытьПодборСерийЗавершение(ПрихОрдерДок, ПараметрыФормыУказанияСерий, ПараметрыУказанияСерий);
				ТекИдент = ТекИдент + 1;			
			КонецЦикла;
			
			ФормаПрихОрдера.ЭтотОбъект.Записать();
			
			ФормаПрихОрдера.Закрыть();
			ИзменитьСтатусПрихОрдера(ПрихОрдерДок);		
		КонецЕсли;
	КонецЕсли;
	
	
	//Списываем комплектующие
	Если ПроверкаОрдернойСистемыСклад(СборкаТоваров, "Отгрузка") Тогда
		РасхОрдерДок = СоздатьРасхОрдерСервер(СборкаТоваров, ИсхДанные);
		
		Если РасхОрдерДок <> Неопределено Тогда
			РасхОрдерДок = ЗаполнитьРасхОрдерСервер(СборкаТоваров, ИсхДанные, РасхОрдерДок);
			
			ФормаРасхОрдера = ПолучитьФорму("Документ.РасходныйОрдерНаТовары.ФормаОбъекта", Новый Структура("Ключ", РасхОрдерДок));
			ФормаРасхОрдера.Открыть();
			ФормаОбъект = ФормаРасхОрдера.Объект;
			
			Для каждого стр Из ФормаРасхОрдера.Объект.ОтгружаемыеТовары Цикл
				СтруктураСтатус = Новый Структура;
				СтруктураСтатус.Вставить("Склад"                 , ФормаРасхОрдера.Объект.Склад);
				СтруктураСтатус.Вставить("ПараметрыУказанияСерий", ФормаРасхОрдера.ПараметрыУказанияСерий.ОтгружаемыеТовары);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				СтруктураДействий.Вставить("ПересчитатьВесОбъем");
				СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", СтруктураСтатус);
				
				КэшированныеЗначения = Неопределено;
				Модуль_ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(стр, СтруктураДействий, КэшированныеЗначения);			
			КонецЦикла;
			
			ФормаРасхОрдера.ЭтотОбъект.Записать();		
			ФормаРасхОрдера.Закрыть();
			
			ИзменитьСтатусРасхОрдера(РасхОрдерДок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьПараметрыУказанияСерий(Док)
	
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	ТипДок = Док.Метаданные().Имя;
	Возврат Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы[ТипДок]));
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ, ПараметрыУказанияСерий, Док)
	
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	Возврат Модуль_НоменклатураСервер.ПараметрыФормыУказанияСерий(Док, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ОткрытьПодборСерийЗавершение(Док, ДополнительныеПараметры, ПараметрыУказанияСерий) Экспорт
	
	КэшированныеЗначения = Неопределено;
	ДокОб = Док.ПолучитьОбъект();
	ОбработатьУказаниеСерийСервер(ДокОб, ДополнительныеПараметры, Док.Метаданные().ТабличныеЧасти.Товары.Имя, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Объект, ПараметрыФормыУказанияСерий, ИмяТЧ, КэшированныеЗначения, ПараметрыУказанияСерий)
	
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	Модуль_ОбработкаТабличнойЧастиКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиКлиентСервер");
	Модуль_УпаковочныеЛистыСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("УпаковочныеЛистыСервер");
	
	Действия = Новый Структура;
	Действия.Вставить(
	"ПроверитьСериюРассчитатьСтатус",
	Новый Структура("Склад, ПараметрыУказанияСерий",
	Объект.Склад,
	ПараметрыУказанияСерий));
	
	Действия.Вставить(
	"ПересчитатьКоличествоУпаковок",
	Модуль_ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	
	Модуль_НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, Действия, КэшированныеЗначения);
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		Модуль_УпаковочныеЛистыСервер.ПеренумероватьСтроки(ЭтотОбъект, Объект.ОтгружаемыеТовары);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРасхОрдерСервер(СборкаТоваров, ИсхДанные, Док)
	
	Модуль_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
	
	РасхОрдерДок = Док.ПолучитьОбъект();
	РасхОрдерДок.ДатаОтгрузки = ТекущаяДата();
	ЗаполнитьЗначенияСвойств(РасхОрдерДок, СборкаТоваров,, "Номер, Дата");
	РасхОрдерДок.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки;	
	РасхОрдерДок.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний"); 
	РасхОрдерДок.Получатель = СборкаТоваров.Склад;
	РасхОрдерДок.Записать();
	
	ПараметрыУказанияСерий = ПолучитьПараметрыУказанияСерий(РасхОрдерДок);
	
	// тч ОтгружаемыеТовары
	Действия = Новый Структура();
	Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	Действия.Вставить("ПересчитатьВесОбъем");
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус",
	
	Новый Структура("Склад, ПараметрыУказанияСерий", РасхОрдерДок.Склад, ПараметрыУказанияСерий.ОтгружаемыеТовары));
	
	ТЗ = ИсхДанные.СобранныеДанныеПодбор.Выгрузить();
	ТЗ.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ЯчейкаСсылка,СерияСсылка,ШтрихКод","Количество");
	
	Для каждого Стр Из ТЗ Цикл
		СтрТЧ = РасхОрдерДок.ОтгружаемыеТовары.Добавить();
		СтрТЧ.Номенклатура = Стр.Номенклатура;
		СтрТЧ.Характеристика = Стр.ХарактеристикаНоменклатуры;
		СтрТЧ.Количество = Стр.Количество;		
		СтрТЧ.КоличествоУпаковок = Стр.Количество;	         
		СтрТЧ.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		СтрТЧ.Упаковка = Стр.ЕдиницаИзмерения;
		
		Если СтрТЧ.Номенклатура.ВидНоменклатуры.ИспользоватьСерии Тогда
			СтрТЧ.Серия = Стр.СерияСсылка; 
			СтрТЧ.СтатусУказанияСерий = 4;
		КонецЕсли;		
	КонецЦикла;	
	
	РасхОрдерДок.Записать();	
	
	// тч ТоварыПоРаспоряжениям
	Действия = Новый Структура;
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус",
	Новый Структура("Склад, ПараметрыУказанияСерий", РасхОрдерДок.Склад, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям));
	Распоряжение = ?(ЗначениеЗаполнено(СборкаТоваров.ЗаказНаСборку), СборкаТоваров.ЗаказНаСборку, СборкаТоваров.Ссылка);
	
	Для каждого Стр Из ТЗ Цикл
		СтрТЧ = РасхОрдерДок.ТоварыПоРаспоряжениям.Добавить();
		СтрТЧ.Номенклатура = Стр.Номенклатура;
		СтрТЧ.Характеристика = Стр.ХарактеристикаНоменклатуры;
		СтрТЧ.Количество = Стр.Количество;		
		
		СтрТЧ.Распоряжение = Распоряжение;
		
		Если СтрТЧ.Номенклатура.ВидНоменклатуры.ИспользоватьСерии Тогда
			СтрТЧ.Серия = Стр.СерияСсылка; 
			СтрТЧ.СтатусУказанияСерий = 4;
		КонецЕсли;
		
		Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрТЧ, Действия, Неопределено);
	КонецЦикла;
	
	РасхОрдерДок.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;
	РасхОрдерДок.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат РасхОрдерДок.Ссылка;	
КонецФункции

&НаСервере
Функция СоздатьРасхОрдерСервер(СборкаТоваров, ИсхДанные)
	
	Если Не СборкаТоваров.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	РасхОрдерДок = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
	РасхОрдерДок.Дата = ТекущаяДата();
	РасхОрдерДок.Записать();
	
	Возврат РасхОрдерДок.Ссылка;	
	
КонецФункции

&НаСервере
Функция СоздатьПрихОрдерСервер(СборкаТоваров, ИсхДанные)
	
	Если Не СборкаТоваров.Склад.ИспользоватьОрдернуюСхемуПриПоступлении Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	ПрихОрдерДок = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	ПрихОрдерДок.Дата = ТекущаяДата();
	ПрихОрдерДок.Распоряжение = ?(ЗначениеЗаполнено(СборкаТоваров.ЗаказНаСборку), СборкаТоваров.ЗаказНаСборку, СборкаТоваров.Ссылка);
	ПрихОрдерДок.Записать();
	
	Возврат ПрихОрдерДок.Ссылка;
	
КонецФункции

&НаСервере
Функция КоличествоМестВТЧ(ТЧ)
	
	НайденныеСтроки = ТЧ.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", Документы.УпаковочныйЛист.ПустаяСсылка()));
	ВсегоМест = 0;
	Для каждого Стр Из НайденныеСтроки Цикл
		ВсегоМест = ВсегоМест + Стр.КоличествоУпаковок;
	КонецЦикла;
	Возврат ВсегоМест;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПрихОрдерСервер (СборкаТоваров, ИсхДанные, Док)
	
	Модуль_ОбработкаТабличнойЧастиКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиКлиентСервер");
	
	ПрихОрдерДок = Док.ПолучитьОбъект();	
	ЗаполнитьЗначенияСвойств(ПрихОрдерДок, СборкаТоваров, , "Номер, Дата");	
	ПрихОрдерДок.Отправитель = ПрихОрдерДок.Склад;
	ПрихОрдерДок.ВсегоМест = КоличествоМестВТЧ(ПрихОрдерДок.Товары);
	ПрихОрдерДок.Записать();
	ПрихОрдерДок.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
	ПрихОрдерДок.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаСобранныхКомплектов;
	ТЗ = ИсхДанные.СобранныеДанныеПриемка.Выгрузить();
	ТЗ.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ЯчейкаСсылка,СерияСсылка,ШтрихКод","Количество");
	
	ПараметрыУказанияСерий = ПолучитьПараметрыУказанияСерий(ПрихОрдерДок);
	
	Для каждого Стр Из ТЗ Цикл
		СтрТЧ = ПрихОрдерДок.Товары.Добавить();
		СтрТЧ.Номенклатура = Стр.Номенклатура;
		СтрТЧ.Характеристика = Стр.ХарактеристикаНоменклатуры;
		СтрТЧ.КоличествоУпаковок = Стр.Количество; 
		СтрТЧ.Количество = Стр.Количество;		                           
		СтрТЧ.Упаковка = Стр.ЕдиницаИзмерения;
		
		СтруктураСтатус = Новый Структура;
		СтруктураСтатус.Вставить("Склад"                 , ПрихОрдерДок.Склад);
		СтруктураСтатус.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", СтруктураСтатус);
		
		Модуль_ОбработкаТабличнойЧастиКлиентСервер.ОбработатьСтрокуТЧ(СтрТЧ, СтруктураДействий, Неопределено);
		
		Если СтрТЧ.Номенклатура.ВидНоменклатуры.ИспользоватьСерии Тогда
			СтрТЧ.Серия = Стр.СерияСсылка; 
			СтрТЧ.СтатусУказанияСерий = 4;
		КонецЕсли;
	КонецЦикла;
	
	ПрихОрдерДок.Записать();
	
	Возврат ПрихОрдерДок.Ссылка;
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусПрихОрдера(ПрихОрдерДок)  
	Об = ПрихОрдерДок.ПолучитьОбъект(); 
	
	Об.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	Об.Записать(РежимЗаписиДокумента.Проведение);	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусРасхОрдера(РасхОрдерДок)  
	Об = РасхОрдерДок.ПолучитьОбъект();
	
	Об.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	Об.Записать(РежимЗаписиДокумента.Проведение);	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер(Объект)     
	
	Модуль_НоменклатураСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("НоменклатураСервер");
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары));
	Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВРаботе(Команда) 
	
	Модуль_ОбщегоНазначенияКлиентСервер 		= ОбщегоНазначенияКлиент.ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	
	Если Элементы.СписокДокументовДокументыВРаботе.Пометка Тогда		
		Модуль_ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокДокументов, "ДатаЗавершения");
		Модуль_ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокДокументов, "ПометкаУдаления");
		Элементы.СписокДокументовДокументыВРаботе.Пометка = Ложь;
	Иначе		
		Модуль_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументов, "ДатаЗавершения", Дата(1,1,1), ВидСравненияКомпоновкиДанных.Равно,, Истина);
		Модуль_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументов, "ПометкаУдаления", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		Элементы.СписокДокументовДокументыВРаботе.Пометка = Истина;
	КонецЕсли;   
	
КонецПроцедуры

//ДАННЫЕ ПРОВЕРКИ ЕГАИС
&НаСервереБезКонтекста
Функция ПолучитьНастройкуПонижатьДетализацию(Об)
	Возврат Об.Шаблон.ЕГАИСПонижатьДетализациюПроверкиТТНДоБутылок;
КонецФункции	
&НаСервереБезКонтекста
Функция ИнициализироватьДанныеПроверкиДокументаБД(ДокументБДСсылка, ПонижатьДетализацию)
	
	ТекстОшибки = "";
	
	Если РезультатыПроверкиУспешноСохранены(ДокументБДСсылка, ПонижатьДетализацию, ТекстОшибки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатаМобайл_ОбщийМодуль.СообщитьПользователю(ТекстОшибки);
	
	Возврат Ложь;	
	
КонецФункции
&НаСервереБезКонтекста
Функция РезультатыПроверкиУспешноСохранены(ДокументБДСсылка, ПонижатьДетализацию, ТекстОшибки)
	
	Попытка	
		ДокументОснованиеОбъект = ДокументБДСсылка.ПолучитьОбъект();
		ДокументОснованиеОбъект.Заблокировать();	
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;	
	КонецПопытки;
	
	Попытка
		ДанныеРезультатовПроверки = НачальныеДанныеДляРезультатовПроверки(ДокументОснованиеОбъект, ПонижатьДетализацию);
		ДокументОснованиеОбъект["ДанныеПроверкиИПодбора"] = Новый ХранилищеЗначения(ДанныеРезультатовПроверки);	
		РежимЗаписи = ?(ДокументОснованиеОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);	
		ДокументОснованиеОбъект.Записать(РежимЗаписи);
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;	
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
&НаСервереБезКонтекста
Функция НачальныеДанныеДляРезультатовПроверки(ДокументОснованиеОбъект, ПонижатьДетализацию)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",             ДеревоМаркированнойПродукции());
	ДанныеДокумента.Вставить("ТаблицаНеМаркируемойПродукции",            ТаблицаНеМаркируемойПродукции());
	ДанныеДокумента.Вставить("ПулНеизвестныхАкцизныхМарок",              ПулНеизвестныхАкцизныхМарок());
	ДанныеДокумента.Вставить("АлкогольнаяПродукцияКОпределениюСправок2", АлкогольнаяПродукцияКОпределениюСправок2());
	ДанныеДокумента.Вставить("Справки2СопоставленнаяНоменклатура",       Справки2СопоставленнаяНоменклатура());
	ДанныеДокумента.Вставить("ТаблицаШтрихкодовНеМаркируемойПродукции",  ТаблицаШтрихкодовНеМаркируемойПродукции());
	
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",             Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная);
	ДанныеДокумента.Вставить("УпаковкиДокумента",                        Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДобавленныеУпаковки",                      Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",             Новый СписокЗначений());
	
	ДанныеДокумента.Вставить("РежимПроверки",                            Перечисления.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены);
	ДанныеДокумента.Вставить("СледующийСтикерОтложено",                  1);
	ДанныеДокумента.Вставить("СохраненВыборПоМаркируемойПродукции",      Ложь);
	ДанныеДокумента.Вставить("ДанныеВыбораПоМаркируемойПродукции",       Неопределено);
	ДанныеДокумента.Вставить("ШтрихкодТекущейПроверяемойУпаковки",       "");	
	ДанныеДокумента.Вставить("ДанныеРанееСгенерированныхШтрихкодов", 	  Неопределено);
	ДанныеДокумента.Вставить("СообщениеПротоколаОбмена",                 "");
		
	//нужны для первоначального получения данных
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",                  Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось);
	ДанныеДокумента.Вставить("РедактированиеФормыНедоступно",            Истина);
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная);
	ДанныеДокумента.Вставить("СтрокаБутылкиБезКоробки", Неопределено);	
	
	Если ТипЗнч(ДокументОснованиеОбъект.Ссылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда 
		ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок", Ложь);	
		ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ДокументОснованиеОбъект.Ссылка);
		
		Модуль_ИнтеграцияЕГАИСПереопределяемый = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтеграцияЕГАИСПереопределяемый");
		
		Модуль_ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьТаблицуШтрихкодовНеМаркируемойПродукцииТТН_ЕГАИС(
		ДокументОснованиеОбъект.Ссылка, ДанныеДокумента.ТаблицаШтрихкодовНеМаркируемойПродукции);
		
		Модуль_ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьТаблицуСопоставленныхСправок2ТТН_ЕГАИС(
		ДокументОснованиеОбъект.Ссылка, ДанныеДокумента.Справки2СопоставленнаяНоменклатура);
		
		ЗагрузитьДеревоМаркированнойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента);
		ЗаполнитьТаблицуПартионнойПродукции(ДанныеПроверяемогоДокумента.ТоварыБезАкцизныхМарок, ДанныеДокумента);
		ЗаполнитьПулНеизвестныхАкцизныхМарок(ДанныеДокумента);		
	Иначе		
		Модуль_ШтрихкодированиеЕГАИС = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		
		ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок", Истина);
		Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
		МенеджерДокумента = Модуль_ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОснованиеОбъект.Ссылка);
		ТаблицаКОпределениюСправок2 = МенеджерДокумента.ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументОснованиеОбъект.Ссылка);
		ДанныеПроверяемогоДокумента = Модуль_ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументОснованиеОбъект.Ссылка, Истина);
		
		ЗаполнитьДеревоКОпределениюСправок2(ТаблицаКОпределениюСправок2, ДанныеДокумента);
		ЗагрузитьДеревоМаркированнойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента);
		ЗаполнитьКоличествоРаспределеноСправок2(ДанныеДокумента);		
	КонецЕсли;
		
	Если ПонижатьДетализацию Тогда
		ПонизитьУровеньДетализацииДоБутылки(ДанныеДокумента.ДеревоМаркированнойПродукции);
		ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки;
		ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки;
	КонецЕсли;		
	
	ДанныеРезультатовСканированияАлкогольнойПродукции = Новый Структура;
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДеревоМаркированнойПродукции",             ДанныеДокумента.ДеревоМаркированнойПродукции);  //Тип("ДеревоЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ТаблицаНеМаркируемойПродукции",            ДанныеДокумента.ТаблицаНеМаркируемойПродукции); //Тип("ТаблицаЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ПулНеизвестныхАкцизныхМарок",              ДанныеДокумента.ПулНеизвестныхАкцизныхМарок); //Тип("ТаблицаЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("АлкогольнаяПродукцияКОпределениюСправок2", ДанныеДокумента.АлкогольнаяПродукцияКОпределениюСправок2); //Тип("ДеревоЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("УпаковкиДокумента",                        ДанныеДокумента.УпаковкиДокумента);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДетализацияСтруктурыХранения",             ДанныеДокумента.ДетализацияСтруктурыХранения);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("РежимПроверки",                            ДанныеДокумента.РежимПроверки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДобавленныеУпаковки",                      ДанныеДокумента.ДобавленныеУпаковки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",             ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("СледующийСтикерОтложено",                  ДанныеДокумента.СледующийСтикерОтложено);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("СохраненВыборПоМаркируемойПродукции",      ДанныеДокумента.СохраненВыборПоМаркируемойПродукции);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДанныеВыбораПоМаркируемойПродукции",       ДанныеДокумента.ДанныеВыбораПоМаркируемойПродукции);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ШтрихкодТекущейПроверяемойУпаковки",       ДанныеДокумента.ШтрихкодТекущейПроверяемойУпаковки);	
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДанныеРанееСгенерированныхШтрихкодов", 	   ДанныеДокумента.ДанныеРанееСгенерированныхШтрихкодов);
	
	Возврат ДанныеРезультатовСканированияАлкогольнойПродукции;
	
КонецФункции
&НаСервереБезКонтекста
Функция ДеревоМаркированнойПродукции()
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки", Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаАлкогольнойПродукции, ПеречислениеСсылка.ТипыУпаковок"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиШтрихкод",              Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",             Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("АлкогольнаяПродукция",                Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Справка2",                            Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки",     Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхБутылок",        Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",          Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",  Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяАлкогольнаяПродукция", Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСправки2",             Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсеСправки2Указаны",                  Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ДлинаАкцизнойМарки",                  Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеДлиныМарок",           Новый ОписаниеТипов("Булево"));	
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции
&НаСервереБезКонтекста
Функция ТаблицаНеМаркируемойПродукции()
	
	ТаблицаНеМаркируемойПродукции = Новый ТаблицаЗначений();
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("АлкогольнаяПродукция",  Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("Справка2",              Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("КоличествоПоДокументу", Новый ОписаниеТипов("Число"));
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("КоличествоФактическое", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаНеМаркируемойПродукции;
	
КонецФункции
&НаСервереБезКонтекста
Функция ПулНеизвестныхАкцизныхМарок()
	
	ПулНеизвестныхАкцизныхМарок = Новый ТаблицаЗначений();
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("Справка2",             Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("Поштучная",            Новый ОписаниеТипов("Булево"));
	
	Возврат ПулНеизвестныхАкцизныхМарок;
	
КонецФункции
&НаСервереБезКонтекста
Функция АлкогольнаяПродукцияКОпределениюСправок2()
	
	АлкогольнаяПродукцияКОпределениюСправок2 = Новый ДеревоЗначений();
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Номенклатура",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Характеристика",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Серия",                  Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("АлкогольнаяПродукция",   Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Справка2",               Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Количество",             Новый ОписаниеТипов("Число"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("КоличествоРаспределено", Новый ОписаниеТипов("Число"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Маркируемая",            Новый ОписаниеТипов("Булево"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("ИндексАкцизнойМарки",    Новый ОписаниеТипов("Число"));
	
	Возврат АлкогольнаяПродукцияКОпределениюСправок2;
	
КонецФункции
&НаСервереБезКонтекста
Функция Справки2СопоставленнаяНоменклатура()
	
	Справки2СопоставленнаяНоменклатура = Новый ТаблицаЗначений();
	Справки2СопоставленнаяНоменклатура.Колонки.Добавить("Справка2",       Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	Справки2СопоставленнаяНоменклатура.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Справки2СопоставленнаяНоменклатура.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	Возврат Справки2СопоставленнаяНоменклатура;
	
КонецФункции
&НаСервереБезКонтекста
Функция ТаблицаШтрихкодовНеМаркируемойПродукции()
	
	ТаблицаШтрихкодовНеМаркируемойПродукции = Новый ТаблицаЗначений();
	ТаблицаШтрихкодовНеМаркируемойПродукции.Колонки.Добавить("Штрихкод",             Новый ОписаниеТипов("Строка"));	
	ТаблицаШтрихкодовНеМаркируемойПродукции.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ТаблицаШтрихкодовНеМаркируемойПродукции.Колонки.Добавить("Коэффициент",          Новый ОписаниеТипов("Число"));	
	
	Возврат ТаблицаШтрихкодовНеМаркируемойПродукции;
	
КонецФункции
&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоКОпределениюСправок2(ТаблицаКОпределениюСправок2, ДанныеДокумента)
	
	Для каждого СтрокаТаблицы Из ТаблицаКОпределениюСправок2 Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.АлкогольнаяПродукция)
			И Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Модуль_ПроверкаИПодборПродукцииЕГАИСКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПроверкаИПодборПродукцииЕГАИСКлиентСервер");
		НоваяСтрока = ДанныеДокумента.АлкогольнаяПродукцияКОпределениюСправок2.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Модуль_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораАкцизныхМарок(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ЗаполнитьКоличествоРаспределеноСправок2(ДанныеДокумента)
	
	СтрокиДанныхПроверки = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого ГруппировкаСтрок Из СтрокиДанныхПроверки Цикл					
		
		//ПРОВЕРКА ПО УПАКОВКАМ (марки,короб,палета, далее не учитываем)
		
		//ПЕРВЫЙ УРОВЕНЬ
		Если ГруппировкаСтрок.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка 
			Или  ГруппировкаСтрок.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
			
			Для каждого СтрокаУпаковкаПервыйУровень Из ГруппировкаСтрок.Строки Цикл
				
				//ВТОРОЙ УРОВЕНЬ
				Если СтрокаУпаковкаПервыйУровень.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка 
					Или  СтрокаУпаковкаПервыйУровень.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
					Для каждого СтрокаУпаковкаВторойУровень Из СтрокаУпаковкаПервыйУровень.Строки Цикл
						ДобавитьКоличествоОпределеннойСправки2(ДанныеДокумента, СтрокаУпаковкаВторойУровень);				
					КонецЦикла;
				Иначе
					ДобавитьКоличествоОпределеннойСправки2(ДанныеДокумента, СтрокаУпаковкаПервыйУровень);
				КонецЕсли;
			КонецЦикла;								
		ИначеЕсли ГруппировкаСтрок.Представление = "Бутылки без упаковки" Тогда
			Для каждого СтрокаМарка Из ГруппировкаСтрок.Строки Цикл	
				ДобавитьКоличествоОпределеннойСправки2(ДанныеДокумента, СтрокаМарка);				
			КонецЦикла;			
		Иначе		
			ДобавитьКоличествоОпределеннойСправки2(ДанныеДокумента, ГруппировкаСтрок);					
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ДобавитьКоличествоОпределеннойСправки2(ДанныеДокумента, СтрокаМарка)
	
	Если ЗначениеЗаполнено(СтрокаМарка.АлкогольнаяПродукция) Тогда
		
		Для каждого СтрокаРаспределенияПервыйУровень Из ДанныеДокумента.АлкогольнаяПродукцияКОпределениюСправок2.Строки Цикл
			
			Если СтрокаРаспределенияПервыйУровень.АлкогольнаяПродукция = СтрокаМарка.АлкогольнаяПродукция Тогда
				СтрокаРаспределенияПервыйУровень.КоличествоРаспределено = СтрокаРаспределенияПервыйУровень.КоличествоРаспределено + 1;	
				Для каждого СтрокаРаспределенияУровеньВторойУровень Из СтрокаРаспределенияПервыйУровень.Строки Цикл
					СтрокаРаспределенияУровеньВторойУровень.КоличествоРаспределено = СтрокаРаспределенияУровеньВторойУровень.КоличествоРаспределено + 1;
				КонецЦикла;
				Модуль_ПроверкаИПодборПродукцииЕГАИСКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПроверкаИПодборПродукцииЕГАИСКлиентСервер");
				Модуль_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораАкцизныхМарок(СтрокаРаспределенияПервыйУровень);
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЦикла;				
	КонецЕсли;
		
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ЗагрузитьДеревоМаркированнойПродукции(ДеревоПоДаннымДокумента, ДанныеДокумента)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева(ДеревоПоДаннымДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоПоДаннымДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная
			Или ДетализацияСтруктурыХраненияДанныхДокумента = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.КоробаСБутылками Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаПоДаннымДокумента Из ДеревоПоДаннымДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаПоДаннымДокумента, КоллекцияСтрокПриемника, ДанныеДокумента);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаБутылкиБезКоробки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки Тогда
		ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуПартионнойПродукции(ДанныеПартионнойПродукции, ДанныеДокумента)
	
	Для каждого СтрокаТаблицы Из ДанныеПартионнойПродукции Цикл
		
		НоваяСтрока = ДанныеДокумента.ТаблицаНеМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.КоличествоПоДокументу = СтрокаТаблицы.Количество;
		
	КонецЦикла;
	
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ЗаполнитьПулНеизвестныхАкцизныхМарок(ДанныеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2 КАК Справка2,
	|	ДанныеПартионнойПродукции.КоличествоПоДокументу КАК Количество,
	|	ДанныеПартионнойПродукции.КоличествоФактическое КАК КоличествоФактическое
	|ПОМЕСТИТЬ ДанныеПартионнойПродукции
	|ИЗ
	|	&ДанныеПартионнойПродукции КАК ДанныеПартионнойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция               КАК АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2                           КАК Справка2,
	|	ЕСТЬNULL(ДанныеПартионнойПродукции.Справка2.Поштучная, ЛОЖЬ) КАК Поштучная,
	|	СУММА(ДанныеПартионнойПродукции.Количество)                  КАК Количество
	|ИЗ
	|	ДанныеПартионнойПродукции КАК ДанныеПартионнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ДанныеПартионнойПродукции.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	ВидыАлкогольнойПродукции.Маркируемый
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2,
	|	ЕСТЬNULL(ДанныеПартионнойПродукции.Справка2.Поштучная, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("ДанныеПартионнойПродукции", ДанныеДокумента.ТаблицаНеМаркируемойПродукции);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.ПулНеизвестныхАкцизныхМарок.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок) Экспорт
	
	ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки;
	
	Для каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Модуль_ИнтеграцияИСКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтеграцияИСКлиентСервер");
			
		Если Модуль_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.КоробаСБутылками;
			
			Для каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
				
				Если Модуль_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
					
					ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции
&НаСервереБезКонтекста
Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента)
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБутылкиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
				
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента);
				
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки Тогда
		
		СтрокаБутылкиБезУпаковки = ДанныеДокумента.СтрокаБутылкиБезКоробки;
		
		Если СтрокаБутылкиБезУпаковки = Неопределено Тогда
			СтрокаБутылкиБезУпаковки = ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБутылкиБезУпаковки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		НоваяСтрока.ДлинаАкцизнойМарки = СтрДлина(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	Модуль_ПроверкаИПодборПродукцииЕГАИСКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПроверкаИПодборПродукцииЕГАИСКлиентСервер");
	Модуль_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	Модуль_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	Модуль_ИнтеграцияИСКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Если Модуль_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	КоллекцияСтрокДобавленнойСтроки = НоваяСтрока.Строки;
	
	Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокДобавленнойСтроки, ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	Модуль_ПроверкаИПодборПродукцииЕГАИСКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПроверкаИПодборПродукцииЕГАИСКлиентСервер");
	Модуль_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ЗаполнитьСтрокуБутылкиБезКоробки(НоваяСтрока);
	
	ДанныеДокумента.СтрокаБутылкиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции
&НаСервереБезКонтекста
Процедура ВнестиДанныеПроверкиВДокумент(ДокументБД)
	
	ДокументБДОбъект = ДокументБД.ПолучитьОбъект();
	ДанныеПроверки = ДокументБДОбъект.ДанныеПроверкиИПодбора.Получить();
	
	МассивАкцизныхМарок = ДокументБДОбъект.АкцизныеМарки.ВыгрузитьКолонку("АкцизнаяМарка");
	МассивКодовЕГАИС = Новый Массив;	
	Для каждого ЭлементМассива Из МассивАкцизныхМарок Цикл
		МассивКодовЕГАИС.Добавить(ЭлементМассива.ЗначениеШтрихкода);
	КонецЦикла;
	
	СтрокиДанныхПроверки = ДанныеПроверки.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого ГруппировкаСтрок Из СтрокиДанныхПроверки Цикл	
		
		Попытка 
			ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
			ГруппировкаСтрокШтрихкод = ГруппировкаСтрок.ЗначениеШтрихкода;
		Исключение
			ИмяКолонкиШтрихкода = "Штрихкод";
			ГруппировкаСтрокШтрихкод = ГруппировкаСтрок.Штрихкод;
		КонецПопытки;
		
		Попытка 
			СтатусВНаличии = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии;
			СтатусОтсутствует = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует;
		Исключение
			СтатусВНаличии = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			СтатусОтсутствует = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
		КонецПопытки;
			
		//ПРОВЕРКА ПО УПАКОВКАМ (марки,короб,палета, далее не учитываем)
		
		//ПЕРВЫЙ УРОВЕНЬ
		Если ГруппировкаСтрок.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка 
			Или ГруппировкаСтрок.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
			
			ВсеСтрокиУпаковкаПервыйУровеньЕсть = Истина;
			Для каждого СтрокаУпаковкаПервыйУровень Из ГруппировкаСтрок.Строки Цикл
				
				//ВТОРОЙ УРОВЕНЬ
				Если СтрокаУпаковкаПервыйУровень.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка 
					Или СтрокаУпаковкаПервыйУровень.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
					
					ВсеСтрокиУпаковкаВторойУровеньЕсть = Истина;	
					Для каждого СтрокаУпаковкаВторойУровень Из СтрокаУпаковкаПервыйУровень.Строки Цикл
						СтрокаШтрихкодУпаковкаВторойУровень = СтрокаУпаковкаВторойУровень[ИмяКолонкиШтрихкода];
						Если МассивКодовЕГАИС.Найти(СтрокаШтрихкодУпаковкаВторойУровень) <> Неопределено Тогда
							СтрокаУпаковкаВторойУровень.СтатусПроверки = СтатусВНаличии;
						Иначе
							СтрокаУпаковкаВторойУровень.СтатусПроверки = СтатусОтсутствует;
							ВсеСтрокиУпаковкаПервыйУровеньЕсть = Ложь;
							ВсеСтрокиУпаковкаВторойУровеньЕсть = Ложь;
						КонецЕсли;
					КонецЦикла;
					
					Если ВсеСтрокиУпаковкаВторойУровеньЕсть Тогда
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусВНаличии;
					Иначе
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусОтсутствует;
					КонецЕсли;
					
				Иначе
					СтрокаШтрихкодУпаковкаПервыйУровень = СтрокаУпаковкаПервыйУровень[ИмяКолонкиШтрихкода];
					Если МассивКодовЕГАИС.Найти(СтрокаШтрихкодУпаковкаПервыйУровень) <> Неопределено Тогда
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусВНаличии;
					Иначе
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусОтсутствует;
						ВсеСтрокиУпаковкаПервыйУровеньЕсть = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ВсеСтрокиУпаковкаПервыйУровеньЕсть Тогда
				ГруппировкаСтрок.СтатусПроверки = СтатусВНаличии;
			Иначе
				ГруппировкаСтрок.СтатусПроверки = СтатусОтсутствует;
			КонецЕсли;
			
		ИначеЕсли ГруппировкаСтрок.Представление = "Бутылки без упаковки" Тогда
			
			Для каждого СтрокаМарка Из ГруппировкаСтрок.Строки Цикл
				
				СтрокаМаркиШтрихкод = СтрокаМарка[ИмяКолонкиШтрихкода];
				Если МассивКодовЕГАИС.Найти(СтрокаМаркиШтрихкод) <> Неопределено Тогда
					СтрокаМарка.СтатусПроверки = СтатусВНаличии;	
				Иначе
					СтрокаМарка.СтатусПроверки = СтатусОтсутствует;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если МассивКодовЕГАИС.Найти(ГруппировкаСтрокШтрихкод) <> Неопределено Тогда
				ГруппировкаСтрок.СтатусПроверки = СтатусВНаличии;
			Иначе
				ГруппировкаСтрок.СтатусПроверки = СтатусОтсутствует;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если ДанныеПроверки.ТаблицаНеМаркируемойПродукции.Количество() > 0 Тогда
		
		ТоварыФакт = ДокументБДОбъект.Товары.Выгрузить();
		ТоварыФакт.Свернуть("АлкогольнаяПродукция, Справка2", "КоличествоФакт");
		
		Для каждого СтрокаНеМаркПродукции Из ДанныеПроверки.ТаблицаНеМаркируемойПродукции Цикл
			
			РезультатПоиска = ТоварыФакт.НайтиСтроки(Новый Структура("АлкогольнаяПродукция, Справка2", 
			СтрокаНеМаркПродукции.АлкогольнаяПродукция, СтрокаНеМаркПродукции.Справка2));
			
			Если РезультатПоиска.Количество() > 0 Тогда
				СтрокаНеМаркПродукции.КоличествоФактическое = РезультатПоиска[0].КоличествоФакт;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ХранилищеДанныхПроверки = Новый ХранилищеЗначения(ДанныеПроверки);
	ДокументБДОбъект.ДанныеПроверкиИПодбора = ХранилищеДанныхПроверки;
	
	Попытка
		ДокументБДОбъект.Записать();
	Исключение
		Сообщить("Ошибка записи документа после внесения данных о проверке!");
	КонецПопытки;	
	
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ПонизитьУровеньДетализацииДоБутылки(ДеревоМаркированнойПродукции)
	
	СтрокиВерхнегоУровня = ДеревоМаркированнойПродукции.Строки;
	
	МассивСтрокКОбработке = Новый Массив;
	Для каждого СтрокаДерева Из СтрокиВерхнегоУровня Цикл
		МассивСтрокКОбработке.Добавить(СтрокаДерева);
	КонецЦикла;
	
	Для каждого СтрокаДерева Из МассивСтрокКОбработке Цикл
		
		Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			ПонизитьУровеньДетализацииУпаковкиДоБутылки(ДеревоМаркированнойПродукции, СтрокаДерева);
			СтрокиВерхнегоУровня.Удалить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ПонизитьУровеньДетализацииУпаковкиДоБутылки(ДеревоМаркированнойПродукции, СтрокаДерева)
	
	ПодчиненныеСтроки = СтрокаДерева.Строки;
	
	Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			ПонизитьУровеньДетализацииУпаковкиДоБутылки(ДеревоМаркированнойПродукции, ПодчиненнаяСтрока);
			
		Иначе
			
			НоваяСтрока = ДеревоМаркированнойПродукции.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодчиненныеСтроки.Очистить();
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ЭтоУпаковка(ТипУпаковки)
	
	Возврат ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
	Или ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	
КонецФункции

//НОВЫЕ ТОВАРЫ
&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере() 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДатаМобайл_НовыеТовары.Ссылка
	|ИЗ
	|	Справочник.ДатаМобайл_НовыеТовары КАК ДатаМобайл_НовыеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
	|		ПО ДатаМобайл_НовыеШтрихкоды.Номенклатура = ДатаМобайл_НовыеТовары.Ссылка
	|ГДЕ
	|	ДатаМобайл_НовыеТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ДатаМобайл_НовыеШтрихкоды.ШтрихКод ЕСТЬ NULL ");
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		об = Рез.Ссылка.ПолучитьОбъект();
		об.Удалить();
	КонецЦикла;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.Ссылка, ДатаМобайл_НовыеШтрихкоды.Номенклатура) КАК Ссылка,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.Наименование, ДатаМобайл_НовыеШтрихкоды.Номенклатура.Наименование) КАК Наименование,
	|	ДатаМобайл_НовыеТовары.Пользователь КАК АвторТовара,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.Номенклатура, ДатаМобайл_НовыеШтрихкоды.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.ХарактеристикаНоменклатуры, ДатаМобайл_НовыеШтрихкоды.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.Номенклатура.ВидНоменклатуры, ЕСТЬNULL(ДатаМобайл_НовыеШтрихкоды.Номенклатура.ВидНоменклатуры, &ВидНоменклатурыПоУмолчанию)) КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.Номенклатура.Родитель, ЕСТЬNULL(ДатаМобайл_НовыеШтрихкоды.Номенклатура.Родитель, &ГруппаНоменклатурыПоУмолчанию)) КАК ГруппаНоменклатуры,
	|	ДатаМобайл_НовыеШтрихкоды.ШтрихКод КАК ШтрихКод,
	|	ДатаМобайл_НовыеШтрихкоды.Коэффициент КАК Коэффициент,
	|	ДатаМобайл_НовыеШтрихкоды.Наименование КАК НаименованиеУпаковки,
	|	ДатаМобайл_НовыеШтрихкоды.Пользователь КАК АвторШтрихкода,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.attr_1, """") КАК attr_1,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.attr_2, """") КАК attr_2,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.attr_3, """") КАК attr_3,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.attr_4, """") КАК attr_4,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.attr_5, """") КАК attr_5,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.attr_6, """") КАК attr_6,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.attr_7, """") КАК attr_7,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.attr_8, """") КАК attr_8,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.attr_9, """") КАК attr_9,
	|	ЕСТЬNULL(ДатаМобайл_НовыеТовары.attr_10, """") КАК attr_10
	|ПОМЕСТИТЬ СписокОбъектов
	|ИЗ
	|	РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_НовыеТовары КАК ДатаМобайл_НовыеТовары
	|		ПО ДатаМобайл_НовыеШтрихкоды.Номенклатура = ДатаМобайл_НовыеТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокОбъектов.Ссылка КАК Ссылка,
	|	СписокОбъектов.Наименование КАК Наименование,
	|	СписокОбъектов.АвторТовара КАК АвторТовара,
	|	СписокОбъектов.Номенклатура КАК Номенклатура,
	|	СписокОбъектов.Характеристика КАК Характеристика,
	|	СписокОбъектов.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СписокОбъектов.ГруппаНоменклатуры КАК ГруппаНоменклатуры,
	|	СписокОбъектов.ШтрихКод КАК ШтрихКод,
	|	СписокОбъектов.Коэффициент КАК Коэффициент,
	|	СписокОбъектов.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	СписокОбъектов.АвторШтрихкода КАК АвторШтрихкода,
	|	СписокОбъектов.attr_1 КАК attr_1,
	|	СписокОбъектов.attr_2 КАК attr_2,
	|	СписокОбъектов.attr_3 КАК attr_3,
	|	СписокОбъектов.attr_4 КАК attr_4,
	|	СписокОбъектов.attr_5 КАК attr_5,
	|	СписокОбъектов.attr_6 КАК attr_6,
	|	СписокОбъектов.attr_7 КАК attr_7,
	|	СписокОбъектов.attr_8 КАК attr_8,
	|	СписокОбъектов.attr_9 КАК attr_9,
	|	СписокОбъектов.attr_10 КАК attr_10,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СписокОбъектов.Ссылка) = ТИП(Справочник.номенклатура)
	|			ТОГДА СписокОбъектов.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЕСТЬNULL(ЕдиницыИзмеренияБазовые.Ссылка, &БазоваяЕдиницаПоУмолчанию)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|	ЕСТЬNULL(ЕдиницыИзмеренияБазовые.ЕдиницаИзмерения, ЕСТЬNULL(ЕдиницыИзмеренияБазовые.Ссылка, &БазоваяЕдиницаПоУмолчанию)) КАК ЕдиницаУпаковки
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	СписокОбъектов КАК СписокОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмеренияБазовые
	|		ПО СписокОбъектов.НаименованиеУпаковки = ЕдиницыИзмеренияБазовые.Наименование
	|			И (ЕдиницыИзмеренияБазовые.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итог.Ссылка КАК Ссылка,
	|	Итог.Наименование КАК Наименование,
	|	Итог.АвторТовара КАК АвторТовара,
	|	Итог.Номенклатура КАК Номенклатура,
	|	Итог.Характеристика КАК Характеристика,
	|	Итог.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Итог.ГруппаНоменклатуры КАК ГруппаНоменклатуры,
	|	Итог.ШтрихКод КАК ШтрихКод,
	|	Итог.Коэффициент КАК Коэффициент,
	|	Итог.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	Итог.АвторШтрихкода КАК АвторШтрихкода,
	|	Итог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Итог.Упаковка КАК Упаковка,
	|	Итог.ЕдиницаУпаковки КАК ЕдиницаУпаковки,
	|	Итог.attr_1 КАК attr_1,
	|	Итог.attr_2 КАК attr_2,
	|	Итог.attr_3 КАК attr_3,
	|	Итог.attr_4 КАК attr_4,
	|	Итог.attr_5 КАК attr_5,
	|	Итог.attr_6 КАК attr_6,
	|	Итог.attr_7 КАК attr_7,
	|	Итог.attr_8 КАК attr_8,
	|	Итог.attr_9 КАК attr_9,
	|	Итог.attr_10 КАК attr_10
	|ИЗ
	|	Итог КАК Итог
	|ГДЕ
	|	Итог.ЕдиницаИзмерения.Код <> """"");
	
	Запрос.УстановитьПараметр("ВидНоменклатурыПоУмолчанию", НовыеТовары_ВидНоменклатуры);
	Запрос.УстановитьПараметр("ГруппаНоменклатурыПоУмолчанию", НовыеТовары_ГруппаНоменклатуры);
	
	Запрос.УстановитьПараметр("БазоваяЕдиницаПоУмолчанию", Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796"));
	НовыеТоварыШтрихкоды.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВидаНоменклатуры(ВидНомеклатуры, НоменклатураОбъект)
	
	Если ЗначениеЗаполнено(ВидНомеклатуры) Тогда
		ЗаполнитьЗначенияСвойств(НоменклатураОбъект, ВидНомеклатуры,, "Владелец, Наименование, Родитель");
	ИначеЕсли ЗначениеЗаполнено(НовыеТовары_ВидНоменклатуры) Тогда
		ЗаполнитьЗначенияСвойств(НоменклатураОбъект, НовыеТовары_ВидНоменклатуры,, "Владелец, Наименование, Родитель");	
	КонецЕсли; 
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьДанныеВидаНоменклатурыРедактированиеФормы(ВидНоменклатуры)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТипНоменклатуры", ВидНоменклатуры.ТипНоменклатуры);
	СтруктураВозврата.Вставить("СтавкаНДС", ВидНоменклатуры.СтавкаНДС);
	СтруктураВозврата.Вставить("ГруппаДоступа", ВидНоменклатуры.ГруппаДоступа);
	СтруктураВозврата.Вставить("ВариантОформленияПродажи", ВидНоменклатуры.ВариантОформленияПродажи);
	СтруктураВозврата.Вставить("ИспользованиеХарактеристик", ВидНоменклатуры.ИспользованиеХарактеристик);
	СтруктураВозврата.Вставить("СкладскаяГруппа", ВидНоменклатуры.СкладскаяГруппа);
	
	Возврат СтруктураВозврата;
	
КонецФункции	

&НаКлиенте
Процедура НовыеТоварыШтрихкодыУпаковкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.НовыеТоварыШтрихкоды.ТекущиеДанные;
	ТекущиеДанные.ЕдиницаУпаковки = ВернутьЕдиницуПоУпаковке(ТекущиеДанные.Упаковка);
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьНовыеТоварыШтрихкоды(Команда)
	ВыделитьНовыеТоварыШтрихкодыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыделитьНовыеТоварыШтрихкодыНаСервере()
	Для каждого СтрокаТовара Из НовыеТоварыШтрихкоды Цикл	
		строкаТовара.Обрабатывать = Истина;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеНовыеТоварыШтрихкоды(Команда)
	СнятьВыделениеНовыеТоварыШтрихкодыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СнятьВыделениеНовыеТоварыШтрихкодыНаСервере()
	Для каждого СтрокаТовара Из НовыеТоварыШтрихкоды Цикл	
		строкаТовара.Обрабатывать = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьЕдиницуПоУпаковке(Упаковка)
	Возврат Упаковка.ЕдиницаИзмерения;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьНовыйТоварВСправочник(лПараметрыСоздания)
	
	Для каждого СтрокаПривязанногоШК Из лПараметрыСоздания.МассивШК Цикл
		старНЗ = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
		старНЗ.Отбор.Штрихкод.Установить(СтрокаПривязанногоШК);
		старНЗ.Прочитать();
		старНЗ.Очистить();
		старНЗ.Записать(Истина);	
	КонецЦикла;	     
	
	Если лПараметрыСоздания.Свойство("НовыйТовар") Тогда
		Если ЗначениеЗаполнено(лПараметрыСоздания.НовыйТовар) Тогда
			Об = лПараметрыСоздания.НовыйТовар.ПолучитьОбъект();
			Попытка Об.Удалить(); Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Истина; 
		
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьНовыеШтрихкодыВРегистр(лПараметрыСоздания)
	
	Попытка
		Если ЗначениеЗаполнено(лПараметрыСоздания.НоменклатураСсылка) Тогда
			Для каждого НовыйШК Из лПараметрыСоздания.МассивШК Цикл 			
				ШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
				ШК.Штрихкод = НовыйШК;
				ШК.Номенклатура = лПараметрыСоздания.НоменклатураСсылка;
				ШК.Записать(Истина); 
			КонецЦикла;	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСозданиеТовара(лРезультатЗакрытия, лПараметрыСоздания)Экспорт
	
	Если Не ЗначениеЗаполнено(лПараметрыСоздания.НоменклатураСсылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(лПараметрыСоздания.НоменклатураСсылка) Тогда		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Ссылка", лПараметрыСоздания.НовыйТовар);	
		МассивСтрокТаблицы = НовыеТоварыШтрихкоды.НайтиСтроки(СтруктураПоиска);
		МассивШК = Новый Массив;
		Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
			МассивШК.Добавить(СтрокаТаблицы.Штрихкод);		
		КонецЦикла;	
		лПараметрыСоздания.Вставить("МассивШК", МассивШК);
		ЗаписатьНовыеШтрихкодыВРегистр(лПараметрыСоздания);
		ЗаписатьНовыйТоварВСправочник(лПараметрыСоздания);		
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТовар(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Обрабатывать", Истина);
	
	МассивСтрок = НовыеТоварыШтрихкоды.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Сообщить("Выберите товары/штрихкоды!");
		Возврат;
	КонецЕсли;	
	
	//привязываем ШК у строк, у которых указана номенклатура и ШК.
	БылиОбработаныШК = Ложь;
	ПривязатьШтрихкодыНаСервере(БылиОбработаныШК);
	Если БылиОбработаныШК Тогда
		МассивСтрок = НовыеТоварыШтрихкоды.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;		
	
	//требуется открытие формы	
	Если РедактироватьТоварыПередСозданием Тогда
		
		Если МассивСтрок.Количество() = 1 Тогда
			ТД = МассивСтрок[0];
			Если ТД = Неопределено Тогда
				Сообщить("Для создания новых товаров выберите их по отдельности!");
				Возврат;
			КонецЕсли; 
		Иначе
			Сообщить("Для создания новых товаров выберите их по отдельности!");
			Возврат;
		КонецЕсли;	       		
		
		Если ТД.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
			
			лПараметрыСоздания = Новый Структура("НовыйТовар,Штрихкод", ТД.Ссылка, ТД.Штрихкод);
			лСтруктураРеквизитов = Новый Структура("Наименование,ВидНоменклатуры,ЕдиницаИзмерения", ТД.Наименование, ТД.ВидНоменклатуры, ТД.ЕдиницаИзмерения);
			лПараметры = Новый Структура("ЗначенияЗаполнения", лСтруктураРеквизитов); 
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ВидНоменклатуры", ТД.ВидНоменклатуры);
			лСтруктураРеквизитов.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
			ФРМ = ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", лСтруктураРеквизитов, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбработатьСозданиеТовара", ЭтаФорма, лПараметрыСоздания), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ФРМ.Объект.ВидНоменклатуры = ТД.ВидНоменклатуры;
			ФРМ.Объект.Наименование = ТД.Наименование;
			Попытка ФРМ.Объект.Наименование = ТД.Наименование; Исключение КонецПопытки;
			ФРМ.Объект.ЕдиницаИзмерения = ТД.ЕдиницаИзмерения;
			Если ЗначениеЗаполнено(ТД.ВидНоменклатуры) Тогда
				СтруктураДанных = ПолучитьДанныеВидаНоменклатурыРедактированиеФормы(ТД.ВидНоменклатуры);
				ФРМ.Объект.ТипНоменклатуры = СтруктураДанных.ТипНоменклатуры;
				ФРМ.Объект.СтавкаНДС = СтруктураДанных.СтавкаНДС;
				ФРМ.Объект.ГруппаДоступа = СтруктураДанных.ГруппаДоступа;
				ФРМ.Объект.ВариантОформленияПродажи = СтруктураДанных.ВариантОформленияПродажи;
				ФРМ.Объект.ИспользованиеХарактеристик = СтруктураДанных.ИспользованиеХарактеристик;
				ФРМ.Объект.СкладскаяГруппа = СтруктураДанных.СкладскаяГруппа;
			КонецЕсли;
			ДанныеФормыПодАтрибуты = ФРМ.Объект;
			Наименование = ТД.Наименование;
			
			СтруктураДанных = ЗаполнениеРеквизитовТовараПоАтрибутам(ДанныеФормыПодАтрибуты, Наименование, Истина, ФРМ.Свойства_НаборыДополнительныхРеквизитовОбъекта);
			
			Если СтруктураДанных.СтруктураДанныхПодРедактированиеТовара.Количество() Тогда
				Для каждого СтрокаДР Из СтруктураДанных.СтруктураДанныхПодРедактированиеТовара Цикл
					ФРМ[СтрокаДР.Ключ] = СтрокаДР.Значение;		
				КонецЦикла;		
			КонецЕсли;
			
			КопироватьДанныеФормы(ДанныеФормыПодАтрибуты, ФРМ.Объект); 
			ФРМ.Штрихкод = ТД.Штрихкод;  
			ФРМ.Модифицированность = Истина;		
			
		Иначе 
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", ТД.Номенклатура);
			МассивСтрокТаблицы = НовыеТоварыШтрихкоды.НайтиСтроки(СтруктураПоиска);
			
			МассивШК = Новый Массив;
			Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
				МассивШК.Добавить(СтрокаТаблицы.Штрихкод);		
			КонецЦикла;	
			
			ПараметрыФормы = Новый Структура("Ключ", ТД.Номенклатура);
			лПараметры = Новый Структура("МассивШК", МассивШК);        	
			лПараметры.Вставить("НоменклатураСсылка", ТД.Номенклатура); 			
			ЗаписатьНовыеШтрихкодыВРегистр(лПараметрыСоздания);
			
		КонецЕсли;		
		
	Иначе  	
		//не требуется открытие формы
		МассивОбработанныхНовыхТоваров = Новый Массив;
		Для каждого Строка Из МассивСтрок Цикл
			Если Строка.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") И
				ЗначениеЗаполнено(Строка.Ссылка) Тогда
				
				Если Не СсылкаСуществует(Строка.Ссылка) Тогда
					Сообщить("Не выбрана номенклатура для строки с штрихкодом """ + Строка.Штрихкод	+ """ .");
					Продолжить;
				КонецЕсли;
				
				Если МассивОбработанныхНовыхТоваров.Найти(Строка.Ссылка) = Неопределено Тогда
					//создаем номенклатуру и привязываем ШК:
					СтруктураДанныхДляЗаполненияРеквизитов = Новый Структура; 				
					
					СтруктураДанныхДляЗаполненияРеквизитов.Вставить("ВидНоменклатуры", Строка.ВидНоменклатуры);
					СтруктураДанныхДляЗаполненияРеквизитов.Вставить("Родитель", НовыеТовары_ГруппаНоменклатуры); 
					СтруктураДанныхДляЗаполненияРеквизитов.Вставить("Наименование", Строка.Наименование);
					СтруктураДанныхДляЗаполненияРеквизитов.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);
					СтруктураДанныхДляЗаполненияРеквизитов.Вставить("НовыйТовар", Строка.Ссылка);					
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Ссылка", Строка.Ссылка);
					МассивСтрокТаблицы = НовыеТоварыШтрихкоды.НайтиСтроки(СтруктураПоиска);
					МассивШК = Новый Массив;
					Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
						МассивШК.Добавить(СтрокаТаблицы.Штрихкод);		
					КонецЦикла;	
					СтруктураДанныхДляЗаполненияРеквизитов.Вставить("МассивШК", МассивШК);  					
					СоздатьТоварПривязатьШКСервер(СтруктураДанныхДляЗаполненияРеквизитов);						
					МассивОбработанныхНовыхТоваров.Добавить(Строка.Ссылка);
				КонецЕсли;
			КонецЕсли; 	
		КонецЦикла;
		
		ЗаполнитьНаСервере();
		
		Сообщить("Данные успешно обновлены!");
		
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьНовыеТовары(Команда)
	УдалитьНовыеТоварыНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьНовыеТоварыНаСервере()
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	
	СтруктураПоискаШК = Новый Структура;  
	МассивУдаляемыхНовыхТоваров = Новый Массив;
	
	Для каждого СтрокаТовара Из НовыеТоварыШтрихкоды Цикл
		
		Если Не строкаТовара.Обрабатывать Тогда
			Продолжить;
		КонецЕсли;
		
		//если новый товар,
		Если Не СтрокаТовара.Ссылка.Пустая() Тогда
			
			//удаляем, связанные с ним ШК
			
			СтруктураПоискаШК.Вставить("Ссылка", СтрокаТовара.Ссылка);
			МассивШК = НовыеТоварыШтрихкоды.НайтиСтроки(СтруктураПоискаШК);
			
			Для каждого УдаляемыйШК Из МассивШК Цикл
				ВыборкаШК = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
				ВыборкаШК.Отбор.ШтрихКод.Установить(УдаляемыйШК.Штрихкод);
				ВыборкаШК.Прочитать();
				ВыборкаШК.Очистить();
				ВыборкаШК.Записать(Истина); 
			КонецЦикла;	
			
			//удаляем сам новый товар
			Если МассивУдаляемыхНовыхТоваров.Найти(СтрокаТовара.Ссылка) = Неопределено Тогда
				МассивУдаляемыхНовыхТоваров.Добавить(СтрокаТовара.Ссылка);
			КонецЕсли;	
			
		КонецЕсли;   
		
		//если это существующий товар, удаляем только его ШК
		
		Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
			ВыборкаШК = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
			ВыборкаШК.Отбор.ШтрихКод.Установить(СтрокаТовара.ШтрихКод);
			ВыборкаШК.Прочитать();
			ВыборкаШК.Очистить();
			ВыборкаШК.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;   
	
	Если МассивУдаляемыхНовыхТоваров.Количество() Тогда
		Для каждого СсылкаНаНовыйТовар Из МассивУдаляемыхНовыхТоваров Цикл
			НовыйТоварОбъект = СсылкаНаНовыйТовар.ПолучитьОбъект();
			
			Если Модуль_ОбщегоНазначения.СсылкаСуществует(СсылкаНаНовыйТовар) Тогда
				Попытка
					НовыйТоварОбъект.Удалить();
				Исключение
					ДатаМобайл_ОбщийМодуль.СообщитьПользователю("Не удалось удалить товар " + НовыйТоварОбъект + " " + ОписаниеОшибки());
				Конецпопытки;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
Конецпроцедуры

&НаСервере
Процедура ПривязатьШтрихкодыНаСервере(БылиОбработаныШК)
	
	Попытка
		НачатьТранзакцию();
		Для каждого лСтрТаб Из НовыеТоварыШтрихкоды Цикл
			Если лСтрТаб.Обрабатывать Тогда
				Если СокрЛП(лСтрТаб.Штрихкод) = "" Тогда
					Продолжить;
				КонецЕсли;	
				Если лСтрТаб.Номенклатура.Пустая() Тогда
					Продолжить;
				КонецЕсли;	
				
				Если лСтрТаб.Упаковка.Пустая() Тогда
					Если лСтрТаб.Номенклатура.ИспользоватьУпаковки Тогда
						
						ЗапросУпаковок = Новый Запрос;
						ЗапросУпаковок.УстановитьПараметр("Номенклатура", лСтрТаб.Номенклатура);
						ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокНоменклатура", лСтрТаб.Номенклатура.НаборУпаковок);
						ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокВидНоменклатуры", лСтрТаб.Номенклатура.ВидНоменклатуры.НаборУпаковок);
						ЗапросУпаковок.УстановитьПараметр("Коэффициент", лСтрТаб.Коэффициент);	
						ЗапросУпаковок.Текст = "ВЫБРАТЬ
						|	УпаковкиНоменклатуры.Ссылка
						|ИЗ
						|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
						|ГДЕ
						|	УпаковкиНоменклатуры.Владелец = &Номенклатура
						|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
						|ОБЪЕДИНИТЬ
						|ВЫБРАТЬ
						|	УпаковкиНоменклатуры.Ссылка
						|ИЗ
						|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
						|ГДЕ
						|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокНоменклатура
						|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
						|ОБЪЕДИНИТЬ
						|ВЫБРАТЬ
						|	УпаковкиНоменклатуры.Ссылка
						|ИЗ
						|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
						|ГДЕ
						|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокВидНоменклатуры
						|	И УпаковкиНоменклатуры.Числитель = &Коэффициент";
												
						ВыборкаУпаковок = ЗапросУпаковок.Выполнить().Выбрать();                               
						
						лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();	   
						Пока ВыборкаУпаковок.Следующий() Цикл
							лУпак = ВыборкаУпаковок.Ссылка;
							Прервать;
						КонецЦикла;
						
						Если лУпак.Пустая() Тогда
							лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
						КонецЕсли;
					Иначе
						лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					КонецЕсли;	
					лСтрТаб.Упаковка = лУпак;					
				КонецЕсли;	
				
				лСтрТаб.Обрабатывать = Ложь;				
				
				ШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
				ШК.Штрихкод = лСтрТаб.Штрихкод;
				ШК.Номенклатура = лСтрТаб.Номенклатура;
				ШК.Характеристика = лСтрТаб.Характеристика;
				Если СокрЛП(лСтрТаб.Упаковка.Код) = "" Тогда
					ШК.Упаковка = лСтрТаб.Упаковка;
				КонецЕсли;
				старНЗ = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
				старНЗ.Отбор.ШтрихКод.Установить(лСтрТаб.ШтрихКод);
				старНЗ.Прочитать();
				старНЗ.Очистить();
				старНЗ.Записать(Истина);
				ШК.Записать(Истина);
				БылиОбработаныШК = Истина;
			КонецЕсли;	
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение	
		ОтменитьТранзакцию();
	КонецПопытки;	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Функция СоздатьТоварПривязатьШКСервер(СтруктураДанныхДляЗаполненияРеквизитов)
	
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	НоваяНоменклатура.ВидНоменклатуры = СтруктураДанныхДляЗаполненияРеквизитов.ВидНоменклатуры;
	НоваяНоменклатура.Родитель = СтруктураДанныхДляЗаполненияРеквизитов.Родитель;
	НоваяНоменклатура.Наименование = СтруктураДанныхДляЗаполненияРеквизитов.Наименование;
	ПолучитьДанныеВидаНоменклатуры(СтруктураДанныхДляЗаполненияРеквизитов.ВидНоменклатуры, НоваяНоменклатура);
	НоваяНоменклатура.ЕдиницаИзмерения = СтруктураДанныхДляЗаполненияРеквизитов.ЕдиницаИзмерения;
	
	СтруктураДанных = ЗаполнениеРеквизитовТовараПоАтрибутам(НоваяНоменклатура, СтруктураДанныхДляЗаполненияРеквизитов.Наименование); 
	
	ИспользоватьКачествоТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	
	Если ИспользоватьКачествоТоваров Тогда
		НоваяНоменклатура.Качество = Перечисления.ГрадацииКачества.Новый;		
	КонецЕсли;
	
	Попытка
		НоваяНоменклатура.Записать();
		Если СтруктураДанных.ЕстьДопРеквизит Тогда
			Модуль_УправлениеСвойствами = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("УправлениеСвойствами");
			Модуль_УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоваяНоменклатура.Ссылка, СтруктураДанных.ТЗ);					 		
		КонецЕсли;	
		лПараметрыСоздания = Новый Структура;
		лПараметрыСоздания.Вставить("НоменклатураСсылка", НоваяНоменклатура.Ссылка);
		лПараметрыСоздания.Вставить("МассивШК", СтруктураДанныхДляЗаполненияРеквизитов.МассивШК); 
		лПараметрыСоздания.Вставить("НовыйТовар", СтруктураДанныхДляЗаполненияРеквизитов.НовыйТовар); 
		ЗаписатьНовыеШтрихкодыВРегистр(лПараметрыСоздания);
		ЗаписатьНовыйТоварВСправочник(лПараметрыСоздания); 
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ЗаполнениеРеквизитовТовараПоАтрибутам(НоваяНоменклатура, НаименованиеНовогоТовара, РедактированиеТовара = Ложь, Свойства_НаборыДополнительныхРеквизитовОбъекта = Неопределено)
	
	Модуль_УправлениеСвойствамиСлужебный = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("УправлениеСвойствамиСлужебный");
	
	СтруктураДанных = Новый Структура;
	
	ЕстьДопРеквизит = Ложь;
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТЗ.Колонки.Добавить("Значение");
	ТЗ.Колонки.Добавить("ИсходныйНомерСтроки");
	
	Если РедактированиеТовара Тогда
		СтруктураДанныхПодРедактированиеТовара = Новый Структура;
		ОписаниеСвойств = Модуль_УправлениеСвойствамиСлужебный.ЗначенияСвойств(
		НоваяНоменклатура.ДополнительныеРеквизиты.Выгрузить(),
		Свойства_НаборыДополнительныхРеквизитовОбъекта,
		Ложь);
		ОписаниеСвойств.Колонки.Добавить("ИмяРеквизитаЗначение");
		
		Для каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
			ИмяУникальнаяЧасть = 
			СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Набор.УникальныйИдентификатор())), "-", "x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Свойство.УникальныйИдентификатор())), "-", "x");
			
			ОписаниеСвойства.ИмяРеквизитаЗначение =
			"ДополнительныйРеквизитЗначение_" + ИмяУникальнаяЧасть;
		КонецЦикла;	
	КонецЕсли;
	
	СчДР = 0;
	
	НовыйТовар = Справочники.ДатаМобайл_НовыеТовары.НайтиПоНаименованию(НаименованиеНовогоТовара);
	
	Если НовыйТовар <> Неопределено Тогда
		НовыйТоварОбъект = НовыйТовар.ПолучитьОбъект();
		УзелПО = НовыйТовар.ТСД;
		
		Если ЗначениеЗаполнено(УзелПО) Тогда
			Атрибуты = ДатаМобайл_HTTP_Логика.ПолучитьАтрибуты(УзелПО);
			Для сч = 1 По 10 Цикл
				
				ИмяАтрибута = Атрибуты["ИмяАтрибута" + сч];
				
				НовоеЗначениеРеквизитаСтрокой = СокрЛП(НовыйТоварОбъект["attr_" + сч]); 
				Если ИмяАтрибута = "!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Или ИмяАтрибута = "!!! Характеристики !!!" Тогда
					Продолжить;	
				ИначеЕсли Лев(ИмяАтрибута, 3) = "ДР_" Тогда
					
					СчДР = СчДР + 1;
					
					ЕстьДопРеквизит = Истина;
					
					ИмяАтрибутаДР = СтрЗаменить(ИмяАтрибута, "ДР_", "");
					
					ДопСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяАтрибутаДР);
					Значение = НоваяНоменклатура.Ссылка.ДополнительныеРеквизиты.Найти(ДопСвойство);
					
					НовСтр = ТЗ.Добавить();
					НовСтр.Свойство 			= ДопСвойство;
					НовСтр.ИсходныйНомерСтроки 	= СчДР;
					ЗначениеПоСвойству = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(НовоеЗначениеРеквизитаСтрокой,,, НовСтр.Свойство);	
					
					Если ЗначениеЗаполнено(ЗначениеПоСвойству) Тогда
						НовСтр.Значение = ЗначениеПоСвойству;
					Иначе
						НовСтр.Значение = НовоеЗначениеРеквизитаСтрокой;	
					КонецЕсли;
					
					Если РедактированиеТовара Тогда
						Отбор = Новый Структура();
						Отбор.Вставить("Наименование", ИмяАтрибутаДР);
						Строки = ОписаниеСвойств.НайтиСтроки(Отбор);
						Если Строки.Количество() > 0 Тогда
							СтруктураДанныхПодРедактированиеТовара.Вставить(Строки[0].ИмяРеквизитаЗначение, НовСтр.Значение);
						КонецЕсли;		
					КонецЕсли;
					
				ИначеЕсли ИмяАтрибута <> "" И ДатаМобайл_HTTP_Логика.ЧистаяСтрока(Строка(НоваяНоменклатура[ИмяАтрибута])) <> НовоеЗначениеРеквизитаСтрокой Тогда				
					Если НовоеЗначениеРеквизитаСтрокой = "" Тогда
						НоваяНоменклатура[ИмяАтрибута] = "";
					Иначе
						ДатаМобайл_HTTP_Логика.УстановитьЗначениеИЗСтроки(НоваяНоменклатура, ИмяАтрибута, НовоеЗначениеРеквизитаСтрокой, "");
					КонецЕсли;				
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
		Если ИмяАтрибута = "ВидНоменклатуры" Тогда
			ПолучитьДанныеВидаНоменклатуры(НоваяНоменклатура.ВидНоменклатуры, НоваяНоменклатура);	
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанных.Вставить("ЕстьДопРеквизит", ЕстьДопРеквизит);
	Если РедактированиеТовара Тогда
		СтруктураДанных.Вставить("СтруктураДанныхПодРедактированиеТовара", СтруктураДанныхПодРедактированиеТовара);		
	Иначе
		СтруктураДанных.Вставить("ТЗ", ТЗ);		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	 
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеТовара(лРезультатЗакрытия, лПараметрыСоздания)Экспорт
		
	Если лПараметрыСоздания = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(лПараметрыСоздания.НоменклатураСсылка) Тогда		
		ЗаписатьНовыеШтрихкодыВРегистр(лПараметрыСоздания);
		ЗаписатьНовыйТоварВСправочник(лПараметрыСоздания)
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Функция СсылкаСуществует(Ссылка)
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	Возврат Модуль_ОбщегоНазначения.СсылкаСуществует(Ссылка);
	
КонецФункции

&НаКлиенте
Процедура НовыеТовары_ВидНоменклатурыПриИзменении(Элемент)
	ОбновитьДанныеВТЧНовыеТоварыШтрихкоды();
КонецПроцедуры

&НаКлиенте
Процедура НовыеТовары_ГруппаНоменклатурыПриИзменении(Элемент)
	ОбновитьДанныеВТЧНовыеТоварыШтрихкоды();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВТЧНовыеТоварыШтрихкоды()
	
	Для каждого СтрокаНовыеТоварыШтрихкоды Из НовыеТоварыШтрихкоды Цикл
		СтрокаНовыеТоварыШтрихкоды.ВидНоменклатуры = ?(ЗначениеЗаполнено(НовыеТовары_ВидНоменклатуры), НовыеТовары_ВидНоменклатуры, СтрокаНовыеТоварыШтрихкоды.ВидНоменклатуры);
		СтрокаНовыеТоварыШтрихкоды.ГруппаНоменклатуры = ?(ЗначениеЗаполнено(НовыеТовары_ГруппаНоменклатуры), НовыеТовары_ГруппаНоменклатуры, СтрокаНовыеТоварыШтрихкоды.ГруппаНоменклатуры);
	КонецЦикла;	
	
КонецПроцедуры

//ТЕРМИНАЛЫ
&НаКлиенте
Процедура ВыгрузитьВсеТовары(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОшибок = "";
	
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	
	Для каждого ТСД Из ВыделенныеСтроки Цикл
		
		Если ЭтоВыгрузкаНаFTP(ТСД) Тогда
			
			//Выгрузка на фтп 
			ФормаОбработки = ПолучитьФорму("Обработка.DataMobileLoadUpload.Форма");
			ФормаОбработки.Открыть();
			ФормаОбработки.ВыгрузитьТовары(ФормаОбработки.Элементы);
			ФормаОбработки.Закрыть();
			Прервать;
			
		Иначе
			
			ЗарегистрироватьНоменклатуруПодПорционнуюВыгрузку(ТСД);
			
			Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьТовары", СтрокаОшибок) Тогда
				
				Сообщить("Не удалось:" + СтрокаОшибок);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;  
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеИзображенияТоваров(Команда)
	
	ВыгрузитьВсеТовары(Неопределено);
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОшибок = "";
	
	Для каждого ТСД Из Элементы.СписокТСД.ВыделенныеСтроки Цикл
		
		ЗарегистрироватьИзображенияНоменклатурыПодПорционнуюВыгрузку(ТСД);
		
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьИзображения", СтрокаОшибок) Тогда
			
			Сообщить("Не удалось: " + СтрокаОшибок);
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьНоменклатуруПодПорционнуюВыгрузку(УзелПО)
	
	Если УзелПО.ИспользоватьПорционнуюВыгрузку Тогда
				
		НаборЗаписейВыгрузка = РегистрыСведений.ДатаМобайл_ПорционнаяВыгрузка.СоздатьНаборЗаписей();
		НаборЗаписейВыгрузка.Отбор.ТСД.Установить(УзелПО); 
		НаборЗаписейВыгрузка.Отбор.ТипОбъекта.Установить(1);
		НаборЗаписейВыгрузка.Прочитать();
		
		Если НаборЗаписейВыгрузка.Количество() Тогда
			
			НаборЗаписей = РегистрыСведений.ДатаМобайл_ФлагиДляОбменаТСД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТСД.Установить(УзелПО);
			НаборЗаписей.Отбор.ТипФлага.Установить("ОчиститьТовары");
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() Тогда
				
				Если НаборЗаписей[0].Значение Тогда
					
					Сообщить("Необходимо дождаться завершения выгрузки данных или ""Очистить выгрузку""!");
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли; 
			
		Иначе       
			
			РегистрыСведений.ДатаМобайл_ПорционнаяВыгрузка.ЗарегистрироватьНоменклатуруПодПорционнуюВыгрузку(УзелПО, Истина);
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ЗарегистрироватьИзображенияНоменклатурыПодПорционнуюВыгрузку(УзелПО)
	
	Если УзелПО.ИспользоватьПорционнуюВыгрузку Тогда
				
		НаборЗаписейВыгрузка = РегистрыСведений.ДатаМобайл_ПорционнаяВыгрузка.СоздатьНаборЗаписей();
		НаборЗаписейВыгрузка.Отбор.ТСД.Установить(УзелПО); 
		НаборЗаписейВыгрузка.Отбор.ТипОбъекта.Установить(2);
		НаборЗаписейВыгрузка.Прочитать();
		
		Если НаборЗаписейВыгрузка.Количество() Тогда
			
			НаборЗаписей = РегистрыСведений.ДатаМобайл_ФлагиДляОбменаТСД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТСД.Установить(УзелПО);
			НаборЗаписей.Отбор.ТипФлага.Установить("ОчиститьИзображения");
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() Тогда
				
				Если НаборЗаписей[0].Значение Тогда
					
					Сообщить("Необходимо дождаться завершения выгрузки данных или ""Очистить выгрузку""!");
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли; 
			
		Иначе       
			
			РегистрыСведений.ДатаМобайл_ПорционнаяВыгрузка.ЗарегистрироватьИзображенияНоменклатурыПодПорционнуюВыгрузку(УзелПО, Истина);
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ЭтоВыгрузкаНаFTP(ПланОбмена)
	Ответ = Ложь;
	Попытка Ответ = ПланОбмена.ВыгружатьТоварыНаFTP; Исключение КонецПопытки;
	Возврат Ответ;	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьВсеЕдиницы(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьЕдиницыИзмерения", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;   		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеШаблоны(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьШаблоны", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсехПользователей(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьПользователей", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
		
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьРоли", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсехКлиентов(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьКлиентов", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеЯчейки(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьЯчейки", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеТоварыЕГАИС(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьТоварыЕГАИС", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеМаркиЕГАИС(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьМаркиЕГАИС", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеКодыМаркировки(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьКодыМаркировки", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеСклады(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьСклады", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеДополнительныеФормы(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД,"ОчиститьДополнительныеФормы", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеШаблоныШтрихкодов(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьШаблоныШтрихкодов", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеТипыСерий(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не ВыгрузитьДанныеПоСтроке(ТСД, "ОчиститьТипыСерий", СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсёНажатие(Команда)
	
	ВыгрузитьВсеТовары(Команда);
	ВыгрузитьВсеЕдиницы(Команда);
	ВыгрузитьВсеШаблоны(Команда);
	ВыгрузитьВсехПользователей(Команда);
	ВыгрузитьВсехКлиентов(Команда);
	ВыгрузитьВсеЯчейки(Команда);
	ВыгрузитьВсеСклады(Команда);	
	ВыгрузитьВсеТипыСерий(Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьДанныеПоСтроке(УзелПО, Тип, СтрокаОшибок)
		
	Попытка
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, Тип, Истина);
	Исключение
		СтрокаОшибок = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УдалитьДанныеЗагрузки(Команда)
	
	Если Элементы.СписокТСД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаОшибок = "";
	ВыделенныеСтроки = Элементы.СписокТСД.ВыделенныеСтроки;
	Для каждого ТСД Из ВыделенныеСтроки Цикл  					
		Если Не УдалитьДанныеЗагрузкиНаСервере(ТСД, СтрокаОшибок) Тогда
			Сообщить("Не удалось:" + СтрокаОшибок);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УдалитьДанныеЗагрузкиНаСервере(УзелПО, СтрокаОшибок)
	
	ОчиститьЗаписиВДатаМобайл_ПорционнаяВыгрузкаПоТСД(УзелПО);
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.Номенклатура);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ХарактеристикиНоменклатуры);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ДатаМобайл_ШаблоныДокументов);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ДатаМобайл_ДокументыТСД);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ДатаМобайл_НовыеТовары);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.Партнеры);	
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);	
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.РегистрыСведений.ДатаМобайл_НовыеШтрихкоды);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.Склады);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.СкладскиеЯчейки);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.Пользователи);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.РегистрыСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелПО, Метаданные.Справочники.ДатаМобайл_Роли);
		
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьТовары", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьЯчейки", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьШаблоны", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьДокументы", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьПользователей", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьЕдиницыИзмерения", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьКлиентов", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьСклады", Ложь);		
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьТоварыЕГАИС", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьМаркиЕГАИС", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьКодыМаркировки", Ложь);	
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьДополнительныеФормы", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьШаблоныШтрихкодов", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьРоли", Ложь);
		ДатаМобайл_ОбщийМодуль.ЗаписьФлаговОбменаТСД(УзелПО, "ОчиститьТипыСерий", Ложь);		
	Исключение
		СтрокаОшибок = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
		
	Возврат Истина;
		
КонецФункции

&НаСервере
Функция СобратьМассивШаблонов()
	МассивШаблонов = Новый Массив;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_ШаблоныДокументов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивШаблонов.Добавить(ВыборкаДетальныеЗаписи.Наименование);	
	КонецЦикла;
	
	Возврат МассивШаблонов;
КонецФункции

&НаСервере
Процедура ОчиститьЗаписиВДатаМобайл_ПорционнаяВыгрузкаПоТСД(УзелПО)
	
	Набор = РегистрыСведений.ДатаМобайл_ПорционнаяВыгрузка.СоздатьНаборЗаписей();
	Набор.Отбор.ТСД.Установить(УзелПО);
	Набор.Записать();
	
КонецПроцедуры

//ШАБЛОНЫ
&НаКлиенте
Процедура ДобавитьШаблоныПоУмолчанию()
	
	Массив = СобратьМассивШаблонов();
	СтруктураПараметров = Новый Структура("МассивШаблонов", Массив);
	ФормаКШ = ПолучитьФорму("Обработка.ДатаМобайл_АРМДиспетчера.Форма.ФормаКонструктораШаблонов", СтруктураПараметров,,,,);
	ФормаКШ.Открыть();	
	
КонецПроцедуры	 

//АНАЛИТИКА
&НаКлиенте
Процедура ОткрытьОтчетАналитика(Команда)
	
	ОткрытьФорму("Отчет.ДатаМобайл_Аналитика.Форма"); 
	
КонецПроцедуры

//ПЕЧАТЬ ЭТИКЕТОК
&НаКлиенте
Процедура ОтправитьНаПечать(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите документ!");
		Возврат;
	КонецЕсли;
	
	Если ДатаМобайл_ОбщийМодуль.Есть115() И ДатаМобайл_ОбщийМодуль.Ценообразование25() Тогда 
		Попытка
			ФормаПечати = ПолучитьФорму("Обработка.ПечатьЭтикетокИЦенников2_5.Форма.ФормаТовары");	
		Исключение
			ФормаПечати = ПолучитьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары");
		КонецПопытки;		
	Иначе	
		ФормаПечати = ПолучитьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары");
	КонецЕсли;
	
	ОбъектФормы = ФормаПечати.Объект;
	ЗаполнитьФормуЦенников(ОбъектФормы, ТекущиеДанные.Ссылка);
	КопироватьДанныеФормы(ОбъектФормы, ФормаПечати.Объект);
	ФормаПечати.Открыть();	
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьФормуЦенников(ОбъектФормы, Ссылка)
	
	ЗапросТоваров = Новый Запрос;
	ЗапросТоваров.Текст = "ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ШтрихКод,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ЕдиницаИзмерения,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ШтрихКод,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Количество
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ссылка = &Ссылка";
	
	ЗапросТоваров.УстановитьПараметр("Ссылка", Ссылка);
	Рез = ЗапросТоваров.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Товар = ОбъектФормы.Товары.Добавить();
		Товар.Номенклатура = Рез.Номенклатура;
		Товар.Характеристика = Рез.ХарактеристикаНоменклатуры;
		Товар.Упаковка = Рез.ЕдиницаИзмерения;
		Товар.ШтрихКод = Рез.ШтрихКод;
		Товар.КоличествоЭтикеток = Рез.Количество;
		Товар.КоличествоЦенников = Рез.Количество;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ПоказыватьТолькоРасхожденияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаменитьЗапрос(ТекущиеДанные.Ссылка, ПоказыватьТолькоРасхождения);
	Исключение
		Сообщить("Ошибка отображения данных: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// НАСТРОЙКА ЛОГИРОВАНИЕ
&НаКлиенте
Процедура ИспользоватьЛогированиеПриИзменении(Элемент)
	ДатаМобайл_ОбщийМодуль.НастройкиЗаписать(Новый Структура("ИспользоватьЛогирование", ИспользоватьЛогирование));	
	УстановитьВидимостьНастройкиКаталогаЛогов();
КонецПроцедуры

&НаКлиенте
Процедура КаталогХраненияЛоговПриИзменении(Элемент)
	РП = ПолучитьРазделительПути();
	
	Если Не Прав(КаталогХраненияЛогов, 1) = РП Тогда
		КаталогХраненияЛогов = "" + КаталогХраненияЛогов + РП;
	КонецЕсли;
	
	ДатаМобайл_ОбщийМодуль.НастройкиЗаписать(Новый Структура("КаталогХраненияЛогов", СокрЛП(КаталогХраненияЛогов)));
КонецПроцедуры 

&НаКлиенте
Процедура КаталогХраненияЛоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = СокрЛП(КаталогХраненияЛогов);
	Диалог.Показать(Новый ОписаниеОповещения("КаталогХраненияЛоговНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
КонецПроцедуры

&НаКлиенте
Процедура КаталогХраненияЛоговНачалоВыбораЗавершение(ДанныеВыбора, ДопПараметры) Экспорт
	Если Не ТипЗнч(ДанныеВыбора) = Тип("Массив") Тогда Возврат; КонецЕсли;
	
	Если ДанныеВыбора.Количество() > 0 Тогда		
		КаталогХраненияЛогов = СокрЛП(ДанныеВыбора[0]);		
		КаталогХраненияЛоговПриИзменении(Элементы.КаталогХраненияЛогов);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНастройкиКаталогаЛогов()
	Элементы.КаталогХраненияЛогов.Видимость        = ИспользоватьЛогирование;
	Элементы.ЛогированиеОчищатьЧерезДней.Видимость = ИспользоватьЛогирование;
	Элементы.ЛогированиеСохранятьЗаписей.Видимость = ИспользоватьЛогирование;
	Элементы.НадписьЛоги1.Видимость                = ИспользоватьЛогирование;
	Элементы.НадписьЛоги2.Видимость                = ИспользоватьЛогирование;
КонецПроцедуры

&НаКлиенте
Процедура ЛогированиеОчищатьЧерезДнейПриИзменении(Элемент)
	ДатаМобайл_ОбщийМодуль.НастройкиЗаписать(Новый Структура("ЛогированиеОчищатьЧерезДней", ЛогированиеОчищатьЧерезДней));
КонецПроцедуры  

&НаКлиенте
Процедура ЛогированиеОчищатьЧерезДнейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ДатаМобайл_ОбщийМодуль.НастройкиЗаписать(Новый Структура("ЛогированиеОчищатьЧерезДней", Число(Текст)));
КонецПроцедуры

&НаКлиенте
Процедура ЛогированиеСохранятьЗаписейПриИзменении(Элемент)
	ДатаМобайл_ОбщийМодуль.НастройкиЗаписать(Новый Структура("ЛогированиеСохранятьЗаписей", ЛогированиеСохранятьЗаписей));
КонецПроцедуры

&НаКлиенте
Процедура ЛогированиеСохранятьЗаписейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ДатаМобайл_ОбщийМодуль.НастройкиЗаписать(Новый Структура("ЛогированиеСохранятьЗаписей", Число(Текст)));
КонецПроцедуры

//ВЫГРУЗКА И ЗАГРУЗКА НАСТРОЕК
#Область ВыгрузкаЗагрузкаНастроек

&НаКлиенте
Процедура ВыборФайлаНастроек(РежимРаботыСФайлом)
	
	ОчиститьСообщения();
	
	Если РежимРаботыСФайлом = "Выгрузка" Тогда
		Режим = РежимДиалогаВыбораФайла.Сохранение;
	ИначеЕсли РежимРаботыСФайлом = "Загрузка" Тогда
		Режим = РежимДиалогаВыбораФайла.Открытие;
	КонецЕсли;	
	
	ДиалогРаботыСФайлом = Новый ДиалогВыбораФайла(Режим); 
	Фильтр = "(*.xml)|*.xml";                 
	ДиалогРаботыСФайлом.Фильтр = Фильтр; 
	ДиалогРаботыСФайлом.МножественныйВыбор = Ложь; 
	ДиалогРаботыСФайлом.Заголовок = "Выберите файл настроек"; 
	ДиалогРаботыСФайлом.Показать(Новый ОписаниеОповещения("ВыборФайлаНастроек_Завершение", ЭтаФорма, Новый Структура("РежимРаботыСФайлом", РежимРаботыСФайлом))); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаНастроек_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда				
		ШаблоныПутьКФайлуНастроек = ВыбранныеФайлы[0];
		Если Не ЗначениеЗаполнено(ШаблоныПутьКФайлуНастроек) Тогда
			Если ДополнительныеПараметры.РежимРаботыСФайлом = "Выгрузка" Тогда
				Сообщить("Укажите файл для выгрузки настроек!");                      	
			Иначе
				Сообщить("Укажите файл для загрузки настроек!"); 
			КонецЕсли;	
			Возврат;
		КонецЕсли;	
		АдресФайлаВоВременномХранилище = "";  
		Если ДополнительныеПараметры.РежимРаботыСФайлом = "Выгрузка" Тогда 
			ТекстВопроса = "Настройки в файле будут заменены. Выгрузить данные?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ПодтверждениеВыгрузки", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
			
		Иначе
			ТекстВопроса = "Текущие настройки будут заменены на настройки из файла. Загрузить данные?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ПодтверждениеЗагрузки", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВыгрузитьНастройки(Команда)
	
	ВыборФайлаНастроек("Выгрузка");
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНастройкиНаСервере(КонтекстВызова)
	
	ВкладкаВызова = КонтекстВызова;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xml");	
	ЗаполнитьДеревоМетаданныхНаСервере(ИмяВременногоФайла, КонтекстВызова);
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);	
	КонецЕсли;  
	
	Возврат АдресФайлаВоВременномХранилище;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДеревоМетаданныхНаСервере(ИмяВременногоФайла, КонтекстВызова)
	
	ДеревоМетаданныхЗначение = РеквизитФормыВЗначение("ДеревоМетаданных");
	Инициализация(ДеревоМетаданныхЗначение, КонтекстВызова);
	
	ВыполнитьВыгрузку(ИмяВременногоФайла, КонтекстВызова); 	
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	
	ВыборФайлаНастроек("Загрузка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗагрузки(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Элементы.грЗакладки.ТекущаяСтраница = Элементы.грЗакладки.ПодчиненныеЭлементы.грШаблоны Тогда				 
			ДвДанные = Новый ДвоичныеДанные(ШаблоныПутьКФайлуНастроек);
			ДвДанные_АдресВХ = ПоместитьВоВременноеХранилище(ДвДанные, ЭтаФорма.УникальныйИдентификатор);
			ЗагрузитьНастройкиНаСервере("СписокШаблонов", ДвДанные_АдресВХ);
			УдалитьФайлы(ДвДанные_АдресВХ);
			Элементы.СписокШаблонов.Обновить();
		ИначеЕсли Элементы.грЗакладки.ТекущаяСтраница = Элементы.грЗакладки.ПодчиненныеЭлементы.грТерминалы Тогда
			ДвДанные = Новый ДвоичныеДанные(ШаблоныПутьКФайлуНастроек);
			ДвДанные_АдресВХ = ПоместитьВоВременноеХранилище(ДвДанные, ЭтаФорма.УникальныйИдентификатор);
			ЗагрузитьНастройкиНаСервере("СписокТСД", ДвДанные_АдресВХ);
			УдалитьФайлы(ДвДанные_АдресВХ);
			Элементы.СписокТСД.Обновить();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеВыгрузки(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Элементы.грЗакладки.ТекущаяСтраница = Элементы.грЗакладки.ПодчиненныеЭлементы.грШаблоны Тогда				 
			АдресФайлаВоВременномХранилище = ВыгрузитьНастройкиНаСервере("Шаблоны");
			ДвДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
			ДвДанные.Записать(ШаблоныПутьКФайлуНастроек);
			УдалитьФайлы(АдресФайлаВоВременномХранилище);
			Элементы.СписокШаблонов.Обновить();
		ИначеЕсли Элементы.грЗакладки.ТекущаяСтраница = Элементы.грЗакладки.ПодчиненныеЭлементы.грТерминалы Тогда
			АдресФайлаВоВременномХранилище = ВыгрузитьНастройкиНаСервере("Терминалы");
			ДвДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
			ДвДанные.Записать(ШаблоныПутьКФайлуНастроек);
			УдалитьФайлы(АдресФайлаВоВременномХранилище);
			УдалитьФайлы(АдресФайлаВоВременномХранилище);
			Элементы.СписокТСД.Обновить();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ЗагрузитьНастройкиНаСервере(КонтекстВызова, ДвДанные_АдресВХ)
	
	ВыполнитьЗагрузку(ДвДанные_АдресВХ, КонтекстВызова);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалыВыгрузитьНастройки(Команда)
	
	ВыборФайлаНастроек("Выгрузка");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции_ВыгрузкаЗагрузкаНастроек

// Процедура создает файл выгрузки
//
// Параметры
//   ИмяФайла - имя файла выгрузки
//
Процедура ВыполнитьВыгрузку(Знач ИмяФайла, КонтекстВызова, ТолькоПроверкаНедопустимыхСимволов = Ложь) Экспорт
	
	ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	
	СоставВыгрузки();
	
	Если ТолькоПроверкаНедопустимыхСимволов Тогда
		
		ЗаписьXML = СоздатьОбъектЗаписиXMLДляПроверки();
		
		ВыгрузкаДанных(ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов, ОбъектыВыгруженныеСОшибками);
		
	Иначе
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
		
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("core", "http://v8.1c.ru/data");
		
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("V8Exch:Data");
		
		Если ТолькоПроверкаНедопустимыхСимволов Тогда
			
			ШаблонНачалоПроверки = Нстр("ru = 'Начало проверки: %Дата'");
			СообщениеНачалоПроверки = СтрЗаменить(ШаблонНачалоПроверки, "%Дата", ТекущаяДатаСеанса());
			СообщитьПользователю(СообщениеНачалоПроверки);
			
		Иначе			
		КонецЕсли;
		
		ИнициализироватьСериализаторXDTOСАннотациейТипов();
		
		ВыгрузкаДанных(ЗаписьXML);
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exc:Data
		ВыгрузитьТаблицуПредопределенных(ЗаписьXML);
		ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exc:_1CV8DtUD
		
	КонецЕсли;
	
	Если ТолькоПроверкаНедопустимыхСимволов Тогда
		
		ШаблонПроверено = Нстр("ru = 'Проверено объектов: %Проверено'");
		СообщениеПроверено = СтрЗаменить(ШаблонПроверено, "%Проверено", ВсегоОбработанныхЗаписей());
		СообщитьПользователю(СообщениеПроверено);
		
		ШаблонОкончание = Нстр("ru = 'Окончание проверки: %Дата'");
		СообщениеОкончание = СтрЗаменить(ШаблонОкончание, "%Дата", ТекущаяДатаСеанса());
		СообщитьПользователю(СообщениеОкончание);
		
	Иначе
		
		ШаблонВыгружено = Нстр("ru = 'Выгружено объектов: %Выгружено'");
		КоличествоВыгружено = ВсегоОбработанныхЗаписей();
		Если КонтекстВызова = "Терминалы" Тогда
			КоличествоВыгружено = КоличествоВыгружено - 1;	
		КонецЕсли;
		СообщениеВыгружено = СтрЗаменить(ШаблонВыгружено, "%Выгружено", КоличествоВыгружено);
		
		СообщитьПользователю(СообщениеВыгружено);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура разбирает файл выгрузки и осуществляет запись в ИБ сохраненных
// там объектов
//
// Параметры
//   ИмяФайла - имя файла выгрузки
//
Процедура ВыполнитьЗагрузку(Знач ДвДанные_АдресВХ, КонтекстВызова) Экспорт
	
	ДвДанные = ПолучитьИзВременногоХранилища(ДвДанные_АдресВХ);                       
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвДанные.Записать(ИмяФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	// проверка формата файла обмена
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Возврат;
		
	КонецЕсли;
	
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьТаблицуПредопределенных(ЧтениеXML);
	ЗаменитьСсылкиНаПредопределенные(ИмяФайла);
	
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	
	// чтение и запись в ИБ записанных в выгрузке объектов
	Если Не ЧтениеXML.Прочитать() Тогда 
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Возврат;
		
	КонецЕсли;
	
	Загружено = 0;
		
	ИнициализироватьСериализаторXDTOСАннотациейТипов();
	
	Пока Сериализатор.ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		Попытка
			ЗаписанноеЗначение = Сериализатор.ПрочитатьXML(ЧтениеXML);
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
		Попытка
			Если КонтекстВызова = "СписокШаблонов" Тогда
				Если ТипЗнч(ЗаписанноеЗначение) = Тип("СправочникОбъект.ДатаМобайл_ШаблоныДокументов") Тогда
					ЗаписанноеЗначение.Записать();
					Загружено = Загружено + 1;
				КонецЕсли;	
			ИначеЕсли КонтекстВызова = "СписокТСД" Тогда
				Если ТипЗнч(ЗаписанноеЗначение) = Тип("ПланОбменаОбъект.ДатаМобайл_СписокТСД") Тогда
					ЗаписанноеЗначение.Записать();
					Загружено = Загружено + 1;
				КонецЕсли;
			КонецЕсли;	
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
						
			Попытка
				ТекстСообщения = Нстр("ru = 'При загрузке объекта %1(%2) возникла ошибка:
				|%3'");
				ТекстСообщения = ПодставитьПараметрыВСтроку(ТекстСообщения, ЗаписанноеЗначение, ТипЗнч(ЗаписанноеЗначение), ТекстОшибки);
			Исключение
				ТекстСообщения = Нстр("ru = 'При загрузке данных возникла ошибка:
				|%1'");
				ТекстСообщения = ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
			КонецПопытки;
			
			СообщитьПользователю(ТекстСообщения);
			
			Загружено = Загружено - 1;
			
		КонецПопытки;	
				
	КонецЦикла;
	
	// проверка формата файла обмена
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Возврат;
		
	КонецЕсли;
	
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "PredefinedData" Тогда
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Возврат;
		
	КонецЕсли;
	
	ЧтениеXML.Пропустить();
	
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Возврат;
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	ШаблонЗагружено = Нстр("ru = 'Загружено объектов: %Количество'");
	Если КонтекстВызова = "СписокТСД" И Не Загружено = 0 Тогда
		Загружено = Загружено - 1; //убираем саму базу как элемент по умолчанию в плане обмена
	КонецЕсли;	
	СообщениеЗагружено = СтрЗаменить(ШаблонЗагружено, "%Количество", Загружено);
	
	СообщитьПользователю(СообщениеЗагружено);
	
КонецПроцедуры

// Процедура производит начальную инициализацию - заполнение дерева описания
// классов объектов метаданных, дерево метаданных, список ссылочных типов
//
// Параметры
//
Процедура Инициализация(ДеревоМетаданныхЗначение, КонтекстВызова) Экспорт
	
	ВключитьВозможностьРедактированияИспользованияИтогов = Ложь;
	
	// Создаем объект, описывающий процессы построения дерева и выгрузку
	ЗаполнитьОписаниеМетаданных();
	
	МетаданныеОписание = МетаданныеОписание.Строки[0];
	
	СсылочныеТипы = Новый Соответствие;
	СоответствиеОбъектовМетаданныхИСсылочныхТипов = Новый Соответствие;
	
	ДеревоМетаданныхЗначение.Колонки.Очистить();
	// создание необходимых колонок
	ДеревоМетаданныхЗначение.Колонки.Добавить("Выгружать", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ДеревоМетаданныхЗначение.Колонки.Добавить("ВыгружатьПриНеобходимости", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ДеревоМетаданныхЗначение.Колонки.Добавить("Метаданные");
	ДеревоМетаданныхЗначение.Колонки.Добавить("ЭлементОписания");
	ДеревоМетаданныхЗначение.Колонки.Добавить("ОбъектМД");
	ДеревоМетаданныхЗначение.Колонки.Добавить("ПолноеИмяМетаданных");
	ДеревоМетаданныхЗначение.Колонки.Добавить("НастройкиПостроителя");
	ДеревоМетаданныхЗначение.Колонки.Добавить("ИспользоватьОтбор");
	ДеревоМетаданныхЗначение.Колонки.Добавить("ИндексКартинки");
	ДеревоМетаданныхЗначение.Колонки.Добавить("Развернут");
	
	ИспользующиеИтоги = Новый Массив;
	Корень = ДеревоМетаданныхЗначение.Строки.Добавить();
	ПостроениеПоддереваОбъекта(Метаданные, Корень, МетаданныеОписание, КонтекстВызова);
	СверткаПоддереваОбъекта(Корень);
	
	Для каждого Эл Из СсылочныеТипы Цикл
		СоответствиеОбъектовМетаданныхИСсылочныхТипов.Вставить(Эл.Значение, Эл.Ключ);
	КонецЦикла;
	
КонецПроцедуры	

Функция СоздатьОбъектЗаписиXMLДляПроверки()
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-16");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Проверка");
	
	Возврат ЗаписьXML;
	
КонецФункции

// Для внутреннего использования
//
Процедура ВыполнитьПроверкуДляВыгрузкиОбъектовИзПланаОбмена(СсылкаНаУзел) Экспорт
	
	ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	ВсегоОбработаноОбъектов = 0;
	КоличествоОшибок = 0;
	
	ЗаписьXML = СоздатьОбъектЗаписиXMLДляПроверки();
	
	СоставВыгрузки();
	МассивМетаданныхДляВыгрузки = Новый Массив();
	
	Для каждого СтрокаТаблицыВыгрузки Из СоставПолнойВыгрузки Цикл
		
		СтрокаДереваМетаданных = СтрокаТаблицыВыгрузки.СтрокаДерева;
		
		МассивМетаданныхДляВыгрузки.Добавить(СтрокаДереваМетаданных.ОбъектМД);
		
	КонецЦикла;
	
	Если МассивМетаданныхДляВыгрузки.Количество() = 0 Тогда
		МассивМетаданныхДляВыгрузки = Неопределено;
	КонецЕсли;
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СсылкаНаУзел, СсылкаНаУзел.НомерОтправленного + 1, МассивМетаданныхДляВыгрузки);
	Пока ВыборкаИзменений.Следующий() Цикл
		
		// измененный элемент
		Данные = ВыборкаИзменений.Получить();
		
		// данные должны быть
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоУдаление = (мТипДанныхУдаления = ТипЗнч(Данные));
		
		Если ЭтоУдаление Тогда
			Продолжить;
		КонецЕсли;
		
		ВсегоОбработаноОбъектов = ВсегоОбработаноОбъектов + 1;
		
		МетаданныеОбъекта = Данные.Метаданные();
		
		Попытка
			
			ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, Истина);
			
			Сериализатор.ЗаписатьXML(ЗаписьXML, Данные);
			
		Исключение
			
			КоличествоОшибок = КоличествоОшибок + 1;
			
			СтрокаОписанияОшибки = ОписаниеОшибки();
			
			// для ссылочных добавляем ссылку, а для не ссылочных сам объект
			ЭтоНеСсылка = Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта)
			Или Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта)
			Или Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеОбъекта)
			Или Метаданные.Константы.Содержит(МетаданныеОбъекта);
			
			Если ЭтоНеСсылка Тогда
				
				ОбъектыВыгруженныеСОшибками.Вставить(Данные, СтрокаОписанияОшибки);
				
			Иначе	
				
				Если ОбъектыВыгруженныеСОшибками.Получить(Данные.Ссылка) = Неопределено Тогда
					ОбъектыВыгруженныеСОшибками.Вставить(Данные.Ссылка, СтрокаОписанияОшибки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	СформироватьТаблицуОшибок(ОбъектыВыгруженныеСОшибками);
	
КонецПроцедуры

Функция СформироватьТаблицуОшибок(ОбъектыВыгруженныеСОшибками)
	
	Если ОбъектыВыгруженныеСОшибками.Количество() = 0 Тогда
		СообщитьПользователю(Нстр("ru = 'Проверка объектов на наличие недопустимых символов завершена. Ошибок не обнаружено.'"));
	Иначе
		
		СтрокаПоискаОшибки = "ЗаписатьXML):";
		ДлинаСтрокиПоиска = СтрДлина(СтрокаПоискаОшибки);
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("ТекстОшибки");
		
		Для каждого СтрокаСоответствия Из ОбъектыВыгруженныеСОшибками Цикл
			
			СтрокаТаблицы = ТаблицаДанных.Добавить();
			СтрокаТаблицы.Объект = Строка(СтрокаСоответствия.Ключ);
			
			// служебные символы удалим из ошибки
			ТекстСообщения = СформироватьТекстСообщенияБезСлужебныхСимволов(СтрокаСоответствия.Значение);
			
			ПозицияНачалаОшибки = Найти(ТекстСообщения, "ЗаписатьXML):");
			Если ПозицияНачалаОшибки > 0 Тогда
				
				ТекстСообщения = Сред(ТекстСообщения, ПозицияНачалаОшибки + ДлинаСтрокиПоиска);
				
			КонецЕсли;
			
			СтрокаТаблицы.ТекстОшибки = СокрЛП(ТекстСообщения);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьТекстСообщенияБезСлужебныхСимволов(Знач ТекстСообщения)
	
	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
		
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);
	
КонецФункции // ()

// Процедура рекурсивно обрабатывает дерево метаданных, образуя списки полной и вспомогательной выгрузки
//
// Параметры
//
Процедура СоставВыгрузки(ПересчитатьВыгружаемыеПоСсылке = Ложь) Экспорт
	
	СоставПолнойВыгрузки = Новый ТаблицаЗначений;
	СоставПолнойВыгрузки.Колонки.Добавить("ОбъектМД");
	СоставПолнойВыгрузки.Колонки.Добавить("СтрокаДерева");	
	СоставПолнойВыгрузки.Индексы.Добавить("ОбъектМД");
	
	СоставВспомогательнойВыгрузки = Новый ТаблицаЗначений;
	СоставВспомогательнойВыгрузки.Колонки.Добавить("ОбъектМД");
	СоставВспомогательнойВыгрузки.Колонки.Добавить("СтрокаДерева");	
	СоставВспомогательнойВыгрузки.Индексы.Добавить("ОбъектМД");
	
	Для каждого СтрокаДЗ Из ДеревоМетаданныхЗначение.Строки Цикл
		ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ);
	КонецЦикла;
	
	мНаличиеВыгрузкиПодчиненныхОбъектов = СоставВспомогательнойВыгрузки.Количество() > 0;
	
	Если ПересчитатьВыгружаемыеПоСсылке Тогда
		
		ПересчитатьВыгружаемыеПоСсылке(СоставПолнойВыгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДанныеМассиваСсылок(МассивСсылок, СтрокаИмяДляЗапроса, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено)
	
	Если МассивСсылок.Количество() = 0
		Или Не ЗначениеЗаполнено(СтрокаИмяДляЗапроса) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ _.*
	|	
	|ИЗ
	|	" + СтрокаИмяДляЗапроса + " КАК _
	|ГДЕ
	|	_.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, Истина, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	
КонецПроцедуры

// Процедура записывает наборы записей регистра (накопления, бухгалтерии...)
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//
Процедура ВыгрузкаДанных(ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено)
	
	мВыгруженныеОбъекты = Новый ТаблицаЗначений;
	мВыгруженныеОбъекты.Колонки.Добавить("Ссылка");
	мВыгруженныеОбъекты.Индексы.Добавить("Ссылка");
	
	ИнициализироватьТаблицуПредопределенных();
	
	Если ОбъектыВыгруженныеСОшибками = Неопределено Тогда
		ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	КонецЕсли;
	
	Попытка
		
		Для каждого СтрокаТаблицыВыгрузки Из СоставПолнойВыгрузки Цикл
			
			СтрокаДереваМетаданных = СтрокаТаблицыВыгрузки.СтрокаДерева;
			
			Если СтрокаДереваМетаданных.ЭлементОписания.Менеджер = Неопределено Тогда
				ВызватьИсключение(Нстр("ru = 'Выгрузка данных. Внутренняя ошибка'"));
			КонецЕсли;
			
			Если Метаданные.Константы.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
				
				ЗаписьКонстанты(ЗаписьXML, СтрокаДереваМетаданных.ОбъектМД, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаДереваМетаданных.ОбъектМД) Или
				Метаданные.РегистрыНакопления.Содержит(СтрокаДереваМетаданных.ОбъектМД) Или
				Метаданные.РегистрыРасчета.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
				
				ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
				
			ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
				
				ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, Истина);
				
			ИначеЕсли ТипЗнч(СтрокаДереваМетаданных.ЭлементОписания.Менеджер) = Тип("Строка") Тогда
				// специальный случай для перерасчетов
				ЗаписьПерерасчета(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
				
			ИначеЕсли Метаданные.Последовательности.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
				
				ЗаписьПоследовательности(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
				
			Иначе
				
				ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущийМассивСсылок = Новый Массив();
		ТекущееИмяЗапроса = "";
		
		ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов, ОбъектыВыгруженныеСОшибками);
		
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для внутреннего использования
//
Функция ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "") Экспорт
	
	ОбъектМетаданных  = СтрокаДереваМетаданных.Метаданные;
	ИмяМетаданных     = ОбъектМетаданных.ПолноеИмя();
	
	Если Не ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
		СтрокаПолейДляВыборки = "_.*";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
	
	Возврат  ТекстЗапроса;
	
КонецФункции

// Для внутреннего использования
//
Функция ПодготовитьПостроительДляВыгрузки(СтрокаДереваМетаданных, СтрокаПолейДляВыборки = "") Экспорт
	
	ЕстьДопОтборы = (СтрокаДереваМетаданных.НастройкиПостроителя <> Неопределено); 
	
	ИтоговыйТекстЗапроса = ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
	
	ПостроительОтчета = Новый ПостроительОтчета;
	
	ПостроительОтчета.Текст = ИтоговыйТекстЗапроса;
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
	ПостроительОтчета.Отбор.Сбросить();
	Если ЕстьДопОтборы Тогда
		
		ПостроительОтчета.УстановитьНастройки(СтрокаДереваМетаданных.НастройкиПостроителя);
		
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("ДатаНачала", Дата(1,1,1));
	ПостроительОтчета.Параметры.Вставить("ДатаОкончания", Дата(1,1,1));
	
	Возврат ПостроительОтчета;
	
КонецФункции

Функция ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных)
	
	ПостроительОтчета = ПодготовитьПостроительДляВыгрузки(СтрокаДереваМетаданных);
	
	ПостроительОтчета.Выполнить();
	РезультатЗапроса = ПостроительОтчета.Результат;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов = Ложь)
	
	РезультатЗапроса = ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных);
	
	ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, Истина, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	
КонецПроцедуры

// Процедура исполняет переданный запрос и записывает полученные через запрос объекты
//
// Параметры
//   Запрос - запрос для исполнения, результат содержит выборку объектов для записи
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   ЗапросВерхнегоУровня - признак необходимости анимации процесса
//
Процедура ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, ЗапросВерхнегоУровня = Ложь, 
	ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	// универсальная процедура выгрузки ссылочных объектов процедура
	ОбработкаРезультатаЗапроса(РезультатЗапроса, ЗаписьXML, Истина, ЗапросВерхнегоУровня, 
	ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	
КонецПроцедуры

Процедура ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов)
	
	Если Не ТолькоПроверкаНедопустимыхСимволов Тогда
		Возврат;
	КонецЕсли;
	
	Если ВсегоОбработаноОбъектов > 1000 Тогда
		
		СтрокаРезультата = ЗаписьXML.Закрыть();
		СтрокаРезультата = Неопределено;
		ЗаписьXML = Неопределено;
		
		ЗаписьXML = СоздатьОбъектЗаписиXMLДляПроверки();
		
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаВыгружена(Ссылка)
	
	Возврат мВыгруженныеОбъекты.Найти(Ссылка, "Ссылка") <> Неопределено;
	
КонецФункции

Процедура ДобавитьСсылкуКВыгруженным(Ссылка)
	
	СтрокаДобавления = мВыгруженныеОбъекты.Добавить();
	СтрокаДобавления.Ссылка = Ссылка;
	
КонецПроцедуры

// Процедура записывает содержащиеся в выборке результата запроса объекты и необходимые "по ссылке" объекты ИБ
//
// Параметры
//   РезультатЗапроса - результат запроса
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   ЭтоЗапросПоОбъекту - если Истина, выборка должна содержать объекты, на которые может быть ссылка,
//             если Ложь, выгружать, как объект не нужно, только обработать возможные ссылки на др. объекты ИБ
//
Процедура ОбработкаРезультатаЗапроса(РезультатЗапроса, ЗаписьXML, ЭтоЗапросПоОбъекту = Ложь, 
	ЗапросВерхнегоУровня = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено, ТолькоПроверкаНедопустимыхСимволов = Ложь)
	
	ВыборкаИзРезультатовЗапроса = РезультатЗапроса.Выбрать();
	
	ВсегоОбработаноОбъектов = 0;
	ОбработаноОбъектов = 0;
	
	Пока ВыборкаИзРезультатовЗапроса.Следующий() Цикл
		
		Если ЭтоЗапросПоОбъекту Тогда
			
			// выгрузка ссылочных объектов
			Ссылка = ВыборкаИзРезультатовЗапроса.Ссылка;
			Если СсылкаВыгружена(Ссылка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДобавитьСсылкуКВыгруженным(Ссылка);
			
			ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
			
		КонецЕсли;
		
		Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
			
			// перебираем колонки запроса в поисках ссылочных значений, которые, возможно, нужно выгрузить
			Для каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
				
				ЗначениеКолонки = ВыборкаИзРезультатовЗапроса[КолонкаЗапроса.Имя];
				
				Если ТипЗнч(ЗначениеКолонки) = мТипРезультатЗапроса Тогда
					
					ОбработкаРезультатаЗапроса(ЗначениеКолонки, ЗаписьXML, , , ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
					
				Иначе
					
					ЗаписатьЗначениеПриНеобходимости(ЗначениеКолонки, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтоЗапросПоОбъекту Тогда
			
			ОбъектПоСсылке = Ссылка.ПолучитьОбъект();
			
			Попытка
				
				ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
				
				Сериализатор.ЗаписатьXML(ЗаписьXML, ОбъектПоСсылке);
				
				МетаданныеОбъекта = ОбъектПоСсылке.Метаданные();
				
				Если ЭтоМетаданныеСПредопределеннымиЭлементами(МетаданныеОбъекта) И ОбъектПоСсылке.Предопределенный Тогда
					
					НоваяСтрока = ТаблицаПредопределенных.Добавить();
					НоваяСтрока.ИмяТаблицы = МетаданныеОбъекта.ПолноеИмя();
					НоваяСтрока.Ссылка = XMLСтрока(Ссылка);
					НоваяСтрока.ИмяПредопределенныхДанных = ОбъектПоСсылке.ИмяПредопределенныхДанных;
					
				КонецЕсли;
				
			Исключение
				
				СтрокаОписанияОшибки = ОписаниеОшибки();
				//не смогли записать в XML
				// возможно проблема с недопустимыми символами в XML
				Если ТолькоПроверкаНедопустимыхСимволов Тогда
					
					Если ОбъектыВыгруженныеСОшибками.Получить(Ссылка) = Неопределено Тогда
						ОбъектыВыгруженныеСОшибками.Вставить(Ссылка, СтрокаОписанияОшибки);
					КонецЕсли;					
					
				Иначе
					
					ИтоговаяСтрокаСообщения = Нстр("ru = 'При выгрузке объекта %1(%2) возникла ошибка:
					|%3'");
					ИтоговаяСтрокаСообщения = ПодставитьПараметрыВСтроку(ИтоговаяСтрокаСообщения, ОбъектПоСсылке, ТипЗнч(Объект), СтрокаОписанияОшибки);
					СообщитьПользователю(ИтоговаяСтрокаСообщения);
					
					ВызватьИсключение ИтоговаяСтрокаСообщения;
					
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьПодчиненныеЗначенияНабора(ЗаписьXML, Движение, МассивКолонок, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	Для каждого ЗаписьИзНабора Из Движение Цикл
		
		Для каждого Колонка Из МассивКолонок Цикл
			
			Если Колонка = "СубконтоДт"
				Или Колонка = "СубконтоКт" Тогда
				
				Значение = ЗаписьИзНабора[Колонка];
				Для каждого КлючИЗначение Из Значение Цикл
					
					Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
						ЗаписатьЗначениеПриНеобходимости(КлючИЗначение.Значение, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);	
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				СохраненноеЗначение = ЗаписьИзНабора[Колонка];
				ЗаписатьЗначениеПриНеобходимости(СохраненноеЗначение, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии = Ложь)
	
	МассивКолонок = Новый Массив();
	Для каждого КолонкаТаблицы Из ТаблицаДвижений.Колонки Цикл
		
		Если КолонкаТаблицы.Имя = "МоментВремени"
			Или Найти(КолонкаТаблицы.Имя, "ВидСубконтоДт") = 1
			Или Найти(КолонкаТаблицы.Имя, "ВидСубконтоКт") = 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Найти(КолонкаТаблицы.Имя, "СубконтоДт") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("СубконтоДт") = Неопределено Тогда
				МассивКолонок.Добавить("СубконтоДт");	
			Конецесли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Найти(КолонкаТаблицы.Имя, "СубконтоКт") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("СубконтоКт") = Неопределено Тогда
				МассивКолонок.Добавить("СубконтоКт");	
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		МассивКолонок.Добавить(КолонкаТаблицы.Имя);
		
	КонецЦикла;
	
	Возврат МассивКолонок;
	
КонецФункции

// Процедура анализирует необходимость записи объекта "по ссылке" и осуществляет запись
//
// Параметры
//   АнализируемоеЗначение - анализируемое значение
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//
Процедура ЗаписатьЗначениеПриНеобходимости(АнализируемоеЗначение, ЗаписьXML, 
	ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	Если Не ЗначениеЗаполнено(АнализируемоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМД = СсылочныеТипы.Получить(ТипЗнч(АнализируемоеЗначение));
	
	Если ОбъектМД = Неопределено Тогда
		Возврат; // это не ссылка
	КонецЕсли;
	
	Если СсылкаВыгружена(АнализируемоеЗначение) Тогда
		Возврат; // объект уже был выгружен
	КонецЕсли;
	
	// Проверка того, что данный тип входит в список выгружаемых дополнительно
	СтрокаТаблицы = СоставПолнойВыгрузки.Найти(ОбъектМД, "ОбъектМД");
	Если СтрокаТаблицы <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = СоставВспомогательнойВыгрузки.Найти(ОбъектМД, "ОбъектМД");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ДопЗапрос = Новый Запрос("ВЫБРАТЬ * ИЗ " + СтрокаТаблицы.СтрокаДерева.ЭлементОписания.ДляЗапроса + ОбъектМД.Имя +
		" КАК ТаблицаОбъекта_" + " ГДЕ Ссылка = &Ссылка");				
		ДопЗапрос.УстановитьПараметр("Ссылка", АнализируемоеЗначение);
		РезультатЗапроса = ДопЗапрос.Выполнить();
		ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, , ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает значение константы
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   МД_Константа - описание метаданного - выгружаемой константы
//
Процедура ЗаписьКонстанты(ЗаписьXML, МД_Константа, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	МенеджерЗначения = Константы[МД_Константа.Имя].СоздатьМенеджерЗначения();
	МенеджерЗначения.Прочитать();
	ЗаписатьЗначениеПриНеобходимости(МенеджерЗначения.Значение, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	// собственно выгрузка
	
	ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
	Попытка
		
		ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
		
		Сериализатор.ЗаписатьXML(ЗаписьXML, МенеджерЗначения);
		
	Исключение
		
		СтрокаОписанияОшибки = ОписаниеОшибки();
		//не смогли записать в XML
		// возможно проблема с недопустимыми символами в XML
		Если ТолькоПроверкаНедопустимыхСимволов Тогда
			
			ОбъектыВыгруженныеСОшибками.Вставить(МенеджерЗначения, СтрокаОписанияОшибки);
			
		Иначе
			
			ИтоговаяСтрокаСообщения = Нстр("ru = 'При выгрузке константы %1 возникла ошибка:
			|%2'");
			ИтоговаяСтрокаСообщения = ПодставитьПараметрыВСтроку(ИтоговаяСтрокаСообщения, МД_Константа.Имя, СтрокаОписанияОшибки);
			
			СообщитьПользователю(ИтоговаяСтрокаСообщения);
			
			ВызватьИсключение ИтоговаяСтрокаСообщения;
			
		КонецЕсли;
		
	КонецПопытки;	
	
	ОбработанныхКонстант = ОбработанныхКонстант + 1;
	
КонецПроцедуры

// Процедура записывает наборы записей регистра (накопления, бухгалтерии...)
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру
//
Процедура ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, РегистрБухгалтерии = Ложь)
	
	МенеджерНабораЗаписей = СтрокаДереваМетаданных.ЭлементОписания.Менеджер[СтрокаДереваМетаданных.ОбъектМД.Имя];
	
	ИмяТаблицыДляЗапроса = СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса;
	
	ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерНабораЗаписей, ИмяТаблицыДляЗапроса, 
	СтрокаДереваМетаданных.ОбъектМД.Имя, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, РегистрБухгалтерии);
	
КонецПроцедуры

// Процедура записывает наборы записей регистра (накопления, бухгалтерии...)
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру
//
Процедура ЗаписьПерерасчета(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	ИмяРегистраРасчета = СтрокаДереваМетаданных.Родитель.Родитель.ОбъектМД.Имя;
	МенеджерСтрокой = СтрЗаменить(СтрокаДереваМетаданных.ЭлементОписания.Менеджер, "%i", ИмяРегистраРасчета);
	МенеджерПерерасчета = Вычислить(МенеджерСтрокой);
	МенеджерПерерасчета = МенеджерПерерасчета[СтрокаДереваМетаданных.ОбъектМД.Имя];
	СтрокаДляЗапроса = СтрЗаменить(СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса, "%i", ИмяРегистраРасчета);
	
	ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерПерерасчета, СтрокаДляЗапроса, СтрокаДереваМетаданных.ОбъектМД.Имя, 
	СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	
КонецПроцедуры

// Процедура записывает последовательности документов
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру
//
Процедура ЗаписьПоследовательности(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
	
	МенеджерНабораЗаписей = СтрокаДереваМетаданных.ЭлементОписания.Менеджер[СтрокаДереваМетаданных.ОбъектМД.Имя];
	ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерНабораЗаписей, СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса, 
	СтрокаДереваМетаданных.ОбъектМД.Имя, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);		
	
КонецПроцедуры

// Процедура записывает данные, доступ к которым осуществляется через набор записей
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру
//
Процедура ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерНабораЗаписей, ДляЗапроса, ИмяОбъекта, 
	СтрокаДереваМетаданных = Неопределено, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, РегистрБухгалтерии = Ложь)
	
	// получить состав колонок записи регистра и проверить наличие хотя бы одной записи
	Если ДляЗапроса = "РегистрБухгалтерии." Тогда
		ИмяТаблицыДляЗапроса = ДляЗапроса + ИмяОбъекта + ".ДвиженияССубконто";	
	Иначе
		ИмяТаблицыДляЗапроса = ДляЗапроса + ИмяОбъекта;	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ " + ИмяТаблицыДляЗапроса + " КАК ТаблицаОбъекта_" + ИмяОбъекта);
	РезультатЗапросаПоСоставу = Запрос.Выполнить();
	Если РезультатЗапросаПоСоставу.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = РезультатЗапросаПоСоставу.Выгрузить();
	МассивКолонок = ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии);
	
	// выгрузка регистров осуществляется через его набор записей
	НаборЗаписей = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
	
	Отбор = НаборЗаписей.Отбор;
	СтрокаПолейОтбора = "";
	Для каждого ЭлементОтбора Из Отбор Цикл 
		Если Не ПустаяСтрока(СтрокаПолейОтбора) Тогда 
			СтрокаПолейОтбора = СтрокаПолейОтбора + ",";
		КонецЕсли;
		СтрокаПолейОтбора = СтрокаПолейОтбора + ЭлементОтбора.Имя;
	КонецЦикла;
	
	ПостроительОтчета = ПодготовитьПостроительДляВыгрузки(СтрокаДереваМетаданных, СтрокаПолейОтбора); 
	ПостроительОтчета.Выполнить();
	РезультатЗапросаПоЗначениямОтбора = ПостроительОтчета.Результат;	
	ВыборкаИзРезультата = РезультатЗапросаПоЗначениямОтбора.Выбрать();
	
	КоличествоПолейОтбора = НаборЗаписей.Отбор.Количество();
	
	// читаем наборы записей с различным составом отбора и записываем их
	Пока ВыборкаИзРезультата.Следующий() Цикл
		
		// Отбор устанавливаем для регистров, у которых есть хотя бы один отбор (измерение)
		Если КоличествоПолейОтбора <> 0 Тогда
			
			Для каждого Колонка Из РезультатЗапросаПоЗначениямОтбора.Колонки Цикл 
				Отбор[Колонка.Имя].Значение = ВыборкаИзРезультата[Колонка.Имя];
				Отбор[Колонка.Имя].ВидСравнения = ВидСравнения.Равно;
				Отбор[Колонка.Имя].Использование = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		
		Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
			
			// проверяем все записанные в наборе значения на необходимость записи "по ссылке"
			ВыгрузитьПодчиненныеЗначенияНабора(ЗаписьXML, НаборЗаписей, МассивКолонок, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
			
		КонецЕсли;
		
		ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
		Попытка
			
			ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
			
			Сериализатор.ЗаписатьXML(ЗаписьXML, НаборЗаписей);
			
		Исключение
			
			СтрокаОписанияОшибки = ОписаниеОшибки();
			//не смогли записать в XML
			// возможно проблема с недопустимыми символами в XML
			Если ТолькоПроверкаНедопустимыхСимволов Тогда
				
				НовыйНабор = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
				
				Для каждого СтрокаОтбора Из НаборЗаписей.Отбор Цикл
					
					СтрокаОтбораФормы = НовыйНабор.Отбор.Найти(СтрокаОтбора.Имя);
					
					Если СтрокаОтбораФормы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаОтбораФормы.Использование = СтрокаОтбора.Использование;
					СтрокаОтбораФормы.ВидСравнения = СтрокаОтбора.ВидСравнения;
					СтрокаОтбораФормы.Значение = СтрокаОтбора.Значение;
					
				КонецЦикла;
				
				ОбъектыВыгруженныеСОшибками.Вставить(НовыйНабор, СтрокаОписанияОшибки);
				
			Иначе
				
				ИтоговаяСтрокаСообщения = Нстр("ru = 'При выгрузке регистра %1%2 возникла ошибка:
				|%3'");
				ИтоговаяСтрокаСообщения = ПодставитьПараметрыВСтроку(ИтоговаяСтрокаСообщения, ДляЗапроса, ИмяОбъекта, СтрокаОписанияОшибки);
				
				СообщитьПользователю(ИтоговаяСтрокаСообщения);
				
				ВызватьИсключение ИтоговаяСтрокаСообщения;
				
			КонецЕсли;
			
		КонецПопытки;
		
		ОбработанныхНаборовЗаписей = ОбработанныхНаборовЗаписей + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура рекурсивно обрабатывает строку дерева метаданных, образуя списки полной и вспомогательной выгрузки
//
// Параметры
//   СоставПолнойВыгрузки - список полной выгрузки
//   СоставВспомогательнойВыгрузки - список вспомогательной выгрузки
//   СтрокаДЗ - обрабатываемая строка дерева метаданных
//
Процедура ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ)
	
	Если (СтрокаДЗ.ЭлементОписания <> Неопределено) 
		И СтрокаДЗ.ЭлементОписания.Выгружаемый Тогда
		
		СтрокаДобавления = Неопределено;
		
		Если СтрокаДЗ.Выгружать Тогда
			
			СтрокаДобавления = СоставПолнойВыгрузки.Добавить();
			
		ИначеЕсли СтрокаДЗ.ВыгружатьПриНеобходимости Тогда
			
			СтрокаДобавления = СоставВспомогательнойВыгрузки.Добавить();
			
		КонецЕсли;
		
		Если СтрокаДобавления <> Неопределено Тогда
			
			СтрокаДобавления.ОбъектМД = СтрокаДЗ.ОбъектМД;	
			СтрокаДобавления.СтрокаДерева = СтрокаДЗ;			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ПодчиненнаяСтрокаДЗ Из СтрокаДЗ.Строки Цикл
		ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, ПодчиненнаяСтрокаДЗ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет строку дерева метаданных, попутно заполняя соответствие ссылочных типов объектам метаданных
//
// Параметры
//   ОбъектМД - описание объекта метаданных
//   ЭлементДЗ - заполняемая строка дерева метаданных
//   ЭлементОписания - описание класса, к которому принадлежит объект метаданных (свойства, подчиненные классы)
//
Процедура ПостроениеПоддереваОбъекта(ОбъектМД, ЭлементДЗ, ЭлементОписания, КонтекстВызова)
	
	ЭлементДЗ.Метаданные = ОбъектМД;
	ЭлементДЗ.ОбъектМД   = ОбъектМД;
	ЭлементДЗ.ПолноеИмяМетаданных = ОбъектМД.Имя;
	ЭлементДЗ.ЭлементОписания = ЭлементОписания;
	ЭлементДЗ.Выгружать = Истина;
	ЭлементДЗ.ВыгружатьПриНеобходимости = Истина;
	ЭлементДЗ.ИндексКартинки = ЭлементОписания.ИндексКартинки;
	
	Если ЭлементОписания.Менеджер <> Неопределено Тогда
		
		// заполнение соответствия ссылочных типов объектам метаданных
		Если ОбъектОбразуетСсылочныйТип(ОбъектМД) Тогда
			Если КонтекстВызова = "Шаблоны" Тогда
				Если ОбъектМД.Имя = "ДатаМобайл_ШаблоныДокументов" Тогда 
					СсылочныеТипы[ТипЗнч(ЭлементОписания.Менеджер[ОбъектМД.Имя].ПустаяСсылка())] = ОбъектМД;
				КонецЕсли;
			ИначеЕсли КонтекстВызова = "Терминалы" Тогда
				Если ОбъектМД.Имя = "ДатаМобайл_СписокТСД" Тогда
					СсылочныеТипы[ТипЗнч(ЭлементОписания.Менеджер[ОбъектМД.Имя].ПустаяСсылка())] = ОбъектМД;
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		
		Если Метаданные.РегистрыНакопления.Содержит(ОбъектМД) 
			Или	Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
			
			ИспользующиеИтоги.Добавить(ЭлементДЗ);
			
		КонецЕсли;
		
	КонецЕсли;		
	
	// подчиненные ветви
	Для каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
		
		Если Не ПодчиненныйКласс.Выгружаемый Тогда
			Продолжить;
		КонецЕсли;
		
		ВеткаКласса = ЭлементДЗ.Строки.Добавить();
		ВеткаКласса.Метаданные = ПодчиненныйКласс.Класс;
		ВеткаКласса.Выгружать = Истина;
		ВеткаКласса.ВыгружатьПриНеобходимости = Истина;
		ВеткаКласса.ПолноеИмяМетаданных = ПодчиненныйКласс.Класс;
		ВеткаКласса.ИндексКартинки = ПодчиненныйКласс.ИндексКартинки;
		
		ПодчиненныеОбъектыДанногоКласса = ОбъектМД[ПодчиненныйКласс.Класс];
		
		Для каждого ПодчиненныйОбъектМД Из ПодчиненныеОбъектыДанногоКласса Цикл
			Если ВкладкаВызова = "Шаблоны" И ПодчиненныйОбъектМД.Имя = "ДатаМобайл_ШаблоныДокументов" Тогда
				ПодчиненныйЭлементДЗ = ВеткаКласса.Строки.Добавить();
				ПостроениеПоддереваОбъекта(ПодчиненныйОбъектМД, ПодчиненныйЭлементДЗ, ПодчиненныйКласс, КонтекстВызова);	
			ИначеЕсли ВкладкаВызова = "Терминалы" И ПодчиненныйОбъектМД.Имя = "ДатаМобайл_СписокТСД" Тогда 
				ПодчиненныйЭлементДЗ = ВеткаКласса.Строки.Добавить();
				ПостроениеПоддереваОбъекта(ПодчиненныйОбъектМД, ПодчиненныйЭлементДЗ, ПодчиненныйКласс, КонтекстВызова);
			КонецЕсли;		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет из дерева метаданных строки, соответствующие метаданным, заведомо не попадающим в выгрузку
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных, подчиненные которой рассматриваются
//        с точки зрения удаления из списка потенциально выгружаемых
//
Процедура СверткаПоддереваОбъекта(ЭлементДЗ)
	
	УдаляемыеВеткиКлассов = Новый Массив;
	Для каждого ВеткаКласса Из ЭлементДЗ.Строки Цикл
		
		УдаляемыеПодчиненныеМД = Новый Массив;
		
		Для каждого ПодчиненныйОбъектМД Из ВеткаКласса.Строки Цикл
			СверткаПоддереваОбъекта(ПодчиненныйОбъектМД);
			Если (ПодчиненныйОбъектМД.Строки.Количество()) = 0 
				И (Не ПодчиненныйОбъектМД.ЭлементОписания.Выгружаемый) Тогда 
				
				УдаляемыеПодчиненныеМД.Добавить(ВеткаКласса.Строки.Индекс(ПодчиненныйОбъектМД));
				
			КонецЕсли;			
		КонецЦикла;
		
		Для Сч = 1 По УдаляемыеПодчиненныеМД.Количество() Цикл
			ВеткаКласса.Строки.Удалить(УдаляемыеПодчиненныеМД[УдаляемыеПодчиненныеМД.Количество() - Сч]);
		КонецЦикла;
		
		Если ВеткаКласса.Строки.Количество() = 0 Тогда
			УдаляемыеВеткиКлассов.Добавить(ЭлементДЗ.Строки.Индекс(ВеткаКласса));
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = 1 По УдаляемыеВеткиКлассов.Количество() Цикл
		ЭлементДЗ.Строки.Удалить(УдаляемыеВеткиКлассов[УдаляемыеВеткиКлассов.Количество() - Сч]);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и 
//      выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
//      содержать объект, соответствующий данной строке
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура УстановитьВыгружатьПодчиненным(ЭлементДЗ)
	Для каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
		ПодчиненнаяСтрока.Выгружать = ЭлементДЗ.Выгружать;
		УстановитьВыгружатьПодчиненным(ПодчиненнаяСтрока);
	КонецЦикла;
КонецПроцедуры

// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбновитьСостояниеВыгружать(ЭлементДЗ)
	Если ЭлементДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
		Возврат; // обновляем вверх или до корня, или до первого встретившегося выгружаемого
	КонецЕсли;
	Состояние = Неопределено;
	Для каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		Если Состояние = Неопределено Тогда
			Состояние = ПодчиненныйЭлементДЗ.Выгружать;
		Иначе
			Если Не Состояние = ПодчиненныйЭлементДЗ.Выгружать Тогда
				Состояние = 2;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние <> Неопределено Тогда
		ЭлементДЗ.Выгружать = Состояние;
		ОбновитьСостояниеВыгружать(ЭлементДЗ.Родитель);
	КонецЕсли;
КонецПроцедуры

// Процедура обрабатывает состояние признака Выгрузка, проставляя признаки Выгрузка и ВыгружатьПриНеобходимости
// связанным ветвям дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбработкаИзмененияСостоянияВыгружать(ЭлементДЗ) Экспорт
	Если ЭлементДЗ.Выгружать = 2 Тогда
		ЭлементДЗ.Выгружать = 0;
	КонецЕсли;
	// Изменяем состояние "вниз"
	УстановитьВыгружатьПодчиненным(ЭлементДЗ);
	// Изменяем состояние "вверх"
	ОбновитьСостояниеВыгружать(ЭлементДЗ.Родитель);
КонецПроцедуры

// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и 
//      выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
//      содержать объект, соответствующий данной строке
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ)
	
	Для каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
		ПодчиненнаяСтрока.ВыгружатьПриНеобходимости = ЭлементДЗ.ВыгружатьПриНеобходимости;
		УстановитьВыгружатьПриНеобходимостиПодчиненным(ПодчиненнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ)
	
	Если ЭлементДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
		Возврат; // обновляем вверх или до корня, или до первого встретившегося выгружаемого
	КонецЕсли;
	
	Состояние = Неопределено;
	Для каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		
		Если Состояние = Неопределено Тогда
			Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости;
		Иначе
			Если Не Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости Тогда
				Состояние = 2;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Состояние <> Неопределено Тогда
		ЭлементДЗ.ВыгружатьПриНеобходимости = Состояние;
		ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает состояние признака Выгрузка, проставляя признаки Выгрузка и ВыгружатьПриНеобходимости
// связанным ветвям дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(ЭлементДЗ) Экспорт
	
	Если ЭлементДЗ.ВыгружатьПриНеобходимости = 2 Тогда
		ЭлементДЗ.ВыгружатьПриНеобходимости = 0;
	КонецЕсли;
	
	// Изменяем состояние "вниз"
	УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ);
	// Изменяем состояние "вверх"
	ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	
КонецПроцедуры

// Функция определяет, являются ли объекты данного класса метаданных типизированными
//
// Параметры
//   Описание - Описание класса
// Возврат - Истина, если объекты данного класса метаданных типизированы, Ложь в противном случае
//
Функция КлассМДТипизированный(Описание)
	
	Для каждого Свойство Из Описание.Свойства Цикл
		Если Свойство.Значение = "Тип" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// Функция определяет, являются ли тип ссылочным
//
// Параметры
//   Тип - исследуемый тип
// Возврат - Истина, если тип ссылочный, Ложь в противном случае
//
Функция СсылочныйТип(Тип)
	
	МетаданныеТипа = СсылочныеТипы.Получить(Тип);
	Возврат МетаданныеТипа <> Неопределено;	
	
КонецФункции

// Процедура добавляет в массив новый элемент, если он является уникальным
//
// Параметры
//   Массив - исследуемый тип
//   Элемент - добавляемый элемент
//
Процедура ДобавитьВМассивЕслиУникальный(Массив, Элемент)
	
	Если Массив.Найти(Элемент) = Неопределено Тогда
		Массив.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных, соответствующего строке дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
// Возврат - массив потенциально используемых соответствующей записью типов
//
Функция ПолучитьВсеТипы(ЭлементДЗ)
	
	ОбъектМД = ЭлементДЗ.ОбъектМД;
	Если ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданных") 
		И ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданныхКонфигурация") Тогда
		
		ВызватьИсключение(Нстр("ru = 'Внутренняя ошибка обработки выгрузки'"));
		
	КонецЕсли;
	
	Возврат ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементДЗ.ЭлементОписания);
	
КонецФункции

// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных
//
// Параметры
//   ОбъектМД - описание метаданного
//   ЭлементОписания - описание класса объекта метаданного
// Возврат - массив потенциально используемых соответствующей записью типов
//
Функция ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементОписания)
	
	ВсеТипы = Новый Массив;
	
	Для каждого Свойство Из ЭлементОписания.Свойства Цикл
		
		ЗначениеСвойства = ОбъектМД[Свойство.Значение];
		Если ТипЗнч(ЗначениеСвойства) = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных") И ЗначениеСвойства.Количество() > 0 Тогда
			
			Для каждого СтрокаКоллекции Из ЗначениеСвойства Цикл
				
				СсылочныйТипКлючИЗначение = СоответствиеОбъектовМетаданныхИСсылочныхТипов[СтрокаКоллекции];
				
				Если СсылочныйТипКлючИЗначение <> Неопределено Тогда
					
					ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение);	
					
				КонецЕсли;
				
			КонецЦикла;			
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектМетаданных") Тогда
			
			Для каждого СсылочныйТипКлючИЗначение Из СсылочныеТипы Цикл
				
				Если ЗначениеСвойства = СсылочныйТипКлючИЗначение.Значение Тогда
					ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение.Ключ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КлассМДТипизированный(ЭлементОписания) Тогда
		
		ОписаниеТипа = ОбъектМД.Тип;
		Для каждого ОдинТип Из ОписаниеТипа.Типы() Цикл
			
			Если СсылочныйТип(ОдинТип) Тогда
				ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Метаданные.РегистрыСведений.Содержит(ОбъектМД) Или 
			Метаданные.РегистрыНакопления.Содержит(ОбъектМД) Или
			Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Или
			Метаданные.РегистрыРасчета.Содержит(ОбъектМД) Тогда
			
			// какой-то из регистров, ищем в возможных регистраторах
			Для каждого ДокументМД Из Метаданные.Документы Цикл
				
				Если ДокументМД.Движения.Содержит(ОбъектМД) Тогда
					
					ДобавитьВМассивЕслиУникальный(ВсеТипы, ТипЗнч(Документы[ДокументМД.Имя].ПустаяСсылка()));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
		
		Для каждого ПодчиненныйОбъектМД Из ОбъектМД[ПодчиненныйКласс.Класс] Цикл
			
			ТипыПодчиненного = ПолучитьТипыИспользуемыеОМД(ПодчиненныйОбъектМД, ПодчиненныйКласс);
			Для каждого ОдинТип Из ТипыПодчиненного Цикл
				ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВсеТипы;
	
КонецФункции

// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных
// Поиск осуществляется среди строк, подчиненных переданной
//
// Параметры
//   СтрокаДЗ - строка дерева метаданных, от которой осуществляется поиск
//   ОбъектМД - описание метаданного
// Возврат - строка дерева метаданных
//
Функция ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД)
	
	Возврат СтрокаДЗ.Строки.Найти(ОбъектМД, "ОбъектМД", Истина);	
	
КонецФункции

// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных
// Поиск осуществляется по всему дереву метаданных
//
// Параметры
//   ОбъектМД - описание метаданного
// Возврат - строка дерева метаданных
//
Функция ЭлементДЗПоОбъектуМД(ОбъектМД)
	Для каждого СтрокаДЗ Из ДеревоМетаданныхЗначение.Строки Цикл
		ЭлементДЗ = ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД);
		Если ЭлементДЗ <> Неопределено Тогда 
			Возврат ЭлементДЗ;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Процедура определяет, на какие объект может ссылаться запись, соответствующая объекту метаданных, отображаемому
// данной строкой дерева метаданных и проставляет им признак ВыгружатьПриНеобходимости
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура УстановкаСостоянияВыгружатьПриНеобходимости(ЭлементДЗ)
	
	ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	Если ЭлементДЗ.Выгружать <> 1 И ЭлементДЗ.ВыгружатьПриНеобходимости <> 1 Тогда
		Возврат;
	КонецЕсли;
	Если ЭлементДЗ.ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеТипы = ПолучитьВсеТипы(ЭлементДЗ);
	Для каждого СсылочныйТип Из ВсеТипы Цикл
		
		ТипИОбъект = СсылочныеТипы.Получить(СсылочныйТип);
		Если ТипИОбъект = Неопределено Тогда
			
			ТекстИсключения = Нстр("ru = 'Внутренняя ошибка. Неполное заполнение структуры ссылочных типов %1'");
			ТекстИсключения = ПодставитьПараметрыВСтроку(ТекстИсключения, СсылочныйТип);
			ВызватьИсключение(ТекстИсключения);
			
		КонецЕсли;
		
		ОбъектМД = ТипИОбъект;
		СтрокаДЗ = ЭлементДЗПоОбъектуМД(ОбъектМД);
		Если СтрокаДЗ = Неопределено Тогда 
			
			ТекстИсключения = Нстр("ru = 'Внутренняя ошибка. Неполное заполнение дерева метаданных. Отсутствует объект, образующий тип %1'");
			ТекстИсключения = ПодставитьПараметрыВСтроку(ТекстИсключения, СсылочныйТип);
			ВызватьИсключение(ТекстИсключения);
			
		КонецЕсли;
		
		Если СтрокаДЗ.Выгружать = 1 
			Или СтрокаДЗ.ВыгружатьПриНеобходимости = 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаДЗ.ВыгружатьПриНеобходимости = 1;
		УстановкаСостоянияВыгружатьПриНеобходимости(СтрокаДЗ);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет общее количество произведенных записей констант + объектного типа + наборов записей
//
// Возврат - общее количество произведенных записей
Функция ВсегоОбработанныхЗаписей()
	
	Возврат мВыгруженныеОбъекты.Количество();
	
КонецФункции

// Процедура производит заполнение дерева описания классов объектов метаданных
//
// Параметры
//
Процедура ЗаполнитьОписаниеМетаданных()
	
	СтэкДереваЗначенийСтроки = Новый Массив;
	МетаданныеОписание = Новый ДеревоЗначений;
	МетаданныеОписание.Колонки.Добавить("Выгружаемый", Новый ОписаниеТипов("Булево"));
	МетаданныеОписание.Колонки.Добавить("ДляЗапроса", Новый ОписаниеТипов("Строка"));
	МетаданныеОписание.Колонки.Добавить("Класс", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	МетаданныеОписание.Колонки.Добавить("Менеджер");
	МетаданныеОписание.Колонки.Добавить("Свойства", Новый ОписаниеТипов("СписокЗначений"));
	МетаданныеОписание.Колонки.Добавить("ИндексКартинки");
	СтэкДереваЗначенийСтроки.Вставить(0, МетаданныеОписание.Строки);
	//////////////////////////////////
	// Конфигурации
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Конфигурации";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.ИндексКартинки = 0;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Справочники
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Справочники";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = Справочники;
	ОписаниеКласса.ДляЗапроса  = "Справочник.";
	ОписаниеКласса.Свойства.Добавить("Владельцы");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 3;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Справочники.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("Использование");
	//////////////////////////////////
	// Конфигурации.Справочники.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Использование");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Справочники.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.ПланыОбмена
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ПланыОбмена";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер = ПланыОбмена;
	ОписаниеКласса.ДляЗапроса  = "ПланОбмена.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 27;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.ПланыОбмена.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.ПланыОбмена.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.ПланыОбмена.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = Ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);	
	
	СтэкДереваЗначенийСтроки.Удалить(0);
	
КонецПроцедуры

// Функция определяет имеет ли переданный объект метаданных ссылочный тип
//
// Возврат - Истина, если переданный объект метаданных имеет ссылочный тип, Ложь - противном случае
Функция ОбъектОбразуетСсылочныйТип(ОбъектМД) Экспорт
	
	Если ОбъектМД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(ОбъектМД)
		Или Метаданные.Документы.Содержит(ОбъектМД)
		Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД)
		Или Метаданные.ПланыСчетов.Содержит(ОбъектМД)
		Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД)
		Или Метаданные.ПланыОбмена.Содержит(ОбъектМД)
		Или Метаданные.БизнесПроцессы.Содержит(ОбъектМД)
		Или Метаданные.Задачи.Содержит(ОбъектМД) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура определяет, какие типы объектов следует выгружать для сохранения ссылочной целостности
//
// Параметры
//   Выгрузка - массив строк - совокупность выгружаемых объектов
Процедура ПересчитатьВыгружаемыеПоСсылке(Выгрузка)
	
	// сброс всех флажков ВыгружатьПриНеобходимости
	СтрокаКонфигурации = ДеревоМетаданныхЗначение.Строки[0];
	СтрокаКонфигурации.ВыгружатьПриНеобходимости = 0;
	ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(СтрокаКонфигурации);
	
	// обработка переданного набора объектов
	Для каждого Выгружаемый Из Выгрузка Цикл
		
		УстановкаСостоянияВыгружатьПриНеобходимости(Выгружаемый.СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текущее значение версии обработки
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Текущее значение версии обработки
//
Функция ВерсияОбъекта() Экспорт
	
	Возврат "2.1.8";
	
КонецФункции

Процедура СообщитьПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

Процедура ИнициализироватьТаблицуПредопределенных()
	
	ТаблицаПредопределенных = Новый ТаблицаЗначений;
	ТаблицаПредопределенных.Колонки.Добавить("ИмяТаблицы");
	ТаблицаПредопределенных.Колонки.Добавить("Ссылка");
	ТаблицаПредопределенных.Колонки.Добавить("ИмяПредопределенныхДанных");
	
КонецПроцедуры

Процедура ВыгрузитьТаблицуПредопределенных(ЗаписьXML)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("PredefinedData");
	
	Если ТаблицаПредопределенных.Количество() > 0 Тогда
		
		ТаблицаПредопределенных.Сортировать("ИмяТаблицы");
		
		ИмяПредыдущейТаблицы = "";
		
		Для каждого Элемент Из ТаблицаПредопределенных Цикл
			
			Если ИмяПредыдущейТаблицы <> Элемент.ИмяТаблицы Тогда
				Если Не ПустаяСтрока(ИмяПредыдущейТаблицы) Тогда
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				ЗаписьXML.ЗаписатьНачалоЭлемента(Элемент.ИмяТаблицы);
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("item");
			ЗаписьXML.ЗаписатьАтрибут("Ссылка", Элемент.Ссылка);
			ЗаписьXML.ЗаписатьАтрибут("ИмяПредопределенныхДанных", Элемент.ИмяПредопределенныхДанных);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ИмяПредыдущейТаблицы = Элемент.ИмяТаблицы;
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗагрузитьТаблицуПредопределенных(ЧтениеXML)
	
	ЧтениеXML.Пропустить(); // При первом чтении пропускам основной блок данных
	ЧтениеXML.Прочитать();
	
	ИнициализироватьТаблицуПредопределенных();
	ВременнаяСтрока = ТаблицаПредопределенных.Добавить();
	
	СоответствиеЗаменыСсылок = Новый Соответствие;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеXML.ЛокальноеИмя <> "item" Тогда
				
				ВременнаяСтрока.ИмяТаблицы = ЧтениеXML.ЛокальноеИмя;
				
				ТекстЗапроса = 
				"ВЫБРАТЬ
				|	Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	" + ВременнаяСтрока.ИмяТаблицы + " КАК Таблица
				|ГДЕ
				|	Таблица.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
				Запрос = Новый Запрос(ТекстЗапроса);
				
			Иначе
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					
					ВременнаяСтрока[ЧтениеXML.ЛокальноеИмя] = ЧтениеXML.Значение;
					
				КонецЦикла;
				
				Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ВременнаяСтрока.ИмяПредопределенныхДанных);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					
					Выборка = РезультатЗапроса.Выбрать();
					
					Если Выборка.Количество() = 1 Тогда
						
						Выборка.Следующий();
						
						СсылкаВБазе = XMLСтрока(Выборка.Ссылка);
						СсылкаВФайле = ВременнаяСтрока.Ссылка;
						
						Если СсылкаВБазе <> СсылкаВФайле Тогда
							
							XMLТип = XMLТипСсылки(Выборка.Ссылка);
							
							СоответствиеТипа = СоответствиеЗаменыСсылок.Получить(XMLТип);
							
							Если СоответствиеТипа = Неопределено Тогда
								
								СоответствиеТипа = Новый Соответствие;
								СоответствиеТипа.Вставить(СсылкаВФайле, СсылкаВБазе);
								СоответствиеЗаменыСсылок.Вставить(XMLТип, СоответствиеТипа);
								
							Иначе
								
								СоответствиеТипа.Вставить(СсылкаВФайле, СсылкаВБазе);
								
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						
						ТекстИсключения = НСтр("ru = 'Обнаружено дублирование предопределенных элементов %1 в таблице %2!'");
						ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ВременнаяСтрока.ИмяПредопределенныхДанных);
						ТекстИсключения = СтрЗаменить(ТекстИсключения, "%2", ВременнаяСтрока.ИмяТаблицы);
						
						ВызватьИсключение ТекстИсключения;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура ЗаменитьСсылкиНаПредопределенные(ИмяФайла)
	
	ПотокЧтения = Новый ЧтениеТекста(ИмяФайла);
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	
	ПотокЗаписи = Новый ЗаписьТекста(ВременныйФайл);
	
	// Константы для разбора текста
	НачалоТипа = "xsi:type=""v8:";
	ДлинаНачалаТипа = СтрДлина(НачалоТипа);
	КонецТипа = """>";
	ДлинаКонцаТипа = СтрДлина(КонецТипа);
	
	ИсходнаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	Пока ИсходнаяСтрока <> Неопределено Цикл
		
		ОстатокСтроки = Неопределено;
		
		ТекущаяПозиция = 1;
		ПозицияТипа = Найти(ИсходнаяСтрока, НачалоТипа);
		Пока ПозицияТипа > 0 Цикл
			
			ПотокЗаписи.Записать(Сред(ИсходнаяСтрока, ТекущаяПозиция, ПозицияТипа - 1 + ДлинаНачалаТипа));
			
			ОстатокСтроки = Сред(ИсходнаяСтрока, ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа - 1);
			ТекущаяПозиция = ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа - 1;
			
			ПозицияКонцаТипа = Найти(ОстатокСтроки, КонецТипа);
			Если ПозицияКонцаТипа = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ИмяТипа = Лев(ОстатокСтроки, ПозицияКонцаТипа - 1);
			СоответствиеЗамены = СоответствиеЗаменыСсылок.Получить(ИмяТипа);
			Если СоответствиеЗамены = Неопределено Тогда
				ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
				Продолжить;
			КонецЕсли;
			
			ПотокЗаписи.Записать(ИмяТипа);
			ПотокЗаписи.Записать(КонецТипа);
			
			ИсходнаяСсылкаXML = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа, 36);
			
			НайденнаяСсылкаXML = СоответствиеЗамены.Получить(ИсходнаяСсылкаXML);
			
			Если НайденнаяСсылкаXML = Неопределено Тогда
				ПотокЗаписи.Записать(ИсходнаяСсылкаXML);
			Иначе
				ПотокЗаписи.Записать(НайденнаяСсылкаXML);
			КонецЕсли;
			
			ТекущаяПозиция = ТекущаяПозиция + ПозицияКонцаТипа - 1 + ДлинаКонцаТипа + 36;
			ОстатокСтроки = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа + 36);
			ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
			
		КонецЦикла;
		
		Если ОстатокСтроки <> Неопределено Тогда
			ПотокЗаписи.ЗаписатьСтроку(ОстатокСтроки);
		Иначе
			ПотокЗаписи.ЗаписатьСтроку(ИсходнаяСтрока);
		КонецЕсли;
		
		ИсходнаяСтрока = ПотокЧтения.ПрочитатьСтроку();
		
	КонецЦикла;
	
	ПотокЧтения.Закрыть();
	ПотокЗаписи.Закрыть();
	
	ИмяФайла = ВременныйФайл;
	
КонецПроцедуры

Функция ЭтоМетаданныеСПредопределеннымиЭлементами(ОбъектМетаданных)
	
	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных)
	Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
	Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
	Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных);
	
КонецФункции

// Возвращает СериализаторXDTO с аннотацией типов.
//
// Возвращаемое значение:
//	СериализаторXDTO - сериализатор.
//
Процедура ИнициализироватьСериализаторXDTOСАннотациейТипов()
	
	ТипыСАннотациейСсылок = ПредопределенныеТипыПриВыгрузке();
	
	Если ТипыСАннотациейСсылок.Количество() > 0 Тогда
		
		Фабрика = ПолучитьФабрикуСУказаниемТипов(ТипыСАннотациейСсылок);
		Сериализатор = Новый СериализаторXDTO(Фабрика);
		
	Иначе
		
		Сериализатор = СериализаторXDTO;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредопределенныеТипыПриВыгрузке()
	
	Типы = Новый Массив;
	
	Для каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Для каждого ОбъектМетаданных Из Метаданные.ПланыСчетов Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Для каждого ОбъектМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Для каждого ОбъектМетаданных Из Метаданные.ПланыВидовРасчета Цикл
		Типы.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Возврат Типы;
	
КонецФункции

// Возвращает фабрику с указанием типов.
//
// Параметры:
//	Типы - ФиксированныйМассив (Метаданные) - массив типов.
//
// Возвращаемое значение:
//	ФабрикаXDTO - фабрика.
//
Функция ПолучитьФабрикуСУказаниемТипов(Знач Типы)
	
	НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML("http://v8.1c.ru/8.1/data/enterprise/current-config");
	Схема = НаборСхем[0];
	Схема.ОбновитьЭлементDOM();
	
	УказанныеТипы = Новый Соответствие;
	Для каждого Тип Из Типы Цикл
		УказанныеТипы.Вставить(XMLТипСсылки(Тип), Истина);
	КонецЦикла;
	
	ПространствоИмен = Новый Соответствие;
	ПространствоИмен.Вставить("xs", "http://www.w3.org/2001/XMLSchema");
	РазыменовательПространствИменDOM = Новый РазыменовательПространствИменDOM(ПространствоИмен);
	ТекстXPath = "/xs:schema/xs:complexType/xs:sequence/xs:element[starts-with(@type,'tns:')]";
	
	Запрос = Схема.ДокументDOM.СоздатьВыражениеXPath(ТекстXPath, РазыменовательПространствИменDOM);
	Результат = Запрос.Вычислить(Схема.ДокументDOM);
	
	Пока Истина Цикл
		
		УзелПоля = Результат.ПолучитьСледующий();
		Если УзелПоля = Неопределено Тогда
			Прервать;
		КонецЕсли;
		АтрибутТип = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("type");
		ТипБезNSПрефикса = Сред(АтрибутТип.ТекстовоеСодержимое, СтрДлина("tns:") + 1);
		
		Если УказанныеТипы.Получить(ТипБезNSПрефикса) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УзелПоля.УстановитьАтрибут("nillable", "true");
		УзелПоля.УдалитьАтрибут("type");
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайлаСхемы = ПолучитьИмяВременногоФайла("xsd");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаСхемы);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	Фабрика = СоздатьФабрикуXDTO(ИмяФайлаСхемы);
	
	Попытка
		УдалитьФайлы(ИмяФайлаСхемы);
	Исключение
	КонецПопытки;
	
	Возврат Фабрика;
	
КонецФункции

// Возвращает имя типа, который будет использован в xml файле для указанного объекта метаданных
// Используется при поиске и замене ссылок при загрузке, при модификации схемы current-config при записи
// 
// Параметры:
//  Значение - Объект метаданных или Ссылка
//
// Возвращаемое значение:
//  Строка - Строка вида AccountingRegisterRecordSet.Хозрасчетный, описывающая объект метаданных 
//
Функция XMLТипСсылки(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Значение;
		МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Ссылка = МенеджерОбъекта.ПолучитьСсылку();
	Иначе
		ОбъектМетаданных = Значение.Метаданные();
		Ссылка = Значение;
	КонецЕсли;
	
	Если ОбъектОбразуетСсылочныйТип(ОбъектМетаданных) Тогда
		
		Возврат СериализаторXDTO.XMLТипЗнч(Ссылка).ИмяТипа;
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Ошибка при определении XMLТипа ссылки для объекта %1: объект не является ссылочным!'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ОбъектМетаданных.ПолноеИмя());
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер.
// 
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
	
	ЧастиИмени = РазложитьСтрокуВМассивПодстрок(ПолноеИмя);
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ = ЧастиИмени[1];
	КонецЕсли;
	
	Если ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
	КонецЕсли;
	
	Возврат Менеджер[ИмяОМ];
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ".")
	
	МассивСтрок = Новый Массив();
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока Истина Цикл
		Поз = Найти(Стр, Разделитель);
		Если Поз = 0 Тогда
			Если (СокрЛП(Стр) <> "") Тогда
				МассивСтрок.Добавить(Стр);
			КонецЕсли;
			Возврат МассивСтрок;
		КонецЕсли;
		МассивСтрок.Добавить(Лев(Стр,Поз - 1));
		Стр = Сред(Стр, Поз + ДлинаРазделителя);
	КонецЦикла;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура КнопкаПоддержка(Команда)
	
	ФормаОбновления = ПолучитьФорму("Обработка.ДатаМобайл_АРМДиспетчера.Форма.ФормаПоддержки", Новый Структура("ЦветКнопкиМенялся", ЦветКнопкиМенялся));
	
	ФормаОбновления.Открыть()
	
КонецПроцедуры

&НаСервере
Процедура ИндикацияКнопкиОбновления()
	
	Модуль_СтроковыеФункцииКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СтроковыеФункцииКлиентСервер");

	ВерсияОбновления = "";
	
	Попытка ВерсияОбновления = ДатаМобайл_ОбщийМодуль.СформироватьHTTPЗапросКЯндексДиску(Истина); Исключение КонецПопытки;
	
	ЦветКнопкиМенялся = Ложь;
	
	Если ВерсияОбновления <> "" Тогда
		ТекущаяВерсия = Метаданные.Обработки.ДатаМобайл_АРМДиспетчера.Формы.Управляемая.Синоним;
		ТекущаяВерсия = Лев(СтрЗаменить(ТекущаяВерсия, "DataMobile: АРМ диспетчера (", ""), 10);
		
		Год 	= Лев(ВерсияОбновления, 4);
		Месяц 	= Сред(ВерсияОбновления, 6, 2);
		День 	= Прав(ВерсияОбновления, 2);
		
		ДатаОбновления = Модуль_СтроковыеФункцииКлиентСервер.СтрокаВДату(День + Месяц + Год);
		ДатаРасширения = Модуль_СтроковыеФункцииКлиентСервер.СтрокаВДату(ТекущаяВерсия);
		Если ДатаОбновления > ДатаРасширения Тогда
			ЦветКнопкиМенялся = Истина;
			Элементы.Кнопка_Поддержка.ЦветФона = Новый Цвет(255,225,0);
		КонецЕсли; 	
	КонецЕсли;
	
	Если Не ЦветКнопкиМенялся Тогда
		Элементы.Кнопка_Поддержка.ЦветФона = Новый Цвет();	
	КонецЕсли; 
	
КонецПроцедуры

#Область РаботаСРезультатыПроверкиУпаковокМДЛП

&НаСервереБезКонтекста
Функция ПолучитьСхемаАкцептования(Док)	
	
	Возврат Док.ПолучитьОбъект().СхемаАкцептования;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусПровереноУТоваров(Документ, ДокументТСД)
	
	Параметр = Новый структура;
	Параметр.Вставить("Ключ", Документ);
	ФД = ПолучитьФорму("Документ.УведомлениеОПриемкеМДЛП.Форма.ФормаДокумента", Параметр);
	
	Попытка
		АдресДанныхПроверки = ФД.АдресДанныхПроверки();	
	Исключение
		АдресДанныхПроверки = "";
	КонецПопытки; 
	
	ПараметрыСканированияИПроверки = ВернутьПараметрыСканированияИПроверки(Документ, АдресДанныхПроверки);
	
	ФормаПроверки = ПолучитьФорму("Обработка.ПроверкаИПодборУпаковокМДЛП.Форма.ПроверкаИПодбор", ПараметрыСканированияИПроверки, ФД);
	
	ДеревоМаркированнойПродукции = ФормаПроверки.ДеревоМаркированнойПродукции;
	
	Массив = ПолучитьМассивСтрокДляПроставленияСтатусаВНАличии(ДеревоМаркированнойПродукции, ДокументТСД);
	
	Если Массив.Количество() = 0 Тогда
		Сообщить("Строки с кизами не обнаружены.");
		Возврат;	
	КонецЕсли;
	
	УстановитьСтатусДляСтрок(
	Массив,
	ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии"), ФормаПроверки);
	
	ФД.СканированиеИПроверкаУпаковокПослеЗакрытия(АдресДляПереноса, ФормаПроверки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСтрокДляПроставленияСтатусаВНАличии(ДеревоМаркированнойПродукции, ДокументТСД)
	
	ТЗ = ПолучитьТаблицуЗначенийПоДеревуПроверяемойПродукции(ДеревоМаркированнойПродукции);
	
	Массив = ПолучитьМассивСтрокКизовКОбработкеСтатуса(ТЗ, ДокументТСД);
	
	Возврат Массив;
	
КонецФункции	

&НаСервере
Функция ПолучитьМассивСтрокКизовКОбработкеСтатуса(ТЗ, ДокументТСД)
	
	КИЗы = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	КИЗы.Свернуть("ЦРПТМарка, Количество");
	
	МассивСтрокКизовКОбработкеСтатуса = Новый Массив; 
	
	Для каждого СтрКизы Из КИЗы Цикл
		
		Если СтрКизы.Количество = 0 Или ПустаяСтрока(СтрКизы.ЦРПТМарка) Тогда
			Продолжить;
		КонецЕсли;
		
		ЦРПТМарка = ДатаМобайл_МДЛП.УбратьИзМаркиУпрСимволы(СтрКизы.ЦРПТМарка);
		
		СтруктураОтбора = Новый Структура("Ключ", ЦРПТМарка);
		
		НайденнаяСтрока = ТЗ.НайтиСтроки(СтруктураОтбора);
		
		Если НайденнаяСтрока.Количество() > 0 Тогда
			МассивСтрокКизовКОбработкеСтатуса.Добавить(НайденнаяСтрока[0].Значение);
			НайденнаяСтрока[0].ДобавленВПроверку = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	//проверка по коробам и палетам
	КопияТЗПоРодителям = ТЗ.Скопировать(,"Родитель");
	КопияТЗПоРодителям.Свернуть("Родитель");
	
	ДобавитьВМассивЗначенияПоПалетамКоробам(КопияТЗПоРодителям, ТЗ, МассивСтрокКизовКОбработкеСтатуса); 
	
	Если КопияТЗПоРодителям.Количество() > 0 Тогда
		ДобавитьВМассивЗначенияПоПалетамКоробам(КопияТЗПоРодителям, ТЗ, МассивСтрокКизовКОбработкеСтатуса); 	
	КонецЕсли; 
	
	Возврат МассивСтрокКизовКОбработкеСтатуса;
	
КонецФункции

&НаСервере
Процедура ДобавитьВМассивЗначенияПоПалетамКоробам(КопияТЗПоРодителям, ТЗ, МассивСтрокКизовКОбработкеСтатуса)
	
	Для каждого СтрокаПоКопииТЗ Из КопияТЗПоРодителям Цикл
		
		Родитель = СтрокаПоКопииТЗ.Родитель;
		
		Если Родитель = Неопределено Или Родитель = "<товар без коробки>" Тогда
			Продолжить;	
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Родитель,ДобавленВПроверку", Родитель, Неопределено);
		
		НайденнаяСтрокаРодитель = ТЗ.НайтиСтроки(СтруктураОтбора);
		
		Если НайденнаяСтрокаРодитель.Количество() = 0 Тогда						
			СтруктураОтбора = Новый Структура("Ключ", Родитель);
			
			НайденнаяСтрокаРодитель = ТЗ.НайтиСтроки(СтруктураОтбора);
			
			МассивСтрокКизовКОбработкеСтатуса.Добавить(НайденнаяСтрокаРодитель[0].Значение);
			НайденнаяСтрокаРодитель[0].ДобавленВПроверку = Истина;
			СтрокаПоКопииТЗ.Родитель = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВернутьПараметрыСканированияИПроверки(Документ, АдресДанныхПроверки)
	
	Модуль_ИнтеграцияМДЛПКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтеграцияМДЛПКлиентСервер");
	
	ПараметрыСканированияИПроверки = Новый Структура;
	ПараметрыСканированияИПроверки.Вставить("ПроверяемыйДокумент"                     , Документ);
	ПараметрыСканированияИПроверки.Вставить("ДобавлятьОтсутствующиеВДокументе"        , Документ.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок"));
	ПараметрыСканированияИПроверки.Вставить("РежимПодбораСуществующихУпаковок"        , Ложь);
	ПараметрыСканированияИПроверки.Вставить("ИдентификаторОрганизации"                , Документ.ИдентификаторОрганизации);
	ПараметрыСканированияИПроверки.Вставить("ПриЗавершенииСохранятьРезультатыПроверки", Истина);
	ПараметрыСканированияИПроверки.Вставить("РедактированиеФормыНедоступно"           , Модуль_ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Документ.СтатусПроверкиИПодбора));
	ПараметрыСканированияИПроверки.Вставить("РежимПросмотра"                          , Модуль_ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Документ.СтатусПроверкиИПодбора));
	ПараметрыСканированияИПроверки.Вставить("СниматьБлокировкуОбъектаПередЗаписьюПромежуточныхРезультатов", Истина);
	
	Если Модуль_ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Документ.СтатусПроверкиИПодбора)
		Или Модуль_ИнтеграцияМДЛПКлиентСервер.ВыполняютсяПроверкаИПодбор(Документ.СтатусПроверкиИПодбора) Тогда
		ПараметрыСканированияИПроверки.Вставить("АдресПредварительноСохраненныхРезультатовПроверки", АдресДанныхПроверки);
	КонецЕсли;
	
	Возврат ПараметрыСканированияИПроверки;	
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусДляСтрок(ВыделенныеСтроки, НовыйСтатус, ФормаПроверки)
	
	ДеревоМаркированнойПродукции = ФормаПроверки.ДеревоМаркированнойПродукции;
	
	КоличествоКОбработке = ВыделенныеСтроки.Количество();
	КоличествоОбработанныхСтрок = 0;
	МассивУпаковокСИзменившимсяСоставом = Новый Массив;
	
	Для каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = НовыйСтатус Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком")
			Или ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
			
			Если Не УстановкаСтатусаОтсутствуетВозможна(ДанныеСтроки) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки.СтатусПроверки = НовыйСтатус;
			УстановитьСтатусОтсутствуетДляПодчиненных(ДанныеСтроки);
			
		Иначе
			
			РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
			Если РодительскаяСтрока <> Неопределено
				И РодительскаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки.СтатусПроверки = НовыйСтатус;
			
		КонецЕсли;
		
		УстановитьИндексКартинкиСтатусаПроверки(ДанныеСтроки);
		ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(ДанныеСтроки);
		КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
		
	КонецЦикла;
	
	ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанныхСтрок, КоличествоКОбработке, ФормаПроверки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуЗначенийПоДеревуПроверяемойПродукции(ДеревоМаркированнойПродукции)
	
	ИдентификаторТекущейПроверяемойУпаковки = -1;
	СледующийСтикерОтложено                 = 1;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("Ключ",,"Ключ");
	ТаблицаЗначений.Колонки.Добавить("Значение",,"Значение");
	ТаблицаЗначений.Колонки.Добавить("Родитель",,"Родитель");
	ТаблицаЗначений.Колонки.Добавить("ДобавленВПроверку",,"Добавлен в проверку");
	
	Дерево = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	Для каждого СтрокаДеревоВерхнегоУровня Из Дерево Цикл 
		
		Стр = ТаблицаЗначений.Добавить();
		Стр.Ключ		= СтрокаДеревоВерхнегоУровня.Представление;
		Стр.Значение	= СтрокаДеревоВерхнегоУровня.ПолучитьИдентификатор();
		
		Если СтрокаДеревоВерхнегоУровня.ПолучитьЭлементы().Количество() > 0 Тогда
			Для каждого ВложенностьПервогоУровня Из СтрокаДеревоВерхнегоУровня.ПолучитьЭлементы() Цикл 
				
				Стр = ТаблицаЗначений.Добавить();
				Стр.Ключ		= ВложенностьПервогоУровня.Представление;
				Стр.Значение	= ВложенностьПервогоУровня.ПолучитьИдентификатор();
				Стр.Родитель	= СтрокаДеревоВерхнегоУровня.Представление;
				
				Если ВложенностьПервогоУровня.ПолучитьЭлементы().Количество() > 0 Тогда
					Для каждого ВложенностьВторогоУровня Из ВложенностьПервогоУровня.ПолучитьЭлементы() Цикл
						
						Стр = ТаблицаЗначений.Добавить();
						Стр.Ключ		= ВложенностьВторогоУровня.Представление;
						Стр.Значение	= ВложенностьВторогоУровня.ПолучитьИдентификатор();
						Стр.Родитель	= СтрокаДеревоВерхнегоУровня.Представление;
						
						Если ВложенностьВторогоУровня.ПолучитьЭлементы().Количество() > 0 Тогда
							
							Для каждого ВложенностьТретьегоУровня Из ВложенностьВторогоУровня.ПолучитьЭлементы() Цикл
								
								Стр = ТаблицаЗначений.Добавить();
								Стр.Ключ		= ВложенностьТретьегоУровня.Представление;
								Стр.Значение	= ВложенностьТретьегоУровня.ПолучитьИдентификатор();
								Стр.Родитель	= ВложенностьПервогоУровня.Представление;
								
							КонецЦикла;	
						КонецЕсли;
						
					КонецЦикла; 	
				КонецЕсли; 
				
			КонецЦикла;	
		КонецЕсли; 	
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Ключ", "<товар без коробки>");
	
	НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для каждого СтрокаМассива Из НайденныеСтроки Цикл
			ТаблицаЗначений.Удалить(СтрокаМассива);		
		КонецЦикла; 	
	КонецЕсли; 
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипУпаковкиГруппаТоваров()
	
	Возврат ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ПустаяСсылка");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные)
	
	Для каждого ПодчиненнаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Не УстановкаСтатусаОтсутствуетВозможна(ПодчиненнаяСтрока) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляПодчиненных(СтрокаДерева)
	
	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
	ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(СтрокаДерева);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки = 5;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  0;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  1;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  2;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  3;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  4;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(СтрокаДерева)
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Пока РодительскаяСтрока <> Неопределено Цикл
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительскаяСтрока, Ложь);
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанных, КоличествоВсего, ФормаПроверки)
	
	Модуль_СтроковыеФункцииКлиентСервер 		= ОбщегоНазначенияКлиент.ОбщийМодуль("СтроковыеФункцииКлиентСервер");
	
	Если КоличествоОбработанных > 0 Тогда
		
		ШаблонЗаголовкаОбработано   = НСтр("ru = 'Статус проверки ""%1"" установлен'");
		ШаблонСообщенияОбработано   = НСтр("ru = 'Для %1 из %2 выделенных в списке строк установлен статус проверки ""%3""'");
		ТекстЗаголовка = Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОбработано, НовыйСтатус);
		ТекстСообщения = Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщенияОбработано,
		КоличествоОбработанных,
		КоличествоВсего,
		НовыйСтатус);
		
		ПроверкаЗавершена(ФормаПроверки);	
		
	Иначе
		
		ШаблонЗаголовкаНеОбработано = НСтр("ru = 'Статус проверки ""%1"" не установлен'");
		ШаблонСообщенияНеОбработано = НСтр("ru = 'Статус проверки ""%1"" не установлен ни для одной строки.'");;
		ТекстЗаголовка = Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаНеОбработано, НовыйСтатус);
		ТекстСообщения = Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияНеОбработано, НовыйСтатус);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, ПересчитыватьПодчиненные)
	
	СтрокаДерева.КоличествоПодчиненныхУпаковок                = 0;
	СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего                   = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхОтложено      = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеПроверялось = 0;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхОтложено + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
			
		КонецЕсли;
		
		Если ПересчитыватьПодчиненные Тогда
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Истина);
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
			
		КонецЕсли;
		
		СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок ;
		СтрокаДерева.КоличествоПодчиненныхУпаковок                = СтрокаДерева.КоличествоПодчиненныхУпаковок                + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
		
		СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
		СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
		СтрокаДерева.КоличествоПодчиненныхОтложено      = СтрокаДерева.КоличествоПодчиненныхОтложено      + ПодчиненнаяСтрока.КоличествоПодчиненныхОтложено;
		СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
		СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеПроверялось;
		
	КонецЦикла;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
	
	СтрокаДерева.ВсяУпаковкаПроверена =
	Не СтрокаДерева.НеСодержитсяВДанныхДокумента
	И (СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхВНаличии)
	И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар");
	
	СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева);
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
		СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует");
	КонецЕсли;
	
	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗавершена(ФормаПроверки)
	
	ДеревоМаркированнойПродукции = ФормаПроверки.ДеревоМаркированнойПродукции;
	
	Если ДеревоМаркированнойПродукции.ПолучитьЭлементы().Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Проверка не может быть завершена, так как отсутствуют проверяемые товары.'");
	КонецЕсли;
	
	КоличествоНепроверенных = 0;
	КоличествоОтложенных    = 0;
	КоличествоВсего         = 0;
	
	Для каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			Для каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если ПодчиненнаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком")
					Или ПодчиненнаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
					КоличествоНепроверенных = КоличествоНепроверенных + 1;
				ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
					КоличествоОтложенных = КоличествоОтложенных + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком")
			Или СтрокаДерева.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоНепроверенных = КоличествоНепроверенных + СтрокаДерева.КоличествоПодчиненныхНеПроверялось;
		КоличествоОтложенных    = КоличествоОтложенных    + СтрокаДерева.КоличествоПодчиненныхОтложено;
		КоличествоВсего         = КоличествоВсего         + СтрокаДерева.КоличествоПодчиненныхВсего;
		
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
			КоличествоНепроверенных = КоличествоНепроверенных + 1;
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
			КоличествоОтложенных = КоличествоОтложенных + 1;
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + 1;
		
	КонецЦикла;
	
	ЗавершитьПроверку(ФормаПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверку(ФормаПроверки, СтатусПроверки = Неопределено)
	
	ДеревоМаркированнойПродукции = ФормаПроверки.ДеревоМаркированнойПродукции;
	
	АдресВоВременномХранилище = РезультатПроверкиИПодбора(СтатусПроверки, ФормаПроверки.ВладелецФормы.УникальныйИдентификатор, ДеревоМаркированнойПродукции);
	
	Модифицированность = Ложь;
	АдресДляПереноса = АдресВоВременномХранилище;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева)
	
	ВсегоПодчиненных = СтрокаДерева.КоличествоПодчиненныхВсего;
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных = НСтр("ru = '<не является групповой упаковкой>'");
		
	ИначеЕсли СтрокаДерева.НеСодержитсяВДанныхДокумента Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<не применимо>'");
		
	ИначеЕсли ВсегоПодчиненных = 0 Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<информация о составе отсутствует>'");
		
	Иначе
		Модуль_СтроковыеФункцииКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СтроковыеФункцииКлиентСервер");
		
		КоличествоПроверено =
		СтрокаДерева.КоличествоПодчиненныхВНаличии
		+ СтрокаДерева.КоличествоПодчиненныхОтложено
		+ СтрокаДерева.КоличествоПодчиненныхНеЧислилось
		+ СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		
		СтрокиПредставления = Новый Массив;
		СтрокиПредставления.Добавить(Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверено %1 из %2'"), КоличествоПроверено, ВсегоПодчиненных));
		Если СтрокаДерева.КоличествоПодчиненныхОтсутствует > 0 Тогда
			СтрокиПредставления.Добавить(Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'отсутствует %1'"), СтрокаДерева.КоличествоПодчиненныхОтсутствует));
		КонецЕсли;
		Если СтрокаДерева.КоличествоПодчиненныхОтложено > 0 Тогда
			СтрокиПредставления.Добавить(Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'отложено %1'"), СтрокаДерева.КоличествоПодчиненныхОтложено));
		КонецЕсли;
		Если СтрокаДерева.КоличествоПодчиненныхНеЧислилось > 0 Тогда
			СтрокиПредставления.Добавить(Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'не числилось %1'"), СтрокаДерева.КоличествоПодчиненныхНеЧислилось));
		КонецЕсли;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных = СтрСоединить(СтрокиПредставления, ", ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева)
	
	ВсегоПодчиненных = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + СтрокаДерева.КоличествоПодчиненныхУпаковок;
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрокаДерева.НомерУпаковки;
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0
		И СтрокаДерева.КоличествоПодчиненныхУпаковок = 0 Тогда
		
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = ПредставлениеТовара(СтрокаДерева);
		Иначе
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<информация о составе отсутствует>'");
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = ПредставлениеТовара(СтрокаДерева);
		
	Иначе
		
		Модуль_СтроковыеФункцииКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СтроковыеФункцииКлиентСервер");
		
		СтрокиПредставления = Новый Массив;
		Если СтрокаДерева.КоличествоПодчиненныхУпаковок > 0 Тогда
			СтрокиПредставления.Добавить(Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'групповых упаковок - %1'"), СтрокаДерева.КоличествоПодчиненныхУпаковок));
		КонецЕсли;
		Если СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок > 0 Тогда
			СтрокиПредставления.Добавить(Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'потребительских упаковок -  %1'"), СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок));
		КонецЕсли;
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрСоединить(СтрокиПредставления, ", ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
		
		Если СтрокаДерева.Свойство("ИдетПроверкаДаннойУпаковки")
			И СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
			СтрокаДерева.ИндексКартинкиШтрихкод = 3;
		Иначе
			СтрокаДерева.ИндексКартинкиШтрихкод = 0;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
		
		СтрокаДерева.ИндексКартинкиШтрихкод = 1;
		
	Иначе
		
		СтрокаДерева.ИндексКартинкиШтрихкод = 2;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТовара(СтрокаДерева)
	
	Модуль_СтроковыеФункцииКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("СтроковыеФункцииКлиентСервер");
	
	СтрокиПредставления = Новый Массив; 
	
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		СтрокиПредставления.Добавить(Строка(СтрокаДерева.Номенклатура));
		Если ЗначениеЗаполнено(СтрокаДерева.Характеристика) Тогда
			СтрокиПредставления.Добавить(Строка(СтрокаДерева.Характеристика));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.Серия) Тогда
			СтрокиПредставления.Добавить(Строка(СтрокаДерева.Серия));
		Иначе
			Если ЗначениеЗаполнено(СтрокаДерева.НомерСерии) Тогда
				СтрокиПредставления.Добавить(Строка(СтрокаДерева.НомерСерии));
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
				ПредставлениеГоденДо = ?(СтрокаДерева.ГоденДо = КонецМесяца(СтрокаДерева.ГоденДо), Формат(СтрокаДерева.ГоденДо, "ДФ=MM/yy"), Формат(СтрокаДерева.ГоденДо, "ДФ=dd.MM.yy"));
				СтрокиПредставления.Добавить(Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1'"), ПредставлениеГоденДо));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
			СтрокиПредставления.Добавить(СтрокаДерева.GTIN);
		Иначе
			СтрокиПредставления.Добавить(Лев(СтрокаДерева.GTIN, 14));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.НомерСерии) Тогда
			СтрокиПредставления.Добавить(Строка(СтрокаДерева.НомерСерии));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
			ПредставлениеГоденДо = ?(СтрокаДерева.ГоденДо = КонецМесяца(СтрокаДерева.ГоденДо), Формат(СтрокаДерева.ГоденДо, "ДФ=MM/yy"), Формат(СтрокаДерева.ГоденДо, "ДФ=dd.MM.yy"));
			СтрокиПредставления.Добавить(Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1'"), ПредставлениеГоденДо));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(СтрокиПредставления, ", ");
	
КонецФункции

&НаСервере
Функция РезультатПроверкиИПодбора(СтатусПроверки, УникальныйИдентификаторФормыВладельца, ДеревоМаркированнойПродукции)
	
	Если СтатусПроверки <> Неопределено Тогда
		Для каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаПроверяемого, СтатусПроверки, Ложь);
		КонецЦикла;
		ПересчитатьВсеИтогиФормы(ДеревоМаркированнойПродукции);
	КонецЕсли;
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	
	РезультатПроверки = Новый ТаблицаЗначений;
	РезультатПроверки.Колонки.Добавить("НомерУпаковки" , Модуль_ОбщегоНазначения.ОписаниеТипаСтрока(200));
	РезультатПроверки.Колонки.Добавить("ТипУпаковки"   , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковокМДЛП"));
	РезультатПроверки.Колонки.Добавить("СтатусПроверки", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияУпаковкиМДЛП"));
	
	Для каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаПроверяемого.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			
			Для каждого СтрокаПотребительскихУпаковок Из СтрокаПроверяемого.ПолучитьЭлементы() Цикл
				НоваяСтрока = РезультатПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПотребительскихУпаковок);
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = РезультатПроверки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПроверяемого);
			Если СтрокаПроверяемого.КоличествоПодчиненныхОтсутствует > 0 Тогда
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует;
			КонецЕсли;
			
		КонецЕсли
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатПроверки", РезультатПроверки);	
	
	Результат.Вставить(
	"АдресДанныхРезультатаПроверки", 
	ПоместитьВоВременноеХранилище(ДанныеРезультатовПроверки(ДеревоМаркированнойПродукции), УникальныйИдентификаторФормыВладельца));
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификаторФормыВладельца);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаДерева, СтатусПроверки, УстанавливатьБезусловно)
	
	Если СтрокаДерева.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком
		Или СтрокаДерева.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
		
	ИначеЕсли УстанавливатьБезусловно Тогда
		
		СтрокаДерева.СтатусПроверки = СтатусПроверки;
		
	ИначеЕсли ЗначениеЗаполнено(СтатусПроверки)
		И (СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась
		Или СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена) Тогда
		
		СтрокаДерева.СтатусПроверки = СтатусПроверки;
		
	КонецЕсли;
	
	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстанавливатьБезусловно =
		СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковокМДЛП.ГрупповаяУпаковка
		И СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует;
		
		ИзменитьСтатусПроверкиВСтрокеДерева(ПодчиненнаяСтрока, СтатусПроверки, УстанавливатьБезусловно);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВсеИтогиФормы(ДеревоМаркированнойПродукции)
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции)
	
	Для каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Истина);
		
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Функция ДанныеРезультатовПроверки(ДеревоМаркированнойПродукции)
	
	РезультатыПроверки = Новый Структура;
	РезультатыПроверки.Вставить("ДеревоМаркированнойПродукции", ДанныеФормыВЗначение(ДеревоМаркированнойПродукции, Тип("ДеревоЗначений")));
	РезультатыПроверки.Вставить("СледующийСтикерОтложено"     , СледующийСтикерОтложено);
	РезультатыПроверки.Вставить("НомерПроверяемойУпаковки"    , НомерПроверяемойУпаковки(ДеревоМаркированнойПродукции));
	
	Возврат РезультатыПроверки;
	
КонецФункции

&НаСервере
Функция НомерПроверяемойУпаковки(ДеревоМаркированнойПродукции)
	
	Если ИдентификаторТекущейПроверяемойУпаковки <> - 1 Тогда
		СтрокаСПроверяемойУпаковкой = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
		Если СтрокаСПроверяемойУпаковкой <> Неопределено Тогда
			Возврат СтрокаСПроверяемойУпаковкой.НомерУпаковки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДокументКопирования", Неопределено);
	
	Попытка
		Если Копирование Тогда		
			Если Элементы.СписокДокументов.ВыделенныеСтроки.Количество() = 0 Тогда
			Иначе
				ПараметрыОткрытия.Вставить("ДокументКопирования", Элементы.СписокДокументов.ВыделенныеСтроки[0]);
			КонецЕсли; 
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	ОткрытьФорму("Обработка.ДатаМобайл_АРМДиспетчера.Форма.ФормаСозданияДокумента", ПараметрыОткрытия, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ВкладкаПользователиИРоли

&НаКлиенте
Процедура ПользователиПриАктивизацииСтроки(Элемент)
	ПользователиИРоли.Параметры.УстановитьЗначениеПараметра("Пользователь", Элемент.ТекущаяСтрока);
КонецПроцедуры

#Область ПечатьБейджей

&НаКлиенте
Процедура ПечатьБейджей(Команда)
	
	МассивПользователей = Элементы.Пользователи.ВыделенныеСтроки;
	
	Таб = ПолучитьМакетНаСервере(МассивПользователей);
	
	Таб.Показать("Бейджи");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере(МассивПользователей)
	
	ТекКолонка = 1;
	ТекСтрока  = 1;
	
	Таб                     = Новый ТабличныйДокумент;
	Таб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Пользователи" + СокрЛП(ИмяКомпьютера());
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Бейджи");
	ЭтикеткаОбласть         = Макет.ПолучитьОбласть(1,1,4,2);
	ОбластьПользователя     = ЭтикеткаОбласть.Области.Пользователь;
	ОбластьШтрихкод         = ЭтикеткаОбласть.Области.ОбластьШтрихкод;
	РисунокШтрихкод         = ЭтикеткаОбласть.Рисунки.Штрихкод;
	
	ВысотаЭтикетки = 50;
	ШиринаЭтикетки = 90;
	
	ОбластьПользователя.ВысотаСтроки = ВысотаЭтикетки * 2.65 * 0.3;
	ОбластьШтрихкод.ВысотаСтроки     = ВысотаЭтикетки * 2.65 * 0.5;
	РисунокШтрихкод.Расположить(ОбластьШтрихкод);
	
	ЭтикеткаОбласть.Область(2,2,2,2).ШиринаКолонки = ШиринаЭтикетки * 0.53;
	
	ОбластьГраницаСправа      = Макет.ПолучитьОбласть(2,4,4,4);
	ОбластьНизГраницыСправа   = Макет.ПолучитьОбласть(5,4,5,4);
	ОбластьГраницаСнизу       = Макет.ПолучитьОбласть(6,2,6,2);
	ОбластьНачалоГраницыСнизу = Макет.ПолучитьОбласть(6,1,6,1);
	
	ОбластьГраницаСправа.Рисунки.ГраницаСправа.Высота = ВысотаЭтикетки * 1.09;
	ОбластьГраницаСнизу.Рисунки.ГраницаСнизу.Ширина   = ШиринаЭтикетки * 0.7;
	
	ОбластьГраницаСправа.Область(1,1,1,1).ВысотаСтроки = ВысотаЭтикетки * 2.65;
	ОбластьГраницаСнизу.Область(1,1,1,1).ШиринаКолонки = ШиринаЭтикетки * 0.53;
	
	ВсегоСтрок        = 5;
	КоличествоКолонок = 2;
	
	ВсегоКолонок = КоличествоКолонок;
	Если ВсегоКолонок > 1 Тогда
		ВсегоКолонок = ВсегоКолонок+ВсегоКолонок - 1; //добавляем разделители колонок.
	КонецЕсли;
	
	ВывелиХотяБыОдинШтрихКод = Ложь;
	
	Модуль_МенеджерОборудованияВызовСервера = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("МенеджерОборудованияВызовСервера");
	Модуль_ГенерацияШтрихкода 				= ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ГенерацияШтрихкода");
	
	Для каждого СтрокаТЧ Из МассивПользователей Цикл				
		КоличествоМиллиметровВПикселе = 0.5;
		
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(ЭтикеткаОбласть.Рисунки.Штрихкод.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",          Окр(ЭтикеткаОбласть.Рисунки.Штрихкод.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(СтрокаТЧ.Логин));
		ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    6);
		
		Попытка
			ЭтикеткаОбласть.Рисунки.Штрихкод.Картинка = Модуль_МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		Исключение
			РезультатОперации = Модуль_ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
			Если РезультатОперации.ДвоичныеДанные <> Неопределено Тогда
				ЭтикеткаОбласть.Рисунки.Штрихкод.Картинка = РезультатОперации.Картинка;		
			КонецЕсли;
		КонецПопытки;
	
		ОбластьПользователя.Текст = "" + СтрокаТЧ.Пользователь1С;
		
		Если ТекКолонка > ВсегоКолонок Тогда //новая строка.
			Если ВсегоСтрок <> 1 Тогда //выведем разделитель.
				Для Сч = 1 По ВсегоКолонок Цикл
					Если Сч = 1 Тогда
						Таб.Вывести(ОбластьНачалоГраницыСнизу);
					Иначе
						Таб.Присоединить(ОбластьНачалоГраницыСнизу);
					КонецЕсли;
					Таб.Присоединить(ОбластьГраницаСнизу);
					Таб.Присоединить(ОбластьНизГраницыСправа);
					Сч = Сч + 1;
				КонецЦикла;
				ТекСтрока = ТекСтрока + 1;
			КонецЕсли;
			Если ТекСтрока / ВсегоСтрок = Цел(ТекСтрока / ВсегоСтрок) Тогда
				Таб.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТекСтрока = ТекСтрока + 1;
			ТекКолонка = 1;
		КонецЕсли;
		Если ТекКолонка <> 1 Тогда //выведем разделитель.
			Таб.Присоединить(ОбластьГраницаСправа);
			ТекКолонка = ТекКолонка + 1;
			Таб.Присоединить(ЭтикеткаОбласть);
			ТекКолонка = ТекКолонка + 1;
		Иначе
			Таб.Вывести(ЭтикеткаОбласть);
			ТекКолонка = ТекКолонка + 1;
		КонецЕсли;
		
		ВывелиХотяБыОдинШтрихКод = Истина;
	КонецЦикла;
	
	Если ВывелиХотяБыОдинШтрихКод Тогда
		Таб.Защита              = Ложь;
		Таб.ТолькоПросмотр      = Истина;
		Таб.ОтображатьСетку     = Ложь;
		Таб.ОтображатьЗаголовки = Ложь;
		Возврат Таб;		
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область КлючСессии

&НаКлиенте
Процедура ЗапроситьКлючСесииПриИзменении(Элемент)
	
	Элементы.ПериодичностьЗапросаКлючаСесии.Видимость = ЗапроситьКлючСесии;
	
	Если ЗапроситьКлючСесии Тогда
		ЗапуститьОбработчикОжиданияЗапросаКлючаСесии();
	Иначе	
		ОтключитьОбработчикОжиданияЗапросаКлючаСесии();		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодичностьЗапросаКлючаСесииПриИзменении(Элемент)
	
	Если ПериодичностьЗапросаКлючаСесии <> 0 Тогда
		ЗапуститьОбработчикОжиданияЗапросаКлючаСесии();
	Иначе
		ОтключитьОбработчикОжиданияЗапросаКлючаСесии();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработчикОжиданияЗапросаКлючаСесии()
	
	Если ПериодичностьЗапросаКлючаСесии <> 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияЗапросаКлючаСесии", ПериодичностьЗапросаКлючаСесии * 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбработчикОжиданияЗапросаКлючаСесии()
	
	ОтключитьОбработчикОжидания("ОбработчикОжиданияЗапросаКлючаСесии");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияЗапросаКлючаСесии()
	
	Модуль_ИнтерфейсИСМПКлиентСервер 		= ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
	Модуль_ИнтерфейсАвторизацииИСМПКлиент 	= ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтерфейсАвторизацииИСМПКлиент"); 
	
	ИсходныеДанные = ПолучитьИсходныеДанные(); 
	
	Для Каждого СтрокаИсходныхДанных Из ИсходныеДанные Цикл
		Попытка
			ВозвращаемоеЗначение = ОбменЧерезСУЗ(СтрокаИсходныхДанных);
			ПараметрыЗапроса = Модуль_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессииСУЗ(ВозвращаемоеЗначение.Запись);
			Модуль_ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(ПараметрыЗапроса, Неопределено);
		Исключение
		КонецПопытки;
		ПолучитьКлючСессииНаСервере(СтрокаИсходныхДанных);   				
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИсходныеДанные() 
	
	ИсходныеДанные = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатаМобайл_СписокТСД.Организация КАК Организация,
	|	ДатаМобайл_СписокТСД.Ссылка КАК ТСД
	|ИЗ
	|	ПланОбмена.ДатаМобайл_СписокТСД КАК ДатаМобайл_СписокТСД
	|ГДЕ
	|	НЕ ДатаМобайл_СписокТСД.ПометкаУдаления
	|	И ДатаМобайл_СписокТСД.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.)";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда   
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ИсходныеДанные.Вставить(Выборка.ТСД, Выборка.Организация);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат ИсходныеДанные;
	
КонецФункции

&НаСервере
//Функция ПроверитьПодключениеСУЗНаСервере()
//регистра сведений НастройкиОбменаСУЗ у Формы записи
Функция ОбменЧерезСУЗ(СтрокаИсходныхДанных)
	
	Модуль_ИнтерфейсСУЗСлужебный 	= ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтерфейсСУЗСлужебный");
	Модуль_ИнтерфейсСУЗ 			= ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтерфейсСУЗ");
	Модуль_ОбщегоНазначения 		= ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	
	Запись = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменаСУЗ.РабочееМесто КАК РабочееМесто,
	|	НастройкиОбменаСУЗ.Организация КАК Организация,
	|	НастройкиОбменаСУЗ.СтанцияУправленияЗаказами КАК СтанцияУправленияЗаказами,
	|	НастройкиОбменаСУЗ.ПроизводственныйОбъект КАК ПроизводственныйОбъект,
	|	НастройкиОбменаСУЗ.Адрес КАК Адрес,
	|	НастройкиОбменаСУЗ.Порт КАК Порт,
	|	НастройкиОбменаСУЗ.Таймаут КАК Таймаут,
	|	НастройкиОбменаСУЗ.Токен КАК Токен,
	|	НастройкиОбменаСУЗ.ОбменНаСервере КАК ОбменНаСервере,
	|	НастройкиОбменаСУЗ.ОбменНаКлиентеРасписание КАК ОбменНаКлиентеРасписание,
	|	НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию КАК ОбменНаКлиентеПоРасписанию,
	|	НастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение КАК ИспользоватьЗащищенноеСоединение,
	|	НастройкиОбменаСУЗ.ИмяПользователя КАК ИмяПользователя,
	|	НастройкиОбменаСУЗ.ПолучатьКодовЗаИтерацию КАК ПолучатьКодовЗаИтерацию,
	|	НастройкиОбменаСУЗ.МаксимальноеКоличествоКодовВЗаказе КАК МаксимальноеКоличествоКодовВЗаказе,
	|	НастройкиОбменаСУЗ.ИдентификаторСоединения КАК ИдентификаторСоединения,
	|	НастройкиОбменаСУЗ.ПроизводственныйОбъектАдрес КАК ПроизводственныйОбъектАдрес,
	|	НастройкиОбменаСУЗ.ПроизводственныйОбъектАдресСтрокой КАК ПроизводственныйОбъектАдресСтрокой
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСУЗ КАК НастройкиОбменаСУЗ
	|ГДЕ
	|	НастройкиОбменаСУЗ.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", СтрокаИсходныхДанных.Значение);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Запись = ВыборкаДетальныеЗаписи;
	КонецЦикла;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен");
	ВозвращаемоеЗначение.Вставить("ОтветПолучен");
	ВозвращаемоеЗначение.Вставить("КодСостояния");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("Запись", Неопределено);
	
	Если Запись = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;	
	КонецЕсли;
	
	//Структура для передачи параметров под ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессииСУЗ
	ЗаписьСтруктурой = Новый Структура;
	ЗаписьСтруктурой.Вставить("Организация"					, Запись.Организация);
	ЗаписьСтруктурой.Вставить("ПроизводственныйОбъект"		, Запись.ПроизводственныйОбъект);
	ЗаписьСтруктурой.Вставить("ИдентификаторСоединения"		, Запись.ИдентификаторСоединения);
	ЗаписьСтруктурой.Вставить("РабочееМесто"				, Запись.РабочееМесто);
	ЗаписьСтруктурой.Вставить("СтанцияУправленияЗаказами"	, Запись.СтанцияУправленияЗаказами);
	
	ПараметрыСУЗ = Модуль_ИнтерфейсСУЗСлужебный.НоваяНастройкаОбменаСУЗ();
	ЗаполнитьЗначенияСвойств(ПараметрыСУЗ, Запись);
	ПараметрыСУЗ.Сервер        = Запись.Адрес;
	
	ДанныеНастройкиСУЗ = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	Запись.СтанцияУправленияЗаказами, "ФорматОбмена, Идентификатор", Истина);
	ПараметрыСУЗ.ФорматОбмена  = ДанныеНастройкиСУЗ.ФорматОбмена;
	ПараметрыСУЗ.Идентификатор = ДанныеНастройкиСУЗ.Идентификатор;
	
	ВозвращаемоеЗначение.Запись = ЗаписьСтруктурой;
	
	Если ПараметрыСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		СтруктураРезультат = Модуль_ИнтерфейсСУЗ.ЗапроситьСтатусБизнесЗаказа_V1(
		"121d48de-3a2a-4da0-8dc5-23140ffe8f80", ПараметрыСУЗ);
	Иначе
		СтруктураРезультат = Модуль_ИнтерфейсСУЗ.ПроверитьДоступностьСУЗ_V2(
		Неопределено, ПараметрыСУЗ);
		
		Если СтруктураРезультат.ТребуетсяОбновлениеКлючаСессии Тогда
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, СтруктураРезультат.РезультатОтправкиЗапроса);
	
	Возврат ВозвращаемоеЗначение;	
	
КонецФункции 

&НаСервере
Процедура ПолучитьКлючСессииНаСервере(СтрокаИсходныхДанных)
	
	Организация = СтрокаИсходныхДанных.Значение;	
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	РеквизитыТСД = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаИсходныхДанных.Ключ, "ПроизводственныйОбъект, ИспользоватьПроизводственныйОбъектДляКлючаСессии");
	
	Модуль_ИнтерфейсАвторизацииИСМПВызовСервера = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
	Модуль_ИнтерфейсИСМПКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
	ПоискПоПроизводственномуОбъекту = РеквизитыТСД.ИспользоватьПроизводственныйОбъектДляКлючаСессии;
	
	Попытка                                       
		
		ПараметрыЗапроса = Модуль_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация);
		КлючСессии = Модуль_ИнтерфейсАвторизацииИСМПВызовСервера.ТекущийКлючСессии(ПараметрыЗапроса);
		
		Если Не ЗначениеЗаполнено(КлючСессии) И ПоискПоПроизводственномуОбъекту Тогда
			
			ПоискПоПроизводственномуОбъекту = Истина; 
			ПараметрыЗапроса.ИмяПараметраСеанса = "ДанныеКлючаСессииСУЗ";
			ПараметрыЗапроса.ПроизводственныйОбъект = РеквизитыТСД.ПроизводственныйОбъект;
			КлючСессии = Модуль_ИнтерфейсАвторизацииИСМПВызовСервера.ТекущийКлючСессии(ПараметрыЗапроса);
			
		КонецЕсли;	
			
	Исключение
	КонецПопытки; 
		
	//обновляем данные в ТСД:
	Если ЗначениеЗаполнено(КлючСессии) Тогда
		
		ТСДОбъект = СтрокаИсходныхДанных.Ключ.ПолучитьОбъект();								
		ТСДОбъект.КлючСессии = КлючСессии;	
		
		Попытка
			ТСДОбъект.Записать();		
		Исключение   		
		КонецПопытки;
						
	КонецЕсли;	
                    
КонецПроцедуры

#КонецОбласти
