#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует временную таблицу, содержащую данные документа по поставщику: головную организацию, КПП поставщика, Индекс подразделения.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Организация,
//		Подразделение,
//		Склад.
//
Процедура ПоместитьВременнуюТаблицуДанныхПоставщика(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	
	|	ВЫБОР КОГДА ДанныеОрганизаций.ОбособленноеПодразделение ТОГДА
	|		ДанныеОрганизаций.ГоловнаяОрганизация
	|	ИНАЧЕ
	|		ДанныеОрганизаций.Ссылка
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР КОГДА НЕ ДанныеПодразделений.РегистрацияВНалоговомОргане ЕСТЬ NULL ТОГДА
	|		ДанныеПодразделений.РегистрацияВНалоговомОргане.КПП
	|	ИНАЧЕ
	|		ДанныеОрганизаций.КПП
	|	КОНЕЦ КАК КПППоставщика,
	|	ВЫБОР КОГДА НЕ ДанныеПодразделений.РегистрацияВНалоговомОргане ЕСТЬ NULL ТОГДА
	|		ДанныеПодразделений.РегистрацияВНалоговомОргане.ЦифровойИндексОбособленногоПодразделения
	|	КОГДА ЕСТЬNULL(ДанныеОрганизаций.ОбособленноеПодразделение, ЛОЖЬ) ТОГДА
	|		ДанныеОрганизаций.ЦифровойИндексОбособленногоПодразделения
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ИндексПодразделения
	|
	|ПОМЕСТИТЬ ДанныеПоставщика
	|ИЗ
	|	ТаблицаДанныхДокументов КАК ДанныеДокументов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК ДанныеОрганизаций
	|	ПО
	|		ДанныеДокументов.Организация = ДанныеОрганизаций.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РегистрацииВНалоговомОргане КАК ДанныеПодразделений
	|	ПО
	|		ДанныеПодразделений.Организация = ДанныеДокументов.Организация
	|		И ДанныеПодразделений.Подразделение = ЕСТЬNULL(ДанныеДокументов.Склад.Подразделение, ДанныеДокументов.Подразделение)
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М4") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"М4",
			НСтр("ru='Приходный ордер (М-4)'"),
			СформироватьПечатнуюФормуМ4(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ4") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ4",
			НСтр("ru='Акт о приемке товара, поступившего без счета поставщика (ТОРГ-4)'"),
			СформироватьПечатнуюФормуТОРГ4(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		
		Если ПараметрыПечати["ВыводитьУслуги"] Тогда
			СинонимМакета = НСтр("ru='Товарная накладная (ТОРГ-12)'");
		Иначе
			СинонимМакета = НСтр("ru='Товарная накладная без услуг (ТОРГ-12)'");
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ12",
			СинонимМакета,
			СформироватьПечатнуюФормуТОРГ12(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12БезУслуг") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ12БезУслуг",
			НСтр("ru='Товарная накладная без услуг (ТОРГ-12)'"),
			СформироватьПечатнуюФормуТОРГ12(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12_ГТД") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ12_ГТД",
			 НСтр("ru = 'Товарная накладная с номерами ГТД (ТОРГ-12)'"),
			СформироватьПечатнуюФормуТОРГ12(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"М15",
			НСтр("ru='Накладная (М-15)'"),
			СформироватьПечатнуюФормуМ15(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактура",
			НСтр("ru='Счет-фактура'"),
			СформироватьПечатнуюФормуСчетФактура(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВВалюте") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетФактураВВалюте",
			НСтр("ru='Счет-фактура'"),
			СформироватьПечатнуюФормуСчетФактура(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УПД") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"УПД",
			НСтр("ru='Универсальный передаточный документ (УПД)'"),
			СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УКД") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"УКД",
			НСтр("ru='Универсальный корректировочный документ (УКД)'"),
			СформироватьПечатнуюФормуУКД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктНаПередачуПрав") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктНаПередачуПрав",
			НСтр("ru='Акт на передачу прав'"),
			СформироватьПечатнуюФормуАктНаПередачуПрав(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МХ1") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"МХ1",
			НСтр("ru='Акт о приеме-передаче ТМЦ на хранение (МХ-1)'"),
			СформироватьПечатнуюФормуМХ1(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МХ3") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"МХ3",
			НСтр("ru='Акт о возврате ТМЦ, сданных на хранение (МХ-3)'"),
			СформироватьПечатнуюФормуМХ3(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, СтруктураТипов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#Область Печать_ТОРГ12

Функция СформироватьПечатнуюФормуТОРГ12(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОРГ12_2";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТОРГ12(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументТОРГ12(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати);
	КонецЦикла;
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетОрганизации);
	СведенияОПокупателе       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,       ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетКонтрагента);
	СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузополучателя);
	СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузоотправителя);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	СтруктураПараметров.Вставить("ДатаДокумента", ДанныеПечати.Дата);
	
	Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике));
	Иначе
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПредставлениеПодразделения", ДанныеПечати.Подразделение);
	СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураПараметров.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике));
	СтруктураПараметров.Вставить("ПредставлениеПлательщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе));
	СтруктураПараметров.Вставить("ОрганизацияПоОКПО", СведенияОГрузоотправитель.КодПоОКПО);
	СтруктураПараметров.Вставить("ВидДеятельностиПоОКДП", СведенияОПоставщике.КодОКВЭД);
	СтруктураПараметров.Вставить("ГрузополучательПоОКПО", СведенияОГрузополучателе.КодПоОКПО);
	СтруктураПараметров.Вставить("ПоставщикПоОКПО", СведенияОПоставщике.КодПоОКПО);
	СтруктураПараметров.Вставить("ПлательщикПоОКПО", СведенияОПокупателе.КодПоОКПО);
	СтруктураПараметров.Вставить("ОснованиеНомер", ДанныеПечати.ОснованиеНомер);
	СтруктураПараметров.Вставить("ОснованиеДата", ДанныеПечати.ОснованиеДата);
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяНомер", "");
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяДата", "");
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Функция ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),
		НСтр("ru = 'г.'", Метаданные.Языки.Русский.КодЯзыка),
		НСтр("ru = 'года'", Метаданные.Языки.Русский.КодЯзыка));
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = СтрНайти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = СтрНайти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """");
	СтруктураПараметров.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
	СтруктураПараметров.Вставить("ДатаДокументаГод", Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
	
	// Главный бухгалтер
	СтруктураПараметров.Вставить("ФИОГлавБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	
	// Отпуск товара разрешил
	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.ДолжностьРуководителя);
	
	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	
	// Доверенность
	СтруктураПараметров.Вставить("ДоверенностьНомер", ДанныеПечати.ДоверенностьНомер);
	СтруктураПараметров.Вставить("ДоверенностьДата", Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"));
	СтруктураПараметров.Вставить("ДоверенностьВыдана", ДанныеПечати.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьЧерезКого", ДанныеПечати.ДоверенностьЛицо);
	
	Если ИтоговыеСуммы.ИтогоКоличествоМест > 0 Тогда
		СтруктураПараметров.Вставить("ВсегоМестПрописью", ЧислоПрописью(ИтоговыеСуммы.ИтогоКоличествоМест, ,",,,,,,,,0"));
	КонецЕсли;
	
	Если ИтоговыеСуммы.ИтогоМассаНетто > 0 Тогда
		ПараметрыМассыПрописью = ПродажиСервер.ПараметрыМассыПрописью(ИтоговыеСуммы.ИтогоМассаНетто, КоэффициентПересчетаВТонны);
		СтруктураПараметров.Вставить("МассаНеттоПрописью", ЧислоПрописью(
			ИтоговыеСуммы.ИтогоМассаНетто * ПараметрыМассыПрописью.Коэффициент,
			"ДП=Истина",
			ПараметрыМассыПрописью.Формат));
	КонецЕсли;
	
	Если ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
		ПараметрыМассыПрописью = ПродажиСервер.ПараметрыМассыПрописью(ИтоговыеСуммы.ИтогоМассаБрутто, КоэффициентПересчетаВТонны);
		СтруктураПараметров.Вставить("МассаБруттоПрописью", ЧислоПрописью(
			ИтоговыеСуммы.ИтогоМассаБрутто * ПараметрыМассыПрописью.Коэффициент,
			"ДП=Истина",
			ПараметрыМассыПрописью.Формат));
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью);
	СтруктураПараметров.Вставить("СуммаПрописью", ИтоговыеСуммы.СуммаПрописью);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	Возврат ОбластьМакета;
	
КонецФункции

// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
//
Процедура ЗаполнитьТабличныйДокументТОРГ12(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати)
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
						И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	
	КоэффициентПересчетаВТонны     = НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
	
	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыводитьГТД = ?(ПараметрыПечати.Свойство("ВыводитьГТД"), ПараметрыПечати.ВыводитьГТД, Ложь);
	
	Если ВыводитьГТД Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12_ГТД_ru");
	Иначе
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12_ru");
	КонецЕсли;
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ДанныеПечати.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 установлен статус ""К предоплате"". Печать ТОРГ-12 в данном статусе не требуется.'"),
				ДанныеПечати.Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.Сбросить();
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 отсутствуют внеоборотные активы. Печать ТОРГ-12 не требуется'"),
					ДанныеПечати.Ссылка);
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 отсутствуют товары. Печать ТОРГ-12 не требуется'"),
					ДанныеПечати.Ссылка);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент);
		
		НомерСтраницы = 1;
		ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтандарт   = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
			ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
		КонецЕсли;
		
		ВыводШапки = 0;
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		ОперацияОблагаетсяНДСУПокупателя = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати,"НалогообложениеНДС") 
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			ОперацияОблагаетсяНДСУПокупателя = Истина;
		КонецЕсли;
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		НомерСтроки = 0;
		Пока СтрокаТовары.Следующий() Цикл
			
			Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьМакета = ОбластьМакетаНабор;
			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьМакета = ОбластьМакетаКомплектующие;
			Иначе
				ОбластьМакета = ОбластьМакетаСтандарт;
			КонецЕсли;
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, Неопределено,,,ВыводитьСерии);
			Иначе
				НомерСтроки = НомерСтроки + 1;
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки,,,ВыводитьСерии);
			КонецЕсли;
			
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				ОбластьМакета.Параметры.СтавкаНДС = НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка);
				ОбластьМакета.Параметры.СуммаСНДС = "--";
				ОбластьМакета.Параметры.СуммаНДС = "--";
			КонецЕсли;
			
			Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
				ВыводШапки = 1;
			КонецЕсли;
			
			Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
				
				ВыводШапки = 2;
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
				ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда
				ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
				ОбластьПодвала = ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны);
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице = "--";
					ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаНДСНаСтранице = "--";
				КонецЕсли;
				
				ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
				ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице = "--";
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаНДСНаСтранице = "--";
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			ОбластьМакета.Параметры.ИтогоСуммаСНДС = "--";
			ОбластьМакета.Параметры.ИтогоСуммаНДС = "--";
		КонецЕсли;
			
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
		ОбластьПодвала = ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны);
		ТабличныйДокумент.Вывести(ОбластьПодвала);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_ТОРГ4

Функция СформироватьПечатнуюФормуТОРГ4(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОРГ4";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТОРГ4(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументТОРГ4(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
	КонецЦикла;
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиТОРГ4(ДанныеПечати, ДанныеПоСкладу, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	
	СведенияОПокупателе       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.ДатаДокумента, ,ДанныеПечати.БанковскийСчетОрганизации);
	СведенияОПоставщике       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик ,       ДанныеПечати.ДатаДокумента, ,ДанныеПечати.БанковскийСчетКонтрагента);
	СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.ДатаДокумента, ,ДанныеПечати.БанковскийСчетГрузоотправителя);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике));
	СтруктураПараметров.Вставить("ОписаниеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ЮридическийАдрес,Телефоны"));
	СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураПараметров.Вставить("ПоставщикПоОКПО", СведенияОПоставщике.КодПоОКПО);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.Заполнить(ДанныеПоСкладу);
	СтруктураПараметров.Вставить("ДатаДокумента", ДанныеПечати.ДатаДокумента);
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе));
	СтруктураПараметров.Вставить("ОрганизацияПоОКПО", СведенияОПокупателе.КодПоОКПО);
	СтруктураПараметров.Вставить("ГрузополучательПоОКПО", СведенияОПокупателе.КодПоОКПО);
	
	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.ДолжностьРуководителя);
	
	РеквизитыСопроводительногоДокумента = НСтр("ru='сопроводительный документ № %НомерДокументаСопровождения% от %ДатаДокументаСопровождения%'", Метаданные.Языки.Русский.КодЯзыка);
	РеквизитыСопроводительногоДокумента = СтрЗаменить(РеквизитыСопроводительногоДокумента, "%НомерДокументаСопровождения%", ДанныеПечати.НомерДокументаСопровождения);
	РеквизитыСопроводительногоДокумента = СтрЗаменить(РеквизитыСопроводительногоДокумента, "%ДатаДокументаСопровождения%",  Формат(ДанныеПечати.ДатаДокументаСопровождения, "ДЛФ=DD"));
	
	СтруктураПараметров.Вставить("РеквизитыСопроводительногоДокумента", РеквизитыСопроводительногоДокумента);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаТОРГ4(ОбластьПодвала, ДанныеПечати)
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МОЛ", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.МОЛ, ДанныеПечати.Дата));
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
//
Процедура ЗаполнитьТабличныйДокументТОРГ4(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	
	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ4_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют товары. Печать акта о приемке товара не требуется'"),
				ДанныеПечати.Ссылка);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоСкладам = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			ЗаполнитьРеквизитыШапкиТОРГ4(ДанныеПечати, ВыборкаПоСкладам, Макет, ТабличныйДокумент);
			
			НомерСтраницы = 1;
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть докмента
			ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
			ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
			ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
			
			ЗаполнитьРеквизитыПодвалаТОРГ4(ОбластьПодвала, ДанныеПечати);
			
			СтрокаТовары = ВыборкаПоСкладам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			НомерСтроки = 0;
			Пока СтрокаТовары.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
				
				ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
				ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;				
				ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				СерияНаименование = Неопределено;
				Если ВыводитьСерии Тогда
					СерияНаименование = СтрокаТовары.СерияНаименование;
				КонецЕсли;
				
				ТоварНаименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовары.ТоварНаименование,
					СтрокаТовары.Характеристика,
					СерияНаименование,
					,
					ДополнительныеПараметрыПолученияНаименованияДляПечати);
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ТоварНаименование", ТоварНаименование);
					
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				
				Если НомерСтроки = 1 Тогда // первая строка
					
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
					ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				Иначе
					
					МассивВыводимыхОбластей.Очистить();
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
					
					Если НомерСтроки = КоличествоСтрок Тогда
						
						МассивВыводимыхОбластей.Добавить(ОбластьВсего);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
						
					КонецЕсли;
					
					Если НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						
						ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
						ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
						
						// Очистим итоги по странице.
						ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
						
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
						ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
						ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				
			КонецЦикла;
			
			// Выводим итоги по последней странице
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
			ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
			
			ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			// Выводим итоги по документу в целом
			ОбластьМакета = Макет.ПолучитьОбласть("Всего");
			ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим подвал документа
			ТабличныйДокумент.Вывести(ОбластьПодвала);
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_М15

Функция СформироватьПечатнуюФормуМ15(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_М15";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		ЭтаПечатнаяФормаДоступна = Ложь;
		КомандыПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
		МенеджерОбъекта.ДобавитьКомандыПечати(КомандыПечати);
		Для Каждого ДоступнаяПечатнаяФорма Из КомандыПечати Цикл
			Если ДоступнаяПечатнаяФорма.Идентификатор = "М15" Тогда
				ЭтаПечатнаяФормаДоступна = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭтаПечатнаяФормаДоступна Тогда
			Продолжить;
		КонецЕсли;
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыМ15(ПараметрыПечати, СтруктураОбъектов.Значение);
		ЗаполнитьТабличныйДокументМ15(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
	КонецЦикла;
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиМ15(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата, ,ДанныеПечати.БанковскийСчетОрганизации);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации));
	СтруктураПараметров.Вставить("ОрганизацияПоОКПО", СведенияОбОрганизации.КодПоОКПО);
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование,");
	СтруктураПараметров.Вставить("КонтрагентНаименование", ПредставлениеКонтрагента);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаМ15(ОбластьПодвала, ДанныеПечати, ИтоговыеСуммы)
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	
	// Главный бухгалтер
	СтруктураПараметров.Вставить("ФИОГлавБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	
	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.ДолжностьРуководителя);
	
	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	
	СтруктураПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью);
	СтруктураПараметров.Вставить("СуммаПрописью", ИтоговыеСуммы.СуммаПрописью);
	Если ЗначениеЗаполнено(ИтоговыеСуммы.ИтогоСуммаНДС) Тогда
		СтруктураПараметров.Вставить("ИтогНДС", ФормированиеПечатныхФорм.СуммаРубКоп(ИтоговыеСуммы.ИтогоСуммаНДС, Неопределено, Неопределено));
	Иначе
		СтруктураПараметров.Вставить("ИтогНДС", "______ руб. ______ коп.");
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент - Описание
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
//
Процедура ЗаполнитьТабличныйДокументМ15(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_М15_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.Сбросить();
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для документа %1 печать М-15 не требуется'"),
					ДанныеПечати.Ссылка);
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 отсутствуют товары. Печать накладной не требуется'"),
					ДанныеПечати.Ссылка);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим общие реквизиты шапки
		ЗаполнитьРеквизитыШапкиМ15(ДанныеПечати, Макет, ТабличныйДокумент);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		НомерСтраницы   = 1;
		
		// Инициализация итогов в документе
		ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
		
		НомерСтроки = 0;
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
		ЗаполнитьРеквизитыПодвалаМ15(ОбластьПодвала, ДанныеПечати, ИтоговыеСуммы);
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		Пока СтрокаТовары.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, ВыводитьКодНоменклатуры,,ВыводитьСерии);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
				ЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
			
		КонецЦикла;
		
		// Выводим итоги по документу
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
		ЗаполнитьРеквизитыПодвалаМ15(ОбластьПодвала, ДанныеПечати, ИтоговыеСуммы);
		ТабличныйДокумент.Вывести(ОбластьПодвала);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_М4

Функция СформироватьПечатнуюФормуМ4(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	// Зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_М4";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыМ4(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументМ4(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
	КонецЦикла;
	Возврат ТабличныйДокумент;

КонецФункции

Процедура ЗаполнитьРеквизитыШапкиМ4(ДанныеПечати, ДанныеПоСкладу, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаСоставления, ,ДанныеПечати.БанковскийСчетОрганизации);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе));
	СтруктураПараметров.Вставить("ОрганизацияПоОКПО", СведенияОПокупателе.КодПоОКПО);
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок докмента
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.Заполнить(ДанныеПоСкладу);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаСоставления", ДанныеПечати.ДатаСоставления);
	
	СведенияОПоставщике     = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаСоставления);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование");
	СтруктураПараметров.Вставить("ПоставщикНаименование", ПредставлениеПоставщика);
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаМ4(ОбластьПодвала, ДанныеПечати)
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МОЛ", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.МОЛ, ДанныеПечати.Дата));
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
//
Процедура ЗаполнитьТабличныйДокументМ4(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	
	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_М4_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют товары. Печать приходного ордера не требуется'"),
				ДанныеПечати.Ссылка);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоСкладам = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			ЗаполнитьРеквизитыШапкиМ4(ДанныеПечати, ВыборкаПоСкладам, Макет, ТабличныйДокумент);
			
			// Выводим заголовок таблицы
			ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
			НомерСтраницы = 1;
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть докмента
			ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
			ОбластьПодвалСтрок      = Макет.ПолучитьОбласть("ПодвалСтрок");
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
			
			ЗаполнитьРеквизитыПодвалаМ4(ОбластьПодвала, ДанныеПечати);
			
			СтрокаТовары = ВыборкаПоСкладам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			НомерСтроки = 0;
			Пока СтрокаТовары.Следующий() Цикл
				
				ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
				
				НомерСтроки = НомерСтроки + 1;
				
				ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
				ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;				
				ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				СерияНаименование = Неопределено;
				Если ВыводитьСерии Тогда
					СерияНаименование = СтрокаТовары.СерияНаименование;
				КонецЕсли;
				
				ТоварНаименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовары.ТоварНаименование,
					СтрокаТовары.Характеристика,
					СерияНаименование,
					,
					ДополнительныеПараметрыПолученияНаименованияДляПечати);
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ТоварНаименование", ТоварНаименование);
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				КонецЕсли;
				
				Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					НомерСтраницы = НомерСтраницы + 1;
					ПодвалСтрок   = Макет.ПолучитьОбласть("ПодвалСтрок");
					ТабличныйДокумент.Вывести(ПодвалСтрок);
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
					ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				
			КонецЦикла;
			
			// Выводим итоги по документу
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ИтогоКоличествоПринято", ИтоговыеСуммы.ИтогоКоличество);
			СтруктураПараметров.Вставить("ИтогоСуммаБезНДС", ИтоговыеСуммы.ИтогоСуммаБезНДС);
			СтруктураПараметров.Вставить("ИтогоСуммаНДС", ИтоговыеСуммы.ИтогоСуммаНДС);
			СтруктураПараметров.Вставить("ИтогоСуммаСНДС", ИтоговыеСуммы.ИтогоСуммаСНДС);
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим подвал документа
			ТабличныйДокумент.Вывести(ОбластьПодвала);
			
		КонецЦикла; // Конец цикла обхода выборки "ВыборкаПоСкладам"
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла; // Конец цикла обхода выборки "ДанныеПечати"
	
КонецПроцедуры

#КонецОбласти

#Область Печать_СчетФактура

Функция СформироватьПечатнуюФормуСчетФактура(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура";
	
	СтруктураТиповНаПечать         = Новый Структура;
	МассивСчетФактураВыданный      = Новый Массив;
	МассивСчетФактураКомиссионеру  = Новый Массив;
	МассивСчетФактураПолученный    = Новый Массив;
	ОснованияНаРеализацию          = Новый Массив;
	ОснованияКомиссионеру          = Новый Массив;
	ОснованияСчетФактураПолученный = Новый Массив;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);
		
		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяОбъекта = "СчетФактураВыданный" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураКомиссионеру" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураНаНеподтвержденнуюРеализацию0"
				Или ИмяОбъекта = "СчетФактураВыданныйАванс"
				Или ИмяОбъекта = "СчетФактураНалоговыйАгент" Тогда
				
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "ОтчетКомиссионера"
				Или (ИмяОбъекта = "ОтчетПоКомиссииМеждуОрганизациями" И ПараметрыПечати.ВидФормы = "Комитент") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияКомиссионеру, СтруктураОбъектов.Значение);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
				И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОснованияНаРеализацию.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(
			ОснованияНаРеализацию, ,
			ПараметрыПечати.ПечатьВВалюте);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(РезультатАнализа.ТаблицаОшибок, Ложь)
		
	КонецЕсли;
	
	Если ОснованияКомиссионеру.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураКомиссионеру.ПолучитьСчетаФактурыНаПечать(
			ОснованияКомиссионеру,
			ПараметрыПечати.ПечатьВВалюте);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(РезультатАнализа.ТаблицаОшибок, Истина)
		
	КонецЕсли;
	
	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(
			ОснованияСчетФактураПолученный, ПараметрыПечати.ПечатьВВалюте);
		
		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
		
		СообщитьОбОшибкахПечатиСчетФактурыПолученного(РезультатАнализа.ТаблицаОшибок)
		
	КонецЕсли;
	
	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;
	
	Если МассивСчетФактураКомиссионеру.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураКомиссионеру", МассивСчетФактураКомиссионеру);
	КонецЕсли;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
	
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, СтруктураОбъектов.Значение);
	
		Если ДанныеДляПечати <> Неопределено Тогда
			ОпцииПечатиСчетаФактуры = Новый Структура;
			ОпцииПечатиСчетаФактуры.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
			ОпцииПечатиСчетаФактуры.Вставить("СчетФактураНаАванс",            ДанныеДляПечати.Свойство("СчетФактураНаАванс"));
			ОпцииПечатиСчетаФактуры.Вставить("СчетФактураНалоговыйАгент",     ДанныеДляПечати.Свойство("СчетФактураНалоговыйАгент"));
			ОпцииПечатиСчетаФактуры.Вставить("ПечатьВВалюте",                 ПараметрыПечати.ПечатьВВалюте);
		
			ЗаполнитьТабличныйДокументСчетФактура(
				ТабличныйДокумент,
				ДанныеДляПечати,
				ОбъектыПечати,
				ОпцииПечатиСчетаФактуры);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиСчетФактура(ДанныеПечати, ДанныеОснований, СведенияОПоставщике, ДанныеКонтрагентов, ТабличныйДокумент, ОпцииПечатиСчетаФактуры, ДанныеПоставщиков)
	
	ДействующиеПостановления = ОпцииПечатиСчетаФактуры.ДействующиеПостановления;
	
	Макет = ОпцииПечатиСчетаФактуры.Макет;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	НомераДаты = Новый Структура("Номер, Дата, НомерИсправления, ДатаИсправления, РеквизитыОснований, НомерИсправленияКорректировочного, ДатаИсправленияКорректировочного");
	
	Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
		НомераДаты.Номер = ДанныеПечати.Номер;
	Иначе
		НомераДаты.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
	КонецЕсли;
	НомераДаты.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД");
	
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
		НомераДаты.НомерИсправленияКорректировочного = ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--");
		НомераДаты.ДатаИсправленияКорректировочного =  ?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--");
	Иначе
		НомераДаты.НомерИсправления = ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--");
		НомераДаты.ДатаИсправления =  ?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--");
	КонецЕсли;
	
	Если ДанныеПечати.КорректировочныйСчетФактура Тогда
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ДанныеОснований.НайтиСледующий(СтруктураПоиска);
		СтрокиОснований = ДанныеОснований.Выбрать();
		
		РеквизитыОснований = "";
		
		Пока СтрокиОснований.СледующийПоЗначениюПоля("ИсходныйДокумент") Цикл
			
			Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
				НомерСчетаФактурыОснования = СтрокиОснований.НомерСчетаФактуры;
			Иначе
				НомерСчетаФактурыОснования = НомерСчетаФактурыНаПечать(СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения);
			КонецЕсли;
			
			ТекстИсходнойСФ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru=', № %1 от %2, с учетом исправления № %3 от %4'", Метаданные.Языки.Русский.КодЯзыка),
				НомерСчетаФактурыОснования,
				Формат(СтрокиОснований.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--"),
				?(ЗначениеЗаполнено(СтрокиОснований.НомерИсправленияСчетаФактуры), СтрокиОснований.НомерИсправленияСчетаФактуры, "--"),
				Формат(СтрокиОснований.ДатаИсправленияСчетаФактуры, "ДЛФ=ДД; ДП=--"));
				
			РеквизитыОснований = РеквизитыОснований + ТекстИсходнойСФ;
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(РеквизитыОснований) Тогда
			РеквизитыОснований = Сред(РеквизитыОснований, 3);
		КонецЕсли;
		НомераДаты.РеквизитыОснований = РеквизитыОснований;
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(НомераДаты);
	
	СтруктураПараметров = Новый Структура;
	
	// Выводим данные о поставщике.

	Если ДанныеПоставщиков = Неопределено Тогда

		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
		
		ДополнительноеПредставление = "";
		Если ДействующиеПостановления.Постановление914 И СведенияОПоставщике.ОфициальноеНаименование <> СведенияОПоставщике.ПолноеНаименование Тогда
			ДополнительноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='(%1)'"),
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование"));
		КонецЕсли;
		
		ПредставлениеПоставщика = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %2'"),
			СведенияОПоставщике.ПолноеНаименование,
			ДополнительноеПредставление));
			
		АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
			
		ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1%2'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
			?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
		
		Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
			СтруктураПараметров.Вставить("НаименованиеПродавца", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПродавца", АдресПоставщика);
			СтруктураПараметров.Вставить("ИННКПППродавца", ИННПоставщика);
		Иначе
			СтруктураПараметров.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПоставщика", АдресПоставщика);
			СтруктураПараметров.Вставить("ИННПоставщика", ИННПоставщика);
		КонецЕсли;
			
		Если НЕ ДанныеПечати.КорректировочныйСчетФактура Тогда
			
			// Выводим данные грузоотправителя.
			ТекстГрузоотправителя = "";
			Если ДанныеПечати.ТолькоУслуги 
			 ИЛИ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
			 ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
				ТекстГрузоотправителя = "--";
			ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель 
			 ИЛИ ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "КПП") = 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Грузоотправитель, "КПП") Тогда
				ТекстГрузоотправителя = НСтр("ru='он же'", Метаданные.Языки.Русский.КодЯзыка);
			Иначе
				ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
					СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
			КонецЕсли;
			
			ПредставлениеГрузоотправителя = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1'"),
				ТекстГрузоотправителя));
			
			СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
			
			
		КонецЕсли;
	
	Иначе
		
		ПредставлениеПоставщика       = "";
		ПредставлениеАдресПоставщика = "";
		ПредставлениеИННПоставщика = "";
		ПредставлениеГрузоотправителя  = "";

		ЕстьГрузоотправитель = НЕ ДанныеПечати.КорректировочныйСчетФактура 
				И НЕ ДанныеПечати.ТолькоУслуги 
				И НЕ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
				И НЕ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент;
		
		ТаблицаПоставщиков = ТаблицаПоставщиковСчетаФактуры(ДанныеПечати, ДанныеПоставщиков);
		Для Каждого СтрокаТаблицы Из ТаблицаПоставщиков Цикл
			
			СведенияОПоставщике = СтрокаТаблицы.СведенияОПоставщике;
			
			ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеПоставщика,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование", Ложь));
			
			ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеАдресПоставщика,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес", Ложь));
				
			ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2%3'"),
				ПредставлениеИННПоставщика,
				СтрокаТаблицы.ИНН,
				?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
				
				
			Если ЕстьГрузоотправитель Тогда
					СведенияОГрузоотправителе = СтрокаТаблицы.СведенияОГрузоотправителе;
					ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1; %2'"),
					ПредставлениеГрузоотправителя,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес", Ложь));
			КонецЕсли;
			
		КонецЦикла;
		
		ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			Сред(ПредставлениеПоставщика, 3));
		
		ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			Сред(ПредставлениеАдресПоставщика, 3));
		
		ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			Сред(ПредставлениеИННПоставщика, 3));
			
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			?(ЕстьГрузоотправитель, Сред(ПредставлениеГрузоотправителя, 3), "--"));
		
		Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
			СтруктураПараметров.Вставить("НаименованиеПродавца", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПродавца", ПредставлениеАдресПоставщика);
			СтруктураПараметров.Вставить("ИННКПППродавца", ПредставлениеИННПоставщика);
		Иначе
			СтруктураПараметров.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПоставщика", ПредставлениеАдресПоставщика);
			СтруктураПараметров.Вставить("ИННПоставщика", ПредставлениеИННПоставщика);
		КонецЕсли;
	
		СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
		
	КонецЕсли;
	
	СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
				НСтр("ru='-- от --'", Метаданные.Языки.Русский.КодЯзыка),
				ДанныеПечати.СтрокаПоДокументу));
		
	СтруктураПараметров.Вставить("ПоДокументу", СтрокаПоДокументу);
	
	ПоДокументуОтгрузки =
		?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, "ПредставлениеСтроки5а")
			И ЗначениеЗаполнено(ДанныеПечати.ПредставлениеСтроки5а),
		ДанныеПечати.ПредставлениеСтроки5а,
		НСтр("ru='-- от --'"));
	
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 Тогда
		СтруктураПараметров.Вставить("ДокументыОбОтгрузке", ПоДокументуОтгрузки);
	Иначе
		СтруктураПараметров.Вставить("ПоДокументуОтгрузки", ПоДокументуОтгрузки);
	КонецЕсли;
	
	ЕстьГрузополучатель = Не ДанныеПечати.КорректировочныйСчетФактура
		И НЕ (ДанныеПечати.ТолькоУслуги
		ИЛИ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
		ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент);
	
	ПредставлениеПокупателя       = "";
	ПредставлениеАдресаПокупателя = "";
	ПредставлениеИННКПППокупателя = "";
	ПредставлениеГрузополучателя  = "";
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		
		СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
		
		ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1; %2'"),
			ПредставлениеПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
		
		ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1; %2'"),
			ПредставлениеАдресаПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
			
		ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1; %2%3'"),
			ПредставлениеИННПокупателя,
			СтрокаТаблицы.ИНН,
			?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
		
		Если ЕстьГрузополучатель Тогда
			СведенияОГрузополучателе = СтрокаТаблицы.СведенияОГрузополучателе;
			ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеГрузополучателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь));
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		Сред(ПредставлениеПокупателя, 3));
	
	ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		Сред(ПредставлениеАдресаПокупателя, 3));
	
	ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		Сред(ПредставлениеИННПокупателя, 3));
		
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		?(ЕстьГрузополучатель, Сред(ПредставлениеГрузополучателя, 3), "--"));
	
	СтруктураПараметров.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
		СтруктураПараметров.Вставить("НаименованиеПокупателя", ПредставлениеПокупателя);
		СтруктураПараметров.Вставить("ИННКПППокупателя", ПредставлениеИННПокупателя);
	Иначе
		СтруктураПараметров.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
		СтруктураПараметров.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
	КонецЕсли;

	Если Не ДанныеПечати.КорректировочныйСчетФактура Тогда
		СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	КонецЕсли;
	
	Если ДействующиеПостановления.Постановление1137 И ЗначениеЗаполнено(ДанныеПечати.Валюта) 
		И ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
		
		СтруктураПараметров.Вставить("Валюта", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1, %2'"),
			ДанныеПечати.ВалютаНаименованиеПолное,
			ДанныеПечати.ВалютаКод));
			
	ИначеЕсли ДействующиеПостановления.Постановление1137 Тогда
		СтруктураПараметров.Вставить("Валюта", НСтр("ru='Российский рубль, 643'", Метаданные.Языки.Русский.КодЯзыка));
	КонецЕсли;
	
	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
	Если ДействующиеПостановления.Постановление981 Тогда
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	Иначе
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	КонецЕсли;
	СтруктураПараметров.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);
	
	Если ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
		// для печати подвала берем сведения об организации из сведений о покупателе
		СведенияОПоставщике = СведенияОПокупателе;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура И Не ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		ОбластьМакета.Параметры.ИдентификаторГосКонтракта = ПредставлениеИдентификаторГосКонтракта;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации)
	
	СтруктураПараметров = Новый Структура;
	
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке			 - РезультатЗапроса
// 		* РезультатПоИсходнымДанным	 - РезультатЗапроса
// 		* РезультатПоКонтрагентам	 - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти	 - РезультатЗапроса
// 		* РезультатПоПоставщикам	 - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
//
Процедура ЗаполнитьТабличныйДокументСчетФактура(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ОпцииПечатиСчетаФактуры) Экспорт
	
	Перем ВыборкаОснований, ВыборкаКонтрагентов, ВыборкаПоставщиков;
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	ИспользоватьПечатныеФормыСФ2_5 = Ложь;
	ОпцииПечатиСчетаФактуры.Вставить("ИспользоватьПечатныеФормыСФ2_5", ИспользоватьПечатныеФормыСФ2_5);
					
	Макет451            = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура451_ru");
	Макет1137           = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_ru");
	Макет1137_625       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_625_ru");
	Макет981            = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура981_ru");
	Макет534            = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура534_ru");
	Макет534_2_5        = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура534");
	Макет534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура534Прослеж");
	МакетКорр           = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_ru");
	МакетКорр_625       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_625_ru");
	МакетКорр_981       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный981_ru");
	МакетКорр_534       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный534_ru");
	МакетКорр_534_2_5   = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура534");
	МакетКорр_534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура534Прослеж");
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") И Не ДанныеДляПечати.РезультатПоКонтрагентам.Пустой() Тогда
		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	ПрослеживаемыеТовары = Неопределено;
	ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Ложь;
	Если ДанныеДляПечати.Свойство("Прослеживаемость") Тогда
		ПрослеживаемыеТовары = ДанныеДляПечати.Прослеживаемость.Выгрузить();
		Если ПрослеживаемыеТовары.Количество() > 0 Тогда
			ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПостановление914 = ЛОЖЬ;
	ЕстьПостановление534 = ЛОЖЬ;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		ВалютаРегламентированногоУчета = ВалютаРегламентированногоУчета(ДанныеПечати);
		
		Если ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры)
			И ОпцииПечатиСчетаФактуры.ПечатьВВалюте
			И ДанныеПечати.ВалютаСчетаФактуры = ВалютаРегламентированногоУчета Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для %1 указана валюта: рубли. Не требуется печатать счет-фактуру в иностранной валюте.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры)
			И НЕ ОпцииПечатиСчетаФактуры.ПечатьВВалюте
			И ДанныеПечати.ВалютаСчетаФактуры <> ВалютаРегламентированногоУчета  Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для %1 указана иностранная валюта. Не требуется печатать счет-фактуру в рублях.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
		Иначе
			
			ДействующиеПостановления = Новый Структура;
			ДействующиеПостановления.Вставить("Постановление914",  Ложь);
			ДействующиеПостановления.Вставить("Постановление1137", Истина);
			ДействующиеПостановления.Вставить("Постановление1137_625", ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления));
			ДействующиеПостановления.Вставить("Постановление981", ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления));
			ДействующиеПостановления.Вставить(
				"Постановление534",
				ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления));
			
			ОпцииПечатиСчетаФактуры.Вставить("ДействующиеПостановления", ДействующиеПостановления);
			
			Если ДанныеПечати.КорректировочныйСчетФактура Тогда
				Если ДействующиеПостановления.Постановление534 Тогда
					ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
					Если ИспользоватьПечатныеФормыСФ2_5 И Не ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
						ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
						Макет = ?(ДанныеПечати.ЕстьПрослеживаемыеТовары, МакетКорр_534Прослеж_2_5, МакетКорр_534_2_5);
					Иначе
						Макет = МакетКорр_534;
					КонецЕсли;
					ЕстьПостановление534 = Истина;
				ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
					Макет = МакетКорр_981;
					ЕстьПостановление981 = Истина;
				ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
					Макет = МакетКорр_625;
					ЕстьПостановление1137_625 = Истина;
				Иначе
					Макет = МакетКорр;
					ЕстьПостановление1137 = Истина;
				КонецЕсли;
			ИначеЕсли ДействующиеПостановления.Постановление914 Тогда
				Макет = Макет451;
				ЕстьПостановление914 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление534 Тогда
				ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
					Макет = ?(ДанныеПечати.ЕстьПрослеживаемыеТовары Или ЕстьПрослеживаемыеТоварыВТабличнойЧасти, Макет534Прослеж_2_5, Макет534_2_5);
				Иначе
					Макет = Макет534;
				КонецЕсли;
				ЕстьПостановление534 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
				Макет = Макет981;
				ЕстьПостановление981 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
				Макет = Макет1137_625;
				ЕстьПостановление1137_625 = Истина;
			Иначе
				Макет = Макет1137;
				ЕстьПостановление1137 = Истина;
			КонецЕсли;
			Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
			
			Если (ЕстьПостановление914 И ЕстьПостановление1137)
				ИЛИ (ЕстьПостановление914 И ЕстьПостановление981)
				ИЛИ ((ЕстьПостановление1137 ИЛИ ЕстьПостановление1137_625) И ЕстьПостановление981)
				Или ЕстьПостановление534 И (ЕстьПостановление914
											Или ЕстьПостановление1137
											Или ЕстьПостановление1137_625
											Или ЕстьПостановление981) Тогда
				
				Текст = НСтр("ru = 'Недоступна одновременная печать счетов-фактур, сформированных по разным постановлениям Правительства РФ'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДанныеПечати.Ссылка);
				
				ТабличныйДокумент.Очистить();
				Прервать;
				
			КонецЕсли;
			
			ОпцииПечатиСчетаФактуры.Вставить("Макет", Макет);
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ТекстПредставленияКомиссионера = "";
			ВыборкаПоставщиков = Неопределено;
			Если ДанныеДляПечати.Свойство("РезультатПоПоставщикам")
				И ДанныеПечати.ПеревыставленныйСчетФактура
				И (ЕстьПостановление981 Или ЕстьПостановление534) Тогда
				ВыборкаПоставщиков = ДанныеДляПечати.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				СведенияОКомиссионере = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
				
				ДополнительноеПредставление = "";
				Если ДействующиеПостановления.Постановление914 И СведенияОКомиссионере.ОфициальноеНаименование <> СведенияОКомиссионере.ПолноеНаименование Тогда
					ДополнительноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='(%1)'"),
						ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ПолноеНаименование"));
				КонецЕсли;
				
				ПредставлениеКомиссионера = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 %2'"),
					СведенияОКомиссионере.ПолноеНаименование,
					ДополнительноеПредставление));
					
				АдресКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1'"),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес"));
					
				ИННКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1/%2'"),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН", Ложь),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "КПП", Ложь));

				ТекстПредставленияКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Составлен комиссионером (агентом):%1, %2, ИНН/КПП: %3'"),
					ПредставлениеКомиссионера, АдресКомиссионера, ИННКомиссионера);

			ИначеЕсли ЕстьПостановление534 Тогда
				ТекстПредставленияКомиссионера = ДанныеПечати.ПредставлениеВыставленКомиссионеру;
			КонецЕсли;
				
			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = Новый Структура;
			ЗаполнитьРеквизитыШапкиСчетФактура(
				ДанныеПечати,
				ВыборкаОснований,
				СведенияОбОрганизации,
				ВыборкаКонтрагентов,
				ТабличныйДокумент,
				ОпцииПечатиСчетаФактуры,
				ВыборкаПоставщиков);
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			Если ДействующиеПостановления.Постановление914 И Не ДанныеПечати.КорректировочныйСчетФактура Тогда
				СтруктураПараметров = Новый Структура;
				Если ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
					СтруктураПараметров.Вставить("Валюта", ДанныеПечати.Валюта)
				Иначе
					СтруктураПараметров.Вставить("Валюта", ВалютаРегламентированногоУчета);
				КонецЕсли;
				ЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			НомерСтраницы = 1;
			
			// Инициализация итогов в документе
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ИтоговыеСуммы = СтруктураИтоговыеСуммы2_5();
			Иначе
				ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			КонецЕсли;
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
			Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс И ДанныеПечати.КорректировочныйСчетФактура И Не ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("СтрокаАвансы");
			Иначе
				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("Строка");
			КонецЕсли;
			ОбластьИтого = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
			ВыводитьОбластьКомиссионера = Ложь;
			
			Если Не ПустаяСтрока(ТекстПредставленияКомиссионера) Тогда
				ОбластьКомиссионера = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("ПредставлениеКомиссионера",ТекстПредставленияКомиссионера);
				ОбластьКомиссионера.Параметры.Заполнить(СтруктураПараметров);
				ВыводитьОбластьКомиссионера = Истина;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
			ИспользоватьНаборы = Ложь;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
				ИспользоватьНаборы = Истина;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОбластьМакетаНабор         = Макет.ПолучитьОбласть("Строка");
					ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("Строка");
				Иначе
					ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
					ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации);
			
			ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ДействующиеПостановления.Постановление981);
			
			ОперацияОблагаетсяНДСУПокупателя = Ложь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати,"НалогообложениеНДС") 
				И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
				ОперацияОблагаетсяНДСУПокупателя = Истина;
			КонецЕсли;
			
			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			ТолькоСтавкаБезНДС = Истина;
			НомерСтроки = 0;
			ПрефиксНабора = "";
			ТекущаяНоменклатураНабора = Справочники.Номенклатура.ПустаяСсылка();
			ТекущаяХарактеристикаНабора = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Пока СтрокаТовары.Следующий() Цикл
			СтрокаБезРасхождений = ДанныеПечати.КорректировочныйСчетФактура
									И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "РазницаБезНДСУвеличение")
									И СтрокаТовары.РазницаБезНДСУвеличение = СтрокаТовары.РазницаБезНДСУменьшение
									И СтрокаТовары.РазницаНДСУвеличение = СтрокаТовары.РазницаНДСУменьшение
									И СтрокаТовары.РазницаСНДСУвеличение = СтрокаТовары.РазницаСНДСУменьшение;
			Если Не СтрокаБезРасхождений Тогда
				Если ПрослеживаемыеТовары <> Неопределено Тогда
					ПрослеживаемыеТоварыСтрокаТовары = ПрослеживаемыеТовары.НайтиСтроки(Новый Структура("НомерСтрокиСФ", СтрокаТовары.НомерСтроки));
				Иначе
					ПрослеживаемыеТоварыСтрокаТовары = Неопределено;
				КонецЕсли;
				
				Если ДанныеПечати.КорректировочныйСчетФактура Тогда
					ОбластьМакета = ОбластьМакетаСтандарт;
				ИначеЕсли НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьМакета = ОбластьМакетаНабор;
				ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьМакета = ОбластьМакетаКомплектующие;
				Иначе
					ОбластьМакета = ОбластьМакетаСтандарт;
				КонецЕсли;
				
				ПараметрыПечати = Новый Структура("Корректировочный,СчетФактураНаАванс,ЕстьПрослеживаемыеТовары", ДанныеПечати.КорректировочныйСчетФактура, ОпцииПечатиСчетаФактуры.СчетФактураНаАванс, ДанныеПечати.ЕстьПрослеживаемыеТовары);
				
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					КоличествоСтрок = КоличествоСтрок - 1;
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   ПрослеживаемыеТоварыСтрокаТовары,
													   ОбластьМакета,
													   Неопределено,
													   ПараметрыПечати,
													   ДанныеПечати.КорректировочныйСчетФактура,
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
													   
						Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) 
							И ДанныеПечати.КорректировочныйСчетФактура Тогда
							ПрефиксНабора = ОбластьМакета.Параметры.ТоварНаименование;
							ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
							ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
						КонецЕсли;
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
													   ОбластьМакета, 
													   Неопределено, 
													   ДанныеПечати.КорректировочныйСчетФактура, 
													   ВыводитьКодыТНВЭД, 
													   ВыводитьСерии,
													   ОпцииПечатиСчетаФактуры.СчетФактураНаАванс);
													   
						Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) 
							И ДанныеПечати.КорректировочныйСчетФактура Тогда
							ПрефиксНабора = ОбластьМакета.Параметры.ПредставлениеНоменклатуры;
							ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
							ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
						КонецЕсли;
					КонецЕсли;
				Иначе
					НомерСтроки = НомерСтроки + 1;
					Если ИспользоватьПечатныеФормыСФ2_5 И Не (ОпцииПечатиСчетаФактуры.СчетФактураНаАванс И ДанныеПечати.КорректировочныйСчетФактура) Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   ПрослеживаемыеТоварыСтрокаТовары,
													   ОбластьМакета,
													   СтрокаТовары.НомерСтроки,
													   ПараметрыПечати,
													   ДанныеПечати.КорректировочныйСчетФактура,
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
						ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета);
						
						Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
							И ПрефиксНабора <> ""
							И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
							И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
							ОбластьМакета.Параметры.ТоварНаименование = ПрефиксНабора
																				+ Символы.ПС
																				+ ОбластьМакета.Параметры.ТоварНаименование;
						КонецЕсли;
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
													   ОбластьМакета, 
													   СтрокаТовары.НомерСтроки, 
													   ДанныеПечати.КорректировочныйСчетФактура, 
													   ВыводитьКодыТНВЭД, 
													   ВыводитьСерии,
													   ОпцииПечатиСчетаФактуры.СчетФактураНаАванс);
						ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета);
						
						Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
							И ПрефиксНабора <> ""
							И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
							И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
							ОбластьМакета.Параметры.ПредставлениеНоменклатуры = ПрефиксНабора
																				+ Символы.ПС
																				+ ОбластьМакета.Параметры.ПредставлениеНоменклатуры;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура;
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СтавкаНДС",               НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСДоИзменения",    НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения", НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", "--");
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", "--");
						СтруктураПараметров.Вставить("СтоимостьСНДСПослеИзменения", "--");
						СтруктураПараметров.Вставить("СтоимостьСНДСДоИзменения", "--");
						СтруктураПараметров.Вставить("Всего", "--");
					Иначе
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДС", "--");
						СтруктураПараметров.Вставить("СуммаНДСДо", "--");
						СтруктураПараметров.Вставить("СуммаСНДС", "--");
						СтруктураПараметров.Вставить("СуммаСНДСДо", "--");
					КонецЕсли;
					СтруктураПараметров.Вставить("РазницаНДСУменьшение", "--");
					СтруктураПараметров.Вставить("РазницаНДСУвеличение", "--");
					СтруктураПараметров.Вставить("РазницаСНДСУменьшение", "--");
					СтруктураПараметров.Вставить("РазницаСНДСУвеличение", "--");
					Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
						Если ИспользоватьПечатныеФормыСФ2_5 Тогда
							СтруктураПараметров.Вставить("Стоимость", СтрокаТовары.СуммаСНДС);
						Иначе
							СтруктураПараметров.Вставить("СуммаБезНДС", СтрокаТовары.СуммаСНДС);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СтавкаНДСДоИзменения", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					Иначе
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСДо", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
				ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", 0);
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", 0);
					Иначе
						СтруктураПараметров.Вставить("СуммаНДС", 0);
						СтруктураПараметров.Вставить("СуммаНДСДо", 0);
					КонецЕсли;
					ТолькоСтавкаБезНДС = Ложь;
				Иначе
					ТолькоСтавкаБезНДС = Ложь;
				КонецЕсли;
				
				Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ДействующиеПостановления.Постановление914 
						ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс
						ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
						СтруктураПараметров.Вставить("Акциз", "--");
					Иначе
						СтруктураПараметров.Вставить("Акциз", НСтр("ru='без акциза'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
				КонецЕсли;
				
				МассивВыводимыхОбластей.Очистить();
				
				Если Не(НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) 
					И ДанныеПечати.КорректировочныйСчетФактура) Тогда
			
					ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					
					Если НомерСтроки = КоличествоСтрок Тогда
						МассивВыводимыхОбластей.Добавить(ОбластьИтого);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
						
						Если ВыводитьОбластьКомиссионера Тогда
							МассивВыводимыхОбластей.Добавить(ОбластьКомиссионера);
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						Если Не ДействующиеПостановления.Постановление914 Тогда
							
							ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
							Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
								ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
							Иначе
								ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
							КонецЕсли;
							Если Не ИспользоватьПечатныеФормыСФ2_5 Или ДанныеПечати.КорректировочныйСчетФактура Тогда
								ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
							КонецЕсли;
							ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
							
							ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
							
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
						
					КонецЕсли;
				
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				
				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары);
					Иначе
						РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
			// Выводим итоги по документу
			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
			
			Если ДействующиеПостановления.Постановление1137
				И (НЕ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
				И (НЕ ДанныеПечати.КорректировочныйСчетФактура)
				И ТолькоСтавкаБезНДС Тогда
				ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка);
			КонецЕсли;
			
			Если ДанныеПечати.КорректировочныйСчетФактура
				И ТолькоСтавкаБезНДС Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ИтоговыеСуммы.Вставить("РазницаНДСУвеличение", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						ИтоговыеСуммы.Вставить("РазницаНДСУменьшение", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					Иначе
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
			КонецЕсли;
			
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ИтоговыеСуммы.Вставить("ИтогоСтоимость", ИтоговыеСуммы.ИтогоСтоимость);
					Иначе
						ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДС", ИтоговыеСуммы.ИтогоСуммаСНДС);
						ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДСНаСтранице", ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице);
					КонецЕсли;
				КонецЕсли;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДС", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДСНаСтранице", "--");
					ИтоговыеСуммы.Вставить("ИтогоВсего", "--");
					ИтоговыеСуммы.Вставить("ИтогоВсегоНаСтранице", "--");
					Если ИтоговыеСуммы.РазницаСНДСУменьшение <> 0 Тогда
						ИтоговыеСуммы.Вставить("РазницаСНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("РазницаСНДСУменьшениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУменьшениеНаСтранице", "--");
					КонецЕсли;
					Если ИтоговыеСуммы.РазницаСНДСУвеличение <> 0 Тогда
						ИтоговыеСуммы.Вставить("РазницаСНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("РазницаСНДСУвеличениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУвеличениеНаСтранице", "--");
					КонецЕсли;
				Иначе
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДС", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДСНаСтранице", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
					Если ИтоговыеСуммы.ИтогоРазницаСНДСУменьшение <> 0 Тогда
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшениеНаСтранице", "--");
					КонецЕсли;
					Если ИтоговыеСуммы.ИтогоРазницаСНДСУвеличение <> 0 Тогда
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличениеНаСтранице", "--");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
			ТабличныйДокумент.Вывести(ОбластьИтого);
			
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				УдалитьВсеОбластиФаксимиле(ОбластьПодвала);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьПодвала);
			
			Если ВыводитьОбластьКомиссионера Тогда
				ТабличныйДокумент.Вывести(ОбластьКомиссионера);
			КонецЕсли;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(ТаблицаОшибок, ПечатьКомиссионеру = Ложь)
	
	Если ПечатьКомиссионеру Тогда
		ПредставлениеДокумента = НСтр("ru='счет-фактура комиссионера'");
	Иначе
		ПредставлениеДокумента = НСтр("ru='счет-фактура'");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		
		ТекстОшибки = "";
		ПутьКДанным = "";
		
		Если СтрокаТаблицы.НеТребуетсяСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2'");
		ИначеЕсли СтрокаТаблицы.НеТребуетсяПечатьВВалюте Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2 в иностранной валюте'");
		ИначеЕсли СтрокаТаблицы.НеВыставленСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не введен %2'");
			ПутьКДанным = "ТекстСчетФактура";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				СтрокаТаблицы.ДокументОснование,
				ПредставлениеДокумента);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаТаблицы.ДокументОснование, , ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПечатиСчетФактурыПолученного(ТаблицаОшибок)
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		
		ТекстОшибки = "";
		ПутьКДанным = "";
		
		Если СтрокаТаблицы.НеТребуетсяСчетФактура Тогда
			Продолжить;
		ИначеЕсли СтрокаТаблицы.НеТребуетсяПечатьВВалюте Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2 в иностранной валюте'");
		ИначеЕсли СтрокаТаблицы.НеВыставленСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не введен %2'");
			ПутьКДанным = "ПредъявленСчетФактура";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				СтрокаТаблицы.ДокументОснование,
				НСтр("ru='счет-фактура посредника'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаТаблицы.ДокументОснование, ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		Структура.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
		Структура.Вставить("Итого"+Элемент.Ключ, 0);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураИтоговыеСуммы2_5()
	
	Структура = Новый Структура;
	
	Структура.Вставить("ИтогоСтоимость",    0);
	Структура.Вставить("ИтогоСуммаНДС",     0);
	Структура.Вставить("ИтогоВсего",        0);
	Структура.Вставить("Количество",        0);
	Структура.Вставить("КоличествоМест",    0);
	Структура.Вставить("КоличествоПринято", 0);
	Структура.Вставить("МассаБрутто",       0);
	Структура.Вставить("МассаНетто",        0);
	Структура.Вставить("Сумма",             0);
	
	Структура.Вставить("РазницаБезНДСУвеличение", 0);
	Структура.Вставить("РазницаБезНДСУменьшение", 0);
	Структура.Вставить("РазницаНДСУвеличение",    0);
	Структура.Вставить("РазницаНДСУменьшение",    0);
	Структура.Вставить("РазницаСНДСУвеличение",   0);
	Структура.Вставить("РазницаСНДСУменьшение",   0);
	Структура.Вставить("КоличествоПрослежУвеличение", 0);
	Структура.Вставить("КоличествоПрослежУменьшение", 0);
	Структура.Вставить("КоличествоПрослежУвеличениеВсего", 0);
	Структура.Вставить("КоличествоПрослежУменьшениеВсего", 0);
	
	Возврат Структура;
	
КонецФункции

Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		ИтоговыеСуммы.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары)
	
	СтруктураСуммПоСтроке = СтруктураРесурсовДляИтогов();
	
	ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураСуммПоСтроке.КоличествоМест);
	Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] = ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] + Элемент.Значение;
			ИтоговыеСуммы["Итого"+Элемент.Ключ] = ИтоговыеСуммы["Итого"+Элемент.Ключ] + Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары)
	
	СтруктураСуммПоСтроке = СтруктураИтоговыеСуммы2_5();
	
	ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтрокаТовары);
	СтруктураСуммПоСтроке.ИтогоСтоимость = СтрокаТовары.СуммаБезНДС;
	СтруктураСуммПоСтроке.ИтогоСуммаНДС  = СтрокаТовары.СуммаНДС;
	СтруктураСуммПоСтроке.ИтогоВсего     = СтрокаТовары.СуммаСНДС;
	
	ОкруглитьДоЦелого(СтруктураСуммПоСтроке.КоличествоМест);
	Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если Элемент.Ключ = "КоличествоПрослежУвеличение" Тогда
				ИтоговыеСуммы["КоличествоПрослежУвеличениеВсего"] = ИтоговыеСуммы["КоличествоПрослежУвеличениеВсего"] + Элемент.Значение;
			ИначеЕсли Элемент.Ключ = "КоличествоПрослежУменьшение" Тогда
				ИтоговыеСуммы["КоличествоПрослежУменьшениеВсего"] = ИтоговыеСуммы["КоличествоПрослежУменьшениеВсего"] + Элемент.Значение;
			Иначе
				ИтоговыеСуммы[Элемент.Ключ] = ИтоговыеСуммы[Элемент.Ключ] + Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	Если ИтоговыеСуммы.Свойство("ИтогоВсего") Тогда
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоВсего, ВалютаРегламентированногоУчета));
	Иначе
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, ВалютаРегламентированногоУчета));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, ВыводитьКодНоменклатуры = Истина, ВыводитьКодТНВД = Неопределено, ВыводитьСерии = Ложь, СчетФактураНаАванс = Ложь)
	
	ИспользоватьНаборы = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");
	
	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КоличествоМест", 0);
	СтруктураПараметров.Вставить("КоличествоВОдномМесте", 0);
	СтруктураПараметров.Вставить("НоменклатураКод", "");
	СтруктураПараметров.Вставить("КодТНВЭД", "--");
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураПараметров.КоличествоМест);
	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
	
	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;	
	ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Если ВыводитьКодТНВД <> Неопределено Тогда
		ДополнительныеПараметрыПолученияНаименованияДляПечати.КодТНВЭД = ?(НЕ ВыводитьКодТНВД.ВыводитьВКолонке И ВыводитьКодТНВД.ВыводитьВСтроке, СтрокаТовары.КодТНВЭД, "");
		Если НЕ ВыводитьКодТНВД.ВыводитьВКолонке Тогда
			СтруктураПараметров.КодТНВЭД = "--";
		КонецЕсли;
	КонецЕсли;
	СерияНаименование = Неопределено;
	Если ВыводитьСерии Тогда
		СерияНаименование = СтрокаТовары.СерияНаименование;
	КонецЕсли;	
	ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Строка(СтрокаТовары.НоменклатураНаименование),
			СтрокаТовары.ХарактеристикаНаименование,
			,
			СерияНаименование,
			ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс;
	
	СтруктураПараметров.Вставить("ПредставлениеНоменклатуры", ПредставлениеНоменклатуры);
		
	Если Не ВыводитьКодНоменклатуры Тогда
		СтруктураПараметров.НоменклатураКод = "";
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	Если ИспользоватьНаборы
		И СтрокаТовары.ЭтоКомплектующие
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		   ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	ИначеЕсли ИспользоватьНаборы
		И СтрокаТовары.ЭтоНабор
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих
			ИЛИ СчетФактураНаАванс) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТовары, ОбластьМакета, НомерСтроки, ПараметрыПечати, ВыводитьКодНоменклатуры = Истина, ВыводитьКодТНВД = Неопределено, ВыводитьСерии = Ложь)
	
	ИспользоватьНаборы = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");
	
	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КоличествоМест", 0);
	СтруктураПараметров.Вставить("КоличествоВОдномМесте", 0);
	СтруктураПараметров.Вставить("ТоварКод", "");
	СтруктураПараметров.Вставить("ТоварКодТНВЭД", "--");
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТовары);
	
	ЕстьКодТНВЭД = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "КодТНВЭД");
	Если Не ПараметрыПечати.СчетФактураНаАванс Тогда
		СтруктураПараметров.Вставить("ТоварКод", СтрокаТовары.НоменклатураКод);
		Если ЕстьКодТНВЭД Тогда
			СтруктураПараметров.Вставить("ТоварКодТНВЭД", СтрокаТовары.КодТНВЭД);
		КонецЕсли;
	КонецЕсли;
	
	ОкруглитьДоЦелого(СтруктураПараметров.КоличествоМест);
	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
	СтруктураПараметров.Вставить("НомерСтрокиУКД", НомерСтроки);
	
	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;	
	ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Если ВыводитьКодТНВД <> Неопределено Тогда
		ДополнительныеПараметрыПолученияНаименованияДляПечати.КодТНВЭД = ?(НЕ ВыводитьКодТНВД.ВыводитьВКолонке И ВыводитьКодТНВД.ВыводитьВСтроке, СтрокаТовары.КодТНВЭД, "");
		Если НЕ ВыводитьКодТНВД.ВыводитьВКолонке Тогда
			СтруктураПараметров.ТоварКодТНВЭД = "--";
		КонецЕсли;
	КонецЕсли;
	СерияНаименование = Неопределено;
	Если ВыводитьСерии Тогда
		СерияНаименование = СтрокаТовары.СерияНаименование;
	КонецЕсли;
	ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Строка(СтрокаТовары.НоменклатураНаименование),
			СтрокаТовары.ХарактеристикаНаименование,
			,
			СерияНаименование,
			ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс;
	
	Если ПараметрыПечати.Корректировочный Тогда
		СтруктураПараметров.Вставить("СтрокаДо",                      "А (до изменения)");
		СтруктураПараметров.Вставить("СтрокаПосле",                   "Б (после изменения)");
		СтруктураПараметров.Вставить("СтрокаУвеличение",              "В (увеличение)");
		СтруктураПараметров.Вставить("СтрокаУменьшение",              "Г (уменьшение)");
		СтруктураПараметров.Вставить("НомерСтроки",                   СтрокаТовары.НомерСтрокиИсходногоСФ);
		СтруктураПараметров.Вставить("ТоварКодТНВЭДДоИзменения",      СтрокаТовары.КодТНВЭД);
		СтруктураПараметров.Вставить("НаименованиеНоменклатуры",      ПредставлениеНоменклатуры);
		СтруктураПараметров.Вставить("НаименованиеЕдиницыИзмерения",  СтрокаТовары.ЕдиницаИзмеренияНаименование);
		СтруктураПараметров.Вставить("КоличествоДоИзменения",         СтрокаТовары.КоличествоДо);
		СтруктураПараметров.Вставить("КоличествоПослеИзменения",      СтрокаТовары.Количество);
		СтруктураПараметров.Вставить("ЦенаДоИзменения",               СтрокаТовары.ЦенаДо);
		СтруктураПараметров.Вставить("ЦенаПослеИзменения",            СтрокаТовары.Цена);
		СтруктураПараметров.Вставить("СтоимостьБезНДСДоИзменения",    СтрокаТовары.СуммаБезНДСДо);
		СтруктураПараметров.Вставить("СтоимостьБезНДСПослеИзменения", СтрокаТовары.СуммаБезНДС);
		СтруктураПараметров.Вставить("СтавкаНДСДоИзменения",          СтрокаТовары.СтавкаНДС);
		СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения",       СтрокаТовары.СтавкаНДС);
		СтруктураПараметров.Вставить("СуммаНДСДоИзменения",           СтрокаТовары.СуммаНДСДо);
		СтруктураПараметров.Вставить("СуммаНДСПослеИзменения",        СтрокаТовары.СуммаНДС);
		СтруктураПараметров.Вставить("СтоимостьСНДСДоИзменения",      СтрокаТовары.СуммаСНДСДо);
		СтруктураПараметров.Вставить("СтоимостьСНДСПослеИзменения",   СтрокаТовары.СуммаСНДС);
		СтруктураПараметров.Вставить("СтранаПроисхожденияКодДо",      СтрокаТовары.СтранаПроисхожденияКод);
		СтруктураПараметров.Вставить("СтранаПроисхожденияКодПосле",   СтрокаТовары.СтранаПроисхожденияКод);
		СтруктураПараметров.Вставить("ПредставлениеСтраныДо",         СтрокаТовары.СтранаПроисхождения);
		СтруктураПараметров.Вставить("ПредставлениеСтраныПосле",      СтрокаТовары.СтранаПроисхождения);
		СтруктураПараметров.Вставить("ПредставлениеГТДДо",            СтрокаТовары.НомерГТД);
		СтруктураПараметров.Вставить("ПредставлениеГТДПосле",         СтрокаТовары.НомерГТД);
		Если ПараметрыПечати.ЕстьПрослеживаемыеТовары Тогда
			СтруктураПараметров.Вставить("КоличествоПрослежДо",         СтрокаТовары.КоличествоПоРНПТДо);
			СтруктураПараметров.Вставить("КоличествоПрослежПосле",      СтрокаТовары.КоличествоПоРНПТ);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежКодДо",    СтрокаТовары.ЕдиницаИзмеренияТНВЭДКод);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежДо",       СтрокаТовары.ЕдиницаИзмеренияТНВЭДНаименование);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежКодПосле", СтрокаТовары.ЕдиницаИзмеренияТНВЭДКод);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежПосле",    СтрокаТовары.ЕдиницаИзмеренияТНВЭДНаименование);
		КонецЕсли;
	Иначе
		СтруктураПараметров.Вставить("ТоварНаименование",          ПредставлениеНоменклатуры);
		Если Не ПараметрыПечати.СчетФактураНаАванс Тогда
			СтруктураПараметров.Вставить("ЕдиницаИзмерения",       СтрокаТовары.ЕдиницаИзмеренияНаименование);
		КонецЕсли;
		СтруктураПараметров.Вставить("Стоимость",                  СтрокаТовары.СуммаБезНДС);
		СтруктураПараметров.Вставить("Всего",                      СтрокаТовары.СуммаСНДС);
		СтруктураПараметров.Вставить("ПредставлениеСтраны",        СтрокаТовары.СтранаПроисхождения);
		СтруктураПараметров.Вставить("ПредставлениеГТД",           СтрокаТовары.НомерГТД);
		Если ПрослеживаемыеТовары <> Неопределено И ПрослеживаемыеТовары.Количество() > 0 Тогда
			РНПТ = "";
			ЕдиницаИзмеренияПрослежКод = "";
			ЕдиницаИзмеренияПрослеж = "";
			КоличествоПоРНПТ = "";
			Для Каждого СтрокаПрослеживаемость Из ПрослеживаемыеТовары Цикл
				РНПТ = РНПТ + СтрокаПрослеживаемость.РНПТ + Символы.ПС;
				ЕдиницаИзмеренияПрослежКод = ЕдиницаИзмеренияПрослежКод + СтрокаПрослеживаемость.ЕдиницаИзмеренияКод + Символы.ПС;
				ЕдиницаИзмеренияПрослеж = ЕдиницаИзмеренияПрослеж + СтрокаПрослеживаемость.ЕдиницаИзмеренияНаименование + Символы.ПС;
				КоличествоПоРНПТ = КоличествоПоРНПТ + СтрокаПрослеживаемость.КоличествоПоРНПТ + Символы.ПС;
			КонецЦикла;
			СтруктураПараметров.Вставить("ПредставлениеГТД",           РНПТ);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежКод", ЕдиницаИзмеренияПрослежКод);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослеж",    ЕдиницаИзмеренияПрослеж);
			СтруктураПараметров.Вставить("КоличествоПрослеж",          КоличествоПоРНПТ);
		ИначеЕсли СтрокаТовары.КоличествоПоРНПТ <> 0 Тогда
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежКод",      СтрокаТовары.ЕдиницаИзмеренияТНВЭДКод);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослеж",         СтрокаТовары.ЕдиницаИзмеренияТНВЭДНаименование);
			СтруктураПараметров.Вставить("КоличествоПрослеж",               СтрокаТовары.КоличествоПоРНПТ);
		Иначе
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежКод", "");
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослеж",    "");
			СтруктураПараметров.Вставить("КоличествоПрослеж",          "");
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.СчетФактураНаАванс Тогда
		СтруктураПараметров.Вставить("СтавкаНДСДоИзменения", СтрокаТовары.СтавкаНДСДо);
	КонецЕсли;
	
	Если Не ВыводитьКодНоменклатуры Тогда
		СтруктураПараметров.ТоварКод = "";
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	Если ИспользоватьНаборы
		И СтрокаТовары.ЭтоКомплектующие
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		   ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	ИначеЕсли ИспользоватьНаборы
		И СтрокаТовары.ЭтоНабор
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих
			ИЛИ ПараметрыПечати.СчетФактураНаАванс) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	КонецЕсли;
	
	Если ИспользоватьНаборы
		И (СтрокаТовары.ЭтоКомплектующие ИЛИ СтрокаТовары.ЭтоНабор)
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие Тогда
			ОбластьМакета.Область().ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
			ОбластьМакета.Область().ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	КонецЕсли;
	
КонецПроцедуры

Функция НомерСчетаФактурыНаПечать(Номер, ИндексПодразделения, УдалитьПользовательскийПрефикс = Ложь)
	
	НомерНаПечать = "";
	
	Если Номер <> Неопределено Тогда
	
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, УдалитьПользовательскийПрефикс);
		
		ПозицияРазделителя = СтрНайти(НомерНаПечать, "-");
		Префикс = Лев(НомерНаПечать, ПозицияРазделителя);
		НомерБезПрефикса = Сред(НомерНаПечать, ПозицияРазделителя + 1);
		
		Если Лев(НомерБезПрефикса, 1) = "И" Тогда
			НомерНаПечать = Префикс + Сред(НомерБезПрефикса, 2);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИндексПодразделения) Тогда
			НомерНаПечать = НомерНаПечать + "/" + ИндексПодразделения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерНаПечать;
	
КонецФункции
	
#КонецОбласти

#Область Печать_УПД

Функция СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПД";
	
	СтруктураТиповНаПечать               = Новый Структура;
	МассивСчетФактураВыданный            = Новый Массив; // Массив из ДокументСсылка
	МассивСчетФактураКомиссионеру        = Новый Массив; // Массив из ДокументСсылка
	МассивСчетФактураПолученный          = Новый Массив;
	ОснованияНаРеализацию                = Новый Массив;
	ОснованияКомиссионеру                = Новый Массив;
	ОснованияСчетФактураПолученный       = Новый Массив;
	ДокументыБезВыданногоСчетаФактуры    = Новый Массив; // Массив из ДокументСсылка
	ДокументыБезСчетаФактурыКомиссионеру = Новый Массив;
	ДокументыБезПолученногоСчетаФактуры  = Новый Массив; // Массив из ДокументСсылка
	
	Если ПараметрыПечати = Неопределено Тогда
		ПараметрыПечати = Новый Структура;
	КонецЕсли;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);
		
		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяОбъекта = "СчетФактураВыданный" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураКомиссионеру" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "ОтчетКомиссионера" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияКомиссионеру, СтруктураОбъектов.Значение);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
				И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОснованияНаРеализацию.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(ОснованияНаРеализацию);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованияКомиссионеру.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураКомиссионеру.ПолучитьСчетаФактурыНаПечать(ОснованияКомиссионеру);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(ОснованияСчетФактураПолученный);
		
		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезПолученногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;
	
	Если МассивСчетФактураКомиссионеру.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураКомиссионеру", МассивСчетФактураКомиссионеру);
	КонецЕсли;
	
	Для Каждого Документ Из ДокументыБезВыданногоСчетаФактуры Цикл
		
		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			МассивДокументовДляСтруктуры = СтруктураТиповНаПечать[ИмяОбъекта]; // Массив из ДокументСсылка
			МассивДокументовДляСтруктуры.Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Истина);
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		Если ДанныеДляПечати <> Неопределено Тогда
			ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТиповНаПечать.Очистить();
	Для Каждого Документ Из ДокументыБезПолученногоСчетаФактуры Цикл
		
		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			МассивДокументовДляСтруктуры = СтруктураТиповНаПечать[ИмяОбъекта]; // Массив из ДокументСсылка
			МассивДокументовДляСтруктуры.Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Ложь);
		ПараметрыПечати.Вставить("НеВыводитьОсновнойУПД", Истина);
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОПоставщике, ДанныеКонтрагентов, ОбластьМакета, ДанныеПоставщиков, ОпцииПечати)
	
	СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
	ВыводитьДанныеПоставщика = Не (ДанныеПечати.СтатусУПД = 2 И ДанныеПечати.ЭтоПередачаНаКомиссию);
	ВыводитьДанныеПокупателя = Не (ДанныеПечати.СтатусУПД = 2 И ДанныеПечати.ЭтоПередачаНаКомиссию);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ПараметрыШапки = Новый Структура;
	
	Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
		ПараметрыШапки.Вставить("Номер", ДанныеПечати.Номер);
	Иначе
		ПараметрыШапки.Вставить("Номер", НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения));
	КонецЕсли;
	
	ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДЛФ=ДД"));
	ПараметрыШапки.Вставить("НомерИсправления", ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--"));
	ПараметрыШапки.Вставить("ДатаИсправления",
		?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--"));
	
	// Выводим данные о поставщике.
	
	Если ДанныеПоставщиков = Неопределено Тогда
		
		ПредставлениеПоставщика = "--";
		ПредставлениеАдресПоставщика = "--";
		ПредставлениеИННПоставщика = "--";
		
		Если ВыводитьДанныеПоставщика Тогда
			ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1'"),
				СведенияОПоставщике.ПолноеНаименование);
			
			ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1'"),
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
			
			ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1%2'"),
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
				?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
		КонецЕсли;
			
		// Выводим данные грузоотправителя.
		ТекстГрузоотправителя = "";
		Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.Грузоотправитель = Неопределено Тогда
			ТекстГрузоотправителя = "--";
		ИначеЕсли ВыводитьДанныеПоставщика
			И (ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель
				ИЛИ ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "КПП") = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Грузоотправитель, "КПП")) Тогда
			ТекстГрузоотправителя = НСтр("ru='он же'", Метаданные.Языки.Русский.КодЯзыка);
		Иначе
			ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
		КонецЕсли;
		
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			ТекстГрузоотправителя);
	
	Иначе
	
		ПредставлениеПоставщика       = "";
		ПредставлениеАдресПоставщика = "";
		ПредставлениеИННПоставщика = "";
		ПредставлениеГрузоотправителя  = "";

		ЕстьГрузоотправитель = НЕ ДанныеПечати.ТолькоУслуги;
		
		ТаблицаПоставщиков = ТаблицаПоставщиковСчетаФактуры(ДанныеПечати, ДанныеПоставщиков);
		Для Каждого СтрокаТаблицы Из ТаблицаПоставщиков Цикл
			
			Если ВыводитьДанныеПоставщика Тогда
				СведенияОПоставщикеВрем = СтрокаТаблицы.СведенияОПоставщике;
				
				ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1; %2'"),
					ПредставлениеПоставщика,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщикеВрем, "ПолноеНаименование", Ложь));
				
				ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1; %2'"),
					ПредставлениеАдресПоставщика,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщикеВрем, "ЮридическийАдрес", Ложь));
					
				ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1; %2%3'"),
					ПредставлениеИННПоставщика,
					СтрокаТаблицы.ИНН,
					?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
			КонецЕсли;
				
			Если ЕстьГрузоотправитель Тогда
				СведенияОГрузоотправителе = СтрокаТаблицы.СведенияОГрузоотправителе;
				ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеГрузоотправителя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес", Ложь));
			КонецЕсли;
			
		КонецЦикла;
		
		ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			?(ВыводитьДанныеПоставщика, Сред(ПредставлениеПоставщика, 3), "--"));
		
		ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			?(ВыводитьДанныеПоставщика, Сред(ПредставлениеАдресПоставщика, 3), "--"));
		
		ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			?(ВыводитьДанныеПоставщика, Сред(ПредставлениеИННПоставщика, 3), "--"));
			
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			?(ЕстьГрузоотправитель, Сред(ПредставлениеГрузоотправителя, 3), "--"));
			
	КонецЕсли;
	
	ПараметрыШапки.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	ПараметрыШапки.Вставить("АдресПоставщика", ПредставлениеАдресПоставщика);
	ПараметрыШапки.Вставить("ИННПоставщика", ПредставлениеИННПоставщика);
	ПараметрыШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	
	// Выводим данные грузополучателя и покупателя.
	ТекстГрузополучателя = "--";
	
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		ТекстГрузополучателя);
	СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
			НСтр("ru='-- от --'", Метаданные.Языки.Русский.КодЯзыка),
			ДанныеПечати.СтрокаПоДокументу));
	
	ПараметрыШапки.Вставить("ПоДокументу", СтрокаПоДокументу);
	
	ЕстьГрузополучатель = Не ДанныеПечати.ТолькоУслуги;
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	
	ПредставлениеПокупателя       = "";
	ПредставлениеАдресаПокупателя = "";
	ПредставлениеИННПокупателя    = "";
	ПредставлениеГрузополучателя  = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		
		Если ВыводитьДанныеПокупателя Тогда
			СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
			
			ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеПокупателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
			
			ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеАдресаПокупателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
				
			ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2%3'"),
				ПредставлениеИННПокупателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь),
				?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
		КонецЕсли;
		
		Если ЕстьГрузополучатель Тогда
			СведенияОГрузополучателе = СтрокаТаблицы.СведенияОГрузополучателе;
			ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеГрузополучателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь));
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		?(ВыводитьДанныеПокупателя, Сред(ПредставлениеПокупателя, 3), "--"));
	
	ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		?(ВыводитьДанныеПокупателя, Сред(ПредставлениеАдресаПокупателя, 3), "--"));
	
	ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		?(ВыводитьДанныеПокупателя, Сред(ПредставлениеИННПокупателя, 3), "--"));
		
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"),
		?(ЕстьГрузополучатель, Сред(ПредставлениеГрузополучателя, 3), "--"));
		
	ПараметрыШапки.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
	ПараметрыШапки.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
	ПараметрыШапки.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
	ПараметрыШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	ПараметрыШапки.Вставить("Валюта", НСтр("ru='Российский рубль, 643'", Метаданные.Языки.Русский.КодЯзыка));
	
	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
	Если ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления) Тогда
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	Иначе
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	КонецЕсли;
	ПараметрыШапки.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации, ДанныеКонтрагентов)
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),НСтр("ru = 'г.'", Метаданные.Языки.Русский.КодЯзыка),"");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПозицияРазделителя = СтрНайти(ПолнаяДатаДокумента, " ");
	ПредставлениеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='""%1"" %2года'", Метаданные.Языки.Русский.КодЯзыка),
		Лев(ПолнаяДатаДокумента, ПозицияРазделителя -1),
		Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПозицияРазделителя));
	
	СтруктураПараметров.Вставить("ДатаДокумента", ПредставлениеДаты);
	
	ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика);
	ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика);
	Иначе
		ПредставлениеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	ПредставлениеКонтрагента    = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
		ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
		ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь);
		Если Не ПустаяСтрока(СтрокаТаблицы.КПП) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2, ИНН/КПП %3/%4'", Метаданные.Языки.Русский.КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя,
				СтрокаТаблицы.КПП);
		ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2, ИНН %3'", Метаданные.Языки.Русский.КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя);
		Иначе
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеКонтрагента,
				ПолноеНаименование);
		КонецЕсли;
	
	КонецЦикла;
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", Сред(ПредставлениеКонтрагента, 3));
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата)
		И (ЗначениеЗаполнено(ДанныеПечати.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеПечати.ДоверенностьЛицо)) Тогда
		
		ТекстОснования = СокрЛП(ДанныеПечати.Основание) + "; "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по доверенности №%1 от %2, выданной %3 %4'", Метаданные.Языки.Русский.КодЯзыка),
				ДанныеПечати.ДоверенностьНомер,
				Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"),
				ДанныеПечати.ДоверенностьВыдана,
				ДанныеПечати.ДоверенностьЛицо);
		СтруктураПараметров.Вставить("Основание", ТекстОснования);
		
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаУПД2_5(ОбластьПодвала, ОбластьПодвалаНакладной, ДанныеПечати, СведенияОбОрганизации, ДанныеКонтрагентов)
	
	ОбластьПодвалаНакладной.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФИООтветственного", ДанныеПечати.Руководитель);
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
		
	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	СтруктураПараметров.Вставить("ДолжностьОтветственного", ДанныеПечати.ДолжностьРуководителя);
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),НСтр("ru = 'г.'", Метаданные.Языки.Русский.КодЯзыка),"");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПозицияРазделителя = СтрНайти(ПолнаяДатаДокумента, " ");
	ПредставлениеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='""%1"" %2года'", Метаданные.Языки.Русский.КодЯзыка),
		Лев(ПолнаяДатаДокумента, ПозицияРазделителя -1),
		Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПозицияРазделителя));
	
	СтруктураПараметров.Вставить("ДатаОтгрузкиПередачи", ПредставлениеДаты);
	
	ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика);
	ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика);
	Иначе
		ПредставлениеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	ПредставлениеКонтрагента    = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
		ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
		ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь);
		Если Не ПустаяСтрока(СтрокаТаблицы.КПП) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2, ИНН/КПП %3/%4'", Метаданные.Языки.Русский.КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя,
				СтрокаТаблицы.КПП);
		ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2, ИНН %3'", Метаданные.Языки.Русский.КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя);
		Иначе
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"),
				ПредставлениеКонтрагента,
				ПолноеНаименование);
		КонецЕсли;
	
	КонецЦикла;
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", Сред(ПредставлениеКонтрагента, 3));
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата)
		И (ЗначениеЗаполнено(ДанныеПечати.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеПечати.ДоверенностьЛицо)) Тогда
		
		ТекстОснования = СокрЛП(ДанныеПечати.Основание) + "; "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по доверенности №%1 от %2, выданной %3 %4'", Метаданные.Языки.Русский.КодЯзыка),
				ДанныеПечати.ДоверенностьНомер,
				Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"),
				ДанныеПечати.ДоверенностьВыдана,
				ДанныеПечати.ДоверенностьЛицо);
		СтруктураПараметров.Вставить("Основание", ТекстОснования);
		
	КонецЕсли;
	
	ОбластьПодвалаНакладной.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке			 - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти	 - РезультатЗапроса
// 		* РезультатПоКонтрагентам	 - РезультатЗапроса
// 		* РезультатПоИсходнымДанным	 - РезультатЗапроса
// 		* РезультатПоПоставщикам	 - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
// 
Процедура ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати) Экспорт
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	ИспользоватьПечатныеФормыСФ2_5 = Ложь;
	
	МакетУПД = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_ru");
	МакетУПД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_625_ru");
	МакетУПД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент981_ru");
	МакетУПД_534 = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент534_ru");
	МакетУПД_534_2_5 = УправлениеПечатью.МакетПечатнойФормы(
						"ОбщийМакет.ПФ_MXL_УниверсальныйПередаточныйДокумент534");
	МакетУПД_534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы(
						"ОбщийМакет.ПФ_MXL_УниверсальныйПередаточныйДокумент534Прослеж");
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
	ОпцииПечати.Вставить("ИспользоватьПечатныеФормыСФ2_5", ИспользоватьПечатныеФормыСФ2_5);
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") Тогда
		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаКонтрагентов = Неопределено;
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаОснований = Неопределено;
	КонецЕсли;
	ПрослеживаемыеТовары = Неопределено;
	ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Ложь;
	Если ДанныеДляПечати.Свойство("Прослеживаемость") Тогда
		ПрослеживаемыеТовары = ДанныеДляПечати.Прослеживаемость.Выгрузить();
		Если ПрослеживаемыеТовары.Количество() > 0 Тогда
			ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПостановление534 = ЛОЖЬ;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ДанныеПечати.СтатусУПД = 2
			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			И НЕ ДанныеПечати.ЭтоПередачаНаКомиссию
			И ДанныеПечати.ТребуетсяНаличиеСФ Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен %2'"),
				ДанныеПечати.Ссылка,
				ДанныеПечати.ПредставлениеДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка,
				,
				"ТекстСчетФактура");
				
			Продолжить;
		КонецЕсли;
		
		Если ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
				Макет = ?(ЗначениеЗаполнено(ДанныеПечати.ЕстьПрослеживаемыеТовары) И ДанныеПечати.ЕстьПрослеживаемыеТовары Или ЕстьПрослеживаемыеТоварыВТабличнойЧасти, МакетУПД_534Прослеж_2_5, МакетУПД_534_2_5);
			Иначе
				Макет = МакетУПД_534;
			КонецЕсли;
			ЕстьПостановление534 = Истина;
		ИначеЕсли ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_981;
			ЕстьПостановление981 = Истина;
		ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_625;
			ЕстьПостановление1137_625 = Истина;
		Иначе
			Макет = МакетУПД;
			ЕстьПостановление1137 = Истина;
		КонецЕсли;
		Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
		
		Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
				|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
				|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		ИначеЕсли (ЕстьПостановление1137_625 Или ЕстьПостановление1137 Или ЕстьПостановление981)
				И ЕстьПостановление534 Тогда
			
			ТекстСообщения = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
			|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ДанныеДляПечати.Свойство("РезультатПоПоставщикам")
			И ДанныеПечати.ПеревыставленныйСчетФактура Тогда
			ВыборкаПоставщиков = ДанныеДляПечати.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;
		
			
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка,
			ДанныеПечати.Ссылка);
		
		ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов, ОбластьШапка, ВыборкаПоставщиков, ОпцииПечати);
		
		НомерСтраницы = 1;
		
		// Инициализация итогов в документе
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ИтоговыеСуммы = СтруктураИтоговыеСуммы2_5();
		Иначе
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		КонецЕсли;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьСтрокаСтандарт = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ОбластьПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
		КонецЕсли;
		
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ЗаполнитьРеквизитыПодвалаУПД2_5(ОбластьПодвал, ОбластьПодвалНакладной, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		Иначе
			ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвал, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		КонецЕсли;
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("Строка");
			Иначе
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
			КонецЕсли;
		КонецЕсли;
		
		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981 Или ЕстьПостановление534);
		
		ОперацияОблагаетсяНДСУПокупателя = Ложь;
		Если ДанныеПечати.СтатусУПД = 1
		И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			ОперацияОблагаетсяНДСУПокупателя = Истина;
		КонецЕсли;
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = 0;
		Пока СтрокаТовары.Следующий() Цикл
			Если Не НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		СтрокаТовары.Сбросить();
		
		Если ЕстьПостановление534 Тогда
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьШапка.Параметры.ДокументыОбОтгрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ п/п %1 № %2 от %3'"),
						?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
						ОбластьШапка.Параметры.Номер,
						ОбластьШапка.Параметры.Дата);
			Иначе
				ОбластьШапка.Параметры.ПоДокументуОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ п/п %1 № %2 от %3'"),
						?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
						ОбластьШапка.Параметры.Номер,
						ОбластьШапка.Параметры.Дата);
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		ТолькоСтавкаБезНДС = Истина;
		НомерСтроки = 0;
		Пока СтрокаТовары.Следующий() Цикл
			
				Если ПрослеживаемыеТовары <> Неопределено Тогда
					ПрослеживаемыеТоварыСтрокаТовары = ПрослеживаемыеТовары.НайтиСтроки(Новый Структура("НомерСтрокиСФ", СтрокаТовары.НомерСтроки));
				Иначе
					ПрослеживаемыеТоварыСтрокаТовары = Неопределено;
				КонецЕсли;
			
			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
				ИЛИ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
					И СтрокаТовары.Покупатель <> НЕОПРЕДЕЛЕНО Тогда
						Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТовары.Количество = 0 
				И СтрокаТовары.СуммаСНДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаНабор;
			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаКомплектующие;
			Иначе
				ОбластьСтрока = ОбластьСтрокаСтандарт;
			КонецЕсли;
			
			ПараметрыПечати = Новый Структура("Корректировочный,СчетФактураНаАванс", Ложь, Ложь);
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары, ОбластьСтрока, Неопределено, ПараметрыПечати, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				Иначе
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, Неопределено, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				КонецЕсли;
			Иначе
				НомерСтроки = НомерСтроки + 1;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары, ОбластьСтрока, НомерСтроки, ПараметрыПечати, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				Иначе
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				КонецЕсли;
				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка));
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					СтруктураПараметров.Вставить("Всего", "--");
				Иначе
					СтруктураПараметров.Вставить("СуммаСНДС", "--");
				КонецЕсли;
				ТолькоСтавкаБезНДС = Ложь;
			ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
				СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
			ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
				СтруктураПараметров.Вставить("СуммаНДС", 0);
				ТолькоСтавкаБезНДС = Ложь;
			Иначе
				ТолькоСтавкаБезНДС = Ложь;
			КонецЕсли;
			Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					СтруктураПараметров.Вставить("Акциз", НСтр("ru='без
					|акциза'", Метаданные.Языки.Русский.КодЯзыка));
				Иначе
					СтруктураПараметров.Вставить("Акциз", НСтр("ru='без акциза'", Метаданные.Языки.Русский.КодЯзыка));
				КонецЕсли;
			КонецЕсли;
			ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьИтого);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
				КонецЕсли;
			КонецЕсли;
			
			Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
				Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
					ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
				Иначе
					ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
				КонецЕсли;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
				Иначе
					ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
					ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары);
				Иначе
					РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Выводим итоги по документу
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
							ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
		
		Если ТолькоСтавкаБезНДС Тогда
			ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка);
		КонецЕсли;
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ИтоговыеСуммы.Вставить("ИтогоВсего", "--");
				ИтоговыеСуммы.Вставить("ИтогоВсегоНаСтранице", "--");
			Иначе
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
			КонецЕсли;
		КонецЕсли;
		
		ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
		ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ составлен на %1 %2'", Метаданные.Языки.Русский.КодЯзыка),
			НомерСтраницы,
			ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'листе'", Метаданные.Языки.Русский.КодЯзыка),
				НСтр("ru = 'листах'", Метаданные.Языки.Русский.КодЯзыка),
				НСтр("ru = 'листах'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			СтруктураПараметров = Новый Структура("КоличествоЛистов", КоличествоСтраниц);
		Иначе
			СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
		КонецЕсли;
		ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
		
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			УдалитьВсеОбластиФаксимиле(ОбластьПодвал);
			УдалитьВсеОбластиФаксимиле(ОбластьПодвалНакладной);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ТабличныйДокумент.Вывести(ОбластьПодвалНакладной);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеПечати.Ссылка);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_УКД

Функция СформироватьПечатнуюФормуУКД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УКД";
	
	СтруктураТиповНаПечать              = Новый Структура;
	МассивСчетФактураВыданный           = Новый Массив;
	ОснованияСчетФактуры                = Новый Массив;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		Если СтруктураОбъектов.Ключ = "Документ.СчетФактураВыданный" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактуры, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОснованияСчетФактуры.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(
			ОснованияСчетФактуры, Истина);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				
				Документ = СтрокаТаблицыОшибок.ДокументОснование; // ДокументСсылка
				ИмяОбъекта = Документ.Метаданные().Имя;
				Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
					МассивДокументовДляСтруктуры = СтруктураТиповНаПечать[ИмяОбъекта]; // Массив из ДокументСсылка
					МассивДокументовДляСтруктуры.Добавить(Документ);
				Иначе
					МассивДокументовТипа = Новый Массив;
					МассивДокументовТипа.Добавить(Документ);
					СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
	
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУКД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		Если ДанныеДляПечати <> Неопределено Тогда
			ЗаполнитьТабличныйДокументУКД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке - РезультатЗапроса
// 		* РезультатПоИсходнымДанным - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
//
Процедура ЗаполнитьТабличныйДокументУКД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати) Экспорт
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
						И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	ИспользоватьПечатныеФормыСФ2_5 = Ложь;
		
	МакетУКД     = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент_ru");
	МакетУКД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент_625_ru");
	МакетУКД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент981_ru");
	МакетУКД_534 = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент534_ru");
	МакетУКД_534_2_5   = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_УниверсальныйКорректировочныйДокумент534");
	МакетУКД_534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_УниверсальныйКорректировочныйДокумент534Прослеж");
	
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление534 = ЛОЖЬ;
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
	ОпцииПечати.Вставить("ИспользоватьПечатныеФормыСФ2_5", ИспользоватьПечатныеФормыСФ2_5);
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОснований    = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ДанныеПечати.ПечатьНеТребуется Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 универсальный корректировочный документ не применяется.'"),
					ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
				
		ИначеЕсли НЕ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			И (ДанныеПечати.СтатусУПД = 2 ИЛИ ДанныеПечати.Номер = Неопределено) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен %2'"),
				ДанныеПечати.Ссылка,
				НСтр("ru='счет-фактура'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка,
				,
				"ТекстСчетФактура");
	
		Иначе
			
			Если ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
				ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
					Макет = ?(ДанныеПечати.ЕстьПрослеживаемыеТовары, МакетУКД_534Прослеж_2_5, МакетУКД_534_2_5);
				Иначе
					Макет = МакетУКД_534;
				КонецЕсли;
				ЕстьПостановление534 = Истина;
			ИначеЕсли ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
				Макет = МакетУКД_981;
				ЕстьПостановление981 = Истина;
			ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
				Макет = МакетУКД_625;
				ЕстьПостановление1137_625 = Истина;
			Иначе
				Макет = МакетУКД;
				ЕстьПостановление1137 = Истина;
			КонецЕсли;
			Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
			
			Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
				
				Текст = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
					|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.)'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДанныеПечати.Ссылка);
				
				ТабличныйДокумент.Очистить();
				Прервать;
				
			КонецЕсли;
			
			Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
				
				Текст = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
					|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.)'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДанныеПечати.Ссылка);
				
				ТабличныйДокумент.Очистить();
				Прервать;
				
			ИначеЕсли (ЕстьПостановление1137_625 Или ЕстьПостановление1137 Или ЕстьПостановление981)
					И ЕстьПостановление534 Тогда
				
				ТекстСообщения = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
				|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.'");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеПечати.Ссылка);
				
				ТабличныйДокумент.Очистить();
				Прервать;
				
			КонецЕсли;
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
			СведенияОКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
			ЗаполнитьРеквизитыШапкиУКД(ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, СведенияОКонтрагенте, Макет, ТабличныйДокумент, ОпцииПечати);
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			НомерСтраницы = 1;
			
			// Инициализация итогов в документе
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ИтоговыеСуммы = СтруктураИтоговыеСуммы2_5();
			Иначе
				ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			КонецЕсли;
		
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьИтого  = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
			КонецЕсли;
			
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ЗаполнитьРеквизитыПодвалаУКД2_5(ОбластьПодвал, ОбластьПодвалНакладной, ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, СведенияОКонтрагенте, ОпцииПечати);
			Иначе
				ЗаполнитьРеквизитыПодвалаУКД(ОбластьПодвал, ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, СведенияОКонтрагенте, ОпцииПечати);
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
			ИспользоватьНаборы = Ложь;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
				ИспользоватьНаборы = Истина;
			КонецЕсли;
			
			ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981 Или ЕстьПостановление534);
			
			ОперацияОблагаетсяНДСУПокупателя = Ложь;
			Если ДанныеПечати.СтатусУПД = 1
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
				ОперацияОблагаетсяНДСУПокупателя = Истина;
			КонецЕсли;
		
			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			ТолькоСтавкаБезНДС = Истина;
			НомерСтроки = 0;
			ПрефиксНабора = "";
			ТекущаяНоменклатураНабора = Справочники.Номенклатура.ПустаяСсылка();
			ТекущаяХарактеристикаНабора = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Пока СтрокаТовары.Следующий() Цикл
			СтрокаБезРасхождений = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "РазницаБезНДСУвеличение")
									И СтрокаТовары.РазницаБезНДСУвеличение = СтрокаТовары.РазницаБезНДСУменьшение
									И СтрокаТовары.РазницаНДСУвеличение = СтрокаТовары.РазницаНДСУменьшение
									И СтрокаТовары.РазницаСНДСУвеличение = СтрокаТовары.РазницаСНДСУменьшение;
			Если Не СтрокаБезРасхождений Тогда
				
				ПараметрыПечати = Новый Структура("Корректировочный,СчетФактураНаАванс,ЕстьПрослеживаемыеТовары", Истина, Ложь, ДанныеПечати.ЕстьПрослеживаемыеТовары);
					
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					КоличествоСтрок = КоличествоСтрок - 1;
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   Неопределено,
													   ОбластьСтрока, 
													   Неопределено,
													   ПараметрыПечати,, 
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
													   
						Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
							ПрефиксНабора = ОбластьСтрока.Параметры.НаименованиеНоменклатуры;
							ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
							ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
						КонецЕсли;
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
													   ОбластьСтрока, 
													   Неопределено,, 
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
													   
						Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
							ПрефиксНабора = ОбластьСтрока.Параметры.ПредставлениеНоменклатуры;
							ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
							ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
						КонецЕсли;
					КонецЕсли;
				Иначе
					НомерСтроки = НомерСтроки + 1;
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   Неопределено,
													   ОбластьСтрока, 
													   НомерСтроки,
													   ПараметрыПечати,, 
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
						ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
					
						Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
							И ПрефиксНабора <> ""
							И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
							И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
							ОбластьСтрока.Параметры.НаименованиеНоменклатуры = ПрефиксНабора
																				+ Символы.ПС
																				+ ОбластьСтрока.Параметры.НаименованиеНоменклатуры;
						КонецЕсли;
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
													   ОбластьСтрока, 
													   НомерСтроки,, 
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
						ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
						
						Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
							И ПрефиксНабора <> ""
							И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
							И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
							ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПрефиксНабора
																				+ Символы.ПС
																				+ ОбластьСтрока.Параметры.ПредставлениеНоменклатуры;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура;
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СтавкаНДСДоИзменения",    НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения", НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтоимостьСНДСПослеИзменения", "--");
						СтруктураПараметров.Вставить("СтоимостьСНДСДоИзменения", "--");
					Иначе
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаСНДС", "--");
						СтруктураПараметров.Вставить("СуммаСНДСДо", "--");
					КонецЕсли;
						СтруктураПараметров.Вставить("РазницаСНДСУвеличение", "--");
						СтруктураПараметров.Вставить("РазницаСНДСУменьшение", "--");
					ТолькоСтавкаБезНДС = Ложь;
				ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СтавкаНДСДоИзменения", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					Иначе
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСДо", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
				ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", 0);
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", 0);
					Иначе
						СтруктураПараметров.Вставить("СуммаНДС", 0);
						СтруктураПараметров.Вставить("СуммаНДСДо", 0);
					КонецЕсли;
					ТолькоСтавкаБезНДС = Ложь;
				Иначе
					ТолькоСтавкаБезНДС = Ложь;
				КонецЕсли;
				СтруктураПараметров.Вставить("Акциз", НСтр("ru='без акциза'", Метаданные.Языки.Русский.КодЯзыка));
				
				МассивВыводимыхОбластей.Очистить();
				
				Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			
					ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
					МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
					
					Если НомерСтроки = КоличествоСтрок Тогда
						МассивВыводимыхОбластей.Добавить(ОбластьИтого);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
						Если ИспользоватьПечатныеФормыСФ2_5 Тогда
							МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
						КонецЕсли;
					КонецЕсли;
					
					Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
						Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
							ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
						Иначе
							ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
						КонецЕсли;
						ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
						Если ИспользоватьПечатныеФормыСФ2_5 Тогда
							ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
						Иначе
							ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
						КонецЕсли;
						ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
						
					КонецЕсли;
				
					ТабличныйДокумент.Вывести(ОбластьСтрока);
				КонецЕсли;
				
				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары);
					Иначе
						РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			КонецЦикла;
			
			// Выводим итоги по документу
			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета(ДанныеПечати));
			
			Если ТолькоСтавкаБезНДС Тогда
				ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка);
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ИтоговыеСуммы.Вставить("РазницаНДСУвеличение", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					ИтоговыеСуммы.Вставить("РазницаНДСУменьшение", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
				Иначе
					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", НСтр("ru='без НДС'", Метаданные.Языки.Русский.КодЯзыка));
				КонецЕсли;
			КонецЕсли;
			
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ИтоговыеСуммы.Вставить("РазницаСНДСУвеличение", "--");
					ИтоговыеСуммы.Вставить("РазницаСНДСУменьшение", "--");
				Иначе
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличение", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшение", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличениеНаСтранице", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшениеНаСтранице", "--");
				КонецЕсли;
			КонецЕсли;
		
			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
			ТабличныйДокумент.Вывести(ОбластьИтого);
			
			КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ составлен на %1 %2'", Метаданные.Языки.Русский.КодЯзыка),
				НомерСтраницы,
				ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
					НСтр("ru = 'листе'", Метаданные.Языки.Русский.КодЯзыка),
					НСтр("ru = 'листах'", Метаданные.Языки.Русский.КодЯзыка),
					НСтр("ru = 'листах'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				СтруктураПараметров = Новый Структура("КоличествоЛистов", КоличествоСтраниц);
			Иначе
				СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
			КонецЕсли;
			ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
			
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				УдалитьВсеОбластиФаксимиле(ОбластьПодвал);
				УдалитьВсеОбластиФаксимиле(ОбластьПодвалНакладной);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ТабличныйДокумент.Вывести(ОбластьПодвалНакладной);
			КонецЕсли;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
				ДанныеПечати.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиУКД(ДанныеПечати, ДанныеОснований, СведенияОПоставщике, СведенияОПокупателе, Макет, ТабличныйДокумент, ОпцииПечати)
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета,
		ДанныеПечати.Ссылка);
	
	НомераДаты = Новый Структура("Номер, Дата, НомерИсправления, ДатаИсправления, НомерСчетаФактуры, ДатаСчетаФактуры, НомерИсправленияСчетаФактуры, ДатаИсправленияСчетаФактуры, НомерИсправленияКорректировочного, ДатаИсправленияКорректировочного");
	
	Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
		НомераДаты.Номер = ДанныеПечати.Номер;
	Иначе
		НомераДаты.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
	КонецЕсли;
	НомераДаты.Дата  = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
	
	Если ДанныеПечати.Исправление Тогда
		Если ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 Тогда
			НомераДаты.НомерИсправленияКорректировочного = ДанныеПечати.НомерИсправления;
			НомераДаты.ДатаИсправленияКорректировочного  = Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		Иначе
			НомераДаты.НомерИсправления = ДанныеПечати.НомерИсправления;
			НомераДаты.ДатаИсправления  = Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		КонецЕсли;
	Иначе
		Если ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 Тогда
			НомераДаты.НомерИсправленияКорректировочного = "--";
			НомераДаты.ДатаИсправленияКорректировочного  = "--";
		Иначе
			НомераДаты.НомерИсправления = "--";
			НомераДаты.ДатаИсправления  = "--";
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(НомераДаты);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
	ДанныеОснований.НайтиСледующий(СтруктураПоиска);
	СтрокиОснований = ДанныеОснований.Выбрать();
	
	Если СтрокиОснований.Количество() > 1 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьОснований");
		РеквизитыОснований = "";
		Пока СтрокиОснований.Следующий() Цикл
			СтрокаИсправлениеСФ = "";
			Если ЗначениеЗаполнено(СтрокиОснований.НомерИсправленияСчетаФактуры) Тогда
				СтрокаИсправлениеСФ = ", с учетом исправления № "
					+ СтрокиОснований.НомерИсправленияСчетаФактуры 
					+ " от " 
					+ Формат(СтрокиОснований.ДатаИсправленияСчетаФактуры, "ДЛФ=ДД; ДП=--"); 
			КонецЕсли;
			
			Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
				НомерСчетаФактурыБезПрефикса = СтрокиОснований.НомерСчетаФактуры;
			Иначе
				НомерСчетаФактурыБезПрефикса = НомерСчетаФактурыНаПечать(СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения);
			КонецЕсли;
						
			РеквизитыОснований = ?(РеквизитыОснований = "", РеквизитыОснований,РеквизитыОснований + ", ") 
				+ "№ " 
				+ НомерСчетаФактурыБезПрефикса 
				+ " от " 
				+ Формат(СтрокиОснований.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--") 
				+ СтрокаИсправлениеСФ;
				
		КонецЦикла;
		ОбластьМакета.Параметры.РеквизитыОснований = РеквизитыОснований;
	ИначеЕсли СтрокиОснований.Следующий() И ЗначениеЗаполнено(СтрокиОснований.НомерСчетаФактуры) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьОснования");
		Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
			НомерСчетаФактурыБезПрефикса = СтрокиОснований.НомерСчетаФактуры;
		Иначе
			НомерСчетаФактурыБезПрефикса = НомерСчетаФактурыНаПечать(СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения);
		КонецЕсли;
		Если ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 Тогда
			ОбластьМакета.Параметры.НомерОснования = НомерСчетаФактурыБезПрефикса;
			ОбластьМакета.Параметры.ДатаОсновнания = Формат(СтрокиОснований.ДатаСчетаФактуры,"ДЛФ=ДД; ДП=--");
			ОбластьМакета.Параметры.НомерИсправленияОснования = ?(ЗначениеЗаполнено(СтрокиОснований.НомерИсправленияСчетаФактуры),
				СтрокиОснований.НомерИсправленияСчетаФактуры, "--");
			ОбластьМакета.Параметры.ДатаИсправленияОснования = Формат(СтрокиОснований.ДатаИсправленияСчетаФактуры, "ДЛФ=ДД; ДП=--");
		Иначе
			ОбластьМакета.Параметры.НомерСчетаФактуры = НомерСчетаФактурыБезПрефикса;
			ОбластьМакета.Параметры.ДатаСчетаФактуры = Формат(СтрокиОснований.ДатаСчетаФактуры,"ДЛФ=ДД; ДП=--");
			ОбластьМакета.Параметры.НомерИсправленияСчетаФактуры = ?(ЗначениеЗаполнено(СтрокиОснований.НомерИсправленияСчетаФактуры),
				СтрокиОснований.НомерИсправленияСчетаФактуры, "--");
			ОбластьМакета.Параметры.ДатаИсправленияСчетаФактуры = Формат(СтрокиОснований.ДатаИсправленияСчетаФактуры, "ДЛФ=ДД; ДП=--");
		КонецЕсли;
	Иначе
		Если ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ОбластьОснования");
			ОбластьМакета.Параметры.НомерОснования            = "--";
			ОбластьМакета.Параметры.ДатаОсновнания             = "--";
			ОбластьМакета.Параметры.НомерИсправленияОснования = "--";
			ОбластьМакета.Параметры.ДатаИсправленияОснования  = "--";
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ОбластьОснования");
			ОбластьМакета.Параметры.НомерСчетаФактуры            = "--";
			ОбластьМакета.Параметры.ДатаСчетаФактуры             = "--";
			ОбластьМакета.Параметры.НомерИсправленияСчетаФактуры = "--";
			ОбластьМакета.Параметры.ДатаИсправленияСчетаФактуры  = "--";
		КонецЕсли;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ПараметрыШапки = Новый Структура;
	ПараметрыШапки.Вставить("СтатусУКД", ДанныеПечати.СтатусУПД);
	
	// Выводим данные о поставщике.
	ПараметрыШапки.Вставить("ПредставлениеПоставщика", СведенияОПоставщике.ПолноеНаименование);
	ПараметрыШапки.Вставить("АдресПоставщика",
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
	
	ПараметрыШапки.Вставить("ИННПоставщика",
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь)
		+ ?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
	
	ПараметрыШапки.Вставить("ПредставлениеПокупателя",
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
	ПараметрыШапки.Вставить("АдресПокупателя",
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
	
	КПППокупателя = ?(ПустаяСтрока(ДанныеПечати.КПППокупателя),СведенияОПокупателе.КПП, ДанныеПечати.КПППокупателя);
	ПараметрыШапки.Вставить("ИННПокупателя",
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь)
		+ ?(Не ПустаяСтрока(КПППокупателя), "/" + КПППокупателя, ""));
	
	ПараметрыШапки.Вставить("Валюта", НСтр("ru='Российский рубль, 643'", Метаданные.Языки.Русский.КодЯзыка));
	
	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
	ПараметрыШапки.Вставить("ИдентификаторГосКонтракта", СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта);
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		ОбластьМакета.Параметры.ИдентификаторГосКонтракта = СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаУКД(ОбластьПодвала, ДанныеПечати, ДанныеОснований, СведенияОбОрганизации, СведенияОКонтрагенте, ОпцииПечати)
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика);
	ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика);
	Иначе
		ПредставлениеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ИНН,", Ложь);
	КПППокупателя = ?(ПустаяСтрока(ДанныеПечати.КПППокупателя),СведенияОКонтрагенте.КПП, ДанныеПечати.КПППокупателя);
	Если ЗначениеЗаполнено(КПППокупателя) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
			ИННПокупателя,
			КПППокупателя);
	ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'", Метаданные.Языки.Русский.КодЯзыка),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
			ИННПокупателя);
	Иначе
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь);
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	
	РеквизитыПередаточныхДокументов = "";

	Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
	
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ДанныеОснований.НайтиСледующий(СтруктураПоиска);
		СтрокиОснований = ДанныеОснований.Выбрать();
			
		Пока СтрокиОснований.СледующийПоЗначениюПоля("ИсходныйДокумент") Цикл
			Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
				НомерСчетаФактурыБезПрефикса = СтрокиОснований.НомерСчетаФактуры;
			Иначе
				НомерСчетаФактурыБезПрефикса = НомерСчетаФактурыНаПечать(СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения);
			КонецЕсли;
			РеквизитыПередаточныхДокументов = РеквизитыПередаточныхДокументов +
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ', Универсальный передаточный документ № %1 от %2'", Метаданные.Языки.Русский.КодЯзыка),
					НомерСчетаФактурыБезПрефикса,
					Формат(СтрокиОснований.ДатаСчетаФактуры, "ДЛФ=D; ДП=--"));
		КонецЦикла;
		
		Если Не ПустаяСтрока(РеквизитыПередаточныхДокументов) Тогда
			РеквизитыПередаточныхДокументов = Сред(РеквизитыПередаточныхДокументов, 3);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов);
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаУКД2_5(ОбластьПодвала, ОбластьПодвалаНакладной, ДанныеПечати, ДанныеОснований, СведенияОбОрганизации, СведенияОКонтрагенте, ОпцииПечати)
	
	ОбластьПодвалаНакладной.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
	ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика);
	ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика);
	Иначе
		ПредставлениеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ИНН,", Ложь);
	КПППокупателя = ?(ПустаяСтрока(ДанныеПечати.КПППокупателя),СведенияОКонтрагенте.КПП, ДанныеПечати.КПППокупателя);
	Если ЗначениеЗаполнено(КПППокупателя) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
			ИННПокупателя,
			КПППокупателя);
	ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'", Метаданные.Языки.Русский.КодЯзыка),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
			ИННПокупателя);
	Иначе
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь);
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	СтруктураПараметров.Вставить("ФИОРуководителяНакладная", ДанныеПечати.Руководитель);
	
	РеквизитыПередаточныхДокументов = "";

	Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
	
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ДанныеОснований.НайтиСледующий(СтруктураПоиска);
		СтрокиОснований = ДанныеОснований.Выбрать();
			
		Пока СтрокиОснований.СледующийПоЗначениюПоля("ИсходныйДокумент") Цикл
			Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
				НомерСчетаФактурыБезПрефикса = СтрокиОснований.НомерСчетаФактуры;
			Иначе
				НомерСчетаФактурыБезПрефикса = НомерСчетаФактурыНаПечать(СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения);
			КонецЕсли;
			РеквизитыПередаточныхДокументов = РеквизитыПередаточныхДокументов +
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ', Универсальный передаточный документ № %1 от %2'", Метаданные.Языки.Русский.КодЯзыка),
					НомерСчетаФактурыБезПрефикса,
					Формат(СтрокиОснований.ДатаСчетаФактуры, "ДЛФ=D; ДП=--"));
		КонецЦикла;
		
		Если Не ПустаяСтрока(РеквизитыПередаточныхДокументов) Тогда
			РеквизитыПередаточныхДокументов = Сред(РеквизитыПередаточныхДокументов, 3);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов);
	
	ОбластьПодвалаНакладной.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область Печать_Акт_на_передачу_прав

Функция СформироватьПечатнуюФормуАктНаПередачуПрав(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТНАПЕРЕДАЧУПРАВ";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыАктНаПередачуПрав(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументАктНаПередачуПрав(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиАктНаПередачуПрав(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОЛицензиаре       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетОрганизации);
	СведенияОПокупателе       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,       ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетКонтрагента);
	СведенияОЛицензиате       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,       ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузополучателя);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	СтруктураПараметров.Вставить("ДатаДокумента", ДанныеПечати.Дата);
	
	СтруктураПараметров.Вставить("ПредставлениеЛицензиара", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЛицензиаре, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураПараметров.Вставить("ПредставлениеЛицензиата", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЛицензиате));
	СтруктураПараметров.Вставить("ПредставлениеПлательщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе));
	
	Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1'"),
		СокрЛП(ДанныеПечати.Основание));
		
	Если ЗначениеЗаполнено(ДанныеПечати.Основание) Тогда
		СтруктураПараметров.Вставить("Основание", Основание);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЛицензиарНаименование", СведенияОЛицензиаре.ПолноеНаименование);
	СтруктураПараметров.Вставить("ЛицензиатНаименование", СведенияОЛицензиате.ПолноеНаименование);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Функция ЗаполнитьРеквизитыПодвалаАктНаПередачуПрав(ДанныеПечати, ИтоговыеСуммы, Макет, НомерСтраницы)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),
		НСтр("ru = 'г.'", Метаданные.Языки.Русский.КодЯзыка),
		НСтр("ru = 'года'", Метаданные.Языки.Русский.КодЯзыка));
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = СтрНайти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = СтрНайти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """");
	СтруктураПараметров.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
	СтруктураПараметров.Вставить("ДатаДокументаГод", Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
	
	// От лицензиара
	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.ДолжностьРуководителя);
	
	// Доверенность
	СтруктураПараметров.Вставить("ДоверенностьНомер", ДанныеПечати.ДоверенностьНомер);
	СтруктураПараметров.Вставить("ДоверенностьДата", Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"));
	СтруктураПараметров.Вставить("ДоверенностьВыдана", ДанныеПечати.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьЧерезКого", ДанныеПечати.ДоверенностьЛицо);
	
	СтруктураПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью);
	СтруктураПараметров.Вставить("СуммаПрописью", ИтоговыеСуммы.СуммаПрописью);
	
	КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 %2'"),
		НомерСтраницы,
		ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'", Метаданные.Языки.Русский.КодЯзыка),
			НСтр("ru = 'листах'", Метаданные.Языки.Русский.КодЯзыка),
			НСтр("ru = 'листах'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
	СтруктураПараметров.Вставить("КоличествоЛистовВПриложении", КоличествоСтраниц);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	Возврат ОбластьМакета;
	
КонецФункции

// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
//
Процедура ЗаполнитьТабличныйДокументАктНаПередачуПрав(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати) Экспорт
	
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_АктНаПередачуПрав_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.Сбросить();
		
		ВалютаРегламентированногоУчета = ВалютаРегламентированногоУчета(ДанныеПечати);
		
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют товары. Печать акта на передачу прав не требуется'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьРеквизитыШапкиАктНаПередачуПрав(ДанныеПечати, Макет, ТабличныйДокумент);
		
		НомерСтраницы = 1;
		ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтандарт   = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
			ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
		КонецЕсли;
		
		ВыводШапки = 0;
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		НомерСтроки = 0;
		Пока СтрокаТовары.Следующий() Цикл
			
			Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьМакета = ОбластьМакетаНабор;
			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьМакета = ОбластьМакетаКомплектующие;
			Иначе
				ОбластьМакета = ОбластьМакетаСтандарт;
			КонецЕсли;
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, Неопределено);
			Иначе
				НомерСтроки = НомерСтроки + 1;
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки);
			КонецЕсли;
			
			Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
				ВыводШапки = 1;
			КонецЕсли;
			
			Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
				
				ВыводШапки = 2;
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
				ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда
				ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
				ОбластьПодвала = ЗаполнитьРеквизитыПодвалаАктНаПередачуПрав(ДанныеПечати, ИтоговыеСуммы, Макет, НомерСтраницы);
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
				ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		Если ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
		КонецЕсли;
		ОбластьПодвала = ЗаполнитьРеквизитыПодвалаАктНаПередачуПрав(ДанныеПечати, ИтоговыеСуммы, Макет, НомерСтраницы);
		ТабличныйДокумент.Вывести(ОбластьПодвала);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_МХ1

Функция СформироватьПечатнуюФормуМХ1(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МХ1";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		Попытка
			ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыМХ1(ПараметрыПечати, СтруктураОбъектов.Значение);
			ЗаполнитьТабличныйДокументМХ1(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиМХ1(ДанныеПечати, ДанныеПоСкладу, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОПоклажедержателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПоСкладу.Поклажедержатель, ДанныеПечати.Дата);
	ОпределениеПоклажедателя = Новый Структура("Поклажедатель",ДанныеПечати.Организация);
	ЗаполнитьЗначенияСвойств(ОпределениеПоклажедателя,ДанныеПечати);
	СведенияОПоклажедателе    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ОпределениеПоклажедателя.Поклажедатель, ДанныеПечати.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
		ТабличныйДокумент,
		Макет,
		ОбластьМакета,
		ДанныеПечати.Ссылка);
		
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.Заполнить(ДанныеПоСкладу);
	
	СтруктураПараметров = Новый Структура;
	СписокПараметров = "ПолноеНаименование,ЮридическийАдрес,Телефоны";
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	СтруктураПараметров.Вставить("ПредставлениеПоклажедержателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоклажедержателе,СписокПараметров));
	СтруктураПараметров.Вставить("ПредставлениеПоклажедателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоклажедателе,СписокПараметров));
	СтруктураПараметров.Вставить("ПоклажедержательПоОКПО", СведенияОПоклажедержателе.КодПоОКПО);
	СтруктураПараметров.Вставить("ВидДеятельностиПоОКДП", СведенияОПоклажедержателе.КодОКВЭД);
	СтруктураПараметров.Вставить("ПоклажедательПоОКПО", СведенияОПоклажедателе.КодПоОКПО);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Функция получает данные для формирования печатной формы МХ - 1
//
// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке - РезультатЗапроса
// 		* РезультатПоСкладам - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
//
Процедура ЗаполнитьТабличныйДокументМХ1(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_МХ1_ru");
	
	ДанныеПечати         = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаДанныеПоСкладу = ДанныеДляПечати.РезультатПоСкладам.Выбрать();
	ВыборкаПоДокументам  = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.Сбросить();
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют товары. Печать акта не требуется'"),
				ДанныеПечати.Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			Продолжить;
			
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоСкладам = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура("Ссылка, Склад", ДанныеПечати.Ссылка, ВыборкаПоСкладам.Склад);
			ВыборкаДанныеПоСкладу.Сбросить();
			
			Если НЕ ВыборкаДанныеПоСкладу.НайтиСледующий(СтруктураПоиска) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ВыборкаДанныеПоСкладу.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости Тогда
				Если ВыборкаДанныеПоСкладу.ПредварительныйРасчет = Null Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось получить цены по себестоимости для документа %Документ%: на %Период% не произведен расчет себестоимости.'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДанныеПечати.Ссылка);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Формат(НачалоМесяца(ДанныеПечати.ДатаПолученияСебестоимости),"ДЛФ=DD"));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					Продолжить;
					
				ИначеЕсли ВыборкаДанныеПоСкладу.ПредварительныйРасчет Тогда
					
					ТекстСообщения = НСтр("ru = 'При печати цен документа %Документ% использовались данные предварительного расчета себестоимости.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДанныеПечати.Ссылка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			// Выводим общие реквизиты шапки
			ЗаполнитьРеквизитыШапкиМХ1(ДанныеПечати, ВыборкаДанныеПоСкладу, Макет, ТабличныйДокумент);
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			НомерСтраницы   = 1;
			
			// Инициализация итогов в документе
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
			ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
			ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
			
			НомерСтроки = 0;
			
			СтрокаТовары = ВыборкаПоСкладам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			Пока СтрокаТовары.Следующий() Цикл
				
				Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") 
					И СтрокаТовары.Организация <> ДанныеПечати.Организация Тогда
					Продолжить;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				СтруктураПараметров = Новый Структура("НомерСтроки", НомерСтроки);
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				КонецЕсли;
				
				Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
					ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					УстановитьПараметр(ЗаголовокТаблицы, "НомерСтраницы", "Страница " + НомерСтраницы);
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				
			КонецЦикла;
			
			// Выводим итоги по последней странице
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
			ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
			// Выводим итоги по документу в целом
			ОбластьВсего.Параметры.Заполнить(ИтоговыеСуммы);
			ТабличныйДокумент.Вывести(ОбластьВсего);
			
			Если ЗначениеЗаполнено(ВыборкаДанныеПоСкладу.УсловияХранения) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("УсловияХранения");
				ОбластьМакета.Параметры.Заполнить(ВыборкаДанныеПоСкладу);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("УсловияХраненияПустые");
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДанныеПоСкладу.ОсобыеОтметки) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
				ОбластьМакета.Параметры.Заполнить(ВыборкаДанныеПоСкладу);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметкиПустые");
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			// Выводим итоги по документу
			ОбластьПодвала.Параметры.Заполнить(ВыборкаДанныеПоСкладу);
			ТабличныйДокумент.Вывести(ОбластьПодвала);
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать_МХ3

Функция СформироватьПечатнуюФормуМХ3(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МХ3";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		Попытка
			ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыМХ3(ПараметрыПечати, СтруктураОбъектов.Значение);
			ЗаполнитьТабличныйДокументМХ3(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиМХ3(ДанныеПечати, ДанныеПоСкладу, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОПоклажедержателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПоСкладу.Поклажедержатель, ДанныеПечати.Дата);
	СведенияОПоклажедателе    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
		ТабличныйДокумент,
		Макет,
		ОбластьМакета,
		ДанныеПечати.Ссылка);
		
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.Заполнить(ДанныеПоСкладу);
	
	СтруктураПараметров = Новый Структура;
	СписокПараметров = "ПолноеНаименование,ЮридическийАдрес,Телефоны";
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	СтруктураПараметров.Вставить("ПредставлениеПоклажедержателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоклажедержателе,СписокПараметров));
	СтруктураПараметров.Вставить("ПредставлениеПоклажедателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоклажедателе,СписокПараметров));
	СтруктураПараметров.Вставить("ПоклажедержательПоОКПО", СведенияОПоклажедержателе.КодПоОКПО);
	СтруктураПараметров.Вставить("ВидДеятельностиПоОКДП", СведенияОПоклажедержателе.КодОКВЭД);
	СтруктураПараметров.Вставить("ПоклажедательПоОКПО", СведенияОПоклажедателе.КодПоОКПО);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке - РезультатЗапроса
// 		* РезультатПоСкладам - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
//
Процедура ЗаполнитьТабличныйДокументМХ3(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_МХ3_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ДанныеПечати          = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаДанныеПоСкладу = ДанныеДляПечати.РезультатПоСкладам.Выбрать();
	ВыборкаПоДокументам   = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.Сбросить();
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют товары. Печать акта не требуется'"),
				ДанныеПечати.Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			Продолжить;
			
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоСкладам = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура("Ссылка, Склад", ДанныеПечати.Ссылка, ВыборкаПоСкладам.Склад);
			ВыборкаДанныеПоСкладу.Сбросить();
			
			Если НЕ ВыборкаДанныеПоСкладу.НайтиСледующий(СтруктураПоиска) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ВыборкаДанныеПоСкладу.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости Тогда
				Если ВыборкаДанныеПоСкладу.ПредварительныйРасчет = Null Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось получить цены по себестоимости для документа %Документ%: на %Период% не произведен расчет себестоимости.'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДанныеПечати.Ссылка);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Формат(НачалоМесяца(ДанныеПечати.ДатаПолученияСебестоимости),"ДЛФ=DD"));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					Продолжить;
					
				ИначеЕсли ВыборкаДанныеПоСкладу.ПредварительныйРасчет Тогда
					
					ТекстСообщения = НСтр("ru = 'При печати цен документа %Документ% использовались данные предварительного расчета себестоимости.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДанныеПечати.Ссылка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			// Выводим общие реквизиты шапки
			ЗаполнитьРеквизитыШапкиМХ3(ДанныеПечати, ВыборкаДанныеПоСкладу, Макет, ТабличныйДокумент);
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			НомерСтраницы   = 1;
			
			// Инициализация итогов в документе
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
			ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
			ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
			
			НомерСтроки = 0;
			
			СтрокаТовары = ВыборкаПоСкладам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			Пока СтрокаТовары.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				СтруктураПараметров = Новый Структура("НомерСтроки", НомерСтроки);
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				КонецЕсли;
				
				Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
					ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					УстановитьПараметр(ЗаголовокТаблицы, "НомерСтраницы", "Страница " + НомерСтраницы);
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				
			КонецЦикла;
			
			// Выводим итоги по последней странице
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
			ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
			// Выводим итоги по документу в целом
			ОбластьВсего.Параметры.Заполнить(ИтоговыеСуммы);
			ТабличныйДокумент.Вывести(ОбластьВсего);
			
			// Выводим таблицу услуги
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыУслуги");
			ОбластьМакета.Параметры.Заполнить(ВыборкаДанныеПоСкладу);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаУслуги");
			Для Сч=1 По 6 Цикл
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоУслуги");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтоимостьРабот");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если ЗначениеЗаполнено(ВыборкаДанныеПоСкладу.ОсобыеОтметки) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
				ОбластьМакета.Параметры.Заполнить(ВыборкаДанныеПоСкладу);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметкиПустые");
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			// Выводим итоги по документу
			ОбластьПодвала.Параметры.Заполнить(ВыборкаДанныеПоСкладу);
			ТабличныйДокумент.Вывести(ОбластьПодвала);
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область Прочее

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

Функция СтруктураРесурсовДляИтогов()
	
	Структура = Новый Структура;
	
	Структура.Вставить("СуммаБезНДС",       0);
	Структура.Вставить("СуммаНДС",          0);
	Структура.Вставить("СуммаСНДС",         0);
	Структура.Вставить("Количество",        0);
	Структура.Вставить("КоличествоМест",    0);
	Структура.Вставить("КоличествоПринято", 0);
	Структура.Вставить("МассаБрутто",       0);
	Структура.Вставить("МассаНетто",        0);
	Структура.Вставить("Сумма",             0);
	
	Структура.Вставить("РазницаБезНДСУвеличение", 0);
	Структура.Вставить("РазницаБезНДСУменьшение", 0);
	Структура.Вставить("РазницаНДСУвеличение",    0);
	Структура.Вставить("РазницаНДСУменьшение",    0);
	Структура.Вставить("РазницаСНДСУвеличение",   0);
	Структура.Вставить("РазницаСНДСУменьшение",   0);
	
	Возврат Структура;
	
КонецФункции

Функция СведенияОГрузоотправителе(ДанныеПечати)
	
	Если ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		СведенияОГрузоотправителе = Справочники.РегистрацииВНалоговомОргане.СведенияОПодразделении(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	Иначе
		СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	КонецЕсли;
	
	Возврат СведенияОГрузоотправителе;
	
КонецФункции

Процедура ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета)

	Для Сч = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(Сч);
		
		Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(Сч, "--");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОкруглитьДоЦелого(ОкругляемоеЧисло)
	Если ЗначениеЗаполнено(ОкругляемоеЧисло) Тогда
		Если ОкругляемоеЧисло <> Цел(ОкругляемоеЧисло) Тогда
			ОкругляемоеЧисло = Цел(ОкругляемоеЧисло) + 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов)
	
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("СведенияОПокупателе");
	ТаблицаКонтрагентов.Колонки.Добавить("СведенияОГрузополучателе");
	ТаблицаКонтрагентов.Колонки.Добавить("КПП");
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН");
	
	Если ДанныеКонтрагентов <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ДанныеКонтрагентов.НайтиСледующий(СтруктураПоиска);
		ВыборкаКонтрагентов = ДанныеКонтрагентов.Выбрать();
		
		Если ВыборкаКонтрагентов.Количество() Тогда
			Пока ВыборкаКонтрагентов.Следующий() Цикл
				ДобавитьДанныеКонтрагентовВТаблицу(ТаблицаКонтрагентов, ДанныеПечати.Дата, ВыборкаКонтрагентов);
			КонецЦикла;
		Иначе
			ДобавитьДанныеКонтрагентовВТаблицу(ТаблицаКонтрагентов, ДанныеПечати.Дата, ДанныеПечати);
		КонецЕсли;
		
	Иначе
		
		ДобавитьДанныеКонтрагентовВТаблицу(ТаблицаКонтрагентов, ДанныеПечати.Дата, ДанныеПечати);
		
	КонецЕсли;
	
	Возврат ТаблицаКонтрагентов;
	
КонецФункции

Процедура ДобавитьДанныеКонтрагентовВТаблицу(ТаблицаКонтрагентов, Дата, ДанныеКонтрагента)
	
	СтрокаКонтрагента = ТаблицаКонтрагентов.Добавить();
	СтрокаКонтрагента.СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
					ДанныеКонтрагента.Контрагент, Дата);
	СтрокаКонтрагента.СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
					ДанныеКонтрагента.Грузополучатель, Дата);
		
	Если ПустаяСтрока(ДанныеКонтрагента.КПППокупателя) Тогда
		СтрокаКонтрагента.КПП = СтрокаКонтрагента.СведенияОПокупателе.КПП
	Иначе
		СтрокаКонтрагента.КПП = ДанныеКонтрагента.КПППокупателя;
	КонецЕсли;
	
	СтрокаКонтрагента.ИНН = ДанныеКонтрагента.ИННПокупателя;
	
КонецПроцедуры

Функция ВыводитьКодыТНВЭД(ДанныеПечати, ДействуетПостановление981)
	ПараметрыВывода = Новый Структура("ВыводитьВСтроке, ВыводитьВКолонке");
	
	ПараметрыВывода.ВыводитьВСтроке = ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		И УчетНДСРФ.СтранаЯвляетсяЧленомТаможенногоСоюза(ДанныеПечати.СтранаРегистрации, ДанныеПечати.Дата)
		И ДанныеПечати.Дата >= УчетНДСУП.НастройкиУчета().ДатаРазделенияЭкспорта;
	ПараметрыВывода.ВыводитьВКолонке = ПараметрыВывода.ВыводитьВСтроке И ДействуетПостановление981;
	
	Возврат ПараметрыВывода
	
КонецФункции

Функция ВедетсяУчетНДСПоФЗ56(ДатаДокумента, ДатаИсправления)
	
	НачалоПримененияФЗ56 = '20170701';
	
	Дата = ?(ЗначениеЗаполнено(ДатаИсправления),ДатаИсправления,ДатаДокумента);
	
	Если Дата < НачалоПримененияФЗ56 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ДействуетПостановление981(ДатаДокумента, ДатаИсправления)
	
	НачалоПрименения = '20171001';
	
	Дата = ?(ЗначениеЗаполнено(ДатаИсправления),ДатаИсправления,ДатаДокумента);
	
	Если Дата < НачалоПрименения Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ДействуетПостановление534(ДатаДокумента, ДатаИсправления)
	
	Возврат ?(ЗначениеЗаполнено(ДатаИсправления), ДатаИсправления, ДатаДокумента) >= '20210701';
	
КонецФункции

Функция ТаблицаПоставщиковСчетаФактуры(ДанныеПечати, ДанныеПоставщиков)
	
	ТаблицаПоставщиков = Новый ТаблицаЗначений;

	ТаблицаПоставщиков.Колонки.Добавить("СведенияОПоставщике");
	ТаблицаПоставщиков.Колонки.Добавить("СведенияОГрузоотправителе");
	ТаблицаПоставщиков.Колонки.Добавить("КПП");
	ТаблицаПоставщиков.Колонки.Добавить("ИНН");
	
	Если ДанныеПоставщиков <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ДанныеПоставщиков.НайтиСледующий(СтруктураПоиска);
		ВыборкаПоставщиков = ДанныеПоставщиков.Выбрать();
		
		Пока ВыборкаПоставщиков.Следующий() Цикл
			
			СтрокаПоставщика = ТаблицаПоставщиков.Добавить();
			СтрокаПоставщика.СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
				ВыборкаПоставщиков.Поставщик, ДанныеПечати.Дата);
			СтрокаПоставщика.СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
				ВыборкаПоставщиков.Поставщик, ДанныеПечати.Дата);
				
			Если ПустаяСтрока(ВыборкаПоставщиков.КПППоставщика) Тогда
				СтрокаПоставщика.КПП = СтрокаПоставщика.СведенияОПоставщике.КПП;
			Иначе
				СтрокаПоставщика.КПП = ВыборкаПоставщиков.КПППоставщика;
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаПоставщиков.ИННПоставщика) Тогда
				СтрокаПоставщика.ИНН = СтрокаПоставщика.СведенияОПоставщике.ИНН;
			Иначе
				СтрокаПоставщика.ИНН = ВыборкаПоставщиков.ИННПоставщика;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СтрокаПоставщика = ТаблицаПоставщиков.Добавить();
		СтрокаПоставщика.СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация, ДанныеПечати.Дата);
		СтрокаПоставщика.СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация, ДанныеПечати.Дата);
		
	КонецЕсли;
	
	Возврат ТаблицаПоставщиков;
	
КонецФункции

Функция ВалютаРегламентированногоУчета(ДанныеПечати)
	
	Если ТипЗнч(ДанныеПечати.Организация) = Тип("СправочникСсылка.Организации") Тогда
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация);
	Иначе
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Контрагент);
	КонецЕсли;
	
	Возврат ВалютаРегламентированногоУчета;
		
КонецФункции

Процедура УдалитьВсеОбластиФаксимиле(ОбластьМакета)
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	Для Каждого ЗначениеПоказателя Из МассивИменПоказателей Цикл
		ОчиститьОбластьФаксимиле(ОбластьМакета, ЗначениеПоказателя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьОбластьФаксимиле(ОбластьМакета, ИмяОбласти)
	
	ОбластьФаксимиле = ОбластьМакета.Области.Найти(ИмяОбласти);
	Если ОбластьФаксимиле <> Неопределено Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьФаксимиле.Имя);
	КонецЕсли;
	
КонецПроцедуры

Функция МассивИменПоказателейФаксимиле()
	
	МассивИменПоказателей = Новый Массив;
	МассивИменПоказателей.Добавить("ФаксимилеПечать");
	МассивИменПоказателей.Добавить("ФаксимилеПечатьПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководитель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководительНакладная");
	МассивИменПоказателей.Добавить("ФаксимилеПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеГлавныйБухгалтер");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформление");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнитель");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяУслуги");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяМатериалы");
	МассивИменПоказателей.Добавить("ФаксимилеКладовщик");
	МассивИменПоказателей.Добавить("ФаксимилеДоверенноеЛицо");
	
	Возврат МассивИменПоказателей;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
