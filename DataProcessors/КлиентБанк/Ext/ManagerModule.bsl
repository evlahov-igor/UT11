#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает данные выписки из файла.
// 
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - двоичные данные файла выписки
//  ФорматОбмена - Строка - формат файла
// 
// Возвращаемое значение:
//  Структура - данные выписки из файла:
// * Заголовок - Структура - содержит поля:
// ** Отправитель - Строка - название банка
// ** ДатаСоздания - Дата - дата создания выписки
// ** ДатаНачала - Дата - дата начала периода выписки
// ** ДатаКонца - Дата - дата окончания периода выписки
// * РасчетныеСчета - Массив из Строка - список счетов, данные по которым содержит выписка
// * ДокументыВыписки - Массив из Структура - данные операции 
// * ОшибкиРазбора - Массив из Строка - ошибки, обнаруженные при чтении выписки
// * СписокСчетов - Массив из Строка - список счетов, данные по которым содержит выписка.
Функция ПрочитатьДанныеВыпискиИзФайла(ДвоичныеДанные, ФорматОбмена) Экспорт
	
	ДанныеВыписки = Новый Структура;
	ДанныеВыписки.Вставить("Заголовок", ДенежныеСредстваСервер.ЗаголовокВыписки());
	ДанныеВыписки.Вставить("РасчетныеСчета", Новый Массив);
	ДанныеВыписки.Вставить("ДокументыВыписки", Новый Массив);
	ДанныеВыписки.Вставить("ОшибкиРазбора", Новый Массив);
	
	Если ФорматОбмена = "ISO20022" Тогда
		ПрочитатьДанныеВыпискиISO20022(ДвоичныеДанные, ДанныеВыписки)
	Иначе
		КлиентБанкЛокализация.ПрочитатьВыпискуИзФайла(ДвоичныеДанные, ФорматОбмена, ДанныеВыписки);
	КонецЕсли;
		
	ДанныеВыписки.Заголовок.Вставить("ВремяСоздания", "");
	ДанныеВыписки.Вставить("СписокСчетов", Новый Массив);
	ДокументыВыписки = Новый Массив;
	Для Каждого Элемент Из ДанныеВыписки.РасчетныеСчета Цикл
		ДанныеВыписки.СписокСчетов.Добавить(Элемент.РасчСчет);
	КонецЦикла;
	ДанныеВыписки.РасчетныеСчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеВыписки.РасчетныеСчета);
	Для Каждого Элемент Из ДанныеВыписки.ДокументыВыписки Цикл
		ДанныеОперации = ДенежныеСредстваКлиентСервер.ТегиСтрокиДокумента();
		ЗаполнитьЗначенияСвойств(ДанныеОперации, Элемент);
		ДанныеОперации.Вставить("ДатаПроведения", Элемент.ДатаОперации);
		Если Элемент.НаправлениеПлатежа = "1" Тогда
			ДанныеОперации.Вставить("Списано", Элемент.ДатаОперации);
			ДанныеОперации.ДатаСписано = Формат(Элемент.ДатаОперации, "ДЛФ=D;");
		Иначе
			ДанныеОперации.Вставить("Поступило", Элемент.ДатаОперации);
			ДанныеОперации.ДатаПоступило = Формат(Элемент.ДатаОперации, "ДЛФ=D;");
		КонецЕсли;
		ДанныеОперации.ПлательщикСВИФТ = Элемент.ПлательщикБанкSWIFT;
		ДанныеОперации.ПлательщикБанк1 = Элемент.ПлательщикБанк;
		ДанныеОперации.ПолучательСВИФТ = Элемент.ПолучательБанкSWIFT;
		ДанныеОперации.ПолучательБанк1 = Элемент.ПолучательБанк;
		Если ЗначениеЗаполнено(Элемент.Дата) Тогда
			ДанныеОперации.Вставить("ДатаДок", Элемент.Дата);
			ДанныеОперации.Дата = Формат(Элемент.Дата, "ДЛФ=D;");
		КонецЕсли;
		ДокументыВыписки.Добавить(ДанныеОперации);
	КонецЦикла;
	ДанныеВыписки.ДокументыВыписки = ДокументыВыписки;
	Возврат ДанныеВыписки;
	
КонецФункции

// Формирует таблицу банковских счетов с настройками обмена
//
// Параметры:
//    Загрузка - Булево - Признак подготовки счетов для загрузки или для выгрузки платежей.
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица банковских счетов.
//
Функция ТаблицаСчетов(Загрузка = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНастройкиСчетов();
	Запрос.УстановитьПараметр("Загрузка", Загрузка);
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов;
	
КонецФункции

// Формирует таблицу документов к выгрузке в банк
//
// Параметры:
//    МассивСчетов - Массив - счета для отбора платежей к выгрузке
//    ДатаНачала - Дата - Начало периода выборки документов
//    ДатаКонца - Дата - Конец периода выборки документов
//    ТолькоНевыгруженные - Булево - Признак отбора только не выгруженных ранее платежей.
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица документов.
//
Функция ТаблицаДокументовКВыгрузке(
	МассивСчетов = Неопределено,
	ДатаНачала = '00010101',
	ДатаКонца = '00010101',
	ТолькоНевыгруженные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДокументыКВыгрузке();
	
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", ДатаКонца);
	Запрос.УстановитьПараметр("ТолькоНевыгруженные", ТолькоНевыгруженные);
	
	ПоляПлатежа = ИнициализироватьПоляПлатежа();
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	ПакетЗапросов = Схема.ПакетЗапросов[2]; // ЗапросВыбораСхемыЗапроса
	ПоляЗапроса = ПакетЗапросов.Колонки;
	
	Для каждого КлючИЗначение Из ПоляПлатежа Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ПолеЗапроса = ПоляЗапроса.Найти(КлючИЗначение.Значение);
			Если ПолеЗапроса <> Неопределено Тогда
				ПолеЗапроса.Псевдоним = КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

// Выгружает платежи в файл
//
// Параметры:
//    ПараметрыВыгрузки - Структура - Параметры выгрузки платежей
//    АдресХранилища - УникальныйИдентификатор - адрес временного хранилища, куда будут помещены данные выгрузки.
//
Процедура Выгрузить(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	Если ПараметрыВыгрузки.ФорматОбмена = "ISO20022" Тогда
		ВыгрузитьПлатежиВISO20022(ПараметрыВыгрузки, АдресХранилища);
	ИначеЕсли ПараметрыВыгрузки.ФорматОбмена = "1CClientBankExchange" Тогда
		ВыгрузитьПлатежиВ1CClientBankExchange(ПараметрыВыгрузки, АдресХранилища);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыВыгрузки.ФорматОбмена) Тогда
		ДвоичныеДанныеФайла = Неопределено;
		КлиентБанкЛокализация.ВыгрузитьДокументыВФайл(
			ПараметрыВыгрузки.ТаблицаДокументов, ПараметрыВыгрузки.ФорматОбмена, ДвоичныеДанныеФайла);
		ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, АдресХранилища);
	Иначе
		ШаблонСообщения = НСтр("ru = 'В банковском счете %1 не указан формат обмена для выгрузки данных.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПараметрыВыгрузки.БанковскийСчет);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыВыгрузки.БанковскийСчет);
	КонецЕсли;
	
КонецПроцедуры

// Загружает платежи в базу
//
// Параметры:
//    ПараметрыЗагрузки - Структура - Параметры выгрузки платежей.
//    АдресХранилища - Строка - Адрес, по которому буде помещена таблица с загруженными документами
//
Процедура Загрузить(ПараметрыЗагрузки, АдресХранилища) Экспорт
	
	ЗамерПроизводительности = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Обработка.КлиентБанк.МодульМенеджера.Загрузить");
	
	//++ Локализация
	Если ПараметрыЗагрузки.ПрямойОбмен Тогда
		ДанныеВыписки = РазобратьДеревоВыписки(ПараметрыЗагрузки.СтрокиВыписки);
	Иначе
	//-- Локализация
		Если ПараметрыЗагрузки.ФорматОбмена = "1CClientBankExchange" Тогда
			ДанныеВыписки = ДенежныеСредстваКлиентСервер.РазобратьФайлВыписки1CClientBankExchange(
				ПараметрыЗагрузки.СтрокиВыписки);
		Иначе
			ДанныеВыписки = Обработки.КлиентБанк.ПрочитатьДанныеВыпискиИзФайла(
				ПараметрыЗагрузки.СтрокиВыписки, ПараметрыЗагрузки.ФорматОбмена);
		КонецЕсли;
	//++ Локализация
	КонецЕсли;
	//-- Локализация
	
	Если ДанныеВыписки <> Неопределено Тогда
		
		БанковскийСчет = ПараметрыЗагрузки.БанковскийСчет;
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
		Валюта = РеквизитыСчета.Валюта;
		НомерСчета = СокрЛП(РеквизитыСчета.НомерСчета);
		
		РегистрыСведений.ПоследнийОбменСБанками.СоздатьЗапись(
			БанковскийСчет, Новый Структура("ДатаНачалаЗагрузки, ДатаКонцаЗагрузки",
				ПараметрыЗагрузки.ДатаНачалаЗагрузки, ПараметрыЗагрузки.ДатаКонцаЗагрузки));
				
		ЗаписатьОстаткиНаСчетахПоДаннымВыписки(
			БанковскийСчет, НомерСчета, ДанныеВыписки, ПараметрыЗагрузки.ДатаНачалаЗагрузки, ПараметрыЗагрузки.ДатаКонцаЗагрузки);
		
		ДокументыВыписки = ДанныеВыписки.ДокументыВыписки;
		ДокументыКЗагрузке = ПараметрыЗагрузки.ДокументыКЗагрузке;
		
		Если Не ДокументыВыписки.Количество() Тогда
			ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерПроизводительности, 0);
			Возврат;
		КонецЕсли;
		
		НомерСтроки = 0;
		Для каждого ДокументВыписки Из ДокументыВыписки Цикл
			ДокументКЗагрузке = ДокументыКЗагрузке.Добавить();
			ЗаполнитьЗначенияСвойств(ДокументКЗагрузке, ДокументВыписки);
			ДокументКЗагрузке.БанковскийСчет = БанковскийСчет;
			ДокументКЗагрузке.Валюта = Валюта;
			ДокументКЗагрузке.Загружать = Истина;
			ДокументКЗагрузке.СоздаватьКонтрагента = Истина;
			ДокументКЗагрузке.НомерСокр = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(ДокументКЗагрузке.Номер);
			ДокументКЗагрузке["НомерСтроки"] = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ПодготовитьСтрокиВыписки(ДокументыКЗагрузке, БанковскийСчет, НомерСчета);
		ОбновитьДокументы(ДокументыКЗагрузке, БанковскийСчет, ПараметрыЗагрузки.СоздаватьКонтрагентов, ПараметрыЗагрузки.ПроводитьДокументы);
		СоздатьДокументы(ДокументыКЗагрузке, БанковскийСчет, ПараметрыЗагрузки.СоздаватьКонтрагентов, ПараметрыЗагрузки.ПроводитьДокументы);
		СнятьПризнакПроведения(ДокументыКЗагрузке, БанковскийСчет, ДанныеВыписки.Заголовок);
		
		ДатыРасчета = Новый Массив;
		Для каждого ДокументКЗагрузке Из ДокументыКЗагрузке Цикл
			Если Не ДокументКЗагрузке.Исходящий И ДатыРасчета.Найти(ДокументКЗагрузке.ДатаДок) = Неопределено Тогда
				ДатыРасчета.Добавить(НачалоДня(ДокументКЗагрузке.ДатаДок));
			КонецЕсли;
		КонецЦикла;
		РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоОжидаемымПоступлениямДенежныхСредств(ДатыРасчета);
		
		Отбор = Новый Структура("Загружать", Истина);
		СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
		ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(СтрокиКЗагрузке);
		
		ПоместитьВоВременноеХранилище(ТаблицаДокументов, АдресХранилища);
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерПроизводительности, ДокументыВыписки.Количество());
	Иначе
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерПроизводительности, 1);
	КонецЕсли;
	
КонецПроцедуры

// Создает элемент справочника "Контрагенты"
//
// Параметры:
//    ДокументыКЗагрузке - ТаблицаЗначений - Таблица документов выписки
//    СтрокаДокумента - СтрокаТаблицыЗначений - Содержит описание контрагента и связанных данных.
//
// Возвращаемое значение:
//    СправочникСсылка.Контрагенты - Ссылка на новый элемент справочника.
//
Функция СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтрокаДокумента.Исходящий Тогда
		
		ИмяКолонкиНаименованиеМеждународное = "ПОЛУЧАТЕЛЬНаименованиеМеждународное";
		ИмяКолонкиИНН    = "ПОЛУЧАТЕЛЬИНН";
		ИмяКолонкиКПП    = "ПОЛУЧАТЕЛЬКПП";
		ИмяКолонкиСтрана = "ПОЛУЧАТЕЛЬСтрана";
		
	Иначе
		
		ИмяКолонкиНаименованиеМеждународное = "ПЛАТЕЛЬЩИКНаименованиеМеждународное";
		ИмяКолонкиИНН = "ПЛАТЕЛЬЩИКИНН";
		ИмяКолонкиКПП = "ПЛАТЕЛЬЩИККПП";
		ИмяКолонкиСтрана = "ПЛАТЕЛЬЩИКСтрана";	
		
	КонецЕсли;
	
	СтруктураНаименования = ДенежныеСредстваСерверЛокализация.НаименованиеОрганизации(СтрокаДокумента.ИмяКонтрагента);
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Наименование              = СтруктураНаименования.СокращенноеНаименование;
	НовыйКонтрагент.НаименованиеПолное        = СтрокаДокумента.ИмяКонтрагента;
	НовыйКонтрагент.НаименованиеМеждународное = СтрокаДокумента[ИмяКолонкиНаименованиеМеждународное];
	НовыйКонтрагент.ИНН                       = СтрокаДокумента[ИмяКолонкиИНН];
	НовыйКонтрагент.КПП                       = СтрокаДокумента[ИмяКолонкиКПП];
	НовыйКонтрагент.СтранаРегистрации         = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", СтрокаДокумента[ИмяКолонкиСтрана]);

	Если Не ЗначениеЗаполнено(НовыйКонтрагент.СтранаРегистрации) Тогда
		НовыйКонтрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	Если СтрДлина(НовыйКонтрагент.ИНН) = 10 Тогда
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	ИначеЕсли ЗначениеЗаполнено(НовыйКонтрагент.СтранаРегистрации)
		И НовыйКонтрагент.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	Иначе
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
	КонецЕсли;
	
	НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
	НовыйПартнер.Клиент = Истина;
	НовыйПартнер.Поставщик = Истина;
	НовыйПартнер.ПрочиеОтношения = Истина;
	НовыйПартнер.ДатаРегистрации = ТекущаяДатаСеанса();
	НовыйПартнер.Комментарий = НСтр("ru = '#Создан автоматически при импорте банковских документов'");
	НовыйПартнер.Наименование = НовыйКонтрагент.Наименование;
	НовыйПартнер.НаименованиеПолное = НовыйКонтрагент.НаименованиеПолное;
	НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	НовыйПартнер.Записать();
	
	НовыйКонтрагент.Партнер = НовыйПартнер.Ссылка;
	
	НовыйКонтрагент.Записать();
	
	СтрокаДокумента.Контрагент = НовыйКонтрагент.Ссылка;
	СтрокаДокумента.Партнер = НовыйКонтрагент.Партнер;
	
	// Нужно подставить нового контрагента и партнера в другие строки выписки
	Если Не ПустаяСтрока(НовыйКонтрагент.ИНН) Тогда
		ПолеПоиска = ИмяКолонкиИНН;
		ЗначениеПоиска = НовыйКонтрагент.ИНН;
	Иначе
		ПолеПоиска = "ИмяКонтрагента";
		ЗначениеПоиска = СтрокаДокумента.ИмяКонтрагента;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(
		ПолеПоиска + ", БанковскийСчет, Исходящий",
		ЗначениеПоиска, СтрокаДокумента.БанковскийСчет, СтрокаДокумента.Исходящий);
	ЗаписиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(СтруктураПоиска);
	
	Для каждого ЗаписьКонтрагента Из ЗаписиКонтрагента Цикл
		ЗаписьКонтрагента.Контрагент = НовыйКонтрагент.Ссылка;
		ЗаписьКонтрагента.Партнер = НовыйКонтрагент.Партнер;
	КонецЦикла;
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

// Создает элемент справочника "БанковскиеСчетаКонтрагентов"
//
// Параметры:
//    ДокументыКЗагрузке - ТаблицаЗначений - Таблица документов выписки
//    СтрокаДокумента - СтрокаТаблицыЗначений - Содержит описание счета и связанных данных
//    ВладелецСчета - СправочникСсылка.Контрагенты - Контрагент - владелец счета.
//
// Возвращаемое значение:
//    СправочникСсылка.БанковскиеСчетаКонтрагентов - Ссылка на новый элемент справочника.
//
Функция СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ВладелецСчета) Экспорт
	
	
	Если СтрокаДокумента.Исходящий Тогда
		
		ИмяКолонкиСчет              = "ПОЛУЧАТЕЛЬСЧЕТ";
		ИмяКолонкиПрямыеРасчеты     = "ПОЛУЧАТЕЛЬ2";
		ИмяКолонкиНаименованиеБанкаНеПрямыеРасчеты     = "ПОЛУЧАТЕЛЬ3";
		ИмяКолонкиГородБанкаНеПрямыеРасчеты     = "ПОЛУЧАТЕЛЬ4";
		ИмяКолонкиБИК               = "ПОЛУЧАТЕЛЬБИК";
		ИмяКолонкиКорСчет           = "ПОЛУЧАТЕЛЬКОРСЧЕТ";
		ИмяКолонкиРасчСчет          = "ПОЛУЧАТЕЛЬРАСЧСЧЕТ";
		ИмяКолонкиКодСтраныБанка    = "ПОЛУЧАТЕЛЬБАНК5";
		ИмяКолонкиСВИФТ             = "ПОЛУЧАТЕЛЬСВИФТ";
		ИмяКолонкиНаименованиеБанка = "ПОЛУЧАТЕЛЬБАНК1";
		ИмяКолонкиГородБанка        = "ПОЛУЧАТЕЛЬБАНК2";
		
	Иначе
		
		ИмяКолонкиСчет              = "ПЛАТЕЛЬЩИКСЧЕТ";
		ИмяКолонкиПрямыеРасчеты     = "ПЛАТЕЛЬЩИК2";
		ИмяКолонкиНаименованиеБанкаНеПрямыеРасчеты     = "ПЛАТЕЛЬЩИК3";
		ИмяКолонкиГородБанкаНеПрямыеРасчеты     = "ПЛАТЕЛЬЩИК4";
		ИмяКолонкиБИК               = "ПЛАТЕЛЬЩИКБИК";
		ИмяКолонкиКорСчет           = "ПЛАТЕЛЬЩИККОРСЧЕТ";
		ИмяКолонкиРасчСчет          = "ПЛАТЕЛЬЩИКРАСЧСЧЕТ";
		ИмяКолонкиКодСтраныБанка    = "ПЛАТЕЛЬЩИКБАНК5";
		ИмяКолонкиСВИФТ             = "ПЛАТЕЛЬЩИКСВИФТ";
		ИмяКолонкиНаименованиеБанка = "ПЛАТЕЛЬЩИКБАНК1";
		ИмяКолонкиГородБанка        = "ПЛАТЕЛЬЩИКБАНК2";
		
	КонецЕсли;
	
	ТипКонтрагента = ?(СтрокаДокумента.Исходящий, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	НомерСчета = СтрокаДокумента[ИмяКолонкиСчет];
	Если Не ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
	НовыйСчет.Владелец = ВладелецСчета;
	НовыйСчет.ВалютаДенежныхСредств = СтрокаДокумента.Валюта;
	
	ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ИмяКолонкиПрямыеРасчеты]);
	НовыйСчет.НомерСчета = НомерСчета;
	
	Если ПрямыеРасчеты Тогда
		
		// Банк контрагента
		БикБанка       = СтрокаДокумента[ИмяКолонкиБИК];
		КоррСчетБанка  = СтрокаДокумента[ИмяКолонкиКорСчет];
		
		Банк = Неопределено;
		Если Не ПустаяСтрока(БикБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоКоду(БикБанка);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Банк) И Не ПустаяСтрока(КоррСчетБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчетБанка);
		КонецЕсли;
		
		КодСтраныБанка = СтрокаДокумента[ИмяКолонкиКодСтраныБанка];
		Если ЗначениеЗаполнено(КодСтраныБанка) Тогда
			СтранаБанка = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", КодСтраныБанка);
			Если ЗначениеЗаполнено(СтранаБанка) И СтранаБанка <> Справочники.СтраныМира.Россия Тогда
				НовыйСчет.ИностранныйБанк = Истина;
			КонецЕсли;
			НовыйСчет.СтранаБанка = СтранаБанка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Банк) Тогда
			НовыйСчет.Банк = Банк;
		Иначе
			НовыйСчет.РучноеИзменениеРеквизитовБанка = Истина;
			НовыйСчет.БИКБанка           = СтрокаДокумента[ИмяКолонкиБИК];
			НовыйСчет.СВИФТБанка         = СтрокаДокумента[ИмяКолонкиСВИФТ];
			НовыйСчет.НаименованиеБанка  = СтрокаДокумента[ИмяКолонкиНаименованиеБанка];
			НовыйСчет.ГородБанка         = СтрокаДокумента[ИмяКолонкиГородБанка];
			НовыйСчет.КоррСчетБанка      = СтрокаДокумента[ИмяКолонкиКорСчет];
		КонецЕсли;
		
	Иначе
		
		// Банк контрагента
		НаимБанка      = СтрокаДокумента[ИмяКолонкиНаименованиеБанкаНеПрямыеРасчеты];
		КоррСчетБанка  = СтрокаДокумента[ИмяКолонкиРасчСчет];
		
		Банк = Неопределено;
		Если Не ПустаяСтрока(НаимБанка) И Не ПустаяСтрока(КоррСчетБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчетБанка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Банк) Тогда
			НовыйСчет.Банк = Банк;
		Иначе
			НовыйСчет.РучноеИзменениеРеквизитовБанка = Истина;
			НовыйСчет.НаименованиеБанка  = НаимБанка;
			НовыйСчет.ГородБанка         = СтрокаДокумента[ИмяКолонкиГородБанкаНеПрямыеРасчеты];
			НовыйСчет.КоррСчетБанка      = КоррСчетБанка;
		КонецЕсли;
		
		// РЦ банка контрагента
		РЦБанка         = СтрокаДокумента[ИмяКолонкиНаименованиеБанка];
		БикРЦБанка      = СтрокаДокумента[ИмяКолонкиБИК];
		КоррСчетРЦБанка = СтрокаДокумента[ИмяКолонкиКорСчет];
		
		РЦБанк = Неопределено;
		Если Не ПустаяСтрока(РЦБанка) И Не ПустаяСтрока(БикРЦБанка) Тогда
			РЦБанк = Справочники.КлассификаторБанков.НайтиПоКоду(БикРЦБанка);
			Если Не ЗначениеЗаполнено(РЦБанк) Тогда
				РЦБанк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчетРЦБанка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РЦБанк) Тогда
			НовыйСчет.БанкДляРасчетов = РЦБанк;
		Иначе
			НовыйСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина;
			НовыйСчет.НаименованиеБанкаДляРасчетов  = РЦБанка;
			НовыйСчет.ГородБанкаДляРасчетов         = СтрокаДокумента[ИмяКолонкиГородБанка];
			НовыйСчет.БИКБанкаДляРасчетов           = БикРЦБанка;
			НовыйСчет.КоррСчетБанкаДляРасчетов      = КоррСчетРЦБанка;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйСчет.РучноеИзменениеРеквизитовБанка Тогда
		СтрокаНаименования = Прав(СокрЛП(НовыйСчет.НомерСчета), 4)
			+ ?(ЗначениеЗаполнено(НовыйСчет.НаименованиеБанка), " в " + Строка(НовыйСчет.НаименованиеБанка), "")
			+ " (" + Строка(НовыйСчет.ВалютаДенежныхСредств) + ")";
	Иначе
		СтрокаНаименования = Прав(СокрЛП(НовыйСчет.НомерСчета), 4) 
			+ ?(ЗначениеЗаполнено(НовыйСчет.Банк), " в " + Строка(НовыйСчет.Банк), "")
			+ " (" + Строка(НовыйСчет.ВалютаДенежныхСредств) + ")";
	КонецЕсли;
	
	НовыйСчет.Наименование = Лев(СтрокаНаименования, 150);
	
	НовыйСчет.Записать();
	
	// Нужно подставить новый счет в другие строки выписки
	СтруктураПоиска = Новый Структура(
		ИмяКолонкиСчет + ", Контрагент, БанковскийСчет",
		НовыйСчет.НомерСчета, ВладелецСчета, СтрокаДокумента.БанковскийСчет);
	
	ЗаписиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(СтруктураПоиска);
	
	Для каждого ЗаписьКонтрагента Из ЗаписиКонтрагента Цикл
		ЗаписьКонтрагента.СчетКонтрагента = НовыйСчет.Ссылка;
	КонецЦикла;
	
	Возврат НовыйСчет.Ссылка;
	
КонецФункции

// Заполняет значение поля из таблицы данных контрагента.
// 
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - данные, содержащие Наименование и КПП контрагента.
//  ТекущееЗначение - Строка - значение поля, которое следует заполнить.
//  Документ - ДокументСсылка - документ, по которому выполняется заполнение.
//  Признак - Число - признак, определяющий выбор реквизита из таблицы данных контрагента ТаблицаДанных: 0 - Наименование,
//                    1 - КПП.
//
Процедура ЗаполнитьДанныеКонтрагента(ТаблицаДанных, ТекущееЗначение, Документ, Признак) Экспорт

	Отбор = Новый Структура("Документ, Признак", Документ, Признак);
	ДанныеКонтрагента = ТаблицаДанных.НайтиСтроки(Отбор);
	ТекущееЗначение = ?(ТекущееЗначение <> "", ТекущееЗначение,
						?(ДанныеКонтрагента.Количество() > 0, ДанныеКонтрагента[0].ЗначениеРеквизита, ""));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаНастройкиСчетов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка                            КАК Ссылка,
	|	БанковскиеСчета.Владелец                          КАК Организация,
	|	БанковскиеСчета.Наименование                      КАК Наименование,
	|	БанковскиеСчета.НомерСчета                        КАК НомерСчета,
	|	
	//++ Локализация
	|	БанковскиеСчета.ИспользоватьПрямойОбменСБанком    КАК ПрямойОбмен,
	//-- Локализация
	|	БанковскиеСчета.ИспользоватьОбменСБанком          КАК ОбменЧерезФайл,
	|	
	|	ВЫБОР
	//++ Локализация
	|		КОГДА БанковскиеСчета.ИспользоватьПрямойОбменСБанком ТОГДА
	|			ЕСТЬNULL(СоглашениеЭД.Ссылка, ЗНАЧЕНИЕ(Справочник.НастройкиОбменСБанками.ПустаяСсылка))
	//-- Локализация
	|		КОГДА БанковскиеСчета.ИспользоватьОбменСБанком ТОГДА
	|			ВЫБОР КОГДА &Загрузка ТОГДА
	|				БанковскиеСчета.ФайлЗагрузки
	|			ИНАЧЕ
	|				БанковскиеСчета.ФайлВыгрузки
	|			КОНЕЦ
	|	КОНЕЦ КАК НастройкаОбмена,
	|	ВЫРАЗИТЬ("""" КАК Строка(255)) КАК ПредставлениеНастройкиОбмена,
	|
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ИспользоватьОбменСБанком ТОГДА
	|			ВЫБОР КОГДА &Загрузка ТОГДА
	|				БанковскиеСчета.ФайлЗагрузки
	|			ИНАЧЕ
	|				БанковскиеСчета.ФайлВыгрузки
	|			КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ("""" КАК Строка(255))
	|	КОНЕЦ КАК ПравилоФайловогоОбменаСБанками,
		//++ Локализация
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ФорматОбмена = """" ТОГДА
	|			""1CClientBankExchange""
	|		ИНАЧЕ
		//-- Локализация
	|			БанковскиеСчета.ФорматОбмена
		//++ Локализация
	|	КОНЕЦ
		//-- Локализация
	|		КАК ФорматОбмена,
	|	БанковскиеСчета.ВерсияФорматаВыгрузки             КАК ВерсияФорматаВыгрузки,
	|	БанковскиеСчета.Кодировка                         КАК Кодировка,
	|	БанковскиеСчета.Программа                         КАК Программа,
	|	
	|	0                                                 КАК КВыгрузке,
	|	
	|	ПоследнийОбменСБанками.ДатаВыгрузки               КАК ДатаПоследнейВыгрузки,
	|	ПоследнийОбменСБанками.ДатаНачалаЗагрузки         КАК ДатаНачалаПоследнейЗагрузки,
	|	ПоследнийОбменСБанками.ДатаКонцаЗагрузки          КАК ДатаКонцаПоследнейЗагрузки,
	|	НЕОПРЕДЕЛЕНО                                      КАК ДатаНачалаЗагрузки,
	|	НЕОПРЕДЕЛЕНО                                      КАК ДатаКонцаЗагрузки,
	|	ВЫРАЗИТЬ("""" КАК Строка(30))                     КАК ПоследняяВыписка,
	|	
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.БИКБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИКБанка,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.НаименованиеБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк
	|	КОНЕЦ КАК Банк,
	//++ Локализация
	|	ЛОЖЬ                                              КАК ЕстьВозможностьПрямогоОбмена,
	//-- Локализация
	|	БанковскиеСчета.Закрыт                            КАК Закрыт
	|	
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиОбменСБанками КАК СоглашениеЭД
	|	ПО
	|		БанковскиеСчета.ИспользоватьПрямойОбменСБанком
	|		И БанковскиеСчета.Владелец = СоглашениеЭД.Организация
	|		И БанковскиеСчета.Банк = СоглашениеЭД.Банк
	|		И НЕ СоглашениеЭД.Недействительна 
	//-- Локализация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПоследнийОбменСБанками КАК ПоследнийОбменСБанками
	|	ПО
	|		ПоследнийОбменСБанками.БанковскийСчет = БанковскиеСчета.Ссылка
	|	
	|ГДЕ
	|	БанковскиеСчета.ОбменСБанкомВключен
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И НЕ БанковскиеСчета.Закрыт
	|	
	|УПОРЯДОЧИТЬ ПО
	|	БанковскиеСчета.Наименование
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДокументыКВыгрузке()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БезналичныеДенежныеСредства.Регистратор КАК Ссылка
	|
	|ПОМЕСТИТЬ ПлатежныеПоручения
	|
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК БезналичныеДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.Ссылка = БезналичныеДенежныеСредства.Регистратор
	|	
	|ГДЕ
	|	БезналичныеДенежныеСредства.КСписанию <> 0
	|	И (БезналичныеДенежныеСредства.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|		ИЛИ &ДатаКонца = ДАТАВРЕМЯ(1,1,1) И БезналичныеДенежныеСредства.Период >= &ДатаНачала)
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.ТипПлатежногоДокумента В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	//++ Локализация
	|		,ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже)
	//-- Локализация
	|	)
	|	И ДанныеДокумента.БанковскийСчет В(&МассивСчетов)
	|	И (ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1) ИЛИ НЕ &ТолькоНевыгруженные)
	|	
	|СГРУППИРОВАТЬ ПО
	|	БезналичныеДенежныеСредства.Регистратор
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БезналичныеДенежныеСредства.Регистратор КАК Ссылка
	|
	|ПОМЕСТИТЬ ПлатежныеТребования
	|
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК БезналичныеДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.Ссылка = БезналичныеДенежныеСредства.Регистратор
	|	
	|ГДЕ
	|	БезналичныеДенежныеСредства.КЗачислению <> 0
	|	И (БезналичныеДенежныеСредства.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|		ИЛИ &ДатаКонца = ДАТАВРЕМЯ(1,1,1) И БезналичныеДенежныеСредства.Период >= &ДатаНачала)
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|	И ДанныеДокумента.БанковскийСчет В(&МассивСчетов)
	|	И (ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1) ИЛИ НЕ &ТолькоНевыгруженные)
	|	
	|СГРУППИРОВАТЬ ПО
	|	БезналичныеДенежныеСредства.Регистратор
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса
		+ ТекстЗапросаПлатежныеПорученияТретьиЛица() + "ОБЪЕДИНИТЬ ВСЕ"
		+ ТекстЗапросаПлатежныеПорученияВнутренние() + "ОБЪЕДИНИТЬ ВСЕ"
		+ ТекстЗапросаПлатежныеПорученияПереводы() + "ОБЪЕДИНИТЬ ВСЕ"
		+ ТекстЗапросаПлатежныеТребованияТретьиЛица() + "ОБЪЕДИНИТЬ ВСЕ"
		+ ТекстЗапросаПлатежныеТребованияВнутренние() + "ОБЪЕДИНИТЬ ВСЕ"
		+ ТекстЗапросаКонвертацияВалюты()
		;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеПорученияТретьиЛица() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетКонтрагента             КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	ДанныеДокумента.ВидПлатежа                            КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	ДанныеДокумента.ТипКомиссииЗаПеревод                  КАК ТипКомиссииЗаПеревод,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипКомиссииЗаПеревод)   КАК ТипКомиссииЗаПереводНаименование,
	|	ДанныеДокумента.ИнформацияДляРегулирующихОрганов      КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) = """" ТОГДА
	|			ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|					ТОГДА ДанныеДокумента.Организация.Наименование
	|				ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ДанныеДокумента.ТекстПлательщика
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) = """" ТОГДА
	|			ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|					ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|				ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ДанныеДокумента.ТекстПлательщика
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеМеждународное
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ИННПлательщика = """" ТОГДА
	|			ДанныеДокумента.Организация.ИНН
	|		ИНАЧЕ
	|			ДанныеДокумента.ИННПлательщика
	|	КОНЕЦ КАК ОрганизацияИНН,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КПППлательщика = """" ТОГДА
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.РегистрацияВНалоговомОргане В (
	|					"""",
//++ Локализация
	|					ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка),
//-- Локализация
	|					НЕОПРЕДЕЛЕНО)
	|				ТОГДА ДанныеДокумента.Организация.КПП
//++ Локализация
	|				ИНАЧЕ ДанныеДокумента.РегистрацияВНалоговомОргане.КПП
//-- Локализация
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ДанныеДокумента.КПППлательщика
	|	КОНЕЦ КАК ОрганизацияКПП,
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	
	|	&ДанныеБанковскогоСчетаОрганизации,
	
	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику) ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)) ТОГДА
	|			БанковскиеСчетаКонтрагентов.Владелец
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент
	|	КОНЕЦ КАК Контрагент,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.ЮрФизЛицо
	|	КОНЕЦ КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику) ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)) ТОГДА
	|			БанковскиеСчетаКонтрагентов.Владелец.Наименование
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.Наименование
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК Строка(255)) = """" ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|				И ТИПЗНАЧЕНИЯ(БанковскиеСчетаКонтрагентов.Владелец) = ТИП(Справочник.ФизическиеЛица)
	|			ТОГДА
	|				ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|			КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)) ТОГДА
	|				ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.Владелец КАК Справочник.Контрагенты).НаименованиеПолное
	|			ИНАЧЕ
	|				ДанныеДокумента.Контрагент.НаименованиеПолное
	|			КОНЕЦ
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|			И ТИПЗНАЧЕНИЯ(БанковскиеСчетаКонтрагентов.Владелец) = ТИП(Справочник.ФизическиеЛица) 
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)) ТОГДА
	|			ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.Владелец КАК Справочник.Контрагенты).НаименованиеМеждународное
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.НаименованиеМеждународное
	|	КОНЕЦ КАК КонтрагентНаименованиеМеждународное,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.ИННКорреспондента = """" ТОГДА
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику) ТОГДА
	|					ДанныеДокумента.ПодотчетноеЛицо.ИНН
	|				КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)) ТОГДА
	|					БанковскиеСчетаКонтрагентов.Владелец.ИНН
	|				ИНАЧЕ
	|					ДанныеДокумента.Контрагент.ИНН
	|			КОНЕЦ
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ИННКорреспондента
	|	КОНЕЦ КАК КонтрагентИНН,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.КППКорреспондента, """") КАК КонтрагентКПП,
	|	КонтактнаяИнформацияКонтрагента.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияКонтрагента.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияКонтрагента.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияКонтрагента.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияКонтрагента.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияКонтрагента.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,
	
	//++ Локализация
	// Налоги
	|	&ДанныеНалогов,
	//-- Локализация
	|	
	|	"""" КАК НомерСчетаКомиссии,
	|	"""" КАК БИКСчетаКомиссии,
	|	"""" КАК НаименованиеБанкаСчетаКомиссии
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО
	|		ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО
	|		ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО
	|		КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|	ПО
	|		КонтактнаяИнформацияКонтрагента.Ссылка = ДанныеДокумента.Контрагент
	|		И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО
	|		БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|	ПО
	|		БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетКонтрагента
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация НЕ В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеПорученияВнутренние() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетПолучатель              КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	ДанныеДокумента.ВидПлатежа                            КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	ДанныеДокумента.ТипКомиссииЗаПеревод                  КАК ТипКомиссииЗаПеревод,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипКомиссииЗаПеревод)   КАК ТипКомиссииЗаПереводНаименование,
	|	ДанныеДокумента.ИнформацияДляРегулирующихОрганов      КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) = """" ТОГДА
	|			ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|					ТОГДА ДанныеДокумента.Организация.Наименование
	|				ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ДанныеДокумента.ТекстПлательщика
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) = """" ТОГДА
	|			ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|					ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|				ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ДанныеДокумента.ТекстПлательщика
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеМеждународное
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ИННПлательщика = """" ТОГДА
	|			ДанныеДокумента.Организация.ИНН
	|		ИНАЧЕ
	|			ДанныеДокумента.ИННПлательщика
	|	КОНЕЦ КАК ОрганизацияИНН,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КПППлательщика = """" ТОГДА
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.РегистрацияВНалоговомОргане В (
	|					"""",
//++ Локализация
	|					ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка),
//-- Локализация
	|					НЕОПРЕДЕЛЕНО)
	|				ТОГДА ДанныеДокумента.Организация.КПП
//++ Локализация
	|				ИНАЧЕ ДанныеДокумента.РегистрацияВНалоговомОргане.КПП
//-- Локализация
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ДанныеДокумента.КПППлательщика
	|	КОНЕЦ КАК ОрганизацияКПП,
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	
	|	&ДанныеБанковскогоСчетаОрганизации,

	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,
	|
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.Владелец.Наименование
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.Владелец.НаименованиеСокращенное
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеМеждународное КАК КонтрагентНаименованиеМеждународное,
	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК КонтрагентИНН,
	|	БанковскиеСчетаКонтрагентов.Владелец.КПП КАК КонтрагентКПП,
	|	КонтактнаяИнформацияКонтрагента.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияКонтрагента.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияКонтрагента.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияКонтрагента.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияКонтрагента.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияКонтрагента.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,
	
	//++ Локализация
	// Налоги
	|	&ДанныеНалогов,
	//-- Локализация
	|	
	|	"""" КАК НомерСчетаКомиссии,
	|	"""" КАК БИКСчетаКомиссии,
	|	"""" КАК НаименованиеБанкаСчетаКомиссии
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|	ПО КонтактнаяИнформацияКонтрагента.Ссылка = ДанныеДокумента.БанковскийСчетПолучатель.Владелец
	|		И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаКонтрагентов
	|	ПО БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетПолучатель
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеПорученияПереводы() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетПолучатель              КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	ДанныеДокумента.ВидПлатежа                            КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	ДанныеДокумента.ТипКомиссииЗаПеревод                  КАК ТипКомиссииЗаПеревод,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипКомиссииЗаПеревод)   КАК ТипКомиссииЗаПереводНаименование,
	|	ДанныеДокумента.ИнформацияДляРегулирующихОрганов      КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты) ТОГДА
	|			ДанныеДокумента.СуммаКонвертации
	|		ИНАЧЕ
	|			ДанныеДокумента.СуммаДокумента
	|	КОНЕЦ КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.Наименование
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеМеждународное
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	|	ДанныеДокумента.Организация.ИНН КАК ОрганизацияИНН,
	|	ДанныеДокумента.Организация.КПП КАК ОрганизацияКПП,
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	
	|	&ДанныеБанковскогоСчетаОрганизации,

	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК Строка(255)) = """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.Владелец.Наименование
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.Владелец.НаименованиеСокращенное
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеМеждународное КАК КонтрагентНаименованиеМеждународное,
	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК КонтрагентИНН,
	|	БанковскиеСчетаКонтрагентов.Владелец.КПП КАК КонтрагентКПП,
	|	КонтактнаяИнформацияОрганизации.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияОрганизации.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,
	
	//++ Локализация
	// Налоги
	|	&ДанныеНалогов,
	//-- Локализация
	|	
	|	"""" КАК НомерСчетаКомиссии,
	|	"""" КАК БИКСчетаКомиссии,
	|	"""" КАК НаименованиеБанкаСчетаКомиссии
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаКонтрагентов
	|	ПО БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетПолучатель
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|	)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеТребованияТретьиЛица() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетКонтрагента             КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	""""                                                  КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО                                          КАК ТипКомиссииЗаПеревод,
	|	""""                                                  КАК ТипКомиссииЗаПереводНаименование,
	|	""""                                                  КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.Наименование
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеМеждународное
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	
	|	ДанныеДокумента.Организация.ИНН КАК ОрганизацияИНН,
	|	ДанныеДокумента.Организация.КПП КАК ОрганизацияКПП,
	
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	|	
	|	&ДанныеБанковскогоСчетаОрганизации,
	
	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент
	|	КОНЕЦ КАК Контрагент,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.ЮрФизЛицо
	|	КОНЕЦ КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.Наименование
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК Строка(255)) = """" ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|			ТОГДА
	|				ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|			ИНАЧЕ
	|				ДанныеДокумента.Контрагент.НаименованиеПолное
	|			КОНЕЦ
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.НаименованиеМеждународное
	|	КОНЕЦ КАК КонтрагентНаименованиеМеждународное,
	
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.ИННКорреспондента = """" ТОГДА
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|				ТОГДА
	|					ДанныеДокумента.ПодотчетноеЛицо.ИНН
	|				ИНАЧЕ
	|					ДанныеДокумента.Контрагент.ИНН
	|			КОНЕЦ
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ИННКорреспондента
	|	КОНЕЦ КАК КонтрагентИНН,
	
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.КППКорреспондента = """" ТОГДА
	|			ДанныеДокумента.Контрагент.КПП
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.КППКорреспондента
	|	КОНЕЦ КАК КонтрагентКПП,
	
	|	КонтактнаяИнформацияКонтрагента.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияКонтрагента.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияКонтрагента.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияКонтрагента.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияКонтрагента.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияКонтрагента.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,
	
	//++ Локализация
	// Налоги
	|	ЛОЖЬ КАК ПеречислениеВБюджет,
	|	"""" КАК СтатусСоставителя,
	|	
	|	"""" КАК КодБК,
	|	"""" КАК КодОКАТО,
	|	"""" КАК ПоказательОснования,
	|	"""" КАК ПоказательПериода,
	|	"""" КАК ПоказательНомера,
	|	"""" КАК ПоказательДаты,
	|	"""" КАК ПоказательТипа,
	|	"""" КАК ОчередностьПлатежа,
	|	
	|	"""" КАК КодВидаДохода,
	|	"""" КАК КодВыплат,
	//-- Локализация
	|	
	|	"""" КАК НомерСчетаКомиссии,
	|	"""" КАК БИКСчетаКомиссии,
	|	"""" КАК НаименованиеБанкаСчетаКомиссии
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеТребования КАК ПлатежныеТребования
	|	ПО ДанныеДокумента.Ссылка = ПлатежныеТребования.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|	ПО КонтактнаяИнформацияКонтрагента.Ссылка = ДанныеДокумента.Контрагент
	|		И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|	ПО БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетКонтрагента
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация НЕ В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеТребованияВнутренние() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетОтправитель             КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	""""                                                  КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО                                          КАК ТипКомиссииЗаПеревод,
	|	""""                                                  КАК ТипКомиссииЗаПереводНаименование,
	|	""""                                                  КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.Наименование
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеМеждународное
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	
	|	ДанныеДокумента.Организация.ИНН КАК ОрганизацияИНН,
	|	ДанныеДокумента.Организация.КПП КАК ОрганизацияКПП,
	
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	
	|	&ДанныеБанковскогоСчетаОрганизации,
	
	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,	
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.Владелец.Наименование
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.Владелец.НаименованиеСокращенное
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеМеждународное КАК КонтрагентНаименованиеМеждународное,

	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК КонтрагентИНН,
	|	БанковскиеСчетаКонтрагентов.Владелец.КПП КАК КонтрагентКПП,
	
	|	КонтактнаяИнформацияКонтрагента.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияКонтрагента.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияКонтрагента.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияКонтрагента.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияКонтрагента.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияКонтрагента.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,
	
	//++ Локализация
	// Налоги
	|	ЛОЖЬ КАК ПеречислениеВБюджет,
	|	"""" КАК СтатусСоставителя,
	|	
	|	"""" КАК КодБК,
	|	"""" КАК КодОКАТО,
	|	"""" КАК ПоказательОснования,
	|	"""" КАК ПоказательПериода,
	|	"""" КАК ПоказательНомера,
	|	"""" КАК ПоказательДаты,
	|	"""" КАК ПоказательТипа,
	|	"""" КАК ОчередностьПлатежа,
	|	
	|	"""" КАК КодВидаДохода,
	|	"""" КАК КодВыплат,
	//-- Локализация
	|	
	|	"""" КАК НомерСчетаКомиссии,
	|	"""" КАК БИКСчетаКомиссии,
	|	"""" КАК НаименованиеБанкаСчетаКомиссии
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеТребования КАК ПлатежныеТребования
	|	ПО ДанныеДокумента.Ссылка = ПлатежныеТребования.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|	ПО КонтактнаяИнформацияКонтрагента.Ссылка = ДанныеДокумента.БанковскийСчетОтправитель.Владелец
	|		И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаКонтрагентов
	|	ПО БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетОтправитель
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКонвертацияВалюты() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетПолучатель              КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	ДанныеДокумента.ВидПлатежа                            КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	ДанныеДокумента.ТипКомиссииЗаПеревод                  КАК ТипКомиссииЗаПеревод,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипКомиссииЗаПеревод)   КАК ТипКомиссииЗаПереводНаименование,
	|	ДанныеДокумента.ИнформацияДляРегулирующихОрганов      КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ДанныеДокумента.СуммаКонвертации                               КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) = """" ТОГДА
	|			ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|					ТОГДА ДанныеДокумента.Организация.Наименование
	|				ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ДанныеДокумента.ТекстПлательщика
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) = """" ТОГДА
	|			ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|					ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|				ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ДанныеДокумента.ТекстПлательщика
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеМеждународное
	|		ИНАЧЕ БанковскийСчетОрганизации.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ИННПлательщика = """" ТОГДА
	|			ДанныеДокумента.Организация.ИНН
	|		ИНАЧЕ
	|			ДанныеДокумента.ИННПлательщика
	|	КОНЕЦ КАК ОрганизацияИНН,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КПППлательщика = """" ТОГДА
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.РегистрацияВНалоговомОргане В (
	|					"""",
//++ Локализация
	|					ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка),
//-- Локализация
	|					НЕОПРЕДЕЛЕНО)
	|				ТОГДА ДанныеДокумента.Организация.КПП
//++ Локализация
	|				ИНАЧЕ ДанныеДокумента.РегистрацияВНалоговомОргане.КПП
//-- Локализация
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ДанныеДокумента.КПППлательщика
	|	КОНЕЦ КАК ОрганизацияКПП,
	
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	
	|	&ДанныеБанковскогоСчетаОрганизации,

	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.Владелец.Наименование
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.Владелец.НаименованиеСокращенное
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеМеждународное КАК КонтрагентНаименованиеМеждународное,

	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК КонтрагентИНН,
	|	БанковскиеСчетаКонтрагентов.Владелец.КПП КАК КонтрагентКПП,

	
	|	КонтактнаяИнформацияКонтрагента.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияКонтрагента.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияКонтрагента.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияКонтрагента.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияКонтрагента.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияКонтрагента.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,
	
	//++ Локализация
	// Налоги
	|	&ДанныеНалогов,
	//-- Локализация
	
	// Комиссия конвертации
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.УсловиеСделкиКонвертации = 1 ТОГДА
	|			ДанныеДокумента.БанковскийСчетСписанияКомиссии.НомерСчета
	|		ИНАЧЕ
	|			БанковскийСчетОрганизации.НомерСчета
	|	КОНЕЦ КАК НомерСчетаКомиссии,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.УсловиеСделкиКонвертации = 1 ТОГДА
	|			ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетСписанияКомиссии.РучноеИзменениеРеквизитовБанка ТОГДА ДанныеДокумента.БанковскийСчетСписанияКомиссии.БИКБанка
	|			ИНАЧЕ ДанныеДокумента.БанковскийСчетСписанияКомиссии.Банк.Код КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.БИКБанка
	|			ИНАЧЕ БанковскийСчетОрганизации.Банк.Код КОНЕЦ
	|	КОНЕЦ КАК БИКСчетаКомиссии,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.УсловиеСделкиКонвертации = 1 ТОГДА
	|			ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетСписанияКомиссии.РучноеИзменениеРеквизитовБанка ТОГДА ДанныеДокумента.БанковскийСчетСписанияКомиссии.НаименованиеБанка
	|			ИНАЧЕ ДанныеДокумента.БанковскийСчетСписанияКомиссии.Банк.Наименование КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.НаименованиеБанка
	|			ИНАЧЕ БанковскийСчетОрганизации.Банк.Наименование КОНЕЦ
	|	КОНЕЦ КАК НаименованиеБанкаСчетаКомиссии
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|	ПО КонтактнаяИнформацияКонтрагента.Ссылка = ДанныеДокумента.БанковскийСчетПолучатель.Владелец
	|		И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаКонтрагентов
	|	ПО БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетПолучатель
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ИнициализироватьПоляПлатежа()
	
	Поля = Новый Структура;
	Поля.Вставить("ОрганизацияНаим",                "ОрганизацияНаименованиеСокращенное");
	Поля.Вставить("КонтрагентНаим",                 "КонтрагентНаименованиеСокращенное");
	
	Поля.Вставить("КПППлательщика",                 "ОрганизацияКПП");

	Поля.Вставить("ОрганизацияГородРЦБанка",        "ОрганизацияГородБанкаДляРасчетов");
	Поля.Вставить("ОрганизацияБИКРЦБанка",          "ОрганизацияБИКБанкаДляРасчетов");
	Поля.Вставить("ОрганизацияКоррСчет",            "ОрганизацияКоррСчетБанка");
	Поля.Вставить("ОрганизацияКоррСчетРЦБанка",     "ОрганизацияКоррСчетБанкаДляРасчетов");
	
	Поля.Вставить("КПППолучателя",                  "КонтрагентКПП");

	Поля.Вставить("КонтрагентГородРЦБанка",         "КонтрагентГородБанкаДляРасчетов");
	Поля.Вставить("КонтрагентБИКРЦБанка",           "КонтрагентБИКБанкаДляРасчетов");
	Поля.Вставить("КонтрагентКоррСчет",             "КонтрагентКоррСчетБанка");
	Поля.Вставить("КонтрагентКоррСчетРЦБанка",      "КонтрагентКоррСчетБанкаДляРасчетов");
	
	Возврат Поля;
	
КонецФункции

Функция ТекстДанныеБанковскогоСчетаОрганизации()
	
	Возврат "
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.НаименованиеБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Наименование КОНЕЦ КАК ОрганизацияБанк,
	|	БанковскийСчетОрганизации.НаименованиеБанкаМеждународное КАК ОрганизацияБанкМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.ГородБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Город КОНЕЦ КАК ОрганизацияГородБанка,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.ГородБанкаМеждународный
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.ГородМеждународный КОНЕЦ КАК ОрганизацияГородБанкаМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.БИКБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Код КОНЕЦ КАК ОрганизацияБИКБанка,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.СВИФТБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.СВИФТБИК КОНЕЦ КАК ОрганизацияСВИФТБанка,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.КоррСчетБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.КоррСчет КОНЕЦ КАК ОрганизацияКоррСчетБанка,
	|	БанковскийСчетОрганизации.СчетВБанкеДляРасчетов КАК ОрганизацияСчетВБанкеДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.АдресБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Адрес КОНЕЦ КАК ОрганизацияАдресБанка,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.АдресБанкаМеждународный
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.АдресМеждународный КОНЕЦ КАК ОрганизацияАдресБанкаМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.СтранаБанка.Наименование
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Страна.Наименование КОНЕЦ КАК ОрганизацияСтранаБанка,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.СтранаБанка.Код
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Страна.Код КОНЕЦ КАК ОрганизацияСтранаБанкаКод,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.СтранаБанка.КодАльфа2
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Страна.КодАльфа2 КОНЕЦ КАК ОрганизацияСтранаБанкаИСОКод,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.ТелефоныБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Телефоны КОНЕЦ КАК ОрганизацияТелефоныБанка,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК БанковскийСчетОрганизацииIBAN,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Наименование КОНЕЦ КАК ОрганизацияБанкДляРасчетов,
	|	БанковскийСчетОрганизации.НаименованиеБанкаДляРасчетовМеждународное КАК ОрганизацияБанкДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.ГородБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Город КОНЕЦ КАК ОрганизацияГородБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.ГородБанкаДляРасчетовМеждународный
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.ГородМеждународный КОНЕЦ КАК ОрганизацияГородБанкаДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.БИКБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Код КОНЕЦ КАК ОрганизацияБИКБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.СВИФТБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.СВИФТБИК КОНЕЦ КАК ОрганизацияСВИФТБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.КоррСчет КОНЕЦ КАК ОрганизацияКоррСчетБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.АдресБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Адрес КОНЕЦ КАК ОрганизацияАдресБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.АдресБанкаДляРасчетовМеждународный
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.АдресМеждународный КОНЕЦ КАК ОрганизацияАдресБанкаДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.СтранаБанкаДляРасчетов.Наименование
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Страна.Наименование КОНЕЦ КАК ОрганизацияСтранаБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.СтранаБанкаДляРасчетов.Код
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Страна.Код КОНЕЦ КАК ОрганизацияСтранаБанкаДляРасчетовКод,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.СтранаБанкаДляРасчетов.КодАльфа2
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Страна.КодАльфа2 КОНЕЦ КАК ОрганизацияСтранаБанкаДляРасчетовИСОКод,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.ТелефоныБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Телефоны КОНЕЦ КАК ОрганизацияТелефоныБанкаДляРасчетов";
	
КонецФункции

Функция ТекстДанныеБанковскогоСчетаКонтрагента()
	
	Возврат "
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.НаименованиеБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Наименование КОНЕЦ КАК КонтрагентБанк,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Банк.БИКРКЦ.Наименование, """") КАК КонтрагентБанкНаименованиеРКЦ,
	|	БанковскиеСчетаКонтрагентов.НаименованиеБанкаМеждународное КАК КонтрагентБанкМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.ГородБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Город КОНЕЦ КАК КонтрагентГородБанка,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.ГородБанкаМеждународный
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.ГородМеждународный КОНЕЦ КАК КонтрагентГородБанкаМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.БИКБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Код КОНЕЦ КАК КонтрагентБИКБанка,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.СВИФТБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.СВИФТБИК КОНЕЦ КАК КонтрагентСВИФТБанка,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.КоррСчетБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.КоррСчет КОНЕЦ КАК КонтрагентКоррСчетБанка,
	|	БанковскиеСчетаКонтрагентов.СчетВБанкеДляРасчетов КАК КонтрагентСчетВБанкеДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.АдресБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Адрес КОНЕЦ КАК КонтрагентАдресБанка,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.АдресБанкаМеждународный
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.АдресМеждународный КОНЕЦ КАК КонтрагентАдресБанкаМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанка.Наименование
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Страна.Наименование КОНЕЦ КАК КонтрагентСтранаБанка,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанка.Код
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Страна.Код КОНЕЦ КАК КонтрагентСтранаБанкаКод,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанка.КодАльфа2
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Страна.КодАльфа2 КОНЕЦ КАК КонтрагентСтранаБанкаИСОКод,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.ТелефоныБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Телефоны КОНЕЦ КАК КонтрагентТелефоныБанка,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК БанковскийСчетКонтрагентаIBAN,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Наименование КОНЕЦ КАК КонтрагентБанкДляРасчетов,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.БанкДляРасчетов.БИКРКЦ.Наименование, """") КАК КонтрагентБанкДляРасчетовНаименованиеРКЦ,
	|	БанковскиеСчетаКонтрагентов.НаименованиеБанкаДляРасчетовМеждународное КАК КонтрагентБанкДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.ГородБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Город КОНЕЦ КАК КонтрагентГородБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.ГородБанкаДляРасчетовМеждународный
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.ГородМеждународный КОНЕЦ КАК КонтрагентГородБанкаДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.БИКБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Код КОНЕЦ КАК КонтрагентБИКБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.СВИФТБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.СВИФТБИК КОНЕЦ КАК КонтрагентСВИФТБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.КоррСчет КОНЕЦ КАК КонтрагентКоррСчетБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.АдресБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Адрес КОНЕЦ КАК КонтрагентАдресБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.АдресБанкаДляРасчетовМеждународный
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.АдресМеждународный КОНЕЦ КАК КонтрагентАдресБанкаДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанкаДляРасчетов.Наименование
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Страна.Наименование КОНЕЦ КАК КонтрагентСтранаБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанкаДляРасчетов.Код
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Страна.Код КОНЕЦ КАК КонтрагентСтранаБанкаДляРасчетовКод,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанкаДляРасчетов.КодАльфа2
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Страна.КодАльфа2 КОНЕЦ КАК КонтрагентСтранаБанкаДляРасчетовИСОКод,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.ТелефоныБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Телефоны КОНЕЦ КАК КонтрагентТелефоныБанкаДляРасчетов";
	
КонецФункции

//++ Локализация
Функция ТекстДанныеНалогов()
	
	Возврат "
	|	ДанныеДокумента.ПеречислениеВБюджет       КАК ПеречислениеВБюджет,
	|	ДанныеДокумента.СтатусСоставителя         КАК СтатусСоставителя,
	|	
	|	ДанныеДокумента.КодБК                     КАК КодБК,
	|	ДанныеДокумента.КодОКАТО                  КАК КодОКАТО,
	|	ДанныеДокумента.ПоказательОснования       КАК ПоказательОснования,
	|	ДанныеДокумента.ПоказательПериода         КАК ПоказательПериода,
	|	ДанныеДокумента.ПоказательНомера          КАК ПоказательНомера,
	|	ДанныеДокумента.ПоказательДаты            КАК ПоказательДаты,
	|	ДанныеДокумента.КодВыплат                 КАК ПоказательТипа,
	|	ДанныеДокумента.ОчередностьПлатежа        КАК ОчередностьПлатежа,
	|	
	|	ДанныеДокумента.КодВидаДохода             КАК КодВидаДохода,
	|	ДанныеДокумента.КодВыплат                 КАК КодВыплат
	|";
	
КонецФункции
//-- Локализация

#КонецОбласти

#Область Выгрузка

Процедура ВыгрузитьПлатежиВ1CClientBankExchange(ПараметрыВыгрузки, АдресХранилища)
	
	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	
	Если Не КоличествоДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("Дата");
	НачПериода = ТаблицаДокументов[0].Дата;
	КонПериода = ТаблицаДокументов[КоличествоДокументов-1].Дата;
	
	БанковскиеСчетаВыгрузки = ПараметрыВыгрузки.БанковскийСчет;
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	// Формируем заголовок
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Если ТекущаяДатаСеанса >= '20200601' Тогда
		ВерсияФормата = "1.03";
	ИначеЕсли ТекущаяДатаСеанса>= '20140101' Тогда
		ВерсияФормата = "1.02";
	Иначе
		ВерсияФормата = "1.01";
	КонецЕсли;
	
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=" + ВерсияФормата);
	ПотокВыгрузки.ДобавитьСтроку("Кодировка="     + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.Кодировка), ПараметрыВыгрузки.Кодировка, "Windows"));
	ПотокВыгрузки.ДобавитьСтроку("Отправитель="   + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель="    + СокрЛП(ПараметрыВыгрузки.Программа));
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания="  + Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ:мм:сс"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала="    + Формат(НачПериода, "ДФ=дд.ММ.гггг"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца="     + Формат(КонПериода, "ДФ=дд.ММ.гггг"));
	
	Если ТипЗнч(БанковскиеСчетаВыгрузки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ОчереднойБанковскийСчет Из БанковскиеСчетаВыгрузки Цикл 
			ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + ОчереднойБанковскийСчет.НомерСчета);
		КонецЦикла;
	Иначе
		ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + БанковскиеСчетаВыгрузки.НомерСчета);
	КонецЕсли;
	
	ВидыДокументов = Новый Соответствие;
	ВидыДокументов.Вставить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение, "Платежное поручение");
	ВидыДокументов.Вставить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование, "Платежное требование");
	
	Для каждого ВидДокумента Из ВидыДокументов Цикл
		Если ТаблицаДокументов.Найти(ВидДокумента.Ключ, "ВидДокумента") <> Неопределено Тогда
			ПотокВыгрузки.ДобавитьСтроку("Документ=" + ВидДокумента.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Выводим отмеченные секции документов
	Для каждого СтрокаСекции Из ТаблицаДокументов Цикл
		Буфер = СекцияДокумент(СтрокаСекции);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
	КонецЦикла;
	
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL.
	Если ПараметрыВыгрузки.Кодировка = "DOS" Тогда
		Кодировка = "cp866";        // КодировкаТекста.OEM;
	Иначе
		Кодировка = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодировка);
	
	ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), АдресХранилища);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выгрузка платежей в банк. Удаление временного файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Функция СекцияДокумент(СтруктураДокумента)
	
	Буфер = "";
	
	Секция = СтруктураЭкспорта();
	ЗаполнитьЗначениеЭкспорта(Секция, СтруктураДокумента);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для каждого ВыгружаемыйРеквизит Из Секция Цикл
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		Если Не ПустаяСтрока(Значение) Тогда
			ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=дд.ММ.гггг");
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока, Разделитель = "")
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		УжеЕстьФразаОшибкаВФайле = СтрНайти(Буфер, НСтр("ru='Ошибка в файле.'")) > 0;
		Если УжеЕстьФразаОшибкаВФайле Тогда
			НоваяСтрока = СтрЗаменить(НоваяСтрока, НСтр("ru='Ошибка в файле.'"), "");
		КонецЕсли;
		
		Шаблон = НСтр("ru = '%1%2%3'");
		Буфер  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					Буфер,
					?(ПустаяСтрока(Разделитель), Символы.ПС, Разделитель),
					НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта)
	
	Если ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		Плательщик = "Контрагент";
		Получатель = "Организация";
	Иначе
		Плательщик = "Организация";
		Получатель = "Контрагент";
	КонецЕсли;
	
	СтрокаЭкспорта.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДляЭкспорта.Номер, Истина, Истина);
	СтрокаЭкспорта.Дата           = Формат(ВыборкаДляЭкспорта.Дата, "ДФ=дд.ММ.гггг");
	СтрокаЭкспорта.Сумма          = Формат(ВыборкаДляЭкспорта.Сумма, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	СтрокаЭкспорта.ПолучательСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
	СтрокаЭкспорта.ВидПлатежа     = ВыборкаДляЭкспорта.ВидПлатежа;
	
	НепрямыеРасчетыУПлательщика   = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	НепрямыеРасчетыУПолучателя    = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);
	
	// ВидОплаты
	Если ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		СтрокаЭкспорта.ВидОплаты  = "01";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.Аккредитив Тогда
		СтрокаЭкспорта.ВидОплаты  = "08";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение Тогда
		СтрокаЭкспорта.ВидОплаты  = "06";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		СтрокаЭкспорта.ВидОплаты  = "02";
	Иначе
		СтрокаЭкспорта.ВидОплаты  = "00";
	КонецЕсли;
	
	// Код - идентификатор платежа
	СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.Код;
	
	// Плательщик1
	СтрокаЭкспорта.Плательщик1 = ВыборкаДляЭкспорта[Плательщик + "Наим"];
	
	// Плательщик, ПлательщикИНН
	Значение = ВыборкаДляЭкспорта[Плательщик + "ИНН"];
	СтрокаЭкспорта.ПлательщикИНН = Значение;
	СтрокаЭкспорта.Плательщик = "ИНН " + ВыборкаДляЭкспорта[Плательщик + "ИНН"] + " " + СтрокаЭкспорта.Плательщик1;
	
	// ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,Плательщик2, Плательщик3, Плательщик4.
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2        = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.Плательщик3        = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4        = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик         = СтрокаЭкспорта.Плательщик
			+ " р/с " + СтрокаЭкспорта.Плательщик2
			+ " в " + СтрокаЭкспорта.Плательщик3
			+ " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "КоррСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчет"];
	КонецЕсли;
	
	// Получатель1
	ПолучательПозицияСимволВК = СтрНайти(ВыборкаДляЭкспорта[Получатель + "Наим"], Символы.ВК);
	Если ПолучательПозицияСимволВК = 0 Тогда
		СтрокаЭкспорта.Получатель1 = ВыборкаДляЭкспорта[Получатель + "Наим"];
	КонецЕсли;
	
	// Получатель, ПолучательИНН
	СтрокаЭкспорта.ПолучательИНН = ВыборкаДляЭкспорта[Получатель + "ИНН"];
	СтрокаЭкспорта.Получатель = "ИНН " + ВыборкаДляЭкспорта[Получатель + "ИНН"] + " " + СтрокаЭкспорта.Получатель1;
	
	// ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет, Получатель2, Получатель3, Получатель4.
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2        = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.Получатель3        = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4        = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель         = СтрокаЭкспорта.Получатель
			+ " р/с " + СтрокаЭкспорта.Получатель2
			+ " в " + СтрокаЭкспорта.Получатель3
			+ " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "КоррСчет"];
		Если ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетовНаименованиеРКЦ"]) Тогда
			СтрокаЭкспорта.ПолучательБанк1 = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетовНаименованиеРКЦ"]
				+ "//" + ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		Иначе
			СтрокаЭкспорта.ПолучательБанк1 = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		КонецЕсли;
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		Если ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкНаименованиеРКЦ"]) Тогда
			СтрокаЭкспорта.ПолучательБанк1 = ВыборкаДляЭкспорта[Получатель + "БанкНаименованиеРКЦ"]
				+ "//" + ВыборкаДляЭкспорта[Получатель + "Банк"];
		Иначе
			СтрокаЭкспорта.ПолучательБанк1 = ВыборкаДляЭкспорта[Получатель + "Банк"];
		КонецЕсли;
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчет"];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
		СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
		СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
	КонецЕсли;
	
	// СтатусСоставителя, ПлательщикКПП ПолучательКПП ПоказательКБК ОКАТО/ОКТМО ПоказательОснования ПоказательПериода
	// ПоказательНомера ПоказательДаты ПоказательТипа Код.
	Если ВыборкаДляЭкспорта.ПеречислениеВБюджет Тогда
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.КодБК) Тогда
			СтрокаЭкспорта.ПоказательКБК = "0";
		Иначе
			СтрокаЭкспорта.ПоказательКБК = ВыборкаДляЭкспорта.КодБК;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.КодОКАТО) Тогда
			СтрокаЭкспорта.ОКАТО = "0";
		Иначе
			СтрокаЭкспорта.ОКАТО = СокрЛП(ВыборкаДляЭкспорта.КодОКАТО);
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = "0";
		Иначе
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
			СтрокаЭкспорта.ПоказательПериода = "0";
		Иначе
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = "0";
		Иначе
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		Иначе
			СтрокаЭкспорта.ПоказательДаты = ВыборкаДляЭкспорта.ПоказательДаты;
		КонецЕсли;
	КонецЕсли;
	
	// Код выплат
	СтрокаЭкспорта.ПоказательТипа = "" + ВыборкаДляЭкспорта.КодВыплат;
	
	// Код вида дохода
	СтрокаЭкспорта.КодНазПлатежа = "" + ВыборкаДляЭкспорта.КодВидаДохода;
	
	// Очередность
	СтрокаЭкспорта.Очередность = "" + ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
	// НазначениеПлатежа, НазначениеПлатежа1 НазначениеПлатежа2 НазначениеПлатежа3 НазначениеПлатежа4 НазначениеПлатежа5 НазначениеПлатежа6.
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС + Символы.ВК, " ");
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(
		СтрЗаменить(СтрЗаменить(СтрокаЭкспорта.НазначениеПлатежа, Символы.ПС, " "), Символы.ВК, " "), Символы.ПФ, " ");
	КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураЭкспорта()
	
	СтруктураЭкспорта = Новый Структура;
	
	СтруктураЭкспорта.Вставить("Выгружать",              ""); // "_"
	СтруктураЭкспорта.Вставить("Готовность",             ""); // "Готовность"
	
	СтруктураЭкспорта.Вставить("НомерДок",               ""); // "№ Документа"
	СтруктураЭкспорта.Вставить("Номер",                  ""); // "Номер"
	СтруктураЭкспорта.Вставить("Дата",                   ""); // "Дата"
	СтруктураЭкспорта.Вставить("Операция",               ""); // "Операция"
	СтруктураЭкспорта.Вставить("СчетОрганизации",        ""); // "Эл. Р/с организации"
	СтруктураЭкспорта.Вставить("НомерСчетаОрганизации",  ""); // "Р/с организации"
	СтруктураЭкспорта.Вставить("Сумма",                  ""); // "Сумма"
	
	СтруктураЭкспорта.Вставить("Контрагент",             ""); // "Контрагент"
	СтруктураЭкспорта.Вставить("СчетКонтрагента",        ""); // "Р/с контрагента"
	СтруктураЭкспорта.Вставить("НомерСчетаКонтрагента",  ""); // "Эл. Р/с контрагента"
	
	СтруктураЭкспорта.Вставить("КвитанцияДата",          ""); // "Дата форм. квитанции"
	СтруктураЭкспорта.Вставить("КвитанцияВремя",         ""); // "Время форм. квитанции"
	СтруктураЭкспорта.Вставить("КвитанцияСодержание",    ""); // "Содержание квитанции"
	
	СтруктураЭкспорта.Вставить("ПлательщикСчет",         ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик",             ""); // "Плательщик"
	СтруктураЭкспорта.Вставить("ПлательщикИНН",          ""); // "ИНН плательщика"
	СтруктураЭкспорта.Вставить("Плательщик1",            ""); // "Наименование плательщика"
	СтруктураЭкспорта.Вставить("Плательщик2",            ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик3",            ""); // "Банк плательщика"
	СтруктураЭкспорта.Вставить("Плательщик4",            ""); // "Город банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикРасчСчет",     ""); // "Корсчет банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБанк1",        ""); // "РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБанк2",        ""); // "Город РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБИК",          ""); // "БИК РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикКорсчет",      ""); // "Корсчет РЦ банка плат."
	
	СтруктураЭкспорта.Вставить("ПолучательСчет",         ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель",             ""); // "Получатель"
	СтруктураЭкспорта.Вставить("ПолучательИНН",          ""); // "ИНН получателя"
	СтруктураЭкспорта.Вставить("Получатель1",            ""); // "Наименование получателя"
	СтруктураЭкспорта.Вставить("Получатель2",            ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель3",            ""); // "Банк получателя"
	СтруктураЭкспорта.Вставить("Получатель4",            ""); // "Город банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательРасчСчет",     ""); // "Корсчет банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБанк1",        ""); // "РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБанк2",        ""); // "Город РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБИК",          ""); // "БИК РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательКорсчет",      ""); // "Корсчет РЦ банка пол."
	
	СтруктураЭкспорта.Вставить("ВидПлатежа",             ""); // "Вид платежа"
	СтруктураЭкспорта.Вставить("КодНазПлатежа",          ""); // "Код вида дохода"
	СтруктураЭкспорта.Вставить("ВидОплаты",              ""); // "Вид оплаты"
	СтруктураЭкспорта.Вставить("ПеречислениеВБюджет",    ""); // "Перечисление в бюджет",
	СтруктураЭкспорта.Вставить("ВидПеречисленияВБюджет", ""); // "Вид перечисления в бюджет",
	
	СтруктураЭкспорта.Вставить("СтатусСоставителя",      ""); // "Статус составителя"
	СтруктураЭкспорта.Вставить("ПлательщикКПП",          ""); // "КПП плательщика"
	СтруктураЭкспорта.Вставить("ПолучательКПП",          ""); // "КПП получателя"
	СтруктураЭкспорта.Вставить("ПоказательКБК",          ""); // "Показатель КБК"
	СтруктураЭкспорта.Вставить("ОКАТО",                  ""); // "ОКАТО/ОКТМО"
	СтруктураЭкспорта.Вставить("ПоказательОснования",    ""); // "Показатель основания"
	СтруктураЭкспорта.Вставить("ПоказательПериода",      ""); // "Показатель периода"
	СтруктураЭкспорта.Вставить("ПоказательНомера",       ""); // "Показатель номера документа"
	СтруктураЭкспорта.Вставить("ПоказательДаты",         ""); // "Показатель даты документа"
	СтруктураЭкспорта.Вставить("ПоказательТипа",         ""); // "Показатель типа платежа"
	
	СтруктураЭкспорта.Вставить("СрокПлатежа",            ""); // "Срок действия аккредитива"
	СтруктураЭкспорта.Вставить("Очередность",            ""); // "Очередность платежа"
	
	СтруктураЭкспорта.Вставить("НазначениеПлатежа",      ""); // "Назначение платежа"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа1",     ""); // "Назначение платежа, стр. 1"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа2",     ""); // "Назначение платежа, стр. 2"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа3",     ""); // "Назначение платежа, стр. 3"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа4",     ""); // "Назначение платежа, стр. 4"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа5",     ""); // "Назначение платежа, стр. 5"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа6",     ""); // "Назначение платежа, стр. 6"
	
	СтруктураЭкспорта.Вставить("СрокАкцепта",            ""); // "Срок акцепта"
	СтруктураЭкспорта.Вставить("ВидАккредитива",         ""); // "Вид аккредитива"
	СтруктураЭкспорта.Вставить("УсловиеОплаты1",         ""); // "Условие оплаты, стр. 1"
	СтруктураЭкспорта.Вставить("УсловиеОплаты2",         ""); // "Условие оплаты, стр. 2"
	СтруктураЭкспорта.Вставить("УсловиеОплаты3",         ""); // "Условие оплаты, стр. 3"
	СтруктураЭкспорта.Вставить("ПлатежПоПредст",         ""); // "Платеж по представлению"
	СтруктураЭкспорта.Вставить("ДополнУсловия",          ""); // "Дополнительные условия"
	СтруктураЭкспорта.Вставить("НомерСчетаПоставщика",   ""); // "№ счета поставщика"
	СтруктураЭкспорта.Вставить("ДатаОтсылкиДок",         ""); // "Дата отсылки документов"
	
	СтруктураЭкспорта.Вставить("Документ",               ""); // "Источник"
	СтруктураЭкспорта.Вставить("СекцияДокумент",         ""); // "Выгрузка"
	
	СтруктураЭкспорта.Вставить("ОписаниеОшибок",         ""); // "Замечания"
	СтруктураЭкспорта.Вставить("ТипДокумента",           ""); // "Тип пл. документа"
	
	СтруктураЭкспорта.Вставить("Код",                    ""); // "Уникальный идентификатор платежа"
	
	Возврат СтруктураЭкспорта;
	
КонецФункции

Процедура ВыгрузитьПлатежиВISO20022(ПараметрыВыгрузки, АдресХранилища)
	
	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	
	Если Не КоличествоДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("Дата");
	ТекстОшибки = "";
	
	НазванияТипов = НазванияТиповISO20022(ПараметрыВыгрузки.ВерсияФорматаВыгрузки);
	Фабрика = ДенежныеСредстваПовтИсп.ФабрикаISO20022(ПараметрыВыгрузки.ВерсияФорматаВыгрузки);
	ПространствоИмен = "urn:iso:std:iso:20022:tech:xsd:" + ПараметрыВыгрузки.ВерсияФорматаВыгрузки;

	СообщениеPain001 = ОбъектТипаCML(Фабрика, "Document", ПространствоИмен);
	СообщениеЗаголовок = ОбъектТипаCML(Фабрика, НазванияТипов.CustomerCreditTransferInitiation, ПространствоИмен);
	СекцияЗаголовокГруппы = ОбъектТипаCML(Фабрика, НазванияТипов.GroupHeader, ПространствоИмен);
	ИдДокумента = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "MsgId", ИдДокумента, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "CreDtTm", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
	КоличествоДокументов = Строка(ТаблицаДокументов.Количество());
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "NbOfTxs", КоличествоДокументов, Истина, ТекстОшибки);
	ОбщаяСумма = ТаблицаДокументов.Итог("Сумма");
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "CtrlSum", ОбщаяСумма, Истина, ТекстОшибки);
	ИдентификацияИнициатора = ОбъектТипаCML(Фабрика, НазванияТипов.PartyIdentification, ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "InitgPty", ИдентификацияИнициатора, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СообщениеЗаголовок, "GrpHdr", СекцияЗаголовокГруппы, Истина, ТекстОшибки);
	Для Каждого Документ Из ТаблицаДокументов Цикл
		ВыгрузитьДокументВISO20022(Фабрика, НазванияТипов, ПространствоИмен, СообщениеЗаголовок, Документ, ТекстОшибки);
	КонецЦикла;
	
	ЗаполнитьСвойствоXDTO(СообщениеPain001, "CstmrCdtTrfInitn", СообщениеЗаголовок, Истина, ТекстОшибки);

	СообщениеPain001.Проверить();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
		
	ДвоичныеДанные = ДвоичныеДанныеИзXDTO(Фабрика, СообщениеPain001);
	ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища);
	
КонецПроцедуры

Функция НазванияТиповISO20022(ВерсияФорматаВыгрузки)
	
	ВозвращаемоеЗначение = Новый Структура;
	Если ВерсияФорматаВыгрузки = "pain.001.001.03" Тогда
		ВозвращаемоеЗначение.Вставить("CustomerCreditTransferInitiation", "CustomerCreditTransferInitiationV03");
		ВозвращаемоеЗначение.Вставить("GroupHeader", "GroupHeader32");
		ВозвращаемоеЗначение.Вставить("PartyIdentification", "PartyIdentification32");
		ВозвращаемоеЗначение.Вставить("PaymentInstruction", "PaymentInstructionInformation3");
		ВозвращаемоеЗначение.Вставить("Party", "Party6Choice");
		ВозвращаемоеЗначение.Вставить("OrganisationIdentification", "OrganisationIdentification4");
		ВозвращаемоеЗначение.Вставить("CashAccount", "CashAccount16");
		ВозвращаемоеЗначение.Вставить("BranchAndFinancialInstitutionIdentification", "BranchAndFinancialInstitutionIdentification4");
		ВозвращаемоеЗначение.Вставить("FinancialInstitutionIdentification", "FinancialInstitutionIdentification7");
		ВозвращаемоеЗначение.Вставить("BIC", "BIC");
		ВозвращаемоеЗначение.Вставить("CreditTransferTransaction", "CreditTransferTransactionInformation10");
		ВозвращаемоеЗначение.Вставить("RemittanceInformation", "RemittanceInformation5");
	ИначеЕсли ВерсияФорматаВыгрузки = "pain.001.001.04" Тогда
		ВозвращаемоеЗначение.Вставить("CustomerCreditTransferInitiation", "CustomerCreditTransferInitiationV04");
		ВозвращаемоеЗначение.Вставить("GroupHeader", "GroupHeader48");
		ВозвращаемоеЗначение.Вставить("PartyIdentification", "PartyIdentification43");
		ВозвращаемоеЗначение.Вставить("PaymentInstruction", "PaymentInstruction6");
		ВозвращаемоеЗначение.Вставить("Party", "Party11Choice");
		ВозвращаемоеЗначение.Вставить("OrganisationIdentification", "OrganisationIdentification8");
		ВозвращаемоеЗначение.Вставить("CashAccount", "CashAccount24");
		ВозвращаемоеЗначение.Вставить("BranchAndFinancialInstitutionIdentification", "BranchAndFinancialInstitutionIdentification5");
		ВозвращаемоеЗначение.Вставить("FinancialInstitutionIdentification", "FinancialInstitutionIdentification8");
		ВозвращаемоеЗначение.Вставить("BIC", "BICFI");
		ВозвращаемоеЗначение.Вставить("CreditTransferTransaction", "CreditTransferTransaction1");
		ВозвращаемоеЗначение.Вставить("RemittanceInformation", "RemittanceInformation7");
	ИначеЕсли ВерсияФорматаВыгрузки = "pain.001.001.05" Тогда
		ВозвращаемоеЗначение.Вставить("CustomerCreditTransferInitiation", "CustomerCreditTransferInitiationV05");
		ВозвращаемоеЗначение.Вставить("GroupHeader", "GroupHeader48");
		ВозвращаемоеЗначение.Вставить("PartyIdentification", "PartyIdentification43");
		ВозвращаемоеЗначение.Вставить("PaymentInstruction", "PaymentInstruction9");
		ВозвращаемоеЗначение.Вставить("Party", "Party11Choice");
		ВозвращаемоеЗначение.Вставить("OrganisationIdentification", "OrganisationIdentification8");
		ВозвращаемоеЗначение.Вставить("CashAccount", "CashAccount24");
		ВозвращаемоеЗначение.Вставить("BranchAndFinancialInstitutionIdentification", "BranchAndFinancialInstitutionIdentification5");
		ВозвращаемоеЗначение.Вставить("FinancialInstitutionIdentification", "FinancialInstitutionIdentification8");
		ВозвращаемоеЗначение.Вставить("BIC", "BICFI");
		ВозвращаемоеЗначение.Вставить("CreditTransferTransaction", "CreditTransferTransaction6");
		ВозвращаемоеЗначение.Вставить("RemittanceInformation", "RemittanceInformation7");
	Иначе
		ВызватьИсключение НСтр("ru = 'Неподдерживаемая версия формата выгрузки'")
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ВыгрузитьДокументВISO20022(
	Фабрика,
	НазванияТипов,
	ПространствоИмен,
	СообщениеЗаголовок,
	Документ,
	ТекстОшибки)
	
	ИдентификаторОперации = СтрЗаменить(Строка(Документ.Ссылка.УникальныйИдентификатор()), "-", "");
	СекцияЗаголовокПлатежа = ОбъектТипаCML(Фабрика, НазванияТипов.PaymentInstruction, ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "PmtInfId", ИдентификаторОперации, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "PmtMtd", "TRF", Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "NbOfTxs", "1", Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "CtrlSum", Документ.Сумма, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "ReqdExctnDt", Документ.Дата, Истина, ТекстОшибки);
	
	СекцияТранзакция = ОбъектТипаCML(Фабрика, НазванияТипов.CreditTransferTransaction, ПространствоИмен);
	ВыгрузитьДебитораВISO20022(Фабрика, НазванияТипов, ПространствоИмен, СекцияЗаголовокПлатежа, Документ, ТекстОшибки);
	ВыгрузитьИнформациюОКомиссииВISO20022(СекцияЗаголовокПлатежа, Документ, ТекстОшибки);
	ВыгрузитьИдентификаторыДокумента(Фабрика, НазванияТипов, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);

	СекцияСумма = ОбъектТипаCML(Фабрика, "AmountType3Choice", ПространствоИмен);
	СекцияСуммаЗначение = ОбъектТипаCML(Фабрика, "ActiveOrHistoricCurrencyAndAmount", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияСуммаЗначение, "__content", Документ.Сумма, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияСуммаЗначение, "Ccy", Документ.ISOКодВалюты, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияСумма, "InstdAmt", СекцияСуммаЗначение, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "Amt", СекцияСумма, Истина, ТекстОшибки);
	
	ВыгрузитьКредитораISO20022(Фабрика, НазванияТипов, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);
	Если ЗначениеЗаполнено(Документ.ОчередностьПлатежа) Тогда
		СекцияОчередность = ОбъектТипаCML(Фабрика, "Purpose2Choice", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияОчередность, "Cd", Строка(Документ.ОчередностьПлатежа), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "Purp", СекцияОчередность, , ТекстОшибки);
	КонецЕсли;
	
	ВыгрузитьКодДокументаISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);
	ВыгрузитьКодВидаДоходаISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);
	ВыгрузитьНалоговыеРеквизитыISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);
	
	СекцияИнформацияОПлатеже = ОбъектТипаCML(Фабрика, НазванияТипов.RemittanceInformation, ПространствоИмен);
	МассивСтрокНазначенияПлатежа = МассивСтрокНазначенияПлатежаДляISO(Документ.НазначениеПлатежа);
	Для Каждого Строка Из МассивСтрокНазначенияПлатежа Цикл
		Если НЕ ПустаяСтрока(Строка) Тогда
			СекцияИнформацияОПлатеже.Ustrd.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "RmtInf", СекцияИнформацияОПлатеже, , ТекстОшибки);
	
	СекцияЗаголовокПлатежа.CdtTrfTxInf.Добавить(СекцияТранзакция);
	СообщениеЗаголовок.PmtInf.Добавить(СекцияЗаголовокПлатежа);
	
КонецПроцедуры

Процедура ВыгрузитьИдентификаторыДокумента(
	Фабрика,
	НазванияТипов,
	ПространствоИмен,
	СекцияТранзакция,
	Документ,
	ТекстОшибки)

	СекцияИДПлатежа = ОбъектТипаCML(Фабрика, "PaymentIdentification1", ПространствоИмен);
	ИдентификаторДокумента = СтрЗаменить(Строка(Документ.Ссылка.УникальныйИдентификатор()), "-", "");
	ЗаполнитьСвойствоXDTO(СекцияИДПлатежа, "InstrId", ИдентификаторДокумента, Истина, ТекстОшибки);
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.Номер, Истина, Истина);
	ЗаполнитьСвойствоXDTO(СекцияИДПлатежа, "EndToEndId", НомерДокумента, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "PmtId", СекцияИДПлатежа, Истина, ТекстОшибки);
	
КонецПроцедуры

Процедура ВыгрузитьКодДокументаISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки)
	
	Если ЗначениеЗаполнено(Документ.Код) Тогда
		СекцияРегулятора = ОбъектТипаCML(Фабрика, "RegulatoryReporting3", ПространствоИмен);
		СекцияДеталиРегулятора = ОбъектТипаCML(Фабрика, "StructuredRegulatoryReporting3", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияДеталиРегулятора, "Cd", Документ.Код, , ТекстОшибки);
		СекцияРегулятора.Dtls.Добавить(СекцияДеталиРегулятора);
		СекцияТранзакция.RgltryRptg.Добавить(СекцияРегулятора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьНалоговыеРеквизитыISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки)
	
	Если Документ.ПеречислениеВБюджет Тогда
		СекцияНалог = ОбъектТипаCML(Фабрика, "TaxInformation3", ПространствоИмен);
		КПППолучателя = ?(ЗначениеЗаполнено(Документ.КПППолучателя), Документ.КПППолучателя, "0");
		СекцияКредитор = ОбъектТипаCML(Фабрика, "TaxParty1", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияКредитор, "TaxTp", КПППолучателя, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияНалог, "Cdtr", СекцияКредитор, , ТекстОшибки);
		КПППлательщика = ?(ЗначениеЗаполнено(Документ.КПППлательщика), Документ.КПППлательщика, "0");
		СекцияДебитор = ОбъектТипаCML(Фабрика, "TaxParty2", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияДебитор, "TaxTp", КПППлательщика, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияНалог, "Dbtr", СекцияДебитор, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияНалог, "AdmstnZn", Документ.КодОКАТО, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияНалог, "RefNb", Документ.ПоказательНомера, , ТекстОшибки);
		Если ЗначениеЗаполнено(Документ.ПоказательДаты) И Документ.ПоказательДаты <> "0" Тогда
			ЗаполнитьСвойствоXDTO(СекцияНалог, "Dt", ДатаИзСтрокиРФ(Документ.ПоказательДаты), , ТекстОшибки);
		КонецЕсли;
		ВыгрузитьРасшифровкуНалогаISO20022(СекцияНалог, Документ, Фабрика, ПространствоИмен, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "Tax", СекцияНалог, , ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьРасшифровкуНалогаISO20022(СекцияНалог, Документ, Фабрика, ПространствоИмен, ТекстОшибки)
	
	СекцияРасшифровкаНалога = ОбъектТипаCML(Фабрика, "TaxRecord1", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияРасшифровкаНалога, "Tp", Документ.КодВыплат, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияРасшифровкаНалога, "Ctgy", Документ.ПоказательОснования, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияРасшифровкаНалога, "DbtrSts", Документ.СтатусСоставителя, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияРасшифровкаНалога, "CtgyDtls", Документ.КодБК, , ТекстОшибки);

	Если ЗначениеЗаполнено(Документ.ПоказательПериода) Тогда
		Если СтрНайти(Документ.ПоказательПериода, ".") > 0 Тогда
			СекцияПериод = ОбъектТипаCML(Фабрика, "TaxPeriod1", ПространствоИмен);
			Год = Число(Сред(Документ.ПоказательПериода, 7));
			НачалоГода = Дата(Год, 1, 1);
			ЗаполнитьСвойствоXDTO(СекцияПериод, "Yr", НачалоГода, , ТекстОшибки);
			Период = Сред(Документ.ПоказательПериода, 1, 2);
			Если Период = "МС" Тогда
				Месяц = Сред(Документ.ПоказательПериода, 4, 2);
				ЗаполнитьСвойствоXDTO(СекцияПериод, "Tp", "MM" + Месяц, , ТекстОшибки);
			ИначеЕсли Период = "КВ" Тогда
				Квартал = Сред(Документ.ПоказательПериода, 5, 1);
				ЗаполнитьСвойствоXDTO(СекцияПериод, "Tp", "QTR" + Квартал, , ТекстОшибки);
			ИначеЕсли Период = "ПЛ" Тогда
				Полугодие = Сред(Документ.ПоказательПериода, 5, 1);
				ЗаполнитьСвойствоXDTO(СекцияПериод, "Tp", "HLF" + Полугодие, , ТекстОшибки);
			ИначеЕсли Период = "ГД" Тогда
				// при годовом не указывается
			Иначе // указана точная дата
				СекцияДата = ОбъектТипаCML(Фабрика, "DatePeriodDetails", ПространствоИмен);
				Дата = ДатаИзСтрокиРФ(Документ.ПоказательПериода);
				ЗаполнитьСвойствоXDTO(СекцияДата, "FrDt", Дата, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияДата, "ToDt", Дата, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияПериод, "FrToDt", СекцияДата, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СекцияРасшифровкаНалога, "Prd", СекцияПериод, , ТекстОшибки);
		ИначеЕсли Документ.ПоказательПериода <> "0" Тогда // для таможенных платежей
			СекцияПолучатель = ОбъектТипаCML(Фабрика, "TaxParty1", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(СекцияПолучатель, "RegnId", Документ.ПоказательПериода, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияНалог, "Cdtr", СекцияПолучатель, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	СекцияНалог.Rcrd.Добавить(СекцияРасшифровкаНалога);
		
КонецПроцедуры

Функция ДатаИзСтрокиРФ(ДатаСтрокой)
	
	Возврат Дата(Число(Сред(ДатаСтрокой, 7)), Число(Сред(ДатаСтрокой, 4, 2)), Число(Сред(ДатаСтрокой, 1, 2)));
	
КонецФункции

Процедура ВыгрузитьКодВидаДоходаISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки)
	
	Если ЗначениеЗаполнено(Документ.КодВидаДохода) Тогда
		СекцияКодаВидаДохода = ОбъектТипаCML(Фабрика, "RegulatoryReporting3", ПространствоИмен);
		СекцияДетали = ОбъектТипаCML(Фабрика, "StructuredRegulatoryReporting3", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияДетали, "Dt", "PTCD", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияДетали, "Cd", Документ.КодВидаДохода, , ТекстОшибки);
		СекцияКодаВидаДохода.Dtls.Добавить(СекцияДетали);
		СекцияТранзакция.RgltryRptg.Добавить(СекцияКодаВидаДохода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьИнформациюОКомиссииВISO20022(СекцияЗаголовокПлатежа, Документ, ТекстОшибки)
	
	ТипКомиссии = Неопределено;
	Если ЗначениеЗаполнено(Документ.ТипКомиссииЗаПеревод) Тогда
		Если Документ.ТипКомиссииЗаПеревод = Перечисления.ТипыКомиссииЗаБанковскиеПереводы.BEN Тогда
			ТипКомиссии = "CRED";
		ИначеЕсли Документ.ТипКомиссииЗаПеревод = Перечисления.ТипыКомиссииЗаБанковскиеПереводы.OUR Тогда
			ТипКомиссии = "DEBT";
		ИначеЕсли Документ.ТипКомиссииЗаПеревод = Перечисления.ТипыКомиссииЗаБанковскиеПереводы.SHA Тогда
			ТипКомиссии = "SHAR";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТипКомиссии) Тогда
			ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "ChrgBr", ТипКомиссии, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДебитораВISO20022(
	Фабрика,
	НазванияТипов,
	ПространствоИмен,
	СекцияЗаголовокПлатежа,
	Документ,
	ТекстОшибки)
	
	НаименованиеОрганизации = ?(ЗначениеЗаполнено(Документ.ОрганизацияНаименованиеМеждународное),
		Документ.ОрганизацияНаименованиеМеждународное, Документ.ОрганизацияНаим);
	СекцияЗаголовокДебитор = ОбъектТипаCML(Фабрика, НазванияТипов.PartyIdentification, ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокДебитор, "Nm", НаименованиеОрганизации, Истина, ТекстОшибки);
	Если ЗначениеЗаполнено(Документ.ОрганизацияИНН) Тогда
		ИдентификаторУчастникаISO = ИдентификаторУчастникаISO(
			Фабрика, НазванияТипов, ПространствоИмен, Документ.ОрганизацияИНН, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокДебитор, "Id", ИдентификаторУчастникаISO, , ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "Dbtr", СекцияЗаголовокДебитор, Истина, ТекстОшибки);
	
	СекцияСчетПлательщика = СчетISO(Фабрика, НазванияТипов, ПространствоИмен, Документ.ОрганизацияРасчСчет,
									Документ.БанковскийСчетОрганизацииIBAN, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "DbtrAcct", СекцияСчетПлательщика, Истина, ТекстОшибки);

	БанкПлательщик = ОбъектТипаCML(
		Фабрика, НазванияТипов.BranchAndFinancialInstitutionIdentification, ПространствоИмен);
	БанкПлательщикИД = ОбъектТипаCML(Фабрика, НазванияТипов.FinancialInstitutionIdentification, ПространствоИмен);
	Если ЗначениеЗаполнено(Документ.ОрганизацияСВИФТБанка) Тогда
		ЗаполнитьСвойствоXDTO(
			БанкПлательщикИД, НазванияТипов.BIC, Документ.ОрганизацияСВИФТБанка, Истина, ТекстОшибки);
	Иначе
		
		Если ЗначениеЗаполнено(Документ.ОрганизацияБИКБанка) Тогда
			НациональныйКодБанка = ОбъектТипаCML(Фабрика, "GenericFinancialIdentification1", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(НациональныйКодБанка, "Id", Документ.ОрганизацияБИКБанка, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкПлательщикИД, "Othr", НациональныйКодБанка, Истина, ТекстОшибки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Не заполнен идентификатор банка организации (БИК / SWIFT)'");
		КонецЕсли;
		
	КонецЕсли;
	НаименованиеБанка = ?(ЗначениеЗаполнено(Документ.ОрганизацияБанкМеждународный),
						Документ.ОрганизацияБанкМеждународный, Документ.ОрганизацияБанк);
	ЗаполнитьСвойствоXDTO(БанкПлательщикИД, "Nm", НаименованиеБанка, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БанкПлательщик, "FinInstnId", БанкПлательщикИД, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "DbtrAgt", БанкПлательщик, Истина, ТекстОшибки);

КонецПроцедуры

Процедура ВыгрузитьКредитораISO20022(Фабрика, НазванияТипов, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки)
	
	ВыгрузитьБанкПолучателяВISO20022(Фабрика, НазванияТипов, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);
	
	Получатель = ОбъектТипаCML(Фабрика, НазванияТипов.PartyIdentification, ПространствоИмен);
	НаименованиеПолучателя = ?(ЗначениеЗаполнено(Документ.КонтрагентНаименованиеМеждународное),
								Документ.КонтрагентНаименованиеМеждународное, Документ.КонтрагентНаим);
	// Банки Европы применяют версию формата pain.001.001.03 и в наименование получателя добавляют ИНН/КПП
	Если СтрЗаканчиваетсяНа(ПространствоИмен, "pain.001.001.03") И Документ.ISOКодВалюты = "RUB" Тогда
		НаименованиеПолучателя = Документ.КонтрагентИНН
			+ ?(ЗначениеЗаполнено(Документ.КПППолучателя), "/" + Документ.КПППолучателя, "") + " "
			+ НаименованиеПолучателя;
		Остаток = Сред(НаименованиеПолучателя, 71);
		// RUB payment - the taxpayer identification number or INN (and KPP) is inserted in the tag
		// Creditor/Name before the name. If the Creditor's name is too long, the remainder of the name
		// must be written in the PstlAdr/AdrLine tag without any spaces (without a hyphen).
		Если ЗначениеЗаполнено(Остаток) Тогда
			СекцияПочтовыйАдрес = ОбъектТипаCML(Фабрика, "PostalAddress6", ПространствоИмен);
			ДобавитьАдресВСекциюСРазбивкой(СекцияПочтовыйАдрес, Остаток);
			ЗаполнитьСвойствоXDTO(Получатель, "PstlAdr", СекцияПочтовыйАдрес, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(Получатель, "Nm", НаименованиеПолучателя, , ТекстОшибки);
	Если ЗначениеЗаполнено(Документ.КонтрагентИНН) Тогда
		СекцияИдентификаторПолучателя = ИдентификаторУчастникаISO(
			Фабрика, НазванияТипов, ПространствоИмен, Документ.КонтрагентИНН, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Получатель, "Id", СекцияИдентификаторПолучателя, , ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "Cdtr", Получатель, , ТекстОшибки);
	
	СчетПолучатель = СчетISO(Фабрика, НазванияТипов, ПространствоИмен, Документ.КонтрагентРасчСчет,
								Документ.БанковскийСчетКонтрагентаIBAN, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "CdtrAcct", СчетПолучатель, , ТекстОшибки);
	
КонецПроцедуры

Процедура ВыгрузитьБанкПолучателяВISO20022(
	Фабрика,
	НазванияТипов,
	ПространствоИмен,
	СекцияТранзакция,
	Документ,
	ТекстОшибки)
	
	БанкПолучатель = ОбъектТипаCML(
		Фабрика, НазванияТипов.BranchAndFinancialInstitutionIdentification, ПространствоИмен);
	БанкПолучательИД = ОбъектТипаCML(Фабрика, НазванияТипов.FinancialInstitutionIdentification, ПространствоИмен);
	Если ЗначениеЗаполнено(Документ.КонтрагентСВИФТБанка) Тогда
		ЗаполнитьСвойствоXDTO(БанкПолучательИД, НазванияТипов.BIC, Документ.КонтрагентСВИФТБанка, Истина, ТекстОшибки);
	Иначе
		
		Если ЗначениеЗаполнено(Документ.КонтрагентБИКБанка) Тогда
			НациональныйКодБанка = ОбъектТипаCML(Фабрика, "GenericFinancialIdentification1", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(НациональныйКодБанка, "Id", Документ.КонтрагентБИКБанка, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкПолучательИД, "Othr", НациональныйКодБанка, Истина, ТекстОшибки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Не заполнен идентификатор банка получателя (БИК / SWIFT)'");
		КонецЕсли;
		
	КонецЕсли;
	НаименованиеБанка = ?(ЗначениеЗаполнено(Документ.КонтрагентБанкМеждународный),
						Документ.КонтрагентБанкМеждународный, Документ.КонтрагентБанк);
	Если Документ.ISOКодВалюты = "RUB" Тогда
		// RUB payment - full name of the Creditor's Agent + city + BIC of the Creditor Agent (9 digits)
		// + correspondent account of the Creditor's Agent in the Central Bank of the Russian Federation
		// (20 digits, starts with 301). The last three digits of the BIC and the correspondent account
		// must coincide.
		ГородБанка = ?(ЗначениеЗаполнено(Документ.КонтрагентГородБанкаМеждународный),
						Документ.КонтрагентГородБанкаМеждународный, Документ.КонтрагентГородБанка);
		НаименованиеБанка = НаименованиеБанка + " " + ГородБанка + " " + Документ.КонтрагентБИКБанка + " "
							+ Документ.КонтрагентКоррСчет;
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(БанкПолучательИД, "Nm", НаименованиеБанка, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БанкПолучатель, "FinInstnId", БанкПолучательИД, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "CdtrAgt", БанкПолучатель, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(Документ.КонтрагентКоррСчет) Тогда
		СчетБанкаПосредника = СчетISO(Фабрика, НазванияТипов, ПространствоИмен, Документ.КонтрагентКоррСчет,
										Документ.БанковскийСчетКонтрагентаIBAN, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "CdtrAgtAcct", СчетБанкаПосредника, Истина, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ДвоичныеДанныеИзXDTO(Фабрика, ЭД)

	НоваяЗаписьXML = Новый ЗаписьXML;
	ПотокВПамяти = Новый ПотокВПамяти();
	НоваяЗаписьXML.ОткрытьПоток(ПотокВПамяти, "UTF-8");
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	НазначениеТипа = НазначениеТипаXML.Явное;
	Фабрика.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , НазначениеТипа);
	НоваяЗаписьXML.Закрыть();
	Возврат ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции

Функция МассивСтрокНазначенияПлатежаДляISO(НазначениеПлатежа)

	МассивВозврата = Новый Массив;
	ОграничениеСтрокиФорматаISO = 140;

	Для Счетчик = 1 По СтрЧислоСтрок(НазначениеПлатежа) Цикл
		ТекСтрока = СтрПолучитьСтроку(НазначениеПлатежа, Счетчик);
		Если СтрДлина(ТекСтрока) > ОграничениеСтрокиФорматаISO Тогда
			Пока СтрДлина(ТекСтрока) > 0 Цикл
				КоличествоКСрезу = Мин(ОграничениеСтрокиФорматаISO, СтрДлина(ТекСтрока));
				КусокСтроки = Сред(ТекСтрока, 1, КоличествоКСрезу);
				МассивВозврата.Добавить(КусокСтроки);
				Если СтрДлина(ТекСтрока) <= ОграничениеСтрокиФорматаISO Тогда
					Прервать;
				КонецЕсли;
				ТекСтрока = Сред(ТекСтрока, КоличествоКСрезу + 1);
			КонецЦикла;
		Иначе
			МассивВозврата.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивВозврата;

КонецФункции

Процедура ДобавитьАдресВСекциюСРазбивкой(СекцияПочтовыйАдрес, Адрес)

	Для Счетчик = 1 По СтрЧислоСтрок(Адрес) Цикл
		ТекСтрока = СтрПолучитьСтроку(Адрес, Счетчик);
		Пока СтрДлина(ТекСтрока) > 70 Цикл
			СрезСтроки = Сред(ТекСтрока, 1, 70);
			СекцияПочтовыйАдрес.AdrLine.Добавить(СрезСтроки);
			ТекСтрока = Сред(ТекСтрока, 71);
		КонецЦикла;
		СекцияПочтовыйАдрес.AdrLine.Добавить(ТекСтрока);
	КонецЦикла;

КонецПроцедуры

Функция ИдентификаторУчастникаISO(Фабрика, НазванияТипов, ПространствоИмен, ИНН, ТекстОшибки)

	СекцияЗаголовокИд = ОбъектТипаCML(Фабрика, НазванияТипов.Party, ПространствоИмен);
	СекцияЗаголовокОрг = ОбъектТипаCML(Фабрика, НазванияТипов.OrganisationIdentification, ПространствоИмен);
	СекцияЗаголовокОргИд = ОбъектТипаCML(Фабрика, "GenericOrganisationIdentification1", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокОргИд, "Id", ИНН, Истина, ТекстОшибки);
	СекцияЗаголовокОрг.Othr.Добавить(СекцияЗаголовокОргИд);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокИд, "OrgId", СекцияЗаголовокОрг, Ложь, ТекстОшибки);
	Возврат СекцияЗаголовокИд;

КонецФункции

Функция СчетISO(Фабрика, НазванияТипов, ПространствоИмен, НомерСчета, ЭтоIBAN, ТекстОшибки)

	СекцияЗаголовокСчет = ОбъектТипаCML(Фабрика, НазванияТипов.CashAccount, ПространствоИмен);
	СекцияЗаголовокСчетИд = ОбъектТипаCML(Фабрика, "AccountIdentification4Choice", ПространствоИмен);
	Если ЭтоIBAN Тогда
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетИд, "IBAN", НомерСчета, Истина, ТекстОшибки);
	Иначе
		СекцияЗаголовокСчетТип = ОбъектТипаCML(Фабрика, "GenericAccountIdentification1", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетТип, "Id", НомерСчета, Истина, ТекстОшибки);
		СекцияЗаголовокСчетТипИмя = ОбъектТипаCML(Фабрика, "AccountSchemeName1Choice", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетТипИмя, "Cd", "BBAN", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетТип, "SchmeNm", СекцияЗаголовокСчетТипИмя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетИд, "Othr", СекцияЗаголовокСчетТип, Истина, ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчет, "Id", СекцияЗаголовокСчетИд, Истина, ТекстОшибки);
	
	Возврат СекцияЗаголовокСчет;

КонецФункции

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)

	// Проверка на соответствие длины фасету для строк
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Свойства = ОбъектXDTO.Свойства();
		УстанавливаемоеСвойство = Свойства.Получить(ИмяСвойства);
		Фасеты = УстанавливаемоеСвойство.Тип.Фасеты;
		Если Фасеты <> Неопределено Тогда
			ФасетМаксимальнаяДлина = Фасеты.Получить(ВидФасетаXDTO.МаксДлина);
			Если ФасетМаксимальнаяДлина <> Неопределено Тогда
				МаксимальнаяДлина = Число(ФасетМаксимальнаяДлина.Значение);
				Если СтрДлина(Значение) > МаксимальнаяДлина Тогда
					ШаблонОшибки = НСтр("ru = 'Ошибка установки свойства %1
						|Устанавливаемое значение: %2
						|Текущая длина строки: %3 
						|Допустимая длина строки: %4'");
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ОбъектXDTO.Тип().Имя + "."
						+ ИмяСвойства, Значение, СтрДлина(Значение), МаксимальнаяДлина);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ФасетМинимальнаяДлина = Фасеты.Получить(ВидФасетаXDTO.МинДлина);
			Если ФасетМинимальнаяДлина <> Неопределено Тогда
				МинимальнаяДлина = Число(ФасетМинимальнаяДлина.Значение);
				Если СтрДлина(Значение) < МинимальнаяДлина Тогда
					ШаблонОшибки = НСтр("ru = 'Ошибка установки свойства %1
						|Устанавливаемое значение: %2
						|Текущая длина строки: %3 
						|Минимальная длина строки: %4'");
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ОбъектXDTO.Тип().Имя + "."
						+ ИмяСвойства, Значение, СтрДлина(Значение), МинимальнаяДлина);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
			|Ошибка установки значения свойства ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС
			+ ТекстСообщения, ТекстСообщения);

		ЗаписатьВЖурналРегистрации(ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки

КонецПроцедуры

Процедура ЗаписатьВЖурналРегистрации(Комментарий, Уровень = Неопределено, ПараметрыЗаписи = Неопределено)
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = НовыеПараметрыЗаписиВЖурналРегистрации();
	КонецЕсли;
	
	УровеньВажностиСобытия = ?(ТипЗнч(Уровень) = Тип("УровеньЖурналаРегистрации"), Уровень,
							УровеньЖурналаРегистрации.Ошибка);
	ПолноеИмяСобытия = НСтр("ru = 'Выгрузка платежей в банк. Формирование xml файла.'");
	ЗаписьЖурналаРегистрации(ПолноеИмяСобытия, УровеньВажностиСобытия, ПараметрыЗаписи.ОбъектМетаданных,
		ПараметрыЗаписи.Данные, Комментарий, ПараметрыЗаписи.РежимТранзакции);
	
КонецПроцедуры

Функция НовыеПараметрыЗаписиВЖурналРегистрации()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектМетаданных", Неопределено);
	Параметры.Вставить("Данные", Неопределено);
	Параметры.Вставить("РежимТранзакции", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьСвойствоXDTO(
	ОбъектXDTO,
	ИмяСвойства,
	Значение,
	Обязательное = Ложь,
	ТекстОшибки = "",
	УстанавливатьПустыеЗначения = Ложь) Экспорт

	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO")
			ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение)
				ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ОбъектТипаCML(Фабрика, Путь, URIПространстваИмен)

	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		ТипОбъекта = ТипОбъектаCML(Фабрика, URIПространстваИмен, Путь);
	Иначе
		ТипОбъекта = Путь;
	КонецЕсли;

	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйОбъект = Фабрика.Создать(ТипОбъекта);

	Возврат НовыйОбъект;

КонецФункции

Функция ТипОбъектаCML(Фабрика, URIПространстваИмен, Путь)

	МассивПути = ЭлементыПутиТипаXDTO(Путь, ".");

	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент, 1) = "{" И Прав(ПервыйЭлемент, 1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = Фабрика.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = Фабрика.Тип(URIПространстваИмен, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;

	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл

		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;

	КонецЦикла;

	Возврат ТипОбъекта;

КонецФункции

Функция ЭлементыПутиТипаXDTO(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = СтрНайти(Строка, "{");
	КонПозицияПервогоЭлемента = СтрНайти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = СтрНайти(Строка, Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

//++ Локализация
#Область РазборВыпискиПрямойОбмен

Функция РазобратьДеревоВыписки(ДеревоДанных) Экспорт
	
	Если ДеревоДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("Заголовок, СписокСчетов, РасчетныеСчета, ДокументыВыписки, ОшибкиРазбора");
	Заголовок               = Новый Структура;
	РасчетныеСчета          = Новый Массив;
	ДокументыВыписки        = Новый ТаблицаЗначений;
	ОшибкиРазбора           = Новый Массив;
	
	ТаблицаОпераций = Новый ТаблицаЗначений;
	Выписка = ДеревоДанных.Строки[0].Строки[0];
	Операции = Выписка.Строки.Найти("Операции", "Уровень3");
	Если Операции <> Неопределено Тогда
		ДобавитьКолонкиВТаблицуОпераций(Операции.Строки[0].Строки, ТаблицаОпераций);
	КонецЕсли;
	
	РасчетныеСчетаВыписки = Новый Массив;
	Для каждого СтрокаДерева Из ДеревоДанных.Строки[0].Строки Цикл
		ЗаголовокВыписки = Новый Структура;
		ИнициализироватьЗаголовокВыписки(СтрокаДерева.Строки, ЗаголовокВыписки);
		РасчетныеСчетаВыписки.Добавить(ЗаголовокВыписки);
		СтрокиОпераций = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Уровень3", "Операции"));
		ЦиклПоСтрокамДерева(СтрокиОпераций, ТаблицаОпераций);
	КонецЦикла;
	
	// Документы
	ПоляДокументовКЗагрузке = ПоляДокументовКЗагрузке();
	ДокументыВыписки = Обработки.КлиентБанк.Создать().ДокументыКЗагрузке.ВыгрузитьКолонки();
	
	Для каждого СтрокаТаблицы Из ТаблицаОпераций Цикл
		
		ДокументВыписки = ДокументыВыписки.Добавить();
		СекцияДокумента = "СЕКЦИЯДОКУМЕНТ" + Символы.ПС;
		Для каждого КлючИЗначение Из ПоляДокументовКЗагрузке Цикл
			ДокументВыписки[КлючИЗначение.Значение] = СтрокаТаблицы[КлючИЗначение.Ключ];
			СекцияДокумента = СекцияДокумента + КлючИЗначение.Значение + "=" + СтрокаТаблицы[КлючИЗначение.Ключ] + Символы.ПС;
		КонецЦикла;
		ДокументВыписки.ДанныеВыписки = СекцияДокумента + "КОНЕЦДОКУМЕНТА";
		
		Если СтрокаТаблицы.НаправлениеПлатежа = "1" Тогда
			ДокументВыписки.СуммаСписано = ДокументВыписки.СуммаДокумента;
			ДокументВыписки.ДатаСписано = ДокументВыписки.ДатаПроведения;
		Иначе
			ДокументВыписки.СуммаПоступило = ДокументВыписки.СуммаДокумента;
			ДокументВыписки.ДатаПоступило = ДокументВыписки.ДатаПроведения;
		КонецЕсли;
	КонецЦикла;
	
	// Заголовок
	Заголовок.Вставить("ДатаНачала", Дата(3999, 1, 1));
	Заголовок.Вставить("ДатаКонца", Дата(1, 1, 1));
	
	Для каждого СтрокаЗаголовка Из РасчетныеСчетаВыписки Цикл
		Если СтрокаЗаголовка.НачалоПериода < Заголовок.ДатаНачала Тогда
			Заголовок.ДатаНачала = СтрокаЗаголовка.НачалоПериода;
		КонецЕсли;
		Если СтрокаЗаголовка.КонецПериода > Заголовок.ДатаКонца Тогда
			Заголовок.ДатаКонца = СтрокаЗаголовка.КонецПериода;
		КонецЕсли;
	КонецЦикла;
	
	// Расчетные счета
	Для каждого СтрокаСчет Из РасчетныеСчетаВыписки Цикл
		РасчетныйСчет = Новый Структура;
		Для каждого ПолеРасчетногоСчета Из ПоляРасчетногоСчета() Цикл
			РасчетныйСчет.Вставить(ПолеРасчетногоСчета.Значение, СтрокаСчет[ПолеРасчетногоСчета.Ключ]);
		КонецЦикла;
		РасчетныеСчета.Добавить(РасчетныйСчет);
	КонецЦикла;
	
	Результат.Заголовок        = Заголовок;
	Результат.РасчетныеСчета   = РасчетныеСчета;
	Результат.ДокументыВыписки = ДокументыВыписки;
	Результат.ОшибкиРазбора    = ОшибкиРазбора;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКолонкиВТаблицуОпераций(СтрокиДерева, Таблица)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		ПолныйПуть = СтрЗаменить(СтрокаДерева.ПолныйПуть, ".", "_");
		ПолныйПуть = СтрЗаменить(ПолныйПуть, "Выписки_НомерСтроки_Операции_НомерСтроки_", "");
		Если Таблица.Колонки.Найти(ПолныйПуть) = Неопределено Тогда
			Таблица.Колонки.Добавить(ПолныйПуть, Новый ОписаниеТипов(СтрокаДерева.Тип));
		КонецЕсли;
		ДобавитьКолонкиВТаблицуОпераций(СтрокаДерева.Строки, Таблица);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЦиклПоСтрокамДерева(СтрокиДерева, Таблица, Знач ТекущаяСтрокаТаблицы = Неопределено)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ПолныйПуть = СтрЗаменить(СтрокаДерева.ПолныйПуть, ".", "_");
		ПолныйПуть = СтрЗаменить(ПолныйПуть, "Выписки_НомерСтроки_Операции_НомерСтроки_", "");
		
		Если ПолныйПуть = "Выписки_НомерСтроки_Операции_НомерСтроки" Тогда
			ТекущаяСтрокаТаблицы = Таблица.Добавить();
		ИначеЕсли СтрокаДерева.Уровень() >= 4 Тогда
			ТекущаяСтрокаТаблицы[ПолныйПуть] = СтрокаДерева.Значение;
		КонецЕсли;
		
		ЦиклПоСтрокамДерева(СтрокаДерева.Строки, Таблица, ТекущаяСтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьЗаголовокВыписки(СтрокиЗаголовка, ЗаголовокВыписки)
	
	Для каждого СтрокаЗаголовка Из СтрокиЗаголовка Цикл
		ПолныйПуть = СтрЗаменить(СтрокаЗаголовка.ПолныйПуть, ".", "_");
		ПолныйПуть = СтрЗаменить(ПолныйПуть, "Выписки_НомерСтроки_", "");
		Если ПолныйПуть = "Банк" Или ПолныйПуть = "Организация" Тогда
			ИнициализироватьЗаголовокВыписки(СтрокаЗаголовка.Строки, ЗаголовокВыписки);
		Иначе
			ОписаниеТипов = Новый ОписаниеТипов(СтрокаЗаголовка.Тип);
			ЗаголовокВыписки.Вставить(ПолныйПуть, ОписаниеТипов.ПривестиЗначение(СтрокаЗаголовка.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоляРасчетногоСчета()
	
	Поля = Новый Структура;
	
	Поля.Вставить("НачалоПериода", "ДатаНачала");
	Поля.Вставить("КонецПериода", "ДатаКонца");
	Поля.Вставить("НомерСчета", "РасчСчет");
	Поля.Вставить("НачальныйОстаток", "НачальныйОстаток");
	Поля.Вставить("ОборотВходящихПлатежей", "ВсегоПоступило");
	Поля.Вставить("ОборотИсходящихПлатежей", "ВсегоСписано");
	Поля.Вставить("КонечныйОстаток", "КонечныйОстаток");
	
	Возврат Поля;
	
КонецФункции

Функция ПоляДокументовКЗагрузке()
	
	Поля = Новый Структура;
	
	Поля.Вставить("ДатаОперации", "ДатаПроведения");
	Поля.Вставить("ДатаДокумента", "Дата");
	Поля.Вставить("НомерДокумента", "Номер");
	Поля.Вставить("СуммаДокумента", "Сумма");
	Поля.Вставить("ВидДокумента", "Операция");
	Поля.Вставить("НазначениеПлатежа", "НазначениеПлатежа");
	Поля.Вставить("УникальныйИдентификаторПлатежа", "Код");
	Поля.Вставить("КодВидаДохода", "КодНазПлатежа");
	
	Поля.Вставить("Плательщик_Наименование", "Плательщик");
	Поля.Вставить("Плательщик_НаименованиеМеждународное", "ПлательщикНаименованиеМеждународное");
	Поля.Вставить("Плательщик_АдресСтруктурированный_Страна_ISOКод", "ПлательщикСтрана");
	Поля.Вставить("Плательщик_ИНН", "ПлательщикИНН");
	Поля.Вставить("Плательщик_РасчСчет", "ПлательщикСчет");
	
	Поля.Вставить("Плательщик_Банк",               "ПлательщикБанк1");
	Поля.Вставить("Плательщик_Банк_Город",         "ПлательщикБанк2");
	Поля.Вставить("Плательщик_Банк_БИК",           "ПлательщикБИК");
	Поля.Вставить("Плательщик_Банк_SWIFT",         "ПлательщикСВИФТ");
	Поля.Вставить("Плательщик_Банк_КоррСчет",      "ПлательщикКорсчет");
	Поля.Вставить("Плательщик_Банк_НаименованиеМеждународное", "ПлательщикБанк3");
	Поля.Вставить("Плательщик_Банк_Адрес",         "ПлательщикБанк4");
	Поля.Вставить("Плательщик_Банк_Страна_ISOКод", "ПлательщикБанк5");
	
	
	Поля.Вставить("Получатель_Наименование", "Получатель");
	Поля.Вставить("Получатель_НаименованиеМеждународное", "ПолучательНаименованиеМеждународное");
	Поля.Вставить("Получатель_АдресСтруктурированный_Страна_ISOКод", "ПолучательСтрана");
	Поля.Вставить("Получатель_ИНН", "ПолучательИНН");
	Поля.Вставить("Получатель_КПП", "ПолучательКПП");
	Поля.Вставить("Получатель_РасчСчет", "ПолучательСчет");
	
	Поля.Вставить("Получатель_Банк",               "ПолучательБанк1");
	Поля.Вставить("Получатель_Банк_Город",         "ПолучательБанк2");
	Поля.Вставить("Получатель_Банк_БИК",           "ПолучательБИК");
	Поля.Вставить("Получатель_Банк_SWIFT",         "ПолучательСВИФТ");
	Поля.Вставить("Получатель_Банк_КоррСчет",      "ПолучательКорсчет");
	Поля.Вставить("Получатель_Банк_НаименованиеМеждународное", "ПолучательБанк3");
	Поля.Вставить("Получатель_Банк_Адрес",         "ПолучательБанк4");
	Поля.Вставить("Получатель_Банк_Страна_ISOКод", "ПолучательБанк5");
	
	
	Поля.Вставить("ПлатежВБюджет_СтатусСоставителя",     "СтатусСоставителя");
	Поля.Вставить("ПлатежВБюджет_ПоказательКБК",         "ПоказательКБК");
	Поля.Вставить("ПлатежВБюджет_ОКТМО",                 "ОКАТО");
	Поля.Вставить("ПлатежВБюджет_ПоказательОснования",   "ПоказательОснования");
	Поля.Вставить("ПлатежВБюджет_ПоказательПериода",     "ПоказательПериода");
	Поля.Вставить("ПлатежВБюджет_ПоказательНомера",      "ПоказательНомера");
	Поля.Вставить("ПлатежВБюджет_ПоказательДаты",        "ПоказательДаты");
	Поля.Вставить("ПлатежВБюджет_КодВыплат",             "ПоказательТипа");
	
	Возврат Поля;
	
КонецФункции

Функция РазобратьДеревоВыпискиУстар(ДеревоРазбора) Экспорт
	
	Если ДеревоРазбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("Заголовок, СписокСчетов, РасчетныеСчета, ДокументыВыписки, ОшибкиРазбора");
	ЗаголовокВыписки        = Новый Структура;
	СписокСчетовВыписки     = Новый Массив;
	РасчетныеСчетаВыписки   = Новый Массив;
	ДокументыВыписки        = Новый ТаблицаЗначений;
	ОшибкиРазбора           = Новый Массив;
	
	ТегиСтрокиДокумента = ТегиСтрокиДокумента();
	Для каждого Тэг Из ТегиСтрокиДокумента Цикл
		ДокументыВыписки.Колонки.Добавить(Тэг.Ключ);
	КонецЦикла;
	
	НазваниеРеквизита = Неопределено;
	СтруктураСинонимовРеквизитов = Новый Структура;
	СтруктураСинонимовРеквизитов.Вставить("ПлательщикНаименование",                     "Плательщик");
	СтруктураСинонимовРеквизитов.Вставить("ПлательщикНаименованиеНепрямыеРасчеты",      "Плательщик1");
	СтруктураСинонимовРеквизитов.Вставить("ПлательщикСчетНепрямыеРасчеты",              "Плательщик2");
	СтруктураСинонимовРеквизитов.Вставить("ПлательщикНаименованиеБанкаНепрямыеРасчеты", "Плательщик3");
	СтруктураСинонимовРеквизитов.Вставить("ПлательщикГородБанкаНепрямыеРасчеты",        "Плательщик4");
	СтруктураСинонимовРеквизитов.Вставить("ПлательщикНаименованиеБанка",                "ПлательщикБанк1");
	СтруктураСинонимовРеквизитов.Вставить("ПлательщикГородБанка",                       "ПлательщикБанк2");
	СтруктураСинонимовРеквизитов.Вставить("ПлательщикКорСчетБанка",                     "ПлательщикКорсчет");
	СтруктураСинонимовРеквизитов.Вставить("ПолучательНаименование",                     "Получатель");
	СтруктураСинонимовРеквизитов.Вставить("ПолучательНаименованиеНепрямыеРасчеты",      "Получатель1");
	СтруктураСинонимовРеквизитов.Вставить("ПолучательСчетНепрямыеРасчеты",              "Получатель2");
	СтруктураСинонимовРеквизитов.Вставить("ПолучательНаименованиеБанкаНепрямыеРасчеты", "Получатель3");
	СтруктураСинонимовРеквизитов.Вставить("ПолучательГородБанкаНепрямыеРасчеты",        "Получатель4");
	СтруктураСинонимовРеквизитов.Вставить("ПолучательНаименованиеБанка",                "ПолучательБанк1");
	СтруктураСинонимовРеквизитов.Вставить("ПолучательГородБанка",                       "ПолучательБанк2");
	СтруктураСинонимовРеквизитов.Вставить("ПолучательКорСчетБанка",                     "ПолучательКорсчет");
	СтруктураСинонимовРеквизитов.Вставить("ОКТМО",                                      "ОКАТО");
	
	Для Каждого ОбъектКРазбору Из ДеревоРазбора.Строки Цикл
		
		Если ОбъектКРазбору.ТипОбъекта = "БанковскийСчет" Тогда
			
			Для Каждого БанковскийСчет Из ОбъектКРазбору.Строки Цикл
				
				ТегиРасчетногоСчета = ТегиРасчетногоСчета();
				ТегиРасчетногоСчета.Вставить("ИндексСтроки", БанковскийСчет.ИндексСтроки);
				
				Для Каждого СтрокаРеквизита Из БанковскийСчет.Строки Цикл
					Если ТегиРасчетногоСчета.Свойство(СтрокаРеквизита.Реквизит) <> Неопределено Тогда
						ТегиРасчетногоСчета[СтрокаРеквизита.Реквизит] = СтрокаРеквизита.ЗначениеРеквизита;
					КонецЕсли;
				КонецЦикла;
				РасчетныеСчетаВыписки.Добавить(ТегиРасчетногоСчета);
			КонецЦикла;
			
		Иначе
			Для Каждого ВыпискаБанка Из ОбъектКРазбору.Строки Цикл
				Для Каждого СтрокаВыписки Из ВыпискаБанка.Строки Цикл
					
					Если СтрокаВыписки.Реквизит = "СтрокаТЧ" И СтрокаВыписки.Строки.Количество() > 0 Тогда
						
						НоваяСтрока = ДокументыВыписки.Добавить();
						СекцияДокумента = "СЕКЦИЯДОКУМЕНТ" + Символы.ПС;
						
						Для Каждого СтрокаРеквизита Из СтрокаВыписки.Строки Цикл
							
							Если СтрокаРеквизита.Реквизит = "СекцияДокумент" Тогда
								НоваяСтрока.Операция = СтрокаРеквизита.ЗначениеРеквизита;
							КонецЕсли;
							
							// Переопределяем имена реквизитов
							Если Не СтруктураСинонимовРеквизитов.Свойство(СтрокаРеквизита.Реквизит, НазваниеРеквизита) Тогда
								НазваниеРеквизита = СтрокаРеквизита.Реквизит;
							КонецЕсли;
							
							Если ДокументыВыписки.Колонки.Найти(НазваниеРеквизита) <> Неопределено Тогда
								
								НоваяСтрока[НазваниеРеквизита] = СтрокаРеквизита.ЗначениеРеквизита;
								
								СекцияДокумента = СекцияДокумента + НазваниеРеквизита + "=" + СтрокаРеквизита.ЗначениеРеквизита + Символы.ПС;
								
							КонецЕсли;
						КонецЦикла;
						
						НоваяСтрока.ДанныеВыписки = СекцияДокумента + "КОНЕЦДОКУМЕНТА";
						
					ИначеЕсли СтрокаВыписки.Строки.Количество() = 0 Тогда
						ЗаголовокВыписки.Вставить(СтрокаВыписки.Реквизит, СтрокаВыписки.ЗначениеРеквизита);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Результат.Заголовок        = ЗаголовокВыписки;
	Результат.СписокСчетов     = СписокСчетовВыписки;
	Результат.РасчетныеСчета   = РасчетныеСчетаВыписки;
	Результат.ДокументыВыписки = ДокументыВыписки;
	Результат.ОшибкиРазбора    = ОшибкиРазбора;
	
	Возврат Результат;
	
КонецФункции

Функция ТегиРасчетногоСчета()
	
	Возврат Новый Структура("ДатаНачала, ДатаКонца, РасчСчет, НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток");
	
КонецФункции

Функция ТегиСтрокиДокумента()
	
	Возврат Новый Структура(
		"Номер, Дата, Сумма,
		|ВидПлатежа, ВидОплаты, Операция,
		|КвитанцияДата, КвитанцияВремя, КвитанцияСодержание,
		|ДатаСписано, ДатаПоступило,
		|ПлательщикСчет, Плательщик, ПлательщикИНН, Плательщик1,
		|ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,
		|Плательщик2, Плательщик3, Плательщик4,
		|ПолучательСчет, Получатель, ПолучательИНН, Получатель1,
		|ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет,
		|Получатель2, Получатель3, Получатель4,
		|СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО, ОКТМО,
		|ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты, ПоказательТипа,
		|Код,
		|НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3, НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6,
		|СрокПлатежа, Очередность,
		|УсловиеОплаты1, УсловиеОплаты2, УсловиеОплаты3,
		|СрокАкцепта, ВидАккредитива, ПлатежПоПредст, ДополнУсловия, НомерСчетаПоставщика, ДатаОтсылкиДок,
		|ДанныеВыписки
		|");
	
КонецФункции

#КонецОбласти
//-- Локализация

#Область Загрузка

Процедура ПрочитатьДанныеВыпискиISO20022(ДвоичныеДанныеФайла, Результат)
	
	Попытка
		ОбъектXML = Новый ЧтениеXML;
		ПотокВПамяти = ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
		ОбъектXML.ОткрытьПоток(ПотокВПамяти);
		ОбъектXML.Прочитать();
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если ТипЗнч(ЭД.BkToCstmrStmt.Stmt) = Тип("ОбъектXDTO") Тогда
			Выписки = Новый Массив;
			Выписки.Добавить(ЭД.BkToCstmrStmt.Stmt);
		Иначе
			Выписки = ЭД.BkToCstmrStmt.Stmt;
		КонецЕсли;
		ДатаСозданияСтрокой = ЗначениеСвойстваXDTO(ЭД, "BkToCstmrStmt.GrpHdr.CreDtTm");
		Результат.Заголовок.ДатаСоздания = XMLЗначение(Тип("Дата"), ДатаСозданияСтрокой);
		
		Для Каждого Выписка Из Выписки Цикл
			ДанныеПоРасчетномуСчету = ДенежныеСредстваКлиентСервер.ДанныеРасчетногоСчета();
			ДанныеПоРасчетномуСчету.ДатаНачала = XMLЗначение(Тип("Дата"), Выписка.FrToDt.FrDtTm);
			ДанныеПоРасчетномуСчету.ДатаКонца = XMLЗначение(Тип("Дата"), Выписка.FrToDt.ToDtTm);
			РеквизитыВладельцаСчета = РеквизитыВладельцаСчета(Выписка.Acct);
			ДанныеПоРасчетномуСчету.РасчСчет = РеквизитыВладельцаСчета.НомерСчета;
			Результат.Заголовок.Отправитель = ЗначениеСвойстваXDTO(РеквизитыВладельцаСчета, "Svcr.FinInstnId.Nm");
			Результат.Заголовок.ДатаНачала = ДанныеПоРасчетномуСчету.ДатаНачала;
			Результат.Заголовок.ДатаКонца = ДанныеПоРасчетномуСчету.ДатаКонца;
			
			ПрочитатьОстаткиИОборотыISO20022(Выписка, ДанныеПоРасчетномуСчету);
			
			Результат.РасчетныеСчета.Добавить(ДанныеПоРасчетномуСчету);
			Если Выписка.Свойства().Получить("Ntry") <> Неопределено Тогда
				Если ТипЗнч(Выписка.Ntry) = Тип("ОбъектXDTO") Тогда
					Операции = Новый Массив;
					Операции.Добавить(Выписка.Ntry);
				Иначе
					Операции = Выписка.Ntry;
				КонецЕсли;
				Для Каждого Операция Из Операции Цикл
					ПрочитатьОперациюISO20022(Операция, Результат.ДокументыВыписки, РеквизитыВладельцаСчета);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла
	Исключение
		Результат.ОшибкиРазбора.Добавить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция РеквизитыВладельцаСчета(Acct)
			
	ВладелецСчета = Новый Структура;
	КодIBAN = ЗначениеСвойстваXDTO(Acct, "Id.IBAN");
	КодId = ЗначениеСвойстваXDTO(Acct, "Id.Othr.Id");
	ВладелецСчета.Вставить("НомерСчета", ?(ЗначениеЗаполнено(КодIBAN), КодIBAN, КодId));
	ВладелецСчета.Вставить("Наименование", ЗначениеСвойстваXDTO(Acct, "Ownr.Nm"));
	ПлательщикOrgId = ЗначениеСвойстваXDTO(Acct, "Ownr.Id.OrgId.Othr.Id");
	ПлательщикPrvtId = ЗначениеСвойстваXDTO(Acct, "Ownr.Id.PrvtId.Othr.Id");
	ВладелецСчета.Вставить("ИНН", ?(ЗначениеЗаполнено(ПлательщикOrgId), ПлательщикOrgId, ПлательщикPrvtId));
	ВладелецСчета.Вставить("Страна", ЗначениеСвойстваXDTO(Acct, "Ownr.PstlAdr.Ctry"));
	ВладелецСчета.Вставить("БанкSWIFT", ЗначениеСвойстваXDTO(Acct, "Svcr.FinInstnId.BIC"));
	ВладелецСчета.Вставить("Банк", ЗначениеСвойстваXDTO(Acct, "Svcr.FinInstnId.Nm"));
	
	Возврат ВладелецСчета
			
КонецФункции

Процедура ПрочитатьОстаткиИОборотыISO20022(Выписка, ДанныеПоРасчетномуСчету)
	
	// Остатки
	Если ТипЗнч(Выписка.Bal) = Тип("ОбъектXDTO") Тогда
		Балансы = Новый Массив;
		Балансы.Добавить(Выписка.Bal);
	Иначе
		Балансы = Выписка.Bal;
	КонецЕсли;
	Для Каждого Баланс Из Балансы Цикл
		Если Баланс.Tp.CdOrPrtry.Свойства().Получить("Cd") <> Неопределено Тогда
			СуммаСтрокой = Баланс.Amt.Последовательность().ПолучитьТекст(0);
			Если Баланс.Tp.CdOrPrtry.Cd = "OPBD" Тогда
				ДанныеПоРасчетномуСчету.НачальныйОстаток = XMLЗначение(Тип("Число"), СуммаСтрокой);
			ИначеЕсли Баланс.Tp.CdOrPrtry.Cd = "CLBD" Тогда
				ДанныеПоРасчетномуСчету.КонечныйОстаток = XMLЗначение(Тип("Число"), СуммаСтрокой);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Обороты
	Если Выписка.Свойства().Получить("TxsSummry") <> Неопределено Тогда
		Если Выписка.TxsSummry.Свойства().Получить("TtlCdtNtries") <> Неопределено
				И Выписка.TxsSummry.TtlCdtNtries.Свойства().Получить("Sum") <> Неопределено Тогда
			ДанныеПоРасчетномуСчету.ВсегоПоступило = XMLЗначение(Тип("Число"), Выписка.TxsSummry.TtlCdtNtries.Sum);
		КонецЕсли;
		Если Выписка.TxsSummry.Свойства().Получить("TtlDbtNtries") <> Неопределено
				И Выписка.TxsSummry.TtlDbtNtries.Свойства().Получить("Sum") <> Неопределено Тогда
			ДанныеПоРасчетномуСчету.ВсегоСписано = XMLЗначение(Тип("Число"), Выписка.TxsSummry.TtlDbtNtries.Sum);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОперациюISO20022(Операция, ДокументыВыписки, РеквизитыВладельцаСчета)
			
	// Если платеж не исполнен, то он пропускается
	Если Операция.Sts <> "BOOK" Тогда
		Возврат;
	КонецЕсли;
	ДанныеОперации = ДенежныеСредстваСервер.ДанныеЗагружаемойОперации();
	СуммаСтрокой = Операция.Amt.Последовательность().ПолучитьТекст(0);
	ДанныеОперации.Сумма = XMLЗначение(Тип("Число"), СуммаСтрокой);
	ДанныеОперации.НаправлениеПлатежа = ?(Операция.CdtDbtInd = "DBIT", "1", "2");
	ДатаОперации = ЗначениеСвойстваXDTO(Операция, "BookgDt.Dt");
	Если ДатаОперации <> Неопределено Тогда
		ДанныеОперации.ДатаОперации = XMLЗначение(Тип("Дата"), ДатаОперации);
	КонецЕсли;
	ДатаДокумента = ЗначениеСвойстваXDTO(Операция, "ValDt.Dt");
	Если ДатаДокумента <> Неопределено Тогда
		ДанныеОперации.Дата = XMLЗначение(Тип("Дата"), ДатаДокумента);
	Иначе
		ДанныеОперации.Дата = ДанныеОперации.ДатаОперации;
	КонецЕсли;
	ДанныеОперации.Идентификатор = ЗначениеСвойстваXDTO(Операция, "AcctSvcrRef");
	ДанныеОперации.Вставить("ВидОплаты", ЗначениеСвойстваXDTO(Операция, "BkTxCd.Prtry.Cd"));
	Если Операция.Свойства().Получить("NtryDtls") <> Неопределено Тогда
		
		Если ТипЗнч(Операция.NtryDtls) = Тип("ОбъектXDTO") Тогда
			Транзакция = Операция.NtryDtls;
		Иначе
			Транзакция = Операция.NtryDtls[0];
		КонецЕсли;
		Если Транзакция.Свойства().Получить("TxDtls") <> Неопределено Тогда
			Если ТипЗнч(Транзакция.TxDtls) = Тип("ОбъектXDTO") Тогда
				ДетальТранзакции = Транзакция.TxDtls;
			Иначе
				ДетальТранзакции = Транзакция.TxDtls[0];
			КонецЕсли;
			ДанныеОперации.Номер = ЗначениеСвойстваXDTO(ДетальТранзакции, "Refs.EndToEndId");
			ОчередностьПлатежа = ЗначениеСвойстваXDTO(ДетальТранзакции, "Purp.Prtry");
			Если ЗначениеЗаполнено(ОчередностьПлатежа) Тогда
				ДанныеОперации.Вставить("ОчередностьПлатежа", Число(ОчередностьПлатежа));
			КонецЕсли;
			
			ПрочитатьДанныеПлательщикаISO20022(ДетальТранзакции, ДанныеОперации, РеквизитыВладельцаСчета);
			ПрочитатьДанныеПолучателяISO20022(ДетальТранзакции, ДанныеОперации, РеквизитыВладельцаСчета);
		
			ПрочитатьКодИНазначениеПлатежаISO20022(ДетальТранзакции, ДанныеОперации);
			
			ПрочитатьНалоговыеРеквизитыРФ(ДанныеОперации, ДетальТранзакции);
			
		КонецЕсли;
	КонецЕсли;
	
	ДокументыВыписки.Добавить(ДанныеОперации);
		
КонецПроцедуры

Процедура ПрочитатьНалоговыеРеквизитыРФ(ДанныеОперации, ДетальТранзакции)
	
	// Код таможенного органа для таможенных платежей
	ДанныеОперации.Вставить("ПоказательПериода", ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.Cdtr.RegnId"));
	ДанныеОперации.Вставить("ПолучательКПП", ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.Cdtr.TaxTp"));
	ДанныеОперации.Вставить("ПлательщикКПП", ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.Dbtr.TaxTp"));
	ДанныеОперации.Вставить("ОКАТО", ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.AdmstnZn"));
	ДанныеОперации.Вставить("ПоказательНомера", ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.RefNb"));
	ПоказательДатыСтрокой = ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.Dt");
	Если ЗначениеЗаполнено(ПоказательДатыСтрокой) Тогда
		ДанныеОперации.Вставить("ПоказательДатыДок", XMLЗначение(Тип("Дата"), ПоказательДатыСтрокой));
		ДанныеОперации.Вставить("ПоказательДаты", ПоказательДатыСтрокой);
	КонецЕсли;
	Если ДетальТранзакции.Свойства().Получить("Rcrd") <> Неопределено Тогда
		Если ТипЗнч(ДетальТранзакции.Rcrd) = Тип("ОбъектXDTO") Тогда
			ДополнительныеДетали = ДетальТранзакции.Rcrd;
		Иначе
			ДополнительныеДетали = ДетальТранзакции.Rcrd[0];
		КонецЕсли;
		ДанныеОперации.Вставить("ПоказательТипа", ЗначениеСвойстваXDTO(ДополнительныеДетали, "Tp"));
		ДанныеОперации.Вставить("ПоказательОснования", ЗначениеСвойстваXDTO(ДополнительныеДетали, "Ctgy"));
		ДанныеОперации.Вставить("ПоказательКБК", ЗначениеСвойстваXDTO(ДополнительныеДетали, "CtgyDtls"));
		ДанныеОперации.Вставить("СтатусСоставителя", ЗначениеСвойстваXDTO(ДополнительныеДетали, "DbtrSts"));
		ГодНалоговогоПериодаСтрокой = ЗначениеСвойстваXDTO(ДополнительныеДетали, "Prd.Yr");
		Если ЗначениеЗаполнено(ГодНалоговогоПериодаСтрокой) Тогда
			ДатаНалоговогоПериода = XMLЗначение(Тип("Дата"), ГодНалоговогоПериодаСтрокой);
			ТипНалоговогоПериода = ЗначениеСвойстваXDTO(ДополнительныеДетали, "Prd.Tp");
			Если ЗначениеЗаполнено(ТипНалоговогоПериода) Тогда
				Если СтрНачинаетсяС(ТипНалоговогоПериода, "MM") Тогда
					ПоказательПериода = "МС." + Сред(ТипНалоговогоПериода, 3) + Год(ДатаНалоговогоПериода);
				ИначеЕсли СтрНачинаетсяС(ТипНалоговогоПериода, "HLF") Тогда
					ПоказательПериода = "ПЛ.0" + Сред(ТипНалоговогоПериода, 4) + Год(ДатаНалоговогоПериода);
				ИначеЕсли СтрНачинаетсяС(ТипНалоговогоПериода, "QTR") Тогда
					ПоказательПериода = "КВ.0" + Сред(ТипНалоговогоПериода, 4) + Год(ДатаНалоговогоПериода);
				КонецЕсли;
			Иначе
				ПоказательПериода = Формат(ДатаНалоговогоПериода, "ДФ=dd.MM.yyyy;");
			КонецЕсли;
			ДанныеОперации.Вставить("ПоказательПериода", ПоказательПериода);
		КонецЕсли;
		ТочнаяДата = ЗначениеСвойстваXDTO(ДополнительныеДетали, "Prd.FrToDt.FrDt");
		Если ЗначениеЗаполнено(ТочнаяДата) Тогда
			ДанныеОперации.Вставить("ПоказательПериода", Формат(ТочнаяДата, "ДФ=dd.MM.yyyy;"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьКодИНазначениеПлатежаISO20022(ДетальТранзакции, ДанныеОперации)
		
		ДеталиДокумента = ЗначениеСвойстваXDTO(ДетальТранзакции, "RmtInf");
		
		Если ДеталиДокумента <> Неопределено Тогда // детали документа
			Если ДеталиДокумента.Свойства().Получить("Ustrd") <> Неопределено Тогда // назначение платежа
				Если ТипЗнч(ДеталиДокумента.Ustrd) = Тип("Строка") Тогда
					НазначенияПлатежа = Новый Массив;
					НазначенияПлатежа.Добавить(ДеталиДокумента.Ustrd);
				Иначе
					НазначенияПлатежа = ДеталиДокумента.Ustrd;
				КонецЕсли;
				НазначениеПлатежаПолное = "";
				Для Каждого НазначениеПлатежа Из НазначенияПлатежа Цикл
					НазначениеПлатежаПолное = ?(ПустаяСтрока(НазначениеПлатежаПолное), "",
												НазначениеПлатежаПолное + Символы.ПС);
					НазначениеПлатежаПолное = НазначениеПлатежаПолное + НазначениеПлатежа;
				КонецЦикла;
				ДанныеОперации.НазначениеПлатежа = НазначениеПлатежаПолное;
			КонецЕсли;
			
			Если ДеталиДокумента.Свойства().Получить("Strd") <> Неопределено Тогда
				Если ТипЗнч(ДеталиДокумента.Strd) = Тип("ОбъектXDTO") Тогда
					СтруктурныеДетали = ДеталиДокумента.Strd;
				Иначе
					СтруктурныеДетали = ДеталиДокумента.Strd[0];
				КонецЕсли;
				ДанныеОперации.Вставить("Код", ЗначениеСвойстваXDTO(СтруктурныеДетали, "CdtrRefInf.Ref"));
			КонецЕсли;
		КонецЕсли;
		
КонецПроцедуры

Процедура ПрочитатьДанныеПлательщикаISO20022(ДетальТранзакции, ДанныеОперации, РеквизитыВладельцаСчета)
		
	Дебитор = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Dbtr");
	Если Дебитор = Неопределено И ДанныеОперации.НаправлениеПлатежа = "1" Тогда
		ДанныеОперации.Плательщик = РеквизитыВладельцаСчета.Наименование;
		ДанныеОперации.ПлательщикИНН = РеквизитыВладельцаСчета.ИНН;
		ДанныеОперации.ПлательщикСтрана = РеквизитыВладельцаСчета.Страна;
		ДанныеОперации.ПлательщикСчет = РеквизитыВладельцаСчета.НомерСчета;
		ДанныеОперации.ПлательщикБанкSWIFT = РеквизитыВладельцаСчета.БанкSWIFT;
		ДанныеОперации.ПлательщикБанк = РеквизитыВладельцаСчета.Банк;
	Иначе
		ДанныеОперации.Плательщик = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Dbtr.Nm");
		ПлательщикId = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Dbtr.Id.OrgId.Othr.Id");
		ПлательщикBIC = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Dbtr.Id.OrgId.BICOrBEI");
		ДанныеОперации.ПлательщикИНН = ?(ЗначениеЗаполнено(ПлательщикId), ПлательщикId, ПлательщикBIC);
	
		КодСтраны = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Dbtr.CtryOfRes");
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			ИнформацияОСтране = УправлениеКонтактнойИнформацией.ДанныеКлассификатораСтранМираПоКоду(
				КодСтраны, "КодАльфа2");
			Если ЗначениеЗаполнено(ИнформацияОСтране) Тогда
				ДанныеОперации.ПлательщикСтрана = ИнформацияОСтране.Наименование;
			КонецЕсли;
		КонецЕсли;
	
		НомерСчета = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.DbtrAcct.Id.Othr.Id");
		КодIBAN = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.DbtrAcct.Id.IBAN");
		ДанныеОперации.ПлательщикСчет = ?(ЗначениеЗаполнено(НомерСчета), НомерСчета, КодIBAN);
		ДанныеОперации.ПлательщикБанкSWIFT = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdAgts.DbtrAgt.FinInstnId.BIC");
		ДанныеОперации.ПлательщикБанк = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdAgts.DbtrAgt.FinInstnId.Nm");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПолучателяISO20022(ДетальТранзакции, ДанныеОперации, РеквизитыВладельцаСчета)
		
	Кредитор = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Cdtr");
	Если Кредитор = Неопределено И ДанныеОперации.НаправлениеПлатежа = "2" Тогда
		ДанныеОперации.Получатель = РеквизитыВладельцаСчета.Наименование;
		ДанныеОперации.ПолучательИНН = РеквизитыВладельцаСчета.ИНН;
		ДанныеОперации.ПолучательСтрана = РеквизитыВладельцаСчета.Страна;
		ДанныеОперации.ПолучательСчет = РеквизитыВладельцаСчета.НомерСчета;
		ДанныеОперации.ПолучательБанкSWIFT = РеквизитыВладельцаСчета.БанкSWIFT;
		ДанныеОперации.ПолучательБанк = РеквизитыВладельцаСчета.Банк;
	Иначе
		ДанныеОперации.Получатель = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Cdtr.Nm");
		ПолучательId = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Cdtr.Id.OrgId.Othr.Id");
		ПолучательBIC = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Cdtr.Id.OrgId.BICOrBEI");
		ДанныеОперации.ПолучательИНН = ?(ЗначениеЗаполнено(ПолучательId), ПолучательId, ПолучательBIC);
		
		КодСтраны = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Cdtr.CtryOfRes");
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			ИнформацияОСтране = УправлениеКонтактнойИнформацией.ДанныеКлассификатораСтранМираПоКоду(
				КодСтраны, "КодАльфа2");
			Если ЗначениеЗаполнено(ИнформацияОСтране) Тогда
				ДанныеОперации.ПолучательСтрана = ИнформацияОСтране.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		НомерСчета = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.CdtrAcct.Id.Othr.Id");
		КодIBAN = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.CdtrAcct.Id.IBAN");
		ДанныеОперации.ПолучательСчет = ?(ЗначениеЗаполнено(НомерСчета), НомерСчета, КодIBAN);
		
		ДанныеОперации.ПолучательБанкSWIFT = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdAgts.CdtrAgt.FinInstnId.BIC");
		ДанныеОперации.ПолучательБанк = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdAgts.CdtrAgt.FinInstnId.Nm");
	КонецЕсли;

КонецПроцедуры

Функция ЗначениеСвойстваXDTO(ОбъектXDTO, Путь)
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Путь, ".");
	
	Если ОбъектXDTO.Свойства().Получить(МассивСтрок[0]) = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 1 Тогда
		Значение = ОбъектXDTO[МассивСтрок[0]];
		Если ТипЗнч(Значение) = Тип("ОбъектXDTO") И Значение.Свойства().Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Значение;
	Иначе
		НаборСвойств = ОбъектXDTO.Свойства();
		Свойство = НаборСвойств.Получить(МассивСтрок[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Свойство.ВерхняяГраница = 1 Тогда
			ПодОбъектXDTO = ОбъектXDTO.ПолучитьXDTO(Свойство);
		Иначе
			Список = ОбъектXDTO.ПолучитьСписок(Свойство);
			Если Список.Количество() = 0 Тогда
				Возврат Неопределено;
			Иначе
				ПодОбъектXDTO = Список[0];
			КонецЕсли;
		КонецЕсли;
		МассивСтрок.Удалить(0);
		НоваяСтрока = "";
		Для Каждого Элемент Из МассивСтрок Цикл
			НоваяСтрока = НоваяСтрока + ?(ПустаяСтрока(НоваяСтрока), "", ".") + Элемент;
		КонецЦикла;
		Возврат ЗначениеСвойстваXDTO(ПодОбъектXDTO, НоваяСтрока);
	КонецЕсли;
	
КонецФункции

Процедура ПодготовитьСтрокиВыписки(ДокументыКЗагрузке, БанковскийСчет, НомерСчета)
	
	ТипыПлатежныхДокументовПоступления = Новый Соответствие;
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНОЕТРЕБОВАНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("БАНКОВСКИЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("МЕМОРИАЛЬНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("ИНКАССОВОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	
	ТипыПлатежныхДокументовСписания = Новый Соответствие;
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНОЕТРЕБОВАНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("БАНКОВСКИЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("МЕМОРИАЛЬНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("ИНКАССОВОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	
	СтатусыСоставителейТаможенныхПлатежей = Новый Массив;
	СтатусыСоставителейТаможенныхПлатежей.Добавить("06");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("16");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("17");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("18");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("19");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("20");
	
	СобственныеСчета = СобственныеСчета(БанковскийСчет);
	
	// Подготовка строк выписки к поиску документов и контрагентов, заполнение общих реквизитов. Первичное распознавание.
	Для каждого СтрокаДокумента Из ДокументыКЗагрузке Цикл
		
		Если Не СтрокаДокумента.Загружать Или
			(Не СтрокаДокумента.ПлательщикСчет = НомерСчета
			И Не СтрокаДокумента.ПолучательСчет = НомерСчета) Тогда
			СтрокаДокумента.Загружать = Ложь;
			Продолжить;
		КонецЕсли;
		
		// Входящий или исходящий платеж
		Исходящий = (СтрокаДокумента.ПлательщикСчет = НомерСчета);
		СтрокаДокумента.Исходящий = Исходящий;
		
		// Дата документа
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаДок) Тогда
			СтрокаДокумента.ДатаДок = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
			Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаДок) Тогда
				СтрокаДокумента.ДатаДок = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
					?(Исходящий, СтрокаДокумента.ДатаСписано, СтрокаДокумента.ДатаПоступило));
			КонецЕсли;
		КонецЕсли;
		
		// Тип платежного документа
		ТипСтрокой = СтрЗаменить(ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")), "Ё", "Е");
		Если Исходящий Тогда
			ТипПлатежногоДокумента = ТипыПлатежныхДокументовСписания.Получить(ТипСтрокой);
		Иначе
			ТипПлатежногоДокумента = ТипыПлатежныхДокументовПоступления.Получить(ТипСтрокой);
		КонецЕсли;
		Если ТипПлатежногоДокумента = Неопределено Тогда
			ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
		КонецЕсли;

		СтрокаДокумента.ТипПлатежногоДокумента = ТипПлатежногоДокумента;
		
		// Хоз. операция по виду оплаты
		Если СтрокаДокумента.ВидОплаты = "03" Тогда
			СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
			
		ИначеЕсли СтрокаДокумента.ВидОплаты = "04" Тогда
			СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
			
		ИначеЕсли СтрокаДокумента.ВидОплаты = "13" Тогда
			Если Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту;
			Иначе
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
			КонецЕсли;
		КонецЕсли;
		
		// Переводы
		Если СтрокаДокумента.Исходящий Тогда
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ПолучательБИК) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, БИК", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательБИК);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ПолучательСВИФТ) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, СВИФТ", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательСВИФТ);
			Иначе
				СтруктураПоиска = Новый Структура("НомерСчета", СтрокаДокумента.ПолучательСчет);
			КонецЕсли;
			
			СобственныеСчетаПолучатели = СобственныеСчета.НайтиСтроки(СтруктураПоиска);
			Если СобственныеСчетаПолучатели.Количество() > 0 Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет;
				СтрокаДокумента.СчетКонтрагента = СобственныеСчетаПолучатели[0]["Ссылка"];
				Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано) Тогда
					СтрокаДокумента.Загружать = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБИК) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, БИК", СтрокаДокумента.ПлательщикСчет, СтрокаДокумента.ПлательщикБИК);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ПлательщикСВИФТ) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, СВИФТ", СтрокаДокумента.ПлательщикСчет, СтрокаДокумента.ПлательщикСВИФТ);
			Иначе
				СтруктураПоиска = Новый Структура("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			КонецЕсли;
			
			СобственныеСчетаОтправители = СобственныеСчета.НайтиСтроки(СтруктураПоиска);
			Если СобственныеСчетаОтправители.Количество() > 0 Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета;
				СтрокаДокумента.СчетКонтрагента = СобственныеСчетаОтправители[0]["Ссылка"];
				Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда
					СтрокаДокумента.Загружать = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Инкассация
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			
			БалансовыйСчет = Лев(СтрокаДокумента.ПлательщикСчет, 5);
			Если БалансовыйСчет    = "20202" // поступление/списание наличных из кассы
				Или БалансовыйСчет = "20208" // поступление/списание наличных из банкомата, устройства Cash-in
			Тогда
				Если СтрокаДокумента.Исходящий Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
				Иначе
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Контрагент
		Если Исходящий Тогда
			Если СтрокаДокумента.Получатель1 <> "" Тогда
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
		Иначе
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
		КонецЕсли;
		СтруктураНаименования = ДенежныеСредстваСерверЛокализация.НаименованиеОрганизации(СтрокаДокумента.ИмяКонтрагента);
		СтрокаДокумента.СокрИмяКонтрагента = СтруктураНаименования.СокращенноеНаименование;
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СтрокаДокумента.ИмяКонтрагента, 10)) Тогда
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СтрокаДокумента.ИмяКонтрагента, 12)) Тогда
				СтрокаДокумента.ИмяКонтрагента = СокрЛП(Сред(СтрокаДокумента.ИмяКонтрагента, 13));
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СокрЛП(Сред(СтрокаДокумента.ИмяКонтрагента, 11));
			КонецЕсли;
		КонецЕсли;
		
		ИННДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательИНН, СтрокаДокумента.ПлательщикИНН);
		СтрокаДокумента.ПроверятьИНН = ЗначениеЗаполнено(ИННДляПоиска);
	
		КППДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательКПП, СтрокаДокумента.ПлательщикКПП);
		СтрокаДокумента.ПроверятьКПП = (ЗначениеЗаполнено(КППДляПоиска) И КППДляПоиска <> "0");
		
		// УИП
		Если ЗначениеЗаполнено(СтрокаДокумента.Код) Тогда
			СтрокаДокумента.ЗаполненУИП = Истина;
		КонецЕсли;
		
		// Назначение платежа
		Если ПустаяСтрока(СтрокаДокумента.НазначениеПлатежа) Тогда
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
			Для инд = 2 По 6 Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + инд]) Тогда
					Прервать;
				КонецЕсли;
				СтрокаДокумента.НазначениеПлатежа =
					СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + инд];
			КонецЦикла;
		КонецЕсли;
		
		СтрокаДокумента.ФорматированноеНазначениеПлатежа =
			ДенежныеСредстваСервер.ФорматироватьНазначениеПлатежа(СтрокаДокумента.НазначениеПлатежа);
		
		// Сумма
		Сумма = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаДокумента.Сумма);
		Если Сумма <> Неопределено Тогда
			Если Сумма < 0 Тогда
				Сумма = - Сумма;
			КонецЕсли;
			СтрокаДокумента.СуммаДокумента = Сумма;
			Если Исходящий Тогда
				СтрокаДокумента.СуммаСписано   = Сумма;
			Иначе
				СтрокаДокумента.СуммаПоступило = Сумма;
			КонецЕсли;
		Иначе
			ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Неверная сумма документа (%1)!'"), СтрокаДокумента.Сумма));
		КонецЕсли;
		
		//++ Локализация
		// Очередность платежа
		Буфер = СокрЛП(СтрокаДокумента.Очередность);
		Если Буфер <> "" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Буфер) Тогда
			СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
		Иначе
			СтрокаДокумента.ОчередностьПлатежа = 5;
		КонецЕсли;
		
		// Платеж в бюджет
		Если ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя) Тогда
			СтрокаДокумента.ПлатежВБюджет = Истина;
			
			Если СтатусыСоставителейТаможенныхПлатежей.Найти(СтрокаДокумента.СтатусСоставителя) <> Неопределено Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
			ИначеЕсли СтрокаДокумента.СтатусСоставителя = "08" Тогда
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
			Иначе
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
			КонецЕсли;
			
			Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж И Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж И Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж И Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
			КонецЕсли;
		КонецЕсли;
		
		// Показатель даты бюджетного платежа
		Если НЕ ПустаяСтрока(СтрокаДокумента.ПоказательДаты) Тогда
			СтрокаДокумента.ПоказательДатыДок = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДаты);
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ПоказательДатыДок) Тогда
				СтрокаДокумента.ПоказательДатыДок = Неопределено;
			КонецЕсли;
		КонецЕсли;
		//-- Локализация
		
		// Дата проведения банком
		Если Исходящий Тогда
			Если Не ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
				СтрокаДокумента.Списано = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
					СтрокаДокумента.ДатаСписано);
				Если ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
					СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
				СтрокаДокумента.Поступило = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
					СтрокаДокумента.ДатаПоступило);
				Если ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
					СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//++ Локализация
		// Дата отсылки платежного требования
		Если Не ПустаяСтрока(СтрокаДокумента.ДатаОтсылкиДок) Тогда
			СтрокаДокумента.ДатаОтсылки = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылкиДок);
		КонецЕсли;
		//-- Локализация
	КонецЦикла;
	
	// Ранее загруженные/введенные вручную документы
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, ДатаДок, Поступило, Списано, Номер, НомерСокр, Исходящий, ПолучательСчет, ПлательщикСчет, ТипПлатежногоДокумента,
		|ПолучательИНН, ПлательщикИНН, ПолучательКПП, ПлательщикКПП, ПроверятьИНН, ПроверятьКПП, ДанныеВыписки, Код, Операция");
	ЗаполнитьСсылкиНаДокументы(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	
	// Основание платежа по УИП
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("Исходящий", Ложь);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("ЗаполненУИП", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	Если СтрокиКЗагрузке.Количество() Тогда
		ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(СтрокиКЗагрузке, "НомерСтроки, Код");
		ЗаполнитьОснованиеПлатежейПоУИП(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	КонецЕсли;
	
	// Контрагенты, счета контрагентов
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, Исходящий, ИмяКонтрагента, СокрИмяКонтрагента, Контрагент,
		|ПолучательСчет, ПлательщикСчет, ПолучательИНН, ПлательщикИНН, ПолучательКПП, ПлательщикКПП, ПроверятьИНН, ПроверятьКПП, ВидОперации");
	ЗаполнитьКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов);
	
	// Партнеры
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденКонтрагент", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, Контрагент");
	ЗаполнитьПартнеров(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	
	// Образцы документов для заполнения
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденСчетКонтрагента", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ЗаполнитьОбразцы(СтрокиКЗагрузке, БанковскийСчет);
	
	// Заполнение по косвенным данным
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденОбразец", Ложь);
	Отбор.Вставить("НайденКонтрагент", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, БанковскийСчет);
	
	// Поиск ПКО при инкассации
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденОбразец", Ложь);
	Отбор.Вставить("ВидОперации", Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, СуммаДокумента, ДатаПроведения");
	ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Истина);
	
	// Поиск РКО при инкассации
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденОбразец", Ложь);
	Отбор.Вставить("ВидОперации", Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, СуммаДокумента, ДатаПроведения");
	ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Ложь);
	
КонецПроцедуры

Процедура ОбновитьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
		БанковскийСчет, Истина, Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		ДокументОбъект = СтрокаДокумента.Документ.ПолучитьОбъект();
		
		СделатьНепроведенным = Ложь;
		
		УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
		
		ЗаменитьСтароеЗначение = Ложь;
		//++ Локализация
		ЗаменитьСтароеЗначение = (СтрокаДокумента.Операция <> "Операция по Яндекс.Кассе");
		//-- Локализация
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер, ЗаменитьСтароеЗначение);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
			Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
				ДокументОбъект.ХозяйственнаяОперация, РеквизитыВсе, РеквизитыХозОперации);
				
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
			Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
				ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
		КонецЕсли;
		
		// Контрагент
		Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
			ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
			Иначе
				УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		// Счет контрагента
		Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
			ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
			КонецЕсли;
		КонецЕсли;
		
		Для каждого СтрокаРасшифровки Из ДокументОбъект.РасшифровкаПлатежа Цикл
			
			// Партнер
			Если Не ЗначениеЗаполнено(СтрокаРасшифровки.Партнер) Тогда
				СтрокаРасшифровки.Партнер = СтрокаДокумента.Партнер;
			КонецЕсли;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата);
			
		КонецЦикла;
		
		УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента, Истина);
		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки, Истина);
		
		СуммыРазличаются = (СтрокаДокумента.СуммаДокумента <> ДокументОбъект.СуммаДокумента);
		Если СуммыРазличаются Тогда
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа[0];
				СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
			Иначе
				СделатьНепроведенным = Истина;
				ОписаниеОшибки = НСтр("ru = 'Сумма документа отличается от суммы строк расшифровки платежа.'");
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки, ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСвойство(ДокументОбъект, "Комментарий", НСтр("ru = '#Загружен из Клиент-Банка'"));
		
		Если ДокументОбъект.Модифицированность() Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДатаСеанса(), Истина);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.Движения.ДенежныеСредстваБезналичные.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения, Истина);
		КонецЕсли;
		
		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ЗаписатьОбъект(ДокументОбъект, ?(СделатьНепроведенным, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписи), СтрокаДокумента);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	РазрешитьПлатежиБезУказанияЗаявок = РеквизитыСчета.РазрешитьПлатежиБезУказанияЗаявок;
	
	Организация          = РеквизитыСчета.Организация;
	Префикс              = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Префикс");
	Валюта               = РеквизитыСчета.Валюта;
	ТекущийПользователь  = Пользователи.ТекущийПользователь();
	
	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
		БанковскийСчет, Истина, Ложь);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			ДокументОбъект = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
		Иначе
			ДокументОбъект = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
		КонецЕсли;
		
		// Общие реквизиты
		ДатаВхДокумента = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
		Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", ДатаВхДокумента);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", СтрокаДокумента.ДатаДок);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер);
		
		УстановитьСвойство(ДокументОбъект, "Организация", Организация);
		УстановитьСвойство(ДокументОбъект, "БанковскийСчет", БанковскийСчет);
		УстановитьСвойство(ДокументОбъект, "Валюта", Валюта);
		
		УстановитьСвойство(ДокументОбъект, "ТипПлатежногоДокумента", СтрокаДокумента.ТипПлатежногоДокумента);
		УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента);
		
		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки);
		УстановитьСвойство(ДокументОбъект, "ИдентификаторПлатежа", СтрокаДокумента.Код);
		
		УстановитьСвойство(ДокументОбъект, "Комментарий", НСтр("ru = '#Загружен из Клиент-Банка'"));
		УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДатаСеанса());
		
		УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", СтрокаДокумента.ОшибкиЗагрузки);
		
		УстановитьСвойство(ДокументОбъект, "Ответственный", ТекущийПользователь);
		
		// Индивидуальное заполнение
		Если СтрокаДокумента.Исходящий Тогда
			ЗаполнитьРеквизитыСписания(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы, Префикс);
		Иначе
			ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы);
		КонецЕсли;
		
		//++ Локализация
		Если СтрокаДокумента.Операция <> "Операция по Яндекс.Кассе" Тогда
		//-- Локализация
			УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		//++ Локализация
		КонецЕсли;
		//-- Локализация
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", ДокументОбъект.Дата);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаВходящегоДокумента) Тогда
			ДокументОбъект.ДатаВходящегоДокумента = ДокументОбъект.Дата;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокументОбъект.НомерВходящегоДокумента) Тогда
			ДокументОбъект.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.Номер);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.Движения.ДенежныеСредстваБезналичные.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			ДокументОбъект.ОшибкиЗагрузки = СокрЛП(ДокументОбъект.ОшибкиЗагрузки + "
			|" + ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения);
		КонецЕсли;
		
		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации ИЛИ 
			ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Если СтрокаДокумента.Исходящий Тогда
				ЗеркальныйПлатежСсылка = Документы.СписаниеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И ЗеркальныйПлатежСсылка.СуммаДокумента = ДокументОбъект.СуммаДокумента Тогда
					Документы.ПоступлениеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ЗеркальныйПлатежСсылка, ДокументОбъект);
				КонецЕсли;
			Иначе
				ЗеркальныйПлатежСсылка = Документы.ПоступлениеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И ЗеркальныйПлатежСсылка.СуммаДокумента = ДокументОбъект.СуммаДокумента Тогда
					Документы.СписаниеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ЗеркальныйПлатежСсылка, ДокументОбъект);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписи, СтрокаДокумента);
		
		СтрокаДокумента.Документ = ДокументОбъект.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

Процедура СнятьПризнакПроведения(ДокументыКЗагрузке, БанковскийСчет, ЗаголовокВыписки)
	
	// Снимаем признак проведения банком для отсутствующих в выписке документов
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И ДанныеДокумента.ДатаПроведенияБанком МЕЖДУ &ДатаНач И &ДатаКон
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И ДанныеДокумента.ДатаПроведенияБанком МЕЖДУ &ДатаНач И &ДатаКон
	|";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ЗаголовокВыписки.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ЗаголовокВыписки.ДатаКонца));
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКЗагрузке.НайтиСтроки(Новый Структура("Документ", Выборка.Ссылка));
		Если СтрокаВТаблицеИмпорта.Количество() = 0 Тогда
			
			Попытка
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект
				ДокументОбъект.ПроведеноБанком = Ложь;
				ДокументОбъект.ДатаПроведенияБанком = Неопределено;
				ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				
			Исключение
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				Событие = НСтр("ru = 'Данные'", ОбщегоНазначения.КодОсновногоЯзыка())
					+ "." + НСтр("ru = 'Отмена проведения'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(Событие,
					УровеньЖурналаРегистрации.Ошибка,
					Выборка.Ссылка.Метаданные(),
					Выборка.Ссылка,
					ОписаниеОшибки.Описание);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СобственныеСчета(БанковскийСчет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|			БанковскиеСчета.БИКБанка
	|		ИНАЧЕ
	|			БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|			БанковскиеСчета.СВИФТБанка
	|		ИНАЧЕ
	|			БанковскиеСчета.Банк.СВИФТБИК
	|	КОНЕЦ КАК СВИФТ
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|	ПО
	|		БанковскиеСчетаОрганизаций.Владелец = БанковскиеСчета.Владелец
	|		И БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчет
	|	
	|ГДЕ
	|	БанковскиеСчета.Ссылка <> &БанковскийСчет
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьСсылкиНаДокументы(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ДатаДок,
	|	ТаблицаДокументов.Поступило,
	|	ТаблицаДокументов.Списано,
	|	ТаблицаДокументов.Номер,
	|	ТаблицаДокументов.НомерСокр,
	|	ТаблицаДокументов.Исходящий,
	|	ТаблицаДокументов.ТипПлатежногоДокумента,
	|	ТаблицаДокументов.ПолучательСчет,
	|	ТаблицаДокументов.ПлательщикСчет,
	|	ТаблицаДокументов.ПолучательИНН,
	|	ТаблицаДокументов.ПлательщикИНН,
	|	ТаблицаДокументов.ПолучательКПП,
	|	ТаблицаДокументов.ПлательщикКПП,
	|	ТаблицаДокументов.ПроверятьИНН,
	|	ТаблицаДокументов.ПроверятьКПП,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.Код КАК Строка(25)) КАК Код,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.ДанныеВыписки КАК Строка(1024)) КАК ДанныеВыписки,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.Операция КАК Строка(128)) КАК Операция
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		
	|		И (НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|			И НЕ ДанныеДокумента.ПроведеноБанком
	|			ИЛИ НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|				И ДанныеДокумента.ДатаПроведенияБанком = ТаблицаДокументов.Списано
	|				И ДанныеДокумента.ПроведеноБанком)
	|		
	|		И (ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.Номер
	|			ИЛИ ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.НомерСокр)
	|		И ДанныеДокумента.ТипПлатежногоДокумента = ТаблицаДокументов.ТипПлатежногоДокумента
	|	
	|		И (ДанныеДокумента.БанковскийСчетПолучатель.НомерСчета = ТаблицаДокументов.ПолучательСчет
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета = ТаблицаДокументов.ПолучательСчет
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.НомерСчета, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета, """") = """")
	|			ИЛИ ТаблицаДокументов.ПолучательСчет = """"
	|			)
	//++ Локализация
	|		И (НЕ ТаблицаДокументов.ПроверятьИНН
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.Владелец.ИНН, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетПолучатель.Владелец.ИНН = ТаблицаДокументов.ПолучательИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН = ТаблицаДокументов.ПолучательИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.ИННКорреспондента = ТаблицаДокументов.ПолучательИНН
	|			)
	|		И (
	|			(НЕ ТаблицаДокументов.ПроверятьКПП
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.Владелец.КПП, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетПолучатель.Владелец.КПП = ТаблицаДокументов.ПолучательКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП = ТаблицаДокументов.ПолучательКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.КППКорреспондента = ТаблицаДокументов.ПолучательКПП
	|			)
	|			ИЛИ 
	|			(ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) = ТаблицаДокументов.ДанныеВыписки
	|				И ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) <> """"))
	//-- Локализация
	|		
	|ГДЕ
	|	ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	//++ Локализация
	|		И НЕ ДанныеДокумента.ДанныеВыписки ПОДОБНО (""СЕКЦИЯДОКУМЕНТ=Операция по Яндекс.Кассе%"")
	//-- Локализация
	|		
	|		И (НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|			И НЕ ДанныеДокумента.ПроведеноБанком
	|			ИЛИ НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|				И ДанныеДокумента.ДатаПроведенияБанком = ТаблицаДокументов.Поступило
	|				И ДанныеДокумента.ПроведеноБанком)
	|		
	|		И (ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.Номер
	|			ИЛИ ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.НомерСокр)
	|		И ДанныеДокумента.ТипПлатежногоДокумента = ТаблицаДокументов.ТипПлатежногоДокумента
	|		
	|		И (ДанныеДокумента.БанковскийСчетОтправитель.НомерСчета = ТаблицаДокументов.ПлательщикСчет
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета = ТаблицаДокументов.ПлательщикСчет
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.НомерСчета, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета, """") = """")
	|			ИЛИ ТаблицаДокументов.ПлательщикСчет = """"
	|			)
	//++ Локализация
	|		И (НЕ ТаблицаДокументов.ПроверятьИНН
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.Владелец.ИНН, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетОтправитель.Владелец.ИНН = ТаблицаДокументов.ПлательщикИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН = ТаблицаДокументов.ПлательщикИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.ИННКорреспондента = ТаблицаДокументов.ПолучательИНН
	|			)
	|		
	|		И (НЕ ТаблицаДокументов.ПроверятьИНН
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.Контрагент.ИНН, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.ПодотчетноеЛицо.ИНН, """") = """")
	|			ИЛИ ДанныеДокумента.Контрагент.ИНН = ТаблицаДокументов.ПлательщикИНН
	|			ИЛИ ДанныеДокумента.ПодотчетноеЛицо.ИНН = ТаблицаДокументов.ПлательщикИНН)
	|		
	|		И ((НЕ ТаблицаДокументов.ПроверятьКПП
	|			ИЛИ ЕСТЬNULL(ДанныеДокумента.Контрагент.КПП, """") = """"
	|			ИЛИ ДанныеДокумента.Контрагент.КПП = ТаблицаДокументов.ПлательщикКПП)
	|			
	|			ИЛИ (ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) = ТаблицаДокументов.ДанныеВыписки
	|				И ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) <> """"))
	//-- Локализация
	|		И (
	//++ Локализация
	|			(НЕ ТаблицаДокументов.ПроверятьКПП
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.Владелец.КПП, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетОтправитель.Владелец.КПП = ТаблицаДокументов.ПлательщикКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП = ТаблицаДокументов.ПлательщикКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.КППКорреспондента = ТаблицаДокументов.ПолучательКПП
	|			)
	|			ИЛИ 
	//-- Локализация
	|			(ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) = ТаблицаДокументов.ДанныеВыписки
	|				И ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) <> """"))
	|		
	|ГДЕ
	|	НЕ ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	//++ Локализация
	|	И НЕ ТаблицаДокументов.Операция ПОДОБНО (""Операция по Яндекс.Кассе%"")
	//-- Локализация
	|	
	//++ Локализация
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ // Проведение банком платежа ЯндексКассы
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		И ДанныеДокумента.ИдентификаторПлатежа = ТаблицаДокументов.Код
	|		И ДанныеДокумента.ДанныеВыписки ПОДОБНО (""СЕКЦИЯДОКУМЕНТ=Операция по Яндекс.Кассе%"")
	|		
	|ГДЕ
	|	НЕ ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	И ТаблицаДокументов.Код <> """"
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ // Платеж ЯндексКассы
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		И ДанныеДокумента.ИдентификаторПлатежа = ТаблицаДокументов.Код
	|		
	|ГДЕ
	|	НЕ ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	И ТаблицаДокументов.Код <> """"
	|	И ТаблицаДокументов.Операция ПОДОБНО (""Операция по Яндекс.Кассе%"")
	//-- Локализация
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			
			// Если документ найден, создавать новый не будем. Если найдено несколько документов, то обновлять данные документа не нужно.
			Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
				СтрокаДокумента.Загружать = Ложь;
			КонецЕсли;
			СтрокаДокумента.Документ = Выборка.Ссылка;
			СтрокаДокумента.НайденДокументВБазе = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОснованиеПлатежейПоУИП(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ВзаиморасчетыСервер.ЗаполнитьДанныеВыбораУИП(
		ДанныеВыбора,
		Новый Структура("Организация, Текст, ТипРасчетов",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец"),
			ТаблицаДокументов.ВыгрузитьКолонку("Код"),
			Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом),
		Ложь);
	
	Для Каждого ЭлементДанных Из ДанныеВыбора Цикл
		
		Выборка = ЭлементДанных.Значение.Значение;
		
		СтрокаТаблицы = ТаблицаДокументов.Найти(Выборка.ИдентификаторПлатежа, "Код");
		Если СтрокаТаблицы <> Неопределено Тогда
			
			СтрокаДокумента = ДокументыКЗагрузке.Найти(СтрокаТаблицы["НомерСтроки"], "НомерСтроки");
			Если СтрокаДокумента <> Неопределено Тогда
				
				СтрокаДокумента.НайденоОснованиеПлатежа = Истина;
				СтрокаДокумента.НайденКонтрагент = Истина;
				СтрокаДокумента.СоздаватьКонтрагента = Ложь;
				
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, Выборка, "Контрагент, Партнер, ОснованиеПлатежа, ОбъектРасчетов");
				
				Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
				ИначеЕсли ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ОбъектРасчетов) Тогда
					СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
						ДенежныеСредстваСервер.СтатьяДвиженияДенежныхСредствОбъектаРасчетов(СтрокаДокумента.ОбъектРасчетов, СтрокаДокумента.ВидОперации);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ИмяКонтрагента КАК Наименование,
	|	ТаблицаДокументов.СокрИмяКонтрагента КАК СокращенноеНаименование,
	|	ТаблицаДокументов.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательИНН
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикИНН
	|	КОНЕЦ КАК ИНН,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|		ТаблицаДокументов.ПолучательКПП
	|	ИНАЧЕ
	|		ТаблицаДокументов.ПлательщикКПП
	|	КОНЕЦ КАК КПП,
	|	ТаблицаДокументов.ПроверятьИНН,
	|	ТаблицаДокументов.ПроверятьКПП,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательСчет
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикСчет
	|	КОНЕЦ КАК НомерСчета,
	|	ТаблицаДокументов.ВидОперации
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	0 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|		И НЕ ДанныеСправочника.Закрыт,
	|	Константа.ИспользоватьПередачиТоваровМеждуОрганизациями КАК ИспользоватьПередачиТоваровМеждуОрганизациями
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				ИЛИ ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|				ИЛИ ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|			ТОГДА ИспользоватьПередачиТоваровМеждуОрганизациями.Значение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Контрагент уже найден, ищем счет
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	5 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК Контрагенты
	|	ПО
	|		Контрагенты.Ссылка = ТаблицаДокументов.Контрагент
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец = Контрагенты.Ссылка
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	10 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ДанныеСправочника.Владелец.КПП = ТаблицаДокументов.КПП
	|		И ТаблицаДокументов.ПроверятьКПП
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	20 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	30 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И (ДанныеСправочника.Владелец.НаименованиеПолное = ТаблицаДокументов.Наименование
	|			ИЛИ ДанныеСправочника.Владелец.НаименованиеПолное = ТаблицаДокументов.СокращенноеНаименование)
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	40 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|		И ДанныеСправочника.КПП = ТаблицаДокументов.КПП
	|		И ТаблицаДокументов.ПроверятьКПП
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	50 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	60 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НаименованиеПолное = ТаблицаДокументов.Наименование
	|		И (ДанныеСправочника.ИНН = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|		И (ДанныеСправочника.КПП = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьКПП)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	70 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ФизическиеЛица КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Наименование = ТаблицаДокументов.Наименование
	|		И (ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|			ИЛИ ДанныеСправочника.ИНН = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ДанныеСправочника.Владелец,
	|	ДанныеСправочника.Ссылка,
	|	80
	|
	|ИЗ
	|	ТаблицаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|		ПО ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|			И НЕ ДанныеСправочника.Закрыт
	|			И (ДанныеСправочника.Владелец.ИНН = """"
	|				ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			
			НайденоКонтрагентов = 0;
			ТекущийПриоритет = 99;
			
			Пока Выборка.Следующий() Цикл
				Если ТекущийПриоритет < Выборка.Приоритет Тогда
					Прервать;
				КонецЕсли;
				
				ТекущийПриоритет = Выборка.Приоритет;
				НайденоКонтрагентов = НайденоКонтрагентов + 1;
				
				Если НайденоКонтрагентов = 1 Тогда
					
					СтрокаДокумента.Контрагент = Выборка.Контрагент;
					СтрокаДокумента.НайденКонтрагент = Истина;
					
					Если ЗначениеЗаполнено(Выборка.СчетКонтрагента) Тогда
						СтрокаДокумента.СчетКонтрагента = Выборка.СчетКонтрагента;
						СтрокаДокумента.НайденСчетКонтрагента = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Если найдены дубли с одинаковым приоритетом, то контрагент останется пустым и новый создаваться не будет.
			Если НайденоКонтрагентов > 1 Тогда
				
				СтрокаДокумента.Контрагент = Неопределено;
				СтрокаДокумента.СчетКонтрагента = Неопределено;
				СтрокаДокумента.СоздаватьКонтрагента = Ложь;
				СтрокаДокумента.НайденКонтрагент = Ложь;
				СтрокаДокумента.НайденСчетКонтрагента = Ложь;
				
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки,
					СтрШаблон(НСтр("ru='Найдено более одного контрагента (%1)!'"), СтрокаДокумента.ИмяКонтрагента));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартнеров(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	Организация = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет).Организация;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.Контрагент КАК Контрагент
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ВЫБОР КОГДА ДанныеСправочника.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|		ДанныеСправочника.Партнер
	|	КОГДА НЕ АналитикаУчетаПоПартнерам.Партнер ЕСТЬ NULL ТОГДА
	|		АналитикаУчетаПоПартнерам.Партнер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НеизвестныйПартнер)
	|	КОНЕЦ КАК Партнер
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Ссылка = ТаблицаДокументов.Контрагент
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|		ПО
	|			АналитикаУчетаПоПартнерам.Контрагент = ДанныеСправочника.Ссылка
	|			И АналитикаУчетаПоПартнерам.Организация = &Организация
	|			И АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.Партнер = Выборка.Партнер;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбразцы(СтрокиКЗагрузке, БанковскийСчет)
	
	РеквизитыХозОперацийПоступления = РеквизитыХозОперацийПоступления();
	РеквизитыХозОперацийСписания = РеквизитыХозОперацийСписания();
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаВходящие = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация           КАК ХозяйственнаяОперация,
	|	ТабЧасть.СтатьяДвиженияДенежныхСредств          КАК РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств   КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ПодотчетноеЛицо                 КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.КассаОтправитель                КАК КассаОтправитель,
	|	ТабЧасть.Подразделение                          КАК РасшифровкаПлатежаПодразделение,
	|	ДанныеДокумента.Подразделение                   КАК Подразделение,
	|	ТабЧасть.СтатьяДоходов                          КАК РасшифровкаПлатежаСтатьяДоходов,
	|	ТабЧасть.АналитикаДоходов                       КАК РасшифровкаПлатежаАналитикаДоходов,
	|	ТабЧасть.АналитикаАктивовПассивов               КАК РасшифровкаПлатежаАналитикаАктивовПассивов,
	|	ДанныеДокумента.ДоговорЭквайринга               КАК ДоговорЭквайринга,
	|	ДанныеДокумента.СтатьяРасходов                  КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов               КАК АналитикаРасходов
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
	|	ПО
	|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	&Условие
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ
	|";
	
	ТекстЗапросаИсходящие = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация           КАК ХозяйственнаяОперация,
	|	ТабЧасть.СтатьяДвиженияДенежныхСредств          КАК РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств   КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ПодотчетноеЛицо                 КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.КассаПолучатель                 КАК КассаПолучатель,
	|	ТабЧасть.Подразделение                          КАК РасшифровкаПлатежаПодразделение,
	|	ДанныеДокумента.Подразделение                   КАК Подразделение,
	|	ТабЧасть.СтатьяРасходов                         КАК РасшифровкаПлатежаСтатьяРасходов,
	|	ТабЧасть.АналитикаРасходов                      КАК РасшифровкаПлатежаАналитикаРасходов,
	|	ТабЧасть.АналитикаАктивовПассивов               КАК РасшифровкаПлатежаАналитикаАктивовПассивов,
	|	ДанныеДокумента.ДоговорЭквайринга               КАК ДоговорЭквайринга,
	|	ДанныеДокумента.СтатьяРасходов                  КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов               КАК АналитикаРасходов
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
	|	ПО
	|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	&Условие
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	// Шаг 1. Поиск по счету отправителя, получателя, назначению платежа
	УсловиеИсходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &СчетКонтрагента)
	|	И ДанныеДокумента.ФорматированноеНазначениеПлатежа = &ФорматированноеНазначениеПлатежа
	|	И ДанныеДокумента.Проведен
	|";

	УсловиеВходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &СчетКонтрагента
	|		ИЛИ (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте)
	|			И ДанныеДокумента.Контрагент = &Контрагент))
	|	И ДанныеДокумента.ФорматированноеНазначениеПлатежа = &ФорматированноеНазначениеПлатежа
	|	И ДанныеДокумента.Проведен
	|";
	
	СтрокиПоискаШаг2 = Новый Массив;
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		Иначе
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			ТекстУсловия = ТекстУсловия + "
			|	И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация";
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
		
		Если Запрос.НайтиПараметры().Найти("Контрагент") <> Неопределено Тогда
			Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		Запрос.УстановитьПараметр("ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				Если ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия) Тогда
					
					СтрокаДокумента.НайденОбразец = Истина;
					СтрокаДокумента.Образец = Выборка.Ссылка;
					СтрокаДокумента.ВидОперации = Выборка.ХозяйственнаяОперация;
					
					Для каждого Реквизит Из НаборРеквизитов Цикл
						Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
							Продолжить;
						КонецЕсли;
						Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
							ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
						Иначе
							ИмяРеквизита = Реквизит.Ключ;
						КонецЕсли;
						СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокиПоискаШаг2.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиПоискаШаг2.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Шаг 2. Поиск по счету отправителя, получателя, без учета назначения платежа
	УсловиеИсходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &СчетКонтрагента)
	|	И ДанныеДокумента.Проведен
	|";

	УсловиеВходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &СчетКонтрагента
	|		ИЛИ (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте)
	|			И ДанныеДокумента.Контрагент = &Контрагент))
	|	И ДанныеДокумента.Проведен
	|";
	
	СтрокиПоискаШаг3 = Новый Массив;
	Для каждого СтрокаДокумента Из СтрокиПоискаШаг2 Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		Иначе
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			ТекстУсловия = ТекстУсловия + "
			|	И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация";
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
		
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		Если Запрос.НайтиПараметры().Найти("Контрагент") <> Неопределено Тогда
			Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		КонецЕсли;
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				Если ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия) Тогда
					
					СтрокаДокумента.НайденОбразец = Истина;
					СтрокаДокумента.Образец = Выборка.Ссылка;
					СтрокаДокумента.ВидОперации = Выборка.ХозяйственнаяОперация;
					
					Для каждого Реквизит Из НаборРеквизитов Цикл
						Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
							Продолжить;
						КонецЕсли;
						Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
							ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
						Иначе
							ИмяРеквизита = Реквизит.Ключ;
						КонецЕсли;
						СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокиПоискаШаг3.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиПоискаШаг3.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Шаг 3. Зеркальный платеж
	УсловиеИсходящие = "
	|	ДанныеДокумента.БанковскийСчет = &СчетКонтрагента
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &БанковскийСчет
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &БанковскийСчет)
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|	)
	|	И ДанныеДокумента.Проведен
	|";
	
	УсловиеВходящие = "
	|	ДанныеДокумента.БанковскийСчет = &СчетКонтрагента
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &БанковскийСчет
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &БанковскийСчет)
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|	)
	|	И ДанныеДокумента.Проведен
	|";
	
	Для каждого СтрокаДокумента Из СтрокиПоискаШаг3 Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		Иначе
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				СтрокаДокумента.НайденОбразец = Истина;
				СтрокаДокумента.Образец = Выборка.Ссылка;
				
				Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
				ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации;
				ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхДокументовПодотчетнику Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника;
				КонецЕсли;
				
				Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
				ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию;
				КонецЕсли;
				
				Для каждого Реквизит Из НаборРеквизитов Цикл
					Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
						Продолжить;
					КонецЕсли;
					Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
						ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
					Иначе
						ИмяРеквизита = Реквизит.Ключ;
					КонецЕсли;
					СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия)
	
	Запрос = Новый Запрос;
	
	Если СтрокаДокумента.Исходящий Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
		|	ПО
		|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	&Условие
		|	
		|";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
		|	ПО
		|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	&Условие
		|	
		|";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Запрос.УстановитьПараметр("БанковскийСчет", СтрокаДокумента.БанковскийСчет);
	Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
	
	Если Запрос.НайтиПараметры().Найти("Контрагент") <> Неопределено Тогда
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
	КонецЕсли;
	Если Запрос.НайтиПараметры().Найти("ФорматированноеНазначениеПлатежа") <> Неопределено Тогда
		Запрос.УстановитьПараметр("ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Дата > &ПериодПроверки";
	Запрос.УстановитьПараметр("ПериодПроверки", ТекущаяДатаСеанса() - 60 * 60 * 24 * 15); // Проверяются документы за последние 15 дней
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Запрос.Текст = Запрос.Текст + " И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация И (ИСТИНА";
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
	Иначе
		Запрос.Текст = Запрос.Текст + " И (ДанныеДокумента.ХозяйственнаяОперация <> &ХозяйственнаяОперация";
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Выборка.ХозяйственнаяОперация);
	КонецЕсли;
	
	СтрокаУсловия = "";
	Если НаборРеквизитов <> Неопределено Тогда
		Для каждого Реквизит Из НаборРеквизитов Цикл
			
			Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
				ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
				СтрокаУсловия = " ИЛИ ТабЧасть.ИмяРеквизита <> &ИмяРеквизита";
			Иначе
				ИмяРеквизита = Реквизит.Ключ;
				СтрокаУсловия = " ИЛИ ДанныеДокумента.ИмяРеквизита <> &ИмяРеквизита";
			КонецЕсли;
			
			СтрокаУсловия = СтрЗаменить(СтрокаУсловия, "ИмяРеквизита", ИмяРеквизита);
			Запрос.Текст = Запрос.Текст + СтрокаУсловия;
			Запрос.УстановитьПараметр(ИмяРеквизита, Реквизит.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ")";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Процедура ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, БанковскийСчет)
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда // Собственная организация
			Если СтрокаДокумента.Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;
			Иначе
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Договор кредита/депозита
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДанныеДоговора.Ссылка КАК Ссылка,
		|	ДанныеДоговора.ХарактерДоговора КАК ХарактерДоговора,
		|	ДанныеДоговора.СтатьяДДСПоступленияВыдачи КАК СтатьяДДСПоступленияВыдачи,
		|	ДанныеДоговора.СтатьяДДСОсновногоДолга КАК СтатьяДДСОсновногоДолга
		|
		|ИЗ
		|	Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
		|
		|ГДЕ
		|	ДанныеДоговора.БанковскийСчет = &БанковскийСчет
		|	И ДанныеДоговора.Контрагент = &Контрагент
		|	И ДанныеДоговора.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
		|	И ДанныеДоговора.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|";
		
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			СтрокаДокумента.ДоговорКредитаДепозита = Выборка.Ссылка;
			СтрокаДокумента.ВидОперации = Справочники.ДоговорыКредитовИДепозитов.ОперацияПоХарактеруДоговора(
				Выборка.ХарактерДоговора,
				Не СтрокаДокумента.Исходящий);
				
			Если Выборка.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм Тогда
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
					?(Не СтрокаДокумента.Исходящий, Выборка.СтатьяДДСПоступленияВыдачи, Выборка.СтатьяДДСОсновногоДолга);
			Иначе
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
					?(Не СтрокаДокумента.Исходящий, Выборка.СтатьяДДСОсновногоДолга, Выборка.СтатьяДДСПоступленияВыдачи);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Договор с контрагентом
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДанныеДоговора.Ссылка КАК Ссылка,
		|	ДанныеДоговора.ТипДоговора КАК ТипДоговора,
		|	ДанныеДоговора.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|
		|ГДЕ
		|	ДанныеДоговора.БанковскийСчет = &БанковскийСчет
		|	И ДанныеДоговора.Контрагент = &Контрагент
		|	И ДанныеДоговора.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
		|	И ДанныеДоговора.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|";
		
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			СтрокаДокумента.ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Выборка.Ссылка);
			СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
			
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Исходящие)
	
	Если Не ТаблицаДокументов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ДатаПроведения,
	|	ТаблицаДокументов.СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Если Исходящие Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаДокументов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка)
		|		И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
		|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) = ТаблицаДокументов.ДатаПроведения
		|		И ДанныеДокумента.СуммаДокумента = ТаблицаДокументов.СуммаДокумента
		|		И ДанныеДокумента.Проведен
		|ГДЕ
		|	НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
		|";
		
	Иначе
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаДокументов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк)
		|		И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
		|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) = ТаблицаДокументов.ДатаПроведения
		|		И ДанныеДокумента.СуммаДокумента = ТаблицаДокументов.СуммаДокумента
		|		И ДанныеДокумента.Проведен
		|ГДЕ
		|	НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.КассовыйДокумент = Выборка.Ссылка;
			СтрокаДокумента.Загружать = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСписания(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы, Префикс)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	УстановитьСвойство(ДокументОбъект, "Дата", ДокументОбъект.ДатаВходящегоДокумента);
	
	Если НачалоДня(ДокументОбъект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументОбъект.Дата = КонецДня(ДокументОбъект.Дата);
	КонецЕсли;
	
	//++ Локализация
	// Контроль заявок
	Если ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
		Или ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер
		Или ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер Тогда
	
		ДокументОбъект.НеКонтролироватьЗаполнениеЗаявки = Истина;
	Иначе
	//-- Локализация
		ДокументОбъект.ОплатаПоЗаявкам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
			И Не ДенежныеСредстваСервер.РазрешеныПлатежиБезУказанияЗаявок(ДокументОбъект);
	//++ Локализация
	КонецЕсли;
	//-- Локализация
	
	// Хоз. операция
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		ХозяйственнаяОперация = СтрокаДокумента.ВидОперации;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	КонецЕсли;
	УстановитьСвойство(ДокументОбъект, "ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	// Статья по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
	
	// Контрагент
	Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
		ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
		Иначе
			УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Счет контрагента
	Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
		КонецЕсли;
	КонецЕсли;
	
	// Подотчетное лицо
	Если РеквизитыХозОперации.Найти("ПодотчетноеЛицо") <> Неопределено Тогда
		Если СтрокаДокумента.НайденКонтрагент Тогда
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.Контрагент);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.ПодотчетноеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыХозОперации.Найти("ДатаАвансовогоОтчета") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "ДатаАвансовогоОтчета",
			?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДатаСеанса()) + 7 * 24 * 3600);
	КонецЕсли;
	
	// Банковский счет получатель
	Если РеквизитыХозОперации.Найти("БанковскийСчетПолучатель") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "БанковскийСчетПолучатель", СтрокаДокумента.СчетКонтрагента);
	КонецЕсли;
	
	// Прочие реквизиты
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДокумента,
		"СтатьяДвиженияДенежныхСредств, Подразделение, КассаПолучатель");
	
	//++ Локализация
	Если ЗначениеЗаполнено(СтрокаДокумента.ОчередностьПлатежа) Тогда
		УстановитьСвойство(ДокументОбъект, "ОчередностьПлатежа", СтрокаДокумента.ОчередностьПлатежа);
	Иначе
		УстановитьСвойство(ДокументОбъект, "ОчередностьПлатежа", 5);
	КонецЕсли;
	УстановитьСвойство(ДокументОбъект, "КодВидаДохода", СтрокаДокумента.КодНазПлатежа);
	УстановитьСвойство(ДокументОбъект, "КодВыплат", СтрокаДокумента.ПоказательТипа);
	//-- Локализация
	
	//++ Локализация
	// Бюджетные реквизиты
	Если СтрокаДокумента.ПлатежВБюджет Тогда
		УстановитьСвойство(ДокументОбъект, "ПеречислениеВБюджет", Истина);
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", СтрокаДокумента.ВидПеречисленияВБюджет);
		УстановитьСвойство(ДокументОбъект, "КодБК", СтрокаДокумента.ПоказательКБК);
		УстановитьСвойство(ДокументОбъект, "КодОКАТО", СтрокаДокумента.ОКАТО);
		УстановитьСвойство(ДокументОбъект, "СтатусСоставителя", СтрокаДокумента.СтатусСоставителя);
		Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", "0");
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", СтрокаДокумента.ПоказательОснования);
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", СтрокаДокумента.ПоказательПериода);
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", СтрокаДокумента.ПоказательНомера);
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", СтрокаДокумента.ПоказательДаты);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "ПоказательТипа", СтрокаДокумента.ПоказательТипа);
	Иначе
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж);
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		РеквизитыПлательщика = ДенежныеСредстваСерверЛокализация.РеквизитыПлательщика(ДокументОбъект);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыПлательщика);
	КонецЕсли;
	//-- Локализация
	
	// Расшифровка платежа
	Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ДанныеРегистра.ОбъектОплаты КАК ДоговорКредитаДепозита,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).СтатьяДДСПоступленияВыдачи КАК СтатьяДвиженияДенежныхСредств
			|ИЗ
			|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
			|ГДЕ
			|	ДанныеРегистра.БанковскийСчетКасса = &БанковскийСчет
			|	И ДанныеРегистра.ПлательщикПолучатель = &Контрагент
			|	И ДанныеРегистра.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Списание)
			|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРегистра.ОбъектОплаты
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.ОбъектОплаты) = 1
			|";
			
			Запрос.УстановитьПараметр("БанковскийСчет", ДокументОбъект.БанковскийСчет);
			Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Выборка);
			Иначе
				СтрокиКЗагрузке = Новый Массив;
				СтрокиКЗагрузке.Добавить(СтрокаДокумента);
				ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, ДокументОбъект.БанковскийСчет);
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита");
			КонецЕсли;
			
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата);
		
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ОбъектРасчетов") = Неопределено Тогда
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита, СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов, Подразделение");
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата);
		
		Иначе
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Дата", ДокументОбъект.Дата);
			Реквизиты.Вставить("Организация", ДокументОбъект.Организация);
			Реквизиты.Вставить("СуммаДокумента", 0);
			Реквизиты.Вставить("Валюта", ДокументОбъект.Валюта);
			Реквизиты.Вставить("Контрагент", ДокументОбъект.Контрагент);
			
			Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Реквизиты.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
			Иначе
				Реквизиты.Вставить("Партнер", Неопределено);
			КонецЕсли;
			
			Реквизиты.Вставить("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
			
			Реквизиты.Вставить("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
			Реквизиты.Вставить("ПартнерПрочиеОтношения", Ложь);
			Реквизиты.Вставить("ПодборДебиторскойЗадолженности", Ложь);
			Реквизиты.Вставить("ПодборТолькоБезусловнойЗадолженности", Ложь);
			
			//++ Локализация
			//-- Локализация
			
			АдресПлатежейВХранилище = "";
			ТаблицаОстатковРасчетов = Неопределено;
			
			ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов);
			КолонкиТаблицыОстатковВзаиморасчетов = ТаблицаОстатковРасчетов.Колонки; // КоллекцияКолонокТаблицыЗначений 
			КолонкиТаблицыОстатковВзаиморасчетов.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
			
			РаспределяемаяСумма = ДокументОбъект.СуммаДокумента;
		
			Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
				
				Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
					
					НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТаблицы.Номер, Истина, Истина);
					Если СтрЧислоВхождений(СтрокаДокумента.НазначениеПлатежа, НомерДокументаРасчетов) > 0 Тогда
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																				ДокументОбъект.Валюта,
																				СтрокаРасшифровки.ВалютаВзаиморасчетов,
																				ДокументОбъект.Организация,
																				ДокументОбъект.Дата);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПроводитьДокументы И РаспределяемаяСумма > 0 Тогда // Подбор объектов расчетов
				
				Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
						
						Если СтрокаТаблицы.Обработано Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы, , "Сумма");
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																				ДокументОбъект.Валюта,
																				СтрокаРасшифровки.ВалютаВзаиморасчетов,
																				ДокументОбъект.Организация,
																				ДокументОбъект.Дата);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РаспределяемаяСумма > 0 Или Не ДокументОбъект.РасшифровкаПлатежа.Количество() Тогда
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств");
				СтрокаРасшифровки.Сумма = РаспределяемаяСумма;
				РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																		СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																		ДокументОбъект.Валюта,
																		СтрокаРасшифровки.ВалютаВзаиморасчетов,
																		ДокументОбъект.Организация,
																		ДокументОбъект.Дата);
			КонецЕсли;
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Ложь));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	УстановитьСвойство(ДокументОбъект, "Дата", ДокументОбъект.ДатаВходящегоДокумента);
	
	Если НачалоДня(ДокументОбъект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументОбъект.Дата = КонецДня(ДокументОбъект.Дата);
	КонецЕсли;
	
	// Хоз. операция
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		ХозяйственнаяОперация = СтрокаДокумента.ВидОперации;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	КонецЕсли;
	УстановитьСвойство(ДокументОбъект, "ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	// Статья по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, РеквизитыВсе, РеквизитыХозОперации);
		
	// Контрагент
	Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
		ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
		Иначе
			УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Счет контрагента
	Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
		КонецЕсли;
	КонецЕсли;
	
	// Подотчетное лицо
	Если РеквизитыХозОперации.Найти("ПодотчетноеЛицо") <> Неопределено Тогда
		Если СтрокаДокумента.НайденКонтрагент Тогда
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.Контрагент);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.ПодотчетноеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	// Банковский счет отправитель
	Если РеквизитыХозОперации.Найти("БанковскийСчетОтправитель") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "БанковскийСчетОтправитель", СтрокаДокумента.СчетКонтрагента);
	КонецЕсли;
	
	// Прочие реквизиты
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДокумента,
		"СтатьяДвиженияДенежныхСредств, Подразделение, КассаОтправитель");
	
	// Поступление оплаты по эквайрингу
	Если РеквизитыХозОперации.Найти("ДоговорЭквайринга") <> Неопределено Тогда
		
		ОбработатьКомиссию = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорЭквайринга) Тогда
			УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга", СтрокаДокумента.ДоговорЭквайринга);
			УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", СтрокаДокумента.СтатьяРасходов);
			УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", СтрокаДокумента.АналитикаРасходов);
			РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДокументОбъект.ДоговорЭквайринга);
			УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию",
				РеквизитыДоговора.СпособОтраженияКомиссии = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении);
			ОбработатьКомиссию = ДокументОбъект.ОтражатьКомиссию;
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга",
				Справочники.ДоговорыЭквайринга.ДоговорПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.Контрагент));
			Если ЗначениеЗаполнено(ДокументОбъект.ДоговорЭквайринга) Тогда
				РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДокументОбъект.ДоговорЭквайринга);
				УстановитьСвойство(ДокументОбъект, "Подразделение", РеквизитыДоговора.ПодразделениеРасходов);
				УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", РеквизитыДоговора.СтатьяРасходов);
				УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", РеквизитыДоговора.АналитикаРасходов);
				УстановитьСвойство(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", РеквизитыДоговора.СтатьяДвиженияДенежныхСредствПоступлениеОплаты);
				УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию",
					РеквизитыДоговора.СпособОтраженияКомиссии = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении);
				ОбработатьКомиссию = ДокументОбъект.ОтражатьКомиссию;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбработатьКомиссию И РеквизитыДоговора.ФиксированнаяСтавкаКомиссии Тогда
			СуммаКомиссии = Окр(ДенежныеСредстваКлиентСервер.РассчитатьСуммуКомиссии(
				ДокументОбъект.СуммаДокумента, РеквизитыДоговора.СтавкаКомиссии, Истина), 2);
			СуммаКомиссииСтрокой1 = Строка(СуммаКомиссии);
			СуммаКомиссииСтрокой2 = Строка(Цел(СуммаКомиссии));
			Если СтрНайти(ДокументОбъект.НазначениеПлатежа, СуммаКомиссииСтрокой1)
				Или СтрНайти(ДокументОбъект.НазначениеПлатежа, СуммаКомиссииСтрокой2) Тогда
				УстановитьСвойство(ДокументОбъект, "СуммаКомиссии", СуммаКомиссии);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Расшифровка платежа
	Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		Если СтрокаДокумента.НайденоОснованиеПлатежа Тогда // УИП
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, ОснованиеПлатежа, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств");
			СтрокаРасшифровки.УдалитьЗаказ = СтрокаДокумента.ОбъектРасчетов;
			СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата);
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Истина));
					
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ДанныеРегистра.ОбъектОплаты КАК ДоговорКредитаДепозита,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).СтатьяДДСПоступленияВыдачи КАК СтатьяДвиженияДенежныхСредств
			|ИЗ
			|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
			|ГДЕ
			|	ДанныеРегистра.БанковскийСчетКасса = &БанковскийСчет
			|	И ДанныеРегистра.ПлательщикПолучатель = &Контрагент
			|	И ДанныеРегистра.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Поступление)
			|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам)
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРегистра.ОбъектОплаты
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.ОбъектОплаты) = 1
			|";
			
			Запрос.УстановитьПараметр("БанковскийСчет", ДокументОбъект.БанковскийСчет);
			Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Выборка);
			Иначе
				СтрокиКЗагрузке = Новый Массив;
				СтрокиКЗагрузке.Добавить(СтрокаДокумента);
				ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, ДокументОбъект.БанковскийСчет);
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита");
			КонецЕсли;
			
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата);
			
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ОбъектРасчетов") = Неопределено Тогда // Прочие платежи
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита, СтатьяДоходов, АналитикаДоходов, АналитикаАктивовПассивов, Подразделение");
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата);
		
		Иначе
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Дата", ДокументОбъект.Дата);
			Реквизиты.Вставить("Организация", ДокументОбъект.Организация);
			Реквизиты.Вставить("СуммаДокумента", 0);
			Реквизиты.Вставить("Валюта", ДокументОбъект.Валюта);
			Реквизиты.Вставить("Контрагент", ДокументОбъект.Контрагент);
			
			Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Реквизиты.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
			Иначе
				Реквизиты.Вставить("Партнер", Неопределено);
			КонецЕсли;
			
			Реквизиты.Вставить("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
			
			Реквизиты.Вставить("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
			Реквизиты.Вставить("ПартнерПрочиеОтношения", Ложь);
			Реквизиты.Вставить("ПодборДебиторскойЗадолженности", Истина);
			Реквизиты.Вставить("ПодборТолькоБезусловнойЗадолженности", Ложь);
			
			//++ Локализация
			//-- Локализация
			
			АдресПлатежейВХранилище = "";
			ТаблицаОстатковРасчетов = Неопределено;
			
			ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов);
			КолонкиТаблицыОстатковВзаиморасчетов = ТаблицаОстатковРасчетов.Колонки; // КоллекцияКолонокТаблицыЗначений
			КолонкиТаблицыОстатковВзаиморасчетов.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
			КолонкиТаблицыОстатковВзаиморасчетов.Добавить("ОснованиеПлатежа");
			
			РаспределяемаяСумма = ДокументОбъект.СуммаДокумента;
			
			Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
				
				Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
					
					СтрокаТаблицы.ОснованиеПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ОбъектРасчетов, "Объект");
					
					НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТаблицы.Номер, Истина, Истина);
					Если СтрЧислоВхождений(СтрокаДокумента.НазначениеПлатежа, НомерДокументаРасчетов) > 0 Тогда
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																				ДокументОбъект.Валюта,
																				СтрокаРасшифровки.ВалютаВзаиморасчетов,
																				ДокументОбъект.Организация,
																				ДокументОбъект.Дата);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПроводитьДокументы И РаспределяемаяСумма > 0 Тогда // Подбор объектов расчетов
				
				Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
						
						Если СтрокаТаблицы.Обработано Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаТаблицы.ОснованиеПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ОбъектРасчетов, "Объект");
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																				ДокументОбъект.Валюта,
																				СтрокаРасшифровки.ВалютаВзаиморасчетов,
																				ДокументОбъект.Организация,
																				ДокументОбъект.Дата);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РаспределяемаяСумма > 0 Или Не ДокументОбъект.РасшифровкаПлатежа.Количество() Тогда
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, ОснованиеПлатежа, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств");
				СтрокаРасшифровки.Сумма = РаспределяемаяСумма;
				РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата);
			КонецЕсли;
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Истина));
		КонецЕсли;
	КонецЕсли;
	
	//++ Локализация
	Если НЕ ПустаяСтрока(ДокументОбъект.НазначениеПлатежа) Тогда
		ДокументОбъект.ЗаполнитьКодВалютнойОперации();
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

Функция РеквизитыХозОперацийСписания()
	
	РеквизитыХозОпераций = Новый Соответствие;
	
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику,
		Новый Структура("ПодотчетноеЛицо, Подразделение, РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета,
		Новый Структура("СтатьяДвиженияДенежныхСредств, Подразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту,
		Новый Структура("СтатьяДвиженияДенежныхСредств, Подразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка,
		Новый Структура("КассаПолучатель"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств, РасшифровкаПлатежаСтатьяРасходов, РасшифровкаПлатежаАналитикаРасходов, РасшифровкаПлатежаАналитикаАктивовПассивов, РасшифровкаПлатежаПодразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту,
		Новый Структура("ДоговорЭквайринга, Подразделение, СтатьяРасходов, АналитикаРасходов, СтатьяДвиженияДенежныхСредств"));
	
	Возврат РеквизитыХозОпераций;
	
КонецФункции

Функция РеквизитыХозОперацийПоступления()
	
	РеквизитыХозОпераций = Новый Соответствие;
	
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте,
		Новый Структура("ДоговорЭквайринга, Подразделение, СтатьяРасходов, АналитикаРасходов, СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк,
		Новый Структура("Касса"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств, РасшифровкаПлатежаСтатьяДоходов, РасшифровкаПлатежаАналитикаДоходов, РасшифровкаПлатежаАналитикаАктивовПассивов, РасшифровкаПлатежаПодразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС,
		Новый Структура(""));
	
	Возврат РеквизитыХозОпераций;
	
КонецФункции

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь)
	
	Если ЗначениеСвойства <> Неопределено И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Если (Не ЗначениеЗаполнено(Объект[ИмяСвойства]) Или ОбязательнаяЗаменаСтарогоЗначения)
			Или ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
			Или ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗамечание(Буфер, НоваяСтрока, Разделитель = "")
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		Шаблон = НСтр("ru = '%1%2%3'");
		Буфер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			Буфер,
			?(ПустаяСтрока(Разделитель), Символы.ПС, Разделитель),
			НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи, РежимЗаписи, СтрокаДокумента)
	
	ЭтоНовыйДокумент    = ОбъектДляЗаписи.ЭтоНовый();
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен      = ОбъектДляЗаписи.Проведен;
	Проводить = (РежимЗаписи = РежимЗаписиДокумента.Проведение Или ОбъектПроведен И РежимЗаписи = РежимЗаписиДокумента.Запись);
	
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			
			НазваниеОбъекта = Строка(ОбъектДляЗаписи);
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1%2. Произошли ошибки при записи документа!'"),
				Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
				?(ЭтоНовыйДокумент, " " + НСтр("ru = 'не создан'"), " " + НСтр("ru = 'не записан'")));
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru = '%1
				|%2'");
			
			Событие = НСтр("ru = 'Данные'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ "." + НСтр("ru = 'Изменение'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка, ОбъектДляЗаписи.Метаданные(),
				?(ЭтоНовыйДокумент, "", ОбъектДляЗаписи.Ссылка),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					ОписаниеОшибки.Описание,
					?(ЭтоНовыйДокумент, ТекстСообщения, НСтр("ru = 'Произошли ошибки при записи документа!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()))));
			
			Если ОписаниеОшибки.Причина <> Неопределено Тогда
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки, ОписаниеОшибки.Причина.Описание);
			КонецЕсли;
			
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	НазваниеОбъекта = Строка(ОбъектДляЗаписи);
	
	Если Проводить И (ОбъектМодифицирован Или НЕ ОбъектПроведен) Тогда
		
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru = '%1
				|Произошли ошибки при проведении!'");
				
			Событие = НСтр("ru = 'Данные'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ "." + НСтр("ru = 'Проведение'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка, ОбъектДляЗаписи.Метаданные(), ОбъектДляЗаписи.Ссылка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				ОписаниеОшибки.Описание));
				
			Если ОписаниеОшибки.Причина <> Неопределено Тогда
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки, ОписаниеОшибки.Причина.Описание);
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОстаткиНаСчетахПоДаннымВыписки(БанковскийСчет, НомерСчета, ДанныеВыписки, ДатаНачалаЗагрузки, ДатаКонцаЗагрузки)
	
	Если ДанныеВыписки <> Неопределено Тогда
		РасчетныеСчета = ДанныеВыписки.РасчетныеСчета;
		Для каждого РасчетныйСчет Из РасчетныеСчета Цикл
			Если НомерСчета = РасчетныйСчет.РасчСчет Тогда
				
				ПараметрыЗаписи = Новый Структура;
				
				НачальныйОстаток = ДенежныеСредстваКлиентСервер.ПреобразоватьВЧисло(РасчетныйСчет.НачальныйОстаток);
				КонечныйОстаток = ДенежныеСредстваКлиентСервер.ПреобразоватьВЧисло(РасчетныйСчет.КонечныйОстаток);
				Поступление = ДенежныеСредстваКлиентСервер.ПреобразоватьВЧисло(РасчетныйСчет.ВсегоПоступило);
				Списание = ДенежныеСредстваКлиентСервер.ПреобразоватьВЧисло(РасчетныйСчет.ВсегоСписано);
				
				ДатаНачала = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(РасчетныйСчет.ДатаНачала);
				ДатаКонца = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(РасчетныйСчет.ДатаКонца);
				
				Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
					ДатаНачала = ДатаНачалаЗагрузки;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ДатаКонца) Тогда
					ДатаКонца = ДатаКонцаЗагрузки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаКонца)
					И НачалоДня(ДатаНачала) = НачалоДня(ДатаКонца) Тогда
					
					ПараметрыЗаписи.Вставить("НачальныйОстаток", НачальныйОстаток);
					ПараметрыЗаписи.Вставить("Поступление", Поступление);
					ПараметрыЗаписи.Вставить("Списание", Списание);
					ПараметрыЗаписи.Вставить("КонечныйОстаток", КонечныйОстаток);
					
					РегистрыСведений.ОстаткиНаБанковскихСчетахПоДаннымВыписок.СоздатьЗапись(
						ДатаНачала, БанковскийСчет, ПараметрыЗаписи);
				Иначе
					Если ЗначениеЗаполнено(ДатаНачала) Тогда
						ПараметрыЗаписи.Вставить("НачальныйОстаток", НачальныйОстаток);
						РегистрыСведений.ОстаткиНаБанковскихСчетахПоДаннымВыписок.СоздатьЗапись(
							ДатаНачала, БанковскийСчет, ПараметрыЗаписи);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДатаКонца) Тогда
						ПараметрыЗаписи.Вставить("КонечныйОстаток", КонечныйОстаток);
						РегистрыСведений.ОстаткиНаБанковскихСчетахПоДаннымВыписок.СоздатьЗапись(
							ДатаКонца, БанковскийСчет, ПараметрыЗаписи);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
