#Область ОписаниеПеременных

&НаКлиенте
Перем КоличествоАтрибутов; 

&НаКлиенте
Перем ИДТСД;

&НаКлиенте
Перем ПодбираемыйТипДанных;

&НаКлиенте
Перем ТекущийЭлементТипаДанных; 

&НаКлиенте
Перем ПредыдущийТипДанных; 

&НаКлиенте
Перем ТипОбъектаКонфигурации;

&НаКлиенте
Перем КаталогFTPДоступен;

&НаКлиенте
Перем РазделительПути; 

&НаКлиенте
Перем МассивСписокТСД;

&НаКлиенте
Перем FTP;  

&НаКлиенте
Перем ТекущееРасположение;

#КонецОбласти

#Область Интерфейс

#Область УниверсальныеОписанияОповещения

&НаКлиенте
Процедура УдалитьФайлы_ОбработкаОповещения(ДополнительныеПараметры) Экспорт
	
	//обработка дополнительных действий.
	
КонецПроцедуры	

&НаКлиенте
Процедура НачатьЧтение_ОбработкаОповещения(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ДопОбработка") Тогда 
		Док = НайтиДокумент(ДополнительныеПараметры);
		ОбходМассиваФайловFTP_Завершение(Док, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("НовыеТовары_Файл") Тогда
		ЗаполнитьТЧТоварами_Завершение(ДополнительныеПараметры);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("НовыеТовары_ФайлШК") Тогда
		ЗаполнитьТЧШтрихкодами_Завершение(ДополнительныеПараметры);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("УдалениеТоваров") Тогда
		УдалениеТоваров_Завершение(ДополнительныеПараметры);
	КонецЕсли; 
	
	Если ДополнительныеПараметры.Свойство("УдалениеШК") Тогда
		УдалениеШК_Завершение(ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗапись_ОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда Возврат; КонецЕсли;
	
	Если ДополнительныеПараметры.ПроцедураВызова = "ОтправитьФайлНаFTP" Тогда
		ОтправитьФайлНаFTP_Завершение(ДополнительныеПараметры);		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискФайлов_ОбработкаОповещения(МассивШК, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("ФиксированнаяСтруктура") Тогда		
		Если Не ДополнительныеПараметры.Свойство("ПроцедураВызова") = Неопределено Тогда			
			Если ДополнительныеПараметры.ПроцедураВызова = "ЗаменитьГУИДШК" Тогда
				ЗаменитьГУИДШК_ОбработатьМассивШК(МассивШК, ДополнительныеПараметры.ГУИДСтарый, ДополнительныеПараметры.ГУИДНовый);
			КонецЕсли;  			
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеКаталогаНастроек_ОбработкаОповещения(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	//обработка дополнительных действий.
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеСобытия

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Закрытие конструктора" Тогда		
		МассивШаблонов = Параметр;
		СоздатьНовыеШаблоны(МассивШаблонов);
		СохранитьШаблоны();
		ОграничитьТипыДока(); 
		
	ИначеЕсли ИмяСобытия = "ПолучениеКодаАвторизации" Тогда 
		ЯндексДискКодАвторизации = Параметр;
		Активизировать();  
		
	ИначеЕсли ИмяСобытия = "ДобавлениеДопФормы" Тогда 
		ДобавлениеДопФормыДляШаблона(Параметр);
	КонецЕсли;
	
КонецПРоцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КаталогFTPДоступен = Ложь;
	
	ПолноеИмяОбъекта = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	Если Не ЗначениеЗаполнено(ТипОбмена) Тогда
		ТипОбмена = 1;
	КонецЕсли;	      
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)   
	
	Если НЕ ЗначениеЗаполнено(FTPТаймаут) Тогда
		FTPТаймаут = 30;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(FTPТаймаутПриОткрытии) Тогда
		FTPТаймаутПриОткрытии = 1;
	КонецЕсли;
	
	Если ТипОбмена = "1" Тогда
		СоединениеСFTPКорректно = Истина;
	ИначеЕсли ТипОбмена = "2" Тогда
		ПапкаПриложения();
	КонецЕсли;
	
	РазделительПути = DM_ПолучитьРазделительПути();	
	ВидимостьЭлементовНастройки();
	
	#Если ВебКлиент Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьКомпонентуЗавершение",ЭтаФорма);
			НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		Иначе
			ПрочитатьШаблоны();
		КонецЕсли;
		
	#Иначе
		Попытка
			ПрочитатьШаблоны();
		Исключение
		Конецпопытки;
		
		Попытка
			ПрочитатьНастройкиАвтозагрузки();
		Исключение
		Конецпопытки;
		
	#КонецЕсли   
	
	//открытие страницы, которая была открыта в предыдущем сеанса:
	Попытка
		Если ЗначениеЗаполнено(ИндексОткрытойСтраницы) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы[ИндексОткрытойСтраницы];
		КонецЕсли;
	Исключение
	Конецпопытки;
	
	АвтоматическиОбновлятьСписокДокументовПриИзменении("");
	АвтоматическиЗагружатьСписокДокументовПриИзменении("");
	
	Если ТипОбмена = "1" Тогда
		КаталогFTPПриИзменении(Истина);
	ИначеЕсли ТипОбмена = "0" Тогда
		лКаталогОбменаПриИзменении(Истина);
	КонецЕсли;	
	
	ОбновитьТаблицыШаговНаФорме();
	ЗагрузитьИменаРеквизитовВИмяАтрибута();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если лКаталогОбмена <> "" Тогда
		лКаталогОбмена = лКаталогОбмена + ?(Прав(лКаталогОбмена, 1) = РазделительПути, "", РазделительПути);
	КонецЕсли;
	
	Если лКаталогНастроек <> "" Тогда
		лКаталогНастроек = лКаталогНастроек + ?(Прав(лКаталогНастроек,1) = РазделительПути, "", РазделительПути);
	КонецЕсли;
	
	ИндексОткрытойСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИсточникВыбора.Заголовок = "Выбор пользователя" Тогда
		ДобавитьПользователейДляВыгрузки(ВыбранноеЗначение); 
		
	ИначеЕсли СтрНайти(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура.Форма.ФормаВыбора") > 0 Тогда
		ВыбраннаяГруппаТовара.ЗагрузитьЗначения(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		ОбработкаВыбораСервер(ВыбранноеЗначение);
		ИзменитьЗаголовокКомандыВыгрузитьДокумент();	
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСервер(ВыбранноеЗначение)
	
	ТабДокументыВыгрузки = РеквизитФормыВЗначение("ДокументыВыгрузки");
	
	Если ОчищатьСписокДокументов Тогда
		ТабДокументыВыгрузки.Очистить();	
	КонецЕсли; 
	
	Для каждого Значение Из ВыбранноеЗначение Цикл
		НоваяСтрока = ТабДокументыВыгрузки.Добавить();
		НоваяСтрока.ДокументВыгрузки = Значение;	
	КонецЦикла; 
	
	ТабДокументыВыгрузки.Свернуть("ДокументВыгрузки");	
	ЗначениеВРеквизитФормы(ТабДокументыВыгрузки, "ДокументыВыгрузки");
	
КонецПроцедуры

#КонецОбласти

#Область События_Страницы_Выгрузка

&НаКлиенте
Процедура ГруппаЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "ГруппаНастройки" Тогда
		ЗаполнитьЗначенияПоУмолчаниюПоНастройкеОбмена();
	КонецЕсли;
		
КонецПроцедуры

#Область СобытияВыгрузки_Страница_Документы

&НаКлиенте
Процедура ВопросДобавитьДокументВыгрузки(Результат, Параметры) Экспорт
	
	ОчищатьСписокДокументов = Истина; 	
	
	Если Результат = КодВозвратаДиалога.Да Тогда				
		ДокументВыгрузкиНачалоВыбора("", Неопределено, Ложь);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда 
		ОчищатьСписокДокументов = Ложь;
		ДокументВыгрузкиНачалоВыбора("", Неопределено, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаголовокКомандыВыгрузитьДокумент()
	
	Элементы.ВыгрузитьДокумент.Заголовок = ?(ДокументыВыгрузки.Количество() > 1, "Выгрузить документы", "Выгрузить документ");
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонДокументаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить(); 
	
	Для каждого СтрокаТЗ Из ШаблоныДокументов Цикл
		Элемент.СписокВыбора.Добавить(Строка(СтрокаТЗ.ТипДокумента), СтрокаТЗ.ТипДокумента);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонДокументаВыгрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДокументыВыгрузки.Очистить();
	Стр = ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента", ВыбранноеЗначение));
	
	КодШаблонаДокументаВыгрузки = Стр[0].Код;
	ВидДокументаВыгрузки 		= Стр[0].ВидДокумента;
	ИмяТЧДокументаПодбор 		= Стр[0].ИмяТабличнойЧастиПодбор;
	ИмяТЧДокументаПриемка 		= Стр[0].ИмяТабличнойЧастиПриемка;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументВыгрузки(Команда)
	
	ДокументВыгрузкиНачалоВыбора("", Неопределено, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранный(Команда)
	
	МассивУдаляемыхСтрок = Элементы.ДокументыВыгрузки.ВыделенныеСтроки; 
	КоличествоСтрок = МассивУдаляемыхСтрок.Количество();
	
	Пока КоличествоСтрок > 0 Цикл
		НайденнаяСтрока = ДокументыВыгрузки.НайтиПоИдентификатору(МассивУдаляемыхСтрок[КоличествоСтрок-1]);
		ДокументыВыгрузки.Удалить(НайденнаяСтрока); 
		КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;
	
	ИзменитьЗаголовокКомандыВыгрузитьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	
	ДокументыВыгрузки.Очистить();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДокументВыгрузки"
//
// Параметры:
//  Элемент           	- <ПолеВвода>
//                    	- Поле ввода ("ДокументВыгрузки"), с которым связано данное событие.
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
&НаКлиенте
Процедура ДокументВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ШаблоныДокументов.Количество() = 0 Тогда
		ПоказатьСообщениеПользователю("Не созданы шаблоны документов!");
		Возврат; 
		
	Иначе   		
		Если ПустаяСтрока(ШаблонДокументаВыгрузки) Тогда
			ПоказатьСообщениеПользователю("Не выбран шаблон документа!");
			Возврат;
		КонецЕсли; 
		
		Если ШаблонДокументаВыгрузки <> "" Тогда			
			Стр = ШаблоныДокументов.НайтиСтроки(Новый Структура("Код", КодШаблонаДокументаВыгрузки));			
			ПараметрыПодбора = Новый Структура;
			ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
			Подбор = Получитьформу("Документ." + Стр[0].ВидДокумента + ".ФормаВыбора", ПараметрыПодбора, ЭтаФорма);
			Подбор.ЗакрыватьПривыборе = Истина;
			Подбор.Открыть();
			
		Иначе	
			ВыборШаблона = Новый СписокЗначений;
			Для каждого Шаблон Из ШаблоныДокументов Цикл 
				ВыборШаблона.Добавить(Шаблон.Код,Шаблон.ТипДокумента);
			КонецЦикла; 
			
			ОписаниеОповещения = Новый ОписаниеОповещения ("ВыборШаблонаЗавершение", ЭтаФорма);
			ВыборШаблона.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите шаблон");          		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ДокументВыгрузки"
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода ("ДокументВыгрузки"), с которым связано данное событие.
//
&НаКлиенте
Процедура ДокументВыгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	ШаблонДокументаВыгрузки = "";
	КодШаблонаДокументаВыгрузки = "";
	ВидДокументаВыгрузки = "";
	ИмяТЧДокументаПодбор = "";
	ИмяТЧДокументаПриемка = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокумент(Команда)
	
	Попытка   
		ПроверитьКаталоги("ВыгрузитьДокумент");
	Исключение       
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияВыгрузки_Страница_ШаблоныДокументов

&НаКлиенте
Процедура ИспользоватьДопФормыПриИзменении(Элемент, ЭтоНовый = Истина)

	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; 
	         
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьДопФормы = ТекДанные.ИспользоватьДопФормы;
	
	Элементы.ШагиНаФормеШапка.Доступность  = ИспользоватьДопФормы;
	Элементы.ШагиНаФормеСтроки.Доступность = ИспользоватьДопФормы;
	Элементы.ШаблоныДокументовДополнительныеФормыГрупповойВвод.Доступность = ИспользоватьДопФормы;
	Элементы.ШаблоныДокументовВыгружатьДопФормыСДокументом.Доступность     = ИспользоватьДопФормы;
	Элементы.ОчиститьДопШаги.Доступность  = ИспользоватьДопФормы;
	Элементы.ИндикаторДопШаги.Доступность = ИспользоватьДопФормы;
	Элементы.ВыгрузитьДопшаги.Доступность = ИспользоватьДопФормы;
	
	Если ИспользоватьДопФормы Тогда
		Если ЭтоНовый Тогда
			ТекДанные.ДополнительныеФормыГрупповойВвод = Истина;
		КонецЕсли;
	Иначе
		ТекДанные.ДополнительныеФормыГрупповойВвод = Ложь;
		ТекДанные.ВыгружатьДопФормыСДокументом = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводКоличестваПодборПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.ПодтверждатьЭнтеромПодбор = ?(ТекДанные.РучнойВводКоличестваПодбор, Истина, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора "ИспользованиеЯчеекПодбор"
//
// Параметры:
//  Элемент - <ПолеВыбора>
//			- Поле выбора ("ИспользованиеЯчеекПодбор"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользованиеЯчеекПодборПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования 
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.УчитыватьЯчеекВЗаданииПодбор = ТекДанные.УчитыватьЯчеекВЗаданииПодбор И ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользованиеЯчеекПодбор <> 0;
	Элементы.УчитыватьЯчеекВЗаданииПодбор.Доступность = (ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользованиеЯчеекПодбор <> 0);
	
	ТекДанные.ЗаполнятьСкладПодбор = ТекДанные.ЗаполнятьСкладПодбор И ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользованиеЯчеекПодбор <> 0;
	Элементы.ЗаполнятьСкладПодбор.Доступность = (ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользованиеЯчеекПодбор <> 0); 	
	
	ТекДанные.ВыгрузкаЯчеекПодбор = ?(ТекДанные.ИспользованиеЯчеекПодбор = 0, 0, ТекДанные.ВыгрузкаЯчеекПодбор);
	Элементы.ШаблоныДокументовВыгрузкаЯчеекПодбор.ТолькоПросмотр = Не (ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользованиеЯчеекПодбор <> 0);
	
	Элементы.ШаблоныДокументовГруппировкаЯчеекПодбор.ТолькоПросмотр = Не (ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользованиеЯчеекПодбор <> 0);

	//скрываем
	Если ТекДанные.ИспользованиеЯчеекПодбор = 0 Тогда
		Элементы.грПодборНастройкиАдрХран_гр1.Видимость = Ложь;
		Элементы.ШаблоныДокументовВыгрузкаЯчеекПодбор.Видимость = Ложь;
		Элементы.ШаблоныДокументовОбработкаЯчейкиЦеликомПодбор.Видимость = Ложь;
		Элементы.ШаблоныДокументовГруппировкаЯчеекПодбор.Доступность = Ложь;
	Иначе
		Элементы.грПодборНастройкиАдрХран_гр1.Видимость = Истина;
		Элементы.ШаблоныДокументовВыгрузкаЯчеекПодбор.Видимость = Истина;
		Элементы.ШаблоныДокументовОбработкаЯчейкиЦеликомПодбор.Видимость = Истина;
		Элементы.ШаблоныДокументовГруппировкаЯчеекПодбор.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ПриемкаПоПодбору"
//
// Параметры:
//  Элемент - <Флажек>
//			- Флажек ("ПриемкаПоПодбору"), с которым связано данное событие.
//
&НаКлиенте
Процедура ПриемкаПоПодборуПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования 
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.ПриПриемкеЗапрашиватьТовар = ?(ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользоватьПриемку И ТекДанные.ПриемкаПоПодбору, ТекДанные.ПриПриемкеЗапрашиватьТовар, Ложь);
	Элементы.ПриПриемкеЗапрашиватьТовар.Доступность = (ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользоватьПриемку И ТекДанные.ПриемкаПоПодбору);
	
	ТекДанные.ПоштучноеПеремещение = ?(ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользоватьПриемку И ТекДанные.ПриемкаПоПодбору, ТекДанные.ПоштучноеПеремещение, Ложь);
	Элементы.ПоштучноеПеремещение.Доступность = (ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользоватьПриемку И ТекДанные.ПриемкаПоПодбору);          	
	
КонецПроцедуры

&НаКлиенте
Процедура Группа14ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "Автозагрузка" Тогда
		// описание действий
	ИначеЕсли ТекущаяСтраница.Имя = "Подбор" Тогда
		ИспользованиеУпаковочныхЛистовПодборПриИзменении(Неопределено);	
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ИспользоватьПодбор"
//
// Параметры:
//  Элемент - <Флажек>
//			- Флажек ("ИспользоватьПодбор"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользоватьПодборПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования 
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ИспПодбор  = ТекДанные.ИспользоватьПодбор;
	ИспПриемка = ТекДанные.ИспользоватьПриемку;
	
	ТекДанные.ПриемкаПоПодбору							= ?(ИспПриемка И ИспПодбор, ТекДанные.ПриемкаПоПодбору, Ложь);
	ТекДанные.ПриПриемкеЗапрашиватьТовар				= ?(ИспПриемка И ИспПодбор И ТекДанные.ПриемкаПоПодбору, ТекДанные.ПриПриемкеЗапрашиватьТовар, Ложь);
	
	ТекДанные.ПриСканированииТовараПодбор				= ?(ИспПодбор, ТекДанные.ПриСканированииТовараПодбор, 0);
	ТекДанные.ПриПревышенииЗаданияПодбор				= ?(ИспПодбор, ТекДанные.ПриПревышенииЗаданияПодбор, 0);
	ТекДанные.ПриПревышенииЛимитаПодбор				    = ?(ИспПодбор, ТекДанные.ПриПревышенииЛимитаПодбор, 0);
	ТекДанные.ИспользованиеЯчеекПодбор					= ?(ИспПодбор, ТекДанные.ИспользованиеЯчеекПодбор, 0);
	
	ИспользованиеЯчеекПодборПриИзменении(Элементы.ИспользованиеЯчеекПодбор);
	
	ТекДанные.ИспользованиеСерийниковПодбор			    = ?(ИспПодбор, ТекДанные.ИспользованиеСерийниковПодбор, 0);  
	
	ИспользованиеСерийниковПодборПриИзменении(Элементы.ШаблоныДокументовИспользованиеСерийниковПодбор); 
	
	ТекДанные.ИспользованиеУпаковочныхЛистовПодбор		= ?(ИспПодбор, ТекДанные.ИспользованиеУпаковочныхЛистовПодбор, 0);
	ТекДанные.РучнойВводКоличестваПодбор				= ?(ИспПодбор, ТекДанные.РучнойВводКоличестваПодбор, Ложь);
	ТекДанные.ПодтверждатьЭнтеромПодбор				    = ?(ИспПодбор, ТекДанные.ПодтверждатьЭнтеромПодбор, Ложь);
	ТекДанные.ПечатьЭтикеткиПриПодборе					= ?(ИспПодбор, ТекДанные.ПечатьЭтикеткиПриПодборе, 0);
	ТекДанные.ПриемкаПоПодбору							= ?(ИспПодбор И ИспПриемка, ТекДанные.ПриемкаПоПодбору, Ложь);
	ТекДанные.ПриПриемкеЗапрашиватьТовар				= ?(ИспПодбор И ИспПриемка И ТекДанные.ПриемкаПоПодбору, ТекДанные.ПриПриемкеЗапрашиватьТовар, Ложь);
	
	Элементы.ИмяТабличнойЧастиПодбор.Доступность									= ИспПодбор;
	Элементы.ТабличнуюЧастьПриЗагрузке.Доступность                          		= ИспПодбор;
	Элементы.ПриСканированииТовараПодбор.Доступность								= ИспПодбор;
	Элементы.ПриПревышенииЗаданияПодбор.Доступность									= ИспПодбор;
	Элементы.ПриПревышенииЛимитаПодбор.Доступность									= ИспПодбор;
	Элементы.ИспользованиеЯчеекПодбор.Доступность									= ИспПодбор;
	Элементы.ШаблоныДокументовИспользованиеСерийниковПодбор.Доступность				= ИспПодбор;
	Элементы.УчитыватьСерийниковВЗаданииПодбор.Доступность							= ИспПодбор;
	Элементы.ИспользованиеУпаковочныхЛистовПодбор.Доступность						= ИспПодбор;
	Элементы.РучнойВводКоличестваПодбор.Доступность									= ИспПодбор;
	Элементы.ПодтверждатьЭнтеромПодбор.Доступность									= ИспПодбор;
	Элементы.ПечатьЭтикеткиПриПодборе.Доступность									= ИспПодбор;
	Элементы.ШаблоныДокументовВыгружатьЯчейкиСДокументом.Доступность        		= ИспПодбор;
	Элементы.ШаблоныДокументовРазрешитьПропускатьВводУпаковочногоЛиста.Доступность 	= ИспПодбор;
	Элементы.ПриемкаПоПодбору.Доступность											= (ИспПодбор И ИспПриемка);
	Элементы.ПриПриемкеЗапрашиватьТовар.Доступность									= (ИспПодбор И ИспПриемка И ТекДанные.ПриемкаПоПодбору);
	
	Элементы.ШаблоныДокументовГруппировкаЯчеекПодбор.Доступность = ИспПодбор;
	Элементы.ШаблоныДокументовГруппировкаСерийПодбор.Доступность = ИспПодбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблон(Команда)
	
	НовыйШаблон = ШаблоныДокументов.Добавить(); //заполнение нового шаблона типовыми значениями 
	
	Если ШаблоныДокументов.Количество() Тогда
		ШаблоныДокументов.Сортировать("Код");
		СледующийКод = ШаблоныДокументов[ШаблоныДокументов.Количество() - 1].Код + 1;
	Иначе
		СледующийКод = 1;
	КонецЕсли;
	
	НовыйШаблон.Код = СледующийКод;
		
	НовыйШаблон.РазрешеноСозданиеНаТСД 				= Истина;
	НовыйШаблон.РежимСозданияДокументов 			= 1;
	НовыйШаблон.ВыгружатьТоварыСДокументом 			= Истина;
	НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
	НовыйШаблон.ПриСканированииНовогоТовара 		= 1;
	НовыйШаблон.ШтрихкодыТолькоПоШаблонам 			= Истина;
	НовыйШаблон.ВсеШтрихкодыТовара 					= Истина;
	НовыйШаблон.ПервичныйПоискПоШКвЗадании 			= Истина;
	
	НовыйШаблон.ИспользоватьПодбор 					= Истина;
	НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор 	= 3;
	НовыйШаблон.ПриСканированииТовараПодбор         = 1;
	НовыйШаблон.ПриПревышенииЗаданияПодбор          = 1;
	НовыйШаблон.РучнойВводКоличестваПодбор          = Истина;
	НовыйШаблон.ПодтверждатьЭнтеромПодбор           = Истина;
	НовыйШаблон.МаркировкаРежимОСУ           		= 1;
	
	Элементы.ШаблоныДокументов.ТекущаяСтрока = НовыйШаблон.ПолучитьИдентификатор();
	ШаблоныДокументов.Сортировать("Код");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьШаблон(Команда)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ИндексТекущегоЭлементаКоллекции = ШаблоныДокументов.Индекс(ТекДанные);
	
	Попытка
		ШаблоныДокументов.Удалить(ИндексТекущегоЭлементаКоллекции);
		СохранитьШаблоны();
		ОграничитьТипыДока();
	Исключение
		ПоказатьСообщениеПользователю("Не выбран шаблон для удаления!");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблон(Команда)
	
	СохранитьШаблоны();
	ОграничитьТипыДока();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблоныПоУмолчанию(Команда)
	
	Массив = СобратьМассивШаблонов();
	СтруктураПараметров = Новый Структура("МассивШаблонов", Массив);
	
	Форма = ПолучитьФорму(ПолноеИмяОбъекта + ".Форма.ФормаКонстуктораШаблонов", СтруктураПараметров, , , ,);	
	Форма.Открыть();
	
	СохранитьШаблоны();
	ОграничитьТипыДока();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора "ВидДокумента"
//
// Параметры:
//  Элемент - <ПолеВыбора>
//			- Поле выбора ("ВидДокумента"), с которым связано данное событие.
//
&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ВидДокумента = ТекДанные.ВидДокумента;
	
	Если ТекДанные.ИспользоватьЕГАИС Тогда
		Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументовЕГАИС(ВидДокумента).ВыгрузитьЗначения());
	Иначе
		Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументов(ВидДокумента).ВыгрузитьЗначения());
		Элементы.ИмяТабличнойЧастиПриемка.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументов(ВидДокумента).ВыгрузитьЗначения());
	КонецЕсли;
	
	ИндексТекущегоЭлементаКоллекции = ШаблоныДокументов.Индекс(ТекДанные);
	ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПодбор = Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.Получить(0);
	ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПриемка = "";
	
	Если ТекДанные.ИспользоватьЕГАИС Тогда
		ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПодбор = ?(ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИспользоватьПодбор, "Товары", "");	
		
	Иначе
		Если ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИспользоватьПодбор Тогда
			Если ВидДокумента = "ОтборРазмещениеТоваров" Тогда
				ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПодбор = "ТоварыОтбор";
			ИначеЕсли ВидДокумента = "РасходныйОрдерНаТовары" Тогда
				ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПодбор = "ОтгружаемыеТовары";
			Иначе	
				ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПодбор = "Товары";
			КонецЕсли;
		КонецЕсли;
		
		Если ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИспользоватьПриемку Тогда
			Если ВидДокумента = "ОтборРазмещениеТоваров" Тогда
				ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПриемка = "ТоварыРазмещение";
			Иначе	
				ШаблоныДокументов[ИндексТекущегоЭлементаКоллекции].ИмяТабличнойЧастиПриемка = "Товары";
			КонецЕсли;			
		КонецЕсли;  		
	КонецЕсли;
	
	СохранитьШаблоны();
	ОграничитьТипыДока();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора "ИспользованиеСерийниковПодбор"
//
// Параметры:
//  Элемент - <ПолеВыбора>
//			- Поле выбора ("ИспользованиеСерийниковПодбор"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользованиеСерийниковПодборПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ТекДанные.УчитыватьСерийниковВЗаданииПодбор = ТекДанные.УчитыватьСерийниковВЗаданииПодбор И ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользованиеСерийниковПодбор <> 0;
	Элементы.УчитыватьСерийниковВЗаданииПодбор.Доступность = (ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользованиеСерийниковПодбор <> 0);
	Элементы.ШаблоныДокументовУникальныеСерийныеНомераПодбор.Доступность = (ТекДанные.ИспользоватьПодбор И ТекДанные.ИспользованиеСерийниковПодбор <> 0);
	
	//скрываем
	Если ТекДанные.ИспользованиеСерийниковПодбор = 0 Тогда
		Элементы.грПодборНастройкиСерНомера_гр1.Видимость = Ложь;
		Элементы.ШаблоныДокументовСерНомНеПустойПодбор.Видимость = Ложь;
		Элементы.ШаблоныДокументовТипСерийногоНомераПодбор.Видимость = Ложь;
		Элементы.ШаблоныДокументовПравилаВводаСерииПодбор.Видимость = Ложь;
		Элементы.Декорация2.Видимость = Ложь;
		Элементы.ШаблоныДокументовГруппировкаСерийПодбор.ТолькоПросмотр = Истина;
	Иначе
		Элементы.грПодборНастройкиСерНомера_гр1.Видимость = Истина;
		Элементы.ШаблоныДокументовСерНомНеПустойПодбор.Видимость = Истина;
		Элементы.ШаблоныДокументовТипСерийногоНомераПодбор.Видимость = Истина;
		Элементы.ШаблоныДокументовПравилаВводаСерииПодбор.Видимость = Истина;
		Элементы.Декорация2.Видимость = Истина;
		Элементы.ШаблоныДокументовГруппировкаСерийПодбор.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковочныхЛистовПодборПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	//скрываем
	Если Не ТекДанные = Неопределено Тогда 
		Если ТекДанные.ИспользованиеУпаковочныхЛистовПодбор = 0 Тогда
			Элементы.ШаблоныДокументовРазрешитьПропускатьВводУпаковочногоЛиста.Видимость = Ложь;
			ТекДанные.РазрешитьПропускатьВводУпаковочногоЛиста = Ложь;
			Элементы.ШаблоныДокументовСоздаватьДокументыУпаковочныхЛистов.Видимость = Ложь;
			ТекДанные.СоздаватьДокументыУпаковочныхЛистов = Ложь;
		Иначе
			Элементы.ШаблоныДокументовРазрешитьПропускатьВводУпаковочногоЛиста.Видимость = Истина;
			Элементы.ШаблоныДокументовСоздаватьДокументыУпаковочныхЛистов.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШаблоны(Команда)
	
	ПроверитьКаталоги("ВыгрузитьШаблоны");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДопШаги(Команда)
	
	ПроверитьКаталоги("ВыгрузитьДопШаги");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ИспользоватьПриемку"
//
// Параметры:
//  Элемент - <Флажек>
//			- Флажек ("ИспользоватьПриемку"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользоватьПриемкуПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;

	ИспПодбор  = ТекДанные.ИспользоватьПодбор;
	ИспПриемку = ТекДанные.ИспользоватьПриемку;
	
	ТекДанные.ПриемкаПоПодбору							= ?(ИспПриемку И ИспПодбор, ТекДанные.ПриемкаПоПодбору, Ложь);
	ТекДанные.ПриПриемкеЗапрашиватьТовар				= ?(ИспПриемку И ИспПодбор И ТекДанные.ПриемкаПоПодбору, ТекДанные.ПриПриемкеЗапрашиватьТовар, Ложь);
	
	ТекДанные.ПриСканированииТовараПриемка				= ?(ИспПриемку, ТекДанные.ПриСканированииТовараПриемка, 0);
	ТекДанные.ПриПревышенииЗаданияПриемка				= ?(ИспПриемку, ТекДанные.ПриПревышенииЗаданияПриемка, 0);
	ТекДанные.ПриПревышенииЛимитаПриемка				= ?(ИспПриемку, ТекДанные.ПриПревышенииЛимитаПриемка, 0);
	ТекДанные.ИспользованиеЯчеекПриемка				    = ?(ИспПриемку, ТекДанные.ИспользованиеЯчеекПриемка, 0);
	
	ИспользованиеЯчеекПриемкаПриИзменении(Элементы.ИспользованиеЯчеекПриемка);
	
	ТекДанные.ИспользованиеСерийниковПриемка			= ?(ИспПриемку, ТекДанные.ИспользованиеСерийниковПриемка, 0); 
	
	ИспользованиеСерийниковПриемкаПриИзменении(Элементы.ИспользованиеСерийниковПриемка);
	
	ТекДанные.ИспользованиеУпаковочныхЛистовПриемка	    = ?(ИспПриемку, ТекДанные.ИспользованиеУпаковочныхЛистовПриемка, 0);
	ТекДанные.РучнойВводКоличестваПриемка				= ?(ИспПриемку, ТекДанные.РучнойВводКоличестваПриемка, Ложь);
	ТекДанные.ПодтверждатьЭнтеромПриемка				= ?(ИспПриемку, ТекДанные.ПодтверждатьЭнтеромПриемка, Ложь);
	ТекДанные.ПечатьЭтикеткиПриПриемке					= ?(ИспПриемку, ТекДанные.ПечатьЭтикеткиПриПриемке, 0);
	ТекДанные.ПриемкаПоПодбору							= ?(ИспПодбор И ИспПриемку,ТекДанные.ПриемкаПоПодбору, Ложь);
	ТекДанные.ПриПриемкеЗапрашиватьТовар				= ?(ИспПодбор И ИспПриемку И ТекДанные.ПриемкаПоПодбору, ТекДанные.ПриПриемкеЗапрашиватьТовар, Ложь);
	ТекДанные.ПоштучноеПеремещение						= ?(ИспПодбор И ИспПриемку И ТекДанные.ПриемкаПоПодбору, ТекДанные.ПоштучноеПеремещение, Ложь);
	
	Элементы.ИмяТабличнойЧастиПриемка.Доступность											= ИспПриемку;
	Элементы.ПриСканированииТовараПриемка.Доступность										= ИспПриемку;
	Элементы.ПриПревышенииЗаданияПриемка.Доступность										= ИспПриемку;
	Элементы.ПриПревышенииЛимитаПриемка.Доступность											= ИспПриемку;
	Элементы.ИспользованиеЯчеекПриемка.Доступность											= ИспПриемку;
	Элементы.ИспользованиеСерийниковПриемка.Доступность										= ИспПриемку;
	Элементы.УчитыватьСерийниковВЗаданииПриемка.Доступность									= ИспПриемку;
	Элементы.ИспользованиеУпаковочныхЛистовПриемка.Доступность								= ИспПриемку;
	Элементы.РучнойВводКоличестваПриемка.Доступность										= ИспПриемку;
	Элементы.ПодтверждатьЭнтеромПриемка.Доступность											= ИспПриемку;
	Элементы.ПечатьЭтикеткиПриПриемке.Доступность											= ИспПриемку;
	Элементы.ШаблоныДокументовТабличнуюЧастьПриЗагрузкеПриемка.Доступность					= ИспПриемку;
	Элементы.ШаблоныДокументовВыгружатьЯчейкиСДокументомПриемка.Доступность					= ИспПриемку;
	Элементы.ПриемкаПоПодбору.Доступность													= (ИспПодбор И ИспПриемку);
	Элементы.ПриПриемкеЗапрашиватьТовар.Доступность											= (ИспПодбор И ИспПриемку И ТекДанные.ПриемкаПоПодбору);
	Элементы.ПоштучноеПеремещение.Доступность												= (ИспПодбор И ИспПриемку И ТекДанные.ПриемкаПоПодбору);
	
	Элементы.ШаблоныДокументовГруппировкаЯчеекПриемка.Доступность = ИспПриемку;
	Элементы.ШаблоныДокументовГруппировкаСерийПриемка.Доступность = ИспПриемку;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПриемкеЗапрашиватьТоварПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ТекДанные.ПоштучноеПеремещение = ?(ТекДанные.ПриПриемкеЗапрашиватьТовар, Ложь, ТекДанные.ПоштучноеПеремещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоштучноеПеремещениеПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ТекДанные.ПриПриемкеЗапрашиватьТовар = ?(ТекДанные.ПоштучноеПеремещение, Ложь, ТекДанные.ПриПриемкеЗапрашиватьТовар);
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводКоличестваПриемкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ТекДанные.ПодтверждатьЭнтеромПриемка = ?(ТекДанные.РучнойВводКоличестваПриемка, Истина, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора "ИспользованиеЯчеекПриемка"
//
// Параметры:
//  Элемент - <ПолеВыбора>
//			- Поле выбора ("ИспользованиеЯчеекПриемка"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользованиеЯчеекПриемкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ТекДанные.УчитыватьЯчеекВЗаданииПриемка = ТекДанные.УчитыватьЯчеекВЗаданииПриемка И ТекДанные.ИспользоватьПриемку И ТекДанные.ИспользованиеЯчеекПриемка <> 0;
	Элементы.УчитыватьЯчеекВЗаданииПриемка.Доступность = (ТекДанные.ИспользоватьПриемку И ТекДанные.ИспользованиеЯчеекПриемка <> 0);
	
	ТекДанные.ЗаполнятьСкладПриемка = ТекДанные.ЗаполнятьСкладПриемка И ТекДанные.ИспользоватьПриемку И ТекДанные.ИспользованиеЯчеекПриемка <> 0;
	Элементы.ЗаполнятьСкладПриемка.Доступность = (ТекДанные.ИспользоватьПриемку И ТекДанные.ИспользованиеЯчеекПриемка <> 0);
	
	ТекДанные.ВыгрузкаЯчеекПриемка = ?(ТекДанные.ИспользованиеЯчеекПриемка = 0, 0, ТекДанные.ВыгрузкаЯчеекПриемка);
	Элементы.ШаблоныДокументовВыгрузкаЯчеекПриемка.ТолькоПросмотр = Не (ТекДанные.ИспользоватьПриемку И ТекДанные.ИспользованиеЯчеекПриемка <> 0);
	
	Элементы.ШаблоныДокументовГруппировкаЯчеекПриемка.ТолькоПросмотр = Не (ТекДанные.ИспользоватьПриемку И ТекДанные.ИспользованиеЯчеекПриемка <> 0);

	//скрываем
	Если ТекДанные.ИспользованиеЯчеекПриемка = 0 Тогда
		Элементы.грРазмещениеНастройкиАдрХран_гр1.Видимость               = Ложь;
		Элементы.ШаблоныДокументовВыгрузкаЯчеекПриемка.Видимость          = Ложь;
		Элементы.ШаблоныДокументовОбработкаЯчейкиЦеликомПриемка.Видимость = Ложь; 
		Элементы.ШаблоныДокументовГруппировкаЯчеекПриемка.Доступность     = Ложь;
	Иначе
		Элементы.грРазмещениеНастройкиАдрХран_гр1.Видимость               = Истина;
		Элементы.ШаблоныДокументовВыгрузкаЯчеекПриемка.Видимость          = Истина;
		Элементы.ШаблоныДокументовОбработкаЯчейкиЦеликомПриемка.Видимость = Истина;
		Элементы.ШаблоныДокументовГруппировкаЯчеекПриемка.Доступность     = Истина;
	КонецЕсли;	 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля выбора "ИспользованиеСерийниковПриемка"
//
// Параметры:
//  Элемент - <ПолеВыбора>
//			- Поле выбора ("ИспользованиеСерийниковПриемка"), с которым связано данное событие.
//
&НаКлиенте
Процедура ИспользованиеСерийниковПриемкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ТекДанные.УчитыватьСерийниковВЗаданииПриемка = ТекДанные.УчитыватьСерийниковВЗаданииПриемка И ТекДанные.ИспользоватьПриемку И ТекДанные.ИспользованиеСерийниковПриемка <> 0;
	Элементы.УчитыватьСерийниковВЗаданииПриемка.Доступность = (ТекДанные.ИспользоватьПриемку И ТекДанные.ИспользованиеСерийниковПриемка <> 0);
	Элементы.ШаблоныДокументовУникальныеСерийныеНомераПриемка.Доступность = (ТекДанные.ИспользоватьПриемку И ТекДанные.ИспользованиеСерийниковПриемка <> 0);
	
	//скрываем
	Если ТекДанные.ИспользованиеСерийниковПриемка = 0 Тогда
		Элементы.грРазмещениеНастройкиСерНомера_гр1.Видимость         = Ложь;
		Элементы.ШаблоныДокументовСерНомНеПустойПриемка.Видимость     = Ложь;
		Элементы.ШаблоныДокументовТипСерийногоНомераПриемка.Видимость = Ложь;
		Элементы.ШаблоныДокументовПравилаВводаСерииПриемка.Видимость  = Ложь;
		Элементы.Декорация1.Видимость = Ложь;
		Элементы.ШаблоныДокументовГруппировкаСерийПриемка.ТолькоПросмотр = Истина;
	Иначе
		Элементы.грРазмещениеНастройкиСерНомера_гр1.Видимость         = Истина;
		Элементы.ШаблоныДокументовСерНомНеПустойПриемка.Видимость     = Истина;
		Элементы.ШаблоныДокументовТипСерийногоНомераПриемка.Видимость = Истина;
		Элементы.ШаблоныДокументовПравилаВводаСерииПриемка.Видимость  = Истина;
		Элементы.Декорация1.Видимость = Истина;
		Элементы.ШаблоныДокументовГруппировкаСерийПриемка.ТолькоПросмотр = Ложь;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМаркировкуПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ИспМаркировку = ТекДанные.ИспользоватьМаркировку;
	
	Элементы.ШаблоныДокументовМаркировкаСканироватьEAN.Доступность                      = ИспМаркировку;
	Элементы.ШаблоныДокументовМаркировкаEANсоответствуетGTIN.Доступность                = ИспМаркировку;
	Элементы.ШаблоныДокументовМаркировкаДополнительныйПоискПоКМ.Доступность             = ИспМаркировку;	
	Элементы.ШаблоныДокументовМаркировкаСоздаватьСправочникКМЕслиНеНайден.Доступность   = ИспМаркировку;	
	Элементы.ШаблоныДокументовМаркировкаЗапретитьПодборНемаркируемыхТоваров.Доступность = ИспМаркировку;
	Элементы.ШаблоныДокументовМаркировкаВводМаркируемогоТовараБезКМ.Доступность         = ИспМаркировку;
	Элементы.ШаблоныДокументовМаркировкаПроверкаБезСертификатаИС.Доступность            = ИспМаркировку;
	Элементы.ШаблоныДокументовМаркировкаЗапросВЦРПТ.Доступность                         = ИспМаркировку;
	
	Элементы.МаркировкаМетодПроверкиКМ.Доступность                     = ИспМаркировку;
	Элементы.МаркировкаПроверкаВладелькаКМ.Доступность                 = ИспМаркировку;
	Элементы.МаркировкаПроверкаСтатусаКМ.Доступность                   = ИспМаркировку;
	Элементы.МаркировкаРазрешенныеСтатусыКМ.Доступность                = ИспМаркировку;
	Элементы.ШаблоныДокументовМаркировкаЗаписыватьПолныйКМ.Доступность = ИспМаркировку;
	Элементы.ШаблоныДокументовМаркировкаРежимОСУ.Доступность 		   = ИспМаркировку;
	
	Если ИспМаркировку Тогда
		Если Не ТекДанные.ПроводитьДокументы И Не ТекДанные.НеОткрыватьДокументыПослеЗагрузки Тогда
			Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Доступность = Истина;
			Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость   = Истина;	
		КонецЕсли;		
	Иначе
		Попытка ТекДанные.МаркировкаМетодПроверкиКМ = Ложь; Исключение КонецПопытки;
		
		Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Доступность = Ложь;
		Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость   = Ложь;
	КонецЕсли;
	
	МаркировкаМетодПроверкиКМПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаМетодПроверкиКМПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;         	
	
	ПроверкаКМ = ТекДанные.МаркировкаМетодПроверкиКМ;
	
	Элементы.МаркировкаПроверкаВладелькаКМ.Видимость  = ПроверкаКМ;
	Элементы.МаркировкаПроверкаСтатусаКМ.Видимость    = ПроверкаКМ;
	Элементы.МаркировкаРазрешенныеСтатусыКМ.Видимость = ПроверкаКМ;
	
	Если ПроверкаКМ Тогда
		ЗагрузитьСтатусыКМ(ТекДанные.МаркировкаРазрешенныеСтатусыКМ);
	Иначе
		ТекДанные.МаркировкаПроверкаВладелькаКМ  = 0;
		ТекДанные.МаркировкаПроверкаСтатусаКМ    = 0;
		ТекДанные.МаркировкаРазрешенныеСтатусыКМ = "[]";
	КонецЕсли;
	
	МаркировкаПроверкаСтатусаКМПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПроверкаСтатусаКМПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Элементы.МаркировкаРазрешенныеСтатусыКМ.Видимость = Не (ТекДанные.МаркировкаПроверкаСтатусаКМ = 0);
	ТекДанные.МаркировкаРазрешенныеСтатусыКМ = ?(ТекДанные.МаркировкаПроверкаСтатусаКМ = 0, "[]", ТекДанные.МаркировкаРазрешенныеСтатусыКМ);	
	
	Если ТекДанные.МаркировкаПроверкаСтатусаКМ <> 0 Тогда
		МаркировкаРазрешенныеСтатусыКМПриИзменении("");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаРазрешенныеСтатусыКМПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	МассивСтатусов = ""; 
	
	Для каждого СтрокаСтатусыКМ Из Таблица_МаркировкаРазрешенныеСтатусыКМ Цикл
		Если СтрокаСтатусыКМ.Пометка Тогда
			МассивСтатусов = МассивСтатусов + СтрокаСтатусыКМ.Значение + ",";
		КонецЕсли;	
	КонецЦикла;
	
	МассивСтатусов = ?(Прав(МассивСтатусов, 1) = ",", Лев(МассивСтатусов, СтрДлина(МассивСтатусов)-1), МассивСтатусов);
	
	ТекДанные.МаркировкаРазрешенныеСтатусыКМ = "[" + МассивСтатусов + "]";
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаРазрешенныеСтатусыКМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаРазрешенныеСтатусыКМПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "ШаблоныДокументов"
//
// Параметры:
//  Элемент - <ТабличноеПоле>
//          - Табличное поле ("ШаблоныДокументов"), с которым связано данное событие.
//
&НаКлиенте
Процедура ШаблоныДокументовПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //вывод данных шаблона 
	
	Если ТекДанные = Неопределено Тогда
		АвтозагрузкаРеквизитовОбщая.Очистить();
		
		Возврат;	
	КонецЕсли; 
	
	Элементы.ВидДокумента.СписокВыбора.Очистить();
	
	Если ТекДанные.ИспользоватьЕГАИС Тогда
		ВидыДоков = СобратьВидыДокументовЕГАИС();
	Иначе
		ВидыДоков = СобратьВидыДокументов();
	КонецЕсли;		
	
	Для каждого ВидДока Из ВидыДоков Цикл
		Элементы.ВидДокумента.СписокВыбора.Добавить(ВидДока.Значение,ВидДока.Представление);
	КонецЦикла;
	
	Если ТекДанные.ИспользоватьЕГАИС Тогда
		Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументовЕГАИС(ТекДанные.ВидДокумента).ВыгрузитьЗначения());	
	Иначе	
		Элементы.ИмяТабличнойЧастиПодбор.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументов(ТекДанные.ВидДокумента).ВыгрузитьЗначения());
		Элементы.ИмяТабличнойЧастиПриемка.СписокВыбора.ЗагрузитьЗначения(СобратьТабЧастиДокументов(ТекДанные.ВидДокумента).ВыгрузитьЗначения());			
	КонецЕсли; 		
	
	ИспользоватьПодборПриИзменении(Элементы.ИспользоватьПодбор);
	ИспользоватьПриемкуПриИзменении(Элементы.ИспользоватьПриемку);
	ИспользованиеЯчеекПодборПриИзменении(Элементы.ИспользованиеЯчеекПодбор);
	ИспользованиеСерийниковПодборПриИзменении(Элементы.ШаблоныДокументовИспользованиеСерийниковПодбор);
	ИспользованиеЯчеекПриемкаПриИзменении(Элементы.ИспользованиеЯчеекПриемка);
	ИспользованиеСерийниковПриемкаПриИзменении(Элементы.ИспользованиеСерийниковПриемка);
	ИспользоватьЕГАИСПриИзменении(Элементы.ИспользоватьЕГАИС);
	ИспользоватьМаркировкуПриИзменении(Элементы.ИспользоватьМаркировку);
	ИспользоватьДопФормыПриИзменении(Элементы.ШаблоныДокументовИспользоватьДопФормы, Ложь);
	
	ШаблоныДокументовПроводитьДокументыПриИзменении(Элементы.ШаблоныДокументовПроводитьДокументы);
	ШаблоныДокументовНеОткрыватьДокументыПослеЗагрузкиПриИзменении(Элементы.ШаблоныДокументовНеОткрыватьДокументыПослеЗагрузки);
	РазрешеноСозданиеНаТСДПриИзменении(Элемент);
	
	ОтборДопШаговПоСтрокеШаблона();		
	Элементы.АвтозагрузкаРеквизитов.ПодчиненныеЭлементы.АвтозагрузкаРеквизитовРеквизит.СписокВыбора.ЗагрузитьЗначения(СобратьРеквизитыДокумента(ТекДанные.ВидДокумента).ВыгрузитьЗначения());		
	ОтборАвтозагрузки();
	РазвернутьГруппыГдеВыбраныПараметры();
	АвтоматическийКомментарийИспользоватьПриИзменении(Элементы.АвтоматическийКомментарийИспользовать);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЕГАИСПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ИспользоватьЕГАИС = ТекДанные.ИспользоватьЕГАИС;
	
	ТекДанные.ВерсияЕГАИС = ?(ИспользоватьЕГАИС, 1, 0);
	
	Элементы.ВерсияЕГАИС.Доступность                                  = ИспользоватьЕГАИС;
	Элементы.СопоставлениеЕГАИС.Доступность                           = ИспользоватьЕГАИС;		
	Элементы.СопоставлениеЕГАИС.Доступность                           = ИспользоватьЕГАИС;
	Элементы.ЕГАИСПонижатьДетализациюПроверкиТТНДоБутылок.Доступность = ИспользоватьЕГАИС;
	Элементы.Размещение.Доступность                                   = Не ИспользоватьЕГАИС; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныДокументовПроводитьДокументыПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ТекДанные.ПроводитьДокументы Тогда
		Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Доступность = Ложь;
		Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость   = Ложь;		
	Иначе		
		Если Не ТекДанные.ИспользоватьМаркировку И Не ТекДанные.НеОткрыватьДокументыПослеЗагрузки Тогда
			Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Доступность = Истина;
			Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость   = Истина;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныДокументовНеОткрыватьДокументыПослеЗагрузкиПриИзменении(Элемент)

	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ТекДанные.НеОткрыватьДокументыПослеЗагрузки Тогда
		Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Доступность = Ложь;
		Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость   = Ложь;		
	Иначе		
		Если Не ТекДанные.ПроводитьДокументы И Не ТекДанные.ИспользоватьМаркировку Тогда
			Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Доступность = Истина;
			Элементы.ШаблоныДокументовОткрыватьДокументыПослеЗагрузкиБезЗаписи.Видимость   = Истина;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешеноСозданиеНаТСДПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ТекДанные.РазрешеноСозданиеНаТСД Тогда
		Элементы.РежимСозданияДокументов.Видимость = Истина;
		
	ИначеЕсли ТекДанные.РазрешеноСозданиеНаТСД = Ложь Тогда
		ТекДанные.РежимСозданияДокументов = 0;
		Элементы.РежимСозданияДокументов.Видимость = Ложь;
	КонецЕсли;
	
	РежимСозданияДокументовПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСозданияДокументовПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ТекДанные.РежимСозданияДокументов = 1 Тогда
		Элементы.ОбязательноеЗаполнениеКонтрагента.Видимость = Истина;
		Элементы.ОбязательноеЗаполнениеСклада.Видимость      = Истина;
	Иначе
		Элементы.ОбязательноеЗаполнениеКонтрагента.Видимость = Ложь;
		Элементы.ОбязательноеЗаполнениеСклада.Видимость      = Ложь;
		ТекДанные.ОбязательноеЗаполнениеКонтрагента          = Ложь;
		ТекДанные.ОбязательноеЗаполнениеСклада               = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическийКомментарийИспользоватьПриИзменении(Элемент)
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; //установка предопределенных параметров и запрет редактирования
	
	Если ТекДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Элементы.АвтоматическийКомментарий.Видимость = ТекДанные.АвтоматическийКомментарийИспользовать;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозагрузкаРеквизитовЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекДанныеСтроки = Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные;
	ТекДанныеШаблона = Элементы.ШаблоныДокументов.ТекущиеДанные;
	
	Если ТекДанныеШаблона = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ВидДокумента = ТекДанныеШаблона.ВидДокумента;
	
	Если Не ЗначениеЗаполнено(ТекДанныеСтроки.Реквизит) Тогда
		Сообщить("Выберите имя реквизита!");	
	Иначе
		Если ТекДанныеСтроки.Реквизит = "Помещение" Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗакрытиеВыбораПомещения", ЭтотОбъект), ПолучитьСписокПомещений(), Элементы.АвтозагрузкаРеквизитов, 0);
		Иначе	
			ТипТекущегоРеквизита = ПолучитьТипРевизита(ВидДокумента, ТекДанныеСтроки.Реквизит);
			Если ТипТекущегоРеквизита <> Неопределено Тогда
				Элементы.АвтозагрузкаРеквизитов.ПодчиненныеЭлементы.АвтозагрузкаРеквизитовЗначениеРеквизита.ОграничениеТипа = ТипТекущегоРеквизита;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПомещений() 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СкладскиеПомещения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СкладскиеПомещения КАК СкладскиеПомещения");
	
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокВозврата;
	
КонецФункции

&Наклиенте
Процедура ЗакрытиеВыбораПомещенияДляВыгрузки(Результат, ДопПараметры) Экспорт
	
	Элементы.ПараметрыУсловияВыгрузки.ТекущиеДанные.ЗначениеПараметра = Результат.Значение;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипРевизита(ВидДокумента, ИмяРеквизита)
	
	ТекущийВидДокумента = ВидДокумента;
	Если ТекущийВидДокумента = "ЗаданиеНаПеревозку" Тогда		
		ТекущийВидДокумента = "ЗаказКлиента";
	КонецЕсли;	
	
	Попытка Возврат Метаданные.Документы.Найти(ТекущийВидДокумента).Реквизиты.Найти(ИмяРеквизита).Тип; Исключение КонецПопытки;	
	
КонецФункции

&НаКлиенте
Процедура АвтозагрузкаРеквизитовРеквизитПриИзменении(Элемент)
	
	ТекДанныеСтроки = Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные;
	ТекДанныеШаблона = Элементы.ШаблоныДокументов.ТекущиеДанные;
	
	Если ТекДанныеШаблона = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ВидДокумента = ТекДанныеШаблона.ВидДокумента;
	
	Попытка 
		ТекДанныеСтроки.ЗначениеРеквизита = Неопределено;
		Если ЗначениеЗаполнено(ТекДанныеСтроки.Реквизит) И Не ТекДанныеСтроки.Реквизит = "Помещение" Тогда 
			ТипТекущегоРеквизита = ПолучитьТипРевизита(ВидДокумента, ТекДанныеСтроки.Реквизит);
			Если ТипТекущегоРеквизита <> Неопределено Тогда
				Элементы.АвтозагрузкаРеквизитов.ПодчиненныеЭлементы.АвтозагрузкаРеквизитовЗначениеРеквизита.ОграничениеТипа = ТипТекущегоРеквизита;
			КонецЕсли;	
		Иначе
			Элементы.АвтозагрузкаРеквизитов.ПодчиненныеЭлементы.АвтозагрузкаРеквизитовЗначениеРеквизита.ОграничениеТипа = Неопределено;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияВыгрузки_Страница_Номенклатура

&НаКлиенте
Процедура АтрибутОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "Код" Или ВыбранноеЗначение = "Родитель" Или ВыбранноеЗначение = "!!! Ячейки !!!" Или СтрНачинаетсяС(ВыбранноеЗначение, "ДР_") Тогда
		Представление = ВыбранноеЗначение;
	Иначе
		Представление = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	КонецЕсли;
	
	Если Элемент.Имя = "Атрибут1" Тогда
		Атрибут1Синоним = Представление;
	ИначеЕсли Элемент.Имя = "Атрибут2" Тогда
		Атрибут2Синоним = Представление;
	ИначеЕсли Элемент.Имя = "Атрибут3" Тогда
		Атрибут3Синоним = Представление;
	ИначеЕсли Элемент.Имя = "Атрибут4" Тогда
		Атрибут4Синоним = Представление;
	ИначеЕсли Элемент.Имя = "Атрибут5" Тогда
		Атрибут5Синоним = Представление;
	ИначеЕсли Элемент.Имя = "Атрибут6" Тогда
		Атрибут6Синоним = Представление;
	ИначеЕсли Элемент.Имя = "Атрибут7" Тогда
		Атрибут7Синоним = Представление;
	ИначеЕсли Элемент.Имя = "Атрибут8" Тогда
		Атрибут8Синоним = Представление;
	ИначеЕсли Элемент.Имя = "Атрибут9" Тогда
		Атрибут9Синоним = Представление;
	ИначеЕсли Элемент.Имя = "Атрибут10" Тогда
		Атрибут10Синоним = Представление;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АтрибутОчистка(Элемент, СтандартнаяОбработка)
	
	Если Элемент.Имя = "Атрибут1" Тогда
		Атрибут1Синоним = "";
	ИначеЕсли Элемент.Имя = "Атрибут2" Тогда
		Атрибут2Синоним = "";
	ИначеЕсли Элемент.Имя = "Атрибут3" Тогда
		Атрибут3Синоним = "";
	ИначеЕсли Элемент.Имя = "Атрибут4" Тогда
		Атрибут4Синоним = "";
	ИначеЕсли Элемент.Имя = "Атрибут5" Тогда
		Атрибут5Синоним = "";
	ИначеЕсли Элемент.Имя = "Атрибут6" Тогда
		Атрибут6Синоним = "";
	ИначеЕсли Элемент.Имя = "Атрибут7" Тогда
		Атрибут7Синоним = "";
	ИначеЕсли Элемент.Имя = "Атрибут8" Тогда
		Атрибут8Синоним = "";
	ИначеЕсли Элемент.Имя = "Атрибут9" Тогда
		Атрибут9Синоним = "";
	ИначеЕсли Элемент.Имя = "Атрибут10" Тогда
		Атрибут10Синоним = "";	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АтрибутПриИзменении(Элемент)
	Если Элемент.ТекстРедактирования = "" Тогда
		АтрибутОчистка(Элемент, );
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАтрибутыЕгаис(Команда)
	
	Атрибут5 = "Производитель";
	//Атрибут6 = "ПроизводительИмпортерДляДекларацийАлко";
	Атрибут7 = "ОбъемДАЛ";
	Атрибут8 = "Крепость";
	Атрибут9 = "ВидАлкогольнойПродукции";	
	
	Атрибут5Синоним = "Производитель";
	Атрибут7Синоним = "Объем в декалитрах";
	Атрибут8Синоним = "Крепость";
	Атрибут9Синоним = "Вид алкогольной (спиртосодержащей) продукции";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТовары(Команда)
	
	ПроверитьКаталоги("ВыгрузитьТовары");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраннаяГруппаТовараНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	
	Подбор = Получитьформу("Справочник.Номенклатура.ФормаВыбора", ПараметрыПодбора, ЭтаФорма); 
	Подбор.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	Подбор.ЗакрыватьПривыборе = Истина;
	Подбор.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область СобытияВыгрузки_Страница_Справочники

&НаКлиенте
Процедура ВыгрузитьЕИ(Команда)
	
	ПроверитьКаталоги("ВыгрузитьЕИ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСклады(Команда)
	
	ПроверитьКаталоги("ВыгрузитьСклады");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКлиентов(Команда)
	
	ПроверитьКаталоги("ВыгрузитьКлиентов");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЯчейки(Команда)
	
	ПроверитьКаталоги("ВыгрузитьЯчейки");
	
КонецПроцедуры

#КонецОбласти

#Область СобытияВыгрузки_Страница_ЕГАИС

&НаКлиенте
Процедура ВыгрузитьТоварыЕГАИС(Команда)
	
	ПроверитьКаталоги("ВыгрузитьТоварыЕГАИС");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьМаркиЕГАИС(Команда)
	
	ПроверитьКаталоги("ВыгрузитьМаркиЕГАИС");
	
КонецПроцедуры

#КонецОбласти

#Область СобытияВыгрузки_Страница_Маркировка

&НаКлиенте
Процедура ВыгрузитьУпаковкиКМ(Команда)
	
	ПроверитьКаталоги("ВыгрузитьУпаковкиКМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровКМНоменклатураПриИзменении(Элемент)
	
	ТекДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступноеКоличество  = ЗаполнитьДоступноеКоличествоПечатиКМДляНоменклатуры(ТекДанные.Номенклатура, ТекДанные.Характеристика);
	ТекДанные.Количество = ДоступноеКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровКМКоличествоПриИзменении(Элемент)

	ТекДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьКоличествоДоступныхМарок(ТекДанные.Номенклатура, ТекДанные.Количество);
	
	Если Не РезультатПроверки Тогда
		Сообщить("По данной номенклатуре нет указанного количества марок для печати! ");
		ТекДанные.Количество = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокМарок(Команда)
	
	ТаблицаТоваровКМ.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКМ(Команда)
	
	ПроверитьКаталоги("ВыгрузитьКМ");
	
КонецПроцедуры

#КонецОбласти

#Область СобытияВыгрузки_Страница_Пользователи

&НаКлиенте
Процедура ДобавитьПользователя(Команда)
	
	Значение = "";  	
	ЗапуститьОповещение_ДобавитьПользователя(Значение, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПользователя(Команда)
	
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ПоказатьСообщениеПользователю("Не выбран пользователь для удаления!");
		Возврат;
	КонецЕсли;
	
	ИндексТекущегоЭлементаКоллекции = Пользователи.Индекс(ТекДанные);	
	Пользователи.Удалить(ИндексТекущегоЭлементаКоллекции);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБейджей(Команда)
	
	ТабДокумент = ПолучитьМакетНаСервере(); 	
	ТабДокумент.Показать("Бейджи"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент.Имя = "Пользователь" Тогда //изменение данных пользователя 		
		Значение = Элемент.ТекущиеДанные.Пользователь;
		СтароеЗначение = Значение;    		
		ДопПараметры = ПолучитьДопПараметрыДляВыбора(СтароеЗначение, Элемент.ТекущиеДанные);		
		ЗапуститьОповещение_ДобавитьПользователя(СтароеЗначение, ДопПараметры);
	КонецЕсли; 
	
	Если Элемент.ТекущийЭлемент.Имя = "Login" Тогда		
		Значение = Элемент.ТекущиеДанные.LOGIN;
		СтароеЗначение = Значение;            		
		ДопПараметры = ПолучитьДопПараметрыДляВыбора(СтароеЗначение, Элемент.ТекущиеДанные); 		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводЛогина", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, Значение,"Введите Штрихкод",50);		
	КонецЕсли; 
	
	Если Элемент.ТекущийЭлемент.Имя = "Пароль" Тогда 		
		Значение = Элемент.ТекущиеДанные.Пароль;
		СтароеЗначение = Значение;               		
		ДопПараметры = ПолучитьДопПараметрыДляВыбора(СтароеЗначение, Элемент.ТекущиеДанные); 		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПароля", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Введите ПАРОЛЬ", 10);		
	КонецЕсли; 
	
	Если Элемент.ТекущийЭлемент.Имя = "Админ" Тогда		
		Значение = Элемент.ТекущиеДанные.Админ;
		СтароеЗначение = Значение;   		
		ДопПараметры = ПолучитьДопПараметрыДляВыбора(СтароеЗначение, Элемент.ТекущиеДанные);		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПрав", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Права АДМИНИСТРАТОРА (д/н)", 1);		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "РедактированиеТоваров" Тогда		
		Значение = Элемент.ТекущиеДанные.РедактированиеТоваров;
		СтароеЗначение = Значение;                         		
		ДопПараметры = ПолучитьДопПараметрыДляВыбора(СтароеЗначение, Элемент.ТекущиеДанные);		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводРедактированиеТоваров", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Права редактирования товаров (д/н)", 1);  		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПользователей(Команда)	
	
	ПроверитьКаталоги("ВыгрузитьПользователей");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПользователейДляВыгрузки(ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура;
	ТабПользователи = РеквизитФормыВЗначение("Пользователи");
	
	Для каждого Значение Из ВыбранноеЗначение Цикл
		ПараметрыОтбора.Вставить("Пользователь", Значение);
		НайденныеСтроки = Пользователи.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Стр = ТабПользователи.Добавить();
			Стр.Пользователь = Значение;
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ТабПользователи, "Пользователи");
	
КонецПроцедуры
 
#КонецОбласти

#Область СписокТСД

&НаКлиенте
Процедура СписокТСДНаименованиеПриИзменении(ТекДанные)
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные) = Тип("ПолеФормы") Тогда
		ТДСписокТСД = Элементы.СписокТСД.ТекущиеДанные;
		ТекстРедактирования = ТекДанные.ТекстРедактирования;
		
		Если ПустаяСтрока(ТекстРедактирования) Тогда			
			Если ТДСписокТСД <> Неопределено Тогда 
				ИДТСД = ТДСписокТСД.ТСД;
				ТекущийТСД = ТДСписокТСД.ТСД;
			КонецЕсли;  			
		Иначе
			ТекущийТСД = ТекДанные.ТекстРедактирования;
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(ТекДанные.Наименование) Тогда
		ТекущийТСД = ТекДанные.Наименование;
	Иначе
		ТекущийТСД = ТекДанные.ТСД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТСДПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ИДТСД = "";
	Иначе     		
		ТекущийТСД = Элемент.ТекущиеДанные.ТСД; 		
		НайденнаяСтрока = СписокТСД.НайтиСтроки(Новый Структура("ТСД", ТекущийТСД));
		НайденнаяСтрока = ?(НайденнаяСтрока.Количество() = 0, СписокТСД.НайтиСтроки(Новый Структура("Наименование", ТекущийТСД)), НайденнаяСтрока);  		
		
		Если НайденнаяСтрока.Количество() > 0 Тогда
			Элементы.СписокТСД.ТекущаяСтрока = НайденнаяСтрока[0].ПолучитьИдентификатор();
			ИДТСД = НайденнаяСтрока[0].ТСД;
			ТекДанные = НайденнаяСтрока[0];
		Иначе
			Элементы.СписокТСД.ТекущаяСтрока = 0;
			ИДТСД = СписокТСД[0].ТСД;
		КонецЕсли;
		
		СписокТСДНаименованиеПриИзменении(ТекДанные);   		
	КонецЕсли;
	
	Если ТипОбмена = "1" Тогда
		Если КаталогFTPДоступен Тогда
			ЗаполнитьСписокФайлов();
		КонецЕсли;	
	ИначеЕсли ТипОбмена = "0" Тогда
		ЗаполнитьСписокФайлов();
	КонецЕсли;   
	
	ЗапомнитьТекущееЗначениеТСДКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТСДПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТСДПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТСД(Команда)
	
	ПроверитьКаталоги("ВыгрузитьТСД");
	
КонецПроцедуры   

#КонецОбласти

#КонецОбласти                                 

#Область События_Страницы_Загрузка

#Область СобытияЗагрузки_Страница_Документы

#Область ВнесениеВБазуДокументов

&НаСервереБезКонтекста
Функция ЕстьМаркировка() Экспорт
	
	ЕстьМаркировка = Ложь;	
	
	Попытка
		Если Метаданные.ОбщиеМодули.ИнтерфейсИСМП.Имя = "ИнтерфейсИСМП" Тогда
			ЕстьМаркировка = Истина;
		КонецЕсли;
	Исключение	
	КонецПопытки;
	
	Возврат ЕстьМаркировка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьЕГАИС() Экспорт
	
	ЕстьЕГАИС = Ложь;
	
	Попытка
		Если Метаданные.РегистрыСведений.АкцизныеМаркиЕГАИС.Имя = "АкцизныеМаркиЕГАИС" Тогда
			ЕстьЕГАИС = Истина;
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	Возврат ЕстьЕГАИС;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьМДЛП() Экспорт
	
	ЕстьМДЛП = Ложь;	
	
	Попытка
		Если Метаданные.ОбщиеМодули.ИнтеграцияМДЛП.Имя = "ИнтеграцияМДЛП" Тогда
			ЕстьМДЛП = Истина;
		КонецЕсли;
	Исключение	
	КонецПопытки;
	
	Возврат ЕстьМДЛП;

КонецФункции

&НаСервереБезКонтекста
Функция ЕстьАСТ() Экспорт
	
	Возврат Метаданные.Справочники.Найти("астМаркиЕГАИС") <> Неопределено;

КонецФункции	

&НаСервереБезКонтекста
Функция Есть115() Экспорт
	
	Есть115 = Ложь;
	
	Попытка
		Если Лев(Метаданные.Версия,4) = "11.5" Или Лев(Метаданные.Версия,3) = "2.5" Тогда
			Есть115 = Истина;
		КонецЕсли;
	Исключение		
	КонецПопытки;

	Попытка
		Если Метаданные.РегистрыСведений.ЦеныНоменклатуры25.Имя = "ЦеныНоменклатуры25" Тогда
			Есть115 = Истина;
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	Возврат Есть115;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьКТ2000() Экспорт
	
	Возврат Метаданные.Справочники.Найти("алкКлассификаторАлкогольнойПродукцииЕГАИС") <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция Ценообразование25() Экспорт
	
	Результат = Ложь;
	
	Попытка
		Если Метаданные.РегистрыСведений.ЦеныНоменклатуры25.Имя = "ЦеныНоменклатуры25" Тогда
			Если Константы.ИспользуетсяЦенообразование25.Получить() Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Функция ПолучитьНазначениеЗаполненоВТЧ(ДокТЧ)
	
	Для каждого Строка Из ДокТЧ Цикл
		
		Если Строка.Назначение <> Справочники.Назначения.ПустаяСсылка() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДополнитьНазначениемТабТСД(ТабТСД, ИсходныеДанныеПодбор)
	
	НоваяТабТСД = ТабТСД.СкопироватьКолонки();
	НоваяТабТСД.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	
	НоваяИсходныеДанныеПодбор = ИсходныеДанныеПодбор.СкопироватьКолонки();
	
	// 1. Получим первоначальную таблицу с назначениями 
	ТЗТаблицаПриход = ИсходныеДанныеПодбор;
	
	// 2. Получим новую таблицу подбора
	ТЗТаблицаРасход = ТабТСД;
	
	// 3. Распределим таблицу назначений по новой таблице по упаковкам
	Для каждого СтрПриход Из ТЗТаблицаПриход Цикл
		КоэффициентУпаковкиСписать = ?(СтрПриход.Упаковка.Числитель = 0, 1, СтрПриход.Упаковка.Числитель);
		НужноСписать = СтрПриход.КоличествоУпаковок;
		
		Если НужноСписать < 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		//поиск с учетом упаковок
		МассивОстаток = ТЗТаблицаРасход.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка", СтрПриход.Номенклатура, СтрПриход.Характеристика, СтрПриход.Упаковка));
		Для каждого СтрОстаток Из МассивОстаток Цикл
			МожноСписать = СтрОстаток.Количество;
			
			Если МожноСписать < 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НС = НоваяТабТСД.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрОстаток,, "Количество");
			НС.Назначение = СтрПриход.Назначение;
			КоличествоСписать = Мин(НужноСписать, МожноСписать);
			НС.Количество = КоличествоСписать;
			НужноСписать = НужноСписать - КоличествоСписать;
			СтрОстаток.Количество = СтрОстаток.Количество - НС.Количество;
			
			Если СтрОстаток.Количество = 0 Тогда
				ТЗТаблицаРасход.Удалить(СтрОстаток);	        	        	        	        
			КонецЕсли; 
			
			Если НужноСписать = 0 Тогда         	        	        
				Прервать;	        	        	        	        
			КонецЕсли;	
		КонецЦикла;
		
		Если НужноСписать > 0 Тогда		
			НС = НоваяИсходныеДанныеПодбор.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрПриход,, "КоличествоУпаковок,Количество");
			НС.КоличествоУпаковок = НужноСписать;
			НС.Количество = НужноСписать * КоэффициентУпаковкиСписать;
		КонецЕсли;	
	КонецЦикла;
	
	// 4. Распределим таблицу назначений по новой таблице без упаковок
	Для каждого СтрПриход Из НоваяИсходныеДанныеПодбор Цикл	
		КоэффициентУпаковкиСписать = ?(СтрПриход.Упаковка.Числитель = 0, 1, СтрПриход.Упаковка.Числитель);
		НужноСписатьБазовые = СтрПриход.КоличествоУпаковок * КоэффициентУпаковкиСписать;
		
		Если НужноСписатьБазовые < 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		//поиск без учета упаковок
		МассивОстаток = ТЗТаблицаРасход.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрПриход.Номенклатура, СтрПриход.Характеристика));
		Для каждого СтрОстаток Из МассивОстаток Цикл
			КоэффициентУпаковкиОстаток = ?(СтрОстаток.Упаковка.Числитель = 0, 1, СтрОстаток.Упаковка.Числитель);
			МожноСписатьБазовые = СтрОстаток.Количество * КоэффициентУпаковкиОстаток;
			
			Если МожноСписатьБазовые < 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НС = НоваяТабТСД.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрОстаток,, "Количество");
			НС.Назначение = СтрПриход.Назначение;					
			КоличествоСписатьБазовые = Мин(НужноСписатьБазовые, МожноСписатьБазовые);
			НС.Количество = КоличествоСписатьБазовые / КоэффициентУпаковкиОстаток;	
			НужноСписатьБазовые = НужноСписатьБазовые - КоличествоСписатьБазовые;
			СтрОстаток.Количество = СтрОстаток.Количество - НС.Количество;
			
			Если СтрОстаток.Количество = 0 Тогда
				ТЗТаблицаРасход.Удалить(СтрОстаток);	        	        	        	        
			КонецЕсли;   
			
			Если НужноСписатьБазовые = 0 Тогда         	        	        
				Прервать;	        	        	        	        
			КонецЕсли;	
		КонецЦикла;		
	КонецЦикла;
	
	// 5. Добавим оставшиеся строки подбора
	Для каждого СтрокаОстаток Из ТЗТаблицаРасход Цикл
		Если СтрокаОстаток.Количество > 0 Тогда
			НС = НоваяТабТСД.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаОстаток);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат	НоваяТабТСД;
	
КонецФункции

&НаСервере
Функция ПолучитьВиртуальнуюТаблицуТЧЗагрузки(тхт, ТекШаблон, Док, ЭтоЕГАИС)
	
	Если ЭтоЕГАИС Тогда
		
	Иначе		
		ТабПодбор = Новый ТаблицаЗначений;
		ТабПодбор.Колонки.Добавить("Номенклатура"      , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабПодбор.Колонки.Добавить("Характеристика"    , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТабПодбор.Колонки.Добавить("Штрихкод"          , Новый ОписаниеТипов("Строка"));
		ТабПодбор.Колонки.Добавить("Серия"             , Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТабПодбор.Колонки.Добавить("Ячейка"            , Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
		ТабПодбор.Колонки.Добавить("Количество"    	   , Новый ОписаниеТипов("Число"));
		ТабПодбор.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
		ТабПодбор.Колонки.Добавить("Упаковка"          , Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТабПодбор.Колонки.Добавить("Цена"              , Новый ОписаниеТипов("Число"));
		ТабПодбор.Колонки.Добавить("Автор"             , Новый ОписаниеТипов("Строка"));
		ТабПодбор.Колонки.Добавить("УпакЛист"          , Новый ОписаниеТипов("Строка"));
		ТабПодбор.Колонки.Добавить("ДопФормы"          , Новый ОписаниеТипов("Строка")); 
		ТабПодбор.Колонки.Добавить("Коэффициент"  	   , Новый ОписаниеТипов("Число"));
		
		ТабПриемка = Новый ТаблицаЗначений;
		ТабПриемка.Колонки.Добавить("Номенклатура"      , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабПриемка.Колонки.Добавить("Характеристика"    , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТабПриемка.Колонки.Добавить("Штрихкод"          , Новый ОписаниеТипов("Строка"));
		ТабПриемка.Колонки.Добавить("Серия"             , Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТабПриемка.Колонки.Добавить("Ячейка"            , Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
		ТабПриемка.Колонки.Добавить("Количество"    	   , Новый ОписаниеТипов("Число"));
		ТабПриемка.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
		ТабПриемка.Колонки.Добавить("Упаковка"          , Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТабПриемка.Колонки.Добавить("Цена"              , Новый ОписаниеТипов("Число"));
		ТабПриемка.Колонки.Добавить("Автор"             , Новый ОписаниеТипов("Строка"));
		ТабПриемка.Колонки.Добавить("УпакЛист"          , Новый ОписаниеТипов("Строка"));
		ТабПриемка.Колонки.Добавить("ДопФормы"          , Новый ОписаниеТипов("Строка"));
		ТабПриемка.Колонки.Добавить("Коэффициент"  	   , Новый ОписаниеТипов("Число"));
		
		Для НомСтроки = 2 По тхт.КоличествоСтрок() Цикл			
			СтрокаТаб = тхт.ПолучитьСтроку(НомСтроки); //<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;
			СтрокаТаб = СтрЗаменить(СтрокаТаб, ";", Символы.ПС);
			СтрокаПодорИлиРазмещение = СтрПолучитьСтроку(СтрокаТаб,1);
			
			Если СтрокаПодорИлиРазмещение = "S" Тогда
				НоваяСтрока = ТабПодбор.Добавить();
			ИначеЕсли СтрокаПодорИлиРазмещение = "I" Тогда	
				НоваяСтрока = ТабПриемка.Добавить();
			Иначе 
				Продолжить;
			КонецЕсли; 			
			
			ИдентификаторТовара = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,2), "[59]", ";");
			ШтрихкодТовара      = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,3), "[59]", ";");
			НаименованиеТовара  = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(СтрокаТаб, 9));						
			Номенклатура = ПолучитьНоменклатуру(ИдентификаторТовара, ШтрихкодТовара, НаименованиеТовара);
			
			Если Номенклатура = "" Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ошибка загрузки номенклатуры!";
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;	
			
			ТекТовар = Номенклатура.Получить(0).Значение;
			ТекХР    = Номенклатура.Получить(1).Значение;
			ТекЕИ    = Номенклатура.Получить(2).Значение;
			ТекКф    = Номенклатура.Получить(3).Значение;
			ТекУпак  = Номенклатура.Получить(4).Значение;  			
			
			СтрокаСерии = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(СтрокаТаб, 4));
			ТекСерия = ПолучитьСерию(СтрокаСерии, ТекТовар, ТекШаблон, ТекШаблон.СоздаватьСерииЕслиНеНайдены);
			
			Ячейка = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,5), "[59]", ";");
			ТекЯчейка = ПолучитьЯчейкуПоКодуИлиШтрихкоду(Ячейка);
			
			Если Не ТекЯчейка.Пустая() Тогда
				Если ТекШаблон.ЗаполнятьСкладПодбор Тогда
					Попытка Док.Склад = ТекЯчейка.Владелец Исключение КонецПопытки;
					Попытка Док.СкладОтправитель = ТекЯчейка.Владелец Исключение КонецПопытки;	
					Попытка Док.Помещение = ТекЯчейка.Помещение Исключение КонецПопытки;
					Попытка Док.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Док.Склад, Док.Помещение); Исключение КонецПопытки;
				КонецЕсли;
				
				Если ТекШаблон.ЗаполнятьСкладПриемка Тогда
					Попытка Док.Склад = ТекЯчейка.Владелец Исключение КонецПопытки;
					Попытка Док.СкладПолучатель = ТекЯчейка.Владелец Исключение КонецПопытки;	
					Попытка Док.Помещение = ТекЯчейка.Помещение Исключение КонецПопытки;
					Попытка Док.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Док.Склад, Док.Помещение);Исключение КонецПопытки;
				КонецЕсли;	
			КонецЕсли;
			
			Попытка 
				КоэффициентУпаковки = ТекУпак.Числитель/ТекУпак.Знаменатель;
				КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
			Исключение
				КоэффициентУпаковки = ?(ТекУпак.Числитель = 0, 1, ТекУпак.Числитель);
			КонецПопытки; 
			
			Если ТекШаблон.НеИспользоватьПересчетУпаковок Тогда
				КоэффициентУпаковки = 1;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекЕИ) Тогда
				ТекЕИ = ТекТовар.ЕдиницаИзмерения;
			КонецЕсли;	 			
			
			Количество = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб, 6), "[59]", ";");		
			Количество = СтрЗаменить(Количество, ",", ".");
			
			Попытка ТекКол = Число(Количество) Исключение ТекКол = 0; КонецПопытки;
			Попытка ТекКолУп = ТекКол/КоэффициентУпаковки; Исключение КонецПопытки;
			
			Автор = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб, 8), "[59]", ";");
			
			ТекЦена = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб, 17), "[59]", ";");
			Попытка
				ТекЦена = Число(ТекЦена);
			Исключение
				ТекЦена = 0;
			КонецПопытки;	
			
			УпакЛистСтр = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб, 7), "[59]", ";"); 
			ДопФормыСтр = СтрПолучитьСтроку(СтрокаТаб, 19);
			
			НоваяСтрока.Номенклатура       = ТекТовар;
			НоваяСтрока.Характеристика     = ТекХР;
			НоваяСтрока.Штрихкод           = ШтрихкодТовара;
			НоваяСтрока.Серия              = ТекСерия;
			НоваяСтрока.Ячейка             = ТекЯчейка;
			НоваяСтрока.Количество     	   = ТекКол;
			НоваяСтрока.КоличествоУпаковок = ТекКолУп;
			НоваяСтрока.Упаковка           = ТекУпак;
			НоваяСтрока.Цена               = ТекЦена;
			НоваяСтрока.Автор              = Автор;
			НоваяСтрока.УпакЛист           = УпакЛистСтр;
			НоваяСтрока.ДопФормы           = ДопФормыСтр;
			НоваяСтрока.Коэффициент        = КоэффициентУпаковки;
		КонецЦикла;
	КонецЕсли; 
	
	ТабПодбор.Свернуть("Номенклатура, Характеристика, Штрихкод, Серия, Ячейка, Упаковка, Цена, Автор, УпакЛист, ДопФормы, Коэффициент", "Количество, КоличествоУпаковок");
	ТабПриемка.Свернуть("Номенклатура, Характеристика, Штрихкод, Серия, Ячейка, Упаковка, Цена, Автор, УпакЛист, ДопФормы, Коэффициент", "Количество, КоличествоУпаковок");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Подбор" , ТабПодбор);
	СтруктураВозврата.Вставить("Приемка", ТабПриемка);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ВнестиДокументВБазу(Код, тхт) 
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ссылка"                       , Неопределено);
	СтруктураВозврата.Вставить("СтрокаОшибок"                 , "");
	СтруктураВозврата.Вставить("СерилизованноеЗначениеОбъекта", Неопределено);

	
	Об = СписокФайлов[Код];
	ТекШаблон = ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента", Об.Шаблон))[0];
	ПерезаписьСклада = Истина;
	
	ПараметрыДокумента = СобратьПараметры();
	ПараметрыДокумента.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);	
	ПараметрыДокумента.Вставить("ИмяТЧПодбор" , Об.ТЧПодбор);
	ПараметрыДокумента.Вставить("ИмяТЧПриемка", Об.ТЧПриемка);		
	
	ЭтоНовыйДокумент = Ложь;
	
	Попытка
		Док = Об.Документ.ПолучитьОбъект();
		ПараметрыДокумента.Вставить("Док",Док);
	Исключение
		Док = Документы[Об.Документ].СоздатьДокумент();
		ЭтоНовыйДокумент = Истина;
		ПараметрыДокумента.Вставить("Док", Док);
		
		Попытка
			ЗаполнитьСклады(Об, тхт, Док);
		Исключение
		КонецПопытки;
		
		ЗаполнитьШапку(ПараметрыДокумента, тхт);
	КонецПопытки;  
	
	МетаданныеДокумента = Док.Метаданные();

	КИЗы.Очистить();
	УпаковочныйЛистТЗ.Очистить();
	
	Если ТекШаблон.ИспользоватьМаркировку Тогда		
		Если ДатаМобайл_МДЛП_ТребуетсяСпецОбработка(ТекШаблон) Тогда
			ПолучитьСоздатьИсходныйДокументОбъект(Об, ТекШаблон, ПараметрыДокумента, ЭтоНовыйДокумент);		
			СсылкаДокументМаркировки = ДатаМобайл_МДЛП_ПолучитьДокументМаркировки(Док, тхт, ТекШаблон, ЭтоНовыйДокумент);
			
			СтруктураВозврата.Ссылка = СсылкаДокументМаркировки;
			Возврат СтруктураВозврата;
		КонецЕсли;    		
		
		Если ДатаМобайл_Маркировка_ТребуетсяСпецОбработка(ТекШаблон) Тогда 		
			СсылкаДокументМаркировки = ПолучитьДокументМаркировки(Док, тхт, ТекШаблон,ЭтоНовыйДокумент);			
			
			СтруктураВозврата.Ссылка = СсылкаДокументМаркировки;
			Возврат СтруктураВозврата;
		Иначе
			//создадим только КМ
			ЗагрузитьКодыМаркировки(Док, тхт, ТекШаблон,ЭтоНовыйДокумент);
		КонецЕсли;	
	КонецЕсли;	
	
	ОчисткаНулевыхСтрок = Ложь;
	
	ИсходныеДанныеПодбор = Неопределено;
	НазначениеЗаполненоВТЧПодбор = Ложь;
	
	ИсходныеДанныеПриемка = Неопределено;
	НазначениеЗаполненоВТЧПриемка = Ложь;
	
	// НАЧАЛЬНОЕ ЗАПОЛНЕНИЕ ДОКУМЕНТА
	Попытка
		Если Об.ТЧПодбор <> "" Тогда
			ИсходныеДанныеПодбор = Док[ПараметрыДокумента.ИмяТЧПодбор].Выгрузить();
			
			Попытка
				НазначениеЗаполненоВТЧПодбор = ПолучитьНазначениеЗаполненоВТЧ(Док[ПараметрыДокумента.ИмяТЧПодбор]);
			Исключение КонецПопытки;
		
			Если Об.ТабличнуюЧастьПриЗагрузкеПодбор = 2 Тогда // заменять				
				Если Не МетаданныеДокумента.Имя = "ТТНВходящаяЕГАИС" Тогда					
					ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПодбор]);
					Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки;
				КонецЕсли;
				
				Если МетаданныеДокумента.Имя = "ПересчетТоваров" Тогда                   
					ЗаполнитьПересчетТоваров(Док, ТекШаблон, тхт);
				КонецЕсли;
				
			ИначеЕсли Об.ТабличнуюЧастьПриЗагрузкеПодбор = 1 Тогда // дополнять
				Если МетаданныеДокумента.Имя = "ПересчетТоваров" Тогда
					
					Если Док[ПараметрыДокумента.ИмяТЧПодбор].Количество() = 0 Тогда
						ОчисткаНулевыхСтрок = Истина;
						ЗаполнитьПересчетТоваров(Док, ТекШаблон, тхт);
					КонецЕсли;	
				КонецЕсли;
				
			ИначеЕсли Об.ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда // изменять
				Если Не МетаданныеДокумента.Имя = "ТТНВходящаяЕГАИС" Тогда
					Для каждого стр Из Док[ПараметрыДокумента.ИмяТЧПодбор] Цикл
						Попытка стр.Количество = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоУпаковокОтобрано = 0; Исключение КонецПопытки;
						Попытка стр.КоличествоОтобрано = 0; Исключение КонецПопытки;
						Попытка стр.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка(); Исключение КонецПопытки;
					КонецЦикла; 
					
					Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если Об.ТЧПриемка <> "" Тогда
			ИсходныеДанныеПриемка = Док[ПараметрыДокумента.ИмяТЧПриемка].Выгрузить();
			
			Попытка
				НазначениеЗаполненоВТЧПриемка = ПолучитьНазначениеЗаполненоВТЧ(Док[ПараметрыДокумента.ИмяТЧПриемка]);
			Исключение КонецПопытки;
			
			Если Об.ТабличнуюЧастьПриЗагрузкеПриемка = 2 Тогда // заменять
				ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПриемка]);
				Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки;
				
			ИначеЕсли Об.ТабличнуюЧастьПриЗагрузкеПриемка = 1 Тогда // дополнять
			КонецЕсли;	
		КонецЕсли;
		
	Исключение
		СтруктураВозврата.СтрокаОшибок = "Ошибка начального заполнения документа:" + ОписаниеОшибки();
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	ДополнительныеФормыШапки = Неопределено;
	ДополнительныеФормыСтроки = Неопределено;
	
	// ОСНОВНОЕ ЗАПОЛНЕНИЕ ДОКУМЕНТА
	
	#Область Не_ЕГАИС
	Если Не ТекШаблон.ИспользоватьЕГАИС Тогда
		// ОБРАБОТКА ШАПКИ ДОКУМЕНТА
		СтрокаДока = тхт.ПолучитьСтроку(1); //<ВнутреннийИдентификаторДокумента>;<НомерДокумента>;<КомментарийДокумента>;<ИдентификаторДокумента>;<ТипДокумента>;<Контрагент>;
		СтрокаДока = СтрЗаменить(СтрокаДока, ";", Символы.ПС);
		
		НомерДокумента			 = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока,2), "[59]", ";");
		КомментарийСУстройства	 = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(СтрокаДока, 3));
		ИдентификаторПартнера	 = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока,6), "[59]", ";");
		ИдентификаторСклада		 = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока,8), "[59]", ";");
		ИдентификаторСклада2 	 = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока,12), "[59]", ";");
		ДополнительныеФормыШапки = СтрПолучитьСтроку(СтрокаДока,13);
		
		// значения реквизитов из автозагрузки
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Шаблон", ТекШаблон.ТипДокумента);
		
		СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураПоиска);			  
		
		Для каждого НовЗнач Из СтрокиПоиска Цикл
			Если НовЗнач.ТипЗнач = "Справочники" Тогда
				Элм = Справочники[НовЗнач.ИмяТаблицы].ПолучитьСсылку(Новый УникальныйИдентификатор(НовЗнач.ГУИД)); 
				Док[НовЗнач.Реквизит] = Элм; 
				
			ИначеЕсли НовЗнач.ТипЗнач = "ПланыВидовХарактеристик" Тогда
				Элм = ПланыВидовХарактеристик[НовЗнач.ИмяТаблицы].ПолучитьСсылку(Новый УникальныйИдентификатор(НовЗнач.ГУИД)); 
				Док[НовЗнач.Реквизит] = Элм;   
				
			ИначеЕсли НовЗнач.ТипЗнач = "Строка" Или НовЗнач.ТипЗнач = "Число" Или НовЗнач.ТипЗнач = "Дата" Тогда
				Док[НовЗнач.Реквизит] = НовЗнач.ЗначениеРеквизита;
				
			ИначеЕсли НовЗнач.ТипЗнач = "Булево" Тогда
				Если НовЗнач.ЗначениеРеквизита = "Да" Тогда
					Док[НовЗнач.Реквизит] = Истина;
				ИначеЕсли НовЗнач.ЗначениеРеквизита = "Нет" Тогда
					Док[НовЗнач.Реквизит] = Ложь;
				КонецЕсли; 
				
			ИначеЕсли НовЗнач.ТипЗнач = "Перечисления" Тогда
				ЗначенияПеречисления = ВернутьЗначениеПеречисленияПоСинониму(НовЗнач.ЗначениеРеквизита, НовЗнач.ИмяТаблицы);				
				Док[НовЗнач.Реквизит] = ЗначенияПеречисления;				
			КонецЕсли;
			
			Попытка
				Если НовЗнач.Реквизит = "Склад" Тогда
					ПерезаписьСклада = Ложь;
				КонецЕсли;
			Исключение 
				ПерезаписьСклада = Истина;
			КонецПопытки;
			
			ПерезаполнитьДанныеДокументаПодВыборОрганизации(Док, НовЗнач, МетаданныеДокумента.Имя);
		КонецЦикла;
		
		// заполнение условий продаж
		Попытка
			ЗагруженныйПартнер = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПартнера));		
			
			Если Не ЗагруженныйПартнер = Док.Партнер Тогда
				Док.Партнер = ЗагруженныйПартнер;  				
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Док.Партнер, Док.Контрагент);
				
				Если МетаданныеДокумента.Имя = "РеализацияТоваровУслуг" Или МетаданныеДокумента.Имя = "ЗаказКлиента" Тогда
					Док.ЗаполнитьУсловияПродажПоУмолчанию();
					Попытка	Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту; Исключение; КонецПопытки;
				ИначеЕсли МетаданныеДокумента.Имя = "ПриобретениеТоваровУслуг" Или МетаданныеДокумента.Имя = "ЗаказПоставщику" Тогда
					Док.ЗаполнитьУсловияЗакупокПоУмолчанию();
					Док.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, Док.Договор);
				ИначеЕсли МетаданныеДокумента.Имя = "ВозвратТоваровОтКлиента" Тогда
					Док.ЗаполнитьУсловияПродажПоУмолчанию();
				КонецЕсли;
			КонецЕсли;		
		Исключение
		КонецПопытки;
		
		// перезапись склада
		Если ПерезаписьСклада Тогда
			Попытка
				ЗагруженныйСклад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСклада));
				Если Не ЗагруженныйСклад = Док.Склад Тогда
					Док.Склад = ЗагруженныйСклад; 	
				КонецЕсли;	
			Исключение	
			КонецПопытки;
			
			Попытка         
				ЗагруженныйСклад2 = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСклада2));
				
				Если ЗагруженныйСклад <> Док.СкладОтправитель Тогда
					Док.СкладОтправитель = ЗагруженныйСклад; 	
				КонецЕсли;
				
				Если ЗагруженныйСклад2 <> Док.СкладПолучатель Тогда
					Док.СкладПолучатель = ЗагруженныйСклад2; 	
				КонецЕсли;			
			Исключение			    
			КонецПопытки;
			
			Если МетаданныеДокумента.Имя = "ДвижениеПродукцииИМатериалов" Тогда
				ПерезаписьСкладаДокументаДвижениеПродукцииИМатериалов(Док, ЗагруженныйСклад, ЗагруженныйСклад2);	
			КонецЕсли;
		КонецЕсли;  
		
		// номер чека ККМ
		Если МетаданныеДокумента.Имя = "ЧекККМ" Тогда 
			СтруктураСостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Док.КассаККМ);
			Если Док.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена Тогда
				Док.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
				Попытка Док.НомерЧекаККМ = НомерПоследнегоЧека() + 1; Исключение КонецПопытки;
			КонецЕсли; 
		КонецЕсли;
		
		// статус документа "Расходный ордер"
		Если МетаданныеДокумента.Имя = "РасходныйОрдерНаТовары" Тогда
			Если ЭтоНовыйДокумент Тогда
				Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;
			Иначе
				Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;			
			КонецЕсли;		
		КонецЕсли;
		
		// ОБРАБОТКА ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА
		СтруктураЗагрузки = ПолучитьВиртуальнуюТаблицуТЧЗагрузки(тхт, ТекШаблон, Док, Ложь);
		ТабПодбор  = СтруктураЗагрузки.Подбор;
		ТабПриемка = СтруктураЗагрузки.Приемка;
		ТабПодбор  = ДополнитьНазначениемТабТСД(ТабПодбор, ИсходныеДанныеПодбор);
		ТабПриемка = ДополнитьНазначениемТабТСД(ТабПриемка, ИсходныеДанныеПодбор);
		
		#Область Подбор
		Для каждого СтрТЧ Из ТабПодбор Цикл	
			Если Об.ТабличнуюЧастьПриЗагрузкеПодбор = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			лСтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрТЧ.Номенклатура, СтрТЧ.Характеристика);
			
			лЕстьЯчейка 			= ((ТекШаблон.ИспользованиеЯчеекПодбор > 0) И (МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Ячейка") <> Неопределено));
			лЕстьУпаковка 			= (МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка") <> Неопределено);
			лЕстьКоличествоУпаковок	= (МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено);
			лЕстьСерия				= (ТекШаблон.ИспользованиеСерийниковПодбор > 0 И (МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Серия") <> Неопределено) И Не ТекШаблон.СерииВОтдельнойТЧ);
			
			Если лЕстьУпаковка Тогда
				Если МетаданныеДокумента.Имя = "ПересчетТоваров" Тогда
					Если Док.Склад.ИспользоватьАдресноеХранение Или Док.Помещение.ИспользоватьАдресноеХранение Тогда
						лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.Упаковка);
					КонецЕсли;	
				Иначе	
					лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.Упаковка);
				КонецЕсли;	
			КонецЕсли;	
			
			Если лЕстьСерия Тогда
				лСтруктураПоиска.Вставить("Серия", СтрТЧ.Серия);
			КонецЕсли;
			
			Если лЕстьЯчейка Тогда
				лСтруктураПоиска.Вставить("Ячейка", СтрТЧ.Ячейка);
			КонецЕсли; 
			
			ДополнитьСтруктуруПоискаДопФормами(лСтруктураПоиска, СтрТЧ.ДопФормы, ТекШаблон); 
			
			Если НазначениеЗаполненоВТЧПодбор Тогда
				Попытка лСтруктураПоиска.Вставить("Назначение", СтрТЧ.Назначение); Исключение КонецПопытки;
			КонецЕсли;
			
			СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
			
			Если СтрокиПоиска.Количество() = 0 Тогда
				СтрокаТабличнойЧасти = Док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
				СтрокаТабличнойЧасти.Номенклатура   = СтрТЧ.Номенклатура;
				СтрокаТабличнойЧасти.Характеристика = СтрТЧ.Характеристика;
				
				Если лЕстьУпаковка Тогда
					Если МетаданныеДокумента.Имя = "ПересчетТоваров" Тогда
						Если Док.Склад.ИспользоватьАдресноеХранение Или Док.Помещение.ИспользоватьАдресноеХранение Тогда
							СтрокаТабличнойЧасти.Упаковка = СтрТЧ.Упаковка;
						КонецЕсли;	
					Иначе
						СтрокаТабличнойЧасти.Упаковка = СтрТЧ.Упаковка;
					КонецЕсли;
				КонецЕсли;
				
				Если лЕстьСерия Тогда
					СтрокаТабличнойЧасти.Серия = СтрТЧ.Серия;
				КонецЕсли;  
				
				Если лЕстьЯчейка Тогда
					СтрокаТабличнойЧасти.Ячейка = СтрТЧ.Ячейка;
				КонецЕсли;
				
				ОбработатьНовуюСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, ИсходныеДанныеПодбор);
			Иначе	
				СтрокаТабличнойЧасти = СтрокиПоиска[0];
			КонецЕсли;
			
			//Новые цены
			Попытка
				Если МетаданныеДокумента.Имя = "УстановкаЦенНоменклатуры" Тогда
					Если Док.ВидыЦен.Количество() > 0 Тогда
						СтрокаТабличнойЧасти.ВидЦены = Док.ВидыЦен[0].ВидЦены;	
					Иначе	
						СтрокаТабличнойЧасти.ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию();
					КонецЕсли;
					
					СтрокаТабличнойЧасти.Цена = СтрТЧ.Цена;
					СтрокаТабличнойЧасти.ЦенаИзмененаВручную = Истина;
				ИначеЕсли СтрТЧ.Цена <> 0 Тогда
					Попытка СтрокаТабличнойЧасти.Цена = СтрТЧ.Цена; Исключение КонецПопытки; 	 
				КонецЕсли;
			Исключение
			Конецпопытки;
			
			Если Об.ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда // изменять только подобранные	
				Если МетаданныеДокумента.Имя = "ПересчетТоваров" Тогда
					СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрТЧ.Количество;
					СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт * СтрТЧ.Коэффициент;
				Иначе	
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрТЧ.Количество;
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * СтрТЧ.Коэффициент;
				КонецЕсли;
			КонецЕсли;
			
			Если Не Об.ТабличнуюЧастьПриЗагрузкеПодбор = 4 И Не Об.ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда
				Если МетаданныеДокумента.Имя = "ПересчетТоваров" Тогда
					Если Док.Склад.ИспользоватьАдресноеХранение Или Док.Помещение.ИспользоватьАдресноеХранение Тогда		
						СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт + СтрТЧ.Количество;
						СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт * СтрТЧ.Коэффициент;
					Иначе
						СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт + СтрТЧ.Количество * СтрТЧ.Коэффициент;
						СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоУпаковокФакт;
					КонецЕсли;	
				ИначеЕсли МетаданныеДокумента.Имя = "УстановкаЦенНоменклатуры" Тогда
					//нет количества в данном документе
				ИначеЕсли лЕстьКоличествоУпаковок Тогда
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * СтрТЧ.Коэффициент;
				Иначе	
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество * СтрТЧ.Коэффициент;
				КонецЕсли;	
			КонецЕсли; 
			
			Если НазначениеЗаполненоВТЧПодбор Тогда
				Попытка СтрокаТабличнойЧасти.Назначение = СтрТЧ.Назначение; Исключение КонецПопытки;
			КонецЕсли;
			
			Если Не СтрТЧ.ДопФормы = Неопределено И ЗначениеЗаполнено(СтрТЧ.ДопФормы) Тогда
				ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(СтрокаТабличнойЧасти, СтрТЧ.ДопФормы, ТекШаблон);
			КонецЕсли;
			
			ОбработатьСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПодбор, СтрокаТабличнойЧасти, ТекШаблон);      				
			
			//Серии в отдельной ТЧ
			Если МетаданныеДокумента.ТабличныеЧасти.Найти("Серии") <> Неопределено И ЗначениеЗаполнено(СтрТЧ.Серия) И ТекШаблон.СерииВОтдельнойТЧ Тогда					
				Если МетаданныеДокумента.Имя = "РеализацияТоваровУслуг" Тогда
					Попытка
						Если Док.Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено Тогда
							Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;	
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли; 				
				
				лСтруктураПоискаСерий = Новый Структура("Номенклатура,Характеристика,Серия", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрТЧ.Серия);
				СтрокиПоискаСерий = Док["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
				
				Если СтрокиПоискаСерий.Количество() = 0 Тогда
					СтрокаТабличнойЧастиСерии = Док["Серии"].Добавить();
					СтрокаТабличнойЧастиСерии.Номенклатура		 = СтрокаТабличнойЧасти.Номенклатура;
					СтрокаТабличнойЧастиСерии.Характеристика	 = СтрокаТабличнойЧасти.Характеристика;
					СтрокаТабличнойЧастиСерии.Серия				 = СтрТЧ.Серия;
					Попытка СтрокаТабличнойЧастиСерии.Склад		 = СтрокаТабличнойЧасти.Склад; Исключение КонецПопытки;
					Попытка СтрокаТабличнойЧастиСерии.Назначение = СтрокаТабличнойЧасти.Назначение; Исключение КонецПопытки;
				Иначе	
					СтрокаТабличнойЧастиСерии = СтрокиПоискаСерий[0];
				КонецЕсли;
				
				СтрокаТабличнойЧастиСерии.Количество = СтрокаТабличнойЧастиСерии.Количество + СтрТЧ.Количество * СтрТЧ.Коэффициент;					
			КонецЕсли;	
			
			//Упаковочный лист
			Если СтрТЧ.УпакЛист <> "" И ТекШаблон.СоздаватьДокументыУпаковочныхЛистов Тогда
				СтрУпаковочныйЛист = УпаковочныйЛистТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрУпаковочныйЛист, СтрокаТабличнойЧасти);
				НомерУпакЛиста = СтрЗаменить(СтрТЧ.УпакЛист,"/////","");
				Если Лев(СтрТЧ.УпакЛист,3) = "UPL" Тогда 
					НомерУпакЛиста = Прав(НомерУпакЛиста,СтрДлина(НомерУпакЛиста)-3);
				КонецЕсли;
				СтрУпаковочныйЛист.СтрТЧ.УпакЛист = НомерУпакЛиста;
				Попытка СтрУпаковочныйЛист.Склад      = ЗагруженныйСклад; Исключение КонецПопытки;
			КонецЕсли;				
		КонецЦикла;
		#КонецОбласти
		
		#Область Размещение
		Для каждого СтрТЧ Из ТабПриемка Цикл 
			Если Об.ТабличнуюЧастьПриЗагрузкеПриемка = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			лСтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрТЧ.Номенклатура, СтрТЧ.Характеристика);
			
			лЕстьЯчейка   = (ТекШаблон.ИспользованиеЯчеекПриемка > 0) И (МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Ячейка") <> Неопределено);
			лЕстьУпаковка = (МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Упаковка") <> Неопределено);
			
			Если лЕстьУпаковка Тогда
				лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.Упаковка);
			КонецЕсли;
			
			Если лЕстьЯчейка Тогда
				лСтруктураПоиска.Вставить("Ячейка", СтрТЧ.Ячейка);
			КонецЕсли;
			
			ДополнитьСтруктуруПоискаДопФормами(лСтруктураПоиска, СтрТЧ.ДопФормы, ТекШаблон);
			
			СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПриемка].НайтиСтроки(лСтруктураПоиска); 
			
			Если СтрокиПоиска.Количество() = 0 Тогда
				СтрокаТабличнойЧасти = Док[ПараметрыДокумента.ИмяТЧПриемка].Добавить();
				СтрокаТабличнойЧасти.Номенклатура   = СтрТЧ.Номенклатура;
				СтрокаТабличнойЧасти.Характеристика = СтрТЧ.Характеристика;
				
				Если лЕстьУпаковка Тогда
					СтрокаТабличнойЧасти.Упаковка = СтрТЧ.Упаковка;
				КонецЕсли;
				
				Если лЕстьЯчейка Тогда
					СтрокаТабличнойЧасти.Ячейка = СтрТЧ.Ячейка;
				КонецЕсли;
				
				ОбработатьНовуюСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПриемка, СтрокаТабличнойЧасти);
			Иначе	
				СтрокаТабличнойЧасти = СтрокиПоиска[0];
			КонецЕсли;	
			
			СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;
			СтрокаТабличнойЧасти.Количество         = СтрокаТабличнойЧасти.КоличествоУпаковок * СтрТЧ.Коэффициент;
			
			Если Не СтрТЧ.ДопФормы = Неопределено И ЗначениеЗаполнено(СтрТЧ.ДопФормы) Тогда
				ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(СтрокаТабличнойЧасти, СтрТЧ.ДопФормы, ТекШаблон);
			КонецЕсли; 
			
			ОбработатьСтрокуТЧ(Док, ПараметрыДокумента.ИмяТЧПриемка, СтрокаТабличнойЧасти, ТекШаблон);
		КонецЦикла;
		#КонецОбласти
		
		УдалитьСтрокиСНулевымКоличеством(Док, ТекШаблон, Об, ОчисткаНулевыхСтрок);
		
	КонецЕсли; 
	
	#КонецОбласти
	
	#Область ЕГАИС
	Если ТекШаблон.ИспользоватьЕГАИС Тогда  // ЕГАИС
		лТабФактПиво = СоздатьТабФактПиво();
		
		ЕстьРасхождения = Ложь;
		
		СобратьПараметрыЕГАИС(Док, ПараметрыДокумента);
		
		Если ПараметрыДокумента.ЕстьТЧМарок И (Об.ТабличнуюЧастьПриЗагрузкеПодбор = 2 или Об.ТабличнуюЧастьПриЗагрузкеПодбор = 3) Тогда
			Док.АкцизныеМарки.Очистить();
		КонецЕсли;
		
		Если ПараметрыДокумента.ЭтоВходящееНаправление Тогда
			ТЗМарок = ПолучитьМаркиВходящейТТН_ЕГАИС(Док.Ссылка);
		КонецЕсли;
		
		Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт И (Об.ТабличнуюЧастьПриЗагрузкеПодбор = 2 или Об.ТабличнуюЧастьПриЗагрузкеПодбор = 3) Тогда
			Для каждого СтрокаИсходного Из Док[ПараметрыДокумента.ИмяТЧПодбор] Цикл	
				СтрокаИсходного.КоличествоФакт = 0;
			КонецЦикла;
		КонецЕсли;	    		
		
		КомментарийСУстройства = "";
		
		Если ПараметрыДокумента.ЕстьРеквизитВерсияСхемыТТН И ЭтоНовыйДокумент Тогда
			Если ТекШаблон.ВерсияЕГАИС = 1 Тогда 
				Док.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;		
			КонецЕсли;	
		КонецЕсли;     		
		
		СтрокаДока = тхт.ПолучитьСтроку(1);
		СтрокаДока = СтрЗаменить(СтрокаДока, ";", Символы.ПС);
		НомСтроки = 2;  
		
		ДополнительныеФормыШапки = СтрПолучитьСтроку(СтрокаДока, 13);
		
		
		// значения реквизитов из автозагрузки
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Шаблон", ТекШаблон.ТипДокумента);
		
		СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураПоиска);			  
		
		Для каждого НовЗнач Из СтрокиПоиска Цикл 
			Попытка
				Если НовЗнач.ТипЗнач = "Справочники" Тогда
					Элм = Справочники[НовЗнач.ИмяТаблицы].ПолучитьСсылку(Новый УникальныйИдентификатор(НовЗнач.ГУИД)); 
					Док[НовЗнач.Реквизит] = Элм; 
					
				ИначеЕсли НовЗнач.ТипЗнач = "ПланыВидовХарактеристик" Тогда
					Элм = ПланыВидовХарактеристик[НовЗнач.ИмяТаблицы].ПолучитьСсылку(Новый УникальныйИдентификатор(НовЗнач.ГУИД)); 
					Док[НовЗнач.Реквизит] = Элм;   
					
				ИначеЕсли НовЗнач.ТипЗнач = "Строка" Или НовЗнач.ТипЗнач = "Число" Или НовЗнач.ТипЗнач = "Дата" Тогда
					Док[НовЗнач.Реквизит] = НовЗнач.ЗначениеРеквизита;
					
				ИначеЕсли НовЗнач.ТипЗнач = "Булево" Тогда
					Если НовЗнач.ЗначениеРеквизита = "Да" Тогда
						Док[НовЗнач.Реквизит] = Истина;
					ИначеЕсли НовЗнач.ЗначениеРеквизита = "Нет" Тогда
						Док[НовЗнач.Реквизит] = Ложь;
					КонецЕсли; 
					
				ИначеЕсли НовЗнач.ТипЗнач = "Перечисления" Тогда
					ЗначенияПеречисления = ВернутьЗначениеПеречисленияПоСинониму(НовЗнач.ЗначениеРеквизита, НовЗнач.ИмяТаблицы);				
					Док[НовЗнач.Реквизит] = ЗначенияПеречисления;				
				КонецЕсли;
				
				Попытка
					Если НовЗнач.Реквизит = "Склад" Тогда
						ПерезаписьСклада = Ложь;
					КонецЕсли;
				Исключение 
					ПерезаписьСклада = Истина;
				КонецПопытки; 
			Исключение 
			КонецПопытки;
		КонецЦикла;
		
		
		
		// ОБРАБОТКА ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА
		Пока НомСтроки <= тхт.КоличествоСтрок() Цикл
			СтрокаТаб = тхт.ПолучитьСтроку(НомСтроки); //<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;<ДатаРозливаЕГАИС>;<PDFЕГАИС>;<Марка>;
			СтрокаТаб = СтрЗаменить(СтрокаТаб, ";", Символы.ПС);
			
			ИдентификаторТовара  = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,2), "[59]", ";");
			Префикс				 = Лев(ИдентификаторТовара,3);
			ШтрихкодТовара		 = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,3), "[59]", ";");
			НаименованиеТовара	 = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(СтрокаДока, 9));
			КодЕГАИСПолный 		 = СтрЗаменить(СокрЛП(СтрПолучитьСтроку(СтрокаТаб,11)), "[59]", ";");
			НоменклатураЕГАИСОб  = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
			КодНоменклатурыЕГАИС = "";
			ТекТовар = Справочники.Номенклатура.ПустаяСсылка();
			
			Если Префикс = "8e-" Тогда 
				ИдентификаторТовара = СокрЛП(Сред(ИдентификаторТовара, 4));
				Попытка  // получение номенклатуры ЕГАИС по идентификатору
					ГУИД = Новый УникальныйИдентификатор(ИдентификаторТовара);
					НоменклатураЕГАИСОб = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПолучитьСсылку(ГУИД);
					КодНоменклатурыЕГАИС = НоменклатураЕГАИСОб.Код;
				Исключение
				КонецПопытки;
				
			ИначеЕсли Префикс = "8U-" Тогда //Если пришло пиво 			
				ИдентификаторТовара = СокрЛП(Сред(ИдентификаторТовара, 4, 36));
				
				Попытка
					ГУИД = Новый УникальныйИдентификатор(ИдентификаторТовара);
					лНоменклатура = Справочники.Номенклатура.ПолучитьСсылку(ГУИД);
					НоменклатураЕГАИСОб = ПолучитьНоменклатуруЕГАИСпоНоменклатуре(лНоменклатура);
					
					Если Не НоменклатураЕГАИСОб = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
						СтрокаТабФактПиво = лТабФактПиво.Добавить();
						СтрокаТабФактПиво.Товар   = НоменклатураЕГАИСОб;
						СтрокаТабФактПиво.ФактКол = СтрЗаменить(СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,6), "[59]", ";"), ",", ".");
					КонецЕсли;
					
					КодНоменклатурыЕГАИС = НоменклатураЕГАИСОб.Код;
				Исключение
				КонецПопытки;				
			КонецЕсли;
			
			Если НоменклатураЕГАИСОб = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
				Если СтрДлина(КодЕГАИСПолный) = 68 Тогда
					КодНоменклатурыЕГАИС = КодНоменклатурыЕГАИСПоPDF417(КодЕГАИСПолный);
					НоменклатураЕГАИСОб  = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду(КодНоменклатурыЕГАИС);
				КонецЕсли;
			КонецЕсли;    			
			
			Номенклатура = ПолучитьНоменклатуруЕГАИС(ШтрихкодТовара, НаименованиеТовара, НоменклатураЕГАИСОб);
			
			ТекТовар = Номенклатура.Получить(0).Значение;
			ТекХР	 = Номенклатура.Получить(1).Значение;
			ТекЕИ	 = Номенклатура.Получить(2).Значение;
			ТекКф	 = Номенклатура.Получить(3).Значение;
			
			ДатаРозливаСтрока = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,13), "[59]", ";");
			
			Попытка
				ГодРозлива         = "20" + Сред(ДатаРозливаСтрока, 5, 2);
				ДеньРозлива        = Лев(ДатаРозливаСтрока, 2);
				МесяцРозлива       = СтрЗаменить(МесяцРозлива, "/", "");
				МесяцРозлива       = Сред(ДатаРозливаСтрока, 3, 2);
				ДатаРозливаГотовая = Дата(ГодРозлива, МесяцРозлива, ДеньРозлива);
			Исключение
				ДатаРозливаГотовая = Дата(1, 1, 1);
			КонецПопытки;	
			
			Если ТекШаблон.СопоставлениеЕГАИС Тогда
				Если ПараметрыДокумента.КодыНепроверяемыхМарок.НайтиПоЗНачению(ТекТовар.ВидАлкогольнойПродукции) = Неопределено Тогда	
					Если НоменклатураЕГАИСОб = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
						
					ИначеЕсли ТекТовар = Справочники.Номенклатура.ПустаяСсылка() Тогда
						
					Иначе						
						ЗапросСопоставления = Новый Запрос;
						ЗапросСопоставления.УстановитьПараметр("НоменклатураЕГАИС" , НоменклатураЕГАИСОб);
						ЗапросСопоставления.УстановитьПараметр("Номенклатура"      , ТекТовар);
						ЗапросСопоставления.УстановитьПараметр("ЕдиницаИзмерения"  , ТекЕИ);
						ЗапросСопоставления.УстановитьПараметр("Характеристика"    , ТекХР);
						
						ЗапросСопоставления.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	ИСТИНА КАК Сопоставлен
						|ИЗ
						|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК ЕГАИС_СоответствиеНоменклатуры
						|ГДЕ
						|	ЕГАИС_СоответствиеНоменклатуры.АлкогольнаяПродукция = &НоменклатураЕГАИС
						|	И ЕГАИС_СоответствиеНоменклатуры.Номенклатура = &Номенклатура
						|	И ЕГАИС_СоответствиеНоменклатуры.Характеристика = &Характеристика";
						
						Если ЗапросСопоставления.Выполнить().Пустой() Тогда													
							МенеджерЗаписиЕГАИС = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
							МенеджерЗаписиЕГАИС.АлкогольнаяПродукция = НоменклатураЕГАИСОб;
							МенеджерЗаписиЕГАИС.Номенклатура 		 = ТекТовар;
							МенеджерЗаписиЕГАИС.Характеристика 		 = ТекХР;
							МенеджерЗаписиЕГАИС.Записать();	
						КонецЕсли;						
					КонецЕсли;
				КонецЕсли;							
			КонецЕсли;
			
			Количество = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,6), "[59]", ";");
			Количество = СтрЗаменить(Количество, ",", ".");
			ТекКол     = Число(Количество);			
			Марка      = СтрЗаменить(СокрЛП(СтрПолучитьСтроку(СтрокаТаб,12)), "[59]", ";");
			Автор 	   = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,8), "[59]", ";");
			УстановитьАвтора(Док, Автор, ТекШаблон);
			
			ДополнительныеФормыСтроки = СтрПолучитьСтроку(СтрокаТаб, 19);
			
			НомСтроки = НомСтроки + 1;    			
			
			Если Об.ТабличнуюЧастьПриЗагрузкеПодбор = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрТЧ = Новый Структура();
			СтрТЧ.Вставить("Номенклатура"		 ,ТекТовар);
			СтрТЧ.Вставить("ЕдиницаИзмерения"	 ,ТекЕИ);
			СтрТЧ.Вставить("ЕгаисДатаРозлива"	 ,ДатаРозливаГотовая);
			СтрТЧ.Вставить("КодНоменклатурыЕГАИС",КодНоменклатурыЕГАИС);
			СтрТЧ.Вставить("ЕгаисПолныйКод"		 ,КодЕГАИСПолный);
			СтрТЧ.Вставить("НоменклатураЕГАИС"	 ,НоменклатураЕГАИСОб);
			СтрТЧ.Вставить("Характеристика"		 ,ТекХР);
			СтрТЧ.Вставить("ШтрихкодТовара"		 ,ШтрихкодТовара);
			СтрТЧ.Вставить("Марка"				 ,Марка);
			СтрТЧ.Вставить("Пользователь"		 ,Автор);
			СтрТЧ.Вставить("Количество"			 ,ТекКол);
			
			Если СокрЛП(Об.ТЧПодбор) <> "" Тогда				
				Если ТекКол = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				//Поиск строк сначала по маркам затем по ЕГАИС номенклатуре и реквизитам
				ПоискПоМарке = Ложь;
				ТекущаяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", СтрТЧ.ЕгаисПолныйКод);
				
				Если ТекущаяАкцизнаяМарка.Пустая() И СтрТЧ.ЕгаисПолныйКод <> "" Тогда
					НоваяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
					НоваяАкцизнаяМарка.ЗначениеШтрихкода = СтрТЧ.ЕгаисПолныйКод;
					
					Если стрДлина(СтрТЧ.ЕгаисПолныйКод) = 68 Тогда
						НоваяАкцизнаяМарка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
					Иначе
						НоваяАкцизнаяМарка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
					КонецЕсли; 
					
					НоваяАкцизнаяМарка.Номенклатура = СтрТЧ.Номенклатура;
					НоваяАкцизнаяМарка.ДатаУпаковки = ТекущаяДата();
					НоваяАкцизнаяМарка.ТипУпаковки  = Перечисления.ТипыУпаковок.МаркированныйТовар;					
					НоваяАкцизнаяМарка.Количество   = 1;
					Попытка НоваяАкцизнаяМарка.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(СтрТЧ.Пользователь, Ложь); Исключение КонецПопытки;
					НоваяАкцизнаяМарка.Записать();
					ТекущаяАкцизнаяМарка = НоваяАкцизнаяМарка.Ссылка;
				КонецЕсли;
				
				
				ТекущаяСправка2 = Справочники.Справки2ЕГАИС.ПустаяСсылка();
				Если ЗначениеЗаполнено(ТекущаяАкцизнаяМарка) Тогда						
					Если ПараметрыДокумента.ЭтоВходящееНаправление Тогда
						СтруктураПоискаМарокТТН = Новый Структура("Марка", СтрТЧ.ЕгаисПолныйКод);
						СтрокиПоискаМарокТТН = ТЗМарок.НайтиСтроки(СтруктураПоискаМарокТТН);	
						
						Если СтрокиПоискаМарокТТН.Количество() > 0 Тогда
							ТекущаяСправка2 = СтрокиПоискаМарокТТН[0].Справка2;
							ПоискПоМарке = Истина;
						КонецЕсли; 
					Иначе
						Попытка СтруктураПараметрыМарки = ПолучитьПараметрыМаркиПоМарке(ТекущаяАкцизнаяМарка, ПараметрыДокумента, Док); Исключение КонецПопытки;
						Если СтруктураПараметрыМарки <> Неопределено Тогда  
							ТекущаяСправка2 = СтруктураПараметрыМарки.Справка2;
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;  				
				
				Если МетаданныеДокумента.Имя <> "ВскрытиеТарыЕГАИС" И МетаданныеДокумента.Имя <> "УдалитьВскрытиеТарыЕГАИС" И МетаданныеДокумента.Имя <> "ВозвратТоваровОтПокупателя" Тогда
					Если ПоискПоМарке Тогда
						СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция, Справка2", НоменклатураЕГАИСОб, ТекущаяСправка2));
					ИначеЕсли ПараметрыДокумента.ЕстьРеквизитСправка2 И ЗначениеЗаполнено(ТекущаяСправка2) Тогда //исходящая ТТН
						СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция, Справка2", НоменклатураЕГАИС, ТекущаяСправка2));		
					ИначеЕсли ПараметрыДокумента.ЕстьРеквизитДатаРозлива И ЗначениеЗаполнено(СтрТч.ЕгаисДатаРозлива) Тогда
						СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция, ДатаРозлива", НоменклатураЕГАИСОб, СтрТч.ЕгаисДатаРозлива));
					Иначе
						СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция", НоменклатураЕГАИСОб));
					КонецЕсли;
				Иначе	
					СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура", СтрТЧ.Номенклатура));					
				КонецЕсли;
				
				//Для пива
				Если НоменклатураЕГАИСОб = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
					СтрокиПоиска = Док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура", СтрТЧ.Номенклатура));					
				КонецЕсли;				
				
				Если СтрокиПоиска.Количество() = 0 Тогда
					Если МетаданныеДокумента.Имя = "ТТНВходящаяЕГАИС" Тогда
						ЕстьРасхождения = Истина;
						Продолжить;
					КонецЕсли;
					
					СтрокаТабличнойЧасти = Док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();					
					
					Если ПараметрыДокумента.ЕстьРеквизитАлкогольнаяПродукция Тогда
						СтрокаТабличнойЧасти.АлкогольнаяПродукция = НоменклатураЕГАИСОб;
					КонецЕсли;
					
					Если ПараметрыДокумента.ЕстьРеквизитНоменклатура Тогда
						СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					КонецЕсли;	
					
					Если ПараметрыДокумента.ЕстьРеквизитСправка2 Тогда
						СтрокаТабличнойЧасти.Справка2 = ТекущаяСправка2;
					КонецЕсли;
					
					ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, Док, ПараметрыДокумента, ТекШаблон, СтрТЧ, СтрТЧ.Количество);
					
				ИначеЕсли СтрокиПоиска.Количество() = 1 Тогда
					СтрокаТабличнойЧасти = СтрокиПоиска[0];
					
					ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, Док, ПараметрыДокумента, ТекШаблон, СтрТЧ, СтрТЧ.Количество);
					
				Иначе // несколько строк, надо распределить					
					Если МетаданныеДокумента.Имя = "ТТНВходящаяЕГАИС" Или МетаданныеДокумента.Имя = "ТТНИсходящаяЕГАИС" Тогда											
						n = 0;
						КоличествоДляВнесения = СтрТЧ.Количество;    
						
						Для каждого СтрокаТабличнойЧасти Из СтрокиПоиска Цикл
							n = n + 1;
							
							КоличествоВСтрокеЗадание = СтрокаТабличнойЧасти.Количество; 
							КоличествоВСтрокеФакт    = СтрокаТабличнойЧасти.КоличествоФакт; 
							ОсталосьВнести           =  КоличествоВСтрокеЗадание - КоличествоВСтрокеФакт;
							
							Если ОсталосьВнести >= КоличествоДляВнесения Тогда
								ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, Док, ПараметрыДокумента, ТекШаблон, СтрТЧ, КоличествоДляВнесения);
								Прервать;
							Иначе
								Если СтрокиПоиска.Количество() = n Тогда
									ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, Док, ПараметрыДокумента, ТекШаблон, СтрТЧ, КоличествоДляВнесения);
									Прервать;
								Иначе
									Если ОсталосьВнести = 0 Тогда
										Продолжить;
									КонецЕсли;
									
									ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, Док, ПараметрыДокумента, ТекШаблон, СтрТЧ, ОсталосьВнести); 
									КоличествоДляВнесения = КоличествоДляВнесения - ОсталосьВнести;  
									
									Если КоличествоДляВнесения = 0 Тогда
										Прервать;
									Иначе
										Продолжить;
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла
						
					Иначе //пока нет партий
						СтрокаТабличнойЧасти = СтрокиПоиска[0];						
						ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, Док, ПараметрыДокумента, ТекШаблон, СтрТЧ, СтрТЧ.Количество);
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		
		// ДОП.ОБРАБОТКА ДЛЯ ЕГАИС
		Если ЕстьРасхождения Тогда
			Сообщить("Считаны позиции которых нет во входящей ТТН, они не загружены. Расхождения смотрите в файле данных", СтатусСообщения.Важное);
		КонецЕсли;
		
		Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт И Об.ТабличнуюЧастьПриЗагрузкеПодбор <> 0 Тогда
			Для каждого СтрокаИсходного Из Док[ПараметрыДокумента.ИмяТЧПодбор] Цикл
				Если СтрокаИсходного.КоличествоФакт <> СтрокаИсходного.Количество Тогда
					Док.ЕстьРасхождения = Истина;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		
		Если МетаданныеДокумента.Имя = "ТТНВходящаяЕГАИС"  Тогда	
			Попытка 
				Док.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Выполняется;
			Исключение	
				Док.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;	
			КонецПопытки;
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения = Ложь;
			ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС;
			ПараметрыОбновленияСтатуса.ДокументОбъект    = Док;		
			Документы.ТТНВходящаяЕГАИС.ОбновитьСтатусПослеПолученияДанных(Док.Ссылка, Перечисления.ВидыДокументовЕГАИС.ТТН, ПараметрыОбновленияСтатуса);
			
			Попытка Документы.ТТНВходящаяЕГАИС.ПриИзмененииСтатусаДокумента(Док.Ссылка, Неопределено, Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС, ПараметрыОбновленияСтатуса); Исключение КонецПопытки;
			
		ИначеЕсли МетаданныеДокумента.Имя = "ТТНИсходящаяЕГАИС" Тогда
			Попытка 
				Док.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Выполняется;
			Исключение	
				Док.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;	
			КонецПопытки;	
		КонецЕсли;		
	КонецЕсли;
	
	#КонецОбласти
	
	Если ТекШаблон.ИспользованиеСерийниковПодбор > 0 Или ТекШаблон.ИспользованиеСерийниковПриемка > 0 Тогда	
		Попытка УстановитьСерииВдокументе(Док); Исключение КонецПопытки;
	КонецЕсли;
	
	Если НЕ ДополнительныеФормыШапки = Неопределено И ЗначениеЗаполнено(ДополнительныеФормыШапки) Тогда
		Попытка ИзменитьРеквизитыШапкиИзДополнительныхФорм(Док, ДополнительныеФормыШапки, ТекШаблон); Исключение КонецПопытки;
	КонецЕсли;

	//РАБОТА С УПАКОВОЧНЫМИ ЛИСТАМИ СОЗДАННЫМИ ПРИ ОБРАБОТКЕ ДРУГИХ ДОКУМЕНТОВ
	Если ТекШаблон.СоздаватьДокументыУпаковочныхЛистов И УпаковочныйЛистТЗ.Количество() > 0 Тогда
		Попытка ЗаполнитьУпаковочныеЛисты(ТекШаблон, Док, ЭтоНовыйДокумент); Исключение КонецПопытки;
	КонецЕсли; 
	
	ЗагружатьКомментарий 				  = ТекШаблон.ЗагружатьКомментарий;
	АвтоматическийКомментарийИспользовать = ТекШаблон.АвтоматическийКомментарийИспользовать;
	АвтоматическийКомментарий             = ТекШаблон.АвтоматическийКомментарий;
	
	//РАБОТА С КОММЕНТАРИЕМ ДОКУМЕНТА
	Попытка
		КомментДока = Док.Комментарий;
		КомментДока = СокрЛП(СтрЗаменить(КомментДока, СокрЛП(Док.Комментарий), ""));
		
		КомментарийБезСимволаПереносаСтроки = СтрЗаменить(СокрЛП(Док.Комментарий), Символы.ПС, "-");
		ДлинаКомментария = СтрДлина(СокрЛП(КомментарийБезСимволаПереносаСтроки));
		
		КомментарииРавны = Ложь;
		
		Если КомментарийБезСимволаПереносаСтроки = КомментДока Тогда
			КомментарииРавны = Истина;	
		КонецЕсли; 
		
		СпередиВвели = Лев(КомментДока, ДлинаКомментария);
		СзадиВвели	 = Прав(КомментДока, ДлинаКомментария);
		
		Если Не АвтоматическийКомментарийИспользовать Тогда
			КомментДМ = КомментарийСУстройства;
		Иначе
			КомментДМ = "" + СокрЛП(АвтоматическийКомментарий) + " (" + ТекущаяДата() + "). " + Символы.ПС;
		КонецЕсли; 
		
		Если ЗагружатьКомментарий = 1 Тогда // До комментария документа 
			Если КомментарийБезСимволаПереносаСтроки = СпередиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СпередиВвели, ""));
				Док.Комментарий = КомментДМ + КомментарийОператора + Символы.ПС + Док.Комментарий;
			ИначеЕсли КомментарийБезСимволаПереносаСтроки = СзадиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СзадиВвели, ""));
				Док.Комментарий = КомментДМ + КомментарийОператора + Символы.ПС + Док.Комментарий;	
			Иначе	
				Док.Комментарий = КомментДМ + Символы.ПС + ?(КомментарииРавны, "", КомментДока) + Символы.ПС + Док.Комментарий;
			КонецЕсли;			
		ИначеЕсли ЗагружатьКомментарий = 2 Тогда // После комментария документа
			Если КомментарийБезСимволаПереносаСтроки = СпередиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СпередиВвели, ""));
				Док.Комментарий = Док.Комментарий + КомментДМ + КомментарийОператора;
			ИначеЕсли КомментарийБезСимволаПереносаСтроки = СзадиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СзадиВвели, ""));
				Док.Комментарий = Док.Комментарий + КомментДМ + КомментарийОператора;	
			Иначе	
				Док.Комментарий = ?(КомментарииРавны, "", Док.Комментарий) + Символы.ПС + КомментДока  + Символы.ПС + КомментДМ;
			КонецЕсли;
		Иначе			
			Если ЗначениеЗаполнено(КомментДМ) Тогда
				Док.Комментарий = КомментДМ;	
			КонецЕсли;			
		КонецЕсли;
		
		//Автокомментарий
		Если АвтоматическийКомментарийИспользовать Тогда
			АвтоКомментарий = АвтоматическийКомментарий;
			Если Не ЗначениеЗаполнено(Док.Комментарий) И ЗначениеЗаполнено(АвтоКомментарий) Тогда
				Док.Комментарий = СокрЛП(АвтоКомментарий);	
			КонецЕсли;	
		КонецЕсли;			
	Исключение
	КонецПопытки;
		
	// ЗАПИСЬ ДОКУМЕНТА
	Если ТекШаблон.ОткрыватьДокументыПослеЗагрузкиБезЗаписи 
		И Не ТекШаблон.ПроводитьДокументы 
		И Не ТекШаблон.НеОткрыватьДокументыПослеЗагрузки Тогда
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписатьXML(ЗаписьXML, Док);
		СерилизованноеЗначениеОбъекта = ЗаписьXML.Закрыть();
		
		СтруктураВозврата.СерилизованноеЗначениеОбъекта = СерилизованноеЗначениеОбъекта;
		
	Иначе			
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		Если ТекШаблон.ПроводитьДокументы Тогда
			Попытка
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'Внесение документа в базу'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки); 
			КонецПопытки;
		КонецЕсли;		
	КонецЕсли;
	
	СтруктураВозврата.Ссылка = Док.Ссылка;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСклады(Об, тхт, Док)
	
	Если Об.ТЧПодбор <> "" И Об.ТЧПриемка <> "" Тогда //перемещение
		НомСтроки = 2;
		
		Пока НомСтроки <= тхт.КоличествоСтрок() Цикл
			СтрокаТаб = тхт.ПолучитьСтроку(НомСтроки); //<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;
			НомСтроки = НомСтроки + 1;
			СтрокаТаб = СтрЗаменить(СтрокаТаб, ";", Символы.ПС);
			СтрокаПодорИлиРазмещение = СтрПолучитьСтроку(СтрокаТаб, 1);
			
			Если СтрокаПодорИлиРазмещение = "S" Тогда
				ТекЯчейка = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,5), "[59]", ";");
				Док.СкладОтправитель = Справочники.СкладскиеЯчейки.НайтиПоКоду(ТекЯчейка).Владелец;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НомСтроки = 2;
		
		Пока НомСтроки <= тхт.КоличествоСтрок() Цикл
			СтрокаТаб = тхт.ПолучитьСтроку(НомСтроки); //<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;
			НомСтроки = НомСтроки + 1;
			СтрокаТаб = СтрЗаменить(СтрокаТаб, ";", Символы.ПС);
			СтрокаПодорИлиРазмещение = СтрПолучитьСтроку(СтрокаТаб, 1);
			
			Если СтрокаПодорИлиРазмещение = "I" Тогда
				ТекЯчейка = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,5), "[59]", ";");
				Док.СкладПолучатель = Справочники.СкладскиеЯчейки.НайтиПоКоду(ТекЯчейка).Владелец;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;              	
		
	Иначе
		НомСтроки = 2;
		Пока НомСтроки <= тхт.КоличествоСтрок() Цикл
			СтрокаТаб = тхт.ПолучитьСтроку(НомСтроки); //<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;
			НомСтроки = НомСтроки + 1;
			СтрокаТаб = СтрЗаменить(СтрокаТаб, ";", Символы.ПС);
			ТекЯчейка = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб,5), "[59]", ";");
			Док.Склад = Справочники.СкладскиеЯчейки.НайтиПоКоду(ТекЯчейка).Владелец;
			
			Прервать;			
		КонецЦикла;
	КонецЕсли;  
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти, ДокументЕГАИС, ПараметрыДокумента, ТекШаблон, СтрТЧ, Количество)
	
	МетаданныеДокумента = ДокументЕгаис.Метаданные();
	
	Если ПараметрыДокумента.ЕстьРеквизитНоменклатура Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитИдентификаторСтроки Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитКлючСвязи Тогда
		Если СтрокаТабличнойЧасти.КлючСвязи = 0 Тогда
			ЗначениеМаксимальногоЭлемента = 0; // Значение, заведомо меньшее любого элемента в массиве.
			
			СписокКлючей = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].ВыгрузитьКолонку("КлючСвязи");
			
			Для Индекс = 0 По СписокКлючей.Количество() - 1 Цикл
				Если СписокКлючей[Индекс] > ЗначениеМаксимальногоЭлемента Тогда
					ЗначениеМаксимальногоЭлемента = СписокКлючей[Индекс];
				КонецЕсли;
			КонецЦикла;
			
			СтрокаТабличнойЧасти.КлючСвязи = ЗначениеМаксимальногоЭлемента + 1;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитНеобходимостьВводаАкцизнойМарки И СтрТЧ.ЕгаисПолныйКод <> "" Тогда
		СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = Истина;	
	КонецЕсли;    	
	
	Если ПараметрыДокумента.ЕстьРеквизитУпаковка И ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения) Тогда
		Если Не ЗНачениеЗаполнено(СтрокаТабличнойЧасти.Упаковка) И ТипЗнч(СтрТЧ.ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
			СтрокаТабличнойЧасти.Упаковка = СтрТЧ.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", СтрТЧ.ЕгаисПолныйКод);
	
	//МАРКИ
	Если ПараметрыДокумента.ЕстьТЧМарок И (ПараметрыДокумента.ЕстьРеквизитИдентификаторСтроки Или ПараметрыДокумента.ЕстьРеквизитКлючСвязи) Тогда		
		ЕстьРеквизитИдентификаторСтрокиМарок = МетаданныеДокумента.ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено; 
		ЕстьРеквизитКлючСвязиМарок           = МетаданныеДокумента.ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("КлючСвязи") <> Неопределено; 
		ЕстьРеквизитКоличествоМарок          = МетаданныеДокумента.ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("Количество") <> Неопределено; 
		ЕстьРеквизитСправка2Марок            = МетаданныеДокумента.ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("Справка2") <> Неопределено; 
		
		Если Не ТекущаяАкцизнаяМарка.Пустая()  Тогда  // и НЕ ПараметрыДокумента.ЭтоВходящееНаправление
			СтрокиПоискаМарок = ДокументЕГАИС.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", ТекущаяАкцизнаяМарка));
			
			Если СтрокиПоискаМарок.Количество() = 0 Тогда
				СтрокаМарки = ДокументЕГАИС.АкцизныеМарки.Добавить();
				СтрокаМарки.АкцизнаяМарка = ТекущаяАкцизнаяМарка;
				
				Если ЕстьРеквизитИдентификаторСтрокиМарок Тогда
					СтрокаМарки.ИдентификаторСтроки = СтрокаТабличнойЧасти.ИдентификаторСтроки;
				КонецЕсли;
				
				Если ЕстьРеквизитКлючСвязиМарок Тогда
					СтрокаМарки.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи; 
				КонецЕсли;
				
				Если ЕстьРеквизитСправка2Марок Тогда
					СтрокаМарки.Справка2 = СтрокаТабличнойЧасти.Справка2;
				КонецЕсли;      				
				
				Если ЕстьРеквизитКоличествоМарок Тогда
					СтрокаМарки.Количество = 1; 
				КонецЕсли;
				
			Иначе
				СтрокаМарки = СтрокиПоискаМарок[0];
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	//МАРКИ        	
	
	Если ПараметрыДокумента.ЕстьРеквизитКоличествоУпаковок И Не МетаданныеДокумента.Имя = "ТТНВходящаяЕГАИС" Тогда		
		СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + Количество;	
	КонецЕсли;
	
	Попытка
		лКоэффициент = ?(СтрТЧ.ЕдиницаИзмерения.Коэффициент = 0, 1, СтрТЧ.ЕдиницаИзмерения.Коэффициент);
	Исключение
		лКоэффициент = 1;
	КонецПопытки;
	
	Если ПараметрыДокумента.ЕстьРеквизитКоличество И Не МетаданныеДокумента.Имя = "ТТНВходящаяЕГАИС" Тогда		
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество * лКоэффициент;	
	КонецЕсли;  	
	
	Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт Тогда
		СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоФакт + Количество * лКоэффициент;
	КонецЕсли;    	
	
КонецПроцедуры

&НаСервере
Функция СобратьПараметрыЕГАИС(ДокументЕГАИС, ПараметрыДокумента)
	
	МетаданныеДокумента = ДокументЕгаис.Метаданные(); 
	
	ЭтоВходящееНаправление = Ложь;
	
	Если МетаданныеДокумента.Имя = "ТТНВходящаяЕГАИС" Тогда
		ЭтоВходящееНаправление = Истина;
	КонецЕсли;
	
	ПараметрыДокумента.Вставить("КодыНепроверяемыхМарок"					 , СформироватьСписокНепроверяемыхМарокЕГАИС());
	ПараметрыДокумента.Вставить("ЕстьРеквизитИдентификаторСтроки"			 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитКлючСвязи"						 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КлючСвязи") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитНеобходимостьВводаАкцизнойМарки", МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("НеобходимостьВводаАкцизнойМарки") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитВерсияСхемыТТН"				 , МетаданныеДокумента.Реквизиты.Найти("ФорматОбмена") <> Неопределено);
	
	ПараметрыДокумента.Вставить("ЭтоВходящееНаправление" 					 , ЭтоВходящееНаправление);	
	
	ПараметрыДокумента.Вставить("ЕстьТЧМарок"								 , МетаданныеДокумента.ТабличныеЧасти.Найти("АкцизныеМарки") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитДатаРозлива"					 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ДатаРозлива") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитУпаковка"						 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка") <> Неопределено);
	
	ПараметрыДокумента.Вставить("ЕстьРеквизитАлкогольнаяПродукция"			 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("АлкогольнаяПродукция") <> Неопределено);
	
	ПараметрыДокумента.Вставить("ЕстьРеквизитНоменклатура"				 	 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Номенклатура") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитХарактеристика"			 	 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Характеристика") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитКоличествоУпаковок"		 	 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитКоличество"					 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Количество") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитКоличествоФакт"				 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоФакт") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитСправка2"						 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Справка2") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитПоставщик"						 , МетаданныеДокумента.Реквизиты.Найти("Поставщик") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитОрганизацияЕГАИС"				 , МетаданныеДокумента.Реквизиты.Найти("ОрганизацияЕГАИС") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитСерия"							 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Серия") <> Неопределено);
	
	ПараметрыДокумента.Вставить("ЕстьРеквизитЕГАИС"							 , МетаданныеДокумента.Реквизиты.Найти("ЕГАИС") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитМарка"							 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Марка") <> Неопределено);
	ПараметрыДокумента.Вставить("ЕстьРеквизитЕГАИС_Номенклатура"			 , МетаданныеДокумента.ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ЕГАИС_Номенклатура") <> Неопределено);			
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыМаркиПоМарке(Марка, ПараметрыДокумента, ДокументЕГАИС)
	
	ТекущаяОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка();
	
	Если ПараметрыДокумента.ЕстьРеквизитПоставщик Тогда
		ТекущаяОрганизацияЕГАИС = ДокументЕГАИС.Поставщик;
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитОрганизацияЕГАИС Тогда
		ТекущаяОрганизацияЕГАИС = ДокументЕГАИС.ОрганизацияЕГАИС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕГАИС_РегистрМарок.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ЕГАИС_РегистрМарок.Статус КАК Статус,
	|	ЕГАИС_РегистрМарок.Справка2 КАК Справка2
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК ЕГАИС_РегистрМарок
	|ГДЕ
	|	ЕГАИС_РегистрМарок.АкцизнаяМарка = &Марка
	|	И ЕГАИС_РегистрМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС";
		
	Запрос.УстановитьПараметр("Марка", Марка);
	Если ТекущаяОрганизацияЕГАИС.Пустая() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЕГАИС_РегистрМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС", "");	
	Иначе	
		Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ТекущаяОрганизацияЕГАИС);
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("АлкогольнаяПродукция, Статус, Справка2", Выборка.АлкогольнаяПродукция, Выборка.Статус, Выборка.Справка2);
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьТабличнуюЧасть(ТабличнаяЧасть)
	
	ТабличнаяЧасть.Очистить();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ОбработатьНовуюСтрокуТЧ(Док, ИмяТЧ, СтрокаТабличнойЧасти, ИсходныеДанные = Неопределено)
	
	ИмяДока = Док.Метаданные().Имя;
	
	Модуль_ОбработкаТабличнойЧастиКлиентСервер 	= ОбщийМодуль("ОбработкаТабличнойЧастиКлиентСервер");
	Модуль_ОбщегоНазначенияКлиентСервер 		= ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	Модуль_НоменклатураСервер 					= ОбщийМодуль("НоменклатураСервер");
	Модуль_Пользователи 						= ОбщийМодуль("Пользователи");
	Модуль_ОбработкаТабличнойЧастиСервер 		= ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
	Модуль_ОбщегоНазначения 					= ОбщийМодуль("ОбщегоНазначения");
    Модуль_ЦенообразованиеВызовСервера 			= ОбщийМодуль("ЦенообразованиеВызовСервера");
	
	Если ИмяДока = "РеализацияТоваровУслуг" Или ИмяДока = "ОтгрузкаТоваровСХранения" Тогда
		Если ИмяТЧ = "Товары" Тогда
			СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Док.Склад);
			ТекущаяСтрока = СтрокаТабличнойЧасти;

			Попытка
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"	  , ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			
			СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Док.Склад);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Док, СкладГруппа));
			
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Док.Партнер);
			СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
			Модуль_ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Док, Истина));
			
			Попытка
				Если ИмяДока = "ОтгрузкаТоваровСХранения" Тогда
				Иначе	
					ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
					ИспользуетсяЦенообразование25    = Модуль_ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
					
					Если (ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Док.Соглашение)) 
						Или (Не ИспользоватьСоглашенияСКлиентами И ИспользуетсяЦенообразование25) Тогда
						СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Док));
					Иначе
						СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Док));
					КонецЕсли;
				КонецЕсли;
			Исключение
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док));	
			КонецПопытки;
				
			Если Не ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
				Исключение
					НалогообложениеНДС=ПолучитьНалогообложениеНДСПоУмолчанию(Док.Организация, Док.Контрагент, Док.Соглашение, Док.Дата, Истина, Неопределено);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
				КонецПопытки;
				
			ИначеЕсли ИмяДока = "ОтгрузкаТоваровСХранения" Тогда
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСПоНоменклатуре");	
				
			Иначе
				Если Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС,Док.Дата));
				КонецЕсли;	
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ВводОстатков" Или ИмяДока = "ВводОстатковТоваров" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			
			Если Не ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
				Исключение
					НалогообложениеНДС = ПолучитьНалогообложениеНДСПоУмолчанию(Док.Организация, Док.Контрагент, Док.Соглашение, Док.Дата, Истина, Неопределено);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
				КонецПопытки;
			Иначе
				Если Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС,Док.Дата));
				КонецЕсли;	
			КонецЕсли;

			СтруктураДействий.Вставить("ПересчитатьСуммуНДС" , СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ПоступлениеТоваровУслуг" Или ИмяДока = "ПриобретениеТоваровУслуг" Тогда
		Если ИмяТЧ = "Товары" Тогда			
			Если Не ОбщегоНазначения.СсылкаСуществует(Док.Склад) Тогда
				Док.Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли; 
			
			СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Док.Склад);
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"           , ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад"                      , ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Док, СкладГруппа));
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Док.Партнер);
			СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Док, Истина));
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"        , ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов"             , ТекущаяСтрока.Номенклатура);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки"                         , ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Док));
			
			Если Не ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
				Исключение
					НалогообложениеНДС = ПолучитьНалогообложениеНДСПоУмолчанию(Док.Организация, Док.Контрагент, Док.Соглашение, Док.Дата, Истина, Неопределено);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
				КонецПопытки;
			Иначе
				Если Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
				КонецЕсли;	
			КонецЕсли;

			СтруктураДействий.Вставить("ПересчитатьСуммуНДС" , СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры"    , Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД"   , Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
			Если ИсходныеДанные <> Неопределено Тогда
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = ИсходныеДанные.НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиПоиска.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоиска[0],, "Упаковка,Серия,Количество,КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ОтборРазмещениеТоваров" Тогда
		Если ИмяТЧ = "ТоварыОтбор" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"    , ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу" , ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс"    , "Отобрано");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
		ИначеЕсли ИмяТЧ = "ТоварыРазмещение" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"    , ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу" , ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс"    ,"Размещено");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ЧекККМ" Тогда
		ТекущаяСтрока = СтрокаТабличнойЧасти;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Док));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьПродавца"                    , Новый Структура("Продавец", Пользователи.ТекущийПользователь()));
		
			Если Не ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
				Исключение
					НалогообложениеНДС=ПолучитьНалогообложениеНДСПоУмолчанию(Док.Организация, Док.Контрагент, Док.Соглашение, Док.Дата, Истина, Неопределено);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
				КонецПопытки;
			Иначе
				Если Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
				КонецЕсли;	
			КонецЕсли;

		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док));
		ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		
	ИначеЕсли ИмяДока = "ЗаказКлиента" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
			
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			
			Если ЗначениеЗаполнено(Док.Соглашение) Тогда
				СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Док));
			Иначе
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док)); 
				Исключение
					СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Док));
				КонецПопытки;
			КонецЕсли;
			
			Если Не ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
				Исключение
					НалогообложениеНДС=ПолучитьНалогообложениеНДСПоУмолчанию(Док.Организация, Док.Контрагент, Док.Соглашение, Док.Дата, Истина, Неопределено);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
				КонецПопытки;
			Иначе
				Если Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
				КонецЕсли;	
			КонецЕсли;

			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС"             , СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС"            , СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры"            , Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул"                    , Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи"   , Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
			
			СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары"          , Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары"  , Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус"             , Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение"              , Новый Структура("ЗаполнитьОбособленно", Истина));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
			
			Если ИсходныеДанные <> Неопределено Тогда
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = ИсходныеДанные.НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиПоиска.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокиПоиска[0],, "Упаковка,Серия,Количество,КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли ИмяДока = "ПеремещениеТоваров" Тогда
		Если ИмяТЧ = "Товары" Тогда
			Попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказНаПеремещение.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() > 0 Тогда
					СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли; 
		
	ИначеЕсли ИмяДока = "ВнутреннееПотреблениеТоваров" Тогда
		Если ИмяТЧ = "Товары" Тогда
			Попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказНаВнутреннееПотребление.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() > 0 Тогда
					СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "РасходныйОрдерНаТовары" Тогда
		Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		КонецЕсли;
		
	ИначеЕсли ИмяДока="ОрдерНаПеремещениеТоваров" Тогда
		Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "МаркировкаТоваровИСМП" Или  ИмяДока = "ВыводИзОборотаИСМП" Тогда
		Если ИмяТЧ = "Товары" Тогда			
			ТекущаяСтрока = СтрокаТабличнойЧасти;			
			СтруктураДействий = Новый Структура;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
				ТекущаяСтрока.Характеристика);
				
				СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Артикул") Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СтавкаНДС") Тогда
				Если Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"), Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"), Док.Дата));
				КонецЕсли;	
			КонецЕсли;
			
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
				СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
			КонецЕсли;   			
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);		
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ОбработатьСтрокуТЧ(Док, ИмяТЧ, СтрокаТабличнойЧасти, ТекШаблон) 
	
	ИмяДока = Док.Метаданные().Имя;
	
	Если ИмяДока = "РеализацияТоваровУслуг" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;  
		
	ИначеЕсли ИмяДока = "ВводОстатков" Или ИмяДока = "ВводОстатковТоваров" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			Если Не ЕстьЕГАИС() Тогда //старые конфы, Украина и Казахстан
				Попытка 
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
				Исключение
					НалогообложениеНДС = ПолучитьНалогообложениеНДСПоУмолчанию(Док.Организация, Док.Контрагент, Док.Соглашение, Док.Дата, Истина, Неопределено);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
				КонецПопытки;
			Иначе
				Если Есть115() Тогда
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", Док.НалогообложениеНДС, Док.Дата, Док.Организация));
				Иначе	
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС,Док.Дата));
				КонецЕсли;	
			КонецЕсли;
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;		
		
	ИначеЕсли ИмяДока = "ПоступлениеТоваровУслуг" Или ИмяДока = "ПриобретениеТоваровУслуг" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ПриобретениеТоваровУслуг" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
			ТекущаяСтрока.Склад =  Док.Склад;
			
		КонецЕсли;		
		
	ИначеЕсли ИмяДока = "ОтборРазмещениеТоваров" Тогда
		Если ИмяТЧ = "ТоварыОтбор" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Отобрано");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		ИначеЕсли ИмяТЧ = "ТоварыРазмещение" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Размещено");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
		
	ИначеЕсли ИмяДока = "ЧекККМ" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Пользователи.ТекущийПользователь()));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док));
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
		
	ИначеЕсли ИмяДока = "ЗаказКлиента" Тогда
		Если ИмяТЧ = "Товары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
			
			СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "РасходныйОрдерНаТовары" Тогда
		Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			Если Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
				ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			Иначе
				ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "ОрдерНаПеремещениеТоваров" Тогда
		Если ИмяТЧ = "ОтгружаемыеТовары" И (Док.Статус = Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке Или Док.Статус = Перечисления.СтатусыОрдеровНаПеремещение.Принят) Тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		КонецЕсли;
		
	ИначеЕсли ИмяДока = "МаркировкаТоваровИСМП" Или ИмяДока = "ВыводИзОборотаИСМП" Тогда
		Если ИмяТЧ = "Товары" Тогда
			
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);		
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
		КонецЕсли;	
	КонецЕсли;
	
	Если ТекШаблон.ИспользованиеСерийниковПодбор > 0 Или ТекШаблон.ИспользованиеСерийниковПриемка > 0 Тогда
		Попытка УстановитьСерииВдокументе(Док); Исключение КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура УстановитьАвтора(Док, Автор, Шаблон) 
	
	Если Шаблон.НеИзменятьОтветственногоМенеджера Тогда
		Возврат;	
	КонецЕсли; 
	
	Попытка
		Док.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(Автор, Ложь);
	Исключение
	КонецПопытки;
	
	Попытка
		Док.Кассир = Справочники.Пользователи.НайтиПоНаименованию(Автор, Ложь);
	Исключение
	КонецПопытки;
	
	Попытка
		Док.Менеджер = Справочники.Пользователи.НайтиПоНаименованию(Автор, Ложь);
	Исключение
	КонецПопытки;
	
	Попытка
		Док.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию(Автор, Ложь);
	Исключение
	КонецПопытки;      	
	
КонецПроцедуры		

&НаСервереБезКонтекста
Функция УстановитьЕдиницу(СтрокаТЧ) 
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Штрихкоды.Упаковка КАК ЕИ,
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Код
	|	И (&ВсяНоменклатура
	|			ИЛИ Штрихкоды.Номенклатура = &Номенклатура)
	|	И (&ВсеХарактеристики
	|			ИЛИ Штрихкоды.Характеристика = &Характеристика)");
	
	Запрос.УстановитьПараметр("Код"				 , СтрокаТЧ.Штрихкод);
	Запрос.УстановитьПараметр("Номенклатура"	 , СтрокаТЧ.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика"	 , СтрокаТЧ.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ВсяНоменклатура"	 , СтрокаТЧ.Номенклатура.Пустая());
	Запрос.УстановитьПараметр("ВсеХарактеристики", СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТЧ.ЕдиницаИзмерения = Результат[0].ЕИ;
		
		Если СтрокаТЧ.Номенклатура.Пустая() Тогда
			СтрокаТЧ.Номенклатура = Результат[0].Номенклатура;
		КонецЕсли;
		
		Если СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая() Тогда
			СтрокаТЧ.ХарактеристикаНоменклатуры = Результат[0].Характеристика;
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция УстановитьСерииВдокументе(Док)
	
	МетаданныеДока = Док.Метаданные();
	ИмяДока = МетаданныеДока.Имя;
	
	Модуль_НоменклатураСервер = ОбщийМодуль("НоменклатураСервер");
	Если ИмяДока = "РасходныйОрдерНаТовары" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РасходныйОрдерНаТовары));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям); 	
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ОтгружаемыеТовары); 			
	ИначеЕсли ИмяДока = "СборкаТоваров" Тогда			
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.СборкаТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док,ПараметрыУказанияСерий.ТЧ);
	ИначеЕсли ИмяДока = "ЗаказНаСборку" Тогда			
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказНаСборку));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док,ПараметрыУказанияСерий.ТЧ);	
	ИначеЕсли ИмяДока = "ПриходныйОрдерНаТовары" Тогда			
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПриходныйОрдерНаТовары));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ОтборРазмещениеТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ОтборРазмещениеТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Отбор); 	
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Размещение);
	ИначеЕсли ИмяДока = "УпаковочныйЛист" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.УпаковочныйЛист));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли ИмяДока = "ПрочееОприходованиеТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПрочееОприходованиеТоваров));
		Попытка
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	 
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Серии);
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ВидыЗапасов);
		Исключение
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
		КонецПопытки;
	ИначеЕсли ИмяДока = "РеализацияТоваровУслуг" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РеализацияТоваровУслуг));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли ИмяДока = "ПоступлениеТоваровУслуг" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПоступлениеТоваровУслуг));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ПриобретениеТоваровУслуг" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПриобретениеТоваровУслуг));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли ИмяДока = "ПеремещениеТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПеремещениеТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 
	ИначеЕсли ИмяДока = "ВнутреннееПотреблениеТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВнутреннееПотреблениеТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 
	ИначеЕсли ИмяДока = "ВнутреннееПотребление" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВнутреннееПотребление));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 		
	ИначеЕсли ИмяДока = "ПересчетТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПересчетТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли ИмяДока = "ДвижениеПродукцииИМатериалов" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ДвижениеПродукцииИМатериалов));
		Попытка
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	 
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Серии);
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ВидыЗапасов);
		Исключение
			Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
		КонецПопытки;
	ИначеЕсли ИмяДока = "ПриемкаТоваровНаХранение" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПриемкаТоваровНаХранение));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли ИмяДока = "ОтгрузкаТоваровСХранения" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ОтгрузкаТоваровСХранения));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 
	ИначеЕсли ИмяДока = "ТТНИсходящаяЕГАИС" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ТТНИсходящаяЕГАИС));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли ИмяДока = "ЧекККМ" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЧекККМ));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ПроизводствоБезЗаказа" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПроизводствоБезЗаказа));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ВыходныеИзделия); 	
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ПобочныеИзделия);
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.МатериалыИРаботы);
	ИначеЕсли ИмяДока = "ВводОстатков" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВводОстатков));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ЗаказКлиента" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли ИмяДока = "ОрдерНаПеремещениеТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ОрдерНаПеремещениеТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ОрдерНаОтражениеИзлишковТоваров" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ОрдерНаОтражениеИзлишковТоваров));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли ИмяДока = "ПоступлениеТоваровНаСклад" Тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПоступлениеТоваровНаСклад));
		Модуль_НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);		
	КонецЕсли;
		
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект, ВидЦеныВШапке = Ложь)
	
	СтруктураЗаполненияЦены = Новый Структура;            
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
			СтруктураЗаполненияЦены.Вставить("Дата", Объект.ЗаказКлиента.Дата);
		Иначе
			СтруктураЗаполненияЦены.Вставить("Дата",   Объект.Дата);
		КонецЕсли;
	Иначе
		СтруктураЗаполненияЦены.Вставить("Дата",   Объект.Дата);
	КонецЕсли;
	
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	
	Если ВидЦеныВШапке Тогда
		СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект)
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",    Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",  Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНалогообложениеНДСПоУмолчанию(Организация, Контрагент, Соглашение, Дата = Неопределено, ЭтоПродажа = Истина, ПоставщикНеплательщик = Неопределено)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ПоставщикНеплательщик = Неопределено Тогда
		Неплательщик = ПоставщикНеплательщикНДС(Организация, Контрагент, Дата, ЭтоПродажа);
	Иначе
		Неплательщик = ПоставщикНеплательщик;
	КонецЕсли;
	
	Если Неплательщик Тогда
		Налогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		Если ЗначениеЗаполнено(Соглашение) Тогда
			Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
			Налогообложение = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "НалогообложениеНДС");
			Если НЕ ЗначениеЗаполнено(Налогообложение) Тогда
				Налогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;	
			КонецЕсли; 
		Иначе
			Налогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;	
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Налогообложение;
	
КонецФункции // ПолучитьНалогообложениеНДСПоУмолчанию()

&НаСервереБезКонтекста
Функция ПоставщикНеплательщикНДС(Организация, Контрагент, Дата = Неопределено, ЭтоПродажа = Истина)	
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ЭтоПродажа Тогда
		Если Не ЗначениеЗаполнено(Организация) Или ОрганизацияКонтрагентПлательщикНДС(Организация, Дата) Тогда
			Неплательщик = Ложь;
		Иначе
			Неплательщик = Истина;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Контрагент) Или ОрганизацияКонтрагентПлательщикНДС(Контрагент, Дата) Тогда
			Неплательщик = Ложь;
		Иначе
			Неплательщик = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Неплательщик;
	
КонецФункции // ПоставщикНеплательщикНДС()

&НаСервереБезКонтекста
Функция ОрганизацияКонтрагентПлательщикНДС(ОрганизацияКонтрагент, Дата = Неопределено)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
		Плательщик = ОрганизацияПлательщикНДС(ОрганизацияКонтрагент, Дата);
	ИначеЕсли ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Плательщик = КонтрагентПлательщикНДС(ОрганизацияКонтрагент);
	Иначе
		Плательщик = Ложь;
	КонецЕсли;
	
	Возврат Плательщик;
	
КонецФункции // ОрганизацияКонтрагентПлательщикНДС()

&НаСервереБезКонтекста
Функция ОрганизацияПлательщикНДС(Организация, Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат Справочники.Организации.ПлательщикНДС(Организация, Дата);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ОрганизацияПлательщикНДС()

&НаСервереБезКонтекста
Функция КонтрагентПлательщикНДС(Контрагент) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
		Возврат Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ПлательщикНДС");
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // КонтрагентПлательщикНДС()

&НаСервере
Функция ЗаполнитьУпаковочныеЛисты(ТекШаблон, ИсходныйДокумент, ЭтоНовыйДокумент)
	
	Если ЭтоНовыйДокумент Тогда
		ИсходныйДокумент.Записать(РежимЗаписиДокумента.Запись);	
	КонецЕсли;
	
	ТабличнуюЧастьПриЗагрузкеПодбор = ТекШаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ВидДокумента                    = ТекШаблон.ВидДокумента;
	ИмяТЧ                    		= ТекШаблон.ИмяТабличнойЧастиПодбор;
	ИсходныйДокументСсылка 			= ИсходныйДокумент.Ссылка;
	НомерПредыдущегоУпакЛиста 		= "";
	
	Для каждого СтрокаТЗ Из УпаковочныйЛистТЗ Цикл
		Если СтрокаТЗ.Количество = 0 Или ТабличнуюЧастьПриЗагрузкеПодбор = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		ДокументУпакЛиста = Документы.УпаковочныйЛист.НайтиПоРеквизиту("Код", (СтрокаТЗ.УпаковочныйЛистСтр));	
		
		Если ДокументУпакЛиста.Пустая() Тогда
			ДокументУпаковочногоЛистаТиповой = Документы.УпаковочныйЛист.СоздатьДокумент();	
			ДокументУпаковочногоЛистаТиповой.Дата = ТекущаяДата();
			ДокументУпаковочногоЛистаТиповой.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
			ДокументУпаковочногоЛистаТиповой.Код = СтрокаТЗ.УпаковочныйЛистСтр;
			ДокументУпаковочногоЛистаТиповой.СкладУпаковки = СтрокаТЗ.Склад;
			
			Если ВидДокумента = "РасходныйОрдерНаТовары" и ЗначениеЗаполнено(ИсходныйДокументСсылка) Тогда 
				Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
				Модуль_ПрефиксацияОбъектовКлиентСервер = ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
				РеквизитыОрдера = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокументСсылка, "Получатель, Номер");
				Основание = НСтр("ru = '%Получатель% / Ордер %Номер%'");
				Основание = СтрЗаменить(Основание,"%Получатель%",РеквизитыОрдера.Получатель);
				Основание = СтрЗаменить(Основание,"%Номер%",Модуль_ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОрдера.Номер));	
				ДокументУпаковочногоЛистаТиповой.Основание =  Основание;
			Иначе
				Попытка ДокументУпаковочногоЛистаТиповой.Основание = ИсходныйДокументСсылка; Исключение КонецПопытки;	
			КонецЕсли;
			
			ДокументУпаковочногоЛистаТиповой.Записать();	
			ДокументУпакЛиста = ДокументУпаковочногоЛистаТиповой.Ссылка;
		КонецЕсли;
		
		Если СтрокаТЗ.УпаковочныйЛистСтр <> НомерПредыдущегоУпакЛиста Тогда
			ДокументУпакЛистаОбъект = ДокументУпакЛиста.ПолучитьОбъект();
			КопияТЧ = ДокументУпакЛистаОбъект.Товары;	
			
			Если ТабличнуюЧастьПриЗагрузкеПодбор = 2 Тогда
				ДокументУпакЛистаОбъект.Товары.Очистить();
			ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда
				Для каждого СтрокаТЧКопии Из КопияТЧ Цикл
					СтрокаТЧКопии.Количество 			= 0;
					СтрокаТЧКопии.КоличествоУпаковок    = 0;
				КонецЦикла; 
			КонецЕсли;	
		КонецЕсли;
				
		Попытка 
			ДокументУпакЛистаОбъект.Упаковал = ИсходныйДокументСсылка.Ответственный; 
		Исключение
			Попытка ДокументУпакЛистаОбъект.Упаковал = ИсходныйДокументСсылка.Менеджер; Исключение КонецПопытки;	
		КонецПопытки;

		лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия,Упаковка",СтрокаТЗ.Номенклатура,СтрокаТЗ.Характеристика,СтрокаТЗ.Серия,СтрокаТЗ.Упаковка);
		СтрокиПоиска = КопияТЧ.НайтиСтроки(лСтруктураПоиска);
		
		Если СтрокиПоиска.Количество() = 0 Тогда			
			СтрокаТабличнойЧастиТиповойЛист = ДокументУпакЛистаОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиТиповойЛист, СтрокаТЗ,, "КоличествоУпаковок, Количество");
		Иначе	
			СтрокаТабличнойЧастиТиповойЛист = СтрокиПоиска[0];
		КонецЕсли;
			
		Коэффициент = ВернутьКоэффициент(СтрокаТЗ.Номенклатура, СтрокаТЗ.Упаковка);
		
		СтрокаТабличнойЧастиТиповойЛист.КоличествоУпаковок = СтрокаТабличнойЧастиТиповойЛист.КоличествоУпаковок + СтрокаТЗ.Количество;
		СтрокаТабличнойЧастиТиповойЛист.Количество = СтрокаТабличнойЧастиТиповойЛист.КоличествоУпаковок * Коэффициент;
		
		ДокументУпакЛистаОбъект.Записать();
		УстановитьСерииВдокументе(ДокументУпакЛистаОбъект);
		ДокументУпакЛистаОбъект.Записать();
		
		Попытка 
			ДокументУпакЛистаОбъект.Записать(РежимЗаписиДокумента.Проведение); 
		Исключение
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'Проведение упак.листа.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки); 
		КонецПопытки;	
		
		Если ВидДокумента = "РасходныйОрдерНаТовары" и ЗначениеЗаполнено(ИсходныйДокументСсылка) Тогда
			лСтруктураПоискаРасх = Новый Структура("Номенклатура,Характеристика,Серия,Упаковка, УпаковочныйЛистРодитель",СтрокаТЗ.Номенклатура,СтрокаТЗ.Характеристика,СтрокаТЗ.Серия,СтрокаТЗ.Упаковка, ДокументУпакЛистаОбъект.Ссылка);
			СтрокиПоискаРасх = ИсходныйДокумент[ИмяТЧ].НайтиСтроки(лСтруктураПоискаРасх);
			
			Если СтрокиПоискаРасх.Количество() = 0 Тогда
				лСтруктураПоискаРасх.Удалить("УпаковочныйЛистРодитель");
				СтрокиПоискаРасх = ИсходныйДокумент[ИмяТЧ].НайтиСтроки(лСтруктураПоискаРасх);	
			КонецЕсли;
			
			Если СтрокиПоискаРасх.Количество() > 0 Тогда
				СтрокиПоискаРасх[0].УпаковочныйЛистРодитель = ДокументУпакЛистаОбъект.Ссылка;
				
				лСтруктураПоискаУпакЛистов = Новый Структура("УпаковочныйЛист",ДокументУпакЛистаОбъект.Ссылка);
				СтрокиПоискаУпаковочныхЛистов = ИсходныйДокумент[ИмяТЧ].НайтиСтроки(лСтруктураПоискаУпакЛистов);
				Если СтрокиПоискаУпаковочныхЛистов.Количество()=0 и ЗначениеЗаполнено(ДокументУпакЛистаОбъект.Ссылка) Тогда
					СтрокаТабличнойЧастиУпакЛиста = ИсходныйДокумент[ИмяТЧ].Добавить();
					СтрокаТабличнойЧастиУпакЛиста.УпаковочныйЛист = ДокументУпакЛистаОбъект.Ссылка;
					СтрокаТабличнойЧастиУпакЛиста.ЭтоУпаковочныйЛист = Истина;
					Если (ИсходныйДокумент.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Или ИсходныйДокумент.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке) Тогда
						СтрокаТабличнойЧастиУпакЛиста.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
					Иначе
						СтрокаТабличнойЧастиУпакЛиста.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
					КонецЕсли;
					СтрокаТабличнойЧастиУпакЛиста.Количество  =  1;
					СтрокаТабличнойЧастиУпакЛиста.КоличествоУпаковок = 1;				
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		НомерПредыдущегоУпакЛиста = СтрокаТЗ.УпаковочныйЛистСтр;
		
	КонецЦикла;
		
КонецФункции  

Функция ВернутьКоэффициент(Номенклатура, ЕдиницаИзмерения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товар", Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаИЗмерения", ЕдиницаИзмерения);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УпаковкиНоменклатуры.Знаменатель=0 ИЛИ УпаковкиНоменклатуры.Числитель=0 ТОГДА 1
	|		ИНАЧЕ
	|				ЕСТЬNULL(УпаковкиНоменклатуры.Числитель/УпаковкиНоменклатуры.Знаменатель,1)
	|		КОНЕЦ КАК Коэффициент	 
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	И УпаковкиНоменклатуры.Владелец = &Товар";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		Возврат Выборка.Коэффициент;		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции

&НаСервере
Процедура ПерезаписьСкладаДокументаДвижениеПродукцииИМатериалов(Док, ЗагруженныйСклад, ЗагруженныйСклад2)

	ХозяйственнаяОперация = Док.ХозяйственнаяОперация;	

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		Док.Отправитель = ЗагруженныйСклад;
		Если ЗначениеЗаполнено(ЗагруженныйСклад2) Тогда
			Док.Получатель = ЗагруженныйСклад2;
		Иначе
			Док.Получатель = ЗагруженныйСклад;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДанныеДокументаПодВыборОрганизации(Док, НовЗнач, ИмяДока);
	
	Если НовЗнач.Реквизит = "Организация" И ИмяДока = "ВводОстатковТоваров" Тогда
		ПараметрыЗаполнения = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(Док);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Док.НалогообложениеНДС, ПараметрыЗаполнения);		
	КонецЕсли;
	
КонецПроцедуры	
	
#КонецОбласти

&НаКлиенте
Процедура ПериодичностьОбновленияПриИзменении(Элемент)
	
	Если ПериодичностьОбновления <> 0 Тогда
		ЗапуститьОбработчикОжиданияОбновление();
	Иначе
		ОтключитьОбработчикОжиданияОбновление();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьЗагрузкиПриИзменении(Элемент)
	
	Если ПериодичностьЗагрузки <> 0 Тогда
		ЗапуститьОбработчикОжиданияЗагрузка();
	Иначе
		ОтключитьОбработчикОжиданияЗагрузка();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзСписка_СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыборНачалоВыбора(ВыбЭлемент, ДопПараметры) Экспорт
	
	Код = ДопПараметры.Код;
	СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = ВыбЭлемент;
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Не изменять" Тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодбор = 0;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Дополнять" Тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодбор = 1;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Заменять" Тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодбор = 2;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Изменять" Тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодбор = 3;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Изменять только подобранные" Тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПодбор = 5;	
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзСписка_СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыборНачалоВыбора(ВыбЭлемент, ДопПараметры) Экспорт
	
	Код = ДопПараметры.Код;
	СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = ВыбЭлемент;
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Не изменять" Тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемка = 0;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Дополнять" Тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемка = 1;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Заменять" Тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемка = 2;
		ИначеЕсли СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Изменять" Тогда
			СписокФайлов[Код].ТабличнуюЧастьПриЗагрузкеПриемка = 3;	
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "СписокФайлов"
//
// Параметры:
//  Элемент          – <ТабличноеПоле>
//                   - Табличное поле ("СписокФайлов"), с которым связано данное событие.
//
//  ОформлениеСтроки – <ОформлениеСтроки> 
//                   – содержит оформление строки (шрифт, цвет) 
//                     и коллекцию оформлений ячеек
//
//  ДанныеСтроки     - <СтрокаТаблицыЗначений>
//                   - данные выводимой строки. Параметр соответствует свойству 
//                     "ТекущиеДанные" для выводимой строки
//
&НаКлиенте
Процедура СписокФайловПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	лЗначение = Элемент.Колонки.ТабличнуюЧастьПриЗагрузке.ЭлементУправления.СписокВыбора[ДанныеСтроки.ТабличнуюЧастьПриЗагрузке];
	ОформлениеСтроки.Ячейки.ТабличнуюЧастьПриЗагрузке.Текст = лЗначение.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловДокументНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Документ = Результат;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Не СоединениеСFTPКорректно И ТипОбмена = "1" Тогда
		СообщитьОНеудачномСоединенииСFTP();
		Возврат;
	КонецЕсли;  
	
	Если ТипОбмена = "2" Тогда
		ОчиститьКаталогВременныхФайлов();
	КонецЕсли;	
	
	ЗапомнитьТекущееЗначениеТСДКлиент();
	Попытка ПрочитатьШаблоны(); Исключение КонецПопытки;
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Попытка ЭтоПечать = Команда.Имя = "ОтправитьНаПечать"; Исключение ЭтоПечать = Ложь; КонецПопытки;

	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		
		лТекущаяСтрока=Элементы.СписокФайлов.ТекущиеДанные;
		
		Если лТекущаяСтрока = Неопределено Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не выбран файл-документ для загрузки!";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если Элементы.СписокФайлов.ВыделенныеСтроки.Количество() > 0 Тогда
			
			Код = СписокФайлов.Индекс(лТекущаяСтрока);
			тхт = Новый ТекстовыйДокумент();
			
			Если ТипОбмена = "1" Тогда			
				
				Если FTP = Неопределено Тогда
					FTP = ПодключитьсяКFTPСерверу();
				КонецЕсли;		
				
				FTP.УстановитьТекущийКаталог("/");
				ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
				FTP.Получить(лТекущаяСтрока.Файл, ВременныйФайл);
				тхт.НачатьЧтение(Новый ОписаниеОповещения("ЗагрузитьЗавершение_ОбработкаОповещения", ЭтаФорма, Новый Структура("FTP, ВременныйФайл, Код, Файл, Шаблон, тхт, ЗагрузитьВсе, ЭтоПечать", FTP, ВременныйФайл, Код, лТекущаяСтрока.Файл, лТекущаяСтрока.Шаблон, тхт, Ложь, ЭтоПечать)), ВременныйФайл, "windows-1251");
				Возврат;
				
			ИначеЕсли ТипОбмена = "0" ИЛИ ТипОбмена = "2" Тогда	
				
				тхт.НачатьЧтение(Новый ОписаниеОповещения("ЗагрузитьЗавершение_ОбработкаОповещения", ЭтаФорма, Новый Структура("FTP, Код, Файл, Шаблон, тхт, ЗагрузитьВсе, ТСД, ЭтоПечать", FTP, Код, лТекущаяСтрока.Файл, лТекущаяСтрока.Шаблон, тхт, Ложь, лТекущаяСтрока.ТСД, ЭтоПечать)), лТекущаяСтрока.Файл, "windows-1251");
				Возврат;    
										
			КонецЕсли;
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не выбран файл-документ для загрузки!";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Команда = "ЗагрузитьВсе" Тогда
		
		Если СписокФайлов.Количество() > 0 Тогда
			СтуктураФайла = Новый Структура();
			СтуктураФайла.Вставить("Файл", СписокФайлов[0].Файл);
			СтуктураФайла.Вставить("Код", СписокФайлов.Индекс(СписокФайлов[0]));
			СтуктураФайла.Вставить("Шаблон", СписокФайлов[0].Шаблон);		
		Иначе
			Возврат;
		КонецЕсли;	
		
		Код = СтуктураФайла.Код;
		тхт = Новый ТекстовыйДокумент();
		
		Если ТипОбмена = "1" Тогда
			Если FTP = Неопределено Тогда
				FTP = ПодключитьсяКFTPСерверу();
			КонецЕсли;				
			FTP.УстановитьТекущийКаталог("/");
			ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
			FTP.Получить(СтуктураФайла.Файл, ВременныйФайл);
			тхт.НачатьЧтение(Новый ОписаниеОповещения("ЗагрузитьЗавершение_ОбработкаОповещения", ЭтаФорма, Новый Структура("FTP, ВременныйФайл, Код, Файл, Шаблон, тхт, ЗагрузитьВсе", FTP, ВременныйФайл, Код, СтуктураФайла.Файл, СтуктураФайла.Шаблон, тхт, Истина)), ВременныйФайл);
			Возврат;
			
		ИначеЕсли ТипОбмена = "0" ИЛИ ТипОбмена = "2" Тогда	
			тхт.НачатьЧтение(Новый ОписаниеОповещения("ЗагрузитьЗавершение_ОбработкаОповещения", ЭтаФорма, Новый Структура("FTP, Код, Файл, Шаблон, тхт, ЗагрузитьВсе", FTP, Код, СтуктураФайла.Файл, СтуктураФайла.Шаблон, тхт, Истина)), СтуктураФайла.Файл);
			Возврат;
		КонецЕсли;			
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	
    МассивУдаляемыхСтрок = Элементы.СписокФайлов.ВыделенныеСтроки; 
    КоличествоСтрок = МассивУдаляемыхСтрок.Количество();      
	
	Если ТипОбмена = "1" Тогда
		Если FTP = Неопределено Тогда
			FTP = ПодключитьсяКFTPСерверу();
		КонецЕсли;		
		FTP.УстановитьТекущийКаталог("/");
	КонецЕсли;	
		
    Для Сч = 1 По КоличествоСтрок Цикл
        НайденнаяСтрока = СписокФайлов.НайтиПоИдентификатору(МассивУдаляемыхСтрок[0]);  
		
		Если ТипОбмена = "1" Тогда		
			Если FTP.НайтиФайлы(НайденнаяСтрока.Файл).Количество() > 0 Тогда //файл уже есть на FTP, надо удалить
				FTP.Удалить(НайденнаяСтрока.Файл);
			КонецЕсли;
			
		ИначеЕсли ТипОбмена = "0" Тогда	
			НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), НайденнаяСтрока.Файл);
		КонецЕсли;	
		
		СписокФайлов.Удалить(НайденнаяСтрока); 
    КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиОбновлятьСписокДокументовПриИзменении(Элемент)
	
	Элементы.ПериодичностьОбновления.Видимость = АвтоматическиОбновлятьСписокДокументов;
	
	Если АвтоматическиОбновлятьСписокДокументов Тогда
		ЗапуститьОбработчикОжиданияОбновление();
	Иначе	
		ОтключитьОбработчикОжиданияОбновление();		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиЗагружатьСписокДокументовПриИзменении(Элемент)
	
	Элементы.ПериодичностьЗагрузки.Видимость = АвтоматическиЗагружатьСписокДокументов;
	
	Если АвтоматическиЗагружатьСписокДокументов Тогда	
		ЗапуститьОбработчикОжиданияЗагрузка();
	Иначе	
		ОтключитьОбработчикОжиданияЗагрузка();
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СписокФайловДокумент"
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода ("СписокФайловДокумент"), с которым связано данное событие.
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
&НаКлиенте
Процедура СписокФайловДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	
	Если ТекущиеДанные.Документ = Неопределено Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = ОпределитьТипДока(ТекущиеДанные.Документ);
	
	Если ИмяДокумента = Неопределено Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
		
	// Ссылка на конкретный документ 1С
	Если ТипЗнч(ТекущиеДанные.Документ) <> Тип("Строка") Тогда     
		ИмяДокумента = ОпределитьТипДока(ТекущиеДанные.Документ);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокФайловДокументНачалоВыбораЗавершение", ЭтаФорма);		
		ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаВыбора",, ЭтаФорма,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе // Шаблон документа 1С		
		Если СокрЛП(ТекущиеДанные.Документ) = "" Тогда
			СтандартнаяОбработка = Истина;
			Возврат;
		КонецЕсли;	
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СписокФайловДокументНачалоВыбораЗавершение", ЭтаФорма);		
		ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаВыбора",,,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Не изменять");
	Список.Добавить("Дополнять");
	Список.Добавить("Заменять");
	Список.Добавить("Изменять");
	Список.Добавить("Изменять только подобранные");
	
	Код = СписокФайлов.Индекс(Элементы.СписокФайлов.ТекущиеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВыборИзСписка_СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыборНачалоВыбора", ЭтаФорма, Новый Структура("Код", Код));
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Не изменять");
	Список.Добавить("Дополнять");
	Список.Добавить("Заменять");
	Список.Добавить("Изменять");
	
	Код = СписокФайлов.Индекс(Элементы.СписокФайлов.ТекущиеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВыборИзСписка_СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыборНачалоВыбора", ЭтаФорма, Новый Структура("Код", Код));
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыбор);
	
КонецПроцедуры        

&НаКлиенте
Процедура ОтправитьНаПечать(Команда)
	
	Загрузить(Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЗагрузки_Страница_НовыеТовары

&НаКлиенте
Процедура КоманднаяПанельНовыеТоварыВыделитьВсе(Кнопка)
	
	Для каждого СтрокаНовыеТовары Из НовыеТоварыШтрихкоды Цикл
		СтрокаНовыеТовары.Обрабатывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельНовыеТоварыСнятьВыделитьВсе(Кнопка)
	
	Для каждого СтрокаНовыеТовары Из НовыеТоварыШтрихкоды Цикл
		СтрокаНовыеТовары.Обрабатывать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьновыеТовары(Команда)

	
	Если ТипОбмена = "2" Или ТипОбмена = "0" Тогда
		ОчиститьКаталогВременныхФайлов();
	Иначе
		Если Не СоединениеСFTPКорректно Тогда
			СообщитьОНеудачномСоединенииСFTP();
			Возврат;
		КонецЕсли;   
	КонецЕсли;
	
	НовыеТоварыШтрихкоды.Очистить();
	
	//корневая папка:
	ЗаполнитьСписокТоваровШтрихкодов("");
	
	//по списку ТСД:	
	Для каждого СтрокаТСД Из СписокТСД Цикл 
		ЗаполнитьСписокТоваровШтрихкодов(СтрокаТСД.ТСД);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТоварыШтрихкоды(Команда)
	
	Атрибуты = ПолучитьАтрибуты();
	
	Если ТипОбмена = "1" Тогда
		Если Не СоединениеСFTPКорректно Тогда
			СообщитьОНеудачномСоединенииСFTP();
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Для каждого СтрокаТаблицы Из НовыеТоварыШтрихкоды Цикл
		
		Если СтрокаТаблицы.Обрабатывать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			НоменклатураНовая = СоздатьНоменклатуру(СтрокаТаблицы.Штрихкод, СтрокаТаблицы.НовоеНаименование);
			
			СтрокаТаблицы.Номенклатура = НоменклатураНовая[0].Значение;
			Попытка ЗаменитьГУИДШК(ИДТСД, СтрокаТаблицы.ИдентификаторТовара, СтрокаТаблицы.Номенклатура.УникальныйИдентификатор()); Исключение КонецПопытки; 
		Иначе
			ПривязатьШтрихкодыНаКлиенте(ИДТСД, СтрокаТаблицы);
		КонецЕсли;
		
		// установка значений атрибутов
		ТекстОшибки = "";
		СтруктураСтроки = Новый Структура("Номенклатура, attr_1, attr_2, attr_3, attr_4, attr_5, attr_6, attr_7, attr_8, attr_9, attr_10");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТаблицы);
		УстановитьЗначенияАтрибутов(Атрибуты, СтруктураСтроки, ТекстОшибки);
		
		Если Не ТекстОшибки = "" Тогда
			ПоказатьСообщениеПользователю(ТекстОшибки, Ложь);
		КонецЕсли;
		
		// корректировка/удаление файла загрузки
		Если ТипОбмена = "1" Тогда
			
			Если FTP = Неопределено Тогда
				FTP = ПодключитьсяКFTPСерверу();
			КонецЕсли;				
			FTP.УстановитьТекущийКаталог("/");
			
			Если FTP.НайтиФайлы(СтрокаТаблицы.ИмяФайлаШтрихкода).Количество() > 0 Тогда
				тхт = Новый ТекстовыйДокумент();
				ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
				FTP.Получить(СтрокаТаблицы.ИмяФайлаШтрихкода, ВременныйФайл);
				тхт.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма), ВременныйФайл, "windows-1251");	
				НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ВременныйФайл);
				
				Для НомСтр = 1 По тхт.КоличествоСтрок() Цикл 
					ТекущаяСтрока = ОбработатьЭкранированиеСтроки(тхт.ПолучитьСтроку(НомСтр));
					СтрокаПоиска = Найти(ТекущаяСтрока, СтрокаТаблицы.Штрихкод);
					
					Если СтрокаПоиска > 0 Тогда
						тхт.УдалитьСтроку(НомСтр);
					КонецЕсли;	
				КонецЦикла;
				
				Если тхт.КоличествоСтрок() = 0 Тогда
					FTP.Удалить(СтрокаТаблицы.ИмяФайлаШтрихкода);
				Иначе
					ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
					тхт.Записать(ВременныйФайл);		
					FTP.Записать(ВременныйФайл, СтрокаТаблицы.ИмяФайлаШтрихкода);
					НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ВременныйФайл);
				КонецЕсли;			
			КонецЕсли;
			
			// товары 
			тхтТовара = Новый ТекстовыйДокумент();
			ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
			FTP.Получить(СтрокаТаблицы.ИмяФайлаТовара, ВременныйФайл);
			тхтТовара.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма), ВременныйФайл, "windows-1251");	
			НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ВременныйФайл);
			
			Для НомСтр = 1 По тхтТовара.КоличествоСтрок() Цикл 
				ТекущаяСтрока = ОбработатьЭкранированиеСтроки(тхтТовара.ПолучитьСтроку(НомСтр));
				СтрокаПоиска = Найти(ТекущаяСтрока, СтрокаТаблицы.ИдентификаторТовара);
				
				Если СтрокаПоиска > 0 Тогда
					тхтТовара.УдалитьСтроку(НомСтр);
				КонецЕсли;	
			КонецЦикла;
			
			Если тхтТовара.КоличествоСтрок() = 0 Тогда
				FTP.Удалить(СтрокаТаблицы.ИмяФайлаТовара);
			Иначе
				ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
				тхтТовара.Записать(ВременныйФайл);		
				FTP.Записать(ВременныйФайл, СтрокаТаблицы.ИмяФайлаТовара);
				НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ВременныйФайл);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТипОбмена = "1" Тогда
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Обрабатывать", Истина);
		
		МассивСтрок = НовыеТоварыШтрихкоды.НайтиСтроки(СтруктураПоиска);
		ПривязатьУдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(МассивСтрок, Новый Структура, СтрокаТаблицы.ИДТСД);		
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьСписокТоваровШтрихкодов(ИДТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельНовыеТоварыУдалить(Кнопка)
	
	Если Не СоединениеСFTPКорректно Тогда
		СообщитьОНеудачномСоединенииСFTP();
		Возврат;
	КонецЕсли;
	
	УдалитьНовыеТоварыШтрихкоды();
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область События_Страницы_Настройки

&НаКлиенте
Процедура НастроитьСертификаты(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаСертификатовДляАвтоматическогоОбменаИС");
	
КонецПроцедуры

&НаКлиенте
Процедура лКаталогНастроекПриИзменении(Элемент)
	
	Если лКаталогНастроек <> "" Тогда
		лКаталогНастроек = СокрЛП(лКаталогНастроек) + ?(Прав(СокрЛП(лКаталогНастроек), 1) = РазделительПути, "", РазделительПути);
	КонецЕсли;
	
	ПрочитатьНастройкиШаблонов();
	ПрочитатьНастройкиПользователей();
	ПрочитатьШаблоны();
	
КонецПроцедуры

&НаКлиенте
Процедура лКаталогНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Новый ОписаниеОповещения("лКаталогНастроекНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура лКаталогОбменаПриИзменении(ПриОткрытии = Ложь)	
	
	НовыеТоварыШтрихкоды.Очистить();
	
	Если ТипОбмена = "1" Тогда
		КаталогFTPПриИзменении(ПриОткрытии);
		Если КаталогFTPДоступен Тогда
			ЗаполнитьСписокФайлов();
		КонецЕсли; 
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если лКаталогОбмена <> "" Тогда
			лКаталогОбмена = СокрЛП(лКаталогОбмена) + ?(Прав(СокрЛП(лКаталогОбмена), 1) = РазделительПути, "", РазделительПути); 
		КонецЕсли;
		
		СписокТСД.Очистить();
		
		ПараметрыВыгрузки = Новый Структура();
		ПараметрыВыгрузки.Вставить("КаталогОбмена", лКаталогОбмена + "DataMobile" + ?(Прав(СокрЛП(лКаталогОбмена + "DataMobile"), 1) = РазделительПути, "", РазделительПути));
		
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачалоПоискаКаталоговОбмена_Завершение", ЭтаФорма, ПараметрыВыгрузки), лКаталогОбмена + "DataMobile", "*");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура лКаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовыеТоварыШтрихкоды.Очистить();
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Новый ОписаниеОповещения("лКаталогОбменаНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Диалог, Элемент", Диалог, Элемент)));
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбменаПриИзменении(Элемент)
	
	РазделительПути = DM_ПолучитьРазделительПути();
	НовыеТоварыШтрихкоды.Очистить();
	
	Если ТипОбмена = "1" Тогда
		СоединениеСFTPКорректно = Истина;
		
	ИначеЕсли ТипОбмена = "2" Тогда
		ПапкаПриложения();
		ПроверитьСвязьЯндексДискНажатие(Неопределено);		
	КонецЕсли;	
	
	ЗапомнитьТекущееЗначениеТСДКлиент();	
	ВидимостьЭлементовНастройки();	
		
КонецПроцедуры

&НаКлиенте
Процедура FTPАдресПриИзменении(Элемент)
	
	СоединениеСFTPКорректно = Ложь;
	ИДТСД = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСвязьНажатие(Элемент)
	
	#Если ВебКлиент Тогда 
		
		ПоказатьСообщениеПользователю("FTPСоединение не доступно в облаке.");
		
	#Иначе	

		СоединениеСFTPКорректно = Истина; 	
		
		ЗапомнитьТекущееЗначениеТСДКлиент();		
		КаталогFTPПриИзменении(Ложь);	 
				
		Если СоединениеСFTPКорректно Тогда
			ПоказатьСообщениеПользователю("Соединение с FTP-сервером установлено");
		КонецЕсли;     
		
	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьQRкод(Команда)
	
	Порт        		= Формат(FTPПорт, "ЧГ=0");
	ОчищатьСправочники 	= ?(ОчищатьСправочникиНаТСД, 1, 0);;
	
	//OfflineSettings;1;1;192.168.1.71;21;tsduser;123;1 - первые 2 параметра: это разрешить повторную выгрузкку документа и включать в путь серийный номер
	
	QRТекст 	= "OfflineSettings;" + "1;1;" + FTPАдрес + ";" + Порт + ";" + FTPЛогин + ";" + FTPПароль + ";" + ОчищатьСправочники;	
	
	СтруктураПроверяемыхРеквизитов = Новый Структура;
	СтруктураПроверяемыхРеквизитов.Вставить("Адрес"	, 	FTPАдрес);
	СтруктураПроверяемыхРеквизитов.Вставить("Порт"	, 	Порт);
	СтруктураПроверяемыхРеквизитов.Вставить("Логин"	,	FTPЛогин);
	СтруктураПроверяемыхРеквизитов.Вставить("Пароль", 	FTPПароль);
	
	МассивНеЗаполненных = Новый Массив;
	
	Для каждого СтрокаМассива Из СтруктураПроверяемыхРеквизитов Цикл
		Если Не ЗначениеЗаполнено(СтрокаМассива.Значение) Тогда
			МассивНеЗаполненных.Добавить(СтрокаМассива.Ключ);	
		КонецЕсли; 	
	КонецЦикла; 
	
	Если МассивНеЗаполненных.Количество() <> 0 Тогда
		Для каждого СтрокаНеЗаполненных Из МассивНеЗаполненных Цикл
			Сообщить("Параметр " + СтрокаНеЗаполненных + " не заполнен!" + Символы.ПС);	
		КонецЦикла;
		ВывестиQRКод("");
	Иначе
		ВывестиQRКод(QRТекст);	
	КонецЕсли;
	
КонецПроцедуры

#Область НастройкиЯндексДиск

&НаКлиенте
Процедура ПроверитьСвязьЯндексДискНажатие(Элемент)
	
	Если Элемент <> Неопределено Тогда
		СписокТСД.Очистить();
	КонецЕсли;

	СоединениеСЯндексДискКорректно = Истина; 
	
	ЗапомнитьТекущееЗначениеТСДКлиент();
	
	Если ИДТСД = Неопределено Тогда
		ИДТСД = "";	
	КонецЕсли;	
		
	Если НЕ ИДТСД = "" Тогда
		ТекущееРасположение = "app:/" + ИДТСД;
	Иначе
		ТекущееРасположение =  "app:/";
	КонецЕсли;
	
	СтруктураОтвета = ПроверитьПодключениеЯндексДиск(ТекущееРасположение, ИДТСД);
	 
	СоединениеСЯндексДискКорректно = СтруктураОтвета.Результат;
	
	Если СоединениеСЯндексДискКорректно Тогда 
		
		Если СписокТСД.Количество( ) > 0 Тогда
			
			ВосстановитьЗначениеТСДКлиент();
			ПрочитатьНастройкиТСД();  		
			
			Попытка
				Структура = Новый Структура;
				ТекПозиция = СписокТСД.НайтиСтроки(Новый Структура("ТСД", СтрЗаменить(ИДТСД, РазделительПути, "")));
				Если ТекПозиция.Количество() Тогда
					Элементы.СписокТСД.ТекущаяСтрока = ТекПозиция[0].НомерСтроки;
					ИДТСД = ТекПозиция[0].ТСД;
				КонецЕсли;
			Исключение	
				Элементы.СписокТСД.ТекущаяСтрока = СписокТСД[0].НомерСтроки;
				Если ЗначениеЗаполнено(СписокТСД[0].Наименование) Тогда
					ИДТСД = СписокТСД[0].Наименование;
				Иначе	
					ИДТСД = СписокТСД[0].ТСД;
				КонецЕсли;	
			КонецПопытки
			
		КонецЕсли;     
		
		Если СтруктураОтвета.ТребуетсяСозданиеКаталогов Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСозданияКаталоговОбменаНаЯндексДиск_Завершение", ЭтаФорма, СтруктураОтвета.ДопПараметры);	
			ТекстВопроса = "Папки обмена на Яндекс.Диск не существуют Или не содержат необходимых подпапок. Создать?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
		Иначе
			Если Элемент <> Неопределено Тогда
				ПоказатьСообщениеПользователю("Соединение с Яндекс.Диск установлено");	
			КонецЕсли;
		КонецЕсли;		
	Иначе
		СообщитьОНеудачномСоединенииСЯндексДиск();
	КонецЕсли; 
		
КонецПроцедуры 

&НаКлиенте
Процедура КодАвторизации(Команда)  
	
	ПараметрыОткрытия = Новый Структура("IDПриложения", ЯндексДискIDПриложения);
	ОткрытьФорму(ПолноеИмяОбъекта+".Форма.ФормаАвторизации", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Токен(Команда)
	
	ПолучениеТокена();  
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьQRКодТокена(Команда)
	
	Если ЗначениеЗаполнено(ЯндексДискТокен) Тогда
		ВывестиQRКод(ЯндексДискТокен);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбменыДанными

#Область Обмен_FTP

// Функция разбирает данные о документе из файла и осуществляет его поиск в БД
//
// Параметры:
//  ИмяФайла - имя текущего файла с данными из ТСД
//
// Возвращаемое значение:
//  лОтвет - структура данных документа из файла для заполнения таблицы списка файлов
//
&НаКлиенте
Функция НайтиДокумент(ДопПараметры)
	
	тхт = ДопПараметры.тхт;
	
	СтрокаДока = тхт.ПолучитьСтроку(1); //<ВнутреннийИдентификаторДокумента>;<НомерДокумента>;<КомментарийДокумента>;<ИдентификаторДокумента>;<ТипДокумента>;<Контрагент>;<Идентификатор ТСД>;<Склад>
	СтрокаДока = СтрЗаменить(СтрокаДока, ";", Символы.ПС);
	
	Если СокрЛП(СтрПолучитьСтроку(СтрокаДока,1)) = "doc_forms" Тогда
		СтрокаДока = тхт.ПолучитьСтроку(2);
		СтрокаДока = СтрЗаменить(СтрокаДока, ";", Символы.ПС);
	КонецЕсли;
	
	ИдентификаторДокумента = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока,4), "[59]", ";");
	УИ = СокрЛП(стрЗаменить(ИдентификаторДокумента, "dk8#", ""));
	ТипДокумента = СтрЗаменить(СокрЛП(СтрПолучитьСтроку(СтрокаДока,5)), "[59]", ";");
	
	Если ТипЗнч(ШаблоныДокументов) = Тип("ДанныеФормыКоллекция") Тогда
		Если ШаблоныДокументов.Количество() = 0 Тогда
			ФайлТЗ = Новый ТекстовыйДокумент;
			ЗагрузитьДанныеШаблоны(ФайлТЗ.ПолучитьТекст());	
		КонецЕсли;	
	КонецЕсли;	 
	
	Если ШаблоныДокументов = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найдены шаблоны. 
		|Для их создания воспользуйтесь обработкой выгрузки!";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
		
	Cтр = ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента", ТипДокумента));
	
	Если Cтр.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		
		Если ДопПараметры.Свойство("ТекущееИмяФайла") Тогда
			Сообщение.Текст = "Для файла обмена ''" + ДопПараметры.ТекущееИмяФайла + "'' не найден шаблон, тип: (" + ТипДокумента+"). 
			|Для его создания воспользуйтесь обработкой выгрузки!"; 
		Иначе
			Сообщение.Текст = "Для файла обмена не найден шаблон, тип: (" + ТипДокумента+"). 
			|Для его создания воспользуйтесь обработкой выгрузки!";	
		КонецЕсли;
	
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;  
	
	Док = ПолучитьСсылкуНаДокумент(Cтр[0].ВидДокумента, УИ);
	
	Если Док = Неопределено Тогда
		Док = Cтр[0].ВидДокумента;	
	КонецЕсли;	
	
	лОтвет = Новый Структура();
	лОтвет.Вставить("ИспользоватьПодбор"              , Cтр[0].ИспользоватьПодбор);
	лОтвет.Вставить("ИспользоватьПриемку"             , Cтр[0].ИспользоватьПриемку);
	лОтвет.Вставить("ИмяТабличнойЧастиПодбор"         , Cтр[0].ИмяТабличнойЧастиПодбор);
	лОтвет.Вставить("ИмяТабличнойЧастиПриемка"        , Cтр[0].ИмяТабличнойЧастиПриемка);
	лОтвет.Вставить("ШаблонИмя"                       , Cтр[0].ТипДокумента);
	лОтвет.Вставить("ТабличнуюЧастьПриЗагрузкеПодбор" , Cтр[0].ТабличнуюЧастьПриЗагрузкеПодбор);
	лОтвет.Вставить("ТабличнуюЧастьПриЗагрузкеПриемка", Cтр[0].ТабличнуюЧастьПриЗагрузкеПриемка);
	лОтвет.Вставить("Документ"                        , Док); 	
	
	Возврат лОтвет;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаДокумент(ВидДокумента, УИ)

	Попытка
		Док = Документы[ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(УИ));	
		Если Док.ПолучитьОбъект() = Неопределено Тогда
			Док = ВидДокумента;
		КонецЕсли;
		Возврат Док; 
	Исключение
		Возврат Неопределено;
	КонецПопытки;	

КонецФункции

&НаКлиенте
Процедура ОбходМассиваФайловFTP_Завершение(Док, ДополнительныеПараметры)
	
	Если Док = Неопределено Тогда Возврат; КонецЕсли;			
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Файл", ДополнительныеПараметры.ПолноеИмя);
	МассивСтрока = СписокФайлов.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрока.Количество() = 0 Тогда
		СтрокаФайл = СписокФайлов.Добавить();
	Иначе
		СтрокаФайл = МассивСтрока[0];
	КонецЕсли;
	
	СтрокаФайл.Файл = ДополнительныеПараметры.ПолноеИмя;
	СтрокаФайл.ТСД = ДополнительныеПараметры.лТекущийТСД;
	
	Попытка
		СтрокаФайл.Документ=Док.Документ.Ссылка;
	Исключение
		Если Док.Документ = "ТоварноТранспортнаяНакладнаяЕГАИС" Тогда
			СтрокаФайл.Документ = "ТТНВходящаяЕГАИС";
		Иначе
			СтрокаФайл.Документ = Док.Документ;
		КонецЕсли;
	КонецПопытки;
	
	СтрокаФайл.ТЧПодбор = Док.ИмяТабличнойЧастиПодбор;
	СтрокаФайл.ТЧПриемка = Док.ИмяТабличнойЧастиПриемка;
	СтрокаФайл.Шаблон = Док.ШаблонИмя;
	
	СтрокаДока = ДополнительныеПараметры.Тхт.ПолучитьСтроку(1);	
	СтрокаДока = СтрЗаменить(СтрокаДока, ";", Символы.ПС);
	
	Если СокрЛП(СтрПолучитьСтроку(СтрокаДока,1)) = "doc_forms" Тогда
		СтрокаДока = ДополнительныеПараметры.Тхт.ПолучитьСтроку(2);
		СтрокаДока = СтрЗаменить(СтрокаДока,";",Символы.ПС);
	КонецЕсли;
	
	ТипДокумента = СтрЗаменить(СокрЛП(СтрПолучитьСтроку(СтрокаДока,5)), "[59]", ";");	
	ШаблоныПоТипу = ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента", ТипДокумента));
	
	Если ШаблоныПоТипу[0].ИспользоватьПодбор Тогда	
		СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПодбор = ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПодбор;
		Если ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПодбор = 0 Тогда
			СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Не изменять";
		ИначеЕсли ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПодбор = 1 Тогда
			СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Дополнять";
		ИначеЕсли ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПодбор = 2 Тогда
			СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Заменять";
		ИначеЕсли ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда
			СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Изменять";
		ИначеЕсли ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда
			СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Изменять только подобранные";	
		КонецЕсли;
	Иначе
		Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыбор.Доступность = Ложь; 
	КонецЕсли;
	
	Если ШаблоныПоТипу[0].ИспользоватьПриемку Тогда
		СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПриемка=ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПриемка;
		Если ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПриемка=0 Тогда
			СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор="Не изменять";
		ИначеЕсли ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПриемка=1 Тогда
			СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор="Дополнять";
		ИначеЕсли ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПриемка=2 Тогда
			СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор="Заменять";
		ИначеЕсли ШаблоныПоТипу[0].ТабличнуюЧастьПриЗагрузкеПриемка = 3 Тогда
			СтрокаФайл.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Изменять";
		КонецЕсли;
	Иначе
		Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыбор.Доступность = Ложь;
	КонецЕсли; 
	
	Если Не ТипОбмена = "2" Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ДополнительныеПараметры.ВременныйФайл);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбходМассиваФайловFTP(Массив, FTP, лТекущийТСД)
	
	Если Массив = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого ФайлМассива Из Массив Цикл
		Если Найти(ФайлМассива.ПолноеИмя,"arts_") <> 0 Или Найти(ФайлМассива.ПолноеИмя,"barcodes_") <> 0 
			Или Найти(ФайлМассива.ПолноеИмя,"_ERROR") <> 0 Тогда //загрузка изменений в справочниках
			Продолжить;
		КонецЕсли;		
		
		тхт = Новый ТекстовыйДокумент();
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
		FTP.Получить(ФайлМассива.ПолноеИмя, ВременныйФайл);
		тхт.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма, Новый Структура("ДопОбработка, тхт, ПолноеИмя, ВременныйФайл, лТекущийТСД, ТекущееИмяФайла", Истина, тхт, ФайлМассива.ПолноеИмя, ВременныйФайл, лТекущийТСД, ФайлМассива.Имя)), ВременныйФайл, "windows-1251");		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогFTPПриИзменении(ПриОткрытии = Ложь)
	
	Если Не КаталогиДоступныFTP(ПриОткрытии) Тогда
		Возврат;
	КонецЕсли;
	
	Если FTP = Неопределено Тогда
		FTP = ПодключитьсяКFTPСерверу();
	КонецЕсли;				
	
	FTP.УстановитьТекущийКаталог("/");
	
	СтруктураСпискаТСДКеш = Новый Соответствие;
	
	Для каждого Строка Из СписокТСД Цикл
		СтруктураСпискаТСДКеш.Вставить(Строка.ТСД, Строка.Наименование);	
	КонецЦикла;
	
	СписокТСД.Очистить();
	
	ФайлыТСД = FTP.НайтиФайлы(
	"/DataMobile/", // ищём в корневом каталоге
	"*" // любые файлы (здесь можно задать маску)
	);
	
	Для каждого файлТСД Из ФайлыТСД Цикл
		Если Не файлТСД.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(ФайлТСД.Имя) = "base" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(ФайлТСД.Имя) = "prnmask" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(ФайлТСД.Имя) = "sounds" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(ФайлТСД.Имя) = "dmphotos" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(ФайлТСД.Имя) = "dmimages" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(ФайлТСД.Имя) = "errors" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НРег(файлТСД.Имя) = "in" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НРег(файлТСД.Имя) = "out" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НРег(файлТСД.Имя) = "log" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НРег(файлТСД.Имя) = "appupdate" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(файлТСД.Имя) = "others" Тогда
			Продолжить;
		КонецЕсли;   
		
		Если НРег(файлТСД.Имя) = "frontol" Тогда
			Продолжить;
		КонецЕсли;

		Если НРег(файлТСД.Имя) = "null" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СписокТСД.Добавить();
		НоваяСтрока.ТСД = ФайлТСД.Имя;
		НоваяСтрока.Наименование = СтруктураСпискаТСДКеш.Получить(НоваяСтрока.ТСД);		
	КонецЦикла;
	
	Если СписокТСД.Количество() > 0 Тогда			
		Если Элементы.СписокТСД.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВосстановитьЗначениеТСДКлиент();
		ПрочитатьНастройкиТСД();			
		
		Попытка
			Структура = Новый Структура;
			ТекПозиция = СписокТСД.НайтиСтроки(Новый Структура("ТСД", СтрЗаменить(ИДТСД, РазделительПути, "")));
			
			Если ТекПозиция.Количество() Тогда
				Элементы.СписокТСД.ТекущаяСтрока = ТекПозиция[0].НомерСтроки;
				ИДТСД = ТекПозиция[0].ТСД;
			КонецЕсли;
		Исключение	
			Элементы.СписокТСД.ТекущаяСтрока = СписокТСД[0].НомерСтроки;
			
			Если ЗначениеЗаполнено(СписокТСД[0].Наименование) Тогда
				ИДТСД = СписокТСД[0].Наименование;
			Иначе	
				ИДТСД = СписокТСД[0].ТСД;
			КонецЕсли;	
		КонецПопытки;			
	КонецЕсли;
	
	Элементы.СписокТСД.Обновить();		
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьсяКFTPСерверу(ПриОткрытии = Ложь)
	
	Если ПриОткрытии Тогда
		лFTPТаймАут = FTPТаймаутПриОткрытии;	
	Иначе
		лFTPТаймАут = FTPТаймАут;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		ПоказатьСообщениеПользователю("FTPСоединение не доступно в облаке.");
		Соединение = Неопределено;
		
	#Иначе
		
		Если FTPs Тогда			        
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
			Уровень = УровеньИспользованияЗащищенногоСоединенияFTP.Требовать;
			
		Иначе
			ЗащищенноеСоединение = Неопределено; 
			Уровень = Неопределено;
		КонецЕсли;
		
		Попытка
			//	Соединение = Новый FTPСоединение(FTPАдрес, FTPПорт,  FTPЛогин, FTPПароль, Неопределено, Истина,60,ЗащищенноеСоединение,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
			Соединение = Новый FTPСоединение(
			FTPАдрес, // адрес ftp сервера
			FTPПорт, // порт сервера
			FTPЛогин, // имя пользователя
			FTPПароль, // пароль пользователя
			Неопределено, // прокси не используется
			Истина, // пассивный режим работы
			лFTPТаймАут, // таймаут (0 - без ограничений)
			ЗащищенноеСоединение, // незащищенное/защищенное соединение
			Уровень);
			
			// Для случаев, когда у ftp сервера нет возможности
			// обращаться к нам (мы находимся за межсетевым экраном)
			// следует использовать пассивный режим работы.	
		Исключение                   
			Сообщить(ОписаниеОшибки());	
			Соединение 	= Неопределено;
			СоединениеСFTPКорректно = Ложь;
		КонецПопытки; 
		
		Возврат Соединение;
	#КонецЕсли
	
	Возврат Соединение;
	
КонецФункции	

&НаКлиенте
Функция КаталогиДоступныFTP(ПриОткрытии = Ложь)
	
	КаталогFTPДоступен = Ложь;
	
	Если FTPАдрес = "" Или FTPПорт = 0 Или Не СоединениеСFTPКорректно Тогда
		СообщитьОНеудачномСоединенииСFTP();
		СоединениеСFTPКорректно = Ложь;
		Возврат Ложь;
	КонецЕсли; 
	
	Если ИДТСД = "" Или ИДТСД = Неопределено Тогда		
		Попытка
			ИДТСД = СписокТСД[0].ТСД;
			КаталогИДТСД = "" + ИДТСД + "/";
		Исключение
        	КаталогИДТСД = "";	
		КонецПопытки;
	Иначе
		КаталогИДТСД = "" + ИДТСД + "/";
	КонецЕсли;
	
	ИмяКаталогаIN  = "DataMobile/" + КаталогИДТСД + "in/";
	ИмяКаталогаOUT = "DataMobile/" + КаталогИДТСД + "out/";
	ИмяКаталогаLOG = "DataMobile/" + КаталогИДТСД + "log/";
	
	Попытка		
		FTP = ПодключитьсяКFTPСерверу(ПриОткрытии);		
		
		Если FTP = Неопределено Тогда
			СообщитьОНеудачномСоединенииСFTP();
			Возврат Ложь;		
		КонецЕсли; 
		
		Если Не НайтиСоздатьFTPКаталог(FTP, ИмяКаталогаIN, Ложь) 
			Или Не НайтиСоздатьFTPКаталог(FTP, ИмяКаталогаOUT, Ложь) 
			Или Не НайтиСоздатьFTPКаталог(FTP, ИмяКаталогаLOG, Ложь) Тогда
			
			ДопПараметры = Новый Структура();
			ДопПараметры.Вставить("FTP", 					FTP);
			ДопПараметры.Вставить("КаталогFTPДоступен", 	КаталогFTPДоступен);
			ДопПараметры.Вставить("ИмяКаталогаIN", 			ИмяКаталогаIN);
			ДопПараметры.Вставить("ИмяКаталогаOUT", 		ИмяКаталогаOUT);
			ДопПараметры.Вставить("ИмяКаталогаLOG", 		ИмяКаталогаLOG);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСозданияКаталоговОбменаНаFTP_Завершение", ЭтаФорма, ДопПараметры);	
			ТекстВопроса = "Папки обмена на FTP не существуют Или не содержат необходимых подпапок. Создать?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);					
			
		Иначе			
			КаталогFTPДоступен = Истина;
			
			Возврат КаталогFTPДоступен;
		КонецЕсли;	
	Исключение
		СообщитьОНеудачномСоединенииСFTP();
		СоединениеСFTPКорректно = Ложь;
		
		Возврат Ложь;
	КонецПопытки;			
	
	Возврат КаталогFTPДоступен;
	
КонецФункции

&НаКлиенте
Функция СообщитьОНеудачномСоединенииСFTP()
	
	#Если ВебКлиент Тогда

		ПоказатьСообщениеПользователю("FTPСоединение не доступно в облаке.");
		
	#Иначе
		
		ПоказатьСообщениеПользователю("Не удалось соединиться с FTP сервером, проверьте настройки!");
		
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ВопросСозданияКаталоговОбменаНаFTP_Завершение(Результат, ДопПараметры) Экспорт
	
	КаталогFTPДоступен = ДопПараметры.КаталогFTPДоступен;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НайтиСоздатьFTPКаталог(ДопПараметры.FTP, ДопПараметры.ИмяКаталогаIN, Истина) 
			И НайтиСоздатьFTPКаталог(ДопПараметры.FTP, ДопПараметры.ИмяКаталогаOUT, Истина) 
			И НайтиСоздатьFTPКаталог(ДопПараметры.FTP, ДопПараметры.ИмяКаталогаLOG, Истина) Тогда	  			

			ПоказатьСообщениеПользователю("Папки обмена на FTP успешно созданы!");			
			КаталогFTPДоступен = Истина;
			
		Иначе
			ПоказатьСообщениеПользователю("Не удалось создать необходимые папки обмена на FTP, попробуйте создать их вручную!");
			КаталогFTPДоступен = Ложь;		
		КонецЕсли;
		
	Иначе
		ПоказатьСообщениеПользователю("Папки обмена на FTP не существуют Или не содержат необходимых подпапок, обмен не возможен!");
		КаталогFTPДоступен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСоздатьFTPКаталог(FTP, Путь, Создавать = Ложь) Экспорт
	
	Попытка		
		FTP.УстановитьТекущийКаталог("/");
		FTP.УстановитьТекущийКаталог(Путь);
		FTP.УстановитьТекущийКаталог("/");
		Возврат Истина;
		
	Исключение		
		Если Создавать Тогда		
			Попытка			
				FTP.УстановитьТекущийКаталог("/");
				FTP.СоздатьКаталог(Путь);
				Возврат Истина;
			Исключение	
				//Сообщить("Ошибка создания каталогов по причине: "+ ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
			
		Иначе			
			Возврат Ложь;
		КонецЕсли;		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ВидимостьЭлементовНастройки() 
	
	Если ТипОбмена = "0" ИЛИ ТипОбмена = Неопределено Тогда
		Элементы.ГруппаНастройкиЛокальныйКаталогХранения.Видимость = Истина;
	    Элементы.ГрупппаНастройкиFTPQRкод.Видимость = Ложь;
		Элементы.ГруппаНастройкиЯндексДиск.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипОбмена = "1" Тогда
		Элементы.ГруппаНастройкиЛокальныйКаталогХранения.Видимость = Ложь;
	    Элементы.ГрупппаНастройкиFTPQRкод.Видимость = Истина;
		Элементы.ГруппаНастройкиЯндексДиск.Видимость = Ложь;
	КонецЕсли;

	Если ТипОбмена = "2" Тогда
		Элементы.ГруппаНастройкиЛокальныйКаталогХранения.Видимость = Ложь;
	    Элементы.ГрупппаНастройкиFTPQRкод.Видимость = Ложь;
		Элементы.ГруппаНастройкиЯндексДиск.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция FTPПолучитьИмяВременногоФайлаНаКлиенте() 
	
	ВременныйФайл = "";
	
	#Если НЕ ВебКлиент Тогда
		ВременныйФайл = ПолучитьИмяВременногоФайла("tmp");
	#КонецЕсли
	
	Возврат ВременныйФайл;
	
КонецФункции

#Область ОтправитьФайлНаFTP

&НаКлиенте
Функция ОтправитьФайлНаFTP(ТекстовыйДокумент, ВременноеИмяФайла)
	
	Успех = Истина;
	ИмяФайла = Лев(ВременноеИмяФайла, СтрДлина(ВременноеИмяФайла) - 4);  //При копировании файл не доступен, переименовываем после окончания копирования
	
	Попытка		
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте(); //файл для временного хранения записи
			
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПроцедураВызова", "ОтправитьФайлНаFTP");
		ДопПараметры.Вставить("ВременныйФайл", ВременныйФайл);
		ДопПараметры.Вставить("ИмяФайла", ИмяФайла);
		ДопПараметры.Вставить("ВременноеИмяФайла", ВременноеИмяФайла);
		ДопПараметры.Вставить("КодировкаТекста", КодировкаТекста.UTF8);		
		
		Если МассоваяВыгрузка Тогда					
			ДопПараметры.Вставить("СписокТСД", СписокТСД);
		Иначе
			МассивТСД = Новый Массив;
			МассивТСД.Добавить(ИДТСД);   			
			ДопПараметры.Вставить("СписокТСД", МассивТСД);
		КонецЕсли;
		
		ТекстовыйДокумент.НачатьЗапись(Новый ОписаниеОповещения("НачатьЗапись_ОбработкаОповещения", ЭтаФорма, ДопПараметры), ВременныйФайл, КодировкаТекста.UTF8);
								
	Исключение		
		Сообщить("Ошибка доступа к FTP "+ОписаниеОшибки());
		Успех = Ложь;		
	КонецПопытки;
	
	Возврат Успех;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьФайлНаFTP_Завершение(ДополнительныеПараметры)  
	
	Если FTP = Неопределено Тогда
		FTP = ПодключитьсяКFTPСерверу();
	КонецЕсли;		
	
	Для каждого ЭлементТСД Из ДополнительныеПараметры.СписокТСД Цикл
		FTP.УстановитьТекущийКаталог("/");
		
		Если ТипЗнч(ЭлементТСД) = Тип("Строка") Тогда
			//выгружаем на указанный в списке ТСД 			
			Если ИДТСД = "" Тогда
				КаталогДТСД = "";
			Иначе
				КаталогДТСД = "" + ИДТСД + "/";	
			КонецЕсли; 			
		Иначе
			ТСД_Выгрузки = ЭлементТСД.ТСД;
			КаталогДТСД = "" + ЭлементТСД.ТСД + "/";
		КонецЕсли;
		
		ИмяКаталогаIN = "DataMobile/" + КаталогДТСД + "in/";
		FTP.УстановитьТекущийКаталог(ИмяКаталогаIN); 	
		
		Если FTP.НайтиФайлы(ДополнительныеПараметры.ВременноеИмяФайла).Количество() > 0 Тогда //файл уже есть на FTP, надо удалить
			FTP.Удалить(ДополнительныеПараметры.ВременноеИмяФайла);
		КонецЕсли;	
		
		FTP.Записать(ДополнительныеПараметры.ВременныйФайл, ДополнительныеПараметры.ВременноеИмяФайла); 				
		
		Если FTP.НайтиФайлы(ДополнительныеПараметры.ИмяФайла).Количество() > 0 Тогда //файл уже есть на FTP, надо удалить
			FTP.Удалить(ДополнительныеПараметры.ИмяФайла);
		КонецЕсли;	
		
		//переименование файла для загрузки *.dmtemp в *.dm
		FTP.Переместить(ДополнительныеПараметры.ВременноеИмяФайла, ДополнительныеПараметры.ИмяФайла);				
		FTP.УстановитьТекущийКаталог("/");
	КонецЦикла;
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ДополнительныеПараметры.ВременныйФайл);

КонецПроцедуры	
	
#КонецОбласти

#КонецОбласти

#Область Обмен_ЯндексДиск

&НаКлиенте
Функция СообщитьОНеудачномСоединенииСЯндексДиск()
	
	ПоказатьСообщениеПользователю("Не удалось соединиться с Яндекс.Диск, проверьте настройки!");
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокТСД() 
	
	МассивТСД = ЯндексДискТаблицаДанных.Выгрузить().ВыгрузитьКолонку("Имя");
	
	СтруктураСпискаТСДКеш = Новый Соответствие;
	
	Для каждого Строка Из СписокТСД Цикл
		СтруктураСпискаТСДКеш.Вставить(Строка.ТСД, Строка.Наименование);	
	КонецЦикла;
	
	СписокТСД.Очистить();
	
	Для каждого ПапкаТСД Из МассивТСД Цикл
		
		Если НРег(ПапкаТСД) = "base" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НРег(ПапкаТСД)="prnmask" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(ПапкаТСД)="sounds" Тогда
			Продолжить;
		КонецЕсли;  
		
		Если НРег(ПапкаТСД)="dmphotos" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НРег(ПапкаТСД)="dmimages" Тогда
			Продолжить;
		КонецЕсли;  
		
		Если НРег(ПапкаТСД)="errors" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НРег(ПапкаТСД)="in" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(ПапкаТСД)="out" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НРег(ПапкаТСД)="log" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(ПапкаТСД) = "appupdate" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НРег(ПапкаТСД) = "others" Тогда
			Продолжить;
		КонецЕсли;  

		Если НРег(ПапкаТСД) = "frontol" Тогда
			Продолжить;
		КонецЕсли;  
		
		Если НРег(ПапкаТСД) = "null" Тогда
			Продолжить;
		КонецЕсли;  
 
		
		НоваяСтрока = СписокТСД.Добавить();
		НоваяСтрока.ТСД = ПапкаТСД;
		НоваяСтрока.Наименование = СтруктураСпискаТСДКеш.Получить(НоваяСтрока.ТСД);	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПодключениеЯндексДиск(ТекущееРасположение, ИДТСД)
	
	СтруктураОтвета = Новый Структура; 
	СтруктураОтвета.Вставить("Результат", Истина);
	
	Если ЯндексДискТокен = "" Тогда
		СтруктураОтвета.Результат = Ложь;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	//получили таблицу данных строк ИДТСД:			
	ПолучитьСписокФайловЯндексДиск(ТекущееРасположение, 0);    	
		
	ИмяКаталогаIN = "in";
	ИмяКаталогаOUT = "out";
	ИмяКаталогаLOG = "log";
	
	Если ИДТСД = "" Тогда
		ПолучитьСписокФайловЯндексДиск("app:/", 0); 
		ПолучитьСписокТСД();
	КонецЕсли;	
	
	//поиск каталогов:	
	СтруктураПоиска = Новый Структура;      
	
	СтруктураПоиска.Вставить("Имя", ИмяКаталогаIN);
	МассивСтрок = ЯндексДискТаблицаДанных.НайтиСтроки(СтруктураПоиска);
	КаталогIN = ?(МассивСтрок.Количество() = 0, Ложь, Истина);
	
	СтруктураПоиска.Имя = ИмяКаталогаOUT;
	МассивСтрок = ЯндексДискТаблицаДанных.НайтиСтроки(СтруктураПоиска);
	КаталогOUT = ?(МассивСтрок.Количество() = 0, Ложь, Истина);
	
	СтруктураПоиска.Имя = ИмяКаталогаLOG;
	МассивСтрок = ЯндексДискТаблицаДанных.НайтиСтроки(СтруктураПоиска);
	КаталогLOG = ?(МассивСтрок.Количество() = 0, Ложь, Истина);
	
	Если Не КаталогIN 
		ИЛИ Не КаталогOUT
		ИЛИ Не КаталогLOG Тогда
		
		ДопПараметры = Новый Структура();
		
		ДопПараметры.Вставить("ИмяКаталогаIN", 			ИмяКаталогаIN);
		ДопПараметры.Вставить("ИмяКаталогаOUT", 		ИмяКаталогаOUT);
		ДопПараметры.Вставить("ИмяКаталогаLOG", 		ИмяКаталогаLOG);  
		
		ДопПараметры.Вставить("КаталогIN", 				КаталогIN);
		ДопПараметры.Вставить("КаталогOUT", 			КаталогOUT);
		ДопПараметры.Вставить("КаталогLOG", 			КаталогLOG); 
		ДопПараметры.Вставить("ИДТСД", 					ИДТСД);
		
		СтруктураОтвета.Вставить("ДопПараметры", ДопПараметры);
		СтруктураОтвета.Вставить("ТребуетсяСозданиеКаталогов", Истина);
		Возврат СтруктураОтвета;
		
	Иначе		
		СтруктураОтвета.Вставить("ТребуетсяСозданиеКаталогов", Ложь);
		Возврат СтруктураОтвета;		
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Процедура ПапкаПриложения()
	
	ТекущееРасположение = "app:/";
	
КонецПроцедуры

// Получает список файлов по переданному пути на Яндекс.Диске. Полученный 
// список загружается в табличную часть СписокФайлов.
// 
// Параметры:
//  Путь     - Строка, например "disk:/фото/". Если передать "app:/", то будет получен 
//			   список файлов из папки приложения
//  Смещение - Число - смещение относительно начала списка. Используется для рекурсивного 
//		использования метода в постраничном чтении списка
// 
&НаСервере
Функция ПолучитьСписокФайловЯндексДиск(Знач Путь = "disk:/", Знач Смещение = 0) Экспорт
	
	ЯндексДискТаблицаДанных.Очистить();
	
	ИмяСервера = "cloud-api.yandex.net";
	ОтносительныйURL = 
		"/v1/disk/resources?path=" + Путь +
		"&offset=" + XMLСтрока(Смещение);
	
	Заголовки = СформироватьЗаголовки();
	
	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	
	Попытка
		
		HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
		HttpОтвет = HttpСоединение.Получить(HttpЗапрос);

		ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		ОбработатьКодСостояния(HttpОтвет, ОтносительныйURL, ТелоОтвета);
		
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ТелоОтвета);
		Ответ = ФабрикаXDTO.ПрочитатьJSON(Чтение);
		
		Если Ответ._embedded.total - Ответ._embedded.offset > 1 Тогда
			Для каждого Item Из Ответ._Embedded.Items.Items Цикл
				Стр = ЯндексДискТаблицаДанных.Добавить();
				Стр.Имя = Item.Name;
				Стр.Тип = Item.Type;
				Стр.Путь = Item.Path;
			КонецЦикла;
		ИначеЕсли Ответ._embedded.total - Ответ._embedded.offset = 1 Тогда
			Стр = ЯндексДискТаблицаДанных.Добавить();
			Стр.Имя = Ответ._Embedded.Items.Items.Name;
			Стр.Тип = Ответ._Embedded.Items.Items.Type;
			Стр.Путь = Ответ._Embedded.Items.Items.Path;
		КонецЕсли;
		
		Если Ответ._embedded.total > Ответ._embedded.limit + Ответ._embedded.offset Тогда
			ПолучитьСписокФайловЯндексДиск(Путь, Мин(Смещение + Ответ._embedded.limit, Ответ._embedded.total)); 
		КонецЕсли;
		
	Исключение          
		
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции
 
// Обменивает заранее полученный код авторизации на токен. Код авторизации нужно
// предварительно поместить в реквизит обработки КодАвторизации. Полученный токен 
// записывается в реквизит Токен. Требуется для работоспособности других методов.
//
&НаСервере
Процедура ПолучениеТокена() Экспорт
	
	ИмяСервера = "oauth.yandex.ru";
	ОтносительныйURL = "/token";
	
	СтрокаЗапроса = "grant_type=authorization_code" +
		"&code=" 			+ ЯндексДискКодАвторизации + 
		"&client_id=" 		+ ЯндексДискIDПриложения + 
		"&client_secret=" 	+ ЯндексДискПарольПриложения;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", XMLСтрока(СтрДлина(СтрокаЗапроса)));
	
	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	HttpЗапрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос);

	ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ОбработатьКодСостояния(HttpОтвет, ОтносительныйURL, ТелоОтвета);
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТелоОтвета);
	Ответ = ФабрикаXDTO.ПрочитатьJSON(Чтение);
	
	ЯндексДискТокен = Ответ.access_token;
	ЯндексДискСрокДействияТокена = ТекущаяДата() + Ответ.expires_in;
	
КонецПроцедуры

&НаСервере
Функция РазделитьURL(Знач URL)
	
	ИмяСервера = "";
	Путь = "";
	Протокол = "";
	Порт = 443;
	
	URL = СокрЛП(URL);
	
	Если Лев(URL, 7) = "http://" Тогда
		URL = Прав(URL, СтрДлина(URL) - 7);
		Протокол = "http";
	ИначеЕсли Лев(URL, 8) = "https://" Тогда
		URL = Прав(URL, СтрДлина(URL) - 8);
		Протокол = "https";
	КонецЕсли;

	Индекс = СтрНайти(URL, "/");
	Если Индекс Тогда
		ИмяСервера = Лев(URL, Индекс - 1);
		Путь = Сред(URL, Индекс);
	КонецЕсли;
	
	Индекс = СтрНайти(ИмяСервера, ":");
	Если Индекс Тогда
		Порт = Число(Сред(ИмяСервера, Индекс + 1));
		ИмяСервера = Лев(ИмяСервера, Индекс - 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Путь", Путь);
	Результат.Вставить("Протокол", Протокол);
	Результат.Вставить("Порт", Порт);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьЗаголовки()
	
	Перем Заголовки; 
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Content-Type", "application/json");
	
	Если ТекущаяДата() > ЯндексДискСрокДействияТокена Тогда
		ПолучениеТокена();
	КонецЕсли; 
	
	Заголовки.Вставить("Authorization", "OAuth " + ЯндексДискТокен);
	
	Возврат Заголовки;

КонецФункции 

&НаСервере
Процедура ОбработатьКодСостояния(Знач HttpОтвет, Знач ОтносительныйURL, Знач ТелоОтвета = "")
	
	Перем ТекстИсключения;
	
	Если (HttpОтвет.КодСостояния < 200) Или (HttpОтвет.КодСостояния >= 300) Тогда
		ТекстИсключения = "Запрос: " + ОтносительныйURL + Символы.ПС;
		ТекстИсключения = ТекстИсключения + "Код ответа: " + HttpОтвет.КодСостояния + Символы.ПС;
		ТекстИсключения = ТекстИсключения + "Тело ответа: " + ТелоОтвета;
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСозданияКаталоговОбменаНаЯндексДиск_Завершение(Результат, ДопПараметры) Экспорт
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			
			Если Не ДопПараметры.КаталогIN Тогда
				Если ДопПараметры.ИДТСД = "" Тогда
					СоздатьПапку(ТекущееРасположение + ДопПараметры.ИмяКаталогаIN);
				Иначе	
					СоздатьПапку(ТекущееРасположение + "/" + ДопПараметры.ИмяКаталогаIN);
				КонецЕсли;	
			КонецЕсли;
			
			Если Не ДопПараметры.КаталогOUT Тогда
				Если ДопПараметры.ИДТСД = "" Тогда
					СоздатьПапку(ТекущееРасположение + ДопПараметры.ИмяКаталогаOUT);
				Иначе
					СоздатьПапку(ТекущееРасположение + "/" + ДопПараметры.ИмяКаталогаOUT);	
				КонецЕсли;	
			КонецЕсли; 
			
			Если Не ДопПараметры.КаталогLOG Тогда
				Если ДопПараметры.ИДТСД = "" Тогда
					СоздатьПапку(ТекущееРасположение + ДопПараметры.ИмяКаталогаLOG);
				Иначе
					СоздатьПапку(ТекущееРасположение + "/" + ДопПараметры.ИмяКаталогаLOG);
				КонецЕсли;	
			КонецЕсли;		
			
			ПоказатьСообщениеПользователю("Папки обмена на Яндекс.Диск успешно созданы!");
			
		Исключение
			
			ПоказатьСообщениеПользователю("Не удалось создать необходимые папки обмена на Яндекс.Диск, попробуйте создать их вручную!");
			
		КонецПопытки;				

	Иначе
		
		ПоказатьСообщениеПользователю("Папки обмена на Яндекс.Диск не существуют Или не содержат необходимых подпапок, обмен не возможен!");
		
	КонецЕсли;
	
КонецПроцедуры

// Создает папку на Яндекс.Диске по переданному пути.
//
// Параметры:
//  Путь - Строка - полный путь к создаваемой папке, например "disk:/фото/новая папка"
//
Процедура СоздатьПапку(Знач Путь) Экспорт
	
	ИмяСервера = "cloud-api.yandex.net";
	ОтносительныйURL = "/v1/disk/resources?path=" + Путь;
	
	Заголовки = СформироватьЗаголовки();
	
	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	HttpЗапрос.УстановитьТелоИзСтроки("");
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HttpОтвет = HttpСоединение.Записать(HTTPЗапрос);

	ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ОбработатьКодСостояния(HttpОтвет, ОтносительныйURL, ТелоОтвета);
	
КонецПроцедуры

// Загружает файл на Яндекс.Диск.
//
// Параметры:
//  Путь 		   - Строка - полный путь к загружаемому файлу, например "disk:/фото/1.jpg"
//  АдресХранилища - Строка - адрес файла во временном хранилище
//  Перезаписывать - Булево - признак перезаписи файла, учитывается при наличии файла с таким же именем
//
Процедура ЗагрузитьФайл(Знач Путь, Знач АдресХранилища, Знач Перезаписывать = Ложь) Экспорт
	
	ИмяСервера = "cloud-api.yandex.net";
	ОтносительныйURL = 
		"/v1/disk/resources/upload?path=" + Путь + 
		"&overwrite=" + XMLСтрока(Перезаписывать);
	
	Заголовки = СформироватьЗаголовки();
	
	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	HttpОтвет = HttpСоединение.Получить(HTTPЗапрос);

	ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ОбработатьКодСостояния(HttpОтвет, ОтносительныйURL, ТелоОтвета);
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТелоОтвета);
	Ответ = ФабрикаXDTO.ПрочитатьJSON(Чтение);
	
	СтруктураURL = РазделитьURL(Ответ.href);
	HttpСоединение = Новый HTTPСоединение(СтруктураURL.ИмяСервера, СтруктураURL.Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	HttpЗапрос = Новый HTTPЗапрос(СтруктураURL.Путь, Заголовки);
	HttpЗапрос.УстановитьТелоИзДвоичныхДанных(ПолучитьИзВременногоХранилища(АдресХранилища));
	HttpОтвет = HttpСоединение.Записать(HTTPЗапрос);
	
	ОбработатьКодСостояния(HttpОтвет, СтруктураURL.Путь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбходМассиваФайловЯндексДиск(лТекущийТСД, КаталогИДТСД, КонтекстИсполненияКода)   
	
	ПолучитьСписокФайловЯндексДиск(КаталогИДТСД, 0);
	
	Если КонтекстИсполненияКода = "docs" Тогда
		
		Для каждого СтрокаДанных Из ЯндексДискТаблицаДанных Цикл
			Если СтрокаДанных.Тип = "dir" Тогда
				Продолжить;
			Иначе	
				Если Найти(СтрокаДанных.Имя,"arts_") <> 0 Или Найти(СтрокаДанных.Имя,"barcodes_") <> 0 Или Найти(СтрокаДанных.Имя,"_ERROR") <> 0 Тогда //загрузка изменений в справочниках
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
			АдресВХ = СкачатьФайл(СтрокаДанных.Путь);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХ);		
			ИмяФайла = КаталогВременныхФайлов() + СтрокаДанных.Имя; 
			ДвоичныеДанные.Записать(ИмяФайла);
			
			тхт = Новый ТекстовыйДокумент();
			тхт.Прочитать(ИмяФайла);
			тхт.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма, Новый Структура("ДопОбработка, тхт, ПолноеИмя, ВременныйФайл, лТекущийТСД, ТекущееИмяФайла", Истина, тхт, ИмяФайла, ИмяФайла, лТекущийТСД, СтрокаДанных.Имя)), ИмяФайла, "windows-1251");		
		КонецЦикла;  
		
	ИначеЕсли КонтекстИсполненияКода = "arts_barcodes" Тогда
		
		Если лКаталогОбмена <> "" Тогда
			лКаталогОбмена = лКаталогОбмена + ?(Прав(лКаталогОбмена,1) = РазделительПути, "", РазделительПути);
		КонецЕсли;

		Для каждого СтрокаДанных Из ЯндексДискТаблицаДанных Цикл
			Если СтрокаДанных.Тип = "dir" Тогда
				Продолжить;
			Иначе	
				Если Найти(СтрокаДанных.Имя,"arts_") <> 0 Или Найти(СтрокаДанных.Имя,"barcodes_") <> 0 Тогда 
				Иначе	
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
			АдресВХ = СкачатьФайл(СтрокаДанных.Путь);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХ);		
			ИмяФайла = КаталогВременныхФайлов() + СтрокаДанных.Имя; 
			ДвоичныеДанные.Записать(ИмяФайла);
			
			тхт = Новый ТекстовыйДокумент();
			тхт.Прочитать(ИмяФайла); 
			
			Если Не Найти(СтрокаДанных.Имя,"arts_") = 0  Тогда
				
				Для НомСтр = 1 По тхт.КоличествоСтрок() Цикл
					ТекущаяСтрока = тхт.ПолучитьСтроку(НомСтр);
					
					Если ТекущаяСтрока = "" Тогда 
						Продолжить;
					КонецЕсли; 
					
					ЗаполнитьТЧТоварамиСервер(ТекущаяСтрока, ИмяФайла, РазделительПути, лТекущийТСД); 	
				КонецЦикла;	
				
			КонецЕсли;	
			
			Если Не Найти(СтрокаДанных.Имя,"barcodes_") = 0  Тогда				
				Для НомСтр = 1 По Тхт.КоличествоСтрок() Цикл 
					ТекущаяСтрока = Тхт.ПолучитьСтроку(НомСтр);
					
					Если ТекущаяСтрока = "" Тогда 
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьТЧШтрихкодамиСервер(ТекущаяСтрока, ИмяФайла, РазделительПути, лТекущийТСД); 					
				КонецЦикла; 			
			КонецЕсли;				
		КонецЦикла;		
	КонецЕсли;	
	
КонецПроцедуры

// Скачивает файл с Яндекс.Диска по переданному пути и возвращает адрес во временном хранилище.
//
// Параметры:
//  Путь - Строка - полнуть путь к скачиваемому файлу, например "disk:/фото/1.jpg"
// 
// Возвращаемое значение:
//  Строка - адрес во временном хранилище с полученным файлом
//
Функция СкачатьФайл(Знач Путь) Экспорт
	
	ИмяСервера = "cloud-api.yandex.net";
	ОтносительныйURL = "/v1/disk/resources/download?path=" + Путь;
	
	Заголовки = СформироватьЗаголовки();

	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	HttpОтвет = HttpСоединение.Получить(HttpЗапрос);

	ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ОбработатьКодСостояния(HttpОтвет, ОтносительныйURL, ТелоОтвета);
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТелоОтвета);
	Ответ = ФабрикаXDTO.ПрочитатьJSON(Чтение);

	СтруктураURL = РазделитьURL(РаскодироватьСтроку(Ответ.href, СпособКодированияСтроки.КодировкаURL));
	HttpСоединение = Новый HTTPСоединение(СтруктураURL.ИмяСервера, СтруктураURL.Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	HttpЗапрос = Новый HTTPЗапрос(СтруктураURL.Путь);
	HttpОтвет = HttpСоединение.Получить(HttpЗапрос);
		
	// редирект
	Пока HttpОтвет.КодСостояния = 302 Цикл
		СтруктураURL = РазделитьURL(HttpОтвет.Заголовки.Получить("Location"));
		HttpСоединение = Новый HTTPСоединение(СтруктураURL.ИмяСервера, СтруктураURL.Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL);
		HttpЗапрос = Новый HTTPЗапрос(СтруктураURL.Путь, Заголовки);
		HttpОтвет = HttpСоединение.Получить(HttpЗапрос);
	КонецЦикла;
	
	ОбработатьКодСостояния(HttpОтвет, СтруктураURL.Путь);
	
	ДанныеФайла = HttpОтвет.ПолучитьТелоКакДвоичныеДанные();
	Адрес = ПоместитьВоВременноеХранилище(ДанныеФайла);
	
	Возврат Адрес;
	
КонецФункции

// Удаляет папку или файл на Яндекс.Диске  по переданному пути.
//
// Параметры:
//  Путь - Строка - полный путь к удаляемой папке Или файлу, например "disk:/фото/1.jpg"
//
Процедура УдалитьПапкуИлиФайл(Знач Путь) Экспорт
	
	СписокФайлов.Очистить();
	
	ИмяСервера = "cloud-api.yandex.net";
	ОтносительныйURL = "/v1/disk/resources?path=" + Путь;
	
	Заголовки = СформироватьЗаголовки();
	
	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	
	HttpСоединение = Новый HTTPСоединение(ИмяСервера, 443,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	HttpОтвет = HttpСоединение.Удалить(HttpЗапрос);

	ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ОбработатьКодСостояния(HttpОтвет, ОтносительныйURL, ТелоОтвета);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискФайлов(ИсхКаталог, ЦелКаталог)
	
	ДопПараметры = Новый Структура;
	
	ДопПараметры.Вставить("ЦелКаталог", ЦелКаталог);
	ДопПараметры.Вставить("ИсхКаталог", ИсхКаталог);
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("НачалоПоискаФайлов", ЭтаФорма, ДопПараметры), ИсхКаталог,,);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПоискаФайлов(НайденныеФайлы, ДопПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() > 0 Тогда
		НачатьКопированиеФайла(Новый ОписаниеОповещения("НачалоКопированияФайла", ЭтаФорма, ДопПараметры), НайденныеФайлы[0].ПолноеИмя, ДопПараметры.ЦелКаталог);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте 
Процедура НачалоКопированияФайла(СкопированныйФайл, Дополнительно) Экспорт  
	
	РезультирующийФайл = Новый Файл(СкопированныйФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиПараметрыНаСледующийТСД_КаталогиОбмена(Параметры);
	
	Параметры.ТекущийТСД = Параметры.ТекущийТСД + 1;	
	ТекКаталог = лКаталогОбмена + Параметры.МассивТСД[Параметры.ТекущийТСД - 1];
	
	ИмяКаталогаIN = ТекКаталог + "\in\";
	ИмяКаталогаOUT = ТекКаталог + "\out\";
	ИмяКаталогаLOG = ТекКаталог + "\log\";			
	
	Параметры.ТекущийКаталогПроверки = "in";
	Параметры.ТекущийКаталогСоздания = "in";
	
	Параметры.ТекКаталог = ТекКаталог;
	
	Параметры.ИмяКаталогаIN = ИмяКаталогаIN;
	Параметры.ИмяКаталогаOUT = ИмяКаталогаOUT;
	Параметры.ИмяКаталогаLOG = ИмяКаталогаLOG;
	
	Параметры.КаталогНаДискеINСуществует = Ложь;
	Параметры.КаталогНаДискеOUTСуществует = Ложь;
	Параметры.КаталогНаДискеLOGСуществует = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
	
	ДопПараметры.ТекущийФайл = ДопПараметры.ТекущийФайл + 1;
	ДопПараметры.ТекущееИмяФайла = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл - 1].Имя;						
	ДопПараметры.ТекущийПутьФайла = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл - 1].Путь;
	
КонецПроцедуры 

// Функция возвращает результат проверки доступности каталогов обмена
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Булево> - Результат проверки.
//
&НаКлиенте
Функция КаталогиДоступны(ВидПостОбработки)
	
	Если лКаталогОбмена = "" И FTPАдрес = "" И лКаталогНастроек = "" Тогда
		ПоказатьСообщениеПользователю("Не указаны каталоги обмена и настроек!");
		Возврат Ложь;
	КонецЕсли;
	
	Если лКаталогОбмена = "" И FTPАдрес = "" Тогда
		ПоказатьСообщениеПользователю("Не указан каталог обмена с ТСД!");
		Возврат Ложь; 
		
	ИначеЕсли лКаталогНастроек = "" Тогда
		ПоказатьСообщениеПользователю("Не указан каталог хранения настроек!");
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипОбмена = "1" Тогда		
		КаталогиДоступныFTP();
		
		Если Не КаталогFTPДоступен Тогда     
			Возврат Ложь;
		КонецЕсли; 
		
		ВыполнитьПостОбработку(ВидПостОбработки);
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		МассивТСД = Новый Массив; 	
		
		Если Элементы.СписокТСД.ТекущиеДанные = Неопределено Тогда
			ТекущийТСД = Неопределено;
		Иначе
			ТекущийТСД = Элементы.СписокТСД.ТекущиеДанные.ТСД;
		КонецЕсли;	
		
		МассивТСД.Добавить(СокрЛП(ТекущийТСД));         
		
		ТекКаталог = лКаталогОбмена+МассивТСД[0];
		
		Если ИДТСД = "" Тогда
			ИмяКаталогаIN = лКаталогОбмена + "DataMobile" + РазделительПути + "in" + РазделительПути;
			ИмяКаталогаOUT = лКаталогОбмена + "DataMobile" + РазделительПути + "out" + РазделительПути;
			ИмяКаталогаLOG = лКаталогОбмена + "DataMobile" + РазделительПути + "log" + РазделительПути;
		Иначе
			ИмяКаталогаIN = лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + РазделительПути;
			ИмяКаталогаOUT = лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "out" + РазделительПути;
			ИмяКаталогаLOG = лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "log" + РазделительПути;
		КонецЕсли;			
		
		ПараметрыВыгрузки = Новый Структура();
		
		ПараметрыВыгрузки.Вставить("ВидПостОбработки", ВидПостОбработки);
		ПараметрыВыгрузки.Вставить("МассивТСД", МассивТСД);
		ПараметрыВыгрузки.Вставить("ВсегоТСД", МассивТСД.Количество());
		
		ПараметрыВыгрузки.Вставить("ТекущийКаталогПроверки", "in");
		ПараметрыВыгрузки.Вставить("ТекущийКаталогСоздания", "in");
		ПараметрыВыгрузки.Вставить("ТекущийТСД", 1);
		ПараметрыВыгрузки.Вставить("ТекКаталог", ТекКаталог);
		
		
		ПараметрыВыгрузки.Вставить("ИмяКаталогаIN", ИмяКаталогаIN);
		ПараметрыВыгрузки.Вставить("ИмяКаталогаOUT", ИмяКаталогаOUT);
		ПараметрыВыгрузки.Вставить("ИмяКаталогаLOG", ИмяКаталогаLOG);
		
		ПараметрыВыгрузки.Вставить("КаталогНаДискеINСуществует", Ложь);
		ПараметрыВыгрузки.Вставить("КаталогНаДискеOUTСуществует", Ложь);
		ПараметрыВыгрузки.Вставить("КаталогНаДискеLOGСуществует", Ложь);
		
		ПараметрыВыгрузки.Вставить("ЗадаватьВопрос", Истина);
		ПараметрыВыгрузки.Вставить("ВсеКаталогиЕсть", Истина);
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение", ЭтаФорма, ПараметрыВыгрузки);
		КаталогНаДискеIN = Новый Файл(ИмяКаталогаIN);
		КаталогНаДискеIN.НачатьПроверкуСуществования(ОписаниеОповещения);
	КонецЕсли;		
	
	КаталогНаДискеНастройки = Новый Файл(лКаталогНастроек);
	КаталогНаДискеНастройки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталогаНастроек_Завершение", ЭтаФорма, Новый Структура("ИмяКаталогаНастроек", лКаталогНастроек)));
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЕслиКаталогиДоступны()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_ОбновитьЕслиКаталогиДоступны", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек + "v83_TempLates.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры	

&НаКлиенте
Процедура НачатьПроверкуСуществования_ОбновитьЕслиКаталогиДоступны(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблона_ОбновитьЕслиКаталогиДоступны", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек + "v83_TempLates.tab");
		Исключение		
		КонецПопытки;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найдены шаблоны. 
		|Для их создания воспользуйтесь обработкой выгрузки!";
		Сообщение.Сообщить();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществованияКаталогаНастроек_Завершение(Существует, Параметры) Экспорт
	
	Если Не Существует Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталогаНастроек_ОбработкаОповещения", ЭтаФорма, Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения, Параметры.ИмяКаталогаНастроек);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществованияКаталоговОбмена_Завершение(Существует, Параметры) Экспорт
	
	Если Параметры.ТекущийКаталогПроверки = "in" Тогда
		Если Существует Тогда
			Параметры.КаталогНаДискеINСуществует = Истина;
		КонецЕсли;
		
		Параметры.ТекущийКаталогПроверки = "out";
		КаталогНаДискеOUT = Новый Файл(Параметры.ИмяКаталогаOUT);
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение", ЭтаФорма, Параметры);
		КаталогНаДискеOUT.НачатьПроверкуСуществования(ОписаниеОповещения);
		
	ИначеЕсли Параметры.ТекущийКаталогПроверки = "out" Тогда
		Если Существует Тогда
			Параметры.КаталогНаДискеOUTСуществует = Истина;
		КонецЕсли;
		
		Параметры.ТекущийКаталогПроверки = "log";
		КаталогНаДискеLOG = Новый Файл(Параметры.ИмяКаталогаLOG);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение", ЭтаФорма, Параметры);
		КаталогНаДискеLOG.НачатьПроверкуСуществования(ОписаниеОповещения);
		
	ИначеЕсли Параметры.ТекущийКаталогПроверки = "log" Тогда
		Если Существует Тогда
			Параметры.КаталогНаДискеLOGСуществует = Истина;
		КонецЕсли;
		
		Если Не Параметры.КаталогНаДискеINСуществует 
			Или Не Параметры.КаталогНаДискеOUTСуществует 
			Или Не  Параметры.КаталогНаДискеLOGСуществует Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСозданияКаталоговОбмена_Завершение", ЭтаФорма, Параметры);
			
			Если Параметры.ЗадаватьВопрос Тогда	
				ТекстВопроса = "Каталог обмена не содержит необходимых директорий для выгрузки\загрузки. Создать?";
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);			
			Иначе
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
			КонецЕсли;
			
		Иначе			
			Если Параметры.ТекущийТСД = Параметры.ВсегоТСД Тогда
				Если Параметры.ВсеКаталогиЕсть Тогда 
					ВыполнитьПостОбработку(Параметры.ВидПостОбработки);	
				КонецЕсли;
				
			Иначе
				//переход к следующему ТСД
				ПеревестиПараметрыНаСледующийТСД_КаталогиОбмена(Параметры);
				
				ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение", ЭтаФорма, Параметры);
				КаталогНаДискеIN = Новый Файл(Параметры.ИмяКаталогаIN);
				КаталогНаДискеIN.НачатьПроверкуСуществования(ОписаниеОповещения);				
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСозданияКаталоговОбмена_Завершение(Результат, Параметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
		
	Если Не Параметры.КаталогНаДискеINСуществует Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение", ЭтаФорма, Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения, Параметры.ИмяКаталогаIN);
		
	ИначеЕсли Не Параметры.КаталогНаДискеOUTСуществует Тогда
		Параметры.ТекущийКаталогСоздания = "out";
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение", ЭтаФорма, Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения, Параметры.ИмяКаталогаOUT);
		
	ИначеЕсли Не Параметры.КаталогНаДискеLOGСуществует Тогда
		Параметры.ТекущийКаталогСоздания = "log";
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение", ЭтаФорма, Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения, Параметры.ИмяКаталогаLOG);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеКаталоговОбмена_Завершение(Каталог, Параметры) Экспорт
	
	Если Параметры.ТекущийКаталогСоздания = "in" Тогда
		Параметры.ТекущийКаталогСоздания = "out";
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение", ЭтаФорма, Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения, Параметры.ИмяКаталогаOUT);
		
	ИначеЕсли Параметры.ТекущийКаталогСоздания = "out" Тогда
		Параметры.ТекущийКаталогСоздания = "log";
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСозданиеКаталоговОбмена_Завершение", ЭтаФорма, Параметры);
		НачатьСозданиеКаталога(ОписаниеОповещения,Параметры.ИмяКаталогаLOG);
		
	ИначеЕсли Параметры.ТекущийКаталогСоздания = "log" Тогда  		
		Если Параметры.ТекущийТСД = Параметры.ВсегоТСД Тогда
			
			Если Параметры.ВсеКаталогиЕсть Тогда 
				ВыполнитьПостОбработку(Параметры.ВидПостОбработки);	
			КонецЕсли;
		Иначе			
			//переход к следующему ТСД
			ПеревестиПараметрыНаСледующийТСД_КаталогиОбмена(Параметры);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение", ЭтаФорма, Параметры);
			КаталогНаДискеIN = Новый Файл(Параметры.ИмяКаталогаIN);
			КаталогНаДискеIN.НачатьПроверкуСуществования(ОписаниеОповещения);
		КонецЕсли; 	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФункции_Выгрузка

#Область Документы

&НаСервере
Функция СобратьДокумент(ДокументВыгрузки, ИспользоватьЕгаис, ВерсияЕГАИС)
	
	МетаданныеДокВыгрузки = Метаданные.Документы[ВидДокументаВыгрузки];
	
	ЧистыйДокНомер = СтрЗаменить(ДокументВыгрузки.Номер, "\", ""); //убирает критичные символы в строке
	ЧистыйДокНомер = СтрЗаменить(ЧистыйДокНомер, "/", "");
	
	ТекстФайлаДокумент = "";
	
	// ДОП.ФОРМЫ
	ДопФормыОписание = СобратьШагиКДокументу();
	
	Если ЗначениеЗаполнено(ДопФормыОписание) Тогда
		ТекстФайлаДокумент = ТекстФайлаДокумент + "docsteps;" + ДопФормыОписание + ";" + Символы.ПС;
	КонецЕсли;
	
	// ПАРАМЕТРЫ ДОКУМЕНТА
	ТекстФайлаДокумент = ТекстФайлаДокумент + "+;";//0.добавить
	ТекстФайлаДокумент = ТекстФайлаДокумент + "dk8#" + ДокументВыгрузки.УникальныйИдентификатор() + ";"; //1. ИД
	ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(ЧистыйДокНомер) + ";"; //2. номер
	ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(ДокументВыгрузки.Дата,"ДФ='yyyy-MM-dd HH:mm:ss.000'") + ";"; //3. дата и время	
	ТекстФайлаДокумент = ТекстФайлаДокумент + Строка(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(ДокументВыгрузки)) + ";"; //4. штрихкод
	ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(СокрЛП(ДокументВыгрузки.Комментарий)) + ";"; //5. комментарий	           	
	
	/////////////////////////////КЛИЕНТ
	лКлиент = Справочники.Партнеры.ПустаяСсылка();  	
	
	Если Не ЗначениеЗаполнено(лКлиент) Тогда
		Попытка лКлиент = ДокументВыгрузки.Партнер;  Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лКлиент) Тогда
		Попытка лКлиент = ДокументВыгрузки.Отправитель;  Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лКлиент) Тогда
		Попытка лКлиент = ДокументВыгрузки.Получатель;  Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лКлиент) Тогда
		Попытка лКлиент = ДокументВыгрузки.Распоряжение.Партнер;  Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лКлиент) Тогда
		Попытка лКлиент = ДокументВыгрузки.Распоряжение.Отправитель;  Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лКлиент) Тогда
		Попытка лКлиент = ДокументВыгрузки.Распоряжение.Получатель;  Исключение КонецПопытки;
	КонецЕсли;     		
	
	/////////////////////////////СКЛАД
	лСклад = Справочники.Склады.ПустаяСсылка();
	лСклад2 = Справочники.Склады.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(лСклад) Тогда
		Попытка лСклад = ДокументВыгрузки.Склад; Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лСклад) Тогда
		Попытка лСклад = ДокументВыгрузки.СкладОтправитель; Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лСклад) Тогда
		Попытка лСклад = ДокументВыгрузки.Помещение.Владелец; Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лСклад) Тогда
		Попытка лСклад = ДокументВыгрузки.ТорговыйОбъект; Исключение КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лСклад2) Тогда
		Попытка лСклад2 = ДокументВыгрузки.СкладПолучатель; Исключение КонецПопытки;
	КонецЕсли;
	
	/////////////////////////////
	
	Попытка
		ТекстФайлаДокумент = ТекстФайлаДокумент + ?(лКлиент.Пустая(), "", XMLСтрока(лКлиент)) + ";"; //6. клиент
	Исключение
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //6. клиента нет
	КонецПОпытки;	
	
	Попытка
		ТекстФайлаДокумент = ТекстФайлаДокумент + ?(лСклад.Пустая(), "", XMLСтрока(лСклад)) + ";"; //7. склад
	Исключение
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //7. склада нет
	КонецПопытки;	
	
	Попытка
		ТекстФайлаДокумент = ТекстФайлаДокумент + ДокументВыгрузки.Организация.ИНН + ";"; //8. ИНН
	Исключение
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //8. ИНН нет
	КонецПОпытки;
	
	ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //9. признак родительского документа - булево
	ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //10. id родительского документа для дочернего - строка
	ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //11. тип логики распределения по дочерним документам - (0 - с уведомлением, 1 - без уведомления)
	ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //12. Приоритет
	
	Попытка
		ТекстФайлаДокумент = ТекстФайлаДокумент + ?(лСклад2.Пустая(), "", XMLСтрока(лСклад2))+";"; //13. склад2
	Исключение
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //13. склада2 нет
	КонецПопытки;
	
	// АТРИБУТЫ ШАПКИ ДОКУМЕНТА
	ЕстьАтрибутыШапки = Ложь;
	ТекстАтрибутовШапки = СобратьАтрибутыОбъекта(ДокументВыгрузки, 1);	
	
	Если ТекстАтрибутовШапки <> "[]" Тогда
		ЕстьАтрибутыШапки = Истина;
	КонецЕсли;
	
	Попытка
		ТекстФайлаДокумент = ТекстФайлаДокумент + ДатуВTimestamp(ДокументВыгрузки.Дата) + ";" + ?(ЕстьАтрибутыШапки, "", Символы.ПС); //14. ДатаДокумента_timestamp
	Исключение
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";" + ?(ЕстьАтрибутыШапки, "", Символы.ПС); // 14. ДатаДокумента_timestamp нет
	КонецПопытки;
		
	Если ЕстьАтрибутыШапки Тогда
		ТекстФайлаДокумент = ТекстФайлаДокумент + ТекстАтрибутовШапки + ";" + Символы.ПС;	// 15. АТРИБУТЫ ШАПКИ ДОКУМЕНТА
	КонецЕсли;
	
	// ШАБЛОН
	СтрокиШаблона = ШаблоныДокументов.НайтиСтроки(Новый Структура("Код, ВидДокумента, ТипДокумента", КодШаблонаДокументаВыгрузки, ВидДокументаВыгрузки, ШаблонДокументаВыгрузки));
	
	Если СтрокиШаблона.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Код = Формат(ШаблоныДокументов.Индекс(СтрокиШаблона[0]), "ЧН=0; ЧГ=0; БЛ=0; БИ=1");
	ТекстФайлаДокумент = ТекстФайлаДокумент + СобратьШаблон(Код) + Символы.ПС; //шаблон
	
	Если СтрокиШаблона[0].ИспользоватьМаркировку Тогда		
		Если ЕстьМДЛП() Тогда
			ЭтоДокументУведомлениеОПриемкеМДЛП = "УведомлениеОПриемкеМДЛП" = ВидДокументаВыгрузки;
		Иначе
			ЭтоДокументУведомлениеОПриемкеМДЛП = Ложь;
		КонецЕсли;			
	КонецЕсли;
	
	Если СтрокиШаблона[0].ИспользоватьМаркировку И ПроверитьТребуетсяВыгрузкаМарок(ВидДокументаВыгрузки) И Не ЭтоДокументУведомлениеОПриемкеМДЛП Тогда
		
		Если СтрокиШаблона[0].МаркировкаЗапросВЦРПТ Тогда			
			ЭтоТабак = Ложь;
			ТребуетсяОбновлениеКлючаСессии = Ложь;
			
			ВидМаркируемойПродукцииДокумента = ПолучитьВидПродукцииИСДокумента(ДокументВыгрузки);
			
			Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
			Модуь_ИнтерфейсИСМПКлиентСервер = ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
			Модуь_ИнтерфейсМОТПКлиентСервер = ОбщийМодуль("ИнтерфейсМОТПКлиентСервер");
			
			Если Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = Неопределено Тогда
				Сообщить("Конфигурация 1С не поддерживает работу с Маркировкой", 
				СтатусСообщения.ОченьВажное);		
				Возврат Неопределено;
			КонецЕсли;
			
			Попытка 
				Если ВидМаркируемойПродукцииДокумента[0] = Перечисления.ВидыПродукцииИС.Табак Тогда
					ЭтоТабак = Истина;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			Попытка 
				Если ВидМаркируемойПродукцииДокумента[0] = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
					ЭтоТабак = Истина;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			Попытка 
				Если ВидМаркируемойПродукцииДокумента[0] = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
					ЭтоТабак = Истина;	
				КонецЕсли;
			Исключение
			КонецПопытки;

			//Табак
			Если ЭтоТабак Тогда
				
				ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
				Модуь_ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(ДокументВыгрузки.Организация));
				
			Иначе
				ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
				Модуь_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ДокументВыгрузки.Организация));	
			КонецЕсли; 
			
			Если ТребуетсяОбновлениеКлючаСессии Тогда				
				Сообщить("Ошибка заполнения результатов проверки документа. Не получилось обновить ключ сессии. Проверьте настройки подключения к ИС.", 
				СтатусСообщения.ОченьВажное);
				
			Иначе				
				ДокументВыгрузкиОбъект = ДокументВыгрузки.ПолучитьОбъект();
				
				Для каждого СтрШтрихкод Из ДокументВыгрузкиОбъект.ШтрихкодыУпаковок Цикл					
					ЭтоУпаковка = Ложь;
					
					//если это упаковка и ее нет в базе, Тогда обращаемся в исмп\мотп
					ЗначениеШтрихкода = СтрШтрихкод.ЗначениеШтрихкода;
					ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода);
					
					Если СтрДлина(ЗначениеШтрихкода) = 18 И Не ЭтоТабак Тогда   // обувная продукция с 18
						ЭтоУпаковка = Истина;
						
						Если ДанныеУпаковки = Неопределено Тогда
							ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода("(00)" + ЗначениеШтрихкода);
							ЗначениеШтрихкода = "(00)" + ЗначениеШтрихкода;
						КонецЕсли; 
						
					ИначеЕсли ((СтрДлина(ЗначениеШтрихкода) = 20 Или СтрДлина(ЗначениеШтрихкода) = 22) И Не ЭтоТабак И 
						(СтрНачинаетсяС(ЗначениеШтрихкода, "00") Или СтрНачинаетсяС(ЗначениеШтрихкода, "01") Или СтрНачинаетсяС(ЗначениеШтрихкода, "(00)") )) Тогда //обувная продукция с 20 и 22	
						ЭтоУпаковка = Истина;
						
					ИначеЕсли ЭтоТабак И СтрДлина(ЗначениеШтрихкода) > 29 Тогда  // табак
						ЭтоУпаковка = Истина;
					КонецЕсли; 
					
					Если (ДанныеУпаковки = Неопределено Или ДанныеУпаковки.Ссылка.ВложенныеШтрихкоды.Количество() = 0) И ЭтоУпаковка Тогда
						СсылкаНаШтрихкод = СформироватьЗапросКСервисуИСМПиСоздатьСправочникСсылкаМарка(ЗначениеШтрихкода, ЭтоТабак, ДокументВыгрузки, ВидМаркируемойПродукцииДокумента[0]);
						
						Если СсылкаНаШтрихкод <> Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка() Тогда 
							СтрШтрихкод.ШтрихкодУпаковки = СсылкаНаШтрихкод;
						КонецЕсли;						
					КонецЕсли;					
				КонецЦикла; 								
				
				ДокументВыгрузкиОбъект.Записать();				
			КонецЕсли; 
		КонецЕсли;
		
		ДобавитьМаркированныйТоварВТекстДокумента(ТекстФайлаДокумент, ДокументВыгрузки);
		
	ИначеЕсли СтрокиШаблона[0].ИспользоватьМаркировку И ЭтоДокументУведомлениеОПриемкеМДЛП Тогда	
		ПолучитьСтрокиДокументаМДЛП(СтрокиШаблона[0], ТекстФайлаДокумент, ДокументВыгрузки);	
		
	Иначе		
		Если Не ИспользоватьЕгаис Тогда
			// ПОДБОР
			Если СокрЛП(ИмяТЧДокументаПодбор) <> "" Тогда				
				Попытка
					ЕстьКоличествоУпаковок = МетаданныеДокВыгрузки.ТабличныеЧасти[ИмяТЧДокументаПодбор].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено;
				Исключение
					ЕстьКоличествоУпаковок = Ложь;
				КонецПопытки;
				
				Попытка
					СерииОтдельно = ДокументВыгрузки.Серии.Количество() > 0;
				Исключение
				    СерииОтдельно = Ложь;
				КонецПопытки;
				
				Если СерииОтдельно Тогда
					ДанныеПоТоварам = ПолучитьТаблицуТЗНоменклатурССериямиПоОтдельнойТЧ(ДокументВыгрузки);
				Иначе
					ДанныеПоТоварам = ДокументВыгрузки[ИмяТЧДокументаПодбор];
				КонецЕсли; 
				
				Сч = 0;
				
				Для каждого СтрокаТовара Из ДанныеПоТоварам Цикл
					Если Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда Продолжить; КонецЕсли;
					
					Сч = Сч + 1;
					
					Если СерииОтдельно Тогда
						НомерСтроки = Сч;						
					Иначе
						НомерСтроки = СтрокаТовара.НомерСтроки;
					КонецЕсли; 
					
					Попытка
						Если ВидДокументаВыгрузки = "ЗаказКлиента" Или ВидДокументаВыгрузки = "ЗаказПоставщику" Тогда
							Если СтрокаТовара.Отменено Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрокаТовара.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					Исключение КонецПопытки;					
					
					ТекстФайлаДокумент = ТекстФайлаДокумент + НомерСтроки + ";S;"; //префикс приемки
					
					Если СтрокаТовара.Характеристика.Пустая() Тогда
						ИдХарактеристики = "00000000-0000-0000-0000-000000000000";
					Иначе
						ИдХарактеристики = XMLСтрока(СтрокаТовара.Характеристика);
					КонецЕсли;
					
					ТекстФайлаДокумент = ТекстФайлаДокумент + "8U-" + XMLСтрока(СтрокаТовара.Номенклатура) + ИдХарактеристики + ";"; // номенклатура
									
					ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // штрихкод
					
					Попытка
						Если СтрокиШаблона[0].ИспользованиеЯчеекПодбор>0 Тогда
							ТекстФайлаДокумент = ТекстФайлаДокумент + ?(ВыгружатьВКодЯчейки = 1, СтрокаТовара.Ячейка.Код, Строка(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(СтрокаТовара.Ячейка))) + ";"; //ячейка
						Иначе
							ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // нет ячеек
						КонецЕсли;
					Исключение
						ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // нет ячеек
					КонецПопытки;
					
					// серия
					Попытка 
						СерияТовара = СтрокаТовара.Серия;
						
						//Если СтрокиШаблона[0].ОпределениеСерии = 0 Тогда
						//	ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(СокрЛП(СерияТовара.Номер)) + ";"; 
						//	
						//ИначеЕсли СтрокиШаблона[0].ОпределениеСерии = 1 Тогда
						//	ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(СерияТовара.ГоденДо, "ДФ=dd.MM.yy") + ";"; 
						//	
						//ИначеЕсли СтрокиШаблона[0].ОпределениеСерии = 4 Тогда							
						//	СерияGS1 = ""; 
						//	
						//	Если ЗначениеЗаполнено(СерияТовара.ДатаПроизводства) Тогда
						//		СерияGS1 = СерияGS1 + "[11]" + Формат(СерияТовара.ДатаПроизводства, "ДФ=yyMMdd");
						//	КонецЕсли;
						//	
						//	Если ЗначениеЗаполнено(СерияТовара.ГоденДо) Тогда
						//		СерияGS1 = СерияGS1 + "[17]" + Формат(СерияТовара.ГоденДо, "ДФ=yyMMdd");
						//	КонецЕсли;
						//	
						//	Если ЗначениеЗаполнено(СерияТовара.Номер) Тогда
						//		СерияGS1 = СерияGS1 + "[10]" + ЧистаяСтрока(СокрЛП(СерияТовара.Номер));	
						//	КонецЕсли;	
						//	
						//	ТекстФайлаДокумент = ТекстФайлаДокумент + СокрЛП(СерияGS1) + ";";
						//	
						//ИначеЕсли СтрокиШаблона[0].ОпределениеСерии = 5 Тогда
	                        ЗначенияSNTypesСерии = ПолучитьЗначенияSNTypesСерии(СтрокаТовара.Номенклатура, СерияТовара);
							ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(СокрЛП(ЗначенияSNTypesСерии)) + ";";
							
						//Иначе
						//	ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(СокрЛП(СерияТовара.Номер)) + ";";
						//КонецЕсли;						
						
					Исключение
						ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // нет серий
					КонецПопытки;
					
					Попытка
						Если ЕстьКоличествоУпаковок И (НеИспользоватьПересчетУпаковок Или СтрокиШаблона[0].НеИспользоватьПересчетУпаковок) Тогда
							Если СерииОтдельно Тогда
								ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(СтрокаТовара.Количество, "ЧРД=.; ЧН=0; ЧГ=0") + ";"; //задание
							Иначе
								ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(СтрокаТовара.КоличествоУпаковок, "ЧРД=.; ЧН=0; ЧГ=0") + ";"; //задание	
							КонецЕсли; 
						Иначе
							ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(СтрокаТовара.Количество, "ЧРД=.; ЧН=0; ЧГ=0") + ";"; //задание
						КонецЕсли;
						
					Исключение
						ТекстФайлаДокумент = ТекстФайлаДокумент + "999;"; // нет количества, но надо работать с документом, например установка цен номенклатуры
					КонецПопытки;
					
					ОстатокДокумент = ПолучитьОстатокДокумент(СтрокаТовара.Номенклатура, СтрокаТовара.Характеристика, ДокументВыгрузки);
					
					Если ОстатокДокумент = Неопределено Или НеОтображатьОстатки Тогда
						ТекстФайлаДокумент = ТекстФайлаДокумент + "0;"; //лимит
					Иначе					
						ТекстФайлаДокумент = ТекстФайлаДокумент + ОстатокДокумент + ";";
					КонецЕсли;
					
					ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // 9.КМ
					ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // 10.палета
					ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // 11.короб
					
					ТекстФайлаДокумент = ТекстФайлаДокумент + СобратьАтрибутыОбъекта(СтрокаТовара, 0) + ";"; // 12. атрибуты строки					
					ТекстФайлаДокумент = ТекстФайлаДокумент + Символы.ПС;
				КонецЦикла;
			КонецЕсли;
			
			// ПРИЕМКА
			Если СокрЛП(ИмяТЧДокументаПриемка) <> "" Тогда				
				Попытка
					ЕстьКоличествоУпаковок = МетаданныеДокВыгрузки.ТабличныеЧасти[ИмяТЧДокументаПриемка].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено;
				Исключение
					ЕстьКоличествоУпаковок = Ложь;
				КонецПопытки;
				
				Для каждого СтрокаТовара Из ДокументВыгрузки[ИмяТЧДокументаПриемка] Цикл
					ТекстФайлаДокумент = ТекстФайлаДокумент + СтрокаТовара.НомерСтроки + ";I;"; //префикс размещения
					
					Если СтрокаТовара.Характеристика.Пустая() Тогда
						ИдХарактеристики = "00000000-0000-0000-0000-000000000000";
					Иначе
						ИдХарактеристики = XMLСтрока(СтрокаТовара.Характеристика);
					КонецЕсли;
					
					ТекстФайлаДокумент = ТекстФайлаДокумент + "8U-" + XMLСтрока(СтрокаТовара.Номенклатура) + ИдХарактеристики + ";"; // номенклатура
					
					ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // штрихкод в задании не нужен
					
					Попытка
						Если СтрокиШаблона[0].ИспользованиеЯчеекПриемка>0 Тогда
							ТекстФайлаДокумент = ТекстФайлаДокумент + ?(ВыгружатьВКодЯчейки = 1, СтрокаТовара.Ячейка.Код, Строка(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(СтрокаТовара.Ячейка))) + ";"; //ячейка
						Иначе
							ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // нет ячеек
						КонецЕсли;	
					Исключение
						ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // нет ячеек
					КонецПопытки;
					
					// серия
					Попытка						
						СерияТовара = СтрокаТовара.Серия;
						
						//Если СтрокиШаблона[0].ОпределениеСерии = 0 Тогда
						//	ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(СокрЛП(СерияТовара.Номер)) + ";";
						//	
						//ИначеЕсли СтрокиШаблона[0].ОпределениеСерии = 1 Тогда
						//	ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(СерияТовара.ГоденДо, "ДФ=dd.MM.yy") + ";"; 
						//	
						//ИначеЕсли СтрокиШаблона[0].ОпределениеСерии = 4 Тогда							
						//	СерияGS1 = "";
						//	
						//	Если ЗначениеЗаполнено(СерияТовара.ДатаПроизводства) Тогда
						//		СерияGS1 = СерияGS1 + "[11]" + Формат(СерияТовара.ДатаПроизводства, "ДФ=yyMMdd");
						//	КонецЕсли;
						//	
						//	Если ЗначениеЗаполнено(СерияТовара.ГоденДо) Тогда
						//		СерияGS1 = СерияGS1 + "[17]" + Формат(СерияТовара.ГоденДо, "ДФ=yyMMdd");
						//	КонецЕсли;
						//	
						//	Если ЗначениеЗаполнено(СерияТовара.Номер) Тогда
						//		СерияGS1 = СерияGS1 + "[10]" + ЧистаяСтрока(СокрЛП(СерияТовара.Номер));	
						//	КонецЕсли;
						//	
						//	ТекстФайлаДокумент = ТекстФайлаДокумент + СокрЛП(СерияGS1) + ";";
						//	
						//ИначеЕсли СтрокиШаблона[0].ОпределениеСерии = 5 Тогда
	                        ЗначенияSNTypesСерии = ПолучитьЗначенияSNTypesСерии(СтрокаТовара.Номенклатура, СерияТовара);
							ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(СокрЛП(ЗначенияSNTypesСерии)) + ";";	
							
						//Иначе
						//	ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(СокрЛП(СерияТовара.Номер)) + ";";
						//КонецЕсли;
						
					Исключение
						ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // нет серий
					КонецПопытки; 								
					
					// количество
					Попытка						
						Если ЕстьКоличествоУпаковок И (НеИспользоватьПересчетУпаковок Или СтрокиШаблона[0].НеИспользоватьПересчетУпаковок) Тогда
							ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(СтрокаТовара.КоличествоУпаковок, "ЧРД=.; ЧН=0; ЧГ=0") + ";"; //задание
						Иначе
							ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(СтрокаТовара.Количество, "ЧРД=.; ЧН=0; ЧГ=0") + ";"; //задание
						КонецЕсли;
						
					Исключение
						ТекстФайлаДокумент = ТекстФайлаДокумент + "999;"; // нет количества, но надо работать с документом, например установка цен номенклатуры
					КонецПопытки;
					
					ТекстФайлаДокумент = ТекстФайлаДокумент + "0;"; //лимит (в размещении всегда 0)
					
					ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // 9.КМ
					ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // 10.палета
					ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // 11.короб
					
					ТекстФайлаДокумент = ТекстФайлаДокумент + СобратьАтрибутыОбъекта(СтрокаТовара, 2) + ";"; // 12. атрибуты строки					
					ТекстФайлаДокумент = ТекстФайлаДокумент + Символы.ПС;					
				КонецЦикла;
			КонецЕсли;
			
		Иначе // ЕГАИС
			ЕстьТЧМарок = МетаданныеДокВыгрузки.ТабличныеЧасти.Найти("АкцизныеМарки") <> Неопределено;
			ЕстьРеквизитИдентификаторСтроки = МетаданныеДокВыгрузки.ТабличныеЧасти[ИмяТЧДокументаПодбор].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено;
			
			// ПОДБОР
			Если СокрЛП(ИмяТЧДокументаПодбор) <> "" Тогда
				Для каждого СтрокаТовара Из ДокументВыгрузки[ИмяТЧДокументаПодбор] Цикл
					КоличествоБезМарок   = СтрокаТовара.Количество;
					АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
					
					//Марки формат 3.0
					Если ВерсияЕГАИС = 1 И ТипЗнч(ДокументВыгрузки) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда						
						ТЗМарок = ПолучитьМаркиВходящейТТН_ЕГАИС(ДокументВыгрузки);
						
						СтруктураПоискаМарок = Новый Структура("АлкогольнаяПродукция, Номенклатура, Характеристика, Серия,Справка2", 
											   АлкогольнаяПродукция, СтрокаТовара.Номенклатура, СтрокаТовара.Характеристика, 
											   СтрокаТовара.Серия, СтрокаТовара.Справка2);
						СтрокиПоискаМарок    = ТЗМарок.НайтиСтроки(СтруктураПоискаМарок);
						
						Для каждого СтрокаМарок Из СтрокиПоискаМарок Цикл		
							Если Не КоличествоБезМарок > 0 Тогда Продолжить; КонецЕсли;
							
							ТекстФайлаДокумент = ТекстФайлаДокумент + СтрокаТовара.НомерСтроки + ";E;"; // признак ЕГАИС
							ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(АлкогольнаяПродукция.Наименование) + ";";
							ТекстФайлаДокумент = ТекстФайлаДокумент + "8e-" + АлкогольнаяПродукция.УникальныйИдентификатор() + ";";
							ТекстФайлаДокумент = ТекстФайлаДокумент + СокрЛП(АлкогольнаяПродукция.Код) + ";";
							ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(АлкогольнаяПродукция.Производитель.Наименование) + ";";
							ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //Импортер не используется
							ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(АлкогольнаяПродукция.Объем, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")  +";";
							ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(АлкогольнаяПродукция.Крепость, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ";";
							ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(АлкогольнаяПродукция.ВидПродукции.Наименование) + ";";
							ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(1, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ";";
							ТекстФайлаДокумент = ТекстФайлаДокумент + СтрокаМарок.Марка + ";";
							ТекстФайлаДокумент = ТекстФайлаДокумент + ТоварСопоставленОдинКОдному(АлкогольнаяПродукция) + ";";
							ТекстФайлаДокумент = ТекстФайлаДокумент + "6" + ";";//количество единиц в коробе
							ТекстФайлаДокумент = ТекстФайлаДокумент + "1" + ";"; //требуется ввод справки А по товару
							ТекстФайлаДокумент = ТекстФайлаДокумент + "1" + ";"; //требуется ввод справки Б по товару
							ТекстФайлаДокумент = ТекстФайлаДокумент + "1" + ";"; //требуется ввод даты розлива по товару
							
							ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(СтрокаМарок.Палета) + ";"; //палета
							ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(СтрокаМарок.Короб) + ";"; //короб
							ТекстФайлаДокумент = ТекстФайлаДокумент + Символы.ПС;
							
							КоличествоБезМарок = КоличествоБезМарок - 1;
						КонецЦикла;
					КонецЕсли;					
					
					Если КоличествоБезМарок > 0 Тогда						
						ТекстФайлаДокумент = ТекстФайлаДокумент + СтрокаТовара.НомерСтроки + ";E;"; // признак ЕГАИС
						ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(АлкогольнаяПродукция.Наименование) + ";";
						
						СписокМарок = СформироватьСписокНепроверяемыхМарокЕГАИС();
						
						Если СписокМарок.НайтиПоЗначению(АлкогольнаяПродукция.ВидПродукции) <> Неопределено Тогда
							лТекущаяНоменклатура = ПолучитьНоменклатуруПоЕГАИС(АлкогольнаяПродукция);
							ТекстФайлаДокумент = ТекстФайлаДокумент + "8U-" + СокрЛП(лТекущаяНоменклатура.УникальныйИдентификатор()) + СокрЛП(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка().УникальныйИдентификатор()); 
						Иначе	 
							ТекстФайлаДокумент = ТекстФайлаДокумент + "8e-" + АлкогольнаяПродукция.УникальныйИдентификатор() + ";";
						КонецЕсли;
						
						ТекстФайлаДокумент = ТекстФайлаДокумент + СокрЛП(АлкогольнаяПродукция.Код) + ";";							
						ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(АлкогольнаяПродукция.Производитель.Наименование) + ";";
						ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //Импортер не используется
						ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(АлкогольнаяПродукция.Объем, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ";";
						ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(АлкогольнаяПродукция.Крепость, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ";";
						ТекстФайлаДокумент = ТекстФайлаДокумент + ЧистаяСтрока(АлкогольнаяПродукция.ВидПродукции.Наименование) + ";";
						ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(КоличествоБезМарок, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ";";
						ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //марка
						ТекстФайлаДокумент = ТекстФайлаДокумент + ТоварСопоставленОдинКОдному(АлкогольнаяПродукция) + ";";
						ТекстФайлаДокумент = ТекстФайлаДокумент + "6" + ";";//количество единиц в коробе
						ТекстФайлаДокумент = ТекстФайлаДокумент + "1" + ";"; //требуется ввод справки А по товару
						ТекстФайлаДокумент = ТекстФайлаДокумент + "1" + ";"; //требуется ввод справки Б по товару
						ТекстФайлаДокумент = ТекстФайлаДокумент + "1" + ";"; //требуется ввод даты розлива по товару
						
						ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //палета
						ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //короб
						
						
						ТекстФайлаДокумент = ТекстФайлаДокумент + Символы.ПС;
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстФайлаДокумент;
	
КонецФункции  

&НаСервереБезКонтекста
Функция ПолучитьЗначенияSNTypesСерии(лТовар, лСерия, РасчитыватьГоденДо = Ложь)
		
	МассивТекущейСерии = Новый Массив;
	
	Если ЗначениеЗаполнено(лТовар) И ЗначениеЗаполнено(лСерия) Тогда
		
		Если ЗначениеЗаполнено(лТовар.ВидНоменклатуры.ВладелецСерий) Тогда
			ТекущийВладелецСерий = лТовар.ВидНоменклатуры.ВладелецСерий;
		Иначе
			ТекущийВладелецСерий = лТовар.ВидНоменклатуры;
		КонецЕсли;		
		
		Попытка
			Если ТекущийВладелецСерий.ИспользоватьНомерСерии Тогда //(10)
				МассивТекущейСерии.Добавить(СокрЛП(лСерия.Номер));
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Если ТекущийВладелецСерий.ИспользоватьДатуПроизводстваСерии Тогда  //(11)
				МассивТекущейСерии.Добавить(Формат(лСерия.ДатаПроизводства, "ДФ=dd.MM.yy"));
			КонецЕсли; 	
		Исключение
		КонецПопытки;
		
		Попытка
			Если ТекущийВладелецСерий.ИспользоватьСрокГодностиСерии Тогда	//(17)
				Если РасчитыватьГоденДо И ЗначениеЗаполнено(лСерия.ДатаПроизводства) И ЗначениеЗаполнено(лТовар.СрокГодности) Тогда // расчет по настройке
					ГоденДо = РассчитатьГоденДоСерии(лТовар, лСерия.ДатаПроизводства);
					МассивТекущейСерии.Добавить(Формат(ГоденДо,"ДФ=dd.MM.yy"));
					
				Иначе
					МассивТекущейСерии.Добавить(Формат(лСерия.ГоденДо,"ДФ=dd.MM.yy"));
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	СтрокаJSON = "";
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.УстановитьСтроку(ПараметрыJSON);

	ЗаписатьJSON(Запись, МассивТекущейСерии, НастройкиСериализации);
	СтрокаJSON = Запись.Закрыть();

	Возврат СтрокаJSON;

КонецФункции

&НаСервереБезКонтекста
Процедура РазобратьСтрокуСерииПоSNTypes(СтрокаСерии, ДатаПроизводства11, ДатаОкончанияСрокаГодности17, НомерСерии, лТовар, РасчитатьГоденДо = Ложь)
	
	Если НЕ ЗначениеЗаполнено(лТовар) Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(лТовар.ВидНоменклатуры.ВладелецСерий) Тогда
		ТекущийВладелецСерий = лТовар.ВидНоменклатуры.ВладелецСерий;
	Иначе
		ТекущийВладелецСерий = лТовар.ВидНоменклатуры;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаСерии);
	МассивТекущейСерии = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ПорядковыйНомерМассива = 0;
	
	Попытка
		Если ТекущийВладелецСерий.ИспользоватьНомерСерии Тогда //(10)
			ПорядковыйНомерМассива = ПорядковыйНомерМассива + 1;
			НомерСерии = МассивТекущейСерии[ПорядковыйНомерМассива - 1];		
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если ТекущийВладелецСерий.ИспользоватьДатуПроизводстваСерии Тогда  //(11)
			ПорядковыйНомерМассива = ПорядковыйНомерМассива + 1;
			ДатаПроизводства11 = МассивТекущейСерии[ПорядковыйНомерМассива - 1];    //07.05.21	
			ДатаПроизводства11 = СтрЗаменить(ДатаПроизводства11, ".", "");				
			ДатаПроизводства11 = РасшифроватьМаскуВвода("dd.mm.yy", ДатаПроизводства11);
		КонецЕсли; 	
	Исключение
	КонецПопытки;
	
	Попытка
		Если ТекущийВладелецСерий.ИспользоватьСрокГодностиСерии Тогда	//(17)
			Если РасчитатьГоденДо И ЗначениеЗаполнено(ДатаПроизводства11) И ЗначениеЗаполнено(лТовар.СрокГодности) Тогда // расчет по настройке
				ДатаОкончанияСрокаГодности17 = РассчитатьГоденДоСерии(лТовар, ДатаПроизводства11);				
			Иначе
				ПорядковыйНомерМассива = ПорядковыйНомерМассива+1;
				ДатаОкончанияСрокаГодности17 = МассивТекущейСерии[ПорядковыйНомерМассива - 1];	 //07.05.21
				ДатаОкончанияСрокаГодности17 = СтрЗаменить(ДатаОкончанияСрокаГодности17, ".", "");				
				ДатаОкончанияСрокаГодности17 = РасшифроватьМаскуВвода("dd.mm.yy", ДатаОкончанияСрокаГодности17);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасшифроватьМаскуВвода(Маска, Серия)
	
	НоваяМаска = СтрЗаменить(Маска, ".", "");	

	//Считаем год
	гПозиция = Найти(НоваяМаска, "y"); //Позиция года в серии
	гДлина = СтрЧислоВхождений(НоваяМаска, "y");
	
	//Считаем месяц
	мПозиция = Найти(НоваяМаска, "m"); //Позиция года в серии
	мДлина = СтрЧислоВхождений(НоваяМаска, "m");
	
	//Считаем день
	дПозиция = Найти(НоваяМаска, "d"); //Позиция года в серии
	дДлина = СтрЧислоВхождений(НоваяМаска, "d");
	
	Год = Сред(Серия, гПозиция, гДлина);
	Месяц = Сред(Серия, мПозиция, мДлина);
	День = Сред(Серия, дПозиция, дДлина);
	
	Если СтрДлина(Год) = 2 Тогда
		Год = "20" + Год;
	КонецЕсли;
	
	ДатаСерии = Дата(Число(Год), Число(Месяц), Число(День));
	
	Возврат ДатаСерии;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьГоденДоСерии(лТовар, лДатаПроизводства)
	
	СрокГодности   = лТовар.СрокГодности; 
	СрокГодностиЕд = лТовар.ЕдиницаИзмеренияСрокаГодности;
	ГоденДо17      = Дата(1,1,1);
	
	Если СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Секунда Тогда
		ГоденДо17 = лДатаПроизводства + СрокГодности * 1;
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Минута Тогда
		ГоденДо17 = лДатаПроизводства + СрокГодности * 60;
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
		ГоденДо17 = лДатаПроизводства + СрокГодности * 60*60;
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.День Тогда
		ГоденДо17 = лДатаПроизводства + СрокГодности * 60*60*12;
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Сутки Тогда
		ГоденДо17 = лДатаПроизводства + СрокГодности * 60*60*24;
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Месяц Тогда
		ГоденДо17 = ДобавитьМесяц(лДатаПроизводства, СрокГодности * 1);
	ИначеЕсли СрокГодностиЕд = Перечисления.ЕдиницыИзмеренияВремени.Год Тогда
		ГоденДо17 = ДобавитьМесяц(лДатаПроизводства, СрокГодности * 12);
	КонецЕсли; 
	
	Возврат ГоденДо17;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДокументЕслиКаталогиДоступны()
	
	Если ДокументыВыгрузки = Неопределено Тогда
		ПоказатьСообщениеПользователю("Не выбраны документы для выгрузки!");
		Возврат;
	КонецЕсли;
	
	Если ДокументыВыгрузки.Количество() = 0 Или ДокументыВыгрузки[0].ДокументВыгрузки = Неопределено Тогда
		ПоказатьСообщениеПользователю("Не выбраны документы для выгрузки!");
		Возврат;
	КонецЕсли;	                 	
	
	СтрокиШаблона = ШаблоныДокументов.НайтиСтроки(Новый Структура("Код, ВидДокумента, ТипДокумента", КодШаблонаДокументаВыгрузки, ВидДокументаВыгрузки, ШаблонДокументаВыгрузки));
	
	Если СтрокиШаблона.Количество() = 0 Тогда
		ПоказатьСообщениеПользователю("Не найден шаблон " + ШаблонДокументаВыгрузки);
		Возврат;
	КонецЕслИ;	
	
	ИспользоватьЕГАИС            = Ложь;
	ВерсияЕГАИС                  = 0;
	ВыгружатьТоварыСДокументом   = Ложь;
	ВыгружатьЯчейкиСДокументом   = Ложь;
	ВыгружатьДопФормыСДокументом = Ложь;
	
	Попытка
		Если СтрокиШаблона[0].ИспользоватьЕГАИС Тогда
			ИспользоватьЕГАИС = Истина;
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка 
		ВерсияЕГАИС = СтрокиШаблона[0].ВерсияЕГАИС;
	Исключение 
	КонецПопытки;
	
	Попытка 
		Если СтрокиШаблона[0].ВыгружатьТоварыСДокументом Тогда
			ВыгружатьТоварыСДокументом = Истина;
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка 
		Если СтрокиШаблона[0].ВыгружатьЯчейкиСДокументом Тогда
			ВыгружатьЯчейкиСДокументом = Истина;
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка 
		Если СтрокиШаблона[0].ВыгружатьДопФормыСДокументом Тогда
			ВыгружатьДопФормыСДокументом = Истина;
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Сч = 0;	
	Для каждого СтрокаДокументВыгрузки Из ДокументыВыгрузки Цикл		
		Сч = Сч + 1;	
		ДокументВыгрузки = СтрокаДокументВыгрузки.ДокументВыгрузки;
		
		#Область ТОВАРЫ
		Если ВыгружатьТоварыСДокументом Тогда
			Если Не ИспользоватьЕГАИС Тогда
				АдресДанныхТовары = ЗаполнитьТаблицуТоварыИзДокумента(ДокументВыгрузки);	
			Иначе
				АдресДанныхТовары = ЗаполнитьТаблицуТоварыИзДокументаЕГАИС(ДокументВыгрузки);
			КонецЕсли;
			
			ЕстьНоменклатураПоМДЛП = Ложь;
			
			Если ЭтоДокументМДЛП(ВидДокументаВыгрузки) Тогда
				ПроверкаНаНаличиеНоменклатурыУДокументаМДЛП(ВидДокументаВыгрузки, ЕстьНоменклатураПоМДЛП, ДокументВыгрузки);
			КонецЕсли;
			
			Если Не Товары.Количество() = 0 И Не ЕстьНоменклатураПоМДЛП Тогда
				// товары
				тхт_тв = Новый ТекстовыйДокумент;
				ТекстФайлаТовары = "+" + Символы.ПС;
				ТекстФайлаТовары = ТекстФайлаТовары + "" + Атрибут1Синоним + ";" + Атрибут2Синоним + ";" + Атрибут3Синоним + ";" + Атрибут4Синоним + ";" + Атрибут5Синоним + ";" + Атрибут6Синоним + ";" + Атрибут7Синоним + ";" + Атрибут8Синоним + ";" + Атрибут9Синоним + ";" + Атрибут10Синоним + ";";
				
				// доп. типы цен наименования
				ТекстФайлаТовары = ТекстФайлаТовары + ?(ЗначениеЗаполнено(ДопТипЦен1), ЧистаяСтрока(ДопТипЦен1), "") + ";";
				ТекстФайлаТовары = ТекстФайлаТовары + ?(ЗначениеЗаполнено(ДопТипЦен2), ЧистаяСтрока(ДопТипЦен2), "") + ";";
				ТекстФайлаТовары = ТекстФайлаТовары + ?(ЗначениеЗаполнено(ДопТипЦен3), ЧистаяСтрока(ДопТипЦен3), "") + ";";
				
				ТекстФайлаТовары = ТекстФайлаТовары + Символы.ПС;
				
				СтруктураПараметров = Новый Структура("ИДТСД, АдресДанных, АртикулВставитьВНазвание, НеОтображатьОстатки", 
													   ИДТСД, АдресДанныхТовары, АртикулВставитьВНазвание, НеОтображатьОстатки);
				ДобавитьВСтруктуруАтрибуты(СтруктураПараметров);
				ДобавитьВСтруктуруДопТипыЦен(СтруктураПараметров);
				ТекстФайлаТовары = ТекстФайлаТовары + ВыгрузитьПорциюТоваров(1, Товары.Количество(), СтруктураПараметров);
				
				тхт_тв.УстановитьТекст(ТекстФайлаТовары);
				тхт_тв.ВставитьСтроку(0, "" + Формат(тхт_тв.КоличествоСтрок(), "ЧГ=0"));
				ИмяФайлаВыгрузкиТВ = РазделительПути + Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_Arts.dm";
				
				
				Если ТипОбмена = "1" Тогда // ftp					
					ОтправитьФайлНаFTP(тхт_тв, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_Arts.dm"+"temp");	
					
				ИначеЕсли ТипОбмена = "0" Тогда	// локальный каталог				
					Если ИДТСД = "" Тогда
						тхт_тв.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиТВ, КодировкаТекста.UTF8);
					Иначе	
						тхт_тв.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД +РазделительПути + "in" + ИмяФайлаВыгрузкиТВ, КодировкаТекста.UTF8);
					КонецЕсли;
					
					Если МассоваяВыгрузка Тогда
						Если ИДТСД = "" Тогда
							ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиТВ, ИДТСД, ИмяФайлаВыгрузкиТВ);
						Иначе
							ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиТВ, ИДТСД, ИмяФайлаВыгрузкиТВ);
						КонецЕсли;
					КонецЕсли;     
					
				ИначеЕсли ТипОбмена = "2" Тогда	// Яндекс-диск				
					ИмяФайлаВыгрузкиТВ = Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_Arts.dm";
					ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузкиТВ;
					тхт_тв.Записать(ИмяФайла, КодировкаТекста.UTF8);
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
					
					Если ИДТСД = "" Тогда
						ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузкиТВ, АдресВХ, Истина); 
					Иначе	
						Если МассоваяВыгрузка Тогда
							Для каждого Строка Из СписокТСД Цикл
								АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
								ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузкиТВ, АдресВХ, Истина);	
							КонецЦикла;	
						Иначе	
							ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузкиТВ, АдресВХ, Истина);
						КонецЕсли;	
					КонецЕсли; 
					
					УдалитьФайлы(АдресВХ);
					УдалитьФайлы(ИмяФайла);					
				КонецЕсли; 
				
				// штрихкоды
				тхт_шк = Новый ТекстовыйДокумент;
				
				ТекстФайлаШтрихкоды = "+" + Символы.ПС;
				АдресДанныхШтрихкоды = ЗаполнитьТаблицуШтрихкодыИзДокумента(ДокументВыгрузки);
				
				Если Штрихкоды.Количество() > 0 Тогда
					ТекстФайлаШтрихкоды = ТекстФайлаШтрихкоды + ВыгрузитьПорциюШтрихкодов(1, Штрихкоды.Количество(), Новый Структура("АдресДанных", АдресДанныхШтрихкоды));
					тхт_шк.УстановитьТекст(ТекстФайлаШтрихкоды);
					тхт_шк.ВставитьСтроку(0, "" + Формат(тхт_шк.КоличествоСтрок(), "ЧГ=0"));
					ИмяФайлаВыгрузкиШК = РазделительПути + Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_BarCodes.dm";
					
					Если ТипОбмена = "1" Тогда // ftp						
						ОтправитьФайлНаFTP(тхт_шк, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_BarCodes.dm" + "temp");	
						
					ИначеЕсли ТипОбмена = "0" Тогда	// локальный каталог					
						Если ИДТСД = "" Тогда
							тхт_шк.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиШК, КодировкаТекста.UTF8);	
						Иначе	
							тхт_шк.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиШК, КодировкаТекста.UTF8);
						КонецЕсли;
						
						Если МассоваяВыгрузка Тогда
							Если ИДТСД = "" Тогда
								ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиШК, ИДТСД, ИмяФайлаВыгрузкиШК);
							Иначе
								ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиШК, ИДТСД, ИмяФайлаВыгрузкиШК);
							КонецЕсли;	
						КонецЕсли;    
						
					ИначеЕсли ТипОбмена = "2" Тогда	// Яндекс-диск					
						ИмяФайлаВыгрузкиШК = Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_BarCodes.dm";
						ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузкиШК;
						тхт_шк.Записать(ИмяФайла, КодировкаТекста.UTF8);
						АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
						
						Если ИДТСД = "" Тогда
							ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузкиШК, АдресВХ, Истина); 
						Иначе	
							Если МассоваяВыгрузка Тогда
								Для каждого Строка Из СписокТСД Цикл
									АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
									ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузкиШК, АдресВХ, Истина);	
								КонецЦикла;	
							Иначе	
								ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузкиШК, АдресВХ, Истина);
							КонецЕсли;	
						КонецЕсли;
						
						УдалитьФайлы(АдресВХ);
						УдалитьФайлы(ИмяФайла);						
					КонецЕсли;	
				КонецЕсли;									
			КонецЕсли;			
		КонецЕсли;  
		#КонецОбласти
		
		#Область ЯЧЕЙКИ
		Если ВыгружатьЯчейкиСДокументом Тогда			
			Запись = ЗаполнитьТаблицуЯчейкиИЗДокумента(ДокументВыгрузки);
			КоличествоЯчейки  = Запись.Количество;
			АдресДанныхЯчейки = Запись.Адрес;
			
			Если Не КоличествоЯчейки = 0 Тогда
				тхт_яч = Новый ТекстовыйДокумент;
				ТекстФайлаЯчейки = "+" + Символы.ПС;
				ТекстФайлаЯчейки = ТекстФайлаЯчейки + ВыгрузитьПорциюЯчеек(1, КоличествоЯчейки, АдресДанныхЯчейки); 
				тхт_яч.УстановитьТекст(ТекстФайлаЯчейки);
				тхт_яч.ВставитьСтроку(0, "" + Формат(тхт_яч.КоличествоСтрок(), "ЧГ=0"));
				ИмяФайлаВыгрузкиЯЧ = РазделительПути + Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_Cells.dm";
				
				Если ТипОбмена = "1" Тогда // ftp					
					ОтправитьФайлНаFTP(тхт_яч, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_Cells.dm" + "temp");	
					
				ИначеЕсли ТипОбмена = "0" Тогда	// локальный каталог				
					Если ИДТСД = "" Тогда
						тхт_яч.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиЯЧ, КодировкаТекста.UTF8);
					Иначе	
						тхт_яч.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиЯЧ, КодировкаТекста.UTF8);
					КонецЕсли;
					
					Если МассоваяВыгрузка Тогда
						Если ИДТСД = "" Тогда
							ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиЯЧ, ИДТСД, ИмяФайлаВыгрузкиЯЧ);
						Иначе
							ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиЯЧ, ИДТСД, ИмяФайлаВыгрузкиЯЧ);
						КонецЕсли;	
					КонецЕсли;
					
				ИначеЕсли ТипОбмена = "2" Тогда // Яндекс-диск					
					ИмяФайлаВыгрузкиЯЧ = Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_Cells.dm";
					ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузкиЯЧ;
					тхт_яч.Записать(ИмяФайла, КодировкаТекста.UTF8);
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
					
					Если ИДТСД = "" Тогда
						ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузкиЯЧ, АдресВХ, Истина); 
					Иначе	
						Если МассоваяВыгрузка Тогда
							Для каждого Строка Из СписокТСД Цикл
								АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
								ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузкиЯЧ, АдресВХ, Истина);	
							КонецЦикла;	
						Иначе	
							ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузкиЯЧ, АдресВХ, Истина);
						КонецЕсли;	
					КонецЕсли;
					
					УдалитьФайлы(АдресВХ);
					УдалитьФайлы(ИмяФайла);						
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли; 
		#КонецОбласти
		
		#Область ДОП_ФОРМЫ_ШАБЛОНА
		Если ВыгружатьДопФормыСДокументом Тогда
			// доп.формы
			тхт = Новый ТекстовыйДокумент();
			тхт.ДобавитьСтроку("" + ?(ОчиститьДопШаги, "-", "+"));
			
			Для каждого ДопШаг Из ДополнительныеШаги Цикл
				Код = Формат(ДополнительныеШаги.Индекс(ДопШаг), "ЧН=0; ЧГ=0; БЛ=0; БИ=1");
				СтрокаДопШагов = "";
				СтрокаДопШагов = СтрокаДопШагов + Код + ";";
				СтрокаДопШагов = СтрокаДопШагов + "+;";
				СтрокаДопШагов = СтрокаДопШагов + СобратьДополнительныеШаги(Код);
				тхт.ДобавитьСтроку(СтрокаДопШагов);  
			КонецЦикла;
			
			тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ=0"));
			
			ИмяФайлаВыгрузкиЮБ = РазделительПути + Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_userbooks.dm";
			
			Если ТипОбмена = "1" Тогда // ftp				
				ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_userbooks.dm" + "temp");
				
			ИначеЕсли ТипОбмена = "0" Тогда	// локальный каталог			
				Если ИДТСД = "" Тогда 
					тхт.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиЮБ, КодировкаТекста.UTF8);
				Иначе	
					тхт.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиЮБ, КодировкаТекста.UTF8);
				КонецЕсли;
				
				Если МассоваяВыгрузка Тогда
					Если ИДТСД = "" Тогда
						ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиЮБ, ИДТСД, ИмяФайлаВыгрузкиЮБ);
					Иначе
						ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиЮБ, ИДТСД, ИмяФайлаВыгрузкиЮБ);
					КонецЕсли;	
				КонецЕсли;
				
			ИначеЕсли ТипОбмена = "2" Тогда // Яндекс-диск					
				ИмяФайлаВыгрузкиЮБ = Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_userbooks.dm";
				ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузкиЮБ;
				тхт_яч.Записать(ИмяФайла, КодировкаТекста.UTF8);
				АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
				
				Если ИДТСД = "" Тогда
					ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузкиЮБ, АдресВХ, Истина); 
				Иначе	
					Если МассоваяВыгрузка Тогда
						Для каждого Строка Из СписокТСД Цикл
							АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
							ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузкиЮБ, АдресВХ, Истина);	
						КонецЦикла;	
					Иначе	
						ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузкиЮБ, АдресВХ, Истина);
					КонецЕсли;	
				КонецЕсли;
				
				УдалитьФайлы(АдресВХ);
				УдалитьФайлы(ИмяФайла);
			КонецЕсли;
			
			// связи доп. форм и шаблонов
			тхт = Новый ТекстовыйДокумент();
			тхт.ДобавитьСтроку("" + ?(ОчиститьДопШаги, "-", "+"));
			
			Для каждого ДопШаг Из СвязиШаговШаблонов Цикл
				Код = Формат(СвязиШаговШаблонов.Индекс(ДопШаг), "ЧН=0; ЧГ=0; БЛ=0; БИ=1");
				СтрокаСвязей = "";
				СтрокаСвязей = СтрокаСвязей + Код + ";";
				СтрокаСвязей = СтрокаСвязей + "+;";
				СтрокаСвязей = СтрокаСвязей + ДопШаг.ИдентификаторШага + ";";
				СтрокаСвязей = СтрокаСвязей + ДопШаг.ИдентификаторШаблона + ";";
				СтрокаСвязей = СтрокаСвязей + ДопШаг.Порядок + ";";
				
				ТекущийПроверкаЗаполнения = 0;
				ТекущийРеквизитШапки = 0;
				ТекущийНомерАтрибута = ДопШаг.Порядок;
				ТекущийПроверкаПоЗаданию = Ложь;
				ТекущийРежимВвода = 0;
				ТекущийПодборРазмещение = 0;
				
				ПараметрыОтбораСвязи = Новый Структура;
				ПараметрыОтбораСвязи.Вставить("ИД", ДопШаг.ИдентификаторШага);
				СтрокиШагов = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбораСвязи);	
				
				Если СтрокиШагов.Количество() >  0 Тогда
					ТекущийПроверкаЗаполнения = ?(СтрокиШагов[0].ПроверкаЗаполнения, 1, 0);
					ТекущийРеквизитШапки = СтрокиШагов[0].РеквизитШапки;
					ТекущийПроверкаПоЗаданию = СтрокиШагов[0].ПроверкаПоЗаданию;
					ТекущийРежимВвода = СтрокиШагов[0].РежимВвода;
					ТекущийПодборРазмещение = СтрокиШагов[0].ПодборРазмещение;
				КонецЕсли;
				
				СтрокаСвязей = СтрокаСвязей + ТекущийПроверкаЗаполнения + ";";	
				СтрокаСвязей = СтрокаСвязей + ТекущийРеквизитШапки + ";";
				СтрокаСвязей = СтрокаСвязей + ТекущийНомерАтрибута + ";";
				СтрокаСвязей = СтрокаСвязей + ?(ТекущийПроверкаПоЗаданию, "true", "false") + ";";
				СтрокаСвязей = СтрокаСвязей + ТекущийРежимВвода + ";";
				СтрокаСвязей = СтрокаСвязей + ТекущийПодборРазмещение + ";";
				
				тхт.ДобавитьСтроку(СтрокаСвязей);  
			КонецЦикла;
			
			тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ=0"));
			ИмяФайлаВыгрузкиСЛ = РазделительПути + Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_steplinks.dm";
			
			Если ТипОбмена = "1" Тогда // ftp				
				ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_steplinks.dm" + "temp"); 
				
			ИначеЕсли ТипОбмена = "0" Тогда	// локальный каталог			
				тхт.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиСЛ ,КодировкаТекста.UTF8);
				
				Если МассоваяВыгрузка Тогда
					ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиСЛ, ИДТСД, ИмяФайлаВыгрузкиСЛ);
				КонецЕсли; 
				
			ИначеЕсли ТипОбмена = "2" Тогда	// Яндекс-диск			
				ИмяФайлаВыгрузки = Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_steplinks.dm";
				ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
				тхт.Записать(ИмяФайла, КодировкаТекста.UTF8);
				АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
				Если ИДТСД = "" Тогда
					ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
				Иначе	
					Если МассоваяВыгрузка Тогда
						Для каждого Строка Из СписокТСД Цикл
							АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
							ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
						КонецЦикла;	
					Иначе	
						ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
					КонецЕсли;	
				КонецЕсли; 
				
				УдалитьФайлы(АдресВХ);
				УдалитьФайлы(ИмяФайла);				
			КонецЕсли;
			
			// значения спр-ков для доп. форм
			ВернутьТаблицуСУникальнымиИД(КодШаблонаДокументаВыгрузки);
			тхт_шага = Новый ТекстовыйДокумент;
			
			Для каждого ДопШаг Из ТаблицаДляПереносаШагов Цикл
				Если ДопШаг.ТипДанных = "Дата" Или ДопШаг.ТипДанных = "Текст" Или ДопШаг.ТипДанных = "Число" Или ДопШаг.ТипДанных = "Булево" Тогда
					Продолжить;
				КонецЕсли;
				
				тхт_шага = Новый ТекстовыйДокумент(); //выгрузка шаблонов в файл обмена
				тхт_шага.ДобавитьСтроку("" + ?(ОчиститьДопШаги, "-", "+"));
				СтрокаДопШагов = "";
				СтрокаДопШагов = СтрокаДопШагов + ДопШаг.ТипДанных + ";";
				СтрокаДопШагов = СтрокаДопШагов + ДопШаг.ИДСправочника + ";";
				тхт_шага.ДобавитьСтроку(СтрокаДопШагов);
				
				ВернутьЭлементыСправочника(тхт_шага, ДопШаг.ТипДанных, ДопШаг.ИДСправочника, 0); 
				тхт_шага.ВставитьСтроку(0,"" + Формат(тхт_шага.КоличествоСтрок() ,"ЧГ=0")); 
				
				ИмяФайлаВыгрузкиБЭ = РазделительПути + Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_bookelements" + "_" + ДопШаг.ИД + ".dm";
				
				Если ТипОбмена = "1" Тогда // ftp						
					ОтправитьФайлНаFTP(тхт_шага, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_bookelements" + "_" + ДопШаг.ИД + ".dm" + "temp");
					
				ИначеЕсли ТипОбмена = "0" Тогда // локальный каталог						
					Если ИДТСД = "" Тогда 
						тхт_шага.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиБЭ, КодировкаТекста.UTF8);	
					Иначе	
						тхт_шага.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиБЭ, КодировкаТекста.UTF8);
					КонецЕсли;
					
					Если МассоваяВыгрузка Тогда
						Если ИДТСД = "" Тогда
							ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиБЭ, ИДТСД, ИмяФайлаВыгрузкиБЭ);
						Иначе
							ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиБЭ, ИДТСД, ИмяФайлаВыгрузкиБЭ);
						КонецЕсли;	
					КонецЕсли;
					
				ИначеЕсли ТипОбмена = "2" Тогда	// Яндекс-диск				
					ИмяФайлаВыгрузкиБЭ = Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_bookelements.dm";
					ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузкиБЭ;
					тхт_шага.Записать(ИмяФайла, КодировкаТекста.UTF8);
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
					
					Если ИДТСД = "" Тогда
						ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузкиБЭ, АдресВХ, Истина); 
					Иначе	
						Если МассоваяВыгрузка Тогда
							Для каждого Строка Из СписокТСД Цикл
								АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
								ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузкиБЭ, АдресВХ, Истина);	
							КонецЦикла;	
						Иначе	
							ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузкиБЭ, АдресВХ, Истина);
						КонецЕсли;	
					КонецЕсли;
					
					УдалитьФайлы(АдресВХ);
					УдалитьФайлы(ИмяФайла);						
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли; 
		#КонецОбласти
		
		#Область КЛИЕНТЫ
		АдресДанныхКлиенты = ЗаполнитьТаблицуКлиентыИзДокумента(ДокументВыгрузки);
		
		Если АдресДанныхКлиенты <> Неопределено Тогда
			тхт_кл = Новый ТекстовыйДокумент;
			ТекстФайлаКлиенты = "+" + Символы.ПС;
			
			ТекстФайлаКлиенты = ТекстФайлаКлиенты + ВыгрузитьПорциюКлиентов(1, 1, АдресДанныхКлиенты);
			
			тхт_кл.УстановитьТекст(ТекстФайлаКлиенты);
			тхт_кл.ВставитьСтроку(0, "" + Формат(тхт_кл.КоличествоСтрок(), "ЧГ=0"));
			
			ИмяФайлаВыгрузки = РазделительПути + Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "v_83_Clients_.dm";
			
			Если ТипОбмена = "1" Тогда // ftp				
				ОтправитьФайлНаFTP(тхт_кл, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Clients.dm" + "temp"); 
				
			ИначеЕсли ТипОбмена = "0" Тогда	// локальный каталог			
				Если ИДТСД = "" Тогда
					тхт_кл.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузки, КодировкаТекста.UTF8);	
				Иначе	
					тхт_кл.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузки, КодировкаТекста.UTF8);
				КонецЕсли;
				
				Если МассоваяВыгрузка Тогда
					Если ИДТСД = "" Тогда
						ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузки, ИДТСД, ИмяФайлаВыгрузки);
					Иначе
						ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузки, ИДТСД, ИмяФайлаВыгрузки);
					КонецЕсли;	
				КонецЕсли;	
				
			ИначеЕсли ТипОбмена = "2" Тогда	// Яндекс-диск				
				ИмяФайлаВыгрузки = Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "v_83_Clients_.dm";
				ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
				тхт_кл.Записать(ИмяФайла, КодировкаТекста.UTF8);
				АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
				
				Если ИДТСД = "" Тогда
					ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
				Иначе	
					Если МассоваяВыгрузка Тогда
						Для каждого Строка Из СписокТСД Цикл
							АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
							ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
						КонецЦикла;	
					Иначе	
						ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
					КонецЕсли;	
				КонецЕсли;
				
				УдалитьФайлы(АдресВХ);
				УдалитьФайлы(ИмяФайла);				
			КонецЕсли;	
		КонецЕсли; 
		#КонецОбласти
		
		#Область ДОКУМЕНТ
		тхт_док = Новый ТекстовыйДокумент; //выгрузка документа в файл обмена
		ТекстФайлаДокумент = СобратьДокумент(ДокументВыгрузки, ИспользоватьЕГАИС, ВерсияЕГАИС);
		
		Если ТекстФайлаДокумент = Неопределено Тогда
			ПоказатьСообщениеПользователю("Не найден шаблон с кодом " + КодШаблонаДокументаВыгрузки);
			Продолжить;
		КонецЕсли;
		
		тхт_док.УстановитьТекст(ТекстФайлаДокумент);
		тхт_док.ВставитьСтроку(0, "" + Формат(тхт_док.КоличествоСтрок() ,"ЧГ=0"));
		
		//Могут быть символы в номере на кириллице, которые критичны в пути файла
		//ЧистыйДокНомер = ПолучитьНомерДокумента(ДокументВыгрузки); 
		ЧистыйДокНомер = "";
		
		ИмяФайлаВыгрузкиДК = РазделительПути + Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_Doc_" + ЧистыйДокНомер + ".dm";
		
		Если ТипОбмена = "1" Тогда // ftp			
			ОтправитьФайлНаFTP(тхт_док, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_Doc_" + ЧистыйДокНомер + ".dm" + "temp");
			
		ИначеЕсли ТипОбмена = "0" Тогда	// локальный каталог			
			Если ИДТСД = "" Тогда
				тхт_док.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиДК, КодировкаТекста.UTF8);
			Иначе
				тхт_док.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиДК, КодировкаТекста.UTF8);
			КонецЕсли;
			
			Если МассоваяВыгрузка Тогда
				Если ИДТСД = "" Тогда
					ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиДК, ИДТСД, ИмяФайлаВыгрузкиДК);
				Иначе
					ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиДК, ИДТСД, ИмяФайлаВыгрузкиДК);
				КонецЕсли;	
			КонецЕсли;      
			
		ИначеЕсли ТипОбмена = "2" Тогда // Яндекс-диск			
			ИмяФайлаВыгрузки = Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_" + Сч + "_v83_Doc_" + ЧистыйДокНомер + ".dm";
			ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
			тхт_док.Записать(ИмяФайла, КодировкаТекста.UTF8);
			АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
			
			Если ИДТСД = "" Тогда
				ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
			Иначе	
				Если МассоваяВыгрузка Тогда
					Для каждого Строка Из СписокТСД Цикл
						АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
						ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
					КонецЦикла;	
				Иначе	
					ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
				КонецЕсли;	
			КонецЕсли; 
			
			УдалитьФайлы(АдресВХ);
			УдалитьФайлы(ИмяФайла);			
		КонецЕсли;		
		#КонецОбласти
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Выгружен документ: " + ДокументВыгрузки;
		Сообщение.Сообщить();		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНаВсеТСД(КаталогФайлов, ИсхФайл, ТСДИсключение, ИмяНовФайла)  
	
	Для каждого ЭлементТСД Из СписокТСД Цикл
		Попытка
			Если ЭлементТСД.ТСД = СтрЗаменить(ТСДИсключение, "\", "") Тогда
				Продолжить;	
			КонецЕсли;
			
			ПоискФайлов(ИсхФайл, КаталогФайлов + ЭлементТСД.ТСД + РазделительПути + "in" + ИмяНовФайла);			
		Исключение    			
			Инф = ИнформацияОбОшибке(); 						
		КонецПопытки; 		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныДокумента

&НаСервере
Функция ПолучитьДанныеШаблоны()
	
	ДанныеТЗ = Новый ХранилищеЗначения(ШаблоныДокументов.Выгрузить());
	Возврат XMLСтрока(ДанныеТЗ);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеАвтозагрузкиШаблонов()
	
	ДанныеТЗ = Новый ХранилищеЗначения(АвтозагрузкаРеквизитовОбщая.Выгрузить());
	Возврат XMLСтрока(ДанныеТЗ);
	
КонецФункции

&НаСервере
Функция ПолучитьНовыйКодШаблона()
	
	НовыйКод = 0;
	
	Для каждого Шаблон Из ШаблоныДокументов Цикл
		Если Шаблон.Код > НовыйКод Тогда
			НовыйКод = Шаблон.Код;	
		КонецЕсли;	
	КонецЦикла;	
	
	НовыйКод = НовыйКод + 1;  
	
	Возврат НовыйКод;
	
КонецФункции	

// Процедура сохраняет актуальный список шаблонов
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура СохранитьШаблоны()
	
	ПроверитьКаталоги("СохранитьШаблоны");
	
КонецПроцедуры

// Функция собирает данные шаблона в зависимости от сделанных настроек
//
// Параметры:
//  ШаблонДокумента - шаблон для обработки
//
// Возвращаемое значение:
//  СтрокаШаблона - строка с данными логики шаблона документа
//
&НаСервере
Функция СобратьШаблон(Код, ЕстьШаблоныМультиSN = Ложь)
	
	Перем СтрокаШаблона; //логика шаблона
	
	Код = Число(Код);
	
	СтрокаШаблона = "";
	СтрокаШаблона = СтрокаШаблона+Строка(ШаблоныДокументов[Код].Код) + ";"; //2.КодШаблона
	СтрокаШаблона = СтрокаШаблона+ЧистаяСтрока((ШаблоныДокументов[Код].ТипДокумента)) + ";"; //3.
	СтрокаШаблона = СтрокаШаблона+Строка(ШаблоныДокументов[Код].ВидДокумента) + ";"; //4.
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].РазрешеноСозданиеНаТСД,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //5.enableNew
	СтрокаШаблона = СтрокаШаблона + "0;"; //6.ГенерацияУЛ (newPackOnWS - в оффлайн версии всегда 0)
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ШтрихкодыТолькоПоШаблонам,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //7.useBCTemplates
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПриемкаПоПодбору,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //8.useSelectLogAsInsertTask
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].РазрешитьВыгрузкуНеполногоДокумента,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //9.onUploadIncorrectDoc
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПриПриемкеЗапрашиватьТовар,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //10.useArt_Insert
	СтрокаШаблона = СтрокаШаблона + "1;"; //11.useAllBarcode
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПриСканированииТовараПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //12.onArtScan_Select
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПриПревышенииЗаданияПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //13.onTaskQty_Select
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПриПревышенииЛимитаПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //14.onLimitQty_Select
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользованиеЯчеекПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //15.useCell_Select
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользованиеСерийниковПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //16.useSN_Select
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользованиеУпаковочныхЛистовПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //17.usePack_Select
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользоватьПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //18.use_Select
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].УчитыватьЯчеекВЗаданииПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //19.useCellOnTask_Select
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].УчитыватьСерийниковВЗаданииПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //20.useSNOnTask_Select
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].РучнойВводКоличестваПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //21.quantEnable_Select
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПодтверждатьЭнтеромПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //22.enterToCommit_Select
	СтрокаШаблона = СтрокаШаблона + "0;"; //23.ОтправлятьСтрокиНаСерверПодбор (writeRecordToWS_Select - в оффлайн версии всегда 0)
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПриСканированииТовараПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //24.onArtScan_Insert
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПриПревышенииЗаданияПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //25.onTaskQty_Insert
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПриПревышенииЛимитаПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //26.onLimitQty_Insert
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользованиеЯчеекПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //27.useCell_Insert
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользованиеСерийниковПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //28.useSN_Insert
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользованиеУпаковочныхЛистовПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //29.usePack_Insert
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользоватьПриемку,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //30.use_Insert
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].УчитыватьЯчеекВЗаданииПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //31.useCellOnTask_Insert
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].УчитыватьСерийниковВЗаданииПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //32.useSNOnTask_Insert
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].РучнойВводКоличестваПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //33.quantEnable_Insert
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПодтверждатьЭнтеромПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //34.enterToCommit_Insert
	
	
	СтрокаШаблона = СтрокаШаблона + "0;"; //35.ОтправлятьСтрокиНаСерверПриемка (writeRecordToWS_Insert - в оффлайн версии всегда 0)
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ЗапретитьРучноеИзменениеКлиента,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //36.disableManualChangeClient
	СтрокаШаблона = СтрокаШаблона + "0;"; //37.disableReaderChangeClient
	СтрокаШаблона = СтрокаШаблона + "0;"; //38.readerTrack1Use
	СтрокаШаблона = СтрокаШаблона + "0;"; //39.readerTrack2Use	
	СтрокаШаблона = СтрокаШаблона + "0;"; //40.readerTrack3Use
	
	СтрокаШаблона = СтрокаШаблона + "0;"; //41. ОбновлятьТоварыСДокументом (loadArtsWithRows - в оффлайн версии всегда 0)
	СтрокаШаблона = СтрокаШаблона + "0;"; //42. ПодгружатьСтрокиПриОткрытии (loadRowsOnOpen - в оффлайн версии всегда 0)
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПриСканированииНовогоТовара,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //43.onNewArt
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПечатьЭтикеткиПриПриемке,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //44.printLabel_Insert
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПечатьЭтикеткиПриПодборе,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //45.printLabel_Select
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПоштучноеПеремещение,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //46.Pallet replace
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].УникальныеШтрихкодыНоменклатурыВДокументе,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //47.uniquebarcodedoc
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ВыгрузкаЯчеекПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //48.enterCell_select
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ВыгрузкаЯчеекПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //49.enterCell_insert
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользоватьФотофиксациюПодбор,"БЛ=0; БИ=1") + ";"; //50.UsePhotofixationSelect
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользоватьФотофиксациюПриемка,"БЛ=0; БИ=1") + ";"; //51.UsePhotofixationInsert
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользоватьЕГАИС,"БЛ=0; БИ=1") + ";"; //52.UseEGAIS
	СтрокаШаблона = СтрокаШаблона + "0"+ ";"; //53.DMUseDataMatrixBarcode
	СтрокаШаблона = СтрокаШаблона + "0"+ ";"; //54.DMUseDateBottling
	СтрокаШаблона = СтрокаШаблона + "0"+ ";"; //55.DMEnterPDF417Barcode
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].СопоставлениеЕГАИС,"БЛ=0; БИ=1") + ";"; //56.DMEgaisCompare
	
	СтрокаШаблона = СтрокаШаблона + "0"+ ";"; //57.DMUseBlankA
	СтрокаШаблона = СтрокаШаблона + "0"+ ";"; //58.DMUseBlankB
	СтрокаШаблона = СтрокаШаблона + "0"+ ";"; //59.DMUseCheckMark
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].УникальныеСерийныеНомераПодбор,"БЛ=0; БИ=1") + ";"; //60.DMIsUniqueSNSelect
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].УникальныеСерийныеНомераПриемка,"БЛ=0; БИ=1") + ";"; //61.DMIsUniqueSNInsert
	
	СтрокаШаблона = СтрокаШаблона+ШаблоныДокументов[Код].ВерсияЕГАИС+ ";"; //62.DMEgaisVersion
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользоватьМаркировку,"БЛ=0; БИ=1") + ";"; //63.DMUseMark - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ОповеститьОНовомДокументе,"БЛ=0; БИ=1") + ";"; //64.DMAlertNewDoc - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ВводТовараБезСканирования,"БЛ=0; БИ=1") + ";"; //65.DMNoScanArts - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ОбработкаЯчейкиЦеликомПодбор,"БЛ=0; БИ=1") + ";"; //66.DMFullyCell_Select - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ОбработкаЯчейкиЦеликомПриемка,"БЛ=0; БИ=1") + ";"; //67.DMFullyCell_Insert - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].СерНомНеПустойПодбор,"БЛ=0; БИ=1") + ";"; //68.DMSNNotNull_Select - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].СерНомНеПустойПриемка,"БЛ=0; БИ=1") + ";"; //69.DMSNNotNull_Insert - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ТипСерийногоНомераПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //70.DMSNType_Select - 0, 1, 2, 3
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ТипСерийногоНомераПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //71.DMSNType_Insert - 0, 1, 2, 3
	СтрокаШаблона = СтрокаШаблона+Строка(ШаблоныДокументов[Код].ПравилаВводаСерииПодбор) + ";"; //72.DMSNRules_Select - Строка
	СтрокаШаблона = СтрокаШаблона+Строка(ШаблоныДокументов[Код].ПравилаВводаСерииПриемка) + ";"; //73.DMSNRules_Insert - Строка
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].МаркировкаСканироватьEAN,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //74.DMMark_NeedEanScan - 0, 1, 2, 3
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].МаркировкаEANсоответствуетGTIN,"БЛ=0; БИ=1") + ";"; //75.DMMark_EanIsGtin - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].МаркировкаДополнительныйПоискПоКМ,"БЛ=0; БИ=1") + ";"; //76.DMMark_AdditionalSearchByMC - булево
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].МаркировкаЗапретитьПодборНемаркируемыхТоваров,"БЛ=0; БИ=1") + ";"; //77.isOnlyMarkArt  - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].МаркировкаВводМаркируемогоТовараБезКМ,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //78.artMarkEnterType  - 0, 1, 2, 3
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].РазрешитьПропускатьВводУпаковочногоЛиста,"БЛ=0; БИ=1") + ";"; //79.canPackSkip  - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользоватьСервисRateGoods,"БЛ=0; БИ=1") + ";"; //80.useRateGoods   - булево
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].МаркировкаПроверкаВладелькаКМ,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //81.checkOwnerKm - 0, 1, 2, 3
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].МаркировкаПроверкаСтатусаКМ,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //82.checkStatusKm - 0, 1, 2, 3
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].МаркировкаРазрешенныеСтатусыКМ,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //83.allowedStatuses - Строка
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ВыгружатьВыполненныйНаТСДДокументАвтоматически,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //84.isUnloadCompletedDoc - булево
	//СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ДополнительныеФормыСТоваром,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //85.DMFormsWithArt - булево
	СтрокаШаблона = СтрокаШаблона + "0"+ ";"; //85.DMFormsWithArt - несуществующая уже настройка
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ВводЯчейкиБезСканирования,"БЛ=0; БИ=1") + ";"; //86.DMNoScanCells - булево
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользоватьВторойСклад,"БЛ=0; БИ=1") + ";"; //87.useWarehouse2 - булево
	СтрокаШаблона = СтрокаШаблона + "0;0;0;0;"; //88-91
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ПервичныйПоискПоШКвЗадании,"БЛ=0; БИ=1") + ";"; //92.searchBarcodePriority - булево
	СтрокаШаблона = СтрокаШаблона + "0;"; //93.is_allow_qty_marking - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ИспользоватьДопФормы,"БЛ=0; БИ=1") + ";"; //94.Использовать доп. формы - булево
	
	Если ШаблоныДокументов[Код].ИспользованиеСерийниковПодбор <> 0 или ШаблоныДокументов[Код].ИспользованиеСерийниковПриемка <> 0 Тогда		
		ЕстьШаблоныМультиSN = Истина;
	Иначе
		ЕстьШаблоныМультиSN = Ложь;
	КонецЕсли;
	
	СтрокаШаблона = СтрокаШаблона + Формат(ЕстьШаблоныМультиSN,"БЛ=0; БИ=1") + ";"; //95.Использовать мульти сн - булево 
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].РежимСозданияДокументов,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //96.Режим создания документов - 0, 1
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ОбязательноеЗаполнениеСклада,"БЛ=0; БИ=1") + ";"; //97.Обязательное заполнение склада - булево
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ОбязательноеЗаполнениеКонтрагента,"БЛ=0; БИ=1") + ";"; //98.Обязательное заполнение контрагента - булево	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ДополнительныеФормыГрупповойВвод,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //99. is_group_selection_forms - булево
    СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].МаркировкаМетодПроверкиКМ,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //100.Метод проверки КМ - 0, 1
	
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ГруппировкаЯчеекПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //101.ГруппировкаЯчеекПодбор
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ГруппировкаСерийПодбор,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //102.ГруппировкаСерийПодбор
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ГруппировкаЯчеекПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //103.ГруппировкаЯчеекПриемка
	СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].ГруппировкаСерийПриемка,"ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //104.ГруппировкаСерийПриемка
    СтрокаШаблона = СтрокаШаблона + Формат(ШаблоныДокументов[Код].МаркировкаРежимОСУ, "ЧН=0; ЧГ=0; БЛ=0; БИ=1") + ";"; //105.use_osu_mode - 0, 1
	
	Возврат СтрокаШаблона;
	
КонецФункции

&НаКлиенте
Функция СобратьМассивШаблонов()
	
	МассивШаблонов = Новый Массив;	
	
	Для каждого Стр Из ШаблоныДокументов Цикл
		
		МассивШаблонов.Добавить(Стр.ТипДокумента);
		
	КонецЦикла;
	
	Возврат МассивШаблонов;
	
КонецФункции

&НаСервере
Процедура СоздатьНовыеШаблоны(Шаблоны)
	
	ИндексПоиска = Шаблоны.Найти("[М] Приемка");	
	Если ИндексПоиска <> Неопределено Тогда		
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Приемка")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Приемка"; // Наименование
			НовыйШаблон.ВидДокумента = "ПриобретениеТоваровУслуг";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;
			
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 2;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ПриобретениеТоваровУслуг.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
			НовыйШаблон.МаркировкаРежимОСУ = 1;
			
		КонецЕсли;
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("[М] Отгрузка");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Отгрузка")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Отгрузка"; // Наименование
			НовыйШаблон.ВидДокумента = "РеализацияТоваровУслуг";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;
			
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
			НовыйШаблон.МаркировкаРежимОСУ = 1;
			
		КонецЕсли;		
	КонецЕсли;  	
	
	ИндексПоиска = Шаблоны.Найти("[М] Чек ККМ");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Чек ККМ")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Чек ККМ"; // Наименование
			НовыйШаблон.ВидДокумента = "ЧекККМ";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;
			
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ЧекККМ.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
			НовыйШаблон.МаркировкаРежимОСУ = 1;
			
		КонецЕсли;		
	КонецЕсли; 
	
	ИндексПоиска = Шаблоны.Найти("[М] Возврат в оборот");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Возврат в оборот")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Возврат в оборот"; // Наименование
			НовыйШаблон.ВидДокумента = "ВозвратВОборотИСМП";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ВозвратВОборотИСМП.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
			НовыйШаблон.МаркировкаРежимОСУ = 1;
			
		КонецЕсли;		
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("[М] Вывод из оборота");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Вывод из оборота")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Вывод из оборота"; // Наименование
			НовыйШаблон.ВидДокумента = "ВыводИзОборотаИСМП";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;
			
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ВыводИзОборотаИСМП.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
			НовыйШаблон.МаркировкаРежимОСУ = 1;
			
		КонецЕсли;		
	КонецЕсли; 
	
	ИндексПоиска = Шаблоны.Найти("[М] Упаковка");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[М] Упаковка")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] Упаковка"; // Наименование
			НовыйШаблон.ВидДокумента = "УпаковочныйЛист";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;
			
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.УпаковочныйЛист.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			НовыйШаблон.ИспользованиеУпаковочныхЛистовПодбор = 1; 
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
			НовыйШаблон.МаркировкаРежимОСУ = 1;
			
		КонецЕсли;		
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("[М] В оборот");
	Если ИндексПоиска <> Неопределено Тогда		
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента", "[М] В оборот")).Количество() = 0 Тогда
			
			НовыйШаблон = ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ТипДокумента = "[М] В оборот";
			НовыйШаблон.ВидДокумента = "МаркировкаТоваровИСМП";
			НовыйШаблон.ИспользоватьМаркировку = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;
			НовыйШаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден = Истина;
			
			НовыйШаблон.ИспользоватьПодбор = Истина; 
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			Попытка НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.МаркировкаТоваровИСМП.ТабличныеЧасти.Товары.Имя; Исключение КонецПопытки;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
			НовыйШаблон.МаркировкаРежимОСУ = 1;
			
		КонецЕсли;				
	КонецЕсли;  	
	
	ИндексПоиска = Шаблоны.Найти("[Е] ТТН");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[Е] ТТН")).Количество() = 0  Тогда 
			НовыйШаблон=ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ВсеШтрихкодыТовара=Истина;
			НовыйШаблон.ВидДокумента = "ТТНВходящаяЕГАИС";	
			НовыйШаблон.ТипДокумента = "[Е] ТТН";	
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
			НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
			НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор=1;
			НовыйШаблон.ИспользоватьЕГАИС=Истина;
			НовыйШаблон.СопоставлениеЕГАИС=Истина;
			НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента=1;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
		КонецЕсли;
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("Перемещение по складам");
	Если ИндексПоиска <> Неопределено Тогда		
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Перемещение по складам")).Количество() = 0  Тогда 	
			НовыйШаблон=ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ВсеШтрихкодыТовара=Истина;
			НовыйШаблон.ВидДокумента = "ПеремещениеТоваров";	
			НовыйШаблон.ТипДокумента = "Перемещение по складам";
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
			НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
			НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
			НовыйШаблон.ИспользоватьВторойСклад = Истина;
			НовыйШаблон.ПриСканированииНовогоТовара = 1;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
		КонецЕсли;
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("Перемещение по ячейкам");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Перемещение по ячейкам")).Количество() = 0  Тогда 
			НовыйШаблон=ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ВсеШтрихкодыТовара=Истина;
			НовыйШаблон.ВидДокумента = "ОтборРазмещениеТоваров";	
			НовыйШаблон.ТипДокумента = "Перемещение по ячейкам";
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ИмяТабличнойЧастиПодбор = "ТоварыОтбор";
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
			НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
			НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
			НовыйШаблон.ИспользованиеЯчеекПодбор = 2;
			НовыйШаблон.ИспользоватьПриемку = Истина;
			НовыйШаблон.ИмяТабличнойЧастиПриемка = "ТоварыРазмещение";
			НовыйШаблон.ПриемкаПоПодбору = Истина;
			НовыйШаблон.ПриПриемкеЗапрашиватьТовар = Истина;
			НовыйШаблон.ПриСканированииТовараПриемка = 1;
			НовыйШаблон.ПриПревышенииЗаданияПриемка = 0;
			НовыйШаблон.ПриПревышенииЛимитаПриемка = 0;
			НовыйШаблон.РучнойВводКоличестваПриемка = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПриемке = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПриемка = Истина;
			НовыйШаблон.ИспользованиеЯчеекПриемка = 2;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПриемка = 2;
			НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
		КонецЕсли;		
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("Инвентаризация");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Инвентаризация")).Количество() = 0  Тогда 
			НовыйШаблон=ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ВсеШтрихкодыТовара=Истина;
			НовыйШаблон.ВидДокумента = "ПересчетТоваров";	
			НовыйШаблон.ТипДокумента = "Инвентаризация";   // Наименование
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
			НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
			НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 1;
			НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
		КонецЕсли;		
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("Заказ");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Заказ")).Количество() = 0  Тогда 
			НовыйШаблон=ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ВсеШтрихкодыТовара=Истина;
			НовыйШаблон.ВидДокумента = "ЗаказКлиента";	
			НовыйШаблон.ТипДокумента = "Заказ";   // Наименование
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
			НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
			НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
			НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
		КонецЕсли;		
	КонецЕсли;  	
	
	ИндексПоиска = Шаблоны.Найти("Возврат");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Возврат")).Количество() = 0  Тогда 
			НовыйШаблон=ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ВсеШтрихкодыТовара=Истина;
			НовыйШаблон.ВидДокумента = "ВозвратТоваровОтКлиента";	
			НовыйШаблон.ТипДокумента = "Возврат";
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 2;
			НовыйШаблон.ПриПревышенииЛимитаПодбор = 1;
			НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
		КонецЕсли;
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("Поступление");
	Если ИндексПоиска <> Неопределено Тогда		
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Поступление")).Количество() = 0  Тогда 	
			НовыйШаблон=ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ВсеШтрихкодыТовара=Истина;	
			Попытка 
				НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ПриобретениеТоваровУслуг.ТабличныеЧасти.Товары.Имя;
				НовыйШаблон.ТипДокумента = "Поступление";
				НовыйШаблон.ВидДокумента = "ПриобретениеТоваровУслуг";
			Исключение
				НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ПоступлениеТоваровУслуг.ТабличныеЧасти.Товары.Имя;
				НовыйШаблон.ТипДокумента = "Поступление";
				НовыйШаблон.ВидДокумента = "ПоступлениеТоваровУслуг";
			КонецПопытки;
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
			НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
			НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
			НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
		КонецЕсли;
	КонецЕсли;
	
	ИндексПоиска = Шаблоны.Найти("Реализация");
	Если ИндексПоиска <> Неопределено Тогда
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","Реализация")).Количество() = 0  Тогда 
			НовыйШаблон=ШаблоныДокументов.Добавить();
			НовыйШаблон.Код = ПолучитьНовыйКодШаблона();
			НовыйШаблон.ВсеШтрихкодыТовара=Истина;
			НовыйШаблон.ВидДокумента = "РеализацияТоваровУслуг";	
			НовыйШаблон.ТипДокумента = "Реализация";
			НовыйШаблон.ИспользоватьПодбор = Истина;
			НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
			НовыйШаблон.ПриСканированииТовараПодбор = 1;
			НовыйШаблон.ПриПревышенииЗаданияПодбор = 2;
			НовыйШаблон.ПриПревышенииЛимитаПодбор = 1;
			НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
			НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
			НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
			НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПодбор = 0;
			НовыйШаблон.ВыгрузкаЯчеекПриемка = 0;
			НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
			НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
			НовыйШаблон.РежимСозданияДокументов = 1;
		КонецЕсли;		
	КонецЕсли;
	
	Если ЕстьМДЛП() Тогда	
		
		//ПРИЕМКА
		ИндексПоиска = Шаблоны.Найти("[МДЛП] Приемка (п/а)");
		Если ИндексПоиска <> Неопределено Тогда	
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[МДЛП] Приемка (п/а)")).Количество() = 0 Тогда
				
				НовыйШаблон = ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ШаблоныДокументов.Количество();
				НовыйШаблон.ТипДокумента = "[МДЛП] Приемка (п/а)";
				НовыйШаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП";
				НовыйШаблон.ИспользоватьМаркировку = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 0;
				НовыйШаблон.ВсеШтрихкодыТовара = Истина;
				
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииНовогоТовара = 1;
				НовыйШаблон.ШтрихкодыТолькоПоШаблонам = Истина;
				НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
				НовыйШаблон.ОповеститьОНовомДокументе = Истина;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
				НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.РежимСозданияДокументов = 1;				
			КонецЕсли;
		КонецЕсли;
		
		ИндексПоиска = Шаблоны.Найти("[МДЛП] Приемка (о/а киз)");
		Если ИндексПоиска <> Неопределено Тогда			
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[МДЛП] Приемка (о/а киз)")).Количество() = 0 Тогда
				
				НовыйШаблон = ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ШаблоныДокументов.Количество();
				НовыйШаблон.ТипДокумента = "[МДЛП] Приемка (о/а киз)";
				НовыйШаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП";
				НовыйШаблон.ВсеШтрихкодыТовара = Истина;
				
				НовыйШаблон.ИспользоватьМаркировку = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3;
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииНовогоТовара = 1;
				НовыйШаблон.ШтрихкодыТолькоПоШаблонам = Истина;
				НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
				НовыйШаблон.ОповеститьОНовомДокументе = Истина;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
				НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.РежимСозданияДокументов = 1;
				
			КонецЕсли;
		КонецЕсли;
		
		ИндексПоиска = Шаблоны.Найти("[МДЛП] Приемка (о/а упак)");
		Если ИндексПоиска <> Неопределено Тогда			
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[МДЛП] Приемка (о/а упак)")).Количество() = 0 Тогда
				
				НовыйШаблон = ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ШаблоныДокументов.Количество();
				НовыйШаблон.ТипДокумента = "[МДЛП] Приемка (о/а упак)";
				НовыйШаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП";
				НовыйШаблон.ВсеШтрихкодыТовара = Истина;
				
				НовыйШаблон.ИспользоватьМаркировку = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ПриСканированииТовараПодбор = 0;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииНовогоТовара = 0;
				НовыйШаблон.ШтрихкодыТолькоПоШаблонам = Истина;
				НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 0;
				НовыйШаблон.ОповеститьОНовомДокументе = Истина;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;	
				НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.РежимСозданияДокументов = 1;
				
			КонецЕсли;
		КонецЕсли;
		
		//ОПРИХОДОВАНИЕ
		ИндексПоиска = Шаблоны.Найти("[МДЛП] Приход (киз)");
		Если ИндексПоиска <> Неопределено Тогда			
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[МДЛП] Приход (киз)")).Количество() = 0 Тогда
				
				НовыйШаблон = ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ШаблоныДокументов.Количество();
				НовыйШаблон.ТипДокумента = "[МДЛП] Приход (киз)";
				НовыйШаблон.ВидДокумента = "УведомлениеОбОприходованииМДЛП";
				НовыйШаблон.ВсеШтрихкодыТовара = Истина;
				
				НовыйШаблон.ИспользоватьМаркировку = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3;
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииНовогоТовара = 1;
				НовыйШаблон.ШтрихкодыТолькоПоШаблонам = Истина;
				НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
				НовыйШаблон.ОповеститьОНовомДокументе = Истина;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
				НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.РежимСозданияДокументов = 1;
				
			КонецЕсли;
		КонецЕсли;
		
		ИндексПоиска = Шаблоны.Найти("[МДЛП] Приход (упак)");
		Если ИндексПоиска <> Неопределено Тогда			
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[МДЛП] Приход (упак)")).Количество() = 0 Тогда
				
				НовыйШаблон = ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ШаблоныДокументов.Количество();
				НовыйШаблон.ТипДокумента = "[МДЛП] Приход (упак)";
				НовыйШаблон.ВидДокумента = "УведомлениеОбОприходованииМДЛП";
				НовыйШаблон.ВсеШтрихкодыТовара = Истина;
				
				НовыйШаблон.ИспользоватьМаркировку = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииНовогоТовара = 0;
				НовыйШаблон.ШтрихкодыТолькоПоШаблонам = Истина;
				НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 0;
				НовыйШаблон.ОповеститьОНовомДокументе = Истина;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;	
				НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.РежимСозданияДокументов = 1;
				
			КонецЕсли;
		КонецЕсли;
		
		//ОТГРУЗКА
		ИндексПоиска = Шаблоны.Найти("[МДЛП] Отгрузка");
		Если ИндексПоиска <> Неопределено Тогда			
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[МДЛП] Отгрузка")).Количество() = 0 Тогда		
				НовыйШаблон = ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ШаблоныДокументов.Количество();
				НовыйШаблон.ТипДокумента = "[МДЛП] Отгрузка";
				НовыйШаблон.ВидДокумента = "УведомлениеОбОтгрузкеМДЛП";
				НовыйШаблон.ВсеШтрихкодыТовара = Истина;
				
				НовыйШаблон.ИспользоватьМаркировку = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3;	
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииНовогоТовара = 2;
				НовыйШаблон.ШтрихкодыТолькоПоШаблонам = Истина;
				НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
				НовыйШаблон.ОповеститьОНовомДокументе = Истина;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
				НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.РежимСозданияДокументов = 1;
			КонецЕсли;
		КонецЕсли;
		
		//ВЫБЫТИЕ
		ИндексПоиска = Шаблоны.Найти("[МДЛП] Выбытие");
		Если ИндексПоиска <> Неопределено Тогда			
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[МДЛП] Выбытие")).Количество() = 0 Тогда		
				НовыйШаблон = ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ШаблоныДокументов.Количество();
				НовыйШаблон.ТипДокумента = "[МДЛП] Выбытие";
				НовыйШаблон.ВидДокумента = "УведомлениеОВыбытииМДЛП";
				НовыйШаблон.ВсеШтрихкодыТовара = Истина;
				
				НовыйШаблон.ИспользоватьМаркировку = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 3;	
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииНовогоТовара = 2;
				НовыйШаблон.ШтрихкодыТолькоПоШаблонам = Истина;
				НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
				НовыйШаблон.ОповеститьОНовомДокументе = Истина;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
				НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.РежимСозданияДокументов = 1;
			КонецЕсли;
		КонецЕсли;
		
		//АГРЕГАЦИЯ
		ИндексПоиска = Шаблоны.Найти("[МДЛП] Агрегация");
		Если ИндексПоиска <> Неопределено Тогда			
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[МДЛП] Агрегация")).Количество() = 0 Тогда
				
				НовыйШаблон = ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ШаблоныДокументов.Количество();
				НовыйШаблон.ТипДокумента = "[МДЛП] Агрегация";
				НовыйШаблон.ВидДокумента = "УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП";
				НовыйШаблон.ВсеШтрихкодыТовара = Истина;
				
				НовыйШаблон.ИспользоватьМаркировку = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2; 
				
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ПриСканированииТовараПодбор = 1;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииНовогоТовара = 2;
				НовыйШаблон.ШтрихкодыТолькоПоШаблонам = Истина;
				НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 0;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
				
				НовыйШаблон.ИспользованиеУпаковочныхЛистовПодбор = 1;
				
				НоваяСтрокаАвтовыгрузки = АвтозагрузкаРеквизитовОбщая.Добавить();
				НоваяСтрокаАвтовыгрузки.Реквизит = "Операция"; 
				НоваяСтрокаАвтовыгрузки.ЗначениеРеквизита = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование;
				НоваяСтрокаАвтовыгрузки.Шаблон = НовыйШаблон.ТипДокумента;
				НоваяСтрокаАвтовыгрузки.ТипЗнач = "Перечисления";
				НоваяСтрокаАвтовыгрузки.ИмяТаблицы = "ОперацииАгрегированияИТрансформацииУпаковокМДЛП";
				НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.РежимСозданияДокументов = 1;
				
			КонецЕсли;
		КонецЕсли;
		
		ИндексПоиска = Шаблоны.Найти("[МДЛП] Расформирование");
		Если ИндексПоиска <> Неопределено Тогда			
			Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента","[МДЛП] Расформирование")).Количество() = 0 Тогда
				
				НовыйШаблон = ШаблоныДокументов.Добавить();
				НовыйШаблон.Код = ШаблоныДокументов.Количество();
				НовыйШаблон.ТипДокумента = "[МДЛП] Расформирование";
				НовыйШаблон.ВидДокумента = "УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП";
				НовыйШаблон.ВсеШтрихкодыТовара = Истина;
				
				НовыйШаблон.ИспользоватьМаркировку = Истина;
				НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2; 
				
				НовыйШаблон.ИспользоватьПодбор = Истина;
				НовыйШаблон.ПриСканированииТовараПодбор = 0;
				НовыйШаблон.ИмяТабличнойЧастиПодбор = "Товары";
				НовыйШаблон.ПриСканированииНовогоТовара = 0;
				НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 0;
				НовыйШаблон.ПриПревышенииЗаданияПодбор = 0; 
				
				НоваяСтрокаАвтовыгрузки = АвтозагрузкаРеквизитовОбщая.Добавить();
				НоваяСтрокаАвтовыгрузки.Реквизит = "Операция"; 
				НоваяСтрокаАвтовыгрузки.ЗначениеРеквизита = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование;   
				НоваяСтрокаАвтовыгрузки.Шаблон = НовыйШаблон.ТипДокумента;
				НоваяСтрокаАвтовыгрузки.ТипЗнач = "Перечисления";
				НоваяСтрокаАвтовыгрузки.ИмяТаблицы = "ОперацииАгрегированияИТрансформацииУпаковокМДЛП";
				
				НоваяСтрокаАвтовыгрузки = АвтозагрузкаРеквизитовОбщая.Добавить();
				НоваяСтрокаАвтовыгрузки.Реквизит = "Отдельная ТЧ упаковок"; 
				НоваяСтрокаАвтовыгрузки.ЗначениеРеквизита = Ложь;
				НоваяСтрокаАвтовыгрузки.Шаблон = НовыйШаблон.ТипДокумента;
				НовыйШаблон.ВыгружатьТоварыСДокументом = Истина;
				НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
				НовыйШаблон.РежимСозданияДокументов = 1;				
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборШаблонаЗавершение (Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда		
		Стр = ШаблоныДокументов.НайтиСтроки(Новый Структура("Код, ТипДокумента", Результат.Значение, Результат.Представление));
		
		ШаблонДокументаВыгрузки     = Стр[0].ТипДокумента;
		КодШаблонаДокументаВыгрузки = Стр[0].Код;
		ВидДокументаВыгрузки        = Стр[0].ВидДокумента;
		ИмяТЧДокументаПодбор        = Стр[0].ИмяТабличнойЧастиПодбор;
		ИмяТЧДокументаПриемка       = Стр[0].ИмяТабличнойЧастиПриемка;
		
		ПараметрыПодбора = Новый Структура;           
		ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);  
		
		Подбор = Получитьформу("Документ." + Стр[0].ВидДокумента + ".ФормаВыбора", ПараметрыПодбора, ЭтаФорма);
		Подбор.ЗакрыватьПривыборе = Истина;
		Подбор.Открыть();
		
	Иначе
		СтандартнаяОбработка = Ложь;
		ПоказатьСообщениеПользователю("Не выбран шаблон!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиДопШагов()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_ДопШагов", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_UserBooks.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_ДопШагов(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияДопШагов", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек + "v83_UserBooks.tab");		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиСвязиШагов()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_СвязиШагов", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек + "v83_StepLinks.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_СвязиШагов(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияСвязиШагов", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек + "v83_StepLinks.tab");		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияДопШагов(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеДопШаги(ДопПараметр.ФайлТЗ.ПолучитьТекст());
	ЗагрузитьДанныеДополнительныхФорм(ДопПараметр.ФайлТЗ.ПолучитьТекст());
	ОбновитьТаблицыШаговНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияСвязиШагов(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеСвязиШаговШаблонов(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияШаблона_ОбновитьЕслиКаталогиДоступны(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеШаблоны(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеДополнительныхФорм(Данные)
	
	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		ДополнительныеФормы.Загрузить(ДанныеТЗ);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьДопШагиЕслиКаталогиДоступны()	
	
	ИндикаторДопшаги = 0;
	Если Не ДополнительныеШаги.Количество() = 0 Тогда
		ВсегоДопшагиПроц = ДополнительныеШаги.Количество() + СвязиШаговШаблонов.Количество();//-100%
		
		Для каждого ДопШаг Из ДополнительныеШаги Цикл
			Если Не (ДопШаг.ТипДанных = "Дата" ИЛИ ДопШаг.ТипДанных = "Текст" ИЛИ ДопШаг.ТипДанных = "Число" ИЛИ ДопШаг.ТипДанных = "Булево") Тогда
				ВсегоДопшагиПроц = ВсегоДопшагиПроц + ВернутьКоличествоЭлементовСпр(ДопШаг.ТипДанных);
			КонецЕсли;
		КонецЦикла; 
		
		ШагПользПроц = 100 / ВсегоДопшагиПроц;
		
	Иначе
		ПоказатьСообщениеПользователю("Нет дополнительных форм для выгрузки!");
		Возврат;
	КонецЕсли;
	
	тхт = Новый ТекстовыйДокумент();
	тхт.ДобавитьСтроку("" + ?(ОчиститьДопШаги, "-", "+")); 
	
	// доп. шаги
	Для каждого ДопШаг Из ДополнительныеШаги Цикл
		ИндикаторДопшаги = ИндикаторДопшаги + ШагПользПроц;
		Код = Формат(ДополнительныеШаги.Индекс(ДопШаг), "ЧН=0; ЧГ=0; БЛ=0; БИ=1");
		СтрокаДопшагов = "";
		СтрокаДопшагов = СтрокаДопшагов + Код + ";";
		СтрокаДопшагов = СтрокаДопшагов + "+;";
		СтрокаДопшагов = СтрокаДопшагов + СобратьДополнительныеШаги(Код);
		тхт.ДобавитьСтроку(СтрокаДопшагов);  
	КонецЦикла; 
	
	тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ=0"));
	ИмяФайлаВыгрузкиЮБ = РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_userbooks.dm";
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_userbooks.dm" + "temp");
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда
			тхт.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиЮБ, КодировкаТекста.UTF8);
		Иначе	
			тхт.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиЮБ, КодировкаТекста.UTF8);
		КонецЕсли;  
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиЮБ, ИДТСД, ИмяФайлаВыгрузкиЮБ);
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиЮБ, ИДТСД, ИмяФайлаВыгрузкиЮБ);
			КонецЕсли;	
		КонецЕсли; 
		
	ИначеЕсли ТипОбмена = "2" Тогда 	
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_userbooks.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли; 
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);			
	КонецЕсли; 
	
	// связи шагов и реквизитов
	тхт = Новый ТекстовыйДокумент();
	тхт.ДобавитьСтроку("" + ?(ОчиститьДопШаги, "-", "+"));
	
	Для каждого ДопШаг Из СвязиШаговШаблонов Цикл
		ИндикаторДопшаги = ИндикаторДопшаги + ШагПользПроц;
		Код = Формат(СвязиШаговШаблонов.Индекс(ДопШаг), "ЧН=0; ЧГ=0; БЛ=0; БИ=1");
		СтрокаСвязей = "";
		СтрокаСвязей = СтрокаСвязей + Код + ";";
		СтрокаСвязей = СтрокаСвязей + "+;";
		СтрокаСвязей = СтрокаСвязей + ДопШаг.ИдентификаторШага + ";";
		СтрокаСвязей = СтрокаСвязей + ДопШаг.ИдентификаторШаблона + ";";
		СтрокаСвязей = СтрокаСвязей + ДопШаг.Порядок+";";
		
		ТекущийПроверкаЗаполнения = 0;
		ТекущийРеквизитШапки = 0;
		ТекущийНомерАтрибута = ДопШаг.Порядок;
		ТекущийПроверкаПоЗаданию = Ложь;
		ТекущийРежимВвода = 0;
		ТекущийПодборРазмещение = 0;
		
		ПараметрыОтбораСвязи = Новый Структура;
		ПараметрыОтбораСвязи.Вставить("ИД", ДопШаг.ИдентификаторШага);
		СтрокиШагов = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбораСвязи);	
		
		Если СтрокиШагов.Количество() >  0 Тогда
			ТекущийПроверкаЗаполнения = ?(СтрокиШагов[0].ПроверкаЗаполнения, 1, 0);
			ТекущийРеквизитШапки = СтрокиШагов[0].РеквизитШапки;
			ТекущийПроверкаПоЗаданию = СтрокиШагов[0].ПроверкаПоЗаданию;
			ТекущийРежимВвода = СтрокиШагов[0].РежимВвода;
			ТекущийПодборРазмещение = СтрокиШагов[0].ПодборРазмещение;
		КонецЕсли;
		
		СтрокаСвязей = СтрокаСвязей + ТекущийПроверкаЗаполнения + ";";	
		СтрокаСвязей = СтрокаСвязей + ТекущийРеквизитШапки + ";";
		СтрокаСвязей = СтрокаСвязей + ТекущийНомерАтрибута + ";";
		СтрокаСвязей = СтрокаСвязей + ?(ТекущийПроверкаПоЗаданию, "true", "false") + ";";
		СтрокаСвязей = СтрокаСвязей + ТекущийРежимВвода + ";";
		СтрокаСвязей = СтрокаСвязей + ТекущийПодборРазмещение + ";";
		
		тхт.ДобавитьСтроку(СтрокаСвязей);  
	КонецЦикла;
	
	тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ=0"));
	ИмяФайлаВыгрузкиСЛ = РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_steplinks.dm";
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss") + "_v83_steplinks.dm" + "temp"); 
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда  
			тхт.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиСЛ, КодировкаТекста.UTF8);
		Иначе	
			тхт.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиСЛ, КодировкаТекста.UTF8);
		КонецЕсли;
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиСЛ, ИДТСД, ИмяФайлаВыгрузкиСЛ);
			Иначе	
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиСЛ, ИДТСД, ИмяФайлаВыгрузкиСЛ);
			КонецЕсли;	
		КонецЕсли; 
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_steplinks.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли;   
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);		
	КонецЕсли;
	
	// значения спр-ков
	ВернутьТаблицуСУникальнымиИД();
	Для каждого ДопШаг Из ТаблицаДляПереносаШагов Цикл
		Если ДопШаг.ТипДанных = "Дата" ИЛИ ДопШаг.ТипДанных = "Текст" ИЛИ ДопШаг.ТипДанных = "Число" ИЛИ ДопШаг.ТипДанных = "Булево" Тогда
			Продолжить;
		КонецЕсли;
		
		тхт = Новый ТекстовыйДокумент(); //выгрузка шаблонов в файл обмена
		тхт.ДобавитьСтроку("" + ?(ОчиститьДопШаги, "-", "+"));
		СтрокаДопшагов = "";
		СтрокаДопшагов = СтрокаДопшагов + ДопШаг.ТипДанных + ";";
		СтрокаДопшагов = СтрокаДопшагов + ДопШаг.ИДСправочника + ";";
		тхт.ДобавитьСтроку(СтрокаДопшагов);
		
		ВернутьЭлементыСправочника(тхт, ДопШаг.ТипДанных, ДопШаг.ИДСправочника, ШагПользПроц); 
		тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ=0"));
		
		ИмяФайлаВыгрузкиБЭ = РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_bookelements"+"_" + ДопШаг.ИД + ".dm";		
		
		Если ТипОбмена = "1" Тогда			
			ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_bookelements" + "_"+ДопШаг.ИД + ".dm" + "temp");
			
		ИначеЕсли ТипОбмена = "0" Тогда			
			Если ИДТСД = "" Тогда
				тхт.Записать(лКаталогОбмена+РазделительПути + "DataMobile" + РазделительПути + "in" + РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_bookelements" + "_"+ДопШаг.ИД + ".dm", КодировкаТекста.UTF8);
			Иначе	
				тхт.Записать(лКаталогОбмена+РазделительПути + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_bookelements" + "_" + ДопШаг.ИД + ".dm", КодировкаТекста.UTF8);
			КонецЕсли; 
			
			Если МассоваяВыгрузка Тогда
				Если ИДТСД = "" Тогда
					ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиБЭ, ИДТСД, ИмяФайлаВыгрузкиСЛ);
				Иначе	
					ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиБЭ, ИДТСД, ИмяФайлаВыгрузкиСЛ); 
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли ТипОбмена = "2" Тогда			
			ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_bookelements" + "_" + ДопШаг.ИД + ".dm";
			ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
			тхт.Записать(ИмяФайла, КодировкаТекста.UTF8);
			АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
			
			Если ИДТСД = "" Тогда
				ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
			Иначе	
				Если МассоваяВыгрузка Тогда
					Для каждого Строка Из СписокТСД Цикл
						АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
						ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
					КонецЦикла;	
				Иначе	
					ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
				КонецЕсли;	
			КонецЕсли;   
			
			УдалитьФайлы(АдресВХ);
			УдалитьФайлы(ИмяФайла);				
		КонецЕсли;	
	КонецЦикла;
	
	ФайлТЗ = Новый ТекстовыйДокумент;
	ФайлТЗ.УстановитьТекст(ПолучитьДанныеДопШаги());
	ФайлТЗ.Записать(лКаталогНастроек + "v83_UserBooks.tab");
	ИндикаторДопшаги = 100;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШаблоныЕслиКаталогиДоступны()
	
	ИндикаторШаблоны = 0; 
	
	Если Не ШаблоныДокументов.Количество() = 0 Тогда
		ВсегоШаблоныПроц = ШаблоныДокументов.Количество(); //-100%
		ШагПользПроц = 100 / ШаблоныДокументов.Количество();
	Иначе
		ПоказатьСообщениеПользователю("Нет шаблонов для выгрузки!");
		Возврат;
	КонецЕсли;
	
	ЕстьШаблоныМультиSN = Ложь; 
	
	тхт = Новый ТекстовыйДокумент(); //выгрузка шаблонов в файл обмена
	тхт.ДобавитьСтроку("" + ?(ОчиститьШаблоны, "-", "+"));
	
	Для каждого СтрШаблона Из ШаблоныДокументов Цикл
		ИндикаторШаблоны = ИндикаторШаблоны + ШагПользПроц;
		Код = Формат(ШаблоныДокументов.Индекс(СтрШаблона), "ЧН=0; ЧГ=0; БЛ=0; БИ=1");
		
		СтрокаШаблона = "";
		СтрокаШаблона = СтрокаШаблона + Код + ";"; //0
		СтрокаШаблона = СтрокаШаблона + "+;"; //1. всегда добавление
		СтрокаШаблона = СтрокаШаблона + СобратьШаблон(Код, ЕстьШаблоныМультиSN); //логика шаблона
		тхт.ДобавитьСтроку(СтрокаШаблона);  
	КонецЦикла; 
	
	тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ=0"));
	
	ИмяФайлаВыгрузкиШЛ = РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_TempLates.dm";
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_TempLates.dm" + "temp");
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда  
			тхт.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиШЛ, КодировкаТекста.UTF8);
		Иначе	
			тхт.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиШЛ, КодировкаТекста.UTF8);
		КонецЕсли; 
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиШЛ, ИДТСД, ИмяФайлаВыгрузкиШЛ);
			Иначе	
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиШЛ, ИДТСД, ИмяФайлаВыгрузкиШЛ);
			КонецЕсли;	
		КонецЕсли;  
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_TempLates.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли;
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);			
	КонецЕсли;
	
	ФайлТЗ = Новый ТекстовыйДокумент;
	ФайлТЗ.УстановитьТекст(ПолучитьДанныеШаблоны());
	ФайлТЗ.Записать(лКаталогНастроек + "v83_TempLates.tab");
	ИндикаторШаблоны = 100;
	ОграничитьТипыДока();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИспользованиеСерийниковПодбор", 1);
	
	МассивСтрокПоиска = ШаблоныДокументов.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрокПоиска.Количество() Тогда
		ЕстьШаблоныМультиSN = Истина;
	КонецЕсли;	
	
	Если ЕстьШаблоныМультиSN Тогда
		тхт = Новый ТекстовыйДокумент(); // выгрузка типов серий в файл обмена
		тхт.ДобавитьСтроку("" + "-");
		
		// 1. Серийный номер		
		СтрокаТипаСерии = "";
		СтрокаТипаСерии = СтрокаТипаСерии + "10" + ";"; //ИдентификаторТипаSN
		СтрокаТипаСерии = СтрокаТипаСерии + "Серийный номер" + ";"; //НазваниеТипаSN
		СтрокаТипаСерии = СтрокаТипаСерии + "10" + ";"; //AiКод
		СтрокаТипаСерии = СтрокаТипаСерии + "2" + ";"; //ТипДанных
		СтрокаТипаСерии = СтрокаТипаСерии + "" + ";"; //МаскаДаты
		тхт.ДобавитьСтроку(СтрокаТипаСерии);			
		
		// 2. Дата производства		
		СтрокаТипаСерии = "";
		СтрокаТипаСерии = СтрокаТипаСерии + "11" + ";"; //ИдентификаторТипаSN
		СтрокаТипаСерии = СтрокаТипаСерии + "Дата производства" + ";"; //НазваниеТипаSN
		СтрокаТипаСерии = СтрокаТипаСерии + "11" + ";"; //AiКод
		СтрокаТипаСерии = СтрокаТипаСерии + "1" + ";"; //ТипДанных
		СтрокаТипаСерии = СтрокаТипаСерии + "dd.mm.yy" + ";"; //МаскаДаты
		тхт.ДобавитьСтроку(СтрокаТипаСерии);
		
		// 3. Дата окончания срока годности		
		СтрокаТипаСерии = "";
		СтрокаТипаСерии = СтрокаТипаСерии + "17" + ";"; //ИдентификаторТипаSN
		СтрокаТипаСерии = СтрокаТипаСерии + "Дата срока годности" + ";"; //НазваниеТипаSN
		СтрокаТипаСерии = СтрокаТипаСерии + "17" + ";"; //AiКод
		СтрокаТипаСерии = СтрокаТипаСерии + "1" + ";"; //ТипДанных
		СтрокаТипаСерии = СтрокаТипаСерии + "dd.mm.yy" + ";"; //МаскаДаты
		тхт.ДобавитьСтроку(СтрокаТипаСерии);	
		
		тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ=0"));
		
		ИмяФайлаВыгрузкиТС = РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_sn_types.dm";
		
		Если ТипОбмена = "1" Тогда			
			ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_sn_types.dm" + "temp");
			
		ИначеЕсли ТипОбмена = "0" Тогда			
			Если ИДТСД = "" Тогда
				тхт.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиТС, КодировкаТекста.UTF8);
			Иначе  
				тхт.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиТС, КодировкаТекста.UTF8);
			КонецЕсли;
			
			Если МассоваяВыгрузка Тогда
				Если ИДТСД = "" Тогда 
					ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиТС, ИДТСД, ИмяФайлаВыгрузкиТС);
				Иначе	
					ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиТС, ИДТСД, ИмяФайлаВыгрузкиТС); 
				КонецЕсли;	
			КонецЕсли;   
			
		ИначеЕсли ТипОбмена = "2" Тогда			
			ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_sn_types.dm";
			ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
			тхт.Записать(ИмяФайла, КодировкаТекста.UTF8);
			АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
			
			Если ИДТСД = "" Тогда
				ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
			Иначе	
				Если МассоваяВыгрузка Тогда
					Для каждого Строка Из СписокТСД Цикл
						АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
						ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
					КонецЦикла;	
				Иначе	
					ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
				КонецЕсли;	
			КонецЕсли; 
			
			УдалитьФайлы(АдресВХ);
			УдалитьФайлы(ИмяФайла);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблоныЕслиКаталогиДоступны()
	
	ФайлТЗ = Новый ТекстовыйДокумент;
	ФайлТЗ.УстановитьТекст(ПолучитьДанныеШаблоны());
	ФайлТЗ.Записать(лКаталогНастроек + "v83_TempLates.tab");
	
	// Сохранение файла автозагрузки
	ФайлАЗ = Новый ТекстовыйДокумент;
	ФайлАЗ.УстановитьТекст(ПолучитьДанныеАвтозагрузкиШаблонов());
	ФайлАЗ.Записать(лКаталогНастроек + "v83_Autozagruzka.tab");
	
	Попытка
		СохранитьДополнительныеШаги();
		СохранитьСвязиШаговШаблонов(); 
		
		Сообщить("Шаблоны успешно сохранены.", СтатусСообщения.Информация);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьШаблоны()
	
	ПрочитатьНастройкиШаблонов();
	ПрочитатьНастройкиПользователей();
	ПрочитатьНастройкиДопШагов();
	ПрочитатьНастройкиСвязиШагов();
	ПрочитатьНастройкиАвтозагрузки();
	
	Для каждого СтрокаРеквизита Из СоздатьМассивРеквизитов() Цикл // добавление дополнительных атрибутов товара
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Реквизит = СтрокаРеквизита;
		НовыйРеквизит.Выгружать = "-";
	КонецЦикла;
	
	КоличествоАтрибутов = 0;
	Реквизиты.Сортировать("Реквизит");
	ОчиститьКлиентов = Истина;
	ОчиститьСклады = Истина;
	ОчиститьПользователей = Истина;
	ОчиститьТовары = Истина;
	ОчиститьШаблоны = Истина;
	ОчиститьЯчейки = Истина;
	ОчиститьДопШаги = Истина;
	ОчиститьЕИ = Истина;
	ОграничитьТипыДока();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиШаблонов()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_Шаблонов", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек + "v83_TempLates.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_Шаблонов(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблона", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек + "v83_TempLates.tab");		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеШаблоны(Данные)
	
	ТекСтрока    = Элементы.ШаблоныДокументов.ТекущаяСтрока;
	ТекШаблонКод = ?(ТекСтрока = Неопределено, 0, ШаблоныДокументов.НайтиПоИдентификатору(ТекСтрока).Код);
	
	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		ШаблоныДокументов.Загрузить(ДанныеТЗ);
	КонецЕсли;
	
	Попытка
		НайдСтроки = ШаблоныДокументов.НайтиСтроки(Новый Структура("Код", ТекШаблонКод));
		
		Если НайдСтроки.Количество() > 0 Тогда
			Элементы.ШаблоныДокументов.ТекущаяСтрока = НайдСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	Исключение КонецПопытки;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЧтенияШаблона(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеШаблоны(ДопПараметр.ФайлТЗ.ПолучитьТекст());
	
	//когда при открытии формы не заполнился список файлов - вызываем повторно.
	Если ШаблоныДокументов.Количество() И Не СписокФайлов.Количество() Тогда
		Если Не ТипОбмена = "2" Тогда
			ЗаполнитьСписокФайлов();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#Область РаботаСДополнительнымиШагами 

&НаСервере
Функция СобратьДополнительныеШаги(Код)
	
	Перем СтрокаДопшагов;
	
	Код = Число(Код);
	СтрокаДопшагов = "";
	СтрокаДопшагов = СтрокаДопшагов + Строка(ДополнительныеШаги[Код].Название) + ";";
	
	Если ДополнительныеШаги[Код].ТипДанных = "Текст" Тогда
		ТекущийТип = 0;
	ИначеЕсли  ДополнительныеШаги[Код].ТипДанных = "Число" Тогда
		ТекущийТип = 1;
	ИначеЕсли  ДополнительныеШаги[Код].ТипДанных = "Дата" Тогда
		ТекущийТип = 2;
	ИначеЕсли  ДополнительныеШаги[Код].ТипДанных = "Булево" Тогда
		ТекущийТип = 4;	
	Иначе
		ТекущийТип = 3;
	КонецЕсли;
	
	СтрокаДопшагов = СтрокаДопшагов + ТекущийТип + ";";
	СтрокаДопшагов = СтрокаДопшагов + ДополнительныеШаги[Код].ИД + ";";
	СтрокаДопшагов = СтрокаДопшагов + ДополнительныеШаги[Код].ИДСправочника + ";";
	
	Возврат СтрокаДопшагов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьДополнительныеШаги()
	
	ФайлТЗ = Новый ТекстовыйДокумент;
	ФайлТЗ.УстановитьТекст(ПолучитьДанныеДопШаги());
	ФайлТЗ.Записать(лКаталогНастроек+"v83_UserBooks.tab");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСвязиШаговШаблонов()
	
	ФайлТЗ = Новый ТекстовыйДокумент;
	ФайлТЗ.УстановитьТекст(ПолучитьДанныеСвязиШаговШаблонов());
	ФайлТЗ.Записать(лКаталогНастроек+"v83_StepLinks.tab");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДопШаги()
	
	ДанныеТЗ = Новый ХранилищеЗначения(ДополнительныеШаги.Выгрузить());
	Возврат XMLСтрока(ДанныеТЗ);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеСвязиШаговШаблонов()
	
	ДанныеТЗ = Новый ХранилищеЗначения(СвязиШаговШаблонов.Выгрузить());
	Возврат XMLСтрока(ДанныеТЗ);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеДопШаги(Данные)
	
	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		ДополнительныеШаги.Загрузить(ДанныеТЗ);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьДанныеСвязиШаговШаблонов(Данные)
	
	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		СвязиШаговШаблонов.Загрузить(ДанныеТЗ);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтборДопШаговПоСтрокеШаблона()
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьШагиНаФормуПоШаблону(ТекДанные.Код);
	
	ОбновитьТаблицыШаговНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьШагиНаФормуПоШаблону(ИдШаблона)
	
	ШагиНаФорме.Очистить();
	СвязиШаговШаблонов.Сортировать("Порядок Возр");
	
	ПараметрыОтбора = Новый Структура; 
	ПараметрыОтбора.Вставить("ИдентификаторШаблона", ИдШаблона);
	
	СтрокиСвязейДопФорм = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого СтрокаСвязи Из СтрокиСвязейДопФорм Цикл
		Для каждого стрШаг Из ДополнительныеШаги Цикл
			Если стрШаг.ИД = СтрокаСвязи.ИдентификаторШага Тогда
				стрФормы = ШагиНаФорме.Добавить();
				ЗаполнитьЗначенияСвойств(стрФормы, стрШаг);
				
				Если стрШаг.ПроверкаЗаполнения = 1 Тогда
					стрФормы.ОбязательноеЗаполнение = Истина;
				КонецЕсли;
				
				Если стрШаг.РеквизитШапки = 1 Тогда
					стрФормы.Использование = "Шапка";
					стрФормы.ПодборРазмещение = 0;
				ИначеЕсли стрШаг.РеквизитШапки = 2 Тогда
					стрФормы.Использование = "Строка";
					стрФормы.ПодборРазмещение = 1;
				Иначе
					стрФормы.Использование = "Строка";
					стрФормы.ПодборРазмещение = 0;
				КонецЕсли;
				
				стрФормы.ЗаполняемыйРеквизит = стрШаг.ЗаполняемыйРеквизит;			
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура ПереписатьПорядокШагов(ИдентификаторШаблона)
	
	ТабШаговПоПорядку = ПолучитьТаблицуШаговПоПорядку();
	
	// ШАПКА	
	ТабШаговШапки = ТабШаговПоПорядку.НайтиСтроки(Новый Структура("Использование","Шапка"));
	
	НомПП = 1;
	Для каждого стр Из ТабШаговШапки Цикл
		// связи
		ПараметрыОтбораСвязи = Новый Структура;
		ПараметрыОтбораСвязи.Вставить("ИдентификаторШага", стр.ИД); 
		ПараметрыОтбораСвязи.Вставить("ИдентификаторШаблона", ИдентификаторШаблона);
		
		СтрокиСвязей = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбораСвязи);
		
		Если СтрокиСвязей.Количество() > 0 Тогда
			СтрокаСвязей = СтрокиСвязей[0];
		КонецЕсли;
		
		СтрокаСвязей.Порядок = НомПП;
		
		// доп. шаги
		ПараметрыОтбораСвязи = Новый Структура;
		ПараметрыОтбораСвязи.Вставить("ИД", стр.ИД);
		СтрокиШагов = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбораСвязи);
		
		Если СтрокиШагов.Количество() >  0 Тогда
			СтрокаШагов = СтрокиШагов[0];
			
			СтрокаШагов.Название            	 = стр.Название;
			СтрокаШагов.ПроверкаЗаполнения  	 = ?(стр.ОбязательноеЗаполнение, 1, 0);
			СтрокаШагов.РеквизитШапки       	 = 1;
			СтрокаШагов.ЗаполняемыйРеквизит 	 = стр.ЗаполняемыйРеквизит;
			СтрокаШагов.ПроверкаПоЗаданию   	 = Ложь;
			СтрокаШагов.РежимВвода               = стр.РежимВвода;
			СтрокаШагов.ИспользоватьВПоискеСтрок = Ложь;
			СтрокаШагов.ПодборРазмещение 		 = стр.ПодборРазмещение;
			
			Если Не ЗначениеЗаполнено(СтрокаШагов.ИДСправочника) Тогда
				СтрокаШагов.ИДСправочника = ЗаполнитьИДСправочника(СтрокаШагов.ТипДанных);
			КонецЕсли;
		КонецЕсли;
		
		НомПП = НомПП + 1;
	КонецЦикла;
	
	
	// СТРОКИ
	ТабШаговСтрок = ТабШаговПоПорядку.НайтиСтроки(Новый Структура("Использование","Строка"));	
	
	НомПП = 1;
	Для каждого стр Из ТабШаговСтрок Цикл
		// связи
		ПараметрыОтбораСвязи = Новый Структура;
		ПараметрыОтбораСвязи.Вставить("ИдентификаторШага", стр.ИД); 
		ПараметрыОтбораСвязи.Вставить("ИдентификаторШаблона", ИдентификаторШаблона);
		
		СтрокиСвязей = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбораСвязи);
		
		Если СтрокиСвязей.Количество() > 0 Тогда
			СтрокаСвязей = СтрокиСвязей[0];
		КонецЕсли;
		
		СтрокаСвязей.Порядок = НомПП;
		
		// доп. шаги
		ПараметрыОтбораСвязи = Новый Структура;
		ПараметрыОтбораСвязи.Вставить("ИД", стр.ИД);
		СтрокиШагов = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбораСвязи);
		
		Если СтрокиШагов.Количество() > 0 Тогда
			СтрокаШагов = СтрокиШагов[0];
			
			СтрокаШагов.Название                 = стр.Название;
			СтрокаШагов.ПроверкаЗаполнения       = ?(стр.ОбязательноеЗаполнение, 1, 0);
			СтрокаШагов.РеквизитШапки            = ?(стр.ПодборРазмещение = 1, 2, 0);
			СтрокаШагов.ЗаполняемыйРеквизит      = стр.ЗаполняемыйРеквизит;
			СтрокаШагов.ПроверкаПоЗаданию        = стр.ПроверкаПоЗаданию;
			СтрокаШагов.РежимВвода               = стр.РежимВвода;
			СтрокаШагов.ИспользоватьВПоискеСтрок = стр.ИспользоватьВПоискеСтрок;
			СтрокаШагов.ПодборРазмещение 		 = стр.ПодборРазмещение;
			
			Если Не ЗначениеЗаполнено(СтрокаШагов.ИДСправочника) Тогда
				СтрокаШагов.ИДСправочника = ЗаполнитьИДСправочника(СтрокаШагов.ТипДанных);
			КонецЕсли
		КонецЕсли;        		
		
		НомПП = НомПП + 1;
	КонецЦикла;
	
	СвязиШаговШаблонов.Сортировать("Порядок Возр");
	
	ОбновитьТаблицыШаговНаФорме();
	
КонецПроцедуры

&НаСервере
Функция СобратьШагиКДокументу()
	
	Если Не ЗначениеЗаполнено(КодШаблонаДокументаВыгрузки) Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторШаблона", КодШаблонаДокументаВыгрузки);
	Шаги = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбора);
	
	Если Шаги.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьШагов = Новый ЗаписьJSON();
	ЗаписьШагов.ПроверятьСтруктуру = Ложь;
	ЗаписьШагов.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписьШагов.ЗаписатьНачалоМассива();
	
	Для каждого СтрШаг Из Шаги Цикл
		ЗаписьШагов.ЗаписатьНачалоОбъекта();
		
		ЗаписьШагов.ЗаписатьИмяСвойства("form_id");
		ЗаписьШагов.ЗаписатьЗначение(СтрШаг.ИдентификаторШага);
		
		ЗаписьШагов.ЗаписатьИмяСвойства("sort_number");
		ЗаписьШагов.ЗаписатьЗначение(СтрШаг.Порядок);
		
		ТекущийПроверкаЗаполнения = Ложь;
		ТекущийРеквизитШапки      = 0;
		ТекущийРежимВвода         = 0;
		ТекущийНомерАтрибута      = СтрШаг.Порядок;
		ТекущийПроверятьПоЗаданию = Ложь;
		ТекущийПодборРазмещение 	= 0;
		
		ПараметрыОтбораСвязи = Новый Структура("ИД", СтрШаг.ИдентификаторШага);
		СтрокиШагов = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбораСвязи);
		
		Если СтрокиШагов.Количество() > 0 Тогда		
			ТекущийПроверкаЗаполнения = СтрокиШагов[0].ПроверкаЗаполнения;
			ТекущийРеквизитШапки      = СтрокиШагов[0].РеквизитШапки;
			ТекущийРежимВвода         = СтрокиШагов[0].РежимВвода; 
			ТекущийПроверятьПоЗаданию = СтрокиШагов[0].ПроверкаПоЗаданию;
			ТекущийПодборРазмещение   = СтрокиШагов[0].ПодборРазмещение;
		КонецЕсли;
		
		ЗаписьШагов.ЗаписатьИмяСвойства("is_required");
		ЗаписьШагов.ЗаписатьЗначение(ТекущийПроверкаЗаполнения);
		
		ЗаписьШагов.ЗаписатьИмяСвойства("form_type");
		ЗаписьШагов.ЗаписатьЗначение(ТекущийРеквизитШапки);
		
		ЗаписьШагов.ЗаписатьИмяСвойства("number");
		ЗаписьШагов.ЗаписатьЗначение(ТекущийНомерАтрибута);
		
		ЗаписьШагов.ЗаписатьИмяСвойства("is_check_by_task");
		ЗаписьШагов.ЗаписатьЗначение(ТекущийПроверятьПоЗаданию);				
		
		ЗаписьШагов.ЗаписатьИмяСвойства("enter_mode");
		ЗаписьШагов.ЗаписатьЗначение(ТекущийРежимВвода);
		
		ЗаписьШагов.ЗаписатьИмяСвойства("operation_type");
		ЗаписьШагов.ЗаписатьЗначение(ТекущийПодборРазмещение);
		
		ЗаписьШагов.ЗаписатьКонецОбъекта();	
	КонецЦикла;
	
	ЗаписьШагов.ЗаписатьКонецМассива();
	СтрJSON = ЗаписьШагов.Закрыть();
	
	Возврат СтрJSON;
		
КонецФункции

&НаСервере
Функция ВернутьТаблицуСУникальнымиИД(ИДШаблона = 0)
	
	ТаблицаДляПереносаШагов.Очистить();
	
	Если ИДШаблона > 0 Тогда
		ПараметрыОтбора = Новый Структура("ИдентификаторШаблона", ИДШаблона);
		СтрокиШаблона = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбора);
		
		ТаблицаПоиска = ДополнительныеШаги.Выгрузить();
		ТаблицаПоиска.Очистить();
		
		Для каждого стрШаблона Из СтрокиШаблона Цикл
			ПараметрыОтбора = Новый Структура("ИД", стрШаблона.ИдентификаторШага);
			СтрокиПоиска = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиПоиска.Количество() > 0 Тогда
				стр = ТаблицаПоиска.Добавить();
				ЗаполнитьЗначенияСвойств(стр, СтрокиПоиска[0]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаПоиска = ДополнительныеШаги;
	КонецЕсли; 
	
	Для каждого СтрокаШагов Из ТаблицаПоиска Цикл
		Если Не ЗначениеЗаполнено(СтрокаШагов.ИДСправочника) Тогда 
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ИДСправочника", СтрокаШагов.ИДСправочника);
		Строки = ТаблицаДляПереносаШагов.НайтиСтроки(ПараметрыОтбора);
		
		Если Строки.Количество() = 0 Тогда
			СтрокаШаговНовая = ТаблицаДляПереносаШагов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаШаговНовая, СтрокаШагов);
		КонецЕсли;		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ВернутьЭлементыСправочника(тхт, ТипДанных, ИД, ШагПользПроц)
	
	Счетчик = 1; 
	ТипДанныхСтрока = Лев(ТипДанных, (СтрНайти(ТипДанных, ".") - 1));
	
	Попытка
		Если ТипДанныхСтрока = "Справочники" Тогда
			НазваниеСпр = Сред(ТипДанных, (СтрНайти(ТипДанных, ".") + 1));
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Спр.Ссылка КАК Ссылка,
			|	Спр.Наименование КАК Наименование
			|ИЗ
			|	Справочник." + НазваниеСпр + " КАК Спр
			|ГДЕ
			|	НЕ Спр.ПометкаУдаления";
			
			РезультатЗапроса = Запрос.Выполнить();			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ИндикаторДопШаги = ИндикаторДопШаги + ШагПользПроц;
				
				СтрокаДопшагов = "";
				СтрокаДопшагов = СтрокаДопшагов + Счетчик + ";";
				СтрокаДопшагов = СтрокаДопшагов + "+;";
				СтрокаДопшагов = СтрокаДопшагов + ИД + ";";
				СтрокаДопшагов = СтрокаДопшагов + Выборка.Ссылка.УникальныйИдентификатор() + ";";
				СтрокаДопшагов = СтрокаДопшагов + Выборка.Наименование + ";";
				тхт.ДобавитьСтроку(СтрокаДопшагов);
				
				Счетчик = Счетчик + 1;
			КонецЦикла;
			
		ИначеЕсли ТипДанныхСтрока = "ПланыВидовХарактеристик" Тогда
			НазваниеСпр = Сред(ТипДанных, (СтрНайти(ТипДанных, ".") + 1));
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПВХ.Ссылка КАК Ссылка,
			|	ПВХ.Наименование КАК Наименование
			|ИЗ
			|	ПланВидовХарактеристик." + НазваниеСпр + " КАК ПВХ
			|ГДЕ
			|	НЕ ПВХ.ПометкаУдаления";
			
			РезультатЗапроса = Запрос.Выполнить();			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ИндикаторДопШаги = ИндикаторДопШаги + ШагПользПроц; 
				
				СтрокаДопшагов = "";
				СтрокаДопшагов = СтрокаДопшагов + Счетчик + ";";
				СтрокаДопшагов = СтрокаДопшагов + "+;";
				СтрокаДопшагов = СтрокаДопшагов + ИД + ";";
				СтрокаДопшагов = СтрокаДопшагов + Выборка.Ссылка.УникальныйИдентификатор() + ";";
				СтрокаДопшагов = СтрокаДопшагов + Выборка.Наименование + ";";
				тхт.ДобавитьСтроку(СтрокаДопшагов); 
				
				Счетчик = Счетчик + 1;
			КонецЦикла;  
			
		ИначеЕсли ТипДанныхСтрока = "Перечисления" Тогда
			НазваниеПеречисл = Сред(ТипДанных, (СтрНайти(ТипДанных, ".") + 1));
			
			Для Сч = 0 По Перечисления[НазваниеПеречисл].Количество()-1 Цикл	
				ИндикаторДопШаги = ИндикаторДопШаги + ШагПользПроц; 
				
				СтрокаДопшагов = "";
				СтрокаДопшагов = СтрокаДопшагов + Счетчик + ";";
				СтрокаДопшагов = СтрокаДопшагов + "+;";
				СтрокаДопшагов = СтрокаДопшагов + ИД + ";";
				СтрокаДопшагов = СтрокаДопшагов + СокрЛП(XMLСтрока(Перечисления[НазваниеПеречисл][Сч])) + ";";
				СтрокаДопшагов = СтрокаДопшагов + Строка(Перечисления[НазваниеПеречисл][Сч]) + ";";
				тхт.ДобавитьСтроку(СтрокаДопшагов);
				
				Счетчик = Счетчик + 1;
			КонецЦикла;
		КонецЕсли;
	Исключение КонецПопытки;
	
КонецФункции

&НаСервере
Функция ВернутьКоличествоЭлементовСпр(ТипДанных)
	
	ТипДанныхСтрока = Лев(ТипДанных,(СтрНайти(ТипДанных, ".") - 1)); 
	
	Попытка
		Если ТипДанныхСтрока = "Справочники" Тогда
			НазваниеСпр = Сред(ТипДанных,(СтрНайти(ТипДанных, ".") + 1));	
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(Спр.Ссылка) КАК Количество
			|ИЗ
			|	Справочник." + НазваниеСпр + " КАК Спр
			|ГДЕ
			|	НЕ Спр.ПометкаУдаления";
			
			РезультатЗапроса = Запрос.Выполнить();			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Возврат ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли; 
			
		ИначеЕсли ТипДанныхСтрока = "ПланыВидовХарактеристик" Тогда
			НазваниеСпр = Сред(ТипДанных,(СтрНайти(ТипДанных, ".") + 1));	
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(Спр.Ссылка) КАК Количество
			|ИЗ
			|	ПланВидовХарактеристик." + НазваниеСпр + " КАК Спр
			|ГДЕ
			|	НЕ Спр.ПометкаУдаления";
			
			РезультатЗапроса = Запрос.Выполнить();			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Возврат ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли;
			
		ИначеЕсли ТипДанныхСтрока = "Перечисления" Тогда
			НазваниеПеречисл = Сред(ТипДанных,(СтрНайти(ТипДанных, ".") + 1));
			
			Возврат Перечисления[НазваниеПеречисл].Количество();
		КонецЕсли;
	Исключение КонецПопытки;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ОбновитьТаблицыШаговНаФорме()
	
	ТЗШаги  = ШагиНаФорме.Выгрузить();
	ТЗСвязи = СвязиШаговШаблонов.Выгрузить();
	
	// ШАПКА
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.Текст = ПолучитьТекстЗапросаШаги();	
	
	ЗапросШапка.УстановитьПараметр("ТабДФ", ТЗШаги);
	ЗапросШапка.УстановитьПараметр("ТабПорядок", ТЗСвязи);
	ЗапросШапка.УстановитьПараметр("Использование", "Шапка");
	
	РезШапка = ЗапросШапка.Выполнить().Выгрузить();
	ШагиНаФормеШапка.Загрузить(РезШапка);
	
	// СТРОКИ
	ЗапросСтроки = Новый Запрос;
	ЗапросСтроки.Текст = ПолучитьТекстЗапросаШаги();	
	
	ЗапросСтроки.УстановитьПараметр("ТабДФ", ТЗШаги);
	ЗапросСтроки.УстановитьПараметр("ТабПорядок", ТЗСвязи);
	ЗапросСтроки.УстановитьПараметр("Использование", "Строка");
	
	РезСтроки = ЗапросСтроки.Выполнить().Выгрузить();
	ШагиНаФормеСтроки.Загрузить(РезСтроки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаШаги()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВТ.Название КАК Название,
	|	ВТ.ТипДанных КАК ТипДанных,
	|	ВЫРАЗИТЬ(ВТ.ИД КАК СТРОКА(36)) КАК ИД,
	|	ВТ.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
	|	ВТ.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	|	ВЫРАЗИТЬ(ВТ.Использование КАК СТРОКА(50)) КАК Использование,
	|	ВТ.РежимВвода КАК РежимВвода,
	|	ВТ.ПодборРазмещение КАК ПодборРазмещение
	|ПОМЕСТИТЬ втДопФормы
	|ИЗ
	|	&ТабДФ КАК ВТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Порядок КАК Порядок,
	|	ВЫРАЗИТЬ(ВТ.ИдентификаторШага КАК СТРОКА(36)) КАК ИдентификаторШага
	|ПОМЕСТИТЬ втПорядок
	|ИЗ
	|	&ТабПорядок КАК ВТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторШага
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТабПорядок.Порядок, 0) КАК Порядок,
	|	ТабДопФормы.Название КАК Название,
	|	ТабДопФормы.ТипДанных КАК ТипДанных,
	|	ТабДопФормы.ИД КАК ИД,
	|	ТабДопФормы.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
	|	ТабДопФормы.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	|	ТабДопФормы.Использование КАК Использование,
	|	ВЫБОР
	|		КОГДА ТабДопФормы.РежимВвода = 1
	|			ТОГДА ""Вручную""
	|		КОГДА ТабДопФормы.РежимВвода = 2
	|			ТОГДА ""Автоматически""
	|		ИНАЧЕ ""По умолчанию""
	|	КОНЕЦ КАК РежимВвода,
	|	ВЫБОР
	|		КОГДА ТабДопФормы.ПодборРазмещение = 1
	|			ТОГДА ""Р""
	|		ИНАЧЕ ""П""
	|	КОНЕЦ КАК ПодборРазмещение
	|ИЗ
	|	втДопФормы КАК ТабДопФормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядок КАК ТабПорядок
	|		ПО ТабДопФормы.ИД = ТабПорядок.ИдентификаторШага
	|ГДЕ
	|	ТабДопФормы.Использование = &Использование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабПорядок.Порядок";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуШаговПоПорядку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТ.ИД КАК СТРОКА(36)) КАК ИД,
	|	ВТ.Использование КАК Использование,
	|	ВТ.Название КАК Название,
	|	ВТ.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
	|	ВТ.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	|	ВТ.ПодборРазмещение КАК ПодборРазмещение,
	|	ВТ.ПроверкаПоЗаданию КАК ПроверкаПоЗаданию,
	|	ВТ.РежимВвода КАК РежимВвода,
	|	ВТ.ИспользоватьВПоискеСтрок КАК ИспользоватьВПоискеСтрок
	|ПОМЕСТИТЬ втДопФормы
	|ИЗ
	|	&ТабДФ КАК ВТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Порядок КАК Порядок,
	|	ВЫРАЗИТЬ(ВТ.ИдентификаторШага КАК СТРОКА(36)) КАК ИдентификаторШага
	|ПОМЕСТИТЬ втПорядок
	|ИЗ
	|	&ТабПорядок КАК ВТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторШага
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТабПорядок.Порядок, 100) КАК Порядок,
	|	ТабДопФормы.ИД КАК ИД,
	|	ТабДопФормы.Использование КАК Использование,
	|	ТабДопФормы.Название КАК Название,
	|	ТабДопФормы.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
	|	ТабДопФормы.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	|	ТабДопФормы.ПодборРазмещение КАК ПодборРазмещение,
	|	ТабДопФормы.ПроверкаПоЗаданию КАК ПроверкаПоЗаданию,
	|	ТабДопФормы.РежимВвода КАК РежимВвода,
	|	ТабДопФормы.ИспользоватьВПоискеСтрок КАК ИспользоватьВПоискеСтрок
	|ИЗ
	|	втДопФормы КАК ТабДопФормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядок КАК ТабПорядок
	|		ПО ТабДопФормы.ИД = ТабПорядок.ИдентификаторШага
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабПорядок.Порядок";

	Запрос.УстановитьПараметр("ТабДФ"        , ШагиНаФорме.Выгрузить());
	Запрос.УстановитьПараметр("ТабПорядок"   , СвязиШаговШаблонов.Выгрузить());	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ЗаполнитьИДСправочника(ТипДанных)
	
	ИДСправочника = Новый УникальныйИдентификатор;
	
	ПараметрыОтбора = Новый Структура("ТипДанных", ТипДанных);
	Строки = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбора);
	
	Если Строки.Количество() > 0 Тогда
		Для каждого стр Из Строки Цикл
			Если Не ЗначениеЗаполнено(стр.ИДСправочника) Тогда Продолжить; КонецЕсли;
			
			ИДСправочника = стр.ИДСправочника;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИДСправочника;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнитьСвязиИВсеШаги(СтрокаШагов)
	
	ИдентификаторШаблона = Элементы.ШаблоныДокументов.ТекущиеДанные.Код;
	
	// связи
	НайдСтрокиСвязей = СвязиШаговШаблонов.НайтиСтроки(Новый Структура("ИдентификаторШага", СтрокаШагов.ИД));
	Если НайдСтрокиСвязей.Количество() = 0 Тогда
		СтрокаСвязей = СвязиШаговШаблонов.Добавить();
		СтрокаСвязей.ИдентификаторШага    = СтрокаШагов.ИД;
		СтрокаСвязей.ИдентификаторШаблона = ИдентификаторШаблона;
		СтрокаСвязей.Порядок              = 100;
	КонецЕсли;
	
	// таб всех доп шагов
	НайдСтрокиВсеШаги = ДополнительныеШаги.НайтиСтроки(Новый Структура("ИД", СтрокаШагов.ИД));
	Если НайдСтрокиВсеШаги.Количество() = 0 Тогда
		ИДСправочника = ЗаполнитьИДСправочника(СтрокаШагов.ТипДанных);
		
		СтрокаВсеШаги = ДополнительныеШаги.Добавить();
		СтрокаВсеШаги.ИД                = СтрокаШагов.ИД;
		СтрокаВсеШаги.ОтборДляШаблона   = Истина;
		СтрокаВсеШаги.ТипДанных         = СтрокаШагов.ТипДанных;
		СтрокаВсеШаги.ИДСправочника     = ИДСправочника;		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОбОшибкеВводаКолДопФорм(ИмяПоля)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = "Нельзя ввести более 10 доп. форм!";
	//Сообщение.Поле = ИмяПоля;
	Сообщение.УстановитьДанные(ЭтаФорма);
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеДопФормыДляШаблона(Параметр)

	ПараметрыСохранения = Параметр;
	НовыйШаг = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрыСохранения.ИД) Тогда // изменение строки
		НайдСтроки = ШагиНаФорме.НайтиСтроки(Новый Структура("ИД", ПараметрыСохранения.ИД));
		
		Если НайдСтроки.Количество() = 0 Тогда
			НовыйШаг = Истина;
		Иначе
			СтрокаШагов = НайдСтроки[0];
		КонецЕсли;
		
	Иначе // новая строка
		НовыйШаг = Истина;
	КонецЕсли;	
		
	Если НовыйШаг Тогда
		ВсеШагиПоИспользованию = ШагиНаФорме.НайтиСтроки(Новый Структура("Использование", СокрЛП(ПараметрыСохранения.Использование)));
		
		Если ВсеШагиПоИспользованию.Количество() >= 10 Тогда
			СообщитьОбОшибкеВводаКолДопФорм(?(СокрЛП(ПараметрыСохранения.Использование)="Шапка", "ШагиНаФормеШапка","ШагиНаФормеСтроки"));
			Возврат;
		КонецЕсли;
		
		СтрокаШагов = ШагиНаФорме.Добавить();
		СтрокаШагов.ИД            = Новый УникальныйИдентификатор();
		СтрокаШагов.Использование = СокрЛП(ПараметрыСохранения.Использование);
	КонецЕсли;
	
	СтрокаШагов.ПодборРазмещение         = ПараметрыСохранения.ПодборРазмещение;
	СтрокаШагов.ОбязательноеЗаполнение   = ПараметрыСохранения.НеобходимостьЗаполнения;
	СтрокаШагов.РежимВвода               = ПараметрыСохранения.РежимВвода;
	СтрокаШагов.ТипДанных                = СокрЛП(ПараметрыСохранения.ТипДанных);
	СтрокаШагов.ЗаполняемыйРеквизит      = СокрЛП(ПараметрыСохранения.ЗаполняемыйРеквизит);
	СтрокаШагов.Название                 = СокрЛП(ПараметрыСохранения.Название);
	СтрокаШагов.ПроверкаПоЗаданию        = СокрЛП(ПараметрыСохранения.ПроверкаПоЗаданию);
	СтрокаШагов.ИспользоватьВПоискеСтрок = ПараметрыСохранения.ИспользоватьВПоискеСтрок;
	
	ПроверитьЗаполнитьСвязиИВсеШаги(СтрокаШагов);
	ПереписатьПорядокШагов(Элементы.ШаблоныДокументов.ТекущиеДанные.Код);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПорядокДопФорм(ИмяЭлемента, ИД, ПределНомера, Коэфф, Использование)
	
	// связи
	НайдСтроки = СвязиШаговШаблонов.НайтиСтроки(Новый Структура("ИдентификаторШага", ИД));		
	Если  НайдСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтрокаСвязи = НайдСтроки[0];
	
	Если Коэфф = 1 Тогда
		Если СтрокаСвязи.Порядок <= ПределНомера Тогда Возврат; КонецЕсли;
	Иначе
		Если СтрокаСвязи.Порядок >= ПределНомера Тогда Возврат; КонецЕсли;
	КонецЕсли;
		
	НужныйПорядок = СтрокаСвязи.Порядок - 1*Коэфф;
	
	НайдСтрокиПред = СвязиШаговШаблонов.НайтиСтроки(Новый Структура("ИдентификаторШаблона, Порядок", СтрокаСвязи.ИдентификаторШаблона, НужныйПорядок));		
	Если  НайдСтрокиПред.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Для каждого стр Из НайдСтрокиПред Цикл
		ВремСтр = ШагиНаФорме.НайтиСтроки(Новый Структура("ИД", стр.ИдентификаторШага));
		Если ВремСтр.Количество() = 0 Тогда Продолжить; КонецЕсли;
		
		Если ВремСтр[0].Использование = Использование Тогда		
			СтрокаСвязиПред = стр;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаСвязи.Порядок     = НужныйПорядок;
	СтрокаСвязиПред.Порядок = НужныйПорядок + 1*Коэфф;
	
	ОбновитьТаблицыШаговНаФорме();
	
	Если ИмяЭлемента = "ШагиНаФормеСтроки" Тогда
		НайдСтроки = ШагиНаФормеСтроки.НайтиСтроки(Новый Структура("ИД", ИД));
	Иначе
		НайдСтроки = ШагиНаФормеШапка.НайтиСтроки(Новый Структура("ИД", ИД));
	КонецЕсли;
	
	Идентификатор = 0;
	Если Не НайдСтроки.Количество() = 0 Тогда
		Идентификатор = НайдСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;

	Элементы[ИмяЭлемента].ТекущаяСтрока = Идентификатор;
	
КонецПроцедуры

// ШАПКА
&НаКлиенте
Процедура ДополнительнуюФормыСоздатьФорму(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидДокумента" , Элементы.ШаблоныДокументов.ТекущиеДанные.ВидДокумента);
	ПараметрыОткрытия.Вставить("Использование", "Шапка");
	ПараметрыОткрытия.Вставить("ПодборРазмещение", 0);
	
	ОткрытьФорму(ПолноеИмяОбъекта+".Форма.ФормаСвязиДопФормИШаблонов", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнуюФормыПереместитьФормуПозже(Команда)
	
    ТекСтрока = Элементы.ШагиНаФормеШапка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ИД           = ТекСтрока.ИД;	
	ПределНомера = ШагиНаФорме.НайтиСтроки(Новый Структура("Использование", "Шапка")).Количество();
		
	ПереместитьПорядокДопФорм("ШагиНаФормеШапка", ИД, ПределНомера, -1, "Шапка");

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнуюФормыПереместитьФормуРаньше(Команда)
	
	ТекСтрока = Элементы.ШагиНаФормеШапка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ИД           = ТекСтрока.ИД; 
	ПределНомера = 1;
		
	ПереместитьПорядокДопФорм("ШагиНаФормеШапка", ИД, ПределНомера, 1, "Шапка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнуюФормыУдалитьФорму(Команда)
	
	ТекСтрока = Элементы.ШагиНаФормеШапка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ИД = ТекСтрока.ИД;
	
	// на форме
	НайдСтроки = ШагиНаФорме.НайтиСтроки(Новый Структура("ИД", ИД));		
	Если НЕ НайдСтроки.Количество() = 0 Тогда
		ШагиНаФорме.Удалить(НайдСтроки[0]);
	КонецЕсли;
	
	// связи
	НайдСтроки = СвязиШаговШаблонов.НайтиСтроки(Новый Структура("ИдентификаторШага", ИД));		
	Если НЕ НайдСтроки.Количество() = 0 Тогда
		СвязиШаговШаблонов.Удалить(НайдСтроки[0]);
	КонецЕсли;
	
	// все шаги
	НайдСтроки = ДополнительныеШаги.НайтиСтроки(Новый Структура("ИД", ИД));		
	Если НЕ НайдСтроки.Количество() = 0 Тогда
		ДополнительныеШаги.Удалить(НайдСтроки[0]);
	КонецЕсли;
	
	ПереписатьПорядокШагов(Элементы.ШаблоныДокументов.ТекущиеДанные.Код);
		
КонецПроцедуры

&НаКлиенте
Процедура ШагиНаФормеШапкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ШагиНаФормеШапка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	ИД = ТекСтрока.ИД;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидДокумента", Элементы.ШаблоныДокументов.ТекущиеДанные.ВидДокумента);
	ПараметрыОткрытия.Вставить("Использованиие", "Шапка");
	ПараметрыОткрытия.Вставить("ИД"            , ИД); 
	
	НайдСтроки = ШагиНаФорме.НайтиСтроки(Новый Структура("ИД", ИД));
	
	Если НайдСтроки.Количество() = 0 Тогда
		Сообщить("Не найдена строка с ИД " + ИД);
		Возврат;
	Иначе
		СтрокаШагов = НайдСтроки[0];
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Название"               , СтрокаШагов.Название);
	ПараметрыОткрытия.Вставить("Использование"          , СтрокаШагов.Использование);
	ПараметрыОткрытия.Вставить("ПодборРазмещение"       , СтрокаШагов.ПодборРазмещение);
	ПараметрыОткрытия.Вставить("НеобходимостьЗаполнения", СтрокаШагов.ОбязательноеЗаполнение);
	ПараметрыОткрытия.Вставить("РежимВвода"             , СтрокаШагов.РежимВвода);
	ПараметрыОткрытия.Вставить("ТипДанных"              , СтрокаШагов.ТипДанных);
	ПараметрыОткрытия.Вставить("ЗаполняемыйРеквизит"    , СтрокаШагов.ЗаполняемыйРеквизит);
	
	ОткрытьФорму(ПолноеИмяОбъекта+".Форма.ФормаСвязиДопФормИШаблонов", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
	
КонецПроцедуры

// СТРОКИ
&НаКлиенте
Процедура ДополнительнуюФормыСтрокиСоздатьФорму(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидДокумента" , Элементы.ШаблоныДокументов.ТекущиеДанные.ВидДокумента);
	ПараметрыОткрытия.Вставить("Использование", "Строка");
	ПараметрыОткрытия.Вставить("ИмяТабЧастиПодбор", Элементы.ШаблоныДокументов.ТекущиеДанные.ИмяТабличнойЧастиПодбор);
	ПараметрыОткрытия.Вставить("ИмяТабЧастиПриемка", Элементы.ШаблоныДокументов.ТекущиеДанные.ИмяТабличнойЧастиПриемка);
	
	Если Не (Элементы.ШаблоныДокументов.ТекущиеДанные.ИспользоватьПодбор И Элементы.ШаблоныДокументов.ТекущиеДанные.ИспользоватьПриемку) Тогда
		ПараметрыОткрытия.Вставить("ПодборРазмещение", ?(Элементы.ШаблоныДокументов.ТекущиеДанные.ИспользоватьПриемку, 1, 0));
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяОбъекта+".Форма.ФормаСвязиДопФормИШаблонов", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнуюФормыСтрокиПереместитьФормуПозже(Команда)
	
    ТекСтрока = Элементы.ШагиНаФормеСтроки.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ИД           = ТекСтрока.ИД;	
	ПределНомера = ШагиНаФорме.НайтиСтроки(Новый Структура("Использование", "Строка")).Количество();
		
	ПереместитьПорядокДопФорм("ШагиНаФормеСтроки", ИД, ПределНомера, -1, "Строка");

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнуюФормыСтрокиПереместитьФормуРаньше(Команда)
	
	ТекСтрока = Элементы.ШагиНаФормеСтроки.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ИД           = ТекСтрока.ИД; 
	ПределНомера = 1;
		
	ПереместитьПорядокДопФорм("ШагиНаФормеСтроки", ИД, ПределНомера, 1, "Строка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнуюФормыСтрокиУдалитьФорму(Команда)
	
	ТекСтрока = Элементы.ШагиНаФормеСтроки.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ИД = ТекСтрока.ИД;
	
	// на форме
	НайдСтроки = ШагиНаФорме.НайтиСтроки(Новый Структура("ИД", ИД));		
	Если НЕ НайдСтроки.Количество() = 0 Тогда
		ШагиНаФорме.Удалить(НайдСтроки[0]);
	КонецЕсли;
	
	// связи
	НайдСтроки = СвязиШаговШаблонов.НайтиСтроки(Новый Структура("ИдентификаторШага", ИД));		
	Если НЕ НайдСтроки.Количество() = 0 Тогда
		СвязиШаговШаблонов.Удалить(НайдСтроки[0]);
	КонецЕсли;
	
	// все шаги
	НайдСтроки = ДополнительныеШаги.НайтиСтроки(Новый Структура("ИД", ИД));		
	Если Не НайдСтроки.Количество() = 0 Тогда
		ДополнительныеШаги.Удалить(НайдСтроки[0]);
	КонецЕсли;
	
	ПереписатьПорядокШагов(Элементы.ШаблоныДокументов.ТекущиеДанные.Код);
		
КонецПроцедуры

&НаКлиенте
Процедура ШагиНаФормеСтрокиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ШагиНаФормеСтроки.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	ИД = ТекСтрока.ИД;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидДокумента", Элементы.ШаблоныДокументов.ТекущиеДанные.ВидДокумента);
	ПараметрыОткрытия.Вставить("ИмяТабЧастиПодбор", Элементы.ШаблоныДокументов.ТекущиеДанные.ИмяТабличнойЧастиПодбор);
	ПараметрыОткрытия.Вставить("ИмяТабЧастиПриемка", Элементы.ШаблоныДокументов.ТекущиеДанные.ИмяТабличнойЧастиПриемка);
	ПараметрыОткрытия.Вставить("Использованиие", "Строка");
	ПараметрыОткрытия.Вставить("ИД"            , ИД); 
	
	НайдСтроки = ШагиНаФорме.НайтиСтроки(Новый Структура("ИД", ИД));
	
	Если НайдСтроки.Количество() = 0 Тогда
		Сообщить("Не найдена строка с ИД " + ИД);
		Возврат;
	Иначе
		СтрокаШагов = НайдСтроки[0];
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Название"                , СтрокаШагов.Название);
	ПараметрыОткрытия.Вставить("Использование"           , СтрокаШагов.Использование);
	ПараметрыОткрытия.Вставить("ПодборРазмещение"        , СтрокаШагов.ПодборРазмещение);
	ПараметрыОткрытия.Вставить("НеобходимостьЗаполнения" , СтрокаШагов.ОбязательноеЗаполнение);
	ПараметрыОткрытия.Вставить("РежимВвода"              , СтрокаШагов.РежимВвода);
	ПараметрыОткрытия.Вставить("ТипДанных"               , СтрокаШагов.ТипДанных);
	ПараметрыОткрытия.Вставить("ЗаполняемыйРеквизит"     , СтрокаШагов.ЗаполняемыйРеквизит);
	ПараметрыОткрытия.Вставить("ПроверкаПоЗаданию"       , СтрокаШагов.ПроверкаПоЗаданию);
	ПараметрыОткрытия.Вставить("ИспользоватьВПоискеСтрок", СтрокаШагов.ИспользоватьВПоискеСтрок);
	
	ОткрытьФорму(ПолноеИмяОбъекта + ".Форма.ФормаСвязиДопФормИШаблонов", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Номенклатура

// Функция осуществляет поиск номенклатуры в БД
//
// Параметры:
//  ИдентификаторТовара - код номенклатуры
//
//  ШтрихкодТовара 		- штрихкод номенклатуры
//
//	НаименованиеТовара 	- наименование номенклатуры
//
// Возвращаемое значение:
//  ДанныеНМ - список значений полученной номенклатуры
//
&НаСервере
Функция ПолучитьНоменклатуру(ИдентификаторТовара,ШтрихкодТовара,НаименованиеТовара)
	
	ДанныеНоменклатуры = Новый СписокЗначений;
	
	Префикс = Лев(ИдентификаторТовара,3);
	ИдентификаторНоменклатуры   = СокрЛП(Сред(ИдентификаторТовара, 4, 36));
	ИдентификаторХарактеристики = СокрЛП(Сред(ИдентификаторТовара, 40, 36)); 
	
	Попытка  // получение номенклатуры по идентификатору
		ГУИ_Ном = Новый УникальныйИдентификатор(ИдентификаторНоменклатуры);
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(ГУИ_Ном);
		
		Если ИдентификаторХарактеристики <> "00000000-0000-0000-0000-000000000000" Тогда
			ГУИ_Характеристика = Новый УникальныйИдентификатор(ИдентификаторХарактеристики);
			ХарактеристикаНоменклатуры = (Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ГУИ_Характеристика));
		Иначе			
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	Исключение // не получение номенклатуры по идентификатору
		ЗапросШтрихкодов = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Штрихкоды.Номенклатура КАК Номенклатура,
		|	Штрихкоды.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &ШК");
		
		ЗапросШтрихкодов.УстановитьПараметр("ШК", ШтрихкодТовара);
		ТаблицаНоменклатуры = ЗапросШтрихкодов.Выполнить().Выгрузить();
		
		Если ТаблицаНоменклатуры.Количество() <> 0 Тогда // получение номенклатуры по штрихкоду
			Номенклатура = ТаблицаНоменклатуры[0].Номенклатура;
			ХарактеристикаНоменклатуры = ТаблицаНоменклатуры[0].Характеристика;
		Иначе   
			Если НаименованиеТовара = "" Тогда				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Обнаружена номенклатура с пустым наименованием (шк - " + ШтрихкодТовара + ")";
				Сообщение.Сообщить();
				
				ДанныеНоменклатуры = Новый СписокЗначений();
				ДанныеНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());
				ДанныеНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
				ДанныеНоменклатуры.Добавить(1); //коэффициент по умолчанию
				ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
				
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Обнаружена новая номенклатура - " + НаименованиеТовара + " (шк - " + ШтрихкодТовара + ")";
				Сообщение.Сообщить();
				
				ДанныеНоменклатуры = СоздатьНоменклатуру(ШтрихкодТовара, НаименованиеТовара);
				Если ДанныеНоменклатуры = "" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Ошибка создания новой номенклатуры!!!";
					Сообщение.Сообщить();
					Возврат "";
				КонецЕсли;
			КонецЕсли;
			
			Возврат ДанныеНоменклатуры; //новая номенклатура			
		КонецЕсли;
	КонецПопытки;
	
	Попытка
		НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
	Исключение	
		НоменклатураОбъект = Неопределено; 
	КонецПопытки;

	Если НоменклатураОбъект = Неопределено Тогда // не получение номенклатуры по идентификатору
		ЗапросШтрихкодов = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Штрихкоды.Номенклатура КАК Номенклатура,
		|	Штрихкоды.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &ШК");
		ЗапросШтрихкодов.УстановитьПараметр("ШК",ШтрихкодТовара);
		ТаблицаНоменклатуры=ЗапросШтрихкодов.Выполнить().Выгрузить();
		
		Если ТаблицаНоменклатуры.Количество() <> 0 Тогда // получение номенклатуры по штрихкоду
			Номенклатура = ТаблицаНоменклатуры[0].Номенклатура;
			ХарактеристикаНоменклатуры = ТаблицаНоменклатуры[0].Характеристика;
			
		Иначе			
			Если НаименованиеТовара = "" Тогда				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Обнаружена номенклатура с пустым наименованием (шк - " + ШтрихкодТовара + ")";
				Сообщение.Сообщить();
				
				ДанныеНоменклатуры = Новый СписокЗначений();
				ДанныеНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());
				ДанныеНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
				ДанныеНоменклатуры.Добавить(1); //коэффициент по умолчанию
				ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
				
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Обнаружена новая номенклатура - " + НаименованиеТовара + " (шк - " + ШтрихкодТовара + ")";
				Сообщение.Сообщить();
				
				ДанныеНоменклатуры = СоздатьНоменклатуру(ШтрихкодТовара, НаименованиеТовара);
				
				Если ДанныеНоменклатуры = "" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Ошибка создания новой номенклатуры!!!";
					Сообщение.Сообщить();
					Возврат "";
				КонецЕсли;
			КонецЕсли;
			
			Возврат ДанныеНоменклатуры; //новая номенклатура			
		КонецЕсли;
	КонецЕсли;
	
	ДанныеНоменклатуры.Добавить(Номенклатура);
	ДанныеНоменклатуры.Добавить(ХарактеристикаНоменклатуры);
	
	Если ИспользоватьАртикулКакШтрихкодТовара Тогда
		ДанныеНоменклатуры.Добавить(Номенклатура.ЕдиницаИзмерения);
		ДанныеНоменклатуры.Добавить(1);
		ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		Возврат ДанныеНоменклатуры;		
	КонецЕсли;
	
	ЗапросЕдиниц = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Штрихкоды.Упаковка КАК ЕИ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель, 1) = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель, 1)
	|		КОНЕЦ / ВЫБОР
	|			КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель, 1) = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель, 1)
	|		КОНЕЦ, 1) КАК КФ
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Код");
	
	Попытка 
		ЗапросЕдиниц.УстановитьПараметр("Код", ШтрихкодТовара);
	Исключение
		ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		ДанныеНоменклатуры.Добавить(1);
		ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		Возврат ДанныеНоменклатуры;
	КонецПопытки;
	
	ТаблицаЕдиниц = ЗапросЕдиниц.Выполнить().Выгрузить();
	
	Если ТаблицаЕдиниц.Количество() = 0 Или ШтрихкодТовара = "" Тогда	
		ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());//единица по умолчанию 
		ДанныеНоменклатуры.Добавить(1); //коэффициент по умолчанию
		ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		
		Если ШтрихкодТовара <> "" И СтрДлина(ШтрихкодТовара) <> 5 И Лев(ШтрихкодТовара,1) <> "2" Тогда
			РегистрШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			РегистрШК.Штрихкод       = ШтрихкодТовара;
			РегистрШК.Номенклатура   = Номенклатура.Ссылка;
			РегистрШК.Упаковка       = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			РегистрШК.Характеристика = ХарактеристикаНоменклатуры.Ссылка;
			РегистрШК.Записать();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Создан штрих-код: " + ШтрихкодТовара + "  , номенклатура -" + НаименованиеТовара;
			Сообщение.Сообщить();
		КонецЕсли;
		
		Возврат ДанныеНоменклатуры;
	КонецЕсли;
	
	Для каждого СтрЕд Из ТаблицаЕдиниц Цикл
		Если СтрЕд.ЕИ = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
			ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()); //единица по умолчанию 
			ДанныеНоменклатуры.Добавить(1); //коэффициент по умолчанию
			ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			
		Иначе
			ДанныеНоменклатуры.Добавить(СтрЕд.ЕИ);
			ДанныеНоменклатуры.Добавить(СтрЕд.КФ);
			ДанныеНоменклатуры.Добавить(СтрЕд.ЕИ);			
		КонецЕсли;  
		
		Прервать; //штрихкод должен уникально определять единицу
	КонецЦикла;
	
	Возврат ДанныеНоменклатуры; //найденная номенклатура 
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьТоварыЕслиКаталогиДоступны()
	
	АдресДанныхТовары = ЗаполнитьТаблицуТовары();	
	АдресДанныхШтрихкоды = ЗаполнитьТаблицуШтрихкоды();	
	
	Если Товары.Количество() = 0 Тогда
		ПоказатьСообщениеПользователю("Нет номенклатуры для выгрузки!");
		Возврат;
	КонецЕсли;	   
	
	КоличествоЭлементов = Товары.Количество() + Штрихкоды.Количество();
	ИндикаторТовары = 0; 
	
	тхт_тв = Новый ТекстовыйДокумент;
	ТекстФайлаТовары = "" + ?(ОчиститьТовары, "-", "+") + Символы.ПС;
	ТекстФайлаТовары = ТекстФайлаТовары + "" + Атрибут1Синоним + ";" + Атрибут2Синоним + ";" + Атрибут3Синоним + ";" + Атрибут4Синоним + ";" + Атрибут5Синоним + ";" + Атрибут6Синоним + ";" + Атрибут7Синоним + ";" + Атрибут8Синоним + ";" + Атрибут9Синоним + ";" + Атрибут10Синоним + ";";
	
	// доп. типы цен наименования
	ТекстФайлаТовары = ТекстФайлаТовары + ?(ЗначениеЗаполнено(ДопТипЦен1), ЧистаяСтрока(ДопТипЦен1), "") + ";";
	ТекстФайлаТовары = ТекстФайлаТовары + ?(ЗначениеЗаполнено(ДопТипЦен2), ЧистаяСтрока(ДопТипЦен2), "") + ";";
	ТекстФайлаТовары = ТекстФайлаТовары + ?(ЗначениеЗаполнено(ДопТипЦен3), ЧистаяСтрока(ДопТипЦен3), "") + ";";
	
	ТекстФайлаТовары = ТекстФайлаТовары + Символы.ПС;
				
	КоличествоТовары = Товары.Количество();
	
	Если КоличествоТовары < 100 Тогда
		РазмерШагаТовары = 5;
	ИначеЕсли КоличествоТовары<1000 Тогда
		РазмерШагаТовары = 10;
	ИначеЕсли КоличествоТовары < 10000 Тогда
		РазмерШагаТовары = 100;
	ИначеЕсли КоличествоТовары < 100000 Тогда
		РазмерШагаТовары = 1000;
	Иначе 
		РазмерШагаТовары = 10000;
	КонецЕсли;
	
	КоличествоШаговТовары = Цел(КоличествоТовары / РазмерШагаТовары);
	КоличествоЦелТовары   = КоличествоШаговТовары * РазмерШагаТовары;
	
	Если КоличествоЦелТовары < КоличествоТовары Тогда
		МаксимальноеЗначениеИндикатораТовары = КоличествоШаговТовары + 1;
	Иначе
		МаксимальноеЗначениеИндикатораТовары = КоличествоШаговТовары;
	КонецЕсли;     	
	
	тхт_шк = Новый ТекстовыйДокумент;
	ТекстФайлаШтрихкоды = "" + ?(ОчиститьТовары, "-", "+") + Символы.ПС;
	
	КоличествоШтрихкоды = Штрихкоды.Количество();
	
	Если КоличествоШтрихкоды < 100 Тогда
		РазмерШагаШтрихкоды = 5;
	ИначеЕсли КоличествоШтрихкоды < 1000 Тогда
		РазмерШагаШтрихкоды = 10;
	ИначеЕсли КоличествоШтрихкоды < 10000 Тогда
		РазмерШагаШтрихкоды = 100;
	ИначеЕсли КоличествоШтрихкоды < 100000 Тогда
		РазмерШагаШтрихкоды = 1000;
	Иначе 
		РазмерШагаШтрихкоды = 10000;
	КонецЕсли;
	
	КоличествоШаговШтрихкоды = Цел(КоличествоШтрихкоды / РазмерШагаШтрихкоды);
	КоличествоЦелШтрихкоды   = КоличествоШаговШтрихкоды * РазмерШагаШтрихкоды;
	
	Если КоличествоЦелШтрихкоды < КоличествоШтрихкоды Тогда
		МаксимальноеЗначениеИндикатораШтрихкоды = КоличествоШаговШтрихкоды + 1;
	Иначе
		МаксимальноеЗначениеИндикатораШтрихкоды = КоличествоШаговШтрихкоды;
	КонецЕсли;   	
	
	Элементы.ИндикаторТовары.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораТовары + МаксимальноеЗначениеИндикатораШтрихкоды;
	
	СтруктураПараметров = Новый Структура("ИДТСД, АдресДанных, АртикулВставитьВНазвание, НеОтображатьОстатки", 
	ИДТСД, АдресДанныхТовары, АртикулВставитьВНазвание, НеОтображатьОстатки);
	ДобавитьВСтруктуруАтрибуты(СтруктураПараметров);
	ДобавитьВСтруктуруДопТипыЦен(СтруктураПараметров);
		
	Для Счетчик = 1 По КоличествоШаговТовары Цикл
		ТекстФайлаТовары = ТекстФайлаТовары + ВыгрузитьПорциюТоваров(РазмерШагаТовары * (Счетчик - 1) + 1, РазмерШагаТовары * Счетчик, СтруктураПараметров);
		
		ИндикаторТовары = Счетчик;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();		
	КонецЦикла;  
	
	Если КоличествоЦелТовары < КоличествоТовары Тогда		
		ТекстФайлаТовары = ТекстФайлаТовары + ВыгрузитьПорциюТоваров(КоличествоШаговТовары * РазмерШагаТовары + 1, КоличествоТовары, СтруктураПараметров);
		
		ИндикаторТовары = ИндикаторТовары + 1;		
	КонецЕсли; 
	
	тхт_тв.УстановитьТекст(ТекстФайлаТовары);
	тхт_тв.ВставитьСтроку(0, "" + Формат(тхт_тв.КоличествоСтрок(), "ЧГ=0"));
	
	ИмяФайлаВыгрузкиТоваров = РазделительПути + Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Arts.dm";
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт_тв, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Arts.dm" + "temp");
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда
			тхт_тв.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиТоваров, КодировкаТекста.UTF8);
		Иначе
			тхт_тв.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиТоваров, КодировкаТекста.UTF8);
		КонецЕсли;	
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена+"DataMobile" + РазделительПути, лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиТоваров, ИДТСД, ИмяФайлаВыгрузкиТоваров);
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена+"DataMobile" + РазделительПути, лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиТоваров, ИДТСД, ИмяФайлаВыгрузкиТоваров);
			КонецЕсли;	
		КонецЕсли;  
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Arts.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт_тв.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли; 
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);		
	КонецЕсли; 
	
	Для Счетчик = 1 По КоличествоШаговШтрихкоды Цикл		
		ТекстФайлаШтрихкоды = ТекстФайлаШтрихкоды + ВыгрузитьПорциюШтрихкодов(РазмерШагаШтрихкоды * (Счетчик - 1) + 1, РазмерШагаШтрихкоды * Счетчик, Новый Структура("АдресДанных", АдресДанныхШтрихкоды));
		ИндикаторТовары = ИндикаторТовары + 1;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных(); 		
	КонецЦикла;
	
	Если КоличествоЦелШтрихкоды < КоличествоШтрихкоды Тогда		
		ТекстФайлаШтрихкоды = ТекстФайлаШтрихкоды + ВыгрузитьПорциюШтрихкодов(КоличествоШаговШтрихкоды * РазмерШагаШтрихкоды + 1, КоличествоШтрихкоды, Новый Структура("АдресДанных", АдресДанныхШтрихкоды));
		ИндикаторТовары = ИндикаторТовары + 1;		
	КонецЕсли;
	
	тхт_шк.УстановитьТекст(ТекстФайлаШтрихкоды);
	тхт_шк.ВставитьСтроку(0, "" + Формат(тхт_шк.КоличествоСтрок(), "ЧГ=0"));
	
	ИмяФайлаВыгрузкиШК = РазделительПути + Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_BarCodes.dm";
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт_шк, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_BarCodes.dm" + "temp");
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда 
			тхт_шк.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиШК, КодировкаТекста.UTF8);
		Иначе     
			тхт_шк.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиШК, КодировкаТекста.UTF8);
		КонецЕсли;
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиШК, ИДТСД, ИмяФайлаВыгрузкиШК);
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиШК, ИДТСД, ИмяФайлаВыгрузкиШК);
			КонецЕсли;	
		КонецЕсли; 
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_BarCodes.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт_шк.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли; 
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СобратьСписокИменАтрибута()
		
	СписокОтвета = Новый СписокЗначений();
	СписокОтвета.Добавить("!!! Ячейки !!!");
	СписокОтвета.Добавить("Код");
	СписокОтвета.Добавить("Родитель");
	
	Для каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		СписокОтвета.Добавить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;
	
	//ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 
	| СправочникНоменклатураДополнительныеРеквизиты.Свойство КАК Свойство, 
	| СправочникНоменклатураДополнительныеРеквизиты.Свойство.Заголовок КАК НаименованиеСвойства
	|ИЗ
	| Справочник.Номенклатура.ДополнительныеРеквизиты КАК СправочникНоменклатураДополнительныеРеквизиты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОтвета.Добавить("ДР_"+Выборка.НаименованиеСвойства);	
	КонецЦикла;		
	
	Возврат СписокОтвета;
	
КонецФункции

&НаСервере
Функция ОчиститьШтрихкод(Знач ГрязнаяСтрока)
	
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока,"(","");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока,")","");
	
	ЧистаяСтрока = СокрЛП(ГрязнаяСтрока);
	
	Возврат ЧистаяСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЦен(ВыбраннаяГруппаТовара, ВыбранныйТипЦен)
	
	ЗапросЦены = Новый Запрос;
	ЗапросЦены.УстановитьПараметр("Товар"    , ВыбраннаяГруппаТовара);
	ЗапросЦены.УстановитьПараметр("ВсеТовары", ВыбраннаяГруппаТовара.Количество() = 0);
	ЗапросЦены.УстановитьПараметр("ТипЦен"   , ВыбранныйТипЦен);
	
	Если Ценообразование25() Тогда
		ЗапросЦены.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ Цены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			(Номенклатура.Ссылка В ИЕРАРХИИ (&Товар)
		|				ИЛИ &ВсеТовары)
		|				И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
		|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ Цены25СЦО
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|			,
		|			(Номенклатура.Ссылка В ИЕРАРХИИ (&Товар)
		|				ИЛИ &ВсеТовары)
		|				И ВидЦены = &ТипЦен) КАК ЦеныНоменклатуры25СрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.Пустаяссылка)) = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.Пустаяссылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
		|		ИНАЧЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка))
		|	КОНЕЦ КАК Ссылка,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.Пустаяссылка)) КАК ХарактеристикаНоменклатурыДляЦенообразования
		|ПОМЕСТИТЬ ХарактеристикиВыбранныеПоЦО
		|ИЗ
		|	Цены25СЦО КАК Цены25СЦО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО Цены25СЦО.ХарактеристикаЦО = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиВыбранныеПоЦО.Ссылка КАК Характеристика,
		|	Цены25.Номенклатура КАК Номенклатура,
		|	Цены25.Цена КАК Цена
		|ПОМЕСТИТЬ Цены25
		|ИЗ
		|	ХарактеристикиВыбранныеПоЦО КАК ХарактеристикиВыбранныеПоЦО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Цены25СЦО КАК Цены25
		|		ПО ХарактеристикиВыбранныеПоЦО.ХарактеристикаНоменклатурыДляЦенообразования = Цены25.ХарактеристикаЦО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Цены.Номенклатура КАК Номенклатура,
		|	Цены.Характеристика КАК Характеристика,
		|	Цены.Цена КАК Цена,
		|	0 КАК Цена25
		|ПОМЕСТИТЬ ДанныеЦен
		|ИЗ
		|	Цены КАК Цены
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Цены25.Номенклатура,
		|	Цены25.Характеристика,
		|	0,
		|	Цены25.Цена
		|ИЗ
		|	Цены25 КАК Цены25
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЦен.Номенклатура КАК Номенклатура,
		|	ДанныеЦен.Характеристика КАК Характеристика,
		|	МАКСИМУМ(ДанныеЦен.Цена) КАК Цена,
		|	МАКСИМУМ(ДанныеЦен.Цена25) КАК Цена25
		|ПОМЕСТИТЬ Итоговая
		|ИЗ
		|	ДанныеЦен КАК ДанныеЦен
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеЦен.Номенклатура,
		|	ДанныеЦен.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Итоговая.Номенклатура КАК Номенклатура,
		|	Итоговая.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА Итоговая.Цена25 = 0
		|				И НЕ Итоговая.Цена = 0
		|			ТОГДА Итоговая.Цена
		|		ИНАЧЕ Итоговая.Цена25
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	Итоговая КАК Итоговая";
		ТаблицаЦен = ЗапросЦены.Выполнить().Выгрузить();
		
	Иначе
		ЗапросЦены.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			(Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
		|				И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних";
		ТаблицаЦен = ЗапросЦены.Выполнить().Выгрузить(); 
	КонецЕсли;	
	
	Возврат ТаблицаЦен;
	
КонецФункции

// Процедура - подставляет заполненные атрибуты в запрос
//
&НаСервере
Процедура ПодставитьВЗапросАтрибуты(ЗапросТоваров, ИмяРеквизитаНоменклатуры, ЕГАИС = Ложь)
	
	Если (Атрибут1 <> "") И (Атрибут1 <> "!!! Ячейки !!!") И (Атрибут1 <> "!!! Остатки !!!") И (Лев(Атрибут1, 3) <> "ДР_") Тогда
		Если (Атрибут1 = "ДополнительноеОписаниеНоменклатуры") Или (Атрибут1 = "НаименованиеПолное") Или (Атрибут1 = "Комментарий") Тогда //неограниченные строки
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут1", "ВЫРАЗИТЬ (" + ИмяРеквизитаНоменклатуры + Атрибут1 + " КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут1", ИмяРеквизитаНоменклатуры + Атрибут1);
		КонецЕсли;		
	ИначеЕсли Атрибут1 = "!!! Ячейки !!!" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут1", "ЕСТЬNULL(СписокЯчеек.АдресХранения, """")");
	ИначеЕсли Лев(Атрибут1, 3) = "ДР_" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут1", "ВЫРАЗИТЬ (""""КАК СТРОКА(100))");	
	Иначе	
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут1", """""");
	КонецЕсли;
	
	Если (Атрибут2 <> "") И (Атрибут2 <> "!!! Ячейки !!!") И (Атрибут2 <> "!!! Остатки !!!" )И (Лев(Атрибут2, 3) <> "ДР_") Тогда
		Если (Атрибут2 = "ДополнительноеОписаниеНоменклатуры") Или (Атрибут2 = "НаименованиеПолное") Или (Атрибут2 = "Комментарий") Тогда //неограниченные строки
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2", "ВЫРАЗИТЬ (" + ИмяРеквизитаНоменклатуры + Атрибут2 + " КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2", ИмяРеквизитаНоменклатуры + Атрибут2);
		КонецЕсли;
	ИначеЕсли Атрибут2 = "!!! Ячейки !!!" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут2", "ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")");
	ИначеЕсли Лев(Атрибут2, 3) = "ДР_" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут2", "ВЫРАЗИТЬ (""""КАК СТРОКА(100))");	
	Иначе	
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут2", """""");
	КонецЕсли;
	
	Если (Атрибут3 <> "") И (Атрибут3 <> "!!! Ячейки !!!") И (Атрибут3 <> "!!! Остатки !!!") И (Лев(Атрибут3, 3) <> "ДР_") Тогда
		Если (Атрибут3 = "ДополнительноеОписаниеНоменклатуры") Или (Атрибут3 = "НаименованиеПолное") Или (Атрибут3 = "Комментарий") Тогда //неограниченные строки
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут3", "ВЫРАЗИТЬ (" + ИмяРеквизитаНоменклатуры + Атрибут3 + " КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут3", ИмяРеквизитаНоменклатуры + Атрибут3);
		КонецЕсли;
	ИначеЕсли Атрибут3 = "!!! Ячейки !!!" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут3", "ЕСТЬNULL(СписокЯчеек.АдресХранения, """")");
	ИначеЕсли Лев(Атрибут3, 3) = "ДР_" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут3", "ВЫРАЗИТЬ (""""КАК СТРОКА(100))");	
	Иначе	
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут3", """""");
	КонецЕсли;
	
	Если (Атрибут4 <> "") И (Атрибут4 <> "!!! Ячейки !!!") И (Атрибут4 <> "!!! Остатки !!!") И (Лев(Атрибут4, 3) <> "ДР_") Тогда
		Если (Атрибут4 = "ДополнительноеОписаниеНоменклатуры") Или (Атрибут4 = "НаименованиеПолное") Или (Атрибут4 = "Комментарий") Тогда //неограниченные строки
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут4", "ВЫРАЗИТЬ (" + ИмяРеквизитаНоменклатуры + Атрибут4 + " КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут4", ИмяРеквизитаНоменклатуры + Атрибут4);
		КонецЕсли;
	ИначеЕсли Атрибут4 = "!!! Ячейки !!!" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут4", "ЕСТЬNULL(СписокЯчеек.АдресХранения, """")");
	ИначеЕсли Лев(Атрибут4, 3) = "ДР_" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут4", "ВЫРАЗИТЬ (""""КАК СТРОКА(100))");	
	Иначе	
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут4", """""");
	КонецЕсли;	
	
	Если (Атрибут5 <> "") И (Атрибут5 <> "!!! Ячейки !!!") И (Атрибут5 <> "!!! Остатки !!!") И (Лев(Атрибут5, 3) <> "ДР_") Тогда
		Если (Атрибут5 = "ДополнительноеОписаниеНоменклатуры") Или (Атрибут5 = "НаименованиеПолное") Или (Атрибут5 = "Комментарий") Тогда //неограниченные строки
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут5", "ВЫРАЗИТЬ (" + ИмяРеквизитаНоменклатуры + Атрибут5 + " КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут5", ИмяРеквизитаНоменклатуры + Атрибут5);
		КонецЕсли;
	ИначеЕсли Атрибут5 = "!!! Ячейки !!!" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут5", "ЕСТЬNULL(СписокЯчеек.АдресХранения, """")");
	ИначеЕсли Лев(Атрибут5, 3) = "ДР_" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут5", "ВЫРАЗИТЬ (""""КАК СТРОКА(100))");	
	Иначе	
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут5", """""");
	КонецЕсли;	
	
	Если (Атрибут6 <> "") И (Атрибут6 <> "!!! Ячейки !!!") И (Атрибут6 <> "!!! Остатки !!!") И (Лев(Атрибут6, 3) <> "ДР_") Тогда
		Если (Атрибут6 = "ДополнительноеОписаниеНоменклатуры") Или (Атрибут6 = "НаименованиеПолное") Или (Атрибут6 = "Комментарий") Тогда //неограниченные строки
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут6", "ВЫРАЗИТЬ (" + ИмяРеквизитаНоменклатуры + Атрибут6 + " КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут6", ИмяРеквизитаНоменклатуры + Атрибут6);
		КонецЕсли;
	ИначеЕсли Атрибут6 = "!!! Ячейки !!!" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут6", "ЕСТЬNULL(СписокЯчеек.АдресХранения, """")");
	ИначеЕсли Лев(Атрибут6, 3) = "ДР_" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут6", "ВЫРАЗИТЬ (""""КАК СТРОКА(100))");	
	Иначе	
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут6", """""");
	КонецЕсли;	
	
	Если (Атрибут7 <> "") И (Атрибут7 <> "!!! Ячейки !!!") И (Атрибут7 <> "!!! Остатки !!!") И (Лев(Атрибут7, 3) <> "ДР_") Тогда
		Если (Атрибут7 = "ДополнительноеОписаниеНоменклатуры") Или (Атрибут7 = "НаименованиеПолное") Или (Атрибут7 = "Комментарий") Тогда //неограниченные строки
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут7", "ВЫРАЗИТЬ (" + ИмяРеквизитаНоменклатуры + Атрибут7 + " КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут7", ИмяРеквизитаНоменклатуры + Атрибут7);
		КонецЕсли;
	ИначеЕсли Атрибут7 = "!!! Ячейки !!!" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут7", "ЕСТЬNULL(СписокЯчеек.АдресХранения, """")");
	ИначеЕсли Лев(Атрибут7, 3) = "ДР_" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут7", "ВЫРАЗИТЬ (""""КАК СТРОКА(100))");	
	Иначе	
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут7", """""");
	КонецЕсли;	
	
	Если (Атрибут8 <> "") И (Атрибут8 <> "!!! Ячейки !!!") И (Атрибут8 <> "!!! Остатки !!!") И (Лев(Атрибут8, 3) <> "ДР_") Тогда
		Если (Атрибут8 = "ДополнительноеОписаниеНоменклатуры") Или (Атрибут8 = "НаименованиеПолное") Или (Атрибут8 = "Комментарий") Тогда //неограниченные строки
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут8", "ВЫРАЗИТЬ (" + ИмяРеквизитаНоменклатуры + Атрибут8 + " КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут8", ИмяРеквизитаНоменклатуры + Атрибут8);
		КонецЕсли;
	ИначеЕсли Атрибут8 = "!!! Ячейки !!!" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут8", "ЕСТЬNULL(СписокЯчеек.АдресХранения, """")");
	ИначеЕсли Лев(Атрибут8, 3) = "ДР_" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут8", "ВЫРАЗИТЬ (""""КАК СТРОКА(100))");	
	Иначе	
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут8", """""");
	КонецЕсли;	
	
	Если (Атрибут9 <> "") И (Атрибут9 <> "!!! Ячейки !!!") И (Атрибут9 <> "!!! Остатки !!!") И (Лев(Атрибут9, 3) <> "ДР_") Тогда
		Если (Атрибут9 = "ДополнительноеОписаниеНоменклатуры") Или (Атрибут9 = "НаименованиеПолное") Или (Атрибут9 = "Комментарий") Тогда //неограниченные строки
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут9", "ВЫРАЗИТЬ (" + ИмяРеквизитаНоменклатуры + Атрибут9 + " КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут9", ИмяРеквизитаНоменклатуры + Атрибут9);
		КонецЕсли;
	ИначеЕсли Атрибут9 = "!!! Ячейки !!!" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут9", "ЕСТЬNULL(СписокЯчеек.АдресХранения, """")");
	ИначеЕсли Лев(Атрибут9, 3) = "ДР_" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут9", "ВЫРАЗИТЬ (""""КАК СТРОКА(100))");	
	Иначе	
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут9", """""");
	КонецЕсли;	
	
	Если (Атрибут10 <> "") И (Атрибут10 <> "!!! Ячейки !!!") И (Атрибут10 <> "!!! Остатки !!!") И (Лев(Атрибут10, 3) <> "ДР_") Тогда
		Если (Атрибут10 = "ДополнительноеОписаниеНоменклатуры") Или (Атрибут10 = "НаименованиеПолное") Или (Атрибут10 = "Комментарий") Тогда //неограниченные строки
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут0", "ВЫРАЗИТЬ (" + ИмяРеквизитаНоменклатуры + Атрибут10 + " КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут0", ИмяРеквизитаНоменклатуры + Атрибут10);
		КонецЕсли;
	ИначеЕсли Атрибут10 = "!!! Ячейки !!!" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут0", "ЕСТЬNULL(СписокЯчеек.АдресХранения, """")");
	ИначеЕсли Лев(Атрибут10, 3) = "ДР_" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут0", "ВЫРАЗИТЬ (""""КАК СТРОКА(100))");	
	Иначе	
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "&Атрибут0", """""");
	КонецЕсли;
	
КонецПроцедуры
	
// Процедура заполняет для выгрузки таблицы товаров и штрихкодов
//
// Параметры
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 1
//
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 2	
//
&НаСервере
Функция ЗаполнитьТаблицуТовары()
	
	ЗапросТоваров = Новый Запрос();
	ЗапросТоваров.УстановитьПараметр("Товар"    , ВыбраннаяГруппаТовара.ВыгрузитьЗначения());
	ЗапросТоваров.УстановитьПараметр("ВсеТовары", ВыбраннаяГруппаТовара.Количество() = 0);
	                   	
	Если Не ЗначениеЗаполнено(СкладОстатков) Тогда		
		ЗапросТоваров.УстановитьПараметр("ВсеСклады", Истина);
		ЗапросТоваров.УстановитьПараметр("Склад"    , СкладОстатков);
	Иначе	
		ЗапросТоваров.УстановитьПараметр("ВсеСклады", Ложь);
		ЗапросТоваров.УстановитьПараметр("Склад"    , СкладОстатков);
	КонецЕсли;
	
	ТаблицаЦен = ПолучитьДанныеЦен(ВыбраннаяГруппаТовара.ВыгрузитьЗначения(), ВыбранныйТипЦен);
	ЗапросТоваров.УстановитьПараметр("ТаблицаЦен", ТаблицаЦен);
	                   	
	Если ТолькоТоварыСоШтрихкодами Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Ячейки.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
		|ПОМЕСТИТЬ СписокЯчеек
		|ИЗ
		|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
		|
		|СГРУППИРОВАТЬ ПО
		|	Ячейки.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
		|ПОМЕСТИТЬ ОстаткиНоменклатуры
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			(Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
		|				И (Склад = &Склад ИЛИ &ВсеСклады)) КАК ТоварыНаСкладахОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаЦен.Характеристика КАК Характеристика,
		|	ТаблицаЦен.Цена КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
		|ИЗ
		|	&ТаблицаЦен КАК ТаблицаЦен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Ссылка,
		|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, &Пустая) КАК СсылкаХарактеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления, ЛОЖЬ)
		|				ИЛИ ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика.ПометкаУдаления, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удалить,
		|	ВЫБОР
		|		КОГДА НЕ ШтрихкодыНоменклатуры.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
		|				ИЛИ &ИгнорироватьХарактеристики
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ШтрихкодыНоменклатуры.Характеристика ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|	КОНЕЦ КАК ЭтоХарактеристика,
		|	ШтрихкодыНоменклатуры.Номенклатура.Наименование + "" "" + ВЫБОР
		|		КОГДА НЕ ШтрихкодыНоменклатуры.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
		|				ИЛИ &ИгнорироватьХарактеристики
		|			ТОГДА """"
		|		ИНАЧЕ ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика.Наименование, """")
		|	КОНЕЦ КАК Товар,
		|	&Атрибут1 КАК Атрибут1,
		|	&Атрибут2 КАК Атрибут2,
		|	&Атрибут3 КАК Атрибут3,
		|	&Атрибут4 КАК Атрибут4,
		|	&Атрибут5 КАК Атрибут5,
		|	&Атрибут6 КАК Атрибут6,
		|	&Атрибут7 КАК Атрибут7,
		|	&Атрибут8 КАК Атрибут8,
		|	&Атрибут9 КАК Атрибут9,
		|	&Атрибут0 КАК Атрибут10,
		|	ЕСТЬNULL(ОстаткиНоменклатуры.ВНаличииОстаток, 0) КАК Остаток,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
		|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
		|		ПО (СписокЯчеек.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
		|		ПО ШтрихкодыНоменклатуры.Номенклатура = ОстаткиНоменклатуры.Номенклатура
		|			И (ОстаткиНоменклатуры.Характеристика = ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, &Пустая))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ШтрихкодыНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, &Пустая))		
		|ГДЕ
		|	НЕ ШтрихкодыНоменклатуры.Номенклатура.ЭтоГруппа
		|	И НЕ ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления
		|	И ШтрихкодыНоменклатуры.Номенклатура.Наименование <> """"
		|	И (ШтрихкодыНоменклатуры.Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
		|	И 1 = 1
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтрихкодыНоменклатуры.Номенклатура,
		|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, &Пустая),
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления, ЛОЖЬ)
		|				ИЛИ ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика.ПометкаУдаления, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ШтрихкодыНоменклатуры.Номенклатура.Наименование + "" "" + ВЫБОР
		|		КОГДА НЕ ШтрихкодыНоменклатуры.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
		|				ИЛИ &ИгнорироватьХарактеристики
		|			ТОГДА """"
		|		ИНАЧЕ ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика.Наименование, """")
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ ШтрихкодыНоменклатуры.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
		|				ИЛИ &ИгнорироватьХарактеристики
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ШтрихкодыНоменклатуры.Характеристика ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВидыНоменклатуры.ИспользоватьСерии,
		|	ЕСТЬNULL(ОстаткиНоменклатуры.ВНаличииОстаток, 0),
		|	ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШтрихкодыНоменклатуры.Номенклатура";
		
		ЗапросТоваров.Текст = ТекстЗапроса;
		
		ПодставитьВЗапросАтрибуты(ЗапросТоваров, "ШтрихкодыНоменклатуры.Номенклатура.", Ложь);		
		
	Иначе		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//ВЫБОРКА ССЫЛОК ТОВАРОВ И ХАРАКТЕРИСТИК ПО РАЗНЫМ УСЛОВИЯМ ВЕДЕНИЯ ХАРАКТЕРИСТИК 
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ВесИспользовать КАК Весовой,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
		|ПОМЕСТИТЬ СписокТоваровОбщий
		|ИЗ
		| 	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
		|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|			И НЕ &ИгнорироватьХарактеристики
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.Наименование <> """"
		|	И (Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
		|
		|ОБЪЕДИНИТЬ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ВесИспользовать,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры
		|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|			И НЕ &ИгнорироватьХарактеристики
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.Наименование <> """"
		|	И (Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
		|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL   
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ВесИспользовать,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВладелецХарактеристик
		|			И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|			И НЕ &ИгнорироватьХарактеристики
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.Наименование <> """"
		|	И (Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
		|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL	
		|	
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Ячейки.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
		|ПОМЕСТИТЬ СписокЯчеек
		|ИЗ
		|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
		|
		|СГРУППИРОВАТЬ ПО
		|	Ячейки.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
		|ПОМЕСТИТЬ ОстаткиНоменклатуры
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			(Номенклатура.Ссылка В ИЕРАРХИИ (&Товар) ИЛИ &ВсеТовары)
		|					И (Склад = &Склад ИЛИ &ВсеСклады)) КАК ТоварыНаСкладахОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаЦен.Характеристика КАК Характеристика,
		|	ТаблицаЦен.Цена КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
		|ИЗ
		|	&ТаблицаЦен КАК ТаблицаЦен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СписокТоваровОбщий.Номенклатура КАК Ссылка,
		|	СписокТоваровОбщий.Характеристика КАК СсылкаХарактеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СписокТоваровОбщий.Номенклатура.ПометкаУдаления, ЛОЖЬ)
		|				ИЛИ ЕСТЬNULL(СписокТоваровОбщий.Характеристика.ПометкаУдаления, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удалить,
		|	ВЫБОР
		|		КОГДА СписокТоваровОбщий.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ 
		|			ИСТИНА
		|	КОНЕЦ КАК ЭтоХарактеристика,
		|	СписокТоваровОбщий.Номенклатура.Наименование + "" "" + ЕСТЬNULL(СписокТоваровОбщий.Характеристика.Наименование,"""") КАК Товар,
		|	&Атрибут1 КАК Атрибут1,
		|	&Атрибут2 КАК Атрибут2,
		|	&Атрибут3 КАК Атрибут3,
		|	&Атрибут4 КАК Атрибут4,
		|	&Атрибут5 КАК Атрибут5,
		|	&Атрибут6 КАК Атрибут6,
		|	&Атрибут7 КАК Атрибут7,
		|	&Атрибут8 КАК Атрибут8,
		|	&Атрибут9 КАК Атрибут9,
		|	&Атрибут0 КАК Атрибут10,
		|	СУММА(ЕСТЬNULL(ОстаткиНоменклатуры.ВНаличииОстаток, 0)) КАК Остаток,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
		|	ЕСТЬNULL(СписокТоваровОбщий.Номенклатура.ВидНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии
		|ИЗ
		|	СписокТоваровОбщий КАК СписокТоваровОбщий
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
		|			ПО (СписокЯчеек.Номенклатура = СписокТоваровОбщий.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
		|			ПО (ОстаткиНоменклатуры.Номенклатура = СписокТоваровОбщий.Номенклатура)
		|				И (ОстаткиНоменклатуры.Характеристика = СписокТоваровОбщий.Характеристика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|			ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = СписокТоваровОбщий.Номенклатура)
		|				И (ЦеныНоменклатурыСрезПоследних.Характеристика = СписокТоваровОбщий.Характеристика)
		|ГДЕ
		|	1 = 1
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокТоваровОбщий.Номенклатура,
		|	СписокТоваровОбщий.Характеристика,
		|	ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")
		|
		|УПОРЯДОЧИТЬ ПО
		|	СписокТоваровОбщий.Номенклатура";
		
		ЗапросТоваров.Текст = ТекстЗапроса;
		
		ПодставитьВЗапросАтрибуты(ЗапросТоваров, "СписокТоваровОбщий.Номенклатура.", Ложь);		
	КонецЕсли;      	
	
	ЗапросТоваров.УстановитьПараметр("ИгнорироватьХарактеристики", ИгнорироватьХарактеристики);
	ЗапросТоваров.УстановитьПараметр("НеИспользовать"            , Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	ЗапросТоваров.УстановитьПараметр("Пустая"                    , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());  	
	
	Если ТолькоОстатки Тогда
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"1 = 1","ЕСТЬNULL(ОстаткиНоменклатуры.ВНаличииОстаток, 0) > 0");
	КонецЕсли;    	
	
	ЗапросТоваров.УстановитьПараметр("ТипЦен",ВыбранныйТипЦен);
	
	ДанныеТовары = ЗапросТоваров.Выполнить().Выгрузить();
	ПередатьЗначенияДополнительныхРеквизитов(ДанныеТовары);
	АдресДанныхТовары = ПоместитьВоВременноеХранилище(ДанныеТовары, УникальныйИдентификатор);
	Товары.Загрузить(ДанныеТовары);
	
	Возврат АдресДанныхТовары;
	
КонецФункции  

// Процедура заполняет для выгрузки таблицы товаров и штрихкодов
//
// Параметры
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 1
//
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 2	
//
&НаСервере
Функция ЗаполнитьТаблицуШтрихкоды()
	
	ЗапросШтрихкодов = Новый Запрос();
	ЗапросШтрихкодов.УстановитьПараметр("Товар"    , ВыбраннаяГруппаТовара.ВыгрузитьЗначения());
	ЗапросШтрихкодов.УстановитьПараметр("ВсеТовары", ВыбраннаяГруппаТовара.Количество() = 0);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Штрихкоды.Штрихкод КАК ШтрихКод,
	|	Штрихкоды.Упаковка.Ссылка КАК Ссылка,				 
	|	ВЫБОР
	|		КОГДА 
	|					НЕ (Штрихкоды.Номенклатура.ИспользованиеХарактеристик<>&НеИспользовать) ИЛИ 
	|				&ИгнорироватьХарактеристики
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК ЭтоХарактеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         		ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1)
	|	КОНЕЦ  КАК КФ,
	|	Штрихкоды.Номенклатура КАК СсылкаПапЫ,
	|	Штрихкоды.Характеристика КАК СсылкаХарактеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Штрихкоды.Упаковка.Наименование 
	|	КОНЕЦ  КАК ЕИ,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ Штрихкоды.Упаковка.ПометкаУдаления 
	|	КОНЕЦ  КАК Удалить
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	(Штрихкоды.Номенклатура В (&СписокТоваров)
	|			ИЛИ Штрихкоды.Характеристика В (&СписокТоваров))
	|
	|";
	                    		
	Если ИспользоватьАртикулКакШтрихкодТовара Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Артикул КАК Штрихкод,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.) КАК Ссылка,
		|	ВЫБОР
		|		КОГДА НЕ Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
		|				ИЛИ &ИгнорироватьХарактеристики
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоХарактеристика,
		|	1 КАК КФ,
		|	Номенклатура.Ссылка КАК СсылкаПапЫ,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.) КАК СсылкаХарактеристика,
		|	Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕИ,
		|	Номенклатура.ПометкаУдаления КАК Удалить
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В (&СписокТоваров)
		|	И Номенклатура.Артикул <> """"";
		
		ЗапросШтрихКодов.УстановитьПараметр("ИспользоватьАртикулКакШтрихкодТовара", ИспользоватьАртикулКакШтрихкодТовара);	
	КонецЕсли; 
	
	ЗапросШтрихКодов.Текст = ТекстЗапроса;
	ЗапросШтрихКодов.УстановитьПараметр("ИгнорироватьХарактеристики", ИгнорироватьХарактеристики);
	ЗапросШтрихКодов.УстановитьПараметр("СписокТоваров"             , Товары.Выгрузить(, "Ссылка"));
	ЗапросШтрихКодов.УстановитьПараметр("НеИспользовать"            , Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	
	ДанныеШтрихкоды      = ЗапросШтрихкодов.Выполнить().Выгрузить();
	АдресДанныхШтрихкоды = ПоместитьВоВременноеХранилище(ДанныеШтрихкоды, УникальныйИдентификатор);
	
	ШтрихКоды.Загрузить(ДанныеШтрихкоды);
	
	Возврат АдресДанныхШтрихкоды;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуТоварыИзДокумента(ДокументВыгрузки)
	
	ЗапросТоваров = Новый Запрос();
	
	ТекстЗапросаЦены = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЧИСЛО(19, 2))) КАК Цена
	|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДТ,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						СписокТоваров.Номенклатура КАК Номенклатура
	|					ИЗ
	|						СписокТоваров КАК СписокТоваров)
	|				И Характеристика В
	|					(ВЫБРАТЬ
	|						СписокТоваров.Характеристика КАК Характеристика
	|					ИЗ
	|						СписокТоваров КАК СписокТоваров)
	|				И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	СкорректироватьЗапросПоЦенообразованию25(ТекстЗапросаЦены);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТоварыПодбор.Номенклатура КАК Номенклатура,
	|	ТоварыПодбор.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СписокТоваров
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТоварыПодбор
	|ГДЕ
	|	ТоварыПодбор.Ссылка = &Ссылка
	|	И &ЕстьПодбор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТоварыПриемка.Номенклатура,
	|	ТоварыПриемка.Характеристика
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТоварыПриемка
	|ГДЕ
	|	ТоварыПриемка.Ссылка = &Ссылка
	|	И &ЕстьПриемка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаЦены + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	|ПОМЕСТИТЬ ОстаткиНаСкладе
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ДТ,
	|			Номенклатура В
	|						(ВЫБРАТЬ
	|							СписокТоваров.Номенклатура КАК Номенклатура
	|						ИЗ
	|							СписокТоваров КАК СписокТоваров)
	|					И Склад = &ТекущийСклад
	|				ИЛИ &ВсеСклады) КАК ТоварыНаСкладахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Ячейки.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
	|ПОМЕСТИТЬ СписокЯчеек
	|ИЗ
	|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
	|
	|СГРУППИРОВАТЬ ПО
	|	Ячейки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СписокТоваров.Номенклатура КАК Ссылка,
	|	ЕСТЬNULL(СписокТоваров.Характеристика, &Пустая) КАК СсылкаХарактеристика,
	|	ЛОЖЬ КАК Удалить,
	|	ВЫБОР
	|		КОГДА НЕ СписокТоваров.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	|				ИЛИ &ИгнорироватьХарактеристики
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписокТоваров.Характеристика ЕСТЬ NULL
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК ЭтоХарактеристика,
	|	СписокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(СписокТоваров.Характеристика.Наименование, """") КАК Товар,
	|	&Атрибут1 КАК Атрибут1,
	|	&Атрибут2 КАК Атрибут2,
	|	&Атрибут3 КАК Атрибут3,
	|	&Атрибут4 КАК Атрибут4,
	|	&Атрибут5 КАК Атрибут5,
	|	&Атрибут6 КАК Атрибут6,
	|	&Атрибут7 КАК Атрибут7,
	|	&Атрибут8 КАК Атрибут8,
	|	&Атрибут9 КАК Атрибут9,
	|	&Атрибут0 КАК Атрибут10,
	|	ЕСТЬNULL(ОстаткиНаСкладе.ВНаличииОстаток, 0) КАК Остаток,
	|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии
	|ИЗ
	|	СписокТоваров КАК СписокТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СписокТоваров.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
	|		ПО (СписокЯчеек.Номенклатура = СписокТоваров.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаСкладе КАК ОстаткиНаСкладе
	|		ПО СписокТоваров.Номенклатура = ОстаткиНаСкладе.Номенклатура
	|			И СписокТоваров.Характеристика = ОстаткиНаСкладе.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СписокТоваров.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И СписокТоваров.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокТоваров.Номенклатура,
	|	ЕСТЬNULL(СписокТоваров.Характеристика, &Пустая),
	|	СписокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(СписокТоваров.Характеристика.Наименование, """"),
	|	ВЫБОР
	|		КОГДА НЕ СписокТоваров.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	|				ИЛИ &ИгнорироватьХарактеристики
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписокТоваров.Характеристика ЕСТЬ NULL
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВидыНоменклатуры.ИспользоватьСерии,
	|	ЕСТЬNULL(ОстаткиНаСкладе.ВНаличииОстаток, 0),
	|	ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товар";
			
	ЗапросТоваров.Текст = ТекстЗапроса;
	
	Попытка
		ЗапросТоваров.УстановитьПараметр("ТекущийСклад", ДокументВыгрузки.Склад);
		ЗапросТоваров.УстановитьПараметр("ВсеСклады"   , Ложь);
	Исключение
		ЗапросТоваров.УстановитьПараметр("ТекущийСклад", Справочники.Склады.ПустаяСсылка());
		ЗапросТоваров.УстановитьПараметр("ВсеСклады"   , Истина);
	КонецПопытки;    
	
	ЗапросТоваров.УстановитьПараметр("ДТ"                        , ДокументВыгрузки.Дата);	
	ЗапросТоваров.УстановитьПараметр("ИгнорироватьХарактеристики", ИгнорироватьХарактеристики);
	ЗапросТоваров.УстановитьПараметр("НеИспользовать"            , Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	ЗапросТоваров.УстановитьПараметр("Пустая"                    , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	ЗапросТоваров.УстановитьПараметр("ЕстьПодбор", Ложь);
	ЗапросТоваров.УстановитьПараметр("ЕстьПриемка", Ложь);
	
	ВидДокументаВыгрузки = ДокументВыгрузки.Метаданные().Имя;
	
	Если СокрЛП(ИмяТЧДокументаПодбор) <> "" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "РеализацияТоваровУслуг.Товары КАК ТоварыПодбор", ВидДокументаВыгрузки + "." + ИмяТЧДокументаПодбор + " КАК ТоварыПодбор");
		ЗапросТоваров.УстановитьПараметр("ЕстьПодбор", Истина);
	КонецЕсли;
	
	Если СокрЛП(ИмяТЧДокументаПриемка) <> "" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст,"РеализацияТоваровУслуг.Товары КАК ТоварыПриемка", ВидДокументаВыгрузки + "." + ИмяТЧДокументаПриемка + " КАК ТоварыПриемка");
		ЗапросТоваров.УстановитьПараметр("ЕстьПриемка", Истина);
	КонецЕсли;
	
	ПодставитьВЗапросАтрибуты(ЗапросТоваров, "СписокТоваров.Номенклатура.", Ложь);
	
	ЗапросТоваров.УстановитьПараметр("ТипЦен", ВыбранныйТипЦен);
	ЗапросТоваров.УстановитьПараметр("Ссылка", ДокументВыгрузки); 	
	
	ДанныеТовары      = ЗапросТоваров.Выполнить().Выгрузить();
	ПередатьЗначенияДополнительныхРеквизитов(ДанныеТовары);
	АдресДанныхТовары = ПоместитьВоВременноеХранилище(ДанныеТовары, УникальныйИдентификатор);
	
	Товары.Загрузить(ДанныеТовары);
	
	Возврат АдресДанныхТовары;
	
КонецФункции  

&НаСервере
Процедура СкорректироватьЗапросПоЦенообразованию25(ТекстЗапроса)
		
	Если Ценообразование25() Тогда
		
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЧИСЛО(19, 2))) КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО
		|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследнихСЦО
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|			&ДТ,
		|			Номенклатура В
		|						(ВЫБРАТЬ
		|							СписокТоваров.Номенклатура КАК Номенклатура
		|						ИЗ
		|							СписокТоваров КАК СписокТоваров)
		|					И ХарактеристикаЦО В (ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка))
		|				ИЛИ ХарактеристикаЦО В
		|						(ВЫБРАТЬ
		|							Хар.ХарактеристикаНоменклатурыДляЦенообразования КАК ХарактеристикаЦО
		|						ИЗ
		|							Справочник.ХарактеристикиНоменклатуры КАК Хар
		|						ГДЕ
		|							Хар.Ссылка В
		|								(ВЫБРАТЬ
		|									СписокТоваров.Характеристика КАК Характеристика
		|								ИЗ
		|									СписокТоваров КАК СписокТоваров))
		|					И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
		|	ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования КАК ХарактеристикаНоменклатурыДляЦенообразования
		|ПОМЕСТИТЬ ХарактеристикаПоЦО
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования В
		|			(ВЫБРАТЬ
		|				ЦеныНоменклатурыСрезПоследнихСЦО.ХарактеристикаЦО КАК ХарактеристикаЦО
		|			ИЗ
		|				ЦеныНоменклатурыСрезПоследнихСЦО КАК ЦеныНоменклатурыСрезПоследнихСЦО)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследнихСЦО.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследнихСЦО.Цена КАК Цена,
		|	ХарактеристикаПоЦО.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
		|ИЗ
		|	ЦеныНоменклатурыСрезПоследнихСЦО КАК ЦеныНоменклатурыСрезПоследнихСЦО
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХарактеристикаПоЦО КАК ХарактеристикаПоЦО
		|		ПО ЦеныНоменклатурыСрезПоследнихСЦО.ХарактеристикаЦО = ХарактеристикаПоЦО.ХарактеристикаНоменклатурыДляЦенообразования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуТоварыИзДокументаЕГАИС(ДокументВыгрузки)
	
	ЗапросТоваров = Новый Запрос(); 
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ ТаблицаАлкоголя
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК СписокЕГАИСТовары
	|ГДЕ
	|	НЕ СписокЕГАИСТовары.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяССылка)
	|	И &ЕстьПодбор
	|	И СписокЕГАИСТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокЕГАИСТовары.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СправочникНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	|	СправочникНоменклатурыЕГАИС.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СписокТоваров
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СправочникНоменклатурыЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаАлкоголя КАК ТаблицаАлкоголя
	|		ПО СправочникНоменклатурыЕГАИС.АлкогольнаяПродукция = ТаблицаАлкоголя.АлкогольнаяПродукция
	|		И НЕ СправочникНоменклатурыЕГАИС.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатурыЕГАИС.Номенклатура,
	|	СправочникНоменклатурыЕГАИС.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	|ПОМЕСТИТЬ ОстаткиНаСкладе
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					СписокТоваров.Номенклатура КАК Номенклатура
	|				ИЗ
	|					СписокТоваров КАК СписокТоваров)) КАК ТоварыНаСкладахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						СписокТоваров.Номенклатура КАК Номенклатура
	|					ИЗ
	|						СписокТоваров КАК СписокТоваров)
	|				И ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Ячейки.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(Ячейки.Ячейка.Наименование, """")) КАК АдресХранения
	|ПОМЕСТИТЬ СписокЯчеек
	|ИЗ
	|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК Ячейки
	|
	|СГРУППИРОВАТЬ ПО
	|	Ячейки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СписокТоваров.Номенклатура КАК Ссылка,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, &Пустая) КАК СсылкаХарактеристика,
	|	ЛОЖЬ КАК Удалить,
	|	ВЫБОР
	|		КОГДА НЕ СписокТоваров.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	|				ИЛИ &ИгнорироватьХарактеристики
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК ЭтоХарактеристика,
	|	СписокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, """") КАК Товар,
	|	&Атрибут1 КАК Атрибут1,
	|	&Атрибут2 КАК Атрибут2,
	|	&Атрибут3 КАК Атрибут3,
	|	&Атрибут4 КАК Атрибут4,
	|	&Атрибут5 КАК Атрибут5,
	|	&Атрибут6 КАК Атрибут6,
	|	&Атрибут7 КАК Атрибут7,
	|	&Атрибут8 КАК Атрибут8,
	|	&Атрибут9 КАК Атрибут9,
	|	&Атрибут0 КАК Атрибут10,
	|	ЕСТЬNULL(ОстаткиНаСкладе.ВНаличииОстаток, 0) КАК Остаток,
	|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии
	|ИЗ
	|	СписокТоваров КАК СписокТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА СписокТоваров.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = СписокТоваров.Номенклатура
	|				КОГДА СписокТоваров.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = СписокТоваров.Номенклатура.ВидНоменклатуры
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СписокТоваров.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЯчеек КАК СписокЯчеек
	|		ПО (СписокЯчеек.Номенклатура = СписокТоваров.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СписокТоваров.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, &Пустая))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаСкладе КАК ОстаткиНаСкладе
	|		ПО СписокТоваров.Номенклатура = ОстаткиНаСкладе.Номенклатура
	|			И СписокТоваров.Характеристика = ОстаткиНаСкладе.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокТоваров.Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	СписокТоваров.Номенклатура.Наименование + "" "" + ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, """"),
	|	ВЫБОР
	|		КОГДА НЕ СписокТоваров.Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
	|				ИЛИ &ИгнорироватьХарактеристики
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВидыНоменклатуры.ИспользоватьСерии,
	|	ЕСТЬNULL(ОстаткиНаСкладе.ВНаличииОстаток, 0),
	|	ЕСТЬNULL(СписокЯчеек.АдресХранения,"""")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товар";  
	
	ЗапросТоваров.Текст = ТекстЗапроса;
	ЗапросТоваров.УстановитьПараметр("ИгнорироватьХарактеристики", ИгнорироватьХарактеристики);
	ЗапросТоваров.УстановитьПараметр("НеИспользовать"            , Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	ЗапросТоваров.УстановитьПараметр("Пустая"                    , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	ЗапросТоваров.УстановитьПараметр("ЕстьПодбор", Ложь);
	ЗапросТоваров.УстановитьПараметр("ЕстьПриемка", Ложь);
	
	ВидДокументаВыгрузки = ДокументВыгрузки.Метаданные().Имя;
	
	Если СокрЛП(ИмяТЧДокументаПодбор) <> "" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "ТТНВходящаяЕГАИС.Товары КАК СписокЕГАИСТовары", ВидДокументаВыгрузки + "." + ИмяТЧДокументаПодбор + " КАК СписокЕГАИСТовары");
		ЗапросТоваров.УстановитьПараметр("ЕстьПодбор", Истина);
	КонецЕсли;	  
	
	Если СокрЛП(ИмяТЧДокументаПриемка) <> "" Тогда
		ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "ТТНВходящаяЕГАИС.Товары КАК СписокЕГАИСТовары", ВидДокументаВыгрузки + "." + ИмяТЧДокументаПриемка + " КАК СписокЕГАИСТовары");
		ЗапросТоваров.УстановитьПараметр("ЕстьПриемка", Истина);
	КонецЕсли;	
	
	ПодставитьВЗапросАтрибуты(ЗапросТоваров, "СписокТоваров.Номенклатура.", Ложь);
	
	ЗапросТоваров.УстановитьПараметр("ТипЦен", ВыбранныйТипЦен);
	ЗапросТоваров.УстановитьПараметр("Ссылка", ДокументВыгрузки);
	
	ДанныеТовары      = ЗапросТоваров.Выполнить().Выгрузить();
	АдресДанныхТовары = ПоместитьВоВременноеХранилище(ДанныеТовары, УникальныйИдентификатор);
	
	Товары.Загрузить(ДанныеТовары);
	
	Возврат АдресДанныхТовары; 
	
КонецФункции  

// Процедура заполняет для выгрузки таблицы товаров и штрихкодов
//
// Параметры
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 1
//
//  Атрибут1 - выбранный атрибут номенклатуры для выгрузки 2	
//
&НаСервере
Функция ЗаполнитьТаблицуШтрихкодыИзДокумента(ДокументВыгрузки)
	
	ЗапросШтрихкодов = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Штрихкоды.Штрихкод КАК ШтрихКод,
	|	Штрихкоды.Упаковка.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ (Штрихкоды.Номенклатура.ИспользованиеХарактеристик<>&НеИспользовать)
	|						ИЛИ &ИгнорироватьХарактеристики
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК ЭтоХарактеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         	ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1)
	|	КОНЕЦ  КАК КФ,
	|	Штрихкоды.Номенклатура КАК СсылкаПапЫ,
	|	Штрихкоды.Характеристика КАК СсылкаХарактеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Штрихкоды.Упаковка.Наименование 
	|	КОНЕЦ  КАК ЕИ,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ Штрихкоды.Упаковка.ПометкаУдаления 
	|	КОНЕЦ  КАК Удалить
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	(Штрихкоды.Номенклатура В (&СписокТоваров)
	|			ИЛИ Штрихкоды.Характеристика В (&СписокТоваров))
	|
	|";
	
	Если ИспользоватьАртикулКакШтрихкодТовара Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Артикул КАК Штрихкод,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.) КАК Ссылка,
		|	ВЫБОР
		|		КОГДА НЕ Номенклатура.ИспользованиеХарактеристик <> &НеИспользовать
		|				ИЛИ &ИгнорироватьХарактеристики
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоХарактеристика,
		|	1 КАК КФ,
		|	Номенклатура.Ссылка КАК СсылкаПапЫ,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.) КАК СсылкаХарактеристика,
		|	Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕИ,
		|	Номенклатура.ПометкаУдаления КАК Удалить
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В (&СписокТоваров)
		|	И Номенклатура.Артикул <> """"";
		
		ЗапросШтрихКодов.УстановитьПараметр("ИспользоватьАртикулКакШтрихкодТовара", ИспользоватьАртикулКакШтрихкодТовара);	
	КонецЕсли;
	
	ЗапросШтрихКодов.Текст = ТекстЗапроса;
	ЗапросШтрихКодов.УстановитьПараметр("ИгнорироватьХарактеристики", ИгнорироватьХарактеристики);
	ЗапросШтрихКодов.УстановитьПараметр("СписокТоваров"             , Товары.Выгрузить(,"Ссылка"));
	ЗапросШтрихКодов.УстановитьПараметр("НеИспользовать"            , Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	
	ДанныеШтрихкоды       = ЗапросШтрихкодов.Выполнить().Выгрузить();
	АдресДанныхШтрихкоды = ПоместитьВоВременноеХранилище(ДанныеШтрихкоды, УникальныйИдентификатор);	
	
	ШтрихКоды.Загрузить(ДанныеШтрихкоды);
	
	Возврат АдресДанныхШтрихкоды;
	
КонецФункции  

&НаСервере
Процедура ДобавитьВСтруктуруАтрибуты(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("Атрибут1", Атрибут1);
	СтруктураПараметров.Вставить("Атрибут2", Атрибут2);
	СтруктураПараметров.Вставить("Атрибут3", Атрибут3);
	СтруктураПараметров.Вставить("Атрибут4", Атрибут4);
	СтруктураПараметров.Вставить("Атрибут5", Атрибут5);
	СтруктураПараметров.Вставить("Атрибут6", Атрибут6);
	СтруктураПараметров.Вставить("Атрибут7", Атрибут7);
	СтруктураПараметров.Вставить("Атрибут8", Атрибут8);
	СтруктураПараметров.Вставить("Атрибут9", Атрибут9);
	СтруктураПараметров.Вставить("Атрибут10", Атрибут10);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВСтруктуруДопТипыЦен(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("Цена1", ДопТипЦен1);
	СтруктураПараметров.Вставить("Цена2", ДопТипЦен2);
	СтруктураПараметров.Вставить("Цена3", ДопТипЦен3);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьПорциюТоваров(Начало, Конец, ДопПараметры)	
	
	Данные = ПолучитьИзВременногоХранилища(ДопПараметры.АдресДанных);
	ТекстФайла = ""; 
	
	СписокТоваров = Данные.ВыгрузитьКолонку("Ссылка");
	ТаблицаЦен1 = ПолучитьДанныеЦен(СписокТоваров, ДопПараметры.Цена1);
	ТаблицаЦен2 = ПолучитьДанныеЦен(СписокТоваров, ДопПараметры.Цена2);
	ТаблицаЦен3 = ПолучитьДанныеЦен(СписокТоваров, ДопПараметры.Цена3);
	
	n = 0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n = Счетчик + 1;
		
		СтрокаТовара = "" + n + ";";
		СтрокаТовара = СтрокаТовара + (?(Данные[Счетчик].Удалить, "-", "+")) + ";";
		
		СтрокаТовара = СтрокаТовара + "8U-" + XMLСтрока(Данные[Счетчик].Ссылка) + XMLСтрока(Данные[Счетчик].СсылкаХарактеристика) + ";";
		
		Если ДопПараметры.АртикулВставитьВНазвание Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Ссылка.Артикул + " " + СокрЛП(Данные[Счетчик].Товар)) + ";";
		Иначе	
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Товар) + ";";
		КонецЕсли;	
		
		СтрокаТовара = СтрокаТовара + Формат(Данные[Счетчик].Цена, "ЧРД=.; ЧН=0; ЧГ=0") + ";";		
		
		Если Лев(ДопПараметры.Атрибут1, 3) = "ДР_" Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].Ссылка, ДопПараметры.Атрибут1)) + ";";
		Иначе	
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут1) + ";";
		КонецЕсли;
		
		Если Лев(ДопПараметры.Атрибут2, 3) = "ДР_" Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].Ссылка, ДопПараметры.Атрибут2)) + ";";
		Иначе	
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут2) + ";";
		КонецЕсли;
		
		Если Лев(ДопПараметры.Атрибут3, 3) = "ДР_" Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].Ссылка, ДопПараметры.Атрибут3)) + ";";
		Иначе	
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут3) + ";";
		КонецЕсли;
		
		Если Лев(ДопПараметры.Атрибут4, 3) = "ДР_" Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].Ссылка, ДопПараметры.Атрибут4)) + ";";
		Иначе	
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут4) + ";";
		КонецЕсли;
		
		Если Лев(ДопПараметры.Атрибут5, 3) = "ДР_" Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].Ссылка, ДопПараметры.Атрибут5)) + ";";
		Иначе	
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут5) + ";";
		КонецЕсли;
		
		Если Лев(ДопПараметры.Атрибут6, 3) = "ДР_" Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].Ссылка, ДопПараметры.Атрибут6)) + ";";
		Иначе	
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут6) + ";";
		КонецЕсли;
		
		Если Лев(ДопПараметры.Атрибут7, 3) = "ДР_" Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].Ссылка, ДопПараметры.Атрибут7)) + ";";
		Иначе	
			//ЕГАИС
			Если ДопПараметры.Атрибут7 = "ОбъемДАЛ" И Данные[Счетчик].Атрибут7 <> NULL Тогда
				СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут7*10) + ";";	
			Иначе
				СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут7) + ";";
			КонецЕсли;		
		КонецЕсли;
		
		Если Лев(ДопПараметры.Атрибут8, 3) = "ДР_" Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].Ссылка, ДопПараметры.Атрибут8)) + ";";
		Иначе	
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут8) + ";";
		КонецЕсли;
		
		Если Лев(ДопПараметры.Атрибут9, 3) = "ДР_" Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].Ссылка, ДопПараметры.Атрибут9)) + ";";
		Иначе	
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут9) + ";";
		КонецЕсли;
		
		Если Лев(ДопПараметры.Атрибут10, 3) = "ДР_" Тогда
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(ПолучитьДополнительныйРеквизитАтрибута(Данные[Счетчик].Ссылка, ДопПараметры.Атрибут10)) + ";";
		Иначе	
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Атрибут10) + ";";
		КонецЕсли;		
		
		Если ДопПараметры.НеОтображатьОстатки Тогда
			СтрокаТовара = СтрокаТовара + 0 + ";";	
		Иначе
			СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Формат(Данные[Счетчик].Остаток, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")) + ";";
		КонецЕсли; 
		
		DMUseSN = Данные[Счетчик].ИспользоватьСерии;
		СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Формат(DMUseSN, "БЛ=0; БИ=1")) + ";";
		
		СтрокаТовара = СтрокаТовара + "0;";
		СтрокаТовара = СтрокаТовара + "0;"; //SNType
		СтрокаТовара = СтрокаТовара + ";"; //SNRule
		СтрокаТовара = СтрокаТовара + Строка(ПолучитьТипМаркированнойПродукции(Данные[Счетчик].Ссылка)) + ";"; //MarkType
		
		Попытка measure_type = ?(Данные[Счетчик].Ссылка.ВесМожноУказыватьВДокументах, 1, 0); Исключение measure_type = 0; КонецПопытки;
		СтрокаТовара = СтрокаТовара + measure_type + ";"; // 22. measure_type
		СтрокаТовара = СтрокаТовара + ";"; // 23. РежимВводаКоличества 	

		Если DMUseSN Тогда
			СсылкаТовар = Данные[Счетчик].Ссылка;
			
			Если ЗначениеЗаполнено(СсылкаТовар.ВидНоменклатуры.ВладелецСерий) Тогда  
				ТекущийВладелецСерий = СсылкаТовар.ВидНоменклатуры.ВладелецСерий;
			Иначе
				ТекущийВладелецСерий = СсылкаТовар.ВидНоменклатуры;
			КонецЕсли;	
			
			МассивТиповСерийныхНомеров = Новый Массив;
			
			Попытка 
				Если ТекущийВладелецСерий.ИспользоватьНомерСерии Тогда //(10)
					МассивТиповСерийныхНомеров.Добавить("10");
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если ТекущийВладелецСерий.ИспользоватьДатуПроизводстваСерии Тогда  //(11)
					МассивТиповСерийныхНомеров.Добавить("11");
				КонецЕсли; 	
			Исключение
			КонецПопытки;
			
			Попытка
				Если ТекущийВладелецСерий.ИспользоватьСрокГодностиСерии Тогда	//(17)
					МассивТиповСерийныхНомеров.Добавить("17");
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			СтрокаJSON = "";
			
			НастройкиСериализации = Новый НастройкиСериализацииJSON;
			НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
			ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
			
			Запись = Новый ЗаписьJSON;
			Запись.ПроверятьСтруктуру = Истина;
			Запись.УстановитьСтроку(ПараметрыJSON);
			
			ЗаписатьJSON(Запись, МассивТиповСерийныхНомеров, НастройкиСериализации);
			СтрокаJSON = Запись.Закрыть();
	
			СтрокаТовара = СтрокаТовара + СтрокаJSON + ";"; // 24. НесколькоТиповSN

		Иначе
			СтрокаТовара = СтрокаТовара + ";"; // 24. НесколькоТиповSN			
		КонецЕсли;		
		
		// доп.цены
		СтрПоиска  = Новый Структура("Номенклатура, Характеристика", Данные[Счетчик].Ссылка, Данные[Счетчик].СсылкаХарактеристика);
		СтрокиЦен1 = ТаблицаЦен1.НайтиСтроки(СтрПоиска);
		СтрокиЦен2 = ТаблицаЦен2.НайтиСтроки(СтрПоиска);
		СтрокиЦен3 = ТаблицаЦен3.НайтиСтроки(СтрПоиска);
		
		СтрокаТовара = СтрокаТовара + ?(СтрокиЦен1.Количество() > 0, Формат(СтрокиЦен1[0].Цена, "ЧРД=.; ЧГ=0"), "") + ";";  // 25. доп. тип цен 1
		СтрокаТовара = СтрокаТовара + ?(СтрокиЦен2.Количество() > 0, Формат(СтрокиЦен2[0].Цена, "ЧРД=.; ЧГ=0"), "") + ";";  // 26. доп. тип цен 2
		СтрокаТовара = СтрокаТовара + ?(СтрокиЦен3.Количество() > 0, Формат(СтрокиЦен3[0].Цена, "ЧРД=.; ЧГ=0"), "") + ";";  // 27. доп. тип цен 3
		
		ТекстФайла = ТекстФайла + СтрокаТовара + Символы.ПС;	
	КонецЦикла;
	
	Возврат ТекстФайла; 		   
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДополнительныйРеквизитАтрибута(Номенклатура, НаименованиеСвойства)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ	
	|ВЫБОР 
	|	КОГДА 
	|		ВЫРАЗИТЬ(ЕСТЬNULL(СправочникНоменклатураДополнительныеРеквизиты.Значение.Наименование,"""") КАК СТРОКА (100)) = """" 
	|	ТОГДА 
	|		СправочникНоменклатураДополнительныеРеквизиты.Значение 
	|	ИНАЧЕ
	|   	ВЫРАЗИТЬ(СправочникНоменклатураДополнительныеРеквизиты.Значение.Наименование КАК СТРОКА (100)) 
	|КОНЕЦ КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК СправочникНоменклатураДополнительныеРеквизиты
	|ГДЕ 
	|	СправочникНоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
	|	И СправочникНоменклатураДополнительныеРеквизиты.Свойство.Заголовок = &НаименованиеСвойства";
	
	Запрос.УстановитьПараметр("Номенклатура"        , Номенклатура);
	Запрос.УстановитьПараметр("НаименованиеСвойства", СтрЗаменить(НаименованиеСвойства, "ДР_",""));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ЧистаяСтрока(Выборка.Значение);
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ВыгрузитьПорциюШтрихкодов(Начало, Конец, ДопПараметры)	
	
	Данные = ПолучитьИзВременногоХранилища(ДопПараметры.АдресДанных);
	ТекстФайла = "";
	
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n = Счетчик + 1;			
		
		СтрокаШтрихкода = "" + n + ";";
		СтрокаШтрихкода = СтрокаШтрихкода + (?(Данные[Счетчик].Удалить, "-", "+")) + ";";
		
		Если Лев(Данные[Счетчик].ШтрихКод, 2) = "2_" Тогда // весовые
			СтрокаШтрихкода = СтрокаШтрихкода + ЧистаяСтрока(Сред(Данные[Счетчик].ШтрихКод, 3, 5)) + ";";	
		Иначе	
			СтрокаШтрихкода = СтрокаШтрихкода + ЧистаяСтрока(Данные[Счетчик].ШтрихКод) + ";";
		КонецЕсли;    
		
		СтрокаШтрихкода = СтрокаШтрихкода + ЧистаяСтрока(Данные[Счетчик].ЕИ) + ";";
		
		Если НеИспользоватьПересчетУпаковок Тогда
			СтрокаШтрихкода = СтрокаШтрихкода + "1" + ";";
		Иначе	
			СтрокаШтрихкода = СтрокаШтрихкода + ЧистаяСтрока(Формат(Данные[Счетчик].кф, "ЧРД = .; ЧН = 0; ЧГ = 0")) + ";";
		КонецЕсли;
		
		СтрокаШтрихкода = СтрокаШтрихкода + "8U-" + XMLСтрока(Данные[Счетчик].СсылкаПапы) + XMLСтрока(Данные[Счетчик].СсылкаХарактеристика) + ";";
		СтрокаШтрихкода = СтрокаШтрихкода + "2"; // UseSn 
		
		ТекстФайла = ТекстФайла + СтрокаШтрихкода + Символы.ПС;
	КонецЦикла;
	
	Возврат ТекстФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьУникальныйИдентификатор(Ссылка)
	
	GUID = Ссылка.УникальныйИдентификатор();	
	Возврат GUID;
	
КонецФункции

&НаСервере
Функция ПолучитьОстатокДокумент(Номенклатура, ХарактеристикаНоменклатуры, Док)
	
	ЗапросОстатков = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК Остаток,
	|	ТоварыНаСкладахОстатки.Номенклатура
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ДатаОстатков,
	|			Номенклатура = &Номенклатура
	|			И Характеристика = &Характеристика 
	|			И (Склад = &ТекущийСклад ИЛИ &ВсеСклады)) КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура");
	
	лСклад = Справочники.Склады.ПустаяСсылка(); 
	Если Не ЗначениеЗаполнено(лСклад) тогда
		Попытка лСклад = Док.Склад; Исключение КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(лСклад) тогда
		Попытка лСклад = Док.СкладОтправитель; Исключение КонецПопытки;
	КонецЕсли;
	
	
	ЗапросОстатков.УстановитьПараметр("ТекущийСклад", лСклад);
	ЗапросОстатков.УстановитьПараметр("ВсеСклады"   , Ложь);
	Если Не ЗначениеЗаполнено(лСклад) тогда
		ЗапросОстатков.УстановитьПараметр("ВсеСклады"   , Истина);
	Иначе
		ЗапросОстатков.УстановитьПараметр("ВсеСклады"   , Ложь);
	КонецЕсли;
	
	ЗапросОстатков.УстановитьПараметр("Номенклатура"  , Номенклатура);
	ЗапросОстатков.УстановитьПараметр("Характеристика", ХарактеристикаНоменклатуры);
	ЗапросОстатков.УстановитьПараметр("ДатаОстатков"  , Док.Дата);
	
	РезультатОстатков = ЗапросОстатков.Выполнить();
	
	Если РезультатОстатков.Пустой() Тогда
		Возврат Неопределено; //лимит
	Иначе
		ВыборкаОстатков = РезультатОстатков.Выбрать();
		
		Если ВыборкаОстатков.Следующий() Тогда
			Возврат Формат(ВыборкаОстатков.Остаток, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
		Иначе	
			Возврат Неопределено; //лимит
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИменаРеквизитовВИмяАтрибута()
	
	Список = Новый СписокЗначений(); 
	СписокИменАтрибута = СобратьСписокИменАтрибута();
    Список.ЗагрузитьЗначения(СписокИменАтрибута.ВыгрузитьЗначения());
	Список.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	МассивЗначений = Список.ВыгрузитьЗначения();
	
	Элементы.Атрибут1.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.Атрибут2.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.Атрибут3.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.Атрибут4.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.Атрибут5.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.Атрибут6.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.Атрибут7.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.Атрибут8.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.Атрибут9.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	Элементы.Атрибут10.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	
	Для Сч = 1 По 10 Цикл
		Для каждого СтрокаВыбора Из Элементы["Атрибут" + Сч].СписокВыбора Цикл
			Если СтрокаВыбора.Значение = "Код" Или СтрокаВыбора.Значение = "Родитель" Или СтрокаВыбора.Значение = "!!! Ячейки !!!" Или СтрНачинаетсяС(СтрокаВыбора.Значение, "ДР_") Тогда
				Продолжить;	
			КонецЕсли;
			
			СтрокаВыбора.Представление = СписокИменАтрибута.НайтиПоЗначению(СтрокаВыбора.Значение);	
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Справочники

&НаКлиенте
Процедура ВыгрузитьСкладыЕслиКаталогиДоступны()
	
	Запись = ЗаполнитьТаблицуСклады();
	КоличествоСклады  = Запись.Количество;
	АдресДанныхСклады = Запись.Адрес; 	
	
	Если КоличествоСклады = 0 Тогда
		ПоказатьСообщениеПользователю("Нет складов для выгрузки!");
		Возврат;
	КонецЕсли;	   
	
	ИндикаторСклады = 0;         	
	
	тхт_кл = Новый ТекстовыйДокумент;
	ТекстФайлаСклады = "" + ?(ОчиститьСклады, "-", "+") + Символы.ПС;
	
	Если КоличествоСклады < 100 Тогда
		РазмерШагаСклады = 5;
	ИначеЕсли КоличествоСклады < 1000 Тогда
		РазмерШагаСклады = 10;
	ИначеЕсли КоличествоСклады < 10000 Тогда
		РазмерШагаСклады = 100;
	ИначеЕсли КоличествоСклады < 100000 Тогда
		РазмерШагаСклады = 1000;
	Иначе 
		РазмерШагаСклады = 10000;
	КонецЕсли;
	
	КоличествоШаговСклады = Цел(КоличествоСклады / РазмерШагаСклады);
	КоличествоЦелСклады   = КоличествоШаговСклады * РазмерШагаСклады;
	
	Если КоличествоЦелСклады < КоличествоСклады Тогда
		МаксимальноеЗначениеИндикатораСклады = КоличествоШаговСклады + 1;
	Иначе
		МаксимальноеЗначениеИндикатораСклады = КоличествоШаговСклады;
	КонецЕсли;          	
	
	Элементы.ИндикаторСклады.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораСклады;   	
	
	Для Счетчик = 1 По КоличествоШаговСклады Цикл 	
		ТекстФайлаСклады = ТекстФайлаСклады + ВыгрузитьПорциюСкладов(РазмерШагаСклады * (Счетчик - 1) + 1, РазмерШагаСклады * Счетчик, АдресДанныхСклады);
		ИндикаторСклады = ИндикаторСклады+1;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();
	КонецЦикла;
	
	Если КоличествоЦелСклады < КоличествоСклады Тогда		
		ТекстФайлаСклады = ТекстФайлаСклады + ВыгрузитьПорциюСкладов(КоличествоШаговСклады * РазмерШагаСклады + 1, КоличествоСклады, АдресДанныхСклады);
		ИндикаторСклады = ИндикаторСклады + 1;		
	КонецЕсли;
	                          	
	тхт_кл.УстановитьТекст(ТекстФайлаСклады);
	тхт_кл.ВставитьСтроку(0, "" + Формат(тхт_кл.КоличествоСтрок(), "ЧГ=0"));
	
	ИмяФайлаВыгрузкиКЛ = РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "v_83_Warehouses_.dm";
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт_кл, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Warehouses.dm" + "temp"); 
		
	ИначеЕсли ТипОбмена = "0" Тогда 		
		Если ИДТСД = "" Тогда
			тхт_кл.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиКЛ, КодировкаТекста.UTF8);
		Иначе
			тхт_кл.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиКЛ, КодировкаТекста.UTF8);
		КонецЕсли;	
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиКЛ, ИДТСД, ИмяФайлаВыгрузкиКЛ); 
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиКЛ, ИДТСД, ИмяФайлаВыгрузкиКЛ);
            КонецЕсли;			
		КонецЕсли; 
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Warehouses.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт_кл.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли;
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);		
	КонецЕсли;   	
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПорциюЯчеек(Начало, Конец, АдресДанных)
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла = "";
	
	n = 0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		Попытка 
			n = Счетчик + 1; 
			
			СтрокаЯчейки = ""+n+";";
			СтрокаЯчейки = СтрокаЯчейки + ?(Данные[Счетчик].ПометкаУдаления, "-", "+") + ";";
			СтрокаЯчейки = СтрокаЯчейки + ?(ВыгружатьВНаименованиеЯчейки = 0, ЧистаяСтрока(Данные[Счетчик].Ссылка.Наименование), Данные[Счетчик].Ссылка.Код) + ";"; //наименование ячейки
			СтрокаЯчейки = СтрокаЯчейки + ?(ВыгружатьВКодЯчейки = 1,Данные[Счетчик].Ссылка.Код, Строка(ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(Данные[Счетчик].Ссылка))) + ""; //штрихкод ячейки
			
			ТекстФайла = ТекстФайла + СтрокаЯчейки+Символы.ПС;
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ТекстФайла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуЯчейки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   Ячейки.Ссылка КАК Ссылка,
	|   Ячейки.Код КАК Наименование,
	|   Ячейки.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|   Справочник.СкладскиеЯчейки КАК Ячейки
	| ";
	
	Данные      = Запрос.Выполнить().Выгрузить();
	АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество  = Данные.Количество();
	
	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес"     , АдресДанных);
	
	Возврат Запись;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуЯчейкиИзДокумента(ДокументВыгрузки)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|   ТоварыПодбор.Ячейка.Ссылка КАК Ссылка,
	|	ТоварыПодбор.Ячейка.Код КАК Наименование,
	|	ТоварыПодбор.Ячейка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ТоварыПодбор
	|ГДЕ
	|	ТоварыПодбор.Ссылка = &Ссылка
	|	И &ЕстьПодбор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|   ТоварыПриемка.Ячейка.Ссылка КАК Ссылка,
	|	ТоварыПриемка.Ячейка.Код КАК Наименование,
	|	ТоварыПриемка.Ячейка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ТоварыПриемка
	|ГДЕ
	|	ТоварыПриемка.Ссылка = &Ссылка
	|	И &ЕстьПриемка
	|";
	
	Запрос.УстановитьПараметр("ЕстьПодбор" , Ложь);
	Запрос.УстановитьПараметр("ЕстьПриемка", Ложь);
	
	ИмяДокументаВыгрузки = ДокументВыгрузки.Метаданные().Имя;
	
	Если СокрЛП(ИмяТЧДокументаПодбор) <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтборРазмещениеТоваров.ТоварыОтбор КАК ТоварыПодбор", ИмяДокументаВыгрузки + "." + ИмяТЧДокументаПодбор + " КАК ТоварыПодбор");
		Запрос.УстановитьПараметр("ЕстьПодбор", Истина);
	КонецЕсли;	
	
	Если СокрЛП(ИмяТЧДокументаПриемка) <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтборРазмещениеТоваров.ТоварыРазмещение КАК ТоварыПриемка", ИмяДокументаВыгрузки + "." + ИмяТЧДокументаПриемка + " КАК ТоварыПриемка");
		Запрос.УстановитьПараметр("ЕстьПриемка", Истина);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументВыгрузки);
	
	Попытка
		Данные      = Запрос.Выполнить().Выгрузить();
		АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
		Количество  = Данные.Количество();
		
		Запись = Новый Структура;
		Запись.Вставить("Количество", Количество);
		Запись.Вставить("Адрес"     , АдресДанных);
		
		Возврат Запись;
		
	Исключение	
		Запись = Новый Структура;
		Запись.Вставить("Количество", 0);
		Запись.Вставить("Адрес"     , "");
		
		Возврат Запись;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьПорциюКлиентов(Начало, Конец, АдресДанных)
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла = "";  
	
	n = 0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n = Счетчик + 1;  
		
		СтрокаКлиента = "" + n + ";";
		СтрокаКлиента = СтрокаКлиента + ?(Данные[Счетчик].ПометкаУдаления, "-", "+") + ";";
		СтрокаКлиента = СтрокаКлиента + ЧистаяСтрока(Строка(Данные[Счетчик].Ссылка.УникальныйИдентификатор())) + ";"; //ID клиента 
		СтрокаКлиента = СтрокаКлиента + ЧистаяСтрока(Данные[Счетчик].Наименование) + ";"; //наименование клиента
		СтрокаКлиента = СтрокаКлиента + ЧистаяСтрока(Данные[Счетчик].Штрихкод) + ""; //штрихкод клиента
		
		ТекстФайла = ТекстФайла + СтрокаКлиента + Символы.ПС;
	КонецЦикла;
	
	Возврат ТекстФайла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуКлиенты()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Наименование,
	|	Контрагенты.ПометкаУдаления,
	|	Контрагенты.Код КАК Штрихкод,
	|	Контрагенты.Ссылка,
	|	""                                        "" КАК ИД
	|ИЗ
	|	Справочник.Партнеры КАК Контрагенты
	|");
	
	Данные      = Запрос.Выполнить().Выгрузить();
	АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество  = Данные.Количество();
	
	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес"     , АдресДанных);
	
	Возврат Запись;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуКлиентыИзДокумента(ДокументВыгрузки)
	
	Попытка
		Партнер = ДокументВыгрузки.Партнер;
	Исключение
		Партнер = Справочники.Партнеры.ПустаяСсылка();
	КонецПопытки;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	Контрагенты.Код КАК Штрихкод,
	|	Контрагенты.Ссылка КАК Ссылка,
	|	""                                        "" КАК ИД
	|ИЗ
	|	Справочник.Партнеры КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Партнер);
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	Если Данные.Количество() = 0 Тогда
		АдресДанных = Неопределено;
	Иначе
		АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	КонецЕсли; 
	
	Возврат АдресДанных;
	
КонецФункции

&НаСервере
Функция ВыгрузитьПорциюСкладов(Начало, Конец, АдресДанных)
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла = ""; 
	
	n = 0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n = Счетчик + 1;  
		
		СтрокаСклада = "" + n + ";";
		СтрокаСклада = СтрокаСклада + ?(Данные[Счетчик].ПометкаУдаления, "-", "+") + ";";
		СтрокаСклада = СтрокаСклада + ЧистаяСтрока(Строка(Данные[Счетчик].Ссылка.УникальныйИдентификатор())) + ";"; //ID склада 
		СтрокаСклада = СтрокаСклада + ЧистаяСтрока(Данные[Счетчик].Наименование) + ";"; //наименование склада 
		
		ТекстФайла = ТекстФайла + СтрокаСклада + Символы.ПС;
	КонецЦикла;
	
	Возврат ТекстФайла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуСклады()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""                                        "" КАК ИД,
	|	Склады.Наименование КАК Наименование,
	|	Склады.ПометкаУдаления КАК ПометкаУдаления,
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа");
	
	Данные      = Запрос.Выполнить().Выгрузить();
	АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество  = Данные.Количество();
	
	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес"     , АдресДанных);
	
	Возврат Запись;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуЕИ()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УпаковкиЕдиницыИзмеренияИзменения.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(УпаковкиЕдиницыИзмеренияИзменения.Наименование КАК СТРОКА(10)) КАК Наименование,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(УпаковкиЕдиницыИзмеренияИзменения.Наименование КАК СТРОКА(2))) = ""шт""
	|			ТОГДА 1
	|		КОГДА (ВЫРАЗИТЬ(УпаковкиЕдиницыИзмеренияИзменения.Наименование КАК СТРОКА(2))) = ""кг""
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет,
	|	УпаковкиЕдиницыИзмеренияИзменения.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ тЕдиницы
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмеренияИзменения
	|ГДЕ
	|	УпаковкиЕдиницыИзмеренияИзменения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тЕдиницы.Ссылка КАК Ссылка,
	|	тЕдиницы.Наименование КАК Наименование,
	|	тЕдиницы.Приоритет КАК Приоритет,
	|	тЕдиницы.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	тЕдиницы КАК тЕдиницы
	|
	|СГРУППИРОВАТЬ ПО
	|	тЕдиницы.Ссылка,
	|	тЕдиницы.Наименование,
	|	тЕдиницы.Приоритет,
	|	тЕдиницы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	тЕдиницы.Приоритет");
	
	Данные      = Запрос.Выполнить().Выгрузить();
	АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество  = Данные.Количество();
	
	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес"     , АдресДанных);
	
	Возврат Запись;	
	
КонецФункции

&НаСервере
Функция ВыгрузитьПорциюЕИ(Начало, Конец, АдресДанных)
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла = "";
	
	n = 0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n = Счетчик + 1; 
		
		СтрокаЕИ = "" + n + ";";
		СтрокаЕИ = СтрокаЕИ + ?(Данные[Счетчик].ПометкаУдаления, "-", "+") + ";";
		СтрокаЕИ = СтрокаЕИ + ЧистаяСтрока(Строка(Данные[Счетчик].Ссылка.УникальныйИдентификатор())) + ";"; //ID ЕИ 
		СтрокаЕИ = СтрокаЕИ + ЧистаяСтрока(Данные[Счетчик].Наименование) + ";"; //Наименование ЕИ 
		
		ТекстФайла = ТекстФайла + СтрокаЕИ + Символы.ПС;
	КонецЦикла;   
	
	Возврат ТекстФайла;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЯчейкиЕслиКаталогиДоступны()
	
	Запись = ЗаполнитьТаблицуЯчейки();
	КоличествоЯчейки  = Запись.Количество;
	АдресДанныхЯчейки = Запись.Адрес;	
	
	Если КоличествоЯчейки = 0 Тогда
		ПоказатьСообщениеПользователю("Нет ячеек для выгрузки!");
		Возврат;
	КонецЕсли;	   
	
	ИндикаторЯчейки = 0;   	
	
	тхт_яч = Новый ТекстовыйДокумент;
	ТекстФайлаЯчейки = "" + ?(ОчиститьЯчейки, "-", "+") + Символы.ПС;
	
	Если КоличествоЯчейки < 100 Тогда
		РазмерШагаЯчейки = 5;
	ИначеЕсли КоличествоЯчейки < 1000 Тогда
		РазмерШагаЯчейки = 10;
	ИначеЕсли КоличествоЯчейки < 10000 Тогда
		РазмерШагаЯчейки = 100;
	ИначеЕсли КоличествоЯчейки < 100000 Тогда
		РазмерШагаЯчейки = 1000;
	Иначе 
		РазмерШагаЯчейки = 10000;
	КонецЕсли;
	
	КоличествоШаговЯчейки = Цел(КоличествоЯчейки / РазмерШагаЯчейки);
	КоличествоЦелЯчейки   = КоличествоШаговЯчейки * РазмерШагаЯчейки;
	
	Если КоличествоЦелЯчейки < КоличествоЯчейки Тогда
		МаксимальноеЗначениеИндикатораЯчейки = КоличествоШаговЯчейки + 1;
	Иначе
		МаксимальноеЗначениеИндикатораЯчейки = КоличествоШаговЯчейки;
	КонецЕсли;
	
	Элементы.ИндикаторЯчейки.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораЯчейки;
	
	Для Счетчик = 1 По КоличествоШаговЯчейки Цикл		
		ТекстФайлаЯчейки = ТекстФайлаЯчейки + ВыгрузитьПорциюЯчеек(РазмерШагаЯчейки * (Счетчик - 1) + 1, РазмерШагаЯчейки * Счетчик, АдресДанныхЯчейки);
		ИндикаторЯчейки = ИндикаторЯчейки + 1;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();
	КонецЦикла;
	
	Если КоличествоЦелЯчейки < КоличествоЯчейки Тогда		
		ТекстФайлаЯчейки = ТекстФайлаЯчейки + ВыгрузитьПорциюЯчеек(КоличествоШаговЯчейки * РазмерШагаЯчейки + 1, КоличествоЯчейки, АдресДанныхЯчейки);
		ИндикаторЯчейки = ИндикаторЯчейки + 1;		
	КонецЕсли; 	
	
	тхт_яч.УстановитьТекст(ТекстФайлаЯчейки);
	тхт_яч.ВставитьСтроку(0, "" + Формат(тхт_яч.КоличествоСтрок(), "ЧГ=0"));
	
	ИмяФайлаВыгрузкиЯЧ = РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Cells.dm";
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт_яч, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Cells.dm" + "temp");
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда
			тхт_яч.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиЯЧ, КодировкаТекста.UTF8);
		Иначе
			тхт_яч.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД+РазделительПути + "in" + ИмяФайлаВыгрузкиЯЧ, КодировкаТекста.UTF8);	
		КонецЕсли;
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиЯЧ, ИДТСД, ИмяФайлаВыгрузкиЯЧ);
			Иначе     
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиЯЧ, ИДТСД, ИмяФайлаВыгрузкиЯЧ);
			КонецЕсли;	
		КонецЕсли;  
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Cells.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт_яч.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли;  
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЕИЕслиКаталогиДоступны()
	
	Запись		  = ЗаполнитьТаблицуЕИ();
	КоличествоЕИ  = Запись.Количество;
	АдресДанныхЕИ = Запись.Адрес;
	
	Если КоличествоЕИ = 0 Тогда
		ПоказатьСообщениеПользователю("Нет ЕИ для выгрузки!");
		Возврат;
	КонецЕсли;
	
	ИндикаторЕИ = 0;	
	
	тхт_еи = Новый ТекстовыйДокумент;
	ТекстФайлаЕИ = "" + ?(ОчиститьЕИ, "-", "+") + Символы.ПС;
	
	Если КоличествоЕИ < 100 Тогда
		РазмерШагаЕИ = 5;
	ИначеЕсли КоличествоЕИ < 1000 Тогда
		РазмерШагаЕИ = 10;
	ИначеЕсли КоличествоЕИ < 10000 Тогда
		РазмерШагаЕИ = 100;
	ИначеЕсли КоличествоЕИ < 100000 Тогда
		РазмерШагаЕИ = 1000;
	Иначе 
		РазмерШагаЕИ = 10000;
	КонецЕсли;
	
	КоличествоШаговЕИ = Цел(КоличествоЕИ / РазмерШагаЕИ);
	КоличествоЦелЕИ   = КоличествоШаговЕИ * РазмерШагаЕИ;
	
	Если КоличествоЦелЕИ < КоличествоЕИ Тогда
		МаксимальноеЗначениеИндикатораЕИ = КоличествоШаговЕИ + 1;
	Иначе
		МаксимальноеЗначениеИндикатораЕИ = КоличествоШаговЕИ;
	КонецЕсли;  	
	
	Элементы.ИндикаторЕИ.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораЕИ;
	
	Для Счетчик = 1 По КоличествоШаговЕИ Цикл
		
		ТекстФайлаЕИ = ТекстФайлаЕИ + ВыгрузитьПорциюЕИ(РазмерШагаЕИ * (Счетчик - 1) + 1, РазмерШагаЕИ * Счетчик, АдресДанныхЕИ);
		ИндикаторЕИ = ИндикаторЕИ + 1;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();
	КонецЦикла;
	
	Если КоличествоЦелЕИ < КоличествоЕИ Тогда		
		ТекстФайлаЕИ = ТекстФайлаЕИ + ВыгрузитьПорциюЕИ(КоличествоШаговЕИ * РазмерШагаЕИ + 1, КоличествоЕИ, АдресДанныхЕИ);
		ИндикаторЕИ = ИндикаторЕИ + 1;		
	КонецЕсли;
	
	тхт_еи.УстановитьТекст(ТекстФайлаЕИ);
	тхт_еи.ВставитьСтроку(0, "" + Формат(тхт_еи.КоличествоСтрок(), "ЧГ=0"));
	
	ИмяФайлаВыгрузкиЕИ = РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "v_83_Units_.dm";
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт_еи, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "v_83_Units_.dm" + "temp");
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда
			тхт_еи.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиЕИ, КодировкаТекста.UTF8);
		Иначе
			тхт_еи.Записать(лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиЕИ, КодировкаТекста.UTF8);	
		КонецЕсли; 
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиЕИ, ИДТСД, ИмяФайлаВыгрузкиЕИ);
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиЕИ, ИДТСД, ИмяФайлаВыгрузкиЕИ);
			КонецЕсли;	
		КонецЕсли; 
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "v_83_Units_.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт_еи.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли;
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКлиентовЕслиКаталогиДоступны()
	
	Запись = ЗаполнитьТаблицуКлиенты();
	КоличествоКлиенты   = Запись.Количество;
	АдресДанныхКлиенты = Запись.Адрес;	
	
	Если КоличествоКлиенты = 0 Тогда
		ПоказатьСообщениеПользователю("Нет контрагентов для выгрузки!");
		Возврат;
	КонецЕсли;	   
	
	ИндикаторКлиенты = 0;    
	
	тхт_кл = Новый ТекстовыйДокумент;
	ТекстФайлаКлиенты = "" + ?(ОчиститьКлиентов, "-", "+") + Символы.ПС;
	
	Если КоличествоКлиенты < 100 Тогда
		РазмерШагаКлиенты = 5;
	ИначеЕсли КоличествоКлиенты < 1000 Тогда
		РазмерШагаКлиенты = 10;
	ИначеЕсли КоличествоКлиенты < 10000 Тогда
		РазмерШагаКлиенты = 100;
	ИначеЕсли КоличествоКлиенты < 100000 Тогда
		РазмерШагаКлиенты = 1000;
	Иначе 
		РазмерШагаКлиенты = 10000;
	КонецЕсли;
	
	КоличествоШаговКлиенты = Цел(КоличествоКлиенты / РазмерШагаКлиенты);
	КоличествоЦелКлиенты   = КоличествоШаговКлиенты * РазмерШагаКлиенты;
	
	Если КоличествоЦелКлиенты < КоличествоКлиенты Тогда
		МаксимальноеЗначениеИндикатораКлиенты = КоличествоШаговКлиенты + 1;
	Иначе
		МаксимальноеЗначениеИндикатораКлиенты = КоличествоШаговКлиенты;
	КонецЕсли;    	
	
	Элементы.ИндикаторКлиенты.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораКлиенты;   	
	
	Для Счетчик = 1 По КоличествоШаговКлиенты Цикл		
		ТекстФайлаКлиенты = ТекстФайлаКлиенты + ВыгрузитьПорциюКлиентов(РазмерШагаКлиенты * (Счетчик - 1) + 1, РазмерШагаКлиенты * Счетчик, АдресДанныхКлиенты);
		ИндикаторКлиенты = ИндикаторКлиенты + 1;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();
	КонецЦикла;
	
	Если КоличествоЦелКлиенты < КоличествоКлиенты Тогда		
		ТекстФайлаКлиенты = ТекстФайлаКлиенты + ВыгрузитьПорциюКлиентов(КоличествоШаговКлиенты * РазмерШагаКлиенты + 1, КоличествоКлиенты, АдресДанныхКлиенты);
		ИндикаторКлиенты = ИндикаторКлиенты + 1;		
	КонецЕсли;
	
	тхт_кл.УстановитьТекст(ТекстФайлаКлиенты);
	тхт_кл.ВставитьСтроку(0, "" + Формат(тхт_кл.КоличествоСтрок(), "ЧГ=0"));
	
	
	ИмяФайлаВыгрузки = РазделительПути+Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "v_83_Clients_.dm";
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт_кл, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Clients.dm" + "temp");
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда
			тхт_кл.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузки, КодировкаТекста.UTF8);
		Иначе
			тхт_кл.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузки, КодировкаТекста.UTF8);	
		КонецЕсли;
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузки, ИДТСД, ИмяФайлаВыгрузки);
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузки, ИДТСД, ИмяФайлаВыгрузки);
			КонецЕсли;				
		КонецЕсли;
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Clients.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт_кл.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли;
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);			
	КонецЕсли;
	
КонецПроцедуры                    

#КонецОбласти

#Область ЕГАИС

#Область ВспомогатльныеФункцииПиво

&НаСервере
Функция ПолучитьНоменклатуруЕГАИСпоНоменклатуре(лНоменклатура)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", лНоменклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.АлкогольнаяПродукция;
	Иначе
		Возврат Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭтоПиво(ВидыАлкогольнойПродукции)
	
	СписокМарок = Новый СписокЗначений();
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("261")); //261 Сидр
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("262")); //262 Пуаре
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("263")); //263 Медовуха                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("500")); //500 Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("510")); //510 Пиво с содержанием объемной доли этилового спирта свыше 8,6%                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("520")); //520 Напитки, изготавливаемые на основе пива
	
	Если СписокМарок.НайтиПоЗначению(ВидыАлкогольнойПродукции) <> Неопределено Тогда		
		Возврат Истина;		
	Иначе          		
		Возврат Ложь;		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СоздатьТабФактПиво()
	
	лТабФактПиво = Новый ТаблицаЗначений;
	лТабФактПиво.Колонки.Добавить("Товар");
	лТабФактПиво.Колонки.Добавить("ФактКол");
	
	Возврат лТабФактПиво;
	
КонецФункции

#КонецОбласти

#Область ДанныеПроверкиЕГАИС

&НаСервереБезКонтекста
Функция ИнициализироватьДанныеПроверкиДокументаБД(ДокументБДСсылка,ПонижатьДетализацию)
	
	ТекстОшибки = "";
	
	Если РезультатыПроверкиУспешноСохранены(ДокументБДСсылка,ПонижатьДетализацию,ТекстОшибки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	Возврат Ложь;	
	
КонецФункции

&НаСервереБезКонтекста
Функция РезультатыПроверкиУспешноСохранены(ДокументБДСсылка,ПонижатьДетализацию,ТекстОшибки)
	
	Попытка	
		ДокументОснованиеОбъект = ДокументБДСсылка.ПолучитьОбъект();
		ДокументОснованиеОбъект.Заблокировать();	
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;	
	КонецПопытки;
	
	Попытка
		ДанныеРезультатовПроверки = НачальныеДанныеДляРезультатовПроверки(ДокументОснованиеОбъект,ПонижатьДетализацию);
		ДокументОснованиеОбъект["ДанныеПроверкиИПодбора"] = Новый ХранилищеЗначения(ДанныеРезультатовПроверки);
		РежимЗаписи = ?(ДокументОснованиеОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);	
		ДокументОснованиеОбъект.Записать(РежимЗаписи);
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;	
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция НачальныеДанныеДляРезультатовПроверки(ДокументОснованиеОбъект,ПонижатьДетализацию)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",             ДеревоМаркированнойПродукции());
	ДанныеДокумента.Вставить("ТаблицаНеМаркируемойПродукции",            ТаблицаНеМаркируемойПродукции());
	ДанныеДокумента.Вставить("ПулНеизвестныхАкцизныхМарок",              ПулНеизвестныхАкцизныхМарок());
	ДанныеДокумента.Вставить("АлкогольнаяПродукцияКОпределениюСправок2", АлкогольнаяПродукцияКОпределениюСправок2());
	ДанныеДокумента.Вставить("Справки2СопоставленнаяНоменклатура",       Справки2СопоставленнаяНоменклатура());
	ДанныеДокумента.Вставить("ТаблицаШтрихкодовНеМаркируемойПродукции",  ТаблицаШтрихкодовНеМаркируемойПродукции());
	
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",             Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная);
	ДанныеДокумента.Вставить("УпаковкиДокумента",                        Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДобавленныеУпаковки",                      Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",             Новый СписокЗначений());
	
	ДанныеДокумента.Вставить("РежимПроверки",                            Перечисления.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены);
	ДанныеДокумента.Вставить("СледующийСтикерОтложено",                  1);
	ДанныеДокумента.Вставить("СохраненВыборПоМаркируемойПродукции",      Ложь);
	ДанныеДокумента.Вставить("ДанныеВыбораПоМаркируемойПродукции",       Неопределено);
	ДанныеДокумента.Вставить("ШтрихкодТекущейПроверяемойУпаковки",       "");	
	ДанныеДокумента.Вставить("ДанныеРанееСгенерированныхШтрихкодов", 	 Неопределено);
	
	
	//нужны для первоначального получения данных
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",                  Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось);
	ДанныеДокумента.Вставить("РедактированиеФормыНедоступно",            Истина);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",         Ложь);		
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения",  Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная);
	ДанныеДокумента.Вставить("СтрокаБутылкиБезКоробки", Неопределено);
	
	Модуь_ИнтеграцияЕГАИСПереопределяемый = ОбщийМодуль("ИнтеграцияЕГАИСПереопределяемый");	
	
	Модуь_ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьТаблицуШтрихкодовНеМаркируемойПродукцииТТН_ЕГАИС(
	ДокументОснованиеОбъект.Ссылка, ДанныеДокумента.ТаблицаШтрихкодовНеМаркируемойПродукции);
	
	Модуь_ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьТаблицуСопоставленныхСправок2ТТН_ЕГАИС(
	ДокументОснованиеОбъект.Ссылка, ДанныеДокумента.Справки2СопоставленнаяНоменклатура);
	
	ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ДокументОснованиеОбъект.Ссылка);
	
	ЗагрузитьДеревоМаркированнойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента);
	ЗаполнитьТаблицуПартионнойПродукции(ДанныеПроверяемогоДокумента.ТоварыБезАкцизныхМарок, ДанныеДокумента);
	ЗаполнитьПулНеизвестныхАкцизныхМарок(ДанныеДокумента);	
	
	Если ПонижатьДетализацию Тогда
		ПонизитьУровеньДетализацииДоБутылки(ДанныеДокумента.ДеревоМаркированнойПродукции);
		ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки;
		ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки;
	КонецЕсли;
	
	ДанныеРезультатовСканированияАлкогольнойПродукции = Новый Структура;
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДеревоМаркированнойПродукции",             ДанныеДокумента.ДеревоМаркированнойПродукции);  //Тип("ДеревоЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ТаблицаНеМаркируемойПродукции",            ДанныеДокумента.ТаблицаНеМаркируемойПродукции); //Тип("ТаблицаЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ПулНеизвестныхАкцизныхМарок",              ДанныеДокумента.ПулНеизвестныхАкцизныхМарок); //Тип("ТаблицаЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("АлкогольнаяПродукцияКОпределениюСправок2", ДанныеДокумента.АлкогольнаяПродукцияКОпределениюСправок2); //Тип("ДеревоЗначений")
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("УпаковкиДокумента",                        ДанныеДокумента.УпаковкиДокумента);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДетализацияСтруктурыХранения",             ДанныеДокумента.ДетализацияСтруктурыХранения);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("РежимПроверки",                            ДанныеДокумента.РежимПроверки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДобавленныеУпаковки",                      ДанныеДокумента.ДобавленныеУпаковки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",             ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("СледующийСтикерОтложено",                  ДанныеДокумента.СледующийСтикерОтложено);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("СохраненВыборПоМаркируемойПродукции",      ДанныеДокумента.СохраненВыборПоМаркируемойПродукции);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДанныеВыбораПоМаркируемойПродукции",       ДанныеДокумента.ДанныеВыбораПоМаркируемойПродукции);
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ШтрихкодТекущейПроверяемойУпаковки",       ДанныеДокумента.ШтрихкодТекущейПроверяемойУпаковки);	
	ДанныеРезультатовСканированияАлкогольнойПродукции.Вставить("ДанныеРанееСгенерированныхШтрихкодов", 	   ДанныеДокумента.ДанныеРанееСгенерированныхШтрихкодов);
	
	Возврат ДанныеРезультатовСканированияАлкогольнойПродукции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДеревоМаркированнойПродукции()
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаАлкогольнойПродукции, ПеречислениеСсылка.ТипыУпаковок"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиШтрихкод",              Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",             Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("АлкогольнаяПродукция",                Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Справка2",                            Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки",     Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхБутылок",        Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",          Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",  Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяАлкогольнаяПродукция", Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСправки2",             Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсеСправки2Указаны",                  Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ДлинаАкцизнойМарки",                  Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеДлиныМарок",           Новый ОписаниеТипов("Булево"));	
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаНеМаркируемойПродукции()
	
	ТаблицаНеМаркируемойПродукции = Новый ТаблицаЗначений();
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("АлкогольнаяПродукция",  Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("Справка2",              Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("КоличествоПоДокументу", Новый ОписаниеТипов("Число"));
	ТаблицаНеМаркируемойПродукции.Колонки.Добавить("КоличествоФактическое", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаНеМаркируемойПродукции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПулНеизвестныхАкцизныхМарок()
	
	ПулНеизвестныхАкцизныхМарок = Новый ТаблицаЗначений();
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("Справка2",             Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	ПулНеизвестныхАкцизныхМарок.Колонки.Добавить("Поштучная",            Новый ОписаниеТипов("Булево"));
	
	Возврат ПулНеизвестныхАкцизныхМарок;
	
КонецФункции

&НаСервереБезКонтекста
Функция АлкогольнаяПродукцияКОпределениюСправок2()
	
	АлкогольнаяПродукцияКОпределениюСправок2 = Новый ДеревоЗначений();
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Номенклатура",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Характеристика",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Серия",                  Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("АлкогольнаяПродукция",   Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Справка2",               Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Количество",             Новый ОписаниеТипов("Число"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("КоличествоРаспределено", Новый ОписаниеТипов("Число"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("Маркируемая",            Новый ОписаниеТипов("Булево"));
	АлкогольнаяПродукцияКОпределениюСправок2.Колонки.Добавить("ИндексАкцизнойМарки",    Новый ОписаниеТипов("Число"));
	
	Возврат АлкогольнаяПродукцияКОпределениюСправок2;
	
КонецФункции

&НаСервереБезКонтекста
Функция Справки2СопоставленнаяНоменклатура()
	
	Справки2СопоставленнаяНоменклатура = Новый ТаблицаЗначений();
	Справки2СопоставленнаяНоменклатура.Колонки.Добавить("Справка2",       Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));	
	Справки2СопоставленнаяНоменклатура.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Справки2СопоставленнаяНоменклатура.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	Возврат Справки2СопоставленнаяНоменклатура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаШтрихкодовНеМаркируемойПродукции()
	
	ТаблицаШтрихкодовНеМаркируемойПродукции = Новый ТаблицаЗначений();
	ТаблицаШтрихкодовНеМаркируемойПродукции.Колонки.Добавить("Штрихкод",             Новый ОписаниеТипов("Строка"));	
	ТаблицаШтрихкодовНеМаркируемойПродукции.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));	
	ТаблицаШтрихкодовНеМаркируемойПродукции.Колонки.Добавить("Коэффициент",          Новый ОписаниеТипов("Число"));	
	
	Возврат ТаблицаШтрихкодовНеМаркируемойПродукции;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗагрузитьДеревоМаркированнойПродукции(ДеревоПоДаннымДокумента, ДанныеДокумента)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева(ДеревоПоДаннымДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоПоДаннымДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная
			ИЛИ ДетализацияСтруктурыХраненияДанныхДокумента = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.КоробаСБутылками Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаПоДаннымДокумента Из ДеревоПоДаннымДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаПоДаннымДокумента, КоллекцияСтрокПриемника, ДанныеДокумента);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаБутылкиБезКоробки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки Тогда
		ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуПартионнойПродукции(ДанныеПартионнойПродукции, ДанныеДокумента)
	
	Для каждого СтрокаТаблицы Из ДанныеПартионнойПродукции Цикл		
		НоваяСтрока = ДанныеДокумента.ТаблицаНеМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.КоличествоПоДокументу = СтрокаТаблицы.Количество;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПулНеизвестныхАкцизныхМарок(ДанныеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2 КАК Справка2,
	|	ДанныеПартионнойПродукции.КоличествоПоДокументу КАК Количество,
	|	ДанныеПартионнойПродукции.КоличествоФактическое КАК КоличествоФактическое
	|ПОМЕСТИТЬ ДанныеПартионнойПродукции
	|ИЗ
	|	&ДанныеПартионнойПродукции КАК ДанныеПартионнойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция               КАК АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2                           КАК Справка2,
	|	ЕСТЬNULL(ДанныеПартионнойПродукции.Справка2.Поштучная, ЛОЖЬ) КАК Поштучная,
	|	СУММА(ДанныеПартионнойПродукции.Количество)                  КАК Количество
	|ИЗ
	|	ДанныеПартионнойПродукции КАК ДанныеПартионнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ДанныеПартионнойПродукции.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	ВидыАлкогольнойПродукции.Маркируемый
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПартионнойПродукции.АлкогольнаяПродукция,
	|	ДанныеПартионнойПродукции.Справка2,
	|	ЕСТЬNULL(ДанныеПартионнойПродукции.Справка2.Поштучная, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("ДанныеПартионнойПродукции", ДанныеДокумента.ТаблицаНеМаркируемойПродукции);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.ПулНеизвестныхАкцизныхМарок.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок) Экспорт
	
	ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки;
	
	Для каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл		
		Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");		
		
		Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда			
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.КоробаСБутылками;			
			Для каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл				
				Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда					
					ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная;
					Прервать;					
				КонецЕсли;				
			КонецЦикла; 			
		КонецЕсли;    	
		
		Если ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Полная Тогда
			Прервать;
		КонецЕсли;  		
	КонецЦикла;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента)
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБутылкиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
				
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента);
				
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияАлкогольнойПродукции.Бутылки Тогда
		
		СтрокаБутылкиБезУпаковки = ДанныеДокумента.СтрокаБутылкиБезКоробки;
		
		Если СтрокаБутылкиБезУпаковки = Неопределено Тогда
			СтрокаБутылкиБезУпаковки = ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБутылкиБезУпаковки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		НоваяСтрока.ДлинаАкцизнойМарки = СтрДлина(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииЕГАИСКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииЕГАИСКлиентСервер");
	Модуь_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	Модуь_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	КоллекцияСтрокДобавленнойСтроки = НоваяСтрока.Строки;
	
	Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокДобавленнойСтроки, ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавленнаяСтрокаБутылкиБезКоробки(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	Модуь_ПроверкаИПодборПродукцииЕГАИСКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииЕГАИСКлиентСервер");
	Модуь_ПроверкаИПодборПродукцииЕГАИСКлиентСервер.ЗаполнитьСтрокуБутылкиБезКоробки(НоваяСтрока);
	
	ДанныеДокумента.СтрокаБутылкиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВнестиДанныеПроверкиВДокумент(ДокументБД)
	
	ДокументБДОбъект = ДокументБД.ПолучитьОбъект();
	ДанныеПроверки = ДокументБДОбъект.ДанныеПроверкиИПодбора.Получить();
	
	МассивАкцизныхМарок = ДокументБДОбъект.АкцизныеМарки.ВыгрузитьКолонку("АкцизнаяМарка");
	МассивКодовЕГАИС = Новый Массив;	
	Для каждого ЭлементМассива Из МассивАкцизныхМарок Цикл
		МассивКодовЕГАИС.Добавить(ЭлементМассива.ЗначениеШтрихкода);
	КонецЦикла;
	
	СтрокиДанныхПроверки = ДанныеПроверки.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого ГруппировкаСтрок Из СтрокиДанныхПроверки Цикл	
		
		Попытка 
			ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
			ГруппировкаСтрокШтрихкод = ГруппировкаСтрок.ЗначениеШтрихкода;
		Исключение
			ИмяКолонкиШтрихкода = "Штрихкод";
			ГруппировкаСтрокШтрихкод = ГруппировкаСтрок.Штрихкод;
		КонецПопытки;
		
		Попытка 
			СтатусВНаличии = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии;
			СтатусОтсутствует = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует;
		Исключение
			СтатусВНаличии = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			СтатусОтсутствует = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
		КонецПопытки;         		
		
		//ПРОВЕРКА ПО УПАКОВКАМ (марки,короб,палета, далее не учитываем)
		
		//ПЕРВЫЙ УРОВЕНЬ
		Если ГруппировкаСтрок.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка 
			Или  ГруппировкаСтрок.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
			
			ВсеСтрокиУпаковкаПервыйУровеньЕсть = Истина;
			Для каждого СтрокаУпаковкаПервыйУровень Из ГруппировкаСтрок.Строки Цикл
				
				//ВТОРОЙ УРОВЕНЬ
				Если СтрокаУпаковкаПервыйУровень.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка 
					Или  СтрокаУпаковкаПервыйУровень.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
					
					ВсеСтрокиУпаковкаВторойУровеньЕсть = Истина;	
					Для каждого СтрокаУпаковкаВторойУровень Из СтрокаУпаковкаПервыйУровень.Строки Цикл
						СтрокаШтрихкодУпаковкаВторойУровень = СтрокаУпаковкаВторойУровень[ИмяКолонкиШтрихкода];
						Если МассивКодовЕГАИС.Найти(СтрокаШтрихкодУпаковкаВторойУровень) <> Неопределено Тогда
							СтрокаУпаковкаВторойУровень.СтатусПроверки = СтатусВНаличии;
						Иначе
							СтрокаУпаковкаВторойУровень.СтатусПроверки = СтатусОтсутствует;
							ВсеСтрокиУпаковкаПервыйУровеньЕсть = Ложь;
							ВсеСтрокиУпаковкаВторойУровеньЕсть = Ложь;
						КонецЕсли;
					КонецЦикла;
					
					Если ВсеСтрокиУпаковкаВторойУровеньЕсть Тогда
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусВНаличии;
					Иначе
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусОтсутствует;
					КонецЕсли;
					
				Иначе
					СтрокаШтрихкодУпаковкаПервыйУровень = СтрокаУпаковкаПервыйУровень[ИмяКолонкиШтрихкода];
					Если МассивКодовЕГАИС.Найти(СтрокаШтрихкодУпаковкаПервыйУровень) <> Неопределено Тогда
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусВНаличии;
					Иначе
						СтрокаУпаковкаПервыйУровень.СтатусПроверки = СтатусОтсутствует;
						ВсеСтрокиУпаковкаПервыйУровеньЕсть = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ВсеСтрокиУпаковкаПервыйУровеньЕсть Тогда
				ГруппировкаСтрок.СтатусПроверки = СтатусВНаличии;
			Иначе
				ГруппировкаСтрок.СтатусПроверки = СтатусОтсутствует;
			КонецЕсли;
			
		ИначеЕсли ГруппировкаСтрок.Представление = "Бутылки без упаковки" Тогда
			
			Для каждого СтрокаМарка Из ГруппировкаСтрок.Строки Цикл
				
				СтрокаМаркиШтрихкод = СтрокаМарка[ИмяКолонкиШтрихкода];
				Если МассивКодовЕГАИС.Найти(СтрокаМаркиШтрихкод) <> Неопределено Тогда
					СтрокаМарка.СтатусПроверки = СтатусВНаличии;	
				Иначе
					СтрокаМарка.СтатусПроверки = СтатусОтсутствует;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если МассивКодовЕГАИС.Найти(ГруппировкаСтрокШтрихкод) <> Неопределено Тогда
				ГруппировкаСтрок.СтатусПроверки = СтатусВНаличии;
			Иначе
				ГруппировкаСтрок.СтатусПроверки = СтатусОтсутствует;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ДанныеПроверки.ТаблицаНеМаркируемойПродукции.Количество() > 0 Тогда
		
		ТоварыФакт = ДокументБДОбъект.Товары.Выгрузить();
		ТоварыФакт.Свернуть("АлкогольнаяПродукция, Справка2", "КоличествоФакт");
		
		Для каждого СтрокаНеМаркПродукции Из ДанныеПроверки.ТаблицаНеМаркируемойПродукции Цикл
			
			РезультатПоиска = ТоварыФакт.НайтиСтроки(Новый Структура("АлкогольнаяПродукция, Справка2", 
			СтрокаНеМаркПродукции.АлкогольнаяПродукция, СтрокаНеМаркПродукции.Справка2));
			
			Если РезультатПоиска.Количество() > 0 Тогда
				СтрокаНеМаркПродукции.КоличествоФактическое = РезультатПоиска[0].КоличествоФакт;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ХранилищеДанныхПроверки = Новый ХранилищеЗначения(ДанныеПроверки);
	ДокументБДОбъект.ДанныеПроверкиИПодбора = ХранилищеДанныхПроверки;
	
	Попытка
		ДокументБДОбъект.Записать();
	Исключение
		Сообщить("Ошибка записи документа после внесения данных о проверке!");
	КонецПопытки;         	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПонизитьУровеньДетализацииДоБутылки(ДеревоМаркированнойПродукции)
	
	СтрокиВерхнегоУровня = ДеревоМаркированнойПродукции.Строки;
	
	МассивСтрокКОбработке = Новый Массив;
	
	Для каждого СтрокаДерева Из СтрокиВерхнегоУровня Цикл
		МассивСтрокКОбработке.Добавить(СтрокаДерева);
	КонецЦикла;
	
	Для каждого СтрокаДерева Из МассивСтрокКОбработке Цикл
		
		Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			ПонизитьУровеньДетализацииУпаковкиДоБутылки(ДеревоМаркированнойПродукции, СтрокаДерева);
			СтрокиВерхнегоУровня.Удалить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПонизитьУровеньДетализацииУпаковкиДоБутылки(ДеревоМаркированнойПродукции, СтрокаДерева)
	
	ПодчиненныеСтроки = СтрокаДерева.Строки;
	
	Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			ПонизитьУровеньДетализацииУпаковкиДоБутылки(ДеревоМаркированнойПродукции,ПодчиненнаяСтрока);
			
		Иначе
			
			НоваяСтрока = ДеревоМаркированнойПродукции.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодчиненныеСтроки.Очистить();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьНоменклатуруЕГАИС(ШтрихкодТовара, НаименованиеТовара, лНоменклатураЕГАИС);
	
	ДанныеНоменклатуры = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕГАИС_СоответствиеНоменклатуры.Номенклатура КАК Ссылка
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК ЕГАИС_СоответствиеНоменклатуры
	|ГДЕ
	|	ЕГАИС_СоответствиеНоменклатуры.АлкогольнаяПродукция = &ЕГАИСНоменклатура";
	
	Запрос.УстановитьПараметр("ЕГАИСНоменклатура", лНоменклатураЕГАИС);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Количество() = 1 Тогда
		Пока Рез.Следующий() Цикл
			Номенклатура = Рез.Ссылка;
			Прервать;
		КонецЦикла;
		
		ДанныеНоменклатуры.Добавить(Номенклатура);
		ДанныеНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		ДанныеНоменклатуры.Добавить(Номенклатура.ЕдиницаИзмерения);
		ДанныеНоменклатуры.Добавить(1);
		
	Иначе		
		ИдентификаторТовара = СокрЛП(СтрЗаменить(ИдентификаторТовара, "<artID> = <", ""));
		ШтрихкодТовара      = СокрЛП(СтрЗаменить(ШтрихкодТовара, "<artBC> = <", ""));
		НаименованиеТовара  = СокрЛП(СтрЗаменить(НаименованиеТовара, "<name> = <", ""));
		Префикс             = Лев(ИдентификаторТовара, 3);
		ИдентификаторТовара = СокрЛП(Сред(ИдентификаторТовара, 4));
		
		ЗапросШтрихкодов = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Штрихкоды.Номенклатура КАК Номенклатура,
		|	Штрихкоды.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод");
		
		ЗапросШтрихкодов.УстановитьПараметр("Штрихкод", ШтрихкодТовара);
		ТаблицаНоменклатуры = ЗапросШтрихкодов.Выполнить().Выгрузить();  
		
		Если ТаблицаНоменклатуры.Количество() <> 0 Тогда // получение номенклатуры по штрихкоду
			Номенклатура   = ТаблицаНоменклатуры[0].Номенклатура;
			Характеристика = ТаблицаНоменклатуры[0].Характеристика;
			
		Иначе   // получение номенклатуры по наименованию			
			ДанныеНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());
			ДанныеНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			ДанныеНоменклатуры.Добавить(1);
			
			Возврат ДанныеНоменклатуры;			
		КонецЕсли;
		
		ДанныеНоменклатуры.Добавить(Номенклатура);
		ДанныеНоменклатуры.Добавить(Характеристика);
		
		ЗапросЕдиниц = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Штрихкоды.Упаковка КАК ЕИ,
		|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
		|	         		ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1)
		|	КАК КФ
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Код"); 
		
		Попытка 
			ЗапросЕдиниц.УстановитьПараметр("Код", ШтрихкодТовара);
		Исключение
			ДанныеНоменклатуры.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			ДанныеНоменклатуры.Добавить(1);
			Возврат ДанныеНоменклатуры;
		КонецПопытки;
		
		ТаблицаЕдиниц = ЗапросЕдиниц.Выполнить().Выгрузить();
		
		Если ТаблицаЕдиниц.Количество() = 0 Тогда	
			ДанныеНоменклатуры.Добавить(Номенклатура.ЕдиницаИзмерения);//единица по умолчанию 
			ДанныеНоменклатуры.Добавить(1); //коэффициент по умолчанию
			ВесовойПрефикс  = "2";
			
			Если Лев(ШтрихкодТовара,1) = ВесовойПрефикс Тогда
				//весовые штрихкоды не регистрируем
			ИначеЕсли ШтрихкодТовара = "" Или СтрДлина(ШтрихкодТовара) = 5 Или Лев(ШтрихкодТовара,1) = "2"  Тогда
				
			Иначе //регистрируем штрихкод	
				Регистр = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
				Регистр.Штрихкод       = ШтрихкодТовара;
				Регистр.Номенклатура   = Номенклатура.Ссылка;
				Регистр.Упаковка       = Номенклатура.ЕдиницаИзмерения;
				Регистр.Характеристика = Характеристика.Ссылка;
				Регистр.Записать();
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Создан штрих-код: " + ШтрихкодТовара + "  , номенклатура -" + НаименованиеТовара;
				Сообщение.Сообщить();
			КонецЕсли;
			
			Возврат ДанныеНоменклатуры;
		КонецЕсли;  
		
		Для каждого СтрЕд Из ТаблицаЕдиниц Цикл
			ДанныеНоменклатуры.Добавить(СтрЕд.ЕИ);
			ДанныеНоменклатуры.Добавить(СтрЕд.КФ);
			
			Прервать; //штрихкод должен уникально определять единицу
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеНоменклатуры; //найденная номенклатура 
	
КонецФункции

&НаСервере
Функция ПолучитьВидПродукцииИСДокумента(Документ)
	
	ИмяДокумента = Документ.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументСсылка
	|	И НЕ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
	|   И НЕ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция) 
	|   И НЕ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриобретениеТоваровУслуг", ИмяДокумента); 
	
	Если ИмяДокумента = "ПеремаркировкаТоваровИСМП" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Товары.Номенклатура", "Товары.НоваяНоменклатура");
	ИначеЕсли ИмяДокумента = "РасходныйОрдерНаТовары" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Товары", ".ОтгружаемыеТовары");	
	КонецЕсли;
	
	ТЗОсобенностьУчета = Запрос.Выполнить().Выгрузить();
	
	МассивОсобенностьУчета = Новый Массив;
	
	Если Не ТЗОсобенностьУчета.Количество() = 0 Тогда
		
		Для каждого СтрокаТЗ Из ТЗОсобенностьУчета Цикл
			ТекущаяОсобенностьУчета = СтрокаТЗ.ОсобенностьУчета;
			Модуь_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
			ТекущийВидПродукцииИС = Модуь_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ТекущаяОсобенностьУчета);
			
			МассивОсобенностьУчета.Добавить(ТекущийВидПродукцииИС);	
		КонецЦикла; 
		
	Иначе
		МассивОсобенностьУчета.Добавить(Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	КонецЕсли;
	
	Возврат МассивОсобенностьУчета;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьТоварыЕГАИСЕслиКаталогиДоступны()
	
	АдресДанныхТовары=ЗаполнитьТаблицуТоварыЕгаис();		
	
	Если НоменклатураЕГАИС.Количество() = 0 Тогда
		ПоказатьСообщениеПользователю("Нет номенклатуры ЕГАИС для выгрузки!");
		Возврат;
	КонецЕсли;	   
	
	КоличествоЭлементов = НоменклатураЕГАИС.Количество();
	ИндикаторТоварыЕгаис = 0;
	
	тхт_тв = Новый ТекстовыйДокумент;
	ТекстФайлаТовары = "" + ?(ОчиститьТоварыЕгаис, "-", "+") + Символы.ПС;
	
	КоличествоТовары = НоменклатураЕГАИС.Количество();
	
	Если КоличествоТовары < 100 Тогда
		РазмерШагаТовары = 5;
	ИначеЕсли КоличествоТовары < 1000 Тогда
		РазмерШагаТовары = 10;
	ИначеЕсли КоличествоТовары < 10000 Тогда
		РазмерШагаТовары = 100;
	ИначеЕсли КоличествоТовары < 100000 Тогда
		РазмерШагаТовары = 1000;
	Иначе 
		РазмерШагаТовары = 10000;
	КонецЕсли;
	
	КоличествоШаговТовары = Цел(КоличествоТовары / РазмерШагаТовары);
	КоличествоЦелТовары   = КоличествоШаговТовары * РазмерШагаТовары;
	
	Если КоличествоЦелТовары < КоличествоТовары Тогда
		МаксимальноеЗначениеИндикатораТовары = КоличествоШаговТовары + 1;
	Иначе
		МаксимальноеЗначениеИндикатораТовары = КоличествоШаговТовары;
	КонецЕсли;
	
	тхт_шк = Новый ТекстовыйДокумент;
	
	Элементы.ИндикаторТоварыЕгаис.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораТовары;
	
	Для Счетчик = 1 По КоличествоШаговТовары Цикл		
		ТекстФайлаТовары = ТекстФайлаТовары + ВыгрузитьПорциюТоваровЕГАИС(ИДТСД,РазмерШагаТовары * (Счетчик - 1) + 1, РазмерШагаТовары * Счетчик, АдресДанныхТовары);
		
		ИндикаторТоварыЕгаис = Счетчик;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();		
	КонецЦикла;
	
	Если КоличествоЦелТовары < КоличествоТовары Тогда		
		ТекстФайлаТовары = ТекстФайлаТовары + ВыгрузитьПорциюТоваровЕГАИС(ИДТСД,КоличествоШаговТовары * РазмерШагаТовары + 1, КоличествоТовары, АдресДанныхТовары);
		
		ИндикаторТоварыЕгаис = ИндикаторТоварыЕгаис + 1;
	КонецЕсли;
	
	ИндикаторТоварыЕгаис = МаксимальноеЗначениеИндикатораТовары;
	
	тхт_тв.УстановитьТекст(ТекстФайлаТовары);
	тхт_тв.ВставитьСтроку(0, "" + Формат(тхт_тв.КоличествоСтрок(), "ЧГ=0"));
	
	ИмяФайлаВыгрузкиТоваров = РазделительПути + Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_ArtsEGAIS.dm";
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт_тв, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_ArtsEGAIS.dm" + "temp");
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда
			тхт_тв.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиТоваров, КодировкаТекста.UTF8);
		Иначе
			тхт_тв.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиТоваров, КодировкаТекста.UTF8);
		КонецЕсли;
		
		Если МассоваяВыгрузка Тогда  
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиТоваров, ИДТСД, ИмяФайлаВыгрузкиТоваров);
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиТоваров, ИДТСД, ИмяФайлаВыгрузкиТоваров);
			КонецЕсли;	
		КонецЕсли; 
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_ArtsEGAIS.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт_тв.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли;
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьМаркиЕГАИСЕслиКаталогиДоступны()
	
	Запись = ЗаполнитьТаблицуМарки();
	КоличествоМарки  = Запись.Количество;
	АдресДанныхМарки = Запись.Адрес;
	
	Если КоличествоМарки = 0 Тогда
		ПоказатьСообщениеПользователю("Нет марок ЕГАИС для выгрузки!");
		Возврат;
	КонецЕсли;	   
	
	ИндикаторМаркиЕгаис = 0;
	
	тхт = Новый ТекстовыйДокумент;
	ТекстФайлаМарки = "" + ?(ОчиститьМаркиЕГАИС, "-", "+") + Символы.ПС;
	
	Если КоличествоМарки < 100 Тогда
		РазмерШагаМарки = 5;
	ИначеЕсли КоличествоМарки < 1000 Тогда
		РазмерШагаМарки = 10;
	ИначеЕсли КоличествоМарки < 10000 Тогда
		РазмерШагаМарки = 100;
	ИначеЕсли КоличествоМарки < 100000 Тогда
		РазмерШагаМарки = 1000;
	Иначе 
		РазмерШагаМарки = 10000;
	КонецЕсли;
	
	КоличествоШаговМарки = Цел(КоличествоМарки / РазмерШагаМарки);
	КоличествоЦелМарки   = КоличествоШаговМарки * РазмерШагаМарки;
	
	Если КоличествоЦелМарки < КоличествоМарки Тогда
		МаксимальноеЗначениеИндикатораМарки = КоличествоШаговМарки + 1;
	Иначе
		МаксимальноеЗначениеИндикатораМарки = КоличествоШаговМарки;
	КонецЕсли;  	
	
	Элементы.ИндикаторМаркиЕгаис.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораМарки;
	
	Для Счетчик = 1 По КоличествоШаговМарки Цикл		
		ТекстФайлаМарки = ТекстФайлаМарки + ВыгрузитьПорциюМарокЕГАИС(РазмерШагаМарки * (Счетчик - 1) + 1, РазмерШагаМарки * Счетчик, АдресДанныхМарки);
		
		ИндикаторМаркиЕгаис = Счетчик;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();		
	КонецЦикла;  
	
	Если КоличествоЦелМарки < КоличествоМарки Тогда		
		ТекстФайлаМарки = ТекстФайлаМарки + ВыгрузитьПорциюМарокЕГАИС(КоличествоШаговМарки * РазмерШагаМарки + 1, КоличествоМарки, АдресДанныхМарки);
		
		ИндикаторМаркиЕгаис = ИндикаторМаркиЕгаис + 1;
	КонецЕсли;
	
	ИндикаторМаркиЕгаис = МаксимальноеЗначениеИндикатораМарки;
	
	тхт.УстановитьТекст(ТекстФайлаМарки);
	
	тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ=0"));
	ИмяФайлаВыгрузкиМаркиЕГАИС = РазделительПути+Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_MarksEGAIS.dm";
	
	
	Если ТипОбмена = "1" Тогда		
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_v83_MarksEGAIS.dm" + "temp");
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда	
			тхт.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиМаркиЕГАИС, КодировкаТекста.UTF8);
		Иначе
			тхт.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути+"in" + ИмяФайлаВыгрузкиМаркиЕГАИС, КодировкаТекста.UTF8);
		КонецЕсли;
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиМаркиЕГАИС, ИДТСД, ИмяФайлаВыгрузкиМаркиЕГАИС);
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиМаркиЕГАИС, ИДТСД, ИмяФайлаВыгрузкиМаркиЕГАИС);
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_MarksEGAIS.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли;   
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокНепроверяемыхМарокЕГАИС()
	
	СписокМарок = Новый СписокЗначений();                                                                     
	
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("261")); //261 Сидр
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("262")); //262 Пуаре
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("263")); //263 Медовуха                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("500")); //500 Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("510")); //510 Пиво с содержанием объемной доли этилового спирта свыше 8,6%                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("520")); //520 Напитки, изготавливаемые на основе пива     
	
	Возврат СписокМарок;
	
КонецФункции

&НаСервере
Функция ПолучитьНоменклатуруПоЕГАИС(лНоменклатураЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &НоменклатураЕГАИС
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция";
	Запрос.УстановитьПараметр("НоменклатураЕГАИС",лНоменклатураЕГАИС);
	ТаблицаСоответствий =  Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСоответствий.Количество() > 0 Тогда
		Возврат ТаблицаСоответствий[0].Номенклатура;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьМаркиВходящейТТН_ЕГАИС(ДокументВыгрузки)
	
	ТЗМарок = Новый ТаблицаЗначений;
	ТЗМарок.Колонки.Добавить("АлкогольнаяПродукция");
	ТЗМарок.Колонки.Добавить("Марка");
	ТЗМарок.Колонки.Добавить("Короб");
	ТЗМарок.Колонки.Добавить("Палета");
	ТЗМарок.Колонки.Добавить("Номенклатура");
	ТЗМарок.Колонки.Добавить("Характеристика");
	ТЗМарок.Колонки.Добавить("Серия");
	ТЗМарок.Колонки.Добавить("Справка2");
	ТЗМарок.Колонки.Добавить("ТипУпаковки");
	
	ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ДокументВыгрузки);
	//ПЕРВЫЙ УРОВЕНЬ
	ТекущаяПалета = "";
	ТекущийКороб = "";  
	
	Для каждого СтрокаПоДаннымДокументаПервыйУровень Из ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки Цикл
		
		Попытка 
			ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
			ТекущийШтрихкодПервыйУровень = СтрокаПоДаннымДокументаПервыйУровень[ИмяКолонкиШтрихкода];
		Исключение
			ИмяКолонкиШтрихкода = "Штрихкод";
			ТекущийШтрихкодПервыйУровень = СтрокаПоДаннымДокументаПервыйУровень[ИмяКолонкиШтрихкода];
		КонецПопытки; 
		
		Если СтрДлина(ТекущийШтрихкодПервыйУровень)=68 Или СтрДлина(ТекущийШтрихкодПервыйУровень) = 150 Тогда
			СтрокаМарки = ТЗМарок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаПервыйУровень);
			СтрокаМарки.Марка = ТекущийШтрихкодПервыйУровень;
			СтрокаМарки.Короб = ТекущийКороб;
			СтрокаМарки.Палета = ТекущаяПалета;
		Иначе
			//ВТОРОЙ УРОВЕНЬ       
			ТекущаяПалета = "";
			ТекущийКороб = ТекущийШтрихкодПервыйУровень;
			
			Для каждого СтрокаПоДаннымДокументаВторойУровень Из СтрокаПоДаннымДокументаПервыйУровень.Строки Цикл
				
				Попытка 
					ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
					ТекущийШтрихкодВторойУровень = СтрокаПоДаннымДокументаВторойУровень[ИмяКолонкиШтрихкода];
				Исключение
					ИмяКолонкиШтрихкода = "Штрихкод";
					ТекущийШтрихкодВторойУровень = СтрокаПоДаннымДокументаВторойУровень[ИмяКолонкиШтрихкода];
				КонецПопытки;
				
				Если СтрДлина(ТекущийШтрихкодВторойУровень) = 68 Или СтрДлина(ТекущийШтрихкодВторойУровень) = 150 Тогда
					СтрокаМарки = ТЗМарок.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаВторойУровень);
					СтрокаМарки.Марка  = ТекущийШтрихкодВторойУровень;
					СтрокаМарки.Короб  = ТекущийКороб;
					СтрокаМарки.Палета = ТекущаяПалета;
				Иначе
					//ТРЕТИЙ УРОВЕНЬ
					ТекущаяПалета = ТекущийШтрихкодПервыйУровень;
					ТекущийКороб = ТекущийШтрихкодВторойУровень;	
					Для каждого СтрокаПоДаннымДокументаТретийУровень Из СтрокаПоДаннымДокументаВторойУровень.Строки Цикл
						
						Попытка 
							ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
							ТекущийШтрихкодТретийУровень = СтрокаПоДаннымДокументаТретийУровень[ИмяКолонкиШтрихкода];
						Исключение
							ИмяКолонкиШтрихкода = "Штрихкод";
							ТекущийШтрихкодТретийУровень = СтрокаПоДаннымДокументаТретийУровень[ИмяКолонкиШтрихкода];
						КонецПопытки;
						
						
						Если СтрДлина(ТекущийШтрихкодТретийУровень) = 68 Или СтрДлина(ТекущийШтрихкодТретийУровень) = 150 Тогда
							СтрокаМарки = ТЗМарок.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаТретийУровень);
							СтрокаМарки.Марка  = ТекущийШтрихкодТретийУровень;
							СтрокаМарки.Короб  = ТекущийКороб;
							СтрокаМарки.Палета = ТекущаяПалета;
						Иначе
							//ДАЛЕЕ ВЛОЖЕННОСТЬ НЕ УЧИТЫВАЕМ
							Продолжить;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗМарок;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуТоварыЕГАИС()
	
	ЗапросТоваров = Новый Запрос();	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕГАИС_Номенклатура.Ссылка,
	|	ЕГАИС_Номенклатура.Код,
	|	ЕГАИС_Номенклатура.Наименование,
	|	ЕГАИС_Номенклатура.НаименованиеПолное,
	|	ЕГАИС_Номенклатура.Объем,
	|	ЕГАИС_Номенклатура.Крепость,
	|	ЕГАИС_Номенклатура.Производитель,
	|	ЕГАИС_Номенклатура.Импортер,
	|	ЕГАИС_Номенклатура.ВидПродукции,
	|	ЕГАИС_Номенклатура.ПометкаУдаления КАК Удалить
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК ЕГАИС_Номенклатура
	|ГДЕ
	|	(&ВсеПроизводители
	|			ИЛИ ЕГАИС_Номенклатура.Производитель = &Производитель)
	|	И (&ВсеИмпортеры
	|			ИЛИ ЕГАИС_Номенклатура.Импортер = &Импортер)
	|	И (&ВсеВиды
	|			ИЛИ ЕГАИС_Номенклатура.ВидПродукции = &ВидПродукции)";
	
	ЗапросТоваров.Текст = ТекстЗапроса;
	ЗапросТоваров.УстановитьПараметр("ВсеИмпортеры"    , Не ЗначениеЗаполнено(Импортер));
	ЗапросТоваров.УстановитьПараметр("Импортер"        , Импортер);
	ЗапросТоваров.УстановитьПараметр("ВсеПроизводители", Не ЗначениеЗаполнено(Производитель));
	ЗапросТоваров.УстановитьПараметр("Производитель"   , Производитель);
	ЗапросТоваров.УстановитьПараметр("ВсеВиды"         , Не ЗначениеЗаполнено(ВидПродукции));
	ЗапросТоваров.УстановитьПараметр("ВидПродукции"    , ВидПродукции);		
	
	ДанныеТовары = ЗапросТоваров.Выполнить().Выгрузить();
	АдресДанныхТовары = ПоместитьВоВременноеХранилище(ДанныеТовары, УникальныйИдентификатор);
	
	НоменклатураЕГАИС.Загрузить(ДанныеТовары);
	
	Возврат АдресДанныхТовары;
	
КонецФункции  

&НаСервереБезКонтекста
Функция ВыгрузитьПорциюТоваровЕГАИС(ИДТСД, Начало, Конец, АдресДанных)	
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла = "";
	
	n = 0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n = Счетчик + 1;  
		
		СтрокаТовара = "" + n + ";";
		СтрокаТовара = СтрокаТовара + формат(Данные[Счетчик].Удалить, "БЛ=+; БИ=-") + ";";
		СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Наименование) + ";";
		СтрокаТовара = СтрокаТовара + "8e-" + Данные[Счетчик].Ссылка.УникальныйИдентификатор() + ";";
		СтрокаТовара = СтрокаТовара + СокрЛП(Данные[Счетчик].Код) + ";";
		СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].Производитель) + ";";
		СтрокаТовара = СтрокаТовара + ";"; //импортер
		СтрокаТовара = СтрокаТовара + Формат(Данные[Счетчик].Объем, "ЧРД=.; ЧН=0; ЧГ=0") + ";";
		СтрокаТовара = СтрокаТовара + Формат(Данные[Счетчик].Крепость, "ЧРД=.; ЧН=0; ЧГ=0") + ";";
		СтрокаТовара = СтрокаТовара + ЧистаяСтрока(Данные[Счетчик].ВидПродукции) + ";";
		СтрокаТовара = СтрокаТовара + ТоварСопоставленОдинКОдному(Данные[Счетчик].Ссылка) + ";";
		СтрокаТовара = СтрокаТовара + "6" + ";"; //количество единиц в коробе
		СтрокаТовара = СтрокаТовара + "1" + ";"; //требуется ввод справки А по товару
		СтрокаТовара = СтрокаТовара + "1" + ";"; //требуется ввод справки Б по товару
		СтрокаТовара = СтрокаТовара + "1" + ";"; //требуется ввод даты розлива по товару
		
		ТекстФайла = ТекстФайла + СтрокаТовара + Символы.ПС;	
	КонецЦикла; 
	
	Возврат ТекстФайла; 		   
	
КонецФункции

&НаСервереБезКонтекста
Функция ТоварСопоставленОдинКОдному(лНоменклатураЕГАИС)
	
	СопоставленОдинКОдному = "0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕГАИС_СоответствиеНоменклатуры.Номенклатура КАК Ссылка
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК ЕГАИС_СоответствиеНоменклатуры
	|ГДЕ
	|	ЕГАИС_СоответствиеНоменклатуры.АлкогольнаяПродукция = &ЕГАИСНоменклатура";
	
	Запрос.УстановитьПараметр("ЕГАИСНоменклатура", лНоменклатураЕГАИС);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Количество() = 1 Тогда
		СопоставленОдинКОдному = "1";	
	КонецЕсли;
	
	Возврат СопоставленОдинКОдному;
	
КонецФункции

//МАРКИ ЕГАИС
&НаСервере
Функция ЗаполнитьТаблицуМарки()
	
	ЗапросМарок = Новый Запрос ("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕГАИС_ДанныеМарки.АкцизнаяМарка.ЗначениеШтрихкода КАК АкцизнаяМарка,
	|	ЕГАИС_ДанныеМарки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ЕГАИС_ДанныеМарки.АлкогольнаяПродукция.ПометкаУдаления КАК ПометкаУдаления,
	|	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода, """") КАК Короб,
	|	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка.ЗначениеШтрихкода, """") КАК Палета
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК ЕГАИС_ДанныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
	|		ПО (ДанныеУпаковкиУровень1.Штрихкод.ЗначениеШтрихкода = ЕГАИС_ДанныеМарки.АкцизнаяМарка.ЗначениеШтрихкода)
	|			И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|				ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
	|		ПО (ДанныеУпаковкиУровень2.Штрихкод.ЗначениеШтрихкода = ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода)
	|			И (ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|				ИЛИ ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	|ГДЕ
	|	ЕГАИС_ДанныеМарки.АкцизнаяМарка <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И ЕГАИС_ДанныеМарки.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И ЕГАИС_ДанныеМарки.АкцизнаяМарка.ЗначениеШтрихкода <> """"
	|	И 1 = 1");
	
	Если СтатусМарки <> Перечисления.СтатусыАкцизныхМарок.ПустаяСсылка() Тогда
		ЗапросМарок.Текст = СтрЗаменить(ЗапросМарок.Текст, "1 = 1", "ЕГАИС_ДанныеМарки.Статус = &Статус");
		ЗапросМарок.УстановитьПараметр("Статус", СтатусМарки);
	КонецЕсли; 
	
	Данные      = ЗапросМарок.Выполнить().Выгрузить();
	АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество  = Данные.Количество();
	
	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес", АдресДанных);
	
	Возврат Запись;
	
КонецФункции

&НаСервере
Функция ВыгрузитьПорциюМарокЕГАИС(Начало, Конец, АдресДанных)
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла = "";
	
	n = 0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n = Счетчик + 1;
		Попытка
			СтрокаМарки = "" + n + ";";	
			СтрокаМарки = СтрокаМарки + ?(Данные[Счетчик].ПометкаУдаления, "-", "+") + ";";
			СтрокаМарки = СтрокаМарки + ЧистаяСтрока(Строка(Данные[Счетчик].АкцизнаяМарка)) + ";"; //2 - марка ЕГАИС 
			СтрокаМарки = СтрокаМарки + "8e-" + ЧистаяСтрока(Данные[Счетчик].АлкогольнаяПродукция.УникальныйИдентификатор()) + ";"; //3 - ID номенклатуры марки 
			СтрокаМарки = СтрокаМарки + ";"; //4 - SN
			СтрокаМарки = СтрокаМарки + ЧистаяСтрока(Строка(Данные[Счетчик].Палета)) + ";"; //5 - палета 
			СтрокаМарки = СтрокаМарки + ЧистаяСтрока(Строка(Данные[Счетчик].Короб)) + ";"; //6 - короб 
			
			ТекстФайла = ТекстФайла + СтрокаМарки + Символы.ПС;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат ТекстФайла;
	
КонецФункции

&НаСервере
Функция ПолучитьШКиНоменклатуруПоАлкогольнойПродукции(лАлкогольнаяПродукция)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.Номенклатура КАК Товар,
	|	Штрихкоды.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура = Штрихкоды.Номенклатура
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &АлкогольнаяПродукция");
	Запрос.УстановитьПараметр("АлкогольнаяПродукция", лАлкогольнаяПродукция);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Маркировка

#Область ОбращениеКИСМП

&НаСервере
Функция СформироватьЗапросКСервисуИСМПиСоздатьСправочникСсылкаМарка(ЗначениеШтрихкода, ЭтоТабак = Ложь, СсылкаНаДок = Неопределено, ВидМаркируемойПродукцииДокумента)
	
	Модуь_ШтрихкодированиеИС = ОбщийМодуль("ШтрихкодированиеИС");
	Модуь_ШтрихкодированиеИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");
	Модуь_ШтрихкодированиеИСКлиентСерверПереопределяемый = ОбщийМодуль("ШтрихкодированиеИСКлиентСерверПереопределяемый");
	
	Если СсылкаНаДок <> Неопределено Тогда
		Если ТипЗнч(СсылкаНаДок) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда	
			Модуь_ШтрихкодированиеИСМПСлужебный = ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			ДанныеНоменклатурыПоДаннымУПД = Модуь_ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыПоДаннымУПД(СсылкаНаДок);
		КонецЕсли;	
	КонецЕсли;
	
	Контекст 			= Новый Структура("Объект,Ссылка", "", ""); //Контекст = ЭтотОбъект;
	ФормаВыбора 		= Неопределено;
	ВидПродукцииИС 		= ?(ЭтоТабак, Перечисления.ВидыПродукцииИС.Табак, ?(ВидМаркируемойПродукцииДокумента <> Неопределено, ВидМаркируемойПродукцииДокумента, Перечисления.ВидыПродукцииИС.Обувь));
	СсылкаНаШтрихкод	= Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	
	ПараметрыСканирования = Модуь_ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования();
	ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукцииИС, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукцииИС, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукцииИС);
	Модуь_ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукцииИС);
	
	Если ЭтоТабак Тогда
		ПолучитьПараметрыСканированияМОТП(СсылкаНаДок, ВидПродукцииИС, ПараметрыСканирования, Истина);
	Иначе
		ПолучитьПараметрыСканированияИСПМ(СсылкаНаДок, ВидПродукцииИС, ПараметрыСканирования, Истина);                                                                           
	КонецЕсли;
	
	Структура = Новый Структура();
	Структура.Вставить("Штрихкод"		, ЗначениеШтрихкода);
	Структура.Вставить("Количество"		, "");
	Структура.Вставить("ФорматBase64"	, Ложь);
	
	ДанныеШтрихкодаСписок = Новый Массив;
	ДанныеШтрихкодаСписок.Добавить(Структура); 
	
	ДанныеПоШтрихкодам    = Модуь_ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	ДанныеПоШтрихкодам.ВидыПродукции.Добавить(ВидПродукцииИС);
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукцииИС);
	
	Попытка
		Модуь_ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеКодовМаркировки, ДанныеШтрихкодаСписок, ПараметрыСканирования, Неопределено);
	Исключение
		Модуь_ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования, Неопределено);
	КонецПопытки;
	
	ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода);
	
	Если ДанныеУпаковки = Неопределено Тогда
		Модуь_ШтрихкодированиеИС.ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам,ПараметрыСканирования,Неопределено);
	ИначеЕсли ДанныеУпаковки.Ссылка.ВложенныеШтрихкоды.Количество() = 0 Тогда //создание вложенности
		ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам,ПараметрыСканирования,Неопределено,Модуь_ШтрихкодированиеИС);	
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды") И ДанныеПоШтрихкодам.ВложенныеШтрихкоды.Свойство("ДеревоУпаковок") Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		
		Попытка
			
			СтрокаДерева = ДеревоУпаковок.Строки[0];
			
			СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаДерева, СсылкаНаШтрихкод, , ДанныеНоменклатурыПоДаннымУПД, ЭтоТабак);
			
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				Возврат СсылкаНаШтрихкод;	
			КонецЕсли; 
			
			Для каждого СтрокаВложенности Из СтрокаДерева.Строки Цикл
				СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаВложенности, СсылкаНаШтрихкод, , ДанныеНоменклатурыПоДаннымУПД, ЭтоТабак);
				
				Если СтрокаВложенности.Строки.Количество() = 0 Тогда
					Продолжить;	
				КонецЕсли;
				
				Для каждого СтрокаВложенностиВторогоУровня Из СтрокаВложенности.Строки Цикл
					СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаВложенностиВторогоУровня, СсылкаНаШтрихкод, , ДанныеНоменклатурыПоДаннымУПД, ЭтоТабак);	
				КонецЦикла; 
				
			КонецЦикла;					
			
		Исключение       			
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'Создание элементов справочника штрихкоды упаковок.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
	КонецЕсли; 
	
	Возврат СсылкаНаШтрихкод;
	
КонецФункции

// Включает поддержку алкогольной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
&НаСервере
Процедура ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		МодульШтрихкодированиеЕГАИСКлиентСервер.ЗаполнитьПараметрыСканирования(
		ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);      		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
&НаСервере
Процедура ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ЭтоТабакПоВидыПродукцииИС(ВидПродукции)
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку обувной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
&НаСервере
Процедура ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Модуь_ИнтеграцияИСПовтИсп = ОбщийМодуль("ИнтеграцияИСПовтИсп");
		
		Если Модуь_ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции)
			Или Не ЗначениеЗаполнено(ВидПродукции) Тогда
			
			МодульШтрихкодированиеМОТПКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
			
			Попытка
				МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ФормаВыбора, ВидПродукции, ПараметрыСканирования);	
			Исключение
				МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ВидПродукции, ПараметрыСканирования);
			КонецПопытки; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаДерева, СсылкаНаШтрихкод, KM_RawMrc = "", ДанныеНоменклатурыПоДаннымУПД = Неопределено, ЭтоТабак)
	
	Марка = СтрокаДерева.Штрихкод;
	
	ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(Марка);
	
	Если ДанныеУпаковки = Неопределено Тогда
		НовЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
		
		Попытка
			ЗаполнитьЗначенияСвойств(НовЭлемент, СтрокаДерева,,"Родитель,Владелец,ХешСумма");
		Исключение
			ЗаполнитьЗначенияСвойств(НовЭлемент, СтрокаДерева,,"Родитель,ХешСумма");
		КонецПопытки;
		
		Если СтрДлина(Марка) = 29 и СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда	
			Марка = Марка + ?(СокрЛП(KM_RawMrc) = "", "", "(8005)"+ KM_RawMrc);	
		КонецЕсли;
		
		НовЭлемент.ЗначениеШтрихкода = Марка;
		
		Если Не ЭтоТабак И (СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Или СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC) И НовЭлемент.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			
			МаркаБезНулей = СтрЗаменить(Марка, "(00)", "");
			
			Если ДанныеНоменклатурыПоДаннымУПД <> Неопределено Тогда
				
				СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(МаркаБезНулей);
				
				Если СведенияПоEAN <> Неопределено Тогда			
					Если ЗначениеЗаполнено(СведенияПоEAN.Номенклатура) Тогда					
						НовЭлемент.Номенклатура = СведенияПоEAN.Номенклатура;
						НовЭлемент.Характеристика = СведенияПоEAN.Характеристика;
					Иначе
						ЗаполнитьНоменклатуру(СтрокаДерева, НовЭлемент);				
					КонецЕсли;
				Иначе
					ЗаполнитьНоменклатуру(СтрокаДерева, НовЭлемент);
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		Если НовЭлемент.Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() Или НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
			
			ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НовЭлемент.ЗначениеШтрихкода);
			
			Если ДанныеУпаковки <> Неопределено Тогда //данный штрихкод есть базе
				Возврат;
			КонецЕсли;
			
			НовЭлемент.Записать();
		Иначе
			Сообщить("Не заполнена номенклатура для: " + Марка);
		КонецЕсли;	
		
	Иначе
		
		НовЭлемент = ДанныеУпаковки.Ссылка;
		
	КонецЕсли; 
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		ЗначениеШтрихкодаРодителя 					= СтрокаДерева.Родитель.Штрихкод;
		ЗначениеШтрихкодаРодителяНормализованный 	= СтрокаДерева.Родитель.НормализованныйШтрихкод;
		
		ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителя);
		
		Если ДанныеУпаковки = Неопределено Тогда
			ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителяНормализованный);		
		КонецЕсли;
		
		Если ДанныеУпаковки <> Неопределено Тогда //данный штрихкод есть базе
			НайденныйОбъект = ДанныеУпаковки.Ссылка.ПолучитьОбъект();
			НовСтрокаВложенности = НайденныйОбъект.ВложенныеШтрихкоды.Добавить();
			НовСтрокаВложенности.Штрихкод = НовЭлемент.Ссылка;
			НайденныйОбъект.Записать();
		КонецЕсли;	
	КонецЕсли; 
	
	Если СсылкаНаШтрихкод.Пустая() Тогда
		СсылкаНаШтрихкод = НовЭлемент.Ссылка;		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область МДЛП

&НаСервере
Функция ДатаМобайл_МДЛП_ТребуетсяСпецОбработка(Шаблон)
	
	Список = Новый СписокЗначений;
	Список.Добавить("УведомлениеОПриемкеМДЛП");
	Список.Добавить("УведомлениеОбОтгрузкеМДЛП");	
	Список.Добавить("УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП");
	Список.Добавить("УведомлениеОбОприходованииМДЛП");
	Список.Добавить("УведомлениеОВыбытииМДЛП");
	
	Возврат Список.НайтиПоЗначению(Шаблон.ВидДокумента) <> Неопределено;
	
КонецФункции

&НаСервере
Процедура ПолучитьСоздатьИсходныйДокументОбъект(Об, Шаблон, ПараметрыДокумента, ЭтоНовыйДокумент)
	
	Попытка
		Док = Об.Документ.ПолучитьОбъект();
	Исключение
		Док = Документы[Шаблон.ВидДокумента].СоздатьДокумент();
		Док.Дата = ТекущаяДата(); 
		Попытка Док.Заполнить(Неопределено); Исключение КонецПопытки;
		ЭтоНовыйДокумент = Истина;	
	КонецПопытки;
	
	ПараметрыДокумента.Вставить("Док", Док);
	
КонецПроцедуры

&НаСервере
Функция ДатаМобайл_МДЛП_ПолучитьДокументМаркировки(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Шаблон", Шаблон.ТипДокумента);
	
	СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураПоиска);			  
	
	Для каждого НовЗнач Из СтрокиПоиска Цикл
		Если НовЗнач.ТипЗнач = "Справочники" Тогда
			Элм = Справочники[НовЗнач.ИмяТаблицы].ПолучитьСсылку(Новый УникальныйИдентификатор(НовЗнач.ГУИД)); 
			ИсходныйДокумент[НовЗнач.Реквизит] = Элм; 	
		ИначеЕсли НовЗнач.ТипЗнач = "Строка" Или НовЗнач.ТипЗнач = "Число" Или НовЗнач.ТипЗнач = "Дата" Тогда
			ИсходныйДокумент[НовЗнач.Реквизит] = НовЗнач.ЗначениеРеквизита;
		ИначеЕсли НовЗнач.ТипЗнач = "Булево" Тогда
			Если НовЗнач.ЗначениеРеквизита = "Да" Тогда
				Попытка ИсходныйДокумент[НовЗнач.Реквизит] = Истина; Исключение КонецПопытки;
			ИначеЕсли НовЗнач.ЗначениеРеквизита = "Нет" Тогда
				Попытка ИсходныйДокумент[НовЗнач.Реквизит] = Ложь; Исключение КонецПопытки;
			КонецЕсли;
		ИначеЕсли НовЗнач.ТипЗнач = "Перечисления" Тогда	           
			
			ЗначенияПеречисления = ВернутьЗначениеПеречисленияПоСинониму(НовЗнач.ЗначениеРеквизита, НовЗнач.ИмяТаблицы);				
			ИсходныйДокумент[НовЗнач.Реквизит] = ЗначенияПеречисления;				
		КонецЕсли;
		
		Если НовЗнач.Реквизит = "Отдельная ТЧ упаковок" Тогда
			Если НовЗнач.ЗначениеРеквизита = "Да" Тогда
				ОтдельнаяТЧУпаковок = Истина;
			ИначеЕсли НовЗнач.ЗначениеРеквизита = "Нет" Тогда
				ОтдельнаяТЧУпаковок = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД, , Истина);
	
	Для каждого СтрокаТСД Из ТабДокТСД Цикл
		СтрокаТСД.Марка 			= УбратьИзМаркиУпрСимволы(УбратьСкобкиТеговМарка(СтрокаТСД.Марка, 3));
		СтрокаТСД.Короб 			= УбратьИзМаркиУпрСимволы(СтрокаТСД.Короб);
		СтрокаТСД.УпаковочныйЛист 	= УбратьИзМаркиУпрСимволы(СтрокаТСД.УпаковочныйЛист);
		
		Если СокрЛП(СтрокаТСД.Марка) <> "" Тогда
			НоваяСтрокаКИЗов = КИЗы.Добавить();
			НоваяСтрокаКИЗов.КИЗизФайла = СтрокаТСД.Марка;
		КонецЕсли;	
	КонецЦикла; 
	
	Если Шаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП" Или  Шаблон.ВидДокумента = "УведомлениеОбОприходованииМДЛП" Тогда
		
		Возврат ДатаМобайл_МДЛП_ОбработатьВидДокументаУведомлениеОПриемкеМДЛП(ИсходныйДокумент, Шаблон, ТабДокТСД, ЭтоНовыйДокумент);	
		
	ИначеЕсли Шаблон.ВидДокумента = "УведомлениеОбОтгрузкеМДЛП" Или Шаблон.ВидДокумента = "УведомлениеОВыбытииМДЛП" Тогда
		
		Возврат ДатаМобайл_МДЛП_ОбработатьВидДокументаУведомлениеОбОтгрузкеМДЛП(ИсходныйДокумент, Шаблон, ТабДокТСД, ЭтоНовыйДокумент);	
		
	ИначеЕсли  Шаблон.ВидДокумента = "УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП" Тогда	
		
		Возврат ДатаМобайл_МДЛП_ОбработатьВидДокументаУведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП(ИсходныйДокумент, Шаблон, ТабДокТСД, ЭтоНовыйДокумент, ОтдельнаяТЧУпаковок);	
		
	КонецЕсли;
	
КонецФункции

//ПРИЕМКА И ОПРИХОДОВАНИЕ
&НаСервере
Функция ДатаМобайл_МДЛП_ОбработатьВидДокументаУведомлениеОПриемкеМДЛП(ИсходныйДокумент, Шаблон, ТабДокТСД, ЭтоНовыйДокумент)
	
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор 		= Шаблон.ИмяТабличнойЧастиПодбор;
	
	ЗаполнитьШапкуДокументаМДЛП(Шаблон, ИсходныйДокумент, ЭтоНовыйДокумент);
	
	ЭтоПрямойПорядок = Ложь;
	Если Шаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП" Тогда
		Если ИсходныйДокумент.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
			ЭтоПрямойПорядок = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПрямойПорядок Тогда		
		//СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковокМДЛП(ТабДокТСД);
		//ДеревоУпаковок = ПолучитьДеревоУпаковок(ИсходныйДокумент);
		//ОбработатьСтрокиДереваУпаковок(ДеревоУпаковок.Строки, СтруктураСобранныхМарокИУпаковок);
		//ЗаписатьДанныеПроверкиИПодбора(ИсходныйДокумент, ДеревоУпаковок);	
		
	Иначе		
		ОбработатьНастройкуТЧПриЗагрузкеПодборМДЛП(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор, ТабДокТСД);
		
		Если ТЧПриЗагрузкеПодбор <> 0 и ТЧПриЗагрузкеПодбор <> 4 Тогда
			ОбработатьИзменениеТЧПодбор_Приемка(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор);
		КонецЕсли;
		
		ВыполнитьДополнительнуюОбработкуДокумента(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
		
		ТЧМарок = ТабДокТСД.Скопировать();
		ТЧМарок.Свернуть("Марка, Номенклатура, ХарактеристикаНоменклатуры, Короб, KM_GTIN","Количество");
		ОбработатьУпрСимволыВТЧМарки(ТЧМарок);
		ДобавитьМаркиВДокументУведомлениеОПриемкеМДЛП(ИсходныйДокумент, ТЧМарок);	
		
		Если ТЧПриЗагрузкеПодбор <> 0 и ТЧПриЗагрузкеПодбор <> 4 Тогда
			УдалениеСтрокТЧТовары(ИсходныйДокумент);	
		КонецЕсли;		
	КонецЕсли;
	
	ИсходныйДокумент.Записать();
	
	Возврат ИсходныйДокумент.Ссылка;                      
	
КонецФункции

&НаСервере
Процедура УдалениеСтрокТЧТовары(ИсходныйДокумент)
	
	Если ИсходныйДокумент.НомераУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 	
	
	ИсходныйДокумент.Записать();
	
	ТЧТовары = ИсходныйДокумент.Товары;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОПриемкеМДЛПТовары.ИдентификаторСтроки КАК ИдентификаторСтрокиТовары
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК УведомлениеОПриемкеМДЛПТовары
	|ГДЕ
	|	УведомлениеОПриемкеМДЛПТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОПриемкеМДЛПНомераУпаковок.ИдентификаторСтроки КАК ИдентификаторСтрокиНомераУпаковок
	|ПОМЕСТИТЬ ВТ_НомераУпаковок
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК УведомлениеОПриемкеМДЛПНомераУпаковок
	|ГДЕ
	|	УведомлениеОПриемкеМДЛПНомераУпаковок.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_НомераУпаковок.ИдентификаторСтрокиНомераУпаковок, 0) КАК ИдентификаторСтрокиНомераУпаковок,
	|	ВТ_Товары.ИдентификаторСтрокиТовары КАК ИдентификаторСтрокиТовары
	|ПОМЕСТИТЬ ВТ_Соединение
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НомераУпаковок КАК ВТ_НомераУпаковок
	|		ПО ВТ_Товары.ИдентификаторСтрокиТовары = ВТ_НомераУпаковок.ИдентификаторСтрокиНомераУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Соединение.ИдентификаторСтрокиНомераУпаковок КАК ИдентификаторСтрокиНомераУпаковок,
	|	ВТ_Соединение.ИдентификаторСтрокиТовары КАК ИдентификаторСтрокиТовары
	|ИЗ
	|	ВТ_Соединение КАК ВТ_Соединение
	|ГДЕ
	|	ВТ_Соединение.ИдентификаторСтрокиНомераУпаковок = 0";
	
	Запрос.УстановитьПараметр("Ссылка", ИсходныйДокумент.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = ТЧТовары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Выборка.ИдентификаторСтрокиТовары));
		
		Для каждого СтрокаНайденная Из НайденныеСтроки Цикл
			ТЧТовары.Удалить(СтрокаНайденная);	
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруСобранныхМарокИУпаковокМДЛП(ТабДокТСД)
	
	//МАРКИ
	МассивМарок = Новый Массив;	
	ТЗСобранныеДанныеМарки = ТабДокТСД.Скопировать();
	ТЗСобранныеДанныеМарки.Свернуть("Марка, Короб, УпаковочныйЛист", "Количество");
	
	Для каждого СтрокаДока Из ТЗСобранныеДанныеМарки Цикл
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтрокаДока.УпаковочныйЛист) И Не ЗначениеЗаполнено(СтрокаДока.Короб) И ЗначениеЗаполнено(СтрокаДока.Марка) Тогда		
			ИзвлеченнаяМарка = УбратьИзМаркиУпрСимволы(УбратьСкобкиТеговМарка(СтрокаДока.Марка, 3));
			МассивМарок.Добавить(ИзвлеченнаяМарка);
		КонецЕсли;		
	КонецЦикла;
	
	//КОРОБА
	МассивКоробов = Новый Массив;	
	ТЗСобранныеДанныеКороба = ТабДокТСД.Скопировать();
	ТЗСобранныеДанныеКороба.Свернуть("Короб", "Количество");
	
	Для каждого СтрокаДока Из ТЗСобранныеДанныеКороба Цикл
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДока.Короб) Тогда
			МассивКоробов.Добавить(УбратьИзМаркиУпрСимволы(СтрокаДока.Короб));
		КонецЕсли;		
	КонецЦикла;
	
	//ПАЛЕТЫ
	МассивПалет = Новый Массив;	
	ТЗСобранныеДанныеПалет = ТабДокТСД.Скопировать();
	ТЗСобранныеДанныеПалет.Свернуть("УпаковочныйЛист", "Количество");
	
	Для каждого СтрокаДока Из ТЗСобранныеДанныеПалет Цикл
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;  
		
		Если ЗначениеЗаполнено(СтрокаДока.УпаковочныйЛист) Тогда
			МассивПалет.Добавить(УбратьИзМаркиУпрСимволы(СтрокаДока.УпаковочныйЛист));
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Новый Структура("Марки, Короба, Палеты", МассивМарок, МассивКоробов, МассивПалет);
	
КонецФункции

&НаСервере
Функция УбратьИзМаркиУпрСимволы(ЦРПТМаркаСТСД)
	
	Если Сред(ЦРПТМаркаСТСД, 1, 2) = "01" И Сред(ЦРПТМаркаСТСД, 17, 2) = "21" Тогда
		
		ЦРПТМаркаБезУпрСимволов = Сред(ЦРПТМаркаСТСД, 3, 14) + Сред(ЦРПТМаркаСТСД, 19, 13);		
		
	ИначеЕсли Сред(ЦРПТМаркаСТСД, 1, 2) = "00" И (СтрДлина(ЦРПТМаркаСТСД) = 20 Или Найти(ЦРПТМаркаСТСД, "/") = 21) Тогда
		
		ЦРПТМаркаБезУпрСимволов = Сред(ЦРПТМаркаСТСД, 3, 18);
		
	ИначеЕсли Сред(ЦРПТМаркаСТСД, 1, 4) = "(00)" Тогда
		
		ЦРПТМаркаБезУпрСимволов = Сред(ЦРПТМаркаСТСД, 5, 18);
		
	Иначе
		
		ЦРПТМаркаБезУпрСимволов = ЦРПТМаркаСТСД;	
		
	КонецЕсли;
	
	Возврат ЦРПТМаркаБезУпрСимволов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьШапкуДокументаМДЛП(Шаблон, ИсходныйДокумент, ЭтоНовыйДокумент)
	
	Если ЭтоНовыйДокумент Тогда
		Если Шаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП" Тогда
			Если Не ЗначениеЗаполнено(ИсходныйДокумент.СхемаАкцептования) Тогда
				ИсходныйДокумент.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок;
			КонецЕсли;	
		КонецЕсли;
		
		Если Шаблон.ВидДокумента = "УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП" Тогда
			Если Не ЗначениеЗаполнено(ИсходныйДокумент.Операция) Тогда
				ИсходныйДокумент.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование;
			КонецЕсли;
			
			Если ИсходныйДокумент.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование Тогда
				ИсходныйДокумент.ВложеныПотребительскиеУпаковки = Истина;
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоУпаковок(ИсходныйДокумент)
	
	ДеревоУпаковок = Документы.УведомлениеОПриемкеМДЛП.ВходящееДеревоУпаковок(ИсходныйДокумент.Ссылка);
	
	ДеревоУпаковок.Колонки.Добавить("ВсяУпаковкаПроверена", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("ИдетПроверкаДаннойУпаковки", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("ИндексКартинкиСтатусПроверки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("ИндексКартинкиШтрихкод", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхВНаличии", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхВсего", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхОтложено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхОтсутствует", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("НеСодержитсяВДанныхДокумента", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("НеСоответствуетОтбору", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("НомерСтикераОтложено", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ДеревоУпаковок.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ДеревоУпаковок.Колонки.Добавить("ПредставлениеПроверкиПодчиненных", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ДеревоУпаковок.Колонки.Добавить("ПредставлениеСодержимоеУпаковки", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	Возврат ДеревоУпаковок;
	
КонецФункции

&НаСервере
Функция ПолучитьGTINПоНоменклатуре(Номенклатура)
	
	GTIN = "";
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Штрихкод<>""""";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Штрихкод = Выборка.Штрихкод;
		
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			Если СтрДлина(Штрихкод) < 14 Тогда
				GTIN = ДобавитьЛидирующиеНули(Штрихкод);
			Иначе
				GTIN = Лев(Штрихкод,14);	
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;	
	
	Возврат GTIN;
	
КонецФункции

&НаСервере
Функция ДобавитьЛидирующиеНули(Строка)
	
	СтрокаCНулями = Строка;
	
	Пока СтрДлина(СтрокаCНулями) < 14 Цикл
		СтрокаCНулями = "0" + СтрокаCНулями;	
	КонецЦикла;	
	
	Возврат СтрокаCНулями; 
	
КонецФункции

&НаСервере
Процедура ОбработатьНастройкуТЧПриЗагрузкеПодборМДЛП(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор, ТабДокТСД)
	
	Если ТЧПриЗагрузкеПодбор = 0 Тогда //не изменяем, только марки и упаковки чистим
		
		Попытка ИсходныйДокумент.НомераУпаковок.Очистить(); Исключение КонецПопытки;
		Попытка ИсходныйДокумент.ТранспортныеУпаковки.Очистить(); Исключение КонецПопытки;		
		Попытка ИсходныйДокумент.СоставТранспортныхУпаковок.Очистить(); Исключение КонецПопытки;
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 2 Тогда //замена
		
		ИсходныйДокумент.НомераУпаковок.Очистить();
		ИсходныйДокумент.ТранспортныеУпаковки.Очистить();
		ИсходныйДокумент[ИмяТЧПодбор].Очистить();
		Попытка ИсходныйДокумент.ТранспортныеУпаковки.Очистить(); Исключение КонецПопытки;		
		Попытка ИсходныйДокумент.СоставТранспортныхУпаковок.Очистить(); Исключение КонецПопытки;
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 3 Тогда //изменение
		
		ИсходныйДокумент.НомераУпаковок.Очистить();
		Попытка ИсходныйДокумент.ТранспортныеУпаковки.Очистить(); Исключение КонецПопытки;		
		Попытка ИсходныйДокумент.СоставТранспортныхУпаковок.Очистить(); Исключение КонецПопытки;
		
		Для каждого Стр Из ИсходныйДокумент[ИмяТЧПодбор] Цикл
			
			Попытка Стр.Количество = 0; Исключение КонецПопытки;
			Попытка Стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
			
		КонецЦикла;
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 5 Тогда  //изменение только отсканированные
		
		ТЗСобранныеДанныеПодбор = ТабДокТСД.Скопировать();
		ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры");
		
		МассивИдентификаторовНаУдаление = Новый Массив;
		
		Для каждого Стр Из ТЗСобранныеДанныеПодбор Цикл
			
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
			Стр.Номенклатура, Стр.ХарактеристикаНоменклатуры));
			
			Если СтрокиПоиска.Количество() <> 0 Тогда
				Для каждого Строка Из СтрокиПоиска Цикл
					Строка.КоличествоУпаковок = 0;
					Строка.Количество = 0;
					МассивИдентификаторовНаУдаление.Добавить(Строка.ИдентификаторСтроки);					
				КонецЦикла;	
			КонецЕсли;
			
		КонецЦикла;	
		
		Для каждого ИдентификаторУдаления Из МассивИдентификаторовНаУдаление Цикл
			СтруктураДляПоиска = Новый Структура("ИдентификаторСтроки", ИдентификаторУдаления); 
			
			ТабличнаяЧастьДок = ИсходныйДокумент.НомераУпаковок; 
			МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
			
			Для каждого Строка Из МассивПустыхСтрок Цикл 
				ТабличнаяЧастьДок.Удалить(Строка); 
			КонецЦикла;			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеТЧПодбор_Приемка(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор)
	
	ТЗСобранныеДанныеПодбор = ТабДокТСД.Скопировать();
	ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, KM_GTIN, Короб", "Количество");
	
	Для каждого Стр Из ТЗСобранныеДанныеПодбор Цикл
		
		Если Стр.Количество = 0 Или Не ЗначениеЗаполнено(Стр.Номенклатура) Или ЗначениеЗаполнено(Стр.Короб) Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
		Стр.Номенклатура, Стр.ХарактеристикаНоменклатуры));
		
		Если СтрокиПоиска.Количество() <> 0 Тогда			
			СтрокиПоиска[0].КоличествоУпаковок = СтрокиПоиска[0].КоличествоУпаковок + Стр.Количество;
			СтрокиПоиска[0].Количество = СтрокиПоиска[0].Количество + Стр.Количество;
			СтрокаТабТовары = СтрокиПоиска[0];
			
		Иначе			
			НовСтрТовары = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрТовары, Стр);
			НовСтрТовары.КоличествоУпаковок  = Стр.Количество;
			НовСтрТовары.Характеристика      = Стр.ХарактеристикаНоменклатуры;
			НовСтрТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			СтрокаТабТовары = НовСтрТовары;
			
			л_Номенклатура 			= НовСтрТовары.Номенклатура;
			п_КэшированныеЗначения  = Неопределено;
			п_ТекущаяСтрока			= НовСтрТовары;
			
			Модуль_УАС_МДЛП = ОбщийМодуль("УАС_МДЛП");
			
			л_GTINы = Модуль_УАС_МДЛП.ПрочитатьGTINНоменклатуры(л_Номенклатура,Истина)[л_Номенклатура];
			
			Если ТипЗнч(л_GTINы) = Тип("СписокЗначений") И л_GTINы.Количество() = 1 Тогда
				НовСтрТовары.GTIN = л_GTINы;
			Иначе
				НовСтрТовары.GTIN = ?(СтрДлина(Стр.KM_GTIN) = 13, "0" + Стр.KM_GTIN, Стр.KM_GTIN);
			КонецЕсли;			
		КонецЕсли;
		
		МетаданныеРеквизитыТЧ = ИсходныйДокумент.Метаданные().ТабличныеЧасти[ИмяТЧПодбор].Реквизиты;
		
		Если МетаданныеРеквизитыТЧ.Найти("Сумма") <> Неопределено
			И МетаданныеРеквизитыТЧ.Найти("СуммаНДС") <> Неопределено
			И МетаданныеРеквизитыТЧ.Найти("СуммаСНДС") <> Неопределено Тогда
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоЕдиниц"   , );
			ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоУпаковок" , Ложь);
			ПараметрыЗаполнения.Вставить("ОбработатьУпаковки"            );
			
			Попытка ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабТовары, ПараметрыЗаполнения, Неопределено); Исключение КонецПопытки;			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМаркиВДокументУведомлениеОПриемкеМДЛП(ИсходныйДокумент, ТЧМарок)
	
	ТЧДокТовары = ИсходныйДокумент.Товары;
	
	Для каждого СтрТЧ Из ТЧМарок Цикл
		
		Если СтрТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтрТЧ.Короб) Тогда
			РезультатыПоиска = ТЧДокТовары.НайтиСтроки(
			Новый Структура("Номенклатура, Характеристика", 
			СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры));
			РезПоиска = ИсходныйДокумент.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКИЗ", СтрТЧ.Марка));
			
			Если РезультатыПоиска.Количество() > 0 и СтрДлина(СтрТЧ.Марка) > 18 И РезПоиска.Количество() = 0 Тогда				
				НоваяСтрокаТЧ = ИсходныйДокумент.НомераУпаковок.Добавить();
				НоваяСтрокаТЧ.НомерКИЗ = СтрТЧ.Марка;
				НоваяСтрокаТЧ.ИдентификаторСтроки =	РезультатыПоиска[0].ИдентификаторСтроки;
				Попытка НоваяСтрокаТЧ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче; Исключение КонецПопытки;				
			КонецЕсли;
			
			Если СтрДлина(СтрТЧ.Марка) = 18 Тогда
				ЗаполнениеТЧТранспортныеУпаковкиСоставТранспортныхУпаковокПоПриемке(ИсходныйДокумент, СтрТЧ);				
			КонецЕсли;			
		КонецЕсли; 
		
	КонецЦикла;
	
	ТЧКороба = ТЧМарок.Скопировать();
	ТЧКороба.Свернуть("Короб, KM_GTIN, Номенклатура", "Количество");
	
	Для каждого СтрПоКоробам Из ТЧКороба Цикл
		Если ЗначениеЗаполнено(СтрПоКоробам.Короб) Тогда
			Если СтрПоКоробам.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнениеТЧТранспортныеУпаковкиСоставТранспортныхУпаковокПоПриемке(ИсходныйДокумент, СтрПоКоробам, Истина);			
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеТЧТранспортныеУпаковкиСоставТранспортныхУпаковокПоПриемке(ИсходныйДокумент, СтрокаСУпаковкой, ЭтоКороб = Ложь)
	
	НоваяСтрокаТЧ = ИсходныйДокумент.ТранспортныеУпаковки.Добавить();
	НоваяСтрокаТЧ.НомерУпаковки = ?(ЭтоКороб, СтрокаСУпаковкой.Короб, СтрокаСУпаковкой.Марка);
	Попытка НоваяСтрокаТЧ.ИдентификаторСтроки =	Новый УникальныйИдентификатор; Исключение КонецПопытки;
	Попытка НоваяСтрокаТЧ.ИдентификаторГрупповойУпаковки =	Новый УникальныйИдентификатор; Исключение КонецПопытки;
	Попытка НоваяСтрокаТЧ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче; Исключение КонецПопытки;
	
	Если ЗначениеЗаполнено(СтрокаСУпаковкой.Номенклатура) Тогда
		НоваяСтрокаСоставТУ = ИсходныйДокумент.СоставТранспортныхУпаковок.Добавить();
		НоваяСтрокаСоставТУ.Номенклатура = СтрокаСУпаковкой.Номенклатура;
		НоваяСтрокаСоставТУ.Количество = СтрокаСУпаковкой.Количество;
		Попытка НоваяСтрокаСоставТУ.GTIN = СтрокаСУпаковкой.KM_GTIN; Исключение КонецПопытки;
		Попытка НоваяСтрокаСоставТУ.ИдентификаторСтроки = НоваяСтрокаТЧ.ИдентификаторСтроки; Исключение КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиДереваУпаковок(СтрокиДерева, СтруктураСобранныхМарокИУпаковок, ВерхнийУровеньПринят = Ложь)
	
	Для каждого Строка Из СтрокиДерева Цикл
		
		УстановитьПараметр(Строка, "НомерУпаковки", "");
		УстановитьПараметр(Строка, "СостояниеПодтверждения", Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
		УстановитьПараметр(Строка, "СтатусПроверки", Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась);
		УстановитьПараметр(Строка, "ТипУпаковки", Перечисления.ТипыУпаковокМДЛП.ПустаяСсылка());
		
		ПринятьНижестоящиеУпаковки = Ложь;
		
		Если Строка.НомерУпаковки <> Неопределено Тогда
			Если СтруктураСобранныхМарокИУпаковок.Марки.Найти(Строка.НомерУпаковки) <> Неопределено 
				Или СтруктураСобранныхМарокИУпаковок.Короба.Найти(Строка.НомерУпаковки) <> Неопределено
				Или СтруктураСобранныхМарокИУпаковок.Палеты.Найти(Строка.НомерУпаковки) <> Неопределено
				Или ВерхнийУровеньПринят Тогда
				
				Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии;
				ПринятьНижестоящиеУпаковки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Строки.Количество() <> 0 Тогда			
			ОбработатьСтрокиДереваУпаковок(Строка.Строки, СтруктураСобранныхМарокИУпаковок, ПринятьНижестоящиеУпаковки);			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметр(Строка, ИмяПараметра, ЗначениеДляУстановки)
	
	Если Строка[ИмяПараметра] = Неопределено Тогда
		Строка[ИмяПараметра] = ЗначениеДляУстановки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеПроверкиИПодбора(ИсходныйДокумент, ДеревоУпаковок)
	
	ДанныеПроверкиИПодбора = Новый Структура("ДеревоМаркированнойПродукции, НомерПроверяемойУпаковки, СледующийСтикерОтложено", ДеревоУпаковок, "", 1);
	
	ИсходныйДокумент.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеПроверкиИПодбора);
	ИсходныйДокумент.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораМДЛП.Выполняется;
	ИсходныйДокумент.Записать();
	
КонецПроцедуры

//ОТГРУЗКА И ВЫБЫТИЕ
&НаСервере
Функция ДатаМобайл_МДЛП_ОбработатьВидДокументаУведомлениеОбОтгрузкеМДЛП(ИсходныйДокумент, Шаблон, ТабДокТСД, ЭтоНовыйДокумент)
	
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор 		= Шаблон.ИмяТабличнойЧастиПодбор;
	
	ЗаполнитьШапкуДокументаМДЛП(Шаблон, ИсходныйДокумент, ЭтоНовыйДокумент);
	
	ОбработатьНастройкуТЧПриЗагрузкеПодборМДЛП(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор, ТабДокТСД);
	
	Если ТЧПриЗагрузкеПодбор <> 0 И ТЧПриЗагрузкеПодбор <> 4 Тогда
		ОбработатьИзменениеТЧПодбор_Отгрузка(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор);
	КонецЕсли;
	
	ВыполнитьДополнительнуюОбработкуДокумента(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);		
	
	ИсходныйДокумент.Записать();
	
	Возврат ИсходныйДокумент.Ссылка;  
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеТЧПодбор_Отгрузка(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор)
	
	ТЗСобранныеДанныеПодбор = ТабДокТСД.Скопировать();
	ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,Короб,Марка", "Количество");
	
	Для каждого СтрПодбор Из ТЗСобранныеДанныеПодбор Цикл
		
		Если СтрПодбор.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрПодбор.Номенклатура) Тогда			
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия", СтрПодбор.Номенклатура, СтрПодбор.ХарактеристикаНоменклатуры, СтрПодбор.СерияСсылка));
			
			Если СтрокиПоиска.Количество() = 0 Тогда
				СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрПодбор.Номенклатура, СтрПодбор.ХарактеристикаНоменклатуры));
			КонецЕсли;
			
			Если СтрокиПоиска.Количество() = 0 Тогда
				СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура", СтрПодбор.Номенклатура));
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Номенклатура"       , Справочники.Номенклатура.ПустаяСсылка());
			СтруктураСтроки.Вставить("Характеристика"     , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
			СтруктураСтроки.Вставить("Серия"              , Справочники.СерииНоменклатуры.ПустаяСсылка());
			СтруктураСтроки.Вставить("Упаковка"           , Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			СтруктураСтроки.Вставить("GTIN"               , "");
			СтруктураСтроки.Вставить("Цена"               , 0);
			СтруктураСтроки.Вставить("СуммаНДС"           , 0);
			СтруктураСтроки.Вставить("СтатусУказанияСерий", 0);
			СтруктураСтроки.Вставить("ИдентификаторСтроки", "");
			СтруктураСтроки.Вставить("Марка"              , УбратьИзМаркиУпрСимволы(СтрПодбор.Марка));
			СтруктураСтроки.Вставить("Короб"              , УбратьИзМаркиУпрСимволы(СтрПодбор.Короб));
			СтруктураСтроки.Вставить("Количество"         , СтрПодбор.Количество);
			
			Если СтрокиПоиска.Количество() = 0 Тогда
				СтруктураСтроки.Номенклатура   = СтрПодбор.Номенклатура;
				СтруктураСтроки.Характеристика = СтрПодбор.ХарактеристикаНоменклатуры;
				СтруктураСтроки.Серия          = СтрПодбор.СерияСсылка;
				СтруктураСтроки.Упаковка       = СтрПодбор.ЕдиницаИзмерения;
				
				Если ЗначениеЗаполнено(СтруктураСтроки.Марка) Тогда
					СтруктураСтроки.GTIN = Лев(СтруктураСтроки.Марка, 14);
				Иначе
					СтруктураСтроки.GTIN = ПолучитьGTINПоНоменклатуре(СтрПодбор.Номенклатура);
				КонецЕсли;
				
				СтруктураСтроки.Цена                = 0;
				СтруктураСтроки.СтатусУказанияСерий = 0;
				СтруктураСтроки.ИдентификаторСтроки = Новый УникальныйИдентификатор; 
				
			Иначе
				СтруктураСтроки.Номенклатура        = СтрокиПоиска[0].Номенклатура;
				СтруктураСтроки.Характеристика      = СтрокиПоиска[0].Характеристика;
				СтруктураСтроки.Серия               = СтрокиПоиска[0].Серия;
				СтруктураСтроки.Упаковка            = СтрокиПоиска[0].Упаковка;
				СтруктураСтроки.GTIN                = СтрокиПоиска[0].GTIN;
				СтруктураСтроки.Цена                = СтрокиПоиска[0].Цена;
				СтруктураСтроки.СуммаНДС            = СтрокиПоиска[0].СуммаНДС;
				СтруктураСтроки.СтатусУказанияСерий = СтрокиПоиска[0].СтатусУказанияСерий; 
				СтруктураСтроки.ИдентификаторСтроки = СтрокиПоиска[0].ИдентификаторСтроки; 
			КонецЕсли;			
			
			Если СтруктураСтроки.Короб <> "" Тогда
				ЗагрузитьДанныеУпаковки(ИсходныйДокумент, ИмяТЧПодбор, СтруктураСтроки);
			Иначе
				ЗагрузитьДанныеМарки(ИсходныйДокумент, ИмяТЧПодбор, СтруктураСтроки);			
			КонецЕсли;
			
		Иначе
			//Попробуем загрузить упаковки
			ТекущаяУпаковка = "";
			
			Если ЗначениеЗаполнено(СтрПодбор.Марка) Тогда
				ТекущаяУпаковка = УбратьИзМаркиУпрСимволы(СтрПодбор.Марка);	
			ИначеЕсли ЗначениеЗаполнено(СтрПодбор.Короб) Тогда
				ТекущаяУпаковка = УбратьИзМаркиУпрСимволы(СтрПодбор.Короб);	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
				СтруктураСтроки.Вставить("Короб", ТекущаяУпаковка);	
				
				ЗагрузитьДанныеУпаковки(ИсходныйДокумент, ИмяТЧПодбор, СтруктураСтроки);
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеУпаковки(ИсходныйДокумент, ИмяТЧПодбор,СтруктураСтроки)
	
	//УПАКОВКИ
	СтрокиПоиска = ИсходныйДокумент.ТранспортныеУпаковки.НайтиСтроки(Новый Структура("НомерУпаковки", СтруктураСтроки.Короб)); 
	
	Если СтрокиПоиска.Количество() = 0 Тогда
		СтрокаТЧ = ИсходныйДокумент.ТранспортныеУпаковки.Добавить();
		СтрокаТЧ.НомерУпаковки = СтруктураСтроки.Короб;
		СтрокаТЧ.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	Иначе
		СтрокаТЧ = СтрокиПоиска[0];						
	КонецЕсли;
	
	Попытка СтрокаТЧ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче; Исключение КонецПопытки;			
	
	Если ЗначениеЗаполнено(СтруктураСтроки.Номенклатура) Тогда
		
		//ТОВАРЫ УПАКОВОК
		СтрокиПоискаТоварыУпаковок = ИсходныйДокумент.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки,Номенклатура,Характеристика,Серия", СтрокаТЧ.ИдентификаторСтроки,СтруктураСтроки.Номенклатура, СтруктураСтроки.Характеристика, СтруктураСтроки.Серия)); 
		
		Если СтрокиПоискаТоварыУпаковок.Количество() = 0 Тогда
			СтрокаТЧТоварыУпаковок = ИсходныйДокумент.СоставТранспортныхУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧТоварыУпаковок,СтруктураСтроки);
			СтрокаТЧТоварыУпаковок.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
		Иначе
			СтрокаТЧТоварыУпаковок = СтрокиПоискаТоварыУпаковок[0];						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеМарки(ИсходныйДокумент, ИмяТЧПодбор,СтруктураСтроки)
	
	//ТОВАРЫ
	СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтруктураСтроки.ИдентификаторСтроки)); 
	
	Если СтрокиПоиска.Количество() = 0 Тогда
		СтрокаТЧ = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтруктураСтроки);
	Иначе
		СтрокаТЧ = СтрокиПоиска[0];						
	КонецЕсли;
	
	СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтруктураСтроки.Количество;
	СтрокаТЧ.Количество = СтрокаТЧ.КоличествоУпаковок;
	
	Попытка СтрокаТЧ.Сумма =  СтрокаТЧ.Цена * СтрокаТЧ.КоличествоУпаковок; Исключение КонецПопытки;			
	
	//КИЗ
	СтрокиПоискаКИЗ = ИсходныйДокумент.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКИЗ", СтруктураСтроки.Марка));
	
	Если СтрокиПоискаКИЗ.Количество() = 0 Тогда
		СтрокаТЧКИЗ = ИсходныйДокумент.НомераУпаковок.Добавить();
		СтрокаТЧКИЗ.НомерКИЗ = СтруктураСтроки.Марка;
		СтрокаТЧКИЗ.ИдентификаторСтроки = СтруктураСтроки.ИдентификаторСтроки;
	Иначе
		СтрокаТЧКИЗ = СтрокиПоискаКИЗ[0];						
	КонецЕсли;
	
	Попытка СтрокаТЧКИЗ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче; Исключение КонецПопытки;	
	
КонецПроцедуры

//АГРЕГИРОВАНИЕ
&НаСервере
Функция ДатаМобайл_МДЛП_ОбработатьВидДокументаУведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП(ИсходныйДокумент, Шаблон, ТабДокТСД, ЭтоНовыйДокумент, ОтдельнаяТЧУпаковок)
	
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор 		= Шаблон.ИмяТабличнойЧастиПодбор;
	
	ЗаполнитьШапкуДокументаМДЛП(Шаблон, ИсходныйДокумент, ЭтоНовыйДокумент);
	
	ИсходныйДокумент[ИмяТЧПодбор].Очистить();
	ИсходныйДокумент.НомераУпаковок.Очистить();
	ИсходныйДокумент.ТранспортныеУпаковки.Очистить();
	ИсходныйДокумент.ГруппировочныеУпаковки.Очистить();
	
	Если ИсходныйДокумент.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование Тогда		
		ЗаполнитьТаблицуМарокУпаковокАгрегации(ИсходныйДокумент, ТабДокТСД);		
		ИсходныйДокумент.Записать();
		
		Возврат ИсходныйДокумент.Ссылка; 
		
	ИначеЕсли ИсходныйДокумент.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование Тогда		
		МассивУпаковок = Новый Массив;
		ТЧМарок = ТабДокТСД.Скопировать();
		ТЧМарок.Свернуть("Марка","Количество");
		
		Для каждого СтрокаМарка Из ТЧМарок Цикл
			Если СтрокаМарка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Упаковка = УбратьИзМаркиУпрСимволы(СтрокаМарка.Марка);
			
			Если СтрДлина(Упаковка) = 18 Тогда
				МассивУпаковок.Добавить(Упаковка);		
			КонецЕсли;	
		КонецЦикла;	
		
		ТЧУпаковок = ТабДокТСД.Скопировать();
		ТЧУпаковок.Свернуть("УпаковочныйЛист","Количество");
		
		Для каждого СтрокаУпаковки Из ТЧУпаковок Цикл
			Если СтрокаУпаковки.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Упаковка = УбратьИзМаркиУпрСимволы(СтрокаУпаковки.УпаковочныйЛист); 
			
			Если СтрДлина(Упаковка) = 18 Тогда
				МассивУпаковок.Добавить(Упаковка);		
			КонецЕсли;	
		КонецЦикла;					
		
		//Если в документе есть ТЧ упаковок, то запишем в нее
		Если ОтдельнаяТЧУпаковок Тогда 
			Для каждого УпаковкаРасформирования Из МассивУпаковок Цикл
				СтрокаТЧУпаковок = ИсходныйДокумент.ТранспортныеУпаковки.Добавить();
				СтрокаТЧУпаковок.НомерУпаковки = УпаковкаРасформирования;
			КонецЦикла;
			
			//Если в документе нет ТЧ упаковок то для каждой упаковки создаем отдельный документ, в АРМ пока только один попадет, остальные просто создадим
		Иначе			
			n = 1;
			Для каждого УпаковкаРасформирования Из МассивУпаковок Цикл
				Если n = 1 Тогда
					ИсходныйДокумент.НомерУпаковки = УпаковкаРасформирования;	
				Иначе
					СоздатьДокументРасформирования(Шаблон,УпаковкаРасформирования);
				КонецЕсли;
				
				n = n + 1;
			КонецЦикла;			
		КонецЕсли;
		
		ИсходныйДокумент.Записать();
		
		Возврат ИсходныйДокумент.Ссылка;		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуМарокУпаковокАгрегации(ИсходныйДокумент, ТабДокТСД)
	
	ТЗСобранныеДанные = ТабДокТСД.Скопировать();
	ТЗСобранныеДанные.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Марка, УпаковочныйЛист", "Количество");
	
	Для каждого СтрокаРезультата Из ТЗСобранныеДанные Цикл
		
		ГруппировочнаяУпаковка = УбратьИзМаркиУпрСимволы(СтрокаРезультата.УпаковочныйЛист); 
		КИЗ = УбратьИзМаркиУпрСимволы(СтрокаРезультата.Марка);		
		
		РезультатПоискаГруппировочнаяУпаковка = ИсходныйДокумент.ГруппировочныеУпаковки.НайтиСтроки(Новый Структура("НомерУпаковки", ГруппировочнаяУпаковка));
		
		Если РезультатПоискаГруппировочнаяУпаковка.Количество() = 0 Тогда
			НовСтрокаГруппировочнаяУпаковка = ИсходныйДокумент.ГруппировочныеУпаковки.Добавить();
			НовСтрокаГруппировочнаяУпаковка.НомерУпаковки       = ГруппировочнаяУпаковка;
			ТекущийИдентификаторГруппировочнаяУпаковка          = Новый УникальныйИдентификатор;
			НовСтрокаГруппировочнаяУпаковка.ИдентификаторСтроки = ТекущийИдентификаторГруппировочнаяУпаковка;
		Иначе
			ТекущийИдентификаторГруппировочнаяУпаковка = РезультатПоискаГруппировочнаяУпаковка[0].ИдентификаторСтроки;		
		КонецЕсли;
		
		РезультатПоискаТовары = ИсходныйДокумент.Товары.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ИдентификаторГрупповойУпаковки,GTIN", СтрокаРезультата.Номенклатура, СтрокаРезультата.ХарактеристикаНоменклатуры, ТекущийИдентификаторГруппировочнаяУпаковка, Сред(КИЗ, 1, 14)));	
		
		Если РезультатПоискаТовары.Количество() = 0 Тогда			
			НовСтрокаТовары = ИсходныйДокумент.Товары.Добавить();
			НовСтрокаТовары.Номенклатура   = СтрокаРезультата.Номенклатура;
			НовСтрокаТовары.Характеристика = СтрокаРезультата.ХарактеристикаНоменклатуры;
			НовСтрокаТовары.GTIN           = Сред(КИЗ,1,14);
			
			ТекущийИдентификаторТовары = Новый УникальныйИдентификатор;
			НовСтрокаТовары.ИдентификаторСтроки = ТекущийИдентификаторТовары;
			НовСтрокаТовары.ИдентификаторГрупповойУпаковки = ТекущийИдентификаторГруппировочнаяУпаковка;
		Иначе
			НовСтрокаТовары = РезультатПоискаТовары[0];
			ТекущийИдентификаторТовары = НовСтрокаТовары.ИдентификаторСтроки;	
		КонецЕсли;
		
		НовСтрокаТовары.Количество = НовСтрокаТовары.Количество+1;
		НовСтрокаТовары.КоличествоУпаковок = НовСтрокаТовары.КоличествоУпаковок+1;
		
		РезультатПоискаМарки = ИсходныйДокумент.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКИЗ", КИЗ));		
		
		Если РезультатПоискаМарки.Количество() = 0 Тогда	
			НовСтрока = ИсходныйДокумент.НомераУпаковок.Добавить();
			НовСтрока.НомерКИЗ = УбратьИзМаркиУпрСимволы(СтрокаРезультата.Марка);
			НовСтрока.ИдентификаторСтроки = ТекущийИдентификаторТовары;	
		КонецЕсли;
		
	КонецЦикла;
	
	ИсходныйДокумент.Записать();	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументРасформирования(Шаблон, УпаковкаРасформирования)
	
	ИсходныйДокумент = Документы[Шаблон.ВидДокумента].СоздатьДокумент();
	ЭтоНовыйДокумент = Истина;
	ИсходныйДокумент.Дата = ТекущаяДата();
	ИсходныйДокумент.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование;
	
	ЗаполнитьШапкуДокументаМДЛП(Шаблон, ИсходныйДокумент, ЭтоНовыйДокумент);		
	
	ИсходныйДокумент.НомерУпаковки = УпаковкаРасформирования;
	
	ИсходныйДокумент.Записать();	
	
КонецПроцедуры

//ОБШИЕ ФУНКЦИИ ДОКУМЕНТОВ
&НаСервере
Процедура ВыполнитьДополнительнуюОбработкуДокумента(ИсходныйДокумент,ИмяТЧПодбор,ТЧПриЗагрузкеПодбор)
	
	Если ТЧПриЗагрузкеПодбор = 3 Тогда	
		СтруктураДляПоиска = Новый Структура("Количество", 0); 
		ТабличнаяЧастьДок = ИсходныйДокумент[ИмяТЧПодбор]; 
		МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
		
		Для каждого Строка Из МассивПустыхСтрок Цикл 
			ТабличнаяЧастьДок.Удалить(Строка); 
		КонецЦикла; 	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУпрСимволыВТЧМарки(ТЧМарок)
	
	Для каждого Стр Из ТЧМарок Цикл
		
		Стр.Марка = УбратьИзМаркиУпрСимволы(Стр.Марка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтоДокументМДЛП(ШаблонВидДокумента)
	
	МассивВидовДокументовМДЛП = Новый Массив;
	МассивВидовДокументовМДЛП.Добавить("УведомлениеОПриемкеМДЛП");
	МассивВидовДокументовМДЛП.Добавить("УведомлениеОбОтгрузкеМДЛП");
	МассивВидовДокументовМДЛП.Добавить("УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП");
	МассивВидовДокументовМДЛП.Добавить("УведомлениеОбОприходованииМДЛП");
	МассивВидовДокументовМДЛП.Добавить("УведомлениеОВыбытииМДЛП");
	
	Если МассивВидовДокументовМДЛП.Найти(ШаблонВидДокумента) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПолучитьСтрокиДокументаМДЛП(Шаблон, ТекстФайлаДокумент, СсылкаНаДок)
		
	//МАРКИ
	ЗапросТоваров = Новый Запрос;
	ЗапросТоваров.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК ВНаличииОстаток,
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыНаСкладахОстатки
	|ИЗ
	|  РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОПриемкеМДЛПТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	УведомлениеОПриемкеМДЛПТовары.Серия КАК Серия,
	|	УведомлениеОПриемкеМДЛПТовары.GTIN КАК GTIN,
	|	УведомлениеОПриемкеМДЛПТовары.НомерСерии КАК НомерСерии,
	|	УведомлениеОПриемкеМДЛПТовары.Цена КАК Цена,
	|	"""" КАК Короб,
	|	УведомлениеОПриемкеМДЛПТовары.КоличествоУпаковок КАК Количество,
	|	УведомлениеОПриемкеМДЛПТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток,0) КАК Остаток
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК УведомлениеОПриемкеМДЛПТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
	|		ПО УведомлениеОПриемкеМДЛПТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И (ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ТоварыНаСкладахОстатки.Характеристика)
	|ГДЕ
	|	УведомлениеОПриемкеМДЛПТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОПриемкеМДЛПНомераУпаковок.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	УведомлениеОПриемкеМДЛПНомераУпаковок.НомерКИЗ КАК НомерКИЗ,
	|	УведомлениеОПриемкеМДЛПНомераУпаковок.НомерРодительскойУпаковки КАК НомерКороба
	|ПОМЕСТИТЬ Марки
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК УведомлениеОПриемкеМДЛПНомераУпаковок
	|ГДЕ
	|	УведомлениеОПриемкеМДЛПНомераУпаковок.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОПриемкеМДЛПТранспортныеУпаковки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	УведомлениеОПриемкеМДЛПТранспортныеУпаковки.НомерУпаковки КАК НомерУпаковки
	|ПОМЕСТИТЬ Упаковки
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК УведомлениеОПриемкеМДЛПТранспортныеУпаковки
	|ГДЕ
	|	УведомлениеОПриемкеМДЛПТранспортныеУпаковки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОПриемкеМДЛПТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	УведомлениеОПриемкеМДЛПТовары.Серия КАК Серия,
	|	УведомлениеОПриемкеМДЛПТовары.GTIN КАК GTIN,
	|	УведомлениеОПриемкеМДЛПТовары.НомерСерии КАК НомерСерии,
	|	УведомлениеОПриемкеМДЛПТовары.Цена КАК Цена,
	|	УведомлениеОПриемкеМДЛПТовары.Количество КАК Количество,
	|	УведомлениеОПриемкеМДЛПТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	УведомлениеОПриемкеМДЛПТовары.ИдентификаторСтрокиУпаковки КАК ИдентификаторСтрокиУпаковки,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток,0) КАК Остаток
	|ПОМЕСТИТЬ ТоварыУпаковок
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК УведомлениеОПриемкеМДЛПТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
	|		ПО УведомлениеОПриемкеМДЛПТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И (ЕСТЬNULL(УведомлениеОПриемкеМДЛПТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ТоварыНаСкладахОстатки.Характеристика)
	|ГДЕ
	|	УведомлениеОПриемкеМДЛПТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	ЕСТЬNULL(Товары.GTIN, """") КАК GTIN,
	|	ЕСТЬNULL(Товары.НомерСерии, """") КАК НомерСерии,
	|	Товары.Цена КАК Цена,
	|	Товары.Количество КАК Количество,
	|	ЕСТЬNULL(Товары.Остаток, 0) КАК Остаток,
	|	ЕСТЬNULL(Марки.НомерКИЗ, """") КАК Марка,
	|	"""" КАК Короб,
	|	"""" КАК Палета
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Марки КАК Марки
	|		ПО Товары.ИдентификаторСтроки = Марки.ИдентификаторСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	ЕСТЬNULL(Товары.GTIN, """"),
	|	ЕСТЬNULL(Товары.НомерСерии, """"),
	|	Товары.Цена,
	|	Товары.Количество,
	|	ЕСТЬNULL(Товары.Остаток, 0),
	|	ЕСТЬNULL(Марки.НомерКИЗ, """"),
	|	ВЫБОР КОГДА ЕСТЬNULL(Марки.НомерКороба, """") ="""" ТОГДА ЕСТЬNULL(Упаковки.НомерУпаковки, """") ИНАЧЕ ЕСТЬNULL(Марки.НомерКороба, """") КОНЕЦ,
	|	ВЫБОР КОГДА ЕСТЬNULL(Марки.НомерКороба, """") ="""" ТОГДА """" ИНАЧЕ ЕСТЬNULL(Упаковки.НомерУпаковки, """") КОНЕЦ
	|ИЗ
	|	ТоварыУпаковок КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Марки КАК Марки
	|		ПО Товары.ИдентификаторСтрокиУпаковки = Марки.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Упаковки КАК Упаковки
	|		ПО Товары.ИдентификаторСтроки = Упаковки.ИдентификаторСтроки
	|		И  Упаковки.НомерУпаковки<>ЕСТЬNULL(Марки.НомерКороба,"""")
	|ИТОГИ
	|	СРЕДНЕЕ(Цена),
	|	СРЕДНЕЕ(Количество),
	|	СРЕДНЕЕ(Остаток)
	|ПО
	|	Номенклатура,
	|	Характеристика";
	
	ЗапросТоваров.УстановитьПараметр("Ссылка", СсылкаНаДок); 
	
	ВыборкаТоваров = ЗапросТоваров.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	лНомерСтроки = 1;
	
	Пока ВыборкаТоваров.Следующий() Цикл		
		ВыборкаХарактеристик = ВыборкаТоваров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристик.Следующий() Цикл			
			ВыборкаМарок = ВыборкаХарактеристик.Выбрать();
			
			Пока ВыборкаМарок.Следующий() Цикл
				ЗаполнитьСтрокуДокаМаркировкаМДЛП(ТекстФайлаДокумент, ВыборкаМарок, лНомерСтроки);			
			КонецЦикла;			
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДокаМаркировкаМДЛП(ТекстФайлаДокумент, ВыборкаТоваров, лНомерСтроки)
	
	ТекстФайлаДокумент = ТекстФайлаДокумент + лНомерСтроки + ";S;"; //префикс приемки
	
	Если ЗначениеЗаполнено(ВыборкаТоваров.Характеристика) Тогда
		ТекстФайлаДокумент = ТекстФайлаДокумент + "8U-" + СокрЛП(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор()) + СокрЛП(ВыборкаТоваров.Характеристика.УникальныйИдентификатор()) + ";";
	Иначе
		ТекстФайлаДокумент = ТекстФайлаДокумент + "8U-" + СокрЛП(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000" + ";";
	КонецЕсли;
	
	Если ВыборкаТоваров.Марка <> "" Тогда
		DMPDFBarcode = ДобавитьВМаркуУпрСимволы(ВыборкаТоваров.Марка);
	Иначе
		DMPDFBarcode = ВыборкаТоваров.Марка;
	КонецЕсли;
	
	Если СтрДлина(ВыборкаТоваров.Короб) = 18 Тогда
		DMBoxPackID = "00" + ВыборкаТоваров.Короб;
	Иначе
		DMBoxPackID = ВыборкаТоваров.Короб;
	КонецЕсли;
	
	Если СтрДлина(ВыборкаТоваров.Палета) = 18 Тогда
		DMPackID = "00" + ВыборкаТоваров.Палета;
	Иначе
		DMPackID = ВыборкаТоваров.Палета;
	КонецЕсли;
	
	ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //Штрихкод товара
	ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // Ячейка
	ТекстФайлаДокумент = ТекстФайлаДокумент + ВыборкаТоваров.НомерСерии + ";"; // Серия
	ТекстФайлаДокумент = ТекстФайлаДокумент + ?(ВыборкаТоваров.Марка <> "", 1, ВыборкаТоваров.Количество) + ";"; //задание
	
	Если НеОтображатьОстатки Тогда
		ТекстФайлаДокумент = ТекстФайлаДокумент + 0 + ";"; //лимит
	Иначе
		ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(ВыборкаТоваров.Остаток, "ЧГ=") + ";"; //лимит	
	КонецЕсли;	
	
	ТекстФайлаДокумент = ТекстФайлаДокумент + DMPDFBarcode  + ";"; //Марка
	ТекстФайлаДокумент = ТекстФайлаДокумент + DMPackID + ";"; //Палета		
	ТекстФайлаДокумент = ТекстФайлаДокумент + DMBoxPackID + ";" + Символы.ПС; //Короб		
	
	лНомерСтроки = лНомерСтроки + 1;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВМаркуУпрСимволы(ЦРПТМаркаБезУпрСимволов)
	
	Если ЦРПТМаркаБезУпрСимволов = "" Тогда
		Возврат "";
	Иначе
		Возврат "01" + Сред(ЦРПТМаркаБезУпрСимволов, 1, 14) + "21" + Сред(ЦРПТМаркаБезУпрСимволов, 15, 13);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверкаНаНаличиеНоменклатурыУДокументаМДЛП(Шаблон, ЕстьНоменклатураПоМДЛП, ДокументВыгрузки)
	
	Если Шаблон = "УведомлениеОПриемкеМДЛП"	Или Шаблон = "УведомлениеОбОтгрузкеМДЛП" Тогда
		Если ДокументВыгрузки.ТранспортныеУпаковки.Количество() > 0 Тогда
			ЕстьНоменклатураПоМДЛП = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеКМпоУпаковкеКотораяИмеетсяВБазе

&НаСервере
Процедура ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма = Неопределено, Модуь_ШтрихкодированиеИС)
	
	Если Не Модуь_ШтрихкодированиеИС.ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	Модуь_ШтрихкодированиеИС.ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуь_ШтрихкодированиеИС);
	ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуь_ШтрихкодированиеИС);
	Модуь_ШтрихкодированиеИС.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Или ДанныеПоШтрихкодам.ТребуетсяСопоставление Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модуь_ШтрихкодированиеИС.ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляСохраненияКодовМаркировки = Новый Соответствие;
	
	ОтметитьНовыеШтрихкодыУпаковок(ДанныеПоШтрихкодам, СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	
	ОбновитьШтрихкодыУпаковок(СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования, Модуь_ШтрихкодированиеИС);
	ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма, Модуь_ШтрихкодированиеИС);
	
	ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

// Формирует данные по маркируемой продукции, информации о которой нет в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
&НаСервере
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуь_ШтрихкодированиеИС)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И Модуь_ШтрихкодированиеИС.ПрисутствуетАлкогольнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда		
		Если Модуь_ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			МодульШтрихкодированиеМОТП = ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		КонецЕсли;
		
		Если Модуь_ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			МодульШтрихкодированиеИСМПСлужебный = ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		КонецЕсли;		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеПоШтрихкодам.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет структуру "Данные по штрихкодам" информацией по неизвестным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
&НаСервере
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуь_ШтрихкодированиеИС)
	
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	ЕстьНеизвестныеШтрихкодыУпаковок = Ложь; 
	
	Для каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки)
			И Не СтрокаДанных.Идентифицирован Тогда
			ЕстьНеизвестныеШтрихкодыУпаковок = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНеизвестныеШтрихкодыУпаковок Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда		
		МодульШтрихкодированиеМОТП = ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);		
	КонецЕсли;
	
	Если Модуь_ШтрихкодированиеИС.ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда		
		МодульШтрихкодированиеИСМПСлужебный = ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		Модуь_ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьНовыеШтрихкодыУпаковок(ДанныеПоШтрихкодам, ЭлементыДляИзменения)
	
	Для каждого КодМаркировки Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если Не ЗначениеЗаполнено(КодМаркировки.ШтрихкодУпаковки) Тогда
			Изменения = Новый Массив;
			Изменения.Добавить("Номенклатура");
			Изменения.Добавить("Характеристика");
			Изменения.Добавить("Серия");
			Изменения.Добавить("Количество");
			Изменения.Добавить("Штрихкод");
			Изменения.Добавить("ТипШтрихкода");
			Изменения.Добавить("ТипУпаковки");
			ОтметитьКОбновлению(ЭлементыДляИзменения, КодМаркировки, Изменения);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

// Заполняет выбранные номенклатуру, характеристику, серию в случае потокового сканирования (GTIN-уточнение-автовыбор КМ)
//   или при сканировании остаточного КМ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
&НаСервере
Процедура ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеУточнения") Тогда
		ДанныеУточнения = ПараметрыСканирования.ДополнительныеПараметры.ДанныеУточнения;
		
		Для каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл			
			Если СтрокаДанных.ТребуетсяСопоставление 
				И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			
			ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеУточнения);
			
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

// Приводит данные по штрихкодам в соответствие данным ранее указанными пользователем.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
&НаСервере
Процедура ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Модуь_ШтрихкодированиеИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");
	
	Если ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	
	Для каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл		
		Если Модуь_ШтрихкодированиеИСКлиентСервер.ТребуетсяСброситьСохраненныйВыбор(ДанныеСохраненногоВыбора, СтрокаДанных) Тогда
			Возврат;
		КонецЕсли;
		
		ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеСохраненногоВыбора);
		
		Если СтрокаДанных.МаркируемаяПродукция Тогда
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьШтрихкодыУпаковок(ЭлементыДляИзменения, ПараметрыСканирования, Модуь_ШтрихкодированиеИС)
	
	Для каждого КлючИЗначение Из ЭлементыДляИзменения Цикл
		Модуь_ШтрихкодированиеИС.ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(
		КлючИЗначение.Ключ, КлючИЗначение.Значение, ПараметрыСканирования);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные штрихкода по документу основанию.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Форма - ФормаКлиентскогоПриложения, Неопределено - форма-источник вызова
&НаСервере
Процедура ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма, Модуь_ШтрихкодированиеИС)
	
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Модуь_ИнтеграцияИС = ОбщийМодуль("ИнтеграцияИС");
	
	Модуь_ШтрихкодированиеИС.СформироватьДанныеДокументаОснования(ПараметрыСканирования);
	ДанныеДокументаОснования = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	КонецЕсли;
	
	ДанныеДокумента = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
	ИначеЕсли Форма <> Неопределено Тогда
		ДанныеДокумента = ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования);
	КонецЕсли;
	
	ОбновленныеКодыМаркировки = Новый Массив;
	ОбновленаСпецификаИСМП = Ложь;
	
	ОбновлятьСерии = Модуь_ИнтеграцияИС.СерииИспользуются();
	
	Для каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл		
		СтрокаОбновлена = Ложь;
		
		Если Модуь_ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП().Найти(СтрокаДанных.ВидПродукции) <> Неопределено Тогда
			Если МодульСпецификиИСМП().ЗаполнитьПоДокументуИОснованию(СтрокаДанных, ПараметрыСканирования, ДанныеДокумента) Тогда
				СтрокаОбновлена = Истина;
				ОбновленаСпецификаИСМП = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновлятьСерии И Не СтрокаОбновлена Тогда
			Если ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаДанных, ДанныеДокументаОснования, ДанныеДокумента) Тогда
				СтрокаОбновлена = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОбновлена
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И ЗначениеЗаполнено(СтрокаДанных.Серия) Тогда
			
			НовыеРеквизиты = Новый Структура("Серия", СтрокаДанных.Серия);
			Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
			СтрокаДанных.ШтрихкодУпаковки, НовыеРеквизиты);
		КонецЕсли;
		
		Если СтрокаОбновлена Тогда
			ОбновленныеКодыМаркировки.Добавить(СтрокаДанных);
		КонецЕсли;		
	КонецЦикла;
	
	//Обновление данных дерева
	Если ОбновленаСпецификаИСМП Тогда
		МодульСпецификиИСМП().ОбновитьДеревоУпаковок(ДанныеПоШтрихкодам, ОбновленныеКодыМаркировки);
	КонецЕсли;
	
КонецПроцедуры

// Помещает дерево упаковок во временное хранилище. Адрес дерева упаковок помещает в каждые данные обработанных штрихкодов.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
&НаСервере
Процедура ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, Идентификатор);
	
	Для каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл		
		Если СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.АдресДереваУпаковок = АдресДереваУпаковок;		
	КонецЦикла;
	
КонецПроцедуры

//Определяет по контексту возможность работы с табаком.
//
//Параметры:
//   Контекст - Структура, ПеречислениеСсылка.ВидыПродукцииИС -
//     контекст (параметры сканирования или вид продукции), по которому будет определяться возможность работы с табачной продукцией.
//Возвращаемое значение:
//   Булево - Истина, если для контекста разрешена работа с табачной продукцией.
//
&НаСервере
Функция ДопустимаТабачнаяПродукция(Контекст)
	
	Модуь_ШтрихкодированиеИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Табак;
	КонецЕсли;
	
	Возврат Модуь_ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Табак);
	
КонецФункции

&НаСервере
Процедура ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства)
	
	Изменения = ЭлементыДляИзменения.Получить(СтрокаДанных);
	
	Если Изменения = Неопределено Тогда
		Изменения = Новый Массив;
	КонецЕсли;
	
	Для каждого ИмяРеквизита Из ИзмененныеСвойства Цикл
		Изменения.Добавить(ИмяРеквизита);
	КонецЦикла; 
	
	ЭлементыДляИзменения.Вставить(СтрокаДанных, Изменения);
	
КонецПроцедуры

&НаСервере
Функция МодульСпецификиИСМП()
	
	Возврат ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
	
КонецФункции

&НаСервере
Функция ЗаполнитьСохраненнымВыборомДанныеШтрихкода(ДанныеШтрихкода, СохраненныйВыбор)
	
	ИзмененныеСвойства = Новый Массив;
	
	Для каждого КлючЗначение Из СохраненныйВыбор Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, КлючЗначение.Ключ)
			И ЗначениеЗаполнено(КлючЗначение.Значение)
			И Не ЗначениеЗаполнено(ДанныеШтрихкода[КлючЗначение.Ключ]) Тогда
			
			ДанныеШтрихкода[КлючЗначение.Ключ] = КлючЗначение.Значение;
			ИзмененныеСвойства.Добавить(КлючЗначение.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзмененныеСвойства;
	
КонецФункции

// Получает данные документа из формы в которой происходит сканирование. 
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма данные таблицы "Товары" требуется получить.
//   ПараметрыСканирования - Структура, Неопределено - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//
// Возвращаемое значение:
//   Неопределено, ТаблицаЗначений, ДанныеФормыКоллекция - см. ИнициализицияТаблицыДанныхДокумента.
//
&НаСервере
Функция ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования, ПоместитьВоВременноеХранилище = Ложь)
	
	Модуь_ШтрихкодированиеИСПереопределяемый = ОбщийМодуль("ШтрихкодированиеИСПереопределяемый");
	
	СтандартнаяОбработка = Истина;
	ДанныеДокумента = Неопределено;
	Модуь_ШтрихкодированиеИСПереопределяемый.ПриФормированииДанныхТабличнойЧастиТовары(
	Форма, ДанныеДокумента, ?(ПоместитьВоВременноеХранилище, ПараметрыСканирования, Неопределено), СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Обработка") Тогда //формы проверки и подбора
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПодобраннаяМаркируемаяПродукция") Тогда
				Возврат Форма.ПодобраннаяМаркируемаяПродукция;
			КонецЕсли;
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Товары")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Номенклатура")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Характеристика")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Серия") Тогда
				Возврат Форма.Объект.Товары;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ДанныеДокумента;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаСКодомМаркировки, ДанныеДокументаОснования, ДанныеДокумента)
	
	Если Не ЗначениеЗаполнено(СтрокаСКодомМаркировки.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(СтрокаСКодомМаркировки.Серия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",
	СтрокаСКодомМаркировки.Номенклатура, СтрокаСКодомМаркировки.Характеристика);
	
	НайденныеСтроки = Новый Массив; 
	
	Если ДанныеДокументаОснования <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;  
	
	Если НайденныеСтроки.Количество() <> 1 И ДанныеДокумента <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокумента.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	
	//Заполнение единственным вариантом из документа-основания или из документа
	Если НайденныеСтроки.Количество() = 1 Тогда
		СтрокаСКодомМаркировки.Серия = НайденныеСтроки[0].Серия;
		Возврат Истина;
	КонецЕсли;
	
	//Заполнение серией для которой проверка не завершена
	Если ДанныеДокумента <> Неопределено И НайденныеСтроки.Количество() Тогда
		ПроверятьИзКолонкиСтатусПроверки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "СтатусПроверкиГосИС");
		ПроверятьИзКолонкиКоличествоПодобрано = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "КоличествоПодобрано");
		
		Если Не(ПроверятьИзКолонкиСтатусПроверки Или ПроверятьИзКолонкиКоличествоПодобрано) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НайденоСерий = 0;
		Серия = Неопределено;
		
		Для каждого ВариантВыбора Из НайденныеСтроки Цикл
			Если ПроверятьИзКолонкиСтатусПроверки И ВариантВыбора.СтатусПроверкиГосИС <> 1 Тогда
				Продолжить;
			ИначеЕсли ПроверятьИзКолонкиКоличествоПодобрано И ВариантВыбора.Количество <= ВариантВыбора.КоличествоПодобрано Тогда
				Продолжить;
			КонецЕсли;
			Если НайденоСерий = 0 Тогда
				НайденоСерий = 1;
				Серия = ВариантВыбора.Серия;
			Иначе
				НайденоСерий = НайденоСерий + ?(Серия = ВариантВыбора.Серия, 0, 1);
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСерий = 1 Тогда
			СтрокаСКодомМаркировки.Серия = Серия;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

#КонецОбласти

&НаКлиенте
Процедура ВыгрузитьКМЕслиКаталогиДоступны()
	
	ТаблицаТоваровДляПроверки = ТаблицаТоваровКМ;
	Ответ = ПроверитьВводДанныхТабличнойЧасти(ТаблицаТоваровДляПроверки);
	
	Если ТаблицаТоваровКМ.Количество() = 0 Тогда
		Сообщить("Укажите номенклатуру для выгрузки! ");		
		
	Иначе
		Если Ответ = Ложь Тогда
			Сообщить("Указано количество 0. Проверьте данные ввода. ");			
			
		Иначе
			Если ТипОбмена = "1" Тогда				
				Подключение = ПодключитьсяКFTPСерверу();
				Если Подключение <> Неопределено Тогда
					СтрокиВыгрузки = ВыгрузитьКМНаСервере();
					ВставитьКоличествоПечатиВТЧ();
					СформироватьФайлКМ(СтрокиВыгрузки);
					
					Сообщить("Выгрузка завершена. ");
					
				Иначе
					Сообщить("Проверьте подключение к FTP. ");
				КонецЕсли; 
				
			ИначеЕсли ТипОбмена = "0" ИЛИ ТипОбмена = "2" Тогда				
				СтрокиВыгрузки = ВыгрузитьКМНаСервере();
				ВставитьКоличествоПечатиВТЧ();
				СформироватьФайлКМ(СтрокиВыгрузки);
				Сообщить("Выгрузка завершена. ");								
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьУпаковкиКМЕслиКаталогиДоступны()
	
	Запись = ЗаполнитьТаблицуМаркировки();
	КоличествоМарки  = Запись.Количество;
	АдресДанныхМарки = Запись.Адрес;
	
	Если КоличествоМарки = 0 Тогда
		ПоказатьСообщениеПользователю("Нет марок для выгрузки!");
		Возврат;
	КонецЕсли;	   
	
	ИндикаторТоварыМаркировка = 0;
	
	тхт = Новый ТекстовыйДокумент;
	ТекстФайлаМарки = "" + ?(ОчиститьУпаковкиКМ, "-", "+") + Символы.ПС;
	
	Если КоличествоМарки < 100 Тогда
		РазмерШагаМарки = 5;
	ИначеЕсли КоличествоМарки < 1000 Тогда
		РазмерШагаМарки = 10;
	ИначеЕсли КоличествоМарки < 10000 Тогда
		РазмерШагаМарки = 100;
	ИначеЕсли КоличествоМарки < 100000 Тогда
		РазмерШагаМарки = 1000;
	Иначе 
		РазмерШагаМарки = 10000;
	КонецЕсли;
	
	КоличествоШаговМарки = Цел(КоличествоМарки / РазмерШагаМарки);
	КоличествоЦелМарки   = КоличествоШаговМарки * РазмерШагаМарки;
	
	Если КоличествоЦелМарки < КоличествоМарки Тогда
		МаксимальноеЗначениеИндикатораМарки = КоличествоШаговМарки + 1;
	Иначе
		МаксимальноеЗначениеИндикатораМарки = КоличествоШаговМарки;
	КонецЕсли;
	
	
	Элементы.ИндикаторТоварыМаркировка.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораМарки;
	
	Для Счетчик = 1 По КоличествоШаговМарки Цикл		
		ТекстФайлаМарки = ТекстФайлаМарки + ВыгрузитьПорциюМарок(РазмерШагаМарки * (Счетчик - 1) + 1, РазмерШагаМарки * Счетчик, АдресДанныхМарки);
		
		ИндикаторТоварыМаркировка = Счетчик;
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();		
	КонецЦикла;
	
	Если КоличествоЦелМарки < КоличествоМарки Тогда		
		ТекстФайлаМарки = ТекстФайлаМарки + ВыгрузитьПорциюМарок(КоличествоШаговМарки * РазмерШагаМарки + 1, КоличествоМарки, АдресДанныхМарки);
		
		ИндикаторТоварыМаркировка = ИндикаторТоварыМаркировка + 1;
	КонецЕсли;
	
	ИндикаторТоварыМаркировка = МаксимальноеЗначениеИндикатораМарки;
	
	тхт.УстановитьТекст(ТекстФайлаМарки);
	
	тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ=0"));
	ИмяФайлаВыгрузкиУКМ = РазделительПути+Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Marks.dm";
	
	Если ТипОбмена = "1" Тогда
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmmss") + "_v83_Marks.dm" + "temp");	
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда
			тхт.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиУКМ, КодировкаТекста.UTF8);
		Иначе
			тхт.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиУКМ, КодировкаТекста.UTF8);
		КонецЕсли;
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиУКМ, ИДТСД, ИмяФайлаВыгрузкиУКМ);
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиУКМ, ИДТСД, ИмяФайлаВыгрузкиУКМ);	
			КонецЕсли;	
		КонецЕсли; 
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_v83_Marks.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли;  
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтатусыКМ(ТекущиеМаркировкаРазрешенныеСтатусыКМ) 
	
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Очистить();
	
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(0,"Получен");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(1,"Нанесен");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(2,"В обороте");
	Таблица_МаркировкаРазрешенныеСтатусыКМ.Добавить(4,"Выведен из оборота");
	
	ТекущиеМаркировкаРазрешенныеСтатусыКМ = СтрЗаменить(ТекущиеМаркировкаРазрешенныеСтатусыКМ,"[","");
	ТекущиеМаркировкаРазрешенныеСтатусыКМ = СтрЗаменить(ТекущиеМаркировкаРазрешенныеСтатусыКМ,"]","");
	
	Если ТекущиеМаркировкаРазрешенныеСтатусыКМ <> "" Тогда 
		МассивСохраненныхСтатусовКМ = РазложитьСтрокуВМассивЧисловыхПодстрокДМ(ТекущиеМаркировкаРазрешенныеСтатусыКМ);
		
		Для каждого строка Из Таблица_МаркировкаРазрешенныеСтатусыКМ Цикл
			Если МассивСохраненныхСтатусовКМ.Найти(строка.Значение) <> Неопределено Тогда
				строка.Пометка = Истина;
			Иначе
				строка.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьТребуетсяВыгрузкаМарок(ВидДокумента)
	
	Если ВидДокумента = "ПриобретениеТоваровУслуг" Или ВидДокумента = "ПриемкаТоваровИСМП" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДобавитьМаркированныйТоварВТекстДокумента(ТекстФайлаДокумент, ДокументВыгрузки)
	
	ВыборкаТоваров = ПолучитьВыборкуМаркированныхТоваровПоДокументу(ДокументВыгрузки, ВидДокументаВыгрузки, ИмяТЧДокументаПодбор);
	
	Если ТипЗнч(ДокументВыгрузки) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда	
		Модуь_ШтрихкодированиеИСМПСлужебный = ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		ДанныеНоменклатурыПоДаннымУПД = Модуь_ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыПоДаннымУПД(ДокументВыгрузки);
		
		ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора = ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора(ДокументВыгрузки); 	
	КонецЕсли;
	
	ТЗКМРаспределить = Новый ТаблицаЗначений;
	ТЗКМРаспределить.Колонки.Добавить("Номенклатура");
	ТЗКМРаспределить.Колонки.Добавить("Характеристика");
	ТЗКМРаспределить.Колонки.Добавить("Количество"); 
	
	лНомерСтроки = 1;
	
	Пока ВыборкаТоваров.Следующий() Цикл		
		ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(лНомерСтроки, "ЧГ=0") + ";S;"; //префикс приемки
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ВыборкаТоваров.Характеристика) Тогда
				ТекстФайлаДокумент = ТекстФайлаДокумент + "8U-" + СокрЛП(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор()) + СокрЛП(ВыборкаТоваров.Характеристика.УникальныйИдентификатор()) + ";";
			Иначе
				ТекстФайлаДокумент = ТекстФайлаДокумент + "8U-" + СокрЛП(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000" + ";";
			КонецЕсли;
			
		Иначе
			//Попробовать найти номенклатуру из сопоставления документа ЭДО
			Если ТипЗнч(ДокументВыгрузки) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда
				СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(ВыборкаТоваров.Марка);
				
				Если СведенияПоEAN = Неопределено Тогда
					СведенияПоEAN = ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора.Получить(ВыборкаТоваров.Марка);
				КонецЕсли;
				
				Если СведенияПоEAN <> Неопределено Тогда					
					Если ЗначениеЗаполнено(СведенияПоEAN.Номенклатура) Тогда
						
						Если ЗначениеЗаполнено(СведенияПоEAN.Характеристика) Тогда
							ТекстФайлаДокумент = ТекстФайлаДокумент + "8U-" + СокрЛП(СведенияПоEAN.Номенклатура.УникальныйИдентификатор()) + СокрЛП(СведенияПоEAN.Характеристика.УникальныйИдентификатор()) + ";";
						Иначе
							ТекстФайлаДокумент = ТекстФайлаДокумент+ "8U-" + СокрЛП(СведенияПоEAN.Номенклатура.УникальныйИдентификатор()) + "00000000-0000-0000-0000-000000000000" + ";";
						КонецЕсли;
						
						СтрокаРаспределения = ТЗКМРаспределить.Добавить();
						СтрокаРаспределения.Номенклатура = СведенияПоEAN.Номенклатура;
						СтрокаРаспределения.Характеристика = СведенияПоEAN.Характеристика;
						СтрокаРаспределения.Количество = 1;						
						
					Иначе			
						ТекстФайлаДокумент = ТекстФайлаДокумент + "00000000-0000-0000-0000-000000000000" + ";";		
					КонецЕсли;
					
				Иначе			
					ТекстФайлаДокумент = ТекстФайлаДокумент + "00000000-0000-0000-0000-000000000000" + ";";		
				КонецЕсли;
				
			Иначе
				ТекстФайлаДокумент = ТекстФайлаДокумент + "00000000-0000-0000-0000-000000000000" + ";";				
			КонецЕсли;	
		КонецЕсли;		
		
		ТекущееКоличество = ВыборкаТоваров.Количество;  
		
		Если ТЗКМРаспределить.Количество() > 0 и ВыборкаТоваров.Марка = "" Тогда			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура"  , ВыборкаТоваров.Номенклатура);
			Отбор.Вставить("Характеристика", ВыборкаТоваров.Характеристика);
			
			ТЗКМРаспределить.Свернуть("Номенклатура,Характеристика", "Количество");
			Строки = ТЗКМРаспределить.НайтиСтроки(Отбор);
			
			Для каждого Стр Из Строки Цикл
				Если ТекущееКоличество > 0 Тогда
					ТекущееКоличество = ТекущееКоличество - Стр.Количество;	
					ТЗКМРаспределить.Удалить(Стр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
		
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; //Штрихкод товара
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // Ячейка
		ТекстФайлаДокумент = ТекстФайлаДокумент + ";"; // Серия
		ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(ТекущееКоличество, "ЧГ=0") + ";";//задание
		
		Если НеОтображатьОстатки Тогда
			ТекстФайлаДокумент = ТекстФайлаДокумент + 0 + ";";//лимит	
		Иначе
			ТекстФайлаДокумент = ТекстФайлаДокумент + Формат(ВыборкаТоваров.Лимит, "ЧГ=0") + ";";//лимит
		КонецЕсли;
		
		ТипПродукции = ПолучитьТипМаркированнойПродукции(ВыборкаТоваров.Номенклатура); 
		ТекстФайлаДокумент = ТекстФайлаДокумент + УбратьСкобкиТеговМарка(ВыборкаТоваров.Марка,ТипПродукции,Истина)  + ";"; //Марка
		ТекстФайлаДокумент = ТекстФайлаДокумент + УбратьСкобкиТеговУпаковка(ВыборкаТоваров.Палета) + ";"; //Палета		
		ТекстФайлаДокумент = ТекстФайлаДокумент + УбратьСкобкиТеговУпаковка(ВыборкаТоваров.Короб) + ";" + Символы.ПС; //Короб
		
		лНомерСтроки = лНомерСтроки + 1; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора(ДокументПриемки)
	
	СоответствиеКодаМаркировкиНоменклатуре = Новый Соответствие;
	
	Выборка = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.Выбрать(Новый Структура("Документ", ДокументПриемки));
	
	Если Выборка.Следующий() Тогда		
		ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора = Выборка.ДанныеПроверкиИПодбора.Получить();		
		ДеревоМаркированнойПродукции = ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора.ДеревоМаркированнойПродукции;		
		
		Для каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл			
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(СтрокаДерева,СоответствиеКодаМаркировкиНоменклатуре);			
		КонецЦикла;		
	КонецЕсли;
	
	Возврат СоответствиеКодаМаркировкиНоменклатуре;
	
КонецФункции

&НаСервере
Процедура ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(СтрокаДерева,СоответствиеКодаМаркировкиНоменклатуре)
	
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) И ЗначениеЗаполнено(СтрокаДерева.Штрихкод) Тогда		
		ТипПродукции = ПолучитьТипМаркированнойПродукции(СтрокаДерева.Номенклатура); 
		ЗначениеШтрихкода = УбратьСкобкиТеговМарка(СтрокаДерева.Штрихкод,ТипПродукции);
		
		НайденноеСоответствие = СоответствиеКодаМаркировкиНоменклатуре.Получить(ЗначениеШтрихкода);
		
		Если НайденноеСоответствие = Неопределено Тогда
			ДанныеНоменклатуры = Новый Структура;
			ДанныеНоменклатуры.Вставить("Номенклатура",              СтрокаДерева.Номенклатура);
			ДанныеНоменклатуры.Вставить("Характеристика",            СтрокаДерева.Характеристика);
			
			СоответствиеКодаМаркировкиНоменклатуре.Вставить(ЗначениеШтрихкода, ДанныеНоменклатуры);
		КонецЕсли;		
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() <> 0 Тогда		
		Для каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл			
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(ВложеннаяСтрокаДерева,СоответствиеКодаМаркировкиНоменклатуре);			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыборкуМаркированныхТоваровПоДокументу(лИсходныйДокумент, лВидДокумента, лИмяТабличнойЧастиПодбор)
	
	Запрос = Новый Запрос;
	//ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО ТОВАРАМ И ОСТАТКАМ
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваровВДокументе.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровВДокументе.Характеристика КАК Характеристика,
	|	&УсловиеСерия КАК Серия,
	|	&УсловиеЦена КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0) = 0
	|				ТОГДА ТаблицаТоваровВДокументе.КоличествоУпаковок
	|			ИНАЧЕ ЕСТЬNULL(ТаблицаТоваровВДокументе.Количество, 0)
	|		КОНЕЦ) КАК Количество,
	|	МИНИМУМ(ТаблицаТоваровВДокументе.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ЗапросСЛимитами
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТоваровВДокументе
	|ГДЕ
	|	ТаблицаТоваровВДокументе.Ссылка = &ИсходныйДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваровВДокументе.Номенклатура,
	|	ТаблицаТоваровВДокументе.Характеристика,
	|	&УсловиеСерия,
	|	&УсловиеЦена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
	|	СвободныеОстаткиОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	|ПОМЕСТИТЬ СвободныеОстаткиОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура В
	|						(ВЫБРАТЬ
	|							ЗапросСЛимитами.Номенклатура КАК Номенклатура
	|						ИЗ
	|							ЗапросСЛимитами КАК ЗапросСЛимитами)
	|					И &ВсеСклады
	|				ИЛИ Склад В (&Склады)
	|				ИЛИ Помещение В (&Склады)) КАК СвободныеОстаткиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапросСЛимитами.Номенклатура КАК Номенклатура,
	|	ЗапросСЛимитами.Характеристика КАК Характеристика,
	|	ЗапросСЛимитами.Серия КАК Серия,
	|	МАКСИМУМ(ЗапросСЛимитами.Цена) КАК Цена,
	|	СУММА(ЗапросСЛимитами.Количество) КАК Количество,
	|	СУММА(ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0)) КАК Лимит,
	|	МИНИМУМ(ЗапросСЛимитами.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ТоварыЗадания
	|ИЗ
	|	ЗапросСЛимитами КАК ЗапросСЛимитами
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеОстаткиОстатки КАК СвободныеОстаткиОстатки
	|		ПО ЗапросСЛимитами.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	|			И ЗапросСЛимитами.Характеристика = СвободныеОстаткиОстатки.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросСЛимитами.Номенклатура,
	|	ЗапросСЛимитами.Характеристика,
	|	ЗапросСЛимитами.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	
	//ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО СПРАВОЧНИКУ ШТРИХКОДЫ УПАКОВОК, ЕСЛИ ОНИ ЗАГРУЖЕНЫ
	//ТОЛЬКО ПО ГРУППОВЫМ УПАКОВКАМ, БЛОКИ СИГАРЕТ НЕ УЧИТЫВАЕМ, ПЛЮС ПРЕДПОЛОГАЕМ ЧТО МОГУТ БЫТЬ КОРОБА И ПАЛЕТЫ
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ПОМЕСТИТЬ ШтрихкодыУпаковокТоваровКоробаПалеты
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
	|ГДЕ
	|	ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &ИсходныйДокумент
	|	И НЕ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И (ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
	|		ИЛИ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка))
	|			И ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
	|;
	|
	
	//ВЫБЕРЕМ ИЗ ГРУППОВЫХ УПАКОВОК НИЖЕСТОЯЩИЕ, ЕСЛИ ИСПОЛЬЗУЮТСЯ ЕЩЕ И ПАЛЕТЫ
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК ШтрихкодУпаковки,
	|	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ПОМЕСТИТЬ ШтрихкодыУпаковокТоваровКороба
	|ИЗ
	|	ШтрихкодыУпаковокТоваровКоробаПалеты КАК ШтрихкодыУпаковокТоваровКоробаПалеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковокТоваровКоробаПалеты.ШтрихкодУпаковки
	|ГДЕ
	|	НЕ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
	|		ИЛИ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка))
	|			И СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
	|;
	
	
	//ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО СПРАВОЧНИКУ ШТРИХКОДЫ УПАКОВОК, ЕСЛИ ОНИ ЗАГРУЖЕНЫ
	//ТОЛЬКО ПО ТОВАРАМ, БЕЗ ГРУППОВЫХ УПАКОВОК (БЛОКИ СИГАРЕТ, ТОЖЕ ТОВАРЫ)
	//ОБЪЕДИНИМ СО СПРАВОЧНИКОМ ШТРИХКОДОВ ИЗ ГРУППОВЫХ УПАКОВОК
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ПОМЕСТИТЬ ШтрихкодыУпаковокТоваров  
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
	|ГДЕ
	|	ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &ИсходныйДокумент
	|	И НЕ ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И (ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|			ИЛИ (ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|				И ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	
	//КОРОБА
	|ОБЪЕДИНИТЬ  
	|
	|ВЫБРАТЬ
	|	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК ШтрихкодУпаковки,
	|	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ИЗ
	|	ШтрихкодыУпаковокТоваровКоробаПалеты КАК ШтрихкодыУпаковокТоваровКоробаПалеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковокТоваровКоробаПалеты.ШтрихкодУпаковки
	|ГДЕ
	|	НЕ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|		И (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|			ИЛИ (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|				И СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	
	//ПАЛЕТЫ
	|ОБЪЕДИНИТЬ  
	|
	|ВЫБРАТЬ
	|	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК ШтрихкодУпаковки,
	|	СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ИЗ
	|	ШтрихкодыУпаковокТоваровКороба КАК ШтрихкодыУпаковокТоваровКороба
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковокТоваровКороба.ШтрихкодУпаковки
	|ГДЕ
	|	НЕ СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|		И (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|			ИЛИ (СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|				И СправочникШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	|;
	|
	
	
	//ВЫБЕРЕМ ДАННЫЕ ДОКУМЕНТА ПО ЗНАЧЕНИЯМ ШТРИХКОДОВ, ГДЕ НЕ ЗАПОЛНЕН СПРАВОЧНИК ШТРИХКОДЫ УПАКОВОК 
	//ТОЛЬКО ПО ТОВАРАМ, БЕЗ ГРУППОВЫХ УПАКОВОК (БЛОКИ СИГАРЕТ, ТОЖЕ ТОВАРЫ)
	//ПОПРОБУЕМ ОПРЕДЕЛИТЬ GTIN
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 3, 1) <> ""0""
	|			ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 3, 14)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 4, 1) <> ""0""
	|					ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 4, 13)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 5, 1) <> ""0""
	|							ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 5, 12)
	|						ИНАЧЕ ВЫБОР 
	|							КОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 9, 1) <> ""0""
	|								ТОГДА ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 9, 8)
	|							ИНАЧЕ
	|								ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 4, 13)
	|							КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ
	|	КОНЕЦ КАК GTIN
	|ПОМЕСТИТЬ ЗначенияШтрихкодовТоваров
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
	|ГДЕ
	|	ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &ИсходныйДокумент
	|	И ПриобретениеТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И ПОДСТРОКА(ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода, 1, 2) = ""01""
	|;
	|
	
	//СФОРМИРУЕМ СОПОСТАВЛЕНИЕ ДАННЫХ С НОМЕНКЛАТУРОЙ
	//ПО ШТРИХКОДАМ УПАКОВОК ДАННЫЕ БЕРЕМ ИЗ СПРАВОЧНИКА
	//ПО ЗНАЧЕНИЯМ ШТРИХКОДОВ ДАННЫЕ БЕРЕМ ИЗ РЕГИСТРА
	//ПЛЮС МОГУТ ОСТАТЬСЯ НЕСОПОСТАВЛЕННЫЕ СТРОКИ (НАПРИМЕР УПРОЩЕНКА)
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Количество = 0 
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Упаковка.Числитель,0) = 0
	|				ТОГДА 1
	|				ИНАЧЕ ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Упаковка.Числитель
	|			КОНЕЦ
	|		ИНАЧЕ ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Количество 
	|	КОНЕЦ КАК Коэффициент,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Марка,
	|	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода, """")) КАК Короб,
	|	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды2.Ссылка.ЗначениеШтрихкода, """")) КАК Палета
	|ПОМЕСТИТЬ МаркиЗадания
	|ИЗ
	|	ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды2
	|		ПО ЕСТЬNULL(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода, """") = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды2.Штрихкод
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Характеристика,
	|	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Серия,
	|	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Упаковка,
	|	ШтрихкодыУпаковокТоваров.ШтрихкодУпаковки.Количество, 
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода	
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))),
	|	МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))),
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ВЫБОР 
	|		КОГДА МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Упаковка.Числитель,1))=0 
	|		ТОГДА 1
	|		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(РегистрСведенийШтрихкодыНоменклатуры.Упаковка.Числитель,1)) 
	|	КОНЕЦ,
	|	ЗначенияШтрихкодовТоваров.ЗначениеШтрихкода,
	|	"""",
	|	""""
	|ИЗ
	|	ЗначенияШтрихкодовТоваров КАК ЗначенияШтрихкодовТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК РегистрСведенийШтрихкодыНоменклатуры
	|		ПО ЗначенияШтрихкодовТоваров.GTIN = РегистрСведенийШтрихкодыНоменклатуры.Штрихкод
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияШтрихкодовТоваров.ЗначениеШтрихкода
	|;
	|
	
	//ПОДСЧИТАЕМ КОЛИЧЕСТВО МАРОК КОТОРЫЕ ОПРЕДЕЛЕНЫ (ВОЗМОЖНО ОНИ В ДОКУМЕНТЕ Т0ЛЬКО ЧАСТИЧНО УКАЗАНЫ)
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаркиЗадания.Номенклатура КАК Номенклатура,
	|	МаркиЗадания.Характеристика КАК Характеристика,
	|	МаркиЗадания.Серия КАК Серия,
	|	СУММА(МаркиЗадания.Коэффициент) КАК Количество
	|ПОМЕСТИТЬ КоличествоМарокЗадания
	|ИЗ
	|	МаркиЗадания КАК МаркиЗадания
	|ГДЕ
	|	НЕ МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаркиЗадания.Номенклатура,
	|	МаркиЗадания.Характеристика,
	|	МаркиЗадания.Серия
	|;
	|
	
	//РАСПРЕДЕЛИМ МАРКИ ПО ЗАДАНИЮ
	//ТО ЧТО НЕ РАСПРЕДЕЛИЛОСЬ ДОБАВИМ ОТДЕЛЬНО
	//ПРИ ЭТОМ МОГУТ БЫТЬ КАК ЛИШНИЕ МАРКИ, ТАК И ЛИШНИЕ ТОВАРЫ
	
	|////////////////////////////////////////////////////////////////////////////////
	//1) СОПОСТАВЛЕНО ПОЛНОСТЬЮ
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаркиЗадания.Номенклатура КАК Номенклатура,
	|	МаркиЗадания.Характеристика КАК Характеристика,
	|	МаркиЗадания.Серия КАК Серия,
	|	МаркиЗадания.Коэффициент КАК Количество,
	|	МаркиЗадания.Марка КАК Марка,
	|	МаркиЗадания.Короб КАК Короб,
	|	МаркиЗадания.Палета КАК Палета,
	|	ТоварыЗадания.Цена КАК Цена,
	|	ТоварыЗадания.Лимит КАК Лимит,
	|	ТоварыЗадания.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ИтоговыеДанные
	|ИЗ
	|	МаркиЗадания КАК МаркиЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗадания КАК ТоварыЗадания
	|		ПО МаркиЗадания.Номенклатура = ТоварыЗадания.Номенклатура
	|			И МаркиЗадания.Характеристика = ТоварыЗадания.Характеристика
	|				И  МаркиЗадания.Серия = ТоварыЗадания.Серия
	|ГДЕ
	|	НЕ ТоварыЗадания.Номенклатура ЕСТЬ NULL
	|	И НЕ МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	//2) МАРКИ С НЕОПРЕДЕЛЕННОЙ НОМЕНКЛАТУРОЙ (НЕУНИКАЛЬНЫЕ ШТРИХКОДЫ)
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	МаркиЗадания.Коэффициент КАК Количество,
	|	МаркиЗадания.Марка КАК Марка,
	|	МаркиЗадания.Короб КАК Короб,
	|	МаркиЗадания.Палета КАК Палета,
	|	0 КАК Цена,
	|	0 КАК Лимит,
	|	77777 КАК НомерСтроки
	|ИЗ
	|	МаркиЗадания КАК МаркиЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗадания КАК ТоварыЗадания
	|		ПО МаркиЗадания.Номенклатура = ТоварыЗадания.Номенклатура
	|			И МаркиЗадания.Характеристика = ТоварыЗадания.Характеристика
	|				И  МаркиЗадания.Серия = ТоварыЗадания.Серия
	|ГДЕ
	|	ТоварыЗадания.Номенклатура ЕСТЬ NULL
	|	И НЕ МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	//3) МАРКИ С НЕОПРЕДЕЛЕННОЙ НОМЕНКЛАТУРОЙ (УПРОЩЕНКА)
	|ВЫБРАТЬ
	|	МаркиЗадания.Номенклатура,
	|	МаркиЗадания.Характеристика,
	|	МаркиЗадания.Серия,
	|	МаркиЗадания.Коэффициент,
	|	МаркиЗадания.Марка,
	|	МаркиЗадания.Короб,
	|	МаркиЗадания.Палета,
	|	0,
	|	0,
	|	99999
	|ИЗ
	|	МаркиЗадания КАК МаркиЗадания
	|ГДЕ
	|	МаркиЗадания.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|				      
	//4) СТРОКИ ЗАДАНИЯ БЕЗ МАРОК (ВРЕМЕННО ВОЗМОЖНО ЧАСТИЧНОЕ УКАЗАНИЕ МАРОК)
	|ВЫБРАТЬ
	|	ТоварыЗадания.Номенклатура,
	|	ТоварыЗадания.Характеристика,
	|	ТоварыЗадания.Серия,
	|	ТоварыЗадания.Количество - ЕСТЬNULL(КоличествоМарокЗадания.Количество, 0),
	|	"""",
	|	"""",
	|	"""",
	|	ТоварыЗадания.Цена,
	|	ТоварыЗадания.Лимит,
	|	ТоварыЗадания.НомерСтроки
	|ИЗ
	|	ТоварыЗадания КАК ТоварыЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоМарокЗадания КАК КоличествоМарокЗадания
	|		ПО ТоварыЗадания.Номенклатура = КоличествоМарокЗадания.Номенклатура
	|			И ТоварыЗадания.Характеристика = КоличествоМарокЗадания.Характеристика
	|				И  ТоварыЗадания.Серия = КоличествоМарокЗадания.Серия
	|ГДЕ
	|	ТоварыЗадания.Количество - ЕСТЬNULL(КоличествоМарокЗадания.Количество, 0) > 0
	|;
	|
	
	//ИТОГ
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговыеДанные.Номенклатура КАК Номенклатура,
	|	ИтоговыеДанные.Характеристика КАК Характеристика,
	|	ИтоговыеДанные.Серия КАК Серия,
	|	ИтоговыеДанные.Количество КАК Количество,
	|	ИтоговыеДанные.Марка КАК Марка,
	|	ИтоговыеДанные.Короб КАК Короб,
	|	ИтоговыеДанные.Палета КАК Палета,
	|	ИтоговыеДанные.Цена КАК Цена,
	|	ИтоговыеДанные.Лимит КАК Лимит,
	|	ИтоговыеДанные.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ИтоговыеДанные КАК ИтоговыеДанные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИтоговыеДанные.НомерСтроки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ШтрихкодыУпаковокТоваровКоробаПалеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ШтрихкодыУпаковокТоваровКороба
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ШтрихкодыУпаковокТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗначенияШтрихкодовТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаркиЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоМарокЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтоговыеДанные";
	
	Запрос.УстановитьПараметр("ИсходныйДокумент", лИсходныйДокумент);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ПриобретениеТоваровУслуг.","." + лВидДокумента + ".");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Товары КАК ","." + лИмяТабличнойЧастиПодбор + " КАК ");
	
	//Если у документа есть склад берем остатки по складу документа иначе все склады
	СписокСкладов = Новый Массив;
	
	Попытка 
		ТекущийСклад = лИсходныйДокумент.Склад;
		СписокСкладов.Добавить(ТекущийСклад);
	Исключение
	КонецПопытки;
	
	Запрос.УстановитьПараметр("Склады"   , СписокСкладов);
	Запрос.УстановитьПараметр("ВсеСклады", СписокСкладов.Количество() = 0);	
	
	МетаданныеДокументаТЧПодбор = Метаданные.Документы[лВидДокумента].ТабличныеЧасти[лИмяТабличнойЧастиПодбор];
	
	Попытка
		ЕстьЦены = МетаданныеДокументаТЧПодбор.Реквизиты.Найти("Цена") <> Неопределено;
	Исключение
		ЕстьЦены = Ложь;
	КонецПопытки; 
	
	Если ЕстьЦены Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЦена", "ТаблицаТоваровВДокументе.Цена");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЦена", "0");
	КонецЕсли;	
	
	Попытка
		ЕстьСерии = МетаданныеДокументаТЧПодбор.Реквизиты.Найти("Серия") <> Неопределено;
	Исключение
		ЕстьСерии = Ложь;
	КонецПопытки;
	
	Если ЕстьСерии Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСерия", "ТаблицаТоваровВДокументе.Серия");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСерия", "Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)");
	КонецЕсли;	
	
	Попытка
		ЕстьКоличествоУпаковок = МетаданныеДокументаТЧПодбор.Реквизиты.Найти("КоличествоУпаковок") <> Неопределено;
	Исключение
		ЕстьКоличествоУпаковок = Ложь;
	КонецПопытки;
	
	Если Не ЕстьКоличествоУпаковок Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаТоваровВДокументе.КоличествоУпаковок", "ТаблицаТоваровВДокументе.Количество");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипМаркированнойПродукции(лНоменклатура)
	
	ТипПродукции = 0;
	
	Попытка
		ПродукцияИСМП = Новый Массив;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины); Исключение КонецПопытки;

		ПродукцияИСМП_Молочка = Новый Массив;
		Попытка ПродукцияИСМП_Молочка.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Молочка.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Молочка.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС); Исключение КонецПопытки;
	
		ПродукцияИСМП_Табак = Новый Массив;
		Попытка ПродукцияИСМП_Табак.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Табак.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Табак.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция); Исключение КонецПопытки;
				
		ПродукцияИСМП_Вода = Новый Массив;
		Попытка ПродукцияИСМП_Вода.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода); Исключение КонецПопытки;
		
		ПродукцияИСМП_Пиво = Новый Массив;
		Попытка ПродукцияИСМП_Пиво.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Пиво); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Пиво.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво); Исключение КонецПопытки;
		
		ПродукцияИСМП_Мех = Новый Массив;
		Попытка ПродукцияИСМП_Мех.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха); Исключение КонецПопытки;
		
		ПродукцияИСМП_СоковаяПродукция = Новый Массив;
		Попытка ПродукцияИСМП_СоковаяПродукция.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.СоковаяПродукция); Исключение КонецПопытки;
		
		ПродукцияИСМП_Морепродукты = Новый Массив;
		Попытка ПродукцияИСМП_Морепродукты.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС); Исключение КонецПопытки;
		
		Если ПродукцияИСМП_Табак.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Табак.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
		    ТипПродукции = 1; // Табак	
		ИначеЕсли лНоменклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты 
			Или лНоменклатура.ВидНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты Тогда
			ТипПродукции = 4;  // Фотоаппараты
		ИначеЕсли ПродукцияИСМП_Молочка.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Молочка.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
		    ТипПродукции = 5; // Молочка		
		ИначеЕсли ПродукцияИСМП.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
		    ТипПродукции = 2; // Обувь и прочее
		ИначеЕсли ПродукцияИСМП_Вода.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Вода.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 8; // Вода
		ИначеЕсли ПродукцияИСМП_Пиво.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Пиво.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 10; // Пиво
		ИначеЕсли ПродукцияИСМП_Мех.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Мех.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 11; // Товары из натурального меха
		ИначеЕсли ПродукцияИСМП_СоковаяПродукция.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_СоковаяПродукция.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 12; // Соковая продукция
		ИначеЕсли ПродукцияИСМП_Морепродукты.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Морепродукты.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 13; // Морепродукты	
		КонецЕсли;			
	Исключение
	КонецПопытки;
	
	Попытка
		Если ЕстьМДЛП() И ТипПродукции = 0  Тогда
			Если лНоменклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.УАС_МДЛП 
				Или лНоменклатура.ВидНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.УАС_МДЛП Тогда
					ТипПродукции = 3;  // МДЛП
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
				
	Возврат ТипПродукции;

КонецФункции

&НаСервере
Функция ПолучитьТаблицуТЗНоменклатурССериямиПоОтдельнойТЧ(ДокументВыгрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслугСерии.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугСерии.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугСерии.Серия КАК Серия,
	|	РеализацияТоваровУслугСерии.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_Серии
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Серии КАК РеализацияТоваровУслугСерии
	|ГДЕ
	|	РеализацияТоваровУслугСерии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.) КАК Серия
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|	И НЕ РеализацияТоваровУслугТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТ_Серии.Номенклатура КАК Номенклатура
	|				ИЗ
	|					ВТ_Серии КАК ВТ_Серии)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	ВТ_Серии.Количество,
	|	ВТ_Серии.Серия
	|ИЗ
	|	ВТ_Серии КАК ВТ_Серии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО ВТ_Серии.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
	|			И ВТ_Серии.Характеристика = РеализацияТоваровУслугТовары.Характеристика
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументВыгрузки);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

&НаСервереБезКонтекста
Функция ДатаМобайл_Маркировка_ТребуетсяСпецОбработка(Шаблон) Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("ПриобретениеТоваровУслуг");
	Список.Добавить("РеализацияТоваровУслуг");
	Список.Добавить("МаркировкаТоваровИСМП");
	Список.Добавить("УпаковочныйЛист");
	Список.Добавить("ОтгрузкаТоваровИСМП");
	Список.Добавить("ПриемкаТоваровИСМП");
	Список.Добавить("ВозвратТоваровПоставщику");
	Список.Добавить("ВыводИзОборотаИСМП");
	Список.Добавить("ВозвратТоваровОтКлиента");
	Список.Добавить("ВозвратВОборотИСМП");
	Список.Добавить("ЧекККМ");
	Список.Добавить("ПередачаТоваровМеждуОрганизациями"); 
	Список.Добавить("РасходныйОрдерНаТовары");
	Список.Добавить("ПриходныйОрдерНаТовары");
	
	Возврат (Список.НайтиПоЗначению(Шаблон.ВидДокумента) <> Неопределено);
	
КонецФункции

&НаСервере
Функция ПолучитьДокументМаркировки(ИсходныйДокумент, ТекстДокументаТСД, Шаблон,ЭтоНовыйДокумент)
	
	МаркиУказаныПоставщиком = Ложь;
	Если Шаблон.ВидДокумента = "ВозвратТоваровОтКлиента" Тогда
		Если ИсходныйДокумент.ШтрихкодыУпаковок.Количество() > 0 Тогда
			МаркиУказаныПоставщиком = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	ТЧПодборНеИзменять = (Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 0);
	
	Если Шаблон.ВидДокумента = "ВозвратВОборотИСМП" Тогда
		
		Возврат ОбработатьВидДокументаВозвратВОборотИСМП(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);
		
	ИначеЕсли Шаблон.ВидДокумента = "ЧекККМ" Тогда
		
		Возврат ОбработатьВидДокументаЧекККМ(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);
		
	ИначеЕсли (Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" И ТЧПодборНеИзменять) 
		Или (Шаблон.ВидДокумента = "ПриемкаТоваровИСМП" И ТЧПодборНеИзменять)
		Или (Шаблон.ВидДокумента = "ВозвратТоваровОтКлиента" И (МаркиУказаныПоставщиком Или ТЧПодборНеИзменять)) 
		Тогда
		
		Возврат ОбработатьВидДокументаПриобретениеТоваровУслуг(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);
		
	ИначеЕсли (Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" И Не ТЧПодборНеИзменять) 
		Или (Шаблон.ВидДокумента = "ПриемкаТоваровИСМП" И Не ТЧПодборНеИзменять) Тогда
		
		Возврат ОбработатьВидДокументаПриемкаТоваровИСМП(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);
		
	ИначеЕсли Шаблон.ВидДокумента = "РеализацияТоваровУслуг" 
		Или Шаблон.ВидДокумента = "ОтгрузкаТоваровИСМП" 
		Или Шаблон.ВидДокумента = "ВозвратТоваровПоставщику"
		Или (Шаблон.ВидДокумента = "ВозвратТоваровОтКлиента" И (Не МаркиУказаныПоставщиком Или Не ТЧПодборНеИзменять)) 
		Или Шаблон.ВидДокумента = "ВыводИзОборотаИСМП"
		Или Шаблон.ВидДокумента = "ПередачаТоваровМеждуОрганизациями"
		Или Шаблон.ВидДокумента = "РасходныйОрдерНаТовары"
		Или Шаблон.ВидДокумента = "ПриходныйОрдерНаТовары" Тогда
		
		Возврат ОбработатьВидДокументаРеализацияТоваровУслуг(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);
		
	ИначеЕсли Шаблон.ВидДокумента = "МаркировкаТоваровИСМП" Тогда
		
		Возврат ОбработатьВидДокументаМаркировкаТоваровИСМП(ИсходныйДокумент, ТекстДокументаТСД, Шаблон,ЭтоНовыйДокумент);
		
	ИначеЕсли Шаблон.ВидДокумента = "УпаковочныйЛист" Тогда
		
		ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент);
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗагрузитьКодыМаркировки(ИсходныйДокумент, ТекстДокументаТСД, Шаблон,ЭтоНовыйДокумент)
	
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	
КонецФункции

&НаСервере
Функция ОбработатьВидДокументаПриобретениеТоваровУслуг(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	
	
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
	
	Попытка ЗаполнитьКомментарийДокумента(ТекстДокументаТСД, ИсходныйДокумент); Исключение КонецПопытки;

	Попытка 
		ЗаполнитьПараметрыАвтозагрузки(Шаблон, ИсходныйДокумент);
	Исключение 
	КонецПопытки; 
	
	ИсходныйДокумент.Записать();
	
	ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
	
	Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл		
		РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент, Шаблон, ВидМаркируемойПродукции);
		
		Если РезультатПроверки <> Неопределено Тогда
			ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
			ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции, РезультатПроверки.ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок,, Истина);
			СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции);			
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ИсходныйДокумент.Ссылка;	
	
КонецФункции

&НаСервере
Функция ОбработатьВидДокументаПриемкаТоваровИСМП(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	
	Если ИсходныйДокумент.ЭтоНовый() Тогда
		ЗаполнитьШапкуДокумента(ТекстДокументаТСД, ИсходныйДокумент, Шаблон);	
	КонецЕсли;
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		ОбработатьИзменениеТЧПодбор(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	КонецЕсли;
	
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	
	Попытка ЗаполнитьКомментарийДокумента(ТекстДокументаТСД, ИсходныйДокумент); Исключение КонецПопытки;

	Попытка 
		ЗаполнитьПараметрыАвтозагрузки(Шаблон, ИсходныйДокумент);
	Исключение 
	КонецПопытки;  
	
	ИсходныйДокумент.Записать();
	
	Если Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг"  Тогда		
		СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
		СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
		
		ИсходныйДокумент.Записать();
		
		ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
		
		Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл			
			РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент, Шаблон, ВидМаркируемойПродукции);
			
			Если РезультатПроверки <> Неопределено Тогда
				ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
				ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции,РезультатПроверки.ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок,, Истина);
				СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции);			
			КонецЕсли;			
		КонецЦикла;
		
	ИначеЕсли Шаблон.ВидДокумента = "ПриемкаТоваровИСМП" Тогда		
		СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
		СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
		ИсходныйДокумент.Записать();
		
		ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
		
		Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл			
			РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент, Шаблон, ВидМаркируемойПродукции);
			
			Если РезультатПроверки <> Неопределено Тогда
				ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
				ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции,РезультатПроверки.ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок,, Истина);		
				СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции);	
			КонецЕсли;			
		КонецЦикла;		
	КонецЕсли;
	
	Возврат ИсходныйДокумент.Ссылка;	
	
КонецФункции

&НаСервере
Функция ОбработатьВидДокументаРеализацияТоваровУслуг(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	ТЧПриЗагрузкеПодбор 	= Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор 			= Шаблон.ИмяТабличнойЧастиПодбор;
	ЗаписыватьПолныйКМ      = Шаблон.МаркировкаЗаписыватьПолныйКМ;
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД,,, Шаблон);
	
	Если ЭтоНовыйДокумент Тогда
		ЗаполнитьШапкуДокумента(ТекстДокументаТСД, ИсходныйДокумент, Шаблон);	
	КонецЕсли;
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		ОбработатьИзменениеТЧПодбор(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	КонецЕсли;
	
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
	
	Попытка ЗаполнитьКомментарийДокумента(ТекстДокументаТСД, ИсходныйДокумент); Исключение КонецПопытки;

	Попытка 
		ЗаполнитьПараметрыАвтозагрузки(Шаблон, ИсходныйДокумент);
	Исключение 
	КонецПопытки;
	
	ИсходныйДокумент.Записать();
	
	Если ЗаписыватьПолныйКМ Тогда
		МассивПолныйКМ = СформироватьМассивПараметровПоПолномуКМ(ИсходныйДокумент, ТабДокТСД);
		
		Для каждого СтрокаМассива Из МассивПолныйКМ Цикл
			РучнойВводШтрихкодаЗавершение(СтрокаМассива, Неопределено);		
		КонецЦикла;
	КонецЕсли;
	
	ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
	
	Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл		
		РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент, Шаблон, ВидМаркируемойПродукции);
		
		Если РезультатПроверки <> Неопределено Тогда
			ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
			ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции, РезультатПроверки.ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок);		
			СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции);		
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ИсходныйДокумент.Ссылка;	
	
КонецФункции

&НаСервере
Функция ОбработатьВидДокументаЧекККМ(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	ТЧПриЗагрузкеПодбор 	= Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор 			= Шаблон.ИмяТабличнойЧастиПодбор;
	ЗаписыватьПолныйКМ      = Шаблон.МаркировкаЗаписыватьПолныйКМ;
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	
	Если ЭтоНовыйДокумент Тогда
		ЗаполнитьШапкуДокумента(ТекстДокументаТСД, ИсходныйДокумент, Шаблон);	
	КонецЕсли;
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		ОбработатьИзменениеТЧПодбор(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	КонецЕсли;
	
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;	
	
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	
	СоздатьСтрокиАкцизныхМарокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
	СоздатьСтрокиАкцизныхМарокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
	
	Попытка ЗаполнитьКомментарийДокумента(ТекстДокументаТСД, ИсходныйДокумент); Исключение КонецПопытки;

	Попытка 
		ЗаполнитьПараметрыАвтозагрузки(Шаблон, ИсходныйДокумент);
	Исключение 
	КонецПопытки;
	
	ИсходныйДокумент.Записать();
	
	Если ЗаписыватьПолныйКМ Тогда
		МассивПолныйКМ = СформироватьМассивПараметровПоПолномуКМ(ИсходныйДокумент, ТабДокТСД);
		
		Для каждого СтрокаМассива Из МассивПолныйКМ Цикл
			РучнойВводШтрихкодаЗавершение(СтрокаМассива, Неопределено);		
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИсходныйДокумент.Ссылка;	
	
КонецФункции

&НаСервере
Функция ОбработатьВидДокументаВозвратВОборотИСМП(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	
	Если ЭтоНовыйДокумент Тогда
		ЗаполнитьШапкуДокумента(ТекстДокументаТСД, ИсходныйДокумент, Шаблон);	
	КонецЕсли;	
	
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;		
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	
	Для каждого Марка Из СтруктураСобранныхМарокИУпаковок.Марки Цикл
		Если ЗначениеЗаполнено(Марка) Тогда			
			СтрокаТабличнойЧасти = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
			СтрокаТабличнойЧасти.КодМаркировки          = Марка;
			СтрокаТабличнойЧасти.Номенклатура           = Марка.Номенклатура;
			СтрокаТабличнойЧасти.Характеристика         = Марка.Характеристика;
			СтрокаТабличнойЧасти.Серия                  = Марка.Серия;			
			СтрокаТабличнойЧасти.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументовИСМП.Прочее;		
			
			ОбработатьНовуюСтрокуТЧ(ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти);			
		КонецЕсли;
	КонецЦикла;
	
	Попытка ЗаполнитьКомментарийДокумента(ТекстДокументаТСД, ИсходныйДокумент); Исключение КонецПопытки;

	Попытка 
		ЗаполнитьПараметрыАвтозагрузки(Шаблон, ИсходныйДокумент);
	Исключение 
	КонецПопытки;
	
	ИсходныйДокумент.Записать();

	Возврат ИсходныйДокумент.Ссылка;	
	
КонецФункции

&НаСервере
Процедура ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент, МассивКоробовУпаковочныхЛистов = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПрефиксКомпанииGS1) Тогда		
		ВызватьИсключение "Ошибка: Не заполнен Префикс компании GS1";		
	КонецЕсли;
	
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД);
	
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена, Истина);
	
	ТабУпаковок = ТабДокТСД.Скопировать();
	ТабУпаковок.Свернуть("УпаковочныйЛист");
	
	Для каждого СтрУпаковка Из ТабУпаковок Цикл		
		ТабМарок = ТабДокТСД.НайтиСтроки(Новый Структура("УпаковочныйЛист", СтрУпаковка.УпаковочныйЛист));
		
		УпаковкаОбъект = НайтиИлиСоздатьУпаковкаОбъект(СтрУпаковка.УпаковочныйЛист, ПолучитьСледующийНомерSSCC(0, ПрефиксКомпанииGS1));
		
		ЭтоПерваяИтерация = Истина;
		
		Для каждого СтрМарка Из ТабМарок Цикл			
			Если ЭтоПерваяИтерация И НужноЗаполнитьУпаковкаОбъект(УпаковкаОбъект) Тогда
				ЗаполнитьУпаковкаОбъект(УпаковкаОбъект, СтрМарка);
				ЭтоПерваяИтерация = Ложь;
			КонецЕсли;
			
			СсылкаМарка = ПолучитьСсылкаМарка(СтрМарка.Марка, СтрМарка.Номенклатура, СтрМарка.ХарактеристикаНоменклатуры, СтрМарка.KM_RawMrc, СтрМарка.KM_TNVED, СтрМарка.ЦРПТМарка_Длина);
			
			ПроверитьМаркаНаходитсяВДругомКоробе(СсылкаМарка,УпаковкаОбъект.Ссылка);
			
			Если СсылкаМарка <> Неопределено Тогда
				РезультатПоиска = УпаковкаОбъект.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", СсылкаМарка));
				
				Если РезультатПоиска.Количество() = 0 Тогда
					НовыйВложенныйШтрихкод = УпаковкаОбъект.ВложенныеШтрихкоды.Добавить();
					НовыйВложенныйШтрихкод.Штрихкод = СсылкаМарка;
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		
		УпаковкаОбъект.Записать();
		
		Если МассивКоробовУпаковочныхЛистов <> Неопределено Тогда
			МассивКоробовУпаковочныхЛистов.Добавить(УпаковкаОбъект.Ссылка);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВидДокументаМаркировкаТоваровИСМП(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент)
	
	ТЧПриЗагрузкеПодбор        	= Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор                	= Шаблон.ИмяТабличнойЧастиПодбор;
	СоздаватьЕслиНеНайдена     	= Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	ЗаписыватьПолныйКМ         	= Шаблон.МаркировкаЗаписыватьПолныйКМ;
	ИспользованиеУпаковочныхЛистов = Шаблон.ИспользованиеУпаковочныхЛистовПодбор;
								
	Если ЭтоНовыйДокумент Тогда		
		ИсходныйДокумент.Дата = ТекущаяДата();
		
		Если ЗначениеЗаполнено(ОперацияИСМП) Тогда
			ИсходныйДокумент.Операция = ОперацияИСМП;
		Иначе
			ИсходныйДокумент.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ИсходныйДокумент.Организация = Организация;
		Иначе 
			ВыборкаНастройкиОбменаСУЗ =	РегистрыСведений.НастройкиОбменаСУЗ.Выбрать();
			
			Если ВыборкаНастройкиОбменаСУЗ.Следующий() Тогда
				ИсходныйДокумент.Организация = ВыборкаНастройкиОбменаСУЗ.Организация;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользованиеУпаковочныхЛистов > 0 Тогда
		МассивКоробовУпаковочныхЛистов = Новый Массив;
		ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист(ИсходныйДокумент, ТекстДокументаТСД, Шаблон, ЭтоНовыйДокумент, МассивКоробовУпаковочныхЛистов);	
	КонецЕсли;	
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	ТабДокТСД = ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД, ИспользованиеУпаковочныхЛистов > 0);
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда		
		ОбработатьИзменениеТЧПодбор(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);		
	КонецЕсли;	

	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена);
	
	Если ИспользованиеУпаковочныхЛистов > 0 Тогда
		Для каждого СтрокаМассива Из МассивКоробовУпаковочныхЛистов Цикл
			Если СтруктураСобранныхМарокИУпаковок.Короба.Найти(СтрокаМассива) = Неопределено Тогда
				СтруктураСобранныхМарокИУпаковок.Короба.Добавить(СтрокаМассива);	
			КонецЕсли;		
		КонецЦикла;		
	КонецЕсли;
	
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
	
	Попытка ЗаполнитьКомментарийДокумента(ТекстДокументаТСД, ИсходныйДокумент); Исключение КонецПопытки;

	Попытка 
		ЗаполнитьПараметрыАвтозагрузки(Шаблон, ИсходныйДокумент);
	Исключение 
	КонецПопытки;
	
	ИсходныйДокумент.Записать();
	
	Если ЭтоНовыйДокумент Тогда
		ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
		
		Если ЗначениеЗаполнено(ВидМаркируемойПродукцииДокументаМассив[0]) Тогда
			ИсходныйДокумент.ВидПродукции = ВидМаркируемойПродукцииДокументаМассив[0];
			ИсходныйДокумент.Записать();	
		КонецЕсли; 
	КонецЕсли;
    
    ЭтоМолочка = Ложь;
	
	Если ИсходныйДокумент.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Или ИсходныйДокумент.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		ЭтоМолочка = Истина;	
	КонецЕсли;
	
	ОтчетПроизводственнойЛинии = ИсходныйДокумент.ОтчетПроизводственнойЛинии;
	
	Если ЭтоМолочка И ОтчетПроизводственнойЛинии Тогда		
		Если ИсходныйДокумент.Товары.Количество() > 0 Тогда
			ИсходныйДокумент.Товары.Очистить();	
		КонецЕсли;
		
		ТЗСобранныеДанныеМарки = ТабДокТСД.Скопировать();
		ТЗСобранныеДанныеМарки.Свернуть("Номенклатура, ЕдиницаИзмерения, Марка, ЦРПТМарка_Длина, УпаковочныйЛист, KM_RawMrc", "Количество");
		
		ТчДанныеОтчетаПроизводственнойЛинии = ИсходныйДокумент.ДанныеОтчетаПроизводственнойЛинии;
		
		Для каждого СтрокаДока Из ТЗСобранныеДанныеМарки Цикл
			Если СтрокаДока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ = ТчДанныеОтчетаПроизводственнойЛинии.Добавить();
			СтрокаТЧ.ЗначениеШтрихкода        	= СтрокаДока.Марка;
			СтрокаТЧ.ЗначениеШтрихкодаУпаковки  = СтрокаДока.УпаковочныйЛист;			
		КонецЦикла;	
	КонецЕсли;
	
	ИсходныйДокумент.Записать();
    
    Если ЗаписыватьПолныйКМ Тогда
		МассивПолныйКМ = СформироватьМассивПараметровПоПолномуКМ(ИсходныйДокумент, ТабДокТСД);
		
		Для каждого СтрокаМассива Из МассивПолныйКМ Цикл
			РучнойВводШтрихкодаЗавершение(СтрокаМассива, Неопределено);		
		КонецЦикла;
	КонецЕсли;
    
	ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент);
	
	Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл		
		РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент, Шаблон, ВидМаркируемойПродукции);
		
		Если РезультатПроверки <> Неопределено Тогда
			ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
			ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции, РезультатПроверки.ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок);	
			СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции);	
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ИсходныйДокумент.Ссылка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКомментарийДокумента(ТекстДокументТСД, ИсходныйДокумент)
	
	СтрокаДока = ТекстДокументТСД.ПолучитьСтроку(1);
	СтрокаДока = СтрЗаменить(СтрокаДока, ";", Символы.ПС);
	КомментарийДокумента = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(СтрокаДока, 3));
	ИсходныйДокумент.Комментарий = "Выполнено в DataMobile " + ТекущаяДата() + " (" + КомментарийДокумента + ")";
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьМаркируемыеТовары(ПодобраннаяМаркируемаяПродукция)
	
	Для каждого СтрПродукция Из ПодобраннаяМаркируемаяПродукция Цикл
		Если ЗначениеЗаполнено(СтрПродукция.Характеристика) Тогда
			СтрПродукция.ХарактеристикиИспользуются = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуДокумента(ТекстДокументаТСД, Док, Шаблон)
	
	СтрокаДока = ТекстДокументаТСД.ПолучитьСтроку(1);
	СтрокаДока = СтрЗаменить(СтрокаДока, ";", Символы.ПС);
	ИдентификаторПартнера = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока, 6), "[59]", ";");
	ИдентификаторСклада = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока, 8), "[59]", ";");
	ИдентификаторСклада2 = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока, 12), "[59]", ";");
	
	Если ЗначениеЗаполнено(Организация) Тогда		
		Док.Организация = Организация;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторПартнера) Тогда
		Клиент = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПартнера));
	Иначе
		Клиент = Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСклада) Тогда
		Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСклада));
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Попытка
		ЗагруженныйСклад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСклада));
		
		Если ЗагруженныйСклад <> Док.СкладОтправитель Тогда
			Док.СкладОтправитель = ЗагруженныйСклад; 	
		КонецЕсли;
		
		ЗагруженныйСклад2 = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСклада2));
		
		Если ЗагруженныйСклад2 <> Док.СкладПолучатель Тогда
			Док.СкладПолучатель = ЗагруженныйСклад2; 	
		КонецЕсли;			
	Исключение			    
	КонецПопытки;
	
	Док.Дата = ТекущаяДата();
	
	Попытка
		Если ЗначениеЗаполнено(Клиент) Тогда
			Док.Партнер = Клиент;
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Док.Партнер, Док.Контрагент);
			
			Если ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Или ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				
				Док.ЗаполнитьУсловияПродажПоУмолчанию();
				Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате;
				Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				
			ИначеЕсли ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Или ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Док.ЗаполнитьУсловияЗакупокПоУмолчанию();
				Док.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, Док.Договор);
				
			ИначеЕсли ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
				Док.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	СкладЗаписан = Ложь;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Если Не СкладЗаписан Тогда
			Попытка
				Док.Склад = Склад;
				СкладЗаписан = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если Не СкладЗаписан Тогда
			Попытка
				Док.СкладОтправитель = Склад;
				СкладЗаписан = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если Не СкладЗаписан Тогда
			Попытка
				Док.ТорговыйОбъект= Склад;
				СкладЗаписан = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеТЧПодбор(ТабДокТСД, ИсходныйДокумент, ИмяТЧПодбор, ТабличнуюЧастьПриЗагрузкеПодбор)
	
	МетаданныеДокумента   = ИсходныйДокумент.Метаданные();
	МетаданныеРеквизитыТЧ = МетаданныеДокумента.ТабличныеЧасти[ИмяТЧПодбор].Реквизиты;
	ИмяДока               = МетаданныеДокумента.Имя;
	
	ТЗСобранныеДанныеПодбор = ТабДокТСД.Скопировать();
	ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, KM_GTIN", "Количество");
	
	лЕстьGTIN = (МетаданныеРеквизитыТЧ.Найти("GTIN") <> Неопределено);
	
	Если Не лЕстьGTIN Тогда
		ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения", "Количество");		
	КонецЕсли;
	
	Для каждого СтрТЧ Из ТЗСобранныеДанныеПодбор Цикл		
		Если СтрТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		лЕстьУпаковка = (МетаданныеРеквизитыТЧ.Найти("Упаковка") <> Неопределено) И ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения);
		лЕстьИдентификаторСтроки = (МетаданныеРеквизитыТЧ.Найти("ИдентификаторСтроки") <> Неопределено);		
		
		лСтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
		
		Если лЕстьУпаковка Тогда
			Если ИмяДока = "ПересчетТоваров" Тогда
				Если ИсходныйДокумент.Склад.ИспользоватьАдресноеХранение Или ИсходныйДокумент.Помещение.ИспользоватьАдресноеХранение Тогда
					лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.ЕдиницаИзмерения);
				КонецЕсли;	
			Иначе
				лСтруктураПоиска.Вставить("Упаковка", СтрТЧ.ЕдиницаИзмерения);
			КонецЕсли;	
		КонецЕсли;
		
		Если лЕстьGTIN Тогда
			лСтруктураПоиска.Вставить("GTIN", СтрТЧ.KM_GTIN);
		КонецЕсли; 		
		
		Если ИмяДока = "РеализацияТоваровУслуг" Тогда
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
			
			Если СтрокиПоиска.Количество() = 0 И лЕстьУпаковка Тогда
				лСтруктураПоиска.Удалить("Упаковка");
				СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);	
			КонецЕсли;
			
			//Если СтрокиПоиска.Количество() = 0 И лЕстьСерия Тогда
			//	лСтруктураПоиска.Удалить("Серия");
			//	СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
			//КонецЕсли;			
		Иначе	
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
		КонецЕсли;
			
		Если СтрокиПоиска.Количество() <> 0 Тогда			
			СтрокаТабличнойЧасти = СтрокиПоиска[0];
			
		Иначе			
			СтрокаТабличнойЧасти = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрТЧ);
			СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
			
			Если лЕстьУпаковка Тогда
				Если ИмяДока = "ПересчетТоваров" Тогда
					Если ИсходныйДокумент.Склад.ИспользоватьАдресноеХранение Или ИсходныйДокумент.Помещение.ИспользоватьАдресноеХранение Тогда
						СтрокаТабличнойЧасти.Упаковка = СтрТЧ.ЕдиницаИзмерения;
					КонецЕсли;	
				Иначе
					СтрокаТабличнойЧасти.Упаковка = СтрТЧ.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
			
			Если лЕстьGTIN Тогда
				СтрокаТабличнойЧасти.GTIN = СтрТЧ.KM_GTIN;
			КонецЕсли;	
			
			Если лЕстьИдентификаторСтроки Тогда
				СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор();
			КонецЕсли;
			
			ОбработатьНовуюСтрокуТЧ(ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти);			
		КонецЕсли;
		
		Попытка 
			КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель / СтрТЧ.ЕдиницаИзмерения.Знаменатель;
			КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
		Исключение
			КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
		Конецпопытки;    		
		
		Если ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда
			Попытка
				СтрокаТабличнойЧасти.КоличествоУпаковок = СтрТЧ.Количество;  
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
			Исключение
				СтрокаТабличнойЧасти.Количество = СтрТЧ.Количество;
			КонецПопытки;		
		Иначе
			Попытка
				СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;  
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
			Исключение
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество;
			КонецПопытки;			
		КонецЕсли;		
		
		Если МетаданныеРеквизитыТЧ.Найти("Сумма") <> Неопределено
			И МетаданныеРеквизитыТЧ.Найти("СуммаНДС") <> Неопределено
			И МетаданныеРеквизитыТЧ.Найти("СуммаСНДС") <> Неопределено Тогда
			
			Попытка ПерезаполнитьСтрокуТабТоварыПослеИзмененияКоличества(СтрокаТабличнойЧасти, ИсходныйДокумент); Исключение КонецПопытки;
			
		ИначеЕсли ИмяДока = "ЧекККМ" И МетаданныеРеквизитыТЧ.Найти("Сумма") <> Неопределено И МетаданныеРеквизитыТЧ.Найти("СуммаНДС") <> Неопределено Тогда
			Попытка ПерезаполнитьСтрокуТабТоварыПослеИзмененияКоличества(СтрокаТабличнойЧасти, ИсходныйДокумент, ИмяДока = "ЧекККМ"); Исключение КонецПопытки;	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор)
	
	ИмяИсхДокумента = ИсходныйДокумент.Метаданные().Имя;
	
	Если ТЧПриЗагрузкеПодбор = 0 Тогда
		
		Если ИмяИсхДокумента <> "ПриобретениеТоваровУслуг" И ИмяИсхДокумента <> "ПриемкаТоваровИСМП" Тогда
			Попытка ИсходныйДокумент.ШтрихкодыУпаковок.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.АкцизныеМарки.Очистить(); Исключение КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 2 Тогда
		
		Если ИмяИсхДокумента <> "ПриобретениеТоваровУслуг" И ИмяИсхДокумента <> "ПриемкаТоваровИСМП" Тогда
			Попытка ИсходныйДокумент.ШтрихкодыУпаковок.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.АкцизныеМарки.Очистить(); Исключение КонецПопытки;
		КонецЕсли;
		
		ИсходныйДокумент[ИмяТЧПодбор].Очистить();
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 3 Тогда
		
		Если  ИмяИсхДокумента <> "ПриобретениеТоваровУслуг" И ИмяИсхДокумента <> "ПриемкаТоваровИСМП" Тогда
			Попытка ИсходныйДокумент.ШтрихкодыУпаковок.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.АкцизныеМарки.Очистить(); Исключение КонецПопытки;
		КонецЕсли;
		
		Для каждого Стр Из ИсходныйДокумент[ИмяТЧПодбор] Цикл			
			Попытка Стр.Количество = 0; Исключение КонецПопытки;
			Попытка Стр.КоличествоУпаковок = 0; Исключение КонецПопытки;			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуЗначенийДокументаТСД(ТекстДокументаТСД, ЭтоУпаковка = Ложь, ЭтоМДЛП = Ложь, Шаблон = Неопределено)
	
	ТабДокТСД = Новый ТаблицаЗначений;
	ТабДокТСД.Колонки.Добавить("Номенклатура");
	ТабДокТСД.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабДокТСД.Колонки.Добавить("ЕдиницаИзмерения");
	ТабДокТСД.Колонки.Добавить("СерияСсылка");
	ТабДокТСД.Колонки.Добавить("Количество");
	ТабДокТСД.Колонки.Добавить("Марка");
	ТабДокТСД.Колонки.Добавить("KM_GTIN");	
	ТабДокТСД.Колонки.Добавить("ЦРПТМарка_Длина");
	ТабДокТСД.Колонки.Добавить("Короб");
	ТабДокТСД.Колонки.Добавить("УпаковочныйЛист");
	
	ТабДокТСД.Колонки.Добавить("KM_rawMrc");
	ТабДокТСД.Колонки.Добавить("gs1");
	ТабДокТСД.Колонки.Добавить("KM_TNVED");
	
	ТабДокТСД.Колонки.Добавить("ПолныйКодМаркировки");
	ТабДокТСД.Колонки.Добавить("КоличествоВУпаковке");
	ТабДокТСД.Колонки.Добавить("ШтрихКод");
	
	лНомерСтроки = 2;
	
	Пока лНомерСтроки <= ТекстДокументаТСД.КоличествоСтрок() Цикл		
		СтрокаДокумента = ТекстДокументаТСД.ПолучитьСтроку(лНомерСтроки);
		СтрокаДокумента = СтрЗаменить(СтрокаДокумента, ";", Символы.ПС);
		ЦРПТМарка       = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 11), "[59]", ";");
		УпаковочныйЛист = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 7), "[59]", ";");
		УпаковочныйЛист = СтрЗаменить(УпаковочныйЛист, "/////", "");
		Короб           = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 18), "[59]", ";");
		
		Если ЭтоУпаковка Тогда
			Если Короб = "" и УпаковочныйЛист <> "" Тогда
				Короб = УпаковочныйЛист;
				УпаковочныйЛист="";
			КонецЕсли;	
		КонецЕсли;
		
		KM_rawBarcode       = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 20), "[59]", ";");
		KM_GTIN             = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 21), "[59]", ";");
		KM_SN               = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 22), "[59]", ";");
		KM_rawMrc           = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 23), "[59]", ";");
		KM_decodedMrc       = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 24), "[59]", ";");
		gs1                 = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 25), "[59]", ";");
		KM_TNVED            = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 26), "[59]", ";");
		КоличествоВУпаковке = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 27), "[59]", ";");
		
		ИдентификаторТовара = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 2), "[59]", ";");
		ШтрихкодТовара      = УдалитьЛидирующиеНули(СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 3), "[59]", ";"));		
		НаименованиеТовара  = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента, 9), "[59]", ";");
		ДанныеНоменклатуры  = ПолучитьНоменклатуру(ИдентификаторТовара, ШтрихкодТовара, НаименованиеТовара);
		
		Номенклатура     = ДанныеНоменклатуры.Получить(0).Значение;
		Характеристика   = ДанныеНоменклатуры.Получить(1).Значение;
		ЕдиницаИзмерения = ДанныеНоменклатуры.Получить(2).Значение;
		
		НовСтрока = ТабДокТСД.Добавить();
		НовСтрока.Номенклатура               = Номенклатура;
		НовСтрока.ХарактеристикаНоменклатуры = Характеристика;
		НовСтрока.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		НовСтрока.СерияСсылка                = Справочники.СерииНоменклатуры.ПустаяСсылка();
		
		Если Не Шаблон = Неопределено Тогда
			СтрокаСерии = СтрЗаменить(СокрЛП(СтрПолучитьСтроку(СтрокаДокумента,4)), "[59]", ";");
			НовСтрока.СерияСсылка = ПолучитьСерию(СтрокаСерии,Номенклатура,Шаблон,Шаблон.СоздаватьСерииЕслиНеНайдены);
		КонецЕсли;
		
		Попытка
			КоличествоВУпаковке = ?(Номенклатура.ВесМожноУказыватьВДокументах, Число(КоличествоВУпаковке), 0);
		Исключение
		    КоличествоВУпаковке = 0;
		КонецПопытки;
		
		НовСтрока.КоличествоВУпаковке = КоличествоВУпаковке;
		НовСтрока.ШтрихКод            = ШтрихкодТовара;
		
		Если gs1 = "" Тогда
			ПолныйКодМаркировки = KM_RawBarcode;
		Иначе
			ПолныйКодМаркировки = gs1;	
		КонецЕсли;
		
		ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[01]", "01");
		ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[21]", "21");
		ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[91]", Символ(29) + "91");
		ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[92]", Символ(29) + "92");
		ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[93]", Символ(29) + "93");
		НовСтрока.ПолныйКодМаркировки = ПолныйКодМаркировки;
		
		ТекущееКоличество = СтрЗаменить(СтрПолучитьСтроку(СтрокаДокумента,6), "[59]", ";");		
		ТекущееКоличество = СтрЗаменить(ТекущееКоличество, ",", ".");
		Попытка ТекущееКоличество = Число(ТекущееКоличество); Исключение ТекущееКоличество = 1; КонецПопытки; 
		НовСтрока.Количество = ТекущееКоличество;
		
		ЦРПТМарка_Длина = СтрДлина(ЦРПТМарка);
		
		Если ЦРПТМарка_Длина = 21 Тогда
			ИзвлеченнаяМарка = ЦРПТМарка;
			KM_GTIN = Сред(ЦРПТМарка, 1, 14);
		ИначеЕсли ЦРПТМарка_Длина = 25 Тогда
			ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 7);
			KM_GTIN = Сред(ЦРПТМарка, 3, 14);
		ИначеЕсли ЦРПТМарка_Длина = 24 Тогда
			ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 6);
			KM_GTIN = Сред(ЦРПТМарка, 3, 14);
		ИначеЕсли ЦРПТМарка_Длина = 38 Тогда
			ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 20);
			KM_GTIN = Сред(ЦРПТМарка, 3, 14);	
		ИначеЕсли ЦРПТМарка_Длина = 31 Тогда
			ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 13);
			KM_GTIN = Сред(ЦРПТМарка, 3, 14);
		ИначеЕсли ЦРПТМарка_Длина = 32 Тогда
			ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 14);
			KM_GTIN = Сред(ЦРПТМарка, 3, 14);	
		ИначеЕсли ЦРПТМарка_Длина = 0 Тогда
			ИзвлеченнаяМарка = ЦРПТМарка;
			KM_GTIN = "";
		ИначеЕсли ЦРПТМарка_Длина = 44 Или ЦРПТМарка_Длина = 45 Или ЦРПТМарка_Длина = 46 Тогда
			ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 12);
			KM_GTIN = "";
		ИначеЕсли ЦРПТМарка_Длина = 54 Или ЦРПТМарка_Длина = 55 Или ЦРПТМарка_Длина = 56 Тогда
			ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 16);
			KM_GTIN = "";
		ИначеЕсли ЦРПТМарка_Длина = 20 И ЭтоМДЛП Тогда
			ИзвлеченнаяМарка = Прав(ЦРПТМарка, 18);
			KM_GTIN = "";	
		Иначе
			ИзвлеченнаяМарка = "(01)" + Сред(ЦРПТМарка, 3, 14) + "(21)" + Сред(ЦРПТМарка, 19, 13);
			KM_GTIN = "";
		КонецЕсли;
		
		KM_GTIN = УдалитьЛидирующиеНули(KM_GTIN);
		
		Если Лев(KM_GTIN,2) = "29" Тогда
			KM_GTIN = НайтиGTINТовара(Номенклатура, Характеристика); 
		КонецЕсли;	
		
		НовСтрока.KM_GTIN         = KM_GTIN;
		НовСтрока.Марка           = ИзвлеченнаяМарка;
		НовСтрока.ЦРПТМарка_Длина = ЦРПТМарка_Длина;
		
		Если Короб = "" Тогда
			ИзвлеченныйКороб = "";
		ИначеЕсли Лев(Короб,2) = "00" И СтрДлина(Короб) = 20 Тогда
			ИзвлеченныйКороб = "(00)" + Сред(Короб, 3, 18);
		Иначе
			ИзвлеченныйКороб = Короб;
		КонецЕсли;
		
		НовСтрока.Короб = ИзвлеченныйКороб;       		
		
		Если УпаковочныйЛист = "" Тогда
			ИзвлеченныйУпаковочныйЛист = "";
		ИначеЕсли Лев(УпаковочныйЛист,2) = "00" И СтрДлина(УпаковочныйЛист) = 20 Тогда
			ИзвлеченныйУпаковочныйЛист = "(00)" + Сред(УпаковочныйЛист, 3, 18);
		Иначе
			ИзвлеченныйУпаковочныйЛист = УпаковочныйЛист;
		КонецЕсли;
		
		НовСтрока.УпаковочныйЛист = ИзвлеченныйУпаковочныйЛист;
		
		НовСтрока.KM_rawMrc = KM_rawMrc;
		НовСтрока.gs1       = gs1;
		НовСтрока.KM_TNVED  = KM_TNVED;
		
		лНомерСтроки = лНомерСтроки + 1;		
	КонецЦикла;
	
	Возврат ТабДокТСД;
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьЛидирующиеНули(Строка)
	
	СтрокаБезНулей = Строка;
	
	Пока Лев(СтрокаБезНулей,1) = "0" Цикл
		СтрокаБезНулей = Прав(СтрокаБезНулей, СтрДлина(СтрокаБезНулей) - 1);	
	КонецЦикла;	
	
	Возврат СтрокаБезНулей; 
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиGTINТовара(лТовар, лХарактеристикаНоменклатуры)
	
	GTINТовара = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика");
	
	Запрос.УстановитьПараметр("Номенклатура"  , лТовар);
	Запрос.УстановитьПараметр("Характеристика", лХарактеристикаНоменклатуры);
	
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		Если ЗначениеЗаполнено(Рез.Штрихкод) Тогда
			GTINТовара = Рез.Штрихкод;
		КонецЕсли;	
	КонецЕсли;								
	
	Возврат GTINТовара;   	
	
КонецФункции	

&НаСервере
Функция ПолучитьСсылкаМарка(СтрокаШтрихкодаМарки, Номенклатура = Неопределено, Характеристика = Неопределено, KM_RawMrc = "", KM_TNVED = "", ЦРПТМарка_Длина = 0)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкода");
	
	Запрос.УстановитьПараметр("ЗначениеШтрихкода", СтрокаШтрихкодаМарки + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекущийКМ = Выборка.Ссылка;
		
		Если ЦРПТМарка_Длина = 21 И ТекущийКМ.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix И СтрДлина(ТекущийКМ.ЗначениеШтрихкода) = 21 Тогда 
			ДополнитьИнформациюТабачнойПродукцииМРЦ(ТекущийКМ,KM_RawMrc);
		КонецЕсли;
		
		Возврат ТекущийКМ;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДополнитьИнформациюТабачнойПродукцииМРЦ(ТекущийКМ, KM_RawMrc)
	
	ТекущийКМОбъект = ТекущийКМ.ПолучитьОбъект();
	
	Если KM_RawMrc = "" Тогда
		ТекущийКМОбъект.ЗначениеШтрихкода = ТекущийКМОбъект.ЗначениеШтрихкода + "AAAA";
	Иначе		
		ТекущийКМОбъект.ЗначениеШтрихкода = ТекущийКМОбъект.ЗначениеШтрихкода + KM_RawMrc;
	КонецЕсли;
	
	ТекущийКМОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюНоменклатура(ТекущийКМ, Параметры, ЦРПТМарка_Длина, КодМаркировки)
	
	ТекущийКМОбъект = ТекущийКМ.ПолучитьОбъект();
	
	Если ЦРПТМарка_Длина = 21 Тогда
		GTIN_KM = Сред(КодМаркировки, 1, 14);
	ИначеЕсли ЦРПТМарка_Длина = 25 Тогда	
		GTIN_KM = Сред(КодМаркировки, 5, 14);
	ИначеЕсли ЦРПТМарка_Длина = 31 Тогда	
		GTIN_KM = Сред(КодМаркировки, 5, 14);
	КонецЕсли;
	
	GTIN_KM = УдалитьЛидирующиеНули(GTIN_KM);
	Попытка ТекущаяУпаковка = НайтиУпаковкуПоGTIN(GTIN_KM,Параметры); Исключение ТекущаяУпаковка = Параметры.Номенклатура.ЕдиницаИзмерения; КонецПопытки;
	
	ТекущийКМОбъект.Номенклатура   = Параметры.Номенклатура;
	ТекущийКМОбъект.Характеристика = Параметры.Характеристика;	
	ТекущийКМОбъект.Упаковка       = ТекущаяУпаковка;
	
	ТекущийКМОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Функция СоздатьСправочникШтрихкодУпаковки(КодМаркировки, Параметры, KM_RawMrc, KM_TNVED, ЦРПТМарка_Длина)
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	ОсобенностьУчета = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Номенклатура, "ОсобенностьУчета");
	
	ЭтоПиво = Ложь;
	
	Попытка ЭтоПиво = ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво; Исключение КонецПопытки;
	
	Если Не ЭтоПиво Тогда
		Попытка ЭтоПиво = ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво; Исключение КонецПопытки;	
	КонецЕсли;
	
	НовЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	
	Если ЦРПТМарка_Длина = 21 Тогда
		НовЭлемент.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	ИначеЕсли Лев(КодМаркировки, 4) = "(02)" Тогда
		НовЭлемент.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128;	
	Иначе	
		НовЭлемент.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	КонецЕсли;	
	
	Если ЦРПТМарка_Длина = 21 Тогда
		Если KM_RawMrc = "" Тогда
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки + "AAAA";		
		Иначе
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки + KM_RawMrc;	
		КонецЕсли;
	ИначеЕсли ЦРПТМарка_Длина = 25 Тогда
		Если KM_RawMrc = "" Тогда
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки;		
		Иначе
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки+"(8005)" + KM_RawMrc;	
		КонецЕсли;	
	ИначеЕсли ЦРПТМарка_Длина = 31 Тогда 
		Если KM_TNVED = "" Тогда
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки;		
		Иначе
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки+"(240)" + KM_TNVED;	
		КонецЕсли;
	ИначеЕсли ЦРПТМарка_Длина = 32 Тогда 
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;	
	ИначеЕсли ЦРПТМарка_Длина = 24 Тогда 
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;
	ИначеЕсли ЦРПТМарка_Длина = 38 Тогда 
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;		
	Иначе 
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;
	КонецЕсли;      	
	
	Если Параметры.Свойство("ЭтоОСУ") И Параметры.ЭтоОСУ Тогда
		НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли ЭтоПиво И ЦРПТМарка_Длина = 25 Тогда
		НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;	
	Иначе
		Если ЦРПТМарка_Длина = 25 Тогда
			НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		Иначе	
			НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		КонецЕсли;
	КонецЕсли;
	
	Если ЦРПТМарка_Длина = 21 Тогда
		GTIN_KM = Сред(КодМаркировки, 1, 14);
	ИначеЕсли ЦРПТМарка_Длина = 25 Тогда	
		GTIN_KM = Сред(КодМаркировки, 5, 14);
	ИначеЕсли ЦРПТМарка_Длина = 31 Тогда	
		GTIN_KM = Сред(КодМаркировки, 5, 14);
	КонецЕсли;
	
	GTIN_KM = УдалитьЛидирующиеНули(GTIN_KM);
	Попытка ТекущаяУпаковка = НайтиУпаковкуПоGTIN(GTIN_KM,Параметры); Исключение ТекущаяУпаковка = Параметры.Номенклатура.ЕдиницаИзмерения; КонецПопытки;
	
	НовЭлемент.Номенклатура   = Параметры.Номенклатура;
	НовЭлемент.Характеристика = Параметры.Характеристика;	
	НовЭлемент.Упаковка       = ТекущаяУпаковка;
		
	Если НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		НовЭлемент.Количество = 1;
		
		Если НовЭлемент.Номенклатура.ВесМожноУказыватьВДокументах Тогда
			НовЭлемент.Количество = Параметры.Количество;	
		КонецЕсли;
	Иначе
		Попытка НовЭлемент.Количество = Параметры.Количество; Исключение КонецПопытки;
		Попытка НовЭлемент.КоличествоПотребительскихУпаковок = Параметры.КоличествоПУ; Исключение КонецПопытки;
	КонецЕсли;
	
	Попытка НовЭлемент.Серия = Параметры.Серия; Исключение КонецПопытки;
	
	ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НовЭлемент.ЗначениеШтрихкода);
	
	Если ДанныеУпаковки <> Неопределено И ДанныеУпаковки.Серия = Параметры.Серия Тогда
		Возврат ДанныеУпаковки.Ссылка;
	КонецЕсли;
	
	НовЭлемент.Записать();
	
	Возврат НовЭлемент.Ссылка;
	
КонецФункции

&НаСервере
Функция НайтиУпаковкуПоGTIN(GTIN_KM, Параметры)
	
	лУпак = Параметры.Номенклатура.ЕдиницаИзмерения;
	
	лТовар = Параметры.Номенклатура;
	лХарактеристикаНоменклатуры = Параметры.Характеристика;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|	И ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика");
	
	Запрос.УстановитьПараметр("Штрихкод"      , GTIN_KM);
	Запрос.УстановитьПараметр("Номенклатура"  , лТовар);
	Запрос.УстановитьПараметр("Характеристика", лХарактеристикаНоменклатуры);
	
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		Если ЗначениеЗаполнено(Рез.Упаковка) Тогда
			лУпак = Рез.Упаковка;
		КонецЕсли;	
	КонецЕсли;	    							
	
	Возврат лУпак;     	
	
КонецФункции	

&НаСервере
Процедура ПроверитьМаркаНаходитсяВДругомКоробе(СсылкаМарка,СсылкаУпаковка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = &Штрихкод
	|	И НЕ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = &Упаковка");
	
	Запрос.УстановитьПараметр("Штрихкод", СсылкаМарка);
	Запрос.УстановитьПараметр("Упаковка", СсылкаУпаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		ОбъектКороб = Выборка.Ссылка.ПолучитьОбъект();
		РезультатПоиска = ОбъектКороб.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", СсылкаМарка));
		
		Для каждого СтрокаРезультата Из РезультатПоиска Цикл
			ОбъектКороб.ВложенныеШтрихкоды.Удалить(СтрокаРезультата);
		КонецЦикла;
		
		ОбъектКороб.Записать();		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьУпаковкаОбъект(КоробЗначениеШтрихкода)
	
	ОбъектКороб = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	
	ОбъектКороб.ТипУпаковки       = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ОбъектКороб.ТипШтрихкода      = Перечисления.ТипыШтрихкодов.SSCC;
	ОбъектКороб.ЗначениеШтрихкода = КоробЗначениеШтрихкода;
	
	ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ОбъектКороб.ЗначениеШтрихкода);
	
	Если ДанныеУпаковки <> Неопределено Тогда
		Возврат ДанныеУпаковки.Ссылка;
	КонецЕсли;
	
	ОбъектКороб.Записать();
	
	Возврат ОбъектКороб;
	
КонецФункции

&НаСервере
Функция НайтиИлиСоздатьУпаковкаОбъект(СтрокаДляПоискаУпаковки, СледующийНомерSSCC)
	
	СсылкаУпаковки = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", СтрокаДляПоискаУпаковки);
	
	Если СсылкаУпаковки.Пустая() Тогда		
		Если СтрДлина(СтрокаДляПоискаУпаковки) = 22 и Лев(СтрокаДляПоискаУпаковки,4) = "(00)" Тогда
			
			УпаковкаОбъект = СоздатьУпаковкаОбъект(СтрокаДляПоискаУпаковки);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Создана упаковка " + УпаковкаОбъект + " (нажмите для просмотра)";
			Сообщение.КлючДанных = УпаковкаОбъект.Ссылка;
			Сообщение.Сообщить();
			
		Иначе	
			УпаковкаОбъект = СоздатьУпаковкаОбъект(СледующийНомерSSCC);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Создана упаковка " + УпаковкаОбъект + " (нажмите для просмотра)";
			Сообщение.КлючДанных = УпаковкаОбъект.Ссылка;
			Сообщение.Сообщить();
		КонецЕсли;
		
	Иначе
		УпаковкаОбъект = СсылкаУпаковки.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат УпаковкаОбъект;
	
КонецФункции

&НаСервере
Функция НужноЗаполнитьУпаковкаОбъект(УпаковкаОбъект)
	
	Если УпаковкаОбъект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнитьУпаковкаОбъект(УпаковкаОбъект, ТекущийЭлементВыборки)
	
	УпаковкаОбъект.Номенклатура   = ТекущийЭлементВыборки.Номенклатура;
	УпаковкаОбъект.Характеристика = ТекущийЭлементВыборки.ХарактеристикаНоменклатуры;
	УпаковкаОбъект.Серия          = ТекущийЭлементВыборки.СерияСсылка;
	УпаковкаОбъект.Упаковка       = ТекущийЭлементВыборки.Номенклатура.ЕдиницаИзмерения;
	
	УпаковкаОбъект.Записать();
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСобранныхМарокИУпаковок(ТабДокТСД, СоздаватьЕслиНеНайдена, ЭтоУпаковка=Ложь)
	
	МассивМарок = Новый Массив;
	ТЗСобранныеДанныеМарки = ТабДокТСД.Скопировать();
	ТЗСобранныеДанныеМарки.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Марка, ЦРПТМарка_Длина, Короб,УпаковочныйЛист, KM_RawMrc, KM_TNVED", "Количество, КоличествоВУпаковке");
	
	Для каждого СтрокаДока Из ТЗСобранныеДанныеМарки Цикл
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВесМожноУказывать = СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах;
		
		Если (Не ЗначениеЗаполнено(СтрокаДока.Короб) И Не ЗначениеЗаполнено(СтрокаДока.УпаковочныйЛист) И ЗначениеЗаполнено(СтрокаДока.Марка))
			Или (ЭтоУпаковка И ЗначениеЗаполнено(СтрокаДока.Марка)) Тогда
			
			СсылкаМарка = ПолучитьСправочникСсылкаШтрихкодыУпаковок(СтрокаДока.Марка, СтрокаДока.ЦРПТМарка_Длина, СтрокаДока.KM_RawMrc, СтрокаДока.KM_TNVED, СоздаватьЕслиНеНайдена, 
			Новый Структура("Номенклатура, Характеристика, Количество", СтрокаДока.Номенклатура, СтрокаДока.ХарактеристикаНоменклатуры, СтрокаДока.Количество));
			
			Если ЗначениеЗаполнено(СсылкаМарка) Тогда
				МассивМарок.Добавить(СсылкаМарка);
				
				ЗаполнитьВесУпаковки(СтрокаДока, ВесМожноУказывать, СсылкаМарка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивКоробов = Новый Массив;
	ТЗУпаковочныхЛистов = ТабДокТСД.Скопировать();
	ТЗУпаковочныхЛистов.Свернуть("Короб,УпаковочныйЛист", "Количество");
	
	Для каждого СтрТЗ Из ТЗУпаковочныхЛистов Цикл
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрТЗ.УпаковочныйЛист) Тогда
			Короб = ПолучитьСправочникСсылкаШтрихкодыУпаковок(СтрТЗ.УпаковочныйЛист, 0, "", "", Ложь);
		ИначеЕсли ЗначениеЗаполнено(СтрТЗ.Короб) Тогда
			Короб = ПолучитьСправочникСсылкаШтрихкодыУпаковок(СтрТЗ.Короб, 0, "", "", Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Короб) Тогда
			МассивКоробов.Добавить(Короб);	
		КонецЕсли;
	КонецЦикла; 
	
	ТЗОСУ = ТабДокТСД.Скопировать();
	ТЗОСУ.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Марка, ЦРПТМарка_Длина, УпаковочныйЛист, KM_RawMrc, KM_TNVED, СерияСсылка, ШтрихКод", "Количество, КоличествоВУпаковке");
	
	ПродукцияИСМП_МолочкаВода = Новый Массив;
	Попытка ПродукцияИСМП_МолочкаВода.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС); Исключение КонецПопытки;
	Попытка ПродукцияИСМП_МолочкаВода.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС); Исключение КонецПопытки;
	Попытка ПродукцияИСМП_МолочкаВода.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода); Исключение КонецПопытки;
	
	Для каждого СтрОСУ Из ТЗОСУ Цикл		
		Если СтрОСУ.Количество = 0 Или ЗначениеЗаполнено(СтрОСУ.УпаковочныйЛист) Или ЗначениеЗаполнено(СтрОСУ.Марка) Тогда
			Продолжить;
		КонецЕсли;	
				
		Если ПродукцияИСМП_МолочкаВода.Найти(СтрОСУ.Номенклатура.ОсобенностьУчета) = Неопределено Тогда 
			Продолжить;
		ИначеЕсли ПродукцияИСМП_МолочкаВода.Найти(СтрОСУ.Номенклатура.ВидНоменклатуры.ОсобенностьУчета) = Неопределено Тогда
		    Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрОСУ.ШтрихКод) Тогда
			КоличествоПУ = ?(СтрОСУ.Номенклатура.ВесМожноУказыватьВДокументах, СтрОСУ.КоличествоВУпаковке, СтрОСУ.Количество);
			GTIN = ?(СтрДлина(СтрОСУ.ШтрихКод) = 13, "0" + СтрОСУ.ШтрихКод, СтрОСУ.ШтрихКод); 
			ЗначениеУпаковки = "(02)" + GTIN + "(37)" + КоличествоПУ;
			
			СтруктураСтроки = Новый Структура("Номенклатура, Характеристика, Серия, КоличествоПУ, Количество, ЭтоОСУ", 
										      СтрОСУ.Номенклатура, СтрОСУ.ХарактеристикаНоменклатуры, СтрОСУ.СерияСсылка, КоличествоПУ, СтрОСУ.Количество, Истина);
			УпаковкаСсылка = ПолучитьСправочникСсылкаШтрихкодыУпаковок(ЗначениеУпаковки, СтрОСУ.ЦРПТМарка_Длина, "", "", СоздаватьЕслиНеНайдена, СтруктураСтроки);
			
			Если СтрОСУ.Номенклатура.ВесМожноУказыватьВДокументах И (СтрОСУ.Количество <> УпаковкаСсылка.Количество Или КоличествоПУ <> УпаковкаСсылка.КоличествоПотребительскихУпаковок) Тогда
				УпаковкаОбъект = УпаковкаСсылка.ПолучитьОбъект();
				УпаковкаОбъект.Количество = СтрОСУ.Количество;
				УпаковкаОбъект.КоличествоПотребительскихУпаковок = КоличествоПУ;
				УпаковкаОбъект.Записать();
			КонецЕсли;  
			
			МассивКоробов.Добавить(УпаковкаСсылка);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Новый Структура("Марки, Короба", МассивМарок, МассивКоробов);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруНоменклатураХарактеристика(СтрокаТаб)
	
	ИдентификаторТовара = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб, 2), "[59]", ";");
	ШтрихкодТовара      = СтрЗаменить(СтрПолучитьСтроку(СтрокаТаб, 3), "[59]", ";");
	НаименованиеТовара  = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(СтрокаТаб, 9));
	Номенклатура        = ПолучитьНоменклатуру(ИдентификаторТовара, ШтрихкодТовара, НаименованиеТовара);
	
	Если Номенклатура = "" Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Номенклатура, Характеристика", 
		Номенклатура.Получить(0).Значение,
		Номенклатура.Получить(1).Значение)
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура СоздатьСтрокиШтрихкодовУпаковокПоМассиву(лМассив, ИсходныйДокумент)
	
	ИсхДокументИмя = ИсходныйДокумент.Метаданные().Имя;
	
	Для каждого лЭлемент Из лМассив Цикл		
		Если лЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		лСтруктураПоиска = Новый Структура("ШтрихкодУпаковки", лЭлемент);	
		СтрокиПоиска = ИсходныйДокумент.ШтрихкодыУпаковок.НайтиСтроки(лСтруктураПоиска);
		
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсхДокументИмя = "ПриобретениеТоваровУслуг" Или ИсхДокументИмя = "ПриемкаТоваровИСМП" Тогда
			Попытка
				лСтруктураПоиска = Новый Структура("ЗначениеШтрихкода", УбратьСкобкиТеговМарка(лЭлемент.ЗначениеШтрихкода,ПолучитьТипМаркированнойПродукции(лЭлемент.Номенклатура)));	
				СтрокиПоиска = ИсходныйДокумент.ШтрихкодыУпаковок.НайтиСтроки(лСтруктураПоиска);
				
				Если СтрокиПоиска.Количество() <> 0 Тогда
					Для каждого НайденнаяСтрока Из СтрокиПоиска Цикл
						НайденнаяСтрока.ШтрихкодУпаковки =  лЭлемент;
					КонецЦикла;
					Продолжить;
				КонецЕсли;
			Исключение 
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		стрИсходныйДокумент = ИсходныйДокумент.ШтрихкодыУпаковок.Добавить();
		стрИсходныйДокумент.ШтрихкодУпаковки = лЭлемент;		
		Попытка стрИсходныйДокумент.ЗначениеШтрихкода = УбратьСкобкиТеговМарка(лЭлемент.ЗначениеШтрихкода, ПолучитьТипМаркированнойПродукции(лЭлемент.Номенклатура)) Исключение КонецПопытки;		
	КонецЦикла;  
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСтрокиАкцизныхМарокПоМассиву(лМассив, ИсходныйДокумент)
	
	Для каждого лЭлемент Из лМассив Цикл		
		Если лЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		лСтруктураПоиска = Новый Структура("ШтрихкодУпаковки", лЭлемент);	
		СтрокиПоиска = ИсходныйДокумент.АкцизныеМарки.НайтиСтроки(лСтруктураПоиска);
		
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		лСтруктураПоиска = Новый Структура("АкцизнаяМарка", лЭлемент);	
		СтрокиПоиска = ИсходныйДокумент.АкцизныеМарки.НайтиСтроки(лСтруктураПоиска);
		
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;		
		
		лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика", лЭлемент.Номенклатура, лЭлемент.Характеристика);	
		СтрокиПоиска = ИсходныйДокумент.Товары.НайтиСтроки(лСтруктураПоиска);
		
		Если СтрокиПоиска.Количество() > 0 Тогда			
			НоваяСтрокаТЧ = ИсходныйДокумент.АкцизныеМарки.Добавить();
			НоваяСтрокаТЧ.ШтрихкодУпаковки    = лЭлемент;
			НоваяСтрокаТЧ.АкцизнаяМарка       = лЭлемент;
			НоваяСтрокаТЧ.ИдентификаторСтроки =	СтрокиПоиска[0].ИдентификаторСтроки;	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиИзмененияВКоличествоТоваров(ИсходныйДокумент, СтруктураСобранныхМарокИУпаковок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия КАК Серия,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В(&МассивМарок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваров.Упаковка,
	|	ШтрихкодыУпаковокТоваров.Серия,
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика");
	
	Запрос.УстановитьПараметр("МассивМарок", СтруктураСобранныхМарокИУпаковок.Марки);
	
	ТабРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТабТовары Из ИсходныйДокумент.Товары Цикл		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТабТовары);
		РезультатПоиска = ТабРезультатЗапроса.НайтиСтроки(СтруктураПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда			
			СтрокаТабТовары.КоличествоУпаковок = РезультатПоиска[0].Количество;			
			СтрокаТабТовары.Количество = РезультатПоиска[0].Количество;
			
			Попытка ПерезаполнитьСтрокуТабТоварыПослеИзмененияКоличества(СтрокаТабТовары, ИсходныйДокумент); Исключение КонецПопытки;			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСтрокуТабТоварыПослеИзмененияКоличества(ТекущаяСтрока, ИсходныйДокумент, ЭтоЧекККМ = Ложь)
	
	СтруктураДействий = Новый Структура;
	
	Попытка
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ИсходныйДокумент);
	Исключение
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ИсходныйДокумент);
	КонецПопытки;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	Если Не ЭтоЧекККМ Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);	
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	
	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
	
	Попытка
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
	Исключение
	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСправочникСсылкаШтрихкодыУпаковок(КодИдентификацииИзвлеченный, ЦРПТМарка_Длина, KM_RawMrc, KM_TNVED, СоздаватьЕслиНеНайдена=Ложь, Параметры = Неопределено)
	
	Модуь_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");

	ЭтоТабак = Ложь;
	
	Если Параметры <> Неопределено Тогда
		ОсобенностьУчета = Параметры.Номенклатура.ОсобенностьУчета;
		
		Попытка 
			Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
				ЭтоТабак = Истина;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		Попытка 
			Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак Тогда
				ЭтоТабак = Истина;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		Попытка 
			Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция Тогда
				ЭтоТабак = Истина;	
			КонецЕсли;
		Исключение
		КонецПопытки;


		
		ВидМаркируемойПродукции = Модуь_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ОсобенностьУчета);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""
	|	И 1=1
	|";
	
	ЗначениеШтрихкода = КодИдентификацииИзвлеченный;
	
	//Символы _ и % присутствуют в алфавите маркировки, поэтому требуется экранирование через спецсимвол, символ $ не присутствует в алфавите маркировки
	ЗначениеШтрихкодаДляЗапроса = "" + ЗначениеШтрихкода;
	ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса, "_", "$_");
	ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса, "%", "$%");
	
	Если Лев(КодИдентификацииИзвлеченный, 4) <> "(02)" Тогда
		ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкодаДляЗапроса + "%";	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", ЗначениеШтрихкодаДляЗапроса);
	
	// поиск по серии для ОСУ
	Попытка
		Если Параметры.Свойство("ЭтоОСУ") И Параметры.Свойство("Серия") Тогда
			Если Параметры.ЭтоОСУ И ЗначениеЗаполнено(Параметры.Серия) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "ШтрихкодыУпаковокТоваров.Серия = &Серия");
				
				Запрос.УстановитьПараметр("Серия", Параметры.Серия);
			КонецЕсли;
		КонецЕсли;
	Исключение КонецПопытки;
	
	КодМаркировкиНеНайден = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		ТекущийКМ = Выборка.Ссылка;
		
		// Запрос подобно не учитывает регистр, поэтому в выборке может оказаться несколько результатов или неоказаться нужного, надо проверить что нужный КМ выбран.
		Если СтрНайти(ТекущийКМ.ЗначениеШтрихкода,ЗначениеШтрихкода)=0 Тогда
			Продолжить;
		Иначе
			КодМаркировкиНеНайден = Ложь;	
		КонецЕсли;		
		
		Если ЦРПТМарка_Длина = 21 И ТекущийКМ.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix И СтрДлина(ТекущийКМ.ЗначениеШтрихкода) = 21 Тогда 
			ДополнитьИнформациюТабачнойПродукцииМРЦ(ТекущийКМ,KM_RawMrc);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущийКМ.Номенклатура) И Параметры <> Неопределено Тогда
			ДополнитьИнформациюНоменклатура(ТекущийКМ,Параметры,ЦРПТМарка_Длина,КодИдентификацииИзвлеченный);
		КонецЕсли;
		
		Попытка
			Если ЭтоТабак И СтрДлина(КодИдентификацииИзвлеченный) <> 21 И ТекущийКМ.ВложенныеШтрихкоды.Количество() = 0 Тогда
				Возврат СформироватьЗапросКСервисуИСМПиСоздатьСправочникСсылкаМарка(КодИдентификацииИзвлеченный, ЭтоТабак, , ВидМаркируемойПродукции);	                      
			КонецЕсли;   
		Исключение
		КонецПопытки;
		
		Возврат ТекущийКМ;
	КонецЦикла;	
	
	Если КодМаркировкиНеНайден Тогда		
		Если СоздаватьЕслиНеНайдена И Параметры <> Неопределено Тогда			
			Попытка
				Если ЭтоТабак И СтрДлина(КодИдентификацииИзвлеченный) <> 21 Тогда
					Возврат СформироватьЗапросКСервисуИСМПиСоздатьСправочникСсылкаМарка(КодИдентификацииИзвлеченный, ЭтоТабак, , ВидМаркируемойПродукции);	                      
				КонецЕсли;   
			Исключение
			КонецПопытки;
			
			Возврат СоздатьСправочникШтрихкодУпаковки(КодИдентификацииИзвлеченный, Параметры, KM_RawMrc, KM_TNVED, ЦРПТМарка_Длина);
		Иначе		
			Возврат Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВнестиДанныеОСобранныхМарках(ДеревоМаркированнойПродукции, ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок, ВерхнийУровеньВНаличии = Ложь, ЭтоПриемка = Ложь)
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	Для каждого Строка Из ДеревоМаркированнойПродукции.Строки Цикл		
		Если ВерхнийУровеньВНаличии Тогда			
			Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			
			Если Строка.Строки.Количество() = 0 И ЭтоПриемка Тогда
				СтруктураПоиска = Новый Структура("GTIN, Номенклатура, Характеристика, Серия", Строка.GTIN, Строка.Номенклатура, Строка.Характеристика, Строка.Серия);
				НайденныеСтроки = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					НайденнаяСтрока.КоличествоПодобрано = НайденнаяСтрока.КоличествоПодобрано + 1;					
					
					Попытка 
						Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НайденнаяСтрока);
					Исключение
						Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НайденнаяСтрока, Неопределено);	
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СтруктураСобранныхМарокИУпаковок.Короба.Найти(Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", Строка.Представление)) <> Неопределено Тогда			
			Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			
		ИначеЕсли СтруктураСобранныхМарокИУпаковок.Марки.Найти(Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", Строка.Представление)) <> Неопределено Тогда			
			Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			
			Если Строка.Строки.Количество() = 0 И ЭтоПриемка Тогда
				СтруктураПоиска = Новый Структура("GTIN, Номенклатура, Характеристика, Серия", Строка.GTIN, Строка.Номенклатура, Строка.Характеристика, Строка.Серия);
				НайденныеСтроки = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					НайденнаяСтрока.КоличествоПодобрано = НайденнаяСтрока.КоличествоПодобрано + 1;
					
					Попытка 
						Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НайденнаяСтрока);
					Исключение
						Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НайденнаяСтрока,Неопределено);	
					КонецПопытки;
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;
		
		Если Строка.Строки.Количество() <> 0 Тогда			
			Если Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии Тогда
				ВнестиДанныеОСобранныхМарках(Строка,ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок, Истина, ЭтоПриемка);
			Иначе
				ВнестиДанныеОСобранныхМарках(Строка,ПодобраннаяМаркируемаяПродукция,СтруктураСобранныхМарокИУпаковок, Ложь, ЭтоПриемка);
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаЕстьВМассивеСсылок(МассивСсылок, ПроверяемаяСтрока)
	
	Для каждого ЭлементМассива Из МассивСсылок Цикл		
		Попытка
			Если ЭлементМассива.ЗначениеШтрихкода = ПроверяемаяСтрока Тогда
				Возврат Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВесУпаковки(СтрокаДока, ВесМожноУказывать, СсылкаМарка)
	
	Попытка 
		Если ВесМожноУказывать И ЗначениеЗаполнено(СсылкаМарка) И (СтрокаДока.Количество <> СсылкаМарка.Количество Или СсылкаМарка.КоличествоПотребительскихУпаковок <> 1) Тогда
			КМОбъект = СсылкаМарка.ПолучитьОбъект();
			КМОбъект.Количество = СтрокаДока.Количество;
			КМОбъект.КоличествоПотребительскихУпаковок = 1;
			КМОбъект.Записать();
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#Область ЗаполнениеРезультатаПроверки

&НаСервере
Функция ПолучитьРезультатПроверкиДокумента(ПроверяемыйДокумент,Шаблон, ВидМаркируемойПродукцииДокумента)
	
	// Проверим ранее сохраненные данные, только для поступлений
	Выборка = ВыборкаПоДаннымСтатусыПроверкиИПодбораДокументовИСМП(ПроверяемыйДокумент.Ссылка, ВидМаркируемойПродукцииДокумента);
	
	Если (Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" Или Шаблон.ВидДокумента = "ПриемкаТоваровИСМП") И Выборка.Следующий() Тогда
		
		Возврат Выборка.ДанныеПроверкиИПодбора.Получить();
		
	Иначе
		
		//Табак		
		ЭтоТабак = ЭтоТабакПоВидыПродукцииИС(ВидМаркируемойПродукцииДокумента);
		
		Если Шаблон.МаркировкаПроверкаБезСертификатаИС Тогда
			Возврат ИнициализироватьДанныеПроверки(ПроверяемыйДокумент.Ссылка, ВидМаркируемойПродукцииДокумента,Шаблон, ЭтоТабак);
		КонецЕсли;		
		
		Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
		Модуь_ИнтерфейсИСМПКлиентСервер = ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
		Модуь_ИнтерфейсМОТПКлиентСервер = ОбщийМодуль("ИнтерфейсМОТПКлиентСервер");
		Модуь_ПроверкаИПодборПродукцииИСМППереопределяемый = ОбщийМодуль("ПроверкаИПодборПродукцииИСМППереопределяемый");
		
		Если Модуь_ИнтерфейсАвторизацииИСМПВызовСервера = Неопределено Тогда
			Сообщить("Конфигурация 1С не поддерживает работу с Маркировкой", 
			СтатусСообщения.ОченьВажное);		
			Возврат Неопределено;
		КонецЕсли;
		
		Организация = Неопределено;
		
		Попытка
			Организация = ПроверяемыйДокумент.Организация;	
		Исключение
		    Модуь_ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииОрганизации(ПроверяемыйДокумент.Ссылка, Организация);
		КонецПопытки;
		
		//Табак
		Если ЭтоТабак Тогда		
			ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
			Модуь_ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
		Иначе
			ТребуетсяОбновлениеКлючаСессии = Модуь_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
			Модуь_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));	
		КонецЕсли;
		
		Если ТребуетсяОбновлениеКлючаСессии Тогда
			
			Сообщить("Ошибка заполнения результатов проверки документа. Не получилось обновить ключ сессии. Проверьте настройки подключения к ИС", 
			СтатусСообщения.ОченьВажное);
			
			Возврат Неопределено;
			
		Иначе   	
			
			ИдентификаторОперации = Новый УникальныйИдентификатор();
			
			ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
			ПараметрыВыполнения.ЗапуститьВФоне = Истина;
			
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
				ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
			КонецЕсли;
			
			ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторОперации);
			
			//Табак
			Если ЭтоТабак Тогда
				ПараметрыОперации = ПолучитьПараметрыМОТП(ПроверяемыйДокумент.Ссылка,ВидМаркируемойПродукцииДокумента,Шаблон);
				ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое заполнение данных проверки и подбора табачной продукции'");
				
				ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
				"Обработки.ПроверкаИПодборТабачнойПродукцииМОТП.ЗагрузитьДанныеДокументаДлительнаяОперация",
				ПараметрыОперации, ПараметрыВыполнения);		
			Иначе
				ПараметрыОперации = ПолучитьПараметрыИСМП(ПроверяемыйДокумент.Ссылка,ВидМаркируемойПродукцииДокумента,Шаблон);
				ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое заполнение данных проверки и подбора маркируемой продукции'");
				
				ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
				"Обработки.ПроверкаИПодборПродукцииИСМП.ЗагрузитьДанныеДокументаДлительнаяОперация",
				ПараметрыОперации, ПараметрыВыполнения);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДлительнаяОперация.ИдентификаторЗадания) Тогда
				Если НЕ ЗначениеЗаполнено(ДлительнаяОперация.АдресРезультата) Тогда
					Сообщить("Ошибка заполнения результатов проверки документа. Не получилось открыть форму проверки документа.", 
					СтатусСообщения.ОченьВажное);
					
					Возврат Неопределено;
				КонецЕсли;	
			Иначе		
				ОжидатьЗавершенияДлительнойОперации(ДлительнаяОперация.ИдентификаторЗадания);
			КонецЕсли;
			
			Возврат ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОжидатьЗавершенияДлительнойОперации(ИдентификаторЗадания)
	
	Пока Истина Цикл
		
		Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатПроверкиДокумента(ПроверяемыйДокумент, РезультатПроверки, ВидПродукцииИСДокумента)
	
	Попытка РезультатПроверки.СтрокаПродукцияБезУпаковки = Неопределено; Исключение КонецПопытки;
	Попытка РезультатПроверки.СтрокаПачкиБезБлока = Неопределено; Исключение КонецПопытки;
	Попытка РезультатПроверки.СтрокаБлокиБезКоробки = Неопределено; Исключение КонецПопытки;
	
	Если ЗначениеЗаполнено(ВидПродукцииИСДокумента) Тогда
		РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.СохранитьПромежуточныеРезультатыПроверкиДокумента(
		ПроверяемыйДокумент.Ссылка,
		ВидПродукцииИСДокумента,
		Новый ХранилищеЗначения(РезультатПроверки));	
		
		УстановитьСтатусПроверкиВыполнена(ПроверяемыйДокумент);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусПроверкиВыполнена(ПроверяемыйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.Выбрать(Новый Структура("Документ", ПроверяемыйДокумент.Ссылка));
	Выборка.Следующий();
	
	МенеджерЗаписи = Выборка.ПолучитьМенеджерЗаписи();
	МенеджерЗаписи.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ВыборкаПоДаннымСтатусыПроверкиИПодбораДокументовИСМП(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыПроверкиИПодбораДокументовИСМП.ДанныеПроверкиИПодбора КАК ДанныеПроверкиИПодбора
	|ИЗ
	|	РегистрСведений.СтатусыПроверкиИПодбораДокументовИСМП КАК СтатусыПроверкиИПодбораДокументовИСМП
	|ГДЕ
	|	СтатусыПроверкиИПодбораДокументовИСМП.Документ = &Документ
	|	И СтатусыПроверкиИПодбораДокументовИСМП.ВидМаркируемойПродукции = &ВидМаркируемойПродукции";
	
	Запрос.УстановитьПараметр("ВидМаркируемойПродукции"	, ВидМаркируемойПродукцииДокумента);
	Запрос.УстановитьПараметр("Документ"				, ПроверяемыйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции	

#КонецОбласти

#Область НовыйВариант

&НаСервере
Функция ИнициализироватьДанныеПроверки(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента, Шаблон, ЭтоТабак)
	
	ТекстОшибки = "";
	
	РезультатПроверкиДокумента = Неопределено;
	
	Если РезультатыПроверкиУспешноСохранены_ИС(ПроверяемыйДокумент, РезультатПроверкиДокумента, ТекстОшибки, ВидМаркируемойПродукцииДокумента, Шаблон, ЭтоТабак) Тогда
		Возврат РезультатПроверкиДокумента;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	
	Возврат Неопределено;	
	
КонецФункции

&НаСервере
Функция РезультатыПроверкиУспешноСохранены_ИС(ПроверяемыйДокумент, ДанныеРезультатовПроверки, ТекстОшибки, ВидМаркируемойПродукцииДокумента, Шаблон, ЭтоТабак)
	
	Попытка	
		Если ЭтоТабак Тогда
			ПараметрыДанных = ПолучитьПараметрыМОТП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента, Шаблон);
			ДанныеРезультатовПроверки = НачальныеДанныеДляРезультатовПроверкиМОТП(ПараметрыДанных);
		Иначе 
			ПараметрыДанных = ПолучитьПараметрыИСМП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента, Шаблон);
			ДанныеРезультатовПроверки = НачальныеДанныеДляРезультатовПроверкиИСМП(ПараметрыДанных);
		КонецЕсли;
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

//ИСМП
&НаСервере
Функция ПолучитьПараметрыИСМП(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента, Шаблон)
	
	ИмяДокумента = ПроверяемыйДокумент.Метаданные().Имя;
	
	Модуь_ИнтеграцияИСМПКлиентСерверПовтИсп = ОбщийМодуль("ИнтеграцияИСМПКлиентСерверПовтИсп");
	Модуь_ШтрихкодированиеИС = ОбщийМодуль("ШтрихкодированиеИС");
	
	ПараметрыСканированияСервер = Модуь_ШтрихкодированиеИС.ПараметрыСканирования(ПроверяемыйДокумент,, ВидМаркируемойПродукцииДокумента);
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("ПроверкаНеПоДокументу",            									Ложь);                   
	ПараметрыОперации.Вставить("ПроверяемыйДокумент",              									ПроверяемыйДокумент);
	ПараметрыОперации.Вставить("НачальныйСтатусПроверки",          									Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
	ПараметрыОперации.Вставить("ДетализацияСтруктурыХранения",     									Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная);
	ПараметрыОперации.Вставить("РежимПроверки",     												Перечисления.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены);
	ПараметрыОперации.Вставить("РедактированиеФормыНедоступно",    									Ложь);
	
	Если ИмяДокумента = "ПриобретениеТоваровУслуг" Или ИмяДокумента = "ПриемкаТоваровИСМП" Тогда
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок", 								Ложь);
	Иначе	
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок", 								Истина);
	КонецЕсли;
	
	ПараметрыОперации.Вставить("ПараметрыСканирования",            									ПолучитьПараметрыСканированияИСПМ_Функция(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента,Шаблон));
	ПараметрыОперации.Вставить("ПараметрыПроверкиКодовМаркировки", 									ПолучитьПараметрыПроверкиКодовМаркировкиИСМП(ПроверяемыйДокумент,Шаблон));
	ПараметрыОперации.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", 			Ложь);
	ПараметрыОперации.Вставить("ПроверкаЭлектронногоДокумента", 									Ложь);
	ПараметрыОперации.Вставить("ВидМаркируемойПродукции", 											ВидМаркируемойПродукцииДокумента);
	ПараметрыОперации.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП", 						Истина);
	ПараметрыОперации.Вставить("ЭтоВосстановлениеДетализации", 										Ложь);

	ПараметрыОперации.Вставить("РежимИсправленияОшибокПослеПередачиКодов", 							Ложь);
	
	Попытка
		ПараметрыОперации.Вставить("ПоддерживаетсяОбъемноСортовойУчет", 							Модуь_ИнтеграцияИСМПКлиентСерверПовтИсп.ВидПродукцииПоддерживаетОбъемноСортовойУчет(ВидМаркируемойПродукцииДокумента) И ПараметрыСканированияСервер.ПоддерживаетсяОбъемноСортовойУчет);	
	Исключение
	    ПараметрыОперации.Вставить("ПоддерживаетсяОбъемноСортовойУчет",                             Ложь);
	КонецПопытки; 
	
	Попытка ПараметрыОперации.Вставить("ДанныеКлючаСессииИСМП", ПараметрыСеанса.ДанныеКлючаСессииИСМП); Исключение КонецПопытки;
	
	Возврат ПараметрыОперации;
	
КонецФункции

&НаСервере
Процедура ПолучитьПараметрыСканированияИСПМ(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента, ПараметрыСканирования, ИзСервиса = Ложь)
	
	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции", Новый Массив);
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	
	Попытка	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукцииДокумента); Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки"                      , Ложь);
	ПараметрыСканирования.Вставить("КэшМаркируемойПродукции"                        , Неопределено);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции"             , Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции" , Истина);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД"                            , Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева"  , Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИС"         , Истина);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок"         , Ложь);
	ПараметрыСканирования.Вставить("ДоступнаПечатьЭтикеток"                         , Ложь);
	ПараметрыСканирования.Вставить("Детализация"                         			, Неопределено);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения"                   , Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП"		, ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот"					, Ложь);
	ПараметрыСканирования.Вставить("СтатусКодаМаркировкиПоУмолчанию"				, Неопределено);
	ПараметрыСканирования.Вставить("СсылкаНаОбъект"									, Неопределено);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой"	, Ложь);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру"						, Ложь);
	ПараметрыСканирования.Вставить("Организация"									, Неопределено);
	
	Попытка ПараметрыСканирования.Организация = ПроверяемыйДокумент.Организация; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий"							, Неопределено);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП"					, Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС"							, Ложь);
	ПараметрыСканирования.Вставить("Владелец"							            , Неопределено);
	
	ПараметрыСканирования.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок"	, "ШтрихкодыУпаковок");
	ПараметрыСканирования.Вставить("ИмяКолонкиШтрихкодУпаковки"			, "ШтрихкодУпаковки");
	
	ПараметрыСканирования.Вставить("ОтборПоВидуПродукции"			, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПула"	, Ложь);
	
	ПараметрыСканирования.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры"	, Новый Массив());
	
	ПараметрыСканирования.Вставить("ЗаполнятьСрокГодности"								, Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьОкончаниеСрокаГодности"				, Ложь);
	
	ПараметрыСканирования.Вставить("ТолькоМаркируемаяПродукция"				    , Ложь);	
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП"				, Ложь);	
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП"				, Ложь);
	
	ПараметрыСканирования.Вставить("ЗаписыватьЛогЗапросовИСМП"				    , Ложь);
	
	ПараметрыСканирования.Вставить("Склад"							, Справочники.Склады.ПустаяСсылка());
	Попытка ПараметрыСканирования.Склад = ПроверяемыйДокумент.Склад; Исключение КонецПопытки;	
	ПараметрыСканирования.Вставить("КэшированныеЗначения"									, Неопределено);	
	ПараметрыСканирования.Вставить("ДополнительныеПараметры"								, Новый Структура());
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеСервисаИСМП"							, Ложь);
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"						, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПулаИСМП"						, Ложь);
	ПараметрыСканирования.Вставить("КонтрольРасхожденийСДокументомОснованием"	    		, Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировки"							, Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировкиИСМП"						, Ложь);	
	ПараметрыСканирования.Вставить("ВыполняетсяЗагрузкаДанныхВФормуПроверкиИПодбораИСМП"	, Истина);
	ПараметрыСканирования.Вставить("ВидОперацииИСМП"										, Неопределено);
	ПараметрыСканирования.Вставить("ЭтоОтчетПроизводственнойЛинии"							, Ложь);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыИСМП"                                 	, Новый Массив);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокИСМП"                         	, Новый Массив);
	ПараметрыСканирования.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП"  	, Ложь);
	ПараметрыСканирования.Вставить("ЭтоМаркировкаОстатков"                                 	, Неопределено);
	ПараметрыСканирования.Вставить("ДатаДокумента"                                         	, ПроверяемыйДокумент.Дата);
	ПараметрыСканирования.Вставить("СозданиеНаборов"							           	, Ложь);
    ПараметрыСканирования.Вставить("ТребуетсяПроверкаСредствамиККТ" 	                    , Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыСканированияИСПМ_Функция(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента,Шаблон)
	
	ПроверкаБезСертификатаИС = Шаблон.МаркировкаПроверкаБезСертификатаИС;
	
	ПараметрыСканирования = Новый Структура();
	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции"										, Новый Массив);
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	
	Попытка	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукцииДокумента); Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки"                      				, Ложь);
	ПараметрыСканирования.Вставить("КэшМаркируемойПродукции"                        				, Неопределено);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции"             				, Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции" 				, Истина);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД"                            				, Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева"  				, Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИС"         				, Истина);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок"         				, Ложь);
	ПараметрыСканирования.Вставить("ДоступнаПечатьЭтикеток"                         				, Ложь);
	ПараметрыСканирования.Вставить("Детализация"                         							, Неопределено);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения"                   				, Неопределено);
	
	Если ПроверкаБезСертификатаИС Тогда
		ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"										, Ложь);
		ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП"					, Ложь);
	Иначе
		ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"										, Истина);
		ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП"					, Истина);
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот"									, Ложь);
	ПараметрыСканирования.Вставить("СтатусКодаМаркировкиПоУмолчанию"								, Неопределено);
	ПараметрыСканирования.Вставить("СсылкаНаОбъект"													, Неопределено);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой"					, Ложь);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру"										, Ложь);
	ПараметрыСканирования.Вставить("Организация"													, Неопределено);
	
	Попытка ПараметрыСканирования.Организация = ПроверяемыйДокумент.Организация; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий"											, Неопределено);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП"									, Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС"											, Ложь);
	ПараметрыСканирования.Вставить("Владелец"														, Неопределено);
	
	ПараметрыСканирования.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок"								, "ШтрихкодыУпаковок");
	ПараметрыСканирования.Вставить("ИмяКолонкиШтрихкодУпаковки"										, "ШтрихкодУпаковки");
	
	ПараметрыСканирования.Вставить("ОтборПоВидуПродукции"											, Истина);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПула"									, Ложь);
	
	ПараметрыСканирования.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры"				, Новый Массив());
	
	ПараметрыСканирования.Вставить("ЗаполнятьСрокГодности"											, Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьОкончаниеСрокаГодности"							, Ложь);
	
	ПараметрыСканирования.Вставить("ТолькоМаркируемаяПродукция"										, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП"									, Ложь);
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП"									, Ложь);
	
	ПараметрыСканирования.Вставить("ЗаписыватьЛогЗапросовИСМП"										, Ложь);
	
	ПараметрыСканирования.Вставить("Склад"															, Справочники.Склады.ПустаяСсылка());
	Попытка ПараметрыСканирования.Склад = ПроверяемыйДокумент.Склад; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("КэшированныеЗначения"											, Неопределено);	
	ПараметрыСканирования.Вставить("ДополнительныеПараметры"										, Новый Структура());
	//ПараметрыСканирования.Вставить("ЗапрашиватьДанныеСервисаИСМП"									, Ложь);
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"								, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПулаИСМП"								, Ложь);
	ПараметрыСканирования.Вставить("КонтрольРасхожденийСДокументомОснованием"						, Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировки"									, Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировкиИСМП"								, Ложь);	
	ПараметрыСканирования.Вставить("ВыполняетсяЗагрузкаДанныхВФормуПроверкиИПодбораИСМП"			, Истина);
	ПараметрыСканирования.Вставить("ВидОперацииИСМП"												, Неопределено);
	ПараметрыСканирования.Вставить("ЭтоОтчетПроизводственнойЛинии"									, Ложь);	
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыИСМП"                                			, Новый Массив);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокИСМП"                        			, Новый Массив);
	//ПараметрыСканирования.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП"			, Ложь);
	ПараметрыСканирования.Вставить("ЭтоМаркировкаОстатков"                                			, Неопределено);
	ПараметрыСканирования.Вставить("ДатаДокумента"                                        			, ПроверяемыйДокумент.Дата);
	ПараметрыСканирования.Вставить("СозданиеНаборов"												, Ложь);
	ПараметрыСканирования.Вставить("ПоддерживаетсяОбъемноСортовойУчет"								, Ложь);	
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеСервисаИСМП"									, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьСтатусыКодовМаркировки"							, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировки"						, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьСтатусыКодовМаркировкиИСМП"						, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП"					, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("ПроверятьСтруктуруКодовМаркировки"								, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("РазрешеноЗапрашиватьКодМаркировки"								, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьВладельца"										, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП"			, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("ТребуетсяПроверкаСредствамиККТ" 	                    		, Ложь);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыПроверкиКодовМаркировкиИСМП(ПроверяемыйДокумент,Шаблон)
	
	ПроверкаБезСертификатаИС = Шаблон.МаркировкаПроверкаБезСертификатаИС;
	
	ПараметрыПроверкиКодовМаркировки = Новый Структура();
		
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки"									, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеИСМП"												, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировкиИСМП"								, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП"								, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельцевКодовМаркировки"									, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервиса"												, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервисаИСМП"											, Не ПроверкаБезСертификатаИС);
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	Модуь_ИнтеграцияИСВызовСервера = ОбщийМодуль("ИнтеграцияИСВызовСервера");
		
	Попытка
		Если Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" Тогда
			ИННВладельца = Модуь_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Контрагент).ИНН;
			Владелец     = ПроверяемыйДокумент.Контрагент;
		Иначе
			ИННВладельца = Модуь_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Организация).ИНН;
			Владелец     = ПроверяемыйДокумент.Организация;			
		КонецЕсли;
		ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца"												, Истина);
	Исключение
		ИННВладельца = "";
		Владелец     = Неопределено;
		ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца"												, Ложь);
	КонецПопытки;	
		
	ПараметрыПроверкиКодовМаркировки.Вставить("ИННВладельца"															, ИННВладельца);
	ПараметрыПроверкиКодовМаркировки.Вставить("Владелец"																, Владелец);
	ПараметрыПроверкиКодовМаркировки.Вставить("ОбратноеСканирование"													, Ложь);
	
	ДопустимыеСтатусыКодовМаркировки = Новый Массив;	
	ДопустимыеСтатусыУпаковок = Новый Массив;
	
	ЗаполнитьПоВидуДокументаДопустимыеСтатусыИСМП(Шаблон,ДопустимыеСтатусыКодовМаркировки,ДопустимыеСтатусыУпаковок);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки"										, ДопустимыеСтатусыКодовМаркировки);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок"												, ДопустимыеСтатусыКодовМаркировки);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервиса"												, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервисаИСМП"											, Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыйСпособВводаВОборот"											, Новый Массив);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВложенностьУпаковок"										, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеВложенияАгрегатов"												, Неопределено);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева"					, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтандартнуюВложенность"									, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставАгрегата"											, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьКоличествоМерногоТовара"										, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("РежимИсправленияОшибокПослеПередачиКодов"								, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыНаборов"												, Неопределено);
	
	Возврат ПараметрыПроверкиКодовМаркировки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоВидуДокументаДопустимыеСтатусыИСМП(Шаблон,ДопустимыеСтатусыИСМП,ДопустимыеСтатусыУпаковокИСМП)
	
	Если Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" Или Шаблон.ВидДокумента = "ПриемкаТоваровИСМП" Тогда
		
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
	ИначеЕсли Шаблон.ВидДокумента = "МаркировкаТоваровИСМП" Тогда
		
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС"));
		
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС"));
		
	ИначеЕсли Шаблон.ВидДокумента = "ЧекККМВозврат" Тогда
		
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		
	ИначеЕсли Шаблон.ВидДокумента = "ВозвратТоваровОтКлиента"  Тогда		
		
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
	Иначе		
		//Отгрузка		
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция НачальныеДанныеДляРезультатовПроверкиИСМП(ПараметрыДанных)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          		ДеревоМаркированнойПродукции_ИСМП());
	ДанныеДокумента.Вставить("ПодобраннаяМаркируемаяПродукция",       		ПодобраннаяМаркируемаяПродукция_ИСМП());
	ДанныеДокумента.Вставить("ПараметрыПроверкиКодовМаркировки",      		ПараметрыДанных.ПараметрыПроверкиКодовМаркировки);
	ДанныеДокумента.Вставить("КоличествоНедопустимыхКодовМаркировки", 		0);
	ДанныеДокумента.Вставить("УпаковкиДокумента",                     		Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          		ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("РежимПроверки",                         		ПараметрыДанных.РежимПроверки);
	ДанныеДокумента.Вставить("ДобавленныеУпаковки",                   		Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",          		Новый СписокЗначений());
	ДанныеДокумента.Вставить("СледующийСтикерОтложено",               		1);
	ДанныеДокумента.Вставить("СодержимоеУпаковокНедоступно",          		Ложь);
	ДанныеДокумента.Вставить("СохраненВыборПоМаркируемойПродукции",   		Ложь);
	ДанныеДокумента.Вставить("ДанныеВыбораПоМаркируемойПродукции",    		Неопределено);
	ДанныеДокумента.Вставить("ШтрихкодТекущейПроверяемойУпаковки",    		"");
	ДанныеДокумента.Вставить("ШтрихкодыУпаковок",                     		Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДанныеРанееСгенерированныхШтрихкодов",  		Неопределено);	
	ДанныеДокумента.Вставить("КоличествоПоДокументуСУчетомВидаПродукции", 	Неопределено);
	ДанныеДокумента.Вставить("Контейнер",                             		Неопределено);	
	
	//нужны для первоначального получения данных	
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               					ПараметрыДанных.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",      					ПараметрыДанных.РежимПодбораСуществующихУпаковок);
	ДанныеДокумента.Вставить("ПроверкаЭлектронногоДокумента",         					ПараметрыДанных.ПроверкаЭлектронногоДокумента);
	ДанныеДокумента.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", 	ПараметрыДанных.КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", 				ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("СтрокаПродукцияБезУпаковки",   							Неопределено);
	ДанныеДокумента.Вставить("Организация",                	 							ПараметрыДанных.ПараметрыСканирования.Организация);
	ДанныеДокумента.Вставить("ПроверяемыйДокумент",          							ПараметрыДанных.ПроверяемыйДокумент);
	ДанныеДокумента.Вставить("СтрокаПродукцияОбъемноСортовойУчет", 						Неопределено);
	ДанныеДокумента.Вставить("ПоддерживаетсяОбъемноСортовойУчет",       				ПараметрыДанных.ПоддерживаетсяОбъемноСортовойУчет);
	ДанныеДокумента.Вставить("ВидМаркируемойПродукции",      							ПараметрыДанных.ВидМаркируемойПродукции);
	ДанныеДокумента.Вставить("КешЛогистическихУпаковок",     							Новый Соответствие);
	ДанныеДокумента.Вставить("ЗначенияШтрихкодовОбработанныхСОшибками", 				Новый Массив);
	ДанныеДокумента.Вставить("ОшибкиПроверкиСредствамиККТ",
		РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.ДанныеРезультатовПроверкиДляПроверкиИПодбора(
			ПараметрыДанных.ПроверяемыйДокумент,
			ПараметрыДанных.ВидМаркируемойПродукции));
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	
	ТаблицаМаркируемойПродукции = Модуь_ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента(
	ПараметрыДанных.ПроверяемыйДокумент, ПараметрыДанных.ВидМаркируемойПродукции);	
	ЗаполнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(ТаблицаМаркируемойПродукции, ДанныеДокумента);
	
	ПараметрыСканирования = ПараметрыДанных.ПараметрыСканирования;
	ПараметрыСканирования.СсылкаНаОбъект = ПараметрыДанных.ПроверяемыйДокумент;
	
	Модуь_ШтрихкодированиеИСМПСлужебный = ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
	Модуь_ШтрихкодированиеИСМП = ОбщийМодуль("ШтрихкодированиеИСМП");

	Попытка
		РезультатПолученияДанных = Модуь_ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(
		ПараметрыДанных.ПроверяемыйДокумент, ПараметрыСканирования.Детализация, ПараметрыСканирования);
	Исключение
		Попытка
			РезультатПолученияДанных = Модуь_ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(
			ПараметрыДанных.ПроверяемыйДокумент, ПараметрыСканирования, Ложь);	
		Исключение
			РезультатПолученияДанных = Модуь_ШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ПараметрыДанных.ПроверяемыйДокумент,
			ПараметрыСканирования, Истина);
		КонецПопытки; 		
	КонецПопытки;
	
	Если РезультатПолученияДанных.ЕстьОшибки Тогда
		ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
	КонецЕсли;
	
	ДанныеПроверяемогоДокумента = РезультатПолученияДанных.ВложенныеШтрихкоды;	
	ЗаполнитьТаблицуКоличествоПоДокументуСУчетомВидаПродукции_ИСМП(ДанныеДокумента, ПараметрыДанных.ВидМаркируемойПродукции);
	ДополнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(
	ДанныеПроверяемогоДокумента, ДанныеДокумента, ПараметрыДанных.ВидМаркируемойПродукции,ПараметрыДанных.ПараметрыСканирования);	
	ЗаполнитьДеревоМаркированнойПродукции_ИСМП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента, ПараметрыСканирования);	
	ЗаполнитьСписокШтрихкодыУпаковок_ИСМП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента.ШтрихкодыУпаковок);	
	
	///НУЖНЫЙ РЕЗУЛЬТАТ			
	РезультатыСканированияМаркируемойПродукции = Новый Структура;
	РезультатыСканированияМаркируемойПродукции.Вставить("ДеревоМаркированнойПродукции",          ДанныеДокумента.ДеревоМаркированнойПродукции); //Тип("ДеревоЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПодобраннаяМаркируемаяПродукция",       ДанныеДокумента.ПодобраннаяМаркируемаяПродукция); //Тип("ТаблицаЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПараметрыПроверкиКодовМаркировки",      ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("КоличествоНедопустимыхКодовМаркировки", ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("УпаковкиДокумента",                     ДанныеДокумента.УпаковкиДокумента);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДетализацияСтруктурыХранения",          ДанныеДокумента.ДетализацияСтруктурыХранения);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДобавленныеУпаковки",                   ДанныеДокумента.ДобавленныеУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",          ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ШтрихкодыУпаковок",                     ДанныеДокумента.ШтрихкодыУпаковок);
	
	Возврат РезультатыСканированияМаркируемойПродукции; 
	
КонецФункции

&НаСервере
Функция ДеревоМаркированнойПродукции_ИСМП()
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                                  		Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",                		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки",                                     		Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП, ПеречислениеСсылка.ТипыУпаковок"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",                   		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",                   		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",                		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                                        		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                            		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",                       		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",                    		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",                         		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                                   		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимогоДоСопоставления",      			ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",                			ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхПотребительскихУпаковок", 			ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                            		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",                    		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",                           		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",                      		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",                		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",              		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",                      		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                                        		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                                    		Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                                  		Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                                           		Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                             		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                            		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",                     		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",                   		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                                    		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННАгента",                                       		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                            		Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                            		Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                             		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки",             		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",                       		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СодержимоеНедоступно",                            		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС",                 		Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ГоденДо",                                         		Новый ОписаниеТипов("Дата"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СкоропортящаясяПродукция",                        		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипШтрихкода",                                    		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСуммаНормализации",                            		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидУпаковки",                                     		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СпособВводаВОборот",                              		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТекстОшибкиПроверкиСредствамиККТ",                		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СостояниеТребованияПолногоКодаККТ",               		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Количество",                                      		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",                        		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетВзвешивания",                              		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеПересчитыватьКоличествоПотребительскихУпаковок", 		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Коэффициент",                                      		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхГрупповыхУпаковок",            		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытие",                                		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеВариантУчета",                    		Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИСМП"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",                    		Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика",                  		Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПлановоеКоличествоПотребительскихУпаковок", 				ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НормализованныйШтрихкод",                         		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТекстОбработанСОшибкойВГИСМТ",                    		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ОбработанСОшибкойВГИСМТ",                         		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ОбъемноСортовойУчет",                             		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусRFID",                                      		ТипЧисло);
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

&НаСервере
Функция ПодобраннаяМаркируемаяПродукция_ИСМП()
	
	ПодобраннаяМаркируемаяПродукция = Новый ТаблицаЗначений();
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Номенклатура",                    								Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Характеристика",                  								Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Серия",                           								Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Количество",                      								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобрано",             								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИндексКодаМаркировки",            								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("GTIN",                            								Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеНоменклатуры",       								Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("СтатусУказанияСерий",             								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ХарактеристикиИспользуются",      								Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТипНоменклатуры",                 								Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НомерСтроки",                     								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоИС",                    								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставлена",        								Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС", 								Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ГоденДо",                         								Новый ОписаниеТипов("Дата"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Скоропортящаяся",                 								Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КодыGTIN",                        								Новый ОписаниеТипов("СписокЗначений"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеGTIN",               								Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставленаПоУПД",   								Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковок",                     			Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковокВСтруктуреУпаковок",   			Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",                              			Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТребуетВзвешивания",                                    			Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковокТребующихВзвешивания", 			Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобраноВзвешено",                           			Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобраноВзвешеноОСУ",                        			Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковокОСУ",                  			Новый ОписаниеТипов("Число"));
	
	Возврат ПодобраннаяМаркируемаяПродукция;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(ТаблицаМаркируемойПродукции, ДанныеДокумента, СвойстваВидаПродукции = Неопределено)
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер 	= ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер"); 
	Модуь_ИнтеграцияИСПереопределяемый 				= ОбщийМодуль("ИнтеграцияИСПереопределяемый");
	Модуь_ИнтеграцияИСКлиентСервер					= ОбщийМодуль("ИнтеграцияИСКлиентСервер");

	Если ДанныеДокумента.РежимПодбораСуществующихУпаковок
			Или Не ДанныеДокумента.ПроверкаЭлектронногоДокумента Тогда
		
		НомерСтроки = 1;
		Для каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
			
			СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
			
			Попытка 
				ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника,, "КоличествоПотребительскихУпаковок");
			Исключение
				ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника);
			КонецПопытки;
			
			СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
			СтрокаПодобраннойПродукции.ПредставлениеGTIN = Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПредставлениеМассиваGTIN(СтрокаПодобраннойПродукции.КодыGTIN);
			Если СтрокаПодобраннойПродукции.КодыGTIN.Количество() = 1 Тогда
				СтрокаПодобраннойПродукции.GTIN = СтрокаПодобраннойПродукции.КодыGTIN[0].Значение;
			КонецЕсли;
			СтрокаПодобраннойПродукции.НомерСтроки = НомерСтроки;
			
			Попытка 
				Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции, СвойстваВидаПродукции);
			Исключение
				Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
			КонецПопытки;	
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	Иначе		
		ИменаКолонок = Новый Массив;
		ИменаКолонок.Добавить("Номенклатура");
		ИменаКолонок.Добавить("Характеристика");
		Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ДанныеДокумента.ВидМаркируемойПродукции) Тогда
			ИменаКолонок.Добавить("ГоденДо");
			ИменаКолонок.Добавить("ИдентификаторПроисхожденияВЕТИС");
			ИменаКолонок.Добавить("СкоропортящаясяПродукция");
		КонецЕсли;
		
		ИменаКолонокСтрокой = СтрСоединить(ИменаКолонок, ",");
		
		Для каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл			
			СтруктураПоиска = Новый Структура(ИменаКолонокСтрокой);
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИсточника);
			
			Если СтрокаИсточника.КодыGTIN.Количество() = 1 Тогда
				СтруктураПоиска.Вставить("GTIN", СтрокаИсточника.КодыGTIN[0].Значение);
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаИсточника.Номенклатура)
				И ЗначениеЗаполнено(СтрокаИсточника.GTIN) Тогда
				СтруктураПоиска.Вставить("GTIN", СтрокаИсточника.GTIN); // Требует рассмотрения
			КонецЕсли;
			
			НайденныеСтроки = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтруктураПоиска);
				
				СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
				СтрокаПодобраннойПродукции.КодыGTIN                 = СтрокаИсточника.КодыGTIN;
				СтрокаПодобраннойПродукции.ПредставлениеGTIN        = Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПредставлениеМассиваGTIN(СтрокаПодобраннойПродукции.КодыGTIN);
				
			Иначе				
				СтрокаПодобраннойПродукции = НайденныеСтроки[0];				
			КонецЕсли;
			
			СтрокаПодобраннойПродукции.Количество = СтрокаПодобраннойПродукции.Количество + СтрокаИсточника.Количество;			
		КонецЦикла;
		
		НомерСтроки = 0;
		
		Для каждого СтрокаПодобраннойПродукции Из ДанныеДокумента.ПодобраннаяМаркируемаяПродукция Цикл
			НомерСтроки = НомерСтроки + 1;
			СтрокаПодобраннойПродукции.НомерСтроки = НомерСтроки;
			
			Попытка 
				Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции, СвойстваВидаПродукции);
			Исключение
				Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
			КонецПопытки;	
		КонецЦикла;
		
	КонецЕсли;
	
	Модуь_ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(Неопределено, ДанныеДокумента.ПодобраннаяМаркируемаяПродукция);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКоличествоПоДокументуСУчетомВидаПродукции_ИСМП(ДанныеДокумента, ВидПродукции)
	
	ПодобраннаяМаркируемаяПродукция = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция;
	
	Если ПодобраннаяМаркируемаяПродукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСвойстваВидаПродукции = Новый Массив;
	
	ИменаКолонокТаблицы = Новый Массив;
	ИменаКолонокТаблицы.Добавить("GTIN");
	ИменаКолонокТаблицы.Добавить("Номенклатура");
	ИменаКолонокТаблицы.Добавить("Характеристика");
	ИменаКолонокТаблицы.Добавить("Серия");
	ИменаКолонокТаблицы.Добавить("Количество");
	ИменаКолонокТаблицы.Добавить("ИдентификаторПроисхожденияВЕТИС");
	ИменаКолонокТаблицы.Добавить("ГоденДо");
	ИменаКолонокТаблицы.Добавить("Скоропортящаяся");
	
	КоличествоПоДокументуСУчетомВидаПродукции =
	ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки(СтрСоединить(ИменаКолонокТаблицы, ","));
	
	Для каждого СтрокаПодобраннойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если СтрокаПодобраннойПродукции.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.GTIN) Тогда
			
			// Только остаточные GTIN
			Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПроверяемыеСвойстваВидаПродукции.Количество() = 0 Тогда
				Продолжить; // Сохраняем только специвические колонки
			КонецЕсли;
			
			Для каждого ИмяСвойства Из ПроверяемыеСвойстваВидаПродукции Цикл
				Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции[ИмяСвойства]) Тогда
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
		КоличествоПоДокументуСУчетомВидаПродукции.Добавить(), СтрокаПодобраннойПродукции);
		
	КонецЦикла;
	
	Если КоличествоПоДокументуСУчетомВидаПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента.Вставить("КоличествоПоДокументуСУчетомВидаПродукции", КоличествоПоДокументуСУчетомВидаПродукции);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(ДанныеПроверяемогоДокумента, ДанныеДокумента, ВидПродукции, ПараметрыСканирования)
	
	ТаблицаМаркируемойПродукции = ДанныеПроверяемогоДокумента.МаркированныеТовары.СкопироватьКолонки();
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");

	ДополнитьТаблицуМаркируемойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ТаблицаМаркируемойПродукции);
	
	//возможны разные варианты в разных версиях 1С
	Попытка 
		Модуь_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукции(
			ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);
	Исключение			
		Попытка			
			Модуь_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукции(
				ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции);
		Исключение	
			Попытка
				Модуь_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукцииИСМП(
					ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);
			Исключение
			КонецПопытки;
		КонецПопытки;
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМаркированнойПродукции_ИСМП(ДеревоУпаковокДокумента, ДанныеДокумента, ПараметрыСканирования)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева_ИСМП(ДеревоУпаковокДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоУпаковокДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаПродукцияБезУпаковки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
		ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента);
	КонецЕсли;
	
	Если ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет = Неопределено
		И ДанныеДокумента.ПоддерживаетсяОбъемноСортовойУчет Тогда
		ДобавленнаяСтрокаПродукцияОбъемноСортовогоУчета_ИСМП(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДетализацияСтруктурыХраненияДерева_ИСМП(ДеревоУпаковок)
	
	ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки;
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	Для каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.КоробаПотребительскиеУпаковки;
			
			Для каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
				Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
					ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования, ЭтоОСУ = Ложь)
	
	КешЛогистическихУпаковок = ДанныеДокумента.КешЛогистическихУпаковок;
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер 	= ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер 	= ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	Модуь_ПроверкаИПодборПродукцииИСМП 				= ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	Модуь_ИнтеграцияИСКлиентСервер 					= ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	Если СтрокаИсточника.ТипУпаковки = Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для каждого СтрокаПродукции Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаПродукции, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.ТипУпаковки = Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБлокиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБлокиБезКоробки_ИСМП(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для каждого СтрокаИсточникаБлок Из СтрокаИсточника.Строки Цикл
				Если ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
					ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаИсточникаБлок, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
				Иначе
					Для каждого СтрокаИсточникаПачка Из СтрокаИсточникаБлок.Строки Цикл
						ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.ТипУпаковки = Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиОбъемноСортовойУчет() Тогда
		
		НоваяСтрока = ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет;
		
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = ДобавленнаяСтрокаПродукцияОбъемноСортовогоУчета_ИСМП(ДанныеДокумента);
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
		
		ЭлементГруппировкиПоGTIN = Обработки.ПроверкаИПодборПродукцииИСМП.СтрокаОбъемноСортовогоУчетаПоGTIN(ДанныеДокумента, СтрокаИсточника);
		
		Если СтрокаИсточника.Строки.Количество() = 0 Тогда
			НоваяСтрока = ЭлементГруппировкиПоGTIN.Строки.Добавить();
		Иначе
			Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(ПодчиненнаяСтрокаИсточника, ЭлементГруппировкиПоGTIN.Строки, ДанныеДокумента, ПараметрыСканирования);
			КонецЦикла;
			Возврат;
		КонецЕсли;	
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
		
		СтрокаПродукцияБезУпаковки = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
		
		Если СтрокаПродукцияБезУпаковки = Неопределено Тогда
			СтрокаПродукцияБезУпаковки = ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПродукцияБезУпаковки.Строки.Добавить();
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И (Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника)
			Или Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаНабор(СтрокаИсточника))
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
		
		СтрокаБлокиБезКоробки = ДанныеДокумента.СтрокаБлокиБезКоробки;
		
		Если СтрокаБлокиБезКоробки = Неопределено Тогда
			СтрокаБлокиБезКоробки = ДобавленнаяСтрокаБлокиБезКоробки_ИСМП(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБлокиБезКоробки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	ИначеЕсли СтрокаИсточника.Родитель <> Неопределено
		И (Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника.Родитель)
			Или Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаНабор(СтрокаИсточника.Родитель))
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
		
		Возврат;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	ОшибкаПроверкиККТ = ДанныеДокумента.ОшибкиПроверкиСредствамиККТ.Получить(НоваяСтрока.Штрихкод);
	Если ОшибкаПроверкиККТ <> Неопределено Тогда
		НоваяСтрока.ТекстОшибкиПроверкиСредствамиККТ = ОшибкаПроверкиККТ.ОписаниеОшибок;
		Если ОшибкаПроверкиККТ.ТребуетсяПолныйКодМаркировки Тогда
			НоваяСтрока.СостояниеТребованияПолногоКодаККТ = 1;
		КонецЕсли;
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииИСМП.ОбработкаСтрокиЧастичногоВыбытияПриВосстановленииДанных(
		НоваяСтрока,
		СтрокаИсточника,
		ПараметрыСканирования,
		ДанныеДокумента.ВидМаркируемойПродукции);
	
	Если ДанныеДокумента.ЗначенияШтрихкодовОбработанныхСОшибками.Найти(НоваяСтрока.Штрихкод) <> Неопределено Тогда
		НоваяСтрока.ТекстОбработанСОшибкойВГИСМТ = НСтр("ru = 'Пакет обработан с ошибкой в ГИС МТ'");
		НоваяСтрока.ОбработанСОшибкойВГИСМТ      = Истина;
	КонецЕсли;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки         = СтрокаИсточника.ПредставлениеНоменклатуры;
		НоваяСтрока.ПредставлениеСодержимогоДоСопоставления = СтрокаИсточника.ПредставлениеНоменклатуры;
	КонецЕсли;

	Если ТипЗнч(ДанныеДокумента.ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		
		ОтрезатьСодержимоеГрупповыхУпаковок     = Ложь;
		ОтрезатьСодержимоеЛогистическойУпаковки = Ложь;
		
	Иначе
		
		ОтрезатьСодержимоеГрупповыхУпаковок =
			(СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Или СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
			И (ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
				Или ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
				Или (СтрокаИсточника.КоличествоПотребительскихУпаковок > 0 И СтрокаИсточника.Строки.Количество() = 0));
		
		ОтрезатьСодержимоеЛогистическойУпаковки =
			(СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
			И (ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) И СтрокаИсточника.КоличествоПотребительскихУпаковок > 0 И ЗначениеЗаполнено(СтрокаИсточника.GTIN))
			И (ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
				Или СтрокаИсточника.Строки.Количество() = 0);
		
	КонецЕсли;
	
	НоваяСтрока.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаИсточника.КоличествоПотребительскихУпаковок;
	
	Если (НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
		И ОтрезатьСодержимоеГрупповыхУпаковок Тогда
		НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
	КонецЕсли;
	
	Если (НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		Или НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
		И ОтрезатьСодержимоеЛогистическойУпаковки Тогда
		НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	Попытка 
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	Исключение
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	КонецПопытки;
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(НоваяСтрока);
	
	СтрокаРодитель = НоваяСтрока.Родитель;
	Если СтрокаРодитель <> Неопределено
		И СтрокаРодитель.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN Тогда
		ЭтоОСУ = Истина;
	ИначеЕсли НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
		ЭтоОСУ = Истина;
	КонецЕсли;
	Если ЭтоОСУ = Неопределено Тогда
		ЭтоОСУ = Ложь;
	КонецЕсли;
	
	Если Не ДанныеДокумента.ПараметрыПроверкиКодовМаркировки.РежимИсправленияОшибокПослеПередачиКодов
		Или НоваяСтрока.ОбработанСОшибкойВГИСМТ
		Или (НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			И НоваяСтрока.Родитель <> Неопределено
			И НоваяСтрока.Родитель.ОбработанСОшибкойВГИСМТ) Тогда
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки,, ЭтоОСУ);
	КонецЕсли;
		
	Если НоваяСтрока.СодержимоеНедоступно Тогда
		ДанныеДокумента.СодержимоеУпаковокНедоступно = Истина;
	КонецЕсли;
	
	Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;

	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента, ПараметрыСканирования, ЭтоОСУ);
	КонецЦикла;
	
	Если ДанныеДокумента.ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегата
		И НоваяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		И КешЛогистическихУпаковок.Получить(НоваяСтрока.НормализованныйШтрихкод) = Неопределено Тогда
		
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьСоставАгрегата(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
		КешЛогистическихУпаковок.Вставить(НоваяСтрока.НормализованныйШтрихкод, Истина);
		
	КонецЕсли;
	
	Если НоваяСтрока.НедопустимыйКодМаркировки Тогда
		ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки = ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	Попытка 
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока);
	Исключение
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	КонецПопытки;
	
	ДанныеДокумента.СтрокаПродукцияБезУпаковки = НоваяСтрока;
	
	Возврат НоваяСтрока;

КонецФункции

&НаСервере
Функция ДобавленнаяСтрокаБлокиБезКоробки_ИСМП(ДанныеДокумента)
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	
	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	ИначеЕсли СтрокиДерева[0].ТипУпаковки <> Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	Иначе
		НоваяСтрока = СтрокиДерева.Вставить(1);
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	
	ДанныеДокумента.СтрокаБлокиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;

КонецФункции

&НаСервере
Функция ДобавленнаяСтрокаПродукцияОбъемноСортовогоУчета_ИСМП(ДанныеДокумента)
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Добавить();
	Иначе
		ТекущийИндекс            = 0;
		МаксимальныйИндексСтроки = 2;
		
		Для ТекущийИндекс = 0 По Мин(СтрокиДерева.Количество() - 1, МаксимальныйИндексСтроки) Цикл
			Если СтрокиДерева[ТекущийИндекс].ТипУпаковки = Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
				Или СтрокиДерева[ТекущийИндекс].ТипУпаковки = Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
				Продолжить;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		НоваяСтрока = СтрокиДерева.Вставить(ТекущийИндекс);
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияОбъемноСортовойУчет(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	
	ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокШтрихкодыУпаковок_ИСМП(СтрокаИсточника, ШтрихкодыУпаковок)
	
	Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		Если ЗначениеЗаполнено(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки)
			И ШтрихкодыУпаковок.НайтиПоЗначению(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки) = Неопределено Тогда
			ШтрихкодыУпаковок.Добавить(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки, ПодчиненнаяСтрокаИсточника.Штрихкод);
		КонецЕсли;
		Если СтрокаИсточника.Строки.Количество() > 0 Тогда
			ЗаполнитьСписокШтрихкодыУпаковок_ИСМП(ПодчиненнаяСтрокаИсточника, ШтрихкодыУпаковок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//МОТП
&НаСервере
Функция ПолучитьПараметрыМОТП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента,Шаблон)
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("ПроверкаНеПоДокументу",            Ложь);                   
	ПараметрыОперации.Вставить("ПроверяемыйДокумент",              ПроверяемыйДокумент);
	ПараметрыОперации.Вставить("НачальныйСтатусПроверки",          Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
	ПараметрыОперации.Вставить("ДетализацияСтруктурыХранения",     Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.ПустаяСсылка());
	ПараметрыОперации.Вставить("РедактированиеФормыНедоступно",    Ложь);
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок", 	Ложь);
	Иначе	
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок", 	Истина);
	КонецЕсли;
	
	ПараметрыОперации.Вставить("ПараметрыСканирования",            ПолучитьПараметрыСканированияМОТП_Функция(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента));
	ПараметрыОперации.Вставить("ПараметрыПроверкиКодовМаркировки", ПолучитьПараметрыПроверкиКодовМаркировкиМОТП(ПроверяемыйДокумент,Шаблон));
	ПараметрыОперации.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Ложь);
	ПараметрыОперации.Вставить("ПроверкаЭлектронногоДокумента", Ложь);
	ПараметрыОперации.Вставить("ВидМаркируемойПродукции"		, ВидМаркируемойПродукцииДокумента);
	ПараметрыОперации.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП", Истина);
	ПараметрыОперации.Вставить("ЭтоВосстановлениеДетализации", Ложь);
	
	ПараметрыОперации.Вставить("РежимИсправленияОшибокПослеПередачиКодов", Ложь);
	ПараметрыОперации.Вставить("ПоддерживаетсяОбъемноСортовойУчет", Ложь);

	Попытка ПараметрыОперации.Вставить("ДанныеКлючаСессииМОТП", ПараметрыСеанса.ДанныеКлючаСессииМОТП); Исключение КонецПопытки;
	
	Возврат ПараметрыОперации;
	
КонецФункции

&НаСервере
Процедура ПолучитьПараметрыСканированияМОТП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента, ПараметрыСканирования, ИзСервиса = Ложь)
	
	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции", Новый Массив);
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	
	Попытка	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукцииДокумента); Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки"                      , Ложь);
	ПараметрыСканирования.Вставить("КэшМаркируемойПродукции"                        , Неопределено);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции"             , Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции" , Истина);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД"                            , Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева"  , Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИС"         , Истина);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок"         , Ложь);
	ПараметрыСканирования.Вставить("ДоступнаПечатьЭтикеток"                         , Ложь);
	ПараметрыСканирования.Вставить("Детализация"                         			, Неопределено);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения"                   , Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот"					, Ложь);
	ПараметрыСканирования.Вставить("СтатусКодаМаркировкиПоУмолчанию"				, Неопределено);
	ПараметрыСканирования.Вставить("СсылкаНаОбъект"									, Неопределено);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой"	, Ложь);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру"						, Ложь);
	ПараметрыСканирования.Вставить("Организация"									, Неопределено);
	
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулМОТП"				, Ложь);
	
	Попытка ПараметрыСканирования.Организация = ПроверяемыйДокумент.Организация; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий"							, Неопределено);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП"					, Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС"							, Ложь);	
	
	КонтролироватьСтатусы = Ложь;
	
	Если КонтролироватьСтатусы Тогда
		ВариантПолученияМРЦ = "ВычислениеИЗапрос";
	Иначе
		ВариантПолученияМРЦ = "Вычисление";
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения",             Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыМОТП",                   ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокМОТП", ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП", ИзСервиса);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыМОТП",                    Новый Массив);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокМОТП",            Новый Массив);
	ПараметрыСканирования.Вставить("Детализация",                              Неопределено);
	ПараметрыСканирования.Вставить("ВариантПолученияМРЦ",                      ВариантПолученияМРЦ);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокМОТП",              Ложь);
	
	ПараметрыСканирования.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок"	, "ШтрихкодыУпаковок");
	ПараметрыСканирования.Вставить("ИмяКолонкиШтрихкодУпаковки"			, "ШтрихкодУпаковки");
	
	ПараметрыСканирования.Вставить("ОтборПоВидуПродукции"			, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПула"	, Ложь);
	
	ПараметрыСканирования.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры"	, Новый Массив());
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП"						, Ложь);
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП"						, Ложь);
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"					, Ложь);
	ПараметрыСканирования.Вставить("ДопустимыПроверкиСеройЗоныМОТП"						, Ложь);
	
	ПараметрыСканирования.Вставить("КонтроллироватьРасхождениеСоставаУпаковокМеждуИБиМОТП"	            , Ложь);
	ПараметрыСканирования.Вставить("ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП"	, Истина);
	ПараметрыСканирования.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП"	                    , Истина);
	
	ПараметрыСканирования.Вставить("ЗаполнятьСрокГодности"								, Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьОкончаниеСрокаГодности"				, Ложь);

	ПараметрыСканирования.Вставить("ТолькоМаркируемаяПродукция"				    , Ложь);
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП"				, Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировки"			    , Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировкиИСМП"			, Ложь);
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП"				, Ложь); 
	   
	ПараметрыСканирования.Вставить("ЗаписыватьЛогЗапросовИСМП"					, Ложь);
	
	ПараметрыСканирования.Вставить("Склад"										, Справочники.Склады.ПустаяСсылка());
	Попытка ПараметрыСканирования.Склад = ПроверяемыйДокумент.Склад; Исключение КонецПопытки;
	ПараметрыСканирования.Вставить("КэшированныеЗначения"									, Неопределено);	
	ПараметрыСканирования.Вставить("ДополнительныеПараметры"								, Новый Структура());	
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеСервисаИСМП"							, Истина);
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"						, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПулаИСМП"						, Ложь);	
	ПараметрыСканирования.Вставить("КонтролироватьСтатусыКодовМаркировкиИСМП"				, Истина);
	ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП"			, Истина);
	ПараметрыСканирования.Вставить("ПроверятьСтруктуруКодовМаркировки"						, Истина);
	ПараметрыСканирования.Вставить("РазрешеноЗапрашиватьКодМаркировки"						, Истина);
	ПараметрыСканирования.Вставить("КонтролироватьВладельца"		  						, Истина);
	ПараметрыСканирования.Вставить("КонтрольРасхожденийСДокументомОснованием"				, Ложь);	
	ПараметрыСканирования.Вставить("ВыполняетсяЗагрузкаДанныхВФормуПроверкиИПодбораИСМП"	, Истина);
	ПараметрыСканирования.Вставить("ВидОперацииИСМП"										, Неопределено);
	ПараметрыСканирования.Вставить("ЭтоОтчетПроизводственнойЛинии"							, Ложь);	
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыИСМП"                                	, Новый Массив);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокИСМП"                        	, Новый Массив);
	ПараметрыСканирования.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП"	, Ложь);
	ПараметрыСканирования.Вставить("ЭтоМаркировкаОстатков"                                	, Неопределено);
	ПараметрыСканирования.Вставить("ДатаДокумента"                                        	, ПроверяемыйДокумент.Дата);
	ПараметрыСканирования.Вставить("СозданиеНаборов"									 	, Ложь);
    ПараметрыСканирования.Вставить("ТребуетсяПроверкаСредствамиККТ" 	                    , Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыСканированияМОТП_Функция(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента, ПараметрыСканирования = Неопределено, ИзСервиса = Ложь)
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = Новый Структура();	
	КонецЕсли; 
	
	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции", Новый Массив);
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	
	Попытка	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукцииДокумента); Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки"                      , Ложь);
	ПараметрыСканирования.Вставить("КэшМаркируемойПродукции"                        , Неопределено);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции"             , Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции" , Истина);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД"                            , Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева"  , Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИС"         , Истина);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок"         , Ложь);
	ПараметрыСканирования.Вставить("ДоступнаПечатьЭтикеток"                         , Ложь);
	ПараметрыСканирования.Вставить("Детализация"                         			, Неопределено);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения"                   , Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот"					, Ложь);
	ПараметрыСканирования.Вставить("СтатусКодаМаркировкиПоУмолчанию"				, Неопределено);
	ПараметрыСканирования.Вставить("СсылкаНаОбъект"									, Неопределено);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой"	, Ложь);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру"						, Ложь);
	ПараметрыСканирования.Вставить("Организация"									, Неопределено);
	
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулМОТП"				, Ложь);
	
	Попытка ПараметрыСканирования.Организация = ПроверяемыйДокумент.Организация; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий"							, Неопределено);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП"					, Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС"							, Ложь);	
	
	КонтролироватьСтатусы = Ложь;
	
	Если КонтролироватьСтатусы Тогда
		ВариантПолученияМРЦ = "ВычислениеИЗапрос";
	Иначе
		ВариантПолученияМРЦ = "Вычисление";
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения",             Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыМОТП",                   ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокМОТП", ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП", ИзСервиса);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыМОТП",                    Новый Массив);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокМОТП",            Новый Массив);
	ПараметрыСканирования.Вставить("Детализация",                              Неопределено);
	ПараметрыСканирования.Вставить("ВариантПолученияМРЦ",                      ВариантПолученияМРЦ);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокМОТП",              Ложь);
	
	ПараметрыСканирования.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок"	, "ШтрихкодыУпаковок");
	ПараметрыСканирования.Вставить("ИмяКолонкиШтрихкодУпаковки"			, "ШтрихкодУпаковки");
	ПараметрыСканирования.Вставить("ОтборПоВидуПродукции"			, Истина);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПула"	, Ложь);	
	ПараметрыСканирования.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры"	, Новый Массив());
	
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"	, Ложь);
	ПараметрыСканирования.Вставить("ОперацияКонтроляАкцизныхМарок"	, Ложь);
	ПараметрыСканирования.Вставить("ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП"	, Ложь);
	ПараметрыСканирования.Вставить("ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП"	, Дата(1,1,1));
	ПараметрыСканирования.Вставить("ДопустимыйСпособВводаВОборот"	, Неопределено);
	ПараметрыСканирования.Вставить("ДопустимыйСпособВводаВОборот"	, Неопределено);
	ПараметрыСканирования.Вставить("ДопустимыПроверкиСеройЗоныМОТП"	, Ложь);
	ПараметрыСканирования.Вставить("КонтроллироватьРасхождениеСоставаУпаковокМеждуИБиМОТП"				, Ложь);
	ПараметрыСканирования.Вставить("ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП"	, Ложь);
	ПараметрыСканирования.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП"						, Истина);
	
	ПараметрыСканирования.Вставить("ЗаполнятьСрокГодности"								, Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьОкончаниеСрокаГодности"				, Ложь);
	
	ПараметрыСканирования.Вставить("ТолькоМаркируемаяПродукция"				, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП"			, Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировки"			, Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировкиИСМП"		, Ложь);
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП"			, Ложь); 
	   
	ПараметрыСканирования.Вставить("ЗаписыватьЛогЗапросовИСМП"				, Ложь);
	
	ПараметрыСканирования.Вставить("Склад"							, Справочники.Склады.ПустаяСсылка());
	Попытка ПараметрыСканирования.Склад = ПроверяемыйДокумент.Склад; Исключение КонецПопытки;
	ПараметрыСканирования.Вставить("КэшированныеЗначения"									, Неопределено);	
	ПараметрыСканирования.Вставить("ДополнительныеПараметры"								, Новый Структура());	
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеСервисаИСМП"							, Истина);
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"						, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПулаИСМП"						, Ложь);	
	ПараметрыСканирования.Вставить("КонтролироватьСтатусыКодовМаркировкиИСМП"				, Истина);
	ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП"			, Истина);
	ПараметрыСканирования.Вставить("ПроверятьСтруктуруКодовМаркировки"						, Истина);
	ПараметрыСканирования.Вставить("РазрешеноЗапрашиватьКодМаркировки"						, Истина);
	ПараметрыСканирования.Вставить("КонтролироватьВладельца"								, Истина);
	ПараметрыСканирования.Вставить("КонтрольРасхожденийСДокументомОснованием"				, Ложь);	
	ПараметрыСканирования.Вставить("ВыполняетсяЗагрузкаДанныхВФормуПроверкиИПодбораИСМП"	, Истина);
	ПараметрыСканирования.Вставить("ВидОперацииИСМП"										, Неопределено);
	ПараметрыСканирования.Вставить("ЭтоОтчетПроизводственнойЛинии"							, Ложь);	
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыИСМП"                                	, Новый Массив);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокИСМП"                        	, Новый Массив);
	ПараметрыСканирования.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП"	, Ложь);
	ПараметрыСканирования.Вставить("ЭтоМаркировкаОстатков"                                	, Неопределено);
	ПараметрыСканирования.Вставить("ДатаДокумента"                                        	, ПроверяемыйДокумент.Дата);
	ПараметрыСканирования.Вставить("СозданиеНаборов"									 	, Ложь);
    ПараметрыСканирования.Вставить("ТребуетсяПроверкаСредствамиККТ" 	                    , Ложь);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыПроверкиКодовМаркировкиМОТП(ПроверяемыйДокумент,Шаблон)
	
	ПараметрыПроверкиКодовМаркировки = Новый Структура();
	ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеМОТП", Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки", Ложь);
	
	ДопустимыеСтатусыКодовМаркировки = Новый Массив;	
	ДопустимыеСтатусыУпаковок = Новый Массив;
	
	ЗаполнитьПоВидуДокументаДопустимыеСтатусыИСМП(Шаблон,ДопустимыеСтатусыКодовМаркировки,ДопустимыеСтатусыУпаковок);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки"										, ДопустимыеСтатусыКодовМаркировки);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок"												, ДопустимыеСтатусыКодовМаркировки);
	
	РежимПодбораСуществующихУпаковок = Истина;
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	Модуь_ИнтеграцияИСВызовСервера = ОбщийМодуль("ИнтеграцияИСВызовСервера");
	
	Попытка
		Если РежимПодбораСуществующихУпаковок
			Или Модуь_ПроверкаИПодборПродукцииИСМП.КонтрагентНеРезидент(ПроверяемыйДокумент.Контрагент) Тогда
			ИННВладельца = Модуь_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Организация).ИНН;
			Владелец     = ПроверяемыйДокумент.Организация;
		Иначе
			ИННВладельца = Модуь_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Контрагент).ИНН;
			Владелец     = ПроверяемыйДокумент.Контрагент;
		КонецЕсли;
	Исключение
		ИННВладельца = "";
		Владелец     = Неопределено;
	КонецПопытки;	
	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца", Истина);
	ПараметрыПроверкиКодовМаркировки.Вставить("ИННВладельца", ИННВладельца);
	ПараметрыПроверкиКодовМаркировки.Вставить("Владелец", Владелец);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки", Новый Массив);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок", Новый Массив);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервиса"												, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервисаИСМП"											, Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыйСпособВводаВОборот"											, Новый Массив);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВложенностьУпаковок"										, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеВложенияАгрегатов"												, Неопределено);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставГрупповойУпаковкиПриИзмененииСтрокиДерева"			, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставГрупповойУпаковки"									, Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("РежимИсправленияОшибокПослеПередачиКодов", Ложь);

	Возврат ПараметрыПроверкиКодовМаркировки;
	
КонецФункции

&НаСервере
Функция НачальныеДанныеДляРезультатовПроверкиМОТП(ПараметрыДанных)
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          ДеревоМаркированнойПродукции_МОТП());
	ДанныеДокумента.Вставить("ПодобраннаяМаркируемаяПродукция",       ПодобраннаяМаркируемаяПродукция_МОТП());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",          Новый СписокЗначений());
	ДанныеДокумента.Вставить("УпаковкиДокумента",                     Новый СписокЗначений());
	ДанныеДокумента.Вставить("ШтрихкодыУпаковок",                     Новый СписокЗначений());
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               ПараметрыДанных.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",      ПараметрыДанных.РежимПодбораСуществующихУпаковок);
	ДанныеДокумента.Вставить("ПроверкаЭлектронногоДокумента",         ПараметрыДанных.ПроверкаЭлектронногоДокумента);
	ДанныеДокумента.Вставить("ПараметрыПроверкиКодовМаркировки",      ПараметрыДанных.ПараметрыПроверкиКодовМаркировки);
	ДанныеДокумента.Вставить("КоличествоНедопустимыхКодовМаркировки", 0);
	ДанныеДокумента.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", ПараметрыДанных.КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("СодержимоеУпаковокНедоступно", Ложь);
	ДанныеДокумента.Вставить("СтрокаПачкиБезБлока",          Неопределено);
	ДанныеДокумента.Вставить("СтрокаБлокиБезКоробки",        Неопределено);
	ДанныеДокумента.Вставить("Организация",                  ПараметрыДанных.ПараметрыСканирования.Организация);
	
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	
	ТаблицаМаркируемойПродукции = Модуь_ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента(
	ПараметрыДанных.ПроверяемыйДокумент, ПараметрыДанных.ВидМаркируемойПродукции);	
	ЗаполнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ТаблицаМаркируемойПродукции, ДанныеДокумента);
	
	ПараметрыСканирования = ПараметрыДанных.ПараметрыСканирования;
	
	Модуь_ШтрихкодированиеМОТП = ОбщийМодуль("ШтрихкодированиеМОТП");
	
	РезультатПолученияДанных = Модуь_ШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
	ПараметрыДанных.ПроверяемыйДокумент, ПараметрыСканирования.Детализация, ПараметрыСканирования);
	
	Если РезультатПолученияДанных.ЕстьОшибки Тогда
		ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
	КонецЕсли;
	
	ДанныеПроверяемогоДокумента = РезультатПолученияДанных.ВложенныеШтрихкоды;
	
	ДополнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ДанныеПроверяемогоДокумента, ДанныеДокумента,ПараметрыДанных.ВидМаркируемойПродукции,ПараметрыДанных.ПараметрыСканирования);
	ЗаполнитьДеревоМаркированнойПродукции_МОТП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента, ПараметрыДанных.ВидМаркируемойПродукции);
	
	ЗаполнитьСписокШтрихкодыУпаковок_МОТП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента.ШтрихкодыУпаковок);
	 
	///НУЖНЫЙ РЕЗУЛЬТАТ			
	РезультатыСканированияМаркируемойПродукции = Новый Структура;
	РезультатыСканированияМаркируемойПродукции.Вставить("ДеревоМаркированнойПродукции",          ДанныеДокумента.ДеревоМаркированнойПродукции); //Тип("ДеревоЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПодобраннаяМаркируемаяПродукция",       ДанныеДокумента.ПодобраннаяМаркируемаяПродукция); //Тип("ТаблицаЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПараметрыПроверкиКодовМаркировки",      ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("КоличествоНедопустимыхКодовМаркировки", ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("УпаковкиДокумента",                     ДанныеДокумента.УпаковкиДокумента);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДетализацияСтруктурыХранения",          ДанныеДокумента.ДетализацияСтруктурыХранения);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",          ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ШтрихкодыУпаковок",                     ДанныеДокумента.ШтрихкодыУпаковок);
	
	Возврат РезультатыСканированияМаркируемойПродукции;
	
КонецФункции

&НаСервере
Функция ДеревоМаркированнойПродукции_МОТП()
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП, ПеречислениеСсылка.ТипыУпаковок"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",           ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",             ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимогоДоСопоставления",      ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",                ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхПотребительскихУпаковок", ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",          ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",  ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                        ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("МРЦ",                                 ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВключаетМРЦ",                         ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                   Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхГрупповыхУпаковок", ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                 ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки", ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",           ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Количество",                          Модуль_ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",            ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетВзвешивания",                  ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеПересчитыватьКоличествоПотребительскихУпаковок", ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СодержимоеНедоступно",                ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипШтрихкода",                        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТекстОшибкиПроверкиСредствамиККТ",    ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СостояниеТребованияПолногоКодаККТ"  , ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытие",                    ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеВариантУчета",        Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИСМП"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПлановоеКоличествоПотребительскихУпаковок", ТипЧисло);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТекстОбработанСОшибкойВГИСМТ",        ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ОбработанСОшибкойВГИСМТ",             ТипБулево);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСуммаНормализации",                ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НормализованныйШтрихкод",             ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ДатаПроизводства",                    Новый ОписаниеТипов("Дата"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВСеройЗоне",                          ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Коэффициент",                         ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторЗапросаГИСМТ",           ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ДатаВремяПолученияИдентификатора",    Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

&НаСервере
Функция ПодобраннаяМаркируемаяПродукция_МОТП()
	
	ПодобраннаяМаркируемаяПродукция = Новый ТаблицаЗначений();
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Номенклатура",               Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Характеристика",             Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Серия",                      Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Количество",                 Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобрано",        Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИндексКодаМаркировки",       Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("МРЦ",                        Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("GTIN",                       Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеНоменклатуры",  Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("СтатусУказанияСерий",        Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТипНоменклатуры",            Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НомерСтроки",                Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоИС",               Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставлена",   Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КодыGTIN",                   Новый ОписаниеТипов("СписокЗначений"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеGTIN",          Новый ОписаниеТипов("Строка"));
	
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставленаПоУПД", Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ВключаетМРЦ"					, Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобраноВзвешеноОСУ",                        Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковокОСУ",                  Новый ОписаниеТипов("Число"));
	
	Возврат ПодобраннаяМаркируемаяПродукция;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ТаблицаМаркируемойПродукции, ДанныеДокумента)
	
	Для каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
		
		СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника);
		
		Попытка
			Если ЗначениеЗаполнено(СтрокаИсточника.Характеристика) Тогда
				СтрокаПодобраннойПродукции.ХарактеристикиИспользуются = Истина;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		СтрокаПодобраннойПродукции.НоменклатураСопоставлена = Истина;		
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");		
		Попытка
			Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
		Исключение
			Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции,Неопределено);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ДанныеПроверяемогоДокумента, ДанныеДокумента, ВидПродукции, ПараметрыСканирования)
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП"); 	
	ТаблицаМаркируемойПродукции = ДанныеПроверяемогоДокумента.МаркированныеТовары.СкопироватьКолонки();	
	
	ДополнитьТаблицуМаркируемойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ТаблицаМаркируемойПродукции); 	
		
	//возможны разные варианты в разных версиях 1С
	Попытка 
		Модуь_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукцииМОТП(
			ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);
	Исключение			
		Попытка			
			Модуь_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукции(
				ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции);
		Исключение	
			Попытка
				Модуь_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукции(
					ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);
			Исключение
			КонецПопытки;
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуМаркируемойПродукции(ДеревоУпаковок, ТаблицаМаркируемойПродукции)
	
	Для каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ДобавитьСтроку = Ложь;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			ДобавитьСтроку = Истина;
			
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				ДобавитьСтроку = Не (СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC);
			Иначе
				ДополнитьТаблицуМаркируемойПродукции(СтрокаДерева, ТаблицаМаркируемойПродукции);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			
			СтрокаТЧ = ТаблицаМаркируемойПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДерева);
			СтрокаТЧ.СтрокаДерева = СтрокаДерева;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМаркированнойПродукции_МОТП(ДеревоУпаковокДокумента, ДанныеДокумента, ВидПродукции)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева_МОТП(ДеревоУпаковокДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоУпаковокДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
			И ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента,ВидПродукции);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаПачкиБезБлока = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
		ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента,ВидПродукции);
	КонецЕсли;
	
	Если ДанныеДокумента.СтрокаБлокиБезКоробки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
		ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента,ВидПродукции);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДетализацияСтруктурыХраненияДерева_МОТП(ДеревоУпаковок)
	
	УпаковкиДерева = Новый Структура();
	УпаковкиДерева.Вставить("ЕстьПачки",           Ложь);
	УпаковкиДерева.Вставить("ЕстьБлоки",           Ложь);
	УпаковкиДерева.Вставить("ЕстьКоробки",         Ложь);
	УпаковкиДерева.Вставить("ЕстьПачкиБезБлока",   Ложь);
	УпаковкиДерева.Вставить("ЕстьБлокиБезКоробки", Ложь);
	
	РазрешеныПачкиВКоробках = Ложь;
	
	Если ДеревоУпаковок.Строки.Количество() > 0 Тогда
		ОпределитьНаличиеУпаковокВСтрокахДерева_МОТП(ДеревоУпаковок.Строки, УпаковкиДерева, РазрешеныПачкиВКоробках);
	КонецЕсли;
	
	Если УпаковкиДерева.ЕстьКоробки Тогда
		Если УпаковкиДерева.ЕстьБлоки И УпаковкиДерева.ЕстьПачки Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
		ИначеЕсли УпаковкиДерева.ЕстьБлоки Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками;
		Иначе
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная;
		КонецЕсли;
	ИначеЕсли УпаковкиДерева.ЕстьБлоки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками;
	ИначеЕсли УпаковкиДерева.ЕстьПачки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки;
	ИначеЕсли УпаковкиДерева.ЕстьБлокиБезКоробки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками;
	ИначеЕсли УпаковкиДерева.ЕстьПачкиБезБлока Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками;
	Иначе
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки;
	КонецЕсли;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента, ВидПродукции)
	
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока Тогда		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда			
			НоваяСтрока = ДанныеДокумента.СтрокаПачкиБезБлока; 			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента, ВидПродукции);
			КонецЕсли; 			
		Иначе
			
			Для каждого СтрокаИсточникаПачка Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента, ВидПродукции);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБлокиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента, ВидПродукции);
			КонецЕсли;
			
		Иначе
			
			Для каждого СтрокаИсточникаБлок Из СтрокаИсточника.Строки Цикл
				Если ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
					ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточникаБлок, КоллекцияСтрокПриемника, ДанныеДокумента, ВидПродукции);
				Иначе
					Для каждого СтрокаИсточникаПачка Из СтрокаИсточникаБлок.Строки Цикл
						ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента, ВидПродукции);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
		
		СтрокаПачкиБезБлока = ДанныеДокумента.СтрокаПачкиБезБлока;
		
		Если СтрокаПачкиБезБлока = Неопределено Тогда
			СтрокаПачкиБезБлока = ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента, ВидПродукции);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПачкиБезБлока.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника)
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
		
		СтрокаБлокиБезКоробки = ДанныеДокумента.СтрокаБлокиБезКоробки;
		
		Если СтрокаБлокиБезКоробки = Неопределено Тогда
			СтрокаБлокиБезКоробки = ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента, ВидПродукции);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБлокиБезКоробки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	ИначеЕсли СтрокаИсточника.Родитель <> Неопределено
		И Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника.Родитель)
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками Тогда
		
		Возврат;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	Если Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(НоваяСтрока)
		И (ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками
		ИЛИ ДанныеДокумента.СодержимоеУпаковокНедоступно) Тогда
		НоваяСтрока.КоличествоПодчиненныхПачек     = СтрокаИсточника.КоличествоПачек;
		НоваяСтрока.НеПересчитыватьКоличествоПачек = Истина;
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	Попытка 
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	Исключение
		Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, ВидПродукции);
	КонецПопытки;
	Модуь_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	
	Если НоваяСтрока.НедопустимыйКодМаркировки Тогда
		ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки = ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки + 1;
	КонецЕсли;
	
	Если НоваяСтрока.СодержимоеНедоступно Тогда
		ДанныеДокумента.СодержимоеУпаковокНедоступно = Истина;
	КонецЕсли;
	
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Если Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента, ВидПродукции);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента,ВидПродукции)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	
	Попытка 
		Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуПачкиБезБлока(НоваяСтрока);
	Исключение
		Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуПачкиБезБлока(НоваяСтрока,ВидПродукции);
	КонецПопытки;	
	
	ДанныеДокумента.СтрокаПачкиБезБлока = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента,ВидПродукции)
	
	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	ИначеЕсли СтрокиДерева[0].ТипУпаковки <> Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	Иначе
		НоваяСтрока = СтрокиДерева.Вставить(1);
	КонецЕсли;
	
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	
	Попытка
		Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока);
	Исключение
		Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока,ВидПродукции);
	КонецПопытки;	
	
	ДанныеДокумента.СтрокаБлокиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ОпределитьНаличиеУпаковокВСтрокахДерева_МОТП(СтрокиДерева, УпаковкиДерева, РазрешеныПачкиВКоробках)
	
	Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если УпаковкиДерева.ЕстьПачки И Не РазрешеныПачкиВКоробках Тогда
			Прервать;
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока Тогда
				УпаковкиДерева.ЕстьПачкиБезБлока = Истина;
			Иначе
				УпаковкиДерева.ЕстьПачки = Истина;
				Если НЕ РазрешеныПачкиВКоробках Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Модуь_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаДерева) Тогда
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки Тогда
				УпаковкиДерева.ЕстьБлокиБезКоробки = Истина;
			Иначе
				УпаковкиДерева.ЕстьБлоки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не УпаковкиДерева.ЕстьКоробки Тогда			
			УпаковкиДерева.ЕстьКоробки = Модуь_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки);
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОпределитьНаличиеУпаковокВСтрокахДерева_МОТП(СтрокаДерева.Строки, УпаковкиДерева, РазрешеныПачкиВКоробках);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокШтрихкодыУпаковок_МОТП(СтрокаИсточника, ШтрихкодыУпаковок)
	
	Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		Если ЗначениеЗаполнено(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки)
			И ШтрихкодыУпаковок.НайтиПоЗначению(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки) = Неопределено Тогда
			ШтрихкодыУпаковок.Добавить(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки, ПодчиненнаяСтрокаИсточника.Штрихкод);
		КонецЕсли; 
		
		Если СтрокаИсточника.Строки.Количество() > 0 Тогда
			ЗаполнитьСписокШтрихкодыУпаковок_МОТП(ПодчиненнаяСтрокаИсточника, ШтрихкодыУпаковок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтоТабакПоВидыПродукцииИС(ВидМаркируемойПродукцииДокумента)
	
	Модуль_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	Попытка
		ЭтоТабак = Модуль_ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидМаркируемойПродукцииДокумента);	
	Исключение
		ЭтоТабак = Ложь;
	КонецПопытки;
	
	Возврат ЭтоТабак;
	
КонецФункции

#КонецОбласти

#Область РаботаСКодамиSSCC

&НаСервере
Функция ПолучитьСледующийНомерSSCC(ЦифраРасширения, ПрефиксКомпанииGS1)
	
	СерийныйНомерSSCC = ПолучитьПосленийНомерSSCC(ЦифраРасширения, ПрефиксКомпанииGS1) + 1;	
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("ЦифраРасширения",    ЦифраРасширения);
	ПараметрыШтрихкода.Вставить("ПрефиксКомпанииGS1", ПрефиксКомпанииGS1);
	ПараметрыШтрихкода.Вставить("СерийныйНомерSSCC",  СерийныйНомерSSCC);
	
	Возврат ШтрихкодSSCC(ПараметрыШтрихкода);	
	
КонецФункции

&НаСервере
Функция ПолучитьПосленийНомерSSCC(ЦифраРасширения, ПрефиксКомпанииGS1)
	
	ЧастьШтрихкодаБезСкобок  = "00" + ЦифраРасширения + ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9);
	ЧастьШтрихкодаСоСкобками = "(00)" + ЦифраРасширения + ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкодаСоСкобками + "%");
	Запрос.УстановитьПараметр("ТипШтрихкода", Перечисления.ТипыШтрихкодов.SSCC);
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	&ВыражениеСерийныйНомерSSCC КАК СерийныйНомерSSCC
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЧастьШтрихкода
	|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
	|
	|УПОРЯДОЧИТЬ ПО
	|	СерийныйНомерSSCC УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеСерийныйНомерSSCC", "ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 15, 7)");
	
	Результат = Запрос.Выполнить();
	ПоследнийНомерВБД = 0;
	
	Если Результат.Пустой() Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеСерийныйНомерSSCC", "ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 13, 7)");
		Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкодаБезСкобок + "%");
		Результат = Запрос.Выполнить();
	КонецЕсли;
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.СерийныйНомерSSCC);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПриведенноеКДлинеЗначение(Знач ИсходнаяСтрока, Длина)
	
	Если ТипЗнч(ИсходнаяСтрока) = Тип("Число") Тогда
		Строка = Формат(ИсходнаяСтрока, "ЧН=0; ЧГ=0");
	Иначе
		Строка = СокрЛП(ИсходнаяСтрока);
	КонецЕсли;
	
	ТекущаяДлина = СтрДлина(Строка);
	
	Пока ТекущаяДлина < Длина Цикл
		Строка = "0" + Строка;
		ТекущаяДлина = ТекущаяДлина + 1;
	КонецЦикла;
	
	Возврат Строка;
КонецФункции

&НаСервере
Функция ШтрихкодSSCC(ПараметрыШтрихкода, УстанавливатьСкобки = Истина)
	
	ЦифраРасширения    = ПараметрыШтрихкода.ЦифраРасширения;
	ПрефиксКомпанииGS1 = ПараметрыШтрихкода.ПрефиксКомпанииGS1;
	СерийныйНомерSSCC  = ПараметрыШтрихкода.СерийныйНомерSSCC;
	
	Если ЗначениеЗаполнено(ПрефиксКомпанииGS1)
		И ЗначениеЗаполнено(СерийныйНомерSSCC) Тогда
		
		Штрихкод = Формат(ЦифраРасширения, "ЧН=0; ЧГ=0")
		+ ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9)
		+ ПриведенноеКДлинеЗначение(СерийныйНомерSSCC, 7);
		
		КонтрольноеЧисло = КонтрольноеЧислоSSCC(Штрихкод);
		
		Если УстанавливатьСкобки Тогда
			Штрихкод = "(00)" + Штрихкод + КонтрольноеЧисло;
		Иначе
			Штрихкод = "00" + Штрихкод + КонтрольноеЧисло;
		КонецЕсли;
		
	Иначе		
		Штрихкод = "";		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

&НаСервере
Функция КонтрольноеЧислоSSCC(Штрихкод)
	
	КонтрольноеЧисло = 0;
	
	Цифры = Новый Массив;
	Позиций  = СтрДлина(Штрихкод);
	
	Для НомерПозиции = 1 По Позиций Цикл
		Цифры.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(Штрихкод, НомерПозиции, 1)));
	КонецЦикла;
	
	СуммаЧетных = 0;
	СуммаНечетных = 0;
	
	Для НомерПозиции = 0 По Позиций - 1 Цикл
		Если НомерПозиции%2 = 0 Тогда
			СуммаЧетных = СуммаЧетных + Цифры[НомерПозиции];
		Иначе
			СуммаНечетных = СуммаНечетных + Цифры[НомерПозиции];
		КонецЕсли;
	КонецЦикла;
	
	СверяемоеЧисло = СуммаЧетных * 3 + СуммаНечетных;
	КонтрольноеЧисло = 10 - СверяемоеЧисло%10;
	
	Если КонтрольноеЧисло = 10 Тогда
		КонтрольноеЧисло = 0;
	КонецЕсли;
	
	Возврат КонтрольноеЧисло;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ВыгрузитьКМНаСервере()
	
	МассивТоваров = ТаблицаТоваровКМ.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	МассивХарактеристик = ТаблицаТоваровКМ.Выгрузить().ВыгрузитьКолонку("Характеристика");
	// Выборка КМ	
	Запрос = Новый Запрос;	
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПулКодовМаркировкиСУЗ.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗ.Характеристика КАК Характеристика,
	|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
	|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ПулКодовМаркировкиСУЗ.Номенклатура В(&МассивТоваров)
	|	И ПулКодовМаркировкиСУЗ.Характеристика В(&МассивХарактеристик)";
	
	Запрос.УстановитьПараметр("МаркированныйТовар", Перечисления.ТипыУпаковок.МаркированныйТовар);
	Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
	Запрос.УстановитьПараметр("МассивХарактеристик", МассивХарактеристик);
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки = 1;
	ТекстФайлаКМ = "" + ?(ОчиститьКМПечати, "-", "+") + Символы.ПС; // РежимЗагрузкиФайла;
	
	Для каждого СтрокаТЧ Из ТаблицаТоваровКМ Цикл
		КоличествоНоменклатуры = СтрокаТЧ.Количество;	
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		МассивСтрок = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
		
		Для каждого ЭлементМассива Из МассивСтрок Цикл	
			Если КоличествоНоменклатуры = 0 Тогда 
				Прервать;
			КонецЕсли;  
			
			ИзвлеченныйКодМаркировки = Base64ВШтрихкод(ЭлементМассива.ПолныйКодМаркировки);
			КодМаркировкиДляПечати = СтрЗаменить(ИзвлеченныйКодМаркировки, Символ(29), "");
			ТекстФайлаКМ = ТекстФайлаКМ + Строка(НомерСтроки) + ";" + "+;"; // НомерСтроки; Операция;
			ТекстФайлаКМ = ТекстФайлаКМ + "8U-" + ЭлементМассива.Номенклатура.УникальныйИдентификатор() + ЭлементМассива.Характеристика.УникальныйИдентификатор() + ";"; // ИдентификаторТовара;		
			ТекстФайлаКМ = ТекстФайлаКМ + КодМаркировкиДляПечати + ";" + Символы.ПС; // КМ;
			УстановитьДатуПечатиДляКМ(ЭлементМассива.КодМаркировки);
			НомерСтроки = Число(НомерСтроки) + 1;
			КоличествоНоменклатуры = КоличествоНоменклатуры - 1;
		КонецЦикла;		
	КонецЦикла;
	
	// Формат выгрузки:
	// <КоличествоСтрокВФайле>
	// <РежимЗагрузкиФайла>
	// <НомерСтроки>;<Операция>;<ИдентификаторТовара>;<КМ>
	Возврат ТекстФайлаКМ; 
	
КонецФункции

&НаСервере
Процедура УстановитьДатуПечатиДляКМ(СвободныйКодМаркировки) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.КодМаркировки.Значение = СвободныйКодМаркировки;
	НаборЗаписей.Отбор.КодМаркировки.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Запись.ДатаПечатиУниверсальная = ТекущаяДата();
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

&НаСервере
Функция ПроверитьВводДанныхТабличнойЧасти(ТабличнаяЧасть)
	
	Ответ = Истина;
	ТЧ = ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Количество");
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Количество", 0);
	ТабЗнач = МассивВТаблицуЗначений(ТЧ); 
	СтрокиПоиска = ТабЗнач.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПоиска.Количество() > 0 Тогда
		Ответ = Ложь;
	Иначе
		Ответ = Истина;		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаСервере
Функция МассивВТаблицуЗначений(Массив)
	
	ТЗ = Новый ТаблицаЗначений;
	Тз.Колонки.Добавить("Количество");
	
	Для каждого ЭлементМассива Из Массив Цикл
		стр = тз.добавить();
		стр.Количество = ЭлементМассива;
	КонецЦикла; 
	
	Возврат ТЗ;
	
КонецФункции	

&НаСервере
Процедура ВставитьКоличествоПечатиВТЧ()
	
	Для каждого стр Из ТаблицаТоваровКМ Цикл
		Стр.КоличествоНаПечати = Стр.Количество;
		Стр.Количество = 0;		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура СформироватьФайлКМ(ТекстФайла)
	
	тхт_км = Новый ТекстовыйДокумент;
	тхт_км.УстановитьТекст(ТекстФайла);
	тхт_км.ВставитьСтроку(0, "" + Формат(тхт_км.КоличествоСтрок(), "ЧГ=0"));
	
	ИмяФайлаВыгрузкиКМ = РазделительПути+Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_PrintMarks.dm";
	
	Если ТипОбмена = "1" Тогда
		ОтправитьФайлНаFTP(тхт_км, Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss") + "_PrintMarks.dm" + "temp");	
		
	ИначеЕсли ТипОбмена = "0" Тогда
		Если ИДТСД = "" Тогда
			тхт_км.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиКМ, КодировкаТекста.UTF8);
		Иначе
			тхт_км.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиКМ, КодировкаТекста.UTF8);
		КонецЕсли;
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиКМ, ИДТСД, ИмяФайлаВыгрузкиКМ);
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиКМ, ИДТСД, ИмяФайлаВыгрузкиКМ);
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ=ddMMyyyyHHmmss") + "_PrintMarks.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт_км.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли; 
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);			
	КонецЕсли;   	
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПорциюМарок(Начало, Конец, АдресДанных)
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла = "";
	
	n = 0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n = Счетчик + 1;
		СтрокаМарки = "" + n + ";";	
		
		Попытка 
			СтрокаМарки = СтрокаМарки + ?(Данные[Счетчик].ПометкаУдаления, "-", "+") + ";";
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТипПродукции = ПолучитьТипМаркированнойПродукции(Данные[Счетчик].Номенклатура); 
		ЧистаяМарка = УбратьСкобкиТеговМарка(Строка(Данные[Счетчик].Марка), ТипПродукции, Истина);
		
		Если ТипПродукции = 3 Тогда
			СтрокаМарки = СтрокаМарки + ДобавитьВМаркуУпрСимволы(ЧистаяМарка) + ";"; //2 - марка
		Иначе
			СтрокаМарки = СтрокаМарки + ЧистаяМарка + ";"; //2 - марка	
		КонецЕсли; 
		
		СтрокаМарки = СтрокаМарки + "8U-" + ЧистаяСтрока(Данные[Счетчик].Номенклатура.УникальныйИдентификатор()) + ЧистаяСтрока(Данные[Счетчик].Характеристика.УникальныйИдентификатор()) + ";"; //3 - ID номенклатуры марки 	
		СтрокаМарки = СтрокаМарки + ";"; //4 - SN
		
		Если ТипПродукции = 3 Тогда			
			Палета = УбратьСкобкиТеговУпаковка(Строка(Данные[Счетчик].Палета));
			Короб = УбратьСкобкиТеговУпаковка(Строка(Данные[Счетчик].Короб));
			
			СтрокаМарки = СтрокаМарки + ?(СтрДлина(Палета) = 18, "00" + Палета, Палета) + ";"; //5 - палета 
			СтрокаМарки = СтрокаМарки + ?(СтрДлина(Короб) = 18, "00" + Короб, Короб) + ";"; //6 - короб 
		Иначе
			СтрокаМарки = СтрокаМарки + УбратьСкобкиТеговУпаковка(Строка(Данные[Счетчик].Палета)) + ";"; //5 - палета 
			СтрокаМарки = СтрокаМарки + УбратьСкобкиТеговУпаковка(Строка(Данные[Счетчик].Короб)) + ";"; //6 - короб 
		КонецЕсли;
		
		СтрокаМарки = СтрокаМарки + Строка(Данные[Счетчик].Коэффициент) + ";"; //7 - коэффициент 
		
		ТекстФайла = ТекстФайла + СтрокаМарки + Символы.ПС;		
	КонецЦикла;
	
	Возврат ТекстФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция УбратьСкобкиТеговМарка(Строка,ТипПродукции,МенятьРазделитель=Ложь)
	
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	//Обувь:
	//01+GTIN+21+SN = 31
	//Лекарства:
	//01+GTIN+21+SN = 31
	//Фотоаппараты:
	//01+GTIN+21+SN = 38	
	//Молочка:
	//01+GTIN+21+SN = 24
	
	Если Лев(Строка,1) = "(" Тогда		
		НоваяСтрока = Лев(Строка, 22);
		НоваяСтрока = СтрЗаменить(НоваяСтрока, "(", "");
		НоваяСтрока = СтрЗаменить(НоваяСтрока, ")", "");
		
		Если ТипПродукции = 1 Тогда //Блоки сигарет
			НоваяСтрока2 = Сред(Строка, 23, 7);
		ИначеЕсли ТипПродукции = 4 Тогда //Фотоаппараты
			НоваяСтрока2 = Сред(Строка, 23, 20);
		ИначеЕсли ТипПродукции = 5 Тогда //Молочка
			НоваяСтрока2 = Сред(Строка, 23, 6);	
		Иначе
			НоваяСтрока2 = Сред(Строка, 23, 13);
		КонецЕсли;
		
		Если МенятьРазделитель Тогда
			НоваяСтрока2 = СтрЗаменить(НоваяСтрока2, ";", "[59]");
		КонецЕсли;
	
		Итог = НоваяСтрока + НоваяСтрока2;		
		
	Иначе 		
		Если ТипПродукции = 1 Тогда //Пачки сигарет
			НоваяСтрока = Сред(Строка,1,21);
		Иначе
			НоваяСтрока = Строка;
		КонецЕсли;
		
		Если МенятьРазделитель Тогда
			НоваяСтрока = СтрЗаменить(НоваяСтрока, ";", "[59]");
		КонецЕсли;
	
		Итог = НоваяСтрока;		
	КонецЕсли;
	
	Возврат Итог;
	
КонецФункции

&НаСервереБезКонтекста
Функция УбратьСкобкиТеговУпаковка(Строка)
	
	НоваяСтрока = СтрЗаменить(Строка, ";", "[59]");
	НоваяСтрока = СтрЗаменить(НоваяСтрока, "(", "");
	НоваяСтрока = СтрЗаменить(НоваяСтрока, ")", "");
	Итог = НоваяСтрока; 	
	
	Возврат Итог;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуМаркировки()
	
	Запрос = Новый Запрос ("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Числитель,0) = 0
	|				ТОГДА 1
	|				ИНАЧЕ ШтрихкодыУпаковокТоваров.Упаковка.Числитель
	|			КОНЕЦ
	|		ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество 
	|	КОНЕЦ КАК Коэффициент,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Номенклатура.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ КодыМаркировки
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ((ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|		И ШтрихкодыУпаковокТоваров.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.DataMatrix))
	|			ИЛИ (ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|				И ШтрихкодыУпаковокТоваров.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)))
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Упаковка.Числитель,0) = 0
	|				ТОГДА 1
	|				ИНАЧЕ ШтрихкодыУпаковокТоваров.Упаковка.Числитель
	|			КОНЕЦ
	|		ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество 
	|	КОНЕЦ КАК Коэффициент,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Номенклатура.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ПачкиСигарет
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.DataMatrix)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КодыМаркировки.Номенклатура КАК Номенклатура,
	|	КодыМаркировки.Характеристика КАК Характеристика,
	|	КодыМаркировки.Коэффициент КАК Коэффициент,
	|	КодыМаркировки.ПометкаУдаления КАК ПометкаУдаления,
	|	КодыМаркировки.ЗначениеШтрихкода КАК Марка,
	|	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода, """") КАК Короб,
	|	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка.ЗначениеШтрихкода, """") КАК Палета
	|ИЗ
	|	КодыМаркировки КАК КодыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
	|		ПО (ДанныеУпаковкиУровень1.Штрихкод = КодыМаркировки.Ссылка)
	|			И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|				ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
	|		ПО (ДанныеУпаковкиУровень2.Штрихкод = ДанныеУпаковкиУровень1.Ссылка)
	|			И (ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|				ИЛИ ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	|
	//пачки сигарет, которые не вошли в блоки
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПачкиСигарет.Номенклатура КАК Номенклатура,
	|	ПачкиСигарет.Характеристика КАК Характеристика,
	|	ПачкиСигарет.Коэффициент КАК Коэффициент,
	|	ПачкиСигарет.ПометкаУдаления КАК ПометкаУдаления,
	|	ПачкиСигарет.ЗначениеШтрихкода КАК Марка,
	|	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ЗначениеШтрихкода, """") КАК Короб,
	|	ЕСТЬNULL(ДанныеУпаковкиУровень2.Ссылка.ЗначениеШтрихкода, """") КАК Палета
	|ИЗ
	|	ПачкиСигарет КАК ПачкиСигарет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень1
	|		ПО (ДанныеУпаковкиУровень1.Штрихкод = ПачкиСигарет.Ссылка)
	|			И (ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|				ИЛИ ДанныеУпаковкиУровень1.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ДанныеУпаковкиУровень2
	|		ПО (ДанныеУпаковкиУровень2.Штрихкод = ДанныеУпаковкиУровень1.Ссылка)
	|			И (ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|				ИЛИ ДанныеУпаковкиУровень2.Ссылка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	|ГДЕ
	|	ЕСТЬNULL(ДанныеУпаковкиУровень1.Ссылка.ТипШтрихкода,"""") <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КодыМаркировки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПачкиСигарет");
	
	
	Данные      = Запрос.Выполнить().Выгрузить();
	АдресДанных = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	Количество  = Данные.Количество();
	
	Запись = Новый Структура;
	Запись.Вставить("Количество", Количество);
	Запись.Вставить("Адрес"     , АдресДанных);
	
	Возврат Запись;
	
КонецФункции

&НаСервере
Функция ПроверитьКоличествоДоступныхМарок(Номенклатура, Количество)
	
	Ответ = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПулКодовМаркировкиСУЗ.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ПулКодовМаркировкиСУЗ.Номенклатура = &номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Ответ = Ложь;
	КонецЕсли;
	
	Если РезультатЗапроса.Количество() < Количество Тогда
		Ответ = Ложь;	
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДоступноеКоличествоПечатиКМДляНоменклатуры(Номенклатура, Характеристика)
	
	ДоступноеКоличество = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПулКодовМаркировкиСУЗ.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ПулКодовМаркировкиСУЗ.Номенклатура = &номенклатура
	|	И ПулКодовМаркировкиСУЗ.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура"  , Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДоступноеКоличество = РезультатЗапроса.Количество();
	
	Возврат ДоступноеКоличество;
	
КонецФункции


#КонецОбласти

#Область Пользователи

&НаКлиенте
Процедура ВыгрузитьПользователейЕслиКаталогиДоступны()
	
	ИндикаторПользователи = 0;
	
	Если Не Пользователи.Количество() = 0 Тогда
		ВсегоПользПроц = Пользователи.Количество(); //-100%
		ШагПользПроц = 100 / Пользователи.Количество();
	Иначе
		ПоказатьСообщениеПользователю("Нет пользователей для выгрузки!");
		Возврат;
	КонецЕсли; 
	
	тхт = Новый ТекстовыйДокумент; //выгрузка пользователей в файл обмена
	тхт.ДобавитьСтроку(?(ОчиститьПользователей, "-", " + "));
	n = 0;
	
	Для каждого стр Из Пользователи Цикл		
		Если ПроверитьЗаполненностьСтрокТЗПользователи(стр) Тогда
			Возврат;	
		КонецЕсли; 
		
		n = n + 1;
		ИндикаторПользователи = ИндикаторПользователи + ШагПользПроц;
		СтрокаПользователя = Формат(n, "ЧГ = 0") + ";";
		СтрокаПользователя = СтрокаПользователя + "+;"; 
		СтрокаПользователя = СтрокаПользователя + ЧистаяСтрока(стр.Пользователь) + ";";
		СтрокаПользователя = СтрокаПользователя + ЧистаяСтрока(стр.Login) + ";";
		СтрокаПользователя = СтрокаПользователя + ЧистаяСтрока(стр.Пароль) + ";";
		СтрокаПользователя = СтрокаПользователя + ?(СокрЛП(стр.Админ) = "да", 1, 0) + ";";
		СтрокаПользователя = СтрокаПользователя + ?(СокрЛП(стр.РедактированиеТоваров) = "да", 1, 0) + ";";
		СтрокаПользователя = СтрокаПользователя + ПолучитьXMLСтроку(стр.Пользователь);
		тхт.ДобавитьСтроку(СтрокаПользователя); 
	КонецЦикла;
	
	тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ = 0"));
	ИмяФайлаВыгрузкиПЛ = РазделительПути + Формат(Текущаядата(), "ДФ = ddMMyyyyHHmmss") + "_v83_Users_.dm";
	
	Если ТипОбмена = "1" Тогда
		ОтправитьФайлНаFTP(тхт, Формат(ТекущаяДата(), "ДФ = ddMMyyyyHHmmss") + "_v83_Users.dm" + "temp");	
		
	ИначеЕсли ТипОбмена = "0" Тогда 	
		Если ИДТСД = "" Тогда
			тхт.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиПЛ, КодировкаТекста.UTF8);
		Иначе
			тхт.Записать(лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиПЛ, КодировкаТекста.UTF8);
		КонецЕсли;
		
		Если МассоваяВыгрузка Тогда
			Если ИДТСД = "" Тогда
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + "in" + ИмяФайлаВыгрузкиПЛ, ИДТСД, ИмяФайлаВыгрузкиПЛ);
			Иначе
				ВыгрузитьНаВсеТСД(лКаталогОбмена + "DataMobile" + РазделительПути, лКаталогОбмена + "DataMobile" + РазделительПути + ИДТСД + РазделительПути + "in" + ИмяФайлаВыгрузкиПЛ, ИДТСД, ИмяФайлаВыгрузкиПЛ);	
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ТипОбмена = "2" Тогда		
		ИмяФайлаВыгрузки = Формат(Текущаядата(), "ДФ = ddMMyyyyHHmmss") + "_v83_Users_.dm";
		ИмяФайла = КаталогВременныхФайлов() + ИмяФайлаВыгрузки;
		тхт.Записать(ИмяФайла, КодировкаТекста.UTF8);
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));	 
		
		Если ИДТСД = "" Тогда
			ЗагрузитьФайл( "app:/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина); 
		Иначе	
			Если МассоваяВыгрузка Тогда
				Для каждого Строка Из СписокТСД Цикл
					АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
					ЗагрузитьФайл( "app:/" + Строка.ТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);	
				КонецЦикла;	
			Иначе	
				ЗагрузитьФайл( "app:/" + ИДТСД + "/in/" + ИмяФайлаВыгрузки, АдресВХ, Истина);
			КонецЕсли;	
		КонецЕсли;
		
		УдалитьФайлы(АдресВХ);
		УдалитьФайлы(ИмяФайла);		
	КонецЕсли;
	
	ИндикаторПользователи = 100;
	
	ФайлТЗ = Новый ТекстовыйДокумент;
	ФайлТЗ.УстановитьТекст(ПолучитьДанныеПользователи());
	ФайлТЗ.Записать(лКаталогНастроек + "v83_users.tab");	
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполненностьСтрокТЗПользователи(стр)
	
	ВыгружатьПользователя = Ложь;
	
	СтруктураПроверяемыхРеквизитов = Новый Структура;
	СтруктураПроверяемыхРеквизитов.Вставить("Пользователь"			, 	стр.Пользователь);
	СтруктураПроверяемыхРеквизитов.Вставить("Пароль"				,	стр.Пароль);
	СтруктураПроверяемыхРеквизитов.Вставить("Админ"					, 	стр.Админ);
	СтруктураПроверяемыхРеквизитов.Вставить("РедактированиеТоваров"	, 	стр.РедактированиеТоваров);
	
	МассивНеЗаполненных = Новый Массив;
	
	Для каждого СтрокаМассива Из СтруктураПроверяемыхРеквизитов Цикл
		Если Не ЗначениеЗаполнено(СтрокаМассива.Значение) Тогда
			МассивНеЗаполненных.Добавить(СтрокаМассива.Ключ);	
		КонецЕсли; 	
	КонецЦикла; 
	
	Если МассивНеЗаполненных.Количество() <> 0 Тогда
		Для каждого СтрокаНеЗаполненных Из МассивНеЗаполненных Цикл
			Сообщить("Параметр " + СтрокаНеЗаполненных + " не заполнен!" + Символы.ПС);	
		КонецЦикла;
		
		ВыгружатьПользователя = Истина;
	КонецЕсли;
	
	Возврат ВыгружатьПользователя;
	
КонецФункции
 
&НаКлиенте
Процедура ЗапуститьОповещение_ДобавитьПользователя(Значение, ДопПараметры = Неопределено, ДобавитьПользователя = Ложь)
	
	Если ДобавитьПользователя Тогда
		ПараметрыПодбора = Новый Структура;
		ПараметрыПодбора.Вставить("МножественныйВыбор"	, Истина);
		ПараметрыПодбора.Вставить("РежимВыбора"			, Истина);
		Подбор = Получитьформу("Справочник.Пользователи.ФормаВыбора", ПараметрыПодбора, ЭтаФорма);
		Подбор.ЗакрыватьПривыборе = Истина;
		Подбор.Открыть();
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводЗначения_ДобавитьПользователя", ЭтаФорма, ДопПараметры);
		ПоказатьВводЗначения(ОписаниеОповещения, Значение, "Выберите пользователя", Тип("СправочникСсылка.Пользователи"));	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводЗначения_ДобавитьПользователя(ВыбЗначение, ДопПараметры) Экспорт
	
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("ЭтоВыбор") Тогда
			Если ВыбЗначение = Неопределено Тогда
				ДопПараметры.ТекущиеДанные.Пользователь = ДопПараметры.СтароеЗначение;
			Иначе
				ДопПараметры.ТекущиеДанные.Пользователь = ВыбЗначение;
			КонецЕсли;	
			Возврат;	
		КонецЕсли; 	
	КонецЕсли; 
	
	Если ВыбЗначение = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Стр = Пользователи.Добавить(); //заполнение данных пользователя	
	Стр.Пользователь = ВыбЗначение;
	
	ДопПараметр = Новый Структура;
	ДопПараметр.Вставить("Стр", Стр);
	
	Значение = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводЛогина", ЭтаФорма, ДопПараметр);
	ПоказатьВводСтроки(ОписаниеОповещения, Значение,"Введите Штрихкод",50);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСтроки_ВводЛогина(ВыбЗначение, ДопПараметры) Экспорт
	
	Если ДопПараметры.Свойство("ЭтоВыбор") Тогда		
		Если ВыбЗначение = Неопределено Тогда
			ДопПараметры.ТекущиеДанные.Login = ДопПараметры.СтароеЗначение;
		Иначе
			ДопПараметры.ТекущиеДанные.Login = ВыбЗначение;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;        
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Login", ВыбЗначение);
	МассивСтрок = Пользователи.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводЛогина", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ВыбЗначение, "Введите Штрихкод", 50);
				
		ПоказатьСообщениеПользователю("Указанный Штрихкод занят. Введите другое значение!");
		Возврат;	
	КонецЕсли;

	ДопПараметры.Стр.Login = ВыбЗначение;
	
	Значение = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПароля", ЭтаФорма, ДопПараметры);
	ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Введите ПАРОЛЬ", 10);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСтроки_ВводПароля(ВыбЗначение, ДопПараметры) Экспорт
	
	Если ДопПараметры.Свойство("ЭтоВыбор") Тогда		
		Если ВыбЗначение = "" Или ВыбЗначение = Неопределено Тогда
			ДопПараметры.ТекущиеДанные.Пароль = ДопПараметры.СтароеЗначение;
		Иначе
			ДопПараметры.ТекущиеДанные.Пароль = ВыбЗначение;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ВыбЗначение) = "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПароля", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ВыбЗначение, "Введите ПАРОЛЬ", 10);
		
		ПоказатьСообщениеПользователю("Не введен ПАРОЛЬ!");
		Возврат;	
	КонецЕсли; 
	
	ДопПараметры.Стр.Пароль = ВыбЗначение;
	
	Значение = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПрав", ЭтаФорма, ДопПараметры);
	ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Права АДМИНИСТРАТОРА (д/н)", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСтроки_ВводПрав(ВыбЗначение, ДопПараметры) Экспорт
	
	Если СокрЛП(ВыбЗначение) = "" Или ((ВыбЗначение <> "Д") И (ВыбЗначение <> "д") И (ВыбЗначение <> "Н") И (ВыбЗначение <> "н")) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводПрав", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ВыбЗначение, "Права АДМИНИСТРАТОРА (д/н)", 1);
		
		ПоказатьСообщениеПользователю("Не указаны права администратора!");
		Возврат;	
	КонецЕсли; 
	
	Если ДопПараметры.Свойство("ЭтоВыбор") Тогда		
		Если ((ВыбЗначение <> "Д") И (ВыбЗначение <> "д") И (ВыбЗначение <> "Н") И (ВыбЗначение<>"н")) Тогда
			ДопПараметры.ТекущиеДанные.Админ = ?((ДопПараметры.СтароеЗначение = "Д") Или (ДопПараметры.СтароеЗначение = "д"), "да", "нет");
		Иначе
			ДопПараметры.ТекущиеДанные.Админ = ?((ВыбЗначение = "Д") Или (ВыбЗначение = "д"), "да", "нет");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Стр.Админ = ?((ВыбЗначение = "Д") Или (ВыбЗначение = "д"), "да", "нет");
	
	Значение = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводРедактированиеТоваров", ЭтаФорма, ДопПараметры);
	ПоказатьВводСтроки(ОписаниеОповещения, Значение, "Права редактирования товаров (д/н)", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСтроки_ВводРедактированиеТоваров(ВыбЗначение, ДопПараметры) Экспорт
	
	Если СокрЛП(ВыбЗначение) = "" Или ((ВыбЗначение <> "Д") И (ВыбЗначение <> "д") И (ВыбЗначение <> "Н") И (ВыбЗначение <> "н")) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтроки_ВводРедактированиеТоваров", ЭтаФорма, ДопПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ВыбЗначение, "Права редактирования товаров (д/н)", 1);
		
		ПоказатьСообщениеПользователю("Не указаны права редактирования товаров!");
		Возврат;	
	КонецЕсли; 
	
	Если ДопПараметры.Свойство("ЭтоВыбор") Тогда		
		Если ((ВыбЗначение <> "Д") И (ВыбЗначение <> "д") И (ВыбЗначение <> "Н") И (ВыбЗначение <> "н")) Тогда
			ДопПараметры.ТекущиеДанные.РедактированиеТоваров = ?((ДопПараметры.СтароеЗначение = "Д") Или (ДопПараметры.СтароеЗначение = "д"), "да", "нет");
		Иначе
			ДопПараметры.ТекущиеДанные.РедактированиеТоваров = ?((ВыбЗначение = "Д") Или (ВыбЗначение = "д"), "да", "нет");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Стр.РедактированиеТоваров = ?((ВыбЗначение = "Д") Или (ВыбЗначение = "д"), "да", "нет");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере()
	
	ТекКолонка = 1;
	ТекСтрока  = 1;
	
	Таб                     = Новый ТабличныйДокумент;
	Таб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Пользователи"+СокрЛП(ИмяКомпьютера());
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Бейджи");
	ЭтикеткаОбласть         = Макет.ПолучитьОбласть(1,1,4,2);
	ОбластьПользователя     = ЭтикеткаОбласть.Области.Пользователь;
	ОбластьШтрихкод         = ЭтикеткаОбласть.Области.ОбластьШтрихкод;
	РисунокШтрихкод         = ЭтикеткаОбласть.Рисунки.Штрихкод;
	
	ВысотаЭтикетки = 50;
	ШиринаЭтикетки = 90;
	
	ОбластьПользователя.ВысотаСтроки = ВысотаЭтикетки * 2.65 * 0.3;
	ОбластьШтрихкод.ВысотаСтроки     = ВысотаЭтикетки * 2.65 * 0.5;
	РисунокШтрихкод.Расположить(ОбластьШтрихкод);
	
	ЭтикеткаОбласть.Область(2,2,2,2).ШиринаКолонки = ШиринаЭтикетки*0.53;
	
	ОбластьГраницаСправа      = Макет.ПолучитьОбласть(2,4,4,4);
	ОбластьНизГраницыСправа   = Макет.ПолучитьОбласть(5,4,5,4);
	ОбластьГраницаСнизу       = Макет.ПолучитьОбласть(6,2,6,2);
	ОбластьНачалоГраницыСнизу = Макет.ПолучитьОбласть(6,1,6,1);
	
	ОбластьГраницаСправа.Рисунки.ГраницаСправа.Высота = ВысотаЭтикетки*1.09;
	ОбластьГраницаСнизу.Рисунки.ГраницаСнизу.Ширина   = ШиринаЭтикетки*0.7;
	
	ОбластьГраницаСправа.Область(1,1,1,1).ВысотаСтроки = ВысотаЭтикетки*2.65;
	ОбластьГраницаСнизу.Область(1,1,1,1).ШиринаКолонки = ШиринаЭтикетки*0.53;
	
	ВсегоСтрок        = 5;
	КоличествоКолонок = 2;
	
	ВсегоКолонок = КоличествоКолонок;
	Если ВсегоКолонок > 1 Тогда
		ВсегоКолонок = ВсегоКолонок+ВсегоКолонок - 1; //добавляем разделители колонок.
	КонецЕсли;
	
	ВывелиХотяБыОдинШтрихКод = Ложь;
	
	Для каждого СтрокаИзСписка Из Пользователи Цикл		
		КоличествоМиллиметровВПикселе = 0.5;
		
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(ЭтикеткаОбласть.Рисунки.Штрихкод.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",          Окр(ЭтикеткаОбласть.Рисунки.Штрихкод.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(СтрокаИзСписка.Login));
		ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    6);
		
		ЭтикеткаОбласть.Рисунки.Штрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		ОбластьПользователя.Текст        = "" + СтрокаИзСписка.Пользователь;
		
		Если ТекКолонка > ВсегоКолонок Тогда //новая строка.
			Если ВсегоСтрок <> 1 Тогда //выведем разделитель.
				Для Сч = 1 по ВсегоКолонок Цикл
					Если Сч = 1 Тогда
						Таб.Вывести(ОбластьНачалоГраницыСнизу);
					Иначе
						Таб.Присоединить(ОбластьНачалоГраницыСнизу);
					КонецЕсли;
					
					Таб.Присоединить(ОбластьГраницаСнизу);
					Таб.Присоединить(ОбластьНизГраницыСправа);
					Сч = Сч + 1;
				КонецЦикла;
				ТекСтрока = ТекСтрока + 1;
			КонецЕсли;
			
			Если ТекСтрока/ВсегоСтрок = Цел(ТекСтрока/ВсегоСтрок) Тогда
				Таб.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ТекСтрока = ТекСтрока + 1;
			ТекКолонка=1;
		КонецЕсли;
		
		Если ТекКолонка <> 1 Тогда //выведем разделитель.
			Таб.Присоединить(ОбластьГраницаСправа);
			ТекКолонка = ТекКолонка + 1;
			Таб.Присоединить(ЭтикеткаОбласть);
			ТекКолонка = ТекКолонка + 1;
		Иначе
			Таб.Вывести(ЭтикеткаОбласть);
			ТекКолонка = ТекКолонка + 1;
		КонецЕсли;
		
		ВывелиХотяБыОдинШтрихКод = Истина;
	КонецЦикла;
	
	Если ВывелиХотяБыОдинШтрихКод Тогда
		Таб.Защита              = Ложь;
		Таб.ТолькоПросмотр      = Истина;
		Таб.ОтображатьСетку     = Ложь;
		Таб.ОтображатьЗаголовки = Ложь;
		
		Возврат Таб;		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДопПараметрыДляВыбора(СтароеЗначение, ТекущиеДанные)
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ЭтоВыбор"			, );
	ДопПараметры.Вставить("СтароеЗначение"	, СтароеЗначение);
	ДопПараметры.Вставить("ТекущиеДанные"	, ТекущиеДанные);
	
	Возврат ДопПараметры;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПользователи()
	
	ДанныеТЗ = Новый ХранилищеЗначения(Пользователи.Выгрузить());
	Возврат XMLСтрока(ДанныеТЗ);
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьНастройкиПользователей()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_Пользователей", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_users.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_Пользователей(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблонаПользователей", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_users.tab");		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПользователи(Данные)
	
	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		Пользователи.Загрузить(ДанныеТЗ);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЧтенияШаблонаПользователей(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеПользователи(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьXMLСтроку(СсылкаНаСправочник)  
	
	Возврат XMLСтрока(СсылкаНаСправочник);
	
КонецФункции

#КонецОбласти

#Область ТСД

#Область ЗаполнитьВосстановитьТСД

&НаКлиенте
Процедура ЗапомнитьТекущееЗначениеТСДКлиент()
	
	Если Не Элементы.СписокТСД.ТекущиеДанные = Неопределено Тогда
		ТекущийТСД = Элементы.СписокТСД.ТекущиеДанные.ТСД;
		
		Если Не ТекущийТСД = "null" Тогда 
			ЗапомнитьТекущееЗначениеТСД(ТекущийТСД);
		КонецЕсли;	
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьТекущееЗначениеТСД(ТекущийТСД)
	
	ИмяНастройки 		= "ТекущийТСД";	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяНастройки, , ТекущийТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьЗначениеТСДКлиент()
	
	Если СписокТСД.Количество() > 1 Тогда
		ТекущийТСД = ВосстановитьЗначениеТСД("ТекущийТСД");
		
		НайденнаяСтрока = СписокТСД.НайтиСтроки(Новый Структура("ТСД", ТекущийТСД));
		НайденнаяСтрока = ?(НайденнаяСтрока.Количество() = 0, СписокТСД.НайтиСтроки(Новый Структура("Наименование", ТекущийТСД)), НайденнаяСтрока);
		
		Если НайденнаяСтрока.Количество() > 0 Тогда
			Если Элементы.СписокТСД.ТекущаяСтрока <> Неопределено Тогда
				Элементы.СписокТСД.ТекущаяСтрока = НайденнаяСтрока[0].ПолучитьИдентификатор();
			КонецЕсли;
		
			ИДТСД = НайденнаяСтрока[0].ТСД;
		Иначе
			Если Элементы.СписокТСД.ТекущаяСтрока <> Неопределено Тогда
				Элементы.СписокТСД.ТекущаяСтрока = 0; 
			КонецЕсли; 
			ИДТСД = СписокТСД[0].ТСД;
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьЗначениеТСД(ИмяНастройки)
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяНастройки,);
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПолучитьСписокТСДНаСервере()
	
	Если СписокТСД.Количество() > 0 Тогда
		МассивСписокТСД = СписокТСД.Выгрузить().ВыгрузитьКолонку("ТСД");
	Иначе
		МассивСписокТСД = Новый Массив();
		МассивСписокТСД.Добавить("");
	КонецЕсли;
	
	Возврат МассивСписокТСД;
	
КонецФункции

#Область НаименованияКТСД

&НаКлиенте
Процедура ПрочитатьНастройкиТСД()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_ТСД", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_terminals.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);						    
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_ТСД(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияШаблонаТСД", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек + "v83_terminals.tab");		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияШаблонаТСД(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеТСД(ДопПараметр.ФайлТЗ.ПолучитьТекст());
	СписокТСДНаименованиеПриИзменении(Элементы.СписокТСД.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеТСД(Данные)
	
	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		Для каждого СтрокаТЗ Из ДанныеТЗ Цикл
			ПараметрыОтбора = Новый Структура("ТСД", СтрокаТЗ.ТСД);
			
			НайденнаяСтрока = СписокТСД.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденнаяСтрока.Количество() > 0 Тогда
				НайденнаяСтрока[0].Наименование = СтрокаТЗ.Наименование;		
			КонецЕсли;			
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТСДЕслиКаталогиДоступны()
	
	ИндикаторТерминалы = 0;
	
	Если Не СписокТСД.Количество() = 0 Тогда
		ВсегоТСДПроц = СписокТСД.Количество(); //-100%
		ШагТСДПроц = 100/СписокТСД.Количество();
	Иначе
		ПоказатьСообщениеПользователю("Нет терминалов для выгрузки!");
		Возврат;
	КонецЕсли;
	
	тхт = Новый ТекстовыйДокумент; //выгрузка терминалов в файл обмена
	тхт.ДобавитьСтроку("+");
	n = 0;
	
	Для каждого стр Из СписокТСД Цикл
		n = n + 1;
		ИндикаторТерминалы = ИндикаторТерминалы + ШагТСДПроц;
		СтрокаТСД = Формат(n, "ЧГ = 0") + ";";
		СтрокаТСД = СтрокаТСД + "+;"; 
		СтрокаТСД = СтрокаТСД + ЧистаяСтрока(стр.ТСД) + ";";
		СтрокаТСД = СтрокаТСД + ЧистаяСтрока(стр.Наименование) + ";"; 
		
		тхт.ДобавитьСтроку(СтрокаТСД); 
	КонецЦикла;
	
	тхт.ВставитьСтроку(0, "" + Формат(тхт.КоличествоСтрок(), "ЧГ = 0"));
	
	ИндикаторТерминалы = 100;
	
	ФайлТЗ = Новый ТекстовыйДокумент;
	ФайлТЗ.УстановитьТекст(ПолучитьДанныеТСД());
	ФайлТЗ.Записать(лКаталогНастроек + "v83_terminals.tab");	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеТСД()
	
	ДанныеТЗ = Новый ХранилищеЗначения(СписокТСД.Выгрузить());
	Возврат XMLСтрока(ДанныеТЗ);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область АтрибутыДопФорм

&НаСервере
Функция СобратьАтрибутыОбъекта(ОбъектДанных, АтрибутШапки = 1)
	
	ТекстАтрибутов = "[]";
	
	Если Не ЗначениеЗаполнено(КодШаблонаДокументаВыгрузки) Тогда 
		Возврат ТекстАтрибутов;	
	КонецЕсли;
	
	СтрокиШаблона = ШаблоныДокументов.НайтиСтроки(Новый Структура("Код", КодШаблонаДокументаВыгрузки));
	Если СтрокиШаблона.Количество()=0 Тогда
		Возврат ТекстАтрибутов;
	КонецЕсли;
	
	Если НЕ СтрокиШаблона[0].ИспользоватьДопФормы Тогда 
		Возврат ТекстАтрибутов;	
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторШаблона", КодШаблонаДокументаВыгрузки);
	Шаги = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбора);
	
	Если Шаги.Количество() > 0 Тогда
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
		ЗаписьШагов = Новый ЗаписьJSON();
		ЗаписьШагов.ПроверятьСтруктуру = Ложь;
		ЗаписьШагов.УстановитьСтроку(ПараметрыЗаписи);
		ЗаписьШагов.ЗаписатьНачалоМассива();
		
		Для каждого стр Из Шаги Цикл
			ПараметрыОтбора = Новый Структура("ИД,РеквизитШапки", стр.ИдентификаторШага, АтрибутШапки);
			ДопШаги = ДополнительныеШаги.НайтиСтроки(ПараметрыОтбора);
			
			Если ДопШаги.Количество() = 0 Тогда Продолжить; КонецЕсли;
			стрШаг = ДопШаги[0];
			
			Если стрШаг.РежимВвода = 1 Тогда Продолжить; КонецЕсли; // вручную
			
			ЗаписьШагов.ЗаписатьНачалоОбъекта();
			
			ЗаписьШагов.ЗаписатьИмяСвойства("number");
			ЗаписьШагов.ЗаписатьЗначение(стр.Порядок);
			
			ЗаписьШагов.ЗаписатьИмяСвойства("form_id");
			ЗаписьШагов.ЗаписатьЗначение(стр.ИдентификаторШага);
			
			СтруктураЗначения = ПолучитьЗначенияРеквизита(ОбъектДанных, стрШаг.ЗаполняемыйРеквизит);
			
			ЗаписьШагов.ЗаписатьИмяСвойства("value");
			ЗаписьШагов.ЗаписатьЗначение(СтруктураЗначения.Значение);
			
			ЗаписьШагов.ЗаписатьИмяСвойства("value_name");
			ЗаписьШагов.ЗаписатьЗначение(СтруктураЗначения.Наименование);
			
			ЗаписьШагов.ЗаписатьКонецОбъекта();	
		КонецЦикла;
		
		ЗаписьШагов.ЗаписатьКонецМассива();
		ТекстАтрибутов = ЗаписьШагов.Закрыть();
	КонецЕсли;
	
	Возврат ТекстАтрибутов;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначенияРеквизита(ОбъектДанных, ИмяРеквизита)
	
	СтруктураОтвета = Новый Структура("Значение,Наименование");
	
	ЗначениеДопФормы = ОбъектДанных[ИмяРеквизита];
	
	Если ТипЗнч(ЗначениеДопФормы) = Тип("Строка") Тогда
		СтруктураОтвета.Вставить("Значение", СокрЛП(ЗначениеДопФормы));
		СтруктураОтвета.Вставить("Наименование", СтруктураОтвета.Значение);
		
	ИначеЕсли ТипЗнч(ЗначениеДопФормы) = Тип("Число") Тогда
		СтруктураОтвета.Вставить("Значение", Формат(ЗначениеДопФормы, "ЧРД=.; ЧГ=0"));
		СтруктураОтвета.Вставить("Наименование", СтруктураОтвета.Значение);
		
	ИначеЕсли ТипЗнч(ЗначениеДопФормы) = Тип("Дата") Тогда
		СтруктураОтвета.Вставить("Значение", Формат(ЗначениеДопФормы, "ДФ=dd.MM.yyyy"));
		СтруктураОтвета.Вставить("Наименование", СтруктураОтвета.Значение);
		
	ИначеЕсли ТипЗнч(ЗначениеДопФормы) = Тип("Булево") Тогда 
		СтруктураОтвета.Вставить("Значение", Формат(ЗначениеДопФормы, "БЛ=false; БИ=true"));
		СтруктураОтвета.Вставить("Наименование", Формат(ЗначениеДопФормы, "БЛ=Нет; БИ=Да"));
		
	Иначе
		Если ЗначениеЗаполнено(ЗначениеДопФормы) Тогда
			СтруктураОтвета.Вставить("Значение", XMLСтрока(ЗначениеДопФормы));
			
			ИмяМета = ЗначениеДопФормы.Метаданные().Имя;				
			Если Не Метаданные.Перечисления.Найти(ИмяМета) = Неопределено И ТипЗнч(ЗначениеДопФормы) = Тип("ПеречислениеСсылка." + ИмяМета) Тогда
				СтруктураОтвета.Вставить("Наименование", Строка(ЗначениеДопФормы)); 
			Иначе
				Попытка
					СтруктураОтвета.Вставить("Наименование", СокрЛП(ЗначениеДопФормы.Наименование));
				Исключение КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроцедурыФункции_Загрузка

#Область Документы

&НаКлиенте
Процедура НачатьПоискФайлов_ЗаполнитьСписокФайлов(НайденныеФайлы, ДопПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() > 0 Тогда	
		ДопПараметры.Вставить("МассивФайлов"    , НайденныеФайлы);
		ДопПараметры.Вставить("КоличествоФайлов", НайденныеФайлы.Количество());
		ДопПараметры.Вставить("ТекущийФайл"     , 1);
		ДопПараметры.Вставить("ТекущееИмяФайла" , НайденныеФайлы[ДопПараметры.ТекущийФайл - 1].Имя);
		ДопПараметры.Вставить("ТекущийПутьФайла",НайденныеФайлы[ДопПараметры.ТекущийФайл - 1].Путь);
		
		Файл = НайденныеФайлы[ДопПараметры.ТекущийФайл - 1];
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Файл", НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Путь);
		МассивСтрок = СписокФайлов.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Тогда
			ПрочестьФайл(Файл, ДопПараметры);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокФайлов()	
	
	СписокФайлов.Очистить();
	
	Если МассивСписокТСД = Неопределено Тогда
	Иначе
		Попытка 
			Если МассивСписокТСД.Количество() = 0 Тогда
				МассивСписокТСД = Неопределено;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
	
	МассивСписокТСД = ПолучитьСписокТСДНаСервере();
	МассивСписокТСД.Добавить("");
	
	Для каждого лТекущийТСД Из МассивСписокТСД Цикл		
		лТекущийИДТСД = "" + лТекущийТСД;
		
		Если лТекущийИДТСД = "null" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипОбмена = "1" Тогда			
			Если Не СоединениеСFTPКорректно Тогда
				Возврат;
			КонецЕсли;
			
			Если FTP = Неопределено Тогда
				FTP = ПодключитьсяКFTPСерверу();
			КонецЕсли;		
			
			Если FTP = Неопределено Или НЕ КаталогFTPДоступен Тогда
				Возврат;	
			КонецЕсли; 
			
			Если лТекущийТСД = "" Тогда 
				КаталогИДТСД = "";
			Иначе
				КаталогИДТСД = "" + лТекущийТСД + "/"; 
			КонецЕсли;
			FTP.УстановитьТекущийКаталог("/");
			ИмяКаталогаOUT = "DataMobile/" + КаталогИДТСД + "out/";
			Попытка	
				Массив = FTP.НайтиФайлы(
				ИмяКаталогаOUT, // ищём в корневом каталоге
				"*.dmU" // любые файлы (здесь можно задать маску)
				);
			Исключение
			КонецПопытки;
			ОбходМассиваФайловFTP(Массив, FTP, лТекущийТСД);
			
		ИначеЕсли ТипОбмена = "0" Тогда	
			
			Если лКаталогОбмена <> "" Тогда
				лКаталогОбмена = лКаталогОбмена + ?(прав(лКаталогОбмена, 1) = РазделительПути, "", РазделительПути);
			КонецЕсли;	
			
			Если лТекущийИДТСД = "" Тогда
				НачатьПоискФайлов(Новый ОписаниеОповещения("НачатьПоискФайлов_ЗаполнитьСписокФайлов", ЭтаФорма, Новый Структура()), лКаталогОбмена + "DataMobile" + РазделительПути + "out" + РазделительПути, "*.dmU"); //получение файлов из ТСД (расширение dmU)
			Иначе	
				НачатьПоискФайлов(Новый ОписаниеОповещения("НачатьПоискФайлов_ЗаполнитьСписокФайлов", ЭтаФорма, Новый Структура()), лКаталогОбмена + "DataMobile" + РазделительПути + лТекущийИДТСД + РазделительПути + "out" + РазделительПути, "*.dmU"); //получение файлов из ТСД (расширение dmU)
			КонецЕсли;
			
		ИначеЕсли ТипОбмена = "2" Тогда
			
			Если лТекущийТСД = "" Тогда 
				КаталогИДТСД = "app:/out/";
			Иначе
				КаталогИДТСД = "app:/" + лТекущийТСД + "/out/"; 
			КонецЕсли;
			ОбходМассиваФайловЯндексДиск(лТекущийТСД, КаталогИДТСД, "docs");
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКаталогВременныхФайлов()
	
	Попытка	
		УдалитьФайлы(КаталогВременныхФайлов(), "*.dmu");
   	Исключение    	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВсе()
	
	Если СписокФайлов.Количество() > 0 Тогда
		СтуктураФайла = Новый Структура();
		СтуктураФайла.Вставить("Файл"  , СписокФайлов[0].Файл);
		СтуктураФайла.Вставить("Код"   , СписокФайлов.Индекс(СписокФайлов[0]));
		СтуктураФайла.Вставить("Шаблон", СписокФайлов[0].Шаблон);		
	Иначе
		Возврат;
	КонецЕсли;	
	
	Код = СтуктураФайла.Код;
	тхт = Новый ТекстовыйДокумент();
	
	Если ТипОбмена = "1" Тогда		
		Если FTP = Неопределено Тогда
			FTP = ПодключитьсяКFTPСерверу();
		КонецЕсли;		
			
		FTP.УстановитьТекущийКаталог("/");
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
		FTP.Получить(СтуктураФайла.Файл, ВременныйФайл);
		тхт.НачатьЧтение(Новый ОписаниеОповещения("ЗагрузитьЗавершение_ОбработкаОповещения", ЭтаФорма, Новый Структура("FTP, ВременныйФайл, Код, Файл, Шаблон, тхт", FTP, ВременныйФайл, Код, СтуктураФайла.Файл, СтуктураФайла.Шаблон, тхт)), ВременныйФайл, "windows-1251");
		Возврат;
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		тхт.НачатьЧтение(Новый ОписаниеОповещения("ЗагрузитьЗавершение_ОбработкаОповещения", ЭтаФорма, Новый Структура("FTP, Код, Файл, Шаблон, тхт", FTP, Код, СтуктураФайла.Файл, СтуктураФайла.Шаблон, тхт)), СтуктураФайла.Файл, "windows-1251");
		Возврат;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение_ОбработкаОповещения(ДополнительныеПараметры) Экспорт
	
	лFTP          = ДополнительныеПараметры.FTP;
	лКод          = ДополнительныеПараметры.Код;
	лФайл         = ДополнительныеПараметры.Файл;
	лШаблон       = ДополнительныеПараметры.Шаблон;
	лтхт          = ДополнительныеПараметры.тхт;
	лЗагрузитьВсе = ДополнительныеПараметры.ЗагрузитьВсе; 
	Попытка лЭтоПечать    = ДополнительныеПараметры.ЭтоПечать; Исключение лЭтоПечать = Ложь; КонецПопытки;
	
	Если лЭтоПечать Тогда
		Если Есть115() и Ценообразование25() Тогда
			Попытка
				ФормаПечати = ПолучитьФорму("Обработка.ПечатьЭтикетокИЦенников2_5.Форма.ФормаТовары"); 
			Исключение 
				ФормаПечати = ПолучитьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары");
			КонецПопытки;
		Иначе	
			ФормаПечати = ПолучитьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары");
		КонецЕсли;
	
		ОбъектФормы = ФормаПечати.Объект;
		ВыбранноеЗначение = ЗаполнитьФормуЦенников(лтхт);				
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьФормуЦенниковКлиент(ВыбранноеЗначение, ОбъектФормы.Товары);	
		КонецЕсли;   				
		
		КопироватьДанныеФормы(ОбъектФормы, ФормаПечати.Объект);
		ФормаПечати.Открыть();				
		Возврат;
		
	Иначе		
		ТСД = Неопределено;
		
		Если ТипОбмена = "2" Тогда
			Если НЕ ДополнительныеПараметры.Свойство("ТСД") = Неопределено Тогда
				ТСД = ДополнительныеПараметры.ТСД;
			КонецЕсли;	
		КонецЕсли;	
		
		Если Не ДополнительныеПараметры.Свойство("ЗагрузитьВсе") = Неопределено Тогда //
			ЗагрузитьФрагмент_ОбработкаОповещения(лFTP, лКод, лФайл, лШаблон, лтхт, лЗагрузитьВсе, ТСД);
		ИначеЕсли Не ДополнительныеПараметры.Свойство("ВременныйФайл") = Неопределено Тогда  //
			лВременныйФайл = ДополнительныеПараметры.ВременныйФайл;
			НачатьУдалениеФайлов(Новый ОписаниеОповещения("ЗагрузитьЗавершение_ОбработкаОповещения", ЭтаФорма, Новый Структура("FTP, Код, Файл, Шаблон, тхт, ЗагрузитьВсе", лFTP, лКод, лФайл, лШаблон, лтхт, лЗагрузитьВсе)), лВременныйФайл);
		Иначе
			ЗагрузитьФрагмент_ОбработкаОповещения(лFTP, лКод, лФайл, лШаблон, лтхт, лЗагрузитьВсе);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФрагмент(лЗагрузитьВсе)
		
	Если лЗагрузитьВсе Тогда
		Загрузить("ЗагрузитьВсе");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФрагмент_ОбработкаОповещения(Знач лFTP, Знач лКод, Знач лФайл, Знач лШаблон, Знач лтхт, Знач лЗагрузитьВсе, ТСД = Неопределено)
	
	Перем Вид, ДокументБД, СтрокаОшибок, лФорма;
	
	Попытка 
		Шаблон = ШаблоныДокументов.НайтиСтроки(Новый Структура("ТипДокумента", лШаблон))[0];
		Вид = Шаблон.ВидДокумента;
	Исключение
		Сообщить("Не найден шаблон: " + лШаблон);
		Возврат;
	КонецПопытки;
	
	СтрокаОшибок = "";
	
	Попытка				
		СтруктураВозврата = ВнестиДокументВБазу(лКод,лтхт);		
		
		ДокументБД = СтруктураВозврата.Ссылка;
		СтрокаОшибок = СтруктураВозврата.СтрокаОшибок;		
		СерилизованноеЗначениеОбъекта = СтруктураВозврата.СерилизованноеЗначениеОбъекта;
			
		Если ДокументБД = Неопределено Или СтрокаОшибок <> "" Тогда
			Сообщить("Не удалось загрузить документ " + лШаблон + " файл " + лФайл + Символы.ПС + СтрокаОшибок);
			Возврат;
		КонецЕсли;	
					
		Если Вид = "ТТНВходящаяЕГАИС" Тогда	
			ПонижатьДетализацию = Шаблон.ЕГАИСПонижатьДетализациюПроверкиТТНДоБутылок;
			Если ИнициализироватьДанныеПроверкиДокументаБД(ДокументБД, ПонижатьДетализацию) Тогда			
				ВнестиДанныеПроверкиВДокумент(ДокументБД);
			Иначе
				Сообщить("Не удалось инициализировать данные для формы проверки и подбора по документу " + ДокументБД);
			КонецЕсли;	
		КонецЕсли;
		
		Если ДокументБД <> "" Тогда			
			//ТОЛЬКО ОТКРЫТИЕ ФОРМЫ БЕЗ ЗАПИСИ ОБЪЕКТА (В МАРКИРОВКЕ НЕ ИСПОЛЬЗУЕТСЯ)
			Если Шаблон.ОткрыватьДокументыПослеЗагрузкиБезЗаписи 
				И Не Шаблон.ПроводитьДокументы 
					И Не Шаблон.НеОткрыватьДокументыПослеЗагрузки
						И ЗначениеЗаполнено(СерилизованноеЗначениеОбъекта) Тогда
				Форма = ОткрытьФорму("Документ." + Вид + ".ФормаОбъекта", Новый Структура("Ключ", ДокументБД), ЭтаФорма);
				Форма.Модифицированность = Истина;
				ОбъектОткрытойФормы = Форма.Объект;
				ЗагрузитьСерилизованныеДанные(СтруктураВозврата.СерилизованноеЗначениеОбъекта, ОбъектОткрытойФормы);
				КопироватьДанныеФормы(ОбъектОткрытойФормы, Форма.Объект);
				
			//ТИПОВОЙ ВАРИАНТ С ЗАПИСЬЮ ОБЪЕКТА (В ТОМ ЧИСЛЕ С МАРКИРОВКОЙ)	
			ИначеЕсли Не Шаблон.НеОткрыватьДокументыПослеЗагрузки Тогда				
				лФорма = ПолучитьФорму("Документ." + Вид + ".ФормаОбъекта", Новый Структура("Ключ", ДокументБД), ЭтаФорма);
				лФорма.Открыть();				
			КонецЕсли;			
		КонецЕсли;
		
		Попытка
			Если ТипЗнч(ДокументБД) = Тип("ДокументСсылка.УведомлениеОПриемкеМДЛП") И 
				ПолучитьСхемаАкцептования(ДокументБД) = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок") Тогда
				УстановитьСтатусПровереноУТоваров(ДокументБД);	
			КонецЕсли;
		Исключение
		КонецПопытки;
	
		Если ТипОбмена = "1" Тогда			
			лFTP.Удалить(лФайл);
			
		ИначеЕсли ТипОбмена = "0" Тогда			
			НачатьУдалениеФайлов(Новый ОписаниеОповещения("ЗагрузитьЗавершение", ЭтаФорма, Новый Структура("ЗагрузитьВсе, Индекс", лЗагрузитьВсе, лКод)), лФайл);
			Возврат;  
			
		ИначеЕсли ТипОбмена = "2" Тогда			
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(лФайл, РазделительПути);
			КоличествоСтрок = МассивСтрок.Количество();			
			НаименованиеФайла = МассивСтрок[КоличествоСтрок - 1];
			
			Если ЗначениеЗаполнено(ТСД) Тогда			
				Путь = "app:/" + ТСД + "/out/" + НаименованиеФайла;
			Иначе
				Путь = "app:/out/" + НаименованиеФайла;	
			КонецЕсли;	
			УдалитьПапкуИлиФайл(Путь);		
		КонецЕсли;
		
	Исключение		
		Сообщить("Не удалось загрузить документ " + лШаблон + " файл " + лФайл + "_ERROR" + Символы.ПС + ОписаниеОшибки());
		
		Если лЗагрузитьВсе Тогда			
			Если ТипОбмена = "1" Тогда
				лFTP.Переместить(лФайл, лФайл + "_ERROR");
			ИначеЕсли ТипОбмена = "0" Тогда		
				НачатьПеремещениеФайла(Новый ОписаниеОповещения("ЗагрузитьЗавершениеПеремещение", ЭтаФорма, Новый Структура("ЗагрузитьВсе", лЗагрузитьВсе)), лФайл, лФайл + "_ERROR");
				Возврат;
			КонецЕсли;
		КонецЕсли;		
	КонецПопытки;
	
	ЗагрузитьФрагмент(лЗагрузитьВсе);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьСерилизованныеДанные(СерилизованноеЗначениеОбъекта, ОбъектОткрытойФормы)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СерилизованноеЗначениеОбъекта);
	ЗначениеВДанныеФормы(ПрочитатьXML(ЧтениеXML), ОбъектОткрытойФормы); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение(ДополнительныеПараметры) Экспорт
	
	//удаление файла-документа после загрузки в БД;
	лЗагрузитьВсе = ДополнительныеПараметры.ЗагрузитьВсе;
	Попытка СписокФайлов.Удалить(ДополнительныеПараметры.Индекс); Исключение КонецПопытки;	
	ЗагрузитьФрагмент(лЗагрузитьВсе);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершениеПеремещение(Результат,ДополнительныеПараметры) Экспорт
	
	//удаление файла-документа после загрузки в БД;
	лЗагрузитьВсе = ДополнительныеПараметры.ЗагрузитьВсе;
	
	ЗагрузитьФрагмент(лЗагрузитьВсе);
	
КонецПроцедуры


#КонецОбласти

#Область НовыеТовары

&НаКлиенте
Процедура ПрочестьФайл(Файл, ДопПараметры)
	
	Если Найти(Файл.ПолноеИмя,"arts_") <> 0 Или Найти(Файл.ПолноеИмя,"barcodes_") <> 0 Или Найти(Файл.ПолноеИмя,"_ERROR") <> 0 Тогда //загрузка изменений в справочниках
		Если ДопПараметры.ТекущийФайл < ДопПараметры.КоличествоФайлов Тогда
			ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
			Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл - 1];
			ПрочестьФайл(Файл, ДопПараметры);
		КонецЕсли;
		
		Возврат;
	КонецЕсли; 
	
	тхт = Новый ТекстовыйДокумент();
	ДопПараметры.Вставить("тхт", 	тхт);
	ДопПараметры.Вставить("Файл", 	Файл);
	
	ОписаниеОповешения = Новый ОписаниеОповещения("НачатьЧтение_ПрочестьФайл", ЭтаФорма, ДопПараметры);
	тхт.НачатьЧтение(ОписаниеОповешения, Файл.ПолноеИмя, "windows-1251");
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтение_ПрочестьФайл(ДопПараметры) Экспорт
	
	ТекущийФайл = ДопПараметры.тхт.ПолучитьТекст();	
	Тхт 		= ДопПараметры.тхт;
	СтрокаДока  = Тхт.ПолучитьСтроку(1); //<ВнутреннийИдентификаторДокумента>;<НомерДокумента>;<КомментарийДокумента>;<ИдентификаторДокумента>;<ТипДокумента>;<Контрагент>;
	СтрокаДока  = СтрЗаменить(СтрокаДока, ";", Символы.ПС);
	ИдентификаторДокумента = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока, 4), "[59]", ";");
	УИ = СокрЛП(стрЗаменить(ИдентификаторДокумента, "dk8#", ""));   
	ТипДокумента = СтрЗаменить(СокрЛП(СтрПолучитьСтроку(СтрокаДока, 5)), "[59]", ";");
	
	ДокументБД = НайтиДокумент(ДопПараметры); //поиск документа источника
	
	Если ДокументБД = Неопределено И ДопПараметры.ТекущийФайл = ДопПараметры.ТекущийФайл Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДокументБД = Неопределено Тогда
		ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
		Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		ПрочестьФайл(Файл, ДопПараметры);
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Файл", ДопПараметры.Файл.ПолноеИмя);
	МассивСтрока = СписокФайлов.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрока.Количество() = 0 Тогда
		Стр = СписокФайлов.Добавить();
	Иначе
		Стр = МассивСтрока[0];
	КонецЕсли;
	
	Стр.Файл = ДопПараметры.Файл.ПолноеИмя;
	Стр.ТСД = ИДТСД;
	
	Попытка
		Стр.Документ = ДокументБД.Документ.Ссылка;
	Исключение
		Если ДокументБД.Документ = "ТоварноТранспортнаяНакладнаяЕГАИС" Тогда
			Стр.Документ = "ТТНВходящаяЕГАИС";
		Иначе
			Стр.Документ = ДокументБД.Документ;
		КонецЕсли;
	КонецПопытки;
	
	Стр.Шаблон = ДокументБД.ШаблонИмя;
	Стр.ТЧПодбор = ДокументБД.ИмяТабличнойЧастиПодбор;
	Стр.ТЧПриемка = ДокументБД.ИмяТабличнойЧастиПриемка;
	
	Если ДокументБД.ИспользоватьПодбор Тогда		
		Стр.ТабличнуюЧастьПриЗагрузкеПодбор = ДокументБД.ТабличнуюЧастьПриЗагрузкеПодбор;
		Если ДокументБД.ТабличнуюЧастьПриЗагрузкеПодбор = 0 Тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Не изменять";
		ИначеЕсли ДокументБД.ТабличнуюЧастьПриЗагрузкеПодбор = 1 Тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Дополнять";
		ИначеЕсли ДокументБД.ТабличнуюЧастьПриЗагрузкеПодбор = 2 Тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Заменять";
		ИначеЕсли ДокументБД.ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Изменять";
		ИначеЕсли ДокументБД.ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПодборВыбор = "Изменять только подобранные";		 
		КонецЕсли;
	Иначе
		Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПодборВыбор.Доступность = Ложь; 
	КонецЕсли;
	
	Если ДокументБД.ИспользоватьПриемку Тогда
		Стр.ТабличнуюЧастьПриЗагрузкеПриемка = ДокументБД.ТабличнуюЧастьПриЗагрузкеПриемка;
		Если ДокументБД.ТабличнуюЧастьПриЗагрузкеПриемка = 0 Тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Не изменять";
		ИначеЕсли ДокументБД.ТабличнуюЧастьПриЗагрузкеПриемка = 1 Тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Дополнять";
		ИначеЕсли ДокументБД.ТабличнуюЧастьПриЗагрузкеПриемка = 2 Тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Заменять";
		ИначеЕсли ДокументБД.ТабличнуюЧастьПриЗагрузкеПриемка = 3 Тогда
			Стр.ТабличнуюЧастьПриЗагрузкеПриемкаВыбор = "Изменять";	 
		КонецЕсли;
	Иначе
		Элементы.СписокФайловТабличнуюЧастьПриЗагрузкеПриемкаВыбор.Доступность = Ложь;
	КонецЕсли;	
	
	тхт = Новый ТекстовыйДокумент();
	ДопПараметры.Вставить("тхт", тхт);
	ДопПараметры.Вставить("Стр", Стр);
	
	ОписаниеОповешения = Новый ОписаниеОповещения("НачатьЧтение_ПрочестьФайлСтр", ЭтаФорма, ДопПараметры);
	тхт.НачатьЧтение(ОписаниеОповешения, Стр.Файл, "windows-1251");
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтение_ПрочестьФайлСтр(ДопПараметры) Экспорт
	
	Если ДопПараметры.ТекущийФайл<ДопПараметры.КоличествоФайлов Тогда
		ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
		Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		ПрочестьФайл(Файл, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуру(СтрокаДерева, НовЭлемент)
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда		
		ЗначениеШтрихкодаРодителя 					= СтрокаДерева.Родитель.Штрихкод;
		ЗначениеШтрихкодаРодителяНормализованный 	= СтрокаДерева.Родитель.НормализованныйШтрихкод;
		
		ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителя);
		
		Если ДанныеУпаковки = Неопределено Тогда
			ДанныеУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителяНормализованный);		
		КонецЕсли;
		
		Если ДанныеУпаковки <> Неопределено Тогда //данный штрихкод есть базе
			НовЭлемент.Номенклатура = ДанныеУпаковки.Номенклатура;
			НовЭлемент.Характеристика = ДанныеУпаковки.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция создает новую номенклатуру в БД
//
// Параметры:
//  ШтрихкодТовара 		- штрихкод номенклатуры
//
//	НаименованиеТовара 	- наименование номенклатуры
//
// Возвращаемое значение:
//  СписокЗначений - список значений созданной номенклатуры
//
&НаСервере
Функция СоздатьНоменклатуру(ШтрихкодТовара, НаименованиеТовара, ИДТовара = "")
	
	НаименованиеТовара = Лев(НаименованиеТовара, Метаданные.Справочники.Номенклатура.ДлинаНаименования);
	
	Попытка
		НМ = Справочники.Номенклатура.СоздатьЭлемент();
		
		Если ВидНоменклатуры.Пустая() Тогда
			ВидНМ = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Штучный товар");
			
			Если ВидНМ.Пустая() Тогда
				ВидНМ = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар");
			КонецЕсли;
			
			Если ВидНМ.Пустая() Тогда
				Выборка = Справочники.ВидыНоменклатуры.Выбрать();
				Если Выборка.Следующий() Тогда
					ВидНМ = Выборка.Ссылка;
				КонецЕсли;	
			КонецЕсли; 
			
			Если ВидНМ.Пустая() Тогда
				Сообщить("В базе данных не заполнен справочник Виды номенклатуры");
				Возврат "";
			КонецЕсли;
		Иначе
			ВидНМ = ВидНоменклатуры;
		КонецЕсли;
		
		НМ.ВидНоменклатуры  = ВидНМ;  
		НМ.ОсобенностьУчета = ВидНоменклатуры.ОсобенностьУчета;
		
		НМ.Наименование       = НаименованиеТовара;
		НМ.НаименованиеПолное = НаименованиеТовара;
		НМ.Качество           = Перечисления.ГрадацииКачества.Новый;
		ЕИ = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");	
		
		НМ.ЕдиницаИзмерения  = ЕИ;
		НМ.ЕдиницаДляОтчетов = НМ.ЕдиницаИзмерения;
		
		НМ.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Товар;
		НМ.ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		НМ.ИспользованиеХарактеристик=Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
		
		ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.НайтиПоНаименованию("Прочее");
		
		Если ГруппаДоступа.Пустая() Тогда
			ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.СоздатьЭлемент();
			ГруппаДоступа.Наименование = "Прочее";
			ГруппаДоступа.Записать();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Создана группа доступа: " + ЕИ.Ссылка;
			Сообщение.Сообщить();
		КонецЕсли;
		
		НМ.ГруппаДоступа = ГруппаДоступа;
		НМ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;		
		НМ.Записать();	
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Создана номенклатура: " + НаименованиеТовара;
		Сообщение.Сообщить();
		
		Если ШтрихкодТовара <> "" И СтрДлина(ШтрихкодТовара) <> 5 И Лев(ШтрихкодТовара,1) <> "2" Тогда
			Регистр = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			Регистр.Штрихкод     = ШтрихкодТовара;
			Регистр.Номенклатура = НМ.Ссылка;
			Регистр.Упаковка     = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Регистр.Записать();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Создан штрих-код: "+ШтрихкодТовара + "  , номенклатура -" + НаименованиеТовара;
			Сообщение.Сообщить();
		КонецЕсли;
		
		СписокЗначений = Новый СписокЗначений();
		СписокЗначений.Добавить(НМ.Ссылка);
		СписокЗначений.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СписокЗначений.Добавить(НМ.ЕдиницаИзмерения);
		СписокЗначений.Добавить(1);//коэффициент по умолчанию
		СписокЗначений.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		
		Возврат СписокЗначений;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка создания номенклатуры " + НаименованиеТовара + ":" + ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат "";
	КонецПопытки;
	
КонецФункции	

&НаКлиенте
Процедура УдалитьНовыеТоварыШтрихкоды()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Обрабатывать", Истина);
	МассивСтрок = НовыеТоварыШтрихкоды.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого СтрокаТаблицы Из НовыеТоварыШтрихкоды Цикл		
		Если Не СтрокаТаблицы.Обрабатывать Тогда Продолжить; КонецЕсли;
		
		Если ТипОбмена = "1" Тогда			
			Если FTP = Неопределено Тогда
				FTP = ПодключитьсяКFTPСерверу();
			КонецЕсли;		
			
			Если FTP.НайтиФайлы(СтрокаТаблицы.ИмяФайлаТовара).Количество() > 0 Тогда
				тхт = Новый ТекстовыйДокумент();
				ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
				FTP.Получить(СтрокаТаблицы.ИмяФайлаТовара, ВременныйФайл); 
				
				ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма, 
				Новый Структура("УдалениеТоваров, тхт, НовоеНаименование, ИмяФайлаТовара", 
				Истина, тхт, СтрокаТаблицы.НовоеНаименование, СтрокаТаблицы.ИмяФайлаТовара));
				
				тхт.НачатьЧтение(ОписаниеОповещения, ВременныйФайл, "windows-1251");		
			КонецЕсли;
			
			Если FTP.НайтиФайлы(СтрокаТаблицы.ИмяФайлаШтрихкода).Количество() > 0 Тогда				
				тхт = Новый ТекстовыйДокумент();
				ВременныйФайлШК = FTPПолучитьИмяВременногоФайлаНаКлиенте();
				FTP.Получить(СтрокаТаблицы.ИмяФайлаШтрихкода, ВременныйФайлШК); 
				
				ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма, 
				Новый Структура("УдалениеШК, тхт, Штрихкод, ИмяФайлаШтрихкода", 
				Истина, тхт, СтрокаТаблицы.Штрихкод, СтрокаТаблицы.ИмяФайлаШтрихкода));
				
				тхт.НачатьЧтение(ОписаниеОповещения, ВременныйФайлШК, "windows-1251");				
			КонецЕсли; 			
		КонецЕсли;	
	КонецЦикла;
	
	Если Не ТипОбмена = "1" Тогда
		ПараметрыПоиска = Новый Структура();
		ПараметрыПоиска.Вставить("Обрабатывать", Истина);
		МассивСтрок = НовыеТоварыШтрихкоды.НайтиСтроки(ПараметрыПоиска);
		ПривязатьУдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(МассивСтрок, Новый Структура(), СтрокаТаблицы.ИДТСД);
		
		Возврат;
	КонецЕсли;
		
Конецпроцедуры

&НаКлиенте
Процедура ПривязатьУдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(НайденныеФайлы, ДопПараметры, ИДТСД)
	
	Если НайденныеФайлы.Количество() > 0 Тогда		
		тхт = Новый ТекстовыйДокумент();
		тхтТовар = Новый ТекстовыйДокумент();
		
		ДопПараметры.Вставить("тхт"                 , тхт);
		ДопПараметры.Вставить("тхтТовар"            , тхтТовар);
		ДопПараметры.Вставить("МассивФайлов"		, НайденныеФайлы);
		ДопПараметры.Вставить("КоличествоФайлов"	, НайденныеФайлы.Количество());
		ДопПараметры.Вставить("ТекущийФайл"			, 1);
		
		Файл = НайденныеФайлы[ДопПараметры.ТекущийФайл-1];
		
		ДопПараметры.Вставить("ИмяФайлаШтрихкода"	, Файл.ИмяФайлаШтрихкода);
		ДопПараметры.Вставить("Штрихкод"			, Файл.Штрихкод);
		ДопПараметры.Вставить("ИмяФайлаТовара"		, Файл.ИмяФайлаТовара);
		ДопПараметры.Вставить("НовоеНаименование"	, Файл.НовоеНаименование);
		ДопПараметры.Вставить("ТСД"	, ИДТСД);	 
		
		ЗапуститьОповещенияЧтенияФайлов(Файл, ДопПараметры);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОповещенияЧтенияФайлов(Файл, ДопПараметры)
	
	Если Файл.ИмяФайлаШтрихкода <> "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры);
		
		Если ТипОбмена = "2" Тогда			
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДопПараметры.ИмяФайлаШтрихкода, РазделительПути);
			КоличествоСтрок = МассивСтрок.Количество();			
			НаименованиеФайла = МассивСтрок[КоличествоСтрок - 1];
			
			Если ЗначениеЗаполнено(ДопПараметры.ТСД) Тогда			
				Путь = "app:/" + ДопПараметры.ТСД + "/out/" + НаименованиеФайла;
			Иначе
				Путь = "app:/out/" + НаименованиеФайла;	
			КонецЕсли;
			
			УдалитьПапкуИлиФайл(Путь);			
		КонецЕсли;
		
		ДопПараметры.тхт.НачатьЧтение(ОписаниеОповещения, Файл.ИмяФайлаШтрихкода, "windows-1251");
		
	Иначе 
		Если Файл.ИмяФайлаТовара <> "" Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры); 
			
			Если ТипОбмена = "2" Тогда			
				МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДопПараметры.ИмяФайлаТовара, РазделительПути);
				КоличествоСтрок = МассивСтрок.Количество();			
				НаименованиеФайла = МассивСтрок[КоличествоСтрок - 1];
				
				Если ЗначениеЗаполнено(ДопПараметры.ТСД) Тогда			
					Путь = "app:/" + ДопПараметры.ТСД + "/out/" + НаименованиеФайла;
				Иначе
					Путь = "app:/out/" + НаименованиеФайла;	
				КонецЕсли;
				
				УдалитьПапкуИлиФайл(Путь);				
			КонецЕсли;

			ДопПараметры.тхтТовар.НачатьЧтение(ОписаниеОповещения, Файл.ИмяФайлаТовара, "windows-1251"); 		
		КонецЕсли; 		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтениеФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(ДопПараметры) Экспорт
	
	тхт = ДопПараметры.тхт;	
	
	Если ДопПараметры.ИмяФайлаШтрихкода <> "" Тогда		
		Для сч = 1 По тхт.КоличествоСтрок() Цикл 
			
			ТекущаяСтрока = ОбработатьЭкранированиеСтроки(тхт.ПолучитьСтроку(сч));
			СтрокаПоиска =  Найти(ТекущаяСтрока, ДопПараметры.Штрихкод);
			Если СтрокаПоиска > 0 Тогда
				тхт.УдалитьСтроку(сч);
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли; 
	
	ТекФайл = тхт.ПолучитьТекст();
	
	Если ПустаяСтрока(СокрЛП(ТекФайл)) Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("НачатьУдалениеФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры), ДопПараметры.ИмяФайлаШтрихкода);
	Иначе
		ДопПараметры.Вставить("тхт", тхт);
		
		ОписаниеОповещения = Новый ОписаниеОповещения ("НачатьЗаписьФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры);
		тхт.НачатьЗапись(ОписаниеОповещения, ДопПараметры.ИмяФайлаШтрихкода);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(Результат, ДопПараметры) Экспорт
	
	Если Результат Тогда	
		ПереходКСледующемуФайлу(ДопПараметры);		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКСледующемуФайлу(ДопПараметры)
	
	Если ДопПараметры.ИмяФайлаТовара <> "" И ДопПараметры.ИмяФайлаШтрихкода <> "" Тогда
		Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл - 1];
		Файл.ИмяФайлаШтрихкода = "";
		ДопПараметры.ИмяФайлаШтрихкода = "";
		ЗапуститьОповещенияЧтенияФайлов(Файл, ДопПараметры);
		Возврат;
	КонецЕсли; 
	
	Если ДопПараметры.ТекущийФайл < ДопПараметры.КоличествоФайлов Тогда
		тхт = Новый ТекстовыйДокумент();
		тхтТовар = Новый ТекстовыйДокумент();
		
		ДопПараметры.Вставить("тхт"                  , тхт);
		ДопПараметры.Вставить("тхтТовар"             ,тхтТовар);
		ДопПараметры.ТекущийФайл = ДопПараметры.ТекущийФайл+1;						
		ДопПараметры.ИмяФайлаШтрихкода 	= ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл - 1].ИмяФайлаШтрихкода;
		ДопПараметры.ИмяФайлаТовара 	= ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл - 1].ИмяФайлаТовара;
		
		Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл - 1];
		
		ДопПараметры.Вставить("ИмяФайлаШтрихкода"	, Файл.ИмяФайлаШтрихкода);
		ДопПараметры.Вставить("Штрихкод"			, Файл.Штрихкод);
		ДопПараметры.Вставить("ИмяФайлаТовара"		, Файл.ИмяФайлаТовара);
		ДопПараметры.Вставить("НовоеНаименование"	, Файл.НовоеНаименование);
		
		ЗапуститьОповещенияЧтенияФайлов(Файл, ДопПараметры);
		
	Иначе		
		Если(ДопПараметры.ИмяФайлаТовара = "" Или ДопПараметры.ИмяФайлаШтрихкода = "") Тогда
			ЗаполнитьСписокТоваровШтрихкодов(ИДТСД);		
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтениеФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(ДопПараметры) Экспорт
	
	тхтТовар = ДопПараметры.тхтТовар;	
	
	Если ДопПараметры.ИмяФайлаТовара <> "" Тогда		
		Для сч = 1 По тхтТовар.КоличествоСтрок() Цикл 
			ТекущаяСтрока = ОбработатьЭкранированиеСтроки(тхтТовар.ПолучитьСтроку(сч));
			СтрокаПоиска =  Найти(ТекущаяСтрока, ДопПараметры.НовоеНаименование);
			
			Если СтрокаПоиска > 0 Тогда
				тхтТовар.УдалитьСтроку(сч);
			КонецЕсли;			
		КонецЦикла;		
	КонецЕсли; 
	
	ТекФайл = тхтТовар.ПолучитьТекст();
	
	Если ПустаяСтрока(СокрЛП(ТекФайл)) Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("НачатьУдалениеФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры), ДопПараметры.ИмяФайлаТовара);
		
	Иначе
		ДопПараметры.Вставить("тхтТовар", тхтТовар);
		
		ОписаниеОповещения = Новый ОписаниеОповещения ("НачатьЗаписьФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP", ЭтаФорма, ДопПараметры);
		тхтТовар.НачатьЗапись(ОписаниеОповещения, ДопПараметры.ИмяФайлаТовара);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(Результат, ДопПараметры) Экспорт
	
	Если Результат Тогда
		ПереходКСледующемуФайлу(ДопПараметры);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУдалениеФайловТоваров_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(ДопПараметры) Экспорт
	
	ПереходКСледующемуФайлу(ДопПараметры);		
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУдалениеФайловШК_УдалитьНовыеТоварыШтрихкодыНеИспользуяFTP(ДопПараметры) Экспорт
	
	ПереходКСледующемуФайлу(ДопПараметры);		
	
КонецПроцедуры

&НаКлиенте
функция ПолучитьМассивТоваровFTP(ИДТСД)
	
	Если FTP = Неопределено Тогда
		FTP = ПодключитьсяКFTPСерверу();
	КонецЕсли;		
			
	FTP.УстановитьТекущийКаталог("/");
	
	Если ИДТСД = "" Тогда
		КаталогИДТСД = "";
	Иначе
		КаталогИДТСД = "" + ИДТСД + "/"; 
	КонецЕсли;
	
	ИмяКаталогаOUT = "DataMobile/" + КаталогИДТСД + "out/";
	
	Попытка
		МассивТоваров = FTP.НайтиФайлы(
		ИмяКаталогаOUT, // ищём в корневом каталоге
		"arts_*.dmU" // любые файлы (здесь можно задать маску)
		);
	Исключение
		ТекстСообщения = "Отсутствует каталог ""out"" в " + "DataMobile/" + КаталогИДТСД;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецПопытки;
	
	Возврат МассивТоваров;
	
КонецФункции

&НаКлиенте
функция ПолучитьМассивШтрихкодовFTP(ИДТСД)
	
	Если FTP = Неопределено Тогда
		FTP = ПодключитьсяКFTPСерверу();
	КонецЕсли;		
			
	FTP.УстановитьТекущийКаталог("/");
	
	Если ИДТСД = "" Тогда
		КаталогИДТСД = "";
	Иначе
		КаталогИДТСД = "" + ИДТСД + "/"; 
	КонецЕсли;
	
	ИмяКаталогаOUT = "DataMobile/" + КаталогИДТСД + "out/";
	МассивШК = FTP.НайтиФайлы(
	ИмяКаталогаOUT, // ищём в корневом каталоге
	"barcodes_*.dmU" // любые файлы (здесь можно задать маску)
	);	
	
	Возврат МассивШК;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокТоваровШтрихкодов(ИДТСД) 
	
	Если НЕ ТипОбмена = "2" Тогда
		НовыеТоварыШтрихкоды.Очистить();  
	КонецЕсли;
	
	Если ТипОбмена = "1" Тогда		
		Если FTPАдрес <> "" Тогда
			МассивТоваров = ПолучитьМассивТоваровFTP(ИДТСД);
			МассивШК = ПолучитьМассивШтрихкодовFTP(ИДТСД);
			ЗаполнитьСписокТоваровШтрихкодовФрагмент(МассивТоваров, МассивШК, ИДТСД);
		КонецЕсли;
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если лКаталогОбмена <> "" Тогда
			лКаталогОбмена = лКаталогОбмена + ?(Прав(лКаталогОбмена,1) = РазделительПути, "", РазделительПути);
		КонецЕсли;
		
		Если ИДТСД = "" Тогда
			КаталогИТСД = РазделительПути;
		ИНаче
			КаталогИТСД = РазделительПути + ИДТСД + РазделительПути;
		КонецЕсли;	
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИДТСД"					, ИДТСД);
		ДопПараметры.Вставить("лКаталогОбменаТоваров"	, лКаталогОбмена + "DataMobile" + КаталогИТСД + "out" + РазделительПути);
		ДопПараметры.Вставить("лКаталогОбменаШК"		, лКаталогОбмена + "DataMobile" + КаталогИТСД + "out" + РазделительПути);
		ДопПараметры.Вставить("МаскаТоваров"			, "arts_*.dmU");
		ДопПараметры.Вставить("МаскаШК"					, "barcodes_*.dmU");
		
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачалоПоискФайловТоваров_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры), ДопПараметры.лКаталогОбменаТоваров, ДопПараметры.МаскаТоваров);
		
	ИначеЕсли ТипОбмена = "2" Тогда			
		Если ИДТСД = "" ИЛИ ИДТСД = Неопределено Тогда 
			КаталогИДТСД = "app:/out/";
		Иначе
			КаталогИДТСД = "app:/" + ИДТСД + "/out/"; 
		КонецЕсли;    
		
		ОбходМассиваФайловЯндексДиск(ИДТСД, КаталогИДТСД, "arts_barcodes");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПоискФайловТоваров_ЗаполнитьСписокТоваровШтрихкодов(НайденныеФайлы, ДопПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() > 0 Тогда		
		ПолучитьДопПараметры(НайденныеФайлы, ДопПараметры);
		ФайлТовара = НайденныеФайлы[ДопПараметры.ТекущийФайл-1];
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловТоваров_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры);
		ДопПараметры.тхт.НачатьЧтение(ОписаниеОповещения, ФайлТовара.ПолноеИмя, "windows-1251"); 
		
	Иначе
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачалоПоискФайловШК_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры), ДопПараметры.лКаталогОбменаШК, ДопПараметры.МаскаШК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПоискФайловШК_ЗаполнитьСписокТоваровШтрихкодов(НайденныеФайлы, ДопПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() > 0 Тогда		
		ПолучитьДопПараметры(НайденныеФайлы, ДопПараметры);
		ДопПараметры.Вставить("НомерФайлаВСписке", ДопПараметры.ТекущийФайл);
		
		Для каждого СтрокаФайла Из НайденныеФайлы Цикл
			НазваниеТекста = "тхт_ШК" + Строка(ДопПараметры.ТекущийФайл);
			
			Если Не ДопПараметры.Свойство(НазваниеТекста) Тогда
				ДопПараметры.Вставить(НазваниеТекста, Новый ТекстовыйДокумент());
				ФайлШК = НайденныеФайлы[ДопПараметры.ТекущийФайл - 1];   			
				ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловШК_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры);
				ДопПараметры.ТекущийФайл = ДопПараметры.ТекущийФайл + 1;
				
				Для каждого ЭлементСтруктуры Из ДопПараметры Цикл
					Если ЭлементСтруктуры.Ключ = НазваниеТекста Тогда 
						ЭлементСтруктуры.Значение.НачатьЧтение(ОписаниеОповещения, ФайлШК.ПолноеИмя, "windows-1251");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДопПараметры(НайденныеФайлы, ДопПараметры)
	
	тхт = Новый ТекстовыйДокумент();
	ДопПараметры.Вставить("тхт"               , тхт);
	ДопПараметры.Вставить("МассивФайлов"      , НайденныеФайлы);
	ДопПараметры.Вставить("КоличествоФайлов"  , НайденныеФайлы.Количество());
	ДопПараметры.Вставить("ТекущийФайл"       , 1);
	ДопПараметры.Вставить("ПорядковыйНомерТСД", 1);
	ДопПараметры.Вставить("ТекущееИмяФайла"   , НайденныеФайлы[ДопПараметры.ТекущийФайл - 1].Имя);
	ДопПараметры.Вставить("ТекущийПутьФайла"  , НайденныеФайлы[ДопПараметры.ТекущийФайл - 1].Путь);	
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтениеФайловШК_ЗаполнитьСписокТоваровШтрихкодов(ДопПараметры) Экспорт

	Для каждого ЭлементСтруктуры Из ДопПараметры Цикл
		Если СтрНайти(ЭлементСтруктуры.Ключ, "тхт_ШК") Тогда
			тхт_ШК = ЭлементСтруктуры.Значение;
			ТекущийФайл = тхт_ШК.ПолучитьТекст();		
			
			Если Не тхт_ШК = Неопределено Тогда
				Для сч = 1 По тхт_ШК.КоличествоСтрок() Цикл
					ПолныйПутьКФайлу = ДопПараметры.ТекущийПутьФайла + ДопПараметры.ТекущееИмяФайла;
					ТекущаяСтрока = тхт_ШК.ПолучитьСтроку(сч);
					ЗаполнитьТЧШтрихкодамиСервер(ТекущаяСтрока, ПолныйПутьКФайлу,РазделительПути); 	
				КонецЦикла;   	
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;	
			
КонецПроцедуры

&НаКлиенте
Процедура НачатьЧтениеФайловТоваров_ЗаполнитьСписокТоваровШтрихкодов(ДопПараметры) Экспорт
	
	тхт = ДопПараметры.тхт;
	ТекущийФайл = тхт.ПолучитьТекст();	
	
	Для сч = 1 По тхт.КоличествоСтрок() Цикл
		ПолныйПутьКФайлу = ДопПараметры.ТекущийПутьФайла + ДопПараметры.ТекущееИмяФайла;
		ТекущаяСтрока = тхт.ПолучитьСтроку(сч);
		
		Если ТекущаяСтрока = "" Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьТЧТоварамиСервер(ТекущаяСтрока, ПолныйПутьКФайлу, РазделительПути, ДопПараметры.ИДТСД); 	
	КонецЦикла;
	
	Если ДопПараметры.ТекущийФайл < ДопПараметры.КоличествоФайлов Тогда
		тхт = Новый ТекстовыйДокумент();
		ДопПараметры.Вставить("тхт",тхт);
		ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
		Файл = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл-1];
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЧтениеФайловТоваров_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры);
		тхт.НачатьЧтение(ОписаниеОповещения, Файл.ПолноеИмя, "windows-1251");
	КонецЕсли;
	
	Если ДопПараметры.ТекущийФайл = ДопПараметры.КоличествоФайлов Тогда
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачалоПоискФайловШК_ЗаполнитьСписокТоваровШтрихкодов", ЭтаФорма, ДопПараметры), ДопПараметры.лКаталогОбменаШК, ДопПараметры.МаскаШК);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокТоваровШтрихкодовФрагмент(Знач МассивТоваров, Знач МассивШК, ИДТСД)
	
	Перем ФайлТовара, ФайлШК;
	
	Для каждого ФайлТовара Из МассивТоваров Цикл                           
		ЗаполнитьТЧТоварами(ФайлТовара.ПолноеИмя, ИДТСД);
	КонецЦикла;	
	
	Для каждого ФайлШК Из МассивШК Цикл
		ЗаполнитьТЧШтрихкодами(ФайлШК.полноеИмя, ИДТСД);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧТоварами(Файл, ИДТСД)
	
	тхт = Новый ТекстовыйДокумент();
	
	Если ТипОбмена = "1" Тогда		
		Если FTP = Неопределено Тогда
			FTP = ПодключитьсяКFTPСерверу();
		КонецЕсли;		
			
		FTP.УстановитьТекущийКаталог("/");
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
		FTP.Получить(Файл, ВременныйФайл);
		тхт.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма, Новый Структура("НовыеТовары_Файл, тхт, FTP, ИДТСД", Файл, тхт, FTP, ИДТСД)), ВременныйФайл, "windows-1251");		
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ВременныйФайл);   
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		тхт.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма), Файл, "windows-1251"); 		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧТоварами_Завершение(ДополнительныеПараметры)
	
	Для сч = 1 По ДополнительныеПараметры.Тхт.КоличествоСтрок() Цикл 
		ТекущаяСтрока = ДополнительныеПараметры.Тхт.ПолучитьСтроку(сч);
		
		Если ТекущаяСтрока = "" Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьТЧТоварамиСервер(ТекущаяСтрока, ДополнительныеПараметры.НовыеТовары_Файл, РазделительПути, ДополнительныеПараметры.ИДТСД);
		
		Если ДополнительныеПараметры.Тхт.КоличествоСтрок() = 0 Тогда			
			Если ТипОбмена = "1" Тогда
				ДополнительныеПараметры.FTP.Удалить(ДополнительныеПараметры.НовыеТовары_Файл);
			ИначеЕсли ТипОбмена = "0" Тогда			
				НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ДополнительныеПараметры.НовыеТовары_Файл);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТЧТоварамиСервер(ТекущаяСтрока, Файл, РазделительПути, ИДТСД)
	
	МассивПолей = СтрЗаменить(ТекущаяСтрока, ";", Символы.ПС);
	
	ГУИД 			  = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 1));
	НовоеНаименование = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 2));
	Цена 			  = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 3));
	Артибут1          = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 4));
	Артибут2          = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 5));
	Артибут3          = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 6));
	Артибут4          = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 7));
	Артибут5          = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 8));
	Артибут6          = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 9));
	Артибут7          = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 10));
	Артибут8          = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 11));
	Артибут9          = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 12));
	Артибут10         = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 13));
	Остаток           = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(МассивПолей, 14));
	
	ИдентификаторНоменклатуры = СокрЛП(Сред(ГУИД,4,36));
	ИдентификаторХарактеристики = СокрЛП(Сред(ГУИД,40,36));
	
	Попытка  // получение номенклатуры по идентификатору	
		Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторНоменклатуры));
		СтароеНаименование = ?(Товар.Наименование = "", "<Новый товар>", Товар.Наименование);     
		
		Если ИдентификаторХарактеристики <> "00000000-0000-0000-0000-000000000000" И ИдентификаторХарактеристики <> "" Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторХарактеристики));
		Иначе			
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	Исключение
		Товар = Справочники.Номенклатура.ПустаяСсылка();
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		СтароеНаименование = "<Новый товар>";	
	КонецПопытки;
		
	СтруктураСтроки = Новый Структура("Номенклатура, Характеристика, СтароеНаименование, НовоеНаименование, ИдентификаторТовара, ИмяФайлаТовара, ИДТСД", Товар, Характеристика, СтароеНаименование, НовоеНаименование, ГУИД, Файл, ИДТСД);
	СтрокаТЧ = НовыеТоварыШтрихкоды.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСтроки);
	СтрокаТЧ.attr_1  = Артибут1;
	СтрокаТЧ.attr_2  = Артибут2;
	СтрокаТЧ.attr_3  = Артибут3;
	СтрокаТЧ.attr_4  = Артибут4;
	СтрокаТЧ.attr_5  = Артибут5;
	СтрокаТЧ.attr_6  = Артибут6;
	СтрокаТЧ.attr_7  = Артибут7;
	СтрокаТЧ.attr_8  = Артибут8;
	СтрокаТЧ.attr_9  = Артибут9;
	СтрокаТЧ.attr_10 = Артибут10;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧШтрихкодами(Файл, ИДТСД)
	
	тхт = Новый ТекстовыйДокумент();
	
	Если ТипОбмена = "1" Тогда		
		Если FTP = Неопределено Тогда
			FTP = ПодключитьсяКFTPСерверу();
		КонецЕсли;		
			
		FTP.УстановитьТекущийКаталог("/");
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
		FTP.Получить(Файл, ВременныйФайл);
		тхт.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма, Новый Структура("НовыеТовары_ФайлШК, тхт, FTP, ИДТСД", Файл, тхт, FTP, ИДТСД)), ВременныйФайл, "windows-1251");				
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ВременныйФайл);
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		тхт.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма), Файл, "windows-1251");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧШтрихкодами_Завершение(ДополнительныеПараметры)	
	
	Для сч = 1 По ДополнительныеПараметры.Тхт.КоличествоСтрок() Цикл 
		ТекущаяСтрока = ДополнительныеПараметры.Тхт.ПолучитьСтроку(сч);
		
		Если ТекущаяСтрока = "" Тогда 
			Продолжить;
		КонецЕсли; 
		
		ЗаполнитьТЧШтрихкодамиСервер(ТекущаяСтрока, ДополнительныеПараметры.НовыеТовары_ФайлШК, РазделительПути); 	
		
		Если ДополнительныеПараметры.Тхт.КоличествоСтрок() = 0 Тогда			
			Если ТипОбмена = "1" Тогда
				ДополнительныеПараметры.FTP.Удалить(ДополнительныеПараметры.НовыеТовары_Файл);
			ИначеЕсли ТипОбмена = "0" Тогда			
				НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ДополнительныеПараметры.НовыеТовары_ФайлШК);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТЧШтрихкодамиСервер(ТекущаяСтрока, Файл, РазделительПути, ТСД_ЯндексДиск = Неопределено)
	
	Штрихкод                  = Лев(ТекущаяСтрока, Найти(ТекущаяСтрока, ";") - 1);
	СтрокаБезШК               = Сред(ТекущаяСтрока, СтрДлина(Штрихкод) + 2);
	Коэффициент               = (Лев(СтрокаБезШК, Найти(СтрокаБезШК, ";") - 1));
	КоэффициентЧисло          = Число(Коэффициент);
	СтрокаБезКоэффициента     = Сред(СтрокаБезШК, СтрДлина(Коэффициент) + 2);
	ЕдиницаИзмерения          = (Лев(СтрокаБезКоэффициента, Найти(СтрокаБезКоэффициента, ";") - 1));
	СтрокаБезЕдиницыИзмерения = Сред(СтрокаБезКоэффициента, СтрДлина(ЕдиницаИзмерения) + 2);
	
	Штрихкод = ОбработатьЭкранированиеСтроки(Штрихкод);
	
	ГУИД = (Лев(СтрокаБезЕдиницыИзмерения, Найти(СтрокаБезЕдиницыИзмерения, ";") - 1));
	
	ИдентификаторНоменклатуры   = СокрЛП(Сред(ГУИД, 4, 36));
	ИдентификаторХарактеристики = СокрЛП(Сред(ГУИД, 40, 36));
	
	Попытка  // получение номенклатуры по идентификатору	
		Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторНоменклатуры));
		
		Если ИдентификаторХарактеристики<>"00000000-0000-0000-0000-000000000000" И ИдентификаторХарактеристики <> "" Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторХарактеристики));
		Иначе			
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	Исключение
		Товар = Справочники.Номенклатура.ПустаяСсылка();
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецПопытки;  	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец"                     , Товар);
	Запрос.УстановитьПараметр("Характеристика"               , Характеристика);
	Запрос.УстановитьПараметр("ШК"                           , Штрихкод);
	Запрос.УстановитьПараметр("Коэффициент"                  , КоэффициентЧисло);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияНаименование" , ЕдиницаИзмерения);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК ЕстьВБД
	|ПОМЕСТИТЬ тШтрихкоды
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &ШК
	|	И Штрихкоды.Номенклатура = &Владелец
	|	И Штрихкоды.Характеристика = &Характеристика
	|	И ((Штрихкоды.Упаковка.ЕдиницаИзмерения.Наименование = &ЕдиницаИзмеренияНаименование И Штрихкоды.Упаковка.Числитель = &Коэффициент))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тШтрихкоды.ЕстьВБД
	|ИЗ
	|	тШтрихкоды КАК тШтрихкоды";
	
	Если КоэффициентЧисло = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"(Штрихкоды.Упаковка.ЕдиницаИзмерения.Наименование = &ЕдиницаИзмеренияНаименование И Штрихкоды.Упаковка.Числитель = &Коэффициент)", 
												"(Штрихкоды.Упаковка.ЕдиницаИзмерения.Наименование = &ЕдиницаИзмеренияНаименование И Штрихкоды.Упаковка.Числитель = &Коэффициент)
												| ИЛИ Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
	КонецЕсли;	
	
	Если Запрос.Выполнить().Пустой() Тогда		
		//определим текущий ИДТСД:
		Если Не ТипОбмена = "2" Тогда
			Если ТипОбмена = "1" Тогда
				РазделительПути = "/";
			КонецЕсли;
			
			СтрокаПоиска = РазделительПути + "out" + РазделительПути;
			НомерСимвола = СтрНайти(Файл,СтрокаПоиска, НаправлениеПоиска.СКонца);		
			ПутьКФайлу   = Лев(Файл, НомерСимвола - 1);
			НомерСимвола = СтрНайти(Файл,"DataMobile", НаправлениеПоиска.СКонца);
			
			Если НомерСимвола = СтрДлина(ПутьКФайлу) - 9 Тогда
				ИДТСД = "";
			Иначе
				СтрокаПоиска = РазделительПути + "DataMobile" + РазделительПути;
				НомерСимвола = СтрНайти(ПутьКФайлу,СтрокаПоиска,НаправлениеПоиска.СКонца);
			    ИДТСД        = Прав(ПутьКФайлу, СтрДлина(ПутьКФайлу) - НомерСимвола - 11); 
			КонецЕсли;
		Иначе		
			ИДТСД = ТСД_ЯндексДиск;
		КонецЕсли;	
		
		СтруктураПоискаПоТовару = Новый структура("ИдентификаторТовара, ИДТСД", ГУИД, ИДТСД);
		СтрокиПоиска = НовыеТоварыШтрихкоды.НайтиСтроки(СтруктураПоискаПоТовару);
		
		СтруктураШК = Новый Структура("Коэффициент, Штрихкод, НаименованиеУпаковки, ИмяФайлаШтрихкода, ИДТСД", КоэффициентЧисло, Штрихкод, ЕдиницаИзмерения, Файл, ИДТСД);
		
		Если СтрокиПоиска.Количество() > 0 Тогда			
			Если СтрокиПоиска[0].Штрихкод = "" Или СтрокиПоиска[0].Штрихкод = Штрихкод Тогда
				ЗаполнитьЗначенияСвойств(СтрокиПоиска[0], СтруктураШК);
			Иначе          
				СтрокаТаблицыНовая = НовыеТоварыШтрихкоды.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыНовая, СтрокиПоиска[0]);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыНовая, СтруктураШК);
			КонецЕсли;
			
		Иначе
			СтрокаТаблицыНовая = НовыеТоварыШтрихкоды.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыНовая, СтруктураШК);
			СтрокаТаблицыНовая.Номенклатура = Товар;
			СтрокаТаблицыНовая.Характеристика = Характеристика;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УдалениеТоваров_Завершение(ДополнительныеПараметры) Экспорт
	
	Для сч = 1 По ДополнительныеПараметры.тхт.КоличествоСтрок() Цикл 
		ТекущаяСтрока = ОбработатьЭкранированиеСтроки(ДополнительныеПараметры.тхт.ПолучитьСтроку(сч));
		СтрокаПоиска =  Найти(ТекущаяСтрока, ДополнительныеПараметры.НовоеНаименование);
		
		Если СтрокаПоиска > 0 Тогда
			ДополнительныеПараметры.тхт.УдалитьСтроку(сч);
		КонецЕсли;	
	КонецЦикла;
	
	Если ДополнительныеПараметры.тхт.КоличествоСтрок() = 0 Тогда
		FTP.Удалить(ДополнительныеПараметры.ИмяФайлаТовара);
	Иначе
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
		ДополнительныеПараметры.тхт.Записать(ВременныйФайл);		
		FTP.Записать(ВременныйФайл, ДополнительныеПараметры.ИмяФайлаТовара);
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ВременныйФайл);
	КонецЕсли; 
		    
КонецПроцедуры

&НаКлиенте
Процедура УдалениеШК_Завершение(ДополнительныеПараметры) Экспорт
	
	Для сч = 1 По ДополнительныеПараметры.тхт.КоличествоСтрок() Цикл 
		ТекущаяСтрока = ОбработатьЭкранированиеСтроки(ДополнительныеПараметры.тхт.ПолучитьСтроку(сч));
		СтрокаПоиска =  Найти(ТекущаяСтрока, ДополнительныеПараметры.Штрихкод);
		
		Если СтрокаПоиска > 0 Тогда
			ДополнительныеПараметры.тхт.УдалитьСтроку(сч);
		КонецЕсли;	
	КонецЦикла;
					
	Если ДополнительныеПараметры.тхт.КоличествоСтрок() = 0 Тогда
		FTP.Удалить(ДополнительныеПараметры.ИмяФайлаШтрихкода);
	Иначе
		ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
		ДополнительныеПараметры.тхт.Записать(ВременныйФайл);		
		FTP.Записать(ВременныйФайл, ДополнительныеПараметры.ИмяФайлаШтрихкода);
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ВременныйФайл);
	КонецЕсли;

    ОбновитьновыеТовары(Неопределено); 
		    
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьГУИДШК(ИДТСД, ГУИДСтарый, ГУИДНовый)
	
	Маска = "barcodes_*.dmU";
	
	Если ТипОбмена = "1" Тогда		
		Если FTP = Неопределено Тогда
			FTP = ПодключитьсяКFTPСерверу();
		КонецЕсли;		
			
		FTP.УстановитьТекущийКаталог("/");
		
		Если ИДТСД = "" Тогда
			КаталогИДТСД = "";
		Иначе
			КаталогИДТСД = "" + ИДТСД + "/";
		КонецЕсли;	
		
		ИмяКаталогаOUT = "DataMobile/" + КаталогИДТСД + "out/";
		
		МассивШК = FTP.НайтиФайлы(
		ИмяКаталогаOUT, // ищём в корневом каталоге
		Маска           // любые файлы (здесь можно задать маску)
		);
		
		Для каждого ФайлШК Из МассивШК Цикл
			тхт = Новый ТекстовыйДокумент();
			ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
			FTP.Получить(ФайлШК.ПолноеИмя, ВременныйФайл);
			тхт.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма), ВременныйФайл, "windows-1251");		
			НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ВременныйФайл);
			
			Для сч = 1 По тхт.КоличествоСтрок() Цикл 
				ТекущаяСтрока = тхт.ПолучитьСтроку(сч);
				СтрокаЗамены = стрЗаменить(текущаяСтрока, ГУИДСтарый,ГУИДНовый); 
				тхт.ЗаменитьСтроку(сч, СтрокаЗАмены);
				
				ВременныйФайл = FTPПолучитьИмяВременногоФайлаНаКлиенте();
				тхт.Записать(ВременныйФайл);		
				FTP.Записать(ВременныйФайл, ФайлШК.ПолноеИмя);
				НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлы_ОбработкаОповещения", ЭтаФорма), ВременныйФайл);	
			КонецЦикла;	
		КонецЦикла;	
		
	ИначеЕсли ТипОбмена = "0" Тогда		
		Если ИДТСД = "" Тогда
			ПутьПоиска = лКаталогОбмена+"DataMobile" + РазделительПути + "out" + РазделительПути;
		Иначе
			ПутьПоиска = лКаталогОбмена+"DataMobile" + РазделительПути + ИДТСД + РазделительПути + "out" + РазделительПути;
		КонецЕсли;  
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПроцедураВызова", "ЗаменитьГУИДШК"); 
		ДополнительныеПараметры.Вставить("ГУИДСтарый"     , ГУИДСтарый);
		ДополнительныеПараметры.Вставить("ГУИДНовый"      , ГУИДНовый);
		
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачатьПоискФайлов_ОбработкаОповещения", ЭтаФорма, ДополнительныеПараметры), ПутьПоиска, Маска);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьГУИДШК_ОбработатьМассивШК(МассивШК, ГУИДСтарый, ГУИДНовый)
	
	Для каждого ФайлШК Из МассивШК Цикл	
		тхт = Новый ТекстовыйДокумент();
		тхт.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтение_ОбработкаОповещения", ЭтаФорма), ФайлШК.ПолноеИмя, "windows-1251");
		
		Для сч = 1 По тхт.КоличествоСтрок() Цикл 
			ТекущаяСтрока = тхт.ПолучитьСтроку(сч);
			СтрокаЗамены = стрЗаменить(текущаяСтрока, ГУИДСтарый, ГУИДНовый); 
			тхт.ЗаменитьСтроку(сч, СтрокаЗАмены);
			тхт.Записать(ФайлШК.ПолноеИмя);
		КонецЦикла;
	КонецЦикла;    	
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьШтрихкодыНаКлиенте(ИДТСД, СтрокаТаблицы)
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.Штрихкод) Тогда		
		Если СтрДлина(СтрокаТаблицы.Штрихкод) <> 5 Тогда
			ПривязатьШтрихкодыНаСервере(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.Штрихкод, СтрокаТаблицы.НаименованиеУпаковки, СтрокаТаблицы.Коэффициент);
		КонецЕсли; 
	КонецЕсли;  	
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьШтрихкодыНаСервере(Номенклатура, Характеристика, Штрихкод, НаименованиеУпаковки, Коэффициент)
	
	МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Штрихкод       = Штрихкод; 
	МенеджерЗаписи.Номенклатура   = Номенклатура;
	МенеджерЗаписи.Характеристика = Характеристика;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковкиНоменклатуры.Ссылка
	|ПОМЕСТИТЬ тУпаковки
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Числитель = &КФ
	|	И УпаковкиНоменклатуры.ЕдиницаИзмерения.Наименование = &ИмяЕдиницы
	|	И УпаковкиНоменклатуры.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	тУпаковки.Ссылка
	|ИЗ
	|	тУпаковки КАК тУпаковки");
	
	Запрос.УстановитьПараметр("ИмяЕдиницы", НаименованиеУпаковки);
	Запрос.УстановитьПараметр("КФ", Коэффициент);
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	
	Если Не (Запрос.Выполнить().Пустой()) Тогда
		МенеджерЗаписи.Упаковка = Запрос.Выполнить().Выгрузить()[0];	
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЯчейкуПоКодуИлиШтрихкоду(Штрихкод)
	
	ТекущаяЯчейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	
	Попытка ТекущаяЯчейка = ПолучитьЯчейкуПоШтрихкоду(Штрихкод); Исключение КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ТекущаяЯчейка.Наименование) И Не ЗначениеЗаполнено(ТекущаяЯчейка.Код) Тогда
		ТекущаяЯчейка = Справочники.СкладскиеЯчейки.НайтиПоКоду(Штрихкод);	
	КонецЕсли;
	
	Возврат ТекущаяЯчейка;  	
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьЯчейкуПоШтрихкоду(Штрихкод10)
	
	Попытка
		Штрихкод16 = ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Штрихкод10);
		
		Если СтрДлина(Штрихкод16) < 32 Тогда
			
			Пока СтрДлина(Штрихкод16) < 32 Цикл
				Штрихкод16 = Строка("0")+Штрихкод16;
			КонецЦикла;
			
		КонецЕсли;
		
		ГУИД = Сред(Штрихкод16, 1,  8)
		+ "-" + Сред(Штрихкод16, 9,  4)
		+ "-" + Сред(Штрихкод16, 13, 4)
		+ "-" + Сред(Штрихкод16, 17, 4)
		+ "-" + Сред(Штрихкод16, 21, 12);
		
	Исключение
		
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();	
		
	КонецПопытки;
	
	Попытка
		
		СсылкаСкладскиеЯчейки = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));	
		
		Если СсылкаСкладскиеЯчейки.Код = "" Тогда
			Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
		Иначе
			Возврат СсылкаСкладскиеЯчейки;
		КонецЕсли;
		
	Исключение
		
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
		
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Знач ДесятичноеЧисло)
	
	Результат = ""; 
	
	Если ДесятичноеЧисло <> "" Тогда
		Пока Число(ДесятичноеЧисло) > 0 Цикл
			ОстатокОтДеления = ДесятичноеЧисло % 16;
			ДесятичноеЧисло  = (ДесятичноеЧисло - ОстатокОтДеления) / 16;
			Результат        = Сред("0123456789abcdef", ОстатокОтДеления + 1, 1) + Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РазобратьТэгиGS1(СтрокаСерии,ДатаПроизводства11,ДатаОкончанияСрокаГодности17,НомерСерии)
	
	СтрокиGS1 = СтрЗаменить(СтрокаСерии, "[", Символы.ПС);
	
	Для сч = 1 по 4 Цикл		
		ТекущийТэг = СтрПолучитьСтроку(СтрокиGS1, сч);
		Если ТекущийТэг = "" Тогда
			Продолжить;
		КонецЕсли;	
		
		// РАЗБОР GS1 ТЭГОВ 
		Если СтрНайти(ТекущийТэг, "11]") > 0 Тогда // Тэг 11 (Дата производства)		
			Тэг11 = Сред(ТекущийТэг,4);  	
			Год11 =  "20" + Лев(Тэг11,2);
			День11 = Прав(Тэг11,2);
			Месяц11 = Прав(Лев(Тэг11,4),2);
			ДатаПроизв = Год11+Месяц11+День11;
			ДатаПроизводства11 = Дата(ДатаПроизв);
		ИначеЕсли СтрНайти(ТекущийТэг, "17]") > 0 Тогда // Тэг 17 (Дата окончания срока годности) 			
			Тэг17 = Сред(ТекущийТэг,4);  	
			Год17 =  "20" + Лев(Тэг17,2);
			День17 = Прав(Тэг17,2);
			Месяц17 = Прав(Лев(Тэг17,4),2);
			ДатаОСГ = Год17+Месяц17+День17;
			ДатаОкончанияСрокаГодности17 = Дата(ДатаОСГ);
		ИначеЕсли СтрНайти(ТекущийТэг,"21]") > 0 Тогда // Тэг 21 (серийный номер)
			СерийныйНомер21 = Сред(ТекущийТэг,4);
			НомерСерии = СерийныйНомер21
		ИначеЕсли СтрНайти(ТекущийТэг,"10]") > 0 Тогда // Тэг 10 (партия)
			Партия10 = Сред(ТекущийТэг,4);
			НомерСерии = Партия10;
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьСерию(СтрокаСерии,ТекТовар,ТекШаблон,СоздаватьСерии)
	
	//Если ТекШаблон.ОпределениеСерии = 1 Тогда
	//	СерияПоДате = Истина;
	//Иначе
		СерияПоДате = Ложь;
	//КонецЕсли;
	
	ТекущаяСерияСсылка = Справочники.СерииНоменклатуры.ПустаяСсылка();
	СтрокаСерии = СтрЗаменить(СтрокаСерии,"[59]",";");
	Если СтрокаСерии <> "" и (ТекШаблон.ИспользованиеСерийниковПодбор<>0 или ТекШаблон.ИспользованиеСерийниковПриемка<>0) Тогда		
		ЭтоШтрихкодGS1 = Ложь;
		ДатаПроизводства11 = Дата(1,1,1);
		ДатаОкончанияСрокаГодности17 = Дата(1,1,1);
		НомерСерии = "";

		//Если ТекШаблон.ОпределениеСерии = 5 Тогда						
			Попытка РазобратьСтрокуСерииПоSNTypes(СтрокаСерии, ДатаПроизводства11, ДатаОкончанияСрокаГодности17, НомерСерии, ТекТовар); Исключение КонецПопытки;
			
		//ИначеЕсли Найти(СтрокаСерии,"[") > 0 Тогда //серии GS1-128 //[10]12345678[11]040818
		//	ЭтоШтрихкодGS1 = Истина;			
		//	РазобратьТэгиGS1(СтрокаСерии, ДатаПроизводства11, ДатаОкончанияСрокаГодности17, НомерСерии);
		//	
		//Иначе
		//	Если СерияПоДате Тогда //04.08.18
		//		Попытка 
		//			ДатаСерияГод   = Строка(Строка("20") + Строка(Сред(СтрокаСерии, 7, 2)));
		//			ДатаСерияМесяц = Сред(СтрокаСерии, 4, 2);
		//			ДатаСерияДень  = Лев(СтрокаСерии, 2);
		//			ДатаСерии      = Дата(Число(ДатаСерияГод), Число(ДатаСерияМесяц), Число(ДатаСерияДень));
		//			НомерСерии     = "";  
		//		Исключение  
		//			Возврат ТекущаяСерияСсылка;	
		//		КонецПопытки;
		//	Иначе
		//		НомерСерии = СтрокаСерии;
		//		ДатаСерии  = Дата(1,1,1);
		//	КонецЕсли; 		
		//КонецЕсли;
		
		ЗапросСерий = Новый Запрос;
		ЗапросСерий.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СерииНоменклатуры.Ссылка КАК Серия
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	(СерииНоменклатуры.Номер = &Номер И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства И СерииНоменклатуры.ГоденДо = &ГоденДо)
		|	И СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатурыПоиск";		
		
		//Если ЭтоШтрихкодGS1 Или ТекШаблон.ОпределениеСерии = 5 Тогда
			ЗапросСерий.УстановитьПараметр("ГоденДо"         , ДатаОкончанияСрокаГодности17);
			ЗапросСерий.УстановитьПараметр("Номер"           , НомерСерии);
			ЗапросСерий.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства11);
		//Иначе				
		//	Если СерияПоДате Тогда 
		//		ЗапросСерий.Текст = СтрЗаменить(ЗапросСерий.Текст, "СерииНоменклатуры.Номер = &Номер И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства И СерииНоменклатуры.ГоденДо = &ГоденДо", "СерииНоменклатуры.ГоденДо = &ГоденДо");
		//		ЗапросСерий.УстановитьПараметр("ГоденДо", ДатаСерии);
		//	Иначе
		//		ЗапросСерий.Текст = СтрЗаменить(ЗапросСерий.Текст, "СерииНоменклатуры.Номер = &Номер И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства И СерииНоменклатуры.ГоденДо = &ГоденДо", "СерииНоменклатуры.Номер = &Номер");	                                        	
		//		ЗапросСерий.УстановитьПараметр("Номер", НомерСерии);
		//	КонецЕсли;	
		//КонецЕсли;
		
		Если Не ТекТовар.ВладелецСерий.Пустая() Тогда
			ВидНоменклатурыПоиск = ТекТовар.ВладелецСерий;
		Иначе
			ВидНоменклатурыПоиск = ТекТовар.ВидНоменклатуры;
		КонецЕсли;
		
		ЗапросСерий.УстановитьПараметр("ВидНоменклатурыПоиск", ВидНоменклатурыПоиск);
		
		РезультатСерий = ЗапросСерий.Выполнить();
		
		Если Не РезультатСерий.Пустой() Тогда
			ВыборкаСерий = РезультатСерий.Выбрать();
			
			Пока ВыборкаСерий.Следующий() Цикл
				ТекущаяСерияСсылка = ВыборкаСерий.Серия;
				Прервать;
			КонецЦикла; 
			
		Иначе
			Если СоздаватьСерии Тогда	
				НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НоваяСерия.ВидНоменклатуры = ВидНоменклатурыПоиск;
				
				//Если ЭтоШтрихкодGS1 Или ТекШаблон.ОпределениеСерии = 5 Тогда
					НоваяСерия.Номер            = НомерСерии;
					НоваяСерия.ДатаПроизводства = ДатаПроизводства11;
					НоваяСерия.ГоденДо          = ДатаОкончанияСрокаГодности17; 
					
				//Иначе	
				//	Если СерияПоДате Тогда
				//		НоваяСерия.ГоденДо = ДатаСерии;
				//	Иначе
				//		НоваяСерия.Номер = НомерСерии;
				//	КонецЕсли;
				//КонецЕсли; 
				
				НоваяСерия.Записать();
				ТекущаяСерияСсылка = НоваяСерия.Ссылка;
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТекущаяСерияСсылка;		
	
КонецФункции

&НаСервере
Функция КодНоменклатурыЕГАИСПоPDF417(ЗначениеШК) 
	
	Сч = 0;
	Значение = СокрЛП(ЗначениеШК);
	
	Если СтрДлина(Значение) <> 68 Тогда 
		Сообщить("Код марки некорректной длины");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Сред(Значение, 4, 5) = "00000" Тогда
		Значение = Сред(Значение, 9, 11);
		Сч = 11;
	Иначе
		Значение = Сред(Значение, 8, 12);
		Сч = 12;
	КонецЕсли;
	
	Результат = 0;
	
	Для Поз = 1 По Сч Цикл		
		Множитель = 1;
		
		Для СчМ = 1 По Сч - Поз Цикл   
			Множитель = Множитель * 36;
		КонецЦикла;
		
		Результат = Результат + (Найти("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Сред(Значение, Поз, 1)) - 1) * Множитель;		
	КонецЦикла;
	
	Возврат Формат(Результат, "ЧЦ=19; ЧВН=; ЧГ=0");
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеИзСтроки(НоменклатураОбъект, ИмяРеквизита, НовоеЗначениеРеквизитаСтрокой, ТекстОшибки = "")
	
	Если ИмяРеквизита = "Код" Тогда
		ТипРеквизита = Новый ОписаниеТипов("Строка");
	Иначе	
		ТипРеквизита = Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита].Тип;	
	КонецЕсли; 
	
	Если ТипРеквизита = Новый ОписаниеТипов("Строка") ИЛИ ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
		НоменклатураОбъект[ИмяРеквизита] = НовоеЗначениеРеквизитаСтрокой;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("Булево") ИЛИ ТипРеквизита.СодержитТип(Тип("Булево")) Тогда
		Если НовоеЗначениеРеквизитаСтрокой = "Да" ИЛИ НовоеЗначениеРеквизитаСтрокой = "Нет" Тогда
			НоменклатураОбъект[ИмяРеквизита] = Булево(НовоеЗначениеРеквизитаСтрокой);
		Иначе
			ТекстОшибки = ТекстОшибки + "Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - возможны только строки Да или Нет" + Символы.ПС;
		КонецЕсли;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("Число") ИЛИ ТипРеквизита.СодержитТип(Тип("Число")) Тогда
		Попытка
			НоменклатураОбъект[ИмяРеквизита] = Число(СтрЗаменить(СтрЗаменить(НовоеЗначениеРеквизитаСтрокой, " ", ""), " ", ""));
		Исключение
			ТекстОшибки = ТекстОшибки + "Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - неизвестный формат числа" + Символы.ПС;
		КонецПопытки;
	ИначеЕсли ТипРеквизита = Новый ОписаниеТипов("Дата") ИЛИ ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
		Попытка
			НоменклатураОбъект[ИмяРеквизита] = Дата(НовоеЗначениеРеквизитаСтрокой);
		Исключение
			ТекстОшибки = ТекстОшибки + "Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - неизвестный формат даты" + Символы.ПС;
		КонецПопытки;
	Иначе
		
		// Типы Справочник и перечисление, варианты с составнымы типами или определяемым типом не рассматриваем
		МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(НоменклатураОбъект[ИмяРеквизита]));
		Если МетаданныеРеквизита <> Неопределено Тогда
			
			ПолноеИмя = МетаданныеРеквизита.ПолноеИмя();
			Если Лев(ПолноеИмя, 13) = "Перечисление." Тогда
				Попытка
					НоменклатураОбъект[ИмяРеквизита] = ПредопределенноеЗначение(ПолноеИмя + "." + НовоеЗначениеРеквизитаСтрокой);
				Исключение
					ТекстОшибки = ТекстОшибки + "Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - неизвестное значение перечисления" + Символы.ПС;
				КонецПопытки;
			ИначеЕсли Лев(ПолноеИмя, 11) = "Справочник." Тогда
				
				ЕстьОшибка = Ложь;
				Попытка
					ИмяСправочника = Прав(ПолноеИмя, СтрДлина(ПолноеИмя) - 11);
					Ссылка = Справочники[ИмяСправочника].НайтиПоНаименованию(НовоеЗначениеРеквизитаСтрокой, Истина);
					Если ЗначениеЗаполнено(Ссылка) Тогда
						НоменклатураОбъект[ИмяРеквизита] = Ссылка;
					Иначе
						ЕстьОшибка = Истина;
					КонецЕсли;
				Исключение
					ЕстьОшибка = Истина;
				КонецПопытки;
				
				Если ЕстьОшибка Тогда
					ТекстОшибки = ТекстОшибки + "Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - справочник не найден" + Символы.ПС;
				КонецЕсли;
				
			Иначе
				ТекстОшибки = ТекстОшибки + "Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - неизвестный тип реквизита" + Символы.ПС;
			КонецЕсли;
		Иначе
			ТекстОшибки = ТекстОшибки + "Не удалось установить значение для реквизита '" + ИмяРеквизита + "' - неизвестный тип реквизита" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияАтрибутов(Атрибуты, СтрокаТаблицы, ТекстОшибки = "")
	
	Попытка
		НоменклатураСсылка = СтрокаТаблицы.Номенклатура;
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	Исключение
		Возврат;
	КонецПопытки;
	
	ЕстьДопРеквизит = Ложь;
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТЗ.Колонки.Добавить("Значение");
	
	Для сч = 1 По 10 Цикл		
		НовоеЗначениеРеквизитаСтрокой = СокрЛП(СтрокаТаблицы["attr_" + сч]);	
		
		//// не устанавливать пустые значения
		//Если Не ЗначениеЗаполнено(НовоеЗначениеРеквизитаСтрокой) Тогда Продолжить; КонецЕсли;
		
		ИмяАтрибута = Атрибуты["ИмяАтрибута" + сч];
		Если Не ЗначениеЗаполнено(ИмяАтрибута) Тогда Продолжить; КонецЕсли;		
		
		Если ИмяАтрибута = "!!! Ячейки !!!" Или ИмяАтрибута = "!!! Основная ячейка !!!" Или ИмяАтрибута = "!!! Дополнительные ячейки !!!" Или ИмяАтрибута = "!!! Характеристики !!!" Тогда
			Продолжить; 
			
		ИначеЕсли Лев(ИмяАтрибута, 3) = "ДР_" Тогда			
			ЕстьДопРеквизит = Истина;
			
			ДопСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СтрЗаменить(ИмяАтрибута, "ДР_", ""));
			Значение = НоменклатураСсылка.ДополнительныеРеквизиты.Найти(ДопСвойство);
			
			НовСтр = ТЗ.Добавить();
			НовСтр.Свойство = ДопСвойство;
			ЗначениеПоСвойству = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(НовоеЗначениеРеквизитаСтрокой,,, НовСтр.Свойство);	
			
			Если ЗначениеЗаполнено(ЗначениеПоСвойству) Тогда
				НовСтр.Значение = ЗначениеПоСвойству;
			Иначе
				НовСтр.Значение = НовоеЗначениеРеквизитаСтрокой;	
			КонецЕсли;
			
		ИначеЕсли ИмяАтрибута <> "" И ЧистаяСтрока(Строка(НоменклатураОбъект[ИмяАтрибута])) <> НовоеЗначениеРеквизитаСтрокой Тогда			
			Если НовоеЗначениеРеквизитаСтрокой = "" Тогда
				НоменклатураОбъект[ИмяАтрибута] = "";
			Иначе
				УстановитьЗначениеИЗСтроки(НоменклатураОбъект, ИмяАтрибута, НовоеЗначениеРеквизитаСтрокой, ТекстОшибки);
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;
	
	Попытка
		НоменклатураОбъект.Записать();
	Исключение
		ТекстОшибки = ТекстОшибки + "Не удалось записать номенклатуру. " + ОписаниеОшибки() + Символы.ПС;
	КонецПопытки; 
	
	Если ЕстьДопРеквизит Тогда
		Модуль_УправлениеСвойствами = ОбщийМодуль("УправлениеСвойствами");
		Модуль_УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ТЗ);					 	 
	КонецЕсли;
			 
КонецПроцедуры

&НаСервере
Функция ПолучитьАтрибуты()
	
	СтруктураАтрибутов = Новый Структура;
	СтруктураАтрибутов.Вставить("ИмяАтрибута1" , Атрибут1);
	СтруктураАтрибутов.Вставить("ИмяАтрибута2" , Атрибут2);
	СтруктураАтрибутов.Вставить("ИмяАтрибута3" , Атрибут3);
	СтруктураАтрибутов.Вставить("ИмяАтрибута4" , Атрибут4);
	СтруктураАтрибутов.Вставить("ИмяАтрибута5" , Атрибут5);
	СтруктураАтрибутов.Вставить("ИмяАтрибута6" , Атрибут6);
	СтруктураАтрибутов.Вставить("ИмяАтрибута7" , Атрибут7);
	СтруктураАтрибутов.Вставить("ИмяАтрибута8" , Атрибут8);
	СтруктураАтрибутов.Вставить("ИмяАтрибута9" , Атрибут9);
	СтруктураАтрибутов.Вставить("ИмяАтрибута10", Атрибут10);
	
	Возврат СтруктураАтрибутов;	
	
КонецФункции

&НаСервере
Процедура ПередатьЗначенияДополнительныхРеквизитов(ДанныеТовары)
	
	Для каждого СтрокаТовара Из ДанныеТовары Цикл
			
		Если Лев(Атрибут1, 3) = "ДР_" Тогда			
			ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут1, "Атрибут1")
		КонецЕсли;
		
		Если Лев(Атрибут2, 3) = "ДР_" Тогда			
			ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут2, "Атрибут2")
		КонецЕсли;
		
		Если Лев(Атрибут3, 3) = "ДР_" Тогда			
			ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут3, "Атрибут3")
		КонецЕсли;
				
		Если Лев(Атрибут4, 3) = "ДР_" Тогда			
			ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут4, "Атрибут4")
		КонецЕсли;
		
		Если Лев(Атрибут5, 3) = "ДР_" Тогда			
			ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут5, "Атрибут5")
		КонецЕсли;
		
		Если Лев(Атрибут6, 3) = "ДР_" Тогда			
			ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут6, "Атрибут6")
		КонецЕсли;
		
		Если Лев(Атрибут7, 3) = "ДР_" Тогда			
			ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут7, "Атрибут7")
		КонецЕсли;
		
		Если Лев(Атрибут8, 3) = "ДР_" Тогда			
			ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут8, "Атрибут8")
		КонецЕсли;
		
		Если Лев(Атрибут9, 3) = "ДР_" Тогда			
			ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут9, "Атрибут9")
		КонецЕсли;
		
		Если Лев(Атрибут10, 3) = "ДР_" Тогда			
			ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут10, "Атрибут10")
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДополнительныйРеквизитВТЗ(СтрокаТовара, Атрибут, ИмяАтрибута)	
	ИмяАтрибутаДР = СтрЗаменить(Атрибут, "ДР_", "");			
	ДопСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяАтрибутаДР);
	Попытка Значение = СтрокаТовара.Ссылка.ДополнительныеРеквизиты.Найти(ДопСвойство).Значение; Исключение Значение = ""; КонецПопытки;
	СтрокаТовара[ИмяАтрибута] = Значение;
КонецПроцедуры

#КонецОбласти

#Область ДопФормы

&НаСервере
Процедура ИзменитьРеквизитыШапкиИзДополнительныхФорм(ОбъектДанных, ФормыJson, ТекШаблон)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СокрЛП(ФормыJson));	
	СтруктураДопФорм = ПрочитатьJSON(ЧтениеJSON);	
	ЧтениеJSON.Закрыть();
	
	Для каждого ДопФорма Из СтруктураДопФорм Цикл
		ПараметрыПоиска = Новый Структура("РеквизитШапки,ИД", 1, ДопФорма.form_id);
		НайденныеФормы = ДополнительныеФормы.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеФормы.Количество()= 0 Тогда Продолжить; КонецЕсли;		
		Если Не ЗначениеЗаполнено(НайденныеФормы[0].ЗаполняемыйРеквизит) Тогда Продолжить; КонецЕсли;
		Если Не НайденныеФормы[0].РежимВвод = 1 Тогда Продолжить; КонецЕсли;
		
		ТекущийТипДанных = НайденныеФормы[0].ТипДанных;
		ТекущийТипДанных = СтрЗаменить(ТекущийТипДанных,"Перечисления.","");
		ТекущийТипДанных = СтрЗаменить(ТекущийТипДанных,"Справочники.","");
		ТекущийТипДанных = СтрЗаменить(ТекущийТипДанных,"ПланыВидовХарактеристик.","");
		
		ЗначениеПодстановки = ДопФорма.value;
		Если Не (ТекущийТипДанных = "Текст" Или ТекущийТипДанных = "Число" Или ТекущийТипДанных = "Дата" Или ТекущийТипДанных = "Булево") Тогда
			Попытка
				Если Не Метаданные.Справочники.Найти(ТекущийТипДанных) = Неопределено Тогда
					ЗначениеПодстановки = Справочники[ТекущийТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПодстановки));
				ИначеЕсли Не Метаданные.ПланыВидовХарактеристик.Найти(ТекущийТипДанных) = Неопределено Тогда
					ЗначениеПодстановки = ПланыВидовХарактеристик[ТекущийТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПодстановки));
				ИначеЕсли Не Метаданные.Перечисления.Найти(ТекущийТипДанных) = Неопределено Тогда
					ЗначениеПодстановки = Перечисления[ТекущийТипДанных][ЗначениеПодстановки];
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли; 
		
		Если ТекущийТипДанных = "Дата" Тогда
			ФорматированнаяДата = ПолучитьДатуИзСтрокиПоФормату(ЗначениеПодстановки, ТекШаблон);
			
			Если Не ФорматированнаяДата = Неопределено Тогда
				ЗначениеПодстановки = ФорматированнаяДата;
			Иначе
				Если НЕ ТипЗнч(НайденныеФормы[0].ЗаполняемыйРеквизит) = Тип("Строка") Тогда
					Продолжить;
				КонецЕсли;						  
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущийТипДанных = "Число" Тогда
			ЗначениеПодстановки = Число(ЗначениеПодстановки);
		КонецЕсли;
		
		Если ТекущийТипДанных = "Булево" Тогда
			ЗначениеПодстановки = ?(ЗначениеПодстановки = "1", Истина, Ложь);
		КонецЕсли;			
		
		Попытка
			ОбъектДанных[НайденныеФормы[0].ЗаполняемыйРеквизит] = ЗначениеПодстановки;
		Исключение
			Сообщить("Не удалось записать значение реквизита """ + НайденныеФормы[0].ЗаполняемыйРеквизит + """");
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - добавляет в структуру поиска строки реквизит из доп. формы 
// с признаком "Использовать в поиске строк 1С"
//
&НаСервере
Процедура ДополнитьСтруктуруПоискаДопФормами(СтруктураПоиска, ФормыJson, ТекШаблон)
	
	Если ЗначениеЗаполнено(ФормыJson) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СокрЛП(ФормыJson));	
		СтруктураДФ = ПрочитатьJSON(ЧтениеJSON);	
		ЧтениеJSON.Закрыть();
		
		Для каждого ДопФорма Из СтруктураДФ Цикл
			Парам = Новый Структура;
			Парам.Вставить("РеквизитШапки", 0);
			Парам.Вставить("ИД", ДопФорма.form_id);
			НайденныеФормы = ДополнительныеФормы.НайтиСтроки(Парам);
			
			Если НайденныеФормы.Количество() = 0 Тогда Продолжить; КонецЕсли;
			
			ТекФорма = НайденныеФормы[0];
			
			Если Не ЗначениеЗаполнено(ТекФорма.ЗаполняемыйРеквизит) Тогда Продолжить; КонецЕсли;
			Если Не ТекФорма.ИспользоватьВПоискеСтрок Тогда Продолжить; КонецЕсли;
			
			ТекущийТипДанных = ТекФорма.ТипДанных;
			ТекущийТипДанных = СтрЗаменить(ТекущийТипДанных,"Перечисления.","");
			ТекущийТипДанных = СтрЗаменить(ТекущийТипДанных,"Справочники.","");
			ТекущийТипДанных = СтрЗаменить(ТекущийТипДанных,"ПланыВидовХарактеристик.","");
			
			ЗначениеПодстановки = ДопФорма.value;
			Если Не (ТекущийТипДанных = "Текст" Или ТекущийТипДанных = "Число" Или ТекущийТипДанных = "Дата" Или ТекущийТипДанных = "Булево") Тогда
				Попытка
					Если Не Метаданные.Справочники.Найти(ТекущийТипДанных) = Неопределено Тогда
						ЗначениеПодстановки = Справочники[ТекущийТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПодстановки));
					ИначеЕсли Не Метаданные.ПланыВидовХарактеристик.Найти(ТекущийТипДанных) = Неопределено Тогда
						ЗначениеПодстановки = ПланыВидовХарактеристик[ТекущийТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПодстановки));
					ИначеЕсли Не Метаданные.Перечисления.Найти(ТекущийТипДанных) = Неопределено Тогда
						ЗначениеПодстановки = Перечисления[ТекущийТипДанных][ЗначениеПодстановки];
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;  
			
			Если ТекущийТипДанных = "Дата" Тогда
				ФорматированнаяДата = ПолучитьДатуИзСтрокиПоФормату(ЗначениеПодстановки, ТекШаблон);
				Если Не ФорматированнаяДата = Неопределено Тогда
					ЗначениеПодстановки = ФорматированнаяДата;
				Иначе
					Если Не ТипЗнч(ТекФорма.ЗаполняемыйРеквизит) = Тип("Строка") Тогда
						Продолжить;
					КонецЕсли;						  
				КонецЕсли;
			КонецЕсли;   
			
			Если ТекущийТипДанных = "Число" Тогда
				ЗначениеПодстановки = Число(ЗначениеПодстановки);
			КонецЕсли;
			
			Если ТекущийТипДанных = "Булево" Тогда
				ЗначениеПодстановки = ?(ЗначениеПодстановки = "1", Истина, Ложь);
			КонецЕсли;
			
			Попытка
				СтруктураПоиска.Вставить(ТекФорма.ЗаполняемыйРеквизит, ЗначениеПодстановки);
			Исключение
				Сообщить("Не удалось добавить в структуру поиска строки реквизит табличной части """ + ТекФорма.ЗаполняемыйРеквизит + """");
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыТабличнойЧастиИзДополнительныхФорм(СтрокаТЧ, ФормыJson, ТекШаблон)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СокрЛП(ФормыJson));	
	СтруктураДФ = ПрочитатьJSON(ЧтениеJSON);	
	ЧтениеJSON.Закрыть();
	
	Для каждого ДопФорма Из СтруктураДФ Цикл
		Парам = Новый Структура;
		Парам.Вставить("РеквизитШапки", 0);
		Парам.Вставить("ИД", ДопФорма.form_id);
		НайденныеФормы = ДополнительныеФормы.НайтиСтроки(Парам);
		
		Если НайденныеФормы.Количество() = 0 Тогда Продолжить; КонецЕсли;
		
		ТекФорма = НайденныеФормы[0];
		
		Если Не ЗначениеЗаполнено(ТекФорма.ЗаполняемыйРеквизит) Тогда Продолжить; КонецЕсли;
		//Если ТекФорма.ИспользоватьВПоискеСтрок Тогда Продолжить; КонецЕсли;
		
		ТекущийТипДанных = ТекФорма.ТипДанных;
		ТекущийТипДанных = СтрЗаменить(ТекущийТипДанных,"Перечисления.","");
		ТекущийТипДанных = СтрЗаменить(ТекущийТипДанных,"Справочники.","");
		ТекущийТипДанных = СтрЗаменить(ТекущийТипДанных,"ПланыВидовХарактеристик.","");
		
		ЗначениеПодстановки = ДопФорма.value;
		Если Не (ТекущийТипДанных = "Текст" Или ТекущийТипДанных = "Число" Или ТекущийТипДанных = "Дата" Или ТекущийТипДанных = "Булево") Тогда
			Попытка
				Если Не Метаданные.Справочники.Найти(ТекущийТипДанных) = Неопределено Тогда
					ЗначениеПодстановки = Справочники[ТекущийТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПодстановки));
				ИначеЕсли Не Метаданные.ПланыВидовХарактеристик.Найти(ТекущийТипДанных) = Неопределено Тогда
					ЗначениеПодстановки = ПланыВидовХарактеристик[ТекущийТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеПодстановки));
				ИначеЕсли Не Метаданные.Перечисления.Найти(ТекущийТипДанных) = Неопределено Тогда
					ЗначениеПодстановки = Перечисления[ТекущийТипДанных][ЗначениеПодстановки];
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;  
		
		Если ТекущийТипДанных = "Дата" Тогда
			ФорматированнаяДата = ПолучитьДатуИзСтрокиПоФормату(ЗначениеПодстановки, ТекШаблон);
			Если Не ФорматированнаяДата = Неопределено Тогда
				ЗначениеПодстановки = ФорматированнаяДата;
			Иначе
				Если Не ТипЗнч(ТекФорма.ЗаполняемыйРеквизит) = Тип("Строка") Тогда
					Продолжить;
				КонецЕсли;						  
			КонецЕсли;
		КонецЕсли;   
		
		Если ТекущийТипДанных = "Число" Тогда
			ЗначениеПодстановки = Число(ЗначениеПодстановки);
		КонецЕсли;
		
		Если ТекущийТипДанных = "Булево" Тогда
			ЗначениеПодстановки = ?(ЗначениеПодстановки = "1", Истина, Ложь);
		КонецЕсли;
		
		Попытка
			СтрокаТЧ[ТекФорма.ЗаполняемыйРеквизит] = ЗначениеПодстановки;
		Исключение
			Сообщить("Не удалось записать значение реквизита табличной части """ + ТекФорма.ЗаполняемыйРеквизит + """");
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыФункции_Настройки

&НаКлиенте
Процедура НачалоПоискаКаталоговОбмена_Завершение(НайденныеФайлы, ДопПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() > 0 Тогда
		
		ДопПараметры.Вставить("МассивФайлов"      , НайденныеФайлы);
		ДопПараметры.Вставить("КоличествоФайлов"  , НайденныеФайлы.Количество());
		ДопПараметры.Вставить("ТекущийФайл"       , 1);
		ДопПараметры.Вставить("ПорядковыйНомерТСД", 1);
		ДопПараметры.Вставить("ТекущееИмяФайла"   , НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Имя);
		ДопПараметры.Вставить("ТекущийПутьФайла"  , НайденныеФайлы[ДопПараметры.ТекущийФайл-1].Путь);
		ФайлТСД = НайденныеФайлы[ДопПараметры.ТекущийФайл-1];
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоПроверкиЭтоКаталогКаталоговОбмена_Завершение",ЭтаФорма,ДопПараметры);
		ФайлТСД.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПроверкиЭтоКаталогКаталоговОбмена_Завершение(ЭтоКаталог, ДопПараметры) Экспорт
	
	СтруктураПоиска = Новый Структура;
	
	Если ЭтоКаталог Тогда
		Если ДопПараметры.ТекущийПутьФайла = ДопПараметры.КаталогОбмена Тогда
			Если НРег(ДопПараметры.ТекущееИмяФайла) = "base" 
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "prnmask" 
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "sounds" 
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "dmphotos" 
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "dmimages"
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "errors"
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "in"
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "out"
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "log"
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "appupdate"
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "others" 
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "frontol"
				Или НРег(ДопПараметры.ТекущееИмяФайла) = "null" Тогда
				
			Иначе				
				СтруктураПоиска.Вставить("ТСД", ДопПараметры.ТекущееИмяФайла);	
				МассивСтрок = СписокТСД.НайтиСтроки(СтруктураПоиска);
				
				Если МассивСтрок.Количество() = 0 Тогда
					СтрокаТСД = СписокТСД.Добавить();
					СтрокаТСД.ТСД         = ДопПараметры.ТекущееИмяФайла;
					СтрокаТСД.Номерстроки = ДопПараметры.ПорядковыйНомерТСД; 	
					ДопПараметры.ПорядковыйНомерТСД = ДопПараметры.ПорядковыйНомерТСД + 1;	
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	//переход к следующему файлу
	Если ДопПараметры.ТекущийФайл < ДопПараметры.КоличествоФайлов Тогда
		ПеревестиПараметрыНаСледующийФайл_КаталогиОбмена(ДопПараметры);
		ФайлТСД = ДопПараметры.МассивФайлов[ДопПараметры.ТекущийФайл - 1];
		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоПроверкиЭтоКаталогКаталоговОбмена_Завершение", ЭтаФорма,ДопПараметры);
		ФайлТСД.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
		
	Иначе
		Если СписокТСД.Количество() > 0 Тогда			
			ВосстановитьЗначениеТСДКлиент();
			ПрочитатьНастройкиТСД();			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура лКаталогОбменаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		лКаталогОбмена = Диалог.Каталог;
	КонецЕсли;	 
	
	лКаталогОбмена = СокрЛП(лКаталогОбмена) + ?(Прав(СокрЛП(лКаталогОбмена), 1) = РазделительПути, "", РазделительПути);
	
	лКаталогОбменаПриИзменении(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура лКаталогНастроекНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		лКаталогНастроек = Диалог.Каталог+РазделительПути;
	КонецЕсли;
	
	ПрочитатьНастройкиШаблонов();
	ПрочитатьНастройкиПользователей();
	ПрочитатьШаблоны(); 
	
КонецПроцедуры 

#КонецОбласти

#Область Автозагрузка

&НаКлиенте
Процедура ЗапуститьОбработчикОжиданияОбновление()
	
	Если ПериодичностьОбновления <> 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновленияФайловИзТСД", ПериодичностьОбновления * 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбработчикОжиданияОбновление()
	
	ОтключитьОбработчикОжидания("ОбработчикОжиданияОбновленияФайловИзТСД");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияОбновленияФайловИзТСД()
	
	Обновить("");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработчикОжиданияЗагрузка()
	
	Если ПериодичностьЗагрузки <> 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияЗагрузкиФайловИзТСД", ПериодичностьЗагрузки * 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбработчикОжиданияЗагрузка()
	
	ОтключитьОбработчикОжидания("ОбработчикОжиданияЗагрузкиФайловИзТСД");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияЗагрузкиФайловИзТСД()
	
	Загрузить("ЗагрузитьВсе");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыАвтозагрузки(ТекШаблон, ДокументБД)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Шаблон", ТекШаблон.ТипДокумента);
	
	СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураПоиска);			  
	
	Для каждого НовЗнач Из СтрокиПоиска Цикл
		Если НовЗнач.ТипЗнач = "Справочники" Тогда
			Элм = Справочники[НовЗнач.ИмяТаблицы].ПолучитьСсылку(Новый УникальныйИдентификатор(НовЗнач.ГУИД)); 
			ДокументБД[НовЗнач.Реквизит] = Элм; 	
			
		ИначеЕсли НовЗнач.ТипЗнач = "Строка" ИЛИ НовЗнач.ТипЗнач = "Число" ИЛИ НовЗнач.ТипЗнач = "Дата" Тогда
			ДокументБД[НовЗнач.Реквизит] = НовЗнач.ЗначениеРеквизита;
			
		ИначеЕсли НовЗнач.ТипЗнач = "Булево" Тогда
			Если НовЗнач.ЗначениеРеквизита = "Да" Или НовЗнач.ЗначениеРеквизита = Истина Тогда
				ДокументБД[НовЗнач.Реквизит] = Истина;
			ИначеЕсли НовЗнач.ЗначениеРеквизита = "Нет" Или НовЗнач.ЗначениеРеквизита = Ложь Тогда
				ДокументБД[НовЗнач.Реквизит] = Ложь;		
			КонецЕсли;
			
		ИначеЕсли НовЗнач.ТипЗнач = "Перечисления" Тогда			
			ЗначенияПеречисления = ВернутьЗначениеПеречисленияПоСинониму(НовЗнач.ЗначениеРеквизита, НовЗнач.ИмяТаблицы);				
			ДокументБД[НовЗнач.Реквизит] = ЗначенияПеречисления;				
		КонецЕсли; 
		
		Попытка
			Если НовЗнач.Реквизит = "Склад" Тогда
				ПерезаписьСклада = Ложь;
			КонецЕсли;
		Исключение 
			ПерезаписьСклада = Истина;
		КонецПопытки;
	КонецЦикла;
	
	ДокументБД.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозагрузкаРеквизитовПередУдалением(Элемент, Отказ)
	
	СтруктураУдаления = Новый Структура;
	СтруктураУдаления.Вставить("Шаблон"           , Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.Шаблон);
	СтруктураУдаления.Вставить("Реквизит"         , Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.Реквизит);
	СтруктураУдаления.Вставить("ЗначениеРеквизита", Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.ЗначениеРеквизита);
	
	СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураУдаления);
	
	Для каждого Стр Из СтрокиПоиска Цикл
		АвтозагрузкаРеквизитовОбщая.Удалить(Стр);	
	КонецЦикла; 
	
	СохранитьШаблоныЕслиКаталогиДоступны();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозагрузкаРеквизитовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Попытка
		Если Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные <> Неопределено Тогда
			Элемент.ТекущиеДанные.Шаблон = Элементы.ШаблоныДокументов.ТекущиеДанные.ТипДокумента;
			Элемент.ТекущиеДанные.ТипЗнач = ПолучитьТип(Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.ЗначениеРеквизита);
			
			Если Элемент.ТекущиеДанные.ТипЗнач = "Строка" Или Элемент.ТекущиеДанные.ТипЗнач = "Число" Или Элемент.ТекущиеДанные.ТипЗнач = "Дата" Или Элемент.ТекущиеДанные.ТипЗнач = "Булево" Тогда
				Элемент.ТекущиеДанные.ИмяТаблицы = "";	
			Иначе
				Элемент.ТекущиеДанные.ИмяТаблицы = ПолучитьИмяТаблицы(Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.ЗначениеРеквизита);
			КонецЕсли;	
			
			Попытка
				Элемент.ТекущиеДанные.ГУИД = Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.ЗначениеРеквизита.УникальныйИдентификатор();
			Исключение
				Элемент.ТекущиеДанные.ГУИД = "";			
			КонецПопытки;			
		КонецЕсли;	
	Исключение 
	КонецПопытки;
	
	Попытка
		Если НоваяСтрока Тогда 
			Если Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные <> Неопределено Тогда
				Ст = АвтозагрузкаРеквизитовОбщая.Добавить();	
				ЗаполнитьЗначенияСвойств(Ст, Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные);
			КонецЕсли;
		Иначе
			СтруктураУдаления = Новый Структура;
			СтруктураУдаления.Вставить("Шаблон", Элементы.АвтозагрузкаРеквизитов.ТекущиеДанные.Шаблон);
			
			СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураУдаления);
			
			Для каждого Стр Из СтрокиПоиска Цикл
				АвтозагрузкаРеквизитовОбщая.Удалить(Стр);	
			КонецЦикла;
			
			Для каждого Элм Из АвтозагрузкаРеквизитов Цикл
				НовСтр = АвтозагрузкаРеквизитовОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Элм);	
			КонецЦикла;
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	СохранитьШаблоныЕслиКаталогиДоступны();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТзАвтозгрузки()
	
	Возврат АвтозагрузкаРеквизитов.Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ОтборАвтозагрузки()
	
	АвтозагрузкаРеквизитов.Очистить();
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Шаблон", Элементы.ШаблоныДокументов.ТекущиеДанные.ТипДокумента);
	
	СтрокиПоиска = АвтозагрузкаРеквизитовОбщая.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Стр Из СтрокиПоиска Цикл
		НовСтр = АвтозагрузкаРеквизитов.Добавить();		
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);		
	КонецЦикла;		
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьНастройкиАвтозагрузки();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществования_Автозагрузки", ЭтаФорма);
	ФайлНастроек = Новый Файл(лКаталогНастроек+"v83_Autozagruzka.tab");
	ФайлНастроек.НачатьПроверкуСуществования(ОписаниеОповещения);
	Элементы.АвтозагрузкаРеквизитов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуСуществования_Автозагрузки(Существует, ДопПараметр) Экспорт
	
	Если Существует Тогда
		Попытка
			ФайлТЗ = Новый ТекстовыйДокумент;
			ФайлТЗ.НачатьЧтение(Новый ОписаниеОповещения("ПослеЧтенияАвтозагрузки", ЭтаФорма, Новый Структура("ФайлТЗ", ФайлТЗ)), лКаталогНастроек+"v83_Autozagruzka.tab");		
		Исключение		
		КонецПопытки;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияАвтозагрузки(ДопПараметр) Экспорт
	
	ЗагрузитьДанныеАвтозагрузки(ДопПараметр.ФайлТЗ.ПолучитьТекст());	
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьДанныеАвтозагрузки(Данные)
	
	ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), Данные).Получить();
	
	Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		АвтозагрузкаРеквизитовОбщая.Загрузить(ДанныеТЗ);
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

#Область ПечатьЦенниковИЭтикеток

&НаСервере
Функция ЗаполнитьФормуЦенников(тхт)
	
	ТабПечати = Новый ТаблицаЗначений;
	
	ТабПечати.Колонки.Добавить("Номенклатура");
	ТабПечати.Колонки.Добавить("Характеристика");	
	ТабПечати.Колонки.Добавить("Упаковка");
	ТабПечати.Колонки.Добавить("ШтрихКод");
	ТабПечати.Колонки.Добавить("КоличествоЭтикеток");
	ТабПечати.Колонки.Добавить("КоличествоЦенников");
	
	НомСтр = 2;
	
	Пока НомСтр <= тхт.КоличествоСтрок() Цикл
		СтрокаТаб = тхт.ПолучитьСтроку(НомСтр); //<ТипСтроки>;<ИдентификаторТовара>;<ШтрихкодТовара>;<СерийныйНомер>;<ШтрихКодЯчейки>;<Количество>;<УпаковочныйЛист>;<ИмяПользователя>;<НаименованиеТовара>;
		СтрокаТаб = СтрЗаменить(СтрокаТаб, ";", Символы.ПС);
		СтрокаТаб = СтрЗаменить(СтрокаТаб, "[59]", ";");
		
		СтрокаПодборИлиРазмещение = СтрПолучитьСтроку(СтрокаТаб, 1);
		
		Если СтрокаПодборИлиРазмещение = "S" Тогда
			ЭтоПодбор = Истина;
		Иначе	
			ЭтоПодбор = Ложь; 		
		КонецЕсли;		
		
		ИдентификаторТовара = СтрПолучитьСтроку(СтрокаТаб, 2);
		ШтрихкодТовара      = СтрПолучитьСтроку(СтрокаТаб, 3);
		НаименованиеТовара  = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(СтрокаТаб, 9));
		Номенклатура        = ПолучитьНоменклатуру(ИдентификаторТовара, ШтрихкодТовара, НаименованиеТовара);
		
		Если Номенклатура = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ТекТовар = Номенклатура.Получить(0).Значение;
		ТекХР    = Номенклатура.Получить(1).Значение;
		ТекЕИ    = Номенклатура.Получить(2).Значение;
		ТекКф    = Номенклатура.Получить(3).Значение;
		ТекУпак  = Номенклатура.Получить(4).Значение;
		
		СтрокаСерии = СтрПолучитьСтроку(СтрокаТаб, 4);
		
		Количество = СтрПолучитьСтроку(СтрокаТаб, 6);
		ТекЯчейка  = СтрПолучитьСтроку(СтрокаТаб, 6);
		Количество = СтрЗаменить(Количество, ", ", ".");
		Автор      = СтрПолучитьСтроку(СтрокаТаб, 8);
		
		НоваяЦена = СтрПолучитьСтроку(СтрокаТаб, 17);
		
		Попытка
			НоваяЦена = Число(НоваяЦена);
		Исключение
			НоваяЦена = 0;
		КонецПопытки;
		
		Попытка ТекКол = Число(Количество); Исключение ТекКол = 1; КонецПопытки;
		Попытка ТекКф  = ?(ТекУпак.Коэффициент = 0, 1, ТекУпак.Коэффициент); Исключение ТекКф = 1; КонецПопытки;	
		Попытка ТекКол = ТекКол/ТекКф; Исключение ТекКол = 1; КонецПопытки;
		
		НомСтр = НомСтр + 1;
		
		Попытка 
			ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекТовар, "ТипНоменклатуры"); 
		Исключение 
			ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар; 
		КонецПопытки; 
		
		Стр = ТабПечати.Добавить();
		Стр.Номенклатура 				 = ТекТовар;
		Стр.Характеристика 	 			 = ТекХР;
		Стр.Упаковка 					 = ТекЕИ;
		Стр.ШтрихКод 					 = ШтрихкодТовара;
		Стр.КоличествоЭтикеток 			 = Число(Количество);
		Стр.КоличествоЦенников 			 = Число(Количество);
	КонецЦикла;
	
	ТабПечати.Свернуть("Номенклатура, Характеристика, Упаковка, ШтрихКод", "КоличествоЭтикеток, КоличествоЦенников");
	
	МассивПечати = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТабПечати);
	
	Возврат Новый Структура("МассивПечати", МассивПечати);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьФормуЦенниковКлиент(ВыбранноеЗначение, Товары)
	
    Если Не ВыбранноеЗначение.Свойство("МассивПечати") Тогда Возврат; КонецЕсли;
	
	ТабТоваров = ВыбранноеЗначение.МассивПечати;
	
	Если Не ТипЗнч(ТабТоваров) = Тип("Массив") Тогда Возврат; КонецЕсли;
	
	Для каждого стр Из ТабТоваров Цикл
		нстр = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(нстр, стр); 
		
		нстр.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ОбщийМодуль(Имя)
	
	Попытка
		Модуль = ОбщегоНазначения.ОбщийМодуль(Имя);
	Исключение
		Модуль = Неопределено;
	КонецПопытки;
	
	Возврат Модуль;
	
КонецФункции

&НаСервере
Функция ПолучитьДатуИзСтрокиПоФормату(ДатаСтрокой, Шаблон)
	
	Если ЗначениеЗаполнено(Шаблон.ПравилаВводаСерииПриемка) Тогда
		ТекущаяМаска = ВРег(Шаблон.ПравилаВводаСерииПриемка);
	ИначеЕсли ЗначениеЗаполнено(Шаблон.ПравилаВводаСерииПодбор) Тогда
		ТекущаяМаска = ВРег(Шаблон.ПравилаВводаСерииПодбор);
	Иначе
		ТекущаяМаска = "DD.MM.YYYY";
	КонецЕсли;
	
	ПараметрДня    = ПолучитьМестоИколичествоСимволовПараметраДаты("D", ТекущаяМаска);
	ПараметрМесяца = ПолучитьМестоИколичествоСимволовПараметраДаты("M", ТекущаяМаска);
	ПараметрГода   = ПолучитьМестоИколичествоСимволовПараметраДаты("Y", ТекущаяМаска);
	День  = Сред(ДатаСтрокой,ПараметрДня.Начало, ПараметрДня.Количество); 
	Месяц = Сред(ДатаСтрокой,ПараметрМесяца.Начало, ПараметрМесяца.Количество); 
	Год   = ?(ПараметрГода.Количество = 2, "20", "") + Сред(ДатаСтрокой,ПараметрГода.Начало, ПараметрГода.Количество); 
	
	Попытка
		ФорматированнаяДата = Дата(Число(Год), Число(Месяц), Число(День));
		Возврат ФорматированнаяДата;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьМестоИколичествоСимволовПараметраДаты(Символ, Маска)
	
	МаскаИзменение = Маска;
	КоличествоСимволов = 0;
	ПараметрВремени = Новый Структура;
	ПараметрВремени.Вставить("Начало", 0);
	ПараметрВремени.Вставить("Количество", КоличествоСимволов);
	
	Пока Не СтрНайти(МаскаИзменение,Символ) = 0 Цикл
		КоличествоСимволов = КоличествоСимволов + 1;
		
		Если КоличествоСимволов = 1 Тогда
			ПараметрВремени.Вставить("Начало", СтрНайти(МаскаИзменение, Символ));
		КонецЕсли; 
		
		ПараметрВремени.Вставить("Количество", КоличествоСимволов);
		МаскаИзменение = Сред(МаскаИзменение, СтрНайти(МаскаИзменение, Символ) + 1);
	КонецЦикла;
	
	Возврат ПараметрВремени;
	
КонецФункции

&НаСервере
Процедура УдалитьСтрокиСНулевымКоличеством(Док, ТекШаблон, Об, ОчисткаНулевыхСтрок)
	
	ИмяДокумента = Док.Метаданные().Имя;
	
	Если ИмяДокумента = "ПересчетТоваров" И (ТекШаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор 
		Или ТекШаблон.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор) И (Об.ТабличнуюЧастьПриЗагрузкеПодбор = 2 Или ОчисткаНулевыхСтрок) Тогда	
		
		ИсходнаяТЗ = Док.Товары.Выгрузить();
		
		ЭтоАдресныйПересчет = СкладыСервер.ИспользоватьАдресноеХранение(Док.Склад, Док.Помещение, Док.Дата); // проверка на заполнение ячеек		
		
		МассивТоваров = Новый Массив();
		МассивЯчеек = Новый Массив();
		
		Для каждого Строка Из ИсходнаяТЗ Цикл
			Если Строка.КоличествоФакт > 0 Тогда
				Если МассивТоваров.Найти(Строка.Номенклатура) = Неопределено И Не Строка.Номенклатура.Пустая() Тогда
					МассивТоваров.Добавить(Строка.Номенклатура);
				КонецЕсли;							
				
				Если МассивЯчеек.Найти(Строка.Ячейка) = Неопределено И Не Строка.Ячейка.Пустая() Тогда
					МассивЯчеек.Добавить(Строка.Ячейка);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		ПромежуточнаяТЗ = Док.Товары.ВыгрузитьКолонки();
		
		Для каждого Строка Из ИсходнаяТЗ Цикл
			//заполнять отсканированными товарами И всеми ячейками
			Если (ТекШаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор И Не ТекШаблон.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор) Или Не ЭтоАдресныйПересчет Тогда 
				Если Строка.КоличествоФакт > 0 Или МассивТоваров.Найти(Строка.Номенклатура) <> Неопределено Тогда
					НоваяСтрока = ПромежуточнаяТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЕсли;
				//заполнять отсканированными товарами в отсканированных ячейках
			ИначеЕсли ТекШаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор И ТекШаблон.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор Тогда 
				Если Строка.КоличествоФакт > 0 Или (МассивТоваров.Найти(Строка.Номенклатура) <> Неопределено И МассивЯчеек.Найти(Строка.Ячейка) <> Неопределено) Тогда
					НоваяСтрока = ПромежуточнаяТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЕсли;				 
				//заполнять всеми товарами в отсканированных ячейках
			ИначеЕсли Не ТекШаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор И ТекШаблон.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор Тогда
				Если Строка.КоличествоФакт > 0 Или МассивЯчеек.Найти(Строка.Ячейка) <> Неопределено Тогда
					НоваяСтрока = ПромежуточнаяТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Док.Товары.Загрузить(ПромежуточнаяТЗ);		
	КонецЕсли;
	
	Попытка
		Если Об.ТабличнуюЧастьПриЗагрузкеПодбор = 3 И ИмяДокумента <> "ПересчетТоваров" Тогда	
			СтруктураДляПоиска = Новый Структура("Количество", 0); 
			ТабличнаяЧастьДок = Док[Об.ТЧПодбор]; 
			МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
			
			Для каждого Строка Из МассивПустыхСтрок Цикл 
				ТабличнаяЧастьДок.Удалить(Строка); 
			КонецЦикла; 	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОбновленияСтатуса()
	
	ПараметрыОбновленияСтатуса = Новый Структура;
	ПараметрыОбновленияСтатуса.Вставить("ОбновлятьДвижения", Истина);
	ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции");
	ПараметрыОбновленияСтатуса.Вставить("ТекущееСостояние");
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки");
	ПараметрыОбновленияСтатуса.Вставить("ДокументОбъект");
	ПараметрыОбновленияСтатуса.Вставить("ИдентификаторЗапроса");
	ПараметрыОбновленияСтатуса.Вставить("ФорматОбмена");
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

&НаСервереБезКонтекста
Функция СобратьПараметры()
	
	СтруктураПараметров = Новый Структура();
	Возврат СтруктураПараметров;
	
КонецФункции		

&НаСервереБезКонтекста
Процедура ЗаполнитьШапку(ПараметрыДокумента, тхт)
	
	Док           = ПараметрыДокумента.Док;
	Док.Дата      = ТекущаяДата();
	ДокМетаданные = Док.Метаданные();
	
	Попытка Док.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Док.Организация); Исключение; КонецПопытки;	
	Попытка Док.Заполнить(Неопределено); Исключение; КонецПопытки;
	
	Если ДокМетаданные.Имя = "ПеремещениеТоваров" Тогда	
		Попытка Док.ДатаРаспоряжения = ТекущаяДата(); Исключение; КонецПопытки;	
		Попытка Док.Статус = ДокМетаданные.Реквизиты.Статус.ЗначениеЗаполнения; Исключение; КонецПопытки;	
		Попытка ТекущийВидДеятельностиОрганизации = Справочники.Организации.ЗакупкаПодДеятельность(Док.ОрганизацияПолучатель, Док.СкладПолучатель, Док.Дата); Исключение; КонецПопытки;
		Попытка ЗакупкиСервер.ПроверитьКорректностьДеятельностиНДС(Док.ПеремещениеПодДеятельность, Док.Дата, ТекущийВидДеятельностиОрганизации); Исключение; КонецПопытки;
		Попытка
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров") Тогда
				Док.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
			КонецЕсли;
		Исключение; КонецПопытки;
		Попытка Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров; Исключение; КонецПопытки;
		Попытка Док.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным; Исключение; КонецПопытки;
		
	ИначеЕсли ДокМетаданные.Имя = "РеализацияТоваровУслуг" Тогда
		Попытка	Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту; Исключение; КонецПопытки;
		
	ИначеЕсли ДокМетаданные.Имя = "ПересчетТоваров" Тогда	
		Попытка Док.Статус = ДокМетаданные.Реквизиты.Статус.ЗначениеЗаполнения; Исключение; КонецПопытки;
		Попытка Док.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено; Исключение; КонецПопытки;
		
	ИначеЕсли ДокМетаданные.Имя = "ОтборРазмещениеТоваров" Тогда	
		Если ПараметрыДокумента.ИмяТЧПодбор = "ТоварыОтбор" И ПараметрыДокумента.ИмяТЧПриемка = "" Тогда
			Попытка Док.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор; Исключение; КонецПопытки;
		ИначеЕсли ПараметрыДокумента.ИмяТЧПодбор = "" И ПараметрыДокумента.ИмяТЧПриемка = "ТоварыРазмещение" Тогда	
			Попытка Док.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение; Исключение; КонецПопытки;
		ИначеЕсли ПараметрыДокумента.ИмяТЧПодбор = "ТоварыОтбор" И ПараметрыДокумента.ИмяТЧПриемка = "ТоварыРазмещение" Тогда
			Попытка Док.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение; Исключение; КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДока = тхт.ПолучитьСтроку(1); //<ВнутреннийИдентификаторДокумента>;<НомерДокумента>;<КомментарийДокумента>;<ИдентификаторДокумента>;<ТипДокумента>;<Контрагент>;
	СтрокаДока = СтрЗаменить(СтрокаДока,";",Символы.ПС);
	
	Если СокрЛП(СтрПолучитьСтроку(СтрокаДока,1)) = "doc_forms" Тогда
		СтрокаДока = Тхт.ПолучитьСтроку(2);
		СтрокаДока = СтрЗаменить(СтрокаДока,";",Символы.ПС);
	КонецЕсли;
	
	НомерДокумента = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока,2), "[59]", ";");
	КомментарийДокумента = ОбработатьЭкранированиеСтроки(СтрПолучитьСтроку(СтрокаДока, 3));
	КонтрагентДокумента = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока,6), "[59]", ";");
	ИдентификаторСклада = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока,8), "[59]", ";");
	ИдентификаторСклада2 = СтрЗаменить(СтрПолучитьСтроку(СтрокаДока,12), "[59]", ";");
	
	Попытка
		ЗагруженныйСклад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСклада));
		Если Не ЗагруженныйСклад = Док.Склад Тогда
			Док.Склад = ЗагруженныйСклад; 	
		КонецЕсли;	
	Исключение	
	КонецПопытки;
	
	Попытка
		Если ЗагруженныйСклад <> Док.СкладОтправитель Тогда
			Док.СкладОтправитель = ЗагруженныйСклад; 	
		КонецЕсли;
		
		ЗагруженныйСклад2 = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСклада2));
		
		Если ЗагруженныйСклад2 <> Док.СкладПолучатель Тогда
			Док.СкладПолучатель = ЗагруженныйСклад2; 	
		КонецЕсли;			
	Исключение			 
	КонецПопытки;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция НомерПоследнегоЧека()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ЧекККМ.НомерЧекаККМ) КАК НомерЧекаККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерЧекаККМ;
	Иначе
		Возврат 0;
	КонецЕсли; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПересчетТоваров(Док, ТекШаблон, тхт)
	
	ПоЯчейкам = (ТекШаблон.ИспользованиеЯчеекПодбор > 0);
	ТолькоСобранные = ТекШаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор;
	
	ЗаполнитьКоличествоПоУчету(Док,ПоЯчейкам);
	
	Возврат Истина;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаполнитьКоличествоПоУчету(Док,ПоЯчейкам)
	
	Запрос = Новый Запрос;
	
	Если СкладыСервер.ИспользоватьАдресноеХранение(Док.Склад, Док.Помещение, Док.Дата) Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК Ячейка,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
		|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0) КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 0) = 0
		|			ТОГДА ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0) * &ТекстЗапросаКоэффициентУпаковки
		|	КОНЕЦ КАК Количество,
		|	0 КАК КоличествоФакт,
		|	0 КАК КоличествоУпаковокФакт
		|ПОМЕСТИТЬ ВТ_ТаблицаТоваровСОстатками
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(
		|			&ДатаОстатков,
		|			Ячейка.Владелец = &Склад
		|				И Ячейка.Помещение = &Помещение) КАК ТоварыВЯчейкахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаТоваровСОстатками.Ячейка КАК Ячейка,
		|	ВТ_ТаблицаТоваровСОстатками.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаТоваровСОстатками.Характеристика КАК Характеристика,
		|	ВТ_ТаблицаТоваровСОстатками.Назначение КАК Назначение,
		|	ВТ_ТаблицаТоваровСОстатками.Упаковка КАК Упаковка,
		|	ВТ_ТаблицаТоваровСОстатками.Серия КАК Серия,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.Количество) КАК Количество,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоФакт) КАК КоличествоФакт,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт
		|ПОМЕСТИТЬ ТаблицаТоваровСОстатками
		|ИЗ
		|	ВТ_ТаблицаТоваровСОстатками КАК ВТ_ТаблицаТоваровСОстатками
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаТоваровСОстатками.Ячейка,
		|	ВТ_ТаблицаТоваровСОстатками.Назначение,
		|	ВТ_ТаблицаТоваровСОстатками.Номенклатура,
		|	ВТ_ТаблицаТоваровСОстатками.Серия,
		|	ВТ_ТаблицаТоваровСОстатками.Упаковка,
		|	ВТ_ТаблицаТоваровСОстатками.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваровСОстатками.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваровСОстатками.Характеристика КАК Характеристика,
		|	ТаблицаТоваровСОстатками.Назначение КАК Назначение,
		|	ТаблицаТоваровСОстатками.Упаковка КАК Упаковка,
		|	ТаблицаТоваровСОстатками.Ячейка КАК Ячейка,
		|	ТаблицаТоваровСОстатками.Серия КАК Серия,
		|	ТаблицаТоваровСОстатками.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТоваровСОстатками.Количество КАК Количество,
		|	ТаблицаТоваровСОстатками.КоличествоФакт КАК КоличествоФакт,
		|	ТаблицаТоваровСОстатками.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
		|	ЛОЖЬ КАК ИзлишекПорча
		|ИЗ
		|	ТаблицаТоваровСОстатками КАК ТаблицаТоваровСОстатками
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(ТаблицаТоваровСОстатками.Ячейка КАК Справочник.СкладскиеЯчейки).РабочийУчасток,
		|	ВЫРАЗИТЬ(ТаблицаТоваровСОстатками.Ячейка КАК Справочник.СкладскиеЯчейки).ПорядокОбхода,
		|	ВЫРАЗИТЬ(ТаблицаТоваровСОстатками.Ячейка КАК Справочник.СкладскиеЯчейки).Код,
		|	ТаблицаТоваровСОстатками.Серия.Номер,
		|	ТаблицаТоваровСОстатками.Серия.ГоденДо";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыВЯчейкахОстатки.Упаковка",
		"ТоварыВЯчейкахОстатки.Номенклатура"));
		
		Запрос.УстановитьПараметр("Склад"       , Док.Склад);
		Запрос.УстановитьПараметр("Помещение"   , Док.Помещение);
		Запрос.УстановитьПараметр("ДатаОстатков", Док.Дата);
		Запрос.УстановитьПараметр("МаксимальноВозможноеКоличествоСтрокВТЧ", 100000);
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.Назначение КАК Назначение,
		|	ТоварыНаСкладахОстатки.Серия КАК Серия,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК КоличествоУпаковок,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Количество,
		|	0 КАК КоличествоФакт,
		|	0 КАК КоличествоУпаковокФакт
		|ПОМЕСТИТЬ ВТ_ТаблицаТоваровСОстатками
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&ДатаОстатков,
		|			Склад = &Склад
		|				И Помещение = &Помещение) КАК ТоварыНаСкладахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаТоваровСОстатками.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаТоваровСОстатками.Характеристика КАК Характеристика,
		|	ВТ_ТаблицаТоваровСОстатками.Назначение КАК Назначение,
		|	ВТ_ТаблицаТоваровСОстатками.Серия КАК Серия,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.Количество) КАК Количество,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоФакт) КАК КоличествоФакт,
		|	СУММА(ВТ_ТаблицаТоваровСОстатками.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт
		|ПОМЕСТИТЬ ТаблицаТоваровСОстатками
		|ИЗ
		|	ВТ_ТаблицаТоваровСОстатками КАК ВТ_ТаблицаТоваровСОстатками
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаТоваровСОстатками.Серия,
		|	ВТ_ТаблицаТоваровСОстатками.Назначение,
		|	ВТ_ТаблицаТоваровСОстатками.Характеристика,
		|	ВТ_ТаблицаТоваровСОстатками.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваровСОстатками.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваровСОстатками.Характеристика КАК Характеристика,
		|	ТаблицаТоваровСОстатками.Назначение КАК Назначение,
		|	ТаблицаТоваровСОстатками.Серия КАК Серия,
		|	ТаблицаТоваровСОстатками.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТоваровСОстатками.Количество КАК Количество,
		|	ТаблицаТоваровСОстатками.КоличествоФакт КАК КоличествоФакт,
		|	ТаблицаТоваровСОстатками.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
		|	ЛОЖЬ КАК ИзлишекПорча
		|ИЗ
		|	ТаблицаТоваровСОстатками КАК ТаблицаТоваровСОстатками
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТоваровСОстатками.Серия.Номер,
		|	ТаблицаТоваровСОстатками.Серия.ГоденДо";		
		
		Запрос.УстановитьПараметр("Склад"       , Док.Склад);
		Запрос.УстановитьПараметр("Помещение"   , Док.Помещение);
		Запрос.УстановитьПараметр("ДатаОстатков", Док.Дата);
	КонецЕсли;	
	
	Док.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	
	СтруктураПолейТЧ = Новый Структура;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс", Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс", Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество" + Суффикс , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("УсловиеЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		Или СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма" , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма" , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма" , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("Цена"    , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму), "КоличествоУпаковок", СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("Количество"   , 0);
		СтруктураПолейТЧ.Вставить("Цена  "   , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки" , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки" , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"  , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"  , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа") Тогда
		СтруктураПолейТЧ.Вставить("СуммаСНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСверхЗаказа", 0);
		СтруктураПолейТЧ.Вставить("КодСтроки", 1);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Сумма"      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки" , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"   , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "  , 0);
		СтруктураПолейТЧ.Вставить("Количество" 			 , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Сумма"      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"   , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "  , 0);
		СтруктураПолейТЧ.Вставить("Количество" 		  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовОбязательна", СтруктураПараметровДействия) Тогда		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовОбязательна");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		Или СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда		
		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда		
		СтруктураПолейТЧ.Вставить("ИзлишекПорча");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда		
		СтруктураПолейТЧ.Вставить("ИзлишекПорча");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию") Тогда
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагиНедоборНеотгружаемыеИзлишкиНедостачи") Тогда
		СтруктураПолейТЧ.Вставить("ЕстьНедобор");
		СтруктураПолейТЧ.Вставить("ЕстьНеотгружаемые");
		СтруктураПолейТЧ.Вставить("ЕстьИзлишки");
		СтруктураПолейТЧ.Вставить("ЕстьНедостачи");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия) Тогда		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия) Тогда		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия) Тогда		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность"); 	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия) Тогда		
		СтруктураПолейТЧ.Вставить("Помещение");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия) Тогда 	
		СтруктураПолейТЧ.Вставить("Продавец");		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
			
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для каждого ИмяПоляСтатус Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство("Серия" + Суффикс) Тогда
					СтруктураПолейТЧ.Вставить("Серия" + Суффикс);
					СтруктураПолейТЧ.Вставить("Номенклатура" + Суффикс);
					СтруктураПолейТЧ.Вставить("Характеристика" + Суффикс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		СтруктураПолейТЧ.Вставить("Количество");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПередачуВЭксплуатацию") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ФизическоеЛицо");
		СтруктураПолейТЧ.Вставить("ПередачаВЭксплуатацию");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПриемка") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КодТНВЭД");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект)
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "НалогообложениеНДС") Тогда
		СтруктураЗаполненияЦены.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаСервере
Функция ВернутьЗначениеПеречисленияПоСинониму(ЗначениеСинонимаТекст, МойВидПеречисления)
	
	ЗначениеСинонимаТекст = Строка(ЗначениеСинонимаТекст);
	
	ЭлементПеречисления = Неопределено;
	
	Для каждого ТекЭлемент Из Метаданные.Перечисления[МойВидПеречисления].ЗначенияПеречисления Цикл
		Если ТекЭлемент.Синоним = ЗначениеСинонимаТекст Тогда
			ЭлементПеречисления = Перечисления[МойВидПеречисления][ТекЭлемент.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ЭлементПеречисления; // возвращаем значение перечисления или Неопределено
	
КонецФункции 

&НаКлиенте
Процедура ВыполнитьПостОбработку(ВидПостОбработки)
	
	Если ВидПостОбработки = "ВыгрузитьЯчейки" Тогда
		
		ВыгрузитьЯчейкиЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьШаблоны" Тогда
		
		ВыгрузитьШаблоныЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьТовары" Тогда
		
		ВыгрузитьТоварыЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьДокумент" Тогда
		
		ВыгрузитьДокументЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьПользователей" Тогда
		
		ВыгрузитьПользователейЕслиКаталогиДоступны();	
		
	ИначеЕсли ВидПостОбработки = "СохранитьШаблоны" Тогда
		
		СохранитьШаблоныЕслиКаталогиДоступны();	
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьЕИ" Тогда
		
		ВыгрузитьЕИЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьКлиентов" Тогда
		
		ВыгрузитьКлиентовЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьСклады" Тогда
		
		ВыгрузитьСкладыЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьКМ" Тогда
		
		ВыгрузитьКМЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьУпаковкиКМ" Тогда
		
		ВыгрузитьУпаковкиКМЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьТоварыЕГАИС" Тогда
		
		ВыгрузитьТоварыЕГАИСЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьМаркиЕГАИС" Тогда
		
		ВыгрузитьМаркиЕГАИСЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьДопШаги" Тогда
		
		ВыгрузитьДопШагиЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "ВыгрузитьТСД" Тогда
		
		ВыгрузитьТСДЕслиКаталогиДоступны();
		
	ИначеЕсли ВидПостОбработки = "Обновить" Тогда
		
		ОбновитьЕслиКаталогиДоступны();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяТаблицы(Значение)
	
	ИмяТаблицы = "";
	ИмяТаблицы = Значение.Метаданные().Имя;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Функция ПолучитьТип(Значение)
	
	Тип = "";
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Тип = "Справочники";
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Тип = "ПланыВидовХарактеристик";
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка")	Тогда
		Тип = "Строка";
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда	
		Тип = "Число"; 
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда	
		Тип = "Дата"; 	
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Тип = "Перечисления";
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Тип = "Булево";		
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчаниюПоНастройкеОбмена()
	
	СтруктураЗначенийПоУмолчанию = Новый Структура;
	СтруктураЗначенийПоУмолчанию.Вставить("FTPАдрес"				, "");
	СтруктураЗначенийПоУмолчанию.Вставить("FTPПорт"					, 21);
	СтруктураЗначенийПоУмолчанию.Вставить("FTPЛогин"				, "tsduser");
	СтруктураЗначенийПоУмолчанию.Вставить("FTPПароль"				, "123");
	СтруктураЗначенийПоУмолчанию.Вставить("ОчищатьСправочникиНаТСД"	, 0);
	
	Для каждого СтрокаНастройки Из СтруктураЗначенийПоУмолчанию Цикл
		ИмяРеквизита 	= СтрокаНастройки.Ключ;
		
		Если Не ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизита]) Тогда
			ЭтаФорма[ИмяРеквизита] = СтрокаНастройки.Значение;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

//Формирование qr кода
&НаСервере
Функция ВывестиQRКод(ДанныеПечати)
	
	QRСтрока = ДанныеПечати;
	
	Если Не ПустаяСтрока(QRСтрока) Тогда
		
		Модуль_ГенерацияШтрихкодаВызовСервера = ОбщийМодуль("ГенерацияШтрихкодаВызовСервера");
		Модуль_ГенерацияШтрихкода = ОбщийМодуль("ГенерацияШтрихкода");	
		Модуль_УправлениеПечатью = ОбщийМодуль("УправлениеПечатью");
		
		Попытка
			
			Попытка 
				ДанныеQRКода = Модуль_ГенерацияШтрихкода.ДанныеQRКода(QRСтрока, 0, 190);	
			Исключение
				Попытка
					ДанныеQRКода = Модуль_ГенерацияШтрихкодаВызовСервера.ДанныеQRКода(QRСтрока, 0, 190);
				Исключение
					ДанныеQRКода = Модуль_УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190);
				КонецПопытки;			
			КонецПопытки;
			
			Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
				КартинкаQRКода = Новый Картинка(ДанныеQRКода);
				Адрес = ПоместитьВоВременноеХранилище(КартинкаQRКода);
				ШтрихкодQR = Адрес;
				ШтрихкодQRТокен = Адрес;
			Иначе
				ТекстСообщения = "Не удалось сформировать QR-код.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		Исключение
			ТекстСообщения = "Не удалось сформировать QR-код.
			|По причине:"+ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	Иначе
			ТекстСообщения = "Не удалось сформировать QR-код.
			|Не указаны все данные для подключения.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	КонецЕсли;
	
	Возврат КартинкаQRКода;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоУпаковка(ТипУпаковки)
	
	Возврат ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
	Или ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	
КонецФункции 

&НаСервере
Функция СборРеквизитовДокумента(ВидДокумента)
	
	СобратьРеквизитыДокумента(ВидДокумента);
	
КонецФУнкции	

&НаСервереБезКонтекста
Функция СобратьРеквизитыДокумента(ВидДокумента)
	
	СписокЗн = Новый СписокЗначений;
	
	МетаДок = Метаданные.Документы.Найти(ВидДокумента);
	
	Если МетаДок = Неопределено Тогда
		Возврат СписокЗн;
	КонецЕсли;	 
	
	Для каждого МетаРеквизит Из МетаДок.Реквизиты Цикл
		СписокЗн.Добавить(МетаРеквизит.Имя);
	КонецЦикла;

	СписокЗн.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Возврат СписокЗн;
	
КонецФункции

// Процедура выбирает и ограничивает доступные для создания шаблона документы
//
// Параметры:
//  Список - список доступных для создания шаблона документов
//
&НаСервереБезКонтекста
Функция СобратьВидыДокументов()
	
	СписокВыбора = Новый СписокЗначений;
	
	Для каждого метаДок Из Метаданные.Документы Цикл
		Если ДокументПодходит(метаДок) Тогда
			СписокВыбора.Добавить(метаДок.Имя, метаДок.Синоним);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция СобратьВидыДокументовЕГАИС()
	
	СписокВыбора = Новый СписокЗначений;

	Для каждого метаДок Из Метаданные.Документы Цикл
		Если ДокументПодходитЕГАИС(метаДок) Тогда
			СписокВыбора.Добавить(метаДок.Имя, метаДок.Синоним);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции 

// Функция возвращает результат проверки документа на наличие табличной части "Товары"
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Булево> - Результат проверки.
//
&НаСервереБезКонтекста
Функция ДокументПодходит(МетаДок)
	
	Для каждого метаТЧ Из МетаДок.ТабличныеЧасти Цикл
		Для каждого метаРеквизитТЧ Из МетаТЧ.Реквизиты Цикл
			Если метаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ДокументПодходитЕГАИС(МетаДок)
	
	Для каждого метаТЧ Из МетаДок.ТабличныеЧасти Цикл
		Для каждого метаРеквизитТЧ Из МетаТЧ.Реквизиты Цикл
			Если МетаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС")) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

// Процедура выбирает и ограничивает доступные для создания шаблона табличные части документа
//
// Параметры:
//  ВидДокумента	- вид доступного для создания шаблона документа
//
//  Список 			- список доступных для создания шаблона табличных частей документа
//
&НаСервереБезКонтекста
Функция СобратьТабЧастиДокументов(ВидДокумента)
	
	СписокВыбора = Новый СписокЗначений;
	МетаДок = Метаданные.Документы.Найти(ВидДокумента);
	
	Если МетаДок = Неопределено Тогда
		Возврат СписокВыбора;
		
	Иначе
		Для каждого метаТЧ Из МетаДок.ТабличныеЧасти Цикл			
			Для каждого метаРеквизитТЧ Из МетаТЧ.Реквизиты Цикл				
				Если метаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
					СписокВыбора.Добавить(МетаТЧ.Имя);
					Прервать;
				КонецЕсли;				
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции	

&НаСервереБезКонтекста
Функция СобратьТабЧастиДокументовЕГАИС(ВидДокумента)
	
	СписокВыбора = Новый СписокЗначений;
	МетаДок = Метаданные.Документы.Найти(ВидДокумента);
	
	Если МетаДок = Неопределено Тогда
		Возврат СписокВыбора;
		
	Иначе	
		Для каждого метаТЧ Из МетаДок.ТабличныеЧасти Цикл		
			Для каждого метаРеквизитТЧ Из МетаТЧ.Реквизиты Цикл
				Если метаРеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС")) Тогда
					СписокВыбора.Добавить(МетаТЧ.Имя);
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции	

&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивЧисловыхПодстрокДМ(Знач Строка, Знач Разделитель = ",")
	
	Результат = Новый Массив;
	
	Позиция = Найти(Строка, Разделитель);
	
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		
		Если Не ПустаяСтрока(Подстрока) Тогда
			Попытка Результат.Добавить(Число(Подстрока)); Исключение КонецПопытки;
		КонецЕсли; 
		
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПустаяСтрока(Строка) Тогда
		Попытка Результат.Добавить(Число(Строка)); Исключение КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция убирает или заменяет лишние и критичные символы в строках
//
// Параметры:
//  ГрязнаяСтрока - строка с лишними и критичными символами
//
// Возвращаемое значение:
//  ЧистаяСтрока - строка без лишних и критичных символов
//
&НаСервереБезКонтекста
Функция ЧистаяСтрока(Знач ГрязнаяСтрока)
	
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, "'", "-");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, Символы.ВК, " ");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, Символы.ПС, "[~dm13]"); 
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, "¶", "[~dm13]");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, ";", "");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, Символ(26), "");
	ГрязнаяСтрока = СокрЛП(ГрязнаяСтрока);
	ЧистаяСтрока  = ИсключитьНеЧитаемыеСимволыИзСтроки(ГрязнаяСтрока, Истина, "");
	
	Возврат ЧистаяСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИсключитьНеЧитаемыеСимволыИзСтроки(Знач АнализируемыйТекст, ЗаменятьСимволы = Истина, СимволЗамены = " ")
	
	// Читаемые символы.
	Латиница 			= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	Кирилица 			= "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Греческие 			= "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψω";
	Цифры 				= "0123456789";
	СпециальныеСимволы 	= "~`!@#$%^&*(){}[]_-=+\|/*:;.<>?,№«» ";
	ДвойнаяКавычка 		= """";
	ОдинарнаяКавычка 	= "'";
	АпострофОбратный 	= "L9;";       	// КодСимвола 769. Обратный для символа на букве "Ё".
	АвторскоеПраво 		= "©";          // КодСимвола 169. "Copyright" - латинская буква C в окружности - авторское право.
	Зарезервировано		= "®";          // КодСимвола 174. "Registered" - латинская буква R в окружности - товарный знак.
	ТоварныйЗнак 		= "™";          // Верхний  индекс ТМ.
	ШирокоеТире 		= "—";          // КодСимвола 8212.
	ДенежныеСимволы 	= "¤¢€£¥";      // Денежная единица, Цент, Евро, Фунт стерлингов, Иена или юань.
	ДробныеСимволы 		= "½¼¾";        // Дроби: 1/2, 1/4, 3/4.
	СимволыСтепени 		= "¹²³";        // Степени: 1, 2, 3
	ПрочиеСимволы 		= "°±×÷Øƒµ" + Символ(167);    // Градус, Плюс/Минус, Знак умножения, Знак деления, Диаметр, Знак функции, Микро, Параграф.
	
	ЧитаемыеСимволы = Латиница + Кирилица + Цифры + СпециальныеСимволы + ШирокоеТире + ДвойнаяКавычка + ОдинарнаяКавычка;
	
	// Формирование результирующей строки.
	ИтоговаяСтрока = "";
	
	Для НомерСимвола = 1 По СтрДлина(АнализируемыйТекст) Цикл
		ТекущийСимвол = Сред(АнализируемыйТекст, НомерСимвола, 1);
		
		// Заменяемые символы. Системный набор значений: "Символы":
		Если ТекущийСимвол = Символы.ВК Или ТекущийСимвол = Символы.ВТаб Или ТекущийСимвол = Символы.НПП
			Или ТекущийСимвол = Символы.ПС Или ТекущийСимвол = Символы.ПФ Или ТекущийСимвол = Символы.Таб Тогда
			ТекущийСимвол = СимволЗамены;
		КонецЕсли;    
		
		Если КодСимвола(ТекущийСимвол) = 21 Тогда    // Параграф.
			ТекущийСимвол = Символ(167);
		КонецЕсли;  
		
		Если Найти(ЧитаемыеСимволы, ТекущийСимвол) > 0 Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол;
			
		Иначе
			Если ЗаменятьСимволы Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + СимволЗамены;
			Иначе
				// Сокращение строки на символ.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговаяСтрока; 
	
КонецФункции

&НаСервере
Функция ПроверитьДоступностьЯчеекДокумента(ИдШаблона,ВидДокументаВыгрузки,ИмяТЧДокументаПодбор,ИмяТЧДокументаПриемка)
	
	ЕстьРеквизитЯчейкаПодбор  = Ложь;
	ЕстьРеквизитЯчейкаПриемка = Ложь;
	
	ПараметрыОтбора = Новый Структура; 
	ПараметрыОтбора.Вставить("Код", ИдШаблона);
	Строки = ШаблоныДокументов.НайтиСтроки(ПараметрыОтбора);
	
	Попытка 
		Если ИмяТЧДокументаПодбор <> "" И Строки[0].ИспользованиеЯчеекПодбор <> 0 Тогда
			ЕстьРеквизитЯчейкаПодбор = Метаданные.Документы[ВидДокументаВыгрузки].ТабличныеЧасти[ИмяТЧДокументаПодбор].Реквизиты.Найти("Ячейка") <> Неопределено;
		КонецЕсли;	
		
		Если ИмяТЧДокументаПриемка <> "" И Строки[0].ИспользованиеЯчеекПриемка <> 0 Тогда
			ЕстьРеквизитЯчейкаПриемка = Метаданные.Документы[ВидДокументаВыгрузки].ТабличныеЧасти[ИмяТЧДокументаПриемка].Реквизиты.Найти("Ячейка") <> Неопределено;
		КонецЕсли;	
	Исключение		
	КонецПопытки;
	
	Возврат ЕстьРеквизитЯчейкаПодбор Или ЕстьРеквизитЯчейкаПриемка;
	
КонецФункции

&НаСервере
Функция ПроверитьДоступностьДопФормДокумента(ИдШаблона)
	
	ЕстьДопФормыПоШаблону = Ложь;
	
	ПараметрыОтбора = Новый Структура; 
	ПараметрыОтбора.Вставить("ИдентификаторШаблона", ИдШаблона);
	Строки = СвязиШаговШаблонов.НайтиСтроки(ПараметрыОтбора);
	
	Если Строки.Количество() > 0 Тогда
		ЕстьДопФормыПоШаблону = Истина;
	КонецЕсли;
	
	Возврат ЕстьДопФормыПоШаблону;
	
КонецФункции

&НаКлиенте
Функция DM_ПолучитьРазделительПути()
	
	РазделительПути = "\";  //Windows
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	
	Если ЭтоLinuxКлиент Тогда
		РазделительПути = "/"; // Linux
	КонецЕсли;	
	
	Возврат РазделительПути;
	
КонецФункции

&НаСервере
Функция ОпределитьТипДока(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Строка") Тогда
		Попытка
			Возврат ВыбранноеЗначение.Метаданные().Имя;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	Иначе	
		ТипДокумента = Метаданные.Документы.Найти(ВыбранноеЗначение);
		
		Если ТипДокумента <> Неопределено Тогда
			Возврат ТипДокумента.Имя;
		Иначе	
			Возврат Неопределено;			
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьНомерДокумента(ДокументВыгрузки)
	
	ЧистыйДокНомер = СтрЗаменить(ДокументВыгрузки.Номер, "\", ""); //убирает критичные символы в строке
	ЧистыйДокНомер = СтрЗаменить(ЧистыйДокНомер, "/", "");
	
	Возврат ЧистыйДокНомер;
	
КонецФункции

// Функция возвращает результат проверки доступности каталогов обмена
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Булево> - Результат проверки.
//
&НаКлиенте
Функция ПроверитьКаталоги(ВидПостОбработки) 
	
	Если ТипОбмена = "2" Тогда
		Если Не ВидПостОбработки = "СохранитьШаблоны" Тогда
			ПроверитьСвязьЯндексДискНажатие(Неопределено); 
		КонецЕсли;	
		
		ВыполнитьПостОбработку(ВидПостОбработки);
		Возврат Истина;
	КонецЕсли;	
	
	Если (лКаталогОбмена = "") И (FTPАдрес = "") И (лКаталогНастроек = "") Тогда
		ПоказатьСообщениеПользователю("Не указаны каталоги обмена и настроек!");
		Возврат Ложь;
	КонецЕсли;
	
	Если (лКаталогОбмена = "") И (FTPАдрес = "") Тогда
		ПоказатьСообщениеПользователю("Не указан каталог обмена с ТСД!");
		Возврат Ложь; 
		
	ИначеЕсли лКаталогНастроек = "" Тогда
		ПоказатьСообщениеПользователю("Не указан каталог хранения настроек!");
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТипОбмена = "1" Тогда
		
		Если Не СоединениеСFTPКорректно Тогда
			СообщитьОНеудачномСоединенииСFTP();
			Возврат Ложь;
		КонецЕсли;
		
		КаталогиДоступныFTP();
		
		Если Не КаталогFTPДоступен Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		ВыполнитьПостОбработку(ВидПостОбработки);
		
	ИначеЕсли ТипОбмена = "0" Тогда
		
		МассивТСД = Новый Массив;			
		
		ТД = Элементы.СписокТСД.ТекущиеДанные;
		
		Если ТД = Неопределено Тогда
			КаталогИДТСД = РазделительПути;
			МассивТСД.Добавить("");
		Иначе
			Если ИДТСД = "" Тогда
				КаталогИДТСД = РазделительПути;
			Иначе	
				КаталогИДТСД = РазделительПути + ИДТСД + РазделительПути;
			КонецЕсли;	
			
			МассивТСД.Добавить(СокрЛП(ТД.ТСД));
		КонецЕсли;	 	 
		
		ТекКаталог = лКаталогОбмена + МассивТСД[0];
		
		ИмяКаталогаIN = лКаталогОбмена + "DataMobile" + КаталогИДТСД + "in" + РазделительПути;
		ИмяКаталогаOUT = лКаталогОбмена + "DataMobile" + КаталогИДТСД + "out" + РазделительПути;
		ИмяКаталогаLOG = лКаталогОбмена + "DataMobile" + КаталогИДТСД + "log" + РазделительПути;			
		
		ПараметрыВыгрузки = Новый Структура();
		
		ПараметрыВыгрузки.Вставить("ВидПостОбработки", ВидПостОбработки);
		ПараметрыВыгрузки.Вставить("МассивТСД", МассивТСД);
		ПараметрыВыгрузки.Вставить("ВсегоТСД", МассивТСД.Количество());
		
		ПараметрыВыгрузки.Вставить("ТекущийКаталогПроверки", "in");
		ПараметрыВыгрузки.Вставить("ТекущийКаталогСоздания", "in");
		ПараметрыВыгрузки.Вставить("ТекущийТСД", 1);
		ПараметрыВыгрузки.Вставить("ТекКаталог", ТекКаталог);
		
		
		ПараметрыВыгрузки.Вставить("ИмяКаталогаIN", ИмяКаталогаIN);
		ПараметрыВыгрузки.Вставить("ИмяКаталогаOUT", ИмяКаталогаOUT);
		ПараметрыВыгрузки.Вставить("ИмяКаталогаLOG", ИмяКаталогаLOG);
		
		ПараметрыВыгрузки.Вставить("КаталогНаДискеINСуществует", Ложь);
		ПараметрыВыгрузки.Вставить("КаталогНаДискеOUTСуществует", Ложь);
		ПараметрыВыгрузки.Вставить("КаталогНаДискеLOGСуществует", Ложь);
		
		ПараметрыВыгрузки.Вставить("ЗадаватьВопрос", Истина);
		ПараметрыВыгрузки.Вставить("ВсеКаталогиЕсть", Истина);
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталоговОбмена_Завершение", ЭтаФорма, ПараметрыВыгрузки);
		КаталогНаДискеIN = Новый Файл(ИмяКаталогаIN);
		КаталогНаДискеIN.НачатьПроверкуСуществования(ОписаниеОповещения);
		
	КонецЕсли;		
	
	КаталогНаДискеНастройки = Новый Файл(лКаталогНастроек);
	КаталогНаДискеНастройки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("НачатьПроверкуСуществованияКаталогаНастроек_Завершение", ЭтаФорма, Новый Структура("ИмяКаталогаНастроек", лКаталогНастроек)));
	
КонецФункции

&НаКлиенте
Процедура УстановитьКомпонентуЗавершение(ДополнительныеПараметры) Экспорт
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не удалось подключить расширение работы с файлами.
		|Использование обработки в веб режиме не возможно. Перезапустите обработку.'"));
	Иначе
		ПрочитатьШаблоны();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьТипыДока()
	
	Попытка Элементы.ДокументыВыгрузки.ОграничениеТипа = Новый ОписаниеТипов(Создатьмассив()); Исключение КонецПопытки;
	
КонецПроцедуры	

&НаСервере
Функция СоздатьМассив()
	
	МассивТипов = Новый Массив; 
	
	Для каждого ДокМ Из Метаданные.Документы Цикл
		Если ШаблоныДокументов.НайтиСтроки(Новый Структура("ВидДокумента", ДокМ.Имя)).Количество() > 0 Тогда
			Массивтипов.Добавить(Тип("ДокументСсылка." + ДокМ.Имя));
		КонецЕсли;			
	КонецЦикла;  
	
	Возврат МассивТипов;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьМассивРеквизитов()
	
	МассивРеквизитов = Новый Массив;  
	
	Для каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		МассивРеквизитов.Добавить(Реквизит.Синоним);			
	КонецЦикла; 
	
	Возврат МассивРеквизитов;
	
КонецФункции

&НаСервере
Функция ДатуВTimestamp(пДата = Неопределено)
	
	РезультатДата = УниверсальноеВремя(пДата, ЧасовойПояс());
	Возврат Формат(Число(?(ТипЗнч(РезультатДата) = Тип("Дата"), РезультатДата, ТекущаяДата()) - Дата("19700101")), "ЧН=0; ЧГ=0");
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщениеПользователю(ТестСообщения, Очищать = Истина)        
	
	Если Очищать Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТестСообщения;
	Сообщение.Сообщить(); 
	
КонецПроцедуры		

&НаСервереБезКонтекста
Функция ОбработатьЭкранированиеСтроки(ВходящаяСтрока) 
	
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "[59]", ";");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "[~dm10]", " ");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "[~dm13]", Символы.ПС);
	
	Возврат ВходящаяСтрока;
	
КонецФункции

#КонецОбласти

#Область СозданияЗаписейВПулеКодовМаркировкеПоПолномуКМ

Функция СформироватьМассивПараметровПоПолномуКМ(ИсходныйДокумент, ТабДокТСД)
	
	ТЗСобранныеДанныеМарки = ТабДокТСД.Скопировать();
	ТЗСобранныеДанныеМарки.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Марка, ЦРПТМарка_Длина, УпаковочныйЛист, KM_RawMrc, KM_TNVED, СерияСсылка, ПолныйКодМаркировки", "Количество");
	
	МассивПолныйКМ = Новый Массив;
	
	ПараметрыДокументаТСД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент.Ссылка, "Организация");
	
	Модуь_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
	Модуь_ШтрихкодированиеИС = ОбщийМодуль("ШтрихкодированиеИС");
	
	
	Для каждого СтрокаДока Из ТЗСобранныеДанныеМарки Цикл
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ПолныйКодМаркировки = СтрокаДока.ПолныйКодМаркировки;
		
		Если Не ЗначениеЗаполнено(СтрокаДока.УпаковочныйЛист) И ЗначениеЗаполнено(СтрокаДока.Марка) И ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда						
			ВидПродукцииИС = Модуь_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(СтрокаДока.Номенклатура.ОсобенностьУчета);
			
			СтруктураПоКМ = Новый Структура;
			СтруктураПоКМ.Вставить("Штрихкод"				, ПолныйКодМаркировки);
			СтруктураПоКМ.Вставить("Количество" 			, 1);
			СтруктураПоКМ.Вставить("ВидПродукцииИС" 		, ВидПродукцииИС);
			СтруктураПоКМ.Вставить("ПроверяемыйДокумент" 	, ИсходныйДокумент.Ссылка);
			СтруктураПоКМ.Вставить("Организация" 			, ПараметрыДокументаТСД.Организация);
			СтруктураПоКМ.Вставить("Контрагент" 			, Неопределено);
			СтруктураПоКМ.Вставить("ПараметрыСканирования" 	, Модуь_ШтрихкодированиеИС.ПараметрыСканирования(ИсходныйДокумент.Ссылка, Неопределено, ВидПродукцииИС));

			МассивПолныйКМ.Добавить(СтруктураПоКМ);			
		КонецЕсли;		                 
	КонецЦикла;
	
	Возврат МассивПолныйКМ;
	
КонецФункции

//процедура с обработки ПроверкаИПодборПродукцииИСМП с формы ПроверкаИПодбор
&НаСервере
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры)
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидМаркируемойПродукции = ДанныеШтрихкода.ВидПродукцииИС;
	
	ЗагрузкаДанныхТСД = Неопределено;
	
	ПараметрыСканированияКМ = ПараметрыСканированияКодовМаркировки(ДанныеШтрихкода);

	Модуь_РазборКодаМаркировкиИССлужебный = ОбщийМодуль("РазборКодаМаркировкиИССлужебный");
	
	ДанныеРазбора = Модуь_РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(ДанныеШтрихкода.Штрихкод, ВидМаркируемойПродукции); 
	
	Если ДанныеРазбора = Неопределено Тогда
		НормализованныйШтрихкод = ДанныеШтрихкода.Штрихкод;
	Иначе
		НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	КонецЕсли;
	
	//ПроверкаИПодборПродукцииИСМПКлиентСервер.РазрешитьСопоставлениеНоменклатурыДляДокументаПриобретения(
	//ЭтотОбъект, ПараметрыСканированияКМ);
	
	Модуь_ШтрихкодированиеИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");
	
	Модуь_ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	
	Модуь_ШтрихкодированиеИСВызовСервера = ОбщийМодуль("ШтрихкодированиеИСВызовСервера");
	
	РезультатОбработкиШтрихкода = Модуь_ШтрихкодированиеИСВызовСервера.ОбработатьШтрихкод(
		ДанныеШтрихкода, ПараметрыСканированияКМ, Неопределено, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСканированияКодовМаркировки(ДанныеШтрихкода)
	
	ДоступнаПечатьЭтикеток 	= Ложь;
	ВидМаркируемойПродукции = ДанныеШтрихкода.ВидПродукцииИС;
	ПроверяемыйДокумент    	= ДанныеШтрихкода.ПроверяемыйДокумент;
	Организация    			= ДанныеШтрихкода.Организация;
	Контрагент              = ДанныеШтрихкода.Контрагент;
	ПараметрыСканирования   = ДанныеШтрихкода.ПараметрыСканирования;
    
    ЭтоМаркировкаИСМП = ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП");
    
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукции);
	
	ДанныеВыбора = Неопределено;
	
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки                          = Истина;
	ПараметрыСканирования.КэшМаркируемойПродукции                            = Неопределено;
	ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции                 = ДанныеВыбора;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции     = Истина;
	ПараметрыСканирования.ПроверятьДублиКодовМаркировки                      = "Элементы";
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                                = Истина;
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева      = Истина;
	ПараметрыСканирования.ДоступнаПечатьЭтикеток                             = ДоступнаПечатьЭтикеток;
	ПараметрыСканирования.КонтрольУникальностиКодовМаркировки                = Ложь;
	ПараметрыСканирования.СсылкаНаОбъект                                     = ПроверяемыйДокумент;
	ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки                 = Ложь;
	
	ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок = ПараметрыСканирования.ПоддерживаютсяОперацииАгрегации;
	
	Модуь_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	Если ДоступнаПечатьЭтикеток Тогда
		Если Модуь_ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ВидМаркируемойПродукции) Тогда
			ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию = ПредопределенноеЗначение(
			"Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован");
		Иначе
			ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию = ПредопределенноеЗначение(
			"Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен");
		КонецЕсли;
	КонецЕсли;
	
	КонтрольСоставаУпаковок = Истина;
	
	ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП = КонтрольСоставаУпаковок
	И ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП;
	
	ПараметрыПроверкиКодовМаркировки = СформироватьПараметрыПроверкиКодовМаркировки(ПроверяемыйДокумент, Организация, Контрагент);	
	
	//
	ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП 				= Ложь;
	ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП 							= Ложь;
	ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП 			= Истина;
	ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП 	= Ложь;
	ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП 				= Ложь;
	//
	
    Если ЭтоМаркировкаИСМП Тогда
		ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ 	= Истина;
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП	= Истина;
		
		Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности") Тогда
			ПараметрыСканирования.ЗаполнятьСрокГодности = Ложь;	
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС") Тогда
			ПараметрыСканирования.ЗаполнятьДанныеВЕТИС = Ложь;	
		КонецЕсли;
	КонецЕсли;
    
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки Тогда
		ПараметрыСканирования.Владелец                                    = ПараметрыПроверкиКодовМаркировки.Владелец;
		ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП = Истина;
	Иначе
		ПараметрыСканирования.Владелец = Неопределено;
		ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП = Ложь;
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки Тогда
		ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП = Истина;
	Иначе
		ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП = Ложь;
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП
		Или ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки Тогда
		ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Истина;
	КонецЕсли;
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаСервере
функция СформироватьПараметрыПроверкиКодовМаркировки(ПроверяемыйДокумент, Организация, Контрагент)
	
	РежимПодбораСуществующихУпаковок = Истина;
	
	Модуь_ЭлектронноеВзаимодействиеИСМП = ОбщийМодуль("ЭлектронноеВзаимодействиеИСМП");
	
	ПараметрыПроверкиКодовМаркировки = Новый Структура();
	ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеИСМП", Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервиса",
		Не Модуь_ЭлектронноеВзаимодействиеИСМП.ЗавершенОбменПоЭДО(ПроверяемыйДокумент));
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки");
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок");
	
	Модуь_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	Модуь_ИнтеграцияИСВызовСервера = ОбщийМодуль("ИнтеграцияИСВызовСервера");
	
	Если РежимПодбораСуществующихУпаковок
	 Или Модуь_ПроверкаИПодборПродукцииИСМП.КонтрагентНеРезидент(Контрагент) Тогда
		ИННВладельца = Модуь_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
		Владелец     = Организация;
	Иначе
		ИННВладельца = Модуь_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Контрагент).ИНН;
		Владелец     = Контрагент;
	КонецЕсли;
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки",    Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельцевКодовМаркировки", Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ИННВладельца",            ИННВладельца);
	ПараметрыПроверкиКодовМаркировки.Вставить("Владелец",                Владелец);
	ПараметрыПроверкиКодовМаркировки.Вставить("ОбратноеСканирование",    Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыйСпособВводаВОборот", Новый Массив);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВложенностьУпаковок", Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеВложенияАгрегатов",       Неопределено);
	
	Возврат ПараметрыПроверкиКодовМаркировки;
	
КонецФункции

#КонецОбласти

#Область РаботаСРезультатыПроверкиУпаковокМДЛП

&НаКлиенте
Процедура УстановитьСтатусПровереноУТоваров(Документ, ЭтоНовыйДокумент = Ложь)
	
	Параметр = Новый Структура;
	Параметр.Вставить("Ключ", Документ);
	ФормаДокумента = ПолучитьФорму("Документ.УведомлениеОПриемкеМДЛП.Форма.ФормаДокумента", Параметр);
	
	Попытка
		АдресДанныхПроверки = ?(ЭтоНовыйДокумент, "", ФормаДокумента.АдресДанныхПроверки());	
	Исключение
	    АдресДанныхПроверки = "";
	КонецПопытки; 
	
	ПараметрыСканированияИПроверки = ВернутьПараметрыСканированияИПроверки(Документ, АдресДанныхПроверки);
	                              
	ФормаПроверки = ПолучитьФорму("Обработка.ПроверкаИПодборУпаковокМДЛП.Форма.ПроверкаИПодбор", ПараметрыСканированияИПроверки, ФормаДокумента);
	
	ДеревоМаркированнойПродукции = ФормаПроверки.ДеревоМаркированнойПродукции;
	
	Массив = ПолучитьМассивСтрокДляПроставленияСтатусаВНАличии(ДеревоМаркированнойПродукции);
	
	Если Массив.Количество() = 0 Тогда
		Сообщить("Строки с кизами не обнаружены.");
		Возврат;	
	КонецЕсли;
	
	УстановитьСтатусДляСтрок(
		Массив,
		ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии"), ФормаПроверки);
	
	ФормаДокумента.СканированиеИПроверкаУпаковокПослеЗакрытия(АдресДляПереноса, ФормаПроверки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСтрокДляПроставленияСтатусаВНАличии(ДеревоМаркированнойПродукции)
	
	ТабПроверяемойПродукции = ПолучитьТаблицуЗначенийПоДеревуПроверяемойПродукции(ДеревоМаркированнойПродукции);
	
	Массив = ПолучитьМассивСтрокКизовКОбработкеСтатуса(ТабПроверяемойПродукции);
	
	Возврат Массив;
	
КонецФункции	

&НаСервере
Функция ПолучитьМассивСтрокКизовКОбработкеСтатуса(ТаблицаПроверки)
	
	МассивСтрокКизовКОбработкеСтатуса = Новый Массив; 
	
	Для каждого СтрКизы Из КИЗы Цикл
		СтруктураОтбора = Новый Структура("Ключ", СтрКизы.КИЗизФайла);
		
		НайденнаяСтрока = ТаблицаПроверки.НайтиСтроки(СтруктураОтбора);
		
		Если НайденнаяСтрока.Количество() > 0 Тогда
			МассивСтрокКизовКОбработкеСтатуса.Добавить(НайденнаяСтрока[0].Значение);
			НайденнаяСтрока[0].ДобавленВПроверку = Истина;
		КонецЕсли; 
			
	КонецЦикла; 
	
	//проверка по коробам и палетам
	КопияТЗПоРодителям = ТаблицаПроверки.Скопировать(,"Родитель");
	КопияТЗПоРодителям.Свернуть("Родитель");
	
	ДобавитьВМассивЗначенияПоПалетамКоробам(КопияТЗПоРодителям, ТаблицаПроверки, МассивСтрокКизовКОбработкеСтатуса); 
	
	Если КопияТЗПоРодителям.Количество() > 0 Тогда
		ДобавитьВМассивЗначенияПоПалетамКоробам(КопияТЗПоРодителям, ТаблицаПроверки, МассивСтрокКизовКОбработкеСтатуса); 	
	КонецЕсли; 
	
	Возврат МассивСтрокКизовКОбработкеСтатуса;
	
КонецФункции

&НаСервере
Процедура ДобавитьВМассивЗначенияПоПалетамКоробам(КопияТЗПоРодителям, ТаблицаПроверки, МассивСтрокКизовКОбработкеСтатуса)
	
	Для каждого СтрокаПоКопииТЗ Из КопияТЗПоРодителям Цикл		
		Родитель = СтрокаПоКопииТЗ.Родитель;
		
		Если Родитель = Неопределено Или Родитель = "<товар без коробки>" Тогда
			Продолжить;	
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Родитель,ДобавленВПроверку", Родитель, Неопределено);
		
		НайденнаяСтрокаРодитель = ТаблицаПроверки.НайтиСтроки(СтруктураОтбора);
		
		Если НайденнаяСтрокаРодитель.Количество() = 0 Тогда			
			СтруктураОтбора = Новый Структура("Ключ", Родитель);
			
			НайденнаяСтрокаРодитель = ТаблицаПроверки.НайтиСтроки(СтруктураОтбора);
			
			МассивСтрокКизовКОбработкеСтатуса.Добавить(НайденнаяСтрокаРодитель[0].Значение);
			НайденнаяСтрокаРодитель[0].ДобавленВПроверку = Истина;
			СтрокаПоКопииТЗ.Родитель = Неопределено;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры
 
&НаСервере
Функция ВернутьПараметрыСканированияИПроверки(Документ, АдресДанныхПроверки)
	
	Модуь_ИнтеграцияМДЛПКлиентСервер = ОбщийМодуль("ИнтеграцияМДЛПКлиентСервер");
	
	ПараметрыСканированияИПроверки = Новый Структура;
	ПараметрыСканированияИПроверки.Вставить("ПроверяемыйДокумент"                     , Документ);
	ПараметрыСканированияИПроверки.Вставить("ДобавлятьОтсутствующиеВДокументе"        , Документ.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок"));
	ПараметрыСканированияИПроверки.Вставить("РежимПодбораСуществующихУпаковок"        , Ложь);
	ПараметрыСканированияИПроверки.Вставить("ИдентификаторОрганизации"                , Документ.ИдентификаторОрганизации);
	ПараметрыСканированияИПроверки.Вставить("ПриЗавершенииСохранятьРезультатыПроверки", Истина);
	ПараметрыСканированияИПроверки.Вставить("РедактированиеФормыНедоступно"           , Модуь_ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Документ.СтатусПроверкиИПодбора));
	ПараметрыСканированияИПроверки.Вставить("РежимПросмотра"                          , Модуь_ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Документ.СтатусПроверкиИПодбора));
	ПараметрыСканированияИПроверки.Вставить("СниматьБлокировкуОбъектаПередЗаписьюПромежуточныхРезультатов", Истина);
	
	Если Модуь_ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Документ.СтатусПроверкиИПодбора)
	 Или Модуь_ИнтеграцияМДЛПКлиентСервер.ВыполняютсяПроверкаИПодбор(Документ.СтатусПроверкиИПодбора) Тогда
		ПараметрыСканированияИПроверки.Вставить("АдресПредварительноСохраненныхРезультатовПроверки", АдресДанныхПроверки);
	КонецЕсли;
	
	Возврат ПараметрыСканированияИПроверки;	
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусДляСтрок(ВыделенныеСтроки, НовыйСтатус, ФормаПроверки)
	
	ДеревоМаркированнойПродукции = ФормаПроверки.ДеревоМаркированнойПродукции;
	
	КоличествоКОбработке = ВыделенныеСтроки.Количество();
	КоличествоОбработанныхСтрок = 0;
	МассивУпаковокСИзменившимсяСоставом = Новый Массив;
	
	Для каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = НовыйСтатус Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком")
		 Или ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
			
			Если Не УстановкаСтатусаОтсутствуетВозможна(ДанныеСтроки) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки.СтатусПроверки = НовыйСтатус;
			УстановитьСтатусОтсутствуетДляПодчиненных(ДанныеСтроки);
			
		Иначе
			
			РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
			Если РодительскаяСтрока <> Неопределено
			   И РодительскаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки.СтатусПроверки = НовыйСтатус;
			
		КонецЕсли;
		
		УстановитьИндексКартинкиСтатусаПроверки(ДанныеСтроки);
		ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(ДанныеСтроки);
		КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
		
	КонецЦикла;
		
	ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанныхСтрок, КоличествоКОбработке, ФормаПроверки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипУпаковкиГруппаТоваров()
	
	Возврат ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ПустаяСсылка");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные)
	
	Для каждого ПодчиненнаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Не УстановкаСтатусаОтсутствуетВозможна(ПодчиненнаяСтрока) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляПодчиненных(СтрокаДерева)
	
	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);		
	КонецЦикла;
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
	ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(СтрокаДерева);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки = 5;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  0;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  1;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  2;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  3;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
		
		СтрокаДерева.ИндексКартинкиСтатусПроверки =  4;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоВерхнихУпаковок(СтрокаДерева)
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	
	Пока РодительскаяСтрока <> Неопределено Цикл
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительскаяСтрока, Ложь);
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанных, КоличествоВсего, ФормаПроверки)
	
	Если КоличествоОбработанных > 0 Тогда
		
		ШаблонЗаголовкаОбработано   = НСтр("ru = 'Статус проверки ""%1"" установлен'");
		ШаблонСообщенияОбработано   = НСтр("ru = 'Для %1 из %2 выделенных в списке строк установлен статус проверки ""%3""'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОбработано, НовыйСтатус);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОбработано,
			КоличествоОбработанных,
			КоличествоВсего,
			НовыйСтатус);
				
		ПроверкаЗавершена(ФормаПроверки);	
			
	Иначе
		
		ШаблонЗаголовкаНеОбработано = НСтр("ru = 'Статус проверки ""%1"" не установлен'");
		ШаблонСообщенияНеОбработано = НСтр("ru = 'Статус проверки ""%1"" не установлен ни для одной строки.'");;
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаНеОбработано, НовыйСтатус);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияНеОбработано, НовыйСтатус);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуЗначенийПоДеревуПроверяемойПродукции(ДеревоМаркированнойПродукции)
	
	ИдентификаторТекущейПроверяемойУпаковки = -1;
	СледующийСтикерОтложено                 = 1;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("Ключ",,"Ключ");
	ТаблицаЗначений.Колонки.Добавить("Значение",,"Значение");
	ТаблицаЗначений.Колонки.Добавить("Родитель",,"Родитель");
	ТаблицаЗначений.Колонки.Добавить("ДобавленВПроверку",,"Добавлен в проверку");
	
	Дерево = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	Для каждого СтрокаДеревоВерхнегоУровня Из Дерево Цикл 
		
		Стр = ТаблицаЗначений.Добавить();
		Стр.Ключ		= СтрокаДеревоВерхнегоУровня.Представление;
		Стр.Значение	= СтрокаДеревоВерхнегоУровня.ПолучитьИдентификатор();
		
		Если СтрокаДеревоВерхнегоУровня.ПолучитьЭлементы().Количество() > 0 Тогда
			Для каждого ВложенностьПервогоУровня Из СтрокаДеревоВерхнегоУровня.ПолучитьЭлементы() Цикл 
				
				Стр = ТаблицаЗначений.Добавить();
				Стр.Ключ		= ВложенностьПервогоУровня.Представление;
				Стр.Значение	= ВложенностьПервогоУровня.ПолучитьИдентификатор();
				Стр.Родитель	= СтрокаДеревоВерхнегоУровня.Представление;
				
				Если ВложенностьПервогоУровня.ПолучитьЭлементы().Количество() > 0 Тогда
					Для каждого ВложенностьВторогоУровня Из ВложенностьПервогоУровня.ПолучитьЭлементы() Цикл
						
						Стр = ТаблицаЗначений.Добавить();
						Стр.Ключ		= ВложенностьВторогоУровня.Представление;
						Стр.Значение	= ВложенностьВторогоУровня.ПолучитьИдентификатор();
						Стр.Родитель	= СтрокаДеревоВерхнегоУровня.Представление;
						
						Если ВложенностьВторогоУровня.ПолучитьЭлементы().Количество() > 0 Тогда
							
							Для каждого ВложенностьТретьегоУровня Из ВложенностьВторогоУровня.ПолучитьЭлементы() Цикл
								
								Стр = ТаблицаЗначений.Добавить();
								Стр.Ключ		= ВложенностьТретьегоУровня.Представление;
								Стр.Значение	= ВложенностьТретьегоУровня.ПолучитьИдентификатор();
								Стр.Родитель	= ВложенностьПервогоУровня.Представление;
								
							КонецЦикла;	
						КонецЕсли;
					
					КонецЦикла; 	
				КонецЕсли; 
				
			КонецЦикла;	
		КонецЕсли; 	
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Ключ", "<товар без коробки>");
	
	НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для каждого СтрокаМассива Из НайденныеСтроки Цикл
			ТаблицаЗначений.Удалить(СтрокаМассива);		
		КонецЦикла; 	
	КонецЕсли; 
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
		СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует");
	КонецЕсли;
	
	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, ПересчитыватьПодчиненные)
	
	СтрокаДерева.КоличествоПодчиненныхУпаковок                = 0;
	СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего                   = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхОтложено      = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеПроверялось = 0;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхОтложено + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
			
		КонецЕсли;
		
		Если ПересчитыватьПодчиненные Тогда
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Истина);
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
			
		КонецЕсли;
		
		СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок ;
		СтрокаДерева.КоличествоПодчиненныхУпаковок                = СтрокаДерева.КоличествоПодчиненныхУпаковок                + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
		
		СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
		СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
		СтрокаДерева.КоличествоПодчиненныхОтложено      = СтрокаДерева.КоличествоПодчиненныхОтложено      + ПодчиненнаяСтрока.КоличествоПодчиненныхОтложено;
		СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
		СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеПроверялось;
		
	КонецЦикла;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
	
	СтрокаДерева.ВсяУпаковкаПроверена =
		Не СтрокаДерева.НеСодержитсяВДанныхДокумента
		И (СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхВНаличии)
		И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар");
	
	СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева);
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева)
	
	ВсегоПодчиненных = СтрокаДерева.КоличествоПодчиненныхВсего;
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных = НСтр("ru = '<не является групповой упаковкой>'");
		
	ИначеЕсли СтрокаДерева.НеСодержитсяВДанныхДокумента Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<не применимо>'");
		
	ИначеЕсли ВсегоПодчиненных = 0 Тогда
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<информация о составе отсутствует>'");
		
	Иначе
		
		КоличествоПроверено = СтрокаДерева.КоличествоПодчиненныхВНаличии
		+ СтрокаДерева.КоличествоПодчиненныхОтложено
		+ СтрокаДерева.КоличествоПодчиненныхНеЧислилось
		+ СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		
		СтрокиПредставления = Новый Массив;
		СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверено %1 из %2'"), КоличествоПроверено, ВсегоПодчиненных));
		
		Если СтрокаДерева.КоличествоПодчиненныхОтсутствует > 0 Тогда
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'отсутствует %1'"), СтрокаДерева.КоличествоПодчиненныхОтсутствует));
		КонецЕсли;
		
		Если СтрокаДерева.КоличествоПодчиненныхОтложено > 0 Тогда
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'отложено %1'"), СтрокаДерева.КоличествоПодчиненныхОтложено));
		КонецЕсли;
		
		Если СтрокаДерева.КоличествоПодчиненныхНеЧислилось > 0 Тогда
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'не числилось %1'"), СтрокаДерева.КоличествоПодчиненныхНеЧислилось));
		КонецЕсли;
		
		СтрокаДерева.ПредставлениеПроверкиПодчиненных = СтрСоединить(СтрокиПредставления, ", ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева)

	ВсегоПодчиненных = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + СтрокаДерева.КоличествоПодчиненныхУпаковок;
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрокаДерева.НомерУпаковки;
		
	ИначеЕсли СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0
			И СтрокаДерева.КоличествоПодчиненныхУпаковок = 0 Тогда
		
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = ПредставлениеТовара(СтрокаДерева);
		Иначе
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<информация о составе отсутствует>'");
		КонецЕсли;
	
	ИначеЕсли СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = ПредставлениеТовара(СтрокаДерева);
		
	Иначе
		
		СтрокиПредставления = Новый Массив;
		
		Если СтрокаДерева.КоличествоПодчиненныхУпаковок > 0 Тогда
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'групповых упаковок - %1'"), СтрокаДерева.КоличествоПодчиненныхУпаковок));
		КонецЕсли;
		
		Если СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок > 0 Тогда
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'потребительских упаковок -  %1'"), СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок));
		КонецЕсли;
		
		СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрСоединить(СтрокиПредставления, ", ");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
		
		Если СтрокаДерева.Свойство("ИдетПроверкаДаннойУпаковки")
		   И СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
			СтрокаДерева.ИндексКартинкиШтрихкод = 3;
		Иначе
			СтрокаДерева.ИндексКартинкиШтрихкод = 0;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар") Тогда
		
		СтрокаДерева.ИндексКартинкиШтрихкод = 1;
		
	Иначе
		
		СтрокаДерева.ИндексКартинкиШтрихкод = 2;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТовара(СтрокаДерева)
	
	СтрокиПредставления = Новый Массив;
	
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		СтрокиПредставления.Добавить(Строка(СтрокаДерева.Номенклатура));
		Если ЗначениеЗаполнено(СтрокаДерева.Характеристика) Тогда
			СтрокиПредставления.Добавить(Строка(СтрокаДерева.Характеристика));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.Серия) Тогда
			СтрокиПредставления.Добавить(Строка(СтрокаДерева.Серия));
		Иначе
			Если ЗначениеЗаполнено(СтрокаДерева.НомерСерии) Тогда
				СтрокиПредставления.Добавить(Строка(СтрокаДерева.НомерСерии));
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
				ПредставлениеГоденДо = ?(СтрокаДерева.ГоденДо = КонецМесяца(СтрокаДерева.ГоденДо), Формат(СтрокаДерева.ГоденДо, "ДФ=MM/yy"), Формат(СтрокаДерева.ГоденДо, "ДФ=dd.MM.yy"));
				СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1'"), ПредставлениеГоденДо));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
			СтрокиПредставления.Добавить(СтрокаДерева.GTIN);
		Иначе
			СтрокиПредставления.Добавить(Лев(СтрокаДерева.GTIN, 14));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.НомерСерии) Тогда
			СтрокиПредставления.Добавить(Строка(СтрокаДерева.НомерСерии));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
			ПредставлениеГоденДо = ?(СтрокаДерева.ГоденДо = КонецМесяца(СтрокаДерева.ГоденДо), Формат(СтрокаДерева.ГоденДо, "ДФ=MM/yy"), Формат(СтрокаДерева.ГоденДо, "ДФ=dd.MM.yy"));
			СтрокиПредставления.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1'"), ПредставлениеГоденДо));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(СтрокиПредставления, ", ");
	
КонецФункции

&НаКлиенте
Процедура ПроверкаЗавершена(ФормаПроверки)
	
	ДеревоМаркированнойПродукции = ФормаПроверки.ДеревоМаркированнойПродукции;
	
	Если ДеревоМаркированнойПродукции.ПолучитьЭлементы().Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Проверка не может быть завершена, так как отсутствуют проверяемые товары.'");
	КонецЕсли;
	
	КоличествоНепроверенных = 0;
	КоличествоОтложенных    = 0;
	КоличествоВсего         = 0;
	
	Для каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			Для каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если ПодчиненнаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком")
				 Или ПодчиненнаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
					КоличествоНепроверенных = КоличествоНепроверенных + 1;
				ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
					КоличествоОтложенных = КоличествоОтложенных + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком")
		 Или СтрокаДерева.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоНепроверенных = КоличествоНепроверенных + СтрокаДерева.КоличествоПодчиненныхНеПроверялось;
		КоличествоОтложенных    = КоличествоОтложенных    + СтрокаДерева.КоличествоПодчиненныхОтложено;
		КоличествоВсего         = КоличествоВсего         + СтрокаДерева.КоличествоПодчиненныхВсего;
		
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась") Тогда
			КоличествоНепроверенных = КоличествоНепроверенных + 1;
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена") Тогда
			КоличествоОтложенных = КоличествоОтложенных + 1;
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + 1;
		
	КонецЦикла;
	
	ЗавершитьПроверку(ФормаПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверку(ФормаПроверки, СтатусПроверки = Неопределено)
	
	ДеревоМаркированнойПродукции = ФормаПроверки.ДеревоМаркированнойПродукции;
	
	АдресВоВременномХранилище = РезультатПроверкиИПодбора(СтатусПроверки, ФормаПроверки.ВладелецФормы.УникальныйИдентификатор, ДеревоМаркированнойПродукции);
	                                           
	Модифицированность = Ложь;
	АдресДляПереноса = АдресВоВременномХранилище;
	
КонецПроцедуры

&НаСервере
Функция РезультатПроверкиИПодбора(СтатусПроверки, УникальныйИдентификаторФормыВладельца, ДеревоМаркированнойПродукции)
		
	Если СтатусПроверки <> Неопределено Тогда
		Для каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаПроверяемого, СтатусПроверки, Ложь);
		КонецЦикла; 
		
		ПересчитатьВсеИтогиФормы(ДеревоМаркированнойПродукции);
	КонецЕсли;
	
	РезультатПроверки = Новый ТаблицаЗначений;
	РезультатПроверки.Колонки.Добавить("НомерУпаковки" , ОбщегоНазначения.ОписаниеТипаСтрока(200));
	РезультатПроверки.Колонки.Добавить("ТипУпаковки"   , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковокМДЛП"));
	РезультатПроверки.Колонки.Добавить("СтатусПроверки", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияУпаковкиМДЛП"));
	
	Для каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если СтрокаПроверяемого.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
			
			Для каждого СтрокаПотребительскихУпаковок Из СтрокаПроверяемого.ПолучитьЭлементы() Цикл
				НоваяСтрока = РезультатПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПотребительскихУпаковок);
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = РезультатПроверки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПроверяемого);
			Если СтрокаПроверяемого.КоличествоПодчиненныхОтсутствует > 0 Тогда
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует;
			КонецЕсли;
			
		КонецЕсли
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатПроверки"			  , РезультатПроверки);
	Результат.Вставить("АдресДанныхРезультатаПроверки",	ПоместитьВоВременноеХранилище(ДанныеРезультатовПроверки(ДеревоМаркированнойПродукции), УникальныйИдентификаторФормыВладельца));
			
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификаторФормыВладельца);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаДерева, СтатусПроверки, УстанавливатьБезусловно)
	
	Если СтрокаДерева.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком
	 Или СтрокаДерева.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГруппаТоваров() Тогда
	
	ИначеЕсли УстанавливатьБезусловно Тогда
		
		СтрокаДерева.СтатусПроверки = СтатусПроверки;
		
	ИначеЕсли ЗначениеЗаполнено(СтатусПроверки)
			И (СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась
				Или СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отложена) Тогда
		
		СтрокаДерева.СтатусПроверки = СтатусПроверки;
		
	КонецЕсли;
	
	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстанавливатьБезусловно =
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковокМДЛП.ГрупповаяУпаковка
			И СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.Отсутствует;
		
		ИзменитьСтатусПроверкиВСтрокеДерева(ПодчиненнаяСтрока, СтатусПроверки, УстанавливатьБезусловно);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВсеИтогиФормы(ДеревоМаркированнойПродукции)
	
	ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
		
КонецПроцедуры

&НаСервере
Функция ДанныеРезультатовПроверки(ДеревоМаркированнойПродукции)
	
	РезультатыПроверки = Новый Структура;
	РезультатыПроверки.Вставить("ДеревоМаркированнойПродукции", ДанныеФормыВЗначение(ДеревоМаркированнойПродукции, Тип("ДеревоЗначений")));
	РезультатыПроверки.Вставить("СледующийСтикерОтложено"     , СледующийСтикерОтложено);
	РезультатыПроверки.Вставить("НомерПроверяемойУпаковки"    , НомерПроверяемойУпаковки(ДеревоМаркированнойПродукции));
	
	Возврат РезультатыПроверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции)
	
	Для каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Истина);
		
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Функция НомерПроверяемойУпаковки(ДеревоМаркированнойПродукции)
	
	Если ИдентификаторТекущейПроверяемойУпаковки <> - 1 Тогда
		СтрокаСПроверяемойУпаковкой = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
		
		Если СтрокаСПроверяемойУпаковкой <> Неопределено Тогда
			Возврат СтрокаСПроверяемойУпаковкой.НомерУпаковки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСхемаАкцептования(Док)	
	
	Возврат Док.ПолучитьОбъект().СхемаАкцептования;
	
КонецФункции

#КонецОбласти

#Область СлужебныеФункции

&НаКлиенте
Процедура РазвернутьГруппыГдеВыбраныПараметры()
	
	ТекДанные = Элементы.ШаблоныДокументов.ТекущиеДанные; 
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГрБизнесПроцессыПоказать = Ложь;
	
	///////////////////////
	//ОБЩЕЕ
	Попытка
		Если ТекДанные.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор
			Или ТекДанные.ЗаполнениеТЧТолькоСобраннымиЯчейкамиПодбор Тогда 
			ГрБизнесПроцессыПоказать = Истина;
			Элементы.ГрБизнесПроцессы.Показать();
			Элементы.грИнвентаризация.Показать();
		Иначе
			Элементы.ГрБизнесПроцессы.Скрыть();
			Элементы.грИнвентаризация.Скрыть();
		КонецЕсли;
	Исключение 
	КонецПопытки;
		
	Попытка
		Если ТекДанные.ИспользоватьВторойСклад Тогда 			
			Элементы.ГрБизнесПроцессы.Показать();
			Элементы.грПеремещениеТоваров.Показать();
		Иначе
			Если Не ГрБизнесПроцессыПоказать Тогда
				Элементы.ГрБизнесПроцессы.Скрыть();	
			КонецЕсли;
			Элементы.грПеремещениеТоваров.Скрыть();	
		КонецЕсли;
	Исключение 
	КонецПопытки;
		
	Попытка
		Если ТекДанные.СоздаватьСерииЕслиНеНайдены 
			Или ТекДанные.СерииВОтдельнойТЧ Тогда 			
			Элементы.грСерии.Показать();
		Иначе
			Элементы.грСерии.Скрыть();
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если ТекДанные.ЗапретитьРучноеИзменениеКлиента 
			Или ТекДанные.НеИзменятьОтветственногоМенеджера
			Или ТекДанные.ЗапретитьРучноеИзменениеКомментария
			Или ТекДанные.ЗагружатьКомментарий <> 0 
			Или ТекДанные.АвтоматическийКомментарийИспользовать 
			Или ТекДанные.АвтоматическийКомментарий <> "" Тогда
			
			Элементы.грКлиент.Показать();
		Иначе
			Элементы.грКлиент.Скрыть();
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	///////////////////////
	//ПОДБОР
	Попытка
		Если ТекДанные.ИспользованиеЯчеекПодбор <> 0
			Или ТекДанные.УчитыватьЯчеекВЗаданииПодбор
			Или ТекДанные.ЗаполнятьСкладПодбор
			Или ТекДанные.ОбработкаЯчейкиЦеликомПодбор
			Или ТекДанные.ВыгружатьЯчейкиСДокументом
			Или ТекДанные.ВыгрузкаЯчеекПодбор <> 0
			Или ТекДанные.ГруппировкаЯчеекПодбор <> 0 Тогда
			Элементы.грАдрПодб.Показать();
		Иначе
			Элементы.грАдрПодб.Скрыть();	
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если ТекДанные.ИспользованиеСерийниковПодбор <> 0
			Или ТекДанные.УчитыватьСерийниковВЗаданииПодбор			
			Или ТекДанные.СерНомНеПустойПодбор
			Или ТекДанные.УникальныеСерийныеНомераПодбор
			Или ТекДанные.ТипСерийногоНомераПодбор <> 0
			Или ТекДанные.ПравилаВводаСерииПодбор <> ""
			Или ТекДанные.ГруппировкаСерийПодбор <> 0 Тогда
			Элементы.грСерПодб.Показать();
		Иначе
			Элементы.грСерПодб.Скрыть();	
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка 
		Если ТекДанные.ИспользованиеУпаковочныхЛистовПодбор <> 0
			Или ТекДанные.РазрешитьПропускатьВводУпаковочногоЛиста
			Или ТекДанные.СоздаватьДокументыУпаковочныхЛистов Тогда 			
			Элементы.грУпакПодб.Показать();
		Иначе
			Элементы.грУпакПодб.Скрыть();	
		КонецЕсли;
	Исключение 
	КонецПопытки;
		
	///////////////////////
	//РАЗМЕЩЕНИЕ	
	Попытка
		Если ТекДанные.ИспользованиеЯчеекПриемка <> 0
			Или ТекДанные.УчитыватьЯчеекВЗаданииПриемка
			Или ТекДанные.ЗаполнятьСкладПриемка
			Или ТекДанные.ОбработкаЯчейкиЦеликомПриемка
			Или ТекДанные.ВыгружатьЯчейкиСДокументом
			Или ТекДанные.ВыгрузкаЯчеекПриемка <> 0
			Или ТекДанные.ГруппировкаЯчеекПриемка <> 0 Тогда
			Элементы.ГрАдрРазм.Показать();
		Иначе
			Элементы.ГрАдрРазм.Скрыть();	
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если ТекДанные.ИспользованиеСерийниковПриемка <> 0
			Или ТекДанные.УчитыватьСерийниковВЗаданииПриемка			
			Или ТекДанные.СерНомНеПустойПриемка
			Или ТекДанные.УникальныеСерийныеНомераПриемка 
			Или ТекДанные.ТипСерийногоНомераПриемка <> 0
			Или ТекДанные.ПравилаВводаСерииПриемка <> ""
			Или ТекДанные.ГруппировкаСерийПриемка <> 0 Тогда
			Элементы.ГрСерРазм.Показать();
		Иначе
			Элементы.ГрСерРазм.Скрыть();	
		КонецЕсли;
	Исключение 
	КонецПопытки;
	
	Попытка
		Если ТекДанные.ИспользованиеУпаковочныхЛистовПриемка <> 0 Тогда 			
			Элементы.ГрУпакРазм.Показать();			
		КонецЕсли;
	Исключение 
	КонецПопытки; 	
		
КонецПроцедуры

#КонецОбласти

