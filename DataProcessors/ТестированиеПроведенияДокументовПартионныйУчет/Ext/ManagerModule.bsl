#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыФункции

Функция ПерепровестиДокументы(НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	ТаблицаДокументов 			= ТаблицаДокументовРегистраСебестоимости(НачалоПериода, КонецПериода);
	ТекстДляСообщения 			= НСтр("ru='Проведение документов'");
	ТекстСообщений    			= "";
	ТипыДокументовДляПроведения = ТипыДокументовДляПроведения();
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Для Каждого ТекСообщение Из Сообщения Цикл
		ТекстСообщений = ТекстСообщений + Символы.ПС + ТекСообщение.Текст;
	КонецЦикла;
		
	Для Каждого ТекущийДокумент Из ТаблицаДокументов Цикл
		
		Если ТипыДокументовДляПроведения.Количество() > 0
		 И ТипыДокументовДляПроведения.Найти(Тип("ДокументСсылка." + ТекущийДокумент.ИмяДокумента)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТекущийДокумент.НовыйМеханизм ИЛИ ТекущийДокумент.КоличествоДокументов  = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", ?(ЗначениеЗаполнено(НачалоПериода), НачалоМесяца(НачалоПериода), Дата(1,1,1)));
		Запрос.УстановитьПараметр("КонецПериода",  ?(ЗначениеЗаполнено(КонецПериода), КонецМесяца(КонецПериода),  КонецМесяца(ТекущаяДатаСеанса())));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	#ТаблицаДокумента КАК Т
		|ГДЕ
		|	Т.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	Т.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДокумента", "Документ." + ТекущийДокумент.ИмяДокумента);
		
		ТекстСообщений = ТекстСообщений + Символы.ПС 
			+ ТекстДляСообщения + " " + ТекущийДокумент.ИмяДокумента + " (" + СокрЛП(ТекущийДокумент.КоличествоДокументов) + ")";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект(); //ДокументОбъект
			
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" -* " + Выборка.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецПопытки;
			
		КонецЦикла;
		
		Сообщения = ПолучитьСообщенияПользователю(Истина);
		
		Если Сообщения.Количество() > 0 Тогда
			
			ТекстСообщений = ТекстСообщений + Символы.ПС + Символы.Таб
				+ "! " + НСтр("ru='Ошибка проведения документа'") + " " + СокрЛП(Выборка.Ссылка) + ":";
			
			Для Каждого ТекСообщение Из Сообщения Цикл
				ТекстСообщений = ТекстСообщений + Символы.ПС + Символы.Таб + ТекСообщение.Текст;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СокрЛП(ТекстСообщений);
	
КонецФункции

Функция ТаблицаДокументовРегистраСебестоимости(НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ИмяДокумента",   		Новый ОписаниеТипов("Строка"),, 50);
	ТаблицаДокументов.Колонки.Добавить("ЕстьДвижения",   		Новый ОписаниеТипов("Булево"),, 15);
	ТаблицаДокументов.Колонки.Добавить("ЕстьПравила",    		Новый ОписаниеТипов("Булево"),, 15);
	ТаблицаДокументов.Колонки.Добавить("СтарыйМеханизм", 		Новый ОписаниеТипов("Булево"),, 15);
	ТаблицаДокументов.Колонки.Добавить("НовыйМеханизм",  		Новый ОписаниеТипов("Булево"),, 15);
	ТаблицаДокументов.Колонки.Добавить("ЕстьТаблицаСумм", 		Новый ОписаниеТипов("Булево"),, 15);
	ТаблицаДокументов.Колонки.Добавить("КоличествоДокументов", 	Новый ОписаниеТипов("Число"),,  15);
	
	Правила = РасчетСебестоимостиПовтИсп.ПравилаЗаполненияПоляТипЗаписи();
	ЗапросыПоДокументам = ПолучитьТекстыЗапросов();
	ОписаниеОпераций = ПолучитьОписаниеОперацийДокументов();
	
	Запрос        = ИнициализироватьЗапросДляПроведения();
	ТекстыЗапроса = Новый СписокЗначений;
	Регистры	  = Неопределено;
	
	Для Каждого МетаДокумент Из Метаданные.Документы Цикл
		
		ЕстьДвижения = МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
		ЕстьПравила  = Правила.Найти(МетаДокумент.Имя, "ИмяДокумента") <> Неопределено;
		
		ТекстЗапроса = "";
		ЗапросыПоДокументам.Свойство(МетаДокумент.Имя, ТекстЗапроса);
		СтарыйМеханизм = ЗначениеЗаполнено(ТекстЗапроса);
		НовыйМеханизм = ОписаниеОпераций.Найти(МетаДокумент.Имя, "ИмяДокумента") <> Неопределено;
		
		Если НЕ ЕстьДвижения И НЕ ЕстьПравила И НЕ СтарыйМеханизм И НЕ НовыйМеханизм Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Документы[МетаДокумент.Имя].СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);
			ЕстьТаблицаСумм = Истина;
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если СтрНайти(ТекстОшибки, "Метод объекта не обнаружен") = 0 Тогда
				// ТоДо надо ли?
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//	НСтр("ru='Документ'") + " " + МетаДокумент.Имя + ": "
				//	+ НСтр("ru='ошибка вызова функции формирования таблицы сумм'"));
			КонецЕсли;
			ЕстьТаблицаСумм = Ложь;
		КонецПопытки;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", ?(ЗначениеЗаполнено(НачалоПериода), НачалоМесяца(НачалоПериода), Дата(1,1,1)));
		Запрос.УстановитьПараметр("КонецПериода",  ?(ЗначениеЗаполнено(КонецПериода), КонецМесяца(КонецПериода), КонецМесяца(ТекущаяДатаСеанса())));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	#ТаблицаДокумента КАК Т
		|ГДЕ
		|	Т.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.Проведен";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДокумента", МетаДокумент.ПолноеИмя());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Количество = Выборка.Количество;
		Иначе
			Количество = 0;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.ИмяДокумента   		 = МетаДокумент.Имя;
		НоваяСтрока.ЕстьДвижения   		 = ЕстьДвижения;
		НоваяСтрока.ЕстьПравила    		 = ЕстьПравила;
		НоваяСтрока.СтарыйМеханизм 		 = СтарыйМеханизм;
		НоваяСтрока.НовыйМеханизм  		 = НовыйМеханизм;
		НоваяСтрока.ЕстьТаблицаСумм  	 = ЕстьТаблицаСумм;
		НоваяСтрока.КоличествоДокументов = Количество;
		
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция СверитьДвиженияДокументов(НачалоПериода, КонецПериода) Экспорт
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Движения = Новый Структура;
	ТекстПроведения = Новый ТекстовыйДокумент;
	
	ТекущееЗначениеКонстанты = Константы.СтарыйМеханизмПроведенияСебестоимости.Получить();
	
	ТекстПроведения.ДобавитьСтроку(НСтр("ru='Проведение'") + " " + ?(ТекущееЗначениеКонстанты, "старым механимом", "новым механизмом"));
	ТекстПроведения.ДобавитьСтроку("===========================================================================");
	ТекстПроведения.ДобавитьСтроку(ПерепровестиДокументы(НачалоПериода, КонецПериода));
	
	Движения.Вставить(
		?(ТекущееЗначениеКонстанты, "ДвиженияСтарые", "ДвиженияНовые"),
		ПолучитьДвиженияДокументов(НачалоПериода, КонецПериода));
	
	Константы.СтарыйМеханизмПроведенияСебестоимости.Установить(НЕ ТекущееЗначениеКонстанты);
	
	ТекстПроведения.ДобавитьСтроку("");
	ТекстПроведения.ДобавитьСтроку(НСтр("ru='Проведение'") + " " + ?(НЕ ТекущееЗначениеКонстанты, "старым механимом", "новым механизмом"));
	ТекстПроведения.ДобавитьСтроку("===========================================================================");
	ТекстПроведения.ДобавитьСтроку(ПерепровестиДокументы(НачалоПериода, КонецПериода));
	
	Движения.Вставить(
		?(НЕ ТекущееЗначениеКонстанты, "ДвиженияСтарые", "ДвиженияНовые"),
		ПолучитьДвиженияДокументов(НачалоПериода, КонецПериода));
	
	Константы.СтарыйМеханизмПроведенияСебестоимости.Установить(ТекущееЗначениеКонстанты);
	
	Результат = Новый Структура;
	Результат.Вставить("ДвиженияСтарые",  ТаблицуЗначенийВТабличныйДокумент(Движения.ДвиженияСтарые.СебестоимостьТоваров));
	Результат.Вставить("ДвиженияНовые",   ТаблицуЗначенийВТабличныйДокумент(Движения.ДвиженияНовые.СебестоимостьТоваров));
	Результат.Вставить("СверкаДвижений",  СформироватьОтчетОРазличииДвижений(Движения));
	Результат.Вставить("ТекстПроведения", ТекстПроведения);
	
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекстДлительность = НСтр("ru='Время выполнения операции'") + ": "
		+ РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени((ВремяОкончания - ВремяНачала) / 1000);
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстДлительность);
		
	ТекстПроведения.ДобавитьСтроку("");
	ТекстПроведения.ДобавитьСтроку(ТекстДлительность);
	
	Возврат Результат;
	
КонецФункции


Функция СформироватьОтчетОРазличииДвижений(Движения)
	
	// Удалим неанализируемые колонки
	УдаляемыеКолонки = Новый Структура("ВидДеятельностиНДСДокумента, АналитикаФинансовогоУчетаДокумента, АналитикаУчетаПартийДокумента,
		|УдалитьАналитикаУчетаПартийПроизводства, РасчетНеЗавершен, РасчетПартий, РасчетСебестоимости, НомерСтроки, Активность");
	КолонкиСопоставления = "ВидДвижения, Период, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, Количество";
	МассивКолонкиСопоставления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиСопоставления, ",",, Истина);
	
	КолонкиТаблицы = Движения.ДвиженияСтарые.СебестоимостьТоваров.Колонки; // КоллекцияКолонокТаблицыЗначений
	КолонкиТаблицыНовые = Движения.ДвиженияНовые.СебестоимостьТоваров.Колонки; // КоллекцияКолонокТаблицыЗначений
	
	Для Каждого КлючИЗначение Из УдаляемыеКолонки Цикл
		КолонкиТаблицы.Удалить(КлючИЗначение.Ключ);
		КолонкиТаблицыНовые.Удалить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ВсеРегистраторы = Движения.ДвиженияСтарые.СебестоимостьТоваров.Скопировать(, "ТипРегистратора, Регистратор"); //ТаблицаЗначений
	РегистраторыНовые  = Движения.ДвиженияНовые.СебестоимостьТоваров.Скопировать(,  "ТипРегистратора, Регистратор"); //ТаблицаЗначений
	
	ВсеРегистраторы.Свернуть("ТипРегистратора, Регистратор", "");
	РегистраторыНовые.Свернуть("ТипРегистратора, Регистратор", "");
	
	ВсеРегистраторы.Колонки.Добавить("ЕстьВНовых");
	ВсеРегистраторы.Индексы.Добавить("Регистратор");
	
	Для Каждого ТекСтр Из РегистраторыНовые Цикл
		
		Если ВсеРегистраторы.Найти(ТекСтр.Регистратор, "Регистратор") = Неопределено Тогда
			НовСтр = ВсеРегистраторы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
			НовСтр.ЕстьВНовых = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ВсеРегистраторы.Сортировать("ТипРегистратора, Регистратор", Новый СравнениеЗначений);
	
	ТекущийТипРегистратора = Неопределено;
	
	ТаблицаОтличийКолонок = Новый ТаблицаЗначений;
	ТаблицаОтличийКолонок.Колонки.Добавить("ИндексТаблицыОтличийСтрок");
	ТаблицаОтличийКолонок.Колонки.Добавить("ИмяПоля", , НСтр("ru='Имя поля'"));
	ТаблицаОтличийКолонок.Колонки.Добавить("ЗначениеСтарое", , НСтр("ru='Значение старое'"));
	ТаблицаОтличийКолонок.Колонки.Добавить("ЗначениеНовое", , НСтр("ru='Значение новое'"));
	
	ТаблицаОтличийСтрок = Новый ТаблицаЗначений;
	ТаблицаОтличийСтрок.Колонки.Добавить("Отличие");
	
	Для Каждого ТекСтр Из МассивКолонкиСопоставления Цикл
		ТаблицаОтличийСтрок.Колонки.Добавить(ТекСтр);
	КонецЦикла;
	
	ТаблицаОтличийСтрок.Колонки.Добавить("ОперацияУчетаСебестоимости");
	ТаблицаОтличийСтрок.Колонки.Добавить("ХозяйственнаяОперация");
	
	ТабДок = Новый ТабличныйДокумент;
	НомерГруппы = 1;
	КоличествоГрупп = 0;
	
	Для Каждого СтрокаРегистраторы Из ВсеРегистраторы Цикл
		
		Если СтрокаРегистраторы.ТипРегистратора <> ТекущийТипРегистратора Тогда
			
			// Вывод типа регистратора.
			Если ТекущийТипРегистратора <> Неопределено Тогда
				
				Если КоличествоГрупп > 0 Тогда
					
					Секция = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1, , ТабДок.ВысотаТаблицы + 1);
					ТабДок.Вывести(Секция);
				
					ТабДок.ЗакончитьГруппуСтрок();
					КоличествоГрупп = КоличествоГрупп - 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекущийТипРегистратора = СтрокаРегистраторы.ТипРегистратора;
			ВыведенаГруппаТипаРегистратора = Ложь;
			
		КонецЕсли;
		
		// Сравнение строк
		ОтборРегистратор = Новый Структура("Регистратор", СтрокаРегистраторы.Регистратор);
		
		ДвиженияСтарые = Движения.ДвиженияСтарые.СебестоимостьТоваров.Скопировать(Движения.ДвиженияСтарые.СебестоимостьТоваров.НайтиСтроки(ОтборРегистратор));
		ДвиженияНовые  = Движения.ДвиженияНовые.СебестоимостьТоваров.Скопировать(Движения.ДвиженияНовые.СебестоимостьТоваров.НайтиСтроки(ОтборРегистратор));
		
		ТаблицаОтличийСтрок.Очистить();
		ТаблицаОтличийКолонок.Очистить();
		
		Для Каждого СтрокаСтарыхДвижений Из ДвиженияСтарые Цикл
			
			ПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(СтрокаСтарыхДвижений.Период));
			
			ОтборСтрока = Новый Структура(КолонкиСопоставления);
			ЗаполнитьЗначенияСвойств(ОтборСтрока, СтрокаСтарыхДвижений);
			
			СтрокиНовыхДвижений = ДвиженияНовые.НайтиСтроки(ОтборСтрока);
			
			Если СтрокиНовыхДвижений.Количество() > 1 Тогда
				
				ОтборСтрока.Вставить("ХозяйственнаяОперация");
				ОтборСтрока.Вставить("КорПартия");
				ЗаполнитьЗначенияСвойств(ОтборСтрока, СтрокаСтарыхДвижений);
				
				СтрокиНовыхДвиженийУточненные = ДвиженияНовые.НайтиСтроки(ОтборСтрока);
				
				Если СтрокиНовыхДвиженийУточненные.Количество() > 0 Тогда
					СтрокиНовыхДвижений = СтрокиНовыхДвиженийУточненные;
				КонецЕсли;
				
				ОтборСтрока.Удалить("ХозяйственнаяОперация");
				ОтборСтрока.Удалить("КорПартия");
				
			КонецЕсли;
			
			Если СтрокиНовыхДвижений.Количество() = 0 Тогда
				
				СтрокаОтличий = ТаблицаОтличийСтрок.Добавить();
				СтрокаОтличий.Отличие = НСтр("ru='Только в старых движениях'");
				
				Для Каждого ТекСтр Из МассивКолонкиСопоставления Цикл
					СтрокаОтличий[ТекСтр] = ОтборСтрока[ТекСтр];
				КонецЦикла;
				
			Иначе
				
				ЕстьОтличия = Ложь;
				
				Для Каждого ТекКолонка Из КолонкиТаблицы Цикл
					
					Если ТекКолонка.Имя = "ОперацияУчетаСебестоимости" Тогда
						Продолжить; // служебная колонка, не заполняется в старых движениях
					КонецЕсли;
					
					СтароеЗначение = СтрокаСтарыхДвижений[ТекКолонка.Имя];
					НовоеЗначение  = СтрокиНовыхДвижений[0][ТекКолонка.Имя];
					ТипОперацииСебестоимости = СтрокиНовыхДвижений[0].ОперацияУчетаСебестоимости;
					ХозяйственнаяОперация = СтрокиНовыхДвижений[0].ХозяйственнаяОперация;
					
					Если СтароеЗначение <> НовоеЗначение Тогда
						
						// Исключения
						Если (ТекущийТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
						 ИЛИ ТекущийТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
						 ИЛИ ТекущийТипРегистратора = Тип("ДокументСсылка.КорректировкаПриобретения"))
						 И (ТекКолонка.Имя = "АналитикаРасходов"
						 	ИЛИ ТекКолонка.Имя = "СтатьяРасходовСписания"
						 	ИЛИ ТекКолонка.Имя = "СтатьяДоходов"
						 	ИЛИ ТекКолонка.Имя = "АналитикаДоходов")
						 И НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
							Продолжить; // ошибка в старых движениях
						КонецЕсли;
						
						Если ТекКолонка.Имя = "АналитикаУчетаПоПартнерам" Тогда
						
							Если ТипОперацииСебестоимости <> Перечисления.ОперацииУчетаСебестоимости.Реализация
							 И ТипОперацииСебестоимости <> Перечисления.ОперацииУчетаСебестоимости.СписаниеНаРасходыАктивы
							 И НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // сейчас заполнение этого реквизита не требуется
							КонецЕсли;
						
							Если ТипОперацииСебестоимости = Перечисления.ОперацииУчетаСебестоимости.Реализация
							 И ЗначениеЗаполнено(НовоеЗначение) И НЕ ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // ошибка в старых движениях
							КонецЕсли;
							
						ИначеЕсли ТекКолонка.Имя = "ГруппаПродукции" Тогда
						
							Если ТипОперацииСебестоимости = Перечисления.ОперацииУчетаСебестоимости.Перемещение
							 И ЗначениеЗаполнено(НовоеЗначение) И НЕ ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // ошибка в старых движениях
							КонецЕсли;
							
						ИначеЕсли ТекКолонка.Имя = "КорАналитикаФинансовогоУчета" Тогда
							
							Если НЕ ПартионныйУчетВерсии22
							 И НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // ошибка в старых движениях
							КонецЕсли;
							
						ИначеЕсли ТекКолонка.Имя = "КорВидЗапасов" Тогда
						
							Если ТекущийТипРегистратора = Тип("ДокументСсылка.ОтчетКомитентуОСписании")
							 И ТипОперацииСебестоимости = Перечисления.ОперацииУчетаСебестоимости.ВнешнееПоступление
							 И НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // ошибка в старых движениях
							КонецЕсли;
							
							Если ТекущийТипРегистратора = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
							 И ТипОперацииСебестоимости = Перечисления.ОперацииУчетаСебестоимости.СписаниеНаРасходыАктивы
							 И НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // ошибка в старых движениях
							КонецЕсли;
							
						ИначеЕсли ТекКолонка.Имя = "КорПартия" Тогда
						
							Если ТипОперацииСебестоимости = Перечисления.ОперацииУчетаСебестоимости.ВыбытиеПоФиксированнойСтоимости
							 И НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // ошибка в старых движениях
							КонецЕсли;
							
						ИначеЕсли ТекКолонка.Имя = "КорНаправлениеДеятельности" Тогда
						
							Если ТипОперацииСебестоимости = Перечисления.ОперацииУчетаСебестоимости.Перемещение
							 И НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // не используется
							КонецЕсли;
							
						ИначеЕсли ТекКолонка.Имя = "ЗаказКлиента" Тогда
						
							Если ТипОперацииСебестоимости = Перечисления.ОперацииУчетаСебестоимости.ВыбытиеПоФиксированнойСтоимости
							 И НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // ошибка в старых движениях
							КонецЕсли;
							
						ИначеЕсли ТекКолонка.Имя = "Подразделение" Тогда
							
							Если ЗначениеЗаполнено(НовоеЗначение) И НЕ ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // сейчас заполнение этого реквизита сделано однотипно у всех документов
							КонецЕсли;
						
						ИначеЕсли ТекКолонка.Имя = "СтатьяКалькуляции" Тогда
							
							Если НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // реквизит больше не заполняется
							КонецЕсли;
						
						ИначеЕсли ТекКолонка.Имя = "ИдентификаторФинЗаписи" Тогда
							
							Если (ТекущийТипРегистратора = Тип("ДокументСсылка.СборкаТоваров")
							 ИЛИ ТекущийТипРегистратора = Тип("ДокументСсылка.КорректировкаРеализации"))
							 И ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // ТоДо пока не проверяем
							КонецЕсли;
							
							Если (ТекущийТипРегистратора = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
							 ИЛИ ТекущийТипРегистратора = Тип("ДокументСсылка.ПеремещениеТоваров"))
							 И ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // ТоДо почему-то постоянно меняется идентификатор строки (он же фин. записи)
							КонецЕсли;
						
						ИначеЕсли ТекКолонка.Имя = "КорОрганизация" Тогда
							
							Если НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение)
						 	 И СтароеЗначение = СтрокаСтарыхДвижений.Организация Тогда
								Продолжить; // организация и кор. организация не должны быть одинаковыми
							КонецЕсли;
							
						ИначеЕсли ТекКолонка.Имя = "КорАналитикаУчетаНоменклатуры" Тогда
							
							Если ТекущийТипРегистратора = Тип("ДокументСсылка.ПересортицаТоваров")
							 И СтрокаСтарыхДвижений.ВидДвижения = ВидДвиженияНакопления.Приход
							 И НЕ ЗначениеЗаполнено(НовоеЗначение) И ЗначениеЗаполнено(СтароеЗначение) Тогда
								Продолжить; // заполнение реквизита не требуется
							КонецЕсли;
							
						ИначеЕсли ТекКолонка.Имя = "ВидДеятельностиНДС" Тогда
							
							
						ИначеЕсли ТекКолонка.Имя = "КорВидДеятельностиНДС" Тогда
							
							
						КонецЕсли;
						
						Если НЕ ЕстьОтличия Тогда
							
							СтрокаОтличий = ТаблицаОтличийСтрок.Добавить();
							СтрокаОтличий.Отличие = НСтр("ru='Отличия в колонках'");
							СтрокаОтличий.ОперацияУчетаСебестоимости = ТипОперацииСебестоимости;
							СтрокаОтличий.ХозяйственнаяОперация = ХозяйственнаяОперация;
							
							Для Каждого ТекСтр Из МассивКолонкиСопоставления Цикл
								СтрокаОтличий[ТекСтр] = ОтборСтрока[ТекСтр];
							КонецЦикла;
							
						КонецЕсли;
						
						ЕстьОтличия = Истина;
						
						СтрокаОтличийКолонок = ТаблицаОтличийКолонок.Добавить();
						СтрокаОтличийКолонок.ИндексТаблицыОтличийСтрок = ТаблицаОтличийСтрок.Индекс(СтрокаОтличий);
						СтрокаОтличийКолонок.ИмяПоля = ТекКолонка.Имя;
						СтрокаОтличийКолонок.ЗначениеСтарое = СтрокаСтарыхДвижений[ТекКолонка.Имя];
						СтрокаОтличийКолонок.ЗначениеНовое = СтрокиНовыхДвижений[0][ТекКолонка.Имя];
						
					КонецЕсли;
					
				КонецЦикла;
				
				ДвиженияНовые.Удалить(СтрокиНовыхДвижений[0]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаНовыхДвижений Из ДвиженияНовые Цикл
			
			СтрокаОтличий = ТаблицаОтличийСтрок.Добавить();
			СтрокаОтличий.Отличие = НСтр("ru='Только в новых движениях'");
			СтрокаОтличий.ОперацияУчетаСебестоимости = СтрокаНовыхДвижений.ОперацияУчетаСебестоимости;
			СтрокаОтличий.ХозяйственнаяОперация = СтрокаНовыхДвижений.ХозяйственнаяОперация;
						
			Для Каждого ТекСтр Из МассивКолонкиСопоставления Цикл
				СтрокаОтличий[ТекСтр] = СтрокаНовыхДвижений[ТекСтр];
			КонецЦикла;
			
		КонецЦикла;
		
		Если ТаблицаОтличийСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыведенаГруппаТипаРегистратора Тогда
			
			Секция = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1, , ТабДок.ВысотаТаблицы + 1);
			Область = Секция.Область(1, 1, 1, 1);
			
			Область.Текст = СокрЛП(Метаданные.НайтиПоТипу(ТекущийТипРегистратора).Имя);
			Область.Шрифт = Новый Шрифт(Область.Шрифт,, Область.Шрифт.Размер + 2, Истина); 
			
			ТабДок.Вывести(Секция);
			
			ТабДок.НачатьГруппуСтрок("Группа" + Формат(НомерГруппы, "ЧГ="), Истина);
			КоличествоГрупп = КоличествоГрупп + 1;
			НомерГруппы = НомерГруппы + 1;
			ВыведенаГруппаТипаРегистратора = Истина;
			
		КонецЕсли;
		
		Секция = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1, , ТабДок.ВысотаТаблицы + 1);
		ТабДок.Вывести(Секция);
		
		Секция = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1, , ТабДок.ВысотаТаблицы + 1);
		Область = Секция.Область(1, 1, 1, 1);
		
		Область.Текст = СокрЛП(СтрокаРегистраторы.Регистратор);
		Область.Расшифровка = СтрокаРегистраторы.Регистратор;
		Область.Шрифт = Новый Шрифт(Область.Шрифт,, Область.Шрифт.Размер + 1, Истина); 
		
		ТабДок.Вывести(Секция);
		
		ТабДок.НачатьГруппуСтрок("Группа" + Формат(НомерГруппы, "ЧГ="), Истина);
		КоличествоГрупп = КоличествоГрупп + 1;
		НомерГруппы = НомерГруппы + 1;
		
		Секция = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1, , ТабДок.ВысотаТаблицы + 1);
		НомерКолонки = 0;
		
		Для Каждого ТекКолонка Из ТаблицаОтличийСтрок.Колонки Цикл
			
			НомерКолонки = НомерКолонки + 1;
			Область = Секция.Область(1, НомерКолонки, 1, НомерКолонки);
			ОбвестиОбласть(Область);
			
			Область.Текст = ТекКолонка.Имя;
			Область.Шрифт = Новый Шрифт(Область.Шрифт,,, Истина); 
			
		КонецЦикла;
		
		ТабДок.Вывести(Секция);
		
		Для Каждого СтрокаОтличий Из ТаблицаОтличийСтрок Цикл
			
			Секция = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1, , ТабДок.ВысотаТаблицы + 1);
			НомерКолонки = 0;
			
			Для Каждого ТекКолонка Из ТаблицаОтличийСтрок.Колонки Цикл
				
				НомерКолонки = НомерКолонки + 1;
				Область = Секция.Область(1, НомерКолонки, 1, НомерКолонки);
				ОбвестиОбласть(Область);
				
				Область.Текст = СокрЛП(СтрокаОтличий[ТекКолонка.Имя]);
				Область.Расшифровка = СтрокаОтличий[ТекКолонка.Имя];
				
			КонецЦикла;
			
			ТабДок.Вывести(Секция);
			
			ОтличияКолонок = ТаблицаОтличийКолонок.НайтиСтроки(Новый Структура("ИндексТаблицыОтличийСтрок", ТаблицаОтличийСтрок.Индекс(СтрокаОтличий)));
			
			Если ОтличияКолонок.Количество() > 0 Тогда
				
				Секция = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1, , ТабДок.ВысотаТаблицы + 1);
				НомерКолонки = 1;
				
				Для Каждого ТекКолонка Из ТаблицаОтличийКолонок.Колонки Цикл
					
					Если ТекКолонка.Имя = "ИндексТаблицыОтличийСтрок" Тогда
						Продолжить;
					КонецЕсли;
					
					НомерКолонки = НомерКолонки + 1;
					Область = Секция.Область(1, НомерКолонки, 1, НомерКолонки);
					ОбвестиОбласть(Область);
					
					Область.Текст = СокрЛП(ТекКолонка.Заголовок);
					Область.Шрифт = Новый Шрифт(Область.Шрифт,, Область.Шрифт.Размер - 1, Истина); 
					
				КонецЦикла;
				
				ТабДок.Вывести(Секция);
				
				Для Каждого СтрокаОтличийКолонок Из ОтличияКолонок Цикл
					
					Секция = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1, , ТабДок.ВысотаТаблицы + 1);
					НомерКолонки = 1;
					
					Для Каждого ТекКолонка Из ТаблицаОтличийКолонок.Колонки Цикл
						
						Если ТекКолонка.Имя = "ИндексТаблицыОтличийСтрок" Тогда
							Продолжить;
						КонецЕсли;
						
						НомерКолонки = НомерКолонки + 1;
						Область = Секция.Область(1, НомерКолонки, 1, НомерКолонки);
						ОбвестиОбласть(Область);
						
						Область.Текст = СокрЛП(СтрокаОтличийКолонок[ТекКолонка.Имя]);
						Область.Расшифровка = СтрокаОтличийКолонок[ТекКолонка.Имя];
						Область.Шрифт = Новый Шрифт(Область.Шрифт,, Область.Шрифт.Размер - 1); 
						
					КонецЦикла;
					
					ТабДок.Вывести(Секция);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоГрупп > 0 Тогда
			ТабДок.ЗакончитьГруппуСтрок();
			КоличествоГрупп = КоличествоГрупп - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоГрупп > 0 Тогда
		ТабДок.ЗакончитьГруппуСтрок();
		КоличествоГрупп = КоличествоГрупп - 1;
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Процедура ОбвестиОбласть(Область)
	
	Область.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	Область.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	Область.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	Область.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
КонецПроцедуры

Функция ПолучитьДвиженияДокументов(НачалоПериода, КонецПериода)
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ?(ЗначениеЗаполнено(НачалоПериода), НачалоМесяца(НачалоПериода), Дата(1,1,1)));
	Запрос.УстановитьПараметр("КонецПериода",  ?(ЗначениеЗаполнено(КонецПериода), КонецМесяца(КонецПериода), КонецМесяца(ТекущаяДатаСеанса())));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТИПЗНАЧЕНИЯ(Т.Регистратор) КАК ТипРегистратора,
	|	*
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|   И НЕ Т.РасчетПартий
	|   И НЕ Т.РасчетСебестоимости
	|   
	|УПОРЯДОЧИТЬ ПО
	|	Т.Регистратор,
	|	Т.НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат.Вставить("СебестоимостьТоваров", Запрос.Выполнить().Выгрузить());
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТекстыЗапросов() Экспорт
	
	ЗапросыПоДокументам = Новый Структура;
	
	Запрос        = ИнициализироватьЗапросДляПроведения();
	ТекстыЗапроса = Новый СписокЗначений;
	Регистры	  = Неопределено;
	
	ПравилаЗаполнения = РасчетСебестоимостиПовтИсп.ПравилаЗаполненияПоляТипЗаписи();
	
	Для Каждого Мета Из Метаданные.Документы Цикл
		
		Если НЕ Мета.Движения.Содержит(Метаданные.РегистрыНакопления.СебестоимостьТоваров) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПравил = ПравилаЗаполнения.НайтиСтроки(Новый Структура("ИмяДокумента", Мета.Имя));
		Если СтрокиПравил.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьТекстЗапроса = Ложь;
		Для Каждого Правило Из СтрокиПравил Цикл
			Если ЗначениеЗаполнено(Правило.ХозяйственнаяОперация) Тогда
				ЕстьТекстЗапроса = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьТекстЗапроса Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыУстановлены = Ложь;
		
		Пока НЕ ПараметрыУстановлены  Цикл
			
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Попытка
				
				ТекстыЗапроса.Очистить();
				
				//++ Локализация
				Если Мета = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
					ТекстЗапроса =
						МаркировкаТоваровГИСМУТ.ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
				ИначеЕсли Мета = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
					ТекстЗапроса =
						МаркировкаТоваровГИСМУТ.ТекстЗапросаТаблицаСебестоимостьТоваровПеремаркировкаТоваров(Запрос, ТекстыЗапроса, Регистры);
				Иначе
				//-- Локализация
					ТекстЗапроса = Документы[Мета.Имя].ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
				//++ Локализация
				КонецЕсли;
				//-- Локализация
				
				ПараметрыУстановлены = Истина;
				
				Если ТипЗнч(ТекстЗапроса) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(ТекстЗапроса)
				 ИЛИ ТекстыЗапроса.Количество() = 0 Тогда
					
					ТекстЗапроса = "";
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Документ'") + " " + Мета.Имя + ": "
						+ НСтр("ru='ошибка интерфейса функции формирования текста запроса'"));
					
				Иначе
					
					ТекстЗапроса = "";
					
					Для Каждого ТекущийЗапрос Из ТекстыЗапроса Цикл
						
						ТекстВыборки = СтрЗаменить(ТекущийЗапрос.Значение, " ", "");;
						ТекстВыборки = СтрЗаменить(ТекстВыборки, "	", "");;
						ТекстВыборки = СтрЗаменить(ТекстВыборки, Символы.ПС, "");;
						
						Если СтрНайти(НРег(ТекстВыборки), "выбрать*") > 0 Тогда
							Продолжить; // такой запрос плохо переваривается схемой запроса
						КонецЕсли;
							
						ТекстЗапроса =
							ТекстЗапроса
							+ ?(ТекстЗапроса = "", "", Символы.ПС + ";" + Символы.ПС)
							+ СокрЛП(ТекущийЗапрос.Значение);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Исключение
				
				ТекстЗапроса = "";
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				Если СтрНайти(ТекстОшибки, "Метод объекта не обнаружен") > 0 Тогда
					
					ПараметрыУстановлены = Истина;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Документ'") + " " + Мета.Имя + ": "
						+ НСтр("ru='нет функции формирования текста запроса'"));
					
				ИначеЕсли СтрНайти(ТекстОшибки, "Поле объекта не обнаружено") > 0 Тогда
					
					Подстрока = Сред(ТекстОшибки, СтрНайти(ТекстОшибки, "Поле объекта не обнаружено"));
					Подстрока = Сред(Подстрока, СтрНайти(Подстрока, "(") + 1);
					Подстрока = Лев(Подстрока, СтрНайти(Подстрока, ")") - 1);
					
					Если НЕ Запрос.Параметры.Свойство(Подстрока) Тогда 
						Запрос.Параметры.Вставить(Подстрока, Истина);
					КонецЕсли;
					
				ИначеЕсли СтрНайти(ТекстОшибки, "Не задано значение параметра") > 0 Тогда
					
					Подстрока = Сред(ТекстОшибки, СтрНайти(ТекстОшибки, "Не задано значение параметра"));
					Подстрока = Сред(Подстрока, СтрНайти(Подстрока, """") + 1);
					Подстрока = Лев(Подстрока, СтрНайти(Подстрока, """") - 1);
					
					Если НЕ Запрос.Параметры.Свойство(Подстрока) Тогда 
						Запрос.Параметры.Вставить(Подстрока, Истина);
					КонецЕсли;
					
				Иначе
					
					ПараметрыУстановлены = Истина;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Документ'") + " " + Мета.Имя + ": "
						+ НСтр("ru='ошибка вызова функции формирования текста запроса'") + " :"
						+ Символы.ПС + ТекстОшибки);
					
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ЗапросыПоДокументам.Вставить(Мета.Имя, "");
			Продолжить;
		КонецЕсли;
		
		ЗапросыПоДокументам.Вставить(Мета.Имя, СокрЛП(ТекстЗапроса));
		
	КонецЦикла;
	
	Возврат ЗапросыПоДокументам;
	
КонецФункции

Функция ПолучитьОписаниеОперацийДокументов() Экспорт
	
	СоответствиеКолонок = Новый Соответствие;
	
	Запрос        = ИнициализироватьЗапросДляПроведения();
	ТекстыЗапроса = Новый СписокЗначений;
	Регистры	  = Неопределено;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ИмяДокумента",    Новый ОписаниеТипов("Строка"),, 50);
	ТаблицаДокументов.Колонки.Добавить("ЕстьТаблицаСумм", Новый ОписаниеТипов("Булево"),, 15);
	ТаблицаДокументов.Колонки.Добавить("ВсегоОпераций",	  Новый ОписаниеТипов("Число"),, 15);
	
	Для Каждого МетаЗначение Из Метаданные.Перечисления.ОперацииУчетаСебестоимости.ЗначенияПеречисления Цикл
		
		ТаблицаДокументов.Колонки.Добавить(МетаЗначение.Имя, Новый ОписаниеТипов("Число"),,  15);
		
		СоответствиеКолонок.Вставить(Перечисления.ОперацииУчетаСебестоимости[МетаЗначение.Имя], МетаЗначение.Имя);
		
	КонецЦикла;
	
	Для Каждого МетаДокумент Из Метаданные.Документы Цикл
		
		Попытка
			//++ Локализация
			Если МетаДокумент = Метаданные.Документы.МаркировкаТоваровГИСМ
			 ИЛИ МетаДокумент = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
				ОписаниеОпераций = МаркировкаТоваровГИСМУТ.ОписаниеОперацийУчетаСебестоимости(Документы[МетаДокумент.Имя].ПустаяСсылка());
			Иначе
			//-- Локализация
				ОписаниеОпераций = Документы[МетаДокумент.Имя].ОписаниеОперацийУчетаСебестоимости(Документы[МетаДокумент.Имя].ПустаяСсылка());
			//++ Локализация
			КонецЕсли;
			//-- Локализация
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если СтрНайти(ТекстОшибки, "Метод объекта не обнаружен") = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Документ'") + " " + МетаДокумент.Имя + ": "
					+ НСтр("ru='ошибка вызова функции описания движений'"));
			КонецЕсли;
				
			Продолжить;
			
		КонецПопытки;
		
		Попытка
			Документы[МетаДокумент.Имя].СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);
			ЕстьТаблицаСумм = Истина;
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если СтрНайти(ТекстОшибки, "Метод объекта не обнаружен") = 0 Тогда
				// ТоДо надо ли?
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//	НСтр("ru='Документ'") + " " + МетаДокумент.Имя + ": "
				//	+ НСтр("ru='ошибка вызова функции формирования таблицы сумм'"));
			КонецЕсли;
			ЕстьТаблицаСумм = Ложь;
		КонецПопытки;
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.ИмяДокумента 	= МетаДокумент.Имя;
		НоваяСтрока.ЕстьТаблицаСумм	= ЕстьТаблицаСумм;
		
		Для Каждого ТекущаяОперация Из ОписаниеОпераций Цикл
			
			НоваяСтрока.ВсегоОпераций = НоваяСтрока.ВсегоОпераций + 1;
			НоваяСтрока[СоответствиеКолонок.Получить(ТекущаяОперация.ВидОперации)] = НоваяСтрока[СоответствиеКолонок.Получить(ТекущаяОперация.ВидОперации)] + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция ИнициализироватьЗапросДляПроведения()
	
	Запрос        = Новый Запрос;
	//Запрос.Параметры.Вставить("АвтоТест", Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Ссылка;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	// Общие
	Запрос.Параметры.Вставить("Дата",   				ТекущаяДатаСеанса());
	Запрос.Параметры.Вставить("Период", 				ТекущаяДатаСеанса());
	Запрос.Параметры.Вставить("Ссылка", 				Неопределено);
	Запрос.Параметры.Вставить("Организация", 			Организация);
	Запрос.Параметры.Вставить("ОрганизацияПолучатель", 	Организация);
	Запрос.Параметры.Вставить("Комиссионер", 			Организация);
	Запрос.Параметры.Вставить("Партнер", 				Неопределено);
	Запрос.Параметры.Вставить("Контрагент",				Неопределено);
	Запрос.Параметры.Вставить("Договор", 				Неопределено);
	Запрос.Параметры.Вставить("Подразделение", 			Неопределено);
	Запрос.Параметры.Вставить("НаправлениеДеятельности",Неопределено);
	
	// Для документов Интеркампани
	Запрос.Параметры.Вставить("АналитикаУчетаПоПартнерамПоставщик", Неопределено);
	Запрос.Параметры.Вставить("АналитикаУчетаПоПартнерамКлиент", Неопределено);
	Запрос.Параметры.Вставить("АналитикаУчетаПолучатель", Неопределено);
	Запрос.Параметры.Вставить("АналитикаКомитентКомиссионер", Неопределено);
	Запрос.Параметры.Вставить("АналитикаКомиссионерКомитент", Неопределено);
	Запрос.Параметры.Вставить("АналитикаВзаиморасчетовКомитентКомиссионер", Неопределено);
	Запрос.Параметры.Вставить("АналитикаВзаиморасчетовКомиссионерКомитент", Неопределено);
	// Для документа СборкаТоваров
	Запрос.Параметры.Вставить("СтоимостьКомплектующихНаКомплектыРаспределена", Истина);
	// Прочие
	Запрос.Параметры.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	
	Возврат Запрос;
	
КонецФункции


Функция ТаблицуЗначенийВТабличныйДокумент(Таблица) Экспорт
	
	ВыгрузкаТаблицы = Новый ТабличныйДокумент; // преобразованная в mxl таблица значений
	
	НомерСтроки  = 1;
	НомерКолонки = 0;
	
	// Сформируем шапку табличного документа - выведем имена колонок таблицы значений
	Для Каждого ТекКолонка Из Таблица.Колонки Цикл
		
		НомерКолонки = НомерКолонки + 1;
		
		Область = ВыгрузкаТаблицы.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		
		Область.Текст 		  = ТекКолонка.Имя;
		Область.ШиринаКолонки = ТекКолонка.Ширина;
		Область.Шрифт 		  = Новый Шрифт(Область.Шрифт,,, Истина); 
		Область.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
	КонецЦикла;
	
	// Выведем строки таблицы значений
	Для Каждого ТекСтр Из Таблица Цикл
		
		НомерСтроки = НомерСтроки + 1;
		НомерКолонки = 0;
		
		Для Каждого ТекКолонка Из Таблица.Колонки Цикл
			
			НомерКолонки = НомерКолонки + 1;
			Текст = СокрЛП(ТекСтр[ТекКолонка.Имя]);
			
			Область = ВыгрузкаТаблицы.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Область.Текст = ?(Текст = "0", "", Текст);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузкаТаблицы.ФиксацияСверху = 1;
	ВыгрузкаТаблицы.ФиксацияСлева  = 1;
	
	Возврат ВыгрузкаТаблицы;
	
КонецФункции

Функция ТипыДокументовДляПроведения()
	
	ТипыДокументов = Новый Массив;
	
	Возврат ТипыДокументов;
	
КонецФункции

#КонецОбласти

#КонецЕсли
