
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НомерПорции = 1;
	
	ЗаполнитьСписокВыгружаемыхКоллекций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжиданияИндикатораВыгрузки();
	ОбновитьИнформациюОВыгрузкеКоллекций();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолныйСбросНастроек(Команда)
	ТекстВопроса = НСтр("ru = 'Будет выполнен полный сброс настроек. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПолныйСбросНастроекЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ПолныйСбросНастроекЗавершение(Результат, ПараметрКоманды) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПолныйСбросНастроекНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяВыгрузкаМягкая(Команда)
	ТекстВопроса = НСтр("ru = 'Будет выполнена полная выгрузка данных. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПолнаяВыгрузкаМягкаяЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяВыгрузкаМягкаяЗавершение(Результат, ПараметрКоманды) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПолнаяВыгрузкаМягкаяНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяВыгрузкаЖесткая(Команда)
	ТекстВопроса = НСтр("ru = 'Будет выполнена полная выгрузка данных с предварительным удалением на сервере. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПолнаяВыгрузкаЖесткаяЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяВыгрузкаЖесткаяЗавершение(Результат, ПараметрКоманды) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПолнаяВыгрузкаЖесткаяНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыгружаемыхКоллекций(Команда)
	ОбновитьСписокВыгружаемыхКоллекцийНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииНаСервереСнятьВыделение(Команда)
	КоллекцииНаСервереСнятьВыделениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииНаСервереВыделитьВсе(Команда)
	КоллекцииНаСервереВыделитьВсеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоставКоллекций(Команда)
	ОбновитьСоставКоллекцийНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыбранныеКоллекции(Команда)
	ОчиститьВыбранныеКоллекцииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныеКоллекции(Команда)
	УдалитьВыбранныеКоллекцииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсключенныеОбъекты(Команда)
	ОчиститьСообщения();
	ОбновитьИсключенныеОбъектыНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСезонность(Команда)
	ОчиститьСообщения();
	ОбновитьСезонностьНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСезонностьПоМесяцам(Команда)
	ОчиститьСообщения();
	ОбновитьСезонностьПоМесяцамНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТочностьМодели(Команда)
	ОчиститьСообщения();
	ОбновитьТочностьМоделиНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТочностьМоделиПланФактПоВсемПериодам(Команда)
	ОчиститьСообщения();
	ОбновитьТочностьМоделиПланФактПоВсемПериодамНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТочностьМоделиПланФактПоПериодам(Команда)
	ОчиститьСообщения();
	ОбновитьТочностьМоделиПланФактПоПериодамНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТочностьМоделиПоОбъектам(Команда)
	ОчиститьСообщения();
	ОбновитьТочностьМоделиПоОбъектамНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюОбучения(Команда)
	ОчиститьСообщения();
	ОбновитьИсториюОбученияНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьВыгрузку(Команда)
	ТекстВопроса = НСтр("ru = 'Текущая выгрузка будет прервана. Выгруженные данные останутся на сервере. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ПрерватьВыгрузкуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьВыгрузкуЗавершение(Результат, ПараметрКоманды) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПрерватьВыгрузкуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СезонностьПоМесяцамПриАктивизацииЯчейки(Элемент)
	ВыделенныеСтроки = Элементы.СезонностьПоМесяцам.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		ВывестиСезонность(ВыделенныеСтроки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиСезонность(ВыделенныеСтроки)
	
	ГрафикСезонности.Очистить();
	
	ТаблицаВыделенныхСтрок = Новый ТаблицаЗначений();
	ТаблицаВыделенныхСтрок.Колонки.Добавить("ПоляСезонности", Новый ОписаниеТипов("Строка"));
	ТаблицаВыделенныхСтрок.Колонки.Добавить("НомерМесяца", Новый ОписаниеТипов("Число"));
	ТаблицаВыделенныхСтрок.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Строка"));
	ТаблицаВыделенныхСтрок.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	Месяца = Месяца();
	ШаблонСтрокиСезонности = НСтр("ru = '%1 (%2 год)'");
	
	Для Каждого НомерСтроки Из ВыделенныеСтроки Цикл
		Строка = СезонностьПоМесяцам.НайтиПоИдентификатору(НомерСтроки);
		ПоляСезонности = СтрШаблон(ШаблонСтрокиСезонности, Строка.ПоляСезонности, Формат(Строка.Год, "ДФ=yyyy"));
		Для Индекс = 0 По 11 Цикл
			НоваяВыделеннаяСтрока = ТаблицаВыделенныхСтрок.Добавить();
			НоваяВыделеннаяСтрока.ПоляСезонности = ПоляСезонности;
			НоваяВыделеннаяСтрока.Месяц = Месяца[Индекс];
			НоваяВыделеннаяСтрока.НомерМесяца = Индекс + 1;
			НоваяВыделеннаяСтрока.Коэффициент = Строка[Месяца[Индекс] + "Коэффициент"];
		КонецЦикла;
	КонецЦикла;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ПостроительГрафикаСезонности");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ВнешнийНаборДанных = Новый Структура();
	ВнешнийНаборДанных.Вставить("ВтСезонность", ТаблицаВыделенныхСтрок);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ГрафикСезонности);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьСбросНастроек(Команда)
	Элементы.ПолныйСбросНастроек.Доступность = Не Элементы.ПолныйСбросНастроек.Доступность;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	НеВыполняетсяЗапросКСервису = ПустаяСтрока(ИдентификаторЗадания);
	Элементы.КоллекцииНаСервереОбновитьСоставКоллекций.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьИсключенныеОбъекты.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьИсториюОбучения.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьСезонность.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьСезонность1.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьТочностьМодели.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьТочностьМоделиПланФактПоВсемПериодам.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьТочностьМоделиПланФактПоПериодам.Доступность = НеВыполняетсяЗапросКСервису;
	Элементы.ОбновитьТочностьМоделиПоОбъектам.Доступность = НеВыполняетсяЗапросКСервису;
	
КонецПроцедуры

&НаСервере
Процедура ПолныйСбросНастроекНаСервере()
	
	СервисПрогнозирования.СброситьНастройкиСервиса();
	
	КомпоновщикВыгрузки = Новый КомпоновщикНастроекКомпоновкиДанных();
	
	НастройкиОтборов = Новый Структура();
	НастройкиОтборов.Вставить("ОбщийОтборВыгрузки", КомпоновщикВыгрузки.Настройки);
	ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиОтборов);

	Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
	КомпоновщикЗагрузки = Новый КомпоновщикНастроекКомпоновкиДанных();
	
	НастройкиОтборов = Новый Структура();
	НастройкиОтборов.Вставить("ОбщийОтборЗагрузки", КомпоновщикЗагрузки.Настройки);
	
	ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиОтборов);

	Константы.НастройкиОтборовНаЗагрузкуСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
	Набор = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.СоздатьНаборЗаписей();
	Набор.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПолнаяВыгрузкаМягкаяНаСервере()
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	КоллекцииКВыгрузке.Очистить();
	Для Каждого Коллекция Из ВыгружаемыеКоллекции Цикл
		Если Не Коллекция.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеКоллекции = НастройкиСервиса.Коллекции[Коллекция.Значение];
		КоллекцииКВыгрузке.Добавить(Коллекция.Значение);
		
		Если ОписаниеКоллекции.Выгружать
			И НастройкиСервиса.ИзмененияКоллекций.Свойство(ОписаниеКоллекции.ИмяВИсточнике)
			И Не ОписаниеКоллекции.Категориальный Тогда
			// При выгрузке будет автоматически сброшена дата актуальности.
			НастройкиСервиса.ИзмененияКоллекций[ОписаниеКоллекции.ИмяВИсточнике].ИзмененыОтборы = Истина;
		КонецЕсли;
	КонецЦикла;
	СервисПрогнозирования.ОбновитьНастройкиСервиса(НастройкиСервиса);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("СервисПрогнозирования.ВыгрузитьКоллекции",
	                                                     КоллекцииКВыгрузке.ВыгрузитьЗначения(),
	                                                     ПараметрыВыполнения);
	
	ОбновитьИнформациюОВыгрузкеКоллекций();
	
КонецПроцедуры

&НаСервере
Процедура ПолнаяВыгрузкаЖесткаяНаСервере()
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	КоллекцииКВыгрузке.Очистить();
	Для Каждого Коллекция Из ВыгружаемыеКоллекции Цикл
		Если Не Коллекция.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеКоллекции = НастройкиСервиса.Коллекции[Коллекция.Значение];
		КоллекцииКВыгрузке.Добавить(Коллекция.Значение);
		
		Если ОписаниеКоллекции.Выгружать Тогда
			Если НастройкиСервиса.ИзмененияКоллекций.Свойство(ОписаниеКоллекции.ИмяВИсточнике)
			И Не ОписаниеКоллекции.Категориальный Тогда
				// При выгрузке будет автоматически сброшена дата актуальности.
				// Все коллекции так же будут удалены на сервере в методе СоздатьКоллекции при такой настройке.
				НастройкиСервиса.ИзмененияКоллекций[ОписаниеКоллекции.ИмяВИсточнике].ИзмененыОтборы = Истина;
			КонецЕсли;
			НастройкиСервиса.ИзмененияКоллекций[ОписаниеКоллекции.ИмяВИсточнике].ИзмененФормат = Истина;
		КонецЕсли;
	КонецЦикла;
	СервисПрогнозирования.ОбновитьНастройкиСервиса(НастройкиСервиса);
	
	СервисПрогнозирования.СоздатьКоллекции(КоллекцииКВыгрузке.ВыгрузитьЗначения());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("СервисПрогнозирования.ВыгрузитьКоллекции",
	                                                     КоллекцииКВыгрузке.ВыгрузитьЗначения(),
	                                                     ПараметрыВыполнения);
	
	ОбновитьИнформациюОВыгрузкеКоллекций();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыгружаемыхКоллекцийНаСервере()
	ЗаполнитьСписокВыгружаемыхКоллекций();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыгружаемыхКоллекций()
	
	ВыгружаемыеКоллекции.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Для Каждого КлючЗначениеКоллекции Из НастройкиСервиса.Коллекции Цикл
		ОписаниеКоллекции = КлючЗначениеКоллекции.Значение;
		Если ОписаниеКоллекции.Выгружать Тогда
			НоваяСтрока = ВыгружаемыеКоллекции.Добавить();
			НоваяСтрока.Значение = КлючЗначениеКоллекции.Ключ;
			НоваяСтрока.Пометка = Ложь;
			Если НастройкиСервиса.ИзмененияКоллекций.Свойство(КлючЗначениеКоллекции.Ключ) Тогда
				ОписаниеИзмененияКоллекции = НастройкиСервиса.ИзмененияКоллекций[КлючЗначениеКоллекции.Ключ];
				ШаблонПредставления = НСтр("ru = '%1, при выгрузке последней порции: %2, выгружено: %3, принято сервером: %4'");
				НоваяСтрока.Представление = СтрШаблон(ШаблонПредставления, КлючЗначениеКоллекции.Значение.Представление,
					ОписаниеИзмененияКоллекции.ДатаВыгрузки,
					ОписаниеИзмененияКоллекции.КоличествоДанныхВыгруженное,
					ОписаниеИзмененияКоллекции.КоличествоДанныхНаСервере);
			Иначе
				ШаблонПредставления = НСтр("ru = '%1, выгрузка не проводилась'");
				НоваяСтрока.Представление = СтрШаблон(ШаблонПредставления, КлючЗначениеКоллекции.Значение.Представление);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцииНаСервереВыделитьВсеНаСервере()
	Для Каждого Строка Из КоллекцииНаСервере Цикл
		Строка.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура КоллекцииНаСервереСнятьВыделениеНаСервере()
	Для Каждого Строка Из КоллекцииНаСервере Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставКоллекцийНаСервере()
	
	ИмяМетода = ИмяМетодаПолучитьПереченьКоллекций();
	ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставКоллекцийНаСервереФинальный()
	
	СписокКоллекций = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	КоллекцииНаСервере.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	ОписаниеКоллекций = СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций();
	Если ТипЗнч(СписокКоллекций.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Строка Из СписокКоллекций.ДесериализованноеЗначение Цикл
		НоваяСтрока = КоллекцииНаСервере.Добавить();
		НоваяСтрока.ИмяВСервисе = Строка["name"];
		НоваяСтрока.ИдентификаторКоллекции = Строка["id"];
		
		Для Каждого ОписаниеКоллекции Из ОписаниеКоллекций Цикл
			Если ОписаниеКоллекции.Значение.ИмяВСервисе = НоваяСтрока.ИмяВСервисе Тогда
				НоваяСтрока.ПредставлениеКоллекции = ОписаниеКоллекции.Значение.Представление;
				НоваяСтрока.ИмяВИсточнике = ОписаниеКоллекции.Значение.ИмяВИсточнике;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НастройкиСервиса.ИзмененияКоллекций.Свойство(НоваяСтрока.ИмяВИсточнике) Тогда
			ОписаниеИзменений = НастройкиСервиса.ИзмененияКоллекций[НоваяСтрока.ИмяВИсточнике];
			Если ОписаниеИзменений.ИдКоллекции = НоваяСтрока.ИдентификаторКоллекции Тогда
				НоваяСтрока.КоличествоВСервисеПриПоследнейВыгрузке = ОписаниеИзменений.КоличествоДанныхНаСервере;
				НоваяСтрока.КоличествоВИсточникеПриПоследнейВыгрузке = ОписаниеИзменений.КоличествоДанныхВыгруженное;
			КонецЕсли;
		КонецЕсли;
		
		ИнфоКоллекций = СервисПрогнозирования.ПолучитьИнфоКоллекцииНаСервере(НоваяСтрока.ИдентификаторКоллекции).ДесериализованноеЗначение;
		Если ТипЗнч(ИнфоКоллекций) = Тип("Соответствие") Тогда
			НоваяСтрока.КоличествоДанных = Число(ИнфоКоллекций["info"]["rowCount"]);
		КонецЕсли;
	КонецЦикла;
	
	КоллекцииНаСервере.Сортировать("ИмяВСервисе, ИдентификаторКоллекции");
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода = Неопределено)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Если ПараметрыМетода = Неопределено
		Или ПараметрыМетода.Количество() = 0 Тогда
		РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			ИмяМетода);
	ИначеЕсли ПараметрыМетода.Количество() = 1 Тогда
		РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			ИмяМетода,
			ПараметрыМетода[0]);
	ИначеЕсли ПараметрыМетода.Количество() = 2 Тогда
		РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			ИмяМетода,
			ПараметрыМетода[0],
			ПараметрыМетода[1]);
	КонецЕсли;
	ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
	АдресРезультата = РезультатРасчета.АдресРезультата;
	ИмяМетодаФоновогоЗадания = ИмяМетода;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВыбранныеКоллекцииНаСервере()
	
	Для Каждого Строка Из КоллекцииНаСервере Цикл
		Если Строка.Пометка
			И Строка.ИдентификаторКоллекции <> 0 Тогда
			ОчиститьУдалитьКоллекцию(Строка.ИдентификаторКоллекции);
		КонецЕсли;
	КонецЦикла;
	ОбновитьСоставКоллекцийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыбранныеКоллекцииНаСервере()
	
	Для Каждого Строка Из КоллекцииНаСервере Цикл
		Если Строка.Пометка
			И Строка.ИдентификаторКоллекции <> 0 Тогда
			ОчиститьУдалитьКоллекцию(Строка.ИдентификаторКоллекции, Истина);
			
			НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
			НастройкиСервиса.ИдКоллекций.Удалить(Строка.ИмяВСервисе);
			НастройкиСервиса.ИзмененияКоллекций[Строка.ИмяВИсточнике].ИзмененФормат = Ложь;
			СервисПрогнозирования.ОбновитьНастройкиСервиса(НастройкиСервиса);
			
		КонецЕсли;
	КонецЦикла;
	ОбновитьСоставКоллекцийНаСервере();

КонецПроцедуры

// Очистить или удалить коллекцию на сервере.
// 
// Параметры:
//  ИдКоллекции - Число - Ид коллекции
//  УдалитьКоллекцию - Булево - Удалить коллекцию
&НаСервере
Процедура ОчиститьУдалитьКоллекцию(ИдКоллекции, УдалитьКоллекцию = Ложь)
	
	СервисПрогнозирования.ОчиститьУдалитьКоллекцию(ИдКоллекции, УдалитьКоллекцию);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсключенныеОбъектыНаСервере()
	Если СценарийИВидПланаЗаполнены() Тогда
		ИмяМетода = ИмяМетодаПолучитьИсключенныеОбъекты();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсключенныеОбъектыНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ИсключенныеОбъекты.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	НайденныеАналоги = Новый Соответствие;
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИсключенныйОбъект Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = ИсключенныеОбъекты.Добавить();
		НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["customer_id"]));
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["shop_id"]));
		НоваяСтрока.Дата = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(ИсключенныйОбъект["date"]);
		НоваяСтрока.Причина = ИсключенныйОбъект["exclude_reason"];
		НоваяСтрока.Количество = Число(ИсключенныйОбъект["quantity"]);
		
		Ответ = СервисПрогнозированияПереопределяемый.ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(
			ИсключенныйОбъект["item_id"],
			НастройкиСервиса,
			НайденныеАналоги);
		Номенклатура = Ответ.Номенклатура;
		НайденныеАналоги = Ответ.НайденныеАналоги;
		НоваяСтрока.Номенклатура = Номенклатура;
		
	КонецЦикла;
	
	ИсключенныеОбъекты.Сортировать("Номенклатура, Дата, Склад, Партнер");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСезонностьНаСервере()
	Если СценарийИВидПланаЗаполнены() Тогда
		ИмяМетода = ИмяМетодаПолучитьСезонность();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСезонностьНаСервереФинальный()
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	ПоляТоваров = НастройкиСервиса.Коллекции.Товары.ВложенноеОписание;
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	Сезонность.ПолучитьЭлементы().Очистить();
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СезонностьПоПолям Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		
		ПоляСезонности = Новый Массив();
		СезонностьПоПолямИДатам = Новый ТаблицаЗначений();
		СезонностьПоПолямИДатам.Колонки.Добавить("ПоляСезонности", Новый ОписаниеТипов("Строка"));
		СезонностьПоПолямИДатам.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		СезонностьПоПолямИДатам.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
		
		Для Каждого СтрокаСезонности Из СезонностьПоПолям Цикл
			Если СтрНайти(СтрокаСезонности.Ключ, "-") > 0 Тогда
				НоваяСтрока = СезонностьПоПолямИДатам.Добавить();
				НоваяСтрока.Дата = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(СтрокаСезонности.Ключ);
				НоваяСтрока.Коэффициент = Число(СтрокаСезонности.Значение);
			ИначеЕсли СтрокаСезонности.Ключ = "sescat_name" Тогда
				ПоляСезонности.Добавить(НСтр("ru='Группа по умолчанию'"));
			Иначе
				ОписаниеРеквизита = СервисПрогнозированияПереопределяемый.НайтиОписаниеРеквизитаКоллекцииПоИмениВСервисе(
					ПоляТоваров, СтрокаСезонности.Ключ);
				
				ЗначениеСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеРеквизита.ДополнительноеСвойство, "ТипЗначения");
				ЗначениеПоляСезонности = СтрокаСезонности.Значение;
				ЭтоУИД = СервисПрогнозирования.ЭтоУникальныйИдентификатор(СтрокаСезонности.Значение);
				Если ЭтоУИД Тогда
					ЗначениеПоляСезонности = СервисПрогнозированияПереопределяемый.ПолучитьСсылкуПоОписаниюТиповИдентификатору(
						ЗначениеСвойства, СтрокаСезонности.Значение);
				КонецЕсли;
				ШаблонОписанияПоляСезонности = НСтр("ru='%1: %2'");
				ПоляСезонности.Добавить(
					СтрШаблон(ШаблонОписанияПоляСезонности, ОписаниеРеквизита.Представление, ЗначениеПоляСезонности));
			КонецЕсли;
		КонецЦикла;
		
		ГруппировочнаяСтрока = Сезонность.ПолучитьЭлементы().Добавить();
		ГруппировочнаяСтрока.ПоляСезонности = СтрСоединить(ПоляСезонности, ", ");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СезонностьПоПолямИДатам, ГруппировочнаяСтрока.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСезонностьПоМесяцамНаСервере()
	Если СценарийИВидПланаЗаполнены() Тогда
		ИмяМетода = ИмяМетодаПолучитьСезонностьПоМесяцам();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСезонностьПоМесяцамНаСервереФинальный()
	
	Год = Дата(1, 1, 1);
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	ПоляТоваров = НастройкиСервиса.Коллекции.Товары.ВложенноеОписание;
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	СезонностьПоМесяцам.Очистить();
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Месяца = Месяца();
	
	Для Каждого СезонностьПоПолям Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		
		ПоляСезонности = Новый Массив();
		СезонностьПоПолямИДатам = СезонностьПоМесяцам.Выгрузить(Новый Массив);
		
		Для Каждого СтрокаСезонности Из СезонностьПоПолям Цикл
			Если СтрНайти(СтрокаСезонности.Ключ, "-") > 0 Тогда
				Дата = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(СтрокаСезонности.Ключ);
				Коэффициент = Число(СтрокаСезонности.Значение);
				
				НомерГода = Год(Дата);
				НомерМесяца = Месяц(Дата);
				НаименованиеМесяца = Месяца[НомерМесяца - 1];
				НаименованиеКолонки = НаименованиеМесяца + "Коэффициент";
				
				НайденнаяСтрока = СезонностьПоПолямИДатам.Найти(НачалоГода(Дата), "Год");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока[НаименованиеКолонки] = НайденнаяСтрока[НаименованиеКолонки] + Коэффициент;
				Иначе
					НоваяСтрока = СезонностьПоПолямИДатам.Добавить();
					НоваяСтрока.Год = НачалоГода(Дата);
					НоваяСтрока[НаименованиеКолонки] = Коэффициент;
				КонецЕсли;
				
				Если НачалоГода(Дата) > Год Тогда
					Год = НачалоГода(Дата);
				КонецЕсли;
				
			ИначеЕсли СтрокаСезонности.Ключ = "sescat_name" Тогда
				ПоляСезонности.Добавить(НСтр("ru='Группа по умолчанию'"));
			Иначе
				ОписаниеРеквизита = СервисПрогнозированияПереопределяемый.НайтиОписаниеРеквизитаКоллекцииПоИмениВСервисе(
					ПоляТоваров, СтрокаСезонности.Ключ);
				
				ЗначениеСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеРеквизита.ДополнительноеСвойство, "ТипЗначения");
				ЗначениеПоляСезонности = СтрокаСезонности.Значение;
				ЭтоУИД = СервисПрогнозирования.ЭтоУникальныйИдентификатор(СтрокаСезонности.Значение);
				Если ЭтоУИД Тогда
					ЗначениеПоляСезонности = СервисПрогнозированияПереопределяемый.ПолучитьСсылкуПоОписаниюТиповИдентификатору(
						ЗначениеСвойства, СтрокаСезонности.Значение);
				КонецЕсли;
				ШаблонОписанияПоляСезонности = НСтр("ru='%1: %2'");
				ПоляСезонности.Добавить(
					СтрШаблон(ШаблонОписанияПоляСезонности, ОписаниеРеквизита.Представление, ЗначениеПоляСезонности));
			КонецЕсли;
		КонецЦикла;
		СезонностьПоПолямИДатам.ЗаполнитьЗначения(СтрСоединить(ПоляСезонности, ", "), "ПоляСезонности");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СезонностьПоПолямИДатам, СезонностьПоМесяцам);
		
	КонецЦикла;
	
	СезонностьПоМесяцам.Сортировать("Год, ПоляСезонности");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиНаСервере()
	Если СценарийИВидПланаЗаполнены() Тогда
		ИмяМетода = ИмяМетодаПолучитьТочностьМодели();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КачествоМоделейПрогнозирования.Очистить();
	
	Для Каждого ИсключенныйОбъект Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = КачествоМоделейПрогнозирования.Добавить();
		НоваяСтрока.ИмяМодели = ИсключенныйОбъект["predictor"];
		НоваяСтрока.СредняяАбсолютнаяОшибка = Число(ИсключенныйОбъект["MAE"]);
		НоваяСтрока.СредняяАбсолютнаяОшибкаФинал = Число(ИсключенныйОбъект["MAE_final"]);
		НоваяСтрока.СредняяАбсолютнаяОшибкаРяды = Число(ИсключенныйОбъект["MAE_series"]);
		НоваяСтрока.СредняяАбсолютнаяПроцентнаяОшибка = Число(ИсключенныйОбъект["MAPE"]);
		НоваяСтрока.СредняяАбсолютнаяПроцентнаяОшибкаФинал = Число(ИсключенныйОбъект["MAPE_final"]);
		НоваяСтрока.СредняяАбсолютнаяПроцентнаяОшибкаРяды = Число(ИсключенныйОбъект["MAPE_series"]);
		НоваяСтрока.СредняяНормированнаяАбсолютнаяПроцентнаяОшибка = Число(ИсключенныйОбъект["PMAPE"]);
		НоваяСтрока.СредняяНормированнаяАбсолютнаяПроцентнаяОшибкаФинал = Число(ИсключенныйОбъект["PMAPE_final"]);
		НоваяСтрока.СредняяНормированнаяАбсолютнаяПроцентнаяОшибкаРяды = Число(ИсключенныйОбъект["PMAPE_series"]);
		НоваяСтрока.СреднеквадратичноеОтклонение = Число(ИсключенныйОбъект["RMSE"]);
		НоваяСтрока.СреднеквадратичноеОтклонениеФинал = Число(ИсключенныйОбъект["RMSE_final"]);
		НоваяСтрока.СреднеквадратичноеОтклонениеРяды = Число(ИсключенныйОбъект["RMSE_series"]);
		НоваяСтрока.СредняяСимметричнаяАбсолютнаяПроцентнаяОшибка = Число(ИсключенныйОбъект["SMAPE"]);
		НоваяСтрока.СредняяСимметричнаяАбсолютнаяПроцентнаяОшибкаФинал = Число(ИсключенныйОбъект["SMAPE_final"]);
		НоваяСтрока.СредняяСимметричнаяАбсолютнаяПроцентнаяОшибкаРяды = Число(ИсключенныйОбъект["SMAPE_series"]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПланФактПоВсемПериодамНаСервере()
	Если СценарийИВидПланаЗаполнены() Тогда
		ИмяМетода = ИмяМетодаПолучитьТочностьМоделиПланФактПоВсемПериодам();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПланФактПоВсемПериодамНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КачествоМоделейПрогнозированияПоВсемПериодам.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	НайденныеАналоги = Новый Соответствие;
	
	Для Каждого ИсключенныйОбъект Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = КачествоМоделейПрогнозированияПоВсемПериодам.Добавить();
		НоваяСтрока.ИмяМодели = ИсключенныйОбъект["predictor"];
		НоваяСтрока.СредняяАбсолютнаяОшибка = Число(ИсключенныйОбъект["MAE"]);
		НоваяСтрока.СредняяАбсолютнаяОшибкаСумма = Число(ИсключенныйОбъект["MAE_sum"]);
		НоваяСтрока.СредняяАбсолютнаяПроцентнаяОшибка = Число(ИсключенныйОбъект["MAPE"]);
		НоваяСтрока.СредняяАбсолютнаяПроцентнаяОшибкаСумма = Число(ИсключенныйОбъект["MAPE_sum"]);
		НоваяСтрока.СредняяНормированнаяАбсолютнаяПроцентнаяОшибка = Число(ИсключенныйОбъект["PMAPE"]);
		НоваяСтрока.СредняяНормированнаяАбсолютнаяПроцентнаяОшибкаСумма = Число(ИсключенныйОбъект["PMAPE_sum"]);
		НоваяСтрока.СреднеквадратичноеОтклонение = Число(ИсключенныйОбъект["RMSE"]);
		НоваяСтрока.СреднеквадратичноеОтклонениеСумма = Число(ИсключенныйОбъект["RMSE_sum"]);
		НоваяСтрока.СредняяСимметричнаяАбсолютнаяПроцентнаяОшибка = Число(ИсключенныйОбъект["SMAPE"]);
		НоваяСтрока.СредняяСимметричнаяАбсолютнаяПроцентнаяОшибкаСумма = Число(ИсключенныйОбъект["SMAPE_sum"]);
		НоваяСтрока.Элемент = Число(ИсключенныйОбъект["item"]);
		
		НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["customer_id"]));
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["shop_id"]));
		
		Ответ = СервисПрогнозированияПереопределяемый.ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(
			ИсключенныйОбъект["product_id"],
			НастройкиСервиса,
			НайденныеАналоги);
		Номенклатура = Ответ.Номенклатура;
		НайденныеАналоги = Ответ.НайденныеАналоги;
		НоваяСтрока.Номенклатура = Номенклатура;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПланФактПоПериодамНаСервере()
	Если СценарийИВидПланаЗаполнены() Тогда
		ИмяМетода = ИмяМетодаПолучитьТочностьМоделиПланФактПоПериодам();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПланФактПоПериодамНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КачествоМоделейПрогнозированияПоПериодам.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	НайденныеАналоги = Новый Соответствие;
	
	Для Каждого ИсключенныйОбъект Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = КачествоМоделейПрогнозированияПоПериодам.Добавить();
		
		НоваяСтрока.Модель1с = Число(ИсключенныйОбъект["1C_model"]);
		НоваяСтрока.СквозноеТрендовоеРазложение = Число(ИсключенныйОбъект["STL_model"]);
		НоваяСтрока.ТрендовоеРазложение = Число(ИсключенныйОбъект["TL_model"]);
		НоваяСтрока.Бустинг = Число(ИсключенныйОбъект["boosting_model"]);
		НоваяСтрока.ЭкспоненциальноеСглаживание = Число(ИсключенныйОбъект["exp_smoothing"]);
		НоваяСтрока.ЛогарифмЭкспоненциальногоСглаживания = Число(ИсключенныйОбъект["exp_smoothing_log"]);
		НоваяСтрока.Элемент = Число(ИсключенныйОбъект["item"]);
		НоваяСтрока.НаивнаяМодель = Число(ИсключенныйОбъект["naive"]);
		НоваяСтрока.Цена = Число(ИсключенныйОбъект["price"]);
		НоваяСтрока.Коррекция = Число(ИсключенныйОбъект["q_corrected"]);
		НоваяСтрока.РекуррентнаяНейроннаяСеть = Число(ИсключенныйОбъект["rnn_model"]);
		НоваяСтрока.СкользящееСреднее = Число(ИсключенныйОбъект["rolling_mean3"]);
		НоваяСтрока.ЛогарифмСкользящегоСреднего = Число(ИсключенныйОбъект["rolling_mean3_log"]);
		НоваяСтрока.СредняяСезонность = Число(ИсключенныйОбъект["season_mean"]);
		
		НоваяСтрока.Дата = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(ИсключенныйОбъект["date"]);
		
		НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["customer_id"]));
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["shop_id"]));
		
		Ответ = СервисПрогнозированияПереопределяемый.ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(
			ИсключенныйОбъект["product_id"],
			НастройкиСервиса,
			НайденныеАналоги);
		Номенклатура = Ответ.Номенклатура;
		НайденныеАналоги = Ответ.НайденныеАналоги;
		НоваяСтрока.Номенклатура = Номенклатура;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПоОбъектамНаСервере()
	Если СценарийИВидПланаЗаполнены() Тогда
		ИмяМетода = ИмяМетодаПолучитьТочностьМоделиПоОбъектам();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТочностьМоделиПоОбъектамНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КачествоМоделейПрогнозированияПоОбъектам.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	НайденныеАналоги = Новый Соответствие;
	
	Для Каждого ИсключенныйОбъект Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = КачествоМоделейПрогнозированияПоОбъектам.Добавить();
		
		НоваяСтрока.Модель1с = Число(ИсключенныйОбъект["1C_model"]);
		НоваяСтрока.СквозноеТрендовоеРазложение = Число(ИсключенныйОбъект["STL_model"]);
		НоваяСтрока.ТрендовоеРазложение = Число(ИсключенныйОбъект["TL_model"]);
		НоваяСтрока.Бустинг = Число(ИсключенныйОбъект["boosting_model"]);
		НоваяСтрока.ЭкспоненциальноеСглаживание = Число(ИсключенныйОбъект["exp_smoothing"]);
		НоваяСтрока.ЛогарифмЭкспоненциальногоСглаживания = Число(ИсключенныйОбъект["exp_smoothing_log"]);
		НоваяСтрока.Элемент = Число(ИсключенныйОбъект["item"]);
		НоваяСтрока.НаивнаяМодель = Число(ИсключенныйОбъект["naive"]);
		НоваяСтрока.Цена = Число(ИсключенныйОбъект["price"]);
		НоваяСтрока.Коррекция = Число(ИсключенныйОбъект["q_corrected"]);
		НоваяСтрока.РекуррентнаяНейроннаяСеть = Число(ИсключенныйОбъект["rnn_model"]);
		НоваяСтрока.СкользящееСреднее = Число(ИсключенныйОбъект["rolling_mean3"]);
		НоваяСтрока.ЛогарифмСкользящегоСреднего = Число(ИсключенныйОбъект["rolling_mean3_log"]);
		НоваяСтрока.СредняяСезонность = Число(ИсключенныйОбъект["season_mean"]);
		
		НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["customer_id"]));
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ИсключенныйОбъект["shop_id"]));
		
		Ответ = СервисПрогнозированияПереопределяемый.ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(
			ИсключенныйОбъект["product_id"],
			НастройкиСервиса,
			НайденныеАналоги);
		Номенклатура = Ответ.Номенклатура;
		НайденныеАналоги = Ответ.НайденныеАналоги;
		НоваяСтрока.Номенклатура = Номенклатура;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Месяца()
	
	Месяца = Новый Массив();
	Месяца.Добавить("Январь");
	Месяца.Добавить("Февраль");
	Месяца.Добавить("Март");
	Месяца.Добавить("Апрель");
	Месяца.Добавить("Май");
	Месяца.Добавить("Июнь");
	Месяца.Добавить("Июль");
	Месяца.Добавить("Август");
	Месяца.Добавить("Сентябрь");
	Месяца.Добавить("Октябрь");
	Месяца.Добавить("Ноябрь");
	Месяца.Добавить("Декабрь");
	
	Возврат Месяца;
	
КонецФункции

&НаСервере
Процедура ОбновитьИсториюОбученияНаСервере()
	Если СценарийИВидПланаЗаполнены() Тогда
		ИмяМетода = ИмяМетодаОбновитьИсториюОбучения();
		ПараметрыМетода = Новый Массив();
		ПараметрыМетода.Добавить(ВидПлана);
		ПараметрыМетода.Добавить(НомерПорции);
		ЗапуститьФоновоеЗаданиеПолучениеДанныхСервиса(ИмяМетода, ПараметрыМетода);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсториюОбученияНаСервереФинальный()
	
	СтруктураОтвета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ИсторияОбучения.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	НайденныеАналоги = Новый Соответствие;
	
	Если ТипЗнч(СтруктураОтвета.ДесериализованноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбъектИстории Из СтруктураОтвета.ДесериализованноеЗначение Цикл
		НоваяСтрока = ИсторияОбучения.Добавить();
		НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ОбъектИстории["customer_id"]));
		НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(
			СервисПрогнозирования.ПолучитьУникальныйИдентификатор(ОбъектИстории["shop_id"]));
		НоваяСтрока.Дата = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(ОбъектИстории["date"]);
		НоваяСтрока.КорректировкаПоОстатку = ОбъектИстории["stock_corrections"];
		НоваяСтрока.ВерхняяГраницаВыброса = ОбъектИстории["std_upper_bound"];
		НоваяСтрока.НижняяГраницаВыброса = ОбъектИстории["std_lower_bound"];
		НоваяСтрока.СпособРасчетаСреднегоИСтандартногоОтклонения = ОбъектИстории["std_calculating_type"];
		НоваяСтрока.СпособСглаживанияВыбросов = ОбъектИстории["smoothing_type"];
		НоваяСтрока.ЯвляетсяВыбросом = ОбъектИстории["ts_outlier"];
		НоваяСтрока.СкорректированноеЗначениеПродаж = ОбъектИстории["q_corrected"];
		НоваяСтрока.ИсходноеЗначениеПродаж = ОбъектИстории["q_init"];
		НоваяСтрока.ЗначениеНаКотороеСкорректированВыброс = ОбъектИстории["outlier_correction"];
		НоваяСтрока.ОбъемНевыполненныхЗаказов = ОбъектИстории["order_lost"];
		НоваяСтрока.Цена = ОбъектИстории["price"];
		НоваяСтрока.СтандартноеОтклонениеПоОбъекту = ОбъектИстории["loc_std"];
		НоваяСтрока.СтандартноеОтклонениеПоОбъектуСреднее = ОбъектИстории["loc_mean"];
		НоваяСтрока.Элемент = ОбъектИстории["item"];
		НоваяСтрока.ИсторияОбученияТрендоваяКорректировка = ОбъектИстории["autocorr_trend_thr"];
		НоваяСтрока.СезоннаяКорректировка = ОбъектИстории["autocorr_season_thr"];
		
		Ответ = СервисПрогнозированияПереопределяемый.ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(
			ОбъектИстории["product_id"],
			НастройкиСервиса,
			НайденныеАналоги);
		Номенклатура = Ответ.Номенклатура;
		НайденныеАналоги = Ответ.НайденныеАналоги;
		НоваяСтрока.Номенклатура = Номенклатура;
		
	КонецЦикла;
	
	ИсторияОбучения.Сортировать("Номенклатура, Дата, Склад, Партнер");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияИндикатораВыгрузки()
	
	ПодключитьОбработчикОжидания("Подключаемый_ИндикаторВыгрузки", 4, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПрерватьВыгрузкуНаСервере()
	
	СервисПрогнозирования.УстановитьСтатусВыгрузки(Ложь);
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	Комментарий = НСтр("ru = 'Выгрузка данных в сервис прогнозирования продаж прервана вручную.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
								УровеньЖурналаРегистрации.Информация,
								,
								,
								Комментарий);
	
КонецПроцедуры

&НаСервере
Функция СценарийИВидПланаЗаполнены()
	
	Если Не ЗначениеЗаполнено(СценарийПрогнозирования) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Сценарий"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,"СценарийПрогнозирования");
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ВидПлана) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Вид плана"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,"ВидПлана");
		Возврат Ложь;
	ИначеЕсли Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ЗаполнятьПоДаннымСервиса") Тогда
		ТекстОшибки = НСтр("ru = 'Выбранный вид плана не настроен для работы с сервисом прогнозирования.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,"ВидПлана");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ПодключаемыеМетоды

&НаКлиенте
Процедура Подключаемый_ИндикаторВыгрузки()
	
	ОбновитьИнформациюОВыгрузкеКоллекций();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеФоновогоЗадания()
	ОбработатьВыполнениеФоновогоЗаданияСервер();
	Если Не ПустаяСтрока(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПодключаемыхМетодов

&НаСервере
Процедура ОбработатьВыполнениеФоновогоЗаданияСервер()
	Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		ИдентификаторЗадания = "";
		
		Ответ = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			УстановитьВидимостьДоступность();
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
		
		Если ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьПереченьКоллекций() Тогда
			ОбновитьСоставКоллекцийНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьИсключенныеОбъекты() Тогда
			ОбновитьИсключенныеОбъектыНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаОбновитьИсториюОбучения() Тогда
			ОбновитьИсториюОбученияНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьСезонность() Тогда
			ОбновитьСезонностьНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьСезонностьПоМесяцам() Тогда
			ОбновитьСезонностьПоМесяцамНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьТочностьМодели() Тогда
			ОбновитьТочностьМоделиНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьТочностьМоделиПланФактПоВсемПериодам() Тогда
			ОбновитьТочностьМоделиПланФактПоВсемПериодамНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьТочностьМоделиПланФактПоПериодам() Тогда
			ОбновитьТочностьМоделиПланФактПоПериодамНаСервереФинальный();
		ИначеЕсли ИмяМетодаФоновогоЗадания = ИмяМетодаПолучитьТочностьМоделиПоОбъектам() Тогда
			ОбновитьТочностьМоделиПоОбъектамНаСервереФинальный();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВыгрузкеКоллекций()
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	ИндикаторВыгрузки = 0;
	Если НастройкиСервиса.ЗапланированоВыгрузитьКоллекций > 0 Тогда
		ИндикаторВыгрузки = НастройкиСервиса.ВыгруженоКоллекций / НастройкиСервиса.ЗапланированоВыгрузитьКоллекций * 100;
	КонецЕсли;
	Элементы.ИндикаторВыгрузки.Подсказка = НастройкиСервиса.ИмяВыгружаемойСейчасКоллекции;
	
	Если НастройкиСервиса.ВыгрузкаАктивна Тогда
		Элементы.ГруппаВариантыВыгрузкиСтраницы.ТекущаяСтраница = Элементы.ГруппаВариантыВыгрузкиСтраницаИдетВыгрузка;
		Если Элементы.ГруппаВариантыВыгрузкиСтраницы.ТекущаяСтраница <> Элементы.ГруппаВариантыВыгрузкиСтраницаИдетВыгрузка Тогда
			ЗаполнитьСписокВыгружаемыхКоллекций();
		КонецЕсли;
	Иначе
		Элементы.ГруппаВариантыВыгрузкиСтраницы.ТекущаяСтраница = Элементы.ГруппаВариантыВыгрузкиСтраницаВарианты;
		Если Элементы.ГруппаВариантыВыгрузкиСтраницы.ТекущаяСтраница <> Элементы.ГруппаВариантыВыгрузкиСтраницаВарианты Тогда
			ЗаполнитьСписокВыгружаемыхКоллекций();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИменаМетодов

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьПереченьКоллекций()
	Возврат "СервисПрогнозирования.ПолучитьПереченьКоллекцийНаСервере";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьИсключенныеОбъекты()
	Возврат "СервисПрогнозирования.ПолучитьИсключенныеОбъектыОбучения";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаОбновитьИсториюОбучения()
	Возврат "СервисПрогнозирования.ПолучитьИсториюОбучения";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьСезонность()
	Возврат "СервисПрогнозирования.ПолучитьСезонность";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьСезонностьПоМесяцам()
	Возврат "СервисПрогнозирования.ПолучитьСезонностьПоМесяцам";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьТочностьМодели()
	Возврат "СервисПрогнозирования.ПолучитьКачествоМоделей";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьТочностьМоделиПланФактПоВсемПериодам()
	Возврат "СервисПрогнозирования.ПолучитьКачествоМоделейПоОбъектам";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьТочностьМоделиПланФактПоПериодам()
	Возврат "СервисПрогнозирования.ПолучитьФактическиеЗначенияИПредсказанияНаТестовыхПериодах";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетодаПолучитьТочностьМоделиПоОбъектам()
	Возврат "СервисПрогнозирования.ПолучитьСуммуПланФактМоделейЗаВсеТестовыеПериоды";
КонецФункции

#КонецОбласти

#КонецОбласти

