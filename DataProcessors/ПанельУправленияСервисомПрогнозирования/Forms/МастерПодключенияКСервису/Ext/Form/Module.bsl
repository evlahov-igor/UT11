
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПолучитьНастройкиСервиса();
	
	РассчитатьРеквизитыСтатусовАвторизации();
	
	СформироватьДеревоВыгрузкиМетаданных();
	СформироватьУказательСтраниц();
	РассчитатьСтатусПодключения();
	ОбновитьИнформациюОВыгрузкеКоллекцийИСтатусыОбучения();
	УстановитьВидимостьДоступность();
	УстановитьТексты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ТокенПриложения) Тогда
		ОбновитьСтатусПодключения(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеСценарияПрогнозирования" Тогда
		СценарийПрогнозирования = Параметр.НовыйСценарий;
	ИначеЕсли ИмяСобытия = "СозданиеВидаПлана" Тогда
		ВидПлана = Параметр.НовыйВидПланов;
		СуществующийВидПланаПриИзменении(Неопределено);
	ИначеЕсли ИмяСобытия = "ПодборРеквизитовКоллекций" Тогда
		Если Параметр.ОбновитьСписокРеквизитов Тогда
			СформироватьДеревоВыгрузкиМетаданных();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПодборРеквизитовКоллекцийВыборРеквизита" Тогда
		Если Параметр.ОбновитьСписокРеквизитов Тогда
			СформироватьДеревоВыгрузкиМетаданных();
		КонецЕсли;
		Если Не ПустаяСтрока(Параметр.ИмяВИсточнике) Тогда
			РеквизитАналогиТовара = Параметр.ИмяВСервисе;
			РеквизитАналогиТовараВИсточнике = Параметр.ИмяВИсточнике;
			РеквизитАналогиТовараСвойство = Параметр.Свойство;
			РеквизитАналогиТовараПредставление = Параметр.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗакрытьПринудительно Тогда
		СохранитьНастройкиИПередаваемыеДанные();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыгрузкаДанныхПоРасписаниюАктивнаПриИзменении(Элемент)
	Если Не ВыгрузкаДанныхПоРасписаниюАктивна Тогда
		ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение = Ложь;
	КонецЕсли;
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СуществующийВидПланаПриИзменении(Элемент)
	ПодключитьОбработчикОжиданияИндикатораВыгрузкиИОбновленияСтатусов();
	СуществующийВидПланаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьОстаткиЗаВсеВремяПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьОстаткиЗаПериодПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьКонтрольныеПланыЗаВсеВремяПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьКонтрольныеПланыЗаПериодПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПлановыеОстаткиИПродажПриИзменении(Элемент)
	ИспользованиеОстатковИПродажПересчитать(ЭтаФорма);
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРеальныеОстаткиИПланыПриИзменении(Элемент)
	СценарийПрогнозированияФактИПлан = ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка");
	ИспользованиеОстатковИПродажПересчитать(ЭтаФорма);
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРеальныеИПлановыеОстаткиИПродажиПриИзменении(Элемент)
	ИспользованиеОстатковИПродажПересчитать(ЭтаФорма);
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура УказательНаСтраницыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмеющиесяСтраницы = ИмеющиесяСтраницы();
	ИндексСтраницы = ИмеющиесяСтраницы.Найти(НавигационнаяСсылкаФорматированнойСтроки);
	Элементы.Страницы.ТекущаяСтраница = Элементы[ИмеющиесяСтраницы[ИндексСтраницы]];
	
	УказательНаСтраницыОбработкаНавигационнойСсылкиНаСервере(ИндексСтраницы);
	
	ПодключитьОбработчикОжиданияИндикатораВыгрузкиИОбновленияСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура СуществующийИлиНовыйСценарийНовыйГиперссылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ПанельУправленияСервисомПрогнозирования.Форма.МастерСозданияСценарияПрогнозирования",
		Новый Структура(),
		ЭтаФорма,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СуществующийИлиНовыйВидПланаНовыйГиперссылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьСообщения();
	
	Если СценарийПрогнозирования.Пустая() Тогда
		ТекстСообщенияОбОшибке = ТекстОшибкиНеЗаполненСценарийПрогнозирования();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке,
			Неопределено, "СуществующийСценарийПрогнозирования");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПанельУправленияСервисомПрогнозирования.Форма.МастерСозданияВидаПлана",
		Новый Структура("СценарийПрогнозирования", СценарийПрогнозирования),
		ЭтаФорма,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасписаниеВыгрузкиПоУмолчаниюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.НастроитьИнтервалВыгрузкиДанных.Заголовок = Неопределено;
	УстановитьРасписаниеВыгрузкиПоУмолчаниюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасписаниеЗагрузкиПоУмолчаниюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.НастроитьИнтервалЗагрузкиДанных.Заголовок = Неопределено;
	УстановитьРасписаниеЗагрузкиПоУмолчаниюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВыгрузкиМетаданныхВыбраноПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НастройкиВыгрузкиМетаданных.ТекущиеДанные;
	Если ТекущаяСтрока.ЗаблокироватьФлагВыбора Тогда
		ТекущаяСтрока.Выбрано = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПроверкиДанныхПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ОшибкиПроверкиДанных.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекстОшибкиПроверкиДанных = ТекущаяСтрока.ОписаниеОшибки;
	Иначе
		ТекстОшибкиПроверкиДанных = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СуществующийСценарийПрогнозированияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПодключитьОбработчикОжиданияИндикатораВыгрузкиИОбновленияСтатусов();
	
	Если СценарийПрогнозирования = СценарийПрогнозированияФактИПлан
		И Не СценарийПрогнозирования.Пустая() Тогда
		ШаблонТекстаОшибки = ТекстОшибкиСценарийИспользуетсяДляПодменыПродаж();
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "СуществующийСценарийПрогнозирования");
		СценарийПрогнозирования = ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка");
	ИначеЕсли СценарийПрогнозирования = СценарийПрогнозированияКонтрольныхПланов
		И Не СценарийПрогнозирования.Пустая() Тогда
		ШаблонТекстаОшибки = ТекстОшибкиСценарийИспользуетсяДляКонтрольныхПланов();
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "СуществующийСценарийПрогнозирования");
		СценарийПрогнозирования = ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПрогнозированияКонтрольныхПлановПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если СценарийПрогнозированияФактИПлан = СценарийПрогнозированияКонтрольныхПланов
		И Не СценарийПрогнозированияКонтрольныхПланов.Пустая() Тогда
		ШаблонТекстаОшибки = ТекстОшибкиСценарийИспользуетсяДляПодменыПродаж();
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "СценарийПрогнозированияКонтрольныхПланов");
		СценарийПрогнозированияКонтрольныхПланов = ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПрогнозированияФактИПланПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если СценарийПрогнозированияФактИПлан = СценарийПрогнозированияКонтрольныхПланов
		И Не СценарийПрогнозированияФактИПлан.Пустая() Тогда
		ШаблонТекстаОшибки = ТекстОшибкиСценарийИспользуетсяДляКонтрольныхПланов();
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "СценарийПрогнозированияФактИПлан");
		СценарийПрогнозированияФактИПлан = ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуществующийСценарийПрогнозированияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ОтключитьОбработчикОжидания("Подключаемый_ИндикаторВыгрузкиИОбновлениеСтатусов");
	ОтключитьОбработчикОжидания("Подключаемый_ПолучитьИнформациюОВыгрузкеИСтатусы");
КонецПроцедуры

&НаКлиенте
Процедура СуществующийВидПланаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ОтключитьОбработчикОжидания("Подключаемый_ИндикаторВыгрузкиИОбновлениеСтатусов");
	ОтключитьОбработчикОжидания("Подключаемый_ПолучитьИнформациюОВыгрузкеИСтатусы");
КонецПроцедуры

&НаКлиенте
Процедура РеквизитАналогиТовараОчистка(Элемент, СтандартнаяОбработка)
	РеквизитАналогиТовара = Неопределено;
	РеквизитАналогиТовараВИсточнике = Неопределено;
	РеквизитАналогиТовараСвойство = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ТипАвторизацииПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбученияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗагрузитьПрогноз" Тогда
		ЗагрузитьДанныеИзСервисаНаСервере();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ТекстОшибки" Тогда
		ТекстОшибки = ПолучитьТекстОшибкиВидаПлана();
		ПоказатьПредупреждение(,ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитАналогиТовараНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяВИсточнике = "Товары";
	ИмяВСервисе = "products";
	ЗаблокироватьФлагВыбора = Истина;
	Выбрано = Истина;
	
	ПараметрыФормыПодбораРеквизитов = Новый Структура();
	ПараметрыФормыПодбораРеквизитов.Вставить("ИмяВИсточнике", ИмяВИсточнике);
	ПараметрыФормыПодбораРеквизитов.Вставить("ИмяВСервисе", ИмяВСервисе);
	ПараметрыФормыПодбораРеквизитов.Вставить("ЗаблокироватьФлагВыбора", ЗаблокироватьФлагВыбора);
	ПараметрыФормыПодбораРеквизитов.Вставить("Выбрано", Выбрано);
	ПараметрыФормыПодбораРеквизитов.Вставить("РежимВыбора", Истина);
	ПараметрыФормыПодбораРеквизитов.Вставить("ПоказыватьТолькоВыбранные", Ложь);
	
	ОткрытьФорму("Обработка.ПанельУправленияСервисомПрогнозирования.Форма.ФормаПодбораРеквизитовКоллекций",
		ПараметрыФормыПодбораРеквизитов,
		ЭтаФорма,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриИзменении(Элемент)
	НомерТелефонаПриИзмененииСервер(НомерТелефона, НомерТелефонаЗначенияПолей);
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НомерТелефона = Элемент.ТекстРедактирования;
	НомерТелефонаНачалоВыбораСервер();
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
	             ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"), 
	             НомерТелефонаЗначенияПолей,
	             Элемент.ТекстРедактирования);
	
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"));
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           НомерТелефонаЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление",           НомерТелефона);
	ПараметрыОткрытия.Вставить("НомерТелефона",           НомерТелефона);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Ввод номера телефона'"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаПредставление", "НомерТелефона");
	ДополнительныеПараметры.Вставить("ИмяРеквизитаЗначенияПолей", "НомерТелефонаЗначенияПолей");
	ОповещениеОкончанияРедактированияКИ = Новый ОписаниеОповещения("РедактированиеКонтактнойИнформацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, ОповещениеОкончанияРедактированияКИ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	ИмеющиесяСтраницы = ИмеющиесяСтраницы();
	ИндексСтраницы = ИмеющиесяСтраницы.Найти(Элементы.Страницы.ТекущаяСтраница.Имя);
	Если ИндексСтраницы > 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[ИмеющиесяСтраницы[ИндексСтраницы - 1]];
		СформироватьУказательСтраниц(ИндексСтраницы - 1);
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	ПодключитьОбработчикОжиданияИндикатораВыгрузкиИОбновленияСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвторизация
		И Не ЗначениеЗаполнено(ТокенПриложения) Тогда
		
		Если ПереключательЗаявкаАвторизация = 0 Тогда
			ОтправитьЗаявку(Неопределено);
		ИначеЕсли ПереключательЗаявкаАвторизация = 1 Тогда
			ВосстановитьДоступ(Неопределено);
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИсточникиДанных Тогда
		Если ДатаОкончанияВыгрузкиОстатковИПродаж < ДатаНачалаВыгрузкиОстатковИПродаж Тогда
			ТекстОшибки = ТекстОшибкиКонецПериодаБольшеНачала();
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "ДатаОкончанияВыгрузкиОстатковИПродаж");
			Возврат;
		КонецЕсли;
		Если ДатаОкончанияВыгрузкиКонтрольныхПланов < ДатаНачалаВыгрузкиКонтрольныхПланов Тогда
			ТекстОшибки = ТекстОшибкиКонецПериодаБольшеНачала();
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "ДатаОкончанияВыгрузкиКонтрольныхПланов");
			Возврат;
		КонецЕсли;
		Если СценарийПрогнозированияФактИПлан = СценарийПрогнозированияКонтрольныхПланов
			И Не СценарийПрогнозированияКонтрольныхПланов.Пустая() Тогда
			ТекстОшибки = ТекстОшибкиСценарийНеМожетБытьРавенСценариюПодменыПродаж();
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "СценарийПрогнозированияКонтрольныхПланов");
			Возврат;
		КонецЕсли;
		Если ИспользоватьПлановыеОстаткиИПродажи
			И СценарийПрогнозированияФактИПлан.Пустая() Тогда
			ТекстОшибки = ТекстОшибкиСценарийПодменыПродажНеМожетБытьПустым();
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Неопределено, "СценарийПрогнозированияФактИПлан");
			Возврат;
		КонецЕсли;
		ЗаписатьНастройки();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСоставПередаваемыхДанных Тогда
		СохранитьСоставПередаваемыхДанных();
	Иначе
		ЗаписатьНастройки();
	КонецЕсли;
	
	ИмеющиесяСтраницы = ИмеющиесяСтраницы();
	ИндексСтраницы = ИмеющиесяСтраницы.Найти(Элементы.Страницы.ТекущаяСтраница.Имя);
	Если ИндексСтраницы < ИмеющиесяСтраницы.Количество() - 1 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[ИмеющиесяСтраницы[ИндексСтраницы + 1]];
		СформироватьУказательСтраниц(ИндексСтраницы + 1);
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	ПодключитьОбработчикОжиданияИндикатораВыгрузкиИОбновленияСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗаявкиПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура НачатьПрогнозирование(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ВидПлана) Тогда
		
		Если Не ЗначениеЗаполнено(ТокенПриложения)
			Или Не СтатусПодключенияАктивен Тогда
			ТекстСообщенияОбОшибке = ТекстОшибкиАвторизацияНеНайдена();
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке);
			Возврат;
		КонецЕсли;
		
		НачалоВыгрузкиКоллекцийИЗапускОбучения();
		Элементы.ДекорацияЗавершениеРаботы.Видимость = Истина;
		
	Иначе
		ТекстСообщенияОбОшибке = ТекстОшибкиНеЗаполненВидПлана();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке, , "ВидПлана");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьИнтервалВыгрузкиДанных(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеВыгрузкиДанных", ЭтотОбъект);
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, ВыгрузкаДанныхВСервисПрогнозированияПродаж);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьИнтервалЗагрузкиДанных(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеЗагрузкиДанных", ЭтотОбъект);
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, ЗагрузкаДанныхИзСервисаПрогнозированияПродаж);
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	СохранитьНастройкиИПередаваемыеДанные();
	ЗакрытьПринудительно = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуДанных(Команда)
	НачатьПроверкуДанныхНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоставПередаваемыхДанных(Команда)
	СформироватьДеревоВыгрузкиМетаданных();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДопРеквизитыИзСоставаПередаваемыхДанных(Команда)
	ТекстВопроса = ТекстОшибкиБудутУдаленыПользовательскиеРеквизиты();
	Оповещение = Новый ОписаниеОповещения("УдалитьДопРеквизитыИзСоставаПередаваемыхДанныхПродолжение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьДоступ(Команда)
	ОчиститьСообщения();
	ПодключитьсяКСервису();
	Если Не ПустаяСтрока(ИдентификаторЗаданияПодключитьсяКСервису) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьсяКСервисуНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявку(Команда)
	ОчиститьСообщения();
	
	ЕстьОшибка = Ложь;
	Если Не ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		
		ТекстСообщенияОбОшибке = ТекстОшибкиНеЗаполненаЭлектроннаяПочта();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке, Неопределено, "ЭлектроннаяПочта");
		ЕстьОшибка = Истина;
	
	КонецЕсли;
	Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(ЭлектроннаяПочта) Тогда
		
		ТекстСообщенияОбОшибке = ТекстОшибкиНеверныйФорматАдресаЭлектроннойПочты();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке, Неопределено, "ЭлектроннаяПочта");
		ЕстьОшибка = Истина;
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ФИОКонтактногоЛица) Тогда
		
		ТекстСообщенияОбОшибке = ТекстОшибкиНеЗаполненоФИО();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке, Неопределено, "ФИОКонтактногоЛица");
		ЕстьОшибка = Истина;
		
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьЗаявкуВСервис();
	Если Не ПустаяСтрока(ИдентификаторЗаданияОтправитьЗаявкуВСервис) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОтправитьЗаявкуВСервисНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьПовторнуюВыгрузку(Команда)
	РазрешитьПовторнуюВыгрузку = Не РазрешитьПовторнуюВыгрузку;
	Элементы.НачатьПрогнозирование.Доступность = РазрешитьПовторнуюВыгрузку;
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьВыгрузку(Команда)
	ТекстВопроса = ТекстОшибкиТекущаяВыгрузкаБудетПрервана();
	Оповещение = Новый ОписаниеОповещения("ПрерватьВыгрузкуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусПодключения(Команда)
	ОбновитьСтатусПодключенияНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияОбновитьСтатусПодключения) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСтатусПодключенияНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ТекущийШрифт = Элементы.НастройкиВыгрузкиМетаданных.Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиВыгрузкиМетаданных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиВыгрузкиМетаданных.ЗаблокироватьФлагВыбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
КонецПроцедуры

#КонецОбласти

#Область Разное

&НаКлиенте
Процедура ПрерватьВыгрузкуЗавершение(Результат, ПараметрКоманды) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПрерватьВыгрузкуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизитаЗначенияПолей] = Результат.КонтактнаяИнформация;
		ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизитаПредставление] = Результат.Представление;
		
		РедактированиеКонтактнойИнформацииЗавершениеСервер();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НомерТелефонаНачалоВыбораСервер()
	НомерТелефонаПриИзмененииСервер(НомерТелефона, НомерТелефонаЗначенияПолей);
	УправлениеКонтактнойИнформацией.УстановитьКомментарийКонтактнойИнформации(НомерТелефонаЗначенияПолей, НомерТелефонаКомментарий);
КонецПроцедуры

&НаСервере
Процедура РедактированиеКонтактнойИнформацииЗавершениеСервер()
	НомерТелефонаКомментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(НомерТелефонаЗначенияПолей);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НомерТелефонаПриИзмененииСервер(Знач НомерТелефона, НомерТелефонаЗначенияПолей)
	ПартнерыИКонтрагенты.ЗначенияПолейКонтактнойИнформации(НомерТелефона, НомерТелефонаЗначенияПолей, 
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДопРеквизитыИзСоставаПередаваемыхДанныхПродолжение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопРеквизитыИзСоставаПередаваемыхДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРегламентноеЗадание(ИмяЗадания)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	ДанныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	Возврат ДанныеЗадания;
	
КонецФункции

&НаСервере
Процедура ПолучитьНастройкиСервиса()
	
	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ПарольПользователяСервисаПрогнозирования",
		"Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
	Пароль = ?(ЗначениеЗаполнено(Пароли),
		ЭтотОбъект.УникальныйИдентификатор, "");
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	НеобходимыеНастройки = "Логин, ИмяБазы, АдресПодключения, ТипАвторизации, СтатусПодключения,
	|ИдентификаторПриложения, ТокенПриложения, ЗаявкаНаПодключениеОтправлена,
	|НазваниеКомпании, ФИОКонтактногоЛица, ЭлектроннаяПочта, НомерТелефона, НомерТелефонаЗначенияПолей, НомерТелефонаКомментарий,
	|ДатаНачалаВыгрузкиОстатковИПродаж, ДатаОкончанияВыгрузкиОстатковИПродаж,
	|ИспользоватьРеальныеОстаткиИПродажи, ИспользоватьПлановыеОстаткиИПродажи,
	|СценарийПрогнозированияФактИПлан, СценарийПрогнозированияКонтрольныхПланов,
	|ДатаНачалаВыгрузкиКонтрольныхПланов, ДатаОкончанияВыгрузкиКонтрольныхПланов,
	|РеквизитАналогиТовара, РеквизитАналогиТовараВИсточнике, РеквизитАналогиТовараСвойство,
	|РеквизитАналогиТовараПредставление, ВыгрузкаДанныхПоРасписаниюАктивна,
	|ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение, ЗагрузкаДанныхПоРасписаниюАктивна";
	
	СтатусПодключенияАктивен = Настройки.СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки, НеобходимыеНастройки);
	
	ВыгружатьОстаткиЗаВсеВремя = ?(Настройки.ВыгружатьОстаткиЗаВсеВремя, 0, 1);
	ВыгружатьКонтрольныеПланыЗаВсеВремя = ?(Настройки.ВыгружатьКонтрольныеПланыЗаВсеВремя, 0, 1);
	
	ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 0;
	Если ИспользоватьРеальныеОстаткиИПродажи И ИспользоватьПлановыеОстаткиИПродажи Тогда
		ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 2;
	ИначеЕсли ИспользоватьПлановыеОстаткиИПродажи Тогда
		ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 1;
	КонецЕсли;
	
	// Расписание
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ВыгрузкаДанныхВСервисПрогнозированияПродаж");
	ВыгрузкаДанныхВСервисПрогнозированияПродаж = ДанныеЗадания.Расписание;
	
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ЗагрузкаДанныхИзСервисаПрогнозированияПродаж");
	ЗагрузкаДанныхИзСервисаПрогнозированияПродаж = ДанныеЗадания.Расписание;
	
	// Отборы выгрузки
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СервисПрогнозированияФильтрОтправляемыхДанных");
	КомпоновщикНастроекОтборовНаВыгрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроекОтборовНаВыгрузку.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекОтборовНаВыгрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроекОтборовНаВыгрузку.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	
	Попытка
		НастройкиОтборов = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
		КомпоновщикНастроекОтборовНаВыгрузку.ЗагрузитьНастройки(НастройкиОтборов.ОбщийОтборВыгрузки);
		КомпоновщикНастроекОтборовНаВыгрузку.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// Отборы загрузки
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СервисПрогнозированияФильтрЗагрузкиПрогноза");
	КомпоновщикНастроекОтборовНаЗагрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроекОтборовНаЗагрузку.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекОтборовНаЗагрузку.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроекОтборовНаЗагрузку.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Попытка
		НастройкиОтборов = Константы.НастройкиОтборовНаЗагрузкуСервисаПрогнозирования.Получить().Получить();
		КомпоновщикНастроекОтборовНаЗагрузку.ЗагрузитьНастройки(НастройкиОтборов.ОбщийОтборЗагрузки);
		КомпоновщикНастроекОтборовНаЗагрузку.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмеющиесяСтраницы()
	
	Массив = Новый Массив();
	Массив.Добавить("СтраницаАвторизация");
	Массив.Добавить("СтраницаИсточникиДанных");
	Массив.Добавить("СтраницаСоставПередаваемыхДанных");
	Массив.Добавить("СтраницаФильтры");
	Массив.Добавить("СтраницаПроверкаДанных");
	Массив.Добавить("СтраницаРасписаниеОбновлений");
	Массив.Добавить("СтраницаТестовыйПрогноз");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура СформироватьУказательСтраниц(ВыделитьСтраницу = 0)
	
	ЦветНажатойГиперссылки = ЦветаСтиля.ЦветПустойГиперссылки;
	
	Разделитель = Новый ФорматированнаяСтрока(" -> ");
	
	МассивСтраниц = Новый Массив();
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '1. Авторизация'"),,,, "СтраницаАвторизация"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '2. Источники данных'"),,,, "СтраницаИсточникиДанных"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '3. Состав передаваемых данных'"),,,, "СтраницаСоставПередаваемыхДанных"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '4. Фильтры'"),,,, "СтраницаФильтры"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '5. Проверка данных'"),,,, "СтраницаПроверкаДанных"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '6. Расписание обновлений'"),,,, "СтраницаРасписаниеОбновлений"));
	МассивСтраниц.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '7. Параметры первого прогноза'"),,,, "СтраницаТестовыйПрогноз"));
	
	МассивСтраниц[ВыделитьСтраницу] = Новый ФорматированнаяСтрока(МассивСтраниц[ВыделитьСтраницу],, ЦветНажатойГиперссылки);
	
	СборкаУказателя = Новый Массив();
	Для Инд = 0 По МассивСтраниц.Количество() - 1 Цикл
		СборкаУказателя.Добавить(МассивСтраниц[Инд]);
		СборкаУказателя.Добавить(Разделитель);
	КонецЦикла;
	СборкаУказателя.Удалить(СборкаУказателя.Количество() - 1);
	
	УказательНаСтраницы = Новый ФорматированнаяСтрока(СборкаУказателя);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоВыгрузкиМетаданных()
	
	НастройкиВыгрузкиМетаданных.ПолучитьЭлементы().Очистить();
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	Для Каждого КлючЗначениеКоллекции Из Настройки.Коллекции Цикл
		
		ОписаниеКоллекции = КлючЗначениеКоллекции.Значение; // см. СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных.
		
		Если Настройки.Коллекции.Свойство(ОписаниеКоллекции.ИмяВИсточнике) Тогда
			Выгружать = Настройки.Коллекции[ОписаниеКоллекции.ИмяВИсточнике].Выгружать;
		Иначе
			Выгружать = ОписаниеКоллекции.Обязательный;
		КонецЕсли;
		
		ТекущаяСтрокаГруппа = НастройкиВыгрузкиМетаданных.ПолучитьЭлементы().Добавить();
		ТекущаяСтрокаГруппа.Наименование = ОписаниеКоллекции.Представление;
		ТекущаяСтрокаГруппа.ЗаблокироватьФлагВыбора = ОписаниеКоллекции.Обязательный;
		ТекущаяСтрокаГруппа.Выбрано = Выгружать;
		ТекущаяСтрокаГруппа.ИмяВИсточнике = ОписаниеКоллекции.ИмяВИсточнике;
		ТекущаяСтрокаГруппа.ИмяВСервисе = ОписаниеКоллекции.ИмяВСервисе;
		ТекущаяСтрокаГруппа.УровеньДерева = 1;
		
		ОписаниеРеквизитов = ОписаниеКоллекции.ВложенноеОписание;
		
		Для Каждого КлючЗначениеРеквизита Из ОписаниеРеквизитов Цикл
			ОписаниеРеквизита = СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных("", Ложь, Ложь, "");
			ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, КлючЗначениеРеквизита.Значение);
			
			Если Настройки.Коллекции.Свойство(ОписаниеКоллекции.ИмяВИсточнике)
				И Настройки.Коллекции[ОписаниеКоллекции.ИмяВИсточнике].ВложенноеОписание.Свойство(ОписаниеРеквизита.ИмяВИсточнике) Тогда
				Выгружать = Настройки.Коллекции[ОписаниеКоллекции.ИмяВИсточнике].ВложенноеОписание[ОписаниеРеквизита.ИмяВИсточнике].Выгружать;
			Иначе
				Выгружать = ОписаниеРеквизита.Обязательный;
			КонецЕсли;
			
			ТекущаяСтрокаРеквизит = ТекущаяСтрокаГруппа.ПолучитьЭлементы().Добавить();
			ТекущаяСтрокаРеквизит.Наименование = ОписаниеРеквизита.Представление;
			ТекущаяСтрокаРеквизит.ЗаблокироватьФлагВыбора = ОписаниеРеквизита.Обязательный;
			ТекущаяСтрокаРеквизит.Выбрано = Выгружать;
			ТекущаяСтрокаРеквизит.ИмяВИсточнике = ОписаниеРеквизита.ИмяВИсточнике;
			ТекущаяСтрокаРеквизит.ИмяВСервисе = ОписаниеРеквизита.ИмяВСервисе;
			ТекущаяСтрокаРеквизит.Свойство = ОписаниеРеквизита.ДополнительноеСвойство;
			ТекущаяСтрокаРеквизит.ЭтоПользовательскоеПоле = ОписаниеРеквизита.ЭтоПользовательскоеПоле;
			ТекущаяСтрокаРеквизит.УровеньДерева = 2;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	МодульИнтернетПоддержкаПользователей = СервисПрогнозирования.МодульИнтернетПоддержкаПользователей();
	Если МодульИнтернетПоддержкаПользователей <> Неопределено Тогда
		ИТСПодключен = МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Иначе
		ИТСПодключен = Ложь;
	КонецЕсли;
	
	Элементы.Шапка.Видимость = Истина;
	Элементы.Подвал.Видимость = Истина;
	
	Если Не ВыполненПереходКСтраницеАктивногоПодключения
		И ПереключательЗаявкаАвторизация = 0 Тогда
		Элементы.СтраницыЗаявкаНаПодключениеИАвторизация.ТекущаяСтраница = Элементы.СтраницаЗаявкаНаПодключение;
	ИначеЕсли ВыполненПереходКСтраницеАктивногоПодключения
		Или ПереключательЗаявкаАвторизация = 1 Тогда
		Элементы.СтраницыЗаявкаНаПодключениеИАвторизация.ТекущаяСтраница = Элементы.СтраницаВосстановлениеПодключения;
	КонецЕсли;
	
	Элементы.ПереключательЗаявкаАвторизация.Видимость = Не ЗначениеЗаполнено(ТокенПриложения);
	Элементы.ДекорацияСтраницаВосстановлениеПодключенияЗаголовок.Видимость = Не ЗначениеЗаполнено(ТокенПриложения);
	Элементы.ДекорацияСтраницаВосстановлениеПодключенияЗаголовокПодключено.Видимость = ЗначениеЗаполнено(ТокенПриложения);
	
	Если ЗначениеЗаполнено(ТокенПриложения) Тогда
		Элементы.ИдентификаторПриложенияВосстановлениеПодключения.Видимость = Ложь;
		Элементы.ИдентификаторПриложенияВосстановлениеПодключенияПодключено.Видимость = Истина;
	Иначе
		Элементы.ИдентификаторПриложенияВосстановлениеПодключения.Видимость = Истина;
		Элементы.ИдентификаторПриложенияВосстановлениеПодключенияПодключено.Видимость = Ложь;
	КонецЕсли;
	
	ИдетПодключение = Не ПустаяСтрока(ИдентификаторЗаданияПовторитьРегистрацию)
		Или Не ПустаяСтрока(ИдентификаторЗаданияПодключитьсяКСервису);
	
	ОжидаетсяПодключениеИлиДоступ = ИдетПодключение
		Или СтатусПодключения = СервисПрогнозирования.СтатусПодключенияВОчереди();
	ПодключеноИлиЕстьДоступ = ЗначениеЗаполнено(ТокенПриложения)
		И СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен();
	ПодключеноИЕстьДоступ = ЗначениеЗаполнено(ТокенПриложения)
		И СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен();
	
	Если ПодключеноИЕстьДоступ Тогда
		Элементы.ДекорацияКрестикСтатус.Видимость = Ложь;
		Элементы.ДекорацияВосклицательныйЗнакСтатус.Видимость = Ложь;
		Элементы.ДекорацияФлажокСтатус.Видимость = Истина;
		Элементы.ДекорацияКрестикСтатус1.Видимость = Ложь;
		Элементы.ДекорацияВосклицательныйЗнакСтатус1.Видимость = Ложь;
		Элементы.ДекорацияФлажокСтатус1.Видимость = Истина;
	ИначеЕсли ОжидаетсяПодключениеИлиДоступ
		Или ПодключеноИлиЕстьДоступ Тогда
		Элементы.ДекорацияКрестикСтатус.Видимость = Ложь;
		Элементы.ДекорацияВосклицательныйЗнакСтатус.Видимость = Истина;
		Элементы.ДекорацияФлажокСтатус.Видимость = Ложь;
		Элементы.ДекорацияКрестикСтатус1.Видимость = Ложь;
		Элементы.ДекорацияВосклицательныйЗнакСтатус1.Видимость = Истина;
		Элементы.ДекорацияФлажокСтатус1.Видимость = Ложь;
	Иначе
		// Не подключено.
		Элементы.ДекорацияКрестикСтатус.Видимость = Истина;
		Элементы.ДекорацияВосклицательныйЗнакСтатус.Видимость = Ложь;
		Элементы.ДекорацияФлажокСтатус.Видимость = Ложь;
		Элементы.ДекорацияКрестикСтатус1.Видимость = Истина;
		Элементы.ДекорацияВосклицательныйЗнакСтатус1.Видимость = Ложь;
		Элементы.ДекорацияФлажокСтатус1.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияЗаявкаНаПодключениеОтправкаЗаявки.Видимость 
		= СтатусПодключения = СервисПрогнозирования.СтатусПодключенияВОчереди()
			Или СтатусПодключения = СервисПрогнозирования.СтатусПодключенияНеПодключено();
	Элементы.ДекорацияЗаявкаНаПодключениеОтправкаЗаявки1.Видимость 
		= СтатусПодключения = СервисПрогнозирования.СтатусПодключенияВОчереди()
			Или СтатусПодключения = СервисПрогнозирования.СтатусПодключенияНеПодключено();
	
	Элементы.ГруппаНетПодключенияЕстьОшибкиСтраницаЗаявки.Видимость = Не ИТСПодключен;
	Элементы.ГруппаНетПодключенияЕстьОшибкиСтраницаЗаявки1.Видимость = Не ИТСПодключен;
	Элементы.ОтправитьЗаявку.Доступность = ИТСПодключен;
	Элементы.ВосстановитьДоступ.Доступность = ИТСПодключен;
	Элементы.ВосстановитьДоступ.Видимость = Не ЗначениеЗаполнено(ТокенПриложения);
	
	Элементы.ДатаНачалаВыгрузкиОстатковИПродаж.Доступность = (ВыгружатьОстаткиЗаВсеВремя = 1);
	Элементы.ДатаОкончанияВыгрузкиОстатковИПродаж.Доступность = (ВыгружатьОстаткиЗаВсеВремя = 1);
	
	Элементы.ДатаНачалаВыгрузкиКонтрольныхПланов.Доступность = (ВыгружатьКонтрольныеПланыЗаВсеВремя = 1);
	Элементы.ДатаОкончанияВыгрузкиКонтрольныхПланов.Доступность = (ВыгружатьКонтрольныеПланыЗаВсеВремя = 1);
	
	Элементы.ОтправитьЗаявку.КнопкаПоУмолчанию = Ложь;
	Элементы.ВосстановитьДоступ.КнопкаПоУмолчанию = Ложь;
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвторизация Тогда
		Если ПереключательЗаявкаАвторизация = 0 Тогда
			Элементы.ОтправитьЗаявку.КнопкаПоУмолчанию = Истина;
		ИначеЕсли ПереключательЗаявкаАвторизация = 1 Тогда
			Элементы.ВосстановитьДоступ.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		Элементы.Назад.Видимость = Ложь;
		Элементы.Далее.КнопкаПоУмолчанию = Ложь;
		Элементы.Далее.Видимость = Истина;
		Элементы.Готово.КнопкаПоУмолчанию = Ложь;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТестовыйПрогноз Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Ложь;
		Элементы.Далее.Видимость = Ложь;
		Элементы.Готово.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.Назад.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Далее.Видимость = Истина;
		Элементы.Готово.КнопкаПоУмолчанию = Ложь;
	КонецЕсли;
	
	Элементы.СценарийПрогнозированияФактИПлан.АвтоОтметкаНезаполненного = ИспользоватьПлановыеОстаткиИПродажи;
	Элементы.СценарийПрогнозированияФактИПлан.Видимость = ИспользоватьПлановыеОстаткиИПродажи;
	
	Элементы.ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение.Доступность = ВыгрузкаДанныхПоРасписаниюАктивна;
	
КонецПроцедуры

&НаСервере
Процедура УказательНаСтраницыОбработкаНавигационнойСсылкиНаСервере(ИндексСтраницы)
	СформироватьУказательСтраниц(ИндексСтраницы);
	УстановитьТексты();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура УстановитьТексты()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТестовыйПрогнозПравоНовый Тогда
		Элементы.Далее.Заголовок = НСтр("ru = 'Начать прогнозирование'");
		Команды.Далее.Подсказка = НСтр("ru = 'Начать прогнозирование'");
	Иначе
		Элементы.Далее.Заголовок = НСтр("ru = 'Далее >>'");
		Команды.Далее.Подсказка = НСтр("ru = 'Далее >>'");
	КонецЕсли;
	
	Элементы.НастроитьИнтервалВыгрузкиДанных.Заголовок = Строка(ВыгрузкаДанныхВСервисПрогнозированияПродаж);
	Элементы.НастроитьИнтервалЗагрузкиДанных.Заголовок = Строка(ЗагрузкаДанныхИзСервисаПрогнозированияПродаж);
	
КонецПроцедуры

&НаСервере
Процедура ПодключитьсяКСервису()
	
	ЕстьИзменения = ОбновитьНастройкиАвторизации();
	
	Если ТипАвторизации = 0
		И ЕстьИзменения Тогда
		
		СервисПрогнозирования.ЗарегистрироватьПриложениеВСервисе();
		
	ИначеЕсли ТипАвторизации = 1
		И ЕстьИзменения Тогда
		
		Тикет = ПолучитьТикет();
		Если Не ПустаяСтрока(Тикет) Тогда
			// Вызвать целевой сервис, используя полученный тикет.
			СервисПрогнозирования.ЗарегистрироватьПриложениеВСервисеПоИТС(Тикет);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
		РезультатРасчета = Неопределено;
		Если ТипАвторизации = 0 Тогда
			РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
				"СервисПрогнозирования.ЗарегистрироватьПриложениеВСервисе");
		ИначеЕсли ТипАвторизации = 1 Тогда
			Тикет = ПолучитьТикет();
			Если Не ПустаяСтрока(Тикет) Тогда
				// Вызвать целевой сервис, используя полученный тикет.
				РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
					"СервисПрогнозирования.ЗарегистрироватьПриложениеВСервисеПоИТС",
					Тикет);
			КонецЕсли;
		КонецЕсли;
		
		Если РезультатРасчета <> Неопределено
			И РезультатРасчета.Статус = "Выполняется" Тогда
			ИдентификаторЗаданияПодключитьсяКСервису = РезультатРасчета.ИдентификаторЗадания;
			АдресХранилищаПодключитьсяКСервису = РезультатРасчета.АдресРезультата;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьНастройкиСервиса();
	РассчитатьСтатусПодключения();
	УстановитьВидимостьДоступность();
	УстановитьТексты();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьЗаявкуВСервис()
	
	ОбновитьНастройкиЗаявкиНаПодключение();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	РезультатРасчета = Неопределено;
	РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"СервисПрогнозирования.ОтправитьЗаявкуВСервис");
	
	Если РезультатРасчета <> Неопределено
		И РезультатРасчета.Статус = "Выполняется" Тогда
		ИдентификаторЗаданияОтправитьЗаявкуВСервис = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилищаОтправитьЗаявкуВСервис = РезультатРасчета.АдресРезультата;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусПодключенияНаСервере()
	
	Если ЗначениеЗаполнено(ТокенПриложения) Тогда
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
		РезультатРасчета = Неопределено;
		РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"СервисПрогнозирования.ПолучитьСтатусПодключенияКСервису");
		
		Если РезультатРасчета <> Неопределено
			И РезультатРасчета.Статус = "Выполняется" Тогда
			ИдентификаторЗаданияОбновитьСтатусПодключения = РезультатРасчета.ИдентификаторЗадания;
			АдресХранилищаОбновитьСтатусПодключения = РезультатРасчета.АдресРезультата;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьНастройкиАвторизации()
	
	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ПарольПользователяСервисаПрогнозирования",
		"Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПарольСтарый = ?(ЗначениеЗаполнено(Пароли),
		Пароли, "");
	
	НеобходимыеНастройки = "Логин, Пароль, АдресПодключения, ТипАвторизации, ИдентификаторПриложения, ИмяБазы";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	НастройкиСохраненные = Новый Структура(НеобходимыеНастройки);
	НастройкиНовые = Новый Структура(НеобходимыеНастройки);
	
	ЗаполнитьЗначенияСвойств(НастройкиСохраненные, Настройки);
	ЗаполнитьЗначенияСвойств(НастройкиНовые, ЭтаФорма);
	
	ЕстьИзменения = Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(НастройкиСохраненные, НастройкиНовые);
	
	ПарольИзменен = ПарольСтарый <> Пароль И ЗначениеЗаполнено(Пароль);
	
	Если ЕстьИзменения Тогда
		ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма, НеобходимыеНастройки);
		СервисПрогнозирования.ОбновитьНастройкиСервиса(Настройки);
		СервисПрогнозирования.УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	КонецЕсли;
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ПарольПользователяСервисаПрогнозирования",
			Пароль, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ОбновитьНастройкиЗаявкиНаПодключение()
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	НазваниеКомпанииИзменено = Настройки.НазваниеКомпании <> НазваниеКомпании И ЗначениеЗаполнено(НазваниеКомпании);
	ФИОКонтактногоЛицаИзменено = Настройки.ФИОКонтактногоЛица <> ФИОКонтактногоЛица И ЗначениеЗаполнено(ФИОКонтактногоЛица);
	ЭлектроннаяПочтаИзменена = Настройки.ЭлектроннаяПочта <> ЭлектроннаяПочта И ЗначениеЗаполнено(ЭлектроннаяПочта);
	НомерТелефонаИзменен = Настройки.НомерТелефона <> НомерТелефона И ЗначениеЗаполнено(НомерТелефона);
	
	ЕстьИзменения = НазваниеКомпанииИзменено
		Или ФИОКонтактногоЛицаИзменено
		Или ЭлектроннаяПочтаИзменена
		Или НомерТелефонаИзменен;
	
	Если ЕстьИзменения Тогда
		ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма, "НазваниеКомпании, ФИОКонтактногоЛица, ЭлектроннаяПочта, НомерТелефона, НомерТелефонаЗначенияПолей, НомерТелефонаКомментарий");
		СервисПрогнозирования.ОбновитьНастройкиСервиса(Настройки);
		СервисПрогнозирования.УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Процедура СохранитьСоставПередаваемыхДанных()
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Описание = СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций();
	
	Для Каждого УровеньКоллекций Из НастройкиВыгрузкиМетаданных.ПолучитьЭлементы() Цикл
		
		Описание[УровеньКоллекций.ИмяВИсточнике].Выгружать = УровеньКоллекций.Выбрано;
		Для Каждого УровеньРеквизитов Из УровеньКоллекций.ПолучитьЭлементы() Цикл
			
			КоллекцияВыгружалась = Настройки.ИдКоллекций.Свойство(УровеньКоллекций.ИмяВСервисе);
			
			Если КоллекцияВыгружалась
				И Описание[УровеньКоллекций.ИмяВИсточнике].ВложенноеОписание.Свойство(УровеньРеквизитов.ИмяВИсточнике)
				И Описание[УровеньКоллекций.ИмяВИсточнике].ВложенноеОписание[УровеньРеквизитов.ИмяВИсточнике].Выгружать
					<> УровеньРеквизитов.Выбрано Тогда
				Настройки.ИзмененияКоллекций[УровеньКоллекций.ИмяВИсточнике].ИзмененФормат = Истина;
			ИначеЕсли КоллекцияВыгружалась
				И Не Описание[УровеньКоллекций.ИмяВИсточнике].ВложенноеОписание.Свойство(УровеньРеквизитов.ИмяВИсточнике) Тогда
				Настройки.ИзмененияКоллекций[УровеньКоллекций.ИмяВИсточнике].ИзмененФормат = Истина;
			КонецЕсли;
			
			Если Описание[УровеньКоллекций.ИмяВИсточнике].ВложенноеОписание.Свойство(УровеньРеквизитов.ИмяВИсточнике) Тогда
				Описание[УровеньКоллекций.ИмяВИсточнике].ВложенноеОписание[УровеньРеквизитов.ИмяВИсточнике].Выгружать
					= УровеньРеквизитов.Выбрано;
			ИначеЕсли УровеньРеквизитов.Выбрано Тогда
				ДобавляемоеОписание = СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных(УровеньРеквизитов.ИмяВСервисе, Ложь, Истина,
					УровеньРеквизитов.ИмяВИсточнике, УровеньРеквизитов.Наименование);
				ДобавляемоеОписание.ЭтоПользовательскоеПоле = Истина;
				ДобавляемоеОписание.ДополнительноеСвойство = УровеньРеквизитов.Свойство;
				Описание[УровеньКоллекций.ИмяВИсточнике].ВложенноеОписание.Вставить(УровеньРеквизитов.ИмяВИсточнике,
					ДобавляемоеОписание);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Настройки.Коллекции = Описание;
	
	СервисПрогнозирования.ОбновитьНастройкиСервиса(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура НачатьПрогнозированиеНаСервере(ТребуетсяПолнаяВыгрузка = Ложь)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("ВидПлана", ВидПлана);
	ПараметрыПроцедуры.Вставить("ТребуетсяПолнаяВыгрузка", ТребуетсяПолнаяВыгрузка);
	
	РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("Обработки.ПанельУправленияСервисомПрогнозирования.НачатьПрогнозирование",
	                                                     ПараметрыПроцедуры,
	                                                     ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, Расписание)
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеВыгрузкиДанных(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузкаДанныхВСервисПрогнозированияПродаж = РасписаниеЗадания;
	Элементы.НастроитьИнтервалВыгрузкиДанных.Заголовок = Строка(ВыгрузкаДанныхВСервисПрогнозированияПродаж);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеЗагрузкиДанных(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхИзСервисаПрогнозированияПродаж = РасписаниеЗадания;
	Элементы.НастроитьИнтервалЗагрузкиДанных.Заголовок = Строка(ЗагрузкаДанныхИзСервисаПрогнозированияПродаж);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройки()
	
	// Расписание
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ВыгрузкаДанныхВСервисПрогнозированияПродаж");
	ПараметрыОбновленияЗадания = Новый Структура("Расписание", ВыгрузкаДанныхВСервисПрогнозированияПродаж);
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(ДанныеЗадания, ПараметрыОбновленияЗадания);
	
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ЗагрузкаДанныхИзСервисаПрогнозированияПродаж");
	
	ПараметрыОбновленияЗадания.Расписание = ЗагрузкаДанныхИзСервисаПрогнозированияПродаж;
	РегламентныеЗаданияСервер.ИзменитьЗадание(ДанныеЗадания, ПараметрыОбновленияЗадания);
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	ИзмененыОтборы = Настройки.ВыгружатьОстаткиЗаВсеВремя <> (ВыгружатьОстаткиЗаВсеВремя = 0)
		Или Настройки.ДатаНачалаВыгрузкиОстатковИПродаж <> ДатаНачалаВыгрузкиОстатковИПродаж
		Или Настройки.ДатаОкончанияВыгрузкиОстатковИПродаж <> ДатаОкончанияВыгрузкиОстатковИПродаж
		Или Настройки.ИспользоватьРеальныеОстаткиИПродажи <> ИспользоватьРеальныеОстаткиИПродажи
		Или Настройки.ИспользоватьПлановыеОстаткиИПродажи <> ИспользоватьПлановыеОстаткиИПродажи
		Или Настройки.СценарийПрогнозированияФактИПлан <> СценарийПрогнозированияФактИПлан;
	
	НеобходимыеНастройки = "НазваниеКомпании, ФИОКонтактногоЛица, ЭлектроннаяПочта, НомерТелефона, НомерТелефонаЗначенияПолей, НомерТелефонаКомментарий,
	|ДатаНачалаВыгрузкиОстатковИПродаж, ДатаОкончанияВыгрузкиОстатковИПродаж, 
	|ИспользоватьРеальныеОстаткиИПродажи, ИспользоватьПлановыеОстаткиИПродажи,
	|СценарийПрогнозированияФактИПлан, СценарийПрогнозированияКонтрольныхПланов,
	|ДатаНачалаВыгрузкиКонтрольныхПланов, ДатаОкончанияВыгрузкиКонтрольныхПланов,
	|ВыгрузкаДанныхПоРасписаниюАктивна,
	|ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение, ЗагрузкаДанныхПоРасписаниюАктивна";
	
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма, НеобходимыеНастройки);
	
	// Отборы выгрузки
	НастройкиОтборов = Новый Структура();
	НастройкиОтборов.Вставить("ОбщийОтборВыгрузки", КомпоновщикНастроекОтборовНаВыгрузку.Настройки);
	
	ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиОтборов);
	
	Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
	// Отборы загрузки
	НастройкиОтборов = Новый Структура();
	НастройкиОтборов.Вставить("ОбщийОтборЗагрузки", КомпоновщикНастроекОтборовНаЗагрузку.Настройки);
	
	ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиОтборов);
	
	Константы.НастройкиОтборовНаЗагрузкуСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
	// Общие настройки
	
	ИспользованиеОстатковИПродажПересчитать(ЭтаФорма);
	
	ОписаниеПродаж = Настройки.Коллекции["Продажи"];
	ОписаниеОстатков = Настройки.Коллекции["Остатки"];
	
	КоллекцияПродажВыгружалась = Настройки.ИзмененияКоллекций[ОписаниеПродаж.ИмяВИсточнике].ДатаВыгрузки > Дата(1, 1, 1);
	КоллекцияОстатковВыгружалась = Настройки.ИзмененияКоллекций[ОписаниеОстатков.ИмяВИсточнике].ДатаВыгрузки > Дата(1, 1, 1);
	
	Настройки.ИзмененияКоллекций["Продажи"].ИзмененыОтборы = КоллекцияПродажВыгружалась
		И ИзмененыОтборы;
	Настройки.ИзмененияКоллекций["Остатки"].ИзмененыОтборы = КоллекцияОстатковВыгружалась
		И ИзмененыОтборы;
	
	Настройки.ВыгружатьОстаткиЗаВсеВремя = (ВыгружатьОстаткиЗаВсеВремя = 0);
	Настройки.ВыгружатьКонтрольныеПланыЗаВсеВремя = (ВыгружатьКонтрольныеПланыЗаВсеВремя = 0);
	
	Если Настройки.РеквизитАналогиТовара <> РеквизитАналогиТовара
		Или Настройки.РеквизитАналогиТовараСвойство <> РеквизитАналогиТовараСвойство Тогда
		Настройки.РеквизитАналогиТовара = РеквизитАналогиТовара;
		Настройки.РеквизитАналогиТовараВИсточнике = РеквизитАналогиТовараВИсточнике;
		Настройки.РеквизитАналогиТовараСвойство = РеквизитАналогиТовараСвойство;
		Настройки.РеквизитАналогиТовараПредставление = РеквизитАналогиТовараПредставление;
		Настройки.ИзмененияКоллекций["Товары"].ИзмененФормат = Истина;
	КонецЕсли;
	
	СервисПрогнозирования.ОбновитьНастройкиСервиса(Настройки);
	СервисПрогнозирования.УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеВыгрузкиПоУмолчаниюСервер()
	
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ВыгрузкаДанныхВСервисПрогнозированияПродаж");
	
	РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания();
	РасписаниеРегламентногоЗадания.ВремяНачала = Дата(1, 1, 1, 22, 0, 0);
	РасписаниеРегламентногоЗадания.ПериодПовтораДней = 1;
	РасписаниеРегламентногоЗадания.ПериодНедель = 1;
	
	ПараметрыОбновленияЗадания = Новый Структура("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ДанныеЗадания, ПараметрыОбновленияЗадания);
	
	ВыгрузкаДанныхВСервисПрогнозированияПродаж = РасписаниеРегламентногоЗадания;
	УстановитьТексты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеЗагрузкиПоУмолчаниюСервер()
	
	ДанныеЗадания = ПолучитьРегламентноеЗадание("ЗагрузкаДанныхИзСервисаПрогнозированияПродаж");
	
	РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания();
	РасписаниеРегламентногоЗадания.ВремяНачала = Дата(1, 1, 1, 8, 0, 0);
	РасписаниеРегламентногоЗадания.ПериодПовтораДней = 1;
	РасписаниеРегламентногоЗадания.ПериодНедель = 1;
	
	ПараметрыОбновленияЗадания = Новый Структура("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ДанныеЗадания, ПараметрыОбновленияЗадания);
	
	ЗагрузкаДанныхИзСервисаПрогнозированияПродаж = РасписаниеРегламентногоЗадания;
	УстановитьТексты();
	
КонецПроцедуры

&НаСервере
Процедура НачатьПроверкуДанныхНаСервере()
	
	Элементы.ОшибкиПроверкиДанныхГруппа.ТекущаяСтраница = Элементы.ОшибкиПроверкиДанныхРезультаты;
	Элементы.ГруппаРезультатыПроверки.ТекущаяСтраница = Элементы.ГруппаПроверкаНеЗавершена;
	
	ОшибкиПроверкиДанных.Очистить();
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	// 1. Проверка наличия продаж.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Источник.Количество
	|ПОМЕСТИТЬ ВТПродажи
	|ИЗ
	|	&Источник КАК Источник
	|;
	|ВЫБРАТЬ
	|	Источник.Количество
	|ИЗ
	|	ВТПродажи КАК Источник
	|ГДЕ
	|	Источник.Количество < 0";
	
	НачатьТранзакцию();
	Попытка
		
		ДатаОкончанияВыгрузкиОстатковИПродаж = НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж;
		ДатаОкончанияВыгрузкиОстатковИПродаж = ?(ЗначениеЗаполнено(ДатаОкончанияВыгрузкиОстатковИПродаж),
			ДатаОкончанияВыгрузкиОстатковИПродаж,
			НачалоДня(ТекущаяДатаСеанса()));
		
		ИмяКоллекции = "Продажи";
		
		// Временный откат даты актуальности для получения информации о продажах.
		ИсходнаяДатаАктуальности = НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаАктуальности;
		
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаАктуальности = Дата(2010, 1, 1);
		СервисПрогнозирования.ОбновитьНастройкиСервиса(НастройкиСервиса);
		
		НоваяДатаАктуальности = Дата(2010, 1, 1);
		Итерация = 0;
		ЕстьПродажи = Ложь;
		ЕстьОтрицательныеПродажи = Ложь;
		Пока НоваяДатаАктуальности <= ДатаОкончанияВыгрузкиОстатковИПродаж
			И Итерация < 100 Цикл
			ПорцияВыгрузки = СервисПрогнозированияПереопределяемый.ПолучитьКоллекцию(ИмяКоллекции);
			
			Если ПорцияВыгрузки.КоличествоДанных > 0 Тогда
				ЕстьПродажи = Истина;
				
				Запрос.УстановитьПараметр("Источник", ПорцияВыгрузки.Коллекция);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ЕстьОтрицательныеПродажи = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяДатаАктуальности = НачалоДня(ПорцияВыгрузки.ДатаОкончанияВыборкиПорции);
			НастройкиСервиса.ИзмененияКоллекций["Продажи"].ДатаАктуальности = НоваяДатаАктуальности;
			СервисПрогнозирования.ОбновитьНастройкиСервиса(НастройкиСервиса);
			Итерация = Итерация + 1;
		КонецЦикла;
		
		НастройкиСервиса.ИзмененияКоллекций["Продажи"].ДатаАктуальности = ИсходнаяДатаАктуальности;
		СервисПрогнозирования.ОбновитьНастройкиСервиса(НастройкиСервиса);
		
		Если Не ЕстьПродажи Тогда
			СтрокаОшибки = ОшибкиПроверкиДанных.Добавить();
			СтрокаОшибки.ВидОшибки = НСтр("ru = 'Наличие продаж'");
			СтрокаОшибки.НайденоОшибок = 1;
			СтрокаОшибки.ОписаниеОшибки = 
				ТекстОшибкиНеУдалосьНайтиПродажи();
		КонецЕсли;
		Если ЕстьОтрицательныеПродажи Тогда
			СтрокаОшибки = ОшибкиПроверкиДанных.Добавить();
			СтрокаОшибки.ВидОшибки = НСтр("ru = 'Наличие продаж'");
			СтрокаОшибки.НайденоОшибок = 1;
			СтрокаОшибки.ОписаниеОшибки = 
				ТекстОшибкиЕстьОтрицательныеПродажи();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Ошибка,
									,
									,
									ТекстОшибки);
									
		СтрокаОшибки = ОшибкиПроверкиДанных.Добавить();
		СтрокаОшибки.ВидОшибки = ТекстОшибкиОшибкаКода();
		СтрокаОшибки.НайденоОшибок = 1;
		СтрокаОшибки.ОписаниеОшибки = ТекстОшибки;
	КонецПопытки;
	
	// 2. Проверка на корректную настройку коллекций.
	Если НастройкиСервиса.Коллекции["Категории"].Выгружать
		И (Не НастройкиСервиса.Коллекции["Товары"].Выгружать
		Или Не НастройкиСервиса.Коллекции["Товары"].ВложенноеОписание["КодКатегории"].Выгружать) Тогда
		СтрокаОшибки = ОшибкиПроверкиДанных.Добавить();
			СтрокаОшибки.ВидОшибки = НСтр("ru = 'Настройка коллекций'");
			СтрокаОшибки.НайденоОшибок = 1;
			СтрокаОшибки.ОписаниеОшибки = 
				ТекстНеОтмеченаКВыгрузкеКолонкаКатегория();
	КонецЕсли;
	
	Если ОшибкиПроверкиДанных.Количество() = 0 Тогда
		Элементы.ГруппаРезультатыПроверки.ТекущаяСтраница = Элементы.ГруппаПроверкаЗавершенаУспешно;
	Иначе
		Элементы.ГруппаРезультатыПроверки.ТекущаяСтраница = Элементы.ГруппаПроверкаЗавершенаЕстьОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВыгрузкиМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РазрешенВыборРеквизитовМетаданных= Ложь;
	
	Если РазрешенВыборРеквизитовМетаданных Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущаяСтрока = Элементы.НастройкиВыгрузкиМетаданных.ТекущиеДанные;
		Если ТекущаяСтрока.УровеньДерева <> 1 Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ИмяВИсточнике", ТекущаяСтрока.ИмяВИсточнике);
		ПараметрыФормы.Вставить("ИмяВСервисе", ТекущаяСтрока.ИмяВСервисе);
		ПараметрыФормы.Вставить("ЗаблокироватьФлагВыбора", ТекущаяСтрока.ЗаблокироватьФлагВыбора);
		ПараметрыФормы.Вставить("Выбрано", ТекущаяСтрока.Выбрано);
		
		ОткрытьФорму("Обработка.ПанельУправленияСервисомПрогнозирования.Форма.ФормаПодбораРеквизитовКоллекций",
			ПараметрыФормы,
			ЭтаФорма,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопРеквизитыИзСоставаПередаваемыхДанныхНаСервере()
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Описание = СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций();
	
	Для Каждого УровеньКоллекций Из НастройкиВыгрузкиМетаданных.ПолучитьЭлементы() Цикл
		
		Описание[УровеньКоллекций.ИмяВИсточнике].Выгружать = УровеньКоллекций.Выбрано;
		Для Каждого УровеньРеквизитов Из УровеньКоллекций.ПолучитьЭлементы() Цикл
			
			КоллекцияВыгружалась = Настройки.ИдКоллекций.Свойство(УровеньКоллекций.ИмяВСервисе);
			Если Описание[УровеньКоллекций.ИмяВИсточнике].ВложенноеОписание.Свойство(УровеньРеквизитов.ИмяВИсточнике) Тогда
			
			Если КоллекцияВыгружалась
				И Описание[УровеньКоллекций.ИмяВИсточнике].ВложенноеОписание[УровеньРеквизитов.ИмяВИсточнике].Выгружать
					<> УровеньРеквизитов.Выбрано Тогда
				Настройки.ИзмененияКоллекций[УровеньКоллекций.ИмяВИсточнике].ИзмененФормат = Истина;
			КонецЕсли;
			
			Описание[УровеньКоллекций.ИмяВИсточнике].ВложенноеОписание[УровеньРеквизитов.ИмяВИсточнике].Выгружать
				= УровеньРеквизитов.Выбрано;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Настройки.Коллекции = Описание;
	
	СервисПрогнозирования.ОбновитьНастройкиСервиса(Настройки);
	
	СформироватьДеревоВыгрузкиМетаданных();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТикет()
	
	Ответ = СервисПрогнозирования.ПолучитьТикет();
	Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(Ответ.ТекстОшибки);
	КонецЕсли;
	Возврат Ответ.Тикет;
	
КонецФункции

&НаСервере
Процедура СуществующийВидПланаПриИзмененииСервер()
	ОбновитьИнформациюОВыгрузкеКоллекцийИСтатусыОбучения();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВыгрузкеКоллекцийИСтатусыОбучения()
	
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаТестовыйПрогноз Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	РезультатРасчета = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Обработки.ПанельУправленияСервисомПрогнозирования.ИнформацияОВыгрузкеКоллекцийИСтатусыОбучения",
	                                                     СценарийПрогнозирования,
	                                                     ВидПлана);
	
	АдресХранилищаИнформацияОВыгрузке = РезультатРасчета.АдресРезультата;
	ИдентификаторЗаданияИнформацияОВыгрузке = РезультатРасчета.ИдентификаторЗадания;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИнформациюОВыгрузкеКоллекцийИСтатусыОбучения()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилищаИнформацияОВыгрузке);
	ИдентификаторЗаданияИнформацияОВыгрузке = Неопределено;
	
	ВыгрузкаАктивна = Результат.ВыгрузкаАктивна;
	НастройкиСервиса = Результат.НастройкиСервиса;
	СтатусыОбучения = Результат.СтатусыОбучения;
	
	ИндикаторВыгрузки = 0;
	Если НастройкиСервиса.ЗапланированоВыгрузитьКоллекций > 0 Тогда
		ИндикаторВыгрузки = НастройкиСервиса.ВыгруженоКоллекций / НастройкиСервиса.ЗапланированоВыгрузитьКоллекций * 100;
	КонецЕсли;
	Элементы.ИндикаторВыгрузки.Подсказка = НастройкиСервиса.ИмяВыгружаемойСейчасКоллекции;
	
	ВыгрузкаРанееПроизводилась = Ложь;
	Для Каждого ОписаниеИзмененияКоллекции Из НастройкиСервиса.ИзмененияКоллекций Цикл
		Если ОписаниеИзмененияКоллекции.Значение.ДатаВыгрузки > Дата(2010, 1, 1) Тогда
			ВыгрузкаРанееПроизводилась = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтатусОбученияМодели = СтатусыОбучения.СтатусПрогнозаИОбучения;
	ЕстьИнформацияОСтатусеОбучения = СтатусыОбучения.ЕстьИнформацияОСтатусеОбучения;
	
	Если ВыгрузкаАктивна Тогда
		Элементы.СтраницыТестовыйПрогнозЗапуститьИлиПоказатьСтатус.ТекущаяСтраница
			= Элементы.СтраницыТестовыйПрогнозИдетВыгрузка;
	ИначеЕсли ЗначениеЗаполнено(ВидПлана)
		И ЗначениеЗаполнено(СтатусОбученияМодели)
		И ЕстьИнформацияОСтатусеОбучения Тогда
		Элементы.СтраницыТестовыйПрогнозЗапуститьИлиПоказатьСтатус.ТекущаяСтраница
			= Элементы.СтраницыТестовыйПрогнозПоказатьСтатус;
	ИначеЕсли ВыгрузкаРанееПроизводилась Тогда
		Элементы.СтраницыТестовыйПрогнозЗапуститьИлиПоказатьСтатус.ТекущаяСтраница
			= Элементы.СтраницыТестовыйПрогнозЗапустить;
		Элементы.НачатьПрогнозирование.Доступность = РазрешитьПовторнуюВыгрузку;
		Элементы.РазрешитьПовторнуюВыгрузку.Видимость = Истина;
		Элементы.СтраницыТестовыйПрогнозЗапуститьЛиния3.Видимость = Истина;
	Иначе
		Элементы.СтраницыТестовыйПрогнозЗапуститьИлиПоказатьСтатус.ТекущаяСтраница
			= Элементы.СтраницыТестовыйПрогнозЗапустить;
		Элементы.НачатьПрогнозирование.Доступность = Истина;
		Элементы.РазрешитьПовторнуюВыгрузку.Видимость = Ложь;
		Элементы.СтраницыТестовыйПрогнозЗапуститьЛиния3.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРеквизитыСтатусовАвторизации()
	
	ПереключательЗаявкаАвторизация = ?(ЗначениеЗаполнено(ТокенПриложения), 1, 0);
	ВыполненПереходКСтраницеАктивногоПодключения = ЗначениеЗаполнено(ТокенПриложения);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтатусПодключения()
	
	ИдетПодключение = Не ПустаяСтрока(ИдентификаторЗаданияПовторитьРегистрацию)
		Или Не ПустаяСтрока(ИдентификаторЗаданияПодключитьсяКСервису);
	
	Если ИдетПодключение Тогда
		СтатусАвторизацииПредставление = НСтр("ru = 'Идет регистрация...'");
	ИначеЕсли ЗначениеЗаполнено(ТокенПриложения) Тогда
		СтатусАвторизацииПредставление = НСтр("ru = 'Зарегистрировано.'");
	Иначе
		СтатусАвторизацииПредставление = НСтр("ru = 'Ожидается регистрация.'");
	КонецЕсли;
	
	Если СтатусПодключения = СервисПрогнозирования.СтатусПодключенияАктивен() Тогда
		СтатусПодключенияПредставление = НСтр("ru = 'Доступ предоставлен.'");
	ИначеЕсли СтатусПодключения = СервисПрогнозирования.СтатусПодключенияВОчереди() Тогда
		СтатусПодключенияПредставление = НСтр("ru = 'В очереди на активацию доступа.'");
	ИначеЕсли СтатусПодключения = СервисПрогнозирования.СтатусПодключенияНеПодключено() Тогда
		СтатусПодключенияПредставление = НСтр("ru = 'Доступ не предоставлен.'");
	КонецЕсли;
	
	ШаблонСтроки = "%1 %2";
	СтатусАвторизации = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
			СтатусАвторизацииПредставление,
			СтатусПодключенияПредставление)
	
КонецПроцедуры

&НаСервере
Процедура ПрерватьВыгрузкуНаСервере()
	
	СервисПрогнозирования.УстановитьСтатусВыгрузки(Ложь);
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	Комментарий = НСтр("ru = 'Выгрузка данных в сервис прогнозирования продаж прервана вручную.'");
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
								УровеньЖурналаРегистрации.Информация,
								,
								,
								Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИПередаваемыеДанные()
	СохранитьСоставПередаваемыхДанных();
	ЗаписатьНастройки();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИспользованиеОстатковИПродажПересчитать(Форма)
	Форма.ИспользоватьРеальныеОстаткиИПродажи = Форма.ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 0 Или
		Форма.ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 2;
	Форма.ИспользоватьПлановыеОстаткиИПродажи = Форма.ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 1 Или
		Форма.ИспользоватьРеальныеИлиПлановыеОстаткиИПродажиВыбор = 2;
КонецПроцедуры

#КонецОбласти

#Область Подключаемые

&НаКлиенте
Процедура Подключаемый_ПолучитьИнформациюОВыгрузкеИСтатусы()
	
	ОбновитьИнформациюОВыгрузкеКоллекцийИСтатусыОбучения();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИндикаторВыгрузкиИОбновлениеСтатусов()
	
	Если ЗаданиеВыполнено(ИдентификаторЗаданияИнформацияОВыгрузке) Тогда
		ОтобразитьИнформациюОВыгрузкеКоллекцийИСтатусыОбучения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПовторитьРегистрациюНаКлиенте()
	ПовторитьРегистрациюНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияПовторитьРегистрацию) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПовторитьРегистрациюНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодключитьсяКСервисуНаКлиенте()
	ПодключитьсяКСервисуНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияПодключитьсяКСервису) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьсяКСервисуНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьЗаявкуВСервисНаКлиенте()
	ОтправитьЗаявкуВСервисНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияОтправитьЗаявкуВСервис) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОтправитьЗаявкуВСервисНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьСтатусПодключенияНаКлиенте()
	ОбновитьСтатусПодключенияРезультатНаСервере();
	Если Не ПустаяСтрока(ИдентификаторЗаданияОбновитьСтатусПодключения) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСтатусПодключенияНаКлиенте", 1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеОбработка

&НаСервере
Процедура ОтправитьЗаявкуВСервисНаСервере()
	Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияОтправитьЗаявкуВСервис) Тогда
		ИдентификаторЗаданияОтправитьЗаявкуВСервис = "";
		ПолучитьНастройкиСервиса();
		РассчитатьСтатусПодключения();
		УстановитьВидимостьДоступность();
		УстановитьТексты();
		Ответ = ПолучитьИзВременногоХранилища(АдресХранилищаОтправитьЗаявкуВСервис);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
		
		ОбновитьСтатусПодключенияНаСервере();
		РассчитатьРеквизитыСтатусовАвторизации();
		УстановитьВидимостьДоступность();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусПодключенияРезультатНаСервере()
	Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияОбновитьСтатусПодключения) Тогда
		ИдентификаторЗаданияОбновитьСтатусПодключения = "";
		ПолучитьНастройкиСервиса();
		РассчитатьСтатусПодключения();
		УстановитьВидимостьДоступность();
		УстановитьТексты();
		Ответ = ПолучитьИзВременногоХранилища(АдресХранилищаОбновитьСтатусПодключения);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодключитьсяКСервисуНаСервере()
	Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияПодключитьсяКСервису) Тогда
		ИдентификаторЗаданияПодключитьсяКСервису = "";
		ПолучитьНастройкиСервиса();
		РассчитатьСтатусПодключения();
		УстановитьВидимостьДоступность();
		УстановитьТексты();
		Ответ = ПолучитьИзВременногоХранилища(АдресХранилищаПодключитьсяКСервису);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПовторитьРегистрациюНаСервере()
	Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияПовторитьРегистрацию) Тогда
		ИдентификаторЗаданияПовторитьРегистрацию = "";
		ПолучитьНастройкиСервиса();
		РассчитатьСтатусПодключения();
		УстановитьВидимостьДоступность();
		УстановитьТексты();
		Ответ = ПолучитьИзВременногоХранилища(АдресХранилищаПовторитьРегистрацию);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			ВызватьИсключение Ответ.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияИндикатораВыгрузкиИОбновленияСтатусов()
	
	Включить = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТестовыйПрогноз);
	Если Включить Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИнформациюОВыгрузкеИСтатусы", 5, Ложь);
		ПодключитьОбработчикОжидания("Подключаемый_ИндикаторВыгрузкиИОбновлениеСтатусов", 2, Ложь);
	Иначе
		ОтключитьОбработчикОжидания("Подключаемый_ПолучитьИнформациюОВыгрузкеИСтатусы");
		ОтключитьОбработчикОжидания("Подключаемый_ИндикаторВыгрузкиИОбновлениеСтатусов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыгрузкиКоллекцийИЗапускОбучения()
	
	СтатусОбученияМодели = Новый ФорматированнаяСтрока(НСтр("ru = 'Расчет статуса выгрузки...'"));
	Элементы.СтраницыТестовыйПрогнозЗапуститьИлиПоказатьСтатус.ТекущаяСтраница = Элементы.СтраницыТестовыйПрогнозПоказатьСтатус;
	
	Если ВыгрузкаРанееПроизводилась Тогда
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить("Догрузить", НСтр("ru = 'Догрузить'"));
		Кнопки.Добавить("ВыгрузитьПолностью", НСтр("ru = 'Выгрузить полностью'"));
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ТекстВопроса = НСтр("ru = 'Зафиксировано, что выгрузка данных ранее уже производилась. Пожалуйста, выберите необходимое действие:
		| - Догрузить - добавит информацию по новым остаткам и продажам, полностью выгрузить товары и другие справочные коллекции.
		| - Выгрузить полностью - удалит имеющуюся на сервере информацию и произведет полную выгрузку данных с нуля.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("НачалоВыгрузкиКоллекцийИЗапускОбученияЗавершение", ЭтотОбъект),
			ТекстВопроса, Кнопки);
	Иначе
		НачатьПрогнозированиеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыгрузкиКоллекцийИЗапускОбученияЗавершение(Результат, ПараметрКоманды) Экспорт
	Если Результат = "Догрузить" Тогда
		НачатьПрогнозированиеНаСервере();
	ИначеЕсли Результат = "ВыгрузитьПолностью" Тогда
		НачатьПрогнозированиеНаСервере(Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзСервисаНаСервере()
	
	Если ЗначениеЗаполнено(ВидПлана) Тогда
		ИнфоСтатусаОбучения = СервисПрогнозирования.ПолучитьСтатусОбучения(ВидПлана);
		Если ИнфоСтатусаОбучения <> Неопределено
			И ИнфоСтатусаОбучения.Статус = СервисПрогнозирования.СтатусГотовКПолучению() Тогда
			СервисПрогнозирования.ПолучитьПрогнозСервиса(ВидПлана, ИнфоСтатусаОбучения.ИдОбучения);
		КонецЕсли;
		ОбновитьИнформациюОВыгрузкеКоллекцийИСтатусыОбучения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)

	Возврат ЗначениеЗаполнено(ИдентификаторЗадания)
		И ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);

КонецФункции

#Область Тексты

&НаСервере
Функция ПолучитьТекстОшибкиВидаПлана()
	Возврат РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ПолучитьТекстОшибкиВидаПлана(ВидПлана);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиСценарийИспользуетсяДляПодменыПродаж()
	Возврат НСтр("ru='Сценарий прогнозирования %1 запрещен для выбора, поскольку используется для подмены данных о продажах.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиСценарийИспользуетсяДляКонтрольныхПланов()
	Возврат НСтр("ru='Сценарий прогнозирования %1 запрещен для выбора, поскольку используется для выгрузки контрольных планов продаж.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиСценарийНеМожетБытьРавенСценариюПодменыПродаж()
	Возврат НСтр("ru = 'Контрольный сценарий не может быть равен сценарию подмены продаж.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиСценарийПодменыПродажНеМожетБытьПустым()
	Возврат НСтр("ru = 'Сценарий подмены продаж не может быть пустым.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиКонецПериодаБольшеНачала()
	Возврат НСтр("ru = 'Конец периода должен быть больше начала'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиАвторизацияНеНайдена()
	Возврат НСтр("ru = 'Авторизация не найдена. Вернитесь на первый шаг.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеЗаполненВидПлана()
	Возврат НСтр("ru = 'Не заполнен реквизит Вид плана.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеЗаполненСценарийПрогнозирования()
	Возврат НСтр("ru = 'Не заполнено поле ""Сценарий прогнозирования"".'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиБудутУдаленыПользовательскиеРеквизиты()
	Возврат НСтр("ru = 'Будут удалены все реквизиты, кроме изначально предусмотренных сервисом. Продолжить?'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиТекущаяВыгрузкаБудетПрервана()
	Возврат НСтр("ru = 'Текущая выгрузка будет прервана. Выгруженные данные останутся на сервере. Продолжить?'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеУдалосьНайтиПродажи()
	Возврат НСтр("ru = 'Не удалось найти продажи. Для исправления проверьте, пожалуйста, настройки источников данных, отбор по периоду выгрузки продаж и заданные настройки фильтрации.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиЕстьОтрицательныеПродажи()
	Возврат НСтр("ru = 'Найдены отрицательные продажи. Такие продажи могут возникнуть из-за возвратов, произведенных не в день продажи.
		|Отрицательные продажи игнорируются сервисом прогнозирования продаж.'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиОшибкаКода()
	Возврат НСтр("ru = 'Ошибка программного кода'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстНеОтмеченаКВыгрузкеКолонкаКатегория()
	ТекстШаблона = НСтр("ru = 'Коллекция ""Категории товаров"" отмечена к выгрузке, но не используется в других коллекциях.
	|Пожалуйста, отметьте к выгрузке реквизит ""Код категории"" в коллекции ""Товары"", или отключите выгрузку коллекции ""Категории товаров"".'");
	Возврат ТекстШаблона;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеЗаполненаЭлектроннаяПочта()
	ТекстШаблона = НСтр("ru = 'Необходимо указать адрес электронной почты контактного лица.'");
	Возврат ТекстШаблона;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеЗаполненоФИО()
	ТекстШаблона = НСтр("ru = 'Необходимо указать ФИО контактного лица.'");
	Возврат ТекстШаблона;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиНеверныйФорматАдресаЭлектроннойПочты()
	ТекстШаблона = НСтр("ru = 'Неверный формат адреса электронной почты.'");
	Возврат ТекстШаблона;
КонецФункции

#КонецОбласти

#КонецОбласти
