// Модуль обработки "ОбеспечениеПотребностей"
// Наполнен кодом: 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148
// Разработка по ФДР С31.010, Обработка для формирования заказов по потребностям

// Код размещен в модуле объекта так как он был пустым. 
// Позволило не громоздить методы совместно с методами модуля менеджера обработки

#Область КР_ДобавленныеПроцедурыИФункции

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// << 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148
Функция КР_ЗапуститьФормированиеЗаказовПоПотребоностям(
	Знач Период = Неопределено, ПредварительныйРасчет = Ложь) Экспорт 
	
	Если Не ЗначениеЗаполнено(Период) Тогда 
		Период = НачалоДня(ТекущаяДатаСеанса()); 
	Иначе
		Период = НачалоДня(Период);
    КонецЕсли;
	
	// Выделяю в отдельный флаг. Возможно будет отдельным параметром
	УчитыватьПрогнозПотребности = ПредварительныйРасчет;
	
	МодульМенеджера = Обработки.ОбеспечениеПотребностей;     
	
	// Подготавливаем эмуляцию реквизитов формы обработки
	
	// СпособыОбеспечения
	ТаблицаСпособыОбеспечения = КР_СформироватьТаблицуСпособыОбеспечения();
	// Запасы
	ТаблицаЗапасы = КР_СформироватьТаблицуЗапасы();
	// ТаблицаДокументы                         
	ТаблицаДокументы = КР_СформироватьТаблицуДокументы();
		
	// Инициализация переменного окружения для типовых методов обработки    
		
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	СхемаКомпоновкиДанных = МодульМенеджера.ПолучитьМакет("МакетКомпоновкиДляСерверныхОтборов");
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилища);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.Настройки;   
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновкиДанных,
		"ТипОбеспечения", Перечисления.ТипыОбеспечения.Перемещение, ВидСравненияКомпоновкиДанных.Равно);   
	//
	
	// Получаем способы обеспечения
	Параметры = Новый Структура;
	Параметры.Вставить("Настройки", НастройкиКомпоновкиДанных);
	Параметры.Вставить("ТоварыПоддерживаемогоЗапаса", Истина);
	Параметры.Вставить("Период", Период);
	
	МодульМенеджера.ТаблицаСпособовОбеспечения(Параметры, АдресВременногоХранилища);
	Данные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища); 
	Для Каждого СтрокаДанных Из Данные Цикл   
		Если Не СтрокаДанных.НаступилаДатаОчередногоЗаказа Тогда 
			Продолжить;
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(ТаблицаСпособыОбеспечения.Добавить(), СтрокаДанных);
	КонецЦикла;	
	//
	
	// Рассчитываем запасы     
	ПользовательскиеНастройкиКомпоновкиДанных = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Параметры = Новый Структура;
	Параметры.Вставить("Отбор", КомпоновщикНастроек.ПользовательскиеНастройки);
	Параметры.Вставить("ТаблицаСпособовОбеспечения", ТаблицаСпособыОбеспечения);
	Параметры.Вставить("ТипОтбора", "ОтборыКомпоновки");
	Параметры.Вставить("Период", Период);
	Параметры.Вставить("УчитыватьПрогнозПотребности", УчитыватьПрогнозПотребности);   
	// << 12.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2604
	//Параметры.Вставить("УчитыватьСвободныеОстатки", Ложь);   
	// >> 12.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2604
	
	МодульМенеджера.ТаблицаЗапасы(Параметры, АдресВременногоХранилища);
	Данные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
	// Блок кода из формы документа за некоторым исключением
	Для Каждого СтрокаДанных Из Данные Цикл
	
		СтрокаЗапасы = ТаблицаЗапасы.Добавить();
	
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, СтрокаДанных);
	
		РезультатРасчета = МодульМенеджера.МинимальныйИМаксимальныйЗапасы(СтрокаЗапасы);
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, РезультатРасчета);
	
		РезультатРасчета = МодульМенеджера.КоличествоКЗаказуДляПоддержанияЗапаса(СтрокаЗапасы, Период);
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, РезультатРасчета);
	
		СтрокаЗапасы.КЗаказуРекомендуется = СтрокаЗапасы.КЗаказу;
		
	КонецЦикла;
	
	// Создаем документы. Правтически полностью типовой код из формы
	СекцииДляВыгрузки = "СвойстваПотребности, РеквизитыОбеспечивающегоЗаказа, РеквизитыЗаказаКОбеспечению";
	Поля = Обработки.ОбеспечениеПотребностей.ПоляТаблицыЗаказы(СекцииДляВыгрузки);
	Поля.Вставить("ЧислительУпаковки", Новый ОписаниеТипов("Число"));
	Поля.Вставить("ЗнаменательУпаковки", Новый ОписаниеТипов("Число"));
	Поля.Вставить("ТипЕдиницыИзмерения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИзмеряемыхВеличин"));
	Поля.Вставить("Отметка", Новый ОписаниеТипов("Булево"));
	Поля.Вставить("УпаковкаЗаказа", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Поля.Вставить("МинимальнаяПартияПоставки", Новый ОписаниеТипов("Число"));
	Поля.Вставить("НеОкруглятьПередСозданиемЗаказа", Новый ОписаниеТипов("Булево"));
	
	ТаблицаПотребностей = Новый ТаблицаЗначений();
	Для Каждого Поле Из Поля Цикл
		ТаблицаПотребностей.Колонки.Добавить(Поле.Ключ, Поле.Значение);
	КонецЦикла;     
	Для Каждого Строка Из ТаблицаЗапасы Цикл
		Если Строка.Отметка И Строка.КЗаказу > 0 Тогда
			НоваяСтрока = ТаблицаПотребностей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;

	Параметры = Новый Структура;
	Параметры.Вставить("ТаблицаПотребностей", ТаблицаПотребностей);
	Параметры.Вставить("ИспользоватьУпаковки", Ложь);
	Параметры.Вставить("АдресРезультатаФормированияЗаказов", АдресВременногоХранилища);
	Параметры.Вставить("ТаблицаДокументов", ТаблицаДокументы);
	Параметры.Вставить("Период", Период);
	Параметры.Вставить("ПредварительныйРасчет", ПредварительныйРасчет); 
	
	МодульМенеджера.СформироватьЗаказы(Параметры, Неопределено);
	Данные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Результат = Неопределено; 
	
	// При "успешном" выполнении метод должен вернуть структуру.
	// В противном случае значение, помещенное в хранилище не меняется
	Если ТипЗнч(Данные) <> Тип("Структура") Тогда 
		Возврат Результат;
	КонецЕсли;
	
	// Не понятно что делать с сообщениями, по этому пока сообщаем в сеанс запуска
	Для Каждого Сообщение Из Данные.СписокСообщений Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Если Не ПредварительныйРасчет Тогда 
		// Мы передавали ссылку на таблицу, по этому она уже содержит данные
		//	но на всякий случай "переполучим", мало ли типовой код поменяется...
		ТаблицаДокументы = Данные.ТаблицаДокументов;   
		//
		
		// Переводим документы к КВыполнению и способу обработки Отгрузить.
		// При этом нужно распределить аналоги на недостающий товар согласно приоритетам магазинов
		КР_ЗаполнитьАналогиТоваровИОтгрузитьТовары(ТаблицаДокументы);

	Иначе
		
		Результат = Данные.Таблицы;
		
	КонецЕсли;
	
	// Чистим за собой
	УдалитьИзВременногоХранилища(АдресВременногоХранилища); 
	Данные = Неопределено;
	//
	
	Возврат Результат;
	
КонецФункции // >> 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148

// << 11.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-1720
Процедура КР_ЗапуститьФормированиеПрогнознойПотребностиВПодсортировке(НачалоТекущегоДня = Неопределено) Экспорт 
	
	// Очищаем регистр прогнозных значений
	РегистрыСведений.КР_ПрогнозПотребностиВПодсортировкеМагазинов.СоздатьНаборЗаписей().Записать();
	
	// Запускаем расчет на 7 дней с завтрашнего дня
	КоличествоПериодов = 7;
	Сутки = 3600 * 24;        
	Если НачалоТекущегоДня = Неопределено Тогда 
		НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());  
	КонецЕсли;	
	Для Итератор = 1 По КоличествоПериодов Цикл 
				
		Период = НачалоТекущегоДня + Сутки * Итератор;
		Таблицы = КР_ЗапуститьФормированиеЗаказовПоПотребоностям(Период, Истина);
		
		КР_ОбработатьПредварительныйРасчетЗаказыНаПеремещение(Период, Таблицы.ТаблицаЗаказыНаПеремещение);
		
	КонецЦикла;
	
КонецПроцедуры // >> 11.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-1720

#КонецОбласти

#Область СлужебныеМетоды

// << 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148
Функция КР_СформироватьТаблицуСпособыОбеспечения()
	
	Возврат СпособыОбеспечения.ВыгрузитьКолонки();
	
КонецФункции // >> 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148

// << 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148
Функция КР_СформироватьТаблицуЗапасы()
	
	ТаблицаЗапасы = Запасы.ВыгрузитьКолонки();
	ТаблицаЗапасы.Колонки.Добавить("СпособОбеспечения", Новый ОписаниеТипов("СправочникСсылка.СпособыОбеспеченияПотребностей"));
	ТаблицаЗапасы.Колонки.Добавить("ИсточникОбеспечения", 
		Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Партнеры, Строка, СправочникСсылка.Склады"));
	ТаблицаЗапасы.Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	ТаблицаЗапасы.Колонки.Добавить("ТипОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбеспечения"));
	ТаблицаЗапасы.Колонки.Добавить("ЦенаВВалютеСоглашения", Новый ОписаниеТипов("Число"));
	ТаблицаЗапасы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаЗапасы.Колонки.Добавить("ВалютаСоглашения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаЗапасы.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
	ТаблицаЗапасы.Колонки.Добавить("МинимальнаяСуммаЗаказа", Новый ОписаниеТипов("Число"));
	ТаблицаЗапасы.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦенПоставщиков"));
	ТаблицаЗапасы.Колонки.Добавить("ИсточникОбеспеченияТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	ТаблицаЗапасы.Колонки.Добавить("ПеремещениеРазрешено", Новый ОписаниеТипов("Булево"));
	ТаблицаЗапасы.Колонки.Добавить("СуммаВалютаСоглашения", Новый ОписаниеТипов("Число"));
	ТаблицаЗапасы.Колонки.Добавить("КЗаказуРекомендуется", Новый ОписаниеТипов("Число"));	

	Возврат ТаблицаЗапасы;
	
КонецФункции // >> 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148

// << 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148
Функция КР_СформироватьТаблицуДокументы()
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПеремещение"));
	ТаблицаДокументы.Колонки.Добавить("ИсточникОбеспечения", 
		Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Партнеры, СправочникСсылка.Склады"));
	ТаблицаДокументы.Колонки.Добавить("СпособОбеспечения", Новый ОписаниеТипов("СправочникСсылка.СпособыОбеспеченияПотребностей"));
	ТаблицаДокументы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаДокументы.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДокументы.Колонки.Добавить("СтандартнаяКартинка", Новый ОписаниеТипов("Число"));
	ТаблицаДокументы.Колонки.Добавить("ДатаПоставки", Новый ОписаниеТипов("Дата"));
	ТаблицаДокументы.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДокументы.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("ИспользованиеСтатусов", Новый ОписаниеТипов("Булево"));

	Возврат ТаблицаДокументы;
	
КонецФункции // >> 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148

// << 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148
Функция КР_СписокДляОтбораСкладовПоДатеОтгрузки(Период)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СпособыОбеспеченияПотребностей
	|ИЗ
	|	Справочник.СпособыОбеспеченияПотребностей.КР_ГрафикСборки КАК Т
	|ГДЕ
	|	Т.НомерДняНедели = ДЕНЬНЕДЕЛИ(&Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Склад КАК Склад
	|ИЗ
	|	РегистрСведений.СхемыОбеспечения КАК Т
	|ГДЕ
	|	Т.СпособОбеспеченияПотребностей В
	|			(ВЫБРАТЬ
	|				Т.Ссылка
	|			ИЗ
	|				СпособыОбеспеченияПотребностей КАК Т)");
	
	Запрос.УстановитьПараметр("Период", Период);                   
	РезультатЗапроса = Запрос.Выполнить(); 
	СписокСкладов = Новый СписокЗначений;
	СписокСкладов.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0));

	Возврат СписокСкладов;
	
КонецФункции // >> 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148

// << 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148
Процедура КР_ЗаполнитьАналогиТоваровИОтгрузитьТовары(ТаблицаДокументы)
	
	// Сортируем документы по приоритету складов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Документ КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументы
	|ИЗ
	|	&ТаблицаДокументы КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Документ КАК Документ
	|ИЗ
	|	ТаблицаДокументы КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК Заказы
	|		ПО Т.Документ = Заказы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КР_РейтингМагазина КАК Рейтинги
	|		ПО (Заказы.СкладПолучатель = Рейтинги.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(Рейтинги.Рейтинг, 9999999999)");
	
	Запрос.УстановитьПараметр("ТаблицаДокументы", ТаблицаДокументы);
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ШаблонОшибкиЗаписать = НСтр("ru='Не удалось записать %1. %2'");
	ВариантОтгрузить = Перечисления.ВариантыОбеспечения.Отгрузить;
	
	// << 14.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2497
	ОтветственныйПользователь = КР_ДополнительныеНастройкиПовтИсп.Значение("ОтветственныйПодсортировки");
	// >> 14.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2497
	
	// Распределяем аналоги
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		ДокументОбъект = ВыборкаДетальныеЗаписи.Документ.ПолучитьОбъект();
		
		// A2105505-2392
		КР_УстановитьПризнакОсновнойЗаказПодсортировки(ДокументОбъект);
		//
		
		// A2105505-2516
		// Упрощение в связи с обновлением требований
		
		// << 10.06.2024 Вдовенко С.А., КРОК, A2105505-2669
		//Если ДокументОбъект.КР_ПодобратьАналогиНаОтсутствующийТовар()
		//	И ДокументОбъект.УстановитьСтатус("КВыполнению", Неопределено) Тогда
		ЕстьОстатки             = ДокументОбъект.КР_ПодобратьАналогиНаОтсутствующийТовар();
		СтатусУстановленУспешно = ДокументОбъект.УстановитьСтатус("КВыполнению", Неопределено);
		КР_ОтфильтроватьТоварыДокументаПоМинимальноТребуемомуКоличеству(ДокументОбъект.Товары);
		Если ЕстьОстатки
			И СтатусУстановленУспешно
			И ДокументОбъект.Товары.Количество() > 0 Тогда
		// >> 10.06.2024 Вдовенко С.А., КРОК, A2105505-2669
			
			Товары = ДокументОбъект.Товары;
			
			// Сюда попадаем только если есть товаря на остатках и надо отгрузить
			// Отмененных строк нет

			// Взято из модуля менеджера документа с адаптацией
			Для Каждого СтрокаДанных Из Товары Цикл
				
				СтрокаДанных.ВариантОбеспечения = ВариантОтгрузить;
				
				ДатаПоступленияРасчетная = Макс(
					НачалоДня(ТекущаяДатаСеанса()) + 86400 * ДокументОбъект.ДлительностьПеремещения,
					ДокументОбъект.ЖелаемаяДатаПоступления);
						
				СтрокаДанных.НачалоОтгрузки = ДатаПоступленияРасчетная - 86400 * ДокументОбъект.ДлительностьПеремещения;
				СтрокаДанных.ОкончаниеПоступления = ДатаПоступленияРасчетная;
				
			КонецЦикла;
			
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			ДокументОбъект.ПометкаУдаления = Истина;
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;//РежимЗаписи = РежимЗаписиДокумента.Запись;//A2105505-2651
		КонецЕсли;
		
		// Запись документа
		Попытка		
			// << 14.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2497
			ДокументОбъект.Ответственный = ОтветственныйПользователь;
			// >> 14.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2497
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаписать, ДокументОбъект.Ссылка, 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка);
		КонецПопытки;
		
	КонецЦикла;		

КонецПроцедуры // >> 27.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1148

// << 11.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-1720
Процедура КР_ОбработатьПредварительныйРасчетЗаказыНаПеремещение(Период, Данные)

	// Состав полей (см. запрос ОбеспечениеПотребностей.ТаблицаЗаказыНаПеремещениеКОформлению)
	// Организация,
	// СкладОтправитель,
	// СкладПолучатель,
	// Подразделение,
	// НаправлениеДеятельности,
	// Номенклатура,
	// Характеристика,
	// Назначение,
	// НачалоОтгрузки,
	// ОкончаниеПоступления,
	// КоличествоУпаковок,
	// Количество
		
	Для Каждого СтрокаДанных Из Данные Цикл            
		
		Запись = РегистрыСведений.КР_ПрогнозПотребностиВПодсортировкеМагазинов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);    
		Запись.ДатаРасчета = Период;
		Запись.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры // >> 11.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-1720

// << 23.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2392
Процедура КР_УстановитьПризнакОсновнойЗаказПодсортировки(ДокументОбъект)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей
	|ПОМЕСТИТЬ СпособыОбеспечения
	|ИЗ
	|	РегистрСведений.СхемыОбеспечения КАК Т
	|ГДЕ
	|	Т.Склад = &Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикСборки.Основной КАК ОсновнойЗаказПодсортировки
	|ИЗ
	|	СпособыОбеспечения КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей.КР_ГрафикСборки КАК ГрафикСборки
	|		ПО Т.СпособОбеспеченияПотребностей = ГрафикСборки.Ссылка
	|			И (ГрафикСборки.НомерДняНедели = &НомерДняНедели)");
	
	Запрос.УстановитьПараметр("Склад", ДокументОбъект.СкладПолучатель);
	Запрос.УстановитьПараметр("НомерДняНедели", ДеньНедели(ДокументОбъект.Дата));
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ДокументОбъект.КР_ОсновнойЗаказПодсортировки = ВыборкаДетальныеЗаписи.ОсновнойЗаказПодсортировки;
	Иначе
		ДокументОбъект.КР_ОсновнойЗаказПодсортировки = Ложь;
	КонецЕсли;	
	
КонецПроцедуры // >> 23.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2392

// << 03.06.2024 Вдовенко С.А., КРОК, A2105505-2669
Процедура КР_ОтфильтроватьТоварыДокументаПоМинимальноТребуемомуКоличеству(ТоварыКОбработке)
	
	МинимальноеКоличествоАксессуаров = 10;
	МинимальноеКоличествоОстальнойНоменклатуры = 10;
	
	РезультатЗапроса = КР_РазделитьНоменклатуруПоВидамДляАлгоритмаУдаления(ТоварыКОбработке);
	ВыборкаПравилоОбработки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПравилоОбработки.Следующий() Цикл
		
		Если ВыборкаПравилоОбработки.ПравилоОбработки = "Остальная номенклатура"
			И ВыборкаПравилоОбработки.Количество < МинимальноеКоличествоОстальнойНоменклатуры Тогда
			
			КР_УдалитьСтрокиТоваровПоВыборке(ТоварыКОбработке, ВыборкаПравилоОбработки);
			
		КонецЕсли;
		
		Если ВыборкаПравилоОбработки.ПравилоОбработки = "Аксессуар"
			И ВыборкаПравилоОбработки.Количество < МинимальноеКоличествоАксессуаров Тогда
			
			КР_УдалитьСтрокиТоваровПоВыборке(ТоварыКОбработке, ВыборкаПравилоОбработки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КР_РазделитьНоменклатуруПоВидамДляАлгоритмаУдаления(ТоварыКОбработке)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТоварыКОбработке
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СУММА(ВТ_ТоварыКОбработке.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.Родитель = &ГруппаАксессуары
	|			ТОГДА ""Аксессуар""
	|		ИНАЧЕ ""Остальная номенклатура""
	|	КОНЕЦ КАК ПравилоОбработки
	|ИЗ
	|	ВТ_ТоварыКОбработке КАК ВТ_ТоварыКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_ТоварыКОбработке.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.Родитель = &ГруппаАксессуары
	|			ТОГДА ""Аксессуар""
	|		ИНАЧЕ ""Остальная номенклатура""
	|	КОНЕЦ
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	ПравилоОбработки";
	
	ГруппаАксессуары = КР_ДополнительныеНастройкиПовтИсп.Значение("ГруппаВидовНоменклатурыАксессуаров");
	Запрос.УстановитьПараметр("ГруппаАксессуары", ГруппаАксессуары);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТоварыКОбработке);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура КР_УдалитьСтрокиТоваровПоВыборке(ТоварыКОбработке, ВыборкаПравилоОбработки)
	
	ВыборкаДетальныеЗаписи = ВыборкаПравилоОбработки.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
		
		СтрокиТаблицы = ТоварыКОбработке.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			ТоварыКОбработке.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
// >> 03.06.2024 Вдовенко С.А., КРОК, A2105505-2669

#КонецОбласти

#Область ТекстыЗапросов

#КонецОбласти

#КонецЕсли	

#КонецОбласти	
