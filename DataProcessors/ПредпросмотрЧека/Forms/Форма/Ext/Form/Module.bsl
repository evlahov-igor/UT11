#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Возврат при получении формы для анализа
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	
	ДокументСсылка         = Параметры.ПараметрыОперации.ДокументСсылка;
	Организация            = Параметры.ПараметрыОперации.Организация;
	Контрагент             = Параметры.ПараметрыОперации.Контрагент;
	Партнер                = Параметры.ПараметрыОперации.Партнер;
	ВалютаДокумента        = Параметры.ПараметрыОперации.Валюта;
	СуммаДокумента         = Параметры.ПараметрыОперации.СуммаДокумента;
	ИмяКомандыПробитияЧека = Параметры.ПараметрыОперации.ИмяКомандыПробитияЧека;
	ПараметрыЭквайринговойОперации = Параметры.ПараметрыОперации.ПараметрыЭквайринговойОперации;
	
	Если ТипЗнч(ПараметрыЭквайринговойОперации) = Тип("Структура")
		И ПараметрыЭквайринговойОперации.Свойство("ЭквайринговыйТерминал") Тогда
		
		Терминал = ПараметрыЭквайринговойОперации.ЭквайринговыйТерминал;
	КонецЕсли;
	
	ТаблицаОборудования.Загрузить(ОбщегоНазначенияУТ.МассивВТаблицуЗначений(Параметры.ПодключенноеОборудованиеПечатиЧеков));
	
	
	ПараметрыПредпросмотраЧека = ФормированиеФискальныхЧековСервер.ПараметрыПредпросмотраЧека(Параметры.ПараметрыОперации);
	
	ВзаиморасчетыОбновлены = ПараметрыПредпросмотраЧека.ВзаиморасчетыОбновлены;
	Элементы.ДекорацияПодсказкаПриВыполненииОбработчиковОбновления.Видимость = НЕ ВзаиморасчетыОбновлены;
	
	ПараметрыОперацииФискализацииЧека = ПараметрыПредпросмотраЧека.ПараметрыОперацииФискализацииЧека;	
	
	ТорговыйОбъект = Неопределено;
	Если Не ЗначениеЗаполнено(ПараметрыОперацииФискализацииЧека.ТорговыйОбъект)
			И Параметры.ПараметрыОперации.Свойство("ТорговыйОбъект", ТорговыйОбъект) 
			И ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		ПараметрыОперацииФискализацииЧека.ТорговыйОбъект = ТорговыйОбъект;
	КонецЕсли;
	
	АвтоматическиОбновлятьКонтактыПартнеров = Константы.ОбновлятьКонтактнуюИнформациюПартнеровПриОтправкеЭлектронныхЧеков.Получить();
	
	ПокупательТипПерсональныхДанных = "ИНН";
	ТекстПолученоСогласиеНаОбработкуПерсональныхДанных = ТекстОПолученииСогласияНаОбработкуПерсональныхДанных();
	
	ОбъектыРасчетов.Загрузить(ПараметрыПредпросмотраЧека.ОбъектыРасчетовПоДокументу);
	
	ДокументыЕдиногоЧека.Загрузить(ПараметрыПредпросмотраЧека.ДокументыЕдиногоЧека);
	ЕдиныйЧек = ДокументыЕдиногоЧека.Количество() > 0;
	
	ДанныеФискальнойОперации = ПараметрыПредпросмотраЧека.ДанныеФискальнойОперации;
	
	ПризнакиСпособаРасчетаАвто.Загрузить(
		МассивВТаблицуЗначений(ПараметрыПредпросмотраЧека.ПризнакиСпособаРасчетаАвто)
	);
	
	РазрешенВводПерсональныхДанных = ПараметрыПредпросмотраЧека.РазрешенВводПерсональныхДанных;
	
	ПраваДоступа = ПараметрыПредпросмотраЧека.ПраваДоступа;
	
	РозничныеПродажи.ЗаполнитьПараметрыОтправкиЭлектронногоЧекаПоПартнеру(ЭтотОбъект);
	Телефон = РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(Телефон10Знаков);
	
	НастроитьСписокЗначенийВыбораТипаФискальногоДокумента();
	
	УстановитьДатаСовершенияКорректируемогоРасчета(
		ФормированиеФискальныхЧековСервер.ДатаСовершенияКорректируемогоРасчета(ДокументСсылка)
	);
	УстановитьТипЧекаКоррекции(Перечисления.ТипыЧековКоррекции.Самостоятельно);
	
	НастроитьДоступностьПробитияЧекаККМ();
	НастроитьВидимостьПредставленияТерминала();
	
	УстановитьВидимостьРеквизитовВводаПерсональныхДанныхПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемоеОборудованиеУТКлиент.УстановитьСтатусПодключенияОборудования(
		Истина,
		ЭтотОбъект,
		ИспользуемоеОборудование(),
		ТаблицаОборудования,
		Новый ОписаниеОповещения("ОбновитьСтатусПодключенияОборудованияЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьСессиюПроверкиКМНаККТ(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ПодключаемоеОборудованиеУТКлиент.УстановитьСтатусПодключенияОборудования(
		Ложь,
		ЭтотОбъект,
		ИспользуемоеОборудование(),
		ТаблицаОборудования
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийНавигационныхСсылок

&НаКлиенте
Процедура ТекстПолученоСогласиеНаОбработкуПерсональныхДанныхОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если "ОткрытьПечатнуюФормуПолученияСогласияНаОбработкуПерсональныхДанных" = НавигационнаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		МенеджерПечати = "Обработка.ПредпросмотрЧека";
		Идентификатор = "СогласиеНаОбработкуПерсональныхДанных";
		
		ОбъектыПечати = Новый Массив();
		ОбъектыПечати.Добавить(ДокументСсылка);
		
		ПараметрыПечати = Новый Структура();
		ПараметрыПечати.Вставить("ТипПерсональныхДанных", ПокупательТипПерсональныхДанных);
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(МенеджерПечати, Идентификатор, ОбъектыПечати, ЭтаФорма, ПараметрыПечати);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипФискальногоДокументаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТипФискальногоДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФискальногоДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипФискальногоДокумента(пТипФискальногоДокумента)
	
	ТипФискальногоДокумента = пТипФискальногоДокумента;
	
	ТипФискальногоДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТипФискальногоДокументаПриИзмененииНаСервере()
	
	НастроитьСписокЗначенийВыбораТипаРасчетаДенежнымиСредствами();
	УстановитьВидимостьДоступностьРеквизитаТипРасчетаДенежнымиСредствами();
	
	НастроитьСписокЗначенийВыбораВидаКоррекцииПоУмолчанию();
	УстановитьВидимостьДоступностьРеквизитовКоррекции();
	
КонецПроцедуры



&НаКлиенте
Процедура ФлагЕдиныйЧекПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ЕдиныйЧекПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЕдиныйЧекПриИзмененииНаСервере()
	
	ПараметрыПроверкиРазрешенияНаВводПерсональныхДанных = Новый Структура;
	ПараметрыПроверкиРазрешенияНаВводПерсональныхДанных.Вставить("ЕдиныйЧек", ЕдиныйЧек);
	ПараметрыПроверкиРазрешенияНаВводПерсональныхДанных.Вставить("ДокументСсылка", ДокументСсылка);
	ПараметрыПроверкиРазрешенияНаВводПерсональныхДанных.Вставить("Контрагент", Контрагент);
	РазрешенВводПерсональныхДанных = ФормированиеФискальныхЧековСерверПереопределяемый.РазрешенВводПерсональныхДанных(ПараметрыПроверкиРазрешенияНаВводПерсональныхДанных);
	Если Не РазрешенВводПерсональныхДанных Тогда
		ОперацияПредусматриваетВводПерсональныхДанныхПокупателя = Ложь;
		ОчиститьПерсональныеДанные();		
	КонецЕсли;
	
	ОбновитьПараметрыФискальногоЧека();
		
	УстановитьВидимостьРеквизитовВводаПерсональныхДанныхПокупателя();
	УстановитьВидимостьДоступностьРеквизитаПризнакСпособаРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРасчетаДенежнымиСредствамиПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТипРасчетаДенежнымиСредствамиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРасчетаДенежнымиСредствамиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипРасчетаДенежнымиСредствами(пТипРасчетаДенежнымиСредствами)
	
	ТипРасчетаДенежнымиСредствами = пТипРасчетаДенежнымиСредствами;
	
	ТипРасчетаДенежнымиСредствамиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТипРасчетаДенежнымиСредствамиПриИзмененииНаСервере()
	
	НастроитьСписокЗначенийВыбораПризнакаСпособаРасчета();
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры



&НаКлиенте
Процедура ПризнакСпособаРасчетаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПризнакСпособаРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакСпособаРасчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакСпособаРасчета(пПризнакСпособаРасчета)
	
	ПризнакСпособаРасчета = пПризнакСпособаРасчета;
	
	ПризнакСпособаРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПризнакСпособаРасчетаПриИзмененииНаСервере()
	
	УстановитьУточнениеТипаОплатПоСуммам();
	
	ОбновитьПараметрыФискальногоЧека();
	
	НастроитьВидимостьГруппыЕдиныйЧек();
	НастроитьВидимостьГруппыУточнениеТипаОплатПоСуммам();
	
КонецПроцедуры



&НаКлиенте
Процедура СуммаПредоплатыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПересчитатьТипыОплатПоСуммам(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатыНаличныеПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПересчитатьТипыОплатПоСуммам(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатыЭлектронноПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПересчитатьТипыОплатПоСуммам(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТипыОплатПоСуммам(Элемент)
	
	Если ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")
		ИЛИ ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой") Тогда
		
		Если Элемент.Имя = "СуммаПредоплаты" Тогда
			СуммаОплатыНаличные   = СуммаДокумента - СуммаПредоплаты;
			СуммаОплатыЭлектронно = 0;
		ИначеЕсли Элемент.Имя = "СуммаОплатыНаличные" Тогда
			СуммаОплатыЭлектронно = СуммаДокумента - СуммаПредоплаты - СуммаОплатыНаличные;
		ИначеЕсли Элемент.Имя = "СуммаОплатыЭлектронно" Тогда
			СуммаОплатыНаличные   = СуммаДокумента - СуммаПредоплаты - СуммаОплатыЭлектронно;
		КонецЕсли;
		
		СуммаПредоплаты = СуммаДокумента - СуммаОплатыНаличные - СуммаОплатыЭлектронно;
		
		Если СуммаПредоплаты + СуммаОплатыНаличные + СуммаОплатыЭлектронно > СуммаДокумента Тогда
			Если Элемент.Имя = "СуммаПредоплаты" Тогда
				СуммаПредоплаты       = СуммаДокумента;
			ИначеЕсли Элемент.Имя = "СуммаОплатыНаличные" Тогда
				СуммаОплатыНаличные   = СуммаДокумента;
			ИначеЕсли Элемент.Имя = "СуммаОплатыЭлектронно" Тогда
				СуммаОплатыЭлектронно = СуммаДокумента;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьТипыОплатПоСуммамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьТипыОплатПоСуммамНаСервере()
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры



&НаСервере
Процедура УстановитьДатаСовершенияКорректируемогоРасчета(пДатаСовершенияКорректируемогоРасчета)
	
	ДатаСовершенияКорректируемогоРасчета = пДатаСовершенияКорректируемогоРасчета;
	
	ДатаСовершенияКорректируемогоРасчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаСовершенияКорректируемогоРасчетаНаСервере()
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры



&НаКлиенте
Процедура ВидЧекаКоррекцииПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ВидЧекаКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЧекаКоррекцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидЧекаКоррекции(пВидЧекаКоррекции)
	
	ВидЧекаКоррекции = пВидЧекаКоррекции;
	
	ВидЧекаКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидЧекаКоррекцииПриИзмененииНаСервере()
	
	УстановитьОписаниеКоррекцииПоУмолчанию();
	УстановитьДоступностьОписанияКоррекции();
	
КонецПроцедуры



&НаКлиенте
Процедура ТипЧекаКоррекцииПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТипЧекаКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЧекаКоррекцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЧекаКоррекции(пТипЧекаКоррекции)
	
	ТипЧекаКоррекции = пТипЧекаКоррекции;
	
	ТипЧекаКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТипЧекаКоррекцииПриИзмененииНаСервере()
	
	НомерПредписанияНалоговогоОргана = 0;
	УстановитьВидимостьНомераПредписанияНалоговогоОргана();
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры



&НаКлиенте
Процедура НомерПредписанияНалоговогоОрганаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	НомерПредписанияНалоговогоОрганаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НомерПредписанияНалоговогоОрганаПриИзмененииНаСервере()
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры



&НаКлиенте
Процедура ОписаниеКоррекцииПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ОписаниеКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеКоррекцииПоУмолчанию()
	
	Если ВидЧекаКоррекции = Перечисления.ВидыЧековКоррекции.НеприменениеККТ Тогда
		УстановитьОписаниеКоррекции(НСтр("ru = 'Неприменение ККТ'"));
	Иначе
		УстановитьОписаниеКоррекции("");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеКоррекции(пОписаниеКоррекции)
	
	ОписаниеКоррекции = пОписаниеКоррекции;
	
	ОписаниеКоррекцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеКоррекцииПриИзмененииНаСервере()
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры



&НаКлиенте
Процедура ВариантОтправкиЭлектронногоЧекаНеОтправлятьПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ВариантОтправкиЭлектронногоЧекаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиЭлектронногоЧекаSMSПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ВариантОтправкиЭлектронногоЧекаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиЭлектронногоЧекаEmailПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ВариантОтправкиЭлектронногоЧекаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВариантОтправкиЭлектронногоЧекаПриИзмененииНаСервере()
	
	НеобходимостьОбработкиДанных = РозничныеПродажиКлиентСервер.ПроверитьНеобходимостьОбработкиДанныхЭлектронногоЧека(ЭтотОбъект);
	Если НеобходимостьОбработкиДанных.ТребуетсяОбновитьКонтактнуюИнформацию
		Или НеобходимостьОбработкиДанных.ТребуетсяСоздатьПартнера
		Или НеобходимостьОбработкиДанных.ТребуетсяОбновитьВариантОтправкиЭлектронногоЧекаПартнера Тогда
			
		ОбработатьДанныеЭлектронногоЧека();
	КонецЕсли;
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры


&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТелефонПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТелефонПриИзмененииНаСервере()
	
	ВариантОтправкиЭлектронногоЧека = ?(ЗначениеЗаполнено(Телефон),
		ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS"),
		ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять"));
		
	ВариантОтправкиЭлектронногоЧекаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура EmailПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	EmailПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура EmailПриИзмененииНаСервере()
	
	ВариантОтправкиЭлектронногоЧека = ?(ЗначениеЗаполнено(Email),
		ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail"),
		ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять"));
		
	ВариантОтправкиЭлектронногоЧекаПриИзмененииНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ОперацияПредусматриваетВводПерсональныхДанныхПокупателяПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ОперацияПредусматриваетВводПерсональныхДанныхПокупателяПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОперацияПредусматриваетВводПерсональныхДанныхПокупателяПриИзмененииНаСервере()
	
	Если НЕ ОперацияПредусматриваетВводПерсональныхДанныхПокупателя Тогда
		ОчиститьПерсональныеДанные();		
	КонецЕсли;
	
	ОбновитьПараметрыФискальногоЧека();
	
	УстановитьВидимостьРеквизитовВводаПерсональныхДанныхПокупателя();
	
КонецПроцедуры


&НаКлиенте
Процедура ПокупательНаименованиеПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПокупательНаименованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПокупательНаименованиеПриИзмененииНаСервере()
	
	ПокупательГражданство();
	ПокупательДатаРождения();
	ПокупательПерсональныеДанные();
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры


&НаКлиенте
Процедура ПокупательГражданствоПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПокупательГражданствоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПокупательГражданствоПриИзмененииНаСервере()
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры


&НаКлиенте
Процедура ПокупательДатаРожденияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПокупательДатаРожденияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПокупательДатаРожденияПриИзмененииНаСервере()
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры


&НаКлиенте
Процедура ПокупательТипПерсональныхДанныхПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПокупательТипПерсональныхДанныхПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПокупательТипПерсональныхДанныхПриИзмененииНаСервере()
	
	ПокупательДатаРождения();
	ПокупательПерсональныеДанные();
	
	ОбновитьПараметрыФискальногоЧека();
	
	УстановитьВидимостьРеквизитовВводаПерсональныхДанныхПокупателя();
	
КонецПроцедуры


&НаКлиенте
Процедура ПокупательПерсональныеДанныеПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПокупательПерсональныеДанныеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПокупательПерсональныеДанныеПриИзмененииНаСервере()
	
	ОбновитьПараметрыФискальногоЧека();
	
	Если ПокупательТипПерсональныхДанных = "ИНН" Тогда
		
		ТекстСообщения = "";
		Если НЕ ФормированиеФискальныхЧековСервер.ИННСоответствуетТребованиямНаСервере(ДокументСсылка, ПокупательПерсональныеДанные, ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,"Элемент.ПокупательПерсональныеДанные",,);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФормуПробитияЧека(Результат) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ КорректноЗаполненыРеквизитыФормыДляПробитияЧека() Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормированиеФискальныхЧековВызовСервера.ПробитФискальныйЧекПоДокументу(ДокументСсылка) Тогда
		
		ПоказатьПредупреждение(
			Новый ОписаниеОповещения("ЗакрытьФормуПробитияЧека", ЭтотОбъект),
			НСтр("ru = 'По документу уже был пробит чек'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПерсональныеДанныеВведеныКорректно() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОборудованиеТерминал) Тогда
		
		Если ПараметрыЭквайринговойОперации = Неопределено Тогда
			
			РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
				ЭтотОбъект,
				Новый ОписаниеОповещения("ПослеОбработкиСостоянияСмены", ЭтотОбъект));
				
		Иначе
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("ТипТранзакции",               ПараметрыЭквайринговойОперации.ТипТранзакции);
			ПараметрыОткрытияФормы.Вставить("Сумма",                       ПараметрыЭквайринговойОперации.Сумма);
			ПараметрыОткрытияФормы.Вставить("ПределСуммы",                 ПараметрыЭквайринговойОперации.Сумма);
			ПараметрыОткрытияФормы.Вставить("УказатьДополнительныеДанные", ПараметрыЭквайринговойОперации.ТипТранзакции = "AuthorizeRefund");
			
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
				ПараметрыОткрытияФормы.Вставить("ЗапретРедактированияСуммы", Истина);
			КонецЕсли;
			
			ОткрытьФорму(
				"Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ",
				ПараметрыОткрытияФормы,,,,,
				Новый ОписаниеОповещения(
					"ОплатитьКартойЗавершение",
					ЭтотОбъект,
					ПараметрыОткрытияФормы),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	Иначе
		РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ПослеОбработкиСостоянияСмены", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьККТ(Команда)
	
	МассивОборудованияККТ = Новый Массив();
	Для Каждого СтрокаТаблицыОборудования Из ТаблицаОборудования Цикл
		ПараметрыОборудования = Новый Структура("Оборудование, ВерсияФФД, Подключено");
		ЗаполнитьЗначенияСвойств(ПараметрыОборудования, СтрокаТаблицыОборудования);
		
		МассивОборудованияККТ.Добавить(ПараметрыОборудования);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("ТаблицаОборудования", МассивОборудованияККТ);
	ОписаниеОповещения = Новый ОписаниеОповещения("ФормаВыборПодключеннойККТЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.ПредпросмотрЧека.Форма.ВыборПодключеннойККТ",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыборПодключеннойККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Структура")
    	И Результат.Свойство("Оборудование")
    	И Результат.Свойство("ВерсияФФД") Тогда
    	
    	УстановитьОборудованиеККТ(Результат.Оборудование, Результат.ВерсияФФД);
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОборудованиеККТПриИзмененииНаСервере()
	
	УстановитьПараметрыККТ();
	УстановитьСтруктураСостоянияКассовойСмены();
	
	ОбновитьПредставлениеККТ();
	
	УстановитьОборудованиеТерминал();
	ОбновитьПредставлениеТерминала();
	
	НастроитьДоступностьПробитияЧекаККМ();
	
	ОбновитьПараметрыФискальногоЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДокументыЕдиногоЧекаНажатие(Элемент)
	
	МассивДокументовЕдиногоЧека = Новый Массив;
	
	Для Каждого ДанныеДокумента Из ДокументыЕдиногоЧека Цикл
		МассивДокументовЕдиногоЧека.Добавить(Новый Структура("Документ, Сумма", ДанныеДокумента.Документ, ДанныеДокумента.Сумма));
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументыЕдиногоЧека", МассивДокументовЕдиногоЧека);
	
	ОткрытьФорму("Обработка.ПредпросмотрЧека.Форма.ДокументыЕдиногоЧека", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаСервере
Процедура ОборудованиеТерминалПриИзмененииНаСервере()
	
	ОбновитьПредставлениеТерминала();
	
КонецПроцедуры

&НаСервере
Процедура СтруктураСостоянияКассовойСменыПриИзмененииНаСервере()
	
	НастроитьОтображениеТекущейСтраницы();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиДоступностиЭлементовФормы

&НаСервере
Процедура НастроитьОтображениеТекущейСтраницы()
	
	Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта
		И НЕ ПраваДоступа.ОткрытьСмену Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаКассоваяСменаЗакрыта;
	
	ИначеЕсли СтруктураСостояниеКассовойСмены.Ошибка24Часа
		И (НЕ ПраваДоступа.ОткрытьСмену ИЛИ НЕ ПраваДоступа.ЗакрытьСмену) Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаКассоваяСменаОшибка24Часа;
		
	Иначе
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаПараметрыЧекаККМ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьПробитияЧекаККМ()
	
	Элементы.ПробитьЧек.Доступность       = ЗначениеЗаполнено(ОборудованиеККТ) И ПараметрыОперацииФискализацииЧека <> Неопределено;
	Элементы.ПараметрыЧекаККМ.Доступность = ЗначениеЗаполнено(ОборудованиеККТ);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПредставленияТерминала()
	
	Элементы.ПредставлениеТерминала.Видимость = 
		ФормированиеФискальныхЧековСервер.ПредполагаетсяПодключениеЭквайринговогоТерминалаПоДокументу(ДокументСсылка);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьГруппыЕдиныйЧек()
	
	Если ПризнакСпособаРасчета = "<Авто>" Тогда
		Элементы.ГруппаЕдиныйЧек.Видимость = ДокументыЕдиногоЧека.Количество() > 0;
	Иначе
		Элементы.ГруппаЕдиныйЧек.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьГруппыУточнениеТипаОплатПоСуммам()
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КорректировкаРеализации")
		И (ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой) Тогда
		
		Элементы.ГруппаУточнениеТипаОплатПоСуммам.Видимость = Истина;
	Иначе	
		Элементы.ГруппаУточнениеТипаОплатПоСуммам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьРеквизитаПризнакСпособаРасчета()
	
	Элементы.ПризнакСпособаРасчета.ТолькоПросмотр = ЕдиныйЧек;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьРеквизитаТипРасчетаДенежнымиСредствами()
	
	Элементы.ТипРасчетаДенежнымиСредствами.ТолькоПросмотр = (Элементы.ТипРасчетаДенежнымиСредствами.СписокВыбора.Количество() = 1);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьРеквизитовКоррекции()
	
	Элементы.ВидЧекаКоррекции.ТолькоПросмотр = (Элементы.ВидЧекаКоррекции.СписокВыбора.Количество() = 1);
	
	Элементы.ДополнительныеДанныеЧекаКоррекции.Видимость = (ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНомераПредписанияНалоговогоОргана()
	
	Элементы.НомерПредписанияНалоговогоОргана.Видимость = (ТипЧекаКоррекции = Перечисления.ТипыЧековКоррекции.ПоПредписанию);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьОписанияКоррекции()
	
	Элементы.ОписаниеКоррекции.ТолькоПросмотр = (ВидЧекаКоррекции = Перечисления.ВидыЧековКоррекции.НеприменениеККТ);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСписковЗначенийВыбораЭлементовФормы

&НаСервере
Процедура НастроитьСписокЗначенийВыбораТипаФискальногоДокумента()
	
	Элементы.ТипФискальногоДокумента.СписокВыбора.Очистить();
	Элементы.ТипФискальногоДокумента.СписокВыбора.ЗагрузитьЗначения(
		ФормированиеФискальныхЧековСервер.ТипыФискальногоДокумента(ДокументСсылка, ИмяКомандыПробитияЧека)
	);
	
	Если Элементы.ТипФискальногоДокумента.СписокВыбора.Количество() > 0 Тогда
		УстановитьТипФискальногоДокумента(Элементы.ТипФискальногоДокумента.СписокВыбора.Получить(0).Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокЗначенийВыбораТипаРасчетаДенежнымиСредствами()
	
	Элементы.ТипРасчетаДенежнымиСредствами.СписокВыбора.Очистить();
	Элементы.ТипРасчетаДенежнымиСредствами.СписокВыбора.ЗагрузитьЗначения(
		ФормированиеФискальныхЧековСервер.ТипыРасчетаДенежнымиСредствами(ДокументСсылка, ИмяКомандыПробитияЧека, ТипФискальногоДокумента)
	);
	
	Если Элементы.ТипРасчетаДенежнымиСредствами.СписокВыбора.Количество() > 0 Тогда
		УстановитьТипРасчетаДенежнымиСредствами(Элементы.ТипРасчетаДенежнымиСредствами.СписокВыбора.Получить(0).Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокЗначенийВыбораПризнакаСпособаРасчета()
	
	ВозможныеПризнакиСпособаРасчетаПоДокументу = ФормированиеФискальныхЧековСервер.ВидыВозможныхПризнаковСпособаРасчетаПоДокументу(
		ДокументСсылка,
		ОбъектыРасчетов,
		ТипРасчетаДенежнымиСредствами,
		СуммаДокумента);
	
	Элементы.ПризнакСпособаРасчета.СписокВыбора.ЗагрузитьЗначения(ВозможныеПризнакиСпособаРасчетаПоДокументу);
	
	Если Элементы.ПризнакСпособаРасчета.СписокВыбора.Количество() > 0 Тогда
		ПризнакСпособаРасчетаПоУмолчанию = ФормированиеФискальныхЧековСервер.ПризнакСпособаРасчетаПоУмолчанию(
			ДокументСсылка,
			ОбъектыРасчетов,
			ТипРасчетаДенежнымиСредствами,
			СуммаДокумента);
		
		УстановитьПризнакСпособаРасчета(ПризнакСпособаРасчетаПоУмолчанию);
		
		ОбъектыРасчетовСПризнакамиСпособаРасчетов = ФормированиеФискальныхЧековСерверПереопределяемый.ОбъектыРасчетовСПризнакамиСпособаРасчетов(
			ДокументСсылка,
			ВозможныеПризнакиСпособаРасчетаПоДокументу,
			ПризнакиСпособаРасчетаАвто,
			ПризнакСпособаРасчета,
			ОбъектыРасчетов,
			СуммаДокумента
		);
		СуммаДокумента = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Итог("Сумма");
	КонецЕсли;
	
	НастроитьВидимостьГруппыУточнениеТипаОплатПоСуммам();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокЗначенийВыбораВидаКоррекцииПоУмолчанию()
	
	Элементы.ВидЧекаКоррекции.СписокВыбора.Очистить();
	Элементы.ВидЧекаКоррекции.СписокВыбора.ЗагрузитьЗначения(
		ФормированиеФискальныхЧековСервер.ВидыЧекаКоррекции(ДокументСсылка, ИмяКомандыПробитияЧека)
	);
	
	Если Элементы.ВидЧекаКоррекции.СписокВыбора.Количество() > 0 Тогда
		УстановитьВидЧекаКоррекции(Элементы.ВидЧекаКоррекции.СписокВыбора.Получить(0).Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаЗначенийРеквизитовФормы

&НаСервере
Процедура УстановитьОборудованиеККТ(пОборудованиеККТ, пВерсияФФД)
	
	ОборудованиеККТ = пОборудованиеККТ;
	ВерсияФФД = пВерсияФФД;
	
	ОборудованиеККТПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыККТ()
	
	РеквизитыОборудованияККТ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОборудованиеККТ, "ТипОборудования, СерийныйНомер");
	
	ПараметрыККТ = Новый Структура;
	ПараметрыККТ.Вставить("ТипОборудования",         РеквизитыОборудованияККТ.ТипОборудования);
	ПараметрыККТ.Вставить("СерийныйНомер",           РеквизитыОборудованияККТ.СерийныйНомер);
	ПараметрыККТ.Вставить("ИдентификаторУстройства", ОборудованиеККТ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОборудованиеТерминал()
	
	ПодключенноеОборудованиеКТерминалу = ПодключаемоеОборудованиеУТВызовСервера.ОборудованиеПодключенноеКТерминалу(Терминал);
	Если ПодключенноеОборудованиеКТерминалу.ККТ = ОборудованиеККТ Тогда
		ОборудованиеТерминал = ПодключенноеОборудованиеКТерминалу.Терминал;
	Иначе
		ОборудованиеТерминал = Неопределено;
	КонецЕсли;
	
	ОборудованиеТерминалПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтруктураСостоянияКассовойСмены()
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(ПараметрыККТ.ИдентификаторУстройства);
	
	СтруктураСостоянияКассовойСменыПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОборудованием

&НаСервере
Процедура ОбновитьПредставлениеККТ()
	
	Если ЗначениеЗаполнено(ОборудованиеККТ) Тогда
		Элементы.ПредставлениеККТ.Заголовок = ("" +  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОборудованиеККТ, "Наименование") + " (" + НСтр("ru = 'Версия ФФД'") + ": " + ВерсияФФД + ")");
	Иначе
		Элементы.ПредставлениеККТ.Заголовок = "<" + НСтр("ru = 'Фискальное устройство не подключено'") + ">";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеТерминала()
	
	Если ЗначениеЗаполнено(ОборудованиеТерминал) Тогда
		Элементы.ПредставлениеТерминала.Заголовок = "" +  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОборудованиеТерминал, "Наименование") + НСтр("ru = '(Перед пробитием фискального чека необходимо провести операцию по экварингу)'");
	Иначе
		Элементы.ПредставлениеТерминала.Заголовок = НСтр("ru = '<Терминал к ККТ не подключен. При пробитии чека будет распечатан только фискальный чек.>'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусПодключенияОборудованияЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ОборудованиеККТ = ПредопределенноеЗначение("Справочник.ПодключаемоеОборудование.ПустаяСсылка") Тогда
		УстановитьОборудованиеККТ(РезультатВыполнения.Оборудование, РезультатВыполнения.ВерсияФФД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИспользуемоеОборудование()
	
	ИспользуемоеОборудование = Новый Массив;
	
	Если ПараметрыЭквайринговойОперации <> Неопределено И ЗначениеЗаполнено(ОборудованиеТерминал) Тогда			
		ИспользуемоеОборудование.Добавить(ОборудованиеТерминал);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыОборудования Из ТаблицаОборудования Цикл
		ИспользуемоеОборудование.Добавить(СтрокаТаблицыОборудования.Оборудование);
	КонецЦикла;
	
	Возврат ИспользуемоеОборудование;
	
КонецФункции

&НаКлиенте
Процедура ОплатитьКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = ДополнительныеПараметры.ТипТранзакции;
	ПараметрыОперации.СуммаОперации  = Результат.Сумма;
	ПараметрыОперации.НомерЧека      = Результат.НомерЧека;
	ПараметрыОперации.СсылочныйНомер = Результат.СсылочныйНомер;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияОперацииНаЭквайринговомТерминале", ЭтотОбъект, ДополнительныеПараметры);
	МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
		Оповещение, УникальныйИдентификатор,
		ОборудованиеТерминал,
		ПараметрыККТ.ИдентификаторУстройства,
		ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияОперацииНаЭквайринговомТерминале(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Модифицированность = Истина;
		ВладелецФормы.Объект.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		ВладелецФормы.Объект.КодАвторизации      = РезультатВыполнения.КодАвторизации;
		ВладелецФормы.Объект.ОплатаВыполнена     = Истина;
		
		ПодключаемоеОборудованиеУТКлиент.ЗаписатьОбъект(
			ВладелецФормы,
			РежимЗаписиДокумента.Проведение,
			Новый ОписаниеОповещения("ПослеЗаписиОперацииПоПлатежнойКарте", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При выполнении операции возникла ошибка:
				|""%1"".
				|Оплата по карте не была произведена.'"),
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиОперацииПоПлатежнойКарте(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И Результат Тогда
		
		РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ПослеОбработкиСостоянияСмены", ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПараметрамиОперацииФискализацииЧека

&НаСервере
Процедура ОбновитьПараметрыФискальногоЧека()
	
	Если НЕ ЗначениеЗаполнено(ОборудованиеККТ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперацииЧека = Новый Структура;
	ПараметрыОперацииЧека.Вставить("ДокументСсылка", ДокументСсылка);
	ПараметрыОперацииЧека.Вставить("Организация", Организация);
	ПараметрыОперацииЧека.Вставить("Контрагент", Контрагент);
	ПараметрыОперацииЧека.Вставить("СуммаДокумента", СуммаДокумента);
	
	ПараметрыОперацииЧека.Вставить("ЕдиныйЧек", ЕдиныйЧек);
	ПараметрыОперацииЧека.Вставить("ДокументыЕдиногоЧека", ДокументыЕдиногоЧека);
	
	ПараметрыОперацииЧека.Вставить("ТипФискальногоДокумента", ТипФискальногоДокумента);
	ПараметрыОперацииЧека.Вставить("ТипРасчетаДенежнымиСредствами", ТипРасчетаДенежнымиСредствами);
	ПараметрыОперацииЧека.Вставить("ВидЧекаКоррекции", ВидЧекаКоррекции);
	
	ПараметрыОперацииЧека.Вставить("ОборудованиеККТ", ОборудованиеККТ);
	ПараметрыОперацииЧека.Вставить("СерийныйНомерОборудования", ОборудованиеККТ.СерийныйНомер);
	
	Если Не ФормированиеФискальныхЧековСерверПереопределяемый.ДокументОплатыСВозможностьюПробитияЧеков(ДокументСсылка)
		И ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены)
		И СтруктураСостояниеКассовойСмены.Свойство("Склад") Тогда
		
		ПараметрыОперацииЧека.Вставить("Склад", СтруктураСостояниеКассовойСмены.Склад);
	Иначе
		ПараметрыОперацииЧека.Вставить("Склад", Неопределено);
	КонецЕсли;
	
	ПараметрыОперацииЧека.Вставить("ВариантОтправкиЭлектронногоЧека", ВариантОтправкиЭлектронногоЧека);
	ПараметрыОперацииЧека.Вставить("КонтактПолучателяЭлектронногоЧека", ?(ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail, Email, Телефон));
	
	ПараметрыОперацииЧека.Вставить("ЗаданныйПризнакСпособаРасчета", ПризнакСпособаРасчета);
	ПараметрыОперацииЧека.Вставить("ОбъектыРасчетовСПризнакамиСпособаРасчетов", ОбъектыРасчетовСПризнакамиСпособаРасчетов());
	ПараметрыОперацииЧека.Вставить("ПризнакиСпособаРасчетаАвто", ПризнакиСпособаРасчетаАвто);
	
	Если СуммаПредоплаты <> 0 ИЛИ СуммаОплатыНаличные <> 0 ИЛИ СуммаОплатыЭлектронно <> 0 Тогда
		УточнениеТипаОплатПоСуммам = Новый Структура;
		УточнениеТипаОплатПоСуммам.Вставить("СуммаПредоплаты", СуммаПредоплаты);
		УточнениеТипаОплатПоСуммам.Вставить("СуммаОплатыНаличные", СуммаОплатыНаличные);
		УточнениеТипаОплатПоСуммам.Вставить("СуммаОплатыЭлектронно", СуммаОплатыЭлектронно);
		ПараметрыОперацииЧека.Вставить("УточнениеТипаОплатПоСуммам", УточнениеТипаОплатПоСуммам);
	КонецЕсли;
	
	ПараметрыОперацииЧека.Вставить("ДанныеКоррекции", ДанныеКоррекции());
	
	ПараметрыОперацииЧека.Вставить("ОперацияПредусматриваетВводПерсональныхДанныхПокупателя", ОперацияПредусматриваетВводПерсональныхДанныхПокупателя);
	ПараметрыОперацииЧека.Вставить("ПокупательТипПерсональныхДанных", ПокупательТипПерсональныхДанных);
	ПараметрыОперацииЧека.Вставить("ПокупательНаименование", ПокупательНаименование);
	ПараметрыОперацииЧека.Вставить("ПокупательПерсональныеДанные", ПокупательПерсональныеДанные);
	ПараметрыОперацииЧека.Вставить("ПокупательГражданство", ПокупательГражданство);
	ПараметрыОперацииЧека.Вставить("ПокупательДатаРождения", ПокупательДатаРождения);
	
	ПараметрыОперацииЧека.Вставить("ИмяКомандыПробитияЧека", ИмяКомандыПробитияЧека);
	
	ПараметрыОперацииФискализацииЧека = ФормированиеФискальныхЧековСервер.ОбновитьПараметрыФискальногоЧека(ПараметрыОперацииЧека, ВерсияФФД);
	
	ОбновитьМакетЧека();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМакетЧека()
	
	ТекстовыйДокумент.УстановитьТекст(
		ФормированиеФискальныхЧековСервер.ОбновитьМакетЧека(ПараметрыОперацииФискализацииЧека, ВерсияФФД)
	);
	
КонецПроцедуры

#КонецОбласти

#Область ВзаиморасчетыСКлиентами

&НаСервере
Функция ОбъектыРасчетовСПризнакамиСпособаРасчетов()
	
	ВозможныеПризнакиСпособаРасчетаПоДокументу = ФормированиеФискальныхЧековСервер.ВидыВозможныхПризнаковСпособаРасчетаПоДокументу(
		ДокументСсылка,
		ОбъектыРасчетов,
		ТипРасчетаДенежнымиСредствами,
		СуммаДокумента
	);
	
	Возврат ФормированиеФискальныхЧековСерверПереопределяемый.ОбъектыРасчетовСПризнакамиСпособаРасчетов(
		ДокументСсылка,
		ВозможныеПризнакиСпособаРасчетаПоДокументу,
		ПризнакиСпособаРасчетаАвто,
		ПризнакСпособаРасчета,
		ОбъектыРасчетов,
		СуммаДокумента
	);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУточнениеТипаОплатПоСуммам()
	
	СуммаПредоплаты = 0;
	СуммаОплатыНаличные = 0;
	СуммаОплатыЭлектронно = 0;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой Тогда
		
		СуммаПредоплаты = СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСессиюПроверкиКМНаККТ(Знач Отказ)
	
	ЗакрытьСессиюПроверкиКМНаККТЛокализация(Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСессиюПроверкиКМНаККТЛокализация(Знач Отказ)
	
	//++ Локализация
	Если НЕ Отказ Тогда
		ОборудованиеПодключенноеПоОрганизации = ПодключаемоеОборудованиеУТВызовСервера.ОборудованиеПодключенноеПоОрганизации(Организация);
		СписокПодключенныхККТ = ОборудованиеПодключенноеПоОрганизации.ККТ;
		
		Если СписокПодключенныхККТ.Количество() = 1
			И МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(СписокПодключенныхККТ[0]) Тогда
			// Закрыть сессию проверки КМ на ККТ, если была открыта
			РозничныеПродажиКлиент.ЗакрытьСессиюПроверкиКМНаККТ(ЭтотОбъект.УникальныйИдентификатор, СписокПодключенныхККТ[0]);
		КонецЕсли;
	КонецЕсли;
	//-- Локализация

КонецПроцедуры

&НаКлиенте
Функция КорректноЗаполненыРеквизитыФормыДляПробитияЧека()
	
	КорректноЗаполненыРеквизитыФормыДляПробитияЧека = Истина;
	
	Если ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail")
		И НЕ ЗначениеЗаполнено(Email) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Email для отправки электронного чека не заполнен.'"),
				Email
			);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		КорректноЗаполненыРеквизитыФормыДляПробитияЧека = Ложь;
	КонецЕсли;
	
	Если ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS")
		И НЕ ЗначениеЗаполнено(Телефон) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Телефон для отправки электронного чека не заполнен.'"),
				Телефон
			);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		КорректноЗаполненыРеквизитыФормыДляПробитияЧека = Ложь;
	КонецЕсли;
	
	Если ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS")
		И ЗначениеЗаполнено(Телефон) Тогда
		
		НомерТелефонаБезФорматирования = "+7" + РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(Телефон);
		НомерТелефонаФорматированная = РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(
											РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(Телефон));
	
		Если СокрЛП(Телефон) <> НомерТелефонаБезФорматирования
			И СокрЛП(Телефон) <> НомерТелефонаФорматированная Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Телефон для отправки электронного чека заполнен некорректно.
								|Номера телефона должен соответствовать шаблону: +71234567890 или +7(123)4567890.'"),
					Телефон
				);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			КорректноЗаполненыРеквизитыФормыДляПробитияЧека = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ДокументОснование = ПолучитьДокументОснование(ДокументСсылка);
		ФискальнаяОперация = ДанныеПробитогоФискальногоЧекаПоДокументу(ДокументОснование);
		
		Если ФискальнаяОперация = Неопределено
			И ВидЧекаКоррекции = ПредопределенноеЗначение("Перечисление.ВидыЧековКоррекции.ИсправлениеОшибки") Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По документу-основанию ""%1"" необходимо предварительно пробить чек.'"),
				ДокументОснование
			);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			КорректноЗаполненыРеквизитыФормыДляПробитияЧека = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КорректноЗаполненыРеквизитыФормыДляПробитияЧека;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДокументОснование(ДокументСсылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеПробитогоФискальногоЧекаПоДокументу(ДокументСсылка)
	
	Возврат ФормированиеФискальныхЧековСервер.ДанныеПробитогоФискальногоЧекаПоДокументу(ДокументСсылка);
	
КонецФункции

&НаСервере
Функция ОбработатьДанныеЭлектронногоЧека()
	
	Возврат РозничныеПродажи.ОбработатьДанныеЭлектронногоЧека(ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, ОповещениеПослеОткрытииЧека)
	
	Если ТипФискальногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыФискальныхДокументовККТ.КассовыйЧек") Тогда
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			ОповещениеПриЗавершении,
			УникальныйИдентификатор,
			ПараметрыОперацииФискализацииЧека,
			ПараметрыККТ.ИдентификаторУстройства,
			,
			ОповещениеПослеОткрытииЧека);
			
	Иначе
		
		МенеджерОборудованияКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(
			ОповещениеПриЗавершении,
			УникальныйИдентификатор,
			ПараметрыОперацииФискализацииЧека,
			ПараметрыККТ.ИдентификаторУстройства)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиСостоянияСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипФискальногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции") Тогда
		Если НЕ ЗначениеЗаполнено(ОписаниеКоррекции) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Описание коррекции"" не заполнено'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				,
				"ОписаниеКоррекции");
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Оповещение        = Новый ОписаниеОповещения("ПечатьЧека_Завершение", ЭтотОбъект);
	ПослеОткрытияЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект);
	
	Если РозничныеПродажиКлиент.ТребуетсяПроверкаКодовМаркировкиСредствамиККТ(ПараметрыОперацииФискализацииЧека) Тогда
		ПроверитьКодМаркировкиСредствамиККТ(Оповещение, ПослеОткрытияЧека);
	Иначе
		НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, ПослеОткрытияЧека);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТ(ОповещениеПриЗавершении, ОповещениеПослеОткрытииЧека)
	
	ПозицииЧека = ПараметрыОперацииФискализацииЧека.ПозицииЧека;	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ОповещениеПослеОткрытииЧека", ОповещениеПослеОткрытииЧека);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстКнопки = НСтр("ru = 'Пробить чек'");
	РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(ПозицииЧека, ЭтотОбъект.ВладелецФормы, ТекстКнопки, ОповещениеОЗавершении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьКодМаркировкиСредствамиККТЗавершениеЛокализация(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТЗавершениеЛокализация(Результат, ДополнительныеПараметры)
	
	//++ Локализация
	Если ШтрихкодированиеИСМПКлиент.РезультатПроверкиСредствамиККТТребуетФискализации(Результат) Тогда
		
		ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
		ОповещениеПослеОткрытииЧека = ДополнительныеПараметры.ОповещениеПослеОткрытииЧека;
		
		НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, ОповещениеПослеОткрытииЧека);
	
	ИначеЕсли ШтрихкодированиеИСМПКлиент.РезультатПроверкиСредствамиККТЗакрытьВспомогательнуюФорму(Результат) Тогда
		
		// Закрыть сессию проверки КМ на ККТ, если была открыта
		ЗакрытьСессиюПроверкиКМНаККТ(Ложь);
		
		Закрыть();
		
	Иначе
		
		// Закрыть сессию проверки КМ на ККТ, если была открыта
		ЗакрытьСессиюПроверкиКМНаККТ(Ложь);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	ШапкаЧека.НомерСмены = ПараметрыВыполнения.НомерСмены;
	ШапкаЧека.НомерЧека  = ПараметрыВыполнения.НомерЧека;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_Завершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ПараметрыФискализации = Неопределено;
		
		// Если данные в регистр ФискальныеОперации не были записаны - произошла ошибка при записи.
		Если РезультатВыполнения.Свойство("ВыходныеПараметры") И РезультатВыполнения.ВыходныеПараметры.Количество() > 8 Тогда
			ПараметрыФискализации = РезультатВыполнения.ВыходныеПараметры[8];
		КонецЕсли;
		
		ПараметрыЗавершения = Новый Структура;
		ПараметрыЗавершения.Вставить("ЗакрытьФорму",                Истина);
		ПараметрыЗавершения.Вставить("Форма",                       ЭтотОбъект);
		ПараметрыЗавершения.Вставить("ФискальнаяОперацияРеквизиты", ПараметрыФискализации);
		
		// в любом случае, даже при успешной записи, переходим к выполнению действий после записи 
		ПодключаемоеОборудованиеУТКлиент.ВыполнитьДействиеПослеЗаписиФискальнойОперацииВЖурнал(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ФискальнаяОперацияЗаписанаВЖурнал", ПодключаемоеОборудованиеУТКлиент, ПараметрыЗавершения),
			НСтр("ru = 'Не удалось записать данные в журнал фискальных операций.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
		                            |Чек не напечатан на фискальном устройстве.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		// Закрыть сессию проверки КМ на ККТ, если была открыта
		ЗакрытьСессиюПроверкиКМНаККТ(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстОПолученииСогласияНаОбработкуПерсональныхДанных()
	
	МассивГиперссылки = Новый Массив;
	МассивГиперссылки.Добавить(НСтр("ru = 'Получено'"));
	МассивГиперссылки.Добавить(" ");
	
	МассивГиперссылки.Добавить(
		Новый ФорматированнаяСтрока(
			НСтр("ru = 'согласие'"),,
			ЦветаСтиля.ГиперссылкаЦвет,,
			"ОткрытьПечатнуюФормуПолученияСогласияНаОбработкуПерсональныхДанных"));
	
	МассивГиперссылки.Добавить(" ");
	МассивГиперссылки.Добавить(НСтр("ru = 'на обработку персональных данных'"));
			
	Результат = Новый ФорматированнаяСтрока(МассивГиперссылки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРеквизитовВводаПерсональныхДанныхПокупателя()
	Элементы.ГруппаПерсональныеДанные.Видимость = РазрешенВводПерсональныхДанных;
	Элементы.ГруппаПоляВводаПерсональныхДанных.Видимость = ОперацияПредусматриваетВводПерсональныхДанныхПокупателя;
	
	Если ПокупательТипПерсональныхДанных = Элементы.ПокупательТипПерсональныхДанных.СписокВыбора[0].Значение Тогда // ИНН
		Элементы.ПокупательДатаРождения.Видимость = Ложь;
		Элементы.ПокупательПерсональныеДанныеИНН.Видимость = Истина;
		Элементы.ПокупательПерсональныеДанныеПаспорт.Видимость = Ложь;
	Иначе
		Элементы.ПокупательДатаРождения.Видимость = Истина;
		Элементы.ПокупательПерсональныеДанныеИНН.Видимость = Ложь;
		Элементы.ПокупательПерсональныеДанныеПаспорт.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПерсональныеДанныеВведеныКорректно()
	
	ПерсональныеДанныеВведеныКорректно = Истина;
	
	Если ОперацияПредусматриваетВводПерсональныхДанныхПокупателя Тогда
		
		Если НЕ ПолученоСогласиеНаОбработкуПерсональныхДанных Тогда
			ПерсональныеДанныеВведеныКорректно = Ложь;
			
			ТекстСообщения = НСтр("ru = 'Необходимо установить флаг подтверждения получения согласия на обработку персональных данных покупателя'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПокупательНаименование) Тогда
			ПерсональныеДанныеВведеныКорректно = Ложь;
			
			ТекстСообщения = НСтр("ru = 'Не заполнено ФИО покупателя.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если ПокупательТипПерсональныхДанных = "ИНН" Тогда
			ТекстСообщения = "";
			Если НЕ ФормированиеФискальныхЧековСервер.ИННСоответствуетТребованиямНаСервере(ДокументСсылка, ПокупательПерсональныеДанные, ТекстСообщения) Тогда
				ПерсональныеДанныеВведеныКорректно = Ложь;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ПокупательПерсональныеДанные) Тогда
				ПерсональныеДанныеВведеныКорректно = Ложь;
				
				ТекстСообщения = НСтр("ru = 'Не заполнены паспортные данные покупателя'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПерсональныеДанныеВведеныКорректно;
	
КонецФункции

&НаСервере
Процедура ОчиститьПерсональныеДанные()
	
	ПокупательНаименование = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	ПокупательГражданство = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
	ПокупательДатаРождения = Дата(1,1,1);
	ПокупательПерсональныеДанные = "";
	ПолученоСогласиеНаОбработкуПерсональныхДанных = Ложь;
		
КонецПроцедуры

&НаСервере
Функция ДанныеКоррекции()
	
	Если ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции Тогда
	
		ДанныеКоррекции = Новый Структура();
		ДанныеКоррекции.Вставить("ТипКоррекции"		, Число(ТипЧекаКоррекции = Перечисления.ТипыЧековКоррекции.ПоПредписанию));
		ДанныеКоррекции.Вставить("ОписаниеКоррекции", ОписаниеКоррекции);
		ДанныеКоррекции.Вставить("ДатаКоррекции"	, ДатаСовершенияКорректируемогоРасчета);
		ДанныеКоррекции.Вставить("НомерПредписания"	, НомерПредписанияНалоговогоОргана);
		
		Возврат ДанныеКоррекции;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции
 
// Преобразует массив структур в таблицу значений.
// Метод ОбщегоНазначенияУТ.МассивВТаблицуЗначений не подходит - в данном варианте значения колонок составного типа.
// 
// Параметры:
//  МассивСтруктур - Массив Из Структура - Масси структур
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Массив в таблицу значений
&НаСервере
Функция МассивВТаблицуЗначений(МассивСтруктур)
	Таблица = Новый ТаблицаЗначений;
	
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ);
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

&НаСервере
Процедура ПокупательГражданство()
	
	ПокупательГражданство = РозничныеПродажи.ПокупательГражданство(ПокупательНаименование);
	
КонецПроцедуры

&НаСервере
Процедура ПокупательДатаРождения()
	
	Если ПокупательТипПерсональныхДанных = Элементы.ПокупательТипПерсональныхДанных.СписокВыбора[0].Значение Тогда // ИНН
		ПокупательДатаРождения = "";
	Иначе
		ПокупательДатаРождения = РозничныеПродажи.ПокупательДатаРождения(ПокупательНаименование);
		Если НЕ ЗначениеЗаполнено(ПокупательДатаРождения) Тогда
			ТекстСообщения = НСтр("ru = 'В карточке физ. лица не заполнена дата рождения.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПокупательПерсональныеДанные()
	
	Если ПокупательТипПерсональныхДанных = Элементы.ПокупательТипПерсональныхДанных.СписокВыбора[0].Значение Тогда // ИНН
		
		ПокупательПерсональныеДанные = РозничныеПродажи.ПокупательИНН(ПокупательНаименование);
		
		Если НЕ ЗначениеЗаполнено(ПокупательПерсональныеДанные) Тогда
			ТекстСообщения = НСтр("ru = 'В карточке физ. лица не заполнен ИНН.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		
		ПокупательПерсональныеДанные = РозничныеПродажи.ПокупательПаспортныеДанные(ПокупательНаименование);
		
		Если НЕ ЗначениеЗаполнено(ПокупательПерсональныеДанные) Тогда
			ТекстСообщения = НСтр("ru = 'В карточке физ. лица не указаны паспортные данные.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

