#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторыРодителейУдаляемыхЭлементов;

&НаКлиенте
Перем СоответствиеШтрихкодовСтрокДерева Экспорт;

&НаКлиенте
Перем КэшированныеЗначения Экспорт;

&НаКлиенте
Перем Ссылка Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьДанныеФормы();
	
	ОбработатьИПроверитьПереданныеПараметры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПараметрыПроверкиКодовМаркировки();
	
	УстановитьРежимПросмотра();
	
	Если НЕ ПроверкаНеПоДокументу Тогда
		ВосстановитьСохраненныеРезультатыПроверки();
		
		Если ВосстановленыСохраненныеРезультатыПроверки Тогда
			УстановитьРежимПросмотра();
			РассчитатьИтогиУстановитьВидимость();
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормыПриСоздании();
	
	ТребуетсяОбновлениеКлючаСессии = ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, ВидМаркируемойПродукции,
		"ПодобраннаяМаркируемаяПродукцияНоменклатура");
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,
		"ПодобраннаяМаркируемаяПродукцияХарактеристика", "Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,
		"ПодобраннаяМаркируемаяПродукцияСерия", "Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект,
		"ПодобраннаяМаркируемаяПродукцияСерия", "Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные.Характеристика");
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьПараметрыСканирования(Истина);
	
	Если Не ВосстановленыСохраненныеРезультатыПроверки Тогда
		ЗаполнитьПараметрыПроверкиКодовМаркировки(Отказ);
		
		Если Отказ Тогда
			Возврат;
		ИначеЕсли Не НеобходимоОбращениеКСервисуИСМП(ПараметрыСканирования) Тогда
			ТребуетсяОбновлениеКлючаСессии = Ложь;
		КонецЕсли;
	Иначе
		ЗаполнитьПараметрыПроверкиКодовМаркировки(Ложь);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	Если ВосстановленыСохраненныеРезультатыПроверки Тогда
		
		СоответствиеШтрихкодовСтрокДерева = СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
		
		Если ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП Тогда
			Если ТребуетсяОбновлениеКлючаСессии Тогда
				ПодключитьОбработчикОжидания("ОбработкаОжиданияПовторногоЗапросаКлючаСессии", 0.5, Истина);
			Иначе
				ПриПодключенииКСервисуИСМП();
			КонецЕсли;
		КонецЕсли;
		
		ОпределитьЗначениеСвойстваЗапросКоличестваМерногоТовара();
		
	ИначеЕсли ТребуетсяОбновлениеКлючаСессии Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжиданияЗапросаКлючаСессии", 0.5, Истина);
	Иначе
		ЗагрузитьДанныеДокумента();
	КонецЕсли;
	
	Ссылка = ПроверяемыйДокумент;
	
	УстановитьЗаголовокКомандыПроверкиПоВладельцу(ЭтотОбъект);
	УстановитьЗаголовокКомандыПроверкиСтатусовКодовМаркировки(ЭтотОбъект);
	УстановитьЗаголовокКомандыОбратноеСканирование(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РежимПроверкиИзНастроек = Настройки.Получить("РежимПроверки");
	Если ЗначениеЗаполнено(РежимПроверкиИзНастроек) Тогда
		РежимПроверки = РежимПроверкиИзНастроек;
		СформироватьПредставлениеНастроек(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыполняетсяЗакрытие Тогда
		
		Если Модифицированность Тогда
			
			Отказ = Истина;
			
			ТекстВопроса = НСтр("ru = 'Все несохраненные результаты проверки будут потеряны. Все равно закрыть?'");
			ОписаниеОповещенияПослеВопросаПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеВопросаПриЗакрытииФормы", ЭтотОбъект);
			
			ПоказатьВопрос(ОписаниеОповещенияПослеВопросаПриЗакрытииФормы, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если РежимПросмотра
		Или Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьПараметрыСканирования();
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.РазрешитьСопоставлениеНоменклатурыДляДокументаПриобретения(
		ЭтотОбъект, ПараметрыСканирования);
	
	ЗагрузкаДанныхТСД = Неопределено;
	СобытияФормИСКлиент.ВнешнееСобытиеПолученыШтрихкоды(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, Источник, Событие,
		Данные, ПараметрыСканирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(
		Новый ОписаниеОповещения("ПриВыбореНоменклатуры", ЭтотОбъект), ВыбранноеЗначение, ИсточникВыбора);
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораХарактеристики(
			Новый ОписаниеОповещения("ПриВыбореХарактеристики", ЭтотОбъект), ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
	Если ИспользоватьСерииНоменклатуры Тогда
		СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораСерии(ЭтотОбъект,
			ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		ПараметрыОбработкиТСД = НовыеПараметрыОбработкиТСД();
		// Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, ПараметрыОбработкиТСД);
		
	КонецЕсли;
	
	ЗавершитьРегистрациюИзмененийНоменклатурыВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(
		Новый ОписаниеОповещения("ПриВыбореНоменклатуры", ЭтотОбъект), НовыйОбъект, Источник);
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораХарактеристики(
			Новый ОписаниеОповещения("ПриВыбореХарактеристики", ЭтотОбъект), НовыйОбъект, Источник);
	КонецЕсли;
	
	ЗавершитьРегистрациюИзмененийНоменклатурыВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтключениеКонтроляСтатусов"
		И Параметр = УникальныйИдентификатор Тогда
		
		ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки = Не ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки;
		УстановитьЗаголовокКомандыПроверкиСтатусовКодовМаркировки(ЭтотОбъект);
		
		ПоказатьОповещениеПользователя(НСтр("ru='Контроль статусов отключен'"));
	
	ИначеЕсли ИмяСобытия = "ОтключениеКонтроляВладельцев"
		И Параметр = УникальныйИдентификатор Тогда
		
		ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки = Не ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки;
		УстановитьЗаголовокКомандыПроверкиПоВладельцу(ЭтотОбъект);
		
		ПоказатьОповещениеПользователя(НСтр("ru='Контроль владельцев отключен'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтсутствуетПодключениеИСМПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьПодключениеИСМП" Тогда
		ЗапроситьКлючСессииНачало(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияТребуетсяПеремаркировкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьОтборТребуетсяПеремаркировка" Тогда
		
		УстановленОтборТребуетсяПеремаркировать = Не УстановленОтборТребуетсяПеремаркировать;
		
		Если УстановленОтборТребуетсяПеремаркировать Тогда
			УстановитьОтборПоТребующимПеремаркировки();
		Иначе
			ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
		КонецЕсли;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНедопустимыеКодыМаркировкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьОтборНедопустимыеКодыМаркировки" Тогда
		
		УстановленОтборНедопустимыеКодыМаркировки = Не УстановленОтборНедопустимыеКодыМаркировки;
		
		Если УстановленОтборНедопустимыеКодыМаркировки Тогда
			УстановитьОтборНедопустимыеКодыМаркировки();
		Иначе
			ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
		КонецЕсли;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРежимаПроверкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьРежимПроверки" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимПроверки", РежимПроверки);
		
		ОповещениеОИзмененииРежимаПроверки = Новый ОписаниеОповещения("ПослеИзмененияРежимаПроверки", ЭтотОбъект);
		
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ИзменениеРежимаПроверки", ПараметрыОткрытия, ЭтотОбъект,
			УникальныйИдентификатор,,,
			ОповещениеОИзмененииРежимаПроверки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьДетализацию" Тогда
		
		РекомендуемаяДетализация = Неопределено;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДетализацияСтруктурыХранения", ДетализацияСтруктурыХранения);
		ПараметрыОткрытия.Вставить("РежимВыбора",                  Истина);
		ПараметрыОткрытия.Вставить("ПроверяемыйДокумент",          ПроверяемыйДокумент);
		ПараметрыОткрытия.Вставить("РекомендуемаяДетализация",     РекомендуемаяДетализация);
		
		ОповещениеОИзмененииРежимаДетализации = Новый ОписаниеОповещения("ПослеИзмененияРежимаДетализации", ЭтотОбъект);
		
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ИзменениеДетализации", ПараметрыОткрытия, ЭтотОбъект,
			УникальныйИдентификатор,,,
			ОповещениеОИзмененииРежимаДетализации, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДерева

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки
		И НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки)
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ДеревоМаркированнойПродукцииНапечататьУпаковку.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	УправлениеДоступностьюКомандыРазобратьУпаковку();
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ТекущиеДанные);
	
	ДоступностьКомандыПечатьУпаковки = ТекущиеДанные.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая");
	Элементы.ДеревоМаркированнойПродукцииНапечататьУпаковку.Доступность = ДоступностьКомандыПечатьУпаковки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередУдалением(ЭлементИлиВыделенныеСтроки, Отказ, ЭтоВосстановлениеДетализации = Ложь)
	
	ОчиститьСообщения();
	
	ТекстОшибки = "";
	
	УдаляемыеЭлементыДерева = Новый Массив();
	ИдентификаторыУдаляемыхЭлементов = Новый Массив();
	ИдентификаторыРодителейУдаляемыхЭлементов = Новый Массив();
	
	Если ТипЗнч(ЭлементИлиВыделенныеСтроки) = Тип("Массив") Тогда
		ВыделенныеСтроки = ЭлементИлиВыделенныеСтроки;
	Иначе
		ВыделенныеСтроки = ЭлементИлиВыделенныеСтроки.ВыделенныеСтроки;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		УдаляемыйЭлемент = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтроки);
		РодительУдаляемогоЭлемента = УдаляемыйЭлемент.ПолучитьРодителя();
		
		Если Не ЭтоВосстановлениеДетализации Тогда

			Если УдаляемыйЭлемент.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			ИначеЕсли Не РежимПодбораСуществующихУпаковок Тогда
				ТекстОшибки = НСтр("ru = 'Удалять можно только строки в статусе ""Не числилось"".'");
			Иначе
				ЕстьОшибка = Ложь;
				ТипУпаковкиПродукцияБезУпаковки        = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки();
				ТипУпаковкиГрупповыеУпаковкиБезКоробки = ТипУпаковкиГрупповыеУпаковкиБезКоробки();
				Если УдаляемыйЭлемент.ТипУпаковки = ТипУпаковкиПродукцияБезУпаковки
					Или УдаляемыйЭлемент.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки Тогда
					ЕстьОшибка = Истина;
				ИначеЕсли РодительУдаляемогоЭлемента = Неопределено
					Или РодительУдаляемогоЭлемента.ТипУпаковки = ТипУпаковкиПродукцияБезУпаковки
					Или РодительУдаляемогоЭлемента.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки Тогда
				ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоУпаковка(УдаляемыйЭлемент.ТипУпаковки) Тогда
					Если ДобавленныеУпаковки.НайтиПоЗначению(УдаляемыйЭлемент.Штрихкод) = Неопределено Тогда
						ЕстьОшибка = Истина;
					ИначеЕсли РодительУдаляемогоЭлемента = Неопределено
						Или РодительУдаляемогоЭлемента.ТипУпаковки = ТипУпаковкиПродукцияБезУпаковки Тогда
					ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоУпаковка(УдаляемыйЭлемент.ТипУпаковки) Тогда
						Если ДобавленныеУпаковки.НайтиПоЗначению(УдаляемыйЭлемент.Штрихкод) = Неопределено Тогда
							ЕстьОшибка = Истина;
						КонецЕсли;
					Иначе
						Если Не ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
							ЕстьОшибка = Истина;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьОшибка Тогда
						ТекстОшибки = НСтр("ru = 'Удалять можно только строки в статусе ""Не числилось"", упаковки верхнего уровня или продукцию без упаковки.'");
					КонецЕсли;
				КонецЕсли;

				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,, "ДеревоМаркированнойПродукции", Отказ);
					Возврат;
				КонецЕсли;

			КонецЕсли;
		
			Если Не ПустаяСтрока(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,, "ДеревоМаркированнойПродукции", Отказ);
				Возврат;
			КонецЕсли;
		
		КонецЕсли;

		УдаляемыеЭлементыДерева.Добавить(УдаляемыйЭлемент);
		ИдентификаторыУдаляемыхЭлементов.Добавить(ИдентификаторСтроки);

		Если РодительУдаляемогоЭлемента <> Неопределено Тогда
			ИдентификаторРодителя = РодительУдаляемогоЭлемента.ПолучитьИдентификатор();
			Если ИдентификаторыРодителейУдаляемыхЭлементов.Найти(ИдентификаторРодителя) = Неопределено Тогда
				ИдентификаторыРодителейУдаляемыхЭлементов.Добавить(ИдентификаторРодителя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИдентификаторУдаляемогоЭлемента Из ИдентификаторыУдаляемыхЭлементов Цикл
		ИндексУдаляемогоЭлемента = ИдентификаторыРодителейУдаляемыхЭлементов.Найти(ИдентификаторУдаляемогоЭлемента);
		Если ИндексУдаляемогоЭлемента <> Неопределено Тогда
			ИдентификаторыРодителейУдаляемыхЭлементов.Удалить(ИндексУдаляемогоЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	ИндексУдаляемогоЭлемента = ИдентификаторыУдаляемыхЭлементов.Найти(ИдентификаторТекущейПроверяемойУпаковки);
	Пока ИндексУдаляемогоЭлемента <> Неопределено Цикл
		ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
		
		Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		Иначе
			ТекущаяПроверяемаяУпаковка = ТекущаяПроверяемаяУпаковка.ПолучитьРодителя();
			Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
				ИдентификаторТекущейПроверяемойУпаковки = -1;
			Иначе
				ИдентификаторТекущейПроверяемойУпаковки = ТекущаяПроверяемаяУпаковка.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
		ИндексУдаляемогоЭлемента = ИдентификаторыУдаляемыхЭлементов.Найти(ИдентификаторТекущейПроверяемойУпаковки);
	КонецЦикла;
	
	Если ИдентификаторТекущейПроверяемойУпаковки <> -1 Тогда
		Если ИдентификаторСтрокиПотребительскиеУпаковкиБезУпаковки <> -1 И ИдентификаторТекущейПроверяемойУпаковки = ИдентификаторСтрокиПотребительскиеУпаковкиБезУпаковки Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		КонецЕсли;
		Если ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки <> -1 И ИдентификаторТекущейПроверяемойУпаковки = ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
			СтрокаГрупповыеУпаковкиБезКоробки(ЭтотОбъект).ИдетПроверкаДаннойУпаковки = Ложь;
		КонецЕсли;
	КонецЕсли;

	КоличествоУдаляемыхТребующихПеремаркировки     = 0;
	КоличествоУдаляемыхНедопустимыхКодовМаркировки = 0;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементыДерева Цикл
		Если УдаляемыеЭлементыДерева.Найти(УдаляемыйЭлемент.ПолучитьРодителя()) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(УдаляемыйЭлемент.ТипУпаковки) Тогда
			КоличествоУдаляемыхТребующихПеремаркировки = КоличествоУдаляемыхТребующихПеремаркировки + ?(УдаляемыйЭлемент.ТребуетсяПеремаркировка, 1, 0);
			ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(УдаляемыйЭлемент.ПолучитьЭлементы(), КоличествоУдаляемыхТребующихПеремаркировки);
			
			Если (ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
					Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами"))
				И УдаляемыйЭлемент.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
				И ЭтоЗаполненнаяМонотоварнаяУпаковкаСGTIN(УдаляемыйЭлемент)
				И УдаляемыйЭлемент.ПолучитьЭлементы().Количество() = 0 Тогда
			Иначе
				РодительУдаляемогоЭлемента = УдаляемыйЭлемент.ПолучитьРодителя();
				Пока РодительУдаляемогоЭлемента <> Неопределено Цикл
					Если Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительУдаляемогоЭлемента.ТипУпаковки) Тогда
						Прервать;
					КонецЕсли;
					РодительУдаляемогоЭлемента.НеПересчитыватьКоличествоПотребительскихУпаковок = Ложь;
					РодительУдаляемогоЭлемента = РодительУдаляемогоЭлемента.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработатьПодчиненныеСтрокиДереваПриУдалении(ТаблицаИзмененийПодобраннойПродукции, УдаляемыйЭлемент);
		ОбработатьСтрокуДереваПриУдалении(ТаблицаИзмененийПодобраннойПродукции, УдаляемыйЭлемент);
		
		КоличествоУдаляемыхНедопустимыхКодовМаркировки = КоличествоУдаляемыхНедопустимыхКодовМаркировки + ?(УдаляемыйЭлемент.НедопустимыйКодМаркировки, 1, 0);
		ОпределитьКоличествоНедопустимыхКодовМаркировкиДляКоллекции(УдаляемыйЭлемент.ПолучитьЭлементы(), КоличествоУдаляемыхНедопустимыхКодовМаркировки);
		
	КонецЦикла;
	
	Если КоличествоУдаляемыхТребующихПеремаркировки > 0 Тогда
		КоличествоУпаковокКоторыеНеобходимоПеремаркировать = КоличествоУпаковокКоторыеНеобходимоПеремаркировать - КоличествоУдаляемыхТребующихПеремаркировки;
		ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки = Истина;
	КонецЕсли;
	
	Если КоличествоУдаляемыхНедопустимыхКодовМаркировки > 0 Тогда
		КоличествоНедопустимыхКодовМаркировки = КоличествоНедопустимыхКодовМаркировки - КоличествоУдаляемыхНедопустимыхКодовМаркировки;
		ТребуетсяОбновитьИнформациюНедопустимыеКодыМаркировки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
		УстановитьСтатусОтсутствуетДляПодчиненных(ЭтотОбъект, ТекущиеДанные);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущиеДанные, Ложь);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ТекущиеДанные);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(ТекущиеДанные);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(ТекущиеДанные, ДоступныеДляПроверкиУпаковки);
	
	ПроверитьСоответствиеОтборуПриИзмененииСтроки(ТекущиеДанные);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ТекущиеДанные);
	
	Если ПроверитьНеобходимостьПеремаркировкиПриИзмененииСтатусаПроверки Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиНаКлиенте(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	
	Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = ТекущиеДанные.СтатусПроверки Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")
		И Не УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДопустимаПроизвольнаяЕдиницаУчета
		И ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара
		И ЗначениеЗаполнено(ТекущиеДанные.ВидУпаковки)
		И ТекущиеДанные.ПроизвольнаяЕдиницаУчета
		И ТекущиеДанные.Количество = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")
		Или ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
		
		ПроверитьНеобходимостьПеремаркировкиПриИзмененииСтатусаПроверки = Истина;
		
	КонецЕсли;
	
	Если НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, ТекущиеДанные, ВыбранноеЗначение) Тогда
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, ТекущиеДанные, -1);
	ИначеЕсли НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, ТекущиеДанные, ВыбранноеЗначение) Тогда
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, ТекущиеДанные, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаПроизвольнаяЕдиницаУчета
		И ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара
		И ЗначениеЗаполнено(ТекущиеДанные.ВидУпаковки)
		И ТекущиеДанные.ПроизвольнаяЕдиницаУчета
		И ТекущиеДанные.Количество = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаПроизвольнаяЕдиницаУчета
		И ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара
		И ЗначениеЗаполнено(ТекущиеДанные.ВидУпаковки)
		И ТекущиеДанные.ПроизвольнаяЕдиницаУчета
		И ТекущиеДанные.Количество = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПослеУдаления(Элемент)
	
	Если ИдентификаторСтрокиПотребительскиеУпаковкиБезУпаковки <> - 1
		И СтрокаПотребительскиеУпаковкиБезУпаковки(ЭтотОбъект) = Неопределено Тогда
		СтрокаДерева = ДобавленнаяСтрокаПотребительскиеУпаковкиБезУпаковки();
		ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	КонецЕсли;
	
	Если ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки <> - 1
		И СтрокаГрупповыеУпаковкиБезКоробки(ЭтотОбъект) = Неопределено Тогда
		СтрокаДерева = ДобавленнаяСтрокаГрупповыеУпаковкиБезКоробки();
		ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	КонецЕсли;
	
	Для Каждого ИдентификаторРодителя Из ИдентификаторыРодителейУдаляемыхЭлементов Цикл
		СтрокаДляПересчета = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторРодителя);
		Если СтрокаДляПересчета <> Неопределено Тогда
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьВложенияАгрегата(СтрокаДляПересчета, ПараметрыПроверкиКодовМаркировки);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДляПересчета, Ложь);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДляПересчета);
			ПриИзмененииМаркировкиСоставаУпаковкиНаКлиенте(ИдентификаторРодителя, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыРодителейУдаляемыхЭлементов.Очистить();
	
	Если ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки
		Или ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(ЭтотОбъект);
		ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	КонецЕсли;
	
	Если ТребуетсяОбновитьИнформациюНедопустимыеКодыМаркировки Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
	КонецЕсли;
	
	ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
	
	Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
		ИдентификаторТекущейПроверяемойУпаковки = -1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодобраннаяПродукция

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элемент.ПодчиненныеЭлементы.ПодобраннаяМаркируемаяПродукцияНоменклатура
		И ТекущиеДанные.НоменклатураСопоставлена
		И (Не
			(ЭтоДокументПриобретения
			И (ТекущиеДанные.НоменклатураСопоставленаПоУПД
				Или Лев(ТекущиеДанные.GTIN, 3) = ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков()
				)
			)
		)
		Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	ИначеЕсли Поле = Элементы.ПодобраннаяМаркируемаяПродукцияИдентификаторПроисхожденияВЕТИС
		И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС);
	ИначеЕсли Поле = Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоПодобрано Тогда
		УточнитьКоличествоПодобраннойПродукции(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТекущегоЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	Если ИмяТекущегоЭлемента = Элементы.ПодобраннаяМаркируемаяПродукцияНоменклатура.Имя
	 Или ИмяТекущегоЭлемента = Элементы.ПодобраннаяМаркируемаяПродукцияХарактеристика.Имя
	 Или ИмяТекущегоЭлемента = Элементы.ПодобраннаяМаркируемаяПродукцияСерия.Имя Тогда
		НачатьРегистрациюИзмененийНоменклатурыВСтроке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		ОтменитьРегистрациюИзмененийНоменклатурыВСтроке();
	Иначе
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ЗавершитьРегистрациюИзмененийНоменклатурыВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, ВидМаркируемойПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриСозданииНоменклатуры(ЭтотОбъект,
		ТекущиеДанные, СтандартнаяОбработка, ВидМаркируемойПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения);
	
	ЗавершитьРегистрациюИзмененийНоменклатурыВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(ЭтотОбъект,
		ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриСозданииХарактеристики(ЭтотОбъект,
		ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ЗавершитьРегистрациюИзмененийНоменклатурыВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяМаркируемаяПродукцияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,
		ПараметрыУказанияСерий, Элемент.ТекстРедактирования, СтандартнаяОбработка, ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьПромежуточныеРезультатыПроверки(Команда)
	
	ОчиститьСообщения();
	
	Результат = Истина;
	
	Если Не ПроверкаНеПоДокументу Тогда
		Результат = РезультатыПроверкиУспешноСохранены();
	КонецЕсли;
	
	Если Результат Тогда
		Модифицированность = Ложь;
		Оповестить("ПредварительноеСохранениеРезультатовСканированияМаркируемойПродукции", ПроверяемыйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗавершена(Команда)
	
	Если ПараметрыПроверкиКодовМаркировки.ОбратноеСканирование Тогда
		ВключитьОтключитьОбратноеСканирование(Команда);
	КонецЕсли;
	
	Пока ИдентификаторТекущейПроверяемойУпаковки <> -1 Цикл
		ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
		Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		Иначе
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("ЗакрытиеУпаковкиПриЗавершенииПроверки", Истина);
			ДанныеШтрихкода = Новый Структура("Штрихкод, Количество", ТекущаяПроверяемаяУпаковка.Штрихкод, 1);
			РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ПараметрыВыполнения);
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьСообщения();
	
	ДействияПередЗаверешениемПроверки = ТребуетсяВопросПередЗавершениемПроверки();
	
	Если ДействияПередЗаверешениемПроверки.ТребуетсяЗаполнениеКодов Тогда
		ТекстПредупреждения = НСтр("ru = 'Есть упаковки, по которым не указано количество.
			|  Требуется отметить их как отсутствующие или дозаполнить.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДействияПередЗаверешениемПроверки.ОтказПриНаличииНедопустимыхКодовМаркировки Тогда
		ТекстПредупреждения = НСтр("ru = 'В структуре упаковок есть недопустимые коды маркировки, проверка не может быть завершена.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	ИначеЕсли Не ДействияПередЗаверешениемПроверки.ТребуетсяВопросПоНепровереннымОтложенным Тогда
		
		ПроверкаИПодборПродукцииИСМПКлиент.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
		
		Если НеобходимаПеремаркировка() Тогда
			ТекстПредупреждения = НСтр("ru = 'Есть упаковки, которые необходимо разобрать.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		Иначе
			Если ТребуетсяОбновлениеКлючаСессии
				И ДействияПередЗаверешениемПроверки.СоздаватьАктОРасхождениях Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("СоздаватьАктОРасхожденияхПриЗакрытии", ДействияПередЗаверешениемПроверки.СоздаватьАктОРасхождениях);
				ДополнительныеПараметры.Вставить("ПовторныйЗапрос", Ложь);
				
				ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения("ЗапроситьКлючСессииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				
				ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
					ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация),
					ОповещениеПриЗапросеКлючаСессии);
				
			Иначе
				ЗавершитьПроверку(ДействияПередЗаверешениемПроверки.СоздаватьАктОРасхождениях);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМаркированнуюУпаковку(Команда)
	
	ОткрытьФормуГенерацииУпаковки();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркироватьУпаковку(Команда)
	
	СтрокаСУпаковкойДляПеремаркировки = СтрокаСУпаковкойДляПеремаркировки();
	
	Если СтрокаСУпаковкойДляПеремаркировки = Неопределено Тогда
		
		ПоказатьПредупреждение( , НСтр("ru = 'Спозиционируйтесь на упаковке, которую хотите перемаркировать.'"));
		Возврат;
		
	КонецЕсли;
	
	ДанныеУпаковки = ДанныеУпаковкиДляПеремаркировки(СтрокаСУпаковкойДляПеремаркировки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаСУпаковкойДляПеремаркировки.ПолучитьИдентификатор());
	
	ОповещениеПослеПеремаркировкиУпаковки = Новый ОписаниеОповещения("ПослеПеремаркировкиУпаковки",
	                                                                 ЭтотОбъект, 
	                                                                 ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ДанныеУпаковки, ЭтотОбъект,,,,
	             ОповещениеПослеПеремаркировкиУпаковки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ОчиститьСообщения();
	
	ДоступнаИерархия = (ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Или ЭтоДокументПриобретения);
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		ДоступнаИерархия,
		ИнтеграцияИСМПКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(
			ЭтотОбъект, Истина)); // ДоступнаИерархия Истина - для упрощения заголовка
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВТСД(
		Новый ОписаниеОповещения("ВыгрузитьВТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор,
		СформироватьТаблицуВыгрузкиИзДерева());
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверкаИПодборПродукцииИСМПКлиентСервер.ТребуетсяУказаниеСерий(ПодобраннаяМаркируемаяПродукция) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Отсутствует маркируемая продукция, для которой требуется генерация серий.'"));
		Возврат;
	КонецЕсли;
	
	СгенерироватьСерииПодобраннойМаркируемойПродукции();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьУпаковку(Команда)
	
	НапечататьШтрихкодТекущейУпаковки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьЗапросКоличестваМерногоТовара(Команда)
	
	ИзменитьСтатусСтрокиМерногоТовараСНулевымКоличествомПриВключенииЗапросаКоличестваМерногоТовара();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьКонтрольСтатусовКодовМаркировки(Команда)
	
	ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки = Не ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки;
	
	УстановитьЗаголовокКомандыПроверкиСтатусовКодовМаркировки(ЭтотОбъект);
	
	ПроверитьСтатусыКодовМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьКонтрольПоВладельцу(Команда)
	
	ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки = Не ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки;

	УстановитьЗаголовокКомандыПроверкиПоВладельцу(ЭтотОбъект);
	
	ПроверитьСтатусыКодовМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьОбратноеСканирование(Команда)
	
	ПараметрыПроверкиКодовМаркировки.ОбратноеСканирование = НЕ ПараметрыПроверкиКодовМаркировки.ОбратноеСканирование;
	
	УстановитьЗаголовокКомандыОбратноеСканирование(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьУпаковку(Команда)

	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда 
		Возврат;
	КонецЕсли;
	
	ПроверятьТекущуюПроверяемуюУпаковку = Ложь;
	Если ИдентификаторТекущейПроверяемойУпаковки <> -1 Тогда
		ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
		Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		Иначе
			ПроверятьТекущуюПроверяемуюУпаковку = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УдаляемыеУпаковки = Новый Массив();
	УдаляемыеУпаковки.Добавить(ТекущиеДанные);
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Пока ТекущийРодитель <> Неопределено Цикл
		УдаляемыеУпаковки.Добавить(ТекущийРодитель);
		ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	ИндексУпаковки     = 0;
	КоличествоУпаковок = УдаляемыеУпаковки.Количество();
	
	Пока ИндексУпаковки < КоличествоУпаковок Цикл
		УдаляемаяУпаковка = УдаляемыеУпаковки[ИндексУпаковки];
		ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(УдаляемаяУпаковка.ПолучитьЭлементы());
		
		Если ПроверятьТекущуюПроверяемуюУпаковку И ТекущаяПроверяемаяУпаковка = УдаляемаяУпаковка Тогда
			ПроверятьТекущуюПроверяемуюУпаковку     = Ложь;
			ИдентификаторТекущейПроверяемойУпаковки = -1
		КонецЕсли;
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(УдаляемаяУпаковка.ТипУпаковки) Тогда
			ЭлементСписка = ДобавленныеУпаковки.НайтиПоЗначению(УдаляемаяУпаковка.Штрихкод);
			Если ЭлементСписка <> Неопределено Тогда
				ДобавленныеУпаковки.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЕсли;
		
		Если ИндексУпаковки < (КоличествоУпаковок - 1) Тогда
			РодительУдаляемойУпаковки = УдаляемыеУпаковки[ИндексУпаковки + 1];
		ИначеЕсли ТекущийРодитель <> Неопределено Тогда
			РодительУдаляемойУпаковки = ТекущийРодитель;
		Иначе
			РодительУдаляемойУпаковки = ДеревоМаркированнойПродукции;
		КонецЕсли;
		
		РодительУдаляемойУпаковки.ПолучитьЭлементы().Удалить(УдаляемаяУпаковка);
		ИндексУпаковки = ИндексУпаковки + 1;
	КонецЦикла;
	
	СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
	ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(
		ДеревоМаркированнойПродукции.ПолучитьЭлементы(),
		СоответствиеШтрихкодовСтрокДерева,
		ВидМаркируемойПродукции);
	
	ПроверкаИПодборПродукцииИСМПКлиент.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
	
	КоличествоНедопустимыхКодовМаркировки = 0;
	ОпределитьКоличествоНедопустимыхКодовМаркировкиДляКоллекции(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), КоличествоНедопустимыхКодовМаркировки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПроверенные(Команда)
	
	СкрытьПроверенные = Не СкрытьПроверенные;
	Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = СкрытьПроверенные;
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенныеСтрокиДерева(ЭтотОбъект);
	Иначе
		ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	
	ЗагрузкаДанныхТСД = Неопределено;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(
		Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуЗаново(Команда)
	
	ОчиститьСообщения();

	ОписаниеОповещенияПослеОтвета = Новый ОписаниеОповещения("ПослеВопросаОНачалеПроверкиЗаново", ЭтотОбъект);
	
	Если РежимПодбораСуществующихУпаковок Тогда
		ТекстВопроса = НСтр("ru = 'Сохраненные промежуточные результаты проверки и подбора будут удалены. Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Результаты проверки будут очищены. Продолжить?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещенияПослеОтвета, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКодыМаркировки(Команда)
	
		
	//заполнить коды:
	// - по заказам на эмиссию (всегда)
	// - по отчетам о нанесении кодов - для операции ввода в оборот
	// - прочее (место под переопределение)
	ВариантыЗаполнения = Новый СписокЗначений;
	ВариантыЗаполнения.Добавить("ПоЗаказамНаЭмиссию", НСтр("ru = 'По заказам на эмиссию'"));
	Если ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ВидМаркируемойПродукции)
		И ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(ПараметрыСканирования.ВидОперацииИСМП)=Неопределено Тогда
		ВариантыЗаполнения.Добавить("ПоОтчетамОНанесении", НСтр("ru = 'По отчетам о нанесении'"));
	КонецЕсли;
	ВариантыЗаполнения.Добавить(КодВозвратаДиалога.Отмена);
	ПоказатьВопрос(
		Новый ОписаниеОповещения(
			"Подключаемый_ПослеВопросаЗагрузкиКодовПоОснованию", ЭтотОбъект),
		НСтр("ru = 'Заполнить коды маркировки?'"), ВариантыЗаполнения);
	
КонецПроцедуры

#Область КомандыУстановкиСтатуса

&НаКлиенте
Процедура УстановитьСтатусПроверкиВНаличии(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиНеПроверялась(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиОтложена(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиОтсутствует(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует"));
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПереопределяемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда) Экспорт
	СобытияФормИСМПКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда, Неопределено);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьПереопределяемуюКомандуНаСервере(Контекст, Результат) Экспорт
	СобытияФормИСМП.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Контекст, Неопределено, Результат);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УточнитьДанныеПоШтрихкоду(Команда)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущаяСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если УточнениеДанныхДопустимо(ТекущаяСтрокаДерева) Тогда
		ОткрытьФормуУточненияДанных(ТекущаяСтрокаДерева.ПолучитьИдентификатор(), ТекущаяСтрокаДерева, Истина);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Операция недоступна для выбранного объекта'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСопоставление(Команда)
	
	ВыделенныеСтроки = Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСопоставлениеНаСервере(ВыделенныеСтроки, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеКодовМаркировкиНемедленно(Команда)
	
	Если ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Отсутствует подключение'"));
		Возврат;
	КонецЕсли;
	
	ИнициализироватьПараметрыСканирования();
	
	ПараметрыПроверки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыПроверкиКодовМаркировки);
	ПараметрыПроверки.ЗапрашиватьДанныеСервиса                = Истина;
	ПараметрыПроверки.ДопустимыеСтатусыКодовМаркировки        = ПараметрыСканирования.ДопустимыеСтатусыИСМП;
	ПараметрыПроверки.ДопустимыеСтатусыУпаковок               = ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП;
	
	Если Не ПараметрыПроверки.КонтролироватьСтатусыКодовМаркировки
		И Не ПараметрыПроверки.КонтролироватьВладельцевКодовМаркировки Тогда
		ПараметрыПроверки.КонтролироватьСтатусыКодовМаркировки    = Истина;
		ПараметрыПроверки.КонтролироватьВладельцевКодовМаркировки = Истина;
	КонецЕсли;
	
	ТребуетсяОбновлениеКлючаСессии = ОбновитьСтатусыКодовМаркировки(Ложь, ПараметрыПроверки);
	Если ТребуетсяОбновлениеКлючаСессии Тогда
		ЗапроситьКлючСессииНачало(
			Ложь,
			Новый ОписаниеОповещения("ПроверитьСтатусыКодовМаркировкиПослеПолученияКлючаСессии", ЭтотОбъект, ПараметрыПроверки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьКоличествоПодобраннойПродукции(Команда)
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если Не УточнениеКоличестваПодобраннойПродукцииДопустимо(ТекущиеДанные) Тогда
		Если ДопустимаПроизвольнаяЕдиницаУчета
			И ДопустимУчетМерныхТоваров
			И Не ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для выбранной строки количество подобранной продукции рассчитывается автоматически.'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("УточнитьКоличествоПодобраннойПродукцииЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КоличествоПотребительскихУпаковок",                     ТекущиеДанные.КоличествоПотребительскихУпаковок);
	ПараметрыОткрытия.Вставить("КоличествоПотребительскихУпаковокТребующихВзвешивания", ТекущиеДанные.КоличествоПотребительскихУпаковокТребующихВзвешивания);
	ПараметрыОткрытия.Вставить("КоличествоПодобрано",                                   ТекущиеДанные.КоличествоПодобрано);
	ПараметрыОткрытия.Вставить("КоличествоПодобраноВзвешено",                           ТекущиеДанные.КоличествоПодобраноВзвешено);
	
	ОткрытьФорму(
		"Обработка.ПроверкаИПодборПродукцииИСМП.Форма.УточнениеДанныхПодобраннойПродукции",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Серии

&НаКлиенте
Процедура СгенерироватьСерииПодобраннойМаркируемойПродукции()
	
	НачатьРегистрациюИзмененийНоменклатурыВТаблице();
	
	ДанныеДляГенерацииСерий = ПроверкаИПодборПродукцииИСМПКлиент.ДанныеДляГенерацииСерийПоПодобраннойПродукции(
		ПодобраннаяМаркируемаяПродукция, ВидМаркируемойПродукции);

	СгенерироватьСерииНаСервере(ДанныеДляГенерацииСерий, ВидМаркируемойПродукции);

	ПроверкаИПодборПродукцииИСМПКлиент.ЗаполнитьСерииВПодобраннойМаркируемойПродукции(ЭтотОбъект,
		ДанныеДляГенерацииСерий, ПодобраннаяМаркируемаяПродукция);
	
	ЗавершитьРегистрациюИзмененийНоменклатурыВТаблице();
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаОтбораСкрытьПроверенные

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьПроверенныеСтрокиДерева(Форма)

	Если Форма.УстановленОтборТребуетсяПеремаркировать Тогда
		Форма.УстановленОтборТребуетсяПеремаркировать = Ложь;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
	КонецЕсли;

	Если Форма.УстановленОтборНедопустимыеКодыМаркировки Тогда
		Форма.УстановленОтборНедопустимыеКодыМаркировки = Ложь;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(Форма);
	КонецЕсли;
	
	Если Форма.СкрытьПроверенные Тогда
		
		ТекущиеДанные = Форма.Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
		СтрокиДерева  = Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			
			СоответствуетОтбору = Ложь;
			СкрытьПроверенныеВСтрокеДерева(Форма, СтрокаДерева, СоответствуетОтбору);
			
		КонецЦикла;
		
		Если ТекущиеДанные = Неопределено
		 Или ТекущиеДанные.НеСоответствуетОтбору Тогда
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				Если НЕ СтрокаДерева.НеСоответствуетОтбору Тогда
					Форма.Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьПризнакУстановкиОтбораВДереве(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьПроверенныеВСтрокеДерева(Форма, СтрокаДерева, СоответствуетОтбору)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();

	ТекущаяСтрокаСоответствуетОтбору = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		СоответствуетОтбору = Ложь;
		
		СкрытьПроверенныеВСтрокеДерева(Форма, ПодчиненнаяСтрока, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоответствуетОтбору = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если Не ТекущаяСтрокаСоответствуетОтбору Тогда
		
		ТекущаяСтрокаСоответствуетОтбору = СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
			И СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
		
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоответствуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьПризнакУстановкиОтбораВДереве(Форма)
	
	Если Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0 Тогда
		Форма.УстановленОтборТребуетсяПеремаркировать = Ложь;
	КонецЕсли;
	
	Если Форма.КоличествоНедопустимыхКодовМаркировки = 0 Тогда
		Форма.УстановленОтборНедопустимыеКодыМаркировки = Ложь;
	КонецЕсли;
	
	Форма.УстановленОтбор = (Форма.СкрытьПроверенные
		Или Форма.УстановленОтборТребуетсяПеремаркировать
		Или Форма.УстановленОтборНедопустимыеКодыМаркировки);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеОтборуПриИзмененииСтроки(СтрокаДерева)
	
	Если Не СкрытьПроверенные Тогда
		Возврат;
	КонецЕсли;
	
	СоответствуетОтбору = Ложь;
	
	СкрытьПроверенныеВСтрокеДерева(ЭтотОбъект, СтрокаДерева, СоответствуетОтбору);
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Пока РодительскаяСтрока <> Неопределено Цикл
		
		Для Каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			
			РодительскаяСтрока.НеСоответствуетОтбору = Истина;
			Если Не ПодчиненнаяСтрока.НеСоответствуетОтбору Тогда
				РодительскаяСтрока.НеСоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтборНедопустимыеКодыМаркировки

&НаКлиенте
Процедура УстановитьОтборНедопустимыеКодыМаркировки()
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенные = Ложь;
		Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = Ложь;
	КонецЕсли;

	Если УстановленОтборТребуетсяПеремаркировать Тогда
		УстановленОтборТребуетсяПеремаркировать = Ложь;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(ЭтотОбъект);
	КонецЕсли;
		
	СтрокиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		СоответствуетОтбору = Ложь;
		УстановитьОтборНедопустимыеКодыМаркировкиВСтрокеДерева(СтрокаДерева, СоответствуетОтбору);
		
	КонецЦикла;
	
	ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНедопустимыеКодыМаркировкиВСтрокеДерева(Знач СтрокаДерева, СоответствуетОтбору)
	
	ТекущаяСтрокаСоответствуетОтбору = Ложь;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		СоответствуетОтбору = Ложь;
		
		УстановитьОтборНедопустимыеКодыМаркировкиВСтрокеДерева(ПодчиненнаяСтрока, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоответствуетОтбору = Истина;
		КонецЕсли;
	КонецЦикла;

	Если Не ТекущаяСтрокаСоответствуетОтбору Тогда
		ТекущаяСтрокаСоответствуетОтбору = СтрокаДерева.НедопустимыйКодМаркировки;
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоответствуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтатуса

&НаКлиенте
Процедура УстановитьСтатусДляВыделенныхСтрок(ВыделенныеСтроки, НовыйСтатус, ЭтоВосстановлениеДетализации = Ложь)
	
	КоличествоКОбработке = ВыделенныеСтроки.Количество();
	КоличествоОбработанныхСтрок = 0;
	МассивУпаковокСИзменившимсяСоставом = Новый Массив;
	
	РодительскиеСтроки = Новый Соответствие;
	СтрокиОбхода       = Новый Массив;
	
	Для Каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторВыделеннойСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭтоВосстановлениеДетализации Тогда

			Если ДанныеСтроки.НедопустимыйКодМаркировки Тогда
				Продолжить;
			КонецЕсли;

			Если ДанныеСтроки.СтатусПроверки = НовыйСтатус Тогда
				Продолжить;
			КонецЕсли;

			Если ДанныеСтроки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
				Продолжить;
			КонецЕсли;

			Если ДанныеСтроки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
				Продолжить;
			КонецЕсли;

			Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")
				И Не УстановкаСтатусаОтсутствуетВозможна(ДанныеСтроки) Тогда
				Продолжить;
			КонецЕсли;

			Если ДопустимаПроизвольнаяЕдиницаУчета
				И ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара
				И ЗначениеЗаполнено(ДанныеСтроки.ВидУпаковки)
				И ДанныеСтроки.ПроизвольнаяЕдиницаУчета
				И ДанныеСтроки.Количество = 0 Тогда

				Если РежимПодбораСуществующихУпаковок Тогда
					Если НовыйСтатус <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
					Продолжить;
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
		РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
		РодительСуществует = (РодительскаяСтрока <> Неопределено);
		
		Если РодительСуществует
			И РодительскаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, ДанныеСтроки, НовыйСтатус) Тогда
			ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(ДанныеСтроки, МассивУпаковокСИзменившимсяСоставом);
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, ДанныеСтроки, -1);
		ИначеЕсли НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, ДанныеСтроки, НовыйСтатус) Тогда
			ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(ДанныеСтроки, МассивУпаковокСИзменившимсяСоставом);
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, ДанныеСтроки, 1);
		КонецЕсли;
		
		Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			УстановитьСтатусОтсутствуетДляПодчиненных(ЭтотОбъект, ДанныеСтроки, Ложь);
		КонецЕсли;
		
		ДанныеСтроки.СтатусПроверки = НовыйСтатус;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(ДанныеСтроки);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ДанныеСтроки, ЗагрузкаДанныхТСД);

		КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
		
		Если РодительСуществует И РодительскиеСтроки[РодительскаяСтрока] = Неопределено Тогда
			РодительскиеСтроки[РодительскаяСтрока] = Истина;
			СтрокиОбхода.Добавить(РодительскаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанных Из СтрокиОбхода Цикл
		РодительскаяСтрока = СтрокаДанных;
		Пока РодительскаяСтрока <> Неопределено Цикл
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительскаяСтрока, Ложь);
			РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
		КонецЦикла;
	КонецЦикла;
	
	Если СкрытьПроверенные И КоличествоОбработанныхСтрок > 0 Тогда
		СкрытьПроверенныеСтрокиДерева(ЭтотОбъект);
	КонецЕсли;
	
	Если МассивУпаковокСИзменившимсяСоставом.Количество() > 0
		Или ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивУпаковокСИзменившимсяСоставом, Истина, КэшированныеЗначения);
	КонецЕсли;
	
	Если Не ЭтоВосстановлениеДетализации Тогда
		ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанныхСтрок, КоличествоКОбработке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтатусОтсутствуетДляПодчиненных(Форма, СтрокаДерева, ПересчитатьИтогиПриИзмененииСтроки = Истина)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		УстановитьСтатусОтсутствуетДляСтрокиДерева(Форма, ПодчиненнаяСтрока);
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь, Форма.ЗагрузкаДанныхТСД);
	Если ПересчитатьИтогиПриИзмененииСтроки Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, Форма.ЗагрузкаДанныхТСД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтатусОтсутствуетДляСтрокиДерева(Форма, СтрокаДерева)

	Если СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
		НовыйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
		
		Если НеобходимоУменьшитьКоличествоПодобраннойПродукции(Форма.РежимПодбораСуществующихУпаковок, СтрокаДерева, НовыйСтатусПроверки) Тогда
			ДобавитьСтрокуВТаблицуИзменений(Форма.ТаблицаИзмененийПодобраннойПродукции, СтрокаДерева, -1);
		КонецЕсли;
		
		СтрокаДерева.СтатусПроверки = НовыйСтатусПроверки;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(Форма, ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь, Форма.ЗагрузкаДанныхТСД);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные)
	
	Для Каждого ПодчиненнаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если Не УстановкаСтатусаОтсутствуетВозможна(ПодчиненнаяСтрока) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанных, КоличествоВсего)

	ШаблонЗаголовкаОбработано   = НСтр("ru='Статус проверки ""%1"" установлен'");
	ШаблонСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке строк установлен статус проверки ""%3""'");
	ШаблонЗаголовкаНеОбработано = НСтр("ru='Статус проверки ""%1"" не установлен'");
	ШаблонСообщенияНеОбработано = НСтр("ru='Статус проверки ""%1"" не установлен ни для одной строки.'");
	
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовкаОбработано, НовыйСтатус);
		ТекстСообщения = СтрШаблон(ШаблонСообщенияОбработано,
		                           КоличествоОбработанных,
		                           КоличествоВсего,
		                           НовыйСтатус);
		
	Иначе
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовкаНеОбработано, НовыйСтатус);
		ТекстСообщения = СтрШаблон(ШаблонСообщенияНеОбработано, НовыйСтатус);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетИтогов

&НаСервере
Процедура ПересчитатьВсеИтогиФормыНаСервере()
	
	ПроверкаИПодборПродукцииИСМП.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	
	ПересчитатьВсеИтогиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВсеИтогиФормыНаКлиенте()
	
	ПроверкаИПодборПродукцииИСМПКлиент.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	
	ПересчитатьВсеИтогиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьВсеИтогиФормы(Форма)
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(Форма.ДеревоМаркированнойПродукции);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ОпределитьТипыВсехУпаковок(Форма.ДеревоМаркированнойПродукции, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
	Форма.КоличествоСтрокПодобраннойПродукции = Форма.ПодобраннаяМаркируемаяПродукция.Количество();
	
	СформироватьПредставлениеНастроек(Форма);
	
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область Перемаркировка

&НаКлиенте
Процедура ПослеГенерацииШтрихкодаДляНовойУпаковки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьКорректностьШтрихкодаПриДобавлении(Результат.Штрихкод, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
	
	Если Результат.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ЭтоГенерацияШтрихкодовУпаковок", Истина);
		
		ДанныеШтрихкода = Новый Структура("Штрихкод, Количество", Результат.Штрихкод, 1);
		РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ПараметрыВыполнения);
		
		Возврат;
	КонецЕсли;
	
	ДобавитьНовуюУпаковку(Результат, Результат.ТипУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПеремаркировкиУпаковки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьКорректностьШтрихкодаПриДобавлении(Результат.Штрихкод, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
	
	ПеремаркироватьУпаковку(Результат.Штрихкод, ДополнительныеПараметры.ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьШтрихкодаПриДобавлении(Штрихкод, Отказ)

	Если ПустаяСтрока(Штрихкод) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Упаковке не может быть назначен пустой Штрихкод.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(Штрихкод);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Штрихкодом %1 уже маркирована другая упаковка. Маркируйте данную упаковку другим штрихкодом.'"),
			ШтрихкодированиеИСКлиентСервер.ПредставлениеШтрихкода(Штрихкод));
		
		ПоказатьПредупреждение(,ТекстСообщения);
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеремаркироватьУпаковку(Штрихкод, ИдентификаторСтрокиУпаковки)
	
	СтрокаСУпаковкой = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиУпаковки);
	
	Если СтрокаСУпаковкой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьШтрихКодВСпискахУпаковок(ЭтотОбъект,СтрокаСУпаковкой.Штрихкод, Штрихкод);
	СоответствиеШтрихкодовСтрокДерева.Удалить(СтрокаСУпаковкой.НормализованныйШтрихкод);
	СтрокаСУпаковкой.Штрихкод = Штрихкод;
	СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаСУпаковкой.Штрихкод, ИдентификаторСтрокиУпаковки);
	
	Если СтрокаСУпаковкой.ТребуетсяПеремаркировка Тогда
		ПроверятьНеобходимостьПеремаркировки = Истина;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(СтрокаСУпаковкой, ВидМаркируемойПродукции);
	
	ПриИзмененииМаркировкиСоставаУпаковкиНаКлиенте(ИдентификаторСтрокиУпаковки, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьШтрихКодВСпискахУпаковок(Форма, СтарыйШтрихкод, НовыйШтрихкод)

	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.ДобавленныеУпаковки);
	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.ДоступныеДляПроверкиУпаковки);
	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.УпаковкиДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, СписокШтрихкодов)
	
	НайденныйЭлемент = СписокШтрихкодов.НайтиПоЗначению(СтарыйШтрихкод);
	
	Если НайденныйЭлемент <> Неопределено Тогда
		
		СписокШтрихкодов.Удалить(НайденныйЭлемент);
		СписокШтрихКодов.Добавить(НовыйШтрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтрокиУпаковки, ПроверятьТипУпаковки, КэшированныеЗначения)

	Если ПроверятьНеобходимостьПеремаркировки Тогда
		ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(ИдентификаторСтрокиУпаковки);
	КонецЕсли;
	
	Если ПроверятьТипУпаковки Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОпределитьТипУпаковкиПриИзмененииСтроки(
			ДеревоМаркированнойПродукции, ИдентификаторСтрокиУпаковки, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	КонецЕсли;
	
	ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМаркировкиСоставаУпаковкиНаКлиенте(ИдентификаторСтрокиУпаковки, ПроверятьТипУпаковки)

	Если ПроверятьНеобходимостьПеремаркировки Тогда
		ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(ИдентификаторСтрокиУпаковки);
	КонецЕсли;
	
	Если ПроверятьТипУпаковки Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОпределитьТипУпаковкиПриИзмененииСтроки(
			ДеревоМаркированнойПродукции, ИдентификаторСтрокиУпаковки, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	КонецЕсли;
	
	ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	
	Если ДоступноСозданиеНовыхУпаковок Тогда
		ПроверитьАвтоматическоеЗакрытиеУпаковки();
	КонецЕсли;
	
	Если ДоступноСозданиеНовыхУпаковок Тогда
		ПроверитьАвтоматическоеЗакрытиеУпаковки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрок, ПроверятьТипУпаковки, КэшированныеЗначения)

	Если ПроверятьНеобходимостьПеремаркировки Тогда
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(СтрокаМассива);
		КонецЦикла
	КонецЕсли;
	
	Если ПроверятьТипУпаковки Тогда
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ОпределитьТипУпаковкиПриИзмененииСтроки(
				ДеревоМаркированнойПродукции, СтрокаМассива, ПроверкаИПодборПродукцииИСМПКлиентСервер);
		КонецЦикла;
	КонецЕсли;

	ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТребующимПеремаркировки()
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенные = Ложь;
		Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = Ложь;
	КонецЕсли;
	
	Если УстановленОтборНедопустимыеКодыМаркировки Тогда
		УстановленОтборНедопустимыеКодыМаркировки = Ложь;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
	КонецЕсли;
	
	СтрокиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СоответствуетОтбору = Ложь;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(СтрокаДерева, СоответствуетОтбору);
	КонецЦикла;
	
	ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(ИдентификаторИзмененойСтроки)

	ИзмененнаяСтрока = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторИзмененойСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаХешСумм = ПроверкаИПодборПродукцииИС.ПустаяТаблицаХешСумм();
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ИзмененнаяСтрока.ТипУпаковки) Тогда
		ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(ИзмененнаяСтрока, ТаблицаХешСумм, Ложь);
	КонецЕсли;
	
	РодительИзмененнойСтроки = ИзмененнаяСтрока.ПолучитьРодителя();
	
	Пока РодительИзмененнойСтроки <> Неопределено 
		И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительИзмененнойСтроки.ТипУпаковки) Цикл
		
		ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(РодительИзмененнойСтроки, ТаблицаХешСумм, Ложь);
		РодительИзмененнойСтроки = РодительИзмененнойСтроки.ПолучитьРодителя();
		
	КонецЦикла;
	
	ТаблицаПеремаркировки = ПроверкаИПодборПродукцииИС.ТаблицаПеремаркировки(ТаблицаХешСумм);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьНеобходимостьПеремаркировки(ЭтотОбъект, ТаблицаПеремаркировки, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаСУпаковкойДляПеремаркировки()
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Спозиционируйтесь на упаковке, которую хотите перемаркировать.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда
		
		Возврат ТекущиеДанные;
		
	Иначе
		
		РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
		Если РодительскаяСтрока = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительскаяСтрока.ТипУпаковки) Тогда
			
			Возврат РодительскаяСтрока;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДанныеУпаковкиДляПеремаркировки(СтрокаДерева)
	
	ДанныеДляПеремаркировки = Новый Структура;
	ДанныеДляПеремаркировки.Вставить("ТипУпаковки",               СтрокаДерева.ТипУпаковки);
	ДанныеДляПеремаркировки.Вставить("Штрихкод",                  СтрокаДерева.Штрихкод);
	ДанныеДляПеремаркировки.Вставить("АдресПредыдущихШтрихкодов", АдресПредыдущихШтрихкодов);
	ДанныеДляПеремаркировки.Вставить("ДоступныеТипыШтрихкодовСтрокой",
		ПроверкаИПодборПродукцииИСМПКлиент.ДоступныеТипыШтрихкодовСтрокой());
	ДанныеДляПеремаркировки.Вставить("ТипШтрихкода", СтрокаДерева.ТипШтрихкода);
	
	ДанныеДляПеремаркировки.Вставить("КоличествоВложенныхЕдиниц", 0);
	ДанныеДляПеремаркировки.Вставить("Характеристика",            СтрокаДерева.Характеристика);
	ДанныеДляПеремаркировки.Вставить("Номенклатура",              СтрокаДерева.Номенклатура);
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка") Тогда
		
		Для Каждого СтрокаСодержимого Из СтрокаДерева.ПолучитьЭлементы() Цикл
			Если СтрокаСодержимого.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
				ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц = ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц + 1;
			Иначе
				ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц = ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц + СтрокаСодержимого.КоличествоПодчиненныхПотребительскихУпаковок;
			КонецЕсли;
		КонецЦикла
		
	КонецЕсли;
	
	Возврат ДанныеДляПеремаркировки;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(СтрокиДерева, КоличествоТребующихПеремаркировки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ТребуетсяПеремаркировка Тогда
			КоличествоТребующихПеремаркировки = КоличествоТребующихПеремаркировки + 1;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда 
			ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), КоличествоТребующихПеремаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьКоличествоНедопустимыхКодовМаркировкиДляКоллекции(СтрокиДерева, КоличествоНедопустимыхКодов);
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.НедопустимыйКодМаркировки Тогда
			КоличествоНедопустимыхКодов = КоличествоНедопустимыхКодов + 1;
		КонецЕсли;
		
		ОпределитьКоличествоНедопустимыхКодовМаркировкиДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), КоличествоНедопустимыхКодов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(СтрокаДерева, МассивУпаковокСИзменившимсяСоставом)
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();

	Если СтрокаРодитель <> Неопределено
		И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаРодитель.ТипУпаковки) Тогда
		
		ИденитификаторСтрокиРодителя = СтрокаРодитель.ПолучитьИдентификатор();
		
		Если МассивУпаковокСИзменившимсяСоставом.Найти(ИденитификаторСтрокиРодителя) = Неопределено Тогда
			
			МассивУпаковокСИзменившимсяСоставом.Добавить(ИденитификаторСтрокиРодителя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСтатусаКодовМаркировки

&НаСервереБезКонтекста
Функция ЗапроситьСтатусыКодовМаркировки(СоответствиеШтрихкодовСтрокДерева, ВидПродукции, Организация)
	
	МассивСтрокКодов = Новый Массив;
	ДанныеКодовМаркировки = ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки();
	Для Каждого КлючИЗначение Из СоответствиеШтрихкодовСтрокДерева Цикл
		
		СтруктураЗначения = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(КлючИЗначение.Ключ, ВидПродукции);
		
		СтрокаКодаМаркировки = ДанныеКодовМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировки, СтруктураЗначения);
		
		МассивСтрокКодов.Добавить(СтрокаКодаМаркировки);
		
	КонецЦикла;
	
	РезультатЗапроса = ИнтерфейсИСМП.СтатусыКодовМаркировки(МассивСтрокКодов, Организация);
	
	Если РезультатЗапроса.СтатусыКодовМаркировки = Неопределено
		И ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
	КонецЕсли;
	
	Если РезультатЗапроса.СтатусыКодовМаркировки = Неопределено Тогда
		
		СтатусыКодовМаркировки = Неопределено;
		
	Иначе
		
		СтатусыКодовМаркировки = Новый Соответствие;
		Для Каждого КлючИЗначение Из РезультатЗапроса.СтатусыКодовМаркировки Цикл
			СтатусыКодовМаркировки.Вставить(КлючИЗначение.Ключ.Штрихкод, КлючИЗначение.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         СтатусыКодовМаркировки);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    РезультатЗапроса.ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Функция ОбновитьСтатусыКодовМаркировки(СообщатьОбОшибке = Истина, ПараметрыПроверки = Неопределено)
	
	Если СоответствиеШтрихкодовСтрокДерева.Количество() > 0 Тогда
		
		РезультатЗапроса = ЗапроситьСтатусыКодовМаркировки(
			СоответствиеШтрихкодовСтрокДерева,
			ВидМаркируемойПродукции, Организация);
		
		Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если РезультатЗапроса.СтатусыКодовМаркировки = Неопределено Тогда
			Если СообщатьОбОшибке Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СоответствиеШтрихкодовСтрокДерева Цикл
		
		СтатусКодаМаркировки = РезультатЗапроса.СтатусыКодовМаркировки[КлючИЗначение.Ключ];
		
		Если СтатусКодаМаркировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, КлючИЗначение.Значение);
		
		Если СтрокаДерева = Неопределено Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева.СтатусКодаМаркировки = СтатусКодаМаркировки.Статус;
		СтрокаДерева.ИННВладельца         = СтатусКодаМаркировки.ИННВладельца;
		СтрокаДерева.СпособВводаВОборот   = СтатусКодаМаркировки.СпособВводаВОборот;
		
	КонецЦикла;
	
	ПроверитьСтатусыКодовМаркировки(ПараметрыПроверки);
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьСтатусыКодовМаркировки(ПараметрыПроверки = Неопределено)
	
	ДополнительныеПараметрыПроверки = Новый Структура();
	ДополнительныеПараметрыПроверки.Вставить("ТаблицаИзмененийПодобраннойПродукции", ТаблицаИзмененийПодобраннойПродукции);
	ДополнительныеПараметрыПроверки.Вставить("РежимПодбораСуществующихУпаковок",     РежимПодбораСуществующихУпаковок);
	ДополнительныеПараметрыПроверки.Вставить("НачальныйСтатусПроверки",              НачальныйСтатусПроверки);
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыПроверкиКодовМаркировки);
	КонецЕсли;
	
	КоличествоНедопустимыхКодовМаркировки = 0;
	
	ПроверитьДопустимостьКодовМаркировки(
		ДеревоМаркированнойПродукции.ПолучитьЭлементы(),
		ПараметрыПроверки, ДополнительныеПараметрыПроверки, КоличествоНедопустимыхКодовМаркировки);
	
	ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
	
	Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	КонецЕсли;
	
	Если КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
		ПроверкаИПодборПродукцииИСМПКлиент.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДопустимостьКодовМаркировки(ЭлементыДерева, ПараметрыПроверкиКодовМаркировки, ДополнительныеПараметрыПроверки,
	КоличествоНедопустимыхКодов, КешЛогистическихУпаковок = Неопределено)
	
	Если КешЛогистическихУпаковок = Неопределено Тогда
		КешЛогистическихУпаковок = Новый Соответствие;
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева Тогда
		ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегата= Истина;
		ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева = Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ПодчиненныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		
		Если ПодчиненныеЭлементы.Количество() > 0 Тогда
			ПроверитьДопустимостьКодовМаркировки(
				ПодчиненныеЭлементы,
				ПараметрыПроверкиКодовМаркировки,
				ДополнительныеПараметрыПроверки,
				КоличествоНедопустимыхКодов,
				КешЛогистическихУпаковок);
		КонецЕсли;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(ЭлементДерева, ПараметрыПроверкиКодовМаркировки);
		
		Если ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегата
			И ЭлементДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
			И КешЛогистическихУпаковок.Получить(ЭлементДерева.НормализованныйШтрихкод) = Неопределено Тогда
			
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьСоставАгрегата(ЭлементДерева, ПараметрыПроверкиКодовМаркировки);
			КешЛогистическихУпаковок.Вставить(ЭлементДерева.НормализованныйШтрихкод, Истина);
			
		КонецЕсли;
		
		Если ЭлементДерева.НедопустимыйКодМаркировки Тогда
			Если НеобходимоУменьшитьКоличествоПодобраннойПродукции(
				ДополнительныеПараметрыПроверки.РежимПодбораСуществующихУпаковок,
				ЭлементДерева, ДополнительныеПараметрыПроверки.НачальныйСтатусПроверки) Тогда
				
				ДобавитьСтрокуВТаблицуИзменений(ДополнительныеПараметрыПроверки.ТаблицаИзмененийПодобраннойПродукции, ЭлементДерева, -1);
				
			ИначеЕсли НеобходимоУвеличитьКоличествоПодобраннойПродукции(
				ДополнительныеПараметрыПроверки.РежимПодбораСуществующихУпаковок,
				ЭлементДерева, ДополнительныеПараметрыПроверки.НачальныйСтатусПроверки) Тогда
				
				ДобавитьСтрокуВТаблицуИзменений(ДополнительныеПараметрыПроверки.ТаблицаИзмененийПодобраннойПродукции, ЭлементДерева, 1);
				
			КонецЕсли;
			
			ЭлементДерева.СтатусПроверки = ДополнительныеПараметрыПроверки.НачальныйСтатусПроверки;
			
			КоличествоНедопустимыхКодов = КоличествоНедопустимыхКодов + 1;
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьРодителя() = Неопределено Тогда
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ЭлементДерева, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусыКодовМаркировкиПослеПолученияКлючаСессии(Результат, ПараметрыПроверки) Экспорт
	
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		РезультатАвторизации = Результат[Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации в ИС МП.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
	КонецЕсли;
	
	Если ОшибкаАвторизации Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	Иначе
		
		ОбновитьСтатусыКодовМаркировки(Ложь, ПараметрыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НачальноеЗаполнение

&НаСервереБезКонтекста
Функция СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок)
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствиеШтрихкодыИдентификаторыСтрок) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	Иначе
		Возврат Новый Соответствие;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОжиданияЗапросаКлючаСессии()
	
	ЗапроситьКлючСессииНачало();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияПовторногоЗапросаКлючаСессии()
	
	ЗапроситьКлючСессииНачало(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииНачало(ПовторныйЗапрос = Ложь, ОповещениеПриЗавершении = Неопределено, ЭтоВосстановлениеДетализации = Ложь)
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		ОповещениеПриЗапросеКлючаСессии = ОповещениеПриЗавершении;
	Иначе
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПовторныйЗапрос",              ПовторныйЗапрос);
		ДополнительныеПараметры.Вставить("ЭтоВосстановлениеДетализации", ЭтоВосстановлениеДетализации);
		
		ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения("ЗапроситьКлючСессииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация),
		ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		РезультатАвторизации = Результат[Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации в ИС МП.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		ИначеЕсли ТребуетсяОбновлениеКлючаСессии Тогда
			ТребуетсяОбновлениеКлючаСессии = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПовторныйЗапрос              = Ложь;
	ЭтоВосстановлениеДетализации = Ложь;
	СозданиеАктаПриЗакрытии      = Ложь;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ПовторныйЗапрос",              ПовторныйЗапрос);
		ДополнительныеПараметры.Свойство("ЭтоВосстановлениеДетализации", ЭтоВосстановлениеДетализации);
		СозданиеАктаПриЗакрытии = ДополнительныеПараметры.Свойство("СоздаватьАктОРасхожденияхПриЗакрытии");
	КонецЕсли;
	
	Если ПовторныйЗапрос Тогда
		Если ОтказОтАвторизации ИЛИ ОшибкаАвторизации Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Иначе
			ПриПодключенииКСервисуИСМП();
		КонецЕсли;
	ИначеЕсли ОтказОтАвторизации Тогда
		ЗакрытьФорму();
	ИначеЕсли ОшибкаАвторизации Тогда
		ПриОшибкеПодключенияКСервисуИСМП(ТекстОшибки, ЭтоВосстановлениеДетализации);
	ИначеЕсли СозданиеАктаПриЗакрытии Тогда
		ЗавершитьПроверку(ДополнительныеПараметры.СоздаватьАктОРасхожденияхПриЗакрытии);
	Иначе
		ЗагрузитьДанныеДокумента(ЭтоВосстановлениеДетализации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключенииКСервисуИСМП()

	ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП = Ложь;
	
	Если ПараметрыПроверкиКодовМаркировки.ЗапрашиватьДанныеСервиса Тогда
		ОбновитьСтатусыКодовМаркировки();
	КонецЕсли;
	
	УправлениеЭлементамиКонтроляСтатусаКодовМаркировки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОшибкеПодключенияКСервисуИСМП(ТекстОшибки, ЭтоВосстановлениеДетализации)
	
	Если РежимПодбораСуществующихУпаковок Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП = Истина;
		ЗагрузитьДанныеДокумента(ЭтоВосстановлениеДетализации);
	ИначеЕсли Открыта() Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИПроверитьПереданныеПараметры(Отказ)
	
	ВидМаркируемойПродукции = Параметры.ВидМаркируемойПродукции;
	Если Не ЗначениеЗаполнено(ВидМаркируемойПродукции) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В форму не передан вид маркируемой продукции.'"),,,,Отказ);
		Возврат;
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидМаркируемойПродукции)
		Или Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидМаркируемойПродукции, Истина) Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Форма не предназначена для работы с продукцией ""%1"".'"), ВидМаркируемойПродукции));
		Возврат;
	ИначеЕсли ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции(, Ложь).Найти(ВидМаркируемойПродукции) = Неопределено Тогда
		ВидПродукцииРодительный = ПроверкаИПодборПродукцииИСМП.ВидПродукцииРодительный(ВидМаркируемойПродукции);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Внимание! Форма не будет открыта. Учет %1 отключен'"), ВидПродукцииРодительный);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Организация = Параметры.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В форму не передана организация.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПроверкаНеПоДокументу Тогда
		Если НЕ ЭтоАдресВременногоХранилища(Параметры.АдресПроверяемыхДанных) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В форму не переданы данные для проверки.'"),,,, Отказ);
			Возврат;
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(Параметры.ПроверяемыйДокумент) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В форму не передан документ для проверки.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.РежимПодбораСуществующихУпаковок И Не ЗначениеЗаполнено(Параметры.Контрагент) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В форму не передан контрагент.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыУказанияСерий = Параметры.ПараметрыУказанияСерий;
	ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий(ПараметрыУказанияСерий, Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП, ЭтотОбъект);
	
	Склад = Параметры.Склад;
	Если ИспользоватьСерииНоменклатуры Тогда
		Если НЕ ЗначениеЗаполнено(Склад)
			И НЕ Параметры.ПроверкаНеПоДокументу
			И ЗначениеЗаполнено(Параметры.ПроверяемыйДокумент) Тогда
			МетаданныеДокумента = Параметры.ПроверяемыйДокумент.Метаданные();
			Если ИнтеграцияИС.СодержитсяВПодсистеме("ГосИС.ИСМП", МетаданныеДокумента)
				И МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
				ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПроверяемыйДокумент, "ДокументОснование");
				Если ЗначениеЗаполнено(ОснованиеДокумента) Тогда
					ИнтеграцияИСМППереопределяемый.ПриОпределенииСкладаДокументаОснования(Склад, ОснованиеДокумента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Склад)
			И ОбщегоНазначения.ОбъектЯвляетсяГруппой(Склад) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Форма не поддерживает работу с группой складов.'"),,,,Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаНеПоДокументу                                  = Параметры.ПроверкаНеПоДокументу;
	АдресПроверяемыхДанных                                 = Параметры.АдресПроверяемыхДанных;
	ПроверяемыйДокумент                                    = Параметры.ПроверяемыйДокумент;
	РежимПодбораСуществующихУпаковок                       = Параметры.РежимПодбораСуществующихУпаковок;
	РедактированиеФормыНедоступно                          = Параметры.РедактированиеФормыНедоступно;
	КонтролироватьСканируемуюПродукциюПоДокументуОснованию = Параметры.КонтролироватьСканируемуюПродукциюПоДокументуОснованию;
	ПриЗавершенииСохранятьРезультатыПроверки               = Параметры.ПриЗавершенииСохранятьРезультатыПроверки;
	ПроверятьНеобходимостьПеремаркировки                   = Параметры.ПроверятьНеобходимостьПеремаркировки;
	РасчитыватьХешСуммуУпаковок                            = Параметры.РасчитыватьХешСуммуУпаковок;
	ДоступнаПечатьЭтикеток                                 = Параметры.ДоступнаПечатьЭтикеток;
	ДанныеВыбораПоМаркируемойПродукции                     = Параметры.ДанныеВыбораПоМаркируемойПродукции;
	СохраненВыборПоМаркируемойПродукции                    = Параметры.СохраненВыборПоМаркируемойПродукции;
	ПроверкаЭлектронногоДокумента                          = Параметры.ПроверкаЭлектронногоДокумента;
	ДоступноСозданиеНовыхУпаковок                          = Параметры.ДоступноСозданиеНовыхУпаковок;
	ИспользоватьСтатусПроверкаЗавершена                    = Параметры.ИспользоватьСтатусПроверкаЗавершена;
	НачальныйСтатусПроверки                                =
		?(ЗначениеЗаполнено(Параметры.НачальныйСтатусПроверки),
			Параметры.НачальныйСтатусПроверки,
			Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
	Если ТипЗнч(Параметры.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
		ДопустимыйСпособВводаВОборот.ЗагрузитьЗначения(Параметры.ДопустимыйСпособВводаВОборот);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ДопустимыйСпособВводаВОборот)
		И ДопустимыйСпособВводаВОборот.НайтиПоЗначению(Параметры.ДопустимыйСпособВводаВОборот) = Неопределено Тогда
		ДопустимыйСпособВводаВОборот.Добавить(Параметры.ДопустимыйСпособВводаВОборот);
	КонецЕсли;
	АктыОРасхожденияхПослеПриемкиИспользуются = ИнтеграцияИСМП.АктыОРасхожденияПослеПоступленияИспользуются(ПроверяемыйДокумент);
	ЭтоДокументПриобретения = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПроверяемыйДокумент);
	
	ПараметрыСканированияСервер = ШтрихкодированиеИС.ПараметрыСканирования(ПроверяемыйДокумент,, ВидМаркируемойПродукции);
	
	ДопустимаПроизвольнаяЕдиницаУчета = ИнтеграцияИС.ЕстьПроизвольныеЕдиницыУчета(ВидМаркируемойПродукции)
		Или (ИнтеграцияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидМаркируемойПродукции, ПараметрыСканированияСервер.ВидОперацииИСМП)
			И ИнтеграцияИС.ИспользуетсяЧастичноеВыбытие(ВидМаркируемойПродукции));
	
	// Флаг используется для управления режимом работы без указания мерного количества,
	// влияет на видимость флага ЗапрашиватьКоличествоМерногоТовара.
	ДопустимУчетМерныхТоваров = ДопустимаПроизвольнаяЕдиницаУчета И ИнтеграцияИС.ЕстьПродукцияТребующаяВзвешивания();
	
	ЗначенияСтрокиПоУмолчаниюДляТаблицыИзменений = Новый Структура;
	Для Каждого ОписаниеКолонки Из ПроверкаИПодборПродукцииИСМП.КолонкиДляТаблицыИзмененийПодобраннойПродукции(ВидМаркируемойПродукции) Цикл
		ЗначенияСтрокиПоУмолчаниюДляТаблицыИзменений.Вставить(ОписаниеКолонки.Имя, ОписаниеКолонки.ОписаниеТипов.ПривестиЗначение());
	КонецЦикла;
	ЗначенияСтрокиПоУмолчаниюДляТаблицыИзмененийПодобраннойПродукции = Новый ФиксированнаяСтруктура(ЗначенияСтрокиПоУмолчаниюДляТаблицыИзменений);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПараметрыПроверкиКодовМаркировки()
	
	ПараметрыПроверкиКодовМаркировки = Новый Структура();
	ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеИСМП", Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервиса",
		Не ЭлектронноеВзаимодействиеИСМП.ЗавершенОбменПоЭДО(ПроверяемыйДокумент));
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки", Новый Массив);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок",        Новый Массив);
	
	Если РежимПодбораСуществующихУпаковок
		Или ПроверкаИПодборПродукцииИСМП.КонтрагентНеРезидент(Параметры.Контрагент) Тогда
		ИННВладельца = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
		Владелец     = Организация;
	Иначе
		ИННВладельца = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Параметры.Контрагент).ИНН;
		Владелец     = Параметры.Контрагент;
	КонецЕсли;
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки",    Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельцевКодовМаркировки", Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ИННВладельца",            ИННВладельца);
	ПараметрыПроверкиКодовМаркировки.Вставить("Владелец",                Владелец);
	ПараметрыПроверкиКодовМаркировки.Вставить("ОбратноеСканирование",    Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтандартнуюВложенность", Истина);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВложенностьУпаковок",    Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеВложенияАгрегатов",          Неопределено);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставАгрегата",         Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева", Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыйСпособВводаВОборот",       Новый Массив);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьКоличествоМерногоТовара", Неопределено);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП", Неопределено);
	Если ПараметрыПроверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияМОТП = Неопределено
		И ЭтоДокументПриобретения И ПроверкаЭлектронногоДокумента Тогда
		
		//Если (ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидМаркируемойПродукции)
		//	И ПараметрыСканирования.ЗапрашиватьСрокГодности)
		//	Или ИнтеграцияИСМПКлиентСерверПовтИсп.ЗапрашиватьДанныеСервиса() Тогда
		//	ПараметрыПроверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияМОТП = Ложь;
		//Иначе
		//	ПараметрыПроверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияМОТП = Истина;
		//КонецЕсли;
		
		Если ИнтеграцияИСМПКлиентСерверПовтИсп.ЗапрашиватьДанныеСервиса() Тогда
			ПараметрыПроверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияМОТП = Ложь;
		Иначе
			ПараметрыПроверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияМОТП = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыПроверкиКодовМаркировки(Отказ)
	
	ИнициализироватьПараметрыСканирования();

	ДопустимыеСтатусыИСМП         = Неопределено;
	ДопустимыеСтатусыУпаковокИСМП = Неопределено;
	
	ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара = ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара;
	
	Если Не ПараметрыСканирования.Свойство("ДопустимыеСтатусыИСМП", ДопустимыеСтатусыИСМП) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не определены допустимые статусы кодов маркировки ИС МП.'"),,,,Отказ);
	ИначеЕсли ДопустимыеСтатусыИСМП.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не определены допустимые статусы кодов маркировки ИС МП.'"),,,,Отказ);
	КонецЕсли;
	Если ПараметрыСканирования.Свойство("ДопустимыеСтатусыУпаковокИСМП") Тогда
		ДопустимыеСтатусыУпаковокИСМП = ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП;
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
		
		Если Не Отказ Тогда
			
			ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
				ВидМаркируемойПродукции,
				ПараметрыСканирования.ВидОперацииИСМП);
			
			ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
				ВидМаркируемойПродукции,
				ПараметрыСканирования.ВидОперацииИСМП);
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки    = Ложь;
		ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки = Ложь;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки", ДопустимыеСтатусыИСМП);
		ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок",        ДопустимыеСтатусыУпаковокИСМП);
		
		Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
			ПараметрыПроверкиКодовМаркировки.ДопустимыйСпособВводаВОборот = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот)
			И ПараметрыПроверкиКодовМаркировки.ДопустимыйСпособВводаВОборот.Найти(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Неопределено Тогда
			ПараметрыПроверкиКодовМаркировки.ДопустимыйСпособВводаВОборот.Добавить(ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
		КонецЕсли;

	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ПараметрыПроверкиКодовМаркировки.КонтролироватьСтандартнуюВложенность = ПараметрыСканирования.КонтролироватьСтандартнуюВложенность;
		
		Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
			И ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ВидМаркируемойПродукции) Тогда
			
			ПараметрыПроверкиКодовМаркировки.КонтролироватьВложенностьУпаковок = Истина;
			
			ДопустимыеВложенияАгрегатовПоВидамПродукции = ПроверкаИПодборПродукцииИСМПКлиентСервер.ДопустимыеВложенияАгрегатовПоВидамПродукции();
			ПараметрыПроверкиКодовМаркировки.ДопустимыеВложенияАгрегатов = ДопустимыеВложенияАгрегатовПоВидамПродукции.Получить(ВидМаркируемойПродукции);

			ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимоОбращениеКСервисуИСМП(ПараметрыСканирования)
	
	Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП
		Или ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеРезультатыПроверки(ВосстановитьПоАктуРасхождений = Ложь)
	
	Если ВосстановитьПоАктуРасхождений Тогда
		ДокументДляОтбора = ПроверкаИПодборПродукцииИСМП.СформированныйАктОРасхождениях(ПроверяемыйДокумент);
		Если НЕ ЗначениеЗаполнено(ДокументДляОтбора) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДокументДляОтбора = ПроверяемыйДокумент;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Документ,ВидМаркируемойПродукции", ДокументДляОтбора, ВидМаркируемойПродукции);
	СтруктураРесурсовПроверки = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.Получить(СтруктураОтбора);
		
	Если НЕ ВосстановитьПоАктуРасхождений Тогда
		Если СтруктураРесурсовПроверки.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено
			// Если параметр = Неопределено, то используется поведение по-умолчанию.
			И ИспользоватьСтатусПроверкаЗавершена <> Ложь Тогда
			НачальныйСтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			
			Если ПриЗавершенииСохранятьРезультатыПроверки Тогда
				РедактированиеФормыНедоступно = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		ИначеЕсли СтруктураРесурсовПроверки.СтатусПроверкиИПодбора <> Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураРесурсовПроверки.ДанныеПроверкиИПодбора) <> Тип("ХранилищеЗначения") Тогда
		Если НЕ ВосстановитьПоАктуРасхождений Тогда
			ВосстановитьСохраненныеРезультатыПроверки(Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеПроверкиИПодбора = СтруктураРесурсовПроверки.ДанныеПроверкиИПодбора.Получить();
	
	Если ТипЗнч(ДанныеПроверкиИПодбора) <> Тип("Структура") Тогда
		Если НЕ ВосстановитьПоАктуРасхождений Тогда
			ВосстановитьСохраненныеРезультатыПроверки(Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВосстановленыСохраненныеРезультатыПроверки = Истина;
	
	ПреобразоватьСохраненныеРезультатыПриНеобходимости(ДанныеПроверкиИПодбора);
	
	ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеПроверкиИПодбора);
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьСохраненныеРезультатыПриНеобходимости(ДанныеПроверкиИПодбора)
	
	Если Не ДанныеПроверкиИПодбора.ПараметрыПроверкиКодовМаркировки.Свойство("ВозможностьЗагрузкиДанныхБезПодключенияМОТП") Тогда
		ДанныеПроверкиИПодбора.ПараметрыПроверкиКодовМаркировки.Вставить(
			"ВозможностьЗагрузкиДанныхБезПодключенияМОТП", Ложь);
	КонецЕсли;
	
	Если Не ДанныеПроверкиИПодбора.ПараметрыПроверкиКодовМаркировки.Свойство("КонтролироватьСтандартнуюВложенность") Тогда
		ДанныеПроверкиИПодбора.ПараметрыПроверкиКодовМаркировки.Вставить(
			"КонтролироватьСтандартнуюВложенность", Ложь);
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДетализацияСтруктурыХранения") Тогда
		ДанныеПроверкиИПодбора.ДетализацияСтруктурыХранения = ПроверкаИПодборПродукцииИСМП.ДетализацияСтруктурыХраненияИС(
			ДанныеПроверкиИПодбора.ДетализацияСтруктурыХранения);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПараметрыПроверкиКодовМаркировки Цикл
		Если Не ДанныеПроверкиИПодбора.ПараметрыПроверкиКодовМаркировки.Свойство(КлючИЗначение.Ключ) Тогда
			ДанныеПроверкиИПодбора.ПараметрыПроверкиКодовМаркировки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеПроверкиИПодбора)
	
	СоответствиеПараметров = Новый Соответствие;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДеревоМаркированнойПродукции") Тогда
		
		ДеревоМаркированнойПродукцииОбъект = ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции;
		
		ДобавитьИЗаполнитьКолонкиПриВосстановленииДереваМаркированнойПродукции(ДеревоМаркированнойПродукцииОбъект, СоответствиеПараметров);
		
		Попытка
			ЗначениеВРеквизитФормы(ДеревоМаркированнойПродукцииОбъект, "ДеревоМаркированнойПродукции");
		Исключение
			ПроверкаИПодборПродукцииИС.ПроверитьКолонкиИсточникаИПриемникаНаСовместимость(
				ДеревоМаркированнойПродукцииОбъект, РеквизитФормыВЗначение("ДеревоМаркированнойПродукции"));
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ПодобраннаяМаркируемаяПродукция") Тогда
		
		ПодобраннаяМаркируемаяПродукцияОбъект = ДанныеПроверкиИПодбора.ПодобраннаяМаркируемаяПродукция;
		
		ДобавитьИЗаполнитьКолонкиПриВосстановленииПодобраннойМаркируемойПродукции(ПодобраннаяМаркируемаяПродукцияОбъект, СоответствиеПараметров);
		
		ПодобраннаяМаркируемаяПродукция.Очистить();
		Для Каждого СтрокаТаблицы Из ПодобраннаяМаркируемаяПродукцияОбъект Цикл
			ЗаполнитьЗначенияСвойств(ПодобраннаяМаркируемаяПродукция.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ПродукцияПоДокументу") Тогда
		
		ПродукцияПоДокументуОбъект = ДанныеПроверкиИПодбора.ПродукцияПоДокументу;
		Если ПродукцияПоДокументуОбъект.Колонки.Найти("Скоропортящаяся")<>Неопределено Тогда
			ПродукцияПоДокументуОбъект.Колонки.Скоропортящаяся.Имя = "СкоропортящаясяПродукция";
		КонецЕсли;
		
		Попытка
			ЗначениеВРеквизитФормы(ПродукцияПоДокументуОбъект, "ПродукцияПоДокументу");
		Исключение
			ПроверкаИПодборПродукцииИС.ПроверитьКолонкиИсточникаИПриемникаНаСовместимость(
				ПродукцияПоДокументуОбъект, РеквизитФормыВЗначение("ПродукцияПоДокументу"));
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("КоличествоПоДокументуСУчетомВидаПродукции") Тогда
		
		КоличествоПоДокументуСУчетомВидаПродукцииОбъект = ДанныеПроверкиИПодбора.КоличествоПоДокументуСУчетомВидаПродукции;
		Если КоличествоПоДокументуСУчетомВидаПродукцииОбъект.Колонки.Найти("Скоропортящаяся")<>Неопределено Тогда
			КоличествоПоДокументуСУчетомВидаПродукцииОбъект.Колонки.Скоропортящаяся.Имя = "СкоропортящаясяПродукция";
		КонецЕсли;
		
		Попытка
			ЗначениеВРеквизитФормы(КоличествоПоДокументуСУчетомВидаПродукцииОбъект, "КоличествоПоДокументуСУчетомВидаПродукции");
		Исключение
			ПроверкаИПодборПродукцииИС.ПроверитьКолонкиИсточникаИПриемникаНаСовместимость(
				КоличествоПоДокументуСУчетомВидаПродукцииОбъект, РеквизитФормыВЗначение("КоличествоПоДокументуСУчетомВидаПродукции"));
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
	ПроверкаИПодборПродукцииИСМППереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ПодобраннаяМаркируемаяПродукция);
	ПроверкаИПодборПродукцииИСМППереопределяемый.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
	ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева, ВидМаркируемойПродукции);
	
	Если ДанныеПроверкиИПодбора.Свойство("ПараметрыПроверкиКодовМаркировки") Тогда
		ЗапрашиватьДанныеСервиса = ПараметрыПроверкиКодовМаркировки.ЗапрашиватьДанныеСервиса;
		КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева = ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева;
		ПараметрыПроверкиКодовМаркировки = ДанныеПроверкиИПодбора.ПараметрыПроверкиКодовМаркировки;
		Если Не ЗапрашиватьДанныеСервиса И ПараметрыПроверкиКодовМаркировки.ЗапрашиватьДанныеСервиса Тогда
			ПараметрыПроверкиКодовМаркировки.ЗапрашиватьДанныеСервиса = Ложь;
		КонецЕсли;
		Если ТипЗнч(ПараметрыПроверкиКодовМаркировки) = Тип("Структура")
			И Не ПараметрыПроверкиКодовМаркировки.Свойство("ОбратноеСканирование") Тогда
			ПараметрыПроверкиКодовМаркировки.Вставить("ОбратноеСканирование", Ложь);
		КонецЕсли;
		Если КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева Тогда
			ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева = Истина;
			ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегата = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("КоличествоНедопустимыхКодовМаркировки") Тогда
		КоличествоНедопустимыхКодовМаркировки = ДанныеПроверкиИПодбора.КоличествоНедопустимыхКодовМаркировки;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("УпаковкиДокумента") Тогда
		УпаковкиДокумента = ДанныеПроверкиИПодбора.УпаковкиДокумента;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДобавленныеУпаковки") Тогда
		ДобавленныеУпаковки = ДанныеПроверкиИПодбора.ДобавленныеУпаковки;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДоступныеДляПроверкиУпаковки") Тогда
		ДоступныеДляПроверкиУпаковки = ДанныеПроверкиИПодбора.ДоступныеДляПроверкиУпаковки;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("СледующийСтикерОтложено") Тогда
		СледующийСтикерОтложено = ДанныеПроверкиИПодбора.СледующийСтикерОтложено;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДетализацияСтруктурыХранения") Тогда
		ДетализацияСтруктурыХранения = ДанныеПроверкиИПодбора.ДетализацияСтруктурыХранения;
	ИначеЕсли ДанныеПроверкиИПодбора.Свойство("ДеревоМаркированнойПродукции") Тогда
		ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДерева(ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции);
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("РежимПроверки") Тогда
		РежимПроверки = ДанныеПроверкиИПодбора.РежимПроверки;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("СодержимоеУпаковокНедоступно") Тогда
		СодержимоеУпаковокНедоступно = ДанныеПроверкиИПодбора.СодержимоеУпаковокНедоступно;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("СохраненВыборПоМаркируемойПродукции") Тогда
		СохраненВыборПоМаркируемойПродукции = ДанныеПроверкиИПодбора.СохраненВыборПоМаркируемойПродукции;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДанныеВыбораПоМаркируемойПродукции") Тогда
		ДанныеВыбораПоМаркируемойПродукции = ДанныеПроверкиИПодбора.ДанныеВыбораПоМаркируемойПродукции;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ВидМаркируемойПродукции") Тогда
		ВидМаркируемойПродукции = ДанныеПроверкиИПодбора.ВидМаркируемойПродукции;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ШтрихкодТекущейПроверяемойУпаковки") Тогда
		ШтрихкодТекущейПроверяемойУпаковки = ДанныеПроверкиИПодбора.ШтрихкодТекущейПроверяемойУпаковки;
		Если ЗначениеЗаполнено(ШтрихкодТекущейПроверяемойУпаковки) Тогда
			ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(ШтрихкодТекущейПроверяемойУпаковки);
			Если ИдентификаторСтроки = Неопределено И СтрНачинаетсяС(ШтрихкодТекущейПроверяемойУпаковки, "(") Тогда
				ШтрихкодТекущейПроверяемойУпаковки = ШтрихкодированиеМОТП.НормализованныйШтрихкод(ШтрихкодТекущейПроверяемойУпаковки, ВидМаркируемойПродукции);
				ИдентификаторСтроки                = СоответствиеШтрихкодовСтрокДерева.Получить(ШтрихкодТекущейПроверяемойУпаковки);
			КонецЕсли;
			Если ИдентификаторСтроки <> Неопределено Тогда
				ИдентификаторТекущейПроверяемойУпаковки             = ИдентификаторСтроки;
				Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = ИдентификаторТекущейПроверяемойУпаковки;
				ДанныеТекущейСтроки = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
				ПроверкаИПодборПродукцииИСМПКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ДанныеТекущейСтроки);
			Иначе
				ИдентификаторТекущейПроверяемойУпаковки = -1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДанныеРанееСгенерированныхШтрихкодов") Тогда
		ДанныеРанееСгенерированныхШтрихкодов = ДанныеПроверкиИПодбора.ДанныеРанееСгенерированныхШтрихкодов;
		Если ДанныеРанееСгенерированныхШтрихкодов <> Неопределено Тогда
			АдресПредыдущихШтрихкодов = ПоместитьВоВременноеХранилище(ДанныеРанееСгенерированныхШтрихкодов, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("Контейнер") Тогда
		Контейнер = ДанныеПроверкиИПодбора.Контейнер;
	КонецЕсли;
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	Для ИндексСтроки = 0 По Мин(1, ЭлементыДерева.Количество() - 1) Цикл
		СтрокаДереваМаркированнойПродукции = ЭлементыДерева[ИндексСтроки];
		Если СтрокаДереваМаркированнойПродукции.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
			ИдентификаторСтрокиПотребительскиеУпаковкиБезУпаковки = СтрокаДереваМаркированнойПродукции.ПолучитьИдентификатор();
		ИначеЕсли СтрокаДереваМаркированнойПродукции.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки = СтрокаДереваМаркированнойПродукции.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки = -1
		И ЗначениеЗаполнено(ДетализацияСтруктурыХранения)
		И ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки")
		И ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими") Тогда
		Если ЭлементыДерева.Количество() = 0 Тогда
			НоваяСтрока = ЭлементыДерева.Вставить(0);
		ИначеЕсли ЭлементыДерева[0].ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
			НоваяСтрока = ЭлементыДерева.Вставить(1);
		Иначе
			НоваяСтрока = ЭлементыДерева.Вставить(0);
		КонецЕсли;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуГрупповыеУпаковкиБезКоробки(НоваяСтрока, ВидМаркируемойПродукции);
		ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;

	Если ПустаяСтрока(АдресСоответствиеШтрихкодыИдентификаторыСтрок) Тогда
		АдресСоответствиеШтрихкодыИдентификаторыСтрок = ПоместитьВоВременноеХранилище(
			СоответствиеШтрихкодовСтрокДерева,
			УникальныйИдентификатор);
	Иначе
		АдресСоответствиеШтрихкодыИдентификаторыСтрок = ПоместитьВоВременноеХранилище(
			СоответствиеШтрихкодовСтрокДерева,
			АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	КонецЕсли;
	
	Если Не ДанныеПроверкиИПодбора.Свойство("ЭтоВосстановлениеДетализации")
		Или (ДанныеПроверкиИПодбора.Свойство("ЭтоВосстановлениеДетализации") И Не ДанныеПроверкиИПодбора.ЭтоВосстановлениеДетализации) Тогда
		Если ДанныеПроверкиИПодбора.Свойство("ОшибкиПоУПД") Тогда
			ПроверкаИПодборПродукцииИСМП.ВывестиИнформациюОПроблемахУПД(ДанныеПроверкиИПодбора.ОшибкиПоУПД, ВидМаркируемойПродукции, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ОшибкиПроверкиСредствамиККТ") Тогда
		ЕстьОшибкиПроверкиККТ = (ДанныеПроверкиИПодбора.ОшибкиПроверкиСредствамиККТ.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИЗаполнитьКолонкиПриВосстановленииДереваМаркированнойПродукции(ДеревоМаркированнойПродукцииОбъект, СоответствиеПараметров)
	
	// Выполняем адаптацию старого формата
	
	ПереименоватьКолонкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект);
	ИзменитьТипУпаковкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект);
	ДобавитьИЗаполнитьКолонкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект, СоответствиеПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьОписаниеКолонок(Коллекция, Имя, Тип, Действие = Неопределено)
	Коллекция.Добавить(
		Новый Структура("ИмяКолонки, Тип, Действие", Имя, Тип, Действие));
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействиеПриВосстановленииКоллекции(КоллекцияОбъект, Действие, СоответствиеПараметров)
	
	Если Действие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Действие = "ЗаполнениеКолонкиВидУпаковки" Тогда
		
		ЗаполнениеКолонкиВидУпаковкиПриВосстановленииДерева(КоллекцияОбъект.Строки);
		
	ИначеЕсли Действие = "ЗаполнениеКолонкиНормализованныйШтрихкод" Тогда
		
		ЗаполнениеКолонкиНормализованныйШтрихкодПриВосстановленииДерева(КоллекцияОбъект.Строки);
		
	ИначеЕсли Действие = "ЗаполнениеКолонкиКоличество" Тогда
		
		ЗаполнениеКолонкиКоличествоПриВосстановленииДерева(КоллекцияОбъект.Строки);
	
	ИначеЕсли Действие = "ЗаполнениеКолонкиПлановоеКоличествоПотребительскихУпаковок" Тогда
		
		ЗаполнениеКолонкиПлановоеКоличествоПотребительскихУпаковокПриВосстановленииДерева(КоллекцияОбъект.Строки);
		
	ИначеЕсли Действие = "ЗаполнениеКолонкиКоличествоПотребительскихУпаковок" Тогда
		
		ЗаполнениеКолонкиКоличествоПотребительскихУпаковок(КоллекцияОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереименоватьКолонкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект)
	
	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить(
		Новый Структура("ИмяКолонкиСтарое, ИмяКолонкиНовое",
			"КоличествоПодчиненнойПродукции", "КоличествоПодчиненныхПотребительскихУпаковок"));
	ИменаКолонок.Добавить(
		Новый Структура("ИмяКолонкиСтарое, ИмяКолонкиНовое",
			"Скоропортящаяся", "СкоропортящаясяПродукция"));
	ИменаКолонок.Добавить(
		Новый Структура("ИмяКолонкиСтарое, ИмяКолонкиНовое",
			"ХэшСуммаНормализации", "ХешСуммаНормализации"));

	Для Каждого ДанныеКолонки Из ИменаКолонок Цикл
		Колонка = ДеревоМаркированнойПродукцииОбъект.Колонки.Найти(ДанныеКолонки.ИмяКолонкиСтарое);
		Если Колонка <> Неопределено Тогда
			Колонка.Имя = ДанныеКолонки.ИмяКолонкиНовое;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИЗаполнитьКолонкиПриВосстановленииПодобраннойМаркируемойПродукции(ПодобраннаяМаркируемаяПродукцияОбъект, СоответствиеПараметров)
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипДата   = Новый ОписаниеТипов("Дата");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Коллекция = Новый Массив;
	ДополнитьОписаниеКолонок(Коллекция, "ИдентификаторПроисхожденияВЕТИС",                       Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ДополнитьОписаниеКолонок(Коллекция, "ГоденДо",                                               ТипДата);
	ДополнитьОписаниеКолонок(Коллекция, "СкоропортящаясяПродукция",                              ТипБулево);
	ДополнитьОписаниеКолонок(Коллекция, "ПредставлениеGTIN",                                     ТипСтрока);
	ДополнитьОписаниеКолонок(Коллекция, "КодыGTIN",                                              Новый ОписаниеТипов("СписокЗначений"));
	ДополнитьОписаниеКолонок(Коллекция, "НоменклатураСопоставленаПоУПД",                         ТипБулево);
	ДополнитьОписаниеКолонок(Коллекция, "КоличествоПотребительскихУпаковок",                     ТипЧисло, "ЗаполнениеКолонкиКоличествоПотребительскихУпаковок");
	ДополнитьОписаниеКолонок(Коллекция, "КоличествоПотребительскихУпаковокВСтруктуреУпаковок",   ТипЧисло);
	ДополнитьОписаниеКолонок(Коллекция, "ПроизвольнаяЕдиницаУчета",                              ТипБулево);
	ДополнитьОписаниеКолонок(Коллекция, "ТребуетВзвешивания",                                    ТипБулево);
	ДополнитьОписаниеКолонок(Коллекция, "КоличествоПотребительскихУпаковокТребующихВзвешивания", ТипЧисло);
	ДополнитьОписаниеКолонок(Коллекция, "КоличествоПодобраноВзвешено",                           ТипЧисло);
	
	Для Каждого Элемент Из Коллекция Цикл
		
		Если ПодобраннаяМаркируемаяПродукцияОбъект.Колонки.Найти(Элемент.ИмяКолонки) = Неопределено Тогда
			ПодобраннаяМаркируемаяПродукцияОбъект.Колонки.Добавить(Элемент.ИмяКолонки, Элемент.Тип);
			ВыполнитьДействиеПриВосстановленииКоллекции(ПодобраннаяМаркируемаяПродукцияОбъект, Элемент.Действие, СоответствиеПараметров);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление колонок, добавленных по ошибке в релизах до 1.1.13
	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("ИННАгента");
	ИменаКолонок.Добавить("СпособВводаВОборот");
	
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		Колонка = ПодобраннаяМаркируемаяПродукцияОбъект.Колонки.Найти(ИмяКолонки);
		Если Колонка <> Неопределено Тогда
			ПодобраннаяМаркируемаяПродукцияОбъект.Колонки.Удалить(Колонка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИЗаполнитьКолонкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект, СоответствиеПараметров)
	
	// Адаптация старого формата дерева упаковок
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипДата   = Новый ОписаниеТипов("Дата");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Коллекция = Новый Массив;
	ДополнитьОписаниеКолонок(Коллекция, "ИдентификаторПроисхожденияВЕТИС",                  Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ДополнитьОписаниеКолонок(Коллекция, "ГоденДо",                                          ТипДата);
	ДополнитьОписаниеКолонок(Коллекция, "СкоропортящаясяПродукция",                         ТипБулево);
	ДополнитьОписаниеКолонок(Коллекция, "ПредставлениеСодержимогоДоСопоставления",          ТипСтрока);
	ДополнитьОписаниеКолонок(Коллекция, "ТипШтрихкода",                                     Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДополнитьОписаниеКолонок(Коллекция, "ХешСуммаНормализации",                             ТипСтрока);
	ДополнитьОписаниеКолонок(Коллекция, "НормализованныйШтрихкод",                          ТипСтрока,                                                "ЗаполнениеКолонкиНормализованныйШтрихкод");
	ДополнитьОписаниеКолонок(Коллекция, "Коэффициент",                                      ТипЧисло);
	ДополнитьОписаниеКолонок(Коллекция, "ТекстОшибкиПроверкиСредствамиККТ",                 ТипСтрока);
	ДополнитьОписаниеКолонок(Коллекция, "СостояниеТребованияПолногоКодаККТ",                ТипЧисло);
	ДополнитьОписаниеКолонок(Коллекция, "КоличествоПодчиненныхГрупповыхУпаковок",           ТипЧисло);
	ДополнитьОписаниеКолонок(Коллекция, "НеПересчитыватьКоличествоПотребительскихУпаковок", ТипБулево);
	ДополнитьОписаниеКолонок(Коллекция, "ВидУпаковки",                                      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"), "ЗаполнениеКолонкиВидУпаковки");
	ДополнитьОписаниеКолонок(Коллекция, "Количество",                                       ТипЧисло,                                                 "ЗаполнениеКолонкиКоличество");
	ДополнитьОписаниеКолонок(Коллекция, "ПроизвольнаяЕдиницаУчета",                         ТипБулево);
	ДополнитьОписаниеКолонок(Коллекция, "ТребуетВзвешивания",                               ТипБулево);
	ДополнитьОписаниеКолонок(Коллекция, "ИННАгента",                                        ТипСтрока);
	ДополнитьОписаниеКолонок(Коллекция, "СпособВводаВОборот",                               Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));
	ДополнитьОписаниеКолонок(Коллекция, "ЧастичноеВыбытие",                                 ТипБулево);
	ДополнитьОписаниеКолонок(Коллекция, "ЧастичноеВыбытиеВариантУчета",                     Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИСМП"));
	ДополнитьОписаниеКолонок(Коллекция, "ЧастичноеВыбытиеНоменклатура",                     Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДополнитьОписаниеКолонок(Коллекция, "ЧастичноеВыбытиеХарактеристика",                   Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДополнитьОписаниеКолонок(Коллекция, "ПлановоеКоличествоПотребительскихУпаковок",        ТипЧисло,                                                 "ЗаполнениеКолонкиПлановоеКоличествоПотребительскихУпаковок");
	
	Для Каждого Элемент Из Коллекция Цикл
		
		Если ДеревоМаркированнойПродукцииОбъект.Колонки.Найти(Элемент.ИмяКолонки) = Неопределено Тогда
			ДеревоМаркированнойПродукцииОбъект.Колонки.Добавить(Элемент.ИмяКолонки, Элемент.Тип);
			ВыполнитьДействиеПриВосстановленииКоллекции(ДеревоМаркированнойПродукцииОбъект, Элемент.Действие, СоответствиеПараметров);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеКолонкиВидУпаковкиПриВосстановленииДерева(КоллекцияСтрок)

	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл

		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
		Иначе
			СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
		КонецЕсли;

		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнениеКолонкиВидУпаковкиПриВосстановленииДерева(СтрокаДерева.Строки);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнениеКолонкиНормализованныйШтрихкодПриВосстановленииДерева(КоллекцияСтрок)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		СтрокаДерева.НормализованныйШтрихкод = ШтрихкодированиеМОТП.НормализованныйШтрихкод(СтрокаДерева.Штрихкод, ВидМаркируемойПродукции);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнениеКолонкиНормализованныйШтрихкодПриВосстановленииДерева(СтрокаДерева.Строки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеКолонкиКоличествоПриВосстановленииДерева(КоллекцияСтрок)
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Если ЗначениеЗаполнено(СтрокаКоллекции.ВидУпаковки) Тогда
			Если СтрокаКоллекции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаКоллекции.Количество = 1;
			Иначе
				СтрокаКоллекции.Количество = СтрокаКоллекции.КоличествоПодчиненныхПотребительскихУпаковок;
			КонецЕсли;
		КонецЕсли;
		ЗаполнениеКолонкиКоличествоПриВосстановленииДерева(СтрокаКоллекции.Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеКолонкиКоличествоПотребительскихУпаковок(КоллекцияСтрок)
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СтрокаКоллекции.КоличествоПотребительскихУпаковок = СтрокаКоллекции.КоличествоПодобрано;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеКолонкиПлановоеКоличествоПотребительскихУпаковокПриВосстановленииДерева(КоллекцияСтрок)
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СтрокаКоллекции.ПлановоеКоличествоПотребительскихУпаковок = СтрокаКоллекции.Коэффициент;
		ЗаполнениеКолонкиПлановоеКоличествоПотребительскихУпаковокПриВосстановленииДерева(СтрокаКоллекции.Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТипУпаковкиПриВосстановленииДерева(ДеревоМаркированнойПродукцииОбъект)

	Если ДеревоМаркированнойПродукцииОбъект.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ДеревоМаркированнойПродукцииОбъект.Строки[0].ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки Тогда
		ДеревоМаркированнойПродукцииОбъект.Строки[0].ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(КоллекцияСтрок, СоответствиеШтрихкодовСтрокДерева, ВидМаркируемойПродукции)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		Если СтрокаДерева.ТипУпаковки <> ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
			И СтрокаДерева.ТипУпаковки <> ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			
			СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаДерева.НормализованныйШтрихкод, СтрокаДерева.ПолучитьИдентификатор());
			
		КонецЕсли;
		
		ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева, ВидМаркируемойПродукции);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПросмотра()
	
	Если РедактированиеФормыНедоступно Тогда
		РежимПросмотра = Истина;
	ИначеЕсли НЕ ПроверкаНеПоДокументу Тогда
		МетаданныеДокумента = ПроверяемыйДокумент.Метаданные();
		РежимПросмотра = Не ПравоДоступа("Изменение", МетаданныеДокумента)
			Или ИнтеграцияИС.ДатыЗапретаИзмененияИзменениеЗапрещено(ПроверяемыйДокумент);
	КонецЕсли;
	
	Если РежимПросмотра Тогда
		ПроверятьНеобходимостьПеремаркировки = Ложь;
		РасчитыватьХешСуммуУпаковок          = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеДокумента(ЭтоВосстановлениеДетализации = Ложь)
	
	ИнициализироватьПараметрыСканирования();
	
	ДлительнаяОперация = НачатьЗагрузкуДанныхДокумента(ЭтоВосстановлениеДетализации);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузкаДанныхДокументаЗавершение", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение структуры упаковок.'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ДетализацияСтруктурыХранения) Тогда
			ДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения(РежимПодбораСуществующихУпаковок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДетализацияСтруктурыХранения) Тогда
			
			ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная");
			
		ИначеЕсли ТипЗнч(ЭтотОбъект.ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
			И (ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
				Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами")) Тогда
			
			ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная");
			
		КонецЕсли;
		
		Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
			ДобавленнаяСтрокаПотребительскиеУпаковкиБезУпаковки();
		КонецЕсли;
		
		Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки")
			И ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими") Тогда
			ДобавленнаяСтрокаГрупповыеУпаковкиБезКоробки();
		КонецЕсли;
		
		Результат = Новый Структура();
		Результат.Вставить("Статус",          "Выполнено");
		Результат.Вставить("АдресРезультата", "");
		
		ЗагрузкаДанныхДокументаЗавершение(Результат, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗагрузкуДанныхДокумента(ЭтоВосстановлениеДетализации)
	
	ВыполнитьДлительнуюОперацию = Истина;
	
	Если ПроверкаНеПоДокументу Тогда
		Если ЭтоАдресВременногоХранилища(АдресПроверяемыхДанных) Тогда
			ПроверяемыеДанные = ПолучитьИзВременногоХранилища(АдресПроверяемыхДанных);
		Иначе
			ПроверяемыеДанные = Неопределено;
		КонецЕсли;
		
		Если ПроверяемыеДанные = Неопределено Тогда
			ВыполнитьДлительнуюОперацию = Ложь;
		ИначеЕсли ПроверяемыеДанные.ТаблицаМаркируемойПродукции.Количество() = 0
			И ПроверяемыеДанные.ДеревоУпаковок.Строки.Количество() = 0
			И ПроверяемыеДанные.МаркированныеТовары.Количество() = 0 Тогда
			ВыполнитьДлительнуюОперацию = Ложь;
		КонецЕсли;
	Иначе
		ТаблицаМаркируемойПродукции = ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента(
			ПроверяемыйДокумент, ВидМаркируемойПродукции);
		
		Если ТаблицаМаркируемойПродукции.Количество() = 0 Тогда
			Если РежимПодбораСуществующихУпаковок Тогда
				ВыполнитьДлительнуюОперацию = Ложь;
			Иначе
				Если ШтрихкодыУпаковокДокументаСоответствуютВидуПродукции(ПроверяемыйДокумент, ПараметрыСканирования) Тогда
					ВыполнитьДлительнуюОперацию = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнитьДлительнуюОперацию Тогда
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ПроверкаНеПоДокументу",            ПроверкаНеПоДокументу);
		ПараметрыПроцедуры.Вставить("ПроверяемыйДокумент",              ПроверяемыйДокумент);
		ПараметрыПроцедуры.Вставить("НачальныйСтатусПроверки",          НачальныйСтатусПроверки);
		ПараметрыПроцедуры.Вставить("ДетализацияСтруктурыХранения",     ДетализацияСтруктурыХранения);
		ПараметрыПроцедуры.Вставить("РедактированиеФормыНедоступно",    РедактированиеФормыНедоступно);
		ПараметрыПроцедуры.Вставить("РежимПодбораСуществующихУпаковок", РежимПодбораСуществующихУпаковок);
		ПараметрыПроцедуры.Вставить("ПараметрыСканирования",            ПараметрыСканирования);
		ПараметрыПроцедуры.Вставить("ПроверкаЭлектронногоДокумента",    ПроверкаЭлектронногоДокумента);
		ПараметрыПроцедуры.Вставить("ПараметрыПроверкиКодовМаркировки", ПараметрыПроверкиКодовМаркировки);
		ПараметрыПроцедуры.Вставить("ВидМаркируемойПродукции",          ВидМаркируемойПродукции);
		ПараметрыПроцедуры.Вставить("ЭтоВосстановлениеДетализации",     ЭтоВосстановлениеДетализации);
		ПараметрыПроцедуры.Вставить(
			"КонтролироватьСканируемуюПродукциюПоДокументуОснованию",
			КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
		ПараметрыПроцедуры.Вставить(
			"ВозможностьЗагрузкиДанныхБезПодключенияМОТП",
			ПараметрыПроверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияМОТП);
		
		Если ПроверкаНеПоДокументу Тогда
			ПреобразоватьНесериализуемыеЗначения(ПроверяемыеДанные);
			ПараметрыПроцедуры.Вставить("ПроверяемыеДанные", ПроверяемыеДанные);
		КонецЕсли;
		
		Если НеобходимоОбращениеКСервисуИСМП(ПараметрыСканирования) Тогда
			ПараметрыПроцедуры.Вставить("ДанныеКлючаСессииИСМП",            ПараметрыСеанса.ДанныеКлючаСессииИСМП);
			ПараметрыПроцедуры.Вставить("ПараметрыЛогированияЗапросовИСМП", ПараметрыСеанса.ПараметрыЛогированияЗапросовИСМП);
		КонецЕсли;
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое заполнение данных проверки и подбора маркируемой продукции'");
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
		
		Возврат ДлительныеОперации.ВыполнитьВФоне(
			"Обработки.ПроверкаИПодборПродукцииИСМП.ЗагрузитьДанныеДокументаДлительнаяОперация",
			ПараметрыПроцедуры, ПараметрыВыполнения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьНесериализуемыеЗначения(ПроверяемыеДанные)
	
	ИменаКолонокДерева = "";
	
	Для Каждого КолонкаДерева Из ПроверяемыеДанные.ДеревоУпаковок.Колонки Цикл
		ИменаКолонокДерева = ИменаКолонокДерева + ?(ПустаяСтрока(ИменаКолонокДерева), "", ",") + КолонкаДерева.Имя;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ПроверяемыеДанные.МаркированныеТовары Цикл
		ЗначенияСтрокиДерева = Новый Структура(ИменаКолонокДерева);
		ЗаполнитьЗначенияСвойств(ЗначенияСтрокиДерева, СтрокаТаблицы.СтрокаДерева);
		СтрокаТаблицы.СтрокаДерева = ЗначенияСтрокиДерева;
		СтрокаТаблицы.УпаковкаВерхнегоУровня = Новый Структура(ИменаКолонокДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда  // отменено пользователем
		ЗакрытьФорму();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект), Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		РезультатЗагрузкиДанных = ЗагрузкаДанныхДокументаЗавершениеНаСервере(Результат.АдресРезультата);
		
		Если РезультатЗагрузкиДанных.Действие = "ЗапроситьПодключениеМОТП" Тогда
			
			ПараметрыПроверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияМОТП = Ложь;
			ТребуетсяОбновлениеКлючаСессии = Истина;
			ЗапроситьКлючСессииНачало(,, РезультатЗагрузкиДанных.ЭтоВосстановлениеДетализации);
			
		ИначеЕсли РезультатЗагрузкиДанных.Действие = "УточнитьКоэффициентыУпаковок" Тогда
			
			УточнениеКоэффициентовУпаковокБезПодключенияЗавершение = Новый ОписаниеОповещения(
				"УточнениеКоэффициентовУпаковокБезПодключенияЗавершение", ЭтотОбъект);
			
			ПараметрыФормыУточнения = Новый Структура();
			ПараметрыФормыУточнения.Вставить(
				"АдресУточнениеКоэффициентовУпаковок",
				ПоместитьВоВременноеХранилище(РезультатЗагрузкиДанных.ДанныеУточнения));
			
			ОткрытьФорму(
				"ОбщаяФорма.УточнениеКоэффициентовУпаковокИСМП", ПараметрыФормыУточнения, ЭтотОбъект,,,,
				УточнениеКоэффициентовУпаковокБезПодключенияЗавершение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			СоответствиеШтрихкодовСтрокДерева = СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
			
			ОпределитьЗначениеСвойстваЗапросКоличестваМерногоТовара();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеДоступностьюКомандыРазобратьУпаковку();
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеКоэффициентовУпаковокБезПодключенияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = "УточненыКоэффициентыУпаковокИСМП" Тогда

		ЗагрузитьДанныеДокумента();

	Иначе

		ЗакрытьФорму();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗагрузкаДанныхДокументаЗавершениеНаСервере(АдресДанныхДокумента)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Действие",                     "НеТребуется");
	ВозвращаемоеЗначение.Вставить("ДанныеУточнения",              Неопределено);
	ВозвращаемоеЗначение.Вставить("ЭтоВосстановлениеДетализации", Ложь);
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхДокумента) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокумента);
	Иначе
		ДанныеДокумента = Новый Структура();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		
		ЛогированиеЗапросовИСМП.ДописатьВТекущийЛогДанныеИзФоновогоЗадания(ДанныеДокумента);
		
		Если ДанныеДокумента.Свойство("ЭтоВосстановлениеДетализации") Тогда
			ВозвращаемоеЗначение.ЭтоВосстановлениеДетализации = (ДанныеДокумента.ЭтоВосстановлениеДетализации = Истина);
		КонецЕсли;
		
		ДанныеДокумента.Свойство("ДополнительноеДействиеЗагрузки", ВозвращаемоеЗначение.Действие);
		
		Если ВозвращаемоеЗначение.Действие = "УточнитьКоэффициентыУпаковок" Тогда
			
			ВозвращаемоеЗначение.ДанныеУточнения = ДанныеДокумента.УточнениеКоэффициентовУпаковок;
			
		ИначеЕсли Не ЗначениеЗаполнено(ВозвращаемоеЗначение.Действие) Тогда
			
			ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеДокумента);
			РассчитатьИтогиУстановитьВидимость();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура РассчитатьИтогиУстановитьВидимость()

	УправлениеЭлементамиФормыПриСоздании();
	ПересчитатьВсеИтогиФормыНаСервере();
	УправлениеДоступностьюКомандУпаковок(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОНачалеПроверкиЗаново(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВосстановлениеДетализации = Истина;
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("НовыйРежимДетализации") Тогда
		ДетализацияСтруктурыХранения = ДополнительныеПараметры.НовыйРежимДетализации
	КонецЕсли;
	
	ИнициализироватьДанныеФормы(Истина);
	
	ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП = Ложь;
	
	Если ТребуетсяОбновлениеКлючаСессии Тогда
		ЗапроситьКлючСессииНачало(,, ЭтоВосстановлениеДетализации);
	Иначе
		ЗагрузитьДанныеДокумента(ЭтоВосстановлениеДетализации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеФормы(РежимОчистки = Ложь)
	
	ИдентификаторТекущейПроверяемойУпаковки               = -1;
	ИдентификаторСтрокиПотребительскиеУпаковкиБезУпаковки = -1;
	ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки        = -1;
	СледующийСтикерОтложено                               = 1;

	РежимПроверки = Перечисления.ВариантыПроверкиПоступившейПродукцииИС.ПеремещатьТудаГдеДолжныБыть;
	
	Если РежимОчистки Тогда
		
		ДеревоМаркированнойПродукции.ПолучитьЭлементы().Очистить();
		ДобавленныеУпаковки.Очистить();
		ДоступныеДляПроверкиУпаковки.Очистить();
		УпаковкиДокумента.Очистить();
		ПодобраннаяМаркируемаяПродукция.Очистить();
		
	КонецЕсли;
	
	ЦветГиперссылки           = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля            = ЦветаСтиля.ЦветТекстаПоля;
	ЦветТекстаТребуетВнимания = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	
	ИспользоватьСерииНоменклатуры          = ИнтеграцияИС.СерииИспользуются();
	ИспользоватьХарактеристикиНоменклатуры = ИнтеграцияИС.ХарактеристикиИспользуются();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	ВидПродукцииРодительный = ПроверкаИПодборПродукцииИСМП.ВидПродукцииРодительный(ВидМаркируемойПродукции);
	
	Если РежимПросмотра Тогда
		
		Если РежимПодбораСуществующихУпаковок Тогда
			Заголовок = СтрШаблон(НСтр("ru = 'Результаты подбора %1'"), ВидПродукцииРодительный);
			Элементы.ПроверяемыйДокумент.Заголовок = НСтр("ru = 'В документ'");
		Иначе
			Заголовок = СтрШаблон(НСтр("ru = 'Результаты проверки %1'"), ВидПродукцииРодительный);
		КонецЕсли;
		
		Элементы.ФормаПеренестиВДокумент.Видимость                                  = Ложь;
		Элементы.ФормаСохранитьПромежуточныеРезультатыПроверки.Видимость            = Ложь;
		Элементы.ГруппаМаркируемаяКоманднаяПанельТребуетсяПеремаркировать.Видимость = Ложь;
		Элементы.ДеревоМаркированнойПродукцииНачатьПроверкуЗаново.Видимость         = Ложь;
		Элементы.ДеревоМаркированнойПродукцииУказатьШтрихкод.Видимость              = Ложь;
		Элементы.ДеревоМаркированнойПродукцииДобавитьПустуюКоробку.Видимость        = Ложь;
		Элементы.ДеревоМаркированнойПродукцииМаркироватьУпаковку.Видимость          = Ложь;
		Элементы.ДеревоМаркированнойПродукцииРазобратьУпаковку.Видимость            = Ложь;
		Элементы.ДеревоМаркированнойПродукцииЗагрузитьИзВнешнегоФайла.Видимость     = Ложь;
		Элементы.ПодобраннаяМаркируемаяПродукцияЗагрузитьИзВнешнегоФайла.Видимость  = Ложь;
		Элементы.ДеревоМаркированнойПродукцииЗаполнитьКодыМаркировки.Видимость      = Ложь;
		Элементы.СтраницаПодобраннаяПродукция.ТолькоПросмотр                        = Истина;
		Элементы.СтраницаМаркируемая.ТолькоПросмотр                                 = Истина;
		Элементы.ПодобраннаяМаркируемаяПродукцияУдалить.Видимость                   = Ложь;
		Элементы.ПодобраннаяМаркируемаяПродукцияПоискПоШтрихкоду.Видимость          = Ложь;
		Элементы.ГруппаПодобраннаяМаркируемаяПродукцияКоличествоИС.Видимость        = Ложь;
		Элементы.ФормаВключитьОтключитьОбратноеСканирование.Видимость               = Ложь;
		Элементы.ФормаПроверитьСостояниеКодовМаркировкиНемедленно.Видимость         = Ложь;
		
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		
		ЗаголовокКолонкиКоличествоПодобрано = НСтр("ru = 'Подобрано'");
		
	Иначе
		
		Если РежимПодбораСуществующихУпаковок Тогда
			Заголовок = СтрШаблон(НСтр("ru = 'Подбор и проверка %1'"), ВидПродукцииРодительный);
			Элементы.ФормаПеренестиВДокумент.Заголовок = НСтр("ru = 'Завершить подбор'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документ'");
			
			ЗаголовокКолонкиКоличествоПодобрано = НСтр("ru = 'Подобрано'");
			Элементы.ГруппаПодобраннаяМаркируемаяПродукцияКоличествоИС.Видимость = Ложь;
		Иначе
			
			// Меняем окончание в слове: поступившей(их)
			Если ИнтеграцияИСКлиентСервер.ПредставлениеВидаПродукцииВоМножественномЧисле(ВидМаркируемойПродукции) Тогда
				ШаблонЗаголовока = НСтр("ru = 'Проверка поступивших %1'");
			ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
					Или ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС
					Или ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
				ШаблонЗаголовока = НСтр("ru = 'Проверка поступившего %1'");
			Иначе
				ШаблонЗаголовока = НСтр("ru = 'Проверка поступившей %1'");
			КонецЕсли;
			Заголовок = СтрШаблон(ШаблонЗаголовока, ВидПродукцииРодительный);
			
			ЗаголовокКолонкиКоличествоПодобрано = НСтр("ru = 'Проверено'");
			Элементы.ГруппаПодобраннаяМаркируемаяПродукцияКоличествоИС.Видимость = Истина;
		КонецЕсли;
		
		Если ПроверкаНеПоДокументу Тогда
			Элементы.ДеревоМаркированнойПродукцииЗаполнитьКодыМаркировки.Видимость = Ложь;
			Элементы.ДеревоМаркированнойПродукцииНачатьПроверкуЗаново.Видимость    = Ложь;
			Элементы.ФормаСохранитьПромежуточныеРезультатыПроверки.Видимость       = Ложь;
		Иначе
			Элементы.ДеревоМаркированнойПродукцииЗаполнитьКодыМаркировки.Видимость = Истина;
		КонецЕсли;
		
		Элементы.ДеревоМаркированнойПродукцииДобавитьПустуюКоробку.Видимость = ДоступноСозданиеНовыхУпаковок;
		Элементы.ДеревоМаркированнойПродукцииНапечататьУпаковку.Видимость    = ДоступноСозданиеНовыхУпаковок;
		Элементы.ДеревоМаркированнойПродукцииМаркироватьУпаковку.Видимость   = ДоступноСозданиеНовыхУпаковок;
		
		Элементы.ФормаВключитьОтключитьОбратноеСканирование.Видимость        = Истина;
		
		Элементы.ФормаЗакрыть.Видимость = Ложь;
	
	КонецЕсли;
	
	Если Не ИспользоватьСерииНоменклатуры Тогда
		Элементы.ПодобраннаяМаркируемаяПродукцияГруппаСерия.Видимость        = Ложь;
		Элементы.ПодобраннаяМаркируемаяПродукцияСгенерироватьСерии.Видимость = Ложь;
	ИначеЕсли РежимПросмотра Или Не ИнтеграцияИСКлиентСервер.ИспользоватьСерииНоменклатуры(ПараметрыУказанияСерий) Тогда
		Элементы.ПодобраннаяМаркируемаяПродукцияСгенерироватьСерии.Видимость = Ложь;
	Иначе
		Элементы.ПодобраннаяМаркируемаяПродукцияСгенерироватьСерии.Видимость = ЕстьПравоДобавлениеСерий() И Не РежимПодбораСуществующихУпаковок;
	КонецЕсли;
	
	Если Не ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.ПодобраннаяМаркируемаяПродукцияХарактеристика.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ПроверяемыйДокумент.Видимость = Не ПроверкаНеПоДокументу;
	
	КартинкаТипУпаковки = ПроверкаИПодборПродукцииИС.КартинкаТипыУпаковкиПоВидуПродукции(ВидМаркируемойПродукции);
	
	Элементы.ДеревоМаркированнойПродукцииИндексКартинкиТипУпаковки.КартинкаЗначений = КартинкаТипУпаковки;
	Элементы.СтраницаПодобраннаяПродукция.Заголовок = ВидМаркируемойПродукции;

	УправлениеЭлементамиКонтроляСтатусаКодовМаркировки(ЭтотОбъект);
	
	Элементы.ПодобраннаяМаркируемаяПродукцияГоденДо.Видимость                         = Ложь;
	Элементы.ПодобраннаяМаркируемаяПродукцияИдентификаторПроисхожденияВЕТИС.Видимость = Ложь;

	ПараметрыСканированияСервер = Неопределено;
	Если ПараметрыСканирования <> Неопределено Тогда
		ПараметрыСканированияСервер = ПараметрыСканирования;
	КонецЕсли;

	Если Не ПроверкаНеПоДокументу И ПараметрыСканированияСервер = Неопределено Тогда
		ПараметрыСканированияСервер = ШтрихкодированиеИС.ПараметрыСканирования(ПроверяемыйДокумент, Неопределено, ВидМаркируемойПродукции);
	КонецЕсли;
	Если ПараметрыСканированияСервер <> Неопределено Тогда
		Элементы.ПодобраннаяМаркируемаяПродукцияГоденДо.Видимость                         = ПараметрыСканированияСервер.ЗаполнятьСрокГодности;
		Элементы.ПодобраннаяМаркируемаяПродукцияИдентификаторПроисхожденияВЕТИС.Видимость = ПараметрыСканированияСервер.ЗаполнятьДанныеВЕТИС;
	КонецЕсли;
	
	Элементы.ОчиститьСопоставление.Видимость = ЭтоДокументПриобретения;
	
	Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоПотребительскихУпаковок.Видимость          = ДопустимаПроизвольнаяЕдиницаУчета;
	Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоПотребительскихУпаковокВУпаковке.Видимость = ДопустимаПроизвольнаяЕдиницаУчета;
	Элементы.ФормаВключитьОтключитьЗапросКоличестваМерногоТовара.Видимость                       = ДопустимаПроизвольнаяЕдиницаУчета И ДопустимУчетМерныхТоваров;
	Элементы.ПодобраннаяМаркируемаяПродукцияУточнитьКоличествоПодобраннойПродукции.Видимость     = ДопустимаПроизвольнаяЕдиницаУчета И ДопустимУчетМерныхТоваров;
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		Элементы.ДеревоМаркированнойПродукцииУстановитьСтатусПроверкиОтсутствует.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукцииТекстОшибкиПроверкиСредствамиККТ.Видимость = ЕстьОшибкиПроверкиККТ;
	
	Если Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоПотребительскихУпаковокВУпаковке.Видимость Тогда
		Элементы.ГруппаПодобраннаяМаркируемаяПродукцияКоличествоИС.ОтображатьВШапке = Истина;
		Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоИС.Заголовок = НСтр("ru = 'Количество'");
	Иначе
		Элементы.ГруппаПодобраннаяМаркируемаяПродукцияКоличествоИС.ОтображатьВШапке = Ложь;
		Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоИС.Заголовок = НСтр("ru = 'В упаковках'");
	КонецЕсли;
	
	Если Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоПотребительскихУпаковок.Видимость Тогда
		Элементы.ГруппаПодобраннаяМаркируемаяПродукцияКоличествоПодобрано.ОтображатьВШапке = Истина;
		Элементы.ГруппаПодобраннаяМаркируемаяПродукцияКоличествоПодобрано.Заголовок        = ЗаголовокКолонкиКоличествоПодобрано;
		Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоПодобрано.Заголовок              = НСтр("ru = 'Количество'");
	Иначе
		Элементы.ГруппаПодобраннаяМаркируемаяПродукцияКоличествоПодобрано.ОтображатьВШапке = Ложь;
		Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоПодобрано.Заголовок              = ЗаголовокКолонкиКоличествоПодобрано;
	КонецЕсли;
	
	Если Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоПотребительскихУпаковокВУпаковке.Видимость
		Или Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоПотребительскихУпаковок.Видимость Тогда
		Элементы.ГруппаПодобраннаяМаркируемаяПродукцияКоличество.ОтображатьВШапке = Истина;
		Элементы.ПодобраннаяМаркируемаяПродукцияКоличество.Заголовок = НСтр("ru = 'Количество'");
	Иначе
		Элементы.ГруппаПодобраннаяМаркируемаяПродукцияКоличество.ОтображатьВШапке = Ложь;
		Элементы.ПодобраннаяМаркируемаяПродукцияКоличество.Заголовок = НСтр("ru = 'В документе'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиКонтроляСтатусаКодовМаркировки(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ФормаПеренестиВДокумент.Доступность        = НЕ Форма.ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП;
	Элементы.ГруппаОтсутствуетПодключениеИСМП.Видимость = Форма.ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП;
	
	ВидимостьКомандОтключениеКонтроля = (Не Форма.РежимПросмотра И Не Форма.ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП);
	Элементы.ФормаВключитьОтключитьКонтрольСтатусовКодовМаркировки.Видимость = ВидимостьКомандОтключениеКонтроля;
	Элементы.ФормаВключитьОтключитьКонтрольПоВладельцу.Видимость             = ВидимостьКомандОтключениеКонтроля;
	
	Если Элементы.ФормаВключитьОтключитьКонтрольСтатусовКодовМаркировки.Видимость Тогда
		УстановитьЗаголовокКомандыПроверкиСтатусовКодовМаркировки(Форма);
	КонецЕсли;
	Если Элементы.ФормаВключитьОтключитьКонтрольПоВладельцу.Видимость Тогда
		УстановитьЗаголовокКомандыПроверкиПоВладельцу(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКомандыПроверкиСтатусовКодовМаркировки(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ФормаВключитьОтключитьКонтрольСтатусовКодовМаркировки.Пометка = Форма.ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКомандыПроверкиПоВладельцу(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ФормаВключитьОтключитьКонтрольПоВладельцу.Пометка   = Форма.ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКомандыОбратноеСканирование(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ФормаВключитьОтключитьОбратноеСканирование.Пометка = Форма.ПараметрыПроверкиКодовМаркировки.ОбратноеСканирование;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюКомандыРазобратьУпаковку()
	
	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		ДоступностьКомандыРазборкиУпаковки = Ложь;
	Иначе
		ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ДоступностьКомандыРазборкиУпаковки = Ложь;
		Иначе
			ДоступностьКомандыРазборкиУпаковки = ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки);
		КонецЕсли;
	КонецЕсли;

	Элементы.ДеревоМаркированнойПродукцииРазобратьУпаковку.Доступность = ДоступностьКомандыРазборкиУпаковки;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСменеДетализацииСПоследующимВосстановлениемИзТСД(РезультатВопроса, ДополнительныеПараметры)Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодыИСтатусыПроверки = Новый Массив;
	ЗаполнитьШтрихкодыИСтатусыПроверки(ДеревоМаркированнойПродукции, ШтрихкодыИСтатусыПроверки);
	
	ИдентификаторыУпаковокВерхнегоУровня = Новый Массив;
	Для Каждого СтрокаШтрихкода Из ДополнительныеПараметры.ШтрихкодыВерхнегоУровня Цикл
		ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(СтрокаШтрихкода.НормализованныйШтрихкод);
		Если ИдентификаторСтроки <> Неопределено Тогда
			ИдентификаторыУпаковокВерхнегоУровня.Добавить(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыДляТСД = Новый Структура;
	ПараметрыДляТСД.Вставить("ИдентификаторыУпаковокВерхнегоУровня", ИдентификаторыУпаковокВерхнегоУровня);
	ПараметрыДляТСД.Вставить("НовыйРежимДетализации",                ДополнительныеПараметры.НовыйРежимДетализации);
	ПараметрыДляТСД.Вставить("ШтрихкодыИСтатусыПроверки",            ШтрихкодыИСтатусыПроверки);
	
	ПараметрыОбработкиТСД = НовыеПараметрыОбработкиТСД();
	ПараметрыОбработкиТСД.Состояние                            = "ВосстановлениеВложенностиУпаковок";
	ПараметрыОбработкиТСД.ЭтоВосстановлениеВложенностиУпаковок = Истина;
	ПараметрыОбработкиТСД.ДополнительныеПараметры              = ПараметрыДляТСД;
	
	ДеревоМаркированнойПродукцииПередУдалением(
		Новый Структура("ВыделенныеСтроки", ИдентификаторыУпаковокВерхнегоУровня),
		Неопределено, Истина);
	УдалитьУпаковкиВерхнегоУровня(ДеревоМаркированнойПродукции.ПолучитьЭлементы());
	ДеревоМаркированнойПродукцииПослеУдаления(Неопределено);
	
	ИзменитьРежимДетализации(ДополнительныеПараметры.НовыйРежимДетализации);
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ШтрихкодыВерхнегоУровня, ПараметрыОбработкиТСД);
	
КонецПроцедуры

#КонецОбласти

#Область РезультатыПроверки

&НаКлиенте
Функция ТребуетсяВопросПередЗавершениемПроверки()
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяВопросПоНепровереннымОтложенным",   Ложь);
	Результат.Вставить("СоздаватьАктОРасхождениях",                  Ложь);
	Результат.Вставить("ОтказПриНаличииНедопустимыхКодовМаркировки", Ложь);
	Результат.Вставить("ТребуетсяЗаполнениеКодов", Ложь);
	
	ТребуетсяВопросПоНепровереннымОтложенным = Ложь;
	
	ЕстьРасхождения            = ПроверкаИПодборПродукцииИСМПКлиент.ЕстьРасхожденияПоРезультатамПроверкиИПодбора(ПодобраннаяМаркируемаяПродукция);
	ИтогиПроверкиПриЗавершении = ИтогиПроверкиПриЗавершении();
	
	ТребуетсяВопросПоНепровереннымОтложенным = ИтогиПроверкиПриЗавершении.КоличествоНепроверенных > 0
	                                           Или ИтогиПроверкиПриЗавершении.КоличествоОтложенных > 0;
	
	ЕстьРасхожденияПоКодам = ИтогиПроверкиПриЗавершении.КоличествоОтсутствует > 0
	                         Или ИтогиПроверкиПриЗавершении.КоличествоНеЧислилось > 0;
	
	Если ИтогиПроверкиПриЗавершении.ЕстьНепроверенныеСтрокиКоличествоНеУказано
			Или ИтогиПроверкиПриЗавершении.ЕстьПроверенныеСтрокиКоличествоНеУказано Тогда
		Результат.ТребуетсяЗаполнениеКодов = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПроверяемыйДокумент)
		И АктыОРасхожденияхПослеПриемкиИспользуются
		И ПроверкаЭлектронногоДокумента
		И (ЕстьРасхождения Или ЕстьРасхожденияПоКодам) Тогда
		
		Результат.СоздаватьАктОРасхождениях = Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
		И КоличествоНедопустимыхКодовМаркировки > 0 Тогда
		
		Результат.ОтказПриНаличииНедопустимыхКодовМаркировки = Истина;
		
	ИначеЕсли ТребуетсяВопросПоНепровереннымОтложенным Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("КоличествоНепроверенных", ИтогиПроверкиПриЗавершении.КоличествоНепроверенных);
		ПараметрыОткрытияФормы.Вставить("КоличествоОтложенных",    ИтогиПроверкиПриЗавершении.КоличествоОтложенных);
		ПараметрыОткрытияФормы.Вставить("КоличествоВсего",         ИтогиПроверкиПриЗавершении.КоличествоВсего);
		ПараметрыОткрытияФормы.Вставить("КоличествоОтсутствует",   ИтогиПроверкиПриЗавершении.КоличествоОтсутствует);
		
		ОписаниеОповещенияПослеОтветаНаВопрос = Новый ОписаниеОповещения("ОтветНаВопросПриЗавершенииПроверки", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ВопросПередСохранениемРезультатовПроверки",
		             ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор,,,
		             ОписаниеОповещенияПослеОтветаНаВопрос, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Результат.ТребуетсяВопросПоНепровереннымОтложенным = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИтогиПроверкиПриЗавершении()
	
	КоличествоНепроверенных = 0;
	КоличествоОтложенных    = 0;
	КоличествоВсего         = 0;
	КоличествоОтсутствует   = 0;
	КоличествоНеЧислилось   = 0;
	
	ТипПрочиеЗоныПересчета = Тип("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП");

	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		КоличествоНепроверенных = КоличествоНепроверенных + СтрокаДерева.КоличествоПодчиненныхНеПроверялось;
		КоличествоОтложенных    = КоличествоОтложенных + СтрокаДерева.КоличествоПодчиненныхОтложено;
		КоличествоВсего         = КоличествоВсего + СтрокаДерева.КоличествоПодчиненныхВсего;
		КоличествоОтсутствует   = КоличествоОтсутствует + СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		КоличествоНеЧислилось   = КоличествоНеЧислилось + СтрокаДерева.КоличествоПодчиненныхНеЧислилось;
		
		Если ТипЗнч(СтрокаДерева.ТипУпаковки) = ТипПрочиеЗоныПересчета Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.НедопустимыйКодМаркировки
		 Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			КоличествоОтсутствует = КоличествоОтсутствует + 1;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
			
			КоличествоНепроверенных = КоличествоНепроверенных + 1;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
			
			КоличествоОтложенных = КоличествоОтложенных + 1;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			КоличествоНеЧислилось = КоличествоНеЧислилось + 1;
			
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + 1;
		
	КонецЦикла;
	
	ЕстьПроверенныеСтрокиКоличествоНеУказано = Ложь;
	ЕстьНепроверенныеСтрокиКоличествоНеУказано = Ложь;
	Если ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара Тогда

		Для Каждого КлючИЗначение Из СоответствиеШтрихкодовСтрокДерева Цикл

			СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, КлючИЗначение.Значение);

			Если ТипЗнч(СтрокаДерева.ТипУпаковки) = ТипПрочиеЗоныПересчета Тогда
				Продолжить;
			КонецЕсли;

			Если СтрокаДерева.ПолучитьЭлементы().Количество() = 0
				И СтрокаДерева.ПроизвольнаяЕдиницаУчета
				И Не ЗначениеЗаполнено(СтрокаДерева.Количество) Тогда
				Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
					ЕстьПроверенныеСтрокиКоличествоНеУказано = Истина;
				ИначеЕсли СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
					ЕстьНепроверенныеСтрокиКоличествоНеУказано = Истина;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	Итоги = Новый Структура;
	Итоги.Вставить("КоличествоНепроверенных",КоличествоНепроверенных);
	Итоги.Вставить("КоличествоОтложенных",   КоличествоОтложенных);
	Итоги.Вставить("КоличествоВсего",        КоличествоВсего);
	Итоги.Вставить("КоличествоОтсутствует",  КоличествоОтсутствует);
	Итоги.Вставить("КоличествоНеЧислилось",  КоличествоНеЧислилось);
	Итоги.Вставить("ЕстьПроверенныеСтрокиКоличествоНеУказано",   ЕстьПроверенныеСтрокиКоличествоНеУказано);
	Итоги.Вставить("ЕстьНепроверенныеСтрокиКоличествоНеУказано", ЕстьНепроверенныеСтрокиКоличествоНеУказано);

	Возврат Итоги;
	
КонецФункции

&НаКлиенте
Процедура ОтветНаВопросПриЗавершенииПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СоздаватьАктОРасхождениях = Ложь;
		
		Если ЗначениеЗаполнено(Результат.КакУчитыватьНеПроверенныеОтложенные) Тогда
			
			РезультатИзмененияСтатуса = РезультатИзменияСтатусаПроверкиПриЗавершении(Результат.КакУчитыватьНеПроверенныеОтложенные);
			Если РезультатИзмененияСтатуса.ЕстьОшибки Тогда
				ПоказатьПредупреждение(, РезультатИзмененияСтатуса.ТекстОшибки);
				Возврат;
			КонецЕсли;
			
			ВНаличии = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
			Если ПроверкаЭлектронногоДокумента
				И АктыОРасхожденияхПослеПриемкиИспользуются
				И ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПроверяемыйДокумент) Тогда
				
				Если Результат.КакУчитыватьНеПроверенныеОтложенные = ВНаличии Тогда
					ДействияПередЗаверешениемПроверки = ТребуетсяВопросПередЗавершениемПроверки();
					СоздаватьАктОРасхождениях = ДействияПередЗаверешениемПроверки.СоздаватьАктОРасхождениях;
				Иначе
					СоздаватьАктОРасхождениях = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяОбновлениеКлючаСессии
			И СоздаватьАктОРасхождениях Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СоздаватьАктОРасхожденияхПриЗакрытии", СоздаватьАктОРасхождениях);
			ДополнительныеПараметры.Вставить("ПовторныйЗапрос", Ложь);

			ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения("ЗапроситьКлючСессииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
				ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация),
				ОповещениеПриЗапросеКлючаСессии);
			
		Иначе
			ЗавершитьПроверку(СоздаватьАктОРасхождениях);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверку(СоздаватьАктОРасхождениях)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор.ЗавершитьПроверку");
	
	ПараметрыОкончанияПроверки = Новый Структура;
	ПараметрыОкончанияПроверки.Вставить("СоздаватьАктОРасхождениях", Ложь);
	
	Если СоздаватьАктОРасхождениях <> Неопределено Тогда
		
		ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях = СоздаватьАктОРасхождениях;
		
	КонецЕсли;
	
	Если Не ТаблицаПодобраннойПродукцииЗаполненаКорректно() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСерииНоменклатуры И Не РезультатГенерацииСерийПриЗавершенииПроверки() Тогда
		ТекстСообщения = НСтр("ru = 'Для завершения проверки требуется указание серий.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Элементы.СтраницыПродукция.ТекущаяСтраница = Элементы.СтраницаПодобраннаяПродукция;
		Возврат;
	КонецЕсли;
	
	Если КоличествоНедопустимыхКодовМаркировки > 0 Тогда
		ИсключитьНедопустимыеУпаковкиИзПодобраннойПродукции(ДеревоМаркированнойПродукции.ПолучитьЭлементы());
		
		Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
			ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Сохранение результатов проверки.'");
	
	ДлительнаяОперация = НачатьЗавершениеПроверки(ПараметрыОкончанияПроверки);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеПроверкиОкончание", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Функция РезультатИзменияСтатусаПроверкиПриЗавершении(ВыбранныйСтатусПроверки)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьОшибки",  Ложь);
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	
	Если ВыбранныйСтатусПроверки <> Неопределено Тогда
		
		Для Каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
			ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаПроверяемого, ВыбранныйСтатусПроверки, Ложь);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		
		ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
		
	КонецЕсли;
	
	ПересчитатьВсеИтогиФормыНаКлиенте();
	
	Если НеобходимаПеремаркировка() Тогда
		
		СтруктураВозврата.ЕстьОшибки = Истина;
		СтруктураВозврата.ТекстОшибки = НСтр("ru = 'Есть упаковки, которые необходимо разобрать'");
		
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаДерева, НовыйСтатусПроверки, УстанавливатьБезусловно)
	
	Если УстанавливатьБезусловно Тогда
		
		ИзменитьСтатус = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(НовыйСтатусПроверки)
		И СтрокаДерева.ТипУпаковки <> ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
		И СтрокаДерева.ТипУпаковки <> ТипУпаковкиГрупповыеУпаковкиБезКоробки()
		И (СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась")
			Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена")) Тогда
		
		ИзменитьСтатус = Истина;
		
	Иначе
		
		ИзменитьСтатус = Ложь;
		
	КонецЕсли;
	
	Если ИзменитьСтатус И НЕ СтрокаДерева.НедопустимыйКодМаркировки Тогда
		
		Если НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева, НовыйСтатусПроверки) Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, СтрокаДерева, -1);
		ИначеЕсли НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева, НовыйСтатусПроверки) Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, СтрокаДерева, 1);
		КонецЕсли;

		СтрокаДерева.СтатусПроверки = НовыйСтатусПроверки;
		
	КонецЕсли;
		
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстанавливатьБезусловно =  ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
			И СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
		
		ИзменитьСтатусПроверкиВСтрокеДерева(ПодчиненнаяСтрока, НовыйСтатусПроверки, УстанавливатьБезусловно);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьНедопустимыеУпаковкиИзПодобраннойПродукции(СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.НедопустимыйКодМаркировки
			И НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева,
			ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")) Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, СтрокаДерева, -1);
		КонецЕсли;
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ИсключитьНедопустимыеУпаковкиИзПодобраннойПродукции(ПодчиненныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТаблицаПодобраннойПродукцииЗаполненаКорректно()
	
	ЗаполнениеКорректно = Истина;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(
			ВладелецФормы, Неопределено, ВидМаркируемойПродукции);
	КонецЕсли;
	
	Для Каждого СтрокаПодобраннойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если СтрокаПодобраннойПродукции.КоличествоПодобрано <> 0 Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура)
				И Не ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой Тогда
				
				ЗаполнениеКорректно = Ложь;
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Требуется указание номенклатуры в строке %1 таблицы маркируемой продукции'"), 
				                           СтрокаПодобраннойПродукции.НомерСтроки);
				ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодобраннаяМаркируемаяПродукция",
				                                                                  СтрокаПодобраннойПродукции.НомерСтроки,
				                                                                  "Номенклатура");
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, ПутьКТабЧасти);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗаполнениеКорректно;
	
КонецФункции

&НаКлиенте
Функция РезультатГенерацииСерийПриЗавершенииПроверки()
	
	Если ИнтеграцияИСКлиентСервер.ИспользоватьСерииНоменклатуры(ПараметрыУказанияСерий)
		И ПроверкаИПодборПродукцииИСМПКлиентСервер.ТребуетсяУказаниеСерий(ПодобраннаяМаркируемаяПродукция) Тогда
		
		Если ЕстьПравоДобавлениеСерий() Тогда
			
			СгенерироватьСерииПодобраннойМаркируемойПродукции();
			
			Возврат Не ПроверкаИПодборПродукцииИСМПКлиентСервер.ТребуетсяУказаниеСерий(ПодобраннаяМаркируемаяПродукция);
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СгенерироватьСерииНаСервере(ДанныеДляГенерацииСерий, ВидМаркируемойПродукции)
	
	ИнтеграцияИСМП.СгенерироватьСерии(ДанныеДляГенерацииСерий, ВидМаркируемойПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПроверкиОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
	
		Возврат;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		Если ПроверкаНеПоДокументу Тогда
			ВыполняетсяЗакрытие = Истина;
			Закрыть(Результат.АдресРезультата);
		Иначе
			Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
				РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
				Если ТипЗнч(РезультатПроверки) = Тип("Структура")
					И РезультатПроверки.Свойство("СозданныйАктОРасхождениях")
					И ЗначениеЗаполнено(РезультатПроверки.СозданныйАктОРасхождениях) Тогда
					ПроверкаИПодборПродукцииИСМПКлиентПереопределяемый.ОткрытьФормуАктаОРасхождениях(
						РезультатПроверки.СозданныйАктОРасхождениях, ВладелецФормы);
				КонецЕсли;
			КонецЕсли;
			ЗакрытьФорму();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗавершениеПроверки(ПараметрыОкончанияПроверки)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СоздаватьАктОРасхождениях",    ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях);
	ПараметрыПроцедуры.Вставить("ПроверяемыйДокумент",          ПроверяемыйДокумент);
	ПараметрыПроцедуры.Вставить("ПроверкаНеПоДокументу",        ПроверкаНеПоДокументу);
	ПараметрыПроцедуры.Вставить("ДанныеПроверкиИПодбора",       Неопределено);
	ПараметрыПроцедуры.Вставить("ВидМаркируемойПродукции",      ВидМаркируемойПродукции);
	ПараметрыПроцедуры.Вставить("ДеревоМаркированнойПродукции",    РеквизитФормыВЗначение("ДеревоМаркированнойПродукции"));
	ПараметрыПроцедуры.Вставить("ПодобраннаяМаркируемаяПродукция", РеквизитФормыВЗначение("ПодобраннаяМаркируемаяПродукция"));
	ПараметрыПроцедуры.Вставить("ПараметрыСканирования",        ПараметрыСканирования);
	ПараметрыПроцедуры.Вставить(
			"ВозможностьЗагрузкиДанныхБезПодключенияМОТП",
			ПараметрыПроверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияМОТП);
			
	Если ПриЗавершенииСохранятьРезультатыПроверки Тогда
		ДанныеРезультатовПроверки = ПроверкаИПодборПродукцииИСМП.ДанныеРезультатовПроверки(ЭтотОбъект);
		ПараметрыПроцедуры.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеРезультатовПроверки);
	КонецЕсли;
	
	Если ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях Тогда
		ПараметрыПроцедуры.Вставить("ДанныеКлючаСессииИСМП", ПараметрыСеанса.ДанныеКлючаСессииИСМП);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Перенос результатов проверки и подбора в документ.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ПроверкаИПодборПродукцииИСМП.ЗафиксироватьРезультатПроверкиИПодбора",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция РезультатыПроверкиУспешноСохранены()
	
	ТекстОшибки = "";
	
	Если ПроверкаИПодборПродукцииИСМП.РезультатыПроверкиУспешноСохранены(
		ЭтотОбъект, ВидМаркируемойПродукции, ТекстОшибки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СканированиеШтрихкодаИОбработка

&НаКлиенте
Функция ИдентификаторСтрокиДереваПоШтрихкоду(Штрихкод, Нормализовать = Ложь)

	Если Нормализовать Тогда
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = (ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
		ШтрихкодДляПоиска = РазборКодаМаркировкиИССлужебныйКлиент.НормализованныйШтрихкод(
			Штрихкод, ВидМаркируемойПродукции,, ПользовательскиеПараметрыРазбораКодаМаркировки);
	Иначе
		ШтрихкодДляПоиска = Штрихкод;
	КонецЕсли;
	
	НайденныйИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(ШтрихкодДляПоиска);
	
	Если НайденныйИдентификаторСтроки = Неопределено Тогда
		
		НайденныйИдентификаторСтроки = -1;
		
	КонецЕсли;
	
	Возврат НайденныйИдентификаторСтроки;

КонецФункции

&НаКлиенте
Процедура ИнициализироватьПараметрыСканирования(НачальнаяИнициализация = Ложь)
	
	Если ПараметрыСканирования = Неопределено Или НачальнаяИнициализация Тогда
		ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(
			ВладелецФормы, Неопределено, ВидМаркируемойПродукции);
	КонецЕсли;
	
	Если ДопустимыйСпособВводаВОборот.Количество() = 1 Тогда
		ПараметрыСканирования.ДопустимыйСпособВводаВОборот = ДопустимыйСпособВводаВОборот.Получить(0).Значение;
	ИначеЕсли ДопустимыйСпособВводаВОборот.Количество() > 1 Тогда
		ПараметрыСканирования.ДопустимыйСпособВводаВОборот = ДопустимыйСпособВводаВОборот.ВыгрузитьЗначения();
	КонецЕсли;
	
	ПараметрыСканирования.Склад = Склад;
	ПараметрыСканирования.ПараметрыУказанияСерий = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыУказанияСерий, Ложь);
	Если ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара <> Неопределено Тогда
		ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара = ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара;
	КонецЕсли;
	
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидМаркируемойПродукции) = Неопределено Тогда
		Доступность = Ложь;
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Внимание! Работа с формой невозможна. Учет вида продукции < %1 > отключен'"),
			ВидМаркируемойПродукции);
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукции);
	
	ДанныеВыбора = ДанныеВыбораПоМаркируемойПродукции;
	Если ИдентификаторТекущейПроверяемойУпаковки <> -1 Тогда
		ТекущаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
		Если ТекущаяУпаковка <> Неопределено
			И ТекущаяУпаковка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
			Если ДанныеВыбора = Неопределено Тогда
				ДанныеВыбора = Новый Структура("Номенклатура,Характеристика,Серия,GTIN,СоставКодаМаркировки");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДанныеВыбора, ТекущаяУпаковка, "Номенклатура,Характеристика,Серия,GTIN");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки                          = Ложь;
	ПараметрыСканирования.КэшМаркируемойПродукции                            = КэшМаркируемойПродукции;
	ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции                 = ДанныеВыбора;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции     = Истина;
	ПараметрыСканирования.ПроверятьДублиКодовМаркировки                      = "Элементы";
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                                = Истина;
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева      = Истина;
	ПараметрыСканирования.ДоступнаПечатьЭтикеток                             = ДоступнаПечатьЭтикеток;
	ПараметрыСканирования.КонтрольУникальностиКодовМаркировки                = Ложь;
	ПараметрыСканирования.СсылкаНаОбъект                                     = ПроверяемыйДокумент;
	
	ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок = ПараметрыСканирования.ПоддерживаютсяОперацииАгрегации;
	ПараметрыСканирования.ДетализацияСтруктурыХранения                       = ДетализацияСтруктурыХранения;
	ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки                 = Ложь;
	
	Если ДоступнаПечатьЭтикеток Тогда
		Если ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ВидМаркируемойПродукции) Тогда
			ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию = ПредопределенноеЗначение(
				"Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован");
		Иначе
			ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию = ПредопределенноеЗначение(
				"Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен");
		КонецЕсли;
	КонецЕсли;
	
	КонтрольСоставаУпаковок = Истина;
	
	Если Не РежимПодбораСуществующихУпаковок Тогда
		
		КонтрольСоставаУпаковок = Ложь;
		
		Если ПараметрыПроверкиКодовМаркировки.ВозможностьЗагрузкиДанныхБезПодключенияМОТП = Истина Тогда
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП             = Ложь;
			ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП = Ложь;
		Иначе
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП             = Истина;
			ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП = Истина;
		КонецЕсли;
		
	ИначеЕсли ПроверкаНеПоДокументу Тогда
		Если ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоЧекККМ(ВладелецФормы)
			Или ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоЧекККМВозврат(ВладелецФормы) Тогда
			КонтрольСоставаУпаковок = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		КонтрольСоставаУпаковок = Ложь;
	КонецЕсли;
	
	ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП = КонтрольСоставаУпаковок
		И ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП;
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		
		ПараметрыСканирования.КонтролироватьСтандартнуюВложенность = Ложь;
		ПараметрыСканирования.КонтролироватьСоставАгрегатов        = Истина;
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(Неопределено);
		
	КонецЕсли;
	
	Если РедактированиеФормыНедоступно
		Или ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП Тогда
		
		ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП             = Ложь;
		ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП = Ложь;
		ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП                         = Ложь;
		ПараметрыСканирования.Владелец                                             = Неопределено;
		
		ПараметрыСканирования.КонтролироватьСтандартнуюВложенность        = Ложь;
		ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП    = Ложь;
		ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП = Ложь;
		
	Иначе
		Если ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки Тогда
			ПараметрыСканирования.Владелец                                    = ПараметрыПроверкиКодовМаркировки.Владелец;
			ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП = Истина;
			ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП    = Истина;
		Иначе
			ПараметрыСканирования.Владелец = Неопределено;
			ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП = Ложь;
		КонецЕсли;
		Если ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки Тогда
			ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП = Истина;
			ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП = Истина;
		Иначе
			ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП = Ложь;
		КонецЕсли;
		Если ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП
			Или ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки Тогда
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоступноСозданиеНовыхУпаковок И ДанныеШтрихкода.Штрихкод = ИнтеграцияИСМПКлиентСерверПовтИсп.СлужебныйШтрихкодПечатиУпаковки() Тогда
		НапечататьШтрихкодТекущейУпаковки();
		Возврат;
	КонецЕсли;
	
	ИнициализироватьПараметрыСканирования();
	
	ШтрихкодированиеИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	
	ШтрихкодированиеИСМПКлиент.ОбработатьСобытиеПотоковойПечати(ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканирования);
	
	ПримечаниеКРазборуШтрихкода                    = Неопределено;
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = (ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(
		ДанныеШтрихкода.Штрихкод, ВидМаркируемойПродукции, ПримечаниеКРазборуШтрихкода,, ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	ДанныеРазбораИРезультат = Новый Структура;
	ДанныеРазбораИРезультат.Вставить("ДанныеРазбора",               ДанныеРазбора);
	ДанныеРазбораИРезультат.Вставить("ПримечаниеКРазборуШтрихкода", ПримечаниеКРазборуШтрихкода);
	
	КешДанныхРазбора = Новый Соответствие;
	КешДанныхРазбора.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеРазбораИРезультат);
	
	НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиент.НормализованныйШтрихкод(
		ДанныеШтрихкода.Штрихкод, ВидМаркируемойПродукции, КешДанныхРазбора, ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ЗакрытиеУпаковкиПриЗавершенииПроверки") Тогда
		ОбработатьДанныеШтрихкода = Ложь;
	Иначе
		
		СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиДереваПоШтрихкоду(НормализованныйШтрихкод));
		Если СтрокаДерева <> Неопределено Тогда
			
			ЕстьВложенныеСтроки = Ложь;
			Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
				ЕстьВложенныеСтроки = СтрокаДерева.ПолучитьЭлементы().Количество() > 0;
			КонецЕсли;
			
			Если ДопустимаПроизвольнаяЕдиницаУчета
				И ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара
				И ЗначениеЗаполнено(СтрокаДерева.ВидУпаковки)
				И СтрокаДерева.ПроизвольнаяЕдиницаУчета
				И СтрокаДерева.Количество = 0
				И Не ЕстьВложенныеСтроки Тогда
				ОбработатьДанныеШтрихкода = Истина;
			Иначе
				ОбработатьДанныеШтрихкода = Ложь;
			КонецЕсли;
			
		ИначеЕсли ДанныеШтрихкода.Свойство("ШтрихкодУпаковки") Тогда
			ОбработатьДанныеШтрихкода = Ложь;
		Иначе
			ОбработатьДанныеШтрихкода = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = Неопределено;
	
	Если ОбработатьДанныеШтрихкода Тогда
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.РазрешитьСопоставлениеНоменклатурыДляДокументаПриобретения(
			ЭтотОбъект, ПараметрыСканирования);
		
		ШтрихкодированиеИСКлиент.ОбработатьДанныеШтрихкода(
			"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканирования, ДанныеРазбора, ДополнительныеПараметры);
		
	Иначе
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ДополнитьДанныеШтрихкодаПолнымКодомМаркировки(ДанныеШтрихкода, ДанныеРазбора, ВидМаркируемойПродукции, ПараметрыСканирования);
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ДанныеШтрихкода.Штрихкод = НормализованныйШтрихкод;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ДанныеШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуПриОбратномСканировании(УдаляемыйЭлемент);
	
	Если Не ПараметрыПроверкиКодовМаркировки.ОбратноеСканирование
		Или УдаляемыйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ДеревоМаркированнойПродукцииПередУдалением(Элементы.ДеревоМаркированнойПродукции, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РодительУдаляемогоЭлемента = УдаляемыйЭлемент.ПолучитьРодителя();
	
	Представление = УдаляемыйЭлемент.Представление;
	
	Если РодительУдаляемогоЭлемента = Неопределено Тогда
		
		ДеревоМаркированнойПродукции.ПолучитьЭлементы().Удалить(УдаляемыйЭлемент);
		
	Иначе
		
		РодительУдаляемогоЭлемента.ПолучитьЭлементы().Удалить(УдаляемыйЭлемент);
		
	КонецЕсли;
	
	ДеревоМаркированнойПродукцииПослеУдаления(Элементы.ДеревоМаркированнойПродукции);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Удалено из списка:'"),, Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(ДанныеШтрихкода, ТекущаяСтрокаДерева, ИдентификаторНайденнойСтроки)

	НайденнаяСтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторНайденнойСтроки);
	
	Если НайденнаяСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипУпаковкиГдеНашли = Неопределено;

	Если ТребуетсяОткрытиеФормыВыбораДействия(НайденнаяСтрокаДерева, ТекущаяСтрокаДерева, ТипУпаковкиГдеНашли) Тогда
		
		ОткрытьФормуВыбораДействия(ДанныеШтрихкода, НайденнаяСтрокаДерева, ТипУпаковкиГдеНашли);
		
	Иначе
		
		ЗаполнитьСтрокуДереваПоДаннымШтрихкода(ЭтотОбъект, НайденнаяСтрокаДерева, ДанныеШтрихкода, ТаблицаИзмененийПодобраннойПродукции, КэшированныеЗначения);
		
		Если ТребуетсяОткрытиеФормыУточненияДанных(НайденнаяСтрокаДерева) Тогда
			ОткрытьФормуУточненияДанных(ИдентификаторНайденнойСтроки, ТекущаяСтрокаДерева);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСтрокуДереваПоДаннымВыбора(НайденнаяСтрокаДерева, ДанныеВыбораПоМаркируемойПродукции);
		ОбработатьНайденныйВДеревеШтрихкод(НайденнаяСтрокаДерева, ТекущаяСтрокаДерева);
		ШтрихкодированиеИСМПКлиент.СохранениеПолногоКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования);
		ОбработатьОчереднойШтрихкод();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ТребуетсяОткрытиеФормыУточненияДанных(НайденнаяСтрокаДерева)
	
	Если НайденнаяСтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		Возврат Ложь;
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(НайденнаяСтрокаДерева, ПараметрыСканирования, ВидМаркируемойПродукции, Истина)
		И ЗначениеЗаполнено(НайденнаяСтрокаДерева.Номенклатура) Тогда
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрокаДерева.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(НайденнаяСтрокаДерева.GTIN) Тогда
		Возврат Ложь;
	ИначеЕсли ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат ДанныеВыбораПоМаркируемойПродукции.GTIN <> НайденнаяСтрокаДерева.GTIN;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяОткрытиеФормыВыбораДействия(НайденнаяСтрокаДерева, ТекущаяСтрокаДерева, ТипУпаковкиГдеНашли)
	
	РодительНайденнойСтроки = НайденнаяСтрокаДерева.ПолучитьРодителя();
	ТребуетсяОткрытиеФормыВыбораДействия = Истина;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НайденнаяСтрокаДерева.ТипУпаковки) Тогда
		
		Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
			Возврат ТребуетсяОткрытиеФормыВыбораДействия;
		КонецЕсли;

		ЭтоГрупповаяУпаковка = (НайденнаяСтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));

		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Истина, ЭтоГрупповаяУпаковка);
		
		Если НайденнаяСтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
			
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		ИначеЕсли РодительНайденнойСтроки = СтрокаПроверяемойУпаковки Тогда
			
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими")
			И СтрокаПроверяемойУпаковки <> Неопределено Тогда
			
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;

		КонецЕсли;
		
	Иначе
		
		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Ложь, Ложь);
		ИдентификаторУпаковки     = ИдентификаторТекущейПроверяемойУпаковки;
		
		Если (РодительНайденнойСтроки = Неопределено
				Или РодительНайденнойСтроки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
				Или РодительНайденнойСтроки.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки())
			И ИдентификаторУпаковки = -1 Тогда
			
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;

		ИначеЕсли РодительНайденнойСтроки.ПолучитьИдентификатор() = ИдентификаторУпаковки Тогда
			
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;

		Иначе
			
			Если (РодительНайденнойСтроки.НеСодержитсяВДанныхДокумента
					Или РодительНайденнойСтроки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
					Или РодительНайденнойСтроки.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки())
				И (СтрокаПроверяемойУпаковки.НеСодержитсяВДанныхДокумента
					Или СтрокаПроверяемойУпаковки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
					Или СтрокаПроверяемойУпаковки.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки()) Тогда
				
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Если СтрокаПроверяемойУпаковки <> Неопределено Тогда
		ТипУпаковкиГдеНашли = СтрокаПроверяемойУпаковки.ТипУпаковки;
	КонецЕсли;
	
	Возврат ТребуетсяОткрытиеФормыВыбораДействия;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНайденныйВДеревеШтрихкод(НайденнаяСтрокаДерева, ТекущаяСтрокаДерева)
	
	РодительНайденнойСтроки = НайденнаяСтрокаДерева.ПолучитьРодителя();

	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НайденнаяСтрокаДерева.ТипУпаковки) Тогда
		
		Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
			Возврат;
		КонецЕсли;
		
		ЭтоГрупповаяУпаковка = (НайденнаяСтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));

		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Истина, ЭтоГрупповаяУпаковка);
		
		Если НайденнаяСтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
			
			СнятьПризнакПроверкиУпаковки(ЭтотОбъект, НайденнаяСтрокаДерева,, СоответствиеШтрихкодовСтрокДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			
		ИначеЕсли РодительНайденнойСтроки = СтрокаПроверяемойУпаковки Тогда
			
			Если НайденнаяСтрокаДерева = ТекущаяСтрокаДерева Тогда
				
				ИсходныйСтатусПроверки = НайденнаяСтрокаДерева.СтатусПроверки;
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				Если ИсходныйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
					Или ИсходныйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась")
					Или НайденнаяСтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
					ИзменитьСостояниеПроверкиУпаковки(ЭтотОбъект, НайденнаяСтрокаДерева, СоответствиеШтрихкодовСтрокДерева);
				КонецЕсли;
				
			Иначе
				
				Если РодительНайденнойСтроки = Неопределено Тогда
					СнятьПризнакПроверкиУпаковки(ЭтотОбъект, ТекущаяСтрокаДерева,, СоответствиеШтрихкодовСтрокДерева);
				КонецЕсли;
				
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
				
			КонецЕсли;
			
		ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
			И СтрокаПроверяемойУпаковки <> Неопределено Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СнятьПризнакПроверкиУпаковки(ЭтотОбъект, СтрокаПроверяемойУпаковки,, СоответствиеШтрихкодовСтрокДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			
		ИначеЕсли ЗагрузкаДанныхТСД <> Неопределено Тогда
			
			ПереместитьУпаковкуВДругуюУпаковку(НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки);
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			
		КонецЕсли;
		
		УдалитьСтрокуПриОбратномСканировании(НайденнаяСтрокаДерева);
		
	Иначе
		
		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Ложь, Ложь);
		ИдентификаторУпаковки = ИдентификаторТекущейПроверяемойУпаковки;
		
		Если (РодительНайденнойСтроки = Неопределено 
			Или РодительНайденнойСтроки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки())
			И ИдентификаторУпаковки = -1 Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			УдалитьСтрокуПриОбратномСканировании(НайденнаяСтрокаДерева);
			
		ИначеЕсли РодительНайденнойСтроки.ПолучитьИдентификатор() = ИдентификаторУпаковки Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			УдалитьСтрокуПриОбратномСканировании(НайденнаяСтрокаДерева);
			
		ИначеЕсли ЗагрузкаДанныхТСД <> Неопределено Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			ПереместитьПродукцию(НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки);
			
		Иначе
			
			Если (РодительНайденнойСтроки.НеСодержитсяВДанныхДокумента
				Или РодительНайденнойСтроки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки())
				И (СтрокаПроверяемойУпаковки.НеСодержитсяВДанныхДокумента
				Или СтрокаПроверяемойУпаковки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()) Тогда
				
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				ПереместитьПродукцию(НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораДействия(ДанныеШтрихкода, НайденнаяСтрокаДерева, ТипУпаковкиГдеНашли)
	
	ИдентификаторНайденнойСтроки = НайденнаяСтрокаДерева.ПолучитьИдентификатор();
	РодительНайденнойСтроки      = НайденнаяСтрокаДерева.ПолучитьРодителя();
	ЭтоГрупповаяУпаковка         = (НайденнаяСтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));

	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Штрихкод",                         ДанныеШтрихкода.Штрихкод);
	ПараметрыОткрытияФормы.Вставить("ШтрихкодНайден",                   Истина);
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",            НайденнаяСтрокаДерева.ТипУпаковки);
	ПараметрыОткрытияФормы.Вставить("СледующийСтикерОтложено",          СледующийСтикерОтложено);
	ПараметрыОткрытияФормы.Вставить("НомерСтикераОтложено",             НайденнаяСтрокаДерева.НомерСтикераОтложено);
	ПараметрыОткрытияФормы.Вставить("РежимПроверки",                    РежимПроверки);
	ПараметрыОткрытияФормы.Вставить("РежимПодбораСуществующихУпаковок", РежимПодбораСуществующихУпаковок);
	ПараметрыОткрытияФормы.Вставить("СтатусПроверки",                   НайденнаяСтрокаДерева.СтатусПроверки);
	ПараметрыОткрытияФормы.Вставить("НеСодержитсяВДанныхДокумента",     НайденнаяСтрокаДерева.НеСодержитсяВДанныхДокумента);
	ПараметрыОткрытияФормы.Вставить("ШтрихкодУпаковкиГдеДолжноБыть",    ?(РодительНайденнойСтроки = Неопределено, "", РодительНайденнойСтроки.Штрихкод));
	
	ПараметрыОткрытияФормы.Вставить("ДобавленныеУпаковки",              ДобавленныеУпаковки);
	ПараметрыОткрытияФормы.Вставить("ДоступныеДляПроверкиУпаковки",     ДоступныеДляПроверкиУпаковки);
	ПараметрыОткрытияФормы.Вставить("УпаковкиДокумента",                УпаковкиДокумента);
	
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиГдеДолжноНаходиться",   ?(РодительНайденнойСтроки = Неопределено, Неопределено, РодительНайденнойСтроки.ТипУпаковки));
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",            НайденнаяСтрокаДерева.ТипУпаковки);
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиГдеНашли",              ТипУпаковкиГдеНашли);
	ПараметрыОткрытияФормы.Вставить("ДетализацияСтруктурыХранения",     ДетализацияСтруктурыХранения);
	ПараметрыОткрытияФормы.Вставить("ВидМаркируемойПродукции",          ВидМаркируемойПродукции);
	ПараметрыОткрытияФормы.Вставить("ЭтоГрупповаяУпаковка",             ЭтоГрупповаяУпаковка);

	ДополнительныеПараметры = Новый  Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторНайденнойСтроки", ИдентификаторНайденнойСтроки);
	ДополнительныеПараметры.Вставить("ДанныеШтрихкода",              ДанныеШтрихкода);
	
	ОповещениеПослеВыбораДействия = Новый ОписаниеОповещения("ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ВыборДействияПоРезультатамВводаШтрихкода", ПараметрыОткрытияФормы,
		ЭтотОбъект, УникальныйИдентификатор,,, ОповещениеПослеВыбораДействия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНеНайденныйВДеревеШтрихКод(ДанныеШтрихкода, ТекущаяСтрокаДерева)
	
	ЭтоШтрихкодЛогистическойУпаковки   = (ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	ЭтоШтрихкодПотребительскойУпаковки = (ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	
	Если РежимПодбораСуществующихУпаковок И ЭтоШтрихкодПотребительскойУпаковки Тогда
		
		Если Не ПродукцияСоответствуетДокументуОснованию(ЭтотОбъект, ДанныеШтрихкода) Тогда
			
			ДанныеШтрихкода.Вставить("ТекстОшибки", ПроверкаИПодборПродукцииИСМПКлиентСервер.ТекстОшибкиНеСоответствуютДокументуОснованию(ДанныеШтрихкода));
			
			ОповещениеЗакрытияФормы = Новый ОписаниеОповещения("ИнформацияОНевозможностиДобавленияОтсканированногоПослеЗакрытия", ЭтотОбъект);
			
			ШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода, ОповещениеЗакрытияФормы);
			
			Возврат;
			
		ИначеЕсли Не (ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
			Или ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой) Тогда
			
			ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр("ru = 'Не удалось идентифицировать маркируемую продукцию'"));
			
			ШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода);
			
			Возврат;
		
		ИначеЕсли ПараметрыПроверкиКодовМаркировки.ОбратноеСканирование Тогда
			
			ДанныеШтрихкода.Вставить(
				"ТекстОшибки",
				НСтр("ru = 'Включен режим ""Удалять коды при сканировании"".
				           |Отсканированный код маркировки не найден в структуре упаковок.'"));
			ДанныеШтрихкода.Вставить("ОбратноеСканирование", Истина);
			
			ШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода);
			
			Возврат;
			
		Иначе
			
			ДобавитьНовуюМаркируемуюПродукциюВДерево(ДанныеШтрихкода);
			ОбработатьОчереднойШтрихкод();
			Возврат;
			
		КонецЕсли;
		
	Иначе
	
		НайденнаяНоменклатура = ДанныеШтрихкода.Номенклатура;
		НайденнаяХарактеристика = ДанныеШтрихкода.Характеристика;
		НайденнаяСерия = ДанныеШтрихкода.Серия;
		
		Если ЭтоШтрихкодПотребительскойУпаковки И ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда
			
			Если РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены")
				Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
				
				ДобавитьНовуюМаркируемуюПродукциюВДерево(ДанныеШтрихкода);
				ОбработатьОчереднойШтрихкод();
				Возврат;
				
			Иначе
				
				СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Ложь, Ложь);
				Если СтрокаПроверяемойУпаковки.НеСодержитсяВДанныхДокумента
					Или СтрокаПроверяемойУпаковки.СодержимоеНедоступно
					Или СтрокаПроверяемойУпаковки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
					
					ДобавитьНовуюМаркируемуюПродукциюВДерево(ДанныеШтрихкода);
					ОбработатьОчереднойШтрихкод();
					Возврат;
					
				КонецЕсли;
			
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;

	Если ДанныеШтрихкода.МаркируемаяПродукция = Истина
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.ТипШтрихкода) Тогда
		
		ИнициализироватьПараметрыСканирования();

		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыВводаКодаМаркировки();
		ПараметрыОткрытияФормы.Номенклатура          = ДанныеШтрихкода.Номенклатура;
		ПараметрыОткрытияФормы.Характеристика        = ДанныеШтрихкода.Характеристика;
		ПараметрыОткрытияФормы.ВидПродукции          = ВидМаркируемойПродукции;
		ПараметрыОткрытияФормы.МаркируемаяПродукция  = ДанныеШтрихкода.МаркируемаяПродукция;
		ПараметрыОткрытияФормы.ПараметрыСканирования = ПараметрыСканирования;
		ПараметрыОткрытияФормы.ДанныеШтрихкода       = ДанныеШтрихкода;
		ПараметрыОткрытияФормы.Документ              = ПроверяемыйДокумент;
		ПараметрыОткрытияФормы.РазрешатьДобавлениеБезКодаМарки = Ложь;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуСчитыванияКодаМаркировки(
			ЭтотОбъект, ПараметрыОткрытияФормы);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоШтрихкодЛогистическойУпаковки Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеШтрихкода", ДанныеШтрихкода);

		ОповещениеПослеВыбораДействия = Новый ОписаниеОповещения("ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении", ЭтотОбъект, ДополнительныеПараметры);
		
		Если СохраненВыборПоМаркируемойПродукции
			И ДанныеВыбораПоМаркируемойПродукции <> Неопределено
			И ДанныеВыбораПоМаркируемойПродукции.ДобавлятьНовуюУпаковку
			Или ДанныеШтрихкода.Свойство("ЭтоГенерацияШтрихкодовУпаковок") Тогда
			
			СтруктураДействия = Новый Структура;
			СтруктураДействия.Вставить("ВидДействия",    "ДобавитьНовуюУпаковку");
			СтруктураДействия.Вставить("Штрихкод",       ДанныеШтрихкода.Штрихкод);
			СтруктураДействия.Вставить("ЗапомнитьВыбор", Ложь);
			
			Если Не ДанныеШтрихкода.Свойство("ЭтоГенерацияШтрихкодовУпаковок") Тогда
				ИдентификаторТекущейПроверяемойУпаковки = -1;
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(ОповещениеПослеВыбораДействия, СтруктураДействия);
			
		Иначе
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Штрихкод",                             ДанныеШтрихкода.Штрихкод);
			ПараметрыОткрытияФормы.Вставить("ШтрихкодНайден",                       Ложь);
			ПараметрыОткрытияФормы.Вставить("НайденнаяНоменклатура",                НайденнаяНоменклатура);
			ПараметрыОткрытияФормы.Вставить("НайденнаяХарактеристика",              НайденнаяХарактеристика);
			ПараметрыОткрытияФормы.Вставить("НайденнаяСерия",                       НайденнаяСерия);
			ПараметрыОткрытияФормы.Вставить("РежимПроверки",                        РежимПроверки);
			ПараметрыОткрытияФормы.Вставить("ЭтоШтрихкодПродукции",                 ЭтоШтрихкодПотребительскойУпаковки);
			ПараметрыОткрытияФормы.Вставить("УпаковкаНеСодержитсяВДанныхДокумента", УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева, ДетализацияСтруктурыХранения));
			ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",                ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
			ПараметрыОткрытияФормы.Вставить("РежимПодбораСуществующихУпаковок",     РежимПодбораСуществующихУпаковок);
			ПараметрыОткрытияФормы.Вставить("ВидМаркируемойПродукции",              ВидМаркируемойПродукции);
			
			ОткрытьФорму("Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ВыборДействияПоРезультатамВводаШтрихкода", ПараметрыОткрытияФормы, 
				ЭтотОбъект, УникальныйИдентификатор, , ,ОповещениеПослеВыбораДействия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеШтрихкода.Свойство("ПримечаниеКРазборуШтрихкода")
			И ДанныеШтрихкода.ПримечаниеКРазборуШтрихкода <> Неопределено
			И ЗначениеЗаполнено(ДанныеШтрихкода.ПримечаниеКРазборуШтрихкода.ТекстОшибки) Тогда
			ТекстОшибки = ДанныеШтрихкода.ПримечаниеКРазборуШтрихкода.ТекстОшибки;
		Иначе
			ТекстОшибки = НСтр("ru = 'Недопустимый формат кода маркировки'");
		КонецЕсли;
		ДанныеШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
		
		ОповещениеЗакрытияФормы = Новый ОписаниеОповещения("ИнформацияОНевозможностиДобавленияОтсканированногоПослеЗакрытия", ЭтотОбъект);
		
		ШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода, ОповещениеЗакрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШтрихкодВДеревеМаркированнойПродукции(ДанныеШтрихкода)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкоду(ДанныеШтрихкода.Штрихкод);
		Если ИдентификаторНайденнойСтроки = -1 Тогда
			ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкоду(
				ШтрихкодыУпаковокКлиентСервер.КодМаркировкиБезСкобок(ДанныеШтрихкода.Штрихкод));
		КонецЕсли;
	Иначе
		ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкоду(ДанныеШтрихкода.НормализованныйШтрихкод);
	КонецЕсли;
	
	Если ИдентификаторНайденнойСтроки <> -1 Тогда
		
		ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(ДанныеШтрихкода,
		                                                 ТекущаяСтрокаДерева,
		                                                 ИдентификаторНайденнойСтроки);
		
	ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок)
		И (РежимПодбораСуществующихУпаковок ИЛИ НЕ ПроверкаЭлектронногоДокумента)
		И (ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
			Или ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка")) Тогда

		ИнициализироватьПараметрыСканирования();
		
		Результат = РезультатДобавленияСуществующейУпаковкиВДеревоМаркированнойПродукции(
			ДанныеШтрихкода, СоответствиеШтрихкодовСтрокДерева, Неопределено, ПараметрыСканирования, КэшированныеЗначения);
		
		Если Результат.ЕстьОшибки Тогда
			
			ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
			ПараметрыОткрытияФормы.АдресДереваУпаковок       = Результат.АдресХранилищаДереваУпаковки;
			ПараметрыОткрытияФормы.ТекстОшибки               = Результат.ТекстОшибки;
			ПараметрыОткрытияФормы.ПредставлениеНоменклатуры = ДанныеШтрихкода.ПредставлениеНоменклатуры;
			ПараметрыОткрытияФормы.Штрихкод                  = ДанныеШтрихкода.Штрихкод;
			ПараметрыОткрытияФормы.ОбратноеСканирование      = ПараметрыПроверкиКодовМаркировки.ОбратноеСканирование;
			ПараметрыОткрытияФормы.ВидПродукции              = ДанныеШтрихкода.ВидПродукции;
			
			ШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
			
		ИначеЕсли Результат.ТребуетсяСбросКонтекстаПроверки Тогда
			
			ИзменитьКонтекстПроверки(Неопределено);
			
		ИначеЕсли Результат.ТребуетсяУдалениеНаКлиенте <> Неопределено Тогда
			
			Отказ = Ложь;
			ДеревоМаркированнойПродукцииПередУдалением(Результат.ТребуетсяУдалениеНаКлиенте, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			Для Каждого ИдентификаторНайденнойСтроки Из Результат.ТребуетсяУдалениеНаКлиенте Цикл
				
				УдаляемыйЭлемент = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторНайденнойСтроки);
				Если УдаляемыйЭлемент = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				РодительУдаляемогоЭлемента = УдаляемыйЭлемент.ПолучитьРодителя();
				
				Если РодительУдаляемогоЭлемента = Неопределено Тогда
					
					ДеревоМаркированнойПродукции.ПолучитьЭлементы().Удалить(УдаляемыйЭлемент);
					
				Иначе
					
					РодительУдаляемогоЭлемента.ПолучитьЭлементы().Удалить(УдаляемыйЭлемент);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Удалено из списка:'"),, ДанныеШтрихкода.Штрихкод);
			
			ДеревоМаркированнойПродукцииПослеУдаления(Элементы.ДеревоМаркированнойПродукции);
			
		КонецЕсли;
		
		ОбработатьОчереднойШтрихкод();
		
	Иначе
		
		ОбработатьНеНайденныйВДеревеШтрихКод(ДанныеШтрихкода, ТекущаяСтрокаДерева);
		
	КонецЕсли;
	
	Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ЭтоГенерацияШтрихкодовУпаковок") Тогда
		ДанныеШтрихкода.Вставить("ЭтоГенерацияШтрихкодовУпаковок", Истина);
	КонецЕсли;
	
	// Если штрихкод упаковки найден в соответствии СоответствиеШтрихкодовСтрокДерева, то детальные
	// данные по штрихкоду не собираются. В этом случае в ДанныеШтрихкода есть 2 поля: Штрихкод и Количество.
	Если ДанныеШтрихкода.Свойство("ШтрихкодУпаковки") Тогда
		
		ОбработатьОтсканированныйШтрихкод(ДанныеШтрихкода);
		
	Иначе
		
		Штрихкод = ДанныеШтрихкода.Штрихкод;
		
		ТекущаяСтрокаДерева = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
		
		ИдентификаторСтрокиДерева = ИдентификаторСтрокиДереваПоШтрихкоду(Штрихкод, Истина);
		
		ИнициализироватьПараметрыСканирования();

		ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(
			ДанныеШтрихкода, ТекущаяСтрокаДерева, ИдентификаторСтрокиДерева);
		
		ПроверитьСоответствиеОтборуПриИзмененииСтроки(ТекущаяСтрокаДерева);
		
	КонецЕсли;
	
	Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУточненияДанных(ИдентификаторСтрокиДерева, ТекущаяСтрокаДерева, ПроизвольноеРедактированиеРеквизитов = Ложь)
	
	ИнициализироватьПараметрыСканирования();
	
	НайденнаяСтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиДерева);
	
	ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы, НайденнаяСтрокаДерева);
	ПараметрыОткрытияФормы.Операция               = "ОткрытьФормуУточненияДанных";
	ПараметрыОткрытияФормы.КодМаркировки          = НайденнаяСтрокаДерева.Штрихкод;
	ПараметрыОткрытияФормы.ПараметрыСканирования  = ПараметрыСканирования;
	ПараметрыОткрытияФормы.ПроизвольноеРедактированиеРеквизитов   = ПроизвольноеРедактированиеРеквизитов;
	ПараметрыОткрытияФормы.ВидПродукции                           = ВидМаркируемойПродукции;
	
	ПараметрыОткрытияФормы.Номенклатура = НайденнаяСтрокаДерева.Номенклатура;
	ПараметрыОткрытияФормы.Характеристика = НайденнаяСтрокаДерева.Характеристика;
	ПараметрыОткрытияФормы.Серия = НайденнаяСтрокаДерева.Серия;
	ПараметрыОткрытияФормы.ГоденДо = НайденнаяСтрокаДерева.ГоденДо;
	ПараметрыОткрытияФормы.ИдентификаторыПроисхожденияВЕТИС = НайденнаяСтрокаДерева.ИдентификаторПроисхожденияВЕТИС;
	ПараметрыОткрытияФормы.СкоропортящаясяПродукция = НайденнаяСтрокаДерева.СкоропортящаясяПродукция;
	ПараметрыОткрытияФормы.Количество = НайденнаяСтрокаДерева.Количество;
	
	ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыОткрытияФормы);
	ДополнительныеПараметры = Новый Структура("ИдентификаторСтрокиДерева, ТекущаяСтрокаДерева, ПроизвольноеРедактированиеРеквизитов",
		ИдентификаторСтрокиДерева, ТекущаяСтрокаДерева, ПроизвольноеРедактированиеРеквизитов);
	
	ОповещениеПоЗавершениюУточненияДанных = Новый ОписаниеОповещения("УточнитьДанныеУПользователяЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ШтрихкодированиеИСКлиент.УточнитьДанныеУПользователя(ЭтотОбъект, ПараметрыОткрытияФормы, ОповещениеПоЗавершениюУточненияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьДанныеУПользователяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ДополнительныеПараметры.ИдентификаторСтрокиДерева);
	ТекущаяСтрокаДерева   = ДополнительныеПараметры.ТекущаяСтрокаДерева;
	
	ЭтоПроизвольноеРедактированиеСуществующейСтроки = ДополнительныеПараметры.Свойство("ПроизвольноеРедактированиеРеквизитов")
		И ДополнительныеПараметры.ПроизвольноеРедактированиеРеквизитов;
	
	ЗаполнитьСтрокуДереваПоДаннымВыбора(НайденнаяСтрокаДерева, Результат.ДанныеВыбора, ЭтоПроизвольноеРедактированиеСуществующейСтроки);
	
	ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(
		ЭтотОбъект, Результат.ДанныеВыбора, Результат.ЗапомнитьВыбор);
	
	Если Не ЭтоПроизвольноеРедактированиеСуществующейСтроки Тогда
		ОбработатьНайденныйВДеревеШтрихкод(НайденнаяСтрокаДерева, ТекущаяСтрокаДерева);
	КонецЕсли;
	
	Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	КонецЕсли;
	
	ОбработатьОчереднойШтрихкод();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуДереваПоДаннымШтрихкода(Форма, СтрокаДерева, ДанныеШтрихкода, ТаблицаИзмененийПодобраннойПродукции, КэшированныеЗначения)
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ОбработатьТребованиеПолногоКода(
		ДанныеШтрихкода,
		СтрокаДерева,
		Форма.ПараметрыСканирования);
	
	КонечнаяУпаковкаПоДетализации =
		СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
		Или ЭтоЗаполненнаяМонотоварнаяУпаковкаСGTIN(СтрокаДерева, "КоличествоПодчиненныхПотребительскихУпаковок")
			И СтрокаДерева.ПолучитьЭлементы().Количество() = 0;
	
	Если ДанныеШтрихкода = Неопределено
		Или Не ДанныеШтрихкода.Свойство("Номенклатура")
		Или Не КонечнаяУпаковкаПоДетализации Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеПоля = Новый Массив;
	ЗаполняемыеПоля.Добавить("Номенклатура");
	ЗаполняемыеПоля.Добавить("Характеристика");
	ЗаполняемыеПоля.Добавить("Серия");
	ЗаполняемыеПоля.Добавить("Количество");
	
	Если Форма.ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Тогда
		ЗаполняемыеПоля.Добавить("ИдентификаторПроисхожденияВЕТИС");
	КонецЕсли;
	Если Форма.ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
		ЗаполняемыеПоля.Добавить("ГоденДо");
	КонецЕсли;
	
	ЗаполнитьИзмененияПодобраннойПродукции = Ложь;
	Для Каждого ИмяПоля Из ЗаполняемыеПоля Цикл
		ЗаполнитьИзмененияПодобраннойПродукции = ЗаполнитьИзмененияПодобраннойПродукции
			Или СтрокаДерева[ИмяПоля] <> ДанныеШтрихкода[ИмяПоля];
	КонецЦикла;
	
	Если Не ЗаполнитьИзмененияПодобраннойПродукции Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСвойствСтроки = Новый Массив;
	ИменаСвойствСтроки.Добавить("GTIN");
	ИменаСвойствСтроки.Добавить("Номенклатура");
	ИменаСвойствСтроки.Добавить("Характеристика");
	ИменаСвойствСтроки.Добавить("Серия");
	ИменаСвойствСтроки.Добавить("СтатусПроверки");
	ИменаСвойствСтроки.Добавить("Количество");
	
	Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Форма.ВидМаркируемойПродукции) Тогда
		ИменаСвойствСтроки.Добавить("ГоденДо");
		ИменаСвойствСтроки.Добавить("СкоропортящаясяПродукция");
		Если Форма.ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
			ИменаСвойствСтроки.Добавить("ИдентификаторПроисхожденияВЕТИС");
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ПараметрыСканирования.ТребуетсяЧастичноеВыбытие
		И ИнтеграцияИСМПКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
		Форма.ВидМаркируемойПродукции,
		Форма.ПараметрыСканирования.ВидОперацииИСМП) Тогда
		ИменаСвойствСтроки.Добавить("ЧастичноеВыбытие");
	КонецЕсли;
	
	СвойстваСтрокой = СтрСоединить(ИменаСвойствСтроки, ",");
	
	СтрокаИзмененийДо    = Новый Структура(СвойстваСтрокой);
	СтрокаИзмененийПосле = Новый Структура(СвойстваСтрокой);
	ЗаполнитьЗначенияСвойств(СтрокаИзмененийДо,    СтрокаДерева);
	ЗаполнитьЗначенияСвойств(СтрокаИзмененийПосле, СтрокаИзмененийДо);
	ЗаполнитьЗначенияСвойств(СтрокаИзмененийПосле, ДанныеШтрихкода);
	
	ИзменяемыеСвойства = Новый Массив;
	Для Каждого ИмяСвойства Из ИменаСвойствСтроки Цикл
		Если СтрокаИзмененийДо[ИмяСвойства] <> СтрокаИзмененийПосле[ИмяСвойства] Тогда
			ИзменяемыеСвойства.Добавить(ИмяСвойства);
		КонецЕсли;
	КонецЦикла;
	
	Если ИзменяемыеСвойства.Количество() > 0 Тогда
		
		Для Каждого ИмяСвойства Из ИзменяемыеСвойства Цикл
			СтрокаДерева[ИмяСвойства] = ДанныеШтрихкода[ИмяСвойства];
		КонецЦикла;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтатусПроверки", СтрокаДерева.СтатусПроверки);
		
		КоличествоКодовМаркировки = 1;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриУточненииСопоставления(
			Форма,
			СтрокаИзмененийДо,
			СтрокаИзмененийПосле,
			КоличествоКодовМаркировки,
			ОбщийМодульКонтекстаПиП(),
			ДополнительныеПараметры,
			КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуДереваПоДаннымВыбора(СтрокаДерева, ДанныеВыбора, ЗаполнитьИзмененияПодобраннойПродукции = Ложь)
	
	Если ДанныеВыбора = Неопределено
		Или Не УточнениеДанныхДопустимо(СтрокаДерева) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеВыбора.GTIN <> СтрокаДерева.GTIN Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСвойствСтроки = Новый Массив;
	ИменаСвойствСтроки.Добавить("GTIN");
	ИменаСвойствСтроки.Добавить("Номенклатура");
	ИменаСвойствСтроки.Добавить("Характеристика");
	ИменаСвойствСтроки.Добавить("Серия");
	ИменаСвойствСтроки.Добавить("СтатусПроверки");
	ИменаСвойствСтроки.Добавить("Количество");
	ИменаСвойствСтроки.Добавить("ПроизвольнаяЕдиницаУчета");
	ИменаСвойствСтроки.Добавить("ТребуетВзвешивания");
	
	Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидМаркируемойПродукции) Тогда
		ИменаСвойствСтроки.Добавить("ГоденДо");
		ИменаСвойствСтроки.Добавить("СкоропортящаясяПродукция");
		Если ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
			ИменаСвойствСтроки.Добавить("ИдентификаторПроисхожденияВЕТИС");
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСканирования.ТребуетсяЧастичноеВыбытие
		И ИнтеграцияИСМПКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
		ВидМаркируемойПродукции,
		ПараметрыСканирования.ВидОперацииИСМП) Тогда
		ИменаСвойствСтроки.Добавить("ЧастичноеВыбытие");
	КонецЕсли;
	
	СвойстваСтрокой = СтрСоединить(ИменаСвойствСтроки, ",");
	
	СтрокаИзмененийДо    = Новый Структура(СвойстваСтрокой);
	СтрокаИзмененийПосле = Новый Структура(СвойстваСтрокой);
	ЗаполнитьЗначенияСвойств(СтрокаИзмененийДо,    СтрокаДерева);
	ЗаполнитьЗначенияСвойств(СтрокаИзмененийПосле, СтрокаИзмененийДо);
	ЗаполнитьЗначенияСвойств(СтрокаИзмененийПосле, ДанныеВыбора);
	
	ИзменяемыеСвойства = Новый Массив;
	Для Каждого ИмяСвойства Из ИменаСвойствСтроки Цикл
		Если СтрокаИзмененийДо[ИмяСвойства] <> СтрокаИзмененийПосле[ИмяСвойства] Тогда
			ИзменяемыеСвойства.Добавить(ИмяСвойства);
		КонецЕсли;
	КонецЦикла;
	
	Если ИзменяемыеСвойства.Количество() > 0 Тогда
		
		Для Каждого ИмяСвойства Из ИзменяемыеСвойства Цикл
			СтрокаДерева[ИмяСвойства] = ДанныеВыбора[ИмяСвойства];
		КонецЦикла;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтатусПроверки", СтрокаДерева.СтатусПроверки);
		
		СтрокаДерева.Номенклатура   = ДанныеВыбора.Номенклатура;
		СтрокаДерева.Характеристика = ДанныеВыбора.Характеристика;
		СтрокаДерева.Серия          = ДанныеВыбора.Серия;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
		
		КоличествоКодовМаркировки = 1;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриУточненииСопоставления(
			ЭтотОбъект,
			СтрокаИзмененийДо,
			СтрокаИзмененийПосле,
			КоличествоКодовМаркировки,
			ПроверкаИПодборПродукцииИСМПКлиент,
			ДополнительныеПараметры,
			КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавленнаяПотребительскаяУпаковка(Форма, Данные, Действие)

	КодМаркировки = Неопределено;
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		КодМаркировки = Данные;
	ИначеЕсли ТипЗнч(Данные) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если Данные.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
			Возврат Ложь;
		КонецЕсли;
		КодМаркировки = Данные.Штрихкод;
	КонецЕсли;

	ИмяСвойстваКонтейнера = "ДобавленнаяПотребительскаяУпаковка";

	Возврат УпаковкиВКонтейнере(Форма, ИмяСвойстваКонтейнера, Действие, КодМаркировки);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УпаковкиВКонтейнере(Форма, ИмяСвойстваКонтейнера, Действие, КодМаркировки)

	Контейнер = Форма.Контейнер;

	Если Контейнер = Неопределено Тогда
		Контейнер = Новый Структура;
		Форма.Контейнер = Контейнер;
	КонецЕсли;

	Если Не Контейнер.Свойство(ИмяСвойстваКонтейнера) Тогда
		Контейнер.Вставить(ИмяСвойстваКонтейнера, Новый Массив);
	КонецЕсли;

	Упаковки = Контейнер[ИмяСвойстваКонтейнера];

	Если Действие = "Очистить" Тогда
		Упаковки.Очистить();
		Возврат Истина;
	ИначеЕсли Действие = "Упаковки" Тогда
		Возврат Упаковки;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КодМаркировки) Тогда
		Возврат Ложь;
	КонецЕсли;

	ИндексЭлемента = Упаковки.Найти(КодМаркировки);

	КодМаркировкиДобавлен = (ИндексЭлемента <> Неопределено);

	Если Действие = "Добавить" Тогда

		Если КодМаркировкиДобавлен Тогда
			Возврат Истина;
		КонецЕсли;

		Упаковки.Добавить(КодМаркировки);

		Возврат Истина;

	ИначеЕсли Действие = "Удалить" Тогда

		Если Не КодМаркировкиДобавлен Тогда
			 Возврат Истина;
		КонецЕсли;

		Упаковки.Удалить(ИндексЭлемента);

		Возврат Истина;

	ИначеЕсли Действие = "Содержит" Тогда

		Возврат КодМаркировкиДобавлен;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		ОбработатьОчереднойШтрихкод();
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкода = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДанныеШтрихкода") Тогда
		ДанныеШтрихкода = ДополнительныеПараметры.ДанныеШтрихкода;
	КонецЕсли;
	
	ЗапомнитьВыбор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ЗапомнитьВыбор", Ложь);
	
	Если ЗапомнитьВыбор Тогда
		
		Если СохраненВыборПоМаркируемойПродукции Тогда
			ДанныеВыбораПоМаркируемойПродукции.ДобавлятьНовуюУпаковку = Истина;
		Иначе
			ДанныеВыбораПоМаркируемойПродукции = ШтрихкодированиеИСКлиент.ИнициализацияСтруктурыДанныхСохраненногоВыбора().ДанныеВыбора;
			ДанныеВыбораПоМаркируемойПродукции.ДобавлятьНовуюУпаковку = Истина;
			СохраненВыборПоМаркируемойПродукции = Истина;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
		
	КонецЕсли;
	
	Если Результат.ВидДействия = "ДобавлениеМаркируемойПродукции" Тогда
		
		ДобавитьНовуюМаркируемуюПродукциюВДерево(?(ДанныеШтрихкода <> Неопределено, ДанныеШтрихкода, Результат));
	
	ИначеЕсли Результат.ВидДействия = "ПереместитьУпаковкуВДругуюУпаковку" Тогда
		
		ПереместитьУпаковкуВДругуюУпаковку(ДополнительныеПараметры.ИдентификаторНайденнойСтроки, 
		                                   Результат.ШтрихкодУпаковкиНазначения,
		                                   Результат.СтатусПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПереместитьПродукциюВДругуюУпаковку" Тогда
		
		ПереместитьПродукциюВДругуюУпаковку(ДополнительныеПараметры.ИдентификаторНайденнойСтроки, 
		                                  Результат.ШтрихкодУпаковкиНазначения,
		                                  Результат.СтатусПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПереместитьВПродукциюБезУпаковки" Тогда
		
		ПереместитьВПродукциюБезУпаковки(ДополнительныеПараметры.ИдентификаторНайденнойСтроки,
		                               ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"),
		                               Результат.ИзменятьКонтекстПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПоместитьНовуюВПродукциюБезУпаковки" Тогда
		
		ПоместитьНовуюВПродукциюБезУпаковки(Результат);
		
	ИначеЕсли Результат.ВидДействия = "ОтложитьНайденноеВДругоеМесте" Тогда
		
		ТекущиеДанныеДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ДополнительныеПараметры.ИдентификаторНайденнойСтроки);
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			
			ОтметитьСтрокуКакОтложенную(ТекущиеДанныеДерева);
			
		КонецЕсли;
		
	ИначеЕсли Результат.ВидДействия = "ИзменитьКонтекстПроверки" Тогда
		
		ТекущиеДанныеДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ДополнительныеПараметры.ИдентификаторНайденнойСтроки);
		
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			
			ОтметитьСтрокуКакНайденную(ТекущиеДанныеДерева);
			ИзменитьКонтекстПроверки(ТекущиеДанныеДерева.ПолучитьРодителя());
			
		КонецЕсли;
		
	ИначеЕсли Результат.ВидДействия = "ДобавитьНовуюУпаковку" Тогда
		
		ДобавитьНовуюУпаковку(?(ДанныеШтрихкода <> Неопределено, ДанныеШтрихкода, Результат),
		                      ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"),
		                      Истина);
		
	КонецЕсли;
	
	ОбработатьПолученныеДанныеТСД();
	
	Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтсканированныйШтрихкод(ДанныеШтрихкода)

	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьШтрихкодВДеревеМаркированнойПродукции(ДанныеШтрихкода);
	
	Если ТипЗнч(ДанныеШтрихкода.ДополнительныеПараметры) = Тип("Структура")
		И ДанныеШтрихкода.ДополнительныеПараметры.Свойство("ДанныеВыбора")
		И ДанныеШтрихкода.ДополнительныеПараметры.ЗапомнитьВыбор Тогда
		
		СохраненВыборПоМаркируемойПродукции = ДанныеШтрихкода.ДополнительныеПараметры.ЗапомнитьВыбор;
		ДанныеВыбораПоМаркируемойПродукции  = ДанныеШтрихкода.ДополнительныеПараметры.ДанныеВыбора;
		ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ТребуетсяСбросСохраненногоВыбораПоДаннымДокумента() Тогда
		СохраненВыборПоМаркируемойПродукции = Ложь;
		ДанныеВыбораПоМаркируемойПродукции = Неопределено;
		ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	КонецЕсли;
	
	Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета
		И ДанныеШтрихкода.Количество <> 0 Тогда
		ВесПредыдущегоВзвешивания = ДанныеШтрихкода.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяСбросСохраненногоВыбораПоДаннымДокумента()
	
	Если ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("Номенклатура,Характеристика");
	Если Не ЗначениеЗаполнено(ДанныеВыбораПоМаркируемойПродукции.Номенклатура) Тогда
		Отбор.Вставить("GTIN");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отбор, ДанныеВыбораПоМаркируемойПродукции);
	СтрокиМаркируемойПродукции = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из СтрокиМаркируемойПродукции Цикл
		Если ЗначениеЗаполнено(Строка.Серия) И Строка.Серия <> ДанныеВыбораПоМаркируемойПродукции.Серия Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(Строка.GTIN) И Строка.GTIN <> ДанныеВыбораПоМаркируемойПродукции.GTIN Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(Строка.ГоденДо) И Строка.ГоденДо <> ДанныеВыбораПоМаркируемойПродукции.ГоденДо Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(Строка.ИдентификаторПроисхожденияВЕТИС)
				И Строка.ИдентификаторПроисхожденияВЕТИС <> ДанныеВыбораПоМаркируемойПродукции.ИдентификаторПроисхожденияВЕТИС Тогда
			Продолжить;
		ИначеЕсли Строка.Количество <> Строка.КоличествоПодобрано Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ИнформацияОНевозможностиДобавленияОтсканированногоПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьОчереднойШтрихкод();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСтрокуКакНайденную(СтрокаДерева)
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, СтрокаДерева);
	
	Если ПараметрыПроверкиКодовМаркировки.ОбратноеСканирование Тогда
		
		Возврат;
		
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
		Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
		
		Возврат;
		
	ИначеЕсли СтрокаДерева.НедопустимыйКодМаркировки Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытияФормы.ПредставлениеНоменклатуры = СтрокаДерева.ПредставлениеСодержимоеУпаковки;
		ПараметрыОткрытияФормы.Штрихкод                  = СтрокаДерева.Штрихкод;
		ПараметрыОткрытияФормы.ТекстОшибки               = СтрокаДерева.ПредставлениеПроверкиКодаМаркировки;
		
		ШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
		Возврат;
		
	КонецЕсли;
	
	НовыйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	
	Если НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева, НовыйСтатусПроверки) Тогда
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, СтрокаДерева, 1);
	КонецЕсли;
	
	СтрокаДерева.СтатусПроверки = НовыйСтатусПроверки;
	
	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
		И СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь, ЗагрузкаДанныхТСД);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСтрокуКакОтложенную(СтрокаДерева)

	Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
		Возврат;
	ИначеЕсли СтрокаДерева.НедопустимыйКодМаркировки Тогда
		Возврат;
	КонецЕсли;
			
	СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена");
	СтрокаДерева.НомерСтикераОтложено = СтрШаблон(НСтр("ru = 'под номером - %1'"), СледующийСтикерОтложено);
	СледующийСтикерОтложено = СледующийСтикерОтложено + 1;
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД);

КонецПроцедуры

#КонецОбласти

#Область ПеремещениеДобавлениеПачекИУпаковок

&НаКлиенте
Процедура ДобавитьНовуюУпаковку(ДанныеШтрихкода, ТипУпаковки, СпозиционироватьсяНаДобавленной = Истина)

	ВидУпаковки = ВидУпаковкиПоВходящимДанным(ДанныеШтрихкода, ТипУпаковки, ВидМаркируемойПродукции, ПроверяемыйДокумент);

	ЭтоГрупповаяУпаковка     = (ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	ЭтоЛогистическаяУпаковка = (ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "НормализованныйШтрихкод") Тогда
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = (ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
		ДанныеШтрихкода.Вставить("НормализованныйШтрихкод", РазборКодаМаркировкиИССлужебныйКлиент.НормализованныйШтрихкод(
			ДанныеШтрихкода.Штрихкод, ВидМаркируемойПродукции,, ПользовательскиеПараметрыРазбораКодаМаркировки));
	КонецЕсли;
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "КоличествоПотребительскихУпаковок") Тогда
		ДанныеШтрихкода.Вставить("КоличествоПотребительскихУпаковок", 0);
	КонецЕсли;
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ПредставлениеНоменклатуры") Тогда
		ДанныеШтрихкода.Вставить("ПредставлениеНоменклатуры", НСтр("ru = '<не заполнено>'"));
	КонецЕсли;

	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		ДанныеШтрихкода.Вставить(
			"ТекстОшибки",
			НСтр("ru = 'В выбранном режиме детализации возможно сканирование только потребительских упаковок.'"));
		ШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода);
		Возврат;
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими")
		И Не ЭтоГрупповаяУпаковка Тогда
		ДанныеШтрихкода.Вставить(
			"ТекстОшибки",
			НСтр("ru = 'В выбранном режиме детализации возможно сканирование только потребительских или групповых упаковок.'"));
		ШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода);
		Возврат;
	КонецЕсли;
	
	УпаковкаНеСодержитсяВДанныхДокумента = Ложь;
	
	ТекущаяПроверяемаяУпаковка = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Истина, ЭтоГрупповаяУпаковка);
	
	Если Не ТекущаяПроверяемаяУпаковка = Неопределено Тогда
		УпаковкаНеСодержитсяВДанныхДокумента = ТекущаяПроверяемаяУпаковка.НеСодержитсяВДанныхДокумента;
	КонецЕсли;
	
	Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	ИначеЕсли РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ПеремещатьТудаГдеДолжныБыть")
		И (Не УпаковкаНеСодержитсяВДанныхДокумента) Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		НоваяСтрока = ТекущаяПроверяемаяУпаковка.ПолучитьЭлементы().Добавить();
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
	НоваяСтрока.ТипУпаковки                  = ?(ЗначениеЗаполнено(ТипУпаковки), ТипУпаковки, ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	НоваяСтрока.ВидУпаковки                  = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая");

	Если Не РежимПодбораСуществующихУпаковок Тогда
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
	Иначе
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "Статус")
		И ЗначениеЗаполнено(ДанныеШтрихкода.Статус) Тогда
		НоваяСтрока.СтатусКодаМаркировки = ДанныеШтрихкода.Статус;
	Иначе
		НоваяСтрока.СтатусКодаМаркировки = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен");
	КонецЕсли;

	НоваяСтрока.КоличествоПодчиненныхПотребительскихУпаковок = ДанныеШтрихкода.КоличествоПотребительскихУпаковок;
	Если ЭтоГрупповаяУпаковка Тогда

		Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.ПредставлениеСодержимоеУпаковки = ДанныеШтрихкода.ПредставлениеНоменклатуры;
		КонецЕсли;

		Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
			Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами") Тогда
			НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
		КонецЕсли;

	КонецЕсли;

	Если ЭтоЛогистическаяУпаковка Тогда

		Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.ПредставлениеСодержимоеУпаковки = ДанныеШтрихкода.ПредставлениеНоменклатуры;
		КонецЕсли;

		Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами") Тогда
			НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
		КонецЕсли;

	КонецЕсли;

	ДобавленныеУпаковки.Добавить(ДанныеШтрихкода.Штрихкод);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ПараметрыПроверкиКодовМаркировки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(НоваяСтрока, Ложь, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, ВидМаркируемойПродукции);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДоступныеДляПроверкиУпаковки);
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ИзменитьСостояниеПроверкиУпаковки(ЭтотОбъект, НоваяСтрока, СоответствиеШтрихкодовСтрокДерева);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);
	
	Если СпозиционироватьсяНаДобавленной Тогда
		СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.НормализованныйШтрихкод, ИдентификаторСтроки);
	ПриИзмененииМаркировкиСоставаУпаковкиНаКлиенте(ИдентификаторСтроки, Истина);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(НоваяСтрока);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьНовуюВПродукциюБезУпаковки(ДанныеШтрихкода)
	
	СтрокаПродукцияБезУпаковки = СтрокаПотребительскиеУпаковкиБезУпаковки(ЭтотОбъект);
	
	ДобавитьНовуюМаркируемуюПродукциюВДерево(ДанныеШтрихкода, СтрокаПродукцияБезУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюМаркируемуюПродукциюВДерево(ДанныеШтрихкода, ДобавлятьВУпаковку = Неопределено)
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		Если ДобавлятьВУпаковку = Неопределено Тогда
			
			Если ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
				
				ДобавлятьВУпаковку = СтрокаПотребительскиеУпаковкиБезУпаковки(ЭтотОбъект);
				
			Иначе
				
				ДобавлятьВУпаковку = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
				
			КонецЕсли;
			
			Если ДобавлятьВУпаковку = Неопределено Тогда
				ДобавлятьВУпаковку = СтрокаПотребительскиеУпаковкиБезУпаковки(ЭтотОбъект);
			КонецЕсли;
			
			НоваяСтрока = ДобавлятьВУпаковку.ПолучитьЭлементы().Добавить();
			
		Иначе
			
			НоваяСтрока = ДобавлятьВУпаковку.ПолучитьЭлементы().Добавить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
	НоваяСтрока.СтатусКодаМаркировки         = ДанныеШтрихкода.Статус;
	НоваяСтрока.Штрихкод                     = ДанныеШтрихкода.Штрихкод;
	НоваяСтрока.ТипУпаковки                  = ДанныеШтрихкода.ТипУпаковки;
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	
	Если НЕ РежимПодбораСуществующихУпаковок Тогда
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
	Иначе
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = ДанныеШтрихкода.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ПараметрыПроверкиКодовМаркировки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеПроверкиПодчиненных(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, ВидМаркируемойПродукции);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);

	ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, НоваяСтрока, 1);
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.НормализованныйШтрихкод, ИдентификаторСтроки);

	Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки")
		И ДобавлятьВУпаковку.ТипУпаковки <> ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиНаКлиенте(ИдентификаторСтроки, Истина);
	КонецЕсли;
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВПродукциюБезУпаковки(ИдентификаторСтрокиПеремещаемойПродукции, СтатусПроверки = Неопределено, ИзменятьКонтекстПроверки = Ложь)
	
	СтрокаНазначения   = СтрокаПотребительскиеУпаковкиБезУпаковки(ЭтотОбъект);
	ПеремещаемаяСтрока = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиПеремещаемойПродукции);
	
	ПереместитьПродукцию(ПеремещаемаяСтрока, СтрокаНазначения, СтатусПроверки);
	
	Если ИзменятьКонтекстПроверки Тогда
		ИзменитьКонтекстПроверки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПродукциюВДругуюУпаковку(ИдентификаторСтрокиПеремещаемойПродукции, ШтрихкодУпаковкиНазначения, СтатусПроверки = Неопределено)
	
	ИдентификаторСтрокиУпаковкиНазначения = ИдентификаторСтрокиДереваПоШтрихкоду(ШтрихкодУпаковкиНазначения, Истина);
	
	СтрокаНазначения   = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиУпаковкиНазначения);
	ПеремещаемаяСтрока = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиПеремещаемойПродукции);
	
	ПереместитьПродукцию(ПеремещаемаяСтрока, СтрокаНазначения, СтатусПроверки);
	ИзменитьКонтекстПроверки(СтрокаНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПродукцию(СтрокаСПродукцией, НоваяУпаковка, СтатусПроверки = Неопределено)

	ТекущаяУпаковка = СтрокаСПродукцией.ПолучитьРодителя();
	
	НоваяСтрока = НоваяУпаковка.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСПродукцией);
	
	Если СтатусПроверки <> Неопределено Тогда
		Если НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, НоваяСтрока, СтатусПроверки) Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, НоваяСтрока, 1);
		КонецЕсли;

			НоваяСтрока.СтатусПроверки = СтатусПроверки;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	КонецЕсли;
	
	ТекущаяУпаковка.ПолучитьЭлементы().Удалить(СтрокаСПродукцией);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущаяУпаковка, Ложь, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ТекущаяУпаковка, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);
	
	МассивСтрокИзменившихсяУпаковок = Новый Массив;
	МассивСтрокИзменившихсяУпаковок.Добавить(НоваяУпаковка.ПолучитьИдентификатор());
	МассивСтрокИзменившихсяУпаковок.Добавить(ТекущаяУпаковка.ПолучитьИдентификатор());
	
	ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзменившихсяУпаковок, Истина, КэшированныеЗначения);
	
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.НормализованныйШтрихкод, НоваяСтрока.ПолучитьИдентификатор());
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьУпаковкуВДругуюУпаковку(ИдентификаторСтрокиПеремещаемойУпаковки, ШтрихкодУпаковкиНазначения, СтатусПроверки = Неопределено)
	
	ИдентификаторПеремещеннойСтроки = -1;
	Если ТипЗнч(ИдентификаторСтрокиПеремещаемойУпаковки) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПеремещаемаяСтрока = ИдентификаторСтрокиПеремещаемойУпаковки;
	Иначе
		ПеремещаемаяСтрока = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиПеремещаемойУпаковки);
	КонецЕсли;
	РодительПеремещаемойСтроки = ПеремещаемаяСтрока.ПолучитьРодителя();
	
	Если СтатусПроверки <> Неопределено Тогда
		ПеремещаемаяСтрока.СтатусПроверки = СтатусПроверки;
	КонецЕсли;
	
	МассивСтрокИзмененыхУпаковок = Новый Массив;
	
	Если ШтрихкодУпаковкиНазначения <> Неопределено Тогда
		
		Если ТипЗнч(ШтрихкодУпаковкиНазначения) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			СтрокаНазначения = ШтрихкодУпаковкиНазначения;
			
		Иначе
			
			ИдентификаторСтрокиУпаковкиНазначения = ИдентификаторСтрокиДереваПоШтрихкоду(ШтрихкодУпаковкиНазначения, Истина);
			СтрокаНазначения = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиУпаковкиНазначения);
			
		КонецЕсли;
		
		Если ИдентификаторСтрокиУпаковкиНазначения <> - 1 Тогда
			
			ПереместитьЭлементДерева(СтрокаНазначения,
			                         ПеремещаемаяСтрока,
			                         ИдентификаторПеремещеннойСтроки);
			
		КонецЕсли;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаНазначения, Истина, ЗагрузкаДанныхТСД);
		МассивСтрокИзмененыхУпаковок.Добавить(СтрокаНазначения.ПолучитьИдентификатор());
	
	Иначе
		
		ПереместитьЭлементДерева(Неопределено,
		                         ПеремещаемаяСтрока,
		                         ИдентификаторПеремещеннойСтроки);
		
	КонецЕсли;
	
	ИзменитьКонтекстПроверки(СтрокаНазначения);
	
	Если РодительПеремещаемойСтроки <> Неопределено Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительПеремещаемойСтроки, Истина, ЗагрузкаДанныхТСД);
		МассивСтрокИзмененыхУпаковок.Добавить(РодительПеремещаемойСтроки.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если МассивСтрокИзмененыхУпаковок.Количество() > 0 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзмененыхУпаковок, Истина, КэшированныеЗначения);
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = ИдентификаторПеремещеннойСтроки;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлементДерева(СтрокаНазначение, ПеремещаемаяСтрока, ИдентификаторПеремещеннойСтроки, УдалятьПослеДобавления = Истина)
	
	Если Не ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПеремещаемаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаНазначение = Неопределено Тогда
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = СтрокаНазначение.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПеремещаемаяСтрока);
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.НормализованныйШтрихкод, НоваяСтрока.ПолучитьИдентификатор());
	
	Для каждого Элемент Из ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
		ПереместитьЭлементДерева(НоваяСтрока, Элемент, ИдентификаторПеремещеннойСтроки, Ложь);
	КонецЦикла;
	
	Если УдалятьПослеДобавления Тогда
		
		РодительПеремещаемойСтроки = ПеремещаемаяСтрока.ПолучитьРодителя();
		Если РодительПеремещаемойСтроки <> Неопределено Тогда
			КоллекцияЭлементов = РодительПеремещаемойСтроки.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементов = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементов.Удалить(ПеремещаемаяСтрока);
		ИдентификаторПеремещеннойСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПеремещаемаяСтрока)
	
	Если ПеремещаемаяСтрока = СтрокаНазначение Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПеремещаемаяСтрока.ПолучитьРодителя() = СтрокаНазначение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока = СтрокаНазначение Тогда
			Возврат Ложь;
		КонецЕсли;
		
		РезультатПроверкиПодчиненнойСтроки = ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПодчиненнаяСтрока);
		
		Если НЕ РезультатПроверкиПодчиненнойСтроки Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПотребительскиеУпаковкиБезУпаковки(Форма)
	
	Возврат НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ИдентификаторСтрокиПотребительскиеУпаковкиБезУпаковки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаГрупповыеУпаковкиБезКоробки(Форма)

	Возврат НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТекущейПроверяемойУпаковки(Форма, ЭтоУпаковка, ЭтоГрупповаяУпаковка)
	
	Если Форма.ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		
		Если Не ЭтоУпаковка Тогда
			Возврат СтрокаПотребительскиеУпаковкиБезУпаковки(Форма);
		ИначеЕсли ЭтоГрупповаяУпаковка Тогда
			Возврат СтрокаГрупповыеУпаковкиБезКоробки(Форма);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если Не ЭтоУпаковка Тогда
			Возврат НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ИдентификаторТекущейПроверяемойУпаковки);
		ИначеЕсли ЭтоГрупповаяУпаковка Тогда
			Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
				Возврат Неопределено;
			КонецЕсли;
			Возврат НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ИдентификаторТекущейПроверяемойУпаковки);
		Иначе
			Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими")
				Или Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
				Возврат Неопределено;
			Иначе
				Возврат НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции, Форма.ИдентификаторТекущейПроверяемойУпаковки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СканированиеСуществующихУпаковокИМаркируемойПродукции

&НаСервере
Процедура ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(СтрокаИсточника,
	                                                                       КоллекцияСтрокПриемника,
	                                                                       СоответствиеШтрихкодовСтрокДерева,
	                                                                       СтатусПроверки,
	                                                                       ДанныеШтрихкода,
	                                                                       КэшированныеЗначения)
	
	НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
	
	РодительНовойСтроки = НоваяСтрока.ПолучитьРодителя();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Свойство("ЭтоГенерацияШтрихкодовУпаковок") Тогда
		НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	КонецЕсли;
	
	ИдентификаторДобавленнойСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.НормализованныйШтрихкод, ИдентификаторДобавленнойСтроки);
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	
	ЭтоУпаковка          = ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки);
	ЭтоГрупповаяУпаковка = (НоваяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	
	Если СтатусПроверки = Неопределено Тогда
		Если РодительНовойСтроки <> Неопределено Тогда
			Если ЭтоУпаковка Тогда
				Если ЭтоГрупповаяУпаковка И РодительНовойСтроки.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки()
					И Не РежимПодбораСуществующихУпаковок Тогда
					СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
				Иначе
					СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
				КонецЕсли;
			Иначе
				Если РодительНовойСтроки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
					И Не РежимПодбораСуществующихУпаковок Тогда
					СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
				Иначе
					СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не РежимПодбораСуществующихУпаковок Тогда
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
			Иначе
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "Входящий")
		И СтрокаИсточника.Входящий Тогда
		НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
	Иначе
		НоваяСтрока.СтатусПроверки = СтатусПроверки;
	КонецЕсли;
	
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, ВидМаркируемойПродукции);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДоступныеДляПроверкиУпаковки);
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		
		ОтрезатьСодержимоеГрупповыхУпаковок     = Ложь;
		ОтрезатьСодержимоеЛогистическойУпаковки = Ложь;
		
	Иначе
		
		ОтрезатьСодержимоеГрупповыхУпаковок =
			СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			И (ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
				Или ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
				Или (СтрокаИсточника.КоличествоПотребительскихУпаковок > 0 И СтрокаИсточника.Строки.Количество() = 0));
		
		ОтрезатьСодержимоеЛогистическойУпаковки =
			СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			И ЭтоЗаполненнаяМонотоварнаяУпаковкаСGTIN(СтрокаИсточника, "КоличествоПотребительскихУпаковок")
			И (ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
				Или СтрокаИсточника.Строки.Количество() = 0);
		
	КонецЕсли;
	
	НоваяСтрока.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаИсточника.КоличествоПотребительскихУпаковок;
	Если ЭтоУпаковка Тогда
		
		УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
		
		Если ЭтоГрупповаяУпаковка Тогда
			
			Если ОтрезатьСодержимоеГрупповыхУпаковок Тогда
				НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ОтрезатьСодержимоеЛогистическойУпаковки Тогда
				НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	Если ЭтоУпаковка Тогда
		УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	КоллекцияСтрокДобавленнойСтроки = НоваяСтрока.ПолучитьЭлементы();
	
	СтатусПроверкиПодчиненных = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась;
	
	ЕстьПодчиненныеСтроки = Ложь;
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		
		Если СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			И ОтрезатьСодержимоеГрупповыхУпаковок Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			И ОтрезатьСодержимоеЛогистическойУпаковки Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьПодчиненныеСтроки = Истина;
		ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(ПодчиненнаяСтрокаИсточника,
		                                                                 КоллекцияСтрокДобавленнойСтроки,
		                                                                 СоответствиеШтрихкодовСтрокДерева,
		                                                                 СтатусПроверкиПодчиненных,
		                                                                 Неопределено,
		                                                                 КэшированныеЗначения);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ПараметрыПроверкиКодовМаркировки, ЕстьПодчиненныеСтроки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(НоваяСтрока, Ложь, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеПроверкиПодчиненных(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(НоваяСтрока);
	
	Если РежимПодбораСуществующихУпаковок
		Или НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии Тогда
		ПодобраннаяПродукцияПриДобавленииСтроки(ЭтотОбъект, НоваяСтрока, КэшированныеЗначения);
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено
		И СтрокаИсточника.Штрихкод = ДанныеШтрихкода.Штрихкод Тогда
		
		СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
		
		Если ЭтоУпаковка И НоваяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, ЭтоУпаковка, ЭтоГрупповаяУпаковка);
			Если СтрокаПроверяемойУпаковки = Неопределено Или СтрокаПроверяемойУпаковки = НоваяСтрока.ПолучитьРодителя() Тогда
				ИзменитьСостояниеПроверкиУпаковки(ЭтотОбъект, НоваяСтрока, СоответствиеШтрихкодовСтрокДерева);
			КонецЕсли;
		КонецЕсли;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДоступныеДляПроверкиУпаковки);
		
		КоличествоДобавленныхНедопустимыхКодовМаркировки = ?(НоваяСтрока.НедопустимыйКодМаркировки, 1, 0);
		ОпределитьКоличествоНедопустимыхКодовМаркировкиДляКоллекции(НоваяСтрока.ПолучитьЭлементы(), КоличествоДобавленныхНедопустимыхКодовМаркировки);
		
		Если КоличествоДобавленныхНедопустимыхКодовМаркировки > 0 Тогда
			КоличествоНедопустимыхКодовМаркировки = КоличествоНедопустимыхКодовМаркировки + КоличествоДобавленныхНедопустимыхКодовМаркировки;
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДублиВОсканированнойУпаковке(СтрокиДерева, СоответствиеШтрихкодовСтрокДерева)
	
	ЕстьОшибки = Ложь;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат ЕстьОшибки;
	КонецЕсли;
	
	ДеревоУпаковок = СтрокиДерева[0].Владелец();
	
	Если ДеревоУпаковок.Колонки.Найти("ЕстьОшибки") = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить("ЕстьОшибки", Новый ОписаниеТипов("Булево"));
		ДеревоУпаковок.Колонки.Добавить("ТекстОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ПроверитьНаДубльВСтрокеДерева(СтрокаДерева, СоответствиеШтрихкодовСтрокДерева, ЕстьОшибки)
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ПроверитьНаДубльВСтрокеДерева(СтрокаДерева, СоответствиеШтрихкодовСтрокДерева, ЕстьОшибки)

	Если СоответствиеШтрихкодовСтрокДерева.Получить(СтрокаДерева.НормализованныйШтрихкод) <> Неопределено Тогда
		
		СтрокаДерева.ЕстьОшибки = Истина;
		СтрокаДерева.ТекстОшибки = НСтр("ru = 'Уже присутствует в данных формы проверки и подбора'");
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ПроверитьНаДубльВСтрокеДерева(ПодчиненнаяСтрока, СоответствиеШтрихкодовСтрокДерева, ЕстьОшибки);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ВсеВложенныеУпаковкиЕстьВДереве(СтрокиДерева, СоответствиеШтрихкодовСтрокДерева)
	
	ЕстьОшибки = Ложь;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат ЕстьОшибки;
	КонецЕсли;
	
	ДеревоУпаковок = СтрокиДерева[0].Владелец();
	Если ДеревоУпаковок.Колонки.Найти("ЕстьОшибки") = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить("ЕстьОшибки", Новый ОписаниеТипов("Булево"));
		ДеревоУпаковок.Колонки.Добавить("ТекстОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СоответствиеШтрихкодовСтрокДерева.Получить(СтрокаДерева.НормализованныйШтрихкод) = Неопределено Тогда
			
			СтрокаДерева.ЕстьОшибки = Истина;
			СтрокаДерева.ТекстОшибки = НСтр("ru = 'Отсутствует в структуре упаковок'");
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция РезультатДобавленияСуществующейУпаковкиВДеревоМаркированнойПродукции(ДанныеШтрихкода, СоответствиеШтрихкодовСтрокДерева, ВходящийКешСтрокДереваУпаковок, ПараметрыСканирования, КэшированныеЗначения)

	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ТекстОшибки",                     "");
	Результат.Вставить("АдресХранилищаДереваУпаковки",    Неопределено);
	Результат.Вставить("ТребуетсяСбросКонтекстаПроверки", Ложь);
	Результат.Вставить("ТребуетсяУдалениеНаКлиенте",      Неопределено);
	
	Если ВходящийКешСтрокДереваУпаковок = Неопределено Тогда
		КешСтрокДереваУпаковок = Новый Соответствие;
	Иначе
		КешСтрокДереваУпаковок = ВходящийКешСтрокДереваУпаковок;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок) Тогда
		
		КешСтрок = КешСтрокДереваУпаковок[ДанныеШтрихкода.АдресДереваУпаковок];
		Если КешСтрок = Неопределено Тогда
			
			ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);
			
			КешСтрок = Новый Соответствие;
			Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
				КешСтрок.Вставить(СтрокаДерева.Штрихкод, СтрокаДерева);
			КонецЦикла;
			
			КешСтрокДереваУпаковок.Вставить(ДанныеШтрихкода.АдресДереваУпаковок, КешСтрок);
			
		КонецЕсли;
		
	Иначе
		
		МассивУпаковок = Новый Массив;
		МассивУпаковок.Добавить(ДанныеШтрихкода.ШтрихкодУпаковки);
		ВложенныеШтрихкоды = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(МассивУпаковок, ПараметрыСканирования);
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
		
		КешСтрок = Новый Соответствие;
		Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
			КешСтрок.Вставить(СтрокаДерева.Штрихкод, СтрокаДерева);
		КонецЦикла;
		
	КонецЕсли;
	
	СчитанныйКодНеСоответствуетДетализации = Ложь;
	СтрокиДерева = ПреобразоватьСчитаннуюУпаковкуЕслиНеобходимо(КешСтрок, ДанныеШтрихкода.Штрихкод);
	
	Если СтрокиДерева = Неопределено Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Содержимое упаковки не обнаружено'"));
		Возврат Результат;
		
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.ОбратноеСканирование Тогда
		ЕстьОшибки = ВсеВложенныеУпаковкиЕстьВДереве(СтрокиДерева, СоответствиеШтрихкодовСтрокДерева);
	Иначе
		ЕстьОшибки = ЕстьДублиВОсканированнойУпаковке(СтрокиДерева, СоответствиеШтрихкодовСтрокДерева);
	КонецЕсли;
	
	Если ЕстьОшибки = Истина Тогда
		
		Результат.ЕстьОшибки = Истина;
		Если ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок) Тогда
			Результат.АдресХранилищаДереваУпаковки = ДанныеШтрихкода.АдресДереваУпаковок;
		Иначе
			Результат.АдресХранилищаДереваУпаковки = ПоместитьВоВременноеХранилище(СтрокиДерева[0].Владелец());
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если Не ДобавляемыйШтрихкодСоответствуетИерархии(ДанныеШтрихкода) Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Добавляемый штрихкод не соответствует уровню иерархии текущей проверяемой упаковки'");
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.ОбратноеСканирование Тогда
		
		Результат.ТребуетсяУдалениеНаКлиенте = Новый Массив;
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			ИдентификаторУдаляемойСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(СтрокаДерева.НормализованныйШтрихкод);
			Результат.ТребуетсяУдалениеНаКлиенте.Добавить(ИдентификаторУдаляемойСтроки);
		КонецЦикла;
		
	Иначе
		
		ЭтоУпаковка = ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки);
		
		Если ЭтоУпаковка Тогда
			ЭтоГрупповаяУпаковка = (ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
		Иначе
			ЭтоГрупповаяУпаковка = Ложь;
		КонецЕсли;

		Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
			
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, ЭтоУпаковка, ЭтоГрупповаяУпаковка);
			
		Иначе
			
			СтрокаПроверяемойУпаковки = Неопределено;
			
		КонецЕсли;
			
		Если СтрокаПроверяемойУпаковки = Неопределено Тогда
			
			КоллекцияСтрокПриемника = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
			
		Иначе
			
			КоллекцияСтрокПриемника = СтрокаПроверяемойУпаковки.ПолучитьЭлементы();
			
		КонецЕсли;
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			
			Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
				И Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
				
				СтрокаДерева.Номенклатура   = ДанныеШтрихкода.Номенклатура;
				СтрокаДерева.Характеристика = ДанныеШтрихкода.Характеристика;
				СтрокаДерева.Серия          = ДанныеШтрихкода.Серия;
				
			КонецЕсли;
			
			Если СчитанныйКодНеСоответствуетДетализации Тогда
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась;
			Иначе
				СтатусПроверки = Неопределено;
			КонецЕсли;
			
			ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(
				СтрокаДерева,
				КоллекцияСтрокПриемника,
				СоответствиеШтрихкодовСтрокДерева,
				СтатусПроверки,
				ДанныеШтрихкода,
				КэшированныеЗначения);
			
		КонецЦикла;
		
		Если ЭтоУпаковка
			И ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
			
			Результат.ТребуетсяСбросКонтекстаПроверки = Истина;
			
		КонецЕсли;
		
		Если ИдентификаторТекущейПроверяемойУпаковки <> -1 Тогда
			ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторТекущейПроверяемойУпаковки, Истина, КэшированныеЗначения);
		КонецЕсли;
		
		КоличествоСтрокПодобраннойПродукции = ПодобраннаяМаркируемаяПродукция.Количество();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавляемыйШтрихкодСоответствуетИерархии(ДанныеШтрихкода)
	
	ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
	
	Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТекущаяПроверяемаяУпаковка.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТекущаяПроверяемаяУпаковка.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		
		Возврат (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская);
		
	ИначеЕсли ТекущаяПроверяемаяУпаковка.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
		
		Возврат (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая);
		
	ИначеЕсли ТекущаяПроверяемаяУпаковка.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		Возврат (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПреобразоватьСчитаннуюУпаковкуЕслиНеобходимо(КешСтрок, Штрихкод, СчитанныйКодНеСоответствуетДетализации = Неопределено)
	
	СтрокаДерева = КешСтрок[Штрихкод];
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив;

	ДетализацияСтруктурыХраненияДерева = ДетализацияСтруктурыХраненияДерева(СтрокаДерева);
	
	Если ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
		// Требуется выполнить преобразование
		 И (ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
		Или ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
		Или ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
		Или ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими) Тогда
		
		СчитанныйКодНеСоответствуетДетализации = Истина;
		ПреобразоватьДетализациюСчитаннойУпаковкиДоПотребительскойУпаковки(СтрокаДерева, Результат);
		
	ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими
		// Требуется выполнить преобразование
		 И (ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
		Или ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
		Или ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками) Тогда
		
		СчитанныйКодНеСоответствуетДетализации = Истина;
		ПреобразоватьДетализациюСчитаннойУпаковкиДоКоробаСПотребительскимиУпаковками(СтрокаДерева, Результат);
		
	Иначе
		
		Результат.Добавить(СтрокаДерева);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработкаИзмененийПодобраннойПродукции

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева, НовыйСтатусПроверки)
	
	Если СтрокаДерева.СтатусПроверки = НовыйСтатусПроверки Тогда
		Возврат Ложь;
	ИначеЕсли РежимПодбораСуществующихУпаковок Тогда
		Если НовыйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева, НовыйСтатусПроверки)
	
	Если СтрокаДерева.СтатусПроверки = НовыйСтатусПроверки Тогда
		Возврат Ложь;
	ИначеЕсли РежимПодбораСуществующихУпаковок Тогда
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли НовыйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, СтрокаДерева, Изменение)
	
	НоваяСтрока = ТаблицаИзмененийПодобраннойПродукции.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
	НоваяСтрока.ПредставлениеНоменклатуры = СтрокаДерева.ПредставлениеСодержимоеУпаковки;
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		НоваяСтрока.Изменение = Изменение;
	Иначе
		НоваяСтрока.Изменение = Изменение * СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуСПодчиненнымиВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, СтрокаДерева)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуСПодчиненнымиВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, ПодчиненнаяСтрока);
		
		ДополнитьТаблицуИзменений = Истина;
		Если РежимПодбораСуществующихУпаковок Тогда
			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
				ДополнитьТаблицуИзменений = Ложь;
			КонецЕсли;
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
			ДополнитьТаблицуИзменений = Ложь;
		КонецЕсли;
		
		Если ДополнитьТаблицуИзменений Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, ПодчиненнаяСтрока, - 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодчиненныеСтрокиДереваПриУдалении(ТаблицаИзмененийПодобраннойПродукции, СтрокаДерева)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ОбработатьПодчиненныеСтрокиДереваПриУдалении(ТаблицаИзмененийПодобраннойПродукции, ПодчиненнаяСтрока);
		
		ОбработатьСтрокуДереваПриУдалении(ТаблицаИзмененийПодобраннойПродукции, ПодчиненнаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуДереваПриУдалении(ТаблицаИзмененийПодобраннойПродукции, УдаляемыйЭлемент)
	
	ДополнитьТаблицуИзменений = Истина;
	Если РежимПодбораСуществующихУпаковок Тогда
		Если УдаляемыйЭлемент.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			ДополнитьТаблицуИзменений = Ложь;
		КонецЕсли;
	ИначеЕсли УдаляемыйЭлемент.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
		И УдаляемыйЭлемент.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
		ДополнитьТаблицуИзменений = Ложь;
	КонецЕсли;
	
	Если ДополнитьТаблицуИзменений Тогда
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, УдаляемыйЭлемент, - 1);
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(УдаляемыйЭлемент.ТипУпаковки) Тогда
		ЭлементСписка = ДобавленныеУпаковки.НайтиПоЗначению(УдаляемыйЭлемент.Штрихкод);
		Если ЭлементСписка <> Неопределено Тогда
			ДобавленныеУпаковки.Удалить(ЭлементСписка);
		КонецЕсли;
	Иначе
		ДобавленнаяПотребительскаяУпаковка(ЭтотОбъект, УдаляемыйЭлемент.Штрихкод, "Удалить");
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева.Удалить(УдаляемыйЭлемент.НормализованныйШтрихкод);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьТаблицуИзмененийПодобраннойПродукции(Форма, КэшированныеЗначения)
	
	ТаблицаИзменений = Форма.ТаблицаИзмененийПодобраннойПродукции;
	
	Если ТаблицаИзменений.Количество() > 1 Тогда
		#Если Сервер Или ТолстыйКлиентУправляемоеПриложение Или ТолстыйКлиентОбычноеПриложение Тогда
		ТаблицаИзменений = ДанныеФормыВЗначение(ТаблицаИзменений, Тип("ТаблицаЗначений"));
		#Иначе
		ЗначенияСтрокТаблицыИзменений = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаИзменений Цикл
			ЗначенияСтроки = Новый Структура(Форма.ЗначенияСтрокиПоУмолчаниюДляТаблицыИзмененийПодобраннойПродукции);
			ЗаполнитьЗначенияСвойств(ЗначенияСтроки, СтрокаТаблицы);
			ЗначенияСтрокТаблицыИзменений.Добавить(ЗначенияСтроки);
		КонецЦикла;
		ТаблицаИзменений = ЗначенияСтрокТаблицыИзменений;
		#КонецЕсли
		СвернутьТаблицуИзмененийПодобраннойПродукции(ТаблицаИзменений, Форма.ВидМаркируемойПродукции);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаИзменений Цикл
		
		Если СтрокаТаблицы.Изменение > 0 Тогда
			
			ПодобраннаяПродукцияПриДобавленииСтроки(Форма, СтрокаТаблицы, КэшированныеЗначения);
			
		ИначеЕсли СтрокаТаблицы.Изменение < 0 Тогда
			
			ПодобраннаяПродукцияПриУдаленииСтроки(Форма, СтрокаТаблицы, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.КоличествоСтрокПодобраннойПродукции = Форма.ПодобраннаяМаркируемаяПродукция.Количество();
	
	Форма.ТаблицаИзмененийПодобраннойПродукции.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СвернутьТаблицуИзмененийПодобраннойПродукции(ТаблицаИзменений, ВидПродукции)
	ПроверкаИПодборПродукцииИСМП.СвернутьТаблицуИзмененийПодобраннойПродукции(ТаблицаИзменений, ВидПродукции);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяОбработатьСтрокуИзмененийПродукции(Форма, СтрокаИзменений)
	
	Если ПустаяСтрока(СтрокаИзменений.GTIN) Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками") Тогда
		
		Если СтрокаИзменений.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
			Возврат (СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
				Или СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
		КонецЕсли;
		
		Возврат (СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
		
	ИначеЕсли Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами") Тогда
		
		Возврат (СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
			Или СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
		
	КонецЕсли;
	
	Если СтрокаИзменений.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
		
		Возврат (СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
			Или СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоменклатурыСтрокСовпадают(ИсходнаяСтрока, СтрокаИзменений, ПроверятьGTIN = Ложь)
	
	Если Не ПроверкаИПодборПродукцииИСМПКлиентСервер.НоменклатурыСтрокСовпадают(ИсходнаяСтрока, СтрокаИзменений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроверятьGTIN Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ПроверкаИПодборПродукцииИСМПКлиентСервер.GTINРавны(ИсходнаяСтрока.GTIN, СтрокаИзменений.GTIN);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПодобраннаяПродукцияПриУдаленииСтроки(Форма, СтрокаИзменений, КэшированныеЗначения)
	
	Если Не ТребуетсяОбработатьСтрокуИзмененийПродукции(Форма, СтрокаИзменений) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриУдаленииСтроки(
		Форма, СтрокаИзменений, СтрокаИзменений.Изменение, ОбщийМодульКонтекстаПиП(),, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодобраннаяПродукцияПриДобавленииСтроки(Форма, СтрокаИзменений, КэшированныеЗначения)
	
	Если Не ТребуетсяОбработатьСтрокуИзмененийПродукции(Форма, СтрокаИзменений) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаИзменений) <> Тип("ДанныеФормыЭлементДерева") Тогда
		ИзменениеКоличества = СтрокаИзменений.Изменение;
	ИначеЕсли СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")Тогда
		ИзменениеКоличества = 1;
	ИначеЕсли Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
		Или Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами") Тогда
		ИзменениеКоличества = СтрокаИзменений.КоличествоПодчиненныхПотребительскихУпаковок;
	ИначеЕсли СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
		Или СтрокаИзменений.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		ИзменениеКоличества = СтрокаИзменений.КоличествоПодчиненныхПотребительскихУпаковок;
	Иначе
		ИзменениеКоличества = 1;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриДобавленииСтроки(
		Форма, СтрокаИзменений, ИзменениеКоличества, ОбщийМодульКонтекстаПиП(),, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененийНоменклатуры

&НаКлиенте
Процедура ПриВыбореНоменклатуры(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.Номенклатура = ВыбранноеЗначение;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореХарактеристики(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.Характеристика = ВыбранноеЗначение;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРегистрациюИзмененийНоменклатурыВСтроке()
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТаблицаИзмененийНоменклатуры.Добавить(), ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРегистрациюИзмененийНоменклатурыВСтроке()

	КоличествоИзменений = ТаблицаИзмененийНоменклатуры.Количество();
	
	Если КоличествоИзменений > 0 Тогда
		СтрокаИзменений = ТаблицаИзмененийНоменклатуры[КоличествоИзменений - 1];
		ТаблицаИзмененийНоменклатуры.Удалить(СтрокаИзменений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРегистрациюИзмененийНоменклатурыВСтроке()
	
	ТекущиеДанные = Элементы.ПодобраннаяМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоИзменений = ТаблицаИзмененийНоменклатуры.Количество();
	
	Если КоличествоИзменений > 0 Тогда
		СтрокаИзменений = ТаблицаИзмененийНоменклатуры[КоличествоИзменений - 1];
		СтрокаИзменений.НоваяНоменклатура   = ТекущиеДанные.Номенклатура;
		СтрокаИзменений.НоваяХарактеристика = ТекущиеДанные.Характеристика;
		СтрокаИзменений.НоваяСерия          = ТекущиеДанные.Серия;
		
		ОбработатьТаблицуИзмененийНоменклатуры(ЭтотОбъект);
	КонецЕсли;
	
	Элементы.ПодобраннаяМаркируемаяПродукция.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРегистрациюИзмененийНоменклатурыВТаблице()
	
	Для Каждого СтрокаТаблицы Из ПодобраннаяМаркируемаяПродукция Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаИзмененийНоменклатуры.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРегистрациюИзмененийНоменклатурыВТаблице()
	
	Для Каждого СтрокаТаблицы Из ПодобраннаяМаркируемаяПродукция Цикл
		СтрокаИзменений = ТаблицаИзмененийНоменклатуры[СтрокаТаблицы.НомерСтроки - 1];
		СтрокаИзменений.НоваяНоменклатура   = СтрокаТаблицы.Номенклатура;
		СтрокаИзменений.НоваяХарактеристика = СтрокаТаблицы.Характеристика;
		СтрокаИзменений.НоваяСерия          = СтрокаТаблицы.Серия;
	КонецЦикла;
	
	ОбработатьТаблицуИзмененийНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьТаблицуИзмененийНоменклатуры(Форма)
	
	ИндексСтроки = 0;
	
	Пока ИндексСтроки < Форма.ТаблицаИзмененийНоменклатуры.Количество() Цикл
		СтрокаТаблицы = Форма.ТаблицаИзмененийНоменклатуры[ИндексСтроки];
		
		Если ТребуетсяОбработатьСтрокуИзмененийНоменклатуры(СтрокаТаблицы) Тогда
			ИндексСтроки = ИндексСтроки + 1;
		Иначе
			Форма.ТаблицаИзмененийНоменклатуры.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.ТаблицаИзмененийНоменклатуры.Количество() > 0 Тогда
		
		СтрокиИзмененныхУпаковок               = Новый Соответствие;
		СтрокиИзмененныхУпаковокВерхнегоУровня = Новый Соответствие;
		
		ИзменитьНоменклатуруВСтрокахДерева(Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы(),
			Форма.ТаблицаИзмененийНоменклатуры, СтрокиИзмененныхУпаковок, Форма.ВидМаркируемойПродукции);
		
		Для Каждого КлючИЗначение Из СтрокиИзмененныхУпаковок Цикл
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ОпределитьТипУпаковкиПриИзмененииСтроки(
				Форма.ДеревоМаркированнойПродукции, КлючИЗначение.Ключ, ПроверкаИПодборПродукцииИСМПКлиентСервер, СтрокиИзмененныхУпаковокВерхнегоУровня);
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СтрокиИзмененныхУпаковокВерхнегоУровня Цикл
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(КлючИЗначение.Ключ, Истина);
		КонецЦикла;
		
		Форма.ТаблицаИзмененийНоменклатуры.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяОбработатьСтрокуИзмененийНоменклатуры(СтрокаИзменений)
	
	Если СтрокаИзменений.Номенклатура <> СтрокаИзменений.НоваяНоменклатура
		Или СтрокаИзменений.Характеристика <> СтрокаИзменений.НоваяХарактеристика
		Или СтрокаИзменений.Серия <> СтрокаИзменений.НоваяСерия Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьНоменклатуруВСтрокахДерева(СтрокиДерева, ТаблицаИзмененийНоменклатуры, СтрокиИзмененныхУпаковок, ВидПродукции)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ИзменитьНоменклатуруВСтрокахДерева(ПодчиненныеСтроки, ТаблицаИзмененийНоменклатуры, СтрокиИзмененныхУпаковок, ВидПродукции);
		Иначе
			
			Для Каждого СтрокаИзменений Из ТаблицаИзмененийНоменклатуры Цикл
				
				Если НоменклатурыСтрокСовпадают(СтрокаДерева, СтрокаИзменений, Истина) Тогда
					
					СтрокаДерева.Номенклатура   = СтрокаИзменений.НоваяНоменклатура;
					СтрокаДерева.Характеристика = СтрокаИзменений.НоваяХарактеристика;
					СтрокаДерева.Серия          = СтрокаИзменений.НоваяСерия;
					
					ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
					
					РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
					
					Если РодительскаяСтрока <> Неопределено Тогда
						ИдентификаторРодителя = РодительскаяСтрока.ПолучитьИдентификатор();
						Если СтрокиИзмененныхУпаковок.Получить(ИдентификаторРодителя) = Неопределено Тогда
							СтрокиИзмененныхУпаковок.Вставить(ИдентификаторРодителя, Истина);
						КонецЕсли;
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПризнакПроверкиУпаковки

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьСостояниеПроверкиУпаковки(Форма, СтрокаДерева, СоответствиеШтрихкодов)

	Если СтрокаДерева.НедопустимыйКодМаркировки
		Или Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
		
		СнятьПризнакПроверкиУпаковки(Форма, СтрокаДерева,, СоответствиеШтрихкодов);
		
	Иначе
		
		УстановитьПризнакПроверкиУпаковки(Форма, СтрокаДерева);
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СнятьПризнакПроверкиУпаковки(Форма, СтрокаДерева, ВключаяРодителей = Ложь, СоответствиеШтрихкодов)
	
	Если СтрокаДерева = Неопределено
		Или Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
		Или Не СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.ИдетПроверкаДаннойУпаковки = Ложь;
	#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
	Форма.Элементы.ДеревоМаркированнойПродукции.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	#КонецЕсли
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			СнятьПризнакПроверкиУпаковки(Форма, ПодчиненнаяСтрока,, СоответствиеШтрихкодов);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДерева.КоличествоПодчиненныхВсего  > 6
		И СтрокаДерева.КоличествоПодчиненныхНеПроверялось < 4 Тогда
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
				
				ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
				
				УстановитьСтатусОтсутствуетДляПодчиненных(Форма, ПодчиненнаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь, Форма.ЗагрузкаДанныхТСД);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, Форма.ЗагрузкаДанныхТСД);
		
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Если ВключаяРодителей Тогда
		
		Пока СтрокаРодитель <> Неопределено Цикл
			
			СтрокаРодитель.ИдетПроверкаДаннойУпаковки = Ложь;
			ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаРодитель);
			#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
			Форма.Элементы.ДеревоМаркированнойПродукции.Свернуть(СтрокаРодитель.ПолучитьИдентификатор());
			#КонецЕсли
			СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
			
		КонецЦикла;
		
		Форма.ИдентификаторТекущейПроверяемойУпаковки = -1;
		
	Иначе
		
		Если СтрокаРодитель = Неопределено Тогда
			Форма.ИдентификаторТекущейПроверяемойУпаковки = -1;
		ИначеЕсли СтрокаРодитель = СтрокаПотребительскиеУпаковкиБезУпаковки(Форма) Тогда
			Форма.ИдентификаторТекущейПроверяемойУпаковки = -1;
		ИначеЕсли СтрокаРодитель = СтрокаГрупповыеУпаковкиБезКоробки(Форма) Тогда
			Форма.ИдентификаторТекущейПроверяемойУпаковки = -1;
		Иначе
			Форма.ИдентификаторТекущейПроверяемойУпаковки = СтрокаРодитель.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	НормализироватьШтрихкодУпаковкиПоСоставуВложенныхУпаковок(Форма, СтрокаДерева, СоответствиеШтрихкодов);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПризнакПроверкиУпаковки(Форма, СтрокаДерева)
	
	Если СтрокаДерева = Неопределено
		Или Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
		Или СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Пока СтрокаРодитель <> Неопределено Цикл
		
		Если СтрокаРодитель.ИдетПроверкаДаннойУпаковки Тогда
			Прервать;
		Иначе
			СтрокаРодитель.ИдетПроверкаДаннойУпаковки = Истина;
			ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаРодитель);
		КонецЕсли;
		
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	СтрокаДерева.ИдетПроверкаДаннойУпаковки = Истина;
	Форма.Модифицированность                = Истина;
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	Форма.ИдентификаторТекущейПроверяемойУпаковки = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКонтекстПроверки(НоваяПроверяемаяУпаковка)
	
	Если НоваяПроверяемаяУпаковка = Неопределено Тогда
		ИдентификаторНовойПроверяемойУпаковки = -1;
	Иначе
		ИдентификаторНовойПроверяемойУпаковки = НоваяПроверяемаяУпаковка.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ИдентификаторНовойПроверяемойУпаковки = ИдентификаторТекущейПроверяемойУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
	Если ТекущаяПроверяемаяУпаковка <> Неопределено Тогда
		СнятьПризнакПроверкиУпаковки(ЭтотОбъект, ТекущаяПроверяемаяУпаковка, Истина, СоответствиеШтрихкодовСтрокДерева);
	КонецЕсли;
	
	УстановитьПризнакПроверкиУпаковки(ЭтотОбъект, НоваяПроверяемаяУпаковка);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПослеВопросаПриЗакрытииФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗакрытьФорму(ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

#Область ЗаполнениеКодовМаркировкиПоОснованию

&НаКлиенте
Процедура Подключаемый_ПослеВопросаЗагрузкиКодовПоОснованию(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если ПроверкаНеПоДокументу
		Или Не ЗначениеЗаполнено(ПроверяемыйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = "ПоЗаказамНаЭмиссию" Тогда
		
		КодыМаркировки = КодыМаркировкиПоОснованию(ПроверяемыйДокумент);
		Если КодыМаркировки.Количество() = 0 Тогда

			ОповещениеОЗавершении = Новый ОписаниеОповещения(
				"Подключаемый_ПослеВыбораЗаказовНаЭмиссию", ЭтотОбъект);
			ВыбратьЗаказыНаЭмиссиюДляЗаполненияКодовМаркировки(ОповещениеОЗавершении);
			
		Иначе
			ЗагрузитьКодыМаркировкиПоОснованию(КодыМаркировки);
		КонецЕсли;
	
	ИначеЕсли РезультатВопроса = "ПоОтчетамОНанесении" Тогда

		ОповещениеОЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПослеВыбораОтчетовОНаНесении", ЭтотОбъект);
		ВыбратьОтчетыОНанесенииДляЗаполненияКодовМаркировки(ОповещениеОЗавершении);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаказыНаЭмиссиюДляЗаполненияКодовМаркировки(ОповещениеОЗавершении)
	
	СтруктураОтбора   = Новый Структура();
	ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("РежимВыбора",        Истина);
	
	СпособВводаВОборот = СпособВводаВОборотПоДокументу(ПроверяемыйДокумент);
	Если ЗначениеЗаполнено(СпособВводаВОборот) Тогда
		СтруктураОтбора.Вставить("СпособВводаВОборот", СпособВводаВОборот);
	КонецЕсли;
	
	СтруктураОтбора.Вставить("Организация",  Организация);
	СтруктураОтбора.Вставить("ВидПродукции", ВидМаркируемойПродукции);
	СтруктураОтбора.Вставить(
		"СервисПровайдер",
		ПредопределенноеЗначение("Справочник.СервисПровайдерыСУЗ.ПустаяСсылка"));
	
	ОткрытьФорму(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаСпискаДокументов",
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		ОповещениеОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОтчетыОНанесенииДляЗаполненияКодовМаркировки(ОповещениеОЗавершении)
	
	СтруктураОтбора   = Новый Структура();
	ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("РежимВыбора",        Истина);
	
	СпособВводаВОборот = СпособВводаВОборотПоДокументу(ПроверяемыйДокумент);
	Если ЗначениеЗаполнено(СпособВводаВОборот) Тогда
		СтруктураОтбора.Вставить("СпособВводаВОборот", СпособВводаВОборот);
	КонецЕсли;
	
	СтруктураОтбора.Вставить("Организация",  Организация);
	СтруктураОтбора.Вставить("ВидПродукции", ВидМаркируемойПродукции);
	СтруктураОтбора.Вставить("Операция",     ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки());
	СтруктураОтбора.Вставить("ОтчетПроизводственнойЛинии", Ложь);
	
	ОткрытьФорму(
		"Документ.МаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов",
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		ОповещениеОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораЗаказовНаЭмиссию(ВыбранныеЗаказы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеЗаказы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки = КодыМаркировкиПоЗаказамНаЭмиссию(ВыбранныеЗаказы);
	
	ЗагрузитьКодыМаркировкиПоОснованию(КодыМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОтчетовОНанесении(ВыбранныеОтчеты, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки = КодыМаркировкиПоОтчетамОНанесении(ВыбранныеОтчеты);
	
	ЗагрузитьКодыМаркировкиПоОснованию(КодыМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиПоОснованию(КодыМаркировки)
	
	Если КодыМаркировки.Количество() > 0 Тогда
		ЗагрузкаДанныхПоОснованию = Истина;
		ПараметрыОбработкиТСД = НовыеПараметрыОбработкиТСД();
		Подключаемый_ПолученыДанныеИзТСД(КодыМаркировки, ПараметрыОбработкиТСД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодыМаркировкиПоОснованию(Документ)
	
	Основания = ПечатьЭтикетокИСМП.МассивСвязанныхДокументовОснований(Документ);
	
	Возврат РегистрыСведений.ПулКодовМаркировкиСУЗ.КодыМаркировкиПоОснованию(Основания);
	
КонецФункции

&НаСервереБезКонтекста
Функция КодыМаркировкиПоЗаказамНаЭмиссию(ЗаказыНаЭмиссию)
	
	Возврат РегистрыСведений.ПулКодовМаркировкиСУЗ.КодыМаркировкиПоОснованию(ЗаказыНаЭмиссию);
	
КонецФункции

&НаСервереБезКонтекста
Функция КодыМаркировкиПоОтчетамОНанесении(ОтчетыОНанесении)
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОтчетыОНанесении);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркировкаТоваровИСМПШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК Штрихкод
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК МаркировкаТоваровИСМПШтрихкодыУпаковок
	|ГДЕ
	|	МаркировкаТоваровИСМПШтрихкодыУпаковок.Ссылка В (&Ссылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПоляСтрокой = Новый Структура("Количество,ШтрихкодМаркиАлкогольнойПродукции,ШтрихкодУпаковки",1,"","");
		ПоляСтрокой.Вставить("Штрихкод", Выборка.Штрихкод);
		ВозвращаемоеЗначение.Добавить(ПоляСтрокой);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервереБезКонтекста
Функция СпособВводаВОборотПоДокументу(Документ)
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		Операция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Операция");
		Возврат ШтрихкодированиеИСМПКлиентСервер.СпособВводаВОборотСУЗПоВидуОперации(Операция);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗакрытьФорму(ДополнительныеПараметры = Неопределено) Экспорт
	
	ВыполняетсяЗакрытие = Истина;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ВладелецФормы, "Документ.МаркировкаТоваровИСМП") Тогда
		
		ДанныеСохранения = Новый Структура;
		ДанныеСохранения.Вставить("СохраненВыборПоМаркируемойПродукции", СохраненВыборПоМаркируемойПродукции);
		ДанныеСохранения.Вставить("ДанныеВыбораПоМаркируемойПродукции",  ДанныеВыбораПоМаркируемойПродукции);
		СохранитьНастройкиВыбораМаркируемойПродукцииПоДокументу(ДанныеСохранения, ПроверяемыйДокумент);
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиВыбораМаркируемойПродукцииПоДокументу(ДанныеСохранения, ПроверяемыйДокумент)
	
	ШтрихкодированиеИС.СохранитьНастройкиВыбораМаркируемойПродукции(ДанныеСохранения, ПроверяемыйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область СтатусПроверки

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОперацииГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтложенаПриПроверкеГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	НепроверяемыеТипыУпаковок = Новый СписокЗначений;
	НепроверяемыеТипыУпаковок.Добавить(ТипУпаковкиПотребительскиеУпаковкиБезУпаковки());
	НепроверяемыеТипыУпаковок.Добавить(ТипУпаковкиГрупповыеУпаковкиБезКоробки());
	
	ОтборЭлемента.ПравоеЗначение = НепроверяемыеТипыУпаковок;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимПросмотра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НедопустимыйКодМаркировки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ПредставлениеПроверкиКодаМаркировки"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НедопустимыйКодМаркировки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Молочная продукция
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяМаркируемаяПродукцияГоденДо.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.СкоропортящаясяПродукция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy;");
	
	// Молочная продукция скоропортящаяся
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяМаркируемаяПродукцияГоденДо.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.СкоропортящаясяПродукция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM.yyyy HH:mm';");
	
	// Срок годности не заполнен (не получен из сервиса, выключен онлайн контроль)
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяМаркируемаяПродукцияГоденДо.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.ГоденДо");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не загружен>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти

#Область ПроверкаСодержимого

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхПотребительскихУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтложено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтсутствует");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтложенаПриПроверкеГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;

	НепроверяемыеТипыУпаковок = Новый СписокЗначений;
	НепроверяемыеТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	НепроверяемыеТипыУпаковок.Добавить(ТипУпаковкиПотребительскиеУпаковкиБезУпаковки());
	НепроверяемыеТипыУпаковок.Добавить(ТипУпаковкиГрупповыеУпаковкиБезКоробки());

	ОтборЭлемента.ПравоеЗначение = НепроверяемыеТипыУпаковок;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСодержитсяВДанныхДокумента");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтсутствует");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ВсяУпаковкаПроверена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОперацииГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхНеПроверялось.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхВНаличии.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхОтсутствует.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхНеЧислилось.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхОтложено.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхВсего.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииТекстОшибкиПроверкиСредствамиККТ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СостояниеТребованияПолногоКодаККТ");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииТекстОшибкиПроверкиСредствамиККТ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СостояниеТребованияПолногоКодаККТ");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти

#Область СодержимоеУпаковки
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхПотребительскихУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ИдетПроверкаДаннойУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.GTIN");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков();
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ИдетПроверкаДаннойУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТребуетсяПеремаркировка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
#КонецОбласти

#Область НомерСтикераОтолжена

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НомерСтикераОтложено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не помечена>'"));

#КонецОбласти

#Область Отборы

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УстановленОтбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСоответствуетОтбору");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

#КонецОбласти

#Область ПодобраннаяПродукция
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ПодобраннаяМаркируемаяПродукцияХарактеристика",
		"ПодобраннаяМаркируемаяПродукция.ХарактеристикиИспользуются");
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		"ПодобраннаяМаркируемаяПродукцияСерия",
		"ПодобраннаяМаркируемаяПродукция.СтатусУказанияСерий",
		"ПодобраннаяМаркируемаяПродукция.ТипНоменклатуры");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяМаркируемаяПродукцияНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.ПредставлениеНоменклатуры"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяМаркируемаяПродукцияНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.ПредставлениеНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.GTIN");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.ПредставлениеНоменклатуры"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.НоменклатураСопоставлена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.GTIN");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков();

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.НоменклатураСопоставленаПоУПД");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ГруппаОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.НоменклатураСопоставлена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.GTIN");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков();

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.НоменклатураСопоставленаПоУПД");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяМаркируемаяПродукцияGTIN.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.GTIN");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.ПредставлениеGTIN");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.ПредставлениеGTIN"));
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяМаркируемаяПродукцияGTIN.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.GTIN");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.ПредставлениеGTIN");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не заполнен>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяМаркируемаяПродукцияКоличество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоИС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяМаркируемаяПродукцияКоличествоПодобрано.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодобраннаяМаркируемаяПродукция.ПроизвольнаяЕдиницаУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=0;");
	
#КонецОбласти

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпозиционироватьсяНаСтрокеДерева(Форма, СтрокаДерева)
	
	Форма.Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСоответствияШтрихкодовДляКоллекции(КоллекцияСтрокДерева)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		
		СоответствиеШтрихкодовСтрокДерева.Удалить(СтрокаДерева.НормализованныйШтрихкод);
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			ЭлементСписка = ДобавленныеУпаковки.НайтиПоЗначению(СтрокаДерева.Штрихкод);
			Если ЭлементСписка <> Неопределено Тогда
				ДобавленныеУпаковки.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЕсли;
		УдалитьИзСоответствияШтрихкодовДляКоллекции(СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюКомандУпаковок(Форма)
	
	КомандыДоступны = Форма.ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки");
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ДеревоМаркированнойПродукцииДобавитьПустуюКоробку.Видимость Тогда
		Элементы.ДеревоМаркированнойПродукцииДобавитьПустуюКоробку.Доступность = КомандыДоступны;
	КонецЕсли;
	
	Если Элементы.ДеревоМаркированнойПродукцииМаркироватьУпаковку.Видимость Тогда
		Элементы.ДеревоМаркированнойПродукцииМаркироватьУпаковку.Доступность = КомандыДоступны;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева, Детализация)
	
	Если Детализация = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ТекущаяСтрокаДерева = Неопределено Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТекущаяСтрокаДерева.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		Возврат Истина;
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущаяСтрокаДерева.ТипУпаковки) Тогда
		
		Возврат ТекущаяСтрокаДерева.НеСодержитсяВДанныхДокумента;
		
	Иначе
		
		Возврат УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева.ПолучитьРодителя(), Детализация);
		
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПравоДобавлениеСерий()
	
	Возврат ПроверкаИПодборПродукцииИСМП.ЕстьПравоДобавлениеСерий();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПродукцияСоответствуетДокументуОснованию(Форма, ПроверяемаяСтрока)
	
	СтрокаМаркируемойПродукцииНайдена = Ложь;
	
	Для Каждого СтрокаМаркируемойПродукции Из Форма.ПодобраннаяМаркируемаяПродукция Цикл
		Если НоменклатурыСтрокСовпадают(СтрокаМаркируемойПродукции, ПроверяемаяСтрока) Тогда
			СтрокаМаркируемойПродукцииНайдена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаМаркируемойПродукцииНайдена Тогда
		Возврат Истина;
	ИначеЕсли Форма.КонтролироватьСканируемуюПродукциюПоДокументуОснованию Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ШтрихкодыУпаковокДокументаСоответствуютВидуПродукции(Документ, ПараметрыСканирования) Экспорт
	
	ПользовательскиеПараметрыРазбора = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбора.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = (ТипЗнч(Документ) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
	
	ШтрихкодыУпаковокДокумента = Новый Массив;
	ШтрихкодированиеИСПереопределяемый.ЗаполнитьШтрихкодыУпаковокДокумента(Документ, ШтрихкодыУпаковокДокумента);
	ДопустимыеВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	
	Для Каждого Штрихкод Из ШтрихкодыУпаковокДокумента Цикл
		ПримечаниеКРазборуШтрихкода = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			Штрихкод, ДопустимыеВидыПродукции, ПримечаниеКРазборуШтрихкода,, ПользовательскиеПараметрыРазбора);
		Если ДанныеРазбора <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидУпаковкиПоВходящимДанным(ДанныеШтрихкода, ТипУпаковки, ВидМаркируемойПродукции, ПроверяемыйДокумент)
	ВидУпаковки = Неопределено;
	Если ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая");
	Иначе
		ПользовательскиеПараметрыРазбора = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбора.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = (ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
		РезультатРазбора = РазобратьКодМаркировки(ДанныеШтрихкода.Штрихкод, ВидМаркируемойПродукции, ПользовательскиеПараметрыРазбора);
		Если РезультатРазбора <> Неопределено Тогда
			ВидУпаковки = РезультатРазбора.ВидУпаковки;
		КонецЕсли;
	КонецЕсли;
	Возврат ВидУпаковки;
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьКодМаркировки(Штрихкод, ВидМаркируемойПродукции, ПользовательскиеПараметры)
	Возврат РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(Штрихкод, ВидМаркируемойПродукции,,, ПользовательскиеПараметры);
КонецФункции

#КонецОбласти

#Область РаботаСТСД

#Область Загрузка

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, ДополнительныеПараметры) Экспорт
	
	РезультатАвторизацииПоОрганизации = РезультатАвторизации[Организация];
	Если РезультатАвторизацииПоОрганизации <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработкиТСД = НовыеПараметрыОбработкиТСД();
	ПараметрыОбработкиТСД.ЭтоЗавершениеАвторизации = Истина;
	ПараметрыОбработкиТСД.Состояние                = ДополнительныеПараметры.ДополнительныеПараметры;
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.Штрихкоды, ПараметрыОбработкиТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, ПараметрыОбработкиТСД) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		ПоказатьПредупреждение(, НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхПоОснованию Тогда
		ПараметрыУведомления = Новый Структура();
		ПараметрыУведомления.Вставить("Заголовок", НСтр("ru = 'Загрузка данных по заказам'"));
		ПараметрыУведомления.Вставить("Текст",     НСтр("ru = 'Начата загрузка данных по заказам на эмиссию.'"));
	Иначе
		ПараметрыУведомления = Неопределено;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД(ПараметрыУведомления);
	
	ШтрихкодированиеИСКлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	
	ИнициализироватьПараметрыСканирования();
	// Параметр сканирования ДополнительныеВариантыСопоставленияНоменклатуры будет дополнен на сервере
	
	ДанныеДляТСД = Новый Структура;
	ДанныеДляТСД.Вставить("Штрихкоды",                         Штрихкоды);
	ДанныеДляТСД.Вставить("ПараметрыСканирования",             ПараметрыСканирования);
	ДанныеДляТСД.Вставить("СоответствиеШтрихкодовСтрокДерева", СоответствиеШтрихкодовСтрокДерева);
	ДанныеДляТСД.Вставить("ДополнительныеПараметры",           ПараметрыОбработкиТСД);
	
	ОбработатьПолученныеДанныеТСДНаСервере(ДанныеДляТСД, КэшированныеЗначения);
	СоответствиеШтрихкодовСтрокДерева = ДанныеДляТСД.СоответствиеШтрихкодовСтрокДерева;
	
	Если ЗагрузкаДанныхТСД.ПредложитьЗагрузитьВУпаковке Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПредложитьЗагрузитьВУпаковке", ЭтотОбъект, Штрихкоды);
		
		Если ЗагрузкаДанныхТСД.ТекстПредложенияОЗагрузке = "ОдинКодГрупповойУпаковкиИКодыМаркировки" Тогда
			
			ПоказатьВопрос(
				ОповещениеОЗавершении,
				НСтр("ru = 'Отсканирован один код групповой упаковки и коды маркировки. Загрузить групповую упаковку с вложенным составом?'"),
				РежимДиалогаВопрос.ДаНет);
			
			Возврат;
			
		ИначеЕсли ЗагрузкаДанныхТСД.ТекстПредложенияОЗагрузке = "ОднаУпаковкаИКодыГрупповыхУпаковок" Тогда
			
			ПоказатьВопрос(
				ОповещениеОЗавершении,
				НСтр("ru = 'Отсканирована одна упаковка и коды групповых упаковок. Загрузить упаковку с вложенным составом?'"),
				РежимДиалогаВопрос.ДаНет);
			
			Возврат;
			
		ИначеЕсли ЗагрузкаДанныхТСД.ТекстПредложенияОЗагрузке = "ОднаУпаковкаИКодыМаркировки" Тогда
			
			ПоказатьВопрос(ОповещениеОЗавершении,
				НСтр("ru = 'Отсканирована одна упаковка и коды маркировки. Загрузить упаковку с вложенным составом?'"),
				РежимДиалогаВопрос.ДаНет);
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ПредложитьИзменитьДетализацию Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПредложитьИзменитьДетализациюЗавершение", ЭтотОбъект, Штрихкоды);
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(Истина, СтрШаблон(НСтр("ru = 'Переключить детализацию на %1'"), ЗагрузкаДанныхТСД.РекомендуемыеДетализации[0]));
		КнопкиВопроса.Добавить(Ложь,   СтрШаблон(НСтр("ru = 'Оставить детализацию %1'"), ДетализацияСтруктурыХранения));
		
		ТекстВопроса =
			СтрШаблон(НСтр("ru = 'Отсканировано: %1 и это достаточно большой объем.
			                     |Продолжение работы с текущим уровнем детализации может привести к значительному времени обработки.
			                     |Рекомендуется переключить детализацию на %2.'"),
				ЗагрузкаДанныхТСД.ОписаниеРекомендацииСменыДетализации, ЗагрузкаДанныхТСД.РекомендуемыеДетализации[0]);
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, КнопкиВопроса,, Истина);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ТребуетсяАвторизация Тогда
		
		Если ПараметрыОбработкиТСД.ЭтоЗавершениеАвторизации Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка данных недоступна: авторизация в сервисе не пройдена'"));
			
			ЗагрузкаДанныхТСД = Неопределено;
			
			Возврат;
			
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("Штрихкоды, ДополнительныеПараметры", Штрихкоды, ПараметрыОбработкиТСД.Состояние);
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ИнтерфейсАвторизацииИСМПКлиент.ПараметрыЗапросаКлючаСессии(
				Организация, ВидМаркируемойПродукции),
			Новый ОписаниеОповещения("ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, ПараметрыОповещения));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		
		Если ТипЗнч(ЗагрузкаДанныхТСД.ТекстОбщейОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		Иначе
			ПараметрыОткрытияФормы.ТекстОшибки = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВсеШтрихкоды, ШтрихкодыДляСопоставления",
			Штрихкоды, ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления);
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления, ЭтотОбъект, ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок) Тогда
		
		ДополнительныеПараметры = Новый Структура("ВсеШтрихкоды", Штрихкоды);
		ОписаниеОповещения = Новый ОписаниеОповещения("УточнениеКоэффициентовУпаковокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОткрытияФормы = Новый Структура(
			"АдресУточнениеКоэффициентовУпаковок", ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок);
		ОткрытьФорму(
			"ОбщаяФорма.УточнениеКоэффициентовУпаковокИСМП",
			ПараметрыОткрытияФормы, ЭтотОбъект,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве
		И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(
			ВидМаркируемойПродукции);
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок;
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(
			ЭтотОбъект, ПараметрыОткрытияФормы);
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	// Если требуется уточнять данные, то необходимо до вызова окон уточнения пересчитать итоги в дереве маркированной продукции
	Если ЗагрузкаДанныхТСД.Обработано < ЗагрузкаДанныхТСД.Всего Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
	КонецЕсли;
	// Начиная с этого момента - разрешено пересчитывать итоги.
	ЗагрузкаДанныхТСД.ПересчитыватьИтогиВДеревеМаркированнойПродукции = Истина;
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьЗагрузитьВУпаковке(Результат, Штрихкоды) Экспорт
	
	ПараметрыОбработкиТСД = НовыеПараметрыОбработкиТСД();
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыОбработкиТСД.Состояние = "ЗаполнениеИерархии";
	Иначе
		ПараметрыОбработкиТСД.Состояние = "ИерархияПроверена";
	КонецЕсли;
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, ПараметрыОбработкиТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеШтрихкодовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	Если Результат.НайденыНезарегистрированныеТовары Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Результат.ОтложенныеТовары, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработкиТСД = НовыеПараметрыОбработкиТСД();
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ВсеШтрихкоды, ПараметрыОбработкиТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеКоэффициентовУпаковокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработкиТСД = НовыеПараметрыОбработкиТСД();
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ВсеШтрихкоды, ПараметрыОбработкиТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьИзменитьДетализациюЗавершение(ПереключитьДетализациюНаРекомендуемую, Штрихкоды) Экспорт
	
	Если ПереключитьДетализациюНаРекомендуемую Тогда
		ИзменитьРежимДетализации(ЗагрузкаДанныхТСД.РекомендуемыеДетализации[0]);
	КонецЕсли;
	
	ПараметрыОбработкиТСД = НовыеПараметрыОбработкиТСД();
	ПараметрыОбработкиТСД.Состояние = "ДетализацияПроверена";
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, ПараметрыОбработкиТСД);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеДанныеТСДНаСервере(ДанныеДляТСД, КэшированныеЗначения)
	
	Результат = ГрупповаяОбработкаШтрихкодовИС.РезультатЗагрузкиШтрихкодовИзТСД(ИдентификаторТекущейПроверяемойУпаковки);
	
	ЕстьИерархия = ГрупповаяОбработкаШтрихкодовИС.ДополнитьУпорядочитьДанныеТСД(ДанныеДляТСД.Штрихкоды);
	
	ПроверитьДоступнуюИерархиюШтрихкодов = (ДанныеДляТСД.ДополнительныеПараметры.Состояние <> "ИерархияПроверена")
	                                     И (ДанныеДляТСД.ДополнительныеПараметры.Состояние <> "ЗаполнениеИерархии")
	                                     И ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
	                                     И ДанныеДляТСД.ПараметрыСканирования.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки;
	
	ПроверитьРекомендуемуюДетализацию = (ДанныеДляТСД.ДополнительныеПараметры.Состояние <> "ДетализацияПроверена");
	
	Если ДанныеДляТСД.ДополнительныеПараметры.ЭтоВосстановлениеВложенностиУпаковок Тогда
		Результат.ЭтоВосстановлениеВложенностиУпаковок = Истина;
		Результат.ДанныеДляВосстановлениеВложенности   = ДанныеДляТСД.ДополнительныеПараметры.ДополнительныеПараметры;
	КонецЕсли;
	
	Если Результат.ЭтоВосстановлениеВложенностиУпаковок Тогда
		ПроверитьДоступнуюИерархиюШтрихкодов = Ложь;
		ПроверитьРекомендуемуюДетализацию    = Ложь;
	КонецЕсли;
	
	КоличествоУпаковок = 0;
	КоличествоПалет    = 0;
	КоличествоКоробов  = 0;
	КоличествоГрупповыхУпаковок       = 0;
	КоличествоПотребительскихУпаковок = 0;
	
	ЕстьУпаковка     = Ложь;
	ШтрихкодУпаковки = "";
	
	ДанныеШтрихкодов            = Новый Массив;
	МассивПропущенныхШтрихкодов = Новый Массив;
	КешДанныхРазбора            = Новый Соответствие;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов                                = ДанныеДляТСД.ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки;
	ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация                                   = ДанныеДляТСД.ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП;
	ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = (ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
	
	Если ЕстьИерархия Тогда
		ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок(Истина);
		ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок, Ложь);
		ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД = Истина;
		СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИС.ПодготовитьДополнительныеВариантыСопоставленияНоменклатуры(
		ДанныеДляТСД.ПараметрыСканирования, ПодобраннаяМаркируемаяПродукция);
	
	Для Каждого СтрокаДанныхТСД Из ДанныеДляТСД.Штрихкоды Цикл
		
		СтрокаДанныхТСД.Вставить("ШтрихкодСОшибкой", Ложь);
		
		Штрихкод = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(СтрокаДанныхТСД.Штрихкод);
		ДанныеРазбора = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
			Штрихкод, ВидМаркируемойПродукции, КешДанныхРазбора,, ПользовательскиеПараметрыРазбораКодаМаркировки);
		
		Если ДанныеРазбора.ВидУпаковки = Неопределено Тогда
			
			Штрихкод = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Штрихкод, "");
			
			ИнтеграцияИС.СообщитьПользователюВФорму(
				УникальныйИдентификатор,
				СтрШаблон(
					НСтр("ru = 'Код %1 не является штрихкодом потребительской, групповой или логистической
					           |упаковки для вида: %2. Пропущен.'"),
					Штрихкод, ВидМаркируемойПродукции));
			
			МассивПропущенныхШтрихкодов.Добавить(СтрокаДанныхТСД);
			Продолжить;
			
		КонецЕсли;
		
		Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок + 1;
		ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			КоличествоГрупповыхУпаковок = КоличествоГрупповыхУпаковок + 1;
			Если Не ЕстьУпаковка Тогда
				ШтрихкодУпаковки = СтрокаДанныхТСД.Штрихкод;
			КонецЕсли;
		ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			КоличествоУпаковок = КоличествоУпаковок + 1;
			ЕстьУпаковка       = Истина;
			ШтрихкодУпаковки   = СтрокаДанныхТСД.Штрихкод;
			
			GTIN = Неопределено;
			ДанныеРазбораИРезультат = КешДанныхРазбора[Штрихкод];
			Если ДанныеРазбораИРезультат <> Неопределено Тогда
				ДанныеРазбораИРезультат.ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN", GTIN);
			КонецЕсли;
			Если ЗначениеЗаполнено(GTIN) Тогда
				КоличествоКоробов = КоличествоКоробов + 1;
			Иначе
				КоличествоПалет = КоличествоПалет + 1;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДанныхТСД.Вставить("НормализованныйШтрихкод", ДанныеРазбора.НормализованныйШтрихкод);
		
		Если ЗначениеЗаполнено(СтрокаДанныхТСД.ШтрихкодУпаковки) Тогда
			
			ПроверитьДоступнуюИерархиюШтрихкодов = Ложь;
			
			ШтрихкодУпаковки = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(СтрокаДанныхТСД.ШтрихкодУпаковки);
			ДанныеРазбора = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
				ШтрихкодУпаковки, ВидМаркируемойПродукции, КешДанныхРазбора,, ПользовательскиеПараметрыРазбораКодаМаркировки);
			
			Если ЗначениеЗаполнено(ДанныеРазбора.ВидУпаковки) Тогда
				СтрокаДанныхТСД.Вставить("НормализованныйШтрихкодУпаковки", ДанныеРазбора.НормализованныйШтрихкод);
			Иначе
				
				ШтрихкодУпаковки = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ШтрихкодУпаковки, "");
				
				ИнтеграцияИС.СообщитьПользователюВФорму(
					УникальныйИдентификатор,
					СтрШаблон(
						НСтр("ru = 'Код %1 не является штрихкодом групповой или логистической 
						           |упаковки для вида: %2. Пропущен.'"),
						ШтрихкодУпаковки, ВидМаркируемойПродукции));
				СтрокаДанныхТСД.Вставить("НормализованныйШтрихкодУпаковки", "");
			КонецЕсли;
			
		Иначе
			СтрокаДанныхТСД.Вставить("НормализованныйШтрихкодУпаковки", "");
		КонецЕсли;
		
		Если ЕстьИерархия Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанныхТСД.НормализованныйШтрихкодУпаковки) Тогда
				СтрокаДереваВерхнегоУровня = СоответствиеСтрокДереваУпаковок[СтрокаДанныхТСД.НормализованныйШтрихкодУпаковки];
				Если СтрокаДереваВерхнегоУровня = Неопределено Тогда
					СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
				КонецЕсли;
			Иначе
				СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
			КонецЕсли;
			
			СтрокаДерева = СтрокаДереваВерхнегоУровня.Строки.Добавить();
			
			ДанныеРазбораИПримечание = КешДанныхРазбора[Штрихкод];
			ДанныеРазбора = ДанныеРазбораИПримечание.ДанныеРазбора;
			
			// Заполнение GTIN и EAN
			Если ДанныеРазбора.СоставКодаМаркировки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеРазбора.СоставКодаМаркировки);
			КонецЕсли;
			
			СтрокаДерева.ШтрихкодBase64       = СтрокаДанныхТСД.Штрихкод; // ШтрихкодBase64
			СтрокаДерева.Штрихкод             = ДанныеРазбора.НормализованныйКодМаркировки;
			СтрокаДерева.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
			СтрокаДерева.ВидУпаковки          = ДанныеРазбора.ВидУпаковки;
			СтрокаДерева.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
			СтрокаДерева.ВидПродукции         = ВидМаркируемойПродукции;
			СтрокаДерева.ДанныеРазбора        = ДанныеРазбора;
			
			Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			Иначе
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
			
			СтрокаДерева.Входящий = Истина;
			
			ШтрихкодированиеИС.ПроверитьСтрокуДанныхНаВхождениеНедопустимыхСимволов(СтрокаДерева);
			
			СтрокаДерева.НормализованныйШтрихкод = ШтрихкодированиеМОТП.НормализованныйШтрихкод(
				ДанныеРазбора.НормализованныйКодМаркировки, ВидМаркируемойПродукции, КешДанныхРазбора, ПользовательскиеПараметрыРазбораКодаМаркировки);
			
			СоответствиеСтрокДереваУпаковок.Вставить(СтрокаДанныхТСД.НормализованныйШтрихкод, СтрокаДерева);
			
		КонецЕсли;
		
		ДанныеШтрихкода = Новый Структура(
			"Штрихкод, ШтрихкодBase64, Количество",
			Штрихкод, СтрокаДанныхТСД.Штрихкод, СтрокаДанныхТСД.Количество);
		
		ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
		
	КонецЦикла;
	
	Если МассивПропущенныхШтрихкодов.Количество() Тогда
		Для Каждого ЭлементМассива Из МассивПропущенныхШтрихкодов Цикл
			ПорядковыйНомер = ДанныеДляТСД.Штрихкоды.Найти(ЭлементМассива);
			Если ПорядковыйНомер <> Неопределено Тогда
				ДанныеДляТСД.Штрихкоды.Удалить(ПорядковыйНомер);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекущаяДетализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
	Если ЗначениеЗаполнено(ДанныеДляТСД.ПараметрыСканирования.ДетализацияСтруктурыХранения) Тогда
		ТекущаяДетализация = ДанныеДляТСД.ПараметрыСканирования.ДетализацияСтруктурыХранения;
	КонецЕсли;
	
	ПредложитьИзменитьДетализацию        = Ложь;
	РекомендуемыеДетализации             = Новый Массив;
	ОписаниеРекомендацииСменыДетализации = "";
	Если ПроверитьРекомендуемуюДетализацию Тогда
		Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
			РекомендуемыеДетализации.Добавить(Перечисления.ДетализацияСтруктурыХраненияИС.Полная);
		ИначеЕсли КоличествоПалет > 0 Или КоличествоКоробов >= 25 Тогда
			РекомендуемыеДетализации.Добавить(Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами);
		ИначеЕсли КоличествоКоробов >= 5 Или КоличествоГрупповыхУпаковок >= 250 Тогда
			РекомендуемыеДетализации.Добавить(Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками);
			РекомендуемыеДетализации.Добавить(Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами);
		Иначе
			РекомендуемыеДетализации.Добавить(Перечисления.ДетализацияСтруктурыХраненияИС.Полная);
			РекомендуемыеДетализации.Добавить(Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами);
			РекомендуемыеДетализации.Добавить(Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками);
			РекомендуемыеДетализации.Добавить(Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими);
			РекомендуемыеДетализации.Добавить(Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки);
		КонецЕсли;
		ПредложитьИзменитьДетализацию = РекомендуемыеДетализации.Найти(ТекущаяДетализация) = Неопределено;
		
		СтрокиСКоличествомУпаковок = Новый Массив;
		ДобавитьПредставлениеКоличестваУпаковок(СтрокиСКоличествомУпаковок, НСтр("ru = 'палета'"),                    КоличествоПалет);
		ДобавитьПредставлениеКоличестваУпаковок(СтрокиСКоличествомУпаковок, НСтр("ru = 'короб'"),                     КоличествоКоробов);
		ДобавитьПредставлениеКоличестваУпаковок(СтрокиСКоличествомУпаковок, НСтр("ru = 'групповая упаковка'"),        КоличествоГрупповыхУпаковок);
		ДобавитьПредставлениеКоличестваУпаковок(СтрокиСКоличествомУпаковок, НСтр("ru = 'потребительская упаковка'"),  КоличествоПотребительскихУпаковок);
		ОписаниеРекомендацииСменыДетализации = СтрСоединить(СтрокиСКоличествомУпаковок, ", ");
	КонецЕсли;
	
	Результат.ПредложитьИзменитьДетализацию        = ПредложитьИзменитьДетализацию;
	Результат.РекомендуемыеДетализации             = РекомендуемыеДетализации;
	Результат.ОписаниеРекомендацииСменыДетализации = ОписаниеРекомендацииСменыДетализации;
	Если ПредложитьИзменитьДетализацию Тогда
		ЗагрузкаДанныхТСД = Результат;
		Возврат;
	КонецЕсли;
	
	ПредложитьЗагрузитьВУпаковке = Ложь;
	Если ПроверитьДоступнуюИерархиюШтрихкодов Тогда
		ПредложитьЗагрузитьВУпаковке = Ложь;
		Если КоличествоУпаковок = 0 И КоличествоГрупповыхУпаковок = 1 И КоличествоПотребительскихУпаковок > 0 Тогда
			Результат.ТекстПредложенияОЗагрузке = "ОдинКодГрупповойУпаковкиИКодыМаркировки";
			ПредложитьЗагрузитьВУпаковке = Истина;
		ИначеЕсли КоличествоУпаковок = 1 И КоличествоГрупповыхУпаковок > 0 И КоличествоПотребительскихУпаковок = 0 Тогда
			Результат.ТекстПредложенияОЗагрузке = "ОднаУпаковкаИКодыГрупповыхУпаковок";
			ПредложитьЗагрузитьВУпаковке = Истина;
		ИначеЕсли КоличествоУпаковок = 1 И КоличествоГрупповыхУпаковок = 0 И КоличествоПотребительскихУпаковок > 0 Тогда
			Результат.ТекстПредложенияОЗагрузке = "ОднаУпаковкаИКодыМаркировки";
			ПредложитьЗагрузитьВУпаковке = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ПредложитьЗагрузитьВУпаковке = ПредложитьЗагрузитьВУпаковке;
	Если ПредложитьЗагрузитьВУпаковке Тогда
		ЗагрузкаДанныхТСД = Результат;
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляТСД.ДополнительныеПараметры.Состояние = "ЗаполнениеИерархии" Тогда
		
		ПредставлениеУпаковки = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ШтрихкодУпаковки);
		ДанныеРазбора = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
			ПредставлениеУпаковки, ВидМаркируемойПродукции, КешДанныхРазбора,, ПользовательскиеПараметрыРазбораКодаМаркировки);
		Если ЗначениеЗаполнено(ДанныеРазбора.ВидУпаковки) Тогда
			ПредставлениеУпаковки = ШтрихкодированиеМОТП.НормализованныйШтрихкод(
				ПредставлениеУпаковки, ВидМаркируемойПродукции, КешДанныхРазбора, ПользовательскиеПараметрыРазбораКодаМаркировки);
		Иначе
			ПредставлениеУпаковки = "";
		КонецЕсли;
		
		Для Каждого СтрокаДанныхТСД Из ДанныеДляТСД.Штрихкоды Цикл
			Если ЗначениеЗаполнено(СтрокаДанныхТСД.Штрихкод) Тогда
				Если СтрокаДанныхТСД.Штрихкод = ШтрихкодУпаковки Тогда
					СтрокаДанныхТСД.Уровень = -1;
				Иначе
					СтрокаДанныхТСД.ШтрихкодУпаковки = ШтрихкодУпаковки;
					СтрокаДанныхТСД.Вставить("НормализованныйШтрихкодУпаковки", ПредставлениеУпаковки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьИерархия Тогда
		// Сохранение параметров сканирования.
		// При подготовке дерева упаковок в сценарии работы с ТСД не следует выполнять обращения к ГИС МТ.
		// Все необходимые обращения выполнит механизм штрихкодирования.
		ШтрихкодированиеИСМПСлужебный.НормализоватьДанныеВложенныхШтрихкодов(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ДанныеДляТСД.ПараметрыСканирования);
		ШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ДанныеДляТСД.ПараметрыСканирования);
		
	КонецЕсли;
	
	РезультатОбработкиШтрихкодов = ШтрихкодированиеИС.ОбработатьШтрихкоды(
		ДанныеШтрихкодов, ДанныеДляТСД.ПараметрыСканирования,
		Неопределено, ЭтотОбъект, КешДанныхРазбора, ДанныеПоШтрихкодам);
	
	// 1. Авторизация
	ТребуетсяАвторизация = Ложь;
	Для Каждого КлючИЗначение Из РезультатОбработкиШтрихкодов.РезультатыОбработки Цикл
		РезультатОбработки = КлючИЗначение.Значение;
		Если РезультатОбработки.Свойство("ТребуетсяАвторизацияИСМП")
			И РезультатОбработки.ТребуетсяАвторизацияИСМП Тогда
			ТребуетсяАвторизация = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат.ТребуетсяАвторизация = ТребуетсяАвторизация;
	Если ТребуетсяАвторизация Тогда
		ЗагрузкаДанныхТСД = Результат;
		Возврат;
	КонецЕсли;
	
	// В коллекциях: ДанныеДляТСД.Штрихкоды и РезультатОбработкиШтрихкодов.РезультатыОбработки,
	// хранятся одни и теже коды маркировки с разной нормализацией.
	ДополнительныеРезультатыОбработки = Новый Соответствие;
	Для Каждого КлючЗначение Из РезультатОбработкиШтрихкодов.РезультатыОбработки Цикл
		ДополнительныеРезультатыОбработки.Вставить(КлючЗначение.Значение.ДанныеШтрихкода.НормализованныйШтрихкод, КлючЗначение.Значение);
	КонецЦикла;
	Для Каждого КлючИЗначение Из ДополнительныеРезультатыОбработки Цикл
		РезультатОбработкиШтрихкодов.РезультатыОбработки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Для Каждого ЭлементДанных Из ДанныеДляТСД.Штрихкоды Цикл
		ЭлементДанных.НормализованныйШтрихкод = ШтрихкодированиеМОТП.НормализованныйШтрихкод(
			ЭлементДанных.НормализованныйШтрихкод, ВидМаркируемойПродукции, КешДанныхРазбора, ПользовательскиеПараметрыРазбораКодаМаркировки);
	КонецЦикла;
	
	ГрупповаяОбработкаШтрихкодовИС.УпорядочитьДанныеТСДПоРезультатамОбработкиШтрихкодов(
		ДанныеДляТСД.Штрихкоды, РезультатОбработкиШтрихкодов.РезультатыОбработки, ДанныеПоШтрихкодам.ЗаменыШтрихкодов);
		
	Результат.Всего = ДанныеДляТСД.Штрихкоды.Количество();
	ЗагрузкаДанныхТСД = Результат;
	
	// 2. Проверка на ошибки
	Результат.ШтрихкодыТСД = ДанныеДляТСД.Штрихкоды;
	
	ГрупповаяОбработкаШтрихкодовИС.ПроверитьНаОшибкиРезультатОбработкиДанныхТСД(
		Результат, ЭтотОбъект, ДанныеДляТСД.ПараметрыСканирования);
	
	Если Результат.ОбщаяОшибка
		Или Результат.ШтрихкодыДляСопоставления.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЕстьОшибкиВДереве
		И Не ДанныеДляТСД.ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	// 3. Восстановление данных по штрихкодам из дерева маркированной продукции
	Для Каждого ЭлементДанных Из ЗагрузкаДанныхТСД.ШтрихкодыТСД Цикл
		
		ДанныеШтрихкода = ЭлементДанных.РезультатОбработки.ДанныеШтрихкода;
		Если ДанныеШтрихкода = Неопределено Тогда
			// При обращении к ГИС МТ возникла ошибка
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
			ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкодуНаСервере(
				ДанныеШтрихкода.Штрихкод, ДанныеДляТСД.СоответствиеШтрихкодовСтрокДерева);
			Если ИдентификаторНайденнойСтроки = -1 Тогда
				ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкодуНаСервере(
					ШтрихкодыУпаковокКлиентСервер.КодМаркировкиБезСкобок(ДанныеШтрихкода.Штрихкод),
					ДанныеДляТСД.СоответствиеШтрихкодовСтрокДерева);
			КонецЕсли;
		Иначе
			ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкодуНаСервере(
				ДанныеШтрихкода.НормализованныйШтрихкод, ДанныеДляТСД.СоответствиеШтрихкодовСтрокДерева);
		КонецЕсли;
		
		Если ИдентификаторНайденнойСтроки <> -1 Тогда
			
			СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторНайденнойСтроки);
			Если СтрокаДерева <> Неопределено Тогда
				
				ДанныеШтрихкода.Номенклатура   = СтрокаДерева.Номенклатура;
				ДанныеШтрихкода.Характеристика = СтрокаДерева.Характеристика;
				ДанныеШтрихкода.Серия          = СтрокаДерева.Серия;
				
				РезультатОбработки = ЭлементДанных.РезультатОбработки;
				РезультатОбработки.ТребуетсяУточнениеДанных          = Ложь;
				РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки = Ложь;
				РезультатОбработки.ТребуетсяВыборСерии               = Ложь;
				
				Если Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) И ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
					
					РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
					
				ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.Серия) И ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
					
					РезультатОбработки.ТребуетсяВыборСерии = ИнтеграцияИС.СерияДолжнаБытьУказана(ДанныеШтрихкода, ДанныеДляТСД.ПараметрыСканирования);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 4. Обработка всех строк, не требующих вмешательства пользователя
	ЗагрузкаДанныхТСД = ОбработатьШтрихкодыНаСервере(
		ДанныеДляТСД.ПараметрыСканирования,
		ДанныеДляТСД.СоответствиеШтрихкодовСтрокДерева,
		РезультатОбработкиШтрихкодов.ДанныеПоШтрихкодам,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьШтрихкодыНаСервере(ПараметрыСканирования, СоответствиеШтрихкодовСтрокДерева, ДанныеПоШтрихкодам = Неопределено, КэшированныеЗначения)
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КешСтрокДереваУпаковок = Новый Соответствие;
	Пока ЗагрузкаДанныхТСД.Обработано < ЗагрузкаДанныхТСД.Всего Цикл
		Если Не ОбработатьОчереднойШтрихкодНаСервере(ПараметрыСканирования, СоответствиеШтрихкодовСтрокДерева, КешСтрокДереваУпаковок, ДанныеПоШтрихкодам, КэшированныеЗначения) Тогда
			Возврат ЗагрузкаДанныхТСД;
		КонецЕсли;
		ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
	КонецЦикла;
	
	// Уменьшение количества данных к обработке на клиенте
	ГрупповаяОбработкаШтрихкодовИС.ОставитьНеобработанныеДанные(ЗагрузкаДанныхТСД);
	
	Возврат ЗагрузкаДанныхТСД;
	
КонецФункции

&НаСервере
Функция ОбработатьОчереднойШтрихкодНаСервере(ПараметрыСканирования, СоответствиеШтрихкодовСтрокДерева, КешСтрокДереваУпаковок, ДанныеПоШтрихкодам = Неопределено, КэшированныеЗначения)
	
	Если ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Всего Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаШтрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[ЗагрузкаДанныхТСД.Обработано];
	
	Если СтрокаШтрихкод.ШтрихкодСОшибкой Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрокаШтрихкод.РезультатОбработки = Неопределено
		Или СтрокаШтрихкод.РезультатОбработки.ТребуетсяУточнениеДанных
		Или СтрокаШтрихкод.РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки
		Или СтрокаШтрихкод.РезультатОбработки.ТребуетсяУточнениеКоэффициентовУпаковок
		Или СтрокаШтрихкод.РезультатОбработки.ТребуетсяВыборСерии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеШтрихкода = СтрокаШтрихкод.РезультатОбработки.ДанныеШтрихкода;
	
	СпозиционироватьсяНаСервере(СтрокаШтрихкод, ДанныеШтрихкода, СоответствиеШтрихкодовСтрокДерева, ДанныеПоШтрихкодам);
	
	ШтрихкодОбработан = ПоискПоШтрихкодуЗавершениеНаСервере(ДанныеШтрихкода, СоответствиеШтрихкодовСтрокДерева, КешСтрокДереваУпаковок, ПараметрыСканирования, КэшированныеЗначения);
	Если Не ШтрихкодОбработан Тогда
		СтрокаШтрихкод.Вставить("ТребуетсяОбработкаНаКлиенте");
	КонецЕсли;
	
	Возврат ШтрихкодОбработан;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД() Экспорт
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбработатьЗавершениеЗагрузкиИзТСД() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаШтрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[ЗагрузкаДанныхТСД.Обработано];
	
	Если СтрокаШтрихкод.ШтрихкодСОшибкой Тогда
		ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
		ОбработатьОчереднойШтрихкод();
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкода = СтрокаШтрихкод.РезультатОбработки.ДанныеШтрихкода;
	
	Спозиционироваться(СтрокаШтрихкод, ДанныеШтрихкода);
	
	Если ЗначениеЗаполнено(СтрокаШтрихкод.Штрихкод) Тогда
		
		ИнициализироватьПараметрыСканирования();
		
		ТребуетсяУточнениеДанных = СтрокаШтрихкод.РезультатОбработки.ТребуетсяУточнениеДанных
			Или СтрокаШтрихкод.РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки
			Или СтрокаШтрихкод.РезультатОбработки.ТребуетсяУточнениеКоэффициентовУпаковок
			Или СтрокаШтрихкод.РезультатОбработки.ТребуетсяВыборСерии;
		
		// Повторная загрузка - информация в дереве может присутствовать
		Если ТребуетсяУточнениеДанных Тогда
			Идентификатор = ИдентификаторСтрокиДереваПоШтрихкоду(СтрокаШтрихкод.НормализованныйШтрихкод);
			Если Идентификатор <> -1 Тогда
				СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, Идентификатор);
				УказатьСрокГодности = ПараметрыСканирования.ЗаполнятьСрокГодности И Не ЗначениеЗаполнено(ДанныеШтрихкода.ГоденДо);
				ТребуетсяУточнениеДанных = Ложь;
				Если ДанныеШтрихкода.Свойство("ТребуетсяВыборВСД") И ДанныеШтрихкода.ТребуетсяВыборВСД Тогда
					ТребуетсяУточнениеДанных = ТребуетсяУточнениеДанных Или Не ЗначениеЗаполнено(СтрокаДерева.ИдентификаторПроисхожденияВЕТИС);
				КонецЕсли;
				Если УказатьСрокГодности Тогда
					ТребуетсяУточнениеДанных = ТребуетсяУточнениеДанных Или Не ЗначениеЗаполнено(СтрокаДерева.ГоденДо);
				ИначеЕсли Не УказатьСрокГодности И Не ЗначениеЗаполнено(СтрокаДерева.Серия) Тогда
					ТребуетсяУточнениеДанных = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ТребуетсяУточнениеДанных
			И Не СтрокаШтрихкод.Свойство("ТребуетсяОбработкаНаКлиенте") Тогда
			
			ЗагрузкаДанныхТСД.ПересчитыватьИтогиВДеревеМаркированнойПродукции = Ложь;
			
			ЗагрузкаДанныхТСД = ОбработатьШтрихкодыНаСервере(ПараметрыСканирования, СоответствиеШтрихкодовСтрокДерева,, КэшированныеЗначения);
			
			// Если требуется уточнять данные, то необходимо до вызова окон уточнения пересчитать итоги в дереве маркированной продукции
			Если ЗагрузкаДанныхТСД.Обработано < ЗагрузкаДанныхТСД.Всего Тогда
				ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
			КонецЕсли;
			// Начиная с этого момента - разрешено пересчитывать итоги.
			ЗагрузкаДанныхТСД.ПересчитыватьИтогиВДеревеМаркированнойПродукции = Истина;
			
			ОбработатьОчереднойШтрихкод();
			
			Возврат;
			
		КонецЕсли;
	
		ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
		
		Если ТребуетсяУточнениеДанных Тогда
			ПараметрыЗавершенияОбработкиШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода("","","ПоискПоШтрихкодуЗавершение");
			ПараметрыЗавершенияОбработкиШтрихкода.ВызовИзФормыДокумента         = Ложь;
			ПараметрыЗавершенияОбработкиШтрихкода.ДанныеШтрихкода               = ДанныеШтрихкода;
			ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода   = СтрокаШтрихкод.РезультатОбработки;
			ПараметрыЗавершенияОбработкиШтрихкода.КэшированныеЗначения          = КэшированныеЗначения;
			ПараметрыЗавершенияОбработкиШтрихкода.ПараметрыСканирования         = ПараметрыСканирования;
			ПараметрыЗавершенияОбработкиШтрихкода.Форма                         = ЭтотОбъект;
			ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода);
		Иначе
			ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода);
		КонецЕсли;
		
	Иначе
		
		ОбработатьОчереднойШтрихкод();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьЗавершениеЗагрузкиИзТСД()
	
	Если ЗагрузкаДанныхТСД.Обработано <> ЗагрузкаДанныхТСД.Всего Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ЗагрузкаДанныхПоОснованию Тогда
		ЗагрузкаДанныхПоОснованию = Ложь;
		ПараметрыУведомления      = Новый Структура();
		ПараметрыУведомления.Вставить("Заголовок", НСтр("ru = 'Загрузка данных по заказам'"));
		ПараметрыУведомления.Вставить("Текст",     НСтр("ru = 'Окончена загрузка данных по заказам на эмиссию.'"));
	Иначе
		ПараметрыУведомления = Неопределено;
	КонецЕсли;
	
	ИзменитьКонтекстПроверки(НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ЗагрузкаДанныхТСД.ПроверяемаяУпаковка));
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве Тогда
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(
			ВидМаркируемойПродукции);
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок;
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(
			ЭтотОбъект, ПараметрыОткрытияФормы);
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
	ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева, ВидМаркируемойПродукции);
	
	Если ЗагрузкаДанныхТСД.ЭтоВосстановлениеВложенностиУпаковок Тогда
		ШтрихкодыИСтатусыПроверки = ЗагрузкаДанныхТСД.ДанныеДляВосстановлениеВложенности.ШтрихкодыИСтатусыПроверки;
		Для Каждого СтрокаШтрихкода Из ШтрихкодыИСтатусыПроверки Цикл
			ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(СтрокаШтрихкода.НормализованныйШтрихкод);
			Если ИдентификаторСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтроки);
			Если СтрокаДерева = Неопределено Или СтрокаДерева.СтатусПроверки = СтрокаШтрихкода.СтатусПроверки Тогда
				Продолжить;
			КонецЕсли;
			УстановитьСтатусДляВыделенныхСтрок(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСтроки),
				СтрокаШтрихкода.СтатусПроверки, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = Неопределено;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
	
	Если СкрытьПроверенные Тогда
		Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			ПроверитьСоответствиеОтборуПриИзмененииСтроки(СтрокаДерева);
		КонецЦикла;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД(ПараметрыУведомления);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОчереднойШтрихкод()
	ПодключитьОбработчикОжидания("ОбработатьПолученныеДанныеТСД", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Спозиционироваться(СтрокаШтрихкод, ДанныеШтрихкода)
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаШтрихкод, "НормализованныйШтрихкодУпаковки") Тогда
		Возврат;
	КонецЕсли;
	
	Штрихкод = СтрокаШтрихкод.НормализованныйШтрихкодУпаковки;
	Если Штрихкод = "" Тогда
		Если ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
			ИзменитьКонтекстПроверки(СтрокаПотребительскиеУпаковкиБезУпаковки(ЭтотОбъект));
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
			ИзменитьКонтекстПроверки(СтрокаГрупповыеУпаковкиБезКоробки(ЭтотОбъект));
		Иначе
			ИзменитьКонтекстПроверки(Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиДерева = ИдентификаторСтрокиДереваПоШтрихкоду(Штрихкод, Истина);
	Если ИдентификаторСтрокиДерева <> -1 Тогда
		ИзменитьКонтекстПроверки(
			НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиДерева));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ПараметрыОбработкиТСД = НовыеПараметрыОбработкиТСД();
	
	СобытияФормИСКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект, ПараметрыОбработкиТСД),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

#Область ГрупповаяОбработкаЗагруженныхСтрокТСД

//Серверные процедуры, дублирующие клиентские обработчики, связанные с вводом штрих-кода.

&НаСервере
Функция ПоискПоШтрихкодуЗавершениеНаСервере(ДанныеШтрихкода, СоответствиеШтрихкодов, КешСтрокДереваУпаковок, ПараметрыСканирования, КэшированныеЗначения)
	
	ШтрихкодОбработан = Истина;
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат ШтрихкодОбработан;
	КонецЕсли;
	
	Если ДанныеШтрихкода.Свойство("ШтрихкодУпаковки") Тогда
		
		ШтрихкодОбработан = ОбработатьОтсканированныйШтрихкодНаСервере(ДанныеШтрихкода, СоответствиеШтрихкодов, КешСтрокДереваУпаковок, ПараметрыСканирования, КэшированныеЗначения);
		
	Иначе
		
		ИдентификаторСтрокиДерева = ИдентификаторСтрокиДереваПоШтрихкодуНаСервере(
			ДанныеШтрихкода.Штрихкод, СоответствиеШтрихкодов, Истина);
		
		ШтрихкодОбработан = ОбработатьСканированиеИмеющегосяВДеревеШтрихкодаНаСервере(
			ДанныеШтрихкода, ИдентификаторСтрокиДерева, СоответствиеШтрихкодов, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	КонецЕсли;
	
	Возврат ШтрихкодОбработан;
	
КонецФункции

&НаСервере
Функция ОбработатьОтсканированныйШтрихкодНаСервере(ДанныеШтрихкода, СоответствиеШтрихкодов, КешСтрокДереваУпаковок, ПараметрыСканирования, КэшированныеЗначения)
	
	ШтрихкодОбработан = Истина;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкодуНаСервере(
			ДанныеШтрихкода.Штрихкод, СоответствиеШтрихкодов);
		Если ИдентификаторНайденнойСтроки = -1 Тогда
			ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкодуНаСервере(
				ШтрихкодыУпаковокКлиентСервер.КодМаркировкиБезСкобок(ДанныеШтрихкода.Штрихкод),
				СоответствиеШтрихкодов);
		КонецЕсли;
	Иначе
		ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкодуНаСервере(
			ДанныеШтрихкода.НормализованныйШтрихкод, СоответствиеШтрихкодов);
	КонецЕсли;
	
	Если ИдентификаторНайденнойСтроки <> -1 Тогда
		
		ШтрихкодОбработан = ОбработатьСканированиеИмеющегосяВДеревеШтрихкодаНаСервере(ДанныеШтрихкода, ИдентификаторНайденнойСтроки, СоответствиеШтрихкодов, КэшированныеЗначения);
		
	ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок)
		И (РежимПодбораСуществующихУпаковок Или Не ПроверкаЭлектронногоДокумента)
		И (ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
			Или ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка")) Тогда
		
		Результат = РезультатДобавленияСуществующейУпаковкиВДеревоМаркированнойПродукции(
			ДанныеШтрихкода, СоответствиеШтрихкодов, КешСтрокДереваУпаковок, ПараметрыСканирования, КэшированныеЗначения);
		
		Если Результат.ЕстьОшибки Тогда
			
			ШтрихкодОбработан = Ложь;
			
		ИначеЕсли Результат.ТребуетсяСбросКонтекстаПроверки Тогда
			
			ИзменитьКонтекстПроверкиНаСервере(Неопределено, СоответствиеШтрихкодов);
			
		КонецЕсли;
		
	Иначе
		
		ШтрихкодОбработан = ОбработатьНеНайденныйВДеревеШтрихКодНаСервере(ДанныеШтрихкода, СоответствиеШтрихкодов, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
	КонецЕсли;
	
	Возврат ШтрихкодОбработан;
	
КонецФункции

&НаСервере
Функция ИдентификаторСтрокиДереваПоШтрихкодуНаСервере(Штрихкод, СоответствиеШтрихкодов, Нормализовать = Ложь)
	
	Если Нормализовать Тогда
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = (ТипЗнч(ПроверяемыйДокумент) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
		ШтрихкодДляПоиска = ШтрихкодированиеМОТП.НормализованныйШтрихкод(Штрихкод, ВидМаркируемойПродукции,, ПользовательскиеПараметрыРазбораКодаМаркировки);
	Иначе
		ШтрихкодДляПоиска = Штрихкод;
	КонецЕсли;
	
	НайденныйИдентификаторСтроки = СоответствиеШтрихкодов.Получить(ШтрихкодДляПоиска);
	
	Если НайденныйИдентификаторСтроки = Неопределено Тогда
		
		НайденныйИдентификаторСтроки = -1;
		
	КонецЕсли;
	
	Возврат НайденныйИдентификаторСтроки;

КонецФункции

&НаСервере
Функция ОбработатьСканированиеИмеющегосяВДеревеШтрихкодаНаСервере(ДанныеШтрихкода, ИдентификаторНайденнойСтроки, СоответствиеШтрихкодов, КэшированныеЗначения)
	
	НайденнаяСтрокаДерева = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторНайденнойСтроки);
	
	Если НайденнаяСтрокаДерева = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	РодительНайденнойСтроки = НайденнаяСтрокаДерева.ПолучитьРодителя();
	
	ЗаполнитьСтрокуДереваПоДаннымШтрихкода(ЭтотОбъект, НайденнаяСтрокаДерева, ДанныеШтрихкода, ТаблицаИзмененийПодобраннойПродукции, КэшированныеЗначения);
	
	// Отмечаем строку как найденную только если не требуется сопоставление на клиенте
	Если ЗначениеЗаполнено(НайденнаяСтрокаДерева.Номенклатура) Тогда
		
		ПослеУспешногоОбнаруженияОтсканированногоШтрихкодаВДеревеНаСервере(
			НайденнаяСтрокаДерева,
			РодительНайденнойСтроки,
			СоответствиеШтрихкодов,
			КэшированныеЗначения);
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИзменитьКонтекстПроверкиНаСервере(НоваяПроверяемаяУпаковка, СоответствиеШтрихкодов)
	
	Если НоваяПроверяемаяУпаковка = Неопределено Тогда
		ИдентификаторНовойПроверяемойУпаковки = -1;
	Иначе
		ИдентификаторНовойПроверяемойУпаковки = НоваяПроверяемаяУпаковка.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ИдентификаторНовойПроверяемойУпаковки = ИдентификаторТекущейПроверяемойУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
	Если ТекущаяПроверяемаяУпаковка <> Неопределено Тогда
		СнятьПризнакПроверкиУпаковки(ЭтотОбъект, ТекущаяПроверяемаяУпаковка, Истина, СоответствиеШтрихкодов);
	КонецЕсли;
	
	УстановитьПризнакПроверкиУпаковки(ЭтотОбъект, НоваяПроверяемаяУпаковка);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьНеНайденныйВДеревеШтрихКодНаСервере(ДанныеШтрихкода, СоответствиеШтрихкодов, КэшированныеЗначения)
	
	ЭтоШтрихкодПотребительскойУпаковки = (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская);
	ЭтоШтрихкодГрупповойУпаковки = (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая);

	Если РежимПодбораСуществующихУпаковок
		И (ЭтоШтрихкодПотребительскойУпаковки Или ЭтоШтрихкодГрупповойУпаковки) Тогда
		
		Если ЭтоШтрихкодПотребительскойУпаковки Тогда
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		ИначеЕсли ЭтоШтрихкодГрупповойУпаковки Тогда
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		КонецЕсли;
		
		ДобавитьНовуюМаркируемуюПродукциюВДеревоНаСервере(ДанныеШтрихкода, СоответствиеШтрихкодов, КэшированныеЗначения);
		Возврат Истина;
		
	КонецЕсли;
	
	НайденнаяНоменклатура = ДанныеШтрихкода.Номенклатура;
	
	Если ЗначениеЗаполнено(НайденнаяНоменклатура)
		И (ЭтоШтрихкодПотребительскойУпаковки Или ЭтоШтрихкодГрупповойУпаковки) Тогда
		
		Если РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены")
			Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
			
			ДобавитьНовуюМаркируемуюПродукциюВДеревоНаСервере(ДанныеШтрихкода, СоответствиеШтрихкодов, КэшированныеЗначения);
			Возврат Истина;
			
		Иначе
			
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, ЭтоШтрихкодГрупповойУпаковки, ЭтоШтрихкодГрупповойУпаковки);
			Если СтрокаПроверяемойУпаковки.НеСодержитсяВДанныхДокумента
				Или СтрокаПроверяемойУпаковки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
				
				ДобавитьНовуюМаркируемуюПродукциюВДеревоНаСервере(ДанныеШтрихкода, СоответствиеШтрихкодов, КэшированныеЗначения);
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		Если ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		КонецЕсли;
		
		ДобавитьНовуюУпаковкуНаСервере(ДанныеШтрихкода,
			ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"), СоответствиеШтрихкодов, КэшированныеЗначения);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ДобавитьНовуюМаркируемуюПродукциюВДеревоНаСервере(ДанныеШтрихкода, СоответствиеШтрихкодов, КэшированныеЗначения)
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		ДобавлятьВУпаковку = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
		Если ДобавлятьВУпаковку = Неопределено Тогда
			ДобавлятьВУпаковку = СтрокаПотребительскиеУпаковкиБезУпаковки(ЭтотОбъект);
		КонецЕсли;
		
		НоваяСтрока = ДобавлятьВУпаковку.ПолучитьЭлементы().Добавить();
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
	НоваяСтрока.СтатусКодаМаркировки         = ДанныеШтрихкода.Статус;
	НоваяСтрока.Штрихкод                     = ДанныеШтрихкода.Штрихкод;
	НоваяСтрока.ТипУпаковки                  = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	
	Если НЕ РежимПодбораСуществующихУпаковок Тогда
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
	Иначе
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = ДанныеШтрихкода.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ПараметрыПроверкиКодовМаркировки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеПроверкиПодчиненных(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, ВидМаркируемойПродукции);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);
	
	ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, НоваяСтрока, 1);
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СоответствиеШтрихкодов.Вставить(НоваяСтрока.Штрихкод, ИдентификаторСтроки);
	
	Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки")
		И ДобавлятьВУпаковку.ТипУпаковки <> ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтроки, Истина, КэшированныеЗначения);
	КонецЕсли;
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПослеУспешногоОбнаруженияОтсканированногоШтрихкодаВДеревеНаСервере(
		НайденнаяСтрокаДерева,
		РодительНайденнойСтроки,
		СоответствиеШтрихкодов,
		КэшированныеЗначения)
	
	ЭтоУпаковка = ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НайденнаяСтрокаДерева.ТипУпаковки);
	Если ЭтоУпаковка Тогда
		
		Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
			Возврат;
		КонецЕсли;
		
		ЭтоГрупповаяУпаковка      = (НайденнаяСтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, ЭтоУпаковка, ЭтоГрупповаяУпаковка);
		
		Если НайденнаяСтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
			
			СнятьПризнакПроверкиУпаковки(ЭтотОбъект, НайденнаяСтрокаДерева,, СоответствиеШтрихкодов);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			
		ИначеЕсли РодительНайденнойСтроки = СтрокаПроверяемойУпаковки Тогда
			
			ОтметитьСтрокуКакНайденнуюНаСервере(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ИзменитьСостояниеПроверкиУпаковки(ЭтотОбъект, НайденнаяСтрокаДерева, СоответствиеШтрихкодов);
			
		ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
			И СтрокаПроверяемойУпаковки <> Неопределено Тогда
			
			ОтметитьСтрокуКакНайденнуюНаСервере(НайденнаяСтрокаДерева);
			СнятьПризнакПроверкиУпаковки(ЭтотОбъект, СтрокаПроверяемойУпаковки,, СоответствиеШтрихкодов);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			
		Иначе
			
			ПереместитьУпаковкуВДругуюУпаковкуНаСервере(НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки, СоответствиеШтрихкодов, КэшированныеЗначения);
			ОтметитьСтрокуКакНайденнуюНаСервере(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			
		КонецЕсли;
		
	Иначе
		
		ИдентификаторУпаковки = ИдентификаторТекущейПроверяемойУпаковки;
		
		Если (РодительНайденнойСтроки = Неопределено 
			Или РодительНайденнойСтроки.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки())
			И ИдентификаторУпаковки = -1 Тогда
			
			ОтметитьСтрокуКакНайденнуюНаСервере(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			
		ИначеЕсли РодительНайденнойСтроки.ПолучитьИдентификатор() = ИдентификаторУпаковки Тогда
			
			ОтметитьСтрокуКакНайденнуюНаСервере(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			
		Иначе
			
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, ЭтоУпаковка, Ложь);
			ПереместитьПродукциюНаСервере(НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки, СоответствиеШтрихкодов, КэшированныеЗначения);
			ОтметитьСтрокуКакНайденнуюНаСервере(НайденнаяСтрокаДерева);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьСтрокуКакНайденнуюНаСервере(СтрокаДерева)

	Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
		Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
		
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, СтрокаДерева);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД);
	
	Если НЕ РежимПодбораСуществующихУпаковок Тогда
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, СтрокаДерева, 1);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьУпаковкуВДругуюУпаковкуНаСервере(ИдентификаторСтрокиПеремещаемойУпаковки, ШтрихкодУпаковкиНазначения, СоответствиеШтрихкодов, КэшированныеЗначения)
	
	ИдентификаторПеремещеннойСтроки = -1;
	Если ТипЗнч(ИдентификаторСтрокиПеремещаемойУпаковки) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПеремещаемаяСтрока = ИдентификаторСтрокиПеремещаемойУпаковки;
	Иначе
		ПеремещаемаяСтрока = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиПеремещаемойУпаковки);
	КонецЕсли;
	РодительПеремещаемойСтроки = ПеремещаемаяСтрока.ПолучитьРодителя();
	
	МассивСтрокИзмененыхУпаковок = Новый Массив;
	
	Если ШтрихкодУпаковкиНазначения <> Неопределено Тогда
		
		Если ТипЗнч(ШтрихкодУпаковкиНазначения) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			СтрокаНазначения = ШтрихкодУпаковкиНазначения;
			
		Иначе
			
			ИдентификаторСтрокиУпаковкиНазначения = ИдентификаторСтрокиДереваПоШтрихкодуНаСервере(ШтрихкодУпаковкиНазначения, СоответствиеШтрихкодов, Истина);
			СтрокаНазначения = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиУпаковкиНазначения);
			
		КонецЕсли;
		
		Если ИдентификаторСтрокиУпаковкиНазначения <> - 1 Тогда
			
			ПереместитьЭлементДереваНаСервере(СоответствиеШтрихкодов,
				СтрокаНазначения,
				ПеремещаемаяСтрока,
				ИдентификаторПеремещеннойСтроки);
			
		КонецЕсли;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаНазначения, Истина, ЗагрузкаДанныхТСД);
		МассивСтрокИзмененыхУпаковок.Добавить(СтрокаНазначения.ПолучитьИдентификатор());
	
	Иначе
		
		ПереместитьЭлементДереваНаСервере(
			СоответствиеШтрихкодов, Неопределено,
			ПеремещаемаяСтрока,
			ИдентификаторПеремещеннойСтроки);
		
	КонецЕсли;
	
	ИзменитьКонтекстПроверкиНаСервере(СтрокаНазначения, СоответствиеШтрихкодов);
	
	Если РодительПеремещаемойСтроки <> Неопределено Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительПеремещаемойСтроки, Истина, ЗагрузкаДанныхТСД);
		МассивСтрокИзмененыхУпаковок.Добавить(РодительПеремещаемойСтроки.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если МассивСтрокИзмененыхУпаковок.Количество() > 0 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзмененыхУпаковок, Истина, КэшированныеЗначения);
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = ИдентификаторПеремещеннойСтроки;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьЭлементДереваНаСервере(СоответствиеШтрихкодов, СтрокаНазначение, ПеремещаемаяСтрока, ИдентификаторПеремещеннойСтроки, УдалятьПослеДобавления = Истина)
	
	Если Не ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПеремещаемаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаНазначение = Неопределено Тогда
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = СтрокаНазначение.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПеремещаемаяСтрока);
	СоответствиеШтрихкодов.Вставить(НоваяСтрока.НормализованныйШтрихкод, НоваяСтрока.ПолучитьИдентификатор());
	
	Для каждого Элемент Из ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
		ПереместитьЭлементДереваНаСервере(СоответствиеШтрихкодов, НоваяСтрока, Элемент, ИдентификаторПеремещеннойСтроки, Ложь);
	КонецЦикла;
	
	Если УдалятьПослеДобавления Тогда
		
		РодительПеремещаемойСтроки = ПеремещаемаяСтрока.ПолучитьРодителя();
		Если РодительПеремещаемойСтроки <> Неопределено Тогда
			КоллекцияЭлементов = РодительПеремещаемойСтроки.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементов = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементов.Удалить(ПеремещаемаяСтрока);
		ПеремещаемаяСтрока = НоваяСтрока;
		ИдентификаторПеремещеннойСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьПродукциюНаСервере(СтрокаСПродукцией, НоваяУпаковка, СоответствиеШтрихкодов, КэшированныеЗначения)
	
	ТекущаяУпаковка = СтрокаСПродукцией.ПолучитьРодителя();
	
	НоваяСтрока = НоваяУпаковка.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСПродукцией);
	
	ТекущаяУпаковка.ПолучитьЭлементы().Удалить(СтрокаСПродукцией);
	СтрокаСПродукцией = НоваяСтрока;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущаяУпаковка, Ложь, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ТекущаяУпаковка, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);
	
	МассивСтрокИзменившихсяУпаковок = Новый Массив;
	МассивСтрокИзменившихсяУпаковок.Добавить(НоваяУпаковка.ПолучитьИдентификатор());
	МассивСтрокИзменившихсяУпаковок.Добавить(ТекущаяУпаковка.ПолучитьИдентификатор());
	
	ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзменившихсяУпаковок, Истина, КэшированныеЗначения);
	
	СоответствиеШтрихкодов.Вставить(НоваяСтрока.Штрихкод, НоваяСтрока.ПолучитьИдентификатор());
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНовуюУпаковкуНаСервере(ДанныеШтрихкода, ТипУпаковки, СоответствиеШтрихкодов, КэшированныеЗначения)
	
	УпаковкаНеСодержитсяВДанныхДокумента = Ложь;
	
	ВидУпаковки = ВидУпаковкиПоВходящимДанным(ДанныеШтрихкода, ТипУпаковки, ВидМаркируемойПродукции, ПроверяемыйДокумент);
	
	ЭтоГрупповаяУпаковка = (ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая);
	
	Если ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
		Возврат Ложь;
	ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими
		И Не ЭтоГрупповаяУпаковка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяПроверяемаяУпаковка = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Истина, ЭтоГрупповаяУпаковка);
	
	Если Не ТекущаяПроверяемаяУпаковка = Неопределено Тогда
		УпаковкаНеСодержитсяВДанныхДокумента = ТекущаяПроверяемаяУпаковка.НеСодержитсяВДанныхДокумента;
	КонецЕсли;
	
	Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	ИначеЕсли РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ПеремещатьТудаГдеДолжныБыть")
		И (Не УпаковкаНеСодержитсяВДанныхДокумента) Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		НоваяСтрока = ТекущаяПроверяемаяУпаковка.ПолучитьЭлементы().Добавить();
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
	НоваяСтрока.ТипУпаковки                  = ?(ЗначениеЗаполнено(ТипУпаковки), ТипУпаковки, ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	
	Если НЕ РежимПодбораСуществующихУпаковок Тогда
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
	Иначе
		НоваяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "Статус")
		И ЗначениеЗаполнено(ДанныеШтрихкода.Статус) Тогда
		НоваяСтрока.СтатусКодаМаркировки = ДанныеШтрихкода.Статус;
	Иначе
		НоваяСтрока.СтатусКодаМаркировки = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен");
	КонецЕсли;
	
	ДобавленныеУпаковки.Добавить(ДанныеШтрихкода.Штрихкод);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ПараметрыПроверкиКодовМаркировки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(НоваяСтрока, Ложь, ЗагрузкаДанныхТСД);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, ВидМаркируемойПродукции);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДоступныеДляПроверкиУпаковки);
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ИзменитьКонтекстПроверкиНаСервере(НоваяСтрока, СоответствиеШтрихкодов);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока, ЗагрузкаДанныхТСД);
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	СоответствиеШтрихкодов.Вставить(НоваяСтрока.НормализованныйШтрихкод, ИдентификаторСтроки);
	ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтроки, Истина, КэшированныеЗначения);
	
	Модифицированность = Истина;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура СпозиционироватьсяНаСервере(СтрокаШтрихкод, ДанныеШтрихкода, СоответствиеШтрихкодов, ДанныеПоШтрихкодам = Неопределено)
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаШтрихкод, "НормализованныйШтрихкодУпаковки") Тогда
		Возврат;
	КонецЕсли;
	
	Штрихкод = СтрокаШтрихкод.НормализованныйШтрихкодУпаковки;
	Если Штрихкод = "" Тогда
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			ИзменитьКонтекстПроверкиНаСервере(СтрокаПотребительскиеУпаковкиБезУпаковки(ЭтотОбъект), СоответствиеШтрихкодов);
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			ИзменитьКонтекстПроверкиНаСервере(СтрокаГрупповыеУпаковкиБезКоробки(ЭтотОбъект), СоответствиеШтрихкодов);
		Иначе
			ИзменитьКонтекстПроверкиНаСервере(Неопределено, СоответствиеШтрихкодов);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Нормализовать = Истина;
	Если ДанныеПоШтрихкодам <> Неопределено Тогда
		НайденнаяСтрока = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(Штрихкод, "Штрихкод");
		Если НайденнаяСтрока <> Неопределено Тогда
			ШтрихкодДляПоиска = НайденнаяСтрока.НормализованныйШтрихкод;
			Нормализовать = Ложь;
		Иначе
			ШтрихкодДляПоиска = Штрихкод;
		КонецЕсли;
	Иначе
		ШтрихкодДляПоиска = Штрихкод;
	КонецЕсли;
	
	ИдентификаторСтрокиДерева = ИдентификаторСтрокиДереваПоШтрихкодуНаСервере(ШтрихкодДляПоиска, СоответствиеШтрихкодов, Нормализовать);
	Если ИдентификаторСтрокиДерева <> -1 Тогда
		ИзменитьКонтекстПроверкиНаСервере(
			НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтрокиДерева), СоответствиеШтрихкодов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Выгрузка

&НаСервере
Функция СформироватьТаблицуВыгрузкиИзДерева()
	
	Результат = Новый Массив;
	ДобавитьСтрокуВВыгрузкуРекурсивно(Результат, ДеревоМаркированнойПродукции);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВВыгрузкуРекурсивно(Результат, ДеревоИлиГруппа)
	
	Для Каждого СтрокаДерева Из ДеревоИлиГруппа.ПолучитьЭлементы() Цикл
		
		ДобавляемаяСтрока = Новый Структура;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ДобавляемаяСтрока.Вставить("Штрихкод", СтрокаДерева.GTIN);
			ДобавляемаяСтрока.Вставить("ШтрихкодМаркиАлкогольнойПродукции", СтрокаДерева.Штрихкод);
		Иначе
			ДобавляемаяСтрока.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
		КонецЕсли;
		
		ПредставлениеНоменклатуры = Новый Массив;
		Если ТипЗнч(СтрокаДерева.ТипУпаковки) = Тип("ПеречислениеСсылка.ТипыУпаковок")
			И СтрокаДерева.ТипУпаковки<> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ПредставлениеНоменклатуры.Добавить("Упаковка");
		КонецЕсли;
		ПредставлениеНоменклатуры.Добавить("" + СтрокаДерева.Номенклатура);
		
		ДобавляемаяСтрока.Вставить("Номенклатура",               СтрСоединить(ПредставлениеНоменклатуры, " "));
		ДобавляемаяСтрока.Вставить("ХарактеристикаНоменклатуры", "" + СтрокаДерева.Характеристика);
		ДобавляемаяСтрока.Вставить("СерияНоменклатуры",          "" + СтрокаДерева.Серия);
		ДобавляемаяСтрока.Вставить("Количество",                 1);
		
		Если Не(СтрокаДерева.ПолучитьРодителя() = Неопределено) Тогда
			ДобавляемаяСтрока.Вставить("ШтрихкодУпаковки", СтрокаДерева.ПолучитьРодителя().Штрихкод);
		КонецЕсли;
		
		Если ДобавляемаяСтрока.Штрихкод<>"" Тогда
			Результат.Добавить(ДобавляемаяСтрока);
		КонецЕсли;
		
		ДобавитьСтрокуВВыгрузкуРекурсивно(Результат, СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВТСДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выгрузка успешно завершена'"));
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Настройки

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеНастроек(Форма)
	
	Форма.ПредставлениеНастроек = Новый ФорматированнаяСтрока(ПредставлениеУровняДетализации(Форма), " " , ПредставлениеРежимаПроверки(Форма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРежимаПроверки(Форма)
	
	Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.РежимПроверки) Тогда
		Форма.РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены");
	КонецЕсли;
	
	ТекстВступление = НСтр("ru = 'При выявлении некорректного содержимого'");
	
	Если Форма.РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены") Тогда
		СтрокаДействие = НСтр("ru = 'оставлять там, где найдено.'");
	ИначеЕсли Форма.РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ПеремещатьТудаГдеДолжныБыть") Тогда
		СтрокаДействие = НСтр("ru = 'перемещать в упаковку, где должно находиться.'");
	КонецЕсли;
	
	Если Не Форма.РежимПросмотра Тогда
		СтрокаДействие = Новый ФорматированнаяСтрока(СтрокаДействие,, Форма.ЦветГиперссылки,, "ИзменитьРежимПроверки");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстВступление, " ", СтрокаДействие);
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияРежимаПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат)
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> РежимПроверки Тогда
		
		Модифицированность = Истина;
		РежимПроверки = Результат;
		СформироватьПредставлениеНастроек(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(СохраняемыеНастройки)
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор",
		"", СохраняемыеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область ДетализацияСтруктурыХранения

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУровняДетализации(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.ДетализацияСтруктурыХранения) Тогда
		Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная");
	КонецЕсли;
	
	ТекстВступление = НСтр("ru = 'Детализация'");
	СтрокаДействие  = НРег(Строка(Форма.ДетализацияСтруктурыХранения));
	Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами") Тогда
		СтрокаДействие = "палеты с коробками";
	ИначеЕсли Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками") Тогда
		СтрокаДействие = "короба с групповыми упаковками";
	ИначеЕсли Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими") Тогда
		СтрокаДействие = "групповые упаковки с потребительскими";
	ИначеЕсли Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		СтрокаДействие = "потребительские упаковки";
	КонецЕсли;
	
	Если Не Форма.РежимПросмотра Тогда
		СтрокаДействие = Новый ФорматированнаяСтрока(СтрокаДействие,, Форма.ЦветГиперссылки,, "ИзменитьДетализацию");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстВступление, ": ", СтрокаДействие, ".");
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияРежимаДетализации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат)
		Или Результат = КодВозвратаДиалога.Отмена
		Или Результат = ДетализацияСтруктурыХранения Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодыВерхнегоУровня = ШтрихкодыВерхнегоУровня();
	
	Если ШтрихкодыВерхнегоУровня.Количество() = 0 Тогда
		
		Если Результат = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки")
			И ЕстьУпаковкиБезКодовПотребительскихУпаковок(ДеревоМаркированнойПродукции.ПолучитьЭлементы()) Тогда
			
			СтрокиВопроса = Новый Массив;
			СтрокиВопроса.Добавить(НСтр("ru = 'В структуре упаковок есть упаковки, для которых не указаны коды маркировки вложенных потребительских упаковок.'"));
			СтрокиВопроса.Добавить(" ");
			СтрокиВопроса.Добавить(НСтр("ru = 'При установке детализации ""Потребительские упаковки"" информация о таких упаковках и количестве вложенных в них потребительских упаковок будет утеряна.'"));
			СтрокиВопроса.Добавить(Символы.ПС);
			СтрокиВопроса.Добавить(НСтр("ru = 'Продолжить изменение детализации структуры упаковок?'"));
			
			СписокКнопок = Новый СписокЗначений();
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отказаться'"));
			
			ОповещениеПриОтвете = Новый ОписаниеОповещения("ПриОтветеНаВопросИзменениеРежимаДетализации", ЭтотОбъект, Результат);
			ПоказатьВопрос(ОповещениеПриОтвете, СтрСоединить(СтрокиВопроса), СписокКнопок);
			
		Иначе
			ИзменитьРежимДетализации(Результат);
		КонецЕсли;
		
	ИначеЕсли Не РежимПодбораСуществующихУпаковок И ЭтоДокументПриобретения И ПроверкаЭлектронногоДокумента Тогда
		
		ПараметрыОповещения = Новый Структура("НовыйРежимДетализации", Результат);
		
		ОписаниеОповещенияПослеОтвета = Новый ОписаниеОповещения("ПослеВопросаОНачалеПроверкиЗаново", ЭтотОбъект, ПараметрыОповещения);
		
		ТекстВопроса = НСтр("ru = 'При смене детализации промежуточные результаты могут быть утеряны. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещенияПослеОтвета, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ИспользоватьЗагрузкуИзТСДПриСменеДетализации(Результат) Тогда
		
		ПараметрыОповещения = Новый Структура("НовыйРежимДетализации, ШтрихкодыВерхнегоУровня", Результат, ШтрихкодыВерхнегоУровня);
		
		ОписаниеОповещенияПослеОтвета = Новый ОписаниеОповещения("ПослеВопросаОСменеДетализацииСПоследующимВосстановлениемИзТСД", ЭтотОбъект, ПараметрыОповещения);
		
		ТекстВопроса = НСтр("ru = 'При смене детализации промежуточные результаты могут быть утеряны. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещенияПослеОтвета, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ИзменитьРежимДетализации(Результат);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЕстьУпаковкиБезКодовПотребительскихУпаковок(ЭлементыДерева)
	
	ЕстьУпаковкиБезПотребительскихУпаковок = Ложь;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
			ЕстьУпаковкиБезПотребительскихУпаковок = Истина;
		ИначеЕсли ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьУпаковкиБезПотребительскихУпаковок = ЕстьУпаковкиБезКодовПотребительскихУпаковок(ЭлементДерева.ПолучитьЭлементы());
		КонецЕсли;
		
		Если ЕстьУпаковкиБезПотребительскихУпаковок Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьУпаковкиБезПотребительскихУпаковок;
	
КонецФункции

&НаКлиенте
Процедура ПриОтветеНаВопросИзменениеРежимаДетализации(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИзменитьРежимДетализации(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимДетализации(НовыйРежимДетализации)
	
	ТребуетсяПересчет = Ложь;
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами") Тогда
		
		ТребуетсяПересчет = Истина;
		ПереключитьДетализациюСПолнойНаКоробки();
		
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками") Тогда
		
		ТребуетсяПересчет = Истина;
		ПовыситьУровеньДетализацииДоКоробаСГрупповымиУпаковками();
		
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими") Тогда
		
		ТребуетсяПересчет = Истина;
		ПонизитьУровеньДетализацииДоГрупповыхУпаковокСПотребительскими();
		
	ИначеЕсли (ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
		Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами")
		Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
		Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими"))
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		
		ТребуетсяПересчет = Истина;
		ПонизитьУровеньДетализацииДоПотребительскихУпаковок();
		ИдентификаторТекущейПроверяемойУпаковки = - 1;
		
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки")
		И НовыйРежимДетализации <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		
		ТребуетсяПересчет = Истина;
		УстановитьУровеньДетализацииВышеЧемПотребительскиеУпаковки(НовыйРежимДетализации);
		
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими")
		И (НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
		Или НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
		Или НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами")) Тогда
		
		ТребуетсяПересчет = Истина;
		УстановитьУровеньДетализацииВышеЧемГрупповыеУпаковкиСПотребительскими(НовыйРежимДетализации);
		
	ИначеЕсли (ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
			Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами"))
		И (НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
			Или НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими")) Тогда
		
		ТребуетсяПересчет = Истина;
		ПереключитьДетализациюСКоробокИКоробокСПотребительскимиУпаковкамиНаГрупповыеУпаковкиСПотребительскимиИПолную(НовыйРежимДетализации);
		
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами") Тогда
		
		ТребуетсяПересчет = Истина;
		ПереключитьДетализациюСКоробовСПотребительскимиУпаковкамиНаКоробки();
		
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами")
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками") Тогда
		
		ТребуетсяПересчет = Истина;
		ПереключитьДетализациюСКоробкиНаКоробкиСГрупповымиУпаковками();
		
	КонецЕсли;
	
	ДетализацияСтруктурыХранения = НовыйРежимДетализации;
	
	Если ТребуетсяПересчет Тогда
		УстановитьПризнакРасчитыватьХешСуммуУпаковокПриСменеДетализации();
		СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
		ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(
			ДеревоМаркированнойПродукции.ПолучитьЭлементы(),
			СоответствиеШтрихкодовСтрокДерева,
			ВидМаркируемойПродукции);
		ПересчитатьВсеИтогиФормыНаКлиенте();
	КонецЕсли;
	
	СохраняемыеНастройки = Новый Структура;
	
	Если РежимПодбораСуществующихУпаковок Тогда
		СохраняемыеНастройки.Вставить("ДетализацияСтруктурыХранения", ДетализацияСтруктурыХранения);
	Иначе
		СохраняемыеНастройки.Вставить("ДетализацияСтруктурыХраненияПриобретение", ДетализацияСтруктурыХранения);
	КонецЕсли;
	
	СохранитьНастройкиФормы(СохраняемыеНастройки);
	
	УправлениеДоступностьюКомандУпаковок(ЭтотОбъект);
	УправлениеДоступностьюКомандыРазобратьУпаковку();

	СформироватьПредставлениеНастроек(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьДетализациюСПолнойНаКоробки()
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	УдаляемаяПродукция = Новый Массив;
	УдаляемыеГруппы    = Новый Массив;
	УдаляемыеУпаковки  = Новый Массив;
	
	ГруппыДляПодобраннойПродукции   = Новый Массив;
	УпаковкиДляПодобраннойПродукции = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
			
			Продолжить;
			
		ИначеЕсли СтрокаДерева.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда

			Для Каждого СтрокаСГрупповойУпаковкой Из СтрокаДерева.ПолучитьЭлементы() Цикл
				СтрокаСГрупповойУпаковкой.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
				Для Каждого СтрокаСПотребительскойУпаковкой Из СтрокаСГрупповойУпаковкой.ПолучитьЭлементы() Цикл
					УдаляемаяПродукция.Добавить(СтрокаСПотребительскойУпаковкой);
				КонецЦикла;
				ГруппыДляПодобраннойПродукции.Добавить(СтрокаСГрупповойУпаковкой);
			КонецЦикла;

		Иначе
			
			ПереключитьДетализациюСПолнойНаКоробкиПродолжение(
				СтрокаДерева,
				УдаляемаяПродукция,
				УдаляемыеГруппы,
				УдаляемыеУпаковки,
				ГруппыДляПодобраннойПродукции,
				УпаковкиДляПодобраннойПродукции);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Отражаем изменения в таблице ПодобраннаяМаркируемаяПродукция и удаляем строки из ДеревоМаркированнойПродукции
	// Удаляем информацию по продукции из УдаляемаяПродукция, добавляем информацию по группам из ГруппыДляПодобраннойПродукции,
	// добавляем информацию по упаковкам из дерева
	УдалениеПодобраннойПродукцииПриСменеДетализации(УдаляемаяПродукция, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	ДобавлениеПодобраннойПродукцииПриСменеДетализации(ГруппыДляПодобраннойПродукции, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	ДобавлениеПодобраннойПродукцииПриСменеДетализации(УпаковкиДляПодобраннойПродукции, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемаяПродукция);
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемыеГруппы);
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемыеУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьДетализациюСПолнойНаКоробкиПродолжение(СтрокаДерева, УдаляемаяПродукция, УдаляемыеГруппы, УдаляемыеУпаковки, ГруппыДляПодобраннойПродукции, УпаковкиДляПодобраннойПродукции, РодительскаяУпаковкаСамодостаточна = Ложь, ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Ложь)
	
	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		Если РодительскаяУпаковкаСамодостаточна Тогда
			УдаляемаяПродукция.Добавить(СтрокаДерева);
		Иначе
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		Если РодительскаяУпаковкаСамодостаточна Или СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0 Тогда
			УдаляемыеГруппы.Добавить(СтрокаДерева);
		Иначе
			СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
			ГруппыДляПодобраннойПродукции.Добавить(СтрокаДерева);
		КонецЕсли;
		
		УпаковкаСамодостаточна = Истина;
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПереключитьДетализациюСПолнойНаКоробкиПродолжение(
				ПодчиненнаяСтрока,
				УдаляемаяПродукция,
				Неопределено,
				Неопределено,
				Неопределено,
				Неопределено,
				УпаковкаСамодостаточна);
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		УпаковкаСамодостаточна = Ложь;
		Если ЭтоЗаполненнаяМонотоварнаяУпаковкаСGTIN(СтрокаДерева) Тогда
			УпаковкаСамодостаточна = Истина;
		КонецЕсли;
		
		ИмеютсяПодчиненныеНеУдаляемыУпаковки = Ложь;
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПереключитьДетализациюСПолнойНаКоробкиПродолжение(
				ПодчиненнаяСтрока,
				УдаляемаяПродукция,
				УдаляемыеГруппы,
				УдаляемыеУпаковки,
				ГруппыДляПодобраннойПродукции,
				УпаковкиДляПодобраннойПродукции,
				УпаковкаСамодостаточна,
				ИмеютсяПодчиненныеНеУдаляемыУпаковки);
		КонецЦикла;
		
		Если УпаковкаСамодостаточна Тогда
			
			СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
			
			УпаковкиДляПодобраннойПродукции.Добавить(СтрокаДерева);
			
		ИначеЕсли ИмеютсяПодчиненныеНеУдаляемыУпаковки Тогда
			
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
			
		Иначе
			
			УдаляемыеУпаковки.Добавить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовыситьУровеньДетализацииДоКоробаСГрупповымиУпаковками()

	// Полная -> КоробаСГрупповымиУпаковками
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	УдаляемаяПродукция = Новый Массив;
	УдаляемыеУпаковки  = Новый Массив;
	
	ГруппыДляПодобраннойПродукции = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
			
			Продолжить;
			
		ИначеЕсли СтрокаДерева.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			
			Для Каждого СтрокаСГрупповымиУпаковками Из СтрокаДерева.ПолучитьЭлементы() Цикл
				СтрокаСГрупповымиУпаковками.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
				Для Каждого СтрокаСпродукцией Из СтрокаСГрупповымиУпаковками.ПолучитьЭлементы() Цикл
					УдаляемаяПродукция.Добавить(СтрокаСпродукцией);
				КонецЦикла;
				ГруппыДляПодобраннойПродукции.Добавить(СтрокаСГрупповымиУпаковками);
			КонецЦикла;
			
		Иначе
			
			ПовыситьУровеньДетализацииУпаковкиДоКоробаСГрупповымиУпаковками(
				СтрокаДерева,
				УдаляемаяПродукция,
				УдаляемыеУпаковки,
				ГруппыДляПодобраннойПродукции);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалениеПодобраннойПродукцииПриСменеДетализации(УдаляемаяПродукция, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	ДобавлениеПодобраннойПродукцииПриСменеДетализации(ГруппыДляПодобраннойПродукции, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемаяПродукция);
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемыеУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовыситьУровеньДетализацииУпаковкиДоКоробаСГрупповымиУпаковками(СтрокаДерева, УдаляемыеСтроки, УдаляемыеУпаковки, ГруппыДляПодобраннойПродукции, РодительскаяУпаковкаСамодостаточна = Ложь, ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Ложь)
	
	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		Если РодительскаяУпаковкаСамодостаточна Тогда
			УдаляемыеСтроки.Добавить(СтрокаДерева);
		Иначе
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
		ГруппыДляПодобраннойПродукции.Добавить(СтрокаДерева);
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПовыситьУровеньДетализацииУпаковкиДоКоробаСГрупповымиУпаковками(
				ПодчиненнаяСтрока,
				УдаляемыеСтроки,
				УдаляемыеУпаковки,
				ГруппыДляПодобраннойПродукции,
				Истина);
		КонецЦикла;
		
		ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		ИмеютсяПодчиненныеНеУдаляемыеУпаковки = Ложь;
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПовыситьУровеньДетализацииУпаковкиДоКоробаСГрупповымиУпаковками(
				ПодчиненнаяСтрока,
				УдаляемыеСтроки,
				УдаляемыеУпаковки,
				ГруппыДляПодобраннойПродукции,,
				ИмеютсяПодчиненныеНеУдаляемыеУпаковки);
		КонецЦикла;
		
		Если ИмеютсяПодчиненныеНеУдаляемыеУпаковки Тогда
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
		Иначе
			УдаляемыеУпаковки.Добавить(СтрокаДерева);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииДоГрупповыхУпаковокСПотребительскими()
	
	ЭлементыДерева  = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки()
			Или СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
			ПонизитьУровеньДетализацииУпаковкиДоГрупповыхУпаковокСПотребительскими(СтрокаДерева, УдаляемыеСтроки);
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
			СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок = Не СтрокаДерева.ПолучитьЭлементы().Количество();
		КонецЕсли;
	КонецЦикла;
	
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемыеСтроки);
	
	Если ИдентификаторТекущейПроверяемойУпаковки <> - 1 Тогда
		Если НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки) = Неопределено Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки = -1;

КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииУпаковкиДоГрупповыхУпаковокСПотребительскими(СтрокаДерева, УдаляемыеСтроки)

	ЕстьВложенныеУпаковки  = Ложь;
	ЕстьВложеннаяПродукция = Ложь;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			ЕстьВложенныеУпаковки = Истина;
			ПонизитьУровеньДетализацииУпаковкиДоГрупповыхУпаковокСПотребительскими(ПодчиненнаяСтрока, УдаляемыеСтроки);
		ИначеЕсли ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			ЕстьВложеннаяПродукция = Истина;
		КонецЕсли;
	КонецЦикла;
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	
	Если ЕстьВложеннаяПродукция И ЕстьВложенныеУпаковки Тогда
		
		СтрокаПродукцияБезУпаковки   = СтрокаПотребительскиеУпаковкиБезУпаковки(ЭтотОбъект);
		ЭлементыПродукцияБезУпаковки = СтрокаПродукцияБезУпаковки.ПолучитьЭлементы();
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
				СтрокаСПотребительскойУпаковкой = ЭлементыПродукцияБезУпаковки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСПотребительскойУпаковкой, ПодчиненнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		УдаляемыеСтроки.Добавить(СтрокаДерева);
	
	ИначеЕсли ЕстьВложеннаяПродукция Тогда
		
		Если РодительскаяСтрока <> Неопределено Тогда

			НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Ложь;

			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
				СтрокаСПотребительскойУпаковкой = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСПотребительскойУпаковкой,ПодчиненнаяСтрока);
			КонецЦикла;
			
			УдаляемыеСтроки.Добавить(СтрокаДерева);

		КонецЕсли;
		
	ИначеЕсли ЕстьВложенныеУпаковки
		Или СтрокаДерева.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки()
		Или СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		УдаляемыеСтроки.Добавить(СтрокаДерева);
		
	ИначеЕсли РодительскаяСтрока <> Неопределено Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
		
		УдаляемыеСтроки.Добавить(СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииДоПотребительскихУпаковок()
	
	ЭлементыДерева  = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			УдаляемыеСтроки.Добавить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из УдаляемыеСтроки Цикл
		ПонизитьУровеньДетализацииУпаковкиДоПотребительскойУпаковки(СтрокаДерева, ЭлементыДерева);
		ЭлементыДерева.Удалить(СтрокаДерева);
	КонецЦикла;
	
	ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки = -1;
	ИдентификаторСтрокиПотребительскиеУпаковкиБезУпаковки   = -1;

	ИдентификаторТекущейПроверяемойУпаковки = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииУпаковкиДоПотребительскойУпаковки(СтрокаДерева, ЭлементыДерева)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			ПонизитьУровеньДетализацииУпаковкиДоПотребительскойУпаковки(ПодчиненнаяСтрока, ЭлементыДерева);
		Иначе
			НоваяСтрока = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ПодчиненныеСтроки.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьУровеньДетализацииВышеЧемПотребительскиеУпаковки(НовыйРежимДетализации)
	
	ЭлементыДерева     = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	ПродукцияКПереносу = Новый Массив;
	
	Для Каждого СтрокаСПродукцией Из ЭлементыДерева Цикл
		ПродукцияКПереносу.Добавить(СтрокаСПродукцией);
	КонецЦикла;
	
	СтрокаПродукцияБезУпаковки   = ДобавленнаяСтрокаПотребительскиеУпаковкиБезУпаковки();
	ЭлементыПродукцияБезУпаковки = СтрокаПродукцияБезУпаковки.ПолучитьЭлементы();
	
	Для Каждого СтрокаСПродукцией Из ПродукцияКПереносу Цикл
		НоваяСтрока = ЭлементыПродукцияБезУпаковки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСПродукцией);
		
		ЭлементыДерева.Удалить(СтрокаСПродукцией);
	КонецЦикла;
	
	Если НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
		Или НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
		Или НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами") Тогда
		ДобавленнаяСтрокаГрупповыеУпаковкиБезКоробки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУровеньДетализацииВышеЧемГрупповыеУпаковкиСПотребительскими(НовыйРежимДетализации)
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	ГрупповыеУпаковкиКПереносу = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
			ГрупповыеУпаковкиКПереносу.Добавить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаГрупповыеУпаковкиБезКоробки   = ДобавленнаяСтрокаГрупповыеУпаковкиБезКоробки();
	ЭлементыГрупповыеУпаковкиБезКоробки = СтрокаГрупповыеУпаковкиБезКоробки.ПолучитьЭлементы();
	
	УдаляемаяПродукция = Новый Массив;
	
	НоваяДетализацияКоробкиИлиКоробаСГрупповымиУпаковками =
		(НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
		Или НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами"));
	
	Для Каждого ГрупповаяУпаковкаКПереносу Из ГрупповыеУпаковкиКПереносу Цикл
		
		НоваяСтрока = ЭлементыГрупповыеУпаковкиБезКоробки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ГрупповаяУпаковкаКПереносу);
		
		Если НоваяДетализацияКоробкиИлиКоробаСГрупповымиУпаковками Тогда
			
			НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
			
			Для Каждого ПродукцияКПереносу Из ГрупповаяУпаковкаКПереносу.ПолучитьЭлементы() Цикл
				УдаляемаяПродукция.Добавить(ПродукцияКПереносу);
			КонецЦикла;
			
		Иначе
			
			Для Каждого ПродукцияКПереносу Из ГрупповаяУпаковкаКПереносу.ПолучитьЭлементы() Цикл
				СтрокаСПотребительскойУпаковкой = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСПотребительскойУпаковкой, ПродукцияКПереносу);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Отражаем изменения в таблице ПодобраннаяМаркируемаяПродукция и удаляем строки из ДеревоМаркированнойПродукции
	// Если текущая детализация КоробкиСГрупповымиУпаковками/Коробки, то анализируем УдаляемаяПродукция и ГрупповыеУпаковкиКПереносу
	Если НоваяДетализацияКоробкиИлиКоробаСГрупповымиУпаковками Тогда
		
		УдалениеПодобраннойПродукцииПриСменеДетализации(УдаляемаяПродукция, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
		ДобавлениеПодобраннойПродукцииПриСменеДетализации(ГрупповыеУпаковкиКПереносу, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
		
	КонецЕсли;
	
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемаяПродукция);
	УдалениеСтрокИзДерева(ЭлементыДерева, ГрупповыеУпаковкиКПереносу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьДетализациюСКоробокИКоробокСПотребительскимиУпаковкамиНаГрупповыеУпаковкиСПотребительскимиИПолную(НовыйРежимДетализации)
	
	// КоробкиСГропповымиУпаковками/Коробки --> Полная
	// Оставляем только ПродукцияБезУпаковки.
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	УдаляемыеГруппы   = Новый Массив;
	УдаляемыеУпаковки = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
			
			Продолжить;
			
		ИначеЕсли СтрокаДерева.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			
			Для Каждого СтрокаГрупповойУпаковки Из СтрокаДерева.ПолучитьЭлементы() Цикл
				УдаляемыеГруппы.Добавить(СтрокаГрупповойУпаковки);
			КонецЦикла;
			
		Иначе
			
			ПереключитьДетализациюСКоробокИКоробокСПотребительскимиУпаковкамиНаПолнуюПродолжение(СтрокаДерева, УдаляемыеГруппы, УдаляемыеУпаковки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Отражаем изменения в таблице ПодобраннаяМаркируемаяПродукция и удаляем строки из ДеревоМаркированнойПродукции
	УдалениеПодобраннойПродукцииПриСменеДетализации(УдаляемыеГруппы, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами") Тогда
		УдалениеПодобраннойПродукцииПриСменеДетализации(УдаляемыеУпаковки, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	КонецЕсли;
	
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемыеГруппы);
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемыеУпаковки);
	
	Если НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими") Тогда
		ЭлементыДерева.Удалить(СтрокаГрупповыеУпаковкиБезКоробки(ЭтотОбъект));
		ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки = -1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьДетализациюСКоробокИКоробокСПотребительскимиУпаковкамиНаПолнуюПродолжение(СтрокаДерева, УдаляемыеГруппы, УдаляемыеУпаковки, ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Ложь)
	
	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		УдаляемыеГруппы.Добавить(СтрокаДерева);
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		ИмеютсяПодчиненныеНеУдаляемыУпаковк = Ложь;
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПереключитьДетализациюСКоробокИКоробокСПотребительскимиУпаковкамиНаПолнуюПродолжение(
				ПодчиненнаяСтрока,
				УдаляемыеГруппы,
				УдаляемыеУпаковки,
				ИмеютсяПодчиненныеНеУдаляемыУпаковк);
		КонецЦикла;
		
		Если ИмеютсяПодчиненныеНеУдаляемыУпаковк Тогда
			
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
			
		Иначе
			
			УдаляемыеУпаковки.Добавить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьДетализациюСКоробовСПотребительскимиУпаковкамиНаКоробки()
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	УдаляемаяПродукция = Новый Массив;
	УдаляемыеГруппы    = Новый Массив;
	УдаляемыеУпаковки  = Новый Массив;
	
	УпаковкиДляПодобраннойПродукции = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
			Или СтрокаДерева.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			Продолжить;
		КонецЕсли;
		
		ПереключитьДетализациюСКоробовСПотребительскимиУпаковкамиНаКоробкиПродолжение(
			СтрокаДерева,
			УдаляемаяПродукция,
			УдаляемыеГруппы,
			УдаляемыеУпаковки,
			УпаковкиДляПодобраннойПродукции);
		
	КонецЦикла;
	
	УдалениеПодобраннойПродукцииПриСменеДетализации(УдаляемаяПродукция, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	УдалениеПодобраннойПродукцииПриСменеДетализации(УдаляемыеГруппы, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	ДобавлениеПодобраннойПродукцииПриСменеДетализации(УпаковкиДляПодобраннойПродукции, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемаяПродукция);
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемыеГруппы);
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемыеУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьДетализациюСКоробовСПотребительскимиУпаковкамиНаКоробкиПродолжение(СтрокаДерева, УдаляемаяПродукция, УдаляемыеГруппы, УдаляемыеУпаковки, УпаковкиДляПодобраннойПродукции, РодительскаяУпаковкаСамодостаточна = Ложь, ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Ложь)
	
	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		Если РодительскаяУпаковкаСамодостаточна Тогда
			УдаляемаяПродукция.Добавить(СтрокаДерева);
		Иначе
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		Если РодительскаяУпаковкаСамодостаточна Или СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0 Тогда
			УдаляемыеГруппы.Добавить(СтрокаДерева);
		Иначе
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		УпаковкаСамодостаточна = Ложь;
		Если ЭтоЗаполненнаяМонотоварнаяУпаковкаСGTIN(СтрокаДерева) Тогда
			УпаковкаСамодостаточна = Истина;
		КонецЕсли;
		
		ИмеютсяПодчиненныеНеУдаляемыУпаковк = Ложь;
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПереключитьДетализациюСКоробовСПотребительскимиУпаковкамиНаКоробкиПродолжение(
				ПодчиненнаяСтрока,
				УдаляемаяПродукция,
				УдаляемыеГруппы,
				УдаляемыеУпаковки,
				УпаковкиДляПодобраннойПродукции,
				УпаковкаСамодостаточна,
				ИмеютсяПодчиненныеНеУдаляемыУпаковк);
		КонецЦикла;
		
		Если УпаковкаСамодостаточна Тогда
			
			СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
			
			УпаковкиДляПодобраннойПродукции.Добавить(СтрокаДерева);
			
		ИначеЕсли ИмеютсяПодчиненныеНеУдаляемыУпаковк Тогда
			
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
			
		Иначе
			
			УдаляемыеУпаковки.Добавить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьДетализациюСКоробкиНаКоробкиСГрупповымиУпаковками()
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	УдаляемыеУпаковки = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		Если СтрокаДерева.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
			Или СтрокаДерева.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			Продолжить;
		КонецЕсли;
		
		ПереключитьДетализациюСКоробкиНаКоробкиСПотребительскимиУпаковкамиПродолжение(СтрокаДерева, УдаляемыеУпаковки);
		
	КонецЦикла;
	
	УдалениеПодобраннойПродукцииПриСменеДетализации(УдаляемыеУпаковки, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	
	УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемыеУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьДетализациюСКоробкиНаКоробкиСПотребительскимиУпаковкамиПродолжение(СтрокаДерева, УдаляемыеУпаковки, ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Ложь)
	
	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		ИмеютсяПодчиненныеНеУдаляемыУпаковк = Ложь;
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПереключитьДетализациюСКоробкиНаКоробкиСПотребительскимиУпаковкамиПродолжение(
				ПодчиненнаяСтрока, УдаляемыеУпаковки, ИмеютсяПодчиненныеНеУдаляемыУпаковк);
		КонецЦикла;
		
		Если ИмеютсяПодчиненныеНеУдаляемыУпаковк Тогда
			
			ВРодительскойУпаковкеИмеютсяНеУдаляемыеУпаковки = Истина;
			
		Иначе
			
			УдаляемыеУпаковки.Добавить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавленнаяСтрокаПотребительскиеУпаковкиБезУпаковки()
	
	НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Вставить(0);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока, ВидМаркируемойПродукции);
	
	ИдентификаторСтрокиПотребительскиеУпаковкиБезУпаковки = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Функция ДобавленнаяСтрокаГрупповыеУпаковкиБезКоробки()
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		НоваяСтрока = ЭлементыДерева.Вставить(0);
	ИначеЕсли ЭлементыДерева[0].ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		НоваяСтрока = ЭлементыДерева.Вставить(1);
	Иначе
		НоваяСтрока = ЭлементыДерева.Вставить(0);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуГрупповыеУпаковкиБезКоробки(НоваяСтрока, ВидМаркируемойПродукции);
	
	ИдентификаторСтрокиГрупповыеУпаковкиБезКоробки = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохраненнаяДетализацияСтруктурыХранения(РежимПодбораСуществующихУпаковок)
	
	Возврат Обработки.ПроверкаИПодборПродукцииИСМП.СохраненнаяДетализацияСтруктурыХранения(РежимПодбораСуществующихУпаковок);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок)
	
	Возврат Обработки.ПроверкаИПодборТабачнойПродукцииМОТП.ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок);
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДетализацииСчитанойУпаковки

&НаСервере
Процедура ПреобразоватьДетализациюСчитаннойУпаковкиДоПотребительскойУпаковки(ДеревоУпаковок, Результат)
	
	Если ТипЗнч(ДеревоУпаковок) = Тип("ДеревоЗначений") Тогда
		
		СтрокиВерхнегоУровня = ДеревоУпаковок.Строки;
		
	Иначе
		
		СтрокиВерхнегоУровня = Новый Массив;
		СтрокиВерхнегоУровня.Добавить(ДеревоУпаковок);
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиВерхнегоУровня Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			СкопироватьСтрокуДереваПриПониженииДетализацииДоПотребительскойУпаковки(СтрокаДерева, Результат);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокуДереваПриПониженииДетализацииДоПотребительскойУпаковки(СтрокаДерева, Результат)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			СкопироватьСтрокуДереваПриПониженииДетализацииДоПотребительскойУпаковки(ПодчиненнаяСтрока, Результат);
		Иначе
			Результат.Добавить(ПодчиненнаяСтрока);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьДетализациюСчитаннойУпаковкиДоКоробаСПотребительскимиУпаковками(ДеревоУпаковок, Результат)
	
	Если ТипЗнч(ДеревоУпаковок) = Тип("ДеревоЗначений") Тогда
		
		СтрокиВерхнегоУровня = ДеревоУпаковок.Строки;
		
	Иначе
		
		СтрокиВерхнегоУровня = Новый Массив;
		СтрокиВерхнегоУровня.Добавить(ДеревоУпаковок);
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиВерхнегоУровня Цикл
		
		СкопироватьСтрокуДереваПриПониженииДетализацииДоКоробаСПотребительскимиУпаковками(СтрокаДерева, Результат);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокуДереваПриПониженииДетализацииДоКоробаСПотребительскимиУпаковками(СтрокаДерева, Результат)
	
	ЕстьВложеннаяПродукция = Ложь;
	
	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			СкопироватьСтрокуДереваПриПониженииДетализацииДоКоробаСПотребительскимиУпаковками(ПодчиненнаяСтрока, Результат);
			
		Иначе
			
			ЕстьВложеннаяПродукция = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьВложеннаяПродукция Тогда
		
		Результат.Добавить(СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазагрегацияУпаковки

&НаКлиенте
Процедура ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(СтрокиДерева, НовыйРодитель = Неопределено)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если НовыйРодитель <> Неопределено Тогда
			РодительДобавляемойСтроки = НовыйРодитель;
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			РодительДобавляемойСтроки = Неопределено;
		ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			РодительДобавляемойСтроки = СтрокаПотребительскиеУпаковкиБезУпаковки(ЭтотОбъект);
		ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
			РодительДобавляемойСтроки = СтрокаГрупповыеУпаковкиБезКоробки(ЭтотОбъект);
		Иначе
			РодительДобавляемойСтроки = ДеревоМаркированнойПродукции;
		КонецЕсли;
		
		Если РодительДобавляемойСтроки <> Неопределено Тогда
			НоваяСтрока = РодительДобавляемойСтроки.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Иначе
			НоваяСтрока = Неопределено;
		КонецЕсли;
		
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(СтрокаДерева.ПолучитьЭлементы(), НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных() Экспорт
	
	Если КодМаркировкиДляУточнения <> Неопределено
		И КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки
		И ДоступноСозданиеНовыхУпаковок
		И ((КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ТребуетВзвешивания
				И ЗначениеЗаполнено(КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.Упаковка))
			ИЛИ (Не КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ТребуетВзвешивания
				И КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ПлановоеКоличествоПотребительскихУпаковок > 1))
	Тогда
		
		ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
		Если ТекущаяПроверяемаяУпаковка <> Неопределено
			И ТекущаяПроверяемаяУпаковка.GTIN = КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.GTIN
			И ЗначениеЗаполнено(ТекущаяПроверяемаяУпаковка.GTIN) Тогда
			ДанныеШтрихкода = Новый Структура(
				"Штрихкод,Количество", ТекущаяПроверяемаяУпаковка.Штрихкод, 1);
			РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, Неопределено);
		Иначе
			СгенерироватьИОткрытьНовуюУпаковкуGS1128();
		КонецЕсли;
		
		КодМаркировкиДляУточнения = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиент.НачатьПолучениеВесаАвтоматически(ЭтотОбъект) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если КодМаркировкиДляУточнения <> Неопределено
		И КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки
		И ДоступноСозданиеНовыхУпаковок
		И ((КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ТребуетВзвешивания
				И ЗначениеЗаполнено(КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.Упаковка))
			ИЛИ (Не КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ТребуетВзвешивания
				И КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ПлановоеКоличествоПотребительскихУпаковок > 1))
	Тогда
		
		ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
		Если ТекущаяПроверяемаяУпаковка <> Неопределено
			И ТекущаяПроверяемаяУпаковка.GTIN = КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.GTIN
			И ЗначениеЗаполнено(ТекущаяПроверяемаяУпаковка.GTIN) Тогда
			ДанныеШтрихкода = Новый Структура(
				"Штрихкод,Количество", ТекущаяПроверяемаяУпаковка.Штрихкод, 1);
			РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, Неопределено);
		Иначе
			СгенерироватьИОткрытьНовуюУпаковкуGS1128();
		КонецЕсли;
		
		КодМаркировкиДляУточнения = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиент.НачатьПолучениеВесаАвтоматически(ЭтотОбъект) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОповещениеПриЗавершении);
	
КонецПроцедуры

#Область Упаковки

&НаКлиенте
Процедура СгенерироватьИОткрытьНовуюУпаковкуGS1128()
	
	РезультатГенерации = СгенерироватьНовуюУпаковкуGS1128НаСервере(АдресПредыдущихШтрихкодов, КодМаркировкиДляУточнения);
	Если РезультатГенерации = Неопределено Тогда
		ОткрытьФормуГенерацииУпаковки();
	Иначе
		ПослеГенерацииШтрихкодаДляНовойУпаковки(РезультатГенерации, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГенерацииУпаковки()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресПредыдущихШтрихкодов", АдресПредыдущихШтрихкодов);
	
	Если КодМаркировкиДляУточнения <> Неопределено Тогда
		ДанныеШтрихкода = КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
		ПараметрыОткрытияФормы.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ПараметрыОткрытияФормы.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("ДоступныеТипыШтрихкодовСтрокой",
		ПроверкаИПодборПродукцииИСМПКлиент.ДоступныеТипыШтрихкодовСтрокой());
	ПервыйТипШтрихкодаСтрокой = ПараметрыОткрытияФормы.ДоступныеТипыШтрихкодовСтрокой.Получить(0).Значение;
	ПараметрыОткрытияФормы.Вставить("ТипШтрихкода",  ШтрихкодированиеИСКлиентСервер.ТипШтрихкодаПоСтроке(ПервыйТипШтрихкодаСтрокой));
	
	ОповещениеПослеГенерацииШтрихкодаУпаковки = Новый ОписаниеОповещения("ПослеГенерацииШтрихкодаДляНовойУпаковки", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ПараметрыОткрытияФормы, ЭтотОбъект,,,,
	             ОповещениеПослеГенерацииШтрихкодаУпаковки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СгенерироватьНовуюУпаковкуGS1128НаСервере(АдресПредыдущихШтрихкодов, КодМаркировкиДляУточнения)
	
	ДанныеЗаполнения = Обработки.ГенерацияШтрихкодовУпаковок.ДанныеЗаполненияШтрихкода();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода);
	
	ДанныеЗаполнения.АдресПредыдущихШтрихкодов = АдресПредыдущихШтрихкодов;
	ДанныеЗаполнения.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128;
	ДанныеЗаполнения.ТипШтрихкодаСтрокой = "GS1128";
	
	Возврат Обработки.ГенерацияШтрихкодовУпаковок.СгенерироватьОчереднуюУпаковку(ДанныеЗаполнения);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьАвтоматическоеЗакрытиеУпаковки()
	
	ТекущаяПроверяемаяУпаковка = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторТекущейПроверяемойУпаковки);
	Если ТекущаяПроверяемаяУпаковка <> Неопределено
		И ТекущаяПроверяемаяУпаковка.Коэффициент = ТекущаяПроверяемаяУпаковка.КоличествоПодчиненныхПотребительскихУпаковок
		И ТекущаяПроверяемаяУпаковка.КоличествоПодчиненныхПотребительскихУпаковок > 0 Тогда
		
		ДанныеШтрихкода = Новый Структура("Штрихкод, Количество", ТекущаяПроверяемаяУпаковка.Штрихкод, 1);
		РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьШтрихкодТекущейУпаковки()
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяЗакрытиеУпаковки = ТекущиеДанные.ИдетПроверкаДаннойУпаковки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НапечататьШтрихкодТекущейУпаковкиПослеЗакрытияУпаковки", ЭтотОбъект, ТребуетсяЗакрытиеУпаковки);
	
	Если ТребуетсяЗакрытиеУпаковки Тогда
		
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Перед печатью этикетки упаковки будет выполнено закрытие упаковки. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьШтрихкодТекущейУпаковкиПослеЗакрытияУпаковки(Результат, ТребуетсяЗакрытиеУпаковки) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяЗакрытиеУпаковки Тогда
		
		ДанныеШтрихкода = Новый Структура("Штрихкод, Количество", ТекущиеДанные.Штрихкод, 1);
		РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, Неопределено);
		
	КонецЕсли;
	
	НормализироватьШтрихкодУпаковкиПоСоставуВложенныхУпаковок(ЭтотОбъект, ТекущиеДанные, СоответствиеШтрихкодовСтрокДерева);
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("ТипШтрихкода",   ТекущиеДанные.ТипШтрихкода);
	ПараметрыШтрихкода.Вставить("Штрихкод",       ТекущиеДанные.Штрихкод);
	ПараметрыШтрихкода.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыШтрихкода.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыШтрихкода.Вставить("ДатаМаркировки", ТекущаяДата());
	
	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить(ПараметрыШтрихкода);
	
	ШтрихкодыУпаковокКлиент.ПечатьШтрихкодовУпаковок(ОбъектыПечати, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НормализироватьШтрихкодУпаковкиПоСоставуВложенныхУпаковок(Форма, СтрокаДерева, СоответствиеШтрихкодовСтрокДерева)
	
	Если СтрокаДерева.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		Или СтрокаДерева.ТипШтрихкода <> ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеШтрихкода = СтрокаДерева.Штрихкод;
	
	Если СтрНачинаетсяС(ЗначениеШтрихкода, "(") Тогда
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(ЗначениеШтрихкода);
	Иначе
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1(ЗначениеШтрихкода);
	КонецЕсли;
	
	ИспользуемыеИдентификаторы = ПараметрыШтрихкода.Результат;
	
	Если ИспользуемыеИдентификаторы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПрименения_GTIN02                    = "02";  // GTIN02
	ИдентификаторПрименения_МассаНеттоВКг             = "310"; // МАССАНЕТТОВКГ
	ИдентификаторПрименения_КоличествоВложенныхЕдинич = "37";  // КОЛИЧЕСТВОВЛОЖЕННЫХЕДИНИЦ
	
	Строка_GTIN02                    = Неопределено;
	Строка_КоличествоВложенныхЕдиниц = Неопределено;
	Строка_МассаНеттоВКг             = Неопределено;
	
	Для Каждого ПараметрЗначенияИдентификатораПрименения Из ИспользуемыеИдентификаторы Цикл
		
		Если ПараметрЗначенияИдентификатораПрименения.КлючИдентификатора = ИдентификаторПрименения_GTIN02 Тогда
			Строка_GTIN02 = ПараметрЗначенияИдентификатораПрименения;
		ИначеЕсли ПараметрЗначенияИдентификатораПрименения.КлючИдентификатора = ИдентификаторПрименения_КоличествоВложенныхЕдинич Тогда
			Строка_КоличествоВложенныхЕдиниц = ПараметрЗначенияИдентификатораПрименения;
		ИначеЕсли ПараметрЗначенияИдентификатораПрименения.КлючИдентификатора = ИдентификаторПрименения_МассаНеттоВКг Тогда
			Строка_МассаНеттоВКг = ПараметрЗначенияИдентификатораПрименения;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Строка_МассаНеттоВКг <> Неопределено И СтрокаДерева.ПроизвольнаяЕдиницаУчета Тогда
		
		ВесУпаковки = СтрокаДерева.Количество;
		
		ФорматнаяСтрока = СтрШаблон("ЧДЦ=%1; ЧРД=.; ЧН=0; ЧГ=0", Строка_МассаНеттоВКг.ДополнительныйПараметр);
		
		Строка_МассаНеттоВКг.ЗначениеСтрокой = Формат(ВесУпаковки, ФорматнаяСтрока);
		Строка_МассаНеттоВКг.Значение        = ВесУпаковки;
		
	КонецЕсли;
	
	Если Не (Строка_GTIN02 = Неопределено Или Строка_КоличествоВложенныхЕдиниц = Неопределено) Тогда
		
		КоличествоВложенныхЕдиниц = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
		
		Строка_КоличествоВложенныхЕдиниц.ЗначениеСтрокой = Формат(КоличествоВложенныхЕдиниц, "ЧН=; ЧГ=0");
		Строка_КоличествоВложенныхЕдиниц.Значение        = КоличествоВложенныхЕдиниц;
		
	КонецЕсли;
	
	Штрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ИспользуемыеИдентификаторы);
	
	Если ЗначениеШтрихкода = Штрихкод Тогда
		Возврат;
	КонецЕсли;
	
	НормализованныйШтрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ИспользуемыеИдентификаторы, Ложь);
	
	СоответствиеШтрихкодовСтрокДерева.Удалить(СтрокаДерева.НормализованныйШтрихкод);
	СоответствиеШтрихкодовСтрокДерева.Вставить(НормализованныйШтрихкод, СтрокаДерева.ПолучитьИдентификатор());
	
	ЭлементСписка = Форма.ДобавленныеУпаковки.НайтиПоЗначению(СтрокаДерева.НормализованныйШтрихкод);
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Значение = НормализованныйШтрихкод;
	КонецЕсли;
	
	СтрокаДерева.Штрихкод                = Штрихкод;
	СтрокаДерева.НормализованныйШтрихкод = НормализованныйШтрихкод;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(СтрокаДерева, Форма.ВидМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
	
	Если РезультатВыполнения = Неопределено
		Или Не РезультатВыполнения.Результат Тогда
		ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОповещениеПриЗавершении);
		Возврат;
	КонецЕсли;
	
	КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.Количество = РезультатВыполнения.Вес;
	КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ТребуетсяОбновлениеШтрихкода = Истина;
	
	Если РезультатВыполнения.Вес = 0
		Или ВесПредыдущегоВзвешивания = 0
		Или РезультатВыполнения.Вес = ВесПредыдущегоВзвешивания
		Или ШтрихкодированиеИСМПКлиентСервер.ТребуетсяУточнениеДанных(КодМаркировкиДляУточнения) Тогда
		
		Если РезультатВыполнения.Вес <> 0 Тогда
			ВесПредыдущегоВзвешивания = РезультатВыполнения.Вес;
		КонецЕсли;
		ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОповещениеПриЗавершении);
		
	Иначе
		
		ВесПредыдущегоВзвешивания = РезультатВыполнения.Вес;
		ДанныеШтрихкода = КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
		КодМаркировкиДляУточнения = Неопределено;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ДанныеШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПоИдентификатору(ДанныеФормыДерево, Идентификатор)
	
	// Существует проблема в веб-клиенте: метод НайтиПоИдентификатору, может вернуть ДанныеФормыДерево
	
	Если Идентификатор = -1
		Или Идентификатор = Неопределено
		Или ТипЗнч(Идентификатор) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФормыЭлементДерева = ДанныеФормыДерево.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(ДанныеФормыЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ДанныеФормыЭлементДерева;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОчиститьСопоставлениеНаСервере(ВыделенныеСтроки, КэшированныеЗначения)
	
	ПроверкаИПодборПродукцииИСМП.ПриОчисткиСопоставленияМаркированнойПродукции(ЭтотОбъект, ВыделенныеСтроки, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеПодобраннойПродукцииПриСменеДетализации(СтрокиДерева, ВидУпаковки)
	
	Если ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриУдаленииСтроки(
				ЭтотОбъект, СтрокаДерева, 1, ПроверкаИПодборПродукцииИСМПКлиент,, КэшированныеЗначения);
		КонецЦикла;
		
	ИначеЕсли ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриУдаленииСтроки(
				ЭтотОбъект, СтрокаДерева, СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок, ПроверкаИПодборПродукцииИСМПКлиент,, КэшированныеЗначения);
		КонецЦикла;
		
	ИначеЕсли ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если Не ЭтоЗаполненнаяМонотоварнаяУпаковкаСGTIN(СтрокаДерева) Тогда
				Продолжить;
			КонецЕсли;
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриУдаленииСтроки(
				ЭтотОбъект, СтрокаДерева, СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок, ПроверкаИПодборПродукцииИСМПКлиент,, КэшированныеЗначения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеПодобраннойПродукцииПриСменеДетализации(СтрокиДерева, ВидУпаковки)
	
	Если ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриДобавленииСтроки(
				ЭтотОбъект, СтрокаДерева, 1, ПроверкаИПодборПродукцииИСМПКлиент,, КэшированныеЗначения);
		КонецЦикла;
		
	ИначеЕсли ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриДобавленииСтроки(
				ЭтотОбъект, СтрокаДерева, СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок, ПроверкаИПодборПродукцииИСМПКлиент,, КэшированныеЗначения);
		КонецЦикла;
		
	ИначеЕсли ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если Не ЭтоЗаполненнаяМонотоварнаяУпаковкаСGTIN(СтрокаДерева) Тогда
				Продолжить;
			КонецЕсли;
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриДобавленииСтроки(
				ЭтотОбъект, СтрокаДерева, СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок, ПроверкаИПодборПродукцииИСМПКлиент,, КэшированныеЗначения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЗаполненнаяМонотоварнаяУпаковкаСGTIN(СтрокаДерева, ИмяКолонкиКоличествоПродукции = "КоличествоПодчиненныхПотребительскихУпаковок")
	
	Возврат ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
		И СтрокаДерева[ИмяКолонкиКоличествоПродукции] > 0
		И ЗначениеЗаполнено(СтрокаДерева.GTIN);
	
КонецФункции

&НаКлиенте
Процедура УдалениеСтрокИзДерева(ЭлементыДерева, УдаляемыеСтроки)
	
	Для Каждого СтрокаДерева Из УдаляемыеСтроки Цикл
		
		Родитель = СтрокаДерева.ПолучитьРодителя();
		
		Если СтрокаДерева.ИдетПроверкаДаннойУпаковки
			И СтрокаДерева.ПолучитьИдентификатор() = ИдентификаторТекущейПроверяемойУпаковки Тогда
			
			Если Родитель = Неопределено
				Или Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(Родитель.ТипУпаковки) Тогда
				ИдентификаторТекущейПроверяемойУпаковки = -1;
			Иначе
				ИдентификаторТекущейПроверяемойУпаковки = Родитель.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Родитель = Неопределено Тогда
			ЭлементыДерева.Удалить(СтрокаДерева);
		Иначе
			Родитель.ПолучитьЭлементы().Удалить(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакРасчитыватьХешСуммуУпаковокПриСменеДетализации()

	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли;

	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
		Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами")
		Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки") Тогда
		РасчитыватьХешСуммуУпаковок = Ложь;
	Иначе
		РасчитыватьХешСуммуУпаковок = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ШтрихкодыВерхнегоУровня(ДеревоУпаковок = Неопределено, Штрихкоды = Неопределено)
	Если Штрихкоды = Неопределено Тогда
		Штрихкоды = Новый Массив;
	КонецЕсли;
	Если ДеревоУпаковок = Неопределено Тогда
		ДеревоУпаковок = ДеревоМаркированнойПродукции;
	КонецЕсли;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.ВидУпаковки) Тогда
			Штрихкод                = СтрокаДерева.Штрихкод;
			НормализованныйШтрихкод = СтрокаДерева.Штрихкод;
			Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
				НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиент.НормализованныйШтрихкод(Штрихкод, ВидМаркируемойПродукции, Неопределено);
			КонецЕсли;
			
			Штрихкоды.Добавить(
				Новый Структура("Штрихкод, НормализованныйШтрихкод, Количество, ШтрихкодУпаковки",
					Штрихкод, НормализованныйШтрихкод, 1, ""));
		Иначе
			ШтрихкодыВерхнегоУровня(СтрокаДерева, Штрихкоды);
		КонецЕсли;
	КонецЦикла;
	Возврат Штрихкоды;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьШтрихкодыИСтатусыПроверки(ДеревоУпаковок, ШтрихкодыИСтатусыПроверки)
	Для Каждого СтрокаДерева Из ДеревоУпаковок.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.ВидУпаковки) Тогда
			Штрихкод                = СтрокаДерева.Штрихкод;
			НормализованныйШтрихкод = СтрокаДерева.Штрихкод;
			Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
				НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиент.НормализованныйШтрихкод(Штрихкод, ВидМаркируемойПродукции, Неопределено);
			КонецЕсли;
			
			ШтрихкодыИСтатусыПроверки.Добавить(
				Новый Структура("Штрихкод, НормализованныйШтрихкод, СтатусПроверки",
					Штрихкод, НормализованныйШтрихкод, СтрокаДерева.СтатусПроверки));
		КонецЕсли;
		ЗаполнитьШтрихкодыИСтатусыПроверки(СтрокаДерева, ШтрихкодыИСтатусыПроверки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУпаковкиВерхнегоУровня(СтрокиДереваУпаковок)
	ТекущийИндекс = СтрокиДереваУпаковок.Количество() - 1;
	Пока ТекущийИндекс >= 0 Цикл
		СтрокаДерева = СтрокиДереваУпаковок[ТекущийИндекс];
		Если ЗначениеЗаполнено(СтрокаДерева.ВидУпаковки) Тогда
			СтрокиДереваУпаковок.Удалить(СтрокаДерева);
		Иначе
			УдалитьУпаковкиВерхнегоУровня(СтрокаДерева.ПолучитьЭлементы());
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс - 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ИспользоватьЗагрузкуИзТСДПриСменеДетализации(НовыйРежимДетализации)
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		Возврат Ложь;
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
			Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими")
			Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		Возврат Ложь;
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками")
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами") Тогда
		Возврат Ложь;
	ИначеЕсли НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.Полная")
		Или НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими")
		Или НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		Возврат ТребуетсяВосстановитьДетализацию(ДеревоМаркированнойПродукции, Ложь);
	КонецЕсли;
	
	// Коробки -> КоробкиСБлоками
	Возврат ТребуетсяВосстановитьДетализацию(ДеревоМаркированнойПродукции, Истина);
	
КонецФункции

&НаКлиенте
Функция ТребуетсяВосстановитьДетализацию(ДеревоУпаковок, ДопустимБлокБезПачек, ТребуетсяВосстановитьДетализацию = Ложь)
	Если ТребуетсяВосстановитьДетализацию Тогда
		Возврат ТребуетсяВосстановитьДетализацию;
	КонецЕсли;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
			Если СтрокаДерева.ПолучитьЭлементы().Количество() = 0 И СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок > 0 И Не ДопустимБлокБезПачек Тогда
				ТребуетсяВосстановитьДетализацию = Истина;
			КонецЕсли;
		ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
			Если СтрокаДерева.ПолучитьЭлементы().Количество() = 0 И СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок > 0 Тогда
				ТребуетсяВосстановитьДетализацию = Истина;
			Иначе
				ТребуетсяВосстановитьДетализацию(СтрокаДерева, ДопустимБлокБезПачек, ТребуетсяВосстановитьДетализацию);
			КонецЕсли
		Иначе
			ТребуетсяВосстановитьДетализацию(СтрокаДерева, ДопустимБлокБезПачек, ТребуетсяВосстановитьДетализацию);
		КонецЕсли;
		Если ТребуетсяВосстановитьДетализацию Тогда
			Возврат ТребуетсяВосстановитьДетализацию;
		КонецЕсли;
	КонецЦикла;
	Возврат ТребуетсяВосстановитьДетализацию;
КонецФункции

&НаКлиенте
Функция НовыеПараметрыОбработкиТСД()
	
	ПараметрыОбработкиТС = Новый Структура;
	ПараметрыОбработкиТС.Вставить("Состояние", "");
	ПараметрыОбработкиТС.Вставить("ЭтоЗавершениеАвторизации", Ложь);
	ПараметрыОбработкиТС.Вставить("ЭтоВосстановлениеВложенностиУпаковок", Ложь);
	ПараметрыОбработкиТС.Вставить("ДополнительныеПараметры", Неопределено);
	
	Возврат ПараметрыОбработкиТС;
	
КонецФункции

&НаСервере
Процедура ДобавитьПредставлениеКоличестваУпаковок(СтрокиСКоличествомУпаковок, ПредставлениеУпаковки, Количество)
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаСКоличеством = ПолучитьСклоненияСтрокиПоЧислу(ПредставлениеУпаковки, Количество,, "ЧС=Количественное", "ПД=Именительный; ПЧ=ЧислоСОкончанием")[0];
	СтрокиСКоличествомУпаковок.Добавить(СтрокаСКоличеством);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбщийМодульКонтекстаПиП()
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ПроверкаИПодборПродукцииИСМП;
	#Иначе
	Возврат ПроверкаИПодборПродукцииИСМПКлиент;
	#КонецЕсли
КонецФункции

&НаКлиенте
Функция НеобходимаПеремаркировка()
	// При завершении подбора будет создаваться новая упаковка
	Если КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
		Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
	Возврат ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипУпаковкиГрупповыеУпаковкиБезКоробки()
	Возврат ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки();
КонецФункции

&НаКлиенте
Функция УточнениеДанныхДопустимо(СтрокаДерева)
	
	УточнениеДанныхДопустимо = Ложь;
	
	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		УточнениеДанныхДопустимо = Истина;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		УточнениеДанныхДопустимо =
			СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок > 0
			И (ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами")
			Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками"));
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		УточнениеДанныхДопустимо =
			ЭтоЗаполненнаяМонотоварнаяУпаковкаСGTIN(СтрокаДерева)
			И ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами");
		
	КонецЕсли;
	
	Возврат УточнениеДанныхДопустимо;
	
КонецФункции

&НаКлиенте
Процедура УточнитьКоличествоПодобраннойПродукцииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора  = Результат;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Не УточнениеКоличестваПодобраннойПродукцииДопустимо(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСвойствСтрокиИДанныхВыбора = Новый Соответствие;
	СоответствиеСвойствСтрокиИДанныхВыбора.Вставить("Количество", "КоличествоПодобрано");
	
	ИзменяемыеСвойства = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеВыбора Цикл
		ИмяСвойства = КлючЗначение.Ключ;
		Значение    = КлючЗначение.Значение;
		ИмяСвойстваСтроки = ИмяСвойства;
		Если СоответствиеСвойствСтрокиИДанныхВыбора[ИмяСвойства] <> Неопределено Тогда
			ИмяСвойстваСтроки = СоответствиеСвойствСтрокиИДанныхВыбора[ИмяСвойства];
		КонецЕсли;
		Если ТекущиеДанные[ИмяСвойстваСтроки] <> Значение Тогда
			ИзменяемыеСвойства.Добавить(ИмяСвойства);
		КонецЕсли;
	КонецЦикла;
	
	Если ИзменяемыеСвойства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСвойствСтроки = Новый Массив;
	ИменаСвойствСтроки.Добавить("GTIN");
	ИменаСвойствСтроки.Добавить("Номенклатура");
	ИменаСвойствСтроки.Добавить("Характеристика");
	ИменаСвойствСтроки.Добавить("Серия");
	ИменаСвойствСтроки.Добавить("Количество");
	
	Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидМаркируемойПродукции) Тогда
		ИменаСвойствСтроки.Добавить("ГоденДо");
		ИменаСвойствСтроки.Добавить("СкоропортящаясяПродукция");
		Если ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
			ИменаСвойствСтроки.Добавить("ИдентификаторПроисхожденияВЕТИС");
		КонецЕсли;
	КонецЕсли;
	
	СвойстваСтрокой = СтрСоединить(ИменаСвойствСтроки, ",");
	
	СтрокаИзмененийДо    = Новый Структура(СвойстваСтрокой);
	СтрокаИзмененийПосле = Новый Структура(СвойстваСтрокой);
	
	ЗаполнитьЗначенияСвойств(СтрокаИзмененийДо, ТекущиеДанные);
	Для Каждого ИмяСвойства Из ИзменяемыеСвойства Цикл
		ИмяСвойстваСтроки = ИмяСвойства;
		Если СоответствиеСвойствСтрокиИДанныхВыбора[ИмяСвойства] <> Неопределено Тогда
			ИмяСвойстваСтроки = СоответствиеСвойствСтрокиИДанныхВыбора[ИмяСвойства];
		КонецЕсли;
		СтрокаИзмененийДо[ИмяСвойства] = ТекущиеДанные[ИмяСвойстваСтроки];
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтрокаИзмененийПосле, СтрокаИзмененийДо);
	Для Каждого ИмяСвойства Из ИзменяемыеСвойства Цикл
		СтрокаИзмененийПосле[ИмяСвойства] = ДанныеВыбора[ИмяСвойства];
	КонецЦикла;
	
	Если ДопустимаПроизвольнаяЕдиницаУчета Тогда
		КоличествоКодовМаркировки = ТекущиеДанные.КоличествоПотребительскихУпаковок;
	Иначе
		КоличествоКодовМаркировки = ТекущиеДанные.КоличествоПодобрано;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УточнениеПодобранногоКоличестваМерногоТовара", Истина);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриУточненииСопоставления(
		ЭтотОбъект,
		СтрокаИзмененийДо,
		СтрокаИзмененийПосле,
		КоличествоКодовМаркировки,
		ПроверкаИПодборПродукцииИСМПКлиент,
		ДополнительныеПараметры,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Функция УточнениеКоличестваПодобраннойПродукцииДопустимо(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УточнениеДопустимо = Ложь;
	
	// Доступно изменять только вес
	Если ДопустимаПроизвольнаяЕдиницаУчета
		И ДопустимУчетМерныхТоваров
		И Не ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара
		И ТекущиеДанные.ТребуетВзвешивания
		И ТекущиеДанные.КоличествоПотребительскихУпаковокТребующихВзвешивания > 0 Тогда
		УточнениеДопустимо = Истина;
	КонецЕсли;
	
	Возврат УточнениеДопустимо;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьЗначениеСвойстваЗапросКоличестваМерногоТовара()
	
	Если Не ДопустимаПроизвольнаяЕдиницаУчета Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиватьКоличество = ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара;
	Если ЗапрашиватьКоличество И СоответствиеШтрихкодовСтрокДерева.Количество() > 0 Тогда
		ЗапрашиватьКоличество = Не ЕстьСтрокиМерногоТовараСНулевымКоличеством(ДеревоМаркированнойПродукции.ПолучитьЭлементы());
	КонецЕсли;
	
	УстановитьСвойствоЗапрашиватьКоличествоМерногоТовара(ЗапрашиватьКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойствоЗапрашиватьКоличествоМерногоТовара(ЗапрашиватьКоличество)
	
	ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара = ЗапрашиватьКоличество;
	ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара            = ЗапрашиватьКоличество;
	
	Элементы.ФормаВключитьОтключитьЗапросКоличестваМерногоТовара.Пометка                     = ЗапрашиватьКоличество;
	Элементы.ПодобраннаяМаркируемаяПродукцияУточнитьКоличествоПодобраннойПродукции.Видимость = Не ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьСтрокиМерногоТовараСНулевымКоличеством(КоллекцияЭлементов)
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВидУпаковки) Тогда
			
			Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
				
				Если СтрокаДерева.ПроизвольнаяЕдиницаУчета И СтрокаДерева.Количество = 0 Тогда
					Если РежимПодбораСуществующихУпаковок Тогда
						Если СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
							Возврат Истина;
						КонецЕсли;
					ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
				Или СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
				
				Если СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
					
					Если СтрокаДерева.ПроизвольнаяЕдиницаУчета И СтрокаДерева.Количество = 0 Тогда
						Если РежимПодбораСуществующихУпаковок Тогда
							Если СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
								Возврат Истина;
							КонецЕсли;
						ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
							Возврат Истина;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ЕстьСтрокиМерногоТовараСНулевымКоличеством(СтрокаДерева.ПолучитьЭлементы()) Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЕстьСтрокиМерногоТовараСНулевымКоличеством(СтрокаДерева.ПолучитьЭлементы()) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьСтатусСтрокиМерногоТовараСНулевымКоличествомПриВключенииЗапросаКоличестваМерногоТовара()
	
	Если Не ДопустимаПроизвольнаяЕдиницаУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара Тогда
		
		УстановитьСвойствоЗапрашиватьКоличествоМерногоТовара(Ложь);
		
	Иначе
		
		ЕстьПустыеСтроки = ЕстьСтрокиМерногоТовараСНулевымКоличеством(ДеревоМаркированнойПродукции.ПолучитьЭлементы());
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработатьТаблицу", ЕстьПустыеСтроки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьУстановкуСвойстваЗапрашиватьКоличествоМерногоТовара", ЭтотОбъект, ДополнительныеПараметры);
		
		Если ЕстьПустыеСтроки Тогда
			// TODO: Сообщить в тексте сообщения о необходимости взвесить товар с нулевым количеством
			СтрокиВопроса = Новый Массив;
			СтрокиВопроса.Добавить(НСтр("ru = 'В структуре упаковок есть упаковки с мерным товаром, для которых не указан вес.'"));
			СтрокиВопроса.Добавить(" ");
			СтрокиВопроса.Добавить(НСтр("ru = 'При установке свойства ""Запрашивать количество мерного товара"":
				| - статус проверки для таких упаковок будет установлен ""Отсутствует"";
				| - количество подобранной продукции будет пересчитано.'"));
			СтрокиВопроса.Добавить(Символы.ПС);
			СтрокиВопроса.Добавить(НСтр("ru = 'Продолжить установку свойства ""Запрашивать количество мерного товара""?'"));
			
			ТекстВопроса = СтрСоединить(СтрокиВопроса);
			
			СписокКнопок = Новый СписокЗначений();
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отказаться'"));
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да);
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУстановкуСвойстваЗапрашиватьКоличествоМерногоТовара(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработатьТаблицу Тогда
		
		Если РежимПодбораСуществующихУпаковок Тогда
			СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
		Иначе
			СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась")
		КонецЕсли;
		
		ИзменитьСтатусСтрокиМерногоТовараСНулевымКоличеством(ДеревоМаркированнойПродукции, СтатусПроверки);
		
		Если ТаблицаИзмененийПодобраннойПродукции.Количество() > 0 Тогда
			ОбработатьТаблицуИзмененийПодобраннойПродукции(ЭтотОбъект, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСвойствоЗапрашиватьКоличествоМерногоТовара(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусСтрокиМерногоТовараСНулевымКоличеством(СтрокаДерева, СтатусПроверки, СтатусСтрокиИзменен = Ложь)
	
	ИзменитьСтатусРодителя = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ИзменитьСтатус = Ложь;
		
		Если ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
			
			Если ПодчиненнаяСтрока.ПроизвольнаяЕдиницаУчета И ПодчиненнаяСтрока.Количество = 0 Тогда
				ИзменитьСтатус = (СтатусПроверки <> ПодчиненнаяСтрока.СтатусПроверки);
			КонецЕсли;
			
		ИначеЕсли ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
			Или ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
			
			Если ПодчиненнаяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
				
				Если ПодчиненнаяСтрока.ПроизвольнаяЕдиницаУчета И ПодчиненнаяСтрока.Количество = 0 Тогда
					ИзменитьСтатус = (СтатусПроверки <> ПодчиненнаяСтрока.СтатусПроверки);
				КонецЕсли;
				
			Иначе
				
				ИзменитьСтатусСтрокиМерногоТовараСНулевымКоличеством(ПодчиненнаяСтрока, СтатусПроверки, ИзменитьСтатусРодителя);
				
			КонецЕсли;
			
		ИначеЕсли ПодчиненнаяСтрока.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
			Или ПодчиненнаяСтрока.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			
			ИзменитьСтатусСтрокиМерногоТовараСНулевымКоличеством(ПодчиненнаяСтрока, СтатусПроверки);
			
		КонецЕсли;
		
		Если ИзменитьСтатус Тогда
			
			Если НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, ПодчиненнаяСтрока, СтатусПроверки) Тогда
				ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийПодобраннойПродукции, ПодчиненнаяСтрока, -1);
			КонецЕсли;
			
			ПодчиненнаяСтрока.СтатусПроверки = СтатусПроверки;
			
			ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(ПодчиненнаяСтрока);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ПодчиненнаяСтрока, ЗагрузкаДанныхТСД);
			
			ИзменитьСтатусРодителя = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзменитьСтатусРодителя Тогда
		Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
			Если ЗначениеЗаполнено(СтрокаДерева.ВидУпаковки) Тогда
				СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась");
			КонецЕсли;
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
		КонецЕсли;
		СтатусСтрокиИзменен = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
