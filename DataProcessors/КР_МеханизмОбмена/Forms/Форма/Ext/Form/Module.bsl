
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// --> Евлахов Игорь Николаевич (Начало) 22.12.2023
	// Задача #3531
	ЗаполнитьРегистрируемыеТипы();
	// <-- Евлахов Игорь Николаевич (Конец) 22.12.2023
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРегистрируемыеТипыДанных

// --> Евлахов Игорь Николаевич (Начало) 22.12.2023
// Задача #3531
&НаКлиенте
Процедура РегистрируемыеТипыДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РегистрируемыеТипыДанных.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Уровень = 0 Тогда			
			СтрокиДереваОбъектыПакета = ТекущиеДанные.ПолучитьЭлементы();
		
			Для каждого ОбъектПакета Из СтрокиДереваОбъектыПакета Цикл
				ОбъектПакета.Регистрировать = ТекущиеДанные.Регистрировать;		
			КонецЦикла;
			
			ВсегоКоличествоОбъектов = СтрокиДереваОбъектыПакета.Количество();
			Если ОбъектПакета.Регистрировать Тогда
				ВсегоКоличествоОтмеченных = ВсегоКоличествоОбъектов;		
			Иначе
				ВсегоКоличествоОтмеченных = 0;
			КонецЕсли;
			
			ТекстШаблона = НСтр("ru = '%1 (%2/%3)'");
			ТекстОписания = СтрШаблон(
								ТекстШаблона,
								ТекущиеДанные.ТипДанных,
								Формат(ВсегоКоличествоОтмеченных, "ЧН=0"), 
								Формат(ВсегоКоличествоОбъектов, "ЧН=0"));
								
			ТекущиеДанные.Описание = ТекстОписания;
		Иначе
			Родитель = ТекущиеДанные.ПолучитьРодителя();
			КоллекцияЭлементовРодителя = Родитель.ПолучитьЭлементы();
			ВсегоКоличествоОтмеченных = 0;
			
			Для каждого ОбъектДерева Из КоллекцияЭлементовРодителя Цикл
				Если ОбъектДерева.Регистрировать Тогда	
					ВсегоКоличествоОтмеченных = ВсегоКоличествоОтмеченных + 1;	
			    КонецЕсли;
			КонецЦикла;
			ВсегоКоличествоОбъектов = КоллекцияЭлементовРодителя.Количество();			
			
			ТекстШаблона = НСтр("ru = '%1 (%2/%3)'");
			ТекстОписания = СтрШаблон(
								ТекстШаблона,
								Родитель.ТипДанных,
								Формат(ВсегоКоличествоОтмеченных, "ЧН=0"), 
								Формат(ВсегоКоличествоОбъектов, "ЧН=0"));
			
			Родитель.Описание = ТекстОписания;
			ТекущиеДанные.Описание = ТекущиеДанные.ТипДанных;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
// <-- Евлахов Игорь Николаевич (Конец) 22.12.2023

#КонецОбласти

#Область ОбработчикиКомандФормы


// Действия отправителя
//					Действия получателя	
	
// 1. Сгенерировать исходящее сообщение
// 2. Записать информацию в РС КР_ИсходящиеСообщения	
// 3. Обработать список исходящих сообщений и выбрать необходимые для отправки
// 4. Получить список настроек текущей ИБ для подключения к Rabbit
// 4. Отправить сообщение в RabbitMQ	
// 					5. Получить сообщение из RabbitMQ	
// 					6. Записать полученное сообщение в РС КР_ВходящиеСообщения	
// 					7. Отправить в RabbitMQ квитанцию о доставке сообщения получателю	
// 8. Получить от RabbitMQ о квитанцию о доставке сообщения	
// 					9. Обработать полученное сообщение обмена					
// 					10. Отправить в RabbitMQ квитанцию об обработке сообщения					
// 11. Получить от RabbitMQ о квитанцию об обработке сообщения


&НаКлиенте
Процедура ОбменСообщениями(Команда)
	
	ОбменСообщениямиНаСервере();
	
	Элементы.ИнтеграционнаяИнформация.Обновить();
	Элементы.ВходящиеСообщения.Обновить();
	Элементы.ИсходящиеСообщения.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСообщения(Команда)
	
	ТекстВопроса = НСтр("ru='Обработка всех сообщений может занять длительное время. Продолжить выполнение операции?'");
	ОписаниеВопроса = Новый ОписаниеОповещения("ОбработатьСообщенияЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСообщенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьОбработкуСообщения();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработкуСообщения()
	
	ОбработатьСообщенияНаСервере();
	
	Элементы.ВходящиеСообщения.Обновить();
	
	Если Элементы.ФормаИспользоватьОбработчикОжидания.Пометка Тогда 
		Элементы.ФормаСчитатьСообщение.Доступность = Ложь;
		ПодключитьОбработчикОжидания("ЗапуститьОбработкуСообщения", 3, Истина);
	Иначе	
		Элементы.ФормаСчитатьСообщение.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбработчикОжидания(Команда)
	Элементы.ФормаИспользоватьОбработчикОжидания.Пометка = Не Элементы.ФормаИспользоватьОбработчикОжидания.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВАрхив(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсходящиеСообщения Тогда
		ВыделенныеСтроки = Элементы.ИсходящиеСообщения.ВыделенныеСтроки;
		ВходящееСообщение = Ложь;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВходящиеСообщения Тогда
		ВыделенныеСтроки = Элементы.ВходящиеСообщения.ВыделенныеСтроки;
		ВходящееСообщение = Истина;
	Иначе	
		ВыделенныеСтроки = Новый Массив;
		ВходящееСообщение = Ложь;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	ПеренестиВАрхивНаСервере(ВыделенныеСтроки, ВходящееСообщение);
	
	Элементы.ИсходящиеСообщения.Обновить();
	Элементы.ВходящиеСообщения.Обновить();
	Элементы.АрхивСообщений.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьИзАрхива(Команда)
	
	ВыделенныеСтроки = Элементы.АрхивСообщений.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	ВосстановитьИзАрхиваНаСервере(ВыделенныеСтроки);
	
	Элементы.ИсходящиеСообщения.Обновить();
	Элементы.ВходящиеСообщения.Обновить();
	Элементы.АрхивСообщений.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьВыделенные(Команда)	
	
	ВыделенныеСтроки = Элементы.ИсходящиеСообщения.ВыделенныеСтроки;
	
    Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	ОтправитьВыделенныеНаСервере(ВыделенныеСтроки);
	
	Элементы.ИнтеграционнаяИнформация.Обновить();
	Элементы.ИсходящиеСообщения.Обновить();
	Элементы.ВходящиеСообщения.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыделенные(Команда)
	
    ВыделенныеСтроки = Элементы.ВходящиеСообщения.ВыделенныеСтроки;
	
    Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	ОбработатьВыделенныеНаСервере(ВыделенныеСтроки);
	
	Элементы.ВходящиеСообщения.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ВЗарегистрированоВыделеные(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсходящиеСообщения Тогда
		ВыделенныеСтроки = Элементы.ИсходящиеСообщения.ВыделенныеСтроки;
		ВходящееСообщение = Ложь;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВходящиеСообщения Тогда
		ВыделенныеСтроки = Элементы.ВходящиеСообщения.ВыделенныеСтроки;
		ВходящееСообщение = Истина;
	Иначе	
		ВыделенныеСтроки = Новый Массив;
		ВходящееСообщение = Ложь;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	ВЗарегистрированоВыделеныеНаСервере(ВыделенныеСтроки, ВходящееСообщение);
	
	Элементы.ИсходящиеСообщения.Обновить();
	Элементы.ВходящиеСообщения.Обновить();
	
КонецПроцедуры

// A2105505-1402
&НаКлиенте
Процедура ОтчетОшибкиПоискаДанныхИнтеграции(Команда)

	ОткрытьФорму("Отчет.КР_ОшибкиПоискаДанныхИнтеграции.Форма");
	
КонецПроцедуры

// A2105505-1404
&НаКлиенте
Процедура ОтчетНаличиеПакетовИнтеграцииПоОбъекту(Команда)

	ОткрытьФорму("Отчет.КР_НаличиеПакетовИнтеграцииПоОбъекту.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСостояниеИнтеграции(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.КР_СостояниеИнтеграции.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

// << 17.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1531
&НаКлиенте
Процедура ОтчетДинамикаСкоростиРазбораСообщений(Команда)
	
	ОткрытьФорму("Отчет.КР_ДинамикаСкоростиРазбораСообщений.Форма");
	
КонецПроцедуры // >> 17.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1531

// --> Евлахов Игорь Николаевич (Начало) 22.12.2023
// Задача #3531
&НаКлиенте
Процедура ОбновитьРегистрируемыеТипы(Команда)
	
	ЗаполнитьРегистрируемыеТипы();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРегистрируемыеТипы(Команда)
	
	СохранитьРегистрируемыеТипыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлажкиРегистрируемыеТипы(Команда)
	
	КоллекцияЭлементовДерева = РегистрируемыеТипыДанных.ПолучитьЭлементы();
	
	Для каждого СтрокаДереваПакет Из КоллекцияЭлементовДерева Цикл
		СтрокаДереваПакет.Регистрировать = Ложь;
		
		СтрокиДереваОбъектыПакета = СтрокаДереваПакет.ПолучитьЭлементы();
		
		Для каждого ОбъектПакета Из СтрокиДереваОбъектыПакета Цикл
			ОбъектПакета.Регистрировать = Ложь;		
		КонецЦикла;
		
		ВсегоКоличествоОбъектов 	= СтрокиДереваОбъектыПакета.Количество();
		ВсегоКоличествоОтмеченных 	= 0;
		
		ТекстШаблона = НСтр("ru = '%1 (%2/%3)'");
		ТекстОписания = СтрШаблон(
							ТекстШаблона,
							СтрокаДереваПакет.ТипДанных,
							Формат(ВсегоКоличествоОтмеченных, "ЧН=0"),    
							Формат(ВсегоКоличествоОбъектов, "ЧН=0"));
								
		СтрокаДереваПакет.Описание = ТекстОписания;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлажкиРегистрируемыеТипы(Команда)
	
	КоллекцияЭлементовДерева = РегистрируемыеТипыДанных.ПолучитьЭлементы();
	
	Для каждого СтрокаДереваПакет Из КоллекцияЭлементовДерева Цикл
		СтрокаДереваПакет.Регистрировать = Истина;
		
		СтрокиДереваОбъектыПакета = СтрокаДереваПакет.ПолучитьЭлементы();
		
		Для каждого ОбъектПакета Из СтрокиДереваОбъектыПакета Цикл
			ОбъектПакета.Регистрировать = Истина;		
		КонецЦикла;
		
		ВсегоКоличествоОбъектов 	= СтрокиДереваОбъектыПакета.Количество();
		ВсегоКоличествоОтмеченных 	= ВсегоКоличествоОбъектов;
		
		ТекстШаблона = НСтр("ru = '%1 (%2/%3)'");
		ТекстОписания = СтрШаблон(
							ТекстШаблона,
							СтрокаДереваПакет.ТипДанных,
							Формат(ВсегоКоличествоОтмеченных, "ЧН=0"), 
							Формат(ВсегоКоличествоОбъектов, "ЧН=0")); 
								
		СтрокаДереваПакет.Описание = ТекстОписания;
	КонецЦикла;
	
КонецПроцедуры
// <-- Евлахов Игорь Николаевич (Конец) 22.12.2023

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ПеренестиВАрхивНаСервере(ВыделенныеСтроки, ВходящееСообщение)

	Для Каждого СтрокаЗаписи Из ВыделенныеСтроки Цикл
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ПеренестиСообщенияВАрхив(СтрокаЗаписи.КлючСообщения, ВходящееСообщение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьИзАрхиваНаСервере(ВыделенныеСтроки)
	
	Для Каждого СтрокаЗаписи Из ВыделенныеСтроки Цикл
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ВосстановитьСообщениеИзАрхива(СтрокаЗаписи.КлючСообщения);
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОбменСообщениямиНаСервере()
	
    КР_ОбменRabbitВзаимодействиеСАдаптером.ОбменСообщениями();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьСообщенияНаСервере()

	КР_ОбменRabbitОбработкаСообщенийОбмена.ОбработатьВходящиеСообщения();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьОшибочныеСообщения(Команда)
	ОбработатьОшибочныеСообщенияНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьОшибочныеСообщенияНаСервере()

	КР_ОбменRabbitОбработкаСообщенийОбмена.ОбменRabbitПовторныйРазборСообщений();
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОтправитьВыделенныеНаСервере(ВыделенныеСтроки)
	
	МассивСообщений = Новый Массив;
	
	Для Каждого СтрокаЗаписи Из ВыделенныеСтроки Цикл		
		МассивСообщений.Добавить(СтрокаЗаписи.КлючСообщения);		
	КонецЦикла;
	
	КР_ОбменRabbitВзаимодействиеСАдаптером.ОбменСообщениями(МассивСообщений);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьВыделенныеНаСервере(ВыделенныеСтроки)
	
	МассивСообщений = Новый Массив;
	
	Для Каждого СтрокаЗаписи Из ВыделенныеСтроки Цикл		
		МассивСообщений.Добавить(СтрокаЗаписи.КлючСообщения);		
	КонецЦикла;
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ОбработатьВходящиеСообщения(МассивСообщений);	
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ВЗарегистрированоВыделеныеНаСервере(ВыделенныеСтроки, ВходящееСообщение)
	
	Для Каждого СтрокаЗаписи Из ВыделенныеСтроки Цикл
		
		Если ВходящееСообщение Тогда
			ИмяЗаписи = "КР_ВходящиеСообщения";
		Иначе
			ИмяЗаписи = "КР_ИсходящиеСообщения";
		КонецЕсли;		
		
		НачатьТранзакцию();
		Попытка
			
			ПространствоБлокировки = "РегистрСведений." + ИмяЗаписи;
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);
			ЭлементБлокировки.УстановитьЗначение("КлючСообщения", СтрокаЗаписи.КлючСообщения);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			МенеджерЗаписи = РегистрыСведений[ИмяЗаписи].СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.КлючСообщения = СтрокаЗаписи.КлючСообщения;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Состояние = Перечисления.КР_СостоянияСообщенийОбмена.Зарегистрировано;
			МенеджерЗаписи.Записать(Истина);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Ошибка установки статуса [Зарегистрировано] для записи [%1] по причине:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, 
				СтрокаЗаписи.КлючСообщения, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// --> Евлахов Игорь Николаевич (Начало) 22.12.2023
// Задача #3531
&НаСервере
Процедура ЗаполнитьРегистрируемыеТипы()
	
	// Очищаем дерево.
	КоллекцияЭлементовДерева = РегистрируемыеТипыДанных.ПолучитьЭлементы();	
	КоллекцияЭлементовДерева.Очистить();
	
	// Пакеты XDTO, типы из которых нужно обрабатывать.
	ОбрабатываемыеПакеты = Новый Массив;
	ОбрабатываемыеПакеты.Добавить(Метаданные.ПакетыXDTO.CR_UT10_UT11);
	ОбрабатываемыеПакеты.Добавить(Метаданные.ПакетыXDTO.CR_Zolla_Exchange);
	
	// Типы, чьи имена имеют одно из указанных окончаний, будут пропущены.
	ПропускаемыеОкончания = Новый Массив;
	ПропускаемыеОкончания.Добавить("Ref");
	ПропускаемыеОкончания.Добавить("RowsObject");
	ПропускаемыеОкончания.Добавить("RowObject");
	ПропускаемыеОкончания.Добавить("RegSelectionObject");
	ПропускаемыеОкончания.Добавить("RegRecordSetObject");
	ПропускаемыеОкончания.Добавить("RegRecordObject");
	
	// Получение актуального списка регистрируемых типов.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КР_РегистрируемыеТипыДанных.Пакет КАК Пакет,
	               |	КР_РегистрируемыеТипыДанных.ТипДанных КАК ТипДанных
	               |ИЗ
	               |	РегистрСведений.КР_РегистрируемыеТипыДанных КАК КР_РегистрируемыеТипыДанных";
	
	ТЗРегистрируемыеТипы = Запрос.Выполнить().Выгрузить();
		
	// Обход выбранных пакетов.
	Для Каждого МетаданныеПакетаXDTO Из ОбрабатываемыеПакеты Цикл
		
		ПараметрыОтбора = Новый Структура();		
		ПараметрыОтбора.Вставить("Пакет", МетаданныеПакетаXDTO.Имя); 
		
		ТекущиеРегистрируемыеТипы = ТЗРегистрируемыеТипы.Скопировать(ПараметрыОтбора);
				
		РегистрироватьВсе = (ТекущиеРегистрируемыеТипы.Количество() = 0); // Если ни одного не указано, значит регистрируются все.
		
		СтрокаДереваПакет = КоллекцияЭлементовДерева.Добавить();
		СтрокаДереваПакет.Пакет 			= МетаданныеПакетаXDTO.Имя;
		СтрокаДереваПакет.ТипДанных 		= МетаданныеПакетаXDTO.Имя;
		СтрокаДереваПакет.НомерКартинки 	= 4;
		СтрокаДереваПакет.Регистрировать 	= РегистрироватьВсе;
		
		СтрокиДереваОбъектыПакета = СтрокаДереваПакет.ПолучитьЭлементы();
				
		ВсегоКоличествоОтмеченных = 0;
		
		// Обход типов текущего пакета.
		ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(МетаданныеПакетаXDTO.ПространствоИмен);		
		
		Для Каждого ТипОбъектаXDTO Из ПакетXDTO Цикл
			// Проверка окончания имени типа для пропуска.
			Пропустить = Ложь;
			Для Каждого ПропускаемоеОкончание Из ПропускаемыеОкончания Цикл
				Если СтрЗаканчиваетсяНа(ТипОбъектаXDTO.Имя, ПропускаемоеОкончание) Тогда
					Пропустить = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Пропустить Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура();		
			ПараметрыОтбора.Вставить("Пакет", 		МетаданныеПакетаXDTO.Имя);
			ПараметрыОтбора.Вставить("ТипДанных", 	ТипОбъектаXDTO.Имя);
			
			МассивСтрокОбъектов = ТекущиеРегистрируемыеТипы.НайтиСтроки(ПараметрыОтбора);
			РегистрируетсяОбъект = МассивСтрокОбъектов.Количество() > 0;
			
			// Добавление имени типа в дререво.			
			СтрокаДереваТип = СтрокиДереваОбъектыПакета.Добавить();
			
			СтрокаДереваТип.Пакет			= МетаданныеПакетаXDTO.Имя;
			СтрокаДереваТип.ТипДанных 		= ТипОбъектаXDTO.Имя;
			СтрокаДереваТип.Описание		= ТипОбъектаXDTO.Имя;
			СтрокаДереваТип.Регистрировать 	= РегистрироватьВсе ИЛИ РегистрируетсяОбъект;
			СтрокаДереваТип.НомерКартинки 	= 0;
			СтрокаДереваТип.Уровень			= 1;
			
			Если СтрокаДереваТип.Регистрировать Тогда
				ВсегоКоличествоОтмеченных = ВсегоКоличествоОтмеченных + 1;
			КонецЕсли;
		КонецЦикла;
		
		ВсегоКоличествоОбъектов = СтрокиДереваОбъектыПакета.Количество();
		
		ТекстШаблона = НСтр("ru = '%1 (%2/%3)'");
		ТекстОписания = СтрШаблон(
							ТекстШаблона,
							СтрокаДереваПакет.ТипДанных,
							Формат(ВсегоКоличествоОтмеченных, "ЧН=0"), 
							Формат(ВсегоКоличествоОбъектов, "ЧН=0")); 
		
		СтрокаДереваПакет.Описание = ТекстОписания;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРегистрируемыеТипыНаСервере()
	
	// Запись новых значений в регистр.
	НаборЗаписей = РегистрыСведений.КР_РегистрируемыеТипыДанных.СоздатьНаборЗаписей();
	
	КоллекцияЭлементовДерева = РегистрируемыеТипыДанных.ПолучитьЭлементы();
	
	Для Каждого СтрокаДереваПакет Из КоллекцияЭлементовДерева Цикл
		СтрокиДереваОбъектыПакета = СтрокаДереваПакет.ПолучитьЭлементы();
		
		Для Каждого ОбъектПакета Из СтрокиДереваОбъектыПакета Цикл
			Если ОбъектПакета.Регистрировать Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Пакет 		= ОбъектПакета.Пакет;
				НоваяЗапись.ТипДанных 	= ОбъектПакета.ТипДанных;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры 
// <-- Евлахов Игорь Николаевич (Конец) 22.12.2023

#КонецОбласти


