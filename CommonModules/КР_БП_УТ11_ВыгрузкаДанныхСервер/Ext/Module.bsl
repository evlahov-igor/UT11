
////////////////////////////////////////////////////
//// Общий модуль "КР_БП_УТ11_ВыгрузкаДанныхСервер" - интеграция УТ11 и БП
//// Создан: 15.08.2022, Маскаев П.Ю., КРОК, JIRA№ A2105505-296
//// Первичная разработка по ФДР C06.61.001, интеграция данных о продажах

#Область ПрограммныйИнтерфейс

Функция ТочкаОбмена() Экспорт 
	Возврат "General"; // << 08.09.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-2238
КонецФункции	

Функция ДобавитьНастройкиВыгрузкиОбъектов(ПараметрыВыгрузки) Экспорт
	
	// << 11.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2257
	Если Не КР_ДополнительныеНастройкиПовтИсп.БазаЯвляетсяЦентральной() Тогда
		Возврат ПараметрыВыгрузки;	
	КонецЕсли;	
	// >> 11.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2257

	#Область Справочники

// << 07.12.2023 Петухов А.В., Фактор, #3450
//// << 03.11.2023 Петухов А.В., Фактор, #3226
//	НастройкиВыгрузки_Справочник_НоменклатураПрисоединенныеФайлы(ПараметрыВыгрузки);
//// >> 03.11.2023 Петухов А.В., Фактор, #3226
// >> 07.12.2023 Петухов А.В., Фактор, #3450

// << 27.11.2023 Петухов А.В., Фактор, #3365
	НастройкиВыгрузки_Справочник_ФизическиеЛицаВодители(ПараметрыВыгрузки);
	НастройкиВыгрузки_Справочник_ТранспортныеСредства(ПараметрыВыгрузки);
// >> 27.11.2023 Петухов А.В., Фактор, #3365

	#КонецОбласти
	
	#Область Документы
	
	НастройкиВыгрузки_Документ_ВозвратТоваровОтКлиента(ПараметрыВыгрузки);
	НастройкиВыгрузки_Документ_КорректировкаРеализации(ПараметрыВыгрузки);
	НастройкиВыгрузки_Документ_ОтчетОРозничныхПродажах(ПараметрыВыгрузки);
	НастройкиВыгрузки_Документ_ПередачаТоваровХранителю(ПараметрыВыгрузки);
	НастройкиВыгрузки_Документ_ПоступлениеТоваровОтХранителя(ПараметрыВыгрузки);
	НастройкиВыгрузки_Документ_РеализацияТоваровУслуг(ПараметрыВыгрузки);
	НастройкиВыгрузки_Документ_СчетФактураВыданный(ПараметрыВыгрузки);
	
	// << 22.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
	НастройкиВыгрузки_Документ_ОприходованиеИзлишковТоваров(ПараметрыВыгрузки);
	НастройкиВыгрузки_Документ_СписаниеНедостачТоваров(ПараметрыВыгрузки);
	// >> 22.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
	
	// << 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
	НастройкиВыгрузки_Документ_ПоступлениеТоваровНаСклад(ПараметрыВыгрузки);
	НастройкиВыгрузки_Документ_ПриобретениеТоваровУслуг(ПараметрыВыгрузки);
	НастройкиВыгрузки_Документ_ПриобретениеУслугПрочихАктивов(ПараметрыВыгрузки);
	НастройкиВыгрузки_Документ_ТаможеннаяДекларацияИмпорт(ПараметрыВыгрузки);
	// >> 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
	
	// << 13.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
	НастройкиВыгрузки_Документ_ВнутреннееПотреблениеТоваров(ПараметрыВыгрузки);
	// >> 13.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
	
	// << 14.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
	НастройкиВыгрузки_Документ_СчетФактураПолученный(ПараметрыВыгрузки);
	// >> 14.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
	
	// << 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
	НастройкиВыгрузки_Документ_ОтчетОСписанииТоваровУХранителя(ПараметрыВыгрузки);
	// >> 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
	
	// << 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296
	// << 20.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-296
	// UPD. Временно отключена выгрузка документов по требованию консультанта
	//НастройкиВыгрузки_Документ_ОперацияПоПлатежнойКарте(ПараметрыВыгрузки);
	// >> 20.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-296
	НастройкиВыгрузки_Документ_ПриходныйКассовыйОрдер(ПараметрыВыгрузки);
	// >> 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296
	
	// << 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
	НастройкиВыгрузки_Документ_РасходныйКассовыйОрдер(ПараметрыВыгрузки);
	// >> 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
	
// << 27.11.2023 Петухов А.В., Фактор, #3299
	НастройкиВыгрузки_Документ_ЗаданиеНаПеревозку(ПараметрыВыгрузки);
// >> 27.11.2023 Петухов А.В., Фактор, #3299
	
	#КонецОбласти

	#Область РегистрыСведений
	
// << 27.11.2023 Петухов А.В., Фактор, #3365
	НастройкиВыгрузки_РегистрСведений_ДокументыФизическихЛиц(ПараметрыВыгрузки);
// >> 27.11.2023 Петухов А.В., Фактор, #3365
	
	#КонецОбласти
	
	#Область РегистрыНакопления
	
	// << 01.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
	НастройкиВыгрузки_РегистрНакопления_СебестоимостьТоваров(ПараметрыВыгрузки);
	// >> 01.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
	
	#КонецОбласти
	
	Возврат ПараметрыВыгрузки; 
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОбъектов

Функция СтрокаПараметраВыгрузки(ИмяМетаданных, ПараметрыВыгрузки)
	
	СтрокаВыгрузки = ПараметрыВыгрузки.Добавить();
	СтрокаВыгрузки.ИмяМД = ИмяМетаданных;
	СтрокаВыгрузки.ТочкаОбмена = ТочкаОбмена();
	СтрокаВыгрузки.МассивСообщений = Новый Массив;
	СтрокаВыгрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаВыгрузки;
	
КонецФункции

#Область Справочники

// << 03.11.2023 Петухов А.В., Фактор, #3226
Процедура НастройкиВыгрузки_Справочник_НоменклатураПрисоединенныеФайлы(ПараметрыВыгрузки)
	
	ИмяМД = "Справочник.НоменклатураПрисоединенныеФайлы";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Справочник_НоменклатураПрисоединенныеФайлы";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Справочник_НоменклатураПрисоединенныеФайлы";
	
КонецПроцедуры
// >> 03.11.2023 Петухов А.В., Фактор, #3226

// << 27.11.2023 Петухов А.В., Фактор, #3365
Процедура НастройкиВыгрузки_Справочник_ФизическиеЛицаВодители(ПараметрыВыгрузки)
	
	ИмяМД = "Справочник.ФизическиеЛица";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Справочник_ФизическиеЛицаВодители";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Справочник_ФизическиеЛицаВодители";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Справочник_ТранспортныеСредства(ПараметрыВыгрузки)
	
	ИмяМД = "Справочник.ТранспортныеСредства";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Справочник_ТранспортныеСредства";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Справочник_ТранспортныеСредства";
	
КонецПроцедуры
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область Документы

Процедура НастройкиВыгрузки_Документ_ВозвратТоваровОтКлиента(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ВозвратТоваровОтКлиента";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ВозвратТоваровОтКлиента";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ВозвратТоваровОтКлиента";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_КорректировкаРеализации(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.КорректировкаРеализации";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_КорректировкаРеализации";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_КорректировкаРеализации";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_ПередачаТоваровХранителю(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ПередачаТоваровХранителю";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ПередачаТоваровХранителю";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ПередачаТоваровХранителю";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_ПоступлениеТоваровОтХранителя(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ПоступлениеТоваровОтХранителя";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ПоступлениеТоваровОтХранителя";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ПоступлениеТоваровОтХранителя";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_ОтчетОРозничныхПродажах(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ОтчетОРозничныхПродажах";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ОтчетОРозничныхПродажах";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ОтчетОРозничныхПродажах";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_РеализацияТоваровУслуг(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.РеализацияТоваровУслуг";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_РеализацияТоваровУслуг";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_РеализацияТоваровУслуг";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_СчетФактураВыданный(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.СчетФактураВыданный";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_СчетФактураВыданный";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_СчетФактураВыданный";
	
КонецПроцедуры

// << 22.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Процедура НастройкиВыгрузки_Документ_ОприходованиеИзлишковТоваров(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ОприходованиеИзлишковТоваров";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ОприходованиеИзлишковТоваров";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ОприходованиеИзлишковТоваров";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_СписаниеНедостачТоваров(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.СписаниеНедостачТоваров";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_СписаниеНедостачТоваров";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_СписаниеНедостачТоваров";
	
КонецПроцедуры // >> 22.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

// << 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура НастройкиВыгрузки_Документ_ПоступлениеТоваровНаСклад(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ПоступлениеТоваровНаСклад";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ПоступлениеТоваровНаСклад";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ПоступлениеТоваровНаСклад";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_ПриобретениеТоваровУслуг(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ПриобретениеТоваровУслуг";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ПриобретениеТоваровУслуг";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ПриобретениеТоваровУслуг";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_ПриобретениеУслугПрочихАктивов(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ПриобретениеУслугПрочихАктивов";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ПриобретениеУслугПрочихАктивов";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ПриобретениеУслугПрочихАктивов";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_ТаможеннаяДекларацияИмпорт(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ТаможеннаяДекларацияИмпорт";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ТаможеннаяДекларацияИмпорт";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ТаможеннаяДекларацияИмпорт";
	
КонецПроцедуры // >> 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 13.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура НастройкиВыгрузки_Документ_ВнутреннееПотреблениеТоваров(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ВнутреннееПотреблениеТоваров";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ВнутреннееПотреблениеТоваров";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ВнутреннееПотреблениеТоваров";
	
КонецПроцедуры // >> 13.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 14.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура НастройкиВыгрузки_Документ_СчетФактураПолученный(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.СчетФактураПолученный";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_СчетФактураПолученный";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_СчетФактураПолученный";
	
КонецПроцедуры // >> 14.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Процедура НастройкиВыгрузки_Документ_ОтчетОСписанииТоваровУХранителя(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ОтчетОСписанииТоваровУХранителя";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ОтчетОСписанииТоваровУХранителя";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ОтчетОСписанииТоваровУХранителя";
	
КонецПроцедуры // >> 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

// << 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Процедура НастройкиВыгрузки_Документ_ОперацияПоПлатежнойКарте(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ОперацияПоПлатежнойКарте";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ОперацияПоПлатежнойКарте";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ОперацияПоПлатежнойКарте";
	
КонецПроцедуры

Процедура НастройкиВыгрузки_Документ_ПриходныйКассовыйОрдер(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ПриходныйКассовыйОрдер";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ПриходныйКассовыйОрдер";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ПриходныйКассовыйОрдер";
	
КонецПроцедуры // > 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296

// << 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Процедура НастройкиВыгрузки_Документ_РасходныйКассовыйОрдер(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.РасходныйКассовыйОрдер";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_РасходныйКассовыйОрдер";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_РасходныйКассовыйОрдер";
	
КонецПроцедуры // >> 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

// << 27.11.2023 Петухов А.В., Фактор, #3299
Процедура НастройкиВыгрузки_Документ_ЗаданиеНаПеревозку(ПараметрыВыгрузки)
	
	ИмяМД = "Документ.ЗаданиеНаПеревозку";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_Документ_ЗаданиеНаПеревозку";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_Документ_ЗаданиеНаПеревозку";
	
КонецПроцедуры // >> 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
// >> 27.11.2023 Петухов А.В., Фактор, #3299

#КонецОбласти

#Область РегистрыСведений

// << 27.11.2023 Петухов А.В., Фактор, #3365
Процедура НастройкиВыгрузки_РегистрСведений_ДокументыФизическихЛиц(ПараметрыВыгрузки)
	
	ИмяМД = "РегистрСведений.ДокументыФизическихЛиц";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_РегистрСведений_ДокументыФизическихЛиц";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_РегистрСведений_ДокументыФизическихЛиц";
	
КонецПроцедуры
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область РегистрыНакопления

// << 01.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Процедура НастройкиВыгрузки_РегистрНакопления_СебестоимостьТоваров(ПараметрыВыгрузки)
	
	ИмяМД = "РегистрНакопления.СебестоимостьТоваров";
	
	СтрокаВыгрузки = СтрокаПараметраВыгрузки(ИмяМД, ПараметрыВыгрузки);
	СтрокаВыгрузки.ПравилоРегистрации = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПРО_РегистрНакопления_СебестоимостьТоваров";
	СтрокаВыгрузки.ПравилоВыгрузки    = "КР_БП_УТ11_ВыгрузкаДанныхСервер.ПВО_РегистрНакопления_СебестоимостьТоваров";
	
КонецПроцедуры // >> 01.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

#КонецОбласти

#КонецОбласти

#Область УсловияВыгрузки

#Область Справочники

// << 03.11.2023 Петухов А.В., Фактор, #3226
Функция УсловиеВыгрузкиВыполняется_Справочник_НоменклатураПрисоединенныеФайлы(Источник)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Возврат Ложь;
	ИначеЕсли Источник.ДополнительныеСвойства.Свойство("КР_ДанныеФайла") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
// >> 03.11.2023 Петухов А.В., Фактор, #3226

// << 27.11.2023 Петухов А.В., Фактор, #3365
Функция УсловиеВыгрузкиВыполняется_Справочник_ФизическиеЛицаВодители(Источник)
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("СправочникОбъект.ФизическиеЛица") Тогда 	
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "КР_ЭтоВодитель, ЭтоГруппа");		
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат Данные.КР_ЭтоВодитель = Истина 
		И Данные.ЭтоГруппа = Ложь; 
	
КонецФункции

Функция УсловиеВыгрузкиВыполняется_Справочник_ТранспортныеСредства(Источник)
	
	Возврат Истина; 
	
КонецФункции
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область Документы

// << 29.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Функция УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник) Экспорт
	
	ИсточникТип = ТипЗнч(Источник);
	МетаданныеТип = Метаданные.НайтиПоТипу(ИсточникТип);
	
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда
		ДокументПроведен = Источник.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка." + МетаданныеТип.Имя) Тогда
		ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Проведен");
		ДокументПроведен = ?(ДокументПроведен = Неопределено, Ложь, ДокументПроведен);
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект." + МетаданныеТип.Имя) Тогда
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;
	
	Возврат ДокументПроведен;
	
КонецФункции

Функция УсловиеВыгрузкиВыполняется_Документ_ВозвратТоваровОтКлиента(Источник)
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		Данные = Источник;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Проведен, ХозяйственнаяОперация, КР_РозничныйВозврат");
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;
	
	Если ДокументПроведен И Не ЗначениеЗаполнено(Данные.КР_РозничныйВозврат)
		И (Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
		Или Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионера) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция УсловиеВыгрузкиВыполняется_Документ_ПередачаТоваровХранителю(Источник)
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПередачаТоваровХранителю") Тогда
		Данные = Источник;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен, ХозяйственнаяОперация");
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;
	
	Возврат ДокументПроведен
		И Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
КонецФункции

Функция УсловиеВыгрузкиВыполняется_Документ_ПоступлениеТоваровОтХранителя(Источник)
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПоступлениеТоваровОтХранителя") Тогда
		Данные = Источник;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПоступлениеТоваровОтХранителя") Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен, ХозяйственнаяОперация");
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;
	
	Возврат ДокументПроведен
		И Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера;
	
КонецФункции

Функция УсловиеВыгрузкиВыполняется_Документ_РеализацияТоваровУслуг(Источник)
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Данные = Источник;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Проведен, ХозяйственнаяОперация, КР_РозничнаяПродажа");
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;
	
	Если ДокументПроведен И Не ЗначениеЗаполнено(Данные.КР_РозничнаяПродажа)
		И (Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		Или Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// << 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Функция УсловиеВыгрузкиВыполняется_Документ_ПриходныйКассовыйОрдер(Источник)
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		Данные = Источник;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Проведен, ХозяйственнаяОперация, КР_ПоступлениеВКассуККМ");
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;
	
	Возврат ДокументПроведен И Данные.КР_ПоступлениеВКассуККМ = Истина
		И Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	
КонецФункции // > 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296

// << 07.08.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Функция УсловиеВыгрузкиВыполняется_Документ_ПриходныйКассовыйОрдер_НеККМ(Источник)
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		Данные = Источник;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен, КР_ПоступлениеВКассуККМ");
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;
	
	Возврат ДокументПроведен И Данные.КР_ПоступлениеВКассуККМ = Ложь;
	
КонецФункции // > 07.08.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

// << 11.08.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Функция УсловиеВыгрузкиВыполняется_Документ_РасходныйКассовыйОрдер_НеККМ(Источник)
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		Данные = Источник;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен, КР_ВозвратИзКассыККМ");
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;
	
	Возврат ДокументПроведен И Данные.КР_ВозвратИзКассыККМ = Ложь;
	
КонецФункции // > 11.08.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

// << 14.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Функция УсловиеВыгрузкиВыполняется_Документ_СчетФактураПолученный(Источник)
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
		ПроведениеИзДокументаОснования = Ложь;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		Данные = Источник;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		ПроведениеИзДокументаОснования = Источник.ДополнительныеСвойства.Свойство("ПроверкаДокументов_Отключить")
			И Источник.ДополнительныеСвойства.ПроверкаДокументов_Отключить = Истина;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Проведен, ХозяйственнаяОперация, КР_ПоступлениеВКассуККМ");
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
		ПроведениеИзДокументаОснования = Ложь;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;
	
	Возврат ДокументПроведен И Не ПроведениеИзДокументаОснования;
	
КонецФункции // >> 14.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 27.11.2023 Петухов А.В., Фактор, #3299
Функция УсловиеВыгрузкиВыполняется_Документ_ЗаданиеНаПеревозку(Источник)
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ЗаданиеНаПеревозку") Тогда 	
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Статус");		
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ЗначениеЗаполнено(Данные.Статус) 
		И Данные.Статус <> Перечисления.СтатусыЗаданийНаПеревозку.Формируется; 
	
КонецФункции
// >> 27.11.2023 Петухов А.В., Фактор, #3299

#КонецОбласти

#Область РегистрыСведений

// << 27.11.2023 Петухов А.В., Фактор, #3365
Функция УсловиеВыгрузкиВыполняется_РегистрСведений_ДокументыФизическихЛиц(Источник)
	
	ИсточникТип = ТипЗнч(Источник);   
	// Для регистров реализововано только обращение к объекту набора записей
	// Если потребуется расширить на форму (ДанныеФормыСтруктура)   
	//	нужно реализовывать примерно как в УсловиеВыгрузкиФизическиеЛицаВыполняется
	Если ИсточникТип = Тип("РегистрСведенийНаборЗаписей.ДокументыФизическихЛиц") Тогда 	
		Данные = Источник;
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	ОтборФизлицо = Данные.Отбор.Физлицо.Значение; 
	
	Возврат ТипЗнч(ОтборФизлицо) = Тип("СправочникСсылка.ФизическиеЛица")
		И ОтборФизлицо.КР_ЭтоВодитель = Истина; 
	
КонецФункции
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#КонецОбласти

#Область ПравилаРегистрацииОбъектов

Процедура ДобавитьПравилоРегистрации(
								Источник,
								Отказ,
								ПараметрВыгрузки,
								ТипДанных,
								ЭтоУдаление = Ложь,
								СсылкаНаОбъект = Неопределено)
								
	// --> Евлахов Игорь Николаевич (Начало) 22.12.2023
	// Задача #3531
	Если НЕ КР_ОбменRabbitОбщиеМеханизмыПовтИсп.РегистрироватьДанныеТипа(ТипДанных, "CR_Zolla_Exchange") Тогда
		Возврат;
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 22.12.2023
	
	СтруктураСообщения = КР_ОбменRabbitОбработкаСообщенийОбмена.ПолучитьСтруктуруСообщения();
	СтруктураСообщения.ТипДанных = ТипДанных;
	СтруктураСообщения.ЭтоУдаление = ЭтоУдаление;
	
	// Частный случай выгрузки
	// Выгрузка происходит не по Источнику, а по сопутствующему объекту,
	// для которого регистрация не инициируется. Ссылка целевого объекта выгрузки
	// добавляется в массив для однозначного сопоставления сообщения обмена и
	// объекта, который нужно выгрузить.
	// Пример: выгрузка документов-оснований Счетов-фактур полученных
	Если Не СсылкаНаОбъект = Неопределено Тогда
		СтруктураСообщения.СсылкиНаОбъекты.Добавить(СсылкаНаОбъект);
	КонецЕсли;
	
	СтруктураСообщения.Маршрутизация = ТипДанных;
	
	ТекстШаблон    = НСтр("ru = 'Инициировано сообщение для обмена %1'");
	ТекстСообщения = СтрШаблон(ТекстШаблон, ПараметрВыгрузки.ТочкаОбмена);
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СтруктураСообщения, ТекстСообщения);
	
	ПараметрВыгрузки.МассивСообщений.Добавить(СтруктураСообщения);
	
КонецПроцедуры

#Область Справочники

// << 03.11.2023 Петухов А.В., Фактор, #3226
Процедура ПРО_Справочник_НоменклатураПрисоединенныеФайлы(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

	ТипДанных = "ImageOfGoods";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Справочник_НоменклатураПрисоединенныеФайлы(Источник);
	
	Если РегистрироватьКОбмену Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры
// >> 03.11.2023 Петухов А.В., Фактор, #3226

// << 27.11.2023 Петухов А.В., Фактор, #3365
Процедура ПРО_Справочник_ФизическиеЛицаВодители(Источник, Отказ, ПараметрВыгрузки) Экспорт

	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "IndividualObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Справочник_ФизическиеЛицаВодители(Источник);
	
	Если РегистрироватьКОбмену
		Или УсловиеВыгрузкиВыполняется_Справочник_ФизическиеЛицаВодители(Источник.Ссылка) Тогда 
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Справочник_ТранспортныеСредства(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "VehicleObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Справочник_ТранспортныеСредства(Источник);
	
	Если РегистрироватьКОбмену
		Или УсловиеВыгрузкиВыполняется_Справочник_ТранспортныеСредства(Источник.Ссылка) Тогда 
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область Документы

Процедура ПРО_Документ_ВозвратТоваровОтКлиента(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанныхИсточника = ТипДанныхПоХО_ВозвратТоваровОтКлиента(Источник.ХозяйственнаяОперация);
	ТипДанныхСсылки    = ТипДанныхПоХО_ВозвратТоваровОтКлиента(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ХозяйственнаяОперация"));
	
	Если ПустаяСтрока(ТипДанныхИсточника) И ПустаяСтрока(ТипДанныхСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_ВозвратТоваровОтКлиента(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_ВозвратТоваровОтКлиента(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РанееРегистрировался И ЗначениеЗаполнено(ТипДанныхСсылки)
		И Не ТипДанныхИсточника = ТипДанныхСсылки Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанныхСсылки, Истина);
	КонецЕсли;
	
	Если (РегистрироватьКОбмену Или РанееРегистрировался)
		И ЗначениеЗаполнено(ТипДанныхИсточника) Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанныхИсточника, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Документ_КорректировкаРеализации(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "RealizationAdjustmentObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если РегистрироватьКОбмену
		Или УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка) Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
	ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
	Если Не ДвиженияСебестоимость = Неопределено Тогда
		ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Документ_ПередачаТоваровХранителю(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "TransferOnCommissionObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_ПередачаТоваровХранителю(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_ПередачаТоваровХранителю(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрироватьКОбмену Или РанееРегистрировался Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Документ_ПоступлениеТоваровОтХранителя(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "ReturnGoodsFromTheCommissionerObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_ПоступлениеТоваровОтХранителя(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_ПоступлениеТоваровОтХранителя(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрироватьКОбмену Или РанееРегистрировался Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Документ_ОтчетОРозничныхПродажах(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "RetailSalesReportObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрироватьКОбмену Или РанееРегистрировался Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
	// << 30.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1655
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Источник.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Источник.Дата));
	Запрос.УстановитьПараметр("КассаККМ", Источник.КассаККМ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходныйКассовыйОрдер.Ссылка КАК ДокументПКО
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПриходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|	И ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ)
	|	И ПриходныйКассовыйОрдер.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйКассовыйОрдер.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйКассовыйОрдер.Ссылка КАК ДокументРКО
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|	И РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ)
	|	И РасходныйКассовыйОрдер.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйКассовыйОрдер.Дата УБЫВ";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = ПакетРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки,
			"IncomingCashOrderObject", Ложь, Выборка.ДокументПКО);
	КонецЕсли;
	
	Выборка = ПакетРезультатов[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки,
			"OutgoingCashOrderObject", Ложь, Выборка.ДокументРКО);
	КонецЕсли;
	// >> 30.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1655
	
КонецПроцедуры

Процедура ПРО_Документ_РеализацияТоваровУслуг(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанныхИсточника = ТипДанныхПоХО_РеализацияТоваровУслуг(Источник.ХозяйственнаяОперация);
	ТипДанныхСсылки    = ТипДанныхПоХО_РеализацияТоваровУслуг(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ХозяйственнаяОперация"));
	
	Если ПустаяСтрока(ТипДанныхИсточника) И ПустаяСтрока(ТипДанныхСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_РеализацияТоваровУслуг(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_РеализацияТоваровУслуг(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РанееРегистрировался И ЗначениеЗаполнено(ТипДанныхСсылки)
		И Не ТипДанныхИсточника = ТипДанныхСсылки Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанныхСсылки, Истина);
	КонецЕсли;
	
	Если (РегистрироватьКОбмену Или РанееРегистрировался)
		И ЗначениеЗаполнено(ТипДанныхИсточника) Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанныхИсточника, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Документ_СчетФактураВыданный(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "InvoiceObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если РегистрироватьКОбмену
		Или УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка) Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры

// << 22.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Процедура ПРО_Документ_ОприходованиеИзлишковТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "PostingGoodsObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрироватьКОбмену Или РанееРегистрировался Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Документ_СписаниеНедостачТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "WriteOffGoodsObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрироватьКОбмену Или РанееРегистрировался Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры // >> 22.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

// << 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ПРО_Документ_ПоступлениеТоваровНаСклад(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "ReceiptGoodsWarehouseObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрироватьКОбмену Или РанееРегистрировался Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Документ_ПриобретениеТоваровУслуг(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "PurchaseOfGoodsAndServicesObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрироватьКОбмену Или РанееРегистрировался Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Документ_ПриобретениеУслугПрочихАктивов(Источник, Отказ, ПараметрВыгрузки, ВыгрузкаСчетаФактуры = Ложь) Экспорт
	
	ТипДанных = "AcquisitionOfServicesAndOtherAssetsObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрироватьКОбмену Или РанееРегистрировался Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену, ?(ВыгрузкаСчетаФактуры, Источник, Неопределено));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Документ_ТаможеннаяДекларацияИмпорт(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "ImportCustomsDeclarationObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если РегистрироватьКОбмену
		Или УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка) Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
	ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
	Если Не ДвиженияСебестоимость = Неопределено Тогда
		ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
	КонецЕсли;
	
КонецПроцедуры // >> 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 13.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ПРО_Документ_ВнутреннееПотреблениеТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "DomesticConsumptionGoodsObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрироватьКОбмену Или РанееРегистрировался Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры // >> 13.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 14.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ПРО_Документ_СчетФактураПолученный(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_СчетФактураПолученный(Источник);
	Если Не РегистрироватьКОбмену Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыОснования = ОбщегоНазначения.ВыгрузитьКолонку(Источник.ДокументыОснования, "ДокументОснование", Истина);
	Для Каждого ДокументОснование Из ДокументыОснования Цикл
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
			ПРО_Документ_ПриобретениеУслугПрочихАктивов(ДокументОснование, Отказ, ПараметрВыгрузки, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // >> 14.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Процедура ПРО_Документ_ОтчетОСписанииТоваровУХранителя(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "WriteOffGoodsCommissionAgentObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		РанееРегистрировался = Ложь;
	Иначе
		РанееРегистрировался = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка);
		
		ДвиженияСебестоимость = Источник.Движения.Найти("СебестоимостьТоваров");
		Если Не ДвиженияСебестоимость = Неопределено Тогда
			ДвиженияСебестоимость.ДополнительныеСвойства.Вставить("КР_ОбменRabbitВыгрузкаДокумента", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрироватьКОбмену Или РанееРегистрировался Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры // >> 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

// << 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Процедура ПРО_Документ_ОперацияПоПлатежнойКарте(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "PaymentCardObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник);
	
	Если РегистрироватьКОбмену
		Или УсловиеВыгрузкиВыполняется_Документ_Универсально(Источник.Ссылка) Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПРО_Документ_ПриходныйКассовыйОрдер(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	// << 20.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-296
	// UPD. Алгоритм временно отключен по требованию консультанта
	//ТипДанных = "PaymentCashObject";
	//
	//РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_ПриходныйКассовыйОрдер(Источник);
	//
	//Если РегистрироватьКОбмену
	//	Или УсловиеВыгрузкиВыполняется_Документ_ПриходныйКассовыйОрдер(Источник.Ссылка) Тогда
	//	ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	//КонецЕсли;
	// >> 20.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-296
	
	
	ТипДанных = "IncomingCashOrderObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_ПриходныйКассовыйОрдер_НеККМ(Источник);
	
	Если РегистрироватьКОбмену
		Или УсловиеВыгрузкиВыполняется_Документ_ПриходныйКассовыйОрдер_НеККМ(Источник.Ссылка) Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры // >> 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296

// << 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Процедура ПРО_Документ_РасходныйКассовыйОрдер(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	ТипДанных = "OutgoingCashOrderObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_Документ_РасходныйКассовыйОрдер_НеККМ(Источник);
	
	Если РегистрироватьКОбмену
		Или УсловиеВыгрузкиВыполняется_Документ_РасходныйКассовыйОрдер_НеККМ(Источник.Ссылка) Тогда
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену);
	КонецЕсли;
	
КонецПроцедуры // >> 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

// << 27.11.2023 Петухов А.В., Фактор, #3299
Процедура ПРО_Документ_ЗаданиеНаПеревозку(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ShipmentOrderObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиВыполняется_Документ_ЗаданиеНаПеревозку(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиВыполняется_Документ_ЗаданиеНаПеревозку(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры
// >> 27.11.2023 Петухов А.В., Фактор, #3299

#КонецОбласти

#Область РегистрыСведений

// << 27.11.2023 Петухов А.В., Фактор, #3365
Процедура ПРО_РегистрСведений_ДокументыФизическихЛиц(Источник, Отказ, ПараметрВыгрузки) Экспорт

	//Если Источник.ДополнительныеСвойства.Свойство(
	//	КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
	//	Возврат;
	//КонецЕсли;
	
	ТипДанных = "IdentityPapersInfoRegObject";
	
	РегистрироватьКОбмену = УсловиеВыгрузкиВыполняется_РегистрСведений_ДокументыФизическихЛиц(Источник);
	
	Если РегистрироватьКОбмену Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не РегистрироватьКОбмену); 
		
	КонецЕсли;	
	
КонецПроцедуры
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область РегистрыНакопления

// << 01.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Процедура ПРО_РегистрНакопления_СебестоимостьТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("КР_ОбменRabbitВыгрузкаДокумента")
		И Источник.ДополнительныеСвойства.КР_ОбменRabbitВыгрузкаДокумента = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Источник.Отбор.Регистратор.Значение;
	ТипЗнчРегистратора = ТипЗнч(Регистратор);
	
	Если ТипЗнчРегистратора = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ПРО_Документ_ВозвратТоваровОтКлиента(Регистратор, Отказ, ПараметрВыгрузки);
	ИначеЕсли ТипЗнчРегистратора = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		ПРО_Документ_ОприходованиеИзлишковТоваров(Регистратор, Отказ, ПараметрВыгрузки);
	ИначеЕсли ТипЗнчРегистратора = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ПРО_Документ_ОтчетОРозничныхПродажах(Регистратор, Отказ, ПараметрВыгрузки);
	ИначеЕсли ТипЗнчРегистратора = Тип("ДокументСсылка.ОтчетОСписанииТоваровУХранителя") Тогда
		ПРО_Документ_ОтчетОСписанииТоваровУХранителя(Регистратор, Отказ, ПараметрВыгрузки);
	ИначеЕсли ТипЗнчРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад") Тогда
		ПРО_Документ_ПоступлениеТоваровНаСклад(Регистратор, Отказ, ПараметрВыгрузки);
	ИначеЕсли ТипЗнчРегистратора = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ПРО_Документ_ПриобретениеТоваровУслуг(Регистратор, Отказ, ПараметрВыгрузки);
	ИначеЕсли ТипЗнчРегистратора = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПРО_Документ_РеализацияТоваровУслуг(Регистратор, Отказ, ПараметрВыгрузки);
	ИначеЕсли ТипЗнчРегистратора = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		ПРО_Документ_СписаниеНедостачТоваров(Регистратор, Отказ, ПараметрВыгрузки);
	ИначеЕсли ТипЗнчРегистратора = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
		ПРО_Документ_ПередачаТоваровХранителю(Регистратор, Отказ, ПараметрВыгрузки);
	ИначеЕсли ТипЗнчРегистратора = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		ПРО_Документ_ВнутреннееПотреблениеТоваров(Регистратор, Отказ, ПараметрВыгрузки);
	// << 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
	ИначеЕсли ТипЗнчРегистратора = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ПРО_Документ_РасходныйКассовыйОрдер(Регистратор, Отказ, ПараметрВыгрузки);
	// >> 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // >> 01.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

#КонецОбласти

#КонецОбласти

#Область ПравилаВыгрузкиОбъектов

#Область Справочники

// << 03.11.2023 Петухов А.В., Фактор, #3226
Процедура ПВО_Справочник_НоменклатураПрисоединенныеФайлы(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Справочник_НоменклатураПрисоединенныеФайлы(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры
// >> 03.11.2023 Петухов А.В., Фактор, #3226

// << 27.11.2023 Петухов А.В., Фактор, #3365
Процедура ПВО_Справочник_ФизическиеЛицаВодители(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Справочник_ФизическиеЛицаВодители(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Справочник_ТранспортныеСредства(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Справочник_ТранспортныеСредства(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область Документы

Процедура ПВО_Документ_ВозвратТоваровОтКлиента(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		Если СообщениеОбмена.ТипДанных = "ReturnGoodsFromCustomerObject" Тогда
			ПКО_Документ_ВозвратТоваровОтКлиента(Источник, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "CommissionerSalesReportObject" Тогда
			ПКО_Документ_ОтчетКомиссионераОПродажах(Источник, СообщениеОбмена, Отказ);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_КорректировкаРеализации(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_КорректировкаРеализации(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_ПередачаТоваровХранителю(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_ПередачаТоваровНаКомиссию(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_ПоступлениеТоваровОтХранителя(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_ВозвратТоваровОтКомиссионера(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_ОтчетОРозничныхПродажах(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		// << 30.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1655
		Если СообщениеОбмена.ТипДанных = "IncomingCashOrderObject"
				И ТипЗнч(СообщениеОбмена.СсылкиНаОбъекты) = Тип("Массив")
				И СообщениеОбмена.СсылкиНаОбъекты.Количество() Тогда
			ДокументПКО = Неопределено;
			Для Каждого СсылкаНаОбъект Из СообщениеОбмена.СсылкиНаОбъекты Цикл
				Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
					ДокументПКО = СсылкаНаОбъект;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ДокументПКО) Тогда
				ПКО_Документ_ПриходныйКассовыйОрдер(ДокументПКО, СообщениеОбмена, Отказ);
			КонецЕсли;
		ИначеЕсли СообщениеОбмена.ТипДанных = "OutgoingCashOrderObject"
				И ТипЗнч(СообщениеОбмена.СсылкиНаОбъекты) = Тип("Массив")
				И СообщениеОбмена.СсылкиНаОбъекты.Количество() Тогда
			ДокументРКО = Неопределено;
			Для Каждого СсылкаНаОбъект Из СообщениеОбмена.СсылкиНаОбъекты Цикл
				Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
					ДокументРКО = СсылкаНаОбъект;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ДокументРКО) Тогда
				ПКО_Документ_РасходныйКассовыйОрдер(ДокументРКО, СообщениеОбмена, Отказ);
			КонецЕсли;
		ИначеЕсли СообщениеОбмена.ТипДанных = "RetailSalesReportObject" Тогда
			ПКО_Документ_ОтчетОРозничныхПродажах(Источник, СообщениеОбмена, Отказ);
		Иначе
			Продолжить;
		КонецЕсли;
		// >> 30.05.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1655
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_РеализацияТоваровУслуг(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		Если СообщениеОбмена.ТипДанных = "RealizationObject" Тогда
			ПКО_Документ_РеализацияТоваровУслуг(Источник, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "CommissionerSalesReportObject" Тогда
			ПКО_Документ_ОтчетКомиссионераОПродажах(Источник, СообщениеОбмена, Отказ);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_СчетФактураВыданный(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_СчетФактураВыданный(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

// << 22.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Процедура ПВО_Документ_ОприходованиеИзлишковТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_ОприходованиеИзлишковТоваров(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_СписаниеНедостачТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_СписаниеНедостачТоваров(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры // >> 22.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

// << 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ПВО_Документ_ПоступлениеТоваровНаСклад(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_ПоступлениеТоваровНаСклад(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_ПриобретениеТоваровУслуг(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_ПриобретениеТоваровУслуг(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_ПриобретениеУслугПрочихАктивов(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_ПриобретениеУслугПрочихАктивов(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_ТаможеннаяДекларацияИмпорт(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_ТаможеннаяДекларацияИмпорт(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры // >> 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 13.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ПВО_Документ_ВнутреннееПотреблениеТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_ВнутреннееПотреблениеТоваров(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры // >> 13.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 14.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ПВО_Документ_СчетФактураПолученный(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		Для Каждого СсылкаНаОбъект Из СообщениеОбмена.СсылкиНаОбъекты Цикл
			Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
				ПКО_Документ_ПриобретениеУслугПрочихАктивов(СсылкаНаОбъект, СообщениеОбмена, Отказ);
				
				ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
				КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // >> 14.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Процедура ПВО_Документ_ОтчетОСписанииТоваровУХранителя(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_ОтчетОСписанииТоваровУХранителя(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры // >> 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

// << 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Процедура ПВО_Документ_ОперацияПоПлатежнойКарте(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_ПоступлениеНаличныхБезналичныхДС(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_Документ_ПриходныйКассовыйОрдер(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		Если СообщениеОбмена.ТипДанных = "PaymentCashObject" Тогда
			ПКО_Документ_ПоступлениеНаличныхБезналичныхДС(Источник, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "IncomingCashOrderObject" Тогда
			ПКО_Документ_ПриходныйКассовыйОрдер(Источник, СообщениеОбмена, Отказ);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры // >> 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296

// << 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Процедура ПВО_Документ_РасходныйКассовыйОрдер(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_Документ_РасходныйКассовыйОрдер(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры // >> 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

// << 27.11.2023 Петухов А.В., Фактор, #3299
Процедура ПВО_Документ_ЗаданиеНаПеревозку(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		ПКО_Документ_ЗаданиеНаПеревозку(Источник, СообщениеОбмена, Отказ);		
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры
// >> 27.11.2023 Петухов А.В., Фактор, #3299

#КонецОбласти

#Область РегистрыСведений

// << 27.11.2023 Петухов А.В., Фактор, #3365
Процедура ПВО_РегистрСведений_ДокументыФизическихЛиц(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		ПКО_РегистрСведений_ДокументыФизическихЛиц(Источник, СообщениеОбмена, Отказ);
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область РегистрыНакопления

Процедура ПВО_РегистрНакопления_СебестоимостьТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("КР_ОбменRabbitВыгрузкаДокумента")
		И Источник.ДополнительныеСвойства.КР_ОбменRabbitВыгрузкаДокумента = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Источник.Отбор.Регистратор.Значение;
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		Если СообщениеОбмена.ТипДанных = "RealizationObject" Тогда
			ПКО_Документ_РеализацияТоваровУслуг(Регистратор, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "CommissionerSalesReportObject" Тогда
			ПКО_Документ_ОтчетКомиссионераОПродажах(Регистратор, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "WriteOffGoodsCommissionAgentObject" Тогда
			ПКО_Документ_ОтчетОСписанииТоваровУХранителя(Регистратор, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "ReturnGoodsFromCustomerObject" Тогда
			ПКО_Документ_ВозвратТоваровОтКлиента(Регистратор, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "ReturnGoodsFromTheCommissionerObject" Тогда
			ПКО_Документ_ВозвратТоваровОтКомиссионера(Регистратор, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "RetailSalesReportObject" Тогда
			ПКО_Документ_ОтчетОРозничныхПродажах(Регистратор, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "TransferOnCommissionObject" Тогда
			ПКО_Документ_ПередачаТоваровНаКомиссию(Регистратор, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "PostingGoodsObject" Тогда
			ПКО_Документ_ОприходованиеИзлишковТоваров(Регистратор, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "WriteOffGoodsObject" Тогда
			ПКО_Документ_СписаниеНедостачТоваров(Регистратор, СообщениеОбмена, Отказ);
		ИначеЕсли СообщениеОбмена.ТипДанных = "DomesticConsumptionGoodsObject" Тогда
			ПКО_Документ_ВнутреннееПотреблениеТоваров(Регистратор, СообщениеОбмена, Отказ);
		// << 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
		ИначеЕсли СообщениеОбмена.ТипДанных = "OutgoingCashOrderObject" Тогда
			ПКО_Документ_РасходныйКассовыйОрдер(Регистратор, СообщениеОбмена, Отказ);
		// >> 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПравилаКонвертацииОбъектов

Функция ПолучитьОбъектXDTO(ИмяОбъекта)
	
	URIПространстваИмен = "http://www.zollaintegration.croc.cr_zolla_exchange.org";
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(URIПространстваИмен, ИмяОбъекта);
	
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция НовыйДочернийОбъектXDTO(Родитель, ИмяЭлемента, ЗначениеЭлемента = Неопределено)
	
	СвойствоДочернего	 = Родитель.Тип().Свойства.Получить(ИмяЭлемента);
	ТипДочернего		 = СвойствоДочернего.Тип;
	ЭтоСписок			 = СвойствоДочернего.ВерхняяГраница <> 1;
	
	Если ЗначениеЭлемента = Неопределено Тогда
		Результат = ФабрикаXDTO.Создать(ТипДочернего);
	Иначе
		Результат = ФабрикаXDTO.Создать(ТипДочернего, ЗначениеЭлемента);
	КонецЕсли;
	
	Если ЭтоСписок Тогда
		Родитель[ИмяЭлемента].Добавить(Результат);
	Иначе
		Родитель[ИмяЭлемента] = Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьЗначениеXDTO(Элемент, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	Если ЗначениеРеквизита = Неопределено Или ЗначениеРеквизита = NULL Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		// Здесь можно добавить проверки на заполненность, вывод сообщений и т.д.
		ТипЗнчРеквизита = ТипЗнч(ЗначениеРеквизита);
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнчРеквизита) Тогда
			Элемент[ИмяРеквизита] = XMLСтрока(ЗначениеРеквизита);
		ИначеЕсли ТипЗнчРеквизита = Тип("Строка") Тогда
			Элемент[ИмяРеквизита] = СокрЛП(ЗначениеРеквизита);
		Иначе	
			Элемент[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка при заполнении реквизита ""%1"": %2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяРеквизита, ОписаниеОшибки());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

#Область Справочники

// << 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Функция ПКО_Справочник_ВалютыСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект = ПолучитьОбъектXDTO("CurrencyRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"Наименование, НаименованиеПолное, Код");
	
	УстановитьЗначениеXDTO(Объект, "Ref"     , Ссылка);
	УстановитьЗначениеXDTO(Объект, "Name"    , Реквизиты.Наименование);
	УстановитьЗначениеXDTO(Объект, "Code"    , Реквизиты.Код);
	УстановитьЗначениеXDTO(Объект, "NameFull", Реквизиты.НаименованиеПолное);
	
	Возврат Объект;
	
КонецФункции // >> 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Функция ПКО_Справочник_ДоговорыКонтрагентовСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект = ПолучитьОбъектXDTO("ContractRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"Номер, Наименование, Дата, КР_КодДемо");
	
	УстановитьЗначениеXDTO(Объект, "Ref"     , Ссылка);
	УстановитьЗначениеXDTO(Объект, "Number"  , Реквизиты.Номер);
	УстановитьЗначениеXDTO(Объект, "Name"    , Реквизиты.Наименование);
	УстановитьЗначениеXDTO(Объект, "Date"    , Реквизиты.Дата);
	УстановитьЗначениеXDTO(Объект, "CodeDEMO", Реквизиты.КР_КодДемо);
	
	Возврат Объект;
	
КонецФункции // >> 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

Функция ПКО_Справочник_КассыККМСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект = ПолучитьОбъектXDTO("CashierKKMRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"Наименование");
	
	УстановитьЗначениеXDTO(Объект, "Ref" , Ссылка);
	УстановитьЗначениеXDTO(Объект, "Name", Реквизиты.Наименование);
	
	Возврат Объект;
	
КонецФункции

Функция ПКО_Справочник_КоллекцииНоменклатуры(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект = ПолучитьОбъектXDTO("CollectionRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"Код");
	
	УстановитьЗначениеXDTO(Объект, "Ref"         , Ссылка);
	УстановитьЗначениеXDTO(Объект, "CollectionId", Реквизиты.Код);
	
	Возврат Объект;
	
КонецФункции

Функция ПКО_Справочник_КонтрагентыСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект = ПолучитьОбъектXDTO("СounterpartyRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"Наименование, ИНН, КПП, РегистрационныйНомер, ЮрФизЛицо");
	
	УстановитьЗначениеXDTO(Объект, "Ref"               , Ссылка);
	УстановитьЗначениеXDTO(Объект, "INN"               , Реквизиты.ИНН);
	УстановитьЗначениеXDTO(Объект, "KPP"               , Реквизиты.КПП);
	УстановитьЗначениеXDTO(Объект, "Name"              , Реквизиты.Наименование);
	УстановитьЗначениеXDTO(Объект, "RegistrationNumber", Реквизиты.РегистрационныйНомер);
	УстановитьЗначениеXDTO(Объект, "Resident",
		Не Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент);
	
	Возврат Объект;
	
КонецФункции

// << 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Функция ПКО_Справочник_ОрганизацииСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект = ПолучитьОбъектXDTO("OrganizationRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Ссылка, "Наименование, НаименованиеПолное, ИНН, КПП");
	
	УстановитьЗначениеXDTO(Объект, "Ref"     , Ссылка);
	УстановитьЗначениеXDTO(Объект, "Name"    , Реквизиты.Наименование);
	УстановитьЗначениеXDTO(Объект, "INN"     , Реквизиты.ИНН);
	УстановитьЗначениеXDTO(Объект, "KPP"     , Реквизиты.КПП);
	УстановитьЗначениеXDTO(Объект, "NameFull", Реквизиты.НаименованиеПолное);
	
	Возврат Объект;
	
КонецФункции // >> 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

Функция ПКО_Справочник_ПодразделенияСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект = ПолучитьОбъектXDTO("DepartmentRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"Наименование, Код, Родитель");
	
	УстановитьЗначениеXDTO(Объект, "Ref" , Ссылка);
	УстановитьЗначениеXDTO(Объект, "Code", Реквизиты.Код);
	УстановитьЗначениеXDTO(Объект, "Name", Реквизиты.Наименование);
	
	Если ЗначениеЗаполнено(Реквизиты.Родитель) Тогда
		УстановитьЗначениеXDTO(Объект, "Parent", ПКО_Справочник_ПодразделенияСсылка(Реквизиты.Родитель));
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

Функция ПКО_Справочник_СкладыСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("WarehouseRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"Код, Наименование, ТипСклада, Родитель");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref"          , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name"         , Реквизиты.Наименование);
	УстановитьЗначениеXDTO(ОбъектXDTO, "WarehouseType", Реквизиты.ТипСклада);
	УстановитьЗначениеXDTO(ОбъектXDTO, "TorgCode"     , Реквизиты.Код);
	
	Если ЗначениеЗаполнено(Реквизиты.Родитель) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "Parent", ПКО_Справочник_СкладыСсылка(Реквизиты.Родитель));
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// << 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Функция ПКО_Справочник_БанковскиеСчетаОрганизацийСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("OrganizationsBankAccountRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"Наименование, НомерСчета, БИКБанка, НаименованиеБанка");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref"          , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name"         , Реквизиты.Наименование);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AccountNumber", Реквизиты.НомерСчета);
	УстановитьЗначениеXDTO(ОбъектXDTO, "BanksBIK"     , Реквизиты.БИКБанка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "BanksName"    , Реквизиты.НаименованиеБанка);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_СоставнойТип_КассаОтправительПолучатель(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("CashierSenderRecieverRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Наименование");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref" , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name", Реквизиты.Наименование);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Type", Ссылка.Метаданные().Имя);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_Справочник_КассыСсылка(Ссылка)
		
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("CashierRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Наименование, Подразделение");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref"        , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name"       , Реквизиты.Наименование);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision", ПКО_Справочник_ПодразделенияСсылка(Реквизиты.Подразделение));
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_Справочник_ПользователиСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("UserRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Наименование");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref" , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name", Реквизиты.Наименование);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_Справочник_СтатьиДвиженияДенежныхСредствСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("CashFlowItemRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Код, Наименование");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref" , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Code", Реквизиты.Код);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name", Реквизиты.Наименование);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_Справочник_ФизическиеЛицаСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("PersonRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Наименование, ДатаРождения");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref"     , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name"    , Реквизиты.Наименование);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Birthday", Реквизиты.ДатаРождения);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// << 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Функция ПКО_ПВХ_СтатьяДоходовРасходов(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("WriteOffArticleRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Наименование");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref" , XMLСтрока(Ссылка));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name", Реквизиты.Наименование);
	
	Возврат ОбъектXDTO;
	
КонецФункции // >> 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

Функция ПКО_ПВХ_СтатьиДоходовСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ItemOfIncomeRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Код, Наименование");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref" , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Code", Реквизиты.Код);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name", Реквизиты.Наименование);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_ПВХ_СтатьиРасходовСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ItemOfExpenditureRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Код, Наименование");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref" , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Code", Реквизиты.Код);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name", Реквизиты.Наименование);
	
	Возврат ОбъектXDTO;
	
КонецФункции // >> 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

// << 03.11.2023 Петухов А.В., Фактор, #3226
Функция ПКО_Справочник_НоменклатураПрисоединенныеФайлы(Источник, СообщениеОбмена, Отказ)
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ImageOfGoods");
	
	сткРеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ВладелецФайла, "Артикул,КР_Цвет");
 	Артикул = СокрЛП(сткРеквизитыНоменклатуры.Артикул);
	ИмяФайла = СтрШаблон("%1.%2", Артикул,Источник.Расширение);
 	ОбъектXDTO.FileName = ИмяФайла;
// << 05.12.2023 Петухов А.В., Фактор, #3441
	ОбъектXDTO.NeedReport = XMLСтрока(Ложь);
// >> 05.12.2023 Петухов А.В., Фактор, #3441

	//ОбъектXDTO.Image = РаботаСФайлами.ДвоичныеДанныеФайла(Источник.Ссылка);
	ДанныеФайла = Неопределено;
	Если Истина
		И Источник.ДополнительныеСвойства.Свойство("КР_ДанныеФайла",ДанныеФайла)
		И ДанныеФайла <> Неопределено
	Тогда
		ДвоичныеДанные = ДанныеФайла;
	Иначе
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Источник.Ссылка, Ложь);
	КонецЕсли;
	
	Если ДвоичныеДанные <> Неопределено Тогда
		ОбъектXDTO.Image = ДвоичныеДанные;
	КонецЕсли;
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецФункции
// >> 03.11.2023 Петухов А.В., Фактор, #3226

// << 27.11.2023 Петухов А.В., Фактор, #3365
Функция ПКО_Справочник_ФизическиеЛицаВодители(Источник, СообщениеОбмена, Отказ)

	ОбъектXDTO = ПолучитьОбъектXDTO("IndividualObject");

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOСправочника(
		ОбъектXDTO, Источник, СообщениеОбмена);

	ОбъектXDTO.Group = Источник.ЭтоГруппа;
	УстановитьЗначениеXDTO(ОбъектXDTO, "Parent"    , ПКО_Справочник_ФизическиеЛицаВодителиСсылка(Источник.Родитель));
	
	Если Не Источник.ЭтоГруппа Тогда 
		ОбъектXDTO.Driver = Источник.КР_ЭтоВодитель;
		// << 10.01.2023 Федотов А.М., КРОК, Jira№A2105505-531
		ОбъектXDTO.DriverForRetail = Источник.КР_ЭтоВодительРозницы;
		// >> 10.01.2023 Федотов А.М., КРОК, Jira№A2105505-531
	КонецЕсли;
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецФункции

Функция ПКО_Справочник_ФизическиеЛицаВодителиСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("IndividualRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Наименование");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref"     , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name"    , Реквизиты.Наименование);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_Справочник_ТранспортныеСредства(Источник, СообщениеОбмена, Отказ)
	
	ОбъектXDTO = ПолучитьОбъектXDTO("VehicleObject");

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOСправочника(
		ОбъектXDTO, Источник, СообщениеОбмена);

	ОбъектXDTO.LicPlate = Источник.Код;	
	ОбъектXDTO.Manufacturer = Источник.Марка;	
	ОбъектXDTO.CapacityTons = Источник.ГрузоподъемностьВТоннах;	
	ОбъектXDTO.CapacitySqMtrs = Источник.ВместимостьВКубическихМетрах;	
	ОбъектXDTO.TrailerManufacturer = Источник.Прицеп;	
	ОбъектXDTO.TrailerLicPlate = Источник.ГосударственныйНомерПрицепа;	
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецФункции

Функция ПКО_Справочник_ТранспортныеСредстваСсылка(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("VehicleRef");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Код");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref"     , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Name"    , Реквизиты.Код);
	
	Возврат ОбъектXDTO;
	
КонецФункции
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область Документы

Процедура ПКО_Документ_ОбщиеРеквизитыДокумента(Источник, ОбъектXDTO, СообщениеОбмена)
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref"         , Источник.Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Number"      , Источник.Номер);
	УстановитьЗначениеXDTO(ОбъектXDTO, "DeletionMark", Источник.ПометкаУдаления);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Posted"      , Источник.Проведен);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Date"        , Источник.Дата);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO, "Comment") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "Comment" , Источник.Комментарий);
	КонецЕсли;
	
	Если СообщениеОбмена.ЭтоУдаление Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "DeletionMark", Истина);
		УстановитьЗначениеXDTO(ОбъектXDTO, "Posted"      , Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтКлиента(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Подразделение, Контрагент, Договор,
			|ДокументРеализации, ЦенаВключаетНДС, СуммаДокумента, Товары");
		
		ТаблицаТовары = Данные.Товары.Выгрузить();
		ТоварыКоличествоУпаковок = ТаблицаТовары.Итог("КоличествоУпаковок");
	Иначе
		Данные = Источник;
		
		ТоварыКоличествоУпаковок = Данные.Товары.Итог("КоличествоУпаковок");
	КонецЕсли;
	
	ДанныеРНСебестоимость = ДанныеРегистраСебестоимости(Данные.Ссылка);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ReturnGoodsFromCustomerObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"    , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"     , ПКО_Справочник_ПодразделенияСсылка(Данные.Подразделение));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Сounterparty"    , ПКО_Справочник_КонтрагентыСсылка(Данные.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"        , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Данные.Договор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "PriceIncludesVAT", Данные.ЦенаВключаетНДС);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountReturn"    , Данные.СуммаДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountCost"      , ДанныеРНСебестоимость.Стоимость);
	УстановитьЗначениеXDTO(ОбъектXDTO, "QuantityReturn"  , ТоварыКоличествоУпаковок);
	
	Если ЗначениеЗаполнено(Данные.ДокументРеализации)
		И ОбщегоНазначения.ЭтоДокумент(Данные.ДокументРеализации.Метаданные()) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "RefDocumentSale", ПКО_ТипДокумента(Данные.ДокументРеализации));
	// << 20.06.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1801
	Иначе
		ДокументРеализации = ДокументРеализацииВозвратаТоваров(Данные.Товары.Выгрузить());
		Если ЗначениеЗаполнено(ДокументРеализации)
			И ОбщегоНазначения.ЭтоДокумент(ДокументРеализации.Метаданные()) Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, "RefDocumentSale", ПКО_ТипДокумента(ДокументРеализации));
		КонецЕсли;
	// >> 20.06.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1801
	КонецЕсли;
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтКомиссионера(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Склад, Контрагент, Договор, ДокументОснование, СуммаДокумента, Товары");
		
		ТаблицаТовары = Данные.Товары.Выгрузить();
		ТоварыКоличествоУпаковок = ТаблицаТовары.Итог("КоличествоУпаковок");
	Иначе
		Данные = Источник;
		
		ТоварыКоличествоУпаковок = Данные.Товары.Итог("КоличествоУпаковок");
	КонецЕсли;
	
	ПодразделениеСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Склад, "Подразделение");
	ДанныеРНСебестоимость = ДанныеРегистраСебестоимости(Данные.Ссылка);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ReturnGoodsFromTheCommissionerObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"   , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"    , ПКО_Справочник_ПодразделенияСсылка(ПодразделениеСклада));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CommissionAgent", ПКО_Справочник_КонтрагентыСсылка(Данные.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"       , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Данные.Договор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountReturn"   , Данные.СуммаДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountCost"     , ДанныеРНСебестоимость.Стоимость);
	УстановитьЗначениеXDTO(ОбъектXDTO, "QuantityReturn" , ТоварыКоличествоУпаковок);
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации(Источник, СообщениеОбмена, Отказ)
	
	ОбъектXDTO = ПолучитьОбъектXDTO("RealizationAdjustmentObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Источник, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"       , ПКО_Справочник_ОрганизацииСсылка(Источник.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"        , ПКО_Справочник_ПодразделенияСсылка(Источник.Подразделение));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Client"             , ПКО_Справочник_КонтрагентыСсылка(Источник.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"           , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Источник.Договор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "RefDocumentSale"    , ПКО_ТипДокумента(Источник.ДокументОснование));
	УстановитьЗначениеXDTO(ОбъектXDTO, "TypeAdjustment"     , Источник.ВидКорректировки);
	УстановитьЗначениеXDTO(ОбъектXDTO, "PriceIncludesVAT"   , Источник.ЦенаВключаетНДС);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountAdjustments"  , Источник.СуммаДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "QuantityAdjustments", Источник.Товары.Итог("КоличествоУпаковок"));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Goods"              , ПКО_ТаблицаТовары_Общая(Источник));
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионераОПродажах(Источник, СообщениеОбмена, Отказ)
	
	ТипЗнчИсточник = ТипЗнч(Источник);
	Если ТипЗнчИсточник = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
		Или ТипЗнчИсточник = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Множитель = -1;
	Иначе
		Множитель = 1;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнчИсточник) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Подразделение, Контрагент, Договор,
			|ЦенаВключаетНДС, СуммаДокумента, КлиентКонтрагент, Товары");
		
		ТаблицаТовары = Данные.Товары.Выгрузить();
		ТоварыКоличествоУпаковок = ТаблицаТовары.Итог("КоличествоУпаковок");
	Иначе
		Данные = Источник;
		
		ТоварыКоличествоУпаковок = Данные.Товары.Итог("КоличествоУпаковок");
	КонецЕсли;
	
	ДанныеРНСебестоимость = ДанныеРегистраСебестоимости(Данные.Ссылка);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("CommissionerSalesReportObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"    , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"     , ПКО_Справочник_ПодразделенияСсылка(Данные.Подразделение));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CommissionAgent" , ПКО_Справочник_КонтрагентыСсылка(Данные.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"        , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Данные.Договор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Client"          , ПКО_Справочник_КонтрагентыСсылка(Данные.КлиентКонтрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "PriceIncludesVAT", Данные.ЦенаВключаетНДС);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountSales"     , Данные.СуммаДокумента * Множитель);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountCost"      , ДанныеРНСебестоимость.Стоимость);
	УстановитьЗначениеXDTO(ОбъектXDTO, "QuantitySales"   , ТоварыКоличествоУпаковок * Множитель);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Goods"           , ПКО_ТаблицаТовары_Общая(Данные));
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Склад, КассаККМ, ЦенаВключаетНДС, СуммаДокумента, Товары");
		
		ТаблицаТовары = Данные.Товары.Выгрузить();
		ТоварыКоличествоУпаковок = ТаблицаТовары.Итог("КоличествоУпаковок");
	Иначе
		Данные = Источник;
		
		ТоварыКоличествоУпаковок = Данные.Товары.Итог("КоличествоУпаковок");
	КонецЕсли;
	
	ПодразделениеСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Склад, "Подразделение");
	ДанныеРНСебестоимость = ДанныеРегистраСебестоимости_ОтчетОРозничныхПродажах(Данные.Ссылка);
	МассивОРП = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные.Ссылка);
	СвязанныеРеализации = ОтчетОРозничныхПродажах_СвязанныеРеализацииВозвраты(
		Данные.Ссылка, "РеализацияТоваровУслуг", "КР_РозничнаяПродажа");
	СвязанныеВозвраты = ОтчетОРозничныхПродажах_СвязанныеРеализацииВозвраты(
		Данные.Ссылка, "ВозвратТоваровОтКлиента", "КР_РозничныйВозврат");
	
	ОбъектXDTO = ПолучитьОбъектXDTO("RetailSalesReportObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	// ЗаполнитьСуммыОплатОРП(Данные.Ссылка, ОбъектXDTO);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"        , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"         , ПКО_Справочник_ПодразделенияСсылка(ПодразделениеСклада));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Shop"                , ПКО_Справочник_СкладыСсылка(Данные.Склад));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CashierKKM"          , ПКО_Справочник_КассыККМСсылка(Данные.КассаККМ));
	УстановитьЗначениеXDTO(ОбъектXDTO, "PriceIncludesVAT"    , Данные.ЦенаВключаетНДС);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountSales"         , Данные.СуммаДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountCost"          , ДанныеРНСебестоимость.Стоимость);
	УстановитьЗначениеXDTO(ОбъектXDTO, "QuantitySales"       , ТоварыКоличествоУпаковок);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Goods"               ,
		ПКО_ТаблицаТовары_ОтчетОРозничныхПродажах(МассивОРП));
	УстановитьЗначениеXDTO(ОбъектXDTO, "ReturnsGoods"        ,
		ПКО_ТаблицаТовары_ОтчетОРозничныхПродажах(МассивОРП, Истина));
	УстановитьЗначениеXDTO(ОбъектXDTO, "ECommerceGoods"      ,
		ПКО_ТаблицаТовары_ОтчетОРозничныхПродажах(СвязанныеРеализации));
	УстановитьЗначениеXDTO(ОбъектXDTO, "ECommerceReturnGoods",
		ПКО_ТаблицаТовары_ОтчетОРозничныхПродажах(СвязанныеВозвраты));
	УстановитьЗначениеXDTO(ОбъектXDTO, "PaymentsAndReturns"  ,
		ПКО_ТаблицаОплатыВозвраты_ОтчетОРозничныхПродажах(Данные));
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Процедура ПКО_Документ_ПередачаТоваровНаКомиссию(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Склад, Контрагент, Товары, СуммаДокумента");
		
		ТаблицаТовары = Данные.Товары.Выгрузить();
		ТоварыКоличествоУпаковок = ТаблицаТовары.Итог("КоличествоУпаковок");
	Иначе
		Данные = Источник;
		
		ТоварыКоличествоУпаковок = Данные.Товары.Итог("КоличествоУпаковок");
	КонецЕсли;
	
	ПодразделениеСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Склад, "Подразделение");
	ДанныеРНСебестоимость = ДанныеРегистраСебестоимости(Данные.Ссылка);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("TransferOnCommissionObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"                , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"                 , ПКО_Справочник_ПодразделенияСсылка(ПодразделениеСклада));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Warehouse"                   , ПКО_Справочник_СкладыСсылка(Данные.Склад));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CommissionAgent"             , ПКО_Справочник_КонтрагентыСсылка(Данные.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountSales"                 , Данные.СуммаДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountCost"                  , ДанныеРНСебестоимость.Стоимость);
	УстановитьЗначениеXDTO(ОбъектXDTO, "QuantityTransferOnCommission", ТоварыКоличествоУпаковок);
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Подразделение, Склад, Контрагент, Договор,
			|ЦенаВключаетНДС, СуммаДокумента, Товары");
		
		ТаблицаТовары = Данные.Товары.Выгрузить();
		ТоварыКоличествоУпаковок = ТаблицаТовары.Итог("КоличествоУпаковок");
	Иначе
		Данные = Источник;
		
		ТоварыКоличествоУпаковок = Данные.Товары.Итог("КоличествоУпаковок");
	КонецЕсли;
	
	ПодразделениеСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Склад, "Подразделение");
	ДанныеРНСебестоимость = ДанныеРегистраСебестоимости(Данные.Ссылка);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("RealizationObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"    , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"     , ПКО_Справочник_ПодразделенияСсылка(ПодразделениеСклада));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Workshop"        , ПКО_Справочник_СкладыСсылка(Данные.Склад));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Client"          , ПКО_Справочник_КонтрагентыСсылка(Данные.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"        , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Данные.Договор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "PriceIncludesVAT", Данные.ЦенаВключаетНДС);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountSales"     , Данные.СуммаДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountCost"      , ДанныеРНСебестоимость.Стоимость);
	УстановитьЗначениеXDTO(ОбъектXDTO, "QuantitySales"   , ТоварыКоличествоУпаковок);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Goods"           , ПКО_ТаблицаТовары_Общая(Данные));
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный(Источник, СообщениеОбмена, Отказ)
	
	ОбъектXDTO = ПолучитьОбъектXDTO("InvoiceObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Источник, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "RefDocBase"         , ПКО_ТипДокумента(Источник.ДокументОснование));
	УстановитьЗначениеXDTO(ОбъектXDTO, "PrintNumber"        , Источник.ПредставлениеНомера);
	УстановитьЗначениеXDTO(ОбъектXDTO, "TransactionTypeCode", Источник.КодВидаОперации);
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

// << 22.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Процедура ПКО_Документ_ОприходованиеИзлишковТоваров(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Подразделение, Склад, СтатьяДоходов");
	Иначе
		Данные = Источник;
	КонецЕсли;
	
	ДанныеРНСебестоимость = ДанныеРегистраСебестоимости(Данные.Ссылка, Истина);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("PostingGoodsObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"  , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"   , ПКО_Справочник_ПодразделенияСсылка(Данные.Подразделение));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Warehouse"     , ПКО_Справочник_СкладыСсылка(Данные.Склад));
	УстановитьЗначениеXDTO(ОбъектXDTO, "KindOperations", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.СтатьяДоходов, "Наименование"));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Quantity"      , ДанныеРНСебестоимость.Количество);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Price"         , ДанныеРНСебестоимость.Цена);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Amount"        , ДанныеРНСебестоимость.Стоимость);
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Процедура ПКО_Документ_СписаниеНедостачТоваров(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Подразделение, Склад, СтатьяРасходов");
	Иначе
		Данные = Источник;
	КонецЕсли;
	
	ДанныеРНСебестоимость = ДанныеРегистраСебестоимости(Данные.Ссылка);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("WriteOffGoodsObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"  , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"   , ПКО_Справочник_ПодразделенияСсылка(Данные.Подразделение));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Warehouse"     , ПКО_Справочник_СкладыСсылка(Данные.Склад));
	УстановитьЗначениеXDTO(ОбъектXDTO, "KindOperations", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.СтатьяРасходов, "Наименование"));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Quantity"      , ДанныеРНСебестоимость.Количество);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Price"         , ДанныеРНСебестоимость.Цена);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Amount"        , ДанныеРНСебестоимость.Стоимость);
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры // >> 22.08.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

// << 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ПКО_Документ_ПоступлениеТоваровНаСклад(Источник, СообщениеОбмена, Отказ)
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ReceiptGoodsWarehouseObject");
	
	РаспоряжениеОбъектXDTO = Неопределено;
	Если ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		РаспоряжениеОбъектXDTO = ПКО_Документ_ПриобретениеТоваровУслуг(Источник.Распоряжение, СообщениеОбмена, Отказ, Истина);
	КонецЕсли;
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Источник, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization", ПКО_Справочник_ОрганизацииСсылка(Источник.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "DocBase"     , РаспоряжениеОбъектXDTO);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Counterparty", ПКО_Справочник_КонтрагентыСсылка(Источник.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"    , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Источник.Договор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountTotal" , Источник.СуммаДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Goods"       , ПКО_ТаблицаТовары_ПоступлениеТоваровНаСклад(Источник));
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Функция ПКО_Документ_ПриобретениеТоваровУслуг(Источник, СообщениеОбмена, Отказ, ЭтоРаспоряжение = Ложь)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Контрагент, Договор, Валюта, ВалютаВзаиморасчетов,
			|КурсЧислитель, КурсЗнаменатель, ЦенаВключаетНДС, Товары, СуммаДокумента");
	Иначе
		Данные = Источник;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("PurchaseOfGoodsAndServicesObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"       , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Counterparty"       , ПКО_Справочник_КонтрагентыСсылка(Данные.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"           , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Данные.Договор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Currency"           , ПКО_Справочник_ВалютыСсылка(Данные.Валюта));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CurrencySettlements", ПКО_Справочник_ВалютыСсылка(Данные.ВалютаВзаиморасчетов));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CourseNumerator"    , Данные.КурсЧислитель);
	УстановитьЗначениеXDTO(ОбъектXDTO, "CourseDenominator"  , Данные.КурсЗнаменатель);
	УстановитьЗначениеXDTO(ОбъектXDTO, "PriceIncludesVAT"   , Данные.ЦенаВключаетНДС);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Goods"              , ПКО_ТаблицаТовары_ПриобретениеТоваровУслуг(Данные));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Advances"           , ПКО_ТаблицаАвансы_ПриобретениеТоваровУслуг(Данные, СообщениеОбмена));
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountTotal"        , Данные.СуммаДокумента);
	
	Если ЭтоРаспоряжение Тогда
		Возврат ОбъектXDTO;
	Иначе
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	КонецЕсли;
	
КонецФункции

Процедура ПКО_Документ_ПриобретениеУслугПрочихАктивов(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Контрагент, Договор, Валюта, ВалютаВзаиморасчетов, НалогообложениеНДС,
			|КурсЧислитель, КурсЗнаменатель, ЦенаВключаетНДС, СуммаДокумента, Расходы");
	Иначе
		Данные = Источник;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("AcquisitionOfServicesAndOtherAssetsObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	ЗаполнитьДанныеСчетаФактуры_ПриобретениеУслугПрочихАктивов(Данные, ОбъектXDTO);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"          , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Counterparty"          , ПКО_Справочник_КонтрагентыСсылка(Данные.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"              , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Данные.Договор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Currency"              , ПКО_Справочник_ВалютыСсылка(Данные.Валюта));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CurrencySettlements"   , ПКО_Справочник_ВалютыСсылка(Данные.ВалютаВзаиморасчетов));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CourseNumerator"       , Данные.КурсЧислитель);
	УстановитьЗначениеXDTO(ОбъектXDTO, "CourseDenominator"     , Данные.КурсЗнаменатель);
	УстановитьЗначениеXDTO(ОбъектXDTO, "PriceIncludesVAT"      , Данные.ЦенаВключаетНДС);
	УстановитьЗначениеXDTO(ОбъектXDTO, "ExpensesAndOtherAssets", ПКО_ТаблицаРасходы_ПриобретениеУслугПрочихАктивов(Данные));
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountTotal"           , Данные.СуммаДокумента);
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларацияИмпорт(Источник, СообщениеОбмена, Отказ)
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ImportCustomsDeclarationObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Источник, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"       , ПКО_Справочник_ОрганизацииСсылка(Источник.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "DeclarationNumber"  , Источник.НомерДекларации);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Customs"            , ПКО_Справочник_КонтрагентыСсылка(Источник.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CustomsDuty"        , Источник.ТаможенныйСбор);
	УстановитьЗначениеXDTO(ОбъектXDTO, "CustomsFine"        , Источник.ТаможенныйШтраф);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Currency"           , ПКО_Справочник_ВалютыСсылка(Источник.Валюта));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CurrencySettlements", ПКО_Справочник_ВалютыСсылка(Источник.ВалютаВзаиморасчетов));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CourseNumerator"    , Источник.КурсЧислитель);
	УстановитьЗначениеXDTO(ОбъектXDTO, "CourseDenominator"  , Источник.КурсЗнаменатель);
	УстановитьЗначениеXDTO(ОбъектXDTO, "ProductsByCategory" , ПКО_ТаблицаТовары_ТаможеннаяДекларацияИмпорт(Источник));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Sections"           , ПКО_ТаблицаРазделы_ТаможеннаяДекларацияИмпорт(Источник));
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры // >> 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 13.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ПКО_Документ_ВнутреннееПотреблениеТоваров(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Подразделение, Склад, ХозяйственнаяОперация");
		
		ТаблицаТовары = Источник.Товары.Выгрузить();  
		Данные.Вставить("Товары", ТаблицаТовары);
		ТоварыКоличествоУпаковок = ТаблицаТовары.Итог("КоличествоУпаковок"); 
		
	Иначе
		Данные = Источник;
		
		ТоварыКоличествоУпаковок = Данные.Товары.Итог("КоличествоУпаковок");
	КонецЕсли;
	
	ДанныеРНСебестоимость = ДанныеРегистраСебестоимости(Данные.Ссылка, , Истина);
	СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	Для Каждого СтрТовара Из Данные.Товары Цикл
		Если ЗначениеЗаполнено(СтрТовара.СтатьяРасходов) Тогда
			СтатьяРасходов = СтрТовара.СтатьяРасходов; 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("DomesticConsumptionGoodsObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "KindOperations" , Данные.ХозяйственнаяОперация);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"   , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"    , ПКО_Справочник_ПодразделенияСсылка(Данные.Подразделение));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Warehouse"      , ПКО_Справочник_СкладыСсылка(Данные.Склад));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Quantity"       , ТоварыКоличествоУпаковок);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Price"          , ДанныеРНСебестоимость.Цена);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Amount"         , ДанныеРНСебестоимость.Стоимость);	
	УстановитьЗначениеXDTO(ОбъектXDTO, "ExpenditureItem", Строка(СтатьяРасходов));
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры // >> 13.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298
Процедура ПКО_Документ_ОтчетОСписанииТоваровУХранителя(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Подразделение, Контрагент, Договор, СтатьяРасходов");
	Иначе
		Данные = Источник;
	КонецЕсли;
	
	ДанныеРНСебестоимость = ДанныеРегистраСебестоимости(Данные.Ссылка);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("WriteOffGoodsCommissionAgentObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"   , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"    , ПКО_Справочник_ПодразделенияСсылка(Данные.Подразделение));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CommissionAgent", ПКО_Справочник_КонтрагентыСсылка(Данные.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"       , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Данные.Договор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "WriteOffArticle", ПКО_ПВХ_СтатьяДоходовРасходов(Данные.СтатьяРасходов));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Quantity"       , ДанныеРНСебестоимость.Количество);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Amount"         , ДанныеРНСебестоимость.Стоимость);
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры // >> 14.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-298

// << 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Процедура ПКО_Документ_ПоступлениеНаличныхБезналичныхДС(Источник, СообщениеОбмена, Отказ)
	
	ТипЗнчИсточник = ТипЗнч(Источник);
	Если ТипЗнчИсточник = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда
		ТипДанных = "PaymentCardObject";
	ИначеЕсли ТипЗнчИсточник = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		ТипДанных = "PaymentCashObject";
	Иначе
		ВызватьИсключение НСтр("ru = 'Не определено правило конвертации объекта.'");
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO(ТипДанных);
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Источник, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "BusinessTransaction", Источник.ХозяйственнаяОперация);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Сounterparty"       , ПКО_Справочник_КонтрагентыСсылка(Источник.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"       , ПКО_Справочник_ОрганизацииСсылка(Источник.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"        , ПКО_Справочник_ПодразделенияСсылка(Источник.Подразделение));
	УстановитьЗначениеXDTO(ОбъектXDTO, "SumDoc"             , Источник.СуммаДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "PaymentDecryption"  , ПКО_ТаблицаРасшифровкаПлатежа_НаличныеБезналичныеДС(Источник));
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO, "PaymentType") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "PaymentType"    , ТипПлатежаБезналичнойОплаты(Источник.ДоговорЭквайринга));
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO, "CashierKKM") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "CashierKKM"     , ПКО_Справочник_КассыККМСсылка(Источник.КассаККМ));
	КонецЕсли;
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры // >> 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296

// << 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Процедура ПКО_Документ_ПриходныйКассовыйОрдер(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий, Организация, ХозяйственнаяОперация,
			|КассаОтправитель, БанковскийСчет, Валюта, ВалютаКонвертации, КурсКонвертации, КратностьКурсаКонвертации,
			|ОбъектРасчетов, Кассир, Контрагент, Подразделение, СуммаДокумента, СуммаКонвертации, ИдентификаторДокумента, Исправление,
			|ВТомЧислеНДС, Касса, КассаККМ, ПринятоОт, Основание, Приложение, ПодотчетноеЛицо, Автор, СтатьяДвиженияДенежныхСредств,
			|КР_ПоступлениеВКассуККМ, РасшифровкаПлатежа, ДокументОснование, СторнируемыйДокумент, ИсправляемыйДокумент, Договор");
	Иначе
		Данные = Источник;
	КонецЕсли;
	
	ОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.ОбъектРасчетов, "Объект");
	КассирФизЛицо  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Кассир, "ФизическоеЛицо");
	
	ОбъектXDTO = ПолучитьОбъектXDTO("IncomingCashOrderObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Counterparty"              , ПКО_Справочник_КонтрагентыСсылка(Данные.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"               , ПКО_Справочник_ПодразделенияСсылка(Данные.Подразделение));
	УстановитьЗначениеXDTO(ОбъектXDTO, "SumDoc"                    , Данные.СуммаДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountConverted"           , Данные.СуммаКонвертации);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"              , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "VATIncluded"               , Данные.ВТомЧислеНДС);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Cashier"                   , ПКО_Справочник_КассыСсылка(Данные.Касса));
	УстановитьЗначениеXDTO(ОбъектXDTO, "BusinessTransaction"       , Данные.ХозяйственнаяОперация);
	УстановитьЗначениеXDTO(ОбъектXDTO, "RecievedFrom"              , Данные.ПринятоОт);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Basis"                     , Данные.Основание);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Enclosure"                 , Данные.Приложение);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AccountablePerson"         , ПКО_Справочник_ФизическиеЛицаСсылка(Данные.ПодотчетноеЛицо));
	УстановитьЗначениеXDTO(ОбъектXDTO, "BankAccount"               , ПКО_Справочник_БанковскиеСчетаОрганизацийСсылка(Данные.БанковскийСчет));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Currency"                  , ПКО_Справочник_ВалютыСсылка(Данные.Валюта));
	УстановитьЗначениеXDTO(ОбъектXDTO, "User"                      , ПКО_Справочник_ПользователиСсылка(Данные.Автор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CashFlowItem"              , ПКО_Справочник_СтатьиДвиженияДенежныхСредствСсылка(Данные.СтатьяДвиженияДенежныхСредств));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CashierKKM"                , ПКО_Справочник_КассыККМСсылка(Данные.КассаККМ));
	УстановитьЗначениеXDTO(ОбъектXDTO, "ConvertationCurrency"      , ПКО_Справочник_ВалютыСсылка(Данные.ВалютаКонвертации));
	УстановитьЗначениеXDTO(ОбъектXDTO, "ConversionRate"            , Данные.КурсКонвертации);
	УстановитьЗначениеXDTO(ОбъектXDTO, "ConversionRateMultiplicity", Данные.КратностьКурсаКонвертации);
	УстановитьЗначениеXDTO(ОбъектXDTO, "DocumentID"                , Данные.ИдентификаторДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Correction"                , Данные.Исправление);
	УстановитьЗначениеXDTO(ОбъектXDTO, "RecieverIsCashierKKM"      , Данные.КР_ПоступлениеВКассуККМ);
	УстановитьЗначениеXDTO(ОбъектXDTO, "PaymentDecryption"         , ПКО_ТаблицаРасшифровкаПлатежа_НаличныеБезналичныеДС(Данные));
	УстановитьЗначениеXDTO(ОбъектXDTO, "SumInternetSales"          , ПКО_СуммаПродажВозвратовИнтернетМагазина(Данные)["СуммаПродаж"]);
	
	Если ЗначениеЗаполнено(Данные.ДокументОснование)
		И ОбщегоНазначения.ЭтоДокумент(Данные.ДокументОснование.Метаданные()) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "BasisDocument"         , ПКО_ТипДокумента(Данные.ДокументОснование));
		УстановитьЗначениеXDTO(ОбъектXDTO, "PowerOfAttorneyIssued" , ПКО_ТипДокумента(Данные.ДокументОснование));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.СторнируемыйДокумент)
		И ОбщегоНазначения.ЭтоДокумент(Данные.СторнируемыйДокумент.Метаданные()) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "СanceledDocument"      , ПКО_ТипДокумента(Данные.СторнируемыйДокумент));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ИсправляемыйДокумент)
		И ОбщегоНазначения.ЭтоДокумент(Данные.ИсправляемыйДокумент.Метаданные()) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "CorrectedDocument"     , ПКО_ТипДокумента(Данные.ИсправляемыйДокумент));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Договор)
		И ТипЗнч(Данные.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"              , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Данные.Договор));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.КассаОтправитель) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "CashierSender"         , ПКО_СоставнойТип_КассаОтправительПолучатель(Данные.КассаОтправитель));
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектРасчетов) И ОбщегоНазначения.ЭтоДокумент(ОбъектРасчетов.Метаданные()) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "SettlementObject"      , ПКО_ТипДокумента(ОбъектРасчетов));
	КонецЕсли;
	Если ЗначениеЗаполнено(КассирФизЛицо) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "Paymaster"             , ПКО_Справочник_ФизическиеЛицаСсылка(КассирФизЛицо));
	КонецЕсли;
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры

Процедура ПКО_Документ_РасходныйКассовыйОрдер(Источник, СообщениеОбмена, Отказ)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен, Комментарий,
			|Организация, Подразделение, Контрагент, Договор, Валюта, Касса,
			|СуммаДокумента, СуммаКонвертации, ХозяйственнаяОперация, Выдать,
			|Приложение, ПоДокументу, ПодотчетноеЛицо, ЗаявкаНаРасходованиеДенежныхСредств,
			|БанковскийСчет, Автор, СтатьяДвиженияДенежныхСредств, ДокументОснование,
			|КассаККМ, КассаПолучатель, ВалютаКонвертации, КурсКонвертации, Ведомость,
			|НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты, ОплатаПоЗаявкам,
			|ДатаАвансовогоОтчета, КратностьКурсаКонвертации, ОбъектРасчетов, Исправление,
			|ИдентификаторДокумента, СторнируемыйДокумент, ИсправляемыйДокумент, Кассир,
			|НеКонтролироватьЗаполнениеЗаявки, Основание, ПериодРегистрации, РасшифровкаПлатежа");
	Иначе
		Данные = Источник;
	КонецЕсли;
	
	ОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.ОбъектРасчетов, "Объект");
	КассирФизЛицо  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Кассир, "ФизическоеЛицо");
	
	ОбъектXDTO = ПолучитьОбъектXDTO("OutgoingCashOrderObject");
	
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Counterparty"                      , ПКО_Справочник_КонтрагентыСсылка(Данные.Контрагент));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Subdivision"                       , ПКО_Справочник_ПодразделенияСсылка(Данные.Подразделение));
	УстановитьЗначениеXDTO(ОбъектXDTO, "DontControlMoneyExpenditureRequest", Данные.НеКонтролироватьЗаполнениеЗаявки);
	УстановитьЗначениеXDTO(ОбъектXDTO, "SumDoc"                            , Данные.СуммаДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AmountConverted"                   , Данные.СуммаКонвертации);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Organization"                      , ПКО_Справочник_ОрганизацииСсылка(Данные.Организация));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Cashier"                           , ПКО_Справочник_КассыСсылка(Данные.Касса));
	УстановитьЗначениеXDTO(ОбъектXDTO, "BusinessTransaction"               , Данные.ХозяйственнаяОперация);
	УстановитьЗначениеXDTO(ОбъектXDTO, "HandOverTo"                        , Данные.Выдать);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Basis"                             , Данные.Основание);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Enclosure"                         , Данные.Приложение);
	УстановитьЗначениеXDTO(ОбъектXDTO, "BasedOnTheDocument"                , Данные.ПоДокументу);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AccountablePerson"                 , ПКО_Справочник_ФизическиеЛицаСсылка(Данные.ПодотчетноеЛицо));
	УстановитьЗначениеXDTO(ОбъектXDTO, "BankAccount"                       , ПКО_Справочник_БанковскиеСчетаОрганизацийСсылка(Данные.БанковскийСчет));
	УстановитьЗначениеXDTO(ОбъектXDTO, "Currency"                          , ПКО_Справочник_ВалютыСсылка(Данные.Валюта));
	УстановитьЗначениеXDTO(ОбъектXDTO, "User"                              , ПКО_Справочник_ПользователиСсылка(Данные.Автор));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CashFlowItem"                      , ПКО_Справочник_СтатьиДвиженияДенежныхСредствСсылка(Данные.СтатьяДвиженияДенежныхСредств));
	УстановитьЗначениеXDTO(ОбъектXDTO, "CashierKKM"                        , ПКО_Справочник_КассыККМСсылка(Данные.КассаККМ));
	УстановитьЗначениеXDTO(ОбъектXDTO, "ConvertationCurrency"              , ПКО_Справочник_ВалютыСсылка(Данные.ВалютаКонвертации));
	УстановитьЗначениеXDTO(ОбъектXDTO, "ConversionRate"                    , Данные.КурсКонвертации);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Payroll"                           , Данные.Ведомость);
	УстановитьЗначениеXDTO(ОбъектXDTO, "PayrollNumber"                     , Данные.НомерВедомостиНаВыплатуЗарплаты);
	УстановитьЗначениеXDTO(ОбъектXDTO, "PayrollDate"                       , Данные.ДатаВедомостиНаВыплатуЗарплаты);
	УстановитьЗначениеXDTO(ОбъектXDTO, "BasedOnMoneyExpenditureRequest"    , Данные.ОплатаПоЗаявкам);
	УстановитьЗначениеXDTO(ОбъектXDTO, "AdvanceReportDate"                 , Данные.ДатаАвансовогоОтчета);
	УстановитьЗначениеXDTO(ОбъектXDTO, "ConversionRateMultiplicity"        , Данные.КратностьКурсаКонвертации);
	УстановитьЗначениеXDTO(ОбъектXDTO, "DocumentID"                        , Данные.ИдентификаторДокумента);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Correction"                        , Данные.Исправление);
	УстановитьЗначениеXDTO(ОбъектXDTO, "RegistrationPeriod"                , Данные.ПериодРегистрации);
	УстановитьЗначениеXDTO(ОбъектXDTO, "PaymentDecryption"                 , ПКО_ТаблицаРасшифровкаПлатежа_НаличныеБезналичныеДС(Данные));
	УстановитьЗначениеXDTO(ОбъектXDTO, "SumInternetReturns"                , ПКО_СуммаПродажВозвратовИнтернетМагазина(Данные)["СуммаВозвратов"]);
	
	Если ЗначениеЗаполнено(Данные.СторнируемыйДокумент)
		И ОбщегоНазначения.ЭтоДокумент(Данные.СторнируемыйДокумент.Метаданные()) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "СanceledDocument"              , ПКО_ТипДокумента(Данные.СторнируемыйДокумент));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ИсправляемыйДокумент)
		И ОбщегоНазначения.ЭтоДокумент(Данные.ИсправляемыйДокумент.Метаданные()) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "CorrectedDocument"             , ПКО_ТипДокумента(Данные.ИсправляемыйДокумент));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Договор) И ТипЗнч(Данные.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "Contract"                      , ПКО_Справочник_ДоговорыКонтрагентовСсылка(Данные.Договор));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ЗаявкаНаРасходованиеДенежныхСредств)
		И ОбщегоНазначения.ЭтоДокумент(Данные.ЗаявкаНаРасходованиеДенежныхСредств.Метаданные()) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "MoneyExpenditureRequest"       , ПКО_ТипДокумента(Данные.ЗаявкаНаРасходованиеДенежныхСредств));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ДокументОснование) И ОбщегоНазначения.ЭтоДокумент(Данные.ДокументОснование.Метаданные()) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "BasisDocument"                 , ПКО_ТипДокумента(Данные.ДокументОснование));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.КассаПолучатель) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "CashierReciever"               , ПКО_СоставнойТип_КассаОтправительПолучатель(Данные.КассаПолучатель));
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектРасчетов) И ОбщегоНазначения.ЭтоДокумент(ОбъектРасчетов.Метаданные()) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "SettlementObject"              , ПКО_ТипДокумента(ОбъектРасчетов));
	КонецЕсли;
	Если ЗначениеЗаполнено(КассирФизЛицо) Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "Paymaster"                     , ПКО_Справочник_ФизическиеЛицаСсылка(КассирФизЛицо));
	КонецЕсли;
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
	
КонецПроцедуры // >> 22.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

// << 27.11.2023 Петухов А.В., Фактор, #3299
Процедура ПКО_Документ_ЗаданиеНаПеревозку(Источник, СообщениеОбмена, Отказ)

	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник,
			"Ссылка, Дата, Номер, ПометкаУдаления, Проведен,
			|ДатаВремяРейсаПланС, КР_ЭкспедиторКонтрагент, КР_ЭкспедиторПартнер, КР_ЗонаДоставки");
		ТаблицаДанныеПеревозки = Источник.ДанныеПеревозки.Выгрузить();  
		Данные.Вставить("ДанныеПеревозки", ТаблицаДанныеПеревозки);
	Иначе
		Данные = Источник;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ShipmentOrderObject");
	ПКО_Документ_ОбщиеРеквизитыДокумента(Данные, ОбъектXDTO, СообщениеОбмена);

	НаименованиеЭкспедитора = "";
	Если ЗначениеЗаполнено(Данные.КР_ЭкспедиторПартнер) Тогда
		НаименованиеЭкспедитора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.КР_ЭкспедиторПартнер, "Наименование");
	ИначеЕсли ЗначениеЗаполнено(Данные.КР_ЭкспедиторКонтрагент) Тогда
		НаименованиеЭкспедитора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.КР_ЭкспедиторКонтрагент, "Наименование");
	КонецЕсли;
    ОбъектXDTO.Expeditor = СокрЛП(НаименованиеЭкспедитора);
    ОбъектXDTO.PlannedDepartureDate = Источник.ДатаВремяРейсаПланС;
	Если ЗначениеЗаполнено(Данные.КР_ЗонаДоставки) Тогда
    	ОбъектXDTO.Region = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.КР_ЗонаДоставки, "Наименование"));
	Иначе
		ОбъектXDTO.Region = "";
	КонецЕсли;

	УстановитьЗначениеXDTO(ОбъектXDTO, "RouteList", ПКО_ТаблицаМаршрут(Источник));
	
	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);

КонецПроцедуры
// >> 27.11.2023 Петухов А.В., Фактор, #3299

#КонецОбласти

#Область РегистрыСведений

// << 27.11.2023 Петухов А.В., Фактор, #3365
Процедура ПКО_РегистрСведений_ДокументыФизическихЛиц(Источник, СообщениеОбмена, Отказ)
	
    ОбъектXDTO = ПолучитьОбъектXDTO("IdentityPapersInfoRegObject"); 
	
	ИсточникОтбор = Источник.Отбор;
	
	// Установми отборы                              
	ОбъектXDTO.IdentityPapersInfoRegSelection = ПолучитьОбъектXDTO("IdentityPapersInfoRegSelectionObject");
	XDTOОтбор = ОбъектXDTO.IdentityPapersInfoRegSelection; 
	
	Период = ИсточникОтбор.Период.Значение;
	Физлицо = ИсточникОтбор.Физлицо.Значение;
	ВидДокумента = ИсточникОтбор.ВидДокумента.Значение.Наименование;
	
	XDTOОтбор.Period = Период;
	УстановитьЗначениеXDTO(XDTOОтбор, "Individual", ПКО_Справочник_ФизическиеЛицаВодителиСсылка(Физлицо));
	XDTOОтбор.DocType = ВидДокумента;
	
	ОбъектXDTO.IdentityPapersInfoInfoRegRecordSet = ПолучитьОбъектXDTO("IdentityPapersInfoRegRecordSetObject");
	
	Если СообщениеОбмена.ЭтоУдаление Тогда 
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("IdentityPapersInfoInfoRegRecordObject");   
		СтрокаПакета.Period = Период;
		УстановитьЗначениеXDTO(СтрокаПакета, "Individual", ПКО_Справочник_ФизическиеЛицаВодителиСсылка(Физлицо));
		СтрокаПакета.DocType = ВидДокумента;
		
		//
		СтрокаПакета.DocSeries = Запись.Серия;
		СтрокаПакета.DocNumber = Запись.Номер;
		СтрокаПакета.IssueDate = Запись.ДатаВыдачи;
		СтрокаПакета.ExpDate = Запись.СрокДействия;
		СтрокаПакета.IssueDept = Запись.КемВыдан;
		СтрокаПакета.IssueDeptID = Запись.КодПодразделения;
			
		ОбъектXDTO.IdentityPapersInfoInfoRegRecordSet.IdentityPapersInfoInfoRegRecord.Add(СтрокаПакета);    
		
	КонецЦикла;

	СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(ОбъектXDTO);

КонецПроцедуры

// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область Прочее

Функция ПКО_ТипДокумента(Ссылка)
	
	ОбъектXDTO = ПолучитьОбъектXDTO("DocumentTypeRef");
	
	УстановитьЗначениеXDTO(ОбъектXDTO, "Ref"                , Ссылка);
	УстановитьЗначениеXDTO(ОбъектXDTO, "Type"               , ?(ЗначениеЗаполнено(Ссылка), Ссылка.Метаданные().ПолноеИмя(), ""));
	УстановитьЗначениеXDTO(ОбъектXDTO, "BusinessTransaction", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ХозяйственнаяОперация"));
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_ТаблицаТовары_Общая(ДокументОбъект)
	
	ТаблицаДанные = ДокументОбъект.Товары.Выгрузить();
	Если Не ТаблицаДанные.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДанные", ТаблицаДанные);
	Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанные.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДанные.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДанные.Сумма КАК Сумма,
	|	ТаблицаДанные.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ врт_ТаблицаДанные
	|ИЗ
	|	&ТаблицаДанные КАК ТаблицаДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаПартий.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(СебестоимостьТоваров.СтоимостьРегл + СебестоимостьТоваров.ДопРасходыРегл) КАК Стоимость
	|ПОМЕСТИТЬ врт_ДанныеРегистра
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|		ПО СебестоимостьТоваров.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|ГДЕ
	|	СебестоимостьТоваров.Регистратор = &Регистратор
	|	И СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	КлючиАналитикиУчетаПартий.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	спр_СтавкиНДС.Наименование КАК СтавкаНДСНаименование,
	|	СУММА(врт_ТаблицаДанные.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(врт_ДанныеРегистра.Стоимость, 0) КАК Стоимость,
	|	СУММА(врт_ТаблицаДанные.Сумма) КАК Сумма,
	|	СУММА(врт_ТаблицаДанные.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	врт_ТаблицаДанные КАК врт_ТаблицаДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_ДанныеРегистра КАК врт_ДанныеРегистра
	|		ПО врт_ТаблицаДанные.СтавкаНДС = врт_ДанныеРегистра.СтавкаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК спр_СтавкиНДС
	|		ПО врт_ТаблицаДанные.СтавкаНДС = спр_СтавкиНДС.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	спр_СтавкиНДС.Наименование,
	|	ЕСТЬNULL(врт_ДанныеРегистра.Стоимость, 0)";
	
	ТаблицаДляВыгрузки = Запрос.Выполнить().Выгрузить();
	
	ОбъектXDTO = ПолучитьОбъектXDTO("GoodsRowsObject");
	
	Для Каждого СтрокаДанные Из ТаблицаДляВыгрузки Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "Row");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "Quantity"  , СтрокаДанные.КоличествоУпаковок);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Amount"    , СтрокаДанные.Сумма);
		УстановитьЗначениеXDTO(СтрокаXDTO, "VatRate"   , СтрокаДанные.СтавкаНДСНаименование);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountVat" , СтрокаДанные.СуммаНДС);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountCost", СтрокаДанные.Стоимость);
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// << 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Функция ПКО_ТаблицаТовары_ПоступлениеТоваровНаСклад(ДокументОбъект)
	
	Если ДокументОбъект.Товары.Количество() Тогда
		ТаблицаДанные = ДокументОбъект.Товары.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДанные.Свернуть(
		"АналитикаУчетаНоменклатуры, Номенклатура, СтавкаНДС, Цена",
		"КоличествоУпаковок, СуммаНДС, Сумма");
	ДополнитьТаблицуТовары_ПоступлениеТоваровНаСклад(ДокументОбъект.Ссылка, ТаблицаДанные);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ReceiptGoodsWarehouseGoodsRowsObject");
	
	Для Каждого СтрокаДанные Из ТаблицаДанные Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "Row");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "Collection", ПКО_Справочник_КоллекцииНоменклатуры(СтрокаДанные.КоллекцияНоменклатуры));
		УстановитьЗначениеXDTO(СтрокаXDTO, "Quantity"  , СтрокаДанные.КоличествоУпаковок);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Cost"      , СтрокаДанные.Цена);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountСost", СтрокаДанные.Стоимость);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Amount"    , СтрокаДанные.Сумма);
		УстановитьЗначениеXDTO(СтрокаXDTO, "VatRate"   , СтрокаДанные.СтавкаНДСНаименование);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountVat" , СтрокаДанные.СуммаНДС);
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции // >> 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Функция ПКО_ТаблицаТовары_ПриобретениеТоваровУслуг(ДокументОбъект)
	
	ТаблицаДанные = ДокументОбъект.Товары.Выгрузить();
	Если Не ТаблицаДанные.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДополнитьТаблицуТовары_ПриобретениеТоваровУслуг(ДокументОбъект.Ссылка, ТаблицаДанные);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("PurchaseGoodsAndServicesGoodsRowsObject");
	
	Для Каждого СтрокаДанные Из ТаблицаДанные Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "Row");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "LotCollection"        , СтрокаДанные.Лот);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Quantity"             , СтрокаДанные.КоличествоУпаковок);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Cost"                 , СтрокаДанные.Цена);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountСost"           , СтрокаДанные.Стоимость);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Amount"               , СтрокаДанные.Сумма);
		УстановитьЗначениеXDTO(СтрокаXDTO, "VatRate"              , СтрокаДанные.СтавкаНДСНаименование);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountVat"            , СтрокаДанные.СуммаНДС);
		УстановитьЗначениеXDTO(СтрокаXDTO, "GTDNumber"            , СтрокаДанные.НомерГТДРегистрационныйНомер);
		УстановитьЗначениеXDTO(СтрокаXDTO, "QuantityAccordingRNPT", СтрокаДанные.КоличествоПоРНПТ);
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции // >> 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Функция ПКО_ТаблицаАвансы_ПриобретениеТоваровУслуг(ДокументОбъект, СообщениеОбмена)
	
	ТаблицаДанные = ПолучитьДанныеАвансов_ПриобретениеТоваровУслуг(ДокументОбъект.Ссылка);
	Если Не ТаблицаДанные.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("PurchaseGoodsAndServicesAdvancesRowsObject");
	
	Для Каждого СтрокаДанные Из ТаблицаДанные Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "Row");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "LotCollection"  , СтрокаДанные.Лот);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AdvanceNumber"  , СтрокаДанные.НомерАванса);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AdvanceAmount"  , СтрокаДанные.СуммаАванса);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AdvanceDate"    , СтрокаДанные.ДатаАванса);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AdvanceCurrency", ПКО_Справочник_ВалютыСсылка(СтрокаДанные.ВалютаАванса));
		
		Если СтрокаДанные.ЕстьОшибкаЛот Тогда
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
				НСтр("ru = 'Объект расчетов не является заказом поставщику.'"),
				КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибка(Неопределено));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции // >> 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

Функция ПКО_ТаблицаРасходы_ПриобретениеУслугПрочихАктивов(ДокументОбъект)
	
	ТаблицаДанные = ДокументОбъект.Расходы.Выгрузить();
	Если Не ТаблицаДанные.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДанные.Свернуть(
		"Содержание, КР_Коллекция, Цена,  АналитикаРасходов, СтавкаНДС", "Количество, Сумма, СуммаНДС");
	НаименованияСтавокНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанные, "СтавкаНДС", Истина), "Наименование");
	
	ОбъектXDTO = ПолучитьОбъектXDTO("AcquisitionOfServicesAndOtherAssetsExpensesAndOtherAssetsRowsObject");
	
	Для Каждого СтрокаДанные Из ТаблицаДанные Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "Row");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "Content"               , СтрокаДанные.Содержание);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Collection"            , ПКО_Справочник_КоллекцииНоменклатуры(СтрокаДанные.КР_Коллекция));
		УстановитьЗначениеXDTO(СтрокаXDTO, "Quantity"              , СтрокаДанные.Количество);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Cost"                  , СтрокаДанные.Цена);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Amount"                , СтрокаДанные.Сумма);
		УстановитьЗначениеXDTO(СтрокаXDTO, "VatRate"               , НаименованияСтавокНДС[СтрокаДанные.СтавкаНДС]);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountVat"             , СтрокаДанные.СуммаНДС);
		
		Если ЗначениеЗаполнено(СтрокаДанные.АналитикаРасходов)
			И ОбщегоНазначения.ЭтоДокумент(СтрокаДанные.АналитикаРасходов.Метаданные()) Тогда
			
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанные.АналитикаРасходов, "Дата, Номер");
			
			УстановитьЗначениеXDTO(СтрокаXDTO, "DocumentFoundingDate"  , ДанныеДокумента.Дата);
			УстановитьЗначениеXDTO(СтрокаXDTO, "DocumentFoundingNumber", ДанныеДокумента.Номер);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_ТаблицаТовары_ТаможеннаяДекларацияИмпорт(ДокументОбъект)
	
	Если ДокументОбъект.Товары.Количество() Тогда
		ТаблицаДанные = ДокументОбъект.Товары.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ДополнитьТаблицуТовары_ТаможеннаяДекларацияИмпорт(ТаблицаДанные);
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ImportCustomsDeclarationProductsByCategoryRowsObject");
	
	Для Каждого СтрокаДанные Из ТаблицаДанные Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "Row");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "SectionsNumber"       , СтрокаДанные.НомерРаздела);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Collection"           , ПКО_Справочник_КоллекцииНоменклатуры(СтрокаДанные.КоллекцияНоменклатуры));
		УстановитьЗначениеXDTO(СтрокаXDTO, "Quantity"             , СтрокаДанные.КоличествоУпаковок);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Cost"                 , СтрокаДанные.ТаможеннаяСтоимость);
		УстановитьЗначениеXDTO(СтрокаXDTO, "VatRate"              , СтрокаДанные.СтавкаНДСНаименование);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountVat"            , СтрокаДанные.СуммаНДС);
		УстановитьЗначениеXDTO(СтрокаXDTO, "TaxAmount"            , СтрокаДанные.СуммаПошлины);
		УстановитьЗначениеXDTO(СтрокаXDTO, "ReceiptDocumentNumber", СтрокаДанные.ДокументПоступленияНомер);
		УстановитьЗначениеXDTO(СтрокаXDTO, "ReceiptDocumentDate"  , СтрокаДанные.ДокументПоступленияДата);
		УстановитьЗначениеXDTO(СтрокаXDTO, "CountryOriginCode"    , СтрокаДанные.СтранаПроисхожденияКод);
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_ТаблицаРазделы_ТаможеннаяДекларацияИмпорт(ДокументОбъект)
	
	Если ДокументОбъект.Разделы.Количество() Тогда
		ТаблицаДанные = ДокументОбъект.Разделы.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДанные.Свернуть(
		"НомерРаздела, СтранаПроисхождения, СтавкаНДС, СтавкаПошлины",
		"ТаможеннаяСтоимость, СуммаПошлины, СуммаНДС");
	
	НаименованияСтавокНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанные, "СтавкаНДС", Истина), "Наименование");
	КодыСтранПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанные, "СтранаПроисхождения", Истина), "Код");
	
	ОбъектXDTO = ПолучитьОбъектXDTO("ImportCustomsDeclarationSectionsRowsObject");
	
	Для Каждого СтрокаДанные Из ТаблицаДанные Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "Row");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "SectionsNumber"   , СтрокаДанные.НомерРаздела);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Cost"             , СтрокаДанные.ТаможеннаяСтоимость);
		УстановитьЗначениеXDTO(СтрокаXDTO, "TaxAmount"        , СтрокаДанные.СуммаПошлины);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountVat"        , СтрокаДанные.СуммаНДС);
		УстановитьЗначениеXDTO(СтрокаXDTO, "DutyRate"         , СтрокаДанные.СтавкаПошлины);
		УстановитьЗначениеXDTO(СтрокаXDTO, "VatRate"          , НаименованияСтавокНДС[СтрокаДанные.СтавкаНДС]);
		УстановитьЗначениеXDTO(СтрокаXDTO, "CountryOriginCode", КодыСтранПроисхождения[СтрокаДанные.СтранаПроисхождения]);
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// << 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Функция ПКО_ТаблицаРасшифровкаПлатежа_НаличныеБезналичныеДС(ДокументОбъект)
	
	ТаблицаДанные = ДокументОбъект.РасшифровкаПлатежа.Выгрузить();
	Если Не ТаблицаДанные.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(ДокументОбъект.Ссылка);
	
	ПоляГруппировки = Новый Массив;
	ПоляГруппировки.Добавить("ОбъектРасчетов");
	ПоляГруппировки.Добавить("СтавкаНДС");
	ПоляГруппировки.Добавить("ВалютаВзаиморасчетов");
	ПоляГруппировки.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ПоляСуммирования = Новый Массив;
	ПоляСуммирования.Добавить("Сумма");
	ПоляСуммирования.Добавить("СуммаНДС");
	ПоляСуммирования.Добавить("СуммаВзаиморасчетов");
	
	Если ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ПоляГруппировки.Добавить("Подразделение");
		ПоляГруппировки.Добавить("СтатьяДоходов");
	КонецЕсли;
	Если ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ПоляГруппировки.Добавить("Подразделение");
		ПоляГруппировки.Добавить("СтатьяРасходов");
		ПоляГруппировки.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
		ПоляГруппировки.Добавить("Комментарий");
	КонецЕсли;
	
	ТаблицаДанные.Свернуть(СтрСоединить(ПоляГруппировки, ","), СтрСоединить(ПоляСуммирования, ","));
	ОснованияОбъектовРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ТаблицаДанные.ВыгрузитьКолонку("ОбъектРасчетов"), "Объект");
	
	ОбъектXDTO = ПолучитьОбъектXDTO("PaymentDecryptionRowsObject");
	
	Для Каждого СтрокаДанные Из ТаблицаДанные Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "Row");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "Sum"          , СтрокаДанные.Сумма);
		УстановитьЗначениеXDTO(СтрокаXDTO, "SettlementSum", СтрокаДанные.СуммаВзаиморасчетов);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Currency"     , ПКО_Справочник_ВалютыСсылка(СтрокаДанные.ВалютаВзаиморасчетов));
		УстановитьЗначениеXDTO(СтрокаXDTO, "CashFlowItem" , ПКО_Справочник_СтатьиДвиженияДенежныхСредствСсылка(СтрокаДанные.СтатьяДвиженияДенежныхСредств));
		УстановитьЗначениеXDTO(СтрокаXDTO, "VatRate"      , Строка(СтрокаДанные.СтавкаНДС));
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountVat"    , СтрокаДанные.СуммаНДС);
		
		Если ЗначениеЗаполнено(ОснованияОбъектовРасчета[СтрокаДанные.ОбъектРасчетов])
			И ОбщегоНазначения.ЭтоДокумент(ОснованияОбъектовРасчета[СтрокаДанные.ОбъектРасчетов].Метаданные()) Тогда
			УстановитьЗначениеXDTO(СтрокаXDTO, "Document" , ПКО_ТипДокумента(ОснованияОбъектовРасчета[СтрокаДанные.ОбъектРасчетов]));
		КонецЕсли;
		
		Если ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			УстановитьЗначениеXDTO(СтрокаXDTO, "Subdivision" , ПКО_Справочник_ПодразделенияСсылка(СтрокаДанные.Подразделение));
			УстановитьЗначениеXDTO(СтрокаXDTO, "ItemOfIncome", ПКО_ПВХ_СтатьиДоходовСсылка(СтрокаДанные.СтатьяДоходов));
		КонецЕсли;
		
		Если ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			УстановитьЗначениеXDTO(СтрокаXDTO, "Subdivision"                , ПКО_Справочник_ПодразделенияСсылка(СтрокаДанные.Подразделение));
			УстановитьЗначениеXDTO(СтрокаXDTO, "ItemOfExpenditure"          , ПКО_ПВХ_СтатьиРасходовСсылка(СтрокаДанные.СтатьяРасходов));
			УстановитьЗначениеXDTO(СтрокаXDTO, "Comment"                    , СтрокаДанные.Комментарий);
			
			Если ЗначениеЗаполнено(СтрокаДанные.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
				УстановитьЗначениеXDTO(СтрокаXDTO, "MoneyExpenditureRequest", ПКО_ТипДокумента(СтрокаДанные.ЗаявкаНаРасходованиеДенежныхСредств));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции // >> 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296

// << 20.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Функция ПКО_ТаблицаТовары_ОтчетОРозничныхПродажах(МассивДокументов, РозничныеВозвраты = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ЭтоРозничныеВозвраты", РозничныеВозвраты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтавкиНДС.Наименование КАК СтавкаНДСНаименование,
	|	ВидыЗапасов.Количество КАК Количество,
	|	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
	|	ВидыЗапасов.СуммаСНДС КАК Сумма,
	|	ВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ врт_ДанныеДокументов
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ВидыЗапасов.СтавкаНДС = СтавкиНДС.Ссылка
	|ГДЕ
	|	&ЭтоРозничныеВозвраты = ЛОЖЬ
	|	И ВидыЗапасов.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтавкиНДС.Наименование,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Сумма,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ТаблицаТовары.СтавкаНДС = СтавкиНДС.Ссылка
	|ГДЕ
	|	&ЭтоРозничныеВозвраты = ИСТИНА
	|	И ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	И ТаблицаТовары.КР_НомерЗаказаИнтернетМагазина = """"
	|	И ТаблицаТовары.КоличествоУпаковок < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтавкиНДС.Наименование,
	|	ВидыЗапасов.КоличествоУпаковок,
	|	ВидыЗапасов.СуммаНДС,
	|	ВидыЗапасов.СуммаСНДС,
	|	ВидыЗапасов.ИдентификаторСтроки
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ВидыЗапасов.СтавкаНДС = СтавкиНДС.Ссылка
	|ГДЕ
	|	ВидыЗапасов.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтавкиНДС.Наименование,
	|	ВидыЗапасов.КоличествоУпаковок,
	|	ВидыЗапасов.СуммаНДС,
	|	ВидыЗапасов.СуммаСНДС,
	|	ВидыЗапасов.ИдентификаторСтроки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ВидыЗапасов.СтавкаНДС = СтавкиНДС.Ссылка
	|ГДЕ
	|	ВидыЗапасов.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// << 31.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2196 
	|ВЫБРАТЬ
	|	врт_ДанныеДокументов.СтавкаНДСНаименование КАК СтавкаНДСНаименование,
	|	врт_ДанныеДокументов.Количество КАК Количество,
	|	врт_ДанныеДокументов.СуммаНДС КАК СуммаНДС,
	|	врт_ДанныеДокументов.Сумма КАК Сумма,
	|	ЕСТЬNULL(СебестоимостьТоваров.СтоимостьРегл, 0) + ЕСТЬNULL(СебестоимостьТоваров.ДопРасходыРегл, 0) КАК Стоимость 
	|ПОМЕСТИТЬ ДанныеДетально
	|ИЗ
	|	врт_ДанныеДокументов КАК врт_ДанныеДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ПО врт_ДанныеДокументов.ИдентификаторСтроки = СебестоимостьТоваров.ИдентификаторСтроки
	|		И СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// >> 31.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2196
	|ВЫБРАТЬ
	|	Т.СтавкаНДСНаименование КАК СтавкаНДСНаименование,
	|	СУММА(Т.Количество) КАК Количество,
	|	СУММА(Т.СуммаНДС) КАК СуммаНДС,
	|	СУММА(Т.Сумма) КАК Сумма,
	|	СУММА(Т.Стоимость) КАК Стоимость
	|ИЗ
	|	ДанныеДетально КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.СтавкаНДСНаименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("GoodsRowsObject");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "Row");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "Quantity"  , Выборка.Количество);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Amount"    , Выборка.Сумма);
		УстановитьЗначениеXDTO(СтрокаXDTO, "VatRate"   , Выборка.СтавкаНДСНаименование);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountVat" , Выборка.СуммаНДС);
		УстановитьЗначениеXDTO(СтрокаXDTO, "AmountCost", Выборка.Стоимость);
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции // >> 20.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-296

// << 20.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Функция ПКО_ТаблицаОплатыВозвраты_ОтчетОРозничныхПродажах(ДокументОбъект)
	
	ХОПоступленияДС = Новый Массив;
	ХОПоступленияДС.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	ХОПоступленияДС.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТерминалСБП", КР_ДополнительныеНастройкиПовтИсп.Значение("СбпОплата"));
	Запрос.УстановитьПараметр("ТерминалПодели", КР_ДополнительныеНастройкиПовтИсп.Значение("Подели"));
	Запрос.УстановитьПараметр("ХОПоступленияДС", ХОПоступленияДС);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ врт_ОбъектыРасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Ссылка КАК Регистратор,
	|		ТаблицаДокумента.ОбъектРасчетов КАК ОбъектРасчетов
	|	ИЗ
	|		Документ.ВозвратТоваровОтКлиента КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.КР_РозничныйВозврат = &ОтчетОРозничныхПродажах
	|		И ТаблицаДокумента.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРасшифровкаПлатежа.Ссылка,
	|		ТаблицаРасшифровкаПлатежа.ОбъектРасчетов
	|	ИЗ
	|		Документ.ВозвратТоваровОтКлиента.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ТаблицаДокумента
	|			ПО ТаблицаРасшифровкаПлатежа.Ссылка = ТаблицаДокумента.Ссылка
	|	ГДЕ
	|		ТаблицаДокумента.КР_РозничныйВозврат = &ОтчетОРозничныхПродажах
	|		И ТаблицаДокумента.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка,
	|		ТаблицаТовары.ОбъектРасчетов
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|	ГДЕ
	|		ТаблицаДокумента.КР_РозничнаяПродажа = &ОтчетОРозничныхПродажах
	|		И ТаблицаДокумента.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.Ссылка,
	|		ТаблицаВидыЗапасов.ОбъектРасчетов
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|	ГДЕ
	|		ТаблицаДокумента.КР_РозничнаяПродажа = &ОтчетОРозничныхПродажах
	|		И ТаблицаДокумента.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРасшифровкаПлатежа.Ссылка,
	|		ТаблицаРасшифровкаПлатежа.ОбъектРасчетов
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|			ПО ТаблицаРасшифровкаПлатежа.Ссылка = ТаблицаДокумента.Ссылка
	|	ГДЕ
	|		ТаблицаДокумента.КР_РозничнаяПродажа = &ОтчетОРозничныхПродажах
	|		И ТаблицаДокумента.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЭтапыГрафикаОплаты.Ссылка,
	|		ТаблицаЭтапыГрафикаОплаты.ОбъектРасчетов
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ЭтапыГрафикаОплаты КАК ТаблицаЭтапыГрафикаОплаты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|			ПО ТаблицаЭтапыГрафикаОплаты.Ссылка = ТаблицаДокумента.Ссылка
	|	ГДЕ
	|		ТаблицаДокумента.КР_РозничнаяПродажа = &ОтчетОРозничныхПродажах
	|		И ТаблицаДокумента.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ECommerce КАК ECommerce,
	|	ВложенныйЗапрос.Payments КАК Payments,
	|	ВложенныйЗапрос.TypePayments КАК TypePayments,
	|	СУММА(ВложенныйЗапрос.Amount) КАК Amount
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК ECommerce,
	|		ВЫБОР
	|			КОГДА ДвиженияДС.ХозяйственнаяОперация В (&ХОПоступленияДС)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Payments,
	|		ВЫБОР
	|			КОГДА ДвиженияДС.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|				ТОГДА ""Cash""
	|			КОГДА НЕ ЭТСБП.Ссылка ЕСТЬ NULL
	|				ТОГДА ""SBP""
	|			КОГДА НЕ ЭТПодели.Ссылка ЕСТЬ NULL
	|				ТОГДА ""Podeli""
	|			ИНАЧЕ ""NonCash""
	|		КОНЕЦ КАК TypePayments,
	|		ДвиженияДС.СуммаОплаты КАК Amount
	|	ИЗ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияДС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭТСБП
	|			ПО (ЭТСБП.Ссылка = &ТерминалСБП)
	|				И ДвиженияДС.ДенежныеСредства = ЭТСБП.Владелец
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭТПодели
	|			ПО (ЭТПодели.Ссылка = &ТерминалПодели)
	|				И ДвиженияДС.ДенежныеСредства = ЭТПодели.Владелец
	|	ГДЕ
	|		ДвиженияДС.Регистратор = &ОтчетОРозничныхПродажах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИСТИНА,
	|		ВЫБОР
	|			КОГДА ДвиженияДС.ХозяйственнаяОперация В (&ХОПоступленияДС)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДС.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|				ТОГДА ""Cash""
	|			КОГДА НЕ ЭТСБП.Ссылка ЕСТЬ NULL
	|				ТОГДА ""SBP""
	|			КОГДА НЕ ЭТПодели.Ссылка ЕСТЬ NULL
	|				ТОГДА ""Podeli""
	|			ИНАЧЕ ""NonCash""
	|		КОНЕЦ,
	|		ДвиженияДС.СуммаОплаты
	|	ИЗ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияДС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭТСБП
	|			ПО (ЭТСБП.Ссылка = &ТерминалСБП)
	|				И ДвиженияДС.ДенежныеСредства = ЭТСБП.Владелец
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭТПодели
	|			ПО (ЭТПодели.Ссылка = &ТерминалПодели)
	|				И ДвиженияДС.ДенежныеСредства = ЭТПодели.Владелец
	|	ГДЕ
	|		ДвиженияДС.ОбъектРасчетов В
	|				(ВЫБРАТЬ
	|					Т.ОбъектРасчетов КАК ОбъектРасчетов
	|				ИЗ
	|					врт_ОбъектыРасчетов КАК Т)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Payments,
	|	ВложенныйЗапрос.ECommerce,
	|	ВложенныйЗапрос.TypePayments";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("PaymentsAndReturnsRowsObject");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "Row");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "ECommerce"   , Выборка.ECommerce);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Payments"    , Выборка.Payments);
		УстановитьЗначениеXDTO(СтрокаXDTO, "TypePayments", Выборка.TypePayments);
		УстановитьЗначениеXDTO(СтрокаXDTO, "Amount"      , Выборка.Amount);
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// << 27.11.2023 Петухов А.В., Фактор, #3299
Функция ПКО_ТаблицаМаршрут(ДокументОбъект)
	
	Если ДокументОбъект.Маршрут.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = ПолучитьОбъектXDTO("RouteListObject");
	
	Для Каждого СтрокаДанные Из ДокументОбъект.Маршрут Цикл
		СтрокаXDTO = НовыйДочернийОбъектXDTO(ОбъектXDTO, "RouteListRow");
		
		УстановитьЗначениеXDTO(СтрокаXDTO, "Driver", ПКО_Справочник_ФизическиеЛицаВодителиСсылка(СтрокаДанные.КР_Водитель));
		УстановитьЗначениеXDTO(СтрокаXDTO, "Vehicle", ПКО_Справочник_ТранспортныеСредстваСсылка(СтрокаДанные.КР_ТранспортноеСредство));
		УстановитьЗначениеXDTO(СтрокаXDTO, "Warehouse", ПКО_Справочник_СкладыСсылка(СтрокаДанные.КР_ПолучательОтправитель));
		СтрокаXDTO.Address = СокрЛП(СтрокаДанные.Адрес);
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции
// >> 27.11.2023 Петухов А.В., Фактор, #3299

// << 28.08.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-2238
Функция ПКО_СуммаПродажВозвратовИнтернетМагазина(ДокументОбъект)
	
	Результат = Новый Структура("СуммаПродаж, СуммаВозвратов");
	
	ТипЗнчДокумент = ТипЗнч(ДокументОбъект.Ссылка);
	ХозОперации = Перечисления.ХозяйственныеОперации;
	
	Если ТипЗнчДокумент = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") И Не ДокументОбъект.ХозяйственнаяОперация = ХозОперации.ПоступлениеДенежныхСредствИзКассыККМ
		Или ТипЗнчДокумент = Тип("ДокументСсылка.РасходныйКассовыйОрдер") И Не ДокументОбъект.ХозяйственнаяОперация = ХозОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		Возврат Результат; // A2105505-1153 попутная ошибка
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДокументОбъект.Дата));
	Запрос.УстановитьПараметр("КонецПериода" , КонецДня(ДокументОбъект.Дата));
	Запрос.УстановитьПараметр("КассаККМ"     , ДокументОбъект.КассаККМ);
	Запрос.Текст =
	// << 04.09.2023, Фомичев А.Е., КРОК 
	"ВЫБРАТЬ
	|	РозничныеПродажи.НомерСтроки КАК НомерСтроки,
	|	РозничныеПродажи.КассаККМ КАК КассаККМ,
	|	РозничныеПродажи.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ втРозничныеПродажи
	|ИЗ
	|	РегистрНакопления.КР_РозничныеПродажи.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Авто,
	|			КассаККМ = &КассаККМ
	|				И НЕ НомерЗаказаИнтернетМагазина = """""""") КАК РозничныеПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеОплатыБезналичные.НомерСтроки КАК НомерСтроки,
	|	РозничныеОплатыБезналичные.КассаККМ КАК КассаККМ,
	|	РозничныеОплатыБезналичные.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ втРозничныеОплатыБезналичные
	|ИЗ
	|	РегистрНакопления.КР_РозничныеОплатыБезналичные.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Авто,
	|			КассаККМ = &КассаККМ
	|				И НЕ НомерЗаказаИнтернетМагазина = """""""") КАК РозничныеОплатыБезналичные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРозничныеПродажи.КассаККМ КАК КассаККМ,
	|	ВЫБОР
	|		КОГДА втРозничныеПродажи.Сумма > 0
	|			ТОГДА втРозничныеПродажи.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПродаж,
	|	ВЫБОР
	|		КОГДА втРозничныеПродажи.Сумма < 0
	|			ТОГДА -втРозничныеПродажи.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВозвратов
	|ПОМЕСТИТЬ втДанныеПродаж
	|ИЗ
	|	втРозничныеПродажи КАК втРозничныеПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втРозничныеОплатыБезналичные.КассаККМ,
	|	ВЫБОР
	|		КОГДА втРозничныеОплатыБезналичные.Сумма > 0
	|			ТОГДА -втРозничныеОплатыБезналичные.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втРозничныеОплатыБезналичные.Сумма < 0
	|			ТОГДА втРозничныеОплатыБезналичные.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	втРозничныеОплатыБезналичные КАК втРозничныеОплатыБезналичные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.КассаККМ КАК КассаККМ,
	|	ВЫБОР
	|		КОГДА СУММА(ВременнаяТаблица.СуммаПродаж) > СУММА(ВременнаяТаблица.СуммаВозвратов)
	|			ТОГДА СУММА(ВременнаяТаблица.СуммаПродаж) - СУММА(ВременнаяТаблица.СуммаВозвратов)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПродаж,
	|	ВЫБОР
	|		КОГДА СУММА(ВременнаяТаблица.СуммаВозвратов) > СУММА(ВременнаяТаблица.СуммаПродаж)
	|			ТОГДА СУММА(ВременнаяТаблица.СуммаВозвратов) - СУММА(ВременнаяТаблица.СуммаПродаж)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВозвратов
	|ИЗ
	|	втДанныеПродаж КАК ВременнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблица.КассаККМ";
	// >> 04.09.2023, Фомичев А.Е., КРОК 
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // >> 28.08.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-2238

#КонецОбласти

#КонецОбласти

#Область Алгоритмы

Функция ДанныеРегистраСебестоимости(Регистратор, ЭтоПоступление = Ложь, УчетЗабаланса = Ложь)
	
	СтруктураВозврата = Новый Структура("Ссылка, Количество, Цена, Стоимость");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ВидДвижения",
		?(ЭтоПоступление, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход));
	Запрос.УстановитьПараметр("УчитыватьЗабаланс", УчетЗабаланса);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.Стоимость / ВложенныйЗапрос.Количество
	|	КОНЕЦ КАК Цена,
	|	ВложенныйЗапрос.Стоимость КАК Стоимость
	|ИЗ
	|	(ВЫБРАТЬ
	|		СебестоимостьТоваров.Регистратор КАК Ссылка,
	|		СУММА(СебестоимостьТоваров.Количество) КАК Количество,
	|		СУММА(СебестоимостьТоваров.СтоимостьРегл + СебестоимостьТоваров.ДопРасходыРегл + ВЫБОР
	|				КОГДА &УчитыватьЗабаланс
	|					ТОГДА СебестоимостьТоваров.СтоимостьЗабалансоваяРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Стоимость
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|	ГДЕ
	|		СебестоимостьТоваров.Регистратор = &Регистратор
	|		И СебестоимостьТоваров.ВидДвижения = &ВидДвижения
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СебестоимостьТоваров.Регистратор) КАК ВложенныйЗапрос";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// << 20.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Функция ДанныеРегистраСебестоимости_ОтчетОРозничныхПродажах(Регистратор)
	
	СтруктураВозврата = Новый Структура("Ссылка, Количество, Цена, Стоимость", Регистратор, 0, 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", Регистратор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ОтчетОРозничныхПродажах КАК Регистратор
	|ПОМЕСТИТЬ врт_РегистраторыСебестоимости
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиента.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|ГДЕ
	|	ВозвратТоваровОтКлиента.КР_РозничныйВозврат = &ОтчетОРозничныхПродажах
	|	И ВозвратТоваровОтКлиента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.КР_РозничнаяПродажа = &ОтчетОРозничныхПродажах
	|	И РеализацияТоваровУслуг.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	СУММА(ВложенныйЗапрос.Стоимость) КАК Стоимость,
	|	СУММА(ВЫБОР
	|			КОГДА ВложенныйЗапрос.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВложенныйЗапрос.Стоимость / ВложенныйЗапрос.Количество
	|		КОНЕЦ) КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		СебестоимостьТоваров.Регистратор КАК Регистратор,
	|		СебестоимостьТоваров.Количество КАК Количество,
	|		СебестоимостьТоваров.СтоимостьРегл + СебестоимостьТоваров.ДопРасходыРегл КАК Стоимость
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|	ГДЕ
	|		СебестоимостьТоваров.Регистратор В
	|				(ВЫБРАТЬ
	|					Т.Регистратор КАК Регистратор
	|				ИЗ
	|					врт_РегистраторыСебестоимости КАК Т)
	|		И СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ВложенныйЗапрос";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции // >> 20.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-296

// << 20.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Функция ОтчетОРозничныхПродажах_СвязанныеРеализацииВозвраты(ОтчетОРозничныхПродажах, ИмяТаблицы, КлючСвязи)
	
	Результат = Новый Массив;
	
	ТекстЗапроса = СтрШаблон(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.%1 КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.%2 = &ОтчетОРозничныхПродажах
	|	И ТаблицаДокумента.Проведен", ИмяТаблицы, КлючСвязи);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// << 06.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Процедура ЗаполнитьСуммыОплатОРП(Регистратор, ОбъектXDTO)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ЭквайрингОплата",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			КР_ДополнительныеНастройкиПовтИсп.Значение("ЭквайрингОплата"), "Владелец"));
	Запрос.УстановитьПараметр("СБПОплата",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			КР_ДополнительныеНастройкиПовтИсп.Значение("СбпОплата"), "Владелец"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагент.Регистратор КАК Регистратор,
	|	ДвиженияДенежныеСредстваКонтрагент.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДвиженияДенежныеСредстваКонтрагент.ДенежныеСредства КАК ДенежныеСредства,
	|	ДвиженияДенежныеСредстваКонтрагент.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ДвиженияДенежныеСредстваКонтрагент.СуммаОплаты КАК СуммаОплаты
	|ПОМЕСТИТЬ врт_ДДС
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияДенежныеСредстваКонтрагент
	|ГДЕ
	|	ДвиженияДенежныеСредстваКонтрагент.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	СУММА(ВложенныйЗапрос.СуммаОплатыБезналичные) КАК СуммаОплатыБезналичные,
	|	СУММА(ВложенныйЗапрос.СуммаВозвратаБезналичные) КАК СуммаВозвратаБезналичные,
	|	СУММА(ВложенныйЗапрос.СуммаОплатыСБП) КАК СуммаОплатыСБП,
	|	СУММА(ВложенныйЗапрос.СуммаВозвратаСБП) КАК СуммаВозвратаСБП,
	|	СУММА(ВложенныйЗапрос.СуммаОплатыНаличные) КАК СуммаОплатыНаличные,
	|	СУММА(ВложенныйЗапрос.СуммаВозвратаНаличные) КАК СуммаВозвратаНаличные
	|ИЗ
	|	(ВЫБРАТЬ
	|		врт_ДДС.Регистратор КАК Регистратор,
	|		врт_ДДС.СуммаОплаты КАК СуммаОплатыБезналичные,
	|		0 КАК СуммаВозвратаБезналичные,
	|		0 КАК СуммаОплатыСБП,
	|		0 КАК СуммаВозвратаСБП,
	|		0 КАК СуммаОплатыНаличные,
	|		0 КАК СуммаВозвратаНаличные
	|	ИЗ
	|		врт_ДДС КАК врт_ДДС
	|	ГДЕ
	|		врт_ДДС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте)
	|		И врт_ДДС.ДенежныеСредства = &ЭквайрингОплата
	|		И НЕ врт_ДДС.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		врт_ДДС.Регистратор,
	|		0,
	|		врт_ДДС.СуммаОплаты,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		врт_ДДС КАК врт_ДДС
	|	ГДЕ
	|		врт_ДДС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту)
	|		И врт_ДДС.ДенежныеСредства = &ЭквайрингОплата
	|		И НЕ врт_ДДС.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		врт_ДДС.Регистратор,
	|		0,
	|		0,
	|		врт_ДДС.СуммаОплаты,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		врт_ДДС КАК врт_ДДС
	|	ГДЕ
	|		врт_ДДС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте)
	|		И врт_ДДС.ДенежныеСредства = &СБПОплата
	|		И НЕ врт_ДДС.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		врт_ДДС.Регистратор,
	|		0,
	|		0,
	|		0,
	|		врт_ДДС.СуммаОплаты,
	|		0,
	|		0
	|	ИЗ
	|		врт_ДДС КАК врт_ДДС
	|	ГДЕ
	|		врт_ДДС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту)
	|		И врт_ДДС.ДенежныеСредства = &СБПОплата
	|		И НЕ врт_ДДС.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		врт_ДДС.Регистратор,
	|		0,
	|		0,
	|		0,
	|		0,
	|		врт_ДДС.СуммаОплаты,
	|		0
	|	ИЗ
	|		врт_ДДС КАК врт_ДДС
	|	ГДЕ
	|		врт_ДДС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И врт_ДДС.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		врт_ДДС.Регистратор,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		врт_ДДС.СуммаОплаты
	|	ИЗ
	|		врт_ДДС КАК врт_ДДС
	|	ГДЕ
	|		врт_ДДС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|		И врт_ДДС.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, "NonCashPayments", Выборка.СуммаОплатыБезналичные);
		УстановитьЗначениеXDTO(ОбъектXDTO, "NonCashReturns" , Выборка.СуммаВозвратаБезналичные);
		УстановитьЗначениеXDTO(ОбъектXDTO, "SBPPayments"    , Выборка.СуммаОплатыСБП);
		УстановитьЗначениеXDTO(ОбъектXDTO, "SBPReturns"     , Выборка.СуммаВозвратаСБП);
		УстановитьЗначениеXDTO(ОбъектXDTO, "CashPayments"   , Выборка.СуммаОплатыНаличные);
		УстановитьЗначениеXDTO(ОбъектXDTO, "CashReturns"    , Выборка.СуммаВозвратаНаличные);
	КонецЕсли;
	
КонецПроцедуры // >> 06.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296

// << 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ЗаполнитьДанныеСчетаФактуры_ПриобретениеУслугПрочихАктивов(ДокументОбъект, ОбъектXDTO)
	
	ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурПолученных();
	ПараметрыРегистрации.Ссылка = ДокументОбъект.Ссылка;
	ПараметрыРегистрации.Дата = ДокументОбъект.Дата;
	ПараметрыРегистрации.Организация = ДокументОбъект.Организация;
	ПараметрыРегистрации.Контрагент = ДокументОбъект.Контрагент;
	ПараметрыРегистрации.НалогообложениеНДС = ДокументОбъект.НалогообложениеНДС;
	ПараметрыРегистрации.ПриобретениеТоваровРаботУслуг = Истина;
	
	СчетаФактурыПолученныеНаОсновании = УчетНДСУП.СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрации);
	
	Если СчетаФактурыПолученныеНаОсновании.СчетаФактуры.Количество() Тогда
		РеквизитыСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетаФактурыПолученныеНаОсновании.СчетаФактуры[0], "Номер, Дата");
		
		УстановитьЗначениеXDTO(ОбъектXDTO, "InvoiceNum" , РеквизитыСФ.Номер);
		УстановитьЗначениеXDTO(ОбъектXDTO, "InvoiceDate", РеквизитыСФ.Дата);
	КонецЕсли;
	
КонецПроцедуры // >> 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ДополнитьТаблицуТовары_ПоступлениеТоваровНаСклад(Регистратор, ТаблицаТовары)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ врт_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	СУММА(СебестоимостьТоваров.Количество) КАК Количество,
	|	СУММА(СебестоимостьТоваров.СтоимостьРегл + СебестоимостьТоваров.ДопРасходыРегл) КАК Стоимость
	|ПОМЕСТИТЬ врт_СебестоимостьТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Регистратор = &Регистратор
	|	И СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(спр_Номенклатура.КоллекцияНоменклатуры, ЗНАЧЕНИЕ(Справочник.КоллекцииНоменклатуры.ПустаяСсылка)) КАК КоллекцияНоменклатуры,
	|	ЕСТЬNULL(спр_СтавкиНДС.Наименование, """") КАК СтавкаНДСНаименование,
	|	врт_ТаблицаТовары.Цена КАК Цена,
	|	СУММА(врт_ТаблицаТовары.Сумма) КАК Сумма,
	|	СУММА(врт_ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(врт_ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЕСТЬNULL(врт_СебестоимостьТоваров.Стоимость, 0)) КАК Стоимость
	|ИЗ
	|	врт_ТаблицаТовары КАК врт_ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_СебестоимостьТоваров КАК врт_СебестоимостьТоваров
	|		ПО врт_ТаблицаТовары.АналитикаУчетаНоменклатуры = врт_СебестоимостьТоваров.АналитикаУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спр_Номенклатура
	|		ПО врт_ТаблицаТовары.Номенклатура = спр_Номенклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК спр_СтавкиНДС
	|		ПО врт_ТаблицаТовары.СтавкаНДС = спр_СтавкиНДС.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_ТаблицаТовары.Цена,
	|	ЕСТЬNULL(спр_Номенклатура.КоллекцияНоменклатуры, ЗНАЧЕНИЕ(Справочник.КоллекцииНоменклатуры.ПустаяСсылка)),
	|	ЕСТЬNULL(спр_СтавкиНДС.Наименование, """")";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // >> 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Процедура ДополнитьТаблицуТовары_ПриобретениеТоваровУслуг(Регистратор, ТаблицаТовары)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.КоличествоПоРНПТ КАК КоличествоПоРНПТ,
	|	ТаблицаТовары.ЗаказПоставщику КАК ЗаказПоставщику
	|ПОМЕСТИТЬ врт_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	СУММА(СебестоимостьТоваров.Количество) КАК Количество,
	|	СУММА(СебестоимостьТоваров.СтоимостьРегл + СебестоимостьТоваров.ДопРасходыРегл) КАК Стоимость
	|ПОМЕСТИТЬ врт_СебестоимостьТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Регистратор = &Регистратор
	|	И СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЕСТЬNULL(док_ЗаказПоставщику.НомерПоДаннымПоставщика, """") КАК СТРОКА(3)) КАК Лот,
	|	ЕСТЬNULL(спр_НомераГТД.РегистрационныйНомер, """") КАК НомерГТДРегистрационныйНомер,
	|	ЕСТЬNULL(спр_СтавкиНДС.Наименование, """") КАК СтавкаНДСНаименование,
	|	СРЕДНЕЕ(врт_ТаблицаТовары.Цена) КАК Цена,
	|	СУММА(врт_ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(врт_ТаблицаТовары.Сумма) КАК Сумма,
	|	СУММА(врт_ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(врт_ТаблицаТовары.КоличествоПоРНПТ) КАК КоличествоПоРНПТ,
	|	СУММА(ЕСТЬNULL(врт_СебестоимостьТоваров.Стоимость, 0)) КАК Стоимость
	|ИЗ
	|	врт_ТаблицаТовары КАК врт_ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_СебестоимостьТоваров КАК врт_СебестоимостьТоваров
	|		ПО врт_ТаблицаТовары.АналитикаУчетаНоменклатуры = врт_СебестоимостьТоваров.АналитикаУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК спр_СтавкиНДС
	|		ПО врт_ТаблицаТовары.СтавкаНДС = спр_СтавкиНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК спр_НомераГТД
	|		ПО врт_ТаблицаТовары.НомерГТД = спр_НомераГТД.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК док_ЗаказПоставщику
	|		ПО врт_ТаблицаТовары.ЗаказПоставщику = док_ЗаказПоставщику.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(спр_НомераГТД.РегистрационныйНомер, """"),
	|	ЕСТЬNULL(спр_СтавкиНДС.Наименование, """"),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(док_ЗаказПоставщику.НомерПоДаннымПоставщика, """") КАК СТРОКА(3))";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // >> 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678

// << 13.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-678
Функция ПолучитьДанныеАвансов_ПриобретениеТоваровУслуг(Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ врт_ОбъектыРасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ГДЕ
	|		РасшифровкаПлатежа.Ссылка = &Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭтапыГрафикаОплаты.ОбъектРасчетов
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|	ГДЕ
	|		ЭтапыГрафикаОплаты.Ссылка = &Регистратор) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ОбъектыРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
	|	док_ЗаказПоставщику.Ссылка ЕСТЬ NULL КАК ЕстьОшибкаЛот,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(док_ЗаказПоставщику.НомерПоДаннымПоставщика, """") КАК СТРОКА(3)) КАК Лот
	|ПОМЕСТИТЬ врт_Лоты
	|ИЗ
	|	врт_ОбъектыРасчетов КАК врт_ОбъектыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК спр_ОбъектыРасчетов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК док_ЗаказПоставщику
	|			ПО спр_ОбъектыРасчетов.Ссылка = док_ЗаказПоставщику.ОбъектРасчетов
	|		ПО врт_ОбъектыРасчетов.ОбъектРасчетов = спр_ОбъектыРасчетов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Регистратор КАК Взаимозачет
	|ПОМЕСТИТЬ врт_Взаимозачеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.ОбъектРасчетов В
	|			(ВЫБРАТЬ
	|				Т.ОбъектРасчетов
	|			ИЗ
	|				врт_Лоты КАК Т
	|			ГДЕ
	|				НЕ Т.ЕстьОшибкаЛот)
	|	И РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_Взаимозачеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	док_СписаниеБезналичныхДС.Валюта КАК ВалютаАванса,
	|	док_СписаниеБезналичныхДС.НомерВходящегоДокумента КАК НомерАванса,
	|	док_СписаниеБезналичныхДС.ДатаВходящегоДокумента КАК ДатаАванса,
	|	рн_РасчетыСПоставщиками.Сумма КАК СуммаАванса
	|ПОМЕСТИТЬ врт_Авансы
	|ИЗ
	|	врт_Взаимозачеты КАК врт_Взаимозачеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК рн_РасчетыСПоставщиками
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК спр_ОбъектыРасчетов
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК док_СписаниеБезналичныхДС
	|				ПО спр_ОбъектыРасчетов.Объект = док_СписаниеБезналичныхДС.Ссылка
	|			ПО рн_РасчетыСПоставщиками.ОбъектРасчетов = спр_ОбъектыРасчетов.Ссылка
	|		ПО врт_Взаимозачеты.Взаимозачет = рн_РасчетыСПоставщиками.Регистратор
	|ГДЕ
	|	НЕ док_СписаниеБезналичныхДС.Ссылка ЕСТЬ NULL
	|	И НАЧАЛОПЕРИОДА(рн_РасчетыСПоставщиками.Период, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(&Регистратор КАК Документ.ПриобретениеТоваровУслуг).Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_Лоты.Лот КАК Лот,
	|	врт_Лоты.ЕстьОшибкаЛот КАК ЕстьОшибкаЛот,
	|	ЕСТЬNULL(врт_Авансы.ВалютаАванса, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаАванса,
	|	ЕСТЬNULL(врт_Авансы.НомерАванса, """") КАК НомерАванса,
	|	ЕСТЬNULL(врт_Авансы.ДатаАванса, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаАванса,
	|	СУММА(-ЕСТЬNULL(врт_Авансы.СуммаАванса, 0)) КАК СуммаАванса
	|ИЗ
	|	врт_Лоты КАК врт_Лоты
	|		ЛЕВОЕ СОЕДИНЕНИЕ врт_Авансы КАК врт_Авансы
	|		ПО врт_Лоты.ОбъектРасчетов = врт_Авансы.ОбъектРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_Лоты.Лот,
	|	врт_Лоты.ЕстьОшибкаЛот,
	|	ЕСТЬNULL(врт_Авансы.НомерАванса, """"),
	|	ЕСТЬNULL(врт_Авансы.ДатаАванса, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(врт_Авансы.ВалютаАванса, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(-ЕСТЬNULL(врт_Авансы.СуммаАванса, 0)) = 0";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДополнитьТаблицуТовары_ТаможеннаяДекларацияИмпорт(ТаблицаТовары)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерРаздела КАК НомерРаздела,
	|	ТаблицаТовары.ДокументПоступления КАК ДокументПоступления,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.СуммаПошлины КАК СуммаПошлины,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ врт_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врт_ТаблицаТовары.НомерРаздела КАК НомерРаздела,
	|	ЕСТЬNULL(спр_Номенклатура.КоллекцияНоменклатуры, ЗНАЧЕНИЕ(Справочник.КоллекцииНоменклатуры.ПустаяСсылка)) КАК КоллекцияНоменклатуры,
	|	СУММА(врт_ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	врт_ТаблицаТовары.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
	|	ЕСТЬNULL(спр_СтавкиНДС.Наименование, """") КАК СтавкаНДСНаименование,
	|	СУММА(врт_ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(врт_ТаблицаТовары.СуммаПошлины) КАК СуммаПошлины,
	|	ЕСТЬNULL(док_ПриобретениеТоваровУслуг.Номер, """") КАК ДокументПоступленияНомер,
	|	ЕСТЬNULL(док_ПриобретениеТоваровУслуг.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументПоступленияДата,
	|	ЕСТЬNULL(спр_СтраныМира.Код, """") КАК СтранаПроисхожденияКод
	|ИЗ
	|	врт_ТаблицаТовары КАК врт_ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК спр_СтавкиНДС
	|		ПО врт_ТаблицаТовары.СтавкаНДС = спр_СтавкиНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спр_Номенклатура
	|		ПО врт_ТаблицаТовары.Номенклатура = спр_Номенклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК спр_СтраныМира
	|		ПО врт_ТаблицаТовары.СтранаПроисхождения = спр_СтраныМира.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК док_ПриобретениеТоваровУслуг
	|		ПО врт_ТаблицаТовары.ДокументПоступления = док_ПриобретениеТоваровУслуг.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	врт_ТаблицаТовары.НомерРаздела,
	|	врт_ТаблицаТовары.ТаможеннаяСтоимость,
	|	ЕСТЬNULL(спр_Номенклатура.КоллекцияНоменклатуры, ЗНАЧЕНИЕ(Справочник.КоллекцииНоменклатуры.ПустаяСсылка)),
	|	ЕСТЬNULL(спр_СтавкиНДС.Наименование, """"),
	|	ЕСТЬNULL(док_ПриобретениеТоваровУслуг.Номер, """"),
	|	ЕСТЬNULL(док_ПриобретениеТоваровУслуг.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(спр_СтраныМира.Код, """")";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// << 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296
Функция ТипПлатежаБезналичнойОплаты(ДоговорЭквайринга)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭквайринга);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(спр_ДополнительныеНастройкиСистемы.Наименование, """") КАК ТипПлатежа
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК спр_ЭквайринговыеТерминалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КР_ДополнительныеНастройкиСистемы КАК спр_ДополнительныеНастройкиСистемы
	|		ПО (спр_ЭквайринговыеТерминалы.Ссылка = (ВЫРАЗИТЬ(спр_ДополнительныеНастройкиСистемы.Значение КАК Справочник.ЭквайринговыеТерминалы)))
	|ГДЕ
	|	спр_ЭквайринговыеТерминалы.Владелец = &ДоговорЭквайринга";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ТипПлатежа;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // >> 30.11.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-296

Функция ТипДанныхПоХО_ВозвратТоваровОтКлиента(ХозяйственнаяОперация)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента Тогда
		ТипДанных = "ReturnGoodsFromCustomerObject";
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионера Тогда
		ТипДанных = "CommissionerSalesReportObject";
	Иначе
		ТипДанных = "";
	КонецЕсли;
	
	Возврат ТипДанных;
	
КонецФункции

Функция ТипДанныхПоХО_РеализацияТоваровУслуг(ХозяйственнаяОперация)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		ТипДанных = "RealizationObject";
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера Тогда
		ТипДанных = "CommissionerSalesReportObject";
	Иначе
		ТипДанных = "";
	КонецЕсли;
	
	Возврат ТипДанных;
	
КонецФункции

// << 20.06.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1801
Функция ДокументРеализацииВозвратаТоваров(ТаблицаТовары)
	
	НачальнаяДата = Дата("00010101");
	ДокументРеализации = Неопределено;
	
	ДокументыРеализаций = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТовары, "ДокументРеализации", Истина);
	
	ПустойДокумент = ДокументыРеализаций.Найти(Неопределено);
	Если Не ПустойДокумент = Неопределено Тогда
		ДокументыРеализаций.Удалить(ПустойДокумент);
	КонецЕсли;
	
	Если ДокументыРеализаций.Количество() Тогда // A2105505-2180 правка ошибки 
		ДатыРеализаций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыРеализаций, "Дата");
		Для Каждого КлючИЗначение Из ДатыРеализаций Цикл
			Если КлючИЗначение.Значение > НачальнаяДата Тогда
				НачальнаяДата = КлючИЗначение.Значение;
				ДокументРеализации = КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДокументРеализации;
	
КонецФункции // >> 20.06.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1801

#КонецОбласти

#КонецОбласти
