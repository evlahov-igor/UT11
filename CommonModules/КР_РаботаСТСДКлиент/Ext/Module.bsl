//////////////////////////////////////////////////////////////////////////////////
//// Общий модуль "КР_РаботаСТСДКлиент"
//// Создан: 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1260
//// Разработка по ФДР С31.013, Загрузка номенклатуры через ТСД

#Область ПрограммныйИнтерфейс

// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1260
&НаКлиенте
Функция ОбработатьШтрихкодыСЯчейками(ДанныеШтрихкодов, Склад, КР_Отказ) Экспорт
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Структура") Тогда
		// Значит идет обработка команды работы с конкретным штрихкодом,
		// вмешательство в такой режим работы не требуется
		Возврат Неопределено;
	КонецЕсли;
	
	ДаннныеТСДДляРежимаОтладки = КР_РаботаСТСД.ПолучитьДаннныеТСДДляРежимаОтладки();
	Если ДаннныеТСДДляРежимаОтладки <> Неопределено Тогда
		// Подменим пакет данных, данными для отладки
		ДанныеШтрихкодов = ДаннныеТСДДляРежимаОтладки;
	КонецЕсли;
	ДанныеОЯчейках = КР_РаботаСТСД.ОбработатьТаблицуДанныхШтрихкодовСУчетомЯчеек(ДанныеШтрихкодов, Склад, КР_Отказ);
	Возврат ДанныеОЯчейках;
	
КонецФункции // >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1260

// << 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1260
&НаКлиенте
Процедура ОбработатьДанныеЯчеек(ДанныеЯчеек, ТабличнаяЧасть, КэшированныеЗначения, СтруктураПараметров = Неопределено) Экспорт

	// Доработки 18.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2402
	
	Если Не ЗначениеЗаполнено(ДанныеЯчеек) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЯчейки Из ДанныеЯчеек Цикл
		
		МассивШтрихкодов 					= СтрокаЯчейки.Значение;
		Если МассивШтрихкодов.Количество() = 0 Тогда
			
			СтруктураПоиска 				= Новый Структура;
			СтруктураПоиска.Вставить("Ячейка", СтрокаЯчейки.Ключ);
			СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			
			МассивСтрокТаблицы 			= ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрокТаблицы.Количество() = 0 Тогда
				НоваяСтрока 					= ТабличнаяЧасть.Добавить();
				НоваяСтрока.Ячейка 				= СтрокаЯчейки.Ключ;
			КонецЕсли;
		Иначе
			
			// Свернем строки для корректной работы алгоритмов
			МассивШтрихкодов = СвернутьДанные(МассивШтрихкодов);   
			Для Каждого ДанныеПоНоменклатуре Из МассивШтрихкодов Цикл

				СтруктураПоиска       = Новый Структура;
				ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды[ДанныеПоНоменклатуре.Штрихкод];  
				СтруктураПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);				
				
				МассивСтрокТаблицы 			= ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрокТаблицы.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				ОбработатьДанныеЯчеекДляПорцииДанных(ДанныеПоНоменклатуре, СтрокаЯчейки.Ключ, МассивСтрокТаблицы, ТабличнаяЧасть,
					СтруктураПараметров);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // >> 22.03.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1260

#КонецОбласти

#Область СлужебныеПроцедурыФункции

// << 14.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1783
Процедура ОбработатьДанныеЯчеекДляПорцииДанных(ДанныеПоНоменклатуре, Ключ, МассивСтрокТаблицы, ТабличнаяЧасть,
	СтруктураПараметров)
	
	ЭтоДокументПересчетТоваров = Ложь;
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.Свойство("ЭтоПересчетТоваров", ЭтоДокументПересчетТоваров);
	КонецЕсли;
	Если ЭтоДокументПересчетТоваров Тогда
		ИмяКолонкиКоличество 			= "КоличествоФакт";
		ИмяКолонкиКоличествоУпаковок 	= "КоличествоУпаковокФакт";
	Иначе
		// Для документа "Отбор размещение товаров" и "Зональный пересчет товаров"
		ИмяКолонкиКоличество			= "Количество";
		ИмяКолонкиКоличествоУпаковок	= "КоличествоУпаковок";
	КонецЕсли;
	ТребуетсяПересчетОтклонения 		= ЭтоДокументПересчетТоваров;
	
	// 		Типовой механизм объединяет все строки с одним штрихкодом номенклатуры в одну строку,
	// при этом суммирую количество. Если такая строка уже была, то будет увеличено количество
	// первой найденной строки.
	// 		Чтобы корректно обрабортать добавление строк в разрезе ячеек, пересчитаем первую строку
	// и, в случае потребности, создадим новые копированием
	ПерваяСтрока = МассивСтрокТаблицы[0];
	Если ПерваяСтрока.Ячейка = Ключ Тогда
		Возврат;
	Иначе
		ПерваяСтрока[ИмяКолонкиКоличествоУпаковок]
			= ПерваяСтрока[ИмяКолонкиКоличествоУпаковок] - ДанныеПоНоменклатуре.Количество;
		ПерваяСтрока[ИмяКолонкиКоличество] 					= ПерваяСтрока[ИмяКолонкиКоличество] - ДанныеПоНоменклатуре.Количество;
		ПересчитатьОтклонение(ПерваяСтрока, ИмяКолонкиКоличествоУпаковок, ТребуетсяПересчетОтклонения);
	КонецЕсли;
	
	ДоступнаяСтрокаБезКороба	= Неопределено;
	ЭтоПерваяСтрока 			= Истина;
	ЕстьСтрокаСТекущейЯчейкой 	= Ложь;
	Для Каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Ячейка) Тогда
			ДоступнаяСтрокаБезКороба = СтрокаТаблицы;
		КонецЕсли;
		Если ЭтоПерваяСтрока Тогда
			ЭтоПерваяСтрока = Ложь;
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.Ячейка 	= Ключ Тогда
			ЕстьСтрокаСТекущейЯчейкой 			= Истина;
			СтрокаТаблицы[ИмяКолонкиКоличествоУпаковок] 	
				= СтрокаТаблицы[ИмяКолонкиКоличествоУпаковок] + ДанныеПоНоменклатуре.Количество;
			СтрокаТаблицы[ИмяКолонкиКоличество] 			= СтрокаТаблицы[ИмяКолонкиКоличество] + ДанныеПоНоменклатуре.Количество;
			ПересчитатьОтклонение(СтрокаТаблицы, ИмяКолонкиКоличествоУпаковок, ТребуетсяПересчетОтклонения);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьСтрокаСТекущейЯчейкой Тогда
		Если ДоступнаяСтрокаБезКороба <> Неопределено Тогда
			ДоступнаяСтрокаБезКороба.Ячейка = Ключ;
			ДоступнаяСтрокаБезКороба[ИмяКолонкиКоличествоУпаковок] 	= ДоступнаяСтрокаБезКороба[ИмяКолонкиКоличествоУпаковок]
				+ ДанныеПоНоменклатуре.Количество;
			ДоступнаяСтрокаБезКороба[ИмяКолонкиКоличество] 			= ДоступнаяСтрокаБезКороба[ИмяКолонкиКоличество]
				+ ДанныеПоНоменклатуре.Количество;
			ПересчитатьОтклонение(ДоступнаяСтрокаБезКороба, ИмяКолонкиКоличествоУпаковок, ТребуетсяПересчетОтклонения);
		Иначе
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяСтрока);
			Если ЭтоДокументПересчетТоваров Тогда
				НоваяСтрока["КоличествоУпаковок"] = 0;
			КонецЕсли;
			НоваяСтрока.Ячейка 				= Ключ;
			НоваяСтрока[ИмяКолонкиКоличествоУпаковок] 	= ДанныеПоНоменклатуре.Количество;
			НоваяСтрока[ИмяКолонкиКоличество] 			= ДанныеПоНоменклатуре.Количество;
			ПересчитатьОтклонение(НоваяСтрока, ИмяКолонкиКоличествоУпаковок, ТребуетсяПересчетОтклонения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // >> 14.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1783

// << 14.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1783
Процедура ПересчитатьОтклонение(Строка, ИмяКолонкиКоличествоУпаковок, ТребуетсяПересчетОтклонения)
	
	Если Не ТребуетсяПересчетОтклонения Тогда
		Возврат;
	КонецЕсли;
	
	Строка["КоличествоУпаковокОтклонение"] 	=  Строка[ИмяКолонкиКоличествоУпаковок] - Строка["КоличествоУпаковок"];
	Строка["Расхождение"] 					= (Строка["КоличествоУпаковокОтклонение"] = 0);
	
КонецПроцедуры

// << 14.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1783
Функция СвернутьДанные(МассивШтрихкодов)
	
	СоответствиеДляСвертки 		= Новый Соответствие;
	Для Каждого ЭлементДанных Из МассивШтрихкодов Цикл
		ЗначениеПоКлючу 		= СоответствиеДляСвертки.Получить(ЭлементДанных.Штрихкод);
		ТекущееЗначение		 	= Число(ЭлементДанных.Количество);
		Если ЗначениеПоКлючу = Неопределено Тогда
			СоответствиеДляСвертки.Вставить(ЭлементДанных.Штрихкод, ТекущееЗначение);
		Иначе
			СоответствиеДляСвертки[ЭлементДанных.Штрихкод]	= ЗначениеПоКлючу + ТекущееЗначение;
		КонецЕсли;
	КонецЦикла;

	СвернутыйМассивШтрихкодов 	= Новый Массив;
	Для Каждого ЭлементСоответствияДляСвертки Из СоответствиеДляСвертки Цикл
		СтруктураДанных 		= Новый Структура;
		СтруктураДанных.Вставить("Штрихкод", ЭлементСоответствияДляСвертки.Ключ);
		СтруктураДанных.Вставить("Количество", ЭлементСоответствияДляСвертки.Значение);
		СвернутыйМассивШтрихкодов.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат СвернутыйМассивШтрихкодов;
	
КонецФункции // >> 14.06.2023 Федоров Д.Е., КРОК, JIRA№A2105505-1783

#КонецОбласти