////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы ТМЦ в эксплуатации.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	ТипДокумента = ТипЗнч(Документ);
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;
	ТекстыЗапросов = Новый Соответствие();
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам взаиморасчетов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТМЦВЭксплуатации");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "НаработкиТМЦВЭксплуатации");
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТМЦВЭксплуатацииИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Превышен оперативный остаток в подразделении %1, на %2 %3'");
		ШаблонСообщенияФизЛицо = НСтр("ru = 'Превышен оперативный остаток в подразделении %1 (физ. лицо %2), на %3 %4'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиТМЦВЭксплуатации Цикл
			
			Строки = Новый Массив;
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура,
				СтрокаОшибки.Характеристика,,
				СтрокаОшибки.Серия);
			Строки.Добавить(СтрШаблон(НСтр("ru = 'Номенклатура: %1'"), ПредставлениеНоменклатуры));

			Если ЗначениеЗаполнено(СтрокаОшибки.ИнвентарныйНомер) Тогда
				Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Инв.№: %1'"), СокрЛП(СтрокаОшибки.ИнвентарныйНомер)));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОшибки.НаправлениеДеятельности) Тогда
				Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Направление деятельности: %1'"), СтрокаОшибки.НаправлениеДеятельности));
			КонецЕсли;

			Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Партия: %1'"), СтрокаОшибки.Партия));
				
			ТекстСообщения = СтрСоединить(Строки, НСтр("ru = ';'"));
			
			Если ЗначениеЗаполнено(СтрокаОшибки.ФизическоеЛицо) Тогда
				
				ТекстСообщения = 
					ТекстСообщения
					+ Символы.ПС
					+ СтрШаблон(ШаблонСообщенияФизЛицо, СтрокаОшибки.Подразделение, СтрокаОшибки.ФизическоеЛицо, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
					
			Иначе	
				
				ТекстСообщения = 
					ТекстСообщения
					+ Символы.ПС
					+ СтрШаблон(ШаблонСообщения, СтрокаОшибки.Подразделение, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
					
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект.ВнутреннееПотреблениеТоваров - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//  РежимЗаписи - РежимЗаписиДокумента - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
Процедура ВнутреннееПотреблениеТоваров_ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		Возврат;
	КонецЕсли;
	
	
	Справочники.ПартииТМЦВЭксплуатации.ЗаполнитьПартии(Объект, РежимЗаписи);
	
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт


	#Область ОстаткиТМЦВЭксплуатацииУТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТМЦВЭксплуатацииУТ);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("УправлениеТорговлей");
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ остатков ТМЦ в эксплуатации с действующим сроком эксплуатации.'");
	#КонецОбласти
	
КонецПроцедуры

// Определяет возможен ли учет серий в эксплуатации.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть учетная политика с включенным учетом серий в эксплуатации
Функция ВозможенУчетСерийВЭксплуатации() Экспорт
	
	ИспользоватьСерии = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	
	Если НЕ ИспользоватьСерии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСерииТМЦВЭксплуатации
	|	И НЕ ВидыНоменклатуры.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ТМЦВЭксплуатацииСервер.ИспользоватьТМЦВЭксплуатации_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.1.20";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4ef67970-2b74-4971-b50a-e3eaa3e9c099");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ТМЦВЭксплуатацииСервер.ИспользоватьТМЦВЭксплуатации_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает константу ""Использовать ТМЦ в эксплуатации""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьТМЦВЭксплуатации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьТМЦВЭксплуатации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

#Область УстановкаКонстанты_ИспользоватьТМЦВЭксплуатации

Процедура ИспользоватьТМЦВЭксплуатации_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьТМЦВЭксплуатации_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если НЕ Константы.ИспользоватьТМЦВЭксплуатации.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьТМЦВЭксплуатации.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
