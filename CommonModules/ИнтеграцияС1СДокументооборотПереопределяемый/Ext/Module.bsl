////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотПереопределяемый: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Переопределяет список команд печати. Вызывается из УправлениеПечатьюПереопределяемый и предназначена
// для дополнения команд печати листом согласования.
//
// Параметры:
//   ИмяФормы - Строка - имя вызывающей формы в виде ""Документ._ДемоЗаказПокупателя.Форма.ФормаДокумента"
//   КомандыПечати - ТаблицаЗначений - таблица команд к дополнению. Колонки см. в УправлениеПечатью.
//   СтандартнаяОбработка - Булево - Истина, если необходимо стандартное наполнение таблицы команд.
//
// Пример:
//	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.4.8.1") Тогда
//		Если ИмяФормы = "Документ._ДемоЗаказПокупателя.Форма.ФормаДокумента" Тогда
//			КомандаПечати = КомандыПечати.Добавить();
//			КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот";
//			КомандаПечати.Идентификатор = "ЛистСогласования";
//			КомандаПечати.Представление = НСтр("ru = 'Документооборот: лист согласования'");
//			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
//			КомандаПечати.Порядок = 2;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот") Тогда
		Если ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента"
				Или ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаСписка"
				Или ИмяФормы = "Документ.ЗаказКлиента.Форма.ФормаДокумента"
				Или ИмяФормы = "Документ.ЗаказКлиента.Форма.ФормаСписка"
				Или ИмяФормы = "Документ.ЗаказКлиента.Форма.ФормаСпискаДокументов"
				Или ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаДокумента"
				Или ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаСписка"
				Или ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаСпискаДокументов"
				Или ИмяФормы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаДокумента"
				Или ИмяФормы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаСписка"
				Или ИмяФормы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаСпискаДокументов"
				Или ИмяФормы = "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаДокумента"
				Или ИмяФормы = "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаСписка"
				Или ИмяФормы = "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаСпискаДокументов" Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот";
			КомандаПечати.Идентификатор = "ЛистСогласования";
			КомандаПечати.Представление = НСтр("ru = 'Документооборот: лист согласования'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
			КомандаПечати.Порядок = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - описание полей, см.
//     ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия              = "1.1.0.0";
//	Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//	Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПравилаИнтеграцииС1СДокументооборотом.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.4.11.64";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1184ae51-902e-4dd7-842e-fda8c0f2d3f3");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"Справочники.ПравилаИнтеграцииС1СДокументооборотом.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий =
		НСтр("ru = 'Установка режима изменения «Разрешено с перепроведением» для реквизита «Статус» заказов клиента.'");
	Обработчик.ЧитаемыеОбъекты = Метаданные.Справочники.ПравилаИнтеграцииС1СДокументооборотом.ПолноеИмя();
	Обработчик.ИзменяемыеОбъекты = Метаданные.Справочники.ПравилаИнтеграцииС1СДокументооборотом.ПолноеИмя();
	Обработчик.БлокируемыеОбъекты = Метаданные.Справочники.ПравилаИнтеграцииС1СДокументооборотом.ПолноеИмя();
	
КонецПроцедуры

// Регистрирует элементы справочника ПравилаИнтеграцииС1СДокументооборотом, которые необходимо обновить.
//
// Параметры:
//   Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьПравилаИнтеграцииКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ПравилаИнтеграцииС1СДокументооборотом";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаИнтеграцииС1СДокументооборотом.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом.ПравилаЗаполненияРеквизитовИС КАК ПравилаИнтеграцииС1СДокументооборотомПравилаЗаполненияРеквизитовИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК ПравилаИнтеграцииС1СДокументооборотом
		|		ПО ПравилаИнтеграцииС1СДокументооборотомПравилаЗаполненияРеквизитовИС.Ссылка = ПравилаИнтеграцииС1СДокументооборотом.Ссылка
		|ГДЕ
		|	ПравилаИнтеграцииС1СДокументооборотом.ТипОбъектаИС = ""Документ.ЗаказКлиента""
		|	И ПравилаИнтеграцииС1СДокументооборотомПравилаЗаполненияРеквизитовИС.ИмяРеквизитаОбъектаИС = ""Статус""
		|	И ПравилаИнтеграцииС1СДокументооборотомПравилаЗаполненияРеквизитовИС.РежимИзмененияДанныхПроведенногоДокумента = ЗНАЧЕНИЕ(Перечисление.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления справочника ПравилаИнтеграцииС1СДокументооборотом.
//
// Параметры:
//   Параметры - Структура - параметры.
//
Процедура ОбработатьПравилаИнтеграцииДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ПравилаИнтеграцииС1СДокументооборотом";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			Для Каждого Стр Из ДанныеОбъекта.ПравилаЗаполненияРеквизитовИС Цикл
				Если Стр.ИмяРеквизитаОбъектаИС = "Статус" И Стр.РежимИзмененияДанныхПроведенногоДокумента =
						Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения Тогда
					Стр.РежимИзмененияДанныхПроведенногоДокумента =
						Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением;
					ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать объект: %1 по причине: %2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь,
		ПолноеИмяОбъекта);
	
КонецПроцедуры

// Конец ОбновлениеИнформационнойБазы

#КонецОбласти

#Область ПрисоединенныеФайлы

// Устанавливает признак наличия присоединенных файлов ДО для объекта ИС. Вызывается при добавлении
// связи с объектом ДО, имеющим файлы, при добавлении файла из интерфейса ИС и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриПоявленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Снимает признак наличия присоединенных файлов для объекта ИС, если их нет в самой ИС. Вызывается при
// удалении связи с объектом ДО и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриУдаленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при определении наличия файлов, хранимых в интегрируемой конфигурации.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ЕстьФайлы - Булево, Неопределено - неявно возвращаемое значение, признак наличия присоединенных файлов.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриОпределенииНаличияПрисоединенныхФайлов(ВладелецФайлов, ЕстьФайлы, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при получении присоединенных файлов.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ДанныеФайлов - Массив - неявно возвращаемое значение, массив структур, содержащих данные файлов,
//     свойства см. РаботаСФайлами.ДанныеФайла().
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриПолученииПрисоединенныхФайлов(ВладелецФайлов, ДанныеФайлов, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

// Вызывается при создании форм документов Документооборота. Позволяет выполнить дополнительные действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыДокумента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Установим доступ к полю состояние по режиму работы
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Форма.ВнешнийОбъект)
			И Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить() Тогда
		Форма.Элементы.Состояние.ТолькоПросмотр = Истина;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Вызывается при создании форм бизнес-процессов 1С:Документооборота. Позволяет выполнить дополнительные действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыБизнесПроцесса(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при создании формы задачи Документооборота. Позволяет выполнить дополнительные действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыЗадачи(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Заполняет свойства объекта XDTO из реквизитов объекта конфигурации-потребителя. По умолчанию заполняется
// только наименование и идентификатор. При необходимости обеспечить заполнение других реквизитов объектов
// ДО, создаваемых по ссылкам, следует заполнить соответствующие свойства объекта XDTO. Эти же значения будут
// использованы при поиске соответствий для справочников, имеющих внешние ключи (ИНН, КПП).
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект.
//   СсылкаНаПотребитель - ЛюбаяСсылка - ссылка на исходный объект конфигурации-потребителя.
//
// Пример:
//	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП, ЮрФизЛицо");
//		ОбъектXDTO.inn = Реквизиты.ИНН;
//		ОбъектXDTO.kpp = Реквизиты.КПП;
//		ОбъектXDTO.legalPrivatePerson = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMLegalPrivatePerson");
//		ОбъектXDTO.legalPrivatePerson.name = Строка(Реквизиты.ЮрФизЛицо);
//		ОбъектXDTO.legalPrivatePerson.objectID = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
//		ОбъектXDTO.legalPrivatePerson.objectID.ID = ОбщегоНазначения.ИмяЗначенияПеречисления(Реквизиты.ЮрФизЛицо);
//		ОбъектXDTO.legalPrivatePerson.objectID.type = "DMLegalPrivatePerson";
//	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП");
//		ОбъектXDTO.inn = Реквизиты.ИНН;
//		ОбъектXDTO.kpp = Реквизиты.КПП;
//	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMBankAccount")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоБанковскиеСчета") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Владелец, НомерСчета");
//		ОбъектXDTO.number = Реквизиты.НомерСчета;
//		Если ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
//			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMCorrespondent");
//		ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
//			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMOrganization");
//		КонецЕсли;
//		ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.owner, Реквизиты.Владелец);
//	Иначе //...
//	КонецЕсли;
//
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт
	
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП, ЮрФизЛицо");
		
		ОбъектXDTO.inn = Реквизиты.ИНН;
		ОбъектXDTO.kpp = Реквизиты.КПП;
		ОбъектXDTO.legalPrivatePerson = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMLegalPrivatePerson");
		ОбъектXDTO.legalPrivatePerson.name = Строка(Реквизиты.ЮрФизЛицо);
		ОбъектXDTO.legalPrivatePerson.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		Если Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ОбъектXDTO.legalPrivatePerson.objectId.id = "ФизЛицо"; //@NON-NLS-1
			
		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ОбъектXDTO.legalPrivatePerson.objectId.id = "ЮрЛицо"; //@NON-NLS-1
			
		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			ОбъектXDTO.legalPrivatePerson.objectId.id = "ИндивидуальныйПредприниматель"; //@NON-NLS-1
			
		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			ОбъектXDTO.legalPrivatePerson.objectId.id = "ЮрЛицоНеРезидент"; //@NON-NLS-1
			
		КонецЕсли;
		ОбъектXDTO.legalPrivatePerson.objectId.type = "DMLegalPrivatePerson";
		
	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMPrivatePerson")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Наименование, ДатаРождения");
		
		ОбъектXDTO.name = Реквизиты.Наименование;
		ОбъектXDTO.birthDay = Реквизиты.ДатаРождения;
		
	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMUser")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ФизическоеЛицо, Подразделение");
		
		Если ЗначениеЗаполнено(Реквизиты.ФизическоеЛицо) Тогда
			ОбъектXDTO.privatePerson = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMPrivatePerson");
			ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси,
				ОбъектXDTO.privatePerson, Реквизиты.ФизическоеЛицо);
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
			ОбъектXDTO.subdivision = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMSubdivision");
			ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси,
				ОбъектXDTO.subdivision, Реквизиты.Подразделение);
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMContactPerson")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КонтактныеЛицаПартнеров.ДолжностьПоВизитке КАК Должность,
			|	КонтактныеЛицаПартнеров.Комментарий КАК Комментарий,
			|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
			|ПОМЕСТИТЬ ДанныеКонтактногоЛица
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|ГДЕ
			|	КонтактныеЛицаПартнеров.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Контрагент,
			|	ДанныеКонтактногоЛица.Должность КАК Должность,
			|	ДанныеКонтактногоЛица.Комментарий КАК Комментарий
			|ИЗ
			|	ДанныеКонтактногоЛица КАК ДанныеКонтактногоЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ДанныеКонтактногоЛица.Партнер = Контрагенты.Партнер
			|ГДЕ
			|	НЕ Контрагенты.ПометкаУдаления");
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаПотребитель);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			
			ОбъектXDTO.position = Выборка.Должность;
			ОбъектXDTO.comment = Выборка.Комментарий;
			ОбъектXDTO.correspondent = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMCorrespondent");
			ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(
				Прокси,
				ОбъектXDTO.correspondent,
				Выборка.Контрагент);
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Организации") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП");
		
		ОбъектXDTO.inn = Реквизиты.ИНН;
		ОбъектXDTO.kpp = Реквизиты.КПП;
		
	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMCurrency")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Валюты") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Код, НаименованиеПолное");
		
		ОбъектXDTO.code = Реквизиты.Код;
		ОбъектXDTO.fullName = Реквизиты.НаименованиеПолное;
		
	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMBank")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Код");
		
		ОбъектXDTO.BIC = Реквизиты.Код;
		
	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMBankAccount")
			И (ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов")
				Или ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций")) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Владелец, Банк, НомерСчета");
		
		ОбъектXDTO.number = Реквизиты.НомерСчета;
		
		Если ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMCorrespondent");
			
		ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMPrivatePerson");
			
		ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка.Организации") Тогда
			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMOrganization");
			
		КонецЕсли;
		ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.owner, Реквизиты.Владелец);
		
		ОбъектXDTO.bank = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBank");
		ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.bank, Реквизиты.Банк);
		
	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMParty") Тогда
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбъектXDTO.correspondent = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMCorrespondent");
			ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси,
				ОбъектXDTO.correspondent, СсылкаНаПотребитель);
			
		ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ОбъектXDTO.user = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMUser");
			ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси,
				ОбъектXDTO.user, СсылкаНаПотребитель);
			
		ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Организации") Тогда
			ОбъектXDTO.organization = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMOrganization");
			ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси,
				ОбъектXDTO.organization, СсылкаНаПотребитель);
			
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMPartyRowContact") Тогда
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ОбъектXDTO.contactPerson = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMContactPerson");
			ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси,
				ОбъектXDTO.contactPerson, СсылкаНаПотребитель);
			
		ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ОбъектXDTO.user = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMUser");
			ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси,
				ОбъектXDTO.user, СсылкаНаПотребитель);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при заполнении реквизита объекта ИС по значению реквизита объекта ДО. При установке
// в параметр Результат значения, отличного от Неопределено, стандартное заполнение не выполняется.
//
// Параметры:
//   Результат - Произвольный - заполняемое значение реквизита объекта ИС.
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому нужно найти.
//   ТипРеквизита - Тип - тип заполняемого реквизита объекта ИС.
//   ИмяРеквизита - Строка - имя заполняемого реквизита ИС.
//   ТипОбъекта - Тип - тип заполняемого объекта ИС.
//   Объект - Произвольный - заполняемый объект ИС.
//   ЭтоДополнительноеСвойство - Булево - истина, если переданный объект является доп. свойством.
//   Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство-владелец.
//   ПараметрыВыбора - Соответствие - параметры выбора, где ключ - имя параметра вида "Отбор.Владелец",
//     а значение - значение параметра (отбора).
//
// Пример:
//	Если ОбъектXDTO.Установлено("objectID")
//			И ОбъектXDTO.objectID.type = "DMDocumentStatus"
//			И ТипРеквизита = Тип("Булево")
//			И ИмяРеквизита = "Согласован" Тогда
//		Результат = (ОбъектXDTO.objectID.ID = "Согласован");
//	КонецЕсли;
//	Если ТипРеквизита = Тип("СправочникСсылка._ДемоЕдиницыИзмерения")
//			И ПараметрыВыбора <> Неопределено Тогда
//		Запрос = Новый Запрос(
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Ссылка
//			|ИЗ
//			|	Справочник._ДемоЕдиницыИзмерения
//			|ГДЕ
//			|	Владелец = &Владелец
//			|	И Наименование = &Наименование
//			|");
//		Запрос.УстановитьПараметр("Наименование", ОбъектXDTO.name);
//		Запрос.УстановитьПараметр("Владелец", ПараметрыВыбора["Отбор.Владелец"]);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Результат = Выборка.Ссылка;
//		КонецЕсли;
//	КонецЕсли;
//	Если ТипРеквизита = Тип("СправочникСсылка._ДемоБанковскиеСчета")
//			И ОбъектXDTO.Свойства().Получить("number") <> Неопределено
//			И ОбъектXDTO.Установлено("number") Тогда
//		Запрос = Новый Запрос(
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Ссылка
//			|ИЗ
//			|	Справочник._ДемоБанковскиеСчета
//			|ГДЕ
//			|	НомерСчета = &НомерСчета
//			|");
//		Запрос.УстановитьПараметр("НомерСчета", ОбъектXDTO.number);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Результат = Выборка.Ссылка;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(Результат, ОбъектXDTO, ТипРеквизита, ИмяРеквизита, ТипОбъекта,
		Объект, ЭтоДополнительноеСвойство = Ложь, Свойство = Неопределено, ПараметрыВыбора = Неопределено) Экспорт
	
	Если ТипРеквизита = Тип("СправочникСсылка.СтавкиНДС")
			И ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "objectID") Тогда
		
		Результат = Справочники.СтавкиНДС.ПустаяСсылка();
		
		//++ Локализация
		СтавкаНДСПеречислениеСсылка = Неопределено;
		МетаданныеПеречислениеСтавкиНДС = Метаданные.НайтиПоПолномуИмени("Перечисление.СтавкиНДС");
		СтавкаНДСЗначениеПеречисления = МетаданныеПеречислениеСтавкиНДС.ЗначенияПеречисления.Найти(ОбъектXDTO.objectId.id);
		Если СтавкаНДСЗначениеПеречисления = Неопределено Тогда
			Для Каждого ЗначениеПеречисления Из МетаданныеПеречислениеСтавкиНДС.ЗначенияПеречисления Цикл
				Если ЗначениеПеречисления.Синоним = ОбъектXDTO.name Тогда
					СтавкаНДСЗначениеПеречисления = ЗначениеПеречисления;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтавкаНДСЗначениеПеречисления <> Неопределено Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПеречислениеСтавкиНДС.ПолноеИмя());
			СтавкаНДСПеречислениеСсылка = Менеджер[СтавкаНДСЗначениеПеречисления.Имя];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтавкаНДСПеречислениеСсылка) Тогда
			Результат = УчетНДСЛокализация.СтавкаНДСПоПеречислению(СтавкаНДСПеречислениеСсылка);
		КонецЕсли;
		//-- Локализация
		
	КонецЕсли;
	
	Если ТипРеквизита = Тип("СправочникСсылка.Контрагенты")
			И ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "objectID") Тогда
		
		Результат = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.
			СсылкаНаОбъектПоДаннымДокументооборота(ОбъектXDTO.objectID.ID, ОбъектXDTO.objectID.type, ТипРеквизита);
		
		Если Результат = Неопределено Тогда
			
			// Возможно, соответствия созданы синхронизацией данных и унаследовали идентификаторы.
			УникальныйИдентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.objectID.ID);
			СсылкаПоИдентификатору = Справочники.Контрагенты.ПолучитьСсылку(УникальныйИдентификатор);
			
			// Возможно исключение RLS.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Ссылка
				|ИЗ
				|	Справочник.Контрагенты
				|ГДЕ
				|	Ссылка = &СсылкаПоИдентификатору");
			Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда // контрагент найден
				
				Результат = Выборка.Ссылка;
				
			ИначеЕсли ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "name") И ОбъектXDTO.name <> "" Тогда
				
				// продолжим поиск по ИНН/КПП
				
				Наименование = ОбъектXDTO.name;
				ИНН = "";
				КПП = "";
				
				Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "inn") Тогда
					ИНН = ОбъектXDTO.inn;
				КонецЕсли;
				Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "kpp") Тогда
					КПП = ОбъектXDTO.kpp;
				КонецЕсли;
				
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Контрагенты.Ссылка КАК Ссылка,
					|	0 КАК Приоритет
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&ИНН <> """"
					|	И &КПП <> """"
					|	И Контрагенты.ИНН = &ИНН
					|	И Контрагенты.КПП = &КПП
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	1
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&ИНН <> """"
					|	И (&КПП = """"
					|			ИЛИ Контрагенты.КПП = """")
					|	И Контрагенты.ИНН = &ИНН
					|	И Контрагенты.Наименование = &Наименование
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	2
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&КПП <> """"
					|	И (&ИНН = """"
					|			ИЛИ Контрагенты.ИНН = """")
					|	И Контрагенты.КПП = &КПП
					|	И Контрагенты.Наименование = &Наименование
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	3
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&ИНН <> """"
					|	И (&КПП = """"
					|			ИЛИ Контрагенты.КПП = """")
					|	И Контрагенты.ИНН = &ИНН
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	4
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	(&ИНН = """"
					|			ИЛИ Контрагенты.ИНН = """")
					|	И (&КПП = """"
					|			ИЛИ Контрагенты.КПП = """")
					|	И Контрагенты.Наименование = &Наименование
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|УПОРЯДОЧИТЬ ПО
					|	Приоритет");
				Запрос.УстановитьПараметр("ИНН", ИНН);
				Запрос.УстановитьПараметр("КПП", КПП);
				Запрос.УстановитьПараметр("Наименование", Наименование);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда // контрагент найден
					
					Результат = Выборка.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли
		
	КонецЕсли;
	
	Если ТипРеквизита = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов")
			И ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "number") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
			|ГДЕ
			|	БанковскиеСчетаКонтрагентов.НомерСчета = &НомерСчета");
		Запрос.УстановитьПараметр("НомерСчета", ОбъектXDTO.number);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипРеквизита = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций")
			И ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "number") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
			|ГДЕ
			|	БанковскиеСчетаОрганизаций.НомерСчета = &НомерСчета");
		Запрос.УстановитьПараметр("НомерСчета", ОбъектXDTO.number);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектXDTO.Установлено("objectId") И ОбъектXDTO.objectId.type = "DMDocumentStatus" Тогда
		СостояниеДО = ОбъектXDTO.objectId.id;
	Иначе
		Возврат;
	КонецЕсли;
	
	// Установка реквизита "Согласован" согласно состоянию согласования ДО.
	Если ТипРеквизита = Тип("Булево") И ИмяРеквизита = "Согласован"
			И (ТипОбъекта = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту")
				Или ТипОбъекта = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту")
				Или ТипОбъекта = Тип("СправочникОбъект.ДоговорыКонтрагентов")
				Или ТипОбъекта = Тип("СправочникОбъект.СоглашенияСКлиентами")
				Или ТипОбъекта = Тип("СправочникОбъект.СоглашенияСПоставщиками")
				Или ТипОбъекта = Тип("ДокументОбъект.ЗаказКлиента")
				Или ТипОбъекта = Тип("ДокументОбъект.ЗаказПоставщику")
				Или ТипОбъекта = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента")
				Или ТипОбъекта = Тип("ДокументОбъект.УстановкаЦенНоменклатуры")) Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Истина;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Ложь;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Ложь;
		КонецЕсли;
		
	// Выбор значений перечислений-статусов согласования согласно состоянию согласования ДО.
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыКоммерческихПредложенийКлиентам") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыДоговоровКонтрагентов") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыСоглашенийСКлиентами") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыСоглашенийСПоставщиками") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыСоглашенийСПоставщиками.Действует;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаказовПоставщикам") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыАктаОРасхождениях") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыАктаОРасхождениях.Согласовано;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаявокНаВозвратТоваровОтКлиентов") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаявокНаРасходованиеДенежныхСредств") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыРаспоряженийНаПеремещениеДенежныхСредств") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.Согласовано;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.Отклонено;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыУстановокЦенНоменклатуры") Тогда
		Если СостояниеДО = "Согласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда //@NON-NLS-1
			Результат = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при заполнении свойства объекта XDTO по значению в ИС (например, по значению реквизита объекта ИС).
//
// Параметры:
//   Значение - Произвольный - значение, которым заполняются свойства объекта XDTO для передачи в ДО.
//   Свойства - ФормаКлиентскогоПриложения, Структура, СтрокаТаблицыЗначений - заполняемый набор данных,
//     которым будет заполнен объект XDTO для передачи в ДО.
//     См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемогоОбъектаДО().
//   ТипОбъекта - Строка - тип заполняемого объекта, например, "DMInternalObject".
//   ИмяСвойства - Строка - имя заполняемого свойства, например, "Контрагент", "СостояниеСогласование".
//   ТипСвойства - Строка - тип заполняемого свойства, например, "DMCorrespondent", "DMDocumentStatus".
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартное заполнение
//     свойства по значению Значение производиться не будет.
//
// Пример:
//	Если ТипСвойства = "DMDocumentStatus" И ИмяСвойства = "СостояниеСогласование" Тогда
//		Если Значение = Перечисления._ДемоСостоянияЗаказаПокупателя.Согласован Тогда
//			Свойства[ИмяСвойства] = НСтр("ru = 'Согласовано'");
//			Свойства[ИмяСвойства + "ID"] = "Согласовано";
//			Свойства[ИмяСвойства + "Тип"] = ТипСвойства;
//			СтандартнаяОбработка = Ложь;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриЗаполненииСвойстваОбъектаXDTOПоЗначению(Значение, Свойства, ТипОбъекта, ИмяСвойства, ТипСвойства,
		СтандартнаяОбработка) Экспорт
	
	Если ТипСвойства = "DMDocumentStatus" И ИмяСвойства = "СостояниеСогласование" Тогда
		
		// Выбор значений перечислений-статусов согласования согласно состоянию согласования ДО.
		Если Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует
				Или Значение = Перечисления.СтатусыДоговоровКонтрагентов.Действует
				Или Значение = Перечисления.СтатусыСоглашенийСКлиентами.Действует
				Или Значение = Перечисления.СтатусыСоглашенийСПоставщиками.Действует
				Или Значение = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению
				Или Значение = Перечисления.СтатусыЗаказовПоставщикам.Согласован
				Или Значение = Перечисления.СтатусыАктаОРасхождениях.Согласовано
				Или Значение = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению
				Или Значение = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
				Или Значение = Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.Согласовано
				Или Значение = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован Тогда
			Свойства[ИмяСвойства] = НСтр("ru = 'Согласовано'");
			Свойства[ИмяСвойства + "ID"] = "Согласовано"; //@NON-NLS-1
			Свойства[ИмяСвойства + "Тип"] = ТипСвойства;
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано
				Или Значение = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован
				Или Значение = Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано
				Или Значение = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано
				Или Значение = Перечисления.СтатусыЗаказовКлиентов.НеСогласован
				Или Значение = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован
				Или Значение = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано
				Или Значение = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
				Или Значение = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена
				Или Значение = Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.Отклонено
				Или Значение = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован Тогда
			Свойства[ИмяСвойства] = НСтр("ru = 'Не согласовано'");
			Свойства[ИмяСвойства + "ID"] = "НеСогласовано"; //@NON-NLS-1
			Свойства[ИмяСвойства + "Тип"] = ТипСвойства;
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли Значение = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
				Или Значение = Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.НеСогласовано Тогда
			Свойства[ИмяСвойства] = НСтр("ru = 'На согласовании'");
			Свойства[ИмяСвойства + "ID"] = "НаСогласовании"; //@NON-NLS-1
			Свойства[ИмяСвойства + "Тип"] = ТипСвойства;
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипСвойства = "DMVATRate"
			И ИмяСвойства = "СтавкаНДС"
			И ТипЗнч(Значение) = Тип("СправочникСсылка.СтавкиНДС") Тогда
		
		СтавкаНДС = "";
		СтавкаНДСID = "";
		
		Если Значение = Справочники.СтавкиНДС.БезНДС Тогда
			СтавкаНДС = НСтр("ru = 'Без НДС'");
			СтавкаНДСID = "БезНДС"; //@NON-NLS-1
			
		Иначе
			Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "Ставка");
			Если Ставка = 0 Тогда
				СтавкаНДС = "0%";
				СтавкаНДСID = "НДС0"; //@NON-NLS-1
				
			ИначеЕсли Ставка = 10 Тогда
				СтавкаНДС = "10%";
				СтавкаНДСID = "НДС10"; //@NON-NLS-1
				
			ИначеЕсли Ставка = 18 Тогда
				СтавкаНДС = "18%";
				СтавкаНДСID = "НДС18"; //@NON-NLS-1
				
			ИначеЕсли Ставка = 20 Тогда
				СтавкаНДС = "20%";
				СтавкаНДСID = "НДС20"; //@NON-NLS-1
				
			КонецЕсли;
		КонецЕсли;
		
		Если СтавкаНДС <> "" И СтавкаНДСID <> "" Тогда
			Свойства.СтавкаНДС = СтавкаНДС;
			Свойства.СтавкаНДСID = СтавкаНДСID;
			Свойства.СтавкаНДСТип = ТипСвойства;
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании объекта ИС по ссылке в реквизите объекта ДО. Может использоваться для
// дозаполнения реквизитов нового объекта ИС, например, если стандартный обработчик заполнения не
// заполняет обязательные реквизиты по умолчанию.
//
// Параметры:
//   ОбъектИС - Произвольный - созданный, но еще не записанный объект ИС.
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому не найдено в текущей ИБ.
//   ЗаполняемыйОбъектИС - Произвольный - объект ИС, в ходе заполнения которого вызывается создание
//     ОбъектИС по ссылке. Обеспечивает контекст, необходимый для заполнения ОбъектИС.
//
// Пример:
//	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект._ДемоОрганизации") Тогда
//		ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
//		Если ОбъектXDTO.objectID.type = "DMOrganization"
//				И ОбъектXDTO.objectID.ID = "ИндивидуальныйПредприниматель" Тогда
//			ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
//		КонецЕсли;
//	КонецЕсли;
//	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект._ДемоБанковскиеСчета")
//			И ОбъектXDTO.objectID.type = "DMBankAccount" Тогда
//		ОбъектИС.НомерСчета = ОбъектXDTO.number;
//	КонецЕсли;
//
Процедура ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Организации")
			Или ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		ИсточникXDTO = Неопределено;
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMParty") Тогда
			Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "correspondent") Тогда
				ИсточникXDTO = ОбъектXDTO.correspondent;
			ИначеЕсли ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "organization") Тогда
				ИсточникXDTO = ОбъектXDTO.organization;
			КонецЕсли;
			
		ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent")
				Или ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization") Тогда
			ИсточникXDTO = ОбъектXDTO;
			
		КонецЕсли;
		
		ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		Если ИсточникXDTO <> Неопределено Тогда
			
			Если ИсточникXDTO.Установлено("legalPrivatePerson") Тогда
				Если ИсточникXDTO.legalPrivatePerson.objectId.id = "ИндивидуальныйПредприниматель" Тогда //@NON-NLS-1
					ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				ИначеЕсли ИсточникXDTO.legalPrivatePerson.objectId.id = "ЮрЛицоНеРезидент" Тогда //@NON-NLS-1
					ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
				ИначеЕсли ИсточникXDTO.legalPrivatePerson.objectId.id = "ФизическоеЛицо" Тогда //@NON-NLS-1
					ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
				КонецЕсли;
			КонецЕсли;
			
			ОбъектИС.ИНН = ИсточникXDTO.inn;
			ОбъектИС.КПП = ИсточникXDTO.kpp;
			ОбъектИС.КодПоОКПО = ИсточникXDTO.okpo;
			ОбъектИС.НаименованиеПолное = ИсточникXDTO.fullName;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//++ Локализация
	//-- Локализация
	
	Если ОбъектXDTO.objectId.type = "DMPrivatePerson"
			И ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ОбъектИС.ФИО = ОбъектXDTO.name;
		ОбъектИС.ДатаРождения = ОбъектXDTO.birthDay;
	КонецЕсли;
	
	Если ОбъектXDTO.objectId.type = "DMBank"
			И ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.КлассификаторБанков") Тогда
		ОбъектИС.Код = ОбъектXDTO.BIC;
	КонецЕсли;
	
	Если ОбъектXDTO.objectId.type = "DMBankAccount"
			И (ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.БанковскиеСчетаКонтрагентов")
				Или ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.БанковскиеСчетаОрганизаций")) Тогда
		ОбъектИС.НомерСчета = ОбъектXDTO.number;
	КонецЕсли;
	
КонецПроцедуры

// Получает таблицу менеджеров печати форм объектов.
//
// Параметры:
//   МенеджерОбъекта - Строка - полное имя метаданных менеджера объекта.
//   ПечатныеФормы - ТаблицаЗначений:
//     * МенеджерПечати - Строка - имя объекта, в модуле менеджера которого располагается
//                                 процедура Печать, формирующая табличные документы для этой команды.
//     * ИмяКоманды - Строка
//     * ПредставлениеКоманды - Строка
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
// Пример:
//	КомандыПечати = ИнтеграцияС1СДокументооборот.КомандыПечатиФормы(МенеджерОбъекта + ".Форма.ФормаСписка");
//	
//	Для Каждого Команда Из КомандыПечати Цикл
//		Строка = ПечатныеФормы.Добавить();
//		Строка.МенеджерПечати = Команда.МенеджерПечати;
//		Строка.ИмяКоманды = Команда.Идентификатор;
//		Строка.ПредставлениеКоманды = Команда.Представление;
//	КонецЦикла;
//
Процедура ПриЗаполненииТаблицыМенеджеровПечатиОбъекта(МенеджерОбъекта, ПечатныеФормы, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Исключения = Новый Массив;
	Исключения.Добавить("АктMicrosoftWord");
	Исключения.Добавить("АктОтчетДавальцуMicrosoftWord");
	Исключения.Добавить("СписокПеречисленийMSWord");
	Исключения.Добавить("СписокПеречисленийOOWriter");
	Исключения.Добавить("Т53MSWord");
	Исключения.Добавить("Т53OOWriter");
	Исключения.Добавить("АктВзаимозачетаMicrosoftWord");
	Исключения.Добавить("АктПереуступкиДолгаMicrosoftWord");
	Исключения.Добавить("КоммерческоеПредложениеMicrosoftWord");
	Исключения.Добавить("КоммерческоеПредложениеOpenOfficeOrgWriter");
	Исключения.Добавить("АнкетаMicrosoftWord");
	Исключения.Добавить("АнкетаOpenOfficeOrgWriter");
	Исключения.Добавить("ЭтикеткаСкладскиеЯчейки");
	Исключения.Добавить("ЭтикеткаСерииНоменклатуры");
	Исключения.Добавить("ЭтикеткаДоставки");
	Исключения.Добавить("ЦенникТовары");
	Исключения.Добавить("ЭтикеткаТовары");
	Исключения.Добавить("ПереоценкаВРознице");
	Исключения.Добавить("УстановкаЦенНоменклатуры");
	Исключения.Добавить("КодыТоваров");
	Исключения.Добавить("ИНВ3");
	Исключения.Добавить("ИНВ19");
	Исключения.Добавить("МаршрутныйЛист");
	Исключения.Добавить("ПриказОбУвольненииMSWord");
	Исключения.Добавить("ПриказОПереводеMSWord");
	Исключения.Добавить("ПриказОПриемеНаРаботуMSWord");
	Исключения.Добавить("ПриказОПредоставленииОтпускаMSWord");
	Исключения.Добавить("КомплектДокументов");
	Исключения.Добавить("КомплектДокументовСНастройкой");
	
	КомандыПечати = ИнтеграцияС1СДокументооборот.КомандыПечатиФормы(МенеджерОбъекта + ".Форма.ФормаСписка");
	
	Для Каждого Команда Из КомандыПечати Цикл
		Если Исключения.Найти(Команда.Идентификатор) = Неопределено И ЗначениеЗаполнено(Команда.МенеджерПечати) Тогда
			Строка = ПечатныеФормы.Добавить();
			Строка.МенеджерПечати = Команда.МенеджерПечати;
			Строка.ИмяКоманды = Команда.Идентификатор;
			Строка.ПредставлениеКоманды = Команда.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет коллекцию печатных форм объекта по имени менеджера печати и команде менеджера печати.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - внешний объект.
//   ИмяКоманды - Строка - имя команды.
//   КоллекцияПечатныхФорм - ТаблицаЗначений - неявно возвращаемое значение.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриЗаполненииПечатныхФорм(ВнешнийОбъект, ИмяКоманды, КоллекцияПечатныхФорм, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить индекс картинки элемента справочника.
//
// Параметры:
//   ИндексаКартинки - Число - индекс картинки.
//
Процедура ПриОпределенииИндексаКартинкиЭлементаСправочника(ИндексаКартинки) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить установку правила заполнения при выгрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие - соответствие имен реквизитов свойствам XDTO.
//   Приемник - Строка - имя XDTO-типа приемника.
//   Источник - Строка - полное имя объекта метаданных-источника.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриУстановкеПравилаЗаполненияПриВыгрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник,
		СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить установку правила заполнения при загрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие - соответствие имен реквизитов свойствам XDTO.
//   Приемник - Строка - полное имя объекта метаданных-приемника.
//   Источник - Строка - имя XDTO-типа источника.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриУстановкеПравилаЗаполненияПриЗагрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник,
		СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Устанавливает доступные для выбора режимы изменения реквизита в проведенном документе.
//
// Параметры:
//   ТипОбъектаИС - Строка - представление типа объекта интегрированной системы.
//   РеквизитИС - Строка - представление реквизита интегрированной системы.
//   СписокВыбора - СписокЗначений - доступные значения режимов изменения реквизита.
//
// Пример:
//	Если ТипОбъектаИС = "Документ.ЗаказКлиента" И РеквизитИС = "Статус" Тогда
//		СписокВыбора.Очистить();
//		СписокВыбора.Добавить(
//			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
//		СписокВыбора.Добавить(
//			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
//	КонецЕсли;
//
Процедура УстановитьРежимыИзмененияВПроведенномДокументе(ТипОбъектаИС, РеквизитИС, СписокВыбора) Экспорт
	
	Если ТипОбъектаИС = "Документ.ЗаказКлиента" И РеквизитИС = "Статус" Тогда
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(
			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
		СписокВыбора.Добавить(
			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу реквизитов объекта по типу объекта.
//
// Параметры:
//   ИмяОбъектаИС - Строка - имя типа объекта потребителя.
//   Реквизиты - ТаблицаЗначений - Таблица описания реквизитов.
//
Процедура ПолучитьРеквизитыОбъектаИС(ИмяОбъектаИС, Реквизиты) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при записи констант подсистемы Интеграция с 1С:Документооборотом.
//
// Параметры:
//   Источник - КонстантаМенеджерЗначения - записываемая константа.
//   Отказ - Булево - флаг отказа от выполнения записи.
//
Процедура ПриЗаписиКонстанты(Источник, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение штрихкода документа для присвоения связанному документу ДО.
//
// Параметры:
//   Документ - ЛюбаяСсылка - объект ИС, на основании которого создается документ ДО.
//   Штрихкод - Строка - штрихкод для присвоения связанному документу ДО.
//
// Пример:
//	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкодированиеПечатныхФормОбъектов") Тогда
//		ШестнадцатиричноеЧисло = НРег(СтрЗаменить(Документ.УникальныйИдентификатор(), "-", ""));
//		ДлинаСтроки = СтрДлина(ШестнадцатиричноеЧисло);
//		Результат = 0;
//		Для НомерСимвола = 1 По ДлинаСтроки Цикл
//			Результат = Результат * 16 + Найти("0123456789abcdef",
//				Сред(ШестнадцатиричноеЧисло, НомерСимвола, 1)) - 1;
//		КонецЦикла;
//		Штрихкод = Формат(Результат, "ЧГ=0");
//	Иначе
//		Штрихкод = "";
//	КонецЕсли;
//
Процедура ПриОпределенииШтрихкодаДокумента(Документ, Штрихкод) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкодированиеПечатныхФормОбъектов") Тогда
		ШестнадцатиричноеЧисло = НРег(СтрЗаменить(Документ.УникальныйИдентификатор(), "-", ""));
		ДлинаСтроки = СтрДлина(ШестнадцатиричноеЧисло);
		Результат = 0;
		Для НомерСимвола = 1 По ДлинаСтроки Цикл
			Результат = Результат * 16 + Найти("0123456789abcdef",
				Сред(ШестнадцатиричноеЧисло, НомерСимвола, 1)) - 1;
		КонецЦикла;
		Штрихкод = Формат(Результат, "ЧГ=0");
	Иначе
		Штрихкод = "";
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить предельное количество объектов, выбираемых сервисом при получении списков.
//
// Параметры:
//   Тип - Строка - тип объекта XDTO
//   ПредельноеКоличество - Число - предельное количество элементов, выбираемых за раз
//
// Пример:
//	Если Тип = "DMCorrespondent" Тогда ПредельноеКоличество = 50 ИначеЕсли <...>
//
Процедура ПриОпределенииПредельногоКоличестваВыбираемыхОбъектов(Тип, ПредельноеКоличество) Экспорт
	
	
	
КонецПроцедуры

// Уточняет сокращенное наименование интегрируемой конфигурации для вывода в заголовках и декорациях.
//
// Параметры:
//   СокращенноеНаименование - Строка - неявно возвращаемое значение, краткое название конфигурации.
//
// Пример:
//   СокращенноеНаименование = НСтр("ru = '1С:ERP УП'");
//
Процедура ПриОпределенииСокращенногоНаименованияКонфигурации(СокращенноеНаименование) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		СокращенноеНаименование = НСтр("ru = '1С:КА'");
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		СокращенноеНаименование = НСтр("ru = '1С:УТ'");
		
	Иначе
		СокращенноеНаименование = НСтр("ru = '1С:ERP УП'");
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить получение доступности интеграции для текущего пользователя. Может переопределяться
// при отказе от использования поставляемой роли ИспользованиеИнтеграцииС1СДокументооборотом.
//
// Параметры:
//   Разрешено - Булево - Истина, если использование интеграции разрешено.
//
Процедура ПриОпределенииРазрешенияПользователяИспользоватьИнтеграцию(Разрешено) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение возможности запуска согласования в ДО.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект ИС.
//   ТекстПредупреждения - Строка - неявно возвращаемое значение, текст предупреждения.
//   Разрешено - Булево - Истина, если запуск согласования разрешен, Ложь - запрещен, Неопределено - согласно ролям.
//
// Пример:
//	Если ТипЗнч(ПредметСогласования) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
//		Если ПредметСогласования.Состояние <> Перечисления._ДемоСостоянияЗаказаПокупателя.НаСогласовании Тогда
//			ТекстПредупреждения = НСтр("ru = 'Создание процесса согласования разрешено только на основании
//				|документов в состоянии ""На согласовании"".'");
//			Разрешено = Ложь;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииРазрешенияПользователяНаЗапускСогласования(ПредметСогласования, ТекстПредупреждения,
		Разрешено) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение возможности прерывания согласования в ДО.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект ИС.
//   ПредметДО - Структура - описание связанного объекта ДО:
//      name - Строка - представление связанного объекта.
//      ID - Строка - идентификатор связанного объекта.
//      type - Строка - имя типа XDTO.
//   ТекстПредупреждения - Строка - неявно возвращаемое значение, текст предупреждения.
//   Разрешено- Булево - Истина, если прерывание согласования разрешено, Ложь - запрещено, Неопределено - согласно ролям.
//
Процедура ПриОпределенииРазрешенияПользователяНаПрерываниеСогласования(ПредметСогласования, ПредметДО,
		ТекстПредупреждения, Разрешено) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при изменении состояния согласования в ДО. Предназначена для изменения согласуемого объекта.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//   Состояние - ПеречислениеСсылка.СостоянияСогласованияВДокументообороте.
//   ВызовИзФормыОбъекта - Булево - Истина, если изменение состояния вызвано пользователем из формы объекта.
//
// Пример:
//	Если ВызовИзФормыОбъекта Тогда
//		Возврат;
//	КонецЕсли;
//
//	Если ТипЗнч(ПредметСогласования) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
//	
//		Объект = ПредметСогласования.ПолучитьОбъект();
//		Если Состояние = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.НаСогласовании;
//		ИначеЕсли Состояние = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.НеСогласован;
//		ИначеЕсли Состояние = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.Согласован;
//		Иначе
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.Подготовлен;
//		КонецЕсли;
//		Объект.Записать(РежимЗаписиДокумента.Запись);
//	
//	КонецЕсли;
//
Процедура ПриИзмененииСостоянияСогласования(ПредметСогласования, Состояние, ВызовИзФормыОбъекта) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение пояснения к состоянию согласования, предназначенное для чтения пользователем.
//
// Параметры:
//   Установил - Строка - представление пользователя, установившего новое состояние.
//   ДатаУстановки - Дата - дата и время установки нового состояния.
//   Пояснение - Строка - пояснение к состоянию согласования.
//
Процедура ПриОпределенииПоясненияСостоянияСогласования(Установил, ДатаУстановки, Пояснение) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при определении таймаута веб-сервиса. При необходимости таймаут может быть вынесен в
// настройки администратора интеграции и переопределен в этой процедуре.
//
// Параметры:
//   Таймаут - Число - неявно возвращаемое значение, время в секундах, по истечении которого вызов
//     веб-сервиса Документооборота считается неудачным.
//
Процедура ПриОпределенииТаймаутаСервиса(Таймаут) Экспорт
	
	
	
КонецПроцедуры

// Заполняет реквизиты формы по данным объекта интегрированной системы.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - ссылка на объект-основание.
//   Форма - ФормаКлиентскогоПриложения - форма обработки ИнтеграцияС1СДокументооборот, соответствующая заполняемому
//    объекту Документооборота.
//
Процедура ЗаполнитьФормуИзПотребителя(ВнешнийОбъект, Форма) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при построении списка интегрируемых объектов. В переданную таблицу следует добавить
// типы объектов, поддерживающих автоматическую настройку бесшовной интеграции с созданием правил
// интеграции и заполнением связанных данных.
//
// Параметры:
//   Объекты - ТаблицаЗначений - заполняемая таблица с колонками:
//     ИмяТипаОбъекта - Строка - полное имя типа, как задано в метаданных.
//     ОписаниеВыполняемыхДействий - Строка - необязательна, краткое описание действий, выполняемых
//        при автоматической настройке.
//
// Пример:
//	Строка = Объекты.Добавить();
//	Строка.ИмяТипаОбъекта = "Справочник._ДемоДоговорыКонтрагентов";
//	Строка.ОписаниеВыполняемыхДействий =
//		НСтр("ru = 'Будут созданы правила интеграции и виды внутренних документов для всех видов договоров.'");
//
Процедура ПриОпределенииОбъектовПоддерживающихАвтонастройку(Объекты) Экспорт
	
	Строка = Объекты.Добавить();
	Строка.ИмяТипаОбъекта = "Справочник.СоглашенияСКлиентами";
	Строка.ОписаниеВыполняемыхДействий =
		НСтр("ru = 'Будут созданы правила интеграции и вид внутренних документов для справочника ""Соглашения об условиях продаж"".'");
	
	Строка = Объекты.Добавить();
	Строка.ИмяТипаОбъекта = "Справочник.ДоговорыКонтрагентов";
	Строка.ОписаниеВыполняемыхДействий =
		НСтр("ru = 'Будут созданы правила интеграции и вид внутренних документов для справочника ""Договоры с контрагентами"".'");
	
	Строка = Объекты.Добавить();
	Строка.ИмяТипаОбъекта = "Документ.КоммерческоеПредложениеКлиенту";
	Строка.ОписаниеВыполняемыхДействий =
		НСтр("ru = 'Будут созданы правила интеграции и вид внутренних документов для документа ""Коммерческое предложение клиенту"".'");
	
	Строка = Объекты.Добавить();
	Строка.ИмяТипаОбъекта = "Документ.ЗаказКлиента";
	Строка.ОписаниеВыполняемыхДействий =
		НСтр("ru = 'Будут созданы правила интеграции и вид внутренних документов для документа ""Заказ клиента"".'");
	
	Строка = Объекты.Добавить();
	Строка.ИмяТипаОбъекта = "Документ.ЗаказПоставщику";
	Строка.ОписаниеВыполняемыхДействий =
		НСтр("ru = 'Будут созданы правила интеграции и вид внутренних документов для документа ""Заказ поставщику"".'");
	
	Строка = Объекты.Добавить();
	Строка.ИмяТипаОбъекта = "Документ.ЗаявкаНаВозвратТоваровОтКлиента";
	Строка.ОписаниеВыполняемыхДействий =
		НСтр("ru = 'Будут созданы правила интеграции и вид внутренних документов для документа ""Заявка на возврат товаров от клиента"".'");
	
	Строка = Объекты.Добавить();
	Строка.ИмяТипаОбъекта = "Документ.ЗаявкаНаРасходованиеДенежныхСредств";
	Строка.ОписаниеВыполняемыхДействий =
		НСтр("ru = 'Будут созданы правила интеграции и вид внутренних документов для документа ""Заявка на расходование денежных средств"".'");
	
КонецПроцедуры

// Вызывается при добавлении подсистемы в дерево интегрируемых объектов, с помощью которого настраивается
// интеграция. По умолчанию выводятся подсистемы первого уровня, включаемые в командный интерфейс, и
// подчиненные им.
//
// Параметры:
//   Подсистема - ОбъектМетаданных - добавляемая подсистема, содержащая интегрируемые объекты.
//   Отказ - Булево - при установке в Ложь подсистема будет пропущена вместе со всеми подчиненными.
//
Процедура ПриДобавленииПодсистемыВДеревоИнтегрируемыхОбъектов(Подсистема, Отказ) Экспорт
	
	Если Подсистема.Имя = "ПродажиБазовая" Или Подсистема.Имя = "ЗакупкиБазовая" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет типы объектов ИС, поддерживающие бесшовную интеграцию. По умолчанию заполняется всеми
// типами, входящими в состав типов параметров общих команд подсистемы ИнтеграцияС1СДокументооборотом.
//
// Параметры:
//   Типы - Массив из Тип - массив объектов типа Тип.
//
Процедура ПриОпределенииТиповОбъектовПоддерживающихИнтеграцию(Типы) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление объекта интегрируемой конфигурации. Используется, если стандартное
// представление из синонима и ключевых реквизитов через запятую оказывается недостаточно читабельным.
//
// Параметры:
//   Правило - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом - правило, для которого
//             определяется представление.
//   ПредставлениеОбъектаПотребителя - Строка - неявно возвращаемое значение, переопределяемое представление
//             объекта. По умолчанию собирается из синонима объекта и значений ключевых реквизитов правила.
//
// Пример:
//
//	Если Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" Тогда 
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Ключевой", Истина);
//		СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаИС", "ВидОперации");
//		КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(СтруктураПоиска);
//		Если КлючевыеРеквизиты.Количество() > 0 Тогда
//			ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаИС;
//			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
//				ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление товаров'");
//			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
//				ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление услуг'");
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииПредставленияОбъектаПотребителя(Правило, ПредставлениеОбъектаПотребителя) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление вида объекта интегрируемой конфигурации.
//
// Параметры:
//   Правило - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом - правило, для которого
//             определяется представление.
//   ПредставлениеВидаОбъектаПотребителя - Строка - неявно возвращаемое значение, переопределяемое представление
//             вида объекта. По умолчанию определяется как представление объекта с ключевыми реквизитами.
//
// Пример:
//	Если Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" Тогда
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Ключевой", Истина);
//		СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаИС", "ВидОперации");
//		КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(СтруктураПоиска);
//		Если КлючевыеРеквизиты.Количество() > 0 Тогда
//			ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаИС;
//			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
//				ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Товары (накладная)'");
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииПредставленияВидаОбъектаПотребителя(Правило, ПредставлениеВидаОбъектаПотребителя) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление формы выбора правила интеграции. Используется при неоднозначности правил и
// позволяет предложить пользователю менее техногенную форму выбора.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма ВыборПравила обработки ИнтеграцияС1СДокументооборот.
//
// Пример:
//	Форма.Заголовок = НСтр("ru = 'Форма документа'");
//	Форма.Автозаголовок = Ложь;
//	Форма.Пояснение = НСтр("ru = 'Выберите вид документа:'");
//	Форма.Элементы.Пояснение.Видимость = Истина;
//
Процедура ПриСозданииНаСервереФормыВыбораПравила(Форма) Экспорт
	
	
	
КонецПроцедуры

// Проверяет соответствие правила интеграции функциональным опциям. Вызывается при выборе подходящего правила
// и позволяет отказаться от правил, связанных с объектами, выключенными по ФО.
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - проверяемое правило.
//   ТипОбъектаДО - Строка - Тип объекта ДО.
//   ТипОбъектаИС - Строка - Тип объекта ИС (полное имя в метаданных).
//   Отказ - Булево - при установке в Истина правило не будет использоваться.
//   ИмяКлючевогоРеквизита - Строка - имя ключевого реквизита правила.
//   ЗначениеКлючевогоРеквизита - Произвольный - значение ключевого реквизита правила.
//
// Пример:
//	Если ТипОбъектаИС = "Документ.ПоступлениеНМА"
//		И Не ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА") Тогда
//		Отказ = Истина;
//		Возврат;
//	КонецЕсли;
//
Процедура ПриПроверкеСоответствияПравилаФункциональнымОпциям(Правило, ТипОбъектаДО, ТипОбъектаИС, Отказ,
		ИмяКлючевогоРеквизита = "", ЗначениеКлючевогоРеквизита = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Определяет реквизиты проведенного документа, подлежащие обновлению при их изменении в ДО.
//
// Параметры:
//   ПолноеИмя - Строка - полное имя объекта, как оно задано в метаданных, напр., Документ.ЗаказКлиента.
//   ОбновляемыеРеквизиты - Массив - неявно возвращаемое значение, имена реквизитов, обновление которых возможно.
//
// Пример:
//	ОбновляемыеРеквизиты.Добавить("Комментарий");
//	Если ПолноеИмя = "Документ.ЗаказКлиента" Тогда
//   	ОбновляемыеРеквизиты.Добавить("Состояние");
//	КонецЕсли;
//
Процедура ПриОпределенииОбновляемыхРеквизитовПроведенногоДокумента(ПолноеИмя, ОбновляемыеРеквизиты) Экспорт
	
	ОбновляемыеРеквизиты.Добавить("Комментарий");
	ОбновляемыеРеквизиты.Добавить("Статус");
	ОбновляемыеРеквизиты.Добавить("Согласован");
	
КонецПроцедуры

// Вызывается при заполнении формы объекта ДО при его создании на основании объекта ИС. Позволяет дозаполнить объект
// ДО способом, не поддерживаемым правилами интеграции.
//
// Параметры:
//   ОбъектИС - Произвольный - ссылка на объект ИС.
//   Форма - ФормаКлиентскогоПриложения - форма объекта 1С:Документооборота.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - применяемое правило.
//
Процедура ПриЗаполненииФормыОбъектаДОПоОбъектуИС(ОбъектИС, Форма, Правило) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при добавлении связи к объекту ИС, связанному с объектом ДО.
// Позволяет дополнить список подходящих объектов, предъявляемый пользователю,
// теми объектами, которые не могут быть определены автоматически по ссылкам
// из шапки или из табличных частей объекта ИС.
//
// Параметры:
//   ОбъектИС - Произвольный - ссылка на объект ИС.
//   ПодходящиеОбъекты - Массив - дополняемый массив объектов ИС, подходящих для добавления связи.
//
Процедура ПриОпределенииПодходящихОбъектовДляДобавленияСвязи(ОбъектИС, ПодходящиеОбъекты) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при получении WSПрокси. Переопределяется, если в конфигурации есть возможность настройки интернет-прокси.
//
// Параметры:
//   ИнтернетПрокси - Неопределено - неявно возвращаемое значение, может быть инициализировано значением
//     типа ИнтернетПрокси.
//
Процедура ПриПолученииWSПрокси(ИнтернетПрокси) Экспорт
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http");
	
КонецПроцедуры

// Вызывается при обновлении БИД, и сверяет корректность состав определяемых типов между собой.
//
// Параметры:
//   Ошибки - Массив из Строка - список ошибок, выявленных в ходе проверки.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
Процедура ПроверитьСоответствиеОпределяемыхТиповМеждуСобой(Ошибки, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при обновлении БИД, и сверяет корректность состав определяемых типов с планом обмена.
//
// Параметры:
//   Ошибки - Массив из Строка - список ошибок, выявленных в ходе проверки.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
Процедура ПроверитьСоответствиеОпределяемыхТиповИПланаОбмена(Ошибки, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается перед записью входящих, исходящих, внутренних документов Документооборота.
// Позволяет выполнить дополнительные проверки перед записью, и отказаться от записи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект. Тип DMInternalDocument, DMIncomingDocument, DMOutgoingDocument.
//   Форма - ФормаКлиентскогоПриложения - форма документа Документооборота.
//   Отказ - Булево - признак отказа от записи документа.
//
Процедура ПередЗаписьюДокумента(Прокси, ОбъектXDTO, Форма, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение таблицы зависимости констант.
//
// Параметры:
//   ТаблицаКонстант - ТаблицаЗначений - см. ИнтеграцияС1СДокументооборот.ЗависимостиКонстант()
//
Процедура ПриПолученииТаблицыЗависимостиКонстант(ТаблицаКонстант) Экспорт
	
	// Согласование через 1С:Документооборот
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьСогласованиеЧерез1СДокументооборот",
		Ложь);
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		"ИспользоватьПроцессыИЗадачи1СДокументооборота",
		Ложь,
		"ИспользоватьСогласованиеЧерез1СДокументооборот",
		Ложь);
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		"ИспользоватьСогласованиеЧерез1СДокументооборот",
		Истина,
		"ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов",
		Ложь);
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		"ИспользоватьСогласованиеЧерез1СДокументооборот",
		Истина,
		"ИспользоватьВнутреннееСогласованиеЗаказовКлиентов",
		Ложь);
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		"ИспользоватьСогласованиеЧерез1СДокументооборот",
		Истина,
		"ИспользоватьВнутреннееСогласованиеКоммерческихПредложений",
		Ложь);
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		"ИспользоватьСогласованиеЧерез1СДокументооборот",
		Истина,
		"ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами",
		Ложь);
	
КонецПроцедуры

// Позволяет переопределить проверку необходимости вывода команды присоединенных файлов из библиотеки
// интеграции с 1С:Документооборотом на форму объекта ИС.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - проверяемая форма.
//   Результат - Булево - неявно возвращаемое значение, результат проверки.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
// Пример:
//	ИмяФормыМассив = СтрРазделить(Форма.ИмяФормы, ".");
//	ИмяТипаОбъектаФормы = СтрШаблон("%1.%2", ИмяФормыМассив[0], ИмяФормыМассив[1]);
//	Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,ИмяТипаОбъектаФормы);
//	
//	Если Правила.Количество() = 0 Тогда
//		// Возможно в переопределяемом модуле прописано автоматическое создание правил для данного типа объекта ИС
//		СозданныеПравила = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьПравилаИнтеграцииАвтоматически(
//			ИмяТипаОбъектаФормы);
//		Если СозданныеПравила.Количество() > 0 Тогда
//			Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,ИмяТипаОбъектаФормы);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Результат = (Правила.Количество() <> 0);
//
Процедура ПриОпределенииНеобходимостиВыводитьКомандуПрисоединенныхФайловДО(Форма, Результат,
		СтандартнаяОбработка) Экспорт
	
	Попытка
		
		ИмяФормыМассив = СтрРазделить(Форма.ИмяФормы, ".");
		ИмяТипаОбъектаФормы = СтрШаблон("%1.%2", ИмяФормыМассив[0], ИмяФормыМассив[1]);
		Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,ИмяТипаОбъектаФормы);
		
		Если Правила.Количество() = 0 Тогда
			// Возможно в переопределяемом модуле прописано автоматическое создание правил для данного типа объекта ИС
			СозданныеПравила = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьПравилаИнтеграцииАвтоматически(
				ИмяТипаОбъектаФормы);
			Если СозданныеПравила.Количество() > 0 Тогда
				Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,ИмяТипаОбъектаФормы);
			КонецЕсли;
		КонецЕсли;
		
		Результат = (Правила.Количество() <> 0);
		
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
КонецПроцедуры

// Дополняет таблицу соответствия поддерживаемых типов.
//
// Параметры:
//   Таблица - ТаблицаЗначений - неявно возвращаемое значение с колонками:
//     * ИмяТипаXDTO - Строка - имя типа XDTO.
//     * ТипОбъектаИС - Тип - тип объекта ИС.
//
// Пример:
//	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMBankAccount", Тип("СправочникСсылка._ДемоБанковскиеСчета"));
//	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMMeasurementUnit", Тип("СправочникСсылка._ДемоЕдиницыИзмерения"));
//	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMContactPerson", Тип("СправочникСсылка._ДемоКонтактныеЛица"));
//	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMCorrespondent", Тип("СправочникСсылка._ДемоКонтрагенты"));
//	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMProduct", Тип("СправочникСсылка._ДемоНоменклатура"));
//	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMOrganization", Тип("СправочникСсылка._ДемоОрганизации"));
//	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMSubdivision", Тип("СправочникСсылка._ДемоПодразделения"));
//	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMCashFlowItem", Тип("СправочникСсылка._ДемоСтатьиДвиженияДенежныхСредств"));
//
Процедура ДополнитьСоответствиеТипов(Таблица) Экспорт
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMBankAccount", Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов"));
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMBankAccount", Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMMeasurementUnit", Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMContactPerson", Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMCorrespondent", Тип("СправочникСсылка.Контрагенты"));
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMPrivatePerson", Тип("СправочникСсылка.ФизическиеЛица"));
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMProduct", Тип("СправочникСсылка.Номенклатура"));
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMOrganization", Тип("СправочникСсылка.Организации"));
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMCashFlowItem", Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMVATRate", Тип("СправочникСсылка.СтавкиНДС"));
	
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMSubdivision", Тип("СправочникСсылка.СтруктураПредприятия"));
	
КонецПроцедуры

#КонецОбласти
