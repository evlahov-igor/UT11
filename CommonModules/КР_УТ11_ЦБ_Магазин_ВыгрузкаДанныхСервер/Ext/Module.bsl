////////////////////////////////////////////////////
//// Объект ОбщийМодуль.КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер
//// Предназначен для выгрузки данных в магазины посредством шины Rabbit
//// Создан: 12.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-1241            
//// Разработка по ФДР С61.005, Интеграция УТ11 ЦБ - УТ11 Магазин
											  								  
#Область ПрограммныйИнтерфейс

Функция ТочкаОбмена() Экспорт 
	Возврат "Stores";
КонецФункции

Функция НомерМагазинаЦентральнойБазы() Экспорт 
	Возврат "00000";
КонецФункции   

Функция ДобавитьНастройкиВыгрузкиОбъектов(ПараметрыВыгрузки) Экспорт

	Если Не Константы.КР_RabbitMQИспользуетсяОбменСМагазинами.Получить() Тогда 
    	Возврат ПараметрыВыгрузки;
	КонецЕсли;	
	
	// Маршрутизация по умолчанию "all". Прописана в методе ПолучитьМаршрутизациюСообщений
	// Маршрутизация по указанному пути применяется только если выгрузка идет из центральной БД 
	// Путь маршрутизации может содержать реквизит табличной части
	// "Номер склада" центральной БД указан в методе НомерМагазинаЦентральнойБазы
	//	Используется для адресации при выгрузки из магазина в центральную БД
	//
	// Для ограничения выгрузки элементов по определенному списку используется метод 
	//	ОграничитьВыгрузкуПредопределеннымиЗначений, ИсключитьВыгрузкуПредопределенныхЗначений  
	// 
	// По умолчанию направление выгрузки стоит ЦБ->Магазин
	//	Для изменения направления выгрузки применяется метод ИзменитьНаправлениеВыгрузки   
	//
	// Маршрутизация устанавливается методом УстановитьПутьКРеквизитуМаршрутизации
	// Маршрутизацию для объекта можно "Наследовать" копированием используя метод СкопироватьМаршрутизацию
	//	но есть тонкости..
	//	Пример такого поведения = РС дополнительные сведения где мы указываем в качестве источника 
	//	 копирования маршрутизации Измерение "Объект"
	
	// Прочие методы как установка отборов, ограничений элеентов к выгрузке см. как реализовано ниже
	
	#Область Константы  
	
	ДобавитьНастройкиВыгрузкиКонстант(ПараметрыВыгрузки);
	
	#КонецОбласти
	
	#Область Справочники
		
	ДобавитьНастройкиВыгрузкиСправочников(ПараметрыВыгрузки);
	
	#КонецОбласти
	
	#Область Документы
	
	ДобавитьНастройкиВыгрузкиДокументов(ПараметрыВыгрузки);  
	
	#КонецОбласти   
	
	#Область ПланыВидовХарактеристик 
	
	ДобавитьНастройкиВыгрузкиПланыВидовХарактеристик(ПараметрыВыгрузки);
	
	#КонецОбласти
	
	#Область РегистрыСведений
	
	ДобавитьНастройкиВыгрузкиРегистрыСведений(ПараметрыВыгрузки);
	
	#КонецОбласти
		
	Возврат ПараметрыВыгрузки; 
	
КонецФункции

// A2105505-2594
Функция ВыполнитьЗапросДанныхКЦентральнойБазе(ТипДанных, Параметры, Получатель = Неопределено) Экспорт 
	
	Если КР_ДополнительныеНастройкиПовтИсп.БазаЯвляетсяЦентральной() Тогда 
		
		ТекстСообщения = 
			НСтр("ru = 'Текущая база является центральной. Данный запрос может быть выполнен только из базы магазина.'");
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;	                                        
	
	Возврат ЗарегистрироватьЗапросДанныхКЦентральнойБазе(ТипДанных, Параметры, Получатель);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиАлгоритмов

// Метод определяет какие реквизиты не будут выгружаться
Функция ИсключитьВыгрузкуРеквизитовОбъектов()
	
	// Используем индексированный список для быстрого поиска в нем
	// Ключ - Имя реквизита или полный путь к нему
	// Значение - любое кроме Неопределено
	
	Состав = Новый Соответствие;   
	
	// По типу   
	Состав[Тип("СправочникСсылка.КлючиАналитикиУчетаНаборов")] = Истина;
	Состав[Тип("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры")] = Истина;
	Состав[Тип("СправочникСсылка.КлючиАналитикиУчетаПартий")] = Истина;
	Состав[Тип("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам")] = Истина;
	Состав[Тип("СправочникСсылка.ВидыЗапасов")] = Истина;
	Состав[Тип("СправочникСсылка.НомераГТД")] = Истина;
	Состав[Тип("СправочникСсылка.КР_Контейнеры")] = Истина;
	
	// По имени
	Состав["ВидыЗапасов"] = Истина; // табличные части
	
	// По полному имени     
	
	// A2105505-2527
	Состав[Метаданные.Справочники.Пользователи.Реквизиты.СвойстваПользователяИБ.ПолноеИмя()] = Истина;
	Состав[Метаданные.Справочники.Пользователи.Реквизиты.ИдентификаторПользователяИБ.ПолноеИмя()] = Истина;
	//
	
	Возврат Состав;
	
КонецФункции	

// Метод определяет какие реквизиты при загрузке 
//	не будут генерировать ошибку поиска ссылки
Функция ИгнорироватьОшибкуПриПоискеРеквизитовОбъектов()
	
	// Используем индексированный список для быстрого поиска в нем
	// Ключ - 	1. Имя реквизита или полный путь к нему 
	//			2. Тип значения реквизита
	// Значение - любое кроме Неопределено
	
	Состав = Новый Соответствие;   
	
	// По типу
	Состав[Тип("СправочникСсылка.Пользователи")] = Истина;
	
	// По имени
	//Состав[ИмяРеквизита] = Истина;
	
	// По полному имени
	Состав[Метаданные.Документы.УпаковочныйЛист.Реквизиты.КР_ДокументОснование.ПолноеИмя()] = Истина;
	
	Возврат Состав;
	
КонецФункции	

#КонецОбласти

#Область НастройкиОбъектов

Процедура ДобавитьНастройкиВыгрузкиКонстант(ПараметрыВыгрузки)

	МетаданныеКонстанты = Метаданные.Константы;  
	
	КонстантыИсключения = Новый Соответствие;
	КонстантыИсключения.Вставить(МетаданныеКонстанты.АдресПубликацииИнформационнойБазыВИнтернете, Истина);
	КонстантыИсключения.Вставить(МетаданныеКонстанты.АдресПубликацииИнформационнойБазыВЛокальнойСети, Истина);
	КонстантыИсключения.Вставить(МетаданныеКонстанты.ЗаголовокСистемы, Истина);
	КонстантыИсключения.Вставить(МетаданныеКонстанты.ИдентификаторИнформационнойБазы, Истина);
	КонстантыИсключения.Вставить(МетаданныеКонстанты.ИспользоватьУчетСебестоимости, Истина);
	КонстантыИсключения.Вставить(МетаданныеКонстанты.ПрефиксУзлаРаспределеннойИнформационнойБазы, Истина);
	КонстантыИсключения.Вставить(МетаданныеКонстанты.ХранитьФайлыВТомахНаДиске, Истина); 
	
	//A2105505-2401
	КонстантыИсключения.Вставить(МетаданныеКонстанты.НастройкиЗакрытияМесяца, Истина); 
	КонстантыИсключения.Вставить(МетаданныеКонстанты.НомерЗаданияКЗакрытиюМесяца, Истина); 
	КонстантыИсключения.Вставить(МетаданныеКонстанты.НомерЗаданияКРасчетуСебестоимости, Истина); 
	//
	
	// КР_
	КонстантыИсключения.Вставить(МетаданныеКонстанты.КР_БазаЯвляетсяЦентральной, Истина);
	КонстантыИсключения.Вставить(МетаданныеКонстанты.КР_ВерсияЛокализацииСистемы, Истина);
	КонстантыИсключения.Вставить(МетаданныеКонстанты.КР_RabbitMQИспользуетсяОбменСМагазинами, Истина); 
	//
	
	// A2105505-2509
	КонстантыИсключения.Вставить(МетаданныеКонстанты.ВыполнятьЗамерыПроизводительности, Истина); 
	КонстантыИсключения.Вставить(МетаданныеКонстанты.злВыполнятьЗамерыПроизводительностиОткрытияФорм, Истина); 
	//
	
	Для Каждого МетаданныеКонстанта Из МетаданныеКонстанты Цикл 
		
		Если КонстантыИсключения[МетаданныеКонстанта] <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеКонстанта);  
		
	КонецЦикла;	
				
КонецПроцедуры

Процедура ДобавитьНастройкиВыгрузкиСправочников(ПараметрыВыгрузки) 

	// см. опивание использования настроек и доп. методов 
	//	в начале метода ДобавитьНастройкиВыгрузкиОбъектов 
	
	МетаданныеСправочники = Метаданные.Справочники;

	// Объекты с выгрузкой по направлению ЦБ-Магазин во все магазины (настройка по умолчанию)
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КоллекцииНоменклатуры);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Номенклатура);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Склады);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СтруктураПредприятия);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ХарактеристикиНоменклатуры);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ХарактеристикиНоменклатурыДляЦенообразования);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_Маршруты);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.БизнесРегионы);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.БонусныеПрограммыЛояльности);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Валюты);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ВариантыОтчетов);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ВидыДокументовФизическихЛиц);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ВидыКартЛояльности);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ВидыКонтактнойИнформации);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ВидыМехаГИСМ);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ВидыНоменклатуры);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ВидыПодарочныхСертификатов);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ВидыЦен);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ВнешниеКомпоненты);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ГрафикиОплаты);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ГруппыДоступа);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ГруппыПользователей);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ДополнительныеОтчетыИОбработки);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ДрайверыОборудования);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ЗначенияСвойствОбъектов);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ЗначенияСвойствОбъектовИерархия);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ЗоныДоставки);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ГрафикиОплаты);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КатегорииЭксплуатации);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КлассификаторТНВЭД);   
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КлючевыеОперации);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Марки);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.НаборыДополнительныхРеквизитовИСведений);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.НаборыУпаковок);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.НастройкиХозяйственныхОпераций);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Организации);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ПапкиФайлов);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ПараметрыКонтекстныхФункциональныхОпций);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ПользовательскиеНастройкиОтчетов);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ПредопределенныеВариантыОтчетов);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ПредопределенныеВариантыОтчетовРасширений);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Приоритеты);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Производители);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ПроизводственныеКалендари);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ПрофилиГруппДоступа);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ПрочиеРасходы);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СезонныеГруппы);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СезонныеГруппыБизнесРегионов);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СкидкиНаценки);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СкладскиеГруппыНоменклатуры);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СоглашенияСКлиентами);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СтавкиНДС);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СтатьиДвиженияДенежныхСредств);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СтраныМира);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ТипоразмерыЯчеек);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ТипыТранспортныхСредств);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ТоварныеКатегории);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ТранспортныеСредства);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.УпаковкиЕдиницыИзмерения);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ФорматыМагазинов);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ШаблоныЭтикетокИЦенников);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ЯзыкиПечатныхФорм);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_Цвета);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_Линии);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_Сезоны);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_Размеры);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_ТипыВладенияТранспортнымиСредствами);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_МестаРазмещения);       
	
	// A2105505-2532
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СегментыНоменклатуры);
	//
	
	// A2105505-2136
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ТомаХраненияФайлов);
	//	
	
	// Сложные варианты настройки      
			
	// КартыЛояльности
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КартыЛояльности);  
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
		
	// КР_ДополнительныеНастройкиСистемы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_ДополнительныеНастройкиСистемы); 
	ДополнительныеНастройкиСистемы = Справочники.КР_ДополнительныеНастройкиСистемы;
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.АнализируемыйПериодДляРасчетаКассовыхЛимитов); 
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.МагазиныДляАвтоматическогоРасчетаКассовыхЛимитов);	
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.СкладыТекущейБазыДанных);
	// Группа ВнутренняяЛогистика
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.ЗоныДоставкиМаркетплейсы);	
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.ЗоныДоставкиРегионы);	
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.ЗоныДоставкиСегменты);	
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.ПолучателиИзмененнойКонтактнойИнформацииМагазина);	
	// Группа Закупки
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.СкладПоступления);	
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.СтатьяРасходовСборГТД);	
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.СтатьяРасходовШтрафГТД);	
	// Группа Маркетплейсы
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.Lamoda);	   
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.Ozon);	   
	МассивСсылок.Добавить(ДополнительныеНастройкиСистемы.WB);	   
	//
	ИсключитьВыгрузкуПредопределенныхЗначений(НастройкаВыгрузки, МассивСсылок);
	
	// КассовыеКниги
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КассовыеКниги);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "КР_Подразделение.КР_Склад.КР_НомерМагазина");
	
	// Кассы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Кассы);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Подразделение.КР_Склад.КР_НомерМагазина");
	
	// КассыККМ
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КассыККМ);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Подразделение.КР_Склад.КР_НомерМагазина");
		
	// Контрагенты
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Контрагенты); 
	МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.Контрагенты.РозничныйПокупатель);
	ОграничитьВыгрузкуПредопределеннымиЗначений(НастройкаВыгрузки, МассивСсылок);
	
	// ОбластиХранения
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ОбластиХранения);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Владелец.КР_НомерМагазина");
	
	// Партнеры
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Партнеры);
	МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.Партнеры.РозничныйПокупатель);
	ОграничитьВыгрузкуПредопределеннымиЗначений(НастройкаВыгрузки, МассивСсылок);
	
	// ПравилаОбменаСПодключаемымОборудованиемOffline
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.ПравилаОбменаСПодключаемымОборудованиемOffline);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");   
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// СкладскиеПомещения
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СкладскиеПомещения);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Владелец.КР_НомерМагазина");   
	
	// СкладскиеЯчейки
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СкладскиеЯчейки);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Владелец.КР_НомерМагазина");   
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ФизическиеЛица
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ФизическиеЛица);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "КР_Подразделение.КР_Склад.КР_НомерМагазина");
	
	// Назначения
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Назначения);   
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Заказ.СкладПолучатель.КР_НомерМагазина", 
		Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПеремещение"));
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Заказ.СкладОтправитель.КР_НомерМагазина",
		Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПеремещение"));
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Заказ.Склад.КР_НомерМагазина",
		Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, ДокументСсылка.ЗаказНаСборку, "
			+ "ДокументСсылка.ЗаказНаВнутреннееПотребление, ДокументСсылка.ЗаказКлиента"));
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, Истина);	   
	
	// ОбъектыРасчетов 
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ОбъектыРасчетов);   
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Объект.Касса.Подразделение.КР_Склад.КР_НомерМагазина", 
		Новый ОписаниеТипов("ДокументСсылка.ПриходныйКассовыйОрдер"));   
	// Добовляем отбор                 
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкаВыгрузки.ДополнительныеПараметры.Отбор,
    	"Партнер", Справочники.Партнеры.РозничныйПокупатель); 
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// A2105505-2136
	
	// ВидыНоменклатурыПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ВидыНоменклатурыПрисоединенныеФайлы);
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// НоменклатураПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.НоменклатураПрисоединенныеФайлы);  
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// СертификатыНоменклатурыПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.СертификатыНоменклатурыПрисоединенныеФайлы);
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// УстановкаЦенНоменклатурыПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.УстановкаЦенНоменклатурыПрисоединенныеФайлы);
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// ФизическиеЛицаПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ФизическиеЛицаПрисоединенныеФайлы);
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// АктОРасхожденияхПослеПеремещенияПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.АктОРасхожденияхПослеПеремещенияПрисоединенныеФайлы);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ВладелецФайла.СкладОтправитель.КР_НомерМагазина");
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ВладелецФайла.СкладПолучатель.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// ВнутреннееПотреблениеТоваровПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.ВнутреннееПотреблениеТоваровПрисоединенныеФайлы);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ВладелецФайла.Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// ЗаказНаВнутреннееПотреблениеПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.ЗаказНаВнутреннееПотреблениеПрисоединенныеФайлы);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ВладелецФайла.Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// ЗаказНаПеремещениеПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.ЗаказНаПеремещениеПрисоединенныеФайлы);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ВладелецФайла.СкладОтправитель.КР_НомерМагазина");
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ВладелецФайла.СкладПолучатель.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.ЗаявкаНаРасходованиеДенежныхСредствПрисоединенныеФайлы);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ВладелецФайла.Подразделение.КР_Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// ТранспортнаяНакладнаяПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.ТранспортнаяНакладнаяПрисоединенныеФайлы);  
	СкопироватьМаршрутизацию(НастройкаВыгрузки, ПараметрыВыгрузки, 
		МетаданныеСправочники.ТранспортнаяНакладнаяПрисоединенныеФайлы.Реквизиты.ВладелецФайла);	
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// КР_ПересчетТоваровПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.КР_ПересчетТоваровПрисоединенныеФайлы);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ВладелецФайла.Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// КР_ПриходныйКассовыйОрдерПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.КР_ПриходныйКассовыйОрдерПрисоединенныеФайлы);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ВладелецФайла.Касса.Подразделение.КР_Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	
	// КР_РасходныйКассовыйОрдерПрисоединенныеФайлы
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.КР_РасходныйКассовыйОрдерПрисоединенныеФайлы);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ВладелецФайла.Касса.Подразделение.КР_Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	   
	//                 
	
	// A2105505-2325
	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.Пользователи);
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ПравилаОбменаСПодключаемымОборудованиемOffline
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.ПравилаОбменаСПодключаемымОборудованиемOffline);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Добовляем отбор                 
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкаВыгрузки.ДополнительныеПараметры.Отбор,
    	"ТипПодключаемогоОборудования", Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн); 
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// НастройкиРМК
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаданныеСправочники.НастройкиРМК);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "КассыККМ.КассаККМ.Подразделение.КР_Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	//  
	
	// A2105505-2348
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.РабочиеМеста);
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Ложь, 		Истина);  
	//
	
	// --> Евлахов Игорь Николаевич (Начало) 21.02.2024
	// Задача #3802
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ОтветственныеЛицаОрганизаций);
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Ложь);
	// <-- Евлахов Игорь Николаевич (Конец) 21.02.2024
	
	// --> Евлахов Игорь Николаевич (Начало) 30.07.2024
	// Задача #4473
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_ГруппыАналоговТоваров);	
	// <-- Евлахов Игорь Николаевич (Конец) 30.07.2024
	
	// --> Евлахов Игорь Николаевич (Начало) 19.09.2024
	// Задача #4569
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_ЗоныПересчетаТоваров);
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);
	// <-- Евлахов Игорь Николаевич (Конец) 19.09.2024
	
	// --> Евлахов Игорь Николаевич (Начало) 07.10.2024
	// Задача #4537
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.злТипыПоверхностейРасположенияТоваров);
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);
	// <-- Евлахов Игорь Николаевич (Конец) 07.10.2024
	
КонецПроцедуры

Процедура ДобавитьНастройкиВыгрузкиДокументов(ПараметрыВыгрузки) 

	// см. опивание использования настроек и доп. методов 
	//	в начале метода ДобавитьНастройкиВыгрузкиОбъектов 
	
	МетаданныеДокументы = Метаданные.Документы; 
	
	// Объекты с выгрузкой по направлению ЦБ-Магазин во все магазины (настройка по умолчанию)
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.УстановкаЦенНоменклатуры);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.КР_УстановкаМинимальнойПрезентации);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.КР_УстановкаМестРазмещения);

	// Сложные варианты настройки      

	// ИзменениеАссортимента
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ИзменениеАссортимента); 
	// A2105505-2442
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ОбъектПланирования.КР_НомерМагазина", 
		Новый ОписаниеТипов("СправочникСсылка.Склады")); 
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ОбъектПланирования._МашрутПоУмолчанию_", 
		Новый ОписаниеТипов("СправочникСсылка.ФорматыМагазинов")); 
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ЗаказНаПеремещение
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ЗаказНаПеремещение);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "СкладОтправитель.КР_НомерМагазина");
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "СкладПолучатель.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ЗаказНаВнутреннееПотребление
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ЗаказНаВнутреннееПотребление);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ПеремещениеТоваров
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПеремещениеТоваров);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "СкладОтправитель.КР_НомерМагазина");
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "СкладПолучатель.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ОтборРазмещениеТоваров
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ОтборРазмещениеТоваров);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ВнутреннееПотреблениеТоваров
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ВнутреннееПотреблениеТоваров);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// СписаниеНедостачТоваров
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.СписаниеНедостачТоваров);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ОприходованиеИзлишковТоваров
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ОприходованиеИзлишковТоваров);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ПересортицаТоваров
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПересортицаТоваров);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ИнвентаризационнаяОпись
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ИнвентаризационнаяОпись);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// --> Евлахов Игорь Николаевич (Начало) 27.08.2024
	// Задача #4553
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);
	// <-- Евлахов Игорь Николаевич (Конец) 27.08.2024
	
	// ПересчетТоваров
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПересчетТоваров);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ОтчетОРозничныхПродажах
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ОтчетОРозничныхПродажах);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ПриходныйКассовыйОрдер
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПриходныйКассовыйОрдер);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Касса.Подразделение.КР_Склад.КР_НомерМагазина");   
	// Добовляем отбор                 
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкаВыгрузки.ДополнительныеПараметры.Отбор,
    	"КР_ПоступлениеВКассуККМ", Ложь); 	
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// РасходныйКассовыйОрдер
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.РасходныйКассовыйОрдер);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Касса.Подразделение.КР_Склад.КР_НомерМагазина");
	// Добовляем отбор                 
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкаВыгрузки.ДополнительныеПараметры.Отбор,
    	"КР_ВозвратИзКассыККМ", Ложь); 	
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ЛистКассовойКниги
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ЛистКассовойКниги);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, 
		"КассовыеОрдера.Документ.Касса.Подразделение.КР_Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ИнвентаризацияНаличныхДенежныхСредств
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ИнвентаризацияНаличныхДенежныхСредств);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Кассы.Касса.Подразделение.КР_Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ЗаданиеНаПеревозку
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ЗаданиеНаПеревозку);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// Сторно
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.Сторно);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "СторнируемыйДокумент.СкладОтправитель.КР_НомерМагазина",
		Новый ОписаниеТипов("ДокументСсылка.ПеремещениеТоваров"));
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "СторнируемыйДокумент.СкладПолучатель.КР_НомерМагазина",
		Новый ОписаниеТипов("ДокументСсылка.ПеремещениеТоваров"));
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "СторнируемыйДокумент.Касса.Подразделение.КР_Склад.КР_НомерМагазина",
		Новый ОписаниеТипов("ДокументСсылка.ПриходныйКассовыйОрдер, ДокументСсылка.РасходныйКассовыйОрдер"));
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "СторнируемыйДокумент.Склад.КР_НомерМагазина",
		Новый ОписаниеТипов("ДокументСсылка.ВнутреннееПотреблениеТоваров, ДокументСсылка.ВозвратТоваровОтКлиента, "
			+ "ДокументСсылка.ПриобретениеТоваровУслуг, ДокументСсылка.ВозвратТоваровПоставщику, "
			+ "ДокументСсылка.ОтгрузкаТоваровСХранения, ДокументСсылка.ПоступлениеТоваровНаСклад, "
			+ "ДокументСсылка.СписаниеНедостачТоваров, ДокументСсылка.ПоступлениеТоваровОтХранителя, "
			+ "ДокументСсылка.КорректировкаРеализации, ДокументСсылка.РеализацияТоваровУслуг, "
			+ "ДокументСсылка.ПересортицаТоваров, ДокументСсылка.КорректировкаПриобретения, "
			+ "ДокументСсылка.ОприходованиеИзлишковТоваров"));
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// УпаковочныйЛист
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.УпаковочныйЛист); 
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);   
	// Добовляем отбор                 
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкаВыгрузки.ДополнительныеПараметры.Отбор,
    	"Вид", Перечисления.ВидыУпаковочныхЛистов.Исходящий);               
	// A2105505-2594
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "КР_ДокументОснование.СкладОтправитель.КР_НомерМагазина",
		Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПеремещение"));
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "КР_ДокументОснование.СкладПолучатель.КР_НомерМагазина",
		Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПеремещение"));
	//
	
	// АктОРасхожденияхПослеПеремещения
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.АктОРасхожденияхПослеПеремещения);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "СкладОтправитель.КР_НомерМагазина");
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "СкладПолучатель.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// КР_ЗональныйПересчетТоваров
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.КР_ЗональныйПересчетТоваров);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "ЗонаПересчета.Владелец.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	
	// ЗаявкаНаРасходованиеДенежныхСредств
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ЗаявкаНаРасходованиеДенежныхСредств);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Подразделение.КР_Склад.КР_НомерМагазина");       
	
	// A2105505-2436  
	
	// ТранспортнаяНакладная
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ТранспортнаяНакладная);
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "КР_Отправитель.КР_НомерМагазина", 
		Новый ОписаниеТипов("СправочникСсылка.Склады"));
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "КР_Получатель.КР_НомерМагазина", 
		Новый ОписаниеТипов("СправочникСсылка.Склады"));
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);  
	//
	
КонецПроцедуры

Процедура ДобавитьНастройкиВыгрузкиПланыВидовХарактеристик(ПараметрыВыгрузки) 

	// см. опивание использования настроек и доп. методов 
	//	в начале метода ДобавитьНастройкиВыгрузкиОбъектов 
	
	МетаПланыВидовХарактеристик = Метаданные.ПланыВидовХарактеристик;

	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаПланыВидовХарактеристик.СтатьиРасходов);
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаПланыВидовХарактеристик.СтатьиДоходов);
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения);
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаПланыВидовХарактеристик.РазделыДатЗапретаИзменения);
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаПланыВидовХарактеристик.СтатьиАктивовПассивов);
	
КонецПроцедуры

Процедура ДобавитьНастройкиВыгрузкиРегистрыСведений(ПараметрыВыгрузки) 

	// см. опивание использования настроек и доп. методов 
	//	в начале метода ДобавитьНастройкиВыгрузкиОбъектов 
	
	МетаРегистрыСведений = Метаданные.РегистрыСведений;
	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ДанныеПроизводственногоКалендаря);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ДействиеСкидокНаценокПоНоменклатуре);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.КалендарныеГрафики);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.СтавкиНДСНоменклатуры);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.КР_СоставГруппАналоговТоваров);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.КР_ПриоритетыРазмеров);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.КР_ПриоритетыРазмеровТоварнойГруппы);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.АдресныеОбъекты);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ДатыЗапретаИзменения);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ДействиеСкидокНаценок);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.НастройкаКонтроляОбеспечения);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.НастройкиВариантовОтчетов);
	// A2105505-2509
	//НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.НастройкиВерсионированияОбъектов);  
	//
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.НастройкиОчисткиФайлов);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.НастройкиПечатиОбъектов);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ОсновныеСтавкиНДС);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ПользовательскиеМакетыПечати);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.РучныеИзмененияГрафиковРаботы);
	
	// ИсторияИзмененияФорматовМагазинов
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ИсторияИзмененияФорматовМагазинов);  
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	
	// НастройкиАдресныхСкладов
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.НастройкиАдресныхСкладов);   
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	
	// ПользовательскиеНастройкиДоступаКОбработкам
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, 
		МетаРегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам);  
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	
	
	// ПравилаРазмещенияТоваровВЯчейках
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ПравилаРазмещенияТоваровВЯчейках);   
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Склад.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	
	
	// СведенияОПользователях                          
	// Правила регистрации объекта получать по измерению «Пользователь» аналогично справочнику «Пользователи»
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.СведенияОПользователях);   
	
	// СостоянияВнутреннихЗаказов
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.СостоянияВнутреннихЗаказов);   
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Заказ.СкладПолучатель.КР_НомерМагазина", 
		Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПеремещение"));
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Заказ.СкладОтправитель.КР_НомерМагазина",
		Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПеремещение"));
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Заказ.Склад.КР_НомерМагазина",
		Новый ОписаниеТипов("ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказНаВнутреннееПотребление"));
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	  
	
	// СостоянияПересчетовЯчеек
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.СостоянияПересчетовЯчеек);   
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Ячейка.Владелец.КР_НомерМагазина");
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	  
	
	// КР_ГрафикиИнкассации
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.КР_ГрафикиИнкассации);   
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Магазин.КР_НомерМагазина");
	
	// КР_КассовыеЛимиты
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.КР_КассовыеЛимиты);   
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Магазин.КР_НомерМагазина");

	// A2105505-2136

	// ДвоичныеДанныеФайлов    
 	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ДвоичныеДанныеФайлов);   

	// Рефакторинг на новый механизм
	// На всякий случай оставил старый код
	// Так как регистр содержит ссылки на объекты которые мы выгружаем по правилам
	//	чтоб не дублировать эти правила, скопируем их из уже добавленных в параметры выгрузки 
	МетаданныеКорневогоРеквизита = МетаРегистрыСведений.ДвоичныеДанныеФайлов.Измерения.Файл;
	СкопироватьМаршрутизацию(НастройкаВыгрузки, ПараметрыВыгрузки, МетаданныеКорневогоРеквизита);	
	// Установим направление выгрузки 			   ЦБ-Магазин   Магазин-ЦБ
	ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, Истина, 		Истина);	  
	//

	// A2105505-2382
	
	// ДополнительныеСведения
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ДополнительныеСведения);   
	
	// Так как регистр содержит ссылки на объекты которые мы выгружаем по правилам
	//	чтоб не дублировать эти правила, скопируем их из уже добавленных в параметры выгрузки 
	МетаданныеКорневогоРеквизита = МетаРегистрыСведений.ДополнительныеСведения.Измерения.Объект;
	СкопироватьМаршрутизацию(НастройкаВыгрузки, ПараметрыВыгрузки, МетаданныеКорневогоРеквизита);	
	
	//
	
	// --> Евлахов Игорь Николаевич (Начало) 28.12.2023
	// Задача #3516
	// злПланыПродажПоМагазинам
	НастройкаВыгрузки = НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.злПланыПродажПоМагазинам);   
	УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, "Магазин.КР_НомерМагазина");
	// <-- Евлахов Игорь Николаевич (Конец) 28.12.2023
	
	// --> Евлахов Игорь Николаевич (Начало) 18.06.2024
	// Задача #3598
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.злХранилищеНастроекДанных);
	// <-- Евлахов Игорь Николаевич (Конец) 18.06.2024
	
	// --> Евлахов Игорь Николаевич (Начало) 05.07.2024
	// Задача #3835
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.злПравилаСопоставленияСтатейДвиженияДенежныхСредств);
	// <-- Евлахов Игорь Николаевич (Конец) 05.07.2024
	
	// --> Евлахов Игорь Николаевич (Начало) 30.07.2024
	// Задача #4450
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаРегистрыСведений.ШтрихкодыНоменклатуры);
	// <-- Евлахов Игорь Николаевич (Конец) 30.07.2024
	
КонецПроцедуры	

Функция НастройкиВыгрузки(ПараметрыВыгрузки, ОбъектМетаданные)
	
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданные.ПолноеИмя();
	
	ШаблонПравилоРегистрации = "КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.ОбщиеПравилаРегистрации";
	ШаблонПравилоВыгрузки = "КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.ОбщиеПравилаВыгрузки";
	
	НастройкаВыгрузки = ПараметрыВыгрузки.Добавить();
	НастройкаВыгрузки.ИмяМД = ПолноеИмяОбъектаМетаданных;
	НастройкаВыгрузки.ТочкаОбмена = ТочкаОбмена();
	НастройкаВыгрузки.МассивСообщений = Новый Массив;
	НастройкаВыгрузки.ПравилоРегистрации = ШаблонПравилоРегистрации;
	НастройкаВыгрузки.ПравилоВыгрузки = ШаблонПравилоВыгрузки;
	НастройкаВыгрузки.ДополнительныеПараметры = Новый Структура;   
	
	// Устанавливаем дополнительные параметы
	ДополнительныеПараметры = НастройкаВыгрузки.ДополнительныеПараметры;    
	
	// Маршрутизация
	// По умолчанию единственное направление ЦБ-Магазин
	ДополнительныеПараметры.Вставить("НаправлениеВыгрузки", 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаправлениеВыбрузки_ЦБМагазин()));

	// Массив путей к реквизитам для определения получателей объекта
	ДополнительныеПараметры.Вставить("ИсточникиМаршрутизации", Новый Массив);
	//
	
	// Условия выгрузки
	
	// Простое ограничение на значения
	ДополнительныеПараметры.Вставить("ОграничитьВыгрузкуЗначениями", Новый Массив);
	ДополнительныеПараметры.Вставить("ИсключитьВыгрузкуЗначений", Новый Массив);
	//
	
	// Сложные условия посредством использования отборов СКД
	ДополнительныеПараметры.Вставить("Отбор", Новый ОтборКомпоновкиДанных);
	//
	
	Возврат НастройкаВыгрузки;
	
КонецФункции

#КонецОбласти

#Область МаршрутизацияИУсловияВыгрузки

Функция НаправлениеВыбрузки_ЦБМагазин()
	Возврат "ЦБ_МАГАЗИН";
КонецФункции

Функция НаправлениеВыбрузки_МагазинЦБ()
	Возврат "МАГАЗИН_ЦБ";
КонецФункции

Процедура ИзменитьНаправлениеВыгрузки(НастройкаВыгрузки, ЦБМагазин, МагазинЦБ)
	
	ДополнительныеПараметры = НастройкаВыгрузки.ДополнительныеПараметры; 
	НаправлениеВыгрузки = ДополнительныеПараметры.НаправлениеВыгрузки;
	НаправлениеВыгрузки.Очистить();
	
	Если ЦБМагазин Тогда 
		НаправлениеВыгрузки.Добавить(НаправлениеВыбрузки_ЦБМагазин());
	КонецЕсли;  
	
	Если МагазинЦБ Тогда 
		НаправлениеВыгрузки.Добавить(НаправлениеВыбрузки_МагазинЦБ());
	КонецЕсли;
	
КонецПроцедуры

Процедура ОграничитьВыгрузкуПредопределеннымиЗначений(НастройкаВыгрузки, МассивЗначений)
	
	ДополнительныеПараметры = НастройкаВыгрузки.ДополнительныеПараметры; 
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ДополнительныеПараметры.ОграничитьВыгрузкуЗначениями,
		МассивЗначений
	);
	
КонецПроцедуры

Процедура ИсключитьВыгрузкуПредопределенныхЗначений(НастройкаВыгрузки, МассивЗначений)
	
	ДополнительныеПараметры = НастройкаВыгрузки.ДополнительныеПараметры; 
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ДополнительныеПараметры.ИсключитьВыгрузкуЗначений,
		МассивЗначений
	);
	
КонецПроцедуры

Функция ОбъектПопадаетПодОграниченияВыгрузки(Источник, НастройкаВыгрузки, ВыгрузкаВЦентральнуюБазу)
	
	ДополнительныеПараметры = НастройкаВыгрузки.ДополнительныеПараметры; 
	
	// Проверим на прохождение по ограничению массива на выгрузку
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ОграничитьВыгрузкуЗначениями)
		И ДополнительныеПараметры.ОграничитьВыгрузкуЗначениями.Найти(Источник.Ссылка) = Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	// Проверим на исключение на выгрузку
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИсключитьВыгрузкуЗначений)
		И ДополнительныеПараметры.ИсключитьВыгрузкуЗначений.Найти(Источник.Ссылка) <> Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	// Проверим на установленные отборы 
	ЭлементыОтбора = ДополнительныеПараметры.Отбор.Элементы;
	Если ЗначениеЗаполнено(ЭлементыОтбора)
		И Не ЗначениеУсловия(ДополнительныеПараметры.Отбор.Элементы, Источник) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если КР_ДополнительныеНастройкиПовтИсп.БазаЯвляетсяЦентральной() Тогда 
		ТребуемоеНаправление = НаправлениеВыбрузки_ЦБМагазин();
		ВыгрузкаВЦентральнуюБазу = Ложь; 
	Иначе
		ТребуемоеНаправление = НаправлениеВыбрузки_МагазинЦБ();
		ВыгрузкаВЦентральнуюБазу = Истина; 
	КонецЕсли;	
	
	ВозвможныеНаправленияВыгрузки = ДополнительныеПараметры.НаправлениеВыгрузки; 
	НаправлениеВыгрузкиЕстьВДоступных = (ВозвможныеНаправленияВыгрузки.Найти(ТребуемоеНаправление) <> Неопределено);
	
	Возврат Не НаправлениеВыгрузкиЕстьВДоступных;
	
КонецФункции	

Процедура УстановитьПутьКРеквизитуМаршрутизации(НастройкаВыгрузки, ПутьКРеквизитуМаршрутизации, 
	ОграничениеТипа = Неопределено)

	ДополнительныеПараметры = НастройкаВыгрузки.ДополнительныеПараметры;   
	
	// Закладываем пошаговое вычсление маршрута
	// Понадобится при настедовании правил для подчиненных реквизитов
	//	либо когда условие на ограничение типа надо установить на реквизит отличный от корневого
	// Каждый элемент массива - правило получения маршрута
	ШагиМаршрута = Новый Массив;
	
	ШагМаршрута = Новый Структура; 
	ШагиМаршрута.Добавить(ШагМаршрута);
	
	ШагМаршрута.Вставить("Путь", ПутьКРеквизитуМаршрутизации); 
	Если ОграничениеТипа <> Неопределено Тогда 
		ШагМаршрута.Вставить("ОграничениеТипа", ОграничениеТипа);
	КонецЕсли;
	
	ДополнительныеПараметры.ИсточникиМаршрутизации.Добавить(ШагиМаршрута);

КонецПроцедуры

Процедура СкопироватьМаршрутизацию(НастройкаВыгрузки, ПараметрыВыгрузки, МетаданныеКорневогоРеквизита)
	
	ИмяКорневогоРеквизита = МетаданныеКорневогоРеквизита.Имя;
	ТипыОбъектовИсточников = МетаданныеКорневогоРеквизита.Тип.Типы(); 
	
	ДополнительныеПараметры = НастройкаВыгрузки.ДополнительныеПараметры;   
	
	Отбор = Новый Структура("ТочкаОбмена, ИмяМД", ТочкаОбмена());
	Для Каждого ТипИсточник Из ТипыОбъектовИсточников Цикл 
	
		ИмяОбъектаИсточника = Метаданные.НайтиПоТипу(ТипИсточник).ПолноеИмя();
		Отбор.ИмяМД = ИмяОбъектаИсточника;
		
		НайденныеНастройки = ПараметрыВыгрузки.НайтиСтроки(Отбор);
		Для Каждого НайденнаяНастройка Из НайденныеНастройки Цикл 
			
			ИсходныеИсточникиМаршрутизации = НайденнаяНастройка.ДополнительныеПараметры.ИсточникиМаршрутизации;

			// << 24.09.2024 Петухов А.В., Фактор, #4640
			Если ИсходныеИсточникиМаршрутизации.Количество() = 0 Тогда
				//Для этого типа данных не заполнены ИсточникиМаршрутизации и должно отрабатывать общее правило
				ШагиМаршрута = Новый Массив;  
				ШагМаршрута = Новый Структура;
				ШагиМаршрута.Добавить(ШагМаршрута);
				
				ШагМаршрута.Вставить("Путь", ИмяКорневогоРеквизита + "._МашрутПоУмолчанию_"); 
				ОграничениеТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипИсточник));
				ШагМаршрута.Вставить("ОграничениеТипа", ОграничениеТипа);				
				
				ДополнительныеПараметры.ИсточникиМаршрутизации.Добавить(ШагиМаршрута);
				
				Продолжить;
			КонецЕсли;
			// >> 24.09.2024 Петухов А.В., Фактор, #4640
			
			Для Каждого ИсходныеШагиМаршрута Из ИсходныеИсточникиМаршрутизации Цикл 
				
				ШагиМаршрута = Новый Массив;  
				ШагМаршрута = Новый Структура;
				ШагиМаршрута.Добавить(ШагМаршрута);
				
				ШагМаршрута.Вставить("Путь", ИмяКорневогоРеквизита); 
				ОграничениеТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипИсточник));
				ШагМаршрута.Вставить("ОграничениеТипа", ОграничениеТипа);				
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ШагиМаршрута, ИсходныеШагиМаршрута);
					
				ДополнительныеПараметры.ИсточникиМаршрутизации.Добавить(ШагиМаршрута);
				
			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЦикла;


КонецПроцедуры

Функция ЗначенияМаршрутизацииПоПолномуПути(Данные, ПутьКРеквизиту)

	МассивЗначений = Новый Массив; 
	
	ДанныеТип = ТипЗнч(Данные);   
	
	// Если передали объект не метаданных тогда ничего не делаем
	ДанныеМетаданные = Метаданные.НайтиПоТипу(ДанныеТип);  
	Если ДанныеМетаданные = Неопределено Тогда 
		Возврат МассивЗначений;  
	КонецЕсли;  
	
	ДанныеМетаданныеПолноеИмя = ДанныеМетаданные.ПолноеИмя();
	Если ОбщегоНазначения.ЭтоСсылка(ДанныеТип) Тогда 			
	
		ОсновнаяТаблица = ДанныеМетаданные.ПолноеИмя();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(%2, 0) КАК Значение
		|ИЗ
		|	%1
		|ГДЕ
		|	Ссылка = &Данные";  
		
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, ОсновнаяТаблица, ПутьКРеквизиту);    
		
	ИначеЕсли СтрНайти(ДанныеМетаданныеПолноеИмя, ".ТабличнаяЧасть.") Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.%1 КАК КорневойРеквизит
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	&Данные КАК Т;
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КорневойРеквизит.%2, 0) КАК Значение
		|ИЗ
		|	Данные";    
		
		МассивШагов = СтрРазделить(ПутьКРеквизиту, ".");
		ИмяКорневогоРеквизита = МассивШагов[0];  
		МассивШагов.Удалить(0);
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяКорневогоРеквизита, СтрСоединить(МассивШагов, "."));    
		
	Иначе
		ТекстИсключения = НСтр("ru = 'Ошибка выполнения метода ЗначенияМаршрутизацииПоПолномуПути'");
		ВызватьИсключение ТекстИсключения;                
	КонецЕсли;	
			
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Данные", Данные);
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат МассивЗначений;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
	
		Значение = ВыборкаДетальныеЗаписи.Значение;
		// Данное условие отрабатывает если получено значение реквизита из ссылки БД
		//	или из таблицы (табличная часть), переданной в качестве параметра
		Если ТипЗнч(Значение) <> Тип("РезультатЗапроса") Тогда   
			Если Не ЗначениеЗаполнено(Значение) Тогда 
				Продолжить;
			КонецЕсли;	
			МассивЗначений.Добавить(Значение);  
		// Иначе была осуществлена выборка данных из БД из поля табличной части.	
		Иначе    
			ВыборкаЗначений = Значение.Выбрать();
			Пока ВыборкаЗначений.Следующий() Цикл   
				// Первое поле
				Если Не ЗначениеЗаполнено(ВыборкаЗначений[0]) Тогда 
					Продолжить;
				КонецЕсли;	
				МассивЗначений.Добавить(ВыборкаЗначений[0]);
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

Процедура ДобавитьМаршрутизацию(МаршрутизацияСообщений, Маршрутизация, ЭтоУдаление = Ложь)
	
	// МаршрутизацияСообщений - Соответствие где ключ - маршрут, параметры маршрутизации 
	// ЭтоУдаление = Истина Игнорируется если есть маршрут "без удаления"
	
	ПараметрыМаршрутизации = МаршрутизацияСообщений[Маршрутизация];
	Если ПараметрыМаршрутизации = Неопределено Тогда 
		ПараметрыМаршрутизации = Новый Структура;
		МаршрутизацияСообщений[Маршрутизация] = ПараметрыМаршрутизации;  
	Иначе
		Если ЭтоУдаление Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ПараметрыМаршрутизации.Вставить("ЭтоУдаление", ЭтоУдаление);
	
КонецПроцедуры

Функция ПолучитьМаршрутизациюСообщений(Источник, НастройкаВыгрузки)
	
	МаршрутизацияПоУмолчанию = "all"; 
	МаршрутизацияКТекущейБД = КР_ДополнительныеНастройкиПовтИсп.МассивМаршрутизацийКТекущейБазеДанных();
	
	МаршрутизацияСообщений = Новый Соответствие;  
	
	// Проверяем на исключение объекта из выгрузки 
	// Попутно получаем признак того что это выгрузка в центральную базу
	ВыгрузкаВЦентральнуюБазу = Неопределено;
	Если ОбъектПопадаетПодОграниченияВыгрузки(Источник, НастройкаВыгрузки, ВыгрузкаВЦентральнуюБазу) Тогда 
		Возврат МаршрутизацияСообщений;
	КонецЕсли;	
	
	// Если выгрузка в центральную (текущий констекст это магазин)
	//	тогда маршрутизируем по известному направлению
	Если ВыгрузкаВЦентральнуюБазу Тогда    
		// Отправляем в центральную базу    
		ДобавитьМаршрутизацию(МаршрутизацияСообщений, НомерМагазинаЦентральнойБазы()); 
		// Раскомментировать если из базы магазина требуется выгружать только в ЦБ
		//Возврат МаршрутизацияСообщений;
	КонецЕсли;	
	
	// Определяем уточнения маршрута
	ДополнительныеПараметры = НастройкаВыгрузки.ДополнительныеПараметры;   
	ИсточникиМаршрутизации = ДополнительныеПараметры.ИсточникиМаршрутизации;
	Если Не ЗначениеЗаполнено(ИсточникиМаршрутизации) Тогда 
		// Отрабатывает общее правило маршрутизации   
		// A2105505-2348 Только если это это не выгрузка в центральную базу
		Если Не ВыгрузкаВЦентральнуюБазу 
			// A2105505-2463
			// По правилам маршрутизации, если нет уточнения маршрута
			//	и выгрузка происходит из магазина то выгружается только в ЦБ
			// Исключение - упаковочный лист который надо выгружать еще во все магазины
			// Реализовываем без специальной логики пока это единичный случай
			Или ТипЗнч(Источник) = Тип("ДокументОбъект.УпаковочныйЛист")
			//			
			Тогда 
			ДобавитьМаршрутизацию(МаршрутизацияСообщений, МаршрутизацияПоУмолчанию); 
		КонецЕсли;
		//
		Возврат МаршрутизацияСообщений;
	КонецЕсли;       
	
	ИсточникМетаданные = Источник.Метаданные();  
	ОграничениеТипа = Неопределено;
	ЭтоРегистр = ОбщегоНазначения.ЭтоРегистр(ИсточникМетаданные);   
	Для Каждого ШагиМаршрута Из ИсточникиМаршрутизации Цикл 
		
		ПервыйШагМаршрута = Истина;
		ИсточникКорневогоРеквизита = Источник;
		Для Каждого ОписаниеИсточникаМаршрутицации Из ШагиМаршрута Цикл 
		
			ПутьКРеквизитуМаршрутизации = ОписаниеИсточникаМаршрутицации.Путь; 

			// Получим путь к корневому реквизиту
			ЧастиПути = СтрРазделить(ПутьКРеквизитуМаршрутизации, ".");
			ИмяКорневогоРеквизита = ЧастиПути[0];
			
			ЧастиПути.Удалить(0);  

			// Определяем корневой реквизит.
			// По нему может быть наложено условие на тип
			// Далее от него будет получено значение маршрутизации по полному пути
			// "ЭтоРегистр = Истина" возможен только на самом первом уровне проверки. Далее только ссылки
			Если ПервыйШагМаршрута 
				И ЭтоРегистр Тогда 
				КорневойРеквизит = ИсточникКорневогоРеквизита.Отбор[ИмяКорневогоРеквизита].Значение;
			Иначе
				КорневойРеквизит = ИсточникКорневогоРеквизита[ИмяКорневогоРеквизита];
			КонецЕсли;	
			
			ТипКорневогоРеквизита = ТипЗнч(КорневойРеквизит);
			
			ПрерватьВычислениеМаршрута = 
				ОписаниеИсточникаМаршрутицации.Свойство("ОграничениеТипа", ОграничениеТипа) 
				И Не ОграничениеТипа.СодержитТип(ТипКорневогоРеквизита);  
				
			Если ПрерватьВычислениеМаршрута Тогда 
				Прервать;  
			КонецЕсли;
			
			ИсточникКорневогоРеквизита = КорневойРеквизит;  
			ПервыйШагМаршрута = Ложь;
			
		КонецЦикла;	
		
		Если ПрерватьВычислениеМаршрута Тогда 
			Продолжить;
		КонецЕсли;	
		
		ПутьКРеквизиту = СтрСоединить(ЧастиПути, ".");
		Если ПутьКРеквизиту = "_МашрутПоУмолчанию_" Тогда   
			Если Не ВыгрузкаВЦентральнуюБазу Тогда 
				ДобавитьМаршрутизацию(МаршрутизацияСообщений, МаршрутизацияПоУмолчанию); 
			КонецЕсли;
			Продолжить;
		КонецЕсли;	
	
		МассивЗначенийМаршрутизации = ЗначенияМаршрутизацииПоПолномуПути(КорневойРеквизит, ПутьКРеквизиту); 
		
		// На всякий случай сворачиваем значения массива
		МассивЗначенийМаршрутизации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗначенийМаршрутизации);
			
		Для Каждого ЗначениеМаршрутизации Из МассивЗначенийМаршрутизации Цикл 
			ЗначениеРеквизитаМаршрутизации = XMLСтрока(ЗначениеМаршрутизации);	
				
			ЭтоМаршрутизацияКТекущейБазе = (МаршрутизацияКТекущейБД.Найти(ЗначениеРеквизитаМаршрутизации) <> Неопределено);   
			
			Если ЭтоМаршрутизацияКТекущейБазе Тогда 
				Продолжить;
			КонецЕсли;	
				
			// Указываем маршрут на выгрузку
			// При этом если маршрут уже был добавлен c признак удаления 
			//	то текущее правило перекроет предыдущее 
			// 	см. логику ДобавитьМаршрутизацию
			ДобавитьМаршрутизацию(МаршрутизацияСообщений, ЗначениеРеквизитаМаршрутизации); 
			
		КонецЦикла;
		
		// Если выгружаем регистр или новый объект то выходим 
		Если ЭтоРегистр
			Или Источник.ЭтоНовый() Тогда 
			Продолжить;
		КонецЕсли;	

		// Добавим маршрутизацию по предыдущему маршруту но с признаком удаления данных
		// При этом если маршрут уже был добавлен без признака удаления 
		//	то текущее правило не будет применено
		// 	см. логику ДобавитьМаршрутизацию
		
		МассивЗначенийМаршрутизации = ЗначенияМаршрутизацииПоПолномуПути(
			Источник.Ссылка, ПутьКРеквизитуМаршрутизации);  

		Для Каждого ЗначениеМаршрутизации Из МассивЗначенийМаршрутизации Цикл 
			
			ПредыдущееЗначениеРеквизитаМаршрутизации = XMLСтрока(ЗначениеМаршрутизации);
			
			ЭтоМаршрутизацияКТекущейБазе = (
				МаршрутизацияКТекущейБД.Найти(ПредыдущееЗначениеРеквизитаМаршрутизации) <> Неопределено);   
			
			Если ЭтоМаршрутизацияКТекущейБазе Тогда 
				Продолжить;		
			КонецЕсли;	
				
			// Указываем маршрут на выгрузку с удалением
			ДобавитьМаршрутизацию(МаршрутизацияСообщений, 		
				ПредыдущееЗначениеРеквизитаМаршрутизации, Истина);   
												
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МаршрутизацияСообщений;
	
КонецФункции

#КонецОбласти

#Область ПравилаРегистрацииОбъектов

Процедура ДобавитьПравилоРегистрации(Источник, Отказ, НастройкаВыгрузки, СведенияОМаршрутизации)
	
	СтруктураСообщения = КР_ОбменRabbitОбработкаСообщенийОбмена.ПолучитьСтруктуруСообщения();
	СтруктураСообщения.ТипДанных = XMLТипЗнч(Источник).ИмяТипа;
	
	СтруктураСообщения.Маршрутизация = СведенияОМаршрутизации.Ключ;
	СтруктураСообщения.ЭтоУдаление = СведенияОМаршрутизации.Значение.ЭтоУдаление;
	
	ТекстШаблон = НСтр("ru='Инициировано сообщение для обмена %1'");
	ТекстСообщения = СтрШаблон(ТекстШаблон, НастройкаВыгрузки.ТочкаОбмена);
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СтруктураСообщения, ТекстСообщения);
	
	НастройкаВыгрузки.МассивСообщений.Добавить(СтруктураСообщения);
	
КонецПроцедуры

Процедура ОбщиеПравилаРегистрации(Источник, Отказ, НастройкаВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ11_ЦБ_Магазин_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	МаршрутизацияСообщений = ПолучитьМаршрутизациюСообщений(Источник, НастройкаВыгрузки);

	Для Каждого СведенияОМаршрутизации Из МаршрутизацияСообщений Цикл 	
		ДобавитьПравилоРегистрации(Источник, Отказ, НастройкаВыгрузки, СведенияОМаршрутизации);
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ПравилаВыгрузкиОбъектов

Процедура ОбщиеПравилаВыгрузки(Источник, Отказ, СтруктураВыгрузки) Экспорт 

	// Определим тип объекта
	ИсточникМетаданные = Источник.Метаданные();
	ЭтоКонстанта = ОбщегоНазначения.ЭтоКонстанта(ИсточникМетаданные); 
	ЭтоОбъектСсылочногоТипа = ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ИсточникМетаданные); 
	ЭтоРегистр = ОбщегоНазначения.ЭтоРегистр(ИсточникМетаданные);

	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл		

		Объект = Неопределено;
		
		Если ЭтоКонстанта Тогда 
			УспехКонвертирования = КонвертироватьКонстанту(Источник, Объект, СообщениеОбмена);   
		ИначеЕсли ЭтоОбъектСсылочногоТипа Тогда 
			УспехКонвертирования = КонвертироватьСсылочныйОбъект(Источник, Объект, СообщениеОбмена);   
		ИначеЕсли ЭтоРегистр Тогда
			УспехКонвертирования = КонвертироватьРегистр(Источник, Объект, СообщениеОбмена);   
		КонецЕсли;	
		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.КонвертироватьСтруктуруВJSONОбъект(Объект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыКонвертании

Функция КонвертироватьКонстанту(Источник, Объект, СообщениеОбмена)
			
	Объект = Новый Структура;
	Объект.Вставить("Значение");
	
	ОбъектЗначение = Неопределено; 
	Если КонвертироватьРеквизит(Источник.Значение, ОбъектЗначение) Тогда 
		Объект.Вставить("Значение", ОбъектЗначение);
	КонецЕсли;	
	
	
	Возврат Истина;
	
КонецФункции  

Функция КонвертироватьСсылочныйОбъект(Источник, Объект, СообщениеОбмена)

	Объект = Новый Структура;
	
	ИгнорируемыеСвойства = ИсключитьВыгрузкуРеквизитовОбъектов();
		
	ИсточникМетаданные = Источник.Метаданные();

	// СтандартныеРеквизиты
	КонвертироватьРеквизиты(Источник, ИсточникМетаданные.СтандартныеРеквизиты, 
		Объект, ИгнорируемыеСвойства, СообщениеОбмена); 
	
	// Если происходит физическое удаление элемента 
	//	то кроме стандартный реквизитов (нас больше ничего не интересует)   
	Если СообщениеОбмена.ЭтоУдаление Тогда    
		// Так как в транспорте нет типового свойства удаления то добавим его в свою структуру
		Объект.Вставить("НепосредственноеУдаление", Истина);
		Возврат Истина;
	КонецЕсли;	
	
	// Во избежание не оправданной нагрузки на сервер и ускорения выгрузки объектов
	//	в стучае если объект помечен на удаление, выгружаем только стандартные реквизиты
	Если Источник.ПометкаУдаления Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	// Реквизиты
	КонвертироватьРеквизиты(Источник, ИсточникМетаданные.Реквизиты, 
		Объект, ИгнорируемыеСвойства, СообщениеОбмена); 
	
	Для Каждого ТабличнаяЧастьМетаданные Из ИсточникМетаданные.ТабличныеЧасти Цикл 
		
		Если ИгнорироватьВыгрузкуСвойства(ТабличнаяЧастьМетаданные, ИгнорируемыеСвойства) Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяТабличнойЧасти = ТабличнаяЧастьМетаданные.Имя;
		Объект.Вставить(ИмяТабличнойЧасти);
		КонвертироватьТабличнуюЧасть(Источник[ИмяТабличнойЧасти], 
			ТабличнаяЧастьМетаданные, Объект[ИмяТабличнойЧасти], ИгнорируемыеСвойства, СообщениеОбмена); 
				
	КонецЦикла;	  
		
	Возврат Истина;
	
КонецФункции  

Функция КонвертироватьРегистр(Источник, Объект, СообщениеОбмена)
			
	ИгнорируемыеСвойства = ИсключитьВыгрузкуРеквизитовОбъектов();
	
	Объект = Новый Структура;
	
	Отбор = Новый Структура;
	Объект.Вставить("Отбор", Отбор);
	Для Каждого ЭлементОтбора Из Источник.Отбор Цикл 
				
		Если Не ЭлементОтбора.Использование Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = ЭлементОтбора.Имя;
		ОбъектЗначение = Неопределено; 
		Если КонвертироватьРеквизит(ЭлементОтбора.Значение, ОбъектЗначение) Тогда 
			Отбор.Вставить(ИмяРеквизита, ОбъектЗначение);
		КонецЕсли;	
				
	КонецЦикла;   
	
	Записи = Новый Массив;
	Объект.Вставить("Записи", Записи);    

	// Если происходит физическое удаление элемента 
	//	то кроме отбора (нас больше ничего не интересует)	
	Если СообщениеОбмена.ЭтоУдаление Тогда 
		Возврат Истина;
	КонецЕсли;	
		
	ИсточникМетаданные = Источник.Метаданные();    
	Для Каждого СтрокаДанных Из Источник Цикл 
		
		Запись = Новый Структура;
		// СтандартныеРеквизиты
		КонвертироватьРеквизиты(СтрокаДанных, ИсточникМетаданные.СтандартныеРеквизиты, 
			Запись, ИгнорируемыеСвойства, СообщениеОбмена); 
		// Измерения
		КонвертироватьРеквизиты(СтрокаДанных, ИсточникМетаданные.Измерения, 
			Запись, ИгнорируемыеСвойства, СообщениеОбмена); 
		// Ресурсы
		КонвертироватьРеквизиты(СтрокаДанных, ИсточникМетаданные.Ресурсы, 
			Запись, ИгнорируемыеСвойства, СообщениеОбмена); 
		// Реквизиты
		КонвертироватьРеквизиты(СтрокаДанных, ИсточникМетаданные.Реквизиты, 
			Запись, ИгнорируемыеСвойства, СообщениеОбмена); 

		Записи.Добавить(Запись);
		
	КонецЦикла;
			
	Возврат Истина;
	
КонецФункции  
	
Функция КонвертироватьРеквизиты(
	Источник, Реквизиты, Объект, ИгнорируемыеСвойства, СообщениеОбмена)         
	
	ЭтоСтандартныеРеквизиты = (ТипЗнч(Реквизиты) = Тип("ОписанияСтандартныхРеквизитов"));
	Для Каждого РеквизитМетаданные Из Реквизиты Цикл 

		ИмяРеквизита = РеквизитМетаданные.Имя;
 		ИсточникЗначениеРеквизита = Источник[ИмяРеквизита];
        ИсточникЗначениеРеквизитаТип = ТипЗнч(ИсточникЗначениеРеквизита);
		
		// Пропускаем реквизиты которых нет в таблицах БД
		// Ситуация возникает для реквизитов справочника, которые присутствуют только в группе или элементе
		Если ИсточникЗначениеРеквизита = Null Тогда 
			Продолжить;
		КонецЕсли;

		Если Не ЭтоСтандартныеРеквизиты
			И ИгнорироватьВыгрузкуСвойства(РеквизитМетаданные, ИгнорируемыеСвойства, ИсточникЗначениеРеквизитаТип) Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектЗначение = Неопределено;                                         
					
		Если КонвертироватьРеквизит(ИсточникЗначениеРеквизита, ОбъектЗначение, РеквизитМетаданные) Тогда // A2105505-2438
			Объект.Вставить(ИмяРеквизита, ОбъектЗначение);
		КонецЕсли;	
		
	КонецЦикла;	  
	
	Возврат Истина;
	
КонецФункции
	
Процедура КонвертироватьТабличнуюЧасть(
	Источник, ИсточникМетаданные, ОбъектЗначение, ИгнорируемыеСвойства, СообщениеОбмена)         
	
	ОбъектЗначение = Новый Массив;
	Для Каждого СтрокаДанных Из Источник Цикл 
		
		ОбъектСтрока = Новый Структура;
		// СтандартныеРеквизиты
		КонвертироватьРеквизиты(СтрокаДанных, ИсточникМетаданные.СтандартныеРеквизиты, 
			ОбъектСтрока, ИгнорируемыеСвойства, СообщениеОбмена); 
		// Реквизиты
		КонвертироватьРеквизиты(СтрокаДанных, ИсточникМетаданные.Реквизиты, 
			ОбъектСтрока, ИгнорируемыеСвойства, СообщениеОбмена); 

		ОбъектЗначение.Добавить(ОбъектСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Функция КонвертироватьРеквизит(Значение, ОбъектЗначение, РеквизитМетаданные = Неопределено) // A2105505-2438

	ТипЗначения = ТипЗнч(Значение);    
	Если ТипЗначения = Тип("ХранилищеЗначения") Тогда 
		Возврат ХранилищеЗначенияВСтруктуру(Значение, ОбъектЗначение);
	ИначеЕсли ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		Возврат УникальныйИдентификаторВСтруктуру(Значение, ОбъектЗначение);
	ИначеЕсли ТипЗначения = Тип("ОписаниеТипов") Тогда
		Возврат ОписаниеТиповВСтруктуру(Значение, ОбъектЗначение);
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда 
		Возврат СсылкаВСтруктуру(Значение, ОбъектЗначение, РеквизитМетаданные); // A2105505-2438  
	Иначе
		ОбъектЗначение = Значение;	
	КонецЕсли;	
		
	Возврат Истина; 
	
КонецФункции

Функция СсылкаВСтруктуру(Значение, ОбъектЗначение, РеквизитМетаданные = Неопределено) // A2105505-2438 
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		Возврат Истина;
	КонецЕсли;	
		
	// A2105505-2444 
	// рефакторинг - оптимизация
	ОбъектЗначение = Новый Структура;	
   	ОбъектЗначение.Вставить("Тип", XMLТипЗнч(Значение).ИмяТипа);  
	ОбъектЗначение.Вставить("УникальныйИдентификатор", XMLСтрока(Значение));
	
	//ОбъектЗначение.Вставить("Представление", Строка(Значение));  
	ОбъектЗначение.Вставить("Представление", "");  
	//
	
    ТипЗначения = ТипЗнч(Значение);
	ЗначениеМетаданные = Значение.Метаданные();
	ЭтоОбъектСсылочногоТипа = ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ЗначениеМетаданные);
	ЭтоДокументИлиПланОбмена = ЭтоЗначениеБазовогоТипа(ЗначениеМетаданные, "Документ,ПланОбмена"); 
	
	Если ЭтоОбъектСсылочногоТипа Тогда // A2105505-2438
		
		Если Не ЭтоДокументИлиПланОбмена Тогда 
		
			ЕстьПредопределенные = ЗначениеЗаполнено(ЗначениеМетаданные.ПолучитьИменаПредопределенных());
			
			Если ЕстьПредопределенные 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "Предопределенный") = Истина Тогда 
				ОбъектЗначение.Вставить("ИмяПредопределенныхДанных", Значение.ИмяПредопределенныхДанных);  
			КонецЕсли;
		
		КонецЕсли; // A2105505-2438   
		
		Если ИгнорироватьОшибкуПриПоиске(РеквизитМетаданные, ТипЗначения) Тогда // A2105505-2438
			ОбъектЗначение.Вставить("ИгнорироватьОшибкуПриПоиске");
		КонецЕсли;	

	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

Функция ХранилищеЗначенияВСтруктуру(Значение, ОбъектЗначение)  
	
	Данные = Значение.Получить();
	Если Данные = Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;	
		
	ОбъектЗначение = Новый Структура;	
	ОбъектЗначение.Вставить("Тип", XMLТипЗнч(Значение).ИмяТипа);  
	ОбъектЗначение.Вставить("ЭтоДвоичныеДанные", ТипЗнч(Данные) = Тип("ДвоичныеДанные"));   
	Если ОбъектЗначение.ЭтоДвоичныеДанные Тогда 
		ОбъектЗначение.Вставить("Данные", Base64Строка(Данные));
	Иначе
		ОбъектЗначение.Вставить("Данные", ЗначениеВСтрокуВнутр(Данные));		
	КонецЕсли;	

	Возврат Истина;
	
КонецФункции

Функция УникальныйИдентификаторВСтруктуру(Значение, ОбъектЗначение)  
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		Возврат Истина;
	КонецЕсли;	
		
	ОбъектЗначение = Новый Структура;	
	ОбъектЗначение.Вставить("Тип", XMLТипЗнч(Значение).ИмяТипа);  
	ОбъектЗначение.Вставить("УникальныйИдентификатор", XMLСтрока(Значение));
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеТиповВСтруктуру(Значение, ОбъектЗначение)  
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		Возврат Истина;
	КонецЕсли;	
		
	ОбъектЗначение = Новый Структура;	
	ОбъектЗначение.Вставить("Тип", XMLТипЗнч(Значение).ИмяТипа);  
	ОбъектЗначение.Вставить("Данные", ЗначениеВСтрокуВнутр(Значение));
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РегистрацияЗапросовДанных

Функция ЗарегистрироватьЗапросДанныхКЦентральнойБазе(ТипДанных, Параметры, Получатель)
		
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("ТипДанных", ТипДанных); 
	ДанныеЗапроса.Вставить("Параметры", Параметры);	     

	// Если не заполнен получатель то устанавливаем получателем текущий склад магазина (первый)
	Если Не ЗначениеЗаполнено(Получатель) Тогда 
		МассивМаршрутизацийКТекущейБазеДанных = КР_ДополнительныеНастройкиПовтИсп.МассивМаршрутизацийКТекущейБазеДанных();
		ДанныеЗапроса.Вставить("Получатель", МассивМаршрутизацийКТекущейБазеДанных[0]);	   
	Иначе	
		ДанныеЗапроса.Вставить("Получатель", Получатель);	   
	КонецЕсли;	
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON;
	ТелоСообщения = КР_ОбщегоНазначениеСервер.ДанныеВJSON(ДанныеЗапроса, ПараметрыЗаписиJSON);
	
	// Регистрация исходящего сообщения
	ИсходящееСообщение = КР_ОбменRabbitОбработкаСообщенийОбмена.ПолучитьСтруктуруСообщения();
	ИсходящееСообщение.ТипДанных = "DataRequest";
	ИсходящееСообщение.Маршрутизация = НомерМагазинаЦентральнойБазы();
	ИсходящееСообщение.ТелоСообщения = ТелоСообщения;

	Отказ = Ложь;
	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящееСообщениеОбмена(
		КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.ТочкаОбмена(), ИсходящееСообщение, Отказ); 
	//	
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#Область ПрочиеМетоды

Функция ИгнорироватьВыгрузкуСвойства(СвойстваМетаданные, ИгнорируемыеСвойства, ТипЗначения = Неопределено)  
	
	СвойстваМетаданныеИмя = СвойстваМетаданные.Имя;
	// "Объявленные" на удаление свойства не выгружаем
	Если СтрНачинаетсяС(СвойстваМетаданныеИмя, "Удалить") Тогда 
		Возврат Истина;
	КонецЕсли;
	
	СвойстваМетаданныеПолноеИмя = СвойстваМетаданные.ПолноеИмя();
	
	Если ИгнорируемыеСвойства[СвойстваМетаданныеИмя] <> Неопределено
		Или ИгнорируемыеСвойства[СвойстваМетаданныеПолноеИмя] <> Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗначения <> Неопределено
		И ИгнорируемыеСвойства[ТипЗначения] <> Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	  

Функция ИгнорироватьОшибкуПриПоиске(РеквизитМетаданные, ТипЗначения) // A2105505-2438 

	ЭтоСтандартныйРеквизит = (ТипЗнч(РеквизитМетаданные) = Тип("ОписаниеСтандартногоРеквизита"));  
	Если ЭтоСтандартныйРеквизит  Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Состав = ИгнорироватьОшибкуПриПоискеРеквизитовОбъектов();
	
	Если РеквизитМетаданные <> Неопределено Тогда 

		Возврат Состав[РеквизитМетаданные.Имя] <> Неопределено
			Или Состав[РеквизитМетаданные.ПолноеИмя()] <> Неопределено
			Или Состав[ТипЗначения] <> Неопределено;
		
	Иначе       
			
		Возврат Состав[ТипЗначения] <> Неопределено;
		
	КонецЕсли;	
	
КонецФункции	  

// Взято из типового модуля ДенежныеСредстваКлиентСервер
Функция ЗначениеУсловия(ЭлементыУсловия, Объект, ТипГруппы = Неопределено, ДополнительныеРеквизиты = Неопределено)
	
	Если ТипГруппы = Неопределено Тогда
		ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	КонецЕсли;
	
	Значение = Неопределено;
	
	Для каждого ЭлементУсловия Из ЭлементыУсловия Цикл
		Если ТипЗнч(ЭлементУсловия) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				
				Если Значение = Неопределено Тогда
					Значение = Истина;
				КонецЕсли;
				Значение = Значение И ЗначениеУсловия(ЭлементУсловия.Элементы, Объект, ЭлементУсловия.ТипГруппы, ДополнительныеРеквизиты);
				
			ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				
				Если Значение = Неопределено Тогда
					Значение = Ложь;
				КонецЕсли;
				Значение = Значение Или ЗначениеУсловия(ЭлементУсловия.Элементы, Объект, ЭлементУсловия.ТипГруппы, ДополнительныеРеквизиты);
				
			ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				
				Значение = Не ЗначениеУсловия(ЭлементУсловия.Элементы, Объект, ЭлементУсловия.ТипГруппы, ДополнительныеРеквизиты);
				
			КонецЕсли;
		Иначе
			Если ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				
				Если Значение = Неопределено Тогда
					Значение = Истина;
				КонецЕсли;
				Значение = Значение И ЗначениеВыраженияУсловия(ЭлементУсловия, Объект, ДополнительныеРеквизиты);
				
			ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				
				Если Значение = Неопределено Тогда
					Значение = Ложь;
				КонецЕсли;
				Значение = Значение Или ЗначениеВыраженияУсловия(ЭлементУсловия, Объект, ДополнительныеРеквизиты);
				
			ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				
				Значение = Не ЗначениеВыраженияУсловия(ЭлементУсловия, Объект, ДополнительныеРеквизиты);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

// Взято из типового модуля ДенежныеСредстваКлиентСервер
Функция ЗначениеВыраженияУсловия(ЭлементУсловия, Объект, ДополнительныеРеквизиты = Неопределено)
	
	Значение = Ложь;
	
	ЛевоеЗначение = Неопределено;
	ПравоеЗначение = Неопределено;
	
	ИмяРеквизита = Строка(ЭлементУсловия.ЛевоеЗначение);
	Если ТипЗнч(ДополнительныеРеквизиты) = Тип("Структура") Тогда
		ПозицияТочки = СтрНайти(ИмяРеквизита, ".");
		Если ПозицияТочки <> 0 Тогда
			ДополнительныеРеквизиты.Свойство(Сред(ИмяРеквизита, ПозицияТочки + 1), ЛевоеЗначение);
		Иначе
			ЛевоеЗначение = Объект[ИмяРеквизита];
		КонецЕсли;
	Иначе
		ЛевоеЗначение = Объект[ИмяРеквизита];
	КонецЕсли;
	
	Если ТипЗнч(ЭлементУсловия.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
		ИмяРеквизита = Строка(ЭлементУсловия.ПравоеЗначение);
		Если ТипЗнч(ДополнительныеРеквизиты) = Тип("Структура") Тогда
			ПозицияТочки = СтрНайти(ИмяРеквизита, ".");
			Если ПозицияТочки <> 0 Тогда
				ДополнительныеРеквизиты.Свойство(Сред(ИмяРеквизита, ПозицияТочки + 1), ПравоеЗначение);
			Иначе
				ПравоеЗначение = Объект[ИмяРеквизита];
			КонецЕсли;
		Иначе
			ПравоеЗначение = Объект[ИмяРеквизита];
		КонецЕсли;
	Иначе
		ПравоеЗначение = ЭлементУсловия.ПравоеЗначение;
	КонецЕсли;
	
	Если ЛевоеЗначение <> Неопределено Тогда
		Если ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			Значение = (ЛевоеЗначение = ПравоеЗначение);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			Значение = (ЛевоеЗначение <> ПравоеЗначение);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
			Значение = ЗначениеЗаполнено(ЛевоеЗначение);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			Значение = НЕ ЗначениеЗаполнено(ЛевоеЗначение);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке И ТипЗнч(ПравоеЗначение) = Тип("Массив") Тогда
			Значение = (Не ПравоеЗначение.Найти(ЛевоеЗначение) = Неопределено);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке И ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
			Значение = (Не ПравоеЗначение.НайтиПоЗначению(ЛевоеЗначение) = Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Аналог ОбщегоНазначения.ЭтоОбъектСсылочногоТипа 
// более быстрое определение типа по сравнению с ОбщегоНазначения.ЭтоДокумент на нагрузочном тестировании
Функция ОпределитьТипПоМетаданным(ОбъектМетаданных)
	
	ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Позиция = СтрНайти(ИмяОбъектаМетаданных, ".");
	Если Позиция > 0 Тогда 
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		Возврат ИмяБазовогоТипа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ЭтоЗначениеБазовогоТипа(ОбъектМетаданных, СписокТипов)
	
	ТипПоМетаданным = ОпределитьТипПоМетаданным(ОбъектМетаданных); 
	
	Возврат СтрНайти(СписокТипов, ТипПоМетаданным);
	
КонецФункции

Функция ЭтоКонстанта(ОбъектМетаданных)
	
	ТипПоМетаданным = ОпределитьТипПоМетаданным(ОбъектМетаданных);
	Возврат (ТипПоМетаданным = "Константа");
	
КонецФункции

Функция ЭтоСправочник(ОбъектМетаданных)
	
	ТипПоМетаданным = ОпределитьТипПоМетаданным(ОбъектМетаданных);
	Возврат (ТипПоМетаданным = "Справочник");
	
КонецФункции

Функция ЭтоДокумент(ОбъектМетаданных)
	
	ТипПоМетаданным = ОпределитьТипПоМетаданным(ОбъектМетаданных);
	Возврат (ТипПоМетаданным = "Документ");
	
КонецФункции

Функция ЭтоПланОбмена(ОбъектМетаданных)                         
	
	ТипПоМетаданным = ОпределитьТипПоМетаданным(ОбъектМетаданных);
	Возврат (ТипПоМетаданным = "ПланОбмена");
	
КонецФункции

Функция ЭтоПеречисление(ОбъектМетаданных)
	
	ТипПоМетаданным = ОпределитьТипПоМетаданным(ОбъектМетаданных);
	Возврат (ТипПоМетаданным = "Перечисление");
	
КонецФункции

#КонецОбласти            

#КонецОбласти

