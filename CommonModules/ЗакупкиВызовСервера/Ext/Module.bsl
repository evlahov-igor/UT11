////////////////////////////////////////////////////////////////////////////////
// Модуль "ЗакупкиВызовСервера", содержит процедуры и функции для 
// серверной обработки действий пользователя в процессе работы с документами закупки.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет, есть ли в табличной части строки с незаполненной датой поступления в строках, которые не отменены.
//	
// Параметры:
//		Объект - ДанныеФормыСтруктура - проверяемый объект
//		ИмяТЧ - Строка - имя проверяемой ТЧ.
//
// Возвращаемое значение:
//		Булево - признак наличия строк с незаполненной датой поступления.
Функция ДатаПоступленияПустая(Знач Объект, ИмяТЧ) Экспорт
	
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		
		Если Не ТекСтрока.Отменено 
			И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Формирует список значений номеров ГТД номенклатуре, характеристике
//
// Параметры:
//   Номенклатура - СправочникСсылка.Номенклатура - номенклатура предприятия для подбора номеров ГТД.
//   Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры предприятия
//                    для подбора номеров ГТД.
//   СтранаПроисхождения - СправочникСсылка.СтраныМира - страна, для подбора номеров ГТД.
//
// Возвращаемое значение:
//   СписокЗначений - список выбора номеров ГТД.
//
Функция ЗаполнитьСписокВыбораНомеровГТД(Номенклатура, Характеристика, СтранаПроисхождения) Экспорт
	
	СписокВыбора = Новый СписокЗначений();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ПриобретениеТоваровУслугТовары.Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Характеристика,
	|	ПриобретениеТоваровУслугТовары.НомерГТД,
	|	ПриобретениеТоваровУслугТовары.Ссылка,
	|	ПриобретениеТоваровУслугТовары.Ссылка.Дата КАК Дата
	|ПОМЕСТИТЬ СочетанияНоменклатураГТД
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Номенклатура = &Номенклатура
	|	И ПриобретениеТоваровУслугТовары.Характеристика = &Характеристика
	|	И ПриобретениеТоваровУслугТовары.Ссылка.Проведен
	|	И ПриобретениеТоваровУслугТовары.НомерГТД <> &НомерГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	ОприходованиеИзлишковТоваровТовары.Номенклатура,
	|	ОприходованиеИзлишковТоваровТовары.Характеристика,
	|	ОприходованиеИзлишковТоваровТовары.НомерГТД,
	|	ОприходованиеИзлишковТоваровТовары.Ссылка,
	|	ОприходованиеИзлишковТоваровТовары.Ссылка.Дата
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров.Товары КАК ОприходованиеИзлишковТоваровТовары
	|ГДЕ
	|	ОприходованиеИзлишковТоваровТовары.Номенклатура = &Номенклатура
	|	И ОприходованиеИзлишковТоваровТовары.Характеристика = &Характеристика
	|	И ОприходованиеИзлишковТоваровТовары.Ссылка.Проведен
	|	И ОприходованиеИзлишковТоваровТовары.НомерГТД <> &НомерГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	КорректировкаПриобретенияТовары.Номенклатура,
	|	КорректировкаПриобретенияТовары.Характеристика,
	|	КорректировкаПриобретенияТовары.НомерГТД,
	|	КорректировкаПриобретенияТовары.Ссылка,
	|	КорректировкаПриобретенияТовары.Ссылка.Дата
	|ИЗ
	|	Документ.КорректировкаПриобретения.Товары КАК КорректировкаПриобретенияТовары
	|ГДЕ
	|	КорректировкаПриобретенияТовары.Номенклатура = &Номенклатура
	|	И КорректировкаПриобретенияТовары.Характеристика = &Характеристика
	|	И КорректировкаПриобретенияТовары.Ссылка.Проведен
	|	И КорректировкаПриобретенияТовары.НомерГТД <> &НомерГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	ПересортицаТоваровТовары.Номенклатура,
	|	ПересортицаТоваровТовары.Характеристика,
	|	ПересортицаТоваровТовары.НомерГТД,
	|	ПересортицаТоваровТовары.Ссылка,
	|	ПересортицаТоваровТовары.Ссылка.Дата
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|ГДЕ
	|	ПересортицаТоваровТовары.Номенклатура = &Номенклатура
	|	И ПересортицаТоваровТовары.Характеристика = &Характеристика
	|	И ПересортицаТоваровТовары.Ссылка.Проведен
	|	И ПересортицаТоваровТовары.НомерГТД <> &НомерГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	ТаможеннаяДекларацияИмпортТовары.Номенклатура,
	|	ТаможеннаяДекларацияИмпортТовары.Характеристика,
	|	ТаможеннаяДекларацияИмпортТовары.НомерГТД,
	|	ТаможеннаяДекларацияИмпортТовары.Ссылка,
	|	ТаможеннаяДекларацияИмпортТовары.Ссылка.Дата
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|ГДЕ
	|	ТаможеннаяДекларацияИмпортТовары.Номенклатура = &Номенклатура
	|	И ТаможеннаяДекларацияИмпортТовары.Характеристика = &Характеристика
	|	И ТаможеннаяДекларацияИмпортТовары.Ссылка.Проведен
	|	И ТаможеннаяДекларацияИмпортТовары.НомерГТД <> &НомерГТД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ДанныеСправочника.Представление КАК Представление,
	|	ДанныеСправочника.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеСправочника.СтранаПроисхождения.Представление КАК СтранаПредставление,
	|	МАКСИМУМ(СочетанияНоменклатураГТД.Дата) КАК Порядок
	|ИЗ
	|	СочетанияНоменклатураГТД КАК СочетанияНоменклатураГТД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеСправочника
	|		ПО СочетанияНоменклатураГТД.НомерГТД = ДанныеСправочника.Ссылка
	|ГДЕ
	|	(НЕ &ОтборПоСтране
	|			ИЛИ ДанныеСправочника.СтранаПроисхождения = &Страна)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСправочника.Ссылка,
	|	ДанныеСправочника.Представление,
	|	ДанныеСправочника.ПометкаУдаления,
	|	ДанныеСправочника.СтранаПроисхождения.Представление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ОтборПоСтране", ЗначениеЗаполнено(СтранаПроисхождения));
	Запрос.УстановитьПараметр("Страна", СтранаПроисхождения);
	Запрос.УстановитьПараметр("НомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаГТД = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаГТД.Следующий() Цикл
		ЭлементВыбора = Новый Структура("Значение, ПометкаУдаления", ВыборкаГТД.Ссылка, ВыборкаГТД.ПометкаУдаления);
		Представление = СокрЛП(ВыборкаГТД.Представление)
		+ ?(ЗначениеЗаполнено(ВыборкаГТД.СтранаПредставление), " (" + ВыборкаГТД.СтранаПредставление + ")", "");
		СписокВыбора.Добавить(ЭлементВыбора, Представление);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

//Функция формирует текст запроса по данным заказов
Функция ТекстЗапросаПоЗаказам()
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
	|	ЗаказПоставщику.Подразделение КАК Подразделение,
	|	ЗаказПоставщику.Партнер КАК Партнер,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Договор КАК Договор,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Соглашение КАК Соглашение,
	|	ЗаказПоставщику.Склад КАК Склад,
	|	ЗаказПоставщику.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ЗаказПоставщику.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗаказПоставщику.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗаказПоставщику.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПоставщику.ЗакупкаПодДеятельность КАК ЗакупкаПодДеятельность,
	|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказПоставщику.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ЗаказПоставщику.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	|	ЗаказПоставщику.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
	|	ЗаказПоставщику.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
	|	ЕСТЬNULL(ЗаказПоставщику.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю, ЛОЖЬ) КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	ЕСТЬNULL(ЗаказПоставщику.Соглашение.КалендарьВозвратаТары, НЕОПРЕДЕЛЕНО) КАК КалендарьВозвратаТары,
	|	ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗаказПоставщику.Статус КАК Статус,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) КАК ДопустимыйСтатус1,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт) КАК ДопустимыйСтатус2,
	|	НЕОПРЕДЕЛЕНО КАК ДопустимыйСтатус3,
	|	НЕ ЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
	|				ИЛИ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	ЗаказПоставщику.ХозяйственнаяОперация НЕ В (&ДопустимыеОперации) КАК ЕстьНедопустимаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦеныПоставщика,
	|	ЗаказПоставщику.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
	|	ЗаказПоставщику.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ЗаказПоставщику.ФормаОплаты КАК ФормаОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ГрафикОплаты,
	|	ЗаказПоставщику.Касса КАК Касса,
	|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказПоставщику.ОплатаВВалюте КАК ОплатаВВалюте
	|ПОМЕСТИТЬ ЗаказыПоставщикам
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивСсылок)
	|
	|;
	|ВЫБРАТЬ ЗаказПоставщику, ХозяйственнаяОперация ИЗ ЗаказыПоставщикам ГДЕ ЕстьНедопустимаяОперация
	|
	|;
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаказыПоставщикам.Подразделение)                  КАК Подразделение,
	|	МИНИМУМ(ЗаказыПоставщикам.Партнер)                        КАК Партнер,
	|	МИНИМУМ(ЗаказыПоставщикам.Контрагент)                     КАК Контрагент,
	|	МИНИМУМ(ЗаказыПоставщикам.Договор)                        КАК Договор,
	|	МИНИМУМ(ЗаказыПоставщикам.Организация)                    КАК Организация,
	|	МИНИМУМ(ЗаказыПоставщикам.Соглашение)                     КАК Соглашение,
	|	МИНИМУМ(ЗаказыПоставщикам.Склад)                          КАК Склад,
	|	МИНИМУМ(ЗаказыПоставщикам.ХозяйственнаяОперация)          КАК ХозяйственнаяОперация,
	|	МИНИМУМ(ЗаказыПоставщикам.ВалютаВзаиморасчетов)           КАК ВалютаВзаиморасчетов,
	|	МИНИМУМ(ЗаказыПоставщикам.НалогообложениеНДС)             КАК НалогообложениеНДС,
	|	МИНИМУМ(ЗаказыПоставщикам.ЗакупкаПодДеятельность)         КАК ЗакупкаПодДеятельность,
	|	МИНИМУМ(ЗаказыПоставщикам.ЦенаВключаетНДС)                КАК ЦенаВключаетНДС,
	|	МИНИМУМ(ЗаказыПоставщикам.ПорядокРасчетов)                КАК ПорядокРасчетов,
	|	МИНИМУМ(ЗаказыПоставщикам.ВернутьМногооборотнуюТару)      КАК ВернутьМногооборотнуюТару,
	|	МИНИМУМ(ЗаказыПоставщикам.СрокВозвратаМногооборотнойТары) КАК СрокВозвратаМногооборотнойТары,
	|	МИНИМУМ(ЗаказыПоставщикам.ТребуетсяЗалогЗаТару)           КАК ТребуетсяЗалогЗаТару,
	|	МИНИМУМ(ЗаказыПоставщикам.РассчитыватьДатуВозвратаТарыПоКалендарю) КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	МИНИМУМ(ЗаказыПоставщикам.КалендарьВозвратаТары)          КАК КалендарьВозвратаТары,
	|	МИНИМУМ(ЗаказыПоставщикам.НаправлениеДеятельности)        КАК НаправлениеДеятельности,
	|	МИНИМУМ(ЗаказыПоставщикам.ВидЦеныПоставщика)              КАК ВидЦеныПоставщика,
	|	МИНИМУМ(ЗаказыПоставщикам.ВариантПриемкиТоваров)          КАК ВариантПриемкиТоваров,
	|	МИНИМУМ(ЗаказыПоставщикам.ГруппаФинансовогоУчета)         КАК ГруппаФинансовогоУчета,
	|	МИНИМУМ(ЗаказыПоставщикам.РегистрироватьЦеныПоставщика)   КАК РегистрироватьЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.Подразделение) > 1
	|			И МАКСИМУМ(ЗаказыПоставщикам.ПорядокРасчетов) = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
	|			И &ИспользоватьРеглУчет = ИСТИНА
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияПодразделение,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.Партнер) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияПартнер,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.Контрагент) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.Договор) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияДоговор,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.Организация) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияОрганизация,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.Соглашение) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияСоглашение,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.Склад) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияСклад,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ХозяйственнаяОперация) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ВалютаВзаиморасчетов) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.НалогообложениеНДС) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияНалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ЗакупкаПодДеятельность) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияЗакупкаПодДеятельность,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ЦенаВключаетНДС) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ВернутьМногооборотнуюТару) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияВернутьМногооборотнуюТару,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.СрокВозвратаМногооборотнойТары) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияСрокВозвратаМногооборотнойТары,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ТребуетсяЗалогЗаТару) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияТребуетсяЗалогЗаТару,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ПорядокРасчетов) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияПорядокРасчетов,
	|	ВЫБОР
	|		КОГДА
	|			МИНИМУМ(ЗаказыПоставщикам.Склад.ЭтоГруппа) = ИСТИНА И МИНИМУМ(ЗаказыПоставщикам.Склад.ВыборГруппы) = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ
	|			МИНИМУМ(ЗаказыПоставщикам.Склад)
	|	КОНЕЦ КАК СкладПоступления,
	|	ВЫБОР
	|		КОГДА
	|			МИНИМУМ(ЗаказыПоставщикам.Склад.ЭтоГруппа) = ИСТИНА И МИНИМУМ(ЗаказыПоставщикам.Склад.ВыборГруппы) = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.НаправлениеДеятельности) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияНаправленияДеятельности,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ВидЦеныПоставщика) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияВидЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ВариантПриемкиТоваров) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияВариантПриемкиТоваров,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ГруппаФинансовогоУчета) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияГруппаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
	|				ВЫБОР
	|					КОГДА
	|						ЗаказыПоставщикам.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|					ТОГДА
	|						ЗаказыПоставщикам.БанковскийСчет
	|					ИНАЧЕ
	|						NULL
	|				КОНЕЦ) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияБанковскийСчет,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ФормаОплаты) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияФормаОплаты,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ОплатаВВалюте) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияОплатаВВалюте,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
	|				ВЫБОР
	|					КОГДА
	|						ЗаказыПоставщикам.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|					ТОГДА
	|						ЗаказыПоставщикам.БанковскийСчет
	|					ИНАЧЕ
	|						NULL
	|				КОНЕЦ) = 1
	|		ТОГДА
	|			МАКСИМУМ(ЗаказыПоставщикам.БанковскийСчет)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчет,
	|	МИНИМУМ(ЗаказыПоставщикам.ОплатаВВалюте)                  КАК ОплатаВВалюте,
	|	МИНИМУМ(ЗаказыПоставщикам.ГрафикОплаты)                   КАК ГрафикОплаты,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикам.ФормаОплаты) > 1
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
	|		ИНАЧЕ
	|			МИНИМУМ(ЗаказыПоставщикам.ФормаОплаты)
	|	КОНЕЦ КАК ФормаОплаты
	|ИЗ
	|	ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|
	|ГДЕ ЗаказыПоставщикам.ХозяйственнаяОперация В (&ДопустимыеОперации)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщику,
	|	Статус,
	|	ДопустимыйСтатус1,
	|	ДопустимыйСтатус2,
	|	ДопустимыйСтатус3,
	|	ЕстьОшибкиПроведен,
	|	ЕстьОшибкиСтатус
	|ИЗ
	|	ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.ХозяйственнаяОперация В (&ДопустимыеОперации)
	|	И (ЕстьОшибкиПроведен
	|		ИЛИ ЕстьОшибкиПроведен)";

	Возврат ТекстЗапроса;
КонецФункции

// Проверяет возможно ли в одном документе использовать несколько различных заказов
// Если в переданных заказах отличаются реквизиты шапки, выдается сообщение об ошибке.
//
// Параметры:
// 		МассивСсылок   - Массив - заказы поставщикам, которые указаны в документе
// 		ИмяДокумента   - Строка - имя документа в метаданных, для которого осуществляется проверка
//
// Возвращаемое значение:
// 		Булево - Истина, если в переданных заказах отличаются реквизиты шапки и нельзя проводить документ с данными заказами.
//
Функция ПроверитьСовместимостьЗаказовВОдномДокументе(Знач МассивСсылок, ИмяДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	ДопустимыеОперации = ОбщегоНазначенияУТ.ДопустимыеХозяйственныеОперацииДокумента(ИмяДокумента);
	Запрос.УстановитьПараметр("ДопустимыеОперации", ДопустимыеОперации);
	Запрос.УстановитьПараметр("ИспользоватьРеглУчет", ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"));
	
	Запрос.Текст = ТекстЗапросаПоЗаказам();
		
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	ВыборкаЗаказы = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	
	ИсключаемыеЗаказы = Новый Массив;
	ВыборкаЗаказыСНедопустимойОперацией = РезультатЗапроса[РезультатЗапроса.ВГраница() - 2].Выбрать();
	
	Пока ВыборкаЗаказыСНедопустимойОперацией.Следующий() Цикл
		
		Если МассивСсылок.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru='Распоряжение %Распоряжение% пропущено, т.к. невозможно оформить документ ""%СинонимДокумента%"" на основании распоряжения с операцией ""%ХозяйственнаяОперация%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Распоряжение%", ВыборкаЗаказыСНедопустимойОперацией.ЗаказПоставщику);
		Иначе
			ТекстСообщения = НСтр("ru='Невозможно оформить документ ""%СинонимДокумента%"" на основании распоряжения с операцией ""%ХозяйственнаяОперация%"".'");
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СинонимДокумента%", Метаданные.Документы[ИмяДокумента].Синоним);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХозяйственнаяОперация%", ВыборкаЗаказыСНедопустимойОперацией.ХозяйственнаяОперация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ВыборкаЗаказыСНедопустимойОперацией.ЗаказПоставщику);
		
		ИсключаемыеЗаказы.Добавить(ВыборкаЗаказыСНедопустимойОперацией.ЗаказПоставщику);
	КонецЦикла;
	
	Если ВыборкаЗаказыСНедопустимойОперацией.Количество() = МассивСсылок.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивСсылок, ИсключаемыеЗаказы);
	
	ВыборкаРеквизитыШапки = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выбрать();
	ВыборкаРеквизитыШапки.Следующий();
	
	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У указанных распоряжений отличается поле ""%ПредставлениеПоля%""'");
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПодразделение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Подразделение'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПартнер Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Партнер'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияКонтрагент Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Контрагент'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияОрганизация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Организация'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСоглашение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Соглашение'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияДоговор Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Договор'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСклад Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Склад'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияХозяйственнаяОперация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Операция'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВалютаВзаиморасчетов Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Валюта взаиморасчетов'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияНалогообложениеНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Налогообложение НДС'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияЦенаВключаетНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Цена включает НДС'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВернутьМногооборотнуюТару Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Вернуть многооборотную тару'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСрокВозвратаМногооборотнойТары Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Срок возврата многооборотной тары'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияТребуетсяЗалогЗаТару Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Требуется залог за тару'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПорядокРасчетов Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Порядок расчетов'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияНаправленияДеятельности Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Направление деятельности'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВидЦеныПоставщика Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Вид цены поставщика'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВариантПриемкиТоваров Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Вариант приемки товаров'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияГруппаФинансовогоУчета Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Группа финансового учета'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияБанковскийСчет Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Банковский счет'")),
			,
			,
			,
			Отказ);
	
	КонецЕсли;
		
	Если ВыборкаРеквизитыШапки.ЕстьОтличияФормаОплаты Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Форма оплаты'")),
			,
			,
			,
			Отказ);
	
	КонецЕсли;
		
	Если ВыборкаРеквизитыШапки.ЕстьОтличияОплатаВВалюте Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Оплата в валюте'")),
			,
			,
			,
			Отказ);
	
	КонецЕсли;
	
	Если Отказ Тогда
		
		ТекстОшибки = НСтр("ru='Ввод одного документа ""%СинонимДокумента%"" на основании указанных распоряжений невозможен'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СинонимДокумента%", Метаданные.Документы[ИмяДокумента].Синоним);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
		
	Иначе
		
		Пока ВыборкаЗаказы.Следующий() Цикл
		
			Если ВыборкаЗаказы.ЕстьОшибкиПроведен Тогда
				
				ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод документа по непроведенному распоряжению запрещен.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаЗаказы.ЗаказПоставщику);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ВыборкаЗаказы.ЗаказПоставщику,
					,
					,
					Отказ);
				
			ИначеЕсли ВыборкаЗаказы.ЕстьОшибкиСтатус Тогда
				
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Распоряжение должно быть только в статусах'") + " ";
				
				Для Сч = 1 По 3 Цикл
					
					ДопустимыйСтатус = ВыборкаЗаказы["ДопустимыйСтатус" + Сч];
					Если ЗначениеЗаполнено(ДопустимыйСтатус) Тогда
						ТекстОшибки = ТекстОшибки + """" + ДопустимыйСтатус + """, "
					КонецЕсли;
					
				КонецЦикла;
				
				ТекстОшибки = Лев(ТекстОшибки, СтрДлина(ТекстОшибки) - 2); // Обрезаем последнюю запятую
				ТекстОшибки = ТекстОшибки + ".";
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаЗаказы.ЗаказПоставщику);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%",   ВыборкаЗаказы.Статус);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ВыборкаЗаказы.ЗаказПоставщику,
					,
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Формирует структуру для создания поступления по одному или нескольким заказам
// Если в переданных заказах отличаются реквизиты шапки, выдается сообщение об ошибке.
//
// Параметры:
// 		МассивСсылок   - Массив - заказы поставщикам, по которым необходимо ввести поступление
// 		ИмяДокумента   - Строка - имя создаваемого на основании заказа документа в метаданных
// 		РеквизитыШапки - Структура - структура, в которую будут помещены реквизиты шапки из массива заказов
//
// Возвращаемое значение:
// 		Булево - Ложь, если в переданных заказах отличаются реквизиты шапки.
//
Функция СформироватьДанныеЗаполненияПоступления(МассивСсылок, ИмяДокумента, РеквизитыШапки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	ДопустимыеОперации = ОбщегоНазначенияУТ.ДопустимыеХозяйственныеОперацииДокумента(ИмяДокумента);
	Запрос.УстановитьПараметр("ДопустимыеОперации", ДопустимыеОперации);
	Запрос.УстановитьПараметр("ИспользоватьРеглУчет", ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"));
	
	Запрос.Текст = ТекстЗапросаПоЗаказам();
		
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	ВыборкаЗаказы = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	
	ИсключаемыеЗаказы = Новый Массив;
	ВыборкаЗаказыСНедопустимойОперацией = РезультатЗапроса[РезультатЗапроса.ВГраница() - 2].Выбрать();
	
	Пока ВыборкаЗаказыСНедопустимойОперацией.Следующий() Цикл
		
		Если МассивСсылок.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru='Распоряжение %Распоряжение% пропущено, т.к. невозможно оформить документ ""%СинонимДокумента%"" на основании распоряжения с операцией ""%ХозяйственнаяОперация%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Распоряжение%", ВыборкаЗаказыСНедопустимойОперацией.ЗаказПоставщику);
		Иначе
			ТекстСообщения = НСтр("ru='Невозможно оформить документ ""%СинонимДокумента%"" на основании распоряжения с операцией ""%ХозяйственнаяОперация%"".'");
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СинонимДокумента%", Метаданные.Документы[ИмяДокумента].Синоним);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХозяйственнаяОперация%", ВыборкаЗаказыСНедопустимойОперацией.ХозяйственнаяОперация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ВыборкаЗаказыСНедопустимойОперацией.ЗаказПоставщику);
		
		ИсключаемыеЗаказы.Добавить(ВыборкаЗаказыСНедопустимойОперацией.ЗаказПоставщику);
	КонецЦикла;
	
	Если ВыборкаЗаказыСНедопустимойОперацией.Количество() = МассивСсылок.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивСсылок, ИсключаемыеЗаказы);
	
	ВыборкаРеквизитыШапки = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выбрать();
	ВыборкаРеквизитыШапки.Следующий();
	
	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных распоряжений отличается поле ""%ПредставлениеПоля%""'");
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПодразделение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Подразделение'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПартнер Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Партнер'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияКонтрагент Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Контрагент'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияОрганизация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Организация'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСоглашение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Соглашение'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияДоговор Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Договор'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСклад Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Склад'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияХозяйственнаяОперация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Операция'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВалютаВзаиморасчетов Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Валюта взаиморасчетов'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияНалогообложениеНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Налогообложение НДС'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияЗакупкаПодДеятельность Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Закупка под деятельность'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияЦенаВключаетНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Цена включает НДС'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВернутьМногооборотнуюТару Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Вернуть многооборотную тару'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСрокВозвратаМногооборотнойТары Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Срок возврата многооборотной тары'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияТребуетсяЗалогЗаТару Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Требуется залог за тару'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПорядокРасчетов Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Порядок расчетов'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияНаправленияДеятельности Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Направление деятельности'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВидЦеныПоставщика Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Вид цены поставщика'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВариантПриемкиТоваров Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Вариант приемки товаров'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияБанковскийСчет Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Банковский счет'")),
			,
			,
			,
			Отказ);
	
	КонецЕсли;
		
	Если ВыборкаРеквизитыШапки.ЕстьОтличияФормаОплаты Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Форма оплаты'")),
			,
			,
			,
			Отказ);
	
	КонецЕсли;
		
	Если ВыборкаРеквизитыШапки.ЕстьОтличияОплатаВВалюте Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Оплата в валюте'")),
			,
			,
			,
			Отказ);
	
	КонецЕсли;
	
	Если Отказ Тогда
		
		ТекстОшибки = НСтр("ru='Ввод одного документа ""%СинонимДокумента%"" на основании выделенных распоряжений невозможен'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СинонимДокумента%", Метаданные.Документы[ИмяДокумента].Синоним);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
		
	Иначе
		
		Пока ВыборкаЗаказы.Следующий() Цикл
		
			Если ВыборкаЗаказы.ЕстьОшибкиПроведен Тогда
				
				ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаЗаказы.ЗаказПоставщику);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ВыборкаЗаказы.ЗаказПоставщику,
					,
					,
					Отказ);
				
			ИначеЕсли ВыборкаЗаказы.ЕстьОшибкиСтатус Тогда
				
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусах'") + " ";
				
				Для Сч = 1 По 3 Цикл
					
					ДопустимыйСтатус = ВыборкаЗаказы["ДопустимыйСтатус" + Сч];
					Если ЗначениеЗаполнено(ДопустимыйСтатус) Тогда
						ТекстОшибки = ТекстОшибки + """" + ДопустимыйСтатус + """, "
					КонецЕсли;
					
				КонецЦикла;
				
				ТекстОшибки = Лев(ТекстОшибки, СтрДлина(ТекстОшибки) - 2); // Обрезаем последнюю запятую
				ТекстОшибки = ТекстОшибки + ".";
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаЗаказы.ЗаказПоставщику);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%",   ВыборкаЗаказы.Статус);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ВыборкаЗаказы.ЗаказПоставщику,
					,
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		РеквизитыШапки.Вставить("Подразделение",                           ВыборкаРеквизитыШапки.Подразделение);
		РеквизитыШапки.Вставить("Партнер",                                 ВыборкаРеквизитыШапки.Партнер);
		РеквизитыШапки.Вставить("Контрагент",                              ВыборкаРеквизитыШапки.Контрагент);
		РеквизитыШапки.Вставить("Договор",                                 ВыборкаРеквизитыШапки.Договор);
		РеквизитыШапки.Вставить("Организация",                             ВыборкаРеквизитыШапки.Организация);
		РеквизитыШапки.Вставить("Склад",                                   ВыборкаРеквизитыШапки.Склад);
		РеквизитыШапки.Вставить("Соглашение",                              ВыборкаРеквизитыШапки.Соглашение);
		РеквизитыШапки.Вставить("ХозяйственнаяОперация",                   ВыборкаРеквизитыШапки.ХозяйственнаяОперация);
		РеквизитыШапки.Вставить("ВалютаВзаиморасчетов",                    ВыборкаРеквизитыШапки.ВалютаВзаиморасчетов);
		РеквизитыШапки.Вставить("Валюта",                                  ВыборкаРеквизитыШапки.ВалютаВзаиморасчетов);
		РеквизитыШапки.Вставить("НалогообложениеНДС",                      ВыборкаРеквизитыШапки.НалогообложениеНДС);
		РеквизитыШапки.Вставить("ЗакупкаПодДеятельность",                  ВыборкаРеквизитыШапки.ЗакупкаПодДеятельность);
		РеквизитыШапки.Вставить("ЦенаВключаетНДС",                         ВыборкаРеквизитыШапки.ЦенаВключаетНДС);
		РеквизитыШапки.Вставить("ПорядокРасчетов",                         ВыборкаРеквизитыШапки.ПорядокРасчетов);
		РеквизитыШапки.Вставить("ВернутьМногооборотнуюТару",               ВыборкаРеквизитыШапки.ВернутьМногооборотнуюТару);
		РеквизитыШапки.Вставить("РассчитыватьДатуВозвратаТарыПоКалендарю", ВыборкаРеквизитыШапки.РассчитыватьДатуВозвратаТарыПоКалендарю);
		РеквизитыШапки.Вставить("КалендарьВозвратаТары",                   ВыборкаРеквизитыШапки.КалендарьВозвратаТары);
		РеквизитыШапки.Вставить("СрокВозвратаМногооборотнойТары",          ВыборкаРеквизитыШапки.СрокВозвратаМногооборотнойТары);
		РеквизитыШапки.Вставить("СкладПоступления",                        ВыборкаРеквизитыШапки.СкладПоступления);
		РеквизитыШапки.Вставить("ЗапрещеноВыбиратьГруппуСкладов",          ВыборкаРеквизитыШапки.ЗапрещеноВыбиратьГруппуСкладов);
		РеквизитыШапки.Вставить("НаправлениеДеятельности",                 ВыборкаРеквизитыШапки.НаправлениеДеятельности);
		РеквизитыШапки.Вставить("ВидЦеныПоставщика",                       ВыборкаРеквизитыШапки.ВидЦеныПоставщика);
		РеквизитыШапки.Вставить("ГруппаФинансовогоУчета",                  ВыборкаРеквизитыШапки.ГруппаФинансовогоУчета);
		РеквизитыШапки.Вставить("ТребуетсяЗалогЗаТару",                    ВыборкаРеквизитыШапки.ТребуетсяЗалогЗаТару);
		РеквизитыШапки.Вставить("РегистрироватьЦеныПоставщика",            ВыборкаРеквизитыШапки.РегистрироватьЦеныПоставщика);
		РеквизитыШапки.Вставить("ФормаОплаты",                             ВыборкаРеквизитыШапки.ФормаОплаты);
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Процедура заполняет банковский счета документа по договору.
//
// Параметры:
//		Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор;
//		БанковскийСчетОрганизации - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет организации;
//		БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет контрагента.
//
Процедура ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации = Неопределено, БанковскийСчетКонтрагента = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Справочники.ДоговорыКонтрагентов.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество соглашений с указанным поставщиком
//
// Параметры:
//  Партнер           - СправочникСсылка.Партнеры - партнер, для которого необходимо получить количество соглашений.
//  ПараметрыОтбора   - Структура - структура с параметрами отбора соглашений.
//
// Возвращаемое значение:
//  Структура - структура, включающая условия закупок.
//
Функция ПолучитьКоличествоСоглашенийСПоставщиком(Знач Партнер,
	                                      Знач ПараметрыОтбора = Неопределено) Экспорт
	
	ВсеПараметрыОтбора = Новый Структура();
	ВсеПараметрыОтбора.Вставить("ТолькоДляЗакупки",                        Истина);
	ВсеПараметрыОтбора.Вставить("ТолькоДействующее",                       Истина);
	ВсеПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Ложь);
	ВсеПараметрыОтбора.Вставить("ХозяйственныеОперации",                   Неопределено);
	
	Если ПараметрыОтбора <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СоглашениеСПоставщиком.Ссылка                       КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	НЕ СоглашениеСПоставщиком.ПометкаУдаления И
	|	(НЕ &ОтборХозяйственныеОперации ИЛИ СоглашениеСПоставщиком.ХозяйственнаяОперация В (&ХозяйственныеОперации)) И
	|	&ВсеПараметрыОтбораТолькоДействующее И
	|	СоглашениеСПоставщиком.Партнер = &Партнер
	|";
	
	Если ВсеПараметрыОтбора.ТолькоДействующее Тогда		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ВсеПараметрыОтбораТолькоДействующее", 
			"СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)");
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&ВсеПараметрыОтбораТолькоДействующее", 
			"ИСТИНА");
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("Партнер",                    Партнер);
	Запрос.УстановитьПараметр("ОтборХозяйственныеОперации", ВсеПараметрыОтбора.ХозяйственныеОперации <> Неопределено);
	Запрос.УстановитьПараметр("ХозяйственныеОперации",      ВсеПараметрыОтбора.ХозяйственныеОперации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции // ПолучитьКоличествоСоглашенийСПоставщиком()

// Получить условия закупок.
// 
// Параметры:
//  Соглашение - СправочникСсылка.СоглашенияСПоставщиками - соглашение,по которому необходимо получить стандартные
//                                                          условия закупок.
//  УчитыватьГруппыСкладов - Булево - Учитывать группы складов
//  ИсключитьГруппыСкладовДоступныеВЗаказах - Булево - Исключить группы складов доступные в заказах
// 
// Возвращаемое значение:
//  Структура - структура, включающая условия закупок.
Функция ПолучитьУсловияЗакупок(Знач Соглашение,Знач УчитыватьГруппыСкладов = Ложь, Знач ИсключитьГруппыСкладовДоступныеВЗаказах = Ложь) Экспорт
	Возврат ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение,
		УчитыватьГруппыСкладов, 
		ИсключитьГруппыСкладовДоступныеВЗаказах);
КонецФункции

// Возвращает массив хоз. операций - переданная хоз. операция и операции для использования в схемах "Товары в пути" и
// и "Неотфактурованные поставки".
//
// Параметры:
//  ОсновнаяХозяйственнаяОперация	 - ПеречислениеСсылка.ХозяйственныеОперации	 - основная хозяйственная операция.
// 
// Возвращаемое значение:
//  Массив - массив хозяйственных операций включая основную.
//
Функция ХозяйственныеОперацииПоОсновной(ОсновнаяХозяйственнаяОперация) Экспорт
	
	Возврат ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(ОсновнаяХозяйственнаяОперация);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Проверяет наличие в информационной базе ранее сопоставленной номенклатуры поставщика.
//
// Параметры:
//   Объект - ДанныеФормыКоллекция - документ, в котором необходимо сопоставить номенклатуру поставщика.
//
// Возвращаемое значение:
//   Булево - Истина, если необходимо выводить предупреждение о сопоставлении.
//
Функция ПроверитьСопоставленнуюНоменклатуруПоставщика(Знач Объект) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Устарела. Следует использовать см. СопоставлениеНоменклатурыКонтрагентовКлиент.СформироватьСписокВыбораНоменклатурыКонтрагента 
// Формирует список значений номенклатуры поставщика по партнеру, номенклатуре, характеристике, упаковке.
//
// Параметры:
//  Партнер        - СправочникСсылка.Партнеры - поставщик, для которого необходимо сформировать список.
//  Номенклатура   - СправочникСсылка.Номенклатура - номенклатура предприятия для фильтрации номенклатуры поставщика.
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры предприятия
//                    для фильтрации номенклатуры поставщика.
//  Упаковка       - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка номенклатуры предприятия
//                                                                   для фильтрации номенклатуры контрагента.
//
// Возвращаемое значение:
//   Массив - номенклатура поставщика, подходящая под условия фильтрации.
//
Функция СформироватьСписокВыбораНоменклатурыПоставщика(Знач Партнер, Знач Номенклатура, Знач Характеристика) Экспорт
	
	Возврат Новый Массив();
	
КонецФункции

#КонецОбласти

#КонецОбласти
