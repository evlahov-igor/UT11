#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииВыбораДокументаРасчетов

// Заполнение данных выбора объекта расчетов.
//
// Параметры:
//		ДанныеВыбора - СписокЗначений - Заполняемые данные выбора.
//		СтруктураОтбора - Структура - Отбор.
//		ВводПоСтроке - Булево - Признак того, что происходит ввод по строке.
//		ЭтоУИП - Булево - Уиникальный идентификатор платежа
//
Процедура ЗаполнитьДанныеВыбораОбъектаРасчетов(ДанныеВыбора, СтруктураОтбора, ВводПоСтроке = Истина, ЭтоУИП = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	УсловияЗапроса = Новый Массив;
	УсловияЗапроса.Добавить("ИСТИНА");
	
	Запрос.Текст = ТекстЗапросаВременныхТаблицДанныхВыбора();
		
	Запрос.УстановитьПараметр("Организация", СтруктураОтбора.Организация);
	УсловияЗапроса.Добавить(
		"(ОбъектыРасчетов.Организация = &Организация
		|ИЛИ 
		|	НЕ &Организация В (ВЫБРАТЬ ВтГоловныеОрганизации.ГоловнаяОрганизация ИЗ ВтГоловныеОрганизации)
		| 	И ОбъектыРасчетов.Договор В 
		|		(ВЫБРАТЬ 
		|			ВтЦентрализованныеДоговоры.Ссылка 
		|		ИЗ ВтЦентрализованныеДоговоры)
		|	И (ОбъектыРасчетов.Организация В (ВЫБРАТЬ ВтГоловныеОрганизации.ГоловнаяОрганизация ИЗ ВтГоловныеОрганизации)
		|		ИЛИ ЕСТЬNULL(Договоры.РазрешаетсяПередачаОплатМеждуФилиалами, ЛОЖЬ))
		|ИЛИ 
		|	&Организация В (ВЫБРАТЬ ВтГоловныеОрганизации.ГоловнаяОрганизация ИЗ ВтГоловныеОрганизации)
		|	И ОбъектыРасчетов.Организация.ГоловнаяОрганизация = &Организация
		|	И ОбъектыРасчетов.Организация.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию)");
	
	Если СтруктураОтбора.Свойство("ТипРасчетов") И ЗначениеЗаполнено(СтруктураОтбора.ТипРасчетов) Тогда
		УсловияЗапроса.Добавить("ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов");
		Запрос.УстановитьПараметр("ТипРасчетов", СтруктураОтбора.ТипРасчетов);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Контрагент") И ЗначениеЗаполнено(СтруктураОтбора.Контрагент) Тогда
		УсловияЗапроса.Добавить("ОбъектыРасчетов.Контрагент = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент", СтруктураОтбора.Контрагент);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Текст") И ЗначениеЗаполнено(СтруктураОтбора.Текст) Тогда
		Если ВводПоСтроке Тогда
			Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтруктураОтбора.Текст + "%");
			Если ЭтоУИП Тогда
				УсловияЗапроса.Добавить("ОбъектыРасчетов.ИдентификаторПлатежа ПОДОБНО &СтрокаПоиска");
			Иначе
				УсловияЗапроса.Добавить("ОбъектыРасчетов.Номер ПОДОБНО &СтрокаПоиска");
			КонецЕсли;
		Иначе
			Запрос.УстановитьПараметр("СтрокаПоиска", СтруктураОтбора.Текст);
			Если ЭтоУИП Тогда
				УсловияЗапроса.Добавить("ОбъектыРасчетов.ИдентификаторПлатежа В (&СтрокаПоиска)");
			Иначе
				УсловияЗапроса.Добавить("ОбъектыРасчетов.Номер В (&СтрокаПоиска)");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаВыбораОбъектаРасчетов(ВводПоСтроке);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДинамическиеУсловия", СтрСоединить(УсловияЗапроса, " И ")); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = СтруктураЗначениеВыбора();
		ЗаполнитьЗначенияСвойств(ЗначениеВыбора, Выборка);
		
		ДанныеВыбора.Добавить(
			Новый Структура("Значение, ПометкаУдаления", 
				ЗначениеВыбора, 
				Выборка.Состояние = 2 Или Выборка.ПометкаУдаления),
			Строка(Выборка.ОбъектРасчетов));
	КонецЦикла;
	
КонецПроцедуры

// Заполнение данных выбора основания платежа.
//
// Параметры:
//		ДанныеВыбора - СписокЗначений - Заполняемые данные выбора.
//		СтруктураОтбора - Структура - Отбор.
//		ВводПоСтроке - Булево - Признак того, что происходит ввод по строке.
//		ЭтоУИП - Булево - Уиникальный идентификатор платежа
//
Процедура ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора, СтруктураОтбора, ВводПоСтроке = Истина, ЭтоУИП = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	УсловияЗапроса = Новый Массив;
	УсловияЗапроса.Добавить("ИСТИНА");
	
	Запрос.Текст = ТекстЗапросаВременныхТаблицДанныхВыбора();
		
	Запрос.УстановитьПараметр("Организация", СтруктураОтбора.Организация);
	УсловияЗапроса.Добавить(
		"(РеестрДокументов.Организация = &Организация
		|ИЛИ 
		|	НЕ &Организация В (ВЫБРАТЬ ВтГоловныеОрганизации.ГоловнаяОрганизация ИЗ ВтГоловныеОрганизации)
		| 	И РеестрДокументов.Договор В 
		|		(ВЫБРАТЬ 
		|			ВтЦентрализованныеДоговоры.Ссылка 
		|		ИЗ ВтЦентрализованныеДоговоры)
		|	И (РеестрДокументов.Организация В (ВЫБРАТЬ ВтГоловныеОрганизации.ГоловнаяОрганизация ИЗ ВтГоловныеОрганизации)
		|		ИЛИ ЕСТЬNULL(Договоры.РазрешаетсяПередачаОплатМеждуФилиалами, ЛОЖЬ))
		|ИЛИ 
		|	&Организация В (ВЫБРАТЬ ВтГоловныеОрганизации.ГоловнаяОрганизация ИЗ ВтГоловныеОрганизации)
		|	И РеестрДокументов.Организация.ГоловнаяОрганизация = &Организация
		|	И РеестрДокументов.Организация.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию)");
	
	ЭтоРасчетыСКлиентом = СтруктураОтбора.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	
	Если СтруктураОтбора.Свойство("Контрагент") И ЗначениеЗаполнено(СтруктураОтбора.Контрагент) Тогда
		УсловияЗапроса.Добавить("ЕСТЬNULL(КлючиАналитикиУчетаПоПартнерам.Контрагент, РеестрДокументов.Контрагент.Ключ) = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент", СтруктураОтбора.Контрагент);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ТипыОснований") Тогда
		УсловияЗапроса.Добавить("ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В(&ТипыОснований)");
		Запрос.УстановитьПараметр("ТипыОснований", СтруктураОтбора.ТипыОснований);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ПодборДебиторскойЗадолженности") Тогда
		УсловияЗапроса.Добавить(?(ЭтоРасчетыСКлиентом,
				"(ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) 
				|	В (ТИП(Документ.СчетНаОплатуКлиенту)
				//++ Локализация
				|		, ТИП(Документ.СчетФактураВыданный)
				//-- Локализация
				|		)
				|		ИЛИ (ЕСТЬNULL(РасчетыСКлиентами.Сумма, РеестрДокументов.Сумма) <> 0
				|			ИЛИ ЕСТЬNULL(РасчетыСКлиентами.КОплате, 0) <> 0)
				|И (РасчетыСКлиентами.ВидДвижения ЕСТЬ NULL
				|	ИЛИ ВЫБОР
				|		КОГДА &ПодборДебиторскойЗадолженности
				|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.ВидДвижения, ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
				|		ИНАЧЕ ЕСТЬNULL(РасчетыСКлиентами.ВидДвижения, ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
				|	КОНЕЦ))"
				,"(ЕСТЬNULL(РасчетыСПоставщиками.Сумма, РеестрДокументов.Сумма) <> 0
				|		ИЛИ ЕСТЬNULL(РасчетыСПоставщиками.КОплате, 0) <> 0)
				|И (РасчетыСПоставщиками.ВидДвижения ЕСТЬ NULL
				|	ИЛИ ВЫБОР
				|		КОГДА &ПодборДебиторскойЗадолженности
				|			ТОГДА ЕСТЬNULL(РасчетыСПоставщиками.ВидДвижения, ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
				|		ИНАЧЕ ЕСТЬNULL(РасчетыСПоставщиками.ВидДвижения, ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
				|	КОНЕЦ)"
				));
		Запрос.УстановитьПараметр("ПодборДебиторскойЗадолженности", СтруктураОтбора.ПодборДебиторскойЗадолженности);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Текст") И ЗначениеЗаполнено(СтруктураОтбора.Текст) Тогда
		Если ВводПоСтроке Тогда
			Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтруктураОтбора.Текст + "%");
			Если ЭтоУИП Тогда
				Если ЭтоРасчетыСКлиентом Тогда
					УсловияЗапроса.Добавить("ВЫБОР 
						|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетНаОплатуКлиенту)
						|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетНаОплатуКлиенту).ИдентификаторПлатежа
						//++ Локализация
						|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетФактураВыданный)
						|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетФактураВыданный).ИдентификаторПлатежа
						//-- Локализация
						|		ИНАЧЕ ОбъектыРасчетов.ИдентификаторПлатежа
						|	КОНЕЦ ПОДОБНО &СтрокаПоиска");
				Иначе
					УсловияЗапроса.Добавить("ОбъектыРасчетов.ИдентификаторПлатежа ПОДОБНО &СтрокаПоиска");
				КонецЕсли;
			Иначе
				УсловияЗапроса.Добавить("РеестрДокументов.НомерДокументаИБ ПОДОБНО &СтрокаПоиска");
			КонецЕсли;
		Иначе
			Запрос.УстановитьПараметр("СтрокаПоиска", СтруктураОтбора.Текст);
			Если ЭтоУИП Тогда
				Если ЭтоРасчетыСКлиентом Тогда
					УсловияЗапроса.Добавить("ВЫБОР 
						|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетНаОплатуКлиенту)
						|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетНаОплатуКлиенту).ИдентификаторПлатежа
						//++ Локализация
						|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетФактураВыданный)
						|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетФактураВыданный).ИдентификаторПлатежа
						//-- Локализация
						|		ИНАЧЕ ОбъектыРасчетов.ИдентификаторПлатежа
						|	КОНЕЦ В (&СтрокаПоиска)");
				Иначе
					УсловияЗапроса.Добавить("ОбъектыРасчетов.ИдентификаторПлатежа В (&СтрокаПоиска)");
				КонецЕсли;
			Иначе	
				УсловияЗапроса.Добавить("РеестрДокументов.НомерДокументаИБ В (&СтрокаПоиска)");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаВыбораОснованияПлатежа(ВводПоСтроке, ЭтоРасчетыСКлиентом);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДинамическиеУсловия", СтрСоединить(УсловияЗапроса, " И ")); 
	ПутьКИдентификаторуПлатежа = ?(ЭтоРасчетыСКлиентом,
		"ВЫБОР 
		|	КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетНаОплатуКлиенту)
		|		ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетНаОплатуКлиенту).ИдентификаторПлатежа
		//++ Локализация
		|	КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетФактураВыданный)
		|		ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетФактураВыданный).ИдентификаторПлатежа
		//-- Локализация
		|	ИНАЧЕ ОбъектыРасчетов.ИдентификаторПлатежа
		|КОНЕЦ", 
		"ОбъектыРасчетов.ИдентификаторПлатежа");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИдентификаторПлатежа", ПутьКИдентификаторуПлатежа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = СтруктураЗначениеВыбора();
		ЗаполнитьЗначенияСвойств(ЗначениеВыбора, Выборка);
		Если Не ЗначениеЗаполнено(ЗначениеВыбора.ОбъектРасчетов) Тогда
			ДополнитьСтруктуруОбъектомРасчетовИВалютойВзаиморасчетов(ЗначениеВыбора);
		КонецЕсли;
		
		ДанныеВыбора.Добавить(
			Новый Структура("Значение, ПометкаУдаления", 
				ЗначениеВыбора, 
				Выборка.Состояние = 2),
			Строка(Выборка.ОснованиеПлатежа));
	КонецЦикла;
	
КонецПроцедуры

// Заполнение данных выбора идентификатора платежа.
//
// Параметры:
//		ДанныеВыбора - СписокЗначений - Заполняемые данные выбора.
//		СтруктураОтбора - Структура - Отбор.
//		ВводПоСтроке - Булево - Признак того, что происходит ввод по строке.
//
Процедура ЗаполнитьДанныеВыбораУИП(ДанныеВыбора, СтруктураОтбора, ВводПоСтроке = Истина) Экспорт
	
	ДанныеВыбораПоОбъектам = Новый СписокЗначений();
	ЗаполнитьДанныеВыбораОбъектаРасчетов(ДанныеВыбораПоОбъектам, СтруктураОтбора, ВводПоСтроке, Истина);
	НайденныеУИП = Новый Массив;
	
	Для Каждого ЭлементСписка Из ДанныеВыбораПоОбъектам Цикл
		Если НайденныеУИП.Найти(ЭлементСписка.Значение.Значение.ИдентификаторПлатежа) = Неопределено Тогда
			ДанныеВыбора.Добавить( 
				ЭлементСписка.Значение, 
				Строка(ЭлементСписка.Значение.Значение.ИдентификаторПлатежа) + " (" + Строка(ЭлементСписка.Значение.Значение.Контрагент)+ ")");
			НайденныеУИП.Добавить(ЭлементСписка.Значение.Значение.ИдентификаторПлатежа);
		КонецЕсли;
	КонецЦикла;
	
	ИскатьОснования = Ложь;
	Если ВводПоСтроке Тогда
		Если ДанныеВыбораПоОбъектам.Количество() < 10 Тогда
			ИскатьОснования = Истина;
		КонецЕсли;
	Иначе
		Если ТипЗнч(СтруктураОтбора.Текст) = Тип("Массив") Тогда
			Если НайденныеУИП.Количество() < СтруктураОтбора.Текст.Количество() Тогда
				ИскатьОснования = Истина;
			КонецЕсли;
		Иначе
			Если НайденныеУИП.Количество() = 0 Тогда
				ИскатьОснования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИскатьОснования Тогда
		
		ДанныеВыбораПоОснованиям = Новый СписокЗначений();
		ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбораПоОснованиям, СтруктураОтбора, ВводПоСтроке, Истина);
		
		Для Каждого ЭлементСписка Из ДанныеВыбораПоОснованиям Цикл
			Если НайденныеУИП.Найти(ЭлементСписка.Значение.Значение.ИдентификаторПлатежа) = Неопределено Тогда
				ДанныеВыбора.Добавить( 
					ЭлементСписка.Значение, 
					Строка(ЭлементСписка.Значение.Значение.ИдентификаторПлатежа) + " (" + Строка(ЭлементСписка.Значение.Значение.Контрагент)+ ")");
				НайденныеУИП.Добавить(ЭлементСписка.Значение.Значение.ИдентификаторПлатежа);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияДокументов

// Процедура заполнения табличной части "РасшифровкаПлатежа" по заказу клиента.
//
// Параметры:
//	ПараметрыЗаполнения - См. ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу.
//	РасшифровкаПлатежа - ТабличнаяЧасть, ТаблицаЗначений - Табличная часть документа, выгрузка колонок табличной части по документу.
//	СуммаКОплате - Число - Сумма к оплате, если известна.
//	Организация - СправочникСсылка.Организации - Организация, осуществляющая продажу.
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - вид операции платежного документа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(ПараметрыЗаполнения, РасшифровкаПлатежа, СуммаКОплате = 0, Организация = Неопределено, ХозяйственнаяОперация = Неопределено) Экспорт
	
	ЗаказКлиента     = ПараметрыЗаполнения.ЗаказКлиента;
	Договор          = ПараметрыЗаполнения.Договор;
	ВалютаДокумента  = ПараметрыЗаполнения.ВалютаДокумента;
	Партнер          = ПараметрыЗаполнения.Партнер;
	ОснованиеПлатежа = ПараметрыЗаполнения.ОснованиеПлатежа;

	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		ЭтоЗаказ = ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента")
			ИЛИ ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
			ИЛИ ТипЗнч(ЗаказКлиента) = Тип("Массив");
			
		Если ТипЗнч(ЗаказКлиента) = Тип("Массив") Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента[0], "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "ПорядокРасчетов");
		КонецЕсли;
		
		КолонкиТаблицыРасшифровкиПлатежа = Неопределено;
		
		Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
			КолонкиТаблицыРасшифровкиПлатежа = РасшифровкаПлатежа.Колонки;
		Иначе
			КолонкиТаблицыРасшифровкиПлатежа = Метаданные.НайтиПоТипу(ТипЗнч(РасшифровкаПлатежа)).Реквизиты;
		КонецЕсли;
		
		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным 
				И (ЭтоЗаказ ИЛИ ТипЗнч(ЗаказКлиента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РасчетыСКлиентами.ДатаПлатежа КАК Период,
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыСКлиентами.Валюта КАК Валюта,
			|	РасчетыСКлиентами.КОплате КАК КОплате,
			|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ОбъектыРасчетов.Объект КАК Объект,
			|	ОбъектыРасчетов.Организация КАК Организация
			|ПОМЕСТИТЬ ВтРасчетыСКлиентами
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|			ПО ОбъектыРасчетов.Объект = ДоговорыКонтрагентов.Ссылка
			|		ПО РасчетыСКлиентами.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
			|ГДЕ
			|	РасчетыСКлиентами.Активность
			|	И РасчетыСКлиентами.Регистратор В(&ЗаказКлиента)
			|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И РасчетыСКлиентами.КОплате > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасчетыСКлиентами.Период КАК Период,
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыСКлиентами.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	Аналитика.Партнер КАК Партнер,
			|	РасчетыСКлиентами.Валюта КАК Валюта,
			|	РасчетыСКлиентами.Объект КАК Объект,
			|	РасчетыСКлиентами.Организация КАК Организация,
			|	СУММА(РасчетыСКлиентами.КОплате) КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ТаблицаКОплате
			|ИЗ
			|	ВтРасчетыСКлиентами КАК РасчетыСКлиентами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|			И (&Организация = Аналитика.Организация
			|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКлиентами.Период,
			|	РасчетыСКлиентами.ОбъектРасчетов,
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентами.Валюта,
			|	Аналитика.Партнер,
			|	РасчетыСКлиентами.СтатьяДвиженияДенежныхСредств,
			|	РасчетыСКлиентами.Объект,
			|	РасчетыСКлиентами.Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ТекущаяДата,
			|	Аналитика.КлючАналитики,
			|	ОбъектыРасчетов.Ссылка,
			|	ДанныеДоговора.СтатьяДвиженияДенежныхСредств,
			|	ДанныеДоговора.Партнер,
			|	ДанныеДоговора.ВалютаВзаиморасчетов,
			|	ОбъектыРасчетов.Объект,
			|	ОбъектыРасчетов.Организация,
			|	0
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ДанныеДоговора.Партнер = Аналитика.Партнер
			|			И ДанныеДоговора.Контрагент = Аналитика.Контрагент
			|			И ДанныеДоговора.Организация = Аналитика.Организация
			|			И ДанныеДоговора.Ссылка = Аналитика.Договор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|			ПО ДанныеДоговора.Ссылка = ОбъектыРасчетов.Объект
			|ГДЕ
			|	ДанныеДоговора.Ссылка В(&ЗаказКлиента)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаКОплате.Период) КАК Период,
			|	ТаблицаКОплате.Объект КАК ОснованиеПлатежа,
			|	ТаблицаКОплате.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ТаблицаКОплате.Организация КАК Организация,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер КАК Партнер,
			|	ТаблицаКОплате.Валюта КАК ВалютаВзаиморасчетов,
			|	ВЫБОР
			|		КОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику) > 0
			|				И СУММА(ТаблицаКОплате.СуммаПоГрафику) <= МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
			|			ТОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику)
			|		ИНАЧЕ МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
			|	КОНЕЦ КАК СуммаПоГрафику,
			|	СУММА(0) КАК СуммаОплаты
			|ИЗ
			|	ТаблицаКОплате КАК ТаблицаКОплате
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
			|				,
			|				(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта) В
			|					(ВЫБРАТЬ
			|						ТаблицаКОплате.АналитикаУчетаПоПартнерам,
			|						ТаблицаКОплате.ОбъектРасчетов,
			|						ТаблицаКОплате.Валюта
			|					ИЗ
			|						ТаблицаКОплате)) КАК РасчетыСКлиентамиОстатки
			|		ПО ТаблицаКОплате.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам
			|			И ТаблицаКОплате.ОбъектРасчетов = РасчетыСКлиентамиОстатки.ОбъектРасчетов
			|			И ТаблицаКОплате.Валюта = РасчетыСКлиентамиОстатки.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаКОплате.ОбъектРасчетов,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер,
			|	ТаблицаКОплате.Валюта,
			|	ТаблицаКОплате.Объект,
			|	ТаблицаКОплате.Организация
			|ИТОГИ ПО
			|	ОснованиеПлатежа";
			
		ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
			И ЭтоЗаказ
			И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
			|	ОбъектыРасчетов.Организация КАК Организация,
			|	ОбъектыРасчетов.Партнер КАК Партнер,
			|	ОбъектыРасчетов.Объект КАК Объект
			|ПОМЕСТИТЬ ВТОбъектыРасчетов
			|ИЗ 
			|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|ГДЕ
			|	ОбъектыРасчетов.Объект В (&ЗаказКлиента)
			|;
			|ВЫБРАТЬ
			|	Заказ.Ссылка КАК ОснованиеПлатежа,
			|	ОбъектыРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ОбъектыРасчетов.Организация КАК Организация,
			|	ОбъектыРасчетов.Партнер КАК Партнер,
			|	Заказ.Соглашение КАК Соглашение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Заказ.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(Заказ.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ Заказ.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплатыЗаказа.ДатаПлатежа КАК Период,
			|	Заказ.Валюта КАК ВалютаВзаиморасчетов,
			|	Заказ.ФормаОплаты КАК ФормаОплаты,
			|	ЭтапыОплатыЗаказа.НомерСтроки КАК НомерСтроки,
			|	ЭтапыОплатыЗаказа.СуммаПлатежа + ЭтапыОплатыЗаказа.СуммаЗалогаЗаТару КАК СуммаПоГрафику,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаРасход, 0) КАК СуммаОплаты
			|ИЗ
			|	Документ.ЗаказКлиента КАК Заказ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыОплатыЗаказа
			|		ПО Заказ.Ссылка = ЭтапыОплатыЗаказа.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
			|		ПО ОбъектыРасчетов.Объект = Заказ.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ОбъектРасчетов В (ВЫБРАТЬ ОбъектРасчетов ИЗ ВТОбъектыРасчетов)) КАК РасчетыСКлиентамиОбороты
			|		ПО ОбъектыРасчетов.ОбъектРасчетов = РасчетыСКлиентамиОбороты.ОбъектРасчетов
			|ГДЕ
			|	Заказ.Ссылка В(&ЗаказКлиента)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка,
			|	ОбъектыРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ОбъектыРасчетов.Организация КАК Организация,
			|	Аналитика.Партнер,
			|	ЗаявкаНаВозвратТоваровОтКлиента.Соглашение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ЗаявкаНаВозвратТоваровОтКлиента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(ЗаявкаНаВозвратТоваровОтКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ ЗаявкаНаВозвратТоваровОтКлиента.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.ДатаПлатежа,
			|	ЗаявкаНаВозвратТоваровОтКлиента.Валюта,
			|	ЗаявкаНаВозвратТоваровОтКлиента.ФормаОплаты,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.СуммаПлатежа + ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.СуммаЗалогаЗаТару,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаРасход, 0)
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты
			|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Партнер = Аналитика.Партнер
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Контрагент = Аналитика.Контрагент
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Организация = Аналитика.Организация
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Договор = Аналитика.Договор
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
			|		ПО ОбъектыРасчетов.Объект = ЗаявкаНаВозвратТоваровОтКлиента.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ОбъектРасчетов В (ВЫБРАТЬ Объект ИЗ ВТОбъектыРасчетов)) КАК РасчетыСКлиентамиОбороты
			|		ПО ОбъектыРасчетов.ОбъектРасчетов = РасчетыСКлиентамиОбороты.ОбъектРасчетов
			|ГДЕ
			|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&ЗаказКлиента)
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|ИТОГИ ПО
			|	ОснованиеПлатежа";
		Иначе
				
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
			|	ОбъектыРасчетов.Объект КАК Объект,
			|	ОбъектыРасчетов.Организация КАК Организация,
			|	ОбъектыРасчетов.Договор КАК Договор
			|ПОМЕСТИТЬ ВТОбъектыРасчетов
			|ИЗ 
			|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|ГДЕ
			|	ОбъектыРасчетов.Объект В (&ЗаказКлиента)
			|;
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Объект КАК ОснованиеПлатежа,
			|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ОбъектыРасчетов.Организация КАК Организация,
			|	Аналитика.Партнер КАК Партнер,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОбъектыРасчетов.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(ОбъектыРасчетов.Объект.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ ОбъектыРасчетов.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	РасчетыСКлиентами.ДатаПлатежа КАК Период,
			|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
			|	РасчетыСКлиентами.ФормаОплаты КАК ФормаОплаты,
			|	РасчетыСКлиентами.КОплате КАК СуммаПоГрафику,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеРасход, 0) + ЕСТЬNULL(РасчетыСКлиентамиОбороты.ОплачиваетсяОборот, 0) КАК СуммаОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , Период, ) КАК РасчетыСКлиентамиОбороты
			|		ПО РасчетыСКлиентами.ОбъектРасчетов = РасчетыСКлиентамиОбороты.ОбъектРасчетов
			|			И РасчетыСКлиентами.Валюта = РасчетыСКлиентамиОбороты.Валюта
			|			И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|			И (&Организация = Аналитика.Организация
			|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
			|		ПО РасчетыСКлиентами.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
			|ГДЕ
			|	РасчетыСКлиентами.Активность
			|	И РасчетыСКлиентами.ОбъектРасчетов В(ВЫБРАТЬ ОбъектРасчетов ИЗ ВТОбъектыРасчетов)
			|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И РасчетыСКлиентами.КОплате > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	РасчетыСКлиентами.ДатаПлатежа,
			|	РасчетыСКлиентами.НомерСтроки
			|ИТОГИ ПО
			|	ОснованиеПлатежа";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
		Запрос.УстановитьПараметр("ПоДоговорам", ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
												ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Если ХозяйственнаяОперация = Неопределено Тогда 
			СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		Иначе
			СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
		КонецЕсли;
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			СуммаПоГрафикуВсего = 0;
			УчтеноСуммаОплаты = 0;
		
			Выборка = ВыборкаПоЗаказам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Найдем первый неоплаченный этап.
				Если (Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего) > Выборка.СуммаОплаты Тогда
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					
					Если КолонкиТаблицыРасшифровкиПлатежа.Найти("ОснованиеПлатежа") <> Неопределено Тогда
						
						НоваяСтрока.ОснованиеПлатежа = ОснованиеПлатежа;
						
						Если Не ЗначениеЗаполнено(НоваяСтрока.ОснованиеПлатежа) Тогда
							НоваяСтрока.ОснованиеПлатежа = Выборка.ОснованиеПлатежа;
						КонецЕсли;
					
					КонецЕсли;
					
					Если КолонкиТаблицыРасшифровкиПлатежа.Найти("Организация") <> Неопределено Тогда
						НоваяСтрока.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ОбъектРасчетов, "Организация");
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					Иначе
						
						Если ХозяйственнаяОперация <> Неопределено Тогда
							НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
						КонецЕсли;
						
					КонецЕсли;
					
					НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего - (Выборка.СуммаОплаты + УчтеноСуммаОплаты);
					
					Если СуммаКОплате <> 0 Тогда
						НоваяСтрока.СуммаВзаиморасчетов = Мин(НоваяСтрока.СуммаВзаиморасчетов, СуммаКОплате);
						СуммаКОплате = СуммаКОплате - НоваяСтрока.СуммаВзаиморасчетов;
						УчтеноСуммаОплаты = УчтеноСуммаОплаты + НоваяСтрока.СуммаВзаиморасчетов;
						СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					КонецЕсли;
					
					Если ТипЗнч(ОснованиеПлатежа) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
						И ОснованиеПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера
						И ЗначениеЗаполнено(Договор) И Договор.ВестиРасчетыЧерезКонечныхПокупателей Тогда
						НоваяСтрока.ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Договор,
							Организация,
							Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
						НоваяСтрока.Партнер = Договор.Партнер;
					КонецЕсли;
					
					Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
										ВалютаДокумента, 
										Выборка.ВалютаВзаиморасчетов,
										ТекущаяДатаСеанса(),
										Выборка.Организация);
										
					НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, 
											НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					
					Если СуммаКОплате = 0 Тогда
						Прервать;
					КонецЕсли;
					
				Иначе
					
					Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда 
						
						НоваяСтрока = РасшифровкаПлатежа.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						
						Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
							НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
						КонецЕсли;
						
						Если КолонкиТаблицыРасшифровкиПлатежа.Найти("Организация") <> Неопределено Тогда
							НоваяСтрока.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ОбъектРасчетов, "Организация");
						КонецЕсли;
						
						НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику;
						Если КолонкиТаблицыРасшифровкиПлатежа.Найти("Организация") <> Неопределено Тогда
							Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
								ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса(), НоваяСтрока.Организация);
						Иначе
							Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
								ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса(), Выборка.Организация);
						КонецЕсли;
						НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);

					Иначе
						СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			Если ТипЗнч(ЗаказКлиента) <> Тип("Массив") Тогда
				Если КолонкиТаблицыРасшифровкиПлатежа.Найти("ОснованиеПлатежа") <> Неопределено Тогда
					НоваяСтрока.ОснованиеПлатежа = ЗаказКлиента;
				КонецЕсли;
				НоваяСтрока.ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
					?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
						ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным
						, Договор, ЗаказКлиента),, Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
				НоваяСтрока.Партнер = Партнер;
				Если ЗначениеЗаполнено(Договор) Тогда
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
				КонецЕсли;
				Если КолонкиТаблицыРасшифровкиПлатежа.Найти("Организация") <> Неопределено Тогда
					НоваяСтрока.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ОбъектРасчетов, "Организация");
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			КолонкиГруппировки = "ОбъектРасчетов, СтатьяДвиженияДенежныхСредств, Партнер, ВалютаВзаиморасчетов";
			
			Если КолонкиТаблицыРасшифровкиПлатежа.Найти("ОснованиеПлатежа") <> Неопределено Тогда
				КолонкиГруппировки = КолонкиГруппировки + ", ОснованиеПлатежа";
			КонецЕсли;
			
			Если КолонкиТаблицыРасшифровкиПлатежа.Найти("Организация") <> Неопределено Тогда
				КолонкиГруппировки = КолонкиГруппировки + ", Организация";
			КонецЕсли;
			
			РасшифровкаПлатежа.Свернуть(КолонкиГруппировки, "Сумма, СуммаВзаиморасчетов");
			
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
			ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Организация, ТекущаяДатаСеанса(), ВалютаДокумента, РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Истина));
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по счету на оплату.
//
// Параметры:
//	СчетНаОплату - ДокументСсылка.СчетНаОплатуКлиенту - Документ - основание.
//	Организация - СправочникСсылка.Организации - Документ - основание.
//	ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Заказ.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоСчетуНаОплату(СчетНаОплату, Организация, ЗаказКлиента, ВалютаДокумента, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ЗаказКлиента);
	
	// Заполнение табличной части "Расшифровка платежа"
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.СчетНаОплату,
	|	СУММА(
	|		ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			РасчетыСКлиентами.Сумма
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|		) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВтРасчетыПоСчету
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И РасчетыСКлиентами.СчетНаОплату = &СчетНаОплату
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.СчетНаОплату
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетыСКлиентами.СчетНаОплату
	|;
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Ссылка КАК ОснованиеПлатежа,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	СчетНаОплатуКлиенту.ДокументОснование.Партнер КАК Партнер,
	|	СчетНаОплатуКлиенту.ДокументОснование.Соглашение КАК Соглашение,
	|	
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ЕСТЬNULL(СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
	|			ВЫРАЗИТЬ(СчетНаОплатуКлиенту.ДокументОснование.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
	|		ИНАЧЕ
	|			СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств
	|		КОНЕЦ
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	ЕСТЬNULL(
	|		СчетНаОплатуКлиенту.ДокументОснование.ВалютаВзаиморасчетов, 
	|		СчетНаОплатуКлиенту.ДокументОснование.Валюта
	|	) КАК ВалютаВзаиморасчетов,
	|
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Справочник.ДоговорыКонтрагентов
	|	 ИЛИ СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|	КОГДА СчетНаОплатуКлиенту.СуммаДокумента >
	|			ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток, 0) ТОГДА
	|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток, 0)
	|	КОГДА СчетНаОплатуКлиенту.СуммаДокумента > ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0) ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетыПоСчету КАК РасчетыСКлиентами
	|	ПО
	|		СчетНаОплатуКлиенту.Ссылка = РасчетыСКлиентами.СчетНаОплату
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентами.Остатки(, 
	|			ОбъектРасчетов = &ОбъектРасчетов
	|		) КАК РасчетыСКлиентамиОстатки
	|	ПО
	|		ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ВЫБОР КОГДА СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) 
	|			ТОГДА СчетНаОплатуКлиенту.Договор
	|			ИНАЧЕ СчетНаОплатуКлиенту.ДокументОснование
	|		КОНЕЦ = ОбъектыРасчетов.Объект
	|		И ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|		
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &СчетНаОплату
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	
	СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
		КонецЕсли;
		
		Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса(), Выборка.Организация);
		НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СчетНаОплату = СчетНаОплату;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
		ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Организация, ТекущаяДатаСеанса(), ВалютаДокумента, ОбъектРасчетов, Истина));
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по возврату товаров от клиента.
//
// Параметры:
//	Объекты - ДокументСсылка, Массив из ДокументСсылка - Документ основание.
//	Организация - СправочникСсылка.Организации - Организация документа.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	СуммаДокумента - Число - Сумма документа - основания.
//	Партнер - СправочникСсылка.Партнеры - Партнер документа - основания.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(Объекты, Организация, ВалютаДокумента, СуммаДокумента, Партнер, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Объект КАК Объект,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Организация КАК Организация
		|ПОМЕСТИТЬ ВТОбъектыРасчетов
		|ИЗ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект В (&Объекты)
		|;
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Организация КАК Организация,
		|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
		|	(-РасчетыСКлиентами.КОплатеОстаток) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
		|		ОбъектРасчетов В (ВЫБРАТЬ ОбъектРасчетов ИЗ ВТОбъектыРасчетов)
		|	) КАК РасчетыСКлиентами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО РасчетыСКлиентами.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
		|ГДЕ
		|	РасчетыСКлиентами.КОплатеОстаток < 0
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР КОГДА ОбъектыРасчетов.Объект ССЫЛКА Документ.ВозвратТоваровОтКлиента ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ
		|");
		
		Запрос.УстановитьПараметр("Объекты", Объекты);
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
			Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Партнер = Партнер;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
			
			Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
								ВалютаДокумента,
								Выборка.ВалютаВзаиморасчетов,
								ТекущаяДатаСеанса(),
								Выборка.Организация);
			
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, 
						НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если Сумма <= СуммаДокумента Тогда
				НоваяСтрока.Сумма = Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		Иначе
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер = Партнер;
			НоваяСтрока.Сумма = СуммаДокумента;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
			ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Организация, ТекущаяДатаСеанса(), ВалютаДокумента, РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Ложь));
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по заказу поставщику.
//
// Параметры:
//	ЗаказПоставщику - ДокументСсылка.ЗаказПоставщику - Документ - основание.
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор для заполнения.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	СуммаКОплате - Число - Сумма к оплате поставщику.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//	ЖелательнаяДатаПлатежа - Дата - Дата платежа по графику.
//  Организация - СправочникСсылка.Организации - Организация, осуществляющая закупку.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(ЗаказПоставщику, Договор, ВалютаДокумента, Знач СуммаКОплате, РасшифровкаПлатежа, ЖелательнаяДатаПлатежа = Неопределено, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Если ТипЗнч(ЗаказПоставщику) = Тип("Массив") Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику[0], "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "ПорядокРасчетов");
		КонецЕсли;
		
		Если (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным)
			И ТипЗнч(ЗаказПоставщику) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	РасчетыСПоставщиками.ДатаПлатежа				КАК Период,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщиками.ОбъектРасчетов            КАК ОбъектРасчетов,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.ОбъектРасчетов.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.ОбъектРасчетов.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ РасчетыСПоставщиками.ОбъектРасчетов.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	Аналитика.Партнер							   КАК Партнер,
			|	РасчетыСПоставщиками.Валюта					   КАК Валюта,
			|	СУММА(РасчетыСПоставщиками.КОплате)			   КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ТаблицаКОплате
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|		И (&Организация = Аналитика.Организация
			|			ИЛИ &Организация = Неопределено)
			|ГДЕ
			|	РасчетыСПоставщиками.Активность
			|	И РасчетыСПоставщиками.Регистратор В (&ЗаказПоставщику)
			|	И (РасчетыСПоставщиками.ОбъектРасчетов.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
			|		ИЛИ &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
			|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПоставщиками.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПоставщиками.ДатаПлатежа,
			|	РасчетыСПоставщиками.ОбъектРасчетов,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.ОбъектРасчетов.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.ОбъектРасчетов.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ РасчетыСПоставщиками.ОбъектРасчетов.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщиками.Валюта,
			|	Аналитика.Партнер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ТекущаяДата КАК Период,
			|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
			|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
			|	ДанныеДоговора.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ДанныеДоговора.Партнер КАК Партнер,
			|	ДанныеДоговора.ВалютаВзаиморасчетов КАК Валюта,
			|	0 КАК СуммаПоГрафику
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ДанныеДоговора.Партнер = Аналитика.Партнер
			|			И ДанныеДоговора.Контрагент = Аналитика.Контрагент
			|			И ДанныеДоговора.Организация = Аналитика.Организация
			|			И ДанныеДоговора.Ссылка = Аналитика.Договор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|			ПО ДанныеДоговора.Ссылка = ОбъектыРасчетов.Объект
			|ГДЕ
			|	ДанныеДоговора.Ссылка В (&ЗаказПоставщику)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаКОплате.Период) КАК Период,
			|	ТаблицаКОплате.ОбъектРасчетов  КАК ОбъектРасчетов,
			|	ТаблицаКОплате.ОбъектРасчетов.Организация  КАК Организация,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер		   КАК Партнер,
			|	ТаблицаКОплате.Валюта		   КАК ВалютаВзаиморасчетов,
			|
			|	ВЫБОР
			|		КОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику) > 0 И СУММА(ТаблицаКОплате.СуммаПоГрафику) <=
			|				МАКСИМУМ(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток-РасчетыСПоставщикамиОстатки.КОплатеОстаток)
			|			ТОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику)
			|		ИНАЧЕ МАКСИМУМ(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток-РасчетыСПоставщикамиОстатки.КОплатеОстаток)
			|	КОНЕЦ КАК СуммаПоГрафику,
			|	СУММА(0) КАК СуммаОплаты
			|
			|ИЗ
			|	ТаблицаКОплате КАК ТаблицаКОплате
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|				,
			|				(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта) В
			|					(ВЫБРАТЬ
			|						ТаблицаКОплате.АналитикаУчетаПоПартнерам,
			|						ТаблицаКОплате.ОбъектРасчетов,
			|						ТаблицаКОплате.Валюта
			|					ИЗ
			|						ТаблицаКОплате)) КАК РасчетыСПоставщикамиОстатки
			|		ПО ТаблицаКОплате.АналитикаУчетаПоПартнерам = РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам
			|			И ТаблицаКОплате.ОбъектРасчетов = РасчетыСПоставщикамиОстатки.ОбъектРасчетов
			|			И ТаблицаКОплате.Валюта = РасчетыСПоставщикамиОстатки.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаКОплате.ОбъектРасчетов,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер,
			|	ТаблицаКОплате.Валюта
			|
			|ИТОГИ ПО
			|	ТаблицаКОплате.ОбъектРасчетов
			|";
			
		Иначе
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
			|	ОбъектыРасчетов.Объект КАК Объект
			|ПОМЕСТИТЬ ВТОбъектыРасчетов
			|ИЗ 
			|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|ГДЕ
			|	ОбъектыРасчетов.Объект В (&ЗаказПоставщику)
			|; 
			|ВЫБРАТЬ
			|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	Аналитика.Партнер КАК Партнер,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОбъектыРасчетов.Объект.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(ОбъектыРасчетов.Объект.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ ОбъектыРасчетов.Объект.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	РасчетыСПоставщиками.ДатаПлатежа КАК Период,
			|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
			|	РасчетыСПоставщиками.ФормаОплаты КАК ФормаОплаты,
			|	СУММА(РасчетыСПоставщиками.КОплате) КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ЭтапыОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|			И (&Организация = Аналитика.Организация
			|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
			|			ПО РасчетыСПоставщиками.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
			|ГДЕ
			|	РасчетыСПоставщиками.Активность
			|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПоставщиками.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПоставщиками.ОбъектРасчетов,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
			|	Аналитика.Партнер,
			|	РасчетыСПоставщиками.ДатаПлатежа,
			|	РасчетыСПоставщиками.Валюта,
			|	РасчетыСПоставщиками.ФормаОплаты,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОбъектыРасчетов.Объект.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(ОбъектыРасчетов.Объект.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ ОбъектыРасчетов.Объект.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапыОплаты.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ЭтапыОплаты.ОбъектРасчетов.Организация КАК Организация,
			|	ЭтапыОплаты.Партнер,
			|	ЭтапыОплаты.СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплаты.Период,
			|	ЭтапыОплаты.ВалютаВзаиморасчетов,
			|	ЭтапыОплаты.ФормаОплаты,
			|	ЭтапыОплаты.СуммаПоГрафику,
			|	СУММА(ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеПриход, 0) -
			|		ЕСТЬNULL(РасчетыСПоставщикамиОбороты.ОплачиваетсяОборот, 0)) КАК СуммаОплаты
			|ИЗ
			|	ЭтапыОплаты КАК ЭтапыОплаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Обороты(, , Период, ) КАК РасчетыСПоставщикамиОбороты
			|		ПО (РасчетыСПоставщикамиОбороты.ОбъектРасчетов = ЭтапыОплаты.ОбъектРасчетов)
			|			И (РасчетыСПоставщикамиОбороты.Валюта = ЭтапыОплаты.ВалютаВзаиморасчетов)
			|			И (РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам = ЭтапыОплаты.АналитикаУчетаПоПартнерам)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыОплаты.ОбъектРасчетов,
			|	ЭтапыОплаты.Партнер,
			|	ЭтапыОплаты.СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплаты.Период,
			|	ЭтапыОплаты.ВалютаВзаиморасчетов,
			|	ЭтапыОплаты.ФормаОплаты,
			|	ЭтапыОплаты.СуммаПоГрафику
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтапыОплаты.Период
			|ИТОГИ ПО
			|	ОбъектРасчетов";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ПорядокРасчетов",ПорядокРасчетов);
		Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			СуммаПоГрафикуВсего = 0;
			УчтеноСуммаОплаты = 0;
			
			Выборка = ВыборкаПоЗаказам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Найдем первый неоплаченный этап.
				Если (Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего) > Выборка.СуммаОплаты
				 ИЛИ СуммаКОплате <> 0 Тогда
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
					НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего - (Выборка.СуммаОплаты + УчтеноСуммаОплаты);
					Если СуммаКОплате <> 0 Тогда
						НоваяСтрока.СуммаВзаиморасчетов = Мин(НоваяСтрока.СуммаВзаиморасчетов, СуммаКОплате);
						СуммаКОплате = СуммаКОплате - НоваяСтрока.СуммаВзаиморасчетов;
						УчтеноСуммаОплаты = УчтеноСуммаОплаты + НоваяСтрока.СуммаВзаиморасчетов;
						СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					КонецЕсли;
					
					Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
									ВалютаДокумента, 
									Выборка.ВалютаВзаиморасчетов,
									ТекущаяДатаСеанса(),
									Выборка.Организация);
					
					НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, 
											НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					
					Если ЗначениеЗаполнено(ЖелательнаяДатаПлатежа) Тогда
						ЖелательнаяДатаПлатежа = Мин(ЖелательнаяДатаПлатежа, Выборка.Период);
					Иначе
						ЖелательнаяДатаПлатежа = Выборка.Период;
					КонецЕсли;
					
					Если НоваяСтрока.СуммаВзаиморасчетов = 0 И НоваяСтрока.Сумма = 0 Тогда
						РасшифровкаПлатежа.Удалить(НоваяСтрока);
					КонецЕсли;
					
					Если СуммаКОплате = 0 Тогда
						Прервать;
					КонецЕсли;
					
				Иначе
					
					СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			Если ТипЗнч(ЗаказПоставщику) <> Тип("Массив") Тогда
				
				Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
					ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным Тогда
					
					НоваяСтрока.ОбъектРасчетов	= ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Договор,,Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
					УстановитьПривилегированныйРежим(Истина);
					РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Партнер, СтатьяДвиженияДенежныхСредств");
					УстановитьПривилегированныйРежим(Ложь);
					НоваяСтрока.Партнер = РеквизитыДоговора.Партнер;
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.СтатьяДвиженияДенежныхСредств;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
				Иначе
					
					НоваяСтрока.ОбъектРасчетов	= ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ЗаказПоставщику,,Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
					НоваяСтрока.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "Партнер");
					Если ЗначениеЗаполнено(Договор) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
					КонецЕсли;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			РасшифровкаПлатежа.Свернуть("ОбъектРасчетов, Партнер, СтатьяДвиженияДенежныхСредств, ВалютаВзаиморасчетов", "Сумма, СуммаВзаиморасчетов");
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
			ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Организация, ТекущаяДатаСеанса(), ВалютаДокумента, РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Ложь));
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по возврату поставщику.
//
// Параметры:
//	Объекты - ДокументСсылка, Массив из ДокументСсылка - Документ основание.
//	Организация - СправочникСсылка.Организации - Организация документа.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	СуммаДокумента - Число - Сумма документа - основания.
//	Партнер - СправочникСсылка.Партнеры - Партнер документа - основания.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоВозвратуПоставщику(Объекты, Организация, ВалютаДокумента, СуммаДокумента, Партнер, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Объект КАК Объект,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Организация КАК Организация,
		|	ОбъектыРасчетов.Договор КАК Договор
		|ПОМЕСТИТЬ ВТОбъектыРасчетов
		|ИЗ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект В (&Объекты)
		|;
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Объект КАК ОснованиеПлатежа,
		|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Организация КАК Организация,
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Справочник.ДоговорыКонтрагентов) ТОГДА
		|		ОбъектыРасчетов.Объект.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ВЫБОР
		|			КОГДА ОбъектыРасчетов.Договор.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
		|				ТОГДА ВЫРАЗИТЬ(ОбъектыРасчетов.Объект.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
		|			ИНАЧЕ ОбъектыРасчетов.Договор.СтатьяДвиженияДенежныхСредств
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
		|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщиками.КОплатеОстаток КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
		|		ОбъектРасчетов В (ВЫБРАТЬ ОбъектРасчетов ИЗ ВТОбъектыРасчетов)
		|	) КАК РасчетыСПоставщиками
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ОбъектыРасчетов.ОбъектРасчетов = РасчетыСПоставщиками.ОбъектРасчетов
		|ГДЕ
		|	РасчетыСПоставщиками.КОплатеОстаток > 0
		|");
		
		Запрос.УстановитьПараметр("Объекты", Объекты);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Партнер = Партнер;
			
			Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
								ВалютаДокумента,
								Выборка.ВалютаВзаиморасчетов,
								ТекущаяДатаСеанса(),
								Выборка.Организация);
			
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, 
						НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если Сумма <= СуммаДокумента Тогда
				НоваяСтрока.Сумма = Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
			ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Организация, ТекущаяДатаСеанса(), ВалютаДокумента, РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Истина));
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по договору.
//
// Параметры:
//		Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор для получения остатков.
//		ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
//		РасшифровкаПлатежа - ТаблицаЗначений - Таблица для заполнения.
//		Организация - СправочникСсылка.Организации - Необязательное, организация для получения остатков расчетов.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоДоговоруСПоставщиком(Договор, ВалютаДокумента, РасшифровкаПлатежа, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) КАК ОбъектРасчетов,
		|	ЕСТЬNULL(Аналитика.Партнер, ДанныеДоговора.Партнер) КАК Партнер,
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.Валюта, ДанныеДоговора.ВалютаВзаиморасчетов) КАК ВалютаВзаиморасчетов,
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток - РасчетыСПоставщикамиОстатки.КОплатеОстаток, 0) КАК СуммаВзаиморасчетов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|	ПО
		|		ОбъектыРасчетов.Объект = &Договор
		|		И ОбъектыРасчетов.Организация = &Организация
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, ОбъектРасчетов.Объект = &Договор) КАК РасчетыСПоставщикамиОстатки
		|	ПО
		|		ИСТИНА
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
		|			И (&Организация = Аналитика.Организация
		|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
		|ГДЕ
		|	ДанныеДоговора.Ссылка = &Договор
		|");
		
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
			Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
		КонецЕсли;
		
		Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
							ВалютаДокумента,
							Выборка.ВалютаВзаиморасчетов,
							ТекущаяДатаСеанса(),
							Организация);
		
		НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0,
			НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
		
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
			ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Организация, ТекущаяДатаСеанса(), ВалютаДокумента, РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Ложь));
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает результат запроса по остаткам расчетов с партнером.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа.
//	Контрагент - СправочникСсылка.Контрагенты - Контрагент, выбранный в документе.
//	ТипЗадолженности - ПеречислениеСсылка.ТипыЗадолженности - Тип задолженности.
//	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов.
//	Дата - Дата - Дата документа.
//	Валюта - СправочникСсылка.Валюты - Валюта документа.
//	Задолженность - ДанныеФормыКоллекция - Табличная часть документа.
//
Процедура ЗаполнитьЗадолженностьПоОстаткам(Организация, Контрагент, ТипЗадолженности, ТипРасчетов, Дата, Валюта, Задолженность) Экспорт
	
	ТекстРасчетыСКлиентами = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентамиОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиОстатки.ОбъектРасчетов.Организация КАК Организация,
	|	РасчетыСКлиентамиОстатки.ОбъектРасчетов.Дата КАК Дата,
	|	РасчетыСКлиентамиОстатки.ОбъектРасчетов.Номер КАК Номер,
	|	РасчетыСКлиентамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСКлиентамиОстатки.СуммаОстаток
	|	ИНАЧЕ
	|		РасчетыСКлиентамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСКлиентамиОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО 
	|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		И РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	|	ТОГДА
	|		ИСТИНА
	|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		И РасчетыСКлиентамиОстатки.СуммаОстаток <= 0
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ";
	
	ТекстРасчетыСПоставщиками = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов.Организация КАК Организация,
	|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов.Дата КАК Дата,
	|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов.Номер КАК Номер,
	|	РасчетыСПоставщикамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСПоставщикамиОстатки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО 
	|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
	|		И РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	|	ТОГДА
	|		ИСТИНА
	|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		И РасчетыСПоставщикамиОстатки.СуммаОстаток <= 0
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ";
	
	ТекстЗапроса = "";
	
	Если Не ЗначениеЗаполнено(ТипРасчетов) Тогда
		
		ТекстЗапроса = ТекстРасчетыСКлиентами + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстРасчетыСПоставщиками;
		
	ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
		ТекстЗапроса = ТекстРасчетыСКлиентами;
	Иначе //РасчетыСПоставщиком
		ТекстЗапроса = ТекстРасчетыСПоставщиками;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МоментВремени = КонецДня(Дата);
	Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	Задолженность.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Валюта)
		 И Валюта <> Выборка.ВалютаВзаиморасчетов Тогда
		 
			Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Валюта, Выборка.ВалютаВзаиморасчетов, МоментВремени, Выборка.Организация);
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, Выборка.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			
		Иначе
			Сумма = Выборка.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			НоваяСтрока = Задолженность.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура получает результат запроса по остаткам расчетов с партнером по документам.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа.
//	Контрагент - СправочникСсылка.Контрагенты - Контрагент, выбранный в документе.
//	ТипЗадолженности - ПеречислениеСсылка.ТипыЗадолженности - Тип задолженности.
//	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов.
//	Дата - Дата - Дата документа.
//	Валюта - СправочникСсылка.Валюты - Валюта документа.
//	Задолженность - ДанныеФормыКоллекция - Табличная часть документа.
//
Процедура ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(Организация, Контрагент, ТипЗадолженности, ТипРасчетов, Дата, Валюта, Задолженность) Экспорт
	
	Задолженность.Очистить();
	
	ТекстВтАналитика = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
	|	И Организации.ОбособленноеПодразделение
	|	ИЛИ Организации.Ссылка = &Организация
	|;
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ ВтАналитика
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОрганизации
	|			ПО ВтОрганизации.Ссылка = РегистрАналитикаУчетаПоПартнерам.Организация
	|ГДЕ
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		ТекстРасчетыСКлиентами = 
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
		|	РегистрАналитикаУчетаПоПартнерам.Партнер     КАК Партнер,
		|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента        КАК ОбъектРасчетов,
		|	РасчетыСКлиентамиОстатки.Валюта              КАК ВалютаВзаиморасчетов,
		|	РасчетыСКлиентамиОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
		|	
		|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток < 0 ТОГДА
		|		-(РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток)
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|
		|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток < 0 ТОГДА
		|		-(РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток)
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток
		|	КОНЕЦ КАК СуммаРегл,
		|
		|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток < 0 ТОГДА
		|		-(РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток)
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток
		|	КОНЕЦ КАК СуммаУпр
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&Граница,
		|		АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)
		|		) КАК РасчетыСКлиентамиОстатки
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|	ПО 
		|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
		|
		|ГДЕ
		|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
		|		И (РасчетыСКлиентамиОстатки.ДолгОстаток > 0 ИЛИ РасчетыСКлиентамиОстатки.ПредоплатаОстаток > 0)
		|	ТОГДА
		|		ИСТИНА
		|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
		|		И (РасчетыСКлиентамиОстатки.ДолгОстаток < 0 ИЛИ РасчетыСКлиентамиОстатки.ПредоплатаОстаток < 0)
		|	ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ";
		
		ТекстРасчетыСПоставщиками = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|	РегистрАналитикаУчетаПоПартнерам.Партнер     КАК Партнер,
		|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику  КАК ОбъектРасчетов,
		|	РасчетыСПоставщикамиОстатки.Валюта           КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщикамиОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
		|	
		|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток < 0 ТОГДА
		|		-(РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток)
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	
		|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток < 0 ТОГДА
		|		-(РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток)
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток
		|	КОНЕЦ КАК СуммаРегл,
		|
		|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток < 0 ТОГДА
		|		-(РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток)
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток
		|	КОНЕЦ КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&Граница,
		|		АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)
		|		) КАК РасчетыСПоставщикамиОстатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|	ПО 
		|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
		|
		|ГДЕ
		|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
		|		И (РасчетыСПоставщикамиОстатки.ДолгОстаток > 0 ИЛИ РасчетыСПоставщикамиОстатки.ПредоплатаОстаток > 0)
		|	ТОГДА
		|		ИСТИНА
		|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
		|		И (РасчетыСПоставщикамиОстатки.ДолгОстаток < 0 ИЛИ РасчетыСПоставщикамиОстатки.ПредоплатаОстаток < 0)
		|	ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ";
		
		ТекстЗапроса = "";
		
		Если Не ЗначениеЗаполнено(ТипРасчетов) Тогда
			
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстРасчетыСПоставщиками;
			
		ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами;
		Иначе
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСПоставщиками;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		МоментВремени = КонецДня(Дата);
		Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
		
	Иначе
		
		ТекстРасчетыСКлиентами = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
			|	РегистрАналитикаУчетаПоПартнерам.Партнер     КАК Партнер,
			|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
			|	РасчетыСКлиентамиОстатки.ОбъектРасчетов      КАК ОбъектРасчетов,
			|	РасчетыСКлиентамиОстатки.Валюта              КАК ВалютаВзаиморасчетов,
			|	
			|	РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток КАК СуммаВзаиморасчетов,
			|	РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток КАК СуммаРегл,
			|	РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&Граница,
			|		АналитикаУчетаПоПартнерам В (
			|			ВЫБРАТЬ
			|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
			|			ИЗ
			|				ВтАналитика КАК ВтАналитика)
			|		) КАК РасчетыСКлиентамиОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
			|	ПО
			|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
			|ГДЕ
			|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
			|		И РасчетыСКлиентамиОстатки.ДолгОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
			|		И РасчетыСКлиентамиОстатки.ПредоплатаОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|	КОНЕЦ";
		
		ТекстРасчетыСПоставщиками = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
			|	РегистрАналитикаУчетаПоПартнерам.Партнер          КАК Партнер,
			|	РегистрАналитикаУчетаПоПартнерам.Организация      КАК Организация,
			|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов   КАК ОбъектРасчетов,
			|	РасчетыСПоставщикамиОстатки.Валюта           КАК ВалютаВзаиморасчетов,
			|	
			|	РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток КАК СуммаВзаиморасчетов,
			|	РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток КАК СуммаРегл,
			|	РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&Граница,
			|		АналитикаУчетаПоПартнерам В (
			|			ВЫБРАТЬ
			|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
			|			ИЗ
			|				ВтАналитика КАК ВтАналитика)
			|		) КАК РасчетыСПоставщикамиОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
			|	ПО
			|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
			|ГДЕ
			|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
			|		И РасчетыСПоставщикамиОстатки.ПредоплатаОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
			|		И РасчетыСПоставщикамиОстатки.ДолгОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|	КОНЕЦ";
		
		Запрос     = Новый Запрос;
		
		МоментВремени = КонецДня(Дата);
		Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
		
		Если Не ЗначениеЗаполнено(ТипРасчетов) Тогда
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстРасчетыСПоставщиками;
		ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ТекстЗапроса =  ТекстВтАналитика + ТекстРасчетыСКлиентами;
		Иначе
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСПоставщиками;
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	Остатки = Запрос.Выполнить().Выгрузить();
	Остатки.Свернуть("ТипРасчетов, Партнер, Организация, ОбъектРасчетов, ВалютаВзаиморасчетов","СуммаВзаиморасчетов, СуммаРегл, СуммаУпр");
	
	Для Каждого СтрокаОстатков Из Остатки Цикл
		
		НоваяСтрока = Задолженность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
		
	КонецЦикла;
	
КонецПроцедуры

// Пересчитывает суммы расшифровки платежа в выбранную валюту.
//
// Параметры:
//		Объект - ДокументОбъект - Документ для пересчета суммы.
//		СуммаВсего - Число - Сумма документа.
//
Процедура ПересчитатьСуммыВВалютуРасшифровкаПлатежа(Объект, СуммаВсего) Экспорт
	
	СуммаДокумента = СуммаВсего;
	ИтогСумма = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
	// Пересчитаем суммы в табличной части документа.
	Если ИтогСумма <> 0 Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			
			Сумма = Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1);
			ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
			СуммаДокумента = СуммаДокумента - Сумма;
			СтрокаТаблицы.Сумма = Сумма;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
				Если СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта Тогда
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
				СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет порядок оплаты в иностранной валюте.
//
// Параметры:
//  ВалютаОплаты - СправочникСсылка.Валюты - Необязательное, валюта предполагаемой оплаты.
//  Организация - СправочникСсылка.Организации - Необязательное, определяет валюту регламентированного учета.
//
// Возвращаемое значение:
//  Булево - оплата производится в иностранной валюте.
//
Функция ПолучитьОплатуВВалютеПоУмолчанию(Знач ВалютаОплаты = Неопределено, Знач Организация = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	Иначе
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВалютаОплаты) Тогда
		ВалютаОплаты = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если НЕ ВалютаОплаты = ВалютаРегламентированногоУчета Тогда
		ОплатаВВалюте = Истина;
	Иначе
		ОплатаВВалюте = Ложь;
	КонецЕсли;
	
	Возврат ОплатаВВалюте;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДвиженийПоРасчетамСКонтрагентами

// Процедура заполняет сумму взаиморасчетов в табличной части "Расшифровка платежка"
// в документах движения денежных средств.
//
// Параметры:
//	Валюта - СправочникСсылка.Валюты - Валюта, указанная в документе.
//	Дата - Дата - Дата документа.
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа.
//	Организация - СправочникСсылка.Организации - Организация документа. Определяет базовую валюту получения курсов.
Процедура ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(Валюта, Дата, ТабличнаяЧасть, Организация) Экспорт
	
	// Если табличная часть пустая или в табличной части заполнена сумма взаиморасчетов,
	// то выполнение процедуры не требуется.
	Если (ТабличнаяЧасть.Количество() = 0
	 ИЛИ ТабличнаяЧасть.Найти(0, "СуммаВзаиморасчетов") = Неопределено)
	 И ТабличнаяЧасть.Найти(Справочники.Валюты.ПустаяСсылка(), "ВалютаВзаиморасчетов") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ИсходнаяТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.СуммаВзаиморасчетов = 0
	|	ИЛИ ТаблицаДокумента.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.СчетНаОплату.ДокументОснование КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ТаблицаДокументовОснований
	|ИЗ
	|	ИсходнаяТаблицаДокумента КАК Таблица
	|ГДЕ
	|	Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОбъектаРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ДанныеОбъектаРасчетов.Объект КАК Ссылка,
	|	ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеОбъектаРасчетов.Партнер КАК Партнер
	|
	|ПОМЕСТИТЬ ТаблицаДокументовРасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ДанныеОбъектаРасчетов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеОбъектаРасчетов.Объект = Таблица.ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.*,
	|	Таблица.Валюта КАК Валюта,
	|
	|	ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|		ТаблицаДокументовРасчетов.ОбъектРасчетов
	|	ИНАЧЕ
	|		Таблица.ОбъектРасчетов
	|	КОНЕЦ КАК ОбъектРасчетов,
	|		
	|	ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|		ТаблицаДокументовРасчетов.Партнер
	|
	|	КОГДА Таблица.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|		Таблица.ОбъектРасчетов.Партнер
	|
	|	ИНАЧЕ
	|		Таблица.Партнер
	|	КОНЕЦ КАК Партнер,
	|	
	|	ВЫБОР КОГДА Таблица.ВалютаВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		Таблица.ВалютаВзаиморасчетов
	|	ИНАЧЕ
	|		ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|			ТаблицаДокументовРасчетов.ВалютаВзаиморасчетов
	|
	|		КОГДА Таблица.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) ТОГДА
	|			Таблица.ОбъектРасчетов.ВалютаВзаиморасчетов
	|
	|		ИНАЧЕ
	|			&Валюта
	|		КОНЕЦ
	|	КОНЕЦ КАК ВалютаВзаиморасчетов
	|	
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ИсходнаяТаблицаДокумента КАК Таблица
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовРасчетов КАК ТаблицаДокументовРасчетов
	|	ПО
	|		Таблица.СчетНаОплату.ДокументОснование = ТаблицаДокументовРасчетов.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТаблицаДокумента.Партнер КАК Партнер,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СуммаВзаиморасчетов = 0 И КурсыВалютМультивалютногоДокумента.КурсЧислитель ЕСТЬ NULL ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютДокумента.КурсЧислитель, 1) * 
	|		ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * 
	|		ЕСТЬNULL(КурсыВалютДокумента.КурсЗнаменатель, 1)
	|		)
	|	КОГДА ТаблицаДокумента.СуммаВзаиморасчетов = 0 И НЕ КурсыВалютМультивалютногоДокумента.КурсЧислитель ЕСТЬ NULL ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютМультивалютногоДокумента.КурсЧислитель, 1) * 
	|		ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * 
	|		ЕСТЬNULL(КурсыВалютМультивалютногоДокумента.КурсЗнаменатель, 1)
	|		)
	|	ИНАЧЕ
	|		ТаблицаДокумента.СуммаВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|	
	|	// Определим курс валюты документа.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютДокумента
	|	ПО
	|		ИСТИНА
	|	
	|	// Определим курс валюты документа
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютМультивалютногоДокумента
	|	ПО
	|		ТаблицаДокумента.Валюта = КурсыВалютМультивалютногоДокумента.Валюта
	|		
	|	// Определим курс валюты взаиморасчетов.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалют
	|	ПО
	|		ТаблицаДокумента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	ТаблицаДокумента = ТабличнаяЧасть.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	Если ТаблицаДокумента.Колонки.Найти("Партнер") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	КонецЕсли;
	Если ТаблицаДокумента.Колонки.Найти("Валюта") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	// Получим таблицу документа с рассчитанной суммой взаиморасчетов.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.Найти(Выборка.НомерСтроки, "НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, ,"НомерСтроки");
		
	КонецЦикла;
	
КонецПроцедуры

// Устарела.
// Процедура заполняет сумму взаиморасчетов в шапке документа.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ИмяТЧ - Строка - Необязательный, имя табличной части для расчета суммы документа
//	СтруктураКурса - Структура - Необязательный, параметры курса документа:
//       * КурсЧислитель - Число - Курс числитель валюты.
//       * КурсЗнаменатель - Число - Курс знаменатель валюты.
//	Дата - Дата - Дата, на которую будет получен курс, если не задана структура курса.
// 
Процедура ЗаполнитьСуммуВзаиморасчетов(ДокументОбъект, ИмяТЧ = "", СтруктураКурса = Неопределено, Дата = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		СуммаДокумента = ДокументОбъект[ИмяТЧ].Итог("Сумма");
		Если Не ДокументОбъект.ЦенаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТЧ].Итог("СуммаНДС");
		КонецЕсли;
	Иначе
		СуммаДокумента = ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ДокументОбъект.Дата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураКурса) И ТипЗнч(СтруктураКурса) = Тип("Структура") Тогда
		
		ВалютаРегУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
		
		Если  ДокументОбъект.Валюта = ВалютаРегУчета И НЕ ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРегУчета Тогда
			КурсЧислительВалютыДокумента = 1;
			КурсЗнаменательВалютыДокумента = 1;
			КурсЧислительВалютыВзаиморасчетов = СтруктураКурса.КурсЧислитель;
			КурсЗнаменательВалютыВзаиморасчетов = СтруктураКурса.КурсЗнаменатель;
		Иначе
			КурсЧислительВалютыДокумента = СтруктураКурса.КурсЧислитель;
			КурсЗнаменательВалютыДокумента  = СтруктураКурса.КурсЗнаменатель;
			КурсЧислительВалютыВзаиморасчетов = 1;
			КурсЗнаменательВалютыВзаиморасчетов = 1;
		КонецЕсли;
		
		ПараметрыВалютыДок = Новый Структура("Валюта, КурсЧислитель, КурсЗнаменатель",
				ДокументОбъект.Валюта, КурсЧислительВалютыДокумента, КурсЗнаменательВалютыДокумента);
		ПараметрыВалютыВР  = Новый Структура("Валюта, КурсЧислитель, КурсЗнаменатель",
				ДокументОбъект.ВалютаВзаиморасчетов, КурсЧислительВалютыВзаиморасчетов, КурсЗнаменательВалютыВзаиморасчетов);
			
		ДокументОбъект.СуммаВзаиморасчетов = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(СуммаДокумента,
				ПараметрыВалютыДок,ПараметрыВалютыВР);
			
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	(&СуммаДокумента *
		|	ЕСТЬNULL(КурсыВалютДокумента.КурсЧислитель, 1) * 
		|	ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1)
		|	) / (
		|	ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * 
		|	ЕСТЬNULL(КурсыВалютДокумента.КурсЗнаменатель, 1)
		|	) КАК СуммаВзаиморасчетов
		|	
		|ИЗ	
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата,
		|		Валюта = &ВалютаДокумента И БазоваяВалюта = &БазоваяВалюта
		|	) КАК КурсыВалютДокумента
		|	
		|	// Определим курс валюты взаиморасчетов.
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, 
		|			Валюта = &ВалютаВзаиморасчетов И БазоваяВалюта = &БазоваяВалюта
		|	) КАК КурсыВалют ПО ИСТИНА
		|");
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.Валюта);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетов);
		Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
		Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ДокументОбъект.СуммаВзаиморасчетов <> Выборка.СуммаВзаиморасчетов Тогда
				ДокументОбъект.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устарела.
// Процедура заполняет сумму взаиморасчетов в шапке документа.
//
// Параметры:
// ДокументОбъект - ДокументОбъект - Текущий документ
// ИмяТЧ - Строка - Необязательный, имя табличной части, где рассчитывается сумма взаиморасчетов
// СтруктураКурса - Структура - Необязательный, параметры курса документа:
//       * КурсЧислитель   - Число - Курс числитель валюты
//       * КурсЗнаменатель - Число - Курс знаменатель валюты
//
Процедура ЗаполнитьСуммуВзаиморасчетовВПоступлении(ДокументОбъект, ИмяТЧ = "Товары", СтруктураКурса = Неопределено) Экспорт
	
	Если ДокументОбъект[ИмяТЧ].НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество()=0 Тогда
		
		ДокументОбъект.СуммаВзаиморасчетов = ДокументОбъект[ИмяТЧ].Итог("СуммаВзаиморасчетов");
		
	Иначе
		
		СуммаДокумента = ДокументОбъект[ИмяТЧ].Итог("Сумма");
		Если Не ДокументОбъект.ЦенаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТЧ].Итог("СуммаНДС");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураКурса) И ТипЗнч(СтруктураКурса) = Тип("Структура") Тогда
			
			ВалютаРегУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
			
			Если ДокументОбъект.Валюта = ВалютаРегУчета И НЕ ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРегУчета Тогда
				КурсЧислительВалютыДокумента = 1;
				КурсЗнаменательВалютыДокумента = 1;
				КурсЧислительВалютыВзаиморасчетов = СтруктураКурса.КурсЧислитель;
				КурсЗнаменательВалютыВзаиморасчетов = СтруктураКурса.КурсЗнаменатель;
			Иначе
				КурсЧислительВалютыДокумента = СтруктураКурса.КурсЧислитель;
				КурсЗнаменательВалютыДокумента = СтруктураКурса.КурсЗнаменатель;
				КурсЧислительВалютыВзаиморасчетов = 1;
				КурсЗнаменательВалютыВзаиморасчетов = 1;
			КонецЕсли;
			
			ПараметрыВалютыДок = Новый Структура("Валюта, КурсЧислитель, КурсЗнаменатель",
				ДокументОбъект.Валюта, КурсЧислительВалютыДокумента, КурсЗнаменательВалютыДокумента);
			ПараметрыВалютыВР  = Новый Структура("Валюта, КурсЧислитель, КурсЗнаменатель",
				ДокументОбъект.ВалютаВзаиморасчетов, КурсЧислительВалютыВзаиморасчетов, КурсЗнаменательВалютыВзаиморасчетов);
			
			ДокументОбъект.СуммаВзаиморасчетов = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(СуммаДокумента,
				ПараметрыВалютыДок,ПараметрыВалютыВР);
			
		Иначе
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	(&СуммаДокумента *
			|	ЕСТЬNULL(КурсыВалютДокумента.КурсЧислитель, 1) * 
			|	ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1)
			|	) / (
			|	ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * 
			|	ЕСТЬNULL(КурсыВалютДокумента.КурсЗнаменатель, 1)
			|	) КАК СуммаВзаиморасчетов
			|	
			|ИЗ	
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата,
			|		Валюта = &ВалютаДокумента И БазоваяВалюта = &БазоваяВалюта
			|	) КАК КурсыВалютДокумента
			|	
			|	// Определим курс валюты взаиморасчетов.
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, 
			|			Валюта = &ВалютаВзаиморасчетов И БазоваяВалюта = &БазоваяВалюта
			|	) КАК КурсыВалют ПО ИСТИНА
			|");
			
			Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
			Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.Валюта);
			Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетов);
			Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
			Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если ДокументОбъект.СуммаВзаиморасчетов <> Выборка.СуммаВзаиморасчетов Тогда
					ДокументОбъект.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устарела.
// Процедура заполняет сумму НДС взаиморасчетов в табличной части документа.
//
// Параметры:
//	Документ - ДокументОбъект - Текущий документ.
//	ИмяТабличнойЧасти - Строка - Имя табличной части документа для заполнения.
// 
Процедура ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(Документ, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Документ[ИмяТабличнойЧасти];
	
	ВалютаДокумента = Документ.Валюта;
	ВалютаЗаказа    = Документ.ВалютаВзаиморасчетов;
	
	Если ВалютаДокумента = ВалютаЗаказа Тогда
		
		Для Индекс = 0 По ТабличнаяЧасть.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов)
			 ИЛИ ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов <> ТабличнаяЧасть[Индекс].СуммаНДС Тогда
				ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов = ТабличнаяЧасть[Индекс].СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Строка.СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Строка.СуммаВзаиморасчетов, Строка.СтавкаНДС);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет сумму расшифровки платежа в соответствии с суммой документа.
//
// Параметры:
//		СуммаДокумента - Число - Сумма документа для заполнения.
//		РасшифровкаПлатежа - ТаблицаЗначений - Таблица для заполнения.
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта по умолчанию.
//
Процедура ЗаполнитьСуммуРасшифровкиПлатежаПоСуммеДокумента(Знач СуммаДокумента, РасшифровкаПлатежа, ВалютаВзаиморасчетов = Неопределено) Экспорт
	
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("Сумма");
	Если СуммаДокумента <> СуммаРасшифровкиПлатежа Тогда
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Сумма = СуммаДокумента;
			Если НЕ ВалютаВзаиморасчетов = Неопределено Тогда
				НоваяСтрока.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			КонецЕсли;
		Иначе
			
			Разница = СуммаДокумента - СуммаРасшифровкиПлатежа;
			МассивУдаляемыхСтрок = Новый Массив;
			
			// Корректируются суммы в строках с пустым заказом.
			Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
					СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма + Разница, 0);
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
					Разница = СуммаДокумента - РасшифровкаПлатежа.Итог("Сумма");
				КонецЕсли;
				
				Если СтрокаТаблицы.Сумма = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
				КонецЕсли;
				
				Если Разница = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Уменьшаются суммы в строках с указанным заказом.
			Если Разница < 0 Тогда
				
				Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
						СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма + Разница, 0);
						СтрокаТаблицы.СуммаВзаиморасчетов = 0;
						Разница = СуммаДокумента - РасшифровкаПлатежа.Итог("Сумма");
					КонецЕсли;
					
					Если СтрокаТаблицы.Сумма = 0 Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
					КонецЕсли;
					
					Если Разница = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Остаток нераспределенной суммы будет отнесен на новую строку.
			Если Разница <> 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.Сумма = Разница;
				Если НЕ ВалютаВзаиморасчетов = Неопределено Тогда
					НоваяСтрока.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			// Строки с нулевой суммой будут удалены.
			Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
				РасшифровкаПлатежа.Удалить(СтрокаТаблицы);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет или очищает табличную часть расшифровка платежа накладной при расчетах по накладным.
//
// Параметры:
//	СуммаДокумента		- Число - Сумма текущего документа.
//	СуммаВзаиморасчетов - Число - Сумма взаиморасчетов документа.
//	РасшифровкаПлатежа	- ТаблицаЗначений - Расшифровка платежа накладной для заполнения:
//		* СуммаВзаиморасчетов	- Число - Сумма взаиморасчетов по строке.
//		* Сумма					- Число - Сумма в валюте документа.
//		* ОбъектРасчетов		- СправочникСсылка.ОбъектыРасчетов - Ссылки на объекты расчетов зачтенных платежи/самого документа.
//	ОбъектРасчетов		- СправочникСсылка.ОбъектыРасчетов - Ссылка на объект расчетов документа владельца расшифровки.
//
Процедура ЗаполнитьСуммыРасшифровкиНакладной(Знач СуммаДокумента, ЗНАЧ СуммаВзаиморасчетов, РасшифровкаПлатежа, ОбъектРасчетов) Экспорт
	
	Если СуммаДокумента = 0 ИЛИ СуммаВзаиморасчетов = 0 Тогда
		РасшифровкаПлатежа.Очистить();
		Возврат;
	КонецЕсли;
	
	ТребуетсяПерераспределениеСуммы = Ложь;
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов");
	НовыйКурсЧислительВзаиморасчетов = ?(СуммаДокумента = 0 ИЛИ СуммаВзаиморасчетов = 0, 0, СуммаДокумента / СуммаВзаиморасчетов);
	
	Если СуммаВзаиморасчетов <> СуммаРасшифровкиПлатежа Тогда
		
		Разница = СуммаВзаиморасчетов - СуммаРасшифровкиПлатежа;
		ТребуетсяПерераспределениеСуммы = Истина;
		
		Если Разница > 0 Тогда
			
			Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
				СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
				Если СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов Тогда
					СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровки.СуммаВзаиморасчетов + Разница;
					Разница = 0;
				КонецЕсли;
			КонецЦикла;
			
			Если Разница > 0 Тогда
				СтрокаРасшифровки = РасшифровкаПлатежа.Добавить();
				СтрокаРасшифровки.СуммаВзаиморасчетов = Разница;
				СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Разница < 0 Тогда
			
			Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
				СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
				Если СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов Тогда
					СуммаВзаиморасчетовДо = СтрокаРасшифровки.СуммаВзаиморасчетов;
					СтрокаРасшифровки.СуммаВзаиморасчетов = Макс(0,СтрокаРасшифровки.СуммаВзаиморасчетов + Разница);
					Разница = Разница + (СуммаВзаиморасчетовДо - СтрокаРасшифровки.СуммаВзаиморасчетов);
				КонецЕсли;
			КонецЦикла;
			
			Если Разница < 0 Тогда
			
				Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
					СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
					Если СтрокаРасшифровки.ОбъектРасчетов <> ОбъектРасчетов Тогда
						СуммаВзаиморасчетовДо = СтрокаРасшифровки.СуммаВзаиморасчетов;
						СтрокаРасшифровки.СуммаВзаиморасчетов = Макс(0,СтрокаРасшифровки.СуммаВзаиморасчетов + Разница);
						Разница = Разница + (СуммаВзаиморасчетовДо - СтрокаРасшифровки.СуммаВзаиморасчетов);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("Сумма");
	Если ТребуетсяПерераспределениеСуммы ИЛИ СуммаДокумента <> СуммаРасшифровкиПлатежа Тогда
		
		Если РасшифровкаПлатежа.Количество() = 1 Тогда
			РасшифровкаПлатежа[0].Сумма = СуммаДокумента;
		ИначеЕсли РасшифровкаПлатежа.Количество() > 1 Тогда
			
			НераспределеннаяСумма = СуммаДокумента;
			Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
				СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
				Если Сч = РасшифровкаПлатежа.Количество()-1 Тогда
					СтрокаРасшифровки.Сумма = НераспределеннаяСумма;
				Иначе
					СтрокаРасшифровки.Сумма = СтрокаРасшифровки.СуммаВзаиморасчетов * НовыйКурсЧислительВзаиморасчетов;
					НераспределеннаяСумма = НераспределеннаяСумма - СтрокаРасшифровки.Сумма;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < РасшифровкаПлатежа.Количество() Цикл
		
		Если РасшифровкаПлатежа[Сч].СуммаВзаиморасчетов = 0 Тогда
			РасшифровкаПлатежа.Удалить(Сч);
		Иначе
			Сч = Сч +1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ.
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента.
//
// Возвращаемое значение:
//  См. ПроведениеДокументов.ПараметрыУчетногоМеханизма.
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Для Регистра накопления ПроцентныеРасходыДисконтирования механизм проведения документов используется у документов
	// ВводОстатковВзаиморасчетов и Сторно
	ТребуютсяДвиженияПроцентныеРасходыДисконтирования = Документ.Метаданные() = Метаданные.Документы.ВводОстатковВзаиморасчетов;
	ЭтоСторно = Документ.Метаданные() = Метаданные.Документы.Сторно;
	Если ЭтоСторно Тогда
		ДокументыДляДисконтирования = РегистрыНакопления.ПроцентныеРасходыДисконтирования.ПолучитьТипыДокументовУчаствующихВДисконтировании();
		ТребуютсяДвиженияПроцентныеРасходыДисконтирования = ДокументыДляДисконтирования.Найти(ТипЗнч(Документ.СторнируемыйДокумент)) <> Неопределено;
	КонецЕсли;
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		Если ТребуютсяДвиженияПроцентныеРасходыДисконтирования Тогда
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПроцентныеРасходыДисконтирования);
		КонецЕсли;
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами);
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		Если ТребуютсяДвиженияПроцентныеРасходыДисконтирования Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ПроцентныеРасходыДисконтирования);
		КонецЕсли;
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам);
		Если ТребуютсяДвиженияПроцентныеРасходыДисконтирования Тогда
			Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПроцентныеРасходыДисконтирования);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие Из КлючИЗначение - Содержит тексты запросов сторнирования, где:
// 		* Ключ - Строка - Полное имя регистра.
// 		* Значение - Строка - Текст запроса.
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;
	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыСКлиентами;
	ДвиженияДокумента = МетаданныеДокумента.Движения;
	
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДокументыСторно.Ссылка КАК Регистратор,
		|	ДокументыСторно.Дата   КАК Период,
		|	ДокументыСторно.Дата   КАК ДатаРегистратора,
		|	ДокументыСторно.Номер  КАК НомерРегистратора,
		|	&ПоляВыборки,
		|	ДокументыСторно.СторнируемыйДокумент КАК СвязанныйДокумент,
		|	ИСТИНА КАК Сторно,
		|	1 Вид
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		&ИмяДокумента КАК ДокументыСторно
		|	ПО
		|		ДанныеРегистра.Регистратор = ДокументыСторно.СторнируемыйДокумент
		|		И ДокументыСторно.Ссылка В (&Ссылка)
		|ГДЕ
		|	НЕ ДанныеРегистра.Сторно
		|";
		
		МассивПолейВыборки = Новый Массив;
		
		Исключения = Новый Массив;
		
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.Активность.Имя);
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.НомерСтроки.Имя);
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Имя);
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.Период.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.Сторно.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ПорядокОперации.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ПорядокЗачетаПоДатеПлатежа.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.СвязанныйДокумент.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ДатаРегистратора.Имя);
		
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.СтандартныеРеквизиты, 
			МассивПолейВыборки,
			Исключения);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Измерения, 
			МассивПолейВыборки,
			Исключения);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Ресурсы, 
			МассивПолейВыборки,
			Исключения,
			Истина);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Реквизиты, 
			МассивПолейВыборки,
			Исключения,
			Истина);
			
		ТекстПоляВыборки= СтрСоединить(МассивПолейВыборки,"," + Символы.ПС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", ТекстПоляВыборки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", МетаданныеДокумента.ПолноеИмя());
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(), ТекстЗапроса);
		
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыСПоставщиками;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	ДокументыСторно.Ссылка КАК Регистратор,
		|	ДокументыСторно.Дата   КАК Период,
		|	ДокументыСторно.Дата   КАК ДатаРегистратора,
		|	ДокументыСторно.Номер  КАК НомерРегистратора,
		|	&ПоляВыборки,
		|	ДокументыСторно.СторнируемыйДокумент КАК СвязанныйДокумент,
		|	ИСТИНА КАК Сторно,
		|	1 КАК Вид
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК ДанныеРегистра
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		&ИмяДокумента КАК ДокументыСторно
		|	ПО
		|		ДанныеРегистра.Регистратор = ДокументыСторно.СторнируемыйДокумент
		|		И ДокументыСторно.Ссылка В (&Ссылка)
		|ГДЕ
		|	НЕ ДанныеРегистра.Сторно
		|";
		
		МассивПолейВыборки = Новый Массив;
		
		Исключения = Новый Массив;
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.Активность.Имя);
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.НомерСтроки.Имя);
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Имя);
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.Период.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.Сторно.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ПорядокОперации.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ПорядокЗачетаПоДатеПлатежа.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.СвязанныйДокумент.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ДатаРегистратора.Имя);
		
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.СтандартныеРеквизиты, 
			МассивПолейВыборки,
			Исключения);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Измерения, 
			МассивПолейВыборки,
			Исключения);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Ресурсы, 
			МассивПолейВыборки,
			Исключения,
			Истина);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Реквизиты, 
			МассивПолейВыборки,
			Исключения,
			Истина);
			
		ТекстПоляВыборки= СтрСоединить(МассивПолейВыборки,"," + Символы.ПС);
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&ПоляВыборки", ТекстПоляВыборки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", МетаданныеДокумента.ПолноеИмя());
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(), ТекстЗапроса);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПроцентныеРасходыДисконтирования;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	ДокументыСторно.Ссылка КАК Регистратор,
		|	ДокументыСторно.Дата   КАК Период,
		|	ДокументыСторно.Дата   КАК ДатаРегистратора,
		|	ДокументыСторно.Номер  КАК НомерРегистратора,
		|	&ПоляВыборки,
		|	ДокументыСторно.СторнируемыйДокумент КАК СвязанныйДокумент,
		|	ИСТИНА КАК Сторно,
		|	1 КАК Вид
		|ИЗ
		|	РегистрНакопления.ПроцентныеРасходыДисконтирования КАК ДанныеРегистра
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		&ИмяДокумента КАК ДокументыСторно
		|	ПО
		|		ДанныеРегистра.Регистратор = ДокументыСторно.СторнируемыйДокумент
		|		И ДокументыСторно.Ссылка В (&Ссылка)
		|ГДЕ
		|	НЕ ДанныеРегистра.Сторно
		|";
		
		МассивПолейВыборки = Новый Массив;
		
		Исключения = Новый Массив;
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.Активность.Имя);
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.НомерСтроки.Имя);
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Имя);
		Исключения.Добавить(МетаданныеРегистра.СтандартныеРеквизиты.Период.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.Сторно.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.СтавкаДисконтирования.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ФактическаяЗадолженностьБезНДС.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ДисконтированнаяЗадолженностьБезНДС.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.РассчитанныйОстатокПроцентов.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ФактическаяЗадолженностьБезНДСРегл.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ДисконтированнаяЗадолженностьБезНДСРегл.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.РассчитанныйОстатокПроцентовРегл.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ФактическаяЗадолженностьБезНДСУпр.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.ДисконтированнаяЗадолженностьБезНДСУпр.Имя);
		Исключения.Добавить(МетаданныеРегистра.Реквизиты.РассчитанныйОстатокПроцентовУпр.Имя);
		
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.СтандартныеРеквизиты, 
			МассивПолейВыборки,
			Исключения);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Измерения, 
			МассивПолейВыборки,
			Исключения);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Ресурсы, 
			МассивПолейВыборки,
			Исключения,
			Истина);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Реквизиты, 
			МассивПолейВыборки,
			Исключения,
			Истина);
			
		ТекстПоляВыборки= СтрСоединить(МассивПолейВыборки,"," + Символы.ПС);
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&ПоляВыборки", ТекстПоляВыборки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", МетаданныеДокумента.ПолноеИмя());
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(), ТекстЗапроса);
	КонецЕсли;
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие Из КлючИЗначение:
//		* Ключ - Строка - Имя временной таблицы изменений регистра.
//		* Значение - Строка - Текст запроса.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам взаиморасчетов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Область РасчетыСКлиентами
	
	ИмяТаблицыРасчетыСКлиентами = "Таблица" + "РасчетыСКлиентами";
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицыРасчетыСКлиентами) Тогда
		
		ТаблицаРасчетыСКлиентами = ТаблицыДляДвижений[ИмяТаблицыРасчетыСКлиентами];

		Если ЗначениеЗаполнено(ТаблицаРасчетыСКлиентами) Тогда
		
			ТипДокумента = ТипЗнч(Движения.РасчетыСКлиентами.Отбор.Регистратор.Значение);
			ДобавитьЗаполнитьПорядокРасчетовСКлиентами(ТаблицаРасчетыСКлиентами, ТипДокумента);
			ПроверитьЗаполнитьАналитикуУчетаПоПартнерам(ТаблицаРасчетыСКлиентами);
			
			Если ТаблицаРасчетыСКлиентами.Колонки.Найти("ПродажаПоЗаказу") <> Неопределено Тогда
				Для Каждого Стр Из ТаблицаРасчетыСКлиентами Цикл
					Если НЕ ЗначениеЗаполнено(Стр.ПродажаПоЗаказу) И Стр.ПродажаПоЗаказу <> Неопределено Тогда
						Стр.ПродажаПоЗаказу = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Движения.РасчетыСКлиентами.Записывать = Истина;
			Движения.РасчетыСКлиентами.Загрузить(ТаблицаРасчетыСКлиентами);
			
		ИначеЕсли Движения.РасчетыСКлиентами.Записывать Тогда
			
			Движения.РасчетыСКлиентамиПоДокументам.Записывать = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасчетыСПоставщиками
	
	ИмяТаблицыРасчетыСПоставщиками = "Таблица" + "РасчетыСПоставщиками";
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицыРасчетыСПоставщиками) Тогда
		
		ТаблицаРасчетыСПоставщиками = ТаблицыДляДвижений[ИмяТаблицыРасчетыСПоставщиками];
		
		Если ЗначениеЗаполнено(ТаблицаРасчетыСПоставщиками) Тогда
		
			ТипДокумента = ТипЗнч(Движения.РасчетыСПоставщиками.Отбор.Регистратор.Значение);
			ДобавитьЗаполнитьПорядокРасчетовСПоставщиками(ТаблицаРасчетыСПоставщиками, ТипДокумента);
			ПроверитьЗаполнитьАналитикуУчетаПоПартнерам(ТаблицаРасчетыСПоставщиками);
			
			Если ТаблицаРасчетыСПоставщиками.Колонки.Найти("ЗакупкаПоЗаказу") <> Неопределено Тогда
				Для Каждого Стр Из ТаблицаРасчетыСПоставщиками Цикл
					Если НЕ ЗначениеЗаполнено(Стр.ЗакупкаПоЗаказу) И Стр.ЗакупкаПоЗаказу <> Неопределено Тогда
						Стр.ЗакупкаПоЗаказу = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Движения.РасчетыСПоставщиками.Записывать = Истина;
			Движения.РасчетыСПоставщиками.Загрузить(ТаблицаРасчетыСПоставщиками);
			
		ИначеЕсли Движения.РасчетыСПоставщиками.Записывать Тогда
			
			Движения.РасчетыСПоставщикамиПоДокументам.Записывать = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасчетыПоДисконтированию
	
	ИмяТаблицыРасчетыПоДисконтированию = "Таблица" + "ПроцентныеРасходыДисконтирования";
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицыРасчетыПоДисконтированию) Тогда
		
		ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПроцентныеРасходыДисконтирования");
		
	КонецЕсли;
	
	#КонецОбласти
		
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	#Область РасчетыСКлиентами
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменение") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаЗаказы.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ТаблицаЗаказы.Валюта         КАК Валюта,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
			|				ТаблицаЗаказы.КОплате
			|			ИНАЧЕ 0
			|		КОНЕЦ)                 КАК СуммаЗаказа,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА ТаблицаЗаказы.КОплате
			|			ИНАЧЕ 0
			|		КОНЕЦ +
			|		ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА -ТаблицаЗаказы.Оплачивается
			|			ИНАЧЕ ТаблицаЗаказы.Оплачивается
			|		КОНЕЦ)                 КАК СуммаОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК ТаблицаЗаказы
			|ГДЕ
			|	(ТаблицаЗаказы.ОбъектРасчетов, ТаблицаЗаказы.Валюта, ТаблицаЗаказы.Активность) В
			|			(ВЫБРАТЬ
			|				Таблица.ОбъектРасчетов,
			|				Таблица.Валюта,
			|				ИСТИНА
			|			ИЗ
			|				ДвиженияРасчетыСКлиентамиИзменение КАК Таблица)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаЗаказы.Валюта,
			|	ТаблицаЗаказы.ОбъектРасчетов
			|
			|ИМЕЮЩИЕ
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
			|				ТаблицаЗаказы.КОплате
			|			ИНАЧЕ 0
			|		КОНЕЦ) > 0
			|	И
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
			|				ТаблицаЗаказы.КОплате
			|			ИНАЧЕ 0
			|		КОНЕЦ)
			|	>
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА ТаблицаЗаказы.КОплате
			|			ИНАЧЕ 0
			|		КОНЕЦ +
			|		ВЫБОР
			|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				ТОГДА -ТаблицаЗаказы.Оплачивается
			|			ИНАЧЕ ТаблицаЗаказы.Оплачивается
			|		КОНЕЦ)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиРасчетыСКлиентами");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СуммыСрокЗадолженности
		
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга")
		Или ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга.АналитикаУчетаПоПартнерам.Договор КАК Договор
			|ПОМЕСТИТЬ ДанныеДоговоровИзменениеСуммыДолга
			|ИЗ
			|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Договор");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока.АналитикаУчетаПоПартнерам.Договор КАК Договор
			|ПОМЕСТИТЬ ДанныеДоговоровИзменениеКонтрольСрока
			|ИЗ
			|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока КАК ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Договор");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ТаблицаДвижений.Договор                             КАК Договор,
			|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
			|	ДанныеДоговора.ОграничиватьСуммуЗадолженности       КАК ОграничиватьСуммуЗадолженности,
			|	ДанныеДоговора.ДопустимаяСуммаЗадолженности         КАК ДопустимаяСуммаЗадолженности,
			|	ЛОЖЬ                                                КАК ЗапрещаетсяПросроченнаяЗадолженность
			|
			|ПОМЕСТИТЬ ДанныеДоговоровПредварительные
			|ИЗ
			|	ДанныеДоговоровИзменениеСуммыДолга КАК ТаблицаДвижений
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|	ПО
			|		ТаблицаДвижений.Договор = ДанныеДоговора.Ссылка
			|
			|ГДЕ
			|	ДанныеДоговора.ОграничиватьСуммуЗадолженности
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДвижений.ОбъектРасчетов                      КАК Договор,
			|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
			|	ДанныеДоговора.ОграничиватьСуммуЗадолженности       КАК ОграничиватьСуммуЗадолженности,
			|	ДанныеДоговора.ДопустимаяСуммаЗадолженности         КАК ДопустимаяСуммаЗадолженности,
			|	ЛОЖЬ                                                КАК ЗапрещаетсяПросроченнаяЗадолженность
			|
			|ИЗ
			|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ТаблицаДвижений
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|	ПО
			|		ТаблицаДвижений.ОбъектРасчетов = ДанныеДоговора.Ссылка
			|
			|ГДЕ
			|	ДанныеДоговора.ОграничиватьСуммуЗадолженности
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДвижений.Договор                             КАК Договор,
			|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
			|	ЛОЖЬ                                                КАК ОграничиватьСуммуЗадолженности,
			|	0                                                   КАК ДопустимаяСуммаЗадолженности,
			|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
			|
			|ИЗ
			|	ДанныеДоговоровИзменениеКонтрольСрока КАК ТаблицаДвижений
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|	ПО
			|		ТаблицаДвижений.Договор = ДанныеДоговора.Ссылка
			|
			|ГДЕ
			|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДвижений.ОбъектРасчетов                      КАК Договор,
			|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
			|	ЛОЖЬ                                                КАК ОграничиватьСуммуЗадолженности,
			|	0                                                   КАК ДопустимаяСуммаЗадолженности,
			|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
			|
			|ИЗ
			|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока КАК ТаблицаДвижений
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|	ПО
			|		ТаблицаДвижений.ОбъектРасчетов = ДанныеДоговора.Ссылка
			|
			|ГДЕ
			|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ДанныеДоговоров.Договор                                        КАК Договор,
			|	ДанныеДоговоров.Валюта                                         КАК Валюта,
			|	МАКСИМУМ(ДанныеДоговоров.ОграничиватьСуммуЗадолженности)       КАК КонтрольСуммы,
			|	МАКСИМУМ(ДанныеДоговоров.ДопустимаяСуммаЗадолженности)         КАК ДопустимаяСумма,
			|	МАКСИМУМ(ДанныеДоговоров.ЗапрещаетсяПросроченнаяЗадолженность) КАК КонтрольСрока
			|
			|ПОМЕСТИТЬ ДанныеДоговоров
			|ИЗ
			|	ДанныеДоговоровПредварительные КАК ДанныеДоговоров
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеДоговоров.Договор,
			|	ДанныеДоговоров.Валюта");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеДоговора.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДоговора.Ссылка  КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ПОМЕСТИТЬ ОбъектыПроверки
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДоговора.Ссылка = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДоговора.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|	ИЛИ ДанныеДоговора.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ПервичныйДокумент КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.ТипПервичногоДокумента В (ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.РеализацияКлиенту),
			|												ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ПриобретениеУПоставщика))
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ЗаказКлиента КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
			|	И (ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
			|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
			|	И (ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
			|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)	
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ОтчетКомитенту КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен
			|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен И ДанныеДокумента.ПроведеноБанком
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка  КАК ОбъектРасчетов,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДоговоров.Валюта КАК Валюта,
			|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
			|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
			|
			|ИЗ
			|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
			|
			|ГДЕ
			|	ДанныеДокумента.Проведен");
			
			ТекстыЗапроса.Добавить("
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Ссылка        КАК ОбъектРасчетов,
			|	ОбъектыПроверки.Договор       КАК Договор,
			|	ОбъектыПроверки.Валюта        КАК Валюта,
			|	ОбъектыПроверки.КонтрольСуммы КАК КонтрольСуммы,
			|	ОбъектыПроверки.КонтрольСрока КАК КонтрольСрока
			|ПОМЕСТИТЬ ОбъектыРасчетов
			|ИЗ ОбъектыПроверки КАК ОбъектыПроверки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|			ПО ОбъектыРасчетов.Объект = ОбъектыПроверки.ОбъектРасчетов");
		
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
			ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
		
		Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга") Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Договор                                   КАК Договор,
			|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
			|	МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)                  КАК ДопустимаяСуммаЗадолженности,
			|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) +
			|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток)    КАК СуммаОстаток,
			|
			|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) +
			|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток) -
			|		МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)              КАК СуммаПревышения
			|
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(
			|		,
			|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСуммы)
			|	) КАК РасчетыСКлиентамиОстатки
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		ОбъектыРасчетов КАК ОбъектыРасчетов	
			|	ПО
			|		РасчетыСКлиентамиОстатки.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
			|		И РасчетыСКлиентамиОстатки.Валюта = ОбъектыРасчетов.Валюта
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		ДанныеДоговоров КАК ДанныеДоговоров
			|	ПО
			|		ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
			|		И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбъектыРасчетов.Договор,
			|	РасчетыСКлиентамиОстатки.Валюта
			|ИМЕЮЩИЕ
			|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток)+
			|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток) > МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)";
			
			ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиОграничениеСуммыЗадолженности");
			
		КонецЕсли;
		
		Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ОбъектыРасчетов.Договор                                   КАК Договор,
				|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
				|	СУММА(ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток >
				|						РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток ТОГДА
				|		РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток
				|	ИНАЧЕ
				|		РасчетыСКлиентамиОстатки.СуммаОстаток
				|	КОНЕЦ) КАК ПросроченнаяЗадолженность
				|
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.Остатки(
				|		&ПериодКонтроляСрокаДолга,
				|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
				|	) КАК РасчетыСКлиентамиОстатки
				|	
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|		ОбъектыРасчетов КАК ОбъектыРасчетов
				|	ПО
				|		РасчетыСКлиентамиОстатки.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
				|		И РасчетыСКлиентамиОстатки.Валюта = ОбъектыРасчетов.Валюта
				|	
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|		ДанныеДоговоров КАК ДанныеДоговоров
				|	ПО
				|		ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
				|		И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
				|
				|ГДЕ
				|	НЕ &НоваяАрхитектураВзаиморасчетов
				|	И РасчетыСКлиентамиОстатки.СуммаОстаток > 0
				|	И (РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток) > 0
				|
				|СГРУППИРОВАТЬ ПО
				|	ОбъектыРасчетов.Договор,
				|	РасчетыСКлиентамиОстатки.Валюта
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ОбъектыРасчетов.Договор                                   КАК Договор,
				|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
				|	СУММА(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
				|			- ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток,0)) КАК ПросроченнаяЗадолженность
				|
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
				|		&ПериодКонтроляСрокаДолга,
				|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
				|	) КАК РасчетыСКлиентамиПоСрокамОстатки
				|	
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|		ОбъектыРасчетов КАК ОбъектыРасчетов
				|	ПО
				|		РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
				|		И РасчетыСКлиентамиПоСрокамОстатки.Валюта = ОбъектыРасчетов.Валюта
				|	
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|		ДанныеДоговоров КАК ДанныеДоговоров
				|	ПО
				|		ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
				|		И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
				|		&ПериодКонтроляСрокаДолга,
				|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
				|	) КАК РасчетыСКлиентамиОстатки
				|	ПО
				|		РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов = РасчетыСКлиентамиОстатки.ОбъектРасчетов
				|		И РасчетыСКлиентамиПоСрокамОстатки.Валюта = РасчетыСКлиентамиПоСрокамОстатки.Валюта
				|ГДЕ
				|	&НоваяАрхитектураВзаиморасчетов
				|	И РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения < НАЧАЛОПЕРИОДА(&ПериодКонтроляСрокаДолга,ДЕНЬ)
				|
				|СГРУППИРОВАТЬ ПО
				|	ОбъектыРасчетов.Договор,
				|	РасчетыСКлиентамиОстатки.Валюта
				|
				|ИМЕЮЩИЕ СУММА(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток
				|			- ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток,0)) > 0";
			
			Запрос.УстановитьПараметр("ПериодКонтроляСрокаДолга", Макс(КонецДня(ТекущаяДатаСеанса()), КонецДня(Документ.Дата)));
			Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Константы.НоваяАрхитектураВзаиморасчетов.Получить());
			
			ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиКонтрольСрокаЗадолженности");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеОплачивается") Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам           КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОстатков.ОбъектРасчетов                      КАК ОбъектРасчетов,
		|	ТаблицаОстатков.Валюта                              КАК Валюта,
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|			ТаблицаОстатков.Оплачивается
		|		ИНАЧЕ
		|			-ТаблицаОстатков.Оплачивается
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ТаблицаОстатков
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияРасчетыСКлиентамиИзменениеОплачивается КАК Таблица
		|	ПО Таблица.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Таблица.ОбъектРасчетов = ТаблицаОстатков.ОбъектРасчетов
		|		И Таблица.Валюта = ТаблицаОстатков.Валюта
		|		И Таблица.ЗаявкаНаРасходованиеДенежныхСредств = ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам,
		|	ТаблицаОстатков.ОбъектРасчетов,
		|	ТаблицаОстатков.Валюта,
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|			ТаблицаОстатков.Оплачивается
		|		ИНАЧЕ
		|			-ТаблицаОстатков.Оплачивается
		|		КОНЕЦ) > 0
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиОплачивается");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область АвансыПоНакладным
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеАвансыПоНакладным") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	РасчетыСКлиентамиОстатки.ОбъектРасчетов        КАК ДокументАванса,
			|	РасчетыСКлиентамиОстатки.Валюта                КАК Валюта,
			|	РасчетыСКлиентамиОстатки.СуммаОстаток          КАК СуммаПревышения
			|	
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(
			|		,
			|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ДвиженияРасчетыСКлиентамиИзменениеАвансыПоНакладным)
			|	) КАК РасчетыСКлиентамиОстатки
			|
			|ГДЕ
			|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0
			|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиОстатки.ОбъектРасчетов.Объект) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
			|													ТИП(Документ.ПриходныйКассовыйОрдер),
			|													ТИП(Документ.ОперацияПоПлатежнойКарте),
			|													ТИП(Документ.ВводОстатков),
			|													ТИП(Документ.ВводОстатковВзаиморасчетов))";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиКонтрольЗачтенныхАвансовПоНакладнымКлиент");
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов           КАК ДокументАванса,
			|	РасчетыСПоставщикамиОстатки.Валюта                   КАК Валюта,
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток             КАК СуммаПревышения
			|
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|		,
			|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ОбъектРасчетов, Валюта ИЗ ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным)
			|	) КАК РасчетыСПоставщикамиОстатки
			|
			|ГДЕ
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
			|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиОстатки.ОбъектРасчетов.Объект) В (ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
			|													ТИП(Документ.РасходныйКассовыйОрдер),
			|													ТИП(Документ.ВводОстатков),
			|													ТИП(Документ.ВводОстатковВзаиморасчетов))";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиКонтрольЗачтенныхАвансовПоНакладнымПоставщик");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВводОстатков
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "РасчетыСКлиентамиИзмененияВводОстатков") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасчетыСКлиентамиИзменения.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентамиИзменения.ОбъектРасчетов             КАК ОбъектРасчетов
			|ИЗ
			|	РасчетыСКлиентамиИзмененияВводОстатков КАК РасчетыСКлиентамиИзменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|			ПО РасчетыСКлиентамиИзменения.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
			|				И РасчетыСКлиентамиИзменения.ОбъектРасчетов = РасчетыСКлиентами.ОбъектРасчетов
			|				И РасчетыСКлиентамиИзменения.Период < РасчетыСКлиентами.Период 
			|				И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) В (ТИП(Документ.ВводОстатков),ТИП(Документ.ВводОстатковВзаиморасчетов))
			|				И РасчетыСКлиентами.Сумма <> 0
			|	
			|ГДЕ
			|	НЕ ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиИзменения.Регистратор) В (ТИП(Документ.ВводОстатков),ТИП(Документ.ВводОстатковВзаиморасчетов))
			|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиЕстьВводОстатковПослеКлиенты");
		
		ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасчетыСКлиентамиИзменения.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентамиИзменения.ОбъектРасчетов             КАК ОбъектРасчетов
			|ИЗ
			|	РасчетыСКлиентамиИзмененияВводОстатков КАК РасчетыСКлиентамиИзменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|			ПО РасчетыСКлиентамиИзменения.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
			|				И РасчетыСКлиентамиИзменения.ОбъектРасчетов = РасчетыСКлиентами.ОбъектРасчетов
			|				И РасчетыСКлиентамиИзменения.Период > РасчетыСКлиентами.Период 
			|				И НЕ ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) В (ТИП(Документ.ВводОстатков),ТИП(Документ.ВводОстатковВзаиморасчетов))
			|				И РасчетыСКлиентами.Сумма <> 0
			|	
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиИзменения.Регистратор) В (ТИП(Документ.ВводОстатков),ТИП(Документ.ВводОстатковВзаиморасчетов))
			|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиЕстьДвиженияДоКлиенты");
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "РасчетыСПоставщикамиИзмененияВводОстатков") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасчетыСПоставщикамиИзменения.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщикамиИзменения.ОбъектРасчетов             КАК ОбъектРасчетов
			|ИЗ
			|	РасчетыСПоставщикамиИзмененияВводОстатков КАК РасчетыСПоставщикамиИзменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|			ПО РасчетыСПоставщикамиИзменения.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
			|				И РасчетыСПоставщикамиИзменения.ОбъектРасчетов = РасчетыСПоставщиками.ОбъектРасчетов
			|				И РасчетыСПоставщикамиИзменения.Период < РасчетыСПоставщиками.Период 
			|				И ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.Регистратор) В (ТИП(Документ.ВводОстатков),ТИП(Документ.ВводОстатковВзаиморасчетов))
			|				И РасчетыСПоставщиками.Сумма <> 0
			|	
			|ГДЕ
			|	НЕ ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиИзменения.Регистратор) В (ТИП(Документ.ВводОстатков),ТИП(Документ.ВводОстатковВзаиморасчетов))
			|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиЕстьВводОстатковПослеПоставщики");
		
		ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасчетыСПоставщикамиИзменения.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщикамиИзменения.ОбъектРасчетов             КАК ОбъектРасчетов
			|ИЗ
			|	РасчетыСПоставщикамиИзмененияВводОстатков КАК РасчетыСПоставщикамиИзменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|			ПО РасчетыСПоставщикамиИзменения.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
			|				И РасчетыСПоставщикамиИзменения.ОбъектРасчетов = РасчетыСПоставщиками.ОбъектРасчетов
			|				И РасчетыСПоставщикамиИзменения.Период > РасчетыСПоставщиками.Период 
			|				И НЕ ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.Регистратор) В (ТИП(Документ.ВводОстатков),ТИП(Документ.ВводОстатковВзаиморасчетов))
			|				И РасчетыСПоставщиками.Сумма <> 0
			|	
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиИзменения.Регистратор) В (ТИП(Документ.ВводОстатков),ТИП(Документ.ВводОстатковВзаиморасчетов))
			|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиЕстьДвиженияДоПоставщики");
		
	КонецЕсли;
	#КонецОбласти
	#Область РасчетыСПоставщиками
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСПоставщикамиИзменениеОплачивается") Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам           КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОстатков.ОбъектРасчетов                      КАК ОбъектРасчетов,
		|	ТаблицаОстатков.Валюта                              КАК Валюта,
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|			ТаблицаОстатков.Оплачивается
		|		ИНАЧЕ
		|			-ТаблицаОстатков.Оплачивается
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК ТаблицаОстатков
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияРасчетыСПоставщикамиИзменениеОплачивается КАК Таблица
		|	ПО Таблица.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Таблица.ОбъектРасчетов = ТаблицаОстатков.ОбъектРасчетов
		|		И Таблица.Валюта = ТаблицаОстатков.Валюта
		|		И Таблица.ЗаявкаНаРасходованиеДенежныхСредств = ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам,
		|	ТаблицаОстатков.ОбъектРасчетов,
		|	ТаблицаОстатков.Валюта,
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатков.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|			ТаблицаОстатков.Оплачивается
		|		ИНАЧЕ
		|			-ТаблицаОстатков.Оплачивается
		|		КОНЕЦ) > 0
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиОплачивается");
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	#Область РасчетыСКлиентами
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Нарушены условия оплаты, необходимые для обеспечения/отгрузки по %1,
			|Требуется %2 %4 оплачено %3 %4'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиРасчетыСКлиентами Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов,
				СтрокаОшибки.СуммаЗаказа, СтрокаОшибки.СуммаОплаты, СтрокаОшибки.Валюта);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СуммыСрокЗадолженности
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга") Тогда
		
		ШаблонСообщения = НСтр("ru = 'По договору %1 превышена допустимая сумма кредита на %2 %3'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиОграничениеСуммыЗадолженности Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.Договор, СтрокаОшибки.СуммаПревышения,
				СтрокаОшибки.Валюта);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда
		
		ШаблонСообщения = НСтр("ru = 'По договору %1 имеется просроченная задолженность на сумму %2 %3'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКонтрольСрокаЗадолженности Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.Договор, СтрокаОшибки.ПросроченнаяЗадолженность,
				СтрокаОшибки.Валюта);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область АвансыПоНакладным
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеАвансыПоНакладным") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Превышена сумма зачета аванса %1 на %2 %3'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКонтрольЗачтенныхАвансовПоНакладнымКлиент Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ДокументАванса, СтрокаОшибки.СуммаПревышения,
				СтрокаОшибки.Валюта);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Превышена сумма зачета аванса %1 на %2 %3'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКонтрольЗачтенныхАвансовПоНакладнымПоставщик Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ДокументАванса, СтрокаОшибки.СуммаПревышения,
				СтрокаОшибки.Валюта);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВводОстатков
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "РасчетыСКлиентамиИзмененияВводОстатков") Тогда
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЕстьВводОстатковПослеКлиенты Цикл
			
			ШаблонСообщения = НСтр("ru = 'Существуют документы ввода начальных остатков взаиморасчетов по объекту расчетов ""%1"", введенные позже изменяемого периода.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЕстьДвиженияДоКлиенты Цикл
			
			ШаблонСообщения = НСтр("ru = 'Существуют документы введенные раньше ввода начальных остатков взаиморасчетов по объекту расчетов ""%1"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "РасчетыСПоставщикамиИзмененияВводОстатков") Тогда
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЕстьВводОстатковПослеПоставщики Цикл
			
			ШаблонСообщения = НСтр("ru = 'Существуют документы ввода начальных остатков взаиморасчетов по объекту расчетов ""%1"", введенные позже изменяемого периода.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЕстьДвиженияДоПоставщики Цикл
			
			ШаблонСообщения = НСтр("ru = 'Существуют документы введенные раньше ввода начальных остатков взаиморасчетов по объекту расчетов ""%1"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ОбъектРасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Оплачивается
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСКлиентамиИзменениеОплачивается")
		Или ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыСПоставщикамиИзменениеОплачивается") Тогда
		
		ШаблонСообщения = НСтр("ru = 'По объекту расчетов %1 оплачивается больше, чем утверждено в заявке, на %2 %3'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиОплачивается Цикл
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
				СтрокаОшибки.ОбъектРасчетов, СтрокаОшибки.Сумма, СтрокаОшибки.Валюта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область РасчетДатПлатежа_ОфлайнРасчеты
// В менеджер временных таблиц помещает таблицу "ТаблицаОстатковКлиентов",
// содержащую в себе даты платежа. Строится по регистру "Расчеты с клиентами по документам".
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Текущий менеджер временных таблиц для помещения таблиц.
//		ДатаОстатков - Дата - Дата остатков.
//
Процедура РассчитатьДатыПлатежаКлиента(МенеджерВременныхТаблиц, ДатаОстатков) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам)
		И ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентами) 
		И НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                          КАК ЗаказКлиента,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|		ТОГДА Расчеты.КОплатеОстаток
		|		ИНАЧЕ Расчеты.СуммаОстаток
		|	КОНЕЦ                                           КАК ДолгОстаток,
		|	ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|		ТОГДА Расчеты.КОплатеОстаток
		|		ИНАЧЕ Расчеты.СуммаОстаток
		|	КОНЕЦ                                           КАК ДолгОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ИСТИНА                                          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                          КАК ЗаказКлиента,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	ВЫБОР КОГДА Расчеты.КОплатеОстаток < 0
		|			ТОГДА Расчеты.СуммаОстаток
		|			ИНАЧЕ ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|					ТОГДА Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток
		|					ИНАЧЕ Расчеты.КОплатеОстаток
		|			КОНЕЦ
		|	КОНЕЦ                                           КАК ДолгОстаток,
		|	ВЫБОР КОГДА Расчеты.КОплатеОстаток < 0
		|			ТОГДА Расчеты.СуммаОстаток
		|			ИНАЧЕ ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|					ТОГДА Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток
		|					ИНАЧЕ Расчеты.КОплатеОстаток
		|			КОНЕЦ
		|	КОНЕЦ                                           КАК ДолгОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ЛОЖЬ                                            КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток <= 0
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов
		|");
		
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаОстатков;
		Параметры[1] = ВидГраницы.Включая;
		Граница = Новый(Тип("Граница"),Параметры);
		
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.УстановитьПараметр("Граница", Граница);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
 		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                             КАК ЗаказКлиента,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День)) КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказКлиента
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.ДолгОстаток <> 0
		|ГДЕ
		|	Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|	И ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                             КАК ЗаказКлиента,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День))  КАК ДатаПлатежа,
		|	МИНИМУМ(Расчеты.Период)                            КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказКлиента
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.ДолгОстаток <> 0
		|ГДЕ
		|	(Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.КОплате < 0))
		|	И Расчеты.Активность
		|	И Расчеты.Период > &ДатаОстатков
		|	И Расчеты.Период > ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|	И НЕ ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента                          КАК ЗаказКлиента,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА Периоды.ЗаказКлиента.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ, ДЕНЬ)                                  КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Расчеты.КОплате, 0) < 0
		|			ТОГДА 0 - Расчеты.КОплате
		|			ИНАЧЕ ЕСТЬNULL(Расчеты.КОплате, 0)
		|	КОНЕЦ)                                        КАК Долг,
		|	Периоды.ПросроченнаяЗадолженность             КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов
		|ИЗ
		|	ТаблицаПериодовКлиентов КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказКлиента             = Расчеты.ОбъектРасчетов
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И Расчеты.Период = Периоды.Период
		|		И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.КОплате < 0))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА Периоды.ЗаказКлиента.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ, ДЕНЬ),
		|	Периоды.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                                КАК ЗаказКлиента,
		|	Остатки.Валюта                                      КАК Валюта,
		|	ВЫБОР КОГДА Остатки.ДолгОстаток > ЕСТЬNULL(Отгрузки.Долг, 0)
		|			ТОГДА Остатки.ДолгОстаток - ЕСТЬNULL(Отгрузки.Долг, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                               КАК НовыйДолгОстаток,
		|	ВЫБОР КОГДА ЕСТЬNULL(Отгрузки.Долг, 0) = 0
		|		ТОГДА Остатки.ДолгОстатокНаКонецПериода
		|		ИНАЧЕ ВЫБОР КОГДА Остатки.ДолгОстаток > Отгрузки.Долг
		|			ТОГДА Отгрузки.Долг
		|			ИНАЧЕ Остатки.ДолгОстаток
		|		КОНЕЦ
		|	КОНЕЦ                                               КАК ДолгОстатокНаКонецПериода,
		|	Отгрузки.Период                                     КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа,
		|	Остатки.ПросроченнаяЗадолженность                   КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ НовыеОстаткиКлиентов
		|ИЗ
		|	ТаблицаОстатковКлиентов КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокКлиентов КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказКлиента = Отгрузки.ЗаказКлиента
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.ПросроченнаяЗадолженность = Отгрузки.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                 КАК ЗаказКлиента,
		|	Остатки.Валюта                       КАК Валюта,
		|	Остатки.Период                       КАК Период,
		|	Остатки.ДатаПлатежа                  КАК ДатаПлатежа,
		|	Остатки.НовыйДолгОстаток             КАК ДолгОстаток,
		|	Остатки.ДолгОстатокНаКонецПериода    КАК ДолгОстатокНаКонецПериода,
		|	Остатки.ПросроченнаяЗадолженность    КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	НовыеОстаткиКлиентов КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказКлиента,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовКлиентов
		|";
		
		Результат = Запрос.Выполнить();
		Счетчик = 0;
		МаксимальноеКоличествоИтераций = 1000;
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
			Счетчик = Счетчик + 1;
			Если Счетчик >= МаксимальноеКоличествоИтераций Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Расчеты.РасчетныйДокумент                 КАК РасчетныйДокумент,
		|	Расчеты.Валюта                            КАК Валюта,
		|	ТаблицаОстатков.ДатаПлатежа               КАК ДатаПлатежа,
		|	ТаблицаОстатков.ДолгОстатокНаКонецПериода КАК Долг
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентовПоДокументам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&Граница, ) КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|ГДЕ
		|	Расчеты.ДолгОстаток > 0
		|;
		|//////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
		|;
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента              КАК ЗаказКлиента,
		|	Расчеты.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Расчеты.Валюта                    КАК Валюта,
		|	Расчеты.ДатаПлатежа               КАК ДатаПлатежа,
		|	Расчеты.Долг                      КАК КОплате,
		|	Расчеты.Долг                      КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	ТаблицаОстатковКлиентовПоДокументам КАК Расчеты
		|";
		Запрос.Выполнить();
	Иначе
		Запрос = Новый Запрос("
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
		|	Неопределено                                                     КАК ЗаказКлиента,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК Валюта,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу "ТаблицаОстатковПоставщиков",
// содержащую в себе даты платежа. Строится по регистру "Расчеты с поставщиками по документам".
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Текущий менеджер временных таблиц для помещения таблиц.
//		ДатаОстатков - Дата - Дата остатков.
//
Процедура РассчитатьДатыПлатежаПоставщика(МенеджерВременныхТаблиц, ДатаОстатков) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам)
		И ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщиками)
		И НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                   КАК ЗаказПоставщику,
		|	Расчеты.Валюта                           КАК Валюта,
		|	-Расчеты.КОплатеОстаток                  КАК КОплатеОстаток,
		|	-Расчеты.КОплатеОстаток                  КАК КОплатеОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период,
		|	ИСТИНА                                   КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                          КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	(Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) КАК КОплатеОстаток,
		|	(Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) КАК КОплатеОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ЛОЖЬ                                            КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток >= 0 И Расчеты.СуммаОстаток <> 0
		|	И Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток > 0
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПоступленийПоставщиков
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков
		|");
		
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаОстатков;
		Параметры[1] = ВидГраницы.Включая;
		Граница = Новый(Тип("Граница"),Параметры);
		
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПоступленийПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                             КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День)) КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказПоставщику
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.КОплатеОстаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|	И ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                             КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День))  КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказПоставщику
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.КОплатеОстаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период > &ДатаОстатков
		|	И Расчеты.Период > ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|	И НЕ ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику                       КАК ЗаказПоставщику,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	ВЫБОР КОГДА Периоды.ЗаказПоставщику.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ                                         КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Расчеты.КОплате, 0) < 0
		|			ТОГДА 0 - Расчеты.КОплате
		|			ИНАЧЕ ЕСТЬNULL(Расчеты.КОплате, 0)
		|	КОНЕЦ)                                        КАК КОплате,
		|	Периоды.ПросроченнаяЗадолженность             КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПоступленийПоставщиков
		|ИЗ
		|	ТаблицаПериодовПоставщиков КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказПоставщику          = Расчеты.ОбъектРасчетов
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И Расчеты.Период = Периоды.Период
		|		И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	ВЫБОР КОГДА Периоды.ЗаказПоставщику.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ,
		|	Периоды.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                                КАК ЗаказПоставщику,
		|	Остатки.Валюта                                         КАК Валюта,
		|	ВЫБОР КОГДА Остатки.КОплатеОстаток > ЕСТЬNULL(Поступления.КОплате, 0)
		|			ТОГДА Остатки.КОплатеОстаток - ЕСТЬNULL(Поступления.КОплате, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                  КАК НовыйКОплатеОстаток,
		|	ВЫБОР КОГДА ЕСТЬNULL(Поступления.КОплате, 0) = 0
		|		ТОГДА Остатки.КОплатеОстатокНаКонецПериода
		|		ИНАЧЕ ВЫБОР КОГДА Остатки.КОплатеОстатокНаКонецПериода > Поступления.КОплате
		|			ТОГДА Поступления.КОплате
		|			ИНАЧЕ Остатки.КОплатеОстатокНаКонецПериода
		|		КОНЕЦ
		|	КОНЕЦ                                                  КАК КОплатеОстатокНаКонецПериода,
		|	Поступления.Период                                     КАК Период,
		|	ЕСТЬNULL(Поступления.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа,
		|	Остатки.ПросроченнаяЗадолженность                      КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ НовыеОстаткиПоставщиков
		|ИЗ
		|	ТаблицаОстатковПоставщиков КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПоступленийПоставщиков КАК Поступления
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Поступления.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказПоставщику = Поступления.ЗаказПоставщику
		|		И Остатки.Валюта  = Поступления.Валюта
		|		И Остатки.ПросроченнаяЗадолженность = Поступления.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику              КАК ЗаказПоставщику,
		|	Остатки.Валюта                       КАК Валюта,
		|	Остатки.Период                       КАК Период,
		|	Остатки.ДатаПлатежа                  КАК ДатаПлатежа,
		|	Остатки.НовыйКОплатеОстаток          КАК КОплатеОстаток,
		|	Остатки.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода,
		|	Остатки.ПросроченнаяЗадолженность    КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	НовыеОстаткиПоставщиков КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказПоставщику,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовПоставщиков
		|";
		
		Результат = Запрос.Выполнить();
		Счетчик = 0;
		МаксимальноеКоличествоИтераций = 1000;
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
			Счетчик = Счетчик + 1;
			Если Счетчик >= МаксимальноеКоличествоИтераций Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам            КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                      КАК ЗаказПоставщику,
		|	Расчеты.РасчетныйДокумент                    КАК РасчетныйДокумент,
		|	Расчеты.Валюта                               КАК Валюта,
		|	ТаблицаОстатков.ДатаПлатежа                  КАК ДатаПлатежа,
		|	ТаблицаОстатков.КОплатеОстатокНаКонецПериода КАК КОплате
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиковПоДокументам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&Граница, ) КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|ГДЕ
		|	Расчеты.ДолгОстаток < 0
		|;
		|//////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков
		|;
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику           КАК ЗаказПоставщику,
		|	Расчеты.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Расчеты.Валюта                    КАК Валюта,
		|	Расчеты.ДатаПлатежа               КАК ДатаПлатежа,
		|	Расчеты.КОплате                   КАК КОплате,
		|	Расчеты.КОплате                   КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	ТаблицаОстатковПоставщиковПоДокументам КАК Расчеты
		|";
		Запрос.Выполнить();
	Иначе
		Запрос = Новый Запрос("
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
		|	Неопределено                                                     КАК ЗаказПоставщику,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК Валюта,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу содержащую в себе даты платежа.
// Строится по регистру "Расчеты с клиентами".
// Параметры:
//	ВременныеТаблицы - МенеджерВременныхТаблиц - Менеджер временных таблиц, в который будет помещен результат расчета.
//	ДатаОстатков - Дата - Период на который выполняется расчет дат платежа.
Процедура РассчитатьОперативныеДатыПлатежаКлиента(ВременныеТаблицы, ДатаОстатков) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                   КАК ЗаказКлиента,
		|	Расчеты.Валюта                           КАК Валюта,
		|	Расчеты.КОплатеОстаток                   КАК КОплатеОстаток,
		|	Расчеты.КОплатеОстаток                   КАК КОплатеОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентовКОплате
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаОстатков, ) КАК Расчеты
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентовКОплате
		|");
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовКлиентовКОплате
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                        КАК ЗаказКлиента,
		|	Расчеты.Валюта                                КАК Валюта,
		|	МАКСИМУМ(Расчеты.ДатаПлатежа)                 КАК ДатаПлатежа,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, День)) КАК Период
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентовКОплате
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентовКОплате КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказКлиента
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|		И ТаблицаОстатков.КОплатеОстаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И Расчеты.КОплате <> 0
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента                          КАК ЗаказКлиента,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	Периоды.ДатаПлатежа                           КАК ДатаПлатежа,
		|	СУММА(ЕСТЬNULL(Расчеты.КОплате, 0))      КАК КОплате
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентовКОплате
		|ИЗ
		|	ТаблицаПериодовКлиентовКОплате КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказКлиента             = Расчеты.ОбъектРасчетов
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Периоды.ДатаПлатежа              = Расчеты.ДатаПлатежа
		|		И Расчеты.Активность
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|		И (Расчеты.Период МЕЖДУ Периоды.Период И КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	Периоды.ДатаПлатежа
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Остатки.Валюта                            КАК Валюта,
		|	ВЫБОР КОГДА Остатки.КОплатеОстаток > ЕСТЬNULL(Отгрузки.КОплате, 0)
		|			ТОГДА Остатки.КОплатеОстаток - ЕСТЬNULL(Отгрузки.КОплате, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                     КАК НовыйКОплатеОстаток,
		|	Остатки.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода,
		|	Отгрузки.Период                           КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа
		|ПОМЕСТИТЬ НовыеОстаткиКлиентовКОплате
		|ИЗ
		|	ТаблицаОстатковКлиентовКОплате КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокКлиентовКОплате КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказКлиента = Отгрузки.ЗаказКлиента
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.КОплатеОстаток <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентовКОплате
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокКлиентовКОплате
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Остатки.ЗаказКлиента.Объект               КАК Объект,
		|	Остатки.Валюта                            КАК Валюта,
		|	Остатки.Период                            КАК Период,
		|	Остатки.ДатаПлатежа                       КАК ДатаПлатежа,
		|	Остатки.НовыйКОплатеОстаток          КАК КОплатеОстаток,
		|	Остатки.НовыйКОплатеОстаток          КАК КОплате,
		|	Остатки.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентовКОплате
		|ИЗ
		|	НовыеОстаткиКлиентовКОплате КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказКлиента,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиКлиентовКОплате
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовКлиентовКОплате
		|";
		
		Результат = Запрос.Выполнить();
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу содержащую в себе даты платежа.
// Строится по регистру "Расчеты с поставщиками".
// Параметры:
//	ВременныеТаблицы - МенеджерВременныхТаблиц - Менеджер временных таблиц, в который будет помещен результат расчета.
//	ДатаОстатков - Дата - Период на который выполняется расчет дат платежа.
Процедура РассчитатьОперативныеДатыПлатежаПоставщика(ВременныеТаблицы, ДатаОстатков) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                   КАК ЗаказПоставщику,
		|	Расчеты.Валюта                           КАК Валюта,
		|	Расчеты.КОплатеОстаток                   КАК КОплатеОстаток,
		|	Расчеты.КОплатеОстаток                   КАК КОплатеОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиковКОплате
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатков, ) КАК Расчеты
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиковКОплате
		|");
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовПоставщиковКОплате
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов                        КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                КАК Валюта,
		|	МАКСИМУМ(Расчеты.ДатаПлатежа)                 КАК ДатаПлатежа,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, День)) КАК Период
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиковКОплате
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиковКОплате КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ОбъектРасчетов = ТаблицаОстатков.ЗаказПоставщику
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|		И ТаблицаОстатков.КОплатеОстаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И Расчеты.КОплате <> 0
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ОбъектРасчетов,
		|	Расчеты.Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику                       КАК ЗаказПоставщику,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	Периоды.ДатаПлатежа                           КАК ДатаПлатежа,
		|	СУММА(ЕСТЬNULL(Расчеты.КОплате, 0))           КАК КОплате
		|ПОМЕСТИТЬ ТаблицаОтгрузокПоставщиковКОплате
		|ИЗ
		|	ТаблицаПериодовПоставщиковКОплате КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказПоставщику          = Расчеты.ОбъектРасчетов
		|		И Периоды.ДатаПлатежа              = Расчеты.ДатаПлатежа
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
		|		И (Расчеты.Период МЕЖДУ Периоды.Период И КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	Периоды.ДатаПлатежа
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                   КАК ЗаказПоставщику,
		|	Остатки.Валюта                            КАК Валюта,
		|	ВЫБОР КОГДА Остатки.КОплатеОстаток > ЕСТЬNULL(Отгрузки.КОплате, 0)
		|			ТОГДА Остатки.КОплатеОстаток - ЕСТЬNULL(Отгрузки.КОплате, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                     КАК НовыйКОплатеОстаток,
		|	Остатки.КОплатеОстатокНаКонецПериода      КАК КОплатеОстатокНаКонецПериода,
		|	Отгрузки.Период                           КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа
		|ПОМЕСТИТЬ НовыеОстаткиПоставщиковКОплате
		|ИЗ
		|	ТаблицаОстатковПоставщиковКОплате КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокПоставщиковКОплате КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказПоставщику = Отгрузки.ЗаказПоставщику
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.КОплатеОстаток <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиковКОплате
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокПоставщиковКОплате
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                   КАК ЗаказПоставщику,
		|	Остатки.ЗаказПоставщику.Объект            КАК Объект,
		|	Остатки.Валюта                            КАК Валюта,
		|	Остатки.Период                            КАК Период,
		|	Остатки.ДатаПлатежа                       КАК ДатаПлатежа,
		|	Остатки.НовыйКОплатеОстаток          КАК КОплатеОстаток,
		|	Остатки.НовыйКОплатеОстаток          КАК КОплате,
		|	Остатки.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиковКОплате
		|ИЗ
		|	НовыеОстаткиПоставщиковКОплате КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказПоставщику,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиПоставщиковКОплате
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовПоставщиковКОплате
		|";
		
		Результат = Запрос.Выполнить();
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПорядокРасчетов

// Устарела.
// Возвращает порядок расчетов по соглашению/договору, указанным в объекте.
//
// Параметры:
//	Объект - ДокументОбъект, Структура - Документ, по которому надо получить порядок расчетов.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ПорядокРасчетов - Порядок расчетов по умолчанию.
//
Функция ПорядокРасчетовПоУмолчанию(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОбъекта = Новый Структура("Соглашение, Договор");
	ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	
	Если ЗначениеЗаполнено(СтруктураОбъекта.Соглашение) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураОбъекта.Соглашение, "ИспользуютсяДоговорыКонтрагентов, ПорядокРасчетов");
		Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Истина И ЗначениеЗаполнено(СтруктураОбъекта.Договор) Тогда
			ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураОбъекта.Договор, "ПорядокРасчетов");
		ИначеЕсли РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Ложь Тогда
			ПорядокРасчетовПоДокументу = РеквизитыСоглашения.ПорядокРасчетов;
		Иначе
			ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказам;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураОбъекта.Договор) Тогда
		ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураОбъекта.Договор, "ПорядокРасчетов");
	Иначе
		ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказам;
	КонецЕсли;
	
	Возврат ПорядокРасчетовПоДокументу;
	
КонецФункции

// Определяет какие порядки расчетов можно использовать в выбранном документе.
//
// Параметры:
//	ЗначениеВДокументе - ПеречислениеСсылка.ПорядокРасчетов - Порядок расчетов, выбранный в документе.
//	ЗначениеПоУмолчанию - ПеречислениеСсылка.ПорядокРасчетов - Порядок расчетов, определяемый по соглашению/договору документа.
//	ПоЗаказу - Булево - Документ введен по заказу.
//	ЭтоЗаказ - Булево - Это заказ.
//	ЗаказКакСчет - Булево - это заказ и включена ФО заказ как счет.
//
// Возвращаемое значение:
//	СписокЗначений - Список доступных порядков расчета.
//
Функция ДоступныеПорядкиРасчетовПоДокументу(ЗначениеВДокументе, ЗначениеПоУмолчанию, ПоЗаказу = Ложь, ЭтоЗаказ = Ложь, ЗаказКакСчет = Ложь) Экспорт
	
	ПорядкиРасчетов = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ЗначениеВДокументе) Тогда
		ПорядкиРасчетов.Добавить(ЗначениеВДокументе);
	КонецЕсли;
	
	Если НЕ ПоЗаказу Тогда
	
		Если ЗначениеПоУмолчанию = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
			ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным Тогда
			ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию <> Перечисления.ПорядокРасчетов.ПоНакладным
				И (ПоЗаказу Или ЭтоЗаказ) Тогда
			ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказам);
			Если НЕ ЗаказКакСчет Тогда
				ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
			КонецЕсли;
		КонецЕсли;
		
		ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		
	КонецЕсли;
	МассивПорядков = ПорядкиРасчетов.ВыгрузитьЗначения();
	МассивПорядков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПорядков);
	ПорядкиРасчетов.ЗагрузитьЗначения(МассивПорядков);
	
	Возврат ПорядкиРасчетов;
	
КонецФункции

// Возвращает порядок расчетов по переданным параметрам.
//
// Параметры:
//    ЭтоЗаказ - Булево - Истина, если это заказ.
//    ЗаказОснование - ДокументСсылка - Необязательный, заказ, по которому введен документ.
//    Соглашение - СправочникСсылка.СоглашенияСКлиентами, СправочникСсылка.СоглашенияСПоставщиками - Необязательный, соглашение документа.
//    Договор - СправочникСсылка.ДоговорыКонтрагентов - Необязательный, договор документа.
//
// Возвращаемое значение:
//    ПеречислениеСсылка.ПорядокРасчетов - Порядок расчетов.
//
Функция ПорядокРасчетов(ЭтоЗаказ, ЗаказОснование = Неопределено, Соглашение = Неопределено, Договор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ЗаказОснование) Тогда
		ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказОснование, "ПорядокРасчетов");
	ИначеЕсли ЗначениеЗаполнено(Соглашение) Тогда
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, "ИспользуютсяДоговорыКонтрагентов, ПорядокРасчетов");
		УстановитьПривилегированныйРежим(Ложь);
		Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(Договор) Тогда
			ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
		ИначеЕсли РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Ложь Тогда
			ПорядокРасчетовПоДокументу = РеквизитыСоглашения.ПорядокРасчетов;
		Иначе
			ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказам;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
		ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
	ИначеЕсли ЭтоЗаказ Тогда
		ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказам;
	Иначе 
		ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоНакладным;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПорядокРасчетовПоДокументу;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедуры

// Функция определяет вид договора контрагента для обмена
//	с конфигурацией "Бухгалтерия предприятия".
//
// Параметры:
//		ДокументРасчетов - ДокументСсылка - Документ расчетов, по которому нужно определить вид договора.
//		Соглашение - СправочникСсылка.СоглашенияСПоставщиками,СправочникСсылка.СоглашенияСКлиентами - Соглашение документа.
//		ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
// 		Строка - Вид договора, например, "СПокупателем".
Функция ВидДоговораКонтрагента(ДокументРасчетов, Соглашение, ХозяйственнаяОперация) Экспорт
	
	ВидДоговора = "";
	
	Если ЗначениеЗаполнено(ДокументРасчетов) Тогда
		
		Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаказКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
			
			ВидДоговора = "СПоставщиком";
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			
			ВидДоговора = "СПокупателем";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионера")
		 ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ВидДоговора = "СКомиссионером";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомитенту")
		 ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
			ВидДоговора = "СКомитентом";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				ВидДоговора = "СКомитентом";
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				ВидДоговора = "СКомиссионером";
				
			Иначе
				ВидДоговора = "СКомитентом";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				ВидДоговора = "СПоставщиком";
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				ВидДоговора = "СПокупателем";
				
			Иначе
				ВидДоговора = "СПоставщиком";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ВидДоговора)
	 И ЗначениеЗаполнено(Соглашение) Тогда
		
		Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ВидДоговора)
	 И ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ВидДоговора = "СПокупателем";
		Иначе
			ВидДоговора = "СПоставщиком";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидДоговора;
	
КонецФункции

// Заменяет документы расчетов при вызове отчетов по взаиморасчетов из реализации.
// Если реализация по заказу клиента - документом расчетов является заказ клиента.
//
// Параметры:
// Параметры - ДанныеФормыСтруктура - Параметры отчета.
//
Процедура ЗаменитьДокументыРасчетовСКлиентами(Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ЗаказКлиентаОтбор") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрЗаказКлиента = Параметры.Отбор.ЗаказКлиентаОтбор;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.РеализацияПоЗаказам И НЕ ТаблицаТовары.ЗаказКлиента ЕСТЬ NULL
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.РеализацияПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.АктПоЗаказам И НЕ ТаблицаУслуги.ЗаказКлиента ЕСТЬ NULL
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаУслуги.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
		|		ПО ТаблицаУслуги.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.АктПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПродажаПоЗаказам
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.КорректировкаРеализации КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|			И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&ЗаказКлиента)
		|	И ДанныеРегистра.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументов КАК ДанныеДокументов
		|");
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ПараметрЗаказКлиента);
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
		
		Если ТипЗнч(ПараметрЗаказКлиента) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ПараметрЗаказКлиента Цикл
				Если ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказКлиента")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.АктВыполненныхРабот")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					МассивДокументов.Добавить(ТекЭлемент);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.ЗаказКлиента")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.АктВыполненныхРабот")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		 	МассивДокументов.Добавить(ПараметрЗаказКлиента);
		КонецЕсли;
		
		Параметры.Отбор.ЗаказКлиентаОтбор = МассивДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

// Заменяет документы расчетов при вызове отчетов по взаиморасчетов из поступления.
// Если поступление по заказу поставщику - документом расчетов является заказ поставщику.
//
// Параметры:
// Параметры - ДанныеФормыСтруктура - Параметры отчета.
//
Процедура ЗаменитьДокументыРасчетовСПоставщиками(Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ЗаказПоставщикуОтбор") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрЗаказПоставщику = Параметры.Отбор.ЗаказПоставщикуОтбор;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПоступлениеПоЗаказам И НЕ ТаблицаТовары.ЗаказПоставщику ЕСТЬ NULL
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказПоставщику
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.ПоступлениеПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.ОбъектРасчетов.Объект КАК ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&ЗаказПоставщику)
		|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.ОбъектРасчетов.Объект) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
		|												ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
		|												ТИП(Документ.ПриходныйКассовыйОрдер),
		|												ТИП(Документ.РасходныйКассовыйОрдер),
		|												ТИП(Документ.ОперацияПоПлатежнойКарте),
		|												ТИП(Документ.ВводОстатков),
		|												ТИП(Документ.ВводОстатковВзаиморасчетов))
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументов КАК ДанныеДокументов
		|");
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ПараметрЗаказПоставщику);
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
		
		Если ТипЗнч(ПараметрЗаказПоставщику) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ПараметрЗаказПоставщику Цикл
				Если ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказПоставщику")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
					МассивДокументов.Добавить(ТекЭлемент);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПоставщику")
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		 	МассивДокументов.Добавить(ПараметрЗаказПоставщику);
		КонецЕсли;
		
		Параметры.Отбор.ЗаказПоставщикуОтбор = МассивДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат проверки количества вариантов классификации при отключенной опции "ИспользоватьНесколькоКлассификацийЗадолженности".
//
// Параметры:
// Количество - Число - количество элементов в справочнике "ВариантыКлассификацииЗадолженности".
// Форма - ФормаКлиентскогоПриложения - форма, источник проверки.
//
// Возвращаемое значение:
// Булево - Ложь, если проверка пройдена, Истина, если проверка не пройдена, выдать сообщение об ошибке.
//
Функция ПроверкаИСообщениеВариантовКлассификацииЗадолженности(Количество, Форма) Экспорт
	Если Форма = Неопределено Тогда
		ПрефиксСообщения = НСтр("ru = 'Не удалось заполнить поле ""Вариант классификации задолженности"".'");
	Иначе
		ПрефиксСообщения = "";
	КонецЕсли;
	
	СтатусВозврата = Ложь;
	Если Количество > 1 Тогда
		СообщениеОбОшибке = ПрефиксСообщения + НСтр("ru = 'В информационной базе введено несколько вариантов классификации задолженности.'") 
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Включите функциональную опцию ""Предприятие - Несколько вариантов классификации задолженности"".'");
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		СтатусВозврата = Истина;
	ИначеЕсли Количество <> 1 Тогда
		СообщениеОбОшибке = ПрефиксСообщения + НСтр("ru = 'Возможно, в информационной базе не введено ни одного варианта классификации задолженности.'");
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		СтатусВозврата = Истина;
	КонецЕсли;

	Возврат СтатусВозврата;
КонецФункции 

// Формирует структуру отборов по партнеру и организации для контекстно вызываемых отчетов 
//   по расчетам с клиентом.
//
// Параметры:
//  МассивДокументов  - Массив - массив документов, которыми параметризуется отчет.
//  ИмяОтчета         - Строка - имя вызываемого отчета.
//  ИмяКоманды        - Строка - имя команды, при помощи которой вызывается отчет.вызываемого отчета.
//  Типы              - Массив - Массив типов параметра команды вызывающей отчет.
//
// Возвращаемое значение:
//   Структура   - сформированная структура отбора, где:
//      * Партнер - Массив из СправочникСсылка.Партнеры.
//      * Организация - Массив из СправочникСсылка.Организации.
//
Функция СтруктураОтборовОтчетовРасчетыСКлиентами(МассивДокументов, ИмяОтчета, ИмяКоманды, Типы = Неопределено) Экспорт
	
	СтруктураОтборов = Новый Структура;
	
	ШаблонЗапросаПоДокументам = "
	|ВЫБРАТЬ 
	|	Документ.Партнер,
	|	Документ.Организация
	|ПОМЕСТИТЬ ДокументыПартнерыОрганизации
	|ИЗ
	|	&ИмяТаблицы КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)";
	
	ТекстОбъединить = "
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ЭтоПервыйЗапросОбъединения = Истина;
	
	ТекстЗапроса = "";
	
	Коллекция = ?(ЗначениеЗаполнено(Типы), Типы, Метаданные.Отчеты[ИмяОтчета].Команды[ИмяКоманды].ТипПараметраКоманды.Типы());
	
	Для Каждого ТипПараметраКоманды Из Коллекция Цикл
		
		ОбъектМетаданныхДокумента = Метаданные.НайтиПоТипу(ТипПараметраКоманды);
		Если ПравоДоступа("Чтение", ОбъектМетаданныхДокумента) Тогда
			ИмяТаблицы = ОбъектМетаданныхДокумента.Имя;
			
			ТекстЗапросаПоДокументу = СтрЗаменить(ШаблонЗапросаПоДокументам, "&ИмяТаблицы", "Документ." + ИмяТаблицы);
			ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, 
			                                      "ПОМЕСТИТЬ ДокументыПартнерыОрганизации",
			                                      ?(НЕ ЭтоПервыйЗапросОбъединения,"", "ПОМЕСТИТЬ ДокументыПартнерыОрганизации"));
			
			ТекстЗапроса = ТекстЗапроса + ?(ЭтоПервыйЗапросОбъединения, "", ТекстОбъединить) + ТекстЗапросаПоДокументу;
			
			ЭтоПервыйЗапросОбъединения = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументыПартнерыОрганизации.Партнер
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПартнерыОрганизации КАК ДокументыПартнерыОрганизации
	|		ПО Партнеры.Ссылка = ДокументыПартнерыОрганизации.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументыПартнерыОрганизации.Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПартнерыОрганизации КАК ДокументыПартнерыОрганизации
	|		ПО Организации.Ссылка = ДокументыПартнерыОрганизации.Организация";
	
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураОтборов.Вставить("Партнер", Результат[0].Выгрузить().ВыгрузитьКолонку("Партнер"));
	СтруктураОтборов.Вставить("Организация", Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Возврат СтруктураОтборов;
	
КонецФункции

// Формирование таблицы взаимозачета кредиторской задолженности.
//
// Параметры:
//	ДебиторскаяЗадолженность - ТаблицаЗначений, Массив - таблица дебиторской задолженности.
//	КредиторскаяЗадолженность - ТаблицаЗначений, Массив - таблица кредиторской задолженности.
//	ТаблицаДвижений - РегистрНакопленияНаборЗаписей - таблица движений по регистру, если задана то будет дополнена движениями иначе будет возвращена в этой переменной.
//
Процедура ПровестиВзаимозачет(ДебиторскаяЗадолженность, КредиторскаяЗадолженность, ТаблицаДвижений) Экспорт
	
	ОбщиеПоля   = "Период,ХозяйственнаяОперация,Организация,Подразделение,Валюта,Сторно";
	ПоляДебета  = "Партнер,Контрагент,Договор,НаправлениеДеятельности,ОбъектРасчетов,ТипСуммы,ВалютаВзаиморасчетов,ИсточникГФУРасчетов";
	ПоляКредита = "КорПартнер,КорКонтрагент,КорДоговор,КорНаправлениеДеятельности,КорОбъектРасчетов,КорТипСуммы,КорВалютаВзаиморасчетов,КорИсточникГФУРасчетов";
	ПоляСумм    = "Сумма,СуммаРегл,СуммаВВалюте,СуммаВВалютеВзаиморасчетов,КорСуммаВВалютеВзаиморасчетов";
	
	Если ТаблицаДвижений = Неопределено Тогда
		ТаблицаДвижений = РегистрыНакопления.ДвиженияКонтрагентКонтрагент.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Иначе
		ОбщиеПоля = "Регистратор," + ОбщиеПоля;
	КонецЕсли;
	
	ПоследнийИндекс = КредиторскаяЗадолженность.Количество()-1;
	НашеПредприятие = Справочники.Партнеры.НашеПредприятие;
	Для Каждого Дебет Из ДебиторскаяЗадолженность Цикл
		Индекс = -1;
		Для Каждого Кредит Из КредиторскаяЗадолженность Цикл
			
			Индекс = Индекс + 1;
			Если Кредит.СуммаРегл = 0 Тогда
				Продолжить;
			КонецЕсли;
			ПоследнийПлатеж = Индекс = ПоследнийИндекс;
			
			Если Дебет.Сторно И Дебет.СуммаРегл < 0 И Кредит.СуммаРегл < 0 Тогда
				Сумма            = -СписатьСумму(-Дебет.Сумма, -Кредит.Сумма, ПоследнийПлатеж);
				СуммаРегл        = -СписатьСумму(-Дебет.СуммаРегл, -Кредит.СуммаРегл, ПоследнийПлатеж);
				СуммаВВалюте     = -СписатьСумму(-Дебет.СуммаВВалюте, -Кредит.СуммаВВалюте, ПоследнийПлатеж);
			Иначе
				Сумма            = СписатьСумму(Дебет.Сумма, Кредит.Сумма, ПоследнийПлатеж);
				СуммаРегл        = СписатьСумму(Дебет.СуммаРегл, Кредит.СуммаРегл, ПоследнийПлатеж);
				СуммаВВалюте     = СписатьСумму(Дебет.СуммаВВалюте, Кредит.СуммаВВалюте, ПоследнийПлатеж);
			КонецЕсли;
			СуммаВВалютеВзаиморасчетов = СписатьСуммуПоКурсу(СуммаРегл, Дебет, ПоследнийПлатеж);
			КорСуммаВВалютеВзаиморасчетов = СписатьСуммуПоКурсу(СуммаРегл, Кредит, ПоследнийПлатеж, "Кор");
			
			Если СуммаРегл <> 0 Тогда
				НовоеДвижение = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеДвижение, Дебет, ОбщиеПоля+","+ПоляДебета, ПоляСумм);
				ЗаполнитьЗначенияСвойств(НовоеДвижение, Кредит, ПоляКредита, ПоляСумм);
				
				НовоеДвижение.Сумма           = Сумма;
				НовоеДвижение.СуммаРегл       = СуммаРегл;
				НовоеДвижение.СуммаВВалюте = СуммаВВалюте;
				НовоеДвижение.СуммаВВалютеВзаиморасчетов    = СуммаВВалютеВзаиморасчетов;
				НовоеДвижение.КорСуммаВВалютеВзаиморасчетов = КорСуммаВВалютеВзаиморасчетов;
				
				Если Дебет.Организация <> Кредит.Организация Тогда
				
					РасходВГоловнойОрганизации = Дебет.ВидДвижения = ВидДвиженияНакопления.Расход
						И (Дебет.ЭтоГоловнаяОрганизация ИЛИ НЕ Дебет.ЭтоГоловнаяОрганизация И НЕ Кредит.ЭтоГоловнаяОрганизация);
					Если РасходВГоловнойОрганизации Тогда
						НовоеДвижение.КорПартнер = НашеПредприятие;
						НовоеДвижение.КорКонтрагент = Кредит.Организация;
					Иначе
						НовоеДвижение.Партнер = НашеПредприятие;
						НовоеДвижение.Контрагент = Кредит.Организация;
					КонецЕсли;
					
					НовоеДвижениеКор = ТаблицаДвижений.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, Дебет, ПоляДебета, ПоляСумм);
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, Кредит, ОбщиеПоля+","+ПоляКредита, ПоляСумм);
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, НовоеДвижение, ПоляСумм);
					Если РасходВГоловнойОрганизации Тогда
						НовоеДвижениеКор.Партнер = НашеПредприятие;
						НовоеДвижениеКор.Контрагент = Дебет.Организация;
					Иначе
						НовоеДвижениеКор.КорПартнер = НашеПредприятие;
						НовоеДвижениеКор.КорКонтрагент = Дебет.Организация;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			Если Дебет.СуммаРегл <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;// по кредиторской задолженности
	КонецЦикла;// по дебиторской задолженности
	
КонецПроцедуры

// Определяется возможная сумма списания с текущего остатка - весь остаток или только часть остатка равная сумме списания.
// При этом уменьшается текущий остаток на сумму списания и сама сумма списания.
//
// Параметры:
//  СуммаОстатка - Число - Текущий остаток с которого необходимо списать сумму.
//  СуммаКСписанию - Число - Сумма которую необходимо списать.
//  ПоследняяЧасть - Булево - если истина, то списать весь остаток.
//
// Возвращаемое значение:
//  Число - сумма которую необходимо списать или весь остаток целиком в случае если он меньше заданной суммы или
//          ПоследняяЧасть = Истина.
//
Функция СписатьСумму(СуммаОстатка, СуммаКСписанию, ПоследняяЧасть = Ложь) Экспорт
	
	СуммаСписания = 0;
	КСписанию = Макс(СуммаКСписанию, -СуммаКСписанию);
	Знак = ?(КСписанию = 0, 1, СуммаКСписанию/КСписанию);
	
	Если СуммаОстатка >= КСписанию И НЕ ПоследняяЧасть Тогда
		СуммаСписания = КСписанию;
		СуммаОстатка = СуммаОстатка - СуммаСписания;
		КСписанию = 0;
	Иначе
		СуммаСписания = СуммаОстатка;
		КСписанию = КСписанию - СуммаСписания;
		СуммаОстатка = 0;
	КонецЕсли;
	
	СуммаКСписанию = Знак * КСписанию;
	
	Возврат СуммаСписания;
	
КонецФункции

// Определяется возможная сумма списания с текущего остатка одного показателя, 
// пропорционально уже списанной по другому показателю.
// При этом уменьшается текущий остаток.
//
// Параметры:
//	СуммаОстатка - Число - Текущий остаток с которого необходимо списать сумму.
//	СуммаСписано - Число - Сумма которая уже списана с другого показателя.
//	СуммаВсего - Число - Сумма по другому показателю до списания.
//
// Возвращаемое значение:
//	Число - сумма которую необходимо списать.
//
Функция СписатьСуммуПропорционально(СуммаОстатка, СуммаСписано, СуммаВсего) Экспорт
	
	СуммаКСписанию = 0;
	Если СуммаВсего > 0 Тогда
		СуммаКСписанию = Окр(СуммаОстатка * СуммаСписано / СуммаВсего, 2);
	КонецЕсли;
	
	Возврат СписатьСумму(СуммаОстатка, СуммаКСписанию);
	
КонецФункции

// Функция - конструктор процедуры ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента.
//
// Возвращаемое значение:
//	Структура - Структура параметров:
//		* Партнер          - СправочникСсылка.Партнеры - Партнер документа-инициатора.
//		* Договор          - СправочникСсылка.ДоговорыКонтрагентов - Договор объекта расчетов.
//		* ЗаказКлиента     - ДокументСсылка.ЗаказКлиента - Объект расчетов.
//		* ВалютаДокумента  - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//		* ОснованиеПлатежа - ДокументСсылка - Документ-основание.
//
Функция ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Партнер");
	Параметры.Вставить("Договор");
	Параметры.Вставить("ЗаказКлиента");
	Параметры.Вставить("ВалютаДокумента");
	Параметры.Вставить("ОснованиеПлатежа");
	
	Возврат Параметры;
КонецФункции

// Функция возвращает максимальную дату из временной таблицы, которая содержит перечень документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит временную таблицу ТаблицаДанныхДокументов,
//														с перечнем документов одного типа.
// Возвращаемое значение:
// 	Дата - Максимальная дата в коллекци документов.
Функция ПолучитьМаксимальнуюДатуВКоллекцииДокументов(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КоллекцияДокументов.Ссылка.Дата), НЕОПРЕДЕЛЕНО) КАК Период
	|ИЗ
	|	ТаблицаДанныхДокументов КАК КоллекцияДокументов
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		МаксимальнаяДата = Результат.Выгрузить()[0].Период;
		
		Если МаксимальнаяДата = Неопределено Тогда
			МаксимальнаяДата = ТекущаяДатаСеанса();
		КонецЕсли;
	Иначе
		МаксимальнаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат МаксимальнаяДата;
КонецФункции

// Процедура формирует записи в регистре сведений "Задания к распределению расчетов с клиентами",
// если текущий документ изменяет записи в регистре "Расчеты с клиентами".
// Параметры:
//	Документ - ДокументСсылка - Ссылка на документ-регистратор
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит временную таблицу изменений.
Процедура ОтразитьЗаданияКРаспределениюРасчетовСКлиентами(Документ, МенеджерВременныхТаблиц) Экспорт
	
	ВременныеТаблицы = МенеджерВременныхТаблиц;
	
	Если (ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиИзменения") <> Неопределено
			ИЛИ ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами") <> Неопределено)
		И ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // есть изменения в оперативном регистре
		
		ШаблонВложенныйЗапрос = "
		|ВЫБРАТЬ
		|	Таблица.Месяц                        КАК Месяц,
		|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация                    КАК Организация,
		|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
		|	Таблица.Документ                     КАК Документ
		|ИЗ
		|	&ТаблицаДанных КАК Таблица
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|	ПО Ключи.Ссылка = Таблица.АналитикаУчетаПоПартнерам
		|";
		
		ШаблонТекстУничтожениеВТ = "
		|;
		|//////////////////////////////
		|УНИЧТОЖИТЬ &ТаблицаДанных
		|";
		
		ТекстУничтожениеВТ = "";
		ВложенныйЗапрос = "";
		КоличествоТаблиц = 0;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиИзменения") <> Неопределено Тогда
			ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "(" + ТестЗапросаРаспределениеРасчетовСКлиентами() + ")");
			ВложенныйЗапрос = СтрЗаменить(ВложенныйЗапрос, "Ключи.Организация", "Таблица.Организация");
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами") <> Неопределено Тогда
			Если КоличествоТаблиц = 0 Тогда
				ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
				ТекстУничтожениеВТ = СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
			Иначе
				ВложенныйЗапрос = ВложенныйЗапрос + "
					|ОБЪЕДИНИТЬ ВСЕ
					|"
					+ СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
				ТекстУничтожениеВТ = ТекстУничтожениеВТ + СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
			КонецЕсли;
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если КоличествоТаблиц = 1 Тогда
			ТекстЗапроса = ВложенныйЗапрос + ТекстУничтожениеВТ;
		Иначе
			ШаблонТекстаЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Месяц                        КАК Месяц,
			|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
			|	Таблица.Организация                  КАК Организация,
			|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
			|	Таблица.Документ                     КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ &ВложенныйЗапрос
			|	) КАК Таблица
			|
			|";
			ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ВЫБРАТЬ &ВложенныйЗапрос", ВложенныйЗапрос) + ТекстУничтожениеВТ;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.УстановитьПараметр("НовыеРасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
			НаборЗаписей.НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует записи в регистре сведений "Задания к распределению расчетов с поставщиками",
// если текущий документ изменяет записи в регистре "Расчеты с поставщиками".
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ-регистратор
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит временную таблицу изменений.
//
Процедура ОтразитьЗаданияКРаспределениюРасчетовСПоставщиками(Документ, МенеджерВременныхТаблиц) Экспорт
	
	ВременныеТаблицы = МенеджерВременныхТаблиц;
	
	Если (ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиИзменения") <> Неопределено
			ИЛИ ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками") <> Неопределено)
		И ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // есть изменения в оперативном регистре
		
		ШаблонВложенныйЗапрос = "
		|ВЫБРАТЬ
		|	Таблица.Месяц                        КАК Месяц,
		|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация                    КАК Организация,
		|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
		|	Таблица.Документ                     КАК Документ
		|ИЗ
		|	&ТаблицаДанных КАК Таблица
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|	ПО Ключи.Ссылка = Таблица.АналитикаУчетаПоПартнерам
		|";
		
		ШаблонТекстУничтожениеВТ = "
		|;
		|//////////////////////////////
		|УНИЧТОЖИТЬ &ТаблицаДанных
		|";
		
		ТекстУничтожениеВТ = "";
		ВложенныйЗапрос = "";
		КоличествоТаблиц = 0;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиИзменения") <> Неопределено Тогда
			ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "(" + ТестЗапросаРаспределениеРасчетовСПоставщиками() + ")");
			ВложенныйЗапрос = СтрЗаменить(ВложенныйЗапрос, "Ключи.Организация", "Таблица.Организация");
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками") <> Неопределено Тогда
			Если КоличествоТаблиц = 0 Тогда
				ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
				ТекстУничтожениеВТ = СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
			Иначе
				ВложенныйЗапрос = ВложенныйЗапрос + "
					|ОБЪЕДИНИТЬ ВСЕ
					|"
					+ СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
				ТекстУничтожениеВТ = ТекстУничтожениеВТ + СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
			КонецЕсли;
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если КоличествоТаблиц = 1 Тогда
			ТекстЗапроса = ВложенныйЗапрос + ТекстУничтожениеВТ;
		Иначе
			ШаблонТекстаЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Месяц                        КАК Месяц,
			|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
			|	Таблица.Организация                  КАК Организация,
			|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
			|	Таблица.Документ                     КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ &ВложенныйЗапрос
			|	) КАК Таблица
			|
			|";
			ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ВЫБРАТЬ &ВложенныйЗапрос", ВложенныйЗапрос) + ТекстУничтожениеВТ;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.УстановитьПараметр("НовыеРасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
			НаборЗаписей.НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Устарела.
// Функция определяет, является ли переданная хозяйственная операция операцией интеркампани.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией интеркампани.
//
Функция ХозяйственнаяОперацияИнтеркампани(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Устарела.
// Функция определяет, является ли переданная хозяйственная операция операцией с клиентом.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией с клиентом.
//
Функция ХозяйственнаяОперацияСКлиентом(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Устарела.
// Функция определяет, является ли переданная хозяйственная операция операцией с поставщиком.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией с поставщиком.
//
Функция ХозяйственнаяОперацияСПоставщиком(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеТаможне") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Устарела.
// Функция определяет, является ли переданная хозяйственная операция операцией возврата денежных средств.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией возврата денежных средств.
//
Функция ХозяйственнаяОперацияВозвратДенежныхСредств(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получение списка контрагентов по сделкам для отправки приглашений.
//
// Параметры:
//  Организация			 - СправочникСсылка - ссылка на организацию, от которой производится приглашение.
//  РежимЗаполнения		 - Строка - режим заполнения контрагентов: "ЗаполнитьПоПоставкам", "ЗаполнитьПоЗакупкам", "ЗаполнитьПоВсемСделкам".
//  НачалоПериода		 - Дата - начало периода заполнения.
//  СписокКонтрагентов	 - ТаблицаЗначений - список контрагентов:
//    * Ссылка - СправочникСсылка - контрагент.
//    * ЭлектроннаяПочта - Строка - адрес электронной почты.
//
Процедура ПолучитьКонтрагентовПоСделкам(Организация, РежимЗаполнения, НачалоПериода, СписокКонтрагентов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаполнитьПоПоставкам",   РежимЗаполнения = "ЗаполнитьПоПоставкам");
	Запрос.УстановитьПараметр("ЗаполнитьПоЗакупкам",    РежимЗаполнения = "ЗаполнитьПоЗакупкам");
	Запрос.УстановитьПараметр("ЗаполнитьПоВсемСделкам", РежимЗаполнения = "ЗаполнитьПоВсемСделкам");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитикиУчетаПоПартнерам.Контрагент КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами.Обороты(&НачалоПериода, , , ) КАК РасчетыСКлиентамиОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ПО РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ГДЕ
	|		КлючиАналитикиУчетаПоПартнерам.Организация = &Организация
	|		И (&ЗаполнитьПоПоставкам
	|				ИЛИ &ЗаполнитьПоВсемСделкам)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитикиУчетаПоПартнерам.Контрагент
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Обороты(&НачалоПериода, , , ) КАК РасчетыСПоставщикамиОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ПО РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ГДЕ
	|		КлючиАналитикиУчетаПоПартнерам.Организация = &Организация
	|		И (&ЗаполнитьПоЗакупкам
	|				ИЛИ &ЗаполнитьПоВсемСделкам)) КАК Контрагенты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагенты.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			НоваяСтрока = СписокКонтрагентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
			ОбменСКонтрагентамиПереопределяемый.АдресЭлектроннойПочтыКонтрагента(
				Выборка.Ссылка, НоваяСтрока.ЭлектроннаяПочта);
			// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ТорговыеПредложения
// Заполнение штрихкодов для выгрузки.
//
// Параметры:
//  Организации	 - Массив - Список организация, для которых производится выгрузка.
//  РежимПоставщика - Булево - Выгружать только данные по продажам.
//  РежимПокупателя - Булево - Выгружать только данные по покупкам.
//  Штрихкоды	 - ТаблицаЗначений - данные по штрихкодам, 
//                 см. ТорговыеПредложения.ОбновитьПодсказкиТорговыеПредложения:
//    * Штрихкод - Строка - штрихкод товара.
//    * Наименование - Строка - Наименование товара
//    * РежимПоставщика - Булево - признак использования штрихкода в продажах.
//    * РежимПокупателя - Булево - признак использования штрихкода в закупках.
//
Процедура ЗаполнитьШтрихкодыДляВыгрузки(Знач Организации, Знач РежимПоставщика, Знач РежимПокупателя, Штрихкоды) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Организация КАК Организация,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Ссылка.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВтНоменклатура
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитикиУчетаПоПартнерам.Организация КАК Организация,
	|		КлючиАналитикиУчетаНоменклатуры.Номенклатура КАК Ссылка,
	|		КлючиАналитикиУчетаНоменклатуры.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, , , ) КАК ВыручкаИСебестоимостьПродаж
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|			ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ГДЕ
	|		КлючиАналитикиУчетаПоПартнерам.Организация В(&Организации)
	|		И &РежимПоставщика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Закупки.Организация,
	|		КлючиАналитикиУчетаНоменклатуры.Номенклатура,
	|		КлючиАналитикиУчетаНоменклатуры.Характеристика
	|	ИЗ
	|		РегистрНакопления.Закупки.Обороты(&НачалоПериода, , , ) КАК Закупки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|			ПО Закупки.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.Ссылка
	|	ГДЕ
	|		Закупки.Организация В(&Организации)
	|		И &РежимПокупателя) КАК Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	ВтНоменклатура.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВтНоменклатура.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВтНоменклатура.Номенклатура.Наименование
	|		ИНАЧЕ ВтНоменклатура.Номенклатура.НаименованиеПолное
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВтНоменклатура.Характеристика.Наименование ЕСТЬ NULL
	|				ИЛИ ВтНоменклатура.Характеристика.Наименование ПОДОБНО """"
	|			ТОГДА """"
	|		ИНАЧЕ "", "" + ВтНоменклатура.Характеристика.Наименование
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВтНоменклатура.ЕдиницаИзмерения.Наименование ЕСТЬ NULL
	|				ИЛИ ВтНоменклатура.ЕдиницаИзмерения.Наименование ПОДОБНО """"
	|			ТОГДА """"
	|		ИНАЧЕ "" ("" + ВтНоменклатура.ЕдиницаИзмерения.Наименование + "")""
	|	КОНЕЦ КАК Наименование,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	&РежимПоставщика КАК РежимПоставщика,
	|	&РежимПокупателя КАК РежимПокупателя
	|ИЗ
	|	ВтНоменклатура КАК ВтНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (ШтрихкодыНоменклатуры.Номенклатура = ВтНоменклатура.Номенклатура)
	|			И (ШтрихкодыНоменклатуры.Характеристика = ВтНоменклатура.Характеристика)
	|			И (ШтрихкодыНоменклатуры.Упаковка = ВтНоменклатура.ЕдиницаИзмерения
	|				ИЛИ ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|ГДЕ
	|	ПОДСТРОКА(ШтрихкодыНоменклатуры.Штрихкод, 1, 1) <> ""2""";
	
	Запрос.УстановитьПараметр("Организации",     Организации);
	Запрос.УстановитьПараметр("НачалоПериода", 	 НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -6)));
	Запрос.УстановитьПараметр("РежимПоставщика", РежимПоставщика);
	Запрос.УстановитьПараметр("РежимПокупателя", РежимПокупателя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Штрихкоды.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

// Функция определяет ведутся взаиморасчеты в иностранной валюте или в национальной
//
// Параметры:
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов объекта.
//		ВалютаРегламентированногоУчета - СправочникСсылка.Валюты - Валюта регламентированного учета.
//
// Возвращаемое значение:
//		Булево - Истина, если расчеты в иностранной валюте.
//
Функция ВзаиморасчетыВВалюте(ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета) Экспорт
	
	Возврат ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
	
КонецФункции

// Функция возвращает ссылку на объект расчетов переданной ссылки.
//
// Параметры:
//		ОбъектСсылка - ОпределяемыйТип.ОбъектРасчетов - Документ по которому нужно определить объект расчетов.
//
// Возвращаемое значение:
// 		ОпределяемыйТип.ОбъектРасчетов - Объект расчетов документа..
//
Функция ОбъектРасчетовПоСсылке(ОбъектСсылка) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "ПорядокРасчетов") Тогда 
		Порядок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ПорядокРасчетов");
		Если Порядок = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
				ИЛИ ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
				Возврат ОбъектСсылка
			Иначе
				Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Договор");
			КонецЕсли;
		ИначеЕсли Порядок = Перечисления.ПорядокРасчетов.ПоЗаказам 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "ЗаказКлиента") Тогда
			Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ЗаказКлиента");
			Если ЗначениеЗаполнено(Заказ) Тогда
				Возврат Заказ;
			КонецЕсли;
		ИначеЕсли Порядок = Перечисления.ПорядокРасчетов.ПоЗаказам 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "ЗаказПоставщику") Тогда
			Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ЗаказПоставщику");
			Если ЗначениеЗаполнено(Заказ) Тогда
				Возврат Заказ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектСсылка;
	
КонецФункции

// см. ОтчетыУТПереопределяемый.ДополнитьСоответствияРегистраторовОтчетаОДвижениях
//
Процедура ДополнитьСоответствияРегистраторовОтчетаОДвижениях(Документ, СоответствиеРегистров) Экспорт
	
	Если Документ.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок, "ДокументРегистратор");
	КонецЕсли;
	
	Если Документ.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок, "ДокументРегистратор");
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасчетКурсовыхРазниц") Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам, "ДокументРегистратор");
	КонецЕсли;
	
КонецПроцедуры

// Отложенное обновление регистров взаиморасчетов завершено.
// 
// Параметры:
//  ТолькоФинансовые - Булево - Только финансовые
// 
// Возвращаемое значение:
//  Булево - Отложенное обновление регистров взаиморасчетов завершено
Функция ОтложенноеОбновлениеРегистровВзаиморасчетовЗавершено(ТолькоФинансовые = Ложь) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
		Возврат Истина;
	Иначе
		МассивОбъектов = Новый Массив();
		
		Если НЕ ТолькоФинансовые Тогда
			МассивОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами);
			МассивОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		КонецЕсли;
		
		Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
			МассивОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам);
			МассивОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам);
			Если НЕ ТолькоФинансовые Тогда
				МассивОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат);
				МассивОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок);
				МассивОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат);
				МассивОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок);
			КонецЕсли;
		Иначе
			МассивОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам);
			МассивОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам);
		КонецЕсли;
		
		Для Каждого ОбъектМетаданных Из МассивОбъектов Цикл
			Если НЕ ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, ОбъектМетаданных) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЗаданийКЗакрытиюМесяца

// Дополняет текст запроса механизма формирования заданий закрытия месяца.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
Процедура ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	
	СоответствиеЗапросов = СоответствиеЗапросовКонтрольнымРегистрам(Запрос);
	
	Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
		ЗакрытиеМесяцаСервер.ДополнитьНазванияТаблицДляЗаданий(Запрос, ЭлементСоответствия.Ключ);
		ЗакрытиеМесяцаСервер.ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ,
			ЭлементСоответствия.Значение,
			Запрос.МенеджерВременныхТаблиц.Таблицы,
			ТекстЗапроса,
			ТекстЗапросаВременныхТаблиц,
			ИменаВременныхТаблиц);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Модульность

#Область ОбщийПрограммныйИнтерфейс

// Возвращает структуру параметров механизма взаиморасчетов.
// Параметры описываются либо путем к данным объекта, либо фиксированным значением типа Булево, Строка и пр.
// Путь к данным может вести как в шапку документа ("Объект.Организация"), так и в табличную часть ("Объект.РасшифровкаПлатежа.Партнер").
// В одном документе может быть задано несколько структур параметров (пример - ОтчетКомиссионера).
// Для встраивания в документы рекомендуется использовать шаблон в конце метода.
//
// Возвращаемое значение:
// 	Структура - Структура параметров с ключами:
// 		* ЭлементыФормы - Структура - Имена элементов формы, используются для связи элемента с текущими параметрами:
// 			** ЗачетОплаты - Строка - Имя элемента, вызывающего помощник зачета оплат.
// 			** СуммаВзаиморасчетовТЧ - Строка - Имя элемента, отображающего колонку Сумма взаиморасчетов в основной табличной части.
// 			** ГиперссылкаРасшифровкаПлатежа - Строка - Имя элемента, отображающего сумму расшифровки платежа и открывающего ее редактирование.
// 			** РасшифровкаПлатежа - Строка - Имя элемента, отображающего табличную часть Расшифровка платежа на форме.
// 			** ПодборВРасшифровкуПлатежа - Строка - Имя кнопки, вызывающего подбор в расшифровку платежа.
// 			** НадписьВалюты - Строка - Имя гиперссылки, отображающей валюты и курс документа и вызывающего форму их редактирования.
// 			** НадписьЭтапы - Строка - Имя гиперссылки, отображающей график оплаты и открывающий форму редактирования правил оплаты.
// 			** НадписьРасчеты - Строка - Имя гиперссылки, отображающей состояние расчетов и открывающей отчет по взаиморасчетам.
// 			** ОграничениеЗадолженностиТекст - Строка - Имя гиперссылки, отображающей текст ограничения задолженности и открывающей соответствующий отчет.
// 			** ОграничениеЗадолженностиКартинка - Строка - Имя картинки, отображающей восклицательный знак при ограничении задолженности.
// 		* ЭтоЗаказ - Булево - Это документ - заказ, на основании которого будут вводиться накладные.
// 		* ЭтоСправочник - Булево - Это справочник (договоры или претензии).
// 		* ЭтоПродажаЗакупка - Булево - Это документ - накладная.
// 		* ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип взаиморасчетов.
// 		* ИзменяетПланОплаты - Булево - Уменьшает или увеличивает планы к оплате от клиента или поставщику.
// 		* ИзменяетПланОтгрузкиПоставки - Булево - Уменьшает или увеличивает план отгрузки или поставки.
// 		
// 		* Дата - Строка - Путь к реквизиту объекта, содержащему дату документа.
// 		* ВалютаДокумента - Строка - Путь к реквизиту объекта, содержащему валюту документа.
// 		* СуммаДокумента - Строка - Путь к реквизиту объекта, содержащему сумму документа в валюте документа.
// 		* Организация - Строка- Путь к реквизиту объекта, содержащему организацию, от лица которой производится хозяйственная операция.
// 		* Партнер - Строка - Путь к реквизиту объекта, содержащему партнера, с которым возникают взаиморасчеты у организации.
// 		* Контрагент - Строка - Путь к реквизиту объекта, содержащему контрагента или организацию, с которой возникают взаиморасчеты у организации.
// 		
// 		* ВалютаВзаиморасчетов - Строка - Путь к реквизиту объекта, содержащему валюту, по который ведутся взаиморасчеты организации с контрагентом.
// 		* СуммаВзаиморасчетов - Строка - Путь к реквизиту объекта, содержащему общую сумму взаиморасчетов документа, без учета залога за тару.
// 		* СуммаНДСВзаиморасчетов - Строка - Путь к реквизиту объекта, содержащему сумму НДС в валюте взаиморасчетов.
// 		* СуммаВзаиморасчетовПоТаре - Строка - Путь к реквизиту объекта, содержащему общую сумму залога за тару.
// 		
// 		* Договор - Строка - Путь к реквизиту объекта, содержащему договор организации с контрагентом, в рамках которого возникают взаиморасчеты.
// 		* НаправлениеДеятельности - Строка - Путь к реквизиту объекта, содержащему направление деятельности организации, в рамках которой следует отражать взаиморасчеты.
// 		* ПорядокРасчетов - Строка - Путь к реквизиту объекта, содержащему порядок расчетов документа.
// 		* СуммаДокументаФорма - Строка - Путь к реквизиту формы, содержащему сумму документа с учетом залоговой тары.
// 		
// 		* ПутьКДаннымТЧ - Строка - Путь к реквизиту объекта, содержащему основную табличную часть документа.
// 		* ИмяРеквизитаТЧСуммаСНДС - Строка - Имя реквизита табличной части, содержащего сумму строки с ндс в валюте документа.
// 		* ИмяРеквизитаТЧСуммаСНДС - Строка - Имя реквизита табличной части, содержащего заказ, по которому производится отгрузка/поставка.
// 		
// 		* ПутьКДаннымТЧРасшифровкаПлатежа - Строка - Путь к реквизиту объекта, содержащему табличную часть "Расшифровка платежа" документа.
// 		* Соглашение - Строка - Путь к реквизиту объекта, содержащему соглашение с клиентом или поставщиком.
// 		* БанковскийСчетОрганизации - Строка - Путь к реквизиту объекта, содержащему банковский счет организации.
// 		* БанковскийСчетКонтрагента - Строка - Путь к реквизиту объекта, содержащему банковский счет контрагента.
// 		* Касса - Строка - Путь к реквизиту объекта, содержащему кассу.
// 		* ФормаОплаты - Строка - Путь к реквизиту объекта, содержащему форму оплаты.
// 		* ОплатаВВалюте - Строка - Путь к реквизиту объекта, содержащему признак "Оплата в валюте".
// 		* ИдентификаторПлатежа - Строка - Путь к реквизиту объекта, содержащему идентификатор платежа.
// 		* ГруппаФинансовогоУчета - Строка - Путь к реквизиту объекта, содержащему группу финансового учета расчетов.
// 		* ОбъектРасчетов - Строка - Пусть к реквизиту объекта или колонке ТЧ, хранящей ссылку /ссылки на справочник Объекты расчетов.
// 		* Ссылка - Строка - Пусть к реквизиту Ссылка, которая будет являться объектом расчетов при расчетах по накладным.
// 		* Подразделение - Строка - Путь к реквизиту объекта, содержащему подразделение.
// 		* Менеджер - Строка - Путь к реквизиту объекта, содержащему ответственного менеджера.
// 		* НомерВходящегоДокумента - Строка - Путь к реквизиту объекта, содержащему номер входящего документа.
// 		* ДатаВходящегоДокумента - Строка - Путь к реквизиту объекта, содержащему дату входящего документа.
// 		* НаименованиеПервичногоДокумента - Строка - Путь к реквизиту объекта, содержащему наименование первичного документа.
// 		
// 		* НакладнаяПоЗаказам - Строка - Путь к реквизиту объекта, содержащему признак того, что документ введен по заказу.
// 		* ЗаказОснование - Строка - Путь к реквизиту объекта, содержащему заказ, по которому введен документ.
// 		* ПартнерПрочиеОтношения - Булево - Истина, если подбирать следует только по партнерам с признаком "Прочие отношения".
// 		* ПодборДебиторскойЗадолженности - Булево - Истина, если подбирается дебиторская задолженность.
// 		* ПодборТолькоБезусловнойЗадолженности - Булево - Истина, если подбирается только фактическая задолженность.
// 		
// 		* КурсЧислитель - Строка - Путь к реквизиту объекта, содержащему курс-числитель валюты документа относительно валюты взаиморасчетов.
// 		* КурсЗнаменатель - Строка - Путь к реквизиту объекта, содержащему курс-знаменатель валюты документа относительно валюты взаиморасчетов.
// 		* ВалютыИКурсДокументаТолькоПросмотр - Булево - Истина, если в форме редактирования валют и курсов документа ничего нельзя менять.
// 		* ВалютаДокументаТолькоПросмотр - Булево - Истина, если в форме редактирования валют и курсов документа нельзя менять валюту документа.
// 		* ВалютаВзаиморасчетовТолькоПросмотр - Булево - Истина, если в форме редактирования валют и курсов документа  нельзя менять валюту взаиморасчетов.
// 		* НеПоказыватьРасчеты - Булево - Истина, если в форме редактирования валют и курсов документа нужно скрыть валюту и сумму взаиморасчетов.
// 		* НеПересчитыватьСуммуДокумента - Булево - Истина, если в форме редактирования валют и курсов документа не нужно предлагать пересчитывать сумму документа.
// 		
// 		* ПутьКДаннымТЧЭтапыОплаты - Строка - Путь к реквизиту объекта, содержащему табличную часть этапов графика оплаты.
// 		* ДатаПлатежа - Строка - Путь к реквизиту объекта, содержащему дату планового платежа по документу.
// 		* ГрафикОплаты - Строка - Путь к реквизиту объекта, содержащему шаблон графика оплаты документа.
// 		* ДатаСогласования - Строка - Путь к реквизиту объекта, содержащему дату, от которой следует считать этапы графика оплаты с отсчетом от даты согласования.
// 		* ДатаОтгрузки - Строка - Путь к реквизиту объекта, содержащему дату, от которой следует считать этапы графика оплаты с отсчетом от/до даты отгрузки и от даты перехода права собственности.
// 		
// 		* СуммаЗалогаЗаТаруФорма - Строка - Путь к реквизиту формы, содержащему сумму залога за тару в валюте документа.
// 		* ЭтапыОплатыТолькоПросмотр - Булево - Признак Только просмотр для открываемой формы редактирования правил оплаты.
// 		* ВозможнаНакладнаяПоНесколькимЗаказам - Булево - Истина, если накладная может быть введена по нескольким заказам.
// 		* ИсточникСуммТабличнаяЧасть - Булево - Истина, если объект предоставляет интерфейс ПоместитьСуммыПоЗаказамВоВременноеХранилище() для сложного расчета сумм документа
//
Функция ПараметрыМеханизма() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	//Имена элементов форм для текущего набора параметров
	ЭлементыФормы = Новый Структура();
	
	#Область ОбязательныеПараметры
	
	//Если все опции ложь, то это платеж или служебный документ.
	СтруктураПараметров.Вставить("ЭтоЗаказ",                         Ложь);
	СтруктураПараметров.Вставить("ЭтоСправочник",                    Ложь);
	СтруктураПараметров.Вставить("ЭтоПродажаЗакупка",                Ложь);
	
	//Определяет какой регистр двигают параметры, какие общие формы, перечисления и справочники использовать.
	СтруктураПараметров.Вставить("ТипРасчетов",                      Перечисления.ТипыРасчетовСПартнерами.ПустаяСсылка());
	СтруктураПараметров.Вставить("Организация",                      "Объект.Организация");
	
	// При определенных значениях реквизитов документа он может не изменять взаиморасчеты в части оплат или отгрузок.
	// Пример - Передача товара на комиссию.
	//
	// Если оба флага отрицательны, то скрывается гиперссылка "Расчеты", очищаются суммы взаиморасчеты и табличные части механизма.
	// При отрицательном значении будут скрыты кнопки ЗачетОплаты и ЭтапыОплаты, но можно будет менять валюты и курс.
	СтруктураПараметров.Вставить("ИзменяетПланОплаты",               Истина);
	СтруктураПараметров.Вставить("ИзменяетПланОтгрузкиПоставки",     Истина);
	
	// Дата отражения документа в системе.
	// Используется для получения остатков просроченной задолженности для функции ограничения задолженности.
	// Используется для получения курсов валют документа. 
	// Используется для заполнения этапов оплаты и расшифровки платежа по умолчанию.
	СтруктураПараметров.Вставить("Дата",                             "Объект.Дата");
	// Системный номер объекта
	СтруктураПараметров.Вставить("Номер",                            "Объект.Номер");
	
	// Валюта и сумма операции. Обязательно путь к реквизитам объекта.
	СтруктураПараметров.Вставить("ВалютаДокумента",                  "Объект.Валюта");
	СтруктураПараметров.Вставить("СуммаДокумента",                   "Объект.СуммаДокумента");
	
	// Используются для генерации объектов расчетов и аналитики.
	СтруктураПараметров.Вставить("Партнер",                          "Объект.Партнер");
	СтруктураПараметров.Вставить("Контрагент",                       "Объект.Контрагент");
	
	#КонецОбласти
	
	#Область НеобязательныеПараметры
	
	// Отличные от валюты и суммы документа реквизиты. Если не заполнен, то для чтения будет взята валюта документа.
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов",             "");
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов",              "");
	СтруктураПараметров.Вставить("СуммаНДСВзаиморасчетов",              "");
	СтруктураПараметров.Вставить("СуммаВзаиморасчетовПоТаре",        "");
	
	// Используется для генерации аналитики проведения и объекта расчетов, определения графика исполнения договора.
	СтруктураПараметров.Вставить("Договор",                          "Объект.Договор");
	// Используется для получения реквизитов ГФУ, ПорядокРасчетов, ВалютаВзаиморасчетов, ОплатаВВалюте при учете продаж конечным покупателям.
	СтруктураПараметров.Вставить("ДоговорКомиссионера",              "");
	
	// Используется для генерации аналитики проведения и объекта расчетов.
	СтруктураПараметров.Вставить("НаправлениеДеятельности",          "Объект.НаправлениеДеятельности");
	
	// Порядок расчетов документа.
	СтруктураПараметров.Вставить("ПорядокРасчетов",                  "Объект.ПорядокРасчетов");
	СтруктураПараметров.Вставить("УсловныйПорядокРасчетов",          "");
	
	// Сумма всего с залоговой тарой. Путь к итоговому показателю формы (реквизиту).
	// Используется для отображения гиперссылок, редактирования и заполнения графика плановых оплат
	// редактирования расшифровки платежа и т.д.
	СтруктураПараметров.Вставить("СуммаДокументаФорма",              ""); 
	
	// Реквизит формы итоговых показателей, содержащий сумму залога за тару в валюте документа.
	// Используется в заполнении этапов графика оплаты.
	СтруктураПараметров.Вставить("СуммаЗалогаЗаТаруФорма",               "");
	
	// Табличная часть, по которой распределяется сумма взаиморасчетов, сумма залога за тару или разбивка накладной по заказам.
	// Используется для отображения гиперссылок, редактирования и заполнения графика плановых оплат
	// редактирования расшифровки платежа, если не заполнен параметр СуммаДокументаФорма.
	// В ТЧ заполняются объекты расчетов по заказам.
	СтруктураПараметров.Вставить("ПутьКДаннымТЧ",                    "");
	// Имя реквизита суммы с ндс табличной части.
	СтруктураПараметров.Вставить("ИмяРеквизитаТЧСуммаСНДС",          "СуммаСНДС");
	// Имя реквизита тч, содержащего заказ.
	СтруктураПараметров.Вставить("ИмяРеквизитаТЧЗаказ",              "");
	
	// Путь к табличной части Расшифровка платежа.
	// Используется в функция зачета оплат, распределения взаиморасчетов, распределения оплаты.
	СтруктураПараметров.Вставить("ПутьКДаннымТЧРасшифровкаПлатежа",  "");
	
	// Используется для заполнения значений по умолчанию, заполнения графика плановых оплат и даты платежа.
	СтруктураПараметров.Вставить("Соглашение",                       "Объект.Соглашение");
	
	// Используются для определения значения ОплатаВВалюте и в форме редактирования правил оплаты.
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",        "Объект.БанковскийСчетОрганизации");
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",        "Объект.БанковскийСчетКонтрагента");
	СтруктураПараметров.Вставить("Касса",                            "Объект.Касса");
	СтруктураПараметров.Вставить("ФормаОплаты",                      "Объект.ФормаОплаты");
	СтруктураПараметров.Вставить("ОплатаВВалюте",                    "Объект.ОплатаВВалюте");
	// Используется в форме правил оплаты и для подбора в расшифровку платежа объектов расчетов.
	СтруктураПараметров.Вставить("ИдентификаторПлатежа",             "Объект.ИдентификаторПлатежа");
	СтруктураПараметров.Вставить("НалогообложениеНДС",               "Объект.НалогообложениеНДС");
	
	// Реквизиты для объекта расчетов, используются в проведении.
	СтруктураПараметров.Вставить("ГруппаФинансовогоУчета",           "Объект.ГруппаФинансовогоУчета");
	СтруктураПараметров.Вставить("Подразделение",                    "Объект.Подразделение");
	СтруктураПараметров.Вставить("Менеджер",                         "");
	СтруктураПараметров.Вставить("НомерВходящегоДокумента",          "");
	СтруктураПараметров.Вставить("ДатаВходящегоДокумента",           "");
	СтруктураПараметров.Вставить("НаименованиеПервичногоДокумента",  "");
		
	// Используется для определения объекта расчетов.
	СтруктураПараметров.Вставить("НакладнаяПоЗаказам",               "");
	
	// Заказ основание из шапки.
	// Используется при определении порядка расчетов по умолчанию и списка доступных порядков для выбора.
	// Используется для определения объекта расчетов.
	СтруктураПараметров.Вставить("ЗаказОснование",                   ""); 
	
	// Имя кнопки, открывающей помощник зачета оплат для текущего набора параметров.
	ЭлементыФормы.Вставить("ЗачетОплаты",                      "");
	// Имя элемента таблицы формы, отображающей сумму взаиморасчетов.
	// Используется для установки условного оформления.
	// Следует заполнить если документ поддерживает построчное ручное редактирование сумм взаиморасчетов.
	ЭлементыФормы.Вставить("СуммаВзаиморасчетовТЧ",            "");
	
	// Имя элемента формы содержащего группу финансового учета для отражения текущего набора параметров по БУ.
	ЭлементыФормы.Вставить("ГруппаФинансовогоУчета",           "");
	ЭлементыФормы.Вставить("НаправлениеДеятельности",          "");
	
	// Место хранения ссылки/ссылок на справочник Объекты расчетов. Может быть в шапке или в табличной части.
	СтруктураПараметров.Вставить("ОбъектРасчетов",             "");
	
	СтруктураПараметров.Вставить("Ссылка",                     "Объект.Ссылка");
	
	// Расчет сумм документа через алгоритм модуля объекта документа
	СтруктураПараметров.Вставить("ИсточникСуммТабличнаяЧасть", Ложь);
	
	#КонецОбласти
	
	#Область РедактированиеРасшифровкиПлатежа
	
	// Если расшифровка редактируется в общей форме, используется в Зачете возвратов товаров.
	ЭлементыФормы.Вставить("ГиперссылкаРасшифровкаПлатежа",    "");
	
	// Если расшифровка редактируется в документе.
	// Используется в распределении оплаты.
	СтруктураПараметров.Вставить("ПлатежиПо275ФЗ",             "");
	ЭлементыФормы.Вставить("РасшифровкаПлатежа",               "");
	ЭлементыФормы.Вставить("ПодборВРасшифровкуПлатежа",        "");
	
	// Настройки подбора и выбора в ТЧ Расшифровка платежа
	
	// Для подбора остатков расчетов по партнерам с типом расчетов Прочие отношения, без отбора по партнеру.
	СтруктураПараметров.Вставить("ПартнерПрочиеОтношения",               Ложь); 
	СтруктураПараметров.Вставить("ПодборДебиторскойЗадолженности",       Ложь);
	СтруктураПараметров.Вставить("ПодборТолькоБезусловнойЗадолженности", Ложь);
	
	#КонецОбласти
	
	#Область РедактированиеВалютИВалютныхСуммДокумента
	
	// Курс документа - одна пара для документа.
	// Используются для расчета суммы взаиморасчетов и в форме редактирования валют и курсов документа.
	СтруктураПараметров.Вставить("КурсЧислитель",                           "");
	СтруктураПараметров.Вставить("КурсЗнаменатель",                         "");
	
	// Имя гиперссылки, отображающей текущий курс взаиморасчетов документа и открывающей соответствующую форму.
	ЭлементыФормы.Вставить("НадписьВалюты",                    "");
	
	// Используется, когда в вызывающей форме не стоит флаг ТолькоПросмотр, но ограничить редактирование валют нужно.
	СтруктураПараметров.Вставить("ВалютыИКурсДокументаТолькоПросмотр", Ложь);
	
	// Используются в условии через ИЛИ с правом отклонения от условий продаж/закупок.
	СтруктураПараметров.Вставить("ВалютаДокументаТолькоПросмотр",      Ложь);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетовТолькоПросмотр", Ложь);
	
	// Если не следует показывать сумму и валюту взаиморасчетов исходя из данных документа.
	СтруктураПараметров.Вставить("НеПоказыватьРасчеты",                Ложь);
	// Если не требуется предлагать пересчет суммы документа.
	СтруктураПараметров.Вставить("НеПересчитыватьСуммуДокумента",      Ложь);
	
	#КонецОбласти
	
	#Область ГрафикПлановойОплатыИДатаПлатежа
	
	// Функция Этапы оплаты и дата платежа
	СтруктураПараметров.Вставить("ПутьКДаннымТЧЭтапыОплаты",         "");
	СтруктураПараметров.Вставить("ДатаПлатежа",                      "");
	СтруктураПараметров.Вставить("ГрафикОплаты",                     "");
	СтруктураПараметров.Вставить("ДатаСогласования",                 "");
	СтруктураПараметров.Вставить("ДатаОтгрузки",                     "Объект.Дата");
	СтруктураПараметров.Вставить("ДатаПереходаПраваСобственности",   "");
	СтруктураПараметров.Вставить("НетКонтроляПредоплаты",            Ложь);
	СтруктураПараметров.Вставить("ЕстьДатаПереходаПраваСобственности", Ложь);
	
	// Имя гиперссылки, отображающей текущие правила оплаты документа и открывающей форму Правила оплаты.
	ЭлементыФормы.Вставить("НадписьЭтапы",                     "");
	// Путь к реквизиту формы отображаемому в поле надписи -гиперссылке
	СтруктураПараметров.Вставить("НадписьЭтапыОплаты",                  "");
	// Поле ввода порядка оплаты
	ЭлементыФормы.Вставить("ПорядокРасчетов",                  "");
	
	// Если требуется ограничить редактирование плавил оплаты.
	СтруктураПараметров.Вставить("ЭтапыОплатыТолькоПросмотр",            Ложь);
	// Если истина и накладная по заказам то будет отображена расширенная форма графика оплаты, несмотря на функциональную опцию "Упрощенная форма оплаты".
	СтруктураПараметров.Вставить("ВозможнаНакладнаяПоНесколькимЗаказам", Ложь);
	// Скрывает Банковский счет, кассу, оплату в валюте и УИП в форме плавил оплаты, используется в самообслуживании.
	СтруктураПараметров.Вставить("НеУказыватьИсточникиОплаты", Ложь);
	// Позволяет указывать график оплаты при отсутствии движений по плану оплат.
	СтруктураПараметров.Вставить("ЗаказКакСчет", Ложь);
	
	#КонецОбласти
	
	#Область СостояниеВзаиморасчетов
	
	ЭлементыФормы.Вставить("НадписьРасчеты",                   ""); // Имя гиперссылки, отображающей состояние расчетов и открывающей соответствующий отчет,
	
	#КонецОбласти
	
	#Область ОграниченияЗадолженностиПоДоговору
	
	ЭлементыФормы.Вставить("ОграничениеЗадолженностиТекст",    ""); // Гиперссылка отображающая состояние ограничения задолженности
	ЭлементыФормы.Вставить("ОграничениеЗадолженностиКартинка", ""); // Картинка отображающая запрет отгрузки
	
	#КонецОбласти
	
	СтруктураПараметров.Вставить("ИзменяетРасчетыСтрокой", "ИСТИНА");
	СтруктураПараметров.Вставить("ТолькоОстатки", Ложь);
	СтруктураПараметров.Вставить("ЭлементыФормы", ЭлементыФормы);
	СтруктураПараметров.Вставить("ОрганизацияДоговора", "");
	
	Возврат СтруктураПараметров;
	
		// Шаблон для вставки в модуль менеджера документа.
	// Если значение параметра документа не отличается от значения шаблона - строку можно удалить.
	// Если в документе реквизит отсутствует или отличается, а в шаблоне заполнен - строку нужно раскомментировать и отредактировать.
	
// Возвращает параметры механизма взаиморасчетов.
// 
// Возвращаемое значение:
// 	Массив - Массив параметров функций механизма взаиморасчетов (См. ВзаиморасчетыСервер.ПараметрыМеханизма)
//
//Функция ПараметрыВзаиморасчеты() Экспорт
//	
//	СтруктураПараметров = ВзаиморасчетыСервер.ПараметрыМеханизма();
//	
//	#Область ОбязательныеПараметры
//	
//	//Если все опции ложь, то это платеж или служебный документ.
//	СтруктураПараметров.ЭтоЗаказ                         = Ложь;
//	СтруктураПараметров.ЭтоСправочник                    = Ложь;
//	СтруктураПараметров.ЭтоПродажаЗакупка                = Ложь;
//	
//	//Определяет какой регистр двигают параметры, какие общие формы, перечисления и справочники использовать.
//	СтруктураПараметров.ТипРасчетов                      = Перечисления.ТипыРасчетовСПартнерами.ПустаяСсылка();
//	СтруктураПараметров.Организация                      = "Объект.Организация";
//	
//	//При определенных значениях реквизитов документа он может не изменять взаиморасчеты в части оплат или отгрузок.
//	//Пример - Передача товара на комиссию.
//
//	//Если оба флага отрицательны, то скрывается гиперссылка "Расчеты", очищаются суммы взаиморасчеты и табличные части механизма.
//	//При отрицательном значении будут скрыты кнопки ЗачетОплаты и ЭтапыОплаты, но можно будет менять валюты и курс.
//	СтруктураПараметров.ИзменяетПланОплаты               = Истина;
//	СтруктураПараметров.ИзменяетПланОтгрузкиПоставки     = Истина;
//	
//	//Дата отражения документа в системе.
//	//Используется для получения остатков просроченной задолженности для функции ограничения задолженности.
//	//Используется для получения курсов валют документа. 
//	//Используется для заполнения этапов оплаты и расшифровки платежа по умолчанию.
//	СтруктураПараметров.Дата                             = "Объект.Дата";
//	// Системный номер объекта
//	СтруктураПараметров.Вставить("Номер",                            "Объект.Номер");
//	
//	//Валюта и сумма операции. Обязательно путь к реквизитам объекта.
//	СтруктураПараметров.ВалютаДокумента                  = "Объект.Валюта";
//	СтруктураПараметров.СуммаДокумента                   = "Объект.СуммаДокумента";
//	
//	//Используются для генерации объектов расчетов и аналитики.
//	СтруктураПараметров.Партнер                          = "Объект.Партнер";
//	СтруктураПараметров.Контрагент                       = "Объект.Контрагент";
//	
//	#КонецОбласти
//	
//	#Область НеобязательныеПараметры
//	
//	//Отличные от валюты и суммы документа реквизиты. Если не заполнен, то для чтения будет взята валюта документа.
//	СтруктураПараметров.ВалютаВзаиморасчетов             = "";
//	СтруктураПараметров.СуммаВзаиморасчетов              = "";
//	СтруктураПараметров.СуммаНДСВзаиморасчетов           = "";
//	СтруктураПараметров.СуммаВзаиморасчетовПоТаре        = "";
//	
//	//Используется для генерации аналитики проведения и объекта расчетов, определения графика исполнения договора.
//	СтруктураПараметров.Договор                          = "Объект.Договор";
//	Используется для получения реквизитов ГФУ, ПорядокРасчетов, ВалютаВзаиморасчетов, ОплатаВВалюте при учете продаж конечным покупателям.
//	СтруктураПараметров.ДоговорКомиссионера              = "");
//	//Используется для генерации аналитики проведения и объекта расчетов.
//	СтруктураПараметров.НаправлениеДеятельности          = "Объект.НаправлениеДеятельности";
//	
//	//Порядок расчетов документа.
//	СтруктураПараметров.ПорядокРасчетов                  = "Объект.ПорядокРасчетов";
//	
//	//Сумма всего с залоговой тарой. Путь к итоговому показателю формы (реквизиту).
//	//Используется для отображения гиперссылок, редактирования и заполнения графика плановых оплат
//	//редактирования расшифровки платежа и т.д.
//	СтруктураПараметров.СуммаДокументаФорма              = "";
//	
//	//Реквизит формы итоговых показателей, содержащий сумму залога за тару в валюте документа.
//	//Используется в заполнении этапов графика оплаты.
//	СтруктураПараметров.СуммаЗалогаЗаТаруФорма            = ""; 
//
//	//Табличная часть, по которой распределяется сумма взаиморасчетов и есть поле "заказ".
//	//Используется для отображения гиперссылок, редактирования и заполнения графика плановых оплат
//	//редактирования расшифровки платежа, если не заполнен параметр СуммаДокументаФорма.
//	//В ТЧ заполняются объекты расчетов по заказам.
//	СтруктураПараметров.ПутьКДаннымТЧ                    = "";
//	//Имя реквизита суммы с ндс табличной части.
//	СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС          = "СуммаСНДС";
//	//Имя реквизита тч, содержащего заказ.
//	СтруктураПараметров.ИмяРеквизитаТЧЗаказ              = "";
//	
//	//Путь к табличной части Расшифровка платежа.
//	//Используется в функция зачета оплат, распределения взаиморасчетов, распределения оплаты.
//	СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа  = "";
//	
//	//Используется для заполнения значений по умолчанию, заполнения графика плановых оплат и даты платежа.
//	СтруктураПараметров.Соглашение                       = "Объект.Соглашение";
//	
//	//Используются для определения значения ОплатаВВалюте и в форме редактирования правил оплаты.
//	СтруктураПараметров.БанковскийСчетОрганизации        = "Объект.БанковскийСчетОрганизации";
//	СтруктураПараметров.БанковскийСчетКонтрагента        = "Объект.БанковскийСчетКонтрагента";
//	СтруктураПараметров.Касса                            = "Объект.Касса";
//	СтруктураПараметров.ФормаОплаты                      = "Объект.ФормаОплаты";
//	СтруктураПараметров.ОплатаВВалюте                    = "Объект.ОплатаВВалюте";
//	//Используется в форме правил оплаты и для подбора в расшифровку платежа объектов расчетов.
//	СтруктураПараметров.ИдентификаторПлатежа             = "Объект.ИдентификаторПлатежа";
//	СтруктураПараметров.НалогообложениеНДС               = "Объект.НалогообложениеНДС";
//	
//	//Место хранения ссылки/ссылок на справочник Объекты расчетов.
//	СтруктураПараметров.ОбъектРасчетов                   = "";
//	
//	//Реквизиты для объекта расчетов, используются в проведении.
//	СтруктураПараметров.ГруппаФинансовогоУчета           = "Объект.ГруппаФинансовогоУчета";
//	СтруктураПараметров.Подразделение                    = "Объект.Подразделение";
//	СтруктураПараметров.Менеджер                         = "";
//	СтруктураПараметров.НомерВходящегоДокумента          = "";
//	СтруктураПараметров.ДатаВходящегоДокумента           = "";
//	
//	//Используется для определения объекта расчетов.
//	СтруктураПараметров.НакладнаяПоЗаказам               = "";
//	
//	//Используется при определении порядка расчетов по умолчанию и списка доступных порядков для выбора.
//	//Используется для определения объекта расчетов.
//	СтруктураПараметров.ЗаказОснование                   = ""; 
//	
//	//Имя кнопки, открывающей помощник зачета оплат для текущего набора параметров.
//	СтруктураПараметров.ЭлементыФормы.ЗачетОплаты                      = "";
//	//Имя элемента таблицы формы, отображающей сумму взаиморасчетов.
//	//Используется для установки условного оформления.
//	//Следует заполнить если документ поддерживает построчное ручное редактирование сумм взаиморасчетов.
//	СтруктураПараметров.ЭлементыФормы.СуммаВзаиморасчетовТЧ            = "";
//	
//	//Имя элемента формы содержащего группу финансового учета для отражения текущего набора параметров по БУ.
//	СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета = "";
//	СтруктураПараметров.ЭлементыФормы.НаправлениеДеятельности = "";
//	
//	#КонецОбласти
//	
//	#Область РедактированиеРасшифровкиПлатежа
//	
//	//Если расшифровка редактируется в общей форме, используется в Зачете возвратов товаров.
//	СтруктураПараметров.ЭлементыФормы.ГиперссылкаРасшифровкаПлатежа    = "";
//	
//	//Если расшифровка редактируется в документе.
//	//Используется в распределении оплаты.
//	СтруктураПараметров.ПлатежиПо275ФЗ                                   = Ложь;
//	СтруктураПараметров.ЭлементыФормы.РасшифровкаПлатежа               = "";
//	СтруктураПараметров.ЭлементыФормы.ПодборВРасшифровкуПлатежа        = "";
//	
//	//Настройки подбора и выбора в ТЧ Расшифровка платежа
//	
//	//Для подбора остатков расчетов по партнерам с типом расчетов Прочие отношения, без отбора по партнеру.
//	СтруктураПараметров.ПартнерПрочиеОтношения                           = Ложь;
//	СтруктураПараметров.ПодборДебиторскойЗадолженности                   = Ложь;
//	СтруктураПараметров.ПодборТолькоБезусловнойЗадолженности             = Ложь;
//	
//	#КонецОбласти
//	
//	#Область РедактированиеВалютИВалютныхСуммДокумента
//	
//	//Курс документа - одна пара для документа.
//	//Используются для расчета суммы взаиморасчетов и в форме редактирования валют и курсов документа.
//	СтруктураПараметров.КурсЧислитель                             = "";
//	СтруктураПараметров.КурсЗнаменатель                        = "";
//	
//	//Имя гиперссылки, отображающей текущий курс взаиморасчетов документа и открывающей соответствующую форму.
//	СтруктураПараметров.ЭлементыФормы.НадписьВалюты                    = "";
//	
//	//Используется, когда в вызывающей форме не стоит флаг ТолькоПросмотр, но ограничить редактирование валют нужно.
//	СтруктураПараметров.ВалютыИКурсДокументаТолькоПросмотр             = Ложь;
//	
//	//Используются в условии через ИЛИ с правом отклонения от условий продаж/закупок.
//	СтруктураПараметров.ВалютаДокументаТолькоПросмотр                  = Ложь;
//	СтруктураПараметров.ВалютаВзаиморасчетовТолькоПросмотр             = Ложь;
//	
//	//Если не следует показывать сумму и валюту взаиморасчетов исходя из данных документа.
//	СтруктураПараметров.НеПоказыватьРасчеты                            = Ложь;
//	//Если не требуется предлагать пересчет суммы документа.
//	СтруктураПараметров.НеПересчитыватьСуммуДокумента                  = Ложь;
//	
//	#КонецОбласти
//	
//	#Область ГрафикПлановойОплатыИДатаПлатежа
//	
//	//Функция Этапы оплаты и дата платежа
//	СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты         = "";
//	СтруктураПараметров.ДатаПлатежа                      = "";
//	СтруктураПараметров.ГрафикОплаты                     = "";
//	СтруктураПараметров.ДатаСогласования                 = "");
//	СтруктураПараметров.ДатаОтгрузки                     = "");
//	
//	//Имя гиперссылки, отображающей текущие правила оплаты документа и открывающей форму Правила оплаты.
//	СтруктураПараметров.ЭлементыФормы.НадписьЭтапы             = "";
//	
//	//Если требуется ограничить редактирование плавил оплаты.
//	СтруктураПараметров.ЭтапыОплатыТолькоПросмотр                      = Ложь;
//	//Если истина и накладная по заказам то будет отображена расширенная форма графика оплаты, несмотря на функциональную опцию "Упрощенная форма оплаты".
//	СтруктураПараметров.ВозможнаНакладнаяПоНесколькимЗаказам           = Ложь;
//	//Скрывает Банковский счет, кассу, оплату в валюте и УИП в форме плавил оплаты, используется в самообслуживании.
//	СтруктураПараметров.НеУказыватьИсточникиОплаты = Ложь;
//	//Взвести если не нужны варианты контроля До отгрузки и до обеспечения в графике оплаты. Пример - Отчет комиссионера.
//	СтруктураПараметров.НетКонтроляПредоплаты      = Ложь;
//	//Взвести если у документа реализован отложенный переход права собственности, даст возможность указания варианта отчета "От даты перехода права собственности"
//	СтруктураПараметров.ЕстьДатаПереходаПраваСобственности             = Ложь;
//	
//	
//	#КонецОбласти
//	
//	#Область СостояниеВзаиморасчетов
//	
//	//Имя гиперссылки, отображающей состояние расчетов и открывающей соответствующий отчет,
//	СтруктураПараметров.ЭлементыФормы.НадписьРасчеты                   = "";
//	
//	#КонецОбласти
//	
//	#Область ОграниченияЗадолженностиПоДоговору
//	
//	//Гиперссылка отображающая состояние ограничения задолженности
//	СтруктураПараметров.ЭлементыФормы.ОграничениеЗадолженностиТекст    = "";
//	//Картинка отображающая запрет отгрузки
//	СтруктураПараметров.ЭлементыФормы.ОграничениеЗадолженностиКартинка = ""; 
//	
//	#КонецОбласти
//	
//	Возврат СтруктураПараметров;
//КонецФункции
	
КонецФункции

// Дополняет структуру/ массив структур данными настроек ИБ, задает соответствие элементов формы индексам элементов массива параметров.
// 
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект, ФормаКлиентскогоПриложения - Объект, по которому требуется дополнить параметры.
// 	ПараметрыМеханизма - Массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма, Структура см. ВзаиморасчетыСервер.ПараметрыМеханизма - Параметры для дополнения.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * МассивПараметров - Массив из Структура см. ВзаиморасчетыСервер.ПараметрыМеханизма - Включает массив структур параметров и общие данные.
//
Функция ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма = Неопределено) Экспорт
	
	Если ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") И ПараметрыМеханизма = Неопределено Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(Объект);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыМеханизма) = Тип("Массив") Тогда
		МассивПараметров = ПараметрыМеханизма;
	Иначе
		МассивПараметров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыМеханизма);
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		
		СтруктураПараметров.Вставить("ЗаданГрафикИсполнения", Ложь);
		СтруктураПараметров.Вставить("ГрафикИсполненияДоговора", Неопределено);
		СтруктураПараметров.Вставить("СтавкаДисконтирования", 0);
		СтруктураПараметров.Вставить("СрокДляПримененияДисконтирования", 0);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Договор) Тогда
			Договор = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
			Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				УстановитьПривилегированныйРежим(Истина);
				РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЗаданГрафикИсполнения, ГрафикИсполненияДоговора, Организация, ЦентрализованныйДоговор, СтавкаДисконтирования, СрокДляПримененияДисконтирования");
				УстановитьПривилегированныйРежим(Ложь);
				СтруктураПараметров.ЗаданГрафикИсполнения = РеквизитыДоговора.ЗаданГрафикИсполнения;
				СтруктураПараметров.ГрафикИсполненияДоговора = РеквизитыДоговора.ГрафикИсполненияДоговора;
				СтруктураПараметров.ОрганизацияДоговора = РеквизитыДоговора.Организация;
				СтруктураПараметров.СтавкаДисконтирования = РеквизитыДоговора.СтавкаДисконтирования;
				СтруктураПараметров.СрокДляПримененияДисконтирования = РеквизитыДоговора.СрокДляПримененияДисконтирования;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		
			МассивИспользуемыхЭлементовФормы = Новый Массив;
			Для Каждого Элемент Из СтруктураПараметров.ЭлементыФормы Цикл
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда
					МассивИспользуемыхЭлементовФормы.Добавить(Элемент.Значение);
				КонецЕсли;
			КонецЦикла;
			СтруктураПараметров.Вставить("ИспользуемыеЭлементыФормы", МассивИспользуемыхЭлементовФормы);
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
				ОбъектФормы = Объект.Объект; //ДокументОбъект
				МетаданныеОбъекта = ОбъектФормы.Ссылка.Метаданные();
				СтруктураПараметров.Вставить("ПараметрыВыбораРеквизитов", ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(МетаданныеОбъекта));
			КонецЕсли;
			
			СоответствиеИспользуемыхРеквизитов = Новый Соответствие;
			Для Каждого Элемент Из СтруктураПараметров Цикл
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда
					Если СоответствиеИспользуемыхРеквизитов.Получить(Элемент.Значение) = Неопределено Тогда
						СоответствиеИспользуемыхРеквизитов.Вставить(Элемент.Значение, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элемент.Ключ));
					Иначе
						СоответствиеИспользуемыхРеквизитов[Элемент.Значение].Добавить(Элемент.Ключ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			СтруктураПараметров.Вставить("ИспользуемыеРеквизиты", СоответствиеИспользуемыхРеквизитов);
		
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ИзменяетРасчеты", СтруктураПараметров.ИзменяетПланОплаты ИЛИ СтруктураПараметров.ИзменяетПланОтгрузкиПоставки);
		
		СтруктураПараметров.Вставить("ДокументРасчетовСКлиентами", СтруктураПараметров.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"));
		СтруктураПараметров.Вставить("ДокументРасчетовСПоставщиками", СтруктураПараметров.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком"));
		
		СтруктураПараметров.Вставить("ЭтоПлатежИлиПрочийДокумент", НЕ СтруктураПараметров.ЭтоЗаказ И НЕ СтруктураПараметров.ЭтоСправочник И НЕ СтруктураПараметров.ЭтоПродажаЗакупка);
		
		СтруктураПараметров.Вставить("АдресЭтапыОплаты", "");
		СтруктураПараметров.Вставить("АдресСуммПоЗаказам", "");
		СтруктураПараметров.Вставить("АдресРасшифровкаПлатежа", "");
		СтруктураПараметров.Вставить("СуммаРасшифровкиПлатежа", 0);
		
		Если НЕ СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент Тогда
			ОбъектМетаданных = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Ссылка").Метаданные();
			СтруктураПараметров.Вставить("ПараметрыВыбораРеквизитов", ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(ОбъектМетаданных))
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ОрганизацияВСтроках", СтрЧислоВхождений(СтруктураПараметров.Организация, ".") > 1);
		СтруктураПараметров.Вставить("КонтрагентВСтроках", СтрЧислоВхождений(СтруктураПараметров.Контрагент, ".") > 1
			И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа)
			И СтрРазделить(СтруктураПараметров.Контрагент, ".")[1] = СтрРазделить(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа, ".")[1]);
		СтруктураПараметров.Вставить("ПартнерВСтроках", СтрЧислоВхождений(СтруктураПараметров.Партнер, ".") > 1
			И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа)
			И СтрРазделить(СтруктураПараметров.Партнер, ".")[1] = СтрРазделить(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа, ".")[1]);
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетовВСтроках", СтрЧислоВхождений(СтруктураПараметров.ВалютаВзаиморасчетов, ".") > 1
			И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа)
			И СтрРазделить(СтруктураПараметров.ВалютаВзаиморасчетов, ".")[1] = СтрРазделить(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа, ".")[1]);
			
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов) И ЗначениеЗаполнено(СтруктураПараметров.ВалютаДокумента) Тогда
			СтруктураПараметров.ВалютаВзаиморасчетов = СтруктураПараметров.ВалютаДокумента;
		КонецЕсли;
			
	КонецЦикла;
	
	СистемныеНастройки = Новый Структура();
	СистемныеНастройки.Вставить("ИспользоватьГрафикиОплаты",                                    ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	СистемныеНастройки.Вставить("ИспользоватьСоглашенияСКлиентами",                             ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	СистемныеНастройки.Вставить("ИспользоватьСоглашенияСПоставщиками",                          ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками"));
	СистемныеНастройки.Вставить("ИспользоватьДоговорыСКлиентами",                               ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами"));
	СистемныеНастройки.Вставить("ИспользоватьДоговорыСПоставщиками",                            ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками"));
	СистемныеНастройки.Вставить("ИспользоватьДоговорыМеждуОрганизациями",                       ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями"));
	СистемныеНастройки.Вставить("ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ПолучитьФункциональнуюОпцию("ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров"));
	СистемныеНастройки.Вставить("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках",                   ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках"));
	СистемныеНастройки.Вставить("ИспользоватьУпрощеннуюСхемуОплатыВПродажах",                   ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах"));
	СистемныеНастройки.Вставить("ИспользоватьРеализациюПоНесколькимЗаказам",                    ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам"));
	
	СистемныеНастройки.Вставить("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	СистемныеНастройки.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	ДополненныеПараметрыМеханизма = Новый Структура();
	ДополненныеПараметрыМеханизма.Вставить("МассивПараметров", МассивПараметров);
	ДополненныеПараметрыМеханизма.Вставить("СистемныеНастройки", СистемныеНастройки);
	ДополненныеПараметрыМеханизма.Вставить("ОповеститьОЗаполненииЭтапов", Ложь);
	ДополненныеПараметрыМеханизма.Вставить("ОповеститьОбИзмененииОбъектаРасчетов", Ложь);
	ДополненныеПараметрыМеханизма.Вставить("ИзмененныйОбъектРасчетов", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	
	
	Возврат ДополненныеПараметрыМеханизма;
	
КонецФункции

#Область МодульОбъекта

//Выполняет первоначальное заполнение валют, порядка расчетов, оплата в валюте, этапов графика оплат, курса и кратности
//значениями по умолчанию, если значения еще не заполнены.
//
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект - обрабатываемый объект.
// 	ДанныеЗаполнения - Структура, ДокументОбъект - ДанныеЗаполнения из обработки заполнения документа.
// 
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(Объект);
	
	ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма);
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
		Если ЗначениеЗаполнено(Организация) Тогда
			ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
			ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеЗаполнения.Организация);
		Иначе
			ВалютаРегламентированногоУчета = Неопределено;
		КонецЕсли;
		
		ОбработатьЗаполнить(Объект, СтруктураПараметров, ДанныеЗаполнения, "ВалютаДокумента", ВалютаРегламентированногоУчета);
		ОбработатьЗаполнить(Объект, СтруктураПараметров, ДанныеЗаполнения, "ВалютаВзаиморасчетов", ВалютаРегламентированногоУчета);
		ОбработатьЗаполнить(Объект, СтруктураПараметров, ДанныеЗаполнения, "ПорядокРасчетов", ПорядокРасчетовПоПараметрам(Объект, СтруктураПараметров));
		// Оплата в валюте:
		ОплатаВВалютеПоУмолчанию = ОплатаВВалютеПоУмолчанию(Объект, СтруктураПараметров);
		ОплатаВВалюте = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ОплатаВВалюте);
		Если ОплатаВВалюте <> Неопределено Тогда
			ОплатаВВалюте.Данные[ОплатаВВалюте.Имя] = ОплатаВВалютеПоУмолчанию
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДополненныеПараметрыМеханизма.МассивПараметров[0].КурсЧислитель)
		И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ДополненныеПараметрыМеханизма.МассивПараметров[0].КурсЧислитель) = 0 Тогда
		ЗаполнитьКурсКратностьПоУмолчанию(Объект, ДополненныеПараметрыМеханизма);
	КонецЕсли;
	
КонецПроцедуры

//Выполняет очистку реквизитов при копировании документов.
//В продажах и закупках чистится расшифровка платежа, этапы графика оплат, суммы взаиморасчетов.
//
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект - обрабатываемый объект.
// 
Процедура ПриКопировании(Объект) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(Объект);
	
	ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма);
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		ОчиститьРасшифровкуПлатежа(Объект, СтруктураПараметров);
		ОчиститьЭтапыГрафикаОплаты(Объект, СтруктураПараметров);
		ОчиститьСуммыВзаиморасчетовТЧ(Объект, СтруктураПараметров);
		ОчиститьОбъектРасчетов(Объект, СтруктураПараметров);
	КонецЦикла;
	
КонецПроцедуры

//Проверяет и заполняет необходимые данные механизма и документа:
//	Сумму взаиморасчетов документа;
//	Сумму взаиморасчетов в основных табличных частях документа;
//	Порядок расчетов;
//	Оплату в валюте;
//	Расшифровку платежа;
//	Этапы графика оплат.
//
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект - обрабатываемый объект.
// 	Отказ - Булево - Флаг отказ из обработчика документа ПередЗаписью.
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи документа.
// 
Процедура ПередЗаписью(Объект, Отказ, ЗНАЧ РежимЗаписи = Неопределено) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(Объект);
	
	ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма);
	СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	
	Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Ссылка");
	
	Если Объект.ЭтоНовый() Тогда
		СсылкаНового = Объект.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаНового) Тогда
			СсылкаНового = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Если Объект.ЭтоНовый() Тогда
			СтруктураПараметров.Вставить("СсылкаНового", СсылкаНового);
		КонецЕсли;
		
		ПроверитьЗаполнитьРеквизит(Объект, СтруктураПараметров, "ПорядокРасчетов", ПорядокРасчетовПоПараметрам(Объект, СтруктураПараметров));
		ПроверитьЗаполнитьРеквизит(Объект, СтруктураПараметров, "ОплатаВВалюте", ОплатаВВалютеПоУмолчанию(Объект, СтруктураПараметров));
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПроверитьЗаполнитьСуммуВзаиморасчетов(Объект, СтруктураПараметров, СистемныеНастройки);
			ПроверитьЗаполнитьСуммыВзаиморасчетовВТабличнойЧасти(Объект, СтруктураПараметров);
			ПроверитьЗаполнитьЭтапыГрафикаОплаты(Объект, СтруктураПараметров, СистемныеНастройки);
			ПроверитьЗаполнениеЭтаповГрафикаОплаты(Объект, Отказ, СтруктураПараметров, СистемныеНастройки);
			ПроверитьЗаполнитьРасшифровкуПлатежа(Объект, СтруктураПараметров, РежимЗаписи, Отказ);
		КонецЕсли;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ Объект.Проведен Тогда
			ЗаполнитьВозможныеАвансыВНакладной(Объект, СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектыРасчетовСервер.ПроверитьОбъектыРасчетовПередЗаписью(Объект, ДополненныеПараметрыМеханизма.МассивПараметров, РежимЗаписи, Отказ);
	
КонецПроцедуры

// При изменении даты согласования очищает этапы графика оплаты.
// 
// Параметры:
//  Объект - ДокументОбъект, СправочникОбъект - обрабатываемый объект.
Процедура ПриИзмененииДатыСогласования(Объект) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(Объект);
	ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма);
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		ЭтапыГрафика = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		
		Соглашение = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение);
		Если ЗначениеЗаполнено(Соглашение) Тогда
			Календарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "Календарь");
		Иначе
			Календарь = Справочники.ПроизводственныеКалендари.ПустаяСсылка();
		КонецЕсли; 
		
		ДатаСогласования = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаСогласования);
		ДатаЗаказа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		
		Для Каждого СтрокаЭтапа Из ЭтапыГрафика Цикл
			Если СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования Тогда
				СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
				СтруктураПараметров.ВариантОтсчета                 = СтрокаЭтапа.ВариантОтсчета;
				СтруктураПараметров.Сдвиг                          = СтрокаЭтапа.Сдвиг;
				СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
				СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
				СтруктураПараметров.ДатаОтгрузки                   = Дата(1,1,1);
				СтруктураПараметров.ДатаПереходаПраваСобственности = Дата(1,1,1);
				СтруктураПараметров.СрокПереходаПраваСобственности = 0;
				СтруктураПараметров.Календарь                      = Календарь;
				
				Если ЗначениеЗаполнено(Календарь)  Тогда
					СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(СтруктураПараметров);
				Иначе
					СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(СтруктураПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЭтапыОплатыКлиентСервер.СортироватьТаблицуЭтапов(ЭтапыГрафика);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МодульФормы

//Выполняет дополнение и кэширование параметров механизма в реквизит формы, обновляет тексты гиперссылок
//и устанавливает видимость команды "Зачет оплаты" для новых документов.
//
// Параметры:
// 	Форма - РасширениеУправляемойФормыДляДокумента - Форма документа/справочника.
// 
Процедура ФормаПриСозданииНаСервере(Форма) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
	ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(Форма.Объект);
	
	ДополнитьИЗакэшироватьПараметры(Форма, ПараметрыМеханизма);
	
	Объект = Форма.Объект; //ДокументОбъект
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	Иначе
		ФормаПриЧтенииСозданииНаСервере(Форма, ПараметрыМеханизма)
	КонецЕсли;
	
	ВзаиморасчетыСервер.ЗаблокироватьОбъектыРасчетов(Форма);
	
КонецПроцедуры

//Выполняет кэширование параметров механизма в реквизит формы, обновляет тексты гиперссылок
//и устанавливает видимость команды "Зачет оплаты" для существующих документов.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 
Процедура ФормаПриЧтенииНаСервере(Форма) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
	ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(Форма.Объект);
	
	ДополнитьИЗакэшироватьПараметры(Форма, ПараметрыМеханизма);
	
	ФормаПриЧтенииСозданииНаСервере(Форма, ПараметрыМеханизма)
	
КонецПроцедуры

//Обновляет тексты гиперссылок после записи и устанавливает значения параметров механизма Взаиморасчеты по оповещению
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 	ДополнительныеСвойства - Структура - Дополнительные свойства записаннного объекта
// 
Процедура ФормаПослеЗаписиНаСервере(Форма, ДополнительныеСвойства = Неопределено) Экспорт
	
	ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
	ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма);
	ОбновитьТекстГиперссылкиЭтапыОплаты(Форма);
	ОбновитьРаспределеннуюСуммаРасшифровки(Форма);
	Если ДополнительныеСвойства <> Неопределено Тогда
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		Если ДополнительныеСвойства.Свойство("ОповеститьОЗаполненииЭтапов") Тогда
			ДополненныеПараметрыМеханизма.ОповеститьОЗаполненииЭтапов = ДополнительныеСвойства.ОповеститьОЗаполненииЭтапов;
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("ОповеститьОбИзмененииОбъектаРасчетов") Тогда 
			ДополненныеПараметрыМеханизма.ОповеститьОбИзмененииОбъектаРасчетов = ДополнительныеСвойства.ОповеститьОбИзмененииОбъектаРасчетов;
			ДополненныеПараметрыМеханизма.ИзмененныйОбъектРасчетов = ДополнительныеСвойства.ИзмененныйОбъектРасчетов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Выполняет необходимые действия при изменении ключевых реквизитов документа/справочника.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 	ИзмененныеРеквизиты - Массив - Перечень имен измененных реквизитов в терминах документа.
// 	ЭтоИзмененияМеханизма - Булево - Флаг того, что вызов производит сам механизм.
// 
// Возвращаемое значение:
// 	Структура - Структура измененных реквизитов документа после обработки, где:
// 		* Ключ - Строка - Имя реквизита.
// 		* Значение - Произвольный - значение реквизита до изменения.
//
Функция ФормаПриИзмененииРеквизитов(Форма, ИзмененныеРеквизиты, ЭтоИзмененияМеханизма = Ложь) Экспорт
	
	Если ТипЗнч(ИзмененныеРеквизиты) = Тип("Массив") Тогда
		МассивРеквизитов = ИзмененныеРеквизиты;
	ИначеЕсли ТипЗнч(ИзмененныеРеквизиты) = Тип("Структура") Тогда
		МассивРеквизитов = Новый Массив;
		Для Каждого Элемент Из ИзмененныеРеквизиты Цикл
			МассивРеквизитов.Добавить(Элемент.Ключ);
		КонецЦикла;
	Иначе //строка
		МассивРеквизитов = Новый Массив;
		Реквизиты = СтрРазделить(ИзмененныеРеквизиты, ",");
		Для Каждого Реквизит Из Реквизиты Цикл
			МассивРеквизитов.Добавить(СокрЛП(Реквизит));
		КонецЦикла;
	КонецЕсли;
	
	СтарыеЗначенияИзмененныхРеквизитов = Новый Структура;
	ЕстьИзмененияВалют = Ложь;
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	
	//Возвращает какие из измененных реквизитов используются в структурах параметров.
	Результаты = МассивСтруктурПараметровПоРеквизитам(ДополненныеПараметрыМеханизма.МассивПараметров, МассивРеквизитов);
	
	Для Каждого Результат Из Результаты Цикл
		
		СтруктураПараметров = Результат.СтруктураПараметров;
		МассивИспользуемыхРеквизитов = Результат.ИспользуемыеРеквизиты;
		
		ОбновитьТекстГиперссылкиОграничениеЗадолженности = Ложь;
		ОбновитьТекстГиперссылкиСостояниеРасчетов = Ложь;
		ОбновитьТекстГиперссылкиЭтапыОплаты = Ложь;
		УстановитьВидимостьЗачетОплаты = Ложь;
		УстановитьВидимостьГФУНД = Ложь;
		ИзменилсяГрафикИсполнения = Ложь;
		
		//График исполнения договора
		Если МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено Тогда
			
			ОбновитьТекстГиперссылкиОграничениеЗадолженности = Истина;
			
			Договор = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма.Объект, СтруктураПараметров.Договор);
			Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				УстановитьПривилегированныйРежим(Истина);
				РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЗаданГрафикИсполнения, ГрафикИсполненияДоговора");
				УстановитьПривилегированныйРежим(Ложь);
				ЗаданГрафикИсполнения = РеквизитыДоговора.ЗаданГрафикИсполнения;
				СтруктураПараметров.ГрафикИсполненияДоговора = РеквизитыДоговора.ГрафикИсполненияДоговора;
			Иначе
				ЗаданГрафикИсполнения = Ложь;
				СтруктураПараметров.ГрафикИсполненияДоговора = Ложь;
			КонецЕсли;
			
			Если СтруктураПараметров.ЗаданГрафикИсполнения <> ЗаданГрафикИсполнения Тогда
				ИзменилсяГрафикИсполнения = Истина;
			КонецЕсли;
			
			СтруктураПараметров.ЗаданГрафикИсполнения = ЗаданГрафикИсполнения;
			
		КонецЕсли;
		
		//Порядок расчетов
		Если (МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ДоговорКомиссионера") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("НакладнаяПоЗаказам") <> Неопределено)
			И ЗначениеЗаполнено(СтруктураПараметров.ПорядокРасчетов)
			И ТипЗнч(СтруктураПараметров.ПорядокРасчетов) = Тип("Строка") 
			И СтрЧислоВхождений(СтруктураПараметров.ПорядокРасчетов, ".") = 1 Тогда
			
			ПорядокРасчетовПоУмолчанию = ПорядокРасчетовПоПараметрам(Форма, СтруктураПараметров);
			ПорядокРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ПорядокРасчетов);
			
			Если ПорядокРасчетов.Данные[ПорядокРасчетов.Имя]<> ПорядокРасчетовПоУмолчанию 
				ИЛИ ИзменилсяГрафикИсполнения Тогда
				СтарыеЗначенияИзмененныхРеквизитов.Вставить(ПорядокРасчетов.Имя, ПорядокРасчетов.Данные);
				ПорядокРасчетов.Данные[ПорядокРасчетов.Имя] = ПорядокРасчетовПоУмолчанию;
				
				Если МассивИспользуемыхРеквизитов.Найти("ПорядокРасчетов") = Неопределено Тогда
					МассивИспользуемыхРеквизитов.Добавить("ПорядокРасчетов");
				КонецЕсли;
				
				ОбновитьТекстГиперссылкиСостояниеРасчетов = Истина;
				ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
				УстановитьВидимостьЗачетОплаты = Истина;
			КонецЕсли;
			
			УстановитьВидимостьГФУНД = Истина;
			
		КонецЕсли;
		
		//ГФУ
		Если (МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("ДоговорКомиссионера") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено)
			И ЗначениеЗаполнено(СтруктураПараметров.ГруппаФинансовогоУчета) Тогда
			
			ГФУПоУмолчанию = ГФУПоУмолчанию(Форма, СтруктураПараметров, СистемныеНастройки);
			
			ГФУРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма,СтруктураПараметров.ГруппаФинансовогоУчета);
			ГФУРеквизит.Данные[ГФУРеквизит.Имя] = ГФУПоУмолчанию;
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("НакладнаяПоЗаказам") <> Неопределено Тогда
			УстановитьВидимостьЗачетОплаты = Истина;
			УстановитьВидимостьГФУНД = Истина;
			ОчиститьРасшифровкуПлатежа(Форма, СтруктураПараметров);
		КонецЕсли;
		
		//Оплата в валюте
		Если МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ДоговорКомиссионера") <> Неопределено Тогда
			
			ОплатаВВалютеПоУмолчанию = ОплатаВВалютеПоУмолчанию(Форма, СтруктураПараметров);
			ОплатаВВалюте = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ОплатаВВалюте);
			
			Если ОплатаВВалюте <> Неопределено И ОплатаВВалюте.Данные[ОплатаВВалюте.Имя]<> ОплатаВВалютеПоУмолчанию Тогда
				СтарыеЗначенияИзмененныхРеквизитов.Вставить(ОплатаВВалюте.Имя, ОплатаВВалюте.Данные);
				ОплатаВВалюте.Данные[ОплатаВВалюте.Имя] = ОплатаВВалютеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		//График оплаты
		Если МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено Или ИзменилсяГрафикИсполнения Тогда
			//Очистка графика этапов оплаты
			Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
				ОчиститьЭтапыГрафикаОплаты(Форма, СтруктураПараметров);
			ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
				Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ДатаПлатежа);
				Реквизит.Данные[Реквизит.Имя] = Дата(1,1,1);
			КонецЕсли;
			ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
		ИначеЕсли МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено И ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
			Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ДатаПлатежа);
			Реквизит.Данные[Реквизит.Имя] = Дата(1,1,1);
			ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты)
			И (МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("ДатаОтгрузки") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("ДатаСогласования") <> Неопределено) Тогда
			
			ЭтапыГрафика = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
			
			Если СтруктураПараметров.ЭтоЗаказ Тогда
				Если МассивИспользуемыхРеквизитов.Найти("ДатаОтгрузки") <> Неопределено Тогда
					ЭтапыГрафика.Очистить();
				Иначе
					Соглашение = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Соглашение);
					Если ЗначениеЗаполнено(Соглашение) Тогда
						Календарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "Календарь");
					Иначе
						Календарь = Справочники.ПроизводственныеКалендари.ПустаяСсылка();
					КонецЕсли; 
					
					ДатаСогласования = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаСогласования);
					ДатаЗаказа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
					
					Для Каждого СтрокаЭтапа Из ЭтапыГрафика Цикл
						Если СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования 
								И МассивИспользуемыхРеквизитов.Найти("ДатаСогласования") <> Неопределено
							ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа 
								И МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено Тогда
							ПараметрыРасчетаДатыПлатежа = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
							ПараметрыРасчетаДатыПлатежа.ВариантОтсчета                 = СтрокаЭтапа.ВариантОтсчета;
							ПараметрыРасчетаДатыПлатежа.Сдвиг                          = СтрокаЭтапа.Сдвиг;
							ПараметрыРасчетаДатыПлатежа.ДатаЗаказа                     = ДатаЗаказа;
							ПараметрыРасчетаДатыПлатежа.ДатаСогласования               = ДатаСогласования;
							ПараметрыРасчетаДатыПлатежа.ДатаОтгрузки                   = Дата(1,1,1);
							ПараметрыРасчетаДатыПлатежа.ДатаПереходаПраваСобственности = Дата(1,1,1);
							ПараметрыРасчетаДатыПлатежа.СрокПереходаПраваСобственности = 0;
							ПараметрыРасчетаДатыПлатежа.Календарь                      = Календарь;
							ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
							Если ЗначениеЗаполнено(Календарь)  Тогда
								СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(ПараметрыРасчетаДатыПлатежа);
							Иначе
								СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(ПараметрыРасчетаДатыПлатежа);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ЭтоПродажаЗакупка Тогда
				Соглашение = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Соглашение);
				Если ЗначениеЗаполнено(Соглашение) Тогда
					Календарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "Календарь");
				Иначе
					Календарь = Справочники.ПроизводственныеКалендари.ПустаяСсылка();
				КонецЕсли; 
				
				ДатаСогласования = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаСогласования);
				ДатаЗаказа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
				
				Для Каждого СтрокаЭтапа Из ЭтапыГрафика Цикл
					Если (СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки 
						ИЛИ СтрокаЭтапа.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки) 
							И МассивИспользуемыхРеквизитов.Найти("Дата") <> Неопределено Тогда
						ПараметрыРасчетаДатыПлатежа = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
						ПараметрыРасчетаДатыПлатежа.ВариантОтсчета                 = СтрокаЭтапа.ВариантОтсчета;
						ПараметрыРасчетаДатыПлатежа.Сдвиг                          = СтрокаЭтапа.Сдвиг;
						ПараметрыРасчетаДатыПлатежа.ДатаЗаказа                     = ДатаЗаказа;
						ПараметрыРасчетаДатыПлатежа.ДатаСогласования               = ДатаСогласования;
						ПараметрыРасчетаДатыПлатежа.ДатаОтгрузки                   = Дата(1,1,1);
						ПараметрыРасчетаДатыПлатежа.ДатаПереходаПраваСобственности = Дата(1,1,1);
						ПараметрыРасчетаДатыПлатежа.СрокПереходаПраваСобственности = 0;
						ПараметрыРасчетаДатыПлатежа.Календарь                      = Календарь;
						ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
						Если ЗначениеЗаполнено(Календарь)  Тогда
							СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(ПараметрыРасчетаДатыПлатежа);
						Иначе
							СтрокаЭтапа.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(ПараметрыРасчетаДатыПлатежа);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
				
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("Организация") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Соглашение") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Партнер") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Контрагент") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("НаправлениеДеятельности") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("Договор") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено Тогда
			
			
			ОчиститьОбъектИСуммуРасшифровкиПлатежа(Форма, СтруктураПараметров);
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("Организация") <> Неопределено Тогда
			
			Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма.Объект, СтруктураПараметров.Организация);
			ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ВалютаДокумента) И Не ЗначениеЗаполнено(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма.Объект, СтруктураПараметров.ВалютаДокумента)) Тогда
				Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ВалютаДокумента);
				Реквизит.Данные[Реквизит.Имя] = ВалютаРегламентированногоУчета;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов)
				И Не СтруктураПараметров.ВалютаВзаиморасчетовВСтроках
				И Не ЗначениеЗаполнено(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма.Объект, СтруктураПараметров.ВалютаВзаиморасчетов)) Тогда
				Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.ВалютаВзаиморасчетов);
				Реквизит.Данные[Реквизит.Имя] = ВалютаРегламентированногоУчета;
			КонецЕсли;
			
			ЕстьИзмененияВалют = Истина;
				
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаДокумента") <> Неопределено 
			ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаВзаиморасчетов") <> Неопределено Тогда
			
			МассивОчищаемыхПолейЭтапов = Новый Массив;
			Если МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено
				ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаДокумента") <> Неопределено Тогда
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаПлатежа");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаЗалогаЗаТару");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетов");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетовПоТаре");
			ИначеЕсли МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено 
				ИЛИ МассивИспользуемыхРеквизитов.Найти("СуммаВзаиморасчетов") <> Неопределено Тогда
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетов");
				МассивОчищаемыхПолейЭтапов.Добавить("СуммаВзаиморасчетовПоТаре");
			КонецЕсли;
			
			ОчиститьПоляЭтаповГрафикаОплаты(Форма, СтруктураПараметров, МассивОчищаемыхПолейЭтапов);
			ОчиститьСуммыВзаиморасчетовТЧ(Форма, СтруктураПараметров);
			
			Если НЕ ЭтоИзмененияМеханизма И ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетов) Тогда
				Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.СуммаВзаиморасчетов);
				Реквизит.Данные[Реквизит.Имя] = 0;
			КонецЕсли;
			
			ПроверитьЗаполнитьСуммыВзаиморасчетовВТабличнойЧасти(Форма, СтруктураПараметров);
			ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма,СтруктураПараметров);
			
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ДатаПлатежа") <> Неопределено Тогда
			ОбновитьТекстГиперссылкиЭтапыОплаты = Истина;
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ВалютаДокумента") <> Неопределено
			ИЛИ МассивИспользуемыхРеквизитов.Найти("ВалютаВзаиморасчетов") <> Неопределено Тогда
			ЕстьИзмененияВалют = Истина;
		КонецЕсли;
		
		Если МассивИспользуемыхРеквизитов.Найти("ПорядокРасчетов") <> Неопределено 
			ИЛИ ЕстьИзмененияВалют Тогда
			ОчиститьРасшифровкуПлатежа(Форма, СтруктураПараметров);
			УстановитьВидимостьЗачетОплаты = Истина;
			ОбновитьТекстГиперссылкиСостояниеРасчетов = Истина;
		КонецЕсли;
		
		Если ОбновитьТекстГиперссылкиОграничениеЗадолженности Тогда
			ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
		КонецЕсли;
		
		Если ОбновитьТекстГиперссылкиСостояниеРасчетов Тогда
			ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
		КонецЕсли;
		
		Если ОбновитьТекстГиперссылкиЭтапыОплаты Тогда
			ОбновитьТекстГиперссылкиЭтапыОплаты(Форма, СтруктураПараметров, СистемныеНастройки);
		КонецЕсли;
		
		Если УстановитьВидимостьЗачетОплаты Тогда
			УстановитьВидимостьЗачетОплаты(Форма, СтруктураПараметров);
		КонецЕсли;
		
		Если УстановитьВидимостьГФУНД Тогда
			УстановитьВидимостьГФУНД(Форма, СтруктураПараметров);
		КонецЕсли;
		
		//При изменении порядка расчетов проверить видимость ЗачетОплаты
		//При изменении суммы документа на форме, переформировывать надпись валюты, все гиперссылки
		//При изменении даты, даты банка, проведено банком, очистить суммы взаиморасчетов расшифровки
	КонецЦикла;
	
	Если НЕ ЭтоИзмененияМеханизма И ЕстьИзмененияВалют И ЗначениеЗаполнено(СтруктураПараметров.КурсЧислитель) Тогда
		СтарыеЗначенияИзмененныхРеквизитов.Вставить("КурсЧислитель", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, "Объект.КурсЧислитель"));    
		СтарыеЗначенияИзмененныхРеквизитов.Вставить("КурсЗнаменатель", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, "Объект.КурсЗнаменатель"));
		ЗаполнитьКурсКратностьПоУмолчанию(Форма, ДополненныеПараметрыМеханизма);
		ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма,СтруктураПараметров);
	КонецЕсли;
	
	Возврат СтарыеЗначенияИзмененныхРеквизитов;
	
КонецФункции

//Обновляет тексты гиперссылок, видимость команды "Зачет оплаты".
//Очищает все реквизиты взаиморасчетов, если документ более не изменяет взаиморасчеты.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 
Процедура ПриИзмененииПараметровМеханизма(Форма) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
	ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(Форма.Объект);
	
	ДанныеНастройки = ДополненныеПараметрыМеханизма(Форма, ПараметрыМеханизма);
	
	Если ДанныеНастройки.МассивПараметров.Количество() = Форма.КэшДанныхМеханизмов["Взаиморасчеты"].МассивПараметров.Количество() Тогда
		сч = 0;
		Пока сч < ДанныеНастройки.МассивПараметров.Количество() Цикл
			ИзмененныеПараметры = ОбщегоНазначенияУТ.ИзмененныеПараметры(ДанныеНастройки.МассивПараметров[сч], Форма.КэшДанныхМеханизмов["Взаиморасчеты"].МассивПараметров[сч]);
			
			Если ИзмененныеПараметры.Свойство("ТипРасчетов") Тогда
				ОчиститьРасшифровкуПлатежа(Форма,ДанныеНастройки.МассивПараметров[сч]);
			КонецЕсли;
			
			сч = сч + 1;
		КонецЦикла;
	Иначе
		Для Каждого Структура Из ДанныеНастройки.МассивПараметров Цикл
			ОчиститьРасшифровкуПлатежа(Форма, Структура);
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ДанныеНастройки);
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		// Очищаем все сущности механизма, если нет расчетов с клиентами или поставщиками.
		Если НЕ СтруктураПараметров.ИзменяетРасчеты Тогда
			
			СуммаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.СуммаВзаиморасчетов);
			Если ЗначениеЗаполнено(СуммаВзаиморасчетов) Тогда
				СуммаВзаиморасчетов.Данные[СуммаВзаиморасчетов.Имя] = 0;
			КонецЕсли;
			
			СуммаВзаиморасчетовПоТаре = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.СуммаВзаиморасчетовПоТаре);
			Если ЗначениеЗаполнено(СуммаВзаиморасчетовПоТаре) Тогда
				СуммаВзаиморасчетовПоТаре.Данные[СуммаВзаиморасчетовПоТаре.Имя] = 0;
			КонецЕсли;
			
			ОчиститьСуммыВзаиморасчетовТЧ(Форма, СтруктураПараметров);
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.ИзменяетПланОплаты
			// Возвраты товаров.
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.ГиперссылкаРасшифровкаПлатежа) Тогда
			Если НЕ СтруктураПараметров.ЗаказКакСчет Тогда
				ОчиститьЭтапыГрафикаОплаты(Форма, СтруктураПараметров);
			КонецЕсли;
			ОчиститьРасшифровкуПлатежа(Форма, СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьВидимостьЗачетОплаты(Форма);
	УстановитьВидимостьГФУНД(Форма);
	УстановитьВидимостьКолонкиСуммаВзаиморасчетов(Форма);
	ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
	ОбновитьТекстГиперссылкиЭтапыОплаты(Форма);
	ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма);
	
КонецПроцедуры

// Используется для обработке оповещений, связанных с механизмами взаиморасчетов.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	 * Объект - ДанныеФормы
// 	  ** Ссылка - ДокументСсылка, СправочникСсылка
// 	ИмяСобытия - Строка - Имя события.
// 	Параметр - Произвольный - Параметр события.
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр) Экспорт
	
	ОбъектФормы = Форма.Объект; //ДокументОбъект
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = ОбъектФормы.Ссылка) 
		Или ИзменилисьДокументыОплатыКлиентам(ИмяСобытия)
		Или ИзменилисьДокументыОплатыПоставщиком(ИмяСобытия) Тогда
		ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
		ВзаиморасчетыСервер.ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
		
		Параметры = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		Для Каждого Структура Из Параметры.МассивПараметров Цикл
			Структура.АдресРасшифровкаПлатежа = "";
		КонецЦикла;
		Если НЕ Форма.Модифицированность Тогда
			Форма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	//Обновить ограничение задолженности
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЭтапыОплаты

//Выполняет заполнение/очистку/перераспределение этапов графика оплат
//
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект, ФормаКлиентскогоПриложения - обрабатываемый объект.
// 	ПараметрыМеханизма - Структура, Массив - См. ВзаиморасчетыСервер.ПараметрыМеханизма(), требуется если передан Объект типа отличного от ФормаКлиентскогоПриложения.
// 	СистемныеНастройки - Структура - См. ВзаиморасчетыСервер.ДополненныеПараметрыМеханизма(), требуется если передан Объект типа отличного от ФормаКлиентскогоПриложения.
// 
Процедура ПроверитьЗаполнитьЭтапыГрафикаОплаты(Объект, ПараметрыМеханизма = Неопределено, СистемныеНастройки = Неопределено) Экспорт
	
	Если ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") И ПараметрыМеханизма = Неопределено Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		ПараметрыМеханизма = МенеджерОбъекта.ПараметрыВзаиморасчеты(Объект);
	КонецЕсли;
	
	Если ПараметрыМеханизма <> Неопределено И СистемныеНастройки <> Неопределено ИЛИ ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") Тогда
		ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, ПараметрыМеханизма);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Объект, "Взаиморасчеты");
	КонецЕсли;
	
	СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) И Не ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыДокумента = СуммыДокумента(Объект, СтруктураПараметров);
		
		ИзменяетПланОплаты            = СтруктураПараметров.ИзменяетПланОплаты ИЛИ СтруктураПараметров.ЗаказКакСчет;
		ЗаданГрафикИсполнения         = СтруктураПараметров.ЗаданГрафикИсполнения;
		ГрафикИсполненияДоговора      = СтруктураПараметров.ГрафикИсполненияДоговора;
		ЭтоПродажаЗакупка             = СтруктураПараметров.ЭтоПродажаЗакупка;
		ЭтоЗаказ                      = СтруктураПараметров.ЭтоЗаказ;
		
		ПорядокРасчетов           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
		Соглашение                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение);
		Если СистемныеНастройки.ИспользоватьГрафикиОплаты Тогда
			ГрафикОплаты          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ГрафикОплаты);
		Иначе
			ГрафикОплаты          = Справочники.ГрафикиОплаты.ПустаяСсылка();
		КонецЕсли;
		НакладнаяПоЗаказам        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НакладнаяПоЗаказам, , Ложь);
		
		ДатаДокумента             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		ДатаОтгрузки              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаОтгрузки);
		ДатаСогласования          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаСогласования);
		Если ЭтоЗаказ Тогда
			ДатаЗаказа            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		КонецЕсли;
		ДатаПереходаПраваСобственности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаПереходаПраваСобственности);
		
		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ГрафикСоглашенияЗаполнен = ЭтапыОплатыВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение);
		
		//Одна дата платежа
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
			
			ДатаПлатежаПоУмолчанию = Дата(1,1,1);
			
			Если ЗаданГрафикИсполнения И НЕ СтруктураПараметров.ЭтоЗаказ Тогда
				ДатаПлатежаПоУмолчанию = ЭтапыОплатыСервер.ДатаПервогоНеоплаченногоЭтапаГрафика(ГрафикИсполненияДоговора, ДатаДокумента);
			ИначеЕсли (ГрафикСоглашенияЗаполнен ИЛИ ЗначениеЗаполнено(ГрафикОплаты)) И НЕ СтруктураПараметров.ЭтоЗаказ Тогда
				ДатаПлатежаПоУмолчанию = ЭтапыОплатыСервер.ПолучитьПоследнююДатуПоГрафику(
					ДатаОтгрузки,Соглашение,ГрафикОплаты,ДатаЗаказа,ДатаСогласования,ДатаПереходаПраваСобственности);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаПлатежаПоУмолчанию) Тогда
				ДатаПлатежаПоУмолчанию = ДатаДокумента;
			КонецЕсли;
			
			Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ДатаПлатежа);
			
			Если НЕ ЗначениеЗаполнено(Реквизит.Данные[Реквизит.Имя]) Тогда
				Реквизит.Данные[Реквизит.Имя] = ДатаПлатежаПоУмолчанию;
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		//График оплаты
		ЭтапыОплатыРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		ЭтапыГрафикаОплаты = ЭтапыОплатыРеквизит.Данные[ЭтапыОплатыРеквизит.Имя];
		
		//Отклонения мерных товаров
		ЕстьОтклоненияМерныхТоваров = Ложь;
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЕстьОтклоненияМерныхТоваров = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0],"СуммаОтклоненияМерныхТоваров");
		КонецЕсли;
		
		Если ИзменяетПланОплаты
			И НЕ (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") И ЭтоЗаказ И НЕ ЭтоПродажаЗакупка)
			И НЕ (ЗаданГрафикИсполнения И ЭтоЗаказ
					И (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов")
						ИЛИ ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"))) Тогда
			
			СуммаЭтаповОплаты       = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
			Если ЭтапыГрафикаОплаты.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0], "СуммаЗалогаЗаТару") Тогда
				СуммаЗалогаПоЭтапам     = ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
			Иначе
				СуммаЗалогаПоЭтапам = 0;
			КонецЕсли;
			
			Если ЭтоПродажаЗакупка 
				И ЭтапыГрафикаОплаты.Количество() > 0 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0], "СуммаВзаиморасчетов")Тогда
				СуммаВзаиморасчетовЭтапы = ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетов");
			Иначе
				СуммаВзаиморасчетовЭтапы = 0;
			КонецЕсли;
			
			Если ЭтоПродажаЗакупка И ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетовПоТаре) Тогда
				СуммаВзаиморасчетовПоТареЭтапы = ЭтапыГрафикаОплаты.Итог("СуммаВзаиморасчетовПоТаре");
			Иначе
				СуммаВзаиморасчетовПоТареЭтапы = 0;
			КонецЕсли;
			
			Если ЕстьОтклоненияМерныхТоваров Тогда
				СуммаОтклоненияПоЭтапам = ЭтапыГрафикаОплаты.Итог("СуммаОтклоненияМерныхТоваров");
			Иначе
				СуммаОтклоненияПоЭтапам = 0;
			КонецЕсли;
			
			СуммаОтклоненияПоОплате = ?(СуммаЭтаповОплаты+СуммаЗалогаПоЭтапам = 0,0,
										Окр(СуммаОтклоненияПоЭтапам * СуммаЭтаповОплаты /(СуммаЭтаповОплаты+СуммаЗалогаПоЭтапам),2));
			
			КоличествоЭтапов = ЭтапыГрафикаОплаты.Количество();
			
			Если СуммыДокумента.СуммаДокументаБезЗалога = 0 И СуммыДокумента.СуммаЗалогаЗаТару = 0 И КоличествоЭтапов > 0 Тогда
				ЭтапыГрафикаОплаты.Очистить();
			ИначеЕсли СуммыДокумента.СуммаДокументаБезЗалога - СуммаОтклоненияПоОплате <> СуммаЭтаповОплаты
				ИЛИ СуммыДокумента.СуммаЗалогаЗаТару-(СуммаОтклоненияПоЭтапам - СуммаОтклоненияПоОплате) <> СуммаЗалогаПоЭтапам 
				ИЛИ СуммыДокумента.СуммаВзаиморасчетовБезЗалога <> СуммаВзаиморасчетовЭтапы 
				ИЛИ СуммыДокумента.СуммаВзаиморасчетовПоТаре <> СуммаВзаиморасчетовПоТареЭтапы Тогда
				
				//Заполнение
				Если КоличествоЭтапов = 0 Тогда
					
					//Накладная по заказам
					Если НЕ ЭтоЗаказ 
						И НакладнаяПоЗаказам И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
						И НЕ (ЗаданГрафикИсполнения И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
														ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным)) Тогда
						
						ЗаполнитьЭтапыОплатыДокументаПоЗаказам(Объект, СтруктураПараметров);
						
					//Заказ или накладная не по заказам
					Иначе
						
						ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты();
						ПараметрыЗаполнения.ЭтоРасчетыСКлиентами   = СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
						ПараметрыЗаполнения.НакладнаяПоЗаказам     = НакладнаяПоЗаказам;
						ПараметрыЗаполнения.ЭтоЗаказ               = СтруктураПараметров.ЭтоЗаказ;
						ПараметрыЗаполнения.НетКонтроляПредоплаты  = СтруктураПараметров.НетКонтроляПредоплаты;
						ПараметрыЗаполнения.ПорядокРасчетов        = ПорядокРасчетов;
						ПараметрыЗаполнения.ДатаЗаказа             = ДатаЗаказа;
						ПараметрыЗаполнения.ДатаСогласования       = ДатаСогласования;
						Если СтрЧислоВхождений(СтруктураПараметров.ДатаОтгрузки, ".") > 1 Тогда
							ТаблицаТовары = ТаблицаСуммПоЗаказам(Объект);
							ПараметрыЗаполнения.ДатаОтгрузки = ТаблицаТовары;
						Иначе
							ПараметрыЗаполнения.ДатаОтгрузки = ДатаОтгрузки;
						КонецЕсли;
						ПараметрыЗаполнения.ГрафикСоглашенияЗаполнен       = ГрафикСоглашенияЗаполнен;
						ПараметрыЗаполнения.ДатаПереходаПраваСобственности = ДатаПереходаПраваСобственности;
						ПараметрыЗаполнения.ЕстьДатаПереходаПраваСобственности = СтруктураПараметров.ЕстьДатаПереходаПраваСобственности;
						ПараметрыЗаполнения.Соглашение                     = Соглашение;
						ПараметрыЗаполнения.ГрафикИсполненияДоговора       = ГрафикИсполненияДоговора;
						ПараметрыЗаполнения.ГрафикОплаты                   = ГрафикОплаты;
						ПараметрыЗаполнения.СуммаОплаты                    = СуммыДокумента.СуммаДокументаБезЗалога;
						ПараметрыЗаполнения.СуммаЗалогаЗаТару              = СуммыДокумента.СуммаЗалогаЗаТару;
						ПараметрыЗаполнения.СуммаВзаиморасчетов            = СуммыДокумента.СуммаВзаиморасчетовБезЗалога;
						ПараметрыЗаполнения.СуммаВзаиморасчетовПоТаре      = СуммыДокумента.СуммаВзаиморасчетовПоТаре;
						
						ЭтапыОплатыСервер.ЗаполнитьЭтапыОплаты(
								ЭтапыГрафикаОплаты,
								ПараметрыЗаполнения);
								
					КонецЕсли;
				//Перераспределение сумм
				Иначе
						
					Если НакладнаяПоЗаказам 
						И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам
							ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов)
						//Заказ как счет - распределять ничего не нужно, т.к. заказ не делал движений
						И НЕ (СтруктураПараметров.ДокументРасчетовСКлиентами И НЕ Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Получить()) 
						И НЕ ЗаданГрафикИсполнения Тогда
						
						РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(Объект, СтруктураПараметров);
						
					Иначе
						
						ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
							ЭтапыГрафикаОплаты,
							СуммыДокумента.СуммаДокументаБезЗалога,
							СуммыДокумента.СуммаЗалогаЗаТару,
							СуммыДокумента.СуммаВзаиморасчетовБезЗалога,
							СуммыДокумента.СуммаВзаиморасчетовПоТаре);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЭтапыОплатыСервер.ЗаполнитьПроцентыПоСуммам(ЭтапыГрафикаОплаты);
				
			КонецЕсли;
			
			ДополненныеПараметрыМеханизма.ОповеститьОЗаполненииЭтапов = ИСТИНА;
			Если Не ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
				Объект.ДополнительныеСвойства.Вставить("ОповеститьОЗаполненииЭтапов", Истина);
			КонецЕсли;
			
		Иначе
			ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбновитьТекстГиперссылкиЭтапыОплаты(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьЭтапыОплатыВоВременноеХранилище(Форма, ИмяЭлемента) Экспорт
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, ИмяЭлемента);
	
	ЭтапыОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	ТЗ = ЭтапыОплаты.Выгрузить();
	
	Если ТЗ.Колонки.Найти("ВариантОплаты") = Неопределено Тогда
		Если СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ТЗ.Колонки.Добавить("ВариантОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыКонтроляОплатыКлиентом"));
			ТЗ.ЗаполнитьЗначения(Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки, "ВариантОплаты");
		Иначе
			ТЗ.Колонки.Добавить("ВариантОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыКонтроляОплатыПоставщику"));
			ТЗ.ЗаполнитьЗначения(Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления, "ВариантОплаты");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.АдресЭтапыОплаты = ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор());
	
	Если СтруктураПараметров.ИсточникСуммТабличнаяЧасть Тогда
		ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
		СтруктураПараметров.АдресСуммПоЗаказам = ПоместитьСуммыПоЗаказамВоВременноеХранилище(ДокументОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		СтруктураПараметров.СуммаРасшифровкиПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа).Итог("СуммаВзаиморасчетов");
	КонецЕсли;
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ПараметрыМеханизма);
	
КонецПроцедуры

Процедура ЗагрузитьЭтапыОплатыИзВременногоХранилища(Форма) Экспорт
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	МассивПараметров = ПараметрыМеханизма.МассивПараметров;
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		Если ЗначениеЗаполнено(СтруктураПараметров.АдресЭтапыОплаты) Тогда
			
			ЭтапыОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма,СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
			НовыеЭтапыОплаты = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресЭтапыОплаты);
			
			Если НовыеЭтапыОплаты <> Неопределено Тогда
				ЭтапыОплаты.Очистить();
				Для Каждого ТекСтрока Из НовыеЭтапыОплаты Цикл
					НоваяСтрока = ЭтапыОплаты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЦикла;
				УдалитьИзВременногоХранилища(СтруктураПараметров.АдресЭтапыОплаты);
				СтруктураПараметров.АдресЭтапыОплаты = "";
			КонецЕсли;
			
			ОбновитьТекстГиперссылкиЭтапыОплаты(Форма, СтруктураПараметров, ПараметрыМеханизма.СистемныеНастройки);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
// Служебная процедура, заполняет текст гиперссылки правил оплаты 
// 
// Параметры:
//	Форма       - ФормаКлиентскогоПриложения - Договор, указанный в документе:
//	 * Элементы - ЭлементыФормы - элементы вызывающей формы
//	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
//	СистемныеНастройки  - Структура - Системные настройки из дополненных параметров, если уже получены.
//
Процедура ОбновитьТекстГиперссылкиЭтапыОплаты(Форма, СтруктураПараметров = Неопределено, СистемныеНастройки = Неопределено) Экспорт
	
	Если СтруктураПараметров <> Неопределено И СистемныеНастройки <> Неопределено Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СтруктураПараметров);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		МассивПараметров = ДополненныеПараметрыМеханизма.МассивПараметров;
		СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.НадписьЭтапыОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.ИзменяетПланОплаты И НЕ СтруктураПараметров.ЗаказКакСчет Тогда
			Форма.Элементы[СтруктураПараметров.ЭлементыФормы.НадписьЭтапы].Видимость = Ложь;
		Иначе
			Форма.Элементы[СтруктураПараметров.ЭлементыФормы.НадписьЭтапы].Видимость = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
			ВзаиморасчетыКлиентСервер.ПроверитьОбязательныеПараметры(СтруктураПараметров, "ДатаПлатежа");
		КонецЕсли;
		
		Шаблон = ВзаиморасчетыКлиентСервер.ФорматируемаяСтрокаЭтаповОплаты(Форма, СтруктураПараметров, СистемныеНастройки);
		ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(Шаблон);
		
		Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Форма, СтруктураПараметров.НадписьЭтапыОплаты);
		Реквизит.Данные[Реквизит.Имя] = ФорматированнаяСтрока;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Добавляет команду отчета "Ведомость расчетов с клиентами" в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция ВедомостьРасчетовСКлиентами_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	
	КомандаОтчет = Неопределено;
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьРасчетовСКлиентами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ВедомостьРасчетовСКлиентами.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.ВедомостьРасчетовСКлиентами.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасчетыСКлиентами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.РасчетыСКлиентами.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.РасчетыСКлиентами.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			
		КонецЕсли;
	КонецЕсли;
	Возврат КомандаОтчет;
	
КонецФункции

// Добавляет команду отчета "Ведомость расчетов между организациями" в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция ВедомостьРасчетовМеждуОрганизациями_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	
	КомандаОтчет = Неопределено;
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьРасчетовМеждуОрганизациями) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ВедомостьРасчетовМеждуОрганизациями.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.ВедомостьРасчетовМеждуОрганизациями.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасчетыМеждуОрганизациями) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.РасчетыМеждуОрганизациями.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.РасчетыМеждуОрганизациями.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			
		КонецЕсли;
	КонецЕсли;
	Возврат КомандаОтчет;
	
КонецФункции

// Добавляет команду отчета "Ведомость расчетов с партнерами" в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция ВедомостьРасчетовСПартнерами_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	
	НазваниеОтчета = ?(Константы.ИспользоватьПартнеровКакКонтрагентов.Получить(), НСтр("ru = 'Ведомость расчетов с контрагентами'"), НСтр("ru = 'Ведомость расчетов с партнерами'"));
	
	КомандаОтчет = Неопределено;
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьРасчетовСПартнерами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ВедомостьРасчетовСПартнерами.ПолноеИмя();
			КомандаОтчет.Представление = НазваниеОтчета;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасчетыСПартнерами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.РасчетыСПартнерами.ПолноеИмя();
			КомандаОтчет.Представление = НазваниеОтчета;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			
		КонецЕсли;
	КонецЕсли;
	Возврат КомандаОтчет;
	
КонецФункции

// Добавляет команду отчета "Ведомость расчетов с поставщиками" в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция ВедомостьРасчетовСПоставщиками_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	
	КомандаОтчет = Неопределено;
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьРасчетовСПоставщиками) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ВедомостьРасчетовСПоставщиками.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.ВедомостьРасчетовСПоставщиками.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасчетыСПоставщиками) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.РасчетыСПоставщиками.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.РасчетыСПоставщиками.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			
		КонецЕсли;
	КонецЕсли;
	Возврат КомандаОтчет;
	
КонецФункции

// Добавляет команду отчета "Задолженность клиентов" в стандартном виде в список команд.
// Отчет группируется по партнерам.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция ЗадолженностьКлиентов_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗадолженностьКлиентов) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ЗадолженностьКлиентов.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.ЗадолженностьКлиентов.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентом");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКлиентами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентом");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Задолженность клиентов" в список команд. 
// Отчет группируется по объекту расчетов.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция ЗадолженностьКлиентов_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗадолженностьКлиентов) Тогда
		
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ЗадолженностьКлиентов.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.ЗадолженностьКлиентов.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентомПоДокументам");
			
			Возврат КомандаОтчет;
		
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКлиентами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентомПоДокументам");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Карточка расчетов с клиентом" в список команд.
// Группировка по партнеру/контрагенту
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция КарточкаРасчетовСКлиентом_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами24) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСКлиентами24.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.КарточкаРасчетовСКлиентами24.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "Карточка");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСКлиентом");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Карточка расчетов с клиентом" в список команд.
// Группировка по объекту расчетов.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция КарточкаРасчетовСКлиентом_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами24) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСКлиентами24.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.КарточкаРасчетовСКлиентами24.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "Карточка");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСКлиентомПоДокументам");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Задолженность поставщикам" в стандартном виде в список команд.
// Отчет группируется по партнерам.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция ЗадолженностьПоставщикам_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗадолженностьПоставщикам) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ЗадолженностьПоставщикам.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.ЗадолженностьПоставщикам.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщиком");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСПоставщиками) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеРасчетовСПоставщиками.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.СостояниеРасчетовСПоставщиками.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщиком");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Задолженность поставщикам" в список команд. 
// Отчет группируется по объекту расчетов.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция ЗадолженностьПоставщикам_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗадолженностьПоставщикам) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.ЗадолженностьПоставщикам.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.ЗадолженностьПоставщикам.Синоним;
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщикомПоДокументам");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСПоставщиками) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеРасчетовСПоставщиками.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.СостояниеРасчетовСПоставщиками.Синоним;
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщикомПоДокументам");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Карточка расчетов с поставщиком" в список команд.
// Группировка по партнеру/контрагенту.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция КарточкаРасчетовСПоставщиком_ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "Карточка");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками.Синоним;
			
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Обычное";
			КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСПоставщиком");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду отчета "Карточка расчетов с поставщиком" в список команд.
// Группировка по объекту расчетов.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
// 	- СтрокаТаблицыЗначений: см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
// 	- Неопределено - Если нет прав на просмотр отчета.
//
Функция КарточкаРасчетовСПоставщиком_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов) Экспорт
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24.Синоним;
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "Карточка");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	Иначе
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками) Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Менеджер = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками.ПолноеИмя();
			КомандаОтчет.Представление = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками.Синоним;
			КомандаОтчет.МножественныйВыбор = Истина;
			КомандаОтчет.Важность = "Важное";
			КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСПоставщикомПоДокументам");
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ЗачетОплатыРасшифровкаПлатежа

//Заполняет табличные части "Расшифровка платежа" остатками задолженности.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 
Процедура ЗаполнитьРасшифровкуПлатежаОстатками(Форма) Экспорт
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
		Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Контрагент);
		Дата = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Дата);
		Валюта = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
		РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
		
		ТипЗадолженности = ?(СтруктураПараметров.ДокументРасчетовСКлиентами, Перечисления.ТипыЗадолженности.Дебиторская, Перечисления.ТипыЗадолженности.Кредиторская);
		
		ЗаполнитьЗадолженностьПоОстаткам(
			Организация, 
			Контрагент,
			ТипЗадолженности,
			Неопределено, //ТипРасчетов
			Дата,
			Валюта,
			РасшифровкаПлатежа);
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			РасшифровкаПлатежа.Добавить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Помещает табличную часть Расшифровка платежа во временное хранилище и записывает ссылку на него в структуру параметров взаиморасчетов.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа/справочника.
// 	ИмяЭлемента - Строка - Имя элемента, по которому можно определить для какой структуры параметров взаиморасчетов помещается расшифровка.
//
Процедура ПоместитьРасшифровкуПлатежаВоВременноеХранилище(Форма, ИмяЭлемента = Неопределено) Экспорт
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	Если ИмяЭлемента <> Неопределено Тогда
		СтруктураПараметров = ВзаиморасчетыКлиентСервер.СтруктураПараметровПоИмениЭлемента(ПараметрыМеханизма.МассивПараметров, ИмяЭлемента);
	Иначе
		СтруктураПараметров = ПараметрыМеханизма.МассивПараметров[0];
	КонецЕсли;
	
	РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
	ТЗ = РасшифровкаПлатежа.Выгрузить();
	СтруктураПараметров.АдресРасшифровкаПлатежа = ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор());
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ПараметрыМеханизма);
	
КонецПроцедуры

Процедура ЗагрузитьРасшифровкуПлатежаИзВременногоХранилища(Форма) Экспорт
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	МассивПараметров = ПараметрыМеханизма.МассивПараметров;
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		Если ЗначениеЗаполнено(СтруктураПараметров.АдресРасшифровкаПлатежа) Тогда
			
			РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
			НоваяРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресРасшифровкаПлатежа);
			Копия = РасшифровкаПлатежа.Выгрузить();
			
			РасшифровкаПлатежа.Очистить();
			Для Каждого ТекСтрока Из НоваяРасшифровкаПлатежа Цикл
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Поставщик") 
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрока, "Партнер") Тогда
					НоваяСтрока.Поставщик = ТекСтрока.Партнер;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "СтатьяДвиженияДенежныхСредств") Тогда
					СтрокиКопии = Копия.НайтиСтроки(Новый Структура("ОбъектРасчетов", НоваяСтрока.ОбъектРасчетов));
					Если СтрокиКопии.Количество()> 0 Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтрокиКопии[0].СтатьяДвиженияДенежныхСредств;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			УдалитьИзВременногоХранилища(СтруктураПараметров.АдресРасшифровкаПлатежа);
			СтруктураПараметров.АдресРасшифровкаПлатежа = "";
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаблокироватьОбъектыРасчетов(Форма);
	
КонецПроцедуры

Процедура ОбновитьРаспределеннуюСуммаРасшифровки(Форма) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма,"РаспределеннаяСуммаРасшифровки") Тогда
		Возврат;
	КонецЕсли;
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	МассивПараметров = ДополненныеПараметрыМеханизма.МассивПараметров;
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		Организация            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
		ТипРасчетов            = СтруктураПараметров.ТипРасчетов;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
			ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СуммаРаспределнная = 0;
	
	Если ТЧ <> Неопределено Тогда
		ОбъектРасчетов = Новый Массив;
		ОбъектРасчетов.Добавить(ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Ссылка), Организация, ТипРасчетов));
		ОбъектРасчетов.Добавить(ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Договор), Организация, ТипРасчетов));
		Если ЗначениеЗаполнено( СтруктураПараметров.ЗаказОснование) Тогда
			ОбъектРасчетов.Добавить(ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
				ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ЗаказОснование), Организация, ТипРасчетов));
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Расшифровка.Сумма КАК Сумма,
		|	Расшифровка.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ВтРасшифровка 
		|ИЗ &ТЧ КАК Расшифровка
		|;
		|ВЫБРАТЬ
		|	СУММА(Расшифровка.Сумма) КАК Сумма
		|ИЗ
		|	ВтРасшифровка КАК Расшифровка
		|ГДЕ
		|	НЕ Расшифровка.ОбъектРасчетов В (&ОбъектРасчетов)
		|	И Расшифровка.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)");
		Запрос.УстановитьПараметр("ТЧ", ТЧ.Выгрузить());
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаРаспределнная =  Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Форма.РаспределеннаяСуммаРасшифровки = СуммаРаспределнная;
	
КонецПроцедуры

Процедура ЗаблокироватьОбъектыРасчетов(Форма) Экспорт
	
	РазблокироватьДанныеДляРедактирования(,Форма.УникальныйИдентификатор);
	
	ПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	МассивПараметров = ПараметрыМеханизма.МассивПараметров;
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
			РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
			Для Каждого Стр Из РасшифровкаПлатежа Цикл
				Если ЗначениеЗаполнено(Стр.ОбъектРасчетов) Тогда
					//@skip-warning
					Попытка
						ЗаблокироватьДанныеДляРедактирования(Стр.ОбъектРасчетов,,Форма.УникальныйИдентификатор);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГиперссылкаРасчеты

// Описание
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма) Экспорт
	
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.НадписьРасчеты) Тогда
			Продолжить;
		КонецЕсли;
		
		ПорядокРасчетов       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
		ВалютаВзаиморасчетов  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаВзаиморасчетов);
		НакладнаяПоЗаказам    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НакладнаяПоЗаказам, , Ложь);
		ЗаказОснование        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ЗаказОснование);
		ИзменяетРасчеты       = СтруктураПараметров.ИзменяетПланОплаты;
		ЭлементНадписьРасчеты = СтруктураПараметров.ЭлементыФормы.НадписьРасчеты;
		ЭтоЗаказ              = СтруктураПараметров.ЭтоЗаказ;
		ЭтоСправочник         = СтруктураПараметров.ЭтоСправочник;
		
		ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧ);
		СписокЗаказов = Новый Массив;
		Если ЗначениеЗаполнено(ТЧ) И ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧЗаказ) Тогда
			Заказы = ТЧ.Выгрузить(, СтруктураПараметров.ИмяРеквизитаТЧЗаказ).ВыгрузитьКолонку(СтруктураПараметров.ИмяРеквизитаТЧЗаказ);
			СписокЗаказов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Заказы);
			сч = 0;
			Пока сч < СписокЗаказов.Количество() Цикл
				Если Не ЗначениеЗаполнено(СписокЗаказов[сч]) Тогда
					СписокЗаказов.Удалить(сч);
				Иначе
					сч= сч + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементНадписьРасчеты) Тогда
			
			Элемент = Форма.Элементы[ЭлементНадписьРасчеты]; // ПолеФормы
			
			Если ИзменяетРасчеты 
				//Не заказ с расчетами по накладным
				И НЕ (ЭтоЗаказ И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
				//Не договор без графика
				И НЕ (ЭтоСправочник И НЕ ЗначениеЗаполнено(СтруктураПараметров.ГрафикИсполненияДоговора)) Тогда
					
				Если ЭтоСправочник Тогда
					
					Если НЕ ОтложенноеОбновлениеРегистровВзаиморасчетовЗавершено() Тогда
						Элемент.Заголовок = НСтр("ru = 'Данные недоступны, выполняется обновление ИБ.'");
						Элемент.Доступность = Ложь;
						Возврат;
					КонецЕсли;
					
					Если СтруктураПараметров.ДокументРасчетовСКлиентами Тогда
						СтрокаОтгружено = НСтр("ru = 'Отгружено'");
					Иначе
						СтрокаОтгружено = НСтр("ru = 'Поступило'");
					КонецЕсли;
				
					СостояниеВзаиморасчетов = ВзаиморасчетыСервер.СостояниеВзаиморасчетов(Форма, СтруктураПараметров);
					СуммаОплат   = СостояниеВзаиморасчетов.СуммаОплат;
					ПроцентОплат = Окр(СостояниеВзаиморасчетов.ПроцентОплат,2);
					СуммаОтгрузокПоставок = СостояниеВзаиморасчетов.СуммаОтгрузок + СостояниеВзаиморасчетов.СуммаПоставок;
					ПроцентОтгрузкиПоставки = СостояниеВзаиморасчетов.ПроцентОтгрузок + СостояниеВзаиморасчетов.ПроцентПоставок;
				
					Расчеты = НСтр("ru = 'Оплачено'") + ": " + Формат(СуммаОплат, "ЧДЦ=2; ЧН=") 
						+ " " + ВалютаВзаиморасчетов + "  " + ПроцентОплат + "%";
					Элемент.Заголовок = Расчеты + ", " + СтрокаОтгружено + ": " + Формат(СуммаОтгрузокПоставок, "ЧДЦ=2; ЧН=") 
						+ " " + ВалютаВзаиморасчетов + "  " + ПроцентОтгрузкиПоставки + "%";
					
				ИначеЕсли ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					Элемент.Заголовок = НСтр("ru = 'Расчеты по договору'");
				ИначеЕсли ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным И ЭтоЗаказ Тогда
					Элемент.Заголовок = НСтр("ru = 'Расчеты по договору и накладным'");
				Иначе
					
					Если НЕ ОтложенноеОбновлениеРегистровВзаиморасчетовЗавершено() Тогда
						Элемент.Заголовок = НСтр("ru = 'Данные недоступны, выполняется обновление ИБ.'");
						Элемент.Доступность = Ложь;
						Возврат;
					КонецЕсли;
					
					СостояниеВзаиморасчетов = ВзаиморасчетыСервер.СостояниеВзаиморасчетов(Форма, СтруктураПараметров);
					СуммаОплат   = СостояниеВзаиморасчетов.СуммаОплат;
					ПроцентОплат = Окр(СостояниеВзаиморасчетов.ПроцентОплат,2);
					
					Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам И НакладнаяПоЗаказам И ЗначениеЗаполнено(ЗаказОснование)
						ИЛИ ЭтоЗаказ Тогда
						Элемент.Заголовок = НСтр("ru = 'Оплачено по заказу:'") + " " + Формат(СуммаОплат, "ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетов + " " + ПроцентОплат + "%";
					ИначеЕсли СписокЗаказов.Количество() > 1 И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Тогда
						Элемент.Заголовок = НСтр("ru = 'Расчеты по заказам ('")+ Строка(СписокЗаказов.Количество()) + ")";
					Иначе
						Элемент.Заголовок = НСтр("ru = 'Оплачено'") + ": " + Формат(СуммаОплат, "ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетов + " " + ПроцентОплат + "%";
					КонецЕсли;
				
				КонецЕсли;
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ЭлементНадписьРасчеты, "Видимость", Истина);
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ЭлементНадписьРасчеты, "Видимость", Ложь);
			КонецЕсли;
		
			Если СтруктураПараметров.ДокументРасчетовСКлиентами Тогда
				Элемент.Доступность = ПравоДоступа("Использование", Метаданные.Отчеты.КарточкаРасчетовСКлиентами24);
			ИначеЕсли СтруктураПараметров.ДокументРасчетовСПоставщиками Тогда
				Элемент.Доступность = ПравоДоступа("Использование", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками24);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

#Область РасчетыСКлиентами

// Дополняет тексты запроса проведения документа текстами проведения графика исполнения договора  с клиентом по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПланыОплат - Строка - Текст запроса получения данных плановой оплаты документа.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов - договор.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыКонтроляОплатыКлиентом - Вариант оплаты.
// 	     * КОплате - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма плановой оплаты.
// 	     * ИсключатьПриКонтроле - Булево - Флаг контроля суммы плановой оплаты при проведении.
// 	ТекстПланыОтгрузок - Строка - Текст запроса получения данных плановой отгрузки документа.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов - договор.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ДатаОтгрузки - Дата - Плановая дата оплаты.
// 	     * КОтгрузке - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма плановой отгрузки.
// 
Процедура ПроведениеГрафикаИсполненияДоговораСКлиентом(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыОтгрузок) Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ГрафикИсполненияКлиент";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыКлиентом");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОтгрузкиКлиенту");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыКлиентом", ТекстПланыОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыОтКлиента(Запрос, Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОтгрузкиКлиенту", ТекстПланыОтгрузок);
	МассивТекстов.Добавить(УвеличитьПланОтгрузкиКлиенту(Запрос, Операция));
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения заказа клиента по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПланыОплат - Строка - Текст запроса получения данных для отражения плана оплат.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты механизма]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты всего документа/этапа оплаты.
// 	     * ИсключатьПриКонтроле - Булево - Исключить ли проверку на наличие оплаты по данной строке движений.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыКонтроляОплатыКлиентом - Вариант оплаты этапа графика.
// 	     * КОплате - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма к оплате в валюте взаиморасчетов (с учетом залога за тару).
// 	     * СуммаОтклоненияМерныхТоваров - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма отклонения мерных товаров в валюте взаиморасчетов к оплате.
// 	ТекстПланыОтгрузок - Строка - Текст запроса получения данных документа для отражения плана отгрузки.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты документа]
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ДатаОтгрузки - Дата - Плановая дата отгрузки строки/документа.
// 	     * КОтгрузке - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма к отгрузке в валюте взаиморасчетов (с учетом залога за тару).
// 	     * УвеличитьОтгружается - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма увеличения Отгружается.
// 
Процедура ПроведениеЗаказаКлиента(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыОтгрузок) Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ЗаказКлиента";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыКлиентом");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОтгрузкиКлиенту");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыКлиентом", ТекстПланыОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыОтКлиента(Запрос, Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОтгрузкиКлиенту", ТекстПланыОтгрузок);
	МассивТекстов.Добавить(УвеличитьПланОтгрузкиКлиенту(Запрос, Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОтгружается", ТекстПланыОтгрузок);
	МассивТекстов.Добавить(УвеличитьОтгружается(Операция));
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения продажи и переноса расчетов по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПродажа - Строка - Текст запроса получения данных продажи и плановых дат ее погашения.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты продажи.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыКонтроляОплатыКлиентом - Вариант оплаты продажи.
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * СверхЗаказа - Булево - Это отгрузка сверх заказа.
// 	     * ЗаказПродажи - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, ДокументСсылка.ЗаказДавальца, Неопределено - Заказ, по которому происходит продажа.
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте взаиморасчетов.
// 	     * СуммаВзаиморасчетовПоТаре - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма залога за тару в валюте взаиморасчетов.
// 	     * СвязанныйДокумент - ДокументСсылка.РеализацияТоваровУслуг,
// 	                           ДокументСсылка.РеализацияУслугПрочихАктивов - Связанный документ корректировки для определения курса отражения.
// 	ТекстПланОплат - Строка - Текст запроса получения данных увеличения планов оплат.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыКонтроляОплатыКлиентом - Вариант оплаты плана оплаты.
// 	     * ИсключатьПриКонтроле - Булево - Исключить ли проверку на наличие оплаты по данной строке движений.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * СверхЗаказа - Булево - Это отгрузка сверх заказа.
// 	     * ЗаказПродажи - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, ДокументСсылка.ЗаказДавальца, Неопределено - Заказ, по которому происходит продажа.
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * КОплате - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма к оплате в валюте взаиморасчетов.
// 	ТекстПереносАванса - Строка - Необязательный. Текст запроса получения данных зачтенных авансов.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ОбъектРасчетовИсточник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов аванса.
// 	     * ОбъектРасчетовПриемник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция переноса или резервирования аванса.
// 	     [Реквизиты документа]
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте взаиморасчетов.
// 	ТекстТовары - Строка - Текст запроса получения данных табличной части Товары - изменяет планы отгрузки и "отгружается".
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * ЗаказПродажи - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, ДокументСсылка.ЗаказДавальца, Неопределено - Заказ, по которому происходит продажа.
// 	     * СверхЗаказа - Булево - Это отгрузка сверх заказа.
// 	     * ДатаОтгрузки - Дата - Плановая дата отгрузки.
// 	     * КОтгрузке - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма увеличения плана к отгрузке в валюте взаиморасчетов.
// 	     * УвеличитьОтгружается - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма увеличения "Отгружается".
// 	     * УменьшитьОтгружается - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма, на которую следует уменьшить ресурс "Отгружается". 
// 	     Ресурс используется для контроля максимальной допустимой суммы задолженности. Т.е. если заказ уже увеличил Отгружается, то это значит, что отгрузка в процессе и сумма заказа войдет в сумму контролируемой задолженности.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма взаиморасчетов по строке товаров, по не будет уменьшен план отгрузки.
// 	     * ЗалогЗаТару - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма залога за тару.
// 	ТекстОплата - Строка - Необязательный. Текст запроса получения данных зачета продажи на отгрузки управленческой организации.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов по управленческой организации.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации -  Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте взаиморасчетов.
// 	     * КОплате - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма уменьшения плана оплаты по объекту управленческой организации.
//
Процедура ПроведениеПродажи(Запрос, ТекстыЗапроса, Регистры, ТекстПродажа, ТекстПланОплат, ТекстПереносАванса = "", ТекстТовары = "", ТекстОплата = "") Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "Продажа";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	// Курсы валют на даты документов
	ТаблицыДляКурсов = Новый Массив();
	ТаблицыДляКурсов.Добавить("УвеличениеЗадолженностиКлиента");
	Если ТекстОплата <> "" Тогда
		ТаблицыДляКурсов.Добавить("ТаблицаОплатаОтКлиента");
	КонецЕсли;
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, ТаблицыДляКурсов);
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютКлиент", ТекстКурсы);
	
	// Перенос задолженности по центральному договору
	ТекстыШаблоновВТ.Вставить("втПереносРасчетовКлиент", ТекстВтПереносаРасчетов());
	
	// Направления деятельности для проведения
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	Если ЗначениеЗаполнено(ТекстПереносАванса) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа", "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник");
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа", "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник");
	КонецЕсли;
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыКлиентом");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеЗадолженностиКлиента");
	Если ЗначениеЗаполнено(ТекстТовары) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОтгрузкиКлиенту");
		ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеПланаОтгрузкиКлиенту",
			"(ВЫБОР
			|		КОГДА УменьшениеПланаОтгрузкиКлиенту.НакладнаяПоЗаказам
			|			ТОГДА УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи.ОбъектРасчетов
			|		КОГДА УменьшениеПланаОтгрузкиКлиенту.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
			|			ТОГДА УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор.ОбъектРасчетов
			|		ИНАЧЕ УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов
			|	КОНЕЦ)");
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстОплата) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаОплатаОтКлиента");
	КонецЕсли;
	
	ДобавитьИсточник(ТаблицыИсточникиНД, "ПереносРасчетов", "ПереносРасчетов.ОбъектРасчетовИсточник");
	ДобавитьИсточник(ТаблицыИсточникиНД, "ПереносРасчетов", "ПереносРасчетов.ОбъектРасчетовПриемник");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстНД = СтрЗаменить(ТекстНД, "#ПереносРасчетов", "втПереносРасчетовКлиент");
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	// Зачет аванса
	Если ЗначениеЗаполнено(ТекстПереносАванса) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежа", ТекстПереносАванса);
		МассивТекстов.Добавить(ОтразитьПереносРасчетовСКлиентом(Запрос, Операция)); //Перенос авансов по накладным
	КонецЕсли;
	
	// Перенос задолженности по центральному договору
	МассивТекстов.Добавить(ОтразитьПереносРасчетовСКлиентом(Запрос, "ПереносПродажи"));
	
	// Увеличение плана оплат
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыКлиентом", ТекстПланОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыОтКлиента(Запрос, Операция));
	
	// Увеличение задолженности клиента
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеЗадолженностиКлиента", ТекстПродажа);
	МассивТекстов.Добавить(УвеличитьЗадолженностьКлиента(Операция));
	
	Если ЗначениеЗаполнено(ТекстТовары) Тогда
		
		// Уменьшение Отгружается
		ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеОтгружается", ТекстТовары);
		МассивТекстов.Добавить(УменьшитьОтгружается(Запрос));
		
		// Уменьшение плана отгрузки
		ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОтгрузкиКлиенту", ТекстТовары);
		МассивТекстов.Добавить(УменьшитьПланОтгрузкиКлиенту(Запрос));
		
		// Увеличение плана отгрузки - сверх заказа
		ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОтгрузкиКлиенту", ТекстТовары);
		МассивТекстов.Добавить(УвеличитьПланОтгрузкиКлиенту(Запрос, Операция));
		
		// Увеличение Отгружается - сверх заказа
		ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОтгружается", ТекстТовары);
		МассивТекстов.Добавить(УвеличитьОтгружается(Операция));
		
	КонецЕсли;
	
	// Уменьшение плана оплаты
	ТекстУменьшениеПланаОплаты = "";
	
	// Уменьшение плана оплаты по заказам на сумму постоплаты
	Если ЗначениеЗаполнено(ТекстПереносАванса) И ЗначениеЗаполнено(ТекстТовары) Тогда
		ТекстУменьшениеПланаОплаты = ТекстУменьшениеПланаОплаты + УменьшениеПланаОплатыКлиентаПриПродаже();
	КонецЕсли;
	
	// Уменьшение плана оплаты по упр орг при проведении реализации только регл
	Если ЗначениеЗаполнено(ТекстОплата) Тогда
		
		Если ТекстУменьшениеПланаОплаты <> "" Тогда
			ТекстУменьшениеПланаОплаты = ТекстУменьшениеПланаОплаты + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		ТекстУменьшениеПланаОплаты = ТекстУменьшениеПланаОплаты + ТекстОплата;
	КонецЕсли;
	
	// Уменьшение плана оплаты по заказам при уточнении.
	Если ТекстУменьшениеПланаОплаты <> "" Тогда
		ТекстыШаблоновВТ.Вставить("УменьшениеПланаОплатыОтКлиента", ТекстУменьшениеПланаОплаты);
		МассивТекстов.Добавить(УменьшитьПланОплатыОтКлиента(Операция));
	КонецЕсли;
	
	// Увеличение задолженности по упр организации при проведении реализации только регл
	Если ЗначениеЗаполнено(ТекстОплата) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаОплатаОтКлиента", ТекстОплата);
		МассивТекстов.Добавить(УвеличитьНашуЗадолженностьКлиенту(Операция));
	КонецЕсли;
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения оплаты от клиента по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстОплата - Строка - Текст запроса получения данных оплаты.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, по которому производится платеж.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма оплаты в валюте взаиморасчетов.
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте документа.
// 	     * Оплачивается - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма увеличения "Оплачивается".
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	     * СчетНаОплату - ДокументСсылка.СчетНаОплатуКлиенту - Счет, по которому производится оплата.
// 	     * СвязанныйДокумент - ДокументСсылка.РеализацияТоваровУслуг,
// 	                           ДокументСсылка.РеализацияУслугПрочихАктивов - Связанный документ корректировки для определения курса отражения.
// 	     * ИдентификаторФинЗаписи - Строка - Строка со значением уникального идентификатора шапки или строки документа.
// 	     * НастройкаХозяйственнойОперации - СправочникСсылка.НастройкиХозяйственныхОпераций - Настройка хозяйственной операции документа.
//
Процедура ПроведениеОплатыОтКлиента(Запрос, ТекстыЗапроса, Регистры, ТекстОплата) Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		Возврат;
	КонецЕсли; 
	
	Операция = "ОплатаОтКлиента";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	// Перенос платежа по центральному договору
	ТекстыШаблоновВТ.Вставить("втПереносРасчетовКлиент", ТекстВтПереносаРасчетов("ТаблицаОплатаОтКлиента"));
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеПланаОплатыОтКлиента");
	
	ДобавитьИсточник(ТаблицыИсточникиНД, "ПереносРасчетов", "ПереносРасчетов.ОбъектРасчетовИсточник");
	ДобавитьИсточник(ТаблицыИсточникиНД, "ПереносРасчетов", "ПереносРасчетов.ОбъектРасчетовПриемник");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстНД = СтрЗаменить(ТекстНД, "#ПереносРасчетов", "втПереносРасчетовКлиент");
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, "ТаблицаОплатаОтКлиента");
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютКлиент", ТекстКурсы);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	// Перенос платежа по центральному договору
	МассивТекстов.Добавить(ОтразитьПереносРасчетовСКлиентом(Запрос, "ПереносПлатежа"));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОплатыОтКлиента", ТекстОплата);
	МассивТекстов.Добавить(УменьшитьПланОплатыОтКлиента(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаОплатаОтКлиента", ТекстОплата);
	МассивТекстов.Добавить(УвеличитьНашуЗадолженностьКлиенту(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОплачиваетсяКлиентом", ТекстОплата);
	МассивТекстов.Добавить(УвеличитьОплачиваетсяКлиентом(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеОплачиваетсяКлиентом", ТекстОплата);
	МассивТекстов.Добавить(УменьшитьОплачиваетсяКлиентом(Операция));
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения заявки на возврат ДС клиенту по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстВзаиморасчеты - Строка - Текст запроса получения данных документа.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, по которому планируется платеж.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Оплачивается - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма уменьшения "Оплачивается" (планирование возврата).
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС
// 
Процедура ПроведениеЗаявкиНаВозвратОплатыКлиенту(Запрос, ТекстыЗапроса, Регистры, ТекстВзаиморасчеты) Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ЗаявкаНаВозвратОплатыКлиенту";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеОплачиваетсяКлиентом");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеОплачиваетсяКлиентом", ТекстВзаиморасчеты);
	ТекстРасчетыСКлиентами = УменьшитьОплачиваетсяКлиентом(Операция);
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения возврата оплаты клиенту по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстЗадолженность - Строка - Текст запроса получения данных платежа.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов возврата.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма возврата в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма возврата в валюте взаиморасчетов.
// 	     * СуммаУвеличениеОплачивается - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма оплачивается.
// 	     * ИдентификаторФинЗаписи - Строка - Строка со значением уникального идентификатора шапки или строки документа.
// 	     * НастройкаХозяйственнойОперации - СправочникСсылка.НастройкиХозяйственныхОпераций - Настройка хозяйственной операции документа.
// 	ТекстПереносРасчетов - Строка - Текст запроса получения данных зачета возврата ДС клиенту на объекты расчетов расшифровки.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ОбъектРасчетовИсточник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, по которому возвращаются денежные средства.
// 	     * ОбъектРасчетовПриемник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов возврата.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте взаиморасчетов.
// 	ТекстОплачивается - Строка - Текст запроса получения данных возврата, по которым необходимо уменьшить "Оплачивается".
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, по которому следует уменьшить "Оплачивается", обычно объект расчетов расшифровки.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * Оплачивается - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма уменьшения "Оплачивается".
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	     * ЗаявкаНаРасходованиеДенежныхСредств - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - Если возврат происходит по заявке.
// 
Процедура ПроведениеВозвратаОплатыКлиенту(Запрос, ТекстыЗапроса, Регистры, ТекстЗадолженность, ТекстПереносРасчетов = "", ТекстОплачивается = "") Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ВозвратОплатыКлиенту";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеЗадолженностиКлиента");
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа", "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник");
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа", "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник");
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстОплачивается) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеОплачиваетсяКлиентом");
	КонецЕсли;
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, "УвеличениеЗадолженностиКлиента");
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютКлиент", ТекстКурсы);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеЗадолженностиКлиента", ТекстЗадолженность);
	МассивТекстов.Добавить(УвеличитьЗадолженностьКлиента(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыКлиентом", ТекстЗадолженность);
	МассивТекстов.Добавить(УвеличитьПланОплатыОтКлиента(Запрос, Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОплачиваетсяКлиентом", ТекстЗадолженность);
	МассивТекстов.Добавить(УвеличитьОплачиваетсяКлиентом(Операция));
	
	// Перенос аванса
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежа", ТекстПереносРасчетов);
		МассивТекстов.Добавить(ОтразитьПереносРасчетовСКлиентом(Запрос, Операция));
	КонецЕсли;
	
	// Уменьшить оплачивается
	Если ЗначениеЗаполнено(ТекстОплачивается) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеОплачиваетсяКлиентом", ТекстОплачивается);
		МассивТекстов.Добавить(УменьшитьОплачиваетсяКлиентом(Операция));
	КонецЕсли;
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения возврата товаров(ценностей) от клиента по регистру Расчеты с клиентами.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстВозврат - Строка - Текст запроса получения данных документа возврата. Отражает сам возврат товаров.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * Организация - СправочникСсылка.Организации - Организация возврата товаров.
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов возврата товаров.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз операция документа.
// 	     [Реквизиты документа]
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма возврата в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма возврата в валюте взаиморасчетов.
// 	     * КОплате - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма возврата в валюте взаиморасчетов, на которую следует уменьшить план оплаты клиента.
// 	ТекстПереносРасчетов - Строка - Текст запроса получения данных расшифровки платежа. Отражает зачет возврата на другие объекты расчетов.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетовИсточник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов возврата товаров.
// 	     * ОбъектРасчетовПриемник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, на который делается зачет.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов объекта расчетов, на который производится перенос.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз операция документа.
// 	     [Реквизиты табличной части]
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма переноса в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма переноса в валюте взаиморасчетов.
//
Процедура ПроведениеВозвратаОтКлиента(Запрос, ТекстыЗапроса, Регистры, ТекстВозврат, ТекстПереносРасчетов = "") Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ВозвратТоваров";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыДляКурсов = Новый Массив;
	ТаблицыДляКурсов.Добавить("ТаблицаОплатаОтКлиента");
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ТаблицыДляКурсов.Добавить("ТаблицаРасшифровкаПлатежа");
	КонецЕсли;
	
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, ТаблицыДляКурсов);
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютКлиент", ТекстКурсы);
	
	// Перенос задолженности по центральному договору
	ТекстыШаблоновВТ.Вставить("втПереносРасчетовКлиент", ТекстВтПереносаРасчетов("ТаблицаОплатаОтКлиента"));
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаОплатаОтКлиента");
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа", "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник");
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежа", "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник");
	КонецЕсли;
	
	ДобавитьИсточник(ТаблицыИсточникиНД, "ПереносРасчетов", "ПереносРасчетов.ОбъектРасчетовИсточник");
	ДобавитьИсточник(ТаблицыИсточникиНД, "ПереносРасчетов", "ПереносРасчетов.ОбъектРасчетовПриемник");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстНД = СтрЗаменить(ТекстНД, "#ПереносРасчетов", "втПереносРасчетовКлиент");
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиКлиент", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	УстановитьПараметрыЗапроса(Запрос);
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	// Перенос задолженности по центральному договору
	МассивТекстов.Добавить(ОтразитьПереносРасчетовСКлиентом(Запрос, "ПереносВозврата"));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОплатыОтКлиента", ТекстВозврат);
	МассивТекстов.Добавить(УменьшитьПланОплатыОтКлиента(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаОплатаОтКлиента", ТекстВозврат);
	МассивТекстов.Добавить(УвеличитьНашуЗадолженностьКлиенту(Операция));
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежа", ТекстПереносРасчетов);
		МассивТекстов.Добавить(ОтразитьПереносРасчетовСКлиентом(Запрос, Операция));
	КонецЕсли;
	
	ТекстРасчетыСКлиентами = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСКлиентами", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСКлиентами", ТекстРасчетыСКлиентами);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетыСПоставщиками

// Дополняет тексты запроса проведения документа текстами проведения графика исполнения договора с поставщиком
// по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПланыОплат - Строка - Текст запроса получения данных для отражения плана оплат поставщику.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов договор.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты механизма]
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты этапа.
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма к оплате в валюте взаиморасчетов. 
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыКонтроляОплатыПоставщику - Вариант оплаты этапа графика.
// 	ТекстПланыПоставок - Строка - Текст запроса получения данных документа для отражения плана поставки.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты документа]
// 	     * ДатаПоступления - Дата - Плановая дата поставки строки/документа.
// 	     * КПоступлению - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма к поступлению в валюте взаиморасчетов.
//
Процедура ПроведениеГрафикаИсполненияДоговораСПоставщиком(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыПоставок) Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ГрафикИсполненияПоставщик";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыПоставщику");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаПоставки");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыПоставщику", ТекстПланыОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаПоставки", ТекстПланыПоставок);
	МассивТекстов.Добавить(УвеличитьПланПоставкиОтПоставщика(Операция));
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения заказа поставщику по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПланыОплат - Строка - Текст запроса получения данных для отражения плана оплат поставщику.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты механизма]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты всего документа/этапа оплаты.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыКонтроляОплатыПоставщику - Вариант оплаты этапа графика.
// 	     * КОплате - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма к оплате в валюте взаиморасчетов (с учетом залога за тару).
// 	ТекстПланыПоставок - Строка - Текст запроса получения данных документа для отражения плана отгрузки.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     [Реквизиты документа]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ДатаПоступления - Дата - Плановая дата поставки строки/документа.
// 	     * КПоступлению - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма к поступлению в валюте документа (с учетом залога за тару).
// 
Процедура ПроведениеЗаказаПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыПоставок) Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ЗаказПоставщику";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыПоставщику");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаПоставки");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыПоставщику", ТекстПланыОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаПоставки", ТекстПланыПоставок);
	МассивТекстов.Добавить(УвеличитьПланПоставкиОтПоставщика(Операция));
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения оплаты поставщику по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстОплата - Строка - Текст запроса получения данных оплаты.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, по которому производится платеж.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * ИдентификаторФинЗаписи - Строка - Идентификатор финансового движения для организации двойной записи.
// 	     * НастройкаХозяйственнойОперации - СправочникСсылка.НастройкиХозяйственныхОпераций - Настройка отражения хозяйственной операции в фин. учете.
// 	     [Реквизиты документа]
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма платежа в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма платежа в валюте взаиморасчетов.
// 	     * УменьшениеОплачивается - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма к уменьшению "Оплачивается", например, при оплате по заявке.
// 	     * УвеличениеОплачивается - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма к увеличению "Оплачивается", например, когда платежка проведена в системе, но не подтверждена банком.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	     * ЗаявкаНаРасходованиеДенежныхСредств - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - Заявка, по которой происходит оплата.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * ИдентификаторФинЗаписи - Строка - Строка со значением уникального идентификатора шапки или строки документа.
// 	     * НастройкаХозяйственнойОперации - СправочникСсылка.НастройкиХозяйственныхОпераций - Настройка хозяйственной операции документа.
//
Процедура ПроведениеОплатыПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстОплата) Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ОплатаПоставщику";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	//Перенос платежа по центральному договору
	ТекстыШаблоновВТ.Вставить("втПереносРасчетовПоставщик", ТекстВтПереносаРасчетов("УвеличениеЗадолженностиПоставщика"));
	
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, "УвеличениеЗадолженностиПоставщика");
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютПоставщик", ТекстКурсы);
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеПланаОплатыПоставщику");
	
	ДобавитьИсточник(ТаблицыИсточникиНД, "ПереносРасчетов", "ПереносРасчетов.ОбъектРасчетовИсточник");
	ДобавитьИсточник(ТаблицыИсточникиНД, "ПереносРасчетов", "ПереносРасчетов.ОбъектРасчетовПриемник");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстНД = СтрЗаменить(ТекстНД, "#ПереносРасчетов", "втПереносРасчетовПоставщик");
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	//Перенос платежа по центральному договору
	МассивТекстов.Добавить(ОтразитьПереносРасчетовСПоставщиком(Запрос, "ПереносПлатежа"));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОплатыПоставщику", ТекстОплата);
	МассивТекстов.Добавить(УменьшитьПланОплатыПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеЗадолженностиПоставщика", ТекстОплата);
	МассивТекстов.Добавить(УвеличитьЗадолженностьПоставщика(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОплачиваетсяПоставщику", ТекстОплата);
	МассивТекстов.Добавить(УвеличитьОплачиваетсяПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеОплачиваетсяПоставщику", ТекстОплата);
	МассивТекстов.Добавить(УменьшитьОплачиваетсяПоставщику());
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения закупки по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстЗакупка - Строка - Текст запроса получения данных документа. Отражает саму закупку.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты всего документа/этапа оплаты.
// 	     * ЗаказЗакупки - ДокументСсылка.ЗаказПоставщику, ДокументСсылка.ЗаказПереработчику, ДокументСсылка.ЗаказПереработчику2_5 - Заказ, по которому происходит закупка.
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма закупки в валюте документа (включая залог за тару).
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма закупки в валюте взаиморасчетов (включая залог за тару).
// 	     * ЗалогЗаТару - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма залога за тару в валюте взаиморасчетов.
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	ТекстПланОплат - Строка - Текст запроса получения данных документа плановой оплаты поставщику. Отражает увеличение плана оплаты поставщику.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * ДатаПлатежа - Дата - Плановая дата оплаты всего документа/этапа оплаты.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * СверхЗаказа - Булево - Это приобретение сверх заказа.
// 	     * ЗаказЗакупки - ДокументСсылка.ЗаказПоставщику, ДокументСсылка.ЗаказПереработчику, ДокументСсылка.ЗаказПереработчику2_5 - Заказ, по которому происходит закупка.
// 	     * КОплате - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма к оплате в валюте взаиморасчетов.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ВариантОплаты - ПеречислениеСсылка.ВариантыКонтроляОплатыПоставщику - Вариант оплаты этапа графика.
// 	ТекстПереносАванса - Строка - Текст запроса получения данных документа по зачтенным авансам.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ОбъектРасчетовИсточник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов аванса.
// 	     * ОбъектРасчетовПриемник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция переноса или резервирования аванса.
// 	     [Реквизиты документа]
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте взаиморасчетов.
// 	ТекстТовары - Строка - Текст запроса получения данных документа плановой поставки от поставщика. Отражает увеличение плана поставки поставщиком.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов документа.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок/детализация расчетов документа.
// 	     * НакладнаяПоЗаказам - Булево - Накладная введена по заказу(ам).
// 	     * СверхЗаказа - Булево - Это приобретение сверх заказа.
// 	     * ЗаказЗакупки - ДокументСсылка.ЗаказПоставщику, ДокументСсылка.ЗаказПереработчику, ДокументСсылка.ЗаказПереработчику2_5 - Заказ, по которому происходит закупка.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма взаиморасчетов строки товаров, уменьшает план поставки.
// 	     * КПоступлению - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма увеличения плана поставки.
// 	ТекстОплата - Строка - Текст запроса получения данных зачета закупки (Только регл.) на закупки управленческой организации.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов по управленческой организации.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция переноса или резервирования аванса.
// 	     [Реквизиты документа]
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма зачета в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма зачета в валюте взаиморасчетов.
// 	     * КОплате - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма уменьшения плана оплаты в валюте взаиморасчетов.
//
Процедура ПроведениеЗакупки(Запрос, ТекстыЗапроса, Регистры, ТекстЗакупка, ТекстПланОплат, ТекстПереносАванса = "", ТекстТовары = "", ТекстОплата = "") Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "Закупка";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	// Курсы валют на даты документов
	ТаблицыДляКурсов = Новый Массив;
	ТаблицыДляКурсов.Добавить("УвеличениеНашейЗадолженностиПоставщику");
	Если ТекстОплата <> "" Тогда
		ТаблицыДляКурсов.Добавить("УвеличениеЗадолженностиПоставщика");
	КонецЕсли;
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, ТаблицыДляКурсов);
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютПоставщик", ТекстКурсы);
	
	// Перенос задолженности по центральному договору
	ТекстыШаблоновВТ.Вставить("втПереносРасчетовПоставщик", ТекстВтПереносаРасчетов("УвеличениеНашейЗадолженностиПоставщику"));
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	Если ЗначениеЗаполнено(ТекстПереносАванса) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик", "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник");
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик", "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник");
	КонецЕсли;
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаОплатыПоставщику");
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеНашейЗадолженностиПоставщику");
	Если ЗначениеЗаполнено(ТекстТовары) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеПланаПоставки");
		ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеПланаПоставки",
			"(ВЫБОР
			|		КОГДА УменьшениеПланаПоставки.НакладнаяПоЗаказам
			|			ТОГДА УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов
			|		КОГДА УменьшениеПланаПоставки.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
			|			ТОГДА УменьшениеПланаПоставки.ОбъектРасчетов.Договор.ОбъектРасчетов
			|		ИНАЧЕ УменьшениеПланаПоставки.ОбъектРасчетов
			|	КОНЕЦ)");
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстОплата) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеЗадолженностиПоставщика");
	КонецЕсли;
	
	ДобавитьИсточник(ТаблицыИсточникиНД, "ПереносРасчетов", "ПереносРасчетов.ОбъектРасчетовИсточник");
	ДобавитьИсточник(ТаблицыИсточникиНД, "ПереносРасчетов", "ПереносРасчетов.ОбъектРасчетовПриемник");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстНД = СтрЗаменить(ТекстНД, "#ПереносРасчетов", "втПереносРасчетовПоставщик");
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	// Зачет аванса
	Если ЗначениеЗаполнено(ТекстПереносАванса) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежаПоставщик", ТекстПереносАванса);
		МассивТекстов.Добавить(ОтразитьПереносРасчетовСПоставщиком(Запрос, Операция)); //Перенос авансов по накладным
	КонецЕсли;
	
	// Перенос задолженности по центральному договору
	МассивТекстов.Добавить(ОтразитьПереносРасчетовСПоставщиком(Запрос, "ПереносЗакупки"));
	
	// Увеличение плана оплат
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыПоставщику", ТекстПланОплат);
	МассивТекстов.Добавить(УвеличитьПланОплатыПоставщику(Операция));
	
	// Увеличение задолженности поставщику
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеНашейЗадолженностиПоставщику", ТекстЗакупка);
	МассивТекстов.Добавить(УвеличитьНашуЗадолженностьПоставщику(Операция));
	
	Если ЗначениеЗаполнено(ТекстТовары) Тогда
		// Уменьшение плана поставки
		ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаПоставки", ТекстТовары);
		МассивТекстов.Добавить(УменьшитьПланПоставкиОтПоставщика());
	
		// Увеличение плана поставки - сверх заказа
		ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаПоставки", ТекстТовары);
		МассивТекстов.Добавить(УвеличитьПланПоставкиОтПоставщика(Операция));
	КонецЕсли;
	
	ТекстУменьшениеПланаОплаты = "";
	
	// Уменьшение плана оплаты по заказам на сумму постоплаты
	Если ЗначениеЗаполнено(ТекстПереносАванса) И ЗначениеЗаполнено(ТекстТовары) Тогда
		ТекстУменьшениеПланаОплаты = ТекстУменьшениеПланаОплаты + УменьшениеПланаОплатыПоставщикуПриПоставке();
	КонецЕсли;
	
	// Уменьшение плана оплаты по упр орг при проведении реализации только регл
	Если ЗначениеЗаполнено(ТекстОплата) Тогда
		Если ТекстУменьшениеПланаОплаты <> "" Тогда
			ТекстУменьшениеПланаОплаты = ТекстУменьшениеПланаОплаты + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		ТекстУменьшениеПланаОплаты = ТекстУменьшениеПланаОплаты + ТекстОплата;
	КонецЕсли;
	
	Если ТекстУменьшениеПланаОплаты <> "" Тогда
		ТекстыШаблоновВТ.Вставить("УменьшениеПланаОплатыПоставщику", ТекстУменьшениеПланаОплаты);
		МассивТекстов.Добавить(УменьшитьПланОплатыПоставщику(Операция));
	КонецЕсли;
	
	// Увеличение задолженности по упр организации при проведении реализации только регл
	Если ЗначениеЗаполнено(ТекстОплата) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеЗадолженностиПоставщика", ТекстОплата);
		МассивТекстов.Добавить(УвеличитьЗадолженностьПоставщика(Операция));
	КонецЕсли;
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения заявки на оплату поставщику по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстВзаиморасчеты - Строка - Текст запроса получения данных заявки.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, по которому планируется платеж.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты документа]
// 	     * УвеличениеОплачивается - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма заявки в валюте взаиморасчетов к оплате.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
//
Процедура ПроведениеЗаявкиНаОплатуПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстВзаиморасчеты) Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ЗаявкаНаОплатуПоставщику";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеОплачиваетсяПоставщику");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеОплачиваетсяПоставщику", ТекстВзаиморасчеты);
	ТекстУвеличенияПланаОплаты = УвеличитьОплачиваетсяПоставщику(Операция);
	
	ТекстРасчетыСПоставщиками = ТекстУвеличенияПланаОплаты;
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения возврата оплаты от поставщика по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстЗадолженность - Строка - Текст запроса получения данных возврата. Отражает сам возврат ДС.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов возврата.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * ИдентификаторФинЗаписи - Строка - Идентификатор финансового движения для организации двойной записи.
// 	     * НастройкаХозяйственнойОперации - СправочникСсылка.НастройкиХозяйственныхОпераций - Настройка отражения хозяйственной операции в фин. учете.
// 	     [Реквизиты документа]
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма возврата в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма возврата в валюте взаиморасчетов.
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Статья ДДС.
// 	     * ИдентификаторФинЗаписи - Строка - Строка со значением уникального идентификатора шапки или строки документа.
// 	     * НастройкаХозяйственнойОперации - СправочникСсылка.НастройкиХозяйственныхОпераций - Настройка хозяйственной операции документа.
// 	ТекстПереносРасчетов - Строка - Необязательный, текст запроса получения данных расшифровки платежа, на которую необходимо перенести возврат ДС.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ОбъектРасчетовИсточник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, на который зачитывается возврат ДС.
// 	     * ОбъектРасчетовПриемник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, по которому планируется платеж.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция переноса расчетов.
// 	     [Реквизиты табличной части]
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма зачета в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма зачета в валюте взаиморасчетов.
// 	     * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
//
Процедура ПроведениеВозвратаОплатыОтПоставщика(Запрос, ТекстыЗапроса, Регистры, ТекстЗадолженность, ТекстПереносРасчетов = "") Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ВозвратОплатыОтПоставщика";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, "УвеличениеНашейЗадолженностиПоставщику");
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютПоставщик", ТекстКурсы);
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УвеличениеНашейЗадолженностиПоставщику");
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик", "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник");
		ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик", "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник");
	КонецЕсли;
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеНашейЗадолженностиПоставщику", ТекстЗадолженность);
	МассивТекстов.Добавить(УвеличитьНашуЗадолженностьПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеПланаОплатыПоставщику", ТекстЗадолженность);
	МассивТекстов.Добавить(УвеличитьПланОплатыПоставщику(Операция));
	
	// Перенос аванса
	Если ЗначениеЗаполнено(ТекстПереносРасчетов) Тогда
		ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежаПоставщик", ТекстПереносРасчетов);
		МассивТекстов.Добавить(ОтразитьПереносРасчетовСПоставщиком(Запрос, Операция));
	КонецЕсли;
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами проведения возврата товаров поставщику по регистру Расчеты с поставщиками.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстВозврат - Строка - Текст запроса получения данных документа.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     [Общие]
// 	     * Организация - СправочникСсылка.Организации - Организация возврата товаров.
// 	     * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов возврата.
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * ИдентификаторФинЗаписи - Строка - Идентификатор финансового движения для организации двойной записи.
// 	       В большинстве случаев поле определяется как ОбъектРасчетов.УникальныйИдентификатор, в особых случаях может иметь значение не связанное с объектом расчетов.
// 	     * НастройкаХозяйственнойОперации - Неопределено, СправочникСсылка.НастройкиХозяйственныхОпераций - Настройка отражения хозяйственной операции в фин. учете.
// 	       В большинстве случаев поле имеет значение Неопределено, в особых случаях может быть указана ссылка на элемент справочника.
// 	     [Реквизиты документа]
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма возврата в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма возврата в валюте взаиморасчетов.
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
// 	ТекстПереносРасчетов - Строка - Текст запроса получения данных расшифровки платежа возврата, на которую происходит зачет возврата.
// 	     Запрос должен возвращать выборку полей:
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ОбъектРасчетовИсточник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов возврата.
// 	     * ОбъектРасчетовПриемник - СправочникСсылка.ОбъектыРасчетов - Объект расчетов, на который происходит зачет возврата.
// 	     [Общие]
// 	     * ДатаРегистратора - Дата - Дата и время документа регистратора.
// 	     * НомерРегистратора - Строка - Номер документа регистратора.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов объекта расчетов, на который происходит зачет возврата.
// 	     * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     [Реквизиты табличной части]
// 	     * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте документа.
// 	     * СуммаВзаиморасчетов - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака - Сумма расчетов в валюте взаиморасчетов.
// 	     * ДатаКурса - Дата - Дата, на которую следует взять курсы валют для расчета сумм в управленческом и регламентированном учете.
//
Процедура ПроведениеВозвратаПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстВозврат, ТекстПереносРасчетов) Экспорт
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "ВозвратТоваровПоставщику";
	
	#Область ВременныеТаблицы
	
	ТекстыШаблоновВТ = Новый Структура();
	
	ТаблицыДляКурсов = Новый Массив;
	ТаблицыДляКурсов.Добавить("УвеличениеЗадолженностиПоставщика");
	ТаблицыДляКурсов.Добавить("ТаблицаРасшифровкаПлатежаПоставщик");
	ТекстКурсы = ТекстЗапросаВТКурсовВалютДокументов(Операция, ТаблицыДляКурсов);
	ТекстыШаблоновВТ.Вставить("ВтКоэффициентыПересчетаВалютПоставщик", ТекстКурсы);
	
	// Перенос задолженности по центральному договору
	ТекстыШаблоновВТ.Вставить("втПереносРасчетовПоставщик", ТекстВтПереносаРасчетов("УвеличениеЗадолженностиПоставщика"));
	
	ТаблицыИсточникиНД = ТаблицыИсточникиНД();
	ДобавитьИсточник(ТаблицыИсточникиНД, "УменьшениеПланаОплатыПоставщику");
	ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик", "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник");
	ДобавитьИсточник(ТаблицыИсточникиНД, "ТаблицаРасшифровкаПлатежаПоставщик", "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник");
	
	ТекстНД = ТекстЗапросаВтНаправленияДеятельности(Операция, ТаблицыИсточникиНД);
	ТекстыШаблоновВТ.Вставить("ВтНаправленияДеятельностиПоставщик", ТекстНД);
	
	#КонецОбласти
	
	#Область Проведение
	
	МассивТекстов = Новый Массив;
	ТекстыЗапросовДанныхДокумента = Новый Структура();
	
	// Перенос задолженности по центральному договору
	МассивТекстов.Добавить(ОтразитьПереносРасчетовСПоставщиком(Запрос, "ПереносВозврата"));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УменьшениеПланаОплатыПоставщику", ТекстВозврат);
	МассивТекстов.Добавить(УменьшитьПланОплатыПоставщику(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("УвеличениеЗадолженностиПоставщика", ТекстВозврат);
	МассивТекстов.Добавить(УвеличитьЗадолженностьПоставщика(Операция));
	
	ТекстыЗапросовДанныхДокумента.Вставить("ТаблицаРасшифровкаПлатежаПоставщик", ТекстПереносРасчетов);
	МассивТекстов.Добавить(ОтразитьПереносРасчетовСПоставщиком(Запрос, Операция));
	
	ТекстРасчетыСПоставщиками = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыСПоставщиками", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("РасчетыСПоставщиками", ТекстРасчетыСПоставщиками);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВТ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПоискОснованийИДокументовОплаты

// Создает структуру параметров поиска оснований оплаты и документов оплаты
// 
// Параметры:
// 	РежимПоиска - Число - соответствие коду режима поиска:
// 		1 - Поиск документов оплаты; 
// 		2 - Поиск оснований (объектов) платежа.
// 
// Возвращаемое значение:
// 	Структура - содержит:
// 	* РежимПоиска - Число - соответствие коду режима поиска:
// 		1 - Поиск документов оплаты; 
// 		2 - Поиск оснований (объектов) платежа.
// 	* Организации - СправочникСсылка.Организации, Массив Из СправочникСсылка.Организации -
// 	* Документы   - Массив Из ДокументСсылка - документы, по которым производится поиск платежей.
// 	* НаДату      - Дата - для среза найденных документов на дату
// 	* ТолькоАвансы - Булево - Если "Истина", будут возвращены только авансовые платежи
// 	* ОграничитьТипыДокументовОплаты - Булево - Если "Истина", платежные документы будут ограничены возможными типами
// 	                                                входящих и исходящих документов оплат.
// 	* ОграничитьТипыОснованийОплаты  - Булево - Если "Истина", основания платежа будут ограничены возможными типами
// 	                                                входящих и исходящих документов.
// 	* ПараметрыОтбораПоТаблицеДокументов - Структура - Для отбора по временной таблице с документами, где:
//  	** ИмяПоля - Строка - Имя поля, в котором содержится документ
//  	** ИмяТаблицыОтбора - Строка - имя временной таблицы, где содержится документ
//
Функция ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты(РежимПоиска = 1) Экспорт
	
	ПараметрыПоиска = Новый Структура;
	
	ПараметрыПоиска.Вставить("РежимПоиска",  РежимПоиска);
	ПараметрыПоиска.Вставить("Организации",  Неопределено);
	ПараметрыПоиска.Вставить("Документы",    Новый Массив);
	ПараметрыПоиска.Вставить("НаДату",       Дата(1,1,1));
	ПараметрыПоиска.Вставить("ТолькоАвансы", Ложь);
	ПараметрыПоиска.Вставить("ОграничитьТипыДокументовОплаты", Ложь);
	ПараметрыПоиска.Вставить("ОграничитьТипыОснованийОплаты", Ложь);
	
	// Документы, по которым необходимо найти платежные документы
	ПараметрыОтбораПоТаблицеДокументов = Новый Структура;
	ПараметрыОтбораПоТаблицеДокументов.Вставить("ИмяПоля",          "");
	ПараметрыОтбораПоТаблицеДокументов.Вставить("ИмяТаблицыОтбора", "");
	
	ПараметрыПоиска.Вставить("ПараметрыОтбораПоТаблицеДокументов", ПараметрыОтбораПоТаблицеДокументов);
	
	Возврат ПараметрыПоиска;
	
КонецФункции

// Подготовить временную таблицу "РасчетыСКлиентами_ОснованияИДокументыОплаты"
// Создает временную таблицу с колонками:
// 	* Организация;
// 	* ДокументОплаты - платежный документ;
// 	* ОснованиеОплаты - оплачиваемый документ;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* НаправлениеДеятельности;
// 	* Контрагент;
// 	* Договор;
// 	* СуммаОплаты;
// 	* СуммаОплатыУпр;
// 	* СуммаОплатыРегл.
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
// 	ПараметрыПоиска         - см. ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты
Процедура ПодготовитьВТ_РасчетыСКлиентами_ОснованияИДокументыОплаты(МенеджерВременныхТаблиц, ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расчеты.Организация                            КАК Организация,
	|	Расчеты.ДокументОплаты                         КАК ДокументОплаты,
	|	Расчеты.ОснованиеОплаты                        КАК ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов                         КАК ОбъектРасчетов,
	|	Расчеты.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов.Контрагент              КАК Контрагент,
	|	Расчеты.ОбъектРасчетов.Договор                 КАК Договор,
	|	СУММА(Расчеты.СуммаОплаты)                     КАК СуммаОплаты,
	|	СУММА(Расчеты.СуммаОплатыУпр)                  КАК СуммаОплатыУпр,
	|	СУММА(Расчеты.СуммаОплатыРегл)                 КАК СуммаОплатыРегл
	|ПОМЕСТИТЬ РасчетыСКлиентами_ОснованияИДокументыОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов             КАК ОбъектРасчетов,
	|		Расчеты.РасчетныйДокумент          КАК ДокументОплаты,
	|		Расчеты.ДокументРегистратор        КАК ОснованиеОплаты,
	|		Расчеты.Предоплата                 КАК СуммаОплаты,
	|		Расчеты.ПредоплатаУпр              КАК СуммаОплатыУпр,
	|		Расчеты.ПредоплатаРегл             КАК СуммаОплатыРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ДокументРегистратор_РежимПоиска2_РасчетныйДокумент
	|	ГДЕ
	|		Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация В
	|			(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента),
	|			 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.ОбъектРасчетов.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор,
	|		&ПолеОснованиеОплаты_ОбъектРасчетов,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ОбъектРасчетов_РежимПоиска2_ДокументРегистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ДокументРегистратор
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.ОбъектРасчетов.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_РасчетныйДокумент_РежимПоиска2_ДокументРегистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ОбъектРасчетов.Объект
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказКлиента                          КАК ОбъектРасчетов,
	|		Расчеты.РасчетныйДокумент                     КАК ДокументОплаты,
	|		Расчеты.Регистратор                           КАК ОснованиеОплаты,
	|		Расчеты.Предоплата                            КАК СуммаОплаты,
	|		Расчеты.ПредоплатаУпр                         КАК СуммаОплатыУпр,
	|		Расчеты.ПредоплатаРегл                        КАК СуммаОплатыРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_Регистратор_РежимПоиска2_РасчетныйДокумент
	|	ГДЕ
	|		Расчеты.Регистратор <> Расчеты.ЗаказКлиента.Объект
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказКлиента,
	|		Расчеты.Регистратор,
	|		&ПолеОснованиеОплаты_ЗаказКлиента,
	|		Расчеты.Предоплата,
	|		Расчеты.ПредоплатаУпр,
	|		Расчеты.ПредоплатаРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ЗаказКлиента_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.Регистратор = Расчеты.РасчетныйДокумент
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказКлиента,
	|		Расчеты.Регистратор,
	|		&ПолеОснованиеОплаты_ЗаказКлиента,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ЗаказКлиента_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.Регистратор
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказКлиента,
	|		Расчеты.Регистратор,
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_РасчетныйДокумент_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ЗаказКлиента.Объект
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	) КАК Расчеты
	|
	|ГДЕ
	|	(НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.Организация В (&Организации))
	|	И (НЕ &ОграничитьТипыДокументовОплаты
	|		ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.ДокументОплаты) В (&мТиповДокументовОплатыВходящие))
	|	И (НЕ &ОграничитьТипыОснованийОплаты
	|		ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.ОснованиеОплаты) В (&мТиповОснованийОплатыИсходящие))
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Организация,
	|	Расчеты.ДокументОплаты,
	|	Расчеты.ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.ОбъектРасчетов.НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов.Контрагент,
	|	Расчеты.ОбъектРасчетов.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|
	|";
	
	ПостобработкаЗапроса_ПоискОснованийИДокументовОплаты(Запрос, ПараметрыПоиска);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Подготовить временную таблицу "РасчетыСПоставщиками_ОснованияИДокументыОплаты"
// Создает временную таблицу с колонками:
// 	* Организация;
// 	* ДокументОплаты - платежный документ;
// 	* ОснованиеОплаты - оплачиваемый документ;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* НаправлениеДеятельности;
// 	* Контрагент;
// 	* Договор;
// 	* СуммаОплаты;
// 	* СуммаОплатыУпр;
// 	* СуммаОплатыРегл.
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
// 	ПараметрыПоиска         - см. ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты
Процедура ПодготовитьВТ_РасчетыСПоставщиками_ОснованияИДокументыОплаты(МенеджерВременныхТаблиц, ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расчеты.Организация                            КАК Организация,
	|	Расчеты.ДокументОплаты                         КАК ДокументОплаты,
	|	Расчеты.ОснованиеОплаты                        КАК ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов                         КАК ОбъектРасчетов,
	|	Расчеты.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов.Контрагент              КАК Контрагент,
	|	Расчеты.ОбъектРасчетов.Договор                 КАК Договор,
	|	СУММА(Расчеты.СуммаОплаты)                     КАК СуммаОплаты,
	|	СУММА(Расчеты.СуммаОплатыУпр)                  КАК СуммаОплатыУпр,
	|	СУММА(Расчеты.СуммаОплатыРегл)                 КАК СуммаОплатыРегл
	|ПОМЕСТИТЬ РасчетыСПоставщиками_ОснованияИДокументыОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов             КАК ОбъектРасчетов,
	|		Расчеты.РасчетныйДокумент          КАК ДокументОплаты,
	|		Расчеты.ДокументРегистратор        КАК ОснованиеОплаты,
	|		Расчеты.Предоплата                 КАК СуммаОплаты,
	|		Расчеты.ПредоплатаУпр              КАК СуммаОплатыУпр,
	|		Расчеты.ПредоплатаРегл             КАК СуммаОплатыРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ДокументРегистратор_РежимПоиска2_РасчетныйДокумент
	|	ГДЕ
	|		Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация =
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.ОбъектРасчетов.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор,
	|		&ПолеОснованиеОплаты_ОбъектРасчетов,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ОбъектРасчетов_РежимПоиска2_ДокументРегистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ДокументРегистратор
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.ОбъектРасчетов.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_РасчетныйДокумент_РежимПоиска2_ДокументРегистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ОбъектРасчетов.Объект
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказПоставщику                       КАК ОбъектРасчетов,
	|		Расчеты.РасчетныйДокумент                     КАК ДокументОплаты,
	|		Расчеты.Регистратор                           КАК ОснованиеОплаты,
	|		Расчеты.Предоплата                            КАК СуммаОплаты,
	|		Расчеты.ПредоплатаУпр                         КАК СуммаОплатыУпр,
	|		Расчеты.ПредоплатаРегл                        КАК СуммаОплатыРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_Регистратор_РежимПоиска2_РасчетныйДокумент
	|	ГДЕ
	|		Расчеты.Регистратор <> Расчеты.ЗаказПоставщику.Объект
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказПоставщику,
	|		Расчеты.Регистратор,
	|		&ПолеОснованиеОплаты_ЗаказПоставщику,
	|		Расчеты.Предоплата,
	|		Расчеты.ПредоплатаУпр,
	|		Расчеты.ПредоплатаРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ЗаказПоставщику_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.Регистратор = Расчеты.РасчетныйДокумент
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказПоставщику,
	|		Расчеты.Регистратор,
	|		&ПолеОснованиеОплаты_ЗаказПоставщику,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ЗаказПоставщику_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.Регистратор
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказПоставщику,
	|		Расчеты.Регистратор,
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_РасчетныйДокумент_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ЗаказПоставщику.Объект
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	) КАК Расчеты
	|
	|ГДЕ
	|	(НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.Организация В (&Организации))
	|	И (НЕ &ОграничитьТипыДокументовОплаты
	|		ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.ДокументОплаты) В (&мТиповДокументовОплатыИсходящие))
	|	И (НЕ &ОграничитьТипыОснованийОплаты
	|		ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.ОснованиеОплаты) В (&мТиповОснованийОплатыВходящие))
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Организация,
	|	Расчеты.ДокументОплаты,
	|	Расчеты.ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.ОбъектРасчетов.НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов.Контрагент,
	|	Расчеты.ОбъектРасчетов.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|
	|";
	
	ПостобработкаЗапроса_ПоискОснованийИДокументовОплаты(Запрос, ПараметрыПоиска);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область АвансыПоДаннымВзаиморасчетов

// Создает структуру параметров для подготовки временных таблиц с расчетами
// 
// Параметры:
//  ИсходныеПараметры - Неопределено, Структура - произвольная структура с заполненными значениями
// 
// Возвращаемое значение:
// 	Структура - Описание:
//   * ДатаНачала                    - Дата -
//   * ДатаОкончания                 - Дата -
//   * Организации                   - Неопределено, СправочникСсылка.Организации, Массив из СправочникСсылка.Организации -
//   * РасчетныйДокумент             - Неопределено, ДокументСсылка - дополнительный фильтр по расчетному документу
//   * СоздатьПустуюТаблицу          - Булево - позволяет создать каркас временной таблицы без данных
//   * НоваяАрхитектураВзаиморасчетов - Булево - взаиморасчеты "онлайн"/"офлайн"
//   * ВключитьОтборПоОрганизациям - Булево - применять отбор по организации
//   * ПоляИндексовВручную           - Массив из Строка - возможность переопределения полей индексов результата
//   * УчестьРезервированиеАвансов   - Булево - если "Истина", зачтенные авансы,
//                                     которые ранее были зарезервированы, не попадут в выборку.
//   * ПараметрыОтбораПоРасчетномуДокументу - Структура - Для отбора по временной таблице с расчетными документами, где:
//   	** ИмяПоля - Строка - Имя поля, в котором содержится документ
//   	** ИмяТаблицыОтбора - Строка - имя временной таблицы, где содержится документ
//
Функция ИнициализироватьПараметрыПодготовкиРасчетовАвансов(ИсходныеПараметры = Неопределено) Экспорт
	
	ПараметрыРасчетов = Новый Структура;
	
	ПустаяДата = '00010101';
	
	ПараметрыРасчетов.Вставить("ДатаНачала",           ПустаяДата);
	ПараметрыРасчетов.Вставить("ДатаОкончания",        ПустаяДата);
	ПараметрыРасчетов.Вставить("Организации",          Неопределено);
	ПараметрыРасчетов.Вставить("РасчетныйДокумент",    Неопределено);
	ПараметрыРасчетов.Вставить("СоздатьПустуюТаблицу", Ложь);
	ПараметрыРасчетов.Вставить("НоваяАрхитектураВзаиморасчетов",
		ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	ПараметрыРасчетов.Вставить("ВключитьОтборПоОрганизациям", Ложь);
	
	// Для отбора по временной таблице с расчетными документами
	ПараметрыОтбораПоРасчетномуДокументу = Новый Структура;
	ПараметрыОтбораПоРасчетномуДокументу.Вставить("ИмяПоля",          "РасчетныйДокумент");
	ПараметрыОтбораПоРасчетномуДокументу.Вставить("ИмяТаблицыОтбора", "");
	
	ПараметрыРасчетов.Вставить("ПараметрыОтбораПоРасчетномуДокументу", ПараметрыОтбораПоРасчетномуДокументу);
	
	ПараметрыРасчетов.Вставить("ПоляИндексовВручную",         Новый Массив);
	ПараметрыРасчетов.Вставить("УчестьРезервированиеАвансов", Ложь);
	
	
	ЗаполнитьСвойстваПараметров(ПараметрыРасчетов, ИсходныеПараметры);
	
	Возврат ПараметрыРасчетов;
	
КонецФункции

#Область АвансыПолученные

// Подготовить временную таблицу "РасчетыСКлиентами_Авансы"
// Создает временную таблицу с колонками:
// 	* РасчетныйДокумент;
// 	* ДокументРегистратор;
// 	* Организация;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* НаправлениеДеятельности;
// 	* Контрагент;
// 	* Договор;
// 	* ДатаАванса;
// 	* ВалютаДокумента;
// 	* СуммаАвансаВал - сумма в валюте документа;
// 	* СуммаАванса;
// 	* СуммаАвансаУпр;
// 	* СуммаАвансаРегл.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ПараметрыРасчета        - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура ПодготовитьВТ_РасчетыСКлиентами_Авансы(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"// Новая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов.Контрагент КАК Контрагент,
	|	Расчеты.ОбъектРасчетов.Договор КАК Договор,
	|	МИНИМУМ(ОтборАвансов.ДатаАванса) КАК ДатаАванса,
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Валюта
	|				ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = ОтборАвансов.ВалютаРегламентированногоУчета
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = ОтборАвансов.ВалютаРегламентированногоУчета
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ
	|				Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАванса,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаРегл
	|ПОМЕСТИТЬ РасчетыСКлиентами_Авансы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|		Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		МИНИМУМ(Расчеты.ДатаВозникновения) КАК ДатаАванса
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.ОбъектРасчетов.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.ДатаВозникновения МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|		
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов.Организация,
	|		Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|	
	|	) КАК ОтборАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ПО
	|		ОтборАвансов.ДокументРегистратор    = Расчеты.ДокументРегистратор
	|		И  ОтборАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборАвансов.Организация         = Расчеты.ОбъектРасчетов.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.ДатаВозникновения МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.ОбъектРасчетов.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Старая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.Регистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ)) КАК ДатаАванса,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Валюта
	|		ИНАЧЕ Расчеты.Валюта
	|	КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = ОтборАвансов.ВалютаРегламентированногоУчета
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = ОтборАвансов.ВалютаРегламентированногоУчета
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ
	|				Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаАвансаВал,
	|	СУММА(ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Предоплата
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Расчеты.Предоплата
	|		КОНЕЦ) КАК СуммаАванса,
	|	СУММА(ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.ПредоплатаУпр
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Расчеты.ПредоплатаУпр
	|		КОНЕЦ) КАК СуммаАвансаУпр,
	|	СУММА(ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Расчеты.ПредоплатаРегл
	|		КОНЕЦ) КАК СуммаАвансаРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.Регистратор КАК ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Активность  = ИСТИНА
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И Расчеты.ПредоплатаРегл > 0)
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И Расчеты.ПредоплатаРегл < 0))
	|
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета,
	|		Расчеты.Регистратор,
	|		Расчеты.РасчетныйДокумент
	|
	|	ИМЕЮЩИЕ
	|		СУММА(ВЫБОР 
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -Расчеты.ПредоплатаРегл
	|			КОНЕЦ) > 0
	|
	|	) КАК ОтборАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|	ПО
	|		ОтборАвансов.ДокументРегистратор    = Расчеты.Регистратор
	|		И  ОтборАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.Регистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Предоплата
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Расчеты.Предоплата
	|		КОНЕЦ) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|";
	
	УстановитьПоляИндексов(Запрос, ПараметрыРасчета, "РасчетыСКлиентами_Авансы");
	
	ПараметрыПутей = ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены();
	ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей);
	
	Запрос.Выполнить();
	
	
КонецПроцедуры

// Подготовить временную таблицу "РасчетыСКлиентами_ПогашенияАвансов"
// Создает временную таблицу с колонками:
// 	* РасчетныйДокумент;
// 	* Организация;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* ДокументРегистратор;
// 	* Контрагент;
// 	* Договор;
// 	* НаправлениеДеятельности;
// 	* ИсхКонтрагент - контрагент, по которому возник аванс;
// 	* ИсхДоговор    - договор, по которому возник аванс;
// 	* ИсхНаправлениеДеятельности - направление, по которому возник аванс;
// 	* КорАналитикаУчетаПоПартнерам;
// 	* ИсходнаяАналитикаУчетаПоПартнерам - аналитика, по которой образовался аванс;
// 	* КорОбъектРасчетов;
// 	* ИсходныйОбъектРасчетов - объект расчетов, по которому образовался аванс;
// 	* ДатаАванса;
// 	* ДатаПогашения;
// 	* СобытиеЗнак - Если погашение произошло по причине зачета аванса, тогда СобытиеЗнак >= 0,
// 	                Если погашение произошло по причине возврата/списания задолженности, тогда СобытиеЗнак < 0;
// 	* ВидСобытия - событие, в связи с которым произошло погашение аванса. Возможные события:
// 	         - Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности,
// 	         - Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту,
// 	         - Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиенту;
// 	* ВалютаДокумента;
// 	* СуммаПогашения;
// 	* СуммаПогашенияВал - сумма в валюте документа;
// 	* СуммаПогашенияУпр;
// 	* СуммаПогашенияРегл.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ПараметрыРасчета        - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура ПодготовитьВТ_РасчетыСКлиентами_ПогашенияАвансов(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"// Новая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.ОбъектРасчетов.Контрагент КАК Контрагент,
	|	Расчеты.ОбъектРасчетов.Договор КАК Договор,
	|	Расчеты.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ Расчеты.КорОбъектРасчетов = &ПустойОбъектРасчетов
	|				И НЕ ISNULL(Расчеты.КорОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО, ИСТИНА)
	|			ТОГДА Расчеты.КорОбъектРасчетов.Контрагент
	|		ИНАЧЕ
	|			Расчеты.ОбъектРасчетов.Контрагент
	|		КОНЕЦ) КАК ИсхКонтрагент,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ Расчеты.КорОбъектРасчетов = &ПустойОбъектРасчетов
	|				И НЕ ISNULL(Расчеты.КорОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО, ИСТИНА)
	|			ТОГДА Расчеты.КорОбъектРасчетов.Договор
	|		ИНАЧЕ
	|			Расчеты.ОбъектРасчетов.Договор
	|		КОНЕЦ) КАК ИсхДоговор,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ Расчеты.КорОбъектРасчетов = &ПустойОбъектРасчетов
	|				И НЕ ISNULL(Расчеты.КорОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО, ИСТИНА)
	|			ТОГДА Расчеты.КорОбъектРасчетов.НаправлениеДеятельности
	|		ИНАЧЕ
	|			Расчеты.ОбъектРасчетов.НаправлениеДеятельности
	|		КОНЕЦ) КАК ИсхНаправлениеДеятельности,
	|	МАКСИМУМ(Расчеты.КорАналитикаУчетаПоПартнерам) КАК КорАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Расчеты.КорАналитикаУчетаПоПартнерам <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|			ТОГДА Расчеты.КорАналитикаУчетаПоПартнерам
	|		ИНАЧЕ
	|			Расчеты.АналитикаУчетаПоПартнерам
	|		КОНЕЦ) КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(Расчеты.КорОбъектРасчетов) КАК КорОбъектРасчетов,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ Расчеты.КорОбъектРасчетов = &ПустойОбъектРасчетов
	|				И НЕ ISNULL(Расчеты.КорОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО, ИСТИНА)
	|			ТОГДА Расчеты.КорОбъектРасчетов
	|		ИНАЧЕ
	|			Расчеты.ОбъектРасчетов
	|		КОНЕЦ) КАК ИсходныйОбъектРасчетов,
	|	МИНИМУМ(ОтборПогашенийАвансов.ДатаАванса) КАК ДатаАванса,
	|	МАКСИМУМ(ОтборПогашенийАвансов.ДатаПогашения) КАК ДатаПогашения,
	|	МАКСИМУМ(ОтборПогашенийАвансов.СобытиеЗнак) КАК СобытиеЗнак,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА Расчеты.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|			КОГДА Расчеты.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|			КОГДА Расчеты.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|			КОГДА ОтборПогашенийАвансов.СобытиеЗнак < 0
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|			ИНАЧЕ
	|				НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ВидСобытия,
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Валюта
	|				ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = ОтборПогашенийАвансов.ВалютаРегламентированногоУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = ОтборПогашенийАвансов.ВалютаРегламентированногоУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				ИНАЧЕ
	|					Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашения,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияРегл
	|ПОМЕСТИТЬ РасчетыСКлиентами_ПогашенияАвансов_Предварительная
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|		Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		МИНИМУМ(Расчеты.ДатаВозникновения) КАК ДатаАванса,
	|		МАКСИМУМ(Расчеты.Период) КАК ДатаПогашения,
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|		СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 0
	|			КОГДА Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(Расчеты.ДокументРегистратор) В (&ТипыДокументовВозврата_ПолученныеАвансы)
	|						ТОГДА -Расчеты.Предоплата
	|					ИНАЧЕ
	|						0
	|					КОНЕЦ
	|			КОГДА Расчеты.ХозяйственнаяОперация В
	|					(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента))
	|				ТОГДА Расчеты.Предоплата
	|			ИНАЧЕ
	|				-Расчеты.Предоплата
	|		КОНЕЦ) КАК СобытиеЗнак
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.ОбъектРасчетов.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|		И Расчеты.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов.Организация,
	|		Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|	
	|	) КАК ОтборПогашенийАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ПО
	|		ОтборПогашенийАвансов.ДокументРегистратор    = Расчеты.ДокументРегистратор
	|		И  ОтборПогашенийАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборПогашенийАвансов.Организация         = Расчеты.ОбъектРасчетов.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|		И  Расчеты.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ОбъектРасчетов.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.ДокументРегистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Старая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента КАК ОбъектРасчетов,
	|	Расчеты.Регистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК ИсхКонтрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК ИсхДоговор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК ИсхНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	&ПустойОбъектРасчетов КАК КорОбъектРасчетов,
	|	Расчеты.ЗаказКлиента КАК ИсходныйОбъектРасчетов,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЕСТЬNULL(ПоступлениеДС.ДатаПроведенияБанком, ДанныеПервичныхДокументов.ДатаРегистратора), ДЕНЬ)) КАК ДатаАванса,
	|	МАКСИМУМ(ОтборПогашенийАвансов.ДатаПогашения) КАК ДатаПогашения,
	|	МАКСИМУМ(ОтборПогашенийАвансов.СобытиеЗнак) КАК СобытиеЗнак,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА Расчеты.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|			КОГДА Расчеты.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|			КОГДА ОтборПогашенийАвансов.СобытиеЗнак < 0
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|		КОНЕЦ) КАК ВидСобытия,
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Валюта
	|				ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = ОтборПогашенийАвансов.ВалютаРегламентированногоУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = ОтборПогашенийАвансов.ВалютаРегламентированногоУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				ИНАЧЕ
	|					Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаПогашения,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаПогашенияУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаПогашенияРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Расчеты.Регистратор КАК ДокументРегистратор,
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.Период КАК ДатаПогашения,
	|		СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И Расчеты.ПредоплатаРегл < 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СобытиеЗнак,
	|		СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА 1
	|				ИНАЧЕ -1
	|			КОНЕЦ) КАК СуммаЗачета
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Регистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета,
	|		Расчеты.Период
	|
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА 1
	|				ИНАЧЕ -1
	|			КОНЕЦ) > 0
	|	) КАК ОтборПогашенийАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|	ПО
	|		ОтборПогашенийАвансов.ДокументРегистратор    = Расчеты.Регистратор
	|		И  ОтборПогашенийАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборПогашенийАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеДС
	|	ПО
	|		ОтборПогашенийАвансов.РасчетныйДокумент = ПоступлениеДС.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО
	|		ОтборПогашенийАвансов.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|		И ОтборПогашенийАвансов.Организация = ДанныеПервичныхДокументов.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента,
	|	Расчеты.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) > 0
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Погашения.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Погашения.Организация КАК Организация,
	|	Погашения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Погашения.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Погашения.ДокументРегистратор КАК ДокументРегистратор,
	|	Погашения.Контрагент КАК Контрагент,
	|	Погашения.Договор КАК Договор,
	|	Погашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Погашения.ИсхКонтрагент КАК ИсхКонтрагент,
	|	Погашения.ИсхДоговор КАК ИсхДоговор,
	|	Погашения.ИсхНаправлениеДеятельности КАК ИсхНаправлениеДеятельности,
	|	Погашения.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Погашения.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	Погашения.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Погашения.ИсходныйОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|	Погашения.ДатаАванса КАК ДатаАванса,
	|	Погашения.ДатаПогашения КАК ДатаПогашения,
	|	МАКСИМУМ(Погашения.СобытиеЗнак) КАК СобытиеЗнак,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Погашения.ВидСобытия = НЕОПРЕДЕЛЕНО
	|		// Если вид события не удалось идентифицировать сразу, смотрим вторичные признаки
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ВидыСобытий.ХозяйственнаяОперация, НЕОПРЕДЕЛЕНО) =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|				КОГДА ЕСТЬNULL(ВидыСобытий.ХозяйственнаяОперация, НЕОПРЕДЕЛЕНО) =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|				КОГДА Погашения.СобытиеЗнак < 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|				ИНАЧЕ
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|			КОНЕЦ
	|		ИНАЧЕ
	|			Погашения.ВидСобытия
	|	КОНЕЦ) КАК ВидСобытия,
	|	МАКСИМУМ(Погашения.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(Погашения.СуммаПогашения) КАК СуммаПогашения,
	|	МАКСИМУМ(Погашения.СуммаПогашенияВал) КАК СуммаПогашенияВал,
	|	МАКСИМУМ(Погашения.СуммаПогашенияУпр) КАК СуммаПогашенияУпр,
	|	МАКСИМУМ(Погашения.СуммаПогашенияРегл) КАК СуммаПогашенияРегл
	|ПОМЕСТИТЬ РасчетыСКлиентами_ПогашенияАвансов
	|ИЗ
	|	РасчетыСКлиентами_ПогашенияАвансов_Предварительная КАК Погашения
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		// Соединяемся с регистром, а не с готовой временной таблицой в связи с тем, чтобы учесть резервирования,
	|		// которые были вне периода зачета
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Резервирование
	|	ПО
	|		&НоваяАрхитектураВзаиморасчетов
	|		И &УчестьРезервированиеАвансов
	|		И Погашения.ДокументРегистратор    = Резервирование.ДокументРегистратор
	|		И Погашения.РасчетныйДокумент      = Резервирование.РасчетныйДокумент
	|		И Погашения.ИсходныйОбъектРасчетов = Резервирование.ОбъектРасчетов
	|		И Резервирование.Период            <= &ДатаОкончания
	|		И Погашения.Организация            = Резервирование.ОбъектРасчетов.Организация
	|		И Резервирование.ВидДвижения       = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Резервирование.ХозяйственнаяОперация
	|			= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		// Находим вид события, если изначально не удалось идентифицировать
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ВидыСобытий
	|	ПО
	|		&НоваяАрхитектураВзаиморасчетов
	|		И Погашения.ВидСобытия          = НЕОПРЕДЕЛЕНО
	|		И Погашения.ДокументРегистратор = ВидыСобытий.ДокументРегистратор
	|		И ВидыСобытий.Период            <= &ДатаОкончания
	|		И ВидыСобытий.ВидДвижения       = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ВидыСобытий.ХозяйственнаяОперация В
	|			(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|			 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента))
	|
	|ГДЕ
	|	Резервирование.РасчетныйДокумент ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Погашения.РасчетныйДокумент,
	|	Погашения.Организация,
	|	Погашения.АналитикаУчетаПоПартнерам,
	|	Погашения.ОбъектРасчетов,
	|	Погашения.ДокументРегистратор,
	|	Погашения.Контрагент,
	|	Погашения.Договор,
	|	Погашения.НаправлениеДеятельности,
	|	Погашения.ИсхКонтрагент,
	|	Погашения.ИсхДоговор,
	|	Погашения.ИсхНаправлениеДеятельности,
	|	Погашения.КорАналитикаУчетаПоПартнерам,
	|	Погашения.ИсходнаяАналитикаУчетаПоПартнерам,
	|	Погашения.КорОбъектРасчетов,
	|	Погашения.ИсходныйОбъектРасчетов,
	|	Погашения.ДатаАванса,
	|	Погашения.ДатаПогашения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезервированиеПриходы.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РезервированиеПриходы.ОбъектРасчетов.Организация КАК Организация,
	|	РезервированиеПриходы.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РезервированиеПриходы.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РезервированиеПриходы.ДокументРегистратор КАК ДокументРегистратор,
	|	РезервированиеПриходы.ОбъектРасчетов.Контрагент КАК Контрагент,
	|	РезервированиеПриходы.ОбъектРасчетов.Договор КАК Договор,
	|	РезервированиеПриходы.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	МАКСИМУМ(РезервированиеРасходы.ОбъектРасчетов.Контрагент) КАК ИсхКонтрагент,
	|	МАКСИМУМ(РезервированиеРасходы.ОбъектРасчетов.Договор) КАК ИсхДоговор,
	|	МАКСИМУМ(РезервированиеРасходы.ОбъектРасчетов.НаправлениеДеятельности) КАК ИсхНаправлениеДеятельности,
	|	МАКСИМУМ(РезервированиеРасходы.КорАналитикаУчетаПоПартнерам) КАК КорАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(РезервированиеРасходы.АналитикаУчетаПоПартнерам) КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(РезервированиеРасходы.КорОбъектРасчетов) КАК КорОбъектРасчетов,
	|	МАКСИМУМ(РезервированиеРасходы.ОбъектРасчетов) КАК ИсходныйОбъектРасчетов, // объект, с которого зарезервировались средства
	|	МИНИМУМ(РезервированиеРасходы.ДатаВозникновения) КАК ДатаАванса,
	|	МАКСИМУМ(РезервированиеРасходы.Период) КАК ДатаПогашения,
	|	СУММА(РезервированиеПриходы.СуммаРезервированияВал) КАК СобытиеЗнак,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента) КАК ВидСобытия,
	|	МАКСИМУМ(РезервированиеПриходы.ВалютаДокумента) КАК ВалютаДокумента,
	|	СУММА(РезервированиеПриходы.СуммаРезервирования) КАК СуммаПогашения,
	|	СУММА(РезервированиеПриходы.СуммаРезервированияВал) КАК СуммаПогашенияВал,
	|	СУММА(РезервированиеПриходы.СуммаРезервированияУпр) КАК СуммаПогашенияУпр,
	|	СУММА(РезервированиеПриходы.СуммаРезервированияРегл) КАК СуммаПогашенияРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент
	|									КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Валюта
	|				ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|		СУММА(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент
	|									КАК Документ.ПриходныйКассовыйОрдер).Валюта = Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент
	|									КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				ИНАЧЕ
	|					Расчеты.Предоплата
	|		КОНЕЦ) КАК СуммаРезервированияВал,
	|		СУММА(Расчеты.Предоплата) КАК СуммаРезервирования,
	|		СУММА(Расчеты.ПредоплатаУпр) КАК СуммаРезервированияУпр,
	|		СУММА(Расчеты.ПредоплатаРегл) КАК СуммаРезервированияРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И &УчестьРезервированиеАвансов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.ОбъектРасчетов.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|		И Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Предоплата > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ОбъектРасчетов.Организация,
	|		Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор
	|
	|	) КАК РезервированиеПриходы
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		// В расходах содержатся данные по авансу, с которого зарезервировались средства
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РезервированиеРасходы
	|	ПО
	|		РезервированиеПриходы.ДокументРегистратор    = РезервированиеРасходы.ДокументРегистратор
	|		И  РезервированиеПриходы.РасчетныйДокумент   = РезервированиеРасходы.РасчетныйДокумент
	|		И  РезервированиеПриходы.Организация         = РезервированиеРасходы.ОбъектРасчетов.Организация
	|		И  РезервированиеРасходы.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  РезервированиеРасходы.Активность  = ИСТИНА
	|		И  РезервированиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И  РезервированиеРасходы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервированиеПриходы.РасчетныйДокумент,
	|	РезервированиеПриходы.ОбъектРасчетов.Организация,
	|	РезервированиеПриходы.АналитикаУчетаПоПартнерам,
	|	РезервированиеПриходы.ОбъектРасчетов,
	|	РезервированиеПриходы.ДокументРегистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(РезервированиеПриходы.СуммаРезервирования) > 0
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасчетыСКлиентами_ПогашенияАвансов_Предварительная
	|
	|";
	
	УстановитьПоляИндексов(Запрос, ПараметрыРасчета, "РасчетыСКлиентами_ПогашенияАвансов");
	
	ПараметрыПутей = ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены();
	ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей);
	
	Запрос.Выполнить();
	
	
КонецПроцедуры

// Подготовить временную таблицу "ПолученныеАвансыВРазрезеПогашенийИОстатков"
// Создает временную таблицу с колонками:
// * Организация;
// * НаправлениеДеятельности;
// * Контрагент;
// * Договор;
// * ИсхНаправлениеДеятельности - направление, по которому возник аванс;
// * ИсхКонтрагент - контрагент, по которому возник аванс;
// * ИсхДоговор    - договор, по которому возник аванс;
// * РасчетныйДокумент;
// * ИсходнаяАналитикаУчетаПоПартнерам - аналитика, по которой образовался аванс;
// * ИсходныйОбъектРасчетов - объект расчетов, по которому образовался аванс;
// * ДатаАванса;
// * ДатаПогашения - если пустая, значит это остаток;
// * ВалютаДокумента;
// * ДокументРегистратор;
// * СуммаВал - сумма в валюте документа;
// * СуммаУпр;
// * СуммаРегл;
// * Сумма.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ПараметрыРасчета        - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура ПодготовитьВТ_ПолученныеАвансыВРазрезеПогашенийИОстатков(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	ПараметрыРасчетаПоступленийПогашений = ИнициализироватьПараметрыПодготовкиРасчетовАвансов(ПараметрыРасчета);
	ПараметрыРасчетаПоступленийПогашений.ПоляИндексовВручную.Очистить();
	Если ЗначениеЗаполнено(ПараметрыРасчета.Организации) Тогда
		ПараметрыРасчетаПоступленийПогашений.ВключитьОтборПоОрганизациям = Истина;
	КонецЕсли;
	
	Если НЕ РасчетСебестоимостиПрикладныеАлгоритмы.ВременнаяТаблицаСуществует(МенеджерВременныхТаблиц,
		"РасчетыСКлиентами_Авансы") Тогда
		ПодготовитьВТ_РасчетыСКлиентами_Авансы(
			МенеджерВременныхТаблиц,
			ПараметрыРасчетаПоступленийПогашений);
	КонецЕсли;
	
	Если НЕ РасчетСебестоимостиПрикладныеАлгоритмы.ВременнаяТаблицаСуществует(МенеджерВременныхТаблиц,
		"РасчетыСКлиентами_ПогашенияАвансов") Тогда
		ПодготовитьВТ_РасчетыСКлиентами_ПогашенияАвансов(
			МенеджерВременныхТаблиц,
			ПараметрыРасчетаПоступленийПогашений);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеАвансов.Организация КАК Организация,
	|	ДанныеАвансов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеАвансов.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеАвансов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеАвансов.ДатаАванса КАК ДатаАванса,
	|	ДанныеАвансов.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	ДанныеАвансов.ИсходныйОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|	ДанныеАвансов.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеАвансов.Контрагент КАК Контрагент,
	|	ДанныеАвансов.Договор КАК Договор,
	|	ДанныеАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеАвансов.ИсхКонтрагент КАК ИсхКонтрагент,
	|	ДанныеАвансов.ИсхДоговор КАК ИсхДоговор,
	|	ДанныеАвансов.ИсхНаправлениеДеятельности КАК ИсхНаправлениеДеятельности
	|ПОМЕСТИТЬ ДанныеАвансовПолученных
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПоступленияАвансов.Организация КАК Организация,
	|		ПоступленияАвансов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ПоступленияАвансов.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ПоступленияАвансов.АналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|		ПоступленияАвансов.ОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|		ПоступленияАвансов.РасчетныйДокумент КАК РасчетныйДокумент,
	|		ПоступленияАвансов.ДатаАванса КАК ДатаАванса,
	|		ПоступленияАвансов.ВалютаДокумента КАК ВалютаДокумента,
	|		ПоступленияАвансов.Контрагент КАК Контрагент,
	|		ПоступленияАвансов.Договор КАК Договор,
	|		ПоступленияАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПоступленияАвансов.Контрагент КАК ИсхКонтрагент,
	|		ПоступленияАвансов.Договор КАК ИсхДоговор,
	|		ПоступленияАвансов.НаправлениеДеятельности КАК ИсхНаправлениеДеятельности
	|	ИЗ
	|		РасчетыСКлиентами_Авансы КАК ПоступленияАвансов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПогашенияАвансов.Организация КАК Организация,
	|		ПогашенияАвансов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ПогашенияАвансов.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ПогашенияАвансов.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|		ПогашенияАвансов.ИсходныйОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|		ПогашенияАвансов.РасчетныйДокумент КАК РасчетныйДокумент,
	|		ПогашенияАвансов.ДатаАванса КАК ДатаАванса,
	|		ПогашенияАвансов.ВалютаДокумента КАК ВалютаДокумента,
	|		ПогашенияАвансов.Контрагент КАК Контрагент,
	|		ПогашенияАвансов.Договор КАК Договор,
	|		ПогашенияАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПогашенияАвансов.ИсхКонтрагент КАК ИсхКонтрагент,
	|		ПогашенияАвансов.ИсхДоговор КАК ИсхДоговор,
	|		ПогашенияАвансов.ИсхНаправлениеДеятельности КАК ИсхНаправлениеДеятельности
	|	ИЗ
	|		РасчетыСКлиентами_ПогашенияАвансов КАК ПогашенияАвансов
	|
	|	) КАК ДанныеАвансов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Авансы.Организация                       КАК Организация,
	|	Авансы.НаправлениеДеятельности           КАК НаправлениеДеятельности,
	|	Авансы.Контрагент                        КАК Контрагент,
	|	Авансы.Договор                           КАК Договор,
	|	Авансы.ИсхНаправлениеДеятельности        КАК ИсхНаправлениеДеятельности,
	|	Авансы.ИсхКонтрагент                     КАК ИсхКонтрагент,
	|	Авансы.ИсхДоговор                        КАК ИсхДоговор,
	|	Авансы.РасчетныйДокумент                 КАК РасчетныйДокумент,
	|	Авансы.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	Авансы.ИсходныйОбъектРасчетов            КАК ИсходныйОбъектРасчетов,
	|	Авансы.ДатаАванса                        КАК ДатаАванса,
	|	Авансы.ДатаПогашения                     КАК ДатаПогашения,
	|	Авансы.ВалютаДокумента                   КАК ВалютаДокумента,
	|	Авансы.ДокументРегистратор               КАК ДокументРегистратор,
	|	Авансы.СуммаВал                          КАК СуммаВал,
	|	Авансы.СуммаУпр                          КАК СуммаУпр,
	|	Авансы.СуммаРегл                         КАК СуммаРегл,
	|	Авансы.Сумма                             КАК Сумма
	|ПОМЕСТИТЬ ПолученныеАвансыВРазрезеПогашенийИОстатков
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПогашенияАвансов.Организация КАК Организация,
	|		ПогашенияАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПогашенияАвансов.Контрагент КАК Контрагент,
	|		ПогашенияАвансов.Договор КАК Договор,
	|		ПогашенияАвансов.ИсхНаправлениеДеятельности КАК ИсхНаправлениеДеятельности,
	|		ПогашенияАвансов.ИсхКонтрагент КАК ИсхКонтрагент,
	|		ПогашенияАвансов.ИсхДоговор КАК ИсхДоговор,
	|		ПогашенияАвансов.РасчетныйДокумент КАК РасчетныйДокумент,
	|		ПогашенияАвансов.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|		ПогашенияАвансов.ИсходныйОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|		ПогашенияАвансов.ДатаАванса КАК ДатаАванса,
	|		ПогашенияАвансов.ДатаПогашения КАК ДатаПогашения,
	|		МАКСИМУМ(ПогашенияАвансов.ВалютаДокумента) КАК ВалютаДокумента,
	|		ПогашенияАвансов.ДокументРегистратор КАК ДокументРегистратор,
	|		СУММА(ПогашенияАвансов.СуммаПогашенияВал)  КАК СуммаВал,
	|		СУММА(ПогашенияАвансов.СуммаПогашенияУпр)  КАК СуммаУпр,
	|		СУММА(ПогашенияАвансов.СуммаПогашенияРегл) КАК СуммаРегл,
	|		СУММА(ПогашенияАвансов.СуммаПогашения)     КАК Сумма
	|	ИЗ
	|		РасчетыСКлиентами_ПогашенияАвансов КАК ПогашенияАвансов
	|
	|	СГРУППИРОВАТЬ ПО
	|		ПогашенияАвансов.Организация,
	|		ПогашенияАвансов.НаправлениеДеятельности,
	|		ПогашенияАвансов.Контрагент,
	|		ПогашенияАвансов.Договор,
	|		ПогашенияАвансов.ИсхНаправлениеДеятельности,
	|		ПогашенияАвансов.ИсхКонтрагент,
	|		ПогашенияАвансов.ИсхДоговор,
	|		ПогашенияАвансов.РасчетныйДокумент,
	|		ПогашенияАвансов.ДокументРегистратор,
	|		ПогашенияАвансов.ДатаАванса,
	|		ПогашенияАвансов.ДатаПогашения,
	|		ПогашенияАвансов.ИсходнаяАналитикаУчетаПоПартнерам,
	|		ПогашенияАвансов.ИсходныйОбъектРасчетов
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеАвансов.Организация,
	|		ДанныеАвансов.НаправлениеДеятельности,
	|		ДанныеАвансов.Контрагент,
	|		ДанныеАвансов.Договор,
	|		ДанныеАвансов.ИсхНаправлениеДеятельности,
	|		ДанныеАвансов.ИсхКонтрагент,
	|		ДанныеАвансов.ИсхДоговор,
	|		ДанныеАвансов.РасчетныйДокумент,
	|		ДанныеАвансов.ИсходнаяАналитикаУчетаПоПартнерам,
	|		ДанныеАвансов.ИсходныйОбъектРасчетов,
	|		ДанныеАвансов.ДатаАванса,
	|		МАКСИМУМ(ВЫБОР
	|			КОГДА ДанныеАвансов.РасчетныйДокумент ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				И ВЫРАЗИТЬ(ОстаткиПоАвансам.РасчетныйДокумент КАК Документ.ВзаимозачетЗадолженности).ВидОперации В
	|					(ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера),
	|					ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера))
	|				ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДанныеАвансов.ДатаАванса, ДЕНЬ, 1), ДЕНЬ)
	|			ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|		КОНЕЦ) КАК ДатаПогашения,
	|		МАКСИМУМ(ДанныеАвансов.ВалютаДокумента) КАК ВалютаДокумента,
	|		НЕОПРЕДЕЛЕНО КАК ДокументРегистратор,
	|		СУММА(ВЫБОР
	|			КОГДА ОстаткиПоАвансам.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ОстаткиПоАвансам.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = ДанныеАвансов.Организация.ВалютаРегламентированногоУчета
	|				ТОГДА ОстаткиПоАвансам.ПредоплатаРеглОстаток
	|			КОГДА ОстаткиПоАвансам.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(ОстаткиПоАвансам.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = ДанныеАвансов.Организация.ВалютаРегламентированногоУчета
	|				ТОГДА ОстаткиПоАвансам.ПредоплатаРеглОстаток
	|			ИНАЧЕ ОстаткиПоАвансам.ПредоплатаОстаток
	|		КОНЕЦ)                                        КАК СуммаВал,
	|		СУММА(ОстаткиПоАвансам.ПредоплатаУпрОстаток)  КАК СуммаУпр,
	|		СУММА(ОстаткиПоАвансам.ПредоплатаРеглОстаток) КАК СуммаРегл,
	|		СУММА(ОстаткиПоАвансам.ПредоплатаОстаток)     КАК Сумма
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ДатаОкончанияВключая,
	|			&НоваяАрхитектураВзаиморасчетов
	|			И (АналитикаУчетаПоПартнерам,
	|				ОбъектРасчетов,
	|				РасчетныйДокумент) В 
	|					(ВЫБРАТЬ 
	|						ДанныеАвансов.АналитикаУчетаПоПартнерам,
	|						ДанныеАвансов.ОбъектРасчетов,
	|						ДанныеАвансов.РасчетныйДокумент
	|					ИЗ
	|						ДанныеАвансовПолученных КАК ДанныеАвансов
	|					)
	|		) КАК ОстаткиПоАвансам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДанныеАвансовПолученных КАК ДанныеАвансов
	|		ПО
	|			ОстаткиПоАвансам.АналитикаУчетаПоПартнерам = ДанныеАвансов.АналитикаУчетаПоПартнерам
	|			И ОстаткиПоАвансам.ОбъектРасчетов          = ДанныеАвансов.ОбъектРасчетов
	|			И ОстаткиПоАвансам.РасчетныйДокумент       = ДанныеАвансов.РасчетныйДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеАвансов.Организация,
	|		ДанныеАвансов.НаправлениеДеятельности,
	|		ДанныеАвансов.Контрагент,
	|		ДанныеАвансов.Договор,
	|		ДанныеАвансов.ИсхНаправлениеДеятельности,
	|		ДанныеАвансов.ИсхКонтрагент,
	|		ДанныеАвансов.ИсхДоговор,
	|		ДанныеАвансов.РасчетныйДокумент,
	|		ДанныеАвансов.ИсходнаяАналитикаУчетаПоПартнерам,
	|		ДанныеАвансов.ИсходныйОбъектРасчетов,
	|		ДанныеАвансов.ДатаАванса
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеАвансов.Организация,
	|		ДанныеАвансов.НаправлениеДеятельности,
	|		ДанныеАвансов.Контрагент,
	|		ДанныеАвансов.Договор,
	|		ДанныеАвансов.ИсхНаправлениеДеятельности,
	|		ДанныеАвансов.ИсхКонтрагент,
	|		ДанныеАвансов.ИсхДоговор,
	|		ДанныеАвансов.РасчетныйДокумент,
	|		ДанныеАвансов.ИсходнаяАналитикаУчетаПоПартнерам,
	|		ДанныеАвансов.ИсходныйОбъектРасчетов,
	|		ДанныеАвансов.ДатаАванса,
	|		ДАТАВРЕМЯ(1,1,1) КАК ДатаПогашения,
	|		МАКСИМУМ(ДанныеАвансов.ВалютаДокумента) КАК ВалютаДокумента,
	|		НЕОПРЕДЕЛЕНО КАК ДокументРегистратор,
	|		-СУММА(ВЫБОР
	|			КОГДА ОстаткиПоАвансам.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ОстаткиПоАвансам.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = ДанныеАвансов.Организация.ВалютаРегламентированногоУчета
	|				ТОГДА ОстаткиПоАвансам.ПредоплатаРеглОстаток
	|			КОГДА ОстаткиПоАвансам.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(ОстаткиПоАвансам.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = ДанныеАвансов.Организация.ВалютаРегламентированногоУчета
	|				ТОГДА ОстаткиПоАвансам.ПредоплатаРеглОстаток
	|			ИНАЧЕ ОстаткиПоАвансам.ПредоплатаОстаток + ОстаткиПоАвансам.КВозвратуОстаток
	|		КОНЕЦ)                                         КАК СуммаВал,
	|		-СУММА(ОстаткиПоАвансам.ПредоплатаУпрОстаток)  КАК СуммаУпр,
	|		-СУММА(ОстаткиПоАвансам.ПредоплатаРеглОстаток) КАК СуммаРегл,
	|		-СУММА(ОстаткиПоАвансам.ПредоплатаОстаток + ОстаткиПоАвансам.КВозвратуОстаток) КАК Сумма
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&ДатаОкончанияВключая,
	|			НЕ &НоваяАрхитектураВзаиморасчетов
	|			И (АналитикаУчетаПоПартнерам,
	|				ЗаказКлиента,
	|				РасчетныйДокумент) В 
	|					(ВЫБРАТЬ 
	|						ДанныеАвансов.АналитикаУчетаПоПартнерам,
	|						ДанныеАвансов.ОбъектРасчетов,
	|						ДанныеАвансов.РасчетныйДокумент
	|					ИЗ
	|						ДанныеАвансовПолученных КАК ДанныеАвансов
	|					)
	|		) КАК ОстаткиПоАвансам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДанныеАвансовПолученных КАК ДанныеАвансов
	|		ПО
	|			ОстаткиПоАвансам.АналитикаУчетаПоПартнерам = ДанныеАвансов.АналитикаУчетаПоПартнерам
	|			И ОстаткиПоАвансам.ЗаказКлиента            = ДанныеАвансов.ОбъектРасчетов
	|			И ОстаткиПоАвансам.РасчетныйДокумент       = ДанныеАвансов.РасчетныйДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеАвансов.Организация,
	|		ДанныеАвансов.НаправлениеДеятельности,
	|		ДанныеАвансов.Контрагент,
	|		ДанныеАвансов.Договор,
	|		ДанныеАвансов.ИсхНаправлениеДеятельности,
	|		ДанныеАвансов.ИсхКонтрагент,
	|		ДанныеАвансов.ИсхДоговор,
	|		ДанныеАвансов.РасчетныйДокумент,
	|		ДанныеАвансов.ИсходнаяАналитикаУчетаПоПартнерам,
	|		ДанныеАвансов.ИсходныйОбъектРасчетов,
	|		ДанныеАвансов.ДатаАванса
	|
	|	) КАК Авансы
	|
	|ГДЕ
	|	ИСТИНА
	|	И (Авансы.ДатаАванса МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|	И Авансы.СуммаВал <> 0
	|;
	|
	|УНИЧТОЖИТЬ ДанныеАвансовПолученных
	|;
	|
	|УНИЧТОЖИТЬ РасчетыСКлиентами_Авансы
	|;
	|
	|УНИЧТОЖИТЬ РасчетыСКлиентами_ПогашенияАвансов
	|;
	|";
	
	УстановитьПоляИндексов(Запрос, ПараметрыРасчета, "ПолученныеАвансыВРазрезеПогашенийИОстатков");
	
	ПараметрыПутей = ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены();
	ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область АвансыВыданные

// Подготовить временную таблицу "РасчетыСПоставщиками_Авансы"
// Создает временную таблицу с колонками:
// 	* РасчетныйДокумент;
// 	* ДокументРегистратор;
// 	* Организация;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* НаправлениеДеятельности;
// 	* Контрагент;
// 	* Договор;
// 	* ДатаАванса;
// 	* ВалютаДокумента;
// 	* СуммаАвансаВал - сумма в валюте документа;
// 	* СуммаАванса;
// 	* СуммаАвансаУпр;
// 	* СуммаАвансаРегл.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ПараметрыРасчета        - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура ПодготовитьВТ_РасчетыСПоставщиками_Авансы(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"// Новая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов.Контрагент КАК Контрагент,
	|	Расчеты.ОбъектРасчетов.Договор КАК Договор,
	|	МИНИМУМ(ОтборАвансов.ДатаАванса) КАК ДатаАванса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|			ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|						= ОтборАвансов.ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|						= ОтборАвансов.ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАванса,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаРегл
	|ПОМЕСТИТЬ РасчетыСПоставщиками_Авансы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|		Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		МИНИМУМ(Расчеты.ДатаВозникновения) КАК ДатаАванса
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.ОбъектРасчетов.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.ДатаВозникновения МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|		
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов.Организация,
	|		Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|	
	|	) КАК ОтборАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ПО
	|		ОтборАвансов.ДокументРегистратор    = Расчеты.ДокументРегистратор
	|		И  ОтборАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборАвансов.Организация         = Расчеты.ОбъектРасчетов.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.ДатаВозникновения МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|ГДЕ
	|	ИСТИНА
	|	И (ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).ПроведеноБанком
	|			ИЛИ НЕ Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.ОбъектРасчетов.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Старая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.Регистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	МИНИМУМ(Расчеты.Период) КАК ДатаАванса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|			ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|						= ОтборАвансов.ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|						= ОтборАвансов.ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ (Расчеты.Предоплата + Расчеты.КВозврату)
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаВал,
	|	СУММА((Расчеты.Предоплата + Расчеты.КВозврату) * ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|		КОНЕЦ) КАК СуммаАванса,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|		КОНЕЦ) КАК СуммаАвансаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|		КОНЕЦ) КАК СуммаАвансаРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.Регистратор КАК ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Активность = ИСТИНА
	|
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.Регистратор,
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета
	|
	|	ИМЕЮЩИЕ
	|		СУММА((Расчеты.Предоплата + Расчеты.КВозврату) *
	|			ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -1
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА 1
	|			КОНЕЦ) > 0
	|
	|	) КАК ОтборАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ПО
	|		ОтборАвансов.ДокументРегистратор    = Расчеты.Регистратор
	|		И  ОтборАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|ГДЕ
	|	ИСТИНА
	|	И (ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).ПроведеноБанком
	|			ИЛИ НЕ Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.Регистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА((Расчеты.Предоплата + Расчеты.КВозврату) * ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|		КОНЕЦ) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|";
	
	УстановитьПоляИндексов(Запрос, ПараметрыРасчета, "РасчетыСПоставщиками_Авансы");
	
	ПараметрыПутей = ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены();
	ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей);
	
	Запрос.Выполнить();
	
	
КонецПроцедуры

// Подготовить временную таблицу "РасчетыСПоставщиками_ПогашенияАвансов"
// Создает временную таблицу с колонками:
// 	* РасчетныйДокумент;
// 	* Организация;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* ДокументРегистратор;
// 	* Контрагент;
// 	* Договор;
// 	* НаправлениеДеятельности;
// 	* ИсхКонтрагент - контрагент, по которому возник аванс;
// 	* ИсхДоговор    - договор, по которому возник аванс;
// 	* ИсхНаправлениеДеятельности - направление, по которому возник аванс;
// 	* КорАналитикаУчетаПоПартнерам;
// 	* ИсходнаяАналитикаУчетаПоПартнерам - аналитика, по которой образовался аванс;
// 	* КорОбъектРасчетов;
// 	* ИсходныйОбъектРасчетов - объект расчетов, по которому образовался аванс;
// 	* ДатаАванса;
// 	* ДатаПогашения;
// 	* СобытиеЗнак - Если погашение произошло по причине зачета аванса, тогда СобытиеЗнак >= 0,
// 	                Если погашение произошло по причине возврата/списания задолженности, тогда СобытиеЗнак < 0;
// 	* ВидСобытия - событие, в связи с которым произошло погашение аванса. Возможные события:
// 	         - Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика,
// 	         - Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику;
// 	* ВалютаДокумента;
// 	* СуммаПогашения;
// 	* СуммаПогашенияВал - сумма в валюте документа;
// 	* СуммаПогашенияУпр;
// 	* СуммаПогашенияРегл.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ПараметрыРасчета        - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура ПодготовитьВТ_РасчетыСПоставщиками_ПогашенияАвансов(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"// Новая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.ОбъектРасчетов.Контрагент КАК Контрагент,
	|	Расчеты.ОбъектРасчетов.Договор КАК Договор,
	|	Расчеты.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ Расчеты.КорОбъектРасчетов = &ПустойОбъектРасчетов
	|				И НЕ ISNULL(Расчеты.КорОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО, ИСТИНА)
	|			ТОГДА Расчеты.КорОбъектРасчетов.Контрагент
	|		ИНАЧЕ
	|			Расчеты.ОбъектРасчетов.Контрагент
	|		КОНЕЦ) КАК ИсхКонтрагент,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ Расчеты.КорОбъектРасчетов = &ПустойОбъектРасчетов
	|				И НЕ ISNULL(Расчеты.КорОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО, ИСТИНА)
	|			ТОГДА Расчеты.КорОбъектРасчетов.Договор
	|		ИНАЧЕ
	|			Расчеты.ОбъектРасчетов.Договор
	|		КОНЕЦ) КАК ИсхДоговор,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ Расчеты.КорОбъектРасчетов = &ПустойОбъектРасчетов
	|				И НЕ ISNULL(Расчеты.КорОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО, ИСТИНА)
	|			ТОГДА Расчеты.КорОбъектРасчетов.НаправлениеДеятельности
	|		ИНАЧЕ
	|			Расчеты.ОбъектРасчетов.НаправлениеДеятельности
	|		КОНЕЦ) КАК ИсхНаправлениеДеятельности,
	|	МАКСИМУМ(Расчеты.КорАналитикаУчетаПоПартнерам) КАК КорАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Расчеты.КорАналитикаУчетаПоПартнерам <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|			ТОГДА Расчеты.КорАналитикаУчетаПоПартнерам
	|		ИНАЧЕ
	|			Расчеты.АналитикаУчетаПоПартнерам
	|		КОНЕЦ) КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(Расчеты.КорОбъектРасчетов) КАК КорОбъектРасчетов,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ Расчеты.КорОбъектРасчетов = &ПустойОбъектРасчетов
	|				И НЕ ISNULL(Расчеты.КорОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО, ИСТИНА)
	|			ТОГДА Расчеты.КорОбъектРасчетов
	|		ИНАЧЕ
	|			Расчеты.ОбъектРасчетов
	|		КОНЕЦ) КАК ИсходныйОбъектРасчетов,
	|	МИНИМУМ(ОтборПогашенийАвансов.ДатаАванса) КАК ДатаАванса,
	|	МАКСИМУМ(ОтборПогашенийАвансов.ДатаПогашения) КАК ДатаПогашения,
	|	МАКСИМУМ(ОтборПогашенийАвансов.СобытиеЗнак) КАК СобытиеЗнак,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА Расчеты.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|			КОГДА Расчеты.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|			ИНАЧЕ
	|				НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ВидСобытия,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|			ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|						= ОтборПогашенийАвансов.ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|						= ОтборПогашенийАвансов.ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашения,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияРегл
	|ПОМЕСТИТЬ РасчетыСПоставщиками_ПогашенияАвансов_Предварительная
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов.Организация КАК Организация,
	|		Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		МИНИМУМ(Расчеты.ДатаВозникновения) КАК ДатаАванса,
	|		МАКСИМУМ(Расчеты.Период) КАК ДатаПогашения,
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|		СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 0
	|			КОГДА Расчеты.ХозяйственнаяОперация В
	|					(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса))
	|				ТОГДА Расчеты.Предоплата
	|			ИНАЧЕ
	|				-Расчеты.Предоплата
	|		КОНЕЦ) КАК СобытиеЗнак
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.ОбъектРасчетов.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|		
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов.Организация,
	|		Расчеты.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|	
	|	) КАК ОтборПогашенийАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ПО
	|		ОтборПогашенийАвансов.ДокументРегистратор    = Расчеты.ДокументРегистратор
	|		И  ОтборПогашенийАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборПогашенийАвансов.Организация         = Расчеты.ОбъектРасчетов.Организация
	|		И  Расчеты.Период                            МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность                        = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ОбъектРасчетов.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.ДокументРегистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Старая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику КАК ОбъектРасчетов,
	|	Расчеты.Регистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК ИсхКонтрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК ИсхДоговор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК ИсхНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	&ПустойОбъектРасчетов КАК КорОбъектРасчетов,
	|	Расчеты.ЗаказПоставщику КАК ИсходныйОбъектРасчетов,
	|	МИНИМУМ(Расчеты.ДатаПлатежа) КАК ДатаАванса,
	|	МАКСИМУМ(ОтборПогашенийАвансов.ДатаПогашения) КАК ДатаПогашения,
	|	МАКСИМУМ(ОтборПогашенийАвансов.СобытиеЗнак) КАК СобытиеЗнак,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА ОтборПогашенийАвансов.СобытиеЗнак < 0
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|		КОНЕЦ) КАК ВидСобытия,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|			ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|						= ОтборПогашенийАвансов.ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|						= ОтборПогашенийАвансов.ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашения,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Расчеты.Регистратор КАК ДокументРегистратор,
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.Период КАК ДатаПогашения,
	|		СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА 0
	|				КОГДА Расчеты.ХозяйственнаяОперация В (
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику),
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|						)
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				ИНАЧЕ
	|					-Расчеты.ПредоплатаРегл
	|			КОНЕЦ) КАК СобытиеЗнак,
	|		СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК СуммаЗачета
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Регистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета,
	|		Расчеты.Период
	|
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ) > 0
	|	) КАК ОтборПогашенийАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ПО
	|		ОтборПогашенийАвансов.ДокументРегистратор    = Расчеты.Регистратор
	|		И  ОтборПогашенийАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборПогашенийАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику,
	|	Расчеты.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Погашения.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Погашения.Организация КАК Организация,
	|	Погашения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Погашения.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Погашения.ДокументРегистратор КАК ДокументРегистратор,
	|	Погашения.Контрагент КАК Контрагент,
	|	Погашения.Договор КАК Договор,
	|	Погашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Погашения.ИсхКонтрагент КАК ИсхКонтрагент,
	|	Погашения.ИсхДоговор КАК ИсхДоговор,
	|	Погашения.ИсхНаправлениеДеятельности КАК ИсхНаправлениеДеятельности,
	|	Погашения.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Погашения.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	Погашения.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Погашения.ИсходныйОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|	Погашения.ДатаАванса КАК ДатаАванса,
	|	Погашения.ДатаПогашения КАК ДатаПогашения,
	|	МАКСИМУМ(Погашения.СобытиеЗнак) КАК СобытиеЗнак,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Погашения.ВидСобытия = НЕОПРЕДЕЛЕНО
	|		// Если вид события не удалось идентифицировать сразу, смотрим вторичные признаки
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ВидыСобытий.ХозяйственнаяОперация, НЕОПРЕДЕЛЕНО) =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|				КОГДА ЕСТЬNULL(ВидыСобытий.ХозяйственнаяОперация, НЕОПРЕДЕЛЕНО) =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|				КОГДА Погашения.СобытиеЗнак < 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|				ИНАЧЕ
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|			КОНЕЦ
	|		ИНАЧЕ
	|			Погашения.ВидСобытия
	|	КОНЕЦ) КАК ВидСобытия,
	|	МАКСИМУМ(Погашения.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(Погашения.СуммаПогашения) КАК СуммаПогашения,
	|	МАКСИМУМ(Погашения.СуммаПогашенияВал) КАК СуммаПогашенияВал,
	|	МАКСИМУМ(Погашения.СуммаПогашенияУпр) КАК СуммаПогашенияУпр,
	|	МАКСИМУМ(Погашения.СуммаПогашенияРегл) КАК СуммаПогашенияРегл
	|ПОМЕСТИТЬ РасчетыСПоставщиками_ПогашенияАвансов
	|ИЗ
	|	РасчетыСПоставщиками_ПогашенияАвансов_Предварительная КАК Погашения
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		// Находим вид события, если изначально не удалось идентифицировать
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК ВидыСобытий
	|	ПО
	|		&НоваяАрхитектураВзаиморасчетов
	|		И Погашения.ВидСобытия          = НЕОПРЕДЕЛЕНО
	|		И Погашения.ДокументРегистратор = ВидыСобытий.ДокументРегистратор
	|		И ВидыСобытий.Период            <= &ДатаОкончания
	|		И ВидыСобытий.ВидДвижения       = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ВидыСобытий.ХозяйственнаяОперация В
	|			(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|			 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику))
	|
	|СГРУППИРОВАТЬ ПО
	|	Погашения.РасчетныйДокумент,
	|	Погашения.Организация,
	|	Погашения.АналитикаУчетаПоПартнерам,
	|	Погашения.ОбъектРасчетов,
	|	Погашения.ДокументРегистратор,
	|	Погашения.Контрагент,
	|	Погашения.Договор,
	|	Погашения.НаправлениеДеятельности,
	|	Погашения.ИсхКонтрагент,
	|	Погашения.ИсхДоговор,
	|	Погашения.ИсхНаправлениеДеятельности,
	|	Погашения.КорАналитикаУчетаПоПартнерам,
	|	Погашения.ИсходнаяАналитикаУчетаПоПартнерам,
	|	Погашения.КорОбъектРасчетов,
	|	Погашения.ИсходныйОбъектРасчетов,
	|	Погашения.ДатаАванса,
	|	Погашения.ДатаПогашения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасчетыСПоставщиками_ПогашенияАвансов_Предварительная
	|
	|";
	
	
	УстановитьПоляИндексов(Запрос, ПараметрыРасчета, "РасчетыСПоставщиками_ПогашенияАвансов");
	
	ПараметрыПутей = ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены();
	ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей);
	
	Запрос.Выполнить();
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВзаиморасчетыСервер.Использование_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	НоваяСтрока.ДействиеОформление = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВзаиморасчетыСервер.Оформление_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ВзаиморасчетыСервер.Выполнить_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
		НоваяСтрока.ВыполняетсяПриПредварительномЗакрытииМесяца = Истина;
КонецПроцедуры

// Обработчики этапа.

// Параметры:
// 	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
Процедура Использование_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аналитики.Организация В (&МассивОрганизаций)
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аналитики.Организация В (&МассивОрганизаций)
	|	И Расчеты.Активность";
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ЕстьДвиженияПоРасчетам = НЕ Запрос.Выполнить().Пустой();
	
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.Организации = ПараметрыРасчета.МассивОрганизаций;
		
		НачалоРасчета = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(КонецМесяца(ПараметрыРасчета.Период), АналитикиРасчета);
		ПериодВДиапазонеПересчета = (ЗначениеЗаполнено(НачалоРасчета) И НачалоРасчета <= ПараметрыРасчета.ПериодРегистрации);
		
	Иначе
		
		НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код,
			ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,
			Неопределено,
			ПараметрыРасчета.МассивОрганизаций);
		
		ПериодВДиапазонеПересчета = ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина);
		ПараметрыОбработчика.ТаблицаПояснения.Очистить();
		
		Если ПериодВДиапазонеПересчета Тогда
			Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.ПериодРегистрации));
		Иначе
			Запрос.УстановитьПараметр("НачалоМесяца", Дата(1,1,1,1,1,2));
		КонецЕсли;
		Запрос.УстановитьПараметр("ПериодВДиапазонеПересчета", ПериодВДиапазонеПересчета);
		
		Запрос.Текст = ОперативныеВзаиморасчетыСервер.ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам("ВТНекорректныеОстаткиВзаиморасчетов");
		Запрос.Выполнить();
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтОстатки; УНИЧТОЖИТЬ ВтРучныеКорректировки";
		Запрос.Выполнить();
		
		Запрос.Текст = ОперативныеВзаиморасчетыСервер.ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам("ВТНекорректныеОстаткиВзаиморасчетовРучныеКорректировки", Ложь);
		Запрос.Выполнить();
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтРучныеКорректировки";
		Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("ПорядокЗачетаДокументовПоДатеОперации", 
		                          Константы.ПорядокЗачетаДокументовПоДатеОперации.Получить() = 0);
		
		Запрос.Текст = ОперативныеВзаиморасчетыСервер.ТекстЗапросаРазвернутоеСальдо("ВТРазвернутоеСальдоВзаиморасчетов");
		Запрос.Выполнить();
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтСальдо; УНИЧТОЖИТЬ ВтРучныеКорректировки";
		Запрос.Выполнить();
		
		Запрос.Текст = ОперативныеВзаиморасчетыСервер.ТекстЗапросаРазвернутоеСальдо("ВТРазвернутоеСальдоВзаиморасчетовРучныеКорректировки", Ложь);
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками);
	РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами, РегистрыДляРасчета);
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ЕстьВалютныеОстатки = Документы.РасчетКурсовыхРазниц.ЕстьВалютныеОстатки(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценкаВзаиморасчетов(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.ПериодРегистрации);
	
	ВтНекорректныхОстатковРучныеКорректировки = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТНекорректныеОстаткиВзаиморасчетовРучныеКорректировки");
	ВтРазвернутогоСальдоРучныеКорректировки = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТРазвернутоеСальдоВзаиморасчетовРучныеКорректировки");

	ЕстьНекорректныеРучныеКорректировки = ВтНекорректныхОстатковРучныеКорректировки <> Неопределено 
		И Не ВтНекорректныхОстатковРучныеКорректировки.ПолучитьДанные().Пустой()
		Или ВтРазвернутогоСальдоРучныеКорректировки <> Неопределено
		И Не ВтРазвернутогоСальдоРучныеКорректировки.ПолучитьДанные().Пустой();
	
	Если НЕ ТребуетсяПереоценка И НЕ ПериодВДиапазонеПересчета И Не ЕстьНекорректныеРучныеКорректировки Тогда
		
		Если НЕ ЕстьДвиженияПоРасчетам Тогда
			
			// Расчет не требуется.
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Нет движений по взаиморасчетам с клиентами и поставщиками.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
			Если НЕ ЕстьВалютныеОстатки Тогда
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
					ПараметрыОбработчика,
					НСтр("ru = 'Нет валютных остатков по взаиморасчетам с клиентами и поставщиками.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			КонецЕсли;
			
		Иначе
			// Расчет выполнен успешно.
		КонецЕсли;
		
	Иначе
		
		// Требуется перерасчет.
		Если ПериодВДиапазонеПересчета Тогда
			
			ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = НачалоМесяца(НачалоРасчета);
			
			ТекстОперации = НСтр("ru = 'Формирование движений начиная с периода %1'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОперации,
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоРасчета)));
			
		КонецЕсли;
		
		Если ТребуетсяПереоценка Тогда
			
			ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
				Метаданные.Отчеты.СправкаРасчетПереоценкиВалютныхСредств.ПолноеИмя() + ".Форма", Истина);
			ДействиеПодробнее.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			ДействиеПодробнее.ПараметрыФормы.Вставить("ВсеОрганизации", НЕ ЗначениеЗаполнено(ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций));
			
			Если ПериодВДиапазонеПересчета Тогда
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
					ПараметрыОбработчика,
					НСтр("ru = 'Расчет курсовых разниц по взаиморасчетам с клиентами и поставщиками.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию(),
					ДействиеПодробнее);
			Иначе
				ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
					ПараметрыОбработчика,
					НСтр("ru = 'Расчет курсовых разниц по взаиморасчетам с клиентами и поставщиками.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию(),
					ДействиеПодробнее);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
Процедура Оформление_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Актуализация движений документов по данным взаиморасчетов'");
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Выполнить'");
	Иначе
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Формирование движений по данным взаиморасчетов'");
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Сформировать'");
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

Процедура ОписаниеПроверок_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ТаблицаПроверок) Экспорт
	
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		
		// Расхождения остатков оперативных и финансовых регистров взаиморасчетов.
		ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			"ПроверкаОстатковВзаиморасчетов",
			Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов,
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
			"ВзаиморасчетыСервер.ПроверкаОстатковВзаиморасчетов");
		
		ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			НСтр("ru = 'Расхождения в регистрах взаиморасчетов'"),
			НСтр("ru = 'Существует 2 способа исправления: 
				|1) Закрытие месяца выявит расхождения и скорректирует остатки на начало закрываемого месяца.
				|Задания к переотражению в БУ, МФУ, НДС и к закрытию месяца при этом созданы не будут.
				|2) Для исправления движений документов, приведших к некорректным остаткам необходимо перепровести соответствующие документы.'"));
		
		// Некорректируемые автоматически расхождения остатков оперативных и финансовых регистров взаиморасчетов 
		ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			"ПроверкаОстатковВзаиморасчетовРучнаяКорректировка",
			Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов,
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
			"ВзаиморасчетыСервер.ПроверкаОстатковВзаиморасчетовРучнаяКорректировка");
			
		ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			НСтр("ru = 'Расхождения в регистрах взаиморасчетов'"),
			НСтр("ru = 'По указанным аналитикам и объектам расчетов обнаружены ручные корректировки регистров.
				|Исправление возможно только ручной корректировкой регистров.'"));
		
		// Развернутое сальдо по взаиморасчетам.
		ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			"ПроверкаРазвернутогоСальдо",
			Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов,
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
			"ВзаиморасчетыСервер.ПроверкаРазвернутогоСальдо");
		
		ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			НСтр("ru = 'Развернутое сальдо по регистрам взаиморасчетов'"),
			НСтр("ru = 'При наличии развернутого сальдо по взаиморасчетам в рамках одного объекта расчетов и аналитики
				|могут возникать ошибки распределения взаиморасчетов в финансовых регистрах.'"));
			
		// Некорректируемое автоматически развернутое сальдо по взаиморасчетам
		ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			"ПроверкаРазвернутогоСальдоРучнаяКорректировка",
			Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов,
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
			"ВзаиморасчетыСервер.ПроверкаРазвернутогоСальдоРучнаяКорректировка");
			
		ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			НСтр("ru = 'Развернутое сальдо по регистрам взаиморасчетов'"),
			НСтр("ru = 'При наличии развернутого сальдо по взаиморасчетам в рамках одного объекта расчетов и аналитики
				|могут возникать ошибки распределения взаиморасчетов в финансовых регистрах.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаОстатковВзаиморасчетов(ПараметрыПроверки) Экспорт
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ТипРасчетов", НСтр("ru = 'Тип расчетов'"));
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаПоПартнерам", НСтр("ru = 'Аналитика учета по партнерам'"));
	СписокПолей.Добавить("ОбъектРасчетов",            НСтр("ru = 'Объект расчетов'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНекорректныеОстаткиВзаиморасчетов",
		НСтр("ru = 'Исправление некорректных остатков по финансовым регистрам взаиморасчетов на начало периода %2.'"),
		СписокПолей,,);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

Процедура ПроверкаОстатковВзаиморасчетовРучнаяКорректировка(ПараметрыПроверки) Экспорт
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ТипРасчетов", НСтр("ru = 'Тип расчетов'"));
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаПоПартнерам", НСтр("ru = 'Аналитика учета по партнерам'"));
	СписокПолей.Добавить("ОбъектРасчетов",            НСтр("ru = 'Объект расчетов'"));
	СписокПолей.Добавить("РучнаяКорректировка",       НСтр("ru = 'Ручная корректировка регистров'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНекорректныеОстаткиВзаиморасчетовРучныеКорректировки",
		НСтр("ru = 'Внимание! Требуется исправление остатков взаиморасчетов. Исправить остатки автоматически невозможно, так как введен некорректный документ ""Корректировка регистров""'"),
		СписокПолей,,);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

Процедура ПроверкаРазвернутогоСальдо(ПараметрыПроверки) Экспорт 
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ТипРасчетов", НСтр("ru = 'Тип расчетов'"));
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаПоПартнерам", НСтр("ru = 'Аналитика учета по партнерам'"));
	СписокПолей.Добавить("ОбъектРасчетов",            НСтр("ru = 'Объект расчетов'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРазвернутоеСальдоВзаиморасчетов",
		НСтр("ru = 'Исправление развернутого сальдо по финансовым регистрам взаиморасчетов на начало периода %2.'"),
		СписокПолей,,);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
		
КонецПроцедуры

Процедура ПроверкаРазвернутогоСальдоРучнаяКорректировка(ПараметрыПроверки) Экспорт 
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ТипРасчетов", НСтр("ru = 'Тип расчетов'"));
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаПоПартнерам", НСтр("ru = 'Аналитика учета по партнерам'"));
	СписокПолей.Добавить("ОбъектРасчетов",            НСтр("ru = 'Объект расчетов'"));
	СписокПолей.Добавить("РучнаяКорректировка",       НСтр("ru = 'Ручная корректировка регистров'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРазвернутоеСальдоВзаиморасчетовРучныеКорректировки",
		НСтр("ru = 'Внимание! Требуется исправление развернутого сальдо. Исправить автоматически невозможно, так как введен некорректный документ ""Корректировка регистров""'"),
		СписокПолей,,);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
		
КонецПроцедуры

Процедура Выполнить_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.Организации = ПараметрыРасчета.МассивОрганизаций;
		
		РаспределениеВзаиморасчетовВызовСервера.РассчитатьВсе(ПараметрыРасчета.КонецПериода, АналитикиРасчета);
		
		//Переоценка на конец месяца или по дням если не было взаиморасчетов
		Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСКлиентами(
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСПоставщиками(
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	Иначе
		
		ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
		НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код,
			ПараметрыРасчета.КонецПериода,
			,
			ПараметрыРасчета.МассивОрганизаций);
		
		Если Константы.РаспределятьФактическиеРасчетыФоновымЗаданием.Получить() Тогда
			
			ТекстПричины = ТекстПредупрежденияЗагрузкаДокументовВзаиморасчетов();
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ТекстПричины
			);
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
				
			Возврат;
				
		КонецЕсли;
			
		ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЗакрытиеМесяца.%1",
				СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
		ОписаниеЗамера 		= ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
		КоличествоДанных	= 0;
		
		Пока НачалоРасчета <= ПараметрыОбработчика.ПараметрыРасчета.КонецПериода Цикл
		
			НомерЗадания 	 	= ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
			ОкончаниеПериода 	= КонецМесяца(НачалоРасчета);
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
					НачалоРасчета,
					ОкончаниеПериода,
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
						|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
			//Исправления ошибок.
			
			ОперативныеВзаиморасчетыСервер.ИсправитьОстаткиВзаиморасчетов(НачалоРасчета, ДанныеКРасчетуЗаМесяц.Организация);
			Если Константы.ПорядокЗачетаДокументовПоДатеОперации.Получить() = 0 Тогда
				ОперативныеВзаиморасчетыСервер.ИсправитьРазвернутоеСальдо(НачалоРасчета, ДанныеКРасчетуЗаМесяц.Организация);
			КонецЕсли;
			
			//Актуализация движений.
			
			Для Каждого Организация Из ДанныеКРасчетуЗаМесяц.Организация Цикл
				
				БылиОшибки = Ложь;
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(ОкончаниеПериода, ВидГраницы.Включая));
				Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
				Запрос.УстановитьПараметр("НачалоПериода", НачалоРасчета);
				Запрос.УстановитьПараметр("Организация",   Организация);
				Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Истина);
				Запрос.УстановитьПараметр("ПоВсемДокументам", Ложь);
				Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());

				#Область СуммыДокументовВВалютахУчета
				//Пересчет построчного распределения валютных сумм документов.
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РасчетыСКлиентами.Регистратор КАК Регистратор,
				|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
				|	РасчетыСКлиентами.Период КАК Период
				|ПОМЕСТИТЬ РасчетыКОтражениюВУчете
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
				|ГДЕ 
				|	РасчетыСКлиентами.Период <= &КонецПериода И РасчетыСКлиентами.Период >= &НачалоПериода
				|	И РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация = &Организация
				|	И РасчетыСКлиентами.Сумма <> 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РасчетыСПоставщиками.Регистратор КАК Регистратор,
				|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
				|	РасчетыСПоставщиками.Период КАК Период
				|ИЗ
				|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
				|ГДЕ 
				|	РасчетыСПоставщиками.Период <= &КонецПериода И РасчетыСПоставщиками.Период >= &НачалоПериода
				|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация = &Организация
				|	И РасчетыСПоставщиками.Сумма <> 0
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Расчеты.Регистратор КАК ДокументРегистратор
				|ИЗ
				|	РасчетыКОтражениюВУчете КАК Расчеты";
				МассивВсехДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументРегистратор");
				РегистрыСведений.СуммыДокументовВВалютахУчета.РассчитатьСуммыДокументовВВалютахУчета(МассивВсехДокументов);
				УправленческийУчетПроведениеСервер.ОбновитьДвиженияПоОборотнымРегистрам(МассивВсехДокументов);
				Если ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс") Тогда
					Обработки.ДвиженияАктивовПассивов.ОтразитьДокументыВУправленческомБалансе(МассивВсехДокументов);
				КонецЕсли;// Необходимо формировать упр. баланс
				
				
				
				КоличествоДанных = КоличествоДанных + МассивВсехДокументов.Количество();
				
				Запрос = Новый Запрос;
				Запрос.Текст = РегистрыСведений.СуммыДокументовВВалютахУчета.ТекстЗапросаДокументовДляПересчета();
				Запрос.УстановитьПараметр("МассивДокументов", МассивВсехДокументов);
				Запрос.УстановитьПараметр("ЭтоПроверка", Истина);
				Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
				Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Истина);
				Запрос.УстановитьПараметр("ПоВсемДокументам", Ложь);
				
				ТаблицаНерасчитанныхДокументов = Запрос.Выполнить().Выгрузить();
				
				//Попытка перепровести проблемные документы.
				Для Каждого СтрокаДокумента Из ТаблицаНерасчитанныхДокументов Цикл
					Попытка
						Если НЕ ЗначениеЗаполнено(СтрокаДокумента.РасчетныйДокумент) Тогда
							Продолжить;
						КонецЕсли;
						ДокументОбъект = СтрокаДокумента.РасчетныйДокумент.ПолучитьОбъект(); // ДокументОбъект
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При формировании движений по данным взаиморасчетов за период %1 
								|при попытке перепроведения документа %2 произошла ошибка:
								|%3'"),
							РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
							СтрокаДокумента.РасчетныйДокумент,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Попытка перепроведения документов'", ОбщегоНазначения.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Ошибка,
							Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
							,
							ТекстОшибки);
					КонецПопытки;
				КонецЦикла;
				
				Если ТаблицаНерасчитанныхДокументов.Количество() > 0 Тогда
					
					Шаблон = НСтр("ru = 'Не удалось выполнить распределение суммы взаиморасчетов на строки документа %1.
						|Итоги движений документа по регистрам взаиморасчетов отличается от движений по регистру сумм документа в валютах учёта.
						|Попробуйте перепровести документ вручную.'", ОбщегоНазначения.КодОсновногоЯзыка());
					
					ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
						ПараметрыОбработчика.ДанныеЭтапа.Код,
						Организация,
						ПараметрыРасчета.ПериодРегистрации);
					
					Для Каждого СтрокаДокумента Из ТаблицаНерасчитанныхДокументов Цикл
						
						ГруппаПроблем = НСтр("ru = 'При выполнении операции были диагностированы ошибки'", ОбщегоНазначения.КодОсновногоЯзыка());
						
						ПолныйТекстПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаДокумента.РасчетныйДокумент);
						
						ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
							ПараметрыРегистрации,
							ГруппаПроблем,
							Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка,
							ПолныйТекстПроблемы,
							СтрокаДокумента.РасчетныйДокумент);
					КонецЦикла;
					
					БылиОшибки = Истина;
				КонецЕсли;
				
				Если БылиОшибки Тогда
					Возврат;
				КонецЕсли;
				
				#КонецОбласти
				
				//Переоценка на конец месяца или по дням если не было взаиморасчетов
				Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСКлиентами(
					Организация,
					ОкончаниеПериода);
				Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСПоставщиками(
					Организация,
					ОкончаниеПериода);
				
			КонецЦикла;
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(
					Неопределено,
					НомерЗадания,
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ДанныеКРасчетуЗаМесяц);
				
				РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
					ДанныеКРасчетуЗаМесяц.ВременныеТаблицы,
					ОкончаниеПериода + 1);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
						|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
		
			ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценкаВзаиморасчетов(
				ПараметрыРасчета.МассивОрганизаций,
				ОкончаниеПериода);
			
			Если ТребуетсяПереоценка Тогда
				Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСКлиентами(
					ПараметрыРасчета.МассивОрганизаций,
					ОкончаниеПериода);
				Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСПоставщиками(
					ПараметрыРасчета.МассивОрганизаций,
					ОкончаниеПериода);
			КонецЕсли;
			
			НачалоРасчета = ОкончаниеПериода + 1;
			
		КонецЦикла;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Модульность

// Возвращает структуру состояния взаиморасчетов.
// 
// Параметры:
// 	Объект - ФормаКлиентскогоПриложения - Описание:
// * Объект - СправочникСсылка, ДокументСсылка - Объект формы.
// 	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
// Возвращаемое значение:
// 	Структура - Описание:
// * ПроцентПоставок - Число -
// * СуммаПоставок - Число -
// * ПроцентОтгрузок - Число -
// * СуммаОтгрузок - Число -
// * ПроцентОплат - Число -
// * СуммаОплат - Число -
// * СуммаЗадолженности - Число - 
//
Функция СостояниеВзаиморасчетов(Объект, СтруктураПараметров) Экспорт
	
	ПутьКДаннымСуммаВзаиморасчетов = ?(СтруктураПараметров.СуммаВзаиморасчетов="",СтруктураПараметров.СуммаДокумента,СтруктураПараметров.СуммаВзаиморасчетов);
	СуммаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПутьКДаннымСуммаВзаиморасчетов,,0);
	Организация         = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
	ТипРасчетов         = СтруктураПараметров.ТипРасчетов;
	
	ОбъектРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ОбъектРасчетов);
	Если ТипЗнч(ОбъектРасчетов) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ОбъектРасчетов, ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка"));
		ОбъектРасчетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектРасчетов);
		Если ОбъектРасчетов.Количество() = 1 Тогда
			ОбъектРасчетов = ОбъектРасчетов[0];
			СуммаВзаиморасчетов = 0;
		Иначе
			ОбъектРасчетов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеВзаиморасчетовОбъектаРасчетов(ОбъектРасчетов, СуммаВзаиморасчетов, ТипРасчетов, Организация);
	
КонецФункции

// Параметры:
// 	ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов.
// 	СуммаВзаиморасчетов - Число - сумма взаиморасчетов для расчета процента платежей и отгрузки.
// 	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - определяет по какому регистру смотреть состояние.
// 	Организация - СправочникСсылка.Организации - Организация по которой нужно смотреть состояние расчетов.
// 	
// Возвращаемое значение:
//   Структура:
//      * СуммаОплат - Число.
//      * ПроцентОплат - Число.
//      * СуммаОтгрузок - Число.
//      * ПроцентОтгрузок - Число.
//      * СуммаПоставок - Число.
//      * ПроцентПоставок - Число.
//      * СуммаЗадолженности - Число.
//
Функция СостояниеВзаиморасчетовОбъектаРасчетов(ОбъектРасчетов, СуммаВзаиморасчетов, ТипРасчетов, Организация = Неопределено) Экспорт
	
	СтруктураРасчетов = Новый Структура;
	СтруктураРасчетов.Вставить("СуммаОплат", 0 );
	СтруктураРасчетов.Вставить("ПроцентОплат", 0 );
	СтруктураРасчетов.Вставить("СуммаОтгрузок", 0 );
	СтруктураРасчетов.Вставить("ПроцентОтгрузок", 0 );
	СтруктураРасчетов.Вставить("СуммаПоставок", 0 );
	СтруктураРасчетов.Вставить("ПроцентПоставок", 0 );
	СтруктураРасчетов.Вставить("СуммаЗадолженности", 0 );
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) Тогда
		Возврат СтруктураРасчетов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СуммаПервоначальныхВзаиморасчетов", СуммаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	
	Если ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом") 
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|		ТОГДА 0
		|		ИНАЧЕ РасчетыОстаткиИОбороты.СуммаРасход
		|	КОНЕЦ),0) КАК СуммаОплат,
		|
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА ЕСТЬNULL(РасчетыОстаткиИОбороты.СуммаПриход, 0) < 0
		|		ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации 
		|		ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыОстаткиИОбороты.СуммаПриход, 0) КАК ЧИСЛО(31,2))
		|	КОНЕЦ),0) КАК СуммаОтгрузок,
		|
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА ЕСТЬNULL(РасчетыОстаткиИОбороты.СуммаПриход, 0) < 0
		|		ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыОстаткиИОбороты.СуммаПриход, 0) КАК ЧИСЛО(31,2))
		|	КОНЕЦ),0) КАК СуммаЗадолженности,
		|
		|	ВЫБОР КОГДА &СуммаПервоначальныхВзаиморасчетов = 0
		|		ТОГДА МАКСИМУМ(РасчетыОстаткиИОбороты.ОбъектРасчетов.СуммаВзаиморасчетов)
		|		ИНАЧЕ &СуммаПервоначальныхВзаиморасчетов
		|	КОНЕЦ КАК СуммаПервоначальныхВзаиморасчетов
		|
		|ПОМЕСТИТЬ ВтРасчеты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, , Регистратор, , ОбъектРасчетов = &ОбъектРасчетов) КАК РасчетыОстаткиИОбороты
		|ГДЕ
		|	РасчетыОстаткиИОбороты.АналитикаУчетаПоПартнерам.Организация = &Организация
		|;
		|ВЫБРАТЬ
		|	Расчеты.СуммаОплат         КАК СуммаОплат,
		|	Расчеты.СуммаОтгрузок      КАК СуммаОтгрузок,
		|	ВЫБОР КОГДА Расчеты.СуммаОплат = 0
		|		ИЛИ Расчеты.СуммаПервоначальныхВзаиморасчетов = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(Расчеты.СуммаОплат * 100 / Расчеты.СуммаПервоначальныхВзаиморасчетов КАК ЧИСЛО(20, 2))
		|	КОНЕЦ                      КАК ПроцентОплат,
		|	ВЫБОР КОГДА Расчеты.СуммаОтгрузок = 0
		|		ИЛИ Расчеты.СуммаПервоначальныхВзаиморасчетов = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(Расчеты.СуммаОтгрузок * 100 / Расчеты.СуммаПервоначальныхВзаиморасчетов КАК ЧИСЛО(20, 2))
		|	КОНЕЦ                      КАК ПроцентОтгрузок,
		|	Расчеты.СуммаЗадолженности КАК СуммаЗадолженности
		|ИЗ
		|	ВтРасчеты КАК Расчеты";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРасчетов, Результат.Выгрузить()[0]);
		КонецЕсли;
		
	ИначеЕсли ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
			
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|			ТОГДА 0
		|		ИНАЧЕ РасчетыОстаткиИОбороты.СуммаПриход
		|	КОНЕЦ), 0) КАК СуммаОплат,
		|
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.СуммаРасход < 0
		|					ИЛИ РасчетыОстаткиИОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|			ТОГДА 0
		|		ИНАЧЕ РасчетыОстаткиИОбороты.СуммаРасход
		|	КОНЕЦ), 0) КАК СуммаПоставок,
		|
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыОстаткиИОбороты.СуммаРасход < 0
		|			ТОГДА 0
		|		ИНАЧЕ РасчетыОстаткиИОбороты.СуммаРасход
		|	КОНЕЦ), 0) КАК СуммаЗадолженности,
		|
		|	ВЫБОР КОГДА &СуммаПервоначальныхВзаиморасчетов = 0
		|		ТОГДА СУММА(РасчетыОстаткиИОбороты.ОбъектРасчетов.СуммаВзаиморасчетов)
		|		ИНАЧЕ &СуммаПервоначальныхВзаиморасчетов
		|	КОНЕЦ КАК СуммаПервоначальныхВзаиморасчетов
		|
		|ПОМЕСТИТЬ ВтРасчеты
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(, , Регистратор, , ОбъектРасчетов = &ОбъектРасчетов) КАК РасчетыОстаткиИОбороты
		|ГДЕ
		|	РасчетыОстаткиИОбороты.АналитикаУчетаПоПартнерам.Организация = &Организация
		|;
		|ВЫБРАТЬ
		|	Расчеты.СуммаОплат         КАК СуммаОплат,
		|	Расчеты.СуммаПоставок      КАК СуммаПоставок,
		|	ВЫБОР КОГДА Расчеты.СуммаОплат = 0
		|		ИЛИ Расчеты.СуммаПервоначальныхВзаиморасчетов = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(Расчеты.СуммаОплат* 100 / Расчеты.СуммаПервоначальныхВзаиморасчетов КАК ЧИСЛО(20, 2))
		|	КОНЕЦ                      КАК ПроцентОплат,
		|	ВЫБОР КОГДА Расчеты.СуммаПоставок = 0
		|		ИЛИ Расчеты.СуммаПервоначальныхВзаиморасчетов = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(Расчеты.СуммаПоставок* 100 / Расчеты.СуммаПервоначальныхВзаиморасчетов КАК ЧИСЛО(20, 2))
		|	КОНЕЦ                      КАК ПроцентПоставок,
		|	Расчеты.СуммаЗадолженности КАК СуммаЗадолженности
		|ИЗ
		|	ВтРасчеты КАК Расчеты";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРасчетов, Результат.Выгрузить()[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРасчетов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииДляВыбораДокументаРасчетов

// Возвращаемое значение:
// 	Строка
//
Функция ТекстЗапросаВыбораОснованияПлатежа(ВводПоСтроке, ЭтоРасчетыСКлиентом = Истина) Экспорт
	
	Если ЭтоРасчетыСКлиентом Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	РеестрДокументов.Ссылка                          КАК ОснованиеПлатежа,
		|	МАКСИМУМ(ОбъектыРасчетов.Ссылка)                 КАК ОбъектРасчетов,
		|	ВЫБОР 
		|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетНаОплатуКлиенту)
		|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетНаОплатуКлиенту).ДокументОснование
		//++ Локализация
		|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетФактураВыданный)
		|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетФактураВыданный).ДокументОснование
		//-- Локализация
		|		ИНАЧЕ РеестрДокументов.Ссылка
		|	КОНЕЦ КАК ДокументОснование,
		|	ЕСТЬNULL(КлючиАналитикиУчетаПоПартнерам.Партнер, 
		|	         РеестрДокументов.Партнер)               КАК Партнер,
		|	РеестрДокументов.Организация                     КАК Организация,
		|	ЕСТЬNULL(КлючиАналитикиУчетаПоПартнерам.Контрагент, 
		|	         РеестрДокументов.Контрагент.Ключ)       КАК Контрагент,
		|	РеестрДокументов.Договор                         КАК Договор,
		|	МАКСИМУМ(ОбъектыРасчетов.ВалютаВзаиморасчетов)   КАК ВалютаВзаиморасчетов,
		|	РеестрДокументов.НаправлениеДеятельности         КАК НаправлениеДеятельности, 
		|	МАКСИМУМ(&ИдентификаторПлатежа)                  КАК ИдентификаторПлатежа,
		|	РеестрДокументов.НомерДокументаИБ                КАК Номер,
		|	РеестрДокументов.ДатаДокументаИБ                 КАК Дата,
		|	РеестрДокументов.ДатаПервичногоДокумента         КАК ДатаВходящегоДокумента,
		|	РеестрДокументов.НомерПервичногоДокумента        КАК НомерВходящегоДокумента,
		|	РеестрДокументов.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
		|	РеестрДокументов.Сумма                           КАК Сумма,
		|	РеестрДокументов.Валюта                          КАК Валюта,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.Проведен
		|			ТОГДА 1
		|		КОГДА РеестрДокументов.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ                                            КАК Состояние
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО РасчетыСКлиентами.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
		|			ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
		|		ПО 
		|			ВЫБОР 
		|				КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетНаОплатуКлиенту)
		|					ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетНаОплатуКлиенту).ДокументОснование
		//++ Локализация
		|				КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетФактураВыданный)
		|					ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетФактураВыданный).ДокументОснование
		//-- Локализация
		|				ИНАЧЕ РеестрДокументов.Ссылка
		|			КОНЕЦ = РасчетыСКлиентами.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ПО РеестрДокументов.Договор = Договоры.Ссылка
		|ГДЕ &ДинамическиеУсловия
		|
		|СГРУППИРОВАТЬ ПО
		|	РеестрДокументов.Ссылка,
		|	РеестрДокументов.Организация,
		|	РеестрДокументов.Договор,
		|	РеестрДокументов.НаправлениеДеятельности,
		|	РеестрДокументов.НомерДокументаИБ,
		|	РеестрДокументов.ДатаДокументаИБ,
		|	РеестрДокументов.ДатаПервичногоДокумента,
		|	РеестрДокументов.НомерПервичногоДокумента,
		|	РеестрДокументов.НаименованиеПервичногоДокумента,
		|	РеестрДокументов.Сумма,
		|	РеестрДокументов.Валюта,
		|	ЕСТЬNULL(КлючиАналитикиУчетаПоПартнерам.Партнер, РеестрДокументов.Партнер),
		|	ЕСТЬNULL(КлючиАналитикиУчетаПоПартнерам.Контрагент, РеестрДокументов.Контрагент.Ключ),
		|	ВЫБОР
		|		КОГДА РеестрДокументов.Проведен
		|			ТОГДА 1
		|		КОГДА РеестрДокументов.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	РеестрДокументов.Ссылка                          КАК ОснованиеПлатежа,
		|	МАКСИМУМ(ОбъектыРасчетов.Ссылка)                 КАК ОбъектРасчетов,
		|	ВЫБОР 
		|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетНаОплатуКлиенту)
		|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетНаОплатуКлиенту).ДокументОснование
		//++ Локализация
		|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) = ТИП(Документ.СчетФактураВыданный)
		|			ТОГДА ВЫРАЗИТЬ(РеестрДокументов.Ссылка КАК Документ.СчетФактураВыданный).ДокументОснование
		//-- Локализация
		|		ИНАЧЕ РеестрДокументов.Ссылка
		|	КОНЕЦ КАК ДокументОснование,
		|	ЕСТЬNULL(КлючиАналитикиУчетаПоПартнерам.Партнер, 
		|	         РеестрДокументов.Партнер)               КАК Партнер,
		|	РеестрДокументов.Организация                     КАК Организация,
		|	ЕСТЬNULL(КлючиАналитикиУчетаПоПартнерам.Контрагент, 
		|	         РеестрДокументов.Контрагент.Ключ)       КАК Контрагент,
		|	РеестрДокументов.Договор                         КАК Договор,
		|	МАКСИМУМ(ОбъектыРасчетов.ВалютаВзаиморасчетов)   КАК ВалютаВзаиморасчетов,
		|	РеестрДокументов.НаправлениеДеятельности         КАК НаправлениеДеятельности,
		|	МАКСИМУМ(&ИдентификаторПлатежа)                  КАК ИдентификаторПлатежа,
		|	РеестрДокументов.НомерДокументаИБ                КАК Номер,
		|	РеестрДокументов.ДатаДокументаИБ                 КАК Дата,
		|	РеестрДокументов.ДатаПервичногоДокумента         КАК ДатаВходящегоДокумента,
		|	РеестрДокументов.НомерПервичногоДокумента        КАК НомерВходящегоДокумента,
		|	РеестрДокументов.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
		|	РеестрДокументов.Сумма                           КАК Сумма,
		|	РеестрДокументов.Валюта                          КАК Валюта,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.Проведен
		|			ТОГДА 1
		|		КОГДА РеестрДокументов.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ                                            КАК Состояние
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО РасчетыСПоставщиками.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
		|			ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
		|		ПО РеестрДокументов.Ссылка = РасчетыСПоставщиками.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ПО РеестрДокументов.Договор = Договоры.Ссылка
		|ГДЕ &ДинамическиеУсловия
		|
		|СГРУППИРОВАТЬ ПО
		|	РеестрДокументов.Ссылка,
		|	РеестрДокументов.Организация,
		|	РеестрДокументов.Договор,
		|	РеестрДокументов.НаправлениеДеятельности,
		|	РеестрДокументов.НомерДокументаИБ,
		|	РеестрДокументов.ДатаДокументаИБ,
		|	РеестрДокументов.ДатаПервичногоДокумента,
		|	РеестрДокументов.НомерПервичногоДокумента,
		|	РеестрДокументов.НаименованиеПервичногоДокумента,
		|	РеестрДокументов.Сумма,
		|	РеестрДокументов.Валюта,
		|	ЕСТЬNULL(КлючиАналитикиУчетаПоПартнерам.Партнер, РеестрДокументов.Партнер),
		|	ЕСТЬNULL(КлючиАналитикиУчетаПоПартнерам.Контрагент, РеестрДокументов.Контрагент.Ключ),
		|	ВЫБОР
		|		КОГДА РеестрДокументов.Проведен
		|			ТОГДА 1
		|		КОГДА РеестрДокументов.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ";
	КонецЕсли;
	
	Если ВводПоСтроке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗЛИЧНЫЕ", "РАЗЛИЧНЫЕ ПЕРВЫЕ 10"); //@Query-part-1 @Query-part-2
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
// 	Строка
//
Функция ТекстЗапросаВременныхТаблицДанныхВыбора() Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Филиалы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтЦентрализованныеДоговоры
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.Филиалы КАК Филиалы
		|ГДЕ
		|	Филиалы.Организация = &Организация
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВтГоловныеОрганизации
		|ИЗ 
		|	Справочник.Организации КАК Организации
		|ГДЕ 
		|	Организации.Ссылка = &Организация
		|;
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
// 	Строка
//
Функция ТекстЗапросаВыбораОбъектаРасчетов(ВводПоСтроке) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект                  КАК ОснованиеПлатежа,
	|	ОбъектыРасчетов.Ссылка                  КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Партнер                 КАК Партнер,
	|	ОбъектыРасчетов.Организация             КАК Организация,
	|	ОбъектыРасчетов.Контрагент              КАК Контрагент,
	|	ОбъектыРасчетов.Договор                 КАК Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ОбъектыРасчетов.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|	ОбъектыРасчетов.ИдентификаторПлатежа    КАК ИдентификаторПлатежа,
	|	ОбъектыРасчетов.Номер                   КАК Номер,
	|	ОбъектыРасчетов.Дата                    КАК Дата,
	|	ОбъектыРасчетов.ДатаВходящегоДокумента  КАК ДатаВходящегоДокумента,
	|	ОбъектыРасчетов.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ОбъектыРасчетов.Сумма                   КАК СуммаЗаказа,
	|	0                                       КАК СуммаПлатежа,
	|	ОбъектыРасчетов.Валюта                  КАК Валюта,
	|	ОбъектыРасчетов.Состояние               КАК Состояние,
	|	ОбъектыРасчетов.ПометкаУдаления         КАК ПометкаУдаления,
	|	ОбъектыРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО ОбъектыРасчетов.Договор = Договоры.Ссылка
	|ГДЕ &ДинамическиеУсловия
	|";
	
	Если ВводПоСтроке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 10"); //@Query-part-1 @Query-part-2
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает параметры, используемые при выборе документа расчетов с клиентами.
// Используется в общей форме "ВыборДокументаРасчетов" и в обработке получения данных выбора основания платежа.
// 
// Возвращаемое значение: 
// Структура :
//	* ВводПоСтроке - Булево - Признак получения данных выбора.
//	* ЭтоУИП - Булево - Поиск документа расчетов осуществляется по УИП.
//	* ОтборПоОрганизацииИКонтрагенту - Булево - Есть отбор по организации и контрагенту.
//	* ИсключитьРедактируемыйДокумент - Булево - Не включать документ из которого вызывается подбор в данные выбора.
//	* ЗапретитьДоговорыПоДокументам - Булево - Запретить договоры с порядком расчетов "по заказам/накладным".
//
Функция ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВводПоСтроке",                   Ложь);
	ПараметрыОтбора.Вставить("ЭтоУИП",                         Ложь);
	ПараметрыОтбора.Вставить("ОтборПоОрганизацииИКонтрагенту", Ложь);
	ПараметрыОтбора.Вставить("ИсключитьРедактируемыйДокумент", Ложь);
	ПараметрыОтбора.Вставить("ЗапретитьДоговорыПоДокументам",  Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции


// Структура выбранного значения.
// 
// Возвращаемое значение:
// Структура: 
// 	* ОснованиеПлатежа - ДокументСсылка
// 	* ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов
// 	* ДокументОснование - ДокументСсылка
// 	* Партнер - СправочникСсылка.Партнеры
// 	* Контрагент - СправочникСсылка.Контрагенты
// 	* ИдентификаторПлатежа - Строка
// 	* ВалютаВзаиморасчетов - СправочникСсылка.Валюты
// 	* ЭтоРасчетыСКлиентами - Булево
// 	* СуммаПлатежа - Число
// 	* СуммаЗаказа - Число
// 	* Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор выбранного документа
// 	* Организация - СправочникСсылка.Организации
//  
Функция СтруктураЗначениеВыбора()
	
	ЗначениеВыбора = Новый Структура;
	
	ЗначениеВыбора.Вставить("ОснованиеПлатежа", Неопределено);
	ЗначениеВыбора.Вставить("ОбъектРасчетов", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	ЗначениеВыбора.Вставить("ДокументОснование", Неопределено);
	ЗначениеВыбора.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
	ЗначениеВыбора.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ЗначениеВыбора.Вставить("ИдентификаторПлатежа", "");
	ЗначениеВыбора.Вставить("ВалютаВзаиморасчетов", Справочники.Валюты.ПустаяСсылка());
	ЗначениеВыбора.Вставить("ЭтоРасчетыСКлиентами", Ложь);
	ЗначениеВыбора.Вставить("СуммаПлатежа", 0);
	ЗначениеВыбора.Вставить("СуммаЗаказа", 0);
	ЗначениеВыбора.Вставить("Договор", Неопределено);
	ЗначениеВыбора.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	
	Возврат ЗначениеВыбора;
	
КонецФункции

// Дополнить структуру объектом расчетов и валютой взаиморасчетов.
// 
// Параметры:
//  РезультатВыбора - Структура - см. ВзаиморасчетыСервер.СтруктураЗначениеВыбора
Процедура ДополнитьСтруктуруОбъектомРасчетовИВалютойВзаиморасчетов(РезультатВыбора) Экспорт
	
	СсылкаДляПоиска = РезультатВыбора.ОснованиеПлатежа;
	Если РезультатВыбора.Свойство("ДокументОснование") И ЗначениеЗаполнено(РезультатВыбора.ДокументОснование) Тогда
		СсылкаДляПоиска = РезультатВыбора.ДокументОснование;
	КонецЕсли;
	ОбъектРасчетов = ВзаиморасчетыСервер.ОбъектРасчетовПоСсылке(СсылкаДляПоиска);
	ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ОбъектРасчетов);
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "ВалютаВзаиморасчетов");
	
	РезультатВыбора.Вставить("ОбъектРасчетов", ОбъектРасчетов);
	РезультатВыбора.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Возвращаемое значение:
// 	Строка - Текст предупреждения
Функция ТекстПредупрежденияЗагрузкаДокументовВзаиморасчетов() Экспорт
	
	Если ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
	
		ТекстПричины =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполняется загрузка документов взаиморасчетов (включена константа ""%1"")
					|Необходимо дождаться завершения загрузки документов и повторить операцию.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Метаданные.Константы.РаспределятьФактическиеРасчетыФоновымЗаданием.Синоним);
		
	Иначе
		
		ТекстПричины =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполняется отложенное обновление взаиморасчетов (включена константа ""%1"")
					|Необходимо дождаться завершения обновления и повторить операцию.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Метаданные.Константы.РаспределятьФактическиеРасчетыФоновымЗаданием.Синоним);
		
	КонецЕсли;
	
	Возврат ТекстПричины;
	
КонецФункции

Функция ТекстЗапросаПоОстаткамРасчетовСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	ВЫБОР КОГДА ТаблицаПлатежей.Сумма ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК Выбран,
	|	ЕСТЬNULL(ТаблицаПлатежей.Сумма, 0) КАК Сумма,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|
	|	ОбъектыРасчетов.Дата КАК Дата,
	|	ОбъектыРасчетов.Номер КАК Номер,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	"""" КАК ИдентификаторПлатежа,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|
	|	ЕСТЬNULL(ОбъектыРасчетов.Договор.СтатьяДвиженияДенежныхСредств,
	|		ЕСТЬNULL(ОбъектыРасчетов.Соглашение.СтатьяДвиженияДенежныхСредств,
	|			&СтатьяДвиженияДенежныхСредств)) КАК СтатьяДвиженияДенежныхСредств,
	|
	|	ЕСТЬNULL(ОбъектыРасчетов.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщиками.СуммаОстаток > 0 ТОГДА
	|		РасчетыСПоставщиками.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДолгПартнера,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток > 0
	|		И НЕ &ТолькоБезусловнаяЗадолженность
	|	ТОГДА
	|		РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОплате,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщиками.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСПоставщиками.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
	|		ОбъектРасчетов В (
	|			ВЫБРАТЬ
	|				ОбъектыРасчетов.ОбъектРасчетов
	|			ИЗ
	|				ОбъектыРасчетов КАК ОбъектыРасчетов)
	|	) КАК РасчетыСПоставщиками
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО 
	|		РасчетыСПоставщиками.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПлатежей КАК ТаблицаПлатежей
	|	ПО
	|		РасчетыСПоставщиками.ОбъектРасчетов = ТаблицаПлатежей.ОбъектРасчетов
	|		И РасчетыСПоставщиками.Валюта = ТаблицаПлатежей.Валюта
	|
	|ГДЕ
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.СуммаОстаток > 0)
	|	ИЛИ 
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток > 0
	|	И НЕ &ТолькоБезусловнаяЗадолженность
	|	)
	|	ИЛИ 
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.СуммаОстаток > 0
	|	)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоОстаткамРасчетовСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	ВЫБОР КОГДА ТаблицаПлатежей.Сумма ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК Выбран,
	|	ЕСТЬNULL(ТаблицаПлатежей.Сумма, 0) КАК Сумма,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|
	|	ОбъектыРасчетов.Дата КАК Дата,
	|	ОбъектыРасчетов.Номер КАК Номер,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ОбъектыРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	
	|	ЕСТЬNULL(ОбъектыРасчетов.Договор.СтатьяДвиженияДенежныхСредств,
	|		ЕСТЬNULL(ОбъектыРасчетов.Соглашение.СтатьяДвиженияДенежныхСредств,
	|			&СтатьяДвиженияДенежныхСредств)) КАК СтатьяДвиженияДенежныхСредств,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентами.СуммаОстаток > 0 ТОГДА
	|		РасчетыСКлиентами.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДолгПартнера,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток > 0
	|		И НЕ &ТолькоБезусловнаяЗадолженность
	|	ТОГДА
	|		РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОплате,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСКлиентами.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, 
	|		ОбъектРасчетов В (
	|			ВЫБРАТЬ
	|				ОбъектыРасчетов.ОбъектРасчетов
	|			ИЗ
	|				ОбъектыРасчетов КАК ОбъектыРасчетов)
	|	) КАК РасчетыСКлиентами
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО 
	|		РасчетыСКлиентами.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПлатежей КАК ТаблицаПлатежей
	|	ПО
	|		РасчетыСКлиентами.ОбъектРасчетов = ТаблицаПлатежей.ОбъектРасчетов
	|		И РасчетыСКлиентами.Валюта = ТаблицаПлатежей.Валюта
	|
	|ГДЕ
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.СуммаОстаток < 0)
	|	ИЛИ 
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток > 0
	|	И НЕ &ТолькоБезусловнаяЗадолженность
	|	)
	|	ИЛИ 
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.СуммаОстаток > 0
	|	)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполняет таблицу остатков расчетов с партнером.
//
// Параметры:
//	Реквизиты - Структура - Структура должна содержать значения: 
//				Дата, Организация, СуммаДокумента, Валюта, Контрагент, Партнер, ХозяйственнаяОперация.
//	АдресПлатежейВХранилище - Строка - Адрес во временном хранилище, в которое помещена табличная часть документа.
//	ТаблицаОстатковРасчетов - ТаблицаЗначений - Таблица с остатками расчетов.
//	УчитыватьФилиалы - Булево - Признак включения остатков по филиалам организации.
//	ДополнительныеОтборы - Соответствие - где ключ это имя поля, а значение - значение отбора.
//
Процедура ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов, ДополнительныеОтборы = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаДокумента", Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", Не ЗначениеЗаполнено(Реквизиты.Контрагент));
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ПоВсемПартнерам", Не ЗначениеЗаполнено(Реквизиты.Партнер));
	Запрос.УстановитьПараметр("Партнер", Реквизиты.Партнер);
	Запрос.УстановитьПараметр("ПартнерПрочиеОтношения", Реквизиты.ПартнерПрочиеОтношения);
	
	УчитыватьФилиалы = ?(Реквизиты.Свойство("УчитыватьФилиалы"), Реквизиты.УчитыватьФилиалы, Истина);
	
	Если УчитыватьФилиалы И ТипЗнч(Реквизиты.Организация) <> Тип("Массив") Тогда
		ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Организация,"ГоловнаяОрганизация");
		Если ГоловнаяОрганизация = Реквизиты.Организация Тогда
			ГоловнаяОрганизация = Неопределено;
			ЭтоГоловнаяОрганизация = Истина;
		Иначе
			ЭтоГоловнаяОрганизация = Ложь;
		КонецЕсли;
	Иначе
		ЭтоГоловнаяОрганизация = Ложь;
		ГоловнаяОрганизация = Неопределено;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЭтоГоловнаяОрганизация", ЭтоГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", Реквизиты.ПодборДебиторскойЗадолженности);
	Запрос.УстановитьПараметр("ТолькоБезусловнаяЗадолженность", Реквизиты.ПодборТолькоБезусловнойЗадолженности);
	
	Если Реквизиты.Свойство("ХозяйственнаяОперация") Тогда
		СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
			Реквизиты.ХозяйственнаяОперация);
	Иначе
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	РасшифровкаПлатежа.Сумма КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаПлатежей
	|ИЗ
	|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Филиалы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЦентрализованныеДоговоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Организация = &Организация
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
	|
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	(ОбъектыРасчетов.Организация В (&Организация) 
	|	ИЛИ НЕ &ЭтоГоловнаяОрганизация 
	|		И ОбъектыРасчетов.Договор В (ВЫБРАТЬ Ссылка ИЗ ЦентрализованныеДоговоры)
	|		И (ОбъектыРасчетов.Организация = &ГоловнаяОрганизация
	|			ИЛИ ОбъектыРасчетов.Договор.РазрешаетсяПередачаОплатМеждуФилиалами)
	|	ИЛИ &ЭтоГоловнаяОрганизация
	|		И ОбъектыРасчетов.Организация.ГоловнаяОрганизация В (&Организация)
	|		И ОбъектыРасчетов.Организация.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию)
	|	И (ОбъектыРасчетов.Партнер = &Партнер ИЛИ &ПоВсемПартнерам)
	|	И (ОбъектыРасчетов.Контрагент = &Контрагент ИЛИ &ПоВсемКонтрагентам)
	|	И (&ПартнерПрочиеОтношения И ОбъектыРасчетов.Партнер.ПрочиеОтношения
	|		ИЛИ НЕ &ПартнерПрочиеОтношения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ &ТекстЗапросаРасчеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Дата,
	|	Номер
	|";
	Если Реквизиты.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ВЫБРАТЬ &ТекстЗапросаРасчеты",
			ТекстЗапросаПоОстаткамРасчетовСКлиентами());
	Иначе
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ВЫБРАТЬ &ТекстЗапросаРасчеты",
			ТекстЗапросаПоОстаткамРасчетовСПоставщиками());
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Если ЗначениеЗаполнено(АдресПлатежейВХранилище) Тогда
		РасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	Иначе
		Если ТаблицаОстатковРасчетов = Неопределено Тогда
			РасшифровкаПлатежа = Новый ТаблицаЗначений;
			РасшифровкаПлатежа.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
			РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			РасшифровкаПлатежа.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		Иначе
			РасшифровкаПлатежа = ТаблицаОстатковРасчетов.Выгрузить(,).СкопироватьКолонки();
		КонецЕсли;
	КонецЕсли;
	РасшифровкаПлатежа.Свернуть("ОбъектРасчетов, ВалютаВзаиморасчетов", "Сумма");
	
	Если РасшифровкаПлатежа.Количество() = 1 И Не ЗначениеЗаполнено(РасшифровкаПлатежа[0].ОбъектРасчетов) Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	Если ДополнительныеОтборы <> Неопределено Тогда
		
		СхемаЗапросаОстатков = Новый СхемаЗапроса;
		СхемаЗапросаОстатков.УстановитьТекстЗапроса(Запрос.Текст);
		Оператор = СхемаЗапросаОстатков.ПакетЗапросов[2].Операторы[0];
		
		сч = 0;
		Для Каждого КлючИЗначение Из ДополнительныеОтборы Цикл
			Отбор = "ЕСТЬNULL(ОбъектыРасчетов."+КлючИЗначение.Ключ+", Неопределено) = &Параметр"+Строка(сч);
			Запрос.УстановитьПараметр("Параметр"+Строка(сч), КлючИЗначение.Значение);
			Оператор.Отбор.Добавить(Отбор);
			сч= сч + 1;
		КонецЦикла;
		
		Запрос.Текст = СхемаЗапросаОстатков.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Если ТаблицаОстатковРасчетов = Неопределено Тогда
		ТаблицаОстатковРасчетов = Запрос.Выполнить().Выгрузить();
	Иначе
		ТаблицаОстатковРасчетов.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СуммаКРаспределению = Реквизиты.СуммаДокумента;
	Иначе
		СуммаКРаспределению = 0;
	КонецЕсли;
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		
		Если Не СтрокаТаблицы.Выбран Тогда
			
			Если СтрокаТаблицы.КОплате <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.КОплате;
				
			ИначеЕсли СтрокаТаблицы.НашДолг <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.НашДолг;
				
			ИначеЕсли СтрокаТаблицы.ДолгПартнера <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.ДолгПартнера;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизиты.Валюта) И Реквизиты.Валюта <> СтрокаТаблицы.ВалютаВзаиморасчетов Тогда
				
				Коэффициенты = СоответствиеВалютаКурс.Получить(СтрокаТаблицы.ВалютаВзаиморасчетов);
				Если Коэффициенты = Неопределено Тогда
					Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
						Реквизиты.Валюта, 
						СтрокаТаблицы.ВалютаВзаиморасчетов,
						?(Реквизиты.Дата <> '00010101',Реквизиты.Дата, ТекущаяДатаСеанса()),
						СтрокаТаблицы.Организация);
					СоответствиеВалютаКурс.Вставить(СтрокаТаблицы.ВалютаВзаиморасчетов, Коэффициенты);
				КонецЕсли;
					
				СтрокаТаблицы.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, СтрокаТаблицы.Сумма / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаКРаспределению > 0 Тогда
			
			СтрокаТаблицы.Выбран = Истина;
			Если СтрокаТаблицы.Сумма > СуммаКРаспределению Тогда
				СтрокаТаблицы.Сумма = СуммаКРаспределению;
			КонецЕсли;
			СуммаКРаспределению = СуммаКРаспределению - СтрокаТаблицы.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует массив допустимых хозяйственных операций договора с контрагентом.
//
// Параметры:
//	ОперацияДокумента - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
//	Массив из ПеречислениеСсылка.ХозяйственныеОперации - Массив хозяйственных операций.
//
Функция ХозяйственнаяОперацияДоговора(ОперацияДокумента) Экспорт
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если ОперацияДокумента = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	 ИЛИ ОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		
	ИначеЕсли ОперацияДокумента = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
	 ИЛИ ОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		
	КонецЕсли;
	
	Возврат ХозяйственнаяОперацияДоговора;
	
КонецФункции

Процедура ДобавитьЗаполнитьПорядокРасчетовСКлиентами(ТаблицаРасчеты, ТипДокумента) Экспорт
	
	ТаблицаРасчеты.Колонки.Добавить("ПорядокОперации",            Новый ОписаниеТипов("Строка"));
	ТаблицаРасчеты.Колонки.Добавить("ПорядокЗачетаПоДатеПлатежа", Новый ОписаниеТипов("Строка"));
	
	Тип = ОперативныеВзаиморасчетыСервер.НомерТипа(ТипДокумента);
	
	ЕстьДатаПлатежа = ТаблицаРасчеты.Колонки.Найти("ДатаПлатежа") <> Неопределено;
	ЕстьСумма = ТаблицаРасчеты.Колонки.Найти("Сумма") <> Неопределено;
	ЕстьКОплате = ТаблицаРасчеты.Колонки.Найти("КОплате") <> Неопределено;
	ЕстьКОтгрузке = ТаблицаРасчеты.Колонки.Найти("КОтгрузке") <> Неопределено;
	ЕстьСторно = ТаблицаРасчеты.Колонки.Найти("Сторно") <> Неопределено;
	
	Для Каждого Стр Из ТаблицаРасчеты Цикл
		
		ДатаПлатежа = ?(ЕстьДатаПлатежа И ЗначениеЗаполнено(Стр.ДатаПлатежа), Стр.ДатаПлатежа, Стр.ДатаРегистратора);
		
		//План оплаты
		Если (НЕ ЕстьСумма ИЛИ Стр.Сумма = 0) И Стр.КОплате <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора, ТипДокумента, Стр.Вид, Тип);
			Если ЕстьСторно И Стр.Сторно = ИСТИНА  Тогда
				Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
			Иначе
				Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа, Стр.НомерРегистратора, ТипДокумента, Стр.Вид, Тип);
			КонецЕсли;
		//Платежные документы и сторно отгрузки.
		ИначеЕсли Стр.ВидДвижения = ВидДвиженияНакопления.Расход И ЕстьСумма И  Стр.Сумма > 0
			Или Стр.ВидДвижения = ВидДвиженияНакопления.Приход И ЕстьСумма И Стр.Сумма < 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.Период, Стр.НомерРегистратора, ТипДокумента, Стр.Вид, Тип);
			Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
		//Накладные и пр.
		ИначеЕсли ЕстьСумма И Стр.Сумма <> 0 ИЛИ ЕстьКОплате И Стр.КОплате <> 0 ИЛИ ЕстьКОтгрузке И Стр.КОтгрузке <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора, ТипДокумента, Стр.Вид, Тип);
			Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа, Стр.НомерРегистратора, ТипДокумента, Стр.Вид, Тип);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗаполнитьПорядокРасчетовСПоставщиками(ТаблицаРасчеты, ТипДокумента) Экспорт
	
	ТаблицаРасчеты.Колонки.Добавить("ПорядокОперации",            Новый ОписаниеТипов("Строка"));
	ТаблицаРасчеты.Колонки.Добавить("ПорядокЗачетаПоДатеПлатежа", Новый ОписаниеТипов("Строка"));
	
	Тип = ОперативныеВзаиморасчетыСервер.НомерТипа(ТипДокумента);
	
	ЕстьДатаПлатежа = ТаблицаРасчеты.Колонки.Найти("ДатаПлатежа") <> Неопределено;
	ЕстьСумма = ТаблицаРасчеты.Колонки.Найти("Сумма") <> Неопределено;
	ЕстьКОплате = ТаблицаРасчеты.Колонки.Найти("КОплате") <> Неопределено;
	ЕстьКПоступлению = ТаблицаРасчеты.Колонки.Найти("КПоступлению") <> Неопределено;
	ЕстьСторно = ТаблицаРасчеты.Колонки.Найти("Сторно") <> Неопределено;
	
	Для Каждого Стр Из ТаблицаРасчеты Цикл
		
		ДатаПлатежа = ?(ЕстьДатаПлатежа И ЗначениеЗаполнено(Стр.ДатаПлатежа), Стр.ДатаПлатежа, Стр.ДатаРегистратора);
		
		Если (НЕ ЕстьСумма ИЛИ Стр.Сумма = 0) И Стр.КОплате <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора, ТипДокумента, Стр.Вид, Тип);
			Если ЕстьСторно И Стр.Сторно = ИСТИНА  Тогда
				Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
			Иначе
				Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа, Стр.НомерРегистратора, ТипДокумента, Стр.Вид, Тип);
			КонецЕсли;
		ИначеЕсли Стр.ВидДвижения = ВидДвиженияНакопления.Приход И ЕстьСумма И Стр.Сумма > 0
			Или Стр.ВидДвижения = ВидДвиженияНакопления.Расход И ЕстьСумма И Стр.Сумма < 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.Период, Стр.НомерРегистратора, ТипДокумента, Стр.Вид, Тип);
			Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
		ИначеЕсли ЕстьСумма И Стр.Сумма <> 0 ИЛИ ЕстьКОплате И Стр.КОплате <> 0 ИЛИ ЕстьКПоступлению И Стр.КПоступлению <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора, ТипДокумента, Стр.Вид, Тип);
			Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа, Стр.НомерРегистратора, ТипДокумента, Стр.Вид, Тип);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТестЗапросаРаспределениеРасчетовСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц КАК Месяц,
	|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
	|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА &НовыеРасчеты
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Таблица.Документ
	|	КОНЕЦ								 КАК Документ,
	|	Таблица.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов) КАК Операция
	|ИЗ РасчетыСКлиентамиИзменения КАК Таблица
	|ГДЕ
	|	Таблица.Сумма <> 0 ИЛИ Таблица.СуммаРегл <> 0 ИЛИ Таблица.СуммаУпр <> 0
	|";
	Возврат ТекстЗапроса
КонецФункции

Функция ТестЗапросаРаспределениеРасчетовСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц КАК Месяц,
	|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
	|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА &НовыеРасчеты
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Таблица.Документ
	|	КОНЕЦ								 КАК Документ,
	|	Таблица.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов) КАК Операция
	|ИЗ РасчетыСПоставщикамиИзменения КАК Таблица
	|ГДЕ
	|	Таблица.Сумма <> 0 ИЛИ Таблица.СуммаРегл <> 0 ИЛИ Таблица.СуммаУпр <> 0
	|";
	Возврат ТекстЗапроса
КонецФункции

Процедура ПроверитьЗаполнитьАналитикуУчетаПоПартнерам(ТаблицаДвижений)
	
	Если ТаблицаДвижений.Колонки.Найти("Партнер") = Неопределено 
		ИЛИ ТаблицаДвижений.Колонки.Найти("Организация") = Неопределено 
		ИЛИ ТаблицаДвижений.Колонки.Найти("Контрагент") = Неопределено 
		ИЛИ ТаблицаДвижений.Колонки.Найти("Договор") = Неопределено 
		ИЛИ ТаблицаДвижений.Колонки.Найти("НаправлениеДеятельности") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоляАналитики = "Партнер, Организация, Контрагент, Договор, НаправлениеДеятельности";
	ТаблицаНайденнойАналитики = ТаблицаДвижений.Скопировать(,ПоляАналитики); // ТаблицаЗначений
	ТаблицаНайденнойАналитики.Очистить();
	ТаблицаНайденнойАналитики.Колонки.Добавить("АналитикаУчетаПоПартнерам", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам"));
	ПараметрыАналитики = Новый Структура(ПоляАналитики);
	
	Для Каждого Запись Из ТаблицаДвижений Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.АналитикаУчетаПоПартнерам) Тогда
			
			ЗаполнитьЗначенияСвойств(ПараметрыАналитики, Запись);
			Если НЕ ЗначениеЗаполнено(ПараметрыАналитики.Договор) Тогда
				Если ТипЗнч(ПараметрыАналитики.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					ПараметрыАналитики.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				ИначеЕсли ТипЗнч(ПараметрыАналитики.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					ПараметрыАналитики.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			СтрокиАналитики = ТаблицаНайденнойАналитики.НайтиСтроки(ПараметрыАналитики);
			Если СтрокиАналитики.Количество() > 0 Тогда
				Запись.АналитикаУчетаПоПартнерам = СтрокиАналитики[0].АналитикаУчетаПоПартнерам;
			Иначе
				Запись.АналитикаУчетаПоПартнерам = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(ПараметрыАналитики);
				НовСтр = ТаблицаНайденнойАналитики.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Запись);
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаДвижений.Колонки.Найти("КорАналитикаУчетаПоПартнерам") <> Неопределено
			И ТаблицаДвижений.Колонки.Найти("КорОрганизация") <> Неопределено
			И НЕ ЗначениеЗаполнено(Запись.КорАналитикаУчетаПоПартнерам) 
			И ЗначениеЗаполнено(Запись.КорОрганизация)
			И ЗначениеЗаполнено(Запись.КорКонтрагент) Тогда
			ПараметрыАналитики.Партнер = Запись.КорПартнер;
			ПараметрыАналитики.Организация = Запись.КорОрганизация;
			ПараметрыАналитики.Контрагент = Запись.КорКонтрагент;
			ПараметрыАналитики.Договор = Запись.КорДоговор;
			ПараметрыАналитики.НаправлениеДеятельности = Запись.КорНаправлениеДеятельности;
			
			Если НЕ ЗначениеЗаполнено(ПараметрыАналитики.Договор) Тогда
				Если ТипЗнч(ПараметрыАналитики.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					ПараметрыАналитики.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				ИначеЕсли ТипЗнч(ПараметрыАналитики.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					ПараметрыАналитики.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			СтрокиАналитики = ТаблицаНайденнойАналитики.НайтиСтроки(ПараметрыАналитики);
			Если СтрокиАналитики.Количество() > 0 Тогда
				Запись.КорАналитикаУчетаПоПартнерам = СтрокиАналитики[0].АналитикаУчетаПоПартнерам;
			Иначе
				Запись.КорАналитикаУчетаПоПартнерам = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(ПараметрыАналитики);
				НовСтр = ТаблицаНайденнойАналитики.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ПараметрыАналитики);
				НовСтр.АналитикаУчетаПоПартнерам = Запись.КорАналитикаУчетаПоПартнерам;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СписатьСуммуПоКурсу(СуммаРегл, Данные, ПоследнийПлатеж, Кор = "")
	
	ИмяПоляСуммаВВалютеВзаиморасчетов = ?(ПустаяСтрока(Кор), "СуммаВВалютеВзаиморасчетов", "КорСуммаВВалютеВзаиморасчетов");
	СуммаВзаиморасчетов = Окр(СуммаРегл/?(Данные.КурсВалютыВзаиморасчетов=0, 1, Данные.КурсВалютыВзаиморасчетов), 2);
	СуммаВВалютеВзаиморасчетов = СписатьСумму(Данные[ИмяПоляСуммаВВалютеВзаиморасчетов], СуммаВзаиморасчетов, 
												ПоследнийПлатеж И Данные[ИмяПоляСуммаВВалютеВзаиморасчетов] <= СуммаВзаиморасчетов);
	Если Данные.СуммаРегл <= 0 И Данные[ИмяПоляСуммаВВалютеВзаиморасчетов] <> 0 Тогда
		СуммаВВалютеВзаиморасчетов = СуммаВВалютеВзаиморасчетов + Данные[ИмяПоляСуммаВВалютеВзаиморасчетов];
	КонецЕсли;
	
	Возврат СуммаВВалютеВзаиморасчетов;
	
Конецфункции

Процедура ВывестиПредупреждениеОбОбновлении(Макет) Экспорт
	
	Если Константы.РаспределятьФактическиеРасчетыФоновымЗаданием.Получить() Тогда
		
		ТаблицаПредупреждение = Новый ТабличныйДокумент;
		ОбластьГиперссылка = ТаблицаПредупреждение.Область(1,1,1,1);
		ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,2,1,2);
		
		Если ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() 
			И НЕ ОперативныеВзаиморасчетыСервер.МенеджерОтложенногоРаспределенияВзаиморасчетовАктивен() Тогда
			ТекстПредупреждения = НСтр("ru = 'Требуется запустить отложенное проведение документов по взаиморасчетам, данные в отчетах могут быть некорректными.'");
			ОбластьГиперссылка.Текст = "Запустить";
			ОбластьГиперссылка.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
			ОбластьГиперссылка.Шрифт = Новый Шрифт(ОбластьГиперссылка.Шрифт,,,,,Истина);
		ИначеЕсли ОперативныеВзаиморасчетыСервер.МенеджерОтложенногоРаспределенияВзаиморасчетовАктивен() Тогда
			ТекстПредупреждения = НСтр("ru = 'Происходит отложенное проведение документов по взаиморасчетам, данные в отчетах могут быть некорректными.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не завершено отложенное обновление информационной базы, данные в отчетах могут быть некорректными.'");
		КонецЕсли;
		
		ОбластьПредупреждение.Текст = ТекстПредупреждения;
		ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		
		Макет.ВставитьОбласть(ТаблицаПредупреждение.Область(1,1,1,2), Макет.Область(1,1,1,2), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	ИначеЕсли НЕ ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
		
		ТаблицаПредупреждение = Новый ТабличныйДокумент;
		ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
		
		ТекстПредупреждения = НСтр("ru = 'Не завершено отложенное обновление информационной базы, данные в отчетах могут быть некорректными.'");
		ОбластьПредупреждение.Текст = ТекстПредупреждения;
		ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		
		Макет.ВставитьОбласть(ТаблицаПредупреждение.Область(1,1,1,1), Макет.Область(1,1,1,1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныПолейДляОтчетов

// Возвращаемое значение:
// 	Строка
//
Функция ШаблонПоляОтгруженоКлиенту() Экспорт
	
	Возврат "ВЫБОР
	|		//Корректировка задолженности всегда отображается только по отгружено.
	|		//Возврат оплаты клиенту отражаем как отгрузку
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ РасчетыПоСрокам.Сторно
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности))
	|				ИЛИ РасчетыПоСрокам.Сторно)
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА Долг
	|					КОГДА 2
	|						ТОГДА ДолгУпр
	|					ИНАЧЕ ДолгРегл
	|				КОНЕЦ
	|				+ ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА Предоплата
	|					КОГДА 2
	|						ТОГДА ПредоплатаУпр
	|					ИНАЧЕ ПредоплатаРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ РасчетыПоСрокам.Сторно
	|			И РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|			ТОГДА
	|				ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА Долг
	|					КОГДА 2
	|						ТОГДА ДолгУпр
	|					ИНАЧЕ ДолгРегл
	|				КОНЕЦ
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА Предоплата
	|					КОГДА 2
	|						ТОГДА ПредоплатаУпр
	|					ИНАЧЕ ПредоплатаРегл
	|				КОНЕЦ
	|		//Обычная отгрузка, долг всегда есть
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ РасчетыПоСрокам.Сторно
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОПерации.ВзаимозачетЗадолженности),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОПерации.ОтражениеОплатыЧерезКомиссионера),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОПерации.ВозвратОплатыКлиенту),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.КорректировкаЗадолженности))
	|			ТОГДА
	|				ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.Сторно И РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента))
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.Сторно И РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

// Возвращаемое значение:
// 	Строка
//
Функция ШаблонПоляЗачтеноКлиенту() Экспорт
	
	Возврат "ВЫБОР
	|		//Перенос аванса с объекта расчетов платежки и взаимозачет
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|				ИЛИ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) = ТИП(Документ.ВзаимозачетЗадолженности))
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|				+ ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				ИЛИ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) = ТИП(Документ.ВзаимозачетЗадолженности))
	|			ТОГДА
	|				ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		//Обычный зачет аванса
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|				+ ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

// Возвращаемое значение:
// 	Строка
//
Функция ШаблонПоляОплаченоКлиентом() Экспорт
	
	Возврат "ВЫБОР
	|		//Обычная оплата
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ РасчетыПоСрокам.Сторно
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.КорректировкаЗадолженности), ТИП(Документ.ВзаимозачетЗадолженности))
	|			ТОГДА
	|				ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ РасчетыПоСрокам.Сторно
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|																ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту),
	|																ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ РасчетыПоСрокам.Сторно
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.КорректировкаЗадолженности), ТИП(Документ.ВзаимозачетЗадолженности))
	|			ТОГДА
	|				ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.Сторно И РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.Сторно 
	|				И РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента))
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

// Возвращаемое значение:
// 	Строка
//
Функция ШаблонПоляПоставленоПоставщиком() Экспорт
	
	Возврат "ВЫБОР
	|		//Корректировка задолженности всегда отображается только по отгружено
	|		//Возврат оплаты от поставщика отражаем как поставку
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ РасчетыПоСрокам.Сторно
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности))
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА Долг
	|					КОГДА 2
	|						ТОГДА ДолгУпр
	|					ИНАЧЕ ДолгРегл
	|				КОНЕЦ
	|				+ ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА Предоплата
	|					КОГДА 2
	|						ТОГДА ПредоплатаУпр
	|					ИНАЧЕ ПредоплатаРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ РасчетыПоСрокам.Сторно
	|			И РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|			ТОГДА
	|				ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА Долг
	|					КОГДА 2
	|						ТОГДА ДолгУпр
	|					ИНАЧЕ ДолгРегл
	|				КОНЕЦ
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА Предоплата
	|					КОГДА 2
	|						ТОГДА ПредоплатаУпр
	|					ИНАЧЕ ПредоплатаРегл
	|				КОНЕЦ
	|		//Обычная отгрузка, долг всегда есть
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ РасчетыПоСрокам.Сторно
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОПерации.ВзаимозачетЗадолженности))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.КорректировкаЗадолженности))
	|			ТОГДА
	|				ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.Сторно 
	|				И РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику))
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.Сторно И РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

// Возвращаемое значение:
// 	Строка
//
Функция ШаблонПоляЗачтеноПоставщиком() Экспорт
	
	Возврат "ВЫБОР
	|		//Перенос аванса с объекта расчетов платежки и взаимозачет
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				ИЛИ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) = ТИП(Документ.ВзаимозачетЗадолженности))
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|				+ ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				ИЛИ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) = ТИП(Документ.ВзаимозачетЗадолженности))
	|			ТОГДА
	|				ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		//Обычный зачет аванса
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|				+ ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.Сторно И РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.Сторно И РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

// Возвращаемое значение:
// 	Строка
//
Функция ШаблонПоляОплаченоПоставщику() Экспорт
	
	Возврат "ВЫБОР
	|		//Обычная оплата
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ РасчетыПоСрокам.Сторно
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.КорректировкаЗадолженности), ТИП(Документ.ВзаимозачетЗадолженности))
	|			ТОГДА
    |               ВЫБОР &ДанныеОтчета
    |                   КОГДА 4
    |                       ТОГДА РасчетыПоСрокам.Предоплата
    |                   КОГДА 2
    |                       ТОГДА РасчетыПоСрокам.ПредоплатаУпр
    |                   ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
    |               КОНЕЦ
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ РасчетыПоСрокам.Сторно
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
	|			ТОГДА 
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ РасчетыПоСрокам.Сторно
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.КорректировкаЗадолженности), ТИП(Документ.ВзаимозачетЗадолженности))
	|			ТОГДА
	|				ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.Сторно И РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА 
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Долг
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ДолгУпр
	|					ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|				КОНЕЦ
	|		КОГДА РасчетыПоСрокам.Сторно И РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику))
	|			ТОГДА
	|				- ВЫБОР &ДанныеОтчета
	|					КОГДА 4
	|						ТОГДА РасчетыПоСрокам.Предоплата
	|					КОГДА 2
	|						ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|					ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

// Возвращаемое значение:
// 	Строка
//
Функция ШаблонПоляСписаниеПереоценкаЗадолженности() Экспорт
	
	Возврат "ВЫБОР
	|		//Обычная оплата
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.КорректировкаЗадолженности))
	|			ТОГДА ВЫБОР КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА
	|					- ВЫБОР &ДанныеОтчета
	|						КОГДА 4
	|							ТОГДА РасчетыПоСрокам.Долг
	|						КОГДА 2
	|							ТОГДА РасчетыПоСрокам.ДолгУпр
	|						ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|					КОНЕЦ
	|					- ВЫБОР &ДанныеОтчета
	|						КОГДА 4
	|							ТОГДА РасчетыПоСрокам.Предоплата
	|						КОГДА 2
	|							ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|						ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|					КОНЕЦ
	|				ИНАЧЕ
	|					ВЫБОР &ДанныеОтчета
	|						КОГДА 4
	|							ТОГДА РасчетыПоСрокам.Долг
	|						КОГДА 2
	|							ТОГДА РасчетыПоСрокам.ДолгУпр
	|						ИНАЧЕ РасчетыПоСрокам.ДолгРегл
	|					КОНЕЦ
	|					+ ВЫБОР &ДанныеОтчета
	|						КОГДА 4
	|							ТОГДА РасчетыПоСрокам.Предоплата
	|						КОГДА 2
	|							ТОГДА РасчетыПоСрокам.ПредоплатаУпр
	|						ИНАЧЕ РасчетыПоСрокам.ПредоплатаРегл
	|					КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

// Параметры:
// 	ТекстЗапроса - Строка -
// 	НастройкиОтчета - НастройкиКомпоновкиДанных - 
// 	ВычисляемыеПоля - ВычисляемыеПоляСхемыКомпоновкиДанных -
// 	ИмяТаблицы - Строка -
Процедура ДобавитьОтборыВыбранныхПолейВЗапрос(ТекстЗапроса, НастройкиОтчета, ВычисляемыеПоля, ИмяТаблицы) Экспорт
	
	ТекстОтборов = "";
	
	МассивВыбранныхПолей = Новый Массив;
	НайтиВыбранныеПоляРекурсивно(НастройкиОтчета.Выбор.Элементы, МассивВыбранныхПолей);
	
	Для Каждого ВыбранноеПоле Из МассивВыбранныхПолей Цикл
		Если ВычисляемыеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле) <> Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле).Тип.Типы().Найти(Тип("Число")) <> Неопределено Тогда
			Если СтрНайти(Строка(ВыбранноеПоле.Поле),"ПользовательскиеПоля") = 0 Тогда
				ТекстОтборов = ТекстОтборов + ?(ТекстОтборов = "","", "ИЛИ") +"
					|	СУММА("+ИмяТаблицы+"." + Строка(ВыбранноеПоле.Поле) + ") <> 0 ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборыВыбранныхПолей", ?(ТекстОтборов = "", "ИСТИНА", ТекстОтборов));
	
КонецПроцедуры

Процедура НайтиВыбранныеПоляРекурсивно(КоллекцияЭлементов, МассивЭлементов)

	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если Элемент.Использование Тогда
				МассивЭлементов.Добавить(Элемент);
			КонецЕсли;
		Иначе
			НайтиВыбранныеПоляРекурсивно(Элемент.Элементы, МассивЭлементов);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗаданийКЗакрытиюМесяцаСлужебные

Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос)
	
	СоответствиеТекстовЗапросов = Новый Соответствие();
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		СоответствиеТекстовЗапросов.Вставить("РасчетыСКлиентамиИзменения", ТекстЗапросаРасчетыСКлиентами(Запрос));
		СоответствиеТекстовЗапросов.Вставить("РасчетыСПоставщикамиИзменения", ТекстЗапросаРасчетыСПоставщиками(Запрос));
		СоответствиеТекстовЗапросов.Вставить("СуммыДокументовВВалютахУчетаИзменения", ТекстЗапросаСуммыДокументовВВалютахУчета(Запрос));
		СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам", ТекстЗапросаРасчетыСПоставщикамиПоСрокам(Запрос));
	КонецЕсли;
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

#Область ТекстыЗапросовЗаданийКЗакрытиюМесяца

// Параметры:
//   Запрос - Запрос.
//
// Возвращаемое значение:
//   см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
//
Функция ТекстЗапросаРасчетыСКлиентами(Запрос) Экспорт
	
	Если НЕ Запрос.Параметры.Свойство("НовыеРасчеты") Тогда
		Запрос.УстановитьПараметр("НовыеРасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ Документ
	|ИЗ 
	|	РасчетыСКлиентамиИзменения КАК Таблица
	|ГДЕ
	|	Таблица.Сумма <> 0 ИЛИ Таблица.СуммаРегл <> 0 ИЛИ Таблица.СуммаУпр <> 0
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

// Параметры:
//   Запрос - Запрос.
//
// Возвращаемое значение:
//   см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
//
Функция ТекстЗапросаРасчетыСПоставщиками(Запрос) Экспорт
	
	Если НЕ Запрос.Параметры.Свойство("НовыеРасчеты") Тогда
		Запрос.УстановитьПараметр("НовыеРасчеты", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ КАК Документ
	|ИЗ
	|	РасчетыСПоставщикамиИзменения КАК Таблица
	|ГДЕ
	|	Таблица.Сумма <> 0 ИЛИ Таблица.СуммаРегл <> 0 ИЛИ Таблица.СуммаУпр <> 0
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

// Параметры:
//   Запрос - Запрос.
//
// Возвращаемое значение:
//   см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
//
Функция ТекстЗапросаСуммыДокументовВВалютахУчета(Запрос) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов) КАК Операция,
	|	Таблица.ОбъектРасчетов.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ
	|ИЗ
	|	СуммыДокументовВВалютахУчетаИзменения КАК Таблица
	|ГДЕ
	|	Таблица.ПересчитыватьПоДаннымРасчетов
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

// Параметры:
//   Запрос - Запрос.
//
// Возвращаемое значение:
//   см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
//
Функция ТекстЗапросаРасчетыСПоставщикамиПоСрокам(Запрос) Экспорт
	
	ТекстЗапросаВременныхТаблиц = "ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоСрокам.ДатаВозникновения КАК ДатаВозникновения,
	|	РасчетыСПоставщикамиПоСрокам.Долг КАК Долг,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоСрокам.ДатаВозникновения > РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(РасчетыСПоставщикамиПоСрокам.ДатаВозникновения, РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения, ДЕНЬ)
	|	КОНЕЦ КАК ОтсрочкаПлатежа,
	|	КлючиАналитикиУчетаПоПартнерам.Договор КАК Договор,
	|	КлючиАналитикиУчетаПоПартнерам.Организация КАК Организация,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	НАЧАЛОПЕРИОДА(РасчетыСПоставщикамиПоСрокам.Период, МЕСЯЦ) КАК Месяц,
	|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор КАК ДокументРегистратор
	|ПОМЕСТИТЬ ВтГрафикОплаты
	|ИЗ
	|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО КлючиАналитикиУчетаПоПартнерам.Организация = Организации.Ссылка
	|		ПО РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент) В (&ТипыДокументовУчаствующихВДисконтировании)
	|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоСрокам.ДокументРегистратор) <> ТИП(Документ.РасчетКурсовыхРазниц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГрафикОплаты.ДатаВозникновения КАК ДатаВозникновения,
	|	МАКСИМУМ(УчетнаяПолитикаФинансовогоУчета.Период) КАК Период,
	|	УчетнаяПолитикаФинансовогоУчета.Организация КАК Организация
	|ПОМЕСТИТЬ ВтПериодыУчетнойПолитики
	|ИЗ
	|	ВтГрафикОплаты КАК ВтГрафикОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчета
	|		ПО ВтГрафикОплаты.ГоловнаяОрганизация = УчетнаяПолитикаФинансовогоУчета.Организация
	|			И ВтГрафикОплаты.ДатаВозникновения >= УчетнаяПолитикаФинансовогоУчета.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтГрафикОплаты.ДатаВозникновения,
	|	УчетнаяПолитикаФинансовогоУчета.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПериодыУчетнойПолитики.ДатаВозникновения КАК ДатаВозникновения,
	|	ВтПериодыУчетнойПолитики.Период КАК Период,
	|	ВтПериодыУчетнойПолитики.Организация КАК Организация
	|ПОМЕСТИТЬ ВтУчетнаяПолитика
	|ИЗ
	|	ВтПериодыУчетнойПолитики КАК ВтПериодыУчетнойПолитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчета
	|		ПО ВтПериодыУчетнойПолитики.Период = УчетнаяПолитикаФинансовогоУчета.Период
	|			И ВтПериодыУчетнойПолитики.Организация = УчетнаяПолитикаФинансовогоУчета.Организация
	|ГДЕ
	|	УчетнаяПолитикаФинансовогоУчета.УчетДисконтированнойКредиторскойЗадолженностиПоставщикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтОтсрочки.Месяц КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РасчетПроцентныхРасходовДисконтирования) КАК Операция,
	|	ВтОтсрочки.Организация КАК Организация,
	|	ВтОтсрочки.ДокументРегистратор КАК Документ
	|ИЗ
	|	ВтГрафикОплаты КАК ВтОтсрочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВтОтсрочки.Договор = ДоговорыКонтрагентов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУчетнаяПолитика КАК ВтУчетнаяПолитика
	|		ПО ВтОтсрочки.ГоловнаяОрганизация = ВтУчетнаяПолитика.Организация
	|			И ВтОтсрочки.ДатаВозникновения = ВтУчетнаяПолитика.ДатаВозникновения
	|ГДЕ
	|	ДоговорыКонтрагентов.СтавкаДисконтирования > 0
	|	И ДоговорыКонтрагентов.СрокДляПримененияДисконтирования < ВтОтсрочки.ОтсрочкаПлатежа";
	
	ВременныеТаблицы = "ВтГрафикОплаты, ВтПериодыУчетнойПолитики, ВтУчетнаяПолитика";
	
	Запрос.УстановитьПараметр("ТипыДокументовУчаствующихВДисконтировании", РегистрыНакопления.ПроцентныеРасходыДисконтирования.ПолучитьТипыДокументовУчаствующихВДисконтировании());
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(
		ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц,
		ВременныеТаблицы);
	
	Возврат СтруктураТекстовЗапросов
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Модульность

#Область Общее

Процедура ДополнитьИЗакэшироватьПараметры(Форма, ПараметрыЗаполнения) 
	
	ДанныеНастройки = ДополненныеПараметрыМеханизма(Форма, ПараметрыЗаполнения);
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "Взаиморасчеты", ДанныеНастройки);
	
КонецПроцедуры

Процедура ПроверитьПараметры(СтруктураПараметров, ОбязательныеПараметры)
	
	Параметры = СтрРазделить(ОбязательныеПараметры, ",");
	Для Каждого Параметр Из Параметры Цикл
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров[СокрЛП(Параметр)]) Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В модуле менеджера документа не заполнен путь к необходимому параметру %1'"),
				СокрЛП(Параметр)))
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапроса(Запрос) 
	
	Если НЕ Запрос.Параметры.Свойство("ВалютаУправленческогоУчета") Тогда
		Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	КонецЕсли;
	
КонецПроцедуры

//Очищает табличные части этапов графика оплат.
Процедура ОчиститьЭтапыГрафикаОплаты(Объект, СтруктураПараметров)
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
		ЭтапыГрафикаОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		ЭтапыГрафикаОплаты.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
		Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ДатаПлатежа);
		Реквизит.Данные[Реквизит.Имя] = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

//Очищает суммы взаиморасчетов в табличной части документа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки.
// 	ПутьКДаннымТЧ - Строка - Путь к данным табличной части, в которой требуется очистить сумму взаиморасчетов.
//
Процедура ОчиститьСуммыВзаиморасчетовТЧ(Объект, СтруктураПараметров)
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		Возврат;
	КонецЕсли;
	
	ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
	
	Если ТЧ.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧ[0], "СуммаВзаиморасчетов") Тогда
		ЕстьНДС = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧ[0], "СуммаНДСВзаиморасчетов");
		
		Для Каждого Стр Из ТЧ Цикл
			Стр.СуммаВзаиморасчетов = 0;
			Если ЕстьНДС Тогда
				Стр.СуммаНДСВзаиморасчетов = 0;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Очищает определенные поля этапов графика оплаты.
Процедура ОчиститьПоляЭтаповГрафикаОплаты(Форма, СтруктураПараметров, МассивПолейОчистки)
	
	ЭтапыГрафикаОплаты = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	
	Если ЭтапыГрафикаОплаты = Неопределено 
		ИЛИ ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивИмеющихсяПолей = Новый Массив;
	Для Каждого Поле Из МассивПолейОчистки Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0], Поле) Тогда
			МассивИмеющихсяПолей.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из ЭтапыГрафикаОплаты Цикл
		Для Каждого Поле Из МассивИмеющихсяПолей Цикл
			Стр[Поле] = 0;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

//Очищает расшифровку платежа
Процедура ОчиститьРасшифровкуПлатежа(Объект, СтруктураПараметров)
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
	
	Если СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		РасшифровкаПлатежа.Очистить();
	Иначе
		МассивСсылок = Новый Массив;
		Для Каждого Стр Из РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(Стр.ОбъектРасчетов) Тогда
				МассивСсылок.Добавить(Стр.ОбъектРасчетов);
			КонецЕсли;
		КонецЦикла;
		
		РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок,"ТипОбъектаРасчетов,ТолькоОстатки");
		
		Для Каждого Стр Из РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(Стр.ОбъектРасчетов) 
				И (РеквизитыОбъектов[Стр.ОбъектРасчетов].ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.ПлатежВозврат
					ИЛИ РеквизитыОбъектов[Стр.ОбъектРасчетов].ТолькоОстатки) Тогда
				Стр.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьОбъектИСуммуРасшифровкиПлатежа(Объект, СтруктураПараметров)
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
	Для Каждого Стр Из РасшифровкаПлатежа Цикл
		Стр.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		Стр.СуммаВзаиморасчетов = 0;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Стр, "ВалютаВзаиморасчетов") Тогда
			Стр.ВалютаВзаиморасчетов = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		КонецЕсли
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбновитьРаспределеннуюСуммаРасшифровки(Объект);
	КонецЕсли;
	
КонецПроцедуры

//Очищает ссылки на справочник Объекты расчетов.
Процедура ОчиститьОбъектРасчетов(Объект, СтруктураПараметров)
	
	РеквизитОбъектРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ОбъектРасчетов);
	ЧислоВхождений = СтрЧислоВхождений(СтруктураПараметров.ОбъектРасчетов, ".");
	
	Если ЧислоВхождений = 0 Тогда
		Возврат;
	ИначеЕсли ЧислоВхождений = 1 Тогда
		РеквизитОбъектРасчетов.Данные[РеквизитОбъектРасчетов.Имя] = Справочники.ОбъектыРасчетов.ПустаяСсылка();
	Иначе 
		Для Каждого СтрокаТЧ Из РеквизитОбъектРасчетов.Данные Цикл
			СтрокаТЧ[РеквизитОбъектРасчетов.Имя] = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция КоэффициентПересчетаПоКурсу(ВалютаРегламентированногоУчета, Валюта, ВалютаВзаиморасчетов, КурсЧислитель, КурсЗнаменатель)
		
	Если КурсЧислитель = 0 Или КурсЗнаменатель = 0 Тогда
		Возврат 0;
	ИначеЕсли Валюта = ВалютаВзаиморасчетов Тогда
		Возврат 1;
	ИначеЕсли НЕ ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета
			И Валюта = ВалютаРегламентированногоУчета Тогда
		Возврат КурсЗнаменатель / КурсЧислитель;
	Иначе
		Возврат КурсЧислитель / КурсЗнаменатель;
	КонецЕсли;
	
КонецФункции

Функция МассивСтруктурПараметровПоРеквизитам(МассивПараметров, ЗНАЧ ИменаРеквизитов)
	Если ТипЗнч(ИменаРеквизитов) = Тип("Массив") Тогда
		МассивИменРеквизитов = ИменаРеквизитов;
	Иначе
		МассивИменРеквизитов = Новый Массив;
		МассивИменРеквизитов.Добавить(ИменаРеквизитов);
	КонецЕсли;
	Результат = Новый Массив;
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		МассивНайденныхРеквизитов = Новый Массив;
		Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
			РеквизитыМеханизма = СтруктураПараметров.ИспользуемыеРеквизиты["Объект."+ИмяРеквизита];
			Если РеквизитыМеханизма <> Неопределено Тогда
				Для Каждого Реквизит из РеквизитыМеханизма Цикл
					МассивНайденныхРеквизитов.Добавить(Реквизит);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если МассивНайденныхРеквизитов.Количество() > 0 Тогда
			СтруктураРезультата = Новый Структура;
			СтруктураРезультата.Вставить("СтруктураПараметров", СтруктураПараметров);
			СтруктураРезультата.Вставить("ИспользуемыеРеквизиты", МассивНайденныхРеквизитов);
			Результат.Добавить(СтруктураРезультата);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Параметры:
// 	Объект - СправочникОбъект, ДокументОбъект - Описание
// 	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
// 	СистемныеНастройки - Структура - Описание
Процедура ПроверитьЗаполнитьСуммуВзаиморасчетов(Объект, СтруктураПараметров, СистемныеНастройки)
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("СуммаВзаиморасчетов", 0);
	
	СуммаВзаиморасчетовРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.СуммаВзаиморасчетов);
	СуммаВзаиморасчетовПоТареРеквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.СуммаВзаиморасчетовПоТаре);
	
	КурсЧислитель        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.КурсЧислитель);
	КурсЗнаменатель      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.КурсЗнаменатель);
	ВалютаДокумента      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
	ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов);
	Организация          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	КоэффициентПересчета = КоэффициентПересчетаПоКурсу(ВалютаРегламентированногоУчета,
																		ВалютаДокумента,
																		ВалютаВзаиморасчетов,
																		КурсЧислитель,
																		КурсЗнаменатель);
	
	СуммыДокумента = СуммыДокумента(Объект, СтруктураПараметров);
	СуммаДокумента = СуммыДокумента.СуммаДокумента;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		
		ТаблицаТовары = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ).Выгрузить();
		Если ТаблицаТовары.Количество() = 0 ИЛИ НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТаблицаТовары[0], "СуммаВзаиморасчетов") Тогда
			СуммаВзаиморасчетовПоТаре = 0;
			СуммаВзаиморасчетов = СуммаДокумента;
		Иначе
			Если ТаблицаТовары.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				Если ТаблицаТовары.Колонки.Найти("СуммаВзаиморасчетовПоТаре") <> Неопределено Тогда
					СуммаВзаиморасчетовПоТаре = ТаблицаТовары.Итог("СуммаВзаиморасчетовПоТаре");
				Иначе
					СуммаВзаиморасчетовПоТаре = Окр(СуммыДокумента.СуммаЗалогаЗаТару * КоэффициентПересчета, 2);
				КонецЕсли;
				СуммаВзаиморасчетов       = ТаблицаТовары.Итог("СуммаВзаиморасчетов");
			Иначе
				
				Если СтруктураПараметров.ИсточникСуммТабличнаяЧасть Тогда
					СуммаВзаиморасчетовПоТаре   = Окр(СуммыДокумента.СуммаЗалогаЗаТару * КоэффициентПересчета, 2);
				Иначе
					СуммаВзаиморасчетовПоТаре = 0;
				КонецЕсли;
					
				СуммаВзаиморасчетов         = Окр(СуммыДокумента.СуммаДокументаБезЗалога * КоэффициентПересчета, 2) + СуммаВзаиморасчетовПоТаре;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		СуммаВзаиморасчетов = Окр(СуммаДокумента * КоэффициентПересчета, 2);
		СуммаВзаиморасчетовПоТаре = 0;
		
	КонецЕсли;
	
	СуммаВзаиморасчетовРеквизит.Данные[СуммаВзаиморасчетовРеквизит.Имя] = СуммаВзаиморасчетов;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СуммаНДСВзаиморасчетов) Тогда
		Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.СуммаНДСВзаиморасчетов);
		СтавкаНДС = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.СтавкаНДС");
		Реквизит.Данные[Реквизит.Имя] = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаВзаиморасчетов, СтавкаНДС);
	КонецЕсли;
	
	Если СуммаВзаиморасчетовПоТареРеквизит <> Неопределено Тогда
		СуммаВзаиморасчетовПоТареРеквизит.Данные[СуммаВзаиморасчетовПоТареРеквизит.Имя] = СуммаВзаиморасчетовПоТаре;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьСуммыВзаиморасчетовВТабличнойЧасти(Объект, СтруктураПараметров)
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) ИЛИ Не ЗначениеЗаполнено(СтруктураПараметров.СуммаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	ВзаиморасчетыКлиентСервер.ПроверитьОбязательныеПараметры(СтруктураПараметров,
		"ПутьКДаннымТЧ, КурсЧислитель, КурсЗнаменатель, СуммаВзаиморасчетов,
		| ВалютаДокумента, ВалютаВзаиморасчетов, ИмяРеквизитаТЧСуммаСНДС, Организация");
	
	ДанныеТЧ             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
	КурсЧислитель        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.КурсЧислитель);
	КурсЗнаменатель      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.КурсЗнаменатель);
	СуммаВзаиморасчетов  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаВзаиморасчетов);
	ВалютаДокумента      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
	ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов);
	Организация          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
	ИмяСуммаСНДС         = СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС;
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	Если ДанныеТЧ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Колонки = ДанныеТЧ.Выгрузить().Колонки;
	ЕстьСуммаВзаиморасчетов = Колонки.Найти("СуммаВзаиморасчетов") <> Неопределено;
	ЕстьСуммаНДСВзаиморасчетов = Колонки.Найти("СуммаНДСВзаиморасчетов") <> Неопределено;
	
	Если НЕ ЕстьСуммаВзаиморасчетов Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("СуммаВзаиморасчетов", 0);
	
	СуммаВзаиморасчетовТЧПлюс  = 0;
	СуммаВзаиморасчетовТЧМинус = 0;
	СуммаПлюс                  = 0;
	СуммаМинус                 = 0;
	
	Для Каждого Стр Из ДанныеТЧ Цикл
		Если Стр[ИмяСуммаСНДС] > 0 Тогда
			СуммаПлюс = СуммаПлюс + Стр[ИмяСуммаСНДС];
			Если ЗначениеЗаполнено(Стр.СуммаВзаиморасчетов) Тогда
				СуммаВзаиморасчетовТЧПлюс = СуммаВзаиморасчетовТЧПлюс + Стр.СуммаВзаиморасчетов;
			КонецЕсли;
		Иначе
			СуммаМинус = СуммаМинус + Стр[ИмяСуммаСНДС];
			Если ЗначениеЗаполнено(Стр.СуммаВзаиморасчетов) Тогда
				СуммаВзаиморасчетовТЧМинус = СуммаВзаиморасчетовТЧМинус + Стр.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СуммаВзаиморасчетовПоТЧ = ДанныеТЧ.Итог("СуммаВзаиморасчетов");
	
	Если ДанныеТЧ.НайтиСтроки(СтруктураПоиска).Количество() = 0
		И СуммаВзаиморасчетов = СуммаВзаиморасчетовПоТЧ 
		И (НЕ ЕстьСуммаНДСВзаиморасчетов ИЛИ ДанныеТЧ.НайтиСтроки(Новый Структура("СуммаНДСВзаиморасчетов",0)).Количество() = 0) Тогда
		Возврат;
	ИначеЕсли СуммаПлюс = 0 
			И СуммаМинус = 0 Тогда
		ОчиститьСуммыВзаиморасчетовТЧ(Объект, СтруктураПараметров);
		Возврат;
	КонецЕсли;
	
	Если ВалютаДокумента = ВалютаВзаиморасчетов Тогда
		
		Для Индекс = 0 По ДанныеТЧ.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ДанныеТЧ[Индекс].СуммаВзаиморасчетов)
			 ИЛИ ДанныеТЧ[Индекс].СуммаВзаиморасчетов <> ДанныеТЧ[Индекс][ИмяСуммаСНДС] Тогда
				ДанныеТЧ[Индекс].СуммаВзаиморасчетов = ДанныеТЧ[Индекс][ИмяСуммаСНДС];
				Если ЕстьСуммаНДСВзаиморасчетов Тогда
					ДанныеТЧ[Индекс].СуммаНДСВзаиморасчетов = ДанныеТЧ[Индекс].СуммаНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		КоэффициентПересчета = КоэффициентПересчетаПоКурсу(ВалютаРегламентированногоУчета,
																		ВалютаДокумента,
																		ВалютаВзаиморасчетов,
																		КурсЧислитель,
																		КурсЗнаменатель); 
		
		// Сумму, которая должна быть распределена по табличной части,
		// 		получим из разности общей суммы взаиморасчетов
		// 		и итога по заполненным значениям колонки "СуммаВзаиморасчетов".
		Если СуммаМинус = 0 Тогда
			СуммаВзаиморасчетовКРаспределениюПлюс = СуммаВзаиморасчетов;
			СуммаВзаиморасчетовКРаспределениюМинус = 0;
		Иначе
			СуммаВзаиморасчетовКРаспределениюПлюс = Окр(СуммаПлюс*КоэффициентПересчета, 2) - СуммаВзаиморасчетовТЧПлюс;
			СуммаВзаиморасчетовКРаспределениюМинус = Окр(СуммаМинус*КоэффициентПересчета, 2) - СуммаВзаиморасчетовТЧМинус;
		КонецЕсли;
		
		//Распределяем положильное отклонение.
		МассивСумм = Новый Массив;
		Для Индекс = 0 По ДанныеТЧ.Количество()-1 Цикл
			Если ДанныеТЧ[Индекс][ИмяСуммаСНДС] > 0 Тогда
				Если Не ЗначениеЗаполнено(ДанныеТЧ[Индекс].СуммаВзаиморасчетов) Тогда
					МассивСумм.Добавить(Окр(ДанныеТЧ[Индекс][ИмяСуммаСНДС] * КоэффициентПересчета, 2));
				Иначе
					СуммаВзаиморасчетовКРаспределениюПлюс = СуммаВзаиморасчетовКРаспределениюПлюс - ДанныеТЧ[Индекс].СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МассивСумм = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаВзаиморасчетовКРаспределениюПлюс, МассивСумм);
		
		ИндексМассиваСумм = 0;
		Если МассивСумм <> Неопределено Тогда
			Для Индекс=0 По ДанныеТЧ.Количество()-1 Цикл
				Если Не ЗначениеЗаполнено(ДанныеТЧ[Индекс].СуммаВзаиморасчетов) И ДанныеТЧ[Индекс][ИмяСуммаСНДС] > 0 Тогда
					ДанныеТЧ[Индекс].СуммаВзаиморасчетов = МассивСумм[ИндексМассиваСумм];
					ИндексМассиваСумм = ИндексМассиваСумм + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Распределяем отрицательное отклонение.
		МассивСумм = Новый Массив;
		Для Индекс = 0 По ДанныеТЧ.Количество()-1 Цикл
			Если ДанныеТЧ[Индекс][ИмяСуммаСНДС] < 0 Тогда
				Если Не ЗначениеЗаполнено(ДанныеТЧ[Индекс].СуммаВзаиморасчетов) Тогда
					МассивСумм.Добавить(Окр(ДанныеТЧ[Индекс][ИмяСуммаСНДС] * КоэффициентПересчета, 2));
				Иначе
					СуммаВзаиморасчетовКРаспределениюМинус = СуммаВзаиморасчетовКРаспределениюМинус - ДанныеТЧ[Индекс].СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МассивСумм = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаВзаиморасчетовКРаспределениюМинус, МассивСумм);
		
		ИндексМассиваСумм = 0;
		Если МассивСумм <> Неопределено Тогда
			Для Индекс=0 По ДанныеТЧ.Количество()-1 Цикл
				Если Не ЗначениеЗаполнено(ДанныеТЧ[Индекс].СуммаВзаиморасчетов) И ДанныеТЧ[Индекс][ИмяСуммаСНДС] < 0 Тогда
					ДанныеТЧ[Индекс].СуммаВзаиморасчетов = МассивСумм[ИндексМассиваСумм];
					ИндексМассиваСумм = ИндексМассиваСумм + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьСуммаНДСВзаиморасчетов Тогда
			Для Индекс=0 По ДанныеТЧ.Количество()-1 Цикл
				ДанныеТЧ[Индекс].СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ДанныеТЧ[Индекс].СуммаВзаиморасчетов, ДанныеТЧ[Индекс].СтавкаНДС);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаПриЧтенииСозданииНаСервере(Форма, ПараметрыМеханизма)
	
	ВзаиморасчетыВызовСервера.ОбновитьТекстГиперссылкиОграничениеЗадолженности(Форма);
	УстановитьВидимостьЗачетОплаты(Форма);
	УстановитьВидимостьГФУНД(Форма);
	УстановитьВидимостьКолонкиСуммаВзаиморасчетов(Форма);
	ОбновитьТекстГиперссылкиЭтапыОплаты(Форма);
	ОбновитьТекстГиперссылкиСостояниеРасчетов(Форма);
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(Форма);
	ОбновитьРаспределеннуюСуммаРасшифровки(Форма);
	
КонецПроцедуры

Процедура ОбработатьЗаполнить(Объект, СтруктураПараметров, ДанныеЗаполнения, ИмяПараметра, ЗначениеПоУмолчанию)
	
	Если ЗначениеЗаполнено(СтруктураПараметров[ИмяПараметра]) 
		И ТипЗнч(СтруктураПараметров[ИмяПараметра]) = Тип("Строка")
		И СтрЧислоВхождений(СтруктураПараметров[ИмяПараметра], ".") = 1 Тогда
		Реквизит = СтрРазделить(СтруктураПараметров[ИмяПараметра],".")[1];
		
		РеквизитВДанных = Неопределено;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство(Реквизит) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения[Реквизит]) Тогда
				ДанныеЗаполнения[Реквизит] = ЗначениеПоУмолчанию;
			Иначе
				РеквизитВДанных = ДанныеЗаполнения[Реквизит];
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитВДанных) Тогда
			ПроверитьЗаполнитьРеквизит(Объект, СтруктураПараметров, ИмяПараметра, ЗначениеПоУмолчанию);
		Иначе
			ПроверитьЗаполнитьРеквизит(Объект, СтруктураПараметров, ИмяПараметра, РеквизитВДанных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеЭтаповГрафикаОплаты(Объект, Отказ, МассивИлиСтруктура = Неопределено, СистемныеНастройки = Неопределено)
	
	Если МассивИлиСтруктура <> Неопределено И СистемныеНастройки <> Неопределено ИЛИ ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") Тогда
		ДополненныеПараметрыМеханизма = ДополненныеПараметрыМеханизма(Объект, МассивИлиСтруктура);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Объект, "Взаиморасчеты");
		СистемныеНастройки = ДополненныеПараметрыМеханизма.СистемныеНастройки;
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		ЗаданГрафикИсполнения     = СтруктураПараметров.ЗаданГрафикИсполнения;
		ПорядокРасчетов           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
		ДатаПлатежа               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаПлатежа);
		Дата                      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		ВалютаВзаиморасчетов      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов);
		ДатаОтгрузки              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаОтгрузки);
		ЭтапыОплатыРеквизит       = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) И Не ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) 
			ИЛИ НЕ СтруктураПараметров.ИзменяетПланОплаты И НЕ СтруктураПараметров.ЗаказКакСчет
			ИЛИ СтруктураПараметров.ЭтоЗаказ И (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
												ИЛИ ЗаданГрафикИсполнения И (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов")
																			ИЛИ ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным")))
			 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") И ЗначениеЗаполнено(СтруктураПараметров.СуммаДокументаФорма) Тогда
			СуммаЗалогаЗаТару       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаЗалогаЗаТаруФорма);
			СуммаДокументаБезЗалога = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаДокументаФорма) - СуммаЗалогаЗаТару;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
			
			ТаблицаТовары = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
			
			Если СтруктураПараметров.ИсточникСуммТабличнаяЧасть Тогда
				ТаблицаТоварыЗалог = ТаблицаСуммПоЗаказам(Объект);
				СуммаЗалогаЗаТару            = ТаблицаТоварыЗалог.Итог("СуммаЗалогаЗаТару");
				СуммаДокументаБезЗалога      = ТаблицаТоварыЗалог.Итог("СуммаПлатежа");
			Иначе
				СуммаЗалогаЗаТару = 0;
				СуммаДокументаБезЗалога      = ТаблицаТовары.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС) - СуммаЗалогаЗаТару;
			КонецЕсли;
			
		Иначе
			СуммаЗалогаЗаТару            = 0;
			СуммаДокументаБезЗалога      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
			
			ЭтапыГрафикаОплаты = ЭтапыОплатыРеквизит.Данные[ЭтапыОплатыРеквизит.Имя];
			
			СтруктураПараметровПроверки = ЭтапыОплатыСервер.ПараметрыПроверкиКорректностиЗаполненияЭтапов();
			СтруктураПараметровПроверки.ДатаОтгрузки           = ДатаОтгрузки;
			СтруктураПараметровПроверки.Дата                   = Дата;
			СтруктураПараметровПроверки.Валюта                 = ВалютаВзаиморасчетов;
			СтруктураПараметровПроверки.ЭтоЗаказ               = СтруктураПараметров.ЭтоЗаказ;
			СтруктураПараметровПроверки.НадписьЭтапыОплаты     = СтруктураПараметров.НадписьЭтапыОплаты;
			СтруктураПараметровПроверки.СуммаОплатыПоДокументу = СуммаДокументаБезЗалога;
			СтруктураПараметровПроверки.СуммаЗалогаПоДокументу = СуммаЗалогаЗаТару;
			Если ТипЗнч(ДатаОтгрузки) <> Тип("Дата") Тогда
				Подстроки = СтрРазделить(СтруктураПараметров.ДатаОтгрузки, ".");
				СтруктураПараметровПроверки.ИмяКолонкиДатаОтгрузки = Подстроки[Подстроки.Количество()-1];
			КонецЕсли;
			
			ЭтапыОплатыСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(
					ЭтапыГрафикаОплаты,
					Отказ,
					СтруктураПараметровПроверки,
					Ложь,
					Истина);
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ДатаПлатежа) Тогда
			
			ЭтапыОплатыСервер.ПроверитьЗаполнениеКорректностьДатыПлатежа(ДатаПлатежа, Дата, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьРеквизит(Объект, СтруктураПараметров, ИмяРеквизита, ЗначениеПоУмолчанию)
	
	Если СтруктураПараметров[ИмяРеквизита] = "" 
		ИЛИ ТипЗнч(СтруктураПараметров[ИмяРеквизита]) <> Тип("Строка")
		ИЛИ СтрЧислоВхождений(СтруктураПараметров[ИмяРеквизита],".") <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизит = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров[ИмяРеквизита]);
	Если Не ЗначениеЗаполнено(Реквизит.Данные[Реквизит.Имя]) Тогда
		Реквизит.Данные[Реквизит.Имя] = ЗначениеПоУмолчанию; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет курс документа по умолчанию
//
// Обязательные параметры:
//	Дата
//	ВалютаДокумента
//	ВалютаВзаиморасчетов
//
Процедура ЗаполнитьКурсКратностьПоУмолчанию(Объект, ДополненныеПараметрыМеханизма)
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Если СтруктураПараметров.КурсЧислитель = "" Или ТипЗнч(СтруктураПараметров.КурсЧислитель)<> Тип("Строка")
			Или СтруктураПараметров.КурсЗнаменатель = "" Или ТипЗнч(СтруктураПараметров.КурсЗнаменатель)<> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверитьПараметры(СтруктураПараметров, "ВалютаДокумента,ВалютаВзаиморасчетов");
		
		Дата                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
		ВалютаДокумента      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
		ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов);
		Организация          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
		КурсЧислитель        = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.КурсЧислитель);
		КурсЗнаменатель      = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.КурсЗнаменатель);
		
		ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
				
		Если Не ЗначениеЗаполнено(Дата) Тогда
			Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если ВалютаДокумента = ВалютаВзаиморасчетов 
			ИЛИ НЕ ЗначениеЗаполнено(ВалютаДокумента) 
			ИЛИ НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			
			КурсЧислитель.Данные[КурсЧислитель.Имя]           = 1;
			КурсЗнаменатель.Данные[КурсЗнаменатель.Имя] = 1;
			Возврат;
			
		ИначеЕсли ВалютаДокумента = ВалютаРеглУчета И НЕ ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
			
			СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата, ВалютаРеглУчета);
			
		ИначеЕсли НЕ ВалютаДокумента = ВалютаРеглУчета И ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
			
			СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВалютаДокумента, Дата, ВалютаРеглУчета);
			
		Иначе
			
			КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата, ВалютаРеглУчета);
			КурсВалютыДокумента      = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВалютаДокумента, Дата, ВалютаРеглУчета);
			СтруктураКурса           = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(КурсВалютыДокумента, КурсВалютыВзаиморасчетов);
			
		КонецЕсли;
		
		КурсЧислитель.Данные[КурсЧислитель.Имя] = СтруктураКурса.КурсЧислитель;
		КурсЗнаменатель.Данные[КурсЗнаменатель.Имя] = СтруктураКурса.КурсЗнаменатель;
	КонецЦикла;
	
КонецПроцедуры

//Возвращает порядок оплаты по умолчанию.
Функция ОплатаВВалютеПоУмолчанию(Объект, СтруктураПараметров)
	
	ФормаОплаты               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ФормаОплаты);
	БанковскийСчет            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.БанковскийСчетОрганизации);
	Касса                     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Касса);
	ЗаказОснование            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
	Соглашение                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение);
	Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКомиссионера) Тогда
		Договор                   = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДоговорКомиссионера);
	Иначе
		Договор                   = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
	КонецЕсли;
	Организация               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ФормаОплаты, БанковскийСчет, Касса);
	ОплатаВВалюте = ПолучитьОплатуВВалютеПоУмолчанию(ВалютаОплаты, Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ЗаказОснование) Тогда
		ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказОснование, "ОплатаВВалюте");
	ИначеЕсли ЗначениеЗаполнено(Соглашение) Тогда
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, "ИспользуютсяДоговорыКонтрагентов, ОплатаВВалюте");
		УстановитьПривилегированныйРежим(Ложь);
		Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(Договор) Тогда
			ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ОплатаВВалюте");
		ИначеЕсли РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Ложь Тогда
			ОплатаВВалюте = РеквизитыСоглашения.ОплатаВВалюте;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
		ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ОплатаВВалюте");
	Иначе 
		ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ФормаОплаты, БанковскийСчет, Касса);
		Если НЕ ЗначениеЗаполнено(ВалютаОплаты) Тогда
			ВалютаОплаты = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		Если НЕ ВалютаОплаты = ВалютаРегламентированногоУчета Тогда
			ОплатаВВалюте = Истина;
		Иначе
			ОплатаВВалюте = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОплатаВВалюте;
	
КонецФункции

//Возвращает порядок оплаты по умолчанию.
Функция ГФУПоУмолчанию(Объект, СтруктураПараметров, СистемныеНастройки)
	
	ПорядокРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.ПорядокРасчетов);
	НакладнаяПоЗаказам = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.НакладнаяПоЗаказам,,Ложь);
	Соглашение = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.Соглашение);
	Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКомиссионера) Тогда
		Договор = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.ДоговорКомиссионера);
	Иначе
		Договор = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.Договор);
	КонецЕсли;
	
	ГФУПоУмолчанию = Справочники.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка();
	
	Если СтруктураПараметров.ЭтоЗаказ
		ИЛИ СтруктураПараметров.ЭтоПродажаЗакупка 
			И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам И НЕ НакладнаяПоЗаказам
				ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
				ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным
				ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным) Тогда
		
		Если ЗначениеЗаполнено(Соглашение) Тогда
			УстановитьПривилегированныйРежим(Истина);
			РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение,"ИспользуютсяДоговорыКонтрагентов,ГруппаФинансовогоУчета");
			УстановитьПривилегированныйРежим(Ложь);
			Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов 
				И ЗначениеЗаполнено(Договор) Тогда
				ГФУПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ГруппаФинансовогоУчета");
			Иначе
				ГФУПоУмолчанию = РеквизитыСоглашения.ГруппаФинансовогоУчета;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
			ГФУПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ГруппаФинансовогоУчета");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ГФУПоУмолчанию;
	
КонецФункции

//Возвращает порядок расчетов по умолчанию.
Функция ПорядокРасчетовПоПараметрам(Объект, СтруктураПараметров)
	
	ЗаказОснование = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
	Соглашение     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение);
	Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКомиссионера) Тогда
		Договор        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДоговорКомиссионера);
	Иначе
		Договор        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
	КонецЕсли;
	ЭтоЗаказ       = СтруктураПараметров.ЭтоЗаказ;
	
	Возврат ПорядокРасчетов(ЭтоЗаказ, ЗаказОснование, Соглашение, Договор);
	
КонецФункции

// Проверяет является ли оповещение в форме событием изменения документов оплаты.
//
// Параметры:
//   ИмяСобытия - Строка - имя события из процедуры формы "ОбработкаОповещения".
//
// Возвращаемое значение:
//   Булево - Истина, если оповещение является оплатой.
//
Функция ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Экспорт
	
	Возврат
		ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПриходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ВзаимозачетЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности";
	
КонецФункции

// Проверяет является ли оповещение в форме событием изменения документов оплаты.
//
// Параметры:
//   ИмяСобытия - Строка - имя события из процедуры формы "ОбработкаОповещения".
//
// Возвращаемое значение:
//   Булево - Истина, если оповещение является оплатой.
//
Функция ИзменилисьДокументыОплатыПоставщиком(ИмяСобытия) Экспорт
	
	Возврат
		ИмяСобытия = "Запись_АвансовыйОтчет"
		Или ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_РасходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ВзаимозачетЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности";
	
КонецФункции

Функция ТаблицыИсточникиНД()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	Возврат ТЗ;
КонецФункции

Процедура ДобавитьИсточник(Источники, Таблица, Поле = Неопределено)
	НовСтр = Источники.Добавить();
	НовСтр.Таблица = Таблица;
	Если ЗначениеЗаполнено(Поле) Тогда
		НовСтр.Поле = Поле;
	Иначе
		НовСтр.Поле = Таблица + ".ОбъектРасчетов";
	КонецЕсли;
КонецПроцедуры

// Возвращаемое значение:
//   Структура:
//      * СуммаВзаиморасчетовБезЗалога - Число.
//      * СуммаДокументаБезЗалога - Число.
//      * СуммаЗалогаЗаТару - Число.
//      * СуммаВзаиморасчетовПоТаре - Число.
//      * СуммаВзаиморасчетов - Число.
//      * СуммаДокумента - Число.
//
Функция СуммыДокумента(Объект, СтруктураПараметров) Экспорт
	
	Результат = Новый Структура;
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") И ЗначениеЗаполнено(СтруктураПараметров.СуммаДокументаФорма) Тогда
		СуммаЗалогаЗаТару            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаЗалогаЗаТаруФорма, , 0);
		СуммаДокументаБезЗалога      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаДокументаФорма) - СуммаЗалогаЗаТару;
		СуммаВзаиморасчетовПоТаре    = 0;
		СуммаВзаиморасчетовБезЗалога = 0;
	ИначеЕсли (СтруктураПараметров.ЭтоПродажаЗакупка ИЛИ СтруктураПараметров.ЭтоЗаказ)
		И ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения")
		И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ)
		И СтруктураПараметров.ИсточникСуммТабличнаяЧасть Тогда
		ТаблицаТовары                = ТаблицаСуммПоЗаказам(Объект);
		СуммаЗалогаЗаТару            = ТаблицаТовары.Итог("СуммаЗалогаЗаТару");
		СуммаДокументаБезЗалога      = ТаблицаТовары.Итог("СуммаПлатежа");
		СуммаВзаиморасчетовПоТаре    = ТаблицаТовары.Итог("СуммаВзаиморасчетовПоТаре");
		СуммаВзаиморасчетовБезЗалога = ТаблицаТовары.Итог("СуммаВзаиморасчетов");
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
		СуммаДокументаБезЗалога      = ТЧ.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС);
		СуммаВзаиморасчетовБезЗалога = 0;
		Если ТЧ.Количество() > 0 Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧ[0],"СуммаВзаиморасчетов") Тогда
				СуммаВзаиморасчетовБезЗалога = ТЧ.Итог("СуммаВзаиморасчетов");
			Иначе
				СуммаВзаиморасчетовБезЗалога = ТЧ.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС);
			КонецЕсли;
		КонецЕсли;
		СуммаЗалогаЗаТару = 0;
		СуммаВзаиморасчетовПоТаре = 0;
	Иначе
		СуммаЗалогаЗаТару            = 0;
		СуммаДокументаБезЗалога      = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаДокумента);
		СуммаВзаиморасчетовБезЗалога = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаВзаиморасчетов, , 0);
		СуммаВзаиморасчетовПоТаре    = 0;
	КонецЕсли;
	
	Результат.Вставить("СуммаВзаиморасчетовБезЗалога", СуммаВзаиморасчетовБезЗалога);
	Результат.Вставить("СуммаДокументаБезЗалога", СуммаДокументаБезЗалога);
	Результат.Вставить("СуммаЗалогаЗаТару", СуммаЗалогаЗаТару);
	Результат.Вставить("СуммаВзаиморасчетовПоТаре", СуммаВзаиморасчетовПоТаре);
	Результат.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетовБезЗалога + СуммаВзаиморасчетовПоТаре);
	Результат.Вставить("СуммаДокумента", ?(СуммаДокументаБезЗалога = Неопределено,0,СуммаДокументаБезЗалога + СуммаЗалогаЗаТару));
	
	Возврат Результат;
	
КонецФункции

Функция ПоместитьСуммыПоЗаказамВоВременноеХранилище(ДокументОбъект) Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаСуммПоЗаказам(ДокументОбъект), Новый УникальныйИдентификатор());
	
КонецФункции

Функция ТаблицаСуммПоЗаказам(Объект)
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, Объект.Объект.Ссылка));
		ТипОбъект = СтрЗаменить(Менеджер,"ДокументМенеджер","ДокументОбъект");
		ДокументОбъект = ДанныеФормыВЗначение(Объект.Объект, Тип(ТипОбъект));
	Иначе
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Метаданные().ПолноеИмя());
		ДокументОбъект = Объект;
	КонецЕсли;
	
	Возврат Менеджер.СуммыПоЗаказам(ДокументОбъект); 
	
КонецФункции

#КонецОбласти

#Область ЭтапыОплаты

// Параметры:
// 	Объект - ФормаКлиентскогоПриложения, СправочникОбъект, ДокументОбъект - Описание
// 	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
Процедура РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(Объект, СтруктураПараметров)
	
	ЭтапыОплатыРеквизит            = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	Дата                           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
	ДатаПереходаПраваСобственности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаПереходаПраваСобственности);
	Соглашение                     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение);
	
	Если НЕ ЗначениеЗаполнено(ЭтапыОплатыРеквизит.Имя) Тогда
		Возврат;
	Иначе
		ЭтапыГрафикаОплаты = ЭтапыОплатыРеквизит.Данные[ЭтапыОплатыРеквизит.Имя];
	КонецЕсли;
	
	Параметры = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплатыПоЗаказам();
	Параметры.ТабличнаяЧасть                 = ТаблицаСуммПоЗаказам(Объект);
	Параметры.ДатаОтгрузки                   = ?(Дата = Дата(1,1,1), ТекущаяДатаСеанса(), Дата);
	Параметры.ДатаПереходаПраваСобственности = ДатаПереходаПраваСобственности;
	Параметры.Соглашение                     = Соглашение;
	Параметры.ПорядокРасчетов                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
	Параметры.ЭтоРасчетыСКлиентами           = СтруктураПараметров.ДокументРасчетовСКлиентами;
	
	ЭтапыОплатыСервер.РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(ЭтапыГрафикаОплаты, Параметры);
	
КонецПроцедуры

// Процедура заполняет ТЧ ЭтапыГрафикаОплаты по переданной структуре параметров.
Процедура ЗаполнитьЭтапыОплатыДокументаПоЗаказам(Объект, СтруктураПараметров)
	
	Дата                           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
	ДатаПереходаПраваСобственности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДатаПереходаПраваСобственности);
	Соглашение                     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение);
	ЭтапыОплатыРеквизит            = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	Если НЕ ЗначениеЗаполнено(ЭтапыОплатыРеквизит.Имя) Тогда
		Возврат;
	Иначе
		ЭтапыГрафикаОплаты = ЭтапыОплатыРеквизит.Данные[ЭтапыОплатыРеквизит.Имя];
	КонецЕсли;
	
	ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплатыПоЗаказам();
	ПараметрыЗаполнения.ДатаОтгрузки                   = ?(Дата = Дата(1,1,1), ТекущаяДатаСеанса(), Дата);
	ПараметрыЗаполнения.ДатаПереходаПраваСобственности = ДатаПереходаПраваСобственности;
	ПараметрыЗаполнения.ТабличнаяЧасть                 = ТаблицаСуммПоЗаказам(Объект);
	ПараметрыЗаполнения.Соглашение                     = Соглашение;
	ПараметрыЗаполнения.ПорядокРасчетов                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
	ПараметрыЗаполнения.ЭтоРасчетыСКлиентами           = СтруктураПараметров.ДокументРасчетовСКлиентами;
	
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПоЗаказам(ЭтапыГрафикаОплаты, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ЗачетОплатыРасшифровкаПлатежа

Процедура УстановитьВидимостьЗачетОплаты(Форма, СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров <> Неопределено Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СтруктураПараметров);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		МассивПараметров = ДополненныеПараметрыМеханизма.МассивПараметров;
	КонецЕсли;
	
	РольДоступна = РольДоступна("ЗачетОплаты") ИЛИ РольДоступна("ПолныеПрава");
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.ЗачетОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		ПорядокРасчетов    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
		НакладнаяПоЗаказу  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НакладнаяПоЗаказам, ,Ложь);
		ЭтоЗаказ           = СтруктураПараметров.ЭтоЗаказ;
		ЭтоСправочник         = СтруктураПараметров.ЭтоСправочник;
		ИмяЭлемента        = СтруктураПараметров.ЭлементыФормы.ЗачетОплаты;
		ИзменяетПланОплаты = СтруктураПараметров.ИзменяетПланОплаты;
		
		Если ЭтоЗаказ Тогда
			ВидимостьЭлемента = ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
								И РольДоступна
								И (ИзменяетПланОплаты ИЛИ ОбъектыРасчетовСервер.СсылкаЯвляетсяОбъектомРасчетов(Форма,СтруктураПараметров));
		ИначеЕсли НакладнаяПоЗаказу Тогда
			ВидимостьЭлемента = ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоЗаказам
								И НЕ СтруктураПараметров.ЗаказКакСчет И РольДоступна И ИзменяетПланОплаты;
		ИначеЕсли ЭтоСправочник Тогда
			ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
									Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным) И РольДоступна;
		Иначе
			ВидимостьЭлемента = РольДоступна И ИзменяетПланОплаты;
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Видимость", ВидимостьЭлемента);
		
		Если НЕ ОтложенноеОбновлениеРегистровВзаиморасчетовЗавершено(Истина) Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Доступность", Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьГФУНД(Форма, СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров <> Неопределено Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СтруктураПараметров);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		МассивПараметров = ДополненныеПараметрыМеханизма.МассивПараметров;
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета) 
			И Не ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.НаправлениеДеятельности) Тогда
			Продолжить;
		КонецЕсли;
		
		ПорядокРасчетов    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
		НакладнаяПоЗаказу  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НакладнаяПоЗаказам, ,Ложь);
		ЭтоЗаказ           = СтруктураПараметров.ЭтоЗаказ;
		ЭтоСправочник         = СтруктураПараметров.ЭтоСправочник;
		ИмяЭлементаГФУ     = СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета;
		ИмяЭлементаНД      = СтруктураПараметров.ЭлементыФормы.НаправлениеДеятельности;
		ИзменяетПланОплаты = СтруктураПараметров.ИзменяетПланОплаты;
		
		Если ЭтоЗаказ Тогда
			ВидимостьЭлемента = ИзменяетПланОплаты
								И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам 
									Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		ИначеЕсли НакладнаяПоЗаказу Тогда
			ВидимостьЭлемента = ИзменяетПланОплаты
								И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
									Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным
									Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		ИначеЕсли ЭтоСправочник Тогда
			ВидимостьЭлемента = Истина;
		Иначе
			ВидимостьЭлемента = ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов И ИзменяетПланОплаты;
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлементаГФУ, "Видимость", ВидимостьЭлемента);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлементаНД, "Видимость", ВидимостьЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьКолонкиСуммаВзаиморасчетов(Форма)
	ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
	
	Для Каждого СтруктураПараметров Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
		
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.СуммаВзаиморасчетовТЧ) ИЛИ Не ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов) Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(СтруктураПараметров.ЭлементыФормы.СуммаВзаиморасчетовТЧ);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтруктураПараметров.ВалютаДокумента);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(СтруктураПараметров.ВалютаВзаиморасчетов);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьЗаполнитьРасшифровкуПлатежа(Объект, СтруктураПараметров, РежимЗаписи, Отказ = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа)
		ИЛИ НЕ СтруктураПараметров.ИзменяетРасчеты Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа); // ТабличнаяЧасть
	Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
		Ссылка                = СтруктураПараметров.СсылкаНового;
	Иначе
		Ссылка                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка);
	КонецЕсли;
	Валюта                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
	Дата                  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата);
	ЗаказОснование        = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
	Договор               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
	ПорядокРасчетов       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
	Организация           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
	ТипРасчетов           = СтруктураПараметров.ТипРасчетов;
	
	СуммыДокумента        = СуммыДокумента(Объект, СтруктураПараметров);
	
	//Документ мультивалютный, расшифровку не проверяем.
	Если СуммыДокумента.СуммаДокументаБезЗалога = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПорядокРасчетов = Неопределено Тогда
		Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКомиссионера) Тогда
			ДоговорПорядка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ДоговорКомиссионера);
		Иначе
			ДоговорПорядка = Договор;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорПорядка) Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорПорядка, "ПорядокРасчетов")
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент
		И Метаданные.ОпределяемыеТипы.ОбъектРасчетовАванс.Тип.СодержитТип(ТипЗнч(Ссылка))
		И СтруктураПараметров.ИзменяетРасчеты Тогда
		
		МассивВалютВзаиморасчетов = Новый Массив;
		Для Каждого Стр Из РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(Стр.ОбъектРасчетов) И МассивВалютВзаиморасчетов.Найти(Стр.ВалютаВзаиморасчетов) = Неопределено Тогда
				МассивВалютВзаиморасчетов.Добавить(Стр.ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВалютВзаиморасчетов.Количество() > 1 Тогда
			ТекстОшибки = НСтр("ru = 'Запрещено указывать разные валюты взаиморасчетов для неразнесенного платежа.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Отказ = Истина;
		КонецЕсли;
		
		ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
			Валюта,
			Дата,
			РасшифровкаПлатежа,
			Организация);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Расшифровка.ОбъектРасчетов
		|ПОМЕСТИТЬ Расшифровка
		|ИЗ &Расшифровка КАК Расшифровка
		|;
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Расшифровка
		|ГДЕ
		|	Расшифровка.ОбъектРасчетов.Объект = &Ссылка";
		Запрос.УстановитьПараметр("Расшифровка", РасшифровкаПлатежа);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		ТребуетсяОбъектРасчетов = Выборка.Следующий();
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
				ТребуетсяОбъектРасчетов = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяОбъектРасчетов Тогда
			Если ЗначениеЗаполнено(ЗаказОснование) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Тогда
				ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ЗаказОснование, Организация, ТипРасчетов);
				Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
						СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(Договор) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
				ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Договор, Организация, ТипРасчетов);
				Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
						СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетов;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ОбъектыРасчетов = ОбъектыРасчетовСервер.ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, СтруктураПараметров, Истина);
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Организация");
				СтруктураПоиска.Вставить("Контрагент");СтруктураПоиска.Вставить("Партнер");
				
				Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
						
						Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
							Идентификатор = СтрокаРасшифровки.ПолучитьИдентификатор();
						Иначе
							Идентификатор = СтрокаРасшифровки.НомерСтроки;
						КонецЕсли;
						
						Если СтруктураПараметров.ОрганизацияВСтроках Тогда
							СтруктураПоиска.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация, Идентификатор);
						Иначе
							СтруктураПоиска.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
						КонецЕсли;
						
						Если СтруктураПараметров.КонтрагентВСтроках Тогда
							СтруктураПоиска.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент, Идентификатор);
						Иначе
							СтруктураПоиска.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент);
						КонецЕсли;
						
						Если СтруктураПараметров.ПартнерВСтроках Тогда
							СтруктураПоиска.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер, Идентификатор);
						Иначе
							СтруктураПоиска.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер);
						КонецЕсли;
						
						СтрокаРасшифровки.ОбъектРасчетов = ОбъектыРасчетов.НайтиСтроки(СтруктураПоиска)[0].ОбъектРасчетов;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		
		СуммаДокумента        = СуммыДокумента.СуммаЗалогаЗаТару + СуммыДокумента.СуммаДокументаБезЗалога;
		СуммаВзаиморасчетов   = СуммыДокумента.СуммаВзаиморасчетовБезЗалога + СуммыДокумента.СуммаВзаиморасчетовПоТаре;
		
		ОбъектРасчетов = Неопределено;
		
		Если ОбъектыРасчетовСервер.СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров) Тогда
			ОбъектРасчетов = ОбъектыРасчетовСервер.ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, СтруктураПараметров);
			Если Объект.Проведен Тогда
				Состояние = СостояниеВзаиморасчетовОбъектаРасчетов(ОбъектРасчетов, СуммаВзаиморасчетов, ТипРасчетов, Организация);
				СуммаВзаиморасчетов = ?(Состояние.СуммаЗадолженности = 0, СуммаВзаиморасчетов,Состояние.СуммаЗадолженности);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
			ЗаполнитьСуммыРасшифровкиНакладной(СуммаДокумента, СуммаВзаиморасчетов, РасшифровкаПлатежа, ОбъектРасчетов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьВозможныеАвансыВНакладной(Объект, СтруктураПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа)
		ИЛИ НЕ СтруктураПараметров.ИзменяетРасчеты
		ИЛИ НЕ СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,"ДополнительныеСвойства")
		И Объект.ДополнительныеСвойства.Свойство("ЗачетОплаты") Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
	НакладнаяПоЗаказам = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НакладнаяПоЗаказам,,Ложь);
	Договор = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
	РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
	ЭтоРасчетыСКлиентами = СтруктураПараметров.ДокументРасчетовСКлиентами;
	
	Если НакладнаяПоЗаказам И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
		
		Запрос = Новый Запрос;
		
		Если СтруктураПараметров.ИсточникСуммТабличнаяЧасть Тогда
			ТаблицаТовары = ТаблицаСуммПоЗаказам(Объект);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Товары.Заказ КАК Заказ,
			|	Товары.СуммаВзаиморасчетов + Товары.СуммаВзаиморасчетовПоТаре КАК СуммаВНакладной
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ &ТаблицаТовары КАК Товары
			|;";
			Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
			Заказ = ТаблицаТовары.ВыгрузитьКолонку("Заказ");
			ОбъектОснование = Заказ;
		Иначе
			Заказ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
			Сумма = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаВзаиморасчетов);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	&Заказ КАК Заказ,
			|	&сумма КАК СуммаВНакладной
			|ПОМЕСТИТЬ ВтТовары
			|;";
			Запрос.УстановитьПараметр("Заказ", Заказ);
			Запрос.УстановитьПараметр("Сумма", Сумма);
			ОбъектОснование = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование,,Неопределено);
		КонецЕсли;
		
		Если ТипЗнч(ОбъектОснование) <> Тип("Массив") Тогда
			ОбъектОснование = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектОснование);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	СУММА(Товары.СуммаВНакладной) КАК СуммаНакладной
		|ПОМЕСТИТЬ ВтСуммаНакладной
		|ИЗ ВтТовары КАК Товары
		|;
		|
		|ВЫБРАТЬ
		|	Расчеты.ОбъектРасчетов        КАК ОбъектРасчетов,
		|	Расчеты.ОбъектРасчетов.Объект КАК Объект,
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
		|			ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
		|			ТОГДА Расчеты.Сумма
		|		ИНАЧЕ -Расчеты.Сумма
		|	КОНЕЦ)                        КАК ОстатокПредоплаты,
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.Регистратор В (&МассивОбъектов) 
		|			И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами)
		|				ТОГДА КОплате
		|			ИНАЧЕ 0
		|	КОНЕЦ)                         КАК ПланОплатыВсего,
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.Регистратор В (&МассивОбъектов)
		|			И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
		|				И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения) 
		|					ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки))
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
		|					И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения)
		|						ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления))) 
		|					ТОГДА КОплате
		|			ИНАЧЕ 0
		|	КОНЕЦ)                         КАК ПланПредоплаты,
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
		|			ТОГДА Расчеты.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ)                         КАК ВсегоОплачено,
		|	ВтСуммаНакладной.СуммаНакладной КАК СуммаНакладной
		|ПОМЕСТИТЬ ВтРасчеты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСуммаНакладной КАК ВтСуммаНакладной
		|			ПО ИСТИНА
		|ГДЕ
		|	ОбъектРасчетов.Объект В (&МассивОбъектов)
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.ОбъектРасчетов,
		|	ВтСуммаНакладной.СуммаНакладной
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
		|			ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
		|			ТОГДА Расчеты.Сумма
		|		ИНАЧЕ -Расчеты.Сумма
		|	КОНЕЦ) > 0
		|	И 
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.Регистратор В (&МассивОбъектов)
		|			И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
		|				И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения) 
		|					ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки))
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
		|					И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения)
		|						ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления))) 
		|					ТОГДА КОплате
		|			ИНАЧЕ 0
		|	КОНЕЦ) > 0
		|	И 
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
		|			ТОГДА Расчеты.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ) > 0
		|;
		|
		|ВЫБРАТЬ
		|	ВЫБОР 
		|		//На заказ пришло больше предоплаты
		|		КОГДА ВсегоОплачено >= ПланОплатыВсего
		|			ТОГДА Товары.СуммаВНакладной
		|		//На остатке есть достаточная предоплата для текущей накладной
		|		КОГДА ОстатокПредоплаты >= ВЫРАЗИТЬ(Товары.СуммаВНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
		|			ТОГДА ВЫРАЗИТЬ(Товары.СуммаВНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ОбъектРасчетов КАК ОбъектРасчетов,
		|	ОбъектРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	ВтРасчеты КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК Товары
		|			ПО Расчеты.Объект = Товары.Заказ
		|ГДЕ
		|	ВЫБОР 
		|		//На заказ пришло больше предоплаты
		|		КОГДА ВсегоОплачено >= ПланОплатыВсего
		|			ТОГДА СуммаНакладной
		|		//На остатке есть достаточная предоплата для текущей накладной
		|		КОГДА ОстатокПредоплаты >= ВЫРАЗИТЬ(Товары.СуммаВНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
		|			ТОГДА ВЫРАЗИТЬ(Товары.СуммаВНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ > 0
		|";
		Запрос.УстановитьПараметр("МассивОбъектов", ОбъектОснование);
		Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
		Если НЕ ЭтоРасчетыСКлиентами Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,".РасчетыСКлиентами",".РасчетыСПоставщиками");
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НовСтр = РасшифровкаПлатежа.Добавить();
			НовСтр.ОбъектРасчетов = Выборка.ОбъектРасчетов;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр,"ВалютаВзаиморасчетов") Тогда
				НовСтр.ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
			КонецЕсли;
			НовСтр.СуммаВзаиморасчетов = Выборка.Сумма;
			НовСтр.Сумма = Выборка.Сумма;
		КонецЦикла;
	ИначеЕсли НакладнаяПоЗаказам И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным И НЕ СтруктураПараметров.ЗаданГрафикИсполнения Тогда
			
		Если ТипЗнч(ОбъектОснование) <> Тип("Массив") Тогда
			ОбъектОснование = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектОснование);
		КонецЕсли;
		ОбъектОснование.Добавить(Договор);
		
		Запрос = Новый Запрос;
		
		Если СтруктураПараметров.ИсточникСуммТабличнаяЧасть Тогда
			ТаблицаТовары = ТаблицаСуммПоЗаказам(Объект);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Товары.СуммаВзаиморасчетов + Товары.СуммаВзаиморасчетовПоТаре КАК Сумма
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ &ТаблицаТовары КАК Товары
			|;";
			Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
			Заказ = ТаблицаТовары.ВыгрузитьКолонку("Заказ");
		Иначе
			Заказ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
			Сумма = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаВзаиморасчетов);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	&Сумма КАК Сумма
			|ПОМЕСТИТЬ ВтТовары
			|;";
			Запрос.УстановитьПараметр("Сумма", Сумма);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	Товары.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВтСуммаНакладной
		|ИЗ ВтТовары КАК Товары
		|;
		|
		|ВЫБРАТЬ
		|	Расчеты.ОбъектРасчетов        КАК ОбъектРасчетов,
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
		|			ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
		|			ТОГДА Расчеты.Сумма
		|		ИНАЧЕ -Расчеты.Сумма
		|	КОНЕЦ)                        КАК ОстатокПредоплаты,
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.Регистратор В (&Заказ) 
		|			И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами)
		|				ТОГДА КОплате
		|			ИНАЧЕ 0
		|	КОНЕЦ)                         КАК ПланОплатыВсего,
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.Регистратор В (&Заказ)
		|			И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
		|				И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения) 
		|					ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки))
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
		|					И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения)
		|						ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления))) 
		|					ТОГДА КОплате
		|			ИНАЧЕ 0
		|	КОНЕЦ)                         КАК ПланПредоплаты,
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
		|			ТОГДА Расчеты.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ)                         КАК ВсегоОплачено,
		|	ВтСуммаНакладной.Сумма         КАК СуммаНакладной
		|ПОМЕСТИТЬ ВтРасчеты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСуммаНакладной КАК ВтСуммаНакладной
		|			ПО ИСТИНА
		|ГДЕ
		|	ОбъектРасчетов.Объект В (&МассивОбъектов)
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.ОбъектРасчетов,
		|	ВтСуммаНакладной.Сумма
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
		|			ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
		|			ТОГДА Расчеты.Сумма
		|		ИНАЧЕ -Расчеты.Сумма
		|	КОНЕЦ) > 0
		|	И 
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.Регистратор В (&Заказ)
		|			И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
		|				И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения) 
		|					ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки))
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
		|					И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения)
		|						ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления))) 
		|					ТОГДА КОплате
		|			ИНАЧЕ 0
		|	КОНЕЦ) > 0
		|	И 
		|	СУММА(ВЫБОР 
		|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
		|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
		|			ТОГДА Расчеты.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ) > 0
		|;
		|
		|ВЫБРАТЬ
		|	ВЫБОР 
		|		//На заказ пришло больше предоплаты
		|		КОГДА ВсегоОплачено >= ПланОплатыВсего
		|			ТОГДА ВЫБОР
		|					КОГДА ВсегоОплачено * СуммаНакладной / ПланОплатыВсего > ПланОплатыВсего
		|						ТОГДА ВЫБОР
		|								КОГДА ПланОплатыВсего > СуммаНакладной 
		|									ТОГДА СуммаНакладной
		|								ИНАЧЕ ПланОплатыВсего
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|								КОГДА ВсегоОплачено * СуммаНакладной / ПланОплатыВсего > СуммаНакладной 
		|									ТОГДА СуммаНакладной
		|								ИНАЧЕ ПланОплатыВсего
		|							КОНЕЦ
		|				КОНЕЦ 
		|		//На остатке есть достаточная предоплата для текущей накладной
		|		КОГДА ОстатокПредоплаты >= ВЫРАЗИТЬ(СуммаНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
		|			ТОГДА ВЫРАЗИТЬ(СуммаНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ОбъектРасчетов КАК ОбъектРасчетов,
		|	ОбъектРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	ВтРасчеты КАК Расчеты
		|ГДЕ
		|	ВЫБОР 
		|		//На заказ пришло больше предоплаты
		|		КОГДА ВсегоОплачено >= ПланОплатыВсего
		|			ТОГДА ВЫБОР
		|					КОГДА ВсегоОплачено * СуммаНакладной / ПланОплатыВсего > ПланОплатыВсего
		|						ТОГДА ВЫБОР
		|								КОГДА ПланОплатыВсего > СуммаНакладной 
		|									ТОГДА СуммаНакладной
		|								ИНАЧЕ ПланОплатыВсего
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|								КОГДА ВсегоОплачено * СуммаНакладной / ПланОплатыВсего > СуммаНакладной 
		|									ТОГДА СуммаНакладной
		|								ИНАЧЕ ПланОплатыВсего
		|							КОНЕЦ
		|				КОНЕЦ 
		|		//На остатке есть достаточная предоплата для текущей накладной
		|		КОГДА ОстатокПредоплаты >= ВЫРАЗИТЬ(СуммаНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
		|			ТОГДА ВЫРАЗИТЬ(СуммаНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ > 0
		|";
		Запрос.УстановитьПараметр("МассивОбъектов", Договор);
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
		Если НЕ ЭтоРасчетыСКлиентами Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,".РасчетыСКлиентами",".РасчетыСПоставщиками");
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НовСтр = РасшифровкаПлатежа.Добавить();
			НовСтр.ОбъектРасчетов = Выборка.ОбъектРасчетов;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр,"ВалютаВзаиморасчетов") Тогда
				НовСтр.ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
			КонецЕсли;
			НовСтр.СуммаВзаиморасчетов = Выборка.Сумма;
			НовСтр.Сумма = Выборка.Сумма;
		КонецЦикла;
		
	ИначеЕсли ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным Тогда
		
		Если ТипЗнч(ОбъектОснование) <> Тип("Массив") Тогда
			ОбъектОснование = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектОснование);
		КонецЕсли;
		ОбъектОснование.Добавить(Договор);
		
		Запрос = Новый Запрос;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧЗаказ) Тогда
			ТаблицаТовары = ТаблицаСуммПоЗаказам(Объект);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Товары.СуммаВзаиморасчетов + Товары.СуммаВзаиморасчетовПоТаре КАК Сумма
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ &ТаблицаТовары КАК Товары
			|;";
			Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
			Заказ = ТаблицаТовары.ВыгрузитьКолонку("Заказ");
		Иначе
			Заказ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
			Сумма = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.СуммаВзаиморасчетов);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	&Сумма КАК Сумма
			|ПОМЕСТИТЬ ВтТовары
			|;";
			Запрос.УстановитьПараметр("Сумма", Сумма);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ
			|	Товары.Сумма КАК Сумма
			|ПОМЕСТИТЬ ВтСуммаНакладной
			|ИЗ ВтТовары КАК Товары
			|;
			|
			|ВЫБРАТЬ
			|	Расчеты.ОбъектРасчетов        КАК ОбъектРасчетов,
			|	СУММА(ВЫБОР 
			|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
			|			ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
			|			ТОГДА Расчеты.Сумма
			|		ИНАЧЕ -Расчеты.Сумма
			|	КОНЕЦ)                        КАК ОстатокПредоплаты,
			|	СУММА(ВЫБОР 
			|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
			|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
			|				ТОГДА КОплате
			|			ИНАЧЕ 0
			|	КОНЕЦ)                         КАК ПланОплатыВсего,
			|	СУММА(ВЫБОР 
			|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
			|				И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения) 
			|					ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки))
			|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
			|					И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения)
			|						ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления)) 
			|					ТОГДА КОплате
			|			ИНАЧЕ 0
			|	КОНЕЦ)                         КАК ПланПредоплаты,
			|	СУММА(ВЫБОР 
			|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
			|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
			|			ТОГДА Расчеты.Сумма
			|		ИНАЧЕ 0
			|	КОНЕЦ)                         КАК ВсегоОплачено,
			|	ВтСуммаНакладной.Сумма         КАК СуммаНакладной
			|ПОМЕСТИТЬ ВтРасчеты
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСуммаНакладной КАК ВтСуммаНакладной
			|			ПО ИСТИНА
			|ГДЕ
			|	ОбъектРасчетов.Объект В (&МассивОбъектов)
			|СГРУППИРОВАТЬ ПО
			|	Расчеты.ОбъектРасчетов,
			|	ВтСуммаНакладной.Сумма
			|ИМЕЮЩИЕ
			|	СУММА(ВЫБОР 
			|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
			|			ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
			|			ТОГДА Расчеты.Сумма
			|		ИНАЧЕ -Расчеты.Сумма
			|	КОНЕЦ) > 0
			|	И 
			|	СУММА(ВЫБОР 
			|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
			|				И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения) 
			|					ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки))
			|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
			|					И (Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения)
			|						ИЛИ Расчеты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления)) 
			|					ТОГДА КОплате
			|			ИНАЧЕ 0
			|	КОНЕЦ) > 0
			|	И 
			|	СУММА(ВЫБОР 
			|		КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
			|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
			|			ТОГДА Расчеты.Сумма
			|		ИНАЧЕ 0
			|	КОНЕЦ) > 0
			|;
			|
			|ВЫБРАТЬ
			|	ВЫБОР 
			|		//На все заказы пришло больше предоплаты
			|		КОГДА ВсегоОплачено >= ПланОплатыВсего
			|			ТОГДА ВЫБОР
			|					КОГДА ВсегоОплачено * СуммаНакладной / ПланОплатыВсего > ПланОплатыВсего
			|						ТОГДА ПланОплатыВсего
			|					ИНАЧЕ ВсегоОплачено * СуммаНакладной / ПланОплатыВсего
			|				КОНЕЦ 
			|		//На остатке есть достаточная предоплата для текущей накладной
			|		КОГДА ОстатокПредоплаты >= ВЫРАЗИТЬ(СуммаНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
			|			ТОГДА ВЫРАЗИТЬ(СуммаНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Сумма,
			|	ОбъектРасчетов КАК ОбъектРасчетов,
			|	ОбъектРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
			|ИЗ
			|	ВтРасчеты КАК Расчеты
			|ГДЕ
			|	ВЫБОР 
			|		//На все заказы пришло больше предоплаты
			|		КОГДА ВсегоОплачено >= ПланОплатыВсего
			|			ТОГДА ВЫБОР
			|					КОГДА ВсегоОплачено * СуммаНакладной / ПланОплатыВсего > ПланОплатыВсего
			|						ТОГДА ПланОплатыВсего
			|					ИНАЧЕ ВсегоОплачено * СуммаНакладной / ПланОплатыВсего
			|				КОНЕЦ 
			|		//На остатке есть достаточная предоплата для текущей накладной
			|		КОГДА ОстатокПредоплаты >= ВЫРАЗИТЬ(СуммаНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
			|			ТОГДА ВЫРАЗИТЬ(СуммаНакладной * (ПланПредоплаты / ПланОплатыВсего) КАК ЧИСЛО(31,2))
			|		ИНАЧЕ 0
			|	КОНЕЦ > 0";
		
		Запрос.УстановитьПараметр("МассивОбъектов", Договор);
		Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
		Если НЕ ЭтоРасчетыСКлиентами Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,".РасчетыСКлиентами",".РасчетыСПоставщиками");
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НовСтр = РасшифровкаПлатежа.Добавить();
			НовСтр.ОбъектРасчетов = Выборка.ОбъектРасчетов;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр,"ВалютаВзаиморасчетов") Тогда
				НовСтр.ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
			КонецЕсли;
			НовСтр.СуммаВзаиморасчетов = Выборка.Сумма;
			НовСтр.Сумма = Выборка.Сумма;
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Проведение

#Область РасчетыСКлиентами

Функция ОтразитьПереносРасчетовСКлиентом(Запрос, Операция)
	
	Если НЕ Запрос.Параметры.Свойство("ОбъектРасчетовАванс") Тогда
		ОбъектРасчетовАванс = Метаданные.ОпределяемыеТипы.ОбъектРасчетовАванс.Тип.Типы();
		Запрос.УстановитьПараметр("ОбъектРасчетовАванс", ОбъектРасчетовАванс);
	КонецЕсли;
	
	ОбъектРасчетовИсточникОрганизация = "ОбъектыРасчетовИсточники.Организация";
	ОбъектРасчетовПриемникОрганизация = "ОбъектыРасчетовПриемники.Организация";
	
	ХозяйственнаяОперацияИсточник = "ТаблицаРасшифровкаПлатежа.ХозяйственнаяОперация";
	ХозяйственнаяОперацияПриемник = ХозяйственнаяОперацияИсточник;
	
	Если Операция = "Продажа" Тогда
		
		КредиторскаяЗадолженность = "ИСТИНА"; // что в источнике
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ИСТИНА";
		
		УсловиеОперации = "
		|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник <> ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник
		|	И (ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
		|		ИЛИ ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) 
		|			И ТИПЗНАЧЕНИЯ(ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.Объект) = ТИПЗНАЧЕНИЯ(ТаблицаРасшифровкаПлатежа.Ссылка))";
		
		ФормаОплаты = "Неопределено";
		
		ОбъектРасчетовИсточникПартнер = "ОбъектыРасчетовИсточники.Партнер";
		ОбъектРасчетовПриемникПартнер = "ОбъектыРасчетовПриемники.Партнер";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		ОплачиваетсяИсточник = "0";
		ОплачиваетсяПриемник = "0";
		
		ДатаПлатежа = "ТаблицаРасшифровкаПлатежа.ДатаРегистратора";
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки)";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
	
		ИдентификаторФинЗаписи = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносАванса)"; 
	
		ВидИсточник = "2";
		ВидПриемник = "2";
		
	ИначеЕсли Операция = "ПереносПродажи" ИЛИ Операция = "ПереносПлатежа" ИЛИ Операция = "ПереносВозврата" Тогда
		
		КредиторскаяЗадолженность = "ИСТИНА"; // что в источнике
		Если Операция = "ПереносПродажи" Тогда
			КредиторскаяЗадолженность = "ЛОЖЬ";
		КонецЕсли;
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ИСТИНА";
		Если Операция = "ПереносВозврата" Тогда
			ЗаполнятьКорОбъект = "ЛОЖЬ";
		КонецЕсли;
		
		ХозяйственнаяОперацияИсточник = "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)";
		ХозяйственнаяОперацияПриемник = ХозяйственнаяОперацияИсточник;
		Если Операция = "ПереносПродажи" Тогда
			ХозяйственнаяОперацияИсточник = "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)";
			ХозяйственнаяОперацияПриемник = "ТаблицаРасшифровкаПлатежа.ХозяйственнаяОперация";
		КонецЕсли;
		УсловиеОперации = "ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, ЛОЖЬ)
		|	И ТаблицаРасшифровкаПлатежа.Организация <> ОбъектыРасчетовПриемники.Организация";
		Если Операция = "ПереносПлатежа" Тогда
			УсловиеОперации = "ТаблицаРасшифровкаПлатежа.Организация <> ОбъектыРасчетовПриемники.Организация";
		КонецЕсли;
		
		ФормаОплаты = "Неопределено";
		
		ОбъектРасчетовИсточникОрганизация = "ТаблицаРасшифровкаПлатежа.Организация";
		ОбъектРасчетовПриемникОрганизация = "ОбъектыРасчетовПриемники.Организация";
		
		ОбъектРасчетовИсточникПартнер = "ОбъектыРасчетовИсточники.Партнер";
		ОбъектРасчетовПриемникПартнер = "ОбъектыРасчетовПриемники.Партнер";
		
		Если Операция = "ПереносВозврата" Тогда
			ХозяйственнаяОперацияИсточник = "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)";
			ХозяйственнаяОперацияПриемник = ХозяйственнаяОперацияИсточник;
		КонецЕсли;
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		Если Операция = "ПереносПродажи" Тогда
			КОплатеИсточник = "0";
			КОплатеПриемник = "0";
		КонецЕсли;
		
		ОплачиваетсяИсточник = "0";
		ОплачиваетсяПриемник = "0";
		
		ДатаПлатежа = "ТаблицаРасшифровкаПлатежа.ДатаРегистратора";
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки)";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
	
		ИдентификаторФинЗаписи = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносПлатежаМеждуФилиалами)";
		
		Если Операция = "ПереносПродажи" ИЛИ Операция  = "ПереносВозврата" Тогда
			НастройкаХозяйственнойОперации = "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносЗадолженностиМеждуФилиалами)";
		КонецЕсли;
		
		Если  Операция = "ПереносПлатежа" Тогда
			ВидИсточник = "4";
			ВидПриемник = "4";
		Иначе
			ВидИсточник = "2";
			ВидПриемник = "2";
		КонецЕсли;
		
	ИначеЕсли Операция = "ВозвратОплатыКлиенту" Тогда
		
		КредиторскаяЗадолженность = "ИСТИНА";
		СторноИсточник = "ИСТИНА";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ИСТИНА";
		
		УсловиеОперации = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник <> ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник";
		
		ФормаОплаты = "ТаблицаРасшифровкаПлатежа.ФормаОплаты";
		
		//Возврат оплаты дочернему партнеру, должен пройти по дочернему партнеру, а не по головному
		ОбъектРасчетовИсточникПартнер = "ТаблицаРасшифровкаПлатежа.Партнер";
		ОбъектРасчетовПриемникПартнер = "ОбъектыРасчетовПриемники.Партнер";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		ОплачиваетсяИсточник = "ВЫБОР КОГДА ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник.Объект <> ТаблицаРасшифровкаПлатежа.Ссылка
								|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
								|		ИНАЧЕ 0
								|	КОНЕЦ";
		ОплачиваетсяПриемник = "ВЫБОР КОГДА ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник.Объект <> ТаблицаРасшифровкаПлатежа.Ссылка
								|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
								|		ИНАЧЕ 0
								|	КОНЕЦ";
		
		ДатаПлатежа = "ТаблицаРасшифровкаПлатежа.ДатаРегистратора";
		ВариантОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств";
		
		ИдентификаторФинЗаписи = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносАванса)";
		
		ВидИсточник = "7";
		ВидПриемник = "6";
		
	ИначеЕсли Операция = "ВозвратТоваров" Тогда
		
		КредиторскаяЗадолженность = "ИСТИНА";
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ЛОЖЬ";
		
		УсловиеОперации = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник <> ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник";
		
		ФормаОплаты = "Неопределено";
		
		ОбъектРасчетовИсточникПартнер = "ОбъектыРасчетовИсточники.Партнер";
		ОбъектРасчетовПриемникПартнер = "ОбъектыРасчетовПриемники.Партнер";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.ВалютаДокумента";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежа.Сумма";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежа.Сумма";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов";
		
		ОплачиваетсяИсточник = "0";
		ОплачиваетсяПриемник = "0";
		
		ДатаПлатежа = "Неопределено";
		ВариантОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		
		ИдентификаторФинЗаписи = "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВзаимозачетЗадолженности)";
		
		ВидИсточник = "5";
		ВидПриемник = "6";
		
	КонецЕсли;
	
	#Область ТекстЗапроса
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора              КАК Период,
		|	ВЫБОР
		|		КОГДА НЕ &СторноИсточник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноИсточник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ                                                   КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник        КАК ОбъектРасчетов,
		|	&ВалютаВзаиморасчетовИсточник                           КАК Валюта,
		|	
		|	СУММА(&СуммаВзаиморасчетовИсточник *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК Сумма,
		|	СУММА(&КОплатеИсточник *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК КОплате,
		|	СУММА(&ОплачиваетсяИсточник *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК Оплачивается,
		|	0                                                       КАК КОтгрузке,
		|	0                                                       КАК Отгружается,
		|	
		|	&ХозяйственнаяОперацияИсточник                          КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                            КАК ФормаОплаты,
		|	Неопределено                                            КАК СчетНаОплату,
		|	Неопределено                                            КАК ПродажаПоЗаказу,
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора              КАК ДатаРегистратора,
		|	&ДатаПлатежа                                            КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовИсточник = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА &СуммаВзаиморасчетовИсточник
		|			КОГДА ТаблицаРасшифровкаПлатежа.ВалютаДокумента = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовИсточник = &ВалютаУправленческогоУчета
		|				ТОГДА &СуммаВзаиморасчетовИсточник
		|			КОГДА ТаблицаРасшифровкаПлатежа.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаУпр,
		|
		|	ЛОЖЬ                                                    КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
		|	0                                                       КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                          КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                            КАК РасчетныйДокумент,
		|	Неопределено                                            КАК СвязанныйДокумент,
		|	&ВариантОплаты                                          КАК ВариантОплаты,
		|	ТаблицаРасшифровкаПлатежа.ВалютаДокумента               КАК ВалютаДокумента,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Ссылка
		|	КОНЕЦ                                                   КАК КорОбъектРасчетов,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено)
		|	КОНЕЦ                                                   КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	&ОбъектРасчетовИсточникОрганизация                      КАК Организация,
		|	&ОбъектРасчетовИсточникПартнер                          КАК Партнер,
		|	ОбъектыРасчетовИсточники.Контрагент                     КАК Контрагент,
		|	ОбъектыРасчетовИсточники.Договор                        КАК Договор,
		|	НаправленияДеятельностиИсточник.НаправлениеАналитики    КАК НаправлениеДеятельности,
		|
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Партнер
		|	КОНЕЦ                                                   КАК КорПартнер,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ОбъектРасчетовПриемникОрганизация
		|	КОНЕЦ                                                   КАК КорОрганизация,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Контрагент
		|	КОНЕЦ                                                   КАК КорКонтрагент,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Договор
		|	КОНЕЦ                                                   КАК КорДоговор,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ НаправленияДеятельностиПриемник.НаправлениеАналитики
		|	КОНЕЦ                                                   КАК КорНаправлениеДеятельности,
		|	ТаблицаРасшифровкаПлатежа.НомерРегистратора             КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                 КАК ИдентификаторФинЗаписи,
		|	Неопределено                                            КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&ВидИсточник                                            КАК Вид,
		|	&НастройкаХозяйственнойОперации                         КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовИсточники
		|			ПО ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник = ОбъектыРасчетовИсточники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = ОбъектыРасчетовИсточники.Договор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовПриемники
		|			ПО ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник = ОбъектыРасчетовПриемники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговораПриемник
		|			ПО ДанныеДоговораПриемник.Ссылка = ОбъектыРасчетовПриемники.Договор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельностиИсточник
		|			ПО ОбъектыРасчетовИсточники.Ссылка = НаправленияДеятельностиИсточник.ОбъектРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельностиПриемник
		|			ПО ОбъектыРасчетовПриемники.Ссылка = НаправленияДеятельностиПриемник.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаИсточник
		|			ПО &ОбъектРасчетовИсточникОрганизация = АналитикаИсточник.Организация
		|				И ОбъектыРасчетовИсточники.Контрагент = АналитикаИсточник.Контрагент
		|				И &ОбъектРасчетовИсточникПартнер = АналитикаИсточник.Партнер
		|				И ОбъектыРасчетовИсточники.Договор = АналитикаИсточник.Договор
		|				И НаправленияДеятельностиИсточник.НаправлениеАналитики = АналитикаИсточник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПриемник
		|			ПО НЕ &КредиторскаяЗадолженность
		|				И &ОбъектРасчетовПриемникОрганизация = АналитикаПриемник.Организация
		|				И ОбъектыРасчетовПриемники.Контрагент = АналитикаПриемник.Контрагент
		|				И &ОбъектРасчетовПриемникПартнер = АналитикаПриемник.Партнер
		|				И ОбъектыРасчетовПриемники.Договор = АналитикаПриемник.Договор
		|				И НаправленияДеятельностиПриемник.НаправлениеАналитики = АналитикаПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютКлиент КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
		|				И Коэффициенты.Организация = ТаблицаРасшифровкаПлатежа.Организация
		|				И Коэффициенты.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетовИсточник
		|				И Коэффициенты.ДатаКурса = ТаблицаРасшифровкаПлатежа.ДатаРегистратора
		|ГДЕ
		|	&СуммаВзаиморасчетовИсточник > 0
		|	И &УсловиеОперации
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора,
		|	ВЫБОР
		|		КОГДА НЕ &СторноИсточник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноИсточник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено),
		|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник,
		|	&ВалютаВзаиморасчетовИсточник,
		|	&ХозяйственнаяОперацияИсточник,
		|	&ФормаОплаты,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	ТаблицаРасшифровкаПлатежа.ВалютаДокумента,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Ссылка
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено)
		|	КОНЕЦ,
		|	&ОбъектРасчетовИсточникОрганизация,
		|	&ОбъектРасчетовИсточникПартнер,
		|	ОбъектыРасчетовИсточники.Контрагент,
		|	ОбъектыРасчетовИсточники.Договор,
		|	НаправленияДеятельностиИсточник.НаправлениеАналитики,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ &ОбъектРасчетовПриемникОрганизация
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Партнер
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Контрагент
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Договор
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ НаправленияДеятельностиПриемник.НаправлениеАналитики
		|	КОНЕЦ,
		|	ТаблицаРасшифровкаПлатежа.НомерРегистратора,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора              КАК Период,
		|	ВЫБОР
		|		КОГДА НЕ &СторноПриемник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноПриемник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	КОНЕЦ                                                   КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник        КАК ОбъектРасчетов,
		|	&ВалютаВзаиморасчетовПриемник                           КАК Валюта,
		|	
		|	СУММА(&СуммаВзаиморасчетовПриемник *
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК Сумма,
		|	СУММА(&КОплатеПриемник *
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК КОплате,
		|	СУММА(&ОплачиваетсяПриемник *
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК Оплачивается,
		|	0                                                       КАК КОтгрузке,
		|	0                                                       КАК Отгружается,
		|	
		|	&ХозяйственнаяОперацияПриемник                          КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                            КАК ФормаОплаты,
		|	Неопределено                                            КАК СчетНаОплату,
		|	Неопределено                                            КАК ПродажаПоЗаказу,
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора              КАК ДатаРегистратора,
		|	&ДатаПлатежа                                            КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовПриемник = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА &СуммаВзаиморасчетовПриемник
		|			КОГДА ТаблицаРасшифровкаПлатежа.ВалютаДокумента = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ*
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовПриемник = &ВалютаУправленческогоУчета
		|				ТОГДА &СуммаВзаиморасчетовПриемник
		|			КОГДА ТаблицаРасшифровкаПлатежа.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ*
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаУпр,
		|
		|	ЛОЖЬ                                                    КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
		|	0                                                       КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                          КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                            КАК РасчетныйДокумент,
		|	Неопределено                                            КАК СвязанныйДокумент,
		|	&ВариантОплаты                                          КАК ВариантОплаты,
		|	ТаблицаРасшифровкаПлатежа.ВалютаДокумента               КАК ВалютаДокумента,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Ссылка
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорОбъектРасчетов,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	&ОбъектРасчетовПриемникОрганизация                      КАК Организация,
		|	&ОбъектРасчетовПриемникПартнер                          КАК Партнер,
		|	ОбъектыРасчетовПриемники.Контрагент                     КАК Контрагент,
		|	ОбъектыРасчетовПриемники.Договор                        КАК Договор,
		|	НаправленияДеятельностиПриемник.НаправлениеАналитики    КАК НаправлениеДеятельности,
		|
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Партнер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорПартнер,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ОбъектРасчетовИсточникОрганизация
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорОрганизация,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Контрагент
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорКонтрагент,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Договор
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорДоговор,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА НаправленияДеятельностиИсточник.НаправлениеАналитики
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                   КАК КорНаправлениеДеятельности,
		|
		|	ТаблицаРасшифровкаПлатежа.НомерРегистратора             КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                 КАК ИдентификаторФинЗаписи,
		|	Неопределено                                            КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&ВидПриемник                                            КАК Вид,
		|	&НастройкаХозяйственнойОперации                         КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовИсточники
		|			ПО ТаблицаРасшифровкаПлатежа.ОбъектРасчетовИсточник = ОбъектыРасчетовИсточники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговораИсточник
		|			ПО ДанныеДоговораИсточник.Ссылка = ОбъектыРасчетовИсточники.Договор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовПриемники
		|			ПО ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник = ОбъектыРасчетовПриемники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = ОбъектыРасчетовПриемники.Договор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельностиИсточник
		|			ПО ОбъектыРасчетовИсточники.Ссылка = НаправленияДеятельностиИсточник.ОбъектРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельностиПриемник
		|			ПО ОбъектыРасчетовПриемники.Ссылка = НаправленияДеятельностиПриемник.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПриемник
		|			ПО &ОбъектРасчетовПриемникОрганизация = АналитикаПриемник.Организация
		|				И ОбъектыРасчетовПриемники.Контрагент = АналитикаПриемник.Контрагент
		|				И &ОбъектРасчетовПриемникПартнер = АналитикаПриемник.Партнер
		|				И ОбъектыРасчетовПриемники.Договор = АналитикаПриемник.Договор
		|				И НаправленияДеятельностиПриемник.НаправлениеАналитики = АналитикаПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаИсточник
		|			ПО &КредиторскаяЗадолженность
		|				И &ОбъектРасчетовИсточникОрганизация = АналитикаИсточник.Организация
		|				И ОбъектыРасчетовИсточники.Контрагент = АналитикаИсточник.Контрагент
		|				И &ОбъектРасчетовИсточникПартнер = АналитикаИсточник.Партнер
		|				И ОбъектыРасчетовИсточники.Договор = АналитикаИсточник.Договор
		|				И НаправленияДеятельностиИсточник.НаправлениеАналитики = АналитикаИсточник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютКлиент КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
		|				И Коэффициенты.Организация = ТаблицаРасшифровкаПлатежа.Организация
		|				И Коэффициенты.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетовПриемник
		|				И Коэффициенты.ДатаКурса = ТаблицаРасшифровкаПлатежа.ДатаРегистратора
		|ГДЕ
		|	&СуммаВзаиморасчетовПриемник > 0
		|	И &УсловиеОперации
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.ДатаРегистратора,
		|	ВЫБОР
		|		КОГДА НЕ &СторноПриемник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноПриемник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено),
		|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетовПриемник,
		|	&ВалютаВзаиморасчетовПриемник,
		|	&ХозяйственнаяОперацияПриемник,
		|	&ФормаОплаты,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	ТаблицаРасшифровкаПлатежа.ВалютаДокумента,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Ссылка
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	&ОбъектРасчетовПриемникОрганизация,
		|	&ОбъектРасчетовПриемникПартнер,
		|	ОбъектыРасчетовПриемники.Контрагент,
		|	ОбъектыРасчетовПриемники.Договор,
		|	НаправленияДеятельностиПриемник.НаправлениеАналитики,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА &ОбъектРасчетовИсточникОрганизация
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Партнер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Контрагент
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Договор
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА НаправленияДеятельностиИсточник.НаправлениеАналитики
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ТаблицаРасшифровкаПлатежа.НомерРегистратора,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации";
	#КонецОбласти
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОперации",УсловиеОперации);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КредиторскаяЗадолженность", КредиторскаяЗадолженность);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СторноИсточник",            СторноИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СторноПриемник",СторноПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплатеИсточник",КОплатеИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОплачиваетсяИсточник",ОплачиваетсяИсточник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХозяйственнаяОперацияИсточник", ХозяйственнаяОперацияИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХозяйственнаяОперацияПриемник", ХозяйственнаяОперацияПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",ФормаОплаты);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплатеПриемник",КОплатеПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОплачиваетсяПриемник",ОплачиваетсяПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовИсточникОрганизация", ОбъектРасчетовИсточникОрганизация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовПриемникОрганизация", ОбъектРасчетовПриемникОрганизация);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовИсточникПартнер", ОбъектРасчетовИсточникПартнер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовПриемникПартнер", ОбъектРасчетовПриемникПартнер);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВалютаВзаиморасчетовИсточник",ВалютаВзаиморасчетовИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВалютаВзаиморасчетовПриемник",ВалютаВзаиморасчетовПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаВзаиморасчетовИсточник",СуммаВзаиморасчетовИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаВзаиморасчетовПриемник",СуммаВзаиморасчетовПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа", ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты", ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаполнятьКорОбъект",              ЗаполнятьКорОбъект);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИдентификаторФинЗаписи",          ИдентификаторФинЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НастройкаХозяйственнойОперации",  НастройкаХозяйственнойОперации);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВидИсточник", ВидИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВидПриемник", ВидПриемник);
	
	Если Операция = "ПереносПродажи" ИЛИ Операция = "ПереносПлатежа" ИЛИ Операция = "ПереносВозврата" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаРасшифровкаПлатежа",  "втПереносРасчетовКлиент");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ТаблицаРасшифровкаПлатежа",  "ПереносРасчетов");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьПланОплатыОтКлиента(Запрос, Операция)
	
	Если НЕ Запрос.Параметры.Свойство("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	
	Если Операция = "ГрафикИсполненияКлиент" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыКлиентом.ДатаПлатежа, ДЕНЬ)";
		
		ПорядокРасчетов = "ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		СверхЗаказа = "ЛОЖЬ";
		ЗаказПродажи = "Неопределено";
		
		КОплате = "УвеличениеПланаОплатыКлиентом.КОплате";
		
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ДатаПлатежа = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыКлиентом.ДатаПлатежа, ДЕНЬ)";
		СуммаОтклоненияМерныхТоваров = "0";
		ВариантОплаты = "УвеличениеПланаОплатыКлиентом.ВариантОплаты";
		ИсключатьПриКонтроле = "УвеличениеПланаОплатыКлиентом.ИсключатьПриКонтроле";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "&ИдентификаторНеиспользуемойФинЗаписи";
		НастройкаХозяйственнойОперации = "Неопределено";
		Вид = "1";
		
	ИначеЕсли Операция = "ЗаказКлиента" Тогда
		
		ЭтоЗаказ = "ИСТИНА";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыКлиентом.ДатаПлатежа, ДЕНЬ)";
		
		ПорядокРасчетов = "УвеличениеПланаОплатыКлиентом.ПорядокРасчетов";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		СверхЗаказа = "ЛОЖЬ";
		ЗаказПродажи = "Неопределено";
		
		КОплате = "УвеличениеПланаОплатыКлиентом.КОплате";
		
		ФормаОплаты = "УвеличениеПланаОплатыКлиентом.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ДатаПлатежа = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыКлиентом.ДатаПлатежа, ДЕНЬ)";
		СуммаОтклоненияМерныхТоваров = "УвеличениеПланаОплатыКлиентом.СуммаОтклоненияМерныхТоваров";
		ВариантОплаты = "УвеличениеПланаОплатыКлиентом.ВариантОплаты";
		ИсключатьПриКонтроле = "
		|ВЫБОР 
		|	КОГДА УвеличениеПланаОплатыКлиентом.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ УвеличениеПланаОплатыКлиентом.ИсключатьПриКонтроле
		|КОНЕЦ";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "&ИдентификаторНеиспользуемойФинЗаписи";
		НастройкаХозяйственнойОперации = "Неопределено";
		Вид = "1";
		
	ИначеЕсли Операция = "Продажа" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ИСТИНА";
		Период = "ВЫБОР КОГДА УвеличениеПланаОплатыКлиентом.КОплате < 0 ИЛИ УвеличениеПланаОплатыКлиентом.ДатаПлатежа < УвеличениеПланаОплатыКлиентом.ДатаРегистратора
				|		ТОГДА УвеличениеПланаОплатыКлиентом.ДатаРегистратора
				|	ИНАЧЕ КОНЕЦПЕРИОДА(УвеличениеПланаОплатыКлиентом.ДатаПлатежа, ДЕНЬ)
				|КОНЕЦ";
		
		ПорядокРасчетов = "УвеличениеПланаОплатыКлиентом.ПорядокРасчетов";
		НакладнаяПоЗаказам = "УвеличениеПланаОплатыКлиентом.НакладнаяПоЗаказам";
		СверхЗаказа = "УвеличениеПланаОплатыКлиентом.СверхЗаказа";
		ЗаказПродажи = "УвеличениеПланаОплатыКлиентом.ЗаказПродажи";
		
		КОплате = "УвеличениеПланаОплатыКлиентом.КОплате";
		
		ФормаОплаты = "УвеличениеПланаОплатыКлиентом.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		
		ДатаПлатежа = "ВЫБОР КОГДА УвеличениеПланаОплатыКлиентом.КОплате < 0 
				|		ТОГДА ДАТАВРЕМЯ(1,1,1)
				|	ИНАЧЕ УвеличениеПланаОплатыКлиентом.ДатаПлатежа
				|КОНЕЦ";
		
		СуммаОтклоненияМерныхТоваров = "0";
		ВариантОплаты = "УвеличениеПланаОплатыКлиентом.ВариантОплаты";
		ИсключатьПриКонтроле = "УвеличениеПланаОплатыКлиентом.ИсключатьПриКонтроле";
		СвязанныйДокумент = "УвеличениеПланаОплатыКлиентом.СвязанныйДокумент";
		ИдентификаторФинЗаписи = "УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "Неопределено";
		Вид = "2";
		
	ИначеЕсли Операция = "ВозвратОплатыКлиенту" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "УвеличениеПланаОплатыКлиентом.ДатаРегистратора";
		
		ПорядокРасчетов = "Неопределено";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		СверхЗаказа = "ЛОЖЬ";
		ЗаказПродажи = "Неопределено";
		
		КОплате = "УвеличениеПланаОплатыКлиентом.СуммаВзаиморасчетов";
		
		ФормаОплаты = "УвеличениеПланаОплатыКлиентом.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "УвеличениеПланаОплатыКлиентом.СтатьяДвиженияДенежныхСредств";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		СуммаОтклоненияМерныхТоваров = "0";
		ВариантОплаты = "Неопределено";
		ИсключатьПриКонтроле = "Ложь";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "УвеличениеПланаОплатыКлиентом.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "УвеличениеПланаОплатыКлиентом.НастройкаХозяйственнойОперации";
		Вид = "5";
		
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                                          КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                  КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов                     КАК ОбъектРасчетов,
		|	УвеличениеПланаОплатыКлиентом.ВалютаВзаиморасчетов               КАК Валюта,
		|	
		|	0                                                                КАК Сумма,
		|	СУММА(&КОплате)                                                  КАК КОплате,
		|	0                                                                КАК Оплачивается,
		|	0                                                                КАК КОтгрузке,
		|	0                                                                КАК Отгружается,
		|	
		|	УвеличениеПланаОплатыКлиентом.ХозяйственнаяОперация              КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                                     КАК ФормаОплаты,
		|	Неопределено                                                     КАК СчетНаОплату,
		|	&ЗаказПродажи                                                    КАК ПродажаПоЗаказу,
		|	УвеличениеПланаОплатыКлиентом.ДатаРегистратора                   КАК ДатаРегистратора,
		|	&ДатаПлатежа                                                     КАК ДатаПлатежа,
		|	0                                                                КАК СуммаРегл,
		|	0                                                                КАК СуммаУпр,
		|	&ИсключатьПриКонтроле                                            КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0)          КАК ДопустимаяСуммаЗадолженности,
		|	0                                                                КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                   КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	&СвязанныйДокумент                                               КАК СвязанныйДокумент,
		|	&ВариантОплаты                                                   КАК ВариантОплаты,
		|	УвеличениеПланаОплатыКлиентом.ВалютаДокумента                    КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Организация         КАК Организация,
		|	УвеличениеПланаОплатыКлиентом.Партнер                            КАК Партнер,
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Контрагент          КАК Контрагент,
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Договор             КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                     КАК НаправлениеДеятельности,
		|	Неопределено                                                     КАК КорПартнер,
		|	Неопределено                                                     КАК КорОрганизация,
		|	Неопределено                                                     КАК КорКонтрагент,
		|	Неопределено                                                     КАК КорДоговор,
		|	Неопределено                                                     КАК КорНаправлениеДеятельности,
		|	УвеличениеПланаОплатыКлиентом.НомерРегистратора                  КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                          КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&Вид                                                             КАК Вид,
		|	&НастройкаХозяйственнойОперации                                  КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УвеличениеПланаОплатыКлиентом КАК УвеличениеПланаОплатыКлиентом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеПланаОплатыКлиентом.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Организация = Аналитика.Организация
		|				И УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УвеличениеПланаОплатыКлиентом.Партнер = Аналитика.Партнер
		|				И УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&КОплате <> 0
		|	//При расчетах по договору с графиком план оплаты не увеличивается
		|	И НЕ ((&ЭтоЗаказ ИЛИ &ЭтоНакладная)
		|			И ЕСТЬNULL(ДанныеДоговора.ЗаданГрафикИсполнения, ЛОЖЬ)
		|			И &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
		|	//Заказ с расчетами не по накладным
		|	И (&ЭтоЗаказ И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		//Накладная не по заказам или с расчетами по накладным.
		|		ИЛИ (&ЭтоНакладная
		// нужно впрямую уточнять КОплате
		|			И (НЕ &НакладнаяПоЗаказам ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|										ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|										ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
		|		)
		//
		|		//Сверх заказа или по заказу при включенной опции Заказ как счет
		|		ИЛИ &ЭтоНакладная
		|			И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			И &НакладнаяПоЗаказам
		|			И (&СверхЗаказа
		|				ИЛИ НЕ &СверхЗаказа И НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента)
		|		// График исполнения договора, возврат оплаты
		|		ИЛИ НЕ (&ЭтоНакладная ИЛИ &ЭтоЗаказ)
		|		)
		|СГРУППИРОВАТЬ ПО
		|	&Период,
		|	&ДатаПлатежа,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов,
		|	УвеличениеПланаОплатыКлиентом.Партнер,
		|	УвеличениеПланаОплатыКлиентом.ВалютаВзаиморасчетов,
		|	УвеличениеПланаОплатыКлиентом.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&ЗаказПродажи,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&ДатаПлатежа,
		|	УвеличениеПланаОплатыКлиентом.ДатаРегистратора,
		|	УвеличениеПланаОплатыКлиентом.НомерРегистратора,
		|	&ИсключатьПриКонтроле,
		|	&СвязанныйДокумент,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	&ВариантОплаты,
		|	УвеличениеПланаОплатыКлиентом.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период                                                         КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                          КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                 КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	УвеличениеПланаОплатыКлиентом.ВалютаВзаиморасчетов              КАК Валюта,
		|	
		|	0                                                               КАК Сумма,
		|	СУММА(&СуммаОтклоненияМерныхТоваров)                            КАК КОплате,
		|	0                                                               КАК Оплачивается,
		|	0                                                               КАК КОтгрузке,
		|	0                                                               КАК Отгружается,
		|
		|	УвеличениеПланаОплатыКлиентом.ХозяйственнаяОперация             КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                                    КАК ФормаОплаты,
		|	Неопределено                                                    КАК СчетНаОплату,
		|	Неопределено                                                    КАК ПродажаПоЗаказу,
		|	УвеличениеПланаОплатыКлиентом.ДатаРегистратора                  КАК ДатаРегистратора,
		|	&ДатаПлатежа                                                    КАК ДатаПлатежа,
		|	0                                                               КАК СуммаРегл,
		|	0                                                               КАК СуммаУпр,
		|	ИСТИНА                                                          КАК ИсключатьПриКонтроле,
		|	0                                                               КАК ДопустимаяСуммаЗадолженности,
		|	0                                                               КАК ЗалогЗаТару,
		|	Неопределено                                                    КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                    КАК РасчетныйДокумент,
		|	Неопределено                                                     КАК СвязанныйДокумент,
		|	&ВариантОплаты                                                   КАК ВариантОплаты,
		|	УвеличениеПланаОплатыКлиентом.ВалютаДокумента                    КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	   
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Организация         КАК Организация,
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Партнер             КАК Партнер,
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Контрагент          КАК Контрагент,
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Договор             КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                     КАК НаправлениеДеятельности,
		|	Неопределено                                                     КАК КорПартнер,
		|	Неопределено                                                     КАК КорОрганизация,
		|	Неопределено                                                     КАК КорКонтрагент,
		|	Неопределено                                                     КАК КорДоговор,
		|	Неопределено                                                     КАК КорНаправлениеДеятельности,
		|	УвеличениеПланаОплатыКлиентом.НомерРегистратора                  КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                          КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&Вид                                                             КАК Вид,
		|	&НастройкаХозяйственнойОперации                                  КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УвеличениеПланаОплатыКлиентом КАК УвеличениеПланаОплатыКлиентом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеПланаОплатыКлиентом.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Организация = Аналитика.Организация
		|				И УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Партнер = Аналитика.Партнер
		|				И УвеличениеПланаОплатыКлиентом.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&СуммаОтклоненияМерныхТоваров <> 0
		|	И &ЭтоЗаказ И НЕ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|СГРУППИРОВАТЬ ПО
		|	&Период,
		|	&ДатаПлатежа,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеПланаОплатыКлиентом.ОбъектРасчетов,
		|	УвеличениеПланаОплатыКлиентом.ВалютаВзаиморасчетов,
		|	УвеличениеПланаОплатыКлиентом.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	УвеличениеПланаОплатыКлиентом.ДатаРегистратора,
		|	УвеличениеПланаОплатыКлиентом.НомерРегистратора,
		|	&ВариантОплаты,
		|	УвеличениеПланаОплатыКлиентом.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПорядокРасчетов",ПорядокРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаОтклоненияМерныхТоваров",СуммаОтклоненияМерныхТоваров);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоЗаказ",ЭтоЗаказ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоНакладная",ЭтоНакладная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НакладнаяПоЗаказам", НакладнаяПоЗаказам);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СверхЗаказа", СверхЗаказа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказПродажи", ЗаказПродажи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплате", КОплате);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Период", Период);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа", ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты", ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИсключатьПриКонтроле", ИсключатьПриКонтроле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент", СвязанныйДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИдентификаторФинЗаписи", ИдентификаторФинЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НастройкаХозяйственнойОперации", НастройкаХозяйственнойОперации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид", Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьПланОплатыОтКлиента(Операция)

	Если Операция = "ВозвратТоваров" Тогда
		
		СчетНаОплату = "Неопределено";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		КОплате = "УменьшениеПланаОплатыОтКлиента.КОплате";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "Неопределено";
		ПродажаПоЗаказу = "Неопределено";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		Вид = "4";
		
	ИначеЕсли Операция = "Продажа" Тогда
		
		СчетНаОплату = "Неопределено";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		КОплате = "УменьшениеПланаОплатыОтКлиента.КОплате";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "Неопределено";
		ПродажаПоЗаказу = "УменьшениеПланаОплатыОтКлиента.ЗаказПродажи";
		ДатаПлатежа = "УменьшениеПланаОплатыОтКлиента.ДатаПлатежа";
		Вид = "2";
		
	ИначеЕсли Операция = "ОплатаОтКлиента" Тогда
		
		СчетНаОплату = "УменьшениеПланаОплатыОтКлиента.СчетНаОплату";
		ФормаОплаты = "УменьшениеПланаОплатыОтКлиента.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "УменьшениеПланаОплатыОтКлиента.СтатьяДвиженияДенежныхСредств";
		КОплате = "УменьшениеПланаОплатыОтКлиента.СуммаВзаиморасчетов";
		СвязанныйДокумент = "УменьшениеПланаОплатыОтКлиента.СвязанныйДокумент";
		ИдентификаторФинЗаписи = "УменьшениеПланаОплатыОтКлиента.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "УменьшениеПланаОплатыОтКлиента.НастройкаХозяйственнойОперации";
		ПродажаПоЗаказу = "Неопределено";
		ДатаПлатежа = "ВЫБОР КОГДА УменьшениеПланаОплатыОтКлиента.СуммаВзаиморасчетов < 0
		|			ТОГДА НАЧАЛОПЕРИОДА(УменьшениеПланаОплатыОтКлиента.ДатаРегистратора, ДЕНЬ)
		|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ ";
		Вид = "ВЫБОР КОГДА
		|	УменьшениеПланаОплатыОтКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера)
		|		ТОГДА 2
		|	ИНАЧЕ 4
		|КОНЕЦ";
		
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УменьшениеПланаОплатыОтКлиента.ДатаРегистратора                  КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                           КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                  КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	УменьшениеПланаОплатыОтКлиента.ВалютаВзаиморасчетов              КАК Валюта,
		|	
		|	0                                                                КАК Сумма,
		|	СУММА(&КОплате)                                                  КАК КОплате,
		|	0                                                                КАК Оплачивается,
		|	0                                                                КАК КОтгрузке,
		|	0                                                                КАК Отгружается,
		|	
		|	УменьшениеПланаОплатыОтКлиента.ХозяйственнаяОперация             КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                                     КАК ФормаОплаты,
		|	&СчетНаОплату                                                    КАК СчетНаОплату,
		|	&ПродажаПоЗаказу                                                 КАК ПродажаПоЗаказу,
		|	УменьшениеПланаОплатыОтКлиента.ДатаРегистратора                  КАК ДатаРегистратора,
		|	&ДатаПлатежа                                                     КАК ДатаПлатежа,
		|	0                                                                КАК СуммаРегл,
		|	0                                                                КАК СуммаУпр,
		|	ЛОЖЬ                                                             КАК ИсключатьПриКонтроле,
		|	0                                                                КАК ДопустимаяСуммаЗадолженности,
		|	0                                                                КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                   КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	&СвязанныйДокумент                                               КАК СвязанныйДокумент,
		|	Неопределено                                                   КАК ВариантОплаты,
		|	УменьшениеПланаОплатыОтКлиента.ВалютаДокумента                   КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеПланаОплатыОтКлиента.Организация                       КАК Организация,
		|	УменьшениеПланаОплатыОтКлиента.Партнер                           КАК Партнер,
		|	УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов.Контрагент         КАК Контрагент,
		|	УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов.Договор            КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                     КАК НаправлениеДеятельности,
		|	Неопределено                                                     КАК КорПартнер,
		|	Неопределено                                                     КАК КорОрганизация,
		|	Неопределено                                                     КАК КорКонтрагент,
		|	Неопределено                                                     КАК КорДоговор,
		|	Неопределено                                                     КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаОплатыОтКлиента.НомерРегистратора                 КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                          КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&Вид                                                             КАК Вид,
		|	&НастройкаХозяйственнойОперации                                  КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеПланаОплатыОтКлиента КАК УменьшениеПланаОплатыОтКлиента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка =  УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УменьшениеПланаОплатыОтКлиента.Организация = Аналитика.Организация
		|				И УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УменьшениеПланаОплатыОтКлиента.Партнер = Аналитика.Партнер
		|				И УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&КОплате <> 0
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеПланаОплатыОтКлиента.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеПланаОплатыОтКлиента.Организация,
		|	УменьшениеПланаОплатыОтКлиента.ОбъектРасчетов,
		|	УменьшениеПланаОплатыОтКлиента.Партнер,
		|	УменьшениеПланаОплатыОтКлиента.ВалютаВзаиморасчетов,
		|	УменьшениеПланаОплатыОтКлиента.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&СчетНаОплату,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&СвязанныйДокумент,
		|	УменьшениеПланаОплатыОтКлиента.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаОплатыОтКлиента.НомерРегистратора,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации,
		|	&ПродажаПоЗаказу,
		|	&ДатаПлатежа";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                   ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СчетНаОплату",                  СчетНаОплату);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплате",                       КОплате);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",             СвязанныйДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИдентификаторФинЗаписи",        ИдентификаторФинЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НастройкаХозяйственнойОперации", НастройкаХозяйственнойОперации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПродажаПоЗаказу",                ПродажаПоЗаказу);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                    ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид", Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьЗадолженностьКлиента(Операция)

	Если Операция = "Продажа" Тогда
		
		ЗаказПродажи = "УвеличениеЗадолженностиКлиента.ЗаказПродажи";
		СуммаВзаиморасчетовПоТаре = "УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетовПоТаре";
		ВариантОплаты = "УвеличениеЗадолженностиКлиента.ВариантОплаты";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ИсключатьПриКонтроле = "УвеличениеЗадолженностиКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	ИЛИ НЕ ДанныеДоговора.ЗаданГрафикИсполнения";
		ДатаПлатежа = "ВЫБОР КОГДА УвеличениеЗадолженностиКлиента.Сумма < 0
						|		ТОГДА ДАТАВРЕМЯ(1,1,1)
						|	ИНАЧЕ УвеличениеЗадолженностиКлиента.ДатаПлатежа
						|КОНЕЦ";
		СвязанныйДокумент = "УвеличениеЗадолженностиКлиента.СвязанныйДокумент";
		ИдентификаторФинЗаписи = "УвеличениеЗадолженностиКлиента.ОбъектРасчетов.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "Неопределено";
		ХозяйственнаяОперация = "ВЫБОР КОГДА УвеличениеЗадолженностиКлиента.Организация <> УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Организация
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)
		|		ИНАЧЕ УвеличениеЗадолженностиКлиента.ХозяйственнаяОперация
		|	КОНЕЦ";
		Вид = "2";
		
	ИначеЕсли Операция = "ВозвратОплатыКлиенту" Тогда
		
		ЗаказПродажи = "Неопределено";
		СуммаВзаиморасчетовПоТаре = "0";
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПустаяСсылка)";
		ФормаОплаты = "УвеличениеЗадолженностиКлиента.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "УвеличениеЗадолженностиКлиента.СтатьяДвиженияДенежныхСредств";
		ИсключатьПриКонтроле = "ЛОЖЬ";
		ДатаПлатежа = "НАЧАЛОПЕРИОДА(УвеличениеЗадолженностиКлиента.ДатаРегистратора, ДЕНЬ)";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "УвеличениеЗадолженностиКлиента.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "УвеличениеЗадолженностиКлиента.НастройкаХозяйственнойОперации";
		ХозяйственнаяОперация = "УвеличениеЗадолженностиКлиента.ХозяйственнаяОперация";
		Вид = "5";
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	УвеличениеЗадолженностиКлиента.ДатаРегистратора           КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                    КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)           КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеЗадолженностиКлиента.ОбъектРасчетов             КАК ОбъектРасчетов,
		|	УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов       КАК Валюта,
		|	
		|	СУММА(УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов) КАК Сумма,
		|	0                                                         КАК КОплате,
		|	0                                                         КАК Оплачивается,
		|	0                                                         КАК КОтгрузке,
		|	0                                                         КАК Отгружается,
		|	
		|	&ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                              КАК ФормаОплаты,
		|	Неопределено                                              КАК СчетНаОплату,
		|	&ЗаказПродажи                                             КАК ПродажаПоЗаказу,
		|	УвеличениеЗадолженностиКлиента.ДатаРегистратора           КАК ДатаРегистратора,
		|	&ДатаПлатежа                                              КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов
		|			КОГДА УвеличениеЗадолженностиКлиента.ВалютаДокумента = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеЗадолженностиКлиента.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(УвеличениеЗадолженностиКлиента.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                    КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов
		|			КОГДА УвеличениеЗадолженностиКлиента.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеЗадолженностиКлиента.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ((УвеличениеЗадолженностиКлиента.Сумма * Коэффициенты.КоэффициентУпр) КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                    КАК СуммаУпр,
		|
		|	&ИсключатьПриКонтроле                                     КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0)  КАК ДопустимаяСуммаЗадолженности,
		|	СУММА(&СуммаВзаиморасчетовПоТаре)                         КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                            КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                              КАК РасчетныйДокумент,
		|	&СвязанныйДокумент                                        КАК СвязанныйДокумент,
		|	&ВариантОплаты                                            КАК ВариантОплаты,
		|	УвеличениеЗадолженностиКлиента.ВалютаДокумента            КАК ВалютаДокумента,
		|	Неопределено                                              КАК КорОбъектРасчетов,
		|	Неопределено                                              КАК КорАналитикаУчетаПоПартнерам,
		|	  
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеЗадолженностиКлиента.Организация
		|		ИНАЧЕ УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Организация
		|	КОНЕЦ                                                     КАК Организация,
		|	УвеличениеЗадолженностиКлиента.Партнер                    КАК Партнер,
		|	УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Контрагент  КАК Контрагент,
		|	УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Договор     КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики              КАК НаправлениеДеятельности,
		|	Неопределено                                              КАК КорПартнер,
		|	Неопределено                                              КАК КорОрганизация,
		|	Неопределено                                              КАК КорКонтрагент,
		|	Неопределено                                              КАК КорДоговор,
		|	Неопределено                                              КАК КорНаправлениеДеятельности,
		|	УвеличениеЗадолженностиКлиента.НомерРегистратора          КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                   КАК ИдентификаторФинЗаписи,
		|	Неопределено                                              КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&Вид                                                      КАК Вид,
		|	&НастройкаХозяйственнойОперации                           КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УвеличениеЗадолженностиКлиента КАК УвеличениеЗадолженностиКлиента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеЗадолженностиКлиента.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|					ТОГДА УвеличениеЗадолженностиКлиента.Организация
		|					ИНАЧЕ УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Организация
		|				КОНЕЦ = Аналитика.Организация
		|				И УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УвеличениеЗадолженностиКлиента.Партнер = Аналитика.Партнер
		|				И УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютКлиент КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = УвеличениеЗадолженностиКлиента.Ссылка
		|				И Коэффициенты.Организация = УвеличениеЗадолженностиКлиента.Организация
		|				И Коэффициенты.ВалютаВзаиморасчетов = УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов
		|				И Коэффициенты.ДатаКурса = УвеличениеЗадолженностиКлиента.ДатаКурса
		|ГДЕ 
		|	УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов <> 0
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеЗадолженностиКлиента.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено), 
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеЗадолженностиКлиента.Организация
		|		ИНАЧЕ УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Организация
		|	КОНЕЦ,
		|	УвеличениеЗадолженностиКлиента.Партнер,
		|	УвеличениеЗадолженностиКлиента.ОбъектРасчетов,
		|	УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов,
		|	&ХозяйственнаяОперация,
		|	&ЗаказПродажи,
		|	&ДатаПлатежа,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	&ВариантОплаты,
		|	&ФормаОплаты,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&ИсключатьПриКонтроле,
		|	&СвязанныйДокумент,
		|	УвеличениеЗадолженностиКлиента.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеЗадолженностиКлиента.НомерРегистратора,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказПродажи",                  ЗаказПродажи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаВзаиморасчетовПоТаре",     СуммаВзаиморасчетовПоТаре);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты",                 ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                   ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИсключатьПриКонтроле",          ИсключатьПриКонтроле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                   ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",             СвязанныйДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИдентификаторФинЗаписи",        ИдентификаторФинЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НастройкаХозяйственнойОперации", НастройкаХозяйственнойОперации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХозяйственнаяОперация",        ХозяйственнаяОперация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид", Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьНашуЗадолженностьКлиенту(Операция)
	
	Если Операция = "ВозвратТоваров" Тогда
		
		СчетНаОплату = "Неопределено";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		ВариантОплаты = "Неопределено";
		ИсключатьПриКонтроле = "ЛОЖЬ";
		ИдентификаторФинЗаписи = "ТаблицаОплатаОтКлиента.ОбъектРасчетов.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "Неопределено";
		Вид = "4";
		
	ИначеЕсли Операция = "Продажа" Тогда
		
		СчетНаОплату = "Неопределено";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		ДатаПлатежа = "ТаблицаОплатаОтКлиента.ДатаРегистратора";
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки)";
		ИсключатьПриКонтроле = "ИСТИНА";
		ИдентификаторФинЗаписи = "ТаблицаОплатаОтКлиента.ОбъектРасчетов.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "Неопределено";
		Вид = "2";
		
	ИначеЕсли Операция = "ОплатаОтКлиента" Тогда
		
		СчетНаОплату = "ТаблицаОплатаОтКлиента.СчетНаОплату";
		ФормаОплаты = "ТаблицаОплатаОтКлиента.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "ТаблицаОплатаОтКлиента.СтатьяДвиженияДенежныхСредств";
		СвязанныйДокумент = "ТаблицаОплатаОтКлиента.СвязанныйДокумент";
		ДатаПлатежа = "ВЫБОР КОГДА ТаблицаОплатаОтКлиента.СуммаВзаиморасчетов < 0
		|			ТОГДА НАЧАЛОПЕРИОДА(ТаблицаОплатаОтКлиента.ДатаРегистратора, ДЕНЬ)
		|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ";
		ВариантОплаты = "Неопределено";
		ИсключатьПриКонтроле = "ЛОЖЬ";
		ИдентификаторФинЗаписи = "ТаблицаОплатаОтКлиента.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "ТаблицаОплатаОтКлиента.НастройкаХозяйственнойОперации";
		Вид = "ВЫБОР КОГДА
		|	ТаблицаОплатаОтКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера)
		|		ТОГДА 2
		|	ИНАЧЕ 4
		|КОНЕЦ";
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаОплатаОтКлиента.ДатаРегистратора               КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)       КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОплатаОтКлиента.ОбъектРасчетов                 КАК ОбъектРасчетов,
		|	ТаблицаОплатаОтКлиента.ВалютаВзаиморасчетов           КАК Валюта,
		|	
		|	СУММА(ТаблицаОплатаОтКлиента.СуммаВзаиморасчетов)     КАК Сумма,
		|	0                                                     КАК КОплате,
		|	0                                                     КАК Оплачивается,
		|	0                                                     КАК КОтгрузке,
		|	0                                                     КАК Отгружается,
		|	
		|	ТаблицаОплатаОтКлиента.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                          КАК ФормаОплаты,
		|	&СчетНаОплату                                         КАК СчетНаОплату,
		|	Неопределено                                          КАК ПродажаПоЗаказу,
		|	ТаблицаОплатаОтКлиента.ДатаРегистратора               КАК ДатаРегистратора,
		|	&ДатаПлатежа                                          КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА ТаблицаОплатаОтКлиента.ВалютаВзаиморасчетов = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаОплатаОтКлиента.СуммаВзаиморасчетов
		|			КОГДА ТаблицаОплатаОтКлиента.ВалютаДокумента = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаОплатаОтКлиента.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаОплатаОтКлиента.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА ТаблицаОплатаОтКлиента.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаОплатаОтКлиента.СуммаВзаиморасчетов
		|			КОГДА ТаблицаОплатаОтКлиента.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаОплатаОтКлиента.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаОплатаОтКлиента.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                КАК СуммаУпр,
		|
		|	&ИсключатьПриКонтроле                                 КАК ИсключатьПриКонтроле,
		|	0                                                     КАК ДопустимаяСуммаЗадолженности,
		|	0                                                     КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                        КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                          КАК РасчетныйДокумент,
		|	&СвязанныйДокумент                                    КАК СвязанныйДокумент,
		|	&ВариантОплаты                                        КАК ВариантОплаты,
		|	ТаблицаОплатаОтКлиента.ВалютаДокумента                КАК ВалютаДокумента,
		|	Неопределено                                          КАК КорОбъектРасчетов,
		|	Неопределено                                          КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	ВЫБОР КОГДА ТаблицаОплатаОтКлиента.Организация <> ТаблицаОплатаОтКлиента.ОбъектРасчетов.Организация
		|		ТОГДА ТаблицаОплатаОтКлиента.Организация
		|		ИНАЧЕ ТаблицаОплатаОтКлиента.ОбъектРасчетов.Организация
		|	КОНЕЦ                                                 КАК Организация,
		|	ТаблицаОплатаОтКлиента.Партнер                        КАК Партнер,
		|	ТаблицаОплатаОтКлиента.ОбъектРасчетов.Контрагент      КАК Контрагент,
		|	ТаблицаОплатаОтКлиента.ОбъектРасчетов.Договор         КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики          КАК НаправлениеДеятельности,
		|	Неопределено                                          КАК КорПартнер,
		|	Неопределено                                          КАК КорОрганизация,
		|	Неопределено                                          КАК КорКонтрагент,
		|	Неопределено                                          КАК КорДоговор,
		|	Неопределено                                          КАК КорНаправлениеДеятельности,
		|	ТаблицаОплатаОтКлиента.НомерРегистратора              КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                               КАК ИдентификаторФинЗаписи,
		|	Неопределено                                          КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&Вид                                                  КАК Вид,
		|	&НастройкаХозяйственнойОперации                       КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#ТаблицаОплатаОтКлиента КАК ТаблицаОплатаОтКлиента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО ТаблицаОплатаОтКлиента.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ТаблицаОплатаОтКлиента.ОбъектРасчетов.Договор = ДанныеДоговора.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО ВЫБОР КОГДА ТаблицаОплатаОтКлиента.Организация <> ТаблицаОплатаОтКлиента.ОбъектРасчетов.Организация
		|						ТОГДА ТаблицаОплатаОтКлиента.Организация
		|					ИНАЧЕ ТаблицаОплатаОтКлиента.ОбъектРасчетов.Организация
		|				КОНЕЦ = Аналитика.Организация
		|				И ТаблицаОплатаОтКлиента.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И ТаблицаОплатаОтКлиента.Партнер = Аналитика.Партнер
		|				И ТаблицаОплатаОтКлиента.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютКлиент КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = ТаблицаОплатаОтКлиента.Ссылка
		|				И Коэффициенты.Организация = ТаблицаОплатаОтКлиента.Организация
		|				И Коэффициенты.ВалютаВзаиморасчетов = ТаблицаОплатаОтКлиента.ВалютаВзаиморасчетов
		|				И Коэффициенты.ДатаКурса = ТаблицаОплатаОтКлиента.ДатаКурса
		|ГДЕ
		|	ТаблицаОплатаОтКлиента.СуммаВзаиморасчетов <> 0 
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплатаОтКлиента.ДатаРегистратора,
		|	&ДатаПлатежа,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	ТаблицаОплатаОтКлиента.ОбъектРасчетов,
		|	ВЫБОР КОГДА ТаблицаОплатаОтКлиента.Организация <> ТаблицаОплатаОтКлиента.ОбъектРасчетов.Организация
		|		ТОГДА ТаблицаОплатаОтКлиента.Организация
		|		ИНАЧЕ ТаблицаОплатаОтКлиента.ОбъектРасчетов.Организация
		|	КОНЕЦ,
		|	ТаблицаОплатаОтКлиента.Партнер,
		|	ТаблицаОплатаОтКлиента.ВалютаВзаиморасчетов,
		|	ТаблицаОплатаОтКлиента.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&СчетНаОплату,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&СвязанныйДокумент,
		|	ТаблицаОплатаОтКлиента.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	ТаблицаОплатаОтКлиента.НомерРегистратора,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                   ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СчетНаОплату",                  СчетНаОплату);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",             СвязанныйДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты",                 ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                   ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИсключатьПриКонтроле",          ИсключатьПриКонтроле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИдентификаторФинЗаписи",        ИдентификаторФинЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НастройкаХозяйственнойОперации", НастройкаХозяйственнойОперации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид", Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьОплачиваетсяКлиентом(Операция)

	Если Операция = "ОплатаОтКлиента" Тогда
		СчетНаОплату = "УвеличениеОплачиваетсяКлиентом.СчетНаОплату";
		Вид = "4";
		ЗаявкаНаРасходованиеДенежныхСредств = "Неопределено";
	ИначеЕсли Операция = "ВозвратОплатыКлиенту" Тогда
		СчетНаОплату = "Неопределено";
		Вид = "5";
		ЗаявкаНаРасходованиеДенежныхСредств = "УвеличениеОплачиваетсяКлиентом.ЗаявкаНаРасходованиеДенежныхСредств";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	УвеличениеОплачиваетсяКлиентом.ДатаРегистратора                  КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                  КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	
		|	УвеличениеОплачиваетсяКлиентом.ВалютаВзаиморасчетов              КАК Валюта,
		|	
		|	0                                                                КАК Сумма,
		|	0                                                                КАК КОплате,
		|	СУММА(УвеличениеОплачиваетсяКлиентом.УвеличениеОплачивается)     КАК Оплачивается,
		|	0                                                                КАК КОтгрузке,
		|	0                                                                КАК Отгружается,
		|	
		|	УвеличениеОплачиваетсяКлиентом.ХозяйственнаяОперация             КАК ХозяйственнаяОперация,
		|	УвеличениеОплачиваетсяКлиентом.ФормаОплаты                       КАК ФормаОплаты,
		|	&СчетНаОплату                                                    КАК СчетНаОплату,
		|	Неопределено                                                     КАК ПродажаПоЗаказу,
		|	УвеличениеОплачиваетсяКлиентом.ДатаРегистратора                  КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК СуммаРегл,
		|	0                                                                КАК СуммаУпр,
		|	ЛОЖЬ                                                             КАК ИсключатьПриКонтроле,
		|	0                                                                КАК ДопустимаяСуммаЗадолженности,
		|	0                                                                КАК ЗалогЗаТару,
		|	УвеличениеОплачиваетсяКлиентом.СтатьяДвиженияДенежныхСредств     КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	Неопределено                                                     КАК СвязанныйДокумент,
		|	Неопределено                                                     КАК ВариантОплаты,
		|	УвеличениеОплачиваетсяКлиентом.ВалютаДокумента                   КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов.Организация    КАК Организация,
		|	УвеличениеОплачиваетсяКлиентом.Партнер                       КАК Партнер,
		|	УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов.Контрагент     КАК Контрагент,
		|	УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов.Договор        КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики         КАК НаправлениеДеятельности,
		|	Неопределено                                         КАК КорПартнер,
		|	Неопределено                                         КАК КорОрганизация,
		|	Неопределено                                         КАК КорКонтрагент,
		|	Неопределено                                         КАК КорДоговор,
		|	Неопределено                                         КАК КорНаправлениеДеятельности,
		|	УвеличениеОплачиваетсяКлиентом.НомерРегистратора     КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                КАК ИдентификаторФинЗаписи,
		|	&ЗаявкаНаРасходованиеДенежныхСредств                 КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&Вид                                                             КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УвеличениеОплачиваетсяКлиентом КАК УвеличениеОплачиваетсяКлиентом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка =  УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов.Организация = Аналитика.Организация
		|				И УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УвеличениеОплачиваетсяКлиентом.Партнер = Аналитика.Партнер
		|				И УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УвеличениеОплачиваетсяКлиентом.УвеличениеОплачивается <> 0
		|	И УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов.Объект <> УвеличениеОплачиваетсяКлиентом.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеОплачиваетсяКлиентом.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеОплачиваетсяКлиентом.ОбъектРасчетов,
		|	УвеличениеОплачиваетсяКлиентом.Партнер,
		|	УвеличениеОплачиваетсяКлиентом.ВалютаВзаиморасчетов,
		|	УвеличениеОплачиваетсяКлиентом.ХозяйственнаяОперация,
		|	УвеличениеОплачиваетсяКлиентом.ФормаОплаты,
		|	&СчетНаОплату,
		|	УвеличениеОплачиваетсяКлиентом.СтатьяДвиженияДенежныхСредств,
		|	УвеличениеОплачиваетсяКлиентом.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	&ЗаявкаНаРасходованиеДенежныхСредств,
		|	УвеличениеОплачиваетсяКлиентом.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СчетНаОплату", СчетНаОплату);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид", Вид);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаявкаНаРасходованиеДенежныхСредств", ЗаявкаНаРасходованиеДенежныхСредств);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьОплачиваетсяКлиентом(Операция)
	
	Если Операция = "ОплатаОтКлиента" Тогда
		
		Оплачивается = "УменьшениеОплачиваетсяКлиентом.УменьшениеОплачивается";
		СчетНаОплату = "УменьшениеОплачиваетсяКлиентом.СчетНаОплату";
		Вид = "4";
		ЗаявкаНаРасходованиеДенежныхСредств = "Неопределено";
		
	ИначеЕсли Операция = "ЗаявкаНаВозвратОплатыКлиенту" Тогда
		
		Оплачивается = "УменьшениеОплачиваетсяКлиентом.Оплачивается";
		СчетНаОплату = "Неопределено";
		Вид = "1";
		ЗаявкаНаРасходованиеДенежныхСредств = "&Ссылка";
		
	ИначеЕсли Операция = "ВозвратОплатыКлиенту" Тогда
		
		Оплачивается = "УменьшениеОплачиваетсяКлиентом.Оплачивается";
		СчетНаОплату = "Неопределено";
		Вид = "5";
		ЗаявкаНаРасходованиеДенежныхСредств = "УменьшениеОплачиваетсяКлиентом.ЗаявкаНаРасходованиеДенежныхСредств";
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	УменьшениеОплачиваетсяКлиентом.ДатаРегистратора                  КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                           КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                  КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	УменьшениеОплачиваетсяКлиентом.ВалютаВзаиморасчетов              КАК Валюта,
		|	
		|	0                                                                КАК Сумма,
		|	0                                                                КАК КОплате,
		|	СУММА(&Оплачивается)                                             КАК Оплачивается,
		|	0                                                                КАК КОтгрузке,
		|	0                                                                КАК Отгружается,
		|	
		|	УменьшениеОплачиваетсяКлиентом.ХозяйственнаяОперация             КАК ХозяйственнаяОперация,
		|	УменьшениеОплачиваетсяКлиентом.ФормаОплаты                       КАК ФормаОплаты,
		|	&СчетНаОплату                                                    КАК СчетНаОплату,
		|	Неопределено                                                     КАК ПродажаПоЗаказу,
		|	УменьшениеОплачиваетсяКлиентом.ДатаРегистратора                  КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК СуммаРегл,
		|	0                                                                КАК СуммаУпр,
		|	ЛОЖЬ                                                             КАК ИсключатьПриКонтроле,
		|	0                                                                КАК ДопустимаяСуммаЗадолженности,
		|	0                                                                КАК ЗалогЗаТару,
		|	УменьшениеОплачиваетсяКлиентом.СтатьяДвиженияДенежныхСредств     КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	Неопределено                                                     КАК СвязанныйДокумент,
		|	Неопределено                                                     КАК ВариантОплаты,
		|	УменьшениеОплачиваетсяКлиентом.ВалютаДокумента                   КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов.Организация        КАК Организация,
		|	УменьшениеОплачиваетсяКлиентом.Партнер                           КАК Партнер,
		|	УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов.Контрагент         КАК Контрагент,
		|	УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов.Договор            КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                     КАК НаправлениеДеятельности,
		|	Неопределено                                                     КАК КорПартнер,
		|	Неопределено                                                     КАК КорОрганизация,
		|	Неопределено                                                     КАК КорКонтрагент,
		|	Неопределено                                                     КАК КорДоговор,
		|	Неопределено                                                     КАК КорНаправлениеДеятельности,
		|	УменьшениеОплачиваетсяКлиентом.НомерРегистратора                 КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
		|	&ЗаявкаНаРасходованиеДенежныхСредств                             КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&Вид                                                             КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеОплачиваетсяКлиентом КАК УменьшениеОплачиваетсяКлиентом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка =  УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов.Организация = Аналитика.Организация
		|				И УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УменьшениеОплачиваетсяКлиентом.Партнер = Аналитика.Партнер
		|				И УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&Оплачивается <> 0
		|	И УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов.Объект <> УменьшениеОплачиваетсяКлиентом.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеОплачиваетсяКлиентом.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеОплачиваетсяКлиентом.ОбъектРасчетов,
		|	УменьшениеОплачиваетсяКлиентом.Партнер,
		|	УменьшениеОплачиваетсяКлиентом.ВалютаВзаиморасчетов,
		|	УменьшениеОплачиваетсяКлиентом.ХозяйственнаяОперация,
		|	УменьшениеОплачиваетсяКлиентом.ФормаОплаты,
		|	&СчетНаОплату,
		|	УменьшениеОплачиваетсяКлиентом.СтатьяДвиженияДенежныхСредств,
		|	УменьшениеОплачиваетсяКлиентом.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	&ЗаявкаНаРасходованиеДенежныхСредств,
		|	УменьшениеОплачиваетсяКлиентом.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Оплачивается", Оплачивается);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СчетНаОплату", СчетНаОплату);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид", Вид);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаявкаНаРасходованиеДенежныхСредств", ЗаявкаНаРасходованиеДенежныхСредств);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьОтгружается(Операция)
	
	Если Операция = "ЗаказКлиента" Тогда
		
		ЭтоЗаказ = "ИСТИНА";
		ЭтоНакладная = "ЛОЖЬ";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		Вид = "1";
		
	ИначеЕсли Операция = "Продажа" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ИСТИНА";
		НакладнаяПоЗаказам = "УвеличениеОтгружается.НакладнаяПоЗаказам";
		Вид = "2";
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	УвеличениеОтгружается.ДатаОтгрузки                               КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                  КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеОтгружается.ОбъектРасчетов                             КАК ОбъектРасчетов,
		|	УвеличениеОтгружается.ВалютаВзаиморасчетов                       КАК Валюта,
		|	
		|	0                                                   КАК Сумма,
		|	0                                                   КАК КОплате,
		|	0                                                   КАК Оплачивается,
		|	0                                                   КАК КОтгрузке,
		|	СУММА(УвеличениеОтгружается.УвеличитьОтгружается)   КАК Отгружается,
		|	
		|	УвеличениеОтгружается.ХозяйственнаяОперация                      КАК ХозяйственнаяОперация,
		|	Неопределено                                                     КАК ФормаОплаты,
		|	Неопределено                                                     КАК СчетНаОплату,
		|	Неопределено                                                     КАК ПродажаПоЗаказу,
		|	УвеличениеОтгружается.ДатаРегистратора                           КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК СуммаРегл,
		|	0                                                                КАК СуммаУпр,
		|	ИСТИНА                                                           КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0)         КАК ДопустимаяСуммаЗадолженности,
		|	0                                                                КАК ЗалогЗаТару,
		|	Неопределено                                                     КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	Неопределено                                                     КАК СвязанныйДокумент,
		|	Неопределено                                                     КАК ВариантОплаты,
		|	УвеличениеОтгружается.ВалютаДокумента                            КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	              
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеОтгружается.Организация
		|		ИНАЧЕ УвеличениеОтгружается.ОбъектРасчетов.Организация
		|	КОНЕЦ                                                            КАК Организация,
		|	УвеличениеОтгружается.Партнер                                    КАК Партнер,
		|	УвеличениеОтгружается.ОбъектРасчетов.Контрагент                  КАК Контрагент,
		|	УвеличениеОтгружается.ОбъектРасчетов.Договор                     КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                     КАК НаправлениеДеятельности,
		|	Неопределено                                                     КАК КорПартнер,
		|	Неопределено                                                     КАК КорОрганизация,
		|	Неопределено                                                     КАК КорКонтрагент,
		|	Неопределено                                                     КАК КорДоговор,
		|	Неопределено                                                     КАК КорНаправлениеДеятельности,
		|	УвеличениеОтгружается.НомерРегистратора                          КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&Вид                                                             КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УвеличениеОтгружается КАК УвеличениеОтгружается
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеОтгружается.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УвеличениеОтгружается.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|					ТОГДА УвеличениеОтгружается.Организация
		|					ИНАЧЕ УвеличениеОтгружается.ОбъектРасчетов.Организация
		|				КОНЕЦ = Аналитика.Организация
		|				И УвеличениеОтгружается.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УвеличениеОтгружается.Партнер = Аналитика.Партнер
		|				И УвеличениеОтгружается.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УвеличениеОтгружается.УвеличитьОтгружается <> 0 
		|	И (&ЭтоЗаказ И УвеличениеОтгружается.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ &ЭтоНакладная И (УвеличениеОтгружается.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			ИЛИ НЕ &НакладнаяПоЗаказам))
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеОтгружается.ДатаОтгрузки,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеОтгружается.Организация
		|		ИНАЧЕ УвеличениеОтгружается.ОбъектРасчетов.Организация
		|	КОНЕЦ,
		|	УвеличениеОтгружается.Партнер,
		|	УвеличениеОтгружается.ОбъектРасчетов,
		|	УвеличениеОтгружается.ВалютаВзаиморасчетов,
		|	УвеличениеОтгружается.ХозяйственнаяОперация,
		|	УвеличениеОтгружается.ДатаРегистратора,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	УвеличениеОтгружается.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеОтгружается.НомерРегистратора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоЗаказ", ЭтоЗаказ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоНакладная", ЭтоНакладная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НакладнаяПоЗаказам", НакладнаяПоЗаказам);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид", Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьОтгружается(Запрос)
	
	Если НЕ Запрос.Параметры.Свойство("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	 
	ТекстЗапроса = "ВЫБРАТЬ
		|	УменьшениеОтгружается.ДатаРегистратора                           КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                           КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                  КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеОтгружается.ОбъектРасчетов                             КАК ОбъектРасчетов,
		|	УменьшениеОтгружается.ВалютаВзаиморасчетов                       КАК Валюта,
		|	
		|	0                                                                КАК Сумма,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК Оплачивается,
		|	0                                                                КАК КОтгрузке,
		|	СУММА(УменьшениеОтгружается.УменьшитьОтгружается)                КАК Отгружается,
		|	
		|	УменьшениеОтгружается.ХозяйственнаяОперация                      КАК ХозяйственнаяОперация,
		|	Неопределено                                                     КАК ФормаОплаты,
		|	Неопределено                                                     КАК СчетНаОплату,
		|	УменьшениеОтгружается.ЗаказПродажи                               КАК ПродажаПоЗаказу,
		|	УменьшениеОтгружается.ДатаРегистратора                           КАК ДатаРегистратора,
		|	УменьшениеОтгружается.ДатаРегистратора                           КАК ДатаПлатежа,
		|	0                                                                КАК СуммаРегл,
		|	0                                                                КАК СуммаУпр,
		|	ИСТИНА                                                           КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0)         КАК ДопустимаяСуммаЗадолженности,
		|	0                                                                КАК ЗалогЗаТару,
		|	Неопределено                                                     КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	Неопределено                                                     КАК СвязанныйДокумент,
		|	Неопределено                                                     КАК ВариантОплаты,
		|	УменьшениеОтгружается.ВалютаДокумента                            КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	   
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УменьшениеОтгружается.Организация
		|		ИНАЧЕ УменьшениеОтгружается.ОбъектРасчетов.Организация
		|	КОНЕЦ                                                            КАК Организация,
		|	УменьшениеОтгружается.Партнер                                    КАК Партнер,
		|	УменьшениеОтгружается.ОбъектРасчетов.Контрагент                  КАК Контрагент,
		|	УменьшениеОтгружается.ОбъектРасчетов.Договор                     КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                     КАК НаправлениеДеятельности,
		|	Неопределено                                                     КАК КорПартнер,
		|	Неопределено                                                     КАК КорОрганизация,
		|	Неопределено                                                     КАК КорКонтрагент,
		|	Неопределено                                                     КАК КорДоговор,
		|	Неопределено                                                     КАК КорНаправлениеДеятельности,
		|	УменьшениеОтгружается.НомерРегистратора                          КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	""2""                                                            КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеОтгружается КАК УменьшениеОтгружается
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УменьшениеОтгружается.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УменьшениеОтгружается.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|					ТОГДА УменьшениеОтгружается.Организация
		|					ИНАЧЕ УменьшениеОтгружается.ОбъектРасчетов.Организация
		|				КОНЕЦ = Аналитика.Организация
		|				И УменьшениеОтгружается.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УменьшениеОтгружается.Партнер = Аналитика.Партнер
		|				И УменьшениеОтгружается.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеОтгружается.УменьшитьОтгружается <> 0
		|	И (УменьшениеОтгружается.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|		ИЛИ УменьшениеОтгружается.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			И НЕ ДанныеДоговора.ЗаданГрафикИсполнения)
		|	И УменьшениеОтгружается.НакладнаяПоЗаказам
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И НЕ УменьшениеОтгружается.СверхЗаказа
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УменьшениеОтгружается.Организация
		|		ИНАЧЕ УменьшениеОтгружается.ОбъектРасчетов.Организация
		|	КОНЕЦ,
		|	УменьшениеОтгружается.Партнер,
		|	УменьшениеОтгружается.ОбъектРасчетов,
		|	УменьшениеОтгружается.ЗаказПродажи,
		|	УменьшениеОтгружается.ВалютаВзаиморасчетов,
		|	УменьшениеОтгружается.ХозяйственнаяОперация,
		|	УменьшениеОтгружается.ДатаРегистратора,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	УменьшениеОтгружается.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеОтгружается.НомерРегистратора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УменьшениеОтгружается.ДатаРегистратора                           КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                           КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                  КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеОтгружается.ЗаказПродажи.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	УменьшениеОтгружается.ВалютаВзаиморасчетов                       КАК Валюта,
		|	
		|	0                                                                КАК Сумма,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК Оплачивается,
		|	0                                                                КАК КОтгрузке,
		|	СУММА(УменьшениеОтгружается.УменьшитьОтгружается)                КАК Отгружается,
		|	
		|	УменьшениеОтгружается.ХозяйственнаяОперация                      КАК ХозяйственнаяОперация,
		|	Неопределено                                                     КАК ФормаОплаты,
		|	Неопределено                                                     КАК СчетНаОплату,
		|	УменьшениеОтгружается.ЗаказПродажи                               КАК ПродажаПоЗаказу,
		|	УменьшениеОтгружается.ДатаРегистратора                           КАК ДатаРегистратора,
		|	УменьшениеОтгружается.ДатаРегистратора                           КАК ДатаПлатежа,
		|	0                                                                КАК СуммаРегл,
		|	0                                                                КАК СуммаУпр,
		|	ИСТИНА                                                           КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0)         КАК ДопустимаяСуммаЗадолженности,
		|	0                                                                КАК ЗалогЗаТару,
		|	Неопределено                                                     КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	Неопределено                                                     КАК СвязанныйДокумент,
		|	Неопределено                                                     КАК ВариантОплаты,
		|	УменьшениеОтгружается.ВалютаДокумента                            КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	 
		|	УменьшениеОтгружается.ЗаказПродажи.ОбъектРасчетов.Организация    КАК Организация,
		|	УменьшениеОтгружается.ЗаказПродажи.ОбъектРасчетов.Партнер        КАК Партнер,
		|	УменьшениеОтгружается.ЗаказПродажи.ОбъектРасчетов.Контрагент     КАК Контрагент,
		|	УменьшениеОтгружается.ЗаказПродажи.ОбъектРасчетов.Договор        КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                     КАК НаправлениеДеятельности,
		|	Неопределено                                                     КАК КорПартнер,
		|	Неопределено                                                     КАК КорОрганизация,
		|	Неопределено                                                     КАК КорКонтрагент,
		|	Неопределено                                                     КАК КорДоговор,
		|	Неопределено                                                     КАК КорНаправлениеДеятельности,
		|	УменьшениеОтгружается.НомерРегистратора                          КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	""2""                                                            КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеОтгружается КАК УменьшениеОтгружается
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УменьшениеОтгружается.ЗаказПродажи.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УменьшениеОтгружается.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УменьшениеОтгружается.ЗаказПродажи.ОбъектРасчетов.Организация = Аналитика.Организация
		|				И УменьшениеОтгружается.ЗаказПродажи.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УменьшениеОтгружается.ЗаказПродажи.ОбъектРасчетов.Партнер = Аналитика.Партнер
		|				И УменьшениеОтгружается.ЗаказПродажи.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеОтгружается.УменьшитьОтгружается <> 0
		|	И УменьшениеОтгружается.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|	И УменьшениеОтгружается.НакладнаяПоЗаказам
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И НЕ УменьшениеОтгружается.СверхЗаказа
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеОтгружается.ОбъектРасчетов,
		|	УменьшениеОтгружается.ЗаказПродажи,
		|	УменьшениеОтгружается.ВалютаВзаиморасчетов,
		|	УменьшениеОтгружается.ХозяйственнаяОперация,
		|	УменьшениеОтгружается.ДатаРегистратора,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	УменьшениеОтгружается.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеОтгружается.НомерРегистратора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УменьшениеОтгружается.ДатаРегистратора                           КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                           КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                  КАК АналитикаУчетаПоПартнерам,
		|	ДанныеДоговора.ОбъектРасчетов                                    КАК ОбъектРасчетов,
		|	УменьшениеОтгружается.ВалютаВзаиморасчетов                       КАК Валюта,
		|	
		|	0                                                                КАК Сумма,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК Оплачивается,
		|	0                                                                КАК КОтгрузке,
		|	СУММА(УменьшениеОтгружается.УменьшитьОтгружается)                КАК Отгружается,
		|	
		|	УменьшениеОтгружается.ХозяйственнаяОперация                      КАК ХозяйственнаяОперация,
		|	Неопределено                                                     КАК ФормаОплаты,
		|	Неопределено                                                     КАК СчетНаОплату,
		|	УменьшениеОтгружается.ЗаказПродажи                               КАК ПродажаПоЗаказу,
		|	УменьшениеОтгружается.ДатаРегистратора                           КАК ДатаРегистратора,
		|	УменьшениеОтгружается.ДатаРегистратора                           КАК ДатаПлатежа,
		|	0                                                                КАК СуммаРегл,
		|	0                                                                КАК СуммаУпр,
		|	ИСТИНА                                                           КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0)         КАК ДопустимаяСуммаЗадолженности,
		|	0                                                                КАК ЗалогЗаТару,
		|	Неопределено                                                     КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	Неопределено                                                     КАК СвязанныйДокумент,
		|	Неопределено                                                     КАК ВариантОплаты,
		|	УменьшениеОтгружается.ВалютаДокумента                            КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	  
		|	ДанныеДоговора.ОбъектРасчетов.Организация                        КАК Организация,
		|	ДанныеДоговора.ОбъектРасчетов.Партнер                            КАК Партнер,
		|	ДанныеДоговора.ОбъектРасчетов.Контрагент                         КАК Контрагент,
		|	ДанныеДоговора.ОбъектРасчетов.Договор                            КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                     КАК НаправлениеДеятельности,
		|	Неопределено                                                     КАК КорПартнер,
		|	Неопределено                                                     КАК КорОрганизация,
		|	Неопределено                                                     КАК КорКонтрагент,
		|	Неопределено                                                     КАК КорДоговор,
		|	Неопределено                                                     КАК КорНаправлениеДеятельности,
		|	УменьшениеОтгружается.НомерРегистратора                          КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	""2""                                                            КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеОтгружается КАК УменьшениеОтгружается
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УменьшениеОтгружается.ОбъектРасчетов.Договор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО ДанныеДоговора.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО ДанныеДоговора.ОбъектРасчетов.Организация = Аналитика.Организация
		|				И ДанныеДоговора.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И ДанныеДоговора.ОбъектРасчетов.Партнер = Аналитика.Партнер
		|				И ДанныеДоговора.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеОтгружается.УменьшитьОтгружается <> 0
		|	И УменьшениеОтгружается.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
		|	И НЕ ДанныеДоговора.ЗаданГрафикИсполнения
		|	И УменьшениеОтгружается.НакладнаяПоЗаказам
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И НЕ УменьшениеОтгружается.СверхЗаказа
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеОтгружается.ОбъектРасчетов,
		|	УменьшениеОтгружается.ЗаказПродажи,
		|	ДанныеДоговора.ОбъектРасчетов,
		|	УменьшениеОтгружается.ВалютаВзаиморасчетов,
		|	УменьшениеОтгружается.ХозяйственнаяОперация,
		|	УменьшениеОтгружается.ДатаРегистратора,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	УменьшениеОтгружается.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеОтгружается.НомерРегистратора
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьПланОтгрузкиКлиенту(Запрос, Операция)
	
	Если НЕ Запрос.Параметры.Свойство("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	
	Если Операция = "ГрафикИсполненияКлиент" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		СверхЗаказа = "ЛОЖЬ";
		ЗаказПродажи = "Неопределено";
		ПорядокРасчетов = "ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		Вид = "1";
		
	ИначеЕсли Операция = "ЗаказКлиента" Тогда
		
		ЭтоЗаказ = "ИСТИНА";
		ЭтоНакладная = "ЛОЖЬ";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		СверхЗаказа = "ЛОЖЬ";
		ЗаказПродажи = "Неопределено";
		ПорядокРасчетов = "УвеличениеПланаОтгрузкиКлиенту.ПорядокРасчетов";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		Вид = "1";
		
	ИначеЕсли Операция = "Продажа" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ИСТИНА";
		НакладнаяПоЗаказам = "УвеличениеПланаОтгрузкиКлиенту.НакладнаяПоЗаказам";
		СверхЗаказа = "УвеличениеПланаОтгрузкиКлиенту.СверхЗаказа";
		ЗаказПродажи = "УвеличениеПланаОтгрузкиКлиенту.ЗаказПродажи";
		ПорядокРасчетов = "УвеличениеПланаОтгрузкиКлиенту.ПорядокРасчетов";
		ДатаПлатежа = "УвеличениеПланаОтгрузкиКлиенту.ДатаРегистратора";
		Вид = "2";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УвеличениеПланаОтгрузкиКлиенту.ДатаОтгрузки                      КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                           КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                  КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	УвеличениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов              КАК Валюта,
		|	
		|	0                                                                КАК Сумма,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК Оплачивается,
		|	СУММА(УвеличениеПланаОтгрузкиКлиенту.КОтгрузке)                  КАК КОтгрузке,
		|	0                                                                КАК Отгружается,
		|
		|	УвеличениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация             КАК ХозяйственнаяОперация,
		|	Неопределено                                                     КАК ФормаОплаты,
		|	Неопределено                                                     КАК СчетНаОплату,
		|	&ЗаказПродажи                                                    КАК ПродажаПоЗаказу,
		|	УвеличениеПланаОтгрузкиКлиенту.ДатаРегистратора                  КАК ДатаРегистратора,
		|	&ДатаПлатежа                                                     КАК ДатаПлатежа,
		|	0                                                                КАК СуммаРегл,
		|	0                                                                КАК СуммаУпр,
		|	ИСТИНА                                                           КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0)         КАК ДопустимаяСуммаЗадолженности,
		|	0                                                                КАК ЗалогЗаТару,
		|	Неопределено                                                     КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	Неопределено                                                     КАК СвязанныйДокумент,
		|	Неопределено                                                     КАК ВариантОплаты,
		|	УвеличениеПланаОтгрузкиКлиенту.ВалютаДокумента                   КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеПланаОтгрузкиКлиенту.Организация
		|		ИНАЧЕ УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Организация
		|	КОНЕЦ                                                            КАК Организация,
		|	УвеличениеПланаОтгрузкиКлиенту.Партнер                           КАК Партнер,
		|	УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Контрагент         КАК Контрагент,
		|	УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор            КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                     КАК НаправлениеДеятельности,
		|	Неопределено                                                     КАК КорПартнер,
		|	Неопределено                                                     КАК КорОрганизация,
		|	Неопределено                                                     КАК КорКонтрагент,
		|	Неопределено                                                     КАК КорДоговор,
		|	Неопределено                                                     КАК КорНаправлениеДеятельности,
		|	УвеличениеПланаОтгрузкиКлиенту.НомерРегистратора                 КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&Вид                                                             КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УвеличениеПланаОтгрузкиКлиенту КАК УвеличениеПланаОтгрузкиКлиенту
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|					ТОГДА УвеличениеПланаОтгрузкиКлиенту.Организация
		|					ИНАЧЕ УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Организация
		|				КОНЕЦ = Аналитика.Организация
		|				И УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УвеличениеПланаОтгрузкиКлиенту.Партнер = Аналитика.Партнер
		|				И УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	НЕ (&ЭтоЗаказ
		|			И ЕСТЬNULL(ДанныеДоговора.ЗаданГрафикИсполнения, ЛОЖЬ) 
		|			И &ПорядокРасчетов В (ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов),
		|									ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
		|		ИЛИ &ЭтоНакладная
		|			И НЕ &СверхЗаказа
		|			И ЕСТЬNULL(ДанныеДоговора.ЗаданГрафикИсполнения, ЛОЖЬ)
		|			И &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
		|	И УвеличениеПланаОтгрузкиКлиенту.КОтгрузке <> 0
		|	И (&ЭтоЗаказ 
		|			И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ &НакладнаяПоЗаказам
		|			И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			И &СверхЗаказа
		|			И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|		ИЛИ НЕ (&ЭтоЗаказ ИЛИ &ЭтоНакладная))
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеПланаОтгрузкиКлиенту.ДатаОтгрузки,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеПланаОтгрузкиКлиенту.Организация
		|		ИНАЧЕ УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Организация
		|	КОНЕЦ,
		|	УвеличениеПланаОтгрузкиКлиенту.Партнер,
		|	УвеличениеПланаОтгрузкиКлиенту.ОбъектРасчетов,
		|	УвеличениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов,
		|	УвеличениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация,
		|	&ЗаказПродажи,
		|	УвеличениеПланаОтгрузкиКлиенту.ДатаРегистратора,
		|	УвеличениеПланаОтгрузкиКлиенту.НомерРегистратора,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	УвеличениеПланаОтгрузкиКлиенту.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоЗаказ",           ЭтоЗаказ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоНакладная",       ЭтоНакладная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НакладнаяПоЗаказам", НакладнаяПоЗаказам);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СверхЗаказа",        СверхЗаказа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказПродажи",       ЗаказПродажи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПорядокРасчетов",    ПорядокРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",        ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид",                Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьПланОтгрузкиКлиенту(Запрос)
	
	Если НЕ Запрос.Параметры.Свойство("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	
	ТекстКОтгрузке = "
		|ВЫБРАТЬ
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                  КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                  КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов              КАК Валюта,
		|	
		|	0                                                                КАК Сумма,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК Оплачивается,
		|	СУММА(УменьшениеПланаОтгрузкиКлиенту.СуммаВзаиморасчетов)        КАК КОтгрузке,
		|	0                                                                КАК Отгружается,
		|	
		|	УменьшениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация             КАК ХозяйственнаяОперация,
		|	Неопределено                                                     КАК ФормаОплаты,
		|	Неопределено                                                     КАК СчетНаОплату,
		|	УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи                      КАК ПродажаПоЗаказу,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                  КАК ДатаРегистратора,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                  КАК ДатаПлатежа,
		|	0                                                                КАК СуммаРегл,
		|	0                                                                КАК СуммаУпр,
		|	ИСТИНА                                                           КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
		|	0                                                                КАК ЗалогЗаТару,
		|	Неопределено                                                     КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	Неопределено                                                     КАК СвязанныйДокумент,
		|	Неопределено                                                     КАК ВариантОплаты,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаДокумента                   КАК ВалютаДокумента,
		|	Неопределено                                                     КАК КорОбъектРасчетов,
		|	Неопределено                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеПланаОтгрузкиКлиенту.Организация                       КАК Организация,
		|	УменьшениеПланаОтгрузкиКлиенту.Партнер                           КАК Партнер,
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Контрагент         КАК Контрагент,
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор            КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                     КАК НаправлениеДеятельности,
		|	Неопределено                                                     КАК КорПартнер,
		|	Неопределено                                                     КАК КорОрганизация,
		|	Неопределено                                                     КАК КорКонтрагент,
		|	Неопределено                                                     КАК КорДоговор,
		|	Неопределено                                                     КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаОтгрузкиКлиенту.НомерРегистратора                 КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	""2""                                                            КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеПланаОтгрузкиКлиенту КАК УменьшениеПланаОтгрузкиКлиенту
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УменьшениеПланаОтгрузкиКлиенту.Организация = Аналитика.Организация
		|				И УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УменьшениеПланаОтгрузкиКлиенту.Партнер = Аналитика.Партнер
		|				И УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	(ЕСТЬNULL(ДанныеДоговора.ЗаданГрафикИсполнения, ЛОЖЬ) 
		|		И УменьшениеПланаОтгрузкиКлиенту.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	ИЛИ УменьшениеПланаОтгрузкиКлиенту.НакладнаяПоЗаказам 
		|		И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|		И (УменьшениеПланаОтгрузкиКлиенту.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|			ИЛИ УменьшениеПланаОтгрузкиКлиенту.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И НЕ ЕСТЬNULL(ДанныеДоговора.ЗаданГрафикИсполнения, ЛОЖЬ)))
		|	И УменьшениеПланаОтгрузкиКлиенту.СуммаВзаиморасчетов <> 0 
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеПланаОтгрузкиКлиенту.Ссылка,
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.Партнер,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация,
		|	УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора,
		|	ЕСТЬNULL(УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор.ДопустимаяСуммаЗадолженности, 0),
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаОтгрузкиКлиенту.НомерРегистратора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                 КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                          КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                 КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи.ОбъектРасчетов      КАК ОбъектРасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов             КАК Валюта,
		|	
		|	0                                                               КАК Сумма,
		|	0                                                               КАК КОплате,
		|	0                                                               КАК Оплачивается,
		|	СУММА(УменьшениеПланаОтгрузкиКлиенту.СуммаВзаиморасчетов)       КАК КОтгрузке,
		|	0                                                               КАК Отгружается,
		|	
		|	УменьшениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация            КАК ХозяйственнаяОперация,
		|	Неопределено                                                    КАК ФормаОплаты,
		|	Неопределено                                                    КАК СчетНаОплату,
		|	УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи                     КАК ПродажаПоЗаказу,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                 КАК ДатаРегистратора,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                 КАК ДатаПлатежа,
		|	0                                                               КАК СуммаРегл,
		|	0                                                               КАК СуммаУпр,
		|	ИСТИНА                                                          КАК ИсключатьПриКонтроле,
		|	ЕСТЬNULL(УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
		|	0                                                               КАК ЗалогЗаТару,
		|	Неопределено                                                    КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                    КАК РасчетныйДокумент,
		|	Неопределено                                                    КАК СвязанныйДокумент,
		|	Неопределено                                                    КАК ВариантОплаты,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаДокумента                  КАК ВалютаДокумента,
		|	Неопределено                                                    КАК КорОбъектРасчетов,
		|	Неопределено                                                    КАК КорАналитикаУчетаПоПартнерам,
		|	    
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Организация       КАК Организация,
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Партнер           КАК Партнер,
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Контрагент        КАК Контрагент,
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор           КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                    КАК НаправлениеДеятельности,
		|	Неопределено                                                    КАК КорПартнер,
		|	Неопределено                                                    КАК КорОрганизация,
		|	Неопределено                                                    КАК КорКонтрагент,
		|	Неопределено                                                    КАК КорДоговор,
		|	Неопределено                                                    КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаОтгрузкиКлиенту.НомерРегистратора                КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	""2""                                                            КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеПланаОтгрузкиКлиенту КАК УменьшениеПланаОтгрузкиКлиенту
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Организация = Аналитика.Организация
		|				И УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|				И УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Партнер = Аналитика.Партнер
		|				И УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеПланаОтгрузкиКлиенту.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|	И УменьшениеПланаОтгрузкиКлиенту.СуммаВзаиморасчетов <> 0 
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация,
		|	УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора,
		|	ЕСТЬNULL(УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор.ДопустимаяСуммаЗадолженности, 0),
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаОтгрузкиКлиенту.НомерРегистратора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                 КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                          КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                 КАК АналитикаУчетаПоПартнерам,
		|	ОбъектРасчетовДоговор.Ссылка                                    КАК ОбъектРасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов             КАК Валюта,
		|	
		|	0                                                               КАК Сумма,
		|	0                                                               КАК КОплате,
		|	0                                                               КАК Оплачивается,
		|	СУММА(УменьшениеПланаОтгрузкиКлиенту.СуммаВзаиморасчетов)       КАК КОтгрузке,
		|	0                                                               КАК Отгружается,
		|	
		|	УменьшениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация            КАК ХозяйственнаяОперация,
		|	Неопределено                                                    КАК ФормаОплаты,
		|	Неопределено                                                    КАК СчетНаОплату,
		|	УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи                     КАК ПродажаПоЗаказу,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                 КАК ДатаРегистратора,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора                 КАК ДатаПлатежа,
		|	0                                                               КАК СуммаРегл,
		|	0                                                               КАК СуммаУпр,
		|	ИСТИНА                                                          КАК ИсключатьПриКонтроле,
		|	ДанныеДоговора.ДопустимаяСуммаЗадолженности                     КАК ДопустимаяСуммаЗадолженности,
		|	0                                                               КАК ЗалогЗаТару,
		|	Неопределено                                                    КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                    КАК РасчетныйДокумент,
		|	Неопределено                                                    КАК СвязанныйДокумент,
		|	Неопределено                                                    КАК ВариантОплаты,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаДокумента                  КАК ВалютаДокумента,
		|	Неопределено                                                    КАК КорОбъектРасчетов,
		|	Неопределено                                                    КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	ОбъектРасчетовДоговор.Организация                               КАК Организация,
		|	ОбъектРасчетовДоговор.Партнер                                   КАК Партнер,
		|	ОбъектРасчетовДоговор.Контрагент                                КАК Контрагент,
		|	ДанныеДоговора.Ссылка                                           КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                    КАК НаправлениеДеятельности,
		|	Неопределено                                                    КАК КорПартнер,
		|	Неопределено                                                    КАК КорОрганизация,
		|	Неопределено                                                    КАК КорКонтрагент,
		|	Неопределено                                                    КАК КорДоговор,
		|	Неопределено                                                    КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаОтгрузкиКлиенту.НомерРегистратора                КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	""2""                                                            КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеПланаОтгрузкиКлиенту КАК УменьшениеПланаОтгрузкиКлиенту
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектРасчетовДоговор
		|			ПО ОбъектРасчетовДоговор.Объект = ДанныеДоговора.Ссылка
		|				И ОбъектРасчетовДоговор.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|				И ОбъектРасчетовДоговор.Организация = УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Организация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиКлиент КАК НаправленияДеятельности
		|			ПО ОбъектРасчетовДоговор.Ссылка = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО ОбъектРасчетовДоговор.Организация = Аналитика.Организация
		|				И ОбъектРасчетовДоговор.Контрагент = Аналитика.Контрагент
		|				И ОбъектРасчетовДоговор.Партнер = Аналитика.Партнер
		|				И ОбъектРасчетовДоговор.Договор = Аналитика.Договор
		|				И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеПланаОтгрузкиКлиенту.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
		|	И (ДанныеДоговора.ЗаданГрафикИсполнения
		|		ИЛИ УменьшениеПланаОтгрузкиКлиенту.НакладнаяПоЗаказам 
		|			И &ИспользоватьРасширенныеВозможностиЗаказаКлиента)
		|	И УменьшениеПланаОтгрузкиКлиенту.СуммаВзаиморасчетов <> 0 
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	ОбъектРасчетовДоговор.Ссылка,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов,
		|	УменьшениеПланаОтгрузкиКлиенту.ХозяйственнаяОперация,
		|	УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи,
		|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора,
		|	ДанныеДоговора.ДопустимаяСуммаЗадолженности,
		|	УменьшениеПланаОтгрузкиКлиенту.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаОтгрузкиКлиенту.НомерРегистратора,
		|	ДанныеДоговора.Ссылка";
	
	Возврат ТекстКОтгрузке;
КонецФункции

#КонецОбласти

#Область РасчетыСПоставщиками

Функция ОтразитьПереносРасчетовСПоставщиком(Запрос, Операция)
	
	Если НЕ Запрос.Параметры.Свойство("ОбъектРасчетовАванс") Тогда
		ОбъектРасчетовАванс = Метаданные.ОпределяемыеТипы.ОбъектРасчетовАванс.Тип.Типы();
		Запрос.УстановитьПараметр("ОбъектРасчетовАванс", ОбъектРасчетовАванс);
	КонецЕсли;
	
	ОбъектРасчетовИсточникОрганизация = "ОбъектыРасчетовИсточники.Организация";
	ОбъектРасчетовПриемникОрганизация = "ОбъектыРасчетовПриемники.Организация";
	
	ХозяйственнаяОперацияИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ХозяйственнаяОперация";
	ХозяйственнаяОперацияПриемник = ХозяйственнаяОперацияИсточник;
	Если Операция = "Закупка" Тогда
		
		КредиторскаяЗадолженность = "ЛОЖЬ"; // что в источнике
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ИСТИНА";
		
		УсловиеОперации = "
		|	ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник <> ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник
		|	И (ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
		|		ИЛИ ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) 
		|			И ТИПЗНАЧЕНИЯ(ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник.Объект) = ТИПЗНАЧЕНИЯ(ТаблицаРасшифровкаПлатежаПоставщик.Ссылка))";
		
		ФормаОплаты = "Неопределено";
		
		ОбъектРасчетовИсточникПартнер = "ОбъектыРасчетовИсточники.Партнер";
		ОбъектРасчетовПриемникПартнер = "ОбъектыРасчетовПриемники.Партнер";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		ДатаПлатежа = "ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора";
		
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления)";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
	
		ИдентификаторФинЗаписи = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносАванса)"; 
		
		ВидИсточник = "2";
		ВидПриемник = "2";
		
	ИначеЕсли Операция = "ПереносЗакупки" ИЛИ Операция = "ПереносПлатежа" ИЛИ Операция = "ПереносВозврата" Тогда
		
		КредиторскаяЗадолженность = "ЛОЖЬ"; // что в источнике
		Если Операция = "ПереносЗакупки" Тогда
			КредиторскаяЗадолженность = "ЛОЖЬ";
		КонецЕсли;
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ИСТИНА";
		Если Операция = "ПереносВозврата" Тогда
			ЗаполнятьКорОбъект = "ЛОЖЬ";
		КонецЕсли;
		
		ХозяйственнаяОперацияИсточник = "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)";
		ХозяйственнаяОперацияПриемник = ХозяйственнаяОперацияИсточник;
		Если Операция = "ПереносЗакупки" Тогда
			ХозяйственнаяОперацияИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ХозяйственнаяОперация";
			ХозяйственнаяОперацияПриемник = "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)";
		КонецЕсли;
		УсловиеОперации = "ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, ЛОЖЬ)
		|	И ТаблицаРасшифровкаПлатежаПоставщик.Организация <> ОбъектыРасчетовПриемники.Организация";
		Если Операция = "ПереносПлатежа" Тогда
			УсловиеОперации = "ТаблицаРасшифровкаПлатежаПоставщик.Организация <> ОбъектыРасчетовПриемники.Организация";
		КонецЕсли;
		
		ФормаОплаты = "Неопределено";
		
		ОбъектРасчетовИсточникОрганизация = "ОбъектыРасчетовПриемники.Организация";
		ОбъектРасчетовПриемникОрганизация = "ТаблицаРасшифровкаПлатежаПоставщик.Организация";
		
		ОбъектРасчетовИсточникПартнер = "ОбъектыРасчетовИсточники.Партнер";
		ОбъектРасчетовПриемникПартнер = "ОбъектыРасчетовПриемники.Партнер";
		
		Если Операция = "ПереносПлатежа" ИЛИ Операция = "ПереносВозврата" Тогда
			ОбъектРасчетовИсточникОрганизация = "ТаблицаРасшифровкаПлатежаПоставщик.Организация";
			ОбъектРасчетовПриемникОрганизация = "ОбъектыРасчетовПриемники.Организация";
		КонецЕсли;
		Если Операция = "ПереносВозврата" Тогда
			ХозяйственнаяОперацияИсточник = "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)";
			ХозяйственнаяОперацияПриемник = ХозяйственнаяОперацияИсточник;
		КонецЕсли;
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "0";
		КОплатеПриемник = "0";
		
		ДатаПлатежа = "ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора";
		ВариантОплаты = "ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки)";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
	
		ИдентификаторФинЗаписи = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносПлатежаМеждуФилиалами)";
		
		Если Операция = "ПереносЗакупки" ИЛИ Операция  = "ПереносВозврата" Тогда
			НастройкаХозяйственнойОперации = "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносЗадолженностиМеждуФилиалами)";
		КонецЕсли;
		
		Если  Операция = "ПереносПлатежа" Тогда
			ВидИсточник = "4";
			ВидПриемник = "4";
		Иначе
			ВидИсточник = "2";
			ВидПриемник = "2";
		КонецЕсли;
		
	ИначеЕсли Операция = "ВозвратОплатыОтПоставщика" Тогда
		
		КредиторскаяЗадолженность = "ЛОЖЬ";
		СторноИсточник = "ИСТИНА";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ИСТИНА";
		
		УсловиеОперации = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник <> ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник";
		
		ФормаОплаты = "ТаблицаРасшифровкаПлатежаПоставщик.ФормаОплаты";
		
		//Возврат оплаты от дочернего партнера, должен пройти по дочернему партнеру, а не по головному
		ОбъектРасчетовИсточникПартнер = "ТаблицаРасшифровкаПлатежаПоставщик.Партнер";
		ОбъектРасчетовПриемникПартнер = "ОбъектыРасчетовПриемники.Партнер";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		ДатаПлатежа = "Неопределено";
		ВариантОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "ТаблицаРасшифровкаПлатежаПоставщик.СтатьяДвиженияДенежныхСредств";
		
		ИдентификаторФинЗаписи = "ТаблицаРасшифровкаПлатежаПоставщик.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносАванса)";
		
		ВидИсточник = "7";
		ВидПриемник = "6";
		
	ИначеЕсли Операция = "ВозвратТоваровПоставщику" Тогда
		
		КредиторскаяЗадолженность = "ЛОЖЬ";
		СторноИсточник = "ЛОЖЬ";
		СторноПриемник = "ЛОЖЬ";
		ЗаполнятьКорОбъект = "ЛОЖЬ";
		
		УсловиеОперации = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник <> ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник";
		
		ФормаОплаты = "Неопределено";
		
		ОбъектРасчетовИсточникПартнер = "ОбъектыРасчетовИсточники.Партнер";
		ОбъектРасчетовПриемникПартнер = "ОбъектыРасчетовПриемники.Партнер";
		
		ВалютаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента";
		ВалютаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.ВалютаВзаиморасчетов";
		
		СуммаВзаиморасчетовИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Сумма";
		СуммаВзаиморасчетовПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		КОплатеИсточник = "ТаблицаРасшифровкаПлатежаПоставщик.Сумма";
		КОплатеПриемник = "ТаблицаРасшифровкаПлатежаПоставщик.СуммаВзаиморасчетов";
		
		ДатаПлатежа = "Неопределено";
		ВариантОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		
		ИдентификаторФинЗаписи = "ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВзаимозачетЗадолженности)";
		
		ВидИсточник = "5";
		ВидПриемник = "6";
		
	КонецЕсли;
	
	#Область ТекстЗапроса
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора      КАК Период,
		|	ВЫБОР
		|		КОГДА НЕ &СторноИсточник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноИсточник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ                                                    КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено)  КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник КАК ОбъектРасчетов,
		|	&ВалютаВзаиморасчетовИсточник                            КАК Валюта,
		|	
		|	СУММА(&СуммаВзаиморасчетовИсточник *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)  КАК Сумма,
		|	0                                                        КАК Оплачивается,
		|	СУММА(&КОплатеИсточник *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)  КАК КОплате,
		|	0                                                        КАК КПоступлению,
		|	
		|	&ХозяйственнаяОперацияИсточник                           КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                             КАК ФормаОплаты,
		|	Неопределено                                             КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                             КАК ЗакупкаПоЗаказу,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора      КАК ДатаРегистратора,
		|	&ДатаПлатежа                                             КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовИсточник = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА &СуммаВзаиморасчетовИсточник
		|			КОГДА ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежаПоставщик.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежаПоставщик.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовИсточник = &ВалютаУправленческогоУчета
		|				ТОГДА &СуммаВзаиморасчетовИсточник
		|			КОГДА ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежаПоставщик.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежаПоставщик.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ *
		|		ВЫБОР КОГДА &СторноИсточник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ) КАК СуммаУпр,
		|
		|	0                                                         КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                            КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                              КАК РасчетныйДокумент,
		|	Неопределено                                              КАК СвязанныйДокумент,
		|	&ВариантОплаты                                            КАК ВариантОплаты,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента        КАК ВалютаДокумента,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Ссылка
		|	КОНЕЦ                                                     КАК КорОбъектРасчетов,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено)
		|	КОНЕЦ                                                     КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	&ОбъектРасчетовИсточникОрганизация                        КАК Организация,
		|	&ОбъектРасчетовИсточникПартнер                            КАК Партнер,
		|	ОбъектыРасчетовИсточники.Контрагент                       КАК Контрагент,
		|	ОбъектыРасчетовИсточники.Договор                          КАК Договор,
		|	НаправленияДеятельностиИсточник.НаправлениеАналитики      КАК НаправлениеДеятельности,
		|
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Партнер
		|	КОНЕЦ                                                   КАК КорПартнер,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Организация
		|	КОНЕЦ                                                   КАК КорОрганизация,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Контрагент
		|	КОНЕЦ                                                   КАК КорКонтрагент,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Договор
		|	КОНЕЦ                                                   КАК КорДоговор,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ НаправленияДеятельностиПриемник.НаправлениеАналитики
		|	КОНЕЦ                                                   КАК КорНаправлениеДеятельности,
		|	ТаблицаРасшифровкаПлатежаПоставщик.НомерРегистратора    КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                 КАК ИдентификаторФинЗаписи,
		|	&ВидИсточник                                            КАК Вид,
		|	&НастройкаХозяйственнойОперации                         КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#ТаблицаРасшифровкаПлатежаПоставщик КАК ТаблицаРасшифровкаПлатежаПоставщик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовИсточники
		|			ПО ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник = ОбъектыРасчетовИсточники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = ОбъектыРасчетовИсточники.Договор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовПриемники
		|			ПО ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник = ОбъектыРасчетовПриемники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговораПриемник
		|			ПО ДанныеДоговораПриемник.Ссылка = ОбъектыРасчетовПриемники.Договор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельностиИсточник
		|			ПО ОбъектыРасчетовИсточники.Ссылка = НаправленияДеятельностиИсточник.ОбъектРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельностиПриемник
		|			ПО ОбъектыРасчетовПриемники.Ссылка = НаправленияДеятельностиПриемник.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаИсточник
		|			ПО &ОбъектРасчетовИсточникОрганизация = АналитикаИсточник.Организация
		|				И ОбъектыРасчетовИсточники.Контрагент = АналитикаИсточник.Контрагент
		|				И &ОбъектРасчетовИсточникПартнер = АналитикаИсточник.Партнер
		|				И ОбъектыРасчетовИсточники.Договор = АналитикаИсточник.Договор
		|				И НаправленияДеятельностиИсточник.НаправлениеАналитики = АналитикаИсточник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПриемник
		|			ПО &КредиторскаяЗадолженность
		|				И &ОбъектРасчетовПриемникОрганизация = АналитикаПриемник.Организация
		|				И ОбъектыРасчетовПриемники.Контрагент = АналитикаПриемник.Контрагент
		|				И &ОбъектРасчетовПриемникПартнер = АналитикаПриемник.Партнер
		|				И ОбъектыРасчетовПриемники.Договор = АналитикаПриемник.Договор
		|				И НаправленияДеятельностиПриемник.НаправлениеАналитики = АналитикаПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютПоставщик КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = ТаблицаРасшифровкаПлатежаПоставщик.Ссылка
		|				И Коэффициенты.Организация = ТаблицаРасшифровкаПлатежаПоставщик.Организация
		|				И Коэффициенты.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетовИсточник
		|ГДЕ
		|	&СуммаВзаиморасчетовИсточник > 0
		|	И &УсловиеОперации
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора,
		|	ВЫБОР
		|		КОГДА НЕ &СторноИсточник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноИсточник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено),
		|	ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник,
		|	&ВалютаВзаиморасчетовИсточник,
		|	&ХозяйственнаяОперацияИсточник,
		|	&ФормаОплаты,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Ссылка
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено)
		|	КОНЕЦ,
		|	&ОбъектРасчетовИсточникОрганизация,
		|	&ОбъектРасчетовИсточникПартнер,
		|	ОбъектыРасчетовИсточники.Контрагент,
		|	ОбъектыРасчетовИсточники.Договор,
		|	НаправленияДеятельностиИсточник.НаправлениеАналитики,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Партнер
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Организация
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Контрагент
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ ОбъектыРасчетовПриемники.Договор
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность ИЛИ НЕ &ЗаполнятьКорОбъект
		|		ТОГДА Неопределено
		|		ИНАЧЕ НаправленияДеятельностиПриемник.НаправлениеАналитики
		|	КОНЕЦ,
		|	ТаблицаРасшифровкаПлатежаПоставщик.НомерРегистратора,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора              КАК Период,
		|	ВЫБОР
		|		КОГДА НЕ &СторноПриемник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноПриемник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	КОНЕЦ                                                            КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено)          КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник        КАК ОбъектРасчетов,
		|	&ВалютаВзаиморасчетовПриемник                                    КАК Валюта,
		|	
		|	СУММА(&СуммаВзаиморасчетовПриемник *
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)          КАК Сумма,
		|	0                                                                КАК Оплачивается,
		|	СУММА(&КОплатеПриемник *
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)          КАК КОплате,
		|	0                                                                КАК КПоступлению,
		|	
		|	&ХозяйственнаяОперацияПриемник                                   КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                                     КАК ФормаОплаты,
		|	Неопределено                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                                     КАК ЗакупкаПоЗаказу,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора              КАК ДатаРегистратора,
		|	&ДатаПлатежа                                                     КАК ДатаПлатежа,
		|	
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовПриемник = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА &СуммаВзаиморасчетовПриемник
		|			КОГДА ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежаПоставщик.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежаПоставщик.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ*
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)          КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА &ВалютаВзаиморасчетовПриемник = &ВалютаУправленческогоУчета
		|				ТОГДА &СуммаВзаиморасчетовПриемник
		|			КОГДА ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА ТаблицаРасшифровкаПлатежаПоставщик.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежаПоставщик.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ*
		|		ВЫБОР КОГДА &СторноПриемник ТОГДА -1 ИНАЧЕ 1 КОНЕЦ)          КАК СуммаУпр,
		|
		|	0                                                                КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                   КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	Неопределено                                                     КАК СвязанныйДокумент,
		|	&ВариантОплаты                                                   КАК ВариантОплаты,
		|	ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента               КАК ВалютаДокумента,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Ссылка
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорОбъектРасчетов,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	&ОбъектРасчетовПриемникОрганизация                               КАК Организация,
		|	&ОбъектРасчетовПриемникПартнер                                   КАК Партнер,
		|	ОбъектыРасчетовПриемники.Контрагент                              КАК Контрагент,
		|	ОбъектыРасчетовПриемники.Договор                                 КАК Договор,
		|	НаправленияДеятельностиПриемник.НаправлениеАналитики             КАК НаправлениеДеятельности,
		|
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Партнер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорПартнер,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Организация
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорОрганизация,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Контрагент
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорКонтрагент,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Договор
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорДоговор,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА НаправленияДеятельностиИсточник.НаправлениеАналитики
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ                                                            КАК КорНаправлениеДеятельности,
		|
		|	ТаблицаРасшифровкаПлатежаПоставщик.НомерРегистратора             КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                          КАК ИдентификаторФинЗаписи,
		|	&ВидПриемник                                                     КАК Вид,
		|	&НастройкаХозяйственнойОперации                                  КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#ТаблицаРасшифровкаПлатежаПоставщик КАК ТаблицаРасшифровкаПлатежаПоставщик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовИсточники
		|			ПО ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник = ОбъектыРасчетовИсточники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговораИсточник
		|			ПО ДанныеДоговораИсточник.Ссылка = ОбъектыРасчетовИсточники.Договор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовПриемники
		|			ПО ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник = ОбъектыРасчетовПриемники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = ОбъектыРасчетовПриемники.Договор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельностиИсточник
		|			ПО ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовИсточник = НаправленияДеятельностиИсточник.ОбъектРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельностиПриемник
		|			ПО ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник = НаправленияДеятельностиПриемник.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПриемник
		|			ПО &ОбъектРасчетовПриемникОрганизация = АналитикаПриемник.Организация
		|				И ОбъектыРасчетовПриемники.Контрагент = АналитикаПриемник.Контрагент
		|				И &ОбъектРасчетовПриемникПартнер = АналитикаПриемник.Партнер
		|				И ОбъектыРасчетовПриемники.Договор = АналитикаПриемник.Договор
		|				И НаправленияДеятельностиПриемник.НаправлениеАналитики = АналитикаПриемник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаИсточник
		|			ПО НЕ &КредиторскаяЗадолженность
		|				И &ОбъектРасчетовИсточникОрганизация = АналитикаИсточник.Организация
		|				И ОбъектыРасчетовИсточники.Контрагент = АналитикаИсточник.Контрагент
		|				И &ОбъектРасчетовИсточникПартнер = АналитикаИсточник.Партнер
		|				И ОбъектыРасчетовИсточники.Договор = АналитикаИсточник.Договор
		|				И НаправленияДеятельностиИсточник.НаправлениеАналитики = АналитикаИсточник.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютПоставщик КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = ТаблицаРасшифровкаПлатежаПоставщик.Ссылка
		|				И Коэффициенты.Организация = ТаблицаРасшифровкаПлатежаПоставщик.Организация
		|				И Коэффициенты.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетовПриемник
		|ГДЕ
		|	&СуммаВзаиморасчетовПриемник > 0
		|	И &УсловиеОперации
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРасшифровкаПлатежаПоставщик.ДатаРегистратора,
		|	ВЫБОР
		|		КОГДА НЕ &СторноПриемник И &КредиторскаяЗадолженность
		|			ИЛИ &СторноПриемник И НЕ &КредиторскаяЗадолженность
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	КОНЕЦ,
		|	ЕСТЬNULL(АналитикаПриемник.КлючАналитики, Неопределено),
		|	ТаблицаРасшифровкаПлатежаПоставщик.ОбъектРасчетовПриемник,
		|	&ВалютаВзаиморасчетовПриемник,
		|	&ХозяйственнаяОперацияПриемник,
		|	&ФормаОплаты,
		|	ЕСТЬNULL(ДанныеДоговора.ДопустимаяСуммаЗадолженности, 0),
		|	ТаблицаРасшифровкаПлатежаПоставщик.ВалютаДокумента,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Ссылка
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ЕСТЬNULL(АналитикаИсточник.КлючАналитики, Неопределено)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	&ОбъектРасчетовПриемникОрганизация,
		|	&ОбъектРасчетовПриемникПартнер,
		|	ОбъектыРасчетовПриемники.Контрагент,
		|	ОбъектыРасчетовПриемники.Договор,
		|	НаправленияДеятельностиПриемник.НаправлениеАналитики,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Партнер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Организация
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Контрагент
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА ОбъектыРасчетовИсточники.Договор
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР КОГДА НЕ &КредиторскаяЗадолженность И &ЗаполнятьКорОбъект
		|		ТОГДА НаправленияДеятельностиИсточник.НаправлениеАналитики
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ТаблицаРасшифровкаПлатежаПоставщик.НомерРегистратора,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации";
	#КонецОбласти
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОперации",УсловиеОперации);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КредиторскаяЗадолженность",       КредиторскаяЗадолженность);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СторноИсточник",                  СторноИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СторноПриемник",                  СторноПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплатеИсточник",                 КОплатеИсточник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ХозяйственнаяОперацияИсточник",   ХозяйственнаяОперацияИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ХозяйственнаяОперацияПриемник",   ХозяйственнаяОперацияПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                     ФормаОплаты);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплатеПриемник",                 КОплатеПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовИсточникОрганизация", ОбъектРасчетовИсточникОрганизация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовПриемникОрганизация", ОбъектРасчетовПриемникОрганизация);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовИсточникПартнер",   ОбъектРасчетовИсточникПартнер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОбъектРасчетовПриемникПартнер",   ОбъектРасчетовПриемникПартнер);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВалютаВзаиморасчетовИсточник",    ВалютаВзаиморасчетовИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВалютаВзаиморасчетовПриемник",    ВалютаВзаиморасчетовПриемник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаВзаиморасчетовИсточник",     СуммаВзаиморасчетовИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СуммаВзаиморасчетовПриемник",     СуммаВзаиморасчетовПриемник);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                     ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты",                   ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств",   СтатьяДвиженияДенежныхСредств);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаполнятьКорОбъект",              ЗаполнятьКорОбъект);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИдентификаторФинЗаписи",          ИдентификаторФинЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НастройкаХозяйственнойОперации",  НастройкаХозяйственнойОперации);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВидИсточник",  ВидИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВидПриемник",  ВидПриемник);
	
	Если Операция = "ПереносЗакупки" ИЛИ Операция = "ПереносПлатежа" ИЛИ Операция = "ПереносВозврата" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаРасшифровкаПлатежа",  "втПереносРасчетов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ТаблицаРасшифровкаПлатежа",  "ПереносРасчетов");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьПланОплатыПоставщику(Операция)
	
	Если Операция = "ГрафикИсполненияПоставщик" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаПлатежа, ДЕНЬ)";
		
		ПорядокРасчетов = "ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		ЗаказЗакупки = "Неопределено";
		СверхЗаказа = "ЛОЖЬ";
		КОплате = "УвеличениеПланаОплатыПоставщику.КОплате";
		
		СвязанныйДокумент = "Неопределено";
		ФормаОплаты = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ДатаПлатежа = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаПлатежа, ДЕНЬ)";
		ВариантОплаты = "УвеличениеПланаОплатыПоставщику.ВариантОплаты";
		ИдентификаторФинЗаписи = "&ИдентификаторНеиспользуемойФинЗаписи";
		НастройкаХозяйственнойОперации = "Неопределено";
		Вид = "1";
		
	ИначеЕсли Операция = "ЗаказПоставщику" Тогда
		
		ЭтоЗаказ = "ИСТИНА";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаПлатежа)";
		
		ПорядокРасчетов = "УвеличениеПланаОплатыПоставщику.ПорядокРасчетов";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		ЗаказЗакупки = "Неопределено";
		СверхЗаказа = "ЛОЖЬ";
		
		КОплате = "УвеличениеПланаОплатыПоставщику.КОплате";
		
		СвязанныйДокумент = "Неопределено";
		ФормаОплаты = "УвеличениеПланаОплатыПоставщику.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		ДатаПлатежа = "КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаПлатежа)";
		ВариантОплаты = "УвеличениеПланаОплатыПоставщику.ВариантОплаты";
		ИдентификаторФинЗаписи = "&ИдентификаторНеиспользуемойФинЗаписи";
		НастройкаХозяйственнойОперации = "Неопределено";
		Вид = "1";
		
	ИначеЕсли Операция = "Закупка" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ИСТИНА";
		Период = "ВЫБОР КОГДА УвеличениеПланаОплатыПоставщику.ДатаПлатежа < УвеличениеПланаОплатыПоставщику.ДатаРегистратора
				|ТОГДА КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаРегистратора, ДЕНЬ)
				|ИНАЧЕ КОНЕЦПЕРИОДА(УвеличениеПланаОплатыПоставщику.ДатаПлатежа, ДЕНЬ)
				|КОНЕЦ ";
		ПорядокРасчетов = "УвеличениеПланаОплатыПоставщику.ПорядокРасчетов";
		НакладнаяПоЗаказам = "УвеличениеПланаОплатыПоставщику.НакладнаяПоЗаказам";
		ЗаказЗакупки = "УвеличениеПланаОплатыПоставщику.ЗаказЗакупки";
		СверхЗаказа = "УвеличениеПланаОплатыПоставщику.СверхЗаказа";
		
		КОплате = "УвеличениеПланаОплатыПоставщику.КОплате";
		
		СвязанныйДокумент = "УвеличениеПланаОплатыПоставщику.СвязанныйДокумент";
		ФормаОплаты = "УвеличениеПланаОплатыПоставщику.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "Неопределено";

		ДатаПлатежа = "ВЫБОР КОГДА УвеличениеПланаОплатыПоставщику.КОплате < 0 
				|		ТОГДА ДАТАВРЕМЯ(1,1,1)
				|	ИНАЧЕ УвеличениеПланаОплатыПоставщику.ДатаПлатежа
				|КОНЕЦ";
		ВариантОплаты = "УвеличениеПланаОплатыПоставщику.ВариантОплаты";
		ИдентификаторФинЗаписи = "УвеличениеПланаОплатыПоставщику.ОбъектРасчетов.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "Неопределено";
		Вид = "2";
		
	ИначеЕсли Операция = "ВозвратОплатыОтПоставщика" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		Период = "УвеличениеПланаОплатыПоставщику.ДатаРегистратора";
		
		ПорядокРасчетов = "Неопределено";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		ЗаказЗакупки = "Неопределено";
		СверхЗаказа = "ЛОЖЬ";
		
		КОплате = "УвеличениеПланаОплатыПоставщику.СуммаВзаиморасчетов";
		
		СвязанныйДокумент = "Неопределено";
		ФормаОплаты = "УвеличениеПланаОплатыПоставщику.ФормаОплаты";
		СтатьяДвиженияДенежныхСредств = "УвеличениеПланаОплатыПоставщику.СтатьяДвиженияДенежныхСредств";
		ДатаПлатежа = "ДАТАВРЕМЯ(1,1,1)";
		ВариантОплаты = "Неопределено";
		ИдентификаторФинЗаписи = "УвеличениеПланаОплатыПоставщику.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "УвеличениеПланаОплатыПоставщику.НастройкаХозяйственнойОперации";
		Вид = "5";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Период                                                             КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                              КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                     КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеПланаОплатыПоставщику.ОбъектРасчетов                      КАК ОбъектРасчетов,
		|	УвеличениеПланаОплатыПоставщику.ВалютаВзаиморасчетов                КАК Валюта,
		|	
		|	0                                                                   КАК Сумма,
		|	0                                                                   КАК Оплачивается,
		|	СУММА(&КОплате)                                                     КАК КОплате,
		|	0                                                                   КАК КПоступлению,
		|	
		|	УвеличениеПланаОплатыПоставщику.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                                        КАК ФормаОплаты,
		|	Неопределено                                                        КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&ЗаказЗакупки                                                       КАК ЗакупкаПоЗаказу,
		|	УвеличениеПланаОплатыПоставщику.ДатаРегистратора                    КАК ДатаРегистратора,
		|	&ДатаПлатежа                                                        КАК ДатаПлатежа,
		|	0                                                                   КАК СуммаРегл,
		|	0                                                                   КАК СуммаУпр,
		|	0                                                                   КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                      КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                        КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	&СвязанныйДокумент                                                  КАК СвязанныйДокумент,
		|	
		|	&ВариантОплаты                                                      КАК ВариантОплаты,
		|	УвеличениеПланаОплатыПоставщику.ВалютаДокумента                     КАК ВалютаДокумента,
		|	Неопределено                                                        КАК КорОбъектРасчетов,
		|	Неопределено                                                        КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеПланаОплатыПоставщику.ОбъектРасчетов.Организация          КАК Организация,
		|	УвеличениеПланаОплатыПоставщику.Партнер                                                            КАК Партнер,
		|	УвеличениеПланаОплатыПоставщику.ОбъектРасчетов.Контрагент           КАК Контрагент,
		|	УвеличениеПланаОплатыПоставщику.ОбъектРасчетов.Договор              КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                        КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                        КАК КорПартнер,
		|	Неопределено                                                        КАК КорОрганизация,
		|	Неопределено                                                        КАК КорКонтрагент,
		|	Неопределено                                                        КАК КорДоговор,
		|	Неопределено                                                        КАК КорНаправлениеДеятельности,
		|	УвеличениеПланаОплатыПоставщику.НомерРегистратора                   КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                             КАК ИдентификаторФинЗаписи,
		|	&Вид                                                                КАК Вид,
		|	&НастройкаХозяйственнойОперации                                     КАК НастройкаХозяйственнойОперации
		|	
		|ИЗ
		|	#УвеличениеПланаОплатыПоставщику КАК УвеличениеПланаОплатыПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УвеличениеПланаОплатыПоставщику.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УвеличениеПланаОплатыПоставщику.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УвеличениеПланаОплатыПоставщику.ОбъектРасчетов.Организация = Аналитика.Организация
		|					И УвеличениеПланаОплатыПоставщику.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|					И УвеличениеПланаОплатыПоставщику.Партнер = Аналитика.Партнер
		|					И УвеличениеПланаОплатыПоставщику.ОбъектРасчетов.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&КОплате <> 0
		|	//При расчетах по договору с графиком план оплаты не увеличивается
		|	И НЕ ((&ЭтоЗаказ ИЛИ &ЭтоНакладная)
		|			И ЕСТЬNULL(ДанныеДоговора.ЗаданГрафикИсполнения, ЛОЖЬ)
		|			И &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
		|	//Заказ с расчетами не по накладным
		|	И (&ЭтоЗаказ И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		//Сверх заказа или не по заказу
		|		ИЛИ &ЭтоНакладная И (&СверхЗаказа
		|							ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|							ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|							ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
		|							ИЛИ НЕ &НакладнаяПоЗаказам)
		|		//График исполнения договора, возврат оплаты
		|		ИЛИ НЕ (&ЭтоНакладная ИЛИ &ЭтоЗаказ)
		|		// Если договор без графика то для закрытия переплаты по нему увеличиваем план оплаты.
		|		ИЛИ &ЭтоНакладная 
		|			И &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
		|			И НЕ ЕСТЬNULL(ДанныеДоговора.ЗаданГрафикИсполнения, ЛОЖЬ)
		|			И &ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения),
		|								ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления))
		|		)
		|СГРУППИРОВАТЬ ПО
		|	&Период,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеПланаОплатыПоставщику.ОбъектРасчетов,
		|	УвеличениеПланаОплатыПоставщику.Партнер,
		|	УвеличениеПланаОплатыПоставщику.ВалютаВзаиморасчетов,
		|	УвеличениеПланаОплатыПоставщику.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&СтатьяДвиженияДенежныхСредств,
		|	УвеличениеПланаОплатыПоставщику.ДатаРегистратора,
		|	&ДатаПлатежа,
		|	&ВариантОплаты,
		|	&СвязанныйДокумент,
		|	&ЗаказЗакупки,
		|	УвеличениеПланаОплатыПоставщику.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеПланаОплатыПоставщику.НомерРегистратора,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПорядокРасчетов",               ПорядокРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                   ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоЗаказ",                      ЭтоЗаказ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоНакладная",                  ЭтоНакладная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НакладнаяПоЗаказам",            НакладнаяПоЗаказам);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказЗакупки",                  ЗаказЗакупки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СверхЗаказа",                   СверхЗаказа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Период",                        Период);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплате",                       КОплате);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                   ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты",                 ВариантОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",             СвязанныйДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИдентификаторФинЗаписи",        ИдентификаторФинЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НастройкаХозяйственнойОперации", НастройкаХозяйственнойОперации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид",                           Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьПланОплатыПоставщику(Операция)
	
	Если Операция = "ОплатаПоставщику" Тогда
		
		КОплате = "УменьшениеПланаОплатыПоставщику.СуммаВзаиморасчетов";
		ФормаОплаты = "УменьшениеПланаОплатыПоставщику.ФормаОплаты";
		ЗаявкаНаРасходованиеДенежныхСредств = "УменьшениеПланаОплатыПоставщику.ЗаявкаНаРасходованиеДенежныхСредств";
		СтатьяДвиженияДенежныхСредств = "УменьшениеПланаОплатыПоставщику.СтатьяДвиженияДенежныхСредств";
		СвязанныйДокумент = "УменьшениеПланаОплатыПоставщику.СвязанныйДокумент";
		ИдентификаторФинЗаписи = "УменьшениеПланаОплатыПоставщику.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "УменьшениеПланаОплатыПоставщику.НастройкаХозяйственнойОперации";
		Вид = "ВЫБОР КОГДА
		|	УменьшениеПланаОплатыПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом)
		|		ТОГДА 2
		|	ИНАЧЕ 4
		|КОНЕЦ";
		
	ИначеЕсли Операция = "Закупка" Тогда
		
		КОплате = "УменьшениеПланаОплатыПоставщику.КОплате";
		ФормаОплаты = "Неопределено";
		ЗаявкаНаРасходованиеДенежныхСредств = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "УменьшениеПланаОплатыПоставщику.ОбъектРасчетов.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "Неопределено";
		Вид = "2";
		
	ИначеЕсли Операция = "ВозвратТоваровПоставщику" Тогда
		
		КОплате = "УменьшениеПланаОплатыПоставщику.СуммаВзаиморасчетов";
		ФормаОплаты = "Неопределено";
		ЗаявкаНаРасходованиеДенежныхСредств = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "УменьшениеПланаОплатыПоставщику.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "УменьшениеПланаОплатыПоставщику.НастройкаХозяйственнойОперации";
		Вид = "5";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УменьшениеПланаОплатыПоставщику.ДатаРегистратора                    КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                              КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                     КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеПланаОплатыПоставщику.ОбъектРасчетов                      КАК ОбъектРасчетов,
		|	УменьшениеПланаОплатыПоставщику.ВалютаВзаиморасчетов                КАК Валюта,
		|	
		|	0                                                                   КАК Сумма,
		|	0                                                                   КАК Оплачивается,
		|	СУММА(&КОплате)                                                     КАК КОплате,
		|	0                                                                   КАК КПоступлению,
		|	
		|	УменьшениеПланаОплатыПоставщику.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                                        КАК ФормаОплаты,
		|	&ЗаявкаНаРасходованиеДенежныхСредств                                КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                                        КАК ЗакупкаПоЗаказу,
		|	УменьшениеПланаОплатыПоставщику.ДатаРегистратора                    КАК ДатаРегистратора,
		|	ВЫБОР КОГДА &КОплате < 0
		|			ТОГДА НАЧАЛОПЕРИОДА(УменьшениеПланаОплатыПоставщику.ДатаРегистратора, ДЕНЬ)
		|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ                                                               КАК ДатаПлатежа,
		|	0                                                                   КАК СуммаРегл,
		|	0                                                                   КАК СуммаУпр,
		|	0                                                                   КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                      КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                        КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	&СвязанныйДокумент                                                  КАК СвязанныйДокумент,
		|	Неопределено                                                        КАК ВариантОплаты,
		|	УменьшениеПланаОплатыПоставщику.ВалютаДокумента                     КАК ВалютаДокумента,
		|	Неопределено                                                        КАК КорОбъектРасчетов,
		|	Неопределено                                                        КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеПланаОплатыПоставщику.ОбъектРасчетов.Организация          КАК Организация,
		|	УменьшениеПланаОплатыПоставщику.Партнер                             КАК Партнер,
		|	УменьшениеПланаОплатыПоставщику.ОбъектРасчетов.Контрагент           КАК Контрагент,
		|	УменьшениеПланаОплатыПоставщику.ОбъектРасчетов.Договор              КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                        КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                        КАК КорПартнер,
		|	Неопределено                                                        КАК КорОрганизация,
		|	Неопределено                                                        КАК КорКонтрагент,
		|	Неопределено                                                        КАК КорДоговор,
		|	Неопределено                                                        КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаОплатыПоставщику.НомерРегистратора                   КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                             КАК ИдентификаторФинЗаписи,
		|	&Вид                                                                КАК Вид,
		|	&НастройкаХозяйственнойОперации                                     КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеПланаОплатыПоставщику КАК УменьшениеПланаОплатыПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УменьшениеПланаОплатыПоставщику.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка =  УменьшениеПланаОплатыПоставщику.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УменьшениеПланаОплатыПоставщику.ОбъектРасчетов.Организация = Аналитика.Организация
		|					И УменьшениеПланаОплатыПоставщику.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|					И УменьшениеПланаОплатыПоставщику.Партнер = Аналитика.Партнер
		|					И УменьшениеПланаОплатыПоставщику.ОбъектРасчетов.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	&КОплате <> 0
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеПланаОплатыПоставщику.ДатаРегистратора,
		|	ВЫБОР КОГДА &КОплате < 0
		|			ТОГДА НАЧАЛОПЕРИОДА(УменьшениеПланаОплатыПоставщику.ДатаРегистратора, ДЕНЬ)
		|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеПланаОплатыПоставщику.ОбъектРасчетов,
		|	УменьшениеПланаОплатыПоставщику.Партнер,
		|	УменьшениеПланаОплатыПоставщику.ВалютаВзаиморасчетов,
		|	УменьшениеПланаОплатыПоставщику.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&СвязанныйДокумент,
		|	&ЗаявкаНаРасходованиеДенежныхСредств,
		|	&СтатьяДвиженияДенежныхСредств,
		|	УменьшениеПланаОплатыПоставщику.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаОплатыПоставщику.НомерРегистратора,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации
		|	";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КОплате",                             КОплате);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                         ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаявкаНаРасходованиеДенежныхСредств", ЗаявкаНаРасходованиеДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств",       СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",                   СвязанныйДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИдентификаторФинЗаписи",              ИдентификаторФинЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НастройкаХозяйственнойОперации",      НастройкаХозяйственнойОперации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид",                                 Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьПланПоставкиОтПоставщика(Операция)
	
	Если Операция = "ГрафикИсполненияПоставщик" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ЛОЖЬ";
		ПорядокРасчетов = "ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаПоставки.ДатаПоступления, ДЕНЬ)";
		ЗаказЗакупки = "Неопределено";
		СверхЗаказа = "ЛОЖЬ";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		Вид = "1";
		
	ИначеЕсли Операция = "ЗаказПоставщику" Тогда
		
		ЭтоЗаказ = "ИСТИНА";
		ЭтоНакладная = "ЛОЖЬ";
		ПорядокРасчетов = "УвеличениеПланаПоставки.ПорядокРасчетов";
		Период = "КОНЕЦПЕРИОДА(УвеличениеПланаПоставки.ДатаПоступления, ДЕНЬ)";
		ЗаказЗакупки = "Неопределено";
		СверхЗаказа = "ЛОЖЬ";
		НакладнаяПоЗаказам = "ЛОЖЬ";
		Вид = "1";
		
	ИначеЕсли Операция = "Закупка" Тогда
		
		ЭтоЗаказ = "ЛОЖЬ";
		ЭтоНакладная = "ИСТИНА";
		ПорядокРасчетов = "УвеличениеПланаПоставки.ПорядокРасчетов";
		Период = "УвеличениеПланаПоставки.ДатаРегистратора";
		ЗаказЗакупки = "УвеличениеПланаПоставки.ЗаказЗакупки";
		СверхЗаказа = "УвеличениеПланаПоставки.СверхЗаказа";
		НакладнаяПоЗаказам = "УвеличениеПланаПоставки.НакладнаяПоЗаказам";
		Вид = "2";
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&Период                                                  КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                   КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)          КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеПланаПоставки.ОбъектРасчетов                   КАК ОбъектРасчетов,
		|	УвеличениеПланаПоставки.ВалютаВзаиморасчетов             КАК Валюта,
		|	
		|	0                                                        КАК Сумма,
		|	0                                                        КАК Оплачивается,
		|	0                                                        КАК КОплате,
		|	СУММА(УвеличениеПланаПоставки.КПоступлению)              КАК КПоступлению,
		|	
		|	УвеличениеПланаПоставки.ХозяйственнаяОперация            КАК ХозяйственнаяОперация,
		|	Неопределено                                             КАК ФормаОплаты,
		|	Неопределено                                             КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&ЗаказЗакупки                                            КАК ЗакупкаПоЗаказу,
		|	УвеличениеПланаПоставки.ДатаРегистратора                 КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                         КАК ДатаПлатежа,
		|	0                                                        КАК СуммаРегл,
		|	0                                                        КАК СуммаУпр,
		|	0                                                        КАК ЗалогЗаТару,
		|	Неопределено                                             КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                             КАК РасчетныйДокумент,
		|	Неопределено                                             КАК СвязанныйДокумент,
		|	Неопределено                                             КАК ВариантОплаты,
		|	УвеличениеПланаПоставки.ВалютаДокумента                  КАК ВалютаДокумента,
		|	Неопределено                                             КАК КорОбъектРасчетов,
		|	Неопределено                                             КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеПланаПоставки.Организация
		|		ИНАЧЕ УвеличениеПланаПоставки.ОбъектРасчетов.Организация
		|	КОНЕЦ                                                    КАК Организация,
		|	УвеличениеПланаПоставки.Партнер                          КАК Партнер,
		|	УвеличениеПланаПоставки.ОбъектРасчетов.Контрагент        КАК Контрагент,
		|	УвеличениеПланаПоставки.ОбъектРасчетов.Договор           КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики             КАК НаправлениеДеятельности,
		|	Неопределено                                             КАК КорПартнер,
		|	Неопределено                                             КАК КорОрганизация,
		|	Неопределено                                             КАК КорКонтрагент,
		|	Неопределено                                             КАК КорДоговор,
		|	Неопределено                                             КАК КорНаправлениеДеятельности,
		|	УвеличениеПланаПоставки.НомерРегистратора                КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                    КАК ИдентификаторФинЗаписи,
		|	&Вид                                                     КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УвеличениеПланаПоставки КАК УвеличениеПланаПоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УвеличениеПланаПоставки.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка =  УвеличениеПланаПоставки.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|							ТОГДА УвеличениеПланаПоставки.Организация
		|						ИНАЧЕ УвеличениеПланаПоставки.ОбъектРасчетов.Организация
		|					КОНЕЦ = Аналитика.Организация
		|					И УвеличениеПланаПоставки.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|					И УвеличениеПланаПоставки.Партнер = Аналитика.Партнер
		|					И УвеличениеПланаПоставки.ОбъектРасчетов.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УвеличениеПланаПоставки.КПоступлению <> 0
		|	И НЕ ((&ЭтоЗаказ ИЛИ &ЭтоНакладная) 
		|		И ЕСТЬNULL(ДанныеДоговора.ЗаданГрафикИсполнения, ЛОЖЬ) 
		|		И &ПорядокРасчетов В (ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов), ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
		|		И НЕ &СверхЗаказа)
		|	И (&ЭтоЗаказ 
		|			И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ &ЭтоНакладная
		|			И &НакладнаяПоЗаказам
		|			И &ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			И &СверхЗаказа
		|		ИЛИ НЕ (&ЭтоЗаказ ИЛИ &ЭтоНакладная))
		|СГРУППИРОВАТЬ ПО
		|	&Период,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеПланаПоставки.Организация
		|		ИНАЧЕ УвеличениеПланаПоставки.ОбъектРасчетов.Организация
		|	КОНЕЦ,
		|	УвеличениеПланаПоставки.Партнер,
		|	УвеличениеПланаПоставки.ОбъектРасчетов,
		|	УвеличениеПланаПоставки.ВалютаВзаиморасчетов,
		|	УвеличениеПланаПоставки.ХозяйственнаяОперация,
		|	УвеличениеПланаПоставки.ДатаРегистратора,
		|	УвеличениеПланаПоставки.НомерРегистратора,
		|	УвеличениеПланаПоставки.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеПланаПоставки.Организация
		|		ИНАЧЕ УвеличениеПланаПоставки.ОбъектРасчетов.Организация
		|	КОНЕЦ,
		|	&ЗаказЗакупки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПорядокРасчетов",               ПорядокРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоЗаказ",                      ЭтоЗаказ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЭтоНакладная",                  ЭтоНакладная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Период",                        Период);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказЗакупки",                  ЗаказЗакупки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СверхЗаказа",                   СверхЗаказа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НакладнаяПоЗаказам",            НакладнаяПоЗаказам);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид",                           Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьПланПоставкиОтПоставщика()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	УменьшениеПланаПоставки.ДатаРегистратора                 КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                   КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)          КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеПланаПоставки.ОбъектРасчетов                   КАК ОбъектРасчетов,
		|	УменьшениеПланаПоставки.ВалютаВзаиморасчетов             КАК Валюта,
		|	
		|	0                                                        КАК Сумма,
		|	0                                                        КАК Оплачивается,
		|	0                                                        КАК КОплате,
		|	СУММА(УменьшениеПланаПоставки.СуммаВзаиморасчетов)       КАК КПоступлению,
		|	
		|	УменьшениеПланаПоставки.ХозяйственнаяОперация            КАК ХозяйственнаяОперация,
		|	Неопределено                                             КАК ФормаОплаты,
		|	Неопределено                                             КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	УменьшениеПланаПоставки.ЗаказЗакупки                     КАК ЗакупкаПоЗаказу,
		|	УменьшениеПланаПоставки.ДатаРегистратора                 КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                         КАК ДатаПлатежа,
		|	0                                                        КАК СуммаРегл,
		|	0                                                        КАК СуммаУпр,
		|	0                                                        КАК ЗалогЗаТару,
		|	Неопределено                                             КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                             КАК РасчетныйДокумент,
		|	Неопределено                                             КАК СвязанныйДокумент,
		|	Неопределено                                             КАК ВариантОплаты,
		|	УменьшениеПланаПоставки.ВалютаДокумента                  КАК ВалютаДокумента,
		|	Неопределено                                             КАК КорОбъектРасчетов,
		|	Неопределено                                             КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УменьшениеПланаПоставки.Организация
		|		ИНАЧЕ УменьшениеПланаПоставки.ОбъектРасчетов.Организация
		|	КОНЕЦ                                                    КАК Организация,
		|	УменьшениеПланаПоставки.Партнер                          КАК Партнер,
		|	УменьшениеПланаПоставки.ОбъектРасчетов.Контрагент        КАК Контрагент,
		|	УменьшениеПланаПоставки.ОбъектРасчетов.Договор           КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики             КАК НаправлениеДеятельности,
		|	Неопределено                                             КАК КорПартнер,
		|	Неопределено                                             КАК КорОрганизация,
		|	Неопределено                                             КАК КорКонтрагент,
		|	Неопределено                                             КАК КорДоговор,
		|	Неопределено                                             КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаПоставки.НомерРегистратора                КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                    КАК ИдентификаторФинЗаписи,
		|	""2""                                                    КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеПланаПоставки КАК УменьшениеПланаПоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УменьшениеПланаПоставки.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УменьшениеПланаПоставки.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|						ТОГДА УменьшениеПланаПоставки.Организация
		|						ИНАЧЕ УменьшениеПланаПоставки.ОбъектРасчетов.Организация
		|					КОНЕЦ = Аналитика.Организация
		|					И УменьшениеПланаПоставки.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|					И УменьшениеПланаПоставки.Партнер = Аналитика.Партнер
		|					И УменьшениеПланаПоставки.ОбъектРасчетов.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	(ЕСТЬNULL(ДанныеДоговора.ЗаданГрафикИсполнения, ЛОЖЬ) 
		|		И УменьшениеПланаПоставки.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	ИЛИ УменьшениеПланаПоставки.НакладнаяПоЗаказам 
		|		И (УменьшениеПланаПоставки.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|			ИЛИ УменьшениеПланаПоставки.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				И НЕ ЕСТЬNULL(ДанныеДоговора.ЗаданГрафикИсполнения, ЛОЖЬ)))
		|	И УменьшениеПланаПоставки.СуммаВзаиморасчетов <> 0 
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеПланаПоставки.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УменьшениеПланаПоставки.Организация
		|		ИНАЧЕ УменьшениеПланаПоставки.ОбъектРасчетов.Организация
		|	КОНЕЦ,
		|	УменьшениеПланаПоставки.Партнер,
		|	УменьшениеПланаПоставки.ОбъектРасчетов,
		|	УменьшениеПланаПоставки.ВалютаВзаиморасчетов,
		|	УменьшениеПланаПоставки.ХозяйственнаяОперация,
		|	УменьшениеПланаПоставки.ЗаказЗакупки,
		|	УменьшениеПланаПоставки.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаПоставки.НомерРегистратора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УменьшениеПланаПоставки.ДатаРегистратора                              КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                                КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                       КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов                   КАК ОбъектРасчетов,
		|	УменьшениеПланаПоставки.ВалютаВзаиморасчетов                          КАК Валюта,
		|	
		|	0                                                                     КАК Сумма,
		|	0                                                                     КАК Оплачивается,
		|	0                                                                     КАК КОплате,
		|	СУММА(УменьшениеПланаПоставки.СуммаВзаиморасчетов)                    КАК КПоступлению,
		|	
		|	УменьшениеПланаПоставки.ХозяйственнаяОперация                         КАК ХозяйственнаяОперация,
		|	Неопределено                                                          КАК ФормаОплаты,
		|	Неопределено                                                          КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	УменьшениеПланаПоставки.ЗаказЗакупки                                  КАК ЗакупкаПоЗаказу,
		|	УменьшениеПланаПоставки.ДатаРегистратора                              КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                                      КАК ДатаПлатежа,
		|	0                                                                     КАК СуммаРегл,
		|	0                                                                     КАК СуммаУпр,
		|	0                                                                     КАК ЗалогЗаТару,
		|	Неопределено                                                          КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                          КАК РасчетныйДокумент,
		|	Неопределено                                                          КАК СвязанныйДокумент,
		|	Неопределено                                                          КАК ВариантОплаты,
		|	УменьшениеПланаПоставки.ВалютаДокумента                               КАК ВалютаДокумента,
		|	Неопределено                                                          КАК КорОбъектРасчетов,
		|	Неопределено                                                          КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов.Организация       КАК Организация,
		|	УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов.Партнер           КАК Партнер,
		|	УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов.Контрагент        КАК Контрагент,
		|	УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов.Договор           КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                          КАК НаправлениеДеятельности,
		|	Неопределено                                                          КАК КорПартнер,
		|	Неопределено                                                          КАК КорОрганизация,
		|	Неопределено                                                          КАК КорКонтрагент,
		|	Неопределено                                                          КАК КорДоговор,
		|	Неопределено                                                          КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаПоставки.НомерРегистратора                             КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                                 КАК ИдентификаторФинЗаписи,
		|	""2""                                                                 КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)      КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеПланаПоставки КАК УменьшениеПланаПоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УменьшениеПланаПоставки.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов.Организация = Аналитика.Организация
		|					И УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|					И УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов.Партнер = Аналитика.Партнер
		|					И УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеПланаПоставки.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|	И УменьшениеПланаПоставки.НакладнаяПоЗаказам
		|	И УменьшениеПланаПоставки.СуммаВзаиморасчетов <> 0 
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеПланаПоставки.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеПланаПоставки.ОбъектРасчетов,
		|	УменьшениеПланаПоставки.ВалютаВзаиморасчетов,
		|	УменьшениеПланаПоставки.ХозяйственнаяОперация,
		|	УменьшениеПланаПоставки.ЗаказЗакупки,
		|	УменьшениеПланаПоставки.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаПоставки.НомерРегистратора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УменьшениеПланаПоставки.ДатаРегистратора                 КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                   КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)          КАК АналитикаУчетаПоПартнерам,
		|	ОбъектРасчетовДоговор.Ссылка                             КАК ОбъектРасчетов,
		|	УменьшениеПланаПоставки.ВалютаВзаиморасчетов             КАК Валюта,
		|	
		|	0                                                        КАК Сумма,
		|	0                                                        КАК Оплачивается,
		|	0                                                        КАК КОплате,
		|	СУММА(УменьшениеПланаПоставки.СуммаВзаиморасчетов)       КАК КПоступлению,
		|	
		|	УменьшениеПланаПоставки.ХозяйственнаяОперация            КАК ХозяйственнаяОперация,
		|	Неопределено                                             КАК ФормаОплаты,
		|	Неопределено                                             КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	УменьшениеПланаПоставки.ЗаказЗакупки                     КАК ЗакупкаПоЗаказу,
		|	УменьшениеПланаПоставки.ДатаРегистратора                 КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                         КАК ДатаПлатежа,
		|	0                                                        КАК СуммаРегл,
		|	0                                                        КАК СуммаУпр,
		|	0                                                        КАК ЗалогЗаТару,
		|	Неопределено                                             КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                             КАК РасчетныйДокумент,
		|	Неопределено                                             КАК СвязанныйДокумент,
		|	Неопределено                                             КАК ВариантОплаты,
		|	УменьшениеПланаПоставки.ВалютаДокумента                  КАК ВалютаДокумента,
		|	Неопределено                                             КАК КорОбъектРасчетов,
		|	Неопределено                                             КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	ОбъектРасчетовДоговор.Организация                        КАК Организация,
		|	ОбъектРасчетовДоговор.Партнер                            КАК Партнер,
		|	ОбъектРасчетовДоговор.Контрагент                         КАК Контрагент,
		|	ОбъектРасчетовДоговор.Договор                            КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики             КАК НаправлениеДеятельности,
		|	Неопределено                                             КАК КорПартнер,
		|	Неопределено                                             КАК КорОрганизация,
		|	Неопределено                                             КАК КорКонтрагент,
		|	Неопределено                                             КАК КорДоговор,
		|	Неопределено                                             КАК КорНаправлениеДеятельности,
		|	УменьшениеПланаПоставки.НомерРегистратора                КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                    КАК ИдентификаторФинЗаписи,
		|	""2""                                                    КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеПланаПоставки КАК УменьшениеПланаПоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектРасчетовДоговор
		|			ПО УменьшениеПланаПоставки.ОбъектРасчетов.Договор = ОбъектРасчетовДоговор.Объект
		|				И ОбъектРасчетовДоговор.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|				И УменьшениеПланаПоставки.ОбъектРасчетов.Организация = ОбъектРасчетовДоговор.Организация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО ОбъектРасчетовДоговор.Ссылка = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УменьшениеПланаПоставки.ОбъектРасчетов.Организация = Аналитика.Организация
		|					И УменьшениеПланаПоставки.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|					И УменьшениеПланаПоставки.ОбъектРасчетов.Партнер = Аналитика.Партнер
		|					И УменьшениеПланаПоставки.ОбъектРасчетов.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеПланаПоставки.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
		|	И (УменьшениеПланаПоставки.ОбъектРасчетов.Договор.ЗаданГрафикИсполнения
		|		ИЛИ УменьшениеПланаПоставки.НакладнаяПоЗаказам)
		|	И УменьшениеПланаПоставки.СуммаВзаиморасчетов <> 0 
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеПланаПоставки.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	ОбъектРасчетовДоговор.Ссылка,
		|	УменьшениеПланаПоставки.ВалютаВзаиморасчетов,
		|	УменьшениеПланаПоставки.ХозяйственнаяОперация,
		|	УменьшениеПланаПоставки.ЗаказЗакупки,
		|	УменьшениеПланаПоставки.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеПланаПоставки.НомерРегистратора
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьЗадолженностьПоставщика(Операция)
	
	Если Операция = "ОплатаПоставщику" Тогда
		
		ФормаОплаты = "УвеличениеЗадолженностиПоставщика.ФормаОплаты";
		ЗаявкаНаРасходованиеДенежныхСредств = "УвеличениеЗадолженностиПоставщика.ЗаявкаНаРасходованиеДенежныхСредств";
		СтатьяДвиженияДенежныхСредств = "УвеличениеЗадолженностиПоставщика.СтатьяДвиженияДенежныхСредств";
		СвязанныйДокумент = "УвеличениеЗадолженностиПоставщика.СвязанныйДокумент";
		ИдентификаторФинЗаписи = "УвеличениеЗадолженностиПоставщика.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "УвеличениеЗадолженностиПоставщика.НастройкаХозяйственнойОперации";
		Вид = "ВЫБОР КОГДА
		|	УвеличениеЗадолженностиПоставщика.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом)
		|		ТОГДА 2
		|	ИНАЧЕ 4
		|КОНЕЦ";
		
	ИначеЕсли Операция = "ВозвратТоваровПоставщику" Тогда
		
		ФормаОплаты = "Неопределено";
		ЗаявкаНаРасходованиеДенежныхСредств = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "УвеличениеЗадолженностиПоставщика.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "УвеличениеЗадолженностиПоставщика.НастройкаХозяйственнойОперации";
		Вид = "4";
		
	ИначеЕсли Операция = "Закупка" Тогда
		
		ФормаОплаты = "Неопределено";
		ЗаявкаНаРасходованиеДенежныхСредств = "Неопределено";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "Неопределено";
		Вид = "2";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УвеличениеЗадолженностиПоставщика.ДатаРегистратора                   КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                               КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                      КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеЗадолженностиПоставщика.ОбъектРасчетов                     КАК ОбъектРасчетов,
		|	УвеличениеЗадолженностиПоставщика.ВалютаВзаиморасчетов               КАК Валюта,
		|	
		|	СУММА(УвеличениеЗадолженностиПоставщика.СуммаВзаиморасчетов)         КАК Сумма,
		|	0                                                                    КАК Оплачивается,
		|	0                                                                    КАК КОплате,
		|	0                                                                    КАК КПоступлению,
		|	
		|	УвеличениеЗадолженностиПоставщика.ХозяйственнаяОперация              КАК ХозяйственнаяОперация,
		|	&ФормаОплаты                                                         КАК ФормаОплаты,
		|	&ЗаявкаНаРасходованиеДенежныхСредств                                 КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                                         КАК ЗакупкаПоЗаказу,
		|	УвеличениеЗадолженностиПоставщика.ДатаРегистратора                   КАК ДатаРегистратора,
		|	ВЫБОР КОГДА УвеличениеЗадолженностиПоставщика.СуммаВзаиморасчетов < 0
		|			ТОГДА НАЧАЛОПЕРИОДА(УвеличениеЗадолженностиПоставщика.ДатаРегистратора, ДЕНЬ)
		|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ                                                                КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА УвеличениеЗадолженностиПоставщика.ВалютаВзаиморасчетов = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеЗадолженностиПоставщика.СуммаВзаиморасчетов
		|			КОГДА УвеличениеЗадолженностиПоставщика.ВалютаДокумента = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеЗадолженностиПоставщика.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(УвеличениеЗадолженностиПоставщика.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                               КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА УвеличениеЗадолженностиПоставщика.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеЗадолженностиПоставщика.СуммаВзаиморасчетов
		|			КОГДА УвеличениеЗадолженностиПоставщика.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеЗадолженностиПоставщика.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(УвеличениеЗадолженностиПоставщика.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                              КАК СуммаУпр,
		|	0                                                                   КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                      КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                        КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	&СвязанныйДокумент                                                  КАК СвязанныйДокумент,
		|	Неопределено                                                        КАК ВариантОплаты,
		|	УвеличениеЗадолженностиПоставщика.ВалютаДокумента                   КАК ВалютаДокумента,
		|	Неопределено                                                        КАК КорОбъектРасчетов,
		|	Неопределено                                                        КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	ВЫБОР КОГДА УвеличениеЗадолженностиПоставщика.Организация <> УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Организация
		|		ТОГДА УвеличениеЗадолженностиПоставщика.Организация
		|		ИНАЧЕ УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Организация
		|	КОНЕЦ                                                               КАК Организация,
		|	УвеличениеЗадолженностиПоставщика.Партнер                           КАК Партнер,
		|	УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Контрагент         КАК Контрагент,
		|	УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Договор            КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                        КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                        КАК КорПартнер,
		|	Неопределено                                                        КАК КорОрганизация,
		|	Неопределено                                                        КАК КорКонтрагент,
		|	Неопределено                                                        КАК КорДоговор,
		|	Неопределено                                                        КАК КорНаправлениеДеятельности,
		|	УвеличениеЗадолженностиПоставщика.НомерРегистратора                 КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                             КАК ИдентификаторФинЗаписи,
		|	&Вид                                                                КАК Вид,
		|	&НастройкаХозяйственнойОперации                                     КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УвеличениеЗадолженностиПоставщика КАК УвеличениеЗадолженностиПоставщика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УвеличениеЗадолженностиПоставщика.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО ВЫБОР КОГДА УвеличениеЗадолженностиПоставщика.Организация <> УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Организация
		|							ТОГДА УвеличениеЗадолженностиПоставщика.Организация
		|							ИНАЧЕ УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Организация
		|					КОНЕЦ = Аналитика.Организация
		|					И УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|					И УвеличениеЗадолженностиПоставщика.Партнер = Аналитика.Партнер
		|					И УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютПоставщик КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = УвеличениеЗадолженностиПоставщика.Ссылка
		|				И Коэффициенты.Организация = УвеличениеЗадолженностиПоставщика.Организация
		|				И Коэффициенты.ВалютаВзаиморасчетов = УвеличениеЗадолженностиПоставщика.ВалютаВзаиморасчетов
		|ГДЕ
		|	УвеличениеЗадолженностиПоставщика.СуммаВзаиморасчетов <> 0
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеЗадолженностиПоставщика.ДатаРегистратора,
		|	ВЫБОР КОГДА УвеличениеЗадолженностиПоставщика.СуммаВзаиморасчетов < 0
		|			ТОГДА НАЧАЛОПЕРИОДА(УвеличениеЗадолженностиПоставщика.ДатаРегистратора, ДЕНЬ)
		|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеЗадолженностиПоставщика.ОбъектРасчетов,
		|	ВЫБОР КОГДА УвеличениеЗадолженностиПоставщика.Организация <> УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Организация
		|		ТОГДА УвеличениеЗадолженностиПоставщика.Организация
		|		ИНАЧЕ УвеличениеЗадолженностиПоставщика.ОбъектРасчетов.Организация
		|	КОНЕЦ,
		|	УвеличениеЗадолженностиПоставщика.Партнер,
		|	УвеличениеЗадолженностиПоставщика.ВалютаВзаиморасчетов,
		|	УвеличениеЗадолженностиПоставщика.ХозяйственнаяОперация,
		|	&ФормаОплаты,
		|	&ЗаявкаНаРасходованиеДенежныхСредств,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&СвязанныйДокумент,
		|	УвеличениеЗадолженностиПоставщика.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеЗадолженностиПоставщика.НомерРегистратора,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФормаОплаты",                         ФормаОплаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаявкаНаРасходованиеДенежныхСредств", ЗаявкаНаРасходованиеДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств",       СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",                   СвязанныйДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИдентификаторФинЗаписи",              ИдентификаторФинЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НастройкаХозяйственнойОперации",      НастройкаХозяйственнойОперации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид",                                 Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьНашуЗадолженностьПоставщику(Операция)
	
	Если Операция = "Закупка" Тогда
		
		ЗаказЗакупки = "УвеличениеНашейЗадолженностиПоставщику.ЗаказЗакупки";
		ДатаПлатежа = "ВЫБОР КОГДА УвеличениеНашейЗадолженностиПоставщику.Сумма < 0
						|		ТОГДА ДАТАВРЕМЯ(1,1,1)
						|	ИНАЧЕ УвеличениеНашейЗадолженностиПоставщику.ДатаПлатежа
						|КОНЕЦ";
		ЗалогЗаТару = "УвеличениеНашейЗадолженностиПоставщику.СуммаВзаиморасчетовПоТаре";
		СтатьяДвиженияДенежныхСредств = "Неопределено";
		СвязанныйДокумент = "УвеличениеНашейЗадолженностиПоставщику.СвязанныйДокумент";
		ИдентификаторФинЗаписи = "УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов.УникальныйИдентификатор";
		НастройкаХозяйственнойОперации = "Неопределено";
		ХозяйственнаяОперация = "ВЫБОР КОГДА УвеличениеНашейЗадолженностиПоставщику.Организация <> УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов.Организация
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)
		|		ИНАЧЕ УвеличениеНашейЗадолженностиПоставщику.ХозяйственнаяОперация
		|	КОНЕЦ";
		Вид = "2";
		ВариантОплаты = "УвеличениеНашейЗадолженностиПоставщику.ВариантОплаты";
		
	ИначеЕсли Операция = "ВозвратОплатыОтПоставщика" Тогда
		
		ЗаказЗакупки = "Неопределено";
		ДатаПлатежа = "НАЧАЛОПЕРИОДА(УвеличениеНашейЗадолженностиПоставщику.ДатаРегистратора, ДЕНЬ)";
		ЗалогЗаТару = "0";
		СтатьяДвиженияДенежныхСредств = "УвеличениеНашейЗадолженностиПоставщику.СтатьяДвиженияДенежныхСредств";
		СвязанныйДокумент = "Неопределено";
		ИдентификаторФинЗаписи = "УвеличениеНашейЗадолженностиПоставщику.ИдентификаторФинЗаписи";
		НастройкаХозяйственнойОперации = "УвеличениеНашейЗадолженностиПоставщику.НастройкаХозяйственнойОперации";
		ХозяйственнаяОперация = "УвеличениеНашейЗадолженностиПоставщику.ХозяйственнаяОперация";
		Вид = "5";
		ВариантОплаты = "Неопределено";
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УвеличениеНашейЗадолженностиПоставщику.ДатаРегистратора               КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                                КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                       КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов                 КАК ОбъектРасчетов,
		|	УвеличениеНашейЗадолженностиПоставщику.ВалютаВзаиморасчетов           КАК Валюта,
		|	
		|	СУММА(УвеличениеНашейЗадолженностиПоставщику.СуммаВзаиморасчетов)     КАК Сумма,
		|	0                                                                     КАК Оплачивается,
		|	0                                                                     КАК КОплате,
		|	0                                                                     КАК КПоступлению,
		|	
		|	&ХозяйственнаяОперация                                                КАК ХозяйственнаяОперация,
		|	УвеличениеНашейЗадолженностиПоставщику.ФормаОплаты                    КАК ФормаОплаты,
		|	Неопределено                                                          КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&ЗаказЗакупки                                                         КАК ЗакупкаПоЗаказу,
		|	УвеличениеНашейЗадолженностиПоставщику.ДатаРегистратора               КАК ДатаРегистратора,
		|	&ДатаПлатежа                                                          КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА УвеличениеНашейЗадолженностиПоставщику.ВалютаВзаиморасчетов = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеНашейЗадолженностиПоставщику.СуммаВзаиморасчетов
		|			КОГДА УвеличениеНашейЗадолженностиПоставщику.ВалютаДокумента = Коэффициенты.ВалютаРегламентированногоУчета
		|				ТОГДА УвеличениеНашейЗадолженностиПоставщику.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(УвеличениеНашейЗадолженностиПоставщику.Сумма * Коэффициенты.КоэффициентРегл КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                                КАК СуммаРегл,
		|	СУММА(ВЫБОР КОГДА УвеличениеНашейЗадолженностиПоставщику.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеНашейЗадолженностиПоставщику.СуммаВзаиморасчетов
		|			КОГДА УвеличениеНашейЗадолженностиПоставщику.ВалютаДокумента = &ВалютаУправленческогоУчета
		|				ТОГДА УвеличениеНашейЗадолженностиПоставщику.Сумма
		|			ИНАЧЕ ВЫРАЗИТЬ(УвеличениеНашейЗадолженностиПоставщику.Сумма * Коэффициенты.КоэффициентУпр КАК ЧИСЛО(31,2))
		|	КОНЕЦ)                                                                КАК СуммаУпр,
		|	СУММА(&ЗалогЗаТару)                                                   КАК ЗалогЗаТару,
		|	&СтатьяДвиженияДенежныхСредств                                        КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                          КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	&СвязанныйДокумент                                                    КАК СвязанныйДокумент,
		|	&ВариантОплаты                                                        КАК ВариантОплаты,
		|	УвеличениеНашейЗадолженностиПоставщику.ВалютаДокумента                КАК ВалютаДокумента,
		|	Неопределено                                                          КАК КорОбъектРасчетов,
		|	Неопределено                                                          КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеНашейЗадолженностиПоставщику.Организация
		|		ИНАЧЕ УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов.Организация
		|	КОНЕЦ                                                                 КАК Организация,
		|	УвеличениеНашейЗадолженностиПоставщику.Партнер                        КАК Партнер,
		|	УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов.Контрагент      КАК Контрагент,
		|	УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов.Договор         КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                          КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                          КАК КорПартнер,
		|	Неопределено                                                          КАК КорОрганизация,
		|	Неопределено                                                          КАК КорКонтрагент,
		|	Неопределено                                                          КАК КорДоговор,
		|	Неопределено                                                          КАК КорНаправлениеДеятельности,
		|	УвеличениеНашейЗадолженностиПоставщику.НомерРегистратора              КАК НомерРегистратора,
		|	&ИдентификаторФинЗаписи                                               КАК ИдентификаторФинЗаписи,
		|	&Вид                                                                  КАК Вид,
		|	&НастройкаХозяйственнойОперации                                       КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УвеличениеНашейЗадолженностиПоставщику КАК УвеличениеНашейЗадолженностиПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка = УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|							ТОГДА УвеличениеНашейЗадолженностиПоставщику.Организация
		|							ИНАЧЕ УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов.Организация
		|					КОНЕЦ = Аналитика.Организация
		|					И УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|					И УвеличениеНашейЗадолженностиПоставщику.Партнер = Аналитика.Партнер
		|					И УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалютПоставщик КАК Коэффициенты
		|			ПО Коэффициенты.Ссылка = УвеличениеНашейЗадолженностиПоставщику.Ссылка
		|				И Коэффициенты.Организация = УвеличениеНашейЗадолженностиПоставщику.Организация
		|				И Коэффициенты.ВалютаВзаиморасчетов = УвеличениеНашейЗадолженностиПоставщику.ВалютаВзаиморасчетов
		|				И Коэффициенты.ДатаКурса = УвеличениеНашейЗадолженностиПоставщику.ДатаКурса
		|ГДЕ
		|	УвеличениеНашейЗадолженностиПоставщику.СуммаВзаиморасчетов <> 0
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеНашейЗадолженностиПоставщику.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДоговора.ЦентрализованныйДоговор, Ложь)
		|		ТОГДА УвеличениеНашейЗадолженностиПоставщику.Организация
		|		ИНАЧЕ УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов.Организация
		|	КОНЕЦ,
		|	УвеличениеНашейЗадолженностиПоставщику.Партнер,
		|	УвеличениеНашейЗадолженностиПоставщику.ОбъектРасчетов,
		|	УвеличениеНашейЗадолженностиПоставщику.ВалютаВзаиморасчетов,
		|	&ХозяйственнаяОперация,
		|	УвеличениеНашейЗадолженностиПоставщику.ФормаОплаты,
		|	&ЗаказЗакупки,
		|	&СтатьяДвиженияДенежныхСредств,
		|	&ДатаПлатежа,
		|	&ВариантОплаты,
		|	&СвязанныйДокумент,
		|	УвеличениеНашейЗадолженностиПоставщику.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеНашейЗадолженностиПоставщику.НомерРегистратора,
		|	&ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаказЗакупки",                   ЗаказЗакупки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДатаПлатежа",                    ДатаПлатежа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗалогЗаТару",                    ЗалогЗаТару);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СтатьяДвиженияДенежныхСредств",  СтатьяДвиженияДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СвязанныйДокумент",              СвязанныйДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИдентификаторФинЗаписи",         ИдентификаторФинЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НастройкаХозяйственнойОперации", НастройкаХозяйственнойОперации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ХозяйственнаяОперация",          ХозяйственнаяОперация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид",                            Вид);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВариантОплаты",                  ВариантОплаты);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УвеличитьОплачиваетсяПоставщику(Операция)
	
	Если Операция = "ЗаявкаНаОплатуПоставщику" Тогда
		ЗаявкаНаРасходованиеДенежныхСредств = "УвеличениеОплачиваетсяПоставщику.Ссылка";
		Вид = "1";
	ИначеЕсли Операция = "ОплатаПоставщику" Тогда
		ЗаявкаНаРасходованиеДенежныхСредств = "УвеличениеОплачиваетсяПоставщику.ЗаявкаНаРасходованиеДенежныхСредств";
		Вид = "4";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УвеличениеОплачиваетсяПоставщику.ДатаРегистратора                   КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                              КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                     КАК АналитикаУчетаПоПартнерам,
		|	УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов                     КАК ОбъектРасчетов,
		|	УвеличениеОплачиваетсяПоставщику.ВалютаВзаиморасчетов               КАК Валюта,
		|	
		|	0                                                                   КАК Сумма,
		|	СУММА(УвеличениеОплачиваетсяПоставщику.УвеличениеОплачивается)      КАК Оплачивается,
		|	0                                                                   КАК КОплате,
		|	0                                                                   КАК КПоступлению,
		|	
		|	УвеличениеОплачиваетсяПоставщику.ХозяйственнаяОперация              КАК ХозяйственнаяОперация,
		|	УвеличениеОплачиваетсяПоставщику.ФормаОплаты                        КАК ФормаОплаты,
		|	&ЗаявкаНаРасходованиеДенежныхСредств                                КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                                        КАК ЗакупкаПоЗаказу,
		|	УвеличениеОплачиваетсяПоставщику.ДатаРегистратора                   КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                                    КАК ДатаПлатежа,
		|	0                                                                   КАК СуммаРегл,
		|	0                                                                   КАК СуммаУпр,
		|	0                                                                   КАК ЗалогЗаТару,
		|	УвеличениеОплачиваетсяПоставщику.СтатьяДвиженияДенежныхСредств      КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                        КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	Неопределено                                                        КАК СвязанныйДокумент,
		|	Неопределено                                                        КАК ВариантОплаты,
		|	УвеличениеОплачиваетсяПоставщику.ВалютаДокумента                    КАК ВалютаДокумента,
		|	Неопределено                                                        КАК КорОбъектРасчетов,
		|	Неопределено                                                        КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов.Организация         КАК Организация,
		|	УвеличениеОплачиваетсяПоставщику.Партнер                            КАК Партнер,
		|	УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов.Контрагент          КАК Контрагент,
		|	УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов.Договор             КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                        КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                        КАК КорПартнер,
		|	Неопределено                                                        КАК КорОрганизация,
		|	Неопределено                                                        КАК КорКонтрагент,
		|	Неопределено                                                        КАК КорДоговор,
		|	Неопределено                                                        КАК КорНаправлениеДеятельности,
		|	УвеличениеОплачиваетсяПоставщику.НомерРегистратора                  КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                               КАК ИдентификаторФинЗаписи,
		|	&Вид                                                                КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)    КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УвеличениеОплачиваетсяПоставщику КАК УвеличениеОплачиваетсяПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка =  УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов.Организация = Аналитика.Организация
		|					И УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|					И УвеличениеОплачиваетсяПоставщику.Партнер = Аналитика.Партнер
		|					И УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УвеличениеОплачиваетсяПоставщику.УвеличениеОплачивается > 0
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеОплачиваетсяПоставщику.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УвеличениеОплачиваетсяПоставщику.ОбъектРасчетов,
		|	УвеличениеОплачиваетсяПоставщику.Партнер,
		|	УвеличениеОплачиваетсяПоставщику.ВалютаВзаиморасчетов,
		|	УвеличениеОплачиваетсяПоставщику.ХозяйственнаяОперация,
		|	УвеличениеОплачиваетсяПоставщику.ФормаОплаты,
		|	&ЗаявкаНаРасходованиеДенежныхСредств,
		|	УвеличениеОплачиваетсяПоставщику.СтатьяДвиженияДенежныхСредств,
		|	УвеличениеОплачиваетсяПоставщику.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УвеличениеОплачиваетсяПоставщику.НомерРегистратора
		|	";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЗаявкаНаРасходованиеДенежныхСредств", ЗаявкаНаРасходованиеДенежныхСредств);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Вид",                                 Вид);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшитьОплачиваетсяПоставщику()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УменьшениеОплачиваетсяПоставщику.ДатаРегистратора                    КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                               КАК ВидДвижения,
		|	
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)                      КАК АналитикаУчетаПоПартнерам,
		|	УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов                      КАК ОбъектРасчетов,
		|	УменьшениеОплачиваетсяПоставщику.ВалютаВзаиморасчетов                КАК Валюта,
		|	
		|	0                                                                    КАК Сумма,
		|	СУММА(УменьшениеОплачиваетсяПоставщику.УменьшениеОплачивается)       КАК Оплачивается,
		|	0                                                                    КАК КОплате,
		|	0                                                                    КАК КПоступлению,
		|	
		|	УменьшениеОплачиваетсяПоставщику.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
		|	УменьшениеОплачиваетсяПоставщику.ФормаОплаты                         КАК ФормаОплаты,
		|	УменьшениеОплачиваетсяПоставщику.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Неопределено                                                         КАК ЗакупкаПоЗаказу,
		|	УменьшениеОплачиваетсяПоставщику.ДатаРегистратора                    КАК ДатаРегистратора,
		|	ДАТАВРЕМЯ(1,1,1)                                                     КАК ДатаПлатежа,
		|	0                                                                    КАК СуммаРегл,
		|	0                                                                    КАК СуммаУпр,
		|	0                                                                    КАК ЗалогЗаТару,
		|	УменьшениеОплачиваетсяПоставщику.СтатьяДвиженияДенежныхСредств       КАК СтатьяДвиженияДенежныхСредств,
		|	Неопределено                                                         КАК РасчетныйДокумент,
		|	//Порядок оплаты
		|	//Порядок зачета по дате платежа
		|	Неопределено                                                         КАК СвязанныйДокумент,
		|	Неопределено                                                         КАК ВариантОплаты,
		|	УменьшениеОплачиваетсяПоставщику.ВалютаДокумента                     КАК ВалютаДокумента,
		|	Неопределено                                                         КАК КорОбъектРасчетов,
		|	Неопределено                                                         КАК КорАналитикаУчетаПоПартнерам,
		|	
		|	УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов.Организация          КАК Организация,
		|	УменьшениеОплачиваетсяПоставщику.Партнер                             КАК Партнер,
		|	УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов.Контрагент           КАК Контрагент,
		|	УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов.Договор              КАК Договор,
		|	НаправленияДеятельности.НаправлениеАналитики                         КАК НаправлениеДеятельности,
		|	
		|	Неопределено                                                         КАК КорПартнер,
		|	Неопределено                                                         КАК КорОрганизация,
		|	Неопределено                                                         КАК КорКонтрагент,
		|	Неопределено                                                         КАК КорДоговор,
		|	Неопределено                                                         КАК КорНаправлениеДеятельности,
		|	УменьшениеОплачиваетсяПоставщику.НомерРегистратора                   КАК НомерРегистратора,
		|	&ИдентификаторНеиспользуемойФинЗаписи                                КАК ИдентификаторФинЗаписи,
		|	""4""                                                                КАК Вид,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)     КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	#УменьшениеОплачиваетсяПоставщику КАК УменьшениеОплачиваетсяПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНаправленияДеятельностиПоставщик КАК НаправленияДеятельности
		|			ПО УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов = НаправленияДеятельности.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|			ПО ДанныеДоговора.Ссылка =  УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов.Организация = Аналитика.Организация
		|					И УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов.Контрагент = Аналитика.Контрагент
		|					И УменьшениеОплачиваетсяПоставщику.Партнер = Аналитика.Партнер
		|					И УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов.Договор = Аналитика.Договор
		|					И НаправленияДеятельности.НаправлениеАналитики = Аналитика.НаправлениеДеятельности
		|ГДЕ
		|	УменьшениеОплачиваетсяПоставщику.УменьшениеОплачивается > 0
		|СГРУППИРОВАТЬ ПО
		|	УменьшениеОплачиваетсяПоставщику.ДатаРегистратора,
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
		|	УменьшениеОплачиваетсяПоставщику.ОбъектРасчетов,
		|	УменьшениеОплачиваетсяПоставщику.Партнер,
		|	УменьшениеОплачиваетсяПоставщику.ВалютаВзаиморасчетов,
		|	УменьшениеОплачиваетсяПоставщику.ХозяйственнаяОперация,
		|	УменьшениеОплачиваетсяПоставщику.ФормаОплаты,
		|	УменьшениеОплачиваетсяПоставщику.ЗаявкаНаРасходованиеДенежныхСредств,
		|	УменьшениеОплачиваетсяПоставщику.СтатьяДвиженияДенежныхСредств,
		|	УменьшениеОплачиваетсяПоставщику.ВалютаДокумента,
		|	НаправленияДеятельности.НаправлениеАналитики,
		|	УменьшениеОплачиваетсяПоставщику.НомерРегистратора
		|	";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ТекстЗапросаВТКурсовВалютДокументов(Операция, Таблицы)
	
	Если Операция = "Продажа" ИЛИ Операция = "ОплатаОтКлиента" ИЛИ Операция = "ВозвратОплатыКлиенту" ИЛИ Операция = "ВозвратТоваров" Тогда
		ТипРасчетов = "Клиент";
	ИначеЕсли Операция = "ОплатаПоставщику" ИЛИ Операция = "Закупка" ИЛИ Операция = "ВозвратОплатыОтПоставщика" ИЛИ Операция = "ВозвратТоваровПоставщику" Тогда
		ТипРасчетов = "Поставщик";
	КонецЕсли;
	
	Если ТипЗнч(Таблицы) = Тип("Массив") Тогда
		ИменаТаблиц = Таблицы;
	Иначе
		ИменаТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Таблицы);
	КонецЕсли;
	
	ТекстВыбрать = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИмяТаблицы.Ссылка                                                       КАК Ссылка,
		|	ИмяТаблицы.ДатаКурса                                                    КАК ДатаКурса,
		|	ИмяТаблицы.Организация                                                  КАК Организация,
		|	ИмяТаблицы.Организация.ВалютаРегламентированногоУчета                   КАК ВалютаРегламентированногоУчета,
		|	ИмяТаблицы.ВалютаДокумента                                              КАК ВалютаДокумента,
		|	ИмяТаблицы.ВалютаВзаиморасчетов                                         КАК ВалютаВзаиморасчетов,
		|	(ИмяТаблицы.ВалютаДокумента = ИмяТаблицы.Организация.ВалютаРегламентированногоУчета
		|			ИЛИ ИмяТаблицы.ВалютаВзаиморасчетов = ИмяТаблицы.Организация.ВалютаРегламентированногоУчета)
		|		И (ИмяТаблицы.ВалютаДокумента = &ВалютаУправленческогоУчета 
		|			ИЛИ ИмяТаблицы.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета)
		|		И ИмяТаблицы.ВалютаДокумента = ИмяТаблицы.ВалютаВзаиморасчетов              КАК КурсыНеТребуются
		|ПОМЕСТИТЬ ВтДанныеДокументов
		|ИЗ
		|	#ИмяТаблицы КАК ИмяТаблицы
		|";
	ТекстВыборкаКурсов = "";
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		ТекстПодзапроса = "";
		
		Если ТекстВыборкаКурсов <> "" Тогда
			ТекстПодзапроса = ТекстПодзапроса + " 
			|
			|ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
		
		ТекстПодзапроса = ТекстПодзапроса + ТекстВыбрать;
		
		Если ИмяТаблицы <> ИменаТаблиц[0] Тогда
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса,"ПОМЕСТИТЬ ВтДанныеДокументов", "");
		КонецЕсли;
		
		ТекстВыборкаКурсов = ТекстВыборкаКурсов + СтрЗаменить(ТекстПодзапроса, "ИмяТаблицы", ИмяТаблицы);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстВыборкаКурсов + "
		|;
		|ВЫБРАТЬ 
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Организация КАК Организация,
		|	ВложенныйЗапрос.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВложенныйЗапрос.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
		|	ВложенныйЗапрос.ДатаКурса КАК ДатаКурса,
		|	МАКСИМУМ(ВложенныйЗапрос.ВалютаДокумента) КАК ВалютаДокумента,
		|	МИНИМУМ(ВложенныйЗапрос.КурсыНеТребуются) КАК КурсыНеТребуются
		|ПОМЕСТИТЬ ВтДанныеДляКурсов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеДокументов.Ссылка КАК Ссылка,
		|		ДанныеДокументов.Организация,
		|		ДанныеДокументов.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
		|		ДанныеДокументов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		ДанныеДокументов.ДатаКурса КАК ДатаКурса,
		|		ДанныеДокументов.ВалютаДокумента КАК ВалютаДокумента,
		|		ДанныеДокументов.КурсыНеТребуются КАК КурсыНеТребуются
		|	ИЗ
		|		ВтДанныеДокументов КАК ДанныеДокументов) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.ДатаКурса,
		|	ВложенныйЗапрос.ВалютаВзаиморасчетов,
		|	ВложенныйЗапрос.ВалютаРегламентированногоУчета
		|;
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.ВалютаДокумента КАК ВалютаДокумента,
		|	ВложенныйЗапрос.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВложенныйЗапрос.Организация КАК Организация,
		|	ВложенныйЗапрос.ДатаКурса КАК ДатаКурса,
		|	ВложенныйЗапрос.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
		|	МАКСИМУМ(ВложенныйЗапрос.ПериодДокументов) КАК ПериодДокументов,
		|	МАКСИМУМ(ВложенныйЗапрос.ПериодРегл) КАК ПериодРегл,
		|	МАКСИМУМ(ВложенныйЗапрос.ПериодУпр) КАК ПериодУпр,
		|	МАКСИМУМ(ВложенныйЗапрос.ПериодРасчеты) КАК ПериодРасчеты
		|ПОМЕСТИТЬ ВтПериодыКурсовДокументов
		|ИЗ
		|	(ВЫБРАТЬ 
		|		ДанныеДляКурсов.Ссылка               КАК Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента      КАК ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		ДанныеДляКурсов.Организация          КАК Организация,
		|		ДанныеДляКурсов.ДатаКурса            КАК ДатаКурса,
		|		ДанныеДляКурсов.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
		|		МАКСИМУМ(Курсы.Период) КАК ПериодДокументов,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРегл,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодУпр,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРасчеты
		|	ИЗ ВтДанныеДляКурсов КАК ДанныеДляКурсов
		|	   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК Курсы
		|			ПО Курсы.Период <= ДанныеДляКурсов.ДатаКурса И 
		|				Курсы.Валюта = ДанныеДляКурсов.ВалютаДокумента И
		|				Курсы.БазоваяВалюта = ДанныеДляКурсов.ВалютаРегламентированногоУчета
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеДляКурсов.Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов,
		|		ДанныеДляКурсов.Организация,
		|		ДанныеДляКурсов.ДатаКурса,
		|		ДанныеДляКурсов.ВалютаРегламентированногоУчета
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ДанныеДляКурсов.Ссылка               КАК Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента      КАК ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		ДанныеДляКурсов.Организация          КАК Организация,
		|		ДанныеДляКурсов.ДатаКурса            КАК ДатаКурса,
		|		ДанныеДляКурсов.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодДокументов,
		|		МАКСИМУМ(Курсы.Период) КАК ПериодРегл,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодУпр,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРасчеты
		|	ИЗ ВтДанныеДляКурсов КАК ДанныеДляКурсов
		|	   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК Курсы
		|			ПО Курсы.Период <= ДанныеДляКурсов.ДатаКурса И 
		|				Курсы.Валюта = ДанныеДляКурсов.ВалютаРегламентированногоУчета И
		|				Курсы.БазоваяВалюта = ДанныеДляКурсов.ВалютаРегламентированногоУчета
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеДляКурсов.Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов,
		|		ДанныеДляКурсов.Организация,
		|		ДанныеДляКурсов.ДатаКурса,
		|		ДанныеДляКурсов.ВалютаРегламентированногоУчета
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ДанныеДляКурсов.Ссылка               КАК Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента      КАК ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		ДанныеДляКурсов.Организация          КАК Организация,
		|		ДанныеДляКурсов.ДатаКурса            КАК ДатаКурса,
		|		ДанныеДляКурсов.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодДокументов,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРегл,
		|		МАКСИМУМ(Курсы.Период) КАК ПериодУпр,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРасчеты
		|	ИЗ ВтДанныеДляКурсов КАК ДанныеДляКурсов
		|	   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК Курсы
		|			ПО Курсы.Период <= ДанныеДляКурсов.ДатаКурса И 
		|				Курсы.Валюта = &ВалютаУправленческогоУчета И
		|				Курсы.БазоваяВалюта = ДанныеДляКурсов.ВалютаРегламентированногоУчета
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеДляКурсов.Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов,
		|		ДанныеДляКурсов.Организация,
		|		ДанныеДляКурсов.ДатаКурса,
		|		ДанныеДляКурсов.ВалютаРегламентированногоУчета
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ 
		|		ДанныеДляКурсов.Ссылка               КАК Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента      КАК ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		ДанныеДляКурсов.Организация          КАК Организация,
		|		ДанныеДляКурсов.ДатаКурса            КАК ДатаКурса,
		|		ДанныеДляКурсов.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
		|		ДАТАВРЕМЯ(1,1,1)					 КАК ПериодДокументов,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодРегл,
		|		ДАТАВРЕМЯ(1,1,1) КАК ПериодУпр,
		|		МАКСИМУМ(Курсы.Период) КАК ПериодРасчеты
		|	ИЗ ВтДанныеДляКурсов КАК ДанныеДляКурсов
		|	   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК Курсы
		|			ПО Курсы.Период <= ДанныеДляКурсов.ДатаКурса И 
		|				Курсы.Валюта = ДанныеДляКурсов.ВалютаВзаиморасчетов И
		|				Курсы.БазоваяВалюта = ДанныеДляКурсов.ВалютаРегламентированногоУчета
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеДляКурсов.Ссылка,
		|		ДанныеДляКурсов.ВалютаДокумента,
		|		ДанныеДляКурсов.ВалютаВзаиморасчетов,
		|		ДанныеДляКурсов.Организация,
		|		ДанныеДляКурсов.ДатаКурса,
		|		ДанныеДляКурсов.ВалютаРегламентированногоУчета) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.ВалютаДокумента,
		|	ВложенныйЗапрос.ВалютаВзаиморасчетов,
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.ДатаКурса,
		|	ВложенныйЗапрос.ВалютаРегламентированногоУчета
		|;
		|ВЫБРАТЬ
		|	ПериодыКурсов.Ссылка                                                         КАК Ссылка,
		|	ПериодыКурсов.Организация                                                    КАК Организация,
		|	ПериодыКурсов.ДатаКурса                                                      КАК ДатаКурса,
		|	ПериодыКурсов.ВалютаВзаиморасчетов                                           КАК ВалютаВзаиморасчетов,
		|	ПериодыКурсов.ВалютаРегламентированногоУчета                                 КАК ВалютаРегламентированногоУчета,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалютДокументов.КурсЧислитель,1) * ЕСТЬNULL(КурсыВалютУпр.КурсЗнаменатель,1) /
		|		(ЕСТЬNULL(КурсыВалютДокументов.КурсЗнаменатель,1) * ЕСТЬNULL(КурсыВалютУпр.КурсЧислитель,1)) КАК ЧИСЛО(31,17)) КАК КоэффициентУпр,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалютДокументов.КурсЧислитель,1) * ЕСТЬNULL(КурсыВалютРегл.КурсЗнаменатель,1) /
		|		(ЕСТЬNULL(КурсыВалютДокументов.КурсЗнаменатель,1) * ЕСТЬNULL(КурсыВалютРегл.КурсЧислитель,1)) КАК ЧИСЛО(31,17)) КАК КоэффициентРегл,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалютДокументов.КурсЧислитель,1) * ЕСТЬNULL(КурсыВалютРасчеты.КурсЗнаменатель,1) /
		|		(ЕСТЬNULL(КурсыВалютДокументов.КурсЗнаменатель,1) * ЕСТЬNULL(КурсыВалютРасчеты.КурсЧислитель,1)) КАК ЧИСЛО(31,17)) КАК КоэффициентВзаиморасчетов
		|ПОМЕСТИТЬ ВтКоэффициентыПересчетаВалют
		|ИЗ
		|	ВтПериодыКурсовДокументов КАК ПериодыКурсов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютДокументов
		|			ПО ПериодыКурсов.ПериодДокументов = КурсыВалютДокументов.Период
		|				И ПериодыКурсов.ВалютаДокумента = КурсыВалютДокументов.Валюта
		|				И ПериодыКурсов.ВалютаРегламентированногоУчета = КурсыВалютДокументов.БазоваяВалюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютРегл
		|			ПО ПериодыКурсов.ПериодРегл = КурсыВалютРегл.Период
		|				И ПериодыКурсов.ВалютаРегламентированногоУчета = КурсыВалютРегл.Валюта
		|				И ПериодыКурсов.ВалютаРегламентированногоУчета = КурсыВалютРегл.БазоваяВалюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютУпр
		|			ПО ПериодыКурсов.ПериодУпр = КурсыВалютУпр.Период
		|				И КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
		|				И ПериодыКурсов.ВалютаРегламентированногоУчета = КурсыВалютУпр.БазоваяВалюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютРасчеты
		|			ПО ПериодыКурсов.ПериодРасчеты = КурсыВалютРасчеты.Период
		|				И ПериодыКурсов.ВалютаВзаиморасчетов = КурсыВалютРасчеты.Валюта
		|				И ПериодыКурсов.ВалютаРегламентированногоУчета = КурсыВалютРасчеты.БазоваяВалюта
		|;
		|УНИЧТОЖИТЬ ВтДанныеДокументов;
		|УНИЧТОЖИТЬ ВтДанныеДляКурсов;
		|УНИЧТОЖИТЬ ВтПериодыКурсовДокументов";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтДанныеДокументов", "ВтДанныеДокументов" + ТипРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтДанныеДляКурсов", "ВтДанныеДляКурсов" + ТипРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтПериодыКурсовДокументов", "ВтПериодыКурсовДокументов" + ТипРасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтКоэффициентыПересчетаВалют", "ВтКоэффициентыПересчетаВалют" + ТипРасчетов);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтНаправленияДеятельности(Операция,ТаблицыИсточники)
	
	Если Операция = "Продажа" ИЛИ Операция = "ОплатаОтКлиента" ИЛИ Операция = "ВозвратОплатыКлиенту" 
		ИЛИ Операция = "ВозвратТоваров" ИЛИ Операция = "ГрафикИсполненияКлиент" ИЛИ Операция = "ЗаказКлиента" 
		ИЛИ Операция = "ЗаявкаНаВозвратОплатыКлиенту" Тогда
		ТипРасчетов = "Клиент";
	ИначеЕсли Операция = "ОплатаПоставщику" ИЛИ Операция = "Закупка" ИЛИ Операция = "ВозвратОплатыОтПоставщика"
		ИЛИ Операция = "ВозвратТоваровПоставщику" ИЛИ Операция = "ЗаказПоставщику" ИЛИ Операция = "ГрафикИсполненияПоставщик"
		ИЛИ Операция = "ЗаявкаНаОплатуПоставщику" Тогда
		ТипРасчетов = "Поставщик";
	КонецЕсли;
	
	ТекстВыбрать = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ИмяПоля КАК ОбъектРасчетов,
		|	&НаправлениеДеятельности КАК НаправлениеДеятельности";
	ТекстИз = "
		|ИЗ
		|	#&ИмяТаблицы КАК &ИмяТаблицы
		|";
	ТекстПоместить = "
		|ПОМЕСТИТЬ ВтНаправленияДокументов";
	ТекстНД = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицыИсточники Цикл
		
		ТекстПодзапроса = "";
		
		Если ТекстНД <> "" Тогда
			ТекстПодзапроса = ТекстПодзапроса + " 
			|
			|ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
		
		ТекстПодзапроса = ТекстПодзапроса + ТекстВыбрать;
		
		Если СтрокаТаблицы = ТаблицыИсточники[0] Тогда
			ТекстПодзапроса = ТекстПодзапроса + ТекстПоместить;
		КонецЕсли;
		
		ТекстПодзапроса = ТекстПодзапроса + ТекстИз;
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ИмяТаблицы", СтрокаТаблицы.Таблица);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ИмяПоля", СтрокаТаблицы.Поле);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&НаправлениеДеятельности", СтрокаТаблицы.Поле + ".НаправлениеДеятельности");
		ТекстНД = ТекстНД + ТекстПодзапроса
		
	КонецЦикла;
	
	Если ТипРасчетов = "Клиент" Тогда
		ТекстЗапроса = ТекстНД + "
			|;
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НаправленияДокументов.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ВЫБОР 
			|		КОГДА ЕСТЬNULL(НаправленияДокументов.НаправлениеДеятельности.УчетДоходов, ЛОЖЬ)
			|			ТОГДА НаправленияДокументов.НаправлениеДеятельности
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
			|	КОНЕЦ                                         КАК НаправлениеАналитики
			|ПОМЕСТИТЬ ВтНаправленияДеятельностиКлиент
			|ИЗ
			|	ВтНаправленияДокументов КАК НаправленияДокументов
			|;
			|УНИЧТОЖИТЬ ВтНаправленияДокументов";
	Иначе
		ТекстЗапроса = ТекстНД + "
			|;
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НаправленияДокументов.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ВЫБОР 
			|		КОГДА ЕСТЬNULL(НаправленияДокументов.НаправлениеДеятельности.УчетРасчетовСПоставщиками, ЛОЖЬ)
			|			ТОГДА НаправленияДокументов.НаправлениеДеятельности
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
			|	КОНЕЦ                                         КАК НаправлениеАналитики
			|ПОМЕСТИТЬ ВтНаправленияДеятельностиПоставщик
			|ИЗ
			|	ВтНаправленияДокументов КАК НаправленияДокументов
			|;
			|УНИЧТОЖИТЬ ВтНаправленияДокументов";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтНаправленияДокументов", "ВтНаправленияДокументов" + ТипРасчетов);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция УменьшениеПланаОплатыКлиентаПриПродаже()
	
	ТекстЗапросаРасшифровка = "
	|
	|ВЫБРАТЬ
	|	УменьшениеПланаОтгрузкиКлиенту.Ссылка                       КАК Ссылка,
	|	УменьшениеПланаОтгрузкиКлиенту.Организация                  КАК Организация,
	|	УменьшениеПланаОтгрузкиКлиенту.Партнер                      КАК Партнер,
	|	ВЫБОР 
	|		КОГДА УменьшениеПланаОтгрузкиКлиенту.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|			ТОГДА УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи.ОбъектРасчетов
	|		ИНАЧЕ УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор.ОбъектРасчетов
	|	КОНЕЦ                                                       КАК ОбъектРасчетов,
	|	УменьшениеПланаОтгрузкиКлиенту.ВалютаВзаиморасчетов         КАК ВалютаВзаиморасчетов,
	|	0                                                           КАК СуммаВзаиморасчетов,
	|	0                                                           КАК Сумма,
	|	УменьшениеПланаОтгрузкиКлиенту.СуммаВзаиморасчетов          КАК КОплате,
	|	ДАТАВРЕМЯ(1,1,1)                                            КАК ДатаКурса,
	|	УменьшениеПланаОтгрузкиКлиенту.ДатаРегистратора             КАК ДатаРегистратора,
	|	УменьшениеПланаОтгрузкиКлиенту.НомерРегистратора            КАК НомерРегистратора,
	|	УменьшениеПланаОтгрузкиКлиенту.ВалютаДокумента              КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)  КАК ХозяйственнаяОперация,
	|	УменьшениеПланаОтгрузкиКлиенту.ЗаказПродажи                 КАК ЗаказПродажи,
	|	ДАТАВРЕМЯ(1,1,1)                                            КАК ДатаПлатежа
	|ИЗ
	|	#УменьшениеПланаОтгрузкиКлиенту КАК УменьшениеПланаОтгрузкиКлиенту
	|ГДЕ
	|	(УменьшениеПланаОтгрузкиКлиенту.НакладнаяПоЗаказам И НЕ УменьшениеПланаОтгрузкиКлиенту.СверхЗаказа 
	|		ИЛИ УменьшениеПланаОтгрузкиКлиенту.ОбъектРасчетов.Договор.ЗаданГрафикИсполнения)
	|	И УменьшениеПланаОтгрузкиКлиенту.СуммаВзаиморасчетов <> 0
	|	И УменьшениеПланаОтгрузкиКлиенту.ПорядокРасчетов В (ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным),
	|														ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	УвеличениеЗадолженностиКлиента.Ссылка                       КАК Ссылка,
	//|	УменьшениеПланаОтгрузкиКлиенту.Организация                  КАК Организация,
	//|	УвеличениеЗадолженностиКлиента.ОбъектРасчетов               КАК ОбъектРасчетов,
	//|	УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов         КАК ВалютаВзаиморасчетов,
	//|	0                                                           КАК СуммаВзаиморасчетов,
	//|	0                                                           КАК Сумма,
	//|	УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов          КАК КОплате,
	//|	ДАТАВРЕМЯ(1,1,1)                                            КАК ДатаКурса,
	//|	УвеличениеЗадолженностиКлиента.ДатаРегистратора             КАК ДатаРегистратора,
	//|	УвеличениеЗадолженностиКлиента.НомерРегистратора            КАК НомерРегистратора,
	//|	УвеличениеЗадолженностиКлиента.ВалютаДокумента              КАК ВалютаДокумента,
	//|	УвеличениеЗадолженностиКлиента.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	//|	УвеличениеЗадолженностиКлиента.ЗаказПродажи                 КАК ЗаказПродажи,
	//|	УвеличениеЗадолженностиКлиента.ДатаПлатежа                  КАК ДатаПлатежа
	//|ИЗ
	//|	#УвеличениеЗадолженностиКлиента КАК УвеличениеЗадолженностиКлиента
	//|ГДЕ
	//|	УвеличениеЗадолженностиКлиента.НакладнаяПоЗаказам
	//|	И УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов <> 0
	//|	И УвеличениеЗадолженностиКлиента.ПорядокРасчетов В (ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам),
	//|														ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
	|";
	
	Возврат ТекстЗапросаРасшифровка;
	
КонецФункции

Функция УменьшениеПланаОплатыПоставщикуПриПоставке()
	
	ТекстЗапросаРасшифровка = "
	|
	|ВЫБРАТЬ
	|	УменьшениеПланаПоставки.Ссылка                               КАК Ссылка,
	|	УменьшениеПланаПоставки.Организация                          КАК Организация,
	|	УменьшениеПланаПоставки.Партнер                              КАК Партнер,
	|	УменьшениеПланаПоставки.ЗаказЗакупки.ОбъектРасчетов          КАК ОбъектРасчетов,
	|	УменьшениеПланаПоставки.ВалютаВзаиморасчетов                 КАК ВалютаВзаиморасчетов,
	|	0                                                            КАК СуммаВзаиморасчетов,
	|	0                                                            КАК Сумма,
	|	УменьшениеПланаПоставки.СуммаВзаиморасчетов                  КАК КОплате,
	|	ДАТАВРЕМЯ(1,1,1)                                             КАК ДатаКурса,
	|	УменьшениеПланаПоставки.ДатаРегистратора                     КАК ДатаРегистратора,
	|	УменьшениеПланаПоставки.НомерРегистратора                    КАК НомерРегистратора,
	|	УменьшениеПланаПоставки.ВалютаДокумента                      КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)   КАК ХозяйственнаяОперация,
	|	Неопределено                                                 КАК ЗаказЗакупки,
	|	ДАТАВРЕМЯ(1,1,1)                                             КАК ДатаПлатежа
	|ИЗ
	|	#УменьшениеПланаПоставки КАК УменьшениеПланаПоставки
	|ГДЕ
	|	(НЕ УменьшениеПланаПоставки.СверхЗаказа ИЛИ НЕ УменьшениеПланаПоставки.НакладнаяПоЗаказам)
	|	И УменьшениеПланаПоставки.СуммаВзаиморасчетов <> 0
	|	И УменьшениеПланаПоставки.ПорядокРасчетов В (ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным),
	|														ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	|";
	
	Возврат ТекстЗапросаРасшифровка;
	
КонецФункции

Функция ТекстВтПереносаРасчетов(ИмяТаблицы = "")
	
	ТекстЗапросаРасшифровка = "
	|
	|ВЫБРАТЬ
	|	УвеличениеЗадолженностиКлиента.Ссылка                                    КАК Ссылка,
	|	УвеличениеЗадолженностиКлиента.Организация                               КАК Организация,
	|	УвеличениеЗадолженностиКлиента.Партнер                                   КАК Партнер,
	|	
	|	УвеличениеЗадолженностиКлиента.ОбъектРасчетов                            КАК ОбъектРасчетовПриемник,
	|	УвеличениеЗадолженностиКлиента.ОбъектРасчетов                            КАК ОбъектРасчетовИсточник,
	|	УвеличениеЗадолженностиКлиента.ВалютаВзаиморасчетов                      КАК ВалютаВзаиморасчетов,
	|	УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов                       КАК СуммаВзаиморасчетов,
	|	УвеличениеЗадолженностиКлиента.ВалютаДокумента                           КАК ВалютаДокумента,
	|	УвеличениеЗадолженностиКлиента.Сумма                                     КАК Сумма,
	|
	|	УвеличениеЗадолженностиКлиента.ДатаКурса                                 КАК ДатаКурса,
	|	УвеличениеЗадолженностиКлиента.ДатаРегистратора                          КАК ДатаРегистратора,
	|	УвеличениеЗадолженностиКлиента.НомерРегистратора                         КАК НомерРегистратора,
	|	УвеличениеЗадолженностиКлиента.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация
	|ИЗ
	|	#УвеличениеЗадолженностиКлиента КАК УвеличениеЗадолженностиКлиента
	|ГДЕ
	|	(УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Организация <> УвеличениеЗадолженностиКлиента.Организация
	|		ИЛИ УвеличениеЗадолженностиКлиента.ОбъектРасчетов.Партнер <> УвеличениеЗадолженностиКлиента.Партнер)
	|	И УвеличениеЗадолженностиКлиента.СуммаВзаиморасчетов <> 0
	|";
		
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ТекстЗапросаРасшифровка = СтрЗаменить(ТекстЗапросаРасшифровка, "УвеличениеЗадолженностиКлиента", ИмяТаблицы);
	КонецЕсли;
	
	Возврат ТекстЗапросаРасшифровка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПоискОснованийИДокументовОплаты

// Устанавливает необходимые параметры для исполнения запросов по данным взаиморасчетов
//
// Параметры:
//  Запрос           - Запрос - 
//  ПараметрыПоиска  - см. ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты
Процедура ПостобработкаЗапроса_ПоискОснованийИДокументовОплаты(Запрос, ПараметрыПоиска)
	
	// Подготовка данных
	
	// - дата окончания
	Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.НаДату) Тогда
		ДатаОкончания        = Дата(3000, 1, 1);
		ДатаОкончанияВключая = Неопределено;
	Иначе
		ДатаОкончания        = ПараметрыПоиска.НаДату;
		ДатаОкончанияВключая = Новый Граница(ДатаОкончания);
	КонецЕсли;
	
	// - организации
	Если ЗначениеЗаполнено(ПараметрыПоиска.Организации) Тогда
		Организации                 = ПараметрыПоиска.Организации;
		ВключитьОтборПоОрганизациям = Истина;
	Иначе
		Организации                 = Неопределено;
		ВключитьОтборПоОрганизациям = Ложь;
	КонецЕсли;
	
	// - инициализация таблицы документов для отбора
	мТиповДокументовОтбора = Новый Массив;
	
	Для каждого Документ Из ПараметрыПоиска.Документы Цикл
		мТиповДокументовОтбора.Добавить(ТипЗнч(Документ));
	КонецЦикла;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ДокументОтбора", Новый ОписаниеТипов(мТиповДокументовОтбора));
	
	Для каждого Документ Из ПараметрыПоиска.Документы Цикл
		новСтрока = ТаблицаДокументов.Добавить();
		новСтрока.ДокументОтбора = Документ;
	КонецЦикла;
	
	// - типы документов оплаты
	
	мТиповДокументовОплатыВходящие = Новый Массив;
	мТиповДокументовОплатыВходящие.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	мТиповДокументовОплатыВходящие.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	мТиповДокументовОплатыВходящие.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	мТиповДокументовОплатыВходящие.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"));
	мТиповДокументовОплатыВходящие.Добавить(Тип("ДокументСсылка.ВзаимозачетЗадолженности"));
	
	мТиповДокументовОплатыИсходящие = Новый Массив;
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.ВзаимозачетЗадолженности"));
	
	// - типы оснований (объектов) оплаты
	
	мТиповОснованийОплатыВходящие = Новый Массив;
	мТиповОснованийОплатыВходящие.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	мТиповОснованийОплатыВходящие.Добавить(Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
	мТиповОснованийОплатыВходящие.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	
	мТиповОснованийОплатыИсходящие = Новый Массив;
	мТиповОснованийОплатыИсходящие.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	мТиповОснованийОплатыИсходящие.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	мТиповОснованийОплатыИсходящие.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	
	
	// Установка параметров
	
	Запрос.УстановитьПараметр("Организации",                        Организации);
	Запрос.УстановитьПараметр("ДатаОкончания",                      ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаОкончанияВключая",               ДатаОкончанияВключая);
	Запрос.УстановитьПараметр("ТаблицаДокументов",                  ТаблицаДокументов);
	Запрос.УстановитьПараметр("ВключитьОтборПоОрганизациям",        ВключитьОтборПоОрганизациям);
	Запрос.УстановитьПараметр("ТолькоАвансы",                       ПараметрыПоиска.ТолькоАвансы);
	Запрос.УстановитьПараметр("ОграничитьТипыДокументовОплаты",     ПараметрыПоиска.ОграничитьТипыДокументовОплаты);
	Запрос.УстановитьПараметр("ОграничитьТипыОснованийОплаты",      ПараметрыПоиска.ОграничитьТипыОснованийОплаты);
	Запрос.УстановитьПараметр("мТиповДокументовОплатыВходящие",     мТиповДокументовОплатыВходящие);
	Запрос.УстановитьПараметр("мТиповДокументовОплатыИсходящие",    мТиповДокументовОплатыИсходящие);
	Запрос.УстановитьПараметр("мТиповОснованийОплатыВходящие",      мТиповОснованийОплатыВходящие);
	Запрос.УстановитьПараметр("мТиповОснованийОплатыИсходящие",     мТиповОснованийОплатыИсходящие);
	
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов",
		ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	
	// Обработка текста запроса
	
	// - Текст отбора по документам
	
	ИмяПоляОтбора    = ПараметрыПоиска.ПараметрыОтбораПоТаблицеДокументов.ИмяПоля;
	ИмяТаблицыОтбора = ПараметрыПоиска.ПараметрыОтбораПоТаблицеДокументов.ИмяТаблицыОтбора;
	
	ЗаданОтборПоВременнойТаблице = ЗначениеЗаполнено(ИмяТаблицыОтбора) И ЗначениеЗаполнено(ИмяПоляОтбора);
	
	Если НЕ ЗаданОтборПоВременнойТаблице Тогда
		
		ИмяТаблицыОтбора = "ТаблицаОтбораОснованийИДокументовОплаты";
		ИмяПоляОтбора    = "ДокументОтбора";
		
		ТекстЗапросаСозданияТаблицыОтбора = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокументов.ДокументОтбора КАК ДокументОтбора
		|ПОМЕСТИТЬ ТаблицаОтбораОснованийИДокументовОплаты_Предварительная
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументов.ДокументОтбора,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ТаблицаОтбораОснованийИДокументовОплаты
		|ИЗ
		|	ТаблицаОтбораОснованийИДокументовОплаты_Предварительная КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО ТаблицаДокументов.ДокументОтбора = ОбъектыРасчетов.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтбора
		|;
		|
		|УНИЧТОЖИТЬ ТаблицаОтбораОснованийИДокументовОплаты_Предварительная
		|";
		
	Иначе
		
		ТекстЗапросаСозданияТаблицыОтбора = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИмяПоляДокумента КАК ДокументОтбора,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ТаблицаОтбораОснованийИДокументовОплаты
		|ИЗ
		|	ИмяТаблицыОтбораОснованийИДокументовОплаты КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ПО ТаблицаДокументов.ИмяПоляДокумента = ОбъектыРасчетов.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтбора
		|";
		
	КонецЕсли;
	
	ТекстЗапросаУничтоженияТаблицыОтбора = "УНИЧТОЖИТЬ ТаблицаОтбораОснованийИДокументовОплаты";
	
	Запрос.Текст = ТекстЗапросаСозданияТаблицыОтбора
					+ ОбщегоНазначения.РазделительПакетаЗапросов() + Запрос.Текст
					+ ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаУничтоженияТаблицыОтбора;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыОтбораОснованийИДокументовОплаты", ИмяТаблицыОтбора);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляДокумента",                           ИмяПоляОтбора);
	
	Если ПараметрыПоиска.РежимПоиска = 1 Тогда
		
		// Поля соединения
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ДокументРегистратор_РежимПоиска2_РасчетныйДокумент",
			"Расчеты.ДокументРегистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ОбъектРасчетов_РежимПоиска2_ДокументРегистратор",
			"Расчеты.ОбъектРасчетов = ТаблицаОтбораОснованийИДокументовОплаты.ОбъектРасчетов");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_РасчетныйДокумент_РежимПоиска2_ДокументРегистратор",
			"Расчеты.РасчетныйДокумент = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_Регистратор_РежимПоиска2_РасчетныйДокумент",
			"Расчеты.Регистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ЗаказКлиента_РежимПоиска2_Регистратор",
			"Расчеты.ЗаказКлиента = ТаблицаОтбораОснованийИДокументовОплаты.ОбъектРасчетов");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ЗаказПоставщику_РежимПоиска2_Регистратор",
			"Расчеты.ЗаказПоставщику = ТаблицаОтбораОснованийИДокументовОплаты.ОбъектРасчетов");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_РасчетныйДокумент_РежимПоиска2_Регистратор",
			"Расчеты.РасчетныйДокумент = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
		
		
		// поля выборки
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеОснованиеОплаты_ОбъектРасчетов",
			"ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеОснованиеОплаты_ЗаказКлиента",
			"ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеОснованиеОплаты_ЗаказПоставщику",
			"ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
		
	ИначеЕсли ПараметрыПоиска.РежимПоиска = 2 Тогда
		
		// Поля соединения
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ДокументРегистратор_РежимПоиска2_РасчетныйДокумент",
			"Расчеты.РасчетныйДокумент = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ОбъектРасчетов_РежимПоиска2_ДокументРегистратор",
			"Расчеты.ДокументРегистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_РасчетныйДокумент_РежимПоиска2_ДокументРегистратор",
			"Расчеты.ДокументРегистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_Регистратор_РежимПоиска2_РасчетныйДокумент",
			"Расчеты.РасчетныйДокумент = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ЗаказКлиента_РежимПоиска2_Регистратор",
			"Расчеты.Регистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ЗаказПоставщику_РежимПоиска2_Регистратор",
			"Расчеты.Регистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_РасчетныйДокумент_РежимПоиска2_Регистратор",
			"Расчеты.Регистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
		
		
		// поля выборки
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеОснованиеОплаты_ОбъектРасчетов",
			"Расчеты.ОбъектРасчетов.Объект");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеОснованиеОплаты_ЗаказКлиента",
			"Расчеты.ЗаказКлиента.Объект");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеОснованиеОплаты_ЗаказПоставщику",
			"Расчеты.ЗаказПоставщику.Объект");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвансыПоДаннымВзаиморасчетов

// Устанавливает необходимые параметры для исполнения запросов по данным взаиморасчетов
//
// Параметры:
//  Запрос           - Запрос - 
//  ПараметрыРасчета - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.ДатаОкончания) Тогда
		ДатаОкончания        = Дата(3000, 1, 1);
		ДатаОкончанияВключая = Неопределено;
	Иначе
		ДатаОкончания        = ПараметрыРасчета.ДатаОкончания;
		ДатаОкончанияВключая = Новый Граница(ДатаОкончания);
	КонецЕсли;
	
	ПустаяДата        = '00010101';
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.Организации) Тогда
		Организации                 = ПараметрыРасчета.Организации;
	Иначе
		Организации                 = Неопределено;
	КонецЕсли;
	
	РасчетныйДокумент = ?(ЗначениеЗаполнено(ПараметрыРасчета.РасчетныйДокумент),
							ПараметрыРасчета.РасчетныйДокумент, Неопределено);
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.ПараметрыОтбораПоРасчетномуДокументу.ИмяТаблицыОтбора)
		ИЛИ ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		ВключитьОтборПоРасчетномуДокументу = Истина;
	Иначе
		ВключитьОтборПоРасчетномуДокументу = Ложь;
	КонецЕсли;
	
	ТипыДокументовВозврата_ПолученныеАвансы = Новый Массив;
	ТипыДокументовВозврата_ПолученныеАвансы.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	ТипыДокументовВозврата_ПолученныеАвансы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Запрос.УстановитьПараметр("ДатаНачала",           ПараметрыРасчета.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",        ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаОкончанияВключая", ДатаОкончанияВключая);
	Запрос.УстановитьПараметр("СоздатьПустуюТаблицу", ПараметрыРасчета.СоздатьПустуюТаблицу);
	Запрос.УстановитьПараметр("ПустаяДата",           ПустаяДата);
	Запрос.УстановитьПараметр("Организации",          Организации);
	Запрос.УстановитьПараметр("РасчетныйДокумент",    РасчетныйДокумент);
	Запрос.УстановитьПараметр("ПустойОбъектРасчетов", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("УчестьРезервированиеАвансов",        ПараметрыРасчета.УчестьРезервированиеАвансов);
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов",     ПараметрыРасчета.НоваяАрхитектураВзаиморасчетов);
	Запрос.УстановитьПараметр("ВключитьОтборПоРасчетномуДокументу", ВключитьОтборПоРасчетномуДокументу);
	Запрос.УстановитьПараметр("ВключитьОтборПоОрганизациям",        ПараметрыРасчета.ВключитьОтборПоОрганизациям);
	Запрос.УстановитьПараметр("ТипыДокументовВозврата_ПолученныеАвансы", ТипыДокументовВозврата_ПолученныеАвансы);
	
КонецПроцедуры

// Переопределяет индексы запроса
// 
// Параметры:
// 	Запрос - Запрос -
// 	ПараметрыРасчета - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
// 	ИмяТаблицы - Строка - имя временной таблицы, в которой меняем порядок индексов
Процедура УстановитьПоляИндексов(Запрос, ПараметрыРасчета, ИмяТаблицы)
	
	мПоляИндексов = ПараметрыРасчета.ПоляИндексовВручную;
	
	Если НЕ ЗначениеЗаполнено(мПоляИндексов) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для каждого Пакет Из СхемаЗапроса.ПакетЗапросов Цикл
		Если Пакет.ТаблицаДляПомещения = ИмяТаблицы Тогда
			
			Пакет.Порядок.Очистить();
			Для каждого ПолеИндекса из мПоляИндексов Цикл
				Пакет.Индекс.Добавить(ПолеИндекса);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Обработка запроса в целях отбора по расчетному документу
// 
// Параметры:
// 	Запрос - Запрос -
// 	ПараметрыРасчета - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
// 	ПараметрыПутей   - см. ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены
//
Процедура ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей)
	
	мТекстовОтборПоПараметрам = Новый Массив;
	
	
	ИмяПоляОтбора    = ПараметрыРасчета.ПараметрыОтбораПоРасчетномуДокументу.ИмяПоля;
	ИмяТаблицыОтбора = ПараметрыРасчета.ПараметрыОтбораПоРасчетномуДокументу.ИмяТаблицыОтбора;
	
	ПолныйПуть = ПараметрыПутей.ПолныйПуть_РасчетныйДокумент;
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбора) Тогда
		
		ШаблонТекста = "%1 В
		|			(ВЫБРАТЬ
		|				%2 КАК Ссылка
		|			ИЗ
		|				%3 КАК Т
		|			)
		|";
		
		мТекстовОтборПоПараметрам.Добавить(СтрШаблон(ШаблонТекста, ПолныйПуть, ИмяПоляОтбора, ИмяТаблицыОтбора));
		
	Иначе
		
		ШаблонТекста = "(НЕ &ВключитьОтборПоРасчетномуДокументу ИЛИ %1 В (&РасчетныйДокумент))";
		мТекстовОтборПоПараметрам.Добавить(СтрШаблон(ШаблонТекста, ПолныйПуть));
		
	КонецЕсли;
	
	
	ТекстОтборПоПараметрам = СтрСоединить(мТекстовОтборПоПараметрам, " И ");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ПараметрыПутей.ТекстЗамены, ТекстОтборПоПараметрам);
	
КонецПроцедуры

// Инициализировать параметры для указания путей к полям и тексту замены отбора по параметрам
//
// Возвращаемое значение:
//  Структура - содержит:
//  	* ТекстЗамены                  - Строка - Заменяемый текст в запросе
//  	* ПолныйПуть_РасчетныйДокумент - Строка - Полный путь к расчетному документу
//
Функция ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ТекстЗамены", "&ТекстОтборПоПараметрам");
	
	СтруктураПараметров.Вставить("ПолныйПуть_РасчетныйДокумент", "РасчетныйДокумент");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ЗаполнитьСвойстваПараметров(Приемник, Источник)
	
	ТипПриемника  = ТипЗнч(Приемник);
	ТипИсточника  = ТипЗнч(Источник);
	
	Если ТипПриемника = Тип("Структура") И ТипИсточника = Тип("Структура") Тогда
			Для каждого ЭлементПриемника Из Приемник Цикл
				ЗначениеИсточника = Неопределено;
				Если Источник.Свойство(ЭлементПриемника.Ключ, ЗначениеИсточника) Тогда
					ЗаполнитьСвойстваПараметров(Приемник[ЭлементПриемника.Ключ], ЗначениеИсточника);
				КонецЕсли;
			КонецЦикла;
	ИначеЕсли ТипПриемника <> Тип("Структура") И ТипИсточника <> Тип("Структура") Тогда
		Приемник = ОбщегоНазначения.СкопироватьРекурсивно(Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
