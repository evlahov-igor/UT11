
#Область ПрограммныйИнтерфейс

// Подготавливает структуру настроек подключения к сервису
//
// Возвращаемое значение:
//    Структура:
//     Логин - Строка
//     Пароль - Строка.
//
Функция ИнициализироватьНастройкиПодключения() Экспорт
	
	Возврат Новый Структура("Логин, Пароль");
	
КонецФункции

// Сохраняет настройки подключения к сервису
// 
// Параметры:
//     Настройки - Структура - см. ИнтеграцияСмартвей.ИнициализироватьНастройкиПодключения
//
Процедура СохранитьНастройкиПодключения(Настройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("Смартвей", Настройки.Логин, "Логин");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("Смартвей", Настройки.Пароль, "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Извлекает настройки подключения к сервису
// 
// Возвращаемое значение:
//     Структура - см. ИнтеграцияСмартвей.ИнициализироватьНастройкиПодключения
//
Функция НастройкиПодключения() Экспорт
	
	Настройки = ИнициализироватьНастройкиПодключения();
	
	УстановитьПривилегированныйРежим(Истина);
	Настройки.Логин = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("Смартвей", "Логин");
	Настройки.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("Смартвей", "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(Настройки);
	
КонецФункции

// Проверяет настройки подключения к сервису
//
// Параметры:
//     Настройки - Структура - см. ИнтеграцияСмартвей.ИнициализироватьНастройкиПодключения
//
// Возвращаемое значение:
//     Булево - результат проверки
// 
Функция ПроверитьПодключение(Настройки) Экспорт
	
	Результат = ВыполнитьЗапросКСервису(Настройки, ЗапросПроверитьПодключение());
	
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("error") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Выполняет получение данных сервиса: электронных билетов и бронирований, а также статусов заявок на командировку
//
Процедура ПолучитьДанныеСмартвей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеДанныхСмартвей);
	
	УстановитьПривилегированныйРежим(Истина);
	ПолучитьДанныеБронирования();
	ПолучитьСтатусыЗаявок(РегистрыСведений.СостоянияБронированияЗаявокНаКомандировку.ЗаявкиВСтатусеОтправлена());
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Выполняет получение из сервиса электронных билетов и бронирований
//
Процедура ПолучитьДанныеБронирования() Экспорт
	
	НастройкиПодключения = НастройкиПодключения();
	
	ДанныеАгента = Неопределено;
	ОтветСервиса = ВыполнитьЗапросКСервису(НастройкиПодключения, ЗапросДанныеОбАгенте());
	Если ОтветСервиса.Свойство("result") Тогда
		ДанныеАгента = ОтветСервиса["result"];
	КонецЕсли;
	
	ВерсияДанныхСмартвей = Константы.ВерсияДанныхСмартвей;
	
	ОтветСервиса = ВыполнитьЗапросКСервису(
		НастройкиПодключения, ЗапросНовыеДанныеБронирования(ВерсияДанныхСмартвей.Получить()));

	НомерПоследнегоЗапроса = Неопределено;
	Если ОтветСервиса.Свойство("result")
		И ОтветСервиса["result"].Свойство("last_version_id") Тогда
		НомерПоследнегоЗапроса = ОтветСервиса["result"]["last_version_id"];
	КонецЕсли;
	
	Бронирования = Неопределено;
	Если ОтветСервиса.Свойство("result") Тогда
		Бронирования = ПреобразоватьОтветОБронированиях(ОтветСервиса["result"]);
	КонецЕсли;
	
	Для каждого СтрокаБронирования Из Бронирования Цикл
		ИдентификаторБронирования = СтрокаБронирования.ИдентификаторБронирования;
		ОтветСервиса = ВыполнитьЗапросКСервису(НастройкиПодключения, ЗапросВаучерУслуги(ИдентификаторБронирования));
		Если ОтветСервиса.Свойство("result")
			И ОтветСервиса["result"].Свойство("content") Тогда
			ДанныеВаучера = ОтветСервиса["result"].content;
			Если ЗначениеЗаполнено(ДанныеВаучера) Тогда
				СтрокаБронирования.ВаучерУслуги = ПоместитьВоВременноеХранилище(Base64Значение(ДанныеВаучера));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Бронирования <> Неопределено Тогда
		ОбработатьБронирования(Бронирования, ДанныеАгента);
		ОбновитьДокументы(Бронирования);
		СоздатьДокументы(Бронирования);
	КонецЕсли;
	
	Если НомерПоследнегоЗапроса <> Неопределено Тогда
		ВерсияДанныхСмартвей.Установить(НомерПоследнегоЗапроса);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет получение из сервиса электронных билетов и бронирований по заявке на командировку
//
// Параметры:
//     ЗаявкаСсылка - ДокументСсылка.ЗаявкаНаКомандировку - Заявка на командировку
//
Процедура ПолучитьДанныеБронированияПоЗаявке(ЗаявкаСсылка) Экспорт
	
	НастройкиПодключения = НастройкиПодключения();
	
	ДанныеАгента = Неопределено;
	ОтветСервиса = ВыполнитьЗапросКСервису(НастройкиПодключения, ЗапросДанныеОбАгенте());
	Если ОтветСервиса.Свойство("result") Тогда
		ДанныеАгента = ОтветСервиса["result"];
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапросКСервису(
		НастройкиПодключения, ЗапросДанныеБронированияПоЗаявке(ИдентификаторЗаявки(ЗаявкаСсылка)));
	
	Бронирования = Неопределено;
	Если ОтветСервиса.Свойство("result") Тогда
		Бронирования = ПреобразоватьОтветОБронированиях(ОтветСервиса["result"]);
	КонецЕсли;
	
	Если Бронирования <> Неопределено Тогда
		Для каждого СтрокаБронирования Из Бронирования Цикл
			ИдентификаторБронирования = СтрокаБронирования.ИдентификаторБронирования;
			ОтветСервиса = ВыполнитьЗапросКСервису(НастройкиПодключения, ЗапросВаучерУслуги(ИдентификаторБронирования));
			Если ОтветСервиса.Свойство("result")
				И ОтветСервиса["result"].Свойство("content") Тогда
				ДанныеВаучера = ОтветСервиса["result"].content;
				Если ЗначениеЗаполнено(ДанныеВаучера) Тогда
					СтрокаБронирования.ВаучерУслуги = ПоместитьВоВременноеХранилище(Base64Значение(ДанныеВаучера));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Бронирования <> Неопределено Тогда
		ОбработатьБронирования(Бронирования, ДанныеАгента);
		ОбновитьДокументы(Бронирования);
		СоздатьДокументы(Бронирования);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет получение из сервиса статусов заявок на командировку
//
// Параметры:
//     Заявки - ДокументСсылка.ЗаявкаНаКомандировку - Заявка на командировку, Массив из ДокументСсылка.ЗаявкаНаКомандировку
//
Процедура ПолучитьСтатусыЗаявок(Заявки) Экспорт
	
	ИдентификаторыЗаявок = Новый Массив;
	
	Если ТипЗнч(Заявки) = Тип("Массив") Тогда
		Для каждого ЗаявкаСсылка Из Заявки Цикл
			ИдентификаторыЗаявок.Добавить(ИдентификаторЗаявки(ЗаявкаСсылка));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Заявки) = Тип("ДокументСсылка.ЗаявкаНаКомандировку") Тогда
		ИдентификаторыЗаявок.Добавить(ИдентификаторЗаявки(Заявки));
	КонецЕсли;
	
	Если Не ИдентификаторыЗаявок.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапросКСервису(НастройкиПодключения(), ЗапросСтатусЗаявок(ИдентификаторыЗаявок));
	
	Если ОтветСервиса.Свойство("result") Тогда
		
		РезультатЗапроса = ОтветСервиса["result"];
		
		Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
			Для каждого КлючИЗначение Из РезультатЗапроса Цикл
				ЗаявкаСсылка = ЗаявкаПоИдентификатору(КлючИЗначение.Ключ);
				Если ЗаявкаСсылка <> Неопределено Тогда
					ЗаписатьСостояниеБронированияЗаявки(ЗаявкаСсылка, КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет отправку в сервис заявок на командировку
//
// Параметры:
//     Заявки - ДокументСсылка.ЗаявкаНаКомандировку
//            - Массив из ДокументСсылка.ЗаявкаНаКомандировку
//     ДанныеЗаявок - РезультатЗапроса
//
Процедура ОтправитьЗаявки(Заявки, ДанныеЗаявок) Экспорт
	
	Результат = Новый Массив;
	
	ЗаявкиСсылки = Новый Массив;
	Если ТипЗнч(Заявки) = Тип("Массив") Тогда
		ЗаявкиСсылки = Заявки;
	ИначеЕсли ТипЗнч(Заявки) = Тип("ДокументСсылка.ЗаявкаНаКомандировку") Тогда
		ЗаявкиСсылки.Добавить(Заявки);
	КонецЕсли;
	
	Для каждого ЗаявкаСсылка Из ЗаявкиСсылки Цикл
		ЗапросОтправитьЗаявку = ЗапросОтправитьЗаявку(ЗаявкаСсылка, ДанныеЗаявок);
		Если ПроверитьЗапросОтправкиЗаявки(ЗапросОтправитьЗаявку, ЗаявкаСсылка) Тогда
			ОтветСервиса = ВыполнитьЗапросКСервису(НастройкиПодключения(), ЗапросОтправитьЗаявку);
			Если ОтветСервиса.Свойство("result") Тогда
				ЗаписатьСостояниеБронированияЗаявки(ЗаявкаСсылка, ОтветСервиса["result"]);
			ИначеЕсли ОтветСервиса.Свойство("error") Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Ошибка при проверке ответа от сервиса.
						|Код ошибки: %1,
						|Сообщение: %2.'"), 
					ОтветСервиса["error"]["code"], 
					ОтветСервиса["error"]["message"]);
				ВызватьИсключение(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет в сервисе отмену заявки на командировку
Процедура ОтменитьЗаявку(Заявка) Экспорт
	
	ОтветСервиса = ВыполнитьЗапросКСервису(НастройкиПодключения(), ЗапросОтменитьЗаявку(Заявка));
	
	Если ОтветСервиса.Свойство("result") Тогда
		
		РезультатЗапроса = ОтветСервиса["result"];
		
		Если ТипЗнч(РезультатЗапроса) = Тип("Строка")
			И РезультатЗапроса = "canceled" Тогда
				ЗаписатьСостояниеБронированияЗаявки(Заявка, РезультатЗапроса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаДанных

Функция ПреобразоватьОтветОБронированиях(ДанныеСмартвей)
	
	Бронирования = ИнициализироватьБронирования();
	
	СтавкиНДС = Новый Соответствие;
	СтавкиНДС.Вставить("10%", Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС.Вставить("18%", Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС.Вставить("20%", Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС.Вставить("0%", Перечисления.СтавкиНДС.НДС0);
	СтавкиНДС.Вставить("Без НДС", Перечисления.СтавкиНДС.БезНДС);
	
	Инд = 0;
	
	Для каждого ОписаниеПоездки Из ДанныеСмартвей["trips"] Цикл
		Для каждого ОписаниеБронирования Из ОписаниеПоездки["items"] Цикл
			Для каждого ОписаниеВерсии Из ОписаниеБронирования["versions"] Цикл
				
				НоваяСтрока = Бронирования.Добавить();
				НоваяСтрока.Сегменты = ИнициализироватьСегменты();
				НоваяСтрока.Транзакции = ИнициализироватьТранзакции();
				НоваяСтрока.ФизическиеЛица = ИнициализироватьДанныеФизическихЛиц();
				
				НоваяСтрока.НомерСтроки                = Инд;
				НоваяСтрока.ИдентификаторВерсии        = ОписаниеВерсии["version_id"];
				НоваяСтрока.ИдентификаторБронирования  = ОписаниеВерсии["item_id"];
				
				НоваяСтрока.ИдентификаторЗаявки        = ОписаниеБронирования["request_id"];
				Если ЗначениеЗаполнено(НоваяСтрока.ИдентификаторЗаявки) Тогда
					НоваяСтрока.ЗаполненИдентификаторЗаявки = Истина;
				КонецЕсли;
				
				НоваяСтрока.Номер                      = ОписаниеВерсии["number"];
				НоваяСтрока.ДатаСоздания               = ОписаниеВерсии["event_date"];
				НоваяСтрока.ИННОрганизации             = ОписаниеВерсии["company"]["inn"];
				НоваяСтрока.Перевозчик                 = ОписаниеВерсии["carrier"];
				НоваяСтрока.ДатаНачала                 = ОписаниеВерсии["checkin_date"];
				НоваяСтрока.ДатаОкончания              = ОписаниеВерсии["checkout_date"];
				НоваяСтрока.Длительность               = ОписаниеВерсии["travel_time"];
				
				Если ОписаниеВерсии["service_type"] = "Air" Тогда
					
					НоваяСтрока.ТипУслуги = Перечисления.ТипыУслугБронирования.Авиабилет;
					
					Для каждого ОписаниеУслуги Из ОписаниеВерсии["info"] Цикл
						Для каждого ОписаниеСегмента Из ОписаниеУслуги["segments"] Цикл
						
							НовыйСегмент = НоваяСтрока.Сегменты.Добавить();
							НовыйСегмент.ДатаОтправления   = ОписаниеСегмента["date_depart"];
							НовыйСегмент.СтранаОтправления = ОписаниеСегмента["place_depart"]["country"];
							НовыйСегмент.ГородОтправления  = ОписаниеСегмента["place_depart"]["city"];
							НовыйСегмент.МестоОтправления  = ОписаниеСегмента["place_depart"]["place"];
							НовыйСегмент.ДатаПрибытия      = ОписаниеСегмента["date_arrive"];
							НовыйСегмент.СтранаПрибытия    = ОписаниеСегмента["place_arrive"]["country"];
							НовыйСегмент.ГородПрибытия     = ОписаниеСегмента["place_arrive"]["city"];
							НовыйСегмент.МестоПрибытия     = ОписаниеСегмента["place_arrive"]["place"];
						КонецЦикла;
					КонецЦикла;
					
				ИначеЕсли ОписаниеВерсии["service_type"] = "Train" Тогда
					
					НоваяСтрока.ТипУслуги = Перечисления.ТипыУслугБронирования.ЖДБилет;
					НоваяСтрока.ПунктОтправления = ОписаниеВерсии["info"]["station_depart"];
					НоваяСтрока.ПунктПрибытия    = ОписаниеВерсии["info"]["station_arrive"];
					
				ИначеЕсли ОписаниеВерсии["service_type"] = "Hotel" Тогда
					
					НоваяСтрока.ТипУслуги = Перечисления.ТипыУслугБронирования.Отель;
					НоваяСтрока.НазваниеОтеля    = ОписаниеВерсии["info"]["hotel_name"];
					НоваяСтрока.Звезды           = ОписаниеВерсии["info"]["stars"];
					НоваяСтрока.Город            = ОписаниеВерсии["info"]["city"];
					НоваяСтрока.КатегорияНомера  = ОписаниеВерсии["info"]["room_category"];
					
				ИначеЕсли ОписаниеВерсии["service_type"] = "Transfer" Тогда
					
					НоваяСтрока.ТипУслуги = Перечисления.ТипыУслугБронирования.Трансфер;
					НоваяСтрока.ПунктОтправления = ОписаниеВерсии["info"]["place_depart"]["place"];
					НоваяСтрока.ПунктПрибытия    = ОписаниеВерсии["info"]["place_arrive"]["place"];
					НоваяСтрока.Класс            = ОписаниеВерсии["info"]["car_class"];
					
				ИначеЕсли ОписаниеВерсии["service_type"] = "AeroExpress" Тогда
					
					НоваяСтрока.ТипУслуги = Перечисления.ТипыУслугБронирования.Трансфер;
					НоваяСтрока.ПунктОтправления = ОписаниеВерсии["service_type"];
				КонецЕсли;
				
				Для каждого ОписаниеТранзакции Из ОписаниеВерсии["transaction_details"] Цикл
					
					НоваяТранзакция = НоваяСтрока.Транзакции.Добавить();
					НоваяТранзакция.НДС           = ИнициализироватьНДС(); // ТаблицаЗначений
					НоваяТранзакция.Сборы         = ИнициализироватьСборы(); // ТаблицаЗначений
					
					НоваяТранзакция.ТипТранзакции = ОписаниеТранзакции["type"];
					НоваяТранзакция.Сумма         = Макс(ОписаниеТранзакции["amount"], -ОписаниеТранзакции["amount"]);
					
					Для каждого ОписаниеНДС Из ОписаниеТранзакции["vats"] Цикл
						НовыйНДС = НоваяТранзакция.НДС.Добавить();
						НовыйНДС.СтавкаНДС = ОписаниеНДС["vat_rate"];
						ЗначениеСтавкиНДС = СтавкиНДС.Получить(НовыйНДС.СтавкаНДС);
						Если ЗначениеСтавкиНДС <> Неопределено Тогда
							НовыйНДС.СтавкаНДССсылка =
								УчетНДСРФКлиентСерверПовтИсп.СтавкаНДСПоЗначениюПеречисления(ЗначениеСтавкиНДС);
						Иначе
							НовыйНДС.СтавкаНДССсылка =
								УчетНДСРФКлиентСерверПовтИсп.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС.БезНДС);
						КонецЕсли;
						НовыйНДС.СуммаНДС  = Макс(ОписаниеНДС["vat_amount"], -ОписаниеНДС["vat_amount"]);
					КонецЦикла;
					
					Для каждого ОписаниеСбора Из ОписаниеТранзакции["fees"] Цикл
						НовыйСбор = НоваяТранзакция.Сборы.Добавить();
						НовыйСбор.Сумма      = Макс(ОписаниеСбора["amount"], -ОписаниеСбора["amount"]);
						НовыйСбор.Содержание = ОписаниеСбора["description"];
					КонецЦикла;
				КонецЦикла;
				
				Для каждого ОписаниеЛица Из ОписаниеВерсии["travellers"] Цикл
					НовоеЛицо = НоваяСтрока.ФизическиеЛица.Добавить();
					НовоеЛицо.ИдентификаторФизЛица = ОписаниеЛица["external_id"];
					НовоеЛицо.Фамилия              = ОписаниеЛица["surname"];
					НовоеЛицо.Имя                  = ОписаниеЛица["name"];
					НовоеЛицо.Отчество             = ОписаниеЛица["patronymic"];
				КонецЦикла;
				
				Если НоваяСтрока.ФизическиеЛица.Количество() Тогда
					НоваяСтрока.ИдентификаторФизЛица = НоваяСтрока.ФизическиеЛица[0].ИдентификаторФизЛица;
					Если ЗначениеЗаполнено(НоваяСтрока.ИдентификаторФизЛица) Тогда
						НоваяСтрока.ЗаполненИдентификаторФизЛица = Истина;
					КонецЕсли;
					НоваяСтрока.ФизЛицоФамилия   = НоваяСтрока.ФизическиеЛица[0]["Фамилия"];
					НоваяСтрока.ФизЛицоИмя       = НоваяСтрока.ФизическиеЛица[0]["Имя"];
					НоваяСтрока.ФизЛицоОтчество  = НоваяСтрока.ФизическиеЛица[0]["Отчество"];
				КонецЕсли;
				
				Инд = Инд + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Бронирования;
	
КонецФункции

Процедура ОбработатьБронирования(Бронирования, ДанныеАгента)
	
	ЗаполнитьСсылкиНаДокументы(Бронирования);
	ЗаполнитьСсылкиНаОрганизацию(Бронирования);
	ЗаполнитьСсылкиНаАгента(Бронирования, ДанныеАгента);
	ЗаполнитьСсылкиНаПеревозчиков(Бронирования);
	ЗаполнитьСсылкиНаЗаявки(Бронирования);
	ЗаполнитьСсылкиНаСотрудников(Бронирования);
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаДокументы(ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ИдентификаторБронирования
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	ТаблицаДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.Бронирование КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.ИдентификаторСмартвей = ТаблицаДокументов.ИдентификаторБронирования
	|ГДЕ
	|	НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДокумента = ТаблицаДокументов.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.БронированиеСсылка = Выборка.Ссылка;
			СтрокаДокумента.ДокументНайденВБазе = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаОрганизацию(ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ИННОрганизации
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Ссылка
	|ИЗ
	|	ТаблицаДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.ИНН = ТаблицаДокументов.ИННОрганизации
	|ГДЕ
	|	НЕ ДанныеСправочника.Ссылка ЕСТЬ NULL
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДокумента = ТаблицаДокументов.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.ОрганизацияСсылка = Выборка.Ссылка;
			СтрокаДокумента.ВалютаСсылка =
				ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СтрокаДокумента.ОрганизацияСсылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаАгента(ТаблицаДокументов, ДанныеАгента)
	
	Если ДанныеАгента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИННАгента = СокрЛП(ДанныеАгента["inn"]);
	
	Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ИННАгента);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		СтруктураНаименования = ДенежныеСредстваСерверЛокализация.НаименованиеОрганизации(ДанныеАгента["full_company_name"]);
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Наименование       = СтруктураНаименования.СокращенноеНаименование;
		Контрагент.НаименованиеПолное = ДанныеАгента["full_company_name"];
		Контрагент.ИНН                = ИННАгента;
		Контрагент.КПП                = СокрЛП(ДанныеАгента["kpp"]);
		Контрагент.СтранаРегистрации  = Справочники.СтраныМира.Россия;
		Контрагент.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		Агент = Справочники.Партнеры.СоздатьЭлемент();
		Агент.Поставщик             = Истина;
		Агент.ПрочиеОтношения       = Истина;
		Агент.ДатаРегистрации       = ТекущаяДатаСеанса();
		Агент.Комментарий           = НСтр("ru = '#Создан автоматически при импорте данных бронирования командировок'");
		Агент.Наименование          = ДанныеАгента["company_name"];
		Агент.НаименованиеПолное    = ДанныеАгента["full_company_name"];
		Агент.ЮрФизЛицо             = Перечисления.КомпанияЧастноеЛицо.Компания;
		Агент.Записать();
		
		Контрагент.Партнер = Агент.Ссылка;
		Контрагент.Записать();
		
		ДоговорыСАгентом = Новый Соответствие;
		
		КопияТаблицы = ТаблицаДокументов.Скопировать();
		КопияТаблицы.Свернуть("ОрганизацияСсылка");
		СписокОрганизаций = КопияТаблицы.ВыгрузитьКолонку("ОрганизацияСсылка");
		Для каждого Организация Из СписокОрганизаций Цикл
			
			Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Договор.Организация            = Организация;
			Договор.Контрагент             = Контрагент.Ссылка;
			Договор.Партнер                = Агент.Ссылка;
			Договор.Статус                 = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
			Договор.ХозяйственнаяОперация  = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			Договор.ТипДоговора            = Перечисления.ТипыДоговоров.СПоставщиком;
			Договор.ПорядокРасчетов        = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
			Договор.ВалютаВзаиморасчетов   = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
			Договор.НалогообложениеНДС     = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Договор.Комментарий            = НСтр("ru = '#Создан автоматически при импорте данных бронирования командировок'");
			Договор.Наименование           = НСтр("ru = '#Бронирование'");
			Договор.Записать();
			
			ДоговорыСАгентом.Вставить(Организация, Договор.Ссылка);
		КонецЦикла;
		
		Для каждого СтрокаДокумента Из ТаблицаДокументов Цикл
			СтрокаДокумента.КонтрагентАгентСсылка = Контрагент.Ссылка;
			СтрокаДокумента.АгентСсылка           = Агент.Ссылка;
			СтрокаДокумента.ДоговорСсылка         = ДоговорыСАгентом.Получить(СтрокаДокумента.ОрганизацияСсылка);
		КонецЦикла;
		
	Иначе
		Агент = Контрагент.Партнер;
		
		Запрос = Новый Запрос;
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки,
		|	ТаблицаДокументов.ОрганизацияСсылка
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|";
		
		Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	ДанныеСправочника.Ссылка КАК ДоговорСсылка
		|ИЗ
		|	ТаблицаДокументов
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеСправочника
		|	ПО
		|		ДанныеСправочника.Организация = ТаблицаДокументов.ОрганизацияСсылка
		|		И ДанныеСправочника.Контрагент = &Контрагент
		|		И ДанныеСправочника.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|ГДЕ
		|	НЕ ДанныеСправочника.Ссылка ЕСТЬ NULL
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокументов.НомерСтроки,
		|	ДанныеСправочника.Ссылка
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеСправочника.Ссылка) = 1
		|";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаДокумента = ТаблицаДокументов.Найти(Выборка.НомерСтроки, "НомерСтроки");
			Если СтрокаДокумента <> Неопределено Тогда
				СтрокаДокумента.ДоговорСсылка = Выборка.ДоговорСсылка;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаДокумента Из ТаблицаДокументов Цикл
			СтрокаДокумента.КонтрагентАгентСсылка = Контрагент.Ссылка;
			СтрокаДокумента.АгентСсылка           = Агент.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаПеревозчиков(ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Перевозчик
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Перевозчик КАК Перевозчик,
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ДанныеСправочника.Партнер КАК ПартнерСсылка,
	|	НЕ ДанныеСправочника.Ссылка ЕСТЬ NULL КАК ПеревозчикНайден
	|ИЗ
	|	ТаблицаДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Наименование = ТаблицаДокументов.Перевозчик
	|		ИЛИ ДанныеСправочника.НаименованиеПолное = ТаблицаДокументов.Перевозчик
	|		ИЛИ ДанныеСправочника.НаименованиеМеждународное = ТаблицаДокументов.Перевозчик
	|";
	
	ПеревозчикиКонтрагенты = Новый Соответствие;
	Перевозчики = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПеревозчикНайден Тогда
			ПеревозчикиКонтрагенты.Вставить(Выборка.Перевозчик, Выборка.Ссылка);
			Перевозчики.Вставить(Выборка.Перевозчик, Выборка.ПартнерСсылка);
			
		Иначе
			КонтрагентПеревозчик = Справочники.Контрагенты.СоздатьЭлемент();
			
			КонтрагентПеревозчик.Наименование         = Выборка.Перевозчик;
			КонтрагентПеревозчик.НаименованиеПолное   = Выборка.Перевозчик;
			КонтрагентПеревозчик.СтранаРегистрации    = Справочники.СтраныМира.Россия;
			КонтрагентПеревозчик.ЮрФизЛицо            = Перечисления.ЮрФизЛицо.ЮрЛицо;
			
			Перевозчик = Справочники.Партнеры.СоздатьЭлемент();
			Перевозчик.Поставщик             = Истина;
			Перевозчик.ДатаРегистрации       = ТекущаяДатаСеанса();
			Перевозчик.Комментарий           = НСтр("ru = '#Создан автоматически при импорте данных бронирования командировок'");
			Перевозчик.Наименование          = Выборка.Перевозчик;
			Перевозчик.НаименованиеПолное    = Выборка.Перевозчик;
			Перевозчик.ЮрФизЛицо             = Перечисления.КомпанияЧастноеЛицо.Компания;
			Перевозчик.Записать();
			Перевозчики.Вставить(Выборка.Перевозчик, Перевозчик.Ссылка);
			
			КонтрагентПеревозчик.Партнер = Перевозчик.Ссылка;
			КонтрагентПеревозчик.Записать();
			
			ПеревозчикиКонтрагенты.Вставить(Выборка.Перевозчик, КонтрагентПеревозчик.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДокумента Из ТаблицаДокументов Цикл
		СтрокаДокумента.КонтрагентПеревозчикСсылка = ПеревозчикиКонтрагенты.Получить(СтрокаДокумента.Перевозчик);
		СтрокаДокумента.ПеревозчикСсылка           = Перевозчики.Получить(СтрокаДокумента.Перевозчик);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаЗаявки(ТаблицаДокументов)
	
	Отбор = Новый Структура("ЗаполненИдентификаторЗаявки", Истина);
	СтрокиКОбработке = ТаблицаДокументов.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКОбработке Цикл
		ЗаявкаСсылка = ЗаявкаПоИдентификатору(СтрокаДокумента.ИдентификаторЗаявки);
		Если ОбщегоНазначения.СсылкаСуществует(ЗаявкаСсылка) Тогда
			СтрокаДокумента.ЗаявкаСсылка = ЗаявкаСсылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаСотрудников(ТаблицаДокументов)
	
	Отбор = Новый Структура("ЗаполненИдентификаторФизЛица", Истина);
	СтрокиКОбработке = ТаблицаДокументов.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКОбработке Цикл
		Попытка
			ФизЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаДокумента.ИдентификаторФизЛица));
			Если ОбщегоНазначения.СсылкаСуществует(ФизЛицоСсылка) Тогда
				СтрокаДокумента.ФизЛицоСсылка = ФизЛицоСсылка;
			Иначе
				СтрокаДокумента.ЗаполненИдентификаторФизЛица = Ложь;
			КонецЕсли;
		Исключение
			СтрокаДокумента.ЗаполненИдентификаторФизЛица = Ложь;
			
			ИмяСобытия = НСтр("ru = 'Обращение к сервису Smartway'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Сотрудник %1 %2 %3 не найден по идентификатору %4.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаДокумента.ФизЛицоФамилия, СтрокаДокумента.ФизЛицоИмя, СтрокаДокумента.ФизЛицоОтчество, СтрокаДокумента.ИдентификаторФизЛица);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЗаполненИдентификаторФизЛица", Ложь);
	СтрокиКОбработке = ТаблицаДокументов.НайтиСтроки(Отбор);
	ТаблицаКОбработке = ТаблицаДокументов.Скопировать(СтрокиКОбработке, "НомерСтроки, ФизЛицоФамилия, ФизЛицоИмя, ФизЛицоОтчество");
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаКОбработке.НомерСтроки,
	|	ТаблицаКОбработке.ФизЛицоФамилия,
	|	ТаблицаКОбработке.ФизЛицоИмя,
	|	ТаблицаКОбработке.ФизЛицоОтчество
	|ПОМЕСТИТЬ ТаблицаКОбработке
	|ИЗ
	|	&ТаблицаКОбработке КАК ТаблицаКОбработке
	|";
	
	Запрос.УстановитьПараметр("ТаблицаКОбработке", ТаблицаКОбработке);
	Запрос.Выполнить();
	
	ПроверкаПоНаименованию = (Метаданные.Справочники.ФизическиеЛица.Реквизиты.Найти("Фамилия") = Неопределено);
	
	Если ПроверкаПоНаименованию Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаКОбработке.НомерСтроки КАК НомерСтроки,
		|	ДанныеСправочника.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаКОбработке
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ФизическиеЛица КАК ДанныеСправочника
		|	ПО
		|		ДанныеСправочника.Наименование ПОДОБНО ""%"" + ТаблицаКОбработке.ФизЛицоФамилия + ""%""
		|		И ДанныеСправочника.Наименование ПОДОБНО ""%"" + ТаблицаКОбработке.ФизЛицоИмя + ""%""
		|		И ДанныеСправочника.Наименование ПОДОБНО ""%"" + ТаблицаКОбработке.ФизЛицоОтчество + ""%""
		|";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаКОбработке.НомерСтроки КАК НомерСтроки,
		|	ДанныеСправочника.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаКОбработке
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.ФизическиеЛица КАК ДанныеСправочника
		|	ПО
		|		ДанныеСправочника.Фамилия = ТаблицаКОбработке.ФизЛицоФамилия
		|		И ДанныеСправочника.Имя = ТаблицаКОбработке.ФизЛицоИмя
		|		И ДанныеСправочника.Отчество = ТаблицаКОбработке.ФизЛицоОтчество
		|ГДЕ
		|	НЕ ДанныеСправочника.Ссылка ЕСТЬ NULL
		|";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДокумента = ТаблицаДокументов.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.ФизЛицоСсылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДокументы(ДокументыКЗагрузке)
	
	Отбор = Новый Структура("ДокументНайденВБазе", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Копия = ДокументыКЗагрузке.Скопировать(СтрокиКЗагрузке, "БронированиеСсылка");
	Копия.Свернуть("БронированиеСсылка");
	
	Для каждого СтрокаКопии Из Копия Цикл
		
		ДокументОбъект = СтрокаКопии.БронированиеСсылка.ПолучитьОбъект();
		ДокументОбъект.Операции.Очистить();
		
		Отбор = Новый Структура("БронированиеСсылка", СтрокаКопии.БронированиеСсылка);
		СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
		Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
			ЗаполнитьБронирование(ДокументОбъект, СтрокаДокумента);
		КонецЦикла;
		
		ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументы(ДокументыКЗагрузке)
	
	СозданныеБронирования = Новый Соответствие;
	
	Отбор = Новый Структура("ДокументНайденВБазе", Ложь);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		ДокументОбъект = СозданныеБронирования.Получить(СтрокаДокумента.ИдентификаторБронирования);
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы.Бронирование.СоздатьДокумент();
			ДокументОбъект.УстановитьСсылкуНового(Документы.Бронирование.ПолучитьСсылку());
			СозданныеБронирования.Вставить(СтрокаДокумента.ИдентификаторБронирования, ДокументОбъект);
		КонецЕсли;
		
		ЗаполнитьБронирование(ДокументОбъект, СтрокаДокумента);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из СозданныеБронирования Цикл
		ЗаписатьОбъект(КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи)
	
	ЭтоНовыйДокумент = ОбъектДляЗаписи.ЭтоНовый();
	
	Попытка
		Если ОбъектДляЗаписи.ПроверитьЗаполнение() Тогда
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		НазваниеОбъекта = Строка(ОбъектДляЗаписи);
		ТекстСообщения  = СтрШаблон(НСтр("ru = '%1%2. Произошли ошибки при записи документа.'"),
			Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
			?(ЭтоНовыйДокумент, " " + НСтр("ru = 'не создан'"), " " + НСтр("ru = 'не записан'")));
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ТекстОшибки = НСтр("ru = '%1
			|%2'");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Данные.Изменение'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, ОбъектДляЗаписи.Метаданные(),
			?(ЭтоНовыйДокумент, "", ОбъектДляЗаписи.Ссылка),
			СтрШаблон(ТекстОшибки,
				ОписаниеОшибки.Описание,
				?(ЭтоНовыйДокумент, ТекстСообщения, НСтр("ru = 'Произошли ошибки при записи документа.'", ОбщегоНазначения.КодОсновногоЯзыка()))));
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьБронирование(ДокументОбъект, СтрокаДокумента)
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Или СтрокаДокумента.ДатаСоздания < ДокументОбъект.Дата Тогда
		ДокументОбъект.Дата = СтрокаДокумента.ДатаСоздания;
	КонецЕсли;
	
	ДокументОбъект.ИдентификаторСмартвей = СтрокаДокумента.ИдентификаторБронирования;
	
	Если СтрокаДокумента.ТипУслуги = Перечисления.ТипыУслугБронирования.Авиабилет
		Или СтрокаДокумента.ТипУслуги = Перечисления.ТипыУслугБронирования.ЖДБилет Тогда
		ДокументОбъект.ТипБронирования = Перечисления.ТипыБронирования.ЭлектронныйБилет;
	Иначе
		ДокументОбъект.ТипБронирования = Перечисления.ТипыБронирования.Бронирование;
	КонецЕсли;
	
	ДокументОбъект.ТипУслуги                = СтрокаДокумента.ТипУслуги;
	ДокументОбъект.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.БронированиеЧерезАгента;
	ДокументОбъект.НомерБилета              = СтрокаДокумента.Номер;
	Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = СтрокаДокумента.ДатаСоздания;
	КонецЕсли;
	ДокументОбъект.ДокументОснование        = СтрокаДокумента.ЗаявкаСсылка;
	ДокументОбъект.Организация              = СтрокаДокумента.ОрганизацияСсылка;
	ДокументОбъект.Перевозчик               = СтрокаДокумента.ПеревозчикСсылка;
	ДокументОбъект.КонтрагентПеревозчик     = СтрокаДокумента.КонтрагентПеревозчикСсылка;
	ДокументОбъект.Агент                    = СтрокаДокумента.АгентСсылка;
	ДокументОбъект.КонтрагентАгент          = СтрокаДокумента.КонтрагентАгентСсылка;
	ДокументОбъект.Договор                  = СтрокаДокумента.ДоговорСсылка;
	ДокументОбъект.Сотрудник                = СтрокаДокумента.ФизЛицоСсылка;
	
	ДокументОбъект.ДатаОтправления          = СтрокаДокумента.ДатаНачала;
	ДокументОбъект.ДатаПрибытия             = СтрокаДокумента.ДатаОкончания;
	
	ДокументОбъект.Валюта                   = СтрокаДокумента.ВалютаСсылка;
	
	// Детали поездки строкой
	Если СтрокаДокумента.ТипУслуги = Перечисления.ТипыУслугБронирования.ЖДБилет
		Или СтрокаДокумента.ТипУслуги = Перечисления.ТипыУслугБронирования.Трансфер Тогда
		
		ДокументОбъект.ДеталиПоездки = СтрокаДокумента.ПунктОтправления + " " + СтрокаДокумента.ПунктПрибытия;
		
	ИначеЕсли СтрокаДокумента.ТипУслуги = Перечисления.ТипыУслугБронирования.Авиабилет Тогда
		
		СегментыСтроками = Новый Массив;
		Для каждого Сегмент Из СтрокаДокумента.Сегменты Цикл
			СоставСегмента = Новый Массив;
			СоставСегмента.Добавить(Строка(Сегмент.ДатаОтправления));
			СоставСегмента.Добавить(Сегмент.СтранаОтправления);
			СоставСегмента.Добавить(Сегмент.ГородОтправления);
			СоставСегмента.Добавить(Сегмент.МестоОтправления);
			СоставСегмента.Добавить(Строка(Сегмент.ДатаПрибытия));
			СоставСегмента.Добавить(Сегмент.СтранаПрибытия);
			СоставСегмента.Добавить(Сегмент.ГородПрибытия);
			СоставСегмента.Добавить(Сегмент.МестоПрибытия);
			СегментыСтроками.Добавить(СтрСоединить(СоставСегмента, " "));
		КонецЦикла;
		
		ДокументОбъект.ДеталиПоездки = СтрСоединить(СегментыСтроками, Символы.ПС);
		
	ИначеЕсли СтрокаДокумента.ТипУслуги = Перечисления.ТипыУслугБронирования.Отель Тогда
		
		ДокументОбъект.ДеталиПоездки = СтрокаДокумента.Город + " " + СтрокаДокумента.НазваниеОтеля + " "
			+ СтрокаДокумента.Звезды + " " + СтрокаДокумента.КатегорияНомера;
	КонецЕсли;
	
	// Операции
	Для каждого СтрокаТранзакции Из СтрокаДокумента.Транзакции Цикл
		
		Если СтрокаТранзакции.ТипТранзакции = "Penalty" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТранзакции.ТипТранзакции = "Booking" Тогда
			ТипОперации = Перечисления.ТипыОперацийСБилетами.Покупка;
		ИначеЕсли СтрокаТранзакции.ТипТранзакции = "Surcharge" Тогда
			ТипОперации = Перечисления.ТипыОперацийСБилетами.Доплата;
		ИначеЕсли СтрокаТранзакции.ТипТранзакции = "Return" Тогда
			ТипОперации = Перечисления.ТипыОперацийСБилетами.Возврат;
		КонецЕсли;
		
		СтрокаОперации = ДокументОбъект.Операции.Добавить();
		СтрокаОперации.ТипОперации                  = ТипОперации;
		СтрокаОперации.Дата                         = СтрокаДокумента.ДатаСоздания;
		СтрокаОперации.Сумма                        = СтрокаТранзакции.Сумма;
		СтрокаОперации.ИдентификаторВерсииСмартвей  = СтрокаДокумента.ИдентификаторВерсии;
		СтрокаОперации.СуммаНДС                     = СтрокаТранзакции.НДС.Итог("СуммаНДС");
		
		Если СтрокаТранзакции.НДС.Количество() = 1 Тогда
			СтрокаОперации.СтавкаНДС = СтрокаТранзакции.НДС[0].СтавкаНДССсылка;
		КонецЕсли;
		
		СтрокаОперации.Сумма = СтрокаОперации.Сумма - СтрокаТранзакции.Сборы.Итог("Сумма");
	КонецЦикла;
	
	СтрокиШтрафов = Новый Массив;
	Для каждого СтрокаТранзакции Из СтрокаДокумента.Транзакции Цикл // Штрафы добавляются к имеющимся строкам
		
		Если СтрокаТранзакции.ТипТранзакции <> "Penalty" Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборВозвратов = Новый Структура("ТипОперации, Дата, ИдентификаторВерсииСмартвей",
			Перечисления.ТипыОперацийСБилетами.Возврат, НачалоДня(СтрокаДокумента.ДатаСоздания), СтрокаДокумента.ИдентификаторВерсии);
		СтрокиВозвратов = ДокументОбъект.Операции.НайтиСтроки(ОтборВозвратов);
		
		Если СтрокиВозвратов.Количество() = 1 Тогда
			СтрокиВозвратов[0].СуммаШтрафа = СтрокаТранзакции.Сумма - СтрокаТранзакции.Сборы.Итог("Сумма");
			СтрокиШтрафов.Добавить(СтрокиВозвратов[0]);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполнения = Новый Структура("Организация, Сотрудник, ТипУслуги");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДокументОбъект);
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ДокументОбъект, ДанныеЗаполнения);
	
	Если СтрокиШтрафов.Количество() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	Документ.Бронирование.Операции КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.СуммаШтрафа > 0
		|	И ДанныеДокумента.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийСБилетами.Возврат)
		|	И ДанныеДокумента.Ссылка.Организация = &Организация
		|	И ДанныеДокумента.Ссылка.Подразделение = &Подразделение
		|	И ДанныеДокумента.Ссылка.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокумента.Ссылка.Дата УБЫВ
		|";
		
		Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("Подразделение", ДокументОбъект.Подразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Для каждого СтрокаШтрафа Из СтрокиШтрафов Цикл
				ЗаполнитьЗначенияСвойств(СтрокаШтрафа, Выборка,,
					"ТипОперации, Дата, Сумма, СтавкаНДС, СуммаНДС, СуммаНеОблагаемаяНДС, СуммаШтрафа, ИдентификаторВерсииСмартвей, ИдентификаторСтроки, Комментарий")
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	// Файлы
	Если ЗначениеЗаполнено(СтрокаДокумента.ВаучерУслуги)
		И ЭтоАдресВременногоХранилища(СтрокаДокумента.ВаучерУслуги) Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			ДокументСсылка = ДокументОбъект.Ссылка;
		Иначе
			ДокументСсылка = ДокументОбъект.ПолучитьСсылкуНового();
		КонецЕсли;
		
		ИмяФайла = СтрШаблон(НСтр("ru = 'Ваучер услуги %1'"), ЗаменитьНедопустимыеСимволы(СтрокаДокумента.Номер));
		ФайлНайден = Ложь;
		НайденныйФайл = Неопределено;
		
		Файлы = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ДокументСсылка, Файлы);
		
		Для каждого ФайлСсылка Из Файлы Цикл
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "Наименование") = ИмяФайла Тогда
				ФайлНайден = Истина;
				НайденныйФайл = ФайлСсылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ФайлНайден Тогда
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", СтрокаДокумента.ВаучерУслуги);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			РаботаСФайлами.ОбновитьФайл(НайденныйФайл, ИнформацияОФайле);
		Иначе
			ПараметрыДобавленияФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыДобавленияФайла.ВладелецФайлов = ДокументСсылка;
			ПараметрыДобавленияФайла.ИмяБезРасширения = ИмяФайла;
			ПараметрыДобавленияФайла.РасширениеБезТочки = "pdf";
			РаботаСФайлами.ДобавитьФайл(ПараметрыДобавленияФайла, СтрокаДокумента.ВаучерУслуги);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьБронирования()
	
	Бронирования = Новый ТаблицаЗначений;
	Бронирования.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Бронирования.Колонки.Добавить("ИдентификаторВерсии", Новый ОписаниеТипов("Число"));
	
	Бронирования.Колонки.Добавить("ИдентификаторЗаявки", Новый ОписаниеТипов("Строка"));
	Бронирования.Колонки.Добавить("ЗаявкаСсылка", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаКомандировку"));
	Бронирования.Колонки.Добавить("ЗаполненИдентификаторЗаявки", Новый ОписаниеТипов("Булево"));
	
	Бронирования.Колонки.Добавить("ИдентификаторБронирования", Новый ОписаниеТипов("Число"));
	Бронирования.Колонки.Добавить("БронированиеСсылка", Новый ОписаниеТипов("ДокументСсылка.Бронирование"));
	Бронирования.Колонки.Добавить("ТипУслуги", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУслугБронирования"));
	Бронирования.Колонки.Добавить("ВаучерУслуги", Новый ОписаниеТипов("Строка"));
	
	Бронирования.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	Бронирования.Колонки.Добавить("ДатаСоздания", Новый ОписаниеТипов("Дата"));
	Бронирования.Колонки.Добавить("ИННОрганизации", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Бронирования.Колонки.Добавить("ОрганизацияСсылка", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Бронирования.Колонки.Добавить("АгентСсылка", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Бронирования.Колонки.Добавить("КонтрагентАгентСсылка", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Бронирования.Колонки.Добавить("ДоговорСсылка", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Бронирования.Колонки.Добавить("ВалютаСсылка", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Бронирования.Колонки.Добавить("Перевозчик", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Бронирования.Колонки.Добавить("ПеревозчикСсылка", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Бронирования.Колонки.Добавить("КонтрагентПеревозчикСсылка", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Бронирования.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Бронирования.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Бронирования.Колонки.Добавить("Длительность", Новый ОписаниеТипов("Число")); // в минутах
	// Авиа
	Бронирования.Колонки.Добавить("Сегменты", Новый ОписаниеТипов("ТаблицаЗначений"));
	// ЖД и Трансфер
	Бронирования.Колонки.Добавить("ПунктОтправления", Новый ОписаниеТипов("Строка"));
	Бронирования.Колонки.Добавить("ПунктПрибытия", Новый ОписаниеТипов("Строка"));
	// Отель
	Бронирования.Колонки.Добавить("НазваниеОтеля", Новый ОписаниеТипов("Строка"));
	Бронирования.Колонки.Добавить("Звезды", Новый ОписаниеТипов("Число"));
	Бронирования.Колонки.Добавить("Город", Новый ОписаниеТипов("Строка"));
	Бронирования.Колонки.Добавить("КатегорияНомера", Новый ОписаниеТипов("Строка"));
	// Трансфер
	Бронирования.Колонки.Добавить("Класс", Новый ОписаниеТипов("Строка"));
	
	Бронирования.Колонки.Добавить("ФизическиеЛица", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Бронирования.Колонки.Добавить("ИдентификаторФизЛица", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	Бронирования.Колонки.Добавить("ФизЛицоСсылка", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Бронирования.Колонки.Добавить("ЗаполненИдентификаторФизЛица", Новый ОписаниеТипов("Булево"));
	Бронирования.Колонки.Добавить("ФизЛицоФамилия", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Бронирования.Колонки.Добавить("ФизЛицоИмя", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Бронирования.Колонки.Добавить("ФизЛицоОтчество", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Бронирования.Колонки.Добавить("Транзакции", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	// Служебные
	Бронирования.Колонки.Добавить("ДокументНайденВБазе", Новый ОписаниеТипов("Булево"));
	
	Бронирования.Индексы.Добавить("НомерСтроки");
	Бронирования.Индексы.Добавить("ИдентификаторБронирования");
	
	Возврат Бронирования;
	
КонецФункции

Функция ИнициализироватьДанныеФизическихЛиц()
	
	ДанныеФизическихЛиц = Новый ТаблицаЗначений;
	ДанныеФизическихЛиц.Колонки.Добавить("ИдентификаторФизЛица", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ДанныеФизическихЛиц.Колонки.Добавить("ФизЛицоСсылка", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	ДанныеФизическихЛиц.Колонки.Добавить("Фамилия", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеФизическихЛиц.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеФизическихЛиц.Колонки.Добавить("Отчество", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеФизическихЛиц.Колонки.Добавить("ФамилияЛатиницей", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеФизическихЛиц.Колонки.Добавить("ИмяЛатиницей", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеФизическихЛиц.Колонки.Добавить("ОтчествоЛатиницей", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	ДанныеФизическихЛиц.Колонки.Добавить("Телефон", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ДанныеФизическихЛиц.Колонки.Добавить("EMail", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Возврат ДанныеФизическихЛиц;
	
КонецФункции

Функция ИнициализироватьТранзакции()
	
	Транзакции = Новый ТаблицаЗначений;
	Транзакции.Колонки.Добавить("ТипТранзакции", Новый ОписаниеТипов("Строка"));
	Транзакции.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Транзакции.Колонки.Добавить("НДС", Новый ОписаниеТипов("ТаблицаЗначений"));
	Транзакции.Колонки.Добавить("Сборы", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Транзакции;
	
КонецФункции

Функция ИнициализироватьНДС()
	
	Транзакции = Новый ТаблицаЗначений;
	Транзакции.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Строка"));
	Транзакции.Колонки.Добавить("СтавкаНДССсылка", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	Транзакции.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	
	Возврат Транзакции;
	
КонецФункции

Функция ИнициализироватьСборы()
	
	Транзакции = Новый ТаблицаЗначений;
	Транзакции.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Транзакции.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка"));
	
	Возврат Транзакции;
	
КонецФункции

Функция ИнициализироватьСегменты()
	
	Сегменты = Новый ТаблицаЗначений;
	Сегменты.Колонки.Добавить("ДатаОтправления", Новый ОписаниеТипов("Дата"));
	Сегменты.Колонки.Добавить("СтранаОтправления", Новый ОписаниеТипов("Строка"));
	Сегменты.Колонки.Добавить("ГородОтправления", Новый ОписаниеТипов("Строка"));
	Сегменты.Колонки.Добавить("МестоОтправления", Новый ОписаниеТипов("Строка"));
	Сегменты.Колонки.Добавить("ДатаПрибытия", Новый ОписаниеТипов("Дата"));
	Сегменты.Колонки.Добавить("СтранаПрибытия", Новый ОписаниеТипов("Строка"));
	Сегменты.Колонки.Добавить("ГородПрибытия", Новый ОписаниеТипов("Строка"));
	Сегменты.Колонки.Добавить("МестоПрибытия", Новый ОписаниеТипов("Строка"));
	
	Возврат Сегменты;
	
КонецФункции

Процедура ЗаписатьСостояниеБронированияЗаявки(ЗаявкаСсылка, Статус)
	
	СостоянияБронирования = Новый Соответствие;
	СостоянияБронирования.Вставить("not_processing",  Перечисления.СостоянияБронированияЗаявокНаКомандировку.Отправлена);
	СостоянияБронирования.Вставить("processing",      Перечисления.СостоянияБронированияЗаявокНаКомандировку.Принята);
	СостоянияБронирования.Вставить("processed",       Перечисления.СостоянияБронированияЗаявокНаКомандировку.Обработана);
	СостоянияБронирования.Вставить("canceled",        Перечисления.СостоянияБронированияЗаявокНаКомандировку.Отменена);
	
	СостояниеБронирования = СостоянияБронирования.Получить(Статус);
	
	ДанныеСостояния = РегистрыСведений.СостоянияБронированияЗаявокНаКомандировку.ПолучитьПоследнее(
		, Новый Структура("ЗаявкаНаКомандировку", ЗаявкаСсылка));
	
	Если ДанныеСостояния.Состояние <> СостояниеБронирования Тогда
		РегистрыСведений.СостоянияБронированияЗаявокНаКомандировку.УстановитьСостояние(ЗаявкаСсылка, СостояниеБронирования);
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторЗаявки(ЗаявкаСсылка)
	
	Возврат "rq" + СтрЗаменить(Строка(ЗаявкаСсылка.УникальныйИдентификатор()), "-", "_");
	
КонецФункции

Функция ЗаявкаПоИдентификатору(Идентификатор)
	
	Если СтрНайти(Идентификатор, "rq") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторЗаявки = Прав(Идентификатор, СтрДлина(Идентификатор) - 2);
	ИдентификаторЗаявки = СтрЗаменить(Строка(ИдентификаторЗаявки), "_", "-");
	
	Возврат Документы.ЗаявкаНаКомандировку.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторЗаявки));
	
КонецФункции

#КонецОбласти

#Область Запросы

Функция ЗапросПроверитьПодключение()
	
	Запрос = Новый Структура("ИмяМетода, ПараметрыМетода, ПоляСДатами");
	
	Запрос.ИмяМетода = "travel_policy.list";
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросДанныеОбАгенте()
	
	Запрос = Новый Структура("ИмяМетода, ПараметрыМетода, ПоляСДатами");
	
	Запрос.ИмяМетода = "agent.details";
	Запрос.ПараметрыМетода = "smartway";
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросНовыеДанныеБронирования(ВерсияДанныхСмартвей)
	
	Запрос = Новый Структура("ИмяМетода, ПараметрыМетода, ПоляСДатами");
	
	Запрос.ИмяМетода = "trip.get_after_change";
	Запрос.ПараметрыМетода = ВерсияДанныхСмартвей;
	
	ПоляСДатами = Новый Массив;
	ПоляСДатами.Добавить("checkin_date");
	ПоляСДатами.Добавить("checkout_date");
	ПоляСДатами.Добавить("book_date");
	ПоляСДатами.Добавить("last_change_date");
	ПоляСДатами.Добавить("event_date");
	ПоляСДатами.Добавить("date_arrive");
	ПоляСДатами.Добавить("date_depart");
	ПоляСДатами.Добавить("birthday");
	Запрос.ПоляСДатами = ПоляСДатами;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросДанныеБронированияПоЗаявке(ИдентификаторЗаявки)
	
	Запрос = Новый Структура("ИмяМетода, ПараметрыМетода, ПоляСДатами");
	
	Запрос.ИмяМетода = "trip.get_by_request";
	Запрос.ПараметрыМетода = ИдентификаторЗаявки;
	
	ПоляСДатами = Новый Массив;
	ПоляСДатами.Добавить("checkin_date");
	ПоляСДатами.Добавить("checkout_date");
	ПоляСДатами.Добавить("book_date");
	ПоляСДатами.Добавить("last_change_date");
	ПоляСДатами.Добавить("event_date");
	ПоляСДатами.Добавить("date_arrive");
	ПоляСДатами.Добавить("date_depart");
	ПоляСДатами.Добавить("birthday");
	Запрос.ПоляСДатами = ПоляСДатами;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВаучерУслуги(ИдентификаторБронирования)
	
	Запрос = Новый Структура("ИмяМетода, ПараметрыМетода, ПоляСДатами");
	
	Запрос.ИмяМетода = "trip.item_voucher";
	Запрос.ПараметрыМетода = ИдентификаторБронирования;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросСтатусЗаявок(ИдентификаторыЗаявок)
	
	Запрос = Новый Структура("ИмяМетода, ПараметрыМетода, ПоляСДатами");
	
	Запрос.ИмяМетода = "request.status";
	Запрос.ПараметрыМетода = ИдентификаторыЗаявок;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросОтправитьЗаявку(ЗаявкаСсылка, ДанныеДляОтправки)
	
	Запрос = Новый Структура("ИмяМетода, ПараметрыМетода, ПоляСДатами");
	
	Запрос.ИмяМетода = "request.save";
	
	ПараметрыМетода = Новый Структура("id, travellers, comment");
	ПараметрыМетода.Вставить("id", ИдентификаторЗаявки(ЗаявкаСсылка));
	
	ВыборкаЗаявок = ДанныеДляОтправки.ДанныеЗаявок.Выбрать();
	Если ВыборкаЗаявок.НайтиСледующий(ЗаявкаСсылка, "ЗаявкаСсылка") Тогда
		
		ОписаниеСотрудников = ДобавитьОписаниеСотрудников(ЗаявкаСсылка, ВыборкаЗаявок, ДанныеДляОтправки, ПараметрыМетода);
		ПараметрыМетода.Вставить("travellers", ОписаниеСотрудников);
		
		СодержаниеЗаявки = Новый Массив;
		
		СодержаниеЗаявки.Добавить(ВыборкаЗаявок.МестоНазначения + " "
			+ Формат(ВыборкаЗаявок.ДатаНачала, "ДЛФ=Д") + " - " + Формат(ВыборкаЗаявок.ДатаОкончания, "ДЛФ=Д") + ".");
		
		Перелеты = Новый Массив; Поезда = Новый Массив; Трансферы = Новый Массив; Отели = Новый Массив;
		Маршруты = Новый Массив;
		КодыИАТА = Новый Соответствие;
		
		Если ВыборкаЗаявок.БронироватьБилетыТуда Тогда
			
			СодержаниеЗаявки.Добавить(НСтр("ru = 'Заказать билеты к месту назначения:'"));
			СодержаниеЗаявки.Добавить(НСтр("ru = 'Убытие из'") + " " + ВыборкаЗаявок.БронироватьУбытиеТуда + " " +
				НСтр("ru = 'не раньше'") + " " + Формат(ВыборкаЗаявок.БронироватьУбытиеТудаНеРаньше, НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''")));
			СодержаниеЗаявки.Добавить(НСтр("ru = 'Прибытие в'") + " " + ВыборкаЗаявок.БронироватьПрибытиеТуда + " " +
				НСтр("ru = 'не позже'") + " " + Формат(ВыборкаЗаявок.БронироватьПрибытиеТудаНеПозже, НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''")));
			
			СтрокиБронировать = Новый Массив;
			
			Если ВыборкаЗаявок.БронироватьСамолетТуда Тогда
				
				СтрокиБронировать.Добавить(НСтр("ru = 'самолет'"));
				
				ДобавитьКодИАТА(КодыИАТА, ВыборкаЗаявок.БронироватьУбытиеТуда);
				ДобавитьКодИАТА(КодыИАТА, ВыборкаЗаявок.БронироватьПрибытиеТуда);
				Маршруты.Добавить(ДобавитьМаршрут(ВыборкаЗаявок, Истина, Ложь, КодыИАТА));
				
			КонецЕсли;
			Если ВыборкаЗаявок.БронироватьПоездТуда Тогда
				СтрокиБронировать.Добавить(НСтр("ru = 'поезд'"));
				Поезда.Добавить(ДобавитьЖДБилет(ВыборкаЗаявок, ОписаниеСотрудников));
			КонецЕсли;
			Если ВыборкаЗаявок.БронироватьТрансферТуда Тогда
				СтрокиБронировать.Добавить(НСтр("ru = 'трансфер до'") + " " + ВыборкаЗаявок.БронироватьМестоТрансфераТуда);
				Трансферы.Добавить(ДобавитьТрансфер(ВыборкаЗаявок, ОписаниеСотрудников));
			КонецЕсли;
			СодержаниеЗаявки.Добавить(НСтр("ru = 'Бронировать'") + " " + СтрСоединить(СтрокиБронировать, ", ") + ".");
		КонецЕсли;
		
		Если ВыборкаЗаявок.БронироватьБилетыОбратно Тогда
			
			СодержаниеЗаявки.Добавить(НСтр("ru = 'Заказать билеты обратно:'"));
			СодержаниеЗаявки.Добавить(НСтр("ru = 'Убытие из'") + " " + ВыборкаЗаявок.БронироватьУбытиеОбратно + " " +
				НСтр("ru = 'не раньше'") + " " + Формат(ВыборкаЗаявок.БронироватьУбытиеОбратноНеРаньше, НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''")));
			СодержаниеЗаявки.Добавить(НСтр("ru = 'Прибытие в'") + " " + ВыборкаЗаявок.БронироватьПрибытиеОбратно + " " +
				НСтр("ru = 'не позже'") + " " + Формат(ВыборкаЗаявок.БронироватьПрибытиеОбратноНеПозже, НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''")));
			
			СтрокиБронировать = Новый Массив;
			
			Если ВыборкаЗаявок.БронироватьСамолетОбратно Тогда
				
				СтрокиБронировать.Добавить(НСтр("ru = 'самолет'"));
				
				ДобавитьКодИАТА(КодыИАТА, ВыборкаЗаявок.БронироватьУбытиеОбратно);
				ДобавитьКодИАТА(КодыИАТА, ВыборкаЗаявок.БронироватьПрибытиеОбратно);
				Маршруты.Добавить(ДобавитьМаршрут(ВыборкаЗаявок, Ложь, Истина, КодыИАТА));
				
			КонецЕсли;
			Если ВыборкаЗаявок.БронироватьПоездОбратно Тогда
				СтрокиБронировать.Добавить(НСтр("ru = 'поезд'"));
				Поезда.Добавить(ДобавитьЖДБилет(ВыборкаЗаявок, ОписаниеСотрудников));
			КонецЕсли;
			Если ВыборкаЗаявок.БронироватьТрансферОбратно Тогда
				СтрокиБронировать.Добавить(НСтр("ru = 'трансфер до'") + " " + ВыборкаЗаявок.БронироватьМестоТрансфераОбратно);
				Трансферы.Добавить(ДобавитьТрансфер(ВыборкаЗаявок, ОписаниеСотрудников));
			КонецЕсли;
			СодержаниеЗаявки.Добавить(НСтр("ru = 'Бронировать'") + " " + СтрСоединить(СтрокиБронировать, ", ") + ".");
		КонецЕсли;
		
		Если Маршруты.Количество() <> 0 Тогда
			Перелеты.Добавить(ДобавитьПерелет(ОписаниеСотрудников, Маршруты));
		КонецЕсли;
		
		Если ВыборкаЗаявок.БронироватьПроживание Тогда
			ШаблонБронировать = НСтр("ru = 'Проживание в %1 с %2 по %3, мест: %4.'");
			СодержаниеЗаявки.Добавить(СтрШаблон(ШаблонБронировать,
				ВыборкаЗаявок.БронироватьМестоПроживания,
				Формат(ВыборкаЗаявок.БронироватьПроживаниеДатаНачала, "ДЛФ=Д"),
				Формат(ВыборкаЗаявок.БронироватьПроживаниеДатаОкончания, "ДЛФ=Д"),
				ВыборкаЗаявок.БронироватьМестПроживания));
				
			Отели.Добавить(ДобавитьОтель(ВыборкаЗаявок, ОписаниеСотрудников));
		КонецЕсли;
		
		Если Перелеты.Количество() Тогда
			ПараметрыМетода.Вставить("air_items", Перелеты);
		КонецЕсли;
		Если Поезда.Количество() Тогда
			ПараметрыМетода.Вставить("train_items", Поезда);
		КонецЕсли;
		Если Трансферы.Количество() Тогда
			ПараметрыМетода.Вставить("transfer_items", Трансферы);
		КонецЕсли;
		Если Отели.Количество() Тогда
			ПараметрыМетода.Вставить("hotel_items", Отели);
		КонецЕсли;
		
		СодержаниеЗаявки.Добавить(ВыборкаЗаявок.БронироватьДопИнформация);
		ПараметрыМетода.Вставить("comment", СтрСоединить(СодержаниеЗаявки, Символы.ПС));
	КонецЕсли;
	
	Запрос.ПараметрыМетода = ПараметрыМетода;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросОтменитьЗаявку(ЗаявкаСсылка)
	
	Запрос = Новый Структура("ИмяМетода, ПараметрыМетода, ПоляСДатами");
	
	Запрос.ИмяМетода = "request.cancel";
	Запрос.ПараметрыМетода = ИдентификаторЗаявки(ЗаявкаСсылка);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросКодаАэропорта(Город)
	
	Запрос = Новый Структура("ИмяМетода, ПараметрыМетода, ПоляСДатами");
	
	Запрос.ИмяМетода = "airline.airport_autocomplete";
	Запрос.ПараметрыМетода = Город;
	
	Возврат Запрос;
	
КонецФункции

Функция ПроверитьЗапросОтправкиЗаявки(Запрос, Ссылка)
	
	// В платформе нет валидации json схем
	Отказ = Ложь;
	
	ПараметрыМетода = Запрос.ПараметрыМетода;
	
	ЕстьХотяБыОднаУслуга = (ПараметрыМетода.Свойство("air_items") Или ПараметрыМетода.Свойство("train_items")
		Или ПараметрыМетода.Свойство("hotel_items") Или ПараметрыМетода.Свойство("transfer_items"));
	Если Не ЕстьХотяБыОднаУслуга Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Должна быть указана хотя бы одна услуга для бронирования.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ПараметрыМетода.Свойство("travellers") Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Должен быть выбран сотрудник.'"),,,, Отказ);
	Иначе
		ОбязательныеРеквизитыСотрудника = Новый Структура;
		ОбязательныеРеквизитыСотрудника.Вставить("id", НСтр("ru = 'Идентификатор сотрудника'"));
		ОбязательныеРеквизитыСотрудника.Вставить("name", НСтр("ru = 'Имя сотрудника'"));
		ОбязательныеРеквизитыСотрудника.Вставить("surname", НСтр("ru = 'Фамилия сотрудника'"));
		ОбязательныеРеквизитыСотрудника.Вставить("name_eng", НСтр("ru = 'Имя латиницей сотрудника'"));
		ОбязательныеРеквизитыСотрудника.Вставить("surname_eng", НСтр("ru = 'Фамилия латиницей сотрудника'"));
		ОбязательныеРеквизитыСотрудника.Вставить("sex", НСтр("ru = 'Пол сотрудника'"));
		ОбязательныеРеквизитыСотрудника.Вставить("birthday", НСтр("ru = 'День рождения сотрудника'"));
		ОбязательныеРеквизитыСотрудника.Вставить("citizenship_code", НСтр("ru = 'Страна выдачи документа, удостоверяющего личность сотрудника'"));
		ОбязательныеРеквизитыСотрудника.Вставить("mobile_phone", НСтр("ru = 'Мобильный телефон'"));
		ОбязательныеРеквизитыСотрудника.Вставить("email", НСтр("ru = 'Email'"));
		ОбязательныеРеквизитыСотрудника.Вставить("documents", НСтр("ru = 'Документы сотрудника'"));
		
		Для каждого ДанныеСотрудника Из ПараметрыМетода["travellers"] Цикл
			Для каждого ОбязательныйРеквизит Из ОбязательныеРеквизитыСотрудника Цикл
				Если Не ЗначениеЗаполнено(ДанныеСотрудника[ОбязательныйРеквизит.Ключ]) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Не заполнено поле %1 в %2.'"), ОбязательныйРеквизит.Значение, Ссылка),,,, Отказ);
				КонецЕсли;
			КонецЦикла;
			
			ОбязательныеРеквизитыДокумента = Новый Структура;
			ОбязательныеРеквизитыДокумента.Вставить("type", НСтр("ru = 'Тип документа сотрудника'"));
			ОбязательныеРеквизитыДокумента.Вставить("number", НСтр("ru = 'Номер документа сотрудника'"));
			Для каждого ДокументСотрудника Из ДанныеСотрудника["documents"] Цикл
				Для каждого ОбязательныйРеквизит Из ОбязательныеРеквизитыДокумента Цикл
					Если Не ЗначениеЗаполнено(ДокументСотрудника[ОбязательныйРеквизит.Ключ]) Тогда
						ОбщегоНазначения.СообщитьПользователю(
							СтрШаблон(НСтр("ru = 'Не заполнено поле %1 в %2.'"), ОбязательныйРеквизит.Значение, Ссылка),,,, Отказ);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

Функция ДобавитьОписаниеСотрудников(ЗаявкаСсылка, ВыборкаЗаявок, ДанныеДляОтправки, ПараметрыМетода)
	
	ОписаниеСотрудников = Новый Массив;
	
	ВыборкаДокументовСотрудников = ДанныеДляОтправки.ДанныеДокументовСотрудников.Выбрать();
	ВыборкаСотрудников = ДанныеДляОтправки.ДанныеСотрудников.Выбрать();
	
	РазложитьФИО = (ДанныеДляОтправки.ДанныеСотрудников.Колонки.Найти("Фамилия") = Неопределено);
	
	Пока ВыборкаСотрудников.НайтиСледующий(ЗаявкаСсылка, "ЗаявкаСсылка") Цикл
		
		Если РазложитьФИО Тогда
			
			ФИОСотрудника = СтрРазделить(ВыборкаСотрудников.Наименование, " ", Ложь);
			
			Если ФИОСотрудника.Количество() < 2 Тогда
				СтрокаИсключения = СтрШаблон(НСтр("ru = 'ФИО сотрудника %1 заполнено не корректно: проверьте наличие фамилии и имени'"),
									ВыборкаСотрудников.Наименование);
				ВызватьИсключение СтрокаИсключения;
			ИначеЕсли ФИОСотрудника.Количество() < 3 Тогда
				ФИОСотрудника.Добавить("");
			ИначеЕсли ФИОСотрудника.Количество() > 3 Тогда
				
				Для n = 3 По ФИОСотрудника.ВГраница() Цикл
					ФИОСотрудника[2] = ФИОСотрудника[2] + " " + ФИОСотрудника[n];
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ФИОСотрудника = Новый Массив;
			ФИОСотрудника.Добавить(ВыборкаСотрудников.Фамилия);
			ФИОСотрудника.Добавить(ВыборкаСотрудников.Имя);
			ФИОСотрудника.Добавить(ВыборкаСотрудников.Отчество);
			
		КонецЕсли;
		
		ОписаниеСотрудника = Новый Структура;
		ОписаниеСотрудника.Вставить("id",                Строка(ВыборкаСотрудников.СотрудникСсылка.УникальныйИдентификатор()));
		ОписаниеСотрудника.Вставить("surname",           ФИОСотрудника[0]);
		ОписаниеСотрудника.Вставить("name",              ФИОСотрудника[1]);
		ОписаниеСотрудника.Вставить("patronymic",        ФИОСотрудника[2]);
		
		ОписаниеСотрудника.Вставить("name_eng",          СтроковыеФункции.СтрокаЛатиницей(ФИОСотрудника[1]));
		ОписаниеСотрудника.Вставить("surname_eng",       СтроковыеФункции.СтрокаЛатиницей(ФИОСотрудника[0]));
		ОписаниеСотрудника.Вставить("patronymic_eng",    СтроковыеФункции.СтрокаЛатиницей(ФИОСотрудника[2]));
		
		ОписаниеСотрудника.Вставить("sex",               ?(ВыборкаСотрудников.Пол = Перечисления.ПолФизическогоЛица.Мужской, "male", "female"));
		ОписаниеСотрудника.Вставить("birthday",          ВыборкаСотрудников.ДатаРождения);
		
		ОписаниеСотрудника.Вставить("mobile_phone",      ВыборкаЗаявок.Телефон);
		ОписаниеСотрудника.Вставить("email",             ВыборкаЗаявок.АдресЭлектроннойПочты);
		
		КодСтраныВыдачиДокументов = "";
		
		ОписаниеДокументовСотрудника = Новый Массив;
		
		ВыборкаДокументовСотрудников.Сбросить();
		ОтборДокументов = Новый Структура("ЗаявкаСсылка, СотрудникСсылка", ЗаявкаСсылка, ВыборкаСотрудников.СотрудникСсылка);
		Пока ВыборкаДокументовСотрудников.НайтиСледующий(ОтборДокументов) Цикл
			
			ОписаниеДокументаСотрудника = Новый Структура;
			
			Если ВыборкаДокументовСотрудников.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
				ОписаниеДокументаСотрудника.Вставить("type", "domestic_passport");
			ИначеЕсли ВыборкаДокументовСотрудников.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ Тогда
				ОписаниеДокументаСотрудника.Вставить("type", "foreign_passport");
			КонецЕсли;
			
			ОписаниеДокументаСотрудника.Вставить("number",
				СтрЗаменить(ВыборкаДокументовСотрудников.Серия + ВыборкаДокументовСотрудников.Номер, " ", ""));
			ОписаниеДокументаСотрудника.Вставить("due_date", ВыборкаДокументовСотрудников.СрокДействия);
			ОписаниеДокументовСотрудника.Добавить(ОписаниеДокументаСотрудника);
			
			Если ЗначениеЗаполнено(ВыборкаДокументовСотрудников.КодСтраныВыдачи) Тогда
				КодСтраныВыдачиДокументов = ВыборкаДокументовСотрудников.КодСтраныВыдачи;
			Иначе
				КодСтраныВыдачиДокументов = "RU";
			КонецЕсли;
		КонецЦикла;
		
		ОписаниеСотрудника.Вставить("documents",         ОписаниеДокументовСотрудника);
		ОписаниеСотрудника.Вставить("citizenship_code",  КодСтраныВыдачиДокументов);
		
		ОписаниеОрганизаций = Новый Массив;
		ОписаниеОрганизаций.Добавить(ВыборкаЗаявок.ИННОрганизации);
		ОписаниеСотрудника.Вставить("companies_inn", ОписаниеОрганизаций);
		
		ОписаниеСотрудников.Добавить(ОписаниеСотрудника);
	КонецЦикла;
	
	Возврат ОписаниеСотрудников;
	
КонецФункции

Функция ДобавитьПерелет(ОписаниеСотрудников, Маршруты)
	
	Билет = Новый Структура;
	Билет.Вставить("project_id");
	Билет.Вставить("fare_class", "econom");
	Билет.Вставить("is_direct", Ложь);
	Билет.Вставить("routes", Маршруты);
	Билет.Вставить("travellers", ОписаниеСотрудников);
	
	Возврат Билет;
	
КонецФункции

Функция ДобавитьМаршрут(ВыборкаЗаявок, Туда, Обратно, СписокIATA)

	Маршрут = Новый Структура;
	
	Если Туда Тогда
		
		Маршрут.Вставить("departure_airport_code", СписокIATA[ВыборкаЗаявок.БронироватьУбытиеТуда]);
		Маршрут.Вставить("arrival_airport_code", СписокIATA[ВыборкаЗаявок.БронироватьПрибытиеТуда]);
		Маршрут.Вставить("departure_date", ВыборкаЗаявок.БронироватьУбытиеТудаНеРаньше);
		
	КонецЕсли;
	
	Если Обратно Тогда
		
		Маршрут.Вставить("departure_airport_code", СписокIATA[ВыборкаЗаявок.БронироватьУбытиеОбратно]);
		Маршрут.Вставить("arrival_airport_code", СписокIATA[ВыборкаЗаявок.БронироватьПрибытиеОбратно]);
		Маршрут.Вставить("departure_date", ВыборкаЗаявок.БронироватьУбытиеОбратноНеРаньше);
		
	КонецЕсли;
	
	Возврат Маршрут;
	
КонецФункции

Функция КодИАТА(Город)
	
	ЗапросИАТА = ЗапросКодаАэропорта(Город);
	
	Ответ = ВыполнитьЗапросКСервису(НастройкиПодключения(), ЗапросИАТА);
	
	Результат = Неопределено;
	
	Если Ответ.Свойство("result", Результат) Тогда
		
		Если Результат.Количество() = 1 Тогда
			Возврат Результат[0].code;
		ИначеЕсли Результат.Количество() > 1 Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для направления ""%1"" найдено более одного аэропорта.
								|При необходимости следует скорректировать аэропорт в сервисе.'"), Город);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Результат[0].code;
			
		Иначе
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для направления ""%1"" не найден аэропорт.
								|Проверьте корректность введенных данных.
								|(Отправка в сервис продолжена)'"), Город);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат "";
		
		КонецЕсли;
		
	ИначеЕсли Ответ.Свойство("error") Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка при проверке ответа от сервиса.
				|Код ошибки: %1,
				|Сообщение: %2.'"), 
			Ответ["error"]["code"], 
			Ответ["error"]["message"]);
		ВызватьИсключение(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ДобавитьКодИАТА(СписокКодов, Город)
	
	Если СписокКодов.Получить(Город) = Неопределено Тогда
		СписокКодов.Вставить(Город, КодИАТА(Город));
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьЖДБилет(ВыборкаЗаявок, ОписаниеСотрудников)
	
	Билет = Новый Структура;
	Билет.Вставить("project_id");
	
	Если ВыборкаЗаявок.БронироватьПоездТуда Тогда
		Билет.Вставить("departure_station_code", "");
		Билет.Вставить("arrival_station_code", "");
		Билет.Вставить("departure_date", ВыборкаЗаявок.БронироватьУбытиеТудаНеРаньше);
	Иначе
		Билет.Вставить("departure_station_code", "");
		Билет.Вставить("arrival_station_code", "");
		Билет.Вставить("departure_date", ВыборкаЗаявок.БронироватьУбытиеОбратноНеРаньше);
	КонецЕсли;
	
	Билет.Вставить("travellers", ОписаниеСотрудников);
	
	Возврат Билет;
	
КонецФункции

Функция ДобавитьТрансфер(ВыборкаЗаявок, ОписаниеСотрудников)
	
	Бронирование = Новый Структура;
	Бронирование.Вставить("project_id");
	
	Если ВыборкаЗаявок.БронироватьТрансферТуда Тогда
		Бронирование.Вставить("departure_place_id", "");
		Бронирование.Вставить("arrival_place_id", "");
		Бронирование.Вставить("departure_date", ВыборкаЗаявок.БронироватьУбытиеТудаНеРаньше);
	Иначе
		Бронирование.Вставить("departure_place_id", "");
		Бронирование.Вставить("arrival_place_id", "");
		Бронирование.Вставить("departure_date", ВыборкаЗаявок.БронироватьУбытиеОбратноНеРаньше);
	КонецЕсли;
	
	Бронирование.Вставить("travellers", ОписаниеСотрудников);
	
	Возврат Бронирование;
	
КонецФункции

Функция ДобавитьОтель(ВыборкаЗаявок, ОписаниеСотрудников)
	
	Бронирование = Новый Структура;
	Бронирование.Вставить("project_id");
	Бронирование.Вставить("code", "");
	Бронирование.Вставить("is_region", Истина);
	Бронирование.Вставить("checkin_date", ВыборкаЗаявок.БронироватьПроживаниеДатаНачала);
	Бронирование.Вставить("checkout_date", ВыборкаЗаявок.БронироватьПроживаниеДатаОкончания);
	Бронирование.Вставить("travellers", ОписаниеСотрудников);
	
	Возврат Бронирование;
	
КонецФункции

#КонецОбласти

#Область СервисныеФункции

Функция ВыполнитьЗапросКСервису(Настройки, Запрос, ПоказыватьСообщения = Неопределено)
	
	СтруктураЗапроса = СтруктураЗапросаКСервису(Настройки, Запрос.ИмяМетода, Запрос.ПараметрыМетода);
	ТекстЗапроса = ДанныеВJSON(СтруктураЗапроса);
	
	ЗапросКСервису = ЗапросКСервису("");
	ЗапросКСервису.УстановитьТелоИзСтроки(ТекстЗапроса);
	
	Соединение = СоединениеСервиса();
	
	Если ПоказыватьСообщения = Неопределено Тогда
		ПоказыватьСообщения = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(ЗапросКСервису);
	Исключение
		РезультатДиагностики = ПолучениеФайловИзИнтернета.ДиагностикаСоединения(Соединение.Сервер);
		ТекстСообщения = СтрШаблон(
			НСтр("ru = '%1
			           |
			           |Результат диагностики:
			           |%2'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			РезультатДиагностики.ОписаниеОшибки);
		ЗарегистрироватьОшибкуСервиса(ТекстСообщения, ПоказыватьСообщения);
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка при обработке запроса к ресурсу:
			           |%1'"),
			Ответ.ПолучитьТелоКакСтроку());
		ЗарегистрироватьОшибкуСервиса(ТекстСообщения, ПоказыватьСообщения);
	КонецЕсли;
	
	СтруктураОтвета = JSONВДанные(Ответ, Запрос.ПоляСДатами);
	
	Попытка
		ПроверитьОтветСервиса(СтруктураОтвета);
	Исключение
		ЗарегистрироватьОшибкуСервиса(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПоказыватьСообщения);
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция СтруктураЗапросаКСервису(Настройки, ИмяМетода, ПараметрыМетода)
	
	ПараметрыЗапроса = Новый Структура(
		"authorization,
		|query");
	ПараметрыЗапроса["authorization"] = СтруктураАвторизации(Настройки);
	ПараметрыЗапроса["query"] = ПараметрыМетода;
	
	СтруктураЗапроса = Новый Структура(
		"jsonrpc,
		|id,
		|method,
		|params");
	СтруктураЗапроса["jsonrpc"] = "2.0";
	СтруктураЗапроса["id"] = Строка(Новый УникальныйИдентификатор);
	СтруктураЗапроса["method"] = ИмяМетода;
	СтруктураЗапроса["params"] = ПараметрыЗапроса;
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция СтруктураАвторизации(Настройки)
	
	Если Не ЗначениеЗаполнено(Настройки.Логин) Тогда
		ТекстСообщения = НСтр("ru = 'Доступ к сервису бронирования Smartway не настроен'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СтруктураАвторизации = Новый Структура(
		"username,
		|password");
	
	СтруктураАвторизации["username"] = Настройки.Логин;
	СтруктураАвторизации["password"] = Настройки.Пароль;
	
	Возврат СтруктураАвторизации;
	
КонецФункции

Функция ЗапросКСервису(ТекстЗапроса)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", "1C Enterprise 8.3");
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("charset", "UTF-8");
	
	Возврат Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
	
КонецФункции

Функция СоединениеСервиса()
	
	АдресСервера = АдресСервера();
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Таймаут = 100;
	
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Возврат Новый HTTPСоединение(АдресСервера,,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
КонецФункции

Процедура ПроверитьОтветСервиса(СтруктураОтвета)
	
	Если СтруктураОтвета.Свойство("error") Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка при проверке ответа от сервиса.
				|Код ошибки: %1,
				|Сообщение: %2.'"), 
			СтруктураОтвета["error"]["code"], 
			СтруктураОтвета["error"]["message"]);
		ЗарегистрироватьОшибкуСервиса(ТекстСообщения, Ложь);
	КонецЕсли;
	
	Если Не СтруктураОтвета.Свойство("result") Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при проверке ответа от сервиса.
			|Отсутствует поле result.'");
		ЗарегистрироватьОшибкуСервиса(ТекстСообщения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция JSONВДанные(Ответ, ПоляСДатами)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	Результат = ПрочитатьJSON(ЧтениеJSON, , ПоляСДатами);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеВJSON(СтруктураДанных)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ЗаменитьНедопустимыеСимволы(Знач Значение, Знач СимволЗамены = "_")
	
	НедопустимыеСимволы = " ""/\[]:;|=?*<>.,-(){}+-=№@";
	
	Для Индекс = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		НедопустимыйСимвол = Сред(НедопустимыеСимволы, Индекс, 1);
		Значение = СтрЗаменить(Значение, НедопустимыйСимвол, СимволЗамены);
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Процедура ЗарегистрироватьОшибкуСервиса(ИнформацияОбОшибке, ПоказыватьСообщения)
	
	ИмяСобытия = НСтр("ru = 'Обращение к сервису Smartway'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(
		ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ИнформацияОбОшибке);
	
	Если Не ПоказыватьСообщения Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Ошибка при обращении к сервису Smartway. Обратитесь к администратору.
			|Техническая информация:
			|%1'"), 
		ИнформацияОбОшибке);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Функция АдресСервера()
	
	Возврат "api.smartway.today/v2";
	
КонецФункции

#КонецОбласти

#КонецОбласти
