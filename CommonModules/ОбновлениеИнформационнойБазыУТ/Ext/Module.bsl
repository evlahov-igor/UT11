////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки УправлениеТорговлей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеТорговлей" + ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "Базовая", "");
	Описание.Версия = "11.5.8.254";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "TradeBase", "Trade");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	ДатыЗапретаИзмененияУТ.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.АвансовыйОтчет.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.АктВыполненныхРабот.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.АктОРасхожденияхПослеОтгрузки.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.АктОРасхожденияхПослеПриемки.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.АннулированиеПодарочныхСертификатов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.Бронирование.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВводОстатковРасчетовПоЭквайрингу.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ Локализация
	Документы.ВводОстатковТМЦВЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- Локализация
	Документы.ВзаимозачетЗадолженности.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВнесениеДенежныхСредствВКассуККМ.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВнутреннееПотреблениеТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВозвратПодарочныхСертификатов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВозвратТоваровМеждуОрганизациями.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВозвратТоваровОтКлиента.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВозвратТоваровПоставщику.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВыемкаДенежныхСредствИзКассыККМ.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВыкупВозвратнойТарыКлиентом.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВыкупВозвратнойТарыУПоставщика.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВыкупПринятыхНаХранениеТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВыкупТоваровХранителем.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ГрафикИсполненияДоговора.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаданиеТорговомуПредставителю.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаказКлиента.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаказНаВнутреннееПотребление.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаказНаПеремещение.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаказНаСборку.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаказПоставщику.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ИсправлениеРазвернутогоСальдоТоваровОрганизаций.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаЗадолженности.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаНазначенияТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаПриобретения.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаРеализации.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаРегистров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.НачисленияКредитовИДепозитов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОприходованиеИзлишковТоваровУХранителя.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОперацияПоПлатежнойКарте.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтгрузкаТоваровСХранения.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтражениеРасхожденийПриИнкассацииДенежныхСредств.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетБанкаПоОперациямЭквайринга.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетКомиссионера.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетКомиссионераОСписании.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетКомитенту.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетКомитентуОЗакупках.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетКомитентуОСписании.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетОРозничныхПродажах.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетОСписанииТоваровУХранителя.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетПоКомиссииМеждуОрганизациями.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПервичныйДокумент.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПередачаТоваровМеждуОрганизациями.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПередачаТоваровХранителю.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПеремещениеТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПересортицаТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПланЗакупок.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПланОстатков.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПланПродаж.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПланПродажПоКатегориям.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПланСборкиРазборки.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПорчаТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПоступлениеБезналичныхДенежныхСредств.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПоступлениеТоваровНаСклад.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПоступлениеТоваровОтХранителя.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПриемкаТоваровНаХранение.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПриобретениеТоваровУслуг.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПриобретениеУслугПрочихАктивов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПриходныйКассовыйОрдер.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПрочееОприходованиеТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПрочиеДоходыРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РаспределениеРасходовБудущихПериодов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РасходныйКассовыйОрдер.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РеализацияПодарочныхСертификатов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РеализацияТоваровУслуг.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РеализацияУслугПрочихАктивов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РегистраторРасчетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СборкаТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СверкаВзаиморасчетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеБезналичныхДенежныхСредств.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеНДСНаРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеНедостачТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеПринятыхНаХранениеТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураВыданныйАванс.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураПолученныйАванс.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ТаможеннаяДекларацияИмпорт.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЧекККМ.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЧекККМВозврат.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЧекККМКоррекции.ПриДобавленииОбработчиковОбновления(Обработчики);
	ИсправлениеДокументов.ПриДобавленииОбработчиковОбновления(Обработчики);
	КомиссионнаяТорговляСервер.ПриДобавленииОбработчиковОбновления(Обработчики);
	КоммерческиеПредложенияДокументыУТ.ПриДобавленииОбработчиковОбновления(Обработчики);
	НоменклатураПартнеровСервер.ПриДобавленииОбработчиковОбновления(Обработчики);
	ОбновлениеИнформационнойБазыУТ.ПриДобавленииОбработчиковОбновленияУТ(Обработчики);
	Обработки.ПлатежныйКалендарь.ПриДобавленииОбработчиковОбновления(Обработчики);
	ОбъектыРасчетовСервер.ПриДобавленииОбработчиковОбновления(Обработчики);
	ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПриДобавленииОбработчиковОбновления(Обработчики);
	ПланыВидовХарактеристик.СтатьиДоходов.ПриДобавленииОбработчиковОбновленияУТ(Обработчики);
	ПланыВидовХарактеристик.СтатьиРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РаботаСКурсамиВалютУТ.ПриДобавленииОбработчиковОбновления(Обработчики);
	РаспределениеЗапасов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияКонтрагентКонтрагент.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияПоНДС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвиженияСерийТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДенежныеСредстваБезналичные.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДенежныеСредстваВПути.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДенежныеСредстваНаличные.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ЗаказыКлиентов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.Закупки.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПартииНДСКРаспределению.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПартииПрочихРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПланыЗакупок.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПланыОстатков.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПланыПотребленияКомплектующих.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПланыПродаж.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПланыПродажПоКатегориям.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПланыСборкиРазборки.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПрочаяВыручка.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПрочиеАктивыПассивы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПрочиеРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РаспределениеЗапасовДвижения.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыПоЭквайрингу.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСКлиентами.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСПоставщиками.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыВЯчейках.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыКОтбору.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыКОтгрузке.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыКОформлениюДокументовИмпорта.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыКОформлениюИзлишковНедостач.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыКПоступлению.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыОрганизаций.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.АналитикаУчетаПартий.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ВспомогательнаяИнформацияВзаиморасчетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ДатыПоступленияТоваровОрганизаций.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ЗаданияКРаспределениюРасчетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ЗамещениеПланов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.НастройкаКонтроляОбеспечения.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.НастройкиУчетаНДС.ПриДобавленииОбработчиковОбновленияУТ(Обработчики);
	РегистрыСведений.ОсновныеСтавкиНДС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ОтносительныеКурсыВалют.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.РаспределениеЗапасов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.РеестрДокументов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СостоянияВнутреннихЗаказов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СостоянияЗаказовКлиентов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СтавкиНДСНоменклатуры.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СуммыДокументовВВалютахУчета.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.УчетнаяПолитикаФинансовогоУчета.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.БанковскиеСчетаКонтрагентов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.БанковскиеСчетаОрганизаций.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ВариантыАнализаЦелевыхПоказателей.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ВидыНоменклатуры.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ВидыПланов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ВидыЦен.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ГрафикиОплаты.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ГруппыФинансовогоУчетаДенежныхСредств.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ГруппыФинансовогоУчетаДоходовРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ГруппыФинансовогоУчетаРасчетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ДоговорыКонтрагентов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ДоговорыКредитовИДепозитов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ДоговорыМеждуОрганизациями.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ Локализация
	Справочники.КатегорииЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- Локализация
	Справочники.КлассификаторТНВЭД.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.КлючиАналитикиУчетаПартий.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.Контрагенты.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.НаборыУпаковок.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.НаправленияДеятельности.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.НастройкиХозяйственныхОпераций.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.Номенклатура.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.Организации.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ Локализация
	Справочники.ПартииТМЦВЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- Локализация
	Справочники.Партнеры.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПолитикиУчетаСерий.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПравилаРаспределенияРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.Приоритеты.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПриоритетыОплаты.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПричиныОтменыЗаказовКлиентов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПричиныОтменыЗаказовПоставщикам.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПричиныПроигрышаСделок.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.РолиПартнеровВСделкахИПроектах.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.СезонныеГруппыБизнесРегионов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.СкидкиНаценки.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.Склады.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.СоглашенияСКлиентами.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.СоглашенияСПоставщиками.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.СостоянияПроцессов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.СтавкиНДС.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.СтруктураЦелей.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.УсловияПредоставленияСкидокНаценок.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ХарактеристикиНоменклатуры.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ШаблоныЭтикетокИЦенников.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ЭквайринговыеТерминалы.ПриДобавленииОбработчиковОбновления(Обработчики);
	УправлениеДоступомУТ.ПриДобавленииОбработчиковОбновления(Обработчики);

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ВыводитьОписаниеОбновлений = НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	ПараметрЗапускаНаСервере = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Если ПараметрЗапускаНаСервере<>Неопределено Тогда
		Если Найти(ПараметрЗапускаНаСервере,"Trade103Data")<>0 Тогда
			ВыводитьОписаниеОбновлений = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлейБазовая";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ПерейтиСБазовойВерсииНаПРОФ";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлейБазовая" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков, ИдентификаторИнтернетПоддержки");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.3.1.12",
		"Роль.ОтчетыИОбработкиСупервайзераТорговыхПредставлителей",
		"Роль.ОтчетыИОбработкиСупервайзераТорговыхПредставителей",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.3.1.13",
		"Роль.РазделФинансовыйРезультатИКонтроллинг",
		"Роль.ПодсистемаФинансовыйРезультатИКонтроллинг",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.4.1.19",
		"Роль.ДобавлениеИзменениеАссортиментаИЦенПартнеров",
		"Роль.ДобавлениеИзменениеЦенПартнеров",
		ОписаниеПодсистемы.Имя);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.5.1.38",
		"Роль.ПропускКонтроляТоваровОрганизацийПриОтменеПриходов",
		"Роль.РазрешитьОтключениеКонтроляТоваровОрганизацийНаВремяСеанса",
		ОписаниеПодсистемы.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроцедурыОбновления

// Используется для записи движений
//
// Параметры:
//   МенеджерРегистра - РегистрыСведенийМенеджер - 
//   ИмяРегистра - Строка - имя регистра.
//   Ссылка  - ДокументСсылка - ссылка на документ.
//   ТаблицыДляДвижений - Массив - массив, содержащий таблицы значений с движениями, которые необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(МенеджерРегистра, ИмяРегистра, Ссылка, ТаблицыДляДвижений = Неопределено, РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт

	НаборЗаписей = МенеджерРегистра[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей - 
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	Если ТаблицыДляДвижений <> Неопределено Тогда
		НаборЗаписей.Загрузить(ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
	КонецЕсли; 
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, РегистрироватьНаУзлахПлановОбмена);
	
КонецПроцедуры

// Используется для записи движений
//
// Параметры:
//   МенеджерРегистров                 - РегистрНакопленияМенеджер, РегистрСведенийМенеджер -
//   ИменаРегистров                    - Массив - массив, содержащий имена регистров.
//   Ссылка                      	   - ДокументСсылка - ссылка на документ.
//   ТаблицыДляДвижений                - Массив - массив, содержащий таблицы значений с движениями, которые необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
// 
Процедура ЗаписатьНаборыЗаписей(МенеджерРегистров, ИменаРегистров, Ссылка, ТаблицыДляДвижений = Неопределено, РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт

	Регистры = Новый Структура(ИменаРегистров);
	
	Для Каждого Регистр Из Регистры Цикл
		ЗаписатьНаборЗаписей(МенеджерРегистров, Регистр.Ключ, Ссылка, ТаблицыДляДвижений, РегистрироватьНаУзлахПлановОбмена);
	КонецЦикла;
	
КонецПроцедуры

/// Дополнительные параметры функции ПерезаписатьДвиженияИзОчереди()
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//      * ЭтоНезависимыйРегистрСведений - Булево - в параметре Данные функции передана таблица со значениями измерений,
//                                                 по которым нужно обновлять данные, Значение по умолчанию - ЛОЖЬ
//      * ИмяИзмеренияДляОтбора - Строка - имя измерения независимого регистра сведений, по которому будет установлен
//                                          отбор для перезаписи набора записей по документу (аналог регистратора для
//                                          регистров, подчиненных регистраторам).
//      * ОбновляемыеДанные - Структура - см. ОбновлениеИнформационнойБазыСлужебный.НоваяПорцияДляОбновления.
//      * ПередатьДополнительныеСвойства - Булево - признак необходимости передать набору записей дополнительные свойства.
//      * ДополнительныеСвойстваНабораЗаписей - Неопределено, Структура - структура передаваемых набору записей дополнительных свойств.
Функция ДополнительныеПараметрыПерезаписиДвиженийИзОчереди() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений",Ложь);
	ДополнительныеПараметры.Вставить("ИмяИзмеренияДляОтбора","");
	ДополнительныеПараметры.Вставить("ПоляУпорядочивания", Новый Массив);
	ДополнительныеПараметры.Вставить("Менеджер", Неопределено);
	ДополнительныеПараметры.Вставить("НужнаДополнительнаяОбработкаЗаписей", Ложь);
	ДополнительныеПараметры.Вставить("ЗаписыватьВОднойТранзакции", Ложь);
	ДополнительныеПараметры.Вставить("ОбновляемыеДанные");
	ДополнительныеПараметры.Вставить("ПередатьДополнительныеСвойства", Ложь);
	ДополнительныеПараметры.Вставить("ДополнительныеСвойстваНабораЗаписей", Неопределено);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// На основе данных о необходимости переформирования движений перезаписывает движения документа.
//	Для работы функции необходимо, чтобы процедура ИнициализироватьДанныеДокумента модуля менеджера документа, поддерживала параметр Регистры.
//	см. например, Документ.ПриходныйОрдерНаТовары.ИнициализироватьДанныеДокумента.
//
// Параметры:
//  ПолныеИменаДокументов				 - Строка, Массив, Неопределено - имя документа, по которому нужно переформировать движения. Например, "Документ.ПриходныйОрдерНаТовары"
//																Если документов несколько, то нужно передать их имена в массиве.
//																При обработке независимого регистра сведений нужно передать Неопределено.
//  ПолныеИменаРегистров				 - Строка, Массив - имя регистра, по которому нужно переформировать движения. Например, "РегистрНакопления.ТоварыНаСкладах"
//																Если регистров несколько, то их имена нужно передать в массиве.
//  Очередь								 - Число - очередь отложенной обработки данных для контроля данных на предмет блокировки другими обработчиками
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди().
// 
// Возвращаемое значение:
//  Булево - ИСТИНА, если обработка всех движений завершена.
//
Функция ПерезаписатьДвиженияИзОчереди(ПолныеИменаДокументов, ПолныеИменаРегистров, Очередь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	КонецЕсли;
	
	ЕстьЕщеРабота = Ложь;
	ЭтоНезависимыйРегистрСведений = ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений;
	ОбновляемыеДанные = ДополнительныеПараметры.ОбновляемыеДанные;
	ЕстьОбновляемыеДанные = ОбновляемыеДанные <> Неопределено;
	ИмяПоляРегистратор = ?(ЭтоНезависимыйРегистрСведений, ДополнительныеПараметры.ИмяИзмеренияДляОтбора, "Регистратор");
	Регистры = ИменаРегистровВМассив(ПолныеИменаРегистров);
	СписокДокументов = ИменаДокументовВМассив(ПолныеИменаДокументов);
	Если ТипЗнч(СписокДокументов) = Тип("Массив") Тогда 
		СписокДокументов.Добавить("Документ.Сторно"); // Сторно регистрируется к обновлению автоматически, если зарегистрировался сторнируемый.  
	КонецЕсли;
	ТипыДокументов = МассивИменВСоответствиеТипов(СписокДокументов, "ДокументСсылка", 1);
	
	Если ЭтоНезависимыйРегистрСведений Или ЕстьОбновляемыеДанные Тогда
		ИтерируемыйСписокДокументов = Новый Массив;
		ИтерируемыйСписокДокументов.Добавить(Неопределено);
	Иначе
		ИтерируемыйСписокДокументов = СписокДокументов;
	КонецЕсли;
	
	Для Каждого ПолноеИмяДокумента Из ИтерируемыйСписокДокументов Цикл
		Если Не ЭтоНезависимыйРегистрСведений И Не ЕстьОбновляемыеДанные Тогда
			Если ДополнительныеПараметры.Менеджер = Неопределено Тогда
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяДокумента);
			Иначе
				МенеджерДокумента = ДополнительныеПараметры.Менеджер;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ПолноеИмяРегистра Из Регистры Цикл
			ИмяРегистра = СтрРазделить(ПолноеИмяРегистра,".",Ложь)[1];
			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра); // РегистрСведенийМенеджер - 
			ПараметрыВыборки = НовыеПараметрыВыборки();
			
			Если ЕстьОбновляемыеДанные Тогда
				ВыборкаПоРегистраторам = Неопределено;
				ПараметрыВыборки.ТипыДокументов = ТипыДокументов;
				ПараметрыВыборки.ИмяПоляРегистратор = ИмяПоляРегистратор;
			Иначе
				ДополнительныеПараметрыДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
				
				Если ЭтоНезависимыйРегистрСведений Тогда
					ДополнительныеИсточникиДанных = Новый Соответствие;
					ДополнительныеИсточникиДанных.Вставить(ИмяПоляРегистратор);
					ДополнительныеПараметрыДляОбработки.ДополнительныеИсточникиДанных = ДополнительныеИсточникиДанных;
					ДополнительныеПараметрыДляОбработки.ПоляУпорядочивания = ДополнительныеПараметры.ПоляУпорядочивания;
					ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
						Очередь,
						ПолноеИмяРегистра,
						ДополнительныеПараметрыДляОбработки);
				Иначе
					Источники = МенеджерДокумента.ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра);
					ДополнительныеПараметрыДляОбработки.ДополнительныеИсточникиДанных = Источники;
					ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
						Очередь,
						ПолноеИмяДокумента,
						ПолноеИмяРегистра,
						ДополнительныеПараметрыДляОбработки);
				КонецЕсли;
			КонецЕсли;
			
			Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Пока СледующаяВыборкаИлиСтрокаТаблицыЗначений(ВыборкаПоРегистраторам, ОбновляемыеДанные, ПараметрыВыборки) Цикл
				
				МетаданныеДокумента = ВыборкаПоРегистраторам[ИмяПоляРегистратор].Метаданные(); // ОбъектМетаданныхДокумент - 
				
				Если ЭтоНезависимыйРегистрСведений И ПолныеИменаДокументов <> Неопределено Тогда
					
					Если ПолныеИменаДокументов.Найти(ВыборкаПоРегистраторам[ИмяПоляРегистратор].Метаданные().ПолноеИмя()) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЭтоНезависимыйРегистрСведений 
					И МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") <> Неопределено Тогда
					// Если движения сторнируемого документа еще не обработаны, то пропускам обработку
					СторнируемыйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоРегистраторам[ИмяПоляРегистратор], "СторнируемыйДокумент");
					Если ЗначениеЗаполнено(СторнируемыйДокумент)
						И ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Очередь, ПолноеИмяРегистра, СторнируемыйДокумент) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СформироватьИЗаписатьДвижения(
							ВыборкаПоРегистраторам[ИмяПоляРегистратор],
							ПолноеИмяРегистра,
							МенеджерРегистра,
							ДополнительныеПараметры,
							ИмяПоляРегистратор) Тогда
						
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
				Попытка
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru = 'Не удалось зафиксировать транзакцию записи движения в регистр %ИмяРегистра% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
												УровеньЖурналаРегистрации.Предупреждение,
												Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра),
												,
												ТекстСообщения);
						
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;	
			
			
			Если Не ЕстьЕщеРабота
				И ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Очередь, ПолноеИмяРегистра) Тогда 
				ЕстьЕщеРабота = Истина;
			КонецЕсли;
			Если ЭтоНезависимыйРегистрСведений Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ВсеСделано = Не ЕстьЕщеРабота;
	Возврат ВсеСделано;
	
КонецФункции

// Адаптирует запрос механизма проведения для использования в функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения,
// делая его запросом для всех проведенных документов.
// Параметры:
//  ИзначальныйТекстЗапроса - Строка - текст запроса механизма проведения, который или формирует таблицу движений, или
//										создает временные таблицы, используемые в запросах формирующих таблицы движений.
//										см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса
//										Требования к тексту запроса следующие.
//										  Все объединяемые таблицы запроса, формирующего таблицу движений имеют один синоним.
//										  Если есть соединения с другими таблицами, то оно реализовано таким образом, 
//											что будет корректно работать, если не установлен отбор по ссылке;
//										  Не используются временные таблицы;
//										  Не используются вложенные запросы и группировки;
//										  Нет упорядочивания;
//										  параметры запроса рассчитываются или по данным шапки, или являются значениями констант;
// 										  Для всех полей непримитивных типов заполнены значения по умолчанию, как они хранятся в регистре;
//											это или пустая ссылка типа, или НЕОПРЕДЕЛЕНО (для полей составного типа), то НЕ должно быть NULL
//										  параметр, устанавливающий отбор по ссылке называется &Ссылка;
//										  В конце запроса не должно быть знака ";"
// 										  В тексте запроса, формирующим таблицу движения, должны выбираться только значимые
//											для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.).
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры рассчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении
//													  выражение для его расчета
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса
//                                                    механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
//
// Возвращаемое значение:
//  Строка - адаптированный текст запроса.
//
Функция АдаптироватьЗапросМеханизмаПроведения(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
														
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ВЫБРАТЬ", // @query-part
										"ВЫБРАТЬ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка КАК Регистратор,"); // @query-part
				
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ГДЕ",
										"
										|ГДЕ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка.Проведен
										|	И ");
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru = 'Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			ПервыйСимвол = СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол = СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПервыйСимвол) + СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска = Сред(Элемент.Значение, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса, Элемент.Ключ, "(" + ПодстановкаВременнойТаблицы + ")");
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать".
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Адаптирует запрос механизма проведения по независимому регистру.
// Результат функции используется в ДанныеНезависимогоРегистраДляПерепроведения().
//
// Параметры:
//  ИзначальныйТекстЗапроса			 - Строка - текст запроса механизма проведения, который формирует таблицу движений.
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ВЗапросеЕстьИсточник			 - Булево - Истина, если в запросе описан источник
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры рассчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении - выражение для его расчета.
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса
//                                                    механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
// 
// Возвращаемое значение:
//  Строка - адаптированный текст запроса, который может выполняться для всех документов.
//
Функция АдаптироватьЗапросПроведенияПоНезависимомуРегистру(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ВЗапросеЕстьИсточник,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
	
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	Если НЕ ВЗапросеЕстьИсточник Тогда                   
		
		ИзначальныйТекстЗапроса = ИзначальныйТекстЗапроса + "
		|ИЗ
		|	" + ПолноеИмяДокумента + " КАК ТаблицаДокументаОбновлениеИБ";
		
	КонецЕсли;
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru = 'Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			ПервыйСимвол 				= СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол 			= СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПервыйСимвол)
											+ СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска 			= Сред(Элемент.Значение, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса 	= СтрЗаменить(ИзначальныйТекстЗапроса,
														Элемент.Ключ,
														"(" + ПодстановкаВременнойТаблицы + ")");
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Комментарий",
		"ВЫРАЗИТЬ(ТаблицаДокументаОбновлениеИБ.Ссылка.Комментарий КАК Строка (100))");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать".
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "НомерНаПечать" Тогда
			ТекстЗамены = """""";
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Комментарий" Тогда
			ТекстЗамены = "ВЫРАЗИТЬ(ТаблицаДокументаОбновлениеИБ.Ссылка.Комментарий КАК Строка (100))";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено 
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Результат адаптации запроса для функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения.
// 
// Возвращаемое значение:
//  Структура - поля:
//	* ТекстЗапроса - Строка - должен быть объявлен обязательно, адаптированный текст запроса
//	* ЗначенияПараметров - Структура - значения параметров запроса, которые вычисляются из констант
//										(не зависят от конкретного документа).
//
Функция РезультатАдаптацииЗапроса() Экспорт
	
	РезультатАдаптацииЗапроса = Новый Структура;
	РезультатАдаптацииЗапроса.Вставить("ТекстЗапроса");
	РезультатАдаптацииЗапроса.Вставить("ЗначенияПараметров", Новый Структура);
	
	Возврат РезультатАдаптацииЗапроса;
КонецФункции

// Выбирает регистраторы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом
// механизма проведения Параметры:
//  РезультатАдаптацииЗапроса - Структура - см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса 
// 												Требования к запросам:
// 												- текст не должен содержать обращения к временным таблицам
//												- все запросы должны быть адаптированы для выборки без отбора по ссылке.
//													это можно сделать  с помощью функции ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения, 
//													 если текст запроса удовлетворяет ее условиям. Если нет - можно попробовать адаптировать текст самостоятельно
// 												- в тексте запроса, формирующим таблицу движения, должны выбираться только ЗНАЧИМЫЕ
//													для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.);
// 												- нет упорядочивания; 
// 												- есть поле "Регистратор"; 
//  ПолноеИмяРегистра				 - Строка - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков).
//  НеиспользуемыеПоля				 - Массив - список полей, по которым не требуется проверять совпадение данных.
//
// Возвращаемое значение:
//  Массив - массив ссылок на документы, по которым нужно переформировать движения по регистру.
//
Функция РегистраторыДляПерепроведения(РезультатАдаптацииЗапроса,
										ПолноеИмяРегистра,
										ПолноеИмяДокумента,
										НеиспользуемыеПоля = Неопределено) Экспорт
	
	Очередь = Неопределено;
	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ЧастиИмениРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь);
	
	ТипРегистра = ЧастиИмениРегистра[0];
	ИмяРегистра = ЧастиИмениРегистра[1];
	
	Если ТипРегистра = "РегистрНакопления"
		Или ТипРегистра = "РегистрСведений" Тогда
		МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
	Иначе
		ТекстИсключения = НСтр("ru = 'Функция пока не поддерживает работу с регистрами типа %ТипРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ТипРегистра%", ТипРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	ТекстРегистра = "";
	
	ТекстВыборкиСуммирующегоЗапроса = "";
	ТекстГруппировкиСуммирующегоЗапроса = "
	|";	
	ТекстУсловияСуммирующегоЗапроса = "
	|ИМЕЮЩИЕ
	|	ЛОЖЬ";	
	
	Если ТипРегистра = "РегистрСведений" Тогда
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ВЫБРАТЬ", // @query-part
											"ВЫБРАТЬ
											|	1 КАК КонтрольноеПолеОбновлениеИБ,"); // @query-part
		ТекстРегистра = "
						|	-1,";
		ТекстВыборкиСуммирующегоЗапроса = "
										|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,";
		ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
		| ИЛИ СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	КонецЕсли;
	
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	
	// Поля по которым не требуется проверять совпадение данных в ИБ с данными запроса.
	Если НеиспользуемыеПоля = Неопределено Тогда
		НеиспользуемыеПоля = Новый Массив;
	КонецЕсли; 
	
	Для каждого Колонка Из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если ТипРегистра = "РегистрНакопления"
			И МетаданныеРегистра.Ресурсы.Найти(Колонка.Псевдоним) <> Неопределено Тогда		
			
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
				
				ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
				|	СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") КАК " + Колонка.Псевдоним + ",";
				
				ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
				|	ИЛИ СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") <> 0";
				
			КонецЕсли;
			
		ИначеЕсли Не Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
				
				ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
				|	ВложенныйЗапрос." + Колонка.Псевдоним + " КАК " + Колонка.Псевдоним + ",";
				
				ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
				|	ВложенныйЗапрос." + Колонка.Псевдоним + ",";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено
			Или НеиспользуемыеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Измерение.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
		|	ВложенныйЗапрос." + Измерение.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено
			Или НеиспользуемыеПоля.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") КАК " + Ресурс.Имя + ",";
			
			ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
			|	ИЛИ СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") <> 0";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	0 КАК " + Ресурс.Имя + ",";
		Иначе	
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
			|	ВложенныйЗапрос." + Ресурс.Имя + ",";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено
			Или НеиспользуемыеПоля.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Реквизит.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
		|	ВложенныйЗапрос." + Реквизит.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	ТекстРегистра = Лев(ТекстРегистра, СтрДлина(ТекстРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующегоЗапроса = Лев(ТекстГруппировкиСуммирующегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
			
	ТекстРегистра = ТекстРегистра + "
	|ИЗ
	|	" + ПолноеИмяРегистра + " КАК ТаблицаРегистра";
	
	Если Очередь <> Неопределено Тогда
		ТекстРегистра = ТекстРегистра + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПолноеИмяРегистра + ".Изменения КАК РегистраторыКОбработке
		|		ПО ТаблицаРегистра.Регистратор = РегистраторыКОбработке.Регистратор
		|			И (РегистраторыКОбработке.Узел = &ТекущаяОчередь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
		|		ПО ТаблицаРегистра.Регистратор = ВТЗаблокированоРегистратор.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
		|		ПО ТаблицаРегистра.Регистратор = ВТЗаблокированоСсылка.Ссылка";
	КонецЕсли;
	
	ТекстРезультирующегоЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Регистратор КАК Регистратор 
	|ПОМЕСТИТЬ НеправильныеДвижения 
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ТекстВыборкиСуммирующегоЗапроса
	|
	|	ИЗ (ВЫБРАТЬ &ТекстЗапросаФормированияДвижений
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ 
	|		&ТекстРегистра
	|	ГДЕ
	|		ТаблицаРегистра.Регистратор ССЫЛКА ПолноеИмяДокумента
	|		И &Сторно
	|		И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
	|		И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL
	|	) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО 
	|	&ТекстГруппировкиСуммирующегоЗапроса
	|ИМЕЮЩИЕ &ТекстУсловияСуммирующегоЗапроса ) КАК НеправильныеДвижения
	|ИНДЕКСИРОВАТЬ ПО 
	|	Регистратор	
	|;
	|
	|////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрДокументов.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ПОМЕСТИТЬ ИсправляемыеДокументы
	|ИЗ
	|	НеправильныеДвижения КАК НеправильныеДвижения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов 
	|	ПО
	|		НеправильныеДвижения.Регистратор = РеестрДокументов.СторнируемыйДокумент
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL
	|	И РеестрДокументов.ИсправляемыйДокумент <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсправляемыйДокумент
	|;
	|
	|ВЫБРАТЬ
	|	НеправильныеДвижения.Регистратор КАК Регистратор
	|ИЗ
	|	НеправильныеДвижения КАК НеправильныеДвижения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Регистратор
	|ИЗ
	|	ИсправляемыеДокументы КАК ИсправляемыеДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов 
	|	ПО
	|		ИсправляемыеДокументы.ИсправляемыйДокумент = РеестрДокументов.ИсправляемыйДокумент
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL	
	|";
	
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ПолноеИмяДокумента", ПолноеИмяДокумента);
	Если Очередь = Неопределено Тогда
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "И ВТЗаблокированоРегистратор", "//"+"И ВТЗаблокированоРегистратор");
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "И ВТЗаблокированоСсылка", "//"+"И ВТЗаблокированоСсылка");
	КонецЕсли;
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&ТекстВыборкиСуммирующегоЗапроса", ТекстВыборкиСуммирующегоЗапроса);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВЫБРАТЬ &ТекстЗапросаФормированияДвижений", ТекстЗапросаФормированияДвижений);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&ТекстРегистра", ТекстРегистра);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&ТекстГруппировкиСуммирующегоЗапроса", ТекстГруппировкиСуммирующегоЗапроса);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ИМЕЮЩИЕ &ТекстУсловияСуммирующегоЗапроса", ТекстУсловияСуммирующегоЗапроса);
	
	Если МетаданныеРегистра.Реквизиты.Найти("Сторно") <> Неопределено Тогда
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&Сторно", "НЕ ТаблицаРегистра.Сторно");
	Иначе
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&Сторно", "ИСТИНА");
	КонецЕсли;
	
	ЗапросВыборки = Новый Запрос;
	
	Для Каждого Параметр Из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Если Очередь <> Неопределено Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц);
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц);
	
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВТЗаблокированоРегистратор","ВТЗаблокировано" + ИмяРегистра);
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВТЗаблокированоСсылка","ВТЗаблокировано" + СтрРазделить(ПолноеИмяДокумента,".")[1]);
	
		ЗапросВыборки.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ЗапросВыборки.УстановитьПараметр("ТекущаяОчередь", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));
		
	КонецЕсли;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	Регистраторы = ЗапросВыборки.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Возврат Регистраторы;
КонецФункции

// Выбирает документы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом
// механизма проведения. Используется для независимых регистров сведений, например, РеестрДокументов, ДокументыПоОС, ДокументыПоНМА.
//
// Параметры:
//  РезультатАдаптацииЗапроса	 - см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса.
//  ПолноеИмяРегистра			 - Строка	 - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента			 - Строка	 - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  НеиспользуемыеПоля			 - Массив	 - Список полей, по которым не требуется проверять совпадение данных.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит колонку "Ссылка".
//
Функция ДанныеНезависимогоРегистраДляПерепроведения(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля = Неопределено) Экспорт
	
	ЗапросВыборки = ЗапросРазличийОтраженияДокументовВНезависимомРегистре(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля);
	
	ТекстЗапросаВыборки = ЗапросВыборки.Текст;
	
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Ссылка КАК Ссылка
	|ИЗ
	|	&ТекстЗапросаВыборки КАК НеправильныеДвижения";

	ЗапросВыборки.Текст = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВыборки", "(" + ТекстЗапросаВыборки + ")");
	
	ДанныеРегистра = ЗапросВыборки.Выполнить().Выгрузить();
	
	Возврат ДанныеРегистра;

КонецФункции

// Сообщает пользователю, работа с формой временно ограничена, т.к. не завершен переход на новую версию программы.
//
Процедура СообщитьЧтоРаботаСФормойВременноОграничена() Экспорт

	ТекстСообщения = НСтр("ru = 'Работа с формой временно ограничена, так как выполняется переход на новую версию программы. Это плановый процесс, он не мешает работе в информационной базе и скоро завершится. Если у вас возникли сложности - обратитесь к администратору или в службу поддержки.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	
КонецПроцедуры

// Сообщает пользователю, что работа с формой временно ограниченна, т.к. не завершены процедуры обновления ИБ по объекту
// метаданных.
//
// Параметры:
//  ПолноеИмяМетаданныхОбъекта	 - Строка	 - полное имя объекта метаданных, по которому обновление ИБ должно быть завершено. 
//
Процедура ПроверитьВозможностьОткрытияФормы(ПолноеИмяМетаданныхОбъекта) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ПолноеИмяМетаданныхОбъекта) Тогда
		СообщитьЧтоРаботаСФормойВременноОграничена();
	КонецЕсли;

КонецПроцедуры

// Сообщает пользователю, что работа с журналом документов временно ограниченна, т.к. не завершена процедура обновления
// РС РеестрДокументов в разрезе используемых документов журнала.
//
// Параметры:
//  ТипыДокументов - Массив - список типов документов, по которым обновление РС должно быть завершено.
//
Процедура ПроверитьВозможностьОткрытияЖурналаДокументов(ТипыДокументов) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
		Если Не ЭтоПодчиненныйУзелРИБ Тогда
			Возврат;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.РеестрДокументов.Изменения КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
		|	И ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Ссылка) В (&ТипыДокументов)");
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СообщитьЧтоРаботаСФормойВременноОграничена();
	КонецЕсли;
	
КонецПроцедуры

// Записывает значения констант с помощью ОбновлениеИнформационнойБазы.ЗаписатьДанные().
//
// Параметры:
//  ЗначенияКонстант - Структура - Ключ описывает имя константы.
//
Процедура ЗаписатьЗначенияКонстант(ЗначенияКонстант) Экспорт

	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		
		МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
		
		МенеджерЗначения.Значение = КлючИЗначение.Значение;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Ложь);
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Сообщить о неудачной обработке
//
// Параметры:
//  ИнформацияОбОшибке	 - ИнформацияОбОшибке - результат функции ИнформацияОбОшибке()
//  Ссылка				 - ЛюбаяСсылка - обрабатываемый объект.
//
Процедура СообщитьОНеудачнойОбработке(ИнформацияОбОшибке, Ссылка) Экспорт
	ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Ссылка);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Ссылка.Метаданные(),
							Ссылка,
							ТекстСообщения);
КонецПроцедуры

// Выполняет проверку корректности данных ссылки на объект информационной базы.
// В случае успешной проверки возвращает объект информационной базы.
//
// Параметры:
//	Ссылка			- ЛюбаяСсылка	 - ссылка на объект информационной базы.
//	ВерсияДанных	- Строка		 - текущая версия данных объекта.
//	Очередь			- Число			 - очередь отложенной обработки данных для контроля данных на предмет блокировки
//										другими обработчиками.
//
// Возвращаемое значение:
//	ДокументОбъект, СправочникОбъект, ПланСчетовОбъект, ПланВидовХарактеристикОбъект, Неопределено - объект информационной базы.
//
Функция ПроверитьПолучитьОбъект(Ссылка,ВерсияДанных,Очередь) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	Если Объект.ВерсияДанных <> ВерсияДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Объект;
	
КонецФункции

// Получает данные для записи в регистр и записывает их.
// 
// Параметры:
// 	Ссылка - ДокументСсылка - 
// 	ПолноеИмяРегистра - Строка - 
// 	МенеджерРегистра - РегистрСведенийМенеджер - 
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыПерезаписиДвиженийИзОчереди
// 	ИмяПоляРегистратор - Строка - 
// Возвращаемое значение:
// 	Булево - Ложь, если не удалось записать движения.
Функция СформироватьИЗаписатьДвижения(Ссылка, ПолноеИмяРегистра, МенеджерРегистра, ДополнительныеПараметры, ИмяПоляРегистратор = "Регистратор") Экспорт
	
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистра,".",Ложь)[1];
	
	Если Не ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей - 
		НаборЗаписей.Отбор[ИмяПоляРегистратор].Установить(Ссылка);
		
		Если ДополнительныеПараметры.ПередатьДополнительныеСвойства Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НаборЗаписей.ДополнительныеСвойства,
			ДополнительныеПараметры.ДополнительныеСвойстваНабораЗаписей);
		КонецЕсли;	
		
		Если ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
			ЗаписатьДвижения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяПоляРегистратор) <> Неопределено;
		Иначе
			ЗаписатьДвижения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проведен"); //ответственное чтение реквизита "Проведен"
		КонецЕсли;
		
		Если ТипЗнч(ЗаписатьДвижения) <> Тип("Булево") Тогда
			ЗаписатьДвижения = Ложь;
		КонецЕсли;
		
		Если ЗаписатьДвижения Тогда
			
			ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(
				Ссылка, ИмяРегистра);
			ТаблицаДанных = ТаблицыДляДвижений["Таблица" + ИмяРегистра];
			
			Если ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей Тогда
				НаборЗаписей.ЗагрузитьСОбработкой(ТаблицаДанных);
			Иначе
				НаборЗаписей.Загрузить(ТаблицаДанных);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
		Если Не ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
		
	Исключение
		
		Если Не ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		
		ТекстСообщения = НСтр("ru = 'Не удалось перезаписать движения в регистр ""%ИмяРегистра%"" по документу %Ссылка% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			Ссылка.Метаданные(), Ссылка, ТекстСообщения);
			
		Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецПопытки;

	Возврат Истина;
	
КонецФункции

// Параметры:
//  Данные - ЛюбаяСсылка
//         - Массив
//         - РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрБухгалтерииНаборЗаписей
//         - РегистрРасчетаНаборЗаписей - данные, по которым нужно зарегистрировать изменения.
//         - ТаблицаЗначений - значения измерений независимого регистра сведений. Требования:
//                              а) все измерения регистра должны входить в основной отбор;
//                              б) в таблице должны быть только колонки, соответствующие по именам измерениям регистра,
//                                по которым ранее регистрировалась необходимость обработки;
//                              в) запись наборов в процессе обновления должна проходить с тем же отбором,
//                                что и регистрация необходимости обработки;
//                              г) в ДополнительныеПараметры нужно передать соответствующий признак и полное имя регистра.
//  ДополнительныеПараметры - см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки.
//
Процедура ОтметитьВыполнениеОбработкиИнтерактивно(Данные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбновлениеИнформационнойБазы.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.ОбновлениеИнформационнойБазы КАК ОбновлениеИнформационнойБазы
		|ГДЕ
		|	НЕ ОбновлениеИнформационнойБазы.ЭтотУзел";
	Очереди = Запрос.Выполнить().Выгрузить();
	Очереди = Очереди.ВыгрузитьКолонку("Ссылка");
	
	КопияДанных = Данные;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;
	
	Если (ТипЗнч(Данные) = Тип("Массив")
		Или ТипЗнч(Данные) = Тип("ТаблицаЗначений"))
		И Данные.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из Данные Цикл
				Набор.Отбор.Регистратор.Установить(СтрокаМассива);
				ПланыОбмена.УдалитьРегистрациюИзменений(Очереди, Набор);
			КонецЦикла;
		Иначе
			Набор.Отбор.Регистратор.Установить(Данные);
			ПланыОбмена.УдалитьРегистрациюИзменений(Очереди, Набор);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		
		Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);
		
		УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);
		
		Для Каждого СтрокаТаблицы Из Данные Цикл
			Для Каждого Колонка Из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Значение = СтрокаТаблицы[Колонка.Имя];
				Набор.Отбор[Колонка.Имя].Использование = Истина;
			КонецЦикла;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Очереди, Набор);
		КонецЦикла;
		
	Иначе
		Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
			ТекстИсключения = НСтр("ru = 'Не поддерживается отметка выполнения обработки обновления целиком объекта метаданных. Нужно отмечать обработку конкретных данных.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Если ТипЗнч(Данные) <> Тип("Массив") Тогда
			
			ТипЗначенияОбъекта = ТипЗнч(Данные);
			МетаданныеОбъекта  = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
			
			Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
				И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя()).СоздатьНаборЗаписей();
				Для Каждого ЭлементОтбора Из Данные.Отбор Цикл
					Набор.Отбор[ЭлементОтбора.Имя].Значение = ЭлементОтбора.Значение;
					Набор.Отбор[ЭлементОтбора.Имя].Использование = ЭлементОтбора.Использование;
				КонецЦикла;
				УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные.Отбор);
			ИначеЕсли ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта)
				И Не ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОбъекта)
				И Данные.ЭтоНовый() Тогда
				
				Возврат;
			ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеОбъекта) Тогда
				
				Возврат;
			Иначе
				Набор = Данные;
			КонецЕсли;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Очереди, Набор);
			КопияДанных = Набор;
		Иначе
			Для Каждого ЭлементМассива Из Данные Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Очереди, ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеНабора, УстанавливаемыеОтборы)
	Для Каждого Измерение Из МетаданныеНабора.Измерения Цикл
		
		ЕстьОтборПоИзмерению = Ложь;
		
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти(Измерение.Имя) <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы[Измерение.Имя].Использование;	
		КонецЕсли;
		
		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = Измерение.Тип.ПривестиЗначение();
			Набор.Отбор[Измерение.Имя].Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если МетаданныеНабора.ОсновнойОтборПоПериоду Тогда
		
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти("Период") <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Период.Использование;
		КонецЕсли;
		
		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = '00010101';
			Набор.Отбор.Период.Установить(ПустоеЗначение);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Возвращаемое значение:
//  Запрос - Запрос различий отражения документов в независимом регистре
Функция ЗапросРазличийОтраженияДокументовВНезависимомРегистре(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля = Неопределено) Экспорт

	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ТекстРезультирующегоЗапроса	= "";
	
	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра); // ОбъектМетаданныхРегистрСведений - 
		
	ТекстГруппировкиСуммирующегоЗапроса = "";	
	ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
										"ВЫБРАТЬ", // @query-part
										"ВЫБРАТЬ
										|	1 КАК КонтрольноеПолеОбновлениеИБ,"); // @query-part
	ТекстПолейРегистра = "
						|	-1,";
	ТекстВыборкиСуммирующегоЗапроса = "
									|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	
	// Поля по которым не требуется проверять совпадение данных в ИБ с данными запроса.
	Если НеиспользуемыеПоля = Неопределено Тогда
		НеиспользуемыеПоля = Новый Массив;
	КонецЕсли; 
	
	Для каждого Колонка Из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			Продолжить;
		КонецЕсли;
		
		Поле = МетаданныеРегистра.Измерения.Найти(Колонка.Псевдоним); 
		
		Если Поле <> Неопределено Тогда
			ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Поле);
		Иначе
			Поле = МетаданныеРегистра.Ресурсы.Найти(Колонка.Псевдоним); 
			Если Поле <> Неопределено Тогда
				ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Поле);
			Иначе
				Поле = МетаданныеРегистра.Реквизиты.Найти(Колонка.Псевдоним); 
				Если Поле <> Неопределено Тогда
					ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Поле);
				Иначе
					ТекстИсключения = НСтр("ru = 'В запросе выборки данных документа %ПолноеИмяДокумента% для формирования движений по регистру %ПолноеИмяРегистра% присутствует поле, которого нет в регистре.'");
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяРегистра%", ПолноеИмяРегистра);
					
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
			ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Поле);
			ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Поле);
		КонецЕсли;
				
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Измерение);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Измерение);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Измерение);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
	КонецЦикла;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Ресурс);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Ресурс);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Ресурс);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
		
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстПолейРегистра, Реквизит);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Реквизит);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Реквизит);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
	КонецЦикла;
	
	ТекстПолейРегистра = Лев(ТекстПолейРегистра, СтрДлина(ТекстПолейРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующегоЗапроса = Лев(ТекстГруппировкиСуммирующегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
	
	ТекстРегистра = 
	"ВЫБРАТЬ
	|&ТекстПолейРегистра
	|ИЗ
	|	&ПолноеИмяРегистра КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Ссылка ССЫЛКА ПолноеИмяДокумента";
	
	ТекстРегистра = СтрЗаменить(ТекстРегистра, "&ТекстПолейРегистра", ТекстПолейРегистра);
	ТекстРегистра = СтрЗаменить(ТекстРегистра, "&ПолноеИмяРегистра", ПолноеИмяРегистра);
	ТекстРегистра = СтрЗаменить(ТекстРегистра, "ПолноеИмяДокумента", ПолноеИмяДокумента);
	
	ТекстРезультирующегоЗапроса =  
	"ВЫБРАТЬ
	|&ТекстВыборкиСуммирующегоЗапроса
	|ИЗ
	|	(ВЫБРАТЬ &ТекстЗапросаФормированияДвижений
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ &ТекстРегистра
	|) КАК ВложенныйЗапрос 
	|СГРУППИРОВАТь ПО
	|&ТекстГруппировкиСуммирующегоЗапроса
	|ИМЕЮЩИЕ
	|	СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&ТекстВыборкиСуммирующегоЗапроса", ТекстВыборкиСуммирующегоЗапроса);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВЫБРАТЬ &ТекстЗапросаФормированияДвижений", ТекстЗапросаФормированияДвижений);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВЫБРАТЬ &ТекстРегистра", ТекстРегистра);
	ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "&ТекстГруппировкиСуммирующегоЗапроса", ТекстГруппировкиСуммирующегоЗапроса);
	
	ЗапросВыборки = Новый Запрос;
	Для Каждого Параметр Из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	Возврат ЗапросВыборки;
	
КонецФункции

Процедура ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Поле)
	
	Если Поле.Имя = "Комментарий" Тогда
		ТекстРегистра = ТекстРегистра + "
		|	ВЫРАЗИТЬ(ТаблицаРегистра." + Поле.Имя + " КАК Строка (1000)),";
	ИначеЕсли Поле.Тип.СодержитТип(Тип("СправочникСсылка.КлючиРеестраДокументов")) Тогда
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Поле.Имя + ".Ключ,";
	Иначе	
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Поле.Имя + ",";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Поле)
	
	ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВЫБОР КОГДА ВложенныйЗапрос." + Поле.Имя + " ЕСТЬ NULL ИЛИ ВложенныйЗапрос." + Поле.Имя + " = НЕОПРЕДЕЛЕНО ТОГДА &ПустоеЗначение" + Поле.Имя + " ИНАЧЕ ВложенныйЗапрос." + Поле.Имя + " КОНЕЦ  КАК " + Поле.Имя + ",";
		
КонецПроцедуры

Процедура ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Поле)
	
	ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + "
		|	ВЫБОР КОГДА ВложенныйЗапрос." + Поле.Имя + " ЕСТЬ NULL ИЛИ ВложенныйЗапрос." + Поле.Имя + " = НЕОПРЕДЕЛЕНО ТОГДА &ПустоеЗначение" + Поле.Имя + " ИНАЧЕ ВложенныйЗапрос." + Поле.Имя + " КОНЕЦ,";
		
КонецПроцедуры

#Область ЗаполненияПустойИБ

// Обработчик первого запуска УТ 11.
//
Процедура ПервыйЗапуск() Экспорт
	
	ЭтоПереходСБазовойВерсииНаПРОФ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереходСБазовойВерсииНаПРОФ","ЭтоПереходСБазовойВерсииНаПРОФ");
	Если ЭтоПереходСБазовойВерсииНаПРОФ <> Неопределено И ЭтоПереходСБазовойВерсииНаПРОФ Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	Справочники.Валюты.ЗаполнитьВалютыПоУмолчанию();
	//-- Локализация
	Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора("006,113,166,796,055,168,112");
	
	ЗаполнитьКонстантыПоУмолчанию();
	
	БизнесПроцессы.СогласованиеПродажи.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗакупки.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЦенНоменклатуры.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗаявкиНаВозвратТоваровОтКлиента.ИнициализироватьРолиИсполнителей();
	
	Справочники.Партнеры.ЗаполнитьПредопределенныхПартнеров();
	Справочники.Контрагенты.ЗаполнитьПредопределенныхКонтрагентов();

	Справочники.СкидкиНаценки.ЗаполнитьПредопределенныеЭлементы();
	Справочники.СостоянияПроцессов.НачальноеЗаполнениеПоследовательностиЭтаповПроцессовПродаж();
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПредопределенныеСтатьиДвиженияДенежныхСредств();
	ЗаполнитьСвойстваВидовКонтактнойИнформации();
	Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций();
	Справочники.ПричиныОтменыЗаказовПоставщикам.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ИнструкцииБанку.ЗаполнитьПредопределенныеЭлементы();
	
	Справочники.СтавкиНДС.СоздатьЭлементыПервоначальногоЗаполнения();
	УчетНДСЛокализация.ОсновныеСтавкиНДС_СоздатьЭлементыПервоначальногоЗаполнения();
	
	АудитСостоянияСистемы.ЗаполнитьСправочникПроверокСостоянияСистемы();
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПредопределенныеСтатьиДоходов();
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПредопределенныеСтатьиРасходов();
	ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗаполнитьНастройкиПредопределенныхЭлементов();
	
	КалендарныеГрафики.ОбновитьИспользованиеНесколькихПроизводственныхКалендарей();
	Справочники.ВариантыКлассификацииЗадолженности.СоздатьВариантКлассификацииЗадолженностиПоУмолчаниюМонопольно();
	МониторингЦелевыхПоказателей.ЗаполнитьСтруктуруЦелейИВариантыАнализа();
	
	ПланыОбмена.МобильноеПриложениеТорговыйПредставитель.НачальноеЗаполнениеКодаУзлаЭтойИБ();
	
	РегистрыСведений.ШтрихкодыНоменклатуры.ЗаполнитьКонстантыПодсистемыШтрихкодирования();
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновитьПоставляемыеДрайвера();
	
	ОбновлениеИнформационнойБазыУТ.ОтключитьНеиспользуемыеРегламентныеЗаданияБазовойВерсии();
	
КонецПроцедуры

// Заполняет константы значениями по умолчанию.
// Вызывается при первоначальном заполнении ИБ после заполнения следующих данных
//	- Справочник.УпаковкиЕдиницыИзмерения.
//
Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	УстановитьЕдиницыИзмерения();
	
	ЗначенияКонстант = НастройкиСистемыПовтИсп.ПолучитьЗначенияКонстантПоУмолчанию();
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбеспечениеСервер.НеИспользоватьНазначенияБезЗаказаВычислитьИЗаписатьИнверсией();
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Заполняет служебные константы-идентификаторы конфигурации.
//
Процедура УстановитьСлужебныеКонстанты() Экспорт
	
	// Определим правильные значения служебных констант (функциональных опций).
	ЗначенияКонстант = Новый Структура("УправлениеТорговлей, КомплекснаяАвтоматизация, УправлениеПредприятием", Ложь, Ложь, Ложь);
	
	МодулиПодсистем = Новый Массив;
	ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем(МодулиПодсистем);
	
	МодулиПодсистем = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьМассивВСтруктуруИлиСоответствие(МодулиПодсистем, Истина);
	
	Если МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыУП") Тогда
		ЗначенияКонстант.УправлениеПредприятием = Истина;
	ИначеЕсли МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыКА") Тогда
		ЗначенияКонстант.КомплекснаяАвтоматизация = Истина;
	ИначеЕсли МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыУТ") Тогда
		ЗначенияКонстант.УправлениеТорговлей = Истина;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить служебный идентификатор конфигурации.'");
	КонецЕсли;
	
	// Установим эти значения.
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		
		Если Константы[КлючИЗначение.Ключ].Получить() <> КлючИЗначение.Значение Тогда
			
			// Текущее значение константы в ИБ не соответствует правильному - исправим
			МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
			
			МенеджерЗначения.Значение = КлючИЗначение.Значение;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура устанавливает значение валюты регламентированного учета.
// Вызывается при первоначальном заполнении ИБ.
//

// Процедура устанавливает значения констант, связанных с единицами измерения
//
Процедура УстановитьЕдиницыИзмерения()
	
	БазоваяЕдиницаИзмеренияДлины  = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("006");
	БазоваяЕдиницаИзмеренияВеса   = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("166");
	БазоваяЕдиницаИзмеренияОбъема = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("113");
	БазоваяЕдиницаИзмеренияПлощади = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("055");
	БазоваяЕдиницаИзмеренияШтук    = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");
	БазоваяЕдиницаИзмеренияРазливнойПродукции = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("112");
	
	Константы.ЕдиницаИзмеренияДлины.Установить(БазоваяЕдиницаИзмеренияДлины);
	Константы.ЕдиницаИзмеренияВеса.Установить(БазоваяЕдиницаИзмеренияВеса);
	Константы.ЕдиницаИзмеренияОбъема.Установить(БазоваяЕдиницаИзмеренияОбъема);
	Константы.ЕдиницаИзмеренияПлощади.Установить(БазоваяЕдиницаИзмеренияПлощади);
	Константы.ЕдиницаИзмеренияКоличестваШтук.Установить(БазоваяЕдиницаИзмеренияШтук);
	Константы.ЕдиницаИзмеренияРазливнойПродукции.Установить(БазоваяЕдиницаИзмеренияРазливнойПродукции);
	
КонецПроцедуры

// Для базовой версии отключает неиспользуемые регламентные задания.
//
Процедура ОтключитьНеиспользуемыеРегламентныеЗаданияБазовойВерсии() Экспорт
	
	Если НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
	 ИЛИ ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	НеиспользуемыеЗадания = Новый Структура(
		"ABCКлассификацияНоменклатуры,
		|ABCКлассификацияПартнеров,
		|АрхивированиеЧековККМ,
		|XYZКлассификацияНоменклатуры,
		|XYZКлассификацияПартнеров,
		|АрхивированиеЧековККМ,
		|ЗагрузкаКурсовВалют,
		|ЗапускДополнительныхОбработок,
		|ЗаполнениеДанныхДляОграниченияДоступа,
		|ИнтеграцияС1СДокументооборотВыполнитьОбменДанными,
		|ОбновлениеАгрегатов,
		|ОбновлениеДанныхОДоступностиТоваровДляВнешнихПользователей,
		|ОбновлениеКодовТоваровПодключаемогоОборудования,
		|ОбновлениеНоменклатурыПродаваемойСовместно,
		|ОбновлениеСтатусовДоставкиSMS,
		|ОтправкаSMS,
		|ОчисткаСегментов,
		|ПерестроениеАгрегатов,
		|ПолучениеИОтправкаЭлектронныхПисем,
		|ПроведениеПоРасчетамСПартнерами,
		|РасчетИсточниковДанныхВариантовАнализа,
		|РасчетПоказателейПрогнозаРасходаУпаковок,
		|СозданиеЗаданийНаОтбор,
		|СозданиеЗаданийНаПересчетТоваров,
		|СозданиеЗаданийНаПеремещение,
		|СозданиеРасходныхОрдеров,
		|УведомлениеИсполнителейОНовыхЗадачах,
		|УдалениеНеактуальнойИнформацииСинхронизации,
		|УдалениеОтложенныхЧековККМ,
		|ФормированиеСегментов");
	
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	МассивЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания); // Массив Из РегламентноеЗадание - 
	
	ПараметрыЗадания = Новый Структура("Использование", Ложь);
	
	Для Каждого Задание Из МассивЗаданий Цикл
		
		Если НеиспользуемыеЗадания.Свойство(Задание.Метаданные.Имя) Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаВерсиюПроф

// Обработчик перехода на версию ПРОФ.
//
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПереходСБазовойВерсииНаПРОФ","ЭтоПереходСБазовойВерсииНаПРОФ",Истина);
	
	БазоваяВерсия = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("БазоваяВерсия",                   БазоваяВерсия);
	ЗначенияКонстант.Вставить("ИспользоватьУправлениеДоступом",  Не БазоваяВерсия);
	ЗначенияКонстант.Вставить("УправлениеТорговлей",             Истина);
	ЗначенияКонстант.Вставить("ОтветственныйВДокументах",        Не БазоваяВерсия);
	ЗначенияКонстант.Вставить("НеБазоваяВерсия",                 Не БазоваяВерсия);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияУТ(Обработчики) Экспорт

#Область ОбновлениеПодсистемПодключаемоеОборудование

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбновлениеПодсистемПодключаемоеОборудование";
	Обработчик.Версия = "11.5.4.51";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3f1bdd4b-d87b-4a14-9982-65f60851a2cc");
	Обработчик.Комментарий = НСтр("ru = 'Удаление дублей в имени подсистемы БПО: удаляется имя ""Подключаемое оборудование"".'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ВерсииПодсистем.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область ОбработатьВидыКонтактнойИнформацииУТ

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьВидыКонтактнойИнформацииУТ";
	Обработчик.Версия = "11.5.6.56";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f6e16347-fc1c-4f17-a825-3d334c032c0d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ЗаполнитьСписокВидовКонтактнойИнформацииКОбработке";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Установка наименований видов КИ на других языках. Заполнение идентификаторов для формул в дополнительных реквизитах и сведениях.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

#КонецОбласти

#Область ОбработатьУточнениеФизическихЛиц

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ОбработатьУточнениеФизическихЛиц";
	Обработчик.Версия = "11.5.6.42";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("21a93279-9c75-4186-8eee-dc36033a3905");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ЗаполнитьСписокФизическихЛицКОбработке";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Переносит значение реквизита ""Уточнение наименования""  в справочнике физических лиц'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ФизическиеЛица.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ФизическиеЛица.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ФизическиеЛица.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

#КонецОбласти

#Область ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ПервыйЗапуск";
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = "";

#КонецОбласти

#Область УстановитьКонстантуИспользоватьНазначенияБезЗаказа

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуИспользоватьНазначенияБезЗаказа";
	Обработчик.Версия = "11.5.7.45";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a2ace0bf-2a79-409b-8294-b7c0a38b86d6");
	Обработчик.Комментарий = "";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьНазначенияБезЗаказа.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьОбособленноеОбеспечениеЗаказов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьПроизводствоНаСтороне.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.НаправленияДеятельности.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьНазначенияБезЗаказа.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановитьКонстантуИспользоватьОперацииСводнойКорректировкиЗадолженностиПоПриобретению

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуИспользоватьОперацииСводнойКорректировкиЗадолженностиПоПриобретению";
	Обработчик.Версия = "11.5.8.28";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("839c729a-05a2-4040-8467-44896f781149");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Использовать операции сводной корректировки задолженности по приобретению"".'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоПриобретению.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановитьКонстантуИспользоватьОперацииСводнойКорректировкиЗадолженностиПоРеализации

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуИспользоватьОперацииСводнойКорректировкиЗадолженностиПоРеализации";
	Обработчик.Версия = "11.5.8.28";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("499c729a-05a2-4040-8467-44896f781183");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Использовать операции сводной корректировки задолженности по реализации"".'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоРеализации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановитьКонстантуИспользоватьПорчуТоваровУХранителей

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуИспользоватьПорчуТоваровУХранителей";
	Обработчик.Версия = "11.5.8.31";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8cdcdccc-ffe3-4225-a410-ad1b7028e227");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Использовать порчу товаров у хранителей"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьКачествоТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьПорчуТоваровУХранителей.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановитьКонстантуИспользоватьУчетСебестоимости

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуИспользоватьУчетСебестоимости";
	Обработчик.Версия = "11.5.3.18";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cd9c0f60-6108-496d-a0f1-0f19ce0887f3");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Использовать учет себестоимости"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьУчетСебестоимости.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьУчетСебестоимости.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановитьКонстантуИспользуетсяЦенообразование20

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуИспользуетсяЦенообразование20";
	Обработчик.Версия = "11.5.6.26";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5d41db7c-bb2e-4c0e-a54b-7cd97f01b063");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Используется ценообразование"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользуетсяЦенообразование20.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользуетсяЦенообразование20.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановитьКонстантуМеждународныеРеквизитыБанковскихСчетов

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуМеждународныеРеквизитыБанковскихСчетов";
	Обработчик.Версия = "11.5.7.92";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4f9c729a-05a2-4040-8467-44366f781183");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Международные реквизиты банковских счетов"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.МеждународныеРеквизитыБанковскихСчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.БанковскиеСчетаКонтрагентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.БанковскиеСчетаОрганизаций.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.МеждународныеРеквизитыБанковскихСчетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти
//++ Локализация
#Область УстановитьКонстантуНациональныеРеквизитыБанковскихСчетов

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуНациональныеРеквизитыБанковскихСчетов";
	Обработчик.Версия = "11.5.7.92";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c438ea52-d31b-4478-a858-f0e482d83784");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Национальные реквизиты банковских счетов"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.НациональныеРеквизитыБанковскихСчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.НациональныеРеквизитыБанковскихСчетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти
//-- Локализация

#Область УстановитьКонстантуНеИспользоватьНазначенияБезЗаказа

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуНеИспользоватьНазначенияБезЗаказа";
	Обработчик.Версия = "11.5.7.45";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e4c4a20e-31ce-4700-a974-98b33539f08e");
	Обработчик.Комментарий = "";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьОбособленноеОбеспечениеЗаказов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьПроизводствоНаСтороне.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.НеИспользоватьНазначенияБезЗаказа.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.НаправленияДеятельности.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.НеИспользоватьНазначенияБезЗаказа.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановитьКонстантуОсновнаяСтрана

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуОсновнаяСтрана";
	Обработчик.Версия = "11.5.8.122";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8cfb7906-2926-4771-b10c-bfb0352fce98");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Основная страна"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ОсновнаяСтрана.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановитьКонстантуПредставлениеВходящихДокументов

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуПредставлениеВходящихДокументов";
	Обработчик.Версия = "11.5.8.17";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("40c34c74-7157-4a3f-b690-844d1101831b");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Представление входящих документов"".'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ПредставлениеВходящихДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановитьКонстантуИспользоватьМногострановойУчет

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуИспользоватьМногострановойУчет";
	Обработчик.Версия = "11.5.8.110";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e95217ed-5457-44e7-80db-493c25324212");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуИспользоватьМногострановойУчет_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Переносит значение реквизита ""Уточнение наименования""  в справочнике физических лиц'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьМногострановойУчет.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
#КонецОбласти

КонецПроцедуры

#Область ПредопределенныеДанные

// Зарегистрировать предопределенные элементы для обновления в обработчике обновления.
//
Процедура ЗарегистрироватьПредопределенныеЭлементыДляОбновления(Параметры, 
																ОбъектМетаданных = Неопределено,
																ДополнительныеПараметры = Неопределено,
																СписокПроверяемыхРеквизитов = "") Экспорт
	
	ПараметрыРегистрации = ПараметрыРегистрацииПредопределенныхЭлементов();
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыРегистрации, ДополнительныеПараметры);
	КонецЕсли;
	
	НастройкиПодсистемы = ОбновлениеИнформационнойБазыСлужебный.НастройкиПодсистемы();
	ОбъектыСНачальнымЗаполнением = НастройкиПодсистемы.ОбъектыСНачальнымЗаполнением;
		
	ОбъектыСПредопределеннымиЭлементами = ?(ОбъектМетаданных <> Неопределено,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектМетаданных),
		ОбъектыСНачальнымЗаполнением);
	
	ОбъектыКОбработке = Новый Массив;
	СведенияОбЯзыках = Новый Структура;
	
	СведенияОбЯзыках.Вставить("Язык1", МультиязычностьСервер.КодПервогоДополнительногоЯзыкаИнформационнойБазы());
	СведенияОбЯзыках.Вставить("Язык2",  МультиязычностьСервер.КодВторогоДополнительногоЯзыкаИнформационнойБазы());
	СведенияОбЯзыках.Вставить("ОсновнойЯзык", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	&Поля
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.Предопределенный = ИСТИНА";
	
	Для каждого ОбъектМетаданныхСЭлементами Из ОбъектыСПредопределеннымиЭлементами Цикл
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданныхСЭлементами.ПолноеИмя());
		ЛокализуемыеРеквизитыОбъекта = МультиязычныеРеквизитыОбъекта(ОбъектМетаданныхСЭлементами);
		ПредопределенныеДанные       = ПредопределенныеДанныеОбъекта(ОбъектМетаданныхСЭлементами, МенеджерОбъекта, ЛокализуемыеРеквизитыОбъекта);
		
		// Формируем запрос
		
		ИменаРеквизитовОбъекта = Новый Массив;
		Если ПараметрыРегистрации.РежимОбновления = "НовыеИИзмененные" Тогда
	
			ОграничиватьПоРеквизитам = ЗначениеЗаполнено(СписокПроверяемыхРеквизитов);
			Если ОграничиватьПоРеквизитам Тогда
				МассивРеквизитов = СтрРазделить(СписокПроверяемыхРеквизитов, ",", Ложь);
			КонецЕсли;
			
			Для Каждого Колонка Из ПредопределенныеДанные.Колонки Цикл
				Если ПустаяСтрока(Колонка.Заголовок) Тогда
					Если ОграничиватьПоРеквизитам И МассивРеквизитов.Найти(Колонка.Имя) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
		
					ИменаРеквизитовОбъекта.Добавить(Колонка.Имя);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СформироватьИменаМультиязычныхРеквизитов(ИменаРеквизитовОбъекта, ЛокализуемыеРеквизитыОбъекта);
		
		Если ИменаРеквизитовОбъекта.Найти("ИмяПредопределенныхДанных") = Неопределено Тогда
			ИменаРеквизитовОбъекта.Добавить("ИмяПредопределенныхДанных");
		КонецЕсли;
		Если ИменаРеквизитовОбъекта.Найти("Ссылка") = Неопределено Тогда
			ИменаРеквизитовОбъекта.Добавить("Ссылка");
		КонецЕсли;
		
//		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, СтрСоединить(ИменаРеквизитовОбъекта, ", " + Символы.ПС), ОбъектМетаданныхСЭлементами.ПолноеИмя());
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&Поля", СтрСоединить(ИменаРеквизитовОбъекта, ", " + Символы.ПС));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ОбъектМетаданныхСЭлементами.ПолноеИмя());
		Запрос = Новый Запрос(ТекстЗапроса);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиПредопределенныхЭлементов = НастройкиПредопределенныхЭлементов(МенеджерОбъекта, ПредопределенныеДанные);
		
		ДанныеЗапроса = РезультатЗапроса.Выбрать();
		Пока ДанныеЗапроса.Следующий() Цикл
			
			ПоставляемыеСведения = НастройкиПредопределенныхЭлементов.ДополнительныеПараметры.ПредопределенныеДанные.Найти(ДанныеЗапроса.ИмяПредопределенныхДанных, "ИмяПредопределенныхДанных");
			
			Если ПоставляемыеСведения <> Неопределено Тогда
				
				Если ПараметрыРегистрации.РежимОбновления = "Все" Тогда
					ОбъектыКОбработке.Добавить(ДанныеЗапроса.Ссылка);
				ИначеЕсли ПараметрыРегистрации.РежимОбновления = "НовыеИИзмененные" Тогда
					
					Если ДанныеСодержатОтличия(ДанныеЗапроса, ИменаРеквизитовОбъекта, ПоставляемыеСведения, ЛокализуемыеРеквизитыОбъекта, ПараметрыРегистрации) Тогда
						ОбъектыКОбработке.Добавить(ДанныеЗапроса.Ссылка);
					КонецЕсли;
					
				ИначеЕсли ПараметрыРегистрации.РежимОбновления = "МультиязычныеСтроки" Тогда
					
					Если МультиязычныеСтрокиРеквизитовИзменены(ПоставляемыеСведения, ДанныеЗапроса, ЛокализуемыеРеквизитыОбъекта, ПараметрыРегистрации) Тогда
						ОбъектыКОбработке.Добавить(ДанныеЗапроса.Ссылка);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбъектыКОбработке.Количество() > 0 Тогда
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ОбъектыКОбработке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементыНачальнымиДанными(Параметры, ОбъектМетаданных, ОбновитьМультиязычныеСтроки = Ложь, СписокОбновляемыхРеквизитов="") Экспорт
	
	СсылкиНаОбъекты = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ОбъектМетаданных.ПолноеИмя());
	
	Если ОбновитьМультиязычныеСтроки Тогда
		Результат = ОбновитьМультиязычныеСтрокиПредопределенныхЭлементов(СсылкиНаОбъекты, ОбъектМетаданных);
	Иначе
		Результат = ОбновитьЭлементыПредопределенныхЭлементов(СсылкиНаОбъекты, ОбъектМетаданных, СписокОбновляемыхРеквизитов)
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ОбъектМетаданных.ПолноеИмя());
	
	Если Результат.ОбъектовОбработано = 0 И Результат.ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедуре %1 не удалось обработать некоторые элементы(пропущены): %2'"),
		"ОбновитьПредставленияПредопределенныхЭлементов",
		Результат.ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
		ОбъектМетаданных,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедура %1 обработала очередную порцию элементов: %2'"),
		"ОбновитьПредставленияПредопределенныхЭлементов",
		Результат.ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыРегистрацииПредопределенныхЭлементов()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимОбновления",         "НовыеИИзмененные");
	ДополнительныеПараметры.Вставить("ПропускатьПустые",         Истина);
	ДополнительныеПараметры.Вставить("СравниватьТабличныеЧасти", Ложь);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ОбновитьЭлементыПредопределенныхЭлементов(СсылкиНаОбъекты, МетаданныеОбъекта, СписокОбновляемыхРеквизитов = "")
	
	Результат = Новый Структура();
	Результат.Вставить("ПроблемныхОбъектов", 0);
	Результат.Вставить("ОбъектовОбработано", 0);
	
	ЛокализуемыеРеквизитыОбъекта = МультиязычныеРеквизитыОбъекта(МетаданныеОбъекта);
	МультиязычныеСтрокиВРеквизитах = МультиязычностьСервер.МультиязычныеСтрокиВРеквизитах(МетаданныеОбъекта);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
	ПредопределенныеДанные = ПредопределенныеДанныеОбъекта(МетаданныеОбъекта, МенеджерОбъекта, ЛокализуемыеРеквизитыОбъекта);
	НастройкиПредопределенныхЭлементов = НастройкиПредопределенныхЭлементов(МенеджерОбъекта, ПредопределенныеДанные);
	
	ТабличныеЧасти = Новый Массив;
	ОбъектМетаданныхТабличныеЧасти = МетаданныеОбъекта.ТабличныеЧасти; // КоллекцияОбъектовМетаданных из ОбъектМетаданныхТабличнаяЧасть
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданныхТабличныеЧасти Цикл
		Если ПредопределенныеДанные.Колонки.Найти(ТабличнаяЧасть.Имя) <> Неопределено Тогда
			ТабличныеЧасти.Добавить(ТабличнаяЧасть.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыИсключения    = ?(СтрНачинаетсяС(МетаданныеОбъекта.ПолноеИмя(), "ПланВидовХарактеристик"), "ТипЗначения", "");
	ПоддерживаетсяИерархия =  ПредопределенныеДанные.Колонки.Найти("ЭтоГруппа") <> Неопределено;
	
	РеквизитыСЭлементами = Новый Массив;
	Если ПоддерживаетсяИерархия Тогда
		ДляЭлемента = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента;
		Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			Если Реквизит.Использование = ДляЭлемента Тогда
				РеквизитыСЭлементами.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Пока СсылкиНаОбъекты.Следующий() Цикл
		
		ИмяПредопределенныхДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкиНаОбъекты.Ссылка, "ИмяПредопределенныхДанных");
		Если Не ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда
			Результат.ОбъектовОбработано = Результат.ОбъектовОбработано + 1;
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкиНаОбъекты.Ссылка);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ПредопределенныеДанные.Найти(ИмяПредопределенныхДанных, "ИмяПредопределенныхДанных");
		
		НачатьТранзакцию();
		
		Попытка
			
			СсылкаНаОбъект = СсылкиНаОбъекты.Ссылка;
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(МетаданныеОбъекта.ПолноеИмя());
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
			БлокировкаДанных.Заблокировать();
			
			ЗаполняемыйЭлемент = СсылкаНаОбъект.ПолучитьОбъект();
			
			КромеРеквизитов = РеквизитыИсключения;
			Если ПоддерживаетсяИерархия И ЗаполняемыйЭлемент.ЭтоГруппа Тогда
				КромеРеквизитов = РеквизитыИсключения
				+ ?(ПустаяСтрока(РеквизитыИсключения), "", ",") + СтрСоединить(РеквизитыСЭлементами, ",");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СписокОбновляемыхРеквизитов) Тогда
				ЗаполнитьЗначенияСвойств(ЗаполняемыйЭлемент, СтрокаТаблицы, СписокОбновляемыхРеквизитов);
			Иначе
				ЗаполнитьЗначенияСвойств(ЗаполняемыйЭлемент, СтрокаТаблицы,, КромеРеквизитов);
			КонецЕсли;
			
			Если НЕ (ПоддерживаетсяИерархия И ЗаполняемыйЭлемент.ЭтоГруппа) Тогда
				Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
					ЗаполняемыйЭлемент[ИмяТабличнойЧасти].Загрузить(СтрокаТаблицы[ИмяТабличнойЧасти]);
				КонецЦикла;
			КонецЕсли;
			
			Если ЛокализуемыеРеквизитыОбъекта.Количество() > 0 Тогда
				ЗаполнитьЭлементыМультиязычнымиНачальнымиДанными(ЗаполняемыйЭлемент, ЛокализуемыеРеквизитыОбъекта, МультиязычныеСтрокиВРеквизитах, ПоддерживаетсяИерархия, СтрокаТаблицы);
			КонецЕсли;
			
			Если НастройкиПредопределенныхЭлементов.ПриНачальномЗаполненииЭлемента Тогда
				МенеджерОбъекта.ПриНачальномЗаполненииЭлемента(ЗаполняемыйЭлемент, СтрокаТаблицы, НастройкиПредопределенныхЭлементов.ДополнительныеПараметры);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаполняемыйЭлемент);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			// Если не удалось обработать элемент, повторяем попытку снова.
			Результат.ПроблемныхОбъектов = Результат.ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось заполнить элемент: %1 по причине: %2'"),
			СсылкиНаОбъекты.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта, СсылкиНаОбъекты.Ссылка, ТекстСообщения);
		КонецПопытки;
		
		Результат.ОбъектовОбработано = Результат.ОбъектовОбработано + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиПредопределенныхЭлементов(МенеджерОбъекта, ПредопределенныеДанные) Экспорт
	
	НастройкиЗаполненияЭлементов = Новый Структура;
	НастройкиЗаполненияЭлементов.Вставить("ПриНачальномЗаполненииЭлемента", Ложь);
	НастройкиЗаполненияЭлементов.Вставить("ДополнительныеПараметры", Новый Структура);
	НастройкиЗаполненияЭлементов.ДополнительныеПараметры.Вставить("ПредопределенныеДанные", ПредопределенныеДанные);
	
	МенеджерОбъекта.ПриНастройкеНачальногоЗаполненияЭлементов(НастройкиЗаполненияЭлементов);
	
	Возврат НастройкиЗаполненияЭлементов;
	
КонецФункции

Функция ПредопределенныеДанныеОбъекта(Знач МетаданныеОбъекта, МенеджерОбъекта, ЛокализуемыеРеквизитыОбъекта) Экспорт
	
	Языки = Новый Массив;
	Для каждого Язык Из Метаданные.Языки Цикл
		Языки.Добавить(Язык.КодЯзыка);
	КонецЦикла;
	
	// Таблица с предопределенными данными
	ПредопределенныеДанные = Новый ТаблицаЗначений;
	ТабличныеЧасти         = Новый Структура;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		ДобавитьКолонкуТаблицыПредопределенныхДанных(ПредопределенныеДанные, Реквизит, ЛокализуемыеРеквизитыОбъекта, Языки);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ДобавитьКолонкуТаблицыПредопределенныхДанных(ПредопределенныеДанные, Реквизит, ЛокализуемыеРеквизитыОбъекта, Языки);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		ПредопределенныеДанные.Колонки.Добавить(ТабличнаяЧасть.Имя, Новый ОписаниеТипов("ТаблицаЗначений"));
		Таблица = Новый ТаблицаЗначений;
		Для Каждого Реквизит Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			ДобавитьКолонкуТаблицыПредопределенныхДанных(Таблица, Реквизит, ЛокализуемыеРеквизитыОбъекта, Языки);
		КонецЦикла;
		
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			ДобавитьКолонкуТаблицыПредопределенныхДанных(Таблица, Реквизит, ЛокализуемыеРеквизитыОбъекта, Языки);
		КонецЦикла;
		ТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя, Таблица);
		
	КонецЦикла;
	
	Если ПредопределенныеДанные.Колонки.Найти("ИмяПредопределенныхДанных") <> Неопределено Тогда
		ПредопределенныеДанные.Индексы.Добавить("ИмяПредопределенныхДанных");
	КонецЕсли;
	
	МенеджерОбъекта.ПриНачальномЗаполненииЭлементов(Языки, ПредопределенныеДанные, ТабличныеЧасти);
	Возврат ПредопределенныеДанные;
	
КонецФункции

Процедура ДобавитьКолонкуТаблицыПредопределенныхДанных(ПредопределенныеДанные, Реквизит, ЛокализуемыеРеквизиты, Языки)
	
	ПредопределенныеДанные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	Если ЛокализуемыеРеквизиты[Реквизит.Имя] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПризнакЛокализуемогоРеквизита = "Локализуемый";
	Для каждого Язык Из Языки Цикл
		ПредопределенныеДанные.Колонки.Добавить(Реквизит.Имя + "_" + Язык, Реквизит.Тип, ПризнакЛокализуемогоРеквизита);
	КонецЦикла;
	
КонецПроцедуры

Функция МультиязычныеРеквизитыОбъекта(ОбъектИлиСсылка) Экспорт
	
	ТипОбъекта = ТипЗнч(ОбъектИлиСсылка);
	
	Если ТипОбъекта = Тип("Строка") Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ОбъектИлиСсылка);
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) Тогда
		МетаданныеОбъекта = ОбъектИлиСсылка.Метаданные();
	Иначе
		МетаданныеОбъекта = ОбъектИлиСсылка;
	КонецЕсли;
	
	Возврат НаименованияЛокализуемыхРеквизитовОбъекта(МетаданныеОбъекта);
	
КонецФункции

// Параметры:
//  ИменаРеквизитовОбъекта - Массив
//  ЛокализуемыеРеквизитыОбъекта - Соответствие
//
Процедура СформироватьИменаМультиязычныхРеквизитов(Знач ИменаРеквизитовОбъекта, Знач ЛокализуемыеРеквизитыОбъекта) Экспорт
	
	СведенияОбЯзыках = Новый Структура;
	
	СведенияОбЯзыках.Вставить("Язык1", МультиязычностьСервер.КодПервогоДополнительногоЯзыкаИнформационнойБазы());
	СведенияОбЯзыках.Вставить("Язык2",  МультиязычностьСервер.КодВторогоДополнительногоЯзыкаИнформационнойБазы());
	СведенияОбЯзыках.Вставить("ОсновнойЯзык", ОбщегоНазначения.КодОсновногоЯзыка());

	
	Для каждого РеквизитОбъекта Из ЛокализуемыеРеквизитыОбъекта Цикл
		
		ИменаРеквизитовОбъекта.Добавить(РеквизитОбъекта.Ключ);
		
		Если ЗначениеЗаполнено(СведенияОбЯзыках.Язык1) Тогда
			ИменаРеквизитовОбъекта.Добавить(РеквизитОбъекта.Ключ + "Язык1");
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОбЯзыках.Язык2) Тогда
			ИменаРеквизитовОбъекта.Добавить(РеквизитОбъекта.Ключ + "Язык2");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НаименованияЛокализуемыхРеквизитовОбъекта(ОбъектМетаданных, Префикс = "")
	
	СписокРеквизитовОбъекта = Новый Соответствие;
	Если МультиязычныеСтрокиВРеквизитах(ОбъектМетаданных) Тогда
	
		ДлинаСуффиксаЯзыка = ДлинаСуффиксаЯзыка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 0
			|	ДанныеИсточника.*
			|ИЗ
			|	" + ОбъектМетаданных.ПолноеИмя() + " КАК ДанныеИсточника"; // @query-part
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ОбъектМетаданных.ПолноеИмя());
		РезультатЗапроса = Запрос.Выполнить();
		
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Если СтрЗаканчиваетсяНа(Колонка.Имя, "Язык1") Или СтрЗаканчиваетсяНа(Колонка.Имя, "Язык2") Тогда
				СписокРеквизитовОбъекта.Вставить(Префикс + Лев(Колонка.Имя, СтрДлина(Колонка.Имя) - ДлинаСуффиксаЯзыка), Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		РеквизитыТабличнойЧастиПредставления = ОбъектМетаданных.ТабличныеЧасти.Представления.Реквизиты; // КоллекцияОбъектовМетаданных из ОбъектМетаданныхРеквизит - 
		Для каждого Реквизит Из РеквизитыТабличнойЧастиПредставления Цикл
			Если СтрСравнить(Реквизит.Имя, "КодЯзыка") = 0 Тогда
				Продолжить;
			КонецЕсли;
			СписокРеквизитовОбъекта.Вставить(Префикс + Реквизит.Имя, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокРеквизитовОбъекта;
	
КонецФункции

Функция МультиязычныеСтрокиВРеквизитах(ОбъектМетаданных) Экспорт
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Если СтрНачинаетсяС(ПолноеИмя, "Справочник")
		Или СтрНачинаетсяС(ПолноеИмя, "Документ")
		Или СтрНачинаетсяС(ПолноеИмя, "ПланВидовХарактеристик")
		Или СтрНачинаетсяС(ПолноеИмя, "Задача")
		Или СтрНачинаетсяС(ПолноеИмя, "БизнесПроцесс")
		Или СтрНачинаетсяС(ПолноеИмя, "Обработка")
		Или СтрНачинаетсяС(ПолноеИмя, "ПланВидовРасчета")
		Или СтрНачинаетсяС(ПолноеИмя, "Отчет")
		Или СтрНачинаетсяС(ПолноеИмя, "ПланСчетов")
		Или СтрНачинаетсяС(ПолноеИмя, "ПланОбмена") Тогда
		Возврат ОбъектМетаданных.ТабличныеЧасти.Найти("Представления") = Неопределено;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДлинаСуффиксаЯзыка()
	
	Возврат СтрДлина("Язык1");
	
КонецФункции

Процедура ЗаполнитьЭлементыМультиязычнымиНачальнымиДанными(Знач ЗаполняемыйЭлемент, Знач ЛокализуемыеРеквизитыОбъекта, Знач МультиязычныеСтрокиВРеквизитах, Знач ПоддерживаетсяИерархия, Знач СтрокаТаблицы)
	
	Языки = Новый Массив;
	Для каждого Язык Из Метаданные.Языки Цикл
		Языки.Добавить(Язык.КодЯзыка);
	КонецЦикла;
	
	СведенияОбЯзыках = Новый Структура;
	
	СведенияОбЯзыках.Вставить("Язык1", МультиязычностьСервер.КодПервогоДополнительногоЯзыкаИнформационнойБазы());
	СведенияОбЯзыках.Вставить("Язык2",  МультиязычностьСервер.КодВторогоДополнительногоЯзыкаИнформационнойБазы());
	СведенияОбЯзыках.Вставить("ОсновнойЯзык", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если МультиязычныеСтрокиВРеквизитах Тогда
		
		КодЯзыка =СведенияОбЯзыках.ОсновнойЯзык;;
		Если ЗначениеЗаполнено(КодЯзыка) Тогда
			Для каждого ИмяЛокализуемогоРеквизита Из ЛокализуемыеРеквизитыОбъекта Цикл
				ЗаполняемыйЭлемент[ИмяЛокализуемогоРеквизита.Ключ] = СтрокаТаблицы[ИмяЛокализуемогоРеквизита.Ключ + "_" + КодЯзыка];
			КонецЦикла;
		КонецЕсли;
		
		КодЯзыка = СведенияОбЯзыках.Язык1;
		Если ЗначениеЗаполнено(КодЯзыка) Тогда
			Для каждого ИмяЛокализуемогоРеквизита Из ЛокализуемыеРеквизитыОбъекта Цикл
				ЗаполняемыйЭлемент[ИмяЛокализуемогоРеквизита.Ключ + "Язык1"] = СтрокаТаблицы[ИмяЛокализуемогоРеквизита.Ключ + "_" + КодЯзыка];
			КонецЦикла;
		КонецЕсли;
		
		КодЯзыка = СведенияОбЯзыках.Язык2;
		Если ЗначениеЗаполнено(КодЯзыка) Тогда
			Для каждого ИмяЛокализуемогоРеквизита Из ЛокализуемыеРеквизитыОбъекта Цикл
				ЗаполняемыйЭлемент[ИмяЛокализуемогоРеквизита.Ключ + "Язык2"] = СтрокаТаблицы[ИмяЛокализуемогоРеквизита.Ключ + "_" + КодЯзыка];
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Не (ПоддерживаетсяИерархия И ЗаполняемыйЭлемент.ЭтоГруппа) Тогда
		
		Для каждого КодЯзыка Из Языки Цикл
			ТаблицаПредставлений = ЗаполняемыйЭлемент.Представления; // ТаблицаЗначений
			НовоеПредставление = ТаблицаПредставлений.Добавить();
			НовоеПредставление.КодЯзыка = КодЯзыка;
			Для каждого ИмяЛокализуемогоРеквизита Из ЛокализуемыеРеквизитыОбъекта Цикл
				Значение = СтрокаТаблицы[ИмяЛокализуемогоРеквизита.Ключ + "_" + КодЯзыка];
				НовоеПредставление[ИмяЛокализуемогоРеквизита.Ключ] = ?(ЗначениеЗаполнено(Значение), Значение, СтрокаТаблицы[ИмяЛокализуемогоРеквизита.Ключ]);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ОбновитьМультиязычныеСтрокиПредопределенныхЭлементов(СсылкиНаОбъекты, ОбъектМетаданных) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПроблемныхОбъектов", 0);
	Результат.Вставить("ОбъектовОбработано", 0);
	
	НастройкиОбновление = НастройкиОбновлениеПредопределенныхДанных(ОбъектМетаданных);
	
	Пока СсылкиНаОбъекты.Следующий() Цикл
		
		Попытка
			
			ОбновитьМультиязычныеСтрокиПредопределенногоЭлемента(СсылкиНаОбъекты, НастройкиОбновление);
			Результат.ОбъектовОбработано = Результат.ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать элемент, повторяем попытку снова.
			Результат.ПроблемныхОбъектов = Результат.ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать элемент: %1 по причине: %2'"),
				СсылкиНаОбъекты.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			ОбъектМетаданных, СсылкиНаОбъекты.Ссылка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиОбновлениеПредопределенныхДанных(ОбъектМетаданных) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЛокализуемыеРеквизитыОбъекта", Новый Соответствие);
	Результат.Вставить("КодЯзыка1", МультиязычностьСервер.КодПервогоДополнительногоЯзыкаИнформационнойБазы());
	Результат.Вставить("КодЯзыка2", МультиязычностьСервер.КодВторогоДополнительногоЯзыкаИнформационнойБазы());
	Результат.Вставить("ОсновнойЯзык", ОбщегоНазначения.КодОсновногоЯзыка());
	Результат.Вставить("ИмяОбъектМетаданных", ОбъектМетаданных.ПолноеИмя());
	Результат.Вставить("ПредопределенныеДанные", Неопределено);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Результат.ИмяОбъектМетаданных);
	
	Результат.ЛокализуемыеРеквизитыОбъекта = НаименованияЛокализуемыхРеквизитовОбъекта(ОбъектМетаданных);
	Результат.ПредопределенныеДанные = ПредопределенныеДанныеОбъекта(ОбъектМетаданных, МенеджерОбъекта, Результат.ЛокализуемыеРеквизитыОбъекта);
	
	НастройкиПредопределенныхЭлементов(МенеджерОбъекта, Результат.ПредопределенныеДанные);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьМультиязычныеСтрокиПредопределенногоЭлемента(СсылкаНаОбъект, НастройкиОбновления) Экспорт
	
	ИмяПредопределенныхДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект.Ссылка, "ИмяПредопределенныхДанных");
	Если Не ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект.Ссылка);
		Возврат;
	КонецЕсли;
	
	Элемент = НастройкиОбновления.ПредопределенныеДанные.Найти(ИмяПредопределенныхДанных, "ИмяПредопределенныхДанных");
	Если Элемент <> Неопределено Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(НастройкиОбновления.ИмяОбъектМетаданных);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = СсылкаНаОбъект.Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда // объект может быть уже удален в других сеансах
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ЗаблокироватьДанныеДляРедактирования(СсылкаНаОбъект.Ссылка);
			
			Для каждого ЛокализуемыйРеквизитОбъекта Из НастройкиОбновления.ЛокализуемыеРеквизитыОбъекта Цикл
				Имя = ЛокализуемыйРеквизитОбъекта.Ключ;
				Объект[Имя] = Элемент[ИмяЛокализуемогоРеквизита(Имя, НастройкиОбновления.ОсновнойЯзык)];
				
				Если Константы.ИспользоватьДополнительныйЯзык1.Получить() Тогда
					Объект[Имя + "Язык1"] = Элемент[ИмяЛокализуемогоРеквизита(Имя, НастройкиОбновления.КодЯзыка1)];
				КонецЕсли;
				Если Константы.ИспользоватьДополнительныйЯзык2.Получить() Тогда
					Объект[Имя + "Язык2"] = Элемент[ИмяЛокализуемогоРеквизита(Имя, НастройкиОбновления.КодЯзыка2)];
				КонецЕсли;
				
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Функция ИмяЛокализуемогоРеквизита(ИмяРеквизита, КодЯзыка)
	
	Возврат ИмяРеквизита + "_" + КодЯзыка;
	
КонецФункции

Функция ДанныеСодержатОтличия(ДанныеЗапроса, ИмяРеквизитОбъекта, ПоставляемыеСведения, ЛокализуемыеРеквизитыОбъекта, ПараметрыРегистрации)
	
	Для каждого ИмяРеквизитаОбъекта Из ИмяРеквизитОбъекта Цикл
		
		Если СтрСравнить(ИмяРеквизитаОбъекта, "Предопределенный") = 0
			Или СтрСравнить(ИмяРеквизитаОбъекта, "Ссылка") = 0 Тогда
				Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаБезСуффиксаЯзык= ИмяРеквизитаБезСуффиксаЯзык(ИмяРеквизитаОбъекта);
		Если ЛокализуемыеРеквизитыОбъекта[ИмяРеквизитаБезСуффиксаЯзык] = Неопределено Тогда
		
			Если ТипЗнч(ПоставляемыеСведения[ИмяРеквизитаОбъекта]) = Тип("ТаблицаЗначений")
				И ТипЗнч(ДанныеЗапроса[ИмяРеквизитаОбъекта]) = Тип("РезультатЗапроса") Тогда
				
				Если ПараметрыРегистрации.СравниватьТабличныеЧасти Тогда
					ТаблицаДанных = ДанныеЗапроса[ИмяРеквизитаОбъекта].Выгрузить();
					Если Не ОбщегоНазначения.КоллекцииИдентичны(ПоставляемыеСведения[ИмяРеквизитаОбъекта], ТаблицаДанных) Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Если ПараметрыРегистрации.ПропускатьПустые И ПустаяСтрока(ПоставляемыеСведения[ИмяРеквизитаОбъекта]) Тогда
					Продолжить;
				КонецЕсли;
				Если ПоставляемыеСведения[ИмяРеквизитаОбъекта] <> ДанныеЗапроса[ИмяРеквизитаОбъекта] Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		
		Иначе
			
			Если МультиязычныеСтрокиРеквизитаИзменены(ПоставляемыеСведения, ДанныеЗапроса,
					ИмяРеквизитаБезСуффиксаЯзык, ПараметрыРегистрации) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИмяРеквизитаБезСуффиксаЯзык(Знач ИмяРеквизита) Экспорт
	
	Если ЭтоЛокализуемыйРеквизит(ИмяРеквизита) Тогда
		Возврат Лев(ИмяРеквизита, СтрДлина(ИмяРеквизита) - ДлинаСуффиксаЯзыка());
	КонецЕсли;
	
	Возврат ИмяРеквизита;
	
КонецФункции

// Параметры:
//  Реквизит - ОбъектМетаданныхРеквизит
//           - ОписаниеСтандартногоРеквизита
//
Функция ЭтоЛокализуемыйРеквизит(ИмяРеквизита)
	Возврат СтрЗаканчиваетсяНа(ИмяРеквизита, "Язык1") Или СтрЗаканчиваетсяНа(ИмяРеквизита, "Язык2");
КонецФункции

Функция МультиязычныеСтрокиРеквизитовИзменены(ПоставляемыеСведения, ДанныеЗапроса, ЛокализуемыеРеквизитыОбъекта, ПараметрыРегистрации) Экспорт
	
	Для каждого ОписаниеРеквизита Из ЛокализуемыеРеквизитыОбъекта Цикл
		
		Если МультиязычныеСтрокиРеквизитаИзменены(ПоставляемыеСведения, ДанныеЗапроса,
				ОписаниеРеквизита.Ключ, ПараметрыРегистрации) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция МультиязычныеСтрокиРеквизитаИзменены(ПоставляемыеСведения, ДанныеЗапроса, ИмяРеквизита, ПараметрыРегистрации) Экспорт
	
	СведенияОбЯзыках = Новый Структура;
	
	СведенияОбЯзыках.Вставить("Язык1", МультиязычностьСервер.КодПервогоДополнительногоЯзыкаИнформационнойБазы());
	СведенияОбЯзыках.Вставить("Язык2",  МультиязычностьСервер.КодВторогоДополнительногоЯзыкаИнформационнойБазы());
	СведенияОбЯзыках.Вставить("ОсновнойЯзык", ОбщегоНазначения.КодОсновногоЯзыка());

	
	ЗначениеОсновногоЯзыка = ПоставляемыеСведения[ИмяЛокализуемогоРеквизита(ИмяРеквизита, СведенияОбЯзыках.ОсновнойЯзык)];
	Если ПустаяСтрока(ЗначениеОсновногоЯзыка) И ЗначениеЗаполнено(ПоставляемыеСведения[ИмяРеквизита]) Тогда
		ЗначениеОсновногоЯзыка = ПоставляемыеСведения[ИмяРеквизита];
	КонецЕсли;
	
	Если СтрСравнить(ЗначениеОсновногоЯзыка, ДанныеЗапроса[ИмяРеквизита]) <> 0 Тогда
		
		Если ПустаяСтрока(ЗначениеОсновногоЯзыка) Тогда
			Если Не ПараметрыРегистрации.ПропускатьПустые Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбЯзыках.Язык1)
		И СтрСравнить(ПоставляемыеСведения[ИмяЛокализуемогоРеквизита(ИмяРеквизита, СведенияОбЯзыках.Язык1)], ДанныеЗапроса[ИмяРеквизита + "Язык1"]) <> 0  Тогда
		
		Если ПустаяСтрока(ПоставляемыеСведения[ИмяЛокализуемогоРеквизита(ИмяРеквизита, СведенияОбЯзыках.Язык1)]) Тогда
			Если Не ПараметрыРегистрации.ПропускатьПустые Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбЯзыках.Язык2)
		И СтрСравнить(ПоставляемыеСведения[ИмяЛокализуемогоРеквизита(ИмяРеквизита, СведенияОбЯзыках.Язык2)], ДанныеЗапроса[ИмяРеквизита + "Язык2"]) <> 0  Тогда
		
		Если ПустаяСтрока(ПоставляемыеСведения[ИмяЛокализуемогоРеквизита(ИмяРеквизита, СведенияОбЯзыках.Язык2)]) Тогда
			Если Не ПараметрыРегистрации.ПропускатьПустые Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

Процедура ОбновитьКонтактнуюИнформациюДляСписков(Параметры) Экспорт
	
	ОбъектыМетаданных = МассивОбъектовМетаданныхДляОбработки();
	
	Для каждого Объект Из ОбъектыМетаданных Цикл
	
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, Объект.ПолноеИмя());
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
					
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(Объект.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
								
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				Если СпрОбъект = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюДляСписков(СпрОбъект);
				
				Если Объект = Метаданные.Справочники.Контрагенты 
					И СпрОбъект.СтранаРегистрации.Пустая()
					И НЕ СпрОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
					
					СпрОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
					
				КонецЕсли;

				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось заполнить вид контактной информации для списка у элемента: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Объект,
				Выборка.Ссылка,
				ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
	
	КонецЦикла;
	
	МассивИмен = Новый Массив;
	Для каждого Объект Из ОбъектыМетаданных Цикл
		МассивИмен.Добавить(Объект.ПолноеИмя());
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, МассивИмен);		
	
КонецПроцедуры

Функция МассивОбъектовМетаданныхДляОбработки()
	
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.КонтактныеЛицаПартнеров);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Контрагенты);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Организации);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Партнеры);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Пользователи);
	//++ Локализация
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.РегистрацииВНалоговомОргане);
	//-- Локализация
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Склады);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.ФизическиеЛица);
		
	Возврат ОбъектыМетаданных;
	
КонецФункции

// Заполняет пустое поле объекта значением реквизита по умолчанию. 
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ЗначениеРеквизита	 - Произвольный - значение заполняемого реквизита. При обработке проверяется - если значение реквизита в объекте
//							не равно пустому, то объект отмечается обработанным без изменения реквизита.
//
Процедура ЗаполнитьПустойРеквизитЗначениемПоУмолчанию(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ПустоеЗначение = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита).Тип.ПривестиЗначение();
	
	ЗаменитьЗначениеРеквизита(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ПустоеЗначение, ЗначениеРеквизита);
	
КонецПроцедуры

// Регистрирует к обработке объекты с пустым значением реквизита
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита.
//
Процедура ЗаполнитьПустойРеквизитЗначениемПоУмолчаниюЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита) Экспорт
  
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ПустоеЗначение = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита).Тип.ПривестиЗначение();
	
	ЗаменитьЗначениеРеквизитаЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ПустоеЗначение);
КонецПроцедуры

// Заполняет пустое поле объекта значением реквизита по умолчанию. 
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ИсходноеЗначение	 - Произвольный - исходное значение реквизита. Если на момент обработки в объекте будет другое значение,
//										то он будет отмечен обработанным без изменения реквизита.
//  КонечноеЗначение	 - Произвольный - новое значение реквизита, которое будет присвоено при обработке.
//
Процедура ЗаменитьЗначениеРеквизита(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ИсходноеЗначение, КонечноеЗначение) Экспорт
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если Объект[ИмяРеквизита] <> ИсходноеЗначение Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
			Иначе
				Объект[ИмяРеквизита] = КонечноеЗначение;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			КонецЕсли;
			
		    ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Регистрирует к обработке объекты, у которых реквизит имеет переданное значение.
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ИсходноеЗначение	 - Произвольный - к обработке будут отмечены реквизиты.
//
Процедура ЗаменитьЗначениеРеквизитаЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ИсходноеЗначение) Экспорт
  
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОбъекта.Ссылка КАК Ссылка 
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.ИмяРеквизита = &ИсходноеЗначение";
		
	Запрос.УстановитьПараметр("ИсходноеЗначение", ИсходноеЗначение);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяРеквизита", ИмяРеквизита);
	
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Регистрация объектов для изменения
//
Процедура ЗаполнитьСписокВидовКонтактнойИнформацииКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ВидыКОбработке = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ВидыКОбработке);
	
КонецПроцедуры

// Установка наименований видов КИ на других языках 
//
Процедура ОбработатьВидыКонтактнойИнформацииУТ(Параметры) Экспорт
	
	ВидКИ = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.ВидыКонтактнойИнформации");
	Наименования = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.НаименованияВидовКонтактнойИнформации();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока ВидКИ.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыКонтактнойИнформации");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВидКИ.Ссылка);
			Блокировка.Заблокировать();
			
			ВидКИОбъект = ВидКИ.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВидыКонтактнойИнформации - 
			
			ИмяВида = ?(ЗначениеЗаполнено(ВидКИОбъект.ИмяПредопределенногоВида), ВидКИОбъект.ИмяПредопределенногоВида, ВидКИОбъект.ИмяПредопределенныхДанных);
			Для каждого Язык Из Метаданные.Языки Цикл
				Если Язык = Метаданные.ОсновнойЯзык Тогда
					Продолжить;
				КонецЕсли;
				
				Представление = Наименования[Язык.КодЯзыка][ИмяВида];
				Если ЗначениеЗаполнено(Представление) Тогда
					
					Если ВидКИОбъект.Представления.Найти(Язык.КодЯзыка, "КодЯзыка") = Неопределено Тогда
						НоваяСтрока = ВидКИОбъект.Представления.Добавить();
						НоваяСтрока.КодЯзыка     = Язык.КодЯзыка;
						НоваяСтрока.Наименование = Представление;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВидКИОбъект.ЭтоГруппа И ВидКИОбъект.Предопределенный Тогда
				ГруппаКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыГруппыВидаКонтактнойИнформации();
				ГруппаКонтактнойИнформации.Имя = ИмяВида;
			
				УправлениеКонтактнойИнформацией.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ГруппаКонтактнойИнформации);
				
				ОтметитьДублиГруппПредопределенныхЭлементов(ИмяВида, Параметры.Очередь);
				
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидКИОбъект);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			// Если не удалось обработать страну мира, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать вид контактной информации: %1 по причине: %2'"),
					ВидКИ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ВидыКонтактнойИнформации, ВидКИ.Ссылка, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Справочник.ВидыКонтактнойИнформации");
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре %1 не удалось обработать некоторые виды контактной информации (пропущены): %2'"),
				"ОбработатьВидыКонтактнойИнформацииУТ",
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.ВидыКонтактнойИнформации,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Процедура %1 обработала очередную порцию видов КИ: %2'"),
					"ОбработатьВидыКонтактнойИнформацииУТ",
					ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьДублиГруппПредопределенныхЭлементов(ИмяПредопределенногоВида, ТекущаяОчередь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации.Изменения КАК ВидыКонтактнойИнформацииИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформацииИзменения.Ссылка = ВидыКонтактнойИнформации.Ссылка
	|ГДЕ
	|	ВидыКонтактнойИнформации.ИмяПредопределенногоВида = &ИмяПредопределенногоВида
	|	И ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформацииИзменения.Узел = &ТекущаяОчередь";
	
	Запрос.УстановитьПараметр("ИмяПредопределенногоВида", ИмяПредопределенногоВида);
	Запрос.УстановитьПараметр("ТекущаяОчередь", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(ТекущаяОчередь));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СсылкаНаОбъект = ВыборкаДетальныеЗаписи.Ссылка;
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыКонтактнойИнформации");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
			Блокировка.Заблокировать();
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОНеудачнойБлокировке(Ссылка) Экспорт
	ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Ссылка);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Ссылка.Метаданные(),
							Ссылка,
							ТекстСообщения);
КонецПроцедуры

Процедура ЗаполнитьЗначениеРазделенияПоОбластямДанных() Экспорт
	
	Если Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Установить(Константы.КомплекснаяАвтоматизация.Получить());
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Установить(Константы.УправлениеТорговлей.Получить());
	Иначе
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Установить(Ложь);
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область УстановкаКонстанты_ИспользоватьУчетСебестоимости

Процедура УстановитьКонстантуИспользоватьУчетСебестоимости() Экспорт
	
	Если Константы.ИспользоватьУчетСебестоимости.Получить() Тогда
		Возврат; // уже установлена
	КонецЕсли;
	Константы.ИспользоватьУчетСебестоимости.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область УстановитьКонстанту_ИспользуетсяЦенообразование20

Процедура УстановитьКонстантуИспользуетсяЦенообразование20() Экспорт
	
	Если Константы.ИспользуетсяЦенообразование25.Получить() Тогда
		Возврат; // уже установлена
	КонецЕсли;
	Константы.ИспользуетсяЦенообразование20.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьПорчуТоваровУХранителей

Процедура УстановитьКонстантуИспользоватьПорчуТоваровУХранителей() Экспорт
	
	Константы.ИспользоватьПорчуТоваровУХранителей.Установить(
		Константы.ИспользоватьКачествоТоваров.Получить()
		И (Константы.ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи.Получить()
			Или Ложь));
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_МеждународныеРеквизитыБанковскихСчетов

Процедура УстановитьКонстантуМеждународныеРеквизитыБанковскихСчетов() Экспорт
	
	Если Константы.МеждународныеРеквизитыБанковскихСчетов.Получить() Тогда
		Возврат; // уже установлена
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоРеализации

Процедура УстановитьКонстантуИспользоватьОперацииСводнойКорректировкиЗадолженностиПоРеализации() Экспорт
	
	ЗначениеКонстанты = Истина;
	//++ Локализация
	// В версии для РФ значение константы должно быть Ложь
	ЗначениеКонстанты = Ложь;
	//-- Локализация
	
	Если Константы.ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоРеализации.Получить() <> ЗначениеКонстанты Тогда
		Константы.ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоРеализации.Установить(ЗначениеКонстанты);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ОсновнаяСтрана

Процедура УстановитьКонстантуОсновнаяСтрана() Экспорт
	
	ЭтоМеждународная = Истина;
	//++ Локализация
	ЭтоМеждународная = Ложь;
	//-- Локализация
	
	Если Не ЭтоМеждународная Тогда
		Константы.ОсновнаяСтрана.Установить(Справочники.СтраныМира.Россия);
	Иначе
		ДанныеСтранРегистрации = Справочники.Организации.ДанныеСтранРегистрацииОрганизаций(ЭтоМеждународная);
		
		Если ДанныеСтранРегистрации <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДанныеСтранРегистрации.СтранаРегистрации) Тогда
				Константы.ОсновнаяСтрана.Установить(ДанныеСтранРегистрации.СтранаРегистрации);
			Иначе
				Константы.ОсновнаяСтрана.Установить(Справочники.СтраныМира.Россия);
			КонецЕсли;
		Иначе
			Константы.ОсновнаяСтрана.Установить(Справочники.СтраныМира.Россия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоПриобретению

Процедура УстановитьКонстантуИспользоватьОперацииСводнойКорректировкиЗадолженностиПоПриобретению() Экспорт
	
	ЗначениеКонстанты = Истина;
	//++ Локализация
	// В версии для РФ значение константы должно быть Ложь
	ЗначениеКонстанты = Ложь;
	//-- Локализация
	
	Если Константы.ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоПриобретению.Получить() <> ЗначениеКонстанты Тогда
		Константы.ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоПриобретению.Установить(ЗначениеКонстанты);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьМногострановойУчет

Процедура УстановитьКонстантуИспользоватьМногострановойУчет_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура УстановитьКонстантуИспользоватьМногострановойУчет(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.СтранаРегистрации) КАК КоличествоСтран
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.КоличествоСтран > 1 Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьМногострановойУчет");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				МенеджерЗначения = Константы.ИспользоватьМногострановойУчет.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось включить использование многостранного учета: %1'");
				
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Константы.ИспользоватьМногострановойУчет,,
				СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))
				);
				
				ОбработкаЗавершена = Ложь;
				
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
		
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

// Процедура обновления ИБ для справочника видов контактной информации.
//
// Инструкция:
// Для каждого объекта, владельца КИ, для каждого соответствующего ему вида КИ добавить 
// строчку вида: ОбновитьВидКИ(.....). При этом,
// важен порядок в котором будут осуществляться эти вызовы, чем раньше вызов для вида КИ,
// тем выше этот вид КИ будет располагаться на форме объекта.
//
// Параметры функции УправлениеКонтактнойИнформацией.ОбновитьВидКИ:
// 1. Вид КИ - Ссылка на предопределенный вид КИ.
// 2. Тип КИ - Ссылка на перечисление
// 3. МожноИзменятьСпособРедактирования  - Определяет, можно ли в режиме Предприятие изменить способ редактирования,
//                                         например, для адресов, которые попадают в регл. отчетность, нужно
//                                         запретить возможность изменения.
// 4. РедактированиеТолькоВДиалоге       - Если установить Истина, то будет значение вида КИ можно будет
//                                         редактировать только в форме ввода (имеет смысл только для
//                                         адресов, телефонов и факсов).
// 5. АдресТолькоРоссийский              - Если установить Истина, то для адресов можно будет ввести 
//                                         только российский адрес (имеет смысл только для адресов).
// 6. Порядок                            - Определяет порядок элемента, для сортировки относительно других
//
//
Процедура ЗаполнитьСвойстваВидовКонтактнойИнформации() Экспорт
	
	// СтандартныеПодсистемы 
	// СтандартныеПодсистемы.Пользователи
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПользователя,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 1);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 2);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.Организации
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь, Истина, 12);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 13);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                	Истина, Ложь,   Ложь, 14);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь,   Ложь, 15);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Факс,                  	Истина, Ложь,   Ложь, 16);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь,   Ложь, 17);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 18);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Другое,                	Истина, Ложь,   Ложь, 19);
	// Конец СтандартныеПодсистемы.Организации
	// Конец СтандартныеПодсистемы 
	
	// Справочник "Контрагенты"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 3);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 4);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 5);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 6);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Телефон, 					Истина, Ложь, Ложь, 7);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты,
		Перечисления.ТипыКонтактнойИнформации.Факс, 					Истина, Ложь, Ложь, 8);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 9);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты,
		Перечисления.ТипыКонтактнойИнформации.Другое, 					Истина, Ложь, Ложь, 10);
	
	// Справочник "Партнеры"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПартнера,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь, Ложь, 6);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 7);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПартнера,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 8);
	
	// Справочник "Контактные лица партнеров"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 9);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 10);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 11);
	
	// Справочник "Физические лица"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина, Ложь, Ложь, 19);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 20);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 22);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 23);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 24);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 25);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 26);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 27);
	
	// Справочник "Склады"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресСклада,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                   	Истина, Ложь, Ложь, 28);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонСклада,
		Перечисления.ТипыКонтактнойИнформации.Телефон,                 	Истина, Ложь, Ложь, 29);
	
	// Справочник "Регистрации в налоговом органе"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресНалоговогоОргана,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 30);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонНалоговогоОргана,
		Перечисления.ТипыКонтактнойИнформации.Телефон, 					Истина, Ложь, Ложь, 31);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОбособленногоПодразделения,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 32);

	// Справочник "Торговые точки"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                    Истина, Ложь, Ложь, 33);
	
КонецПроцедуры

Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, АдресТолькоРоссийский, Порядок = Неопределено, МеждународныйФорматАдреса = Ложь)

	НастройкиПроверки = Новый Структура;
	НастройкиПроверки.Вставить("АдресТолькоРоссийский", 		АдресТолькоРоссийский);
	НастройкиПроверки.Вставить("ПроверятьКорректность", 		Ложь);
	НастройкиПроверки.Вставить("ЗапрещатьВводНекорректного", 	Ложь);
	НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", 	Ложь);
	НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", 	Ложь);
	НастройкиПроверки.Вставить("ТелефонCДобавочнымНомером", 	Истина);
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Тип);
	ПараметрыВида.Вид = ВидКИ;
	ПараметрыВида.Тип = Тип;
	ПараметрыВида.Порядок = Порядок;
	ПараметрыВида.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	ПараметрыВида.РедактированиеТолькоВДиалоге = РедактированиеТолькоВДиалоге;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.НастройкиПроверки = НастройкиПроверки;
	ПараметрыВида.МеждународныйФорматАдреса = МеждународныйФорматАдреса;
	
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

#КонецОбласти

// Возвращает параметры выборки для СледующаяВыборкаИлиСтрокаТаблицыЗначений().
//
// Возвращаемое значение:
//  Структура - индексы для обхода таблиц с данными для обновления:
//   * ИндексПорции - Число - индекс строки в таблице порций;
//   * ИндексСтрокиВПорции - Число - индекс строки данных в порции.
//   * ТипыДокументов - Соответствие - см. ОбновлениеИнформационнойБазыУТ.МассивИменВСоответствиеТипов.
//   * ИмяПоляРегистратор - Строка - обычно "Регистратор", но может быть, например, и "Ссылка".
//
Функция НовыеПараметрыВыборки()
	
	ПараметрыВыборки = Новый Структура;
	ПараметрыВыборки.Вставить("ИндексПорции", 0);
	ПараметрыВыборки.Вставить("ИндексСтрокиВПорции", 0);
	ПараметрыВыборки.Вставить("ТипыДокументов", Новый Соответствие);
	ПараметрыВыборки.Вставить("ИмяПоляРегистратор", "Регистратор");
	
	Возврат ПараметрыВыборки;
	
КонецФункции

// Преобразование массива имен в соответствие типов с этими именами.
//
// Параметры:
//  Имена - Массив - имена (например: документов).
//  ПрефиксТипа - Строка - префикс для формирования полного имени типа (например: "ДокументСсылка").
//  ИндексИмени - Число - индекс имени типа, отсчитываемый с 0 (например: 1 в "Документ.ИмяДокумента").
//
// Возвращаемое значение:
//  Соответствие:
//   Ключ - Тип - сформированный тип.
//   Значение - Булево - Истина.
//
Функция МассивИменВСоответствиеТипов(Имена, ПрефиксТипа, ИндексИмени)
	
	СоответствиеТипов = Новый Соответствие;
	
	Если ТипЗнч(Имена) = Тип("Массив") Тогда
		ТипСтрока = Тип("Строка");
		Шаблон = "%1.%2";
		
		Для Каждого Имя Из Имена Цикл
			Если ТипЗнч(Имя) = ТипСтрока Тогда
				Состав = СтрРазделить(Имя, ".");
				
				Если Состав.ВГраница() >= ИндексИмени Тогда
					ИмяТипа = СокрЛП(Состав[ИндексИмени]);
					Тип = Тип(СтрШаблон(Шаблон, ПрефиксТипа, ИмяТипа));
					СоответствиеТипов[Тип] = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеТипов;
	
КонецФункции

// Итератор по выборке запроса или таблице значений.
//
// Если параметр Выборка имеет тип "ВыборкаИзРезультатаЗапроса", то в этом параметре будут данные из выборки.
// Иначе выборка выполняется из параметра Таблица, но данные для обработки все равно помещаются в параметр Выборка.
// Применим для выборки из запроса или таблицы значений в одном цикле.
//
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка запроса.
//          - СтрокаТаблицыЗначений - возвращаемое значение, если выборка выполняется из таблицы значений.
//  ОбновляемыеДанные - Структура - см. ОбновлениеИнформационнойБазыСлужебный.НоваяПорцияДляОбновления.
//                      Используется, если Выборка не задана (равна Неопределено).
//  ПараметрыВыборки - Структура - см. НовыеПараметрыВыборки().
//
// Возвращаемое значение:
//  Булево - Истина, если Выборка (возвращаемое значение) содержит данные для обработки.
//
Функция СледующаяВыборкаИлиСтрокаТаблицыЗначений(Выборка, ОбновляемыеДанные, ПараметрыВыборки)
	
	Если ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Возврат Выборка.Следующий();
	Иначе
		ИндексПорции = ПараметрыВыборки.ИндексПорции;
		ИндексСтрокиВПорции = ПараметрыВыборки.ИндексСтрокиВПорции;
		ТипыДокументов = ПараметрыВыборки.ТипыДокументов;
		ИмяПоляРегистратор = ПараметрыВыборки.ИмяПоляРегистратор;
		Выбран = Ложь;
		
		Пока Не Выбран Цикл
			Если ИндексПорции >= ОбновляемыеДанные.НаборДанных.Количество() Или ИндексПорции < 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Порция = ОбновляемыеДанные.НаборДанных[ИндексПорции].Данные;
			РазмерПорции = Порция.Количество();
			
			Если ИндексСтрокиВПорции >= РазмерПорции Или ИндексСтрокиВПорции < 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ПредварительнаяВыборка = Порция[ИндексСтрокиВПорции];
			ТипДокумента = ТипЗнч(ПредварительнаяВыборка[ИмяПоляРегистратор]);
			
			Если ТипыДокументов.Количество() = 0 Или ТипыДокументов[ТипДокумента] = Истина Тогда
				Выборка = ПредварительнаяВыборка;
				Выбран = Истина;
			КонецЕсли;
			
			ПараметрыВыборки.ИндексСтрокиВПорции = ПараметрыВыборки.ИндексСтрокиВПорции + 1;
			
			Если ПараметрыВыборки.ИндексСтрокиВПорции >= РазмерПорции Тогда
				ПараметрыВыборки.ИндексПорции = ПараметрыВыборки.ИндексПорции + 1;
				ПараметрыВыборки.ИндексСтрокиВПорции = 0;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Получить имена документов в виде массива.
//
// Параметры:
//  ПолныеИменаДокументов - Строка, Массив, Неопределено - имя документа, по которому нужно переформировать движения.
//                          Например, "Документ.ПриходныйОрдерНаТовары".
//                          Если документов несколько, то нужно передать их имена в массиве.
//
// Возвращаемое значение:
//  Массив - полные имена документов.
//
Функция ИменаДокументовВМассив(ПолныеИменаДокументов)
	
	Если ТипЗнч(ПолныеИменаДокументов) = Тип("Строка") Тогда
		СписокДокументов = СтрРазделить(ПолныеИменаДокументов, ",", Ложь);
		
		Для Индекс = 0 По СписокДокументов.ВГраница() Цикл
			СписокДокументов[Индекс] = СокрЛП(СписокДокументов[Индекс]);
		КонецЦикла;
	Иначе
		СписокДокументов = ПолныеИменаДокументов;
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции


// Получить имена регистров в виде массива.
//
// Параметры:
//  ПолныеИменаРегистров - Строка, Массив - имя регистра, по которому нужно переформировать движения.
//                         Например, "РегистрНакопления.ТоварыНаСкладах".
//                         Если регистров несколько, то их имена нужно передать в массиве.
//
// Возвращаемое значение:
//  Массив - полные имена регистров.
//
Функция ИменаРегистровВМассив(ПолныеИменаРегистров)
	
	Если ТипЗнч(ПолныеИменаРегистров) = Тип("Строка") Тогда
		СписокРегистров = СтрРазделить(ПолныеИменаРегистров, ",", Ложь);
	Иначе
		СписокРегистров = ПолныеИменаРегистров;
	КонецЕсли;
	
	Возврат СписокРегистров;
	
КонецФункции

// Обновить подсистему ПодключаемоеОборудование.
//
Процедура ОбновлениеПодсистемПодключаемоеОборудование() Экспорт

	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
	    Запись = РегистрыСведений.ВерсииПодсистемОбластейДанных.СоздатьМенеджерЗаписи();
	Иначе
	    Запись = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
	КонецЕсли;
    Запись.ИмяПодсистемы = "ПодключаемоеОборудование";
    Запись.Удалить();		

КонецПроцедуры

// Проверяет правильность заполнения первой цифры версии.
//
// Параметры:
//   ИтерацииОбновления     - Массив - массив структур, описывающих сведения об обновлении каждой
//                                     библиотеки и конфигурации, с ключами:
//       * Подсистема              - Строка - имя библиотеки или конфигурации.
//       * Версия                  - Строка - например, "2.1.3.39". Номер версии библиотеки (конфигурации).
//       * ЭтоОсновнаяКонфигурация - Булево - Истина, если это основная конфигурация, а не библиотека.
//       * Обработчики             - ТаблицаЗначений - все обработчики обновления библиотеки, описание колонок
//                                   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ВыполненныеОбработчики  - ДеревоЗначений - выполненные обработчики обновления, сгруппированные по
//                                   библиотеке и номеру версии, описание колонок
//                                   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ИмяОсновногоСерверногоМодуля - Строка - имя модуля библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ОсновнойСерверныйМодуль      - ОбщийМодуль - общий модуль библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ПредыдущаяВерсия             - Строка - например, "2.1.3.30". Номер версии библиотеки (конфигурации) до обновления.
//
Процедура ПроверитьНомераВерсий(ИтерацииОбновления) Экспорт
	
	Обработка = Обработки.ОписаниеОбработчиковОбновления.Создать();
	ОшибкиВерсии = Новый Массив;
	Для Каждого Подсистема Из Обработка.РазрабатываемыеПодсистемы() Цикл
		Для Каждого Итерация Из ИтерацииОбновления Цикл
			Если Подсистема <> Итерация.Подсистема Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрЧислоВхождений(Итерация.Версия, ".") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПерваяЦифраВерсии = СтрРазделить(Итерация.Версия,".")[0];
			Ошибки = Новый Массив;
			Для Каждого Обработчик Из Итерация.Обработчики Цикл
				Если СтрЧислоВхождений(Обработчик.Версия, ".") = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПерваяЦифраОбработчика = СтрРазделить(Обработчик.Версия,".")[0];
				Если Число(ПерваяЦифраОбработчика) > Число(ПерваяЦифраВерсии) Тогда
					Ошибки.Добавить(Символы.Таб + Обработчик.Версия + " " + Обработчик.Процедура);
				КонецЕсли;
			КонецЦикла;
			Если Ошибки.Количество() > 0 Тогда
				ОшибкиВерсии.Добавить(Новый Структура("Подсистема, Ошибки", Подсистема + " " + Итерация.Версия, Ошибки));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ОшибкиВерсии.Количество() Тогда
		ТекстСообщения = 
			"Обнаружено не соответствие первой цифры номера версии у обработчиков.
			|Следующие обработчики никогда не выполнятся:" + Символы.ПС;
		Для Каждого Описание Из ОшибкиВерсии Цикл
			Текст = Описание.Подсистема + ":" + Символы.ПС;
			Текст = Текст + СтрСоединить(Описание.Ошибки, Символы.ПС);
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС) + Текст;
		КонецЦикла;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#Область ПереносРеквизитаУточнениеФизическогоЛица

Процедура ЗаполнитьСписокФизическихЛицКОбработке(Параметры) Экспорт
	
	МетаданныеСправочника = Метаданные.Справочники.ФизическиеЛица;
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = МетаданныеСправочника.ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("УдалитьУточнение", МетаданныеСправочника) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.УточнениеНаименования = """"
	|	И ЛОЖЬ";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ", "ФизическиеЛица.УдалитьУточнение <> """"");
	
	СписокОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокОбъектов);
	
КонецПроцедуры

Процедура ОбработатьУточнениеФизическихЛиц(Параметры) Экспорт
	
	ПолноеИмяОбъекта  = "Справочник.ФизическиеЛица";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого ЭлементСправочника Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ЭлементСправочника.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ЗначенияРеквизитов = Новый Структура("УдалитьУточнение, УточнениеНаименования", "", "");
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, СправочникОбъект);
			
			ЗначенияРеквизитов.УточнениеНаименования = ЗначенияРеквизитов.УдалитьУточнение;
			ЗначенияРеквизитов.Удалить("УдалитьУточнение");
			ЗаполнитьЗначенияСвойств(СправочникОбъект, ЗначенияРеквизитов);
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЭлементСправочника.Ссылка);
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьНазначенияБезЗаказа

Процедура УстановитьКонстантуИспользоватьНазначенияБезЗаказа() Экспорт
	
	ОбеспечениеСервер.ИспользоватьНазначенияБезЗаказаВычислитьИЗаписать();
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_НеИспользоватьНазначенияБезЗаказа

Процедура УстановитьКонстантуНеИспользоватьНазначенияБезЗаказа() Экспорт
	
	ОбеспечениеСервер.НеИспользоватьНазначенияБезЗаказаВычислитьИЗаписать();
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ПредставлениеВходящихДокументов

Процедура УстановитьКонстантуПредставлениеВходящихДокументов() Экспорт
	
	Если ЗначениеЗаполнено(Константы.ПредставлениеВходящихДокументов.Получить()) Тогда
		Возврат; // уже установлена
	КонецЕсли;
	Константы.ПредставлениеВходящихДокументов.Установить(
		Перечисления.СпособыПредставленияВходящихДокументов.Стандартное);
	
КонецПроцедуры

#КонецОбласти
//++ Локализация

#Область УстановкаКонстанты_НациональныеРеквизитыБанковскихСчетов

Процедура УстановитьКонстантуНациональныеРеквизитыБанковскихСчетов() Экспорт
	
	Если Константы.НациональныеРеквизитыБанковскихСчетов.Получить() Тогда
		Возврат; // уже установлена
	КонецЕсли;

	Константы.НациональныеРеквизитыБанковскихСчетов.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти
//-- Локализация

#Область УстановкаКонстанты_ИспользоватьАктыРасхождений

Процедура ИспользоватьАктыРасхожденийПослеПриемкиИОтгрузки_ОбработатьДанныеДляПереходаНаНовуюВерсию_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьАктыРасхожденийПослеПриемкиИОтгрузки_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ИспользоватьАктыРасхожденийПослеОтгрузки
	|ИЗ
	|	Константа.ИспользоватьАктыРасхожденийПослеОтгрузки КАК
	|		ИспользоватьАктыРасхожденийПослеОтгрузки,
	|	Константа.УдалитьИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам КАК
	|		ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам,
	|	Константа.УдалитьИспользоватьАктыРасхожденийПослеОтгрузкиПоОтгрузкамТоваровСХранения КАК
	|		ИспользоватьАктыРасхожденийПослеОтгрузкиПоОтгрузкамТоваровСХранения,
	|	Константа.УдалитьИспользоватьАктыРасхожденийПослеОтгрузкиПоПередачамХранителю КАК
	|		ИспользоватьАктыРасхожденийПослеОтгрузкиПоПередачамХранителю
	|ГДЕ
	|	НЕ ИспользоватьАктыРасхожденийПослеОтгрузки.Значение
	|	И (ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.Значение
	|	ИЛИ ИспользоватьАктыРасхожденийПослеОтгрузкиПоОтгрузкамТоваровСХранения.Значение
	|	ИЛИ ИспользоватьАктыРасхожденийПослеОтгрузкиПоПередачамХранителю.Значение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ИспользоватьАктыРасхожденийПослеПриемки
	|ИЗ
	|	Константа.ИспользоватьАктыРасхожденийПослеПриемки КАК
	|		ИспользоватьАктыРасхожденийПослеПриемки,
	|	Константа.УдалитьИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам КАК
	|		ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам,
	|	Константа.УдалитьИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениямТоваровОтХранителя КАК
	|		ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениямТоваровОтХранителя,
	|	Константа.УдалитьИспользоватьАктыРасхожденийПослеПриемкиПоПриемкамТоваровНаХранение КАК
	|		ИспользоватьАктыРасхожденийПослеПриемкиПоПриемкамТоваровНаХранение
	|ГДЕ
	|	НЕ ИспользоватьАктыРасхожденийПослеПриемки.Значение
	|	И (ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.Значение
	|	ИЛИ ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениямТоваровОтХранителя.Значение
	|	ИЛИ ИспользоватьАктыРасхожденийПослеПриемкиПоПриемкамТоваровНаХранение.Значение)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Не Результат[0].Пустой()
		ИЛИ Не Результат[1].Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Если Не Результат[0].Пустой() Тогда
				МенеджерЗначения = Константы.ИспользоватьАктыРасхожденийПослеОтгрузки.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Результат[1].Пустой() Тогда
				МенеджерЗначения = Константы.ИспользоватьАктыРасхожденийПослеПриемки.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось включить использование актов о расхождениях после отгрузки или приемки: %Причина%'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстСообщения);
				
		КонецПопытки;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

//-- Локализация

#КонецОбласти

#КонецОбласти
